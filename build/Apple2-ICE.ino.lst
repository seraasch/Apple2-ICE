
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc85 	bl	60001e40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc40 	bl	60001e08 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc45 	bl	60001e38 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3f 	bl	60001e30 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00012518 	.word	0x00012518
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60014478 	.word	0x60014478
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	0000a145 	.word	0x0000a145
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000b55d 	.word	0x0000b55d
600015f4:	20018868 	.word	0x20018868
600015f8:	0000b561 	.word	0x0000b561
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001886c 	.word	0x2001886c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9fe 	bl	60001e28 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	2001889f 	.word	0x2001889f
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018858 	.word	0x20018858
60001c50:	20018854 	.word	0x20018854
60001c54:	2001885c 	.word	0x2001885c
60001c58:	20018860 	.word	0x20018860
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	0000a321 	.word	0x0000a321

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8cc 	bl	60001e18 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f899 	bl	60001e10 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f891 	bl	60001e20 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	0000a509 	.word	0x0000a509

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20018899 	.word	0x20018899

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__pwm_init_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__pwm_init_veneer+0x4>
60001e0c:	0000b8ed 	.word	0x0000b8ed

60001e10 <__delay_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__delay_veneer+0x4>
60001e14:	00009e85 	.word	0x00009e85

60001e18 <__usb_init_serialnumber_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__usb_init_serialnumber_veneer+0x4>
60001e1c:	0000ac79 	.word	0x0000ac79

60001e20 <__memset_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__memset_veneer+0x4>
60001e24:	0000cafd 	.word	0x0000cafd

60001e28 <__sm_set_pool_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__sm_set_pool_veneer+0x4>
60001e2c:	0000ba55 	.word	0x0000ba55

60001e30 <__main_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__main_veneer+0x4>
60001e34:	00009f9d 	.word	0x00009f9d

60001e38 <____libc_init_array_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <____libc_init_array_veneer+0x4>
60001e3c:	0000cdb5 	.word	0x0000cdb5

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	0000b581 	.word	0x0000b581

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 0000996d                       E...m...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	6001a000 	.word	0x6001a000

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f009 fd71 	bl	9b54 <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f009 fd6b 	bl	9b54 <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f009 fd65 	bl	9b54 <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f009 fcfd 	bl	9aa4 <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f009 fcf9 	bl	9aa4 <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f009 fcf6 	bl	9aa4 <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <Print::println(char const*) [clone .isra.0]>:
      cc:	b538      	push	{r3, r4, r5, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	b149      	cbz	r1, e6 <Print::println(char const*) [clone .isra.0]+0x1a>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4608      	mov	r0, r1
      d4:	460d      	mov	r5, r1
      d6:	f00d f873 	bl	d1c0 <strlen>
      da:	6823      	ldr	r3, [r4, #0]
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	4602      	mov	r2, r0
      de:	4629      	mov	r1, r5
      e0:	685b      	ldr	r3, [r3, #4]
        return("");
      e2:	4620      	mov	r0, r4
      e4:	4798      	blx	r3
      e6:	4620      	mov	r0, r4
      e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}
      ec:	f009 bc9a 	b.w	9a24 <Print::println()>

000000f0 <OpDecoder::~OpDecoder()>:
      f0:	b510      	push	{r4, lr}
      f2:	4604      	mov	r4, r0
      f4:	3020      	adds	r0, #32
      f6:	f009 fcd5 	bl	9aa4 <String::~String()>
      fa:	f104 0010 	add.w	r0, r4, #16
      fe:	f009 fcd1 	bl	9aa4 <String::~String()>
     102:	4620      	mov	r0, r4


// OPCODE,MNEMONIC,OPERANDS,FLAGS,CYCLES,LENGTH

struct OpDecoder {
     104:	f009 fcce 	bl	9aa4 <String::~String()>
     108:	4620      	mov	r0, r4
     10a:	bd10      	pop	{r4, pc}

0000010c <initialize_opcode_info()>:
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newbuffer) {
     110:	b08f      	sub	sp, #60	; 0x3c
     112:	4ccd      	ldr	r4, [pc, #820]	; (448 <initialize_opcode_info()+0x33c>)
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	49cd      	ldr	r1, [pc, #820]	; (44c <initialize_opcode_info()+0x340>)
		capacity = maxStrLen;
     116:	f240 2b03 	movw	fp, #515	; 0x203
		return 1;
     11a:	a801      	add	r0, sp, #4
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	4dcc      	ldr	r5, [pc, #816]	; (450 <initialize_opcode_info()+0x344>)
     11e:	f009 fcfd 	bl	9b1c <String::String(char const*)>
     122:	4621      	mov	r1, r4
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	a805      	add	r0, sp, #20
	mask = p->mask;
     126:	f8df 9368 	ldr.w	r9, [pc, #872]	; 490 <initialize_opcode_info()+0x384>
	if (pinmode & mask) {
     12a:	f009 fcf7 	bl	9b1c <String::String(char const*)>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	49c9      	ldr	r1, [pc, #804]	; (454 <initialize_opcode_info()+0x348>)
     130:	a809      	add	r0, sp, #36	; 0x24
	pinmode = *(p->reg + 1);
     132:	4fc9      	ldr	r7, [pc, #804]	; (458 <initialize_opcode_info()+0x34c>)
	mask = p->mask;
     134:	f009 fcf2 	bl	9b1c <String::String(char const*)>
	if (pinmode & mask) {
     138:	f240 1307 	movw	r3, #263	; 0x107
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	a901      	add	r1, sp, #4
     13e:	4628      	mov	r0, r5
     140:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     144:	f7ff ff90 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     148:	a801      	add	r0, sp, #4
     14a:	f8df a348 	ldr.w	sl, [pc, #840]	; 494 <initialize_opcode_info()+0x388>
     14e:	f7ff ffcf 	bl	f0 <OpDecoder::~OpDecoder()>
     152:	4649      	mov	r1, r9
     154:	a801      	add	r0, sp, #4
     156:	4ec1      	ldr	r6, [pc, #772]	; (45c <initialize_opcode_info()+0x350>)
     158:	f009 fce0 	bl	9b1c <String::String(char const*)>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	49c0      	ldr	r1, [pc, #768]	; (460 <initialize_opcode_info()+0x354>)
     15e:	a805      	add	r0, sp, #20
     160:	f8df 8334 	ldr.w	r8, [pc, #820]	; 498 <initialize_opcode_info()+0x38c>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     164:	f009 fcda 	bl	9b1c <String::String(char const*)>
     168:	4639      	mov	r1, r7
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	a809      	add	r0, sp, #36	; 0x24
     16c:	f009 fcd6 	bl	9b1c <String::String(char const*)>
     170:	f240 2306 	movw	r3, #518	; 0x206
     174:	a901      	add	r1, sp, #4
     176:	f105 0034 	add.w	r0, r5, #52	; 0x34
     17a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     17e:	f7ff ff73 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     182:	aa01      	add	r2, sp, #4
     184:	4610      	mov	r0, r2
     186:	f7ff ffb3 	bl	f0 <OpDecoder::~OpDecoder()>
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     18a:	aa01      	add	r2, sp, #4
     18c:	4649      	mov	r1, r9
     18e:	4610      	mov	r0, r2
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	f009 fcc4 	bl	9b1c <String::String(char const*)>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	aa05      	add	r2, sp, #20
     196:	4651      	mov	r1, sl
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4610      	mov	r0, r2
     19a:	f009 fcbf 	bl	9b1c <String::String(char const*)>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     19e:	aa09      	add	r2, sp, #36	; 0x24
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1a0:	4639      	mov	r1, r7
     1a2:	4610      	mov	r0, r2
     1a4:	f009 fcba 	bl	9b1c <String::String(char const*)>
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	a901      	add	r1, sp, #4
     1aa:	f505 7082 	add.w	r0, r5, #260	; 0x104
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1ae:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     1b2:	f7ff ff59 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>

	// write out computed CTRL
	port->CTRL = ctrl;
     1b6:	aa01      	add	r2, sp, #4

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 49c <initialize_opcode_info()+0x390>
     1bc:	4610      	mov	r0, r2
     1be:	f7ff ff97 	bl	f0 <OpDecoder::~OpDecoder()>

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c2:	aa01      	add	r2, sp, #4
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	4659      	mov	r1, fp
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c6:	4610      	mov	r0, r2
     1c8:	f009 fca8 	bl	9b1c <String::String(char const*)>
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1cc:	aa05      	add	r2, sp, #20
     1ce:	4651      	mov	r1, sl
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d0:	4610      	mov	r0, r2
	port->STAT = c;
     1d2:	f009 fca3 	bl	9b1c <String::String(char const*)>
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d6:	aa09      	add	r2, sp, #36	; 0x24
     1d8:	4631      	mov	r1, r6
     1da:	4610      	mov	r0, r2
     1dc:	f009 fc9e 	bl	9b1c <String::String(char const*)>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	f240 2205 	movw	r2, #517	; 0x205
};
     1e4:	a901      	add	r1, sp, #4
     1e6:	f505 709c 	add.w	r0, r5, #312	; 0x138
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	f7ff ff3b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     1f2:	a901      	add	r1, sp, #4
     1f4:	4608      	mov	r0, r1
     1f6:	f7ff ff7b 	bl	f0 <OpDecoder::~OpDecoder()>
     1fa:	499a      	ldr	r1, [pc, #616]	; (464 <initialize_opcode_info()+0x358>)
     1fc:	a801      	add	r0, sp, #4
     1fe:	f009 fc8d 	bl	9b1c <String::String(char const*)>
     202:	4621      	mov	r1, r4
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	a805      	add	r0, sp, #20
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     206:	f009 fc89 	bl	9b1c <String::String(char const*)>
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     20a:	4621      	mov	r1, r4
     20c:	a809      	add	r0, sp, #36	; 0x24
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     20e:	f009 fc85 	bl	9b1c <String::String(char const*)>
     212:	f240 1203 	movw	r2, #259	; 0x103
     216:	a901      	add	r1, sp, #4
     218:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     21c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     220:	f7ff ff22 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     224:	a901      	add	r1, sp, #4
     226:	4608      	mov	r0, r1
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	f7ff ff62 	bl	f0 <OpDecoder::~OpDecoder()>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	4649      	mov	r1, r9
     22e:	a801      	add	r0, sp, #4
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	f009 fc74 	bl	9b1c <String::String(char const*)>
     234:	a905      	add	r1, sp, #20
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	4608      	mov	r0, r1
     238:	498b      	ldr	r1, [pc, #556]	; (468 <initialize_opcode_info()+0x35c>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	f009 fc6f 	bl	9b1c <String::String(char const*)>
     23e:	4639      	mov	r1, r7
};
     240:	a809      	add	r0, sp, #36	; 0x24
     242:	f009 fc6b 	bl	9b1c <String::String(char const*)>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     246:	f240 2302 	movw	r3, #514	; 0x202
     24a:	a901      	add	r1, sp, #4
     24c:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
     250:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     254:	f7ff ff08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     258:	a801      	add	r0, sp, #4
     25a:	f7ff ff49 	bl	f0 <OpDecoder::~OpDecoder()>
     25e:	4659      	mov	r1, fp
     260:	a801      	add	r0, sp, #4
     262:	f009 fc5b 	bl	9b1c <String::String(char const*)>
     266:	4b81      	ldr	r3, [pc, #516]	; (46c <initialize_opcode_info()+0x360>)
     268:	a805      	add	r0, sp, #20
     26a:	4619      	mov	r1, r3
     26c:	f009 fc56 	bl	9b1c <String::String(char const*)>
     270:	4631      	mov	r1, r6
     272:	a809      	add	r0, sp, #36	; 0x24
     274:	f009 fc52 	bl	9b1c <String::String(char const*)>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     278:	f44f 7381 	mov.w	r3, #258	; 0x102
				val *= 10.0f;
     27c:	a901      	add	r1, sp, #4
     27e:	f505 7002 	add.w	r0, r5, #520	; 0x208
     282:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			while (newPrecision > 0) {
     286:	f7ff feef 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     28a:	a801      	add	r0, sp, #4
     28c:	f7ff ff30 	bl	f0 <OpDecoder::~OpDecoder()>
     290:	4649      	mov	r1, r9
     292:	a801      	add	r0, sp, #4
     294:	f009 fc42 	bl	9b1c <String::String(char const*)>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     298:	4641      	mov	r1, r8
     29a:	a805      	add	r0, sp, #20
     29c:	f009 fc3e 	bl	9b1c <String::String(char const*)>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     2a0:	4639      	mov	r1, r7
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     2a2:	a809      	add	r0, sp, #36	; 0x24
     2a4:	f009 fc3a 	bl	9b1c <String::String(char const*)>
     2a8:	f44f 7341 	mov.w	r3, #772	; 0x304
     2ac:	a901      	add	r1, sp, #4
     2ae:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
     2b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		int ndigs = (val<0) ? 4 : 3;
     2b6:	f7ff fed7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     2ba:	a801      	add	r0, sp, #4
     2bc:	f7ff ff18 	bl	f0 <OpDecoder::~OpDecoder()>
     2c0:	4659      	mov	r1, fp
     2c2:	a801      	add	r0, sp, #4
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c4:	f009 fc2a 	bl	9b1c <String::String(char const*)>
		if (width<0) {
     2c8:	4641      	mov	r1, r8
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2ca:	a805      	add	r0, sp, #20
     2cc:	f009 fc26 	bl	9b1c <String::String(char const*)>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	4631      	mov	r1, r6
     2d2:	a809      	add	r0, sp, #36	; 0x24
     2d4:	f009 fc22 	bl	9b1c <String::String(char const*)>
     2d8:	f240 3e06 	movw	lr, #774	; 0x306
     2dc:	a901      	add	r1, sp, #4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
     2e2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     2e6:	f7ff febf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
		while (awidth) {
     2ea:	a801      	add	r0, sp, #4
     2ec:	f7ff ff00 	bl	f0 <OpDecoder::~OpDecoder()>
     2f0:	495f      	ldr	r1, [pc, #380]	; (470 <initialize_opcode_info()+0x364>)
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	a801      	add	r0, sp, #4
     2f4:	f009 fc12 	bl	9b1c <String::String(char const*)>
     2f8:	495e      	ldr	r1, [pc, #376]	; (474 <initialize_opcode_info()+0x368>)
     2fa:	a805      	add	r0, sp, #20
     2fc:	f009 fc0e 	bl	9b1c <String::String(char const*)>
		while (awidth) {
     300:	4621      	mov	r1, r4
			while (awidth) {
     302:	a809      	add	r0, sp, #36	; 0x24
				*buf++ = ' ';
     304:	f009 fc0a 	bl	9b1c <String::String(char const*)>
     308:	f240 2102 	movw	r1, #514	; 0x202
     30c:	f505 7050 	add.w	r0, r5, #832	; 0x340
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     310:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	a901      	add	r1, sp, #4
     316:	f7ff fea7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     31a:	a801      	add	r0, sp, #4
     31c:	f7ff fee8 	bl	f0 <OpDecoder::~OpDecoder()>
     320:	4649      	mov	r1, r9
     322:	a801      	add	r0, sp, #4
		while (awidth) {
     324:	f009 fbfa 	bl	9b1c <String::String(char const*)>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	a805      	add	r0, sp, #20
     32a:	4953      	ldr	r1, [pc, #332]	; (478 <initialize_opcode_info()+0x36c>)
     32c:	f009 fbf6 	bl	9b1c <String::String(char const*)>
     330:	4639      	mov	r1, r7
     332:	a809      	add	r0, sp, #36	; 0x24
		while (awidth) {
     334:	f009 fbf2 	bl	9b1c <String::String(char const*)>
		if (val<0) *buf++ = '-';
     338:	aa01      	add	r2, sp, #4
     33a:	f240 2c05 	movw	ip, #517	; 0x205
     33e:	f505 705d 	add.w	r0, r5, #884	; 0x374
     342:	4611      	mov	r1, r2
     344:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     348:	f7ff fe8e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
     34c:	a801      	add	r0, sp, #4
     34e:	f7ff fecf 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     352:	4649      	mov	r1, r9
     354:	a801      	add	r0, sp, #4
     356:	f009 fbe1 	bl	9b1c <String::String(char const*)>
     35a:	4948      	ldr	r1, [pc, #288]	; (47c <initialize_opcode_info()+0x370>)
     35c:	a805      	add	r0, sp, #20
     35e:	f009 fbdd 	bl	9b1c <String::String(char const*)>
     362:	4639      	mov	r1, r7
     364:	a809      	add	r0, sp, #36	; 0x24
     366:	f009 fbd9 	bl	9b1c <String::String(char const*)>
     36a:	aa01      	add	r2, sp, #4
     36c:	f44f 7c01 	mov.w	ip, #516	; 0x204
     370:	f205 4044 	addw	r0, r5, #1092	; 0x444
     374:	4611      	mov	r1, r2
     376:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     37a:	f7ff fe75 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     37e:	a801      	add	r0, sp, #4
     380:	f7ff feb6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     384:	4659      	mov	r1, fp
     386:	a801      	add	r0, sp, #4
     388:	f009 fbc8 	bl	9b1c <String::String(char const*)>
     38c:	493b      	ldr	r1, [pc, #236]	; (47c <initialize_opcode_info()+0x370>)
     38e:	a805      	add	r0, sp, #20
     390:	f009 fbc4 	bl	9b1c <String::String(char const*)>
     394:	4631      	mov	r1, r6
     396:	a809      	add	r0, sp, #36	; 0x24
     398:	f009 fbc0 	bl	9b1c <String::String(char const*)>
     39c:	aa01      	add	r2, sp, #4
     39e:	f240 2006 	movw	r0, #518	; 0x206
     3a2:	4611      	mov	r1, r2
     3a4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     3a8:	f505 608f 	add.w	r0, r5, #1144	; 0x478
     3ac:	f7ff fe5c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3b0:	aa01      	add	r2, sp, #4
     3b2:	4610      	mov	r0, r2
     3b4:	f7ff fe9c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     3b8:	aa01      	add	r2, sp, #4
     3ba:	4931      	ldr	r1, [pc, #196]	; (480 <initialize_opcode_info()+0x374>)
     3bc:	4610      	mov	r0, r2
     3be:	f009 fbad 	bl	9b1c <String::String(char const*)>
     3c2:	aa05      	add	r2, sp, #20
     3c4:	4621      	mov	r1, r4
     3c6:	4610      	mov	r0, r2
     3c8:	f009 fba8 	bl	9b1c <String::String(char const*)>
     3cc:	aa09      	add	r2, sp, #36	; 0x24
     3ce:	492d      	ldr	r1, [pc, #180]	; (484 <initialize_opcode_info()+0x378>)
     3d0:	4610      	mov	r0, r2
     3d2:	f009 fba3 	bl	9b1c <String::String(char const*)>
     3d6:	f44f 7281 	mov.w	r2, #258	; 0x102
     3da:	a901      	add	r1, sp, #4
     3dc:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
     3e0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     3e4:	f7ff fe40 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3e8:	a801      	add	r0, sp, #4
     3ea:	f7ff fe81 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     3ee:	4649      	mov	r1, r9
     3f0:	a801      	add	r0, sp, #4
     3f2:	f009 fb93 	bl	9b1c <String::String(char const*)>
     3f6:	a805      	add	r0, sp, #20
     3f8:	4923      	ldr	r1, [pc, #140]	; (488 <initialize_opcode_info()+0x37c>)
     3fa:	f009 fb8f 	bl	9b1c <String::String(char const*)>
     3fe:	4639      	mov	r1, r7
     400:	a809      	add	r0, sp, #36	; 0x24
     402:	f009 fb8b 	bl	9b1c <String::String(char const*)>
     406:	f44f 7341 	mov.w	r3, #772	; 0x304
     40a:	a901      	add	r1, sp, #4
     40c:	f205 5014 	addw	r0, r5, #1300	; 0x514
     410:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     414:	f7ff fe28 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     418:	a801      	add	r0, sp, #4
     41a:	f7ff fe69 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     41e:	4649      	mov	r1, r9
     420:	a801      	add	r0, sp, #4
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     422:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     426:	f009 fb79 	bl	9b1c <String::String(char const*)>
     42a:	4918      	ldr	r1, [pc, #96]	; (48c <initialize_opcode_info()+0x380>)
     42c:	a805      	add	r0, sp, #20
     42e:	f009 fb75 	bl	9b1c <String::String(char const*)>
     432:	4639      	mov	r1, r7
     434:	a809      	add	r0, sp, #36	; 0x24
     436:	f009 fb71 	bl	9b1c <String::String(char const*)>
     43a:	f44f 7341 	mov.w	r3, #772	; 0x304
     43e:	a901      	add	r1, sp, #4
     440:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
     444:	e02c      	b.n	4a0 <initialize_opcode_info()+0x394>
     446:	bf00      	nop
     448:	2000047c 	.word	0x2000047c
     44c:	2000087c 	.word	0x2000087c
     450:	20015418 	.word	0x20015418
     454:	20000880 	.word	0x20000880
     458:	20000890 	.word	0x20000890
     45c:	2000089c 	.word	0x2000089c
     460:	20000888 	.word	0x20000888
     464:	200008a0 	.word	0x200008a0
     468:	200008a4 	.word	0x200008a4
     46c:	200008a8 	.word	0x200008a8
     470:	200008b0 	.word	0x200008b0
     474:	200008b4 	.word	0x200008b4
     478:	200008b8 	.word	0x200008b8
     47c:	200008c0 	.word	0x200008c0
     480:	200008c8 	.word	0x200008c8
     484:	200008cc 	.word	0x200008cc
     488:	200008d0 	.word	0x200008d0
     48c:	200008d8 	.word	0x200008d8
     490:	20000884 	.word	0x20000884
     494:	20000894 	.word	0x20000894
     498:	200008ac 	.word	0x200008ac
     49c:	20000898 	.word	0x20000898
     4a0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     4a4:	f7ff fde0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4a8:	a801      	add	r0, sp, #4
     4aa:	f7ff fe21 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     4ae:	4659      	mov	r1, fp
     4b0:	a801      	add	r0, sp, #4
	opcode_info[0x20] = {"JSR","abs","",6,3};
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     4b2:	f240 2b03 	movw	fp, #515	; 0x203
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     4b6:	f009 fb31 	bl	9b1c <String::String(char const*)>
     4ba:	49d0      	ldr	r1, [pc, #832]	; (7fc <initialize_opcode_info()+0x6f0>)
     4bc:	a805      	add	r0, sp, #20
     4be:	f009 fb2d 	bl	9b1c <String::String(char const*)>
     4c2:	4631      	mov	r1, r6
     4c4:	a809      	add	r0, sp, #36	; 0x24
     4c6:	f009 fb29 	bl	9b1c <String::String(char const*)>
     4ca:	a901      	add	r1, sp, #4
     4cc:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
     4d0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     4d4:	f7ff fdc8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4d8:	a801      	add	r0, sp, #4
     4da:	f7ff fe09 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     4de:	49c8      	ldr	r1, [pc, #800]	; (800 <initialize_opcode_info()+0x6f4>)
     4e0:	a801      	add	r0, sp, #4
     4e2:	f240 3906 	movw	r9, #774	; 0x306
     4e6:	f009 fb19 	bl	9b1c <String::String(char const*)>
     4ea:	4641      	mov	r1, r8
     4ec:	a805      	add	r0, sp, #20
     4ee:	f009 fb15 	bl	9b1c <String::String(char const*)>
     4f2:	4621      	mov	r1, r4
     4f4:	a809      	add	r0, sp, #36	; 0x24
     4f6:	f009 fb11 	bl	9b1c <String::String(char const*)>
     4fa:	a901      	add	r1, sp, #4
     4fc:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
     500:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     504:	f8df 932c 	ldr.w	r9, [pc, #812]	; 834 <initialize_opcode_info()+0x728>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     508:	f7ff fdae 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     50c:	a801      	add	r0, sp, #4
     50e:	f7ff fdef 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     512:	4649      	mov	r1, r9
     514:	a801      	add	r0, sp, #4
     516:	f009 fb01 	bl	9b1c <String::String(char const*)>
     51a:	49ba      	ldr	r1, [pc, #744]	; (804 <initialize_opcode_info()+0x6f8>)
     51c:	a805      	add	r0, sp, #20
     51e:	f009 fafd 	bl	9b1c <String::String(char const*)>
     522:	4639      	mov	r1, r7
     524:	a809      	add	r0, sp, #36	; 0x24
     526:	f009 faf9 	bl	9b1c <String::String(char const*)>
     52a:	f240 2006 	movw	r0, #518	; 0x206
     52e:	a901      	add	r1, sp, #4
     530:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     534:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     538:	f7ff fd96 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     53c:	f10d 0e04 	add.w	lr, sp, #4
     540:	4670      	mov	r0, lr
     542:	f7ff fdd5 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     546:	f10d 0e04 	add.w	lr, sp, #4
     54a:	49af      	ldr	r1, [pc, #700]	; (808 <initialize_opcode_info()+0x6fc>)
     54c:	4670      	mov	r0, lr
     54e:	f009 fae5 	bl	9b1c <String::String(char const*)>
     552:	f10d 0e14 	add.w	lr, sp, #20
     556:	4651      	mov	r1, sl
     558:	4670      	mov	r0, lr
     55a:	f009 fadf 	bl	9b1c <String::String(char const*)>
     55e:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     562:	49aa      	ldr	r1, [pc, #680]	; (80c <initialize_opcode_info()+0x700>)
     564:	4670      	mov	r0, lr
     566:	f009 fad9 	bl	9b1c <String::String(char const*)>
     56a:	a901      	add	r1, sp, #4
     56c:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
     570:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     574:	f7ff fd78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     578:	f10d 0e04 	add.w	lr, sp, #4
     57c:	4670      	mov	r0, lr
     57e:	f7ff fdb7 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     582:	f10d 0e04 	add.w	lr, sp, #4
     586:	4649      	mov	r1, r9
     588:	4670      	mov	r0, lr
     58a:	f009 fac7 	bl	9b1c <String::String(char const*)>
     58e:	f10d 0e14 	add.w	lr, sp, #20
     592:	4651      	mov	r1, sl
     594:	4670      	mov	r0, lr
     596:	f009 fac1 	bl	9b1c <String::String(char const*)>
     59a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     59e:	4639      	mov	r1, r7
     5a0:	4670      	mov	r0, lr
     5a2:	f009 fabb 	bl	9b1c <String::String(char const*)>
     5a6:	a901      	add	r1, sp, #4
     5a8:	f205 7084 	addw	r0, r5, #1924	; 0x784
     5ac:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     5b0:	f8df b284 	ldr.w	fp, [pc, #644]	; 838 <initialize_opcode_info()+0x72c>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     5b4:	f7ff fd58 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5b8:	a801      	add	r0, sp, #4
     5ba:	f7ff fd99 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     5be:	4659      	mov	r1, fp
     5c0:	a801      	add	r0, sp, #4
     5c2:	f009 faab 	bl	9b1c <String::String(char const*)>
     5c6:	4651      	mov	r1, sl
     5c8:	a805      	add	r0, sp, #20
     5ca:	f009 faa7 	bl	9b1c <String::String(char const*)>
     5ce:	4631      	mov	r1, r6
     5d0:	a809      	add	r0, sp, #36	; 0x24
     5d2:	f009 faa3 	bl	9b1c <String::String(char const*)>
     5d6:	f240 2e05 	movw	lr, #517	; 0x205
     5da:	a901      	add	r1, sp, #4
     5dc:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
     5e0:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     5e4:	f7ff fd40 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5e8:	a801      	add	r0, sp, #4
     5ea:	f7ff fd81 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     5ee:	4988      	ldr	r1, [pc, #544]	; (810 <initialize_opcode_info()+0x704>)
     5f0:	a801      	add	r0, sp, #4
     5f2:	f009 fa93 	bl	9b1c <String::String(char const*)>
     5f6:	4621      	mov	r1, r4
     5f8:	a805      	add	r0, sp, #20
     5fa:	f009 fa8f 	bl	9b1c <String::String(char const*)>
     5fe:	4621      	mov	r1, r4
     600:	a809      	add	r0, sp, #36	; 0x24
     602:	f009 fa8b 	bl	9b1c <String::String(char const*)>
     606:	f44f 7182 	mov.w	r1, #260	; 0x104
     60a:	f505 6002 	add.w	r0, r5, #2080	; 0x820
     60e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     612:	a901      	add	r1, sp, #4
     614:	f7ff fd28 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     618:	a801      	add	r0, sp, #4
     61a:	f7ff fd69 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     61e:	4649      	mov	r1, r9
     620:	a801      	add	r0, sp, #4
     622:	f009 fa7b 	bl	9b1c <String::String(char const*)>
     626:	497b      	ldr	r1, [pc, #492]	; (814 <initialize_opcode_info()+0x708>)
     628:	a805      	add	r0, sp, #20
     62a:	f009 fa77 	bl	9b1c <String::String(char const*)>
     62e:	4639      	mov	r1, r7
     630:	a809      	add	r0, sp, #36	; 0x24
     632:	f009 fa73 	bl	9b1c <String::String(char const*)>
     636:	f240 2102 	movw	r1, #514	; 0x202
     63a:	f605 0054 	addw	r0, r5, #2132	; 0x854
     63e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     642:	a901      	add	r1, sp, #4
     644:	f7ff fd10 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     648:	a801      	add	r0, sp, #4
     64a:	f7ff fd51 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     64e:	4659      	mov	r1, fp
     650:	a801      	add	r0, sp, #4
     652:	f009 fa63 	bl	9b1c <String::String(char const*)>
     656:	4b70      	ldr	r3, [pc, #448]	; (818 <initialize_opcode_info()+0x70c>)
     658:	a805      	add	r0, sp, #20
     65a:	4619      	mov	r1, r3
     65c:	f009 fa5e 	bl	9b1c <String::String(char const*)>
     660:	4631      	mov	r1, r6
     662:	a809      	add	r0, sp, #36	; 0x24
     664:	f009 fa5a 	bl	9b1c <String::String(char const*)>
     668:	f44f 7281 	mov.w	r2, #258	; 0x102
     66c:	a901      	add	r1, sp, #4
     66e:	f605 0088 	addw	r0, r5, #2184	; 0x888
     672:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     676:	f7ff fcf7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     67a:	a801      	add	r0, sp, #4
     67c:	f7ff fd38 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     680:	4961      	ldr	r1, [pc, #388]	; (808 <initialize_opcode_info()+0x6fc>)
     682:	a801      	add	r0, sp, #4
     684:	f009 fa4a 	bl	9b1c <String::String(char const*)>
     688:	4641      	mov	r1, r8
     68a:	a805      	add	r0, sp, #20
     68c:	f009 fa46 	bl	9b1c <String::String(char const*)>
     690:	495e      	ldr	r1, [pc, #376]	; (80c <initialize_opcode_info()+0x700>)
     692:	a809      	add	r0, sp, #36	; 0x24
     694:	f009 fa42 	bl	9b1c <String::String(char const*)>
     698:	f44f 7341 	mov.w	r3, #772	; 0x304
     69c:	a901      	add	r1, sp, #4
     69e:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
     6a2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     6a6:	f7ff fcdf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6aa:	a801      	add	r0, sp, #4
     6ac:	f7ff fd20 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     6b0:	4649      	mov	r1, r9
     6b2:	a801      	add	r0, sp, #4
     6b4:	f009 fa32 	bl	9b1c <String::String(char const*)>
     6b8:	4641      	mov	r1, r8
     6ba:	a805      	add	r0, sp, #20
     6bc:	f009 fa2e 	bl	9b1c <String::String(char const*)>
     6c0:	4639      	mov	r1, r7
     6c2:	a809      	add	r0, sp, #36	; 0x24
     6c4:	f009 fa2a 	bl	9b1c <String::String(char const*)>
     6c8:	f44f 7341 	mov.w	r3, #772	; 0x304
     6cc:	a901      	add	r1, sp, #4
     6ce:	f605 1024 	addw	r0, r5, #2340	; 0x924
     6d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     6d6:	f7ff fcc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6da:	a801      	add	r0, sp, #4
     6dc:	f7ff fd08 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     6e0:	4659      	mov	r1, fp
     6e2:	a801      	add	r0, sp, #4
     6e4:	f009 fa1a 	bl	9b1c <String::String(char const*)>
     6e8:	4641      	mov	r1, r8
     6ea:	a805      	add	r0, sp, #20
     6ec:	f009 fa16 	bl	9b1c <String::String(char const*)>
     6f0:	4631      	mov	r1, r6
     6f2:	a809      	add	r0, sp, #36	; 0x24
     6f4:	f009 fa12 	bl	9b1c <String::String(char const*)>
     6f8:	f240 3206 	movw	r2, #774	; 0x306
     6fc:	a901      	add	r1, sp, #4
     6fe:	f605 1058 	addw	r0, r5, #2392	; 0x958
     702:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     706:	f7ff fcaf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     70a:	a801      	add	r0, sp, #4
     70c:	f7ff fcf0 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     710:	4942      	ldr	r1, [pc, #264]	; (81c <initialize_opcode_info()+0x710>)
     712:	a801      	add	r0, sp, #4
     714:	f009 fa02 	bl	9b1c <String::String(char const*)>
     718:	4941      	ldr	r1, [pc, #260]	; (820 <initialize_opcode_info()+0x714>)
     71a:	a805      	add	r0, sp, #20
     71c:	f009 f9fe 	bl	9b1c <String::String(char const*)>
     720:	4621      	mov	r1, r4
     722:	a809      	add	r0, sp, #36	; 0x24
     724:	f009 f9fa 	bl	9b1c <String::String(char const*)>
     728:	f240 2102 	movw	r1, #514	; 0x202
     72c:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
     730:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     734:	a901      	add	r1, sp, #4
     736:	f7ff fc97 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     73a:	a801      	add	r0, sp, #4
     73c:	f7ff fcd8 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     740:	4649      	mov	r1, r9
     742:	a801      	add	r0, sp, #4
     744:	f009 f9ea 	bl	9b1c <String::String(char const*)>
     748:	4936      	ldr	r1, [pc, #216]	; (824 <initialize_opcode_info()+0x718>)
     74a:	a805      	add	r0, sp, #20
     74c:	f009 f9e6 	bl	9b1c <String::String(char const*)>
     750:	4639      	mov	r1, r7
     752:	a809      	add	r0, sp, #36	; 0x24
     754:	f009 f9e2 	bl	9b1c <String::String(char const*)>
     758:	f240 2e05 	movw	lr, #517	; 0x205
     75c:	a901      	add	r1, sp, #4
     75e:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
     762:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     766:	f7ff fc7f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     76a:	a801      	add	r0, sp, #4
     76c:	f7ff fcc0 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     770:	4649      	mov	r1, r9
     772:	a801      	add	r0, sp, #4
     774:	f009 f9d2 	bl	9b1c <String::String(char const*)>
     778:	492b      	ldr	r1, [pc, #172]	; (828 <initialize_opcode_info()+0x71c>)
     77a:	a805      	add	r0, sp, #20
     77c:	f009 f9ce 	bl	9b1c <String::String(char const*)>
     780:	4639      	mov	r1, r7
     782:	a809      	add	r0, sp, #36	; 0x24
     784:	f009 f9ca 	bl	9b1c <String::String(char const*)>
     788:	f44f 7c01 	mov.w	ip, #516	; 0x204
     78c:	a901      	add	r1, sp, #4
     78e:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
     792:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     796:	f7ff fc67 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     79a:	a801      	add	r0, sp, #4
     79c:	f7ff fca8 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     7a0:	4659      	mov	r1, fp
     7a2:	a801      	add	r0, sp, #4
     7a4:	f009 f9ba 	bl	9b1c <String::String(char const*)>
     7a8:	491f      	ldr	r1, [pc, #124]	; (828 <initialize_opcode_info()+0x71c>)
     7aa:	a805      	add	r0, sp, #20
     7ac:	f009 f9b6 	bl	9b1c <String::String(char const*)>
     7b0:	4631      	mov	r1, r6
     7b2:	a809      	add	r0, sp, #36	; 0x24
     7b4:	f009 f9b2 	bl	9b1c <String::String(char const*)>
     7b8:	f240 2006 	movw	r0, #518	; 0x206
     7bc:	a901      	add	r1, sp, #4
     7be:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     7c2:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
     7c6:	f7ff fc4f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7ca:	a801      	add	r0, sp, #4
     7cc:	f7ff fc90 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     7d0:	4916      	ldr	r1, [pc, #88]	; (82c <initialize_opcode_info()+0x720>)
     7d2:	a801      	add	r0, sp, #4
     7d4:	f009 f9a2 	bl	9b1c <String::String(char const*)>
     7d8:	4621      	mov	r1, r4
     7da:	a805      	add	r0, sp, #20
     7dc:	f009 f99e 	bl	9b1c <String::String(char const*)>
     7e0:	4913      	ldr	r1, [pc, #76]	; (830 <initialize_opcode_info()+0x724>)
     7e2:	a809      	add	r0, sp, #36	; 0x24
     7e4:	f009 f99a 	bl	9b1c <String::String(char const*)>
     7e8:	f44f 7281 	mov.w	r2, #258	; 0x102
     7ec:	a901      	add	r1, sp, #4
     7ee:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
     7f2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     7f6:	f7ff fc37 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7fa:	e01f      	b.n	83c <initialize_opcode_info()+0x730>
     7fc:	200008d8 	.word	0x200008d8
     800:	200008e0 	.word	0x200008e0
     804:	20000888 	.word	0x20000888
     808:	200008e8 	.word	0x200008e8
     80c:	200008ec 	.word	0x200008ec
     810:	200008f4 	.word	0x200008f4
     814:	200008a4 	.word	0x200008a4
     818:	200008a8 	.word	0x200008a8
     81c:	200008f8 	.word	0x200008f8
     820:	200008b4 	.word	0x200008b4
     824:	200008b8 	.word	0x200008b8
     828:	200008c0 	.word	0x200008c0
     82c:	200008fc 	.word	0x200008fc
     830:	200008cc 	.word	0x200008cc
     834:	200008e4 	.word	0x200008e4
     838:	200008f0 	.word	0x200008f0
     83c:	a801      	add	r0, sp, #4
     83e:	f7ff fc57 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     842:	4649      	mov	r1, r9
     844:	a801      	add	r0, sp, #4
     846:	f009 f969 	bl	9b1c <String::String(char const*)>
     84a:	49cb      	ldr	r1, [pc, #812]	; (b78 <initialize_opcode_info()+0xa6c>)
     84c:	a805      	add	r0, sp, #20
     84e:	f009 f965 	bl	9b1c <String::String(char const*)>
     852:	4639      	mov	r1, r7
     854:	a809      	add	r0, sp, #36	; 0x24
     856:	f009 f961 	bl	9b1c <String::String(char const*)>
     85a:	f44f 7341 	mov.w	r3, #772	; 0x304
     85e:	a901      	add	r1, sp, #4
     860:	f605 3094 	addw	r0, r5, #2964	; 0xb94
     864:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     868:	f7ff fbfe 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     86c:	a801      	add	r0, sp, #4
     86e:	f7ff fc3f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     872:	4649      	mov	r1, r9
     874:	a801      	add	r0, sp, #4
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     876:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     87a:	f009 f94f 	bl	9b1c <String::String(char const*)>
     87e:	49bf      	ldr	r1, [pc, #764]	; (b7c <initialize_opcode_info()+0xa70>)
     880:	a805      	add	r0, sp, #20
     882:	f009 f94b 	bl	9b1c <String::String(char const*)>
     886:	4639      	mov	r1, r7
     888:	a809      	add	r0, sp, #36	; 0x24
     88a:	f009 f947 	bl	9b1c <String::String(char const*)>
     88e:	f44f 7341 	mov.w	r3, #772	; 0x304
     892:	a901      	add	r1, sp, #4
     894:	f605 4064 	addw	r0, r5, #3172	; 0xc64
     898:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     89c:	f7ff fbe4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8a0:	a801      	add	r0, sp, #4
     8a2:	f7ff fc25 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     8a6:	4659      	mov	r1, fp
     8a8:	a801      	add	r0, sp, #4
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     8aa:	f8df b304 	ldr.w	fp, [pc, #772]	; bb0 <initialize_opcode_info()+0xaa4>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     8ae:	f009 f935 	bl	9b1c <String::String(char const*)>
     8b2:	49b2      	ldr	r1, [pc, #712]	; (b7c <initialize_opcode_info()+0xa70>)
     8b4:	a805      	add	r0, sp, #20
     8b6:	f009 f931 	bl	9b1c <String::String(char const*)>
     8ba:	4631      	mov	r1, r6
     8bc:	a809      	add	r0, sp, #36	; 0x24
     8be:	f009 f92d 	bl	9b1c <String::String(char const*)>
     8c2:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     8c6:	f605 4998 	addw	r9, r5, #3224	; 0xc98
     8ca:	a901      	add	r1, sp, #4
     8cc:	4648      	mov	r0, r9
     8ce:	f7ff fbcb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8d2:	a801      	add	r0, sp, #4
     8d4:	f7ff fc0c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     8d8:	49a9      	ldr	r1, [pc, #676]	; (b80 <initialize_opcode_info()+0xa74>)
     8da:	a801      	add	r0, sp, #4
     8dc:	f009 f91e 	bl	9b1c <String::String(char const*)>
     8e0:	4621      	mov	r1, r4
     8e2:	a805      	add	r0, sp, #20
     8e4:	f009 f91a 	bl	9b1c <String::String(char const*)>
     8e8:	49a6      	ldr	r1, [pc, #664]	; (b84 <initialize_opcode_info()+0xa78>)
     8ea:	a809      	add	r0, sp, #36	; 0x24
     8ec:	f009 f916 	bl	9b1c <String::String(char const*)>
     8f0:	f44f 7383 	mov.w	r3, #262	; 0x106
     8f4:	a901      	add	r1, sp, #4
     8f6:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
     8fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     8fe:	f7ff fbb3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     902:	a801      	add	r0, sp, #4
     904:	f7ff fbf4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     908:	4659      	mov	r1, fp
     90a:	a801      	add	r0, sp, #4
     90c:	f009 f906 	bl	9b1c <String::String(char const*)>
     910:	499d      	ldr	r1, [pc, #628]	; (b88 <initialize_opcode_info()+0xa7c>)
     912:	a805      	add	r0, sp, #20
     914:	f009 f902 	bl	9b1c <String::String(char const*)>
     918:	4639      	mov	r1, r7
     91a:	a809      	add	r0, sp, #36	; 0x24
     91c:	f009 f8fe 	bl	9b1c <String::String(char const*)>
     920:	f240 2006 	movw	r0, #518	; 0x206
     924:	a901      	add	r1, sp, #4
     926:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     92a:	f605 5034 	addw	r0, r5, #3380	; 0xd34
     92e:	f7ff fb9b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     932:	a801      	add	r0, sp, #4
     934:	f7ff fbdc 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     938:	4659      	mov	r1, fp
     93a:	a801      	add	r0, sp, #4
     93c:	f009 f8ee 	bl	9b1c <String::String(char const*)>
     940:	4651      	mov	r1, sl
     942:	a805      	add	r0, sp, #20
     944:	f009 f8ea 	bl	9b1c <String::String(char const*)>
     948:	4639      	mov	r1, r7
     94a:	a809      	add	r0, sp, #36	; 0x24
     94c:	f009 f8e6 	bl	9b1c <String::String(char const*)>
     950:	f240 2e03 	movw	lr, #515	; 0x203
     954:	a901      	add	r1, sp, #4
     956:	f605 6004 	addw	r0, r5, #3588	; 0xe04
     95a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     95e:	f7ff fb83 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     962:	a801      	add	r0, sp, #4
     964:	f7ff fbc4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     968:	4988      	ldr	r1, [pc, #544]	; (b8c <initialize_opcode_info()+0xa80>)
     96a:	a801      	add	r0, sp, #4
     96c:	f009 f8d6 	bl	9b1c <String::String(char const*)>
     970:	4651      	mov	r1, sl
     972:	a805      	add	r0, sp, #20
     974:	f009 f8d2 	bl	9b1c <String::String(char const*)>
     978:	4631      	mov	r1, r6
     97a:	a809      	add	r0, sp, #36	; 0x24
     97c:	f009 f8ce 	bl	9b1c <String::String(char const*)>
     980:	f240 2e05 	movw	lr, #517	; 0x205
     984:	a901      	add	r1, sp, #4
     986:	f605 6038 	addw	r0, r5, #3640	; 0xe38
     98a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     98e:	f7ff fb6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     992:	a801      	add	r0, sp, #4
     994:	f7ff fbac 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     998:	497d      	ldr	r1, [pc, #500]	; (b90 <initialize_opcode_info()+0xa84>)
     99a:	a801      	add	r0, sp, #4
     99c:	f009 f8be 	bl	9b1c <String::String(char const*)>
     9a0:	4621      	mov	r1, r4
     9a2:	a805      	add	r0, sp, #20
     9a4:	f009 f8ba 	bl	9b1c <String::String(char const*)>
     9a8:	4621      	mov	r1, r4
     9aa:	a809      	add	r0, sp, #36	; 0x24
     9ac:	f009 f8b6 	bl	9b1c <String::String(char const*)>
     9b0:	f240 1203 	movw	r2, #259	; 0x103
     9b4:	a901      	add	r1, sp, #4
     9b6:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
     9ba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     9be:	f7ff fb53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9c2:	a801      	add	r0, sp, #4
     9c4:	f7ff fb94 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     9c8:	4659      	mov	r1, fp
     9ca:	a801      	add	r0, sp, #4
     9cc:	f009 f8a6 	bl	9b1c <String::String(char const*)>
     9d0:	4970      	ldr	r1, [pc, #448]	; (b94 <initialize_opcode_info()+0xa88>)
     9d2:	a805      	add	r0, sp, #20
     9d4:	f009 f8a2 	bl	9b1c <String::String(char const*)>
     9d8:	4639      	mov	r1, r7
     9da:	a809      	add	r0, sp, #36	; 0x24
     9dc:	f009 f89e 	bl	9b1c <String::String(char const*)>
     9e0:	f240 2102 	movw	r1, #514	; 0x202
     9e4:	f605 60d4 	addw	r0, r5, #3796	; 0xed4
     9e8:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     9ec:	a901      	add	r1, sp, #4
     9ee:	f7ff fb3b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9f2:	a801      	add	r0, sp, #4
     9f4:	f7ff fb7c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     9f8:	4964      	ldr	r1, [pc, #400]	; (b8c <initialize_opcode_info()+0xa80>)
     9fa:	a801      	add	r0, sp, #4
     9fc:	f009 f88e 	bl	9b1c <String::String(char const*)>
     a00:	4b65      	ldr	r3, [pc, #404]	; (b98 <initialize_opcode_info()+0xa8c>)
     a02:	a805      	add	r0, sp, #20
     a04:	4619      	mov	r1, r3
     a06:	f009 f889 	bl	9b1c <String::String(char const*)>
     a0a:	4631      	mov	r1, r6
     a0c:	a809      	add	r0, sp, #36	; 0x24
     a0e:	f009 f885 	bl	9b1c <String::String(char const*)>
     a12:	f44f 7281 	mov.w	r2, #258	; 0x102
     a16:	a901      	add	r1, sp, #4
     a18:	f605 7008 	addw	r0, r5, #3848	; 0xf08
     a1c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     a20:	f7ff fb22 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a24:	a801      	add	r0, sp, #4
     a26:	f7ff fb63 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     a2a:	4a5c      	ldr	r2, [pc, #368]	; (b9c <initialize_opcode_info()+0xa90>)
     a2c:	a801      	add	r0, sp, #4
     a2e:	4611      	mov	r1, r2
     a30:	f009 f874 	bl	9b1c <String::String(char const*)>
     a34:	4641      	mov	r1, r8
     a36:	a805      	add	r0, sp, #20
     a38:	f009 f870 	bl	9b1c <String::String(char const*)>
     a3c:	4621      	mov	r1, r4
     a3e:	a809      	add	r0, sp, #36	; 0x24
     a40:	f009 f86c 	bl	9b1c <String::String(char const*)>
     a44:	f240 3103 	movw	r1, #771	; 0x303
     a48:	f505 6077 	add.w	r0, r5, #3952	; 0xf70
     a4c:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     a50:	a901      	add	r1, sp, #4
     a52:	f7ff fb09 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a56:	a801      	add	r0, sp, #4
     a58:	f7ff fb4a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     a5c:	4659      	mov	r1, fp
     a5e:	a801      	add	r0, sp, #4
     a60:	f009 f85c 	bl	9b1c <String::String(char const*)>
     a64:	4641      	mov	r1, r8
     a66:	a805      	add	r0, sp, #20
     a68:	f009 f858 	bl	9b1c <String::String(char const*)>
     a6c:	4639      	mov	r1, r7
     a6e:	a809      	add	r0, sp, #36	; 0x24
     a70:	f009 f854 	bl	9b1c <String::String(char const*)>
     a74:	f44f 7341 	mov.w	r3, #772	; 0x304
     a78:	a901      	add	r1, sp, #4
     a7a:	f605 70a4 	addw	r0, r5, #4004	; 0xfa4
     a7e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     a82:	f7ff faf1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a86:	a801      	add	r0, sp, #4
     a88:	f7ff fb32 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     a8c:	493f      	ldr	r1, [pc, #252]	; (b8c <initialize_opcode_info()+0xa80>)
     a8e:	a801      	add	r0, sp, #4
     a90:	f009 f844 	bl	9b1c <String::String(char const*)>
     a94:	4641      	mov	r1, r8
     a96:	a805      	add	r0, sp, #20
     a98:	f009 f840 	bl	9b1c <String::String(char const*)>
     a9c:	4631      	mov	r1, r6
     a9e:	a809      	add	r0, sp, #36	; 0x24
     aa0:	f009 f83c 	bl	9b1c <String::String(char const*)>
     aa4:	f240 3206 	movw	r2, #774	; 0x306
     aa8:	a901      	add	r1, sp, #4
     aaa:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
     aae:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     ab2:	f7ff fad9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ab6:	a801      	add	r0, sp, #4
     ab8:	f7ff fb1a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     abc:	4938      	ldr	r1, [pc, #224]	; (ba0 <initialize_opcode_info()+0xa94>)
     abe:	a801      	add	r0, sp, #4
     ac0:	f009 f82c 	bl	9b1c <String::String(char const*)>
     ac4:	4937      	ldr	r1, [pc, #220]	; (ba4 <initialize_opcode_info()+0xa98>)
     ac6:	a805      	add	r0, sp, #20
     ac8:	f009 f828 	bl	9b1c <String::String(char const*)>
     acc:	4621      	mov	r1, r4
     ace:	a809      	add	r0, sp, #36	; 0x24
     ad0:	f009 f824 	bl	9b1c <String::String(char const*)>
     ad4:	f240 2102 	movw	r1, #514	; 0x202
     ad8:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
     adc:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     ae0:	a901      	add	r1, sp, #4
     ae2:	f7ff fac1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ae6:	a801      	add	r0, sp, #4
     ae8:	f7ff fb02 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     aec:	4659      	mov	r1, fp
     aee:	a801      	add	r0, sp, #4
     af0:	f009 f814 	bl	9b1c <String::String(char const*)>
     af4:	492c      	ldr	r1, [pc, #176]	; (ba8 <initialize_opcode_info()+0xa9c>)
     af6:	a805      	add	r0, sp, #20
     af8:	f009 f810 	bl	9b1c <String::String(char const*)>
     afc:	4639      	mov	r1, r7
     afe:	a809      	add	r0, sp, #36	; 0x24
     b00:	f009 f80c 	bl	9b1c <String::String(char const*)>
     b04:	f240 2e05 	movw	lr, #517	; 0x205
     b08:	a901      	add	r1, sp, #4
     b0a:	f509 7077 	add.w	r0, r9, #988	; 0x3dc
     b0e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     b12:	f7ff faa9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b16:	a801      	add	r0, sp, #4
     b18:	f7ff faea 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     b1c:	4659      	mov	r1, fp
     b1e:	a801      	add	r0, sp, #4
     b20:	f008 fffc 	bl	9b1c <String::String(char const*)>
     b24:	4921      	ldr	r1, [pc, #132]	; (bac <initialize_opcode_info()+0xaa0>)
     b26:	a805      	add	r0, sp, #20
     b28:	f008 fff8 	bl	9b1c <String::String(char const*)>
     b2c:	4639      	mov	r1, r7
     b2e:	a809      	add	r0, sp, #36	; 0x24
     b30:	f008 fff4 	bl	9b1c <String::String(char const*)>
     b34:	f44f 7c01 	mov.w	ip, #516	; 0x204
     b38:	a901      	add	r1, sp, #4
     b3a:	f209 40ac 	addw	r0, r9, #1196	; 0x4ac
     b3e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     b42:	f7ff fa91 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b46:	a801      	add	r0, sp, #4
     b48:	f7ff fad2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     b4c:	490f      	ldr	r1, [pc, #60]	; (b8c <initialize_opcode_info()+0xa80>)
     b4e:	a801      	add	r0, sp, #4
     b50:	f008 ffe4 	bl	9b1c <String::String(char const*)>
     b54:	4915      	ldr	r1, [pc, #84]	; (bac <initialize_opcode_info()+0xaa0>)
     b56:	a805      	add	r0, sp, #20
     b58:	f008 ffe0 	bl	9b1c <String::String(char const*)>
     b5c:	4631      	mov	r1, r6
     b5e:	a809      	add	r0, sp, #36	; 0x24
     b60:	f008 ffdc 	bl	9b1c <String::String(char const*)>
     b64:	f240 2006 	movw	r0, #518	; 0x206
     b68:	a901      	add	r1, sp, #4
     b6a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     b6e:	f509 609c 	add.w	r0, r9, #1248	; 0x4e0
     b72:	f7ff fa79 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b76:	e01d      	b.n	bb4 <initialize_opcode_info()+0xaa8>
     b78:	200008d0 	.word	0x200008d0
     b7c:	200008d8 	.word	0x200008d8
     b80:	20000900 	.word	0x20000900
     b84:	20000904 	.word	0x20000904
     b88:	20000888 	.word	0x20000888
     b8c:	20000910 	.word	0x20000910
     b90:	20000914 	.word	0x20000914
     b94:	200008a4 	.word	0x200008a4
     b98:	200008a8 	.word	0x200008a8
     b9c:	20000918 	.word	0x20000918
     ba0:	2000091c 	.word	0x2000091c
     ba4:	200008b4 	.word	0x200008b4
     ba8:	200008b8 	.word	0x200008b8
     bac:	200008c0 	.word	0x200008c0
     bb0:	2000090c 	.word	0x2000090c
     bb4:	a801      	add	r0, sp, #4
     bb6:	f7ff fa9b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     bba:	49d1      	ldr	r1, [pc, #836]	; (f00 <initialize_opcode_info()+0xdf4>)
     bbc:	a801      	add	r0, sp, #4
     bbe:	f008 ffad 	bl	9b1c <String::String(char const*)>
     bc2:	4621      	mov	r1, r4
     bc4:	a805      	add	r0, sp, #20
     bc6:	f008 ffa9 	bl	9b1c <String::String(char const*)>
     bca:	49ce      	ldr	r1, [pc, #824]	; (f04 <initialize_opcode_info()+0xdf8>)
     bcc:	a809      	add	r0, sp, #36	; 0x24
     bce:	f008 ffa5 	bl	9b1c <String::String(char const*)>
     bd2:	f44f 7281 	mov.w	r2, #258	; 0x102
     bd6:	a901      	add	r1, sp, #4
     bd8:	f505 508f 	add.w	r0, r5, #4576	; 0x11e0
     bdc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     be0:	f7ff fa42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     be4:	a801      	add	r0, sp, #4
     be6:	f7ff fa83 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
     bea:	4659      	mov	r1, fp
     bec:	a801      	add	r0, sp, #4
     bee:	f008 ff95 	bl	9b1c <String::String(char const*)>
     bf2:	49c5      	ldr	r1, [pc, #788]	; (f08 <initialize_opcode_info()+0xdfc>)
     bf4:	a805      	add	r0, sp, #20
     bf6:	f008 ff91 	bl	9b1c <String::String(char const*)>
     bfa:	4639      	mov	r1, r7
     bfc:	a809      	add	r0, sp, #36	; 0x24
     bfe:	f008 ff8d 	bl	9b1c <String::String(char const*)>
     c02:	f44f 7341 	mov.w	r3, #772	; 0x304
     c06:	a901      	add	r1, sp, #4
     c08:	f209 507c 	addw	r0, r9, #1404	; 0x57c
     c0c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c10:	f7ff fa2a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c14:	a801      	add	r0, sp, #4
     c16:	f7ff fa6b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     c1a:	4659      	mov	r1, fp
     c1c:	a801      	add	r0, sp, #4
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
	opcode_info[0x60] = {"RTS","","",6,1};
     c1e:	f44f 7b83 	mov.w	fp, #262	; 0x106
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     c22:	f008 ff7b 	bl	9b1c <String::String(char const*)>
     c26:	49b9      	ldr	r1, [pc, #740]	; (f0c <initialize_opcode_info()+0xe00>)
     c28:	a805      	add	r0, sp, #20
     c2a:	f008 ff77 	bl	9b1c <String::String(char const*)>
     c2e:	4639      	mov	r1, r7
     c30:	af09      	add	r7, sp, #36	; 0x24
     c32:	4638      	mov	r0, r7
     c34:	af01      	add	r7, sp, #4
     c36:	f008 ff71 	bl	9b1c <String::String(char const*)>
     c3a:	f44f 7341 	mov.w	r3, #772	; 0x304
     c3e:	4639      	mov	r1, r7
     c40:	f209 604c 	addw	r0, r9, #1612	; 0x64c
     c44:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c48:	f7ff fa0e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c4c:	4638      	mov	r0, r7
     c4e:	f7ff fa4f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     c52:	4638      	mov	r0, r7
     c54:	af05      	add	r7, sp, #20
     c56:	49ae      	ldr	r1, [pc, #696]	; (f10 <initialize_opcode_info()+0xe04>)
     c58:	f008 ff60 	bl	9b1c <String::String(char const*)>
     c5c:	49ab      	ldr	r1, [pc, #684]	; (f0c <initialize_opcode_info()+0xe00>)
     c5e:	4638      	mov	r0, r7
     c60:	af09      	add	r7, sp, #36	; 0x24
     c62:	f008 ff5b 	bl	9b1c <String::String(char const*)>
     c66:	4631      	mov	r1, r6
     c68:	4638      	mov	r0, r7
     c6a:	f240 3707 	movw	r7, #775	; 0x307
     c6e:	f008 ff55 	bl	9b1c <String::String(char const*)>
     c72:	f509 60d0 	add.w	r0, r9, #1664	; 0x680
     c76:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     c7a:	af01      	add	r7, sp, #4
     c7c:	4639      	mov	r1, r7
     c7e:	f7ff f9f3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c82:	4638      	mov	r0, r7
     c84:	f7ff fa34 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
     c88:	4638      	mov	r0, r7
     c8a:	af05      	add	r7, sp, #20
     c8c:	49a1      	ldr	r1, [pc, #644]	; (f14 <initialize_opcode_info()+0xe08>)
     c8e:	f008 ff45 	bl	9b1c <String::String(char const*)>
     c92:	4621      	mov	r1, r4
     c94:	4638      	mov	r0, r7
     c96:	af09      	add	r7, sp, #36	; 0x24
     c98:	f008 ff40 	bl	9b1c <String::String(char const*)>
     c9c:	4621      	mov	r1, r4
     c9e:	4638      	mov	r0, r7
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     ca0:	4f9d      	ldr	r7, [pc, #628]	; (f18 <initialize_opcode_info()+0xe0c>)
	opcode_info[0x60] = {"RTS","","",6,1};
     ca2:	f008 ff3b 	bl	9b1c <String::String(char const*)>
     ca6:	f505 509c 	add.w	r0, r5, #4992	; 0x1380
     caa:	ad01      	add	r5, sp, #4
     cac:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     cb0:	f8df b294 	ldr.w	fp, [pc, #660]	; f48 <initialize_opcode_info()+0xe3c>
	opcode_info[0x60] = {"RTS","","",6,1};
     cb4:	4629      	mov	r1, r5
     cb6:	f7ff f9d7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     cba:	4628      	mov	r0, r5
     cbc:	f7ff fa18 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     cc0:	4628      	mov	r0, r5
     cc2:	ad05      	add	r5, sp, #20
     cc4:	4659      	mov	r1, fp
     cc6:	f008 ff29 	bl	9b1c <String::String(char const*)>
     cca:	4994      	ldr	r1, [pc, #592]	; (f1c <initialize_opcode_info()+0xe10>)
     ccc:	4628      	mov	r0, r5
     cce:	ad09      	add	r5, sp, #36	; 0x24
     cd0:	f008 ff24 	bl	9b1c <String::String(char const*)>
     cd4:	4639      	mov	r1, r7
     cd6:	4628      	mov	r0, r5
     cd8:	ad01      	add	r5, sp, #4
     cda:	f008 ff1f 	bl	9b1c <String::String(char const*)>
     cde:	f240 2006 	movw	r0, #518	; 0x206
     ce2:	4629      	mov	r1, r5
     ce4:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     ce8:	f209 701c 	addw	r0, r9, #1820	; 0x71c
     cec:	f7ff f9bc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     cf0:	4628      	mov	r0, r5
     cf2:	f7ff f9fd 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
     cf6:	4628      	mov	r0, r5
     cf8:	ad05      	add	r5, sp, #20
     cfa:	4659      	mov	r1, fp
     cfc:	f008 ff0e 	bl	9b1c <String::String(char const*)>
     d00:	4651      	mov	r1, sl
     d02:	4628      	mov	r0, r5
     d04:	ad09      	add	r5, sp, #36	; 0x24
     d06:	f008 ff09 	bl	9b1c <String::String(char const*)>
     d0a:	4639      	mov	r1, r7
     d0c:	4628      	mov	r0, r5
     d0e:	ad01      	add	r5, sp, #4
     d10:	f008 ff04 	bl	9b1c <String::String(char const*)>
     d14:	f240 2e03 	movw	lr, #515	; 0x203
     d18:	4629      	mov	r1, r5
     d1a:	f209 70ec 	addw	r0, r9, #2028	; 0x7ec
     d1e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     d22:	f7ff f9a1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d26:	4628      	mov	r0, r5
     d28:	f7ff f9e2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d2c:	497c      	ldr	r1, [pc, #496]	; (f20 <initialize_opcode_info()+0xe14>)
     d2e:	4628      	mov	r0, r5
     d30:	f240 2505 	movw	r5, #517	; 0x205
     d34:	f008 fef2 	bl	9b1c <String::String(char const*)>
     d38:	4651      	mov	r1, sl
     d3a:	f10d 0a14 	add.w	sl, sp, #20
     d3e:	4650      	mov	r0, sl
     d40:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     d44:	f008 feea 	bl	9b1c <String::String(char const*)>
     d48:	4631      	mov	r1, r6
     d4a:	4650      	mov	r0, sl
     d4c:	f10d 0a04 	add.w	sl, sp, #4
     d50:	f008 fee4 	bl	9b1c <String::String(char const*)>
     d54:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     d58:	f509 6502 	add.w	r5, r9, #2080	; 0x820
     d5c:	4651      	mov	r1, sl
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
	opcode_info[0x78] = {"SEI","","I",2,1};
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
     d5e:	f8df a1ec 	ldr.w	sl, [pc, #492]	; f4c <initialize_opcode_info()+0xe40>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d62:	4628      	mov	r0, r5
     d64:	f7ff f980 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d68:	a801      	add	r0, sp, #4
     d6a:	f7ff f9c1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
     d6e:	496d      	ldr	r1, [pc, #436]	; (f24 <initialize_opcode_info()+0xe18>)
     d70:	a801      	add	r0, sp, #4
     d72:	f008 fed3 	bl	9b1c <String::String(char const*)>
     d76:	4621      	mov	r1, r4
     d78:	a805      	add	r0, sp, #20
     d7a:	f008 fecf 	bl	9b1c <String::String(char const*)>
     d7e:	4621      	mov	r1, r4
     d80:	a809      	add	r0, sp, #36	; 0x24
     d82:	f008 fecb 	bl	9b1c <String::String(char const*)>
     d86:	f44f 7182 	mov.w	r1, #260	; 0x104
     d8a:	f609 0088 	addw	r0, r9, #2184	; 0x888
     d8e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d92:	a901      	add	r1, sp, #4
     d94:	f7ff f968 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d98:	a801      	add	r0, sp, #4
     d9a:	f7ff f9a9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
     d9e:	4659      	mov	r1, fp
     da0:	a801      	add	r0, sp, #4
     da2:	f008 febb 	bl	9b1c <String::String(char const*)>
     da6:	4960      	ldr	r1, [pc, #384]	; (f28 <initialize_opcode_info()+0xe1c>)
     da8:	a805      	add	r0, sp, #20
     daa:	f008 feb7 	bl	9b1c <String::String(char const*)>
     dae:	4639      	mov	r1, r7
     db0:	a809      	add	r0, sp, #36	; 0x24
     db2:	f008 feb3 	bl	9b1c <String::String(char const*)>
     db6:	f240 2102 	movw	r1, #514	; 0x202
     dba:	f609 00bc 	addw	r0, r9, #2236	; 0x8bc
     dbe:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     dc2:	a901      	add	r1, sp, #4
     dc4:	f7ff f950 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dc8:	a801      	add	r0, sp, #4
     dca:	f7ff f991 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
     dce:	4954      	ldr	r1, [pc, #336]	; (f20 <initialize_opcode_info()+0xe14>)
     dd0:	a801      	add	r0, sp, #4
     dd2:	f008 fea3 	bl	9b1c <String::String(char const*)>
     dd6:	4b55      	ldr	r3, [pc, #340]	; (f2c <initialize_opcode_info()+0xe20>)
     dd8:	a805      	add	r0, sp, #20
     dda:	4619      	mov	r1, r3
     ddc:	f008 fe9e 	bl	9b1c <String::String(char const*)>
     de0:	4631      	mov	r1, r6
     de2:	a809      	add	r0, sp, #36	; 0x24
     de4:	f008 fe9a 	bl	9b1c <String::String(char const*)>
     de8:	f44f 7281 	mov.w	r2, #258	; 0x102
     dec:	a901      	add	r1, sp, #4
     dee:	f509 600f 	add.w	r0, r9, #2288	; 0x8f0
     df2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     df6:	f7ff f937 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dfa:	a801      	add	r0, sp, #4
     dfc:	f7ff f978 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
     e00:	4a4b      	ldr	r2, [pc, #300]	; (f30 <initialize_opcode_info()+0xe24>)
     e02:	a801      	add	r0, sp, #4
     e04:	4611      	mov	r1, r2
     e06:	f008 fe89 	bl	9b1c <String::String(char const*)>
     e0a:	494a      	ldr	r1, [pc, #296]	; (f34 <initialize_opcode_info()+0xe28>)
     e0c:	a805      	add	r0, sp, #20
     e0e:	f008 fe85 	bl	9b1c <String::String(char const*)>
     e12:	4621      	mov	r1, r4
     e14:	a809      	add	r0, sp, #36	; 0x24
     e16:	f008 fe81 	bl	9b1c <String::String(char const*)>
     e1a:	f240 3305 	movw	r3, #773	; 0x305
     e1e:	a901      	add	r1, sp, #4
     e20:	f609 1058 	addw	r0, r9, #2392	; 0x958
     e24:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e28:	f7ff f91e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e2c:	a801      	add	r0, sp, #4
     e2e:	f7ff f95f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
     e32:	4659      	mov	r1, fp
     e34:	a801      	add	r0, sp, #4
     e36:	f008 fe71 	bl	9b1c <String::String(char const*)>
     e3a:	4641      	mov	r1, r8
     e3c:	a805      	add	r0, sp, #20
     e3e:	f008 fe6d 	bl	9b1c <String::String(char const*)>
     e42:	4639      	mov	r1, r7
     e44:	a809      	add	r0, sp, #36	; 0x24
     e46:	f008 fe69 	bl	9b1c <String::String(char const*)>
     e4a:	f44f 7341 	mov.w	r3, #772	; 0x304
     e4e:	a901      	add	r1, sp, #4
     e50:	f609 108c 	addw	r0, r9, #2444	; 0x98c
     e54:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e58:	f7ff f906 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e5c:	a801      	add	r0, sp, #4
     e5e:	f7ff f947 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
     e62:	492f      	ldr	r1, [pc, #188]	; (f20 <initialize_opcode_info()+0xe14>)
     e64:	a801      	add	r0, sp, #4
     e66:	f008 fe59 	bl	9b1c <String::String(char const*)>
     e6a:	4641      	mov	r1, r8
     e6c:	a805      	add	r0, sp, #20
     e6e:	f008 fe55 	bl	9b1c <String::String(char const*)>
     e72:	4631      	mov	r1, r6
     e74:	a809      	add	r0, sp, #36	; 0x24
     e76:	f008 fe51 	bl	9b1c <String::String(char const*)>
     e7a:	f240 3206 	movw	r2, #774	; 0x306
     e7e:	a901      	add	r1, sp, #4
     e80:	f509 601c 	add.w	r0, r9, #2496	; 0x9c0
     e84:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     e88:	f7ff f8ee 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e8c:	a801      	add	r0, sp, #4
     e8e:	f7ff f92f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
     e92:	4929      	ldr	r1, [pc, #164]	; (f38 <initialize_opcode_info()+0xe2c>)
     e94:	a801      	add	r0, sp, #4
     e96:	f008 fe41 	bl	9b1c <String::String(char const*)>
     e9a:	4928      	ldr	r1, [pc, #160]	; (f3c <initialize_opcode_info()+0xe30>)
     e9c:	a805      	add	r0, sp, #20
     e9e:	f008 fe3d 	bl	9b1c <String::String(char const*)>
     ea2:	4621      	mov	r1, r4
     ea4:	a809      	add	r0, sp, #36	; 0x24
     ea6:	f008 fe39 	bl	9b1c <String::String(char const*)>
     eaa:	f44f 7c01 	mov.w	ip, #516	; 0x204
     eae:	a901      	add	r1, sp, #4
     eb0:	f609 2028 	addw	r0, r9, #2600	; 0xa28
     eb4:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     eb8:	f7ff f8d6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ebc:	a801      	add	r0, sp, #4
     ebe:	f7ff f917 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
     ec2:	4659      	mov	r1, fp
     ec4:	a801      	add	r0, sp, #4
     ec6:	f008 fe29 	bl	9b1c <String::String(char const*)>
     eca:	491d      	ldr	r1, [pc, #116]	; (f40 <initialize_opcode_info()+0xe34>)
     ecc:	a805      	add	r0, sp, #20
     ece:	f008 fe25 	bl	9b1c <String::String(char const*)>
     ed2:	4639      	mov	r1, r7
     ed4:	a809      	add	r0, sp, #36	; 0x24
     ed6:	f008 fe21 	bl	9b1c <String::String(char const*)>
     eda:	f44f 7c01 	mov.w	ip, #516	; 0x204
     ede:	a901      	add	r1, sp, #4
     ee0:	f609 205c 	addw	r0, r9, #2652	; 0xa5c
     ee4:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     ee8:	f7ff f8be 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     eec:	a801      	add	r0, sp, #4
     eee:	f7ff f8ff 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
     ef2:	4659      	mov	r1, fp
     ef4:	a801      	add	r0, sp, #4
     ef6:	f008 fe11 	bl	9b1c <String::String(char const*)>
     efa:	4912      	ldr	r1, [pc, #72]	; (f44 <initialize_opcode_info()+0xe38>)
     efc:	a805      	add	r0, sp, #20
     efe:	e027      	b.n	f50 <initialize_opcode_info()+0xe44>
     f00:	20000920 	.word	0x20000920
     f04:	20000924 	.word	0x20000924
     f08:	200008d0 	.word	0x200008d0
     f0c:	200008d8 	.word	0x200008d8
     f10:	20000910 	.word	0x20000910
     f14:	20000928 	.word	0x20000928
     f18:	20000930 	.word	0x20000930
     f1c:	20000888 	.word	0x20000888
     f20:	20000938 	.word	0x20000938
     f24:	2000093c 	.word	0x2000093c
     f28:	200008a4 	.word	0x200008a4
     f2c:	200008a8 	.word	0x200008a8
     f30:	20000918 	.word	0x20000918
     f34:	20000940 	.word	0x20000940
     f38:	20000948 	.word	0x20000948
     f3c:	200008b4 	.word	0x200008b4
     f40:	200008b8 	.word	0x200008b8
     f44:	200008c0 	.word	0x200008c0
     f48:	2000092c 	.word	0x2000092c
     f4c:	20000950 	.word	0x20000950
     f50:	f008 fde4 	bl	9b1c <String::String(char const*)>
     f54:	4639      	mov	r1, r7
     f56:	a809      	add	r0, sp, #36	; 0x24
     f58:	f008 fde0 	bl	9b1c <String::String(char const*)>
     f5c:	f44f 7c01 	mov.w	ip, #516	; 0x204
     f60:	a901      	add	r1, sp, #4
     f62:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
     f66:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     f6a:	f7ff f87d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f6e:	a801      	add	r0, sp, #4
     f70:	f7ff f8be 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
     f74:	49cb      	ldr	r1, [pc, #812]	; (12a4 <initialize_opcode_info()+0x1198>)
     f76:	a801      	add	r0, sp, #4
     f78:	f008 fdd0 	bl	9b1c <String::String(char const*)>
     f7c:	49ca      	ldr	r1, [pc, #808]	; (12a8 <initialize_opcode_info()+0x119c>)
     f7e:	a805      	add	r0, sp, #20
     f80:	f008 fdcc 	bl	9b1c <String::String(char const*)>
     f84:	4631      	mov	r1, r6
     f86:	a809      	add	r0, sp, #36	; 0x24
     f88:	f008 fdc8 	bl	9b1c <String::String(char const*)>
     f8c:	f240 2006 	movw	r0, #518	; 0x206
     f90:	a901      	add	r1, sp, #4
     f92:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     f96:	f509 6036 	add.w	r0, r9, #2912	; 0xb60
     f9a:	f7ff f865 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f9e:	a801      	add	r0, sp, #4
     fa0:	f7ff f8a6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
     fa4:	49c1      	ldr	r1, [pc, #772]	; (12ac <initialize_opcode_info()+0x11a0>)
     fa6:	a801      	add	r0, sp, #4
     fa8:	f008 fdb8 	bl	9b1c <String::String(char const*)>
     fac:	4621      	mov	r1, r4
     fae:	a805      	add	r0, sp, #20
     fb0:	f008 fdb4 	bl	9b1c <String::String(char const*)>
     fb4:	49be      	ldr	r1, [pc, #760]	; (12b0 <initialize_opcode_info()+0x11a4>)
     fb6:	a809      	add	r0, sp, #36	; 0x24
     fb8:	f008 fdb0 	bl	9b1c <String::String(char const*)>
     fbc:	f44f 7281 	mov.w	r2, #258	; 0x102
     fc0:	a901      	add	r1, sp, #4
     fc2:	f609 30c8 	addw	r0, r9, #3016	; 0xbc8
     fc6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     fca:	f7ff f84d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fce:	a801      	add	r0, sp, #4
     fd0:	f7ff f88e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
     fd4:	4659      	mov	r1, fp
     fd6:	a801      	add	r0, sp, #4
     fd8:	f008 fda0 	bl	9b1c <String::String(char const*)>
     fdc:	49b5      	ldr	r1, [pc, #724]	; (12b4 <initialize_opcode_info()+0x11a8>)
     fde:	a805      	add	r0, sp, #20
     fe0:	f008 fd9c 	bl	9b1c <String::String(char const*)>
     fe4:	4639      	mov	r1, r7
     fe6:	a809      	add	r0, sp, #36	; 0x24
     fe8:	f008 fd98 	bl	9b1c <String::String(char const*)>
     fec:	f44f 7341 	mov.w	r3, #772	; 0x304
     ff0:	a901      	add	r1, sp, #4
     ff2:	f609 30fc 	addw	r0, r9, #3068	; 0xbfc
     ff6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     ffa:	f7ff f835 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ffe:	a801      	add	r0, sp, #4
    1000:	f7ff f876 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1004:	4659      	mov	r1, fp
    1006:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
    1008:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 12dc <initialize_opcode_info()+0x11d0>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    100c:	f008 fd86 	bl	9b1c <String::String(char const*)>
    1010:	49a9      	ldr	r1, [pc, #676]	; (12b8 <initialize_opcode_info()+0x11ac>)
    1012:	a805      	add	r0, sp, #20
    1014:	f008 fd82 	bl	9b1c <String::String(char const*)>
    1018:	4639      	mov	r1, r7
    101a:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x84] = {"STY","zpg","",3,2};
    101c:	f240 2703 	movw	r7, #515	; 0x203
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1020:	f008 fd7c 	bl	9b1c <String::String(char const*)>
    1024:	f44f 7341 	mov.w	r3, #772	; 0x304
    1028:	a901      	add	r1, sp, #4
    102a:	f609 40cc 	addw	r0, r9, #3276	; 0xccc
    102e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1032:	f7ff f819 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1036:	a801      	add	r0, sp, #4
	opcode_info[0x85] = {"STA","zpg","",3,2};
	opcode_info[0x86] = {"STX","zpg","",3,2};
    1038:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 12e0 <initialize_opcode_info()+0x11d4>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    103c:	f7ff f858 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    1040:	4998      	ldr	r1, [pc, #608]	; (12a4 <initialize_opcode_info()+0x1198>)
    1042:	a801      	add	r0, sp, #4
    1044:	f008 fd6a 	bl	9b1c <String::String(char const*)>
    1048:	499b      	ldr	r1, [pc, #620]	; (12b8 <initialize_opcode_info()+0x11ac>)
    104a:	a805      	add	r0, sp, #20
    104c:	f008 fd66 	bl	9b1c <String::String(char const*)>
    1050:	4631      	mov	r1, r6
    1052:	a809      	add	r0, sp, #36	; 0x24
    1054:	f008 fd62 	bl	9b1c <String::String(char const*)>
    1058:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    105c:	f240 3307 	movw	r3, #775	; 0x307
    1060:	a901      	add	r1, sp, #4
    1062:	4610      	mov	r0, r2
    1064:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1068:	f7fe fffe 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    106c:	a801      	add	r0, sp, #4
    106e:	f7ff f83f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    1072:	4651      	mov	r1, sl
    1074:	a801      	add	r0, sp, #4
    1076:	f008 fd51 	bl	9b1c <String::String(char const*)>
    107a:	4990      	ldr	r1, [pc, #576]	; (12bc <initialize_opcode_info()+0x11b0>)
    107c:	a805      	add	r0, sp, #20
    107e:	f008 fd4d 	bl	9b1c <String::String(char const*)>
    1082:	4621      	mov	r1, r4
    1084:	a809      	add	r0, sp, #36	; 0x24
    1086:	f008 fd49 	bl	9b1c <String::String(char const*)>
    108a:	f240 2006 	movw	r0, #518	; 0x206
    108e:	a901      	add	r1, sp, #4
    1090:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1094:	f205 507c 	addw	r0, r5, #1404	; 0x57c
    1098:	f7fe ffe6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    109c:	a801      	add	r0, sp, #4
    109e:	f7ff f827 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    10a2:	4659      	mov	r1, fp
    10a4:	a801      	add	r0, sp, #4
    10a6:	f008 fd39 	bl	9b1c <String::String(char const*)>
    10aa:	4985      	ldr	r1, [pc, #532]	; (12c0 <initialize_opcode_info()+0x11b4>)
    10ac:	a805      	add	r0, sp, #20
    10ae:	f008 fd35 	bl	9b1c <String::String(char const*)>
    10b2:	4621      	mov	r1, r4
    10b4:	a809      	add	r0, sp, #36	; 0x24
    10b6:	f008 fd31 	bl	9b1c <String::String(char const*)>
    10ba:	a901      	add	r1, sp, #4
    10bc:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    10c0:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10c4:	f7fe ffd0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10c8:	a801      	add	r0, sp, #4
    10ca:	f7ff f811 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    10ce:	4651      	mov	r1, sl
    10d0:	a801      	add	r0, sp, #4
    10d2:	f008 fd23 	bl	9b1c <String::String(char const*)>
    10d6:	497a      	ldr	r1, [pc, #488]	; (12c0 <initialize_opcode_info()+0x11b4>)
    10d8:	a805      	add	r0, sp, #20
    10da:	f008 fd1f 	bl	9b1c <String::String(char const*)>
    10de:	4621      	mov	r1, r4
    10e0:	a809      	add	r0, sp, #36	; 0x24
    10e2:	f008 fd1b 	bl	9b1c <String::String(char const*)>
    10e6:	a901      	add	r1, sp, #4
    10e8:	f205 604c 	addw	r0, r5, #1612	; 0x64c
    10ec:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10f0:	f7fe ffba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10f4:	a801      	add	r0, sp, #4
    10f6:	f7fe fffb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    10fa:	4649      	mov	r1, r9
    10fc:	a801      	add	r0, sp, #4
    10fe:	f008 fd0d 	bl	9b1c <String::String(char const*)>
    1102:	496f      	ldr	r1, [pc, #444]	; (12c0 <initialize_opcode_info()+0x11b4>)
    1104:	a805      	add	r0, sp, #20
    1106:	f008 fd09 	bl	9b1c <String::String(char const*)>
    110a:	4621      	mov	r1, r4
    110c:	a809      	add	r0, sp, #36	; 0x24
    110e:	f008 fd05 	bl	9b1c <String::String(char const*)>
    1112:	a901      	add	r1, sp, #4
    1114:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1118:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    111c:	f7fe ffa4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1120:	a801      	add	r0, sp, #4
    1122:	f7fe ffe5 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    1126:	4f67      	ldr	r7, [pc, #412]	; (12c4 <initialize_opcode_info()+0x11b8>)
    1128:	4967      	ldr	r1, [pc, #412]	; (12c8 <initialize_opcode_info()+0x11bc>)
    112a:	a801      	add	r0, sp, #4
    112c:	f008 fcf6 	bl	9b1c <String::String(char const*)>
    1130:	4621      	mov	r1, r4
    1132:	a805      	add	r0, sp, #20
    1134:	f008 fcf2 	bl	9b1c <String::String(char const*)>
    1138:	4639      	mov	r1, r7
    113a:	a809      	add	r0, sp, #36	; 0x24
    113c:	f008 fcee 	bl	9b1c <String::String(char const*)>
    1140:	f44f 7281 	mov.w	r2, #258	; 0x102
    1144:	a901      	add	r1, sp, #4
    1146:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
    114a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    114e:	f7fe ff8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1152:	a801      	add	r0, sp, #4
    1154:	f7fe ffcc 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    1158:	495c      	ldr	r1, [pc, #368]	; (12cc <initialize_opcode_info()+0x11c0>)
    115a:	a801      	add	r0, sp, #4
    115c:	f008 fcde 	bl	9b1c <String::String(char const*)>
    1160:	4621      	mov	r1, r4
    1162:	a805      	add	r0, sp, #20
    1164:	f008 fcda 	bl	9b1c <String::String(char const*)>
    1168:	4639      	mov	r1, r7
    116a:	a809      	add	r0, sp, #36	; 0x24
    116c:	f008 fcd6 	bl	9b1c <String::String(char const*)>
    1170:	f44f 7281 	mov.w	r2, #258	; 0x102
    1174:	a901      	add	r1, sp, #4
    1176:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
    117a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    117e:	f7fe ff73 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1182:	a801      	add	r0, sp, #4
    1184:	f7fe ffb4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    1188:	4659      	mov	r1, fp
    118a:	a801      	add	r0, sp, #4
    118c:	f008 fcc6 	bl	9b1c <String::String(char const*)>
    1190:	4641      	mov	r1, r8
    1192:	a805      	add	r0, sp, #20
    1194:	f008 fcc2 	bl	9b1c <String::String(char const*)>
    1198:	4621      	mov	r1, r4
    119a:	a809      	add	r0, sp, #36	; 0x24
    119c:	f008 fcbe 	bl	9b1c <String::String(char const*)>
    11a0:	f44f 7341 	mov.w	r3, #772	; 0x304
    11a4:	a901      	add	r1, sp, #4
    11a6:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    11aa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11ae:	f7fe ff5b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11b2:	a801      	add	r0, sp, #4
    11b4:	f7fe ff9c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    11b8:	4651      	mov	r1, sl
    11ba:	a801      	add	r0, sp, #4
    11bc:	f008 fcae 	bl	9b1c <String::String(char const*)>
    11c0:	4641      	mov	r1, r8
    11c2:	a805      	add	r0, sp, #20
    11c4:	f008 fcaa 	bl	9b1c <String::String(char const*)>
    11c8:	4621      	mov	r1, r4
    11ca:	a809      	add	r0, sp, #36	; 0x24
    11cc:	f008 fca6 	bl	9b1c <String::String(char const*)>
    11d0:	f44f 7341 	mov.w	r3, #772	; 0x304
    11d4:	a901      	add	r1, sp, #4
    11d6:	f205 70ec 	addw	r0, r5, #2028	; 0x7ec
    11da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11de:	f7fe ff43 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11e2:	a801      	add	r0, sp, #4
    11e4:	f7fe ff84 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    11e8:	4649      	mov	r1, r9
    11ea:	a801      	add	r0, sp, #4
    11ec:	f008 fc96 	bl	9b1c <String::String(char const*)>
    11f0:	4641      	mov	r1, r8
    11f2:	a805      	add	r0, sp, #20
    11f4:	f008 fc92 	bl	9b1c <String::String(char const*)>
    11f8:	4621      	mov	r1, r4
    11fa:	a809      	add	r0, sp, #36	; 0x24
    11fc:	f008 fc8e 	bl	9b1c <String::String(char const*)>
    1200:	f44f 7341 	mov.w	r3, #772	; 0x304
    1204:	a901      	add	r1, sp, #4
    1206:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    120a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    120e:	f7fe ff2b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1212:	a801      	add	r0, sp, #4
    1214:	f7fe ff6c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    1218:	492d      	ldr	r1, [pc, #180]	; (12d0 <initialize_opcode_info()+0x11c4>)
    121a:	a801      	add	r0, sp, #4
    121c:	f008 fc7e 	bl	9b1c <String::String(char const*)>
    1220:	492c      	ldr	r1, [pc, #176]	; (12d4 <initialize_opcode_info()+0x11c8>)
    1222:	a805      	add	r0, sp, #20
    1224:	f008 fc7a 	bl	9b1c <String::String(char const*)>
    1228:	4621      	mov	r1, r4
    122a:	a809      	add	r0, sp, #36	; 0x24
    122c:	f008 fc76 	bl	9b1c <String::String(char const*)>
    1230:	f240 2102 	movw	r1, #514	; 0x202
    1234:	f605 0088 	addw	r0, r5, #2184	; 0x888
    1238:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    123c:	a901      	add	r1, sp, #4
    123e:	f7fe ff13 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1242:	a801      	add	r0, sp, #4
    1244:	f7fe ff54 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    1248:	4651      	mov	r1, sl
    124a:	a801      	add	r0, sp, #4
    124c:	f008 fc66 	bl	9b1c <String::String(char const*)>
    1250:	4921      	ldr	r1, [pc, #132]	; (12d8 <initialize_opcode_info()+0x11cc>)
    1252:	a805      	add	r0, sp, #20
    1254:	f008 fc62 	bl	9b1c <String::String(char const*)>
    1258:	4621      	mov	r1, r4
    125a:	a809      	add	r0, sp, #36	; 0x24
    125c:	f008 fc5e 	bl	9b1c <String::String(char const*)>
    1260:	f240 2006 	movw	r0, #518	; 0x206
    1264:	a901      	add	r1, sp, #4
    1266:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    126a:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
    126e:	f7fe fefb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1272:	a801      	add	r0, sp, #4
    1274:	f7fe ff3c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    1278:	4659      	mov	r1, fp
    127a:	a801      	add	r0, sp, #4
    127c:	f44f 7b01 	mov.w	fp, #516	; 0x204
    1280:	f008 fc4c 	bl	9b1c <String::String(char const*)>
    1284:	4908      	ldr	r1, [pc, #32]	; (12a8 <initialize_opcode_info()+0x119c>)
    1286:	a805      	add	r0, sp, #20
    1288:	f008 fc48 	bl	9b1c <String::String(char const*)>
    128c:	4621      	mov	r1, r4
    128e:	a809      	add	r0, sp, #36	; 0x24
    1290:	f008 fc44 	bl	9b1c <String::String(char const*)>
    1294:	f10d 0c04 	add.w	ip, sp, #4
    1298:	f605 1058 	addw	r0, r5, #2392	; 0x958
    129c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    12a0:	e020      	b.n	12e4 <initialize_opcode_info()+0x11d8>
    12a2:	bf00      	nop
    12a4:	20000938 	.word	0x20000938
    12a8:	200008c0 	.word	0x200008c0
    12ac:	2000094c 	.word	0x2000094c
    12b0:	20000924 	.word	0x20000924
    12b4:	200008d0 	.word	0x200008d0
    12b8:	200008d8 	.word	0x200008d8
    12bc:	20000888 	.word	0x20000888
    12c0:	20000894 	.word	0x20000894
    12c4:	20000890 	.word	0x20000890
    12c8:	2000095c 	.word	0x2000095c
    12cc:	20000960 	.word	0x20000960
    12d0:	20000964 	.word	0x20000964
    12d4:	200008b4 	.word	0x200008b4
    12d8:	200008b8 	.word	0x200008b8
    12dc:	20000954 	.word	0x20000954
    12e0:	20000958 	.word	0x20000958
    12e4:	4661      	mov	r1, ip
    12e6:	f7fe febf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12ea:	f10d 0c04 	add.w	ip, sp, #4
    12ee:	4660      	mov	r0, ip
    12f0:	f7fe fefe 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    12f4:	f10d 0c04 	add.w	ip, sp, #4
    12f8:	4651      	mov	r1, sl
    12fa:	4660      	mov	r0, ip
    12fc:	f008 fc0e 	bl	9b1c <String::String(char const*)>
    1300:	f10d 0c14 	add.w	ip, sp, #20
    1304:	49d7      	ldr	r1, [pc, #860]	; (1664 <initialize_opcode_info()+0x1558>)
    1306:	4660      	mov	r0, ip
    1308:	f008 fc08 	bl	9b1c <String::String(char const*)>
    130c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    1310:	4621      	mov	r1, r4
    1312:	4660      	mov	r0, ip
    1314:	f008 fc02 	bl	9b1c <String::String(char const*)>
    1318:	f10d 0c04 	add.w	ip, sp, #4
    131c:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    1320:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1324:	4661      	mov	r1, ip
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
	opcode_info[0x98] = {"TYA","","SZ",2,1};
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
	opcode_info[0x9a] = {"TXS","","",2,1};
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1326:	f8df b368 	ldr.w	fp, [pc, #872]	; 1690 <initialize_opcode_info()+0x1584>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    132a:	f7fe fe9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    132e:	f10d 0c04 	add.w	ip, sp, #4
    1332:	4660      	mov	r0, ip
    1334:	f7fe fedc 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    1338:	f10d 0c04 	add.w	ip, sp, #4
    133c:	4649      	mov	r1, r9
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    133e:	f44f 7981 	mov.w	r9, #258	; 0x102
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    1342:	4660      	mov	r0, ip
    1344:	f008 fbea 	bl	9b1c <String::String(char const*)>
    1348:	4bc7      	ldr	r3, [pc, #796]	; (1668 <initialize_opcode_info()+0x155c>)
    134a:	f10d 0c14 	add.w	ip, sp, #20
    134e:	4619      	mov	r1, r3
    1350:	4660      	mov	r0, ip
    1352:	f008 fbe3 	bl	9b1c <String::String(char const*)>
    1356:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    135a:	4621      	mov	r1, r4
    135c:	4660      	mov	r0, ip
    135e:	f008 fbdd 	bl	9b1c <String::String(char const*)>
    1362:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1366:	a901      	add	r1, sp, #4
    1368:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    136c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1370:	f7fe fe7a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1374:	a801      	add	r0, sp, #4
    1376:	f7fe febb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    137a:	49bc      	ldr	r1, [pc, #752]	; (166c <initialize_opcode_info()+0x1560>)
    137c:	a801      	add	r0, sp, #4
    137e:	f008 fbcd 	bl	9b1c <String::String(char const*)>
    1382:	4621      	mov	r1, r4
    1384:	a805      	add	r0, sp, #20
    1386:	f008 fbc9 	bl	9b1c <String::String(char const*)>
    138a:	4639      	mov	r1, r7
    138c:	a809      	add	r0, sp, #36	; 0x24
    138e:	f008 fbc5 	bl	9b1c <String::String(char const*)>
    1392:	a901      	add	r1, sp, #4
    1394:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1398:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    139c:	f7fe fe64 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13a0:	a801      	add	r0, sp, #4
    13a2:	f7fe fea5 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    13a6:	4651      	mov	r1, sl
    13a8:	a801      	add	r0, sp, #4
    13aa:	f008 fbb7 	bl	9b1c <String::String(char const*)>
    13ae:	49b0      	ldr	r1, [pc, #704]	; (1670 <initialize_opcode_info()+0x1564>)
    13b0:	a805      	add	r0, sp, #20
    13b2:	f008 fbb3 	bl	9b1c <String::String(char const*)>
    13b6:	4621      	mov	r1, r4
    13b8:	a809      	add	r0, sp, #36	; 0x24
    13ba:	f008 fbaf 	bl	9b1c <String::String(char const*)>
    13be:	f240 3305 	movw	r3, #773	; 0x305
    13c2:	a901      	add	r1, sp, #4
    13c4:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
    13c8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    13cc:	f7fe fe4c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13d0:	a801      	add	r0, sp, #4
    13d2:	f7fe fe8d 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    13d6:	49a7      	ldr	r1, [pc, #668]	; (1674 <initialize_opcode_info()+0x1568>)
    13d8:	a801      	add	r0, sp, #4
    13da:	f008 fb9f 	bl	9b1c <String::String(char const*)>
    13de:	4621      	mov	r1, r4
    13e0:	a805      	add	r0, sp, #20
    13e2:	f008 fb9b 	bl	9b1c <String::String(char const*)>
    13e6:	4621      	mov	r1, r4
    13e8:	a809      	add	r0, sp, #36	; 0x24
    13ea:	f008 fb97 	bl	9b1c <String::String(char const*)>
    13ee:	a901      	add	r1, sp, #4
    13f0:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    13f4:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    13f8:	f7fe fe36 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13fc:	a801      	add	r0, sp, #4
    13fe:	f7fe fe77 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    1402:	4651      	mov	r1, sl
    1404:	f10d 0a04 	add.w	sl, sp, #4
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    1408:	f8df 9288 	ldr.w	r9, [pc, #648]	; 1694 <initialize_opcode_info()+0x1588>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    140c:	4650      	mov	r0, sl
    140e:	f10d 0a14 	add.w	sl, sp, #20
    1412:	f008 fb83 	bl	9b1c <String::String(char const*)>
    1416:	4998      	ldr	r1, [pc, #608]	; (1678 <initialize_opcode_info()+0x156c>)
    1418:	4650      	mov	r0, sl
    141a:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    141e:	f008 fb7d 	bl	9b1c <String::String(char const*)>
    1422:	4621      	mov	r1, r4
    1424:	4650      	mov	r0, sl
    1426:	f240 3a05 	movw	sl, #773	; 0x305
    142a:	f008 fb77 	bl	9b1c <String::String(char const*)>
    142e:	f605 302c 	addw	r0, r5, #2860	; 0xb2c
    1432:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1436:	f10d 0a04 	add.w	sl, sp, #4
    143a:	4651      	mov	r1, sl
    143c:	f7fe fe14 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1440:	4650      	mov	r0, sl
    1442:	f7fe fe55 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1446:	4650      	mov	r0, sl
    1448:	f10d 0a14 	add.w	sl, sp, #20
    144c:	4659      	mov	r1, fp
    144e:	f008 fb65 	bl	9b1c <String::String(char const*)>
    1452:	498a      	ldr	r1, [pc, #552]	; (167c <initialize_opcode_info()+0x1570>)
    1454:	4650      	mov	r0, sl
    1456:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    145a:	f008 fb5f 	bl	9b1c <String::String(char const*)>
    145e:	4639      	mov	r1, r7
    1460:	4650      	mov	r0, sl
    1462:	f10d 0a04 	add.w	sl, sp, #4
    1466:	f008 fb59 	bl	9b1c <String::String(char const*)>
    146a:	f240 2102 	movw	r1, #514	; 0x202
    146e:	f605 30c8 	addw	r0, r5, #3016	; 0xbc8
    1472:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1476:	4651      	mov	r1, sl
    1478:	f7fe fdf6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    147c:	4650      	mov	r0, sl
    147e:	f7fe fe37 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    1482:	4650      	mov	r0, sl
    1484:	f10d 0a14 	add.w	sl, sp, #20
    1488:	4649      	mov	r1, r9
    148a:	f008 fb47 	bl	9b1c <String::String(char const*)>
    148e:	497c      	ldr	r1, [pc, #496]	; (1680 <initialize_opcode_info()+0x1574>)
    1490:	4650      	mov	r0, sl
    1492:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1496:	f008 fb41 	bl	9b1c <String::String(char const*)>
    149a:	4639      	mov	r1, r7
    149c:	4650      	mov	r0, sl
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    149e:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 1698 <initialize_opcode_info()+0x158c>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    14a2:	f008 fb3b 	bl	9b1c <String::String(char const*)>
    14a6:	f240 2006 	movw	r0, #518	; 0x206
    14aa:	a901      	add	r1, sp, #4
    14ac:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    14b0:	f605 30fc 	addw	r0, r5, #3068	; 0xbfc
    14b4:	f7fe fdd8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14b8:	a801      	add	r0, sp, #4
    14ba:	f7fe fe19 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    14be:	4651      	mov	r1, sl
    14c0:	a801      	add	r0, sp, #4
    14c2:	f008 fb2b 	bl	9b1c <String::String(char const*)>
    14c6:	496d      	ldr	r1, [pc, #436]	; (167c <initialize_opcode_info()+0x1570>)
    14c8:	a805      	add	r0, sp, #20
    14ca:	f008 fb27 	bl	9b1c <String::String(char const*)>
    14ce:	4639      	mov	r1, r7
    14d0:	a809      	add	r0, sp, #36	; 0x24
    14d2:	f008 fb23 	bl	9b1c <String::String(char const*)>
    14d6:	f240 2102 	movw	r1, #514	; 0x202
    14da:	f505 6043 	add.w	r0, r5, #3120	; 0xc30
    14de:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    14e2:	a901      	add	r1, sp, #4
    14e4:	f7fe fdc0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14e8:	a801      	add	r0, sp, #4
    14ea:	f7fe fe01 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    14ee:	4659      	mov	r1, fp
    14f0:	a801      	add	r0, sp, #4
    14f2:	f008 fb13 	bl	9b1c <String::String(char const*)>
    14f6:	4963      	ldr	r1, [pc, #396]	; (1684 <initialize_opcode_info()+0x1578>)
    14f8:	a805      	add	r0, sp, #20
    14fa:	f008 fb0f 	bl	9b1c <String::String(char const*)>
    14fe:	4639      	mov	r1, r7
    1500:	a809      	add	r0, sp, #36	; 0x24
    1502:	f008 fb0b 	bl	9b1c <String::String(char const*)>
    1506:	f240 2e03 	movw	lr, #515	; 0x203
    150a:	a901      	add	r1, sp, #4
    150c:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    1510:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1514:	f7fe fda8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1518:	a801      	add	r0, sp, #4
    151a:	f7fe fde9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    151e:	4649      	mov	r1, r9
    1520:	a801      	add	r0, sp, #4
    1522:	f008 fafb 	bl	9b1c <String::String(char const*)>
    1526:	4957      	ldr	r1, [pc, #348]	; (1684 <initialize_opcode_info()+0x1578>)
    1528:	a805      	add	r0, sp, #20
    152a:	f008 faf7 	bl	9b1c <String::String(char const*)>
    152e:	4639      	mov	r1, r7
    1530:	a809      	add	r0, sp, #36	; 0x24
    1532:	f008 faf3 	bl	9b1c <String::String(char const*)>
    1536:	f240 2e03 	movw	lr, #515	; 0x203
    153a:	a901      	add	r1, sp, #4
    153c:	f605 40cc 	addw	r0, r5, #3276	; 0xccc
    1540:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1544:	f7fe fd90 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1548:	a801      	add	r0, sp, #4
    154a:	f7fe fdd1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    154e:	4651      	mov	r1, sl
    1550:	a801      	add	r0, sp, #4
    1552:	f008 fae3 	bl	9b1c <String::String(char const*)>
    1556:	494b      	ldr	r1, [pc, #300]	; (1684 <initialize_opcode_info()+0x1578>)
    1558:	a805      	add	r0, sp, #20
    155a:	f008 fadf 	bl	9b1c <String::String(char const*)>
    155e:	4639      	mov	r1, r7
    1560:	a809      	add	r0, sp, #36	; 0x24
    1562:	f008 fadb 	bl	9b1c <String::String(char const*)>
    1566:	f240 2e03 	movw	lr, #515	; 0x203
    156a:	a901      	add	r1, sp, #4
    156c:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    1570:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1574:	f7fe fd78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1578:	a801      	add	r0, sp, #4
    157a:	f7fe fdb9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    157e:	4942      	ldr	r1, [pc, #264]	; (1688 <initialize_opcode_info()+0x157c>)
    1580:	a801      	add	r0, sp, #4
    1582:	f008 facb 	bl	9b1c <String::String(char const*)>
    1586:	4621      	mov	r1, r4
    1588:	a805      	add	r0, sp, #20
    158a:	f008 fac7 	bl	9b1c <String::String(char const*)>
    158e:	4639      	mov	r1, r7
    1590:	a809      	add	r0, sp, #36	; 0x24
    1592:	f008 fac3 	bl	9b1c <String::String(char const*)>
    1596:	f44f 7281 	mov.w	r2, #258	; 0x102
    159a:	a901      	add	r1, sp, #4
    159c:	f605 5068 	addw	r0, r5, #3432	; 0xd68
    15a0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    15a4:	f7fe fd60 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15a8:	a801      	add	r0, sp, #4
    15aa:	f7fe fda1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    15ae:	4649      	mov	r1, r9
    15b0:	a801      	add	r0, sp, #4
    15b2:	f008 fab3 	bl	9b1c <String::String(char const*)>
    15b6:	4931      	ldr	r1, [pc, #196]	; (167c <initialize_opcode_info()+0x1570>)
    15b8:	a805      	add	r0, sp, #20
    15ba:	f008 faaf 	bl	9b1c <String::String(char const*)>
    15be:	4639      	mov	r1, r7
    15c0:	a809      	add	r0, sp, #36	; 0x24
    15c2:	f008 faab 	bl	9b1c <String::String(char const*)>
    15c6:	f240 2102 	movw	r1, #514	; 0x202
    15ca:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
    15ce:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    15d2:	a901      	add	r1, sp, #4
    15d4:	f7fe fd48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15d8:	a801      	add	r0, sp, #4
    15da:	f7fe fd89 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    15de:	492b      	ldr	r1, [pc, #172]	; (168c <initialize_opcode_info()+0x1580>)
    15e0:	a801      	add	r0, sp, #4
    15e2:	f008 fa9b 	bl	9b1c <String::String(char const*)>
    15e6:	4621      	mov	r1, r4
    15e8:	a805      	add	r0, sp, #20
    15ea:	f008 fa97 	bl	9b1c <String::String(char const*)>
    15ee:	4639      	mov	r1, r7
    15f0:	a809      	add	r0, sp, #36	; 0x24
    15f2:	f008 fa93 	bl	9b1c <String::String(char const*)>
    15f6:	f44f 7281 	mov.w	r2, #258	; 0x102
    15fa:	a901      	add	r1, sp, #4
    15fc:	f505 605d 	add.w	r0, r5, #3536	; 0xdd0
    1600:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1604:	f7fe fd30 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1608:	a801      	add	r0, sp, #4
    160a:	f7fe fd71 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    160e:	4659      	mov	r1, fp
    1610:	a801      	add	r0, sp, #4
    1612:	f008 fa83 	bl	9b1c <String::String(char const*)>
    1616:	4641      	mov	r1, r8
    1618:	a805      	add	r0, sp, #20
    161a:	f008 fa7f 	bl	9b1c <String::String(char const*)>
    161e:	4639      	mov	r1, r7
    1620:	a809      	add	r0, sp, #36	; 0x24
    1622:	f008 fa7b 	bl	9b1c <String::String(char const*)>
    1626:	f44f 7341 	mov.w	r3, #772	; 0x304
    162a:	a901      	add	r1, sp, #4
    162c:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    1630:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1634:	f7fe fd18 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1638:	a801      	add	r0, sp, #4
    163a:	f7fe fd59 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    163e:	4649      	mov	r1, r9
    1640:	a801      	add	r0, sp, #4
    1642:	f008 fa6b 	bl	9b1c <String::String(char const*)>
    1646:	4641      	mov	r1, r8
    1648:	a805      	add	r0, sp, #20
    164a:	f008 fa67 	bl	9b1c <String::String(char const*)>
    164e:	4639      	mov	r1, r7
    1650:	a809      	add	r0, sp, #36	; 0x24
    1652:	f008 fa63 	bl	9b1c <String::String(char const*)>
    1656:	f44f 7341 	mov.w	r3, #772	; 0x304
    165a:	f605 606c 	addw	r0, r5, #3692	; 0xe6c
    165e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1662:	e01b      	b.n	169c <initialize_opcode_info()+0x1590>
    1664:	200008c0 	.word	0x200008c0
    1668:	20000968 	.word	0x20000968
    166c:	20000970 	.word	0x20000970
    1670:	200008d0 	.word	0x200008d0
    1674:	20000974 	.word	0x20000974
    1678:	200008d8 	.word	0x200008d8
    167c:	200008a4 	.word	0x200008a4
    1680:	20000888 	.word	0x20000888
    1684:	20000894 	.word	0x20000894
    1688:	20000984 	.word	0x20000984
    168c:	20000988 	.word	0x20000988
    1690:	20000978 	.word	0x20000978
    1694:	2000097c 	.word	0x2000097c
    1698:	20000980 	.word	0x20000980
    169c:	ab01      	add	r3, sp, #4
    169e:	4619      	mov	r1, r3
    16a0:	f7fe fce2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16a4:	ab01      	add	r3, sp, #4
    16a6:	4618      	mov	r0, r3
    16a8:	f7fe fd22 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    16ac:	ab01      	add	r3, sp, #4
    16ae:	4651      	mov	r1, sl
    16b0:	4618      	mov	r0, r3
    16b2:	f008 fa33 	bl	9b1c <String::String(char const*)>
    16b6:	ab05      	add	r3, sp, #20
    16b8:	4641      	mov	r1, r8
    16ba:	f44f 7841 	mov.w	r8, #772	; 0x304
    16be:	4618      	mov	r0, r3
    16c0:	f008 fa2c 	bl	9b1c <String::String(char const*)>
    16c4:	ab09      	add	r3, sp, #36	; 0x24
    16c6:	4639      	mov	r1, r7
    16c8:	4618      	mov	r0, r3
    16ca:	f008 fa27 	bl	9b1c <String::String(char const*)>
    16ce:	ab01      	add	r3, sp, #4
    16d0:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
    16d4:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    16d8:	4619      	mov	r1, r3
    16da:	f7fe fcc5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16de:	ab01      	add	r3, sp, #4
    16e0:	4618      	mov	r0, r3
    16e2:	f7fe fd05 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    16e6:	ab01      	add	r3, sp, #4
    16e8:	49d8      	ldr	r1, [pc, #864]	; (1a4c <initialize_opcode_info()+0x1940>)
    16ea:	4618      	mov	r0, r3
    16ec:	f008 fa16 	bl	9b1c <String::String(char const*)>
    16f0:	ab05      	add	r3, sp, #20
    16f2:	49d7      	ldr	r1, [pc, #860]	; (1a50 <initialize_opcode_info()+0x1944>)
    16f4:	4618      	mov	r0, r3
    16f6:	f008 fa11 	bl	9b1c <String::String(char const*)>
    16fa:	ab09      	add	r3, sp, #36	; 0x24
    16fc:	4621      	mov	r1, r4
    16fe:	4618      	mov	r0, r3
    1700:	f008 fa0c 	bl	9b1c <String::String(char const*)>
    1704:	ab01      	add	r3, sp, #4
    1706:	f240 2102 	movw	r1, #514	; 0x202
    170a:	f605 7008 	addw	r0, r5, #3848	; 0xf08
    170e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1712:	4619      	mov	r1, r3
    1714:	f7fe fca8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1718:	ab01      	add	r3, sp, #4
    171a:	4618      	mov	r0, r3
    171c:	f7fe fce8 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    1720:	ab01      	add	r3, sp, #4
    1722:	4649      	mov	r1, r9
    1724:	4618      	mov	r0, r3
    1726:	f008 f9f9 	bl	9b1c <String::String(char const*)>
    172a:	ab05      	add	r3, sp, #20
    172c:	49c9      	ldr	r1, [pc, #804]	; (1a54 <initialize_opcode_info()+0x1948>)
    172e:	4618      	mov	r0, r3
    1730:	f008 f9f4 	bl	9b1c <String::String(char const*)>
    1734:	ab09      	add	r3, sp, #36	; 0x24
    1736:	4639      	mov	r1, r7
    1738:	4618      	mov	r0, r3
    173a:	f008 f9ef 	bl	9b1c <String::String(char const*)>
    173e:	ab01      	add	r3, sp, #4
    1740:	f240 2105 	movw	r1, #517	; 0x205
    1744:	f605 703c 	addw	r0, r5, #3900	; 0xf3c
    1748:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    174c:	4619      	mov	r1, r3
    174e:	f7fe fc8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1752:	ab01      	add	r3, sp, #4
    1754:	4618      	mov	r0, r3
    1756:	f7fe fccb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    175a:	ab01      	add	r3, sp, #4
    175c:	4659      	mov	r1, fp
    175e:	4618      	mov	r0, r3
    1760:	f008 f9dc 	bl	9b1c <String::String(char const*)>
    1764:	ab05      	add	r3, sp, #20
    1766:	49bc      	ldr	r1, [pc, #752]	; (1a58 <initialize_opcode_info()+0x194c>)
    1768:	4618      	mov	r0, r3
    176a:	f008 f9d7 	bl	9b1c <String::String(char const*)>
    176e:	ab09      	add	r3, sp, #36	; 0x24
    1770:	4639      	mov	r1, r7
    1772:	4618      	mov	r0, r3
    1774:	f008 f9d2 	bl	9b1c <String::String(char const*)>
    1778:	ab01      	add	r3, sp, #4
    177a:	f44f 7c01 	mov.w	ip, #516	; 0x204
    177e:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
    1782:	4619      	mov	r1, r3
    1784:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1788:	f7fe fc6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    178c:	ab01      	add	r3, sp, #4
    178e:	4618      	mov	r0, r3
    1790:	f7fe fcae 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1794:	ab01      	add	r3, sp, #4
    1796:	4649      	mov	r1, r9
    1798:	4618      	mov	r0, r3
    179a:	f008 f9bf 	bl	9b1c <String::String(char const*)>
    179e:	ab05      	add	r3, sp, #20
    17a0:	49ad      	ldr	r1, [pc, #692]	; (1a58 <initialize_opcode_info()+0x194c>)
    17a2:	4618      	mov	r0, r3
    17a4:	f008 f9ba 	bl	9b1c <String::String(char const*)>
    17a8:	ab09      	add	r3, sp, #36	; 0x24
    17aa:	4639      	mov	r1, r7
    17ac:	4618      	mov	r0, r3
    17ae:	f008 f9b5 	bl	9b1c <String::String(char const*)>
    17b2:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    17b6:	ab01      	add	r3, sp, #4
    17b8:	f44f 7c01 	mov.w	ip, #516	; 0x204
    17bc:	f602 302c 	addw	r0, r2, #2860	; 0xb2c
    17c0:	4619      	mov	r1, r3
    17c2:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    17c6:	f7fe fc4f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17ca:	ab01      	add	r3, sp, #4
    17cc:	4618      	mov	r0, r3
    17ce:	f7fe fc8f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    17d2:	ab01      	add	r3, sp, #4
    17d4:	4651      	mov	r1, sl
    17d6:	4618      	mov	r0, r3
    17d8:	f008 f9a0 	bl	9b1c <String::String(char const*)>
    17dc:	4b9f      	ldr	r3, [pc, #636]	; (1a5c <initialize_opcode_info()+0x1950>)
    17de:	4619      	mov	r1, r3
    17e0:	ab05      	add	r3, sp, #20
    17e2:	4618      	mov	r0, r3
    17e4:	f008 f99a 	bl	9b1c <String::String(char const*)>
    17e8:	ab09      	add	r3, sp, #36	; 0x24
    17ea:	4639      	mov	r1, r7
    17ec:	4618      	mov	r0, r3
    17ee:	f008 f995 	bl	9b1c <String::String(char const*)>
    17f2:	ab01      	add	r3, sp, #4
    17f4:	f44f 7c01 	mov.w	ip, #516	; 0x204
    17f8:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
    17fc:	4619      	mov	r1, r3
	opcode_info[0xb8] = {"CLV","","V",2,1};
    17fe:	4d98      	ldr	r5, [pc, #608]	; (1a60 <initialize_opcode_info()+0x1954>)
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    1800:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1804:	f7fe fc30 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1808:	ab01      	add	r3, sp, #4
    180a:	4618      	mov	r0, r3
    180c:	f7fe fc70 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    1810:	ab01      	add	r3, sp, #4
    1812:	4994      	ldr	r1, [pc, #592]	; (1a64 <initialize_opcode_info()+0x1958>)
    1814:	4618      	mov	r0, r3
    1816:	f008 f981 	bl	9b1c <String::String(char const*)>
    181a:	ab05      	add	r3, sp, #20
    181c:	4621      	mov	r1, r4
    181e:	4618      	mov	r0, r3
    1820:	f008 f97c 	bl	9b1c <String::String(char const*)>
    1824:	ab09      	add	r3, sp, #36	; 0x24
    1826:	4990      	ldr	r1, [pc, #576]	; (1a68 <initialize_opcode_info()+0x195c>)
    1828:	4618      	mov	r0, r3
    182a:	f008 f977 	bl	9b1c <String::String(char const*)>
    182e:	ab01      	add	r3, sp, #4
    1830:	f44f 7281 	mov.w	r2, #258	; 0x102
    1834:	4628      	mov	r0, r5
    1836:	4619      	mov	r1, r3
    1838:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    183c:	f7fe fc14 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1840:	ab01      	add	r3, sp, #4
    1842:	4618      	mov	r0, r3
    1844:	f7fe fc54 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1848:	ab01      	add	r3, sp, #4
    184a:	4649      	mov	r1, r9
    184c:	4618      	mov	r0, r3
    184e:	f008 f965 	bl	9b1c <String::String(char const*)>
    1852:	ab05      	add	r3, sp, #20
    1854:	4985      	ldr	r1, [pc, #532]	; (1a6c <initialize_opcode_info()+0x1960>)
    1856:	4618      	mov	r0, r3
    1858:	f008 f960 	bl	9b1c <String::String(char const*)>
    185c:	ab09      	add	r3, sp, #36	; 0x24
    185e:	4639      	mov	r1, r7
    1860:	4618      	mov	r0, r3
    1862:	f008 f95b 	bl	9b1c <String::String(char const*)>
    1866:	ab01      	add	r3, sp, #4
    1868:	f105 0034 	add.w	r0, r5, #52	; 0x34
    186c:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1870:	4619      	mov	r1, r3
    1872:	f7fe fbf9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1876:	ab01      	add	r3, sp, #4
    1878:	4618      	mov	r0, r3
    187a:	f7fe fc39 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    187e:	ab01      	add	r3, sp, #4
    1880:	497b      	ldr	r1, [pc, #492]	; (1a70 <initialize_opcode_info()+0x1964>)
    1882:	4618      	mov	r0, r3
    1884:	f008 f94a 	bl	9b1c <String::String(char const*)>
    1888:	ab05      	add	r3, sp, #20
    188a:	4621      	mov	r1, r4
    188c:	4618      	mov	r0, r3
    188e:	f008 f945 	bl	9b1c <String::String(char const*)>
    1892:	ab09      	add	r3, sp, #36	; 0x24
    1894:	4621      	mov	r1, r4
    1896:	4618      	mov	r0, r3
    1898:	f008 f940 	bl	9b1c <String::String(char const*)>
    189c:	ab01      	add	r3, sp, #4
    189e:	f44f 7281 	mov.w	r2, #258	; 0x102
    18a2:	f105 0068 	add.w	r0, r5, #104	; 0x68
    18a6:	4619      	mov	r1, r3
    18a8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    18ac:	f7fe fbdc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18b0:	ab01      	add	r3, sp, #4
    18b2:	4618      	mov	r0, r3
    18b4:	f7fe fc1c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    18b8:	ab01      	add	r3, sp, #4
    18ba:	4659      	mov	r1, fp
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    18bc:	f10d 0b04 	add.w	fp, sp, #4
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    18c0:	4618      	mov	r0, r3
    18c2:	f008 f92b 	bl	9b1c <String::String(char const*)>
    18c6:	ab05      	add	r3, sp, #20
    18c8:	496a      	ldr	r1, [pc, #424]	; (1a74 <initialize_opcode_info()+0x1968>)
    18ca:	4618      	mov	r0, r3
    18cc:	f008 f926 	bl	9b1c <String::String(char const*)>
    18d0:	ab09      	add	r3, sp, #36	; 0x24
    18d2:	4639      	mov	r1, r7
    18d4:	4618      	mov	r0, r3
    18d6:	f008 f921 	bl	9b1c <String::String(char const*)>
    18da:	ab01      	add	r3, sp, #4
    18dc:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
    18e0:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    18e4:	4619      	mov	r1, r3
    18e6:	f7fe fbbf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18ea:	ab01      	add	r3, sp, #4
    18ec:	4618      	mov	r0, r3
    18ee:	f7fe fbff 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18f2:	ab01      	add	r3, sp, #4
    18f4:	4649      	mov	r1, r9
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    18f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1a84 <initialize_opcode_info()+0x1978>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18fa:	4618      	mov	r0, r3
    18fc:	f008 f90e 	bl	9b1c <String::String(char const*)>
    1900:	ab05      	add	r3, sp, #20
    1902:	495c      	ldr	r1, [pc, #368]	; (1a74 <initialize_opcode_info()+0x1968>)
    1904:	4618      	mov	r0, r3
    1906:	f008 f909 	bl	9b1c <String::String(char const*)>
    190a:	ab09      	add	r3, sp, #36	; 0x24
    190c:	4639      	mov	r1, r7
    190e:	4618      	mov	r0, r3
    1910:	f008 f904 	bl	9b1c <String::String(char const*)>
    1914:	ab01      	add	r3, sp, #4
    1916:	f505 7082 	add.w	r0, r5, #260	; 0x104
    191a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    191e:	4619      	mov	r1, r3
    1920:	f7fe fba2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1924:	ab01      	add	r3, sp, #4
    1926:	4618      	mov	r0, r3
    1928:	f7fe fbe2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    192c:	ab01      	add	r3, sp, #4
    192e:	4651      	mov	r1, sl
    1930:	f10d 0a04 	add.w	sl, sp, #4
    1934:	4618      	mov	r0, r3
    1936:	f008 f8f1 	bl	9b1c <String::String(char const*)>
    193a:	ab05      	add	r3, sp, #20
    193c:	494b      	ldr	r1, [pc, #300]	; (1a6c <initialize_opcode_info()+0x1960>)
    193e:	4618      	mov	r0, r3
    1940:	f008 f8ec 	bl	9b1c <String::String(char const*)>
    1944:	ab09      	add	r3, sp, #36	; 0x24
    1946:	4639      	mov	r1, r7
    1948:	4618      	mov	r0, r3
    194a:	f008 f8e7 	bl	9b1c <String::String(char const*)>
    194e:	4651      	mov	r1, sl
    1950:	f505 709c 	add.w	r0, r5, #312	; 0x138
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1954:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a88 <initialize_opcode_info()+0x197c>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1958:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    195c:	f7fe fb84 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1960:	4658      	mov	r0, fp
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1962:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1a8c <initialize_opcode_info()+0x1980>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1966:	f7fe fbc3 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    196a:	4658      	mov	r0, fp
    196c:	f10d 0b14 	add.w	fp, sp, #20
    1970:	4651      	mov	r1, sl
    1972:	f008 f8d3 	bl	9b1c <String::String(char const*)>
    1976:	4940      	ldr	r1, [pc, #256]	; (1a78 <initialize_opcode_info()+0x196c>)
    1978:	4658      	mov	r0, fp
    197a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    197e:	f008 f8cd 	bl	9b1c <String::String(char const*)>
    1982:	4631      	mov	r1, r6
    1984:	4658      	mov	r0, fp
    1986:	f10d 0b04 	add.w	fp, sp, #4
    198a:	f008 f8c7 	bl	9b1c <String::String(char const*)>
    198e:	f240 2102 	movw	r1, #514	; 0x202
    1992:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
    1996:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    199a:	4659      	mov	r1, fp
    199c:	f7fe fb64 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19a0:	4658      	mov	r0, fp
    19a2:	f7fe fba5 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    19a6:	4658      	mov	r0, fp
    19a8:	f10d 0b14 	add.w	fp, sp, #20
    19ac:	4641      	mov	r1, r8
    19ae:	f008 f8b5 	bl	9b1c <String::String(char const*)>
    19b2:	4932      	ldr	r1, [pc, #200]	; (1a7c <initialize_opcode_info()+0x1970>)
    19b4:	4658      	mov	r0, fp
    19b6:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    19ba:	f008 f8af 	bl	9b1c <String::String(char const*)>
    19be:	4631      	mov	r1, r6
    19c0:	4658      	mov	r0, fp
    19c2:	f10d 0b04 	add.w	fp, sp, #4
    19c6:	f008 f8a9 	bl	9b1c <String::String(char const*)>
    19ca:	f240 2006 	movw	r0, #518	; 0x206
    19ce:	4659      	mov	r1, fp
    19d0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    19d4:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
    19d8:	f7fe fb46 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19dc:	4658      	mov	r0, fp
    19de:	f7fe fb87 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    19e2:	4658      	mov	r0, fp
    19e4:	f10d 0b14 	add.w	fp, sp, #20
    19e8:	4651      	mov	r1, sl
    19ea:	f008 f897 	bl	9b1c <String::String(char const*)>
    19ee:	4924      	ldr	r1, [pc, #144]	; (1a80 <initialize_opcode_info()+0x1974>)
    19f0:	4658      	mov	r0, fp
    19f2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    19f6:	f008 f891 	bl	9b1c <String::String(char const*)>
    19fa:	4631      	mov	r1, r6
    19fc:	4658      	mov	r0, fp
    19fe:	f240 2b03 	movw	fp, #515	; 0x203
    1a02:	f008 f88b 	bl	9b1c <String::String(char const*)>
    1a06:	ab01      	add	r3, sp, #4
    1a08:	f505 701c 	add.w	r0, r5, #624	; 0x270
    1a0c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1a10:	4619      	mov	r1, r3
    1a12:	f7fe fb29 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a16:	ab01      	add	r3, sp, #4
    1a18:	4618      	mov	r0, r3
    1a1a:	f7fe fb69 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    1a1e:	ab01      	add	r3, sp, #4
    1a20:	4641      	mov	r1, r8
    1a22:	4618      	mov	r0, r3
    1a24:	f008 f87a 	bl	9b1c <String::String(char const*)>
    1a28:	ab05      	add	r3, sp, #20
    1a2a:	4915      	ldr	r1, [pc, #84]	; (1a80 <initialize_opcode_info()+0x1974>)
    1a2c:	4618      	mov	r0, r3
    1a2e:	f008 f875 	bl	9b1c <String::String(char const*)>
    1a32:	ab09      	add	r3, sp, #36	; 0x24
    1a34:	4631      	mov	r1, r6
    1a36:	4618      	mov	r0, r3
    1a38:	f008 f870 	bl	9b1c <String::String(char const*)>
    1a3c:	ab01      	add	r3, sp, #4
    1a3e:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
    1a42:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1a46:	4619      	mov	r1, r3
    1a48:	e022      	b.n	1a90 <initialize_opcode_info()+0x1984>
    1a4a:	bf00      	nop
    1a4c:	2000098c 	.word	0x2000098c
    1a50:	200008b4 	.word	0x200008b4
    1a54:	200008b8 	.word	0x200008b8
    1a58:	200008c0 	.word	0x200008c0
    1a5c:	20000968 	.word	0x20000968
    1a60:	20017978 	.word	0x20017978
    1a64:	20000990 	.word	0x20000990
    1a68:	20000994 	.word	0x20000994
    1a6c:	200008d0 	.word	0x200008d0
    1a70:	20000998 	.word	0x20000998
    1a74:	200008d8 	.word	0x200008d8
    1a78:	200008a4 	.word	0x200008a4
    1a7c:	20000888 	.word	0x20000888
    1a80:	20000894 	.word	0x20000894
    1a84:	200009a4 	.word	0x200009a4
    1a88:	2000099c 	.word	0x2000099c
    1a8c:	200009a0 	.word	0x200009a0
    1a90:	f7fe faea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a94:	ab01      	add	r3, sp, #4
    1a96:	4618      	mov	r0, r3
    1a98:	f7fe fb2a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1a9c:	ab01      	add	r3, sp, #4
    1a9e:	4649      	mov	r1, r9
    1aa0:	4618      	mov	r0, r3
    1aa2:	f008 f83b 	bl	9b1c <String::String(char const*)>
    1aa6:	ab05      	add	r3, sp, #20
    1aa8:	49d6      	ldr	r1, [pc, #856]	; (1e04 <initialize_opcode_info()+0x1cf8>)
    1aaa:	4618      	mov	r0, r3
    1aac:	f008 f836 	bl	9b1c <String::String(char const*)>
    1ab0:	ab09      	add	r3, sp, #36	; 0x24
    1ab2:	4639      	mov	r1, r7
    1ab4:	4618      	mov	r0, r3
    1ab6:	f008 f831 	bl	9b1c <String::String(char const*)>
    1aba:	ab01      	add	r3, sp, #4
    1abc:	f240 2e05 	movw	lr, #517	; 0x205
    1ac0:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
    1ac4:	4619      	mov	r1, r3
    1ac6:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1aca:	f7fe facd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ace:	ab01      	add	r3, sp, #4
    1ad0:	4618      	mov	r0, r3
    1ad2:	f7fe fb0d 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1ad6:	ab01      	add	r3, sp, #4
    1ad8:	49cb      	ldr	r1, [pc, #812]	; (1e08 <initialize_opcode_info()+0x1cfc>)
    1ada:	4618      	mov	r0, r3
    1adc:	f008 f81e 	bl	9b1c <String::String(char const*)>
    1ae0:	ab05      	add	r3, sp, #20
    1ae2:	4621      	mov	r1, r4
    1ae4:	4618      	mov	r0, r3
    1ae6:	f008 f819 	bl	9b1c <String::String(char const*)>
    1aea:	ab09      	add	r3, sp, #36	; 0x24
    1aec:	4621      	mov	r1, r4
    1aee:	4618      	mov	r0, r3
    1af0:	f008 f814 	bl	9b1c <String::String(char const*)>
    1af4:	ab01      	add	r3, sp, #4
    1af6:	f44f 7281 	mov.w	r2, #258	; 0x102
    1afa:	f505 7050 	add.w	r0, r5, #832	; 0x340
    1afe:	4619      	mov	r1, r3
    1b00:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1b04:	f7fe fab0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b08:	ab01      	add	r3, sp, #4
    1b0a:	4618      	mov	r0, r3
    1b0c:	f7fe faf0 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1b10:	ab01      	add	r3, sp, #4
    1b12:	4641      	mov	r1, r8
    1b14:	4618      	mov	r0, r3
    1b16:	f008 f801 	bl	9b1c <String::String(char const*)>
    1b1a:	ab05      	add	r3, sp, #20
    1b1c:	49bb      	ldr	r1, [pc, #748]	; (1e0c <initialize_opcode_info()+0x1d00>)
    1b1e:	4618      	mov	r0, r3
    1b20:	f007 fffc 	bl	9b1c <String::String(char const*)>
    1b24:	ab09      	add	r3, sp, #36	; 0x24
    1b26:	4631      	mov	r1, r6
    1b28:	4618      	mov	r0, r3
    1b2a:	f007 fff7 	bl	9b1c <String::String(char const*)>
    1b2e:	ab01      	add	r3, sp, #4
    1b30:	f240 2102 	movw	r1, #514	; 0x202
    1b34:	f505 705d 	add.w	r0, r5, #884	; 0x374
    1b38:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1b3c:	4619      	mov	r1, r3
    1b3e:	f7fe fa93 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b42:	ab01      	add	r3, sp, #4
    1b44:	4618      	mov	r0, r3
    1b46:	f7fe fad3 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1b4a:	ab01      	add	r3, sp, #4
    1b4c:	49b0      	ldr	r1, [pc, #704]	; (1e10 <initialize_opcode_info()+0x1d04>)
    1b4e:	4618      	mov	r0, r3
    1b50:	f007 ffe4 	bl	9b1c <String::String(char const*)>
    1b54:	ab05      	add	r3, sp, #20
    1b56:	4621      	mov	r1, r4
    1b58:	4618      	mov	r0, r3
    1b5a:	f007 ffdf 	bl	9b1c <String::String(char const*)>
    1b5e:	ab09      	add	r3, sp, #36	; 0x24
    1b60:	4639      	mov	r1, r7
    1b62:	4618      	mov	r0, r3
    1b64:	f007 ffda 	bl	9b1c <String::String(char const*)>
    1b68:	ab01      	add	r3, sp, #4
    1b6a:	f44f 7281 	mov.w	r2, #258	; 0x102
    1b6e:	f505 706a 	add.w	r0, r5, #936	; 0x3a8
    1b72:	4619      	mov	r1, r3
    1b74:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1b78:	f7fe fa76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b7c:	ab01      	add	r3, sp, #4
    1b7e:	4618      	mov	r0, r3
    1b80:	f7fe fab6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1b84:	4651      	mov	r1, sl
    1b86:	f10d 0a04 	add.w	sl, sp, #4
    1b8a:	4650      	mov	r0, sl
    1b8c:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 1e38 <initialize_opcode_info()+0x1d2c>
    1b90:	f007 ffc4 	bl	9b1c <String::String(char const*)>
    1b94:	ab05      	add	r3, sp, #20
    1b96:	4651      	mov	r1, sl
    1b98:	4618      	mov	r0, r3
    1b9a:	f007 ffbf 	bl	9b1c <String::String(char const*)>
    1b9e:	ab09      	add	r3, sp, #36	; 0x24
    1ba0:	4631      	mov	r1, r6
    1ba2:	4618      	mov	r0, r3
    1ba4:	f007 ffba 	bl	9b1c <String::String(char const*)>
    1ba8:	f44f 7341 	mov.w	r3, #772	; 0x304
    1bac:	a901      	add	r1, sp, #4
    1bae:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    1bb2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1bb6:	f7fe fa57 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bba:	a801      	add	r0, sp, #4
    1bbc:	f7fe fa98 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1bc0:	4641      	mov	r1, r8
    1bc2:	a801      	add	r0, sp, #4
    1bc4:	f007 ffaa 	bl	9b1c <String::String(char const*)>
    1bc8:	4651      	mov	r1, sl
    1bca:	a805      	add	r0, sp, #20
    1bcc:	f007 ffa6 	bl	9b1c <String::String(char const*)>
    1bd0:	4631      	mov	r1, r6
    1bd2:	a809      	add	r0, sp, #36	; 0x24
    1bd4:	f007 ffa2 	bl	9b1c <String::String(char const*)>
    1bd8:	f44f 7341 	mov.w	r3, #772	; 0x304
    1bdc:	a901      	add	r1, sp, #4
    1bde:	f205 4044 	addw	r0, r5, #1092	; 0x444
    1be2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1be6:	f7fe fa3f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bea:	a801      	add	r0, sp, #4
    1bec:	f7fe fa80 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1bf0:	4649      	mov	r1, r9
    1bf2:	a801      	add	r0, sp, #4
    1bf4:	f007 ff92 	bl	9b1c <String::String(char const*)>
    1bf8:	4651      	mov	r1, sl
    1bfa:	a805      	add	r0, sp, #20
    1bfc:	f007 ff8e 	bl	9b1c <String::String(char const*)>
    1c00:	4639      	mov	r1, r7
    1c02:	a809      	add	r0, sp, #36	; 0x24
    1c04:	f007 ff8a 	bl	9b1c <String::String(char const*)>
    1c08:	f240 3206 	movw	r2, #774	; 0x306
    1c0c:	a901      	add	r1, sp, #4
    1c0e:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    1c12:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1c16:	f7fe fa27 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c1a:	a801      	add	r0, sp, #4
    1c1c:	f7fe fa68 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1c20:	497c      	ldr	r1, [pc, #496]	; (1e14 <initialize_opcode_info()+0x1d08>)
    1c22:	a801      	add	r0, sp, #4
    1c24:	f007 ff7a 	bl	9b1c <String::String(char const*)>
    1c28:	4a7b      	ldr	r2, [pc, #492]	; (1e18 <initialize_opcode_info()+0x1d0c>)
    1c2a:	a805      	add	r0, sp, #20
    1c2c:	4611      	mov	r1, r2
    1c2e:	f007 ff75 	bl	9b1c <String::String(char const*)>
    1c32:	4621      	mov	r1, r4
    1c34:	a809      	add	r0, sp, #36	; 0x24
    1c36:	f007 ff71 	bl	9b1c <String::String(char const*)>
    1c3a:	f240 2102 	movw	r1, #514	; 0x202
    1c3e:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
    1c42:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1c46:	a901      	add	r1, sp, #4
    1c48:	f7fe fa0e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c4c:	a801      	add	r0, sp, #4
    1c4e:	f7fe fa4f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1c52:	4641      	mov	r1, r8
    1c54:	a801      	add	r0, sp, #4
    1c56:	f007 ff61 	bl	9b1c <String::String(char const*)>
    1c5a:	4b70      	ldr	r3, [pc, #448]	; (1e1c <initialize_opcode_info()+0x1d10>)
    1c5c:	a805      	add	r0, sp, #20
    1c5e:	4619      	mov	r1, r3
    1c60:	f007 ff5c 	bl	9b1c <String::String(char const*)>
    1c64:	4631      	mov	r1, r6
    1c66:	a809      	add	r0, sp, #36	; 0x24
    1c68:	f007 ff58 	bl	9b1c <String::String(char const*)>
    1c6c:	f240 2e05 	movw	lr, #517	; 0x205
    1c70:	a901      	add	r1, sp, #4
    1c72:	f205 5014 	addw	r0, r5, #1300	; 0x514
    1c76:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1c7a:	f7fe f9f5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c7e:	a801      	add	r0, sp, #4
    1c80:	f7fe fa36 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1c84:	4641      	mov	r1, r8
    1c86:	a801      	add	r0, sp, #4
    1c88:	f007 ff48 	bl	9b1c <String::String(char const*)>
    1c8c:	4964      	ldr	r1, [pc, #400]	; (1e20 <initialize_opcode_info()+0x1d14>)
    1c8e:	a805      	add	r0, sp, #20
    1c90:	f007 ff44 	bl	9b1c <String::String(char const*)>
    1c94:	4631      	mov	r1, r6
    1c96:	a809      	add	r0, sp, #36	; 0x24
    1c98:	f007 ff40 	bl	9b1c <String::String(char const*)>
    1c9c:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1ca0:	a901      	add	r1, sp, #4
    1ca2:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
    1ca6:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1caa:	f7fe f9dd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cae:	a801      	add	r0, sp, #4
    1cb0:	f7fe fa1e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1cb4:	4649      	mov	r1, r9
    1cb6:	a801      	add	r0, sp, #4
    1cb8:	f007 ff30 	bl	9b1c <String::String(char const*)>
    1cbc:	4958      	ldr	r1, [pc, #352]	; (1e20 <initialize_opcode_info()+0x1d14>)
    1cbe:	a805      	add	r0, sp, #20
    1cc0:	f007 ff2c 	bl	9b1c <String::String(char const*)>
    1cc4:	4639      	mov	r1, r7
    1cc6:	a809      	add	r0, sp, #36	; 0x24
    1cc8:	f007 ff28 	bl	9b1c <String::String(char const*)>
    1ccc:	f240 2006 	movw	r0, #518	; 0x206
    1cd0:	a901      	add	r1, sp, #4
    1cd2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1cd6:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    1cda:	f7fe f9c5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cde:	a801      	add	r0, sp, #4
    1ce0:	f7fe fa06 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    1ce4:	494f      	ldr	r1, [pc, #316]	; (1e24 <initialize_opcode_info()+0x1d18>)
    1ce6:	a801      	add	r0, sp, #4
    1ce8:	f007 ff18 	bl	9b1c <String::String(char const*)>
    1cec:	4621      	mov	r1, r4
    1cee:	a805      	add	r0, sp, #20
    1cf0:	f007 ff14 	bl	9b1c <String::String(char const*)>
    1cf4:	494c      	ldr	r1, [pc, #304]	; (1e28 <initialize_opcode_info()+0x1d1c>)
    1cf6:	a809      	add	r0, sp, #36	; 0x24
    1cf8:	f007 ff10 	bl	9b1c <String::String(char const*)>
    1cfc:	f44f 7281 	mov.w	r2, #258	; 0x102
    1d00:	a901      	add	r1, sp, #4
    1d02:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1d06:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1d0a:	f7fe f9ad 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d0e:	a801      	add	r0, sp, #4
    1d10:	f7fe f9ee 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    1d14:	4641      	mov	r1, r8
    1d16:	a801      	add	r0, sp, #4
    1d18:	f007 ff00 	bl	9b1c <String::String(char const*)>
    1d1c:	4943      	ldr	r1, [pc, #268]	; (1e2c <initialize_opcode_info()+0x1d20>)
    1d1e:	a805      	add	r0, sp, #20
    1d20:	f007 fefc 	bl	9b1c <String::String(char const*)>
    1d24:	4631      	mov	r1, r6
    1d26:	a809      	add	r0, sp, #36	; 0x24
    1d28:	f007 fef8 	bl	9b1c <String::String(char const*)>
    1d2c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d30:	a901      	add	r1, sp, #4
    1d32:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
    1d36:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d3a:	f7fe f995 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d3e:	a801      	add	r0, sp, #4
    1d40:	f7fe f9d6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    1d44:	4641      	mov	r1, r8
    1d46:	f10d 0804 	add.w	r8, sp, #4
    1d4a:	4640      	mov	r0, r8
    1d4c:	f10d 0814 	add.w	r8, sp, #20
    1d50:	f007 fee4 	bl	9b1c <String::String(char const*)>
    1d54:	4936      	ldr	r1, [pc, #216]	; (1e30 <initialize_opcode_info()+0x1d24>)
    1d56:	4640      	mov	r0, r8
    1d58:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d5c:	f007 fede 	bl	9b1c <String::String(char const*)>
    1d60:	4631      	mov	r1, r6
    1d62:	4640      	mov	r0, r8
    1d64:	f10d 0804 	add.w	r8, sp, #4
    1d68:	f007 fed8 	bl	9b1c <String::String(char const*)>
    1d6c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d70:	4641      	mov	r1, r8
    1d72:	f205 7084 	addw	r0, r5, #1924	; 0x784
    1d76:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d7a:	f7fe f975 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d7e:	4640      	mov	r0, r8
    1d80:	f7fe f9b6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    1d84:	4640      	mov	r0, r8
    1d86:	f10d 0814 	add.w	r8, sp, #20
    1d8a:	4649      	mov	r1, r9
    1d8c:	f007 fec6 	bl	9b1c <String::String(char const*)>
    1d90:	4927      	ldr	r1, [pc, #156]	; (1e30 <initialize_opcode_info()+0x1d24>)
    1d92:	4640      	mov	r0, r8
    1d94:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d98:	f007 fec0 	bl	9b1c <String::String(char const*)>
    1d9c:	f240 3907 	movw	r9, #775	; 0x307
    1da0:	4640      	mov	r0, r8
    1da2:	f10d 0804 	add.w	r8, sp, #4
    1da6:	4639      	mov	r1, r7
    1da8:	f007 feb8 	bl	9b1c <String::String(char const*)>
    1dac:	4641      	mov	r1, r8
    1dae:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1db2:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1db6:	f7fe f957 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dba:	4640      	mov	r0, r8
    1dbc:	f7fe f998 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1dc0:	4640      	mov	r0, r8
    1dc2:	f10d 0814 	add.w	r8, sp, #20
    1dc6:	491b      	ldr	r1, [pc, #108]	; (1e34 <initialize_opcode_info()+0x1d28>)
    1dc8:	f007 fea8 	bl	9b1c <String::String(char const*)>
    1dcc:	490f      	ldr	r1, [pc, #60]	; (1e0c <initialize_opcode_info()+0x1d00>)
    1dce:	4640      	mov	r0, r8
    1dd0:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1dd4:	f007 fea2 	bl	9b1c <String::String(char const*)>
    1dd8:	4631      	mov	r1, r6
    1dda:	4640      	mov	r0, r8
    1ddc:	f10d 0804 	add.w	r8, sp, #4
    1de0:	f007 fe9c 	bl	9b1c <String::String(char const*)>
    1de4:	f240 2102 	movw	r1, #514	; 0x202
    1de8:	f505 6002 	add.w	r0, r5, #2080	; 0x820
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1dec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e3c <initialize_opcode_info()+0x1d30>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1df0:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1df4:	4641      	mov	r1, r8
    1df6:	f7fe f937 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dfa:	4640      	mov	r0, r8
    1dfc:	f7fe f978 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1e00:	ab01      	add	r3, sp, #4
    1e02:	e01d      	b.n	1e40 <initialize_opcode_info()+0x1d34>
    1e04:	20000894 	.word	0x20000894
    1e08:	200009a8 	.word	0x200009a8
    1e0c:	200008a4 	.word	0x200008a4
    1e10:	200009ac 	.word	0x200009ac
    1e14:	200009b0 	.word	0x200009b0
    1e18:	200008b4 	.word	0x200008b4
    1e1c:	200008b8 	.word	0x200008b8
    1e20:	200008c0 	.word	0x200008c0
    1e24:	200009b4 	.word	0x200009b4
    1e28:	200009b8 	.word	0x200009b8
    1e2c:	200008d0 	.word	0x200008d0
    1e30:	200008d8 	.word	0x200008d8
    1e34:	200009bc 	.word	0x200009bc
    1e38:	200008ac 	.word	0x200008ac
    1e3c:	200009c0 	.word	0x200009c0
    1e40:	4649      	mov	r1, r9
    1e42:	f8df 8370 	ldr.w	r8, [pc, #880]	; 21b4 <initialize_opcode_info()+0x20a8>
    1e46:	4618      	mov	r0, r3
    1e48:	f007 fe68 	bl	9b1c <String::String(char const*)>
    1e4c:	ab05      	add	r3, sp, #20
    1e4e:	49cb      	ldr	r1, [pc, #812]	; (217c <initialize_opcode_info()+0x2070>)
    1e50:	4618      	mov	r0, r3
    1e52:	f007 fe63 	bl	9b1c <String::String(char const*)>
    1e56:	ab09      	add	r3, sp, #36	; 0x24
    1e58:	4641      	mov	r1, r8
    1e5a:	4618      	mov	r0, r3
    1e5c:	f007 fe5e 	bl	9b1c <String::String(char const*)>
    1e60:	f240 2006 	movw	r0, #518	; 0x206
    1e64:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1e68:	a801      	add	r0, sp, #4
    1e6a:	4601      	mov	r1, r0
    1e6c:	f605 0054 	addw	r0, r5, #2132	; 0x854
    1e70:	f7fe f8fa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e74:	a801      	add	r0, sp, #4
    1e76:	f7fe f93b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    1e7a:	49c1      	ldr	r1, [pc, #772]	; (2180 <initialize_opcode_info()+0x2074>)
    1e7c:	a801      	add	r0, sp, #4
    1e7e:	f007 fe4d 	bl	9b1c <String::String(char const*)>
    1e82:	49c0      	ldr	r1, [pc, #768]	; (2184 <initialize_opcode_info()+0x2078>)
    1e84:	a805      	add	r0, sp, #20
    1e86:	f007 fe49 	bl	9b1c <String::String(char const*)>
    1e8a:	4631      	mov	r1, r6
    1e8c:	a809      	add	r0, sp, #36	; 0x24
    1e8e:	f007 fe45 	bl	9b1c <String::String(char const*)>
    1e92:	a801      	add	r0, sp, #4
    1e94:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1e98:	4601      	mov	r1, r0
    1e9a:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
    1e9e:	f7fe f8e3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ea2:	a801      	add	r0, sp, #4
    1ea4:	f7fe f924 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1ea8:	4649      	mov	r1, r9
    1eaa:	a801      	add	r0, sp, #4
    1eac:	f007 fe36 	bl	9b1c <String::String(char const*)>
    1eb0:	49b4      	ldr	r1, [pc, #720]	; (2184 <initialize_opcode_info()+0x2078>)
    1eb2:	a805      	add	r0, sp, #20
    1eb4:	f007 fe32 	bl	9b1c <String::String(char const*)>
    1eb8:	4641      	mov	r1, r8
    1eba:	a809      	add	r0, sp, #36	; 0x24
    1ebc:	f007 fe2e 	bl	9b1c <String::String(char const*)>
    1ec0:	a801      	add	r0, sp, #4
    1ec2:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1ec6:	4601      	mov	r1, r0
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1ec8:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 21b8 <initialize_opcode_info()+0x20ac>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1ecc:	f605 1024 	addw	r0, r5, #2340	; 0x924
    1ed0:	f7fe f8ca 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ed4:	a801      	add	r0, sp, #4
    1ed6:	f7fe f90b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1eda:	4659      	mov	r1, fp
    1edc:	a801      	add	r0, sp, #4
    1ede:	f007 fe1d 	bl	9b1c <String::String(char const*)>
    1ee2:	49a8      	ldr	r1, [pc, #672]	; (2184 <initialize_opcode_info()+0x2078>)
    1ee4:	a805      	add	r0, sp, #20
    1ee6:	f007 fe19 	bl	9b1c <String::String(char const*)>
    1eea:	4639      	mov	r1, r7
    1eec:	a809      	add	r0, sp, #36	; 0x24
    1eee:	f007 fe15 	bl	9b1c <String::String(char const*)>
    1ef2:	a801      	add	r0, sp, #4
    1ef4:	f240 2e05 	movw	lr, #517	; 0x205
    1ef8:	4601      	mov	r1, r0
    1efa:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1efe:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1f02:	f7fe f8b1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f06:	a801      	add	r0, sp, #4
    1f08:	f7fe f8f2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    1f0c:	499e      	ldr	r1, [pc, #632]	; (2188 <initialize_opcode_info()+0x207c>)
    1f0e:	a801      	add	r0, sp, #4
    1f10:	f007 fe04 	bl	9b1c <String::String(char const*)>
    1f14:	4621      	mov	r1, r4
    1f16:	a805      	add	r0, sp, #20
    1f18:	f007 fe00 	bl	9b1c <String::String(char const*)>
    1f1c:	4639      	mov	r1, r7
    1f1e:	a809      	add	r0, sp, #36	; 0x24
    1f20:	f007 fdfc 	bl	9b1c <String::String(char const*)>
    1f24:	a801      	add	r0, sp, #4
    1f26:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f2a:	4601      	mov	r1, r0
    1f2c:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1f30:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f34:	f7fe f898 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f38:	a801      	add	r0, sp, #4
    1f3a:	f7fe f8d9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    1f3e:	4649      	mov	r1, r9
    1f40:	a801      	add	r0, sp, #4
    1f42:	f007 fdeb 	bl	9b1c <String::String(char const*)>
    1f46:	4991      	ldr	r1, [pc, #580]	; (218c <initialize_opcode_info()+0x2080>)
    1f48:	a805      	add	r0, sp, #20
    1f4a:	f007 fde7 	bl	9b1c <String::String(char const*)>
    1f4e:	4641      	mov	r1, r8
    1f50:	a809      	add	r0, sp, #36	; 0x24
    1f52:	f007 fde3 	bl	9b1c <String::String(char const*)>
    1f56:	f240 2102 	movw	r1, #514	; 0x202
    1f5a:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
    1f5e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1f62:	a901      	add	r1, sp, #4
    1f64:	f7fe f880 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f68:	a801      	add	r0, sp, #4
    1f6a:	f7fe f8c1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    1f6e:	4988      	ldr	r1, [pc, #544]	; (2190 <initialize_opcode_info()+0x2084>)
    1f70:	a801      	add	r0, sp, #4
    1f72:	f007 fdd3 	bl	9b1c <String::String(char const*)>
    1f76:	4621      	mov	r1, r4
    1f78:	a805      	add	r0, sp, #20
    1f7a:	f007 fdcf 	bl	9b1c <String::String(char const*)>
    1f7e:	4621      	mov	r1, r4
    1f80:	a809      	add	r0, sp, #36	; 0x24
    1f82:	f007 fdcb 	bl	9b1c <String::String(char const*)>
    1f86:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f8a:	a901      	add	r1, sp, #4
    1f8c:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1f90:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f94:	f7fe f868 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f98:	a801      	add	r0, sp, #4
    1f9a:	f7fe f8a9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    1f9e:	4978      	ldr	r1, [pc, #480]	; (2180 <initialize_opcode_info()+0x2074>)
    1fa0:	a801      	add	r0, sp, #4
    1fa2:	f007 fdbb 	bl	9b1c <String::String(char const*)>
    1fa6:	4651      	mov	r1, sl
    1fa8:	a805      	add	r0, sp, #20
    1faa:	f007 fdb7 	bl	9b1c <String::String(char const*)>
    1fae:	4631      	mov	r1, r6
    1fb0:	a809      	add	r0, sp, #36	; 0x24
    1fb2:	f44f 7641 	mov.w	r6, #772	; 0x304
    1fb6:	f007 fdb1 	bl	9b1c <String::String(char const*)>
    1fba:	a901      	add	r1, sp, #4
    1fbc:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    1fc0:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1fc4:	f7fe f850 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fc8:	a801      	add	r0, sp, #4
    1fca:	f7fe f891 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    1fce:	4649      	mov	r1, r9
    1fd0:	a801      	add	r0, sp, #4
    1fd2:	f007 fda3 	bl	9b1c <String::String(char const*)>
    1fd6:	4651      	mov	r1, sl
    1fd8:	a805      	add	r0, sp, #20
    1fda:	f007 fd9f 	bl	9b1c <String::String(char const*)>
    1fde:	4641      	mov	r1, r8
    1fe0:	a809      	add	r0, sp, #36	; 0x24
    1fe2:	f007 fd9b 	bl	9b1c <String::String(char const*)>
    1fe6:	a901      	add	r1, sp, #4
    1fe8:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
    1fec:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1ff0:	f7fe f83a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ff4:	a801      	add	r0, sp, #4
    1ff6:	f7fe f87b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    1ffa:	4659      	mov	r1, fp
    1ffc:	a801      	add	r0, sp, #4
    1ffe:	f007 fd8d 	bl	9b1c <String::String(char const*)>
    2002:	4651      	mov	r1, sl
    2004:	a805      	add	r0, sp, #20
    2006:	f007 fd89 	bl	9b1c <String::String(char const*)>
    200a:	4639      	mov	r1, r7
    200c:	a809      	add	r0, sp, #36	; 0x24
    200e:	f007 fd85 	bl	9b1c <String::String(char const*)>
    2012:	f240 3206 	movw	r2, #774	; 0x306
    2016:	a901      	add	r1, sp, #4
    2018:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
    201c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2020:	f7fe f822 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2024:	a801      	add	r0, sp, #4
    2026:	f7fe f863 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    202a:	495a      	ldr	r1, [pc, #360]	; (2194 <initialize_opcode_info()+0x2088>)
    202c:	a801      	add	r0, sp, #4
    202e:	f007 fd75 	bl	9b1c <String::String(char const*)>
    2032:	4a59      	ldr	r2, [pc, #356]	; (2198 <initialize_opcode_info()+0x208c>)
    2034:	a805      	add	r0, sp, #20
    2036:	4611      	mov	r1, r2
    2038:	f007 fd70 	bl	9b1c <String::String(char const*)>
    203c:	4621      	mov	r1, r4
    203e:	a809      	add	r0, sp, #36	; 0x24
    2040:	f007 fd6c 	bl	9b1c <String::String(char const*)>
    2044:	f240 2202 	movw	r2, #514	; 0x202
    2048:	a901      	add	r1, sp, #4
    204a:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
    204e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2052:	f7fe f809 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2056:	a801      	add	r0, sp, #4
    2058:	f7fe f84a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    205c:	4649      	mov	r1, r9
    205e:	a801      	add	r0, sp, #4
    2060:	f007 fd5c 	bl	9b1c <String::String(char const*)>
    2064:	4b4d      	ldr	r3, [pc, #308]	; (219c <initialize_opcode_info()+0x2090>)
    2066:	a805      	add	r0, sp, #20
    2068:	4619      	mov	r1, r3
    206a:	f007 fd57 	bl	9b1c <String::String(char const*)>
    206e:	4641      	mov	r1, r8
    2070:	a809      	add	r0, sp, #36	; 0x24
    2072:	f007 fd53 	bl	9b1c <String::String(char const*)>
    2076:	f240 2e05 	movw	lr, #517	; 0x205
    207a:	a901      	add	r1, sp, #4
    207c:	f605 3094 	addw	r0, r5, #2964	; 0xb94
    2080:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    2084:	f7fd fff0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2088:	a801      	add	r0, sp, #4
    208a:	f7fe f831 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    208e:	4649      	mov	r1, r9
    2090:	a801      	add	r0, sp, #4
    2092:	f007 fd43 	bl	9b1c <String::String(char const*)>
    2096:	4942      	ldr	r1, [pc, #264]	; (21a0 <initialize_opcode_info()+0x2094>)
    2098:	a805      	add	r0, sp, #20
    209a:	f007 fd3f 	bl	9b1c <String::String(char const*)>
    209e:	4641      	mov	r1, r8
    20a0:	a809      	add	r0, sp, #36	; 0x24
    20a2:	f007 fd3b 	bl	9b1c <String::String(char const*)>
    20a6:	f44f 7c01 	mov.w	ip, #516	; 0x204
    20aa:	a901      	add	r1, sp, #4
    20ac:	f605 4064 	addw	r0, r5, #3172	; 0xc64
    20b0:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    20b4:	f7fd ffd8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20b8:	a801      	add	r0, sp, #4
    20ba:	f7fe f819 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    20be:	4659      	mov	r1, fp
    20c0:	a801      	add	r0, sp, #4
    20c2:	f007 fd2b 	bl	9b1c <String::String(char const*)>
    20c6:	4936      	ldr	r1, [pc, #216]	; (21a0 <initialize_opcode_info()+0x2094>)
    20c8:	a805      	add	r0, sp, #20
    20ca:	f007 fd27 	bl	9b1c <String::String(char const*)>
    20ce:	4639      	mov	r1, r7
    20d0:	a809      	add	r0, sp, #36	; 0x24
    20d2:	f007 fd23 	bl	9b1c <String::String(char const*)>
    20d6:	f240 2306 	movw	r3, #518	; 0x206
    20da:	a901      	add	r1, sp, #4
    20dc:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    20e0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20e4:	f7fd ffc0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20e8:	a801      	add	r0, sp, #4
    20ea:	f7fe f801 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    20ee:	492d      	ldr	r1, [pc, #180]	; (21a4 <initialize_opcode_info()+0x2098>)
    20f0:	a801      	add	r0, sp, #4
    20f2:	f007 fd13 	bl	9b1c <String::String(char const*)>
    20f6:	4621      	mov	r1, r4
    20f8:	a805      	add	r0, sp, #20
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    20fa:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0xf8] = {"SED","","D",2,1};
    20fe:	f007 fd0d 	bl	9b1c <String::String(char const*)>
    2102:	4929      	ldr	r1, [pc, #164]	; (21a8 <initialize_opcode_info()+0x209c>)
    2104:	a809      	add	r0, sp, #36	; 0x24
    2106:	f007 fd09 	bl	9b1c <String::String(char const*)>
    210a:	f44f 7381 	mov.w	r3, #258	; 0x102
    210e:	a901      	add	r1, sp, #4
    2110:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    2114:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2118:	f7fd ffa6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    211c:	a801      	add	r0, sp, #4
    211e:	f7fd ffe7 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    2122:	4649      	mov	r1, r9
    2124:	a801      	add	r0, sp, #4
    2126:	f007 fcf9 	bl	9b1c <String::String(char const*)>
    212a:	4920      	ldr	r1, [pc, #128]	; (21ac <initialize_opcode_info()+0x20a0>)
    212c:	a805      	add	r0, sp, #20
    212e:	f007 fcf5 	bl	9b1c <String::String(char const*)>
    2132:	4641      	mov	r1, r8
    2134:	a809      	add	r0, sp, #36	; 0x24
    2136:	f007 fcf1 	bl	9b1c <String::String(char const*)>
    213a:	a901      	add	r1, sp, #4
    213c:	f605 5034 	addw	r0, r5, #3380	; 0xd34
    2140:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2144:	f7fd ff90 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2148:	a801      	add	r0, sp, #4
    214a:	f7fd ffd1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    214e:	4649      	mov	r1, r9
    2150:	a801      	add	r0, sp, #4
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    2152:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2156:	f007 fce1 	bl	9b1c <String::String(char const*)>
    215a:	4915      	ldr	r1, [pc, #84]	; (21b0 <initialize_opcode_info()+0x20a4>)
    215c:	a805      	add	r0, sp, #20
    215e:	f007 fcdd 	bl	9b1c <String::String(char const*)>
    2162:	4641      	mov	r1, r8
    2164:	a809      	add	r0, sp, #36	; 0x24
    2166:	f007 fcd9 	bl	9b1c <String::String(char const*)>
    216a:	a901      	add	r1, sp, #4
    216c:	f605 6004 	addw	r0, r5, #3588	; 0xe04
    2170:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2174:	f7fd ff78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2178:	a801      	add	r0, sp, #4
    217a:	e01f      	b.n	21bc <initialize_opcode_info()+0x20b0>
    217c:	20000888 	.word	0x20000888
    2180:	200009bc 	.word	0x200009bc
    2184:	20000894 	.word	0x20000894
    2188:	200009c8 	.word	0x200009c8
    218c:	200008a4 	.word	0x200008a4
    2190:	200009cc 	.word	0x200009cc
    2194:	200009d0 	.word	0x200009d0
    2198:	200008b4 	.word	0x200008b4
    219c:	200008b8 	.word	0x200008b8
    21a0:	200008c0 	.word	0x200008c0
    21a4:	200009d4 	.word	0x200009d4
    21a8:	200009b8 	.word	0x200009b8
    21ac:	200008d0 	.word	0x200008d0
    21b0:	200008d8 	.word	0x200008d8
    21b4:	20000930 	.word	0x20000930
    21b8:	200009c4 	.word	0x200009c4
    21bc:	f7fd ff98 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    21c0:	4659      	mov	r1, fp
    21c2:	a801      	add	r0, sp, #4
    21c4:	f007 fcaa 	bl	9b1c <String::String(char const*)>
    21c8:	490a      	ldr	r1, [pc, #40]	; (21f4 <initialize_opcode_info()+0x20e8>)
    21ca:	a805      	add	r0, sp, #20
    21cc:	f007 fca6 	bl	9b1c <String::String(char const*)>
    21d0:	4639      	mov	r1, r7
    21d2:	a809      	add	r0, sp, #36	; 0x24
    21d4:	f007 fca2 	bl	9b1c <String::String(char const*)>
    21d8:	a901      	add	r1, sp, #4
    21da:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    21de:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    21e2:	f7fd ff41 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21e6:	a801      	add	r0, sp, #4
    21e8:	f7fd ff82 	bl	f0 <OpDecoder::~OpDecoder()>
    21ec:	b00f      	add	sp, #60	; 0x3c
    21ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21f2:	bf00      	nop
    21f4:	200008d8 	.word	0x200008d8

000021f8 <check_for_CLK_activity()>:
    21f8:	4a0e      	ldr	r2, [pc, #56]	; (2234 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    21fa:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    21fe:	6811      	ldr	r1, [r2, #0]
    2200:	e004      	b.n	220c <check_for_CLK_activity()+0x14>
    2202:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    2204:	1a5b      	subs	r3, r3, r1
    2206:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    220a:	d812      	bhi.n	2232 <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    220c:	f8dc 0000 	ldr.w	r0, [ip]
    2210:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    2214:	d0f5      	beq.n	2202 <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    2216:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    221a:	e004      	b.n	2226 <check_for_CLK_activity()+0x2e>
    221c:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    221e:	1a5b      	subs	r3, r3, r1
    2220:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2224:	d804      	bhi.n	2230 <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    2226:	6803      	ldr	r3, [r0, #0]
    2228:	04db      	lsls	r3, r3, #19
    222a:	d4f7      	bmi.n	221c <check_for_CLK_activity()+0x24>
    return(true);
    222c:	2001      	movs	r0, #1
    222e:	4770      	bx	lr
            return(false);
    2230:	2000      	movs	r0, #0
}
    2232:	4770      	bx	lr
    2234:	2001886c 	.word	0x2001886c

00002238 <setup>:
void setup() {
    2238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    223c:	2100      	movs	r1, #0
void setup() {
    223e:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    2240:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    2242:	4d94      	ldr	r5, [pc, #592]	; (2494 <setup+0x25c>)
    2244:	f007 fe72 	bl	9f2c <pinMode>
    pinMode(PIN_RESET, INPUT);
    2248:	2100      	movs	r1, #0
    224a:	2028      	movs	r0, #40	; 0x28
    224c:	4c92      	ldr	r4, [pc, #584]	; (2498 <setup+0x260>)
    224e:	f007 fe6d 	bl	9f2c <pinMode>
    pinMode(PIN_READY_n, INPUT);
    2252:	2100      	movs	r1, #0
    2254:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2256:	4f91      	ldr	r7, [pc, #580]	; (249c <setup+0x264>)
    2258:	f007 fe68 	bl	9f2c <pinMode>
    pinMode(PIN_IRQ, INPUT);
    225c:	2100      	movs	r1, #0
    225e:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2260:	f8df 928c 	ldr.w	r9, [pc, #652]	; 24f0 <setup+0x2b8>
    2264:	f007 fe62 	bl	9f2c <pinMode>
    pinMode(PIN_NMI, INPUT);
    2268:	2100      	movs	r1, #0
    226a:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    226c:	f240 28ee 	movw	r8, #750	; 0x2ee
    2270:	f007 fe5c 	bl	9f2c <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2274:	2101      	movs	r1, #1
    2276:	200c      	movs	r0, #12
    2278:	f007 fe58 	bl	9f2c <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    227c:	2101      	movs	r1, #1
    227e:	2027      	movs	r0, #39	; 0x27
    2280:	f007 fe54 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2284:	2101      	movs	r1, #1
    2286:	201b      	movs	r0, #27
    2288:	f007 fe50 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    228c:	2101      	movs	r1, #1
    228e:	2026      	movs	r0, #38	; 0x26
    2290:	f007 fe4c 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2294:	2101      	movs	r1, #1
    2296:	201c      	movs	r0, #28
    2298:	f007 fe48 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    229c:	2101      	movs	r1, #1
    229e:	2025      	movs	r0, #37	; 0x25
    22a0:	f007 fe44 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    22a4:	2101      	movs	r1, #1
    22a6:	201d      	movs	r0, #29
    22a8:	f007 fe40 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    22ac:	2101      	movs	r1, #1
    22ae:	2024      	movs	r0, #36	; 0x24
    22b0:	f007 fe3c 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    22b4:	2101      	movs	r1, #1
    22b6:	201e      	movs	r0, #30
    22b8:	f007 fe38 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    22bc:	2101      	movs	r1, #1
    22be:	2023      	movs	r0, #35	; 0x23
    22c0:	f007 fe34 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    22c4:	2101      	movs	r1, #1
    22c6:	201f      	movs	r0, #31
    22c8:	f007 fe30 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    22cc:	2101      	movs	r1, #1
    22ce:	2022      	movs	r0, #34	; 0x22
    22d0:	f007 fe2c 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    22d4:	2101      	movs	r1, #1
    22d6:	2020      	movs	r0, #32
    22d8:	f007 fe28 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    22dc:	2101      	movs	r1, #1
    22de:	2021      	movs	r0, #33	; 0x21
    22e0:	f007 fe24 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    22e4:	2101      	movs	r1, #1
    22e6:	4608      	mov	r0, r1
    22e8:	f007 fe20 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    22ec:	2101      	movs	r1, #1
    22ee:	2000      	movs	r0, #0
    22f0:	f007 fe1c 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    22f4:	2101      	movs	r1, #1
    22f6:	2002      	movs	r0, #2
    22f8:	f007 fe18 	bl	9f2c <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    22fc:	2101      	movs	r1, #1
    22fe:	2017      	movs	r0, #23
    2300:	f007 fe14 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    2304:	2100      	movs	r1, #0
    2306:	200e      	movs	r0, #14
    2308:	f007 fe10 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    230c:	2100      	movs	r1, #0
    230e:	200f      	movs	r0, #15
    2310:	f007 fe0c 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    2314:	2100      	movs	r1, #0
    2316:	2010      	movs	r0, #16
    2318:	f007 fe08 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    231c:	2100      	movs	r1, #0
    231e:	2011      	movs	r0, #17
    2320:	f007 fe04 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    2324:	2100      	movs	r1, #0
    2326:	2012      	movs	r0, #18
    2328:	f007 fe00 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    232c:	2100      	movs	r1, #0
    232e:	2013      	movs	r0, #19
    2330:	f007 fdfc 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    2334:	2100      	movs	r1, #0
    2336:	2014      	movs	r0, #20
    2338:	f007 fdf8 	bl	9f2c <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    233c:	2100      	movs	r1, #0
    233e:	2015      	movs	r0, #21
    2340:	f007 fdf4 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2344:	2101      	movs	r1, #1
    2346:	200b      	movs	r0, #11
    2348:	f007 fdf0 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    234c:	2101      	movs	r1, #1
    234e:	200a      	movs	r0, #10
    2350:	f007 fdec 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2354:	2101      	movs	r1, #1
    2356:	2009      	movs	r0, #9
    2358:	f007 fde8 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    235c:	2101      	movs	r1, #1
    235e:	2008      	movs	r0, #8
    2360:	f007 fde4 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2364:	2101      	movs	r1, #1
    2366:	2007      	movs	r0, #7
    2368:	f007 fde0 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    236c:	2101      	movs	r1, #1
    236e:	2006      	movs	r0, #6
    2370:	f007 fddc 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2374:	2101      	movs	r1, #1
    2376:	2005      	movs	r0, #5
    2378:	f007 fdd8 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    237c:	2101      	movs	r1, #1
    237e:	2004      	movs	r0, #4
    2380:	f007 fdd4 	bl	9f2c <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2384:	2101      	movs	r1, #1
    2386:	2003      	movs	r0, #3
    2388:	f007 fdd0 	bl	9f2c <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2390:	4943      	ldr	r1, [pc, #268]	; (24a0 <setup+0x268>)
    2392:	4844      	ldr	r0, [pc, #272]	; (24a4 <setup+0x26c>)
    2394:	f007 fe0a 	bl	9fac <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2398:	f44f 6200 	mov.w	r2, #2048	; 0x800
    239c:	4942      	ldr	r1, [pc, #264]	; (24a8 <setup+0x270>)
    239e:	4843      	ldr	r0, [pc, #268]	; (24ac <setup+0x274>)
    23a0:	f007 fe04 	bl	9fac <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    23a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23a8:	4941      	ldr	r1, [pc, #260]	; (24b0 <setup+0x278>)
    23aa:	4842      	ldr	r0, [pc, #264]	; (24b4 <setup+0x27c>)
    23ac:	f007 fdfe 	bl	9fac <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    23b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23b4:	4940      	ldr	r1, [pc, #256]	; (24b8 <setup+0x280>)
    23b6:	4841      	ldr	r0, [pc, #260]	; (24bc <setup+0x284>)
    23b8:	f007 fdf8 	bl	9fac <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    23bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23c0:	493f      	ldr	r1, [pc, #252]	; (24c0 <setup+0x288>)
    23c2:	4840      	ldr	r0, [pc, #256]	; (24c4 <setup+0x28c>)
    23c4:	f007 fdf2 	bl	9fac <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    23c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23cc:	493e      	ldr	r1, [pc, #248]	; (24c8 <setup+0x290>)
    23ce:	483f      	ldr	r0, [pc, #252]	; (24cc <setup+0x294>)
    23d0:	f007 fdec 	bl	9fac <memcpy>
		uint32_t millis_begin = systick_millis_count;
    23d4:	682e      	ldr	r6, [r5, #0]
		yield();
    23d6:	f009 f827 	bl	b428 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23da:	7823      	ldrb	r3, [r4, #0]
    23dc:	2b00      	cmp	r3, #0
    23de:	d03e      	beq.n	245e <setup+0x226>
    23e0:	783b      	ldrb	r3, [r7, #0]
    23e2:	07db      	lsls	r3, r3, #31
    23e4:	d53b      	bpl.n	245e <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23e6:	682b      	ldr	r3, [r5, #0]
    23e8:	f8d9 2000 	ldr.w	r2, [r9]
    23ec:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23ee:	2b0e      	cmp	r3, #14
    23f0:	d935      	bls.n	245e <setup+0x226>
    Serial.setTimeout(5000);
    23f2:	f241 3188 	movw	r1, #5000	; 0x1388
    23f6:	4836      	ldr	r0, [pc, #216]	; (24d0 <setup+0x298>)
    23f8:	f007 fb34 	bl	9a64 <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    23fc:	4935      	ldr	r1, [pc, #212]	; (24d4 <setup+0x29c>)
    23fe:	4668      	mov	r0, sp
    2400:	f007 fb8c 	bl	9b1c <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2404:	4669      	mov	r1, sp
    2406:	a804      	add	r0, sp, #16
    2408:	f007 fb2e 	bl	9a68 <String::String(String const&)>
    240c:	4932      	ldr	r1, [pc, #200]	; (24d8 <setup+0x2a0>)
    240e:	a804      	add	r0, sp, #16
    2410:	f007 fc20 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    2414:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    2416:	482e      	ldr	r0, [pc, #184]	; (24d0 <setup+0x298>)
    2418:	f007 fade 	bl	99d8 <Print::print(String const&)>
    241c:	482c      	ldr	r0, [pc, #176]	; (24d0 <setup+0x298>)
    241e:	f007 fb01 	bl	9a24 <Print::println()>
class StringSumHelper : public String
    2422:	a804      	add	r0, sp, #16
    2424:	f007 fb3e 	bl	9aa4 <String::~String()>
    2428:	4668      	mov	r0, sp
    242a:	f007 fb3b 	bl	9aa4 <String::~String()>
    if ( !check_for_CLK_activity() ) {
    242e:	f7ff fee3 	bl	21f8 <check_for_CLK_activity()>
    2432:	bb08      	cbnz	r0, 2478 <setup+0x240>
        debug_mode = true;
    2434:	4829      	ldr	r0, [pc, #164]	; (24dc <setup+0x2a4>)
    2436:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    2438:	4b29      	ldr	r3, [pc, #164]	; (24e0 <setup+0x2a8>)
    243a:	2203      	movs	r2, #3
        debug_mode = true;
    243c:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    243e:	2146      	movs	r1, #70	; 0x46
    2440:	4828      	ldr	r0, [pc, #160]	; (24e4 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    2442:	701a      	strb	r2, [r3, #0]
    2444:	f008 ff72 	bl	b32c <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2448:	4821      	ldr	r0, [pc, #132]	; (24d0 <setup+0x298>)
    244a:	f007 faeb 	bl	9a24 <Print::println()>
    run_mode = WAITING;
    244e:	4b26      	ldr	r3, [pc, #152]	; (24e8 <setup+0x2b0>)
    2450:	2200      	movs	r2, #0
    2452:	701a      	strb	r2, [r3, #0]
}
    2454:	b009      	add	sp, #36	; 0x24
    2456:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    245a:	f7fd be57 	b.w	10c <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    245e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    2460:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    2462:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2464:	b12a      	cbz	r2, 2472 <setup+0x23a>
				if (elapsed > 2000) break;
    2466:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    246a:	d8c2      	bhi.n	23f2 <setup+0x1ba>
			yield();
    246c:	f008 ffdc 	bl	b428 <yield>
    2470:	e7b1      	b.n	23d6 <setup+0x19e>
				if (elapsed > 750) break;
    2472:	4543      	cmp	r3, r8
    2474:	d9fa      	bls.n	246c <setup+0x234>
    2476:	e7bc      	b.n	23f2 <setup+0x1ba>
        debug_mode = false;
    2478:	2300      	movs	r3, #0
        addr_mode = All_External;
    247a:	4a19      	ldr	r2, [pc, #100]	; (24e0 <setup+0x2a8>)
        debug_mode = false;
    247c:	4c17      	ldr	r4, [pc, #92]	; (24dc <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    247e:	2146      	movs	r1, #70	; 0x46
    2480:	481a      	ldr	r0, [pc, #104]	; (24ec <setup+0x2b4>)
    2482:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2484:	7013      	strb	r3, [r2, #0]
    2486:	f008 ff51 	bl	b32c <usb_serial_write>
    248a:	4811      	ldr	r0, [pc, #68]	; (24d0 <setup+0x298>)
    248c:	f007 faca 	bl	9a24 <Print::println()>
    2490:	e7dd      	b.n	244e <setup+0x216>
    2492:	bf00      	nop
    2494:	2001886c 	.word	0x2001886c
    2498:	200188af 	.word	0x200188af
    249c:	200188ae 	.word	0x200188ae
    24a0:	20001338 	.word	0x20001338
    24a4:	200123f0 	.word	0x200123f0
    24a8:	20001b38 	.word	0x20001b38
    24ac:	20012bf0 	.word	0x20012bf0
    24b0:	20002338 	.word	0x20002338
    24b4:	200133f0 	.word	0x200133f0
    24b8:	20002b38 	.word	0x20002b38
    24bc:	20013bf0 	.word	0x20013bf0
    24c0:	20003338 	.word	0x20003338
    24c4:	200143f0 	.word	0x200143f0
    24c8:	20003b38 	.word	0x20003b38
    24cc:	20014bf0 	.word	0x20014bf0
    24d0:	20004340 	.word	0x20004340
    24d4:	20001068 	.word	0x20001068
    24d8:	20001090 	.word	0x20001090
    24dc:	2000494e 	.word	0x2000494e
    24e0:	20018898 	.word	0x20018898
    24e4:	20001098 	.word	0x20001098
    24e8:	200188a6 	.word	0x200188a6
    24ec:	200010e0 	.word	0x200010e0
    24f0:	2001887c 	.word	0x2001887c

000024f4 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    24f4:	4b21      	ldr	r3, [pc, #132]	; (257c <sample_at_CLK_rising_edge()+0x88>)
    24f6:	781b      	ldrb	r3, [r3, #0]
    24f8:	b103      	cbz	r3, 24fc <sample_at_CLK_rising_edge()+0x8>
    24fa:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    24fc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    2500:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2502:	6813      	ldr	r3, [r2, #0]
    2504:	04db      	lsls	r3, r3, #19
    2506:	d4fc      	bmi.n	2502 <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    2508:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    250c:	6813      	ldr	r3, [r2, #0]
    250e:	04d8      	lsls	r0, r3, #19
    2510:	d5fc      	bpl.n	250c <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    2512:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2516:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2518:	04d9      	lsls	r1, r3, #19
    251a:	d5fc      	bpl.n	2516 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    251c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2520:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2522:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2524:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2528:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    252c:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    252e:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2532:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2536:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    253a:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    253e:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2542:	0cd8      	lsrs	r0, r3, #19
    2544:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2548:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    254a:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    254e:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2552:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2554:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2558:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    255c:	4302      	orrs	r2, r0
    255e:	4808      	ldr	r0, [pc, #32]	; (2580 <sample_at_CLK_rising_edge()+0x8c>)
    2560:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2562:	4a08      	ldr	r2, [pc, #32]	; (2584 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2564:	4808      	ldr	r0, [pc, #32]	; (2588 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2566:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    256a:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    256c:	4a07      	ldr	r2, [pc, #28]	; (258c <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    256e:	4b08      	ldr	r3, [pc, #32]	; (2590 <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2570:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2574:	7019      	strb	r1, [r3, #0]
}
    2576:	f85d fb04 	ldr.w	pc, [sp], #4
    257a:	bf00      	nop
    257c:	2000494e 	.word	0x2000494e
    2580:	2001889a 	.word	0x2001889a
    2584:	2001889b 	.word	0x2001889b
    2588:	2001889d 	.word	0x2001889d
    258c:	2001889e 	.word	0x2001889e
    2590:	2001889c 	.word	0x2001889c

00002594 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2594:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    2598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    259c:	d33c      	bcc.n	2618 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    259e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    25a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    25a6:	d355      	bcc.n	2654 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    25a8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    25ac:	b294      	uxth	r4, r2
    25ae:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    25b2:	d331      	bcc.n	2618 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    25b4:	2900      	cmp	r1, #0
    25b6:	f000 8118 	beq.w	27ea <read_byte(unsigned short, bool)+0x256>
    25ba:	4cb3      	ldr	r4, [pc, #716]	; (2888 <read_byte(unsigned short, bool)+0x2f4>)
    25bc:	f894 8000 	ldrb.w	r8, [r4]
    25c0:	f1b8 0f01 	cmp.w	r8, #1
    25c4:	f040 814f 	bne.w	2866 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    25c8:	4ab0      	ldr	r2, [pc, #704]	; (288c <read_byte(unsigned short, bool)+0x2f8>)
    25ca:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    25ce:	2100      	movs	r1, #0
    current_address = local_address;
    25d0:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    25d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    25d6:	d311      	bcc.n	25fc <read_byte(unsigned short, bool)+0x68>
    25d8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    25dc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    25e0:	f0c0 8135 	bcc.w	284e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    25e4:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    25e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    25ec:	f0c0 812f 	bcc.w	284e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    25f0:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    25f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    25f8:	f0c0 8129 	bcc.w	284e <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    25fc:	4ba4      	ldr	r3, [pc, #656]	; (2890 <read_byte(unsigned short, bool)+0x2fc>)
    25fe:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2600:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    2604:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2606:	d02f      	beq.n	2668 <read_byte(unsigned short, bool)+0xd4>
    2608:	b371      	cbz	r1, 2668 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    260a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    260e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2616:	e027      	b.n	2668 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2618:	4b9e      	ldr	r3, [pc, #632]	; (2894 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    261a:	781a      	ldrb	r2, [r3, #0]
    261c:	2a01      	cmp	r2, #1
    261e:	d906      	bls.n	262e <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    2620:	4a9b      	ldr	r2, [pc, #620]	; (2890 <read_byte(unsigned short, bool)+0x2fc>)
    2622:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2624:	4b9c      	ldr	r3, [pc, #624]	; (2898 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2626:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2628:	5c18      	ldrb	r0, [r3, r0]
}
    262a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    262e:	4a96      	ldr	r2, [pc, #600]	; (2888 <read_byte(unsigned short, bool)+0x2f4>)
    2630:	f892 8000 	ldrb.w	r8, [r2]
    2634:	2900      	cmp	r1, #0
    2636:	f040 80de 	bne.w	27f6 <read_byte(unsigned short, bool)+0x262>
    263a:	2100      	movs	r1, #0
    current_address = local_address;
    263c:	4a93      	ldr	r2, [pc, #588]	; (288c <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    263e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    2642:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2644:	f080 811d 	bcs.w	2882 <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2648:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    264a:	2b01      	cmp	r3, #1
    264c:	d9d6      	bls.n	25fc <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    264e:	4b93      	ldr	r3, [pc, #588]	; (289c <read_byte(unsigned short, bool)+0x308>)
    2650:	781c      	ldrb	r4, [r3, #0]
    2652:	e06c      	b.n	272e <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2654:	2900      	cmp	r1, #0
    2656:	f040 813d 	bne.w	28d4 <read_byte(unsigned short, bool)+0x340>
    265a:	4b8b      	ldr	r3, [pc, #556]	; (2888 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    265c:	4c8b      	ldr	r4, [pc, #556]	; (288c <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    265e:	4a8c      	ldr	r2, [pc, #560]	; (2890 <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2660:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2664:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2666:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2668:	4b8c      	ldr	r3, [pc, #560]	; (289c <read_byte(unsigned short, bool)+0x308>)
    266a:	781c      	ldrb	r4, [r3, #0]
    266c:	b94c      	cbnz	r4, 2682 <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    266e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2672:	6813      	ldr	r3, [r2, #0]
    2674:	04de      	lsls	r6, r3, #19
    2676:	d4fc      	bmi.n	2672 <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2678:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    267c:	6813      	ldr	r3, [r2, #0]
    267e:	04dd      	lsls	r5, r3, #19
    2680:	d5fc      	bpl.n	267c <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2682:	4e87      	ldr	r6, [pc, #540]	; (28a0 <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2684:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2688:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    268a:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    268c:	0a85      	lsrs	r5, r0, #10
    268e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2692:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2696:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    269a:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    269e:	4b81      	ldr	r3, [pc, #516]	; (28a4 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    26a0:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26a4:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    26a6:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    26a8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    26ac:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    26ae:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    26b0:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    26b2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    26b6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    26ba:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    26be:	433b      	orrs	r3, r7
    26c0:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26c4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26c6:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26c8:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    26d0:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26d2:	4b75      	ldr	r3, [pc, #468]	; (28a8 <read_byte(unsigned short, bool)+0x314>)
    26d4:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26d6:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26d8:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    26da:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26dc:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    26e0:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    26e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    26e8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    26ea:	0342      	lsls	r2, r0, #13
    26ec:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    26f0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    26f2:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26f4:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    26f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26fc:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    26fe:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2700:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2704:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    2708:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    270a:	f8dc 2000 	ldr.w	r2, [ip]
    270e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2712:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2714:	4a65      	ldr	r2, [pc, #404]	; (28ac <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2716:	433b      	orrs	r3, r7
    2718:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    271c:	0903      	lsrs	r3, r0, #4
    271e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2722:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2724:	6835      	ldr	r5, [r6, #0]
    2726:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2728:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    272a:	430b      	orrs	r3, r1
    272c:	6033      	str	r3, [r6, #0]
    return;
    272e:	4d60      	ldr	r5, [pc, #384]	; (28b0 <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2730:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2734:	f8df e184 	ldr.w	lr, [pc, #388]	; 28bc <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2738:	f8df c188 	ldr.w	ip, [pc, #392]	; 28c4 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    273c:	4f5d      	ldr	r7, [pc, #372]	; (28b4 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    273e:	4e5e      	ldr	r6, [pc, #376]	; (28b8 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    2740:	b1d4      	cbz	r4, 2778 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    2742:	782b      	ldrb	r3, [r5, #0]
    2744:	2b01      	cmp	r3, #1
    2746:	d0fb      	beq.n	2740 <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2748:	f1b8 0f01 	cmp.w	r8, #1
    274c:	d005      	beq.n	275a <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    274e:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2752:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    275a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    275e:	d05d      	beq.n	281c <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2760:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2764:	d352      	bcc.n	280c <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2766:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    276a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    276e:	d247      	bcs.n	2800 <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    2770:	4b49      	ldr	r3, [pc, #292]	; (2898 <read_byte(unsigned short, bool)+0x304>)
    2772:	5c18      	ldrb	r0, [r3, r0]
}
    2774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2778:	6813      	ldr	r3, [r2, #0]
    277a:	04d9      	lsls	r1, r3, #19
    277c:	d4fc      	bmi.n	2778 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    277e:	6813      	ldr	r3, [r2, #0]
    2780:	04db      	lsls	r3, r3, #19
    2782:	d5fc      	bpl.n	277e <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2784:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2786:	04d9      	lsls	r1, r3, #19
    2788:	d5fc      	bpl.n	2784 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    278a:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    278e:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2790:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2794:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2798:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    279c:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27a0:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    27a4:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    27a8:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    27ac:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27b0:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    27b4:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    27b6:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    27ba:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    27be:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    27c2:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    27c6:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27ca:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    27ce:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    27d2:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    27d6:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27da:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    27de:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27e0:	ea41 010a 	orr.w	r1, r1, sl
    27e4:	f88e 1000 	strb.w	r1, [lr]
    return;
    27e8:	e7ac      	b.n	2744 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    27ea:	4c28      	ldr	r4, [pc, #160]	; (288c <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    27ec:	4b26      	ldr	r3, [pc, #152]	; (2888 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    27ee:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    27f0:	f893 8000 	ldrb.w	r8, [r3]
    27f4:	e6f2      	b.n	25dc <read_byte(unsigned short, bool)+0x48>
    27f6:	f1b8 0f01 	cmp.w	r8, #1
    27fa:	f47f af1f 	bne.w	263c <read_byte(unsigned short, bool)+0xa8>
    27fe:	e71c      	b.n	263a <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2800:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2804:	b29b      	uxth	r3, r3
    2806:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    280a:	d203      	bcs.n	2814 <read_byte(unsigned short, bool)+0x280>
    280c:	4b21      	ldr	r3, [pc, #132]	; (2894 <read_byte(unsigned short, bool)+0x300>)
    280e:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    2810:	2b00      	cmp	r3, #0
    2812:	d1ad      	bne.n	2770 <read_byte(unsigned short, bool)+0x1dc>
    2814:	4b29      	ldr	r3, [pc, #164]	; (28bc <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    2816:	7818      	ldrb	r0, [r3, #0]
}
    2818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    281c:	4928      	ldr	r1, [pc, #160]	; (28c0 <read_byte(unsigned short, bool)+0x32c>)
    281e:	4b27      	ldr	r3, [pc, #156]	; (28bc <read_byte(unsigned short, bool)+0x328>)
    2820:	780a      	ldrb	r2, [r1, #0]
    2822:	b9b2      	cbnz	r2, 2852 <read_byte(unsigned short, bool)+0x2be>
    2824:	781a      	ldrb	r2, [r3, #0]
    2826:	2a88      	cmp	r2, #136	; 0x88
    2828:	d1f5      	bne.n	2816 <read_byte(unsigned short, bool)+0x282>
    282a:	2201      	movs	r2, #1
    282c:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    282e:	780a      	ldrb	r2, [r1, #0]
    2830:	2a03      	cmp	r2, #3
    2832:	d1f0      	bne.n	2816 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2834:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2836:	28b0      	cmp	r0, #176	; 0xb0
    2838:	d018      	beq.n	286c <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    283a:	28b1      	cmp	r0, #177	; 0xb1
    283c:	d044      	beq.n	28c8 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    283e:	28b2      	cmp	r0, #178	; 0xb2
    2840:	d155      	bne.n	28ee <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    2842:	4814      	ldr	r0, [pc, #80]	; (2894 <read_byte(unsigned short, bool)+0x300>)
    2844:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2846:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2848:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    284a:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    284c:	e7e3      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    284e:	4b11      	ldr	r3, [pc, #68]	; (2894 <read_byte(unsigned short, bool)+0x300>)
    2850:	e6fa      	b.n	2648 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2852:	2a01      	cmp	r2, #1
    2854:	d00f      	beq.n	2876 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2856:	2a02      	cmp	r2, #2
    2858:	d1ea      	bne.n	2830 <read_byte(unsigned short, bool)+0x29c>
    285a:	781a      	ldrb	r2, [r3, #0]
    285c:	2a88      	cmp	r2, #136	; 0x88
    285e:	d1da      	bne.n	2816 <read_byte(unsigned short, bool)+0x282>
    2860:	2203      	movs	r2, #3
    2862:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2864:	e7d7      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2866:	4b09      	ldr	r3, [pc, #36]	; (288c <read_byte(unsigned short, bool)+0x2f8>)
    2868:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    286a:	e6b7      	b.n	25dc <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    286c:	2200      	movs	r2, #0
    286e:	4809      	ldr	r0, [pc, #36]	; (2894 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    2870:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    2872:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2874:	e7cf      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2876:	781a      	ldrb	r2, [r3, #0]
    2878:	2a95      	cmp	r2, #149	; 0x95
    287a:	d1d8      	bne.n	282e <read_byte(unsigned short, bool)+0x29a>
    287c:	2202      	movs	r2, #2
    287e:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2880:	e7c9      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
    2882:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2886:	e6a4      	b.n	25d2 <read_byte(unsigned short, bool)+0x3e>
    2888:	200188a6 	.word	0x200188a6
    288c:	20018888 	.word	0x20018888
    2890:	200188a1 	.word	0x200188a1
    2894:	20018898 	.word	0x20018898
    2898:	200053f0 	.word	0x200053f0
    289c:	2000494e 	.word	0x2000494e
    28a0:	42004000 	.word	0x42004000
    28a4:	6dfffff3 	.word	0x6dfffff3
    28a8:	cff3efff 	.word	0xcff3efff
    28ac:	7fffff6f 	.word	0x7fffff6f
    28b0:	2001889d 	.word	0x2001889d
    28b4:	2001889e 	.word	0x2001889e
    28b8:	2001889c 	.word	0x2001889c
    28bc:	2001889a 	.word	0x2001889a
    28c0:	200188a7 	.word	0x200188a7
    28c4:	2001889b 	.word	0x2001889b
                    addr_mode = Read_Internal_Write_External;
    28c8:	480c      	ldr	r0, [pc, #48]	; (28fc <read_byte(unsigned short, bool)+0x368>)
    28ca:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    28cc:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    28ce:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    28d0:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    28d2:	e7a0      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    28d4:	4a0a      	ldr	r2, [pc, #40]	; (2900 <read_byte(unsigned short, bool)+0x36c>)
    28d6:	f892 8000 	ldrb.w	r8, [r2]
    28da:	f1b8 0f01 	cmp.w	r8, #1
    28de:	f43f ae73 	beq.w	25c8 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    28e2:	4908      	ldr	r1, [pc, #32]	; (2904 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    28e4:	2200      	movs	r2, #0
    28e6:	4b08      	ldr	r3, [pc, #32]	; (2908 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    28e8:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    28ea:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    28ec:	e68d      	b.n	260a <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    28ee:	28b3      	cmp	r0, #179	; 0xb3
    28f0:	d191      	bne.n	2816 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    28f2:	4c02      	ldr	r4, [pc, #8]	; (28fc <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    28f4:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    28f6:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    28f8:	7008      	strb	r0, [r1, #0]
    28fa:	e78c      	b.n	2816 <read_byte(unsigned short, bool)+0x282>
    28fc:	20018898 	.word	0x20018898
    2900:	200188a6 	.word	0x200188a6
    2904:	20018888 	.word	0x20018888
    2908:	200188a1 	.word	0x200188a1

0000290c <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    290c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    2910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2912:	d201      	bcs.n	2918 <write_byte(unsigned short, unsigned char)+0xc>
    2914:	4b77      	ldr	r3, [pc, #476]	; (2af4 <write_byte(unsigned short, unsigned char)+0x1e8>)
    2916:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2918:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    291c:	f0c0 80ad 	bcc.w	2a7a <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2920:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2928:	d306      	bcc.n	2938 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    292a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    292e:	b29b      	uxth	r3, r3
    2930:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2934:	f0c0 80a1 	bcc.w	2a7a <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2938:	4b6f      	ldr	r3, [pc, #444]	; (2af8 <write_byte(unsigned short, unsigned char)+0x1ec>)
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	b94b      	cbnz	r3, 2952 <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    293e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2942:	6813      	ldr	r3, [r2, #0]
    2944:	04df      	lsls	r7, r3, #19
    2946:	d4fc      	bmi.n	2942 <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2948:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    294c:	6813      	ldr	r3, [r2, #0]
    294e:	04de      	lsls	r6, r3, #19
    2950:	d5fc      	bpl.n	294c <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2952:	4c6a      	ldr	r4, [pc, #424]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2954:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2958:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    295a:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    295e:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2962:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2966:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    296a:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    296c:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2970:	4b63      	ldr	r3, [pc, #396]	; (2b00 <write_byte(unsigned short, unsigned char)+0x1f4>)
    2972:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2974:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2976:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    297a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    297e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2980:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2982:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2984:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2988:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    298c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2990:	432b      	orrs	r3, r5
    2992:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2994:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2996:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2998:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    299a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    299e:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    29a2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    29a6:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29a8:	4a56      	ldr	r2, [pc, #344]	; (2b04 <write_byte(unsigned short, unsigned char)+0x1f8>)
    29aa:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29ac:	4d56      	ldr	r5, [pc, #344]	; (2b08 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    29ae:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    29b0:	0542      	lsls	r2, r0, #21
    29b2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    29b6:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    29b8:	0343      	lsls	r3, r0, #13
    29ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    29be:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    29c0:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    29c2:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29c4:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    29c6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    29ca:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29cc:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29ce:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29d6:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29d8:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29da:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29de:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29e2:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29e4:	4849      	ldr	r0, [pc, #292]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    29e6:	4332      	orrs	r2, r6
    29e8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29ea:	4a49      	ldr	r2, [pc, #292]	; (2b10 <write_byte(unsigned short, unsigned char)+0x204>)
    29ec:	6805      	ldr	r5, [r0, #0]
    29ee:	402a      	ands	r2, r5
		if (val) {
    29f0:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29f2:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    29f6:	ea43 030c 	orr.w	r3, r3, ip
    29fa:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    29fc:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2a00:	d444      	bmi.n	2a8c <write_byte(unsigned short, unsigned char)+0x180>
    2a02:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2a04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2a08:	f04f 0201 	mov.w	r2, #1
    2a0c:	4b3b      	ldr	r3, [pc, #236]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2a0e:	d544      	bpl.n	2a9a <write_byte(unsigned short, unsigned char)+0x18e>
    2a10:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2a16:	4b39      	ldr	r3, [pc, #228]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2a1c:	d544      	bpl.n	2aa8 <write_byte(unsigned short, unsigned char)+0x19c>
    2a1e:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2a24:	4b35      	ldr	r3, [pc, #212]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2a2a:	d544      	bpl.n	2ab6 <write_byte(unsigned short, unsigned char)+0x1aa>
    2a2c:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2a32:	4b32      	ldr	r3, [pc, #200]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2a38:	d544      	bpl.n	2ac4 <write_byte(unsigned short, unsigned char)+0x1b8>
    2a3a:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2a40:	4b2e      	ldr	r3, [pc, #184]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a42:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2a46:	d544      	bpl.n	2ad2 <write_byte(unsigned short, unsigned char)+0x1c6>
    2a48:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2a4e:	4b2f      	ldr	r3, [pc, #188]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    2a50:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2a54:	d544      	bpl.n	2ae0 <write_byte(unsigned short, unsigned char)+0x1d4>
    2a56:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2a5c:	4b2b      	ldr	r3, [pc, #172]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    2a5e:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2a62:	d044      	beq.n	2aee <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2a68:	4c28      	ldr	r4, [pc, #160]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    2a6a:	2520      	movs	r5, #32
    2a6c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2a70:	f7ff fd40 	bl	24f4 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2a74:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a7a:	4b26      	ldr	r3, [pc, #152]	; (2b14 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2a7c:	781b      	ldrb	r3, [r3, #0]
    2a7e:	2b02      	cmp	r3, #2
    2a80:	f67f af5a 	bls.w	2938 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2a84:	4b24      	ldr	r3, [pc, #144]	; (2b18 <write_byte(unsigned short, unsigned char)+0x20c>)
    2a86:	2201      	movs	r2, #1
    2a88:	701a      	strb	r2, [r3, #0]
}
    2a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2a8c:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2a8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2a92:	f04f 0201 	mov.w	r2, #1
    2a96:	4b19      	ldr	r3, [pc, #100]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2a98:	d4ba      	bmi.n	2a10 <write_byte(unsigned short, unsigned char)+0x104>
    2a9a:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2aa0:	4b16      	ldr	r3, [pc, #88]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2aa6:	d4ba      	bmi.n	2a1e <write_byte(unsigned short, unsigned char)+0x112>
    2aa8:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2aae:	4b13      	ldr	r3, [pc, #76]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2ab4:	d4ba      	bmi.n	2a2c <write_byte(unsigned short, unsigned char)+0x120>
    2ab6:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2abc:	4b0f      	ldr	r3, [pc, #60]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2ac2:	d4ba      	bmi.n	2a3a <write_byte(unsigned short, unsigned char)+0x12e>
    2ac4:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2aca:	4b0c      	ldr	r3, [pc, #48]	; (2afc <write_byte(unsigned short, unsigned char)+0x1f0>)
    2acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2ad0:	d4ba      	bmi.n	2a48 <write_byte(unsigned short, unsigned char)+0x13c>
    2ad2:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2ad8:	4b0c      	ldr	r3, [pc, #48]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    2ada:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2ade:	d4ba      	bmi.n	2a56 <write_byte(unsigned short, unsigned char)+0x14a>
    2ae0:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2ae6:	4b09      	ldr	r3, [pc, #36]	; (2b0c <write_byte(unsigned short, unsigned char)+0x200>)
    2ae8:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2aec:	d1ba      	bne.n	2a64 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2af2:	e7b9      	b.n	2a68 <write_byte(unsigned short, unsigned char)+0x15c>
    2af4:	200053f0 	.word	0x200053f0
    2af8:	2000494e 	.word	0x2000494e
    2afc:	42004000 	.word	0x42004000
    2b00:	6dfffff3 	.word	0x6dfffff3
    2b04:	cff3efff 	.word	0xcff3efff
    2b08:	42008000 	.word	0x42008000
    2b0c:	4200c000 	.word	0x4200c000
    2b10:	7fffff6f 	.word	0x7fffff6f
    2b14:	20018898 	.word	0x20018898
    2b18:	200188a1 	.word	0x200188a1

00002b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2b1c:	4a08      	ldr	r2, [pc, #32]	; (2b40 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2b1e:	0601      	lsls	r1, r0, #24
    2b20:	7813      	ldrb	r3, [r2, #0]
    2b22:	d407      	bmi.n	2b34 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b28:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2b2a:	b928      	cbnz	r0, 2b38 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2b2c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2b30:	7013      	strb	r3, [r2, #0]
}
    2b32:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2b38:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2b3c:	7013      	strb	r3, [r2, #0]
}
    2b3e:	4770      	bx	lr
    2b40:	20004950 	.word	0x20004950

00002b44 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2b44:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2b46:	4b04      	ldr	r3, [pc, #16]	; (2b58 <Fetch_Immediate(unsigned char)+0x14>)
    2b48:	2100      	movs	r1, #0
    2b4a:	881b      	ldrh	r3, [r3, #0]
    2b4c:	4418      	add	r0, r3
    2b4e:	b280      	uxth	r0, r0
    2b50:	f7ff fd20 	bl	2594 <read_byte(unsigned short, bool)>
}
    2b54:	bd08      	pop	{r3, pc}
    2b56:	bf00      	nop
    2b58:	2001888c 	.word	0x2001888c

00002b5c <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2b5c:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2b5e:	4b07      	ldr	r3, [pc, #28]	; (2b7c <Fetch_ZeroPage()+0x20>)
    2b60:	2100      	movs	r1, #0
    2b62:	8818      	ldrh	r0, [r3, #0]
    2b64:	3001      	adds	r0, #1
    2b66:	b280      	uxth	r0, r0
    2b68:	f7ff fd14 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2b6c:	4b04      	ldr	r3, [pc, #16]	; (2b80 <Fetch_ZeroPage()+0x24>)
    2b6e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2b70:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2b72:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2b74:	f7ff fd0e 	bl	2594 <read_byte(unsigned short, bool)>
}
    2b78:	bd08      	pop	{r3, pc}
    2b7a:	bf00      	nop
    2b7c:	2001888c 	.word	0x2001888c
    2b80:	2001888a 	.word	0x2001888a

00002b84 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2b84:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2b86:	4c0c      	ldr	r4, [pc, #48]	; (2bb8 <Fetch_ZeroPage_X()+0x34>)
    2b88:	2100      	movs	r1, #0
    2b8a:	8820      	ldrh	r0, [r4, #0]
    2b8c:	3001      	adds	r0, #1
    2b8e:	b280      	uxth	r0, r0
    2b90:	f7ff fd00 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2b94:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2b96:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2b98:	2100      	movs	r1, #0
    2b9a:	1c58      	adds	r0, r3, #1
    2b9c:	b280      	uxth	r0, r0
    2b9e:	f7ff fcf9 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2ba2:	4a06      	ldr	r2, [pc, #24]	; (2bbc <Fetch_ZeroPage_X()+0x38>)
    2ba4:	4b06      	ldr	r3, [pc, #24]	; (2bc0 <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2ba6:	2100      	movs	r1, #0
    2ba8:	7812      	ldrb	r2, [r2, #0]
    2baa:	18a0      	adds	r0, r4, r2
    2bac:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2bae:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2bb0:	f7ff fcf0 	bl	2594 <read_byte(unsigned short, bool)>
}
    2bb4:	bd10      	pop	{r4, pc}
    2bb6:	bf00      	nop
    2bb8:	2001888c 	.word	0x2001888c
    2bbc:	200188a4 	.word	0x200188a4
    2bc0:	2001888a 	.word	0x2001888a

00002bc4 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2bc4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2bc6:	4c0c      	ldr	r4, [pc, #48]	; (2bf8 <Fetch_ZeroPage_Y()+0x34>)
    2bc8:	2100      	movs	r1, #0
    2bca:	8820      	ldrh	r0, [r4, #0]
    2bcc:	3001      	adds	r0, #1
    2bce:	b280      	uxth	r0, r0
    2bd0:	f7ff fce0 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2bd4:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2bd6:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2bd8:	2100      	movs	r1, #0
    2bda:	1c58      	adds	r0, r3, #1
    2bdc:	b280      	uxth	r0, r0
    2bde:	f7ff fcd9 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    2be2:	4a06      	ldr	r2, [pc, #24]	; (2bfc <Fetch_ZeroPage_Y()+0x38>)
    2be4:	4b06      	ldr	r3, [pc, #24]	; (2c00 <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    2be6:	2100      	movs	r1, #0
    2be8:	7812      	ldrb	r2, [r2, #0]
    2bea:	18a0      	adds	r0, r4, r2
    2bec:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    2bee:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2bf0:	f7ff fcd0 	bl	2594 <read_byte(unsigned short, bool)>
}
    2bf4:	bd10      	pop	{r4, pc}
    2bf6:	bf00      	nop
    2bf8:	2001888c 	.word	0x2001888c
    2bfc:	200188a5 	.word	0x200188a5
    2c00:	2001888a 	.word	0x2001888a

00002c04 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    2c04:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2c06:	4c0b      	ldr	r4, [pc, #44]	; (2c34 <Fetch_Absolute()+0x30>)
    2c08:	2100      	movs	r1, #0
    2c0a:	8820      	ldrh	r0, [r4, #0]
    2c0c:	3001      	adds	r0, #1
    2c0e:	b280      	uxth	r0, r0
    2c10:	f7ff fcc0 	bl	2594 <read_byte(unsigned short, bool)>
    2c14:	8823      	ldrh	r3, [r4, #0]
    2c16:	4604      	mov	r4, r0
    2c18:	2100      	movs	r1, #0
    2c1a:	1c98      	adds	r0, r3, #2
    2c1c:	b280      	uxth	r0, r0
    2c1e:	f7ff fcb9 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    2c22:	4b05      	ldr	r3, [pc, #20]	; (2c38 <Fetch_Absolute()+0x34>)
    2c24:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    2c28:	2100      	movs	r1, #0
    effective_address = adl + adh;
    2c2a:	b280      	uxth	r0, r0
    2c2c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2c2e:	f7ff fcb1 	bl	2594 <read_byte(unsigned short, bool)>
}
    2c32:	bd10      	pop	{r4, pc}
    2c34:	2001888c 	.word	0x2001888c
    2c38:	2001888a 	.word	0x2001888a

00002c3c <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2c3e:	4c14      	ldr	r4, [pc, #80]	; (2c90 <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2c40:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2c42:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2c44:	4d13      	ldr	r5, [pc, #76]	; (2c94 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2c46:	8823      	ldrh	r3, [r4, #0]
    2c48:	1c58      	adds	r0, r3, #1
    2c4a:	b280      	uxth	r0, r0
    2c4c:	f7ff fca2 	bl	2594 <read_byte(unsigned short, bool)>
    2c50:	8823      	ldrh	r3, [r4, #0]
    2c52:	4607      	mov	r7, r0
    2c54:	2100      	movs	r1, #0
    2c56:	1c98      	adds	r0, r3, #2
    2c58:	b280      	uxth	r0, r0
    2c5a:	f7ff fc9b 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    2c5e:	4b0e      	ldr	r3, [pc, #56]	; (2c98 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2c60:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2c62:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2c64:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2c66:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    2c68:	443b      	add	r3, r7
    2c6a:	4423      	add	r3, r4
    2c6c:	b298      	uxth	r0, r3
    2c6e:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2c70:	f7ff fc90 	bl	2594 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2c74:	2e01      	cmp	r6, #1
    2c76:	d000      	beq.n	2c7a <Fetch_Absolute_X(unsigned char)+0x3e>
}
    2c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2c7a:	882b      	ldrh	r3, [r5, #0]
    2c7c:	405c      	eors	r4, r3
    2c7e:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2c82:	d0f9      	beq.n	2c78 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2c84:	2100      	movs	r1, #0
    2c86:	4618      	mov	r0, r3
    2c88:	f7ff fc84 	bl	2594 <read_byte(unsigned short, bool)>
}
    2c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c8e:	bf00      	nop
    2c90:	2001888c 	.word	0x2001888c
    2c94:	2001888a 	.word	0x2001888a
    2c98:	200188a4 	.word	0x200188a4

00002c9c <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2c9e:	4c14      	ldr	r4, [pc, #80]	; (2cf0 <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2ca0:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2ca2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2ca4:	4d13      	ldr	r5, [pc, #76]	; (2cf4 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2ca6:	8823      	ldrh	r3, [r4, #0]
    2ca8:	1c58      	adds	r0, r3, #1
    2caa:	b280      	uxth	r0, r0
    2cac:	f7ff fc72 	bl	2594 <read_byte(unsigned short, bool)>
    2cb0:	8823      	ldrh	r3, [r4, #0]
    2cb2:	4607      	mov	r7, r0
    2cb4:	2100      	movs	r1, #0
    2cb6:	1c98      	adds	r0, r3, #2
    2cb8:	b280      	uxth	r0, r0
    2cba:	f7ff fc6b 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2cbe:	4b0e      	ldr	r3, [pc, #56]	; (2cf8 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2cc0:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2cc2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2cc4:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2cc6:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2cc8:	443b      	add	r3, r7
    2cca:	4423      	add	r3, r4
    2ccc:	b298      	uxth	r0, r3
    2cce:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2cd0:	f7ff fc60 	bl	2594 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2cd4:	2e01      	cmp	r6, #1
    2cd6:	d000      	beq.n	2cda <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    2cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2cda:	882b      	ldrh	r3, [r5, #0]
    2cdc:	405c      	eors	r4, r3
    2cde:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2ce2:	d0f9      	beq.n	2cd8 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2ce4:	2100      	movs	r1, #0
    2ce6:	4618      	mov	r0, r3
    2ce8:	f7ff fc54 	bl	2594 <read_byte(unsigned short, bool)>
}
    2cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cee:	bf00      	nop
    2cf0:	2001888c 	.word	0x2001888c
    2cf4:	2001888a 	.word	0x2001888a
    2cf8:	200188a5 	.word	0x200188a5

00002cfc <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    2cfc:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2cfe:	4b11      	ldr	r3, [pc, #68]	; (2d44 <Fetch_Indexed_Indirect_X()+0x48>)
    2d00:	2100      	movs	r1, #0
    2d02:	8818      	ldrh	r0, [r3, #0]
    2d04:	3001      	adds	r0, #1
    2d06:	b280      	uxth	r0, r0
    2d08:	f7ff fc44 	bl	2594 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    2d0c:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    2d0e:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    2d10:	781c      	ldrb	r4, [r3, #0]
    2d12:	4404      	add	r4, r0
    2d14:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    2d16:	4620      	mov	r0, r4
    2d18:	f7ff fc3c 	bl	2594 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    2d1c:	2100      	movs	r1, #0
    2d1e:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2d20:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    2d22:	f7ff fc37 	bl	2594 <read_byte(unsigned short, bool)>
    2d26:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2d28:	2100      	movs	r1, #0
    2d2a:	b2e0      	uxtb	r0, r4
    2d2c:	f7ff fc32 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2d30:	4b06      	ldr	r3, [pc, #24]	; (2d4c <Fetch_Indexed_Indirect_X()+0x50>)
    2d32:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    2d36:	2100      	movs	r1, #0
    effective_address = adh + adl;
    2d38:	b280      	uxth	r0, r0
    2d3a:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    2d3c:	f7ff fc2a 	bl	2594 <read_byte(unsigned short, bool)>
}
    2d40:	bd38      	pop	{r3, r4, r5, pc}
    2d42:	bf00      	nop
    2d44:	2001888c 	.word	0x2001888c
    2d48:	200188a4 	.word	0x200188a4
    2d4c:	2001888a 	.word	0x2001888a

00002d50 <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2d52:	4b16      	ldr	r3, [pc, #88]	; (2dac <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2d54:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2d56:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2d58:	4e15      	ldr	r6, [pc, #84]	; (2db0 <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2d5a:	881b      	ldrh	r3, [r3, #0]
    2d5c:	1c58      	adds	r0, r3, #1
    2d5e:	b280      	uxth	r0, r0
    2d60:	f7ff fc18 	bl	2594 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    2d64:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2d66:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    2d68:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d6a:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    2d6c:	f7ff fc12 	bl	2594 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d70:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    2d72:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d74:	b2e0      	uxtb	r0, r4
    2d76:	f7ff fc0d 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2d7a:	4b0e      	ldr	r3, [pc, #56]	; (2db4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d7c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2d7e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2d80:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d82:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2d84:	443b      	add	r3, r7
    2d86:	4423      	add	r3, r4
    2d88:	b298      	uxth	r0, r3
    2d8a:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    2d8c:	f7ff fc02 	bl	2594 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d90:	2d01      	cmp	r5, #1
    2d92:	d000      	beq.n	2d96 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    2d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d96:	8833      	ldrh	r3, [r6, #0]
    2d98:	405c      	eors	r4, r3
    2d9a:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2d9e:	d0f9      	beq.n	2d94 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    2da0:	2100      	movs	r1, #0
    2da2:	4618      	mov	r0, r3
    2da4:	f7ff fbf6 	bl	2594 <read_byte(unsigned short, bool)>
}
    2da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2daa:	bf00      	nop
    2dac:	2001888c 	.word	0x2001888c
    2db0:	2001888a 	.word	0x2001888a
    2db4:	200188a5 	.word	0x200188a5

00002db8 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    2db8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2dba:	4e0c      	ldr	r6, [pc, #48]	; (2dec <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    2dbc:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2dbe:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2dc0:	4c0b      	ldr	r4, [pc, #44]	; (2df0 <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    2dc2:	8833      	ldrh	r3, [r6, #0]
    2dc4:	1c58      	adds	r0, r3, #1
    2dc6:	b280      	uxth	r0, r0
    2dc8:	f7ff fbe4 	bl	2594 <read_byte(unsigned short, bool)>
    2dcc:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    2dce:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    2dd0:	2100      	movs	r1, #0
    2dd2:	1c98      	adds	r0, r3, #2
    2dd4:	b280      	uxth	r0, r0
    2dd6:	f7ff fbdd 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2dda:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    2ddc:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2dde:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    2de2:	b280      	uxth	r0, r0
    2de4:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    2de6:	f7ff fd91 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2dea:	bd70      	pop	{r4, r5, r6, pc}
    2dec:	2001888c 	.word	0x2001888c
    2df0:	2001888a 	.word	0x2001888a

00002df4 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    2df4:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2df6:	4b0b      	ldr	r3, [pc, #44]	; (2e24 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    2df8:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2dfa:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2dfc:	4d0a      	ldr	r5, [pc, #40]	; (2e28 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2dfe:	881b      	ldrh	r3, [r3, #0]
    2e00:	1c58      	adds	r0, r3, #1
    2e02:	b280      	uxth	r0, r0
    2e04:	f7ff fbc6 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2e08:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e0a:	b280      	uxth	r0, r0
    2e0c:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2e0e:	f7ff fbc1 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    2e12:	4a06      	ldr	r2, [pc, #24]	; (2e2c <Write_ZeroPage_X(unsigned char)+0x38>)
    2e14:	4621      	mov	r1, r4
    2e16:	882b      	ldrh	r3, [r5, #0]
    2e18:	7810      	ldrb	r0, [r2, #0]
    2e1a:	4418      	add	r0, r3
    2e1c:	b2c0      	uxtb	r0, r0
    2e1e:	f7ff fd75 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2e22:	bd38      	pop	{r3, r4, r5, pc}
    2e24:	2001888c 	.word	0x2001888c
    2e28:	2001888a 	.word	0x2001888a
    2e2c:	200188a4 	.word	0x200188a4

00002e30 <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    2e30:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2e32:	4b0b      	ldr	r3, [pc, #44]	; (2e60 <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    2e34:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2e36:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e38:	4d0a      	ldr	r5, [pc, #40]	; (2e64 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2e3a:	881b      	ldrh	r3, [r3, #0]
    2e3c:	1c58      	adds	r0, r3, #1
    2e3e:	b280      	uxth	r0, r0
    2e40:	f7ff fba8 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2e44:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e46:	b280      	uxth	r0, r0
    2e48:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2e4a:	f7ff fba3 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    2e4e:	4a06      	ldr	r2, [pc, #24]	; (2e68 <Write_ZeroPage_Y(unsigned char)+0x38>)
    2e50:	4621      	mov	r1, r4
    2e52:	882b      	ldrh	r3, [r5, #0]
    2e54:	7810      	ldrb	r0, [r2, #0]
    2e56:	4418      	add	r0, r3
    2e58:	b2c0      	uxtb	r0, r0
    2e5a:	f7ff fd57 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2e5e:	bd38      	pop	{r3, r4, r5, pc}
    2e60:	2001888c 	.word	0x2001888c
    2e64:	2001888a 	.word	0x2001888a
    2e68:	200188a5 	.word	0x200188a5

00002e6c <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    2e6c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2e6e:	4d0f      	ldr	r5, [pc, #60]	; (2eac <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    2e70:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2e72:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2e74:	4e0e      	ldr	r6, [pc, #56]	; (2eb0 <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    2e76:	882b      	ldrh	r3, [r5, #0]
    2e78:	1c58      	adds	r0, r3, #1
    2e7a:	b280      	uxth	r0, r0
    2e7c:	f7ff fb8a 	bl	2594 <read_byte(unsigned short, bool)>
    2e80:	882b      	ldrh	r3, [r5, #0]
    2e82:	4605      	mov	r5, r0
    2e84:	2100      	movs	r1, #0
    2e86:	1c98      	adds	r0, r3, #2
    2e88:	b280      	uxth	r0, r0
    2e8a:	f7ff fb83 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    2e8e:	4b09      	ldr	r3, [pc, #36]	; (2eb4 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    2e90:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2e92:	781b      	ldrb	r3, [r3, #0]
    2e94:	442b      	add	r3, r5
    2e96:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2e9a:	b298      	uxth	r0, r3
    2e9c:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    2e9e:	f7ff fb79 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2ea2:	4621      	mov	r1, r4
    2ea4:	8830      	ldrh	r0, [r6, #0]
    2ea6:	f7ff fd31 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2eaa:	bd70      	pop	{r4, r5, r6, pc}
    2eac:	2001888c 	.word	0x2001888c
    2eb0:	2001888a 	.word	0x2001888a
    2eb4:	200188a4 	.word	0x200188a4

00002eb8 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    2eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2eba:	4c16      	ldr	r4, [pc, #88]	; (2f14 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    2ebc:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2ebe:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2ec0:	4d15      	ldr	r5, [pc, #84]	; (2f18 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2ec2:	8823      	ldrh	r3, [r4, #0]
    2ec4:	1c58      	adds	r0, r3, #1
    2ec6:	b280      	uxth	r0, r0
    2ec8:	f7ff fb64 	bl	2594 <read_byte(unsigned short, bool)>
    2ecc:	8823      	ldrh	r3, [r4, #0]
    2ece:	4607      	mov	r7, r0
    2ed0:	2100      	movs	r1, #0
    2ed2:	1c98      	adds	r0, r3, #2
    2ed4:	b280      	uxth	r0, r0
    2ed6:	f7ff fb5d 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    2eda:	4b10      	ldr	r3, [pc, #64]	; (2f1c <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    2edc:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    2ede:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2ee0:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2ee2:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    2ee4:	443b      	add	r3, r7
    2ee6:	4423      	add	r3, r4
    2ee8:	b298      	uxth	r0, r3
    2eea:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2eec:	f7ff fb52 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    2ef0:	8828      	ldrh	r0, [r5, #0]
    2ef2:	4044      	eors	r4, r0
    2ef4:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2ef8:	d103      	bne.n	2f02 <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    2efa:	4631      	mov	r1, r6
    2efc:	f7ff fd06 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    2f02:	2100      	movs	r1, #0
    2f04:	f7ff fb46 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2f08:	8828      	ldrh	r0, [r5, #0]
    2f0a:	4631      	mov	r1, r6
    2f0c:	f7ff fcfe 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f12:	bf00      	nop
    2f14:	2001888c 	.word	0x2001888c
    2f18:	2001888a 	.word	0x2001888a
    2f1c:	200188a5 	.word	0x200188a5

00002f20 <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    2f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2f22:	4b13      	ldr	r3, [pc, #76]	; (2f70 <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    2f24:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2f26:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    2f28:	4f12      	ldr	r7, [pc, #72]	; (2f74 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    2f2a:	881b      	ldrh	r3, [r3, #0]
    2f2c:	1c58      	adds	r0, r3, #1
    2f2e:	b280      	uxth	r0, r0
    2f30:	f7ff fb30 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    2f34:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    2f36:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    2f38:	4604      	mov	r4, r0
    read_byte(bal, false);
    2f3a:	4628      	mov	r0, r5
    2f3c:	f7ff fb2a 	bl	2594 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    2f40:	783b      	ldrb	r3, [r7, #0]
    2f42:	2100      	movs	r1, #0
    2f44:	441c      	add	r4, r3
    2f46:	b2e0      	uxtb	r0, r4
    2f48:	f7ff fb24 	bl	2594 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    2f4c:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    2f4e:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    2f50:	2100      	movs	r1, #0
    2f52:	3301      	adds	r3, #1
    2f54:	441d      	add	r5, r3
    2f56:	b2e8      	uxtb	r0, r5
    2f58:	f7ff fb1c 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2f5c:	4b06      	ldr	r3, [pc, #24]	; (2f78 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    2f5e:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    2f62:	4631      	mov	r1, r6
    effective_address = adh + adl;
    2f64:	b280      	uxth	r0, r0
    2f66:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    2f68:	f7ff fcd0 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f6e:	bf00      	nop
    2f70:	2001888c 	.word	0x2001888c
    2f74:	200188a4 	.word	0x200188a4
    2f78:	2001888a 	.word	0x2001888a

00002f7c <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    2f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2f7e:	4b11      	ldr	r3, [pc, #68]	; (2fc4 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    2f80:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2f82:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2f84:	4f10      	ldr	r7, [pc, #64]	; (2fc8 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    2f86:	881b      	ldrh	r3, [r3, #0]
    2f88:	1c58      	adds	r0, r3, #1
    2f8a:	b280      	uxth	r0, r0
    2f8c:	f7ff fb02 	bl	2594 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    2f90:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2f92:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    2f94:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    2f96:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    2f98:	f7ff fafc 	bl	2594 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    2f9c:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    2f9e:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    2fa0:	b2a0      	uxth	r0, r4
    2fa2:	f7ff faf7 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2fa6:	4b09      	ldr	r3, [pc, #36]	; (2fcc <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    2fa8:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	4433      	add	r3, r6
    2fae:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2fb2:	b298      	uxth	r0, r3
    2fb4:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    2fb6:	f7ff faed 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2fba:	4629      	mov	r1, r5
    2fbc:	8838      	ldrh	r0, [r7, #0]
    2fbe:	f7ff fca5 	bl	290c <write_byte(unsigned short, unsigned char)>
}
    2fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fc4:	2001888c 	.word	0x2001888c
    2fc8:	2001888a 	.word	0x2001888a
    2fcc:	200188a5 	.word	0x200188a5

00002fd0 <reset_sequence()>:
void reset_sequence() {
    2fd0:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2fd2:	4b65      	ldr	r3, [pc, #404]	; (3168 <reset_sequence()+0x198>)
    2fd4:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    2fd6:	4d65      	ldr	r5, [pc, #404]	; (316c <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2fd8:	2002      	movs	r0, #2
    2fda:	4965      	ldr	r1, [pc, #404]	; (3170 <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    2fdc:	4c65      	ldr	r4, [pc, #404]	; (3174 <reset_sequence()+0x1a4>)
    2fde:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    2fe2:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2fe8:	8828      	ldrh	r0, [r5, #0]
    2fea:	f7ff fad3 	bl	2594 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    2fee:	8828      	ldrh	r0, [r5, #0]
    2ff0:	2100      	movs	r1, #0
    2ff2:	3001      	adds	r0, #1
    2ff4:	b280      	uxth	r0, r0
    2ff6:	f7ff facd 	bl	2594 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    2ffa:	7820      	ldrb	r0, [r4, #0]
    2ffc:	2100      	movs	r1, #0
    2ffe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3002:	f7ff fac7 	bl	2594 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    3006:	7820      	ldrb	r0, [r4, #0]
    3008:	2100      	movs	r1, #0
    300a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    300e:	3801      	subs	r0, #1
    3010:	b280      	uxth	r0, r0
    3012:	f7ff fabf 	bl	2594 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    3016:	7820      	ldrb	r0, [r4, #0]
    3018:	2100      	movs	r1, #0
    301a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    301e:	3802      	subs	r0, #2
    3020:	b280      	uxth	r0, r0
    3022:	f7ff fab7 	bl	2594 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    3026:	2100      	movs	r1, #0
    3028:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    302c:	f7ff fab2 	bl	2594 <read_byte(unsigned short, bool)>
    3030:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    3032:	2100      	movs	r1, #0
    3034:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3038:	f7ff faac 	bl	2594 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    303c:	4a4e      	ldr	r2, [pc, #312]	; (3178 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    303e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    3042:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3044:	4b4d      	ldr	r3, [pc, #308]	; (317c <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3046:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3048:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    304a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    304e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    3050:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3052:	d37b      	bcc.n	314c <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3054:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    305c:	d309      	bcc.n	3072 <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    305e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3062:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3066:	d371      	bcc.n	314c <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3068:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    306c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3070:	d36c      	bcc.n	314c <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3072:	4b43      	ldr	r3, [pc, #268]	; (3180 <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    3074:	2100      	movs	r1, #0
    3076:	4a43      	ldr	r2, [pc, #268]	; (3184 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3078:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    307a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    307c:	2b01      	cmp	r3, #1
    307e:	d005      	beq.n	308c <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3080:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3084:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    308c:	4b3e      	ldr	r3, [pc, #248]	; (3188 <reset_sequence()+0x1b8>)
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	b94b      	cbnz	r3, 30a6 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3092:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3096:	6813      	ldr	r3, [r2, #0]
    3098:	04d9      	lsls	r1, r3, #19
    309a:	d4fc      	bmi.n	3096 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    309c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    30a0:	6813      	ldr	r3, [r2, #0]
    30a2:	04db      	lsls	r3, r3, #19
    30a4:	d5fc      	bpl.n	30a0 <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    30a6:	4e32      	ldr	r6, [pc, #200]	; (3170 <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30a8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    30ac:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    30ae:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    30b0:	06c1      	lsls	r1, r0, #27
    30b2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    30b6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30ba:	682a      	ldr	r2, [r5, #0]
    30bc:	4b33      	ldr	r3, [pc, #204]	; (318c <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    30be:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30c2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    30c4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30c6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    30ca:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30ce:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    30d0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    30d4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30d8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    30da:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    30de:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30e2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30e4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30e6:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    30e8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30ea:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30ee:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    30f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30f4:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30f6:	4a26      	ldr	r2, [pc, #152]	; (3190 <reset_sequence()+0x1c0>)
    30f8:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30fa:	4d26      	ldr	r5, [pc, #152]	; (3194 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30fc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    30fe:	0542      	lsls	r2, r0, #21
    3100:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3104:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3106:	0343      	lsls	r3, r0, #13
    3108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    310c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    310e:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3110:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3114:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3118:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    311a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    311e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3122:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3124:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3128:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    312c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    312e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3130:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3132:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3136:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3138:	480b      	ldr	r0, [pc, #44]	; (3168 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    313a:	4332      	orrs	r2, r6
    313c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    313e:	4a16      	ldr	r2, [pc, #88]	; (3198 <reset_sequence()+0x1c8>)
    3140:	6804      	ldr	r4, [r0, #0]
    3142:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3144:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3146:	430b      	orrs	r3, r1
    3148:	6003      	str	r3, [r0, #0]
    return;
    314a:	e003      	b.n	3154 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    314c:	4b13      	ldr	r3, [pc, #76]	; (319c <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	2b01      	cmp	r3, #1
    3152:	d98e      	bls.n	3072 <reset_sequence()+0xa2>
    3154:	2110      	movs	r1, #16
    3156:	4812      	ldr	r0, [pc, #72]	; (31a0 <reset_sequence()+0x1d0>)
    3158:	f008 f8e8 	bl	b32c <usb_serial_write>
    315c:	4811      	ldr	r0, [pc, #68]	; (31a4 <reset_sequence()+0x1d4>)
}
    315e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3162:	f006 bc5f 	b.w	9a24 <Print::println()>
    3166:	bf00      	nop
    3168:	4200c000 	.word	0x4200c000
    316c:	2001888c 	.word	0x2001888c
    3170:	42004000 	.word	0x42004000
    3174:	20004951 	.word	0x20004951
    3178:	20004950 	.word	0x20004950
    317c:	20018888 	.word	0x20018888
    3180:	200188a6 	.word	0x200188a6
    3184:	200188a1 	.word	0x200188a1
    3188:	2000494e 	.word	0x2000494e
    318c:	6dfffff3 	.word	0x6dfffff3
    3190:	cff3efff 	.word	0xcff3efff
    3194:	42008000 	.word	0x42008000
    3198:	7fffff6f 	.word	0x7fffff6f
    319c:	20018898 	.word	0x20018898
    31a0:	200003cc 	.word	0x200003cc
    31a4:	20004340 	.word	0x20004340

000031a8 <nmi_handler()>:
void nmi_handler() {
    31a8:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31aa:	4e67      	ldr	r6, [pc, #412]	; (3348 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    31ac:	f7ff f9a2 	bl	24f4 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31b0:	4c66      	ldr	r4, [pc, #408]	; (334c <nmi_handler()+0x1a4>)
    31b2:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31b4:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31b6:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31b8:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    31bc:	4d64      	ldr	r5, [pc, #400]	; (3350 <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31be:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31c0:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31c4:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31c6:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31c8:	f7ff f9e4 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    31cc:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    31ce:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    31d0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31d4:	0a09      	lsrs	r1, r1, #8
    31d6:	f7ff fb99 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31da:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31dc:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    31de:	3801      	subs	r0, #1
    31e0:	b2c0      	uxtb	r0, r0
    31e2:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31e4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31e8:	f7ff fb90 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31ec:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31ee:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    31f0:	3801      	subs	r0, #1
    31f2:	b2c0      	uxtb	r0, r0
    31f4:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31fa:	f7ff fb87 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31fe:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    3200:	2100      	movs	r1, #0
    3202:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    3206:	3b01      	subs	r3, #1
    3208:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    320a:	f7ff f9c3 	bl	2594 <read_byte(unsigned short, bool)>
    320e:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    3210:	2100      	movs	r1, #0
    3212:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    3216:	f7ff f9bd 	bl	2594 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    321a:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    321c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3220:	4a4c      	ldr	r2, [pc, #304]	; (3354 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3222:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3226:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3228:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    322a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    322e:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3230:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3232:	d37b      	bcc.n	332c <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3234:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    323c:	d309      	bcc.n	3252 <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    323e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3242:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3246:	d371      	bcc.n	332c <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3248:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    324c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3250:	d36c      	bcc.n	332c <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3252:	4b41      	ldr	r3, [pc, #260]	; (3358 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3254:	2100      	movs	r1, #0
    3256:	4a41      	ldr	r2, [pc, #260]	; (335c <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3258:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    325a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    325c:	2b01      	cmp	r3, #1
    325e:	d005      	beq.n	326c <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3260:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3264:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    326c:	4b3c      	ldr	r3, [pc, #240]	; (3360 <nmi_handler()+0x1b8>)
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	b94b      	cbnz	r3, 3286 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3272:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3276:	6813      	ldr	r3, [r2, #0]
    3278:	04d9      	lsls	r1, r3, #19
    327a:	d4fc      	bmi.n	3276 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    327c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3280:	6813      	ldr	r3, [r2, #0]
    3282:	04db      	lsls	r3, r3, #19
    3284:	d5fc      	bpl.n	3280 <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3286:	4e37      	ldr	r6, [pc, #220]	; (3364 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3288:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    328c:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    328e:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3290:	06c1      	lsls	r1, r0, #27
    3292:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3296:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    329a:	682a      	ldr	r2, [r5, #0]
    329c:	4b32      	ldr	r3, [pc, #200]	; (3368 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    329e:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32a2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    32a4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32a6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    32aa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32ae:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    32b0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    32b4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32b8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    32ba:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    32be:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32c2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32c4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32c6:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    32c8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32ca:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32ce:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    32d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32d4:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32d6:	4a25      	ldr	r2, [pc, #148]	; (336c <nmi_handler()+0x1c4>)
    32d8:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32da:	4d25      	ldr	r5, [pc, #148]	; (3370 <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32dc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    32de:	0542      	lsls	r2, r0, #21
    32e0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    32e4:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    32e6:	0343      	lsls	r3, r0, #13
    32e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    32ec:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    32ee:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    32f0:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    32f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    32f8:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    32fa:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    32fe:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3302:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3304:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3308:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    330c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    330e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3310:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3312:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3316:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3318:	4816      	ldr	r0, [pc, #88]	; (3374 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    331a:	4332      	orrs	r2, r6
    331c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    331e:	4a16      	ldr	r2, [pc, #88]	; (3378 <nmi_handler()+0x1d0>)
    3320:	6804      	ldr	r4, [r0, #0]
    3322:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3324:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3326:	430b      	orrs	r3, r1
    3328:	6003      	str	r3, [r0, #0]
    return;
    332a:	e003      	b.n	3334 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    332c:	4b13      	ldr	r3, [pc, #76]	; (337c <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    332e:	781b      	ldrb	r3, [r3, #0]
    3330:	2b01      	cmp	r3, #1
    3332:	d98e      	bls.n	3252 <nmi_handler()+0xaa>
    3334:	210e      	movs	r1, #14
    3336:	4812      	ldr	r0, [pc, #72]	; (3380 <nmi_handler()+0x1d8>)
    3338:	f007 fff8 	bl	b32c <usb_serial_write>
    333c:	4811      	ldr	r0, [pc, #68]	; (3384 <nmi_handler()+0x1dc>)
}
    333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3342:	f006 bb6f 	b.w	9a24 <Print::println()>
    3346:	bf00      	nop
    3348:	20004950 	.word	0x20004950
    334c:	2001888c 	.word	0x2001888c
    3350:	20004951 	.word	0x20004951
    3354:	20018888 	.word	0x20018888
    3358:	200188a6 	.word	0x200188a6
    335c:	200188a1 	.word	0x200188a1
    3360:	2000494e 	.word	0x2000494e
    3364:	42004000 	.word	0x42004000
    3368:	6dfffff3 	.word	0x6dfffff3
    336c:	cff3efff 	.word	0xcff3efff
    3370:	42008000 	.word	0x42008000
    3374:	4200c000 	.word	0x4200c000
    3378:	7fffff6f 	.word	0x7fffff6f
    337c:	20018898 	.word	0x20018898
    3380:	20000388 	.word	0x20000388
    3384:	20004340 	.word	0x20004340

00003388 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    3388:	b570      	push	{r4, r5, r6, lr}
    338a:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    338c:	4e69      	ldr	r6, [pc, #420]	; (3534 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    338e:	f7ff f8b1 	bl	24f4 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3392:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3394:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3396:	f000 80ca 	beq.w	352e <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    339a:	f023 0310 	bic.w	r3, r3, #16
    339e:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    33a2:	4c65      	ldr	r4, [pc, #404]	; (3538 <irq_handler(unsigned char)+0x1b0>)
    33a4:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    33a6:	4d65      	ldr	r5, [pc, #404]	; (353c <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    33a8:	8820      	ldrh	r0, [r4, #0]
    33aa:	7033      	strb	r3, [r6, #0]
    33ac:	3001      	adds	r0, #1
    33ae:	b280      	uxth	r0, r0
    33b0:	f7ff f8f0 	bl	2594 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    33b4:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    33b6:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    33b8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    33bc:	0a09      	lsrs	r1, r1, #8
    33be:	f7ff faa5 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    33c2:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33c4:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    33c6:	3801      	subs	r0, #1
    33c8:	b2c0      	uxtb	r0, r0
    33ca:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33cc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    33d0:	f7ff fa9c 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    33d4:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33d6:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    33d8:	3801      	subs	r0, #1
    33da:	b2c0      	uxtb	r0, r0
    33dc:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33de:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    33e2:	f7ff fa93 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    33e6:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    33e8:	2100      	movs	r1, #0
    33ea:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    33ee:	3b01      	subs	r3, #1
    33f0:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    33f2:	f7ff f8cf 	bl	2594 <read_byte(unsigned short, bool)>
    33f6:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    33f8:	2100      	movs	r1, #0
    33fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    33fe:	f7ff f8c9 	bl	2594 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3402:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    3404:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3408:	4a4d      	ldr	r2, [pc, #308]	; (3540 <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    340a:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    340e:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3410:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3412:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    3416:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3418:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    341a:	d37b      	bcc.n	3514 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    341c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3424:	d309      	bcc.n	343a <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3426:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    342a:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    342e:	d371      	bcc.n	3514 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3430:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3434:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3438:	d36c      	bcc.n	3514 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    343a:	4b42      	ldr	r3, [pc, #264]	; (3544 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    343c:	2100      	movs	r1, #0
    343e:	4a42      	ldr	r2, [pc, #264]	; (3548 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3440:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3442:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3444:	2b01      	cmp	r3, #1
    3446:	d005      	beq.n	3454 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3448:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    344c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3454:	4b3d      	ldr	r3, [pc, #244]	; (354c <irq_handler(unsigned char)+0x1c4>)
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	b94b      	cbnz	r3, 346e <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    345a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    345e:	6813      	ldr	r3, [r2, #0]
    3460:	04d9      	lsls	r1, r3, #19
    3462:	d4fc      	bmi.n	345e <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3464:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3468:	6813      	ldr	r3, [r2, #0]
    346a:	04db      	lsls	r3, r3, #19
    346c:	d5fc      	bpl.n	3468 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    346e:	4e38      	ldr	r6, [pc, #224]	; (3550 <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3470:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3474:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3476:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3478:	06c1      	lsls	r1, r0, #27
    347a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    347e:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3482:	682a      	ldr	r2, [r5, #0]
    3484:	4b33      	ldr	r3, [pc, #204]	; (3554 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3486:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    348a:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    348c:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    348e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3492:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3496:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3498:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    349c:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34a0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    34a2:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    34a6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34aa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    34ac:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34ae:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    34b0:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    34b2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34b6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    34b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    34bc:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34be:	4a26      	ldr	r2, [pc, #152]	; (3558 <irq_handler(unsigned char)+0x1d0>)
    34c0:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34c2:	4d26      	ldr	r5, [pc, #152]	; (355c <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    34c4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    34c6:	0542      	lsls	r2, r0, #21
    34c8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    34cc:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    34ce:	0343      	lsls	r3, r0, #13
    34d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    34d4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    34d6:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34d8:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    34dc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34e0:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    34e2:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34e6:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34ea:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34ec:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34f4:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34f6:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34f8:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34fa:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34fe:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3500:	4817      	ldr	r0, [pc, #92]	; (3560 <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3502:	4332      	orrs	r2, r6
    3504:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3506:	4a17      	ldr	r2, [pc, #92]	; (3564 <irq_handler(unsigned char)+0x1dc>)
    3508:	6804      	ldr	r4, [r0, #0]
    350a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    350c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    350e:	430b      	orrs	r3, r1
    3510:	6003      	str	r3, [r0, #0]
    return;
    3512:	e003      	b.n	351c <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3514:	4b14      	ldr	r3, [pc, #80]	; (3568 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3516:	781b      	ldrb	r3, [r3, #0]
    3518:	2b01      	cmp	r3, #1
    351a:	d98e      	bls.n	343a <irq_handler(unsigned char)+0xb2>
    351c:	210e      	movs	r1, #14
    351e:	4813      	ldr	r0, [pc, #76]	; (356c <irq_handler(unsigned char)+0x1e4>)
    3520:	f007 ff04 	bl	b32c <usb_serial_write>
    3524:	4812      	ldr	r0, [pc, #72]	; (3570 <irq_handler(unsigned char)+0x1e8>)
}
    3526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    352a:	f006 ba7b 	b.w	9a24 <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    352e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3532:	e736      	b.n	33a2 <irq_handler(unsigned char)+0x1a>
    3534:	20004950 	.word	0x20004950
    3538:	2001888c 	.word	0x2001888c
    353c:	20004951 	.word	0x20004951
    3540:	20018888 	.word	0x20018888
    3544:	200188a6 	.word	0x200188a6
    3548:	200188a1 	.word	0x200188a1
    354c:	2000494e 	.word	0x2000494e
    3550:	42004000 	.word	0x42004000
    3554:	6dfffff3 	.word	0x6dfffff3
    3558:	cff3efff 	.word	0xcff3efff
    355c:	42008000 	.word	0x42008000
    3560:	4200c000 	.word	0x4200c000
    3564:	7fffff6f 	.word	0x7fffff6f
    3568:	20018898 	.word	0x20018898
    356c:	20000378 	.word	0x20000378
    3570:	20004340 	.word	0x20004340

00003574 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    3574:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3576:	4c14      	ldr	r4, [pc, #80]	; (35c8 <opcode_0x0A()+0x54>)
    3578:	2100      	movs	r1, #0
    357a:	8820      	ldrh	r0, [r4, #0]
    357c:	f7ff f80a 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3580:	4912      	ldr	r1, [pc, #72]	; (35cc <opcode_0x0A()+0x58>)
    3582:	4813      	ldr	r0, [pc, #76]	; (35d0 <opcode_0x0A()+0x5c>)
    3584:	780a      	ldrb	r2, [r1, #0]
    3586:	f991 3000 	ldrsb.w	r3, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    358a:	0052      	lsls	r2, r2, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    358c:	2b00      	cmp	r3, #0
    358e:	7803      	ldrb	r3, [r0, #0]
    register_a = register_a << 1;
    3590:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3592:	bfb4      	ite	lt
    3594:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3598:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = register_a << 1;
    359c:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    359e:	0611      	lsls	r1, r2, #24
    35a0:	d40d      	bmi.n	35be <opcode_0x0A()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    35a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35a6:	7003      	strb	r3, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    35a8:	b95a      	cbnz	r2, 35c2 <opcode_0x0A()+0x4e>
    35aa:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x0A].length);
    35ae:	4909      	ldr	r1, [pc, #36]	; (35d4 <opcode_0x0A()+0x60>)
    35b0:	8822      	ldrh	r2, [r4, #0]
    35b2:	7003      	strb	r3, [r0, #0]
    35b4:	f891 0239 	ldrb.w	r0, [r1, #569]	; 0x239
    35b8:	4410      	add	r0, r2
}
    35ba:	b280      	uxth	r0, r0
    35bc:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    35be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    35c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    35c6:	e7f2      	b.n	35ae <opcode_0x0A()+0x3a>
    35c8:	2001888c 	.word	0x2001888c
    35cc:	200188a3 	.word	0x200188a3
    35d0:	20004950 	.word	0x20004950
    35d4:	20015418 	.word	0x20015418

000035d8 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    35d8:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    35da:	4c11      	ldr	r4, [pc, #68]	; (3620 <opcode_0x4A()+0x48>)
    35dc:	2100      	movs	r1, #0
    35de:	8820      	ldrh	r0, [r4, #0]
    35e0:	f7fe ffd8 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35e4:	480f      	ldr	r0, [pc, #60]	; (3624 <opcode_0x4A()+0x4c>)
    35e6:	4910      	ldr	r1, [pc, #64]	; (3628 <opcode_0x4A()+0x50>)
    35e8:	7802      	ldrb	r2, [r0, #0]
    35ea:	780b      	ldrb	r3, [r1, #0]
    35ec:	f012 0f01 	tst.w	r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    35f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35f4:	bf14      	ite	ne
    35f6:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    35fa:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    35fe:	7002      	strb	r2, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3600:	b95a      	cbnz	r2, 361a <opcode_0x4A()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3606:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x4A].length);
    360a:	4808      	ldr	r0, [pc, #32]	; (362c <opcode_0x4A()+0x54>)
    360c:	8822      	ldrh	r2, [r4, #0]
    360e:	f890 0f39 	ldrb.w	r0, [r0, #3897]	; 0xf39
    3612:	700b      	strb	r3, [r1, #0]
    3614:	4410      	add	r0, r2
    3616:	b280      	uxth	r0, r0
}
    3618:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    361a:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    361e:	e7f4      	b.n	360a <opcode_0x4A()+0x32>
    3620:	2001888c 	.word	0x2001888c
    3624:	200188a3 	.word	0x200188a3
    3628:	20004950 	.word	0x20004950
    362c:	20015418 	.word	0x20015418

00003630 <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    3630:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3632:	4c15      	ldr	r4, [pc, #84]	; (3688 <opcode_0x6A()+0x58>)
    3634:	2100      	movs	r1, #0
    3636:	8820      	ldrh	r0, [r4, #0]
    3638:	f7fe ffac 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    363c:	4913      	ldr	r1, [pc, #76]	; (368c <opcode_0x6A()+0x5c>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    363e:	4814      	ldr	r0, [pc, #80]	; (3690 <opcode_0x6A()+0x60>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3640:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3642:	f890 c000 	ldrb.w	ip, [r0]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3646:	01da      	lsls	r2, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3648:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    364c:	b2d2      	uxtb	r2, r2
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    364e:	bf14      	ite	ne
    3650:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3654:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3658:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
    365c:	7002      	strb	r2, [r0, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    365e:	0610      	lsls	r0, r2, #24
    3660:	d40c      	bmi.n	367c <opcode_0x6A()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3666:	b95a      	cbnz	r2, 3680 <opcode_0x6A()+0x50>
    3668:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x6A].length);
    366c:	4809      	ldr	r0, [pc, #36]	; (3694 <opcode_0x6A()+0x64>)
    366e:	8822      	ldrh	r2, [r4, #0]
    3670:	f890 05b9 	ldrb.w	r0, [r0, #1465]	; 0x5b9
    3674:	700b      	strb	r3, [r1, #0]
    3676:	4410      	add	r0, r2
}
    3678:	b280      	uxth	r0, r0
    367a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    367c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3680:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3684:	e7f2      	b.n	366c <opcode_0x6A()+0x3c>
    3686:	bf00      	nop
    3688:	2001888c 	.word	0x2001888c
    368c:	20004950 	.word	0x20004950
    3690:	200188a3 	.word	0x200188a3
    3694:	20016418 	.word	0x20016418

00003698 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3698:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    369a:	4c16      	ldr	r4, [pc, #88]	; (36f4 <opcode_0x2A()+0x5c>)
    369c:	2100      	movs	r1, #0
    369e:	8820      	ldrh	r0, [r4, #0]
    36a0:	f7fe ff78 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    36a4:	4814      	ldr	r0, [pc, #80]	; (36f8 <opcode_0x2A()+0x60>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36a6:	4915      	ldr	r1, [pc, #84]	; (36fc <opcode_0x2A()+0x64>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    36a8:	7803      	ldrb	r3, [r0, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36aa:	f891 c000 	ldrb.w	ip, [r1]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    36ae:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36b2:	f991 e000 	ldrsb.w	lr, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    36b6:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36ba:	f1be 0f00 	cmp.w	lr, #0
    register_a = (register_a << 1) | old_carry_flag;
    36be:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36c0:	bfb4      	ite	lt
    36c2:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    36c6:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    36ca:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    36cc:	0611      	lsls	r1, r2, #24
    36ce:	d40c      	bmi.n	36ea <opcode_0x2A()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    36d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    36d4:	b95a      	cbnz	r2, 36ee <opcode_0x2A()+0x56>
    36d6:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x2A].length);
    36da:	4909      	ldr	r1, [pc, #36]	; (3700 <opcode_0x2A()+0x68>)
    36dc:	8822      	ldrh	r2, [r4, #0]
    36de:	7003      	strb	r3, [r0, #0]
    36e0:	f891 08b9 	ldrb.w	r0, [r1, #2233]	; 0x8b9
    36e4:	4410      	add	r0, r2
}
    36e6:	b280      	uxth	r0, r0
    36e8:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    36ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    36ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    36f2:	e7f2      	b.n	36da <opcode_0x2A()+0x42>
    36f4:	2001888c 	.word	0x2001888c
    36f8:	20004950 	.word	0x20004950
    36fc:	200188a3 	.word	0x200188a3
    3700:	20015418 	.word	0x20015418

00003704 <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    3704:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    3706:	4c2f      	ldr	r4, [pc, #188]	; (37c4 <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3708:	492f      	ldr	r1, [pc, #188]	; (37c8 <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    370a:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    370c:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    3710:	0716      	lsls	r6, r2, #28
    3712:	d532      	bpl.n	377a <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3714:	f002 0e01 	and.w	lr, r2, #1
    3718:	f00c 030f 	and.w	r3, ip, #15
    371c:	f000 050f 	and.w	r5, r0, #15
    3720:	4473      	add	r3, lr
    3722:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    3724:	2b09      	cmp	r3, #9
    3726:	d823      	bhi.n	3770 <Calculate_ADC(unsigned short)+0x6c>
    3728:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    372c:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    3730:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3734:	4435      	add	r5, r6
    3736:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3738:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    373c:	d838      	bhi.n	37b0 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    373e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3742:	4473      	add	r3, lr
    3744:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3746:	fa4f fc8c 	sxtb.w	ip, ip
    374a:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    374e:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    3752:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3754:	db20      	blt.n	3798 <Calculate_ADC(unsigned short)+0x94>
    3756:	f1be 0f00 	cmp.w	lr, #0
    375a:	db1a      	blt.n	3792 <Calculate_ADC(unsigned short)+0x8e>
    375c:	061d      	lsls	r5, r3, #24
    375e:	d41f      	bmi.n	37a0 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3760:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    3764:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3766:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    376c:	f7ff b9d6 	b.w	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3770:	3b0a      	subs	r3, #10
    3772:	f04f 0e10 	mov.w	lr, #16
    3776:	b29b      	uxth	r3, r3
    3778:	e7d8      	b.n	372c <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    377a:	f002 0301 	and.w	r3, r2, #1
    377e:	4403      	add	r3, r0
    3780:	4463      	add	r3, ip
    3782:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3784:	2bff      	cmp	r3, #255	; 0xff
    3786:	bf8c      	ite	hi
    3788:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    378c:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3790:	e7d9      	b.n	3746 <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    3792:	f1bc 0f00 	cmp.w	ip, #0
    3796:	dae3      	bge.n	3760 <Calculate_ADC(unsigned short)+0x5c>
    3798:	ea63 030e 	orn	r3, r3, lr
    379c:	061b      	lsls	r3, r3, #24
    379e:	d4df      	bmi.n	3760 <Calculate_ADC(unsigned short)+0x5c>
    37a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    37a4:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    37a6:	7022      	strb	r2, [r4, #0]
}
    37a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    37ac:	f7ff b9b6 	b.w	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    37b0:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    37b4:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    37b8:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    37bc:	f042 0201 	orr.w	r2, r2, #1
    37c0:	e7bf      	b.n	3742 <Calculate_ADC(unsigned short)+0x3e>
    37c2:	bf00      	nop
    37c4:	20004950 	.word	0x20004950
    37c8:	200188a3 	.word	0x200188a3

000037cc <opcode_0x69()>:
uint16_t opcode_0x69() {
    37cc:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    37ce:	4c08      	ldr	r4, [pc, #32]	; (37f0 <opcode_0x69()+0x24>)
    37d0:	2100      	movs	r1, #0
    37d2:	8820      	ldrh	r0, [r4, #0]
    37d4:	3001      	adds	r0, #1
    37d6:	b280      	uxth	r0, r0
    37d8:	f7fe fedc 	bl	2594 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    37dc:	b280      	uxth	r0, r0
    37de:	f7ff ff91 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    37e2:	4a04      	ldr	r2, [pc, #16]	; (37f4 <opcode_0x69()+0x28>)
    37e4:	8823      	ldrh	r3, [r4, #0]
    37e6:	f892 0585 	ldrb.w	r0, [r2, #1413]	; 0x585
    37ea:	4418      	add	r0, r3
} // 0x69 - ADC - Immediate - Binary
    37ec:	b280      	uxth	r0, r0
    37ee:	bd10      	pop	{r4, pc}
    37f0:	2001888c 	.word	0x2001888c
    37f4:	20016418 	.word	0x20016418

000037f8 <opcode_0x65()>:
uint16_t opcode_0x65() {
    37f8:	b510      	push	{r4, lr}
    37fa:	4c0b      	ldr	r4, [pc, #44]	; (3828 <opcode_0x65()+0x30>)
    37fc:	2100      	movs	r1, #0
    37fe:	8820      	ldrh	r0, [r4, #0]
    3800:	3001      	adds	r0, #1
    3802:	b280      	uxth	r0, r0
    3804:	f7fe fec6 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3808:	4b08      	ldr	r3, [pc, #32]	; (382c <opcode_0x65()+0x34>)
    380a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    380c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    380e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3810:	f7fe fec0 	bl	2594 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_ZeroPage());
    3814:	b280      	uxth	r0, r0
    3816:	f7ff ff75 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    381a:	4a05      	ldr	r2, [pc, #20]	; (3830 <opcode_0x65()+0x38>)
    381c:	8823      	ldrh	r3, [r4, #0]
    381e:	f892 04b5 	ldrb.w	r0, [r2, #1205]	; 0x4b5
    3822:	4418      	add	r0, r3
} // 0x65 - ADC - ZeroPage
    3824:	b280      	uxth	r0, r0
    3826:	bd10      	pop	{r4, pc}
    3828:	2001888c 	.word	0x2001888c
    382c:	2001888a 	.word	0x2001888a
    3830:	20016418 	.word	0x20016418

00003834 <opcode_0x75()>:
uint16_t opcode_0x75() {
    3834:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_ZeroPage_X());
    3836:	f7ff f9a5 	bl	2b84 <Fetch_ZeroPage_X()>
    383a:	b280      	uxth	r0, r0
    383c:	f7ff ff62 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    3840:	4a03      	ldr	r2, [pc, #12]	; (3850 <opcode_0x75()+0x1c>)
    3842:	4b04      	ldr	r3, [pc, #16]	; (3854 <opcode_0x75()+0x20>)
    3844:	f892 07f5 	ldrb.w	r0, [r2, #2037]	; 0x7f5
    3848:	881b      	ldrh	r3, [r3, #0]
    384a:	4418      	add	r0, r3
} // 0x75 - ADC - ZeroPage , X
    384c:	b280      	uxth	r0, r0
    384e:	bd08      	pop	{r3, pc}
    3850:	20016418 	.word	0x20016418
    3854:	2001888c 	.word	0x2001888c

00003858 <opcode_0x6D()>:
uint16_t opcode_0x6D() {
    3858:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute());
    385a:	f7ff f9d3 	bl	2c04 <Fetch_Absolute()>
    385e:	b280      	uxth	r0, r0
    3860:	f7ff ff50 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    3864:	4a03      	ldr	r2, [pc, #12]	; (3874 <opcode_0x6D()+0x1c>)
    3866:	4b04      	ldr	r3, [pc, #16]	; (3878 <opcode_0x6D()+0x20>)
    3868:	f892 0655 	ldrb.w	r0, [r2, #1621]	; 0x655
    386c:	881b      	ldrh	r3, [r3, #0]
    386e:	4418      	add	r0, r3
} // 0x6D - ADC - Absolute
    3870:	b280      	uxth	r0, r0
    3872:	bd08      	pop	{r3, pc}
    3874:	20016418 	.word	0x20016418
    3878:	2001888c 	.word	0x2001888c

0000387c <opcode_0x7D()>:
uint16_t opcode_0x7D() {
    387c:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_X(1));
    387e:	2001      	movs	r0, #1
    3880:	f7ff f9dc 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    3884:	b280      	uxth	r0, r0
    3886:	f7ff ff3d 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    388a:	4a04      	ldr	r2, [pc, #16]	; (389c <opcode_0x7D()+0x20>)
    388c:	4b04      	ldr	r3, [pc, #16]	; (38a0 <opcode_0x7D()+0x24>)
    388e:	f892 0995 	ldrb.w	r0, [r2, #2453]	; 0x995
    3892:	881b      	ldrh	r3, [r3, #0]
    3894:	4418      	add	r0, r3
} // 0x7D - ADC - Absolute , X
    3896:	b280      	uxth	r0, r0
    3898:	bd08      	pop	{r3, pc}
    389a:	bf00      	nop
    389c:	20016418 	.word	0x20016418
    38a0:	2001888c 	.word	0x2001888c

000038a4 <opcode_0x79()>:
uint16_t opcode_0x79() {
    38a4:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_Y(1));
    38a6:	2001      	movs	r0, #1
    38a8:	f7ff f9f8 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    38ac:	b280      	uxth	r0, r0
    38ae:	f7ff ff29 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    38b2:	4a04      	ldr	r2, [pc, #16]	; (38c4 <opcode_0x79()+0x20>)
    38b4:	4b04      	ldr	r3, [pc, #16]	; (38c8 <opcode_0x79()+0x24>)
    38b6:	f892 08c5 	ldrb.w	r0, [r2, #2245]	; 0x8c5
    38ba:	881b      	ldrh	r3, [r3, #0]
    38bc:	4418      	add	r0, r3
} // 0x79 - ADC - Absolute , Y
    38be:	b280      	uxth	r0, r0
    38c0:	bd08      	pop	{r3, pc}
    38c2:	bf00      	nop
    38c4:	20016418 	.word	0x20016418
    38c8:	2001888c 	.word	0x2001888c

000038cc <opcode_0x61()>:
uint16_t opcode_0x61() {
    38cc:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    38ce:	f7ff fa15 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    38d2:	b280      	uxth	r0, r0
    38d4:	f7ff ff16 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    38d8:	4a03      	ldr	r2, [pc, #12]	; (38e8 <opcode_0x61()+0x1c>)
    38da:	4b04      	ldr	r3, [pc, #16]	; (38ec <opcode_0x61()+0x20>)
    38dc:	f892 03e5 	ldrb.w	r0, [r2, #997]	; 0x3e5
    38e0:	881b      	ldrh	r3, [r3, #0]
    38e2:	4418      	add	r0, r3
} // 0x61 - ADC - Indexed Indirect X
    38e4:	b280      	uxth	r0, r0
    38e6:	bd08      	pop	{r3, pc}
    38e8:	20016418 	.word	0x20016418
    38ec:	2001888c 	.word	0x2001888c

000038f0 <opcode_0x71()>:
uint16_t opcode_0x71() {
    38f0:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    38f2:	2001      	movs	r0, #1
    38f4:	f7ff fa2c 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    38f8:	b280      	uxth	r0, r0
    38fa:	f7ff ff03 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    38fe:	4a04      	ldr	r2, [pc, #16]	; (3910 <opcode_0x71()+0x20>)
    3900:	4b04      	ldr	r3, [pc, #16]	; (3914 <opcode_0x71()+0x24>)
    3902:	f892 0725 	ldrb.w	r0, [r2, #1829]	; 0x725
    3906:	881b      	ldrh	r3, [r3, #0]
    3908:	4418      	add	r0, r3
} // 0x71 - ADC - Indirect Indexed  Y
    390a:	b280      	uxth	r0, r0
    390c:	bd08      	pop	{r3, pc}
    390e:	bf00      	nop
    3910:	20016418 	.word	0x20016418
    3914:	2001888c 	.word	0x2001888c

00003918 <Calculate_SBC(unsigned short)>:

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    3918:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    391a:	4c32      	ldr	r4, [pc, #200]	; (39e4 <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    391c:	4932      	ldr	r1, [pc, #200]	; (39e8 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    391e:	7823      	ldrb	r3, [r4, #0]
    3920:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    3922:	071e      	lsls	r6, r3, #28
    3924:	f002 0201 	and.w	r2, r2, #1
    3928:	d539      	bpl.n	399e <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    392a:	f000 0c0f 	and.w	ip, r0, #15
    392e:	f891 e000 	ldrb.w	lr, [r1]
    3932:	4462      	add	r2, ip
    3934:	f00e 0c0f 	and.w	ip, lr, #15
    3938:	ebac 0c02 	sub.w	ip, ip, r2
    393c:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3940:	f1bc 0f09 	cmp.w	ip, #9
    3944:	d825      	bhi.n	3992 <Calculate_SBC(unsigned short)+0x7a>
    3946:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3948:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    394c:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3950:	1b92      	subs	r2, r2, r6
    3952:	1b52      	subs	r2, r2, r5
    3954:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3956:	2a90      	cmp	r2, #144	; 0x90
    3958:	d83f      	bhi.n	39da <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    395a:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    395e:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3962:	4494      	add	ip, r2
    3964:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3968:	fa4f fe8e 	sxtb.w	lr, lr
    396c:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    396e:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    3972:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3976:	db24      	blt.n	39c2 <Calculate_SBC(unsigned short)+0xaa>
    3978:	2a00      	cmp	r2, #0
    397a:	da1f      	bge.n	39bc <Calculate_SBC(unsigned short)+0xa4>
    397c:	f01c 0f80 	tst.w	ip, #128	; 0x80
    3980:	d123      	bne.n	39ca <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3982:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3986:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3988:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    398a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    398e:	f7ff b8c5 	b.w	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    3992:	f10c 0c0a 	add.w	ip, ip, #10
    3996:	2510      	movs	r5, #16
    3998:	fa1f fc8c 	uxth.w	ip, ip
    399c:	e7d4      	b.n	3948 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    399e:	f891 e000 	ldrb.w	lr, [r1]
    39a2:	ebae 0c00 	sub.w	ip, lr, r0
    39a6:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    39aa:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    39ac:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    39b0:	bf54      	ite	pl
    39b2:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    39b6:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    39ba:	e7d5      	b.n	3968 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    39bc:	f1be 0f00 	cmp.w	lr, #0
    39c0:	dadf      	bge.n	3982 <Calculate_SBC(unsigned short)+0x6a>
    39c2:	ea42 020c 	orr.w	r2, r2, ip
    39c6:	0612      	lsls	r2, r2, #24
    39c8:	d4db      	bmi.n	3982 <Calculate_SBC(unsigned short)+0x6a>
    39ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    39ce:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    39d0:	7023      	strb	r3, [r4, #0]
}
    39d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    39d6:	f7ff b8a1 	b.w	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    39da:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    39dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    39e0:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    39e2:	e7be      	b.n	3962 <Calculate_SBC(unsigned short)+0x4a>
    39e4:	20004950 	.word	0x20004950
    39e8:	200188a3 	.word	0x200188a3

000039ec <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    39ec:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    39ee:	4c08      	ldr	r4, [pc, #32]	; (3a10 <opcode_0xE9()+0x24>)
    39f0:	2100      	movs	r1, #0
    39f2:	8820      	ldrh	r0, [r4, #0]
    39f4:	3001      	adds	r0, #1
    39f6:	b280      	uxth	r0, r0
    39f8:	f7fe fdcc 	bl	2594 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    39fc:	b280      	uxth	r0, r0
    39fe:	f7ff ff8b 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    3a02:	4a04      	ldr	r2, [pc, #16]	; (3a14 <opcode_0xE9()+0x28>)
    3a04:	8823      	ldrh	r3, [r4, #0]
    3a06:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3a0a:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3a0c:	b280      	uxth	r0, r0
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	2001888c 	.word	0x2001888c
    3a14:	20017418 	.word	0x20017418

00003a18 <opcode_0xE5()>:
uint16_t opcode_0xE5() {
    3a18:	b510      	push	{r4, lr}
    3a1a:	4c0b      	ldr	r4, [pc, #44]	; (3a48 <opcode_0xE5()+0x30>)
    3a1c:	2100      	movs	r1, #0
    3a1e:	8820      	ldrh	r0, [r4, #0]
    3a20:	3001      	adds	r0, #1
    3a22:	b280      	uxth	r0, r0
    3a24:	f7fe fdb6 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3a28:	4b08      	ldr	r3, [pc, #32]	; (3a4c <opcode_0xE5()+0x34>)
    3a2a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3a2c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3a2e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3a30:	f7fe fdb0 	bl	2594 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_ZeroPage());
    3a34:	b280      	uxth	r0, r0
    3a36:	f7ff ff6f 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    3a3a:	4a05      	ldr	r2, [pc, #20]	; (3a50 <opcode_0xE5()+0x38>)
    3a3c:	8823      	ldrh	r3, [r4, #0]
    3a3e:	f892 0eb5 	ldrb.w	r0, [r2, #3765]	; 0xeb5
    3a42:	4418      	add	r0, r3
} // 0xE5 - SBC - ZeroPage
    3a44:	b280      	uxth	r0, r0
    3a46:	bd10      	pop	{r4, pc}
    3a48:	2001888c 	.word	0x2001888c
    3a4c:	2001888a 	.word	0x2001888a
    3a50:	20017418 	.word	0x20017418

00003a54 <opcode_0xF5()>:
uint16_t opcode_0xF5() {
    3a54:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_ZeroPage_X());
    3a56:	f7ff f895 	bl	2b84 <Fetch_ZeroPage_X()>
    3a5a:	b280      	uxth	r0, r0
    3a5c:	f7ff ff5c 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    3a60:	4a03      	ldr	r2, [pc, #12]	; (3a70 <opcode_0xF5()+0x1c>)
    3a62:	4b04      	ldr	r3, [pc, #16]	; (3a74 <opcode_0xF5()+0x20>)
    3a64:	f892 01f5 	ldrb.w	r0, [r2, #501]	; 0x1f5
    3a68:	881b      	ldrh	r3, [r3, #0]
    3a6a:	4418      	add	r0, r3
} // 0xF5 - SBC - ZeroPage , X
    3a6c:	b280      	uxth	r0, r0
    3a6e:	bd08      	pop	{r3, pc}
    3a70:	20018418 	.word	0x20018418
    3a74:	2001888c 	.word	0x2001888c

00003a78 <opcode_0xED()>:
uint16_t opcode_0xED() {
    3a78:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute());
    3a7a:	f7ff f8c3 	bl	2c04 <Fetch_Absolute()>
    3a7e:	b280      	uxth	r0, r0
    3a80:	f7ff ff4a 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    3a84:	4a03      	ldr	r2, [pc, #12]	; (3a94 <opcode_0xED()+0x1c>)
    3a86:	4b04      	ldr	r3, [pc, #16]	; (3a98 <opcode_0xED()+0x20>)
    3a88:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
    3a8c:	881b      	ldrh	r3, [r3, #0]
    3a8e:	4418      	add	r0, r3
} // 0xED - SBC - Absolute
    3a90:	b280      	uxth	r0, r0
    3a92:	bd08      	pop	{r3, pc}
    3a94:	20018418 	.word	0x20018418
    3a98:	2001888c 	.word	0x2001888c

00003a9c <opcode_0xFD()>:
uint16_t opcode_0xFD() {
    3a9c:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_X(1));
    3a9e:	2001      	movs	r0, #1
    3aa0:	f7ff f8cc 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    3aa4:	b280      	uxth	r0, r0
    3aa6:	f7ff ff37 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    3aaa:	4a04      	ldr	r2, [pc, #16]	; (3abc <opcode_0xFD()+0x20>)
    3aac:	4b04      	ldr	r3, [pc, #16]	; (3ac0 <opcode_0xFD()+0x24>)
    3aae:	f892 0395 	ldrb.w	r0, [r2, #917]	; 0x395
    3ab2:	881b      	ldrh	r3, [r3, #0]
    3ab4:	4418      	add	r0, r3
} // 0xFD - SBC - Absolute , X
    3ab6:	b280      	uxth	r0, r0
    3ab8:	bd08      	pop	{r3, pc}
    3aba:	bf00      	nop
    3abc:	20018418 	.word	0x20018418
    3ac0:	2001888c 	.word	0x2001888c

00003ac4 <opcode_0xF9()>:
uint16_t opcode_0xF9() {
    3ac4:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_Y(1));
    3ac6:	2001      	movs	r0, #1
    3ac8:	f7ff f8e8 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    3acc:	b280      	uxth	r0, r0
    3ace:	f7ff ff23 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    3ad2:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <opcode_0xF9()+0x20>)
    3ad4:	4b04      	ldr	r3, [pc, #16]	; (3ae8 <opcode_0xF9()+0x24>)
    3ad6:	f892 02c5 	ldrb.w	r0, [r2, #709]	; 0x2c5
    3ada:	881b      	ldrh	r3, [r3, #0]
    3adc:	4418      	add	r0, r3
} // 0xF9 - SBC - Absolute , Y
    3ade:	b280      	uxth	r0, r0
    3ae0:	bd08      	pop	{r3, pc}
    3ae2:	bf00      	nop
    3ae4:	20018418 	.word	0x20018418
    3ae8:	2001888c 	.word	0x2001888c

00003aec <opcode_0xE1()>:
uint16_t opcode_0xE1() {
    3aec:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    3aee:	f7ff f905 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    3af2:	b280      	uxth	r0, r0
    3af4:	f7ff ff10 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    3af8:	4a03      	ldr	r2, [pc, #12]	; (3b08 <opcode_0xE1()+0x1c>)
    3afa:	4b04      	ldr	r3, [pc, #16]	; (3b0c <opcode_0xE1()+0x20>)
    3afc:	f892 0de5 	ldrb.w	r0, [r2, #3557]	; 0xde5
    3b00:	881b      	ldrh	r3, [r3, #0]
    3b02:	4418      	add	r0, r3
} // 0xE1 - SBC - Indexed Indirect X
    3b04:	b280      	uxth	r0, r0
    3b06:	bd08      	pop	{r3, pc}
    3b08:	20017418 	.word	0x20017418
    3b0c:	2001888c 	.word	0x2001888c

00003b10 <opcode_0xF1()>:
uint16_t opcode_0xF1() {
    3b10:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    3b12:	2001      	movs	r0, #1
    3b14:	f7ff f91c 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    3b18:	b280      	uxth	r0, r0
    3b1a:	f7ff fefd 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    3b1e:	4a04      	ldr	r2, [pc, #16]	; (3b30 <opcode_0xF1()+0x20>)
    3b20:	4b04      	ldr	r3, [pc, #16]	; (3b34 <opcode_0xF1()+0x24>)
    3b22:	f892 0125 	ldrb.w	r0, [r2, #293]	; 0x125
    3b26:	881b      	ldrh	r3, [r3, #0]
    3b28:	4418      	add	r0, r3
} // 0xF1 - SBC - Indirect Indexed  Y
    3b2a:	b280      	uxth	r0, r0
    3b2c:	bd08      	pop	{r3, pc}
    3b2e:	bf00      	nop
    3b30:	20018418 	.word	0x20018418
    3b34:	2001888c 	.word	0x2001888c

00003b38 <opcode_0xEA()>:

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3b38:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3b3a:	4c07      	ldr	r4, [pc, #28]	; (3b58 <opcode_0xEA()+0x20>)
    3b3c:	2100      	movs	r1, #0
    3b3e:	8820      	ldrh	r0, [r4, #0]
    3b40:	3001      	adds	r0, #1
    3b42:	b280      	uxth	r0, r0
    3b44:	f7fe fd26 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3b48:	4a04      	ldr	r2, [pc, #16]	; (3b5c <opcode_0xEA()+0x24>)
    3b4a:	8823      	ldrh	r3, [r4, #0]
    3b4c:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3b50:	4418      	add	r0, r3
} // 0xEA - NOP   
    3b52:	b280      	uxth	r0, r0
    3b54:	bd10      	pop	{r4, pc}
    3b56:	bf00      	nop
    3b58:	2001888c 	.word	0x2001888c
    3b5c:	20017418 	.word	0x20017418

00003b60 <opcode_0x18()>:
uint16_t opcode_0x18() {
    3b60:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3b62:	4c09      	ldr	r4, [pc, #36]	; (3b88 <opcode_0x18()+0x28>)
    3b64:	2100      	movs	r1, #0
    3b66:	8820      	ldrh	r0, [r4, #0]
    3b68:	3001      	adds	r0, #1
    3b6a:	b280      	uxth	r0, r0
    3b6c:	f7fe fd12 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFE;
    3b70:	4a06      	ldr	r2, [pc, #24]	; (3b8c <opcode_0x18()+0x2c>)
    return(register_pc + opcode_info[0x18].length);
    3b72:	4807      	ldr	r0, [pc, #28]	; (3b90 <opcode_0x18()+0x30>)
    register_flags = register_flags & 0xFE;
    3b74:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    3b76:	8821      	ldrh	r1, [r4, #0]
    3b78:	f890 0511 	ldrb.w	r0, [r0, #1297]	; 0x511
    register_flags = register_flags & 0xFE;
    3b7c:	f023 0301 	bic.w	r3, r3, #1
    return(register_pc + opcode_info[0x18].length);
    3b80:	4408      	add	r0, r1
    register_flags = register_flags & 0xFE;
    3b82:	7013      	strb	r3, [r2, #0]
} // 0x18 - CLC - Clear Carry Flag  
    3b84:	b280      	uxth	r0, r0
    3b86:	bd10      	pop	{r4, pc}
    3b88:	2001888c 	.word	0x2001888c
    3b8c:	20004950 	.word	0x20004950
    3b90:	20015418 	.word	0x20015418

00003b94 <opcode_0xD8()>:
uint16_t opcode_0xD8() {
    3b94:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3b96:	4c09      	ldr	r4, [pc, #36]	; (3bbc <opcode_0xD8()+0x28>)
    3b98:	2100      	movs	r1, #0
    3b9a:	8820      	ldrh	r0, [r4, #0]
    3b9c:	3001      	adds	r0, #1
    3b9e:	b280      	uxth	r0, r0
    3ba0:	f7fe fcf8 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xF7;
    3ba4:	4a06      	ldr	r2, [pc, #24]	; (3bc0 <opcode_0xD8()+0x2c>)
    return(register_pc + opcode_info[0xD8].length);
    3ba6:	4807      	ldr	r0, [pc, #28]	; (3bc4 <opcode_0xD8()+0x30>)
    register_flags = register_flags & 0xF7;
    3ba8:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    3baa:	8821      	ldrh	r1, [r4, #0]
    3bac:	f890 0c11 	ldrb.w	r0, [r0, #3089]	; 0xc11
    register_flags = register_flags & 0xF7;
    3bb0:	f023 0308 	bic.w	r3, r3, #8
    return(register_pc + opcode_info[0xD8].length);
    3bb4:	4408      	add	r0, r1
    register_flags = register_flags & 0xF7;
    3bb6:	7013      	strb	r3, [r2, #0]
} // 0xD8 - CLD - Clear Decimal Mode  
    3bb8:	b280      	uxth	r0, r0
    3bba:	bd10      	pop	{r4, pc}
    3bbc:	2001888c 	.word	0x2001888c
    3bc0:	20004950 	.word	0x20004950
    3bc4:	20017418 	.word	0x20017418

00003bc8 <opcode_0x58()>:
uint16_t opcode_0x58() {
    3bc8:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3bca:	4c09      	ldr	r4, [pc, #36]	; (3bf0 <opcode_0x58()+0x28>)
    3bcc:	2100      	movs	r1, #0
    3bce:	8820      	ldrh	r0, [r4, #0]
    3bd0:	3001      	adds	r0, #1
    3bd2:	b280      	uxth	r0, r0
    3bd4:	f7fe fcde 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFB;
    3bd8:	4a06      	ldr	r2, [pc, #24]	; (3bf4 <opcode_0x58()+0x2c>)
    return(register_pc + opcode_info[0x58].length);
    3bda:	4807      	ldr	r0, [pc, #28]	; (3bf8 <opcode_0x58()+0x30>)
    register_flags = register_flags & 0xFB;
    3bdc:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    3bde:	8821      	ldrh	r1, [r4, #0]
    3be0:	f890 0211 	ldrb.w	r0, [r0, #529]	; 0x211
    register_flags = register_flags & 0xFB;
    3be4:	f023 0304 	bic.w	r3, r3, #4
    return(register_pc + opcode_info[0x58].length);
    3be8:	4408      	add	r0, r1
    register_flags = register_flags & 0xFB;
    3bea:	7013      	strb	r3, [r2, #0]
} // 0x58 - CLI - Clear Interrupt Flag  
    3bec:	b280      	uxth	r0, r0
    3bee:	bd10      	pop	{r4, pc}
    3bf0:	2001888c 	.word	0x2001888c
    3bf4:	20004950 	.word	0x20004950
    3bf8:	20016418 	.word	0x20016418

00003bfc <opcode_0xB8()>:
uint16_t opcode_0xB8() {
    3bfc:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3bfe:	4c09      	ldr	r4, [pc, #36]	; (3c24 <opcode_0xB8()+0x28>)
    3c00:	2100      	movs	r1, #0
    3c02:	8820      	ldrh	r0, [r4, #0]
    3c04:	3001      	adds	r0, #1
    3c06:	b280      	uxth	r0, r0
    3c08:	f7fe fcc4 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xBF;
    3c0c:	4a06      	ldr	r2, [pc, #24]	; (3c28 <opcode_0xB8()+0x2c>)
    return(register_pc + opcode_info[0xB8].length);
    3c0e:	4807      	ldr	r0, [pc, #28]	; (3c2c <opcode_0xB8()+0x30>)
    register_flags = register_flags & 0xBF;
    3c10:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    3c12:	8821      	ldrh	r1, [r4, #0]
    3c14:	f890 0591 	ldrb.w	r0, [r0, #1425]	; 0x591
    register_flags = register_flags & 0xBF;
    3c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    return(register_pc + opcode_info[0xB8].length);
    3c1c:	4408      	add	r0, r1
    register_flags = register_flags & 0xBF;
    3c1e:	7013      	strb	r3, [r2, #0]
} // 0xB8 - CLV - Clear Overflow Flag  
    3c20:	b280      	uxth	r0, r0
    3c22:	bd10      	pop	{r4, pc}
    3c24:	2001888c 	.word	0x2001888c
    3c28:	20004950 	.word	0x20004950
    3c2c:	20017418 	.word	0x20017418

00003c30 <opcode_0x38()>:
uint16_t opcode_0x38() {
    3c30:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c32:	4c09      	ldr	r4, [pc, #36]	; (3c58 <opcode_0x38()+0x28>)
    3c34:	2100      	movs	r1, #0
    3c36:	8820      	ldrh	r0, [r4, #0]
    3c38:	3001      	adds	r0, #1
    3c3a:	b280      	uxth	r0, r0
    3c3c:	f7fe fcaa 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x01;
    3c40:	4a06      	ldr	r2, [pc, #24]	; (3c5c <opcode_0x38()+0x2c>)
    return(register_pc + opcode_info[0x38].length);
    3c42:	4807      	ldr	r0, [pc, #28]	; (3c60 <opcode_0x38()+0x30>)
    register_flags = register_flags | 0x01;
    3c44:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    3c46:	8821      	ldrh	r1, [r4, #0]
    3c48:	f890 0b91 	ldrb.w	r0, [r0, #2961]	; 0xb91
    register_flags = register_flags | 0x01;
    3c4c:	f043 0301 	orr.w	r3, r3, #1
    return(register_pc + opcode_info[0x38].length);
    3c50:	4408      	add	r0, r1
    register_flags = register_flags | 0x01;
    3c52:	7013      	strb	r3, [r2, #0]
} // 0x38 - SEC - Set Carry Flag  
    3c54:	b280      	uxth	r0, r0
    3c56:	bd10      	pop	{r4, pc}
    3c58:	2001888c 	.word	0x2001888c
    3c5c:	20004950 	.word	0x20004950
    3c60:	20015418 	.word	0x20015418

00003c64 <opcode_0x78()>:
uint16_t opcode_0x78() {
    3c64:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c66:	4c09      	ldr	r4, [pc, #36]	; (3c8c <opcode_0x78()+0x28>)
    3c68:	2100      	movs	r1, #0
    3c6a:	8820      	ldrh	r0, [r4, #0]
    3c6c:	3001      	adds	r0, #1
    3c6e:	b280      	uxth	r0, r0
    3c70:	f7fe fc90 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x04;
    3c74:	4a06      	ldr	r2, [pc, #24]	; (3c90 <opcode_0x78()+0x2c>)
    return(register_pc + opcode_info[0x78].length);
    3c76:	4807      	ldr	r0, [pc, #28]	; (3c94 <opcode_0x78()+0x30>)
    register_flags = register_flags | 0x04;
    3c78:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    3c7a:	8821      	ldrh	r1, [r4, #0]
    3c7c:	f890 0891 	ldrb.w	r0, [r0, #2193]	; 0x891
    register_flags = register_flags | 0x04;
    3c80:	f043 0304 	orr.w	r3, r3, #4
    return(register_pc + opcode_info[0x78].length);
    3c84:	4408      	add	r0, r1
    register_flags = register_flags | 0x04;
    3c86:	7013      	strb	r3, [r2, #0]
} // 0x78 - SEI - Set Interrupt Flag  
    3c88:	b280      	uxth	r0, r0
    3c8a:	bd10      	pop	{r4, pc}
    3c8c:	2001888c 	.word	0x2001888c
    3c90:	20004950 	.word	0x20004950
    3c94:	20016418 	.word	0x20016418

00003c98 <opcode_0xF8()>:
uint16_t opcode_0xF8() {
    3c98:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c9a:	4c09      	ldr	r4, [pc, #36]	; (3cc0 <opcode_0xF8()+0x28>)
    3c9c:	2100      	movs	r1, #0
    3c9e:	8820      	ldrh	r0, [r4, #0]
    3ca0:	3001      	adds	r0, #1
    3ca2:	b280      	uxth	r0, r0
    3ca4:	f7fe fc76 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x08;
    3ca8:	4a06      	ldr	r2, [pc, #24]	; (3cc4 <opcode_0xF8()+0x2c>)
    return(register_pc + opcode_info[0xF8].length);
    3caa:	4807      	ldr	r0, [pc, #28]	; (3cc8 <opcode_0xF8()+0x30>)
    register_flags = register_flags | 0x08;
    3cac:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    3cae:	8821      	ldrh	r1, [r4, #0]
    3cb0:	f890 0291 	ldrb.w	r0, [r0, #657]	; 0x291
    register_flags = register_flags | 0x08;
    3cb4:	f043 0308 	orr.w	r3, r3, #8
    return(register_pc + opcode_info[0xF8].length);
    3cb8:	4408      	add	r0, r1
    register_flags = register_flags | 0x08;
    3cba:	7013      	strb	r3, [r2, #0]
} // 0xF8 - SED - Set Decimal Mode  
    3cbc:	b280      	uxth	r0, r0
    3cbe:	bd10      	pop	{r4, pc}
    3cc0:	2001888c 	.word	0x2001888c
    3cc4:	20004950 	.word	0x20004950
    3cc8:	20018418 	.word	0x20018418

00003ccc <opcode_0xCA()>:

// -------------------------------------------------
// Increment/Decrements
// -------------------------------------------------
uint16_t opcode_0xCA() {
    3ccc:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3cce:	4c11      	ldr	r4, [pc, #68]	; (3d14 <opcode_0xCA()+0x48>)
    3cd0:	2100      	movs	r1, #0
    3cd2:	8820      	ldrh	r0, [r4, #0]
    3cd4:	3001      	adds	r0, #1
    3cd6:	b280      	uxth	r0, r0
    3cd8:	f7fe fc5c 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x - 1;
    3cdc:	4a0e      	ldr	r2, [pc, #56]	; (3d18 <opcode_0xCA()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3cde:	490f      	ldr	r1, [pc, #60]	; (3d1c <opcode_0xCA()+0x50>)
    3ce0:	7813      	ldrb	r3, [r2, #0]
    3ce2:	3b01      	subs	r3, #1
    3ce4:	b2db      	uxtb	r3, r3
    3ce6:	0618      	lsls	r0, r3, #24
    3ce8:	7013      	strb	r3, [r2, #0]
    3cea:	780a      	ldrb	r2, [r1, #0]
    3cec:	d40d      	bmi.n	3d0a <opcode_0xCA()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3cee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3cf2:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3cf4:	b95b      	cbnz	r3, 3d0e <opcode_0xCA()+0x42>
    3cf6:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xCA].length);
    3cfa:	4809      	ldr	r0, [pc, #36]	; (3d20 <opcode_0xCA()+0x54>)
    3cfc:	8823      	ldrh	r3, [r4, #0]
    3cfe:	f890 0939 	ldrb.w	r0, [r0, #2361]	; 0x939
    3d02:	700a      	strb	r2, [r1, #0]
    3d04:	4418      	add	r0, r3
} // 0xCA - DEX - Decrement X  
    3d06:	b280      	uxth	r0, r0
    3d08:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3d0e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3d12:	e7f2      	b.n	3cfa <opcode_0xCA()+0x2e>
    3d14:	2001888c 	.word	0x2001888c
    3d18:	200188a4 	.word	0x200188a4
    3d1c:	20004950 	.word	0x20004950
    3d20:	20017418 	.word	0x20017418

00003d24 <opcode_0x88()>:
uint16_t opcode_0x88() {
    3d24:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d26:	4c11      	ldr	r4, [pc, #68]	; (3d6c <opcode_0x88()+0x48>)
    3d28:	2100      	movs	r1, #0
    3d2a:	8820      	ldrh	r0, [r4, #0]
    3d2c:	3001      	adds	r0, #1
    3d2e:	b280      	uxth	r0, r0
    3d30:	f7fe fc30 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y - 1;
    3d34:	4a0e      	ldr	r2, [pc, #56]	; (3d70 <opcode_0x88()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3d36:	490f      	ldr	r1, [pc, #60]	; (3d74 <opcode_0x88()+0x50>)
    3d38:	7813      	ldrb	r3, [r2, #0]
    3d3a:	3b01      	subs	r3, #1
    3d3c:	b2db      	uxtb	r3, r3
    3d3e:	0618      	lsls	r0, r3, #24
    3d40:	7013      	strb	r3, [r2, #0]
    3d42:	780a      	ldrb	r2, [r1, #0]
    3d44:	d40d      	bmi.n	3d62 <opcode_0x88()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3d46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3d4a:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3d4c:	b95b      	cbnz	r3, 3d66 <opcode_0x88()+0x42>
    3d4e:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0x88].length);
    3d52:	4809      	ldr	r0, [pc, #36]	; (3d78 <opcode_0x88()+0x54>)
    3d54:	8823      	ldrh	r3, [r4, #0]
    3d56:	f890 0bd1 	ldrb.w	r0, [r0, #3025]	; 0xbd1
    3d5a:	700a      	strb	r2, [r1, #0]
    3d5c:	4418      	add	r0, r3
} // 0x88 - DEY - Decrement Y  
    3d5e:	b280      	uxth	r0, r0
    3d60:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3d66:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3d6a:	e7f2      	b.n	3d52 <opcode_0x88()+0x2e>
    3d6c:	2001888c 	.word	0x2001888c
    3d70:	200188a5 	.word	0x200188a5
    3d74:	20004950 	.word	0x20004950
    3d78:	20016418 	.word	0x20016418

00003d7c <opcode_0xE8()>:
uint16_t opcode_0xE8() {
    3d7c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d7e:	4c11      	ldr	r4, [pc, #68]	; (3dc4 <opcode_0xE8()+0x48>)
    3d80:	2100      	movs	r1, #0
    3d82:	8820      	ldrh	r0, [r4, #0]
    3d84:	3001      	adds	r0, #1
    3d86:	b280      	uxth	r0, r0
    3d88:	f7fe fc04 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x + 1;
    3d8c:	4a0e      	ldr	r2, [pc, #56]	; (3dc8 <opcode_0xE8()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3d8e:	490f      	ldr	r1, [pc, #60]	; (3dcc <opcode_0xE8()+0x50>)
    3d90:	7813      	ldrb	r3, [r2, #0]
    3d92:	3301      	adds	r3, #1
    3d94:	b2db      	uxtb	r3, r3
    3d96:	0618      	lsls	r0, r3, #24
    3d98:	7013      	strb	r3, [r2, #0]
    3d9a:	780a      	ldrb	r2, [r1, #0]
    3d9c:	d40d      	bmi.n	3dba <opcode_0xE8()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3d9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3da2:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3da4:	b95b      	cbnz	r3, 3dbe <opcode_0xE8()+0x42>
    3da6:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xE8].length);
    3daa:	4809      	ldr	r0, [pc, #36]	; (3dd0 <opcode_0xE8()+0x54>)
    3dac:	8823      	ldrh	r3, [r4, #0]
    3dae:	f890 0f51 	ldrb.w	r0, [r0, #3921]	; 0xf51
    3db2:	700a      	strb	r2, [r1, #0]
    3db4:	4418      	add	r0, r3
} // 0xE8 - INX - Increment X  
    3db6:	b280      	uxth	r0, r0
    3db8:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3dbe:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3dc2:	e7f2      	b.n	3daa <opcode_0xE8()+0x2e>
    3dc4:	2001888c 	.word	0x2001888c
    3dc8:	200188a4 	.word	0x200188a4
    3dcc:	20004950 	.word	0x20004950
    3dd0:	20017418 	.word	0x20017418

00003dd4 <opcode_0xC8()>:
uint16_t opcode_0xC8() {
    3dd4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3dd6:	4c11      	ldr	r4, [pc, #68]	; (3e1c <opcode_0xC8()+0x48>)
    3dd8:	2100      	movs	r1, #0
    3dda:	8820      	ldrh	r0, [r4, #0]
    3ddc:	3001      	adds	r0, #1
    3dde:	b280      	uxth	r0, r0
    3de0:	f7fe fbd8 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y + 1;
    3de4:	4a0e      	ldr	r2, [pc, #56]	; (3e20 <opcode_0xC8()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3de6:	490f      	ldr	r1, [pc, #60]	; (3e24 <opcode_0xC8()+0x50>)
    3de8:	7813      	ldrb	r3, [r2, #0]
    3dea:	3301      	adds	r3, #1
    3dec:	b2db      	uxtb	r3, r3
    3dee:	0618      	lsls	r0, r3, #24
    3df0:	7013      	strb	r3, [r2, #0]
    3df2:	780a      	ldrb	r2, [r1, #0]
    3df4:	d40d      	bmi.n	3e12 <opcode_0xC8()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3df6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3dfa:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3dfc:	b95b      	cbnz	r3, 3e16 <opcode_0xC8()+0x42>
    3dfe:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xC8].length);
    3e02:	4809      	ldr	r0, [pc, #36]	; (3e28 <opcode_0xC8()+0x54>)
    3e04:	8823      	ldrh	r3, [r4, #0]
    3e06:	f890 08d1 	ldrb.w	r0, [r0, #2257]	; 0x8d1
    3e0a:	700a      	strb	r2, [r1, #0]
    3e0c:	4418      	add	r0, r3
} // 0xC8 - INY - Increment Y  
    3e0e:	b280      	uxth	r0, r0
    3e10:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3e16:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3e1a:	e7f2      	b.n	3e02 <opcode_0xC8()+0x2e>
    3e1c:	2001888c 	.word	0x2001888c
    3e20:	200188a5 	.word	0x200188a5
    3e24:	20004950 	.word	0x20004950
    3e28:	20017418 	.word	0x20017418

00003e2c <opcode_0xAA()>:

// -------------------------------------------------
// Transfers
// -------------------------------------------------
uint16_t opcode_0xAA() {
    3e2c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3e2e:	4c11      	ldr	r4, [pc, #68]	; (3e74 <opcode_0xAA()+0x48>)
    3e30:	2100      	movs	r1, #0
    3e32:	8820      	ldrh	r0, [r4, #0]
    3e34:	3001      	adds	r0, #1
    3e36:	b280      	uxth	r0, r0
    3e38:	f7fe fbac 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_a;
    3e3c:	4a0e      	ldr	r2, [pc, #56]	; (3e78 <opcode_0xAA()+0x4c>)
    3e3e:	4b0f      	ldr	r3, [pc, #60]	; (3e7c <opcode_0xAA()+0x50>)
    3e40:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e42:	4a0f      	ldr	r2, [pc, #60]	; (3e80 <opcode_0xAA()+0x54>)
    3e44:	0608      	lsls	r0, r1, #24
    3e46:	7019      	strb	r1, [r3, #0]
    3e48:	7813      	ldrb	r3, [r2, #0]
    3e4a:	d40d      	bmi.n	3e68 <opcode_0xAA()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e50:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3e52:	b959      	cbnz	r1, 3e6c <opcode_0xAA()+0x40>
    3e54:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xAA].length);
    3e58:	480a      	ldr	r0, [pc, #40]	; (3e84 <opcode_0xAA()+0x58>)
    3e5a:	8821      	ldrh	r1, [r4, #0]
    3e5c:	f890 02b9 	ldrb.w	r0, [r0, #697]	; 0x2b9
    3e60:	7013      	strb	r3, [r2, #0]
    3e62:	4408      	add	r0, r1
} // 0xAA - TAX - Transfer Accumulator to X 
    3e64:	b280      	uxth	r0, r0
    3e66:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3e6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3e70:	e7f2      	b.n	3e58 <opcode_0xAA()+0x2c>
    3e72:	bf00      	nop
    3e74:	2001888c 	.word	0x2001888c
    3e78:	200188a3 	.word	0x200188a3
    3e7c:	200188a4 	.word	0x200188a4
    3e80:	20004950 	.word	0x20004950
    3e84:	20017418 	.word	0x20017418

00003e88 <opcode_0xA8()>:
uint16_t opcode_0xA8() {
    3e88:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3e8a:	4c11      	ldr	r4, [pc, #68]	; (3ed0 <opcode_0xA8()+0x48>)
    3e8c:	2100      	movs	r1, #0
    3e8e:	8820      	ldrh	r0, [r4, #0]
    3e90:	3001      	adds	r0, #1
    3e92:	b280      	uxth	r0, r0
    3e94:	f7fe fb7e 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_a;
    3e98:	4a0e      	ldr	r2, [pc, #56]	; (3ed4 <opcode_0xA8()+0x4c>)
    3e9a:	4b0f      	ldr	r3, [pc, #60]	; (3ed8 <opcode_0xA8()+0x50>)
    3e9c:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e9e:	4a0f      	ldr	r2, [pc, #60]	; (3edc <opcode_0xA8()+0x54>)
    3ea0:	0608      	lsls	r0, r1, #24
    3ea2:	7019      	strb	r1, [r3, #0]
    3ea4:	7813      	ldrb	r3, [r2, #0]
    3ea6:	d40d      	bmi.n	3ec4 <opcode_0xA8()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3eac:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3eae:	b959      	cbnz	r1, 3ec8 <opcode_0xA8()+0x40>
    3eb0:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA8].length);
    3eb4:	480a      	ldr	r0, [pc, #40]	; (3ee0 <opcode_0xA8()+0x58>)
    3eb6:	8821      	ldrh	r1, [r4, #0]
    3eb8:	f890 0251 	ldrb.w	r0, [r0, #593]	; 0x251
    3ebc:	7013      	strb	r3, [r2, #0]
    3ebe:	4408      	add	r0, r1
} // 0xA8 - TAY - Transfer Accumulator to Y
    3ec0:	b280      	uxth	r0, r0
    3ec2:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3ec8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3ecc:	e7f2      	b.n	3eb4 <opcode_0xA8()+0x2c>
    3ece:	bf00      	nop
    3ed0:	2001888c 	.word	0x2001888c
    3ed4:	200188a3 	.word	0x200188a3
    3ed8:	200188a5 	.word	0x200188a5
    3edc:	20004950 	.word	0x20004950
    3ee0:	20017418 	.word	0x20017418

00003ee4 <opcode_0xBA()>:
uint16_t opcode_0xBA() {
    3ee4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3ee6:	4c11      	ldr	r4, [pc, #68]	; (3f2c <opcode_0xBA()+0x48>)
    3ee8:	2100      	movs	r1, #0
    3eea:	8820      	ldrh	r0, [r4, #0]
    3eec:	3001      	adds	r0, #1
    3eee:	b280      	uxth	r0, r0
    3ef0:	f7fe fb50 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_sp;
    3ef4:	4a0e      	ldr	r2, [pc, #56]	; (3f30 <opcode_0xBA()+0x4c>)
    3ef6:	4b0f      	ldr	r3, [pc, #60]	; (3f34 <opcode_0xBA()+0x50>)
    3ef8:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3efa:	4a0f      	ldr	r2, [pc, #60]	; (3f38 <opcode_0xBA()+0x54>)
    3efc:	0608      	lsls	r0, r1, #24
    3efe:	7019      	strb	r1, [r3, #0]
    3f00:	7813      	ldrb	r3, [r2, #0]
    3f02:	d40d      	bmi.n	3f20 <opcode_0xBA()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f08:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f0a:	b959      	cbnz	r1, 3f24 <opcode_0xBA()+0x40>
    3f0c:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xBA].length);
    3f10:	480a      	ldr	r0, [pc, #40]	; (3f3c <opcode_0xBA()+0x58>)
    3f12:	8821      	ldrh	r1, [r4, #0]
    3f14:	f890 05f9 	ldrb.w	r0, [r0, #1529]	; 0x5f9
    3f18:	7013      	strb	r3, [r2, #0]
    3f1a:	4408      	add	r0, r1
} // 0xBA - TSX - Transfer Stack Pointer to X
    3f1c:	b280      	uxth	r0, r0
    3f1e:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f24:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3f28:	e7f2      	b.n	3f10 <opcode_0xBA()+0x2c>
    3f2a:	bf00      	nop
    3f2c:	2001888c 	.word	0x2001888c
    3f30:	20004951 	.word	0x20004951
    3f34:	200188a4 	.word	0x200188a4
    3f38:	20004950 	.word	0x20004950
    3f3c:	20017418 	.word	0x20017418

00003f40 <opcode_0x8A()>:
uint16_t opcode_0x8A() {
    3f40:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3f42:	4c11      	ldr	r4, [pc, #68]	; (3f88 <opcode_0x8A()+0x48>)
    3f44:	2100      	movs	r1, #0
    3f46:	8820      	ldrh	r0, [r4, #0]
    3f48:	3001      	adds	r0, #1
    3f4a:	b280      	uxth	r0, r0
    3f4c:	f7fe fb22 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_x;
    3f50:	4a0e      	ldr	r2, [pc, #56]	; (3f8c <opcode_0x8A()+0x4c>)
    3f52:	4b0f      	ldr	r3, [pc, #60]	; (3f90 <opcode_0x8A()+0x50>)
    3f54:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f56:	4a0f      	ldr	r2, [pc, #60]	; (3f94 <opcode_0x8A()+0x54>)
    3f58:	0608      	lsls	r0, r1, #24
    3f5a:	7019      	strb	r1, [r3, #0]
    3f5c:	7813      	ldrb	r3, [r2, #0]
    3f5e:	d40d      	bmi.n	3f7c <opcode_0x8A()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f64:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f66:	b959      	cbnz	r1, 3f80 <opcode_0x8A()+0x40>
    3f68:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x8A].length);
    3f6c:	480a      	ldr	r0, [pc, #40]	; (3f98 <opcode_0x8A()+0x58>)
    3f6e:	8821      	ldrh	r1, [r4, #0]
    3f70:	f890 0c39 	ldrb.w	r0, [r0, #3129]	; 0xc39
    3f74:	7013      	strb	r3, [r2, #0]
    3f76:	4408      	add	r0, r1
} // 0x8A - TXA - Transfer X to Accumulator
    3f78:	b280      	uxth	r0, r0
    3f7a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f80:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3f84:	e7f2      	b.n	3f6c <opcode_0x8A()+0x2c>
    3f86:	bf00      	nop
    3f88:	2001888c 	.word	0x2001888c
    3f8c:	200188a4 	.word	0x200188a4
    3f90:	200188a3 	.word	0x200188a3
    3f94:	20004950 	.word	0x20004950
    3f98:	20016418 	.word	0x20016418

00003f9c <opcode_0x9A()>:
uint16_t opcode_0x9A() {
    3f9c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3f9e:	4c09      	ldr	r4, [pc, #36]	; (3fc4 <opcode_0x9A()+0x28>)
    3fa0:	2100      	movs	r1, #0
    3fa2:	8820      	ldrh	r0, [r4, #0]
    3fa4:	3001      	adds	r0, #1
    3fa6:	b280      	uxth	r0, r0
    3fa8:	f7fe faf4 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_sp = register_x;
    return(register_pc + opcode_info[0x9A].length);
    3fac:	4b06      	ldr	r3, [pc, #24]	; (3fc8 <opcode_0x9A()+0x2c>)
    3fae:	8821      	ldrh	r1, [r4, #0]
    3fb0:	f893 0f79 	ldrb.w	r0, [r3, #3961]	; 0xf79
    register_sp = register_x;
    3fb4:	4a05      	ldr	r2, [pc, #20]	; (3fcc <opcode_0x9A()+0x30>)
    3fb6:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <opcode_0x9A()+0x34>)
    return(register_pc + opcode_info[0x9A].length);
    3fb8:	4408      	add	r0, r1
    register_sp = register_x;
    3fba:	7812      	ldrb	r2, [r2, #0]
} // 0x9A - TXS - Transfer X to Stack Pointer
    3fbc:	b280      	uxth	r0, r0
    register_sp = register_x;
    3fbe:	701a      	strb	r2, [r3, #0]
} // 0x9A - TXS - Transfer X to Stack Pointer
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	bf00      	nop
    3fc4:	2001888c 	.word	0x2001888c
    3fc8:	20016418 	.word	0x20016418
    3fcc:	200188a4 	.word	0x200188a4
    3fd0:	20004951 	.word	0x20004951

00003fd4 <opcode_0x98()>:
uint16_t opcode_0x98() {
    3fd4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3fd6:	4c11      	ldr	r4, [pc, #68]	; (401c <opcode_0x98()+0x48>)
    3fd8:	2100      	movs	r1, #0
    3fda:	8820      	ldrh	r0, [r4, #0]
    3fdc:	3001      	adds	r0, #1
    3fde:	b280      	uxth	r0, r0
    3fe0:	f7fe fad8 	bl	2594 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_y;
    3fe4:	4a0e      	ldr	r2, [pc, #56]	; (4020 <opcode_0x98()+0x4c>)
    3fe6:	4b0f      	ldr	r3, [pc, #60]	; (4024 <opcode_0x98()+0x50>)
    3fe8:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3fea:	4a0f      	ldr	r2, [pc, #60]	; (4028 <opcode_0x98()+0x54>)
    3fec:	0608      	lsls	r0, r1, #24
    3fee:	7019      	strb	r1, [r3, #0]
    3ff0:	7813      	ldrb	r3, [r2, #0]
    3ff2:	d40d      	bmi.n	4010 <opcode_0x98()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ff8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ffa:	b959      	cbnz	r1, 4014 <opcode_0x98()+0x40>
    3ffc:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x98].length);
    4000:	480a      	ldr	r0, [pc, #40]	; (402c <opcode_0x98()+0x58>)
    4002:	8821      	ldrh	r1, [r4, #0]
    4004:	f890 0f11 	ldrb.w	r0, [r0, #3857]	; 0xf11
    4008:	7013      	strb	r3, [r2, #0]
    400a:	4408      	add	r0, r1
} // 0x98 - TYA - Transfer Y to Accumulator
    400c:	b280      	uxth	r0, r0
    400e:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4014:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4018:	e7f2      	b.n	4000 <opcode_0x98()+0x2c>
    401a:	bf00      	nop
    401c:	2001888c 	.word	0x2001888c
    4020:	200188a5 	.word	0x200188a5
    4024:	200188a3 	.word	0x200188a3
    4028:	20004950 	.word	0x20004950
    402c:	20016418 	.word	0x20016418

00004030 <opcode_0x08()>:

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    4030:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    4032:	4d0d      	ldr	r5, [pc, #52]	; (4068 <opcode_0x08()+0x38>)
    4034:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    4036:	4c0d      	ldr	r4, [pc, #52]	; (406c <opcode_0x08()+0x3c>)
    4038:	8828      	ldrh	r0, [r5, #0]
    403a:	3001      	adds	r0, #1
    403c:	b280      	uxth	r0, r0
    403e:	f7fe faa9 	bl	2594 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    4042:	4b0b      	ldr	r3, [pc, #44]	; (4070 <opcode_0x08()+0x40>)
    4044:	7820      	ldrb	r0, [r4, #0]
    4046:	7819      	ldrb	r1, [r3, #0]
    4048:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    404c:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    4050:	f7fe fc5c 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    4054:	4907      	ldr	r1, [pc, #28]	; (4074 <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    4056:	7823      	ldrb	r3, [r4, #0]
    4058:	882a      	ldrh	r2, [r5, #0]
    405a:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    405e:	3b01      	subs	r3, #1
    4060:	4410      	add	r0, r2
    4062:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    4064:	b280      	uxth	r0, r0
    4066:	bd38      	pop	{r3, r4, r5, pc}
    4068:	2001888c 	.word	0x2001888c
    406c:	20004951 	.word	0x20004951
    4070:	20004950 	.word	0x20004950
    4074:	20015418 	.word	0x20015418

00004078 <opcode_0x48()>:
uint16_t opcode_0x48() {
    4078:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    407a:	4d0c      	ldr	r5, [pc, #48]	; (40ac <opcode_0x48()+0x34>)
    407c:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    407e:	4c0c      	ldr	r4, [pc, #48]	; (40b0 <opcode_0x48()+0x38>)
    4080:	8828      	ldrh	r0, [r5, #0]
    4082:	3001      	adds	r0, #1
    4084:	b280      	uxth	r0, r0
    4086:	f7fe fa85 	bl	2594 <read_byte(unsigned short, bool)>
    408a:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    408c:	4b09      	ldr	r3, [pc, #36]	; (40b4 <opcode_0x48()+0x3c>)
    408e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4092:	7819      	ldrb	r1, [r3, #0]
    4094:	f7fe fc3a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    4098:	4907      	ldr	r1, [pc, #28]	; (40b8 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    409a:	7823      	ldrb	r3, [r4, #0]
    409c:	882a      	ldrh	r2, [r5, #0]
    409e:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    40a2:	3b01      	subs	r3, #1
    40a4:	4410      	add	r0, r2
    40a6:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    40a8:	b280      	uxth	r0, r0
    40aa:	bd38      	pop	{r3, r4, r5, pc}
    40ac:	2001888c 	.word	0x2001888c
    40b0:	20004951 	.word	0x20004951
    40b4:	200188a3 	.word	0x200188a3
    40b8:	20015418 	.word	0x20015418

000040bc <opcode_0x28()>:
uint16_t opcode_0x28() {
    40bc:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    40be:	4d11      	ldr	r5, [pc, #68]	; (4104 <opcode_0x28()+0x48>)
    40c0:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    40c2:	4c11      	ldr	r4, [pc, #68]	; (4108 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    40c4:	8828      	ldrh	r0, [r5, #0]
    40c6:	3001      	adds	r0, #1
    40c8:	b280      	uxth	r0, r0
    40ca:	f7fe fa63 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    40ce:	7820      	ldrb	r0, [r4, #0]
    40d0:	2100      	movs	r1, #0
    40d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    40d6:	f7fe fa5d 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    40da:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    40dc:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    40de:	3301      	adds	r3, #1
    40e0:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    40e2:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    40e6:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    40e8:	f7fe fa54 	bl	2594 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    40ec:	4b07      	ldr	r3, [pc, #28]	; (410c <opcode_0x28()+0x50>)
    40ee:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    40f0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    40f4:	4906      	ldr	r1, [pc, #24]	; (4110 <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    40f6:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    40fa:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    40fc:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    40fe:	b280      	uxth	r0, r0
    4100:	bd38      	pop	{r3, r4, r5, pc}
    4102:	bf00      	nop
    4104:	2001888c 	.word	0x2001888c
    4108:	20004951 	.word	0x20004951
    410c:	20015418 	.word	0x20015418
    4110:	20004950 	.word	0x20004950

00004114 <opcode_0x68()>:
uint16_t opcode_0x68() {
    4114:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    4116:	4c18      	ldr	r4, [pc, #96]	; (4178 <opcode_0x68()+0x64>)
    4118:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    411a:	4d18      	ldr	r5, [pc, #96]	; (417c <opcode_0x68()+0x68>)
    read_byte(register_pc+1, false);
    411c:	8820      	ldrh	r0, [r4, #0]
    411e:	3001      	adds	r0, #1
    4120:	b280      	uxth	r0, r0
    4122:	f7fe fa37 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    4126:	7828      	ldrb	r0, [r5, #0]
    4128:	2100      	movs	r1, #0
    412a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    412e:	f7fe fa31 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4132:	782b      	ldrb	r3, [r5, #0]
    temp = read_byte(register_sp_fixed, false);
    4134:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4136:	3301      	adds	r3, #1
    4138:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    413a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    413e:	702b      	strb	r3, [r5, #0]
    temp = read_byte(register_sp_fixed, false);
    4140:	f7fe fa28 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = pop();
    4144:	4b0e      	ldr	r3, [pc, #56]	; (4180 <opcode_0x68()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4146:	4a0f      	ldr	r2, [pc, #60]	; (4184 <opcode_0x68()+0x70>)
    4148:	0601      	lsls	r1, r0, #24
    414a:	7018      	strb	r0, [r3, #0]
    414c:	7813      	ldrb	r3, [r2, #0]
    414e:	d40d      	bmi.n	416c <opcode_0x68()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4154:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4156:	b958      	cbnz	r0, 4170 <opcode_0x68()+0x5c>
    4158:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    415c:	480a      	ldr	r0, [pc, #40]	; (4188 <opcode_0x68()+0x74>)
    415e:	8821      	ldrh	r1, [r4, #0]
    4160:	f890 0551 	ldrb.w	r0, [r0, #1361]	; 0x551
    4164:	7013      	strb	r3, [r2, #0]
    4166:	4408      	add	r0, r1
} // 0x68 - PLA - Pop Accumulator from Stack
    4168:	b280      	uxth	r0, r0
    416a:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    416c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4170:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4174:	e7f2      	b.n	415c <opcode_0x68()+0x48>
    4176:	bf00      	nop
    4178:	2001888c 	.word	0x2001888c
    417c:	20004951 	.word	0x20004951
    4180:	200188a3 	.word	0x200188a3
    4184:	20004950 	.word	0x20004950
    4188:	20016418 	.word	0x20016418

0000418c <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
uint16_t opcode_0x29() {
    418c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    418e:	4c11      	ldr	r4, [pc, #68]	; (41d4 <opcode_0x29()+0x48>)
    4190:	2100      	movs	r1, #0
    4192:	8820      	ldrh	r0, [r4, #0]
    4194:	3001      	adds	r0, #1
    4196:	b280      	uxth	r0, r0
    4198:	f7fe f9fc 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    419c:	4b0e      	ldr	r3, [pc, #56]	; (41d8 <opcode_0x29()+0x4c>)
    419e:	781a      	ldrb	r2, [r3, #0]
    41a0:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    41a2:	4a0e      	ldr	r2, [pc, #56]	; (41dc <opcode_0x29()+0x50>)
    41a4:	0601      	lsls	r1, r0, #24
    41a6:	7018      	strb	r0, [r3, #0]
    41a8:	7813      	ldrb	r3, [r2, #0]
    41aa:	d40d      	bmi.n	41c8 <opcode_0x29()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    41ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41b0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    41b2:	b958      	cbnz	r0, 41cc <opcode_0x29()+0x40>
    41b4:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x29].length);
    41b8:	4809      	ldr	r0, [pc, #36]	; (41e0 <opcode_0x29()+0x54>)
    41ba:	8821      	ldrh	r1, [r4, #0]
    41bc:	f890 0885 	ldrb.w	r0, [r0, #2181]	; 0x885
    41c0:	7013      	strb	r3, [r2, #0]
    41c2:	4408      	add	r0, r1
} // 0x29 - AND - Immediate
    41c4:	b280      	uxth	r0, r0
    41c6:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    41c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    41cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    41d0:	e7f2      	b.n	41b8 <opcode_0x29()+0x2c>
    41d2:	bf00      	nop
    41d4:	2001888c 	.word	0x2001888c
    41d8:	200188a3 	.word	0x200188a3
    41dc:	20004950 	.word	0x20004950
    41e0:	20015418 	.word	0x20015418

000041e4 <opcode_0x25()>:
uint16_t opcode_0x25() {
    41e4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    41e6:	4c14      	ldr	r4, [pc, #80]	; (4238 <opcode_0x25()+0x54>)
    41e8:	2100      	movs	r1, #0
    41ea:	8820      	ldrh	r0, [r4, #0]
    41ec:	3001      	adds	r0, #1
    41ee:	b280      	uxth	r0, r0
    41f0:	f7fe f9d0 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    41f4:	4b11      	ldr	r3, [pc, #68]	; (423c <opcode_0x25()+0x58>)
    41f6:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    41f8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41fa:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    41fc:	f7fe f9ca 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_ZeroPage());
    4200:	4b0f      	ldr	r3, [pc, #60]	; (4240 <opcode_0x25()+0x5c>)
    4202:	781a      	ldrb	r2, [r3, #0]
    4204:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4206:	4a0f      	ldr	r2, [pc, #60]	; (4244 <opcode_0x25()+0x60>)
    4208:	0601      	lsls	r1, r0, #24
    420a:	7018      	strb	r0, [r3, #0]
    420c:	7813      	ldrb	r3, [r2, #0]
    420e:	d40d      	bmi.n	422c <opcode_0x25()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4214:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4216:	b958      	cbnz	r0, 4230 <opcode_0x25()+0x4c>
    4218:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x25].length);
    421c:	480a      	ldr	r0, [pc, #40]	; (4248 <opcode_0x25()+0x64>)
    421e:	8821      	ldrh	r1, [r4, #0]
    4220:	f890 07b5 	ldrb.w	r0, [r0, #1973]	; 0x7b5
    4224:	7013      	strb	r3, [r2, #0]
    4226:	4408      	add	r0, r1
} // 0x25 - AND - ZeroPage
    4228:	b280      	uxth	r0, r0
    422a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4230:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4234:	e7f2      	b.n	421c <opcode_0x25()+0x38>
    4236:	bf00      	nop
    4238:	2001888c 	.word	0x2001888c
    423c:	2001888a 	.word	0x2001888a
    4240:	200188a3 	.word	0x200188a3
    4244:	20004950 	.word	0x20004950
    4248:	20015418 	.word	0x20015418

0000424c <opcode_0x35()>:
uint16_t opcode_0x35() {
    424c:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_ZeroPage_X());
    424e:	f7fe fc99 	bl	2b84 <Fetch_ZeroPage_X()>
    4252:	4b0e      	ldr	r3, [pc, #56]	; (428c <opcode_0x35()+0x40>)
    4254:	781a      	ldrb	r2, [r3, #0]
    4256:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4258:	4a0d      	ldr	r2, [pc, #52]	; (4290 <opcode_0x35()+0x44>)
    425a:	0601      	lsls	r1, r0, #24
    425c:	7018      	strb	r0, [r3, #0]
    425e:	7813      	ldrb	r3, [r2, #0]
    4260:	d40e      	bmi.n	4280 <opcode_0x35()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4266:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4268:	b960      	cbnz	r0, 4284 <opcode_0x35()+0x38>
    426a:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x35].length);
    426e:	4909      	ldr	r1, [pc, #36]	; (4294 <opcode_0x35()+0x48>)
    4270:	4809      	ldr	r0, [pc, #36]	; (4298 <opcode_0x35()+0x4c>)
    4272:	7013      	strb	r3, [r2, #0]
    4274:	f890 0af5 	ldrb.w	r0, [r0, #2805]	; 0xaf5
    4278:	880b      	ldrh	r3, [r1, #0]
    427a:	4418      	add	r0, r3
} // 0x35 - AND - ZeroPage , X
    427c:	b280      	uxth	r0, r0
    427e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4284:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4288:	e7f1      	b.n	426e <opcode_0x35()+0x22>
    428a:	bf00      	nop
    428c:	200188a3 	.word	0x200188a3
    4290:	20004950 	.word	0x20004950
    4294:	2001888c 	.word	0x2001888c
    4298:	20015418 	.word	0x20015418

0000429c <opcode_0x2D()>:
uint16_t opcode_0x2D() {
    429c:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute());
    429e:	f7fe fcb1 	bl	2c04 <Fetch_Absolute()>
    42a2:	4b0e      	ldr	r3, [pc, #56]	; (42dc <opcode_0x2D()+0x40>)
    42a4:	781a      	ldrb	r2, [r3, #0]
    42a6:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42a8:	4a0d      	ldr	r2, [pc, #52]	; (42e0 <opcode_0x2D()+0x44>)
    42aa:	0601      	lsls	r1, r0, #24
    42ac:	7018      	strb	r0, [r3, #0]
    42ae:	7813      	ldrb	r3, [r2, #0]
    42b0:	d40e      	bmi.n	42d0 <opcode_0x2D()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    42b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42b6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    42b8:	b960      	cbnz	r0, 42d4 <opcode_0x2D()+0x38>
    42ba:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x2D].length);
    42be:	4909      	ldr	r1, [pc, #36]	; (42e4 <opcode_0x2D()+0x48>)
    42c0:	4809      	ldr	r0, [pc, #36]	; (42e8 <opcode_0x2D()+0x4c>)
    42c2:	7013      	strb	r3, [r2, #0]
    42c4:	f890 0955 	ldrb.w	r0, [r0, #2389]	; 0x955
    42c8:	880b      	ldrh	r3, [r1, #0]
    42ca:	4418      	add	r0, r3
} // 0x2D - AND - Absolute
    42cc:	b280      	uxth	r0, r0
    42ce:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    42d4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    42d8:	e7f1      	b.n	42be <opcode_0x2D()+0x22>
    42da:	bf00      	nop
    42dc:	200188a3 	.word	0x200188a3
    42e0:	20004950 	.word	0x20004950
    42e4:	2001888c 	.word	0x2001888c
    42e8:	20015418 	.word	0x20015418

000042ec <opcode_0x3D()>:
uint16_t opcode_0x3D() {
    42ec:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_X(1));
    42ee:	2001      	movs	r0, #1
    42f0:	f7fe fca4 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    42f4:	4b0d      	ldr	r3, [pc, #52]	; (432c <opcode_0x3D()+0x40>)
    42f6:	781a      	ldrb	r2, [r3, #0]
    42f8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42fa:	4a0d      	ldr	r2, [pc, #52]	; (4330 <opcode_0x3D()+0x44>)
    42fc:	0601      	lsls	r1, r0, #24
    42fe:	7018      	strb	r0, [r3, #0]
    4300:	7813      	ldrb	r3, [r2, #0]
    4302:	d40e      	bmi.n	4322 <opcode_0x3D()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4308:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    430a:	b960      	cbnz	r0, 4326 <opcode_0x3D()+0x3a>
    430c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x3D].length);
    4310:	4908      	ldr	r1, [pc, #32]	; (4334 <opcode_0x3D()+0x48>)
    4312:	4809      	ldr	r0, [pc, #36]	; (4338 <opcode_0x3D()+0x4c>)
    4314:	7013      	strb	r3, [r2, #0]
    4316:	f890 0c95 	ldrb.w	r0, [r0, #3221]	; 0xc95
    431a:	880b      	ldrh	r3, [r1, #0]
    431c:	4418      	add	r0, r3
} // 0x3D - AND - Absolute , X
    431e:	b280      	uxth	r0, r0
    4320:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4326:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    432a:	e7f1      	b.n	4310 <opcode_0x3D()+0x24>
    432c:	200188a3 	.word	0x200188a3
    4330:	20004950 	.word	0x20004950
    4334:	2001888c 	.word	0x2001888c
    4338:	20015418 	.word	0x20015418

0000433c <opcode_0x39()>:
uint16_t opcode_0x39() {
    433c:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_Y(1));
    433e:	2001      	movs	r0, #1
    4340:	f7fe fcac 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    4344:	4b0d      	ldr	r3, [pc, #52]	; (437c <opcode_0x39()+0x40>)
    4346:	781a      	ldrb	r2, [r3, #0]
    4348:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    434a:	4a0d      	ldr	r2, [pc, #52]	; (4380 <opcode_0x39()+0x44>)
    434c:	0601      	lsls	r1, r0, #24
    434e:	7018      	strb	r0, [r3, #0]
    4350:	7813      	ldrb	r3, [r2, #0]
    4352:	d40e      	bmi.n	4372 <opcode_0x39()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4358:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    435a:	b960      	cbnz	r0, 4376 <opcode_0x39()+0x3a>
    435c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x39].length);
    4360:	4908      	ldr	r1, [pc, #32]	; (4384 <opcode_0x39()+0x48>)
    4362:	4809      	ldr	r0, [pc, #36]	; (4388 <opcode_0x39()+0x4c>)
    4364:	7013      	strb	r3, [r2, #0]
    4366:	f890 0bc5 	ldrb.w	r0, [r0, #3013]	; 0xbc5
    436a:	880b      	ldrh	r3, [r1, #0]
    436c:	4418      	add	r0, r3
} // 0x19 - OR - Absolute , Y
    436e:	b280      	uxth	r0, r0
    4370:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4376:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    437a:	e7f1      	b.n	4360 <opcode_0x39()+0x24>
    437c:	200188a3 	.word	0x200188a3
    4380:	20004950 	.word	0x20004950
    4384:	2001888c 	.word	0x2001888c
    4388:	20015418 	.word	0x20015418

0000438c <opcode_0x21()>:
uint16_t opcode_0x21() {
    438c:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    438e:	f7fe fcb5 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    4392:	4b0e      	ldr	r3, [pc, #56]	; (43cc <opcode_0x21()+0x40>)
    4394:	781a      	ldrb	r2, [r3, #0]
    4396:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4398:	4a0d      	ldr	r2, [pc, #52]	; (43d0 <opcode_0x21()+0x44>)
    439a:	0601      	lsls	r1, r0, #24
    439c:	7018      	strb	r0, [r3, #0]
    439e:	7813      	ldrb	r3, [r2, #0]
    43a0:	d40e      	bmi.n	43c0 <opcode_0x21()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    43a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43a6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    43a8:	b960      	cbnz	r0, 43c4 <opcode_0x21()+0x38>
    43aa:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x21].length);
    43ae:	4909      	ldr	r1, [pc, #36]	; (43d4 <opcode_0x21()+0x48>)
    43b0:	4809      	ldr	r0, [pc, #36]	; (43d8 <opcode_0x21()+0x4c>)
    43b2:	7013      	strb	r3, [r2, #0]
    43b4:	f890 06e5 	ldrb.w	r0, [r0, #1765]	; 0x6e5
    43b8:	880b      	ldrh	r3, [r1, #0]
    43ba:	4418      	add	r0, r3
} // 0x21 - AND - Indexed Indirect X
    43bc:	b280      	uxth	r0, r0
    43be:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    43c4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43c8:	e7f1      	b.n	43ae <opcode_0x21()+0x22>
    43ca:	bf00      	nop
    43cc:	200188a3 	.word	0x200188a3
    43d0:	20004950 	.word	0x20004950
    43d4:	2001888c 	.word	0x2001888c
    43d8:	20015418 	.word	0x20015418

000043dc <opcode_0x31()>:
uint16_t opcode_0x31() {
    43dc:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    43de:	2001      	movs	r0, #1
    43e0:	f7fe fcb6 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    43e4:	4b0d      	ldr	r3, [pc, #52]	; (441c <opcode_0x31()+0x40>)
    43e6:	781a      	ldrb	r2, [r3, #0]
    43e8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43ea:	4a0d      	ldr	r2, [pc, #52]	; (4420 <opcode_0x31()+0x44>)
    43ec:	0601      	lsls	r1, r0, #24
    43ee:	7018      	strb	r0, [r3, #0]
    43f0:	7813      	ldrb	r3, [r2, #0]
    43f2:	d40e      	bmi.n	4412 <opcode_0x31()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    43f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43f8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    43fa:	b960      	cbnz	r0, 4416 <opcode_0x31()+0x3a>
    43fc:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x31].length);
    4400:	4908      	ldr	r1, [pc, #32]	; (4424 <opcode_0x31()+0x48>)
    4402:	4809      	ldr	r0, [pc, #36]	; (4428 <opcode_0x31()+0x4c>)
    4404:	7013      	strb	r3, [r2, #0]
    4406:	f890 0a25 	ldrb.w	r0, [r0, #2597]	; 0xa25
    440a:	880b      	ldrh	r3, [r1, #0]
    440c:	4418      	add	r0, r3
} // 0x31 - AND - Indirect Indexed  Y
    440e:	b280      	uxth	r0, r0
    4410:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4416:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    441a:	e7f1      	b.n	4400 <opcode_0x31()+0x24>
    441c:	200188a3 	.word	0x200188a3
    4420:	20004950 	.word	0x20004950
    4424:	2001888c 	.word	0x2001888c
    4428:	20015418 	.word	0x20015418

0000442c <opcode_0x09()>:

// -------------------------------------------------
// ORA
// -------------------------------------------------
uint16_t opcode_0x09() {
    442c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    442e:	4c11      	ldr	r4, [pc, #68]	; (4474 <opcode_0x09()+0x48>)
    4430:	2100      	movs	r1, #0
    4432:	8820      	ldrh	r0, [r4, #0]
    4434:	3001      	adds	r0, #1
    4436:	b280      	uxth	r0, r0
    4438:	f7fe f8ac 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    443c:	4b0e      	ldr	r3, [pc, #56]	; (4478 <opcode_0x09()+0x4c>)
    443e:	781a      	ldrb	r2, [r3, #0]
    4440:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4442:	4a0e      	ldr	r2, [pc, #56]	; (447c <opcode_0x09()+0x50>)
    4444:	b2c0      	uxtb	r0, r0
    4446:	0601      	lsls	r1, r0, #24
    4448:	7018      	strb	r0, [r3, #0]
    444a:	7813      	ldrb	r3, [r2, #0]
    444c:	d40d      	bmi.n	446a <opcode_0x09()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4452:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4454:	b958      	cbnz	r0, 446e <opcode_0x09()+0x42>
    4456:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x09].length);
    445a:	4809      	ldr	r0, [pc, #36]	; (4480 <opcode_0x09()+0x54>)
    445c:	8821      	ldrh	r1, [r4, #0]
    445e:	f890 0205 	ldrb.w	r0, [r0, #517]	; 0x205
    4462:	7013      	strb	r3, [r2, #0]
    4464:	4408      	add	r0, r1
} // 0x09 - OR - Immediate
    4466:	b280      	uxth	r0, r0
    4468:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    446a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    446e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4472:	e7f2      	b.n	445a <opcode_0x09()+0x2e>
    4474:	2001888c 	.word	0x2001888c
    4478:	200188a3 	.word	0x200188a3
    447c:	20004950 	.word	0x20004950
    4480:	20015418 	.word	0x20015418

00004484 <opcode_0x05()>:
uint16_t opcode_0x05() {
    4484:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4486:	4c14      	ldr	r4, [pc, #80]	; (44d8 <opcode_0x05()+0x54>)
    4488:	2100      	movs	r1, #0
    448a:	8820      	ldrh	r0, [r4, #0]
    448c:	3001      	adds	r0, #1
    448e:	b280      	uxth	r0, r0
    4490:	f7fe f880 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4494:	4b11      	ldr	r3, [pc, #68]	; (44dc <opcode_0x05()+0x58>)
    4496:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4498:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    449a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    449c:	f7fe f87a 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_ZeroPage());
    44a0:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <opcode_0x05()+0x5c>)
    44a2:	781a      	ldrb	r2, [r3, #0]
    44a4:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44a6:	4a0f      	ldr	r2, [pc, #60]	; (44e4 <opcode_0x05()+0x60>)
    44a8:	b2c0      	uxtb	r0, r0
    44aa:	0601      	lsls	r1, r0, #24
    44ac:	7018      	strb	r0, [r3, #0]
    44ae:	7813      	ldrb	r3, [r2, #0]
    44b0:	d40d      	bmi.n	44ce <opcode_0x05()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    44b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44b6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    44b8:	b958      	cbnz	r0, 44d2 <opcode_0x05()+0x4e>
    44ba:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x05].length);
    44be:	480a      	ldr	r0, [pc, #40]	; (44e8 <opcode_0x05()+0x64>)
    44c0:	8821      	ldrh	r1, [r4, #0]
    44c2:	f890 0135 	ldrb.w	r0, [r0, #309]	; 0x135
    44c6:	7013      	strb	r3, [r2, #0]
    44c8:	4408      	add	r0, r1
} // 0x05 - OR - ZeroPage
    44ca:	b280      	uxth	r0, r0
    44cc:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    44d2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    44d6:	e7f2      	b.n	44be <opcode_0x05()+0x3a>
    44d8:	2001888c 	.word	0x2001888c
    44dc:	2001888a 	.word	0x2001888a
    44e0:	200188a3 	.word	0x200188a3
    44e4:	20004950 	.word	0x20004950
    44e8:	20015418 	.word	0x20015418

000044ec <opcode_0x15()>:
uint16_t opcode_0x15() {
    44ec:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_ZeroPage_X());
    44ee:	f7fe fb49 	bl	2b84 <Fetch_ZeroPage_X()>
    44f2:	4b0e      	ldr	r3, [pc, #56]	; (452c <opcode_0x15()+0x40>)
    44f4:	781a      	ldrb	r2, [r3, #0]
    44f6:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44f8:	4a0d      	ldr	r2, [pc, #52]	; (4530 <opcode_0x15()+0x44>)
    44fa:	b2c0      	uxtb	r0, r0
    44fc:	0601      	lsls	r1, r0, #24
    44fe:	7018      	strb	r0, [r3, #0]
    4500:	7813      	ldrb	r3, [r2, #0]
    4502:	d40e      	bmi.n	4522 <opcode_0x15()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4508:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    450a:	b960      	cbnz	r0, 4526 <opcode_0x15()+0x3a>
    450c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x15].length);
    4510:	4908      	ldr	r1, [pc, #32]	; (4534 <opcode_0x15()+0x48>)
    4512:	4809      	ldr	r0, [pc, #36]	; (4538 <opcode_0x15()+0x4c>)
    4514:	7013      	strb	r3, [r2, #0]
    4516:	f890 0475 	ldrb.w	r0, [r0, #1141]	; 0x475
    451a:	880b      	ldrh	r3, [r1, #0]
    451c:	4418      	add	r0, r3
} // 0x15 - OR - ZeroPage , X
    451e:	b280      	uxth	r0, r0
    4520:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4526:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    452a:	e7f1      	b.n	4510 <opcode_0x15()+0x24>
    452c:	200188a3 	.word	0x200188a3
    4530:	20004950 	.word	0x20004950
    4534:	2001888c 	.word	0x2001888c
    4538:	20015418 	.word	0x20015418

0000453c <opcode_0x0D()>:
uint16_t opcode_0x0D() {
    453c:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute());
    453e:	f7fe fb61 	bl	2c04 <Fetch_Absolute()>
    4542:	4b0e      	ldr	r3, [pc, #56]	; (457c <opcode_0x0D()+0x40>)
    4544:	781a      	ldrb	r2, [r3, #0]
    4546:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4548:	4a0d      	ldr	r2, [pc, #52]	; (4580 <opcode_0x0D()+0x44>)
    454a:	b2c0      	uxtb	r0, r0
    454c:	0601      	lsls	r1, r0, #24
    454e:	7018      	strb	r0, [r3, #0]
    4550:	7813      	ldrb	r3, [r2, #0]
    4552:	d40e      	bmi.n	4572 <opcode_0x0D()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4558:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    455a:	b960      	cbnz	r0, 4576 <opcode_0x0D()+0x3a>
    455c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x0D].length);
    4560:	4908      	ldr	r1, [pc, #32]	; (4584 <opcode_0x0D()+0x48>)
    4562:	4809      	ldr	r0, [pc, #36]	; (4588 <opcode_0x0D()+0x4c>)
    4564:	7013      	strb	r3, [r2, #0]
    4566:	f890 02d5 	ldrb.w	r0, [r0, #725]	; 0x2d5
    456a:	880b      	ldrh	r3, [r1, #0]
    456c:	4418      	add	r0, r3
} // 0x0D - OR - Absolute
    456e:	b280      	uxth	r0, r0
    4570:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4576:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    457a:	e7f1      	b.n	4560 <opcode_0x0D()+0x24>
    457c:	200188a3 	.word	0x200188a3
    4580:	20004950 	.word	0x20004950
    4584:	2001888c 	.word	0x2001888c
    4588:	20015418 	.word	0x20015418

0000458c <opcode_0x1D()>:
uint16_t opcode_0x1D() {
    458c:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_X(1));
    458e:	2001      	movs	r0, #1
    4590:	f7fe fb54 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    4594:	4b0e      	ldr	r3, [pc, #56]	; (45d0 <opcode_0x1D()+0x44>)
    4596:	781a      	ldrb	r2, [r3, #0]
    4598:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    459a:	4a0e      	ldr	r2, [pc, #56]	; (45d4 <opcode_0x1D()+0x48>)
    459c:	b2c0      	uxtb	r0, r0
    459e:	0601      	lsls	r1, r0, #24
    45a0:	7018      	strb	r0, [r3, #0]
    45a2:	7813      	ldrb	r3, [r2, #0]
    45a4:	d40e      	bmi.n	45c4 <opcode_0x1D()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    45a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    45aa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    45ac:	b960      	cbnz	r0, 45c8 <opcode_0x1D()+0x3c>
    45ae:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x1D].length);
    45b2:	4909      	ldr	r1, [pc, #36]	; (45d8 <opcode_0x1D()+0x4c>)
    45b4:	4809      	ldr	r0, [pc, #36]	; (45dc <opcode_0x1D()+0x50>)
    45b6:	7013      	strb	r3, [r2, #0]
    45b8:	f890 0615 	ldrb.w	r0, [r0, #1557]	; 0x615
    45bc:	880b      	ldrh	r3, [r1, #0]
    45be:	4418      	add	r0, r3
} // 0x1D - OR - Absolute , X
    45c0:	b280      	uxth	r0, r0
    45c2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    45c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    45cc:	e7f1      	b.n	45b2 <opcode_0x1D()+0x26>
    45ce:	bf00      	nop
    45d0:	200188a3 	.word	0x200188a3
    45d4:	20004950 	.word	0x20004950
    45d8:	2001888c 	.word	0x2001888c
    45dc:	20015418 	.word	0x20015418

000045e0 <opcode_0x19()>:
uint16_t opcode_0x19() {
    45e0:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_Y(1));
    45e2:	2001      	movs	r0, #1
    45e4:	f7fe fb5a 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    45e8:	4b0e      	ldr	r3, [pc, #56]	; (4624 <opcode_0x19()+0x44>)
    45ea:	781a      	ldrb	r2, [r3, #0]
    45ec:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45ee:	4a0e      	ldr	r2, [pc, #56]	; (4628 <opcode_0x19()+0x48>)
    45f0:	b2c0      	uxtb	r0, r0
    45f2:	0601      	lsls	r1, r0, #24
    45f4:	7018      	strb	r0, [r3, #0]
    45f6:	7813      	ldrb	r3, [r2, #0]
    45f8:	d40e      	bmi.n	4618 <opcode_0x19()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    45fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    45fe:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4600:	b960      	cbnz	r0, 461c <opcode_0x19()+0x3c>
    4602:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x19].length);
    4606:	4909      	ldr	r1, [pc, #36]	; (462c <opcode_0x19()+0x4c>)
    4608:	4809      	ldr	r0, [pc, #36]	; (4630 <opcode_0x19()+0x50>)
    460a:	7013      	strb	r3, [r2, #0]
    460c:	f890 0545 	ldrb.w	r0, [r0, #1349]	; 0x545
    4610:	880b      	ldrh	r3, [r1, #0]
    4612:	4418      	add	r0, r3
} // 0x19 - OR - Absolute , Y
    4614:	b280      	uxth	r0, r0
    4616:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    461c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4620:	e7f1      	b.n	4606 <opcode_0x19()+0x26>
    4622:	bf00      	nop
    4624:	200188a3 	.word	0x200188a3
    4628:	20004950 	.word	0x20004950
    462c:	2001888c 	.word	0x2001888c
    4630:	20015418 	.word	0x20015418

00004634 <opcode_0x01()>:
uint16_t opcode_0x01() {
    4634:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    4636:	f7fe fb61 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    463a:	4b0e      	ldr	r3, [pc, #56]	; (4674 <opcode_0x01()+0x40>)
    463c:	781a      	ldrb	r2, [r3, #0]
    463e:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4640:	4a0d      	ldr	r2, [pc, #52]	; (4678 <opcode_0x01()+0x44>)
    4642:	b2c0      	uxtb	r0, r0
    4644:	0601      	lsls	r1, r0, #24
    4646:	7018      	strb	r0, [r3, #0]
    4648:	7813      	ldrb	r3, [r2, #0]
    464a:	d40e      	bmi.n	466a <opcode_0x01()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    464c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4650:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4652:	b960      	cbnz	r0, 466e <opcode_0x01()+0x3a>
    4654:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x01].length);
    4658:	4908      	ldr	r1, [pc, #32]	; (467c <opcode_0x01()+0x48>)
    465a:	4809      	ldr	r0, [pc, #36]	; (4680 <opcode_0x01()+0x4c>)
    465c:	7013      	strb	r3, [r2, #0]
    465e:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
    4662:	880b      	ldrh	r3, [r1, #0]
    4664:	4418      	add	r0, r3
} // 0x01 - OR - Indexed Indirect X
    4666:	b280      	uxth	r0, r0
    4668:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    466e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4672:	e7f1      	b.n	4658 <opcode_0x01()+0x24>
    4674:	200188a3 	.word	0x200188a3
    4678:	20004950 	.word	0x20004950
    467c:	2001888c 	.word	0x2001888c
    4680:	20015418 	.word	0x20015418

00004684 <opcode_0x11()>:
uint16_t opcode_0x11() {
    4684:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    4686:	2001      	movs	r0, #1
    4688:	f7fe fb62 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    468c:	4b0e      	ldr	r3, [pc, #56]	; (46c8 <opcode_0x11()+0x44>)
    468e:	781a      	ldrb	r2, [r3, #0]
    4690:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4692:	4a0e      	ldr	r2, [pc, #56]	; (46cc <opcode_0x11()+0x48>)
    4694:	b2c0      	uxtb	r0, r0
    4696:	0601      	lsls	r1, r0, #24
    4698:	7018      	strb	r0, [r3, #0]
    469a:	7813      	ldrb	r3, [r2, #0]
    469c:	d40e      	bmi.n	46bc <opcode_0x11()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    469e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46a2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    46a4:	b960      	cbnz	r0, 46c0 <opcode_0x11()+0x3c>
    46a6:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x11].length);
    46aa:	4909      	ldr	r1, [pc, #36]	; (46d0 <opcode_0x11()+0x4c>)
    46ac:	4809      	ldr	r0, [pc, #36]	; (46d4 <opcode_0x11()+0x50>)
    46ae:	7013      	strb	r3, [r2, #0]
    46b0:	f890 03a5 	ldrb.w	r0, [r0, #933]	; 0x3a5
    46b4:	880b      	ldrh	r3, [r1, #0]
    46b6:	4418      	add	r0, r3
} // 0x11 - OR - Indirect Indexed  Y
    46b8:	b280      	uxth	r0, r0
    46ba:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    46c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    46c4:	e7f1      	b.n	46aa <opcode_0x11()+0x26>
    46c6:	bf00      	nop
    46c8:	200188a3 	.word	0x200188a3
    46cc:	20004950 	.word	0x20004950
    46d0:	2001888c 	.word	0x2001888c
    46d4:	20015418 	.word	0x20015418

000046d8 <opcode_0x49()>:

// -------------------------------------------------
// EOR
// -------------------------------------------------
uint16_t opcode_0x49() {
    46d8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    46da:	4c12      	ldr	r4, [pc, #72]	; (4724 <opcode_0x49()+0x4c>)
    46dc:	2100      	movs	r1, #0
    46de:	8820      	ldrh	r0, [r4, #0]
    46e0:	3001      	adds	r0, #1
    46e2:	b280      	uxth	r0, r0
    46e4:	f7fd ff56 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    46e8:	4a0f      	ldr	r2, [pc, #60]	; (4728 <opcode_0x49()+0x50>)
    46ea:	7811      	ldrb	r1, [r2, #0]
    46ec:	ea81 0300 	eor.w	r3, r1, r0
    46f0:	b2db      	uxtb	r3, r3
    46f2:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    46f8:	4a0c      	ldr	r2, [pc, #48]	; (472c <opcode_0x49()+0x54>)
    46fa:	7813      	ldrb	r3, [r2, #0]
    46fc:	bf14      	ite	ne
    46fe:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4702:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4706:	4281      	cmp	r1, r0
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x49].length);
    4708:	4809      	ldr	r0, [pc, #36]	; (4730 <opcode_0x49()+0x58>)
    470a:	8821      	ldrh	r1, [r4, #0]
    470c:	f890 0f05 	ldrb.w	r0, [r0, #3845]	; 0xf05
    4710:	bf0c      	ite	eq
    4712:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4716:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    471a:	4408      	add	r0, r1
    471c:	7013      	strb	r3, [r2, #0]
} // 0x49 - EOR - Immediate
    471e:	b280      	uxth	r0, r0
    4720:	bd10      	pop	{r4, pc}
    4722:	bf00      	nop
    4724:	2001888c 	.word	0x2001888c
    4728:	200188a3 	.word	0x200188a3
    472c:	20004950 	.word	0x20004950
    4730:	20015418 	.word	0x20015418

00004734 <opcode_0x45()>:
uint16_t opcode_0x45() {
    4734:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4736:	4c15      	ldr	r4, [pc, #84]	; (478c <opcode_0x45()+0x58>)
    4738:	2100      	movs	r1, #0
    473a:	8820      	ldrh	r0, [r4, #0]
    473c:	3001      	adds	r0, #1
    473e:	b280      	uxth	r0, r0
    4740:	f7fd ff28 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4744:	4b12      	ldr	r3, [pc, #72]	; (4790 <opcode_0x45()+0x5c>)
    4746:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4748:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    474a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    474c:	f7fd ff22 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_ZeroPage());
    4750:	4a10      	ldr	r2, [pc, #64]	; (4794 <opcode_0x45()+0x60>)
    4752:	7811      	ldrb	r1, [r2, #0]
    4754:	ea81 0300 	eor.w	r3, r1, r0
    4758:	b2db      	uxtb	r3, r3
    475a:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    475c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4760:	4a0d      	ldr	r2, [pc, #52]	; (4798 <opcode_0x45()+0x64>)
    4762:	7813      	ldrb	r3, [r2, #0]
    4764:	bf14      	ite	ne
    4766:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    476a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    476e:	4281      	cmp	r1, r0
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x45].length);
    4770:	480a      	ldr	r0, [pc, #40]	; (479c <opcode_0x45()+0x68>)
    4772:	8821      	ldrh	r1, [r4, #0]
    4774:	f890 0e35 	ldrb.w	r0, [r0, #3637]	; 0xe35
    4778:	bf0c      	ite	eq
    477a:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    477e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4782:	4408      	add	r0, r1
    4784:	7013      	strb	r3, [r2, #0]
} // 0x45 - EOR - ZeroPage
    4786:	b280      	uxth	r0, r0
    4788:	bd10      	pop	{r4, pc}
    478a:	bf00      	nop
    478c:	2001888c 	.word	0x2001888c
    4790:	2001888a 	.word	0x2001888a
    4794:	200188a3 	.word	0x200188a3
    4798:	20004950 	.word	0x20004950
    479c:	20015418 	.word	0x20015418

000047a0 <opcode_0x55()>:
uint16_t opcode_0x55() {
    47a0:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_ZeroPage_X());
    47a2:	f7fe f9ef 	bl	2b84 <Fetch_ZeroPage_X()>
    47a6:	4a0f      	ldr	r2, [pc, #60]	; (47e4 <opcode_0x55()+0x44>)
    47a8:	7811      	ldrb	r1, [r2, #0]
    47aa:	ea80 0301 	eor.w	r3, r0, r1
    47ae:	b2db      	uxtb	r3, r3
    47b0:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    47b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    47b6:	4a0c      	ldr	r2, [pc, #48]	; (47e8 <opcode_0x55()+0x48>)
    47b8:	7813      	ldrb	r3, [r2, #0]
    47ba:	bf14      	ite	ne
    47bc:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    47c0:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    47c4:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x55].length);
    47c6:	4909      	ldr	r1, [pc, #36]	; (47ec <opcode_0x55()+0x4c>)
    47c8:	4809      	ldr	r0, [pc, #36]	; (47f0 <opcode_0x55()+0x50>)
    47ca:	bf0c      	ite	eq
    47cc:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    47d0:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    47d4:	f890 0175 	ldrb.w	r0, [r0, #373]	; 0x175
    47d8:	7013      	strb	r3, [r2, #0]
    47da:	880b      	ldrh	r3, [r1, #0]
    47dc:	4418      	add	r0, r3
} // 0x55 - EOR - ZeroPage , X
    47de:	b280      	uxth	r0, r0
    47e0:	bd08      	pop	{r3, pc}
    47e2:	bf00      	nop
    47e4:	200188a3 	.word	0x200188a3
    47e8:	20004950 	.word	0x20004950
    47ec:	2001888c 	.word	0x2001888c
    47f0:	20016418 	.word	0x20016418

000047f4 <opcode_0x4D()>:
uint16_t opcode_0x4D() {
    47f4:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute());
    47f6:	f7fe fa05 	bl	2c04 <Fetch_Absolute()>
    47fa:	4a0f      	ldr	r2, [pc, #60]	; (4838 <opcode_0x4D()+0x44>)
    47fc:	7811      	ldrb	r1, [r2, #0]
    47fe:	ea80 0301 	eor.w	r3, r0, r1
    4802:	b2db      	uxtb	r3, r3
    4804:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4806:	f013 0f80 	tst.w	r3, #128	; 0x80
    480a:	4a0c      	ldr	r2, [pc, #48]	; (483c <opcode_0x4D()+0x48>)
    480c:	7813      	ldrb	r3, [r2, #0]
    480e:	bf14      	ite	ne
    4810:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4814:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4818:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x4D].length);
    481a:	4909      	ldr	r1, [pc, #36]	; (4840 <opcode_0x4D()+0x4c>)
    481c:	4809      	ldr	r0, [pc, #36]	; (4844 <opcode_0x4D()+0x50>)
    481e:	bf0c      	ite	eq
    4820:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4824:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4828:	f890 0fd5 	ldrb.w	r0, [r0, #4053]	; 0xfd5
    482c:	7013      	strb	r3, [r2, #0]
    482e:	880b      	ldrh	r3, [r1, #0]
    4830:	4418      	add	r0, r3
} // 0x4D - EOR - Absolute
    4832:	b280      	uxth	r0, r0
    4834:	bd08      	pop	{r3, pc}
    4836:	bf00      	nop
    4838:	200188a3 	.word	0x200188a3
    483c:	20004950 	.word	0x20004950
    4840:	2001888c 	.word	0x2001888c
    4844:	20015418 	.word	0x20015418

00004848 <opcode_0x5D()>:
uint16_t opcode_0x5D() {
    4848:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_X(1));
    484a:	2001      	movs	r0, #1
    484c:	f7fe f9f6 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    4850:	4a0e      	ldr	r2, [pc, #56]	; (488c <opcode_0x5D()+0x44>)
    4852:	7811      	ldrb	r1, [r2, #0]
    4854:	ea80 0301 	eor.w	r3, r0, r1
    4858:	b2db      	uxtb	r3, r3
    485a:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    485c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4860:	4a0b      	ldr	r2, [pc, #44]	; (4890 <opcode_0x5D()+0x48>)
    4862:	7813      	ldrb	r3, [r2, #0]
    4864:	bf14      	ite	ne
    4866:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    486a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    486e:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x5D].length);
    4870:	4908      	ldr	r1, [pc, #32]	; (4894 <opcode_0x5D()+0x4c>)
    4872:	4809      	ldr	r0, [pc, #36]	; (4898 <opcode_0x5D()+0x50>)
    4874:	bf0c      	ite	eq
    4876:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    487a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    487e:	f890 0315 	ldrb.w	r0, [r0, #789]	; 0x315
    4882:	7013      	strb	r3, [r2, #0]
    4884:	880b      	ldrh	r3, [r1, #0]
    4886:	4418      	add	r0, r3
} // 0x5D - EOR - Absolute , X
    4888:	b280      	uxth	r0, r0
    488a:	bd08      	pop	{r3, pc}
    488c:	200188a3 	.word	0x200188a3
    4890:	20004950 	.word	0x20004950
    4894:	2001888c 	.word	0x2001888c
    4898:	20016418 	.word	0x20016418

0000489c <opcode_0x59()>:
uint16_t opcode_0x59() {
    489c:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    489e:	2001      	movs	r0, #1
    48a0:	f7fe f9fc 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    48a4:	4a0e      	ldr	r2, [pc, #56]	; (48e0 <opcode_0x59()+0x44>)
    48a6:	7811      	ldrb	r1, [r2, #0]
    48a8:	ea80 0301 	eor.w	r3, r0, r1
    48ac:	b2db      	uxtb	r3, r3
    48ae:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    48b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    48b4:	4a0b      	ldr	r2, [pc, #44]	; (48e4 <opcode_0x59()+0x48>)
    48b6:	7813      	ldrb	r3, [r2, #0]
    48b8:	bf14      	ite	ne
    48ba:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    48be:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    48c2:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x59].length);
    48c4:	4908      	ldr	r1, [pc, #32]	; (48e8 <opcode_0x59()+0x4c>)
    48c6:	4809      	ldr	r0, [pc, #36]	; (48ec <opcode_0x59()+0x50>)
    48c8:	bf0c      	ite	eq
    48ca:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    48ce:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    48d2:	f890 0245 	ldrb.w	r0, [r0, #581]	; 0x245
    48d6:	7013      	strb	r3, [r2, #0]
    48d8:	880b      	ldrh	r3, [r1, #0]
    48da:	4418      	add	r0, r3
} // 0x59 - EOR - Absolute , Y
    48dc:	b280      	uxth	r0, r0
    48de:	bd08      	pop	{r3, pc}
    48e0:	200188a3 	.word	0x200188a3
    48e4:	20004950 	.word	0x20004950
    48e8:	2001888c 	.word	0x2001888c
    48ec:	20016418 	.word	0x20016418

000048f0 <opcode_0x41()>:
uint16_t opcode_0x41() {
    48f0:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    48f2:	f7fe fa03 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    48f6:	4a0f      	ldr	r2, [pc, #60]	; (4934 <opcode_0x41()+0x44>)
    48f8:	7811      	ldrb	r1, [r2, #0]
    48fa:	ea80 0301 	eor.w	r3, r0, r1
    48fe:	b2db      	uxtb	r3, r3
    4900:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4902:	f013 0f80 	tst.w	r3, #128	; 0x80
    4906:	4a0c      	ldr	r2, [pc, #48]	; (4938 <opcode_0x41()+0x48>)
    4908:	7813      	ldrb	r3, [r2, #0]
    490a:	bf14      	ite	ne
    490c:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4910:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4914:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x41].length);
    4916:	4909      	ldr	r1, [pc, #36]	; (493c <opcode_0x41()+0x4c>)
    4918:	4809      	ldr	r0, [pc, #36]	; (4940 <opcode_0x41()+0x50>)
    491a:	bf0c      	ite	eq
    491c:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4920:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4924:	f890 0d65 	ldrb.w	r0, [r0, #3429]	; 0xd65
    4928:	7013      	strb	r3, [r2, #0]
    492a:	880b      	ldrh	r3, [r1, #0]
    492c:	4418      	add	r0, r3
} // 0x41 - EOR - Indexed Indirect X
    492e:	b280      	uxth	r0, r0
    4930:	bd08      	pop	{r3, pc}
    4932:	bf00      	nop
    4934:	200188a3 	.word	0x200188a3
    4938:	20004950 	.word	0x20004950
    493c:	2001888c 	.word	0x2001888c
    4940:	20015418 	.word	0x20015418

00004944 <opcode_0x51()>:
uint16_t opcode_0x51() {
    4944:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    4946:	2001      	movs	r0, #1
    4948:	f7fe fa02 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    494c:	4a0e      	ldr	r2, [pc, #56]	; (4988 <opcode_0x51()+0x44>)
    494e:	7811      	ldrb	r1, [r2, #0]
    4950:	ea80 0301 	eor.w	r3, r0, r1
    4954:	b2db      	uxtb	r3, r3
    4956:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4958:	f013 0f80 	tst.w	r3, #128	; 0x80
    495c:	4a0b      	ldr	r2, [pc, #44]	; (498c <opcode_0x51()+0x48>)
    495e:	7813      	ldrb	r3, [r2, #0]
    4960:	bf14      	ite	ne
    4962:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4966:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    496a:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x51].length);
    496c:	4908      	ldr	r1, [pc, #32]	; (4990 <opcode_0x51()+0x4c>)
    496e:	4809      	ldr	r0, [pc, #36]	; (4994 <opcode_0x51()+0x50>)
    4970:	bf0c      	ite	eq
    4972:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4976:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    497a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    497e:	7013      	strb	r3, [r2, #0]
    4980:	880b      	ldrh	r3, [r1, #0]
    4982:	4418      	add	r0, r3
} // 0x51 - EOR - Indirect Indexed  Y
    4984:	b280      	uxth	r0, r0
    4986:	bd08      	pop	{r3, pc}
    4988:	200188a3 	.word	0x200188a3
    498c:	20004950 	.word	0x20004950
    4990:	2001888c 	.word	0x2001888c
    4994:	20016418 	.word	0x20016418

00004998 <opcode_0xA9()>:

// -------------------------------------------------
// LDA
// -------------------------------------------------
uint16_t opcode_0xA9() {
    4998:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    499a:	4c10      	ldr	r4, [pc, #64]	; (49dc <opcode_0xA9()+0x44>)
    499c:	2100      	movs	r1, #0
    499e:	8820      	ldrh	r0, [r4, #0]
    49a0:	3001      	adds	r0, #1
    49a2:	b280      	uxth	r0, r0
    49a4:	f7fd fdf6 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    49a8:	4b0d      	ldr	r3, [pc, #52]	; (49e0 <opcode_0xA9()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    49aa:	4a0e      	ldr	r2, [pc, #56]	; (49e4 <opcode_0xA9()+0x4c>)
    49ac:	0601      	lsls	r1, r0, #24
    49ae:	7018      	strb	r0, [r3, #0]
    49b0:	7813      	ldrb	r3, [r2, #0]
    49b2:	d40d      	bmi.n	49d0 <opcode_0xA9()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    49b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    49b8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    49ba:	b958      	cbnz	r0, 49d4 <opcode_0xA9()+0x3c>
    49bc:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA9].length);
    49c0:	4809      	ldr	r0, [pc, #36]	; (49e8 <opcode_0xA9()+0x50>)
    49c2:	8821      	ldrh	r1, [r4, #0]
    49c4:	f890 0285 	ldrb.w	r0, [r0, #645]	; 0x285
    49c8:	7013      	strb	r3, [r2, #0]
    49ca:	4408      	add	r0, r1
} // 0xA9 - LDA - Immediate
    49cc:	b280      	uxth	r0, r0
    49ce:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    49d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    49d4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    49d8:	e7f2      	b.n	49c0 <opcode_0xA9()+0x28>
    49da:	bf00      	nop
    49dc:	2001888c 	.word	0x2001888c
    49e0:	200188a3 	.word	0x200188a3
    49e4:	20004950 	.word	0x20004950
    49e8:	20017418 	.word	0x20017418

000049ec <opcode_0xA5()>:
uint16_t opcode_0xA5() {
    49ec:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    49ee:	4c13      	ldr	r4, [pc, #76]	; (4a3c <opcode_0xA5()+0x50>)
    49f0:	2100      	movs	r1, #0
    49f2:	8820      	ldrh	r0, [r4, #0]
    49f4:	3001      	adds	r0, #1
    49f6:	b280      	uxth	r0, r0
    49f8:	f7fd fdcc 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    49fc:	4b10      	ldr	r3, [pc, #64]	; (4a40 <opcode_0xA5()+0x54>)
    49fe:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4a00:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4a02:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4a04:	f7fd fdc6 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    4a08:	4b0e      	ldr	r3, [pc, #56]	; (4a44 <opcode_0xA5()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a0a:	0601      	lsls	r1, r0, #24
    4a0c:	4a0e      	ldr	r2, [pc, #56]	; (4a48 <opcode_0xA5()+0x5c>)
    4a0e:	7018      	strb	r0, [r3, #0]
    4a10:	7813      	ldrb	r3, [r2, #0]
    4a12:	d40d      	bmi.n	4a30 <opcode_0xA5()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a18:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a1a:	b958      	cbnz	r0, 4a34 <opcode_0xA5()+0x48>
    4a1c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA5].length);
    4a20:	480a      	ldr	r0, [pc, #40]	; (4a4c <opcode_0xA5()+0x60>)
    4a22:	8821      	ldrh	r1, [r4, #0]
    4a24:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    4a28:	7013      	strb	r3, [r2, #0]
    4a2a:	4408      	add	r0, r1
} // 0xA5 - LDA - ZeroPage
    4a2c:	b280      	uxth	r0, r0
    4a2e:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4a34:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4a38:	e7f2      	b.n	4a20 <opcode_0xA5()+0x34>
    4a3a:	bf00      	nop
    4a3c:	2001888c 	.word	0x2001888c
    4a40:	2001888a 	.word	0x2001888a
    4a44:	200188a3 	.word	0x200188a3
    4a48:	20004950 	.word	0x20004950
    4a4c:	20017418 	.word	0x20017418

00004a50 <opcode_0xB5()>:
uint16_t opcode_0xB5() {
    4a50:	b508      	push	{r3, lr}
    register_a = Fetch_ZeroPage_X();
    4a52:	f7fe f897 	bl	2b84 <Fetch_ZeroPage_X()>
    4a56:	4b0d      	ldr	r3, [pc, #52]	; (4a8c <opcode_0xB5()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a58:	4a0d      	ldr	r2, [pc, #52]	; (4a90 <opcode_0xB5()+0x40>)
    4a5a:	0601      	lsls	r1, r0, #24
    4a5c:	7018      	strb	r0, [r3, #0]
    4a5e:	7813      	ldrb	r3, [r2, #0]
    4a60:	d40e      	bmi.n	4a80 <opcode_0xB5()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a66:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a68:	b960      	cbnz	r0, 4a84 <opcode_0xB5()+0x34>
    4a6a:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB5].length);
    4a6e:	4909      	ldr	r1, [pc, #36]	; (4a94 <opcode_0xB5()+0x44>)
    4a70:	4809      	ldr	r0, [pc, #36]	; (4a98 <opcode_0xB5()+0x48>)
    4a72:	7013      	strb	r3, [r2, #0]
    4a74:	f890 04f5 	ldrb.w	r0, [r0, #1269]	; 0x4f5
    4a78:	880b      	ldrh	r3, [r1, #0]
    4a7a:	4418      	add	r0, r3
} // 0xB5 - LDA - ZeroPage , X
    4a7c:	b280      	uxth	r0, r0
    4a7e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4a84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4a88:	e7f1      	b.n	4a6e <opcode_0xB5()+0x1e>
    4a8a:	bf00      	nop
    4a8c:	200188a3 	.word	0x200188a3
    4a90:	20004950 	.word	0x20004950
    4a94:	2001888c 	.word	0x2001888c
    4a98:	20017418 	.word	0x20017418

00004a9c <opcode_0xAD()>:
uint16_t opcode_0xAD() {
    4a9c:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    4a9e:	f7fe f8b1 	bl	2c04 <Fetch_Absolute()>
    4aa2:	4b0d      	ldr	r3, [pc, #52]	; (4ad8 <opcode_0xAD()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4aa4:	4a0d      	ldr	r2, [pc, #52]	; (4adc <opcode_0xAD()+0x40>)
    4aa6:	0601      	lsls	r1, r0, #24
    4aa8:	7018      	strb	r0, [r3, #0]
    4aaa:	7813      	ldrb	r3, [r2, #0]
    4aac:	d40e      	bmi.n	4acc <opcode_0xAD()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ab2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4ab4:	b960      	cbnz	r0, 4ad0 <opcode_0xAD()+0x34>
    4ab6:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xAD].length);
    4aba:	4909      	ldr	r1, [pc, #36]	; (4ae0 <opcode_0xAD()+0x44>)
    4abc:	4809      	ldr	r0, [pc, #36]	; (4ae4 <opcode_0xAD()+0x48>)
    4abe:	7013      	strb	r3, [r2, #0]
    4ac0:	f890 0355 	ldrb.w	r0, [r0, #853]	; 0x355
    4ac4:	880b      	ldrh	r3, [r1, #0]
    4ac6:	4418      	add	r0, r3
} // 0xAD - LDA - Absolute
    4ac8:	b280      	uxth	r0, r0
    4aca:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ad0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ad4:	e7f1      	b.n	4aba <opcode_0xAD()+0x1e>
    4ad6:	bf00      	nop
    4ad8:	200188a3 	.word	0x200188a3
    4adc:	20004950 	.word	0x20004950
    4ae0:	2001888c 	.word	0x2001888c
    4ae4:	20017418 	.word	0x20017418

00004ae8 <opcode_0xBD()>:
uint16_t opcode_0xBD() {
    4ae8:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_X(1);
    4aea:	2001      	movs	r0, #1
    4aec:	f7fe f8a6 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    4af0:	4b0c      	ldr	r3, [pc, #48]	; (4b24 <opcode_0xBD()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4af2:	4a0d      	ldr	r2, [pc, #52]	; (4b28 <opcode_0xBD()+0x40>)
    4af4:	0601      	lsls	r1, r0, #24
    4af6:	7018      	strb	r0, [r3, #0]
    4af8:	7813      	ldrb	r3, [r2, #0]
    4afa:	d40e      	bmi.n	4b1a <opcode_0xBD()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b00:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4b02:	b960      	cbnz	r0, 4b1e <opcode_0xBD()+0x36>
    4b04:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBD].length);
    4b08:	4908      	ldr	r1, [pc, #32]	; (4b2c <opcode_0xBD()+0x44>)
    4b0a:	4809      	ldr	r0, [pc, #36]	; (4b30 <opcode_0xBD()+0x48>)
    4b0c:	7013      	strb	r3, [r2, #0]
    4b0e:	f890 0695 	ldrb.w	r0, [r0, #1685]	; 0x695
    4b12:	880b      	ldrh	r3, [r1, #0]
    4b14:	4418      	add	r0, r3
} // 0xBD - LDA - Absolute , X
    4b16:	b280      	uxth	r0, r0
    4b18:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4b1e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4b22:	e7f1      	b.n	4b08 <opcode_0xBD()+0x20>
    4b24:	200188a3 	.word	0x200188a3
    4b28:	20004950 	.word	0x20004950
    4b2c:	2001888c 	.word	0x2001888c
    4b30:	20017418 	.word	0x20017418

00004b34 <opcode_0xB9()>:
uint16_t opcode_0xB9() {
    4b34:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    4b36:	2001      	movs	r0, #1
    4b38:	f7fe f8b0 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    4b3c:	4b0c      	ldr	r3, [pc, #48]	; (4b70 <opcode_0xB9()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b3e:	4a0d      	ldr	r2, [pc, #52]	; (4b74 <opcode_0xB9()+0x40>)
    4b40:	0601      	lsls	r1, r0, #24
    4b42:	7018      	strb	r0, [r3, #0]
    4b44:	7813      	ldrb	r3, [r2, #0]
    4b46:	d40e      	bmi.n	4b66 <opcode_0xB9()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b4c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4b4e:	b960      	cbnz	r0, 4b6a <opcode_0xB9()+0x36>
    4b50:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB9].length);
    4b54:	4908      	ldr	r1, [pc, #32]	; (4b78 <opcode_0xB9()+0x44>)
    4b56:	4809      	ldr	r0, [pc, #36]	; (4b7c <opcode_0xB9()+0x48>)
    4b58:	7013      	strb	r3, [r2, #0]
    4b5a:	f890 05c5 	ldrb.w	r0, [r0, #1477]	; 0x5c5
    4b5e:	880b      	ldrh	r3, [r1, #0]
    4b60:	4418      	add	r0, r3
} // 0xB9 - LDA - Absolute , Y
    4b62:	b280      	uxth	r0, r0
    4b64:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4b6a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4b6e:	e7f1      	b.n	4b54 <opcode_0xB9()+0x20>
    4b70:	200188a3 	.word	0x200188a3
    4b74:	20004950 	.word	0x20004950
    4b78:	2001888c 	.word	0x2001888c
    4b7c:	20017418 	.word	0x20017418

00004b80 <opcode_0xA1()>:
uint16_t opcode_0xA1() {
    4b80:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    4b82:	f7fe f8bb 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    4b86:	4b0d      	ldr	r3, [pc, #52]	; (4bbc <opcode_0xA1()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b88:	4a0d      	ldr	r2, [pc, #52]	; (4bc0 <opcode_0xA1()+0x40>)
    4b8a:	0601      	lsls	r1, r0, #24
    4b8c:	7018      	strb	r0, [r3, #0]
    4b8e:	7813      	ldrb	r3, [r2, #0]
    4b90:	d40e      	bmi.n	4bb0 <opcode_0xA1()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b96:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4b98:	b960      	cbnz	r0, 4bb4 <opcode_0xA1()+0x34>
    4b9a:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA1].length);
    4b9e:	4909      	ldr	r1, [pc, #36]	; (4bc4 <opcode_0xA1()+0x44>)
    4ba0:	4809      	ldr	r0, [pc, #36]	; (4bc8 <opcode_0xA1()+0x48>)
    4ba2:	7013      	strb	r3, [r2, #0]
    4ba4:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
    4ba8:	880b      	ldrh	r3, [r1, #0]
    4baa:	4418      	add	r0, r3
} // 0xA1 - LDA - Indexed Indirect X
    4bac:	b280      	uxth	r0, r0
    4bae:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4bb4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4bb8:	e7f1      	b.n	4b9e <opcode_0xA1()+0x1e>
    4bba:	bf00      	nop
    4bbc:	200188a3 	.word	0x200188a3
    4bc0:	20004950 	.word	0x20004950
    4bc4:	2001888c 	.word	0x2001888c
    4bc8:	20017418 	.word	0x20017418

00004bcc <opcode_0xB1()>:
uint16_t opcode_0xB1() {
    4bcc:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    4bce:	2001      	movs	r0, #1
    4bd0:	f7fe f8be 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    4bd4:	4b0c      	ldr	r3, [pc, #48]	; (4c08 <opcode_0xB1()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4bd6:	4a0d      	ldr	r2, [pc, #52]	; (4c0c <opcode_0xB1()+0x40>)
    4bd8:	0601      	lsls	r1, r0, #24
    4bda:	7018      	strb	r0, [r3, #0]
    4bdc:	7813      	ldrb	r3, [r2, #0]
    4bde:	d40e      	bmi.n	4bfe <opcode_0xB1()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4be4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4be6:	b960      	cbnz	r0, 4c02 <opcode_0xB1()+0x36>
    4be8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB1].length);
    4bec:	4908      	ldr	r1, [pc, #32]	; (4c10 <opcode_0xB1()+0x44>)
    4bee:	4809      	ldr	r0, [pc, #36]	; (4c14 <opcode_0xB1()+0x48>)
    4bf0:	7013      	strb	r3, [r2, #0]
    4bf2:	f890 0425 	ldrb.w	r0, [r0, #1061]	; 0x425
    4bf6:	880b      	ldrh	r3, [r1, #0]
    4bf8:	4418      	add	r0, r3
} // 0xB1 - LDA - Indirect Indexed  Y
    4bfa:	b280      	uxth	r0, r0
    4bfc:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4c02:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4c06:	e7f1      	b.n	4bec <opcode_0xB1()+0x20>
    4c08:	200188a3 	.word	0x200188a3
    4c0c:	20004950 	.word	0x20004950
    4c10:	2001888c 	.word	0x2001888c
    4c14:	20017418 	.word	0x20017418

00004c18 <opcode_0xA2()>:

// -------------------------------------------------
// LDX
// -------------------------------------------------
uint16_t opcode_0xA2() {
    4c18:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4c1a:	4c10      	ldr	r4, [pc, #64]	; (4c5c <opcode_0xA2()+0x44>)
    4c1c:	2100      	movs	r1, #0
    4c1e:	8820      	ldrh	r0, [r4, #0]
    4c20:	3001      	adds	r0, #1
    4c22:	b280      	uxth	r0, r0
    4c24:	f7fd fcb6 	bl	2594 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    4c28:	4b0d      	ldr	r3, [pc, #52]	; (4c60 <opcode_0xA2()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c2a:	4a0e      	ldr	r2, [pc, #56]	; (4c64 <opcode_0xA2()+0x4c>)
    4c2c:	0601      	lsls	r1, r0, #24
    4c2e:	7018      	strb	r0, [r3, #0]
    4c30:	7813      	ldrb	r3, [r2, #0]
    4c32:	d40d      	bmi.n	4c50 <opcode_0xA2()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c38:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4c3a:	b958      	cbnz	r0, 4c54 <opcode_0xA2()+0x3c>
    4c3c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xA2].length);
    4c40:	4809      	ldr	r0, [pc, #36]	; (4c68 <opcode_0xA2()+0x50>)
    4c42:	8821      	ldrh	r1, [r4, #0]
    4c44:	f890 0119 	ldrb.w	r0, [r0, #281]	; 0x119
    4c48:	7013      	strb	r3, [r2, #0]
    4c4a:	4408      	add	r0, r1
} // 0xA2 - LDX - Immediate
    4c4c:	b280      	uxth	r0, r0
    4c4e:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4c54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4c58:	e7f2      	b.n	4c40 <opcode_0xA2()+0x28>
    4c5a:	bf00      	nop
    4c5c:	2001888c 	.word	0x2001888c
    4c60:	200188a4 	.word	0x200188a4
    4c64:	20004950 	.word	0x20004950
    4c68:	20017418 	.word	0x20017418

00004c6c <opcode_0xA6()>:
uint16_t opcode_0xA6() {
    4c6c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4c6e:	4c13      	ldr	r4, [pc, #76]	; (4cbc <opcode_0xA6()+0x50>)
    4c70:	2100      	movs	r1, #0
    4c72:	8820      	ldrh	r0, [r4, #0]
    4c74:	3001      	adds	r0, #1
    4c76:	b280      	uxth	r0, r0
    4c78:	f7fd fc8c 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4c7c:	4b10      	ldr	r3, [pc, #64]	; (4cc0 <opcode_0xA6()+0x54>)
    4c7e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4c80:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4c82:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4c84:	f7fd fc86 	bl	2594 <read_byte(unsigned short, bool)>
    register_x = Fetch_ZeroPage();
    4c88:	4b0e      	ldr	r3, [pc, #56]	; (4cc4 <opcode_0xA6()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c8a:	0601      	lsls	r1, r0, #24
    4c8c:	4a0e      	ldr	r2, [pc, #56]	; (4cc8 <opcode_0xA6()+0x5c>)
    4c8e:	7018      	strb	r0, [r3, #0]
    4c90:	7813      	ldrb	r3, [r2, #0]
    4c92:	d40d      	bmi.n	4cb0 <opcode_0xA6()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c98:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4c9a:	b958      	cbnz	r0, 4cb4 <opcode_0xA6()+0x48>
    4c9c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xA6].length);
    4ca0:	480a      	ldr	r0, [pc, #40]	; (4ccc <opcode_0xA6()+0x60>)
    4ca2:	8821      	ldrh	r1, [r4, #0]
    4ca4:	f890 01e9 	ldrb.w	r0, [r0, #489]	; 0x1e9
    4ca8:	7013      	strb	r3, [r2, #0]
    4caa:	4408      	add	r0, r1
} // 0xA6 - LDX - ZeroPage
    4cac:	b280      	uxth	r0, r0
    4cae:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4cb4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4cb8:	e7f2      	b.n	4ca0 <opcode_0xA6()+0x34>
    4cba:	bf00      	nop
    4cbc:	2001888c 	.word	0x2001888c
    4cc0:	2001888a 	.word	0x2001888a
    4cc4:	200188a4 	.word	0x200188a4
    4cc8:	20004950 	.word	0x20004950
    4ccc:	20017418 	.word	0x20017418

00004cd0 <opcode_0xB6()>:
uint16_t opcode_0xB6() {
    4cd0:	b508      	push	{r3, lr}
    register_x = Fetch_ZeroPage_Y();
    4cd2:	f7fd ff77 	bl	2bc4 <Fetch_ZeroPage_Y()>
    4cd6:	4b0d      	ldr	r3, [pc, #52]	; (4d0c <opcode_0xB6()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4cd8:	4a0d      	ldr	r2, [pc, #52]	; (4d10 <opcode_0xB6()+0x40>)
    4cda:	0601      	lsls	r1, r0, #24
    4cdc:	7018      	strb	r0, [r3, #0]
    4cde:	7813      	ldrb	r3, [r2, #0]
    4ce0:	d40e      	bmi.n	4d00 <opcode_0xB6()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ce6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4ce8:	b960      	cbnz	r0, 4d04 <opcode_0xB6()+0x34>
    4cea:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xB6].length);
    4cee:	4909      	ldr	r1, [pc, #36]	; (4d14 <opcode_0xB6()+0x44>)
    4cf0:	4809      	ldr	r0, [pc, #36]	; (4d18 <opcode_0xB6()+0x48>)
    4cf2:	7013      	strb	r3, [r2, #0]
    4cf4:	f890 0529 	ldrb.w	r0, [r0, #1321]	; 0x529
    4cf8:	880b      	ldrh	r3, [r1, #0]
    4cfa:	4418      	add	r0, r3
} // 0xB6 - LDX - ZeroPage , Y
    4cfc:	b280      	uxth	r0, r0
    4cfe:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4d04:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d08:	e7f1      	b.n	4cee <opcode_0xB6()+0x1e>
    4d0a:	bf00      	nop
    4d0c:	200188a4 	.word	0x200188a4
    4d10:	20004950 	.word	0x20004950
    4d14:	2001888c 	.word	0x2001888c
    4d18:	20017418 	.word	0x20017418

00004d1c <opcode_0xAE()>:
uint16_t opcode_0xAE() {
    4d1c:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute();
    4d1e:	f7fd ff71 	bl	2c04 <Fetch_Absolute()>
    4d22:	4b0d      	ldr	r3, [pc, #52]	; (4d58 <opcode_0xAE()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d24:	4a0d      	ldr	r2, [pc, #52]	; (4d5c <opcode_0xAE()+0x40>)
    4d26:	0601      	lsls	r1, r0, #24
    4d28:	7018      	strb	r0, [r3, #0]
    4d2a:	7813      	ldrb	r3, [r2, #0]
    4d2c:	d40e      	bmi.n	4d4c <opcode_0xAE()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d32:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4d34:	b960      	cbnz	r0, 4d50 <opcode_0xAE()+0x34>
    4d36:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xAE].length);
    4d3a:	4909      	ldr	r1, [pc, #36]	; (4d60 <opcode_0xAE()+0x44>)
    4d3c:	4809      	ldr	r0, [pc, #36]	; (4d64 <opcode_0xAE()+0x48>)
    4d3e:	7013      	strb	r3, [r2, #0]
    4d40:	f890 0389 	ldrb.w	r0, [r0, #905]	; 0x389
    4d44:	880b      	ldrh	r3, [r1, #0]
    4d46:	4418      	add	r0, r3
} // 0xAE - LDX - Absolute
    4d48:	b280      	uxth	r0, r0
    4d4a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4d50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d54:	e7f1      	b.n	4d3a <opcode_0xAE()+0x1e>
    4d56:	bf00      	nop
    4d58:	200188a4 	.word	0x200188a4
    4d5c:	20004950 	.word	0x20004950
    4d60:	2001888c 	.word	0x2001888c
    4d64:	20017418 	.word	0x20017418

00004d68 <opcode_0xBE()>:
uint16_t opcode_0xBE() {
    4d68:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute_Y(1);
    4d6a:	2001      	movs	r0, #1
    4d6c:	f7fd ff96 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    4d70:	4b0c      	ldr	r3, [pc, #48]	; (4da4 <opcode_0xBE()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d72:	4a0d      	ldr	r2, [pc, #52]	; (4da8 <opcode_0xBE()+0x40>)
    4d74:	0601      	lsls	r1, r0, #24
    4d76:	7018      	strb	r0, [r3, #0]
    4d78:	7813      	ldrb	r3, [r2, #0]
    4d7a:	d40e      	bmi.n	4d9a <opcode_0xBE()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d80:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4d82:	b960      	cbnz	r0, 4d9e <opcode_0xBE()+0x36>
    4d84:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xBE].length);
    4d88:	4908      	ldr	r1, [pc, #32]	; (4dac <opcode_0xBE()+0x44>)
    4d8a:	4809      	ldr	r0, [pc, #36]	; (4db0 <opcode_0xBE()+0x48>)
    4d8c:	7013      	strb	r3, [r2, #0]
    4d8e:	f890 06c9 	ldrb.w	r0, [r0, #1737]	; 0x6c9
    4d92:	880b      	ldrh	r3, [r1, #0]
    4d94:	4418      	add	r0, r3
} // 0xBE - LDX - Absolute , Y
    4d96:	b280      	uxth	r0, r0
    4d98:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4d9e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4da2:	e7f1      	b.n	4d88 <opcode_0xBE()+0x20>
    4da4:	200188a4 	.word	0x200188a4
    4da8:	20004950 	.word	0x20004950
    4dac:	2001888c 	.word	0x2001888c
    4db0:	20017418 	.word	0x20017418

00004db4 <opcode_0xA0()>:

// -------------------------------------------------          
// LDY                                                        
// -------------------------------------------------          
uint16_t opcode_0xA0() {
    4db4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4db6:	4c10      	ldr	r4, [pc, #64]	; (4df8 <opcode_0xA0()+0x44>)
    4db8:	2100      	movs	r1, #0
    4dba:	8820      	ldrh	r0, [r4, #0]
    4dbc:	3001      	adds	r0, #1
    4dbe:	b280      	uxth	r0, r0
    4dc0:	f7fd fbe8 	bl	2594 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    4dc4:	4b0d      	ldr	r3, [pc, #52]	; (4dfc <opcode_0xA0()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4dc6:	4a0e      	ldr	r2, [pc, #56]	; (4e00 <opcode_0xA0()+0x4c>)
    4dc8:	0601      	lsls	r1, r0, #24
    4dca:	7018      	strb	r0, [r3, #0]
    4dcc:	7813      	ldrb	r3, [r2, #0]
    4dce:	d40d      	bmi.n	4dec <opcode_0xA0()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4dd4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4dd6:	b958      	cbnz	r0, 4df0 <opcode_0xA0()+0x3c>
    4dd8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA0].length);
    4ddc:	4809      	ldr	r0, [pc, #36]	; (4e04 <opcode_0xA0()+0x50>)
    4dde:	8821      	ldrh	r1, [r4, #0]
    4de0:	f890 00b1 	ldrb.w	r0, [r0, #177]	; 0xb1
    4de4:	7013      	strb	r3, [r2, #0]
    4de6:	4408      	add	r0, r1
} // 0xA0 - LDY - Immediate
    4de8:	b280      	uxth	r0, r0
    4dea:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4df0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4df4:	e7f2      	b.n	4ddc <opcode_0xA0()+0x28>
    4df6:	bf00      	nop
    4df8:	2001888c 	.word	0x2001888c
    4dfc:	200188a5 	.word	0x200188a5
    4e00:	20004950 	.word	0x20004950
    4e04:	20017418 	.word	0x20017418

00004e08 <opcode_0xA4()>:
uint16_t opcode_0xA4() {
    4e08:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4e0a:	4c13      	ldr	r4, [pc, #76]	; (4e58 <opcode_0xA4()+0x50>)
    4e0c:	2100      	movs	r1, #0
    4e0e:	8820      	ldrh	r0, [r4, #0]
    4e10:	3001      	adds	r0, #1
    4e12:	b280      	uxth	r0, r0
    4e14:	f7fd fbbe 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4e18:	4b10      	ldr	r3, [pc, #64]	; (4e5c <opcode_0xA4()+0x54>)
    4e1a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4e1c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4e1e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4e20:	f7fd fbb8 	bl	2594 <read_byte(unsigned short, bool)>
    register_y = Fetch_ZeroPage();
    4e24:	4b0e      	ldr	r3, [pc, #56]	; (4e60 <opcode_0xA4()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e26:	0601      	lsls	r1, r0, #24
    4e28:	4a0e      	ldr	r2, [pc, #56]	; (4e64 <opcode_0xA4()+0x5c>)
    4e2a:	7018      	strb	r0, [r3, #0]
    4e2c:	7813      	ldrb	r3, [r2, #0]
    4e2e:	d40d      	bmi.n	4e4c <opcode_0xA4()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e34:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4e36:	b958      	cbnz	r0, 4e50 <opcode_0xA4()+0x48>
    4e38:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA4].length);
    4e3c:	480a      	ldr	r0, [pc, #40]	; (4e68 <opcode_0xA4()+0x60>)
    4e3e:	8821      	ldrh	r1, [r4, #0]
    4e40:	f890 0181 	ldrb.w	r0, [r0, #385]	; 0x181
    4e44:	7013      	strb	r3, [r2, #0]
    4e46:	4408      	add	r0, r1
} // 0xA4 - LDY - ZeroPage
    4e48:	b280      	uxth	r0, r0
    4e4a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4e50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e54:	e7f2      	b.n	4e3c <opcode_0xA4()+0x34>
    4e56:	bf00      	nop
    4e58:	2001888c 	.word	0x2001888c
    4e5c:	2001888a 	.word	0x2001888a
    4e60:	200188a5 	.word	0x200188a5
    4e64:	20004950 	.word	0x20004950
    4e68:	20017418 	.word	0x20017418

00004e6c <opcode_0xB4()>:
uint16_t opcode_0xB4() {
    4e6c:	b508      	push	{r3, lr}
    register_y = Fetch_ZeroPage_X();
    4e6e:	f7fd fe89 	bl	2b84 <Fetch_ZeroPage_X()>
    4e72:	4b0d      	ldr	r3, [pc, #52]	; (4ea8 <opcode_0xB4()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e74:	4a0d      	ldr	r2, [pc, #52]	; (4eac <opcode_0xB4()+0x40>)
    4e76:	0601      	lsls	r1, r0, #24
    4e78:	7018      	strb	r0, [r3, #0]
    4e7a:	7813      	ldrb	r3, [r2, #0]
    4e7c:	d40e      	bmi.n	4e9c <opcode_0xB4()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e82:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4e84:	b960      	cbnz	r0, 4ea0 <opcode_0xB4()+0x34>
    4e86:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xB4].length);
    4e8a:	4909      	ldr	r1, [pc, #36]	; (4eb0 <opcode_0xB4()+0x44>)
    4e8c:	4809      	ldr	r0, [pc, #36]	; (4eb4 <opcode_0xB4()+0x48>)
    4e8e:	7013      	strb	r3, [r2, #0]
    4e90:	f890 04c1 	ldrb.w	r0, [r0, #1217]	; 0x4c1
    4e94:	880b      	ldrh	r3, [r1, #0]
    4e96:	4418      	add	r0, r3
} // 0xB4 - LDY - ZeroPage , X
    4e98:	b280      	uxth	r0, r0
    4e9a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ea0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ea4:	e7f1      	b.n	4e8a <opcode_0xB4()+0x1e>
    4ea6:	bf00      	nop
    4ea8:	200188a5 	.word	0x200188a5
    4eac:	20004950 	.word	0x20004950
    4eb0:	2001888c 	.word	0x2001888c
    4eb4:	20017418 	.word	0x20017418

00004eb8 <opcode_0xAC()>:
uint16_t opcode_0xAC() {
    4eb8:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute();
    4eba:	f7fd fea3 	bl	2c04 <Fetch_Absolute()>
    4ebe:	4b0d      	ldr	r3, [pc, #52]	; (4ef4 <opcode_0xAC()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ec0:	4a0d      	ldr	r2, [pc, #52]	; (4ef8 <opcode_0xAC()+0x40>)
    4ec2:	0601      	lsls	r1, r0, #24
    4ec4:	7018      	strb	r0, [r3, #0]
    4ec6:	7813      	ldrb	r3, [r2, #0]
    4ec8:	d40e      	bmi.n	4ee8 <opcode_0xAC()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ece:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4ed0:	b960      	cbnz	r0, 4eec <opcode_0xAC()+0x34>
    4ed2:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xAC].length);
    4ed6:	4909      	ldr	r1, [pc, #36]	; (4efc <opcode_0xAC()+0x44>)
    4ed8:	4809      	ldr	r0, [pc, #36]	; (4f00 <opcode_0xAC()+0x48>)
    4eda:	7013      	strb	r3, [r2, #0]
    4edc:	f890 0321 	ldrb.w	r0, [r0, #801]	; 0x321
    4ee0:	880b      	ldrh	r3, [r1, #0]
    4ee2:	4418      	add	r0, r3
} // 0xAC - LDY - Absolute
    4ee4:	b280      	uxth	r0, r0
    4ee6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4eec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ef0:	e7f1      	b.n	4ed6 <opcode_0xAC()+0x1e>
    4ef2:	bf00      	nop
    4ef4:	200188a5 	.word	0x200188a5
    4ef8:	20004950 	.word	0x20004950
    4efc:	2001888c 	.word	0x2001888c
    4f00:	20017418 	.word	0x20017418

00004f04 <opcode_0xBC()>:
uint16_t opcode_0xBC() {
    4f04:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute_X(1);
    4f06:	2001      	movs	r0, #1
    4f08:	f7fd fe98 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    4f0c:	4b0c      	ldr	r3, [pc, #48]	; (4f40 <opcode_0xBC()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f0e:	4a0d      	ldr	r2, [pc, #52]	; (4f44 <opcode_0xBC()+0x40>)
    4f10:	0601      	lsls	r1, r0, #24
    4f12:	7018      	strb	r0, [r3, #0]
    4f14:	7813      	ldrb	r3, [r2, #0]
    4f16:	d40e      	bmi.n	4f36 <opcode_0xBC()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f1c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f1e:	b960      	cbnz	r0, 4f3a <opcode_0xBC()+0x36>
    4f20:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xBC].length);
    4f24:	4908      	ldr	r1, [pc, #32]	; (4f48 <opcode_0xBC()+0x44>)
    4f26:	4809      	ldr	r0, [pc, #36]	; (4f4c <opcode_0xBC()+0x48>)
    4f28:	7013      	strb	r3, [r2, #0]
    4f2a:	f890 0661 	ldrb.w	r0, [r0, #1633]	; 0x661
    4f2e:	880b      	ldrh	r3, [r1, #0]
    4f30:	4418      	add	r0, r3
} // 0xBC - LDY - Absolute , X
    4f32:	b280      	uxth	r0, r0
    4f34:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f3a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f3e:	e7f1      	b.n	4f24 <opcode_0xBC()+0x20>
    4f40:	200188a5 	.word	0x200188a5
    4f44:	20004950 	.word	0x20004950
    4f48:	2001888c 	.word	0x2001888c
    4f4c:	20017418 	.word	0x20017418

00004f50 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    4f50:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4f52:	4c12      	ldr	r4, [pc, #72]	; (4f9c <opcode_0x24()+0x4c>)
    4f54:	2100      	movs	r1, #0
    4f56:	8820      	ldrh	r0, [r4, #0]
    4f58:	3001      	adds	r0, #1
    4f5a:	b280      	uxth	r0, r0
    4f5c:	f7fd fb1a 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4f60:	4b0f      	ldr	r3, [pc, #60]	; (4fa0 <opcode_0x24()+0x50>)
    4f62:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4f64:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4f66:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4f68:	f7fd fb14 	bl	2594 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    4f6c:	490d      	ldr	r1, [pc, #52]	; (4fa4 <opcode_0x24()+0x54>)
    4f6e:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    4f72:	780a      	ldrb	r2, [r1, #0]
    4f74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    4f78:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    4f7a:	4a0b      	ldr	r2, [pc, #44]	; (4fa8 <opcode_0x24()+0x58>)
    4f7c:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f7e:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    4f80:	480a      	ldr	r0, [pc, #40]	; (4fac <opcode_0x24()+0x5c>)
    4f82:	8822      	ldrh	r2, [r4, #0]
    4f84:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f88:	bf0c      	ite	eq
    4f8a:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f8e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    4f92:	4410      	add	r0, r2
    4f94:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    4f96:	b280      	uxth	r0, r0
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	bf00      	nop
    4f9c:	2001888c 	.word	0x2001888c
    4fa0:	2001888a 	.word	0x2001888a
    4fa4:	20004950 	.word	0x20004950
    4fa8:	200188a3 	.word	0x200188a3
    4fac:	20015418 	.word	0x20015418

00004fb0 <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    4fb0:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    4fb2:	f7fd fe27 	bl	2c04 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    4fb6:	490d      	ldr	r1, [pc, #52]	; (4fec <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    4fb8:	4b0d      	ldr	r3, [pc, #52]	; (4ff0 <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    4fba:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    4fbc:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    4fc0:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    4fc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4fc8:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    4fcc:	4809      	ldr	r0, [pc, #36]	; (4ff4 <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    4fce:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    4fd2:	4a09      	ldr	r2, [pc, #36]	; (4ff8 <opcode_0x2C()+0x48>)
    4fd4:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4fd8:	bf0c      	ite	eq
    4fda:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4fde:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4fe2:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    4fe4:	8813      	ldrh	r3, [r2, #0]
    4fe6:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    4fe8:	b280      	uxth	r0, r0
    4fea:	bd08      	pop	{r3, pc}
    4fec:	20004950 	.word	0x20004950
    4ff0:	200188a3 	.word	0x200188a3
    4ff4:	20015418 	.word	0x20015418
    4ff8:	2001888c 	.word	0x2001888c

00004ffc <opcode_0xC9()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC9() {
    4ffc:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4ffe:	4c14      	ldr	r4, [pc, #80]	; (5050 <opcode_0xC9()+0x54>)
    5000:	2100      	movs	r1, #0
    5002:	8820      	ldrh	r0, [r4, #0]
    5004:	3001      	adds	r0, #1
    5006:	b280      	uxth	r0, r0
    5008:	f7fd fac4 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    500c:	4b11      	ldr	r3, [pc, #68]	; (5054 <opcode_0xC9()+0x58>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    500e:	4912      	ldr	r1, [pc, #72]	; (5058 <opcode_0xC9()+0x5c>)
    temp = register_a - local_data;
    5010:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5012:	780b      	ldrb	r3, [r1, #0]
    5014:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5016:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    501a:	bf94      	ite	ls
    501c:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5020:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5024:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5026:	0600      	lsls	r0, r0, #24
    5028:	d40d      	bmi.n	5046 <opcode_0xC9()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    502a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    502e:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5030:	b95a      	cbnz	r2, 504a <opcode_0xC9()+0x4e>
    5032:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    5036:	4809      	ldr	r0, [pc, #36]	; (505c <opcode_0xC9()+0x60>)
    5038:	8822      	ldrh	r2, [r4, #0]
    503a:	f890 0905 	ldrb.w	r0, [r0, #2309]	; 0x905
    503e:	700b      	strb	r3, [r1, #0]
    5040:	4410      	add	r0, r2
} // 0xC9 - CMP - Immediate
    5042:	b280      	uxth	r0, r0
    5044:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    504a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    504e:	e7f2      	b.n	5036 <opcode_0xC9()+0x3a>
    5050:	2001888c 	.word	0x2001888c
    5054:	200188a3 	.word	0x200188a3
    5058:	20004950 	.word	0x20004950
    505c:	20017418 	.word	0x20017418

00005060 <opcode_0xC5()>:
uint16_t opcode_0xC5() {
    5060:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    5062:	4c17      	ldr	r4, [pc, #92]	; (50c0 <opcode_0xC5()+0x60>)
    5064:	2100      	movs	r1, #0
    5066:	8820      	ldrh	r0, [r4, #0]
    5068:	3001      	adds	r0, #1
    506a:	b280      	uxth	r0, r0
    506c:	f7fd fa92 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    5070:	4b14      	ldr	r3, [pc, #80]	; (50c4 <opcode_0xC5()+0x64>)
    5072:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5074:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5076:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5078:	f7fd fa8c 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    507c:	4b12      	ldr	r3, [pc, #72]	; (50c8 <opcode_0xC5()+0x68>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    507e:	4913      	ldr	r1, [pc, #76]	; (50cc <opcode_0xC5()+0x6c>)
    temp = register_a - local_data;
    5080:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5082:	780b      	ldrb	r3, [r1, #0]
    5084:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5086:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    508a:	bf2c      	ite	cs
    508c:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5090:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5094:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5096:	0600      	lsls	r0, r0, #24
    5098:	d40d      	bmi.n	50b6 <opcode_0xC5()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    509a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    509e:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    50a0:	b95a      	cbnz	r2, 50ba <opcode_0xC5()+0x5a>
    50a2:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CMP(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC5].length);
    50a6:	480a      	ldr	r0, [pc, #40]	; (50d0 <opcode_0xC5()+0x70>)
    50a8:	8822      	ldrh	r2, [r4, #0]
    50aa:	f890 0835 	ldrb.w	r0, [r0, #2101]	; 0x835
    50ae:	700b      	strb	r3, [r1, #0]
    50b0:	4410      	add	r0, r2
} // 0xC5 - CMP - ZeroPage
    50b2:	b280      	uxth	r0, r0
    50b4:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    50b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    50ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    50be:	e7f2      	b.n	50a6 <opcode_0xC5()+0x46>
    50c0:	2001888c 	.word	0x2001888c
    50c4:	2001888a 	.word	0x2001888a
    50c8:	200188a3 	.word	0x200188a3
    50cc:	20004950 	.word	0x20004950
    50d0:	20017418 	.word	0x20017418

000050d4 <opcode_0xD5()>:
uint16_t opcode_0xD5() {
    50d4:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_ZeroPage_X());
    50d6:	f7fd fd55 	bl	2b84 <Fetch_ZeroPage_X()>
    temp = register_a - local_data;
    50da:	4b11      	ldr	r3, [pc, #68]	; (5120 <opcode_0xD5()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50dc:	4911      	ldr	r1, [pc, #68]	; (5124 <opcode_0xD5()+0x50>)
    temp = register_a - local_data;
    50de:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50e0:	780b      	ldrb	r3, [r1, #0]
    50e2:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    50e4:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50e8:	bf94      	ite	ls
    50ea:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    50ee:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    50f2:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    50f4:	0600      	lsls	r0, r0, #24
    50f6:	d40e      	bmi.n	5116 <opcode_0xD5()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    50f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50fc:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    50fe:	b962      	cbnz	r2, 511a <opcode_0xD5()+0x46>
    5100:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD5].length);
    5104:	4a08      	ldr	r2, [pc, #32]	; (5128 <opcode_0xD5()+0x54>)
    5106:	4809      	ldr	r0, [pc, #36]	; (512c <opcode_0xD5()+0x58>)
    5108:	700b      	strb	r3, [r1, #0]
    510a:	f890 0b75 	ldrb.w	r0, [r0, #2933]	; 0xb75
    510e:	8813      	ldrh	r3, [r2, #0]
    5110:	4418      	add	r0, r3
} // 0xD5 - CMP - ZeroPage , X
    5112:	b280      	uxth	r0, r0
    5114:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    511a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    511e:	e7f1      	b.n	5104 <opcode_0xD5()+0x30>
    5120:	200188a3 	.word	0x200188a3
    5124:	20004950 	.word	0x20004950
    5128:	2001888c 	.word	0x2001888c
    512c:	20017418 	.word	0x20017418

00005130 <opcode_0xCD()>:
uint16_t opcode_0xCD() {
    5130:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute());
    5132:	f7fd fd67 	bl	2c04 <Fetch_Absolute()>
    temp = register_a - local_data;
    5136:	4b11      	ldr	r3, [pc, #68]	; (517c <opcode_0xCD()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5138:	4911      	ldr	r1, [pc, #68]	; (5180 <opcode_0xCD()+0x50>)
    temp = register_a - local_data;
    513a:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    513c:	780b      	ldrb	r3, [r1, #0]
    513e:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5140:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5144:	bf94      	ite	ls
    5146:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    514a:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    514e:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5150:	0600      	lsls	r0, r0, #24
    5152:	d40e      	bmi.n	5172 <opcode_0xCD()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5158:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    515a:	b962      	cbnz	r2, 5176 <opcode_0xCD()+0x46>
    515c:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCD].length);
    5160:	4a08      	ldr	r2, [pc, #32]	; (5184 <opcode_0xCD()+0x54>)
    5162:	4809      	ldr	r0, [pc, #36]	; (5188 <opcode_0xCD()+0x58>)
    5164:	700b      	strb	r3, [r1, #0]
    5166:	f890 09d5 	ldrb.w	r0, [r0, #2517]	; 0x9d5
    516a:	8813      	ldrh	r3, [r2, #0]
    516c:	4418      	add	r0, r3
} // 0xCD - CMP - Absolute
    516e:	b280      	uxth	r0, r0
    5170:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5176:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    517a:	e7f1      	b.n	5160 <opcode_0xCD()+0x30>
    517c:	200188a3 	.word	0x200188a3
    5180:	20004950 	.word	0x20004950
    5184:	2001888c 	.word	0x2001888c
    5188:	20017418 	.word	0x20017418

0000518c <opcode_0xDD()>:
uint16_t opcode_0xDD() {
    518c:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_X(1));
    518e:	2001      	movs	r0, #1
    5190:	f7fd fd54 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    temp = register_a - local_data;
    5194:	4b11      	ldr	r3, [pc, #68]	; (51dc <opcode_0xDD()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5196:	4912      	ldr	r1, [pc, #72]	; (51e0 <opcode_0xDD()+0x54>)
    temp = register_a - local_data;
    5198:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    519a:	780b      	ldrb	r3, [r1, #0]
    519c:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    519e:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51a2:	bf94      	ite	ls
    51a4:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    51a8:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    51ac:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51ae:	0600      	lsls	r0, r0, #24
    51b0:	d40e      	bmi.n	51d0 <opcode_0xDD()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    51b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    51b6:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    51b8:	b962      	cbnz	r2, 51d4 <opcode_0xDD()+0x48>
    51ba:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xDD].length);
    51be:	4a09      	ldr	r2, [pc, #36]	; (51e4 <opcode_0xDD()+0x58>)
    51c0:	4809      	ldr	r0, [pc, #36]	; (51e8 <opcode_0xDD()+0x5c>)
    51c2:	700b      	strb	r3, [r1, #0]
    51c4:	f890 0d15 	ldrb.w	r0, [r0, #3349]	; 0xd15
    51c8:	8813      	ldrh	r3, [r2, #0]
    51ca:	4418      	add	r0, r3
} // 0xDD - CMP - Absolute , X
    51cc:	b280      	uxth	r0, r0
    51ce:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    51d4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    51d8:	e7f1      	b.n	51be <opcode_0xDD()+0x32>
    51da:	bf00      	nop
    51dc:	200188a3 	.word	0x200188a3
    51e0:	20004950 	.word	0x20004950
    51e4:	2001888c 	.word	0x2001888c
    51e8:	20017418 	.word	0x20017418

000051ec <opcode_0xD9()>:
uint16_t opcode_0xD9() {
    51ec:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_Y(1));
    51ee:	2001      	movs	r0, #1
    51f0:	f7fd fd54 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    temp = register_a - local_data;
    51f4:	4b11      	ldr	r3, [pc, #68]	; (523c <opcode_0xD9()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51f6:	4912      	ldr	r1, [pc, #72]	; (5240 <opcode_0xD9()+0x54>)
    temp = register_a - local_data;
    51f8:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51fa:	780b      	ldrb	r3, [r1, #0]
    51fc:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    51fe:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5202:	bf94      	ite	ls
    5204:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5208:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    520c:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    520e:	0600      	lsls	r0, r0, #24
    5210:	d40e      	bmi.n	5230 <opcode_0xD9()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5216:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5218:	b962      	cbnz	r2, 5234 <opcode_0xD9()+0x48>
    521a:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD9].length);
    521e:	4a09      	ldr	r2, [pc, #36]	; (5244 <opcode_0xD9()+0x58>)
    5220:	4809      	ldr	r0, [pc, #36]	; (5248 <opcode_0xD9()+0x5c>)
    5222:	700b      	strb	r3, [r1, #0]
    5224:	f890 0c45 	ldrb.w	r0, [r0, #3141]	; 0xc45
    5228:	8813      	ldrh	r3, [r2, #0]
    522a:	4418      	add	r0, r3
} // 0xD9 - CMP - Absolute , Y
    522c:	b280      	uxth	r0, r0
    522e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5234:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5238:	e7f1      	b.n	521e <opcode_0xD9()+0x32>
    523a:	bf00      	nop
    523c:	200188a3 	.word	0x200188a3
    5240:	20004950 	.word	0x20004950
    5244:	2001888c 	.word	0x2001888c
    5248:	20017418 	.word	0x20017418

0000524c <opcode_0xC1()>:
uint16_t opcode_0xC1() {
    524c:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    524e:	f7fd fd55 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    temp = register_a - local_data;
    5252:	4b11      	ldr	r3, [pc, #68]	; (5298 <opcode_0xC1()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5254:	4911      	ldr	r1, [pc, #68]	; (529c <opcode_0xC1()+0x50>)
    temp = register_a - local_data;
    5256:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5258:	780b      	ldrb	r3, [r1, #0]
    525a:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    525c:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5260:	bf94      	ite	ls
    5262:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5266:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    526a:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    526c:	0600      	lsls	r0, r0, #24
    526e:	d40e      	bmi.n	528e <opcode_0xC1()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5274:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5276:	b962      	cbnz	r2, 5292 <opcode_0xC1()+0x46>
    5278:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xC1].length);
    527c:	4a08      	ldr	r2, [pc, #32]	; (52a0 <opcode_0xC1()+0x54>)
    527e:	4809      	ldr	r0, [pc, #36]	; (52a4 <opcode_0xC1()+0x58>)
    5280:	700b      	strb	r3, [r1, #0]
    5282:	f890 0765 	ldrb.w	r0, [r0, #1893]	; 0x765
    5286:	8813      	ldrh	r3, [r2, #0]
    5288:	4418      	add	r0, r3
} // 0xC1 - CMP - Indexed Indirect X
    528a:	b280      	uxth	r0, r0
    528c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    528e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5292:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5296:	e7f1      	b.n	527c <opcode_0xC1()+0x30>
    5298:	200188a3 	.word	0x200188a3
    529c:	20004950 	.word	0x20004950
    52a0:	2001888c 	.word	0x2001888c
    52a4:	20017418 	.word	0x20017418

000052a8 <opcode_0xD1()>:
uint16_t opcode_0xD1() {
    52a8:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    52aa:	2001      	movs	r0, #1
    52ac:	f7fd fd50 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    temp = register_a - local_data;
    52b0:	4b11      	ldr	r3, [pc, #68]	; (52f8 <opcode_0xD1()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52b2:	4912      	ldr	r1, [pc, #72]	; (52fc <opcode_0xD1()+0x54>)
    temp = register_a - local_data;
    52b4:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52b6:	780b      	ldrb	r3, [r1, #0]
    52b8:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    52ba:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52be:	bf94      	ite	ls
    52c0:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    52c4:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    52c8:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52ca:	0600      	lsls	r0, r0, #24
    52cc:	d40e      	bmi.n	52ec <opcode_0xD1()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    52ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    52d2:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    52d4:	b962      	cbnz	r2, 52f0 <opcode_0xD1()+0x48>
    52d6:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD1].length);
    52da:	4a09      	ldr	r2, [pc, #36]	; (5300 <opcode_0xD1()+0x58>)
    52dc:	4809      	ldr	r0, [pc, #36]	; (5304 <opcode_0xD1()+0x5c>)
    52de:	700b      	strb	r3, [r1, #0]
    52e0:	f890 0aa5 	ldrb.w	r0, [r0, #2725]	; 0xaa5
    52e4:	8813      	ldrh	r3, [r2, #0]
    52e6:	4418      	add	r0, r3
} // 0xD1 - CMP - Indirect Indexed  Y
    52e8:	b280      	uxth	r0, r0
    52ea:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    52f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    52f4:	e7f1      	b.n	52da <opcode_0xD1()+0x32>
    52f6:	bf00      	nop
    52f8:	200188a3 	.word	0x200188a3
    52fc:	20004950 	.word	0x20004950
    5300:	2001888c 	.word	0x2001888c
    5304:	20017418 	.word	0x20017418

00005308 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    5308:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    530a:	4c14      	ldr	r4, [pc, #80]	; (535c <opcode_0xE0()+0x54>)
    530c:	2100      	movs	r1, #0
    530e:	8820      	ldrh	r0, [r4, #0]
    5310:	3001      	adds	r0, #1
    5312:	b280      	uxth	r0, r0
    5314:	f7fd f93e 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    5318:	4b11      	ldr	r3, [pc, #68]	; (5360 <opcode_0xE0()+0x58>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    531a:	4912      	ldr	r1, [pc, #72]	; (5364 <opcode_0xE0()+0x5c>)
    temp = register_x - local_data;
    531c:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    531e:	780b      	ldrb	r3, [r1, #0]
    5320:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5322:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5326:	bf94      	ite	ls
    5328:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    532c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5330:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5332:	0600      	lsls	r0, r0, #24
    5334:	d40d      	bmi.n	5352 <opcode_0xE0()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    533a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    533c:	b95a      	cbnz	r2, 5356 <opcode_0xE0()+0x4e>
    533e:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    5342:	4809      	ldr	r0, [pc, #36]	; (5368 <opcode_0xE0()+0x60>)
    5344:	8822      	ldrh	r2, [r4, #0]
    5346:	f890 0db1 	ldrb.w	r0, [r0, #3505]	; 0xdb1
    534a:	700b      	strb	r3, [r1, #0]
    534c:	4410      	add	r0, r2
} // 0xE0 - CPX - Immediate
    534e:	b280      	uxth	r0, r0
    5350:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5356:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    535a:	e7f2      	b.n	5342 <opcode_0xE0()+0x3a>
    535c:	2001888c 	.word	0x2001888c
    5360:	200188a4 	.word	0x200188a4
    5364:	20004950 	.word	0x20004950
    5368:	20017418 	.word	0x20017418

0000536c <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    536c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    536e:	4c17      	ldr	r4, [pc, #92]	; (53cc <opcode_0xE4()+0x60>)
    5370:	2100      	movs	r1, #0
    5372:	8820      	ldrh	r0, [r4, #0]
    5374:	3001      	adds	r0, #1
    5376:	b280      	uxth	r0, r0
    5378:	f7fd f90c 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    537c:	4b14      	ldr	r3, [pc, #80]	; (53d0 <opcode_0xE4()+0x64>)
    537e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5380:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5382:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5384:	f7fd f906 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    5388:	4b12      	ldr	r3, [pc, #72]	; (53d4 <opcode_0xE4()+0x68>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    538a:	4913      	ldr	r1, [pc, #76]	; (53d8 <opcode_0xE4()+0x6c>)
    temp = register_x - local_data;
    538c:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    538e:	780b      	ldrb	r3, [r1, #0]
    5390:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5392:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5396:	bf2c      	ite	cs
    5398:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    539c:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    53a0:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53a2:	0600      	lsls	r0, r0, #24
    53a4:	d40d      	bmi.n	53c2 <opcode_0xE4()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    53a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53aa:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    53ac:	b95a      	cbnz	r2, 53c6 <opcode_0xE4()+0x5a>
    53ae:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    53b2:	480a      	ldr	r0, [pc, #40]	; (53dc <opcode_0xE4()+0x70>)
    53b4:	8822      	ldrh	r2, [r4, #0]
    53b6:	f890 0e81 	ldrb.w	r0, [r0, #3713]	; 0xe81
    53ba:	700b      	strb	r3, [r1, #0]
    53bc:	4410      	add	r0, r2
} // 0xE4 - CPX - ZeroPage
    53be:	b280      	uxth	r0, r0
    53c0:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    53c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    53ca:	e7f2      	b.n	53b2 <opcode_0xE4()+0x46>
    53cc:	2001888c 	.word	0x2001888c
    53d0:	2001888a 	.word	0x2001888a
    53d4:	200188a4 	.word	0x200188a4
    53d8:	20004950 	.word	0x20004950
    53dc:	20017418 	.word	0x20017418

000053e0 <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    53e0:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    53e2:	f7fd fc0f 	bl	2c04 <Fetch_Absolute()>
    temp = register_x - local_data;
    53e6:	4b11      	ldr	r3, [pc, #68]	; (542c <opcode_0xEC()+0x4c>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53e8:	4911      	ldr	r1, [pc, #68]	; (5430 <opcode_0xEC()+0x50>)
    temp = register_x - local_data;
    53ea:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53ec:	780b      	ldrb	r3, [r1, #0]
    53ee:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    53f0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53f4:	bf94      	ite	ls
    53f6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    53fa:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    53fe:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5400:	0600      	lsls	r0, r0, #24
    5402:	d40e      	bmi.n	5422 <opcode_0xEC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5408:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    540a:	b962      	cbnz	r2, 5426 <opcode_0xEC()+0x46>
    540c:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xEC].length);
    5410:	4a08      	ldr	r2, [pc, #32]	; (5434 <opcode_0xEC()+0x54>)
    5412:	4809      	ldr	r0, [pc, #36]	; (5438 <opcode_0xEC()+0x58>)
    5414:	700b      	strb	r3, [r1, #0]
    5416:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    541a:	8813      	ldrh	r3, [r2, #0]
    541c:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    541e:	b280      	uxth	r0, r0
    5420:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5426:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    542a:	e7f1      	b.n	5410 <opcode_0xEC()+0x30>
    542c:	200188a4 	.word	0x200188a4
    5430:	20004950 	.word	0x20004950
    5434:	2001888c 	.word	0x2001888c
    5438:	20018418 	.word	0x20018418

0000543c <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    543c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    543e:	4c14      	ldr	r4, [pc, #80]	; (5490 <opcode_0xC0()+0x54>)
    5440:	2100      	movs	r1, #0
    5442:	8820      	ldrh	r0, [r4, #0]
    5444:	3001      	adds	r0, #1
    5446:	b280      	uxth	r0, r0
    5448:	f7fd f8a4 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    544c:	4b11      	ldr	r3, [pc, #68]	; (5494 <opcode_0xC0()+0x58>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    544e:	4912      	ldr	r1, [pc, #72]	; (5498 <opcode_0xC0()+0x5c>)
    temp = register_y - local_data;
    5450:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5452:	780b      	ldrb	r3, [r1, #0]
    5454:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5456:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    545a:	bf94      	ite	ls
    545c:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5460:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5464:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5466:	0600      	lsls	r0, r0, #24
    5468:	d40d      	bmi.n	5486 <opcode_0xC0()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    546a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    546e:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5470:	b95a      	cbnz	r2, 548a <opcode_0xC0()+0x4e>
    5472:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    5476:	4809      	ldr	r0, [pc, #36]	; (549c <opcode_0xC0()+0x60>)
    5478:	8822      	ldrh	r2, [r4, #0]
    547a:	f890 0731 	ldrb.w	r0, [r0, #1841]	; 0x731
    547e:	700b      	strb	r3, [r1, #0]
    5480:	4410      	add	r0, r2
} // 0xC0 - CPY - Immediate
    5482:	b280      	uxth	r0, r0
    5484:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    548a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    548e:	e7f2      	b.n	5476 <opcode_0xC0()+0x3a>
    5490:	2001888c 	.word	0x2001888c
    5494:	200188a5 	.word	0x200188a5
    5498:	20004950 	.word	0x20004950
    549c:	20017418 	.word	0x20017418

000054a0 <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    54a0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    54a2:	4c17      	ldr	r4, [pc, #92]	; (5500 <opcode_0xC4()+0x60>)
    54a4:	2100      	movs	r1, #0
    54a6:	8820      	ldrh	r0, [r4, #0]
    54a8:	3001      	adds	r0, #1
    54aa:	b280      	uxth	r0, r0
    54ac:	f7fd f872 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    54b0:	4b14      	ldr	r3, [pc, #80]	; (5504 <opcode_0xC4()+0x64>)
    54b2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    54b4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    54b6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    54b8:	f7fd f86c 	bl	2594 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    54bc:	4b12      	ldr	r3, [pc, #72]	; (5508 <opcode_0xC4()+0x68>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54be:	4913      	ldr	r1, [pc, #76]	; (550c <opcode_0xC4()+0x6c>)
    temp = register_y - local_data;
    54c0:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54c2:	780b      	ldrb	r3, [r1, #0]
    54c4:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    54c6:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54ca:	bf2c      	ite	cs
    54cc:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    54d0:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    54d4:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54d6:	0600      	lsls	r0, r0, #24
    54d8:	d40d      	bmi.n	54f6 <opcode_0xC4()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    54da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54de:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    54e0:	b95a      	cbnz	r2, 54fa <opcode_0xC4()+0x5a>
    54e2:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    54e6:	480a      	ldr	r0, [pc, #40]	; (5510 <opcode_0xC4()+0x70>)
    54e8:	8822      	ldrh	r2, [r4, #0]
    54ea:	f890 0801 	ldrb.w	r0, [r0, #2049]	; 0x801
    54ee:	700b      	strb	r3, [r1, #0]
    54f0:	4410      	add	r0, r2
} // 0xC4 - CPY - ZeroPage
    54f2:	b280      	uxth	r0, r0
    54f4:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    54fa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    54fe:	e7f2      	b.n	54e6 <opcode_0xC4()+0x46>
    5500:	2001888c 	.word	0x2001888c
    5504:	2001888a 	.word	0x2001888a
    5508:	200188a5 	.word	0x200188a5
    550c:	20004950 	.word	0x20004950
    5510:	20017418 	.word	0x20017418

00005514 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    5514:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    5516:	f7fd fb75 	bl	2c04 <Fetch_Absolute()>
    temp = register_y - local_data;
    551a:	4b11      	ldr	r3, [pc, #68]	; (5560 <opcode_0xCC()+0x4c>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    551c:	4911      	ldr	r1, [pc, #68]	; (5564 <opcode_0xCC()+0x50>)
    temp = register_y - local_data;
    551e:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5520:	780b      	ldrb	r3, [r1, #0]
    5522:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5524:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5528:	bf94      	ite	ls
    552a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    552e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5532:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5534:	0600      	lsls	r0, r0, #24
    5536:	d40e      	bmi.n	5556 <opcode_0xCC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    553c:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    553e:	b962      	cbnz	r2, 555a <opcode_0xCC()+0x46>
    5540:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCC].length);
    5544:	4a08      	ldr	r2, [pc, #32]	; (5568 <opcode_0xCC()+0x54>)
    5546:	4809      	ldr	r0, [pc, #36]	; (556c <opcode_0xCC()+0x58>)
    5548:	700b      	strb	r3, [r1, #0]
    554a:	f890 09a1 	ldrb.w	r0, [r0, #2465]	; 0x9a1
    554e:	8813      	ldrh	r3, [r2, #0]
    5550:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    5552:	b280      	uxth	r0, r0
    5554:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    555a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    555e:	e7f1      	b.n	5544 <opcode_0xCC()+0x30>
    5560:	200188a5 	.word	0x200188a5
    5564:	20004950 	.word	0x20004950
    5568:	2001888c 	.word	0x2001888c
    556c:	20017418 	.word	0x20017418

00005570 <opcode_0x85()>:

// -------------------------------------------------
// Store Operations
// -------------------------------------------------
uint16_t opcode_0x85() {
    5570:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5572:	4c0b      	ldr	r4, [pc, #44]	; (55a0 <opcode_0x85()+0x30>)
    5574:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    5576:	4b0b      	ldr	r3, [pc, #44]	; (55a4 <opcode_0x85()+0x34>)
    5578:	8820      	ldrh	r0, [r4, #0]
    557a:	781d      	ldrb	r5, [r3, #0]
    557c:	3001      	adds	r0, #1
    557e:	b280      	uxth	r0, r0
    5580:	f7fd f808 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    5584:	4b08      	ldr	r3, [pc, #32]	; (55a8 <opcode_0x85()+0x38>)
    5586:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    5588:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    558a:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    558c:	f7fd f9be 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x85].length);
    5590:	4a06      	ldr	r2, [pc, #24]	; (55ac <opcode_0x85()+0x3c>)
    5592:	8823      	ldrh	r3, [r4, #0]
    5594:	f892 0b35 	ldrb.w	r0, [r2, #2869]	; 0xb35
    5598:	4418      	add	r0, r3
} // 0x85 - STA - ZeroPage
    559a:	b280      	uxth	r0, r0
    559c:	bd38      	pop	{r3, r4, r5, pc}
    559e:	bf00      	nop
    55a0:	2001888c 	.word	0x2001888c
    55a4:	200188a3 	.word	0x200188a3
    55a8:	2001888a 	.word	0x2001888a
    55ac:	20016418 	.word	0x20016418

000055b0 <opcode_0x8D()>:
uint16_t opcode_0x8D() {
    55b0:	b508      	push	{r3, lr}
    Write_Absolute(register_a);
    55b2:	4b06      	ldr	r3, [pc, #24]	; (55cc <opcode_0x8D()+0x1c>)
    55b4:	7818      	ldrb	r0, [r3, #0]
    55b6:	f7fd fbff 	bl	2db8 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8D].length);
    55ba:	4a05      	ldr	r2, [pc, #20]	; (55d0 <opcode_0x8D()+0x20>)
    55bc:	4b05      	ldr	r3, [pc, #20]	; (55d4 <opcode_0x8D()+0x24>)
    55be:	f892 0cd5 	ldrb.w	r0, [r2, #3285]	; 0xcd5
    55c2:	881b      	ldrh	r3, [r3, #0]
    55c4:	4418      	add	r0, r3
} // 0x8D - STA - Absolute
    55c6:	b280      	uxth	r0, r0
    55c8:	bd08      	pop	{r3, pc}
    55ca:	bf00      	nop
    55cc:	200188a3 	.word	0x200188a3
    55d0:	20016418 	.word	0x20016418
    55d4:	2001888c 	.word	0x2001888c

000055d8 <opcode_0x95()>:
uint16_t opcode_0x95() {
    55d8:	b508      	push	{r3, lr}
    Write_ZeroPage_X(register_a);
    55da:	4b06      	ldr	r3, [pc, #24]	; (55f4 <opcode_0x95()+0x1c>)
    55dc:	7818      	ldrb	r0, [r3, #0]
    55de:	f7fd fc09 	bl	2df4 <Write_ZeroPage_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x95].length);
    55e2:	4a05      	ldr	r2, [pc, #20]	; (55f8 <opcode_0x95()+0x20>)
    55e4:	4b05      	ldr	r3, [pc, #20]	; (55fc <opcode_0x95()+0x24>)
    55e6:	f892 0e75 	ldrb.w	r0, [r2, #3701]	; 0xe75
    55ea:	881b      	ldrh	r3, [r3, #0]
    55ec:	4418      	add	r0, r3
} // 0x95 - STA - ZeroPage , X
    55ee:	b280      	uxth	r0, r0
    55f0:	bd08      	pop	{r3, pc}
    55f2:	bf00      	nop
    55f4:	200188a3 	.word	0x200188a3
    55f8:	20016418 	.word	0x20016418
    55fc:	2001888c 	.word	0x2001888c

00005600 <opcode_0x9D()>:
uint16_t opcode_0x9D() {
    5600:	b508      	push	{r3, lr}
    Write_Absolute_X(register_a);
    5602:	4b05      	ldr	r3, [pc, #20]	; (5618 <opcode_0x9D()+0x18>)
    5604:	7818      	ldrb	r0, [r3, #0]
    5606:	f7fd fc31 	bl	2e6c <Write_Absolute_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9D].length);
    560a:	4a04      	ldr	r2, [pc, #16]	; (561c <opcode_0x9D()+0x1c>)
    560c:	4b04      	ldr	r3, [pc, #16]	; (5620 <opcode_0x9D()+0x20>)
    560e:	7d50      	ldrb	r0, [r2, #21]
    5610:	881b      	ldrh	r3, [r3, #0]
    5612:	4418      	add	r0, r3
} // 0x9D - STA - Absolute , X
    5614:	b280      	uxth	r0, r0
    5616:	bd08      	pop	{r3, pc}
    5618:	200188a3 	.word	0x200188a3
    561c:	20017418 	.word	0x20017418
    5620:	2001888c 	.word	0x2001888c

00005624 <opcode_0x99()>:
uint16_t opcode_0x99() {
    5624:	b508      	push	{r3, lr}
    Write_Absolute_Y(register_a);
    5626:	4b06      	ldr	r3, [pc, #24]	; (5640 <opcode_0x99()+0x1c>)
    5628:	7818      	ldrb	r0, [r3, #0]
    562a:	f7fd fc45 	bl	2eb8 <Write_Absolute_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x99].length);
    562e:	4a05      	ldr	r2, [pc, #20]	; (5644 <opcode_0x99()+0x20>)
    5630:	4b05      	ldr	r3, [pc, #20]	; (5648 <opcode_0x99()+0x24>)
    5632:	f892 0f45 	ldrb.w	r0, [r2, #3909]	; 0xf45
    5636:	881b      	ldrh	r3, [r3, #0]
    5638:	4418      	add	r0, r3
} // 0x99 - STA - Absolute , Y
    563a:	b280      	uxth	r0, r0
    563c:	bd08      	pop	{r3, pc}
    563e:	bf00      	nop
    5640:	200188a3 	.word	0x200188a3
    5644:	20016418 	.word	0x20016418
    5648:	2001888c 	.word	0x2001888c

0000564c <opcode_0x81()>:
uint16_t opcode_0x81() {
    564c:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_X(register_a);
    564e:	4b06      	ldr	r3, [pc, #24]	; (5668 <opcode_0x81()+0x1c>)
    5650:	7818      	ldrb	r0, [r3, #0]
    5652:	f7fd fc65 	bl	2f20 <Write_Indexed_Indirect_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x81].length);
    5656:	4a05      	ldr	r2, [pc, #20]	; (566c <opcode_0x81()+0x20>)
    5658:	4b05      	ldr	r3, [pc, #20]	; (5670 <opcode_0x81()+0x24>)
    565a:	f892 0a65 	ldrb.w	r0, [r2, #2661]	; 0xa65
    565e:	881b      	ldrh	r3, [r3, #0]
    5660:	4418      	add	r0, r3
} // 0x81 - STA - Indexed Indirect X
    5662:	b280      	uxth	r0, r0
    5664:	bd08      	pop	{r3, pc}
    5666:	bf00      	nop
    5668:	200188a3 	.word	0x200188a3
    566c:	20016418 	.word	0x20016418
    5670:	2001888c 	.word	0x2001888c

00005674 <opcode_0x91()>:
uint16_t opcode_0x91() {
    5674:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_Y(register_a);
    5676:	4b06      	ldr	r3, [pc, #24]	; (5690 <opcode_0x91()+0x1c>)
    5678:	7818      	ldrb	r0, [r3, #0]
    567a:	f7fd fc7f 	bl	2f7c <Write_Indexed_Indirect_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x91].length);
    567e:	4a05      	ldr	r2, [pc, #20]	; (5694 <opcode_0x91()+0x20>)
    5680:	4b05      	ldr	r3, [pc, #20]	; (5698 <opcode_0x91()+0x24>)
    5682:	f892 0da5 	ldrb.w	r0, [r2, #3493]	; 0xda5
    5686:	881b      	ldrh	r3, [r3, #0]
    5688:	4418      	add	r0, r3
} // 0x91 - STA - Indirect Indexed  Y
    568a:	b280      	uxth	r0, r0
    568c:	bd08      	pop	{r3, pc}
    568e:	bf00      	nop
    5690:	200188a3 	.word	0x200188a3
    5694:	20016418 	.word	0x20016418
    5698:	2001888c 	.word	0x2001888c

0000569c <opcode_0x86()>:
uint16_t opcode_0x86() {
    569c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    569e:	4c0b      	ldr	r4, [pc, #44]	; (56cc <opcode_0x86()+0x30>)
    56a0:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    56a2:	4b0b      	ldr	r3, [pc, #44]	; (56d0 <opcode_0x86()+0x34>)
    56a4:	8820      	ldrh	r0, [r4, #0]
    56a6:	781d      	ldrb	r5, [r3, #0]
    56a8:	3001      	adds	r0, #1
    56aa:	b280      	uxth	r0, r0
    56ac:	f7fc ff72 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    56b0:	4b08      	ldr	r3, [pc, #32]	; (56d4 <opcode_0x86()+0x38>)
    56b2:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    56b4:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    56b6:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    56b8:	f7fd f928 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x86].length);
    56bc:	4a06      	ldr	r2, [pc, #24]	; (56d8 <opcode_0x86()+0x3c>)
    56be:	8823      	ldrh	r3, [r4, #0]
    56c0:	f892 0b69 	ldrb.w	r0, [r2, #2921]	; 0xb69
    56c4:	4418      	add	r0, r3
} // 0x86 - STX - ZeroPage
    56c6:	b280      	uxth	r0, r0
    56c8:	bd38      	pop	{r3, r4, r5, pc}
    56ca:	bf00      	nop
    56cc:	2001888c 	.word	0x2001888c
    56d0:	200188a4 	.word	0x200188a4
    56d4:	2001888a 	.word	0x2001888a
    56d8:	20016418 	.word	0x20016418

000056dc <opcode_0x96()>:
uint16_t opcode_0x96() {
    56dc:	b508      	push	{r3, lr}
    Write_ZeroPage_Y(register_x);
    56de:	4b06      	ldr	r3, [pc, #24]	; (56f8 <opcode_0x96()+0x1c>)
    56e0:	7818      	ldrb	r0, [r3, #0]
    56e2:	f7fd fba5 	bl	2e30 <Write_ZeroPage_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x96].length);
    56e6:	4a05      	ldr	r2, [pc, #20]	; (56fc <opcode_0x96()+0x20>)
    56e8:	4b05      	ldr	r3, [pc, #20]	; (5700 <opcode_0x96()+0x24>)
    56ea:	f892 0ea9 	ldrb.w	r0, [r2, #3753]	; 0xea9
    56ee:	881b      	ldrh	r3, [r3, #0]
    56f0:	4418      	add	r0, r3
} // 0x96 - STX - ZeroPage , Y
    56f2:	b280      	uxth	r0, r0
    56f4:	bd08      	pop	{r3, pc}
    56f6:	bf00      	nop
    56f8:	200188a4 	.word	0x200188a4
    56fc:	20016418 	.word	0x20016418
    5700:	2001888c 	.word	0x2001888c

00005704 <opcode_0x8E()>:
uint16_t opcode_0x8E() {
    5704:	b508      	push	{r3, lr}
    Write_Absolute(register_x);
    5706:	4b06      	ldr	r3, [pc, #24]	; (5720 <opcode_0x8E()+0x1c>)
    5708:	7818      	ldrb	r0, [r3, #0]
    570a:	f7fd fb55 	bl	2db8 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8E].length);
    570e:	4a05      	ldr	r2, [pc, #20]	; (5724 <opcode_0x8E()+0x20>)
    5710:	4b05      	ldr	r3, [pc, #20]	; (5728 <opcode_0x8E()+0x24>)
    5712:	f892 0d09 	ldrb.w	r0, [r2, #3337]	; 0xd09
    5716:	881b      	ldrh	r3, [r3, #0]
    5718:	4418      	add	r0, r3
} // 0x8E - STX - Absolute
    571a:	b280      	uxth	r0, r0
    571c:	bd08      	pop	{r3, pc}
    571e:	bf00      	nop
    5720:	200188a4 	.word	0x200188a4
    5724:	20016418 	.word	0x20016418
    5728:	2001888c 	.word	0x2001888c

0000572c <opcode_0x84()>:
uint16_t opcode_0x84() {
    572c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    572e:	4c0b      	ldr	r4, [pc, #44]	; (575c <opcode_0x84()+0x30>)
    5730:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    5732:	4b0b      	ldr	r3, [pc, #44]	; (5760 <opcode_0x84()+0x34>)
    5734:	8820      	ldrh	r0, [r4, #0]
    5736:	781d      	ldrb	r5, [r3, #0]
    5738:	3001      	adds	r0, #1
    573a:	b280      	uxth	r0, r0
    573c:	f7fc ff2a 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    5740:	4b08      	ldr	r3, [pc, #32]	; (5764 <opcode_0x84()+0x38>)
    5742:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    5744:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    5746:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    5748:	f7fd f8e0 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x84].length);
    574c:	4a06      	ldr	r2, [pc, #24]	; (5768 <opcode_0x84()+0x3c>)
    574e:	8823      	ldrh	r3, [r4, #0]
    5750:	f892 0b01 	ldrb.w	r0, [r2, #2817]	; 0xb01
    5754:	4418      	add	r0, r3
} // 0x84 - STY - ZeroPage
    5756:	b280      	uxth	r0, r0
    5758:	bd38      	pop	{r3, r4, r5, pc}
    575a:	bf00      	nop
    575c:	2001888c 	.word	0x2001888c
    5760:	200188a5 	.word	0x200188a5
    5764:	2001888a 	.word	0x2001888a
    5768:	20016418 	.word	0x20016418

0000576c <opcode_0x94()>:
uint16_t opcode_0x94() {
    576c:	b508      	push	{r3, lr}
    Write_ZeroPage_X(register_y);
    576e:	4b06      	ldr	r3, [pc, #24]	; (5788 <opcode_0x94()+0x1c>)
    5770:	7818      	ldrb	r0, [r3, #0]
    5772:	f7fd fb3f 	bl	2df4 <Write_ZeroPage_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x94].length);
    5776:	4a05      	ldr	r2, [pc, #20]	; (578c <opcode_0x94()+0x20>)
    5778:	4b05      	ldr	r3, [pc, #20]	; (5790 <opcode_0x94()+0x24>)
    577a:	f892 0e41 	ldrb.w	r0, [r2, #3649]	; 0xe41
    577e:	881b      	ldrh	r3, [r3, #0]
    5780:	4418      	add	r0, r3
} // 0x94 - STY - ZeroPage , X
    5782:	b280      	uxth	r0, r0
    5784:	bd08      	pop	{r3, pc}
    5786:	bf00      	nop
    5788:	200188a5 	.word	0x200188a5
    578c:	20016418 	.word	0x20016418
    5790:	2001888c 	.word	0x2001888c

00005794 <opcode_0x8C()>:
uint16_t opcode_0x8C() {
    5794:	b508      	push	{r3, lr}
    Write_Absolute(register_y);
    5796:	4b06      	ldr	r3, [pc, #24]	; (57b0 <opcode_0x8C()+0x1c>)
    5798:	7818      	ldrb	r0, [r3, #0]
    579a:	f7fd fb0d 	bl	2db8 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8C].length);
    579e:	4a05      	ldr	r2, [pc, #20]	; (57b4 <opcode_0x8C()+0x20>)
    57a0:	4b05      	ldr	r3, [pc, #20]	; (57b8 <opcode_0x8C()+0x24>)
    57a2:	f892 0ca1 	ldrb.w	r0, [r2, #3233]	; 0xca1
    57a6:	881b      	ldrh	r3, [r3, #0]
    57a8:	4418      	add	r0, r3
} // 0x8C - STY - Absolute
    57aa:	b280      	uxth	r0, r0
    57ac:	bd08      	pop	{r3, pc}
    57ae:	bf00      	nop
    57b0:	200188a5 	.word	0x200188a5
    57b4:	20016418 	.word	0x20016418
    57b8:	2001888c 	.word	0x2001888c

000057bc <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    57bc:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    57be:	4d17      	ldr	r5, [pc, #92]	; (581c <opcode_0x06()+0x60>)
    57c0:	b083      	sub	sp, #12
    57c2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57c4:	4c16      	ldr	r4, [pc, #88]	; (5820 <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    57c6:	8828      	ldrh	r0, [r5, #0]
    57c8:	3001      	adds	r0, #1
    57ca:	b280      	uxth	r0, r0
    57cc:	f7fc fee2 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    57d0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57d2:	b280      	uxth	r0, r0
    57d4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    57d6:	f7fc fedd 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    57da:	4a12      	ldr	r2, [pc, #72]	; (5824 <opcode_0x06()+0x68>)
    57dc:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    57de:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    57e2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    57e4:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    57e6:	bf4c      	ite	mi
    57e8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    57ec:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    57f0:	4608      	mov	r0, r1
    57f2:	9101      	str	r1, [sp, #4]
    57f4:	7013      	strb	r3, [r2, #0]
    57f6:	f7fd f991 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    57fa:	9901      	ldr	r1, [sp, #4]
    57fc:	8820      	ldrh	r0, [r4, #0]
    57fe:	f7fd f885 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5802:	8820      	ldrh	r0, [r4, #0]
    5804:	9901      	ldr	r1, [sp, #4]
    5806:	f7fd f881 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    580a:	4a07      	ldr	r2, [pc, #28]	; (5828 <opcode_0x06()+0x6c>)
    580c:	882b      	ldrh	r3, [r5, #0]
    580e:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    5812:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    5814:	b280      	uxth	r0, r0
    5816:	b003      	add	sp, #12
    5818:	bd30      	pop	{r4, r5, pc}
    581a:	bf00      	nop
    581c:	2001888c 	.word	0x2001888c
    5820:	2001888a 	.word	0x2001888a
    5824:	20004950 	.word	0x20004950
    5828:	20015418 	.word	0x20015418

0000582c <opcode_0x16()>:
uint16_t opcode_0x16() {
    582c:	b510      	push	{r4, lr}
    582e:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    5830:	f7fd f9a8 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5834:	4a14      	ldr	r2, [pc, #80]	; (5888 <opcode_0x16()+0x5c>)
    5836:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5838:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    583c:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    583e:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5840:	bf4c      	ite	mi
    5842:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5846:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    584a:	0600      	lsls	r0, r0, #24
    584c:	bf4c      	ite	mi
    584e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5852:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5856:	b9a1      	cbnz	r1, 5882 <opcode_0x16()+0x56>
    5858:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    585c:	4c0b      	ldr	r4, [pc, #44]	; (588c <opcode_0x16()+0x60>)
    585e:	7013      	strb	r3, [r2, #0]
    5860:	8820      	ldrh	r0, [r4, #0]
    5862:	9101      	str	r1, [sp, #4]
    5864:	f7fd f852 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5868:	8820      	ldrh	r0, [r4, #0]
    586a:	9901      	ldr	r1, [sp, #4]
    586c:	f7fd f84e 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    5870:	4a07      	ldr	r2, [pc, #28]	; (5890 <opcode_0x16()+0x64>)
    5872:	4b08      	ldr	r3, [pc, #32]	; (5894 <opcode_0x16()+0x68>)
    5874:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    5878:	881b      	ldrh	r3, [r3, #0]
    587a:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    587c:	b280      	uxth	r0, r0
    587e:	b002      	add	sp, #8
    5880:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5882:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5886:	e7e9      	b.n	585c <opcode_0x16()+0x30>
    5888:	20004950 	.word	0x20004950
    588c:	2001888a 	.word	0x2001888a
    5890:	20015418 	.word	0x20015418
    5894:	2001888c 	.word	0x2001888c

00005898 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    5898:	b510      	push	{r4, lr}
    589a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    589c:	f7fd f9b2 	bl	2c04 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58a0:	4a14      	ldr	r2, [pc, #80]	; (58f4 <opcode_0x0E()+0x5c>)
    58a2:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    58a4:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58a8:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    58aa:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58ac:	bf4c      	ite	mi
    58ae:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58b2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    58b6:	0600      	lsls	r0, r0, #24
    58b8:	bf4c      	ite	mi
    58ba:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    58be:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    58c2:	b9a1      	cbnz	r1, 58ee <opcode_0x0E()+0x56>
    58c4:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    58c8:	4c0b      	ldr	r4, [pc, #44]	; (58f8 <opcode_0x0E()+0x60>)
    58ca:	7013      	strb	r3, [r2, #0]
    58cc:	8820      	ldrh	r0, [r4, #0]
    58ce:	9101      	str	r1, [sp, #4]
    58d0:	f7fd f81c 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58d4:	8820      	ldrh	r0, [r4, #0]
    58d6:	9901      	ldr	r1, [sp, #4]
    58d8:	f7fd f818 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    58dc:	4a07      	ldr	r2, [pc, #28]	; (58fc <opcode_0x0E()+0x64>)
    58de:	4b08      	ldr	r3, [pc, #32]	; (5900 <opcode_0x0E()+0x68>)
    58e0:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    58e4:	881b      	ldrh	r3, [r3, #0]
    58e6:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    58e8:	b280      	uxth	r0, r0
    58ea:	b002      	add	sp, #8
    58ec:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    58ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    58f2:	e7e9      	b.n	58c8 <opcode_0x0E()+0x30>
    58f4:	20004950 	.word	0x20004950
    58f8:	2001888a 	.word	0x2001888a
    58fc:	20015418 	.word	0x20015418
    5900:	2001888c 	.word	0x2001888c

00005904 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    5904:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    5906:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    5908:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    590a:	f7fd f997 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    590e:	4a15      	ldr	r2, [pc, #84]	; (5964 <opcode_0x1E()+0x60>)
    5910:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5912:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5916:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5918:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    591a:	bf4c      	ite	mi
    591c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5920:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5924:	0600      	lsls	r0, r0, #24
    5926:	bf4c      	ite	mi
    5928:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    592c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5930:	b9a1      	cbnz	r1, 595c <opcode_0x1E()+0x58>
    5932:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5936:	4c0c      	ldr	r4, [pc, #48]	; (5968 <opcode_0x1E()+0x64>)
    5938:	7013      	strb	r3, [r2, #0]
    593a:	8820      	ldrh	r0, [r4, #0]
    593c:	9101      	str	r1, [sp, #4]
    593e:	f7fc ffe5 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5942:	8820      	ldrh	r0, [r4, #0]
    5944:	9901      	ldr	r1, [sp, #4]
    5946:	f7fc ffe1 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    594a:	4a08      	ldr	r2, [pc, #32]	; (596c <opcode_0x1E()+0x68>)
    594c:	4b08      	ldr	r3, [pc, #32]	; (5970 <opcode_0x1E()+0x6c>)
    594e:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    5952:	881b      	ldrh	r3, [r3, #0]
    5954:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    5956:	b280      	uxth	r0, r0
    5958:	b002      	add	sp, #8
    595a:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    595c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5960:	e7e9      	b.n	5936 <opcode_0x1E()+0x32>
    5962:	bf00      	nop
    5964:	20004950 	.word	0x20004950
    5968:	2001888a 	.word	0x2001888a
    596c:	20015418 	.word	0x20015418
    5970:	2001888c 	.word	0x2001888c

00005974 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    5974:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    5976:	4e18      	ldr	r6, [pc, #96]	; (59d8 <opcode_0xE6()+0x64>)
    5978:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    597a:	4d18      	ldr	r5, [pc, #96]	; (59dc <opcode_0xE6()+0x68>)
    return read_byte(register_pc+offset, false);
    597c:	8830      	ldrh	r0, [r6, #0]
    597e:	3001      	adds	r0, #1
    5980:	b280      	uxth	r0, r0
    5982:	f7fc fe07 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5986:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5988:	b280      	uxth	r0, r0
    598a:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    598c:	f7fc fe02 	bl	2594 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    5990:	3001      	adds	r0, #1
    global_temp = local_data;
    5992:	4b13      	ldr	r3, [pc, #76]	; (59e0 <opcode_0xE6()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5994:	4a13      	ldr	r2, [pc, #76]	; (59e4 <opcode_0xE6()+0x70>)
    local_data = local_data + 1;
    5996:	b2c4      	uxtb	r4, r0
    5998:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    599a:	701c      	strb	r4, [r3, #0]
    599c:	7813      	ldrb	r3, [r2, #0]
    599e:	d415      	bmi.n	59cc <opcode_0xE6()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    59a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    59a4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    59a6:	b99c      	cbnz	r4, 59d0 <opcode_0xE6()+0x5c>
    59a8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    59ac:	8828      	ldrh	r0, [r5, #0]
    59ae:	4621      	mov	r1, r4
    59b0:	7013      	strb	r3, [r2, #0]
    59b2:	f7fc ffab 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59b6:	8828      	ldrh	r0, [r5, #0]
    59b8:	4621      	mov	r1, r4
    59ba:	f7fc ffa7 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    59be:	4a0a      	ldr	r2, [pc, #40]	; (59e8 <opcode_0xE6()+0x74>)
    59c0:	8833      	ldrh	r3, [r6, #0]
    59c2:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    59c6:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    59c8:	b280      	uxth	r0, r0
    59ca:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    59cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    59d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    59d4:	e7ea      	b.n	59ac <opcode_0xE6()+0x38>
    59d6:	bf00      	nop
    59d8:	2001888c 	.word	0x2001888c
    59dc:	2001888a 	.word	0x2001888a
    59e0:	200188a0 	.word	0x200188a0
    59e4:	20004950 	.word	0x20004950
    59e8:	20017418 	.word	0x20017418

000059ec <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    59ec:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    59ee:	f7fd f8c9 	bl	2b84 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    59f2:	3001      	adds	r0, #1
    global_temp = local_data;
    59f4:	4b11      	ldr	r3, [pc, #68]	; (5a3c <opcode_0xF6()+0x50>)
    local_data = local_data + 1;
    59f6:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    59f8:	4a11      	ldr	r2, [pc, #68]	; (5a40 <opcode_0xF6()+0x54>)
    59fa:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    59fc:	701c      	strb	r4, [r3, #0]
    59fe:	7813      	ldrb	r3, [r2, #0]
    5a00:	d417      	bmi.n	5a32 <opcode_0xF6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a06:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5a08:	b9ac      	cbnz	r4, 5a36 <opcode_0xF6()+0x4a>
    5a0a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5a0e:	4d0d      	ldr	r5, [pc, #52]	; (5a44 <opcode_0xF6()+0x58>)
    5a10:	4621      	mov	r1, r4
    5a12:	7013      	strb	r3, [r2, #0]
    5a14:	8828      	ldrh	r0, [r5, #0]
    5a16:	f7fc ff79 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a1a:	8828      	ldrh	r0, [r5, #0]
    5a1c:	4621      	mov	r1, r4
    5a1e:	f7fc ff75 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    5a22:	4a09      	ldr	r2, [pc, #36]	; (5a48 <opcode_0xF6()+0x5c>)
    5a24:	4b09      	ldr	r3, [pc, #36]	; (5a4c <opcode_0xF6()+0x60>)
    5a26:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    5a2a:	881b      	ldrh	r3, [r3, #0]
    5a2c:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    5a2e:	b280      	uxth	r0, r0
    5a30:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5a36:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5a3a:	e7e8      	b.n	5a0e <opcode_0xF6()+0x22>
    5a3c:	200188a0 	.word	0x200188a0
    5a40:	20004950 	.word	0x20004950
    5a44:	2001888a 	.word	0x2001888a
    5a48:	20018418 	.word	0x20018418
    5a4c:	2001888c 	.word	0x2001888c

00005a50 <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    5a50:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    5a52:	f7fd f8d7 	bl	2c04 <Fetch_Absolute()>
    local_data = local_data + 1;
    5a56:	3001      	adds	r0, #1
    global_temp = local_data;
    5a58:	4b11      	ldr	r3, [pc, #68]	; (5aa0 <opcode_0xEE()+0x50>)
    local_data = local_data + 1;
    5a5a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5a5c:	4a11      	ldr	r2, [pc, #68]	; (5aa4 <opcode_0xEE()+0x54>)
    5a5e:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5a60:	701c      	strb	r4, [r3, #0]
    5a62:	7813      	ldrb	r3, [r2, #0]
    5a64:	d417      	bmi.n	5a96 <opcode_0xEE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a6a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5a6c:	b9ac      	cbnz	r4, 5a9a <opcode_0xEE()+0x4a>
    5a6e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5a72:	4d0d      	ldr	r5, [pc, #52]	; (5aa8 <opcode_0xEE()+0x58>)
    5a74:	4621      	mov	r1, r4
    5a76:	7013      	strb	r3, [r2, #0]
    5a78:	8828      	ldrh	r0, [r5, #0]
    5a7a:	f7fc ff47 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a7e:	8828      	ldrh	r0, [r5, #0]
    5a80:	4621      	mov	r1, r4
    5a82:	f7fc ff43 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    5a86:	4a09      	ldr	r2, [pc, #36]	; (5aac <opcode_0xEE()+0x5c>)
    5a88:	4b09      	ldr	r3, [pc, #36]	; (5ab0 <opcode_0xEE()+0x60>)
    5a8a:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    5a8e:	881b      	ldrh	r3, [r3, #0]
    5a90:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    5a92:	b280      	uxth	r0, r0
    5a94:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5a9a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5a9e:	e7e8      	b.n	5a72 <opcode_0xEE()+0x22>
    5aa0:	200188a0 	.word	0x200188a0
    5aa4:	20004950 	.word	0x20004950
    5aa8:	2001888a 	.word	0x2001888a
    5aac:	20018418 	.word	0x20018418
    5ab0:	2001888c 	.word	0x2001888c

00005ab4 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    5ab4:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    5ab6:	4e18      	ldr	r6, [pc, #96]	; (5b18 <opcode_0xC6()+0x64>)
    5ab8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5aba:	4d18      	ldr	r5, [pc, #96]	; (5b1c <opcode_0xC6()+0x68>)
    return read_byte(register_pc+offset, false);
    5abc:	8830      	ldrh	r0, [r6, #0]
    5abe:	3001      	adds	r0, #1
    5ac0:	b280      	uxth	r0, r0
    5ac2:	f7fc fd67 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5ac6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ac8:	b280      	uxth	r0, r0
    5aca:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5acc:	f7fc fd62 	bl	2594 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5ad0:	3801      	subs	r0, #1
    global_temp = local_data;
    5ad2:	4b13      	ldr	r3, [pc, #76]	; (5b20 <opcode_0xC6()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5ad4:	4a13      	ldr	r2, [pc, #76]	; (5b24 <opcode_0xC6()+0x70>)
    local_data = local_data - 1;
    5ad6:	b2c4      	uxtb	r4, r0
    5ad8:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5ada:	701c      	strb	r4, [r3, #0]
    5adc:	7813      	ldrb	r3, [r2, #0]
    5ade:	d415      	bmi.n	5b0c <opcode_0xC6()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ae4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5ae6:	b99c      	cbnz	r4, 5b10 <opcode_0xC6()+0x5c>
    5ae8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5aec:	8828      	ldrh	r0, [r5, #0]
    5aee:	4621      	mov	r1, r4
    5af0:	7013      	strb	r3, [r2, #0]
    5af2:	f7fc ff0b 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5af6:	8828      	ldrh	r0, [r5, #0]
    5af8:	4621      	mov	r1, r4
    5afa:	f7fc ff07 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    5afe:	4a0a      	ldr	r2, [pc, #40]	; (5b28 <opcode_0xC6()+0x74>)
    5b00:	8833      	ldrh	r3, [r6, #0]
    5b02:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    5b06:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    5b08:	b280      	uxth	r0, r0
    5b0a:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5b10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5b14:	e7ea      	b.n	5aec <opcode_0xC6()+0x38>
    5b16:	bf00      	nop
    5b18:	2001888c 	.word	0x2001888c
    5b1c:	2001888a 	.word	0x2001888a
    5b20:	200188a0 	.word	0x200188a0
    5b24:	20004950 	.word	0x20004950
    5b28:	20017418 	.word	0x20017418

00005b2c <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    5b2c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    5b2e:	f7fd f829 	bl	2b84 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    5b32:	3801      	subs	r0, #1
    global_temp = local_data;
    5b34:	4b11      	ldr	r3, [pc, #68]	; (5b7c <opcode_0xD6()+0x50>)
    local_data = local_data - 1;
    5b36:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b38:	4a11      	ldr	r2, [pc, #68]	; (5b80 <opcode_0xD6()+0x54>)
    5b3a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5b3c:	701c      	strb	r4, [r3, #0]
    5b3e:	7813      	ldrb	r3, [r2, #0]
    5b40:	d417      	bmi.n	5b72 <opcode_0xD6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b46:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5b48:	b9ac      	cbnz	r4, 5b76 <opcode_0xD6()+0x4a>
    5b4a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5b4e:	4d0d      	ldr	r5, [pc, #52]	; (5b84 <opcode_0xD6()+0x58>)
    5b50:	4621      	mov	r1, r4
    5b52:	7013      	strb	r3, [r2, #0]
    5b54:	8828      	ldrh	r0, [r5, #0]
    5b56:	f7fc fed9 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b5a:	8828      	ldrh	r0, [r5, #0]
    5b5c:	4621      	mov	r1, r4
    5b5e:	f7fc fed5 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    5b62:	4a09      	ldr	r2, [pc, #36]	; (5b88 <opcode_0xD6()+0x5c>)
    5b64:	4b09      	ldr	r3, [pc, #36]	; (5b8c <opcode_0xD6()+0x60>)
    5b66:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    5b6a:	881b      	ldrh	r3, [r3, #0]
    5b6c:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    5b6e:	b280      	uxth	r0, r0
    5b70:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5b76:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5b7a:	e7e8      	b.n	5b4e <opcode_0xD6()+0x22>
    5b7c:	200188a0 	.word	0x200188a0
    5b80:	20004950 	.word	0x20004950
    5b84:	2001888a 	.word	0x2001888a
    5b88:	20017418 	.word	0x20017418
    5b8c:	2001888c 	.word	0x2001888c

00005b90 <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    5b90:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    5b92:	f7fd f837 	bl	2c04 <Fetch_Absolute()>
    local_data = local_data - 1;
    5b96:	3801      	subs	r0, #1
    global_temp = local_data;
    5b98:	4b11      	ldr	r3, [pc, #68]	; (5be0 <opcode_0xCE()+0x50>)
    local_data = local_data - 1;
    5b9a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b9c:	4a11      	ldr	r2, [pc, #68]	; (5be4 <opcode_0xCE()+0x54>)
    5b9e:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5ba0:	701c      	strb	r4, [r3, #0]
    5ba2:	7813      	ldrb	r3, [r2, #0]
    5ba4:	d417      	bmi.n	5bd6 <opcode_0xCE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5baa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5bac:	b9ac      	cbnz	r4, 5bda <opcode_0xCE()+0x4a>
    5bae:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5bb2:	4d0d      	ldr	r5, [pc, #52]	; (5be8 <opcode_0xCE()+0x58>)
    5bb4:	4621      	mov	r1, r4
    5bb6:	7013      	strb	r3, [r2, #0]
    5bb8:	8828      	ldrh	r0, [r5, #0]
    5bba:	f7fc fea7 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bbe:	8828      	ldrh	r0, [r5, #0]
    5bc0:	4621      	mov	r1, r4
    5bc2:	f7fc fea3 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    5bc6:	4a09      	ldr	r2, [pc, #36]	; (5bec <opcode_0xCE()+0x5c>)
    5bc8:	4b09      	ldr	r3, [pc, #36]	; (5bf0 <opcode_0xCE()+0x60>)
    5bca:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    5bce:	881b      	ldrh	r3, [r3, #0]
    5bd0:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    5bd2:	b280      	uxth	r0, r0
    5bd4:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5bda:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5bde:	e7e8      	b.n	5bb2 <opcode_0xCE()+0x22>
    5be0:	200188a0 	.word	0x200188a0
    5be4:	20004950 	.word	0x20004950
    5be8:	2001888a 	.word	0x2001888a
    5bec:	20017418 	.word	0x20017418
    5bf0:	2001888c 	.word	0x2001888c

00005bf4 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    5bf4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5bf6:	2000      	movs	r0, #0
    5bf8:	f7fd f820 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    5bfc:	3801      	subs	r0, #1
    global_temp = local_data;
    5bfe:	4b12      	ldr	r3, [pc, #72]	; (5c48 <opcode_0xDE()+0x54>)
    local_data = local_data - 1;
    5c00:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5c02:	4a12      	ldr	r2, [pc, #72]	; (5c4c <opcode_0xDE()+0x58>)
    5c04:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5c06:	701c      	strb	r4, [r3, #0]
    5c08:	7813      	ldrb	r3, [r2, #0]
    5c0a:	d417      	bmi.n	5c3c <opcode_0xDE()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c10:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5c12:	b9ac      	cbnz	r4, 5c40 <opcode_0xDE()+0x4c>
    5c14:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5c18:	4d0d      	ldr	r5, [pc, #52]	; (5c50 <opcode_0xDE()+0x5c>)
    5c1a:	4621      	mov	r1, r4
    5c1c:	7013      	strb	r3, [r2, #0]
    5c1e:	8828      	ldrh	r0, [r5, #0]
    5c20:	f7fc fe74 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c24:	8828      	ldrh	r0, [r5, #0]
    5c26:	4621      	mov	r1, r4
    5c28:	f7fc fe70 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    5c2c:	4a09      	ldr	r2, [pc, #36]	; (5c54 <opcode_0xDE()+0x60>)
    5c2e:	4b0a      	ldr	r3, [pc, #40]	; (5c58 <opcode_0xDE()+0x64>)
    5c30:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    5c34:	881b      	ldrh	r3, [r3, #0]
    5c36:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    5c38:	b280      	uxth	r0, r0
    5c3a:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5c40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5c44:	e7e8      	b.n	5c18 <opcode_0xDE()+0x24>
    5c46:	bf00      	nop
    5c48:	200188a0 	.word	0x200188a0
    5c4c:	20004950 	.word	0x20004950
    5c50:	2001888a 	.word	0x2001888a
    5c54:	20017418 	.word	0x20017418
    5c58:	2001888c 	.word	0x2001888c

00005c5c <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    5c5c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5c5e:	4d16      	ldr	r5, [pc, #88]	; (5cb8 <opcode_0x46()+0x5c>)
    5c60:	b083      	sub	sp, #12
    5c62:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5c64:	4c15      	ldr	r4, [pc, #84]	; (5cbc <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    5c66:	8828      	ldrh	r0, [r5, #0]
    5c68:	3001      	adds	r0, #1
    5c6a:	b280      	uxth	r0, r0
    5c6c:	f7fc fc92 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5c70:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5c72:	b280      	uxth	r0, r0
    5c74:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5c76:	f7fc fc8d 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c7a:	4a11      	ldr	r2, [pc, #68]	; (5cc0 <opcode_0x46()+0x64>)
    5c7c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5c7e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c82:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c84:	4608      	mov	r0, r1
    5c86:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c88:	bf4c      	ite	mi
    5c8a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c8e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5c92:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c94:	f7fc ff42 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5c98:	9901      	ldr	r1, [sp, #4]
    5c9a:	8820      	ldrh	r0, [r4, #0]
    5c9c:	f7fc fe36 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ca0:	8820      	ldrh	r0, [r4, #0]
    5ca2:	9901      	ldr	r1, [sp, #4]
    5ca4:	f7fc fe32 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    5ca8:	4a06      	ldr	r2, [pc, #24]	; (5cc4 <opcode_0x46()+0x68>)
    5caa:	882b      	ldrh	r3, [r5, #0]
    5cac:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    5cb0:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    5cb2:	b280      	uxth	r0, r0
    5cb4:	b003      	add	sp, #12
    5cb6:	bd30      	pop	{r4, r5, pc}
    5cb8:	2001888c 	.word	0x2001888c
    5cbc:	2001888a 	.word	0x2001888a
    5cc0:	20004950 	.word	0x20004950
    5cc4:	20015418 	.word	0x20015418

00005cc8 <opcode_0x56()>:
uint16_t opcode_0x56() {
    5cc8:	b510      	push	{r4, lr}
    5cca:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    5ccc:	f7fc ff5a 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5cd0:	4a12      	ldr	r2, [pc, #72]	; (5d1c <opcode_0x56()+0x54>)
    5cd2:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5cd4:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5cd8:	7813      	ldrb	r3, [r2, #0]
    5cda:	bf4c      	ite	mi
    5cdc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ce0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5ce4:	b9b1      	cbnz	r1, 5d14 <opcode_0x56()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5cea:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5cee:	4c0c      	ldr	r4, [pc, #48]	; (5d20 <opcode_0x56()+0x58>)
    5cf0:	7013      	strb	r3, [r2, #0]
    5cf2:	8820      	ldrh	r0, [r4, #0]
    5cf4:	9101      	str	r1, [sp, #4]
    5cf6:	f7fc fe09 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5cfa:	8820      	ldrh	r0, [r4, #0]
    5cfc:	9901      	ldr	r1, [sp, #4]
    5cfe:	f7fc fe05 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    5d02:	4a08      	ldr	r2, [pc, #32]	; (5d24 <opcode_0x56()+0x5c>)
    5d04:	4b08      	ldr	r3, [pc, #32]	; (5d28 <opcode_0x56()+0x60>)
    5d06:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    5d0a:	881b      	ldrh	r3, [r3, #0]
    5d0c:	4418      	add	r0, r3
    5d0e:	b280      	uxth	r0, r0
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    5d10:	b002      	add	sp, #8
    5d12:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5d14:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5d18:	e7e9      	b.n	5cee <opcode_0x56()+0x26>
    5d1a:	bf00      	nop
    5d1c:	20004950 	.word	0x20004950
    5d20:	2001888a 	.word	0x2001888a
    5d24:	20016418 	.word	0x20016418
    5d28:	2001888c 	.word	0x2001888c

00005d2c <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    5d2c:	b510      	push	{r4, lr}
    5d2e:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    5d30:	f7fc ff68 	bl	2c04 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d34:	4a11      	ldr	r2, [pc, #68]	; (5d7c <opcode_0x4E()+0x50>)
    5d36:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d38:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d3c:	7813      	ldrb	r3, [r2, #0]
    5d3e:	bf4c      	ite	mi
    5d40:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d44:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5d48:	b9a9      	cbnz	r1, 5d76 <opcode_0x4E()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5d4e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5d52:	4c0b      	ldr	r4, [pc, #44]	; (5d80 <opcode_0x4E()+0x54>)
    5d54:	7013      	strb	r3, [r2, #0]
    5d56:	8820      	ldrh	r0, [r4, #0]
    5d58:	9101      	str	r1, [sp, #4]
    5d5a:	f7fc fdd7 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d5e:	8820      	ldrh	r0, [r4, #0]
    5d60:	9901      	ldr	r1, [sp, #4]
    5d62:	f7fc fdd3 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    5d66:	4a07      	ldr	r2, [pc, #28]	; (5d84 <opcode_0x4E()+0x58>)
    5d68:	4b07      	ldr	r3, [pc, #28]	; (5d88 <opcode_0x4E()+0x5c>)
    5d6a:	7a50      	ldrb	r0, [r2, #9]
    5d6c:	881b      	ldrh	r3, [r3, #0]
    5d6e:	4418      	add	r0, r3
    5d70:	b280      	uxth	r0, r0
} // 0x4E - LSR - Logical Shift Right - Absolute
    5d72:	b002      	add	sp, #8
    5d74:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5d76:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5d7a:	e7ea      	b.n	5d52 <opcode_0x4E()+0x26>
    5d7c:	20004950 	.word	0x20004950
    5d80:	2001888a 	.word	0x2001888a
    5d84:	20016418 	.word	0x20016418
    5d88:	2001888c 	.word	0x2001888c

00005d8c <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    5d8c:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    5d8e:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    5d90:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    5d92:	f7fc ff53 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d96:	4a12      	ldr	r2, [pc, #72]	; (5de0 <opcode_0x5E()+0x54>)
    5d98:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d9a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d9e:	7813      	ldrb	r3, [r2, #0]
    5da0:	bf4c      	ite	mi
    5da2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5da6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5daa:	b9b1      	cbnz	r1, 5dda <opcode_0x5E()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5db0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5db4:	4c0b      	ldr	r4, [pc, #44]	; (5de4 <opcode_0x5E()+0x58>)
    5db6:	7013      	strb	r3, [r2, #0]
    5db8:	8820      	ldrh	r0, [r4, #0]
    5dba:	9101      	str	r1, [sp, #4]
    5dbc:	f7fc fda6 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5dc0:	8820      	ldrh	r0, [r4, #0]
    5dc2:	9901      	ldr	r1, [sp, #4]
    5dc4:	f7fc fda2 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    5dc8:	4a07      	ldr	r2, [pc, #28]	; (5de8 <opcode_0x5E()+0x5c>)
    5dca:	4b08      	ldr	r3, [pc, #32]	; (5dec <opcode_0x5E()+0x60>)
    5dcc:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    5dd0:	881b      	ldrh	r3, [r3, #0]
    5dd2:	4418      	add	r0, r3
    5dd4:	b280      	uxth	r0, r0
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    5dd6:	b002      	add	sp, #8
    5dd8:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5dda:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5dde:	e7e9      	b.n	5db4 <opcode_0x5E()+0x28>
    5de0:	20004950 	.word	0x20004950
    5de4:	2001888a 	.word	0x2001888a
    5de8:	20016418 	.word	0x20016418
    5dec:	2001888c 	.word	0x2001888c

00005df0 <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    5df0:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5df2:	4d19      	ldr	r5, [pc, #100]	; (5e58 <opcode_0x66()+0x68>)
    5df4:	b083      	sub	sp, #12
    5df6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5df8:	4c18      	ldr	r4, [pc, #96]	; (5e5c <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    5dfa:	8828      	ldrh	r0, [r5, #0]
    5dfc:	3001      	adds	r0, #1
    5dfe:	b280      	uxth	r0, r0
    5e00:	f7fc fbc8 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5e04:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5e06:	b280      	uxth	r0, r0
    5e08:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5e0a:	f7fc fbc3 	bl	2594 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e0e:	4a14      	ldr	r2, [pc, #80]	; (5e60 <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e10:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e14:	7813      	ldrb	r3, [r2, #0]
    5e16:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e1a:	bf14      	ite	ne
    5e1c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e20:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e24:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e26:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    5e28:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    5e2c:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e2e:	4608      	mov	r0, r1
    5e30:	9101      	str	r1, [sp, #4]
    5e32:	f7fc fe73 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5e36:	9901      	ldr	r1, [sp, #4]
    5e38:	8820      	ldrh	r0, [r4, #0]
    5e3a:	f7fc fd67 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e3e:	8820      	ldrh	r0, [r4, #0]
    5e40:	9901      	ldr	r1, [sp, #4]
    5e42:	f7fc fd63 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    5e46:	4a07      	ldr	r2, [pc, #28]	; (5e64 <opcode_0x66()+0x74>)
    5e48:	882b      	ldrh	r3, [r5, #0]
    5e4a:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    5e4e:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    5e50:	b280      	uxth	r0, r0
    5e52:	b003      	add	sp, #12
    5e54:	bd30      	pop	{r4, r5, pc}
    5e56:	bf00      	nop
    5e58:	2001888c 	.word	0x2001888c
    5e5c:	2001888a 	.word	0x2001888a
    5e60:	20004950 	.word	0x20004950
    5e64:	20016418 	.word	0x20016418

00005e68 <opcode_0x76()>:
uint16_t opcode_0x76() {
    5e68:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e6a:	4d18      	ldr	r5, [pc, #96]	; (5ecc <opcode_0x76()+0x64>)
uint16_t opcode_0x76() {
    5e6c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    5e6e:	f7fc fe89 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e72:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e74:	782b      	ldrb	r3, [r5, #0]
    5e76:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e7a:	bf4c      	ite	mi
    5e7c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e80:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5e84:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    5e86:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5e8a:	0602      	lsls	r2, r0, #24
    5e8c:	b2c1      	uxtb	r1, r0
    5e8e:	d417      	bmi.n	5ec0 <opcode_0x76()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5e94:	b9b1      	cbnz	r1, 5ec4 <opcode_0x76()+0x5c>
    5e96:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5e9a:	4c0d      	ldr	r4, [pc, #52]	; (5ed0 <opcode_0x76()+0x68>)
    5e9c:	702b      	strb	r3, [r5, #0]
    5e9e:	8820      	ldrh	r0, [r4, #0]
    5ea0:	9101      	str	r1, [sp, #4]
    5ea2:	f7fc fd33 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ea6:	8820      	ldrh	r0, [r4, #0]
    5ea8:	9901      	ldr	r1, [sp, #4]
    5eaa:	f7fc fd2f 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    5eae:	4a09      	ldr	r2, [pc, #36]	; (5ed4 <opcode_0x76()+0x6c>)
    5eb0:	4b09      	ldr	r3, [pc, #36]	; (5ed8 <opcode_0x76()+0x70>)
    5eb2:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    5eb6:	881b      	ldrh	r3, [r3, #0]
    5eb8:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    5eba:	b280      	uxth	r0, r0
    5ebc:	b003      	add	sp, #12
    5ebe:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5ec4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5ec8:	e7e7      	b.n	5e9a <opcode_0x76()+0x32>
    5eca:	bf00      	nop
    5ecc:	20004950 	.word	0x20004950
    5ed0:	2001888a 	.word	0x2001888a
    5ed4:	20016418 	.word	0x20016418
    5ed8:	2001888c 	.word	0x2001888c

00005edc <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    5edc:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5ede:	4d18      	ldr	r5, [pc, #96]	; (5f40 <opcode_0x6E()+0x64>)
uint16_t opcode_0x6E() {
    5ee0:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    5ee2:	f7fc fe8f 	bl	2c04 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ee6:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5ee8:	782b      	ldrb	r3, [r5, #0]
    5eea:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5eee:	bf4c      	ite	mi
    5ef0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ef4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5ef8:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    5efa:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5efe:	0602      	lsls	r2, r0, #24
    5f00:	b2c1      	uxtb	r1, r0
    5f02:	d417      	bmi.n	5f34 <opcode_0x6E()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5f08:	b9b1      	cbnz	r1, 5f38 <opcode_0x6E()+0x5c>
    5f0a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5f0e:	4c0d      	ldr	r4, [pc, #52]	; (5f44 <opcode_0x6E()+0x68>)
    5f10:	702b      	strb	r3, [r5, #0]
    5f12:	8820      	ldrh	r0, [r4, #0]
    5f14:	9101      	str	r1, [sp, #4]
    5f16:	f7fc fcf9 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f1a:	8820      	ldrh	r0, [r4, #0]
    5f1c:	9901      	ldr	r1, [sp, #4]
    5f1e:	f7fc fcf5 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    5f22:	4a09      	ldr	r2, [pc, #36]	; (5f48 <opcode_0x6E()+0x6c>)
    5f24:	4b09      	ldr	r3, [pc, #36]	; (5f4c <opcode_0x6E()+0x70>)
    5f26:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    5f2a:	881b      	ldrh	r3, [r3, #0]
    5f2c:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    5f2e:	b280      	uxth	r0, r0
    5f30:	b003      	add	sp, #12
    5f32:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5f38:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5f3c:	e7e7      	b.n	5f0e <opcode_0x6E()+0x32>
    5f3e:	bf00      	nop
    5f40:	20004950 	.word	0x20004950
    5f44:	2001888a 	.word	0x2001888a
    5f48:	20016418 	.word	0x20016418
    5f4c:	2001888c 	.word	0x2001888c

00005f50 <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    5f50:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f52:	4d18      	ldr	r5, [pc, #96]	; (5fb4 <opcode_0x7E()+0x64>)
uint16_t opcode_0x7E() {
    5f54:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    5f56:	2000      	movs	r0, #0
    5f58:	f7fc fe70 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f5c:	782b      	ldrb	r3, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f5e:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f60:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f64:	bf4c      	ite	mi
    5f66:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f6a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f6e:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    5f70:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5f74:	0602      	lsls	r2, r0, #24
    5f76:	b2c1      	uxtb	r1, r0
    5f78:	d417      	bmi.n	5faa <opcode_0x7E()+0x5a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5f7e:	b9b1      	cbnz	r1, 5fae <opcode_0x7E()+0x5e>
    5f80:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5f84:	4c0c      	ldr	r4, [pc, #48]	; (5fb8 <opcode_0x7E()+0x68>)
    5f86:	702b      	strb	r3, [r5, #0]
    5f88:	8820      	ldrh	r0, [r4, #0]
    5f8a:	9101      	str	r1, [sp, #4]
    5f8c:	f7fc fcbe 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f90:	8820      	ldrh	r0, [r4, #0]
    5f92:	9901      	ldr	r1, [sp, #4]
    5f94:	f7fc fcba 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    5f98:	4a08      	ldr	r2, [pc, #32]	; (5fbc <opcode_0x7E()+0x6c>)
    5f9a:	4b09      	ldr	r3, [pc, #36]	; (5fc0 <opcode_0x7E()+0x70>)
    5f9c:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    5fa0:	881b      	ldrh	r3, [r3, #0]
    5fa2:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    5fa4:	b280      	uxth	r0, r0
    5fa6:	b003      	add	sp, #12
    5fa8:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5fae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5fb2:	e7e7      	b.n	5f84 <opcode_0x7E()+0x34>
    5fb4:	20004950 	.word	0x20004950
    5fb8:	2001888a 	.word	0x2001888a
    5fbc:	20016418 	.word	0x20016418
    5fc0:	2001888c 	.word	0x2001888c

00005fc4 <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    5fc4:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5fc6:	4d18      	ldr	r5, [pc, #96]	; (6028 <opcode_0x26()+0x64>)
    5fc8:	b083      	sub	sp, #12
    5fca:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5fcc:	4c17      	ldr	r4, [pc, #92]	; (602c <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    5fce:	8828      	ldrh	r0, [r5, #0]
    5fd0:	3001      	adds	r0, #1
    5fd2:	b280      	uxth	r0, r0
    5fd4:	f7fc fade 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5fd8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5fda:	b280      	uxth	r0, r0
    5fdc:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5fde:	f7fc fad9 	bl	2594 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5fe2:	4a13      	ldr	r2, [pc, #76]	; (6030 <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fe4:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5fe8:	7813      	ldrb	r3, [r2, #0]
    5fea:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fee:	bf14      	ite	ne
    5ff0:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ff4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5ff8:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    5ffc:	7013      	strb	r3, [r2, #0]
    5ffe:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6000:	4608      	mov	r0, r1
    6002:	9101      	str	r1, [sp, #4]
    6004:	f7fc fd8a 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6008:	9901      	ldr	r1, [sp, #4]
    600a:	8820      	ldrh	r0, [r4, #0]
    600c:	f7fc fc7e 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6010:	8820      	ldrh	r0, [r4, #0]
    6012:	9901      	ldr	r1, [sp, #4]
    6014:	f7fc fc7a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    6018:	4a06      	ldr	r2, [pc, #24]	; (6034 <opcode_0x26()+0x70>)
    601a:	882b      	ldrh	r3, [r5, #0]
    601c:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    6020:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    6022:	b280      	uxth	r0, r0
    6024:	b003      	add	sp, #12
    6026:	bd30      	pop	{r4, r5, pc}
    6028:	2001888c 	.word	0x2001888c
    602c:	2001888a 	.word	0x2001888a
    6030:	20004950 	.word	0x20004950
    6034:	20015418 	.word	0x20015418

00006038 <opcode_0x36()>:
uint16_t opcode_0x36() {
    6038:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    603a:	4d17      	ldr	r5, [pc, #92]	; (6098 <opcode_0x36()+0x60>)
uint16_t opcode_0x36() {
    603c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    603e:	f7fc fda1 	bl	2b84 <Fetch_ZeroPage_X()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6042:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6044:	782b      	ldrb	r3, [r5, #0]
    6046:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    604a:	bf4c      	ite	mi
    604c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6050:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    6054:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6058:	0602      	lsls	r2, r0, #24
    605a:	b2c1      	uxtb	r1, r0
    605c:	d417      	bmi.n	608e <opcode_0x36()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    605e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6062:	b9b1      	cbnz	r1, 6092 <opcode_0x36()+0x5a>
    6064:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6068:	4c0c      	ldr	r4, [pc, #48]	; (609c <opcode_0x36()+0x64>)
    606a:	702b      	strb	r3, [r5, #0]
    606c:	8820      	ldrh	r0, [r4, #0]
    606e:	9101      	str	r1, [sp, #4]
    6070:	f7fc fc4c 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6074:	8820      	ldrh	r0, [r4, #0]
    6076:	9901      	ldr	r1, [sp, #4]
    6078:	f7fc fc48 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    607c:	4a08      	ldr	r2, [pc, #32]	; (60a0 <opcode_0x36()+0x68>)
    607e:	4b09      	ldr	r3, [pc, #36]	; (60a4 <opcode_0x36()+0x6c>)
    6080:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    6084:	881b      	ldrh	r3, [r3, #0]
    6086:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    6088:	b280      	uxth	r0, r0
    608a:	b003      	add	sp, #12
    608c:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6092:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6096:	e7e7      	b.n	6068 <opcode_0x36()+0x30>
    6098:	20004950 	.word	0x20004950
    609c:	2001888a 	.word	0x2001888a
    60a0:	20015418 	.word	0x20015418
    60a4:	2001888c 	.word	0x2001888c

000060a8 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    60a8:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    60aa:	4d17      	ldr	r5, [pc, #92]	; (6108 <opcode_0x2E()+0x60>)
uint16_t opcode_0x2E() {
    60ac:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    60ae:	f7fc fda9 	bl	2c04 <Fetch_Absolute()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    60b2:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    60b4:	782b      	ldrb	r3, [r5, #0]
    60b6:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    60ba:	bf4c      	ite	mi
    60bc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    60c0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    60c4:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    60c8:	0602      	lsls	r2, r0, #24
    60ca:	b2c1      	uxtb	r1, r0
    60cc:	d417      	bmi.n	60fe <opcode_0x2E()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    60ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    60d2:	b9b1      	cbnz	r1, 6102 <opcode_0x2E()+0x5a>
    60d4:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    60d8:	4c0c      	ldr	r4, [pc, #48]	; (610c <opcode_0x2E()+0x64>)
    60da:	702b      	strb	r3, [r5, #0]
    60dc:	8820      	ldrh	r0, [r4, #0]
    60de:	9101      	str	r1, [sp, #4]
    60e0:	f7fc fc14 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60e4:	8820      	ldrh	r0, [r4, #0]
    60e6:	9901      	ldr	r1, [sp, #4]
    60e8:	f7fc fc10 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    60ec:	4a08      	ldr	r2, [pc, #32]	; (6110 <opcode_0x2E()+0x68>)
    60ee:	4b09      	ldr	r3, [pc, #36]	; (6114 <opcode_0x2E()+0x6c>)
    60f0:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    60f4:	881b      	ldrh	r3, [r3, #0]
    60f6:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    60f8:	b280      	uxth	r0, r0
    60fa:	b003      	add	sp, #12
    60fc:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    60fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6102:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6106:	e7e7      	b.n	60d8 <opcode_0x2E()+0x30>
    6108:	20004950 	.word	0x20004950
    610c:	2001888a 	.word	0x2001888a
    6110:	20015418 	.word	0x20015418
    6114:	2001888c 	.word	0x2001888c

00006118 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    6118:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    611a:	4d18      	ldr	r5, [pc, #96]	; (617c <opcode_0x3E()+0x64>)
uint16_t opcode_0x3E() {
    611c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    611e:	2000      	movs	r0, #0
    6120:	f7fc fd8c 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6124:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6126:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6128:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    612c:	bf4c      	ite	mi
    612e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6132:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    6136:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    613a:	0602      	lsls	r2, r0, #24
    613c:	b2c1      	uxtb	r1, r0
    613e:	d417      	bmi.n	6170 <opcode_0x3E()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6144:	b9b1      	cbnz	r1, 6174 <opcode_0x3E()+0x5c>
    6146:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    614a:	4c0d      	ldr	r4, [pc, #52]	; (6180 <opcode_0x3E()+0x68>)
    614c:	702b      	strb	r3, [r5, #0]
    614e:	8820      	ldrh	r0, [r4, #0]
    6150:	9101      	str	r1, [sp, #4]
    6152:	f7fc fbdb 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6156:	8820      	ldrh	r0, [r4, #0]
    6158:	9901      	ldr	r1, [sp, #4]
    615a:	f7fc fbd7 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    615e:	4a09      	ldr	r2, [pc, #36]	; (6184 <opcode_0x3E()+0x6c>)
    6160:	4b09      	ldr	r3, [pc, #36]	; (6188 <opcode_0x3E()+0x70>)
    6162:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    6166:	881b      	ldrh	r3, [r3, #0]
    6168:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    616a:	b280      	uxth	r0, r0
    616c:	b003      	add	sp, #12
    616e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6174:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6178:	e7e7      	b.n	614a <opcode_0x3E()+0x32>
    617a:	bf00      	nop
    617c:	20004950 	.word	0x20004950
    6180:	2001888a 	.word	0x2001888a
    6184:	20015418 	.word	0x20015418
    6188:	2001888c 	.word	0x2001888c

0000618c <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    618c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    618e:	4c52      	ldr	r4, [pc, #328]	; (62d8 <Branch_Taken()+0x14c>)
    6190:	2100      	movs	r1, #0
    6192:	8820      	ldrh	r0, [r4, #0]
    6194:	3001      	adds	r0, #1
    6196:	b280      	uxth	r0, r0
    6198:	f7fc f9fc 	bl	2594 <read_byte(unsigned short, bool)>
    if ((reg_data & 0x0080) == 0x0080) {
    619c:	0605      	lsls	r5, r0, #24

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    619e:	b283      	uxth	r3, r0
    effective_address = (register_pc + 1) + effective_address;
    61a0:	8820      	ldrh	r0, [r4, #0]
    61a2:	4d4e      	ldr	r5, [pc, #312]	; (62dc <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    61a4:	bf48      	it	mi
    61a6:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    61aa:	1c42      	adds	r2, r0, #1
    61ac:	4413      	add	r3, r2
    61ae:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    61b0:	ea80 0103 	eor.w	r1, r0, r3
    effective_address = (register_pc + 1) + effective_address;
    61b4:	802b      	strh	r3, [r5, #0]
    return read_byte(register_pc+offset, false);
    61b6:	3002      	adds	r0, #2
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    61b8:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    61bc:	d006      	beq.n	61cc <Branch_Taken()+0x40>
    61be:	2100      	movs	r1, #0
    61c0:	b280      	uxth	r0, r0
    61c2:	f7fc f9e7 	bl	2594 <read_byte(unsigned short, bool)>
    61c6:	8820      	ldrh	r0, [r4, #0]
    61c8:	2100      	movs	r1, #0
    61ca:	3003      	adds	r0, #3
    61cc:	b280      	uxth	r0, r0
    61ce:	f7fc f9e1 	bl	2594 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    61d2:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    61d4:	4a42      	ldr	r2, [pc, #264]	; (62e0 <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    61d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    61da:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    61dc:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    61de:	d376      	bcc.n	62ce <Branch_Taken()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    61e0:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    61e4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    61e8:	d305      	bcc.n	61f6 <Branch_Taken()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    61ea:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    61ee:	b292      	uxth	r2, r2
    61f0:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    61f4:	d36b      	bcc.n	62ce <Branch_Taken()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    61f6:	4a3b      	ldr	r2, [pc, #236]	; (62e4 <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    61f8:	2000      	movs	r0, #0
    61fa:	493b      	ldr	r1, [pc, #236]	; (62e8 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    61fc:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    61fe:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6200:	2a01      	cmp	r2, #1
    6202:	d005      	beq.n	6210 <Branch_Taken()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6204:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6208:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    620c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    6210:	4a36      	ldr	r2, [pc, #216]	; (62ec <Branch_Taken()+0x160>)
    6212:	7812      	ldrb	r2, [r2, #0]
    6214:	b94a      	cbnz	r2, 622a <Branch_Taken()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6216:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    621a:	680a      	ldr	r2, [r1, #0]
    621c:	04d0      	lsls	r0, r2, #19
    621e:	d4fc      	bmi.n	621a <Branch_Taken()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    6220:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    6224:	680a      	ldr	r2, [r1, #0]
    6226:	04d2      	lsls	r2, r2, #19
    6228:	d5fc      	bpl.n	6224 <Branch_Taken()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    622a:	4e31      	ldr	r6, [pc, #196]	; (62f0 <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    622c:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    6230:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    6232:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6234:	06d8      	lsls	r0, r3, #27
    6236:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    623a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    623e:	6829      	ldr	r1, [r5, #0]
    6240:	4a2c      	ldr	r2, [pc, #176]	; (62f4 <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6242:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6246:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6248:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    624a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    624e:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6252:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6254:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6258:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    625c:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    625e:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6262:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6266:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6268:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    626a:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    626c:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    626e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6272:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6274:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6278:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    627a:	491f      	ldr	r1, [pc, #124]	; (62f8 <Branch_Taken()+0x16c>)
    627c:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    627e:	4d1f      	ldr	r5, [pc, #124]	; (62fc <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6280:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6282:	0559      	lsls	r1, r3, #21
    6284:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    6288:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    628a:	0359      	lsls	r1, r3, #13
    628c:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    6290:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6292:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6294:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6298:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    629c:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    629e:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    62a0:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    62a2:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    62a6:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    62aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    62ae:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    62b0:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    62b2:	682c      	ldr	r4, [r5, #0]
    62b4:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    62b8:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    62ba:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    62bc:	4910      	ldr	r1, [pc, #64]	; (6300 <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    62be:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    62c0:	4a10      	ldr	r2, [pc, #64]	; (6304 <Branch_Taken()+0x178>)
    62c2:	680c      	ldr	r4, [r1, #0]
    62c4:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    62c6:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    62c8:	4303      	orrs	r3, r0
    62ca:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    62cc:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    62ce:	4a0e      	ldr	r2, [pc, #56]	; (6308 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    62d0:	7812      	ldrb	r2, [r2, #0]
    62d2:	2a01      	cmp	r2, #1
    62d4:	d98f      	bls.n	61f6 <Branch_Taken()+0x6a>
    62d6:	bd70      	pop	{r4, r5, r6, pc}
    62d8:	2001888c 	.word	0x2001888c
    62dc:	2001888a 	.word	0x2001888a
    62e0:	20018888 	.word	0x20018888
    62e4:	200188a6 	.word	0x200188a6
    62e8:	200188a1 	.word	0x200188a1
    62ec:	2000494e 	.word	0x2000494e
    62f0:	42004000 	.word	0x42004000
    62f4:	6dfffff3 	.word	0x6dfffff3
    62f8:	cff3efff 	.word	0xcff3efff
    62fc:	42008000 	.word	0x42008000
    6300:	4200c000 	.word	0x4200c000
    6304:	7fffff6f 	.word	0x7fffff6f
    6308:	20018898 	.word	0x20018898

0000630c <opcode_0xB0()>:
uint16_t opcode_0xB0() {
    if ((flag_c) == 1) Branch_Taken();
    630c:	4b08      	ldr	r3, [pc, #32]	; (6330 <opcode_0xB0()+0x24>)
uint16_t opcode_0xB0() {
    630e:	b510      	push	{r4, lr}
    if ((flag_c) == 1) Branch_Taken();
    6310:	7819      	ldrb	r1, [r3, #0]
    6312:	4c08      	ldr	r4, [pc, #32]	; (6334 <opcode_0xB0()+0x28>)
    6314:	f011 0101 	ands.w	r1, r1, #1
    6318:	d003      	beq.n	6322 <opcode_0xB0()+0x16>
    631a:	f7ff ff37 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xB0 - BCS - Branch on Carry Set
    631e:	8820      	ldrh	r0, [r4, #0]
    6320:	bd10      	pop	{r4, pc}
    return read_byte(register_pc+offset, false);
    6322:	8820      	ldrh	r0, [r4, #0]
    6324:	3001      	adds	r0, #1
    6326:	b280      	uxth	r0, r0
    6328:	f7fc f934 	bl	2594 <read_byte(unsigned short, bool)>
    632c:	8820      	ldrh	r0, [r4, #0]
    632e:	bd10      	pop	{r4, pc}
    6330:	20004950 	.word	0x20004950
    6334:	2001888c 	.word	0x2001888c

00006338 <opcode_0x90()>:
uint16_t opcode_0x90() {
    if ((flag_c) == 0) Branch_Taken();
    6338:	4b08      	ldr	r3, [pc, #32]	; (635c <opcode_0x90()+0x24>)
uint16_t opcode_0x90() {
    633a:	b510      	push	{r4, lr}
    if ((flag_c) == 0) Branch_Taken();
    633c:	781b      	ldrb	r3, [r3, #0]
    633e:	4c08      	ldr	r4, [pc, #32]	; (6360 <opcode_0x90()+0x28>)
    6340:	07db      	lsls	r3, r3, #31
    6342:	d403      	bmi.n	634c <opcode_0x90()+0x14>
    6344:	f7ff ff22 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
    6348:	8820      	ldrh	r0, [r4, #0]
    634a:	bd10      	pop	{r4, pc}
    634c:	8820      	ldrh	r0, [r4, #0]
    634e:	2100      	movs	r1, #0
    6350:	3001      	adds	r0, #1
    6352:	b280      	uxth	r0, r0
    6354:	f7fc f91e 	bl	2594 <read_byte(unsigned short, bool)>
    6358:	8820      	ldrh	r0, [r4, #0]
    635a:	bd10      	pop	{r4, pc}
    635c:	20004950 	.word	0x20004950
    6360:	2001888c 	.word	0x2001888c

00006364 <opcode_0xF0()>:
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    6364:	4b09      	ldr	r3, [pc, #36]	; (638c <opcode_0xF0()+0x28>)
uint16_t opcode_0xF0() {
    6366:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	4c09      	ldr	r4, [pc, #36]	; (6390 <opcode_0xF0()+0x2c>)
    636c:	f3c3 0140 	ubfx	r1, r3, #1, #1
    6370:	079b      	lsls	r3, r3, #30
    6372:	d503      	bpl.n	637c <opcode_0xF0()+0x18>
    6374:	f7ff ff0a 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    6378:	8820      	ldrh	r0, [r4, #0]
    637a:	bd10      	pop	{r4, pc}
    637c:	8820      	ldrh	r0, [r4, #0]
    637e:	3001      	adds	r0, #1
    6380:	b280      	uxth	r0, r0
    6382:	f7fc f907 	bl	2594 <read_byte(unsigned short, bool)>
    6386:	8820      	ldrh	r0, [r4, #0]
    6388:	bd10      	pop	{r4, pc}
    638a:	bf00      	nop
    638c:	20004950 	.word	0x20004950
    6390:	2001888c 	.word	0x2001888c

00006394 <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    6394:	4b08      	ldr	r3, [pc, #32]	; (63b8 <opcode_0xD0()+0x24>)
uint16_t opcode_0xD0() {
    6396:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	4c08      	ldr	r4, [pc, #32]	; (63bc <opcode_0xD0()+0x28>)
    639c:	079b      	lsls	r3, r3, #30
    639e:	d403      	bmi.n	63a8 <opcode_0xD0()+0x14>
    63a0:	f7ff fef4 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    63a4:	8820      	ldrh	r0, [r4, #0]
    63a6:	bd10      	pop	{r4, pc}
    63a8:	8820      	ldrh	r0, [r4, #0]
    63aa:	2100      	movs	r1, #0
    63ac:	3001      	adds	r0, #1
    63ae:	b280      	uxth	r0, r0
    63b0:	f7fc f8f0 	bl	2594 <read_byte(unsigned short, bool)>
    63b4:	8820      	ldrh	r0, [r4, #0]
    63b6:	bd10      	pop	{r4, pc}
    63b8:	20004950 	.word	0x20004950
    63bc:	2001888c 	.word	0x2001888c

000063c0 <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    63c0:	4b09      	ldr	r3, [pc, #36]	; (63e8 <opcode_0x70()+0x28>)
uint16_t opcode_0x70() {
    63c2:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    63c4:	781b      	ldrb	r3, [r3, #0]
    63c6:	4c09      	ldr	r4, [pc, #36]	; (63ec <opcode_0x70()+0x2c>)
    63c8:	f3c3 1180 	ubfx	r1, r3, #6, #1
    63cc:	065b      	lsls	r3, r3, #25
    63ce:	d503      	bpl.n	63d8 <opcode_0x70()+0x18>
    63d0:	f7ff fedc 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    63d4:	8820      	ldrh	r0, [r4, #0]
    63d6:	bd10      	pop	{r4, pc}
    63d8:	8820      	ldrh	r0, [r4, #0]
    63da:	3001      	adds	r0, #1
    63dc:	b280      	uxth	r0, r0
    63de:	f7fc f8d9 	bl	2594 <read_byte(unsigned short, bool)>
    63e2:	8820      	ldrh	r0, [r4, #0]
    63e4:	bd10      	pop	{r4, pc}
    63e6:	bf00      	nop
    63e8:	20004950 	.word	0x20004950
    63ec:	2001888c 	.word	0x2001888c

000063f0 <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    63f0:	4b08      	ldr	r3, [pc, #32]	; (6414 <opcode_0x50()+0x24>)
uint16_t opcode_0x50() {
    63f2:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    63f4:	781b      	ldrb	r3, [r3, #0]
    63f6:	4c08      	ldr	r4, [pc, #32]	; (6418 <opcode_0x50()+0x28>)
    63f8:	065b      	lsls	r3, r3, #25
    63fa:	d403      	bmi.n	6404 <opcode_0x50()+0x14>
    63fc:	f7ff fec6 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    6400:	8820      	ldrh	r0, [r4, #0]
    6402:	bd10      	pop	{r4, pc}
    6404:	8820      	ldrh	r0, [r4, #0]
    6406:	2100      	movs	r1, #0
    6408:	3001      	adds	r0, #1
    640a:	b280      	uxth	r0, r0
    640c:	f7fc f8c2 	bl	2594 <read_byte(unsigned short, bool)>
    6410:	8820      	ldrh	r0, [r4, #0]
    6412:	bd10      	pop	{r4, pc}
    6414:	20004950 	.word	0x20004950
    6418:	2001888c 	.word	0x2001888c

0000641c <opcode_0x30()>:
uint16_t opcode_0x30() {
    if ((flag_n) == 1) Branch_Taken();
    641c:	4b08      	ldr	r3, [pc, #32]	; (6440 <opcode_0x30()+0x24>)
uint16_t opcode_0x30() {
    641e:	b510      	push	{r4, lr}
    if ((flag_n) == 1) Branch_Taken();
    6420:	781b      	ldrb	r3, [r3, #0]
    6422:	4c08      	ldr	r4, [pc, #32]	; (6444 <opcode_0x30()+0x28>)
    6424:	09db      	lsrs	r3, r3, #7
    6426:	d107      	bne.n	6438 <opcode_0x30()+0x1c>
    6428:	8820      	ldrh	r0, [r4, #0]
    642a:	2100      	movs	r1, #0
    642c:	3001      	adds	r0, #1
    642e:	b280      	uxth	r0, r0
    6430:	f7fc f8b0 	bl	2594 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x30 - BMI - Branch on Minus (N Flag Set)
    6434:	8820      	ldrh	r0, [r4, #0]
    6436:	bd10      	pop	{r4, pc}
    if ((flag_n) == 1) Branch_Taken();
    6438:	f7ff fea8 	bl	618c <Branch_Taken()>
} // 0x30 - BMI - Branch on Minus (N Flag Set)
    643c:	8820      	ldrh	r0, [r4, #0]
    643e:	bd10      	pop	{r4, pc}
    6440:	20004950 	.word	0x20004950
    6444:	2001888c 	.word	0x2001888c

00006448 <opcode_0x10()>:
uint16_t opcode_0x10() {
    if ((flag_n) == 0) Branch_Taken();
    6448:	4b09      	ldr	r3, [pc, #36]	; (6470 <opcode_0x10()+0x28>)
uint16_t opcode_0x10() {
    644a:	b510      	push	{r4, lr}
    if ((flag_n) == 0) Branch_Taken();
    644c:	f993 3000 	ldrsb.w	r3, [r3]
    6450:	4c08      	ldr	r4, [pc, #32]	; (6474 <opcode_0x10()+0x2c>)
    6452:	2b00      	cmp	r3, #0
    6454:	db03      	blt.n	645e <opcode_0x10()+0x16>
    6456:	f7ff fe99 	bl	618c <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    } 
    return(register_pc);
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)
    645a:	8820      	ldrh	r0, [r4, #0]
    645c:	bd10      	pop	{r4, pc}
    645e:	8820      	ldrh	r0, [r4, #0]
    6460:	2100      	movs	r1, #0
    6462:	3001      	adds	r0, #1
    6464:	b280      	uxth	r0, r0
    6466:	f7fc f895 	bl	2594 <read_byte(unsigned short, bool)>
    646a:	8820      	ldrh	r0, [r4, #0]
    646c:	bd10      	pop	{r4, pc}
    646e:	bf00      	nop
    6470:	20004950 	.word	0x20004950
    6474:	2001888c 	.word	0x2001888c

00006478 <opcode_0x4C()>:

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    6478:	b570      	push	{r4, r5, r6, lr}
    647a:	4d4b      	ldr	r5, [pc, #300]	; (65a8 <opcode_0x4C()+0x130>)
    647c:	2100      	movs	r1, #0
    647e:	8828      	ldrh	r0, [r5, #0]
    6480:	3001      	adds	r0, #1
    6482:	b280      	uxth	r0, r0
    6484:	f7fc f886 	bl	2594 <read_byte(unsigned short, bool)>
    6488:	882b      	ldrh	r3, [r5, #0]
    648a:	4604      	mov	r4, r0
    648c:	2100      	movs	r1, #0
    648e:	1c98      	adds	r0, r3, #2
    6490:	b280      	uxth	r0, r0
    6492:	f7fc f87f 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    6496:	4a45      	ldr	r2, [pc, #276]	; (65ac <opcode_0x4C()+0x134>)
    6498:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    649c:	4b44      	ldr	r3, [pc, #272]	; (65b0 <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    649e:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    64a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    64a4:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    64a6:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    64a8:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    64aa:	d378      	bcc.n	659e <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    64ac:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    64b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    64b4:	d305      	bcc.n	64c2 <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    64b6:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    64ba:	b29b      	uxth	r3, r3
    64bc:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    64c0:	d36d      	bcc.n	659e <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    64c2:	4b3c      	ldr	r3, [pc, #240]	; (65b4 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    64c4:	2100      	movs	r1, #0
    64c6:	4a3c      	ldr	r2, [pc, #240]	; (65b8 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    64c8:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    64ca:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    64cc:	2b01      	cmp	r3, #1
    64ce:	d005      	beq.n	64dc <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    64d0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    64d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    64d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    64dc:	4b37      	ldr	r3, [pc, #220]	; (65bc <opcode_0x4C()+0x144>)
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	b94b      	cbnz	r3, 64f6 <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    64e2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    64e6:	6813      	ldr	r3, [r2, #0]
    64e8:	04d9      	lsls	r1, r3, #19
    64ea:	d4fc      	bmi.n	64e6 <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    64ec:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    64f0:	6813      	ldr	r3, [r2, #0]
    64f2:	04db      	lsls	r3, r3, #19
    64f4:	d5fc      	bpl.n	64f0 <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    64f6:	4d32      	ldr	r5, [pc, #200]	; (65c0 <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    64f8:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    64fc:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    64fe:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6500:	06c1      	lsls	r1, r0, #27
    6502:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6506:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    650a:	6832      	ldr	r2, [r6, #0]
    650c:	4b2d      	ldr	r3, [pc, #180]	; (65c4 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    650e:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6512:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6516:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6518:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    651a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    651e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6522:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6524:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6528:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    652c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    652e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6532:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6536:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6538:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    653a:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    653c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    653e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6542:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6548:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    654a:	4a1f      	ldr	r2, [pc, #124]	; (65c8 <opcode_0x4C()+0x150>)
    654c:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    654e:	4e1f      	ldr	r6, [pc, #124]	; (65cc <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6550:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6552:	0542      	lsls	r2, r0, #21
    6554:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6558:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    655a:	0342      	lsls	r2, r0, #13
    655c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6560:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6562:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6564:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    656c:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    656e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6570:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6574:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6578:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    657a:	6832      	ldr	r2, [r6, #0]
    657c:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6580:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6582:	4a13      	ldr	r2, [pc, #76]	; (65d0 <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6584:	ea43 030c 	orr.w	r3, r3, ip
    6588:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    658a:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    658c:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6592:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6594:	4323      	orrs	r3, r4
    6596:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6598:	430b      	orrs	r3, r1
    659a:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    659c:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    659e:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	2b01      	cmp	r3, #1
    65a4:	d98d      	bls.n	64c2 <opcode_0x4C()+0x4a>
    65a6:	bd70      	pop	{r4, r5, r6, pc}
    65a8:	2001888c 	.word	0x2001888c
    65ac:	2001888a 	.word	0x2001888a
    65b0:	20018888 	.word	0x20018888
    65b4:	200188a6 	.word	0x200188a6
    65b8:	200188a1 	.word	0x200188a1
    65bc:	2000494e 	.word	0x2000494e
    65c0:	42004000 	.word	0x42004000
    65c4:	6dfffff3 	.word	0x6dfffff3
    65c8:	cff3efff 	.word	0xcff3efff
    65cc:	42008000 	.word	0x42008000
    65d0:	7fffff6f 	.word	0x7fffff6f
    65d4:	20018898 	.word	0x20018898

000065d8 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    65d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    65da:	4e52      	ldr	r6, [pc, #328]	; (6724 <opcode_0x6C()+0x14c>)
    65dc:	2100      	movs	r1, #0
    65de:	8830      	ldrh	r0, [r6, #0]
    65e0:	3001      	adds	r0, #1
    65e2:	b280      	uxth	r0, r0
    65e4:	f7fb ffd6 	bl	2594 <read_byte(unsigned short, bool)>
    65e8:	8833      	ldrh	r3, [r6, #0]
    65ea:	4604      	mov	r4, r0
    65ec:	2100      	movs	r1, #0
    65ee:	1c98      	adds	r0, r3, #2
    65f0:	b280      	uxth	r0, r0
    65f2:	f7fb ffcf 	bl	2594 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    65f6:	2100      	movs	r1, #0
    65f8:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    65fc:	b284      	uxth	r4, r0
    65fe:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    6600:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    6602:	f7fb ffc7 	bl	2594 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    6606:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    6608:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    660a:	b2a0      	uxth	r0, r4
    660c:	f7fb ffc2 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    6610:	4945      	ldr	r1, [pc, #276]	; (6728 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    6612:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    6614:	4a45      	ldr	r2, [pc, #276]	; (672c <opcode_0x6C()+0x154>)
    6616:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    6618:	1943      	adds	r3, r0, r5
    661a:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    661c:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    661e:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    6620:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6622:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6626:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    6628:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    662a:	d376      	bcc.n	671a <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    662c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    6630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6634:	d305      	bcc.n	6642 <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6636:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    663a:	b29b      	uxth	r3, r3
    663c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    6640:	d36b      	bcc.n	671a <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6642:	4b3b      	ldr	r3, [pc, #236]	; (6730 <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    6644:	2100      	movs	r1, #0
    6646:	4a3b      	ldr	r2, [pc, #236]	; (6734 <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6648:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    664a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    664c:	2b01      	cmp	r3, #1
    664e:	d005      	beq.n	665c <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6650:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6654:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    665c:	4b36      	ldr	r3, [pc, #216]	; (6738 <opcode_0x6C()+0x160>)
    665e:	781b      	ldrb	r3, [r3, #0]
    6660:	b94b      	cbnz	r3, 6676 <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6662:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6666:	6813      	ldr	r3, [r2, #0]
    6668:	04d9      	lsls	r1, r3, #19
    666a:	d4fc      	bmi.n	6666 <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    666c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6670:	6813      	ldr	r3, [r2, #0]
    6672:	04db      	lsls	r3, r3, #19
    6674:	d5fc      	bpl.n	6670 <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6676:	4d31      	ldr	r5, [pc, #196]	; (673c <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6678:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    667c:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    667e:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6680:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6682:	4f2f      	ldr	r7, [pc, #188]	; (6740 <opcode_0x6C()+0x168>)
    6684:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6688:	4b2e      	ldr	r3, [pc, #184]	; (6744 <opcode_0x6C()+0x16c>)
    668a:	6832      	ldr	r2, [r6, #0]
    668c:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    668e:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6690:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6694:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6698:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    669a:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    669e:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    66a2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    66a4:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    66a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    66ac:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    66ae:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    66b0:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    66b2:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    66b4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    66b8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    66ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    66be:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    66c0:	4a21      	ldr	r2, [pc, #132]	; (6748 <opcode_0x6C()+0x170>)
    66c2:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    66c4:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    66c6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    66c8:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    66ca:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    66ce:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    66d2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    66d6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    66d8:	0342      	lsls	r2, r0, #13
    66da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    66de:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    66e0:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    66e2:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    66e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    66ea:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    66ec:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    66ee:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    66f2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    66f6:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    66f8:	683a      	ldr	r2, [r7, #0]
    66fa:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    66fe:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6700:	4a12      	ldr	r2, [pc, #72]	; (674c <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6702:	4333      	orrs	r3, r6
    6704:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6706:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6708:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    670e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6710:	4323      	orrs	r3, r4
    6712:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6714:	430b      	orrs	r3, r1
    6716:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    6718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    671a:	4b0d      	ldr	r3, [pc, #52]	; (6750 <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	2b01      	cmp	r3, #1
    6720:	d98f      	bls.n	6642 <opcode_0x6C()+0x6a>
    6722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6724:	2001888c 	.word	0x2001888c
    6728:	2001888a 	.word	0x2001888a
    672c:	20018888 	.word	0x20018888
    6730:	200188a6 	.word	0x200188a6
    6734:	200188a1 	.word	0x200188a1
    6738:	2000494e 	.word	0x2000494e
    673c:	42004000 	.word	0x42004000
    6740:	42008000 	.word	0x42008000
    6744:	6dfffff3 	.word	0x6dfffff3
    6748:	cff3efff 	.word	0xcff3efff
    674c:	7fffff6f 	.word	0x7fffff6f
    6750:	20018898 	.word	0x20018898

00006754 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    6754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    6756:	4d57      	ldr	r5, [pc, #348]	; (68b4 <opcode_0x20()+0x160>)
    6758:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    675a:	4c57      	ldr	r4, [pc, #348]	; (68b8 <opcode_0x20()+0x164>)
    675c:	8828      	ldrh	r0, [r5, #0]
    675e:	3001      	adds	r0, #1
    6760:	b280      	uxth	r0, r0
    6762:	f7fb ff17 	bl	2594 <read_byte(unsigned short, bool)>
    6766:	882b      	ldrh	r3, [r5, #0]
    6768:	4606      	mov	r6, r0
    676a:	2100      	movs	r1, #0
    676c:	1c98      	adds	r0, r3, #2
    676e:	b280      	uxth	r0, r0
    6770:	f7fb ff10 	bl	2594 <read_byte(unsigned short, bool)>
    6774:	7823      	ldrb	r3, [r4, #0]
    6776:	4607      	mov	r7, r0
    6778:	2100      	movs	r1, #0
    677a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    677e:	f7fb ff09 	bl	2594 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    6782:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    6784:	7820      	ldrb	r0, [r4, #0]
    6786:	0a09      	lsrs	r1, r1, #8
    6788:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    678c:	f7fc f8be 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    6790:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    6792:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    6794:	3b01      	subs	r3, #1
    6796:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    6798:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    679c:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    679e:	f7fc f8b5 	bl	290c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    67a2:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    67a4:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    67a8:	4a44      	ldr	r2, [pc, #272]	; (68bc <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    67aa:	3b01      	subs	r3, #1
    67ac:	b280      	uxth	r0, r0
    67ae:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    67b0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    67b4:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    67b6:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    67b8:	d376      	bcc.n	68a8 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    67ba:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    67be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    67c2:	d305      	bcc.n	67d0 <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    67c4:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    67c8:	b29b      	uxth	r3, r3
    67ca:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    67ce:	d36b      	bcc.n	68a8 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    67d0:	4b3b      	ldr	r3, [pc, #236]	; (68c0 <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    67d2:	2100      	movs	r1, #0
    67d4:	4a3b      	ldr	r2, [pc, #236]	; (68c4 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    67d6:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    67d8:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    67da:	2b01      	cmp	r3, #1
    67dc:	d005      	beq.n	67ea <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    67de:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    67e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    67e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    67ea:	4b37      	ldr	r3, [pc, #220]	; (68c8 <opcode_0x20()+0x174>)
    67ec:	781b      	ldrb	r3, [r3, #0]
    67ee:	b94b      	cbnz	r3, 6804 <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    67f0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    67f4:	6813      	ldr	r3, [r2, #0]
    67f6:	04d9      	lsls	r1, r3, #19
    67f8:	d4fc      	bmi.n	67f4 <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    67fa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    67fe:	6813      	ldr	r3, [r2, #0]
    6800:	04db      	lsls	r3, r3, #19
    6802:	d5fc      	bpl.n	67fe <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6804:	4d31      	ldr	r5, [pc, #196]	; (68cc <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6806:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    680a:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    680c:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    680e:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6810:	4f2f      	ldr	r7, [pc, #188]	; (68d0 <opcode_0x20()+0x17c>)
    6812:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6816:	4b2f      	ldr	r3, [pc, #188]	; (68d4 <opcode_0x20()+0x180>)
    6818:	6832      	ldr	r2, [r6, #0]
    681a:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    681c:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    681e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6822:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6826:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6828:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    682c:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6830:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6832:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6836:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    683a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    683c:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    683e:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6840:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6842:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6846:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    684c:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    684e:	4a22      	ldr	r2, [pc, #136]	; (68d8 <opcode_0x20()+0x184>)
    6850:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6852:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6854:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6856:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6858:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    685c:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6860:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6864:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6866:	0342      	lsls	r2, r0, #13
    6868:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    686c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    686e:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6870:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6878:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    687a:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    687c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6880:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6884:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6886:	683a      	ldr	r2, [r7, #0]
    6888:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    688c:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    688e:	4a13      	ldr	r2, [pc, #76]	; (68dc <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6890:	4333      	orrs	r3, r6
    6892:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6894:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6896:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6898:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    689c:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    689e:	4323      	orrs	r3, r4
    68a0:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    68a2:	430b      	orrs	r3, r1
    68a4:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    68a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    68a8:	4b0d      	ldr	r3, [pc, #52]	; (68e0 <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    68aa:	781b      	ldrb	r3, [r3, #0]
    68ac:	2b01      	cmp	r3, #1
    68ae:	d98f      	bls.n	67d0 <opcode_0x20()+0x7c>
    68b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68b2:	bf00      	nop
    68b4:	2001888c 	.word	0x2001888c
    68b8:	20004951 	.word	0x20004951
    68bc:	20018888 	.word	0x20018888
    68c0:	200188a6 	.word	0x200188a6
    68c4:	200188a1 	.word	0x200188a1
    68c8:	2000494e 	.word	0x2000494e
    68cc:	42004000 	.word	0x42004000
    68d0:	42008000 	.word	0x42008000
    68d4:	6dfffff3 	.word	0x6dfffff3
    68d8:	cff3efff 	.word	0xcff3efff
    68dc:	7fffff6f 	.word	0x7fffff6f
    68e0:	20018898 	.word	0x20018898

000068e4 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    68e6:	4d58      	ldr	r5, [pc, #352]	; (6a48 <opcode_0x40()+0x164>)
    68e8:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    68ea:	4c58      	ldr	r4, [pc, #352]	; (6a4c <opcode_0x40()+0x168>)
    68ec:	8828      	ldrh	r0, [r5, #0]
    68ee:	3001      	adds	r0, #1
    68f0:	b280      	uxth	r0, r0
    68f2:	f7fb fe4f 	bl	2594 <read_byte(unsigned short, bool)>
    68f6:	7820      	ldrb	r0, [r4, #0]
    68f8:	2100      	movs	r1, #0
    68fa:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    68fe:	f7fb fe49 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6902:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6904:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6906:	3301      	adds	r3, #1
    6908:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    690a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    690e:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6910:	f7fb fe40 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6914:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    6916:	4a4e      	ldr	r2, [pc, #312]	; (6a50 <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    6918:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    691a:	3301      	adds	r3, #1
    691c:	7010      	strb	r0, [r2, #0]
    691e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    6920:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6924:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6926:	f7fb fe35 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    692a:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    692c:	4606      	mov	r6, r0
    692e:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6930:	3301      	adds	r3, #1
    6932:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    6934:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6938:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    693a:	f7fb fe2b 	bl	2594 <read_byte(unsigned short, bool)>
    current_address = local_address;
    693e:	4b45      	ldr	r3, [pc, #276]	; (6a54 <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    6940:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    6944:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6946:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    694a:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    694c:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    694e:	d376      	bcc.n	6a3e <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6950:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    6954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6958:	d305      	bcc.n	6966 <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    695a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    695e:	b29b      	uxth	r3, r3
    6960:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    6964:	d36b      	bcc.n	6a3e <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6966:	4b3c      	ldr	r3, [pc, #240]	; (6a58 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    6968:	2100      	movs	r1, #0
    696a:	4a3c      	ldr	r2, [pc, #240]	; (6a5c <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    696c:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    696e:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6970:	2b01      	cmp	r3, #1
    6972:	d005      	beq.n	6980 <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6974:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6978:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    697c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    6980:	4b37      	ldr	r3, [pc, #220]	; (6a60 <opcode_0x40()+0x17c>)
    6982:	781b      	ldrb	r3, [r3, #0]
    6984:	b94b      	cbnz	r3, 699a <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6986:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    698a:	6813      	ldr	r3, [r2, #0]
    698c:	04d9      	lsls	r1, r3, #19
    698e:	d4fc      	bmi.n	698a <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    6990:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6994:	6813      	ldr	r3, [r2, #0]
    6996:	04db      	lsls	r3, r3, #19
    6998:	d5fc      	bpl.n	6994 <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    699a:	4d32      	ldr	r5, [pc, #200]	; (6a64 <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    699c:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    69a0:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    69a2:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    69a4:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    69a6:	4f30      	ldr	r7, [pc, #192]	; (6a68 <opcode_0x40()+0x184>)
    69a8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    69ac:	4b2f      	ldr	r3, [pc, #188]	; (6a6c <opcode_0x40()+0x188>)
    69ae:	6832      	ldr	r2, [r6, #0]
    69b0:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    69b2:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    69b4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    69b8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    69bc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    69be:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    69c2:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    69c6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    69c8:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    69cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    69d0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    69d2:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    69d4:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    69d6:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    69d8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    69dc:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    69de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    69e2:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    69e4:	4a22      	ldr	r2, [pc, #136]	; (6a70 <opcode_0x40()+0x18c>)
    69e6:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    69e8:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    69ea:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    69ec:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    69ee:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    69f2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    69f6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    69fa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    69fc:	0342      	lsls	r2, r0, #13
    69fe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6a02:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6a04:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6a06:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6a0e:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6a10:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a12:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6a16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6a1a:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a1c:	683a      	ldr	r2, [r7, #0]
    6a1e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6a22:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a24:	4a13      	ldr	r2, [pc, #76]	; (6a74 <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6a26:	4333      	orrs	r3, r6
    6a28:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6a2a:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a2c:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a32:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6a34:	4323      	orrs	r3, r4
    6a36:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6a38:	430b      	orrs	r3, r1
    6a3a:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    6a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6a3e:	4b0e      	ldr	r3, [pc, #56]	; (6a78 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    6a40:	781b      	ldrb	r3, [r3, #0]
    6a42:	2b01      	cmp	r3, #1
    6a44:	d98f      	bls.n	6966 <opcode_0x40()+0x82>
    6a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a48:	2001888c 	.word	0x2001888c
    6a4c:	20004951 	.word	0x20004951
    6a50:	20004950 	.word	0x20004950
    6a54:	20018888 	.word	0x20018888
    6a58:	200188a6 	.word	0x200188a6
    6a5c:	200188a1 	.word	0x200188a1
    6a60:	2000494e 	.word	0x2000494e
    6a64:	42004000 	.word	0x42004000
    6a68:	42008000 	.word	0x42008000
    6a6c:	6dfffff3 	.word	0x6dfffff3
    6a70:	cff3efff 	.word	0xcff3efff
    6a74:	7fffff6f 	.word	0x7fffff6f
    6a78:	20018898 	.word	0x20018898

00006a7c <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    6a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    6a7e:	4d55      	ldr	r5, [pc, #340]	; (6bd4 <opcode_0x60()+0x158>)
    6a80:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    6a82:	4e55      	ldr	r6, [pc, #340]	; (6bd8 <opcode_0x60()+0x15c>)
    6a84:	8828      	ldrh	r0, [r5, #0]
    6a86:	3001      	adds	r0, #1
    6a88:	b280      	uxth	r0, r0
    6a8a:	f7fb fd83 	bl	2594 <read_byte(unsigned short, bool)>
    6a8e:	7830      	ldrb	r0, [r6, #0]
    6a90:	2100      	movs	r1, #0
    6a92:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6a96:	f7fb fd7d 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6a9a:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6a9c:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6a9e:	3301      	adds	r3, #1
    6aa0:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    6aa2:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6aa6:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6aa8:	f7fb fd74 	bl	2594 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6aac:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6aae:	4604      	mov	r4, r0
    6ab0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6ab2:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 1;
    6ab4:	3401      	adds	r4, #1
    6ab6:	b2c0      	uxtb	r0, r0
    6ab8:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6aba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6abe:	f7fb fd69 	bl	2594 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    6ac2:	2100      	movs	r1, #0
    register_pc = pch + pcl + 1;
    6ac4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    6ac8:	b280      	uxth	r0, r0
    6aca:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    6acc:	f7fb fd62 	bl	2594 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    6ad0:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    6ad2:	4b42      	ldr	r3, [pc, #264]	; (6bdc <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6ad4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    6ad8:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6ada:	d376      	bcc.n	6bca <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6adc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    6ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6ae4:	d305      	bcc.n	6af2 <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6ae6:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    6aea:	b29b      	uxth	r3, r3
    6aec:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    6af0:	d36b      	bcc.n	6bca <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6af2:	4b3b      	ldr	r3, [pc, #236]	; (6be0 <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    6af4:	2100      	movs	r1, #0
    6af6:	4a3b      	ldr	r2, [pc, #236]	; (6be4 <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6af8:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    6afa:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6afc:	2b01      	cmp	r3, #1
    6afe:	d005      	beq.n	6b0c <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6b00:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6b04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    6b0c:	4b36      	ldr	r3, [pc, #216]	; (6be8 <opcode_0x60()+0x16c>)
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	b94b      	cbnz	r3, 6b26 <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6b12:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6b16:	6813      	ldr	r3, [r2, #0]
    6b18:	04d9      	lsls	r1, r3, #19
    6b1a:	d4fc      	bmi.n	6b16 <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    6b1c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6b20:	6813      	ldr	r3, [r2, #0]
    6b22:	04db      	lsls	r3, r3, #19
    6b24:	d5fc      	bpl.n	6b20 <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6b26:	4d31      	ldr	r5, [pc, #196]	; (6bec <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b28:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    6b2c:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    6b2e:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6b30:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b32:	4f2f      	ldr	r7, [pc, #188]	; (6bf0 <opcode_0x60()+0x174>)
    6b34:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b38:	4b2e      	ldr	r3, [pc, #184]	; (6bf4 <opcode_0x60()+0x178>)
    6b3a:	6832      	ldr	r2, [r6, #0]
    6b3c:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6b3e:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6b40:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6b44:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6b48:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6b4a:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6b4e:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6b52:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6b54:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6b5c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6b5e:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6b60:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6b62:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6b64:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b68:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6b6e:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b70:	4a21      	ldr	r2, [pc, #132]	; (6bf8 <opcode_0x60()+0x17c>)
    6b72:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6b74:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6b76:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6b78:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6b7a:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6b7e:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6b82:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6b86:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6b88:	0342      	lsls	r2, r0, #13
    6b8a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6b8e:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6b90:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6b92:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6b9a:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6b9c:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b9e:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6ba2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6ba6:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6ba8:	683a      	ldr	r2, [r7, #0]
    6baa:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6bae:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6bb0:	4a12      	ldr	r2, [pc, #72]	; (6bfc <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6bb2:	4333      	orrs	r3, r6
    6bb4:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6bb6:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6bb8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6bbe:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6bc0:	4323      	orrs	r3, r4
    6bc2:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6bc4:	430b      	orrs	r3, r1
    6bc6:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    6bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6bca:	4b0d      	ldr	r3, [pc, #52]	; (6c00 <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	2b01      	cmp	r3, #1
    6bd0:	d98f      	bls.n	6af2 <opcode_0x60()+0x76>
    6bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bd4:	2001888c 	.word	0x2001888c
    6bd8:	20004951 	.word	0x20004951
    6bdc:	20018888 	.word	0x20018888
    6be0:	200188a6 	.word	0x200188a6
    6be4:	200188a1 	.word	0x200188a1
    6be8:	2000494e 	.word	0x2000494e
    6bec:	42004000 	.word	0x42004000
    6bf0:	42008000 	.word	0x42008000
    6bf4:	6dfffff3 	.word	0x6dfffff3
    6bf8:	cff3efff 	.word	0xcff3efff
    6bfc:	7fffff6f 	.word	0x7fffff6f
    6c00:	20018898 	.word	0x20018898

00006c04 <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    6c04:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    6c06:	4d18      	ldr	r5, [pc, #96]	; (6c68 <opcode_0x07()+0x64>)
    6c08:	b083      	sub	sp, #12
    6c0a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6c0c:	4c17      	ldr	r4, [pc, #92]	; (6c6c <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    6c0e:	8828      	ldrh	r0, [r5, #0]
    6c10:	3001      	adds	r0, #1
    6c12:	b280      	uxth	r0, r0
    6c14:	f7fb fcbe 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    6c18:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6c1a:	b280      	uxth	r0, r0
    6c1c:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    6c1e:	f7fb fcb9 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c22:	4a13      	ldr	r2, [pc, #76]	; (6c70 <opcode_0x07()+0x6c>)
    6c24:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6c26:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c2a:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    6c2c:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c2e:	bf4c      	ite	mi
    6c30:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6c34:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6c38:	9101      	str	r1, [sp, #4]
    6c3a:	7013      	strb	r3, [r2, #0]
    6c3c:	4b0d      	ldr	r3, [pc, #52]	; (6c74 <opcode_0x07()+0x70>)
    6c3e:	7818      	ldrb	r0, [r3, #0]
    6c40:	4308      	orrs	r0, r1
    6c42:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6c44:	f7fb ff6a 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6c48:	9901      	ldr	r1, [sp, #4]
    6c4a:	8820      	ldrh	r0, [r4, #0]
    6c4c:	f7fb fe5e 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6c50:	8820      	ldrh	r0, [r4, #0]
    6c52:	9901      	ldr	r1, [sp, #4]
    6c54:	f7fb fe5a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    6c58:	4a07      	ldr	r2, [pc, #28]	; (6c78 <opcode_0x07()+0x74>)
    6c5a:	882b      	ldrh	r3, [r5, #0]
    6c5c:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    6c60:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    6c62:	b280      	uxth	r0, r0
    6c64:	b003      	add	sp, #12
    6c66:	bd30      	pop	{r4, r5, pc}
    6c68:	2001888c 	.word	0x2001888c
    6c6c:	2001888a 	.word	0x2001888a
    6c70:	20004950 	.word	0x20004950
    6c74:	200188a3 	.word	0x200188a3
    6c78:	20015418 	.word	0x20015418

00006c7c <opcode_0x17()>:
uint16_t opcode_0x17() {
    6c7c:	b530      	push	{r4, r5, lr}
    6c7e:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c80:	4c18      	ldr	r4, [pc, #96]	; (6ce4 <opcode_0x17()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    6c82:	f7fb ff7f 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c86:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6c88:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6c8c:	4d16      	ldr	r5, [pc, #88]	; (6ce8 <opcode_0x17()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c8e:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6c90:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6c92:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6c94:	bf4c      	ite	mi
    6c96:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6c9a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6c9e:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6ca0:	0610      	lsls	r0, r2, #24
    6ca2:	702a      	strb	r2, [r5, #0]
    6ca4:	d418      	bmi.n	6cd8 <opcode_0x17()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6caa:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6cac:	b9b2      	cbnz	r2, 6cdc <opcode_0x17()+0x60>
    6cae:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6cb2:	4d0e      	ldr	r5, [pc, #56]	; (6cec <opcode_0x17()+0x70>)
    6cb4:	7023      	strb	r3, [r4, #0]
    6cb6:	8828      	ldrh	r0, [r5, #0]
    6cb8:	9101      	str	r1, [sp, #4]
    6cba:	f7fb fe27 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6cbe:	8828      	ldrh	r0, [r5, #0]
    6cc0:	9901      	ldr	r1, [sp, #4]
    6cc2:	f7fb fe23 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    6cc6:	4a0a      	ldr	r2, [pc, #40]	; (6cf0 <opcode_0x17()+0x74>)
    6cc8:	4b0a      	ldr	r3, [pc, #40]	; (6cf4 <opcode_0x17()+0x78>)
    6cca:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    6cce:	881b      	ldrh	r3, [r3, #0]
    6cd0:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    6cd2:	b280      	uxth	r0, r0
    6cd4:	b003      	add	sp, #12
    6cd6:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6cdc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6ce0:	e7e7      	b.n	6cb2 <opcode_0x17()+0x36>
    6ce2:	bf00      	nop
    6ce4:	20004950 	.word	0x20004950
    6ce8:	200188a3 	.word	0x200188a3
    6cec:	2001888a 	.word	0x2001888a
    6cf0:	20015418 	.word	0x20015418
    6cf4:	2001888c 	.word	0x2001888c

00006cf8 <opcode_0x03()>:
uint16_t opcode_0x03() {
    6cf8:	b530      	push	{r4, r5, lr}
    6cfa:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6cfc:	4c18      	ldr	r4, [pc, #96]	; (6d60 <opcode_0x03()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    6cfe:	f7fb fffd 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d02:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6d04:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6d08:	4d16      	ldr	r5, [pc, #88]	; (6d64 <opcode_0x03()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d0a:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6d0c:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6d0e:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d10:	bf4c      	ite	mi
    6d12:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6d16:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6d1a:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6d1c:	0610      	lsls	r0, r2, #24
    6d1e:	702a      	strb	r2, [r5, #0]
    6d20:	d418      	bmi.n	6d54 <opcode_0x03()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d26:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6d28:	b9b2      	cbnz	r2, 6d58 <opcode_0x03()+0x60>
    6d2a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6d2e:	4d0e      	ldr	r5, [pc, #56]	; (6d68 <opcode_0x03()+0x70>)
    6d30:	7023      	strb	r3, [r4, #0]
    6d32:	8828      	ldrh	r0, [r5, #0]
    6d34:	9101      	str	r1, [sp, #4]
    6d36:	f7fb fde9 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6d3a:	8828      	ldrh	r0, [r5, #0]
    6d3c:	9901      	ldr	r1, [sp, #4]
    6d3e:	f7fb fde5 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    6d42:	4a0a      	ldr	r2, [pc, #40]	; (6d6c <opcode_0x03()+0x74>)
    6d44:	4b0a      	ldr	r3, [pc, #40]	; (6d70 <opcode_0x03()+0x78>)
    6d46:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    6d4a:	881b      	ldrh	r3, [r3, #0]
    6d4c:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    6d4e:	b280      	uxth	r0, r0
    6d50:	b003      	add	sp, #12
    6d52:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6d58:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6d5c:	e7e7      	b.n	6d2e <opcode_0x03()+0x36>
    6d5e:	bf00      	nop
    6d60:	20004950 	.word	0x20004950
    6d64:	200188a3 	.word	0x200188a3
    6d68:	2001888a 	.word	0x2001888a
    6d6c:	20015418 	.word	0x20015418
    6d70:	2001888c 	.word	0x2001888c

00006d74 <opcode_0x13()>:
uint16_t opcode_0x13() {
    6d74:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    6d76:	2001      	movs	r0, #1
uint16_t opcode_0x13() {
    6d78:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    6d7a:	f7fb ffe9 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d7e:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6d80:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6d84:	4d16      	ldr	r5, [pc, #88]	; (6de0 <opcode_0x13()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d86:	4c17      	ldr	r4, [pc, #92]	; (6de4 <opcode_0x13()+0x70>)
    register_a = register_a | local_data;
    6d88:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6d8a:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d8c:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6d8e:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d92:	bf4c      	ite	mi
    6d94:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6d98:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6d9c:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6d9e:	702a      	strb	r2, [r5, #0]
    6da0:	d418      	bmi.n	6dd4 <opcode_0x13()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6da6:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6da8:	b9b2      	cbnz	r2, 6dd8 <opcode_0x13()+0x64>
    6daa:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6dae:	4d0e      	ldr	r5, [pc, #56]	; (6de8 <opcode_0x13()+0x74>)
    6db0:	7023      	strb	r3, [r4, #0]
    6db2:	8828      	ldrh	r0, [r5, #0]
    6db4:	9101      	str	r1, [sp, #4]
    6db6:	f7fb fda9 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6dba:	8828      	ldrh	r0, [r5, #0]
    6dbc:	9901      	ldr	r1, [sp, #4]
    6dbe:	f7fb fda5 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    6dc2:	4a0a      	ldr	r2, [pc, #40]	; (6dec <opcode_0x13()+0x78>)
    6dc4:	4b0a      	ldr	r3, [pc, #40]	; (6df0 <opcode_0x13()+0x7c>)
    6dc6:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    6dca:	881b      	ldrh	r3, [r3, #0]
    6dcc:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    6dce:	b280      	uxth	r0, r0
    6dd0:	b003      	add	sp, #12
    6dd2:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6dd8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6ddc:	e7e7      	b.n	6dae <opcode_0x13()+0x3a>
    6dde:	bf00      	nop
    6de0:	200188a3 	.word	0x200188a3
    6de4:	20004950 	.word	0x20004950
    6de8:	2001888a 	.word	0x2001888a
    6dec:	20015418 	.word	0x20015418
    6df0:	2001888c 	.word	0x2001888c

00006df4 <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    6df4:	b530      	push	{r4, r5, lr}
    6df6:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6df8:	4c18      	ldr	r4, [pc, #96]	; (6e5c <opcode_0x0F()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    6dfa:	f7fb ff03 	bl	2c04 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6dfe:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6e00:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6e04:	4d16      	ldr	r5, [pc, #88]	; (6e60 <opcode_0x0F()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e06:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6e08:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6e0a:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e0c:	bf4c      	ite	mi
    6e0e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6e12:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6e16:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6e18:	0610      	lsls	r0, r2, #24
    6e1a:	702a      	strb	r2, [r5, #0]
    6e1c:	d418      	bmi.n	6e50 <opcode_0x0F()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e22:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6e24:	b9b2      	cbnz	r2, 6e54 <opcode_0x0F()+0x60>
    6e26:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6e2a:	4d0e      	ldr	r5, [pc, #56]	; (6e64 <opcode_0x0F()+0x70>)
    6e2c:	7023      	strb	r3, [r4, #0]
    6e2e:	8828      	ldrh	r0, [r5, #0]
    6e30:	9101      	str	r1, [sp, #4]
    6e32:	f7fb fd6b 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6e36:	8828      	ldrh	r0, [r5, #0]
    6e38:	9901      	ldr	r1, [sp, #4]
    6e3a:	f7fb fd67 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    6e3e:	4a0a      	ldr	r2, [pc, #40]	; (6e68 <opcode_0x0F()+0x74>)
    6e40:	4b0a      	ldr	r3, [pc, #40]	; (6e6c <opcode_0x0F()+0x78>)
    6e42:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    6e46:	881b      	ldrh	r3, [r3, #0]
    6e48:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    6e4a:	b280      	uxth	r0, r0
    6e4c:	b003      	add	sp, #12
    6e4e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6e54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6e58:	e7e7      	b.n	6e2a <opcode_0x0F()+0x36>
    6e5a:	bf00      	nop
    6e5c:	20004950 	.word	0x20004950
    6e60:	200188a3 	.word	0x200188a3
    6e64:	2001888a 	.word	0x2001888a
    6e68:	20015418 	.word	0x20015418
    6e6c:	2001888c 	.word	0x2001888c

00006e70 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    6e70:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    6e72:	2001      	movs	r0, #1
uint16_t opcode_0x1F() {
    6e74:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    6e76:	f7fb fee1 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e7a:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6e7c:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6e80:	4d16      	ldr	r5, [pc, #88]	; (6edc <opcode_0x1F()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e82:	4c17      	ldr	r4, [pc, #92]	; (6ee0 <opcode_0x1F()+0x70>)
    register_a = register_a | local_data;
    6e84:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6e86:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e88:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6e8a:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e8e:	bf4c      	ite	mi
    6e90:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6e94:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6e98:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6e9a:	702a      	strb	r2, [r5, #0]
    6e9c:	d418      	bmi.n	6ed0 <opcode_0x1F()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6ea2:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6ea4:	b9b2      	cbnz	r2, 6ed4 <opcode_0x1F()+0x64>
    6ea6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6eaa:	4d0e      	ldr	r5, [pc, #56]	; (6ee4 <opcode_0x1F()+0x74>)
    6eac:	7023      	strb	r3, [r4, #0]
    6eae:	8828      	ldrh	r0, [r5, #0]
    6eb0:	9101      	str	r1, [sp, #4]
    6eb2:	f7fb fd2b 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6eb6:	8828      	ldrh	r0, [r5, #0]
    6eb8:	9901      	ldr	r1, [sp, #4]
    6eba:	f7fb fd27 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    6ebe:	4a0a      	ldr	r2, [pc, #40]	; (6ee8 <opcode_0x1F()+0x78>)
    6ec0:	4b0a      	ldr	r3, [pc, #40]	; (6eec <opcode_0x1F()+0x7c>)
    6ec2:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    6ec6:	881b      	ldrh	r3, [r3, #0]
    6ec8:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    6eca:	b280      	uxth	r0, r0
    6ecc:	b003      	add	sp, #12
    6ece:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6ed4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6ed8:	e7e7      	b.n	6eaa <opcode_0x1F()+0x3a>
    6eda:	bf00      	nop
    6edc:	200188a3 	.word	0x200188a3
    6ee0:	20004950 	.word	0x20004950
    6ee4:	2001888a 	.word	0x2001888a
    6ee8:	20015418 	.word	0x20015418
    6eec:	2001888c 	.word	0x2001888c

00006ef0 <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    6ef0:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    6ef2:	2001      	movs	r0, #1
uint16_t opcode_0x1B() {
    6ef4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    6ef6:	f7fb fed1 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6efa:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6efc:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6f00:	4d16      	ldr	r5, [pc, #88]	; (6f5c <opcode_0x1B()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f02:	4c17      	ldr	r4, [pc, #92]	; (6f60 <opcode_0x1B()+0x70>)
    register_a = register_a | local_data;
    6f04:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6f06:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f08:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6f0a:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f0e:	bf4c      	ite	mi
    6f10:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6f14:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6f18:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6f1a:	702a      	strb	r2, [r5, #0]
    6f1c:	d418      	bmi.n	6f50 <opcode_0x1B()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6f22:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6f24:	b9b2      	cbnz	r2, 6f54 <opcode_0x1B()+0x64>
    6f26:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6f2a:	4d0e      	ldr	r5, [pc, #56]	; (6f64 <opcode_0x1B()+0x74>)
    6f2c:	7023      	strb	r3, [r4, #0]
    6f2e:	8828      	ldrh	r0, [r5, #0]
    6f30:	9101      	str	r1, [sp, #4]
    6f32:	f7fb fceb 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6f36:	8828      	ldrh	r0, [r5, #0]
    6f38:	9901      	ldr	r1, [sp, #4]
    6f3a:	f7fb fce7 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    6f3e:	4a0a      	ldr	r2, [pc, #40]	; (6f68 <opcode_0x1B()+0x78>)
    6f40:	4b0a      	ldr	r3, [pc, #40]	; (6f6c <opcode_0x1B()+0x7c>)
    6f42:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    6f46:	881b      	ldrh	r3, [r3, #0]
    6f48:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    6f4a:	b280      	uxth	r0, r0
    6f4c:	b003      	add	sp, #12
    6f4e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6f54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6f58:	e7e7      	b.n	6f2a <opcode_0x1B()+0x3a>
    6f5a:	bf00      	nop
    6f5c:	200188a3 	.word	0x200188a3
    6f60:	20004950 	.word	0x20004950
    6f64:	2001888a 	.word	0x2001888a
    6f68:	20015418 	.word	0x20015418
    6f6c:	2001888c 	.word	0x2001888c

00006f70 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    6f70:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    6f72:	4d1a      	ldr	r5, [pc, #104]	; (6fdc <opcode_0x27()+0x6c>)
    6f74:	b083      	sub	sp, #12
    6f76:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6f78:	4c19      	ldr	r4, [pc, #100]	; (6fe0 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    6f7a:	8828      	ldrh	r0, [r5, #0]
    6f7c:	3001      	adds	r0, #1
    6f7e:	b280      	uxth	r0, r0
    6f80:	f7fb fb08 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    6f84:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6f86:	b280      	uxth	r0, r0
    6f88:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    6f8a:	f7fb fb03 	bl	2594 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6f8e:	4915      	ldr	r1, [pc, #84]	; (6fe4 <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6f90:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6f94:	780a      	ldrb	r2, [r1, #0]
    6f96:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6f9a:	bf14      	ite	ne
    6f9c:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6fa0:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    6fa4:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    6fa8:	4b0f      	ldr	r3, [pc, #60]	; (6fe8 <opcode_0x27()+0x78>)
    6faa:	700a      	strb	r2, [r1, #0]
    6fac:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    6fae:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    6fb0:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    6fb2:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    6fb4:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6fb6:	f7fb fdb1 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6fba:	9901      	ldr	r1, [sp, #4]
    6fbc:	8820      	ldrh	r0, [r4, #0]
    6fbe:	f7fb fca5 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6fc2:	8820      	ldrh	r0, [r4, #0]
    6fc4:	9901      	ldr	r1, [sp, #4]
    6fc6:	f7fb fca1 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    6fca:	4a08      	ldr	r2, [pc, #32]	; (6fec <opcode_0x27()+0x7c>)
    6fcc:	882b      	ldrh	r3, [r5, #0]
    6fce:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    6fd2:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    6fd4:	b280      	uxth	r0, r0
    6fd6:	b003      	add	sp, #12
    6fd8:	bd30      	pop	{r4, r5, pc}
    6fda:	bf00      	nop
    6fdc:	2001888c 	.word	0x2001888c
    6fe0:	2001888a 	.word	0x2001888a
    6fe4:	20004950 	.word	0x20004950
    6fe8:	200188a3 	.word	0x200188a3
    6fec:	20015418 	.word	0x20015418

00006ff0 <opcode_0x37()>:
uint16_t opcode_0x37() {
    6ff0:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6ff2:	4d19      	ldr	r5, [pc, #100]	; (7058 <opcode_0x37()+0x68>)
uint16_t opcode_0x37() {
    6ff4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    6ff6:	f7fb fdc5 	bl	2b84 <Fetch_ZeroPage_X()>
    register_a = register_a & local_data;
    6ffa:	4c18      	ldr	r4, [pc, #96]	; (705c <opcode_0x37()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6ffc:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6ffe:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7000:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7004:	bf4c      	ite	mi
    7006:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    700a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    700e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    7012:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    7014:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    7016:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7018:	0602      	lsls	r2, r0, #24
    701a:	7020      	strb	r0, [r4, #0]
    701c:	d417      	bmi.n	704e <opcode_0x37()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    701e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7022:	b9b0      	cbnz	r0, 7052 <opcode_0x37()+0x62>
    7024:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7028:	4c0d      	ldr	r4, [pc, #52]	; (7060 <opcode_0x37()+0x70>)
    702a:	702b      	strb	r3, [r5, #0]
    702c:	8820      	ldrh	r0, [r4, #0]
    702e:	9101      	str	r1, [sp, #4]
    7030:	f7fb fc6c 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7034:	8820      	ldrh	r0, [r4, #0]
    7036:	9901      	ldr	r1, [sp, #4]
    7038:	f7fb fc68 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    703c:	4a09      	ldr	r2, [pc, #36]	; (7064 <opcode_0x37()+0x74>)
    703e:	4b0a      	ldr	r3, [pc, #40]	; (7068 <opcode_0x37()+0x78>)
    7040:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    7044:	881b      	ldrh	r3, [r3, #0]
    7046:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    7048:	b280      	uxth	r0, r0
    704a:	b003      	add	sp, #12
    704c:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7052:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7056:	e7e7      	b.n	7028 <opcode_0x37()+0x38>
    7058:	20004950 	.word	0x20004950
    705c:	200188a3 	.word	0x200188a3
    7060:	2001888a 	.word	0x2001888a
    7064:	20015418 	.word	0x20015418
    7068:	2001888c 	.word	0x2001888c

0000706c <opcode_0x23()>:
uint16_t opcode_0x23() {
    706c:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    706e:	4d19      	ldr	r5, [pc, #100]	; (70d4 <opcode_0x23()+0x68>)
uint16_t opcode_0x23() {
    7070:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    7072:	f7fb fe43 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    register_a = register_a & local_data;
    7076:	4c18      	ldr	r4, [pc, #96]	; (70d8 <opcode_0x23()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7078:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    707a:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    707c:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7080:	bf4c      	ite	mi
    7082:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7086:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    708a:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    708e:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    7090:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    7092:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7094:	0602      	lsls	r2, r0, #24
    7096:	7020      	strb	r0, [r4, #0]
    7098:	d417      	bmi.n	70ca <opcode_0x23()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    709a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    709e:	b9b0      	cbnz	r0, 70ce <opcode_0x23()+0x62>
    70a0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    70a4:	4c0d      	ldr	r4, [pc, #52]	; (70dc <opcode_0x23()+0x70>)
    70a6:	702b      	strb	r3, [r5, #0]
    70a8:	8820      	ldrh	r0, [r4, #0]
    70aa:	9101      	str	r1, [sp, #4]
    70ac:	f7fb fc2e 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    70b0:	8820      	ldrh	r0, [r4, #0]
    70b2:	9901      	ldr	r1, [sp, #4]
    70b4:	f7fb fc2a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    70b8:	4a09      	ldr	r2, [pc, #36]	; (70e0 <opcode_0x23()+0x74>)
    70ba:	4b0a      	ldr	r3, [pc, #40]	; (70e4 <opcode_0x23()+0x78>)
    70bc:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    70c0:	881b      	ldrh	r3, [r3, #0]
    70c2:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    70c4:	b280      	uxth	r0, r0
    70c6:	b003      	add	sp, #12
    70c8:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    70ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    70ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    70d2:	e7e7      	b.n	70a4 <opcode_0x23()+0x38>
    70d4:	20004950 	.word	0x20004950
    70d8:	200188a3 	.word	0x200188a3
    70dc:	2001888a 	.word	0x2001888a
    70e0:	20015418 	.word	0x20015418
    70e4:	2001888c 	.word	0x2001888c

000070e8 <opcode_0x33()>:
uint16_t opcode_0x33() {
    70e8:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70ea:	4d1a      	ldr	r5, [pc, #104]	; (7154 <opcode_0x33()+0x6c>)
uint16_t opcode_0x33() {
    70ec:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    70ee:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    70f0:	4c19      	ldr	r4, [pc, #100]	; (7158 <opcode_0x33()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    70f2:	f7fb fe2d 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70f6:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    70f8:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70fa:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    70fe:	bf4c      	ite	mi
    7100:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7104:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7108:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    710c:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    710e:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    7110:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7112:	0602      	lsls	r2, r0, #24
    7114:	7020      	strb	r0, [r4, #0]
    7116:	d417      	bmi.n	7148 <opcode_0x33()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    711c:	b9b0      	cbnz	r0, 714c <opcode_0x33()+0x64>
    711e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7122:	4c0e      	ldr	r4, [pc, #56]	; (715c <opcode_0x33()+0x74>)
    7124:	702b      	strb	r3, [r5, #0]
    7126:	8820      	ldrh	r0, [r4, #0]
    7128:	9101      	str	r1, [sp, #4]
    712a:	f7fb fbef 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    712e:	8820      	ldrh	r0, [r4, #0]
    7130:	9901      	ldr	r1, [sp, #4]
    7132:	f7fb fbeb 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    7136:	4a0a      	ldr	r2, [pc, #40]	; (7160 <opcode_0x33()+0x78>)
    7138:	4b0a      	ldr	r3, [pc, #40]	; (7164 <opcode_0x33()+0x7c>)
    713a:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    713e:	881b      	ldrh	r3, [r3, #0]
    7140:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    7142:	b280      	uxth	r0, r0
    7144:	b003      	add	sp, #12
    7146:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    714c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7150:	e7e7      	b.n	7122 <opcode_0x33()+0x3a>
    7152:	bf00      	nop
    7154:	20004950 	.word	0x20004950
    7158:	200188a3 	.word	0x200188a3
    715c:	2001888a 	.word	0x2001888a
    7160:	20015418 	.word	0x20015418
    7164:	2001888c 	.word	0x2001888c

00007168 <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    7168:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    716a:	4d19      	ldr	r5, [pc, #100]	; (71d0 <opcode_0x2F()+0x68>)
uint16_t opcode_0x2F() {
    716c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    716e:	f7fb fd49 	bl	2c04 <Fetch_Absolute()>
    register_a = register_a & local_data;
    7172:	4c18      	ldr	r4, [pc, #96]	; (71d4 <opcode_0x2F()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7174:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7176:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7178:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    717c:	bf4c      	ite	mi
    717e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7182:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7186:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    718a:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    718c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    718e:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7190:	0602      	lsls	r2, r0, #24
    7192:	7020      	strb	r0, [r4, #0]
    7194:	d417      	bmi.n	71c6 <opcode_0x2F()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    719a:	b9b0      	cbnz	r0, 71ca <opcode_0x2F()+0x62>
    719c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    71a0:	4c0d      	ldr	r4, [pc, #52]	; (71d8 <opcode_0x2F()+0x70>)
    71a2:	702b      	strb	r3, [r5, #0]
    71a4:	8820      	ldrh	r0, [r4, #0]
    71a6:	9101      	str	r1, [sp, #4]
    71a8:	f7fb fbb0 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    71ac:	8820      	ldrh	r0, [r4, #0]
    71ae:	9901      	ldr	r1, [sp, #4]
    71b0:	f7fb fbac 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    71b4:	4a09      	ldr	r2, [pc, #36]	; (71dc <opcode_0x2F()+0x74>)
    71b6:	4b0a      	ldr	r3, [pc, #40]	; (71e0 <opcode_0x2F()+0x78>)
    71b8:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    71bc:	881b      	ldrh	r3, [r3, #0]
    71be:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    71c0:	b280      	uxth	r0, r0
    71c2:	b003      	add	sp, #12
    71c4:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    71c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    71ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    71ce:	e7e7      	b.n	71a0 <opcode_0x2F()+0x38>
    71d0:	20004950 	.word	0x20004950
    71d4:	200188a3 	.word	0x200188a3
    71d8:	2001888a 	.word	0x2001888a
    71dc:	20015418 	.word	0x20015418
    71e0:	2001888c 	.word	0x2001888c

000071e4 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    71e4:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71e6:	4d1a      	ldr	r5, [pc, #104]	; (7250 <opcode_0x3F()+0x6c>)
uint16_t opcode_0x3F() {
    71e8:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    71ea:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    71ec:	4c19      	ldr	r4, [pc, #100]	; (7254 <opcode_0x3F()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    71ee:	f7fb fd25 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71f2:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    71f4:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71f6:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    71fa:	bf4c      	ite	mi
    71fc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7200:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7204:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    7208:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    720a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    720c:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    720e:	0602      	lsls	r2, r0, #24
    7210:	7020      	strb	r0, [r4, #0]
    7212:	d417      	bmi.n	7244 <opcode_0x3F()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7218:	b9b0      	cbnz	r0, 7248 <opcode_0x3F()+0x64>
    721a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    721e:	4c0e      	ldr	r4, [pc, #56]	; (7258 <opcode_0x3F()+0x74>)
    7220:	702b      	strb	r3, [r5, #0]
    7222:	8820      	ldrh	r0, [r4, #0]
    7224:	9101      	str	r1, [sp, #4]
    7226:	f7fb fb71 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    722a:	8820      	ldrh	r0, [r4, #0]
    722c:	9901      	ldr	r1, [sp, #4]
    722e:	f7fb fb6d 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    7232:	4a0a      	ldr	r2, [pc, #40]	; (725c <opcode_0x3F()+0x78>)
    7234:	4b0a      	ldr	r3, [pc, #40]	; (7260 <opcode_0x3F()+0x7c>)
    7236:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    723a:	881b      	ldrh	r3, [r3, #0]
    723c:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    723e:	b280      	uxth	r0, r0
    7240:	b003      	add	sp, #12
    7242:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7248:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    724c:	e7e7      	b.n	721e <opcode_0x3F()+0x3a>
    724e:	bf00      	nop
    7250:	20004950 	.word	0x20004950
    7254:	200188a3 	.word	0x200188a3
    7258:	2001888a 	.word	0x2001888a
    725c:	20015418 	.word	0x20015418
    7260:	2001888c 	.word	0x2001888c

00007264 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    7264:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7266:	4d1a      	ldr	r5, [pc, #104]	; (72d0 <opcode_0x3B()+0x6c>)
uint16_t opcode_0x3B() {
    7268:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    726a:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    726c:	4c19      	ldr	r4, [pc, #100]	; (72d4 <opcode_0x3B()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    726e:	f7fb fd15 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7272:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7274:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7276:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    727a:	bf4c      	ite	mi
    727c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7280:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7284:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    7288:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    728a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    728c:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    728e:	0602      	lsls	r2, r0, #24
    7290:	7020      	strb	r0, [r4, #0]
    7292:	d417      	bmi.n	72c4 <opcode_0x3B()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7298:	b9b0      	cbnz	r0, 72c8 <opcode_0x3B()+0x64>
    729a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    729e:	4c0e      	ldr	r4, [pc, #56]	; (72d8 <opcode_0x3B()+0x74>)
    72a0:	702b      	strb	r3, [r5, #0]
    72a2:	8820      	ldrh	r0, [r4, #0]
    72a4:	9101      	str	r1, [sp, #4]
    72a6:	f7fb fb31 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    72aa:	8820      	ldrh	r0, [r4, #0]
    72ac:	9901      	ldr	r1, [sp, #4]
    72ae:	f7fb fb2d 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    72b2:	4a0a      	ldr	r2, [pc, #40]	; (72dc <opcode_0x3B()+0x78>)
    72b4:	4b0a      	ldr	r3, [pc, #40]	; (72e0 <opcode_0x3B()+0x7c>)
    72b6:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    72ba:	881b      	ldrh	r3, [r3, #0]
    72bc:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    72be:	b280      	uxth	r0, r0
    72c0:	b003      	add	sp, #12
    72c2:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    72c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    72c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    72cc:	e7e7      	b.n	729e <opcode_0x3B()+0x3a>
    72ce:	bf00      	nop
    72d0:	20004950 	.word	0x20004950
    72d4:	200188a3 	.word	0x200188a3
    72d8:	2001888a 	.word	0x2001888a
    72dc:	20015418 	.word	0x20015418
    72e0:	2001888c 	.word	0x2001888c

000072e4 <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    72e4:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    72e6:	4d18      	ldr	r5, [pc, #96]	; (7348 <opcode_0x47()+0x64>)
    72e8:	b083      	sub	sp, #12
    72ea:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    72ec:	4c17      	ldr	r4, [pc, #92]	; (734c <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    72ee:	8828      	ldrh	r0, [r5, #0]
    72f0:	3001      	adds	r0, #1
    72f2:	b280      	uxth	r0, r0
    72f4:	f7fb f94e 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    72f8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    72fa:	b280      	uxth	r0, r0
    72fc:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    72fe:	f7fb f949 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7302:	4a13      	ldr	r2, [pc, #76]	; (7350 <opcode_0x47()+0x6c>)
    7304:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7306:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    730a:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    730c:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    730e:	bf4c      	ite	mi
    7310:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7314:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7318:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    731a:	4b0e      	ldr	r3, [pc, #56]	; (7354 <opcode_0x47()+0x70>)
    731c:	7818      	ldrb	r0, [r3, #0]
    731e:	4048      	eors	r0, r1
    7320:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7322:	f7fb fbfb 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    7326:	9901      	ldr	r1, [sp, #4]
    7328:	8820      	ldrh	r0, [r4, #0]
    732a:	f7fb faef 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    732e:	8820      	ldrh	r0, [r4, #0]
    7330:	9901      	ldr	r1, [sp, #4]
    7332:	f7fb faeb 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    7336:	4a08      	ldr	r2, [pc, #32]	; (7358 <opcode_0x47()+0x74>)
    7338:	882b      	ldrh	r3, [r5, #0]
    733a:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    733e:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    7340:	b280      	uxth	r0, r0
    7342:	b003      	add	sp, #12
    7344:	bd30      	pop	{r4, r5, pc}
    7346:	bf00      	nop
    7348:	2001888c 	.word	0x2001888c
    734c:	2001888a 	.word	0x2001888a
    7350:	20004950 	.word	0x20004950
    7354:	200188a3 	.word	0x200188a3
    7358:	20015418 	.word	0x20015418

0000735c <opcode_0x57()>:
uint16_t opcode_0x57() {
    735c:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    735e:	4d17      	ldr	r5, [pc, #92]	; (73bc <opcode_0x57()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    7360:	f7fb fc10 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7364:	4a16      	ldr	r2, [pc, #88]	; (73c0 <opcode_0x57()+0x64>)
    7366:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    7368:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    736a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    736e:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    7370:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7374:	bf4c      	ite	mi
    7376:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    737a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    737e:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7380:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    7382:	4d10      	ldr	r5, [pc, #64]	; (73c4 <opcode_0x57()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7384:	bf4c      	ite	mi
    7386:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    738a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    738e:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    7390:	8828      	ldrh	r0, [r5, #0]
    7392:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7394:	bf0c      	ite	eq
    7396:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    739a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    739e:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    73a0:	f7fb fab4 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    73a4:	8828      	ldrh	r0, [r5, #0]
    73a6:	4621      	mov	r1, r4
    73a8:	f7fb fab0 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    73ac:	4a06      	ldr	r2, [pc, #24]	; (73c8 <opcode_0x57()+0x6c>)
    73ae:	4b07      	ldr	r3, [pc, #28]	; (73cc <opcode_0x57()+0x70>)
    73b0:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    73b4:	881b      	ldrh	r3, [r3, #0]
    73b6:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    73b8:	b280      	uxth	r0, r0
    73ba:	bd38      	pop	{r3, r4, r5, pc}
    73bc:	200188a3 	.word	0x200188a3
    73c0:	20004950 	.word	0x20004950
    73c4:	2001888a 	.word	0x2001888a
    73c8:	20016418 	.word	0x20016418
    73cc:	2001888c 	.word	0x2001888c

000073d0 <opcode_0x43()>:
uint16_t opcode_0x43() {
    73d0:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    73d2:	4d17      	ldr	r5, [pc, #92]	; (7430 <opcode_0x43()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    73d4:	f7fb fc92 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73d8:	4a16      	ldr	r2, [pc, #88]	; (7434 <opcode_0x43()+0x64>)
    73da:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    73dc:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    73de:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73e2:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    73e4:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73e8:	bf4c      	ite	mi
    73ea:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    73ee:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    73f2:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    73f4:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    73f6:	4d10      	ldr	r5, [pc, #64]	; (7438 <opcode_0x43()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    73f8:	bf4c      	ite	mi
    73fa:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    73fe:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7402:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    7404:	8828      	ldrh	r0, [r5, #0]
    7406:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7408:	bf0c      	ite	eq
    740a:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    740e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    7412:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7414:	f7fb fa7a 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7418:	8828      	ldrh	r0, [r5, #0]
    741a:	4621      	mov	r1, r4
    741c:	f7fb fa76 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    7420:	4a06      	ldr	r2, [pc, #24]	; (743c <opcode_0x43()+0x6c>)
    7422:	4b07      	ldr	r3, [pc, #28]	; (7440 <opcode_0x43()+0x70>)
    7424:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    7428:	881b      	ldrh	r3, [r3, #0]
    742a:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    742c:	b280      	uxth	r0, r0
    742e:	bd38      	pop	{r3, r4, r5, pc}
    7430:	200188a3 	.word	0x200188a3
    7434:	20004950 	.word	0x20004950
    7438:	2001888a 	.word	0x2001888a
    743c:	20015418 	.word	0x20015418
    7440:	2001888c 	.word	0x2001888c

00007444 <opcode_0x53()>:
uint16_t opcode_0x53() {
    7444:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    7446:	4d18      	ldr	r5, [pc, #96]	; (74a8 <opcode_0x53()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    7448:	2001      	movs	r0, #1
    744a:	f7fb fc81 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    744e:	4a17      	ldr	r2, [pc, #92]	; (74ac <opcode_0x53()+0x68>)
    register_a = register_a ^ local_data;
    7450:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7452:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7454:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7458:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    745a:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    745e:	bf4c      	ite	mi
    7460:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7464:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    7468:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    746a:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    746c:	4d10      	ldr	r5, [pc, #64]	; (74b0 <opcode_0x53()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    746e:	bf4c      	ite	mi
    7470:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7474:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7478:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    747a:	8828      	ldrh	r0, [r5, #0]
    747c:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    747e:	bf0c      	ite	eq
    7480:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7484:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    7488:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    748a:	f7fb fa3f 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    748e:	8828      	ldrh	r0, [r5, #0]
    7490:	4621      	mov	r1, r4
    7492:	f7fb fa3b 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    7496:	4a07      	ldr	r2, [pc, #28]	; (74b4 <opcode_0x53()+0x70>)
    7498:	4b07      	ldr	r3, [pc, #28]	; (74b8 <opcode_0x53()+0x74>)
    749a:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    749e:	881b      	ldrh	r3, [r3, #0]
    74a0:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    74a2:	b280      	uxth	r0, r0
    74a4:	bd38      	pop	{r3, r4, r5, pc}
    74a6:	bf00      	nop
    74a8:	200188a3 	.word	0x200188a3
    74ac:	20004950 	.word	0x20004950
    74b0:	2001888a 	.word	0x2001888a
    74b4:	20016418 	.word	0x20016418
    74b8:	2001888c 	.word	0x2001888c

000074bc <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    74bc:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    74be:	4d17      	ldr	r5, [pc, #92]	; (751c <opcode_0x4F()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    74c0:	f7fb fba0 	bl	2c04 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74c4:	4a16      	ldr	r2, [pc, #88]	; (7520 <opcode_0x4F()+0x64>)
    74c6:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    74c8:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    74ca:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74ce:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    74d0:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74d4:	bf4c      	ite	mi
    74d6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    74da:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    74de:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    74e0:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    74e2:	4d10      	ldr	r5, [pc, #64]	; (7524 <opcode_0x4F()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    74e4:	bf4c      	ite	mi
    74e6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    74ea:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    74ee:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    74f0:	8828      	ldrh	r0, [r5, #0]
    74f2:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    74f4:	bf0c      	ite	eq
    74f6:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    74fa:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    74fe:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7500:	f7fb fa04 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7504:	8828      	ldrh	r0, [r5, #0]
    7506:	4621      	mov	r1, r4
    7508:	f7fb fa00 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    750c:	4a06      	ldr	r2, [pc, #24]	; (7528 <opcode_0x4F()+0x6c>)
    750e:	4b07      	ldr	r3, [pc, #28]	; (752c <opcode_0x4F()+0x70>)
    7510:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    7514:	881b      	ldrh	r3, [r3, #0]
    7516:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    7518:	b280      	uxth	r0, r0
    751a:	bd38      	pop	{r3, r4, r5, pc}
    751c:	200188a3 	.word	0x200188a3
    7520:	20004950 	.word	0x20004950
    7524:	2001888a 	.word	0x2001888a
    7528:	20016418 	.word	0x20016418
    752c:	2001888c 	.word	0x2001888c

00007530 <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    7530:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    7532:	4d18      	ldr	r5, [pc, #96]	; (7594 <opcode_0x5F()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    7534:	2001      	movs	r0, #1
    7536:	f7fb fb81 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    753a:	4a17      	ldr	r2, [pc, #92]	; (7598 <opcode_0x5F()+0x68>)
    register_a = register_a ^ local_data;
    753c:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    753e:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7540:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7544:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    7546:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    754a:	bf4c      	ite	mi
    754c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7550:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    7554:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7556:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    7558:	4d10      	ldr	r5, [pc, #64]	; (759c <opcode_0x5F()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    755a:	bf4c      	ite	mi
    755c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7560:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7564:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    7566:	8828      	ldrh	r0, [r5, #0]
    7568:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    756a:	bf0c      	ite	eq
    756c:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7570:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    7574:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7576:	f7fb f9c9 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    757a:	8828      	ldrh	r0, [r5, #0]
    757c:	4621      	mov	r1, r4
    757e:	f7fb f9c5 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    7582:	4a07      	ldr	r2, [pc, #28]	; (75a0 <opcode_0x5F()+0x70>)
    7584:	4b07      	ldr	r3, [pc, #28]	; (75a4 <opcode_0x5F()+0x74>)
    7586:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    758a:	881b      	ldrh	r3, [r3, #0]
    758c:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    758e:	b280      	uxth	r0, r0
    7590:	bd38      	pop	{r3, r4, r5, pc}
    7592:	bf00      	nop
    7594:	200188a3 	.word	0x200188a3
    7598:	20004950 	.word	0x20004950
    759c:	2001888a 	.word	0x2001888a
    75a0:	20016418 	.word	0x20016418
    75a4:	2001888c 	.word	0x2001888c

000075a8 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    75a8:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    75aa:	4d18      	ldr	r5, [pc, #96]	; (760c <opcode_0x5B()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    75ac:	2001      	movs	r0, #1
    75ae:	f7fb fb75 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75b2:	4a17      	ldr	r2, [pc, #92]	; (7610 <opcode_0x5B()+0x68>)
    register_a = register_a ^ local_data;
    75b4:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75b6:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    75b8:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75bc:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    75be:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75c2:	bf4c      	ite	mi
    75c4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    75c8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    75cc:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    75ce:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    75d0:	4d10      	ldr	r5, [pc, #64]	; (7614 <opcode_0x5B()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    75d2:	bf4c      	ite	mi
    75d4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    75d8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    75dc:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    75de:	8828      	ldrh	r0, [r5, #0]
    75e0:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    75e2:	bf0c      	ite	eq
    75e4:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    75e8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    75ec:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    75ee:	f7fb f98d 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    75f2:	8828      	ldrh	r0, [r5, #0]
    75f4:	4621      	mov	r1, r4
    75f6:	f7fb f989 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    75fa:	4a07      	ldr	r2, [pc, #28]	; (7618 <opcode_0x5B()+0x70>)
    75fc:	4b07      	ldr	r3, [pc, #28]	; (761c <opcode_0x5B()+0x74>)
    75fe:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    7602:	881b      	ldrh	r3, [r3, #0]
    7604:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    7606:	b280      	uxth	r0, r0
    7608:	bd38      	pop	{r3, r4, r5, pc}
    760a:	bf00      	nop
    760c:	200188a3 	.word	0x200188a3
    7610:	20004950 	.word	0x20004950
    7614:	2001888a 	.word	0x2001888a
    7618:	20016418 	.word	0x20016418
    761c:	2001888c 	.word	0x2001888c

00007620 <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    7620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    7622:	4e16      	ldr	r6, [pc, #88]	; (767c <opcode_0x67()+0x5c>)
    7624:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7626:	4d16      	ldr	r5, [pc, #88]	; (7680 <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    7628:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    762a:	4f16      	ldr	r7, [pc, #88]	; (7684 <opcode_0x67()+0x64>)
    762c:	3001      	adds	r0, #1
    762e:	b280      	uxth	r0, r0
    7630:	f7fa ffb0 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7634:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7636:	b280      	uxth	r0, r0
    7638:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    763a:	f7fa ffab 	bl	2594 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    763e:	4a12      	ldr	r2, [pc, #72]	; (7688 <opcode_0x67()+0x68>)
    7640:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7642:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    7646:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7648:	7813      	ldrb	r3, [r2, #0]
    764a:	4621      	mov	r1, r4
    global_temp = local_data;
    764c:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    764e:	bf4c      	ite	mi
    7650:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7654:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7658:	7013      	strb	r3, [r2, #0]
    765a:	f7fb f957 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    765e:	4621      	mov	r1, r4
    7660:	8828      	ldrh	r0, [r5, #0]
    7662:	f7fb f953 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    7666:	7838      	ldrb	r0, [r7, #0]
    7668:	f7fc f84c 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    766c:	4a07      	ldr	r2, [pc, #28]	; (768c <opcode_0x67()+0x6c>)
    766e:	8833      	ldrh	r3, [r6, #0]
    7670:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    7674:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    7676:	b280      	uxth	r0, r0
    7678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    767a:	bf00      	nop
    767c:	2001888c 	.word	0x2001888c
    7680:	2001888a 	.word	0x2001888a
    7684:	200188a0 	.word	0x200188a0
    7688:	20004950 	.word	0x20004950
    768c:	20016418 	.word	0x20016418

00007690 <opcode_0x77()>:
uint16_t opcode_0x77() {
    7690:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    7692:	f7fb fa77 	bl	2b84 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7696:	4a10      	ldr	r2, [pc, #64]	; (76d8 <opcode_0x77()+0x48>)
    7698:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    769a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    769e:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    76a0:	4e0e      	ldr	r6, [pc, #56]	; (76dc <opcode_0x77()+0x4c>)
    76a2:	4621      	mov	r1, r4
    76a4:	bf4c      	ite	mi
    76a6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    76aa:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    76ae:	4d0c      	ldr	r5, [pc, #48]	; (76e0 <opcode_0x77()+0x50>)
    76b0:	8830      	ldrh	r0, [r6, #0]
    76b2:	7013      	strb	r3, [r2, #0]
    76b4:	702c      	strb	r4, [r5, #0]
    76b6:	f7fb f929 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    76ba:	4621      	mov	r1, r4
    76bc:	8830      	ldrh	r0, [r6, #0]
    76be:	f7fb f925 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    76c2:	7828      	ldrb	r0, [r5, #0]
    76c4:	f7fc f81e 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    76c8:	4a06      	ldr	r2, [pc, #24]	; (76e4 <opcode_0x77()+0x54>)
    76ca:	4b07      	ldr	r3, [pc, #28]	; (76e8 <opcode_0x77()+0x58>)
    76cc:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    76d0:	881b      	ldrh	r3, [r3, #0]
    76d2:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    76d4:	b280      	uxth	r0, r0
    76d6:	bd70      	pop	{r4, r5, r6, pc}
    76d8:	20004950 	.word	0x20004950
    76dc:	2001888a 	.word	0x2001888a
    76e0:	200188a0 	.word	0x200188a0
    76e4:	20016418 	.word	0x20016418
    76e8:	2001888c 	.word	0x2001888c

000076ec <opcode_0x63()>:
uint16_t opcode_0x63() {
    76ec:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    76ee:	f7fb fb05 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    76f2:	4a10      	ldr	r2, [pc, #64]	; (7734 <opcode_0x63()+0x48>)
    76f4:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    76f6:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    76fa:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    76fc:	4e0e      	ldr	r6, [pc, #56]	; (7738 <opcode_0x63()+0x4c>)
    76fe:	4621      	mov	r1, r4
    7700:	bf4c      	ite	mi
    7702:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7706:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    770a:	4d0c      	ldr	r5, [pc, #48]	; (773c <opcode_0x63()+0x50>)
    770c:	8830      	ldrh	r0, [r6, #0]
    770e:	7013      	strb	r3, [r2, #0]
    7710:	702c      	strb	r4, [r5, #0]
    7712:	f7fb f8fb 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7716:	4621      	mov	r1, r4
    7718:	8830      	ldrh	r0, [r6, #0]
    771a:	f7fb f8f7 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    771e:	7828      	ldrb	r0, [r5, #0]
    7720:	f7fb fff0 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    7724:	4a06      	ldr	r2, [pc, #24]	; (7740 <opcode_0x63()+0x54>)
    7726:	4b07      	ldr	r3, [pc, #28]	; (7744 <opcode_0x63()+0x58>)
    7728:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    772c:	881b      	ldrh	r3, [r3, #0]
    772e:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    7730:	b280      	uxth	r0, r0
    7732:	bd70      	pop	{r4, r5, r6, pc}
    7734:	20004950 	.word	0x20004950
    7738:	2001888a 	.word	0x2001888a
    773c:	200188a0 	.word	0x200188a0
    7740:	20016418 	.word	0x20016418
    7744:	2001888c 	.word	0x2001888c

00007748 <opcode_0x73()>:
uint16_t opcode_0x73() {
    7748:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    774a:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    774c:	4e11      	ldr	r6, [pc, #68]	; (7794 <opcode_0x73()+0x4c>)
    774e:	f7fb faff 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7752:	4a11      	ldr	r2, [pc, #68]	; (7798 <opcode_0x73()+0x50>)
    7754:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7756:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    775a:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    775c:	4d0f      	ldr	r5, [pc, #60]	; (779c <opcode_0x73()+0x54>)
    775e:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7760:	bf4c      	ite	mi
    7762:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7766:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    776a:	8830      	ldrh	r0, [r6, #0]
    776c:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    776e:	702c      	strb	r4, [r5, #0]
    7770:	f7fb f8cc 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7774:	4621      	mov	r1, r4
    7776:	8830      	ldrh	r0, [r6, #0]
    7778:	f7fb f8c8 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    777c:	7828      	ldrb	r0, [r5, #0]
    777e:	f7fb ffc1 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    7782:	4a07      	ldr	r2, [pc, #28]	; (77a0 <opcode_0x73()+0x58>)
    7784:	4b07      	ldr	r3, [pc, #28]	; (77a4 <opcode_0x73()+0x5c>)
    7786:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    778a:	881b      	ldrh	r3, [r3, #0]
    778c:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    778e:	b280      	uxth	r0, r0
    7790:	bd70      	pop	{r4, r5, r6, pc}
    7792:	bf00      	nop
    7794:	2001888a 	.word	0x2001888a
    7798:	20004950 	.word	0x20004950
    779c:	200188a0 	.word	0x200188a0
    77a0:	20016418 	.word	0x20016418
    77a4:	2001888c 	.word	0x2001888c

000077a8 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    77a8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    77aa:	f7fb fa2b 	bl	2c04 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    77ae:	4a10      	ldr	r2, [pc, #64]	; (77f0 <opcode_0x6F()+0x48>)
    77b0:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    77b2:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    77b6:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    77b8:	4e0e      	ldr	r6, [pc, #56]	; (77f4 <opcode_0x6F()+0x4c>)
    77ba:	4621      	mov	r1, r4
    77bc:	bf4c      	ite	mi
    77be:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    77c2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    77c6:	4d0c      	ldr	r5, [pc, #48]	; (77f8 <opcode_0x6F()+0x50>)
    77c8:	8830      	ldrh	r0, [r6, #0]
    77ca:	7013      	strb	r3, [r2, #0]
    77cc:	702c      	strb	r4, [r5, #0]
    77ce:	f7fb f89d 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    77d2:	4621      	mov	r1, r4
    77d4:	8830      	ldrh	r0, [r6, #0]
    77d6:	f7fb f899 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    77da:	7828      	ldrb	r0, [r5, #0]
    77dc:	f7fb ff92 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    77e0:	4a06      	ldr	r2, [pc, #24]	; (77fc <opcode_0x6F()+0x54>)
    77e2:	4b07      	ldr	r3, [pc, #28]	; (7800 <opcode_0x6F()+0x58>)
    77e4:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    77e8:	881b      	ldrh	r3, [r3, #0]
    77ea:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    77ec:	b280      	uxth	r0, r0
    77ee:	bd70      	pop	{r4, r5, r6, pc}
    77f0:	20004950 	.word	0x20004950
    77f4:	2001888a 	.word	0x2001888a
    77f8:	200188a0 	.word	0x200188a0
    77fc:	20016418 	.word	0x20016418
    7800:	2001888c 	.word	0x2001888c

00007804 <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    7804:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    7806:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    7808:	4e11      	ldr	r6, [pc, #68]	; (7850 <opcode_0x7F()+0x4c>)
    780a:	f7fb fa17 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    780e:	4a11      	ldr	r2, [pc, #68]	; (7854 <opcode_0x7F()+0x50>)
    7810:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7812:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7816:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    7818:	4d0f      	ldr	r5, [pc, #60]	; (7858 <opcode_0x7F()+0x54>)
    781a:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    781c:	bf4c      	ite	mi
    781e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7822:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7826:	8830      	ldrh	r0, [r6, #0]
    7828:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    782a:	702c      	strb	r4, [r5, #0]
    782c:	f7fb f86e 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7830:	4621      	mov	r1, r4
    7832:	8830      	ldrh	r0, [r6, #0]
    7834:	f7fb f86a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    7838:	7828      	ldrb	r0, [r5, #0]
    783a:	f7fb ff63 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    783e:	4a07      	ldr	r2, [pc, #28]	; (785c <opcode_0x7F()+0x58>)
    7840:	4b07      	ldr	r3, [pc, #28]	; (7860 <opcode_0x7F()+0x5c>)
    7842:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    7846:	881b      	ldrh	r3, [r3, #0]
    7848:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    784a:	b280      	uxth	r0, r0
    784c:	bd70      	pop	{r4, r5, r6, pc}
    784e:	bf00      	nop
    7850:	2001888a 	.word	0x2001888a
    7854:	20004950 	.word	0x20004950
    7858:	200188a0 	.word	0x200188a0
    785c:	20016418 	.word	0x20016418
    7860:	2001888c 	.word	0x2001888c

00007864 <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    7864:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    7866:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    7868:	4e11      	ldr	r6, [pc, #68]	; (78b0 <opcode_0x7B()+0x4c>)
    786a:	f7fb fa17 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    786e:	4a11      	ldr	r2, [pc, #68]	; (78b4 <opcode_0x7B()+0x50>)
    7870:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7872:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7876:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    7878:	4d0f      	ldr	r5, [pc, #60]	; (78b8 <opcode_0x7B()+0x54>)
    787a:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    787c:	bf4c      	ite	mi
    787e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7882:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7886:	8830      	ldrh	r0, [r6, #0]
    7888:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    788a:	702c      	strb	r4, [r5, #0]
    788c:	f7fb f83e 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7890:	4621      	mov	r1, r4
    7892:	8830      	ldrh	r0, [r6, #0]
    7894:	f7fb f83a 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    7898:	7828      	ldrb	r0, [r5, #0]
    789a:	f7fb ff33 	bl	3704 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    789e:	4a07      	ldr	r2, [pc, #28]	; (78bc <opcode_0x7B()+0x58>)
    78a0:	4b07      	ldr	r3, [pc, #28]	; (78c0 <opcode_0x7B()+0x5c>)
    78a2:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    78a6:	881b      	ldrh	r3, [r3, #0]
    78a8:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    78aa:	b280      	uxth	r0, r0
    78ac:	bd70      	pop	{r4, r5, r6, pc}
    78ae:	bf00      	nop
    78b0:	2001888a 	.word	0x2001888a
    78b4:	20004950 	.word	0x20004950
    78b8:	200188a0 	.word	0x200188a0
    78bc:	20016418 	.word	0x20016418
    78c0:	2001888c 	.word	0x2001888c

000078c4 <opcode_0x87()>:

// --------------------------------------------------------------------------------------------------
// AND the contents of the A and X registers (without changing the contents of either register) and 
// stores the result in memory.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x87() {
    78c4:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    78c6:	4d0c      	ldr	r5, [pc, #48]	; (78f8 <opcode_0x87()+0x34>)
    78c8:	2100      	movs	r1, #0
    Write_ZeroPage(register_a & register_x);
    78ca:	4a0c      	ldr	r2, [pc, #48]	; (78fc <opcode_0x87()+0x38>)
    78cc:	8828      	ldrh	r0, [r5, #0]
    78ce:	4b0c      	ldr	r3, [pc, #48]	; (7900 <opcode_0x87()+0x3c>)
    78d0:	7814      	ldrb	r4, [r2, #0]
    78d2:	3001      	adds	r0, #1
    78d4:	781b      	ldrb	r3, [r3, #0]
    78d6:	b280      	uxth	r0, r0
    78d8:	401c      	ands	r4, r3
    78da:	f7fa fe5b 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    78de:	4b09      	ldr	r3, [pc, #36]	; (7904 <opcode_0x87()+0x40>)
    78e0:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    78e2:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    78e4:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    78e6:	f7fb f811 	bl	290c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x87].length);
    78ea:	4a07      	ldr	r2, [pc, #28]	; (7908 <opcode_0x87()+0x44>)
    78ec:	882b      	ldrh	r3, [r5, #0]
    78ee:	f892 0b9d 	ldrb.w	r0, [r2, #2973]	; 0xb9d
    78f2:	4418      	add	r0, r3
} // 0x87 - SAX - ZeroPage
    78f4:	b280      	uxth	r0, r0
    78f6:	bd38      	pop	{r3, r4, r5, pc}
    78f8:	2001888c 	.word	0x2001888c
    78fc:	200188a3 	.word	0x200188a3
    7900:	200188a4 	.word	0x200188a4
    7904:	2001888a 	.word	0x2001888a
    7908:	20016418 	.word	0x20016418

0000790c <opcode_0x97()>:
uint16_t opcode_0x97() {
    790c:	b508      	push	{r3, lr}
    Write_ZeroPage_Y(register_a & register_x);
    790e:	4a07      	ldr	r2, [pc, #28]	; (792c <opcode_0x97()+0x20>)
    7910:	4b07      	ldr	r3, [pc, #28]	; (7930 <opcode_0x97()+0x24>)
    7912:	7810      	ldrb	r0, [r2, #0]
    7914:	781b      	ldrb	r3, [r3, #0]
    7916:	4018      	ands	r0, r3
    7918:	f7fb fa8a 	bl	2e30 <Write_ZeroPage_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x97].length);
    791c:	4a05      	ldr	r2, [pc, #20]	; (7934 <opcode_0x97()+0x28>)
    791e:	4b06      	ldr	r3, [pc, #24]	; (7938 <opcode_0x97()+0x2c>)
    7920:	f892 0edd 	ldrb.w	r0, [r2, #3805]	; 0xedd
    7924:	881b      	ldrh	r3, [r3, #0]
    7926:	4418      	add	r0, r3
} // 0x97 - SAX - ZeroPage , Y
    7928:	b280      	uxth	r0, r0
    792a:	bd08      	pop	{r3, pc}
    792c:	200188a3 	.word	0x200188a3
    7930:	200188a4 	.word	0x200188a4
    7934:	20016418 	.word	0x20016418
    7938:	2001888c 	.word	0x2001888c

0000793c <opcode_0x83()>:
uint16_t opcode_0x83() {
    793c:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_X(register_a & register_x);
    793e:	4a07      	ldr	r2, [pc, #28]	; (795c <opcode_0x83()+0x20>)
    7940:	4b07      	ldr	r3, [pc, #28]	; (7960 <opcode_0x83()+0x24>)
    7942:	7810      	ldrb	r0, [r2, #0]
    7944:	781b      	ldrb	r3, [r3, #0]
    7946:	4018      	ands	r0, r3
    7948:	f7fb faea 	bl	2f20 <Write_Indexed_Indirect_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x83].length);
    794c:	4a05      	ldr	r2, [pc, #20]	; (7964 <opcode_0x83()+0x28>)
    794e:	4b06      	ldr	r3, [pc, #24]	; (7968 <opcode_0x83()+0x2c>)
    7950:	f892 0acd 	ldrb.w	r0, [r2, #2765]	; 0xacd
    7954:	881b      	ldrh	r3, [r3, #0]
    7956:	4418      	add	r0, r3
} // 0x83 - SAX - Indexed Indirect X
    7958:	b280      	uxth	r0, r0
    795a:	bd08      	pop	{r3, pc}
    795c:	200188a3 	.word	0x200188a3
    7960:	200188a4 	.word	0x200188a4
    7964:	20016418 	.word	0x20016418
    7968:	2001888c 	.word	0x2001888c

0000796c <opcode_0x8F()>:
uint16_t opcode_0x8F() {
    796c:	b508      	push	{r3, lr}
    Write_Absolute(register_a & register_x);
    796e:	4a07      	ldr	r2, [pc, #28]	; (798c <opcode_0x8F()+0x20>)
    7970:	4b07      	ldr	r3, [pc, #28]	; (7990 <opcode_0x8F()+0x24>)
    7972:	7810      	ldrb	r0, [r2, #0]
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	4018      	ands	r0, r3
    7978:	f7fb fa1e 	bl	2db8 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8F].length);
    797c:	4a05      	ldr	r2, [pc, #20]	; (7994 <opcode_0x8F()+0x28>)
    797e:	4b06      	ldr	r3, [pc, #24]	; (7998 <opcode_0x8F()+0x2c>)
    7980:	f892 0d3d 	ldrb.w	r0, [r2, #3389]	; 0xd3d
    7984:	881b      	ldrh	r3, [r3, #0]
    7986:	4418      	add	r0, r3
} // 0x8F - SAX - Absolute
    7988:	b280      	uxth	r0, r0
    798a:	bd08      	pop	{r3, pc}
    798c:	200188a3 	.word	0x200188a3
    7990:	200188a4 	.word	0x200188a4
    7994:	20016418 	.word	0x20016418
    7998:	2001888c 	.word	0x2001888c

0000799c <opcode_0xA7()>:

// --------------------------------------------------------------------------------------------------
// Load both the accumulator and the X register with the contents of a memory location.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xA7() {
    799c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    799e:	4c14      	ldr	r4, [pc, #80]	; (79f0 <opcode_0xA7()+0x54>)
    79a0:	2100      	movs	r1, #0
    79a2:	8820      	ldrh	r0, [r4, #0]
    79a4:	3001      	adds	r0, #1
    79a6:	b280      	uxth	r0, r0
    79a8:	f7fa fdf4 	bl	2594 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    79ac:	4b11      	ldr	r3, [pc, #68]	; (79f4 <opcode_0xA7()+0x58>)
    79ae:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    79b0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    79b2:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    79b4:	f7fa fdee 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    79b8:	4a0f      	ldr	r2, [pc, #60]	; (79f8 <opcode_0xA7()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    79ba:	0601      	lsls	r1, r0, #24
    register_x = register_a;
    79bc:	4b0f      	ldr	r3, [pc, #60]	; (79fc <opcode_0xA7()+0x60>)
    register_a = Fetch_ZeroPage();
    79be:	7010      	strb	r0, [r2, #0]
    79c0:	4a0f      	ldr	r2, [pc, #60]	; (7a00 <opcode_0xA7()+0x64>)
    register_x = register_a;
    79c2:	7018      	strb	r0, [r3, #0]
    79c4:	7813      	ldrb	r3, [r2, #0]
    79c6:	d40d      	bmi.n	79e4 <opcode_0xA7()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    79c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    79cc:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    79ce:	b958      	cbnz	r0, 79e8 <opcode_0xA7()+0x4c>
    79d0:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA7].length);
    79d4:	480b      	ldr	r0, [pc, #44]	; (7a04 <opcode_0xA7()+0x68>)
    79d6:	8821      	ldrh	r1, [r4, #0]
    79d8:	f890 021d 	ldrb.w	r0, [r0, #541]	; 0x21d
    79dc:	7013      	strb	r3, [r2, #0]
    79de:	4408      	add	r0, r1
} // 0xA7 - LAX - ZeroPage
    79e0:	b280      	uxth	r0, r0
    79e2:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    79e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    79e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    79ec:	e7f2      	b.n	79d4 <opcode_0xA7()+0x38>
    79ee:	bf00      	nop
    79f0:	2001888c 	.word	0x2001888c
    79f4:	2001888a 	.word	0x2001888a
    79f8:	200188a3 	.word	0x200188a3
    79fc:	200188a4 	.word	0x200188a4
    7a00:	20004950 	.word	0x20004950
    7a04:	20017418 	.word	0x20017418

00007a08 <opcode_0xB7()>:
uint16_t opcode_0xB7() {
    7a08:	b508      	push	{r3, lr}
    register_a = Fetch_ZeroPage_Y();
    7a0a:	f7fb f8db 	bl	2bc4 <Fetch_ZeroPage_Y()>
    7a0e:	4a0e      	ldr	r2, [pc, #56]	; (7a48 <opcode_0xB7()+0x40>)
    register_x = register_a;
    7a10:	4b0e      	ldr	r3, [pc, #56]	; (7a4c <opcode_0xB7()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7a12:	0601      	lsls	r1, r0, #24
    register_a = Fetch_ZeroPage_Y();
    7a14:	7010      	strb	r0, [r2, #0]
    7a16:	4a0e      	ldr	r2, [pc, #56]	; (7a50 <opcode_0xB7()+0x48>)
    register_x = register_a;
    7a18:	7018      	strb	r0, [r3, #0]
    7a1a:	7813      	ldrb	r3, [r2, #0]
    7a1c:	d40e      	bmi.n	7a3c <opcode_0xB7()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a22:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7a24:	b960      	cbnz	r0, 7a40 <opcode_0xB7()+0x38>
    7a26:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB7].length);
    7a2a:	490a      	ldr	r1, [pc, #40]	; (7a54 <opcode_0xB7()+0x4c>)
    7a2c:	480a      	ldr	r0, [pc, #40]	; (7a58 <opcode_0xB7()+0x50>)
    7a2e:	7013      	strb	r3, [r2, #0]
    7a30:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
    7a34:	880b      	ldrh	r3, [r1, #0]
    7a36:	4418      	add	r0, r3
} // 0xB7 - LAX - ZeroPage , Y
    7a38:	b280      	uxth	r0, r0
    7a3a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7a40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7a44:	e7f1      	b.n	7a2a <opcode_0xB7()+0x22>
    7a46:	bf00      	nop
    7a48:	200188a3 	.word	0x200188a3
    7a4c:	200188a4 	.word	0x200188a4
    7a50:	20004950 	.word	0x20004950
    7a54:	2001888c 	.word	0x2001888c
    7a58:	20017418 	.word	0x20017418

00007a5c <opcode_0xA3()>:
uint16_t opcode_0xA3() {
    7a5c:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    7a5e:	f7fb f94d 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    7a62:	4a0e      	ldr	r2, [pc, #56]	; (7a9c <opcode_0xA3()+0x40>)
    register_x = register_a;
    7a64:	4b0e      	ldr	r3, [pc, #56]	; (7aa0 <opcode_0xA3()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7a66:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_X();
    7a68:	7010      	strb	r0, [r2, #0]
    7a6a:	4a0e      	ldr	r2, [pc, #56]	; (7aa4 <opcode_0xA3()+0x48>)
    register_x = register_a;
    7a6c:	7018      	strb	r0, [r3, #0]
    7a6e:	7813      	ldrb	r3, [r2, #0]
    7a70:	d40e      	bmi.n	7a90 <opcode_0xA3()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a76:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7a78:	b960      	cbnz	r0, 7a94 <opcode_0xA3()+0x38>
    7a7a:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA3].length);
    7a7e:	490a      	ldr	r1, [pc, #40]	; (7aa8 <opcode_0xA3()+0x4c>)
    7a80:	480a      	ldr	r0, [pc, #40]	; (7aac <opcode_0xA3()+0x50>)
    7a82:	7013      	strb	r3, [r2, #0]
    7a84:	f890 014d 	ldrb.w	r0, [r0, #333]	; 0x14d
    7a88:	880b      	ldrh	r3, [r1, #0]
    7a8a:	4418      	add	r0, r3
} // 0xA3 - LAX - Indexed Indirect X
    7a8c:	b280      	uxth	r0, r0
    7a8e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7a94:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7a98:	e7f1      	b.n	7a7e <opcode_0xA3()+0x22>
    7a9a:	bf00      	nop
    7a9c:	200188a3 	.word	0x200188a3
    7aa0:	200188a4 	.word	0x200188a4
    7aa4:	20004950 	.word	0x20004950
    7aa8:	2001888c 	.word	0x2001888c
    7aac:	20017418 	.word	0x20017418

00007ab0 <opcode_0xB3()>:
uint16_t opcode_0xB3() {
    7ab0:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    7ab2:	2001      	movs	r0, #1
    7ab4:	f7fb f94c 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7ab8:	4a0d      	ldr	r2, [pc, #52]	; (7af0 <opcode_0xB3()+0x40>)
    register_x = register_a;
    7aba:	4b0e      	ldr	r3, [pc, #56]	; (7af4 <opcode_0xB3()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7abc:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_Y(1);
    7abe:	7010      	strb	r0, [r2, #0]
    7ac0:	4a0d      	ldr	r2, [pc, #52]	; (7af8 <opcode_0xB3()+0x48>)
    register_x = register_a;
    7ac2:	7018      	strb	r0, [r3, #0]
    7ac4:	7813      	ldrb	r3, [r2, #0]
    7ac6:	d40e      	bmi.n	7ae6 <opcode_0xB3()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7acc:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7ace:	b960      	cbnz	r0, 7aea <opcode_0xB3()+0x3a>
    7ad0:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB3].length);
    7ad4:	4909      	ldr	r1, [pc, #36]	; (7afc <opcode_0xB3()+0x4c>)
    7ad6:	480a      	ldr	r0, [pc, #40]	; (7b00 <opcode_0xB3()+0x50>)
    7ad8:	7013      	strb	r3, [r2, #0]
    7ada:	f890 048d 	ldrb.w	r0, [r0, #1165]	; 0x48d
    7ade:	880b      	ldrh	r3, [r1, #0]
    7ae0:	4418      	add	r0, r3
} // 0xB3 - LAX - Indirect Indexed  Y
    7ae2:	b280      	uxth	r0, r0
    7ae4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7aea:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7aee:	e7f1      	b.n	7ad4 <opcode_0xB3()+0x24>
    7af0:	200188a3 	.word	0x200188a3
    7af4:	200188a4 	.word	0x200188a4
    7af8:	20004950 	.word	0x20004950
    7afc:	2001888c 	.word	0x2001888c
    7b00:	20017418 	.word	0x20017418

00007b04 <opcode_0xAF()>:
uint16_t opcode_0xAF() {
    7b04:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    7b06:	f7fb f87d 	bl	2c04 <Fetch_Absolute()>
    7b0a:	4a0e      	ldr	r2, [pc, #56]	; (7b44 <opcode_0xAF()+0x40>)
    register_x = register_a;
    7b0c:	4b0e      	ldr	r3, [pc, #56]	; (7b48 <opcode_0xAF()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b0e:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute();
    7b10:	7010      	strb	r0, [r2, #0]
    7b12:	4a0e      	ldr	r2, [pc, #56]	; (7b4c <opcode_0xAF()+0x48>)
    register_x = register_a;
    7b14:	7018      	strb	r0, [r3, #0]
    7b16:	7813      	ldrb	r3, [r2, #0]
    7b18:	d40e      	bmi.n	7b38 <opcode_0xAF()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b1e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7b20:	b960      	cbnz	r0, 7b3c <opcode_0xAF()+0x38>
    7b22:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xAF].length);
    7b26:	490a      	ldr	r1, [pc, #40]	; (7b50 <opcode_0xAF()+0x4c>)
    7b28:	480a      	ldr	r0, [pc, #40]	; (7b54 <opcode_0xAF()+0x50>)
    7b2a:	7013      	strb	r3, [r2, #0]
    7b2c:	f890 03bd 	ldrb.w	r0, [r0, #957]	; 0x3bd
    7b30:	880b      	ldrh	r3, [r1, #0]
    7b32:	4418      	add	r0, r3
} // 0xAF - LAX - Absolute
    7b34:	b280      	uxth	r0, r0
    7b36:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7b3c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7b40:	e7f1      	b.n	7b26 <opcode_0xAF()+0x22>
    7b42:	bf00      	nop
    7b44:	200188a3 	.word	0x200188a3
    7b48:	200188a4 	.word	0x200188a4
    7b4c:	20004950 	.word	0x20004950
    7b50:	2001888c 	.word	0x2001888c
    7b54:	20017418 	.word	0x20017418

00007b58 <opcode_0xBF()>:
uint16_t opcode_0xBF() {
    7b58:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    7b5a:	2001      	movs	r0, #1
    7b5c:	f7fb f89e 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    7b60:	4a0d      	ldr	r2, [pc, #52]	; (7b98 <opcode_0xBF()+0x40>)
    register_x = register_a;
    7b62:	4b0e      	ldr	r3, [pc, #56]	; (7b9c <opcode_0xBF()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b64:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute_Y(1);
    7b66:	7010      	strb	r0, [r2, #0]
    7b68:	4a0d      	ldr	r2, [pc, #52]	; (7ba0 <opcode_0xBF()+0x48>)
    register_x = register_a;
    7b6a:	7018      	strb	r0, [r3, #0]
    7b6c:	7813      	ldrb	r3, [r2, #0]
    7b6e:	d40e      	bmi.n	7b8e <opcode_0xBF()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b74:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7b76:	b960      	cbnz	r0, 7b92 <opcode_0xBF()+0x3a>
    7b78:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBF].length);
    7b7c:	4909      	ldr	r1, [pc, #36]	; (7ba4 <opcode_0xBF()+0x4c>)
    7b7e:	480a      	ldr	r0, [pc, #40]	; (7ba8 <opcode_0xBF()+0x50>)
    7b80:	7013      	strb	r3, [r2, #0]
    7b82:	f890 06fd 	ldrb.w	r0, [r0, #1789]	; 0x6fd
    7b86:	880b      	ldrh	r3, [r1, #0]
    7b88:	4418      	add	r0, r3
} // 0xBF - LAX - Absolute , Y
    7b8a:	b280      	uxth	r0, r0
    7b8c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7b92:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7b96:	e7f1      	b.n	7b7c <opcode_0xBF()+0x24>
    7b98:	200188a3 	.word	0x200188a3
    7b9c:	200188a4 	.word	0x200188a4
    7ba0:	20004950 	.word	0x20004950
    7ba4:	2001888c 	.word	0x2001888c
    7ba8:	20017418 	.word	0x20017418

00007bac <opcode_0xC7()>:

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    7bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    7bae:	4d1a      	ldr	r5, [pc, #104]	; (7c18 <opcode_0xC7()+0x6c>)
    7bb0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7bb2:	4e1a      	ldr	r6, [pc, #104]	; (7c1c <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    7bb4:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    7bb6:	4f1a      	ldr	r7, [pc, #104]	; (7c20 <opcode_0xC7()+0x74>)
    7bb8:	3001      	adds	r0, #1
    7bba:	b280      	uxth	r0, r0
    7bbc:	f7fa fcea 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7bc0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7bc2:	b280      	uxth	r0, r0
    7bc4:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    7bc6:	f7fa fce5 	bl	2594 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    7bca:	3801      	subs	r0, #1
    7bcc:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7bce:	4620      	mov	r0, r4
    global_temp = local_data;
    7bd0:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7bd2:	f7fa ffa3 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    7bd6:	4621      	mov	r1, r4
    7bd8:	8830      	ldrh	r0, [r6, #0]
    7bda:	f7fa fe97 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7bde:	4621      	mov	r1, r4
    7be0:	8830      	ldrh	r0, [r6, #0]
    7be2:	f7fa fe93 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7be6:	4b0f      	ldr	r3, [pc, #60]	; (7c24 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    7be8:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    7bea:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7bec:	4a0e      	ldr	r2, [pc, #56]	; (7c28 <opcode_0xC7()+0x7c>)
    7bee:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7bf0:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7bf4:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7bf6:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7bf8:	bf94      	ite	ls
    7bfa:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7bfe:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    7c02:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7c04:	f7fa ff8a 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    7c08:	4a08      	ldr	r2, [pc, #32]	; (7c2c <opcode_0xC7()+0x80>)
    7c0a:	882b      	ldrh	r3, [r5, #0]
    7c0c:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    7c10:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    7c12:	b280      	uxth	r0, r0
    7c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c16:	bf00      	nop
    7c18:	2001888c 	.word	0x2001888c
    7c1c:	2001888a 	.word	0x2001888a
    7c20:	200188a0 	.word	0x200188a0
    7c24:	200188a3 	.word	0x200188a3
    7c28:	20004950 	.word	0x20004950
    7c2c:	20017418 	.word	0x20017418

00007c30 <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    7c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    7c32:	f7fa ffa7 	bl	2b84 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    7c36:	3801      	subs	r0, #1
    global_temp = local_data;
    7c38:	4e19      	ldr	r6, [pc, #100]	; (7ca0 <opcode_0xD7()+0x70>)
    local_data = local_data - 1;
    7c3a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7c3c:	4d19      	ldr	r5, [pc, #100]	; (7ca4 <opcode_0xD7()+0x74>)
    7c3e:	0622      	lsls	r2, r4, #24
    7c40:	782b      	ldrb	r3, [r5, #0]
    global_temp = local_data;
    7c42:	7034      	strb	r4, [r6, #0]
    7c44:	d427      	bmi.n	7c96 <opcode_0xD7()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7c4a:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7c4c:	bb2c      	cbnz	r4, 7c9a <opcode_0xD7()+0x6a>
    7c4e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7c52:	4f15      	ldr	r7, [pc, #84]	; (7ca8 <opcode_0xD7()+0x78>)
    7c54:	4621      	mov	r1, r4
    7c56:	702b      	strb	r3, [r5, #0]
    7c58:	8838      	ldrh	r0, [r7, #0]
    7c5a:	f7fa fe57 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7c5e:	4621      	mov	r1, r4
    7c60:	8838      	ldrh	r0, [r7, #0]
    7c62:	f7fa fe53 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7c66:	4b11      	ldr	r3, [pc, #68]	; (7cac <opcode_0xD7()+0x7c>)
    Calculate_CMP(global_temp);
    7c68:	7832      	ldrb	r2, [r6, #0]
    temp = register_a - local_data;
    7c6a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7c6c:	782b      	ldrb	r3, [r5, #0]
    7c6e:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7c70:	eba0 0002 	sub.w	r0, r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7c74:	bf94      	ite	ls
    7c76:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7c7a:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    7c7e:	b2c0      	uxtb	r0, r0
    7c80:	702b      	strb	r3, [r5, #0]
    7c82:	f7fa ff4b 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    7c86:	4a0a      	ldr	r2, [pc, #40]	; (7cb0 <opcode_0xD7()+0x80>)
    7c88:	4b0a      	ldr	r3, [pc, #40]	; (7cb4 <opcode_0xD7()+0x84>)
    7c8a:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    7c8e:	881b      	ldrh	r3, [r3, #0]
    7c90:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    7c92:	b280      	uxth	r0, r0
    7c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7c9a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7c9e:	e7d8      	b.n	7c52 <opcode_0xD7()+0x22>
    7ca0:	200188a0 	.word	0x200188a0
    7ca4:	20004950 	.word	0x20004950
    7ca8:	2001888a 	.word	0x2001888a
    7cac:	200188a3 	.word	0x200188a3
    7cb0:	20017418 	.word	0x20017418
    7cb4:	2001888c 	.word	0x2001888c

00007cb8 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    7cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    7cba:	f7fb f81f 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    7cbe:	3801      	subs	r0, #1
    global_temp = local_data;
    7cc0:	4e19      	ldr	r6, [pc, #100]	; (7d28 <opcode_0xC3()+0x70>)
    local_data = local_data - 1;
    7cc2:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7cc4:	4d19      	ldr	r5, [pc, #100]	; (7d2c <opcode_0xC3()+0x74>)
    7cc6:	0622      	lsls	r2, r4, #24
    7cc8:	782b      	ldrb	r3, [r5, #0]
    global_temp = local_data;
    7cca:	7034      	strb	r4, [r6, #0]
    7ccc:	d427      	bmi.n	7d1e <opcode_0xC3()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7cd2:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7cd4:	bb2c      	cbnz	r4, 7d22 <opcode_0xC3()+0x6a>
    7cd6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7cda:	4f15      	ldr	r7, [pc, #84]	; (7d30 <opcode_0xC3()+0x78>)
    7cdc:	4621      	mov	r1, r4
    7cde:	702b      	strb	r3, [r5, #0]
    7ce0:	8838      	ldrh	r0, [r7, #0]
    7ce2:	f7fa fe13 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7ce6:	4621      	mov	r1, r4
    7ce8:	8838      	ldrh	r0, [r7, #0]
    7cea:	f7fa fe0f 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7cee:	4b11      	ldr	r3, [pc, #68]	; (7d34 <opcode_0xC3()+0x7c>)
    Calculate_CMP(global_temp);
    7cf0:	7832      	ldrb	r2, [r6, #0]
    temp = register_a - local_data;
    7cf2:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7cf4:	782b      	ldrb	r3, [r5, #0]
    7cf6:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7cf8:	eba0 0002 	sub.w	r0, r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7cfc:	bf94      	ite	ls
    7cfe:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7d02:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    7d06:	b2c0      	uxtb	r0, r0
    7d08:	702b      	strb	r3, [r5, #0]
    7d0a:	f7fa ff07 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    7d0e:	4a0a      	ldr	r2, [pc, #40]	; (7d38 <opcode_0xC3()+0x80>)
    7d10:	4b0a      	ldr	r3, [pc, #40]	; (7d3c <opcode_0xC3()+0x84>)
    7d12:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    7d16:	881b      	ldrh	r3, [r3, #0]
    7d18:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    7d1a:	b280      	uxth	r0, r0
    7d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7d22:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7d26:	e7d8      	b.n	7cda <opcode_0xC3()+0x22>
    7d28:	200188a0 	.word	0x200188a0
    7d2c:	20004950 	.word	0x20004950
    7d30:	2001888a 	.word	0x2001888a
    7d34:	200188a3 	.word	0x200188a3
    7d38:	20017418 	.word	0x20017418
    7d3c:	2001888c 	.word	0x2001888c

00007d40 <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    7d40:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    7d42:	2000      	movs	r0, #0
    global_temp = local_data;
    7d44:	4d1a      	ldr	r5, [pc, #104]	; (7db0 <opcode_0xD3()+0x70>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    7d46:	f7fb f803 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    7d4a:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    7d4c:	4e19      	ldr	r6, [pc, #100]	; (7db4 <opcode_0xD3()+0x74>)
    7d4e:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7d50:	4620      	mov	r0, r4
    global_temp = local_data;
    7d52:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7d54:	f7fa fee2 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7d58:	8830      	ldrh	r0, [r6, #0]
    7d5a:	4621      	mov	r1, r4
    7d5c:	f7fa fdd6 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7d60:	4621      	mov	r1, r4
    7d62:	8830      	ldrh	r0, [r6, #0]
    7d64:	f7fa fdd2 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7d68:	4b13      	ldr	r3, [pc, #76]	; (7db8 <opcode_0xD3()+0x78>)
    Calculate_CMP(global_temp);
    7d6a:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7d6c:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d6e:	4913      	ldr	r1, [pc, #76]	; (7dbc <opcode_0xD3()+0x7c>)
    7d70:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7d72:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d76:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7d78:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d7a:	bf94      	ite	ls
    7d7c:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7d80:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7d84:	0612      	lsls	r2, r2, #24
    7d86:	d40e      	bmi.n	7da6 <opcode_0xD3()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d8c:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7d8e:	b960      	cbnz	r0, 7daa <opcode_0xD3()+0x6a>
    7d90:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD3].length);
    7d94:	4a0a      	ldr	r2, [pc, #40]	; (7dc0 <opcode_0xD3()+0x80>)
    7d96:	480b      	ldr	r0, [pc, #44]	; (7dc4 <opcode_0xD3()+0x84>)
    7d98:	700b      	strb	r3, [r1, #0]
    7d9a:	f890 0b0d 	ldrb.w	r0, [r0, #2829]	; 0xb0d
    7d9e:	8813      	ldrh	r3, [r2, #0]
    7da0:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    7da2:	b280      	uxth	r0, r0
    7da4:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7daa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7dae:	e7f1      	b.n	7d94 <opcode_0xD3()+0x54>
    7db0:	200188a0 	.word	0x200188a0
    7db4:	2001888a 	.word	0x2001888a
    7db8:	200188a3 	.word	0x200188a3
    7dbc:	20004950 	.word	0x20004950
    7dc0:	2001888c 	.word	0x2001888c
    7dc4:	20017418 	.word	0x20017418

00007dc8 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    7dc8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    7dca:	f7fa ff1b 	bl	2c04 <Fetch_Absolute()>
    local_data = local_data - 1;
    7dce:	3801      	subs	r0, #1
    global_temp = local_data;
    7dd0:	4d19      	ldr	r5, [pc, #100]	; (7e38 <opcode_0xCF()+0x70>)
    local_data = local_data - 1;
    7dd2:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    7dd4:	4e19      	ldr	r6, [pc, #100]	; (7e3c <opcode_0xCF()+0x74>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7dd6:	4620      	mov	r0, r4
    global_temp = local_data;
    7dd8:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7dda:	f7fa fe9f 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7dde:	8830      	ldrh	r0, [r6, #0]
    7de0:	4621      	mov	r1, r4
    7de2:	f7fa fd93 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7de6:	4621      	mov	r1, r4
    7de8:	8830      	ldrh	r0, [r6, #0]
    7dea:	f7fa fd8f 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7dee:	4b14      	ldr	r3, [pc, #80]	; (7e40 <opcode_0xCF()+0x78>)
    Calculate_CMP(global_temp);
    7df0:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7df2:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7df4:	4913      	ldr	r1, [pc, #76]	; (7e44 <opcode_0xCF()+0x7c>)
    7df6:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7df8:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7dfc:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7dfe:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e00:	bf94      	ite	ls
    7e02:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7e06:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7e0a:	0612      	lsls	r2, r2, #24
    7e0c:	d40e      	bmi.n	7e2c <opcode_0xCF()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e12:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7e14:	b960      	cbnz	r0, 7e30 <opcode_0xCF()+0x68>
    7e16:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCF].length);
    7e1a:	4a0b      	ldr	r2, [pc, #44]	; (7e48 <opcode_0xCF()+0x80>)
    7e1c:	480b      	ldr	r0, [pc, #44]	; (7e4c <opcode_0xCF()+0x84>)
    7e1e:	700b      	strb	r3, [r1, #0]
    7e20:	f890 0a3d 	ldrb.w	r0, [r0, #2621]	; 0xa3d
    7e24:	8813      	ldrh	r3, [r2, #0]
    7e26:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    7e28:	b280      	uxth	r0, r0
    7e2a:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7e30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7e34:	e7f1      	b.n	7e1a <opcode_0xCF()+0x52>
    7e36:	bf00      	nop
    7e38:	200188a0 	.word	0x200188a0
    7e3c:	2001888a 	.word	0x2001888a
    7e40:	200188a3 	.word	0x200188a3
    7e44:	20004950 	.word	0x20004950
    7e48:	2001888c 	.word	0x2001888c
    7e4c:	20017418 	.word	0x20017418

00007e50 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    7e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    7e52:	2000      	movs	r0, #0
    global_temp = local_data;
    7e54:	4d1b      	ldr	r5, [pc, #108]	; (7ec4 <opcode_0xDF()+0x74>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    7e56:	f7fa fef1 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    7e5a:	3801      	subs	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7e5c:	4e1a      	ldr	r6, [pc, #104]	; (7ec8 <opcode_0xDF()+0x78>)
    7e5e:	b2c4      	uxtb	r4, r0
    7e60:	7833      	ldrb	r3, [r6, #0]
    7e62:	0622      	lsls	r2, r4, #24
    global_temp = local_data;
    7e64:	702c      	strb	r4, [r5, #0]
    7e66:	d427      	bmi.n	7eb8 <opcode_0xDF()+0x68>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e6c:	7033      	strb	r3, [r6, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7e6e:	bb2c      	cbnz	r4, 7ebc <opcode_0xDF()+0x6c>
    7e70:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7e74:	4f15      	ldr	r7, [pc, #84]	; (7ecc <opcode_0xDF()+0x7c>)
    7e76:	4621      	mov	r1, r4
    7e78:	7033      	strb	r3, [r6, #0]
    7e7a:	8838      	ldrh	r0, [r7, #0]
    7e7c:	f7fa fd46 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7e80:	4621      	mov	r1, r4
    7e82:	8838      	ldrh	r0, [r7, #0]
    7e84:	f7fa fd42 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7e88:	4b11      	ldr	r3, [pc, #68]	; (7ed0 <opcode_0xDF()+0x80>)
    Calculate_CMP(global_temp);
    7e8a:	782a      	ldrb	r2, [r5, #0]
    temp = register_a - local_data;
    7e8c:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e8e:	7833      	ldrb	r3, [r6, #0]
    7e90:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7e92:	eba0 0002 	sub.w	r0, r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e96:	bf94      	ite	ls
    7e98:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7e9c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    7ea0:	b2c0      	uxtb	r0, r0
    7ea2:	7033      	strb	r3, [r6, #0]
    7ea4:	f7fa fe3a 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    7ea8:	4a0a      	ldr	r2, [pc, #40]	; (7ed4 <opcode_0xDF()+0x84>)
    7eaa:	4b0b      	ldr	r3, [pc, #44]	; (7ed8 <opcode_0xDF()+0x88>)
    7eac:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    7eb0:	881b      	ldrh	r3, [r3, #0]
    7eb2:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    7eb4:	b280      	uxth	r0, r0
    7eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7ebc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7ec0:	e7d8      	b.n	7e74 <opcode_0xDF()+0x24>
    7ec2:	bf00      	nop
    7ec4:	200188a0 	.word	0x200188a0
    7ec8:	20004950 	.word	0x20004950
    7ecc:	2001888a 	.word	0x2001888a
    7ed0:	200188a3 	.word	0x200188a3
    7ed4:	20017418 	.word	0x20017418
    7ed8:	2001888c 	.word	0x2001888c

00007edc <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    7edc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    7ede:	2000      	movs	r0, #0
    global_temp = local_data;
    7ee0:	4d1a      	ldr	r5, [pc, #104]	; (7f4c <opcode_0xDB()+0x70>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    7ee2:	f7fa fedb 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    7ee6:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    7ee8:	4e19      	ldr	r6, [pc, #100]	; (7f50 <opcode_0xDB()+0x74>)
    7eea:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7eec:	4620      	mov	r0, r4
    global_temp = local_data;
    7eee:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7ef0:	f7fa fe14 	bl	2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7ef4:	8830      	ldrh	r0, [r6, #0]
    7ef6:	4621      	mov	r1, r4
    7ef8:	f7fa fd08 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7efc:	4621      	mov	r1, r4
    7efe:	8830      	ldrh	r0, [r6, #0]
    7f00:	f7fa fd04 	bl	290c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7f04:	4b13      	ldr	r3, [pc, #76]	; (7f54 <opcode_0xDB()+0x78>)
    Calculate_CMP(global_temp);
    7f06:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7f08:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f0a:	4913      	ldr	r1, [pc, #76]	; (7f58 <opcode_0xDB()+0x7c>)
    7f0c:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7f0e:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f12:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7f14:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f16:	bf94      	ite	ls
    7f18:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7f1c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7f20:	0612      	lsls	r2, r2, #24
    7f22:	d40e      	bmi.n	7f42 <opcode_0xDB()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f28:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7f2a:	b960      	cbnz	r0, 7f46 <opcode_0xDB()+0x6a>
    7f2c:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xDB].length);
    7f30:	4a0a      	ldr	r2, [pc, #40]	; (7f5c <opcode_0xDB()+0x80>)
    7f32:	480b      	ldr	r0, [pc, #44]	; (7f60 <opcode_0xDB()+0x84>)
    7f34:	700b      	strb	r3, [r1, #0]
    7f36:	f890 0cad 	ldrb.w	r0, [r0, #3245]	; 0xcad
    7f3a:	8813      	ldrh	r3, [r2, #0]
    7f3c:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    7f3e:	b280      	uxth	r0, r0
    7f40:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7f46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7f4a:	e7f1      	b.n	7f30 <opcode_0xDB()+0x54>
    7f4c:	200188a0 	.word	0x200188a0
    7f50:	2001888a 	.word	0x2001888a
    7f54:	200188a3 	.word	0x200188a3
    7f58:	20004950 	.word	0x20004950
    7f5c:	2001888c 	.word	0x2001888c
    7f60:	20017418 	.word	0x20017418

00007f64 <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    7f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    7f66:	4e19      	ldr	r6, [pc, #100]	; (7fcc <opcode_0xE7()+0x68>)
    7f68:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7f6a:	4d19      	ldr	r5, [pc, #100]	; (7fd0 <opcode_0xE7()+0x6c>)
    return read_byte(register_pc+offset, false);
    7f6c:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    7f6e:	4f19      	ldr	r7, [pc, #100]	; (7fd4 <opcode_0xE7()+0x70>)
    7f70:	3001      	adds	r0, #1
    7f72:	b280      	uxth	r0, r0
    7f74:	f7fa fb0e 	bl	2594 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7f78:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7f7a:	b280      	uxth	r0, r0
    7f7c:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    7f7e:	f7fa fb09 	bl	2594 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    7f82:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7f84:	4a14      	ldr	r2, [pc, #80]	; (7fd8 <opcode_0xE7()+0x74>)
    7f86:	b2c4      	uxtb	r4, r0
    7f88:	7813      	ldrb	r3, [r2, #0]
    7f8a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    7f8c:	703c      	strb	r4, [r7, #0]
    7f8e:	d418      	bmi.n	7fc2 <opcode_0xE7()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f94:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7f96:	b9b4      	cbnz	r4, 7fc6 <opcode_0xE7()+0x62>
    7f98:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7f9c:	4621      	mov	r1, r4
    7f9e:	8828      	ldrh	r0, [r5, #0]
    7fa0:	7013      	strb	r3, [r2, #0]
    7fa2:	f7fa fcb3 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7fa6:	4621      	mov	r1, r4
    7fa8:	8828      	ldrh	r0, [r5, #0]
    7faa:	f7fa fcaf 	bl	290c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    7fae:	7838      	ldrb	r0, [r7, #0]
    7fb0:	f7fb fcb2 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    7fb4:	4a09      	ldr	r2, [pc, #36]	; (7fdc <opcode_0xE7()+0x78>)
    7fb6:	8833      	ldrh	r3, [r6, #0]
    7fb8:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    7fbc:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    7fbe:	b280      	uxth	r0, r0
    7fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7fc6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7fca:	e7e7      	b.n	7f9c <opcode_0xE7()+0x38>
    7fcc:	2001888c 	.word	0x2001888c
    7fd0:	2001888a 	.word	0x2001888a
    7fd4:	200188a0 	.word	0x200188a0
    7fd8:	20004950 	.word	0x20004950
    7fdc:	20017418 	.word	0x20017418

00007fe0 <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    7fe0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    7fe2:	f7fa fdcf 	bl	2b84 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    7fe6:	3001      	adds	r0, #1
    global_temp = local_data;
    7fe8:	4d13      	ldr	r5, [pc, #76]	; (8038 <opcode_0xF7()+0x58>)
    local_data = local_data + 1;
    7fea:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7fec:	4a13      	ldr	r2, [pc, #76]	; (803c <opcode_0xF7()+0x5c>)
    7fee:	0621      	lsls	r1, r4, #24
    7ff0:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    7ff2:	702c      	strb	r4, [r5, #0]
    7ff4:	d41a      	bmi.n	802c <opcode_0xF7()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7ffa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7ffc:	b9c4      	cbnz	r4, 8030 <opcode_0xF7()+0x50>
    7ffe:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    8002:	4e0f      	ldr	r6, [pc, #60]	; (8040 <opcode_0xF7()+0x60>)
    8004:	4621      	mov	r1, r4
    8006:	7013      	strb	r3, [r2, #0]
    8008:	8830      	ldrh	r0, [r6, #0]
    800a:	f7fa fc7f 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    800e:	4621      	mov	r1, r4
    8010:	8830      	ldrh	r0, [r6, #0]
    8012:	f7fa fc7b 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    8016:	7828      	ldrb	r0, [r5, #0]
    8018:	f7fb fc7e 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    801c:	4a09      	ldr	r2, [pc, #36]	; (8044 <opcode_0xF7()+0x64>)
    801e:	4b0a      	ldr	r3, [pc, #40]	; (8048 <opcode_0xF7()+0x68>)
    8020:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    8024:	881b      	ldrh	r3, [r3, #0]
    8026:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    8028:	b280      	uxth	r0, r0
    802a:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    802c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8030:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8034:	e7e5      	b.n	8002 <opcode_0xF7()+0x22>
    8036:	bf00      	nop
    8038:	200188a0 	.word	0x200188a0
    803c:	20004950 	.word	0x20004950
    8040:	2001888a 	.word	0x2001888a
    8044:	20018418 	.word	0x20018418
    8048:	2001888c 	.word	0x2001888c

0000804c <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    804c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    804e:	f7fa fe55 	bl	2cfc <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    8052:	3001      	adds	r0, #1
    global_temp = local_data;
    8054:	4d13      	ldr	r5, [pc, #76]	; (80a4 <opcode_0xE3()+0x58>)
    local_data = local_data + 1;
    8056:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8058:	4a13      	ldr	r2, [pc, #76]	; (80a8 <opcode_0xE3()+0x5c>)
    805a:	0621      	lsls	r1, r4, #24
    805c:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    805e:	702c      	strb	r4, [r5, #0]
    8060:	d41a      	bmi.n	8098 <opcode_0xE3()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8066:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8068:	b9c4      	cbnz	r4, 809c <opcode_0xE3()+0x50>
    806a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    806e:	4e0f      	ldr	r6, [pc, #60]	; (80ac <opcode_0xE3()+0x60>)
    8070:	4621      	mov	r1, r4
    8072:	7013      	strb	r3, [r2, #0]
    8074:	8830      	ldrh	r0, [r6, #0]
    8076:	f7fa fc49 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    807a:	4621      	mov	r1, r4
    807c:	8830      	ldrh	r0, [r6, #0]
    807e:	f7fa fc45 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    8082:	7828      	ldrb	r0, [r5, #0]
    8084:	f7fb fc48 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    8088:	4a09      	ldr	r2, [pc, #36]	; (80b0 <opcode_0xE3()+0x64>)
    808a:	4b0a      	ldr	r3, [pc, #40]	; (80b4 <opcode_0xE3()+0x68>)
    808c:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    8090:	881b      	ldrh	r3, [r3, #0]
    8092:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    8094:	b280      	uxth	r0, r0
    8096:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    809c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    80a0:	e7e5      	b.n	806e <opcode_0xE3()+0x22>
    80a2:	bf00      	nop
    80a4:	200188a0 	.word	0x200188a0
    80a8:	20004950 	.word	0x20004950
    80ac:	2001888a 	.word	0x2001888a
    80b0:	20017418 	.word	0x20017418
    80b4:	2001888c 	.word	0x2001888c

000080b8 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    80b8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    80ba:	2000      	movs	r0, #0
    global_temp = local_data;
    80bc:	4d14      	ldr	r5, [pc, #80]	; (8110 <opcode_0xF3()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    80be:	f7fa fe47 	bl	2d50 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    80c2:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    80c4:	4a13      	ldr	r2, [pc, #76]	; (8114 <opcode_0xF3()+0x5c>)
    80c6:	b2c4      	uxtb	r4, r0
    80c8:	7813      	ldrb	r3, [r2, #0]
    80ca:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    80cc:	702c      	strb	r4, [r5, #0]
    80ce:	d41a      	bmi.n	8106 <opcode_0xF3()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    80d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    80d4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    80d6:	b9c4      	cbnz	r4, 810a <opcode_0xF3()+0x52>
    80d8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    80dc:	4e0e      	ldr	r6, [pc, #56]	; (8118 <opcode_0xF3()+0x60>)
    80de:	4621      	mov	r1, r4
    80e0:	7013      	strb	r3, [r2, #0]
    80e2:	8830      	ldrh	r0, [r6, #0]
    80e4:	f7fa fc12 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    80e8:	4621      	mov	r1, r4
    80ea:	8830      	ldrh	r0, [r6, #0]
    80ec:	f7fa fc0e 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    80f0:	7828      	ldrb	r0, [r5, #0]
    80f2:	f7fb fc11 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    80f6:	4a09      	ldr	r2, [pc, #36]	; (811c <opcode_0xF3()+0x64>)
    80f8:	4b09      	ldr	r3, [pc, #36]	; (8120 <opcode_0xF3()+0x68>)
    80fa:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    80fe:	881b      	ldrh	r3, [r3, #0]
    8100:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    8102:	b280      	uxth	r0, r0
    8104:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    810a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    810e:	e7e5      	b.n	80dc <opcode_0xF3()+0x24>
    8110:	200188a0 	.word	0x200188a0
    8114:	20004950 	.word	0x20004950
    8118:	2001888a 	.word	0x2001888a
    811c:	20018418 	.word	0x20018418
    8120:	2001888c 	.word	0x2001888c

00008124 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    8124:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    8126:	f7fa fd6d 	bl	2c04 <Fetch_Absolute()>
    local_data = local_data + 1;
    812a:	3001      	adds	r0, #1
    global_temp = local_data;
    812c:	4d13      	ldr	r5, [pc, #76]	; (817c <opcode_0xEF()+0x58>)
    local_data = local_data + 1;
    812e:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8130:	4a13      	ldr	r2, [pc, #76]	; (8180 <opcode_0xEF()+0x5c>)
    8132:	0621      	lsls	r1, r4, #24
    8134:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    8136:	702c      	strb	r4, [r5, #0]
    8138:	d41a      	bmi.n	8170 <opcode_0xEF()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    813a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    813e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8140:	b9c4      	cbnz	r4, 8174 <opcode_0xEF()+0x50>
    8142:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    8146:	4e0f      	ldr	r6, [pc, #60]	; (8184 <opcode_0xEF()+0x60>)
    8148:	4621      	mov	r1, r4
    814a:	7013      	strb	r3, [r2, #0]
    814c:	8830      	ldrh	r0, [r6, #0]
    814e:	f7fa fbdd 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    8152:	4621      	mov	r1, r4
    8154:	8830      	ldrh	r0, [r6, #0]
    8156:	f7fa fbd9 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    815a:	7828      	ldrb	r0, [r5, #0]
    815c:	f7fb fbdc 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    8160:	4a09      	ldr	r2, [pc, #36]	; (8188 <opcode_0xEF()+0x64>)
    8162:	4b0a      	ldr	r3, [pc, #40]	; (818c <opcode_0xEF()+0x68>)
    8164:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    8168:	881b      	ldrh	r3, [r3, #0]
    816a:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    816c:	b280      	uxth	r0, r0
    816e:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8174:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8178:	e7e5      	b.n	8146 <opcode_0xEF()+0x22>
    817a:	bf00      	nop
    817c:	200188a0 	.word	0x200188a0
    8180:	20004950 	.word	0x20004950
    8184:	2001888a 	.word	0x2001888a
    8188:	20018418 	.word	0x20018418
    818c:	2001888c 	.word	0x2001888c

00008190 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    8190:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    8192:	2000      	movs	r0, #0
    global_temp = local_data;
    8194:	4d14      	ldr	r5, [pc, #80]	; (81e8 <opcode_0xFF()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    8196:	f7fa fd51 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    819a:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    819c:	4a13      	ldr	r2, [pc, #76]	; (81ec <opcode_0xFF()+0x5c>)
    819e:	b2c4      	uxtb	r4, r0
    81a0:	7813      	ldrb	r3, [r2, #0]
    81a2:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    81a4:	702c      	strb	r4, [r5, #0]
    81a6:	d41a      	bmi.n	81de <opcode_0xFF()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    81a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81ac:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    81ae:	b9c4      	cbnz	r4, 81e2 <opcode_0xFF()+0x52>
    81b0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    81b4:	4e0e      	ldr	r6, [pc, #56]	; (81f0 <opcode_0xFF()+0x60>)
    81b6:	4621      	mov	r1, r4
    81b8:	7013      	strb	r3, [r2, #0]
    81ba:	8830      	ldrh	r0, [r6, #0]
    81bc:	f7fa fba6 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    81c0:	4621      	mov	r1, r4
    81c2:	8830      	ldrh	r0, [r6, #0]
    81c4:	f7fa fba2 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    81c8:	7828      	ldrb	r0, [r5, #0]
    81ca:	f7fb fba5 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    81ce:	4a09      	ldr	r2, [pc, #36]	; (81f4 <opcode_0xFF()+0x64>)
    81d0:	4b09      	ldr	r3, [pc, #36]	; (81f8 <opcode_0xFF()+0x68>)
    81d2:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    81d6:	881b      	ldrh	r3, [r3, #0]
    81d8:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    81da:	b280      	uxth	r0, r0
    81dc:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    81de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    81e2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    81e6:	e7e5      	b.n	81b4 <opcode_0xFF()+0x24>
    81e8:	200188a0 	.word	0x200188a0
    81ec:	20004950 	.word	0x20004950
    81f0:	2001888a 	.word	0x2001888a
    81f4:	20018418 	.word	0x20018418
    81f8:	2001888c 	.word	0x2001888c

000081fc <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    81fc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    81fe:	2000      	movs	r0, #0
    global_temp = local_data;
    8200:	4d14      	ldr	r5, [pc, #80]	; (8254 <opcode_0xFB()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    8202:	f7fa fd4b 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    8206:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8208:	4a13      	ldr	r2, [pc, #76]	; (8258 <opcode_0xFB()+0x5c>)
    820a:	b2c4      	uxtb	r4, r0
    820c:	7813      	ldrb	r3, [r2, #0]
    820e:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    8210:	702c      	strb	r4, [r5, #0]
    8212:	d41a      	bmi.n	824a <opcode_0xFB()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8218:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    821a:	b9c4      	cbnz	r4, 824e <opcode_0xFB()+0x52>
    821c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    8220:	4e0e      	ldr	r6, [pc, #56]	; (825c <opcode_0xFB()+0x60>)
    8222:	4621      	mov	r1, r4
    8224:	7013      	strb	r3, [r2, #0]
    8226:	8830      	ldrh	r0, [r6, #0]
    8228:	f7fa fb70 	bl	290c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    822c:	4621      	mov	r1, r4
    822e:	8830      	ldrh	r0, [r6, #0]
    8230:	f7fa fb6c 	bl	290c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    8234:	7828      	ldrb	r0, [r5, #0]
    8236:	f7fb fb6f 	bl	3918 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    823a:	4a09      	ldr	r2, [pc, #36]	; (8260 <opcode_0xFB()+0x64>)
    823c:	4b09      	ldr	r3, [pc, #36]	; (8264 <opcode_0xFB()+0x68>)
    823e:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    8242:	881b      	ldrh	r3, [r3, #0]
    8244:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    8246:	b280      	uxth	r0, r0
    8248:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    824a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    824e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8252:	e7e5      	b.n	8220 <opcode_0xFB()+0x24>
    8254:	200188a0 	.word	0x200188a0
    8258:	20004950 	.word	0x20004950
    825c:	2001888a 	.word	0x2001888a
    8260:	20018418 	.word	0x20018418
    8264:	2001888c 	.word	0x2001888c

00008268 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    8268:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    826a:	4c11      	ldr	r4, [pc, #68]	; (82b0 <opcode_0x0B()+0x48>)
    826c:	2100      	movs	r1, #0
    826e:	8820      	ldrh	r0, [r4, #0]
    8270:	3001      	adds	r0, #1
    8272:	b280      	uxth	r0, r0
    8274:	f7fa f98e 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8278:	4b0e      	ldr	r3, [pc, #56]	; (82b4 <opcode_0x0B()+0x4c>)
    827a:	781a      	ldrb	r2, [r3, #0]
    827c:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    827e:	4a0e      	ldr	r2, [pc, #56]	; (82b8 <opcode_0x0B()+0x50>)
    8280:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    8282:	7018      	strb	r0, [r3, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8284:	7813      	ldrb	r3, [r2, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    8286:	d40d      	bmi.n	82a4 <opcode_0x0B()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8288:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    828c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    828e:	b958      	cbnz	r0, 82a8 <opcode_0x0B()+0x40>
    8290:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    8294:	4809      	ldr	r0, [pc, #36]	; (82bc <opcode_0x0B()+0x54>)
    8296:	8821      	ldrh	r1, [r4, #0]
    8298:	f890 026d 	ldrb.w	r0, [r0, #621]	; 0x26d
    829c:	7013      	strb	r3, [r2, #0]
    829e:	4408      	add	r0, r1
} // 0x0B - ANC - Immediate
    82a0:	b280      	uxth	r0, r0
    82a2:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    82a4:	f043 0381 	orr.w	r3, r3, #129	; 0x81
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    82a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    82ac:	e7f2      	b.n	8294 <opcode_0x0B()+0x2c>
    82ae:	bf00      	nop
    82b0:	2001888c 	.word	0x2001888c
    82b4:	200188a3 	.word	0x200188a3
    82b8:	20004950 	.word	0x20004950
    82bc:	20015418 	.word	0x20015418

000082c0 <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    82c0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    82c2:	4c11      	ldr	r4, [pc, #68]	; (8308 <opcode_0x2B()+0x48>)
    82c4:	2100      	movs	r1, #0
    82c6:	8820      	ldrh	r0, [r4, #0]
    82c8:	3001      	adds	r0, #1
    82ca:	b280      	uxth	r0, r0
    82cc:	f7fa f962 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    82d0:	4b0e      	ldr	r3, [pc, #56]	; (830c <opcode_0x2B()+0x4c>)
    82d2:	781a      	ldrb	r2, [r3, #0]
    82d4:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    82d6:	4a0e      	ldr	r2, [pc, #56]	; (8310 <opcode_0x2B()+0x50>)
    82d8:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    82da:	7018      	strb	r0, [r3, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    82dc:	7813      	ldrb	r3, [r2, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    82de:	d40d      	bmi.n	82fc <opcode_0x2B()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    82e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    82e4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    82e6:	b958      	cbnz	r0, 8300 <opcode_0x2B()+0x40>
    82e8:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    82ec:	4809      	ldr	r0, [pc, #36]	; (8314 <opcode_0x2B()+0x54>)
    82ee:	8821      	ldrh	r1, [r4, #0]
    82f0:	f890 08ed 	ldrb.w	r0, [r0, #2285]	; 0x8ed
    82f4:	7013      	strb	r3, [r2, #0]
    82f6:	4408      	add	r0, r1
} // 0x2B - ANC - Immediate
    82f8:	b280      	uxth	r0, r0
    82fa:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    82fc:	f043 0381 	orr.w	r3, r3, #129	; 0x81
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8300:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8304:	e7f2      	b.n	82ec <opcode_0x2B()+0x2c>
    8306:	bf00      	nop
    8308:	2001888c 	.word	0x2001888c
    830c:	200188a3 	.word	0x200188a3
    8310:	20004950 	.word	0x20004950
    8314:	20015418 	.word	0x20015418

00008318 <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    8318:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    831a:	4c13      	ldr	r4, [pc, #76]	; (8368 <opcode_0x4B()+0x50>)
    831c:	2100      	movs	r1, #0
    831e:	8820      	ldrh	r0, [r4, #0]
    8320:	3001      	adds	r0, #1
    8322:	b280      	uxth	r0, r0
    8324:	f7fa f936 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8328:	4910      	ldr	r1, [pc, #64]	; (836c <opcode_0x4B()+0x54>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    832a:	4a11      	ldr	r2, [pc, #68]	; (8370 <opcode_0x4B()+0x58>)
    register_a = register_a & local_data;
    832c:	780b      	ldrb	r3, [r1, #0]
    832e:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    8330:	7813      	ldrb	r3, [r2, #0]
    8332:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    8336:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    833a:	bf14      	ite	ne
    833c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    8340:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    8344:	7008      	strb	r0, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8346:	b958      	cbnz	r0, 8360 <opcode_0x4B()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    834c:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    8350:	4808      	ldr	r0, [pc, #32]	; (8374 <opcode_0x4B()+0x5c>)
    8352:	8821      	ldrh	r1, [r4, #0]
    8354:	f890 0f6d 	ldrb.w	r0, [r0, #3949]	; 0xf6d
    8358:	7013      	strb	r3, [r2, #0]
    835a:	4408      	add	r0, r1
    835c:	b280      	uxth	r0, r0
} // 0x4B - ALR - Immediate
    835e:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8360:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    8364:	e7f4      	b.n	8350 <opcode_0x4B()+0x38>
    8366:	bf00      	nop
    8368:	2001888c 	.word	0x2001888c
    836c:	200188a3 	.word	0x200188a3
    8370:	20004950 	.word	0x20004950
    8374:	20015418 	.word	0x20015418

00008378 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    8378:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    837a:	4c11      	ldr	r4, [pc, #68]	; (83c0 <opcode_0x6B()+0x48>)
    837c:	2100      	movs	r1, #0
    837e:	8820      	ldrh	r0, [r4, #0]
    8380:	3001      	adds	r0, #1
    8382:	b280      	uxth	r0, r0
    8384:	f7fa f906 	bl	2594 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8388:	490e      	ldr	r1, [pc, #56]	; (83c4 <opcode_0x6B()+0x4c>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    838a:	4a0f      	ldr	r2, [pc, #60]	; (83c8 <opcode_0x6B()+0x50>)
    register_a = register_a & local_data;
    838c:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    838e:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    8390:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    8392:	0840      	lsrs	r0, r0, #1
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8394:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    8398:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    839a:	f000 0140 	and.w	r1, r0, #64	; 0x40
    839e:	b951      	cbnz	r1, 83b6 <opcode_0x6B()+0x3e>
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    83a0:	b958      	cbnz	r0, 83ba <opcode_0x6B()+0x42>
    83a2:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    83a6:	4809      	ldr	r0, [pc, #36]	; (83cc <opcode_0x6B()+0x54>)
    83a8:	8821      	ldrh	r1, [r4, #0]
    83aa:	f890 05ed 	ldrb.w	r0, [r0, #1517]	; 0x5ed
    83ae:	7013      	strb	r3, [r2, #0]
    83b0:	4408      	add	r0, r1
    83b2:	b280      	uxth	r0, r0
} // 0x6B - ARR - Immediate
    83b4:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0x7F; // Clear the N flag
    83b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    83ba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    83be:	e7f2      	b.n	83a6 <opcode_0x6B()+0x2e>
    83c0:	2001888c 	.word	0x2001888c
    83c4:	200188a3 	.word	0x200188a3
    83c8:	20004950 	.word	0x20004950
    83cc:	20016418 	.word	0x20016418

000083d0 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    83d0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    83d2:	4c16      	ldr	r4, [pc, #88]	; (842c <opcode_0xCB()+0x5c>)
    83d4:	2100      	movs	r1, #0
    83d6:	8820      	ldrh	r0, [r4, #0]
    83d8:	3001      	adds	r0, #1
    83da:	b280      	uxth	r0, r0
    83dc:	f7fa f8da 	bl	2594 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    83e0:	4a13      	ldr	r2, [pc, #76]	; (8430 <opcode_0xCB()+0x60>)
    83e2:	4b14      	ldr	r3, [pc, #80]	; (8434 <opcode_0xCB()+0x64>)
    83e4:	7811      	ldrb	r1, [r2, #0]
    83e6:	781b      	ldrb	r3, [r3, #0]
    83e8:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    83ea:	4913      	ldr	r1, [pc, #76]	; (8438 <opcode_0xCB()+0x68>)
    register_x = register_x - local_data;
    83ec:	1a1b      	subs	r3, r3, r0
    83ee:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    83f0:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    83f2:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    83f4:	780a      	ldrb	r2, [r1, #0]
    83f6:	0400      	lsls	r0, r0, #16
    83f8:	bf54      	ite	pl
    83fa:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    83fe:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8402:	0618      	lsls	r0, r3, #24
    8404:	d40d      	bmi.n	8422 <opcode_0xCB()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    840a:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    840c:	b95b      	cbnz	r3, 8426 <opcode_0xCB()+0x56>
    840e:	f042 0202 	orr.w	r2, r2, #2
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    8412:	480a      	ldr	r0, [pc, #40]	; (843c <opcode_0xCB()+0x6c>)
    8414:	8823      	ldrh	r3, [r4, #0]
    8416:	f890 096d 	ldrb.w	r0, [r0, #2413]	; 0x96d
    841a:	700a      	strb	r2, [r1, #0]
    841c:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    841e:	b280      	uxth	r0, r0
    8420:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8426:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    842a:	e7f2      	b.n	8412 <opcode_0xCB()+0x42>
    842c:	2001888c 	.word	0x2001888c
    8430:	200188a4 	.word	0x200188a4
    8434:	200188a3 	.word	0x200188a3
    8438:	20004950 	.word	0x20004950
    843c:	20017418 	.word	0x20017418

00008440 <opcode_0xBB()>:

// --------------------------------------------------------------------------------------------------
// LAS - AND memory with stack pointer, transfer result to accumulator, X register and stack pointer.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xBB() {
    8440:	b508      	push	{r3, lr}
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    8442:	2001      	movs	r0, #1
    8444:	f7fa fc2a 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    8448:	4b10      	ldr	r3, [pc, #64]	; (848c <opcode_0xBB()+0x4c>)
    register_a = register_sp;
    844a:	4911      	ldr	r1, [pc, #68]	; (8490 <opcode_0xBB()+0x50>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    844c:	f893 c000 	ldrb.w	ip, [r3]
    register_x = register_sp;
    8450:	4a10      	ldr	r2, [pc, #64]	; (8494 <opcode_0xBB()+0x54>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    8452:	ea00 000c 	and.w	r0, r0, ip
    register_x = register_sp;
    8456:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    8458:	7008      	strb	r0, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    845a:	0601      	lsls	r1, r0, #24
    845c:	4a0e      	ldr	r2, [pc, #56]	; (8498 <opcode_0xBB()+0x58>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    845e:	7018      	strb	r0, [r3, #0]
    8460:	7813      	ldrb	r3, [r2, #0]
    8462:	d40e      	bmi.n	8482 <opcode_0xBB()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8468:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    846a:	b960      	cbnz	r0, 8486 <opcode_0xBB()+0x46>
    846c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBB].length);
    8470:	490a      	ldr	r1, [pc, #40]	; (849c <opcode_0xBB()+0x5c>)
    8472:	480b      	ldr	r0, [pc, #44]	; (84a0 <opcode_0xBB()+0x60>)
    8474:	7013      	strb	r3, [r2, #0]
    8476:	f890 062d 	ldrb.w	r0, [r0, #1581]	; 0x62d
    847a:	880b      	ldrh	r3, [r1, #0]
    847c:	4418      	add	r0, r3
} // 0xBB - LAS - Absolute , Y
    847e:	b280      	uxth	r0, r0
    8480:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8486:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    848a:	e7f1      	b.n	8470 <opcode_0xBB()+0x30>
    848c:	20004951 	.word	0x20004951
    8490:	200188a3 	.word	0x200188a3
    8494:	200188a4 	.word	0x200188a4
    8498:	20004950 	.word	0x20004950
    849c:	2001888c 	.word	0x2001888c
    84a0:	20017418 	.word	0x20017418

000084a4 <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    84a4:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    84a6:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    84a8:	f7fa fb4c 	bl	2b44 <Fetch_Immediate(unsigned char)>
    while (1) {}
    84ac:	e7fe      	b.n	84ac <opcode_0x02()+0x8>
    84ae:	bf00      	nop

000084b0 <display_next_instruction(unsigned short, unsigned char)>:
    uint8_t length = opcode_info[opcode].length;
    84b0:	4b23      	ldr	r3, [pc, #140]	; (8540 <display_next_instruction(unsigned short, unsigned char)+0x90>)
    84b2:	2234      	movs	r2, #52	; 0x34
    84b4:	fb02 3301 	mla	r3, r2, r1, r3
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    84b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t length = opcode_info[opcode].length;
    84ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    84be:	b08b      	sub	sp, #44	; 0x2c
    84c0:	460c      	mov	r4, r1
    84c2:	4605      	mov	r5, r0
    switch (length) {
    84c4:	2b02      	cmp	r3, #2
    84c6:	d010      	beq.n	84ea <display_next_instruction(unsigned short, unsigned char)+0x3a>
    84c8:	2b03      	cmp	r3, #3
    84ca:	d023      	beq.n	8514 <display_next_instruction(unsigned short, unsigned char)+0x64>
    84cc:	2b01      	cmp	r3, #1
    84ce:	ae02      	add	r6, sp, #8
    84d0:	d019      	beq.n	8506 <display_next_instruction(unsigned short, unsigned char)+0x56>
							  return write((const uint8_t *)str, strlen(str)); }
    84d2:	4630      	mov	r0, r6
    84d4:	f004 fe74 	bl	d1c0 <strlen>
    84d8:	4601      	mov	r1, r0
    84da:	4630      	mov	r0, r6
    84dc:	f002 ff26 	bl	b32c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    84e0:	4818      	ldr	r0, [pc, #96]	; (8544 <display_next_instruction(unsigned short, unsigned char)+0x94>)
    84e2:	f001 fa9f 	bl	9a24 <Print::println()>
}
    84e6:	b00b      	add	sp, #44	; 0x2c
    84e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint8_t op1 = read_byte(pc+1, false);
    84ea:	3001      	adds	r0, #1
            sprintf(buffer, "[%04X] %02X %02X     ", pc, opcode, op1);
    84ec:	ae02      	add	r6, sp, #8
            uint8_t op1 = read_byte(pc+1, false);
    84ee:	2100      	movs	r1, #0
    84f0:	b280      	uxth	r0, r0
    84f2:	f7fa f84f 	bl	2594 <read_byte(unsigned short, bool)>
            sprintf(buffer, "[%04X] %02X %02X     ", pc, opcode, op1);
    84f6:	4623      	mov	r3, r4
    84f8:	9000      	str	r0, [sp, #0]
    84fa:	462a      	mov	r2, r5
    84fc:	4912      	ldr	r1, [pc, #72]	; (8548 <display_next_instruction(unsigned short, unsigned char)+0x98>)
    84fe:	4630      	mov	r0, r6
    8500:	f004 fa1a 	bl	c938 <sprintf>
            break;
    8504:	e7e5      	b.n	84d2 <display_next_instruction(unsigned short, unsigned char)+0x22>
            sprintf(buffer, "[%04X] %02X        ", pc, opcode);
    8506:	460b      	mov	r3, r1
    8508:	4602      	mov	r2, r0
    850a:	4910      	ldr	r1, [pc, #64]	; (854c <display_next_instruction(unsigned short, unsigned char)+0x9c>)
    850c:	4630      	mov	r0, r6
    850e:	f004 fa13 	bl	c938 <sprintf>
            break;
    8512:	e7de      	b.n	84d2 <display_next_instruction(unsigned short, unsigned char)+0x22>
            uint8_t op1 = read_byte(pc+1, false);
    8514:	3001      	adds	r0, #1
    8516:	2100      	movs	r1, #0
            sprintf(buffer, "[%04X] %02X %02X %02X  ", pc, opcode, op1, op2);
    8518:	ae02      	add	r6, sp, #8
            uint8_t op1 = read_byte(pc+1, false);
    851a:	b280      	uxth	r0, r0
    851c:	f7fa f83a 	bl	2594 <read_byte(unsigned short, bool)>
            uint8_t op2 = read_byte(pc+2, false);
    8520:	1cab      	adds	r3, r5, #2
            uint8_t op1 = read_byte(pc+1, false);
    8522:	4607      	mov	r7, r0
            uint8_t op2 = read_byte(pc+2, false);
    8524:	2100      	movs	r1, #0
    8526:	b298      	uxth	r0, r3
    8528:	f7fa f834 	bl	2594 <read_byte(unsigned short, bool)>
            sprintf(buffer, "[%04X] %02X %02X %02X  ", pc, opcode, op1, op2);
    852c:	4623      	mov	r3, r4
    852e:	9001      	str	r0, [sp, #4]
    8530:	462a      	mov	r2, r5
    8532:	4907      	ldr	r1, [pc, #28]	; (8550 <display_next_instruction(unsigned short, unsigned char)+0xa0>)
    8534:	4630      	mov	r0, r6
    8536:	9700      	str	r7, [sp, #0]
    8538:	f004 f9fe 	bl	c938 <sprintf>
            break;
    853c:	e7c9      	b.n	84d2 <display_next_instruction(unsigned short, unsigned char)+0x22>
    853e:	bf00      	nop
    8540:	20015418 	.word	0x20015418
    8544:	20004340 	.word	0x20004340
    8548:	200009ec 	.word	0x200009ec
    854c:	200009d8 	.word	0x200009d8
    8550:	20000a04 	.word	0x20000a04

00008554 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    8554:	4916      	ldr	r1, [pc, #88]	; (85b0 <display_registers()+0x5c>)
    8556:	4b17      	ldr	r3, [pc, #92]	; (85b4 <display_registers()+0x60>)
    8558:	4a17      	ldr	r2, [pc, #92]	; (85b8 <display_registers()+0x64>)
void display_registers() {
    855a:	b510      	push	{r4, lr}
    855c:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    855e:	7808      	ldrb	r0, [r1, #0]
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	7812      	ldrb	r2, [r2, #0]
    8564:	4915      	ldr	r1, [pc, #84]	; (85bc <display_registers()+0x68>)
    8566:	9000      	str	r0, [sp, #0]
    8568:	a802      	add	r0, sp, #8
    856a:	f004 f9e5 	bl	c938 <sprintf>
    856e:	4c14      	ldr	r4, [pc, #80]	; (85c0 <display_registers()+0x6c>)
							  return write((const uint8_t *)str, strlen(str)); }
    8570:	a802      	add	r0, sp, #8
    8572:	f004 fe25 	bl	d1c0 <strlen>
    8576:	4601      	mov	r1, r0
    8578:	a802      	add	r0, sp, #8
    857a:	f002 fed7 	bl	b32c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    857e:	4620      	mov	r0, r4
    8580:	f001 fa50 	bl	9a24 <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    8584:	4b0f      	ldr	r3, [pc, #60]	; (85c4 <display_registers()+0x70>)
    8586:	4a10      	ldr	r2, [pc, #64]	; (85c8 <display_registers()+0x74>)
    8588:	a802      	add	r0, sp, #8
    858a:	781b      	ldrb	r3, [r3, #0]
    858c:	8812      	ldrh	r2, [r2, #0]
    858e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8592:	490e      	ldr	r1, [pc, #56]	; (85cc <display_registers()+0x78>)
    8594:	f004 f9d0 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8598:	a802      	add	r0, sp, #8
    859a:	f004 fe11 	bl	d1c0 <strlen>
    859e:	4601      	mov	r1, r0
    85a0:	a802      	add	r0, sp, #8
    85a2:	f002 fec3 	bl	b32c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    85a6:	4620      	mov	r0, r4
    85a8:	f001 fa3c 	bl	9a24 <Print::println()>
}
    85ac:	b00a      	add	sp, #40	; 0x28
    85ae:	bd10      	pop	{r4, pc}
    85b0:	200188a5 	.word	0x200188a5
    85b4:	200188a4 	.word	0x200188a4
    85b8:	200188a3 	.word	0x200188a3
    85bc:	20000838 	.word	0x20000838
    85c0:	20004340 	.word	0x20004340
    85c4:	20004951 	.word	0x20004951
    85c8:	2001888c 	.word	0x2001888c
    85cc:	2000085c 	.word	0x2000085c

000085d0 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    85d0:	490c      	ldr	r1, [pc, #48]	; (8604 <display_info()+0x34>)
    85d2:	4b0d      	ldr	r3, [pc, #52]	; (8608 <display_info()+0x38>)
    85d4:	6808      	ldr	r0, [r1, #0]
    85d6:	4a0d      	ldr	r2, [pc, #52]	; (860c <display_info()+0x3c>)
    85d8:	781b      	ldrb	r3, [r3, #0]
    85da:	7812      	ldrb	r2, [r2, #0]
    85dc:	490c      	ldr	r1, [pc, #48]	; (8610 <display_info()+0x40>)
void display_info() {
    85de:	b500      	push	{lr}
    85e0:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    85e2:	9000      	str	r0, [sp, #0]
    85e4:	a802      	add	r0, sp, #8
    85e6:	f004 f9a7 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    85ea:	a802      	add	r0, sp, #8
    85ec:	f004 fde8 	bl	d1c0 <strlen>
    85f0:	4601      	mov	r1, r0
    85f2:	a802      	add	r0, sp, #8
    85f4:	f002 fe9a 	bl	b32c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    85f8:	4806      	ldr	r0, [pc, #24]	; (8614 <display_info()+0x44>)
    85fa:	f001 fa13 	bl	9a24 <Print::println()>
}
    85fe:	b013      	add	sp, #76	; 0x4c
    8600:	f85d fb04 	ldr.w	pc, [sp], #4
    8604:	200053c8 	.word	0x200053c8
    8608:	20018898 	.word	0x20018898
    860c:	200188a6 	.word	0x200188a6
    8610:	20000398 	.word	0x20000398
    8614:	20004340 	.word	0x20004340

00008618 <get_command()>:
String get_command() {
    8618:	b570      	push	{r4, r5, r6, lr}
    861a:	b084      	sub	sp, #16
    String s = "";
    861c:	491c      	ldr	r1, [pc, #112]	; (8690 <get_command()+0x78>)
String get_command() {
    861e:	4605      	mov	r5, r0
    8620:	4e1c      	ldr	r6, [pc, #112]	; (8694 <get_command()+0x7c>)
    String s = "";
    8622:	4668      	mov	r0, sp
    8624:	f001 fa7a 	bl	9b1c <String::String(char const*)>
    8628:	2103      	movs	r1, #3
    862a:	481b      	ldr	r0, [pc, #108]	; (8698 <get_command()+0x80>)
    862c:	f002 fe7e 	bl	b32c <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    8630:	f002 fe12 	bl	b258 <usb_serial_available>
        if (Serial.available()) {
    8634:	2800      	cmp	r0, #0
    8636:	d0fb      	beq.n	8630 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    8638:	f002 fe52 	bl	b2e0 <usb_serial_getchar>
            switch(c) {
    863c:	b2c4      	uxtb	r4, r0
    863e:	2c08      	cmp	r4, #8
    8640:	d00e      	beq.n	8660 <get_command()+0x48>
    8642:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    8644:	4620      	mov	r0, r4
            switch(c) {
    8646:	d016      	beq.n	8676 <get_command()+0x5e>
                    if (isprint(c)) {
    8648:	f004 f878 	bl	c73c <isprint>
    864c:	2800      	cmp	r0, #0
    864e:	d0ef      	beq.n	8630 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    8650:	4621      	mov	r1, r4
    8652:	4668      	mov	r0, sp
    8654:	f001 fae6 	bl	9c24 <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8658:	4620      	mov	r0, r4
    865a:	f002 fe51 	bl	b300 <usb_serial_putchar>
    865e:	e7e7      	b.n	8630 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    8660:	9902      	ldr	r1, [sp, #8]
    8662:	2201      	movs	r2, #1
    8664:	4668      	mov	r0, sp
    8666:	3901      	subs	r1, #1
    8668:	f001 fbaa 	bl	9dc0 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    866c:	2103      	movs	r1, #3
    866e:	4630      	mov	r0, r6
    8670:	f002 fe5c 	bl	b32c <usb_serial_write>
    8674:	e7dc      	b.n	8630 <get_command()+0x18>
                    return(s.toLowerCase());
    8676:	4668      	mov	r0, sp
    8678:	f001 fbc2 	bl	9e00 <String::toLowerCase()>
    867c:	4601      	mov	r1, r0
    867e:	4628      	mov	r0, r5
    8680:	f001 f9f2 	bl	9a68 <String::String(String const&)>
}
    8684:	4668      	mov	r0, sp
    8686:	f001 fa0d 	bl	9aa4 <String::~String()>
    868a:	4628      	mov	r0, r5
    868c:	b004      	add	sp, #16
    868e:	bd70      	pop	{r4, r5, r6, pc}
    8690:	2000047c 	.word	0x2000047c
    8694:	20000374 	.word	0x20000374
    8698:	20000370 	.word	0x20000370

0000869c <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    869c:	b570      	push	{r4, r5, r6, lr}
    869e:	460d      	mov	r5, r1
    86a0:	b088      	sub	sp, #32
    String arg = "";
    86a2:	4923      	ldr	r1, [pc, #140]	; (8730 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    86a4:	4616      	mov	r6, r2
    86a6:	4604      	mov	r4, r0
    String arg = "";
    86a8:	f001 fa38 	bl	9b1c <String::String(char const*)>

    String src = _src.trim();
    86ac:	4628      	mov	r0, r5
    86ae:	f001 fbb7 	bl	9e20 <String::trim()>
    86b2:	4601      	mov	r1, r0
    86b4:	4668      	mov	r0, sp
    86b6:	f001 f9d7 	bl	9a68 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    86ba:	9b02      	ldr	r3, [sp, #8]
    86bc:	b92b      	cbnz	r3, 86ca <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    86be:	4668      	mov	r0, sp
    86c0:	f001 f9f0 	bl	9aa4 <String::~String()>
    86c4:	4620      	mov	r0, r4
    86c6:	b008      	add	sp, #32
    86c8:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    86ca:	2120      	movs	r1, #32
    86cc:	4668      	mov	r0, sp
    86ce:	f001 fb0f 	bl	9cf0 <String::indexOf(char) const>
        if (idx>0) {
    86d2:	1e05      	subs	r5, r0, #0
    86d4:	dd1e      	ble.n	8714 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    86d6:	462b      	mov	r3, r5
    86d8:	2200      	movs	r2, #0
    86da:	4669      	mov	r1, sp
    86dc:	a804      	add	r0, sp, #16
    86de:	f001 fb43 	bl	9d68 <String::substring(unsigned int, unsigned int) const>
    86e2:	a904      	add	r1, sp, #16
    86e4:	4620      	mov	r0, r4
    86e6:	f001 fa35 	bl	9b54 <String::operator=(String&&)>
    86ea:	a804      	add	r0, sp, #16
    86ec:	f001 f9da 	bl	9aa4 <String::~String()>
            remainder = src.substring(idx+1);
    86f0:	1c6a      	adds	r2, r5, #1
    86f2:	4669      	mov	r1, sp
    86f4:	a804      	add	r0, sp, #16
    86f6:	f001 fb0b 	bl	9d10 <String::substring(unsigned int) const>
    86fa:	a904      	add	r1, sp, #16
    86fc:	4630      	mov	r0, r6
    86fe:	f001 fa29 	bl	9b54 <String::operator=(String&&)>
    8702:	a804      	add	r0, sp, #16
    8704:	f001 f9ce 	bl	9aa4 <String::~String()>
}
    8708:	4668      	mov	r0, sp
    870a:	f001 f9cb 	bl	9aa4 <String::~String()>
    870e:	4620      	mov	r0, r4
    8710:	b008      	add	sp, #32
    8712:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    8714:	4669      	mov	r1, sp
    8716:	4620      	mov	r0, r4
    8718:	f001 fa14 	bl	9b44 <String::operator=(String const&)>
            remainder = "";
    871c:	4904      	ldr	r1, [pc, #16]	; (8730 <parse_next_arg(String&, String&)+0x94>)
    871e:	4630      	mov	r0, r6
    8720:	f001 fa2e 	bl	9b80 <String::operator=(char const*)>
}
    8724:	4668      	mov	r0, sp
    8726:	f001 f9bd 	bl	9aa4 <String::~String()>
    872a:	4620      	mov	r0, r4
    872c:	b008      	add	sp, #32
    872e:	bd70      	pop	{r4, r5, r6, pc}
    8730:	2000047c 	.word	0x2000047c

00008734 <process_command(String)>:


void(* resetFunc) (void) = 0;//declare reset function at address 0

ENUM_RUN_MODE process_command(String input) {
    8734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8738:	b09d      	sub	sp, #116	; 0x74
    873a:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    873c:	49a4      	ldr	r1, [pc, #656]	; (89d0 <process_command(String)+0x29c>)
    873e:	4668      	mov	r0, sp
    8740:	f001 f9ec 	bl	9b1c <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    8744:	466a      	mov	r2, sp
    8746:	4621      	mov	r1, r4
    8748:	a804      	add	r0, sp, #16
    874a:	f7ff ffa7 	bl	869c <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    874e:	466a      	mov	r2, sp
    8750:	4669      	mov	r1, sp
    8752:	a808      	add	r0, sp, #32
    8754:	f7ff ffa2 	bl	869c <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    8758:	466a      	mov	r2, sp
    875a:	4669      	mov	r1, sp
    875c:	a80c      	add	r0, sp, #48	; 0x30
    875e:	f7ff ff9d 	bl	869c <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    8762:	2100      	movs	r1, #0
    8764:	a804      	add	r0, sp, #16
    8766:	f001 fa99 	bl	9c9c <String::operator[](unsigned int)>
    876a:	7805      	ldrb	r5, [r0, #0]
    876c:	2101      	movs	r1, #1
    876e:	a804      	add	r0, sp, #16
    8770:	f001 fa94 	bl	9c9c <String::operator[](unsigned int)>
    8774:	7803      	ldrb	r3, [r0, #0]
    8776:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    8778:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    877c:	442b      	add	r3, r5
    switch (cmd_int) {
    877e:	4293      	cmp	r3, r2
    8780:	f000 81b4 	beq.w	8aec <process_command(String)+0x3b8>
    8784:	d858      	bhi.n	8838 <process_command(String)+0x104>
    8786:	f246 4272 	movw	r2, #25714	; 0x6472
    878a:	4293      	cmp	r3, r2
    878c:	f000 80bf 	beq.w	890e <process_command(String)+0x1da>
    8790:	d935      	bls.n	87fe <process_command(String)+0xca>
    8792:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    8796:	f000 8133 	beq.w	8a00 <process_command(String)+0x2cc>
    879a:	f646 126e 	movw	r2, #26990	; 0x696e
    879e:	4293      	cmp	r3, r2
    87a0:	d116      	bne.n	87d0 <process_command(String)+0x9c>
            display_registers();
            run_mode = WAITING;          
            break;

        case CMD_IN:
            display_registers();
    87a2:	f7ff fed7 	bl	8554 <display_registers()>
            display_info();
            run_mode = WAITING;
    87a6:	2400      	movs	r4, #0
            display_info();
    87a8:	f7ff ff12 	bl	85d0 <display_info()>
            run_mode = WAITING;
    87ac:	4b89      	ldr	r3, [pc, #548]	; (89d4 <process_command(String)+0x2a0>)
    87ae:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    87b0:	a80c      	add	r0, sp, #48	; 0x30
    87b2:	f001 f977 	bl	9aa4 <String::~String()>
    87b6:	a808      	add	r0, sp, #32
    87b8:	f001 f974 	bl	9aa4 <String::~String()>
    87bc:	a804      	add	r0, sp, #16
    87be:	f001 f971 	bl	9aa4 <String::~String()>
    87c2:	4668      	mov	r0, sp
    87c4:	f001 f96e 	bl	9aa4 <String::~String()>
    87c8:	4620      	mov	r0, r4
    87ca:	b01d      	add	sp, #116	; 0x74
    87cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    87d0:	f246 726f 	movw	r2, #26479	; 0x676f
    87d4:	4293      	cmp	r3, r2
    87d6:	f040 815a 	bne.w	8a8e <process_command(String)+0x35a>
            run_mode = RUNNING;
    87da:	4d7e      	ldr	r5, [pc, #504]	; (89d4 <process_command(String)+0x2a0>)
    87dc:	2402      	movs	r4, #2
            if (arg1.length()) {
    87de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    87e0:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    87e2:	2b00      	cmp	r3, #0
    87e4:	d0e4      	beq.n	87b0 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    87e6:	9808      	ldr	r0, [sp, #32]
    87e8:	2800      	cmp	r0, #0
    87ea:	f000 81df 	beq.w	8bac <process_command(String)+0x478>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    87ee:	2210      	movs	r2, #16
    87f0:	2100      	movs	r1, #0
    87f2:	f003 ff8f 	bl	c714 <strtoul>
    87f6:	4b78      	ldr	r3, [pc, #480]	; (89d8 <process_command(String)+0x2a4>)
    return(run_mode);
    87f8:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    87fa:	8018      	strh	r0, [r3, #0]
    87fc:	e7d8      	b.n	87b0 <process_command(String)+0x7c>
    switch (cmd_int) {
    87fe:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    8802:	f000 80fd 	beq.w	8a00 <process_command(String)+0x2cc>
    8806:	f246 226b 	movw	r2, #25195	; 0x626b
    880a:	4293      	cmp	r3, r2
    880c:	d15f      	bne.n	88ce <process_command(String)+0x19a>
    880e:	9808      	ldr	r0, [sp, #32]
    8810:	2800      	cmp	r0, #0
    8812:	f000 81ac 	beq.w	8b6e <process_command(String)+0x43a>
                word addr = strtoul(arg1.c_str(), 0, 16);
    8816:	2210      	movs	r2, #16
    8818:	2100      	movs	r1, #0
    881a:	f003 ff7b 	bl	c714 <strtoul>
                breakpoint = addr;
    881e:	4b6f      	ldr	r3, [pc, #444]	; (89dc <process_command(String)+0x2a8>)
    8820:	6018      	str	r0, [r3, #0]
    8822:	2102      	movs	r1, #2
    8824:	486e      	ldr	r0, [pc, #440]	; (89e0 <process_command(String)+0x2ac>)
    8826:	f002 fd81 	bl	b32c <usb_serial_write>
    882a:	486e      	ldr	r0, [pc, #440]	; (89e4 <process_command(String)+0x2b0>)
    882c:	f001 f8fa 	bl	9a24 <Print::println()>
            run_mode = WAITING;
    8830:	4b68      	ldr	r3, [pc, #416]	; (89d4 <process_command(String)+0x2a0>)
    8832:	2400      	movs	r4, #0
    8834:	701c      	strb	r4, [r3, #0]
            break;
    8836:	e7bb      	b.n	87b0 <process_command(String)+0x7c>
    switch (cmd_int) {
    8838:	f247 3273 	movw	r2, #29555	; 0x7373
    883c:	4293      	cmp	r3, r2
    883e:	f000 8151 	beq.w	8ae4 <process_command(String)+0x3b0>
    8842:	d94a      	bls.n	88da <process_command(String)+0x1a6>
    8844:	f247 4274 	movw	r2, #29812	; 0x7474
    8848:	4293      	cmp	r3, r2
    884a:	f000 80b4 	beq.w	89b6 <process_command(String)+0x282>
    884e:	f247 7272 	movw	r2, #30578	; 0x7772
    8852:	4293      	cmp	r3, r2
    8854:	f040 811b 	bne.w	8a8e <process_command(String)+0x35a>
    8858:	9808      	ldr	r0, [sp, #32]
    885a:	2800      	cmp	r0, #0
    885c:	f000 8185 	beq.w	8b6a <process_command(String)+0x436>
                word addr = strtoul(arg1.c_str(), 0, 16);
    8860:	2210      	movs	r2, #16
    8862:	2100      	movs	r1, #0
    8864:	f003 ff56 	bl	c714 <strtoul>
    8868:	4605      	mov	r5, r0
    886a:	980c      	ldr	r0, [sp, #48]	; 0x30
    886c:	2800      	cmp	r0, #0
    886e:	f000 8193 	beq.w	8b98 <process_command(String)+0x464>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    8872:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    8876:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    887a:	2210      	movs	r2, #16
    887c:	2100      	movs	r1, #0
    887e:	f003 ff49 	bl	c714 <strtoul>
    8882:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
                write_byte(addr, data);
    8886:	b2c1      	uxtb	r1, r0
    8888:	b2a8      	uxth	r0, r5
    888a:	f7fa f83f 	bl	290c <write_byte(unsigned short, unsigned char)>
                while (remainder.length()) {
    888e:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    8890:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    8894:	2b00      	cmp	r3, #0
    8896:	d0c4      	beq.n	8822 <process_command(String)+0xee>
    8898:	ac14      	add	r4, sp, #80	; 0x50
    889a:	4e53      	ldr	r6, [pc, #332]	; (89e8 <process_command(String)+0x2b4>)
                    String d = parse_next_arg(remainder, remainder);
    889c:	466a      	mov	r2, sp
    889e:	4669      	mov	r1, sp
    88a0:	4620      	mov	r0, r4
                    write_byte(++addr, data);
    88a2:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    88a4:	f7ff fefa 	bl	869c <parse_next_arg(String&, String&)>
    88a8:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    88aa:	2210      	movs	r2, #16
    88ac:	2100      	movs	r1, #0
    88ae:	2800      	cmp	r0, #0
    88b0:	bf08      	it	eq
    88b2:	4630      	moveq	r0, r6
    88b4:	f003 ff2e 	bl	c714 <strtoul>
                    write_byte(++addr, data);
    88b8:	b2c1      	uxtb	r1, r0
    88ba:	b2a8      	uxth	r0, r5
    88bc:	f7fa f826 	bl	290c <write_byte(unsigned short, unsigned char)>
                }
    88c0:	4620      	mov	r0, r4
    88c2:	f001 f8ef 	bl	9aa4 <String::~String()>
                while (remainder.length()) {
    88c6:	9b02      	ldr	r3, [sp, #8]
    88c8:	2b00      	cmp	r3, #0
    88ca:	d1e7      	bne.n	889c <process_command(String)+0x168>
    88cc:	e7a9      	b.n	8822 <process_command(String)+0xee>
    switch (cmd_int) {
    88ce:	2b00      	cmp	r3, #0
    88d0:	f040 80dd 	bne.w	8a8e <process_command(String)+0x35a>
    return(run_mode);
    88d4:	4b3f      	ldr	r3, [pc, #252]	; (89d4 <process_command(String)+0x2a0>)
    88d6:	781c      	ldrb	r4, [r3, #0]
}
    88d8:	e76a      	b.n	87b0 <process_command(String)+0x7c>
    switch (cmd_int) {
    88da:	f247 2273 	movw	r2, #29299	; 0x7273
    88de:	4293      	cmp	r3, r2
    88e0:	d066      	beq.n	89b0 <process_command(String)+0x27c>
    88e2:	f247 3272 	movw	r2, #29554	; 0x7372
    88e6:	4293      	cmp	r3, r2
    88e8:	d117      	bne.n	891a <process_command(String)+0x1e6>
    88ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    88ec:	2800      	cmp	r0, #0
    88ee:	f000 8142 	beq.w	8b76 <process_command(String)+0x442>
                word value = strtoul(arg2.c_str(), 0, 16);
    88f2:	2100      	movs	r1, #0
    88f4:	2210      	movs	r2, #16
    88f6:	f003 ff0d 	bl	c714 <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    88fa:	493c      	ldr	r1, [pc, #240]	; (89ec <process_command(String)+0x2b8>)
    88fc:	4604      	mov	r4, r0
    88fe:	a808      	add	r0, sp, #32
    8900:	f001 f9b6 	bl	9c70 <String::equals(char const*) const>
                if (arg1=="pc") {
    8904:	2800      	cmp	r0, #0
    8906:	f000 80fe 	beq.w	8b06 <process_command(String)+0x3d2>
                    register_pc = value & 0xFFFF;
    890a:	4b33      	ldr	r3, [pc, #204]	; (89d8 <process_command(String)+0x2a4>)
    890c:	801c      	strh	r4, [r3, #0]
            display_registers();
    890e:	f7ff fe21 	bl	8554 <display_registers()>
            run_mode = WAITING;          
    8912:	2400      	movs	r4, #0
    8914:	4b2f      	ldr	r3, [pc, #188]	; (89d4 <process_command(String)+0x2a0>)
    8916:	701c      	strb	r4, [r3, #0]
            break;
    8918:	e74a      	b.n	87b0 <process_command(String)+0x7c>
    switch (cmd_int) {
    891a:	f247 2264 	movw	r2, #29284	; 0x7264
    891e:	4293      	cmp	r3, r2
    8920:	f040 80b5 	bne.w	8a8e <process_command(String)+0x35a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8924:	9808      	ldr	r0, [sp, #32]
    8926:	2800      	cmp	r0, #0
    8928:	f000 8123 	beq.w	8b72 <process_command(String)+0x43e>
                word addr = strtoul(arg1.c_str(), 0, 16);
    892c:	2210      	movs	r2, #16
    892e:	2100      	movs	r1, #0
    8930:	f003 fef0 	bl	c714 <strtoul>
                if (arg2.length()) {
    8934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    8936:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    8938:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    893a:	2b00      	cmp	r3, #0
    893c:	f040 80ec 	bne.w	8b18 <process_command(String)+0x3e4>
                sprintf(s,"[%04X] = ", addr);
    8940:	4602      	mov	r2, r0
    8942:	492b      	ldr	r1, [pc, #172]	; (89f0 <process_command(String)+0x2bc>)
    8944:	4620      	mov	r0, r4
                byte count = 1;
    8946:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    894a:	f003 fff5 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    894e:	4620      	mov	r0, r4
    8950:	f004 fc36 	bl	d1c0 <strlen>
    8954:	4601      	mov	r1, r0
    8956:	4620      	mov	r0, r4
    8958:	f002 fce8 	bl	b32c <usb_serial_write>
                byte count = 1;
    895c:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    895e:	f8df b098 	ldr.w	fp, [pc, #152]	; 89f8 <process_command(String)+0x2c4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    8962:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    8966:	f8df a094 	ldr.w	sl, [pc, #148]	; 89fc <process_command(String)+0x2c8>
    896a:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    896c:	b115      	cbz	r5, 8974 <process_command(String)+0x240>
    896e:	075b      	lsls	r3, r3, #29
    8970:	f000 8103 	beq.w	8b7a <process_command(String)+0x446>
    8974:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    8978:	2100      	movs	r1, #0
    897a:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    897c:	3501      	adds	r5, #1
    897e:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    8982:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    8984:	f7f9 fe06 	bl	2594 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    8988:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    898a:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    898c:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    8990:	4620      	mov	r0, r4
    8992:	f003 ffd1 	bl	c938 <sprintf>
    8996:	4620      	mov	r0, r4
    8998:	f004 fc12 	bl	d1c0 <strlen>
    899c:	4601      	mov	r1, r0
    899e:	4620      	mov	r0, r4
    89a0:	f002 fcc4 	bl	b32c <usb_serial_write>
                for (byte i=0; i<count; i++) {
    89a4:	b2eb      	uxtb	r3, r5
    89a6:	454b      	cmp	r3, r9
    89a8:	d3e0      	bcc.n	896c <process_command(String)+0x238>
    89aa:	2100      	movs	r1, #0
    89ac:	4808      	ldr	r0, [pc, #32]	; (89d0 <process_command(String)+0x29c>)
    89ae:	e73a      	b.n	8826 <process_command(String)+0xf2>
            resetFunc(); // Reset the ICE
    89b0:	4b10      	ldr	r3, [pc, #64]	; (89f4 <process_command(String)+0x2c0>)
    89b2:	681b      	ldr	r3, [r3, #0]
    89b4:	4798      	blx	r3
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    89b6:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    89ba:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    89be:	f7f9 fd99 	bl	24f4 <sample_at_CLK_rising_edge()>
    89c2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    89c6:	f7f9 fd95 	bl	24f4 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    89ca:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    89ce:	e781      	b.n	88d4 <process_command(String)+0x1a0>
    89d0:	2000047c 	.word	0x2000047c
    89d4:	200188a6 	.word	0x200188a6
    89d8:	2001888c 	.word	0x2001888c
    89dc:	200053c8 	.word	0x200053c8
    89e0:	200007ec 	.word	0x200007ec
    89e4:	20004340 	.word	0x20004340
    89e8:	20001214 	.word	0x20001214
    89ec:	200007a0 	.word	0x200007a0
    89f0:	200007f0 	.word	0x200007f0
    89f4:	20018820 	.word	0x20018820
    89f8:	200007fc 	.word	0x200007fc
    89fc:	20000808 	.word	0x20000808
            Serial.println(String("Available Commands:\n\r")+
    8a00:	4972      	ldr	r1, [pc, #456]	; (8bcc <process_command(String)+0x498>)
    8a02:	a810      	add	r0, sp, #64	; 0x40
    8a04:	f001 f88a 	bl	9b1c <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    8a08:	a910      	add	r1, sp, #64	; 0x40
    8a0a:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    8a0c:	2400      	movs	r4, #0
    8a0e:	f001 f82b 	bl	9a68 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    8a12:	496f      	ldr	r1, [pc, #444]	; (8bd0 <process_command(String)+0x49c>)
    8a14:	a814      	add	r0, sp, #80	; 0x50
    8a16:	f001 f91d 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    8a1a:	496e      	ldr	r1, [pc, #440]	; (8bd4 <process_command(String)+0x4a0>)
    8a1c:	f001 f91a 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    8a20:	496d      	ldr	r1, [pc, #436]	; (8bd8 <process_command(String)+0x4a4>)
    8a22:	f001 f917 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    8a26:	496d      	ldr	r1, [pc, #436]	; (8bdc <process_command(String)+0x4a8>)
    8a28:	f001 f914 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    8a2c:	496c      	ldr	r1, [pc, #432]	; (8be0 <process_command(String)+0x4ac>)
    8a2e:	f001 f911 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    8a32:	496c      	ldr	r1, [pc, #432]	; (8be4 <process_command(String)+0x4b0>)
    8a34:	f001 f90e 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    8a38:	496b      	ldr	r1, [pc, #428]	; (8be8 <process_command(String)+0x4b4>)
    8a3a:	f001 f90b 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    8a3e:	496b      	ldr	r1, [pc, #428]	; (8bec <process_command(String)+0x4b8>)
    8a40:	f001 f908 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    8a44:	496a      	ldr	r1, [pc, #424]	; (8bf0 <process_command(String)+0x4bc>)
    8a46:	f001 f905 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    8a4a:	496a      	ldr	r1, [pc, #424]	; (8bf4 <process_command(String)+0x4c0>)
    8a4c:	f001 f902 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    8a50:	4969      	ldr	r1, [pc, #420]	; (8bf8 <process_command(String)+0x4c4>)
    8a52:	f001 f8ff 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    8a56:	4969      	ldr	r1, [pc, #420]	; (8bfc <process_command(String)+0x4c8>)
    8a58:	f001 f8fc 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    8a5c:	4968      	ldr	r1, [pc, #416]	; (8c00 <process_command(String)+0x4cc>)
    8a5e:	f001 f8f9 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    8a62:	4968      	ldr	r1, [pc, #416]	; (8c04 <process_command(String)+0x4d0>)
    8a64:	f001 f8f6 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    8a68:	4967      	ldr	r1, [pc, #412]	; (8c08 <process_command(String)+0x4d4>)
    8a6a:	f001 f8f3 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    8a6e:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8a70:	4866      	ldr	r0, [pc, #408]	; (8c0c <process_command(String)+0x4d8>)
    8a72:	f000 ffb1 	bl	99d8 <Print::print(String const&)>
    8a76:	4865      	ldr	r0, [pc, #404]	; (8c0c <process_command(String)+0x4d8>)
    8a78:	f000 ffd4 	bl	9a24 <Print::println()>
class StringSumHelper : public String
    8a7c:	a814      	add	r0, sp, #80	; 0x50
    8a7e:	f001 f811 	bl	9aa4 <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    8a82:	a810      	add	r0, sp, #64	; 0x40
    8a84:	f001 f80e 	bl	9aa4 <String::~String()>
            run_mode = WAITING;
    8a88:	4b61      	ldr	r3, [pc, #388]	; (8c10 <process_command(String)+0x4dc>)
    8a8a:	701c      	strb	r4, [r3, #0]
            break;
    8a8c:	e690      	b.n	87b0 <process_command(String)+0x7c>
	StringSumHelper(const char *p) : String(p) {}
    8a8e:	4961      	ldr	r1, [pc, #388]	; (8c14 <process_command(String)+0x4e0>)
    8a90:	a814      	add	r0, sp, #80	; 0x50
    8a92:	f001 f843 	bl	9b1c <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    8a96:	4621      	mov	r1, r4
    8a98:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    8a9a:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    8a9c:	f001 f8d2 	bl	9c44 <operator+(StringSumHelper const&, String const&)>
    8aa0:	495d      	ldr	r1, [pc, #372]	; (8c18 <process_command(String)+0x4e4>)
    8aa2:	f001 f8d7 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    8aa6:	a904      	add	r1, sp, #16
    8aa8:	f001 f8cc 	bl	9c44 <operator+(StringSumHelper const&, String const&)>
    8aac:	495b      	ldr	r1, [pc, #364]	; (8c1c <process_command(String)+0x4e8>)
    8aae:	f001 f8d1 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    8ab2:	a908      	add	r1, sp, #32
    8ab4:	f001 f8c6 	bl	9c44 <operator+(StringSumHelper const&, String const&)>
    8ab8:	4958      	ldr	r1, [pc, #352]	; (8c1c <process_command(String)+0x4e8>)
    8aba:	f001 f8cb 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    8abe:	a90c      	add	r1, sp, #48	; 0x30
    8ac0:	f001 f8c0 	bl	9c44 <operator+(StringSumHelper const&, String const&)>
    8ac4:	4956      	ldr	r1, [pc, #344]	; (8c20 <process_command(String)+0x4ec>)
    8ac6:	f001 f8c5 	bl	9c54 <operator+(StringSumHelper const&, char const*)>
    8aca:	4601      	mov	r1, r0
    8acc:	484f      	ldr	r0, [pc, #316]	; (8c0c <process_command(String)+0x4d8>)
    8ace:	f000 ff83 	bl	99d8 <Print::print(String const&)>
    8ad2:	484e      	ldr	r0, [pc, #312]	; (8c0c <process_command(String)+0x4d8>)
    8ad4:	f000 ffa6 	bl	9a24 <Print::println()>
class StringSumHelper : public String
    8ad8:	a814      	add	r0, sp, #80	; 0x50
    8ada:	f000 ffe3 	bl	9aa4 <String::~String()>
            run_mode = WAITING;
    8ade:	4b4c      	ldr	r3, [pc, #304]	; (8c10 <process_command(String)+0x4dc>)
    8ae0:	701c      	strb	r4, [r3, #0]
            break;
    8ae2:	e665      	b.n	87b0 <process_command(String)+0x7c>
            run_mode = SINGLE_STEP;
    8ae4:	4b4a      	ldr	r3, [pc, #296]	; (8c10 <process_command(String)+0x4dc>)
    8ae6:	2401      	movs	r4, #1
    8ae8:	701c      	strb	r4, [r3, #0]
            break;
    8aea:	e661      	b.n	87b0 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8aec:	9808      	ldr	r0, [sp, #32]
    8aee:	2800      	cmp	r0, #0
    8af0:	d050      	beq.n	8b94 <process_command(String)+0x460>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    8af2:	220a      	movs	r2, #10
    8af4:	2100      	movs	r1, #0
    8af6:	f003 fe0d 	bl	c714 <strtoul>
    8afa:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    8afc:	2803      	cmp	r0, #3
    8afe:	d821      	bhi.n	8b44 <process_command(String)+0x410>
                    addr_mode = (ADDR_MODE)a_mode;
    8b00:	4b48      	ldr	r3, [pc, #288]	; (8c24 <process_command(String)+0x4f0>)
    8b02:	7018      	strb	r0, [r3, #0]
    8b04:	e694      	b.n	8830 <process_command(String)+0xfc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8b06:	4948      	ldr	r1, [pc, #288]	; (8c28 <process_command(String)+0x4f4>)
    8b08:	a808      	add	r0, sp, #32
    8b0a:	f001 f8b1 	bl	9c70 <String::equals(char const*) const>
                else if (arg1=="a") {
    8b0e:	2800      	cmp	r0, #0
    8b10:	d044      	beq.n	8b9c <process_command(String)+0x468>
                    register_a = value & 0xFF;
    8b12:	4b46      	ldr	r3, [pc, #280]	; (8c2c <process_command(String)+0x4f8>)
    8b14:	701c      	strb	r4, [r3, #0]
    8b16:	e6fa      	b.n	890e <process_command(String)+0x1da>
                    count = arg2.toInt() & 0xFF;
    8b18:	a80c      	add	r0, sp, #48	; 0x30
    8b1a:	f001 f9ad 	bl	9e78 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    8b1e:	4944      	ldr	r1, [pc, #272]	; (8c30 <process_command(String)+0x4fc>)
                    count = arg2.toInt() & 0xFF;
    8b20:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    8b24:	4632      	mov	r2, r6
    8b26:	4620      	mov	r0, r4
    8b28:	f003 ff06 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8b2c:	4620      	mov	r0, r4
    8b2e:	f004 fb47 	bl	d1c0 <strlen>
    8b32:	4601      	mov	r1, r0
    8b34:	4620      	mov	r0, r4
    8b36:	f002 fbf9 	bl	b32c <usb_serial_write>
                for (byte i=0; i<count; i++) {
    8b3a:	f1b9 0f00 	cmp.w	r9, #0
    8b3e:	f47f af0d 	bne.w	895c <process_command(String)+0x228>
    8b42:	e732      	b.n	89aa <process_command(String)+0x276>
	StringSumHelper(const char *p) : String(p) {}
    8b44:	493b      	ldr	r1, [pc, #236]	; (8c34 <process_command(String)+0x500>)
    8b46:	a814      	add	r0, sp, #80	; 0x50
    8b48:	f000 ffe8 	bl	9b1c <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    8b4c:	a908      	add	r1, sp, #32
    8b4e:	a814      	add	r0, sp, #80	; 0x50
    8b50:	f001 f878 	bl	9c44 <operator+(StringSumHelper const&, String const&)>
    8b54:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8b56:	482d      	ldr	r0, [pc, #180]	; (8c0c <process_command(String)+0x4d8>)
    8b58:	f000 ff3e 	bl	99d8 <Print::print(String const&)>
    8b5c:	482b      	ldr	r0, [pc, #172]	; (8c0c <process_command(String)+0x4d8>)
    8b5e:	f000 ff61 	bl	9a24 <Print::println()>
class StringSumHelper : public String
    8b62:	a814      	add	r0, sp, #80	; 0x50
    8b64:	f000 ff9e 	bl	9aa4 <String::~String()>
            run_mode = WAITING;
    8b68:	e662      	b.n	8830 <process_command(String)+0xfc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8b6a:	4833      	ldr	r0, [pc, #204]	; (8c38 <process_command(String)+0x504>)
    8b6c:	e678      	b.n	8860 <process_command(String)+0x12c>
    8b6e:	4832      	ldr	r0, [pc, #200]	; (8c38 <process_command(String)+0x504>)
    8b70:	e651      	b.n	8816 <process_command(String)+0xe2>
    8b72:	4831      	ldr	r0, [pc, #196]	; (8c38 <process_command(String)+0x504>)
    8b74:	e6da      	b.n	892c <process_command(String)+0x1f8>
    8b76:	4830      	ldr	r0, [pc, #192]	; (8c38 <process_command(String)+0x504>)
    8b78:	e6bb      	b.n	88f2 <process_command(String)+0x1be>
                        sprintf(s,"\n\r[%04X] = ", addr);
    8b7a:	4659      	mov	r1, fp
    8b7c:	4632      	mov	r2, r6
    8b7e:	4620      	mov	r0, r4
    8b80:	f003 feda 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8b84:	4620      	mov	r0, r4
    8b86:	f004 fb1b 	bl	d1c0 <strlen>
    8b8a:	4601      	mov	r1, r0
    8b8c:	4620      	mov	r0, r4
    8b8e:	f002 fbcd 	bl	b32c <usb_serial_write>
    8b92:	e6ef      	b.n	8974 <process_command(String)+0x240>
    8b94:	4828      	ldr	r0, [pc, #160]	; (8c38 <process_command(String)+0x504>)
    8b96:	e7ac      	b.n	8af2 <process_command(String)+0x3be>
    8b98:	4827      	ldr	r0, [pc, #156]	; (8c38 <process_command(String)+0x504>)
    8b9a:	e66a      	b.n	8872 <process_command(String)+0x13e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8b9c:	4927      	ldr	r1, [pc, #156]	; (8c3c <process_command(String)+0x508>)
    8b9e:	a808      	add	r0, sp, #32
    8ba0:	f001 f866 	bl	9c70 <String::equals(char const*) const>
                else if (arg1=="x") {
    8ba4:	b120      	cbz	r0, 8bb0 <process_command(String)+0x47c>
                    register_x = value & 0xFF;
    8ba6:	4b26      	ldr	r3, [pc, #152]	; (8c40 <process_command(String)+0x50c>)
    8ba8:	701c      	strb	r4, [r3, #0]
    8baa:	e6b0      	b.n	890e <process_command(String)+0x1da>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8bac:	4822      	ldr	r0, [pc, #136]	; (8c38 <process_command(String)+0x504>)
    8bae:	e61e      	b.n	87ee <process_command(String)+0xba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8bb0:	4924      	ldr	r1, [pc, #144]	; (8c44 <process_command(String)+0x510>)
    8bb2:	a808      	add	r0, sp, #32
    8bb4:	f001 f85c 	bl	9c70 <String::equals(char const*) const>
                else if (arg1=="y") {
    8bb8:	b110      	cbz	r0, 8bc0 <process_command(String)+0x48c>
                    register_y = value & 0xFF;
    8bba:	4b23      	ldr	r3, [pc, #140]	; (8c48 <process_command(String)+0x514>)
    8bbc:	701c      	strb	r4, [r3, #0]
    8bbe:	e6a6      	b.n	890e <process_command(String)+0x1da>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    8bc0:	4922      	ldr	r1, [pc, #136]	; (8c4c <process_command(String)+0x518>)
    8bc2:	4812      	ldr	r0, [pc, #72]	; (8c0c <process_command(String)+0x4d8>)
    8bc4:	f7f7 fa82 	bl	cc <Print::println(char const*) [clone .isra.0]>
    8bc8:	e6a1      	b.n	890e <process_command(String)+0x1da>
    8bca:	bf00      	nop
    8bcc:	200003e0 	.word	0x200003e0
    8bd0:	200003f8 	.word	0x200003f8
    8bd4:	20000434 	.word	0x20000434
    8bd8:	20000480 	.word	0x20000480
    8bdc:	200004b0 	.word	0x200004b0
    8be0:	200004e4 	.word	0x200004e4
    8be4:	20000528 	.word	0x20000528
    8be8:	20000560 	.word	0x20000560
    8bec:	200005a4 	.word	0x200005a4
    8bf0:	200005f4 	.word	0x200005f4
    8bf4:	20000630 	.word	0x20000630
    8bf8:	20000634 	.word	0x20000634
    8bfc:	2000064c 	.word	0x2000064c
    8c00:	20000678 	.word	0x20000678
    8c04:	200006d8 	.word	0x200006d8
    8c08:	20000734 	.word	0x20000734
    8c0c:	20004340 	.word	0x20004340
    8c10:	200188a6 	.word	0x200188a6
    8c14:	20000810 	.word	0x20000810
    8c18:	20000830 	.word	0x20000830
    8c1c:	20000834 	.word	0x20000834
    8c20:	20000944 	.word	0x20000944
    8c24:	20018898 	.word	0x20018898
    8c28:	200007a4 	.word	0x200007a4
    8c2c:	200188a3 	.word	0x200188a3
    8c30:	200007f0 	.word	0x200007f0
    8c34:	20000780 	.word	0x20000780
    8c38:	20001214 	.word	0x20001214
    8c3c:	200007a8 	.word	0x200007a8
    8c40:	200188a4 	.word	0x200188a4
    8c44:	200007ac 	.word	0x200007ac
    8c48:	200188a5 	.word	0x200188a5
    8c4c:	200007b0 	.word	0x200007b0

00008c50 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    8c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Give Teensy 4.1 a moment
    delay(50);
    8c54:	2032      	movs	r0, #50	; 0x32
void loop() {
    8c56:	b08d      	sub	sp, #52	; 0x34
    delay(50);
    8c58:	f001 f914 	bl	9e84 <delay>
    sample_at_CLK_rising_edge();
    8c5c:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8dbc <loop+0x16c>
    8c60:	f7f9 fc48 	bl	24f4 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    8c64:	4e4c      	ldr	r6, [pc, #304]	; (8d98 <loop+0x148>)
    8c66:	f7f9 fc45 	bl	24f4 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    8c6a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8dc0 <loop+0x170>
    8c6e:	f7f9 fc41 	bl	24f4 <sample_at_CLK_rising_edge()>

    reset_sequence();
    8c72:	4d4a      	ldr	r5, [pc, #296]	; (8d9c <loop+0x14c>)
    8c74:	f7fa f9ac 	bl	2fd0 <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    8c78:	4b49      	ldr	r3, [pc, #292]	; (8da0 <loop+0x150>)
    8c7a:	781b      	ldrb	r3, [r3, #0]
    8c7c:	2b01      	cmp	r3, #1
    8c7e:	f000 81d0 	beq.w	9022 <loop+0x3d2>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    8c82:	f89b 3000 	ldrb.w	r3, [fp]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d175      	bne.n	8d76 <loop+0x126>
    8c8a:	4b46      	ldr	r3, [pc, #280]	; (8da4 <loop+0x154>)
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2b01      	cmp	r3, #1
    8c90:	d06f      	beq.n	8d72 <loop+0x122>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8c92:	4a45      	ldr	r2, [pc, #276]	; (8da8 <loop+0x158>)
        nmi_n_old = direct_nmi;
    8c94:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8c98:	7812      	ldrb	r2, [r2, #0]
    8c9a:	2a01      	cmp	r2, #1
    8c9c:	d073      	beq.n	8d86 <loop+0x136>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    8c9e:	2100      	movs	r1, #0
    8ca0:	8830      	ldrh	r0, [r6, #0]
    8ca2:	f7f9 fc77 	bl	2594 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    8ca6:	4b41      	ldr	r3, [pc, #260]	; (8dac <loop+0x15c>)
        next_instruction = read_byte(register_pc, false);
    8ca8:	4601      	mov	r1, r0
    8caa:	f889 0000 	strb.w	r0, [r9]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    8cae:	681b      	ldr	r3, [r3, #0]
    8cb0:	2b00      	cmp	r3, #0
    8cb2:	f000 8089 	beq.w	8dc8 <loop+0x178>
    8cb6:	782a      	ldrb	r2, [r5, #0]
    8cb8:	f8b6 a000 	ldrh.w	sl, [r6]
    8cbc:	2a02      	cmp	r2, #2
    8cbe:	f000 81be 	beq.w	903e <loop+0x3ee>
void loop() {
    8cc2:	4650      	mov	r0, sl
    8cc4:	ac04      	add	r4, sp, #16
    8cc6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8dc4 <loop+0x174>
	size_t println(const char s[])			{ return print(s) + println(); }
    8cca:	4f39      	ldr	r7, [pc, #228]	; (8db0 <loop+0x160>)
    8ccc:	e033      	b.n	8d36 <loop+0xe6>
    8cce:	2101      	movs	r1, #1
    8cd0:	4640      	mov	r0, r8
    8cd2:	f002 fb2b 	bl	b32c <usb_serial_write>
    8cd6:	4638      	mov	r0, r7
    8cd8:	f000 fea4 	bl	9a24 <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    8cdc:	4669      	mov	r1, sp
    8cde:	4620      	mov	r0, r4
    8ce0:	f000 fec2 	bl	9a68 <String::String(String const&)>
    8ce4:	4620      	mov	r0, r4
    8ce6:	f7ff fd25 	bl	8734 <process_command(String)>
    8cea:	7028      	strb	r0, [r5, #0]
    8cec:	4620      	mov	r0, r4
    8cee:	f000 fed9 	bl	9aa4 <String::~String()>
                    last_command = c;
    8cf2:	4669      	mov	r1, sp
    8cf4:	482f      	ldr	r0, [pc, #188]	; (8db4 <loop+0x164>)
    8cf6:	f000 ff25 	bl	9b44 <String::operator=(String const&)>
    8cfa:	2101      	movs	r1, #1
    8cfc:	4640      	mov	r0, r8
    8cfe:	f002 fb15 	bl	b32c <usb_serial_write>
    8d02:	4638      	mov	r0, r7
    8d04:	f000 fe8e 	bl	9a24 <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    8d08:	782b      	ldrb	r3, [r5, #0]
    8d0a:	2b02      	cmp	r3, #2
    8d0c:	d009      	beq.n	8d22 <loop+0xd2>
    8d0e:	8830      	ldrh	r0, [r6, #0]
    8d10:	4550      	cmp	r0, sl
    8d12:	d006      	beq.n	8d22 <loop+0xd2>
                    next_instruction = read_byte(register_pc, false);
    8d14:	2100      	movs	r1, #0
    8d16:	f7f9 fc3d 	bl	2594 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    8d1a:	f8b6 a000 	ldrh.w	sl, [r6]
                    next_instruction = read_byte(register_pc, false);
    8d1e:	f889 0000 	strb.w	r0, [r9]
                }
            } while (run_mode == WAITING);
    8d22:	4668      	mov	r0, sp
    8d24:	f000 febe 	bl	9aa4 <String::~String()>
    8d28:	782b      	ldrb	r3, [r5, #0]
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	f040 817c 	bne.w	9028 <loop+0x3d8>
                display_next_instruction(register_pc, next_instruction);
    8d30:	8830      	ldrh	r0, [r6, #0]
        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0x1);

		uint16_t next_pc = 0;
        switch (next_instruction) {
    8d32:	f899 1000 	ldrb.w	r1, [r9]
                display_next_instruction(register_pc, next_instruction);
    8d36:	f7ff fbbb 	bl	84b0 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    8d3a:	4668      	mov	r0, sp
    8d3c:	f7ff fc6c 	bl	8618 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    8d40:	9b02      	ldr	r3, [sp, #8]
    8d42:	2b00      	cmp	r3, #0
    8d44:	d1c3      	bne.n	8cce <loop+0x7e>
	inline unsigned int length(void) const {return len;}
    8d46:	491b      	ldr	r1, [pc, #108]	; (8db4 <loop+0x164>)
    8d48:	688b      	ldr	r3, [r1, #8]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d0bf      	beq.n	8cce <loop+0x7e>
	size_t println(const String &s)			{ return print(s) + println(); }
    8d4e:	4638      	mov	r0, r7
    8d50:	f000 fe42 	bl	99d8 <Print::print(String const&)>
    8d54:	4638      	mov	r0, r7
    8d56:	f000 fe65 	bl	9a24 <Print::println()>
                    run_mode = process_command(last_command);
    8d5a:	4916      	ldr	r1, [pc, #88]	; (8db4 <loop+0x164>)
    8d5c:	4620      	mov	r0, r4
    8d5e:	f000 fe83 	bl	9a68 <String::String(String const&)>
    8d62:	4620      	mov	r0, r4
    8d64:	f7ff fce6 	bl	8734 <process_command(String)>
    8d68:	7028      	strb	r0, [r5, #0]
    8d6a:	4620      	mov	r0, r4
    8d6c:	f000 fe9a 	bl	9aa4 <String::~String()>
    8d70:	e7c3      	b.n	8cfa <loop+0xaa>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    8d72:	f7fa fa19 	bl	31a8 <nmi_handler()>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d76:	4a0c      	ldr	r2, [pc, #48]	; (8da8 <loop+0x158>)
        nmi_n_old = direct_nmi;
    8d78:	4b0a      	ldr	r3, [pc, #40]	; (8da4 <loop+0x154>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d7a:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    8d7c:	781b      	ldrb	r3, [r3, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d7e:	2a01      	cmp	r2, #1
        nmi_n_old = direct_nmi;
    8d80:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d84:	d18b      	bne.n	8c9e <loop+0x4e>
    8d86:	4b0c      	ldr	r3, [pc, #48]	; (8db8 <loop+0x168>)
    8d88:	7818      	ldrb	r0, [r3, #0]
    8d8a:	f010 0004 	ands.w	r0, r0, #4
    8d8e:	d186      	bne.n	8c9e <loop+0x4e>
    8d90:	f7fa fafa 	bl	3388 <irq_handler(unsigned char)>
    8d94:	e783      	b.n	8c9e <loop+0x4e>
    8d96:	bf00      	nop
    8d98:	2001888c 	.word	0x2001888c
    8d9c:	200188a6 	.word	0x200188a6
    8da0:	2001889e 	.word	0x2001889e
    8da4:	2001889c 	.word	0x2001889c
    8da8:	2001889b 	.word	0x2001889b
    8dac:	200053c8 	.word	0x200053c8
    8db0:	20004340 	.word	0x20004340
    8db4:	200153f0 	.word	0x200153f0
    8db8:	20004950 	.word	0x20004950
    8dbc:	2000494f 	.word	0x2000494f
    8dc0:	200188a2 	.word	0x200188a2
    8dc4:	20000a00 	.word	0x20000a00
        if (run_mode != RUNNING) {
    8dc8:	782b      	ldrb	r3, [r5, #0]
    8dca:	2b02      	cmp	r3, #2
    8dcc:	f040 813e 	bne.w	904c <loop+0x3fc>
        switch (next_instruction) {
    8dd0:	29ff      	cmp	r1, #255	; 0xff
    8dd2:	f200 85b9 	bhi.w	9948 <loop+0xcf8>
    8dd6:	e8df f011 	tbh	[pc, r1, lsl #1]
    8dda:	018f      	.short	0x018f
    8ddc:	01000194 	.word	0x01000194
    8de0:	019c0198 	.word	0x019c0198
    8de4:	01a901a5 	.word	0x01a901a5
    8de8:	01b101ad 	.word	0x01b101ad
    8dec:	01b901b5 	.word	0x01b901b5
    8df0:	01c101bd 	.word	0x01c101bd
    8df4:	01ce01ca 	.word	0x01ce01ca
    8df8:	01d601d2 	.word	0x01d601d2
    8dfc:	010001da 	.word	0x010001da
    8e00:	01e201de 	.word	0x01e201de
    8e04:	01ef01eb 	.word	0x01ef01eb
    8e08:	01f701f3 	.word	0x01f701f3
    8e0c:	010201fb 	.word	0x010201fb
    8e10:	020301ff 	.word	0x020301ff
    8e14:	0211020d 	.word	0x0211020d
    8e18:	02190215 	.word	0x02190215
    8e1c:	0100021d 	.word	0x0100021d
    8e20:	02250221 	.word	0x02250221
    8e24:	022d0229 	.word	0x022d0229
    8e28:	02350231 	.word	0x02350231
    8e2c:	023d0239 	.word	0x023d0239
    8e30:	02450241 	.word	0x02450241
    8e34:	024d0249 	.word	0x024d0249
    8e38:	02550251 	.word	0x02550251
    8e3c:	01000259 	.word	0x01000259
    8e40:	0261025d 	.word	0x0261025d
    8e44:	026e026a 	.word	0x026e026a
    8e48:	02760272 	.word	0x02760272
    8e4c:	0102027a 	.word	0x0102027a
    8e50:	0282027e 	.word	0x0282027e
    8e54:	0290028c 	.word	0x0290028c
    8e58:	02a30294 	.word	0x02a30294
    8e5c:	010002a7 	.word	0x010002a7
    8e60:	02af02ab 	.word	0x02af02ab
    8e64:	02bc02b8 	.word	0x02bc02b8
    8e68:	02c402c0 	.word	0x02c402c0
    8e6c:	02cc02c8 	.word	0x02cc02c8
    8e70:	02d402d0 	.word	0x02d402d0
    8e74:	02dc02d8 	.word	0x02dc02d8
    8e78:	02e402e0 	.word	0x02e402e0
    8e7c:	010002e8 	.word	0x010002e8
    8e80:	02f002ec 	.word	0x02f002ec
    8e84:	02fd02f9 	.word	0x02fd02f9
    8e88:	03050301 	.word	0x03050301
    8e8c:	01020309 	.word	0x01020309
    8e90:	0311030d 	.word	0x0311030d
    8e94:	031f031b 	.word	0x031f031b
    8e98:	03270323 	.word	0x03270323
    8e9c:	0100032b 	.word	0x0100032b
    8ea0:	0333032f 	.word	0x0333032f
    8ea4:	0340033c 	.word	0x0340033c
    8ea8:	03480344 	.word	0x03480344
    8eac:	0350034c 	.word	0x0350034c
    8eb0:	03580354 	.word	0x03580354
    8eb4:	0360035c 	.word	0x0360035c
    8eb8:	03680364 	.word	0x03680364
    8ebc:	0100036c 	.word	0x0100036c
    8ec0:	03740370 	.word	0x03740370
    8ec4:	0381037d 	.word	0x0381037d
    8ec8:	03890385 	.word	0x03890385
    8ecc:	0102038d 	.word	0x0102038d
    8ed0:	03950391 	.word	0x03950391
    8ed4:	03a3039f 	.word	0x03a3039f
    8ed8:	03ab03a7 	.word	0x03ab03a7
    8edc:	03b903b5 	.word	0x03b903b5
    8ee0:	03c703c3 	.word	0x03c703c3
    8ee4:	03cf03cb 	.word	0x03cf03cb
    8ee8:	03d703d3 	.word	0x03d703d3
    8eec:	03e503db 	.word	0x03e503db
    8ef0:	03f303e9 	.word	0x03f303e9
    8ef4:	03fb03f7 	.word	0x03fb03f7
    8ef8:	040303ff 	.word	0x040303ff
    8efc:	01000407 	.word	0x01000407
    8f00:	0414040b 	.word	0x0414040b
    8f04:	041c0418 	.word	0x041c0418
    8f08:	04240420 	.word	0x04240420
    8f0c:	042c0428 	.word	0x042c0428
    8f10:	043f0435 	.word	0x043f0435
    8f14:	044d0449 	.word	0x044d0449
    8f18:	04610457 	.word	0x04610457
    8f1c:	04690465 	.word	0x04690465
    8f20:	0471046d 	.word	0x0471046d
    8f24:	04790475 	.word	0x04790475
    8f28:	0481047d 	.word	0x0481047d
    8f2c:	04890485 	.word	0x04890485
    8f30:	0497048d 	.word	0x0497048d
    8f34:	049f049b 	.word	0x049f049b
    8f38:	04a704a3 	.word	0x04a704a3
    8f3c:	010004ab 	.word	0x010004ab
    8f40:	04b304af 	.word	0x04b304af
    8f44:	04bb04b7 	.word	0x04bb04b7
    8f48:	04c304bf 	.word	0x04c304bf
    8f4c:	04cb04c7 	.word	0x04cb04c7
    8f50:	04d304cf 	.word	0x04d304cf
    8f54:	04db04d7 	.word	0x04db04d7
    8f58:	04e304df 	.word	0x04e304df
    8f5c:	04eb04e7 	.word	0x04eb04e7
    8f60:	04f904f5 	.word	0x04f904f5
    8f64:	050104fd 	.word	0x050104fd
    8f68:	050b0506 	.word	0x050b0506
    8f6c:	05150510 	.word	0x05150510
    8f70:	051f051a 	.word	0x051f051a
    8f74:	05290524 	.word	0x05290524
    8f78:	0533052e 	.word	0x0533052e
    8f7c:	01000538 	.word	0x01000538
    8f80:	0542053d 	.word	0x0542053d
    8f84:	0551054c 	.word	0x0551054c
    8f88:	055b0556 	.word	0x055b0556
    8f8c:	01020560 	.word	0x01020560
    8f90:	056a0565 	.word	0x056a0565
    8f94:	057a0575 	.word	0x057a0575
    8f98:	0584057f 	.word	0x0584057f
    8f9c:	058e0589 	.word	0x058e0589
    8fa0:	059e0599 	.word	0x059e0599
    8fa4:	05a805a3 	.word	0x05a805a3
    8fa8:	05b205ad 	.word	0x05b205ad
    8fac:	0102013c 	.word	0x0102013c
    8fb0:	0140013c 	.word	0x0140013c
    8fb4:	01480144 	.word	0x01480144
    8fb8:	0150014c 	.word	0x0150014c
    8fbc:	01000154 	.word	0x01000154
    8fc0:	015c0158 	.word	0x015c0158
    8fc4:	01690165 	.word	0x01690165
    8fc8:	0171016d 	.word	0x0171016d
    8fcc:	01020175 	.word	0x01020175
    8fd0:	017d0179 	.word	0x017d0179
    8fd4:	05b70187 	.word	0x05b70187
    8fd8:	018b      	.short	0x018b
				break; // BRK - Break
			case 0x01:
				next_pc = opcode_0x01();
				break; // OR - Indexed Indirect X
			case 0x02:
				next_pc = opcode_0x02();
    8fda:	f7ff fa63 	bl	84a4 <opcode_0x02()>
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    8fde:	f7fa fdab 	bl	3b38 <opcode_0xEA()>
    8fe2:	4607      	mov	r7, r0
				run_mode = WAITING;
				break;
        }

        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    8fe4:	782b      	ldrb	r3, [r5, #0]
    8fe6:	2b01      	cmp	r3, #1
    8fe8:	d105      	bne.n	8ff6 <loop+0x3a6>
    8fea:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    8fee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    8ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            digitalWriteFast(PIN_SYNC, 0);

        char buf[32];
        sprintf(buf, "%04X", next_pc);
    8ff6:	ac04      	add	r4, sp, #16
    8ff8:	463a      	mov	r2, r7
    8ffa:	49c4      	ldr	r1, [pc, #784]	; (930c <loop+0x6bc>)
    8ffc:	4620      	mov	r0, r4
    8ffe:	f003 fc9b 	bl	c938 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    9002:	4620      	mov	r0, r4
    9004:	f004 f8dc 	bl	d1c0 <strlen>
    9008:	4601      	mov	r1, r0
    900a:	4620      	mov	r0, r4
    900c:	f002 f98e 	bl	b32c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    9010:	48bf      	ldr	r0, [pc, #764]	; (9310 <loop+0x6c0>)
    9012:	f000 fd07 	bl	9a24 <Print::println()>
        if (direct_reset == 1) reset_sequence();
    9016:	4bbf      	ldr	r3, [pc, #764]	; (9314 <loop+0x6c4>)
        Serial.println(buf);
        register_pc = next_pc;
    9018:	8037      	strh	r7, [r6, #0]
        if (direct_reset == 1) reset_sequence();
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	2b01      	cmp	r3, #1
    901e:	f47f ae30 	bne.w	8c82 <loop+0x32>
    9022:	f7f9 ffd5 	bl	2fd0 <reset_sequence()>
    9026:	e62c      	b.n	8c82 <loop+0x32>
        if (run_mode == SINGLE_STEP)
    9028:	2b01      	cmp	r3, #1
    902a:	d105      	bne.n	9038 <loop+0x3e8>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    902c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    9030:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    9034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        switch (next_instruction) {
    9038:	f899 1000 	ldrb.w	r1, [r9]
}
    903c:	e6c8      	b.n	8dd0 <loop+0x180>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    903e:	4553      	cmp	r3, sl
    9040:	f47f aec6 	bne.w	8dd0 <loop+0x180>
            run_mode = WAITING;
    9044:	f04f 0300 	mov.w	r3, #0
    9048:	702b      	strb	r3, [r5, #0]
    904a:	e63a      	b.n	8cc2 <loop+0x72>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    904c:	f8b6 a000 	ldrh.w	sl, [r6]
    9050:	e637      	b.n	8cc2 <loop+0x72>
				next_pc = opcode_0xE9();
    9052:	f7fa fccb 	bl	39ec <opcode_0xE9()>
    9056:	4607      	mov	r7, r0
				break; // SBC - Immediate
    9058:	e7c4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xEC();
    905a:	f7fc f9c1 	bl	53e0 <opcode_0xEC()>
    905e:	4607      	mov	r7, r0
				break; // CPX - Absolute
    9060:	e7c0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xED();
    9062:	f7fa fd09 	bl	3a78 <opcode_0xED()>
    9066:	4607      	mov	r7, r0
				break; // SBC - Absolute
    9068:	e7bc      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xEE();
    906a:	f7fc fcf1 	bl	5a50 <opcode_0xEE()>
    906e:	4607      	mov	r7, r0
				break; // INC - Absolute
    9070:	e7b8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xEF();
    9072:	f7ff f857 	bl	8124 <opcode_0xEF()>
    9076:	4607      	mov	r7, r0
				break; // ISC - Absolute
    9078:	e7b4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF0();
    907a:	f7fd f973 	bl	6364 <opcode_0xF0()>
    907e:	4607      	mov	r7, r0
				break; // BEQ - Branch on Zero Set
    9080:	e7b0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF1();
    9082:	f7fa fd45 	bl	3b10 <opcode_0xF1()>
    9086:	4607      	mov	r7, r0
				break; // SBC - Indirect Indexed  Y
    9088:	e7ac      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF3();
    908a:	f7ff f815 	bl	80b8 <opcode_0xF3()>
    908e:	4607      	mov	r7, r0
				break; // ISC - Indirect Indexed  Y
    9090:	e7a8      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    9092:	f7f9 fd77 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    9096:	4ba0      	ldr	r3, [pc, #640]	; (9318 <loop+0x6c8>)
    9098:	f893 71c1 	ldrb.w	r7, [r3, #449]	; 0x1c1
    909c:	8833      	ldrh	r3, [r6, #0]
    909e:	441f      	add	r7, r3
    90a0:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    90a2:	e79f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF5();
    90a4:	f7fa fcd6 	bl	3a54 <opcode_0xF5()>
    90a8:	4607      	mov	r7, r0
				break; // SBC - ZeroPage , X
    90aa:	e79b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF6();
    90ac:	f7fc fc9e 	bl	59ec <opcode_0xF6()>
    90b0:	4607      	mov	r7, r0
				break; // INC - ZeroPage , X
    90b2:	e797      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF7();
    90b4:	f7fe ff94 	bl	7fe0 <opcode_0xF7()>
    90b8:	4607      	mov	r7, r0
				break; // ISC - ZeroPage , X
    90ba:	e793      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF8();
    90bc:	f7fa fdec 	bl	3c98 <opcode_0xF8()>
    90c0:	4607      	mov	r7, r0
				break; // SED
    90c2:	e78f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xF9();
    90c4:	f7fa fcfe 	bl	3ac4 <opcode_0xF9()>
    90c8:	4607      	mov	r7, r0
				break; // SBC - Absolute , Y
    90ca:	e78b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xFB();
    90cc:	f7ff f896 	bl	81fc <opcode_0xFB()>
    90d0:	4607      	mov	r7, r0
				break; // ISC - Absolute , Y
    90d2:	e787      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    90d4:	2001      	movs	r0, #1
    90d6:	f7f9 fdb1 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    90da:	4b8f      	ldr	r3, [pc, #572]	; (9318 <loop+0x6c8>)
    90dc:	f893 7361 	ldrb.w	r7, [r3, #865]	; 0x361
    90e0:	8833      	ldrh	r3, [r6, #0]
    90e2:	441f      	add	r7, r3
    90e4:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    90e6:	e77d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xFD();
    90e8:	f7fa fcd8 	bl	3a9c <opcode_0xFD()>
    90ec:	4607      	mov	r7, r0
				break; // SBC - Absolute , X
    90ee:	e779      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xFF();
    90f0:	f7ff f84e 	bl	8190 <opcode_0xFF()>
    90f4:	4607      	mov	r7, r0
				break; // 
    90f6:	e775      	b.n	8fe4 <loop+0x394>
				irq_handler(0x1);
    90f8:	2001      	movs	r0, #1
		uint16_t next_pc = 0;
    90fa:	2700      	movs	r7, #0
				irq_handler(0x1);
    90fc:	f7fa f944 	bl	3388 <irq_handler(unsigned char)>
				break; // BRK - Break
    9100:	e770      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x01();
    9102:	f7fb fa97 	bl	4634 <opcode_0x01()>
    9106:	4607      	mov	r7, r0
				break; // OR - Indexed Indirect X
    9108:	e76c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x03();
    910a:	f7fd fdf5 	bl	6cf8 <opcode_0x03()>
    910e:	4607      	mov	r7, r0
				break; // SLO - Indexed Indirect X
    9110:	e768      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage();
    9112:	f7f9 fd23 	bl	2b5c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    9116:	4b81      	ldr	r3, [pc, #516]	; (931c <loop+0x6cc>)
    9118:	f893 7101 	ldrb.w	r7, [r3, #257]	; 0x101
    911c:	8833      	ldrh	r3, [r6, #0]
    911e:	441f      	add	r7, r3
    9120:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    9122:	e75f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x05();
    9124:	f7fb f9ae 	bl	4484 <opcode_0x05()>
    9128:	4607      	mov	r7, r0
				break; // OR ZeroPage
    912a:	e75b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x06();
    912c:	f7fc fb46 	bl	57bc <opcode_0x06()>
    9130:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    9132:	e757      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x07();
    9134:	f7fd fd66 	bl	6c04 <opcode_0x07()>
    9138:	4607      	mov	r7, r0
				break; // SLO - ZeroPage
    913a:	e753      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x08();
    913c:	f7fa ff78 	bl	4030 <opcode_0x08()>
    9140:	4607      	mov	r7, r0
				break; // PHP - Push processor status to the stack
    9142:	e74f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x09();
    9144:	f7fb f972 	bl	442c <opcode_0x09()>
    9148:	4607      	mov	r7, r0
				break; // OR - Immediate
    914a:	e74b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x0A();
    914c:	f7fa fa12 	bl	3574 <opcode_0x0A()>
    9150:	4607      	mov	r7, r0
				break; // ASL A
    9152:	e747      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x0B();
    9154:	f7ff f888 	bl	8268 <opcode_0x0B()>
    9158:	4607      	mov	r7, r0
				break; // ANC - Immediate
    915a:	e743      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute();
    915c:	f7f9 fd52 	bl	2c04 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    9160:	4b6e      	ldr	r3, [pc, #440]	; (931c <loop+0x6cc>)
    9162:	f893 72a1 	ldrb.w	r7, [r3, #673]	; 0x2a1
    9166:	8833      	ldrh	r3, [r6, #0]
    9168:	441f      	add	r7, r3
    916a:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute
    916c:	e73a      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x0D();
    916e:	f7fb f9e5 	bl	453c <opcode_0x0D()>
    9172:	4607      	mov	r7, r0
				break; // OR - Absolute
    9174:	e736      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x0E();
    9176:	f7fc fb8f 	bl	5898 <opcode_0x0E()>
    917a:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - Absolute
    917c:	e732      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x0F();
    917e:	f7fd fe39 	bl	6df4 <opcode_0x0F()>
    9182:	4607      	mov	r7, r0
				break; // SLO - Absolute
    9184:	e72e      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x10();
    9186:	f7fd f95f 	bl	6448 <opcode_0x10()>
    918a:	4607      	mov	r7, r0
				break; // BNE - Branch on Zero Clear
    918c:	e72a      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x11();
    918e:	f7fb fa79 	bl	4684 <opcode_0x11()>
    9192:	4607      	mov	r7, r0
				break; // OR Indirect Indexed  Y
    9194:	e726      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x13();
    9196:	f7fd fded 	bl	6d74 <opcode_0x13()>
    919a:	4607      	mov	r7, r0
				break; // Indirect Indexed  Y
    919c:	e722      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    919e:	f7f9 fcf1 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    91a2:	4b5e      	ldr	r3, [pc, #376]	; (931c <loop+0x6cc>)
    91a4:	f893 7441 	ldrb.w	r7, [r3, #1089]	; 0x441
    91a8:	8833      	ldrh	r3, [r6, #0]
    91aa:	441f      	add	r7, r3
    91ac:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    91ae:	e719      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x15();
    91b0:	f7fb f99c 	bl	44ec <opcode_0x15()>
    91b4:	4607      	mov	r7, r0
				break; // OR - ZeroPage,X
    91b6:	e715      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x16();
    91b8:	f7fc fb38 	bl	582c <opcode_0x16()>
    91bc:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    91be:	e711      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x17();
    91c0:	f7fd fd5c 	bl	6c7c <opcode_0x17()>
    91c4:	4607      	mov	r7, r0
				break; // SLO - ZeroPage , X
    91c6:	e70d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x18();
    91c8:	f7fa fcca 	bl	3b60 <opcode_0x18()>
    91cc:	4607      	mov	r7, r0
				break; // CLC
    91ce:	e709      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x19();
    91d0:	f7fb fa06 	bl	45e0 <opcode_0x19()>
    91d4:	4607      	mov	r7, r0
				break; // OR - Absolute,Y
    91d6:	e705      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x1B();
    91d8:	f7fd fe8a 	bl	6ef0 <opcode_0x1B()>
    91dc:	4607      	mov	r7, r0
				break; // SLO - Absolute , Y
    91de:	e701      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    91e0:	2001      	movs	r0, #1
    91e2:	f7f9 fd2b 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    91e6:	4b4d      	ldr	r3, [pc, #308]	; (931c <loop+0x6cc>)
    91e8:	f893 75e1 	ldrb.w	r7, [r3, #1505]	; 0x5e1
    91ec:	8833      	ldrh	r3, [r6, #0]
    91ee:	441f      	add	r7, r3
    91f0:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    91f2:	e6f7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x1D();
    91f4:	f7fb f9ca 	bl	458c <opcode_0x1D()>
    91f8:	4607      	mov	r7, r0
				break; // OR - Absolute,X
    91fa:	e6f3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x1E();
    91fc:	f7fc fb82 	bl	5904 <opcode_0x1E()>
    9200:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    9202:	e6ef      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x1F();
    9204:	f7fd fe34 	bl	6e70 <opcode_0x1F()>
    9208:	4607      	mov	r7, r0
				break; // SLO - Absolute , X
    920a:	e6eb      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x20();
    920c:	f7fd faa2 	bl	6754 <opcode_0x20()>
    9210:	4607      	mov	r7, r0
				break; // JSR - Jump to Subroutine
    9212:	e6e7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x21();
    9214:	f7fb f8ba 	bl	438c <opcode_0x21()>
    9218:	4607      	mov	r7, r0
				break; // AND - Indexed Indirect
    921a:	e6e3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x23();
    921c:	f7fd ff26 	bl	706c <opcode_0x23()>
    9220:	4607      	mov	r7, r0
				break; // RLA - Indexed Indirect X
    9222:	e6df      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x24();
    9224:	f7fb fe94 	bl	4f50 <opcode_0x24()>
    9228:	4607      	mov	r7, r0
				break; // BIT - ZeroPage
    922a:	e6db      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x25();
    922c:	f7fa ffda 	bl	41e4 <opcode_0x25()>
    9230:	4607      	mov	r7, r0
				break; // AND - ZeroPage
    9232:	e6d7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x26();
    9234:	f7fc fec6 	bl	5fc4 <opcode_0x26()>
    9238:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - ZeroPage
    923a:	e6d3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x27();
    923c:	f7fd fe98 	bl	6f70 <opcode_0x27()>
    9240:	4607      	mov	r7, r0
				break; // RLA - ZeroPage
    9242:	e6cf      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x28();
    9244:	f7fa ff3a 	bl	40bc <opcode_0x28()>
    9248:	4607      	mov	r7, r0
				break; // PLP - Pop processor status from the stack
    924a:	e6cb      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x29();
    924c:	f7fa ff9e 	bl	418c <opcode_0x29()>
    9250:	4607      	mov	r7, r0
				break; // AND - Immediate
    9252:	e6c7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2A();
    9254:	f7fa fa20 	bl	3698 <opcode_0x2A()>
    9258:	4607      	mov	r7, r0
				break; // ROL A
    925a:	e6c3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2B();
    925c:	f7ff f830 	bl	82c0 <opcode_0x2B()>
    9260:	4607      	mov	r7, r0
				break; // ANC - Immediate
    9262:	e6bf      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2C();
    9264:	f7fb fea4 	bl	4fb0 <opcode_0x2C()>
    9268:	4607      	mov	r7, r0
				break; // BIT - Absolute
    926a:	e6bb      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2D();
    926c:	f7fb f816 	bl	429c <opcode_0x2D()>
    9270:	4607      	mov	r7, r0
				break; // AND - Absolute
    9272:	e6b7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2E();
    9274:	f7fc ff18 	bl	60a8 <opcode_0x2E()>
    9278:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - Absolute
    927a:	e6b3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x2F();
    927c:	f7fd ff74 	bl	7168 <opcode_0x2F()>
    9280:	4607      	mov	r7, r0
				break; // RLA - Absolute
    9282:	e6af      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x30();
    9284:	f7fd f8ca 	bl	641c <opcode_0x30()>
    9288:	4607      	mov	r7, r0
				break; // BMI - Branch on Minus (N Flag Set)
    928a:	e6ab      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x31();
    928c:	f7fb f8a6 	bl	43dc <opcode_0x31()>
    9290:	4607      	mov	r7, r0
				break; // AND - Indirect Indexed
    9292:	e6a7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x33();
    9294:	f7fd ff28 	bl	70e8 <opcode_0x33()>
    9298:	4607      	mov	r7, r0
				break; // RLA - Indirect Indexed  Y
    929a:	e6a3      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    929c:	f7f9 fc72 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    92a0:	4b1e      	ldr	r3, [pc, #120]	; (931c <loop+0x6cc>)
    92a2:	f893 7ac1 	ldrb.w	r7, [r3, #2753]	; 0xac1
    92a6:	8833      	ldrh	r3, [r6, #0]
    92a8:	441f      	add	r7, r3
    92aa:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    92ac:	e69a      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x35();
    92ae:	f7fa ffcd 	bl	424c <opcode_0x35()>
    92b2:	4607      	mov	r7, r0
				break; // AND - ZeroPage,X
    92b4:	e696      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x36();
    92b6:	f7fc febf 	bl	6038 <opcode_0x36()>
    92ba:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - ZeroPage , X
    92bc:	e692      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x37();
    92be:	f7fd fe97 	bl	6ff0 <opcode_0x37()>
    92c2:	4607      	mov	r7, r0
				break; // RLA - ZeroPage , X
    92c4:	e68e      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x38();
    92c6:	f7fa fcb3 	bl	3c30 <opcode_0x38()>
    92ca:	4607      	mov	r7, r0
				break; // SEC
    92cc:	e68a      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x39();
    92ce:	f7fb f835 	bl	433c <opcode_0x39()>
    92d2:	4607      	mov	r7, r0
				break; // AND - Absolute,Y
    92d4:	e686      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x3B();
    92d6:	f7fd ffc5 	bl	7264 <opcode_0x3B()>
    92da:	4607      	mov	r7, r0
				break; // RLA - Absolute , Y
    92dc:	e682      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    92de:	2001      	movs	r0, #1
    92e0:	f7f9 fcac 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    92e4:	4b0d      	ldr	r3, [pc, #52]	; (931c <loop+0x6cc>)
    92e6:	f893 7c61 	ldrb.w	r7, [r3, #3169]	; 0xc61
    92ea:	8833      	ldrh	r3, [r6, #0]
    92ec:	441f      	add	r7, r3
    92ee:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    92f0:	e678      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x3D();
    92f2:	f7fa fffb 	bl	42ec <opcode_0x3D()>
    92f6:	4607      	mov	r7, r0
				break; // AND - Absolute,X
    92f8:	e674      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x3E();
    92fa:	f7fc ff0d 	bl	6118 <opcode_0x3E()>
    92fe:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - Absolute , X
    9300:	e670      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x3F();
    9302:	f7fd ff6f 	bl	71e4 <opcode_0x3F()>
    9306:	4607      	mov	r7, r0
				break; // RLA - Absolute , X
    9308:	e66c      	b.n	8fe4 <loop+0x394>
    930a:	bf00      	nop
    930c:	20000874 	.word	0x20000874
    9310:	20004340 	.word	0x20004340
    9314:	2001889e 	.word	0x2001889e
    9318:	20018418 	.word	0x20018418
    931c:	20015418 	.word	0x20015418
				next_pc = opcode_0x40();
    9320:	f7fd fae0 	bl	68e4 <opcode_0x40()>
    9324:	4607      	mov	r7, r0
				break; // RTI - Return from Interrupt
    9326:	e65d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x41();
    9328:	f7fb fae2 	bl	48f0 <opcode_0x41()>
    932c:	4607      	mov	r7, r0
				break; // EOR - Indexed Indirect X
    932e:	e659      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x43();
    9330:	f7fe f84e 	bl	73d0 <opcode_0x43()>
    9334:	4607      	mov	r7, r0
				break; // SRE - Indexed Indirect X
    9336:	e655      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage();
    9338:	f7f9 fc10 	bl	2b5c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    933c:	4bbf      	ldr	r3, [pc, #764]	; (963c <loop+0x9ec>)
    933e:	f893 7e01 	ldrb.w	r7, [r3, #3585]	; 0xe01
    9342:	8833      	ldrh	r3, [r6, #0]
    9344:	441f      	add	r7, r3
    9346:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    9348:	e64c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x45();
    934a:	f7fb f9f3 	bl	4734 <opcode_0x45()>
    934e:	4607      	mov	r7, r0
				break; // EOR - ZeroPage
    9350:	e648      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x46();
    9352:	f7fc fc83 	bl	5c5c <opcode_0x46()>
    9356:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - ZeroPage
    9358:	e644      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x47();
    935a:	f7fd ffc3 	bl	72e4 <opcode_0x47()>
    935e:	4607      	mov	r7, r0
				break; // SRE - ZeroPage
    9360:	e640      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x48();
    9362:	f7fa fe89 	bl	4078 <opcode_0x48()>
    9366:	4607      	mov	r7, r0
				break; // PHA - Push Accumulator to the stack
    9368:	e63c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x49();
    936a:	f7fb f9b5 	bl	46d8 <opcode_0x49()>
    936e:	4607      	mov	r7, r0
				break; // EOR - Immediate
    9370:	e638      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4A();
    9372:	f7fa f931 	bl	35d8 <opcode_0x4A()>
    9376:	4607      	mov	r7, r0
				break; // LSR A
    9378:	e634      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4B();
    937a:	f7fe ffcd 	bl	8318 <opcode_0x4B()>
    937e:	4607      	mov	r7, r0
				break; // ALR - Immediate
    9380:	e630      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4C();
    9382:	f7fd f879 	bl	6478 <opcode_0x4C()>
    9386:	4607      	mov	r7, r0
				break; // JMP - Jump Absolute
    9388:	e62c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4D();
    938a:	f7fb fa33 	bl	47f4 <opcode_0x4D()>
    938e:	4607      	mov	r7, r0
				break; // EOR - Absolute
    9390:	e628      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4E();
    9392:	f7fc fccb 	bl	5d2c <opcode_0x4E()>
    9396:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - Absolute
    9398:	e624      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x4F();
    939a:	f7fe f88f 	bl	74bc <opcode_0x4F()>
    939e:	4607      	mov	r7, r0
				break; // SRE - Absolute
    93a0:	e620      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x50();
    93a2:	f7fd f825 	bl	63f0 <opcode_0x50()>
    93a6:	4607      	mov	r7, r0
				break; // BVC - Branch on Overflow Clear
    93a8:	e61c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x51();
    93aa:	f7fb facb 	bl	4944 <opcode_0x51()>
    93ae:	4607      	mov	r7, r0
				break; // EOR - Indirect Indexed  Y
    93b0:	e618      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x53();
    93b2:	f7fe f847 	bl	7444 <opcode_0x53()>
    93b6:	4607      	mov	r7, r0
				break; // SRE - Indirect Indexed  Y
    93b8:	e614      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    93ba:	f7f9 fbe3 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    93be:	4ba0      	ldr	r3, [pc, #640]	; (9640 <loop+0x9f0>)
    93c0:	f893 7141 	ldrb.w	r7, [r3, #321]	; 0x141
    93c4:	8833      	ldrh	r3, [r6, #0]
    93c6:	441f      	add	r7, r3
    93c8:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    93ca:	e60b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x55();
    93cc:	f7fb f9e8 	bl	47a0 <opcode_0x55()>
    93d0:	4607      	mov	r7, r0
				break; // EOR - ZeroPage,X
    93d2:	e607      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x56();
    93d4:	f7fc fc78 	bl	5cc8 <opcode_0x56()>
    93d8:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - ZeroPage , X
    93da:	e603      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x57();
    93dc:	f7fd ffbe 	bl	735c <opcode_0x57()>
    93e0:	4607      	mov	r7, r0
				break; // SRE - ZeroPage , X
    93e2:	e5ff      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x58();
    93e4:	f7fa fbf0 	bl	3bc8 <opcode_0x58()>
    93e8:	4607      	mov	r7, r0
				break; // CLI
    93ea:	e5fb      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x59();
    93ec:	f7fb fa56 	bl	489c <opcode_0x59()>
    93f0:	4607      	mov	r7, r0
				break; // EOR - Absolute,Y
    93f2:	e5f7      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x5B();
    93f4:	f7fe f8d8 	bl	75a8 <opcode_0x5B()>
    93f8:	4607      	mov	r7, r0
				break; // RE - Absolute , Y
    93fa:	e5f3      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    93fc:	2001      	movs	r0, #1
    93fe:	f7f9 fc1d 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    9402:	4b8f      	ldr	r3, [pc, #572]	; (9640 <loop+0x9f0>)
    9404:	f893 72e1 	ldrb.w	r7, [r3, #737]	; 0x2e1
    9408:	8833      	ldrh	r3, [r6, #0]
    940a:	441f      	add	r7, r3
    940c:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    940e:	e5e9      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x5D();
    9410:	f7fb fa1a 	bl	4848 <opcode_0x5D()>
    9414:	4607      	mov	r7, r0
				break; // EOR - Absolute,X
    9416:	e5e5      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x5E();
    9418:	f7fc fcb8 	bl	5d8c <opcode_0x5E()>
    941c:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - Absolute , X
    941e:	e5e1      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x5F();
    9420:	f7fe f886 	bl	7530 <opcode_0x5F()>
    9424:	4607      	mov	r7, r0
				break; // SRE - Absolute , X
    9426:	e5dd      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x60();
    9428:	f7fd fb28 	bl	6a7c <opcode_0x60()>
    942c:	4607      	mov	r7, r0
				break; // RTS - Return from Subroutine
    942e:	e5d9      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x61();
    9430:	f7fa fa4c 	bl	38cc <opcode_0x61()>
    9434:	4607      	mov	r7, r0
				break; // ADC - Indexed Indirect X
    9436:	e5d5      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x63();
    9438:	f7fe f958 	bl	76ec <opcode_0x63()>
    943c:	4607      	mov	r7, r0
				break; // RRA - Indexed Indirect X
    943e:	e5d1      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage();
    9440:	f7f9 fb8c 	bl	2b5c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    9444:	4b7e      	ldr	r3, [pc, #504]	; (9640 <loop+0x9f0>)
    9446:	f893 7481 	ldrb.w	r7, [r3, #1153]	; 0x481
    944a:	8833      	ldrh	r3, [r6, #0]
    944c:	441f      	add	r7, r3
    944e:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    9450:	e5c8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x65();
    9452:	f7fa f9d1 	bl	37f8 <opcode_0x65()>
    9456:	4607      	mov	r7, r0
				break; // ADC - ZeroPage
    9458:	e5c4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x66();
    945a:	f7fc fcc9 	bl	5df0 <opcode_0x66()>
    945e:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - ZeroPage
    9460:	e5c0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x67();
    9462:	f7fe f8dd 	bl	7620 <opcode_0x67()>
    9466:	4607      	mov	r7, r0
				break; // RRA - ZeroPage
    9468:	e5bc      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x68();
    946a:	f7fa fe53 	bl	4114 <opcode_0x68()>
    946e:	4607      	mov	r7, r0
				break; // PLA - Pop Accumulator from the stack
    9470:	e5b8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x69();
    9472:	f7fa f9ab 	bl	37cc <opcode_0x69()>
    9476:	4607      	mov	r7, r0
				break; // ADC - Immediate
    9478:	e5b4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6A();
    947a:	f7fa f8d9 	bl	3630 <opcode_0x6A()>
    947e:	4607      	mov	r7, r0
				break; // ROR A
    9480:	e5b0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6B();
    9482:	f7fe ff79 	bl	8378 <opcode_0x6B()>
    9486:	4607      	mov	r7, r0
				break; // ARR - Immediate
    9488:	e5ac      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6C();
    948a:	f7fd f8a5 	bl	65d8 <opcode_0x6C()>
    948e:	4607      	mov	r7, r0
				break; // JMP - Jump Indirect
    9490:	e5a8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6D();
    9492:	f7fa f9e1 	bl	3858 <opcode_0x6D()>
    9496:	4607      	mov	r7, r0
				break; // ADC - Absolute
    9498:	e5a4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6E();
    949a:	f7fc fd1f 	bl	5edc <opcode_0x6E()>
    949e:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - Absolute
    94a0:	e5a0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x6F();
    94a2:	f7fe f981 	bl	77a8 <opcode_0x6F()>
    94a6:	4607      	mov	r7, r0
				break; // RRA - Absolute
    94a8:	e59c      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x70();
    94aa:	f7fc ff89 	bl	63c0 <opcode_0x70()>
    94ae:	4607      	mov	r7, r0
				break; // BVS - Branch on Overflow Set
    94b0:	e598      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x71();
    94b2:	f7fa fa1d 	bl	38f0 <opcode_0x71()>
    94b6:	4607      	mov	r7, r0
				break; // ADC - Indirect Indexed  Y
    94b8:	e594      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x73();
    94ba:	f7fe f945 	bl	7748 <opcode_0x73()>
    94be:	4607      	mov	r7, r0
				break; // RRA - Indirect Indexed  Y
    94c0:	e590      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    94c2:	f7f9 fb5f 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    94c6:	4b5e      	ldr	r3, [pc, #376]	; (9640 <loop+0x9f0>)
    94c8:	f893 77c1 	ldrb.w	r7, [r3, #1985]	; 0x7c1
    94cc:	8833      	ldrh	r3, [r6, #0]
    94ce:	441f      	add	r7, r3
    94d0:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    94d2:	e587      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x75();
    94d4:	f7fa f9ae 	bl	3834 <opcode_0x75()>
    94d8:	4607      	mov	r7, r0
				break; // ADC - ZeroPage , X
    94da:	e583      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x76();
    94dc:	f7fc fcc4 	bl	5e68 <opcode_0x76()>
    94e0:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - ZeroPage , X
    94e2:	e57f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x77();
    94e4:	f7fe f8d4 	bl	7690 <opcode_0x77()>
    94e8:	4607      	mov	r7, r0
				break; // RRA - ZeroPage , X
    94ea:	e57b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x78();
    94ec:	f7fa fbba 	bl	3c64 <opcode_0x78()>
    94f0:	4607      	mov	r7, r0
				break; // SEI
    94f2:	e577      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x79();
    94f4:	f7fa f9d6 	bl	38a4 <opcode_0x79()>
    94f8:	4607      	mov	r7, r0
				break; // ADC - Absolute , Y
    94fa:	e573      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x7B();
    94fc:	f7fe f9b2 	bl	7864 <opcode_0x7B()>
    9500:	4607      	mov	r7, r0
				break; // RRA - Absolute , Y
    9502:	e56f      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    9504:	2001      	movs	r0, #1
    9506:	f7f9 fb99 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    950a:	4b4d      	ldr	r3, [pc, #308]	; (9640 <loop+0x9f0>)
    950c:	f893 7961 	ldrb.w	r7, [r3, #2401]	; 0x961
    9510:	8833      	ldrh	r3, [r6, #0]
    9512:	441f      	add	r7, r3
    9514:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    9516:	e565      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x7D();
    9518:	f7fa f9b0 	bl	387c <opcode_0x7D()>
    951c:	4607      	mov	r7, r0
				break; // ADC - Absolute , X
    951e:	e561      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x7E();
    9520:	f7fc fd16 	bl	5f50 <opcode_0x7E()>
    9524:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - Absolute , X
    9526:	e55d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x7F();
    9528:	f7fe f96c 	bl	7804 <opcode_0x7F()>
    952c:	4607      	mov	r7, r0
				break; // RRA - Absolute , X
    952e:	e559      	b.n	8fe4 <loop+0x394>
    Fetch_Immediate(1);
    9530:	2001      	movs	r0, #1
    9532:	f7f9 fb07 	bl	2b44 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    9536:	4b42      	ldr	r3, [pc, #264]	; (9640 <loop+0x9f0>)
    9538:	f893 7a31 	ldrb.w	r7, [r3, #2609]	; 0xa31
    953c:	8833      	ldrh	r3, [r6, #0]
    953e:	441f      	add	r7, r3
    9540:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    9542:	e54f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x81();
    9544:	f7fc f882 	bl	564c <opcode_0x81()>
    9548:	4607      	mov	r7, r0
				break; // STA - Indexed Indirect X
    954a:	e54b      	b.n	8fe4 <loop+0x394>
    Fetch_Immediate(1);
    954c:	2001      	movs	r0, #1
    954e:	f7f9 faf9 	bl	2b44 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    9552:	4b3b      	ldr	r3, [pc, #236]	; (9640 <loop+0x9f0>)
    9554:	f893 7a99 	ldrb.w	r7, [r3, #2713]	; 0xa99
    9558:	8833      	ldrh	r3, [r6, #0]
    955a:	441f      	add	r7, r3
    955c:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    955e:	e541      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x83();
    9560:	f7fe f9ec 	bl	793c <opcode_0x83()>
    9564:	4607      	mov	r7, r0
				break; // SAX - Indexed Indirect X
    9566:	e53d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x84();
    9568:	f7fc f8e0 	bl	572c <opcode_0x84()>
    956c:	4607      	mov	r7, r0
				break; // STY - ZeroPage
    956e:	e539      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x85();
    9570:	f7fb fffe 	bl	5570 <opcode_0x85()>
    9574:	4607      	mov	r7, r0
				break; // STA - ZeroPage
    9576:	e535      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x86();
    9578:	f7fc f890 	bl	569c <opcode_0x86()>
    957c:	4607      	mov	r7, r0
				break; // STX - ZeroPage
    957e:	e531      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x87();
    9580:	f7fe f9a0 	bl	78c4 <opcode_0x87()>
    9584:	4607      	mov	r7, r0
				break; // SAX - ZeroPage
    9586:	e52d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x88();
    9588:	f7fa fbcc 	bl	3d24 <opcode_0x88()>
    958c:	4607      	mov	r7, r0
				break; // DEY
    958e:	e529      	b.n	8fe4 <loop+0x394>
    Fetch_Immediate(1);
    9590:	2001      	movs	r0, #1
    9592:	f7f9 fad7 	bl	2b44 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    9596:	4b2a      	ldr	r3, [pc, #168]	; (9640 <loop+0x9f0>)
    9598:	f893 7c05 	ldrb.w	r7, [r3, #3077]	; 0xc05
    959c:	8833      	ldrh	r3, [r6, #0]
    959e:	441f      	add	r7, r3
    95a0:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    95a2:	e51f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x8A();
    95a4:	f7fa fccc 	bl	3f40 <opcode_0x8A()>
    95a8:	4607      	mov	r7, r0
				break; // TXA
    95aa:	e51b      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    95ac:	2001      	movs	r0, #1
    95ae:	f7f9 fac9 	bl	2b44 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    95b2:	4b23      	ldr	r3, [pc, #140]	; (9640 <loop+0x9f0>)
    95b4:	f893 7c6d 	ldrb.w	r7, [r3, #3181]	; 0xc6d
    95b8:	8833      	ldrh	r3, [r6, #0]
    95ba:	441f      	add	r7, r3
    95bc:	b2bf      	uxth	r7, r7
				break; // ANE - Immediate
    95be:	e511      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x8C();
    95c0:	f7fc f8e8 	bl	5794 <opcode_0x8C()>
    95c4:	4607      	mov	r7, r0
				break; // STY - Absolute
    95c6:	e50d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x8D();
    95c8:	f7fb fff2 	bl	55b0 <opcode_0x8D()>
    95cc:	4607      	mov	r7, r0
				break; // STA - Absolute
    95ce:	e509      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x8E();
    95d0:	f7fc f898 	bl	5704 <opcode_0x8E()>
    95d4:	4607      	mov	r7, r0
				break; // STX - Absolute
    95d6:	e505      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x8F();
    95d8:	f7fe f9c8 	bl	796c <opcode_0x8F()>
    95dc:	4607      	mov	r7, r0
				break; // SAX - Absolute
    95de:	e501      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x90();
    95e0:	f7fc feaa 	bl	6338 <opcode_0x90()>
    95e4:	4607      	mov	r7, r0
				break; // BCC - Branch on Carry Clear
    95e6:	e4fd      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x91();
    95e8:	f7fc f844 	bl	5674 <opcode_0x91()>
    95ec:	4607      	mov	r7, r0
				break; // STA - Indirect Indexed  Y
    95ee:	e4f9      	b.n	8fe4 <loop+0x394>
    Fetch_ZeroPage_Y();
    95f0:	f7f9 fae8 	bl	2bc4 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    95f4:	4b12      	ldr	r3, [pc, #72]	; (9640 <loop+0x9f0>)
    95f6:	f893 7e0d 	ldrb.w	r7, [r3, #3597]	; 0xe0d
    95fa:	8833      	ldrh	r3, [r6, #0]
    95fc:	441f      	add	r7, r3
    95fe:	b2bf      	uxth	r7, r7
				break; // SHA - ZeroPage , Y
    9600:	e4f0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x94();
    9602:	f7fc f8b3 	bl	576c <opcode_0x94()>
    9606:	4607      	mov	r7, r0
				break; // STY - ZeroPage , X
    9608:	e4ec      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x95();
    960a:	f7fb ffe5 	bl	55d8 <opcode_0x95()>
    960e:	4607      	mov	r7, r0
				break; // STA - ZeroPage , X
    9610:	e4e8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x96();
    9612:	f7fc f863 	bl	56dc <opcode_0x96()>
    9616:	4607      	mov	r7, r0
				break; // STX - ZeroPage , Y
    9618:	e4e4      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x97();
    961a:	f7fe f977 	bl	790c <opcode_0x97()>
    961e:	4607      	mov	r7, r0
				break; // SAX - ZeroPage , Y
    9620:	e4e0      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x98();
    9622:	f7fa fcd7 	bl	3fd4 <opcode_0x98()>
    9626:	4607      	mov	r7, r0
				break; // TYA
    9628:	e4dc      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x99();
    962a:	f7fb fffb 	bl	5624 <opcode_0x99()>
    962e:	4607      	mov	r7, r0
				break; // STA - Absolute , Y
    9630:	e4d8      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x9A();
    9632:	f7fa fcb3 	bl	3f9c <opcode_0x9A()>
    9636:	4607      	mov	r7, r0
				break; // TXS
    9638:	e4d4      	b.n	8fe4 <loop+0x394>
    963a:	bf00      	nop
    963c:	20015418 	.word	0x20015418
    9640:	20016418 	.word	0x20016418
    Fetch_Absolute_Y(0);
    9644:	2000      	movs	r0, #0
    9646:	f7f9 fb29 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    964a:	4bc4      	ldr	r3, [pc, #784]	; (995c <loop+0xd0c>)
    964c:	f893 7fad 	ldrb.w	r7, [r3, #4013]	; 0xfad
    9650:	8833      	ldrh	r3, [r6, #0]
    9652:	441f      	add	r7, r3
    9654:	b2bf      	uxth	r7, r7
				break; // TAS - Absolute , Y 
    9656:	e4c5      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_X(0);
    9658:	2000      	movs	r0, #0
    965a:	f7f9 faef 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    965e:	4bbf      	ldr	r3, [pc, #764]	; (995c <loop+0xd0c>)
    9660:	f893 7fe1 	ldrb.w	r7, [r3, #4065]	; 0xfe1
    9664:	8833      	ldrh	r3, [r6, #0]
    9666:	441f      	add	r7, r3
    9668:	b2bf      	uxth	r7, r7
				break; // SHY - Absolute , X
    966a:	e4bb      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0x9D();
    966c:	f7fb ffc8 	bl	5600 <opcode_0x9D()>
    9670:	4607      	mov	r7, r0
				break; // STA - Absolute , X
    9672:	e4b7      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_Y(0);
    9674:	2000      	movs	r0, #0
    9676:	f7f9 fb11 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    967a:	4bb9      	ldr	r3, [pc, #740]	; (9960 <loop+0xd10>)
    967c:	f893 7049 	ldrb.w	r7, [r3, #73]	; 0x49
    9680:	8833      	ldrh	r3, [r6, #0]
    9682:	441f      	add	r7, r3
    9684:	b2bf      	uxth	r7, r7
				break; // SHX - Absolute , Y
    9686:	e4ad      	b.n	8fe4 <loop+0x394>
    Fetch_Absolute_Y(0);
    9688:	2000      	movs	r0, #0
    968a:	f7f9 fb07 	bl	2c9c <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    968e:	4bb4      	ldr	r3, [pc, #720]	; (9960 <loop+0xd10>)
    9690:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
    9694:	8833      	ldrh	r3, [r6, #0]
    9696:	441f      	add	r7, r3
    9698:	b2bf      	uxth	r7, r7
				break; // SHA - Absolute , Y
    969a:	e4a3      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA0();
    969c:	f7fb fb8a 	bl	4db4 <opcode_0xA0()>
    96a0:	4607      	mov	r7, r0
				break; // LDY - Immediate
    96a2:	e49f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA1();
    96a4:	f7fb fa6c 	bl	4b80 <opcode_0xA1()>
    96a8:	4607      	mov	r7, r0
				break; // LDA - Indexed Indirect X
    96aa:	e49b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA2();
    96ac:	f7fb fab4 	bl	4c18 <opcode_0xA2()>
    96b0:	4607      	mov	r7, r0
				break; // LDX - Immediate
    96b2:	e497      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA3();
    96b4:	f7fe f9d2 	bl	7a5c <opcode_0xA3()>
    96b8:	4607      	mov	r7, r0
				break; // LAX - Indexed Indirect X
    96ba:	e493      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA4();
    96bc:	f7fb fba4 	bl	4e08 <opcode_0xA4()>
    96c0:	4607      	mov	r7, r0
				break; // LDY - ZeroPage
    96c2:	e48f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA5();
    96c4:	f7fb f992 	bl	49ec <opcode_0xA5()>
    96c8:	4607      	mov	r7, r0
				break; // LDA - ZeroPage
    96ca:	e48b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA6();
    96cc:	f7fb face 	bl	4c6c <opcode_0xA6()>
    96d0:	4607      	mov	r7, r0
				break; // LDX - ZeroPage
    96d2:	e487      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA7();
    96d4:	f7fe f962 	bl	799c <opcode_0xA7()>
    96d8:	4607      	mov	r7, r0
				break; // LAX - ZeroPage
    96da:	e483      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA8();
    96dc:	f7fa fbd4 	bl	3e88 <opcode_0xA8()>
    96e0:	4607      	mov	r7, r0
				break; // TAY
    96e2:	e47f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xA9();
    96e4:	f7fb f958 	bl	4998 <opcode_0xA9()>
    96e8:	4607      	mov	r7, r0
				break; // LDA - Immediate
    96ea:	e47b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xAA();
    96ec:	f7fa fb9e 	bl	3e2c <opcode_0xAA()>
    96f0:	4607      	mov	r7, r0
				break; // TAX
    96f2:	e477      	b.n	8fe4 <loop+0x394>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    96f4:	2001      	movs	r0, #1
    96f6:	f7f9 fa25 	bl	2b44 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    96fa:	4b99      	ldr	r3, [pc, #612]	; (9960 <loop+0xd10>)
    96fc:	f893 72ed 	ldrb.w	r7, [r3, #749]	; 0x2ed
    9700:	8833      	ldrh	r3, [r6, #0]
    9702:	441f      	add	r7, r3
    9704:	b2bf      	uxth	r7, r7
				break; // LAX - Immediate
    9706:	e46d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xAC();
    9708:	f7fb fbd6 	bl	4eb8 <opcode_0xAC()>
    970c:	4607      	mov	r7, r0
				break; // LDY - Absolute
    970e:	e469      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xAD();
    9710:	f7fb f9c4 	bl	4a9c <opcode_0xAD()>
    9714:	4607      	mov	r7, r0
				break; // LDA - Absolute
    9716:	e465      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xAE();
    9718:	f7fb fb00 	bl	4d1c <opcode_0xAE()>
    971c:	4607      	mov	r7, r0
				break; // LDX - Absolute
    971e:	e461      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xAF();
    9720:	f7fe f9f0 	bl	7b04 <opcode_0xAF()>
    9724:	4607      	mov	r7, r0
				break; // LAX - Absolute
    9726:	e45d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB0();
    9728:	f7fc fdf0 	bl	630c <opcode_0xB0()>
    972c:	4607      	mov	r7, r0
				break; // BCS - Branch on Carry Set
    972e:	e459      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB1();
    9730:	f7fb fa4c 	bl	4bcc <opcode_0xB1()>
    9734:	4607      	mov	r7, r0
				break; // LDA - Indirect Indexed  Y
    9736:	e455      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB3();
    9738:	f7fe f9ba 	bl	7ab0 <opcode_0xB3()>
    973c:	4607      	mov	r7, r0
				break; // LAX - Indirect Indexed  Y
    973e:	e451      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB4();
    9740:	f7fb fb94 	bl	4e6c <opcode_0xB4()>
    9744:	4607      	mov	r7, r0
				break; // LDY - ZeroPage , X
    9746:	e44d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB5();
    9748:	f7fb f982 	bl	4a50 <opcode_0xB5()>
    974c:	4607      	mov	r7, r0
				break; // LDA - ZeroPage , X
    974e:	e449      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB6();
    9750:	f7fb fabe 	bl	4cd0 <opcode_0xB6()>
    9754:	4607      	mov	r7, r0
				break; // LDX - ZeroPage , Y
    9756:	e445      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB7();
    9758:	f7fe f956 	bl	7a08 <opcode_0xB7()>
    975c:	4607      	mov	r7, r0
				break; // LAX - ZeroPage , Y
    975e:	e441      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB8();
    9760:	f7fa fa4c 	bl	3bfc <opcode_0xB8()>
    9764:	4607      	mov	r7, r0
				break; // CLV
    9766:	e43d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xB9();
    9768:	f7fb f9e4 	bl	4b34 <opcode_0xB9()>
    976c:	4607      	mov	r7, r0
				break; // LDA - Absolute , Y
    976e:	e439      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBA();
    9770:	f7fa fbb8 	bl	3ee4 <opcode_0xBA()>
    9774:	4607      	mov	r7, r0
				break; // TSX
    9776:	e435      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBB();
    9778:	f7fe fe62 	bl	8440 <opcode_0xBB()>
    977c:	4607      	mov	r7, r0
				break; // LAS - Absolute , Y
    977e:	e431      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBC();
    9780:	f7fb fbc0 	bl	4f04 <opcode_0xBC()>
    9784:	4607      	mov	r7, r0
				break; // LDY - Absolute , X
    9786:	e42d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBD();
    9788:	f7fb f9ae 	bl	4ae8 <opcode_0xBD()>
    978c:	4607      	mov	r7, r0
				break; // LDA - Absolute , X
    978e:	e429      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBE();
    9790:	f7fb faea 	bl	4d68 <opcode_0xBE()>
    9794:	4607      	mov	r7, r0
				break; // LDX - Absolute , Y
    9796:	e425      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xBF();
    9798:	f7fe f9de 	bl	7b58 <opcode_0xBF()>
    979c:	4607      	mov	r7, r0
				break; // LAX - Absolute , Y
    979e:	e421      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC0();
    97a0:	f7fb fe4c 	bl	543c <opcode_0xC0()>
    97a4:	4607      	mov	r7, r0
				break; // CPY - Immediate
    97a6:	e41d      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC1();
    97a8:	f7fb fd50 	bl	524c <opcode_0xC1()>
    97ac:	4607      	mov	r7, r0
				break; // CMP - Indexed Indirect X
    97ae:	e419      	b.n	8fe4 <loop+0x394>
    Fetch_Immediate(1);
    97b0:	2001      	movs	r0, #1
    97b2:	f7f9 f9c7 	bl	2b44 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    97b6:	4b6a      	ldr	r3, [pc, #424]	; (9960 <loop+0xd10>)
    97b8:	f893 7799 	ldrb.w	r7, [r3, #1945]	; 0x799
    97bc:	8833      	ldrh	r3, [r6, #0]
    97be:	441f      	add	r7, r3
    97c0:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    97c2:	e40f      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC3();
    97c4:	f7fe fa78 	bl	7cb8 <opcode_0xC3()>
    97c8:	4607      	mov	r7, r0
				break; // DCP - Indexed Indirect X
    97ca:	e40b      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC4();
    97cc:	f7fb fe68 	bl	54a0 <opcode_0xC4()>
    97d0:	4607      	mov	r7, r0
				break; // CPY - ZeroPage
    97d2:	e407      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC5();
    97d4:	f7fb fc44 	bl	5060 <opcode_0xC5()>
    97d8:	4607      	mov	r7, r0
				break; // CMP - ZeroPage
    97da:	e403      	b.n	8fe4 <loop+0x394>
				next_pc = opcode_0xC6();
    97dc:	f7fc f96a 	bl	5ab4 <opcode_0xC6()>
    97e0:	4607      	mov	r7, r0
				break; // DEC - ZeroPage
    97e2:	f7ff bbff 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xC7();
    97e6:	f7fe f9e1 	bl	7bac <opcode_0xC7()>
    97ea:	4607      	mov	r7, r0
				break; // DCP - ZeroPage
    97ec:	f7ff bbfa 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xC8();
    97f0:	f7fa faf0 	bl	3dd4 <opcode_0xC8()>
    97f4:	4607      	mov	r7, r0
				break; // INY
    97f6:	f7ff bbf5 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xC9();
    97fa:	f7fb fbff 	bl	4ffc <opcode_0xC9()>
    97fe:	4607      	mov	r7, r0
				break; // CMP - Immediate
    9800:	f7ff bbf0 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCA();
    9804:	f7fa fa62 	bl	3ccc <opcode_0xCA()>
    9808:	4607      	mov	r7, r0
				break; // DEX
    980a:	f7ff bbeb 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCB();
    980e:	f7fe fddf 	bl	83d0 <opcode_0xCB()>
    9812:	4607      	mov	r7, r0
				break; // SBX - Immediate
    9814:	f7ff bbe6 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCC();
    9818:	f7fb fe7c 	bl	5514 <opcode_0xCC()>
    981c:	4607      	mov	r7, r0
				break; // CPY - Absolute
    981e:	f7ff bbe1 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCD();
    9822:	f7fb fc85 	bl	5130 <opcode_0xCD()>
    9826:	4607      	mov	r7, r0
				break; // CMP - Absolute
    9828:	f7ff bbdc 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCE();
    982c:	f7fc f9b0 	bl	5b90 <opcode_0xCE()>
    9830:	4607      	mov	r7, r0
				break; // DEC - Absolute
    9832:	f7ff bbd7 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xCF();
    9836:	f7fe fac7 	bl	7dc8 <opcode_0xCF()>
    983a:	4607      	mov	r7, r0
				break; // DCP - Absolute
    983c:	f7ff bbd2 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD0();
    9840:	f7fc fda8 	bl	6394 <opcode_0xD0()>
    9844:	4607      	mov	r7, r0
				break; // BNE - Branch on Zero Clear
    9846:	f7ff bbcd 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD1();
    984a:	f7fb fd2d 	bl	52a8 <opcode_0xD1()>
    984e:	4607      	mov	r7, r0
				break; // CMP - Indirect Indexed  Y
    9850:	f7ff bbc8 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD3();
    9854:	f7fe fa74 	bl	7d40 <opcode_0xD3()>
    9858:	4607      	mov	r7, r0
				break; // DCP - Indirect Indexed  Y
    985a:	f7ff bbc3 	b.w	8fe4 <loop+0x394>
    Fetch_ZeroPage_X();
    985e:	f7f9 f991 	bl	2b84 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    9862:	4b3f      	ldr	r3, [pc, #252]	; (9960 <loop+0xd10>)
    9864:	f893 7b41 	ldrb.w	r7, [r3, #2881]	; 0xb41
    9868:	8833      	ldrh	r3, [r6, #0]
    986a:	441f      	add	r7, r3
    986c:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    986e:	f7ff bbb9 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD5();
    9872:	f7fb fc2f 	bl	50d4 <opcode_0xD5()>
    9876:	4607      	mov	r7, r0
				break; // CMP - ZeroPage , X
    9878:	f7ff bbb4 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD6();
    987c:	f7fc f956 	bl	5b2c <opcode_0xD6()>
    9880:	4607      	mov	r7, r0
				break; // DEC - ZeroPage , X
    9882:	f7ff bbaf 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD7();
    9886:	f7fe f9d3 	bl	7c30 <opcode_0xD7()>
    988a:	4607      	mov	r7, r0
				break; // DCP - ZeroPage , X
    988c:	f7ff bbaa 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD8();
    9890:	f7fa f980 	bl	3b94 <opcode_0xD8()>
    9894:	4607      	mov	r7, r0
				break; // CLD
    9896:	f7ff bba5 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xD9();
    989a:	f7fb fca7 	bl	51ec <opcode_0xD9()>
    989e:	4607      	mov	r7, r0
				break; // CMP - Absolute , Y
    98a0:	f7ff bba0 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xDB();
    98a4:	f7fe fb1a 	bl	7edc <opcode_0xDB()>
    98a8:	4607      	mov	r7, r0
				break; // DCP - Absolute , Y
    98aa:	f7ff bb9b 	b.w	8fe4 <loop+0x394>
    Fetch_Absolute_X(1);
    98ae:	2001      	movs	r0, #1
    98b0:	f7f9 f9c4 	bl	2c3c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    98b4:	4b2a      	ldr	r3, [pc, #168]	; (9960 <loop+0xd10>)
    98b6:	f893 7ce1 	ldrb.w	r7, [r3, #3297]	; 0xce1
    98ba:	8833      	ldrh	r3, [r6, #0]
    98bc:	441f      	add	r7, r3
    98be:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    98c0:	f7ff bb90 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xDD();
    98c4:	f7fb fc62 	bl	518c <opcode_0xDD()>
    98c8:	4607      	mov	r7, r0
				break; // CMP - Absolute , X
    98ca:	f7ff bb8b 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xDE();
    98ce:	f7fc f991 	bl	5bf4 <opcode_0xDE()>
    98d2:	4607      	mov	r7, r0
				break; // DEC - Absolute , X
    98d4:	f7ff bb86 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xDF();
    98d8:	f7fe faba 	bl	7e50 <opcode_0xDF()>
    98dc:	4607      	mov	r7, r0
				break; // DCP - Absolute , X
    98de:	f7ff bb81 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE0();
    98e2:	f7fb fd11 	bl	5308 <opcode_0xE0()>
    98e6:	4607      	mov	r7, r0
				break; // CPX - Immediate
    98e8:	f7ff bb7c 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE1();
    98ec:	f7fa f8fe 	bl	3aec <opcode_0xE1()>
    98f0:	4607      	mov	r7, r0
				break; // SBC - Indexed Indirect X
    98f2:	f7ff bb77 	b.w	8fe4 <loop+0x394>
    Fetch_Immediate(1);
    98f6:	2001      	movs	r0, #1
    98f8:	f7f9 f924 	bl	2b44 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    98fc:	4b18      	ldr	r3, [pc, #96]	; (9960 <loop+0xd10>)
    98fe:	f893 7e19 	ldrb.w	r7, [r3, #3609]	; 0xe19
    9902:	8833      	ldrh	r3, [r6, #0]
    9904:	441f      	add	r7, r3
    9906:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    9908:	f7ff bb6c 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE3();
    990c:	f7fe fb9e 	bl	804c <opcode_0xE3()>
    9910:	4607      	mov	r7, r0
				break; // ISC - Indexed Indirect X
    9912:	f7ff bb67 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE4();
    9916:	f7fb fd29 	bl	536c <opcode_0xE4()>
    991a:	4607      	mov	r7, r0
				break; // CPX - ZeroPage
    991c:	f7ff bb62 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE5();
    9920:	f7fa f87a 	bl	3a18 <opcode_0xE5()>
    9924:	4607      	mov	r7, r0
				break; // SBC - ZeroPage
    9926:	f7ff bb5d 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE6();
    992a:	f7fc f823 	bl	5974 <opcode_0xE6()>
    992e:	4607      	mov	r7, r0
				break; // INC - ZeroPage
    9930:	f7ff bb58 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE7();
    9934:	f7fe fb16 	bl	7f64 <opcode_0xE7()>
    9938:	4607      	mov	r7, r0
				break; // ISC - ZeroPage
    993a:	f7ff bb53 	b.w	8fe4 <loop+0x394>
				next_pc = opcode_0xE8();
    993e:	f7fa fa1d 	bl	3d7c <opcode_0xE8()>
    9942:	4607      	mov	r7, r0
				break; // INX
    9944:	f7ff bb4e 	b.w	8fe4 <loop+0x394>
				Serial.println("ERROR: Illegal instruction");
    9948:	4906      	ldr	r1, [pc, #24]	; (9964 <loop+0xd14>)
		uint16_t next_pc = 0;
    994a:	2700      	movs	r7, #0
				Serial.println("ERROR: Illegal instruction");
    994c:	4806      	ldr	r0, [pc, #24]	; (9968 <loop+0xd18>)
    994e:	f7f6 fbbd 	bl	cc <Print::println(char const*) [clone .isra.0]>
				run_mode = WAITING;
    9952:	f04f 0300 	mov.w	r3, #0
    9956:	702b      	strb	r3, [r5, #0]
        if (run_mode == SINGLE_STEP)
    9958:	f7ff bb4d 	b.w	8ff6 <loop+0x3a6>
    995c:	20016418 	.word	0x20016418
    9960:	20017418 	.word	0x20017418
    9964:	20001040 	.word	0x20001040
    9968:	20004340 	.word	0x20004340

0000996c <_GLOBAL__sub_I_opcode_info>:
    }
}
    996c:	b538      	push	{r3, r4, r5, lr}
    996e:	4c12      	ldr	r4, [pc, #72]	; (99b8 <_GLOBAL__sub_I_opcode_info+0x4c>)
    9970:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    9974:	2100      	movs	r1, #0
    9976:	4620      	mov	r0, r4
    9978:	f000 f8d0 	bl	9b1c <String::String(char const*)>
    997c:	2100      	movs	r1, #0
    997e:	f104 0010 	add.w	r0, r4, #16
    9982:	f000 f8cb 	bl	9b1c <String::String(char const*)>
    9986:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    998a:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    998c:	2100      	movs	r1, #0
    998e:	f000 f8c5 	bl	9b1c <String::String(char const*)>
OpDecoder opcode_info[256];
    9992:	42ac      	cmp	r4, r5
    9994:	d1ee      	bne.n	9974 <_GLOBAL__sub_I_opcode_info+0x8>
    9996:	4a09      	ldr	r2, [pc, #36]	; (99bc <_GLOBAL__sub_I_opcode_info+0x50>)
    9998:	2000      	movs	r0, #0
    999a:	4909      	ldr	r1, [pc, #36]	; (99c0 <_GLOBAL__sub_I_opcode_info+0x54>)
    999c:	f002 f89c 	bl	bad8 <__aeabi_atexit>
String last_command = "";
    99a0:	4908      	ldr	r1, [pc, #32]	; (99c4 <_GLOBAL__sub_I_opcode_info+0x58>)
    99a2:	4809      	ldr	r0, [pc, #36]	; (99c8 <_GLOBAL__sub_I_opcode_info+0x5c>)
    99a4:	f000 f8ba 	bl	9b1c <String::String(char const*)>
    99a8:	4a04      	ldr	r2, [pc, #16]	; (99bc <_GLOBAL__sub_I_opcode_info+0x50>)
    99aa:	4908      	ldr	r1, [pc, #32]	; (99cc <_GLOBAL__sub_I_opcode_info+0x60>)
    99ac:	4806      	ldr	r0, [pc, #24]	; (99c8 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    99ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    99b2:	f002 b891 	b.w	bad8 <__aeabi_atexit>
    99b6:	bf00      	nop
    99b8:	20015418 	.word	0x20015418
    99bc:	20004358 	.word	0x20004358
    99c0:	0000009d 	.word	0x0000009d
    99c4:	2000047c 	.word	0x2000047c
    99c8:	200153f0 	.word	0x200153f0
    99cc:	00009aa5 	.word	0x00009aa5

000099d0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    99d0:	4608      	mov	r0, r1
    99d2:	f001 bc95 	b.w	b300 <usb_serial_putchar>
    99d6:	bf00      	nop

000099d8 <Print::print(String const&)>:
{
    99d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99dc:	688c      	ldr	r4, [r1, #8]
    99de:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    99e0:	b1dc      	cbz	r4, 9a1a <Print::print(String const&)+0x42>
	unsigned int index = 0;
    99e2:	2500      	movs	r5, #0
    99e4:	4688      	mov	r8, r1
    99e6:	4606      	mov	r6, r0
	size_t count = 0;
    99e8:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    99ea:	462b      	mov	r3, r5
    99ec:	2221      	movs	r2, #33	; 0x21
    99ee:	a901      	add	r1, sp, #4
    99f0:	4640      	mov	r0, r8
    99f2:	f000 f961 	bl	9cb8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    99f6:	2c20      	cmp	r4, #32
    99f8:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    99fa:	6833      	ldr	r3, [r6, #0]
    99fc:	bf28      	it	cs
    99fe:	2220      	movcs	r2, #32
    9a00:	a901      	add	r1, sp, #4
    9a02:	4630      	mov	r0, r6
    9a04:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    9a06:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    9a08:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    9a0a:	4798      	blx	r3
    9a0c:	4407      	add	r7, r0
	while (len > 0) {
    9a0e:	2c00      	cmp	r4, #0
    9a10:	d1eb      	bne.n	99ea <Print::print(String const&)+0x12>
}
    9a12:	4638      	mov	r0, r7
    9a14:	b00a      	add	sp, #40	; 0x28
    9a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    9a1a:	4627      	mov	r7, r4
}
    9a1c:	4638      	mov	r0, r7
    9a1e:	b00a      	add	sp, #40	; 0x28
    9a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009a24 <Print::println()>:
{
    9a24:	b500      	push	{lr}
	return write(buf, 2);
    9a26:	6803      	ldr	r3, [r0, #0]
{
    9a28:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    9a2a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    9a2e:	2202      	movs	r2, #2
    9a30:	a901      	add	r1, sp, #4
    9a32:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    9a34:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    9a38:	4798      	blx	r3
}
    9a3a:	b003      	add	sp, #12
    9a3c:	f85d fb04 	ldr.w	pc, [sp], #4

00009a40 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9a40:	4b05      	ldr	r3, [pc, #20]	; (9a58 <_write+0x18>)
    9a42:	2802      	cmp	r0, #2
    9a44:	bf88      	it	hi
    9a46:	4603      	movhi	r3, r0
{
    9a48:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9a4a:	681c      	ldr	r4, [r3, #0]
    9a4c:	4618      	mov	r0, r3
    9a4e:	6863      	ldr	r3, [r4, #4]
}
    9a50:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9a54:	4718      	bx	r3
    9a56:	bf00      	nop
    9a58:	20004340 	.word	0x20004340

00009a5c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    9a5c:	f001 bc40 	b.w	b2e0 <usb_serial_getchar>

00009a60 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    9a60:	f001 bbd8 	b.w	b214 <usb_serial_peekchar>

00009a64 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    9a64:	6081      	str	r1, [r0, #8]
}
    9a66:	4770      	bx	lr

00009a68 <String::String(String const&)>:
String::String(const String &value)
    9a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    9a6a:	4288      	cmp	r0, r1
	buffer = NULL;
    9a6c:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    9a70:	4604      	mov	r4, r0
	len = 0;
    9a72:	6085      	str	r5, [r0, #8]
	flags = 0;
    9a74:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    9a76:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    9a7a:	d002      	beq.n	9a82 <String::String(String const&)+0x1a>
    9a7c:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    9a7e:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    9a80:	b90e      	cbnz	r6, 9a86 <String::String(String const&)+0x1e>
}
    9a82:	4620      	mov	r0, r4
    9a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9a86:	1c70      	adds	r0, r6, #1
    9a88:	f002 f830 	bl	baec <malloc>
	if (newbuffer) {
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d0f8      	beq.n	9a82 <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    9a90:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    9a92:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    9a94:	6020      	str	r0, [r4, #0]
	len = length;
    9a96:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    9a9a:	f003 fb2f 	bl	d0fc <strcpy>
}
    9a9e:	4620      	mov	r0, r4
    9aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9aa2:	bf00      	nop

00009aa4 <String::~String()>:
String::~String()
    9aa4:	b510      	push	{r4, lr}
    9aa6:	4604      	mov	r4, r0
	free(buffer);
    9aa8:	6800      	ldr	r0, [r0, #0]
    9aaa:	f002 f827 	bl	bafc <free>
}
    9aae:	4620      	mov	r0, r4
    9ab0:	bd10      	pop	{r4, pc}
    9ab2:	bf00      	nop

00009ab4 <String::copy(char const*, unsigned int)>:
{
    9ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ab6:	4604      	mov	r4, r0
	if (length == 0) {
    9ab8:	4615      	mov	r5, r2
    9aba:	b932      	cbnz	r2, 9aca <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    9abc:	6803      	ldr	r3, [r0, #0]
    9abe:	b103      	cbz	r3, 9ac2 <String::copy(char const*, unsigned int)+0xe>
    9ac0:	701a      	strb	r2, [r3, #0]
		len = 0;
    9ac2:	2300      	movs	r3, #0
}
    9ac4:	4620      	mov	r0, r4
		len = 0;
    9ac6:	60a3      	str	r3, [r4, #8]
}
    9ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    9aca:	6843      	ldr	r3, [r0, #4]
    9acc:	460e      	mov	r6, r1
    9ace:	429a      	cmp	r2, r3
    9ad0:	d91c      	bls.n	9b0c <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9ad2:	1c51      	adds	r1, r2, #1
    9ad4:	6800      	ldr	r0, [r0, #0]
    9ad6:	f002 fad5 	bl	c084 <realloc>
	if (newbuffer) {
    9ada:	4607      	mov	r7, r0
    9adc:	b160      	cbz	r0, 9af8 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    9ade:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    9ae0:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    9ae4:	b90b      	cbnz	r3, 9aea <String::copy(char const*, unsigned int)+0x36>
    9ae6:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    9ae8:	6827      	ldr	r7, [r4, #0]
    9aea:	4631      	mov	r1, r6
    9aec:	4638      	mov	r0, r7
	len = length;
    9aee:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    9af0:	f003 fb04 	bl	d0fc <strcpy>
}
    9af4:	4620      	mov	r0, r4
    9af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    9af8:	6820      	ldr	r0, [r4, #0]
    9afa:	b110      	cbz	r0, 9b02 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    9afc:	f001 fffe 	bl	bafc <free>
			buffer = NULL;
    9b00:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    9b02:	2300      	movs	r3, #0
}
    9b04:	4620      	mov	r0, r4
		len = capacity = 0;
    9b06:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    9b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    9b0c:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    9b0e:	4631      	mov	r1, r6
	len = length;
    9b10:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    9b12:	4638      	mov	r0, r7
    9b14:	f003 faf2 	bl	d0fc <strcpy>
	return *this;
    9b18:	e7ec      	b.n	9af4 <String::copy(char const*, unsigned int)+0x40>
    9b1a:	bf00      	nop

00009b1c <String::String(char const*)>:
String::String(const char *cstr)
    9b1c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    9b1e:	2300      	movs	r3, #0
String::String(const char *cstr)
    9b20:	4604      	mov	r4, r0
	capacity = 0;
    9b22:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    9b26:	6083      	str	r3, [r0, #8]
	flags = 0;
    9b28:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    9b2a:	b141      	cbz	r1, 9b3e <String::String(char const*)+0x22>
    9b2c:	460d      	mov	r5, r1
    9b2e:	4608      	mov	r0, r1
    9b30:	f003 fb46 	bl	d1c0 <strlen>
    9b34:	4602      	mov	r2, r0
    9b36:	4629      	mov	r1, r5
    9b38:	4620      	mov	r0, r4
    9b3a:	f7ff ffbb 	bl	9ab4 <String::copy(char const*, unsigned int)>
}
    9b3e:	4620      	mov	r0, r4
    9b40:	bd38      	pop	{r3, r4, r5, pc}
    9b42:	bf00      	nop

00009b44 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    9b44:	4281      	cmp	r1, r0
    9b46:	d003      	beq.n	9b50 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    9b48:	688a      	ldr	r2, [r1, #8]
    9b4a:	6809      	ldr	r1, [r1, #0]
    9b4c:	f7ff bfb2 	b.w	9ab4 <String::copy(char const*, unsigned int)>
}
    9b50:	4770      	bx	lr
    9b52:	bf00      	nop

00009b54 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    9b54:	4288      	cmp	r0, r1
{
    9b56:	b538      	push	{r3, r4, r5, lr}
    9b58:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    9b5a:	d00e      	beq.n	9b7a <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    9b5c:	6800      	ldr	r0, [r0, #0]
    9b5e:	460c      	mov	r4, r1
    9b60:	b108      	cbz	r0, 9b66 <String::operator=(String&&)+0x12>
    9b62:	f001 ffcb 	bl	bafc <free>
	len = rhs.len;
    9b66:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    9b68:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    9b6a:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    9b6e:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    9b70:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    9b74:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    9b78:	60a3      	str	r3, [r4, #8]
}
    9b7a:	4628      	mov	r0, r5
    9b7c:	bd38      	pop	{r3, r4, r5, pc}
    9b7e:	bf00      	nop

00009b80 <String::operator=(char const*)>:
{
    9b80:	b538      	push	{r3, r4, r5, lr}
    9b82:	4605      	mov	r5, r0
	if (cstr) {
    9b84:	460c      	mov	r4, r1
    9b86:	b149      	cbz	r1, 9b9c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    9b88:	4608      	mov	r0, r1
    9b8a:	f003 fb19 	bl	d1c0 <strlen>
    9b8e:	4621      	mov	r1, r4
    9b90:	4602      	mov	r2, r0
    9b92:	4628      	mov	r0, r5
    9b94:	f7ff ff8e 	bl	9ab4 <String::copy(char const*, unsigned int)>
}
    9b98:	4628      	mov	r0, r5
    9b9a:	bd38      	pop	{r3, r4, r5, pc}
    9b9c:	4628      	mov	r0, r5
		len = 0;
    9b9e:	60a9      	str	r1, [r5, #8]
}
    9ba0:	bd38      	pop	{r3, r4, r5, pc}
    9ba2:	bf00      	nop

00009ba4 <String::append(char const*, unsigned int)>:
{
    9ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ba8:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9baa:	6800      	ldr	r0, [r0, #0]
{
    9bac:	460d      	mov	r5, r1
    9bae:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9bb0:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    9bb2:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9bb4:	d809      	bhi.n	9bca <String::append(char const*, unsigned int)+0x26>
    9bb6:	18c2      	adds	r2, r0, r3
    9bb8:	4291      	cmp	r1, r2
    9bba:	d206      	bcs.n	9bca <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    9bbc:	1a0f      	subs	r7, r1, r0
		self = true;
    9bbe:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    9bc2:	b936      	cbnz	r6, 9bd2 <String::append(char const*, unsigned int)+0x2e>
}
    9bc4:	4620      	mov	r0, r4
    9bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    9bca:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    9bce:	2e00      	cmp	r6, #0
    9bd0:	d0f8      	beq.n	9bc4 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    9bd2:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    9bd6:	6862      	ldr	r2, [r4, #4]
    9bd8:	4590      	cmp	r8, r2
    9bda:	d90c      	bls.n	9bf6 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9bdc:	f108 0101 	add.w	r1, r8, #1
    9be0:	f002 fa50 	bl	c084 <realloc>
	if (newbuffer) {
    9be4:	2800      	cmp	r0, #0
    9be6:	d0ed      	beq.n	9bc4 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    9be8:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    9bea:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    9bee:	b913      	cbnz	r3, 9bf6 <String::append(char const*, unsigned int)+0x52>
    9bf0:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    9bf2:	6820      	ldr	r0, [r4, #0]
    9bf4:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    9bf6:	f1b9 0f00 	cmp.w	r9, #0
    9bfa:	d108      	bne.n	9c0e <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    9bfc:	4629      	mov	r1, r5
    9bfe:	4418      	add	r0, r3
    9c00:	f003 fa7c 	bl	d0fc <strcpy>
}
    9c04:	4620      	mov	r0, r4
	len = newlen;
    9c06:	f8c4 8008 	str.w	r8, [r4, #8]
}
    9c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    9c0e:	4632      	mov	r2, r6
    9c10:	19c1      	adds	r1, r0, r7
    9c12:	4418      	add	r0, r3
    9c14:	f000 f9ca 	bl	9fac <memcpy>
		buffer[newlen] = 0;
    9c18:	6823      	ldr	r3, [r4, #0]
    9c1a:	2200      	movs	r2, #0
    9c1c:	f803 2008 	strb.w	r2, [r3, r8]
    9c20:	e7f0      	b.n	9c04 <String::append(char const*, unsigned int)+0x60>
    9c22:	bf00      	nop

00009c24 <String::append(char)>:
{
    9c24:	b510      	push	{r4, lr}
    9c26:	b082      	sub	sp, #8
	buf[1] = 0;
    9c28:	2300      	movs	r3, #0
{
    9c2a:	4604      	mov	r4, r0
	append(buf, 1);
    9c2c:	2201      	movs	r2, #1
	buf[0] = c;
    9c2e:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    9c32:	a901      	add	r1, sp, #4
	buf[1] = 0;
    9c34:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    9c38:	f7ff ffb4 	bl	9ba4 <String::append(char const*, unsigned int)>
}
    9c3c:	4620      	mov	r0, r4
    9c3e:	b002      	add	sp, #8
    9c40:	bd10      	pop	{r4, pc}
    9c42:	bf00      	nop

00009c44 <operator+(StringSumHelper const&, String const&)>:
{
    9c44:	b510      	push	{r4, lr}
    9c46:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    9c48:	688a      	ldr	r2, [r1, #8]
    9c4a:	6809      	ldr	r1, [r1, #0]
    9c4c:	f7ff ffaa 	bl	9ba4 <String::append(char const*, unsigned int)>
}
    9c50:	4620      	mov	r0, r4
    9c52:	bd10      	pop	{r4, pc}

00009c54 <operator+(StringSumHelper const&, char const*)>:
{
    9c54:	b538      	push	{r3, r4, r5, lr}
    9c56:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    9c58:	b141      	cbz	r1, 9c6c <operator+(StringSumHelper const&, char const*)+0x18>
    9c5a:	460c      	mov	r4, r1
    9c5c:	4608      	mov	r0, r1
    9c5e:	f003 faaf 	bl	d1c0 <strlen>
    9c62:	4602      	mov	r2, r0
    9c64:	4621      	mov	r1, r4
    9c66:	4628      	mov	r0, r5
    9c68:	f7ff ff9c 	bl	9ba4 <String::append(char const*, unsigned int)>
}
    9c6c:	4628      	mov	r0, r5
    9c6e:	bd38      	pop	{r3, r4, r5, pc}

00009c70 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9c70:	6882      	ldr	r2, [r0, #8]
{
    9c72:	b508      	push	{r3, lr}
    9c74:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9c76:	b13a      	cbz	r2, 9c88 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    9c78:	b161      	cbz	r1, 9c94 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    9c7a:	6800      	ldr	r0, [r0, #0]
    9c7c:	f003 f8d4 	bl	ce28 <strcmp>
    9c80:	fab0 f080 	clz	r0, r0
    9c84:	0940      	lsrs	r0, r0, #5
}
    9c86:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9c88:	b131      	cbz	r1, 9c98 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    9c8a:	7818      	ldrb	r0, [r3, #0]
    9c8c:	fab0 f080 	clz	r0, r0
    9c90:	0940      	lsrs	r0, r0, #5
}
    9c92:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    9c94:	6803      	ldr	r3, [r0, #0]
    9c96:	e7f8      	b.n	9c8a <String::equals(char const*) const+0x1a>
    9c98:	2001      	movs	r0, #1
}
    9c9a:	bd08      	pop	{r3, pc}

00009c9c <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    9c9c:	6883      	ldr	r3, [r0, #8]
    9c9e:	428b      	cmp	r3, r1
    9ca0:	d903      	bls.n	9caa <String::operator[](unsigned int)+0xe>
    9ca2:	6800      	ldr	r0, [r0, #0]
    9ca4:	b108      	cbz	r0, 9caa <String::operator[](unsigned int)+0xe>
	return buffer[index];
    9ca6:	4408      	add	r0, r1
}
    9ca8:	4770      	bx	lr
		dummy_writable_char = 0;
    9caa:	4b02      	ldr	r3, [pc, #8]	; (9cb4 <String::operator[](unsigned int)+0x18>)
    9cac:	2200      	movs	r2, #0
		return dummy_writable_char;
    9cae:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    9cb0:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    9cb2:	4770      	bx	lr
    9cb4:	20018897 	.word	0x20018897

00009cb8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    9cb8:	b1c2      	cbz	r2, 9cec <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    9cba:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    9cbc:	fab1 f681 	clz	r6, r1
    9cc0:	460c      	mov	r4, r1
    9cc2:	0976      	lsrs	r6, r6, #5
    9cc4:	b119      	cbz	r1, 9cce <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    9cc6:	6885      	ldr	r5, [r0, #8]
    9cc8:	429d      	cmp	r5, r3
    9cca:	d801      	bhi.n	9cd0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    9ccc:	700e      	strb	r6, [r1, #0]
}
    9cce:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    9cd0:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    9cd2:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    9cd6:	6801      	ldr	r1, [r0, #0]
    9cd8:	4620      	mov	r0, r4
    9cda:	4565      	cmp	r5, ip
    9cdc:	4419      	add	r1, r3
    9cde:	bf28      	it	cs
    9ce0:	4665      	movcs	r5, ip
    9ce2:	462a      	mov	r2, r5
    9ce4:	f002 ffc2 	bl	cc6c <strncpy>
	buf[n] = 0;
    9ce8:	5566      	strb	r6, [r4, r5]
}
    9cea:	bd70      	pop	{r4, r5, r6, pc}
    9cec:	4770      	bx	lr
    9cee:	bf00      	nop

00009cf0 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    9cf0:	6883      	ldr	r3, [r0, #8]
    9cf2:	b13b      	cbz	r3, 9d04 <String::indexOf(char) const+0x14>
{
    9cf4:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    9cf6:	6804      	ldr	r4, [r0, #0]
    9cf8:	4620      	mov	r0, r4
    9cfa:	f002 ff51 	bl	cba0 <strchr>
	if (temp == NULL) return -1;
    9cfe:	b120      	cbz	r0, 9d0a <String::indexOf(char) const+0x1a>
	return temp - buffer;
    9d00:	1b00      	subs	r0, r0, r4
}
    9d02:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    9d04:	f04f 30ff 	mov.w	r0, #4294967295
}
    9d08:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    9d0a:	f04f 30ff 	mov.w	r0, #4294967295
}
    9d0e:	bd10      	pop	{r4, pc}

00009d10 <String::substring(unsigned int) const>:
{
    9d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    9d14:	688f      	ldr	r7, [r1, #8]
{
    9d16:	460e      	mov	r6, r1
    9d18:	4604      	mov	r4, r0
	if (left > right) {
    9d1a:	4297      	cmp	r7, r2
    9d1c:	d202      	bcs.n	9d24 <String::substring(unsigned int) const+0x14>
    9d1e:	4613      	mov	r3, r2
    9d20:	463a      	mov	r2, r7
    9d22:	461f      	mov	r7, r3
	buffer = NULL;
    9d24:	2300      	movs	r3, #0
	len = 0;
    9d26:	60a3      	str	r3, [r4, #8]
	flags = 0;
    9d28:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    9d2a:	68b0      	ldr	r0, [r6, #8]
    9d2c:	4290      	cmp	r0, r2
	capacity = 0;
    9d2e:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    9d32:	d314      	bcc.n	9d5e <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    9d34:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    9d36:	6831      	ldr	r1, [r6, #0]
    9d38:	bf28      	it	cs
    9d3a:	4607      	movcs	r7, r0
    9d3c:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    9d40:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    9d42:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    9d44:	189d      	adds	r5, r3, r2
    9d46:	d00d      	beq.n	9d64 <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    9d48:	4628      	mov	r0, r5
    9d4a:	f003 fa39 	bl	d1c0 <strlen>
    9d4e:	4629      	mov	r1, r5
    9d50:	4602      	mov	r2, r0
    9d52:	4620      	mov	r0, r4
    9d54:	f7ff feae 	bl	9ab4 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    9d58:	6833      	ldr	r3, [r6, #0]
    9d5a:	f803 8007 	strb.w	r8, [r3, r7]
}
    9d5e:	4620      	mov	r0, r4
    9d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    9d64:	60a5      	str	r5, [r4, #8]
    9d66:	e7f8      	b.n	9d5a <String::substring(unsigned int) const+0x4a>

00009d68 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    9d68:	429a      	cmp	r2, r3
{
    9d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d6e:	4604      	mov	r4, r0
    9d70:	460e      	mov	r6, r1
	if (left > right) {
    9d72:	d902      	bls.n	9d7a <String::substring(unsigned int, unsigned int) const+0x12>
    9d74:	4611      	mov	r1, r2
    9d76:	461a      	mov	r2, r3
    9d78:	460b      	mov	r3, r1
	buffer = NULL;
    9d7a:	2000      	movs	r0, #0
	len = 0;
    9d7c:	60a0      	str	r0, [r4, #8]
	flags = 0;
    9d7e:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    9d80:	68b7      	ldr	r7, [r6, #8]
    9d82:	4297      	cmp	r7, r2
	capacity = 0;
    9d84:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    9d88:	d314      	bcc.n	9db4 <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    9d8a:	429f      	cmp	r7, r3
    9d8c:	bf28      	it	cs
    9d8e:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    9d90:	6833      	ldr	r3, [r6, #0]
    9d92:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    9d96:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    9d98:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    9d9a:	189d      	adds	r5, r3, r2
    9d9c:	d00d      	beq.n	9dba <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    9d9e:	4628      	mov	r0, r5
    9da0:	f003 fa0e 	bl	d1c0 <strlen>
    9da4:	4629      	mov	r1, r5
    9da6:	4602      	mov	r2, r0
    9da8:	4620      	mov	r0, r4
    9daa:	f7ff fe83 	bl	9ab4 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    9dae:	6833      	ldr	r3, [r6, #0]
    9db0:	f803 8007 	strb.w	r8, [r3, r7]
}
    9db4:	4620      	mov	r0, r4
    9db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    9dba:	60a5      	str	r5, [r4, #8]
    9dbc:	e7f8      	b.n	9db0 <String::substring(unsigned int, unsigned int) const+0x48>
    9dbe:	bf00      	nop

00009dc0 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    9dc0:	b510      	push	{r4, lr}
    9dc2:	4604      	mov	r4, r0
    9dc4:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    9dc6:	68a1      	ldr	r1, [r4, #8]
    9dc8:	b10a      	cbz	r2, 9dce <String::remove(unsigned int, unsigned int)+0xe>
    9dca:	4281      	cmp	r1, r0
    9dcc:	d801      	bhi.n	9dd2 <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    9dce:	4620      	mov	r0, r4
    9dd0:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    9dd2:	eb00 0c02 	add.w	ip, r0, r2
    9dd6:	4561      	cmp	r1, ip
    9dd8:	d30e      	bcc.n	9df8 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    9dda:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    9ddc:	4661      	mov	r1, ip
    9dde:	1a1a      	subs	r2, r3, r0
		len = len - count;
    9de0:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    9de2:	6823      	ldr	r3, [r4, #0]
    9de4:	4419      	add	r1, r3
    9de6:	4418      	add	r0, r3
    9de8:	f002 fe0c 	bl	ca04 <memmove>
		buffer[len] = 0;
    9dec:	6822      	ldr	r2, [r4, #0]
    9dee:	68a3      	ldr	r3, [r4, #8]
    9df0:	2100      	movs	r1, #0
}
    9df2:	4620      	mov	r0, r4
		buffer[len] = 0;
    9df4:	54d1      	strb	r1, [r2, r3]
}
    9df6:	bd10      	pop	{r4, pc}
    9df8:	4603      	mov	r3, r0
    9dfa:	2200      	movs	r2, #0
    9dfc:	e7f0      	b.n	9de0 <String::remove(unsigned int, unsigned int)+0x20>
    9dfe:	bf00      	nop

00009e00 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    9e00:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    9e02:	6804      	ldr	r4, [r0, #0]
{
    9e04:	4605      	mov	r5, r0
	if (!buffer) return *this;
    9e06:	b144      	cbz	r4, 9e1a <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    9e08:	7820      	ldrb	r0, [r4, #0]
    9e0a:	b130      	cbz	r0, 9e1a <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    9e0c:	f002 fca6 	bl	c75c <tolower>
    9e10:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    9e12:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    9e16:	2800      	cmp	r0, #0
    9e18:	d1f8      	bne.n	9e0c <String::toLowerCase()+0xc>
	}
	return *this;
}
    9e1a:	4628      	mov	r0, r5
    9e1c:	bd38      	pop	{r3, r4, r5, pc}
    9e1e:	bf00      	nop

00009e20 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    9e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    9e24:	6807      	ldr	r7, [r0, #0]
{
    9e26:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    9e28:	b1e7      	cbz	r7, 9e64 <String::trim()+0x44>
    9e2a:	6884      	ldr	r4, [r0, #8]
    9e2c:	b1d4      	cbz	r4, 9e64 <String::trim()+0x44>
    9e2e:	46b8      	mov	r8, r7
    9e30:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    9e32:	f818 0b01 	ldrb.w	r0, [r8], #1
    9e36:	f002 fc89 	bl	c74c <isspace>
    9e3a:	2800      	cmp	r0, #0
    9e3c:	d1f8      	bne.n	9e30 <String::trim()+0x10>
	char *end = buffer + len - 1;
    9e3e:	3c01      	subs	r4, #1
    9e40:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    9e42:	e002      	b.n	9e4a <String::trim()+0x2a>
    9e44:	42a5      	cmp	r5, r4
    9e46:	d805      	bhi.n	9e54 <String::trim()+0x34>
    9e48:	3c01      	subs	r4, #1
    9e4a:	7820      	ldrb	r0, [r4, #0]
    9e4c:	f002 fc7e 	bl	c74c <isspace>
    9e50:	2800      	cmp	r0, #0
    9e52:	d1f7      	bne.n	9e44 <String::trim()+0x24>
	len = end + 1 - begin;
    9e54:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    9e56:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    9e58:	eba2 0205 	sub.w	r2, r2, r5
    9e5c:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    9e5e:	d304      	bcc.n	9e6a <String::trim()+0x4a>
	buffer[len] = 0;
    9e60:	2300      	movs	r3, #0
    9e62:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    9e64:	4630      	mov	r0, r6
    9e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    9e6a:	4638      	mov	r0, r7
    9e6c:	4629      	mov	r1, r5
    9e6e:	f000 f89d 	bl	9fac <memcpy>
	buffer[len] = 0;
    9e72:	6837      	ldr	r7, [r6, #0]
    9e74:	68b2      	ldr	r2, [r6, #8]
    9e76:	e7f3      	b.n	9e60 <String::trim()+0x40>

00009e78 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    9e78:	6800      	ldr	r0, [r0, #0]
    9e7a:	b108      	cbz	r0, 9e80 <String::toInt() const+0x8>
    9e7c:	f001 be32 	b.w	bae4 <atol>
	return 0;
}
    9e80:	4770      	bx	lr
    9e82:	bf00      	nop

00009e84 <delay>:
	if (msec == 0) return;
    9e84:	b900      	cbnz	r0, 9e88 <delay+0x4>
    9e86:	4770      	bx	lr
{
    9e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9e8c:	2101      	movs	r1, #1
    9e8e:	4681      	mov	r9, r0
    9e90:	4c21      	ldr	r4, [pc, #132]	; (9f18 <delay+0x94>)
    9e92:	4d22      	ldr	r5, [pc, #136]	; (9f1c <delay+0x98>)
    9e94:	4e22      	ldr	r6, [pc, #136]	; (9f20 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9e96:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    9e9a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9e9c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9e9e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	d1f7      	bne.n	9e96 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9ea6:	491f      	ldr	r1, [pc, #124]	; (9f24 <delay+0xa0>)
    9ea8:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    9eaa:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9eae:	f8df a078 	ldr.w	sl, [pc, #120]	; 9f28 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    9eb2:	1a1b      	subs	r3, r3, r0
    9eb4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    9eb6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9eba:	f8da 2000 	ldr.w	r2, [sl]
    9ebe:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    9ec2:	455a      	cmp	r2, fp
    9ec4:	bf94      	ite	ls
    9ec6:	4490      	addls	r8, r2
    9ec8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9eca:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    9ece:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9ed0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9ed2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d1f7      	bne.n	9eca <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9eda:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9edc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    9ee0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    9ee2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9ee6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    9eea:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    9eee:	bf94      	ite	ls
    9ef0:	4462      	addls	r2, ip
    9ef2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    9ef6:	eba2 0208 	sub.w	r2, r2, r8
    9efa:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    9efe:	d306      	bcc.n	9f0e <delay+0x8a>
			if (--msec == 0) return;
    9f00:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    9f04:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    9f08:	d1df      	bne.n	9eca <delay+0x46>
}
    9f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    9f0e:	f001 fa8b 	bl	b428 <yield>
		while ((micros() - start) >= 1000) {
    9f12:	4904      	ldr	r1, [pc, #16]	; (9f24 <delay+0xa0>)
    9f14:	e7d9      	b.n	9eca <delay+0x46>
    9f16:	bf00      	nop
    9f18:	20018870 	.word	0x20018870
    9f1c:	2001886c 	.word	0x2001886c
    9f20:	20018868 	.word	0x20018868
    9f24:	e0001000 	.word	0xe0001000
    9f28:	20018864 	.word	0x20018864

00009f2c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9f2c:	2836      	cmp	r0, #54	; 0x36
    9f2e:	d829      	bhi.n	9f84 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    9f30:	4b16      	ldr	r3, [pc, #88]	; (9f8c <pinMode+0x60>)
    9f32:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9f34:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    9f36:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9f3a:	589a      	ldr	r2, [r3, r2]
{
    9f3c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9f3e:	6853      	ldr	r3, [r2, #4]
    9f40:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9f42:	d00e      	beq.n	9f62 <pinMode+0x36>
    9f44:	2904      	cmp	r1, #4
    9f46:	d00c      	beq.n	9f62 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9f48:	ea23 0304 	bic.w	r3, r3, r4
    9f4c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9f4e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    9f50:	b1a9      	cbz	r1, 9f7e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    9f52:	2902      	cmp	r1, #2
    9f54:	d017      	beq.n	9f86 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9f56:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9f58:	bf0c      	ite	eq
    9f5a:	4a0d      	ldreq	r2, [pc, #52]	; (9f90 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9f5c:	4a0d      	ldrne	r2, [pc, #52]	; (9f94 <pinMode+0x68>)
    9f5e:	601a      	str	r2, [r3, #0]
    9f60:	e007      	b.n	9f72 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9f62:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    9f64:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9f66:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9f68:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    9f6a:	d008      	beq.n	9f7e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9f6c:	f640 0238 	movw	r2, #2104	; 0x838
    9f70:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9f72:	6843      	ldr	r3, [r0, #4]
    9f74:	2215      	movs	r2, #21
}
    9f76:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    9f7a:	601a      	str	r2, [r3, #0]
}
    9f7c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9f7e:	2238      	movs	r2, #56	; 0x38
    9f80:	601a      	str	r2, [r3, #0]
    9f82:	e7f6      	b.n	9f72 <pinMode+0x46>
    9f84:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9f86:	4a04      	ldr	r2, [pc, #16]	; (9f98 <pinMode+0x6c>)
    9f88:	601a      	str	r2, [r3, #0]
    9f8a:	e7f2      	b.n	9f72 <pinMode+0x46>
    9f8c:	20000cd0 	.word	0x20000cd0
    9f90:	00013038 	.word	0x00013038
    9f94:	00010038 	.word	0x00010038
    9f98:	0001f038 	.word	0x0001f038

00009f9c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9f9c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9f9e:	f7f8 f94b 	bl	2238 <setup>
	while (1) {
		loop();
    9fa2:	f7fe fe55 	bl	8c50 <loop>
		yield();
    9fa6:	f001 fa3f 	bl	b428 <yield>
	while (1) {
    9faa:	e7fa      	b.n	9fa2 <main+0x6>

00009fac <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9fac:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9fae:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9fb2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9fb6:	d16d      	bne.n	a094 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9fb8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9fba:	d341      	bcc.n	a040 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9fbc:	f851 3b04 	ldr.w	r3, [r1], #4
    9fc0:	f840 3b04 	str.w	r3, [r0], #4
    9fc4:	f851 3b04 	ldr.w	r3, [r1], #4
    9fc8:	f840 3b04 	str.w	r3, [r0], #4
    9fcc:	f851 3b04 	ldr.w	r3, [r1], #4
    9fd0:	f840 3b04 	str.w	r3, [r0], #4
    9fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    9fd8:	f840 3b04 	str.w	r3, [r0], #4
    9fdc:	f851 3b04 	ldr.w	r3, [r1], #4
    9fe0:	f840 3b04 	str.w	r3, [r0], #4
    9fe4:	f851 3b04 	ldr.w	r3, [r1], #4
    9fe8:	f840 3b04 	str.w	r3, [r0], #4
    9fec:	f851 3b04 	ldr.w	r3, [r1], #4
    9ff0:	f840 3b04 	str.w	r3, [r0], #4
    9ff4:	f851 3b04 	ldr.w	r3, [r1], #4
    9ff8:	f840 3b04 	str.w	r3, [r0], #4
    9ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    a000:	f840 3b04 	str.w	r3, [r0], #4
    a004:	f851 3b04 	ldr.w	r3, [r1], #4
    a008:	f840 3b04 	str.w	r3, [r0], #4
    a00c:	f851 3b04 	ldr.w	r3, [r1], #4
    a010:	f840 3b04 	str.w	r3, [r0], #4
    a014:	f851 3b04 	ldr.w	r3, [r1], #4
    a018:	f840 3b04 	str.w	r3, [r0], #4
    a01c:	f851 3b04 	ldr.w	r3, [r1], #4
    a020:	f840 3b04 	str.w	r3, [r0], #4
    a024:	f851 3b04 	ldr.w	r3, [r1], #4
    a028:	f840 3b04 	str.w	r3, [r0], #4
    a02c:	f851 3b04 	ldr.w	r3, [r1], #4
    a030:	f840 3b04 	str.w	r3, [r0], #4
    a034:	f851 3b04 	ldr.w	r3, [r1], #4
    a038:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a03c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a03e:	d2bd      	bcs.n	9fbc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a040:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a042:	d311      	bcc.n	a068 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a044:	f851 3b04 	ldr.w	r3, [r1], #4
    a048:	f840 3b04 	str.w	r3, [r0], #4
    a04c:	f851 3b04 	ldr.w	r3, [r1], #4
    a050:	f840 3b04 	str.w	r3, [r0], #4
    a054:	f851 3b04 	ldr.w	r3, [r1], #4
    a058:	f840 3b04 	str.w	r3, [r0], #4
    a05c:	f851 3b04 	ldr.w	r3, [r1], #4
    a060:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a064:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    a066:	d2ed      	bcs.n	a044 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a068:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    a06a:	d305      	bcc.n	a078 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a06c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a070:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    a074:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a076:	d2f9      	bcs.n	a06c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a078:	3204      	adds	r2, #4
	beq	.Ldone
    a07a:	d008      	beq.n	a08e <memcpy+0xe2>

	lsls	r2, r2, #31
    a07c:	07d2      	lsls	r2, r2, #31
	itt ne
    a07e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a080:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a084:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a088:	d301      	bcc.n	a08e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a08a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a08c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a08e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a090:	4770      	bx	lr
    a092:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a094:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    a096:	d313      	bcc.n	a0c0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a098:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a09a:	d08d      	beq.n	9fb8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a09c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a0a0:	d08a      	beq.n	9fb8 <memcpy+0xc>

	rsb	r3, #4
    a0a2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    a0a6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    a0a8:	07db      	lsls	r3, r3, #31
	itt ne
    a0aa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a0ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a0b0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a0b4:	d380      	bcc.n	9fb8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a0b6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a0ba:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a0be:	e77b      	b.n	9fb8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a0c0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    a0c2:	d3d9      	bcc.n	a078 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a0c4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    a0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a0ca:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a0ce:	d2f9      	bcs.n	a0c4 <memcpy+0x118>

	ldrb	r3, [r1]
    a0d0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a0d2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a0d4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a0d6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a0d8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a0da:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a0dc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a0de:	4770      	bx	lr

0000a0e0 <ultoa>:
	int i=0, j;
    a0e0:	f101 3cff 	add.w	ip, r1, #4294967295
{
    a0e4:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    a0e6:	4666      	mov	r6, ip
	int i=0, j;
    a0e8:	2400      	movs	r4, #0
    a0ea:	e000      	b.n	a0ee <ultoa+0xe>
		i++;
    a0ec:	3401      	adds	r4, #1
		digit = val % radix;
    a0ee:	fbb0 f5f2 	udiv	r5, r0, r2
    a0f2:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a0f6:	2b09      	cmp	r3, #9
    a0f8:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    a0fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a100:	fa5f fe8e 	uxtb.w	lr, lr
    a104:	bf98      	it	ls
    a106:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    a10a:	4290      	cmp	r0, r2
		val /= radix;
    a10c:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a10e:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    a112:	d2eb      	bcs.n	a0ec <ultoa+0xc>
	buf[i + 1] = 0;
    a114:	1c63      	adds	r3, r4, #1
    a116:	2200      	movs	r2, #0
    a118:	18c8      	adds	r0, r1, r3
    a11a:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    a11c:	b17c      	cbz	r4, a13e <ultoa+0x5e>
		t = buf[j];
    a11e:	4662      	mov	r2, ip
    a120:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    a124:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    a128:	eba1 030c 	sub.w	r3, r1, ip
    a12c:	3202      	adds	r2, #2
		buf[j] = buf[i];
    a12e:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    a132:	3b01      	subs	r3, #1
    a134:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    a136:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    a138:	4423      	add	r3, r4
    a13a:	429a      	cmp	r2, r3
    a13c:	dbef      	blt.n	a11e <ultoa+0x3e>
}
    a13e:	4608      	mov	r0, r1
    a140:	bd70      	pop	{r4, r5, r6, pc}
    a142:	bf00      	nop

0000a144 <unused_interrupt_vector>:
	__disable_irq();
    a144:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    a146:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    a14a:	4c4f      	ldr	r4, [pc, #316]	; (a288 <unused_interrupt_vector+0x144>)
    a14c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    a150:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    a154:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    a158:	4e4c      	ldr	r6, [pc, #304]	; (a28c <unused_interrupt_vector+0x148>)
	while (p < end) {
    a15a:	4d4d      	ldr	r5, [pc, #308]	; (a290 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    a15c:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    a160:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    a164:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    a168:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    a16c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    a170:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    a174:	6993      	ldr	r3, [r2, #24]
    a176:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    a17a:	69d3      	ldr	r3, [r2, #28]
    a17c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    a180:	f000 f8d0 	bl	a324 <tempmonGetTemp>
    a184:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    a188:	f001 fc2a 	bl	b9e0 <rtc_get>
	info->len = sizeof(*info) / 4;
    a18c:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    a18e:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    a192:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    a196:	460b      	mov	r3, r1
    a198:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    a19c:	493d      	ldr	r1, [pc, #244]	; (a294 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    a19e:	1d30      	adds	r0, r6, #4
    a1a0:	405a      	eors	r2, r3
    a1a2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    a1a4:	f002 0301 	and.w	r3, r2, #1
    a1a8:	3c01      	subs	r4, #1
    a1aa:	fb01 f303 	mul.w	r3, r1, r3
    a1ae:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    a1b2:	d1f7      	bne.n	a1a4 <unused_interrupt_vector+0x60>
	while (p < end) {
    a1b4:	42a8      	cmp	r0, r5
    a1b6:	d002      	beq.n	a1be <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    a1b8:	6873      	ldr	r3, [r6, #4]
    a1ba:	4606      	mov	r6, r0
    a1bc:	e7ef      	b.n	a19e <unused_interrupt_vector+0x5a>
	info->crc = crc;
    a1be:	4b32      	ldr	r3, [pc, #200]	; (a288 <unused_interrupt_vector+0x144>)
    a1c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a1c4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a1c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a1cc:	492f      	ldr	r1, [pc, #188]	; (a28c <unused_interrupt_vector+0x148>)
    a1ce:	4a32      	ldr	r2, [pc, #200]	; (a298 <unused_interrupt_vector+0x154>)
    a1d0:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    a1d4:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    a1d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a1dc:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a1e0:	4a2e      	ldr	r2, [pc, #184]	; (a29c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    a1e2:	2502      	movs	r5, #2
    a1e4:	482e      	ldr	r0, [pc, #184]	; (a2a0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a1e6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a1e8:	492e      	ldr	r1, [pc, #184]	; (a2a4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a1ea:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    a1ee:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    a1f0:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    a1f2:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a1f4:	482c      	ldr	r0, [pc, #176]	; (a2a8 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    a1f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a1fe:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a200:	680b      	ldr	r3, [r1, #0]
    a202:	4283      	cmp	r3, r0
    a204:	d83d      	bhi.n	a282 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    a206:	4d26      	ldr	r5, [pc, #152]	; (a2a0 <unused_interrupt_vector+0x15c>)
    a208:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    a20a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a20e:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    a212:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    a214:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    a216:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    a21a:	4924      	ldr	r1, [pc, #144]	; (a2ac <unused_interrupt_vector+0x168>)
    a21c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    a220:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    a224:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    a228:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    a22c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    a230:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    a234:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    a238:	e001      	b.n	a23e <unused_interrupt_vector+0xfa>
		usb_isr();
    a23a:	f000 f965 	bl	a508 <usb_isr>
		if (PIT_TFLG0) {
    a23e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    a242:	2b00      	cmp	r3, #0
    a244:	d0f9      	beq.n	a23a <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    a246:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    a248:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    a24c:	2c4f      	cmp	r4, #79	; 0x4f
    a24e:	d9f4      	bls.n	a23a <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a250:	4b17      	ldr	r3, [pc, #92]	; (a2b0 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    a252:	2002      	movs	r0, #2
    a254:	4917      	ldr	r1, [pc, #92]	; (a2b4 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    a25a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a25e:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a260:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    a264:	b93b      	cbnz	r3, a276 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    a266:	4814      	ldr	r0, [pc, #80]	; (a2b8 <unused_interrupt_vector+0x174>)
    a268:	4914      	ldr	r1, [pc, #80]	; (a2bc <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a26a:	4a0d      	ldr	r2, [pc, #52]	; (a2a0 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    a26c:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a26e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    a272:	2b00      	cmp	r3, #0
    a274:	d0fa      	beq.n	a26c <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    a276:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a27a:	4a11      	ldr	r2, [pc, #68]	; (a2c0 <unused_interrupt_vector+0x17c>)
    a27c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    a280:	e7fe      	b.n	a280 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a282:	f001 f97d 	bl	b580 <set_arm_clock>
    a286:	e7be      	b.n	a206 <unused_interrupt_vector+0xc2>
    a288:	2027ff00 	.word	0x2027ff00
    a28c:	2027ff80 	.word	0x2027ff80
    a290:	2027ffa8 	.word	0x2027ffa8
    a294:	edb88320 	.word	0xedb88320
    a298:	2027ffa0 	.word	0x2027ffa0
    a29c:	400fc000 	.word	0x400fc000
    a2a0:	40084000 	.word	0x40084000
    a2a4:	2000433c 	.word	0x2000433c
    a2a8:	0bcd3d80 	.word	0x0bcd3d80
    a2ac:	00249f00 	.word	0x00249f00
    a2b0:	400d9000 	.word	0x400d9000
    a2b4:	402e0000 	.word	0x402e0000
    a2b8:	400f8000 	.word	0x400f8000
    a2bc:	0bad00f1 	.word	0x0bad00f1
    a2c0:	05fa0004 	.word	0x05fa0004

0000a2c4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    a2c4:	490a      	ldr	r1, [pc, #40]	; (a2f0 <_sbrk+0x2c>)
    a2c6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    a2c8:	b138      	cbz	r0, a2da <_sbrk+0x16>
{
    a2ca:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    a2cc:	1813      	adds	r3, r2, r0
    a2ce:	4809      	ldr	r0, [pc, #36]	; (a2f4 <_sbrk+0x30>)
    a2d0:	4283      	cmp	r3, r0
    a2d2:	d804      	bhi.n	a2de <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    a2d4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    a2d6:	600b      	str	r3, [r1, #0]
}
    a2d8:	bd08      	pop	{r3, pc}
    a2da:	4610      	mov	r0, r2
    a2dc:	4770      	bx	lr
                        errno = ENOMEM;
    a2de:	f002 fd63 	bl	cda8 <__errno>
    a2e2:	230c      	movs	r3, #12
                        return (void *)-1;
    a2e4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    a2e8:	6003      	str	r3, [r0, #0]
}
    a2ea:	4610      	mov	r0, r2
    a2ec:	bd08      	pop	{r3, pc}
    a2ee:	bf00      	nop
    a2f0:	20004354 	.word	0x20004354
    a2f4:	20280000 	.word	0x20280000

0000a2f8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    a2f8:	2000      	movs	r0, #0
    a2fa:	4770      	bx	lr

0000a2fc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    a2fc:	f04f 30ff 	mov.w	r0, #4294967295
    a300:	4770      	bx	lr
    a302:	bf00      	nop

0000a304 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    a304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    a308:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    a30a:	604b      	str	r3, [r1, #4]
}
    a30c:	4770      	bx	lr
    a30e:	bf00      	nop

0000a310 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    a310:	2001      	movs	r0, #1
    a312:	4770      	bx	lr

0000a314 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    a314:	f04f 30ff 	mov.w	r0, #4294967295
    a318:	4770      	bx	lr
    a31a:	bf00      	nop

0000a31c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    a31c:	bf30      	wfi
    a31e:	e7fd      	b.n	a31c <abort>

0000a320 <Panic_Temp_isr>:
  unused_interrupt_vector();
    a320:	f7ff bf10 	b.w	a144 <unused_interrupt_vector>

0000a324 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    a324:	4a12      	ldr	r2, [pc, #72]	; (a370 <tempmonGetTemp+0x4c>)
    a326:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    a32a:	075b      	lsls	r3, r3, #29
    a32c:	d5fb      	bpl.n	a326 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a32e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a332:	4810      	ldr	r0, [pc, #64]	; (a374 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a334:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a338:	490f      	ldr	r1, [pc, #60]	; (a378 <tempmonGetTemp+0x54>)
    a33a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a33e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a342:	ed91 6a00 	vldr	s12, [r1]
    a346:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    a34a:	4a0c      	ldr	r2, [pc, #48]	; (a37c <tempmonGetTemp+0x58>)
    a34c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a350:	4b0b      	ldr	r3, [pc, #44]	; (a380 <tempmonGetTemp+0x5c>)
    a352:	edd2 6a00 	vldr	s13, [r2]
    a356:	ee77 7ac7 	vsub.f32	s15, s15, s14
    a35a:	ed93 7a00 	vldr	s14, [r3]
    a35e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    a362:	ee67 7a86 	vmul.f32	s15, s15, s12
    a366:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    a36a:	ee37 0a40 	vsub.f32	s0, s14, s0
    a36e:	4770      	bx	lr
    a370:	400d8100 	.word	0x400d8100
    a374:	20018854 	.word	0x20018854
    a378:	2001885c 	.word	0x2001885c
    a37c:	20018860 	.word	0x20018860
    a380:	20018858 	.word	0x20018858

0000a384 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a384:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    a386:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    a388:	b11b      	cbz	r3, a392 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a38a:	6853      	ldr	r3, [r2, #4]
    a38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a390:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    a392:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a394:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a396:	b33c      	cbz	r4, a3e8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a398:	4b1a      	ldr	r3, [pc, #104]	; (a404 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    a39a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a39c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    a3a0:	420c      	tst	r4, r1
    a3a2:	d11d      	bne.n	a3e0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a3a4:	4e18      	ldr	r6, [pc, #96]	; (a408 <schedule_transfer+0x84>)
    a3a6:	6877      	ldr	r7, [r6, #4]
    a3a8:	e004      	b.n	a3b4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a3aa:	6874      	ldr	r4, [r6, #4]
    a3ac:	1be4      	subs	r4, r4, r7
    a3ae:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    a3b2:	d20b      	bcs.n	a3cc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a3b4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    a3b8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    a3bc:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a3c0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a3c4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    a3c8:	0464      	lsls	r4, r4, #17
    a3ca:	d5ee      	bpl.n	a3aa <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a3cc:	400d      	ands	r5, r1
    a3ce:	d107      	bne.n	a3e0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    a3d0:	4c0c      	ldr	r4, [pc, #48]	; (a404 <schedule_transfer+0x80>)
		endpoint->status = 0;
    a3d2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    a3d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a3da:	430b      	orrs	r3, r1
    a3dc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a3e0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a3e2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a3e4:	bcf0      	pop	{r4, r5, r6, r7}
    a3e6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    a3e8:	4d06      	ldr	r5, [pc, #24]	; (a404 <schedule_transfer+0x80>)
	endpoint->status = 0;
    a3ea:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    a3ee:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    a3f2:	430b      	orrs	r3, r1
    a3f4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a3f8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    a3fa:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a3fc:	b662      	cpsie	i
}
    a3fe:	bcf0      	pop	{r4, r5, r6, r7}
    a400:	4770      	bx	lr
    a402:	bf00      	nop
    a404:	402e0000 	.word	0x402e0000
    a408:	e0001000 	.word	0xe0001000

0000a40c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a40c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a40e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    a410:	b19d      	cbz	r5, a43a <run_callbacks+0x2e>
    a412:	4606      	mov	r6, r0
    a414:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    a416:	2400      	movs	r4, #0
    a418:	e003      	b.n	a422 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a41a:	6812      	ldr	r2, [r2, #0]
		count++;
    a41c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    a41e:	2a01      	cmp	r2, #1
    a420:	d00c      	beq.n	a43c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    a422:	6853      	ldr	r3, [r2, #4]
    a424:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    a428:	d0f7      	beq.n	a41a <run_callbacks+0xe>
			ep->first_transfer = t;
    a42a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a42c:	b12c      	cbz	r4, a43a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    a42e:	4628      	mov	r0, r5
		ep->callback_function(first);
    a430:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    a432:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    a434:	4798      	blx	r3
	while (count) {
    a436:	3c01      	subs	r4, #1
    a438:	d1f9      	bne.n	a42e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    a43a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    a43c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    a440:	e7f4      	b.n	a42c <run_callbacks+0x20>
    a442:	bf00      	nop

0000a444 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a444:	b430      	push	{r4, r5}
	if (len > 0) {
    a446:	b9d9      	cbnz	r1, a480 <endpoint0_transmit.constprop.0+0x3c>
    a448:	4c1f      	ldr	r4, [pc, #124]	; (a4c8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    a44a:	4b20      	ldr	r3, [pc, #128]	; (a4cc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    a44c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a44e:	4a20      	ldr	r2, [pc, #128]	; (a4d0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    a450:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a452:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    a456:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a458:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    a45a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a45e:	2480      	movs	r4, #128	; 0x80
    a460:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a462:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a466:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a46a:	481a      	ldr	r0, [pc, #104]	; (a4d4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    a46c:	432b      	orrs	r3, r5
    a46e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a472:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    a474:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a478:	2b00      	cmp	r3, #0
    a47a:	d1fb      	bne.n	a474 <endpoint0_transmit.constprop.0+0x30>
}
    a47c:	bc30      	pop	{r4, r5}
    a47e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a480:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a482:	4b15      	ldr	r3, [pc, #84]	; (a4d8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a484:	4c10      	ldr	r4, [pc, #64]	; (a4c8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    a486:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a488:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a48c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    a48e:	4a10      	ldr	r2, [pc, #64]	; (a4d0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a490:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a492:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a496:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a498:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a49a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a49e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a4a0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a4a2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a4a6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a4aa:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    a4ac:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a4ae:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a4b0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a4b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a4b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a4ba:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a4be:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a4c2:	2b00      	cmp	r3, #0
    a4c4:	d1fb      	bne.n	a4be <endpoint0_transmit.constprop.0+0x7a>
    a4c6:	e7c0      	b.n	a44a <endpoint0_transmit.constprop.0+0x6>
    a4c8:	20000000 	.word	0x20000000
    a4cc:	20004ec0 	.word	0x20004ec0
    a4d0:	402e0000 	.word	0x402e0000
    a4d4:	200053d4 	.word	0x200053d4
    a4d8:	20004ee0 	.word	0x20004ee0

0000a4dc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    a4dc:	4908      	ldr	r1, [pc, #32]	; (a500 <usb_stop_sof_interrupts+0x24>)
    a4de:	2201      	movs	r2, #1
    a4e0:	780b      	ldrb	r3, [r1, #0]
    a4e2:	fa02 f000 	lsl.w	r0, r2, r0
    a4e6:	ea23 0000 	bic.w	r0, r3, r0
    a4ea:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    a4ec:	b930      	cbnz	r0, a4fc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    a4ee:	4a05      	ldr	r2, [pc, #20]	; (a504 <usb_stop_sof_interrupts+0x28>)
    a4f0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    a4f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a4f8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    a4fc:	4770      	bx	lr
    a4fe:	bf00      	nop
    a500:	200188aa 	.word	0x200188aa
    a504:	402e0000 	.word	0x402e0000

0000a508 <usb_isr>:
{
    a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    a50c:	4c97      	ldr	r4, [pc, #604]	; (a76c <usb_isr+0x264>)
{
    a50e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    a510:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a514:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    a516:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a51a:	d553      	bpl.n	a5c4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a51c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    a520:	2a00      	cmp	r2, #0
    a522:	d04a      	beq.n	a5ba <usb_isr+0xb2>
    a524:	4e92      	ldr	r6, [pc, #584]	; (a770 <usb_isr+0x268>)
    a526:	f8df a260 	ldr.w	sl, [pc, #608]	; a788 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    a52a:	f8df 9274 	ldr.w	r9, [pc, #628]	; a7a0 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a52e:	f8df b274 	ldr.w	fp, [pc, #628]	; a7a4 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a532:	f8df 8274 	ldr.w	r8, [pc, #628]	; a7a8 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    a536:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    a53a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a53e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a542:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a546:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a54a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a54e:	049d      	lsls	r5, r3, #18
    a550:	d5f5      	bpl.n	a53e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a552:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    a55a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a55e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a562:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a566:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    a56a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    a56e:	d1fa      	bne.n	a566 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    a570:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    a572:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    a574:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    a578:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    a57c:	f000 81cf 	beq.w	a91e <usb_isr+0x416>
    a580:	f200 80db 	bhi.w	a73a <usb_isr+0x232>
    a584:	f240 3102 	movw	r1, #770	; 0x302
    a588:	428b      	cmp	r3, r1
    a58a:	f000 81e7 	beq.w	a95c <usb_isr+0x454>
    a58e:	f200 809a 	bhi.w	a6c6 <usb_isr+0x1be>
    a592:	2b82      	cmp	r3, #130	; 0x82
    a594:	f000 81cb 	beq.w	a92e <usb_isr+0x426>
    a598:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    a59c:	f040 808a 	bne.w	a6b4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    a5a0:	f010 0f78 	tst.w	r0, #120	; 0x78
    a5a4:	b283      	uxth	r3, r0
    a5a6:	f000 8203 	beq.w	a9b0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a5aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a5ae:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a5b2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    a5b6:	2a00      	cmp	r2, #0
    a5b8:	d1bd      	bne.n	a536 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a5ba:	4a6c      	ldr	r2, [pc, #432]	; (a76c <usb_isr+0x264>)
    a5bc:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d142      	bne.n	a64a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    a5c4:	067e      	lsls	r6, r7, #25
    a5c6:	d516      	bpl.n	a5f6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a5c8:	4b68      	ldr	r3, [pc, #416]	; (a76c <usb_isr+0x264>)
    a5ca:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    a5ce:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a5d2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    a5d6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a5da:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    a5de:	2c00      	cmp	r4, #0
    a5e0:	d1fb      	bne.n	a5da <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a5e2:	f04f 32ff 	mov.w	r2, #4294967295
    a5e6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a5ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    a5ee:	f000 fd29 	bl	b044 <usb_serial_reset>
		endpointN_notify_mask = 0;
    a5f2:	4b60      	ldr	r3, [pc, #384]	; (a774 <usb_isr+0x26c>)
    a5f4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    a5f6:	01fc      	lsls	r4, r7, #7
    a5f8:	d503      	bpl.n	a602 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a5fa:	4b5f      	ldr	r3, [pc, #380]	; (a778 <usb_isr+0x270>)
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	b103      	cbz	r3, a602 <usb_isr+0xfa>
    a600:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    a602:	01b8      	lsls	r0, r7, #6
    a604:	d503      	bpl.n	a60e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a606:	4b5d      	ldr	r3, [pc, #372]	; (a77c <usb_isr+0x274>)
    a608:	681b      	ldr	r3, [r3, #0]
    a60a:	b103      	cbz	r3, a60e <usb_isr+0x106>
    a60c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    a60e:	0779      	lsls	r1, r7, #29
    a610:	d508      	bpl.n	a624 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a612:	4b56      	ldr	r3, [pc, #344]	; (a76c <usb_isr+0x264>)
    a614:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    a618:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    a61c:	d047      	beq.n	a6ae <usb_isr+0x1a6>
			usb_high_speed = 1;
    a61e:	4b58      	ldr	r3, [pc, #352]	; (a780 <usb_isr+0x278>)
    a620:	2201      	movs	r2, #1
    a622:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a624:	4b51      	ldr	r3, [pc, #324]	; (a76c <usb_isr+0x264>)
    a626:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    a62a:	061a      	lsls	r2, r3, #24
    a62c:	d50a      	bpl.n	a644 <usb_isr+0x13c>
    a62e:	063b      	lsls	r3, r7, #24
    a630:	d508      	bpl.n	a644 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    a632:	4a54      	ldr	r2, [pc, #336]	; (a784 <usb_isr+0x27c>)
    a634:	7813      	ldrb	r3, [r2, #0]
    a636:	b12b      	cbz	r3, a644 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    a638:	3b01      	subs	r3, #1
    a63a:	b2db      	uxtb	r3, r3
    a63c:	7013      	strb	r3, [r2, #0]
    a63e:	2b00      	cmp	r3, #0
    a640:	f000 8272 	beq.w	ab28 <usb_isr+0x620>
}
    a644:	b003      	add	sp, #12
    a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    a64a:	494f      	ldr	r1, [pc, #316]	; (a788 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    a64c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a650:	6808      	ldr	r0, [r1, #0]
    a652:	4203      	tst	r3, r0
    a654:	f040 81d1 	bne.w	a9fa <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    a658:	4a46      	ldr	r2, [pc, #280]	; (a774 <usb_isr+0x26c>)
    a65a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    a65c:	401c      	ands	r4, r3
    a65e:	d0b1      	beq.n	a5c4 <usb_isr+0xbc>
				while (tx) {
    a660:	ea5f 4814 	movs.w	r8, r4, lsr #16
    a664:	d010      	beq.n	a688 <usb_isr+0x180>
    a666:	4e42      	ldr	r6, [pc, #264]	; (a770 <usb_isr+0x268>)
					tx &= ~(1<<p);
    a668:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    a66c:	fa98 f5a8 	rbit	r5, r8
    a670:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a674:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    a678:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a67c:	3040      	adds	r0, #64	; 0x40
    a67e:	f7ff fec5 	bl	a40c <run_callbacks>
				while (tx) {
    a682:	ea38 0805 	bics.w	r8, r8, r5
    a686:	d1f1      	bne.n	a66c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    a688:	b2a4      	uxth	r4, r4
				while(rx) {
    a68a:	2c00      	cmp	r4, #0
    a68c:	d09a      	beq.n	a5c4 <usb_isr+0xbc>
    a68e:	4e38      	ldr	r6, [pc, #224]	; (a770 <usb_isr+0x268>)
					rx &= ~(1<<p);
    a690:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    a694:	fa94 f5a4 	rbit	r5, r4
    a698:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a69c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    a6a0:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a6a4:	f7ff feb2 	bl	a40c <run_callbacks>
				while(rx) {
    a6a8:	43ac      	bics	r4, r5
    a6aa:	d1f3      	bne.n	a694 <usb_isr+0x18c>
    a6ac:	e78a      	b.n	a5c4 <usb_isr+0xbc>
			usb_high_speed = 0;
    a6ae:	4a34      	ldr	r2, [pc, #208]	; (a780 <usb_isr+0x278>)
    a6b0:	7013      	strb	r3, [r2, #0]
    a6b2:	e7b7      	b.n	a624 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    a6b4:	2b80      	cmp	r3, #128	; 0x80
    a6b6:	f47f af78 	bne.w	a5aa <usb_isr+0xa2>
		reply_buffer[0] = 0;
    a6ba:	4834      	ldr	r0, [pc, #208]	; (a78c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    a6bc:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    a6be:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a6c0:	f7ff fec0 	bl	a444 <endpoint0_transmit.constprop.0>
		return;
    a6c4:	e775      	b.n	a5b2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    a6c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    a6ca:	f000 810b 	beq.w	a8e4 <usb_isr+0x3dc>
    a6ce:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    a6d2:	2b01      	cmp	r3, #1
    a6d4:	f63f af69 	bhi.w	a5aa <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a6d8:	4b2d      	ldr	r3, [pc, #180]	; (a790 <usb_isr+0x288>)
    a6da:	685d      	ldr	r5, [r3, #4]
    a6dc:	2d00      	cmp	r5, #0
    a6de:	f43f af64 	beq.w	a5aa <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a6e2:	fa1f fc8c 	uxth.w	ip, ip
    a6e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    a6ea:	e004      	b.n	a6f6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a6ec:	691d      	ldr	r5, [r3, #16]
    a6ee:	330c      	adds	r3, #12
    a6f0:	2d00      	cmp	r5, #0
    a6f2:	f43f af5a 	beq.w	a5aa <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a6f6:	881a      	ldrh	r2, [r3, #0]
    a6f8:	4572      	cmp	r2, lr
    a6fa:	d1f7      	bne.n	a6ec <usb_isr+0x1e4>
    a6fc:	885a      	ldrh	r2, [r3, #2]
    a6fe:	4562      	cmp	r2, ip
    a700:	d1f4      	bne.n	a6ec <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    a702:	ea4f 221e 	mov.w	r2, lr, lsr #8
    a706:	2a03      	cmp	r2, #3
    a708:	f000 81a5 	beq.w	aa56 <usb_isr+0x54e>
					datalen = list->length;
    a70c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    a70e:	0c00      	lsrs	r0, r0, #16
    a710:	4282      	cmp	r2, r0
    a712:	bf28      	it	cs
    a714:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    a716:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    a71a:	f040 81a1 	bne.w	aa60 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    a71e:	4b18      	ldr	r3, [pc, #96]	; (a780 <usb_isr+0x278>)
    a720:	491c      	ldr	r1, [pc, #112]	; (a794 <usb_isr+0x28c>)
    a722:	7818      	ldrb	r0, [r3, #0]
    a724:	4b1c      	ldr	r3, [pc, #112]	; (a798 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a726:	9201      	str	r2, [sp, #4]
    a728:	2800      	cmp	r0, #0
    a72a:	bf18      	it	ne
    a72c:	4619      	movne	r1, r3
    a72e:	481b      	ldr	r0, [pc, #108]	; (a79c <usb_isr+0x294>)
    a730:	f7ff fc3c 	bl	9fac <memcpy>
    a734:	4d19      	ldr	r5, [pc, #100]	; (a79c <usb_isr+0x294>)
    a736:	9a01      	ldr	r2, [sp, #4]
    a738:	e1e1      	b.n	aafe <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    a73a:	f242 2121 	movw	r1, #8737	; 0x2221
    a73e:	428b      	cmp	r3, r1
    a740:	d07c      	beq.n	a83c <usb_isr+0x334>
    a742:	d933      	bls.n	a7ac <usb_isr+0x2a4>
    a744:	f242 3121 	movw	r1, #8993	; 0x2321
    a748:	428b      	cmp	r3, r1
    a74a:	f000 8081 	beq.w	a850 <usb_isr+0x348>
    a74e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    a752:	428b      	cmp	r3, r1
    a754:	f47f af29 	bne.w	a5aa <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    a758:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    a75c:	b283      	uxth	r3, r0
    a75e:	f47f af24 	bne.w	a5aa <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    a762:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    a766:	f363 0c0f 	bfi	ip, r3, #0, #16
    a76a:	e7b5      	b.n	a6d8 <usb_isr+0x1d0>
    a76c:	402e0000 	.word	0x402e0000
    a770:	20000000 	.word	0x20000000
    a774:	200053d8 	.word	0x200053d8
    a778:	20018880 	.word	0x20018880
    a77c:	20018884 	.word	0x20018884
    a780:	200188b0 	.word	0x200188b0
    a784:	200188b1 	.word	0x200188b1
    a788:	200053d4 	.word	0x200053d4
    a78c:	20018818 	.word	0x20018818
    a790:	20001170 	.word	0x20001170
    a794:	60001e84 	.word	0x60001e84
    a798:	60001ee8 	.word	0x60001ee8
    a79c:	20200000 	.word	0x20200000
    a7a0:	200053cc 	.word	0x200053cc
    a7a4:	b8c6cf5d 	.word	0xb8c6cf5d
    a7a8:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    a7ac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a7b0:	d066      	beq.n	a880 <usb_isr+0x378>
    a7b2:	f242 0121 	movw	r1, #8225	; 0x2021
    a7b6:	428b      	cmp	r3, r1
    a7b8:	f47f aef7 	bne.w	a5aa <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    a7bc:	0c03      	lsrs	r3, r0, #16
    a7be:	2b07      	cmp	r3, #7
    a7c0:	f47f aef3 	bne.w	a5aa <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    a7c4:	4bb2      	ldr	r3, [pc, #712]	; (aa90 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a7c6:	49b3      	ldr	r1, [pc, #716]	; (aa94 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    a7c8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a7ca:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    a7cc:	49b2      	ldr	r1, [pc, #712]	; (aa98 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a7ce:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a7d0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    a7d4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    a7d8:	2201      	movs	r2, #1
    a7da:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a7dc:	4aaf      	ldr	r2, [pc, #700]	; (aa9c <usb_isr+0x594>)
    a7de:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a7e0:	4aaf      	ldr	r2, [pc, #700]	; (aaa0 <usb_isr+0x598>)
    a7e2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    a7e4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    a7e8:	f041 0101 	orr.w	r1, r1, #1
    a7ec:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a7f0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a7f4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a7f8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a7fa:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    a7fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a800:	2b00      	cmp	r3, #0
    a802:	d1fb      	bne.n	a7fc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    a804:	4aa7      	ldr	r2, [pc, #668]	; (aaa4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a806:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a808:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    a80a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a80c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a80e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a810:	f248 0380 	movw	r3, #32896	; 0x8080
    a814:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a816:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a81a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a81e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a826:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a82a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a82e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    a832:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a836:	2b00      	cmp	r3, #0
    a838:	d1fb      	bne.n	a832 <usb_isr+0x32a>
    a83a:	e6ba      	b.n	a5b2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a83c:	b280      	uxth	r0, r0
    a83e:	b938      	cbnz	r0, a850 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a840:	4b99      	ldr	r3, [pc, #612]	; (aaa8 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a842:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a846:	6819      	ldr	r1, [r3, #0]
    a848:	4b98      	ldr	r3, [pc, #608]	; (aaac <usb_isr+0x5a4>)
    a84a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a84c:	4b98      	ldr	r3, [pc, #608]	; (aab0 <usb_isr+0x5a8>)
    a84e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    a850:	4b94      	ldr	r3, [pc, #592]	; (aaa4 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    a852:	2200      	movs	r2, #0
    a854:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    a856:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a858:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a85a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a85c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a85e:	2280      	movs	r2, #128	; 0x80
    a860:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a862:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a866:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a86a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a872:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a876:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a87a:	2b00      	cmp	r3, #0
    a87c:	d1fb      	bne.n	a876 <usb_isr+0x36e>
    a87e:	e698      	b.n	a5b2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    a880:	f3c2 4207 	ubfx	r2, r2, #16, #8
    a884:	4b8b      	ldr	r3, [pc, #556]	; (aab4 <usb_isr+0x5ac>)
    a886:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a888:	4b8b      	ldr	r3, [pc, #556]	; (aab8 <usb_isr+0x5b0>)
    a88a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a88e:	4b8b      	ldr	r3, [pc, #556]	; (aabc <usb_isr+0x5b4>)
    a890:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a894:	4b8a      	ldr	r3, [pc, #552]	; (aac0 <usb_isr+0x5b8>)
    a896:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    a89a:	f000 fbd5 	bl	b048 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    a89e:	2280      	movs	r2, #128	; 0x80
    a8a0:	4629      	mov	r1, r5
    a8a2:	4888      	ldr	r0, [pc, #544]	; (aac4 <usb_isr+0x5bc>)
    a8a4:	f002 f92a 	bl	cafc <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a8a8:	4b87      	ldr	r3, [pc, #540]	; (aac8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8aa:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a8ac:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a8b0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    a8b4:	4b7b      	ldr	r3, [pc, #492]	; (aaa4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a8b6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8b8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    a8ba:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a8bc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    a8be:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a8c0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a8c6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a8ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a8d2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a8d6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    a8da:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d1fb      	bne.n	a8da <usb_isr+0x3d2>
    a8e2:	e666      	b.n	a5b2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    a8e4:	4b6f      	ldr	r3, [pc, #444]	; (aaa4 <usb_isr+0x59c>)
    a8e6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    a8e8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a8ea:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8ec:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a8ee:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a8f0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a8f2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a8f4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a8f8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a8fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a904:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a908:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a90c:	2b00      	cmp	r3, #0
    a90e:	d1fb      	bne.n	a908 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a910:	0c13      	lsrs	r3, r2, #16
    a912:	065b      	lsls	r3, r3, #25
    a914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    a918:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    a91c:	e649      	b.n	a5b2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    a91e:	4b65      	ldr	r3, [pc, #404]	; (aab4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a920:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    a922:	486a      	ldr	r0, [pc, #424]	; (aacc <usb_isr+0x5c4>)
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    a928:	f7ff fd8c 	bl	a444 <endpoint0_transmit.constprop.0>
		return;
    a92c:	e641      	b.n	a5b2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    a92e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    a930:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    a934:	f47f ae39 	bne.w	a5aa <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    a938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a93c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    a940:	4a62      	ldr	r2, [pc, #392]	; (aacc <usb_isr+0x5c4>)
    a942:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a944:	0618      	lsls	r0, r3, #24
    a946:	f100 809e 	bmi.w	aa86 <usb_isr+0x57e>
    a94a:	07cb      	lsls	r3, r1, #31
    a94c:	d501      	bpl.n	a952 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    a94e:	2301      	movs	r3, #1
    a950:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a952:	2102      	movs	r1, #2
    a954:	485d      	ldr	r0, [pc, #372]	; (aacc <usb_isr+0x5c4>)
    a956:	f7ff fd75 	bl	a444 <endpoint0_transmit.constprop.0>
		return;
    a95a:	e62a      	b.n	a5b2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    a95c:	f010 0f78 	tst.w	r0, #120	; 0x78
    a960:	b283      	uxth	r3, r0
    a962:	f47f ae22 	bne.w	a5aa <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    a966:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    a96a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a96e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    a972:	bf14      	ite	ne
    a974:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a978:	f043 0301 	orreq.w	r3, r3, #1
    a97c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    a980:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    a982:	4b48      	ldr	r3, [pc, #288]	; (aaa4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a984:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a986:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a988:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a98a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a98c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a98e:	2280      	movs	r2, #128	; 0x80
    a990:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a992:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a996:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a99a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a99e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a9a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a9a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9aa:	2b00      	cmp	r3, #0
    a9ac:	d1fb      	bne.n	a9a6 <usb_isr+0x49e>
    a9ae:	e600      	b.n	a5b2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    a9b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    a9b4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a9b8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    a9bc:	bf14      	ite	ne
    a9be:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a9c2:	f023 0301 	biceq.w	r3, r3, #1
    a9c6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    a9ca:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    a9cc:	4b35      	ldr	r3, [pc, #212]	; (aaa4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a9ce:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a9d0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a9d2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9d4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a9d6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9d8:	2280      	movs	r2, #128	; 0x80
    a9da:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9dc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a9e0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a9e4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a9ec:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a9f0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9f4:	2b00      	cmp	r3, #0
    a9f6:	d1fb      	bne.n	a9f0 <usb_isr+0x4e8>
    a9f8:	e5db      	b.n	a5b2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    a9fa:	2000      	movs	r0, #0
    a9fc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    a9fe:	4926      	ldr	r1, [pc, #152]	; (aa98 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aa00:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    aa02:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aa04:	f242 0121 	movw	r1, #8225	; 0x2021
    aa08:	428c      	cmp	r4, r1
    aa0a:	f47f ae25 	bne.w	a658 <usb_isr+0x150>
    aa0e:	b280      	uxth	r0, r0
    aa10:	2800      	cmp	r0, #0
    aa12:	f47f ae21 	bne.w	a658 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa16:	492e      	ldr	r1, [pc, #184]	; (aad0 <usb_isr+0x5c8>)
    aa18:	4c2e      	ldr	r4, [pc, #184]	; (aad4 <usb_isr+0x5cc>)
    aa1a:	c903      	ldmia	r1, {r0, r1}
    aa1c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    aa1e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    aa20:	ea4f 4111 	mov.w	r1, r1, lsr #16
    aa24:	6020      	str	r0, [r4, #0]
    aa26:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    aa28:	f47f ae16 	bne.w	a658 <usb_isr+0x150>
	__disable_irq();
    aa2c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    aa2e:	482a      	ldr	r0, [pc, #168]	; (aad8 <usb_isr+0x5d0>)
    aa30:	7801      	ldrb	r1, [r0, #0]
    aa32:	f041 0108 	orr.w	r1, r1, #8
    aa36:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    aa38:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    aa3c:	060d      	lsls	r5, r1, #24
    aa3e:	d405      	bmi.n	aa4c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aa40:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aa42:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aa44:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aa48:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    aa4c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    aa4e:	4a23      	ldr	r2, [pc, #140]	; (aadc <usb_isr+0x5d4>)
    aa50:	2150      	movs	r1, #80	; 0x50
    aa52:	7011      	strb	r1, [r2, #0]
    aa54:	e600      	b.n	a658 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    aa56:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    aa58:	782a      	ldrb	r2, [r5, #0]
    aa5a:	4282      	cmp	r2, r0
    aa5c:	bf28      	it	cs
    aa5e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    aa60:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    aa64:	d144      	bne.n	aaf0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    aa66:	4b1e      	ldr	r3, [pc, #120]	; (aae0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    aa68:	4d1e      	ldr	r5, [pc, #120]	; (aae4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    aa6a:	7818      	ldrb	r0, [r3, #0]
    aa6c:	491e      	ldr	r1, [pc, #120]	; (aae8 <usb_isr+0x5e0>)
    aa6e:	4b1f      	ldr	r3, [pc, #124]	; (aaec <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    aa70:	9201      	str	r2, [sp, #4]
    aa72:	2800      	cmp	r0, #0
    aa74:	bf18      	it	ne
    aa76:	4619      	movne	r1, r3
    aa78:	4628      	mov	r0, r5
    aa7a:	f7ff fa97 	bl	9fac <memcpy>
					usb_descriptor_buffer[1] = 7;
    aa7e:	2307      	movs	r3, #7
    aa80:	706b      	strb	r3, [r5, #1]
    aa82:	9a01      	ldr	r2, [sp, #4]
    aa84:	e03b      	b.n	aafe <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    aa86:	03c9      	lsls	r1, r1, #15
    aa88:	f53f af61 	bmi.w	a94e <usb_isr+0x446>
    aa8c:	e761      	b.n	a952 <usb_isr+0x44a>
    aa8e:	bf00      	nop
    aa90:	20004ee0 	.word	0x20004ee0
    aa94:	200063cc 	.word	0x200063cc
    aa98:	20005080 	.word	0x20005080
    aa9c:	00070080 	.word	0x00070080
    aaa0:	200073cc 	.word	0x200073cc
    aaa4:	20004ec0 	.word	0x20004ec0
    aaa8:	2001886c 	.word	0x2001886c
    aaac:	2001887c 	.word	0x2001887c
    aab0:	200188ae 	.word	0x200188ae
    aab4:	200188af 	.word	0x200188af
    aab8:	00cc0002 	.word	0x00cc0002
    aabc:	000200c8 	.word	0x000200c8
    aac0:	00c80002 	.word	0x00c80002
    aac4:	20000080 	.word	0x20000080
    aac8:	74d59319 	.word	0x74d59319
    aacc:	20018818 	.word	0x20018818
    aad0:	200053cc 	.word	0x200053cc
    aad4:	20018874 	.word	0x20018874
    aad8:	200188aa 	.word	0x200188aa
    aadc:	200188b1 	.word	0x200188b1
    aae0:	200188b0 	.word	0x200188b0
    aae4:	20200000 	.word	0x20200000
    aae8:	60001ee8 	.word	0x60001ee8
    aaec:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    aaf0:	4629      	mov	r1, r5
    aaf2:	4d10      	ldr	r5, [pc, #64]	; (ab34 <usb_isr+0x62c>)
    aaf4:	9201      	str	r2, [sp, #4]
    aaf6:	4628      	mov	r0, r5
    aaf8:	f7ff fa58 	bl	9fac <memcpy>
    aafc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aafe:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    ab02:	4415      	add	r5, r2
	asm("dsb");
    ab04:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ab08:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ab0c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    ab10:	3320      	adds	r3, #32
	} while (location < end_addr);
    ab12:	429d      	cmp	r5, r3
    ab14:	d8fa      	bhi.n	ab0c <usb_isr+0x604>
	asm("dsb");
    ab16:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ab1a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ab1e:	4805      	ldr	r0, [pc, #20]	; (ab34 <usb_isr+0x62c>)
    ab20:	4611      	mov	r1, r2
    ab22:	f7ff fc8f 	bl	a444 <endpoint0_transmit.constprop.0>
				return;
    ab26:	e544      	b.n	a5b2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    ab28:	2003      	movs	r0, #3
    ab2a:	f7ff fcd7 	bl	a4dc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    ab2e:	f007 fce7 	bl	12500 <___reboot_Teensyduino__veneer>
    ab32:	bf00      	nop
    ab34:	20200000 	.word	0x20200000

0000ab38 <usb_config_rx>:
{
    ab38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab3c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ab3e:	1e83      	subs	r3, r0, #2
    ab40:	2b02      	cmp	r3, #2
    ab42:	d901      	bls.n	ab48 <usb_config_rx+0x10>
}
    ab44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ab48:	f8df 904c 	ldr.w	r9, [pc, #76]	; ab98 <usb_config_rx+0x60>
    ab4c:	4615      	mov	r5, r2
    ab4e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    ab50:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ab52:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ab56:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ab58:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ab5c:	2100      	movs	r1, #0
    ab5e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab62:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    ab64:	f001 ffca 	bl	cafc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab68:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    ab6c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ab6e:	0952      	lsrs	r2, r2, #5
    ab70:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    ab74:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    ab78:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ab7c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    ab80:	2f00      	cmp	r7, #0
    ab82:	d0df      	beq.n	ab44 <usb_config_rx+0xc>
    ab84:	4a03      	ldr	r2, [pc, #12]	; (ab94 <usb_config_rx+0x5c>)
    ab86:	40b3      	lsls	r3, r6
    ab88:	6811      	ldr	r1, [r2, #0]
    ab8a:	430b      	orrs	r3, r1
    ab8c:	6013      	str	r3, [r2, #0]
}
    ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab92:	bf00      	nop
    ab94:	200053d8 	.word	0x200053d8
    ab98:	20000000 	.word	0x20000000

0000ab9c <usb_config_tx>:
{
    ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aba0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    aba2:	1e81      	subs	r1, r0, #2
    aba4:	2902      	cmp	r1, #2
    aba6:	d901      	bls.n	abac <usb_config_tx+0x10>
}
    aba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    abac:	01c7      	lsls	r7, r0, #7
    abae:	f8df 904c 	ldr.w	r9, [pc, #76]	; abfc <usb_config_tx+0x60>
    abb2:	4692      	mov	sl, r2
    abb4:	4604      	mov	r4, r0
    abb6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    abb8:	223c      	movs	r2, #60	; 0x3c
    abba:	2100      	movs	r1, #0
    abbc:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    abbe:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    abc2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    abc4:	f108 0004 	add.w	r0, r8, #4
    abc8:	f001 ff98 	bl	cafc <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    abcc:	faba f28a 	clz	r2, sl
    abd0:	0952      	lsrs	r2, r2, #5
    abd2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    abd6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    abda:	2201      	movs	r2, #1
	qh->callback_function = callback;
    abdc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    abe0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    abe4:	2e00      	cmp	r6, #0
    abe6:	d0df      	beq.n	aba8 <usb_config_tx+0xc>
    abe8:	4b03      	ldr	r3, [pc, #12]	; (abf8 <usb_config_tx+0x5c>)
    abea:	3410      	adds	r4, #16
    abec:	6819      	ldr	r1, [r3, #0]
    abee:	40a2      	lsls	r2, r4
    abf0:	430a      	orrs	r2, r1
    abf2:	601a      	str	r2, [r3, #0]
}
    abf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abf8:	200053d8 	.word	0x200053d8
    abfc:	20000000 	.word	0x20000000

0000ac00 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    ac00:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    ac02:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    ac04:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    ac06:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    ac0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    ac0e:	b410      	push	{r4}
	transfer->next = 1;
    ac10:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    ac12:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    ac14:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    ac18:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    ac1a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    ac1e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    ac22:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    ac24:	6181      	str	r1, [r0, #24]
}
    ac26:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    ac2a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    ac2e:	4770      	bx	lr

0000ac30 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac30:	1e83      	subs	r3, r0, #2
{
    ac32:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac34:	2b02      	cmp	r3, #2
    ac36:	d900      	bls.n	ac3a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    ac38:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ac3a:	4b06      	ldr	r3, [pc, #24]	; (ac54 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    ac3c:	f100 0110 	add.w	r1, r0, #16
    ac40:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ac44:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ac48:	fa0c f101 	lsl.w	r1, ip, r1
    ac4c:	3040      	adds	r0, #64	; 0x40
    ac4e:	f7ff bb99 	b.w	a384 <schedule_transfer>
    ac52:	bf00      	nop
    ac54:	20000000 	.word	0x20000000

0000ac58 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac58:	1e83      	subs	r3, r0, #2
{
    ac5a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ac5c:	2b02      	cmp	r3, #2
    ac5e:	d900      	bls.n	ac62 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    ac60:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    ac62:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    ac64:	4b02      	ldr	r3, [pc, #8]	; (ac70 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    ac66:	4081      	lsls	r1, r0
    ac68:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    ac6c:	f7ff bb8a 	b.w	a384 <schedule_transfer>
    ac70:	20000000 	.word	0x20000000

0000ac74 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    ac74:	6840      	ldr	r0, [r0, #4]
#endif
}
    ac76:	4770      	bx	lr

0000ac78 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ac78:	4a12      	ldr	r2, [pc, #72]	; (acc4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ac7a:	4b13      	ldr	r3, [pc, #76]	; (acc8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ac7c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    ac80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    ac84:	4298      	cmp	r0, r3
{
    ac86:	b510      	push	{r4, lr}
    ac88:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    ac8a:	d202      	bcs.n	ac92 <usb_init_serialnumber+0x1a>
    ac8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ac90:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    ac92:	4c0e      	ldr	r4, [pc, #56]	; (accc <usb_init_serialnumber+0x54>)
    ac94:	a901      	add	r1, sp, #4
    ac96:	220a      	movs	r2, #10
    ac98:	f7ff fa22 	bl	a0e0 <ultoa>
	for (i=0; i<10; i++) {
    ac9c:	a901      	add	r1, sp, #4
    ac9e:	2300      	movs	r3, #0
    aca0:	4620      	mov	r0, r4
		char c = buf[i];
    aca2:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    aca6:	3301      	adds	r3, #1
		if (!c) break;
    aca8:	b13a      	cbz	r2, acba <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    acaa:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    acac:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    acb0:	d1f7      	bne.n	aca2 <usb_init_serialnumber+0x2a>
    acb2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    acb4:	7023      	strb	r3, [r4, #0]
}
    acb6:	b004      	add	sp, #16
    acb8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    acba:	005b      	lsls	r3, r3, #1
    acbc:	b2db      	uxtb	r3, r3
    acbe:	7023      	strb	r3, [r4, #0]
}
    acc0:	b004      	add	sp, #16
    acc2:	bd10      	pop	{r4, pc}
    acc4:	401f4400 	.word	0x401f4400
    acc8:	00989680 	.word	0x00989680
    accc:	20004938 	.word	0x20004938

0000acd0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    acd0:	f000 bace 	b.w	b270 <usb_serial_flush_input>

0000acd4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    acd4:	f000 bac0 	b.w	b258 <usb_serial_available>

0000acd8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    acd8:	f000 bb5c 	b.w	b394 <usb_serial_flush_output>

0000acdc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    acdc:	f000 bb32 	b.w	b344 <usb_serial_write_buffer_free>

0000ace0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ace0:	4608      	mov	r0, r1
    ace2:	4611      	mov	r1, r2
    ace4:	f000 bb22 	b.w	b32c <usb_serial_write>

0000ace8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    acea:	4c14      	ldr	r4, [pc, #80]	; (ad3c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    acec:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    acf0:	4e13      	ldr	r6, [pc, #76]	; (ad40 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    acf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    acf6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    acfa:	4f12      	ldr	r7, [pc, #72]	; (ad44 <rx_queue_transfer+0x5c>)
    acfc:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    ad00:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ad02:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    ad06:	4621      	mov	r1, r4
    ad08:	883a      	ldrh	r2, [r7, #0]
    ad0a:	4630      	mov	r0, r6
    ad0c:	f7ff ff78 	bl	ac00 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    ad10:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    ad12:	4423      	add	r3, r4
	asm("dsb");
    ad14:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ad18:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    ad1c:	3420      	adds	r4, #32
	} while (location < end_addr);
    ad1e:	42a3      	cmp	r3, r4
    ad20:	d8fa      	bhi.n	ad18 <rx_queue_transfer+0x30>
	asm("dsb");
    ad22:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ad26:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    ad2a:	2003      	movs	r0, #3
    ad2c:	4631      	mov	r1, r6
    ad2e:	f7ff ff93 	bl	ac58 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ad32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    ad36:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    ad3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad3c:	20200080 	.word	0x20200080
    ad40:	20004f00 	.word	0x20004f00
    ad44:	2001888e 	.word	0x2001888e

0000ad48 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ad48:	4b24      	ldr	r3, [pc, #144]	; (addc <rx_event+0x94>)
{
    ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ad4e:	881c      	ldrh	r4, [r3, #0]
    ad50:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    ad52:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ad54:	f3c3 430e 	ubfx	r3, r3, #16, #15
    ad58:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    ad5a:	2c00      	cmp	r4, #0
    ad5c:	dd24      	ble.n	ada8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    ad5e:	4920      	ldr	r1, [pc, #128]	; (ade0 <rx_event+0x98>)
		if (head != rx_tail) {
    ad60:	4820      	ldr	r0, [pc, #128]	; (ade4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    ad62:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    ad64:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    ad66:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    ad68:	4e1f      	ldr	r6, [pc, #124]	; (ade8 <rx_event+0xa0>)
		if (head != rx_tail) {
    ad6a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    ad6c:	481f      	ldr	r0, [pc, #124]	; (adec <rx_event+0xa4>)
		if (head != rx_tail) {
    ad6e:	d007      	beq.n	ad80 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    ad70:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    ad74:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    ad78:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    ad7c:	4294      	cmp	r4, r2
    ad7e:	d918      	bls.n	adb2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    ad80:	3301      	adds	r3, #1
		rx_index[i] = 0;
    ad82:	2200      	movs	r2, #0
		rx_count[i] = len;
    ad84:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ad88:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    ad8a:	4e19      	ldr	r6, [pc, #100]	; (adf0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    ad8c:	bf88      	it	hi
    ad8e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    ad90:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    ad94:	bf98      	it	ls
    ad96:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    ad98:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    ad9a:	4b16      	ldr	r3, [pc, #88]	; (adf4 <rx_event+0xac>)
		rx_head = head;
    ad9c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    ad9e:	681a      	ldr	r2, [r3, #0]
    ada0:	4414      	add	r4, r2
    ada2:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    ada8:	4628      	mov	r0, r5
}
    adaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    adae:	f7ff bf9b 	b.w	ace8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    adb2:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    adb6:	4910      	ldr	r1, [pc, #64]	; (adf8 <rx_event+0xb0>)
    adb8:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    adba:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    adbc:	4408      	add	r0, r1
    adbe:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    adc2:	f7ff f8f3 	bl	9fac <memcpy>
				rx_available += len;
    adc6:	4a0b      	ldr	r2, [pc, #44]	; (adf4 <rx_event+0xac>)
				rx_queue_transfer(i);
    adc8:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    adca:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    adce:	6813      	ldr	r3, [r2, #0]
    add0:	4423      	add	r3, r4
}
    add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    add6:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    add8:	f7ff bf86 	b.w	ace8 <rx_queue_transfer>
    addc:	2001888e 	.word	0x2001888e
    ade0:	200188a8 	.word	0x200188a8
    ade4:	200188a9 	.word	0x200188a9
    ade8:	20018828 	.word	0x20018828
    adec:	20018848 	.word	0x20018848
    adf0:	20018838 	.word	0x20018838
    adf4:	20018824 	.word	0x20018824
    adf8:	20200080 	.word	0x20200080

0000adfc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    adfc:	4b1d      	ldr	r3, [pc, #116]	; (ae74 <usb_serial_flush_callback+0x78>)
    adfe:	781a      	ldrb	r2, [r3, #0]
    ae00:	2a00      	cmp	r2, #0
    ae02:	d136      	bne.n	ae72 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    ae04:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    ae08:	4a1b      	ldr	r2, [pc, #108]	; (ae78 <usb_serial_flush_callback+0x7c>)
    ae0a:	7812      	ldrb	r2, [r2, #0]
    ae0c:	b38a      	cbz	r2, ae72 <usb_serial_flush_callback+0x76>
{
    ae0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    ae12:	4d1a      	ldr	r5, [pc, #104]	; (ae7c <usb_serial_flush_callback+0x80>)
    ae14:	882a      	ldrh	r2, [r5, #0]
    ae16:	b352      	cbz	r2, ae6e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ae18:	4e19      	ldr	r6, [pc, #100]	; (ae80 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    ae1a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    ae1e:	4f19      	ldr	r7, [pc, #100]	; (ae84 <usb_serial_flush_callback+0x88>)
    ae20:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ae22:	4c19      	ldr	r4, [pc, #100]	; (ae88 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    ae24:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ae28:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ae2c:	4642      	mov	r2, r8
    ae2e:	4638      	mov	r0, r7
    ae30:	4621      	mov	r1, r4
    ae32:	f7ff fee5 	bl	ac00 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ae36:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    ae3a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ae3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ae42:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ae46:	3420      	adds	r4, #32
	} while (location < end_addr);
    ae48:	42a2      	cmp	r2, r4
    ae4a:	d8fa      	bhi.n	ae42 <usb_serial_flush_callback+0x46>
	asm("dsb");
    ae4c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ae50:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ae54:	2004      	movs	r0, #4
    ae56:	4639      	mov	r1, r7
    ae58:	f7ff feea 	bl	ac30 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ae5c:	7833      	ldrb	r3, [r6, #0]
    ae5e:	3301      	adds	r3, #1
    ae60:	b2db      	uxtb	r3, r3
    ae62:	2b03      	cmp	r3, #3
    ae64:	bf88      	it	hi
    ae66:	2300      	movhi	r3, #0
    ae68:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    ae6a:	2300      	movs	r3, #0
    ae6c:	802b      	strh	r3, [r5, #0]
}
    ae6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ae72:	4770      	bx	lr
    ae74:	200188ad 	.word	0x200188ad
    ae78:	200188af 	.word	0x200188af
    ae7c:	20018890 	.word	0x20018890
    ae80:	200188ac 	.word	0x200188ac
    ae84:	20005000 	.word	0x20005000
    ae88:	20201080 	.word	0x20201080

0000ae8c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae90:	b085      	sub	sp, #20
	while (size > 0) {
    ae92:	e9cd 1001 	strd	r1, r0, [sp, #4]
    ae96:	2900      	cmp	r1, #0
    ae98:	f000 80bf 	beq.w	b01a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    ae9c:	2300      	movs	r3, #0
    ae9e:	4c60      	ldr	r4, [pc, #384]	; (b020 <usb_serial_write.part.0+0x194>)
    aea0:	f8df 8198 	ldr.w	r8, [pc, #408]	; b03c <usb_serial_write.part.0+0x1b0>
    aea4:	f8df a198 	ldr.w	sl, [pc, #408]	; b040 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    aea8:	4f5e      	ldr	r7, [pc, #376]	; (b024 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    aeaa:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    aeac:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    aeae:	4a5e      	ldr	r2, [pc, #376]	; (b028 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    aeb0:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    aeb2:	4b5e      	ldr	r3, [pc, #376]	; (b02c <usb_serial_write.part.0+0x1a0>)
    aeb4:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    aeb6:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    aeba:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    aebe:	2b00      	cmp	r3, #0
    aec0:	f040 80a7 	bne.w	b012 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    aec4:	461e      	mov	r6, r3
		int waiting=0;
    aec6:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    aec8:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    aeca:	4648      	mov	r0, r9
    aecc:	f7ff fed2 	bl	ac74 <usb_transfer_status>
			if (!(status & 0x80)) {
    aed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    aed4:	f000 808c 	beq.w	aff0 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    aed8:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    aedc:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    aee0:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    aee4:	b905      	cbnz	r5, aee8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    aee6:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    aee8:	2b00      	cmp	r3, #0
    aeea:	d17d      	bne.n	afe8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    aeec:	683b      	ldr	r3, [r7, #0]
    aeee:	1b9b      	subs	r3, r3, r6
    aef0:	2b78      	cmp	r3, #120	; 0x78
    aef2:	f200 8087 	bhi.w	b004 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    aef6:	4b4e      	ldr	r3, [pc, #312]	; (b030 <usb_serial_write.part.0+0x1a4>)
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	2b00      	cmp	r3, #0
    aefc:	d074      	beq.n	afe8 <usb_serial_write.part.0+0x15c>
			yield();
    aefe:	f000 fa93 	bl	b428 <yield>
			tx_noautoflush = 1;
    af02:	2201      	movs	r2, #1
		while (!tx_available) {
    af04:	f8b8 3000 	ldrh.w	r3, [r8]
    af08:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    af0a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    af0c:	2b00      	cmp	r3, #0
    af0e:	d0dc      	beq.n	aeca <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    af10:	4a46      	ldr	r2, [pc, #280]	; (b02c <usb_serial_write.part.0+0x1a0>)
    af12:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    af16:	7811      	ldrb	r1, [r2, #0]
    af18:	461a      	mov	r2, r3
    af1a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    af1e:	4d45      	ldr	r5, [pc, #276]	; (b034 <usb_serial_write.part.0+0x1a8>)
    af20:	02c9      	lsls	r1, r1, #11
    af22:	4428      	add	r0, r5
		if (size >= tx_available) {
    af24:	9d01      	ldr	r5, [sp, #4]
    af26:	4295      	cmp	r5, r2
    af28:	d217      	bcs.n	af5a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    af2a:	9303      	str	r3, [sp, #12]
    af2c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    af30:	462a      	mov	r2, r5
    af32:	f7ff f83b 	bl	9fac <memcpy>
			tx_available -= size;
    af36:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    af38:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    af3c:	1b5b      	subs	r3, r3, r5
    af3e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    af42:	4b3d      	ldr	r3, [pc, #244]	; (b038 <usb_serial_write.part.0+0x1ac>)
    af44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    af48:	f3bf 8f4f 	dsb	sy
			sent += size;
    af4c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    af4e:	2300      	movs	r3, #0
			sent += size;
    af50:	4428      	add	r0, r5
		tx_noautoflush = 0;
    af52:	7023      	strb	r3, [r4, #0]
}
    af54:	b005      	add	sp, #20
    af56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    af5a:	4b36      	ldr	r3, [pc, #216]	; (b034 <usb_serial_write.part.0+0x1a8>)
    af5c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    af5e:	9902      	ldr	r1, [sp, #8]
    af60:	f7ff f824 	bl	9fac <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    af64:	2300      	movs	r3, #0
    af66:	f44f 6200 	mov.w	r2, #2048	; 0x800
    af6a:	4629      	mov	r1, r5
    af6c:	4648      	mov	r0, r9
    af6e:	f7ff fe47 	bl	ac00 <usb_prepare_transfer>
	asm("dsb");
    af72:	f3bf 8f4f 	dsb	sy
    af76:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    af7a:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    af7e:	4293      	cmp	r3, r2
    af80:	bf34      	ite	cc
    af82:	2301      	movcc	r3, #1
    af84:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    af86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    af8a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    af8e:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    af92:	3520      	adds	r5, #32
	} while (location < end_addr);
    af94:	42ab      	cmp	r3, r5
    af96:	d1fa      	bne.n	af8e <usb_serial_write.part.0+0x102>
	asm("dsb");
    af98:	f3bf 8f4f 	dsb	sy
	asm("isb");
    af9c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    afa0:	2004      	movs	r0, #4
    afa2:	4649      	mov	r1, r9
    afa4:	f7ff fe44 	bl	ac30 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    afa8:	4a20      	ldr	r2, [pc, #128]	; (b02c <usb_serial_write.part.0+0x1a0>)
    afaa:	7813      	ldrb	r3, [r2, #0]
    afac:	3301      	adds	r3, #1
    afae:	b2db      	uxtb	r3, r3
    afb0:	2b03      	cmp	r3, #3
    afb2:	bf84      	itt	hi
    afb4:	2300      	movhi	r3, #0
    afb6:	4a1d      	ldrhi	r2, [pc, #116]	; (b02c <usb_serial_write.part.0+0x1a0>)
    afb8:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    afba:	f8b8 3000 	ldrh.w	r3, [r8]
    afbe:	9a01      	ldr	r2, [sp, #4]
    afc0:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    afc2:	9a00      	ldr	r2, [sp, #0]
    afc4:	441a      	add	r2, r3
			size -= tx_available;
    afc6:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    afc8:	9200      	str	r2, [sp, #0]
			data += tx_available;
    afca:	9a02      	ldr	r2, [sp, #8]
    afcc:	441a      	add	r2, r3
			tx_available = 0;
    afce:	2300      	movs	r3, #0
			data += tx_available;
    afd0:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    afd2:	4a19      	ldr	r2, [pc, #100]	; (b038 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    afd4:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    afd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    afdc:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    afe0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    afe2:	2900      	cmp	r1, #0
    afe4:	f47f af62 	bne.w	aeac <usb_serial_write.part.0+0x20>
	return sent;
    afe8:	9800      	ldr	r0, [sp, #0]
}
    afea:	b005      	add	sp, #20
    afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    aff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aff4:	4b0d      	ldr	r3, [pc, #52]	; (b02c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    aff6:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    affa:	7819      	ldrb	r1, [r3, #0]
				break;
    affc:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    affe:	f8a8 2000 	strh.w	r2, [r8]
				break;
    b002:	e78a      	b.n	af1a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    b004:	2301      	movs	r3, #1
				return sent;
    b006:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    b008:	f88a 3000 	strb.w	r3, [sl]
}
    b00c:	b005      	add	sp, #20
    b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b012:	461a      	mov	r2, r3
    b014:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    b018:	e77f      	b.n	af1a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    b01a:	9801      	ldr	r0, [sp, #4]
	return sent;
    b01c:	e7e5      	b.n	afea <usb_serial_write.part.0+0x15e>
    b01e:	bf00      	nop
    b020:	200188ad 	.word	0x200188ad
    b024:	2001886c 	.word	0x2001886c
    b028:	20005000 	.word	0x20005000
    b02c:	200188ac 	.word	0x200188ac
    b030:	200188af 	.word	0x200188af
    b034:	20201080 	.word	0x20201080
    b038:	402e0000 	.word	0x402e0000
    b03c:	20018890 	.word	0x20018890
    b040:	200188ab 	.word	0x200188ab

0000b044 <usb_serial_reset>:
}
    b044:	4770      	bx	lr
    b046:	bf00      	nop

0000b048 <usb_serial_configure>:
	if (usb_high_speed) {
    b048:	4b2a      	ldr	r3, [pc, #168]	; (b0f4 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b04a:	2100      	movs	r1, #0
    b04c:	2280      	movs	r2, #128	; 0x80
    b04e:	482a      	ldr	r0, [pc, #168]	; (b0f8 <usb_serial_configure+0xb0>)
{
    b050:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    b052:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    b054:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    b056:	4d29      	ldr	r5, [pc, #164]	; (b0fc <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    b058:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    b05a:	4e29      	ldr	r6, [pc, #164]	; (b100 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    b05c:	bf0c      	ite	eq
    b05e:	2340      	moveq	r3, #64	; 0x40
    b060:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    b064:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    b066:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b068:	f001 fd48 	bl	cafc <memset>
	tx_head = 0;
    b06c:	4a25      	ldr	r2, [pc, #148]	; (b104 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b06e:	4621      	mov	r1, r4
	tx_available = 0;
    b070:	4b25      	ldr	r3, [pc, #148]	; (b108 <usb_serial_configure+0xc0>)
	tx_head = 0;
    b072:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b074:	f44f 7280 	mov.w	r2, #256	; 0x100
    b078:	4824      	ldr	r0, [pc, #144]	; (b10c <usb_serial_configure+0xc4>)
	tx_available = 0;
    b07a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b07c:	f001 fd3e 	bl	cafc <memset>
	memset(rx_count, 0, sizeof(rx_count));
    b080:	4a23      	ldr	r2, [pc, #140]	; (b110 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b082:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    b084:	4b23      	ldr	r3, [pc, #140]	; (b114 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b086:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    b088:	e9c2 4400 	strd	r4, r4, [r2]
    b08c:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    b090:	4a21      	ldr	r2, [pc, #132]	; (b118 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    b092:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    b096:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    b098:	4a20      	ldr	r2, [pc, #128]	; (b11c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    b09a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    b09e:	4b20      	ldr	r3, [pc, #128]	; (b120 <usb_serial_configure+0xd8>)
    b0a0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b0a2:	4623      	mov	r3, r4
	rx_available = 0;
    b0a4:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b0a6:	4622      	mov	r2, r4
    b0a8:	f7ff fd78 	bl	ab9c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    b0ac:	4622      	mov	r2, r4
    b0ae:	8831      	ldrh	r1, [r6, #0]
    b0b0:	2003      	movs	r0, #3
    b0b2:	4b1c      	ldr	r3, [pc, #112]	; (b124 <usb_serial_configure+0xdc>)
    b0b4:	f7ff fd40 	bl	ab38 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    b0b8:	4623      	mov	r3, r4
    b0ba:	2201      	movs	r2, #1
    b0bc:	8829      	ldrh	r1, [r5, #0]
    b0be:	2004      	movs	r0, #4
    b0c0:	f7ff fd6c 	bl	ab9c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b0c4:	4620      	mov	r0, r4
    b0c6:	3401      	adds	r4, #1
    b0c8:	f7ff fe0e 	bl	ace8 <rx_queue_transfer>
    b0cc:	2c08      	cmp	r4, #8
    b0ce:	d1f9      	bne.n	b0c4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    b0d0:	4b15      	ldr	r3, [pc, #84]	; (b128 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    b0d2:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    b0d4:	4815      	ldr	r0, [pc, #84]	; (b12c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    b0d6:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    b0d8:	4c15      	ldr	r4, [pc, #84]	; (b130 <usb_serial_configure+0xe8>)
    b0da:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    b0dc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    b0e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    b0e4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b0e8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    b0ec:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    b0f0:	bd70      	pop	{r4, r5, r6, pc}
    b0f2:	bf00      	nop
    b0f4:	200188b0 	.word	0x200188b0
    b0f8:	20005000 	.word	0x20005000
    b0fc:	20018892 	.word	0x20018892
    b100:	2001888e 	.word	0x2001888e
    b104:	200188ac 	.word	0x200188ac
    b108:	20018890 	.word	0x20018890
    b10c:	20004f00 	.word	0x20004f00
    b110:	20018828 	.word	0x20018828
    b114:	20018838 	.word	0x20018838
    b118:	200188a8 	.word	0x200188a8
    b11c:	20018824 	.word	0x20018824
    b120:	200188a9 	.word	0x200188a9
    b124:	0000ad49 	.word	0x0000ad49
    b128:	402e0000 	.word	0x402e0000
    b12c:	20018880 	.word	0x20018880
    b130:	0000adfd 	.word	0x0000adfd

0000b134 <usb_serial_read>:
{
    b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b138:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b13c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    b140:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b20c <usb_serial_read+0xd8>
{
    b144:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b146:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    b14a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    b14c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    b150:	2900      	cmp	r1, #0
    b152:	d04f      	beq.n	b1f4 <usb_serial_read+0xc0>
    b154:	4680      	mov	r8, r0
    b156:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    b158:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    b15a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b210 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    b15e:	4b26      	ldr	r3, [pc, #152]	; (b1f8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    b160:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b164:	4925      	ldr	r1, [pc, #148]	; (b1fc <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    b166:	781b      	ldrb	r3, [r3, #0]
    b168:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    b16a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    b16e:	d03f      	beq.n	b1f0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    b170:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    b172:	4b23      	ldr	r3, [pc, #140]	; (b200 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b174:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    b176:	bf28      	it	cs
    b178:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    b17a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    b17c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b180:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    b184:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    b186:	4b1f      	ldr	r3, [pc, #124]	; (b204 <usb_serial_read+0xd0>)
    b188:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    b18c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    b190:	42aa      	cmp	r2, r5
    b192:	d21c      	bcs.n	b1ce <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b194:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    b198:	4918      	ldr	r1, [pc, #96]	; (b1fc <usb_serial_read+0xc8>)
			rx_available -= len;
    b19a:	4c1b      	ldr	r4, [pc, #108]	; (b208 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b19c:	4461      	add	r1, ip
    b19e:	9201      	str	r2, [sp, #4]
    b1a0:	f7fe ff04 	bl	9fac <memcpy>
			rx_available -= len;
    b1a4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    b1a6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    b1aa:	4658      	mov	r0, fp
			rx_index[i] += len;
    b1ac:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    b1ae:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    b1b2:	442a      	add	r2, r5
			rx_available -= len;
    b1b4:	4439      	add	r1, r7
			rx_index[i] += len;
    b1b6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    b1ba:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b1bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b1c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b1c4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    b1c8:	b003      	add	sp, #12
    b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b1ce:	462a      	mov	r2, r5
			count += avail;
    b1d0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b1d2:	f7fe feeb 	bl	9fac <memcpy>
			rx_available -= avail;
    b1d6:	490c      	ldr	r1, [pc, #48]	; (b208 <usb_serial_read+0xd4>)
			rx_tail = tail;
    b1d8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    b1da:	4630      	mov	r0, r6
			rx_available -= avail;
    b1dc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    b1de:	44a8      	add	r8, r5
			rx_available -= avail;
    b1e0:	1b52      	subs	r2, r2, r5
    b1e2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    b1e4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    b1e8:	f7ff fd7e 	bl	ace8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    b1ec:	45bb      	cmp	fp, r7
    b1ee:	d8b6      	bhi.n	b15e <usb_serial_read+0x2a>
	return count;
    b1f0:	4638      	mov	r0, r7
    b1f2:	e7e3      	b.n	b1bc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    b1f4:	4608      	mov	r0, r1
    b1f6:	e7e1      	b.n	b1bc <usb_serial_read+0x88>
    b1f8:	200188a8 	.word	0x200188a8
    b1fc:	20200080 	.word	0x20200080
    b200:	20018848 	.word	0x20018848
    b204:	20018828 	.word	0x20018828
    b208:	20018824 	.word	0x20018824
    b20c:	200188a9 	.word	0x200188a9
    b210:	20018838 	.word	0x20018838

0000b214 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    b214:	4b0b      	ldr	r3, [pc, #44]	; (b244 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    b216:	4a0c      	ldr	r2, [pc, #48]	; (b248 <usb_serial_peekchar+0x34>)
    b218:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    b21a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    b21c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    b21e:	428a      	cmp	r2, r1
    b220:	d00d      	beq.n	b23e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    b222:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    b224:	4809      	ldr	r0, [pc, #36]	; (b24c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b226:	4a0a      	ldr	r2, [pc, #40]	; (b250 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    b228:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b22a:	490a      	ldr	r1, [pc, #40]	; (b254 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    b22c:	bf28      	it	cs
    b22e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    b230:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b232:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    b236:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    b23a:	5c58      	ldrb	r0, [r3, r1]
    b23c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    b23e:	f04f 30ff 	mov.w	r0, #4294967295
}
    b242:	4770      	bx	lr
    b244:	200188a8 	.word	0x200188a8
    b248:	200188a9 	.word	0x200188a9
    b24c:	20018848 	.word	0x20018848
    b250:	20200080 	.word	0x20200080
    b254:	20018838 	.word	0x20018838

0000b258 <usb_serial_available>:
	uint32_t n = rx_available;
    b258:	4b04      	ldr	r3, [pc, #16]	; (b26c <usb_serial_available+0x14>)
{
    b25a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    b25c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    b25e:	b10c      	cbz	r4, b264 <usb_serial_available+0xc>
}
    b260:	4620      	mov	r0, r4
    b262:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    b264:	f000 f8e0 	bl	b428 <yield>
}
    b268:	4620      	mov	r0, r4
    b26a:	bd10      	pop	{r4, pc}
    b26c:	20018824 	.word	0x20018824

0000b270 <usb_serial_flush_input>:
{
    b270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    b274:	4e14      	ldr	r6, [pc, #80]	; (b2c8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    b276:	4d15      	ldr	r5, [pc, #84]	; (b2cc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    b278:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    b27a:	782a      	ldrb	r2, [r5, #0]
    b27c:	4293      	cmp	r3, r2
    b27e:	d021      	beq.n	b2c4 <usb_serial_flush_input+0x54>
    b280:	b2dc      	uxtb	r4, r3
    b282:	f8df 9050 	ldr.w	r9, [pc, #80]	; b2d4 <usb_serial_flush_input+0x64>
    b286:	f8df b050 	ldr.w	fp, [pc, #80]	; b2d8 <usb_serial_flush_input+0x68>
    b28a:	f8df 8050 	ldr.w	r8, [pc, #80]	; b2dc <usb_serial_flush_input+0x6c>
    b28e:	4f10      	ldr	r7, [pc, #64]	; (b2d0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    b290:	3401      	adds	r4, #1
    b292:	2c08      	cmp	r4, #8
		rx_tail = tail;
    b294:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    b298:	d901      	bls.n	b29e <usb_serial_flush_input+0x2e>
    b29a:	2400      	movs	r4, #0
    b29c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    b29e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    b2a2:	f8db 3000 	ldr.w	r3, [fp]
    b2a6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    b2aa:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    b2ae:	1a52      	subs	r2, r2, r1
    b2b0:	1a9b      	subs	r3, r3, r2
    b2b2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    b2b6:	f7ff fd17 	bl	ace8 <rx_queue_transfer>
		rx_tail = tail;
    b2ba:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    b2be:	782b      	ldrb	r3, [r5, #0]
    b2c0:	42a3      	cmp	r3, r4
    b2c2:	d1e5      	bne.n	b290 <usb_serial_flush_input+0x20>
}
    b2c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2c8:	200188a9 	.word	0x200188a9
    b2cc:	200188a8 	.word	0x200188a8
    b2d0:	20018838 	.word	0x20018838
    b2d4:	20018848 	.word	0x20018848
    b2d8:	20018824 	.word	0x20018824
    b2dc:	20018828 	.word	0x20018828

0000b2e0 <usb_serial_getchar>:
{
    b2e0:	b500      	push	{lr}
    b2e2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    b2e4:	2101      	movs	r1, #1
    b2e6:	f10d 0007 	add.w	r0, sp, #7
    b2ea:	f7ff ff23 	bl	b134 <usb_serial_read>
    b2ee:	b120      	cbz	r0, b2fa <usb_serial_getchar+0x1a>
    b2f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    b2f4:	b003      	add	sp, #12
    b2f6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    b2fa:	f04f 30ff 	mov.w	r0, #4294967295
    b2fe:	e7f9      	b.n	b2f4 <usb_serial_getchar+0x14>

0000b300 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    b300:	4b09      	ldr	r3, [pc, #36]	; (b328 <usb_serial_putchar+0x28>)
{
    b302:	b500      	push	{lr}
    b304:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    b306:	781b      	ldrb	r3, [r3, #0]
{
    b308:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    b30c:	b13b      	cbz	r3, b31e <usb_serial_putchar+0x1e>
    b30e:	2101      	movs	r1, #1
    b310:	f10d 0007 	add.w	r0, sp, #7
    b314:	f7ff fdba 	bl	ae8c <usb_serial_write.part.0>
}
    b318:	b003      	add	sp, #12
    b31a:	f85d fb04 	ldr.w	pc, [sp], #4
    b31e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b322:	b003      	add	sp, #12
    b324:	f85d fb04 	ldr.w	pc, [sp], #4
    b328:	200188af 	.word	0x200188af

0000b32c <usb_serial_write>:
	if (!usb_configuration) return 0;
    b32c:	4b04      	ldr	r3, [pc, #16]	; (b340 <usb_serial_write+0x14>)
    b32e:	781b      	ldrb	r3, [r3, #0]
    b330:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b334:	b10b      	cbz	r3, b33a <usb_serial_write+0xe>
    b336:	f7ff bda9 	b.w	ae8c <usb_serial_write.part.0>
}
    b33a:	4610      	mov	r0, r2
    b33c:	4770      	bx	lr
    b33e:	bf00      	nop
    b340:	200188af 	.word	0x200188af

0000b344 <usb_serial_write_buffer_free>:
{
    b344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    b348:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    b34a:	f8df 8044 	ldr.w	r8, [pc, #68]	; b390 <usb_serial_write_buffer_free+0x4c>
    b34e:	2301      	movs	r3, #1
    b350:	4d0d      	ldr	r5, [pc, #52]	; (b388 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    b352:	4627      	mov	r7, r4
    b354:	4e0d      	ldr	r6, [pc, #52]	; (b38c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    b356:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    b35a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b35c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    b35e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    b360:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    b362:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    b366:	d005      	beq.n	b374 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b368:	f7ff fc84 	bl	ac74 <usb_transfer_status>
    b36c:	0603      	lsls	r3, r0, #24
    b36e:	bf58      	it	pl
    b370:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    b374:	2c04      	cmp	r4, #4
    b376:	d1f0      	bne.n	b35a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    b378:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    b37c:	2300      	movs	r3, #0
}
    b37e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    b380:	f888 3000 	strb.w	r3, [r8]
}
    b384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b388:	20005000 	.word	0x20005000
    b38c:	200188ac 	.word	0x200188ac
    b390:	200188ad 	.word	0x200188ad

0000b394 <usb_serial_flush_output>:
{
    b394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    b398:	4b1d      	ldr	r3, [pc, #116]	; (b410 <usb_serial_flush_output+0x7c>)
    b39a:	781b      	ldrb	r3, [r3, #0]
    b39c:	b113      	cbz	r3, b3a4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    b39e:	4d1d      	ldr	r5, [pc, #116]	; (b414 <usb_serial_flush_output+0x80>)
    b3a0:	882a      	ldrh	r2, [r5, #0]
    b3a2:	b90a      	cbnz	r2, b3a8 <usb_serial_flush_output+0x14>
}
    b3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    b3a8:	4e1b      	ldr	r6, [pc, #108]	; (b418 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    b3aa:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    b3ae:	491b      	ldr	r1, [pc, #108]	; (b41c <usb_serial_flush_output+0x88>)
    b3b0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b3b2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b3b4:	4c1a      	ldr	r4, [pc, #104]	; (b420 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    b3b6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    b3ba:	4f1a      	ldr	r7, [pc, #104]	; (b424 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b3bc:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    b3c0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b3c2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    b3c4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b3c6:	4621      	mov	r1, r4
    b3c8:	2300      	movs	r3, #0
    b3ca:	f7ff fc19 	bl	ac00 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    b3ce:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    b3d2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b3d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b3da:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    b3de:	3420      	adds	r4, #32
	} while (location < end_addr);
    b3e0:	42a2      	cmp	r2, r4
    b3e2:	d8fa      	bhi.n	b3da <usb_serial_flush_output+0x46>
	asm("dsb");
    b3e4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b3e8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b3ec:	2004      	movs	r0, #4
    b3ee:	4641      	mov	r1, r8
    b3f0:	f7ff fc1e 	bl	ac30 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b3f4:	7833      	ldrb	r3, [r6, #0]
    b3f6:	3301      	adds	r3, #1
    b3f8:	b2db      	uxtb	r3, r3
    b3fa:	2b03      	cmp	r3, #3
    b3fc:	bf88      	it	hi
    b3fe:	2300      	movhi	r3, #0
    b400:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    b402:	2300      	movs	r3, #0
    b404:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    b406:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    b40a:	703b      	strb	r3, [r7, #0]
}
    b40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b410:	200188af 	.word	0x200188af
    b414:	20018890 	.word	0x20018890
    b418:	200188ac 	.word	0x200188ac
    b41c:	20005000 	.word	0x20005000
    b420:	20201080 	.word	0x20201080
    b424:	200188ad 	.word	0x200188ad

0000b428 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b42c:	4e32      	ldr	r6, [pc, #200]	; (b4f8 <yield+0xd0>)
    b42e:	7833      	ldrb	r3, [r6, #0]
    b430:	b163      	cbz	r3, b44c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    b432:	4f32      	ldr	r7, [pc, #200]	; (b4fc <yield+0xd4>)
    b434:	783a      	ldrb	r2, [r7, #0]
    b436:	b94a      	cbnz	r2, b44c <yield+0x24>
	running = 1;
    b438:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b43a:	07d9      	lsls	r1, r3, #31
	running = 1;
    b43c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b43e:	d444      	bmi.n	b4ca <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    b440:	079a      	lsls	r2, r3, #30
    b442:	d426      	bmi.n	b492 <yield+0x6a>

	running = 0;
    b444:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b446:	075b      	lsls	r3, r3, #29
	running = 0;
    b448:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b44a:	d401      	bmi.n	b450 <yield+0x28>
	
};
    b44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b450:	4b2b      	ldr	r3, [pc, #172]	; (b500 <yield+0xd8>)
    b452:	681a      	ldr	r2, [r3, #0]
    b454:	2a00      	cmp	r2, #0
    b456:	d0f9      	beq.n	b44c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b458:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    b45c:	2a00      	cmp	r2, #0
    b45e:	d1f5      	bne.n	b44c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b460:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    b464:	b672      	cpsid	i
		EventResponder *first = firstYield;
    b466:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    b468:	2800      	cmp	r0, #0
    b46a:	d03b      	beq.n	b4e4 <yield+0xbc>
		if (runningFromYield) {
    b46c:	4c25      	ldr	r4, [pc, #148]	; (b504 <yield+0xdc>)
    b46e:	7821      	ldrb	r1, [r4, #0]
    b470:	2900      	cmp	r1, #0
    b472:	d137      	bne.n	b4e4 <yield+0xbc>
		runningFromYield = true;
    b474:	2201      	movs	r2, #1
    b476:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    b478:	6942      	ldr	r2, [r0, #20]
    b47a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    b47c:	2a00      	cmp	r2, #0
    b47e:	d038      	beq.n	b4f2 <yield+0xca>
			firstYield->_prev = nullptr;
    b480:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b482:	b905      	cbnz	r5, b486 <yield+0x5e>
    b484:	b662      	cpsie	i
		first->_triggered = false;
    b486:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    b488:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    b48a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b48c:	4798      	blx	r3
		runningFromYield = false;
    b48e:	7025      	strb	r5, [r4, #0]
    b490:	e7dc      	b.n	b44c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b492:	f8df 807c 	ldr.w	r8, [pc, #124]	; b510 <yield+0xe8>
    b496:	f898 2000 	ldrb.w	r2, [r8]
    b49a:	2a00      	cmp	r2, #0
    b49c:	d0d2      	beq.n	b444 <yield+0x1c>
    b49e:	2500      	movs	r5, #0
    b4a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; b514 <yield+0xec>
    b4a4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    b4a6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b4aa:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b4ac:	6823      	ldr	r3, [r4, #0]
    b4ae:	4620      	mov	r0, r4
    b4b0:	691b      	ldr	r3, [r3, #16]
    b4b2:	4798      	blx	r3
    b4b4:	b110      	cbz	r0, b4bc <yield+0x94>
    b4b6:	6963      	ldr	r3, [r4, #20]
    b4b8:	689b      	ldr	r3, [r3, #8]
    b4ba:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b4bc:	f898 2000 	ldrb.w	r2, [r8]
    b4c0:	b2eb      	uxtb	r3, r5
    b4c2:	429a      	cmp	r2, r3
    b4c4:	d8ef      	bhi.n	b4a6 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b4c6:	7833      	ldrb	r3, [r6, #0]
    b4c8:	e7bc      	b.n	b444 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    b4ca:	f7ff fec5 	bl	b258 <usb_serial_available>
		if (Serial.available()) serialEvent();
    b4ce:	b968      	cbnz	r0, b4ec <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b4d0:	4b0d      	ldr	r3, [pc, #52]	; (b508 <yield+0xe0>)
    b4d2:	781b      	ldrb	r3, [r3, #0]
    b4d4:	b90b      	cbnz	r3, b4da <yield+0xb2>
    b4d6:	7833      	ldrb	r3, [r6, #0]
    b4d8:	e7b2      	b.n	b440 <yield+0x18>
    b4da:	7833      	ldrb	r3, [r6, #0]
    b4dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b4e0:	7033      	strb	r3, [r6, #0]
    b4e2:	e7ad      	b.n	b440 <yield+0x18>
		if (doit) __enable_irq();
    b4e4:	2d00      	cmp	r5, #0
    b4e6:	d1b1      	bne.n	b44c <yield+0x24>
    b4e8:	b662      	cpsie	i
    b4ea:	e7af      	b.n	b44c <yield+0x24>
		if (Serial.available()) serialEvent();
    b4ec:	f000 fa8a 	bl	ba04 <serialEvent()>
    b4f0:	e7ee      	b.n	b4d0 <yield+0xa8>
			lastYield = nullptr;
    b4f2:	4b06      	ldr	r3, [pc, #24]	; (b50c <yield+0xe4>)
    b4f4:	601a      	str	r2, [r3, #0]
    b4f6:	e7c4      	b.n	b482 <yield+0x5a>
    b4f8:	20004952 	.word	0x20004952
    b4fc:	20018896 	.word	0x20018896
    b500:	20005088 	.word	0x20005088
    b504:	20018894 	.word	0x20018894
    b508:	60001f58 	.word	0x60001f58
    b50c:	20005094 	.word	0x20005094
    b510:	20018895 	.word	0x20018895
    b514:	20005098 	.word	0x20005098

0000b518 <EventResponder::runFromInterrupt()>:
{
    b518:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b51a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b51e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b520:	4c0c      	ldr	r4, [pc, #48]	; (b554 <EventResponder::runFromInterrupt()+0x3c>)
    b522:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b524:	b180      	cbz	r0, b548 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    b526:	4e0c      	ldr	r6, [pc, #48]	; (b558 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    b528:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    b52a:	6943      	ldr	r3, [r0, #20]
    b52c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    b52e:	b173      	cbz	r3, b54e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    b530:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    b532:	b902      	cbnz	r2, b536 <EventResponder::runFromInterrupt()+0x1e>
    b534:	b662      	cpsie	i
			(*(first->_function))(*first);
    b536:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    b538:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    b53a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b53c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b540:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b542:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b544:	2800      	cmp	r0, #0
    b546:	d1f0      	bne.n	b52a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    b548:	b902      	cbnz	r2, b54c <EventResponder::runFromInterrupt()+0x34>
    b54a:	b662      	cpsie	i
}
    b54c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    b54e:	6033      	str	r3, [r6, #0]
    b550:	e7ef      	b.n	b532 <EventResponder::runFromInterrupt()+0x1a>
    b552:	bf00      	nop
    b554:	20005090 	.word	0x20005090
    b558:	2000508c 	.word	0x2000508c

0000b55c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b55c:	f7ff bfdc 	b.w	b518 <EventResponder::runFromInterrupt()>

0000b560 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b560:	4904      	ldr	r1, [pc, #16]	; (b574 <systick_isr+0x14>)
	systick_millis_count++;
    b562:	4a05      	ldr	r2, [pc, #20]	; (b578 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    b564:	6849      	ldr	r1, [r1, #4]
    b566:	4b05      	ldr	r3, [pc, #20]	; (b57c <systick_isr+0x1c>)
    b568:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    b56a:	6813      	ldr	r3, [r2, #0]
    b56c:	3301      	adds	r3, #1
    b56e:	6013      	str	r3, [r2, #0]
}
    b570:	4770      	bx	lr
    b572:	bf00      	nop
    b574:	e0001000 	.word	0xe0001000
    b578:	2001886c 	.word	0x2001886c
    b57c:	20018868 	.word	0x20018868

0000b580 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b580:	49a2      	ldr	r1, [pc, #648]	; (b80c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b582:	4ba3      	ldr	r3, [pc, #652]	; (b810 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    b584:	4288      	cmp	r0, r1
{
    b586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    b58a:	4ca2      	ldr	r4, [pc, #648]	; (b814 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b58c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b58e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b590:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    b594:	d91b      	bls.n	b5ce <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b596:	4ba0      	ldr	r3, [pc, #640]	; (b818 <set_arm_clock+0x298>)
    b598:	4298      	cmp	r0, r3
    b59a:	f240 8102 	bls.w	b7a2 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b59e:	1ac3      	subs	r3, r0, r3
    b5a0:	499e      	ldr	r1, [pc, #632]	; (b81c <set_arm_clock+0x29c>)
    b5a2:	0a1b      	lsrs	r3, r3, #8
    b5a4:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b5a8:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b5ac:	09db      	lsrs	r3, r3, #7
    b5ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b5b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b5b6:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b5ba:	428b      	cmp	r3, r1
    b5bc:	bf28      	it	cs
    b5be:	460b      	movcs	r3, r1
    b5c0:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    b5c4:	4b96      	ldr	r3, [pc, #600]	; (b820 <set_arm_clock+0x2a0>)
    b5c6:	fba3 3707 	umull	r3, r7, r3, r7
    b5ca:	08ff      	lsrs	r7, r7, #3
    b5cc:	e004      	b.n	b5d8 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    b5ce:	4f95      	ldr	r7, [pc, #596]	; (b824 <set_arm_clock+0x2a4>)
    b5d0:	42b8      	cmp	r0, r7
    b5d2:	bf8c      	ite	hi
    b5d4:	270e      	movhi	r7, #14
    b5d6:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b5d8:	498d      	ldr	r1, [pc, #564]	; (b810 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b5da:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b5de:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b5e2:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b5e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b5e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b5ec:	d20c      	bcs.n	b608 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b5ee:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b5f2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b5f6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    b5fa:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b5fe:	680b      	ldr	r3, [r1, #0]
    b600:	2b00      	cmp	r3, #0
    b602:	dafc      	bge.n	b5fe <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b604:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b608:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    b60c:	d124      	bne.n	b658 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b60e:	4986      	ldr	r1, [pc, #536]	; (b828 <set_arm_clock+0x2a8>)
    b610:	690c      	ldr	r4, [r1, #16]
    b612:	4986      	ldr	r1, [pc, #536]	; (b82c <set_arm_clock+0x2ac>)
    b614:	43a1      	bics	r1, r4
    b616:	f000 80ea 	beq.w	b7ee <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b61a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    b61e:	4634      	mov	r4, r6
    b620:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b624:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    b628:	d004      	beq.n	b634 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b62a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b62e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    b630:	4b77      	ldr	r3, [pc, #476]	; (b810 <set_arm_clock+0x290>)
    b632:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b634:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    b638:	d007      	beq.n	b64a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b63a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    b63e:	4974      	ldr	r1, [pc, #464]	; (b810 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b640:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    b642:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b644:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    b646:	071a      	lsls	r2, r3, #28
    b648:	d4fc      	bmi.n	b644 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b64a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b64e:	4a70      	ldr	r2, [pc, #448]	; (b810 <set_arm_clock+0x290>)
    b650:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b652:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b654:	069b      	lsls	r3, r3, #26
    b656:	d4fc      	bmi.n	b652 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    b658:	4c75      	ldr	r4, [pc, #468]	; (b830 <set_arm_clock+0x2b0>)
    b65a:	42a0      	cmp	r0, r4
    b65c:	f200 80ce 	bhi.w	b7fc <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    b660:	f04f 0c01 	mov.w	ip, #1
    b664:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    b666:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    b668:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    b66c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    b670:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b674:	42a2      	cmp	r2, r4
    b676:	d818      	bhi.n	b6aa <set_arm_clock+0x12a>
		if (div_arm < 8) {
    b678:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    b67c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    b680:	f040 808d 	bne.w	b79e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    b684:	f1bc 0f04 	cmp.w	ip, #4
    b688:	f200 8091 	bhi.w	b7ae <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    b68c:	180a      	adds	r2, r1, r0
    b68e:	42a2      	cmp	r2, r4
    b690:	f200 80a4 	bhi.w	b7dc <set_arm_clock+0x25c>
    b694:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    b698:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    b69a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b69e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    b6a2:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b6a6:	42a2      	cmp	r2, r4
    b6a8:	d9e6      	bls.n	b678 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b6aa:	f10c 31ff 	add.w	r1, ip, #4294967295
    b6ae:	028c      	lsls	r4, r1, #10
    b6b0:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b6b4:	485f      	ldr	r0, [pc, #380]	; (b834 <set_arm_clock+0x2b4>)
    b6b6:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    b6b8:	4a5f      	ldr	r2, [pc, #380]	; (b838 <set_arm_clock+0x2b8>)
    b6ba:	4290      	cmp	r0, r2
    b6bc:	d97f      	bls.n	b7be <set_arm_clock+0x23e>
    b6be:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b864 <set_arm_clock+0x2e4>
    b6c2:	226c      	movs	r2, #108	; 0x6c
    b6c4:	485d      	ldr	r0, [pc, #372]	; (b83c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b6c6:	4d58      	ldr	r5, [pc, #352]	; (b828 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b6c8:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b6cc:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    b6d0:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b6d4:	f8df c190 	ldr.w	ip, [pc, #400]	; b868 <set_arm_clock+0x2e8>
    b6d8:	ea0e 0c0c 	and.w	ip, lr, ip
    b6dc:	45d4      	cmp	ip, sl
    b6de:	d009      	beq.n	b6f4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b6e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b6e4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    b6e8:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b6ec:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b6ee:	682a      	ldr	r2, [r5, #0]
    b6f0:	2a00      	cmp	r2, #0
    b6f2:	dafc      	bge.n	b6ee <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b6f4:	4a46      	ldr	r2, [pc, #280]	; (b810 <set_arm_clock+0x290>)
    b6f6:	6915      	ldr	r5, [r2, #16]
    b6f8:	f005 0507 	and.w	r5, r5, #7
    b6fc:	429d      	cmp	r5, r3
    b6fe:	d003      	beq.n	b708 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b700:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b702:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b704:	03dd      	lsls	r5, r3, #15
    b706:	d4fc      	bmi.n	b702 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b708:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    b70c:	d009      	beq.n	b722 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b70e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b712:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    b716:	4a3e      	ldr	r2, [pc, #248]	; (b810 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b718:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    b71a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b71c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b71e:	0799      	lsls	r1, r3, #30
    b720:	d4fc      	bmi.n	b71c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b722:	4947      	ldr	r1, [pc, #284]	; (b840 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    b724:	4a47      	ldr	r2, [pc, #284]	; (b844 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b726:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    b728:	4291      	cmp	r1, r2
    b72a:	d83c      	bhi.n	b7a6 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b72c:	4b46      	ldr	r3, [pc, #280]	; (b848 <set_arm_clock+0x2c8>)
    b72e:	09c9      	lsrs	r1, r1, #7
    b730:	fba3 3101 	umull	r3, r1, r3, r1
    b734:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b736:	1e4b      	subs	r3, r1, #1
    b738:	021b      	lsls	r3, r3, #8
    b73a:	ea86 0203 	eor.w	r2, r6, r3
    b73e:	f412 7f40 	tst.w	r2, #768	; 0x300
    b742:	d006      	beq.n	b752 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b744:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b748:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    b74c:	4a30      	ldr	r2, [pc, #192]	; (b810 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b74e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    b750:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b752:	4a2f      	ldr	r2, [pc, #188]	; (b810 <set_arm_clock+0x290>)
    b754:	6953      	ldr	r3, [r2, #20]
    b756:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    b75a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b75c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b75e:	069b      	lsls	r3, r3, #26
    b760:	d4fc      	bmi.n	b75c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b762:	4b3a      	ldr	r3, [pc, #232]	; (b84c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b764:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b766:	fba3 2300 	umull	r2, r3, r3, r0
    b76a:	f04f 32ff 	mov.w	r2, #4294967295
    b76e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    b772:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b776:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    b77a:	4a35      	ldr	r2, [pc, #212]	; (b850 <set_arm_clock+0x2d0>)
    b77c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b77e:	4a35      	ldr	r2, [pc, #212]	; (b854 <set_arm_clock+0x2d4>)
    b780:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b782:	4a35      	ldr	r2, [pc, #212]	; (b858 <set_arm_clock+0x2d8>)
    b784:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b786:	d208      	bcs.n	b79a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b788:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b78c:	4a21      	ldr	r2, [pc, #132]	; (b814 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b78e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    b792:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b794:	6813      	ldr	r3, [r2, #0]
    b796:	2b00      	cmp	r3, #0
    b798:	dafc      	bge.n	b794 <set_arm_clock+0x214>
	}

	return frequency;
}
    b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b79e:	4673      	mov	r3, lr
    b7a0:	e762      	b.n	b668 <set_arm_clock+0xe8>
    b7a2:	2712      	movs	r7, #18
    b7a4:	e718      	b.n	b5d8 <set_arm_clock+0x58>
    b7a6:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    b7aa:	2104      	movs	r1, #4
    b7ac:	e7c5      	b.n	b73a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b7ae:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b7b2:	4820      	ldr	r0, [pc, #128]	; (b834 <set_arm_clock+0x2b4>)
    b7b4:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b7b6:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b7b8:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b7ba:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b7be:	4a27      	ldr	r2, [pc, #156]	; (b85c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b7c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b86c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b7c4:	fba2 2000 	umull	r2, r0, r2, r0
    b7c8:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    b7ca:	4825      	ldr	r0, [pc, #148]	; (b860 <set_arm_clock+0x2e0>)
    b7cc:	2a36      	cmp	r2, #54	; 0x36
    b7ce:	bf38      	it	cc
    b7d0:	2236      	movcc	r2, #54	; 0x36
    b7d2:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b7d6:	ea42 0a0a 	orr.w	sl, r2, sl
    b7da:	e774      	b.n	b6c6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b7dc:	ea4f 248c 	mov.w	r4, ip, lsl #10
    b7e0:	2300      	movs	r3, #0
    b7e2:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    b7e6:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    b7ea:	46ac      	mov	ip, r5
    b7ec:	e762      	b.n	b6b4 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b7ee:	461d      	mov	r5, r3
    b7f0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    b7f4:	4611      	mov	r1, r2
    b7f6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    b7fa:	e713      	b.n	b624 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    b7fc:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    b7fe:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b802:	4602      	mov	r2, r0
    b804:	4631      	mov	r1, r6
    b806:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    b808:	46e6      	mov	lr, ip
    b80a:	e753      	b.n	b6b4 <set_arm_clock+0x134>
    b80c:	1f78a400 	.word	0x1f78a400
    b810:	400fc000 	.word	0x400fc000
    b814:	40080000 	.word	0x40080000
    b818:	23c34600 	.word	0x23c34600
    b81c:	004cb223 	.word	0x004cb223
    b820:	51eb851f 	.word	0x51eb851f
    b824:	016e3600 	.word	0x016e3600
    b828:	400d8000 	.word	0x400d8000
    b82c:	80003040 	.word	0x80003040
    b830:	269fb1ff 	.word	0x269fb1ff
    b834:	005b8d80 	.word	0x005b8d80
    b838:	4df67eff 	.word	0x4df67eff
    b83c:	4d3f6400 	.word	0x4d3f6400
    b840:	08f0d17f 	.word	0x08f0d17f
    b844:	2cb4177f 	.word	0x2cb4177f
    b848:	00e5109f 	.word	0x00e5109f
    b84c:	431bde83 	.word	0x431bde83
    b850:	2000433c 	.word	0x2000433c
    b854:	20004338 	.word	0x20004338
    b858:	20018864 	.word	0x20018864
    b85c:	165e9f81 	.word	0x165e9f81
    b860:	00b71b00 	.word	0x00b71b00
    b864:	8000206c 	.word	0x8000206c
    b868:	8001307f 	.word	0x8001307f
    b86c:	80002000 	.word	0x80002000

0000b870 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b870:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    b872:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b874:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    b878:	4619      	mov	r1, r3
{
    b87a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b87c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b880:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b884:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b888:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    b88c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    b890:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    b892:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b896:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b89a:	b29b      	uxth	r3, r3
    b89c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    b8a0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b8a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    b8a8:	3101      	adds	r1, #1
    b8aa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    b8ae:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b8b0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b8b2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b8b6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b8b8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b8ba:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b8bc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b8be:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    b8c2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b8c4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b8c6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b8c8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    b8ca:	d1eb      	bne.n	b8a4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b8cc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b8d0:	b29b      	uxth	r3, r3
    b8d2:	f043 030f 	orr.w	r3, r3, #15
    b8d6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b8da:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b8de:	b29b      	uxth	r3, r3
    b8e0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    b8e4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    b8e8:	bd10      	pop	{r4, pc}
    b8ea:	bf00      	nop

0000b8ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b8ec:	4b37      	ldr	r3, [pc, #220]	; (b9cc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b8ee:	4a38      	ldr	r2, [pc, #224]	; (b9d0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b8f0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    b8f2:	4838      	ldr	r0, [pc, #224]	; (b9d4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b8f4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    b8f8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b8fa:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b8fc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b900:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b904:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b908:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b90c:	430a      	orrs	r2, r1
    b90e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    b912:	f7ff ffad 	bl	b870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    b916:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b91a:	f7ff ffa9 	bl	b870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    b91e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b922:	f7ff ffa5 	bl	b870 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    b926:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    b92a:	f7ff ffa1 	bl	b870 <flexpwm_init>
	for (i=0; i < 4; i++) {
    b92e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b930:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b934:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    b938:	4611      	mov	r1, r2
    b93a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b93e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b942:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b944:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b946:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b948:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b94a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b94e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b950:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b952:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b956:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b958:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b95a:	d1ee      	bne.n	b93a <pwm_init+0x4e>
    b95c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b95e:	481e      	ldr	r0, [pc, #120]	; (b9d8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b960:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b964:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b968:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b96a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b96e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b972:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b976:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b97a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b97c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b97e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b980:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b982:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b986:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b988:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b98a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b98e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b990:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    b992:	d1ee      	bne.n	b972 <pwm_init+0x86>
    b994:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    b996:	4811      	ldr	r0, [pc, #68]	; (b9dc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b998:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b99a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    b99e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b9a0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b9a4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    b9a8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    b9ac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    b9b0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    b9b2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    b9b4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    b9b6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    b9b8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b9ba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b9bc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    b9be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    b9c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b9c4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    b9c8:	d1ee      	bne.n	b9a8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    b9ca:	bd70      	pop	{r4, r5, r6, pc}
    b9cc:	400fc000 	.word	0x400fc000
    b9d0:	fc030000 	.word	0xfc030000
    b9d4:	403dc000 	.word	0x403dc000
    b9d8:	401e0000 	.word	0x401e0000
    b9dc:	401e4000 	.word	0x401e4000

0000b9e0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b9e0:	4a07      	ldr	r2, [pc, #28]	; (ba00 <rtc_get+0x20>)
    b9e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b9e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    b9e6:	4619      	mov	r1, r3
    b9e8:	4684      	mov	ip, r0
    b9ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b9ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b9ee:	4299      	cmp	r1, r3
    b9f0:	d1f9      	bne.n	b9e6 <rtc_get+0x6>
    b9f2:	4584      	cmp	ip, r0
    b9f4:	d1f7      	bne.n	b9e6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    b9f6:	0bdb      	lsrs	r3, r3, #15
}
    b9f8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    b9fc:	4770      	bx	lr
    b9fe:	bf00      	nop
    ba00:	400d4000 	.word	0x400d4000

0000ba04 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    ba04:	4770      	bx	lr
    ba06:	bf00      	nop

0000ba08 <sm_align_pool>:
{
    ba08:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    ba0a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    ba0e:	b15b      	cbz	r3, ba28 <sm_align_pool+0x20>
    ba10:	b1ba      	cbz	r2, ba42 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    ba12:	4b0f      	ldr	r3, [pc, #60]	; (ba50 <sm_align_pool+0x48>)
    ba14:	fba3 1302 	umull	r1, r3, r3, r2
    ba18:	08db      	lsrs	r3, r3, #3
    ba1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ba1e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ba22:	d10a      	bne.n	ba3a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    ba24:	2001      	movs	r0, #1
}
    ba26:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    ba28:	4b09      	ldr	r3, [pc, #36]	; (ba50 <sm_align_pool+0x48>)
    ba2a:	fba3 1302 	umull	r1, r3, r3, r2
    ba2e:	08db      	lsrs	r3, r3, #3
    ba30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    ba34:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ba38:	d001      	beq.n	ba3e <sm_align_pool+0x36>
    ba3a:	1ad2      	subs	r2, r2, r3
    ba3c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ba3e:	2af0      	cmp	r2, #240	; 0xf0
    ba40:	d8f0      	bhi.n	ba24 <sm_align_pool+0x1c>
		errno = ENOSPC;
    ba42:	f001 f9b1 	bl	cda8 <__errno>
    ba46:	221c      	movs	r2, #28
    ba48:	4603      	mov	r3, r0
    ba4a:	2000      	movs	r0, #0
    ba4c:	601a      	str	r2, [r3, #0]
}
    ba4e:	bd08      	pop	{r3, pc}
    ba50:	aaaaaaab 	.word	0xaaaaaaab

0000ba54 <sm_set_pool>:
{
    ba54:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ba56:	4604      	mov	r4, r0
    ba58:	b338      	cbz	r0, baaa <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    ba5a:	b119      	cbz	r1, ba64 <sm_set_pool+0x10>
    ba5c:	fab2 f682 	clz	r6, r2
    ba60:	0976      	lsrs	r6, r6, #5
    ba62:	b9a2      	cbnz	r2, ba8e <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    ba64:	6820      	ldr	r0, [r4, #0]
    ba66:	b300      	cbz	r0, baaa <sm_set_pool+0x56>
    ba68:	6862      	ldr	r2, [r4, #4]
    ba6a:	b1f2      	cbz	r2, baaa <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    ba6c:	4b18      	ldr	r3, [pc, #96]	; (bad0 <sm_set_pool+0x7c>)
    ba6e:	4919      	ldr	r1, [pc, #100]	; (bad4 <sm_set_pool+0x80>)
    ba70:	fb02 f303 	mul.w	r3, r2, r3
    ba74:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    ba78:	d317      	bcc.n	baaa <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ba7a:	68a3      	ldr	r3, [r4, #8]
    ba7c:	b9e3      	cbnz	r3, bab8 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ba7e:	2200      	movs	r2, #0
			return 1;
    ba80:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    ba82:	6022      	str	r2, [r4, #0]
    ba84:	6062      	str	r2, [r4, #4]
    ba86:	60a2      	str	r2, [r4, #8]
    ba88:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ba8a:	4618      	mov	r0, r3
    ba8c:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    ba8e:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    ba90:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    ba92:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    ba96:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    ba98:	f7ff ffb6 	bl	ba08 <sm_align_pool>
    ba9c:	4603      	mov	r3, r0
    ba9e:	2800      	cmp	r0, #0
    baa0:	d0f3      	beq.n	ba8a <sm_set_pool+0x36>
	if (do_zero) {
    baa2:	b96d      	cbnz	r5, bac0 <sm_set_pool+0x6c>
	return 1;
    baa4:	2301      	movs	r3, #1
}
    baa6:	4618      	mov	r0, r3
    baa8:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    baaa:	f001 f97d 	bl	cda8 <__errno>
    baae:	2216      	movs	r2, #22
		return 0;
    bab0:	2300      	movs	r3, #0
		errno = EINVAL;
    bab2:	6002      	str	r2, [r0, #0]
}
    bab4:	4618      	mov	r0, r3
    bab6:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bab8:	2100      	movs	r1, #0
    baba:	f001 f81f 	bl	cafc <memset>
    babe:	e7de      	b.n	ba7e <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bac0:	6862      	ldr	r2, [r4, #4]
    bac2:	4631      	mov	r1, r6
    bac4:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bac6:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bac8:	f001 f818 	bl	cafc <memset>
	return 1;
    bacc:	2301      	movs	r3, #1
    bace:	e7dc      	b.n	ba8a <sm_set_pool+0x36>
    bad0:	aaaaaaab 	.word	0xaaaaaaab
    bad4:	15555555 	.word	0x15555555

0000bad8 <__aeabi_atexit>:
    bad8:	4603      	mov	r3, r0
    bada:	4608      	mov	r0, r1
    badc:	4619      	mov	r1, r3
    bade:	f000 be27 	b.w	c730 <__cxa_atexit>
    bae2:	bf00      	nop

0000bae4 <atol>:
    bae4:	220a      	movs	r2, #10
    bae6:	2100      	movs	r1, #0
    bae8:	f000 bd66 	b.w	c5b8 <strtol>

0000baec <malloc>:
    baec:	4b02      	ldr	r3, [pc, #8]	; (baf8 <malloc+0xc>)
    baee:	4601      	mov	r1, r0
    baf0:	6818      	ldr	r0, [r3, #0]
    baf2:	f000 b80b 	b.w	bb0c <_malloc_r>
    baf6:	bf00      	nop
    baf8:	200048e4 	.word	0x200048e4

0000bafc <free>:
    bafc:	4b02      	ldr	r3, [pc, #8]	; (bb08 <free+0xc>)
    bafe:	4601      	mov	r1, r0
    bb00:	6818      	ldr	r0, [r3, #0]
    bb02:	f001 bc5f 	b.w	d3c4 <_free_r>
    bb06:	bf00      	nop
    bb08:	200048e4 	.word	0x200048e4

0000bb0c <_malloc_r>:
    bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb10:	f101 060b 	add.w	r6, r1, #11
    bb14:	2e16      	cmp	r6, #22
    bb16:	b083      	sub	sp, #12
    bb18:	4604      	mov	r4, r0
    bb1a:	d824      	bhi.n	bb66 <_malloc_r+0x5a>
    bb1c:	2910      	cmp	r1, #16
    bb1e:	f200 80ba 	bhi.w	bc96 <_malloc_r+0x18a>
    bb22:	f000 faa3 	bl	c06c <__malloc_lock>
    bb26:	2610      	movs	r6, #16
    bb28:	2218      	movs	r2, #24
    bb2a:	2002      	movs	r0, #2
    bb2c:	4fb5      	ldr	r7, [pc, #724]	; (be04 <_malloc_r+0x2f8>)
    bb2e:	443a      	add	r2, r7
    bb30:	f1a2 0108 	sub.w	r1, r2, #8
    bb34:	6853      	ldr	r3, [r2, #4]
    bb36:	428b      	cmp	r3, r1
    bb38:	f000 80ba 	beq.w	bcb0 <_malloc_r+0x1a4>
    bb3c:	685a      	ldr	r2, [r3, #4]
    bb3e:	68d9      	ldr	r1, [r3, #12]
    bb40:	f022 0203 	bic.w	r2, r2, #3
    bb44:	441a      	add	r2, r3
    bb46:	689d      	ldr	r5, [r3, #8]
    bb48:	60e9      	str	r1, [r5, #12]
    bb4a:	608d      	str	r5, [r1, #8]
    bb4c:	6851      	ldr	r1, [r2, #4]
    bb4e:	f041 0101 	orr.w	r1, r1, #1
    bb52:	4620      	mov	r0, r4
    bb54:	6051      	str	r1, [r2, #4]
    bb56:	f103 0508 	add.w	r5, r3, #8
    bb5a:	f000 fa8d 	bl	c078 <__malloc_unlock>
    bb5e:	4628      	mov	r0, r5
    bb60:	b003      	add	sp, #12
    bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb66:	f036 0607 	bics.w	r6, r6, #7
    bb6a:	f100 8094 	bmi.w	bc96 <_malloc_r+0x18a>
    bb6e:	42b1      	cmp	r1, r6
    bb70:	f200 8091 	bhi.w	bc96 <_malloc_r+0x18a>
    bb74:	f000 fa7a 	bl	c06c <__malloc_lock>
    bb78:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    bb7c:	f0c0 819a 	bcc.w	beb4 <_malloc_r+0x3a8>
    bb80:	0a73      	lsrs	r3, r6, #9
    bb82:	f000 808f 	beq.w	bca4 <_malloc_r+0x198>
    bb86:	2b04      	cmp	r3, #4
    bb88:	f200 816f 	bhi.w	be6a <_malloc_r+0x35e>
    bb8c:	09b3      	lsrs	r3, r6, #6
    bb8e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    bb92:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    bb96:	00c3      	lsls	r3, r0, #3
    bb98:	4f9a      	ldr	r7, [pc, #616]	; (be04 <_malloc_r+0x2f8>)
    bb9a:	443b      	add	r3, r7
    bb9c:	f1a3 0508 	sub.w	r5, r3, #8
    bba0:	685b      	ldr	r3, [r3, #4]
    bba2:	429d      	cmp	r5, r3
    bba4:	d106      	bne.n	bbb4 <_malloc_r+0xa8>
    bba6:	e00c      	b.n	bbc2 <_malloc_r+0xb6>
    bba8:	2900      	cmp	r1, #0
    bbaa:	f280 8127 	bge.w	bdfc <_malloc_r+0x2f0>
    bbae:	68db      	ldr	r3, [r3, #12]
    bbb0:	429d      	cmp	r5, r3
    bbb2:	d006      	beq.n	bbc2 <_malloc_r+0xb6>
    bbb4:	685a      	ldr	r2, [r3, #4]
    bbb6:	f022 0203 	bic.w	r2, r2, #3
    bbba:	1b91      	subs	r1, r2, r6
    bbbc:	290f      	cmp	r1, #15
    bbbe:	ddf3      	ble.n	bba8 <_malloc_r+0x9c>
    bbc0:	4660      	mov	r0, ip
    bbc2:	693d      	ldr	r5, [r7, #16]
    bbc4:	f8df c250 	ldr.w	ip, [pc, #592]	; be18 <_malloc_r+0x30c>
    bbc8:	4565      	cmp	r5, ip
    bbca:	d07c      	beq.n	bcc6 <_malloc_r+0x1ba>
    bbcc:	686a      	ldr	r2, [r5, #4]
    bbce:	f022 0203 	bic.w	r2, r2, #3
    bbd2:	1b93      	subs	r3, r2, r6
    bbd4:	2b0f      	cmp	r3, #15
    bbd6:	f300 817b 	bgt.w	bed0 <_malloc_r+0x3c4>
    bbda:	2b00      	cmp	r3, #0
    bbdc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    bbe0:	f280 816c 	bge.w	bebc <_malloc_r+0x3b0>
    bbe4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    bbe8:	f080 811a 	bcs.w	be20 <_malloc_r+0x314>
    bbec:	08d3      	lsrs	r3, r2, #3
    bbee:	6879      	ldr	r1, [r7, #4]
    bbf0:	3301      	adds	r3, #1
    bbf2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    bbf6:	2201      	movs	r2, #1
    bbf8:	fa02 f20e 	lsl.w	r2, r2, lr
    bbfc:	430a      	orrs	r2, r1
    bbfe:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    bc02:	f8c5 e008 	str.w	lr, [r5, #8]
    bc06:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    bc0a:	3908      	subs	r1, #8
    bc0c:	60e9      	str	r1, [r5, #12]
    bc0e:	607a      	str	r2, [r7, #4]
    bc10:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    bc14:	f8ce 500c 	str.w	r5, [lr, #12]
    bc18:	1083      	asrs	r3, r0, #2
    bc1a:	2101      	movs	r1, #1
    bc1c:	4099      	lsls	r1, r3
    bc1e:	4291      	cmp	r1, r2
    bc20:	d857      	bhi.n	bcd2 <_malloc_r+0x1c6>
    bc22:	4211      	tst	r1, r2
    bc24:	d106      	bne.n	bc34 <_malloc_r+0x128>
    bc26:	f020 0003 	bic.w	r0, r0, #3
    bc2a:	0049      	lsls	r1, r1, #1
    bc2c:	4211      	tst	r1, r2
    bc2e:	f100 0004 	add.w	r0, r0, #4
    bc32:	d0fa      	beq.n	bc2a <_malloc_r+0x11e>
    bc34:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    bc38:	464d      	mov	r5, r9
    bc3a:	4686      	mov	lr, r0
    bc3c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    bc40:	4545      	cmp	r5, r8
    bc42:	d108      	bne.n	bc56 <_malloc_r+0x14a>
    bc44:	e11d      	b.n	be82 <_malloc_r+0x376>
    bc46:	2b00      	cmp	r3, #0
    bc48:	f280 8124 	bge.w	be94 <_malloc_r+0x388>
    bc4c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    bc50:	4545      	cmp	r5, r8
    bc52:	f000 8116 	beq.w	be82 <_malloc_r+0x376>
    bc56:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bc5a:	f022 0203 	bic.w	r2, r2, #3
    bc5e:	1b93      	subs	r3, r2, r6
    bc60:	2b0f      	cmp	r3, #15
    bc62:	ddf0      	ble.n	bc46 <_malloc_r+0x13a>
    bc64:	4620      	mov	r0, r4
    bc66:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    bc6a:	eb08 0106 	add.w	r1, r8, r6
    bc6e:	f046 0601 	orr.w	r6, r6, #1
    bc72:	f8c8 6004 	str.w	r6, [r8, #4]
    bc76:	60ec      	str	r4, [r5, #12]
    bc78:	60a5      	str	r5, [r4, #8]
    bc7a:	f043 0401 	orr.w	r4, r3, #1
    bc7e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    bc82:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    bc86:	604c      	str	r4, [r1, #4]
    bc88:	f848 3002 	str.w	r3, [r8, r2]
    bc8c:	f000 f9f4 	bl	c078 <__malloc_unlock>
    bc90:	f108 0508 	add.w	r5, r8, #8
    bc94:	e002      	b.n	bc9c <_malloc_r+0x190>
    bc96:	230c      	movs	r3, #12
    bc98:	6023      	str	r3, [r4, #0]
    bc9a:	2500      	movs	r5, #0
    bc9c:	4628      	mov	r0, r5
    bc9e:	b003      	add	sp, #12
    bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bca4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bca8:	2040      	movs	r0, #64	; 0x40
    bcaa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    bcae:	e773      	b.n	bb98 <_malloc_r+0x8c>
    bcb0:	68d3      	ldr	r3, [r2, #12]
    bcb2:	429a      	cmp	r2, r3
    bcb4:	bf08      	it	eq
    bcb6:	3002      	addeq	r0, #2
    bcb8:	f47f af40 	bne.w	bb3c <_malloc_r+0x30>
    bcbc:	693d      	ldr	r5, [r7, #16]
    bcbe:	f8df c158 	ldr.w	ip, [pc, #344]	; be18 <_malloc_r+0x30c>
    bcc2:	4565      	cmp	r5, ip
    bcc4:	d182      	bne.n	bbcc <_malloc_r+0xc0>
    bcc6:	687a      	ldr	r2, [r7, #4]
    bcc8:	1083      	asrs	r3, r0, #2
    bcca:	2101      	movs	r1, #1
    bccc:	4099      	lsls	r1, r3
    bcce:	4291      	cmp	r1, r2
    bcd0:	d9a7      	bls.n	bc22 <_malloc_r+0x116>
    bcd2:	68bd      	ldr	r5, [r7, #8]
    bcd4:	686b      	ldr	r3, [r5, #4]
    bcd6:	f023 0903 	bic.w	r9, r3, #3
    bcda:	454e      	cmp	r6, r9
    bcdc:	d803      	bhi.n	bce6 <_malloc_r+0x1da>
    bcde:	eba9 0306 	sub.w	r3, r9, r6
    bce2:	2b0f      	cmp	r3, #15
    bce4:	dc7a      	bgt.n	bddc <_malloc_r+0x2d0>
    bce6:	f8df b134 	ldr.w	fp, [pc, #308]	; be1c <_malloc_r+0x310>
    bcea:	4b47      	ldr	r3, [pc, #284]	; (be08 <_malloc_r+0x2fc>)
    bcec:	f8db 2000 	ldr.w	r2, [fp]
    bcf0:	681b      	ldr	r3, [r3, #0]
    bcf2:	3201      	adds	r2, #1
    bcf4:	4433      	add	r3, r6
    bcf6:	eb05 0a09 	add.w	sl, r5, r9
    bcfa:	f000 8133 	beq.w	bf64 <_malloc_r+0x458>
    bcfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bd02:	330f      	adds	r3, #15
    bd04:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    bd08:	f028 080f 	bic.w	r8, r8, #15
    bd0c:	4641      	mov	r1, r8
    bd0e:	4620      	mov	r0, r4
    bd10:	f001 f822 	bl	cd58 <_sbrk_r>
    bd14:	1c41      	adds	r1, r0, #1
    bd16:	4602      	mov	r2, r0
    bd18:	f000 80f3 	beq.w	bf02 <_malloc_r+0x3f6>
    bd1c:	4582      	cmp	sl, r0
    bd1e:	f200 80ee 	bhi.w	befe <_malloc_r+0x3f2>
    bd22:	4b3a      	ldr	r3, [pc, #232]	; (be0c <_malloc_r+0x300>)
    bd24:	6819      	ldr	r1, [r3, #0]
    bd26:	4441      	add	r1, r8
    bd28:	6019      	str	r1, [r3, #0]
    bd2a:	4608      	mov	r0, r1
    bd2c:	f000 814e 	beq.w	bfcc <_malloc_r+0x4c0>
    bd30:	f8db 1000 	ldr.w	r1, [fp]
    bd34:	9301      	str	r3, [sp, #4]
    bd36:	3101      	adds	r1, #1
    bd38:	bf1b      	ittet	ne
    bd3a:	eba2 010a 	subne.w	r1, r2, sl
    bd3e:	1809      	addne	r1, r1, r0
    bd40:	f8cb 2000 	streq.w	r2, [fp]
    bd44:	6019      	strne	r1, [r3, #0]
    bd46:	f012 0b07 	ands.w	fp, r2, #7
    bd4a:	f000 8117 	beq.w	bf7c <_malloc_r+0x470>
    bd4e:	f1cb 0108 	rsb	r1, fp, #8
    bd52:	440a      	add	r2, r1
    bd54:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    bd58:	4490      	add	r8, r2
    bd5a:	3108      	adds	r1, #8
    bd5c:	eba1 0108 	sub.w	r1, r1, r8
    bd60:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    bd64:	4651      	mov	r1, sl
    bd66:	4620      	mov	r0, r4
    bd68:	9200      	str	r2, [sp, #0]
    bd6a:	f000 fff5 	bl	cd58 <_sbrk_r>
    bd6e:	1c42      	adds	r2, r0, #1
    bd70:	e9dd 2300 	ldrd	r2, r3, [sp]
    bd74:	f000 814f 	beq.w	c016 <_malloc_r+0x50a>
    bd78:	1a80      	subs	r0, r0, r2
    bd7a:	eb00 080a 	add.w	r8, r0, sl
    bd7e:	6819      	ldr	r1, [r3, #0]
    bd80:	60ba      	str	r2, [r7, #8]
    bd82:	f048 0001 	orr.w	r0, r8, #1
    bd86:	4451      	add	r1, sl
    bd88:	42bd      	cmp	r5, r7
    bd8a:	6050      	str	r0, [r2, #4]
    bd8c:	6019      	str	r1, [r3, #0]
    bd8e:	f000 8129 	beq.w	bfe4 <_malloc_r+0x4d8>
    bd92:	f1b9 0f0f 	cmp.w	r9, #15
    bd96:	f240 8127 	bls.w	bfe8 <_malloc_r+0x4dc>
    bd9a:	6868      	ldr	r0, [r5, #4]
    bd9c:	f1a9 0c0c 	sub.w	ip, r9, #12
    bda0:	f02c 0c07 	bic.w	ip, ip, #7
    bda4:	f000 0001 	and.w	r0, r0, #1
    bda8:	ea40 000c 	orr.w	r0, r0, ip
    bdac:	6068      	str	r0, [r5, #4]
    bdae:	f04f 0e05 	mov.w	lr, #5
    bdb2:	eb05 000c 	add.w	r0, r5, ip
    bdb6:	f1bc 0f0f 	cmp.w	ip, #15
    bdba:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    bdbe:	f200 8132 	bhi.w	c026 <_malloc_r+0x51a>
    bdc2:	6850      	ldr	r0, [r2, #4]
    bdc4:	4615      	mov	r5, r2
    bdc6:	4b12      	ldr	r3, [pc, #72]	; (be10 <_malloc_r+0x304>)
    bdc8:	681a      	ldr	r2, [r3, #0]
    bdca:	428a      	cmp	r2, r1
    bdcc:	bf38      	it	cc
    bdce:	6019      	strcc	r1, [r3, #0]
    bdd0:	4b10      	ldr	r3, [pc, #64]	; (be14 <_malloc_r+0x308>)
    bdd2:	681a      	ldr	r2, [r3, #0]
    bdd4:	428a      	cmp	r2, r1
    bdd6:	bf38      	it	cc
    bdd8:	6019      	strcc	r1, [r3, #0]
    bdda:	e094      	b.n	bf06 <_malloc_r+0x3fa>
    bddc:	19aa      	adds	r2, r5, r6
    bdde:	f043 0301 	orr.w	r3, r3, #1
    bde2:	f046 0601 	orr.w	r6, r6, #1
    bde6:	606e      	str	r6, [r5, #4]
    bde8:	4620      	mov	r0, r4
    bdea:	60ba      	str	r2, [r7, #8]
    bdec:	6053      	str	r3, [r2, #4]
    bdee:	f000 f943 	bl	c078 <__malloc_unlock>
    bdf2:	3508      	adds	r5, #8
    bdf4:	4628      	mov	r0, r5
    bdf6:	b003      	add	sp, #12
    bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdfc:	68d9      	ldr	r1, [r3, #12]
    bdfe:	441a      	add	r2, r3
    be00:	e6a1      	b.n	bb46 <_malloc_r+0x3a>
    be02:	bf00      	nop
    be04:	200044c8 	.word	0x200044c8
    be08:	20005288 	.word	0x20005288
    be0c:	20005258 	.word	0x20005258
    be10:	20005280 	.word	0x20005280
    be14:	20005284 	.word	0x20005284
    be18:	200044d0 	.word	0x200044d0
    be1c:	200048d0 	.word	0x200048d0
    be20:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    be24:	ea4f 2352 	mov.w	r3, r2, lsr #9
    be28:	d363      	bcc.n	bef2 <_malloc_r+0x3e6>
    be2a:	2b14      	cmp	r3, #20
    be2c:	f200 80b7 	bhi.w	bf9e <_malloc_r+0x492>
    be30:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    be34:	00c9      	lsls	r1, r1, #3
    be36:	335b      	adds	r3, #91	; 0x5b
    be38:	eb07 0e01 	add.w	lr, r7, r1
    be3c:	5879      	ldr	r1, [r7, r1]
    be3e:	f1ae 0e08 	sub.w	lr, lr, #8
    be42:	458e      	cmp	lr, r1
    be44:	f000 8091 	beq.w	bf6a <_malloc_r+0x45e>
    be48:	684b      	ldr	r3, [r1, #4]
    be4a:	f023 0303 	bic.w	r3, r3, #3
    be4e:	4293      	cmp	r3, r2
    be50:	d902      	bls.n	be58 <_malloc_r+0x34c>
    be52:	6889      	ldr	r1, [r1, #8]
    be54:	458e      	cmp	lr, r1
    be56:	d1f7      	bne.n	be48 <_malloc_r+0x33c>
    be58:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    be5c:	687a      	ldr	r2, [r7, #4]
    be5e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    be62:	f8ce 5008 	str.w	r5, [lr, #8]
    be66:	60cd      	str	r5, [r1, #12]
    be68:	e6d6      	b.n	bc18 <_malloc_r+0x10c>
    be6a:	2b14      	cmp	r3, #20
    be6c:	d959      	bls.n	bf22 <_malloc_r+0x416>
    be6e:	2b54      	cmp	r3, #84	; 0x54
    be70:	f200 809d 	bhi.w	bfae <_malloc_r+0x4a2>
    be74:	0b33      	lsrs	r3, r6, #12
    be76:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    be7a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    be7e:	00c3      	lsls	r3, r0, #3
    be80:	e68a      	b.n	bb98 <_malloc_r+0x8c>
    be82:	f10e 0e01 	add.w	lr, lr, #1
    be86:	f01e 0f03 	tst.w	lr, #3
    be8a:	f105 0508 	add.w	r5, r5, #8
    be8e:	f47f aed5 	bne.w	bc3c <_malloc_r+0x130>
    be92:	e051      	b.n	bf38 <_malloc_r+0x42c>
    be94:	4442      	add	r2, r8
    be96:	4645      	mov	r5, r8
    be98:	6853      	ldr	r3, [r2, #4]
    be9a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    be9e:	f043 0301 	orr.w	r3, r3, #1
    bea2:	6053      	str	r3, [r2, #4]
    bea4:	f855 3f08 	ldr.w	r3, [r5, #8]!
    bea8:	4620      	mov	r0, r4
    beaa:	60d9      	str	r1, [r3, #12]
    beac:	608b      	str	r3, [r1, #8]
    beae:	f000 f8e3 	bl	c078 <__malloc_unlock>
    beb2:	e6f3      	b.n	bc9c <_malloc_r+0x190>
    beb4:	08f0      	lsrs	r0, r6, #3
    beb6:	f106 0208 	add.w	r2, r6, #8
    beba:	e637      	b.n	bb2c <_malloc_r+0x20>
    bebc:	442a      	add	r2, r5
    bebe:	4620      	mov	r0, r4
    bec0:	6853      	ldr	r3, [r2, #4]
    bec2:	f043 0301 	orr.w	r3, r3, #1
    bec6:	6053      	str	r3, [r2, #4]
    bec8:	3508      	adds	r5, #8
    beca:	f000 f8d5 	bl	c078 <__malloc_unlock>
    bece:	e6e5      	b.n	bc9c <_malloc_r+0x190>
    bed0:	19a9      	adds	r1, r5, r6
    bed2:	4620      	mov	r0, r4
    bed4:	f046 0601 	orr.w	r6, r6, #1
    bed8:	f043 0401 	orr.w	r4, r3, #1
    bedc:	606e      	str	r6, [r5, #4]
    bede:	e9c7 1104 	strd	r1, r1, [r7, #16]
    bee2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    bee6:	604c      	str	r4, [r1, #4]
    bee8:	50ab      	str	r3, [r5, r2]
    beea:	f000 f8c5 	bl	c078 <__malloc_unlock>
    beee:	3508      	adds	r5, #8
    bef0:	e6d4      	b.n	bc9c <_malloc_r+0x190>
    bef2:	0993      	lsrs	r3, r2, #6
    bef4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    bef8:	00c9      	lsls	r1, r1, #3
    befa:	3338      	adds	r3, #56	; 0x38
    befc:	e79c      	b.n	be38 <_malloc_r+0x32c>
    befe:	42bd      	cmp	r5, r7
    bf00:	d05f      	beq.n	bfc2 <_malloc_r+0x4b6>
    bf02:	68bd      	ldr	r5, [r7, #8]
    bf04:	6868      	ldr	r0, [r5, #4]
    bf06:	f020 0803 	bic.w	r8, r0, #3
    bf0a:	4546      	cmp	r6, r8
    bf0c:	eba8 0306 	sub.w	r3, r8, r6
    bf10:	d802      	bhi.n	bf18 <_malloc_r+0x40c>
    bf12:	2b0f      	cmp	r3, #15
    bf14:	f73f af62 	bgt.w	bddc <_malloc_r+0x2d0>
    bf18:	4620      	mov	r0, r4
    bf1a:	f000 f8ad 	bl	c078 <__malloc_unlock>
    bf1e:	2500      	movs	r5, #0
    bf20:	e6bc      	b.n	bc9c <_malloc_r+0x190>
    bf22:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    bf26:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    bf2a:	00c3      	lsls	r3, r0, #3
    bf2c:	e634      	b.n	bb98 <_malloc_r+0x8c>
    bf2e:	f859 3908 	ldr.w	r3, [r9], #-8
    bf32:	454b      	cmp	r3, r9
    bf34:	f040 8096 	bne.w	c064 <_malloc_r+0x558>
    bf38:	f010 0f03 	tst.w	r0, #3
    bf3c:	f100 30ff 	add.w	r0, r0, #4294967295
    bf40:	d1f5      	bne.n	bf2e <_malloc_r+0x422>
    bf42:	687b      	ldr	r3, [r7, #4]
    bf44:	ea23 0301 	bic.w	r3, r3, r1
    bf48:	607b      	str	r3, [r7, #4]
    bf4a:	0049      	lsls	r1, r1, #1
    bf4c:	4299      	cmp	r1, r3
    bf4e:	f63f aec0 	bhi.w	bcd2 <_malloc_r+0x1c6>
    bf52:	b919      	cbnz	r1, bf5c <_malloc_r+0x450>
    bf54:	e6bd      	b.n	bcd2 <_malloc_r+0x1c6>
    bf56:	0049      	lsls	r1, r1, #1
    bf58:	f10e 0e04 	add.w	lr, lr, #4
    bf5c:	4219      	tst	r1, r3
    bf5e:	d0fa      	beq.n	bf56 <_malloc_r+0x44a>
    bf60:	4670      	mov	r0, lr
    bf62:	e667      	b.n	bc34 <_malloc_r+0x128>
    bf64:	f103 0810 	add.w	r8, r3, #16
    bf68:	e6d0      	b.n	bd0c <_malloc_r+0x200>
    bf6a:	109a      	asrs	r2, r3, #2
    bf6c:	f04f 0801 	mov.w	r8, #1
    bf70:	687b      	ldr	r3, [r7, #4]
    bf72:	fa08 f202 	lsl.w	r2, r8, r2
    bf76:	431a      	orrs	r2, r3
    bf78:	607a      	str	r2, [r7, #4]
    bf7a:	e770      	b.n	be5e <_malloc_r+0x352>
    bf7c:	eb02 0108 	add.w	r1, r2, r8
    bf80:	4249      	negs	r1, r1
    bf82:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    bf86:	4651      	mov	r1, sl
    bf88:	4620      	mov	r0, r4
    bf8a:	9200      	str	r2, [sp, #0]
    bf8c:	f000 fee4 	bl	cd58 <_sbrk_r>
    bf90:	1c43      	adds	r3, r0, #1
    bf92:	e9dd 2300 	ldrd	r2, r3, [sp]
    bf96:	f47f aeef 	bne.w	bd78 <_malloc_r+0x26c>
    bf9a:	46da      	mov	sl, fp
    bf9c:	e6ef      	b.n	bd7e <_malloc_r+0x272>
    bf9e:	2b54      	cmp	r3, #84	; 0x54
    bfa0:	d825      	bhi.n	bfee <_malloc_r+0x4e2>
    bfa2:	0b13      	lsrs	r3, r2, #12
    bfa4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    bfa8:	00c9      	lsls	r1, r1, #3
    bfaa:	336e      	adds	r3, #110	; 0x6e
    bfac:	e744      	b.n	be38 <_malloc_r+0x32c>
    bfae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    bfb2:	d825      	bhi.n	c000 <_malloc_r+0x4f4>
    bfb4:	0bf3      	lsrs	r3, r6, #15
    bfb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    bfba:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    bfbe:	00c3      	lsls	r3, r0, #3
    bfc0:	e5ea      	b.n	bb98 <_malloc_r+0x8c>
    bfc2:	4b29      	ldr	r3, [pc, #164]	; (c068 <_malloc_r+0x55c>)
    bfc4:	6818      	ldr	r0, [r3, #0]
    bfc6:	4440      	add	r0, r8
    bfc8:	6018      	str	r0, [r3, #0]
    bfca:	e6b1      	b.n	bd30 <_malloc_r+0x224>
    bfcc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    bfd0:	f1bc 0f00 	cmp.w	ip, #0
    bfd4:	f47f aeac 	bne.w	bd30 <_malloc_r+0x224>
    bfd8:	68bd      	ldr	r5, [r7, #8]
    bfda:	44c8      	add	r8, r9
    bfdc:	f048 0001 	orr.w	r0, r8, #1
    bfe0:	6068      	str	r0, [r5, #4]
    bfe2:	e6f0      	b.n	bdc6 <_malloc_r+0x2ba>
    bfe4:	4615      	mov	r5, r2
    bfe6:	e6ee      	b.n	bdc6 <_malloc_r+0x2ba>
    bfe8:	2301      	movs	r3, #1
    bfea:	6053      	str	r3, [r2, #4]
    bfec:	e794      	b.n	bf18 <_malloc_r+0x40c>
    bfee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    bff2:	d823      	bhi.n	c03c <_malloc_r+0x530>
    bff4:	0bd3      	lsrs	r3, r2, #15
    bff6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    bffa:	00c9      	lsls	r1, r1, #3
    bffc:	3377      	adds	r3, #119	; 0x77
    bffe:	e71b      	b.n	be38 <_malloc_r+0x32c>
    c000:	f240 5254 	movw	r2, #1364	; 0x554
    c004:	4293      	cmp	r3, r2
    c006:	d823      	bhi.n	c050 <_malloc_r+0x544>
    c008:	0cb3      	lsrs	r3, r6, #18
    c00a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c00e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    c012:	00c3      	lsls	r3, r0, #3
    c014:	e5c0      	b.n	bb98 <_malloc_r+0x8c>
    c016:	f1ab 0b08 	sub.w	fp, fp, #8
    c01a:	44d8      	add	r8, fp
    c01c:	eba8 0802 	sub.w	r8, r8, r2
    c020:	f04f 0a00 	mov.w	sl, #0
    c024:	e6ab      	b.n	bd7e <_malloc_r+0x272>
    c026:	f105 0108 	add.w	r1, r5, #8
    c02a:	4620      	mov	r0, r4
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	f001 f9c9 	bl	d3c4 <_free_r>
    c032:	68bd      	ldr	r5, [r7, #8]
    c034:	9b00      	ldr	r3, [sp, #0]
    c036:	6868      	ldr	r0, [r5, #4]
    c038:	6819      	ldr	r1, [r3, #0]
    c03a:	e6c4      	b.n	bdc6 <_malloc_r+0x2ba>
    c03c:	f240 5154 	movw	r1, #1364	; 0x554
    c040:	428b      	cmp	r3, r1
    c042:	d80b      	bhi.n	c05c <_malloc_r+0x550>
    c044:	0c93      	lsrs	r3, r2, #18
    c046:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    c04a:	00c9      	lsls	r1, r1, #3
    c04c:	337c      	adds	r3, #124	; 0x7c
    c04e:	e6f3      	b.n	be38 <_malloc_r+0x32c>
    c050:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c054:	207f      	movs	r0, #127	; 0x7f
    c056:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    c05a:	e59d      	b.n	bb98 <_malloc_r+0x8c>
    c05c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    c060:	237e      	movs	r3, #126	; 0x7e
    c062:	e6e9      	b.n	be38 <_malloc_r+0x32c>
    c064:	687b      	ldr	r3, [r7, #4]
    c066:	e770      	b.n	bf4a <_malloc_r+0x43e>
    c068:	20005258 	.word	0x20005258

0000c06c <__malloc_lock>:
    c06c:	4801      	ldr	r0, [pc, #4]	; (c074 <__malloc_lock+0x8>)
    c06e:	f000 bec9 	b.w	ce04 <__retarget_lock_acquire_recursive>
    c072:	bf00      	nop
    c074:	20005250 	.word	0x20005250

0000c078 <__malloc_unlock>:
    c078:	4801      	ldr	r0, [pc, #4]	; (c080 <__malloc_unlock+0x8>)
    c07a:	f000 bec5 	b.w	ce08 <__retarget_lock_release_recursive>
    c07e:	bf00      	nop
    c080:	20005250 	.word	0x20005250

0000c084 <realloc>:
    c084:	b410      	push	{r4}
    c086:	4c04      	ldr	r4, [pc, #16]	; (c098 <realloc+0x14>)
    c088:	4603      	mov	r3, r0
    c08a:	460a      	mov	r2, r1
    c08c:	6820      	ldr	r0, [r4, #0]
    c08e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c092:	4619      	mov	r1, r3
    c094:	f000 b802 	b.w	c09c <_realloc_r>
    c098:	200048e4 	.word	0x200048e4

0000c09c <_realloc_r>:
    c09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0a0:	4617      	mov	r7, r2
    c0a2:	2900      	cmp	r1, #0
    c0a4:	f000 8098 	beq.w	c1d8 <_realloc_r+0x13c>
    c0a8:	460c      	mov	r4, r1
    c0aa:	f107 050b 	add.w	r5, r7, #11
    c0ae:	4680      	mov	r8, r0
    c0b0:	f7ff ffdc 	bl	c06c <__malloc_lock>
    c0b4:	2d16      	cmp	r5, #22
    c0b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    c0ba:	d85b      	bhi.n	c174 <_realloc_r+0xd8>
    c0bc:	2510      	movs	r5, #16
    c0be:	462a      	mov	r2, r5
    c0c0:	42af      	cmp	r7, r5
    c0c2:	d85c      	bhi.n	c17e <_realloc_r+0xe2>
    c0c4:	f021 0603 	bic.w	r6, r1, #3
    c0c8:	4296      	cmp	r6, r2
    c0ca:	f1a4 0908 	sub.w	r9, r4, #8
    c0ce:	da62      	bge.n	c196 <_realloc_r+0xfa>
    c0d0:	4bbc      	ldr	r3, [pc, #752]	; (c3c4 <_realloc_r+0x328>)
    c0d2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    c0d6:	eb09 0006 	add.w	r0, r9, r6
    c0da:	4584      	cmp	ip, r0
    c0dc:	f000 8097 	beq.w	c20e <_realloc_r+0x172>
    c0e0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c0e4:	f02c 0301 	bic.w	r3, ip, #1
    c0e8:	4403      	add	r3, r0
    c0ea:	685b      	ldr	r3, [r3, #4]
    c0ec:	07db      	lsls	r3, r3, #31
    c0ee:	d468      	bmi.n	c1c2 <_realloc_r+0x126>
    c0f0:	f02c 0c03 	bic.w	ip, ip, #3
    c0f4:	eb06 030c 	add.w	r3, r6, ip
    c0f8:	4293      	cmp	r3, r2
    c0fa:	da47      	bge.n	c18c <_realloc_r+0xf0>
    c0fc:	07cb      	lsls	r3, r1, #31
    c0fe:	d410      	bmi.n	c122 <_realloc_r+0x86>
    c100:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c104:	eba9 0a03 	sub.w	sl, r9, r3
    c108:	f8da 3004 	ldr.w	r3, [sl, #4]
    c10c:	f023 0103 	bic.w	r1, r3, #3
    c110:	448c      	add	ip, r1
    c112:	44b4      	add	ip, r6
    c114:	4594      	cmp	ip, r2
    c116:	f280 8111 	bge.w	c33c <_realloc_r+0x2a0>
    c11a:	1873      	adds	r3, r6, r1
    c11c:	4293      	cmp	r3, r2
    c11e:	f280 80e8 	bge.w	c2f2 <_realloc_r+0x256>
    c122:	4639      	mov	r1, r7
    c124:	4640      	mov	r0, r8
    c126:	f7ff fcf1 	bl	bb0c <_malloc_r>
    c12a:	4607      	mov	r7, r0
    c12c:	b1e0      	cbz	r0, c168 <_realloc_r+0xcc>
    c12e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c132:	f023 0301 	bic.w	r3, r3, #1
    c136:	444b      	add	r3, r9
    c138:	f1a0 0208 	sub.w	r2, r0, #8
    c13c:	4293      	cmp	r3, r2
    c13e:	f000 80d2 	beq.w	c2e6 <_realloc_r+0x24a>
    c142:	1f32      	subs	r2, r6, #4
    c144:	2a24      	cmp	r2, #36	; 0x24
    c146:	f200 80f5 	bhi.w	c334 <_realloc_r+0x298>
    c14a:	2a13      	cmp	r2, #19
    c14c:	f200 80ac 	bhi.w	c2a8 <_realloc_r+0x20c>
    c150:	4603      	mov	r3, r0
    c152:	4622      	mov	r2, r4
    c154:	6811      	ldr	r1, [r2, #0]
    c156:	6019      	str	r1, [r3, #0]
    c158:	6851      	ldr	r1, [r2, #4]
    c15a:	6059      	str	r1, [r3, #4]
    c15c:	6892      	ldr	r2, [r2, #8]
    c15e:	609a      	str	r2, [r3, #8]
    c160:	4621      	mov	r1, r4
    c162:	4640      	mov	r0, r8
    c164:	f001 f92e 	bl	d3c4 <_free_r>
    c168:	4640      	mov	r0, r8
    c16a:	f7ff ff85 	bl	c078 <__malloc_unlock>
    c16e:	4638      	mov	r0, r7
    c170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c174:	f025 0507 	bic.w	r5, r5, #7
    c178:	2d00      	cmp	r5, #0
    c17a:	462a      	mov	r2, r5
    c17c:	daa0      	bge.n	c0c0 <_realloc_r+0x24>
    c17e:	230c      	movs	r3, #12
    c180:	f8c8 3000 	str.w	r3, [r8]
    c184:	2700      	movs	r7, #0
    c186:	4638      	mov	r0, r7
    c188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c18c:	461e      	mov	r6, r3
    c18e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    c192:	60d3      	str	r3, [r2, #12]
    c194:	609a      	str	r2, [r3, #8]
    c196:	1b73      	subs	r3, r6, r5
    c198:	2b0f      	cmp	r3, #15
    c19a:	d822      	bhi.n	c1e2 <_realloc_r+0x146>
    c19c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c1a0:	f003 0301 	and.w	r3, r3, #1
    c1a4:	4333      	orrs	r3, r6
    c1a6:	444e      	add	r6, r9
    c1a8:	f8c9 3004 	str.w	r3, [r9, #4]
    c1ac:	6873      	ldr	r3, [r6, #4]
    c1ae:	f043 0301 	orr.w	r3, r3, #1
    c1b2:	6073      	str	r3, [r6, #4]
    c1b4:	4640      	mov	r0, r8
    c1b6:	4627      	mov	r7, r4
    c1b8:	f7ff ff5e 	bl	c078 <__malloc_unlock>
    c1bc:	4638      	mov	r0, r7
    c1be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1c2:	07c9      	lsls	r1, r1, #31
    c1c4:	d4ad      	bmi.n	c122 <_realloc_r+0x86>
    c1c6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c1ca:	eba9 0a03 	sub.w	sl, r9, r3
    c1ce:	f8da 1004 	ldr.w	r1, [sl, #4]
    c1d2:	f021 0103 	bic.w	r1, r1, #3
    c1d6:	e7a0      	b.n	c11a <_realloc_r+0x7e>
    c1d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1dc:	4611      	mov	r1, r2
    c1de:	f7ff bc95 	b.w	bb0c <_malloc_r>
    c1e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c1e6:	eb09 0105 	add.w	r1, r9, r5
    c1ea:	f002 0201 	and.w	r2, r2, #1
    c1ee:	444e      	add	r6, r9
    c1f0:	f043 0301 	orr.w	r3, r3, #1
    c1f4:	432a      	orrs	r2, r5
    c1f6:	f8c9 2004 	str.w	r2, [r9, #4]
    c1fa:	604b      	str	r3, [r1, #4]
    c1fc:	6873      	ldr	r3, [r6, #4]
    c1fe:	f043 0301 	orr.w	r3, r3, #1
    c202:	3108      	adds	r1, #8
    c204:	6073      	str	r3, [r6, #4]
    c206:	4640      	mov	r0, r8
    c208:	f001 f8dc 	bl	d3c4 <_free_r>
    c20c:	e7d2      	b.n	c1b4 <_realloc_r+0x118>
    c20e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    c212:	f020 0b03 	bic.w	fp, r0, #3
    c216:	eb06 0c0b 	add.w	ip, r6, fp
    c21a:	f105 0010 	add.w	r0, r5, #16
    c21e:	4584      	cmp	ip, r0
    c220:	da4d      	bge.n	c2be <_realloc_r+0x222>
    c222:	07c9      	lsls	r1, r1, #31
    c224:	f53f af7d 	bmi.w	c122 <_realloc_r+0x86>
    c228:	f854 1c08 	ldr.w	r1, [r4, #-8]
    c22c:	eba9 0a01 	sub.w	sl, r9, r1
    c230:	f8da 1004 	ldr.w	r1, [sl, #4]
    c234:	f021 0103 	bic.w	r1, r1, #3
    c238:	448b      	add	fp, r1
    c23a:	44b3      	add	fp, r6
    c23c:	4558      	cmp	r0, fp
    c23e:	f73f af6c 	bgt.w	c11a <_realloc_r+0x7e>
    c242:	4657      	mov	r7, sl
    c244:	f8da 100c 	ldr.w	r1, [sl, #12]
    c248:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c24c:	1f32      	subs	r2, r6, #4
    c24e:	2a24      	cmp	r2, #36	; 0x24
    c250:	60c1      	str	r1, [r0, #12]
    c252:	6088      	str	r0, [r1, #8]
    c254:	f200 80db 	bhi.w	c40e <_realloc_r+0x372>
    c258:	2a13      	cmp	r2, #19
    c25a:	f240 80d6 	bls.w	c40a <_realloc_r+0x36e>
    c25e:	6821      	ldr	r1, [r4, #0]
    c260:	f8ca 1008 	str.w	r1, [sl, #8]
    c264:	6861      	ldr	r1, [r4, #4]
    c266:	f8ca 100c 	str.w	r1, [sl, #12]
    c26a:	2a1b      	cmp	r2, #27
    c26c:	f200 80df 	bhi.w	c42e <_realloc_r+0x392>
    c270:	3408      	adds	r4, #8
    c272:	f10a 0210 	add.w	r2, sl, #16
    c276:	6821      	ldr	r1, [r4, #0]
    c278:	6011      	str	r1, [r2, #0]
    c27a:	6861      	ldr	r1, [r4, #4]
    c27c:	6051      	str	r1, [r2, #4]
    c27e:	68a1      	ldr	r1, [r4, #8]
    c280:	6091      	str	r1, [r2, #8]
    c282:	eb0a 0105 	add.w	r1, sl, r5
    c286:	ebab 0205 	sub.w	r2, fp, r5
    c28a:	f042 0201 	orr.w	r2, r2, #1
    c28e:	6099      	str	r1, [r3, #8]
    c290:	604a      	str	r2, [r1, #4]
    c292:	f8da 3004 	ldr.w	r3, [sl, #4]
    c296:	f003 0301 	and.w	r3, r3, #1
    c29a:	432b      	orrs	r3, r5
    c29c:	4640      	mov	r0, r8
    c29e:	f8ca 3004 	str.w	r3, [sl, #4]
    c2a2:	f7ff fee9 	bl	c078 <__malloc_unlock>
    c2a6:	e76e      	b.n	c186 <_realloc_r+0xea>
    c2a8:	6823      	ldr	r3, [r4, #0]
    c2aa:	6003      	str	r3, [r0, #0]
    c2ac:	6863      	ldr	r3, [r4, #4]
    c2ae:	6043      	str	r3, [r0, #4]
    c2b0:	2a1b      	cmp	r2, #27
    c2b2:	d868      	bhi.n	c386 <_realloc_r+0x2ea>
    c2b4:	f104 0208 	add.w	r2, r4, #8
    c2b8:	f100 0308 	add.w	r3, r0, #8
    c2bc:	e74a      	b.n	c154 <_realloc_r+0xb8>
    c2be:	eb09 0205 	add.w	r2, r9, r5
    c2c2:	609a      	str	r2, [r3, #8]
    c2c4:	ebac 0305 	sub.w	r3, ip, r5
    c2c8:	f043 0301 	orr.w	r3, r3, #1
    c2cc:	6053      	str	r3, [r2, #4]
    c2ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c2d2:	f003 0301 	and.w	r3, r3, #1
    c2d6:	432b      	orrs	r3, r5
    c2d8:	4640      	mov	r0, r8
    c2da:	f844 3c04 	str.w	r3, [r4, #-4]
    c2de:	f7ff fecb 	bl	c078 <__malloc_unlock>
    c2e2:	4627      	mov	r7, r4
    c2e4:	e74f      	b.n	c186 <_realloc_r+0xea>
    c2e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c2ea:	f023 0303 	bic.w	r3, r3, #3
    c2ee:	441e      	add	r6, r3
    c2f0:	e751      	b.n	c196 <_realloc_r+0xfa>
    c2f2:	4657      	mov	r7, sl
    c2f4:	f8da 100c 	ldr.w	r1, [sl, #12]
    c2f8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c2fc:	1f32      	subs	r2, r6, #4
    c2fe:	2a24      	cmp	r2, #36	; 0x24
    c300:	60c1      	str	r1, [r0, #12]
    c302:	6088      	str	r0, [r1, #8]
    c304:	d84c      	bhi.n	c3a0 <_realloc_r+0x304>
    c306:	2a13      	cmp	r2, #19
    c308:	d948      	bls.n	c39c <_realloc_r+0x300>
    c30a:	6821      	ldr	r1, [r4, #0]
    c30c:	f8ca 1008 	str.w	r1, [sl, #8]
    c310:	6861      	ldr	r1, [r4, #4]
    c312:	f8ca 100c 	str.w	r1, [sl, #12]
    c316:	2a1b      	cmp	r2, #27
    c318:	d856      	bhi.n	c3c8 <_realloc_r+0x32c>
    c31a:	3408      	adds	r4, #8
    c31c:	f10a 0210 	add.w	r2, sl, #16
    c320:	461e      	mov	r6, r3
    c322:	6823      	ldr	r3, [r4, #0]
    c324:	6013      	str	r3, [r2, #0]
    c326:	6863      	ldr	r3, [r4, #4]
    c328:	6053      	str	r3, [r2, #4]
    c32a:	68a3      	ldr	r3, [r4, #8]
    c32c:	6093      	str	r3, [r2, #8]
    c32e:	46d1      	mov	r9, sl
    c330:	463c      	mov	r4, r7
    c332:	e730      	b.n	c196 <_realloc_r+0xfa>
    c334:	4621      	mov	r1, r4
    c336:	f000 fb65 	bl	ca04 <memmove>
    c33a:	e711      	b.n	c160 <_realloc_r+0xc4>
    c33c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    c340:	4657      	mov	r7, sl
    c342:	60cb      	str	r3, [r1, #12]
    c344:	6099      	str	r1, [r3, #8]
    c346:	f857 1f08 	ldr.w	r1, [r7, #8]!
    c34a:	f8da 300c 	ldr.w	r3, [sl, #12]
    c34e:	60cb      	str	r3, [r1, #12]
    c350:	1f32      	subs	r2, r6, #4
    c352:	2a24      	cmp	r2, #36	; 0x24
    c354:	6099      	str	r1, [r3, #8]
    c356:	d82d      	bhi.n	c3b4 <_realloc_r+0x318>
    c358:	2a13      	cmp	r2, #19
    c35a:	d929      	bls.n	c3b0 <_realloc_r+0x314>
    c35c:	6823      	ldr	r3, [r4, #0]
    c35e:	f8ca 3008 	str.w	r3, [sl, #8]
    c362:	6863      	ldr	r3, [r4, #4]
    c364:	f8ca 300c 	str.w	r3, [sl, #12]
    c368:	2a1b      	cmp	r2, #27
    c36a:	d842      	bhi.n	c3f2 <_realloc_r+0x356>
    c36c:	3408      	adds	r4, #8
    c36e:	f10a 0310 	add.w	r3, sl, #16
    c372:	6822      	ldr	r2, [r4, #0]
    c374:	601a      	str	r2, [r3, #0]
    c376:	6862      	ldr	r2, [r4, #4]
    c378:	605a      	str	r2, [r3, #4]
    c37a:	68a2      	ldr	r2, [r4, #8]
    c37c:	609a      	str	r2, [r3, #8]
    c37e:	4666      	mov	r6, ip
    c380:	46d1      	mov	r9, sl
    c382:	463c      	mov	r4, r7
    c384:	e707      	b.n	c196 <_realloc_r+0xfa>
    c386:	68a3      	ldr	r3, [r4, #8]
    c388:	6083      	str	r3, [r0, #8]
    c38a:	68e3      	ldr	r3, [r4, #12]
    c38c:	60c3      	str	r3, [r0, #12]
    c38e:	2a24      	cmp	r2, #36	; 0x24
    c390:	d026      	beq.n	c3e0 <_realloc_r+0x344>
    c392:	f104 0210 	add.w	r2, r4, #16
    c396:	f100 0310 	add.w	r3, r0, #16
    c39a:	e6db      	b.n	c154 <_realloc_r+0xb8>
    c39c:	463a      	mov	r2, r7
    c39e:	e7bf      	b.n	c320 <_realloc_r+0x284>
    c3a0:	4621      	mov	r1, r4
    c3a2:	4638      	mov	r0, r7
    c3a4:	461e      	mov	r6, r3
    c3a6:	46d1      	mov	r9, sl
    c3a8:	f000 fb2c 	bl	ca04 <memmove>
    c3ac:	463c      	mov	r4, r7
    c3ae:	e6f2      	b.n	c196 <_realloc_r+0xfa>
    c3b0:	463b      	mov	r3, r7
    c3b2:	e7de      	b.n	c372 <_realloc_r+0x2d6>
    c3b4:	4621      	mov	r1, r4
    c3b6:	4638      	mov	r0, r7
    c3b8:	4666      	mov	r6, ip
    c3ba:	46d1      	mov	r9, sl
    c3bc:	f000 fb22 	bl	ca04 <memmove>
    c3c0:	463c      	mov	r4, r7
    c3c2:	e6e8      	b.n	c196 <_realloc_r+0xfa>
    c3c4:	200044c8 	.word	0x200044c8
    c3c8:	68a1      	ldr	r1, [r4, #8]
    c3ca:	f8ca 1010 	str.w	r1, [sl, #16]
    c3ce:	68e1      	ldr	r1, [r4, #12]
    c3d0:	f8ca 1014 	str.w	r1, [sl, #20]
    c3d4:	2a24      	cmp	r2, #36	; 0x24
    c3d6:	d020      	beq.n	c41a <_realloc_r+0x37e>
    c3d8:	3410      	adds	r4, #16
    c3da:	f10a 0218 	add.w	r2, sl, #24
    c3de:	e79f      	b.n	c320 <_realloc_r+0x284>
    c3e0:	6923      	ldr	r3, [r4, #16]
    c3e2:	6103      	str	r3, [r0, #16]
    c3e4:	6961      	ldr	r1, [r4, #20]
    c3e6:	6141      	str	r1, [r0, #20]
    c3e8:	f104 0218 	add.w	r2, r4, #24
    c3ec:	f100 0318 	add.w	r3, r0, #24
    c3f0:	e6b0      	b.n	c154 <_realloc_r+0xb8>
    c3f2:	68a3      	ldr	r3, [r4, #8]
    c3f4:	f8ca 3010 	str.w	r3, [sl, #16]
    c3f8:	68e3      	ldr	r3, [r4, #12]
    c3fa:	f8ca 3014 	str.w	r3, [sl, #20]
    c3fe:	2a24      	cmp	r2, #36	; 0x24
    c400:	d021      	beq.n	c446 <_realloc_r+0x3aa>
    c402:	3410      	adds	r4, #16
    c404:	f10a 0318 	add.w	r3, sl, #24
    c408:	e7b3      	b.n	c372 <_realloc_r+0x2d6>
    c40a:	463a      	mov	r2, r7
    c40c:	e733      	b.n	c276 <_realloc_r+0x1da>
    c40e:	4621      	mov	r1, r4
    c410:	4638      	mov	r0, r7
    c412:	f000 faf7 	bl	ca04 <memmove>
    c416:	4b16      	ldr	r3, [pc, #88]	; (c470 <_realloc_r+0x3d4>)
    c418:	e733      	b.n	c282 <_realloc_r+0x1e6>
    c41a:	6922      	ldr	r2, [r4, #16]
    c41c:	f8ca 2018 	str.w	r2, [sl, #24]
    c420:	6962      	ldr	r2, [r4, #20]
    c422:	f8ca 201c 	str.w	r2, [sl, #28]
    c426:	3418      	adds	r4, #24
    c428:	f10a 0220 	add.w	r2, sl, #32
    c42c:	e778      	b.n	c320 <_realloc_r+0x284>
    c42e:	68a1      	ldr	r1, [r4, #8]
    c430:	f8ca 1010 	str.w	r1, [sl, #16]
    c434:	68e1      	ldr	r1, [r4, #12]
    c436:	f8ca 1014 	str.w	r1, [sl, #20]
    c43a:	2a24      	cmp	r2, #36	; 0x24
    c43c:	d00d      	beq.n	c45a <_realloc_r+0x3be>
    c43e:	3410      	adds	r4, #16
    c440:	f10a 0218 	add.w	r2, sl, #24
    c444:	e717      	b.n	c276 <_realloc_r+0x1da>
    c446:	6923      	ldr	r3, [r4, #16]
    c448:	f8ca 3018 	str.w	r3, [sl, #24]
    c44c:	6963      	ldr	r3, [r4, #20]
    c44e:	f8ca 301c 	str.w	r3, [sl, #28]
    c452:	3418      	adds	r4, #24
    c454:	f10a 0320 	add.w	r3, sl, #32
    c458:	e78b      	b.n	c372 <_realloc_r+0x2d6>
    c45a:	6922      	ldr	r2, [r4, #16]
    c45c:	f8ca 2018 	str.w	r2, [sl, #24]
    c460:	6962      	ldr	r2, [r4, #20]
    c462:	f8ca 201c 	str.w	r2, [sl, #28]
    c466:	3418      	adds	r4, #24
    c468:	f10a 0220 	add.w	r2, sl, #32
    c46c:	e703      	b.n	c276 <_realloc_r+0x1da>
    c46e:	bf00      	nop
    c470:	200044c8 	.word	0x200044c8

0000c474 <_strtol_l.constprop.0>:
    c474:	2b01      	cmp	r3, #1
    c476:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c47a:	d040      	beq.n	c4fe <_strtol_l.constprop.0+0x8a>
    c47c:	2b24      	cmp	r3, #36	; 0x24
    c47e:	4698      	mov	r8, r3
    c480:	d83d      	bhi.n	c4fe <_strtol_l.constprop.0+0x8a>
    c482:	4d4c      	ldr	r5, [pc, #304]	; (c5b4 <_strtol_l.constprop.0+0x140>)
    c484:	468e      	mov	lr, r1
    c486:	4676      	mov	r6, lr
    c488:	f81e bb01 	ldrb.w	fp, [lr], #1
    c48c:	f815 400b 	ldrb.w	r4, [r5, fp]
    c490:	f014 0408 	ands.w	r4, r4, #8
    c494:	d1f7      	bne.n	c486 <_strtol_l.constprop.0+0x12>
    c496:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    c49a:	d072      	beq.n	c582 <_strtol_l.constprop.0+0x10e>
    c49c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    c4a0:	bf08      	it	eq
    c4a2:	f89e b000 	ldrbeq.w	fp, [lr]
    c4a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    c4aa:	bf08      	it	eq
    c4ac:	f106 0e02 	addeq.w	lr, r6, #2
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d042      	beq.n	c53a <_strtol_l.constprop.0+0xc6>
    c4b4:	2b10      	cmp	r3, #16
    c4b6:	d057      	beq.n	c568 <_strtol_l.constprop.0+0xf4>
    c4b8:	fbb9 f7f8 	udiv	r7, r9, r8
    c4bc:	2500      	movs	r5, #0
    c4be:	462e      	mov	r6, r5
    c4c0:	fb08 9a17 	mls	sl, r8, r7, r9
    c4c4:	e005      	b.n	c4d2 <_strtol_l.constprop.0+0x5e>
    c4c6:	d033      	beq.n	c530 <_strtol_l.constprop.0+0xbc>
    c4c8:	fb08 c606 	mla	r6, r8, r6, ip
    c4cc:	2501      	movs	r5, #1
    c4ce:	f81e bb01 	ldrb.w	fp, [lr], #1
    c4d2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    c4d6:	f1bc 0f09 	cmp.w	ip, #9
    c4da:	d906      	bls.n	c4ea <_strtol_l.constprop.0+0x76>
    c4dc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    c4e0:	f1bc 0f19 	cmp.w	ip, #25
    c4e4:	d812      	bhi.n	c50c <_strtol_l.constprop.0+0x98>
    c4e6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    c4ea:	4563      	cmp	r3, ip
    c4ec:	dd17      	ble.n	c51e <_strtol_l.constprop.0+0xaa>
    c4ee:	f1b5 3fff 	cmp.w	r5, #4294967295
    c4f2:	d0ec      	beq.n	c4ce <_strtol_l.constprop.0+0x5a>
    c4f4:	42b7      	cmp	r7, r6
    c4f6:	d2e6      	bcs.n	c4c6 <_strtol_l.constprop.0+0x52>
    c4f8:	f04f 35ff 	mov.w	r5, #4294967295
    c4fc:	e7e7      	b.n	c4ce <_strtol_l.constprop.0+0x5a>
    c4fe:	f000 fc53 	bl	cda8 <__errno>
    c502:	2316      	movs	r3, #22
    c504:	6003      	str	r3, [r0, #0]
    c506:	2000      	movs	r0, #0
    c508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c50c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    c510:	f1bc 0f19 	cmp.w	ip, #25
    c514:	d803      	bhi.n	c51e <_strtol_l.constprop.0+0xaa>
    c516:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    c51a:	4563      	cmp	r3, ip
    c51c:	dce7      	bgt.n	c4ee <_strtol_l.constprop.0+0x7a>
    c51e:	1c6b      	adds	r3, r5, #1
    c520:	d027      	beq.n	c572 <_strtol_l.constprop.0+0xfe>
    c522:	b98c      	cbnz	r4, c548 <_strtol_l.constprop.0+0xd4>
    c524:	b10a      	cbz	r2, c52a <_strtol_l.constprop.0+0xb6>
    c526:	bba5      	cbnz	r5, c592 <_strtol_l.constprop.0+0x11e>
    c528:	6011      	str	r1, [r2, #0]
    c52a:	4630      	mov	r0, r6
    c52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c530:	45e2      	cmp	sl, ip
    c532:	dac9      	bge.n	c4c8 <_strtol_l.constprop.0+0x54>
    c534:	f04f 35ff 	mov.w	r5, #4294967295
    c538:	e7c9      	b.n	c4ce <_strtol_l.constprop.0+0x5a>
    c53a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c53e:	d005      	beq.n	c54c <_strtol_l.constprop.0+0xd8>
    c540:	f04f 080a 	mov.w	r8, #10
    c544:	4643      	mov	r3, r8
    c546:	e7b7      	b.n	c4b8 <_strtol_l.constprop.0+0x44>
    c548:	4276      	negs	r6, r6
    c54a:	e7eb      	b.n	c524 <_strtol_l.constprop.0+0xb0>
    c54c:	f89e 3000 	ldrb.w	r3, [lr]
    c550:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c554:	2b58      	cmp	r3, #88	; 0x58
    c556:	d121      	bne.n	c59c <_strtol_l.constprop.0+0x128>
    c558:	f04f 0810 	mov.w	r8, #16
    c55c:	f89e b001 	ldrb.w	fp, [lr, #1]
    c560:	4643      	mov	r3, r8
    c562:	f10e 0e02 	add.w	lr, lr, #2
    c566:	e7a7      	b.n	c4b8 <_strtol_l.constprop.0+0x44>
    c568:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c56c:	d01a      	beq.n	c5a4 <_strtol_l.constprop.0+0x130>
    c56e:	4698      	mov	r8, r3
    c570:	e7a2      	b.n	c4b8 <_strtol_l.constprop.0+0x44>
    c572:	2322      	movs	r3, #34	; 0x22
    c574:	6003      	str	r3, [r0, #0]
    c576:	b172      	cbz	r2, c596 <_strtol_l.constprop.0+0x122>
    c578:	f10e 31ff 	add.w	r1, lr, #4294967295
    c57c:	464e      	mov	r6, r9
    c57e:	6011      	str	r1, [r2, #0]
    c580:	e7d3      	b.n	c52a <_strtol_l.constprop.0+0xb6>
    c582:	f89e b000 	ldrb.w	fp, [lr]
    c586:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    c58a:	f106 0e02 	add.w	lr, r6, #2
    c58e:	2401      	movs	r4, #1
    c590:	e78e      	b.n	c4b0 <_strtol_l.constprop.0+0x3c>
    c592:	46b1      	mov	r9, r6
    c594:	e7f0      	b.n	c578 <_strtol_l.constprop.0+0x104>
    c596:	464e      	mov	r6, r9
    c598:	4630      	mov	r0, r6
    c59a:	e7c7      	b.n	c52c <_strtol_l.constprop.0+0xb8>
    c59c:	f04f 0808 	mov.w	r8, #8
    c5a0:	4643      	mov	r3, r8
    c5a2:	e789      	b.n	c4b8 <_strtol_l.constprop.0+0x44>
    c5a4:	f89e 5000 	ldrb.w	r5, [lr]
    c5a8:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    c5ac:	2d58      	cmp	r5, #88	; 0x58
    c5ae:	d0d3      	beq.n	c558 <_strtol_l.constprop.0+0xe4>
    c5b0:	4698      	mov	r8, r3
    c5b2:	e781      	b.n	c4b8 <_strtol_l.constprop.0+0x44>
    c5b4:	20000afd 	.word	0x20000afd

0000c5b8 <strtol>:
    c5b8:	b410      	push	{r4}
    c5ba:	4c05      	ldr	r4, [pc, #20]	; (c5d0 <strtol+0x18>)
    c5bc:	4684      	mov	ip, r0
    c5be:	4613      	mov	r3, r2
    c5c0:	6820      	ldr	r0, [r4, #0]
    c5c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    c5c6:	460a      	mov	r2, r1
    c5c8:	4661      	mov	r1, ip
    c5ca:	f7ff bf53 	b.w	c474 <_strtol_l.constprop.0>
    c5ce:	bf00      	nop
    c5d0:	200048e4 	.word	0x200048e4

0000c5d4 <_strtoul_l.constprop.0>:
    c5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5d8:	4607      	mov	r7, r0
    c5da:	484c      	ldr	r0, [pc, #304]	; (c70c <_strtoul_l.constprop.0+0x138>)
    c5dc:	460e      	mov	r6, r1
    c5de:	4635      	mov	r5, r6
    c5e0:	f816 eb01 	ldrb.w	lr, [r6], #1
    c5e4:	f810 c00e 	ldrb.w	ip, [r0, lr]
    c5e8:	f01c 0c08 	ands.w	ip, ip, #8
    c5ec:	d1f7      	bne.n	c5de <_strtoul_l.constprop.0+0xa>
    c5ee:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    c5f2:	d05a      	beq.n	c6aa <_strtoul_l.constprop.0+0xd6>
    c5f4:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    c5f8:	bf03      	ittte	eq
    c5fa:	f896 e000 	ldrbeq.w	lr, [r6]
    c5fe:	4664      	moveq	r4, ip
    c600:	1cae      	addeq	r6, r5, #2
    c602:	4664      	movne	r4, ip
    c604:	b15b      	cbz	r3, c61e <_strtoul_l.constprop.0+0x4a>
    c606:	2b10      	cmp	r3, #16
    c608:	d054      	beq.n	c6b4 <_strtoul_l.constprop.0+0xe0>
    c60a:	f04f 38ff 	mov.w	r8, #4294967295
    c60e:	fbb8 f8f3 	udiv	r8, r8, r3
    c612:	fb03 fa08 	mul.w	sl, r3, r8
    c616:	ea6f 0a0a 	mvn.w	sl, sl
    c61a:	4699      	mov	r9, r3
    c61c:	e008      	b.n	c630 <_strtoul_l.constprop.0+0x5c>
    c61e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c622:	d05a      	beq.n	c6da <_strtoul_l.constprop.0+0x106>
    c624:	230a      	movs	r3, #10
    c626:	f8df 80e8 	ldr.w	r8, [pc, #232]	; c710 <_strtoul_l.constprop.0+0x13c>
    c62a:	f04f 0a05 	mov.w	sl, #5
    c62e:	4699      	mov	r9, r3
    c630:	2500      	movs	r5, #0
    c632:	4628      	mov	r0, r5
    c634:	e005      	b.n	c642 <_strtoul_l.constprop.0+0x6e>
    c636:	d02c      	beq.n	c692 <_strtoul_l.constprop.0+0xbe>
    c638:	fb09 c000 	mla	r0, r9, r0, ip
    c63c:	2501      	movs	r5, #1
    c63e:	f816 eb01 	ldrb.w	lr, [r6], #1
    c642:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    c646:	f1bc 0f09 	cmp.w	ip, #9
    c64a:	d906      	bls.n	c65a <_strtoul_l.constprop.0+0x86>
    c64c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    c650:	f1bc 0f19 	cmp.w	ip, #25
    c654:	d80b      	bhi.n	c66e <_strtoul_l.constprop.0+0x9a>
    c656:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    c65a:	4563      	cmp	r3, ip
    c65c:	dd10      	ble.n	c680 <_strtoul_l.constprop.0+0xac>
    c65e:	f1b5 3fff 	cmp.w	r5, #4294967295
    c662:	d0ec      	beq.n	c63e <_strtoul_l.constprop.0+0x6a>
    c664:	4540      	cmp	r0, r8
    c666:	d9e6      	bls.n	c636 <_strtoul_l.constprop.0+0x62>
    c668:	f04f 35ff 	mov.w	r5, #4294967295
    c66c:	e7e7      	b.n	c63e <_strtoul_l.constprop.0+0x6a>
    c66e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    c672:	f1bc 0f19 	cmp.w	ip, #25
    c676:	d803      	bhi.n	c680 <_strtoul_l.constprop.0+0xac>
    c678:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    c67c:	4563      	cmp	r3, ip
    c67e:	dcee      	bgt.n	c65e <_strtoul_l.constprop.0+0x8a>
    c680:	1c6b      	adds	r3, r5, #1
    c682:	d00b      	beq.n	c69c <_strtoul_l.constprop.0+0xc8>
    c684:	b104      	cbz	r4, c688 <_strtoul_l.constprop.0+0xb4>
    c686:	4240      	negs	r0, r0
    c688:	b10a      	cbz	r2, c68e <_strtoul_l.constprop.0+0xba>
    c68a:	b965      	cbnz	r5, c6a6 <_strtoul_l.constprop.0+0xd2>
    c68c:	6011      	str	r1, [r2, #0]
    c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c692:	45d4      	cmp	ip, sl
    c694:	ddd0      	ble.n	c638 <_strtoul_l.constprop.0+0x64>
    c696:	f04f 35ff 	mov.w	r5, #4294967295
    c69a:	e7d0      	b.n	c63e <_strtoul_l.constprop.0+0x6a>
    c69c:	2322      	movs	r3, #34	; 0x22
    c69e:	603b      	str	r3, [r7, #0]
    c6a0:	4628      	mov	r0, r5
    c6a2:	2a00      	cmp	r2, #0
    c6a4:	d0f3      	beq.n	c68e <_strtoul_l.constprop.0+0xba>
    c6a6:	1e71      	subs	r1, r6, #1
    c6a8:	e7f0      	b.n	c68c <_strtoul_l.constprop.0+0xb8>
    c6aa:	f896 e000 	ldrb.w	lr, [r6]
    c6ae:	2401      	movs	r4, #1
    c6b0:	1cae      	adds	r6, r5, #2
    c6b2:	e7a7      	b.n	c604 <_strtoul_l.constprop.0+0x30>
    c6b4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c6b8:	d121      	bne.n	c6fe <_strtoul_l.constprop.0+0x12a>
    c6ba:	7830      	ldrb	r0, [r6, #0]
    c6bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c6c0:	2858      	cmp	r0, #88	; 0x58
    c6c2:	d116      	bne.n	c6f2 <_strtoul_l.constprop.0+0x11e>
    c6c4:	f04f 0910 	mov.w	r9, #16
    c6c8:	f896 e001 	ldrb.w	lr, [r6, #1]
    c6cc:	f04f 0a0f 	mov.w	sl, #15
    c6d0:	3602      	adds	r6, #2
    c6d2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c6d6:	464b      	mov	r3, r9
    c6d8:	e7aa      	b.n	c630 <_strtoul_l.constprop.0+0x5c>
    c6da:	7833      	ldrb	r3, [r6, #0]
    c6dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c6e0:	2b58      	cmp	r3, #88	; 0x58
    c6e2:	d0ef      	beq.n	c6c4 <_strtoul_l.constprop.0+0xf0>
    c6e4:	2308      	movs	r3, #8
    c6e6:	f04f 0a07 	mov.w	sl, #7
    c6ea:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c6ee:	4699      	mov	r9, r3
    c6f0:	e79e      	b.n	c630 <_strtoul_l.constprop.0+0x5c>
    c6f2:	4699      	mov	r9, r3
    c6f4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c6f8:	f04f 0a0f 	mov.w	sl, #15
    c6fc:	e798      	b.n	c630 <_strtoul_l.constprop.0+0x5c>
    c6fe:	f04f 0a0f 	mov.w	sl, #15
    c702:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c706:	4699      	mov	r9, r3
    c708:	e792      	b.n	c630 <_strtoul_l.constprop.0+0x5c>
    c70a:	bf00      	nop
    c70c:	20000afd 	.word	0x20000afd
    c710:	19999999 	.word	0x19999999

0000c714 <strtoul>:
    c714:	b410      	push	{r4}
    c716:	4c05      	ldr	r4, [pc, #20]	; (c72c <strtoul+0x18>)
    c718:	4684      	mov	ip, r0
    c71a:	4613      	mov	r3, r2
    c71c:	6820      	ldr	r0, [r4, #0]
    c71e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c722:	460a      	mov	r2, r1
    c724:	4661      	mov	r1, ip
    c726:	f7ff bf55 	b.w	c5d4 <_strtoul_l.constprop.0>
    c72a:	bf00      	nop
    c72c:	200048e4 	.word	0x200048e4

0000c730 <__cxa_atexit>:
    c730:	4613      	mov	r3, r2
    c732:	460a      	mov	r2, r1
    c734:	4601      	mov	r1, r0
    c736:	2002      	movs	r0, #2
    c738:	f000 bdb0 	b.w	d29c <__register_exitproc>

0000c73c <isprint>:
    c73c:	4b02      	ldr	r3, [pc, #8]	; (c748 <isprint+0xc>)
    c73e:	4418      	add	r0, r3
    c740:	7840      	ldrb	r0, [r0, #1]
    c742:	f000 0097 	and.w	r0, r0, #151	; 0x97
    c746:	4770      	bx	lr
    c748:	20000afc 	.word	0x20000afc

0000c74c <isspace>:
    c74c:	4b02      	ldr	r3, [pc, #8]	; (c758 <isspace+0xc>)
    c74e:	4418      	add	r0, r3
    c750:	7840      	ldrb	r0, [r0, #1]
    c752:	f000 0008 	and.w	r0, r0, #8
    c756:	4770      	bx	lr
    c758:	20000afc 	.word	0x20000afc

0000c75c <tolower>:
    c75c:	4b03      	ldr	r3, [pc, #12]	; (c76c <tolower+0x10>)
    c75e:	5c1b      	ldrb	r3, [r3, r0]
    c760:	f003 0303 	and.w	r3, r3, #3
    c764:	2b01      	cmp	r3, #1
    c766:	bf08      	it	eq
    c768:	3020      	addeq	r0, #32
    c76a:	4770      	bx	lr
    c76c:	20000afd 	.word	0x20000afd

0000c770 <stdio_exit_handler>:
    c770:	4a02      	ldr	r2, [pc, #8]	; (c77c <stdio_exit_handler+0xc>)
    c772:	4903      	ldr	r1, [pc, #12]	; (c780 <stdio_exit_handler+0x10>)
    c774:	4803      	ldr	r0, [pc, #12]	; (c784 <stdio_exit_handler+0x14>)
    c776:	f000 b8bb 	b.w	c8f0 <_fwalk_sglue>
    c77a:	bf00      	nop
    c77c:	200048d8 	.word	0x200048d8
    c780:	0000f8d5 	.word	0x0000f8d5
    c784:	20001218 	.word	0x20001218

0000c788 <cleanup_stdio>:
    c788:	4b0c      	ldr	r3, [pc, #48]	; (c7bc <cleanup_stdio+0x34>)
    c78a:	6841      	ldr	r1, [r0, #4]
    c78c:	4299      	cmp	r1, r3
    c78e:	b510      	push	{r4, lr}
    c790:	4604      	mov	r4, r0
    c792:	d001      	beq.n	c798 <cleanup_stdio+0x10>
    c794:	f003 f89e 	bl	f8d4 <_fclose_r>
    c798:	68a1      	ldr	r1, [r4, #8]
    c79a:	4b09      	ldr	r3, [pc, #36]	; (c7c0 <cleanup_stdio+0x38>)
    c79c:	4299      	cmp	r1, r3
    c79e:	d002      	beq.n	c7a6 <cleanup_stdio+0x1e>
    c7a0:	4620      	mov	r0, r4
    c7a2:	f003 f897 	bl	f8d4 <_fclose_r>
    c7a6:	68e1      	ldr	r1, [r4, #12]
    c7a8:	4b06      	ldr	r3, [pc, #24]	; (c7c4 <cleanup_stdio+0x3c>)
    c7aa:	4299      	cmp	r1, r3
    c7ac:	d004      	beq.n	c7b8 <cleanup_stdio+0x30>
    c7ae:	4620      	mov	r0, r4
    c7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7b4:	f003 b88e 	b.w	f8d4 <_fclose_r>
    c7b8:	bd10      	pop	{r4, pc}
    c7ba:	bf00      	nop
    c7bc:	2000528c 	.word	0x2000528c
    c7c0:	200052f4 	.word	0x200052f4
    c7c4:	2000535c 	.word	0x2000535c

0000c7c8 <global_stdio_init.part.0>:
    c7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7cc:	4c2a      	ldr	r4, [pc, #168]	; (c878 <global_stdio_init.part.0+0xb0>)
    c7ce:	4b2b      	ldr	r3, [pc, #172]	; (c87c <global_stdio_init.part.0+0xb4>)
    c7d0:	482b      	ldr	r0, [pc, #172]	; (c880 <global_stdio_init.part.0+0xb8>)
    c7d2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c894 <global_stdio_init.part.0+0xcc>
    c7d6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c898 <global_stdio_init.part.0+0xd0>
    c7da:	4f2a      	ldr	r7, [pc, #168]	; (c884 <global_stdio_init.part.0+0xbc>)
    c7dc:	6018      	str	r0, [r3, #0]
    c7de:	2500      	movs	r5, #0
    c7e0:	2304      	movs	r3, #4
    c7e2:	2208      	movs	r2, #8
    c7e4:	4629      	mov	r1, r5
    c7e6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c7ea:	4e27      	ldr	r6, [pc, #156]	; (c888 <global_stdio_init.part.0+0xc0>)
    c7ec:	6665      	str	r5, [r4, #100]	; 0x64
    c7ee:	e9c4 5302 	strd	r5, r3, [r4, #8]
    c7f2:	e9c4 5500 	strd	r5, r5, [r4]
    c7f6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    c7fa:	61a5      	str	r5, [r4, #24]
    c7fc:	f000 f97e 	bl	cafc <memset>
    c800:	4b22      	ldr	r3, [pc, #136]	; (c88c <global_stdio_init.part.0+0xc4>)
    c802:	6763      	str	r3, [r4, #116]	; 0x74
    c804:	2208      	movs	r2, #8
    c806:	4629      	mov	r1, r5
    c808:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c80c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    c810:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    c814:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    c818:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    c81c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    c820:	6725      	str	r5, [r4, #112]	; 0x70
    c822:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    c826:	62e6      	str	r6, [r4, #44]	; 0x2c
    c828:	f000 f968 	bl	cafc <memset>
    c82c:	4b18      	ldr	r3, [pc, #96]	; (c890 <global_stdio_init.part.0+0xc8>)
    c82e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    c832:	4629      	mov	r1, r5
    c834:	f104 0368 	add.w	r3, r4, #104	; 0x68
    c838:	2208      	movs	r2, #8
    c83a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    c83e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    c842:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    c846:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    c84a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    c84e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    c852:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    c856:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    c85a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    c85e:	f000 f94d 	bl	cafc <memset>
    c862:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c866:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    c86a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    c86e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c876:	bf00      	nop
    c878:	2000528c 	.word	0x2000528c
    c87c:	200053c4 	.word	0x200053c4
    c880:	0000c771 	.word	0x0000c771
    c884:	0000c9dd 	.word	0x0000c9dd
    c888:	0000c9fd 	.word	0x0000c9fd
    c88c:	00010009 	.word	0x00010009
    c890:	00020012 	.word	0x00020012
    c894:	0000c979 	.word	0x0000c979
    c898:	0000c99d 	.word	0x0000c99d

0000c89c <__sinit>:
    c89c:	b510      	push	{r4, lr}
    c89e:	4604      	mov	r4, r0
    c8a0:	480a      	ldr	r0, [pc, #40]	; (c8cc <__sinit+0x30>)
    c8a2:	f000 faaf 	bl	ce04 <__retarget_lock_acquire_recursive>
    c8a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c8a8:	b923      	cbnz	r3, c8b4 <__sinit+0x18>
    c8aa:	4b09      	ldr	r3, [pc, #36]	; (c8d0 <__sinit+0x34>)
    c8ac:	4a09      	ldr	r2, [pc, #36]	; (c8d4 <__sinit+0x38>)
    c8ae:	681b      	ldr	r3, [r3, #0]
    c8b0:	6362      	str	r2, [r4, #52]	; 0x34
    c8b2:	b123      	cbz	r3, c8be <__sinit+0x22>
    c8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8b8:	4804      	ldr	r0, [pc, #16]	; (c8cc <__sinit+0x30>)
    c8ba:	f000 baa5 	b.w	ce08 <__retarget_lock_release_recursive>
    c8be:	f7ff ff83 	bl	c7c8 <global_stdio_init.part.0>
    c8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8c6:	4801      	ldr	r0, [pc, #4]	; (c8cc <__sinit+0x30>)
    c8c8:	f000 ba9e 	b.w	ce08 <__retarget_lock_release_recursive>
    c8cc:	20005254 	.word	0x20005254
    c8d0:	200053c4 	.word	0x200053c4
    c8d4:	0000c789 	.word	0x0000c789

0000c8d8 <__sfp_lock_acquire>:
    c8d8:	4801      	ldr	r0, [pc, #4]	; (c8e0 <__sfp_lock_acquire+0x8>)
    c8da:	f000 ba93 	b.w	ce04 <__retarget_lock_acquire_recursive>
    c8de:	bf00      	nop
    c8e0:	20005254 	.word	0x20005254

0000c8e4 <__sfp_lock_release>:
    c8e4:	4801      	ldr	r0, [pc, #4]	; (c8ec <__sfp_lock_release+0x8>)
    c8e6:	f000 ba8f 	b.w	ce08 <__retarget_lock_release_recursive>
    c8ea:	bf00      	nop
    c8ec:	20005254 	.word	0x20005254

0000c8f0 <_fwalk_sglue>:
    c8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8f4:	4680      	mov	r8, r0
    c8f6:	460f      	mov	r7, r1
    c8f8:	4616      	mov	r6, r2
    c8fa:	f04f 0900 	mov.w	r9, #0
    c8fe:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    c902:	3d01      	subs	r5, #1
    c904:	d411      	bmi.n	c92a <_fwalk_sglue+0x3a>
    c906:	89a3      	ldrh	r3, [r4, #12]
    c908:	2b01      	cmp	r3, #1
    c90a:	f105 35ff 	add.w	r5, r5, #4294967295
    c90e:	d908      	bls.n	c922 <_fwalk_sglue+0x32>
    c910:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    c914:	3301      	adds	r3, #1
    c916:	4621      	mov	r1, r4
    c918:	d003      	beq.n	c922 <_fwalk_sglue+0x32>
    c91a:	4640      	mov	r0, r8
    c91c:	47b8      	blx	r7
    c91e:	ea49 0900 	orr.w	r9, r9, r0
    c922:	1c6b      	adds	r3, r5, #1
    c924:	f104 0468 	add.w	r4, r4, #104	; 0x68
    c928:	d1ed      	bne.n	c906 <_fwalk_sglue+0x16>
    c92a:	6836      	ldr	r6, [r6, #0]
    c92c:	2e00      	cmp	r6, #0
    c92e:	d1e6      	bne.n	c8fe <_fwalk_sglue+0xe>
    c930:	4648      	mov	r0, r9
    c932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c936:	bf00      	nop

0000c938 <sprintf>:
    c938:	b40e      	push	{r1, r2, r3}
    c93a:	b510      	push	{r4, lr}
    c93c:	b09d      	sub	sp, #116	; 0x74
    c93e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c942:	ab1f      	add	r3, sp, #124	; 0x7c
    c944:	e9cd 0106 	strd	r0, r1, [sp, #24]
    c948:	9104      	str	r1, [sp, #16]
    c94a:	4909      	ldr	r1, [pc, #36]	; (c970 <sprintf+0x38>)
    c94c:	f853 2b04 	ldr.w	r2, [r3], #4
    c950:	9002      	str	r0, [sp, #8]
    c952:	4c08      	ldr	r4, [pc, #32]	; (c974 <sprintf+0x3c>)
    c954:	6808      	ldr	r0, [r1, #0]
    c956:	9301      	str	r3, [sp, #4]
    c958:	a902      	add	r1, sp, #8
    c95a:	9405      	str	r4, [sp, #20]
    c95c:	f001 fa18 	bl	dd90 <_svfprintf_r>
    c960:	9b02      	ldr	r3, [sp, #8]
    c962:	2200      	movs	r2, #0
    c964:	701a      	strb	r2, [r3, #0]
    c966:	b01d      	add	sp, #116	; 0x74
    c968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c96c:	b003      	add	sp, #12
    c96e:	4770      	bx	lr
    c970:	200048e4 	.word	0x200048e4
    c974:	ffff0208 	.word	0xffff0208

0000c978 <__sread>:
    c978:	b510      	push	{r4, lr}
    c97a:	460c      	mov	r4, r1
    c97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c980:	f000 f9d4 	bl	cd2c <_read_r>
    c984:	2800      	cmp	r0, #0
    c986:	db03      	blt.n	c990 <__sread+0x18>
    c988:	6d23      	ldr	r3, [r4, #80]	; 0x50
    c98a:	4403      	add	r3, r0
    c98c:	6523      	str	r3, [r4, #80]	; 0x50
    c98e:	bd10      	pop	{r4, pc}
    c990:	89a3      	ldrh	r3, [r4, #12]
    c992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c996:	81a3      	strh	r3, [r4, #12]
    c998:	bd10      	pop	{r4, pc}
    c99a:	bf00      	nop

0000c99c <__swrite>:
    c99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9a0:	460c      	mov	r4, r1
    c9a2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    c9a6:	461f      	mov	r7, r3
    c9a8:	05cb      	lsls	r3, r1, #23
    c9aa:	4605      	mov	r5, r0
    c9ac:	4616      	mov	r6, r2
    c9ae:	d40b      	bmi.n	c9c8 <__swrite+0x2c>
    c9b0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    c9b4:	81a1      	strh	r1, [r4, #12]
    c9b6:	463b      	mov	r3, r7
    c9b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c9bc:	4632      	mov	r2, r6
    c9be:	4628      	mov	r0, r5
    c9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c9c4:	f000 b9da 	b.w	cd7c <_write_r>
    c9c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c9cc:	2302      	movs	r3, #2
    c9ce:	2200      	movs	r2, #0
    c9d0:	f000 f996 	bl	cd00 <_lseek_r>
    c9d4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    c9d8:	e7ea      	b.n	c9b0 <__swrite+0x14>
    c9da:	bf00      	nop

0000c9dc <__sseek>:
    c9dc:	b510      	push	{r4, lr}
    c9de:	460c      	mov	r4, r1
    c9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c9e4:	f000 f98c 	bl	cd00 <_lseek_r>
    c9e8:	89a3      	ldrh	r3, [r4, #12]
    c9ea:	1c42      	adds	r2, r0, #1
    c9ec:	bf0e      	itee	eq
    c9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    c9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    c9f6:	6520      	strne	r0, [r4, #80]	; 0x50
    c9f8:	81a3      	strh	r3, [r4, #12]
    c9fa:	bd10      	pop	{r4, pc}

0000c9fc <__sclose>:
    c9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ca00:	f000 b96c 	b.w	ccdc <_close_r>

0000ca04 <memmove>:
    ca04:	4288      	cmp	r0, r1
    ca06:	d90d      	bls.n	ca24 <memmove+0x20>
    ca08:	188b      	adds	r3, r1, r2
    ca0a:	4283      	cmp	r3, r0
    ca0c:	d90a      	bls.n	ca24 <memmove+0x20>
    ca0e:	eb00 0c02 	add.w	ip, r0, r2
    ca12:	b1ba      	cbz	r2, ca44 <memmove+0x40>
    ca14:	4662      	mov	r2, ip
    ca16:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    ca1a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    ca1e:	4299      	cmp	r1, r3
    ca20:	d1f9      	bne.n	ca16 <memmove+0x12>
    ca22:	4770      	bx	lr
    ca24:	2a0f      	cmp	r2, #15
    ca26:	d80e      	bhi.n	ca46 <memmove+0x42>
    ca28:	4603      	mov	r3, r0
    ca2a:	f102 3cff 	add.w	ip, r2, #4294967295
    ca2e:	b14a      	cbz	r2, ca44 <memmove+0x40>
    ca30:	f10c 0c01 	add.w	ip, ip, #1
    ca34:	3b01      	subs	r3, #1
    ca36:	448c      	add	ip, r1
    ca38:	f811 2b01 	ldrb.w	r2, [r1], #1
    ca3c:	f803 2f01 	strb.w	r2, [r3, #1]!
    ca40:	4561      	cmp	r1, ip
    ca42:	d1f9      	bne.n	ca38 <memmove+0x34>
    ca44:	4770      	bx	lr
    ca46:	ea40 0301 	orr.w	r3, r0, r1
    ca4a:	079b      	lsls	r3, r3, #30
    ca4c:	d150      	bne.n	caf0 <memmove+0xec>
    ca4e:	f1a2 0310 	sub.w	r3, r2, #16
    ca52:	b570      	push	{r4, r5, r6, lr}
    ca54:	f101 0c20 	add.w	ip, r1, #32
    ca58:	f023 050f 	bic.w	r5, r3, #15
    ca5c:	f101 0e10 	add.w	lr, r1, #16
    ca60:	f100 0410 	add.w	r4, r0, #16
    ca64:	44ac      	add	ip, r5
    ca66:	091b      	lsrs	r3, r3, #4
    ca68:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    ca6c:	f844 5c10 	str.w	r5, [r4, #-16]
    ca70:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    ca74:	f844 5c0c 	str.w	r5, [r4, #-12]
    ca78:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    ca7c:	f844 5c08 	str.w	r5, [r4, #-8]
    ca80:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    ca84:	f844 5c04 	str.w	r5, [r4, #-4]
    ca88:	f10e 0e10 	add.w	lr, lr, #16
    ca8c:	45e6      	cmp	lr, ip
    ca8e:	f104 0410 	add.w	r4, r4, #16
    ca92:	d1e9      	bne.n	ca68 <memmove+0x64>
    ca94:	3301      	adds	r3, #1
    ca96:	f012 0f0c 	tst.w	r2, #12
    ca9a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    ca9e:	f002 040f 	and.w	r4, r2, #15
    caa2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    caa6:	d027      	beq.n	caf8 <memmove+0xf4>
    caa8:	3c04      	subs	r4, #4
    caaa:	f024 0603 	bic.w	r6, r4, #3
    caae:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    cab2:	441e      	add	r6, r3
    cab4:	1f1c      	subs	r4, r3, #4
    cab6:	468e      	mov	lr, r1
    cab8:	f85e 5b04 	ldr.w	r5, [lr], #4
    cabc:	f844 5f04 	str.w	r5, [r4, #4]!
    cac0:	42b4      	cmp	r4, r6
    cac2:	d1f9      	bne.n	cab8 <memmove+0xb4>
    cac4:	f10c 0401 	add.w	r4, ip, #1
    cac8:	f002 0203 	and.w	r2, r2, #3
    cacc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    cad4:	f102 3cff 	add.w	ip, r2, #4294967295
    cad8:	b14a      	cbz	r2, caee <memmove+0xea>
    cada:	f10c 0c01 	add.w	ip, ip, #1
    cade:	3b01      	subs	r3, #1
    cae0:	448c      	add	ip, r1
    cae2:	f811 2b01 	ldrb.w	r2, [r1], #1
    cae6:	f803 2f01 	strb.w	r2, [r3, #1]!
    caea:	4561      	cmp	r1, ip
    caec:	d1f9      	bne.n	cae2 <memmove+0xde>
    caee:	bd70      	pop	{r4, r5, r6, pc}
    caf0:	f102 3cff 	add.w	ip, r2, #4294967295
    caf4:	4603      	mov	r3, r0
    caf6:	e79b      	b.n	ca30 <memmove+0x2c>
    caf8:	4622      	mov	r2, r4
    cafa:	e7eb      	b.n	cad4 <memmove+0xd0>

0000cafc <memset>:
    cafc:	0783      	lsls	r3, r0, #30
    cafe:	b530      	push	{r4, r5, lr}
    cb00:	d048      	beq.n	cb94 <memset+0x98>
    cb02:	1e54      	subs	r4, r2, #1
    cb04:	2a00      	cmp	r2, #0
    cb06:	d03f      	beq.n	cb88 <memset+0x8c>
    cb08:	b2ca      	uxtb	r2, r1
    cb0a:	4603      	mov	r3, r0
    cb0c:	e001      	b.n	cb12 <memset+0x16>
    cb0e:	3c01      	subs	r4, #1
    cb10:	d33a      	bcc.n	cb88 <memset+0x8c>
    cb12:	f803 2b01 	strb.w	r2, [r3], #1
    cb16:	079d      	lsls	r5, r3, #30
    cb18:	d1f9      	bne.n	cb0e <memset+0x12>
    cb1a:	2c03      	cmp	r4, #3
    cb1c:	d92d      	bls.n	cb7a <memset+0x7e>
    cb1e:	b2cd      	uxtb	r5, r1
    cb20:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cb24:	2c0f      	cmp	r4, #15
    cb26:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cb2a:	d936      	bls.n	cb9a <memset+0x9e>
    cb2c:	f1a4 0210 	sub.w	r2, r4, #16
    cb30:	f022 0c0f 	bic.w	ip, r2, #15
    cb34:	f103 0e20 	add.w	lr, r3, #32
    cb38:	44e6      	add	lr, ip
    cb3a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    cb3e:	f103 0210 	add.w	r2, r3, #16
    cb42:	e942 5504 	strd	r5, r5, [r2, #-16]
    cb46:	e942 5502 	strd	r5, r5, [r2, #-8]
    cb4a:	3210      	adds	r2, #16
    cb4c:	4572      	cmp	r2, lr
    cb4e:	d1f8      	bne.n	cb42 <memset+0x46>
    cb50:	f10c 0201 	add.w	r2, ip, #1
    cb54:	f014 0f0c 	tst.w	r4, #12
    cb58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    cb5c:	f004 0c0f 	and.w	ip, r4, #15
    cb60:	d013      	beq.n	cb8a <memset+0x8e>
    cb62:	f1ac 0304 	sub.w	r3, ip, #4
    cb66:	f023 0303 	bic.w	r3, r3, #3
    cb6a:	3304      	adds	r3, #4
    cb6c:	4413      	add	r3, r2
    cb6e:	f842 5b04 	str.w	r5, [r2], #4
    cb72:	4293      	cmp	r3, r2
    cb74:	d1fb      	bne.n	cb6e <memset+0x72>
    cb76:	f00c 0403 	and.w	r4, ip, #3
    cb7a:	b12c      	cbz	r4, cb88 <memset+0x8c>
    cb7c:	b2c9      	uxtb	r1, r1
    cb7e:	441c      	add	r4, r3
    cb80:	f803 1b01 	strb.w	r1, [r3], #1
    cb84:	429c      	cmp	r4, r3
    cb86:	d1fb      	bne.n	cb80 <memset+0x84>
    cb88:	bd30      	pop	{r4, r5, pc}
    cb8a:	4664      	mov	r4, ip
    cb8c:	4613      	mov	r3, r2
    cb8e:	2c00      	cmp	r4, #0
    cb90:	d1f4      	bne.n	cb7c <memset+0x80>
    cb92:	e7f9      	b.n	cb88 <memset+0x8c>
    cb94:	4603      	mov	r3, r0
    cb96:	4614      	mov	r4, r2
    cb98:	e7bf      	b.n	cb1a <memset+0x1e>
    cb9a:	461a      	mov	r2, r3
    cb9c:	46a4      	mov	ip, r4
    cb9e:	e7e0      	b.n	cb62 <memset+0x66>

0000cba0 <strchr>:
    cba0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    cba4:	4603      	mov	r3, r0
    cba6:	d044      	beq.n	cc32 <strchr+0x92>
    cba8:	0782      	lsls	r2, r0, #30
    cbaa:	d132      	bne.n	cc12 <strchr+0x72>
    cbac:	b510      	push	{r4, lr}
    cbae:	6804      	ldr	r4, [r0, #0]
    cbb0:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    cbb4:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    cbb8:	ea8e 0204 	eor.w	r2, lr, r4
    cbbc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    cbc0:	ea23 0302 	bic.w	r3, r3, r2
    cbc4:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    cbc8:	ea22 0204 	bic.w	r2, r2, r4
    cbcc:	4313      	orrs	r3, r2
    cbce:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cbd2:	d10f      	bne.n	cbf4 <strchr+0x54>
    cbd4:	f850 4f04 	ldr.w	r4, [r0, #4]!
    cbd8:	ea84 0c0e 	eor.w	ip, r4, lr
    cbdc:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    cbe0:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    cbe4:	ea23 0304 	bic.w	r3, r3, r4
    cbe8:	ea22 020c 	bic.w	r2, r2, ip
    cbec:	4313      	orrs	r3, r2
    cbee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cbf2:	d0ef      	beq.n	cbd4 <strchr+0x34>
    cbf4:	7803      	ldrb	r3, [r0, #0]
    cbf6:	b923      	cbnz	r3, cc02 <strchr+0x62>
    cbf8:	e036      	b.n	cc68 <strchr+0xc8>
    cbfa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d032      	beq.n	cc68 <strchr+0xc8>
    cc02:	4299      	cmp	r1, r3
    cc04:	d1f9      	bne.n	cbfa <strchr+0x5a>
    cc06:	bd10      	pop	{r4, pc}
    cc08:	428a      	cmp	r2, r1
    cc0a:	d011      	beq.n	cc30 <strchr+0x90>
    cc0c:	079a      	lsls	r2, r3, #30
    cc0e:	4618      	mov	r0, r3
    cc10:	d0cc      	beq.n	cbac <strchr+0xc>
    cc12:	4618      	mov	r0, r3
    cc14:	f813 2b01 	ldrb.w	r2, [r3], #1
    cc18:	2a00      	cmp	r2, #0
    cc1a:	d1f5      	bne.n	cc08 <strchr+0x68>
    cc1c:	4610      	mov	r0, r2
    cc1e:	4770      	bx	lr
    cc20:	0799      	lsls	r1, r3, #30
    cc22:	4618      	mov	r0, r3
    cc24:	d007      	beq.n	cc36 <strchr+0x96>
    cc26:	4618      	mov	r0, r3
    cc28:	3301      	adds	r3, #1
    cc2a:	7802      	ldrb	r2, [r0, #0]
    cc2c:	2a00      	cmp	r2, #0
    cc2e:	d1f7      	bne.n	cc20 <strchr+0x80>
    cc30:	4770      	bx	lr
    cc32:	0782      	lsls	r2, r0, #30
    cc34:	d1f7      	bne.n	cc26 <strchr+0x86>
    cc36:	6802      	ldr	r2, [r0, #0]
    cc38:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    cc3c:	ea23 0302 	bic.w	r3, r3, r2
    cc40:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cc44:	d108      	bne.n	cc58 <strchr+0xb8>
    cc46:	f850 2f04 	ldr.w	r2, [r0, #4]!
    cc4a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    cc4e:	ea23 0302 	bic.w	r3, r3, r2
    cc52:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cc56:	d0f6      	beq.n	cc46 <strchr+0xa6>
    cc58:	7803      	ldrb	r3, [r0, #0]
    cc5a:	2b00      	cmp	r3, #0
    cc5c:	d0e8      	beq.n	cc30 <strchr+0x90>
    cc5e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cc62:	2b00      	cmp	r3, #0
    cc64:	d1fb      	bne.n	cc5e <strchr+0xbe>
    cc66:	4770      	bx	lr
    cc68:	4618      	mov	r0, r3
    cc6a:	bd10      	pop	{r4, pc}

0000cc6c <strncpy>:
    cc6c:	ea40 0301 	orr.w	r3, r0, r1
    cc70:	079b      	lsls	r3, r3, #30
    cc72:	b530      	push	{r4, r5, lr}
    cc74:	d101      	bne.n	cc7a <strncpy+0xe>
    cc76:	2a03      	cmp	r2, #3
    cc78:	d80f      	bhi.n	cc9a <strncpy+0x2e>
    cc7a:	4684      	mov	ip, r0
    cc7c:	f101 3eff 	add.w	lr, r1, #4294967295
    cc80:	e007      	b.n	cc92 <strncpy+0x26>
    cc82:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    cc86:	f803 1b01 	strb.w	r1, [r3], #1
    cc8a:	1e54      	subs	r4, r2, #1
    cc8c:	b1c1      	cbz	r1, ccc0 <strncpy+0x54>
    cc8e:	469c      	mov	ip, r3
    cc90:	4622      	mov	r2, r4
    cc92:	4663      	mov	r3, ip
    cc94:	2a00      	cmp	r2, #0
    cc96:	d1f4      	bne.n	cc82 <strncpy+0x16>
    cc98:	bd30      	pop	{r4, r5, pc}
    cc9a:	460b      	mov	r3, r1
    cc9c:	4684      	mov	ip, r0
    cc9e:	4619      	mov	r1, r3
    cca0:	f853 5b04 	ldr.w	r5, [r3], #4
    cca4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    cca8:	ea24 0405 	bic.w	r4, r4, r5
    ccac:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ccb0:	d1e4      	bne.n	cc7c <strncpy+0x10>
    ccb2:	3a04      	subs	r2, #4
    ccb4:	2a03      	cmp	r2, #3
    ccb6:	f84c 5b04 	str.w	r5, [ip], #4
    ccba:	4619      	mov	r1, r3
    ccbc:	d8ef      	bhi.n	cc9e <strncpy+0x32>
    ccbe:	e7dd      	b.n	cc7c <strncpy+0x10>
    ccc0:	4494      	add	ip, r2
    ccc2:	2c00      	cmp	r4, #0
    ccc4:	d0e8      	beq.n	cc98 <strncpy+0x2c>
    ccc6:	f803 1b01 	strb.w	r1, [r3], #1
    ccca:	4563      	cmp	r3, ip
    cccc:	d1fb      	bne.n	ccc6 <strncpy+0x5a>
    ccce:	bd30      	pop	{r4, r5, pc}

0000ccd0 <__locale_mb_cur_max>:
    ccd0:	4b01      	ldr	r3, [pc, #4]	; (ccd8 <__locale_mb_cur_max+0x8>)
    ccd2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    ccd6:	4770      	bx	lr
    ccd8:	2000435c 	.word	0x2000435c

0000ccdc <_close_r>:
    ccdc:	b538      	push	{r3, r4, r5, lr}
    ccde:	4d07      	ldr	r5, [pc, #28]	; (ccfc <_close_r+0x20>)
    cce0:	2200      	movs	r2, #0
    cce2:	4604      	mov	r4, r0
    cce4:	4608      	mov	r0, r1
    cce6:	602a      	str	r2, [r5, #0]
    cce8:	f7fd fb08 	bl	a2fc <_close>
    ccec:	1c43      	adds	r3, r0, #1
    ccee:	d000      	beq.n	ccf2 <_close_r+0x16>
    ccf0:	bd38      	pop	{r3, r4, r5, pc}
    ccf2:	682b      	ldr	r3, [r5, #0]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d0fb      	beq.n	ccf0 <_close_r+0x14>
    ccf8:	6023      	str	r3, [r4, #0]
    ccfa:	bd38      	pop	{r3, r4, r5, pc}
    ccfc:	200053dc 	.word	0x200053dc

0000cd00 <_lseek_r>:
    cd00:	b538      	push	{r3, r4, r5, lr}
    cd02:	460c      	mov	r4, r1
    cd04:	4d08      	ldr	r5, [pc, #32]	; (cd28 <_lseek_r+0x28>)
    cd06:	4684      	mov	ip, r0
    cd08:	4611      	mov	r1, r2
    cd0a:	4620      	mov	r0, r4
    cd0c:	461a      	mov	r2, r3
    cd0e:	2300      	movs	r3, #0
    cd10:	602b      	str	r3, [r5, #0]
    cd12:	4664      	mov	r4, ip
    cd14:	f7fd fafe 	bl	a314 <_lseek>
    cd18:	1c43      	adds	r3, r0, #1
    cd1a:	d000      	beq.n	cd1e <_lseek_r+0x1e>
    cd1c:	bd38      	pop	{r3, r4, r5, pc}
    cd1e:	682b      	ldr	r3, [r5, #0]
    cd20:	2b00      	cmp	r3, #0
    cd22:	d0fb      	beq.n	cd1c <_lseek_r+0x1c>
    cd24:	6023      	str	r3, [r4, #0]
    cd26:	bd38      	pop	{r3, r4, r5, pc}
    cd28:	200053dc 	.word	0x200053dc

0000cd2c <_read_r>:
    cd2c:	b538      	push	{r3, r4, r5, lr}
    cd2e:	460c      	mov	r4, r1
    cd30:	4d08      	ldr	r5, [pc, #32]	; (cd54 <_read_r+0x28>)
    cd32:	4684      	mov	ip, r0
    cd34:	4611      	mov	r1, r2
    cd36:	4620      	mov	r0, r4
    cd38:	461a      	mov	r2, r3
    cd3a:	2300      	movs	r3, #0
    cd3c:	602b      	str	r3, [r5, #0]
    cd3e:	4664      	mov	r4, ip
    cd40:	f7fd fada 	bl	a2f8 <_read>
    cd44:	1c43      	adds	r3, r0, #1
    cd46:	d000      	beq.n	cd4a <_read_r+0x1e>
    cd48:	bd38      	pop	{r3, r4, r5, pc}
    cd4a:	682b      	ldr	r3, [r5, #0]
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	d0fb      	beq.n	cd48 <_read_r+0x1c>
    cd50:	6023      	str	r3, [r4, #0]
    cd52:	bd38      	pop	{r3, r4, r5, pc}
    cd54:	200053dc 	.word	0x200053dc

0000cd58 <_sbrk_r>:
    cd58:	b538      	push	{r3, r4, r5, lr}
    cd5a:	4d07      	ldr	r5, [pc, #28]	; (cd78 <_sbrk_r+0x20>)
    cd5c:	2200      	movs	r2, #0
    cd5e:	4604      	mov	r4, r0
    cd60:	4608      	mov	r0, r1
    cd62:	602a      	str	r2, [r5, #0]
    cd64:	f7fd faae 	bl	a2c4 <_sbrk>
    cd68:	1c43      	adds	r3, r0, #1
    cd6a:	d000      	beq.n	cd6e <_sbrk_r+0x16>
    cd6c:	bd38      	pop	{r3, r4, r5, pc}
    cd6e:	682b      	ldr	r3, [r5, #0]
    cd70:	2b00      	cmp	r3, #0
    cd72:	d0fb      	beq.n	cd6c <_sbrk_r+0x14>
    cd74:	6023      	str	r3, [r4, #0]
    cd76:	bd38      	pop	{r3, r4, r5, pc}
    cd78:	200053dc 	.word	0x200053dc

0000cd7c <_write_r>:
    cd7c:	b538      	push	{r3, r4, r5, lr}
    cd7e:	460c      	mov	r4, r1
    cd80:	4d08      	ldr	r5, [pc, #32]	; (cda4 <_write_r+0x28>)
    cd82:	4684      	mov	ip, r0
    cd84:	4611      	mov	r1, r2
    cd86:	4620      	mov	r0, r4
    cd88:	461a      	mov	r2, r3
    cd8a:	2300      	movs	r3, #0
    cd8c:	602b      	str	r3, [r5, #0]
    cd8e:	4664      	mov	r4, ip
    cd90:	f7fc fe56 	bl	9a40 <_write>
    cd94:	1c43      	adds	r3, r0, #1
    cd96:	d000      	beq.n	cd9a <_write_r+0x1e>
    cd98:	bd38      	pop	{r3, r4, r5, pc}
    cd9a:	682b      	ldr	r3, [r5, #0]
    cd9c:	2b00      	cmp	r3, #0
    cd9e:	d0fb      	beq.n	cd98 <_write_r+0x1c>
    cda0:	6023      	str	r3, [r4, #0]
    cda2:	bd38      	pop	{r3, r4, r5, pc}
    cda4:	200053dc 	.word	0x200053dc

0000cda8 <__errno>:
    cda8:	4b01      	ldr	r3, [pc, #4]	; (cdb0 <__errno+0x8>)
    cdaa:	6818      	ldr	r0, [r3, #0]
    cdac:	4770      	bx	lr
    cdae:	bf00      	nop
    cdb0:	200048e4 	.word	0x200048e4

0000cdb4 <__libc_init_array>:
    cdb4:	b570      	push	{r4, r5, r6, lr}
    cdb6:	4e0d      	ldr	r6, [pc, #52]	; (cdec <__libc_init_array+0x38>)
    cdb8:	4d0d      	ldr	r5, [pc, #52]	; (cdf0 <__libc_init_array+0x3c>)
    cdba:	1b76      	subs	r6, r6, r5
    cdbc:	10b6      	asrs	r6, r6, #2
    cdbe:	d006      	beq.n	cdce <__libc_init_array+0x1a>
    cdc0:	2400      	movs	r4, #0
    cdc2:	f855 3b04 	ldr.w	r3, [r5], #4
    cdc6:	3401      	adds	r4, #1
    cdc8:	4798      	blx	r3
    cdca:	42a6      	cmp	r6, r4
    cdcc:	d1f9      	bne.n	cdc2 <__libc_init_array+0xe>
    cdce:	4e09      	ldr	r6, [pc, #36]	; (cdf4 <__libc_init_array+0x40>)
    cdd0:	4d09      	ldr	r5, [pc, #36]	; (cdf8 <__libc_init_array+0x44>)
    cdd2:	1b76      	subs	r6, r6, r5
    cdd4:	f005 fb98 	bl	12508 <___init_veneer>
    cdd8:	10b6      	asrs	r6, r6, #2
    cdda:	d006      	beq.n	cdea <__libc_init_array+0x36>
    cddc:	2400      	movs	r4, #0
    cdde:	f855 3b04 	ldr.w	r3, [r5], #4
    cde2:	3401      	adds	r4, #1
    cde4:	4798      	blx	r3
    cde6:	42a6      	cmp	r6, r4
    cde8:	d1f9      	bne.n	cdde <__libc_init_array+0x2a>
    cdea:	bd70      	pop	{r4, r5, r6, pc}
    cdec:	60001e48 	.word	0x60001e48
    cdf0:	60001e48 	.word	0x60001e48
    cdf4:	60001e50 	.word	0x60001e50
    cdf8:	60001e48 	.word	0x60001e48

0000cdfc <__retarget_lock_init_recursive>:
    cdfc:	4770      	bx	lr
    cdfe:	bf00      	nop

0000ce00 <__retarget_lock_close_recursive>:
    ce00:	4770      	bx	lr
    ce02:	bf00      	nop

0000ce04 <__retarget_lock_acquire_recursive>:
    ce04:	4770      	bx	lr
    ce06:	bf00      	nop

0000ce08 <__retarget_lock_release_recursive>:
    ce08:	4770      	bx	lr
    ce0a:	bf00      	nop
	...
    ce20:	eba2 0003 	sub.w	r0, r2, r3
    ce24:	4770      	bx	lr
    ce26:	bf00      	nop

0000ce28 <strcmp>:
    ce28:	7802      	ldrb	r2, [r0, #0]
    ce2a:	780b      	ldrb	r3, [r1, #0]
    ce2c:	2a01      	cmp	r2, #1
    ce2e:	bf28      	it	cs
    ce30:	429a      	cmpcs	r2, r3
    ce32:	d1f5      	bne.n	ce20 <__retarget_lock_release_recursive+0x18>
    ce34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    ce38:	ea40 0401 	orr.w	r4, r0, r1
    ce3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    ce40:	f06f 0c00 	mvn.w	ip, #0
    ce44:	ea4f 7244 	mov.w	r2, r4, lsl #29
    ce48:	b312      	cbz	r2, ce90 <strcmp+0x68>
    ce4a:	ea80 0401 	eor.w	r4, r0, r1
    ce4e:	f014 0f07 	tst.w	r4, #7
    ce52:	d16a      	bne.n	cf2a <strcmp+0x102>
    ce54:	f000 0407 	and.w	r4, r0, #7
    ce58:	f020 0007 	bic.w	r0, r0, #7
    ce5c:	f004 0503 	and.w	r5, r4, #3
    ce60:	f021 0107 	bic.w	r1, r1, #7
    ce64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    ce68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    ce6c:	f014 0f04 	tst.w	r4, #4
    ce70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    ce74:	fa0c f405 	lsl.w	r4, ip, r5
    ce78:	ea62 0204 	orn	r2, r2, r4
    ce7c:	ea66 0604 	orn	r6, r6, r4
    ce80:	d00a      	beq.n	ce98 <strcmp+0x70>
    ce82:	ea63 0304 	orn	r3, r3, r4
    ce86:	4662      	mov	r2, ip
    ce88:	ea67 0704 	orn	r7, r7, r4
    ce8c:	4666      	mov	r6, ip
    ce8e:	e003      	b.n	ce98 <strcmp+0x70>
    ce90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    ce94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    ce98:	fa82 f54c 	uadd8	r5, r2, ip
    ce9c:	ea82 0406 	eor.w	r4, r2, r6
    cea0:	faa4 f48c 	sel	r4, r4, ip
    cea4:	bb6c      	cbnz	r4, cf02 <strcmp+0xda>
    cea6:	fa83 f54c 	uadd8	r5, r3, ip
    ceaa:	ea83 0507 	eor.w	r5, r3, r7
    ceae:	faa5 f58c 	sel	r5, r5, ip
    ceb2:	b995      	cbnz	r5, ceda <strcmp+0xb2>
    ceb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    ceb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    cebc:	fa82 f54c 	uadd8	r5, r2, ip
    cec0:	ea82 0406 	eor.w	r4, r2, r6
    cec4:	faa4 f48c 	sel	r4, r4, ip
    cec8:	fa83 f54c 	uadd8	r5, r3, ip
    cecc:	ea83 0507 	eor.w	r5, r3, r7
    ced0:	faa5 f58c 	sel	r5, r5, ip
    ced4:	4325      	orrs	r5, r4
    ced6:	d0db      	beq.n	ce90 <strcmp+0x68>
    ced8:	b99c      	cbnz	r4, cf02 <strcmp+0xda>
    ceda:	ba2d      	rev	r5, r5
    cedc:	fab5 f485 	clz	r4, r5
    cee0:	f024 0407 	bic.w	r4, r4, #7
    cee4:	fa27 f104 	lsr.w	r1, r7, r4
    cee8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    ceec:	fa23 f304 	lsr.w	r3, r3, r4
    cef0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cef4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cef8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cefc:	eba0 0001 	sub.w	r0, r0, r1
    cf00:	4770      	bx	lr
    cf02:	ba24      	rev	r4, r4
    cf04:	fab4 f484 	clz	r4, r4
    cf08:	f024 0407 	bic.w	r4, r4, #7
    cf0c:	fa26 f104 	lsr.w	r1, r6, r4
    cf10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cf14:	fa22 f204 	lsr.w	r2, r2, r4
    cf18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cf1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cf20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cf24:	eba0 0001 	sub.w	r0, r0, r1
    cf28:	4770      	bx	lr
    cf2a:	f014 0f03 	tst.w	r4, #3
    cf2e:	d13c      	bne.n	cfaa <strcmp+0x182>
    cf30:	f010 0403 	ands.w	r4, r0, #3
    cf34:	d128      	bne.n	cf88 <strcmp+0x160>
    cf36:	f850 2b08 	ldr.w	r2, [r0], #8
    cf3a:	f851 3b08 	ldr.w	r3, [r1], #8
    cf3e:	fa82 f54c 	uadd8	r5, r2, ip
    cf42:	ea82 0503 	eor.w	r5, r2, r3
    cf46:	faa5 f58c 	sel	r5, r5, ip
    cf4a:	b95d      	cbnz	r5, cf64 <strcmp+0x13c>
    cf4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    cf50:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cf54:	fa82 f54c 	uadd8	r5, r2, ip
    cf58:	ea82 0503 	eor.w	r5, r2, r3
    cf5c:	faa5 f58c 	sel	r5, r5, ip
    cf60:	2d00      	cmp	r5, #0
    cf62:	d0e8      	beq.n	cf36 <strcmp+0x10e>
    cf64:	ba2d      	rev	r5, r5
    cf66:	fab5 f485 	clz	r4, r5
    cf6a:	f024 0407 	bic.w	r4, r4, #7
    cf6e:	fa23 f104 	lsr.w	r1, r3, r4
    cf72:	fa22 f204 	lsr.w	r2, r2, r4
    cf76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cf7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cf7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cf82:	eba0 0001 	sub.w	r0, r0, r1
    cf86:	4770      	bx	lr
    cf88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    cf8c:	f020 0003 	bic.w	r0, r0, #3
    cf90:	f850 2b08 	ldr.w	r2, [r0], #8
    cf94:	f021 0103 	bic.w	r1, r1, #3
    cf98:	f851 3b08 	ldr.w	r3, [r1], #8
    cf9c:	fa0c f404 	lsl.w	r4, ip, r4
    cfa0:	ea62 0204 	orn	r2, r2, r4
    cfa4:	ea63 0304 	orn	r3, r3, r4
    cfa8:	e7c9      	b.n	cf3e <strcmp+0x116>
    cfaa:	f010 0403 	ands.w	r4, r0, #3
    cfae:	d01a      	beq.n	cfe6 <strcmp+0x1be>
    cfb0:	eba1 0104 	sub.w	r1, r1, r4
    cfb4:	f020 0003 	bic.w	r0, r0, #3
    cfb8:	07e4      	lsls	r4, r4, #31
    cfba:	f850 2b04 	ldr.w	r2, [r0], #4
    cfbe:	d006      	beq.n	cfce <strcmp+0x1a6>
    cfc0:	d20f      	bcs.n	cfe2 <strcmp+0x1ba>
    cfc2:	788b      	ldrb	r3, [r1, #2]
    cfc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    cfc8:	1ae4      	subs	r4, r4, r3
    cfca:	d106      	bne.n	cfda <strcmp+0x1b2>
    cfcc:	b12b      	cbz	r3, cfda <strcmp+0x1b2>
    cfce:	78cb      	ldrb	r3, [r1, #3]
    cfd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    cfd4:	1ae4      	subs	r4, r4, r3
    cfd6:	d100      	bne.n	cfda <strcmp+0x1b2>
    cfd8:	b91b      	cbnz	r3, cfe2 <strcmp+0x1ba>
    cfda:	4620      	mov	r0, r4
    cfdc:	f85d 4b10 	ldr.w	r4, [sp], #16
    cfe0:	4770      	bx	lr
    cfe2:	f101 0104 	add.w	r1, r1, #4
    cfe6:	f850 2b04 	ldr.w	r2, [r0], #4
    cfea:	07cc      	lsls	r4, r1, #31
    cfec:	f021 0103 	bic.w	r1, r1, #3
    cff0:	f851 3b04 	ldr.w	r3, [r1], #4
    cff4:	d848      	bhi.n	d088 <strcmp+0x260>
    cff6:	d224      	bcs.n	d042 <strcmp+0x21a>
    cff8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    cffc:	fa82 f54c 	uadd8	r5, r2, ip
    d000:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    d004:	faa5 f58c 	sel	r5, r5, ip
    d008:	d10a      	bne.n	d020 <strcmp+0x1f8>
    d00a:	b965      	cbnz	r5, d026 <strcmp+0x1fe>
    d00c:	f851 3b04 	ldr.w	r3, [r1], #4
    d010:	ea84 0402 	eor.w	r4, r4, r2
    d014:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    d018:	d10e      	bne.n	d038 <strcmp+0x210>
    d01a:	f850 2b04 	ldr.w	r2, [r0], #4
    d01e:	e7eb      	b.n	cff8 <strcmp+0x1d0>
    d020:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d024:	e055      	b.n	d0d2 <strcmp+0x2aa>
    d026:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    d02a:	d14d      	bne.n	d0c8 <strcmp+0x2a0>
    d02c:	7808      	ldrb	r0, [r1, #0]
    d02e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d032:	f1c0 0000 	rsb	r0, r0, #0
    d036:	4770      	bx	lr
    d038:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d03c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d040:	e047      	b.n	d0d2 <strcmp+0x2aa>
    d042:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    d046:	fa82 f54c 	uadd8	r5, r2, ip
    d04a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    d04e:	faa5 f58c 	sel	r5, r5, ip
    d052:	d10a      	bne.n	d06a <strcmp+0x242>
    d054:	b965      	cbnz	r5, d070 <strcmp+0x248>
    d056:	f851 3b04 	ldr.w	r3, [r1], #4
    d05a:	ea84 0402 	eor.w	r4, r4, r2
    d05e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    d062:	d10c      	bne.n	d07e <strcmp+0x256>
    d064:	f850 2b04 	ldr.w	r2, [r0], #4
    d068:	e7eb      	b.n	d042 <strcmp+0x21a>
    d06a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    d06e:	e030      	b.n	d0d2 <strcmp+0x2aa>
    d070:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    d074:	d128      	bne.n	d0c8 <strcmp+0x2a0>
    d076:	880b      	ldrh	r3, [r1, #0]
    d078:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d07c:	e029      	b.n	d0d2 <strcmp+0x2aa>
    d07e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d082:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    d086:	e024      	b.n	d0d2 <strcmp+0x2aa>
    d088:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    d08c:	fa82 f54c 	uadd8	r5, r2, ip
    d090:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    d094:	faa5 f58c 	sel	r5, r5, ip
    d098:	d10a      	bne.n	d0b0 <strcmp+0x288>
    d09a:	b965      	cbnz	r5, d0b6 <strcmp+0x28e>
    d09c:	f851 3b04 	ldr.w	r3, [r1], #4
    d0a0:	ea84 0402 	eor.w	r4, r4, r2
    d0a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    d0a8:	d109      	bne.n	d0be <strcmp+0x296>
    d0aa:	f850 2b04 	ldr.w	r2, [r0], #4
    d0ae:	e7eb      	b.n	d088 <strcmp+0x260>
    d0b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    d0b4:	e00d      	b.n	d0d2 <strcmp+0x2aa>
    d0b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    d0ba:	d105      	bne.n	d0c8 <strcmp+0x2a0>
    d0bc:	680b      	ldr	r3, [r1, #0]
    d0be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    d0c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d0c6:	e004      	b.n	d0d2 <strcmp+0x2aa>
    d0c8:	f04f 0000 	mov.w	r0, #0
    d0cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d0d0:	4770      	bx	lr
    d0d2:	ba12      	rev	r2, r2
    d0d4:	ba1b      	rev	r3, r3
    d0d6:	fa82 f44c 	uadd8	r4, r2, ip
    d0da:	ea82 0403 	eor.w	r4, r2, r3
    d0de:	faa4 f58c 	sel	r5, r4, ip
    d0e2:	fab5 f485 	clz	r4, r5
    d0e6:	fa02 f204 	lsl.w	r2, r2, r4
    d0ea:	fa03 f304 	lsl.w	r3, r3, r4
    d0ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    d0f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d0f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    d0fa:	4770      	bx	lr

0000d0fc <strcpy>:
    d0fc:	ea80 0201 	eor.w	r2, r0, r1
    d100:	4684      	mov	ip, r0
    d102:	f012 0f03 	tst.w	r2, #3
    d106:	d14f      	bne.n	d1a8 <strcpy+0xac>
    d108:	f011 0f03 	tst.w	r1, #3
    d10c:	d132      	bne.n	d174 <strcpy+0x78>
    d10e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    d112:	f011 0f04 	tst.w	r1, #4
    d116:	f851 3b04 	ldr.w	r3, [r1], #4
    d11a:	d00b      	beq.n	d134 <strcpy+0x38>
    d11c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d120:	439a      	bics	r2, r3
    d122:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d126:	bf04      	itt	eq
    d128:	f84c 3b04 	streq.w	r3, [ip], #4
    d12c:	f851 3b04 	ldreq.w	r3, [r1], #4
    d130:	d116      	bne.n	d160 <strcpy+0x64>
    d132:	bf00      	nop
    d134:	f851 4b04 	ldr.w	r4, [r1], #4
    d138:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d13c:	439a      	bics	r2, r3
    d13e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d142:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    d146:	d10b      	bne.n	d160 <strcpy+0x64>
    d148:	f84c 3b04 	str.w	r3, [ip], #4
    d14c:	43a2      	bics	r2, r4
    d14e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d152:	bf04      	itt	eq
    d154:	f851 3b04 	ldreq.w	r3, [r1], #4
    d158:	f84c 4b04 	streq.w	r4, [ip], #4
    d15c:	d0ea      	beq.n	d134 <strcpy+0x38>
    d15e:	4623      	mov	r3, r4
    d160:	f80c 3b01 	strb.w	r3, [ip], #1
    d164:	f013 0fff 	tst.w	r3, #255	; 0xff
    d168:	ea4f 2333 	mov.w	r3, r3, ror #8
    d16c:	d1f8      	bne.n	d160 <strcpy+0x64>
    d16e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d172:	4770      	bx	lr
    d174:	f011 0f01 	tst.w	r1, #1
    d178:	d006      	beq.n	d188 <strcpy+0x8c>
    d17a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d17e:	f80c 2b01 	strb.w	r2, [ip], #1
    d182:	2a00      	cmp	r2, #0
    d184:	bf08      	it	eq
    d186:	4770      	bxeq	lr
    d188:	f011 0f02 	tst.w	r1, #2
    d18c:	d0bf      	beq.n	d10e <strcpy+0x12>
    d18e:	f831 2b02 	ldrh.w	r2, [r1], #2
    d192:	f012 0fff 	tst.w	r2, #255	; 0xff
    d196:	bf16      	itet	ne
    d198:	f82c 2b02 	strhne.w	r2, [ip], #2
    d19c:	f88c 2000 	strbeq.w	r2, [ip]
    d1a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    d1a4:	d1b3      	bne.n	d10e <strcpy+0x12>
    d1a6:	4770      	bx	lr
    d1a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    d1ac:	f80c 2b01 	strb.w	r2, [ip], #1
    d1b0:	2a00      	cmp	r2, #0
    d1b2:	d1f9      	bne.n	d1a8 <strcpy+0xac>
    d1b4:	4770      	bx	lr
    d1b6:	bf00      	nop
	...

0000d1c0 <strlen>:
    d1c0:	f890 f000 	pld	[r0]
    d1c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d1c8:	f020 0107 	bic.w	r1, r0, #7
    d1cc:	f06f 0c00 	mvn.w	ip, #0
    d1d0:	f010 0407 	ands.w	r4, r0, #7
    d1d4:	f891 f020 	pld	[r1, #32]
    d1d8:	f040 8049 	bne.w	d26e <strlen+0xae>
    d1dc:	f04f 0400 	mov.w	r4, #0
    d1e0:	f06f 0007 	mvn.w	r0, #7
    d1e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    d1e8:	f891 f040 	pld	[r1, #64]	; 0x40
    d1ec:	f100 0008 	add.w	r0, r0, #8
    d1f0:	fa82 f24c 	uadd8	r2, r2, ip
    d1f4:	faa4 f28c 	sel	r2, r4, ip
    d1f8:	fa83 f34c 	uadd8	r3, r3, ip
    d1fc:	faa2 f38c 	sel	r3, r2, ip
    d200:	bb4b      	cbnz	r3, d256 <strlen+0x96>
    d202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d206:	fa82 f24c 	uadd8	r2, r2, ip
    d20a:	f100 0008 	add.w	r0, r0, #8
    d20e:	faa4 f28c 	sel	r2, r4, ip
    d212:	fa83 f34c 	uadd8	r3, r3, ip
    d216:	faa2 f38c 	sel	r3, r2, ip
    d21a:	b9e3      	cbnz	r3, d256 <strlen+0x96>
    d21c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d220:	fa82 f24c 	uadd8	r2, r2, ip
    d224:	f100 0008 	add.w	r0, r0, #8
    d228:	faa4 f28c 	sel	r2, r4, ip
    d22c:	fa83 f34c 	uadd8	r3, r3, ip
    d230:	faa2 f38c 	sel	r3, r2, ip
    d234:	b97b      	cbnz	r3, d256 <strlen+0x96>
    d236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d23a:	f101 0120 	add.w	r1, r1, #32
    d23e:	fa82 f24c 	uadd8	r2, r2, ip
    d242:	f100 0008 	add.w	r0, r0, #8
    d246:	faa4 f28c 	sel	r2, r4, ip
    d24a:	fa83 f34c 	uadd8	r3, r3, ip
    d24e:	faa2 f38c 	sel	r3, r2, ip
    d252:	2b00      	cmp	r3, #0
    d254:	d0c6      	beq.n	d1e4 <strlen+0x24>
    d256:	2a00      	cmp	r2, #0
    d258:	bf04      	itt	eq
    d25a:	3004      	addeq	r0, #4
    d25c:	461a      	moveq	r2, r3
    d25e:	ba12      	rev	r2, r2
    d260:	fab2 f282 	clz	r2, r2
    d264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d26c:	4770      	bx	lr
    d26e:	e9d1 2300 	ldrd	r2, r3, [r1]
    d272:	f004 0503 	and.w	r5, r4, #3
    d276:	f1c4 0000 	rsb	r0, r4, #0
    d27a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d27e:	f014 0f04 	tst.w	r4, #4
    d282:	f891 f040 	pld	[r1, #64]	; 0x40
    d286:	fa0c f505 	lsl.w	r5, ip, r5
    d28a:	ea62 0205 	orn	r2, r2, r5
    d28e:	bf1c      	itt	ne
    d290:	ea63 0305 	ornne	r3, r3, r5
    d294:	4662      	movne	r2, ip
    d296:	f04f 0400 	mov.w	r4, #0
    d29a:	e7a9      	b.n	d1f0 <strlen+0x30>

0000d29c <__register_exitproc>:
    d29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d2a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; d320 <__register_exitproc+0x84>
    d2a4:	4606      	mov	r6, r0
    d2a6:	f8da 0000 	ldr.w	r0, [sl]
    d2aa:	4698      	mov	r8, r3
    d2ac:	460f      	mov	r7, r1
    d2ae:	4691      	mov	r9, r2
    d2b0:	f7ff fda8 	bl	ce04 <__retarget_lock_acquire_recursive>
    d2b4:	4b18      	ldr	r3, [pc, #96]	; (d318 <__register_exitproc+0x7c>)
    d2b6:	681c      	ldr	r4, [r3, #0]
    d2b8:	b324      	cbz	r4, d304 <__register_exitproc+0x68>
    d2ba:	6865      	ldr	r5, [r4, #4]
    d2bc:	2d1f      	cmp	r5, #31
    d2be:	dc24      	bgt.n	d30a <__register_exitproc+0x6e>
    d2c0:	b95e      	cbnz	r6, d2da <__register_exitproc+0x3e>
    d2c2:	1c6b      	adds	r3, r5, #1
    d2c4:	3502      	adds	r5, #2
    d2c6:	f8da 0000 	ldr.w	r0, [sl]
    d2ca:	6063      	str	r3, [r4, #4]
    d2cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    d2d0:	f7ff fd9a 	bl	ce08 <__retarget_lock_release_recursive>
    d2d4:	2000      	movs	r0, #0
    d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    d2de:	2301      	movs	r3, #1
    d2e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d2e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    d2e8:	40ab      	lsls	r3, r5
    d2ea:	431a      	orrs	r2, r3
    d2ec:	2e02      	cmp	r6, #2
    d2ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    d2f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d2f6:	d1e4      	bne.n	d2c2 <__register_exitproc+0x26>
    d2f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    d2fc:	431a      	orrs	r2, r3
    d2fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    d302:	e7de      	b.n	d2c2 <__register_exitproc+0x26>
    d304:	4c05      	ldr	r4, [pc, #20]	; (d31c <__register_exitproc+0x80>)
    d306:	601c      	str	r4, [r3, #0]
    d308:	e7d7      	b.n	d2ba <__register_exitproc+0x1e>
    d30a:	f8da 0000 	ldr.w	r0, [sl]
    d30e:	f7ff fd7b 	bl	ce08 <__retarget_lock_release_recursive>
    d312:	f04f 30ff 	mov.w	r0, #4294967295
    d316:	e7de      	b.n	d2d6 <__register_exitproc+0x3a>
    d318:	200050b8 	.word	0x200050b8
    d31c:	200050bc 	.word	0x200050bc
    d320:	20004350 	.word	0x20004350

0000d324 <_malloc_trim_r>:
    d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d326:	4f24      	ldr	r7, [pc, #144]	; (d3b8 <_malloc_trim_r+0x94>)
    d328:	460c      	mov	r4, r1
    d32a:	4606      	mov	r6, r0
    d32c:	f7fe fe9e 	bl	c06c <__malloc_lock>
    d330:	68bb      	ldr	r3, [r7, #8]
    d332:	685d      	ldr	r5, [r3, #4]
    d334:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d338:	310f      	adds	r1, #15
    d33a:	f025 0503 	bic.w	r5, r5, #3
    d33e:	194b      	adds	r3, r1, r5
    d340:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d344:	f023 030f 	bic.w	r3, r3, #15
    d348:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d34c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d350:	db07      	blt.n	d362 <_malloc_trim_r+0x3e>
    d352:	2100      	movs	r1, #0
    d354:	4630      	mov	r0, r6
    d356:	f7ff fcff 	bl	cd58 <_sbrk_r>
    d35a:	68bb      	ldr	r3, [r7, #8]
    d35c:	442b      	add	r3, r5
    d35e:	4298      	cmp	r0, r3
    d360:	d004      	beq.n	d36c <_malloc_trim_r+0x48>
    d362:	4630      	mov	r0, r6
    d364:	f7fe fe88 	bl	c078 <__malloc_unlock>
    d368:	2000      	movs	r0, #0
    d36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d36c:	4261      	negs	r1, r4
    d36e:	4630      	mov	r0, r6
    d370:	f7ff fcf2 	bl	cd58 <_sbrk_r>
    d374:	3001      	adds	r0, #1
    d376:	d00d      	beq.n	d394 <_malloc_trim_r+0x70>
    d378:	4a10      	ldr	r2, [pc, #64]	; (d3bc <_malloc_trim_r+0x98>)
    d37a:	68bb      	ldr	r3, [r7, #8]
    d37c:	1b2d      	subs	r5, r5, r4
    d37e:	f045 0501 	orr.w	r5, r5, #1
    d382:	605d      	str	r5, [r3, #4]
    d384:	6813      	ldr	r3, [r2, #0]
    d386:	4630      	mov	r0, r6
    d388:	1b1b      	subs	r3, r3, r4
    d38a:	6013      	str	r3, [r2, #0]
    d38c:	f7fe fe74 	bl	c078 <__malloc_unlock>
    d390:	2001      	movs	r0, #1
    d392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d394:	2100      	movs	r1, #0
    d396:	4630      	mov	r0, r6
    d398:	f7ff fcde 	bl	cd58 <_sbrk_r>
    d39c:	68ba      	ldr	r2, [r7, #8]
    d39e:	1a83      	subs	r3, r0, r2
    d3a0:	2b0f      	cmp	r3, #15
    d3a2:	ddde      	ble.n	d362 <_malloc_trim_r+0x3e>
    d3a4:	f043 0301 	orr.w	r3, r3, #1
    d3a8:	6053      	str	r3, [r2, #4]
    d3aa:	4b05      	ldr	r3, [pc, #20]	; (d3c0 <_malloc_trim_r+0x9c>)
    d3ac:	4903      	ldr	r1, [pc, #12]	; (d3bc <_malloc_trim_r+0x98>)
    d3ae:	681b      	ldr	r3, [r3, #0]
    d3b0:	1ac0      	subs	r0, r0, r3
    d3b2:	6008      	str	r0, [r1, #0]
    d3b4:	e7d5      	b.n	d362 <_malloc_trim_r+0x3e>
    d3b6:	bf00      	nop
    d3b8:	200044c8 	.word	0x200044c8
    d3bc:	20005258 	.word	0x20005258
    d3c0:	200048d0 	.word	0x200048d0

0000d3c4 <_free_r>:
    d3c4:	2900      	cmp	r1, #0
    d3c6:	d061      	beq.n	d48c <_free_r+0xc8>
    d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3ca:	460c      	mov	r4, r1
    d3cc:	4606      	mov	r6, r0
    d3ce:	f7fe fe4d 	bl	c06c <__malloc_lock>
    d3d2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d3d6:	4f7b      	ldr	r7, [pc, #492]	; (d5c4 <_free_r+0x200>)
    d3d8:	f1a4 0508 	sub.w	r5, r4, #8
    d3dc:	f022 0101 	bic.w	r1, r2, #1
    d3e0:	eb05 0c01 	add.w	ip, r5, r1
    d3e4:	68b8      	ldr	r0, [r7, #8]
    d3e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d3ea:	4560      	cmp	r0, ip
    d3ec:	f023 0303 	bic.w	r3, r3, #3
    d3f0:	f000 808b 	beq.w	d50a <_free_r+0x146>
    d3f4:	07d2      	lsls	r2, r2, #31
    d3f6:	f8cc 3004 	str.w	r3, [ip, #4]
    d3fa:	d432      	bmi.n	d462 <_free_r+0x9e>
    d3fc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d400:	1aad      	subs	r5, r5, r2
    d402:	4411      	add	r1, r2
    d404:	68aa      	ldr	r2, [r5, #8]
    d406:	f107 0008 	add.w	r0, r7, #8
    d40a:	4282      	cmp	r2, r0
    d40c:	d06a      	beq.n	d4e4 <_free_r+0x120>
    d40e:	eb0c 0403 	add.w	r4, ip, r3
    d412:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d416:	68ec      	ldr	r4, [r5, #12]
    d418:	60d4      	str	r4, [r2, #12]
    d41a:	f01e 0f01 	tst.w	lr, #1
    d41e:	60a2      	str	r2, [r4, #8]
    d420:	f000 8097 	beq.w	d552 <_free_r+0x18e>
    d424:	f041 0301 	orr.w	r3, r1, #1
    d428:	606b      	str	r3, [r5, #4]
    d42a:	f8cc 1000 	str.w	r1, [ip]
    d42e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d432:	d235      	bcs.n	d4a0 <_free_r+0xdc>
    d434:	6878      	ldr	r0, [r7, #4]
    d436:	08cb      	lsrs	r3, r1, #3
    d438:	2201      	movs	r2, #1
    d43a:	0949      	lsrs	r1, r1, #5
    d43c:	3301      	adds	r3, #1
    d43e:	408a      	lsls	r2, r1
    d440:	4302      	orrs	r2, r0
    d442:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d446:	607a      	str	r2, [r7, #4]
    d448:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d44c:	3a08      	subs	r2, #8
    d44e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d452:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d456:	60cd      	str	r5, [r1, #12]
    d458:	4630      	mov	r0, r6
    d45a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d45e:	f7fe be0b 	b.w	c078 <__malloc_unlock>
    d462:	eb0c 0203 	add.w	r2, ip, r3
    d466:	6852      	ldr	r2, [r2, #4]
    d468:	07d0      	lsls	r0, r2, #31
    d46a:	d410      	bmi.n	d48e <_free_r+0xca>
    d46c:	4419      	add	r1, r3
    d46e:	f107 0008 	add.w	r0, r7, #8
    d472:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d476:	4283      	cmp	r3, r0
    d478:	d073      	beq.n	d562 <_free_r+0x19e>
    d47a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d47e:	60da      	str	r2, [r3, #12]
    d480:	6093      	str	r3, [r2, #8]
    d482:	f041 0301 	orr.w	r3, r1, #1
    d486:	606b      	str	r3, [r5, #4]
    d488:	5069      	str	r1, [r5, r1]
    d48a:	e7d0      	b.n	d42e <_free_r+0x6a>
    d48c:	4770      	bx	lr
    d48e:	f041 0301 	orr.w	r3, r1, #1
    d492:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d496:	f844 3c04 	str.w	r3, [r4, #-4]
    d49a:	f8cc 1000 	str.w	r1, [ip]
    d49e:	d3c9      	bcc.n	d434 <_free_r+0x70>
    d4a0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d4a4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d4a8:	d248      	bcs.n	d53c <_free_r+0x178>
    d4aa:	098b      	lsrs	r3, r1, #6
    d4ac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d4b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d4b4:	00c3      	lsls	r3, r0, #3
    d4b6:	18f8      	adds	r0, r7, r3
    d4b8:	58fb      	ldr	r3, [r7, r3]
    d4ba:	3808      	subs	r0, #8
    d4bc:	4298      	cmp	r0, r3
    d4be:	d059      	beq.n	d574 <_free_r+0x1b0>
    d4c0:	685a      	ldr	r2, [r3, #4]
    d4c2:	f022 0203 	bic.w	r2, r2, #3
    d4c6:	428a      	cmp	r2, r1
    d4c8:	d902      	bls.n	d4d0 <_free_r+0x10c>
    d4ca:	689b      	ldr	r3, [r3, #8]
    d4cc:	4298      	cmp	r0, r3
    d4ce:	d1f7      	bne.n	d4c0 <_free_r+0xfc>
    d4d0:	68d8      	ldr	r0, [r3, #12]
    d4d2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d4d6:	6085      	str	r5, [r0, #8]
    d4d8:	60dd      	str	r5, [r3, #12]
    d4da:	4630      	mov	r0, r6
    d4dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4e0:	f7fe bdca 	b.w	c078 <__malloc_unlock>
    d4e4:	eb0c 0203 	add.w	r2, ip, r3
    d4e8:	6852      	ldr	r2, [r2, #4]
    d4ea:	07d2      	lsls	r2, r2, #31
    d4ec:	d463      	bmi.n	d5b6 <_free_r+0x1f2>
    d4ee:	440b      	add	r3, r1
    d4f0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d4f4:	60ca      	str	r2, [r1, #12]
    d4f6:	6091      	str	r1, [r2, #8]
    d4f8:	f043 0201 	orr.w	r2, r3, #1
    d4fc:	606a      	str	r2, [r5, #4]
    d4fe:	4630      	mov	r0, r6
    d500:	50eb      	str	r3, [r5, r3]
    d502:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d506:	f7fe bdb7 	b.w	c078 <__malloc_unlock>
    d50a:	440b      	add	r3, r1
    d50c:	07d1      	lsls	r1, r2, #31
    d50e:	d407      	bmi.n	d520 <_free_r+0x15c>
    d510:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d514:	1aad      	subs	r5, r5, r2
    d516:	4413      	add	r3, r2
    d518:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d51c:	60ca      	str	r2, [r1, #12]
    d51e:	6091      	str	r1, [r2, #8]
    d520:	f043 0201 	orr.w	r2, r3, #1
    d524:	606a      	str	r2, [r5, #4]
    d526:	4a28      	ldr	r2, [pc, #160]	; (d5c8 <_free_r+0x204>)
    d528:	60bd      	str	r5, [r7, #8]
    d52a:	6812      	ldr	r2, [r2, #0]
    d52c:	429a      	cmp	r2, r3
    d52e:	d893      	bhi.n	d458 <_free_r+0x94>
    d530:	4b26      	ldr	r3, [pc, #152]	; (d5cc <_free_r+0x208>)
    d532:	4630      	mov	r0, r6
    d534:	6819      	ldr	r1, [r3, #0]
    d536:	f7ff fef5 	bl	d324 <_malloc_trim_r>
    d53a:	e78d      	b.n	d458 <_free_r+0x94>
    d53c:	2b14      	cmp	r3, #20
    d53e:	d90a      	bls.n	d556 <_free_r+0x192>
    d540:	2b54      	cmp	r3, #84	; 0x54
    d542:	d81f      	bhi.n	d584 <_free_r+0x1c0>
    d544:	0b0b      	lsrs	r3, r1, #12
    d546:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d54a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d54e:	00c3      	lsls	r3, r0, #3
    d550:	e7b1      	b.n	d4b6 <_free_r+0xf2>
    d552:	4419      	add	r1, r3
    d554:	e78d      	b.n	d472 <_free_r+0xae>
    d556:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d55a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d55e:	00c3      	lsls	r3, r0, #3
    d560:	e7a9      	b.n	d4b6 <_free_r+0xf2>
    d562:	f041 0301 	orr.w	r3, r1, #1
    d566:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d56a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d56e:	606b      	str	r3, [r5, #4]
    d570:	5069      	str	r1, [r5, r1]
    d572:	e771      	b.n	d458 <_free_r+0x94>
    d574:	6879      	ldr	r1, [r7, #4]
    d576:	1092      	asrs	r2, r2, #2
    d578:	2401      	movs	r4, #1
    d57a:	fa04 f202 	lsl.w	r2, r4, r2
    d57e:	430a      	orrs	r2, r1
    d580:	607a      	str	r2, [r7, #4]
    d582:	e7a6      	b.n	d4d2 <_free_r+0x10e>
    d584:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d588:	d806      	bhi.n	d598 <_free_r+0x1d4>
    d58a:	0bcb      	lsrs	r3, r1, #15
    d58c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d590:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d594:	00c3      	lsls	r3, r0, #3
    d596:	e78e      	b.n	d4b6 <_free_r+0xf2>
    d598:	f240 5254 	movw	r2, #1364	; 0x554
    d59c:	4293      	cmp	r3, r2
    d59e:	d806      	bhi.n	d5ae <_free_r+0x1ea>
    d5a0:	0c8b      	lsrs	r3, r1, #18
    d5a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d5a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d5aa:	00c3      	lsls	r3, r0, #3
    d5ac:	e783      	b.n	d4b6 <_free_r+0xf2>
    d5ae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d5b2:	227e      	movs	r2, #126	; 0x7e
    d5b4:	e77f      	b.n	d4b6 <_free_r+0xf2>
    d5b6:	f041 0301 	orr.w	r3, r1, #1
    d5ba:	606b      	str	r3, [r5, #4]
    d5bc:	f8cc 1000 	str.w	r1, [ip]
    d5c0:	e74a      	b.n	d458 <_free_r+0x94>
    d5c2:	bf00      	nop
    d5c4:	200044c8 	.word	0x200044c8
    d5c8:	200048d4 	.word	0x200048d4
    d5cc:	20005288 	.word	0x20005288

0000d5d0 <__ascii_mbtowc>:
    d5d0:	b082      	sub	sp, #8
    d5d2:	b149      	cbz	r1, d5e8 <__ascii_mbtowc+0x18>
    d5d4:	b15a      	cbz	r2, d5ee <__ascii_mbtowc+0x1e>
    d5d6:	b16b      	cbz	r3, d5f4 <__ascii_mbtowc+0x24>
    d5d8:	7813      	ldrb	r3, [r2, #0]
    d5da:	600b      	str	r3, [r1, #0]
    d5dc:	7812      	ldrb	r2, [r2, #0]
    d5de:	1e10      	subs	r0, r2, #0
    d5e0:	bf18      	it	ne
    d5e2:	2001      	movne	r0, #1
    d5e4:	b002      	add	sp, #8
    d5e6:	4770      	bx	lr
    d5e8:	a901      	add	r1, sp, #4
    d5ea:	2a00      	cmp	r2, #0
    d5ec:	d1f3      	bne.n	d5d6 <__ascii_mbtowc+0x6>
    d5ee:	4610      	mov	r0, r2
    d5f0:	b002      	add	sp, #8
    d5f2:	4770      	bx	lr
    d5f4:	f06f 0001 	mvn.w	r0, #1
    d5f8:	e7f4      	b.n	d5e4 <__ascii_mbtowc+0x14>
    d5fa:	bf00      	nop

0000d5fc <_Balloc>:
    d5fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d5fe:	b570      	push	{r4, r5, r6, lr}
    d600:	4605      	mov	r5, r0
    d602:	460c      	mov	r4, r1
    d604:	b14b      	cbz	r3, d61a <_Balloc+0x1e>
    d606:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    d60a:	b180      	cbz	r0, d62e <_Balloc+0x32>
    d60c:	6802      	ldr	r2, [r0, #0]
    d60e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    d612:	2300      	movs	r3, #0
    d614:	e9c0 3303 	strd	r3, r3, [r0, #12]
    d618:	bd70      	pop	{r4, r5, r6, pc}
    d61a:	2221      	movs	r2, #33	; 0x21
    d61c:	2104      	movs	r1, #4
    d61e:	f002 fb33 	bl	fc88 <_calloc_r>
    d622:	4603      	mov	r3, r0
    d624:	6468      	str	r0, [r5, #68]	; 0x44
    d626:	2800      	cmp	r0, #0
    d628:	d1ed      	bne.n	d606 <_Balloc+0xa>
    d62a:	2000      	movs	r0, #0
    d62c:	bd70      	pop	{r4, r5, r6, pc}
    d62e:	2101      	movs	r1, #1
    d630:	fa01 f604 	lsl.w	r6, r1, r4
    d634:	1d72      	adds	r2, r6, #5
    d636:	0092      	lsls	r2, r2, #2
    d638:	4628      	mov	r0, r5
    d63a:	f002 fb25 	bl	fc88 <_calloc_r>
    d63e:	2800      	cmp	r0, #0
    d640:	d0f3      	beq.n	d62a <_Balloc+0x2e>
    d642:	e9c0 4601 	strd	r4, r6, [r0, #4]
    d646:	e7e4      	b.n	d612 <_Balloc+0x16>

0000d648 <_Bfree>:
    d648:	b131      	cbz	r1, d658 <_Bfree+0x10>
    d64a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d64c:	684a      	ldr	r2, [r1, #4]
    d64e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d652:	6008      	str	r0, [r1, #0]
    d654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    d658:	4770      	bx	lr
    d65a:	bf00      	nop

0000d65c <__multadd>:
    d65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d660:	690e      	ldr	r6, [r1, #16]
    d662:	4680      	mov	r8, r0
    d664:	460f      	mov	r7, r1
    d666:	461d      	mov	r5, r3
    d668:	f101 0e14 	add.w	lr, r1, #20
    d66c:	2000      	movs	r0, #0
    d66e:	f8de 1000 	ldr.w	r1, [lr]
    d672:	b28c      	uxth	r4, r1
    d674:	fb02 5304 	mla	r3, r2, r4, r5
    d678:	0c09      	lsrs	r1, r1, #16
    d67a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d67e:	fb02 cc01 	mla	ip, r2, r1, ip
    d682:	3001      	adds	r0, #1
    d684:	b29c      	uxth	r4, r3
    d686:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    d68a:	4286      	cmp	r6, r0
    d68c:	f84e 4b04 	str.w	r4, [lr], #4
    d690:	ea4f 451c 	mov.w	r5, ip, lsr #16
    d694:	dceb      	bgt.n	d66e <__multadd+0x12>
    d696:	b13d      	cbz	r5, d6a8 <__multadd+0x4c>
    d698:	68bb      	ldr	r3, [r7, #8]
    d69a:	42b3      	cmp	r3, r6
    d69c:	dd07      	ble.n	d6ae <__multadd+0x52>
    d69e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    d6a2:	3601      	adds	r6, #1
    d6a4:	615d      	str	r5, [r3, #20]
    d6a6:	613e      	str	r6, [r7, #16]
    d6a8:	4638      	mov	r0, r7
    d6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6ae:	6879      	ldr	r1, [r7, #4]
    d6b0:	4640      	mov	r0, r8
    d6b2:	3101      	adds	r1, #1
    d6b4:	f7ff ffa2 	bl	d5fc <_Balloc>
    d6b8:	4604      	mov	r4, r0
    d6ba:	b1b0      	cbz	r0, d6ea <__multadd+0x8e>
    d6bc:	693a      	ldr	r2, [r7, #16]
    d6be:	3202      	adds	r2, #2
    d6c0:	f107 010c 	add.w	r1, r7, #12
    d6c4:	0092      	lsls	r2, r2, #2
    d6c6:	300c      	adds	r0, #12
    d6c8:	f7fc fc70 	bl	9fac <memcpy>
    d6cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d6d0:	687a      	ldr	r2, [r7, #4]
    d6d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d6d6:	6039      	str	r1, [r7, #0]
    d6d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    d6dc:	4627      	mov	r7, r4
    d6de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    d6e2:	3601      	adds	r6, #1
    d6e4:	615d      	str	r5, [r3, #20]
    d6e6:	613e      	str	r6, [r7, #16]
    d6e8:	e7de      	b.n	d6a8 <__multadd+0x4c>
    d6ea:	4b03      	ldr	r3, [pc, #12]	; (d6f8 <__multadd+0x9c>)
    d6ec:	4803      	ldr	r0, [pc, #12]	; (d6fc <__multadd+0xa0>)
    d6ee:	4622      	mov	r2, r4
    d6f0:	21ba      	movs	r1, #186	; 0xba
    d6f2:	f002 faa9 	bl	fc48 <__assert_func>
    d6f6:	bf00      	nop
    d6f8:	20000a8c 	.word	0x20000a8c
    d6fc:	20000aa0 	.word	0x20000aa0

0000d700 <__hi0bits>:
    d700:	0c03      	lsrs	r3, r0, #16
    d702:	041b      	lsls	r3, r3, #16
    d704:	b9d3      	cbnz	r3, d73c <__hi0bits+0x3c>
    d706:	0400      	lsls	r0, r0, #16
    d708:	2310      	movs	r3, #16
    d70a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    d70e:	bf04      	itt	eq
    d710:	0200      	lsleq	r0, r0, #8
    d712:	3308      	addeq	r3, #8
    d714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    d718:	bf04      	itt	eq
    d71a:	0100      	lsleq	r0, r0, #4
    d71c:	3304      	addeq	r3, #4
    d71e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    d722:	bf04      	itt	eq
    d724:	0080      	lsleq	r0, r0, #2
    d726:	3302      	addeq	r3, #2
    d728:	2800      	cmp	r0, #0
    d72a:	db05      	blt.n	d738 <__hi0bits+0x38>
    d72c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    d730:	f103 0301 	add.w	r3, r3, #1
    d734:	bf08      	it	eq
    d736:	2320      	moveq	r3, #32
    d738:	4618      	mov	r0, r3
    d73a:	4770      	bx	lr
    d73c:	2300      	movs	r3, #0
    d73e:	e7e4      	b.n	d70a <__hi0bits+0xa>

0000d740 <__lo0bits>:
    d740:	6803      	ldr	r3, [r0, #0]
    d742:	f013 0207 	ands.w	r2, r3, #7
    d746:	d008      	beq.n	d75a <__lo0bits+0x1a>
    d748:	07d9      	lsls	r1, r3, #31
    d74a:	d41f      	bmi.n	d78c <__lo0bits+0x4c>
    d74c:	079a      	lsls	r2, r3, #30
    d74e:	d522      	bpl.n	d796 <__lo0bits+0x56>
    d750:	085b      	lsrs	r3, r3, #1
    d752:	6003      	str	r3, [r0, #0]
    d754:	2201      	movs	r2, #1
    d756:	4610      	mov	r0, r2
    d758:	4770      	bx	lr
    d75a:	b299      	uxth	r1, r3
    d75c:	b909      	cbnz	r1, d762 <__lo0bits+0x22>
    d75e:	0c1b      	lsrs	r3, r3, #16
    d760:	2210      	movs	r2, #16
    d762:	b2d9      	uxtb	r1, r3
    d764:	b909      	cbnz	r1, d76a <__lo0bits+0x2a>
    d766:	3208      	adds	r2, #8
    d768:	0a1b      	lsrs	r3, r3, #8
    d76a:	0719      	lsls	r1, r3, #28
    d76c:	bf04      	itt	eq
    d76e:	091b      	lsreq	r3, r3, #4
    d770:	3204      	addeq	r2, #4
    d772:	0799      	lsls	r1, r3, #30
    d774:	bf04      	itt	eq
    d776:	089b      	lsreq	r3, r3, #2
    d778:	3202      	addeq	r2, #2
    d77a:	07d9      	lsls	r1, r3, #31
    d77c:	d403      	bmi.n	d786 <__lo0bits+0x46>
    d77e:	085b      	lsrs	r3, r3, #1
    d780:	f102 0201 	add.w	r2, r2, #1
    d784:	d005      	beq.n	d792 <__lo0bits+0x52>
    d786:	6003      	str	r3, [r0, #0]
    d788:	4610      	mov	r0, r2
    d78a:	4770      	bx	lr
    d78c:	2200      	movs	r2, #0
    d78e:	4610      	mov	r0, r2
    d790:	4770      	bx	lr
    d792:	2220      	movs	r2, #32
    d794:	e7df      	b.n	d756 <__lo0bits+0x16>
    d796:	089b      	lsrs	r3, r3, #2
    d798:	2202      	movs	r2, #2
    d79a:	6003      	str	r3, [r0, #0]
    d79c:	4610      	mov	r0, r2
    d79e:	4770      	bx	lr

0000d7a0 <__i2b>:
    d7a0:	b538      	push	{r3, r4, r5, lr}
    d7a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d7a4:	4604      	mov	r4, r0
    d7a6:	460d      	mov	r5, r1
    d7a8:	b14b      	cbz	r3, d7be <__i2b+0x1e>
    d7aa:	6858      	ldr	r0, [r3, #4]
    d7ac:	b1b0      	cbz	r0, d7dc <__i2b+0x3c>
    d7ae:	6802      	ldr	r2, [r0, #0]
    d7b0:	605a      	str	r2, [r3, #4]
    d7b2:	2200      	movs	r2, #0
    d7b4:	2301      	movs	r3, #1
    d7b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d7ba:	60c2      	str	r2, [r0, #12]
    d7bc:	bd38      	pop	{r3, r4, r5, pc}
    d7be:	2221      	movs	r2, #33	; 0x21
    d7c0:	2104      	movs	r1, #4
    d7c2:	f002 fa61 	bl	fc88 <_calloc_r>
    d7c6:	4603      	mov	r3, r0
    d7c8:	6460      	str	r0, [r4, #68]	; 0x44
    d7ca:	2800      	cmp	r0, #0
    d7cc:	d1ed      	bne.n	d7aa <__i2b+0xa>
    d7ce:	4b09      	ldr	r3, [pc, #36]	; (d7f4 <__i2b+0x54>)
    d7d0:	4809      	ldr	r0, [pc, #36]	; (d7f8 <__i2b+0x58>)
    d7d2:	2200      	movs	r2, #0
    d7d4:	f240 1145 	movw	r1, #325	; 0x145
    d7d8:	f002 fa36 	bl	fc48 <__assert_func>
    d7dc:	221c      	movs	r2, #28
    d7de:	2101      	movs	r1, #1
    d7e0:	4620      	mov	r0, r4
    d7e2:	f002 fa51 	bl	fc88 <_calloc_r>
    d7e6:	2800      	cmp	r0, #0
    d7e8:	d0f1      	beq.n	d7ce <__i2b+0x2e>
    d7ea:	2201      	movs	r2, #1
    d7ec:	2302      	movs	r3, #2
    d7ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d7f2:	e7de      	b.n	d7b2 <__i2b+0x12>
    d7f4:	20000a8c 	.word	0x20000a8c
    d7f8:	20000aa0 	.word	0x20000aa0

0000d7fc <__multiply>:
    d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d800:	690e      	ldr	r6, [r1, #16]
    d802:	6915      	ldr	r5, [r2, #16]
    d804:	42ae      	cmp	r6, r5
    d806:	b085      	sub	sp, #20
    d808:	4688      	mov	r8, r1
    d80a:	4614      	mov	r4, r2
    d80c:	db05      	blt.n	d81a <__multiply+0x1e>
    d80e:	462a      	mov	r2, r5
    d810:	4623      	mov	r3, r4
    d812:	4635      	mov	r5, r6
    d814:	460c      	mov	r4, r1
    d816:	4616      	mov	r6, r2
    d818:	4698      	mov	r8, r3
    d81a:	68a3      	ldr	r3, [r4, #8]
    d81c:	6861      	ldr	r1, [r4, #4]
    d81e:	19af      	adds	r7, r5, r6
    d820:	42bb      	cmp	r3, r7
    d822:	bfb8      	it	lt
    d824:	3101      	addlt	r1, #1
    d826:	f7ff fee9 	bl	d5fc <_Balloc>
    d82a:	9001      	str	r0, [sp, #4]
    d82c:	2800      	cmp	r0, #0
    d82e:	f000 8087 	beq.w	d940 <__multiply+0x144>
    d832:	9b01      	ldr	r3, [sp, #4]
    d834:	f103 0914 	add.w	r9, r3, #20
    d838:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d83c:	45d1      	cmp	r9, sl
    d83e:	d205      	bcs.n	d84c <__multiply+0x50>
    d840:	464b      	mov	r3, r9
    d842:	2200      	movs	r2, #0
    d844:	f843 2b04 	str.w	r2, [r3], #4
    d848:	459a      	cmp	sl, r3
    d84a:	d8fb      	bhi.n	d844 <__multiply+0x48>
    d84c:	f108 0814 	add.w	r8, r8, #20
    d850:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d854:	f104 0314 	add.w	r3, r4, #20
    d858:	45d8      	cmp	r8, fp
    d85a:	461a      	mov	r2, r3
    d85c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d860:	d25f      	bcs.n	d922 <__multiply+0x126>
    d862:	1b2b      	subs	r3, r5, r4
    d864:	3b15      	subs	r3, #21
    d866:	f023 0303 	bic.w	r3, r3, #3
    d86a:	3304      	adds	r3, #4
    d86c:	3415      	adds	r4, #21
    d86e:	42a5      	cmp	r5, r4
    d870:	bf38      	it	cc
    d872:	2304      	movcc	r3, #4
    d874:	e9cd a702 	strd	sl, r7, [sp, #8]
    d878:	46ac      	mov	ip, r5
    d87a:	461f      	mov	r7, r3
    d87c:	4692      	mov	sl, r2
    d87e:	e005      	b.n	d88c <__multiply+0x90>
    d880:	0c09      	lsrs	r1, r1, #16
    d882:	d129      	bne.n	d8d8 <__multiply+0xdc>
    d884:	45c3      	cmp	fp, r8
    d886:	f109 0904 	add.w	r9, r9, #4
    d88a:	d948      	bls.n	d91e <__multiply+0x122>
    d88c:	f858 1b04 	ldr.w	r1, [r8], #4
    d890:	b28d      	uxth	r5, r1
    d892:	2d00      	cmp	r5, #0
    d894:	d0f4      	beq.n	d880 <__multiply+0x84>
    d896:	4656      	mov	r6, sl
    d898:	464c      	mov	r4, r9
    d89a:	2300      	movs	r3, #0
    d89c:	f856 1b04 	ldr.w	r1, [r6], #4
    d8a0:	6822      	ldr	r2, [r4, #0]
    d8a2:	fa1f fe81 	uxth.w	lr, r1
    d8a6:	b290      	uxth	r0, r2
    d8a8:	0c09      	lsrs	r1, r1, #16
    d8aa:	fb05 000e 	mla	r0, r5, lr, r0
    d8ae:	0c12      	lsrs	r2, r2, #16
    d8b0:	4403      	add	r3, r0
    d8b2:	fb05 2201 	mla	r2, r5, r1, r2
    d8b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d8ba:	b29b      	uxth	r3, r3
    d8bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d8c0:	45b4      	cmp	ip, r6
    d8c2:	f844 3b04 	str.w	r3, [r4], #4
    d8c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d8ca:	d8e7      	bhi.n	d89c <__multiply+0xa0>
    d8cc:	f849 3007 	str.w	r3, [r9, r7]
    d8d0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d8d4:	0c09      	lsrs	r1, r1, #16
    d8d6:	d0d5      	beq.n	d884 <__multiply+0x88>
    d8d8:	f8d9 3000 	ldr.w	r3, [r9]
    d8dc:	4650      	mov	r0, sl
    d8de:	461a      	mov	r2, r3
    d8e0:	464c      	mov	r4, r9
    d8e2:	2600      	movs	r6, #0
    d8e4:	8805      	ldrh	r5, [r0, #0]
    d8e6:	0c12      	lsrs	r2, r2, #16
    d8e8:	fb01 2205 	mla	r2, r1, r5, r2
    d8ec:	4416      	add	r6, r2
    d8ee:	b29b      	uxth	r3, r3
    d8f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d8f4:	f844 3b04 	str.w	r3, [r4], #4
    d8f8:	f850 5b04 	ldr.w	r5, [r0], #4
    d8fc:	6822      	ldr	r2, [r4, #0]
    d8fe:	0c2d      	lsrs	r5, r5, #16
    d900:	b293      	uxth	r3, r2
    d902:	fb01 3305 	mla	r3, r1, r5, r3
    d906:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d90a:	4584      	cmp	ip, r0
    d90c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d910:	d8e8      	bhi.n	d8e4 <__multiply+0xe8>
    d912:	45c3      	cmp	fp, r8
    d914:	f849 3007 	str.w	r3, [r9, r7]
    d918:	f109 0904 	add.w	r9, r9, #4
    d91c:	d8b6      	bhi.n	d88c <__multiply+0x90>
    d91e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d922:	2f00      	cmp	r7, #0
    d924:	dc02      	bgt.n	d92c <__multiply+0x130>
    d926:	e005      	b.n	d934 <__multiply+0x138>
    d928:	3f01      	subs	r7, #1
    d92a:	d003      	beq.n	d934 <__multiply+0x138>
    d92c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d930:	2b00      	cmp	r3, #0
    d932:	d0f9      	beq.n	d928 <__multiply+0x12c>
    d934:	9b01      	ldr	r3, [sp, #4]
    d936:	4618      	mov	r0, r3
    d938:	611f      	str	r7, [r3, #16]
    d93a:	b005      	add	sp, #20
    d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d940:	4b03      	ldr	r3, [pc, #12]	; (d950 <__multiply+0x154>)
    d942:	4804      	ldr	r0, [pc, #16]	; (d954 <__multiply+0x158>)
    d944:	9a01      	ldr	r2, [sp, #4]
    d946:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d94a:	f002 f97d 	bl	fc48 <__assert_func>
    d94e:	bf00      	nop
    d950:	20000a8c 	.word	0x20000a8c
    d954:	20000aa0 	.word	0x20000aa0

0000d958 <__pow5mult>:
    d958:	f012 0303 	ands.w	r3, r2, #3
    d95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d960:	4614      	mov	r4, r2
    d962:	4606      	mov	r6, r0
    d964:	d132      	bne.n	d9cc <__pow5mult+0x74>
    d966:	460d      	mov	r5, r1
    d968:	10a4      	asrs	r4, r4, #2
    d96a:	d020      	beq.n	d9ae <__pow5mult+0x56>
    d96c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d970:	f1b8 0f00 	cmp.w	r8, #0
    d974:	d033      	beq.n	d9de <__pow5mult+0x86>
    d976:	07e3      	lsls	r3, r4, #31
    d978:	f04f 0700 	mov.w	r7, #0
    d97c:	d407      	bmi.n	d98e <__pow5mult+0x36>
    d97e:	1064      	asrs	r4, r4, #1
    d980:	d015      	beq.n	d9ae <__pow5mult+0x56>
    d982:	f8d8 0000 	ldr.w	r0, [r8]
    d986:	b1a8      	cbz	r0, d9b4 <__pow5mult+0x5c>
    d988:	4680      	mov	r8, r0
    d98a:	07e3      	lsls	r3, r4, #31
    d98c:	d5f7      	bpl.n	d97e <__pow5mult+0x26>
    d98e:	4642      	mov	r2, r8
    d990:	4629      	mov	r1, r5
    d992:	4630      	mov	r0, r6
    d994:	f7ff ff32 	bl	d7fc <__multiply>
    d998:	b1b5      	cbz	r5, d9c8 <__pow5mult+0x70>
    d99a:	6869      	ldr	r1, [r5, #4]
    d99c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d99e:	1064      	asrs	r4, r4, #1
    d9a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d9a4:	602a      	str	r2, [r5, #0]
    d9a6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d9aa:	4605      	mov	r5, r0
    d9ac:	d1e9      	bne.n	d982 <__pow5mult+0x2a>
    d9ae:	4628      	mov	r0, r5
    d9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9b4:	4642      	mov	r2, r8
    d9b6:	4641      	mov	r1, r8
    d9b8:	4630      	mov	r0, r6
    d9ba:	f7ff ff1f 	bl	d7fc <__multiply>
    d9be:	f8c8 0000 	str.w	r0, [r8]
    d9c2:	6007      	str	r7, [r0, #0]
    d9c4:	4680      	mov	r8, r0
    d9c6:	e7e0      	b.n	d98a <__pow5mult+0x32>
    d9c8:	4605      	mov	r5, r0
    d9ca:	e7d8      	b.n	d97e <__pow5mult+0x26>
    d9cc:	3b01      	subs	r3, #1
    d9ce:	4a0f      	ldr	r2, [pc, #60]	; (da0c <__pow5mult+0xb4>)
    d9d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d9d4:	2300      	movs	r3, #0
    d9d6:	f7ff fe41 	bl	d65c <__multadd>
    d9da:	4605      	mov	r5, r0
    d9dc:	e7c4      	b.n	d968 <__pow5mult+0x10>
    d9de:	2101      	movs	r1, #1
    d9e0:	4630      	mov	r0, r6
    d9e2:	f7ff fe0b 	bl	d5fc <_Balloc>
    d9e6:	4680      	mov	r8, r0
    d9e8:	b140      	cbz	r0, d9fc <__pow5mult+0xa4>
    d9ea:	2301      	movs	r3, #1
    d9ec:	f240 2271 	movw	r2, #625	; 0x271
    d9f0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d9f4:	2300      	movs	r3, #0
    d9f6:	6430      	str	r0, [r6, #64]	; 0x40
    d9f8:	6003      	str	r3, [r0, #0]
    d9fa:	e7bc      	b.n	d976 <__pow5mult+0x1e>
    d9fc:	4b04      	ldr	r3, [pc, #16]	; (da10 <__pow5mult+0xb8>)
    d9fe:	4805      	ldr	r0, [pc, #20]	; (da14 <__pow5mult+0xbc>)
    da00:	4642      	mov	r2, r8
    da02:	f240 1145 	movw	r1, #325	; 0x145
    da06:	f002 f91f 	bl	fc48 <__assert_func>
    da0a:	bf00      	nop
    da0c:	2000105c 	.word	0x2000105c
    da10:	20000a8c 	.word	0x20000a8c
    da14:	20000aa0 	.word	0x20000aa0

0000da18 <__lshift>:
    da18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    da1c:	460d      	mov	r5, r1
    da1e:	4614      	mov	r4, r2
    da20:	692f      	ldr	r7, [r5, #16]
    da22:	68ab      	ldr	r3, [r5, #8]
    da24:	6849      	ldr	r1, [r1, #4]
    da26:	eb07 1762 	add.w	r7, r7, r2, asr #5
    da2a:	1c7e      	adds	r6, r7, #1
    da2c:	429e      	cmp	r6, r3
    da2e:	4680      	mov	r8, r0
    da30:	ea4f 1962 	mov.w	r9, r2, asr #5
    da34:	dd04      	ble.n	da40 <__lshift+0x28>
    da36:	005b      	lsls	r3, r3, #1
    da38:	429e      	cmp	r6, r3
    da3a:	f101 0101 	add.w	r1, r1, #1
    da3e:	dcfa      	bgt.n	da36 <__lshift+0x1e>
    da40:	4640      	mov	r0, r8
    da42:	f7ff fddb 	bl	d5fc <_Balloc>
    da46:	4684      	mov	ip, r0
    da48:	2800      	cmp	r0, #0
    da4a:	d052      	beq.n	daf2 <__lshift+0xda>
    da4c:	f1b9 0f00 	cmp.w	r9, #0
    da50:	f100 0214 	add.w	r2, r0, #20
    da54:	dd0e      	ble.n	da74 <__lshift+0x5c>
    da56:	f109 0105 	add.w	r1, r9, #5
    da5a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    da5e:	4613      	mov	r3, r2
    da60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    da64:	2000      	movs	r0, #0
    da66:	f843 0b04 	str.w	r0, [r3], #4
    da6a:	428b      	cmp	r3, r1
    da6c:	d1fb      	bne.n	da66 <__lshift+0x4e>
    da6e:	f1ae 0314 	sub.w	r3, lr, #20
    da72:	441a      	add	r2, r3
    da74:	6929      	ldr	r1, [r5, #16]
    da76:	f105 0314 	add.w	r3, r5, #20
    da7a:	f014 0e1f 	ands.w	lr, r4, #31
    da7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    da82:	d02e      	beq.n	dae2 <__lshift+0xca>
    da84:	f1ce 0920 	rsb	r9, lr, #32
    da88:	4610      	mov	r0, r2
    da8a:	f04f 0a00 	mov.w	sl, #0
    da8e:	681c      	ldr	r4, [r3, #0]
    da90:	fa04 f40e 	lsl.w	r4, r4, lr
    da94:	ea44 040a 	orr.w	r4, r4, sl
    da98:	f840 4b04 	str.w	r4, [r0], #4
    da9c:	f853 4b04 	ldr.w	r4, [r3], #4
    daa0:	4299      	cmp	r1, r3
    daa2:	fa24 fa09 	lsr.w	sl, r4, r9
    daa6:	d8f2      	bhi.n	da8e <__lshift+0x76>
    daa8:	1b4b      	subs	r3, r1, r5
    daaa:	3b15      	subs	r3, #21
    daac:	f023 0303 	bic.w	r3, r3, #3
    dab0:	3304      	adds	r3, #4
    dab2:	f105 0015 	add.w	r0, r5, #21
    dab6:	4281      	cmp	r1, r0
    dab8:	bf38      	it	cc
    daba:	2304      	movcc	r3, #4
    dabc:	f1ba 0f00 	cmp.w	sl, #0
    dac0:	bf18      	it	ne
    dac2:	4637      	movne	r7, r6
    dac4:	f842 a003 	str.w	sl, [r2, r3]
    dac8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    dacc:	686a      	ldr	r2, [r5, #4]
    dace:	f8cc 7010 	str.w	r7, [ip, #16]
    dad2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dad6:	6029      	str	r1, [r5, #0]
    dad8:	4660      	mov	r0, ip
    dada:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    dade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dae2:	3a04      	subs	r2, #4
    dae4:	f853 0b04 	ldr.w	r0, [r3], #4
    dae8:	f842 0f04 	str.w	r0, [r2, #4]!
    daec:	4299      	cmp	r1, r3
    daee:	d8f9      	bhi.n	dae4 <__lshift+0xcc>
    daf0:	e7ea      	b.n	dac8 <__lshift+0xb0>
    daf2:	4b03      	ldr	r3, [pc, #12]	; (db00 <__lshift+0xe8>)
    daf4:	4803      	ldr	r0, [pc, #12]	; (db04 <__lshift+0xec>)
    daf6:	4662      	mov	r2, ip
    daf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    dafc:	f002 f8a4 	bl	fc48 <__assert_func>
    db00:	20000a8c 	.word	0x20000a8c
    db04:	20000aa0 	.word	0x20000aa0

0000db08 <__mcmp>:
    db08:	690b      	ldr	r3, [r1, #16]
    db0a:	4684      	mov	ip, r0
    db0c:	6900      	ldr	r0, [r0, #16]
    db0e:	1ac0      	subs	r0, r0, r3
    db10:	d116      	bne.n	db40 <__mcmp+0x38>
    db12:	f10c 0c14 	add.w	ip, ip, #20
    db16:	3114      	adds	r1, #20
    db18:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    db1c:	b410      	push	{r4}
    db1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    db22:	e001      	b.n	db28 <__mcmp+0x20>
    db24:	4594      	cmp	ip, r2
    db26:	d208      	bcs.n	db3a <__mcmp+0x32>
    db28:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    db2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    db30:	428c      	cmp	r4, r1
    db32:	d0f7      	beq.n	db24 <__mcmp+0x1c>
    db34:	d205      	bcs.n	db42 <__mcmp+0x3a>
    db36:	f04f 30ff 	mov.w	r0, #4294967295
    db3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    db3e:	4770      	bx	lr
    db40:	4770      	bx	lr
    db42:	2001      	movs	r0, #1
    db44:	f85d 4b04 	ldr.w	r4, [sp], #4
    db48:	4770      	bx	lr
    db4a:	bf00      	nop

0000db4c <__mdiff>:
    db4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db50:	690f      	ldr	r7, [r1, #16]
    db52:	6913      	ldr	r3, [r2, #16]
    db54:	1aff      	subs	r7, r7, r3
    db56:	2f00      	cmp	r7, #0
    db58:	460e      	mov	r6, r1
    db5a:	4690      	mov	r8, r2
    db5c:	d17f      	bne.n	dc5e <__mdiff+0x112>
    db5e:	f101 0514 	add.w	r5, r1, #20
    db62:	3214      	adds	r2, #20
    db64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    db68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    db6c:	e001      	b.n	db72 <__mdiff+0x26>
    db6e:	429d      	cmp	r5, r3
    db70:	d278      	bcs.n	dc64 <__mdiff+0x118>
    db72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    db76:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    db7a:	42a1      	cmp	r1, r4
    db7c:	d0f7      	beq.n	db6e <__mdiff+0x22>
    db7e:	d369      	bcc.n	dc54 <__mdiff+0x108>
    db80:	6871      	ldr	r1, [r6, #4]
    db82:	f7ff fd3b 	bl	d5fc <_Balloc>
    db86:	4681      	mov	r9, r0
    db88:	2800      	cmp	r0, #0
    db8a:	d077      	beq.n	dc7c <__mdiff+0x130>
    db8c:	6935      	ldr	r5, [r6, #16]
    db8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    db92:	60c7      	str	r7, [r0, #12]
    db94:	f108 0e14 	add.w	lr, r8, #20
    db98:	f106 0014 	add.w	r0, r6, #20
    db9c:	f109 0a14 	add.w	sl, r9, #20
    dba0:	f106 0110 	add.w	r1, r6, #16
    dba4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    dba8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    dbac:	4656      	mov	r6, sl
    dbae:	f04f 0c00 	mov.w	ip, #0
    dbb2:	f85e 4b04 	ldr.w	r4, [lr], #4
    dbb6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    dbba:	b2a3      	uxth	r3, r4
    dbbc:	fa1c fc8b 	uxtah	ip, ip, fp
    dbc0:	ebac 0303 	sub.w	r3, ip, r3
    dbc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    dbc8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    dbcc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    dbd0:	b29b      	uxth	r3, r3
    dbd2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    dbd6:	4572      	cmp	r2, lr
    dbd8:	f846 3b04 	str.w	r3, [r6], #4
    dbdc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    dbe0:	d8e7      	bhi.n	dbb2 <__mdiff+0x66>
    dbe2:	eba2 0108 	sub.w	r1, r2, r8
    dbe6:	3915      	subs	r1, #21
    dbe8:	f108 0815 	add.w	r8, r8, #21
    dbec:	4542      	cmp	r2, r8
    dbee:	f021 0403 	bic.w	r4, r1, #3
    dbf2:	f104 0404 	add.w	r4, r4, #4
    dbf6:	bf38      	it	cc
    dbf8:	2404      	movcc	r4, #4
    dbfa:	4420      	add	r0, r4
    dbfc:	f021 0203 	bic.w	r2, r1, #3
    dc00:	bf38      	it	cc
    dc02:	2200      	movcc	r2, #0
    dc04:	4287      	cmp	r7, r0
    dc06:	4452      	add	r2, sl
    dc08:	4454      	add	r4, sl
    dc0a:	d918      	bls.n	dc3e <__mdiff+0xf2>
    dc0c:	4626      	mov	r6, r4
    dc0e:	4601      	mov	r1, r0
    dc10:	f851 3b04 	ldr.w	r3, [r1], #4
    dc14:	fa1c fc83 	uxtah	ip, ip, r3
    dc18:	ea4f 422c 	mov.w	r2, ip, asr #16
    dc1c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    dc20:	fa1f fc8c 	uxth.w	ip, ip
    dc24:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    dc28:	428f      	cmp	r7, r1
    dc2a:	f846 3b04 	str.w	r3, [r6], #4
    dc2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    dc32:	d8ed      	bhi.n	dc10 <__mdiff+0xc4>
    dc34:	3f01      	subs	r7, #1
    dc36:	1a3f      	subs	r7, r7, r0
    dc38:	f027 0703 	bic.w	r7, r7, #3
    dc3c:	19e2      	adds	r2, r4, r7
    dc3e:	b923      	cbnz	r3, dc4a <__mdiff+0xfe>
    dc40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    dc44:	3d01      	subs	r5, #1
    dc46:	2b00      	cmp	r3, #0
    dc48:	d0fa      	beq.n	dc40 <__mdiff+0xf4>
    dc4a:	f8c9 5010 	str.w	r5, [r9, #16]
    dc4e:	4648      	mov	r0, r9
    dc50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc54:	4633      	mov	r3, r6
    dc56:	2701      	movs	r7, #1
    dc58:	4646      	mov	r6, r8
    dc5a:	4698      	mov	r8, r3
    dc5c:	e790      	b.n	db80 <__mdiff+0x34>
    dc5e:	dbf9      	blt.n	dc54 <__mdiff+0x108>
    dc60:	2700      	movs	r7, #0
    dc62:	e78d      	b.n	db80 <__mdiff+0x34>
    dc64:	2100      	movs	r1, #0
    dc66:	f7ff fcc9 	bl	d5fc <_Balloc>
    dc6a:	4681      	mov	r9, r0
    dc6c:	b168      	cbz	r0, dc8a <__mdiff+0x13e>
    dc6e:	2201      	movs	r2, #1
    dc70:	2300      	movs	r3, #0
    dc72:	e9c9 2304 	strd	r2, r3, [r9, #16]
    dc76:	4648      	mov	r0, r9
    dc78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc7c:	4b06      	ldr	r3, [pc, #24]	; (dc98 <__mdiff+0x14c>)
    dc7e:	4807      	ldr	r0, [pc, #28]	; (dc9c <__mdiff+0x150>)
    dc80:	464a      	mov	r2, r9
    dc82:	f240 2145 	movw	r1, #581	; 0x245
    dc86:	f001 ffdf 	bl	fc48 <__assert_func>
    dc8a:	4b03      	ldr	r3, [pc, #12]	; (dc98 <__mdiff+0x14c>)
    dc8c:	4803      	ldr	r0, [pc, #12]	; (dc9c <__mdiff+0x150>)
    dc8e:	464a      	mov	r2, r9
    dc90:	f240 2137 	movw	r1, #567	; 0x237
    dc94:	f001 ffd8 	bl	fc48 <__assert_func>
    dc98:	20000a8c 	.word	0x20000a8c
    dc9c:	20000aa0 	.word	0x20000aa0

0000dca0 <__d2b>:
    dca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dca4:	4688      	mov	r8, r1
    dca6:	b083      	sub	sp, #12
    dca8:	2101      	movs	r1, #1
    dcaa:	ec57 6b10 	vmov	r6, r7, d0
    dcae:	4615      	mov	r5, r2
    dcb0:	f7ff fca4 	bl	d5fc <_Balloc>
    dcb4:	4604      	mov	r4, r0
    dcb6:	2800      	cmp	r0, #0
    dcb8:	d051      	beq.n	dd5e <__d2b+0xbe>
    dcba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    dcbe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    dcc2:	f1b9 0f00 	cmp.w	r9, #0
    dcc6:	d001      	beq.n	dccc <__d2b+0x2c>
    dcc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dccc:	2e00      	cmp	r6, #0
    dcce:	9301      	str	r3, [sp, #4]
    dcd0:	d118      	bne.n	dd04 <__d2b+0x64>
    dcd2:	a801      	add	r0, sp, #4
    dcd4:	f7ff fd34 	bl	d740 <__lo0bits>
    dcd8:	9a01      	ldr	r2, [sp, #4]
    dcda:	6162      	str	r2, [r4, #20]
    dcdc:	2201      	movs	r2, #1
    dcde:	f100 0320 	add.w	r3, r0, #32
    dce2:	6122      	str	r2, [r4, #16]
    dce4:	f1b9 0f00 	cmp.w	r9, #0
    dce8:	d025      	beq.n	dd36 <__d2b+0x96>
    dcea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    dcee:	eb09 0203 	add.w	r2, r9, r3
    dcf2:	4620      	mov	r0, r4
    dcf4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    dcf8:	f8c8 2000 	str.w	r2, [r8]
    dcfc:	602b      	str	r3, [r5, #0]
    dcfe:	b003      	add	sp, #12
    dd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dd04:	4668      	mov	r0, sp
    dd06:	9600      	str	r6, [sp, #0]
    dd08:	f7ff fd1a 	bl	d740 <__lo0bits>
    dd0c:	4603      	mov	r3, r0
    dd0e:	b310      	cbz	r0, dd56 <__d2b+0xb6>
    dd10:	e9dd 0200 	ldrd	r0, r2, [sp]
    dd14:	f1c3 0120 	rsb	r1, r3, #32
    dd18:	fa02 f101 	lsl.w	r1, r2, r1
    dd1c:	4301      	orrs	r1, r0
    dd1e:	40da      	lsrs	r2, r3
    dd20:	6161      	str	r1, [r4, #20]
    dd22:	9201      	str	r2, [sp, #4]
    dd24:	2a00      	cmp	r2, #0
    dd26:	61a2      	str	r2, [r4, #24]
    dd28:	bf14      	ite	ne
    dd2a:	2202      	movne	r2, #2
    dd2c:	2201      	moveq	r2, #1
    dd2e:	6122      	str	r2, [r4, #16]
    dd30:	f1b9 0f00 	cmp.w	r9, #0
    dd34:	d1d9      	bne.n	dcea <__d2b+0x4a>
    dd36:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    dd3a:	f8c8 3000 	str.w	r3, [r8]
    dd3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    dd42:	6918      	ldr	r0, [r3, #16]
    dd44:	f7ff fcdc 	bl	d700 <__hi0bits>
    dd48:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    dd4c:	4620      	mov	r0, r4
    dd4e:	602b      	str	r3, [r5, #0]
    dd50:	b003      	add	sp, #12
    dd52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dd56:	9a00      	ldr	r2, [sp, #0]
    dd58:	6162      	str	r2, [r4, #20]
    dd5a:	9a01      	ldr	r2, [sp, #4]
    dd5c:	e7e2      	b.n	dd24 <__d2b+0x84>
    dd5e:	4b03      	ldr	r3, [pc, #12]	; (dd6c <__d2b+0xcc>)
    dd60:	4803      	ldr	r0, [pc, #12]	; (dd70 <__d2b+0xd0>)
    dd62:	4622      	mov	r2, r4
    dd64:	f240 310f 	movw	r1, #783	; 0x30f
    dd68:	f001 ff6e 	bl	fc48 <__assert_func>
    dd6c:	20000a8c 	.word	0x20000a8c
    dd70:	20000aa0 	.word	0x20000aa0

0000dd74 <__ascii_wctomb>:
    dd74:	b149      	cbz	r1, dd8a <__ascii_wctomb+0x16>
    dd76:	2aff      	cmp	r2, #255	; 0xff
    dd78:	d802      	bhi.n	dd80 <__ascii_wctomb+0xc>
    dd7a:	700a      	strb	r2, [r1, #0]
    dd7c:	2001      	movs	r0, #1
    dd7e:	4770      	bx	lr
    dd80:	238a      	movs	r3, #138	; 0x8a
    dd82:	6003      	str	r3, [r0, #0]
    dd84:	f04f 30ff 	mov.w	r0, #4294967295
    dd88:	4770      	bx	lr
    dd8a:	4608      	mov	r0, r1
    dd8c:	4770      	bx	lr
    dd8e:	bf00      	nop

0000dd90 <_svfprintf_r>:
    dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd94:	ed2d 8b08 	vpush	{d8-d11}
    dd98:	b0d1      	sub	sp, #324	; 0x144
    dd9a:	460c      	mov	r4, r1
    dd9c:	ee0b 1a10 	vmov	s22, r1
    dda0:	4690      	mov	r8, r2
    dda2:	9308      	str	r3, [sp, #32]
    dda4:	4683      	mov	fp, r0
    dda6:	f001 febb 	bl	fb20 <_localeconv_r>
    ddaa:	6803      	ldr	r3, [r0, #0]
    ddac:	9312      	str	r3, [sp, #72]	; 0x48
    ddae:	4618      	mov	r0, r3
    ddb0:	f7ff fa06 	bl	d1c0 <strlen>
    ddb4:	af20      	add	r7, sp, #128	; 0x80
    ddb6:	9010      	str	r0, [sp, #64]	; 0x40
    ddb8:	2208      	movs	r2, #8
    ddba:	2100      	movs	r1, #0
    ddbc:	4638      	mov	r0, r7
    ddbe:	f7fe fe9d 	bl	cafc <memset>
    ddc2:	89a3      	ldrh	r3, [r4, #12]
    ddc4:	061b      	lsls	r3, r3, #24
    ddc6:	d503      	bpl.n	ddd0 <_svfprintf_r+0x40>
    ddc8:	6923      	ldr	r3, [r4, #16]
    ddca:	2b00      	cmp	r3, #0
    ddcc:	f000 8755 	beq.w	ec7a <_svfprintf_r+0xeea>
    ddd0:	2300      	movs	r3, #0
    ddd2:	ed9f 8b83 	vldr	d8, [pc, #524]	; dfe0 <_svfprintf_r+0x250>
    ddd6:	ed9f 9b84 	vldr	d9, [pc, #528]	; dfe8 <_svfprintf_r+0x258>
    ddda:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    ddde:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    dde2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    dde6:	aa27      	add	r2, sp, #156	; 0x9c
    dde8:	930e      	str	r3, [sp, #56]	; 0x38
    ddea:	9224      	str	r2, [sp, #144]	; 0x90
    ddec:	4692      	mov	sl, r2
    ddee:	9311      	str	r3, [sp, #68]	; 0x44
    ddf0:	9304      	str	r3, [sp, #16]
    ddf2:	4644      	mov	r4, r8
    ddf4:	46a1      	mov	r9, r4
    ddf6:	4b7e      	ldr	r3, [pc, #504]	; (dff0 <_svfprintf_r+0x260>)
    ddf8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ddfc:	f7fe ff68 	bl	ccd0 <__locale_mb_cur_max>
    de00:	464a      	mov	r2, r9
    de02:	4603      	mov	r3, r0
    de04:	a91c      	add	r1, sp, #112	; 0x70
    de06:	9700      	str	r7, [sp, #0]
    de08:	4658      	mov	r0, fp
    de0a:	47a8      	blx	r5
    de0c:	2800      	cmp	r0, #0
    de0e:	f000 80b0 	beq.w	df72 <_svfprintf_r+0x1e2>
    de12:	f2c0 80a6 	blt.w	df62 <_svfprintf_r+0x1d2>
    de16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    de18:	2a25      	cmp	r2, #37	; 0x25
    de1a:	4603      	mov	r3, r0
    de1c:	d001      	beq.n	de22 <_svfprintf_r+0x92>
    de1e:	4499      	add	r9, r3
    de20:	e7e9      	b.n	ddf6 <_svfprintf_r+0x66>
    de22:	ebb9 0504 	subs.w	r5, r9, r4
    de26:	4606      	mov	r6, r0
    de28:	f040 80a7 	bne.w	df7a <_svfprintf_r+0x1ea>
    de2c:	2300      	movs	r3, #0
    de2e:	f04f 32ff 	mov.w	r2, #4294967295
    de32:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    de36:	4698      	mov	r8, r3
    de38:	9306      	str	r3, [sp, #24]
    de3a:	f109 0901 	add.w	r9, r9, #1
    de3e:	f899 3000 	ldrb.w	r3, [r9]
    de42:	9203      	str	r2, [sp, #12]
    de44:	252b      	movs	r5, #43	; 0x2b
    de46:	2620      	movs	r6, #32
    de48:	f109 0901 	add.w	r9, r9, #1
    de4c:	f1a3 0220 	sub.w	r2, r3, #32
    de50:	2a5a      	cmp	r2, #90	; 0x5a
    de52:	f200 80cf 	bhi.w	dff4 <_svfprintf_r+0x264>
    de56:	e8df f012 	tbh	[pc, r2, lsl #1]
    de5a:	02e8      	.short	0x02e8
    de5c:	00cd00cd 	.word	0x00cd00cd
    de60:	00cd02e3 	.word	0x00cd02e3
    de64:	00cd00cd 	.word	0x00cd00cd
    de68:	00cd006a 	.word	0x00cd006a
    de6c:	020500cd 	.word	0x020500cd
    de70:	00cd0284 	.word	0x00cd0284
    de74:	02c90210 	.word	0x02c90210
    de78:	02bd00cd 	.word	0x02bd00cd
    de7c:	005b005b 	.word	0x005b005b
    de80:	005b005b 	.word	0x005b005b
    de84:	005b005b 	.word	0x005b005b
    de88:	005b005b 	.word	0x005b005b
    de8c:	00cd005b 	.word	0x00cd005b
    de90:	00cd00cd 	.word	0x00cd00cd
    de94:	00cd00cd 	.word	0x00cd00cd
    de98:	00cd00cd 	.word	0x00cd00cd
    de9c:	00cd0153 	.word	0x00cd0153
    dea0:	021a0183 	.word	0x021a0183
    dea4:	01530153 	.word	0x01530153
    dea8:	00cd0153 	.word	0x00cd0153
    deac:	00cd00cd 	.word	0x00cd00cd
    deb0:	021500cd 	.word	0x021500cd
    deb4:	00cd00cd 	.word	0x00cd00cd
    deb8:	00cd0296 	.word	0x00cd0296
    debc:	00cd00cd 	.word	0x00cd00cd
    dec0:	00cd01ab 	.word	0x00cd01ab
    dec4:	00cd02aa 	.word	0x00cd02aa
    dec8:	06e300cd 	.word	0x06e300cd
    decc:	00cd00cd 	.word	0x00cd00cd
    ded0:	00cd00cd 	.word	0x00cd00cd
    ded4:	00cd00cd 	.word	0x00cd00cd
    ded8:	00cd00cd 	.word	0x00cd00cd
    dedc:	00cd0153 	.word	0x00cd0153
    dee0:	01de0183 	.word	0x01de0183
    dee4:	01530153 	.word	0x01530153
    dee8:	02770153 	.word	0x02770153
    deec:	007f01de 	.word	0x007f01de
    def0:	028900cd 	.word	0x028900cd
    def4:	025f00cd 	.word	0x025f00cd
    def8:	022f06e0 	.word	0x022f06e0
    defc:	00cd007f 	.word	0x00cd007f
    df00:	007c01ab 	.word	0x007c01ab
    df04:	00cd06b8 	.word	0x00cd06b8
    df08:	06bd00cd 	.word	0x06bd00cd
    df0c:	007c00cd 	.word	0x007c00cd
    df10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    df14:	2100      	movs	r1, #0
    df16:	f819 3b01 	ldrb.w	r3, [r9], #1
    df1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    df1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    df22:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    df26:	2a09      	cmp	r2, #9
    df28:	d9f5      	bls.n	df16 <_svfprintf_r+0x186>
    df2a:	9106      	str	r1, [sp, #24]
    df2c:	e78e      	b.n	de4c <_svfprintf_r+0xbc>
    df2e:	4658      	mov	r0, fp
    df30:	f001 fdf6 	bl	fb20 <_localeconv_r>
    df34:	6843      	ldr	r3, [r0, #4]
    df36:	9315      	str	r3, [sp, #84]	; 0x54
    df38:	4618      	mov	r0, r3
    df3a:	f7ff f941 	bl	d1c0 <strlen>
    df3e:	9016      	str	r0, [sp, #88]	; 0x58
    df40:	4658      	mov	r0, fp
    df42:	f001 fded 	bl	fb20 <_localeconv_r>
    df46:	6883      	ldr	r3, [r0, #8]
    df48:	9313      	str	r3, [sp, #76]	; 0x4c
    df4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    df4c:	2b00      	cmp	r3, #0
    df4e:	f040 862d 	bne.w	ebac <_svfprintf_r+0xe1c>
    df52:	f899 3000 	ldrb.w	r3, [r9]
    df56:	e777      	b.n	de48 <_svfprintf_r+0xb8>
    df58:	f899 3000 	ldrb.w	r3, [r9]
    df5c:	f048 0820 	orr.w	r8, r8, #32
    df60:	e772      	b.n	de48 <_svfprintf_r+0xb8>
    df62:	2208      	movs	r2, #8
    df64:	2100      	movs	r1, #0
    df66:	4638      	mov	r0, r7
    df68:	f7fe fdc8 	bl	cafc <memset>
    df6c:	2301      	movs	r3, #1
    df6e:	4499      	add	r9, r3
    df70:	e741      	b.n	ddf6 <_svfprintf_r+0x66>
    df72:	ebb9 0504 	subs.w	r5, r9, r4
    df76:	4606      	mov	r6, r0
    df78:	d011      	beq.n	df9e <_svfprintf_r+0x20e>
    df7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    df7c:	442b      	add	r3, r5
    df7e:	9326      	str	r3, [sp, #152]	; 0x98
    df80:	9b25      	ldr	r3, [sp, #148]	; 0x94
    df82:	3301      	adds	r3, #1
    df84:	2b07      	cmp	r3, #7
    df86:	e9ca 4500 	strd	r4, r5, [sl]
    df8a:	9325      	str	r3, [sp, #148]	; 0x94
    df8c:	dc1c      	bgt.n	dfc8 <_svfprintf_r+0x238>
    df8e:	f10a 0a08 	add.w	sl, sl, #8
    df92:	9b04      	ldr	r3, [sp, #16]
    df94:	442b      	add	r3, r5
    df96:	9304      	str	r3, [sp, #16]
    df98:	2e00      	cmp	r6, #0
    df9a:	f47f af47 	bne.w	de2c <_svfprintf_r+0x9c>
    df9e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	f041 820b 	bne.w	f3bc <_svfprintf_r+0x162c>
    dfa6:	ee1b 3a10 	vmov	r3, s22
    dfaa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    dfae:	f013 0f40 	tst.w	r3, #64	; 0x40
    dfb2:	9b04      	ldr	r3, [sp, #16]
    dfb4:	bf18      	it	ne
    dfb6:	f04f 33ff 	movne.w	r3, #4294967295
    dfba:	9304      	str	r3, [sp, #16]
    dfbc:	9804      	ldr	r0, [sp, #16]
    dfbe:	b051      	add	sp, #324	; 0x144
    dfc0:	ecbd 8b08 	vpop	{d8-d11}
    dfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfc8:	ee1b 1a10 	vmov	r1, s22
    dfcc:	aa24      	add	r2, sp, #144	; 0x90
    dfce:	4658      	mov	r0, fp
    dfd0:	f002 fde6 	bl	10ba0 <__ssprint_r>
    dfd4:	2800      	cmp	r0, #0
    dfd6:	d1e6      	bne.n	dfa6 <_svfprintf_r+0x216>
    dfd8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfdc:	e7d9      	b.n	df92 <_svfprintf_r+0x202>
    dfde:	bf00      	nop
	...
    dfe8:	ffffffff 	.word	0xffffffff
    dfec:	7fefffff 	.word	0x7fefffff
    dff0:	2000435c 	.word	0x2000435c
    dff4:	930b      	str	r3, [sp, #44]	; 0x2c
    dff6:	2b00      	cmp	r3, #0
    dff8:	d0d1      	beq.n	df9e <_svfprintf_r+0x20e>
    dffa:	2100      	movs	r1, #0
    dffc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e000:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    e004:	2301      	movs	r3, #1
    e006:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e00a:	9302      	str	r3, [sp, #8]
    e00c:	9107      	str	r1, [sp, #28]
    e00e:	9305      	str	r3, [sp, #20]
    e010:	9103      	str	r1, [sp, #12]
    e012:	910f      	str	r1, [sp, #60]	; 0x3c
    e014:	ac37      	add	r4, sp, #220	; 0xdc
    e016:	f018 0302 	ands.w	r3, r8, #2
    e01a:	9309      	str	r3, [sp, #36]	; 0x24
    e01c:	d002      	beq.n	e024 <_svfprintf_r+0x294>
    e01e:	9b02      	ldr	r3, [sp, #8]
    e020:	3302      	adds	r3, #2
    e022:	9302      	str	r3, [sp, #8]
    e024:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    e028:	930a      	str	r3, [sp, #40]	; 0x28
    e02a:	d105      	bne.n	e038 <_svfprintf_r+0x2a8>
    e02c:	9b06      	ldr	r3, [sp, #24]
    e02e:	9a02      	ldr	r2, [sp, #8]
    e030:	1a9d      	subs	r5, r3, r2
    e032:	2d00      	cmp	r5, #0
    e034:	f300 8369 	bgt.w	e70a <_svfprintf_r+0x97a>
    e038:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e03a:	b189      	cbz	r1, e060 <_svfprintf_r+0x2d0>
    e03c:	9925      	ldr	r1, [sp, #148]	; 0x94
    e03e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    e042:	3101      	adds	r1, #1
    e044:	3201      	adds	r2, #1
    e046:	f8ca 0000 	str.w	r0, [sl]
    e04a:	2907      	cmp	r1, #7
    e04c:	f04f 0001 	mov.w	r0, #1
    e050:	9226      	str	r2, [sp, #152]	; 0x98
    e052:	9125      	str	r1, [sp, #148]	; 0x94
    e054:	f8ca 0004 	str.w	r0, [sl, #4]
    e058:	f300 83a2 	bgt.w	e7a0 <_svfprintf_r+0xa10>
    e05c:	f10a 0a08 	add.w	sl, sl, #8
    e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e062:	b183      	cbz	r3, e086 <_svfprintf_r+0x2f6>
    e064:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e066:	a91a      	add	r1, sp, #104	; 0x68
    e068:	3301      	adds	r3, #1
    e06a:	3202      	adds	r2, #2
    e06c:	f8ca 1000 	str.w	r1, [sl]
    e070:	2b07      	cmp	r3, #7
    e072:	f04f 0102 	mov.w	r1, #2
    e076:	9226      	str	r2, [sp, #152]	; 0x98
    e078:	9325      	str	r3, [sp, #148]	; 0x94
    e07a:	f8ca 1004 	str.w	r1, [sl, #4]
    e07e:	f300 83a3 	bgt.w	e7c8 <_svfprintf_r+0xa38>
    e082:	f10a 0a08 	add.w	sl, sl, #8
    e086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e088:	2b80      	cmp	r3, #128	; 0x80
    e08a:	f000 826c 	beq.w	e566 <_svfprintf_r+0x7d6>
    e08e:	9b03      	ldr	r3, [sp, #12]
    e090:	9905      	ldr	r1, [sp, #20]
    e092:	1a5d      	subs	r5, r3, r1
    e094:	2d00      	cmp	r5, #0
    e096:	f300 82a5 	bgt.w	e5e4 <_svfprintf_r+0x854>
    e09a:	f418 7f80 	tst.w	r8, #256	; 0x100
    e09e:	f040 820d 	bne.w	e4bc <_svfprintf_r+0x72c>
    e0a2:	9b05      	ldr	r3, [sp, #20]
    e0a4:	f8ca 3004 	str.w	r3, [sl, #4]
    e0a8:	441a      	add	r2, r3
    e0aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e0ac:	f8ca 4000 	str.w	r4, [sl]
    e0b0:	3301      	adds	r3, #1
    e0b2:	2b07      	cmp	r3, #7
    e0b4:	9226      	str	r2, [sp, #152]	; 0x98
    e0b6:	9325      	str	r3, [sp, #148]	; 0x94
    e0b8:	f300 831b 	bgt.w	e6f2 <_svfprintf_r+0x962>
    e0bc:	f10a 0a08 	add.w	sl, sl, #8
    e0c0:	f018 0f04 	tst.w	r8, #4
    e0c4:	d005      	beq.n	e0d2 <_svfprintf_r+0x342>
    e0c6:	9b06      	ldr	r3, [sp, #24]
    e0c8:	9902      	ldr	r1, [sp, #8]
    e0ca:	1a5c      	subs	r4, r3, r1
    e0cc:	2c00      	cmp	r4, #0
    e0ce:	f300 8388 	bgt.w	e7e2 <_svfprintf_r+0xa52>
    e0d2:	9b04      	ldr	r3, [sp, #16]
    e0d4:	9906      	ldr	r1, [sp, #24]
    e0d6:	9802      	ldr	r0, [sp, #8]
    e0d8:	4281      	cmp	r1, r0
    e0da:	bfac      	ite	ge
    e0dc:	185b      	addge	r3, r3, r1
    e0de:	181b      	addlt	r3, r3, r0
    e0e0:	9304      	str	r3, [sp, #16]
    e0e2:	2a00      	cmp	r2, #0
    e0e4:	f040 82b0 	bne.w	e648 <_svfprintf_r+0x8b8>
    e0e8:	2300      	movs	r3, #0
    e0ea:	9325      	str	r3, [sp, #148]	; 0x94
    e0ec:	9b07      	ldr	r3, [sp, #28]
    e0ee:	b11b      	cbz	r3, e0f8 <_svfprintf_r+0x368>
    e0f0:	9907      	ldr	r1, [sp, #28]
    e0f2:	4658      	mov	r0, fp
    e0f4:	f7ff f966 	bl	d3c4 <_free_r>
    e0f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0fc:	464c      	mov	r4, r9
    e0fe:	e679      	b.n	ddf4 <_svfprintf_r+0x64>
    e100:	930b      	str	r3, [sp, #44]	; 0x2c
    e102:	9b08      	ldr	r3, [sp, #32]
    e104:	3307      	adds	r3, #7
    e106:	f023 0307 	bic.w	r3, r3, #7
    e10a:	ecb3 8b02 	vldmia	r3!, {d8}
    e10e:	eeb0 7bc8 	vabs.f64	d7, d8
    e112:	eeb4 7b49 	vcmp.f64	d7, d9
    e116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e11a:	9308      	str	r3, [sp, #32]
    e11c:	f340 84e9 	ble.w	eaf2 <_svfprintf_r+0xd62>
    e120:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e128:	f101 8059 	bmi.w	f1de <_svfprintf_r+0x144e>
    e12c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e130:	4cab      	ldr	r4, [pc, #684]	; (e3e0 <_svfprintf_r+0x650>)
    e132:	4bac      	ldr	r3, [pc, #688]	; (e3e4 <_svfprintf_r+0x654>)
    e134:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e13a:	2a47      	cmp	r2, #71	; 0x47
    e13c:	bfc8      	it	gt
    e13e:	461c      	movgt	r4, r3
    e140:	2300      	movs	r3, #0
    e142:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e146:	2203      	movs	r2, #3
    e148:	9307      	str	r3, [sp, #28]
    e14a:	9202      	str	r2, [sp, #8]
    e14c:	9205      	str	r2, [sp, #20]
    e14e:	9303      	str	r3, [sp, #12]
    e150:	930f      	str	r3, [sp, #60]	; 0x3c
    e152:	2900      	cmp	r1, #0
    e154:	f43f af5f 	beq.w	e016 <_svfprintf_r+0x286>
    e158:	9b02      	ldr	r3, [sp, #8]
    e15a:	3301      	adds	r3, #1
    e15c:	9302      	str	r3, [sp, #8]
    e15e:	e75a      	b.n	e016 <_svfprintf_r+0x286>
    e160:	2b43      	cmp	r3, #67	; 0x43
    e162:	930b      	str	r3, [sp, #44]	; 0x2c
    e164:	d003      	beq.n	e16e <_svfprintf_r+0x3de>
    e166:	f018 0f10 	tst.w	r8, #16
    e16a:	f000 855d 	beq.w	ec28 <_svfprintf_r+0xe98>
    e16e:	9d08      	ldr	r5, [sp, #32]
    e170:	2208      	movs	r2, #8
    e172:	2100      	movs	r1, #0
    e174:	a822      	add	r0, sp, #136	; 0x88
    e176:	ac37      	add	r4, sp, #220	; 0xdc
    e178:	f7fe fcc0 	bl	cafc <memset>
    e17c:	ab22      	add	r3, sp, #136	; 0x88
    e17e:	f855 2b04 	ldr.w	r2, [r5], #4
    e182:	4621      	mov	r1, r4
    e184:	4658      	mov	r0, fp
    e186:	f002 fcc5 	bl	10b14 <_wcrtomb_r>
    e18a:	4603      	mov	r3, r0
    e18c:	3301      	adds	r3, #1
    e18e:	9005      	str	r0, [sp, #20]
    e190:	f001 82ee 	beq.w	f770 <_svfprintf_r+0x19e0>
    e194:	9b05      	ldr	r3, [sp, #20]
    e196:	9508      	str	r5, [sp, #32]
    e198:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e19c:	9302      	str	r3, [sp, #8]
    e19e:	2100      	movs	r1, #0
    e1a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e1a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e1a8:	9107      	str	r1, [sp, #28]
    e1aa:	9103      	str	r1, [sp, #12]
    e1ac:	910f      	str	r1, [sp, #60]	; 0x3c
    e1ae:	e732      	b.n	e016 <_svfprintf_r+0x286>
    e1b0:	930b      	str	r3, [sp, #44]	; 0x2c
    e1b2:	9b08      	ldr	r3, [sp, #32]
    e1b4:	461a      	mov	r2, r3
    e1b6:	2300      	movs	r3, #0
    e1b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e1bc:	4613      	mov	r3, r2
    e1be:	f853 4b04 	ldr.w	r4, [r3], #4
    e1c2:	9308      	str	r3, [sp, #32]
    e1c4:	2c00      	cmp	r4, #0
    e1c6:	f000 8548 	beq.w	ec5a <_svfprintf_r+0xeca>
    e1ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e1cc:	2b53      	cmp	r3, #83	; 0x53
    e1ce:	f000 86ec 	beq.w	efaa <_svfprintf_r+0x121a>
    e1d2:	f018 0310 	ands.w	r3, r8, #16
    e1d6:	930c      	str	r3, [sp, #48]	; 0x30
    e1d8:	f040 86e7 	bne.w	efaa <_svfprintf_r+0x121a>
    e1dc:	9b03      	ldr	r3, [sp, #12]
    e1de:	1c5d      	adds	r5, r3, #1
    e1e0:	f001 80e5 	beq.w	f3ae <_svfprintf_r+0x161e>
    e1e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    e1e6:	461a      	mov	r2, r3
    e1e8:	4620      	mov	r0, r4
    e1ea:	f001 fca1 	bl	fb30 <memchr>
    e1ee:	9007      	str	r0, [sp, #28]
    e1f0:	2800      	cmp	r0, #0
    e1f2:	f001 8328 	beq.w	f846 <_svfprintf_r+0x1ab6>
    e1f6:	9b07      	ldr	r3, [sp, #28]
    e1f8:	1b1a      	subs	r2, r3, r4
    e1fa:	9205      	str	r2, [sp, #20]
    e1fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1fe:	9303      	str	r3, [sp, #12]
    e200:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e204:	930f      	str	r3, [sp, #60]	; 0x3c
    e206:	930d      	str	r3, [sp, #52]	; 0x34
    e208:	9307      	str	r3, [sp, #28]
    e20a:	2373      	movs	r3, #115	; 0x73
    e20c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e210:	9202      	str	r2, [sp, #8]
    e212:	930b      	str	r3, [sp, #44]	; 0x2c
    e214:	e79d      	b.n	e152 <_svfprintf_r+0x3c2>
    e216:	f018 0f20 	tst.w	r8, #32
    e21a:	930b      	str	r3, [sp, #44]	; 0x2c
    e21c:	9b08      	ldr	r3, [sp, #32]
    e21e:	d03d      	beq.n	e29c <_svfprintf_r+0x50c>
    e220:	3307      	adds	r3, #7
    e222:	f023 0307 	bic.w	r3, r3, #7
    e226:	461a      	mov	r2, r3
    e228:	4611      	mov	r1, r2
    e22a:	685b      	ldr	r3, [r3, #4]
    e22c:	f851 2b08 	ldr.w	r2, [r1], #8
    e230:	9108      	str	r1, [sp, #32]
    e232:	4619      	mov	r1, r3
    e234:	2b00      	cmp	r3, #0
    e236:	f2c0 840c 	blt.w	ea52 <_svfprintf_r+0xcc2>
    e23a:	9b03      	ldr	r3, [sp, #12]
    e23c:	3301      	adds	r3, #1
    e23e:	f000 829e 	beq.w	e77e <_svfprintf_r+0x9ee>
    e242:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    e246:	ea52 0301 	orrs.w	r3, r2, r1
    e24a:	9002      	str	r0, [sp, #8]
    e24c:	f040 8299 	bne.w	e782 <_svfprintf_r+0x9f2>
    e250:	9b03      	ldr	r3, [sp, #12]
    e252:	2b00      	cmp	r3, #0
    e254:	f040 829a 	bne.w	e78c <_svfprintf_r+0x9fc>
    e258:	4680      	mov	r8, r0
    e25a:	2300      	movs	r3, #0
    e25c:	9303      	str	r3, [sp, #12]
    e25e:	9305      	str	r3, [sp, #20]
    e260:	ac50      	add	r4, sp, #320	; 0x140
    e262:	e106      	b.n	e472 <_svfprintf_r+0x6e2>
    e264:	9b08      	ldr	r3, [sp, #32]
    e266:	f853 2b04 	ldr.w	r2, [r3], #4
    e26a:	9206      	str	r2, [sp, #24]
    e26c:	2a00      	cmp	r2, #0
    e26e:	f280 8419 	bge.w	eaa4 <_svfprintf_r+0xd14>
    e272:	9a06      	ldr	r2, [sp, #24]
    e274:	9308      	str	r3, [sp, #32]
    e276:	4252      	negs	r2, r2
    e278:	9206      	str	r2, [sp, #24]
    e27a:	f899 3000 	ldrb.w	r3, [r9]
    e27e:	f048 0804 	orr.w	r8, r8, #4
    e282:	e5e1      	b.n	de48 <_svfprintf_r+0xb8>
    e284:	f899 3000 	ldrb.w	r3, [r9]
    e288:	f048 0808 	orr.w	r8, r8, #8
    e28c:	e5dc      	b.n	de48 <_svfprintf_r+0xb8>
    e28e:	f048 0810 	orr.w	r8, r8, #16
    e292:	f018 0f20 	tst.w	r8, #32
    e296:	930b      	str	r3, [sp, #44]	; 0x2c
    e298:	9b08      	ldr	r3, [sp, #32]
    e29a:	d1c1      	bne.n	e220 <_svfprintf_r+0x490>
    e29c:	f018 0f10 	tst.w	r8, #16
    e2a0:	f040 840b 	bne.w	eaba <_svfprintf_r+0xd2a>
    e2a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    e2a8:	f000 8403 	beq.w	eab2 <_svfprintf_r+0xd22>
    e2ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    e2b0:	9308      	str	r3, [sp, #32]
    e2b2:	17d1      	asrs	r1, r2, #31
    e2b4:	460b      	mov	r3, r1
    e2b6:	e7bd      	b.n	e234 <_svfprintf_r+0x4a4>
    e2b8:	9b08      	ldr	r3, [sp, #32]
    e2ba:	f048 0202 	orr.w	r2, r8, #2
    e2be:	9202      	str	r2, [sp, #8]
    e2c0:	f853 2b04 	ldr.w	r2, [r3], #4
    e2c4:	9308      	str	r3, [sp, #32]
    e2c6:	f647 0330 	movw	r3, #30768	; 0x7830
    e2ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    e2ce:	2078      	movs	r0, #120	; 0x78
    e2d0:	4b45      	ldr	r3, [pc, #276]	; (e3e8 <_svfprintf_r+0x658>)
    e2d2:	9311      	str	r3, [sp, #68]	; 0x44
    e2d4:	2100      	movs	r1, #0
    e2d6:	2302      	movs	r3, #2
    e2d8:	900b      	str	r0, [sp, #44]	; 0x2c
    e2da:	2000      	movs	r0, #0
    e2dc:	9c03      	ldr	r4, [sp, #12]
    e2de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    e2e2:	1c60      	adds	r0, r4, #1
    e2e4:	f000 80ad 	beq.w	e442 <_svfprintf_r+0x6b2>
    e2e8:	9802      	ldr	r0, [sp, #8]
    e2ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    e2ee:	ea52 0001 	orrs.w	r0, r2, r1
    e2f2:	f040 80a4 	bne.w	e43e <_svfprintf_r+0x6ae>
    e2f6:	2c00      	cmp	r4, #0
    e2f8:	f040 86ae 	bne.w	f058 <_svfprintf_r+0x12c8>
    e2fc:	2b00      	cmp	r3, #0
    e2fe:	d1ac      	bne.n	e25a <_svfprintf_r+0x4ca>
    e300:	9b02      	ldr	r3, [sp, #8]
    e302:	f013 0301 	ands.w	r3, r3, #1
    e306:	9305      	str	r3, [sp, #20]
    e308:	f000 83d1 	beq.w	eaae <_svfprintf_r+0xd1e>
    e30c:	2330      	movs	r3, #48	; 0x30
    e30e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    e312:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e316:	e0ac      	b.n	e472 <_svfprintf_r+0x6e2>
    e318:	f018 0f20 	tst.w	r8, #32
    e31c:	f040 83d4 	bne.w	eac8 <_svfprintf_r+0xd38>
    e320:	f018 0f10 	tst.w	r8, #16
    e324:	f040 869f 	bne.w	f066 <_svfprintf_r+0x12d6>
    e328:	f018 0f40 	tst.w	r8, #64	; 0x40
    e32c:	f040 8797 	bne.w	f25e <_svfprintf_r+0x14ce>
    e330:	f418 7f00 	tst.w	r8, #512	; 0x200
    e334:	f000 8697 	beq.w	f066 <_svfprintf_r+0x12d6>
    e338:	9b08      	ldr	r3, [sp, #32]
    e33a:	9904      	ldr	r1, [sp, #16]
    e33c:	f853 2b04 	ldr.w	r2, [r3], #4
    e340:	9308      	str	r3, [sp, #32]
    e342:	7011      	strb	r1, [r2, #0]
    e344:	464c      	mov	r4, r9
    e346:	e555      	b.n	ddf4 <_svfprintf_r+0x64>
    e348:	f899 3000 	ldrb.w	r3, [r9]
    e34c:	2b68      	cmp	r3, #104	; 0x68
    e34e:	bf03      	ittte	eq
    e350:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    e354:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    e358:	f109 0901 	addeq.w	r9, r9, #1
    e35c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    e360:	e572      	b.n	de48 <_svfprintf_r+0xb8>
    e362:	f899 3000 	ldrb.w	r3, [r9]
    e366:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    e36a:	e56d      	b.n	de48 <_svfprintf_r+0xb8>
    e36c:	f899 3000 	ldrb.w	r3, [r9]
    e370:	2b6c      	cmp	r3, #108	; 0x6c
    e372:	bf03      	ittte	eq
    e374:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    e378:	f048 0820 	orreq.w	r8, r8, #32
    e37c:	f109 0901 	addeq.w	r9, r9, #1
    e380:	f048 0810 	orrne.w	r8, r8, #16
    e384:	e560      	b.n	de48 <_svfprintf_r+0xb8>
    e386:	930b      	str	r3, [sp, #44]	; 0x2c
    e388:	f048 0810 	orr.w	r8, r8, #16
    e38c:	f018 0120 	ands.w	r1, r8, #32
    e390:	f000 8351 	beq.w	ea36 <_svfprintf_r+0xca6>
    e394:	9b08      	ldr	r3, [sp, #32]
    e396:	3307      	adds	r3, #7
    e398:	f023 0307 	bic.w	r3, r3, #7
    e39c:	6859      	ldr	r1, [r3, #4]
    e39e:	f853 2b08 	ldr.w	r2, [r3], #8
    e3a2:	9308      	str	r3, [sp, #32]
    e3a4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e3a8:	9302      	str	r3, [sp, #8]
    e3aa:	2300      	movs	r3, #0
    e3ac:	e795      	b.n	e2da <_svfprintf_r+0x54a>
    e3ae:	930b      	str	r3, [sp, #44]	; 0x2c
    e3b0:	f048 0310 	orr.w	r3, r8, #16
    e3b4:	9302      	str	r3, [sp, #8]
    e3b6:	9b02      	ldr	r3, [sp, #8]
    e3b8:	f013 0120 	ands.w	r1, r3, #32
    e3bc:	f000 8329 	beq.w	ea12 <_svfprintf_r+0xc82>
    e3c0:	9b08      	ldr	r3, [sp, #32]
    e3c2:	3307      	adds	r3, #7
    e3c4:	f023 0307 	bic.w	r3, r3, #7
    e3c8:	6859      	ldr	r1, [r3, #4]
    e3ca:	f853 2b08 	ldr.w	r2, [r3], #8
    e3ce:	9308      	str	r3, [sp, #32]
    e3d0:	2301      	movs	r3, #1
    e3d2:	e782      	b.n	e2da <_svfprintf_r+0x54a>
    e3d4:	f899 3000 	ldrb.w	r3, [r9]
    e3d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    e3dc:	e534      	b.n	de48 <_svfprintf_r+0xb8>
    e3de:	bf00      	nop
    e3e0:	20000c6c 	.word	0x20000c6c
    e3e4:	20000c70 	.word	0x20000c70
    e3e8:	20000c7c 	.word	0x20000c7c
    e3ec:	4649      	mov	r1, r9
    e3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    e3f2:	2b2a      	cmp	r3, #42	; 0x2a
    e3f4:	f001 8249 	beq.w	f88a <_svfprintf_r+0x1afa>
    e3f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e3fc:	2a09      	cmp	r2, #9
    e3fe:	4689      	mov	r9, r1
    e400:	bf98      	it	ls
    e402:	2100      	movls	r1, #0
    e404:	f201 8144 	bhi.w	f690 <_svfprintf_r+0x1900>
    e408:	f819 3b01 	ldrb.w	r3, [r9], #1
    e40c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e410:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e414:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e418:	2a09      	cmp	r2, #9
    e41a:	d9f5      	bls.n	e408 <_svfprintf_r+0x678>
    e41c:	9103      	str	r1, [sp, #12]
    e41e:	e515      	b.n	de4c <_svfprintf_r+0xbc>
    e420:	f899 3000 	ldrb.w	r3, [r9]
    e424:	f048 0801 	orr.w	r8, r8, #1
    e428:	e50e      	b.n	de48 <_svfprintf_r+0xb8>
    e42a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    e42e:	2b00      	cmp	r3, #0
    e430:	f47f ad8f 	bne.w	df52 <_svfprintf_r+0x1c2>
    e434:	f899 3000 	ldrb.w	r3, [r9]
    e438:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    e43c:	e504      	b.n	de48 <_svfprintf_r+0xb8>
    e43e:	f8cd 8008 	str.w	r8, [sp, #8]
    e442:	2b01      	cmp	r3, #1
    e444:	f000 819d 	beq.w	e782 <_svfprintf_r+0x9f2>
    e448:	2b02      	cmp	r3, #2
    e44a:	ac50      	add	r4, sp, #320	; 0x140
    e44c:	d120      	bne.n	e490 <_svfprintf_r+0x700>
    e44e:	9811      	ldr	r0, [sp, #68]	; 0x44
    e450:	f002 030f 	and.w	r3, r2, #15
    e454:	0912      	lsrs	r2, r2, #4
    e456:	5cc3      	ldrb	r3, [r0, r3]
    e458:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e45c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    e460:	0909      	lsrs	r1, r1, #4
    e462:	ea52 0301 	orrs.w	r3, r2, r1
    e466:	d1f3      	bne.n	e450 <_svfprintf_r+0x6c0>
    e468:	ab50      	add	r3, sp, #320	; 0x140
    e46a:	1b1b      	subs	r3, r3, r4
    e46c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e470:	9305      	str	r3, [sp, #20]
    e472:	9a05      	ldr	r2, [sp, #20]
    e474:	9803      	ldr	r0, [sp, #12]
    e476:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e47a:	4282      	cmp	r2, r0
    e47c:	f04f 0300 	mov.w	r3, #0
    e480:	bfb8      	it	lt
    e482:	4602      	movlt	r2, r0
    e484:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e488:	9307      	str	r3, [sp, #28]
    e48a:	9202      	str	r2, [sp, #8]
    e48c:	930f      	str	r3, [sp, #60]	; 0x3c
    e48e:	e660      	b.n	e152 <_svfprintf_r+0x3c2>
    e490:	f002 0307 	and.w	r3, r2, #7
    e494:	08d2      	lsrs	r2, r2, #3
    e496:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    e49a:	08c9      	lsrs	r1, r1, #3
    e49c:	3330      	adds	r3, #48	; 0x30
    e49e:	ea52 0501 	orrs.w	r5, r2, r1
    e4a2:	4620      	mov	r0, r4
    e4a4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e4a8:	d1f2      	bne.n	e490 <_svfprintf_r+0x700>
    e4aa:	9a02      	ldr	r2, [sp, #8]
    e4ac:	07d1      	lsls	r1, r2, #31
    e4ae:	f100 824d 	bmi.w	e94c <_svfprintf_r+0xbbc>
    e4b2:	ab50      	add	r3, sp, #320	; 0x140
    e4b4:	1b1b      	subs	r3, r3, r4
    e4b6:	4690      	mov	r8, r2
    e4b8:	9305      	str	r3, [sp, #20]
    e4ba:	e7da      	b.n	e472 <_svfprintf_r+0x6e2>
    e4bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e4be:	2b65      	cmp	r3, #101	; 0x65
    e4c0:	f340 80d4 	ble.w	e66c <_svfprintf_r+0x8dc>
    e4c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e4cc:	f040 81c1 	bne.w	e852 <_svfprintf_r+0xac2>
    e4d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e4d2:	49ba      	ldr	r1, [pc, #744]	; (e7bc <_svfprintf_r+0xa2c>)
    e4d4:	f8ca 1000 	str.w	r1, [sl]
    e4d8:	3301      	adds	r3, #1
    e4da:	3201      	adds	r2, #1
    e4dc:	2101      	movs	r1, #1
    e4de:	2b07      	cmp	r3, #7
    e4e0:	9226      	str	r2, [sp, #152]	; 0x98
    e4e2:	9325      	str	r3, [sp, #148]	; 0x94
    e4e4:	f8ca 1004 	str.w	r1, [sl, #4]
    e4e8:	f300 8551 	bgt.w	ef8e <_svfprintf_r+0x11fe>
    e4ec:	f10a 0a08 	add.w	sl, sl, #8
    e4f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e4f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    e4f4:	428b      	cmp	r3, r1
    e4f6:	f280 82d0 	bge.w	ea9a <_svfprintf_r+0xd0a>
    e4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e4fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4fe:	441a      	add	r2, r3
    e500:	e9ca 1300 	strd	r1, r3, [sl]
    e504:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e506:	9226      	str	r2, [sp, #152]	; 0x98
    e508:	3301      	adds	r3, #1
    e50a:	2b07      	cmp	r3, #7
    e50c:	9325      	str	r3, [sp, #148]	; 0x94
    e50e:	f300 8397 	bgt.w	ec40 <_svfprintf_r+0xeb0>
    e512:	f10a 0a08 	add.w	sl, sl, #8
    e516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e518:	1e5c      	subs	r4, r3, #1
    e51a:	2c00      	cmp	r4, #0
    e51c:	f77f add0 	ble.w	e0c0 <_svfprintf_r+0x330>
    e520:	2c10      	cmp	r4, #16
    e522:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e524:	f340 856e 	ble.w	f004 <_svfprintf_r+0x1274>
    e528:	ee1b 6a10 	vmov	r6, s22
    e52c:	2510      	movs	r5, #16
    e52e:	e005      	b.n	e53c <_svfprintf_r+0x7ac>
    e530:	f10a 0a08 	add.w	sl, sl, #8
    e534:	3c10      	subs	r4, #16
    e536:	2c10      	cmp	r4, #16
    e538:	f340 8564 	ble.w	f004 <_svfprintf_r+0x1274>
    e53c:	3301      	adds	r3, #1
    e53e:	49a0      	ldr	r1, [pc, #640]	; (e7c0 <_svfprintf_r+0xa30>)
    e540:	3210      	adds	r2, #16
    e542:	2b07      	cmp	r3, #7
    e544:	e9ca 1500 	strd	r1, r5, [sl]
    e548:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e54c:	ddf0      	ble.n	e530 <_svfprintf_r+0x7a0>
    e54e:	aa24      	add	r2, sp, #144	; 0x90
    e550:	4631      	mov	r1, r6
    e552:	4658      	mov	r0, fp
    e554:	f002 fb24 	bl	10ba0 <__ssprint_r>
    e558:	2800      	cmp	r0, #0
    e55a:	d17e      	bne.n	e65a <_svfprintf_r+0x8ca>
    e55c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e560:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e564:	e7e6      	b.n	e534 <_svfprintf_r+0x7a4>
    e566:	9b06      	ldr	r3, [sp, #24]
    e568:	9902      	ldr	r1, [sp, #8]
    e56a:	1a5d      	subs	r5, r3, r1
    e56c:	2d00      	cmp	r5, #0
    e56e:	f77f ad8e 	ble.w	e08e <_svfprintf_r+0x2fe>
    e572:	2d10      	cmp	r5, #16
    e574:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e576:	dd21      	ble.n	e5bc <_svfprintf_r+0x82c>
    e578:	9409      	str	r4, [sp, #36]	; 0x24
    e57a:	2610      	movs	r6, #16
    e57c:	ee1b 4a10 	vmov	r4, s22
    e580:	e004      	b.n	e58c <_svfprintf_r+0x7fc>
    e582:	3d10      	subs	r5, #16
    e584:	2d10      	cmp	r5, #16
    e586:	f10a 0a08 	add.w	sl, sl, #8
    e58a:	dd16      	ble.n	e5ba <_svfprintf_r+0x82a>
    e58c:	3301      	adds	r3, #1
    e58e:	498c      	ldr	r1, [pc, #560]	; (e7c0 <_svfprintf_r+0xa30>)
    e590:	3210      	adds	r2, #16
    e592:	2b07      	cmp	r3, #7
    e594:	e9ca 1600 	strd	r1, r6, [sl]
    e598:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e59c:	ddf1      	ble.n	e582 <_svfprintf_r+0x7f2>
    e59e:	aa24      	add	r2, sp, #144	; 0x90
    e5a0:	4621      	mov	r1, r4
    e5a2:	4658      	mov	r0, fp
    e5a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5a8:	f002 fafa 	bl	10ba0 <__ssprint_r>
    e5ac:	2800      	cmp	r0, #0
    e5ae:	d154      	bne.n	e65a <_svfprintf_r+0x8ca>
    e5b0:	3d10      	subs	r5, #16
    e5b2:	2d10      	cmp	r5, #16
    e5b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e5b8:	dce8      	bgt.n	e58c <_svfprintf_r+0x7fc>
    e5ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e5bc:	4980      	ldr	r1, [pc, #512]	; (e7c0 <_svfprintf_r+0xa30>)
    e5be:	f8ca 5004 	str.w	r5, [sl, #4]
    e5c2:	3301      	adds	r3, #1
    e5c4:	442a      	add	r2, r5
    e5c6:	2b07      	cmp	r3, #7
    e5c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e5cc:	f8ca 1000 	str.w	r1, [sl]
    e5d0:	f300 8526 	bgt.w	f020 <_svfprintf_r+0x1290>
    e5d4:	9b03      	ldr	r3, [sp, #12]
    e5d6:	9905      	ldr	r1, [sp, #20]
    e5d8:	1a5d      	subs	r5, r3, r1
    e5da:	2d00      	cmp	r5, #0
    e5dc:	f10a 0a08 	add.w	sl, sl, #8
    e5e0:	f77f ad5b 	ble.w	e09a <_svfprintf_r+0x30a>
    e5e4:	2d10      	cmp	r5, #16
    e5e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e5e8:	dd1f      	ble.n	e62a <_svfprintf_r+0x89a>
    e5ea:	4651      	mov	r1, sl
    e5ec:	2610      	movs	r6, #16
    e5ee:	ee1b aa10 	vmov	sl, s22
    e5f2:	e004      	b.n	e5fe <_svfprintf_r+0x86e>
    e5f4:	3d10      	subs	r5, #16
    e5f6:	2d10      	cmp	r5, #16
    e5f8:	f101 0108 	add.w	r1, r1, #8
    e5fc:	dd14      	ble.n	e628 <_svfprintf_r+0x898>
    e5fe:	3301      	adds	r3, #1
    e600:	486f      	ldr	r0, [pc, #444]	; (e7c0 <_svfprintf_r+0xa30>)
    e602:	3210      	adds	r2, #16
    e604:	2b07      	cmp	r3, #7
    e606:	e9c1 0600 	strd	r0, r6, [r1]
    e60a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e60e:	ddf1      	ble.n	e5f4 <_svfprintf_r+0x864>
    e610:	aa24      	add	r2, sp, #144	; 0x90
    e612:	4651      	mov	r1, sl
    e614:	4658      	mov	r0, fp
    e616:	f002 fac3 	bl	10ba0 <__ssprint_r>
    e61a:	b9f0      	cbnz	r0, e65a <_svfprintf_r+0x8ca>
    e61c:	3d10      	subs	r5, #16
    e61e:	2d10      	cmp	r5, #16
    e620:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e624:	a927      	add	r1, sp, #156	; 0x9c
    e626:	dcea      	bgt.n	e5fe <_svfprintf_r+0x86e>
    e628:	468a      	mov	sl, r1
    e62a:	3301      	adds	r3, #1
    e62c:	4964      	ldr	r1, [pc, #400]	; (e7c0 <_svfprintf_r+0xa30>)
    e62e:	f8ca 5004 	str.w	r5, [sl, #4]
    e632:	442a      	add	r2, r5
    e634:	2b07      	cmp	r3, #7
    e636:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e63a:	f8ca 1000 	str.w	r1, [sl]
    e63e:	f300 81da 	bgt.w	e9f6 <_svfprintf_r+0xc66>
    e642:	f10a 0a08 	add.w	sl, sl, #8
    e646:	e528      	b.n	e09a <_svfprintf_r+0x30a>
    e648:	ee1b 1a10 	vmov	r1, s22
    e64c:	aa24      	add	r2, sp, #144	; 0x90
    e64e:	4658      	mov	r0, fp
    e650:	f002 faa6 	bl	10ba0 <__ssprint_r>
    e654:	2800      	cmp	r0, #0
    e656:	f43f ad47 	beq.w	e0e8 <_svfprintf_r+0x358>
    e65a:	9b07      	ldr	r3, [sp, #28]
    e65c:	2b00      	cmp	r3, #0
    e65e:	f43f aca2 	beq.w	dfa6 <_svfprintf_r+0x216>
    e662:	9907      	ldr	r1, [sp, #28]
    e664:	4658      	mov	r0, fp
    e666:	f7fe fead 	bl	d3c4 <_free_r>
    e66a:	e49c      	b.n	dfa6 <_svfprintf_r+0x216>
    e66c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e66e:	2b01      	cmp	r3, #1
    e670:	f340 817a 	ble.w	e968 <_svfprintf_r+0xbd8>
    e674:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e676:	f8ca 4000 	str.w	r4, [sl]
    e67a:	3301      	adds	r3, #1
    e67c:	3201      	adds	r2, #1
    e67e:	2101      	movs	r1, #1
    e680:	2b07      	cmp	r3, #7
    e682:	9226      	str	r2, [sp, #152]	; 0x98
    e684:	9325      	str	r3, [sp, #148]	; 0x94
    e686:	f8ca 1004 	str.w	r1, [sl, #4]
    e68a:	f300 81f8 	bgt.w	ea7e <_svfprintf_r+0xcee>
    e68e:	f10a 0a08 	add.w	sl, sl, #8
    e692:	9910      	ldr	r1, [sp, #64]	; 0x40
    e694:	9812      	ldr	r0, [sp, #72]	; 0x48
    e696:	3301      	adds	r3, #1
    e698:	440a      	add	r2, r1
    e69a:	2b07      	cmp	r3, #7
    e69c:	e9ca 0100 	strd	r0, r1, [sl]
    e6a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e6a4:	f300 81dd 	bgt.w	ea62 <_svfprintf_r+0xcd2>
    e6a8:	f10a 0a08 	add.w	sl, sl, #8
    e6ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e6b4:	f000 8177 	beq.w	e9a6 <_svfprintf_r+0xc16>
    e6b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e6ba:	3301      	adds	r3, #1
    e6bc:	3901      	subs	r1, #1
    e6be:	3401      	adds	r4, #1
    e6c0:	440a      	add	r2, r1
    e6c2:	2b07      	cmp	r3, #7
    e6c4:	f8ca 4000 	str.w	r4, [sl]
    e6c8:	9325      	str	r3, [sp, #148]	; 0x94
    e6ca:	f8ca 1004 	str.w	r1, [sl, #4]
    e6ce:	9226      	str	r2, [sp, #152]	; 0x98
    e6d0:	f300 815b 	bgt.w	e98a <_svfprintf_r+0xbfa>
    e6d4:	f10a 0a08 	add.w	sl, sl, #8
    e6d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    e6da:	f8ca 1004 	str.w	r1, [sl, #4]
    e6de:	3301      	adds	r3, #1
    e6e0:	440a      	add	r2, r1
    e6e2:	2b07      	cmp	r3, #7
    e6e4:	a91e      	add	r1, sp, #120	; 0x78
    e6e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e6ea:	f8ca 1000 	str.w	r1, [sl]
    e6ee:	f77f ace5 	ble.w	e0bc <_svfprintf_r+0x32c>
    e6f2:	ee1b 1a10 	vmov	r1, s22
    e6f6:	aa24      	add	r2, sp, #144	; 0x90
    e6f8:	4658      	mov	r0, fp
    e6fa:	f002 fa51 	bl	10ba0 <__ssprint_r>
    e6fe:	2800      	cmp	r0, #0
    e700:	d1ab      	bne.n	e65a <_svfprintf_r+0x8ca>
    e702:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e704:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e708:	e4da      	b.n	e0c0 <_svfprintf_r+0x330>
    e70a:	2d10      	cmp	r5, #16
    e70c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e710:	4e2c      	ldr	r6, [pc, #176]	; (e7c4 <_svfprintf_r+0xa34>)
    e712:	dd24      	ble.n	e75e <_svfprintf_r+0x9ce>
    e714:	9417      	str	r4, [sp, #92]	; 0x5c
    e716:	2310      	movs	r3, #16
    e718:	ee1b 4a10 	vmov	r4, s22
    e71c:	4608      	mov	r0, r1
    e71e:	e004      	b.n	e72a <_svfprintf_r+0x99a>
    e720:	3d10      	subs	r5, #16
    e722:	2d10      	cmp	r5, #16
    e724:	f10a 0a08 	add.w	sl, sl, #8
    e728:	dd17      	ble.n	e75a <_svfprintf_r+0x9ca>
    e72a:	3001      	adds	r0, #1
    e72c:	3210      	adds	r2, #16
    e72e:	2807      	cmp	r0, #7
    e730:	e9ca 6300 	strd	r6, r3, [sl]
    e734:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e738:	ddf2      	ble.n	e720 <_svfprintf_r+0x990>
    e73a:	aa24      	add	r2, sp, #144	; 0x90
    e73c:	4621      	mov	r1, r4
    e73e:	4658      	mov	r0, fp
    e740:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e744:	f002 fa2c 	bl	10ba0 <__ssprint_r>
    e748:	2800      	cmp	r0, #0
    e74a:	d186      	bne.n	e65a <_svfprintf_r+0x8ca>
    e74c:	3d10      	subs	r5, #16
    e74e:	2d10      	cmp	r5, #16
    e750:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e754:	f04f 0310 	mov.w	r3, #16
    e758:	dce7      	bgt.n	e72a <_svfprintf_r+0x99a>
    e75a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e75c:	4601      	mov	r1, r0
    e75e:	3101      	adds	r1, #1
    e760:	442a      	add	r2, r5
    e762:	2907      	cmp	r1, #7
    e764:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e768:	f8ca 6000 	str.w	r6, [sl]
    e76c:	f8ca 5004 	str.w	r5, [sl, #4]
    e770:	f300 83bd 	bgt.w	eeee <_svfprintf_r+0x115e>
    e774:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e778:	f10a 0a08 	add.w	sl, sl, #8
    e77c:	e45d      	b.n	e03a <_svfprintf_r+0x2aa>
    e77e:	f8cd 8008 	str.w	r8, [sp, #8]
    e782:	2a0a      	cmp	r2, #10
    e784:	f171 0300 	sbcs.w	r3, r1, #0
    e788:	f080 8345 	bcs.w	ee16 <_svfprintf_r+0x1086>
    e78c:	3230      	adds	r2, #48	; 0x30
    e78e:	2301      	movs	r3, #1
    e790:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e794:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e798:	9305      	str	r3, [sp, #20]
    e79a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e79e:	e668      	b.n	e472 <_svfprintf_r+0x6e2>
    e7a0:	ee1b 1a10 	vmov	r1, s22
    e7a4:	aa24      	add	r2, sp, #144	; 0x90
    e7a6:	4658      	mov	r0, fp
    e7a8:	f002 f9fa 	bl	10ba0 <__ssprint_r>
    e7ac:	2800      	cmp	r0, #0
    e7ae:	f47f af54 	bne.w	e65a <_svfprintf_r+0x8ca>
    e7b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e7b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7b8:	e452      	b.n	e060 <_svfprintf_r+0x2d0>
    e7ba:	bf00      	nop
    e7bc:	20000cac 	.word	0x20000cac
    e7c0:	200011f4 	.word	0x200011f4
    e7c4:	20000cb0 	.word	0x20000cb0
    e7c8:	ee1b 1a10 	vmov	r1, s22
    e7cc:	aa24      	add	r2, sp, #144	; 0x90
    e7ce:	4658      	mov	r0, fp
    e7d0:	f002 f9e6 	bl	10ba0 <__ssprint_r>
    e7d4:	2800      	cmp	r0, #0
    e7d6:	f47f af40 	bne.w	e65a <_svfprintf_r+0x8ca>
    e7da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e7dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7e0:	e451      	b.n	e086 <_svfprintf_r+0x2f6>
    e7e2:	2c10      	cmp	r4, #16
    e7e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e7e6:	4ebe      	ldr	r6, [pc, #760]	; (eae0 <_svfprintf_r+0xd50>)
    e7e8:	dd1f      	ble.n	e82a <_svfprintf_r+0xa9a>
    e7ea:	ee1b 8a10 	vmov	r8, s22
    e7ee:	2510      	movs	r5, #16
    e7f0:	e004      	b.n	e7fc <_svfprintf_r+0xa6c>
    e7f2:	3c10      	subs	r4, #16
    e7f4:	2c10      	cmp	r4, #16
    e7f6:	f10a 0a08 	add.w	sl, sl, #8
    e7fa:	dd16      	ble.n	e82a <_svfprintf_r+0xa9a>
    e7fc:	3301      	adds	r3, #1
    e7fe:	3210      	adds	r2, #16
    e800:	2b07      	cmp	r3, #7
    e802:	e9ca 6500 	strd	r6, r5, [sl]
    e806:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e80a:	ddf2      	ble.n	e7f2 <_svfprintf_r+0xa62>
    e80c:	aa24      	add	r2, sp, #144	; 0x90
    e80e:	4641      	mov	r1, r8
    e810:	4658      	mov	r0, fp
    e812:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e816:	f002 f9c3 	bl	10ba0 <__ssprint_r>
    e81a:	2800      	cmp	r0, #0
    e81c:	f47f af1d 	bne.w	e65a <_svfprintf_r+0x8ca>
    e820:	3c10      	subs	r4, #16
    e822:	2c10      	cmp	r4, #16
    e824:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e828:	dce8      	bgt.n	e7fc <_svfprintf_r+0xa6c>
    e82a:	3301      	adds	r3, #1
    e82c:	4422      	add	r2, r4
    e82e:	2b07      	cmp	r3, #7
    e830:	e9ca 6400 	strd	r6, r4, [sl]
    e834:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e838:	f77f ac4b 	ble.w	e0d2 <_svfprintf_r+0x342>
    e83c:	ee1b 1a10 	vmov	r1, s22
    e840:	aa24      	add	r2, sp, #144	; 0x90
    e842:	4658      	mov	r0, fp
    e844:	f002 f9ac 	bl	10ba0 <__ssprint_r>
    e848:	2800      	cmp	r0, #0
    e84a:	f47f af06 	bne.w	e65a <_svfprintf_r+0x8ca>
    e84e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e850:	e43f      	b.n	e0d2 <_svfprintf_r+0x342>
    e852:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e854:	2900      	cmp	r1, #0
    e856:	f340 835a 	ble.w	ef0e <_svfprintf_r+0x117e>
    e85a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e85c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e85e:	429e      	cmp	r6, r3
    e860:	bfa8      	it	ge
    e862:	461e      	movge	r6, r3
    e864:	2e00      	cmp	r6, #0
    e866:	dd0b      	ble.n	e880 <_svfprintf_r+0xaf0>
    e868:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e86a:	3301      	adds	r3, #1
    e86c:	4432      	add	r2, r6
    e86e:	2b07      	cmp	r3, #7
    e870:	e9ca 4600 	strd	r4, r6, [sl]
    e874:	9226      	str	r2, [sp, #152]	; 0x98
    e876:	9325      	str	r3, [sp, #148]	; 0x94
    e878:	f300 8689 	bgt.w	f58e <_svfprintf_r+0x17fe>
    e87c:	f10a 0a08 	add.w	sl, sl, #8
    e880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e882:	2e00      	cmp	r6, #0
    e884:	bfa8      	it	ge
    e886:	1bad      	subge	r5, r5, r6
    e888:	2d00      	cmp	r5, #0
    e88a:	f300 8203 	bgt.w	ec94 <_svfprintf_r+0xf04>
    e88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e890:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e894:	4423      	add	r3, r4
    e896:	9305      	str	r3, [sp, #20]
    e898:	f040 821f 	bne.w	ecda <_svfprintf_r+0xf4a>
    e89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e89e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e8a0:	428b      	cmp	r3, r1
    e8a2:	db03      	blt.n	e8ac <_svfprintf_r+0xb1c>
    e8a4:	f018 0f01 	tst.w	r8, #1
    e8a8:	f000 84cf 	beq.w	f24a <_svfprintf_r+0x14ba>
    e8ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    e8ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    e8b0:	440a      	add	r2, r1
    e8b2:	e9ca 0100 	strd	r0, r1, [sl]
    e8b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    e8b8:	9226      	str	r2, [sp, #152]	; 0x98
    e8ba:	3101      	adds	r1, #1
    e8bc:	2907      	cmp	r1, #7
    e8be:	9125      	str	r1, [sp, #148]	; 0x94
    e8c0:	f300 86a5 	bgt.w	f60e <_svfprintf_r+0x187e>
    e8c4:	f10a 0a08 	add.w	sl, sl, #8
    e8c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e8ca:	1865      	adds	r5, r4, r1
    e8cc:	1acc      	subs	r4, r1, r3
    e8ce:	9b05      	ldr	r3, [sp, #20]
    e8d0:	1aed      	subs	r5, r5, r3
    e8d2:	42a5      	cmp	r5, r4
    e8d4:	bfa8      	it	ge
    e8d6:	4625      	movge	r5, r4
    e8d8:	2d00      	cmp	r5, #0
    e8da:	dd0d      	ble.n	e8f8 <_svfprintf_r+0xb68>
    e8dc:	f8ca 3000 	str.w	r3, [sl]
    e8e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8e2:	f8ca 5004 	str.w	r5, [sl, #4]
    e8e6:	3301      	adds	r3, #1
    e8e8:	442a      	add	r2, r5
    e8ea:	2b07      	cmp	r3, #7
    e8ec:	9226      	str	r2, [sp, #152]	; 0x98
    e8ee:	9325      	str	r3, [sp, #148]	; 0x94
    e8f0:	f300 86bb 	bgt.w	f66a <_svfprintf_r+0x18da>
    e8f4:	f10a 0a08 	add.w	sl, sl, #8
    e8f8:	2d00      	cmp	r5, #0
    e8fa:	bfa8      	it	ge
    e8fc:	1b64      	subge	r4, r4, r5
    e8fe:	2c00      	cmp	r4, #0
    e900:	f77f abde 	ble.w	e0c0 <_svfprintf_r+0x330>
    e904:	2c10      	cmp	r4, #16
    e906:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e908:	f340 837c 	ble.w	f004 <_svfprintf_r+0x1274>
    e90c:	ee1b 6a10 	vmov	r6, s22
    e910:	2510      	movs	r5, #16
    e912:	e005      	b.n	e920 <_svfprintf_r+0xb90>
    e914:	f10a 0a08 	add.w	sl, sl, #8
    e918:	3c10      	subs	r4, #16
    e91a:	2c10      	cmp	r4, #16
    e91c:	f340 8372 	ble.w	f004 <_svfprintf_r+0x1274>
    e920:	3301      	adds	r3, #1
    e922:	4970      	ldr	r1, [pc, #448]	; (eae4 <_svfprintf_r+0xd54>)
    e924:	3210      	adds	r2, #16
    e926:	2b07      	cmp	r3, #7
    e928:	e9ca 1500 	strd	r1, r5, [sl]
    e92c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e930:	ddf0      	ble.n	e914 <_svfprintf_r+0xb84>
    e932:	aa24      	add	r2, sp, #144	; 0x90
    e934:	4631      	mov	r1, r6
    e936:	4658      	mov	r0, fp
    e938:	f002 f932 	bl	10ba0 <__ssprint_r>
    e93c:	2800      	cmp	r0, #0
    e93e:	f47f ae8c 	bne.w	e65a <_svfprintf_r+0x8ca>
    e942:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e946:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e94a:	e7e5      	b.n	e918 <_svfprintf_r+0xb88>
    e94c:	2b30      	cmp	r3, #48	; 0x30
    e94e:	f43f ad8b 	beq.w	e468 <_svfprintf_r+0x6d8>
    e952:	2330      	movs	r3, #48	; 0x30
    e954:	3802      	subs	r0, #2
    e956:	f804 3c01 	strb.w	r3, [r4, #-1]
    e95a:	ab50      	add	r3, sp, #320	; 0x140
    e95c:	1a1b      	subs	r3, r3, r0
    e95e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e962:	9305      	str	r3, [sp, #20]
    e964:	4604      	mov	r4, r0
    e966:	e584      	b.n	e472 <_svfprintf_r+0x6e2>
    e968:	f018 0f01 	tst.w	r8, #1
    e96c:	f47f ae82 	bne.w	e674 <_svfprintf_r+0x8e4>
    e970:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e972:	f8ca 4000 	str.w	r4, [sl]
    e976:	3301      	adds	r3, #1
    e978:	3201      	adds	r2, #1
    e97a:	2101      	movs	r1, #1
    e97c:	2b07      	cmp	r3, #7
    e97e:	9226      	str	r2, [sp, #152]	; 0x98
    e980:	9325      	str	r3, [sp, #148]	; 0x94
    e982:	f8ca 1004 	str.w	r1, [sl, #4]
    e986:	f77f aea5 	ble.w	e6d4 <_svfprintf_r+0x944>
    e98a:	ee1b 1a10 	vmov	r1, s22
    e98e:	aa24      	add	r2, sp, #144	; 0x90
    e990:	4658      	mov	r0, fp
    e992:	f002 f905 	bl	10ba0 <__ssprint_r>
    e996:	2800      	cmp	r0, #0
    e998:	f47f ae5f 	bne.w	e65a <_svfprintf_r+0x8ca>
    e99c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e9a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9a4:	e698      	b.n	e6d8 <_svfprintf_r+0x948>
    e9a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e9a8:	1e4c      	subs	r4, r1, #1
    e9aa:	2c00      	cmp	r4, #0
    e9ac:	f77f ae94 	ble.w	e6d8 <_svfprintf_r+0x948>
    e9b0:	2c10      	cmp	r4, #16
    e9b2:	f340 8361 	ble.w	f078 <_svfprintf_r+0x12e8>
    e9b6:	ee1b 6a10 	vmov	r6, s22
    e9ba:	2510      	movs	r5, #16
    e9bc:	e005      	b.n	e9ca <_svfprintf_r+0xc3a>
    e9be:	f10a 0a08 	add.w	sl, sl, #8
    e9c2:	3c10      	subs	r4, #16
    e9c4:	2c10      	cmp	r4, #16
    e9c6:	f340 8357 	ble.w	f078 <_svfprintf_r+0x12e8>
    e9ca:	3301      	adds	r3, #1
    e9cc:	4945      	ldr	r1, [pc, #276]	; (eae4 <_svfprintf_r+0xd54>)
    e9ce:	3210      	adds	r2, #16
    e9d0:	2b07      	cmp	r3, #7
    e9d2:	e9ca 1500 	strd	r1, r5, [sl]
    e9d6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e9da:	ddf0      	ble.n	e9be <_svfprintf_r+0xc2e>
    e9dc:	aa24      	add	r2, sp, #144	; 0x90
    e9de:	4631      	mov	r1, r6
    e9e0:	4658      	mov	r0, fp
    e9e2:	f002 f8dd 	bl	10ba0 <__ssprint_r>
    e9e6:	2800      	cmp	r0, #0
    e9e8:	f47f ae37 	bne.w	e65a <_svfprintf_r+0x8ca>
    e9ec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e9f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9f4:	e7e5      	b.n	e9c2 <_svfprintf_r+0xc32>
    e9f6:	ee1b 1a10 	vmov	r1, s22
    e9fa:	aa24      	add	r2, sp, #144	; 0x90
    e9fc:	4658      	mov	r0, fp
    e9fe:	f002 f8cf 	bl	10ba0 <__ssprint_r>
    ea02:	2800      	cmp	r0, #0
    ea04:	f47f ae29 	bne.w	e65a <_svfprintf_r+0x8ca>
    ea08:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea0a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea0e:	f7ff bb44 	b.w	e09a <_svfprintf_r+0x30a>
    ea12:	9b02      	ldr	r3, [sp, #8]
    ea14:	f013 0310 	ands.w	r3, r3, #16
    ea18:	f040 80c1 	bne.w	eb9e <_svfprintf_r+0xe0e>
    ea1c:	9a02      	ldr	r2, [sp, #8]
    ea1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    ea22:	f000 837a 	beq.w	f11a <_svfprintf_r+0x138a>
    ea26:	9808      	ldr	r0, [sp, #32]
    ea28:	f850 2b04 	ldr.w	r2, [r0], #4
    ea2c:	9008      	str	r0, [sp, #32]
    ea2e:	4619      	mov	r1, r3
    ea30:	b292      	uxth	r2, r2
    ea32:	2301      	movs	r3, #1
    ea34:	e451      	b.n	e2da <_svfprintf_r+0x54a>
    ea36:	f018 0310 	ands.w	r3, r8, #16
    ea3a:	d155      	bne.n	eae8 <_svfprintf_r+0xd58>
    ea3c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ea40:	f000 835d 	beq.w	f0fe <_svfprintf_r+0x136e>
    ea44:	9808      	ldr	r0, [sp, #32]
    ea46:	f850 2b04 	ldr.w	r2, [r0], #4
    ea4a:	9008      	str	r0, [sp, #32]
    ea4c:	4619      	mov	r1, r3
    ea4e:	b292      	uxth	r2, r2
    ea50:	e4a8      	b.n	e3a4 <_svfprintf_r+0x614>
    ea52:	4252      	negs	r2, r2
    ea54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ea58:	f8cd 8008 	str.w	r8, [sp, #8]
    ea5c:	202d      	movs	r0, #45	; 0x2d
    ea5e:	2301      	movs	r3, #1
    ea60:	e43c      	b.n	e2dc <_svfprintf_r+0x54c>
    ea62:	ee1b 1a10 	vmov	r1, s22
    ea66:	aa24      	add	r2, sp, #144	; 0x90
    ea68:	4658      	mov	r0, fp
    ea6a:	f002 f899 	bl	10ba0 <__ssprint_r>
    ea6e:	2800      	cmp	r0, #0
    ea70:	f47f adf3 	bne.w	e65a <_svfprintf_r+0x8ca>
    ea74:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ea78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea7c:	e616      	b.n	e6ac <_svfprintf_r+0x91c>
    ea7e:	ee1b 1a10 	vmov	r1, s22
    ea82:	aa24      	add	r2, sp, #144	; 0x90
    ea84:	4658      	mov	r0, fp
    ea86:	f002 f88b 	bl	10ba0 <__ssprint_r>
    ea8a:	2800      	cmp	r0, #0
    ea8c:	f47f ade5 	bne.w	e65a <_svfprintf_r+0x8ca>
    ea90:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ea94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea98:	e5fb      	b.n	e692 <_svfprintf_r+0x902>
    ea9a:	f018 0f01 	tst.w	r8, #1
    ea9e:	f43f ab0f 	beq.w	e0c0 <_svfprintf_r+0x330>
    eaa2:	e52a      	b.n	e4fa <_svfprintf_r+0x76a>
    eaa4:	9308      	str	r3, [sp, #32]
    eaa6:	f899 3000 	ldrb.w	r3, [r9]
    eaaa:	f7ff b9cd 	b.w	de48 <_svfprintf_r+0xb8>
    eaae:	ac50      	add	r4, sp, #320	; 0x140
    eab0:	e4df      	b.n	e472 <_svfprintf_r+0x6e2>
    eab2:	f418 7f00 	tst.w	r8, #512	; 0x200
    eab6:	f040 83db 	bne.w	f270 <_svfprintf_r+0x14e0>
    eaba:	f853 2b04 	ldr.w	r2, [r3], #4
    eabe:	9308      	str	r3, [sp, #32]
    eac0:	17d1      	asrs	r1, r2, #31
    eac2:	460b      	mov	r3, r1
    eac4:	f7ff bbb6 	b.w	e234 <_svfprintf_r+0x4a4>
    eac8:	9b08      	ldr	r3, [sp, #32]
    eaca:	9804      	ldr	r0, [sp, #16]
    eacc:	f853 1b04 	ldr.w	r1, [r3], #4
    ead0:	9308      	str	r3, [sp, #32]
    ead2:	17c2      	asrs	r2, r0, #31
    ead4:	e9c1 0200 	strd	r0, r2, [r1]
    ead8:	464c      	mov	r4, r9
    eada:	f7ff b98b 	b.w	ddf4 <_svfprintf_r+0x64>
    eade:	bf00      	nop
    eae0:	20000cb0 	.word	0x20000cb0
    eae4:	200011f4 	.word	0x200011f4
    eae8:	9b08      	ldr	r3, [sp, #32]
    eaea:	f853 2b04 	ldr.w	r2, [r3], #4
    eaee:	9308      	str	r3, [sp, #32]
    eaf0:	e458      	b.n	e3a4 <_svfprintf_r+0x614>
    eaf2:	eeb4 8b48 	vcmp.f64	d8, d8
    eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eafa:	f180 8694 	bvs.w	f826 <_svfprintf_r+0x1a96>
    eafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb00:	2b61      	cmp	r3, #97	; 0x61
    eb02:	f000 8552 	beq.w	f5aa <_svfprintf_r+0x181a>
    eb06:	2b41      	cmp	r3, #65	; 0x41
    eb08:	f000 85c0 	beq.w	f68c <_svfprintf_r+0x18fc>
    eb0c:	9b03      	ldr	r3, [sp, #12]
    eb0e:	3301      	adds	r3, #1
    eb10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb12:	f023 0520 	bic.w	r5, r3, #32
    eb16:	f000 8480 	beq.w	f41a <_svfprintf_r+0x168a>
    eb1a:	2d47      	cmp	r5, #71	; 0x47
    eb1c:	d104      	bne.n	eb28 <_svfprintf_r+0xd98>
    eb1e:	9b03      	ldr	r3, [sp, #12]
    eb20:	2b00      	cmp	r3, #0
    eb22:	bf08      	it	eq
    eb24:	2301      	moveq	r3, #1
    eb26:	9303      	str	r3, [sp, #12]
    eb28:	ee18 3a90 	vmov	r3, s17
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    eb32:	4646      	mov	r6, r8
    eb34:	f2c0 8618 	blt.w	f768 <_svfprintf_r+0x19d8>
    eb38:	eeb0 ab48 	vmov.f64	d10, d8
    eb3c:	2300      	movs	r3, #0
    eb3e:	4690      	mov	r8, r2
    eb40:	9309      	str	r3, [sp, #36]	; 0x24
    eb42:	9307      	str	r3, [sp, #28]
    eb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    eb46:	3b41      	subs	r3, #65	; 0x41
    eb48:	2b25      	cmp	r3, #37	; 0x25
    eb4a:	f200 8398 	bhi.w	f27e <_svfprintf_r+0x14ee>
    eb4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    eb52:	046f      	.short	0x046f
    eb54:	03960396 	.word	0x03960396
    eb58:	04680396 	.word	0x04680396
    eb5c:	0396046c 	.word	0x0396046c
    eb60:	03960396 	.word	0x03960396
    eb64:	03960396 	.word	0x03960396
    eb68:	03960396 	.word	0x03960396
    eb6c:	03960396 	.word	0x03960396
    eb70:	03960396 	.word	0x03960396
    eb74:	03960396 	.word	0x03960396
    eb78:	03960396 	.word	0x03960396
    eb7c:	03960396 	.word	0x03960396
    eb80:	03960396 	.word	0x03960396
    eb84:	03960396 	.word	0x03960396
    eb88:	03960396 	.word	0x03960396
    eb8c:	03960396 	.word	0x03960396
    eb90:	03960396 	.word	0x03960396
    eb94:	03960396 	.word	0x03960396
    eb98:	04680396 	.word	0x04680396
    eb9c:	046c      	.short	0x046c
    eb9e:	9b08      	ldr	r3, [sp, #32]
    eba0:	f853 2b04 	ldr.w	r2, [r3], #4
    eba4:	9308      	str	r3, [sp, #32]
    eba6:	2301      	movs	r3, #1
    eba8:	f7ff bb97 	b.w	e2da <_svfprintf_r+0x54a>
    ebac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ebae:	2b00      	cmp	r3, #0
    ebb0:	f43f a9cf 	beq.w	df52 <_svfprintf_r+0x1c2>
    ebb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ebb6:	781b      	ldrb	r3, [r3, #0]
    ebb8:	2b00      	cmp	r3, #0
    ebba:	f43f a9ca 	beq.w	df52 <_svfprintf_r+0x1c2>
    ebbe:	f899 3000 	ldrb.w	r3, [r9]
    ebc2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    ebc6:	f7ff b93f 	b.w	de48 <_svfprintf_r+0xb8>
    ebca:	930b      	str	r3, [sp, #44]	; 0x2c
    ebcc:	f8cd 8008 	str.w	r8, [sp, #8]
    ebd0:	f7ff bbf1 	b.w	e3b6 <_svfprintf_r+0x626>
    ebd4:	930b      	str	r3, [sp, #44]	; 0x2c
    ebd6:	4b9a      	ldr	r3, [pc, #616]	; (ee40 <_svfprintf_r+0x10b0>)
    ebd8:	9311      	str	r3, [sp, #68]	; 0x44
    ebda:	f018 0120 	ands.w	r1, r8, #32
    ebde:	f000 8105 	beq.w	edec <_svfprintf_r+0x105c>
    ebe2:	9b08      	ldr	r3, [sp, #32]
    ebe4:	3307      	adds	r3, #7
    ebe6:	f023 0307 	bic.w	r3, r3, #7
    ebea:	6859      	ldr	r1, [r3, #4]
    ebec:	f853 2b08 	ldr.w	r2, [r3], #8
    ebf0:	9308      	str	r3, [sp, #32]
    ebf2:	f018 0f01 	tst.w	r8, #1
    ebf6:	d00a      	beq.n	ec0e <_svfprintf_r+0xe7e>
    ebf8:	ea52 0301 	orrs.w	r3, r2, r1
    ebfc:	d007      	beq.n	ec0e <_svfprintf_r+0xe7e>
    ebfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec00:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    ec04:	2330      	movs	r3, #48	; 0x30
    ec06:	f048 0802 	orr.w	r8, r8, #2
    ec0a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    ec0e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    ec12:	9302      	str	r3, [sp, #8]
    ec14:	2302      	movs	r3, #2
    ec16:	f7ff bb60 	b.w	e2da <_svfprintf_r+0x54a>
    ec1a:	930b      	str	r3, [sp, #44]	; 0x2c
    ec1c:	f7ff bbb6 	b.w	e38c <_svfprintf_r+0x5fc>
    ec20:	930b      	str	r3, [sp, #44]	; 0x2c
    ec22:	4b88      	ldr	r3, [pc, #544]	; (ee44 <_svfprintf_r+0x10b4>)
    ec24:	9311      	str	r3, [sp, #68]	; 0x44
    ec26:	e7d8      	b.n	ebda <_svfprintf_r+0xe4a>
    ec28:	9b08      	ldr	r3, [sp, #32]
    ec2a:	2101      	movs	r1, #1
    ec2c:	f853 2b04 	ldr.w	r2, [r3], #4
    ec30:	9102      	str	r1, [sp, #8]
    ec32:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    ec36:	9308      	str	r3, [sp, #32]
    ec38:	9105      	str	r1, [sp, #20]
    ec3a:	ac37      	add	r4, sp, #220	; 0xdc
    ec3c:	f7ff baaf 	b.w	e19e <_svfprintf_r+0x40e>
    ec40:	ee1b 1a10 	vmov	r1, s22
    ec44:	aa24      	add	r2, sp, #144	; 0x90
    ec46:	4658      	mov	r0, fp
    ec48:	f001 ffaa 	bl	10ba0 <__ssprint_r>
    ec4c:	2800      	cmp	r0, #0
    ec4e:	f47f ad04 	bne.w	e65a <_svfprintf_r+0x8ca>
    ec52:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ec54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ec58:	e45d      	b.n	e516 <_svfprintf_r+0x786>
    ec5a:	9b03      	ldr	r3, [sp, #12]
    ec5c:	9407      	str	r4, [sp, #28]
    ec5e:	2b06      	cmp	r3, #6
    ec60:	4622      	mov	r2, r4
    ec62:	bf28      	it	cs
    ec64:	2306      	movcs	r3, #6
    ec66:	9403      	str	r4, [sp, #12]
    ec68:	4621      	mov	r1, r4
    ec6a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    ec6e:	4c76      	ldr	r4, [pc, #472]	; (ee48 <_svfprintf_r+0x10b8>)
    ec70:	9302      	str	r3, [sp, #8]
    ec72:	9305      	str	r3, [sp, #20]
    ec74:	920f      	str	r2, [sp, #60]	; 0x3c
    ec76:	f7ff ba6c 	b.w	e152 <_svfprintf_r+0x3c2>
    ec7a:	2140      	movs	r1, #64	; 0x40
    ec7c:	4658      	mov	r0, fp
    ec7e:	f7fc ff45 	bl	bb0c <_malloc_r>
    ec82:	6020      	str	r0, [r4, #0]
    ec84:	6120      	str	r0, [r4, #16]
    ec86:	2800      	cmp	r0, #0
    ec88:	f000 860f 	beq.w	f8aa <_svfprintf_r+0x1b1a>
    ec8c:	2340      	movs	r3, #64	; 0x40
    ec8e:	6163      	str	r3, [r4, #20]
    ec90:	f7ff b89e 	b.w	ddd0 <_svfprintf_r+0x40>
    ec94:	2d10      	cmp	r5, #16
    ec96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ec98:	f340 825d 	ble.w	f156 <_svfprintf_r+0x13c6>
    ec9c:	4651      	mov	r1, sl
    ec9e:	2610      	movs	r6, #16
    eca0:	ee1b aa10 	vmov	sl, s22
    eca4:	e004      	b.n	ecb0 <_svfprintf_r+0xf20>
    eca6:	3108      	adds	r1, #8
    eca8:	3d10      	subs	r5, #16
    ecaa:	2d10      	cmp	r5, #16
    ecac:	f340 8252 	ble.w	f154 <_svfprintf_r+0x13c4>
    ecb0:	3301      	adds	r3, #1
    ecb2:	4866      	ldr	r0, [pc, #408]	; (ee4c <_svfprintf_r+0x10bc>)
    ecb4:	3210      	adds	r2, #16
    ecb6:	2b07      	cmp	r3, #7
    ecb8:	e9c1 0600 	strd	r0, r6, [r1]
    ecbc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ecc0:	ddf1      	ble.n	eca6 <_svfprintf_r+0xf16>
    ecc2:	aa24      	add	r2, sp, #144	; 0x90
    ecc4:	4651      	mov	r1, sl
    ecc6:	4658      	mov	r0, fp
    ecc8:	f001 ff6a 	bl	10ba0 <__ssprint_r>
    eccc:	2800      	cmp	r0, #0
    ecce:	f47f acc4 	bne.w	e65a <_svfprintf_r+0x8ca>
    ecd2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ecd6:	a927      	add	r1, sp, #156	; 0x9c
    ecd8:	e7e6      	b.n	eca8 <_svfprintf_r+0xf18>
    ecda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ecdc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    ece0:	18e3      	adds	r3, r4, r3
    ece2:	9303      	str	r3, [sp, #12]
    ece4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ece6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ecea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    ecec:	9d05      	ldr	r5, [sp, #20]
    ecee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    ecf2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    ecf6:	940b      	str	r4, [sp, #44]	; 0x2c
    ecf8:	ee1b 1a10 	vmov	r1, s22
    ecfc:	4650      	mov	r0, sl
    ecfe:	2b00      	cmp	r3, #0
    ed00:	d034      	beq.n	ed6c <_svfprintf_r+0xfdc>
    ed02:	f1b8 0f00 	cmp.w	r8, #0
    ed06:	d135      	bne.n	ed74 <_svfprintf_r+0xfe4>
    ed08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ed0a:	3b01      	subs	r3, #1
    ed0c:	3e01      	subs	r6, #1
    ed0e:	930d      	str	r3, [sp, #52]	; 0x34
    ed10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ed12:	e9c0 3900 	strd	r3, r9, [r0]
    ed16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed18:	3301      	adds	r3, #1
    ed1a:	444a      	add	r2, r9
    ed1c:	2b07      	cmp	r3, #7
    ed1e:	9226      	str	r2, [sp, #152]	; 0x98
    ed20:	9325      	str	r3, [sp, #148]	; 0x94
    ed22:	dc6c      	bgt.n	edfe <_svfprintf_r+0x106e>
    ed24:	3008      	adds	r0, #8
    ed26:	9b03      	ldr	r3, [sp, #12]
    ed28:	f896 c000 	ldrb.w	ip, [r6]
    ed2c:	1b5b      	subs	r3, r3, r5
    ed2e:	4563      	cmp	r3, ip
    ed30:	bfa8      	it	ge
    ed32:	4663      	movge	r3, ip
    ed34:	2b00      	cmp	r3, #0
    ed36:	469a      	mov	sl, r3
    ed38:	dd0c      	ble.n	ed54 <_svfprintf_r+0xfc4>
    ed3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ed3c:	3401      	adds	r4, #1
    ed3e:	441a      	add	r2, r3
    ed40:	2c07      	cmp	r4, #7
    ed42:	e9c0 5300 	strd	r5, r3, [r0]
    ed46:	9226      	str	r2, [sp, #152]	; 0x98
    ed48:	9425      	str	r4, [sp, #148]	; 0x94
    ed4a:	f300 8177 	bgt.w	f03c <_svfprintf_r+0x12ac>
    ed4e:	f896 c000 	ldrb.w	ip, [r6]
    ed52:	3008      	adds	r0, #8
    ed54:	f1ba 0f00 	cmp.w	sl, #0
    ed58:	bfac      	ite	ge
    ed5a:	ebac 040a 	subge.w	r4, ip, sl
    ed5e:	4664      	movlt	r4, ip
    ed60:	2c00      	cmp	r4, #0
    ed62:	dc0a      	bgt.n	ed7a <_svfprintf_r+0xfea>
    ed64:	4465      	add	r5, ip
    ed66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d1ca      	bne.n	ed02 <_svfprintf_r+0xf72>
    ed6c:	f1b8 0f00 	cmp.w	r8, #0
    ed70:	f000 83ac 	beq.w	f4cc <_svfprintf_r+0x173c>
    ed74:	f108 38ff 	add.w	r8, r8, #4294967295
    ed78:	e7ca      	b.n	ed10 <_svfprintf_r+0xf80>
    ed7a:	2c10      	cmp	r4, #16
    ed7c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    ed80:	dd24      	ble.n	edcc <_svfprintf_r+0x103c>
    ed82:	9505      	str	r5, [sp, #20]
    ed84:	f04f 0a10 	mov.w	sl, #16
    ed88:	4663      	mov	r3, ip
    ed8a:	460d      	mov	r5, r1
    ed8c:	e004      	b.n	ed98 <_svfprintf_r+0x1008>
    ed8e:	3c10      	subs	r4, #16
    ed90:	2c10      	cmp	r4, #16
    ed92:	f100 0008 	add.w	r0, r0, #8
    ed96:	dd16      	ble.n	edc6 <_svfprintf_r+0x1036>
    ed98:	3301      	adds	r3, #1
    ed9a:	492c      	ldr	r1, [pc, #176]	; (ee4c <_svfprintf_r+0x10bc>)
    ed9c:	3210      	adds	r2, #16
    ed9e:	2b07      	cmp	r3, #7
    eda0:	e9c0 1a00 	strd	r1, sl, [r0]
    eda4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eda8:	ddf1      	ble.n	ed8e <_svfprintf_r+0xffe>
    edaa:	aa24      	add	r2, sp, #144	; 0x90
    edac:	4629      	mov	r1, r5
    edae:	4658      	mov	r0, fp
    edb0:	f001 fef6 	bl	10ba0 <__ssprint_r>
    edb4:	2800      	cmp	r0, #0
    edb6:	f47f ac50 	bne.w	e65a <_svfprintf_r+0x8ca>
    edba:	3c10      	subs	r4, #16
    edbc:	2c10      	cmp	r4, #16
    edbe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    edc2:	a827      	add	r0, sp, #156	; 0x9c
    edc4:	dce8      	bgt.n	ed98 <_svfprintf_r+0x1008>
    edc6:	4629      	mov	r1, r5
    edc8:	9d05      	ldr	r5, [sp, #20]
    edca:	469c      	mov	ip, r3
    edcc:	f10c 0301 	add.w	r3, ip, #1
    edd0:	4422      	add	r2, r4
    edd2:	6044      	str	r4, [r0, #4]
    edd4:	2b07      	cmp	r3, #7
    edd6:	4c1d      	ldr	r4, [pc, #116]	; (ee4c <_svfprintf_r+0x10bc>)
    edd8:	6004      	str	r4, [r0, #0]
    edda:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    edde:	f300 83c6 	bgt.w	f56e <_svfprintf_r+0x17de>
    ede2:	f896 c000 	ldrb.w	ip, [r6]
    ede6:	3008      	adds	r0, #8
    ede8:	4465      	add	r5, ip
    edea:	e7bc      	b.n	ed66 <_svfprintf_r+0xfd6>
    edec:	f018 0310 	ands.w	r3, r8, #16
    edf0:	f000 80c2 	beq.w	ef78 <_svfprintf_r+0x11e8>
    edf4:	9b08      	ldr	r3, [sp, #32]
    edf6:	f853 2b04 	ldr.w	r2, [r3], #4
    edfa:	9308      	str	r3, [sp, #32]
    edfc:	e6f9      	b.n	ebf2 <_svfprintf_r+0xe62>
    edfe:	aa24      	add	r2, sp, #144	; 0x90
    ee00:	4658      	mov	r0, fp
    ee02:	9105      	str	r1, [sp, #20]
    ee04:	f001 fecc 	bl	10ba0 <__ssprint_r>
    ee08:	2800      	cmp	r0, #0
    ee0a:	f47f ac26 	bne.w	e65a <_svfprintf_r+0x8ca>
    ee0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ee10:	9905      	ldr	r1, [sp, #20]
    ee12:	a827      	add	r0, sp, #156	; 0x9c
    ee14:	e787      	b.n	ed26 <_svfprintf_r+0xf96>
    ee16:	9802      	ldr	r0, [sp, #8]
    ee18:	f8cd a01c 	str.w	sl, [sp, #28]
    ee1c:	ac50      	add	r4, sp, #320	; 0x140
    ee1e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    ee22:	2500      	movs	r5, #0
    ee24:	ee0a ba10 	vmov	s20, fp
    ee28:	4b09      	ldr	r3, [pc, #36]	; (ee50 <_svfprintf_r+0x10c0>)
    ee2a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    ee2e:	f8cd 9014 	str.w	r9, [sp, #20]
    ee32:	46a3      	mov	fp, r4
    ee34:	f04f 0805 	mov.w	r8, #5
    ee38:	46ac      	mov	ip, r5
    ee3a:	4604      	mov	r4, r0
    ee3c:	e010      	b.n	ee60 <_svfprintf_r+0x10d0>
    ee3e:	bf00      	nop
    ee40:	20000c7c 	.word	0x20000c7c
    ee44:	20000c90 	.word	0x20000c90
    ee48:	20000ca4 	.word	0x20000ca4
    ee4c:	200011f4 	.word	0x200011f4
    ee50:	cccccccd 	.word	0xcccccccd
    ee54:	2a0a      	cmp	r2, #10
    ee56:	f171 0100 	sbcs.w	r1, r1, #0
    ee5a:	d336      	bcc.n	eeca <_svfprintf_r+0x113a>
    ee5c:	464a      	mov	r2, r9
    ee5e:	4631      	mov	r1, r6
    ee60:	1850      	adds	r0, r2, r1
    ee62:	f140 0000 	adc.w	r0, r0, #0
    ee66:	fba3 5600 	umull	r5, r6, r3, r0
    ee6a:	f026 0503 	bic.w	r5, r6, #3
    ee6e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    ee72:	1b40      	subs	r0, r0, r5
    ee74:	1a15      	subs	r5, r2, r0
    ee76:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    ee7a:	f161 0e00 	sbc.w	lr, r1, #0
    ee7e:	fb06 f605 	mul.w	r6, r6, r5
    ee82:	fba5 9503 	umull	r9, r5, r5, r3
    ee86:	fb03 660e 	mla	r6, r3, lr, r6
    ee8a:	f009 0e01 	and.w	lr, r9, #1
    ee8e:	442e      	add	r6, r5
    ee90:	fbae 5e08 	umull	r5, lr, lr, r8
    ee94:	182d      	adds	r5, r5, r0
    ee96:	ea4f 0959 	mov.w	r9, r9, lsr #1
    ee9a:	3530      	adds	r5, #48	; 0x30
    ee9c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    eea0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    eea4:	f10c 0c01 	add.w	ip, ip, #1
    eea8:	f10b 3bff 	add.w	fp, fp, #4294967295
    eeac:	0876      	lsrs	r6, r6, #1
    eeae:	2c00      	cmp	r4, #0
    eeb0:	d0d0      	beq.n	ee54 <_svfprintf_r+0x10c4>
    eeb2:	f89a 0000 	ldrb.w	r0, [sl]
    eeb6:	4584      	cmp	ip, r0
    eeb8:	d1cc      	bne.n	ee54 <_svfprintf_r+0x10c4>
    eeba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    eebe:	d0c9      	beq.n	ee54 <_svfprintf_r+0x10c4>
    eec0:	2a0a      	cmp	r2, #10
    eec2:	f171 0100 	sbcs.w	r1, r1, #0
    eec6:	f080 818f 	bcs.w	f1e8 <_svfprintf_r+0x1458>
    eeca:	465c      	mov	r4, fp
    eecc:	ab50      	add	r3, sp, #320	; 0x140
    eece:	1b1b      	subs	r3, r3, r4
    eed0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    eed4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    eed8:	ee1a ba10 	vmov	fp, s20
    eedc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    eee0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    eee4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    eee8:	9305      	str	r3, [sp, #20]
    eeea:	f7ff bac2 	b.w	e472 <_svfprintf_r+0x6e2>
    eeee:	ee1b 1a10 	vmov	r1, s22
    eef2:	aa24      	add	r2, sp, #144	; 0x90
    eef4:	4658      	mov	r0, fp
    eef6:	f001 fe53 	bl	10ba0 <__ssprint_r>
    eefa:	2800      	cmp	r0, #0
    eefc:	f47f abad 	bne.w	e65a <_svfprintf_r+0x8ca>
    ef00:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ef04:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef06:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ef0a:	f7ff b896 	b.w	e03a <_svfprintf_r+0x2aa>
    ef0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef10:	48be      	ldr	r0, [pc, #760]	; (f20c <_svfprintf_r+0x147c>)
    ef12:	f8ca 0000 	str.w	r0, [sl]
    ef16:	3301      	adds	r3, #1
    ef18:	3201      	adds	r2, #1
    ef1a:	2001      	movs	r0, #1
    ef1c:	2b07      	cmp	r3, #7
    ef1e:	9226      	str	r2, [sp, #152]	; 0x98
    ef20:	9325      	str	r3, [sp, #148]	; 0x94
    ef22:	f8ca 0004 	str.w	r0, [sl, #4]
    ef26:	f300 8177 	bgt.w	f218 <_svfprintf_r+0x1488>
    ef2a:	f10a 0a08 	add.w	sl, sl, #8
    ef2e:	2900      	cmp	r1, #0
    ef30:	f040 80af 	bne.w	f092 <_svfprintf_r+0x1302>
    ef34:	990e      	ldr	r1, [sp, #56]	; 0x38
    ef36:	f008 0301 	and.w	r3, r8, #1
    ef3a:	430b      	orrs	r3, r1
    ef3c:	f43f a8c0 	beq.w	e0c0 <_svfprintf_r+0x330>
    ef40:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ef42:	9912      	ldr	r1, [sp, #72]	; 0x48
    ef44:	441a      	add	r2, r3
    ef46:	e9ca 1300 	strd	r1, r3, [sl]
    ef4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef4c:	9226      	str	r2, [sp, #152]	; 0x98
    ef4e:	3301      	adds	r3, #1
    ef50:	2b07      	cmp	r3, #7
    ef52:	9325      	str	r3, [sp, #148]	; 0x94
    ef54:	f300 8252 	bgt.w	f3fc <_svfprintf_r+0x166c>
    ef58:	f10a 0a08 	add.w	sl, sl, #8
    ef5c:	990e      	ldr	r1, [sp, #56]	; 0x38
    ef5e:	f8ca 4000 	str.w	r4, [sl]
    ef62:	3301      	adds	r3, #1
    ef64:	440a      	add	r2, r1
    ef66:	2b07      	cmp	r3, #7
    ef68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ef6c:	f8ca 1004 	str.w	r1, [sl, #4]
    ef70:	f77f a8a4 	ble.w	e0bc <_svfprintf_r+0x32c>
    ef74:	f7ff bbbd 	b.w	e6f2 <_svfprintf_r+0x962>
    ef78:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ef7c:	f000 80dd 	beq.w	f13a <_svfprintf_r+0x13aa>
    ef80:	9808      	ldr	r0, [sp, #32]
    ef82:	f850 2b04 	ldr.w	r2, [r0], #4
    ef86:	9008      	str	r0, [sp, #32]
    ef88:	4619      	mov	r1, r3
    ef8a:	b292      	uxth	r2, r2
    ef8c:	e631      	b.n	ebf2 <_svfprintf_r+0xe62>
    ef8e:	ee1b 1a10 	vmov	r1, s22
    ef92:	aa24      	add	r2, sp, #144	; 0x90
    ef94:	4658      	mov	r0, fp
    ef96:	f001 fe03 	bl	10ba0 <__ssprint_r>
    ef9a:	2800      	cmp	r0, #0
    ef9c:	f47f ab5d 	bne.w	e65a <_svfprintf_r+0x8ca>
    efa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    efa2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    efa6:	f7ff baa3 	b.w	e4f0 <_svfprintf_r+0x760>
    efaa:	ae22      	add	r6, sp, #136	; 0x88
    efac:	2208      	movs	r2, #8
    efae:	2100      	movs	r1, #0
    efb0:	4630      	mov	r0, r6
    efb2:	941d      	str	r4, [sp, #116]	; 0x74
    efb4:	f7fd fda2 	bl	cafc <memset>
    efb8:	9b03      	ldr	r3, [sp, #12]
    efba:	1c5a      	adds	r2, r3, #1
    efbc:	f000 80db 	beq.w	f176 <_svfprintf_r+0x13e6>
    efc0:	2500      	movs	r5, #0
    efc2:	f8cd 9008 	str.w	r9, [sp, #8]
    efc6:	f8cd 801c 	str.w	r8, [sp, #28]
    efca:	4699      	mov	r9, r3
    efcc:	46a8      	mov	r8, r5
    efce:	e00c      	b.n	efea <_svfprintf_r+0x125a>
    efd0:	a937      	add	r1, sp, #220	; 0xdc
    efd2:	4658      	mov	r0, fp
    efd4:	f001 fd9e 	bl	10b14 <_wcrtomb_r>
    efd8:	1c43      	adds	r3, r0, #1
    efda:	4440      	add	r0, r8
    efdc:	f000 83c8 	beq.w	f770 <_svfprintf_r+0x19e0>
    efe0:	4548      	cmp	r0, r9
    efe2:	dc08      	bgt.n	eff6 <_svfprintf_r+0x1266>
    efe4:	f000 8418 	beq.w	f818 <_svfprintf_r+0x1a88>
    efe8:	4680      	mov	r8, r0
    efea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    efec:	5952      	ldr	r2, [r2, r5]
    efee:	4633      	mov	r3, r6
    eff0:	3504      	adds	r5, #4
    eff2:	2a00      	cmp	r2, #0
    eff4:	d1ec      	bne.n	efd0 <_svfprintf_r+0x1240>
    eff6:	f8cd 8014 	str.w	r8, [sp, #20]
    effa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    effe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f002:	e0c5      	b.n	f190 <_svfprintf_r+0x1400>
    f004:	3301      	adds	r3, #1
    f006:	4982      	ldr	r1, [pc, #520]	; (f210 <_svfprintf_r+0x1480>)
    f008:	f8ca 4004 	str.w	r4, [sl, #4]
    f00c:	4422      	add	r2, r4
    f00e:	2b07      	cmp	r3, #7
    f010:	f8ca 1000 	str.w	r1, [sl]
    f014:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f018:	f77f a850 	ble.w	e0bc <_svfprintf_r+0x32c>
    f01c:	f7ff bb69 	b.w	e6f2 <_svfprintf_r+0x962>
    f020:	ee1b 1a10 	vmov	r1, s22
    f024:	aa24      	add	r2, sp, #144	; 0x90
    f026:	4658      	mov	r0, fp
    f028:	f001 fdba 	bl	10ba0 <__ssprint_r>
    f02c:	2800      	cmp	r0, #0
    f02e:	f47f ab14 	bne.w	e65a <_svfprintf_r+0x8ca>
    f032:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f034:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f038:	f7ff b829 	b.w	e08e <_svfprintf_r+0x2fe>
    f03c:	aa24      	add	r2, sp, #144	; 0x90
    f03e:	4658      	mov	r0, fp
    f040:	9105      	str	r1, [sp, #20]
    f042:	f001 fdad 	bl	10ba0 <__ssprint_r>
    f046:	2800      	cmp	r0, #0
    f048:	f47f ab07 	bne.w	e65a <_svfprintf_r+0x8ca>
    f04c:	f896 c000 	ldrb.w	ip, [r6]
    f050:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f052:	9905      	ldr	r1, [sp, #20]
    f054:	a827      	add	r0, sp, #156	; 0x9c
    f056:	e67d      	b.n	ed54 <_svfprintf_r+0xfc4>
    f058:	2b01      	cmp	r3, #1
    f05a:	f8cd 8008 	str.w	r8, [sp, #8]
    f05e:	f47f a9f3 	bne.w	e448 <_svfprintf_r+0x6b8>
    f062:	f7ff bb93 	b.w	e78c <_svfprintf_r+0x9fc>
    f066:	9b08      	ldr	r3, [sp, #32]
    f068:	9904      	ldr	r1, [sp, #16]
    f06a:	f853 2b04 	ldr.w	r2, [r3], #4
    f06e:	464c      	mov	r4, r9
    f070:	6011      	str	r1, [r2, #0]
    f072:	9308      	str	r3, [sp, #32]
    f074:	f7fe bebe 	b.w	ddf4 <_svfprintf_r+0x64>
    f078:	3301      	adds	r3, #1
    f07a:	4965      	ldr	r1, [pc, #404]	; (f210 <_svfprintf_r+0x1480>)
    f07c:	f8ca 4004 	str.w	r4, [sl, #4]
    f080:	4422      	add	r2, r4
    f082:	2b07      	cmp	r3, #7
    f084:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f088:	f8ca 1000 	str.w	r1, [sl]
    f08c:	f77f ab22 	ble.w	e6d4 <_svfprintf_r+0x944>
    f090:	e47b      	b.n	e98a <_svfprintf_r+0xbfa>
    f092:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f094:	9812      	ldr	r0, [sp, #72]	; 0x48
    f096:	441a      	add	r2, r3
    f098:	e9ca 0300 	strd	r0, r3, [sl]
    f09c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f09e:	9226      	str	r2, [sp, #152]	; 0x98
    f0a0:	3301      	adds	r3, #1
    f0a2:	2b07      	cmp	r3, #7
    f0a4:	9325      	str	r3, [sp, #148]	; 0x94
    f0a6:	f300 81a9 	bgt.w	f3fc <_svfprintf_r+0x166c>
    f0aa:	f10a 0a08 	add.w	sl, sl, #8
    f0ae:	2900      	cmp	r1, #0
    f0b0:	f6bf af54 	bge.w	ef5c <_svfprintf_r+0x11cc>
    f0b4:	424d      	negs	r5, r1
    f0b6:	3110      	adds	r1, #16
    f0b8:	f280 830f 	bge.w	f6da <_svfprintf_r+0x194a>
    f0bc:	ee1b 1a10 	vmov	r1, s22
    f0c0:	2610      	movs	r6, #16
    f0c2:	e005      	b.n	f0d0 <_svfprintf_r+0x1340>
    f0c4:	f10a 0a08 	add.w	sl, sl, #8
    f0c8:	3d10      	subs	r5, #16
    f0ca:	2d10      	cmp	r5, #16
    f0cc:	f340 8305 	ble.w	f6da <_svfprintf_r+0x194a>
    f0d0:	3301      	adds	r3, #1
    f0d2:	484f      	ldr	r0, [pc, #316]	; (f210 <_svfprintf_r+0x1480>)
    f0d4:	3210      	adds	r2, #16
    f0d6:	2b07      	cmp	r3, #7
    f0d8:	e9ca 0600 	strd	r0, r6, [sl]
    f0dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f0e0:	ddf0      	ble.n	f0c4 <_svfprintf_r+0x1334>
    f0e2:	aa24      	add	r2, sp, #144	; 0x90
    f0e4:	4658      	mov	r0, fp
    f0e6:	9103      	str	r1, [sp, #12]
    f0e8:	f001 fd5a 	bl	10ba0 <__ssprint_r>
    f0ec:	2800      	cmp	r0, #0
    f0ee:	f47f aab4 	bne.w	e65a <_svfprintf_r+0x8ca>
    f0f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f0f6:	9903      	ldr	r1, [sp, #12]
    f0f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0fc:	e7e4      	b.n	f0c8 <_svfprintf_r+0x1338>
    f0fe:	9b08      	ldr	r3, [sp, #32]
    f100:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f104:	bf1a      	itte	ne
    f106:	4611      	movne	r1, r2
    f108:	f853 2b04 	ldrne.w	r2, [r3], #4
    f10c:	f853 2b04 	ldreq.w	r2, [r3], #4
    f110:	9308      	str	r3, [sp, #32]
    f112:	bf18      	it	ne
    f114:	b2d2      	uxtbne	r2, r2
    f116:	f7ff b945 	b.w	e3a4 <_svfprintf_r+0x614>
    f11a:	9b02      	ldr	r3, [sp, #8]
    f11c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    f120:	9b08      	ldr	r3, [sp, #32]
    f122:	bf1a      	itte	ne
    f124:	4611      	movne	r1, r2
    f126:	f853 2b04 	ldrne.w	r2, [r3], #4
    f12a:	f853 2b04 	ldreq.w	r2, [r3], #4
    f12e:	9308      	str	r3, [sp, #32]
    f130:	bf18      	it	ne
    f132:	b2d2      	uxtbne	r2, r2
    f134:	2301      	movs	r3, #1
    f136:	f7ff b8d0 	b.w	e2da <_svfprintf_r+0x54a>
    f13a:	9b08      	ldr	r3, [sp, #32]
    f13c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f140:	bf1a      	itte	ne
    f142:	4611      	movne	r1, r2
    f144:	f853 2b04 	ldrne.w	r2, [r3], #4
    f148:	f853 2b04 	ldreq.w	r2, [r3], #4
    f14c:	9308      	str	r3, [sp, #32]
    f14e:	bf18      	it	ne
    f150:	b2d2      	uxtbne	r2, r2
    f152:	e54e      	b.n	ebf2 <_svfprintf_r+0xe62>
    f154:	468a      	mov	sl, r1
    f156:	3301      	adds	r3, #1
    f158:	492d      	ldr	r1, [pc, #180]	; (f210 <_svfprintf_r+0x1480>)
    f15a:	f8ca 5004 	str.w	r5, [sl, #4]
    f15e:	442a      	add	r2, r5
    f160:	2b07      	cmp	r3, #7
    f162:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f166:	f8ca 1000 	str.w	r1, [sl]
    f16a:	f300 8139 	bgt.w	f3e0 <_svfprintf_r+0x1650>
    f16e:	f10a 0a08 	add.w	sl, sl, #8
    f172:	f7ff bb8c 	b.w	e88e <_svfprintf_r+0xafe>
    f176:	2300      	movs	r3, #0
    f178:	4619      	mov	r1, r3
    f17a:	9600      	str	r6, [sp, #0]
    f17c:	aa1d      	add	r2, sp, #116	; 0x74
    f17e:	4658      	mov	r0, fp
    f180:	f001 fcee 	bl	10b60 <_wcsrtombs_r>
    f184:	4603      	mov	r3, r0
    f186:	3301      	adds	r3, #1
    f188:	9005      	str	r0, [sp, #20]
    f18a:	f000 82f1 	beq.w	f770 <_svfprintf_r+0x19e0>
    f18e:	941d      	str	r4, [sp, #116]	; 0x74
    f190:	9b05      	ldr	r3, [sp, #20]
    f192:	2b00      	cmp	r3, #0
    f194:	d04e      	beq.n	f234 <_svfprintf_r+0x14a4>
    f196:	2b63      	cmp	r3, #99	; 0x63
    f198:	f300 8118 	bgt.w	f3cc <_svfprintf_r+0x163c>
    f19c:	2300      	movs	r3, #0
    f19e:	9307      	str	r3, [sp, #28]
    f1a0:	ac37      	add	r4, sp, #220	; 0xdc
    f1a2:	2208      	movs	r2, #8
    f1a4:	2100      	movs	r1, #0
    f1a6:	4630      	mov	r0, r6
    f1a8:	f7fd fca8 	bl	cafc <memset>
    f1ac:	9d05      	ldr	r5, [sp, #20]
    f1ae:	9600      	str	r6, [sp, #0]
    f1b0:	462b      	mov	r3, r5
    f1b2:	aa1d      	add	r2, sp, #116	; 0x74
    f1b4:	4621      	mov	r1, r4
    f1b6:	4658      	mov	r0, fp
    f1b8:	f001 fcd2 	bl	10b60 <_wcsrtombs_r>
    f1bc:	4285      	cmp	r5, r0
    f1be:	f040 837c 	bne.w	f8ba <_svfprintf_r+0x1b2a>
    f1c2:	9a05      	ldr	r2, [sp, #20]
    f1c4:	2300      	movs	r3, #0
    f1c6:	54a3      	strb	r3, [r4, r2]
    f1c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f1cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f1d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f1d4:	9303      	str	r3, [sp, #12]
    f1d6:	9202      	str	r2, [sp, #8]
    f1d8:	930f      	str	r3, [sp, #60]	; 0x3c
    f1da:	f7fe bfba 	b.w	e152 <_svfprintf_r+0x3c2>
    f1de:	212d      	movs	r1, #45	; 0x2d
    f1e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f1e4:	f7fe bfa4 	b.w	e130 <_svfprintf_r+0x3a0>
    f1e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f1ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    f1ec:	ebab 0b03 	sub.w	fp, fp, r3
    f1f0:	461a      	mov	r2, r3
    f1f2:	4658      	mov	r0, fp
    f1f4:	f7fd fd3a 	bl	cc6c <strncpy>
    f1f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    f1fc:	4b05      	ldr	r3, [pc, #20]	; (f214 <_svfprintf_r+0x1484>)
    f1fe:	b10a      	cbz	r2, f204 <_svfprintf_r+0x1474>
    f200:	f10a 0a01 	add.w	sl, sl, #1
    f204:	f04f 0c00 	mov.w	ip, #0
    f208:	e628      	b.n	ee5c <_svfprintf_r+0x10cc>
    f20a:	bf00      	nop
    f20c:	20000cac 	.word	0x20000cac
    f210:	200011f4 	.word	0x200011f4
    f214:	cccccccd 	.word	0xcccccccd
    f218:	ee1b 1a10 	vmov	r1, s22
    f21c:	aa24      	add	r2, sp, #144	; 0x90
    f21e:	4658      	mov	r0, fp
    f220:	f001 fcbe 	bl	10ba0 <__ssprint_r>
    f224:	2800      	cmp	r0, #0
    f226:	f47f aa18 	bne.w	e65a <_svfprintf_r+0x8ca>
    f22a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f22c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f22e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f232:	e67c      	b.n	ef2e <_svfprintf_r+0x119e>
    f234:	9b05      	ldr	r3, [sp, #20]
    f236:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f23a:	930f      	str	r3, [sp, #60]	; 0x3c
    f23c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    f240:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f244:	9307      	str	r3, [sp, #28]
    f246:	f7fe bf84 	b.w	e152 <_svfprintf_r+0x3c2>
    f24a:	990e      	ldr	r1, [sp, #56]	; 0x38
    f24c:	9805      	ldr	r0, [sp, #20]
    f24e:	1865      	adds	r5, r4, r1
    f250:	1a2d      	subs	r5, r5, r0
    f252:	1acc      	subs	r4, r1, r3
    f254:	42a5      	cmp	r5, r4
    f256:	bfa8      	it	ge
    f258:	4625      	movge	r5, r4
    f25a:	f7ff bb4d 	b.w	e8f8 <_svfprintf_r+0xb68>
    f25e:	9b08      	ldr	r3, [sp, #32]
    f260:	9904      	ldr	r1, [sp, #16]
    f262:	f853 2b04 	ldr.w	r2, [r3], #4
    f266:	9308      	str	r3, [sp, #32]
    f268:	8011      	strh	r1, [r2, #0]
    f26a:	464c      	mov	r4, r9
    f26c:	f7fe bdc2 	b.w	ddf4 <_svfprintf_r+0x64>
    f270:	f913 2b04 	ldrsb.w	r2, [r3], #4
    f274:	9308      	str	r3, [sp, #32]
    f276:	17d1      	asrs	r1, r2, #31
    f278:	460b      	mov	r3, r1
    f27a:	f7fe bfdb 	b.w	e234 <_svfprintf_r+0x4a4>
    f27e:	9a03      	ldr	r2, [sp, #12]
    f280:	2102      	movs	r1, #2
    f282:	ab22      	add	r3, sp, #136	; 0x88
    f284:	9301      	str	r3, [sp, #4]
    f286:	ab1d      	add	r3, sp, #116	; 0x74
    f288:	9300      	str	r3, [sp, #0]
    f28a:	4658      	mov	r0, fp
    f28c:	ab1b      	add	r3, sp, #108	; 0x6c
    f28e:	eeb0 0b4a 	vmov.f64	d0, d10
    f292:	9202      	str	r2, [sp, #8]
    f294:	f000 fdc8 	bl	fe28 <_dtoa_r>
    f298:	2d47      	cmp	r5, #71	; 0x47
    f29a:	9a02      	ldr	r2, [sp, #8]
    f29c:	4604      	mov	r4, r0
    f29e:	f000 8161 	beq.w	f564 <_svfprintf_r+0x17d4>
    f2a2:	2d46      	cmp	r5, #70	; 0x46
    f2a4:	4410      	add	r0, r2
    f2a6:	d105      	bne.n	f2b4 <_svfprintf_r+0x1524>
    f2a8:	7823      	ldrb	r3, [r4, #0]
    f2aa:	2b30      	cmp	r3, #48	; 0x30
    f2ac:	f000 826f 	beq.w	f78e <_svfprintf_r+0x19fe>
    f2b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f2b2:	4410      	add	r0, r2
    f2b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2bc:	f040 8146 	bne.w	f54c <_svfprintf_r+0x17bc>
    f2c0:	4603      	mov	r3, r0
    f2c2:	1b1b      	subs	r3, r3, r4
    f2c4:	930e      	str	r3, [sp, #56]	; 0x38
    f2c6:	2d47      	cmp	r5, #71	; 0x47
    f2c8:	f000 8110 	beq.w	f4ec <_svfprintf_r+0x175c>
    f2cc:	2d46      	cmp	r5, #70	; 0x46
    f2ce:	f000 81b5 	beq.w	f63c <_svfprintf_r+0x18ac>
    f2d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f2d4:	930c      	str	r3, [sp, #48]	; 0x30
    f2d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f2d8:	2d41      	cmp	r5, #65	; 0x41
    f2da:	f103 33ff 	add.w	r3, r3, #4294967295
    f2de:	931b      	str	r3, [sp, #108]	; 0x6c
    f2e0:	f000 81e5 	beq.w	f6ae <_svfprintf_r+0x191e>
    f2e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    f2e8:	2100      	movs	r1, #0
    f2ea:	2b00      	cmp	r3, #0
    f2ec:	bfb8      	it	lt
    f2ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    f2f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    f2f4:	bfba      	itte	lt
    f2f6:	f1c3 0301 	rsblt	r3, r3, #1
    f2fa:	222d      	movlt	r2, #45	; 0x2d
    f2fc:	222b      	movge	r2, #43	; 0x2b
    f2fe:	2b09      	cmp	r3, #9
    f300:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    f304:	f340 81da 	ble.w	f6bc <_svfprintf_r+0x192c>
    f308:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    f30c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f72c <_svfprintf_r+0x199c>
    f310:	462a      	mov	r2, r5
    f312:	4610      	mov	r0, r2
    f314:	fb8c 2103 	smull	r2, r1, ip, r3
    f318:	17da      	asrs	r2, r3, #31
    f31a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    f31e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    f322:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    f326:	3130      	adds	r1, #48	; 0x30
    f328:	f800 1c01 	strb.w	r1, [r0, #-1]
    f32c:	4619      	mov	r1, r3
    f32e:	2963      	cmp	r1, #99	; 0x63
    f330:	4613      	mov	r3, r2
    f332:	f100 32ff 	add.w	r2, r0, #4294967295
    f336:	dcec      	bgt.n	f312 <_svfprintf_r+0x1582>
    f338:	3330      	adds	r3, #48	; 0x30
    f33a:	b2d9      	uxtb	r1, r3
    f33c:	1e83      	subs	r3, r0, #2
    f33e:	429d      	cmp	r5, r3
    f340:	f802 1c01 	strb.w	r1, [r2, #-1]
    f344:	f240 828b 	bls.w	f85e <_svfprintf_r+0x1ace>
    f348:	4613      	mov	r3, r2
    f34a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f34e:	e001      	b.n	f354 <_svfprintf_r+0x15c4>
    f350:	f813 1b01 	ldrb.w	r1, [r3], #1
    f354:	f802 1b01 	strb.w	r1, [r2], #1
    f358:	429d      	cmp	r5, r3
    f35a:	d1f9      	bne.n	f350 <_svfprintf_r+0x15c0>
    f35c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    f360:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f364:	1a1b      	subs	r3, r3, r0
    f366:	4413      	add	r3, r2
    f368:	aa1e      	add	r2, sp, #120	; 0x78
    f36a:	1a9b      	subs	r3, r3, r2
    f36c:	9314      	str	r3, [sp, #80]	; 0x50
    f36e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f370:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f372:	2b01      	cmp	r3, #1
    f374:	441a      	add	r2, r3
    f376:	9205      	str	r2, [sp, #20]
    f378:	f340 8203 	ble.w	f782 <_svfprintf_r+0x19f2>
    f37c:	9b05      	ldr	r3, [sp, #20]
    f37e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f380:	4413      	add	r3, r2
    f382:	9305      	str	r3, [sp, #20]
    f384:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    f388:	9a05      	ldr	r2, [sp, #20]
    f38a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    f38e:	2300      	movs	r3, #0
    f390:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f394:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f398:	930f      	str	r3, [sp, #60]	; 0x3c
    f39a:	9202      	str	r2, [sp, #8]
    f39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f39e:	2b00      	cmp	r3, #0
    f3a0:	f040 80b1 	bne.w	f506 <_svfprintf_r+0x1776>
    f3a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f3a8:	9303      	str	r3, [sp, #12]
    f3aa:	f7fe bed2 	b.w	e152 <_svfprintf_r+0x3c2>
    f3ae:	4620      	mov	r0, r4
    f3b0:	f7fd ff06 	bl	d1c0 <strlen>
    f3b4:	4602      	mov	r2, r0
    f3b6:	9005      	str	r0, [sp, #20]
    f3b8:	f7fe bf20 	b.w	e1fc <_svfprintf_r+0x46c>
    f3bc:	ee1b 1a10 	vmov	r1, s22
    f3c0:	aa24      	add	r2, sp, #144	; 0x90
    f3c2:	4658      	mov	r0, fp
    f3c4:	f001 fbec 	bl	10ba0 <__ssprint_r>
    f3c8:	f7fe bded 	b.w	dfa6 <_svfprintf_r+0x216>
    f3cc:	1c59      	adds	r1, r3, #1
    f3ce:	4658      	mov	r0, fp
    f3d0:	f7fc fb9c 	bl	bb0c <_malloc_r>
    f3d4:	4604      	mov	r4, r0
    f3d6:	2800      	cmp	r0, #0
    f3d8:	f000 81ca 	beq.w	f770 <_svfprintf_r+0x19e0>
    f3dc:	9007      	str	r0, [sp, #28]
    f3de:	e6e0      	b.n	f1a2 <_svfprintf_r+0x1412>
    f3e0:	ee1b 1a10 	vmov	r1, s22
    f3e4:	aa24      	add	r2, sp, #144	; 0x90
    f3e6:	4658      	mov	r0, fp
    f3e8:	f001 fbda 	bl	10ba0 <__ssprint_r>
    f3ec:	2800      	cmp	r0, #0
    f3ee:	f47f a934 	bne.w	e65a <_svfprintf_r+0x8ca>
    f3f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f3f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f3f8:	f7ff ba49 	b.w	e88e <_svfprintf_r+0xafe>
    f3fc:	ee1b 1a10 	vmov	r1, s22
    f400:	aa24      	add	r2, sp, #144	; 0x90
    f402:	4658      	mov	r0, fp
    f404:	f001 fbcc 	bl	10ba0 <__ssprint_r>
    f408:	2800      	cmp	r0, #0
    f40a:	f47f a926 	bne.w	e65a <_svfprintf_r+0x8ca>
    f40e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f412:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f414:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f418:	e649      	b.n	f0ae <_svfprintf_r+0x131e>
    f41a:	2306      	movs	r3, #6
    f41c:	9303      	str	r3, [sp, #12]
    f41e:	f7ff bb83 	b.w	eb28 <_svfprintf_r+0xd98>
    f422:	9b03      	ldr	r3, [sp, #12]
    f424:	2102      	movs	r1, #2
    f426:	1c5a      	adds	r2, r3, #1
    f428:	e72b      	b.n	f282 <_svfprintf_r+0x14f2>
    f42a:	9a03      	ldr	r2, [sp, #12]
    f42c:	2103      	movs	r1, #3
    f42e:	e728      	b.n	f282 <_svfprintf_r+0x14f2>
    f430:	a81b      	add	r0, sp, #108	; 0x6c
    f432:	eeb0 0b4a 	vmov.f64	d0, d10
    f436:	f000 fbcb 	bl	fbd0 <frexp>
    f43a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f43e:	ee20 0b07 	vmul.f64	d0, d0, d7
    f442:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f44a:	d101      	bne.n	f450 <_svfprintf_r+0x16c0>
    f44c:	2301      	movs	r3, #1
    f44e:	931b      	str	r3, [sp, #108]	; 0x6c
    f450:	48b3      	ldr	r0, [pc, #716]	; (f720 <_svfprintf_r+0x1990>)
    f452:	9b03      	ldr	r3, [sp, #12]
    f454:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    f458:	3b01      	subs	r3, #1
    f45a:	4622      	mov	r2, r4
    f45c:	e004      	b.n	f468 <_svfprintf_r+0x16d8>
    f45e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f466:	d013      	beq.n	f490 <_svfprintf_r+0x1700>
    f468:	ee20 0b05 	vmul.f64	d0, d0, d5
    f46c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f470:	f1b3 3fff 	cmp.w	r3, #4294967295
    f474:	ee17 1a90 	vmov	r1, s15
    f478:	5c41      	ldrb	r1, [r0, r1]
    f47a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    f47e:	4694      	mov	ip, r2
    f480:	ee30 0b46 	vsub.f64	d0, d0, d6
    f484:	f802 1b01 	strb.w	r1, [r2], #1
    f488:	4619      	mov	r1, r3
    f48a:	f103 33ff 	add.w	r3, r3, #4294967295
    f48e:	d1e6      	bne.n	f45e <_svfprintf_r+0x16ce>
    f490:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f494:	eeb4 0bc6 	vcmpe.f64	d0, d6
    f498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f49c:	f300 8148 	bgt.w	f730 <_svfprintf_r+0x19a0>
    f4a0:	eeb4 0b46 	vcmp.f64	d0, d6
    f4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4a8:	d104      	bne.n	f4b4 <_svfprintf_r+0x1724>
    f4aa:	ee17 3a90 	vmov	r3, s15
    f4ae:	07db      	lsls	r3, r3, #31
    f4b0:	f100 813e 	bmi.w	f730 <_svfprintf_r+0x19a0>
    f4b4:	2900      	cmp	r1, #0
    f4b6:	db06      	blt.n	f4c6 <_svfprintf_r+0x1736>
    f4b8:	1c4b      	adds	r3, r1, #1
    f4ba:	4413      	add	r3, r2
    f4bc:	2130      	movs	r1, #48	; 0x30
    f4be:	f802 1b01 	strb.w	r1, [r2], #1
    f4c2:	4293      	cmp	r3, r2
    f4c4:	d1fb      	bne.n	f4be <_svfprintf_r+0x172e>
    f4c6:	1b13      	subs	r3, r2, r4
    f4c8:	930e      	str	r3, [sp, #56]	; 0x38
    f4ca:	e6fc      	b.n	f2c6 <_svfprintf_r+0x1536>
    f4cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    f4d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f4d8:	9613      	str	r6, [sp, #76]	; 0x4c
    f4da:	18e3      	adds	r3, r4, r3
    f4dc:	429d      	cmp	r5, r3
    f4de:	4629      	mov	r1, r5
    f4e0:	bf28      	it	cs
    f4e2:	4619      	movcs	r1, r3
    f4e4:	4682      	mov	sl, r0
    f4e6:	9105      	str	r1, [sp, #20]
    f4e8:	f7ff b9d8 	b.w	e89c <_svfprintf_r+0xb0c>
    f4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f4ee:	930c      	str	r3, [sp, #48]	; 0x30
    f4f0:	1cda      	adds	r2, r3, #3
    f4f2:	db02      	blt.n	f4fa <_svfprintf_r+0x176a>
    f4f4:	9a03      	ldr	r2, [sp, #12]
    f4f6:	4293      	cmp	r3, r2
    f4f8:	dd0c      	ble.n	f514 <_svfprintf_r+0x1784>
    f4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4fc:	3b02      	subs	r3, #2
    f4fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f500:	f023 0520 	bic.w	r5, r3, #32
    f504:	e6e7      	b.n	f2d6 <_svfprintf_r+0x1546>
    f506:	212d      	movs	r1, #45	; 0x2d
    f508:	2300      	movs	r3, #0
    f50a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f50e:	9303      	str	r3, [sp, #12]
    f510:	f7fe be22 	b.w	e158 <_svfprintf_r+0x3c8>
    f514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f518:	4293      	cmp	r3, r2
    f51a:	f2c0 80bd 	blt.w	f698 <_svfprintf_r+0x1908>
    f51e:	07f0      	lsls	r0, r6, #31
    f520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f522:	f140 8132 	bpl.w	f78a <_svfprintf_r+0x19fa>
    f526:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f528:	4413      	add	r3, r2
    f52a:	9305      	str	r3, [sp, #20]
    f52c:	0571      	lsls	r1, r6, #21
    f52e:	d503      	bpl.n	f538 <_svfprintf_r+0x17a8>
    f530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f532:	2b00      	cmp	r3, #0
    f534:	f300 8135 	bgt.w	f7a2 <_svfprintf_r+0x1a12>
    f538:	9b05      	ldr	r3, [sp, #20]
    f53a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f53e:	9302      	str	r3, [sp, #8]
    f540:	2367      	movs	r3, #103	; 0x67
    f542:	930b      	str	r3, [sp, #44]	; 0x2c
    f544:	2300      	movs	r3, #0
    f546:	930f      	str	r3, [sp, #60]	; 0x3c
    f548:	930d      	str	r3, [sp, #52]	; 0x34
    f54a:	e727      	b.n	f39c <_svfprintf_r+0x160c>
    f54c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f54e:	4283      	cmp	r3, r0
    f550:	f4bf aeb7 	bcs.w	f2c2 <_svfprintf_r+0x1532>
    f554:	2130      	movs	r1, #48	; 0x30
    f556:	1c5a      	adds	r2, r3, #1
    f558:	9222      	str	r2, [sp, #136]	; 0x88
    f55a:	7019      	strb	r1, [r3, #0]
    f55c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f55e:	4298      	cmp	r0, r3
    f560:	d8f9      	bhi.n	f556 <_svfprintf_r+0x17c6>
    f562:	e6ae      	b.n	f2c2 <_svfprintf_r+0x1532>
    f564:	07f3      	lsls	r3, r6, #31
    f566:	f100 80a7 	bmi.w	f6b8 <_svfprintf_r+0x1928>
    f56a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f56c:	e6a9      	b.n	f2c2 <_svfprintf_r+0x1532>
    f56e:	aa24      	add	r2, sp, #144	; 0x90
    f570:	4658      	mov	r0, fp
    f572:	9105      	str	r1, [sp, #20]
    f574:	f001 fb14 	bl	10ba0 <__ssprint_r>
    f578:	2800      	cmp	r0, #0
    f57a:	f47f a86e 	bne.w	e65a <_svfprintf_r+0x8ca>
    f57e:	f896 c000 	ldrb.w	ip, [r6]
    f582:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f584:	9905      	ldr	r1, [sp, #20]
    f586:	a827      	add	r0, sp, #156	; 0x9c
    f588:	4465      	add	r5, ip
    f58a:	f7ff bbec 	b.w	ed66 <_svfprintf_r+0xfd6>
    f58e:	ee1b 1a10 	vmov	r1, s22
    f592:	aa24      	add	r2, sp, #144	; 0x90
    f594:	4658      	mov	r0, fp
    f596:	f001 fb03 	bl	10ba0 <__ssprint_r>
    f59a:	2800      	cmp	r0, #0
    f59c:	f47f a85d 	bne.w	e65a <_svfprintf_r+0x8ca>
    f5a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f5a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f5a6:	f7ff b96b 	b.w	e880 <_svfprintf_r+0xaf0>
    f5aa:	2378      	movs	r3, #120	; 0x78
    f5ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f5b0:	2330      	movs	r3, #48	; 0x30
    f5b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f5b6:	9b03      	ldr	r3, [sp, #12]
    f5b8:	2b63      	cmp	r3, #99	; 0x63
    f5ba:	f048 0602 	orr.w	r6, r8, #2
    f5be:	f300 80a6 	bgt.w	f70e <_svfprintf_r+0x197e>
    f5c2:	2300      	movs	r3, #0
    f5c4:	9307      	str	r3, [sp, #28]
    f5c6:	ac37      	add	r4, sp, #220	; 0xdc
    f5c8:	ee18 3a90 	vmov	r3, s17
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f5d2:	db2b      	blt.n	f62c <_svfprintf_r+0x189c>
    f5d4:	eeb0 ab48 	vmov.f64	d10, d8
    f5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5da:	f023 0520 	bic.w	r5, r3, #32
    f5de:	2300      	movs	r3, #0
    f5e0:	9309      	str	r3, [sp, #36]	; 0x24
    f5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5e4:	2b61      	cmp	r3, #97	; 0x61
    f5e6:	f47f aaad 	bne.w	eb44 <_svfprintf_r+0xdb4>
    f5ea:	eeb0 0b4a 	vmov.f64	d0, d10
    f5ee:	a81b      	add	r0, sp, #108	; 0x6c
    f5f0:	f000 faee 	bl	fbd0 <frexp>
    f5f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f5f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    f5fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f604:	d101      	bne.n	f60a <_svfprintf_r+0x187a>
    f606:	2301      	movs	r3, #1
    f608:	931b      	str	r3, [sp, #108]	; 0x6c
    f60a:	4846      	ldr	r0, [pc, #280]	; (f724 <_svfprintf_r+0x1994>)
    f60c:	e721      	b.n	f452 <_svfprintf_r+0x16c2>
    f60e:	ee1b 1a10 	vmov	r1, s22
    f612:	aa24      	add	r2, sp, #144	; 0x90
    f614:	4658      	mov	r0, fp
    f616:	f001 fac3 	bl	10ba0 <__ssprint_r>
    f61a:	2800      	cmp	r0, #0
    f61c:	f47f a81d 	bne.w	e65a <_svfprintf_r+0x8ca>
    f620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f622:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f624:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f628:	f7ff b94e 	b.w	e8c8 <_svfprintf_r+0xb38>
    f62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f62e:	f023 0520 	bic.w	r5, r3, #32
    f632:	232d      	movs	r3, #45	; 0x2d
    f634:	9309      	str	r3, [sp, #36]	; 0x24
    f636:	eeb1 ab48 	vneg.f64	d10, d8
    f63a:	e7d2      	b.n	f5e2 <_svfprintf_r+0x1852>
    f63c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f63e:	920c      	str	r2, [sp, #48]	; 0x30
    f640:	2a00      	cmp	r2, #0
    f642:	f006 0301 	and.w	r3, r6, #1
    f646:	f340 810d 	ble.w	f864 <_svfprintf_r+0x1ad4>
    f64a:	9903      	ldr	r1, [sp, #12]
    f64c:	430b      	orrs	r3, r1
    f64e:	f040 80cf 	bne.w	f7f0 <_svfprintf_r+0x1a60>
    f652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f654:	9305      	str	r3, [sp, #20]
    f656:	2366      	movs	r3, #102	; 0x66
    f658:	930b      	str	r3, [sp, #44]	; 0x2c
    f65a:	0572      	lsls	r2, r6, #21
    f65c:	f100 80a3 	bmi.w	f7a6 <_svfprintf_r+0x1a16>
    f660:	9b05      	ldr	r3, [sp, #20]
    f662:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f666:	9302      	str	r3, [sp, #8]
    f668:	e76c      	b.n	f544 <_svfprintf_r+0x17b4>
    f66a:	ee1b 1a10 	vmov	r1, s22
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	4658      	mov	r0, fp
    f672:	f001 fa95 	bl	10ba0 <__ssprint_r>
    f676:	2800      	cmp	r0, #0
    f678:	f47e afef 	bne.w	e65a <_svfprintf_r+0x8ca>
    f67c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f680:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f682:	1b1c      	subs	r4, r3, r4
    f684:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f688:	f7ff b936 	b.w	e8f8 <_svfprintf_r+0xb68>
    f68c:	2358      	movs	r3, #88	; 0x58
    f68e:	e78d      	b.n	f5ac <_svfprintf_r+0x181c>
    f690:	2200      	movs	r2, #0
    f692:	9203      	str	r2, [sp, #12]
    f694:	f7fe bbda 	b.w	de4c <_svfprintf_r+0xbc>
    f698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f69a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f69c:	189a      	adds	r2, r3, r2
    f69e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f6a0:	9205      	str	r2, [sp, #20]
    f6a2:	2b00      	cmp	r3, #0
    f6a4:	f340 80ab 	ble.w	f7fe <_svfprintf_r+0x1a6e>
    f6a8:	2367      	movs	r3, #103	; 0x67
    f6aa:	930b      	str	r3, [sp, #44]	; 0x2c
    f6ac:	e7d5      	b.n	f65a <_svfprintf_r+0x18ca>
    f6ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6b0:	320f      	adds	r2, #15
    f6b2:	b2d2      	uxtb	r2, r2
    f6b4:	2101      	movs	r1, #1
    f6b6:	e618      	b.n	f2ea <_svfprintf_r+0x155a>
    f6b8:	18a0      	adds	r0, r4, r2
    f6ba:	e5fb      	b.n	f2b4 <_svfprintf_r+0x1524>
    f6bc:	2900      	cmp	r1, #0
    f6be:	f040 80a8 	bne.w	f812 <_svfprintf_r+0x1a82>
    f6c2:	2230      	movs	r2, #48	; 0x30
    f6c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f6c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f6cc:	3330      	adds	r3, #48	; 0x30
    f6ce:	f802 3b01 	strb.w	r3, [r2], #1
    f6d2:	ab1e      	add	r3, sp, #120	; 0x78
    f6d4:	1ad3      	subs	r3, r2, r3
    f6d6:	9314      	str	r3, [sp, #80]	; 0x50
    f6d8:	e649      	b.n	f36e <_svfprintf_r+0x15de>
    f6da:	3301      	adds	r3, #1
    f6dc:	4912      	ldr	r1, [pc, #72]	; (f728 <_svfprintf_r+0x1998>)
    f6de:	f8ca 5004 	str.w	r5, [sl, #4]
    f6e2:	442a      	add	r2, r5
    f6e4:	2b07      	cmp	r3, #7
    f6e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f6ea:	f8ca 1000 	str.w	r1, [sl]
    f6ee:	f77f ac33 	ble.w	ef58 <_svfprintf_r+0x11c8>
    f6f2:	ee1b 1a10 	vmov	r1, s22
    f6f6:	aa24      	add	r2, sp, #144	; 0x90
    f6f8:	4658      	mov	r0, fp
    f6fa:	f001 fa51 	bl	10ba0 <__ssprint_r>
    f6fe:	2800      	cmp	r0, #0
    f700:	f47e afab 	bne.w	e65a <_svfprintf_r+0x8ca>
    f704:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f708:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f70c:	e426      	b.n	ef5c <_svfprintf_r+0x11cc>
    f70e:	1c59      	adds	r1, r3, #1
    f710:	4658      	mov	r0, fp
    f712:	f7fc f9fb 	bl	bb0c <_malloc_r>
    f716:	4604      	mov	r4, r0
    f718:	b350      	cbz	r0, f770 <_svfprintf_r+0x19e0>
    f71a:	9007      	str	r0, [sp, #28]
    f71c:	e754      	b.n	f5c8 <_svfprintf_r+0x1838>
    f71e:	bf00      	nop
    f720:	20000c90 	.word	0x20000c90
    f724:	20000c7c 	.word	0x20000c7c
    f728:	200011f4 	.word	0x200011f4
    f72c:	66666667 	.word	0x66666667
    f730:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f734:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f738:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f73c:	4561      	cmp	r1, ip
    f73e:	4613      	mov	r3, r2
    f740:	d10a      	bne.n	f758 <_svfprintf_r+0x19c8>
    f742:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f746:	f803 ec01 	strb.w	lr, [r3, #-1]
    f74a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f74c:	1e59      	subs	r1, r3, #1
    f74e:	9122      	str	r1, [sp, #136]	; 0x88
    f750:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f754:	458c      	cmp	ip, r1
    f756:	d0f6      	beq.n	f746 <_svfprintf_r+0x19b6>
    f758:	2939      	cmp	r1, #57	; 0x39
    f75a:	bf16      	itet	ne
    f75c:	3101      	addne	r1, #1
    f75e:	7a81      	ldrbeq	r1, [r0, #10]
    f760:	b2c9      	uxtbne	r1, r1
    f762:	f803 1c01 	strb.w	r1, [r3, #-1]
    f766:	e6ae      	b.n	f4c6 <_svfprintf_r+0x1736>
    f768:	2300      	movs	r3, #0
    f76a:	4690      	mov	r8, r2
    f76c:	9307      	str	r3, [sp, #28]
    f76e:	e760      	b.n	f632 <_svfprintf_r+0x18a2>
    f770:	ee1b 2a10 	vmov	r2, s22
    f774:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f77c:	8193      	strh	r3, [r2, #12]
    f77e:	f7fe bc16 	b.w	dfae <_svfprintf_r+0x21e>
    f782:	07f5      	lsls	r5, r6, #31
    f784:	f57f adfe 	bpl.w	f384 <_svfprintf_r+0x15f4>
    f788:	e5f8      	b.n	f37c <_svfprintf_r+0x15ec>
    f78a:	9305      	str	r3, [sp, #20]
    f78c:	e6ce      	b.n	f52c <_svfprintf_r+0x179c>
    f78e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f796:	f43f ad8b 	beq.w	f2b0 <_svfprintf_r+0x1520>
    f79a:	f1c2 0201 	rsb	r2, r2, #1
    f79e:	921b      	str	r2, [sp, #108]	; 0x6c
    f7a0:	e587      	b.n	f2b2 <_svfprintf_r+0x1522>
    f7a2:	2367      	movs	r3, #103	; 0x67
    f7a4:	930b      	str	r3, [sp, #44]	; 0x2c
    f7a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f7a8:	780b      	ldrb	r3, [r1, #0]
    f7aa:	2bff      	cmp	r3, #255	; 0xff
    f7ac:	d079      	beq.n	f8a2 <_svfprintf_r+0x1b12>
    f7ae:	2500      	movs	r5, #0
    f7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f7b2:	4628      	mov	r0, r5
    f7b4:	e003      	b.n	f7be <_svfprintf_r+0x1a2e>
    f7b6:	3001      	adds	r0, #1
    f7b8:	3101      	adds	r1, #1
    f7ba:	2bff      	cmp	r3, #255	; 0xff
    f7bc:	d008      	beq.n	f7d0 <_svfprintf_r+0x1a40>
    f7be:	4293      	cmp	r3, r2
    f7c0:	da06      	bge.n	f7d0 <_svfprintf_r+0x1a40>
    f7c2:	1ad2      	subs	r2, r2, r3
    f7c4:	784b      	ldrb	r3, [r1, #1]
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	d1f5      	bne.n	f7b6 <_svfprintf_r+0x1a26>
    f7ca:	780b      	ldrb	r3, [r1, #0]
    f7cc:	3501      	adds	r5, #1
    f7ce:	e7f4      	b.n	f7ba <_svfprintf_r+0x1a2a>
    f7d0:	920c      	str	r2, [sp, #48]	; 0x30
    f7d2:	9113      	str	r1, [sp, #76]	; 0x4c
    f7d4:	900d      	str	r0, [sp, #52]	; 0x34
    f7d6:	950f      	str	r5, [sp, #60]	; 0x3c
    f7d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    f7de:	4413      	add	r3, r2
    f7e0:	9a05      	ldr	r2, [sp, #20]
    f7e2:	fb01 2303 	mla	r3, r1, r3, r2
    f7e6:	9305      	str	r3, [sp, #20]
    f7e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f7ec:	9302      	str	r3, [sp, #8]
    f7ee:	e5d5      	b.n	f39c <_svfprintf_r+0x160c>
    f7f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f7f2:	18d3      	adds	r3, r2, r3
    f7f4:	4419      	add	r1, r3
    f7f6:	2366      	movs	r3, #102	; 0x66
    f7f8:	9105      	str	r1, [sp, #20]
    f7fa:	930b      	str	r3, [sp, #44]	; 0x2c
    f7fc:	e72d      	b.n	f65a <_svfprintf_r+0x18ca>
    f7fe:	f1c3 0301 	rsb	r3, r3, #1
    f802:	441a      	add	r2, r3
    f804:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f808:	9302      	str	r3, [sp, #8]
    f80a:	2367      	movs	r3, #103	; 0x67
    f80c:	9205      	str	r2, [sp, #20]
    f80e:	930b      	str	r3, [sp, #44]	; 0x2c
    f810:	e698      	b.n	f544 <_svfprintf_r+0x17b4>
    f812:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f816:	e759      	b.n	f6cc <_svfprintf_r+0x193c>
    f818:	9b03      	ldr	r3, [sp, #12]
    f81a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f81e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f822:	9305      	str	r3, [sp, #20]
    f824:	e4b4      	b.n	f190 <_svfprintf_r+0x1400>
    f826:	ee18 3a90 	vmov	r3, s17
    f82a:	2b00      	cmp	r3, #0
    f82c:	bfb4      	ite	lt
    f82e:	212d      	movlt	r1, #45	; 0x2d
    f830:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f834:	4c25      	ldr	r4, [pc, #148]	; (f8cc <_svfprintf_r+0x1b3c>)
    f836:	4b26      	ldr	r3, [pc, #152]	; (f8d0 <_svfprintf_r+0x1b40>)
    f838:	bfb8      	it	lt
    f83a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f83e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f842:	f7fe bc79 	b.w	e138 <_svfprintf_r+0x3a8>
    f846:	9b03      	ldr	r3, [sp, #12]
    f848:	9302      	str	r3, [sp, #8]
    f84a:	9305      	str	r3, [sp, #20]
    f84c:	2373      	movs	r3, #115	; 0x73
    f84e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f852:	9003      	str	r0, [sp, #12]
    f854:	900f      	str	r0, [sp, #60]	; 0x3c
    f856:	900d      	str	r0, [sp, #52]	; 0x34
    f858:	930b      	str	r3, [sp, #44]	; 0x2c
    f85a:	f7fe bc7a 	b.w	e152 <_svfprintf_r+0x3c2>
    f85e:	2302      	movs	r3, #2
    f860:	9314      	str	r3, [sp, #80]	; 0x50
    f862:	e584      	b.n	f36e <_svfprintf_r+0x15de>
    f864:	9a03      	ldr	r2, [sp, #12]
    f866:	4313      	orrs	r3, r2
    f868:	d105      	bne.n	f876 <_svfprintf_r+0x1ae6>
    f86a:	2301      	movs	r3, #1
    f86c:	2266      	movs	r2, #102	; 0x66
    f86e:	9302      	str	r3, [sp, #8]
    f870:	920b      	str	r2, [sp, #44]	; 0x2c
    f872:	9305      	str	r3, [sp, #20]
    f874:	e666      	b.n	f544 <_svfprintf_r+0x17b4>
    f876:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f878:	3301      	adds	r3, #1
    f87a:	441a      	add	r2, r3
    f87c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f880:	9302      	str	r3, [sp, #8]
    f882:	2366      	movs	r3, #102	; 0x66
    f884:	9205      	str	r2, [sp, #20]
    f886:	930b      	str	r3, [sp, #44]	; 0x2c
    f888:	e65c      	b.n	f544 <_svfprintf_r+0x17b4>
    f88a:	9a08      	ldr	r2, [sp, #32]
    f88c:	f899 3001 	ldrb.w	r3, [r9, #1]
    f890:	4689      	mov	r9, r1
    f892:	f852 1b04 	ldr.w	r1, [r2], #4
    f896:	9208      	str	r2, [sp, #32]
    f898:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f89c:	9103      	str	r1, [sp, #12]
    f89e:	f7fe bad3 	b.w	de48 <_svfprintf_r+0xb8>
    f8a2:	2300      	movs	r3, #0
    f8a4:	930f      	str	r3, [sp, #60]	; 0x3c
    f8a6:	930d      	str	r3, [sp, #52]	; 0x34
    f8a8:	e796      	b.n	f7d8 <_svfprintf_r+0x1a48>
    f8aa:	230c      	movs	r3, #12
    f8ac:	f8cb 3000 	str.w	r3, [fp]
    f8b0:	f04f 33ff 	mov.w	r3, #4294967295
    f8b4:	9304      	str	r3, [sp, #16]
    f8b6:	f7fe bb81 	b.w	dfbc <_svfprintf_r+0x22c>
    f8ba:	ee1b 2a10 	vmov	r2, s22
    f8be:	8993      	ldrh	r3, [r2, #12]
    f8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f8c4:	8193      	strh	r3, [r2, #12]
    f8c6:	f7fe bec8 	b.w	e65a <_svfprintf_r+0x8ca>
    f8ca:	bf00      	nop
    f8cc:	20000c74 	.word	0x20000c74
    f8d0:	20000c78 	.word	0x20000c78

0000f8d4 <_fclose_r>:
    f8d4:	b570      	push	{r4, r5, r6, lr}
    f8d6:	2900      	cmp	r1, #0
    f8d8:	d04b      	beq.n	f972 <_fclose_r+0x9e>
    f8da:	4606      	mov	r6, r0
    f8dc:	460c      	mov	r4, r1
    f8de:	b110      	cbz	r0, f8e6 <_fclose_r+0x12>
    f8e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	d048      	beq.n	f978 <_fclose_r+0xa4>
    f8e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f8e8:	07d8      	lsls	r0, r3, #31
    f8ea:	d534      	bpl.n	f956 <_fclose_r+0x82>
    f8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f8f0:	2b00      	cmp	r3, #0
    f8f2:	d03e      	beq.n	f972 <_fclose_r+0x9e>
    f8f4:	4621      	mov	r1, r4
    f8f6:	4630      	mov	r0, r6
    f8f8:	f000 f850 	bl	f99c <__sflush_r>
    f8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f8fe:	4605      	mov	r5, r0
    f900:	b133      	cbz	r3, f910 <_fclose_r+0x3c>
    f902:	69e1      	ldr	r1, [r4, #28]
    f904:	4630      	mov	r0, r6
    f906:	4798      	blx	r3
    f908:	2800      	cmp	r0, #0
    f90a:	bfb8      	it	lt
    f90c:	f04f 35ff 	movlt.w	r5, #4294967295
    f910:	89a3      	ldrh	r3, [r4, #12]
    f912:	061a      	lsls	r2, r3, #24
    f914:	d43c      	bmi.n	f990 <_fclose_r+0xbc>
    f916:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f918:	b141      	cbz	r1, f92c <_fclose_r+0x58>
    f91a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f91e:	4299      	cmp	r1, r3
    f920:	d002      	beq.n	f928 <_fclose_r+0x54>
    f922:	4630      	mov	r0, r6
    f924:	f7fd fd4e 	bl	d3c4 <_free_r>
    f928:	2300      	movs	r3, #0
    f92a:	6323      	str	r3, [r4, #48]	; 0x30
    f92c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    f92e:	b121      	cbz	r1, f93a <_fclose_r+0x66>
    f930:	4630      	mov	r0, r6
    f932:	f7fd fd47 	bl	d3c4 <_free_r>
    f936:	2300      	movs	r3, #0
    f938:	6463      	str	r3, [r4, #68]	; 0x44
    f93a:	f7fc ffcd 	bl	c8d8 <__sfp_lock_acquire>
    f93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f940:	2200      	movs	r2, #0
    f942:	07db      	lsls	r3, r3, #31
    f944:	81a2      	strh	r2, [r4, #12]
    f946:	d51f      	bpl.n	f988 <_fclose_r+0xb4>
    f948:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f94a:	f7fd fa59 	bl	ce00 <__retarget_lock_close_recursive>
    f94e:	f7fc ffc9 	bl	c8e4 <__sfp_lock_release>
    f952:	4628      	mov	r0, r5
    f954:	bd70      	pop	{r4, r5, r6, pc}
    f956:	89a3      	ldrh	r3, [r4, #12]
    f958:	0599      	lsls	r1, r3, #22
    f95a:	d4cb      	bmi.n	f8f4 <_fclose_r+0x20>
    f95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f95e:	f7fd fa51 	bl	ce04 <__retarget_lock_acquire_recursive>
    f962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f966:	2b00      	cmp	r3, #0
    f968:	d1c4      	bne.n	f8f4 <_fclose_r+0x20>
    f96a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    f96c:	f015 0501 	ands.w	r5, r5, #1
    f970:	d005      	beq.n	f97e <_fclose_r+0xaa>
    f972:	2500      	movs	r5, #0
    f974:	4628      	mov	r0, r5
    f976:	bd70      	pop	{r4, r5, r6, pc}
    f978:	f7fc ff90 	bl	c89c <__sinit>
    f97c:	e7b3      	b.n	f8e6 <_fclose_r+0x12>
    f97e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f980:	f7fd fa42 	bl	ce08 <__retarget_lock_release_recursive>
    f984:	4628      	mov	r0, r5
    f986:	bd70      	pop	{r4, r5, r6, pc}
    f988:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f98a:	f7fd fa3d 	bl	ce08 <__retarget_lock_release_recursive>
    f98e:	e7db      	b.n	f948 <_fclose_r+0x74>
    f990:	6921      	ldr	r1, [r4, #16]
    f992:	4630      	mov	r0, r6
    f994:	f7fd fd16 	bl	d3c4 <_free_r>
    f998:	e7bd      	b.n	f916 <_fclose_r+0x42>
    f99a:	bf00      	nop

0000f99c <__sflush_r>:
    f99c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    f9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9a4:	460c      	mov	r4, r1
    f9a6:	0711      	lsls	r1, r2, #28
    f9a8:	4680      	mov	r8, r0
    f9aa:	d447      	bmi.n	fa3c <__sflush_r+0xa0>
    f9ac:	6863      	ldr	r3, [r4, #4]
    f9ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	81a2      	strh	r2, [r4, #12]
    f9b6:	dd5e      	ble.n	fa76 <__sflush_r+0xda>
    f9b8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    f9ba:	2d00      	cmp	r5, #0
    f9bc:	d058      	beq.n	fa70 <__sflush_r+0xd4>
    f9be:	2300      	movs	r3, #0
    f9c0:	f8d8 6000 	ldr.w	r6, [r8]
    f9c4:	f8c8 3000 	str.w	r3, [r8]
    f9c8:	b293      	uxth	r3, r2
    f9ca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    f9ce:	d156      	bne.n	fa7e <__sflush_r+0xe2>
    f9d0:	2301      	movs	r3, #1
    f9d2:	69e1      	ldr	r1, [r4, #28]
    f9d4:	4640      	mov	r0, r8
    f9d6:	47a8      	blx	r5
    f9d8:	1c43      	adds	r3, r0, #1
    f9da:	d067      	beq.n	faac <__sflush_r+0x110>
    f9dc:	89a3      	ldrh	r3, [r4, #12]
    f9de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    f9e0:	075f      	lsls	r7, r3, #29
    f9e2:	d505      	bpl.n	f9f0 <__sflush_r+0x54>
    f9e4:	6863      	ldr	r3, [r4, #4]
    f9e6:	1ac0      	subs	r0, r0, r3
    f9e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f9ea:	b10b      	cbz	r3, f9f0 <__sflush_r+0x54>
    f9ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f9ee:	1ac0      	subs	r0, r0, r3
    f9f0:	69e1      	ldr	r1, [r4, #28]
    f9f2:	4602      	mov	r2, r0
    f9f4:	2300      	movs	r3, #0
    f9f6:	4640      	mov	r0, r8
    f9f8:	47a8      	blx	r5
    f9fa:	1c41      	adds	r1, r0, #1
    f9fc:	d141      	bne.n	fa82 <__sflush_r+0xe6>
    f9fe:	f8d8 3000 	ldr.w	r3, [r8]
    fa02:	2b00      	cmp	r3, #0
    fa04:	d03d      	beq.n	fa82 <__sflush_r+0xe6>
    fa06:	2b1d      	cmp	r3, #29
    fa08:	d001      	beq.n	fa0e <__sflush_r+0x72>
    fa0a:	2b16      	cmp	r3, #22
    fa0c:	d156      	bne.n	fabc <__sflush_r+0x120>
    fa0e:	89a3      	ldrh	r3, [r4, #12]
    fa10:	6922      	ldr	r2, [r4, #16]
    fa12:	6022      	str	r2, [r4, #0]
    fa14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fa18:	2100      	movs	r1, #0
    fa1a:	6061      	str	r1, [r4, #4]
    fa1c:	81a3      	strh	r3, [r4, #12]
    fa1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fa20:	f8c8 6000 	str.w	r6, [r8]
    fa24:	b321      	cbz	r1, fa70 <__sflush_r+0xd4>
    fa26:	f104 0340 	add.w	r3, r4, #64	; 0x40
    fa2a:	4299      	cmp	r1, r3
    fa2c:	d002      	beq.n	fa34 <__sflush_r+0x98>
    fa2e:	4640      	mov	r0, r8
    fa30:	f7fd fcc8 	bl	d3c4 <_free_r>
    fa34:	2000      	movs	r0, #0
    fa36:	6320      	str	r0, [r4, #48]	; 0x30
    fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa3c:	6926      	ldr	r6, [r4, #16]
    fa3e:	b1be      	cbz	r6, fa70 <__sflush_r+0xd4>
    fa40:	b293      	uxth	r3, r2
    fa42:	6825      	ldr	r5, [r4, #0]
    fa44:	6026      	str	r6, [r4, #0]
    fa46:	079a      	lsls	r2, r3, #30
    fa48:	bf0c      	ite	eq
    fa4a:	6963      	ldreq	r3, [r4, #20]
    fa4c:	2300      	movne	r3, #0
    fa4e:	1bad      	subs	r5, r5, r6
    fa50:	60a3      	str	r3, [r4, #8]
    fa52:	e00b      	b.n	fa6c <__sflush_r+0xd0>
    fa54:	462b      	mov	r3, r5
    fa56:	4632      	mov	r2, r6
    fa58:	69e1      	ldr	r1, [r4, #28]
    fa5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    fa5c:	4640      	mov	r0, r8
    fa5e:	47b8      	blx	r7
    fa60:	f1b0 0c00 	subs.w	ip, r0, #0
    fa64:	eba5 050c 	sub.w	r5, r5, ip
    fa68:	4466      	add	r6, ip
    fa6a:	dd17      	ble.n	fa9c <__sflush_r+0x100>
    fa6c:	2d00      	cmp	r5, #0
    fa6e:	dcf1      	bgt.n	fa54 <__sflush_r+0xb8>
    fa70:	2000      	movs	r0, #0
    fa72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fa78:	2b00      	cmp	r3, #0
    fa7a:	dc9d      	bgt.n	f9b8 <__sflush_r+0x1c>
    fa7c:	e7f8      	b.n	fa70 <__sflush_r+0xd4>
    fa7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    fa80:	e7ae      	b.n	f9e0 <__sflush_r+0x44>
    fa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fa86:	6922      	ldr	r2, [r4, #16]
    fa88:	6022      	str	r2, [r4, #0]
    fa8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fa8e:	81a3      	strh	r3, [r4, #12]
    fa90:	2200      	movs	r2, #0
    fa92:	04db      	lsls	r3, r3, #19
    fa94:	6062      	str	r2, [r4, #4]
    fa96:	d5c2      	bpl.n	fa1e <__sflush_r+0x82>
    fa98:	6520      	str	r0, [r4, #80]	; 0x50
    fa9a:	e7c0      	b.n	fa1e <__sflush_r+0x82>
    fa9c:	89a3      	ldrh	r3, [r4, #12]
    fa9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    faa2:	f04f 30ff 	mov.w	r0, #4294967295
    faa6:	81a3      	strh	r3, [r4, #12]
    faa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    faac:	f8d8 3000 	ldr.w	r3, [r8]
    fab0:	2b00      	cmp	r3, #0
    fab2:	d093      	beq.n	f9dc <__sflush_r+0x40>
    fab4:	2b1d      	cmp	r3, #29
    fab6:	d006      	beq.n	fac6 <__sflush_r+0x12a>
    fab8:	2b16      	cmp	r3, #22
    faba:	d004      	beq.n	fac6 <__sflush_r+0x12a>
    fabc:	89a3      	ldrh	r3, [r4, #12]
    fabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fac2:	81a3      	strh	r3, [r4, #12]
    fac4:	e7d5      	b.n	fa72 <__sflush_r+0xd6>
    fac6:	f8c8 6000 	str.w	r6, [r8]
    faca:	e7d1      	b.n	fa70 <__sflush_r+0xd4>

0000facc <_fflush_r>:
    facc:	b538      	push	{r3, r4, r5, lr}
    face:	460c      	mov	r4, r1
    fad0:	4605      	mov	r5, r0
    fad2:	b108      	cbz	r0, fad8 <_fflush_r+0xc>
    fad4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fad6:	b303      	cbz	r3, fb1a <_fflush_r+0x4e>
    fad8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    fadc:	b188      	cbz	r0, fb02 <_fflush_r+0x36>
    fade:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fae0:	07db      	lsls	r3, r3, #31
    fae2:	d401      	bmi.n	fae8 <_fflush_r+0x1c>
    fae4:	0581      	lsls	r1, r0, #22
    fae6:	d50f      	bpl.n	fb08 <_fflush_r+0x3c>
    fae8:	4628      	mov	r0, r5
    faea:	4621      	mov	r1, r4
    faec:	f7ff ff56 	bl	f99c <__sflush_r>
    faf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    faf2:	07da      	lsls	r2, r3, #31
    faf4:	4605      	mov	r5, r0
    faf6:	d402      	bmi.n	fafe <_fflush_r+0x32>
    faf8:	89a3      	ldrh	r3, [r4, #12]
    fafa:	059b      	lsls	r3, r3, #22
    fafc:	d508      	bpl.n	fb10 <_fflush_r+0x44>
    fafe:	4628      	mov	r0, r5
    fb00:	bd38      	pop	{r3, r4, r5, pc}
    fb02:	4605      	mov	r5, r0
    fb04:	4628      	mov	r0, r5
    fb06:	bd38      	pop	{r3, r4, r5, pc}
    fb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fb0a:	f7fd f97b 	bl	ce04 <__retarget_lock_acquire_recursive>
    fb0e:	e7eb      	b.n	fae8 <_fflush_r+0x1c>
    fb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fb12:	f7fd f979 	bl	ce08 <__retarget_lock_release_recursive>
    fb16:	4628      	mov	r0, r5
    fb18:	bd38      	pop	{r3, r4, r5, pc}
    fb1a:	f7fc febf 	bl	c89c <__sinit>
    fb1e:	e7db      	b.n	fad8 <_fflush_r+0xc>

0000fb20 <_localeconv_r>:
    fb20:	4800      	ldr	r0, [pc, #0]	; (fb24 <_localeconv_r+0x4>)
    fb22:	4770      	bx	lr
    fb24:	2000444c 	.word	0x2000444c
	...

0000fb30 <memchr>:
    fb30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fb34:	2a10      	cmp	r2, #16
    fb36:	db2b      	blt.n	fb90 <memchr+0x60>
    fb38:	f010 0f07 	tst.w	r0, #7
    fb3c:	d008      	beq.n	fb50 <memchr+0x20>
    fb3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    fb42:	3a01      	subs	r2, #1
    fb44:	428b      	cmp	r3, r1
    fb46:	d02d      	beq.n	fba4 <memchr+0x74>
    fb48:	f010 0f07 	tst.w	r0, #7
    fb4c:	b342      	cbz	r2, fba0 <memchr+0x70>
    fb4e:	d1f6      	bne.n	fb3e <memchr+0xe>
    fb50:	b4f0      	push	{r4, r5, r6, r7}
    fb52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    fb56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    fb5a:	f022 0407 	bic.w	r4, r2, #7
    fb5e:	f07f 0700 	mvns.w	r7, #0
    fb62:	2300      	movs	r3, #0
    fb64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    fb68:	3c08      	subs	r4, #8
    fb6a:	ea85 0501 	eor.w	r5, r5, r1
    fb6e:	ea86 0601 	eor.w	r6, r6, r1
    fb72:	fa85 f547 	uadd8	r5, r5, r7
    fb76:	faa3 f587 	sel	r5, r3, r7
    fb7a:	fa86 f647 	uadd8	r6, r6, r7
    fb7e:	faa5 f687 	sel	r6, r5, r7
    fb82:	b98e      	cbnz	r6, fba8 <memchr+0x78>
    fb84:	d1ee      	bne.n	fb64 <memchr+0x34>
    fb86:	bcf0      	pop	{r4, r5, r6, r7}
    fb88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fb8c:	f002 0207 	and.w	r2, r2, #7
    fb90:	b132      	cbz	r2, fba0 <memchr+0x70>
    fb92:	f810 3b01 	ldrb.w	r3, [r0], #1
    fb96:	3a01      	subs	r2, #1
    fb98:	ea83 0301 	eor.w	r3, r3, r1
    fb9c:	b113      	cbz	r3, fba4 <memchr+0x74>
    fb9e:	d1f8      	bne.n	fb92 <memchr+0x62>
    fba0:	2000      	movs	r0, #0
    fba2:	4770      	bx	lr
    fba4:	3801      	subs	r0, #1
    fba6:	4770      	bx	lr
    fba8:	2d00      	cmp	r5, #0
    fbaa:	bf06      	itte	eq
    fbac:	4635      	moveq	r5, r6
    fbae:	3803      	subeq	r0, #3
    fbb0:	3807      	subne	r0, #7
    fbb2:	f015 0f01 	tst.w	r5, #1
    fbb6:	d107      	bne.n	fbc8 <memchr+0x98>
    fbb8:	3001      	adds	r0, #1
    fbba:	f415 7f80 	tst.w	r5, #256	; 0x100
    fbbe:	bf02      	ittt	eq
    fbc0:	3001      	addeq	r0, #1
    fbc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    fbc6:	3001      	addeq	r0, #1
    fbc8:	bcf0      	pop	{r4, r5, r6, r7}
    fbca:	3801      	subs	r0, #1
    fbcc:	4770      	bx	lr
    fbce:	bf00      	nop

0000fbd0 <frexp>:
    fbd0:	b430      	push	{r4, r5}
    fbd2:	b082      	sub	sp, #8
    fbd4:	ed8d 0b00 	vstr	d0, [sp]
    fbd8:	9a01      	ldr	r2, [sp, #4]
    fbda:	4c19      	ldr	r4, [pc, #100]	; (fc40 <frexp+0x70>)
    fbdc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    fbe0:	2100      	movs	r1, #0
    fbe2:	42a3      	cmp	r3, r4
    fbe4:	6001      	str	r1, [r0, #0]
    fbe6:	dc21      	bgt.n	fc2c <frexp+0x5c>
    fbe8:	9c00      	ldr	r4, [sp, #0]
    fbea:	431c      	orrs	r4, r3
    fbec:	d01e      	beq.n	fc2c <frexp+0x5c>
    fbee:	4c15      	ldr	r4, [pc, #84]	; (fc44 <frexp+0x74>)
    fbf0:	4014      	ands	r4, r2
    fbf2:	b954      	cbnz	r4, fc0a <frexp+0x3a>
    fbf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; fc38 <frexp+0x68>
    fbf8:	ee20 7b07 	vmul.f64	d7, d0, d7
    fbfc:	ed8d 7b00 	vstr	d7, [sp]
    fc00:	9a01      	ldr	r2, [sp, #4]
    fc02:	f06f 0135 	mvn.w	r1, #53	; 0x35
    fc06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    fc0a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    fc0e:	e9dd 4500 	ldrd	r4, r5, [sp]
    fc12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    fc16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    fc1a:	151b      	asrs	r3, r3, #20
    fc1c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    fc20:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    fc24:	e9cd 4500 	strd	r4, r5, [sp]
    fc28:	440b      	add	r3, r1
    fc2a:	6003      	str	r3, [r0, #0]
    fc2c:	ed9d 0b00 	vldr	d0, [sp]
    fc30:	b002      	add	sp, #8
    fc32:	bc30      	pop	{r4, r5}
    fc34:	4770      	bx	lr
    fc36:	bf00      	nop
    fc38:	00000000 	.word	0x00000000
    fc3c:	43500000 	.word	0x43500000
    fc40:	7fefffff 	.word	0x7fefffff
    fc44:	7ff00000 	.word	0x7ff00000

0000fc48 <__assert_func>:
    fc48:	b500      	push	{lr}
    fc4a:	4c0b      	ldr	r4, [pc, #44]	; (fc78 <__assert_func+0x30>)
    fc4c:	6825      	ldr	r5, [r4, #0]
    fc4e:	4614      	mov	r4, r2
    fc50:	68ee      	ldr	r6, [r5, #12]
    fc52:	461a      	mov	r2, r3
    fc54:	b085      	sub	sp, #20
    fc56:	4603      	mov	r3, r0
    fc58:	460d      	mov	r5, r1
    fc5a:	b14c      	cbz	r4, fc70 <__assert_func+0x28>
    fc5c:	4907      	ldr	r1, [pc, #28]	; (fc7c <__assert_func+0x34>)
    fc5e:	9500      	str	r5, [sp, #0]
    fc60:	e9cd 1401 	strd	r1, r4, [sp, #4]
    fc64:	4630      	mov	r0, r6
    fc66:	4906      	ldr	r1, [pc, #24]	; (fc80 <__assert_func+0x38>)
    fc68:	f000 ff86 	bl	10b78 <fiprintf>
    fc6c:	f7fa fb56 	bl	a31c <abort>
    fc70:	4904      	ldr	r1, [pc, #16]	; (fc84 <__assert_func+0x3c>)
    fc72:	460c      	mov	r4, r1
    fc74:	e7f3      	b.n	fc5e <__assert_func+0x16>
    fc76:	bf00      	nop
    fc78:	200048e4 	.word	0x200048e4
    fc7c:	20000a4c 	.word	0x20000a4c
    fc80:	20000a5c 	.word	0x20000a5c
    fc84:	2000047c 	.word	0x2000047c

0000fc88 <_calloc_r>:
    fc88:	b538      	push	{r3, r4, r5, lr}
    fc8a:	fba1 1402 	umull	r1, r4, r1, r2
    fc8e:	bb8c      	cbnz	r4, fcf4 <_calloc_r+0x6c>
    fc90:	f7fb ff3c 	bl	bb0c <_malloc_r>
    fc94:	4605      	mov	r5, r0
    fc96:	b1e0      	cbz	r0, fcd2 <_calloc_r+0x4a>
    fc98:	f850 2c04 	ldr.w	r2, [r0, #-4]
    fc9c:	f022 0203 	bic.w	r2, r2, #3
    fca0:	3a04      	subs	r2, #4
    fca2:	2a24      	cmp	r2, #36	; 0x24
    fca4:	d817      	bhi.n	fcd6 <_calloc_r+0x4e>
    fca6:	2a13      	cmp	r2, #19
    fca8:	d91a      	bls.n	fce0 <_calloc_r+0x58>
    fcaa:	2a1b      	cmp	r2, #27
    fcac:	e9c0 4400 	strd	r4, r4, [r0]
    fcb0:	d91d      	bls.n	fcee <_calloc_r+0x66>
    fcb2:	2a24      	cmp	r2, #36	; 0x24
    fcb4:	bf14      	ite	ne
    fcb6:	f100 0210 	addne.w	r2, r0, #16
    fcba:	f100 0218 	addeq.w	r2, r0, #24
    fcbe:	f04f 0300 	mov.w	r3, #0
    fcc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    fcc6:	bf04      	itt	eq
    fcc8:	6104      	streq	r4, [r0, #16]
    fcca:	6144      	streq	r4, [r0, #20]
    fccc:	e9c2 3300 	strd	r3, r3, [r2]
    fcd0:	6093      	str	r3, [r2, #8]
    fcd2:	4628      	mov	r0, r5
    fcd4:	bd38      	pop	{r3, r4, r5, pc}
    fcd6:	4621      	mov	r1, r4
    fcd8:	f7fc ff10 	bl	cafc <memset>
    fcdc:	4628      	mov	r0, r5
    fcde:	bd38      	pop	{r3, r4, r5, pc}
    fce0:	4602      	mov	r2, r0
    fce2:	2300      	movs	r3, #0
    fce4:	e9c2 3300 	strd	r3, r3, [r2]
    fce8:	6093      	str	r3, [r2, #8]
    fcea:	4628      	mov	r0, r5
    fcec:	bd38      	pop	{r3, r4, r5, pc}
    fcee:	f100 0208 	add.w	r2, r0, #8
    fcf2:	e7f6      	b.n	fce2 <_calloc_r+0x5a>
    fcf4:	f7fd f858 	bl	cda8 <__errno>
    fcf8:	230c      	movs	r3, #12
    fcfa:	2500      	movs	r5, #0
    fcfc:	6003      	str	r3, [r0, #0]
    fcfe:	e7e8      	b.n	fcd2 <_calloc_r+0x4a>

0000fd00 <quorem>:
    fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd04:	6903      	ldr	r3, [r0, #16]
    fd06:	690c      	ldr	r4, [r1, #16]
    fd08:	42a3      	cmp	r3, r4
    fd0a:	b083      	sub	sp, #12
    fd0c:	f2c0 8087 	blt.w	fe1e <quorem+0x11e>
    fd10:	3c01      	subs	r4, #1
    fd12:	f101 0514 	add.w	r5, r1, #20
    fd16:	00a3      	lsls	r3, r4, #2
    fd18:	f100 0814 	add.w	r8, r0, #20
    fd1c:	9300      	str	r3, [sp, #0]
    fd1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fd22:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fd26:	3301      	adds	r3, #1
    fd28:	4681      	mov	r9, r0
    fd2a:	429a      	cmp	r2, r3
    fd2c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    fd30:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    fd34:	9001      	str	r0, [sp, #4]
    fd36:	fbb2 f6f3 	udiv	r6, r2, r3
    fd3a:	d33b      	bcc.n	fdb4 <quorem+0xb4>
    fd3c:	f04f 0c00 	mov.w	ip, #0
    fd40:	46ae      	mov	lr, r5
    fd42:	4640      	mov	r0, r8
    fd44:	46e2      	mov	sl, ip
    fd46:	4663      	mov	r3, ip
    fd48:	f85e bb04 	ldr.w	fp, [lr], #4
    fd4c:	6802      	ldr	r2, [r0, #0]
    fd4e:	fa1f fc8b 	uxth.w	ip, fp
    fd52:	fb06 330c 	mla	r3, r6, ip, r3
    fd56:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    fd5a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    fd5e:	fb06 cc0b 	mla	ip, r6, fp, ip
    fd62:	b29b      	uxth	r3, r3
    fd64:	ebaa 0303 	sub.w	r3, sl, r3
    fd68:	fa1f fa8c 	uxth.w	sl, ip
    fd6c:	fa13 f382 	uxtah	r3, r3, r2
    fd70:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    fd74:	eb02 4223 	add.w	r2, r2, r3, asr #16
    fd78:	b29b      	uxth	r3, r3
    fd7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fd7e:	4577      	cmp	r7, lr
    fd80:	f840 3b04 	str.w	r3, [r0], #4
    fd84:	ea4f 4a22 	mov.w	sl, r2, asr #16
    fd88:	ea4f 431c 	mov.w	r3, ip, lsr #16
    fd8c:	d2dc      	bcs.n	fd48 <quorem+0x48>
    fd8e:	9b00      	ldr	r3, [sp, #0]
    fd90:	f858 3003 	ldr.w	r3, [r8, r3]
    fd94:	b973      	cbnz	r3, fdb4 <quorem+0xb4>
    fd96:	9b01      	ldr	r3, [sp, #4]
    fd98:	3b04      	subs	r3, #4
    fd9a:	4598      	cmp	r8, r3
    fd9c:	d304      	bcc.n	fda8 <quorem+0xa8>
    fd9e:	e007      	b.n	fdb0 <quorem+0xb0>
    fda0:	4598      	cmp	r8, r3
    fda2:	f104 34ff 	add.w	r4, r4, #4294967295
    fda6:	d203      	bcs.n	fdb0 <quorem+0xb0>
    fda8:	f853 2904 	ldr.w	r2, [r3], #-4
    fdac:	2a00      	cmp	r2, #0
    fdae:	d0f7      	beq.n	fda0 <quorem+0xa0>
    fdb0:	f8c9 4010 	str.w	r4, [r9, #16]
    fdb4:	4648      	mov	r0, r9
    fdb6:	f7fd fea7 	bl	db08 <__mcmp>
    fdba:	2800      	cmp	r0, #0
    fdbc:	db2b      	blt.n	fe16 <quorem+0x116>
    fdbe:	3601      	adds	r6, #1
    fdc0:	4641      	mov	r1, r8
    fdc2:	2300      	movs	r3, #0
    fdc4:	f855 0b04 	ldr.w	r0, [r5], #4
    fdc8:	f8d1 c000 	ldr.w	ip, [r1]
    fdcc:	b282      	uxth	r2, r0
    fdce:	1a9a      	subs	r2, r3, r2
    fdd0:	0c03      	lsrs	r3, r0, #16
    fdd2:	fa12 f28c 	uxtah	r2, r2, ip
    fdd6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    fdda:	eb03 4322 	add.w	r3, r3, r2, asr #16
    fdde:	b292      	uxth	r2, r2
    fde0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    fde4:	42af      	cmp	r7, r5
    fde6:	f841 2b04 	str.w	r2, [r1], #4
    fdea:	ea4f 4323 	mov.w	r3, r3, asr #16
    fdee:	d2e9      	bcs.n	fdc4 <quorem+0xc4>
    fdf0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fdf4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    fdf8:	b96a      	cbnz	r2, fe16 <quorem+0x116>
    fdfa:	3b04      	subs	r3, #4
    fdfc:	4598      	cmp	r8, r3
    fdfe:	d304      	bcc.n	fe0a <quorem+0x10a>
    fe00:	e007      	b.n	fe12 <quorem+0x112>
    fe02:	4598      	cmp	r8, r3
    fe04:	f104 34ff 	add.w	r4, r4, #4294967295
    fe08:	d203      	bcs.n	fe12 <quorem+0x112>
    fe0a:	f853 2904 	ldr.w	r2, [r3], #-4
    fe0e:	2a00      	cmp	r2, #0
    fe10:	d0f7      	beq.n	fe02 <quorem+0x102>
    fe12:	f8c9 4010 	str.w	r4, [r9, #16]
    fe16:	4630      	mov	r0, r6
    fe18:	b003      	add	sp, #12
    fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe1e:	2000      	movs	r0, #0
    fe20:	b003      	add	sp, #12
    fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe26:	bf00      	nop

0000fe28 <_dtoa_r>:
    fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe2c:	ed2d 8b02 	vpush	{d8}
    fe30:	b08f      	sub	sp, #60	; 0x3c
    fe32:	ed8d 0b02 	vstr	d0, [sp, #8]
    fe36:	9101      	str	r1, [sp, #4]
    fe38:	6b81      	ldr	r1, [r0, #56]	; 0x38
    fe3a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    fe3c:	9305      	str	r3, [sp, #20]
    fe3e:	ec57 6b10 	vmov	r6, r7, d0
    fe42:	4604      	mov	r4, r0
    fe44:	4693      	mov	fp, r2
    fe46:	b141      	cbz	r1, fe5a <_dtoa_r+0x32>
    fe48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    fe4a:	604a      	str	r2, [r1, #4]
    fe4c:	2301      	movs	r3, #1
    fe4e:	4093      	lsls	r3, r2
    fe50:	608b      	str	r3, [r1, #8]
    fe52:	f7fd fbf9 	bl	d648 <_Bfree>
    fe56:	2300      	movs	r3, #0
    fe58:	63a3      	str	r3, [r4, #56]	; 0x38
    fe5a:	f1b7 0800 	subs.w	r8, r7, #0
    fe5e:	bfb4      	ite	lt
    fe60:	2301      	movlt	r3, #1
    fe62:	2300      	movge	r3, #0
    fe64:	602b      	str	r3, [r5, #0]
    fe66:	4bbe      	ldr	r3, [pc, #760]	; (10160 <_dtoa_r+0x338>)
    fe68:	bfbc      	itt	lt
    fe6a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    fe6e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    fe72:	ea33 0308 	bics.w	r3, r3, r8
    fe76:	f000 809f 	beq.w	ffb8 <_dtoa_r+0x190>
    fe7a:	ed9d 8b02 	vldr	d8, [sp, #8]
    fe7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe86:	d111      	bne.n	feac <_dtoa_r+0x84>
    fe88:	9a05      	ldr	r2, [sp, #20]
    fe8a:	2301      	movs	r3, #1
    fe8c:	6013      	str	r3, [r2, #0]
    fe8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fe90:	2b00      	cmp	r3, #0
    fe92:	f000 823f 	beq.w	10314 <_dtoa_r+0x4ec>
    fe96:	4bb3      	ldr	r3, [pc, #716]	; (10164 <_dtoa_r+0x33c>)
    fe98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fe9a:	6013      	str	r3, [r2, #0]
    fe9c:	3b01      	subs	r3, #1
    fe9e:	9300      	str	r3, [sp, #0]
    fea0:	9800      	ldr	r0, [sp, #0]
    fea2:	b00f      	add	sp, #60	; 0x3c
    fea4:	ecbd 8b02 	vpop	{d8}
    fea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    feac:	aa0c      	add	r2, sp, #48	; 0x30
    feae:	a90d      	add	r1, sp, #52	; 0x34
    feb0:	4620      	mov	r0, r4
    feb2:	eeb0 0b48 	vmov.f64	d0, d8
    feb6:	f7fd fef3 	bl	dca0 <__d2b>
    feba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    febe:	4605      	mov	r5, r0
    fec0:	f040 8092 	bne.w	ffe8 <_dtoa_r+0x1c0>
    fec4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    fec8:	440b      	add	r3, r1
    feca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    fece:	2a20      	cmp	r2, #32
    fed0:	f340 82fa 	ble.w	104c8 <_dtoa_r+0x6a0>
    fed4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    fed8:	fa08 f802 	lsl.w	r8, r8, r2
    fedc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    fee0:	40d6      	lsrs	r6, r2
    fee2:	ea48 0206 	orr.w	r2, r8, r6
    fee6:	ee07 2a10 	vmov	s14, r2
    feea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    feee:	1e58      	subs	r0, r3, #1
    fef0:	ee17 6a90 	vmov	r6, s15
    fef4:	ec53 2b17 	vmov	r2, r3, d7
    fef8:	f04f 0a01 	mov.w	sl, #1
    fefc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    ff00:	ed9f 3b91 	vldr	d3, [pc, #580]	; 10148 <_dtoa_r+0x320>
    ff04:	ed9f 7b92 	vldr	d7, [pc, #584]	; 10150 <_dtoa_r+0x328>
    ff08:	ed9f 5b93 	vldr	d5, [pc, #588]	; 10158 <_dtoa_r+0x330>
    ff0c:	ee06 0a90 	vmov	s13, r0
    ff10:	ec43 2b12 	vmov	d2, r2, r3
    ff14:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    ff18:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    ff1c:	ee32 6b46 	vsub.f64	d6, d2, d6
    ff20:	eea6 7b03 	vfma.f64	d7, d6, d3
    ff24:	eea4 7b05 	vfma.f64	d7, d4, d5
    ff28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ff2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    ff30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff34:	ee16 7a90 	vmov	r7, s13
    ff38:	d508      	bpl.n	ff4c <_dtoa_r+0x124>
    ff3a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    ff3e:	eeb4 6b47 	vcmp.f64	d6, d7
    ff42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff46:	bf18      	it	ne
    ff48:	f107 37ff 	addne.w	r7, r7, #4294967295
    ff4c:	2f16      	cmp	r7, #22
    ff4e:	f200 8145 	bhi.w	101dc <_dtoa_r+0x3b4>
    ff52:	4b85      	ldr	r3, [pc, #532]	; (10168 <_dtoa_r+0x340>)
    ff54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ff58:	ed93 7b00 	vldr	d7, [r3]
    ff5c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ff60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff64:	d557      	bpl.n	10016 <_dtoa_r+0x1ee>
    ff66:	1a09      	subs	r1, r1, r0
    ff68:	2300      	movs	r3, #0
    ff6a:	f1b1 0801 	subs.w	r8, r1, #1
    ff6e:	f107 37ff 	add.w	r7, r7, #4294967295
    ff72:	930a      	str	r3, [sp, #40]	; 0x28
    ff74:	f100 8139 	bmi.w	101ea <_dtoa_r+0x3c2>
    ff78:	2300      	movs	r3, #0
    ff7a:	9306      	str	r3, [sp, #24]
    ff7c:	2f00      	cmp	r7, #0
    ff7e:	da52      	bge.n	10026 <_dtoa_r+0x1fe>
    ff80:	9b06      	ldr	r3, [sp, #24]
    ff82:	9704      	str	r7, [sp, #16]
    ff84:	1bdb      	subs	r3, r3, r7
    ff86:	9306      	str	r3, [sp, #24]
    ff88:	427b      	negs	r3, r7
    ff8a:	9308      	str	r3, [sp, #32]
    ff8c:	9b01      	ldr	r3, [sp, #4]
    ff8e:	2b09      	cmp	r3, #9
    ff90:	f04f 0700 	mov.w	r7, #0
    ff94:	d84e      	bhi.n	10034 <_dtoa_r+0x20c>
    ff96:	2b05      	cmp	r3, #5
    ff98:	f340 829d 	ble.w	104d6 <_dtoa_r+0x6ae>
    ff9c:	3b04      	subs	r3, #4
    ff9e:	9301      	str	r3, [sp, #4]
    ffa0:	2600      	movs	r6, #0
    ffa2:	9b01      	ldr	r3, [sp, #4]
    ffa4:	1e9a      	subs	r2, r3, #2
    ffa6:	2a03      	cmp	r2, #3
    ffa8:	f200 8125 	bhi.w	101f6 <_dtoa_r+0x3ce>
    ffac:	e8df f012 	tbh	[pc, r2, lsl #1]
    ffb0:	03a703aa 	.word	0x03a703aa
    ffb4:	037e039d 	.word	0x037e039d
    ffb8:	9a05      	ldr	r2, [sp, #20]
    ffba:	f3c8 0813 	ubfx	r8, r8, #0, #20
    ffbe:	f242 730f 	movw	r3, #9999	; 0x270f
    ffc2:	ea58 0806 	orrs.w	r8, r8, r6
    ffc6:	6013      	str	r3, [r2, #0]
    ffc8:	d11e      	bne.n	10008 <_dtoa_r+0x1e0>
    ffca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ffcc:	2b00      	cmp	r3, #0
    ffce:	f000 8591 	beq.w	10af4 <_dtoa_r+0xccc>
    ffd2:	4b66      	ldr	r3, [pc, #408]	; (1016c <_dtoa_r+0x344>)
    ffd4:	9300      	str	r3, [sp, #0]
    ffd6:	3308      	adds	r3, #8
    ffd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ffda:	9800      	ldr	r0, [sp, #0]
    ffdc:	6013      	str	r3, [r2, #0]
    ffde:	b00f      	add	sp, #60	; 0x3c
    ffe0:	ecbd 8b02 	vpop	{d8}
    ffe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffe8:	ee18 6a90 	vmov	r6, s17
    ffec:	f3c6 0613 	ubfx	r6, r6, #0, #20
    fff0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    fff4:	ec53 2b18 	vmov	r2, r3, d8
    fff8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    fffc:	990c      	ldr	r1, [sp, #48]	; 0x30
    fffe:	f04f 0a00 	mov.w	sl, #0
   10002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   10006:	e77b      	b.n	ff00 <_dtoa_r+0xd8>
   10008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1000a:	2b00      	cmp	r3, #0
   1000c:	f040 833b 	bne.w	10686 <_dtoa_r+0x85e>
   10010:	4b57      	ldr	r3, [pc, #348]	; (10170 <_dtoa_r+0x348>)
   10012:	9300      	str	r3, [sp, #0]
   10014:	e744      	b.n	fea0 <_dtoa_r+0x78>
   10016:	1a09      	subs	r1, r1, r0
   10018:	2300      	movs	r3, #0
   1001a:	f1b1 0801 	subs.w	r8, r1, #1
   1001e:	930a      	str	r3, [sp, #40]	; 0x28
   10020:	f100 80e3 	bmi.w	101ea <_dtoa_r+0x3c2>
   10024:	9306      	str	r3, [sp, #24]
   10026:	2300      	movs	r3, #0
   10028:	9308      	str	r3, [sp, #32]
   1002a:	9b01      	ldr	r3, [sp, #4]
   1002c:	9704      	str	r7, [sp, #16]
   1002e:	2b09      	cmp	r3, #9
   10030:	44b8      	add	r8, r7
   10032:	d9b0      	bls.n	ff96 <_dtoa_r+0x16e>
   10034:	2300      	movs	r3, #0
   10036:	2601      	movs	r6, #1
   10038:	9301      	str	r3, [sp, #4]
   1003a:	9607      	str	r6, [sp, #28]
   1003c:	f04f 39ff 	mov.w	r9, #4294967295
   10040:	469b      	mov	fp, r3
   10042:	2100      	movs	r1, #0
   10044:	63e1      	str	r1, [r4, #60]	; 0x3c
   10046:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1004a:	4620      	mov	r0, r4
   1004c:	f7fd fad6 	bl	d5fc <_Balloc>
   10050:	9000      	str	r0, [sp, #0]
   10052:	2800      	cmp	r0, #0
   10054:	f000 8540 	beq.w	10ad8 <_dtoa_r+0xcb0>
   10058:	9b00      	ldr	r3, [sp, #0]
   1005a:	63a3      	str	r3, [r4, #56]	; 0x38
   1005c:	f1b9 0f0e 	cmp.w	r9, #14
   10060:	f200 80dc 	bhi.w	1021c <_dtoa_r+0x3f4>
   10064:	2e00      	cmp	r6, #0
   10066:	f000 80d9 	beq.w	1021c <_dtoa_r+0x3f4>
   1006a:	9b04      	ldr	r3, [sp, #16]
   1006c:	2b00      	cmp	r3, #0
   1006e:	f340 83de 	ble.w	1082e <_dtoa_r+0xa06>
   10072:	4a3d      	ldr	r2, [pc, #244]	; (10168 <_dtoa_r+0x340>)
   10074:	f003 010f 	and.w	r1, r3, #15
   10078:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1007c:	ed92 7b00 	vldr	d7, [r2]
   10080:	111a      	asrs	r2, r3, #4
   10082:	05db      	lsls	r3, r3, #23
   10084:	f140 8382 	bpl.w	1078c <_dtoa_r+0x964>
   10088:	493a      	ldr	r1, [pc, #232]	; (10174 <_dtoa_r+0x34c>)
   1008a:	ed91 6b08 	vldr	d6, [r1, #32]
   1008e:	f002 020f 	and.w	r2, r2, #15
   10092:	2003      	movs	r0, #3
   10094:	ee88 5b06 	vdiv.f64	d5, d8, d6
   10098:	b15a      	cbz	r2, 100b2 <_dtoa_r+0x28a>
   1009a:	4936      	ldr	r1, [pc, #216]	; (10174 <_dtoa_r+0x34c>)
   1009c:	07d6      	lsls	r6, r2, #31
   1009e:	d504      	bpl.n	100aa <_dtoa_r+0x282>
   100a0:	ed91 6b00 	vldr	d6, [r1]
   100a4:	3001      	adds	r0, #1
   100a6:	ee27 7b06 	vmul.f64	d7, d7, d6
   100aa:	1052      	asrs	r2, r2, #1
   100ac:	f101 0108 	add.w	r1, r1, #8
   100b0:	d1f4      	bne.n	1009c <_dtoa_r+0x274>
   100b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
   100b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100b8:	b13b      	cbz	r3, 100ca <_dtoa_r+0x2a2>
   100ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   100be:	eeb4 6bc7 	vcmpe.f64	d6, d7
   100c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   100c6:	f100 84ae 	bmi.w	10a26 <_dtoa_r+0xbfe>
   100ca:	ee07 0a90 	vmov	s15, r0
   100ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   100d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   100d6:	eea5 7b06 	vfma.f64	d7, d5, d6
   100da:	ee17 2a90 	vmov	r2, s15
   100de:	ec51 0b17 	vmov	r0, r1, d7
   100e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   100e6:	f1b9 0f00 	cmp.w	r9, #0
   100ea:	f000 8388 	beq.w	107fe <_dtoa_r+0x9d6>
   100ee:	9e04      	ldr	r6, [sp, #16]
   100f0:	464a      	mov	r2, r9
   100f2:	9b07      	ldr	r3, [sp, #28]
   100f4:	2b00      	cmp	r3, #0
   100f6:	f000 8447 	beq.w	10988 <_dtoa_r+0xb60>
   100fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   100fe:	4b1a      	ldr	r3, [pc, #104]	; (10168 <_dtoa_r+0x340>)
   10100:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   10104:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   10108:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1010c:	ee36 7b47 	vsub.f64	d7, d6, d7
   10110:	ed1c 6b02 	vldr	d6, [ip, #-8]
   10114:	ee83 5b06 	vdiv.f64	d5, d3, d6
   10118:	ec41 0b16 	vmov	d6, r0, r1
   1011c:	ee14 0a90 	vmov	r0, s9
   10120:	ee35 5b46 	vsub.f64	d5, d5, d6
   10124:	9900      	ldr	r1, [sp, #0]
   10126:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1012a:	3030      	adds	r0, #48	; 0x30
   1012c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10130:	f801 0b01 	strb.w	r0, [r1], #1
   10134:	f300 84ac 	bgt.w	10a90 <_dtoa_r+0xc68>
   10138:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   1013c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10140:	f04f 0c00 	mov.w	ip, #0
   10144:	e031      	b.n	101aa <_dtoa_r+0x382>
   10146:	bf00      	nop
   10148:	636f4361 	.word	0x636f4361
   1014c:	3fd287a7 	.word	0x3fd287a7
   10150:	8b60c8b3 	.word	0x8b60c8b3
   10154:	3fc68a28 	.word	0x3fc68a28
   10158:	509f79fb 	.word	0x509f79fb
   1015c:	3fd34413 	.word	0x3fd34413
   10160:	7ff00000 	.word	0x7ff00000
   10164:	20000cad 	.word	0x20000cad
   10168:	200002a8 	.word	0x200002a8
   1016c:	20000c00 	.word	0x20000c00
   10170:	20000c0c 	.word	0x20000c0c
   10174:	20000280 	.word	0x20000280
   10178:	f10c 0c01 	add.w	ip, ip, #1
   1017c:	4594      	cmp	ip, r2
   1017e:	da4d      	bge.n	1021c <_dtoa_r+0x3f4>
   10180:	ee27 7b04 	vmul.f64	d7, d7, d4
   10184:	ee25 5b04 	vmul.f64	d5, d5, d4
   10188:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1018c:	ee16 3a90 	vmov	r3, s13
   10190:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   10194:	3330      	adds	r3, #48	; 0x30
   10196:	ee37 7b43 	vsub.f64	d7, d7, d3
   1019a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1019e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101a2:	f801 3b01 	strb.w	r3, [r1], #1
   101a6:	f100 8473 	bmi.w	10a90 <_dtoa_r+0xc68>
   101aa:	ee32 6b47 	vsub.f64	d6, d2, d7
   101ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
   101b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101b6:	d5df      	bpl.n	10178 <_dtoa_r+0x350>
   101b8:	9a00      	ldr	r2, [sp, #0]
   101ba:	9604      	str	r6, [sp, #16]
   101bc:	e002      	b.n	101c4 <_dtoa_r+0x39c>
   101be:	428a      	cmp	r2, r1
   101c0:	f000 8450 	beq.w	10a64 <_dtoa_r+0xc3c>
   101c4:	4689      	mov	r9, r1
   101c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   101ca:	2b39      	cmp	r3, #57	; 0x39
   101cc:	d0f7      	beq.n	101be <_dtoa_r+0x396>
   101ce:	3301      	adds	r3, #1
   101d0:	b2db      	uxtb	r3, r3
   101d2:	700b      	strb	r3, [r1, #0]
   101d4:	9b04      	ldr	r3, [sp, #16]
   101d6:	3301      	adds	r3, #1
   101d8:	9304      	str	r3, [sp, #16]
   101da:	e155      	b.n	10488 <_dtoa_r+0x660>
   101dc:	1a09      	subs	r1, r1, r0
   101de:	2301      	movs	r3, #1
   101e0:	f1b1 0801 	subs.w	r8, r1, #1
   101e4:	930a      	str	r3, [sp, #40]	; 0x28
   101e6:	f57f aec7 	bpl.w	ff78 <_dtoa_r+0x150>
   101ea:	f1c1 0301 	rsb	r3, r1, #1
   101ee:	9306      	str	r3, [sp, #24]
   101f0:	f04f 0800 	mov.w	r8, #0
   101f4:	e6c2      	b.n	ff7c <_dtoa_r+0x154>
   101f6:	2600      	movs	r6, #0
   101f8:	63e6      	str	r6, [r4, #60]	; 0x3c
   101fa:	4631      	mov	r1, r6
   101fc:	4620      	mov	r0, r4
   101fe:	f7fd f9fd 	bl	d5fc <_Balloc>
   10202:	9000      	str	r0, [sp, #0]
   10204:	2800      	cmp	r0, #0
   10206:	f000 8467 	beq.w	10ad8 <_dtoa_r+0xcb0>
   1020a:	9b00      	ldr	r3, [sp, #0]
   1020c:	63a3      	str	r3, [r4, #56]	; 0x38
   1020e:	f04f 33ff 	mov.w	r3, #4294967295
   10212:	930b      	str	r3, [sp, #44]	; 0x2c
   10214:	4699      	mov	r9, r3
   10216:	2301      	movs	r3, #1
   10218:	46b3      	mov	fp, r6
   1021a:	9307      	str	r3, [sp, #28]
   1021c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1021e:	2a00      	cmp	r2, #0
   10220:	db55      	blt.n	102ce <_dtoa_r+0x4a6>
   10222:	9904      	ldr	r1, [sp, #16]
   10224:	290e      	cmp	r1, #14
   10226:	dc52      	bgt.n	102ce <_dtoa_r+0x4a6>
   10228:	4bb7      	ldr	r3, [pc, #732]	; (10508 <_dtoa_r+0x6e0>)
   1022a:	f1bb 0f00 	cmp.w	fp, #0
   1022e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10232:	ed93 6b00 	vldr	d6, [r3]
   10236:	da15      	bge.n	10264 <_dtoa_r+0x43c>
   10238:	f1b9 0f00 	cmp.w	r9, #0
   1023c:	dc12      	bgt.n	10264 <_dtoa_r+0x43c>
   1023e:	f040 82f2 	bne.w	10826 <_dtoa_r+0x9fe>
   10242:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   10246:	ee26 7b07 	vmul.f64	d7, d6, d7
   1024a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1024e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10252:	46ca      	mov	sl, r9
   10254:	464e      	mov	r6, r9
   10256:	f200 826d 	bhi.w	10734 <_dtoa_r+0x90c>
   1025a:	f8dd 8000 	ldr.w	r8, [sp]
   1025e:	ea6f 0b0b 	mvn.w	fp, fp
   10262:	e270      	b.n	10746 <_dtoa_r+0x91e>
   10264:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10268:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1026c:	9900      	ldr	r1, [sp, #0]
   1026e:	ee17 3a10 	vmov	r3, s14
   10272:	f1b9 0f01 	cmp.w	r9, #1
   10276:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1027a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1027e:	f801 3b01 	strb.w	r3, [r1], #1
   10282:	eea5 8b46 	vfms.f64	d8, d5, d6
   10286:	f000 8334 	beq.w	108f2 <_dtoa_r+0xaca>
   1028a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1028e:	2301      	movs	r3, #1
   10290:	e011      	b.n	102b6 <_dtoa_r+0x48e>
   10292:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10296:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1029a:	3301      	adds	r3, #1
   1029c:	ee17 2a10 	vmov	r2, s14
   102a0:	454b      	cmp	r3, r9
   102a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
   102a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   102aa:	f801 2b01 	strb.w	r2, [r1], #1
   102ae:	eea5 8b46 	vfms.f64	d8, d5, d6
   102b2:	f000 831e 	beq.w	108f2 <_dtoa_r+0xaca>
   102b6:	ee28 8b04 	vmul.f64	d8, d8, d4
   102ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
   102be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102c2:	d1e6      	bne.n	10292 <_dtoa_r+0x46a>
   102c4:	9b04      	ldr	r3, [sp, #16]
   102c6:	3301      	adds	r3, #1
   102c8:	9304      	str	r3, [sp, #16]
   102ca:	4689      	mov	r9, r1
   102cc:	e0dc      	b.n	10488 <_dtoa_r+0x660>
   102ce:	9b07      	ldr	r3, [sp, #28]
   102d0:	b343      	cbz	r3, 10324 <_dtoa_r+0x4fc>
   102d2:	9b01      	ldr	r3, [sp, #4]
   102d4:	2b01      	cmp	r3, #1
   102d6:	f340 8276 	ble.w	107c6 <_dtoa_r+0x99e>
   102da:	9b08      	ldr	r3, [sp, #32]
   102dc:	f109 3aff 	add.w	sl, r9, #4294967295
   102e0:	4553      	cmp	r3, sl
   102e2:	f280 823f 	bge.w	10764 <_dtoa_r+0x93c>
   102e6:	9b08      	ldr	r3, [sp, #32]
   102e8:	f8cd a020 	str.w	sl, [sp, #32]
   102ec:	ebaa 0203 	sub.w	r2, sl, r3
   102f0:	4417      	add	r7, r2
   102f2:	f04f 0a00 	mov.w	sl, #0
   102f6:	f1b9 0f00 	cmp.w	r9, #0
   102fa:	f2c0 8325 	blt.w	10948 <_dtoa_r+0xb20>
   102fe:	9b06      	ldr	r3, [sp, #24]
   10300:	9309      	str	r3, [sp, #36]	; 0x24
   10302:	444b      	add	r3, r9
   10304:	44c8      	add	r8, r9
   10306:	9306      	str	r3, [sp, #24]
   10308:	2101      	movs	r1, #1
   1030a:	4620      	mov	r0, r4
   1030c:	f7fd fa48 	bl	d7a0 <__i2b>
   10310:	4606      	mov	r6, r0
   10312:	e00c      	b.n	1032e <_dtoa_r+0x506>
   10314:	4b7d      	ldr	r3, [pc, #500]	; (1050c <_dtoa_r+0x6e4>)
   10316:	9300      	str	r3, [sp, #0]
   10318:	9800      	ldr	r0, [sp, #0]
   1031a:	b00f      	add	sp, #60	; 0x3c
   1031c:	ecbd 8b02 	vpop	{d8}
   10320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10324:	9b06      	ldr	r3, [sp, #24]
   10326:	f8dd a020 	ldr.w	sl, [sp, #32]
   1032a:	9e07      	ldr	r6, [sp, #28]
   1032c:	9309      	str	r3, [sp, #36]	; 0x24
   1032e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10330:	b16b      	cbz	r3, 1034e <_dtoa_r+0x526>
   10332:	f1b8 0f00 	cmp.w	r8, #0
   10336:	dd0a      	ble.n	1034e <_dtoa_r+0x526>
   10338:	4543      	cmp	r3, r8
   1033a:	9906      	ldr	r1, [sp, #24]
   1033c:	461a      	mov	r2, r3
   1033e:	bfa8      	it	ge
   10340:	4642      	movge	r2, r8
   10342:	1a89      	subs	r1, r1, r2
   10344:	1a9b      	subs	r3, r3, r2
   10346:	9106      	str	r1, [sp, #24]
   10348:	9309      	str	r3, [sp, #36]	; 0x24
   1034a:	eba8 0802 	sub.w	r8, r8, r2
   1034e:	9b08      	ldr	r3, [sp, #32]
   10350:	b163      	cbz	r3, 1036c <_dtoa_r+0x544>
   10352:	9b07      	ldr	r3, [sp, #28]
   10354:	2b00      	cmp	r3, #0
   10356:	f000 82a7 	beq.w	108a8 <_dtoa_r+0xa80>
   1035a:	f1ba 0f00 	cmp.w	sl, #0
   1035e:	f300 8204 	bgt.w	1076a <_dtoa_r+0x942>
   10362:	9b08      	ldr	r3, [sp, #32]
   10364:	ebb3 020a 	subs.w	r2, r3, sl
   10368:	f040 82ff 	bne.w	1096a <_dtoa_r+0xb42>
   1036c:	2101      	movs	r1, #1
   1036e:	4620      	mov	r0, r4
   10370:	f7fd fa16 	bl	d7a0 <__i2b>
   10374:	2f00      	cmp	r7, #0
   10376:	4682      	mov	sl, r0
   10378:	f300 80af 	bgt.w	104da <_dtoa_r+0x6b2>
   1037c:	9b01      	ldr	r3, [sp, #4]
   1037e:	2b01      	cmp	r3, #1
   10380:	f340 8187 	ble.w	10692 <_dtoa_r+0x86a>
   10384:	2300      	movs	r3, #0
   10386:	9308      	str	r3, [sp, #32]
   10388:	2001      	movs	r0, #1
   1038a:	2f00      	cmp	r7, #0
   1038c:	f040 80b1 	bne.w	104f2 <_dtoa_r+0x6ca>
   10390:	4440      	add	r0, r8
   10392:	f010 001f 	ands.w	r0, r0, #31
   10396:	f000 817a 	beq.w	1068e <_dtoa_r+0x866>
   1039a:	f1c0 0220 	rsb	r2, r0, #32
   1039e:	2a04      	cmp	r2, #4
   103a0:	f300 8088 	bgt.w	104b4 <_dtoa_r+0x68c>
   103a4:	f040 81f6 	bne.w	10794 <_dtoa_r+0x96c>
   103a8:	9b06      	ldr	r3, [sp, #24]
   103aa:	2b00      	cmp	r3, #0
   103ac:	dd05      	ble.n	103ba <_dtoa_r+0x592>
   103ae:	4629      	mov	r1, r5
   103b0:	461a      	mov	r2, r3
   103b2:	4620      	mov	r0, r4
   103b4:	f7fd fb30 	bl	da18 <__lshift>
   103b8:	4605      	mov	r5, r0
   103ba:	f1b8 0f00 	cmp.w	r8, #0
   103be:	dd05      	ble.n	103cc <_dtoa_r+0x5a4>
   103c0:	4651      	mov	r1, sl
   103c2:	4642      	mov	r2, r8
   103c4:	4620      	mov	r0, r4
   103c6:	f7fd fb27 	bl	da18 <__lshift>
   103ca:	4682      	mov	sl, r0
   103cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103ce:	2b00      	cmp	r3, #0
   103d0:	f040 813f 	bne.w	10652 <_dtoa_r+0x82a>
   103d4:	f1b9 0f00 	cmp.w	r9, #0
   103d8:	f340 8125 	ble.w	10626 <_dtoa_r+0x7fe>
   103dc:	9b07      	ldr	r3, [sp, #28]
   103de:	2b00      	cmp	r3, #0
   103e0:	f040 80a3 	bne.w	1052a <_dtoa_r+0x702>
   103e4:	9b04      	ldr	r3, [sp, #16]
   103e6:	3301      	adds	r3, #1
   103e8:	9304      	str	r3, [sp, #16]
   103ea:	f8dd 8000 	ldr.w	r8, [sp]
   103ee:	2701      	movs	r7, #1
   103f0:	e007      	b.n	10402 <_dtoa_r+0x5da>
   103f2:	4629      	mov	r1, r5
   103f4:	2300      	movs	r3, #0
   103f6:	220a      	movs	r2, #10
   103f8:	4620      	mov	r0, r4
   103fa:	f7fd f92f 	bl	d65c <__multadd>
   103fe:	3701      	adds	r7, #1
   10400:	4605      	mov	r5, r0
   10402:	4651      	mov	r1, sl
   10404:	4628      	mov	r0, r5
   10406:	f7ff fc7b 	bl	fd00 <quorem>
   1040a:	45b9      	cmp	r9, r7
   1040c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   10410:	f808 0b01 	strb.w	r0, [r8], #1
   10414:	dced      	bgt.n	103f2 <_dtoa_r+0x5ca>
   10416:	f1b9 0f00 	cmp.w	r9, #0
   1041a:	9a00      	ldr	r2, [sp, #0]
   1041c:	bfcc      	ite	gt
   1041e:	46cb      	movgt	fp, r9
   10420:	f04f 0b01 	movle.w	fp, #1
   10424:	4603      	mov	r3, r0
   10426:	4493      	add	fp, r2
   10428:	2700      	movs	r7, #0
   1042a:	4629      	mov	r1, r5
   1042c:	2201      	movs	r2, #1
   1042e:	4620      	mov	r0, r4
   10430:	9301      	str	r3, [sp, #4]
   10432:	f7fd faf1 	bl	da18 <__lshift>
   10436:	4651      	mov	r1, sl
   10438:	4605      	mov	r5, r0
   1043a:	f7fd fb65 	bl	db08 <__mcmp>
   1043e:	2800      	cmp	r0, #0
   10440:	f340 81af 	ble.w	107a2 <_dtoa_r+0x97a>
   10444:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10448:	9a00      	ldr	r2, [sp, #0]
   1044a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1044e:	e004      	b.n	1045a <_dtoa_r+0x632>
   10450:	455a      	cmp	r2, fp
   10452:	f000 81b1 	beq.w	107b8 <_dtoa_r+0x990>
   10456:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1045a:	2b39      	cmp	r3, #57	; 0x39
   1045c:	f10b 0901 	add.w	r9, fp, #1
   10460:	d0f6      	beq.n	10450 <_dtoa_r+0x628>
   10462:	3301      	adds	r3, #1
   10464:	f88b 3000 	strb.w	r3, [fp]
   10468:	4651      	mov	r1, sl
   1046a:	4620      	mov	r0, r4
   1046c:	f7fd f8ec 	bl	d648 <_Bfree>
   10470:	b156      	cbz	r6, 10488 <_dtoa_r+0x660>
   10472:	b12f      	cbz	r7, 10480 <_dtoa_r+0x658>
   10474:	42b7      	cmp	r7, r6
   10476:	d003      	beq.n	10480 <_dtoa_r+0x658>
   10478:	4639      	mov	r1, r7
   1047a:	4620      	mov	r0, r4
   1047c:	f7fd f8e4 	bl	d648 <_Bfree>
   10480:	4631      	mov	r1, r6
   10482:	4620      	mov	r0, r4
   10484:	f7fd f8e0 	bl	d648 <_Bfree>
   10488:	4629      	mov	r1, r5
   1048a:	4620      	mov	r0, r4
   1048c:	f7fd f8dc 	bl	d648 <_Bfree>
   10490:	2300      	movs	r3, #0
   10492:	f889 3000 	strb.w	r3, [r9]
   10496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1049a:	601a      	str	r2, [r3, #0]
   1049c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1049e:	2b00      	cmp	r3, #0
   104a0:	f43f acfe 	beq.w	fea0 <_dtoa_r+0x78>
   104a4:	9800      	ldr	r0, [sp, #0]
   104a6:	f8c3 9000 	str.w	r9, [r3]
   104aa:	b00f      	add	sp, #60	; 0x3c
   104ac:	ecbd 8b02 	vpop	{d8}
   104b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104b4:	f1c0 001c 	rsb	r0, r0, #28
   104b8:	9b06      	ldr	r3, [sp, #24]
   104ba:	4403      	add	r3, r0
   104bc:	9306      	str	r3, [sp, #24]
   104be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104c0:	4403      	add	r3, r0
   104c2:	9309      	str	r3, [sp, #36]	; 0x24
   104c4:	4480      	add	r8, r0
   104c6:	e76f      	b.n	103a8 <_dtoa_r+0x580>
   104c8:	f1c2 0220 	rsb	r2, r2, #32
   104cc:	fa06 f202 	lsl.w	r2, r6, r2
   104d0:	ee07 2a10 	vmov	s14, r2
   104d4:	e509      	b.n	feea <_dtoa_r+0xc2>
   104d6:	2601      	movs	r6, #1
   104d8:	e563      	b.n	ffa2 <_dtoa_r+0x17a>
   104da:	4601      	mov	r1, r0
   104dc:	463a      	mov	r2, r7
   104de:	4620      	mov	r0, r4
   104e0:	f7fd fa3a 	bl	d958 <__pow5mult>
   104e4:	9b01      	ldr	r3, [sp, #4]
   104e6:	2b01      	cmp	r3, #1
   104e8:	4682      	mov	sl, r0
   104ea:	f340 81c5 	ble.w	10878 <_dtoa_r+0xa50>
   104ee:	2300      	movs	r3, #0
   104f0:	9308      	str	r3, [sp, #32]
   104f2:	f8da 2010 	ldr.w	r2, [sl, #16]
   104f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   104fa:	6910      	ldr	r0, [r2, #16]
   104fc:	f7fd f900 	bl	d700 <__hi0bits>
   10500:	f1c0 0020 	rsb	r0, r0, #32
   10504:	e744      	b.n	10390 <_dtoa_r+0x568>
   10506:	bf00      	nop
   10508:	200002a8 	.word	0x200002a8
   1050c:	20000cac 	.word	0x20000cac
   10510:	4631      	mov	r1, r6
   10512:	2300      	movs	r3, #0
   10514:	220a      	movs	r2, #10
   10516:	4620      	mov	r0, r4
   10518:	f7fd f8a0 	bl	d65c <__multadd>
   1051c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1051e:	2b00      	cmp	r3, #0
   10520:	4606      	mov	r6, r0
   10522:	f340 82ce 	ble.w	10ac2 <_dtoa_r+0xc9a>
   10526:	9704      	str	r7, [sp, #16]
   10528:	4699      	mov	r9, r3
   1052a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1052c:	2b00      	cmp	r3, #0
   1052e:	dd05      	ble.n	1053c <_dtoa_r+0x714>
   10530:	4631      	mov	r1, r6
   10532:	461a      	mov	r2, r3
   10534:	4620      	mov	r0, r4
   10536:	f7fd fa6f 	bl	da18 <__lshift>
   1053a:	4606      	mov	r6, r0
   1053c:	9b08      	ldr	r3, [sp, #32]
   1053e:	2b00      	cmp	r3, #0
   10540:	f040 81eb 	bne.w	1091a <_dtoa_r+0xaf2>
   10544:	46b0      	mov	r8, r6
   10546:	9b02      	ldr	r3, [sp, #8]
   10548:	9f00      	ldr	r7, [sp, #0]
   1054a:	f003 0201 	and.w	r2, r3, #1
   1054e:	1e7b      	subs	r3, r7, #1
   10550:	444b      	add	r3, r9
   10552:	9308      	str	r3, [sp, #32]
   10554:	9b01      	ldr	r3, [sp, #4]
   10556:	920a      	str	r2, [sp, #40]	; 0x28
   10558:	4313      	orrs	r3, r2
   1055a:	9309      	str	r3, [sp, #36]	; 0x24
   1055c:	4651      	mov	r1, sl
   1055e:	4628      	mov	r0, r5
   10560:	f7ff fbce 	bl	fd00 <quorem>
   10564:	4631      	mov	r1, r6
   10566:	4683      	mov	fp, r0
   10568:	4628      	mov	r0, r5
   1056a:	f7fd facd 	bl	db08 <__mcmp>
   1056e:	4642      	mov	r2, r8
   10570:	4651      	mov	r1, sl
   10572:	4681      	mov	r9, r0
   10574:	4620      	mov	r0, r4
   10576:	f7fd fae9 	bl	db4c <__mdiff>
   1057a:	68c2      	ldr	r2, [r0, #12]
   1057c:	4601      	mov	r1, r0
   1057e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10582:	2a00      	cmp	r2, #0
   10584:	d142      	bne.n	1060c <_dtoa_r+0x7e4>
   10586:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1058a:	4628      	mov	r0, r5
   1058c:	f7fd fabc 	bl	db08 <__mcmp>
   10590:	9906      	ldr	r1, [sp, #24]
   10592:	9002      	str	r0, [sp, #8]
   10594:	4620      	mov	r0, r4
   10596:	f7fd f857 	bl	d648 <_Bfree>
   1059a:	9a02      	ldr	r2, [sp, #8]
   1059c:	9b07      	ldr	r3, [sp, #28]
   1059e:	b91a      	cbnz	r2, 105a8 <_dtoa_r+0x780>
   105a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   105a2:	2900      	cmp	r1, #0
   105a4:	f000 827e 	beq.w	10aa4 <_dtoa_r+0xc7c>
   105a8:	f1b9 0f00 	cmp.w	r9, #0
   105ac:	f2c0 8183 	blt.w	108b6 <_dtoa_r+0xa8e>
   105b0:	9901      	ldr	r1, [sp, #4]
   105b2:	ea49 0901 	orr.w	r9, r9, r1
   105b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   105b8:	ea51 0909 	orrs.w	r9, r1, r9
   105bc:	f000 817b 	beq.w	108b6 <_dtoa_r+0xa8e>
   105c0:	2a00      	cmp	r2, #0
   105c2:	f300 81c6 	bgt.w	10952 <_dtoa_r+0xb2a>
   105c6:	9a08      	ldr	r2, [sp, #32]
   105c8:	703b      	strb	r3, [r7, #0]
   105ca:	f107 0901 	add.w	r9, r7, #1
   105ce:	4297      	cmp	r7, r2
   105d0:	46cb      	mov	fp, r9
   105d2:	f000 81c4 	beq.w	1095e <_dtoa_r+0xb36>
   105d6:	4629      	mov	r1, r5
   105d8:	2300      	movs	r3, #0
   105da:	220a      	movs	r2, #10
   105dc:	4620      	mov	r0, r4
   105de:	f7fd f83d 	bl	d65c <__multadd>
   105e2:	4546      	cmp	r6, r8
   105e4:	4605      	mov	r5, r0
   105e6:	4631      	mov	r1, r6
   105e8:	f04f 0300 	mov.w	r3, #0
   105ec:	f04f 020a 	mov.w	r2, #10
   105f0:	4620      	mov	r0, r4
   105f2:	d012      	beq.n	1061a <_dtoa_r+0x7f2>
   105f4:	f7fd f832 	bl	d65c <__multadd>
   105f8:	4641      	mov	r1, r8
   105fa:	4606      	mov	r6, r0
   105fc:	2300      	movs	r3, #0
   105fe:	220a      	movs	r2, #10
   10600:	4620      	mov	r0, r4
   10602:	f7fd f82b 	bl	d65c <__multadd>
   10606:	464f      	mov	r7, r9
   10608:	4680      	mov	r8, r0
   1060a:	e7a7      	b.n	1055c <_dtoa_r+0x734>
   1060c:	4620      	mov	r0, r4
   1060e:	9302      	str	r3, [sp, #8]
   10610:	f7fd f81a 	bl	d648 <_Bfree>
   10614:	9b02      	ldr	r3, [sp, #8]
   10616:	2201      	movs	r2, #1
   10618:	e7c6      	b.n	105a8 <_dtoa_r+0x780>
   1061a:	f7fd f81f 	bl	d65c <__multadd>
   1061e:	464f      	mov	r7, r9
   10620:	4606      	mov	r6, r0
   10622:	4680      	mov	r8, r0
   10624:	e79a      	b.n	1055c <_dtoa_r+0x734>
   10626:	9b01      	ldr	r3, [sp, #4]
   10628:	2b02      	cmp	r3, #2
   1062a:	dc71      	bgt.n	10710 <_dtoa_r+0x8e8>
   1062c:	9b07      	ldr	r3, [sp, #28]
   1062e:	2b00      	cmp	r3, #0
   10630:	f47f af7b 	bne.w	1052a <_dtoa_r+0x702>
   10634:	9b04      	ldr	r3, [sp, #16]
   10636:	4651      	mov	r1, sl
   10638:	3301      	adds	r3, #1
   1063a:	4628      	mov	r0, r5
   1063c:	9304      	str	r3, [sp, #16]
   1063e:	f7ff fb5f 	bl	fd00 <quorem>
   10642:	f8dd b000 	ldr.w	fp, [sp]
   10646:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1064a:	f80b 3b01 	strb.w	r3, [fp], #1
   1064e:	2700      	movs	r7, #0
   10650:	e6eb      	b.n	1042a <_dtoa_r+0x602>
   10652:	4651      	mov	r1, sl
   10654:	4628      	mov	r0, r5
   10656:	f7fd fa57 	bl	db08 <__mcmp>
   1065a:	2800      	cmp	r0, #0
   1065c:	f6bf aeba 	bge.w	103d4 <_dtoa_r+0x5ac>
   10660:	4629      	mov	r1, r5
   10662:	2300      	movs	r3, #0
   10664:	220a      	movs	r2, #10
   10666:	4620      	mov	r0, r4
   10668:	f7fc fff8 	bl	d65c <__multadd>
   1066c:	9b04      	ldr	r3, [sp, #16]
   1066e:	1e5f      	subs	r7, r3, #1
   10670:	9b07      	ldr	r3, [sp, #28]
   10672:	4605      	mov	r5, r0
   10674:	2b00      	cmp	r3, #0
   10676:	f47f af4b 	bne.w	10510 <_dtoa_r+0x6e8>
   1067a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1067c:	2b00      	cmp	r3, #0
   1067e:	f340 8218 	ble.w	10ab2 <_dtoa_r+0xc8a>
   10682:	4699      	mov	r9, r3
   10684:	e6b1      	b.n	103ea <_dtoa_r+0x5c2>
   10686:	4bbc      	ldr	r3, [pc, #752]	; (10978 <_dtoa_r+0xb50>)
   10688:	9300      	str	r3, [sp, #0]
   1068a:	3303      	adds	r3, #3
   1068c:	e4a4      	b.n	ffd8 <_dtoa_r+0x1b0>
   1068e:	201c      	movs	r0, #28
   10690:	e712      	b.n	104b8 <_dtoa_r+0x690>
   10692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10696:	2800      	cmp	r0, #0
   10698:	f47f ae74 	bne.w	10384 <_dtoa_r+0x55c>
   1069c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   106a0:	2a00      	cmp	r2, #0
   106a2:	f000 80f4 	beq.w	1088e <_dtoa_r+0xa66>
   106a6:	9b02      	ldr	r3, [sp, #8]
   106a8:	9308      	str	r3, [sp, #32]
   106aa:	e66d      	b.n	10388 <_dtoa_r+0x560>
   106ac:	2301      	movs	r3, #1
   106ae:	9307      	str	r3, [sp, #28]
   106b0:	9b04      	ldr	r3, [sp, #16]
   106b2:	445b      	add	r3, fp
   106b4:	f103 0901 	add.w	r9, r3, #1
   106b8:	f1b9 0f01 	cmp.w	r9, #1
   106bc:	46cc      	mov	ip, r9
   106be:	930b      	str	r3, [sp, #44]	; 0x2c
   106c0:	bfb8      	it	lt
   106c2:	f04f 0c01 	movlt.w	ip, #1
   106c6:	2100      	movs	r1, #0
   106c8:	f1bc 0f17 	cmp.w	ip, #23
   106cc:	63e1      	str	r1, [r4, #60]	; 0x3c
   106ce:	f77f acbc 	ble.w	1004a <_dtoa_r+0x222>
   106d2:	2001      	movs	r0, #1
   106d4:	2204      	movs	r2, #4
   106d6:	0052      	lsls	r2, r2, #1
   106d8:	f102 0314 	add.w	r3, r2, #20
   106dc:	4563      	cmp	r3, ip
   106de:	4601      	mov	r1, r0
   106e0:	f100 0001 	add.w	r0, r0, #1
   106e4:	d9f7      	bls.n	106d6 <_dtoa_r+0x8ae>
   106e6:	63e1      	str	r1, [r4, #60]	; 0x3c
   106e8:	e4af      	b.n	1004a <_dtoa_r+0x222>
   106ea:	2301      	movs	r3, #1
   106ec:	9307      	str	r3, [sp, #28]
   106ee:	f1bb 0f00 	cmp.w	fp, #0
   106f2:	dd52      	ble.n	1079a <_dtoa_r+0x972>
   106f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   106f8:	46d9      	mov	r9, fp
   106fa:	46dc      	mov	ip, fp
   106fc:	e7e3      	b.n	106c6 <_dtoa_r+0x89e>
   106fe:	2300      	movs	r3, #0
   10700:	9307      	str	r3, [sp, #28]
   10702:	e7d5      	b.n	106b0 <_dtoa_r+0x888>
   10704:	2300      	movs	r3, #0
   10706:	9307      	str	r3, [sp, #28]
   10708:	e7f1      	b.n	106ee <_dtoa_r+0x8c6>
   1070a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1070e:	9704      	str	r7, [sp, #16]
   10710:	f1b9 0f00 	cmp.w	r9, #0
   10714:	f47f ada1 	bne.w	1025a <_dtoa_r+0x432>
   10718:	4651      	mov	r1, sl
   1071a:	464b      	mov	r3, r9
   1071c:	2205      	movs	r2, #5
   1071e:	4620      	mov	r0, r4
   10720:	f7fc ff9c 	bl	d65c <__multadd>
   10724:	4601      	mov	r1, r0
   10726:	4682      	mov	sl, r0
   10728:	4628      	mov	r0, r5
   1072a:	f7fd f9ed 	bl	db08 <__mcmp>
   1072e:	2800      	cmp	r0, #0
   10730:	f77f ad93 	ble.w	1025a <_dtoa_r+0x432>
   10734:	9b04      	ldr	r3, [sp, #16]
   10736:	f103 0b01 	add.w	fp, r3, #1
   1073a:	9b00      	ldr	r3, [sp, #0]
   1073c:	2231      	movs	r2, #49	; 0x31
   1073e:	4698      	mov	r8, r3
   10740:	f803 2b01 	strb.w	r2, [r3], #1
   10744:	9300      	str	r3, [sp, #0]
   10746:	4651      	mov	r1, sl
   10748:	4620      	mov	r0, r4
   1074a:	f7fc ff7d 	bl	d648 <_Bfree>
   1074e:	f10b 0301 	add.w	r3, fp, #1
   10752:	f8dd 9000 	ldr.w	r9, [sp]
   10756:	9304      	str	r3, [sp, #16]
   10758:	f8cd 8000 	str.w	r8, [sp]
   1075c:	2e00      	cmp	r6, #0
   1075e:	f47f ae8f 	bne.w	10480 <_dtoa_r+0x658>
   10762:	e691      	b.n	10488 <_dtoa_r+0x660>
   10764:	eba3 0a0a 	sub.w	sl, r3, sl
   10768:	e5c5      	b.n	102f6 <_dtoa_r+0x4ce>
   1076a:	4631      	mov	r1, r6
   1076c:	4652      	mov	r2, sl
   1076e:	4620      	mov	r0, r4
   10770:	f7fd f8f2 	bl	d958 <__pow5mult>
   10774:	462a      	mov	r2, r5
   10776:	4601      	mov	r1, r0
   10778:	4606      	mov	r6, r0
   1077a:	4620      	mov	r0, r4
   1077c:	f7fd f83e 	bl	d7fc <__multiply>
   10780:	4629      	mov	r1, r5
   10782:	4605      	mov	r5, r0
   10784:	4620      	mov	r0, r4
   10786:	f7fc ff5f 	bl	d648 <_Bfree>
   1078a:	e5ea      	b.n	10362 <_dtoa_r+0x53a>
   1078c:	2002      	movs	r0, #2
   1078e:	eeb0 5b48 	vmov.f64	d5, d8
   10792:	e481      	b.n	10098 <_dtoa_r+0x270>
   10794:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   10798:	e68e      	b.n	104b8 <_dtoa_r+0x690>
   1079a:	f04f 0b01 	mov.w	fp, #1
   1079e:	46d9      	mov	r9, fp
   107a0:	e44f      	b.n	10042 <_dtoa_r+0x21a>
   107a2:	d103      	bne.n	107ac <_dtoa_r+0x984>
   107a4:	9b01      	ldr	r3, [sp, #4]
   107a6:	07db      	lsls	r3, r3, #31
   107a8:	f53f ae4c 	bmi.w	10444 <_dtoa_r+0x61c>
   107ac:	46d9      	mov	r9, fp
   107ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   107b2:	2b30      	cmp	r3, #48	; 0x30
   107b4:	d0fa      	beq.n	107ac <_dtoa_r+0x984>
   107b6:	e657      	b.n	10468 <_dtoa_r+0x640>
   107b8:	9b04      	ldr	r3, [sp, #16]
   107ba:	9a00      	ldr	r2, [sp, #0]
   107bc:	3301      	adds	r3, #1
   107be:	9304      	str	r3, [sp, #16]
   107c0:	2331      	movs	r3, #49	; 0x31
   107c2:	7013      	strb	r3, [r2, #0]
   107c4:	e650      	b.n	10468 <_dtoa_r+0x640>
   107c6:	f1ba 0f00 	cmp.w	sl, #0
   107ca:	f000 8123 	beq.w	10a14 <_dtoa_r+0xbec>
   107ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   107d2:	9b06      	ldr	r3, [sp, #24]
   107d4:	9309      	str	r3, [sp, #36]	; 0x24
   107d6:	4413      	add	r3, r2
   107d8:	f8dd a020 	ldr.w	sl, [sp, #32]
   107dc:	9306      	str	r3, [sp, #24]
   107de:	4490      	add	r8, r2
   107e0:	e592      	b.n	10308 <_dtoa_r+0x4e0>
   107e2:	ee07 0a90 	vmov	s15, r0
   107e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   107ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   107ee:	eea6 5b07 	vfma.f64	d5, d6, d7
   107f2:	ee15 2a90 	vmov	r2, s11
   107f6:	ec51 0b15 	vmov	r0, r1, d5
   107fa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   107fe:	ec41 0b15 	vmov	d5, r0, r1
   10802:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   10806:	ee36 7b47 	vsub.f64	d7, d6, d7
   1080a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10812:	f300 8137 	bgt.w	10a84 <_dtoa_r+0xc5c>
   10816:	eeb1 5b45 	vneg.f64	d5, d5
   1081a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10822:	f57f acfb 	bpl.w	1021c <_dtoa_r+0x3f4>
   10826:	f04f 0a00 	mov.w	sl, #0
   1082a:	4656      	mov	r6, sl
   1082c:	e515      	b.n	1025a <_dtoa_r+0x432>
   1082e:	f000 80f5 	beq.w	10a1c <_dtoa_r+0xbf4>
   10832:	9b04      	ldr	r3, [sp, #16]
   10834:	4951      	ldr	r1, [pc, #324]	; (1097c <_dtoa_r+0xb54>)
   10836:	425a      	negs	r2, r3
   10838:	f002 000f 	and.w	r0, r2, #15
   1083c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   10840:	ed91 6b00 	vldr	d6, [r1]
   10844:	1112      	asrs	r2, r2, #4
   10846:	ee28 6b06 	vmul.f64	d6, d8, d6
   1084a:	f000 8142 	beq.w	10ad2 <_dtoa_r+0xcaa>
   1084e:	eeb0 7b46 	vmov.f64	d7, d6
   10852:	494b      	ldr	r1, [pc, #300]	; (10980 <_dtoa_r+0xb58>)
   10854:	2600      	movs	r6, #0
   10856:	2002      	movs	r0, #2
   10858:	07d3      	lsls	r3, r2, #31
   1085a:	d505      	bpl.n	10868 <_dtoa_r+0xa40>
   1085c:	ed91 5b00 	vldr	d5, [r1]
   10860:	3001      	adds	r0, #1
   10862:	2601      	movs	r6, #1
   10864:	ee27 7b05 	vmul.f64	d7, d7, d5
   10868:	1052      	asrs	r2, r2, #1
   1086a:	f101 0108 	add.w	r1, r1, #8
   1086e:	d1f3      	bne.n	10858 <_dtoa_r+0xa30>
   10870:	2e00      	cmp	r6, #0
   10872:	fe06 6b07 	vseleq.f64	d6, d6, d7
   10876:	e41e      	b.n	100b6 <_dtoa_r+0x28e>
   10878:	9b02      	ldr	r3, [sp, #8]
   1087a:	2b00      	cmp	r3, #0
   1087c:	f47f ae37 	bne.w	104ee <_dtoa_r+0x6c6>
   10880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10884:	f3c1 0213 	ubfx	r2, r1, #0, #20
   10888:	2a00      	cmp	r2, #0
   1088a:	f040 8137 	bne.w	10afc <_dtoa_r+0xcd4>
   1088e:	4a3d      	ldr	r2, [pc, #244]	; (10984 <_dtoa_r+0xb5c>)
   10890:	400a      	ands	r2, r1
   10892:	2a00      	cmp	r2, #0
   10894:	f000 80fa 	beq.w	10a8c <_dtoa_r+0xc64>
   10898:	9b06      	ldr	r3, [sp, #24]
   1089a:	3301      	adds	r3, #1
   1089c:	9306      	str	r3, [sp, #24]
   1089e:	2301      	movs	r3, #1
   108a0:	f108 0801 	add.w	r8, r8, #1
   108a4:	9308      	str	r3, [sp, #32]
   108a6:	e56f      	b.n	10388 <_dtoa_r+0x560>
   108a8:	4629      	mov	r1, r5
   108aa:	9a08      	ldr	r2, [sp, #32]
   108ac:	4620      	mov	r0, r4
   108ae:	f7fd f853 	bl	d958 <__pow5mult>
   108b2:	4605      	mov	r5, r0
   108b4:	e55a      	b.n	1036c <_dtoa_r+0x544>
   108b6:	2a00      	cmp	r2, #0
   108b8:	dd12      	ble.n	108e0 <_dtoa_r+0xab8>
   108ba:	4629      	mov	r1, r5
   108bc:	2201      	movs	r2, #1
   108be:	4620      	mov	r0, r4
   108c0:	9301      	str	r3, [sp, #4]
   108c2:	f7fd f8a9 	bl	da18 <__lshift>
   108c6:	4651      	mov	r1, sl
   108c8:	4605      	mov	r5, r0
   108ca:	f7fd f91d 	bl	db08 <__mcmp>
   108ce:	2800      	cmp	r0, #0
   108d0:	9b01      	ldr	r3, [sp, #4]
   108d2:	f340 80e1 	ble.w	10a98 <_dtoa_r+0xc70>
   108d6:	2b39      	cmp	r3, #57	; 0x39
   108d8:	f000 80ca 	beq.w	10a70 <_dtoa_r+0xc48>
   108dc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   108e0:	46b9      	mov	r9, r7
   108e2:	f809 3b01 	strb.w	r3, [r9], #1
   108e6:	9b04      	ldr	r3, [sp, #16]
   108e8:	3301      	adds	r3, #1
   108ea:	4637      	mov	r7, r6
   108ec:	9304      	str	r3, [sp, #16]
   108ee:	4646      	mov	r6, r8
   108f0:	e5ba      	b.n	10468 <_dtoa_r+0x640>
   108f2:	ee38 8b08 	vadd.f64	d8, d8, d8
   108f6:	eeb4 8bc6 	vcmpe.f64	d8, d6
   108fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108fe:	dc0a      	bgt.n	10916 <_dtoa_r+0xaee>
   10900:	eeb4 8b46 	vcmp.f64	d8, d6
   10904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10908:	f47f acdc 	bne.w	102c4 <_dtoa_r+0x49c>
   1090c:	ee17 3a10 	vmov	r3, s14
   10910:	07d8      	lsls	r0, r3, #31
   10912:	f57f acd7 	bpl.w	102c4 <_dtoa_r+0x49c>
   10916:	9a00      	ldr	r2, [sp, #0]
   10918:	e454      	b.n	101c4 <_dtoa_r+0x39c>
   1091a:	6871      	ldr	r1, [r6, #4]
   1091c:	4620      	mov	r0, r4
   1091e:	f7fc fe6d 	bl	d5fc <_Balloc>
   10922:	4607      	mov	r7, r0
   10924:	2800      	cmp	r0, #0
   10926:	f000 80de 	beq.w	10ae6 <_dtoa_r+0xcbe>
   1092a:	6933      	ldr	r3, [r6, #16]
   1092c:	3302      	adds	r3, #2
   1092e:	009a      	lsls	r2, r3, #2
   10930:	f106 010c 	add.w	r1, r6, #12
   10934:	300c      	adds	r0, #12
   10936:	f7f9 fb39 	bl	9fac <memcpy>
   1093a:	4639      	mov	r1, r7
   1093c:	2201      	movs	r2, #1
   1093e:	4620      	mov	r0, r4
   10940:	f7fd f86a 	bl	da18 <__lshift>
   10944:	4680      	mov	r8, r0
   10946:	e5fe      	b.n	10546 <_dtoa_r+0x71e>
   10948:	9b06      	ldr	r3, [sp, #24]
   1094a:	eba3 0309 	sub.w	r3, r3, r9
   1094e:	9309      	str	r3, [sp, #36]	; 0x24
   10950:	e4da      	b.n	10308 <_dtoa_r+0x4e0>
   10952:	2b39      	cmp	r3, #57	; 0x39
   10954:	f000 808c 	beq.w	10a70 <_dtoa_r+0xc48>
   10958:	46b9      	mov	r9, r7
   1095a:	3301      	adds	r3, #1
   1095c:	e7c1      	b.n	108e2 <_dtoa_r+0xaba>
   1095e:	9a04      	ldr	r2, [sp, #16]
   10960:	3201      	adds	r2, #1
   10962:	4637      	mov	r7, r6
   10964:	9204      	str	r2, [sp, #16]
   10966:	4646      	mov	r6, r8
   10968:	e55f      	b.n	1042a <_dtoa_r+0x602>
   1096a:	4629      	mov	r1, r5
   1096c:	4620      	mov	r0, r4
   1096e:	f7fc fff3 	bl	d958 <__pow5mult>
   10972:	4605      	mov	r5, r0
   10974:	e4fa      	b.n	1036c <_dtoa_r+0x544>
   10976:	bf00      	nop
   10978:	20000c0c 	.word	0x20000c0c
   1097c:	200002a8 	.word	0x200002a8
   10980:	20000280 	.word	0x20000280
   10984:	7ff00000 	.word	0x7ff00000
   10988:	4b5e      	ldr	r3, [pc, #376]	; (10b04 <_dtoa_r+0xcdc>)
   1098a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   1098e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   10992:	ed1c 3b02 	vldr	d3, [ip, #-8]
   10996:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   1099a:	ee36 7b47 	vsub.f64	d7, d6, d7
   1099e:	ec41 0b16 	vmov	d6, r0, r1
   109a2:	ee15 1a90 	vmov	r1, s11
   109a6:	ee23 3b06 	vmul.f64	d3, d3, d6
   109aa:	9800      	ldr	r0, [sp, #0]
   109ac:	3130      	adds	r1, #48	; 0x30
   109ae:	2a01      	cmp	r2, #1
   109b0:	f800 1b01 	strb.w	r1, [r0], #1
   109b4:	f000 8083 	beq.w	10abe <_dtoa_r+0xc96>
   109b8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   109bc:	9b00      	ldr	r3, [sp, #0]
   109be:	1899      	adds	r1, r3, r2
   109c0:	ee27 7b04 	vmul.f64	d7, d7, d4
   109c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   109c8:	ee16 3a90 	vmov	r3, s13
   109cc:	3330      	adds	r3, #48	; 0x30
   109ce:	f800 3b01 	strb.w	r3, [r0], #1
   109d2:	4281      	cmp	r1, r0
   109d4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   109d8:	ee37 7b45 	vsub.f64	d7, d7, d5
   109dc:	d1f0      	bne.n	109c0 <_dtoa_r+0xb98>
   109de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   109e2:	ee33 5b06 	vadd.f64	d5, d3, d6
   109e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   109ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109ee:	f53f abe3 	bmi.w	101b8 <_dtoa_r+0x390>
   109f2:	ee36 6b43 	vsub.f64	d6, d6, d3
   109f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   109fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109fe:	f77f ac0d 	ble.w	1021c <_dtoa_r+0x3f4>
   10a02:	4689      	mov	r9, r1
   10a04:	3901      	subs	r1, #1
   10a06:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   10a0a:	2b30      	cmp	r3, #48	; 0x30
   10a0c:	d0f9      	beq.n	10a02 <_dtoa_r+0xbda>
   10a0e:	1c73      	adds	r3, r6, #1
   10a10:	9304      	str	r3, [sp, #16]
   10a12:	e539      	b.n	10488 <_dtoa_r+0x660>
   10a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   10a1a:	e6da      	b.n	107d2 <_dtoa_r+0x9aa>
   10a1c:	2002      	movs	r0, #2
   10a1e:	eeb0 6b48 	vmov.f64	d6, d8
   10a22:	f7ff bb48 	b.w	100b6 <_dtoa_r+0x28e>
   10a26:	f1b9 0f00 	cmp.w	r9, #0
   10a2a:	f43f aeda 	beq.w	107e2 <_dtoa_r+0x9ba>
   10a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10a30:	2a00      	cmp	r2, #0
   10a32:	f77f abf3 	ble.w	1021c <_dtoa_r+0x3f4>
   10a36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10a3a:	ee26 6b04 	vmul.f64	d6, d6, d4
   10a3e:	3001      	adds	r0, #1
   10a40:	ee07 0a90 	vmov	s15, r0
   10a44:	9b04      	ldr	r3, [sp, #16]
   10a46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   10a4a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   10a4e:	eea6 7b05 	vfma.f64	d7, d6, d5
   10a52:	ee17 ca90 	vmov	ip, s15
   10a56:	ec51 0b17 	vmov	r0, r1, d7
   10a5a:	1e5e      	subs	r6, r3, #1
   10a5c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   10a60:	f7ff bb47 	b.w	100f2 <_dtoa_r+0x2ca>
   10a64:	9b04      	ldr	r3, [sp, #16]
   10a66:	3301      	adds	r3, #1
   10a68:	9304      	str	r3, [sp, #16]
   10a6a:	2331      	movs	r3, #49	; 0x31
   10a6c:	f7ff bbb1 	b.w	101d2 <_dtoa_r+0x3aa>
   10a70:	9b04      	ldr	r3, [sp, #16]
   10a72:	46bb      	mov	fp, r7
   10a74:	3301      	adds	r3, #1
   10a76:	9304      	str	r3, [sp, #16]
   10a78:	2339      	movs	r3, #57	; 0x39
   10a7a:	4637      	mov	r7, r6
   10a7c:	f80b 3b01 	strb.w	r3, [fp], #1
   10a80:	4646      	mov	r6, r8
   10a82:	e4e1      	b.n	10448 <_dtoa_r+0x620>
   10a84:	f04f 0a00 	mov.w	sl, #0
   10a88:	4656      	mov	r6, sl
   10a8a:	e653      	b.n	10734 <_dtoa_r+0x90c>
   10a8c:	9208      	str	r2, [sp, #32]
   10a8e:	e47b      	b.n	10388 <_dtoa_r+0x560>
   10a90:	1c73      	adds	r3, r6, #1
   10a92:	9304      	str	r3, [sp, #16]
   10a94:	4689      	mov	r9, r1
   10a96:	e4f7      	b.n	10488 <_dtoa_r+0x660>
   10a98:	f47f af22 	bne.w	108e0 <_dtoa_r+0xab8>
   10a9c:	07da      	lsls	r2, r3, #31
   10a9e:	f57f af1f 	bpl.w	108e0 <_dtoa_r+0xab8>
   10aa2:	e718      	b.n	108d6 <_dtoa_r+0xaae>
   10aa4:	2b39      	cmp	r3, #57	; 0x39
   10aa6:	d0e3      	beq.n	10a70 <_dtoa_r+0xc48>
   10aa8:	f1b9 0f00 	cmp.w	r9, #0
   10aac:	f73f af16 	bgt.w	108dc <_dtoa_r+0xab4>
   10ab0:	e716      	b.n	108e0 <_dtoa_r+0xab8>
   10ab2:	9b01      	ldr	r3, [sp, #4]
   10ab4:	2b02      	cmp	r3, #2
   10ab6:	f73f ae28 	bgt.w	1070a <_dtoa_r+0x8e2>
   10aba:	9704      	str	r7, [sp, #16]
   10abc:	e5ba      	b.n	10634 <_dtoa_r+0x80c>
   10abe:	4601      	mov	r1, r0
   10ac0:	e78d      	b.n	109de <_dtoa_r+0xbb6>
   10ac2:	9b01      	ldr	r3, [sp, #4]
   10ac4:	2b02      	cmp	r3, #2
   10ac6:	f73f ae20 	bgt.w	1070a <_dtoa_r+0x8e2>
   10aca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   10ace:	9704      	str	r7, [sp, #16]
   10ad0:	e52b      	b.n	1052a <_dtoa_r+0x702>
   10ad2:	2002      	movs	r0, #2
   10ad4:	f7ff baef 	b.w	100b6 <_dtoa_r+0x28e>
   10ad8:	4b0b      	ldr	r3, [pc, #44]	; (10b08 <_dtoa_r+0xce0>)
   10ada:	480c      	ldr	r0, [pc, #48]	; (10b0c <_dtoa_r+0xce4>)
   10adc:	2200      	movs	r2, #0
   10ade:	f240 11af 	movw	r1, #431	; 0x1af
   10ae2:	f7ff f8b1 	bl	fc48 <__assert_func>
   10ae6:	4b08      	ldr	r3, [pc, #32]	; (10b08 <_dtoa_r+0xce0>)
   10ae8:	4808      	ldr	r0, [pc, #32]	; (10b0c <_dtoa_r+0xce4>)
   10aea:	463a      	mov	r2, r7
   10aec:	f240 21ef 	movw	r1, #751	; 0x2ef
   10af0:	f7ff f8aa 	bl	fc48 <__assert_func>
   10af4:	4b06      	ldr	r3, [pc, #24]	; (10b10 <_dtoa_r+0xce8>)
   10af6:	9300      	str	r3, [sp, #0]
   10af8:	f7ff b9d2 	b.w	fea0 <_dtoa_r+0x78>
   10afc:	9b02      	ldr	r3, [sp, #8]
   10afe:	9308      	str	r3, [sp, #32]
   10b00:	e4f7      	b.n	104f2 <_dtoa_r+0x6ca>
   10b02:	bf00      	nop
   10b04:	200002a8 	.word	0x200002a8
   10b08:	20000a8c 	.word	0x20000a8c
   10b0c:	20000c10 	.word	0x20000c10
   10b10:	20000c00 	.word	0x20000c00

00010b14 <_wcrtomb_r>:
   10b14:	b570      	push	{r4, r5, r6, lr}
   10b16:	4605      	mov	r5, r0
   10b18:	b084      	sub	sp, #16
   10b1a:	b15b      	cbz	r3, 10b34 <_wcrtomb_r+0x20>
   10b1c:	461c      	mov	r4, r3
   10b1e:	b169      	cbz	r1, 10b3c <_wcrtomb_r+0x28>
   10b20:	4b0e      	ldr	r3, [pc, #56]	; (10b5c <_wcrtomb_r+0x48>)
   10b22:	4628      	mov	r0, r5
   10b24:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   10b28:	4623      	mov	r3, r4
   10b2a:	47b0      	blx	r6
   10b2c:	1c43      	adds	r3, r0, #1
   10b2e:	d00f      	beq.n	10b50 <_wcrtomb_r+0x3c>
   10b30:	b004      	add	sp, #16
   10b32:	bd70      	pop	{r4, r5, r6, pc}
   10b34:	f500 7482 	add.w	r4, r0, #260	; 0x104
   10b38:	2900      	cmp	r1, #0
   10b3a:	d1f1      	bne.n	10b20 <_wcrtomb_r+0xc>
   10b3c:	4a07      	ldr	r2, [pc, #28]	; (10b5c <_wcrtomb_r+0x48>)
   10b3e:	4623      	mov	r3, r4
   10b40:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   10b44:	4628      	mov	r0, r5
   10b46:	460a      	mov	r2, r1
   10b48:	a901      	add	r1, sp, #4
   10b4a:	47b0      	blx	r6
   10b4c:	1c43      	adds	r3, r0, #1
   10b4e:	d1ef      	bne.n	10b30 <_wcrtomb_r+0x1c>
   10b50:	2200      	movs	r2, #0
   10b52:	238a      	movs	r3, #138	; 0x8a
   10b54:	6022      	str	r2, [r4, #0]
   10b56:	602b      	str	r3, [r5, #0]
   10b58:	b004      	add	sp, #16
   10b5a:	bd70      	pop	{r4, r5, r6, pc}
   10b5c:	2000435c 	.word	0x2000435c

00010b60 <_wcsrtombs_r>:
   10b60:	b510      	push	{r4, lr}
   10b62:	b082      	sub	sp, #8
   10b64:	9c04      	ldr	r4, [sp, #16]
   10b66:	e9cd 3400 	strd	r3, r4, [sp]
   10b6a:	f04f 33ff 	mov.w	r3, #4294967295
   10b6e:	f001 fbc7 	bl	12300 <_wcsnrtombs_r>
   10b72:	b002      	add	sp, #8
   10b74:	bd10      	pop	{r4, pc}
   10b76:	bf00      	nop

00010b78 <fiprintf>:
   10b78:	b40e      	push	{r1, r2, r3}
   10b7a:	b510      	push	{r4, lr}
   10b7c:	b083      	sub	sp, #12
   10b7e:	ab05      	add	r3, sp, #20
   10b80:	4c06      	ldr	r4, [pc, #24]	; (10b9c <fiprintf+0x24>)
   10b82:	f853 2b04 	ldr.w	r2, [r3], #4
   10b86:	9301      	str	r3, [sp, #4]
   10b88:	4601      	mov	r1, r0
   10b8a:	6820      	ldr	r0, [r4, #0]
   10b8c:	f000 f8c4 	bl	10d18 <_vfiprintf_r>
   10b90:	b003      	add	sp, #12
   10b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b96:	b003      	add	sp, #12
   10b98:	4770      	bx	lr
   10b9a:	bf00      	nop
   10b9c:	200048e4 	.word	0x200048e4

00010ba0 <__ssprint_r>:
   10ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ba4:	6893      	ldr	r3, [r2, #8]
   10ba6:	6817      	ldr	r7, [r2, #0]
   10ba8:	b083      	sub	sp, #12
   10baa:	4692      	mov	sl, r2
   10bac:	2b00      	cmp	r3, #0
   10bae:	d070      	beq.n	10c92 <__ssprint_r+0xf2>
   10bb0:	4681      	mov	r9, r0
   10bb2:	688a      	ldr	r2, [r1, #8]
   10bb4:	6808      	ldr	r0, [r1, #0]
   10bb6:	460c      	mov	r4, r1
   10bb8:	3708      	adds	r7, #8
   10bba:	e043      	b.n	10c44 <__ssprint_r+0xa4>
   10bbc:	89a3      	ldrh	r3, [r4, #12]
   10bbe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   10bc2:	d02e      	beq.n	10c22 <__ssprint_r+0x82>
   10bc4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   10bc8:	eba0 0801 	sub.w	r8, r0, r1
   10bcc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   10bd0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   10bd4:	f108 0001 	add.w	r0, r8, #1
   10bd8:	1076      	asrs	r6, r6, #1
   10bda:	4428      	add	r0, r5
   10bdc:	42b0      	cmp	r0, r6
   10bde:	4632      	mov	r2, r6
   10be0:	bf84      	itt	hi
   10be2:	4606      	movhi	r6, r0
   10be4:	4632      	movhi	r2, r6
   10be6:	055b      	lsls	r3, r3, #21
   10be8:	d537      	bpl.n	10c5a <__ssprint_r+0xba>
   10bea:	4611      	mov	r1, r2
   10bec:	4648      	mov	r0, r9
   10bee:	f7fa ff8d 	bl	bb0c <_malloc_r>
   10bf2:	9001      	str	r0, [sp, #4]
   10bf4:	2800      	cmp	r0, #0
   10bf6:	d03a      	beq.n	10c6e <__ssprint_r+0xce>
   10bf8:	4642      	mov	r2, r8
   10bfa:	6921      	ldr	r1, [r4, #16]
   10bfc:	f7f9 f9d6 	bl	9fac <memcpy>
   10c00:	89a2      	ldrh	r2, [r4, #12]
   10c02:	9b01      	ldr	r3, [sp, #4]
   10c04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10c0c:	81a2      	strh	r2, [r4, #12]
   10c0e:	eba6 0208 	sub.w	r2, r6, r8
   10c12:	eb03 0008 	add.w	r0, r3, r8
   10c16:	6166      	str	r6, [r4, #20]
   10c18:	60a2      	str	r2, [r4, #8]
   10c1a:	6123      	str	r3, [r4, #16]
   10c1c:	6020      	str	r0, [r4, #0]
   10c1e:	462e      	mov	r6, r5
   10c20:	46a8      	mov	r8, r5
   10c22:	4642      	mov	r2, r8
   10c24:	4659      	mov	r1, fp
   10c26:	f7fb feed 	bl	ca04 <memmove>
   10c2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   10c2e:	68a2      	ldr	r2, [r4, #8]
   10c30:	6820      	ldr	r0, [r4, #0]
   10c32:	1b92      	subs	r2, r2, r6
   10c34:	4440      	add	r0, r8
   10c36:	1b5b      	subs	r3, r3, r5
   10c38:	60a2      	str	r2, [r4, #8]
   10c3a:	6020      	str	r0, [r4, #0]
   10c3c:	f8ca 3008 	str.w	r3, [sl, #8]
   10c40:	b33b      	cbz	r3, 10c92 <__ssprint_r+0xf2>
   10c42:	3708      	adds	r7, #8
   10c44:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   10c48:	2d00      	cmp	r5, #0
   10c4a:	d0fa      	beq.n	10c42 <__ssprint_r+0xa2>
   10c4c:	42aa      	cmp	r2, r5
   10c4e:	4616      	mov	r6, r2
   10c50:	4690      	mov	r8, r2
   10c52:	d9b3      	bls.n	10bbc <__ssprint_r+0x1c>
   10c54:	462e      	mov	r6, r5
   10c56:	46a8      	mov	r8, r5
   10c58:	e7e3      	b.n	10c22 <__ssprint_r+0x82>
   10c5a:	4648      	mov	r0, r9
   10c5c:	f7fb fa1e 	bl	c09c <_realloc_r>
   10c60:	4603      	mov	r3, r0
   10c62:	2800      	cmp	r0, #0
   10c64:	d1d3      	bne.n	10c0e <__ssprint_r+0x6e>
   10c66:	6921      	ldr	r1, [r4, #16]
   10c68:	4648      	mov	r0, r9
   10c6a:	f7fc fbab 	bl	d3c4 <_free_r>
   10c6e:	89a3      	ldrh	r3, [r4, #12]
   10c70:	220c      	movs	r2, #12
   10c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10c76:	f8c9 2000 	str.w	r2, [r9]
   10c7a:	f04f 30ff 	mov.w	r0, #4294967295
   10c7e:	81a3      	strh	r3, [r4, #12]
   10c80:	2200      	movs	r2, #0
   10c82:	2300      	movs	r3, #0
   10c84:	f8ca 2008 	str.w	r2, [sl, #8]
   10c88:	f8ca 3004 	str.w	r3, [sl, #4]
   10c8c:	b003      	add	sp, #12
   10c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c92:	2000      	movs	r0, #0
   10c94:	2300      	movs	r3, #0
   10c96:	f8ca 3004 	str.w	r3, [sl, #4]
   10c9a:	b003      	add	sp, #12
   10c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010ca0 <__sprint_r.part.0>:
   10ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10ca6:	049c      	lsls	r4, r3, #18
   10ca8:	4690      	mov	r8, r2
   10caa:	d52d      	bpl.n	10d08 <__sprint_r.part.0+0x68>
   10cac:	6893      	ldr	r3, [r2, #8]
   10cae:	6812      	ldr	r2, [r2, #0]
   10cb0:	b343      	cbz	r3, 10d04 <__sprint_r.part.0+0x64>
   10cb2:	468b      	mov	fp, r1
   10cb4:	4606      	mov	r6, r0
   10cb6:	f102 0908 	add.w	r9, r2, #8
   10cba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   10cbe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   10cc2:	d015      	beq.n	10cf0 <__sprint_r.part.0+0x50>
   10cc4:	3d04      	subs	r5, #4
   10cc6:	2400      	movs	r4, #0
   10cc8:	e001      	b.n	10cce <__sprint_r.part.0+0x2e>
   10cca:	42a7      	cmp	r7, r4
   10ccc:	d00e      	beq.n	10cec <__sprint_r.part.0+0x4c>
   10cce:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10cd2:	465a      	mov	r2, fp
   10cd4:	4630      	mov	r0, r6
   10cd6:	f001 fa5b 	bl	12190 <_fputwc_r>
   10cda:	1c43      	adds	r3, r0, #1
   10cdc:	f104 0401 	add.w	r4, r4, #1
   10ce0:	d1f3      	bne.n	10cca <__sprint_r.part.0+0x2a>
   10ce2:	2300      	movs	r3, #0
   10ce4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10cf0:	f02a 0a03 	bic.w	sl, sl, #3
   10cf4:	eba3 030a 	sub.w	r3, r3, sl
   10cf8:	f8c8 3008 	str.w	r3, [r8, #8]
   10cfc:	f109 0908 	add.w	r9, r9, #8
   10d00:	2b00      	cmp	r3, #0
   10d02:	d1da      	bne.n	10cba <__sprint_r.part.0+0x1a>
   10d04:	2000      	movs	r0, #0
   10d06:	e7ec      	b.n	10ce2 <__sprint_r.part.0+0x42>
   10d08:	f001 f80c 	bl	11d24 <__sfvwrite_r>
   10d0c:	2300      	movs	r3, #0
   10d0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d16:	bf00      	nop

00010d18 <_vfiprintf_r>:
   10d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d1c:	ed2d 8b02 	vpush	{d8}
   10d20:	b0c5      	sub	sp, #276	; 0x114
   10d22:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   10d26:	4683      	mov	fp, r0
   10d28:	ee08 1a10 	vmov	s16, r1
   10d2c:	4616      	mov	r6, r2
   10d2e:	2100      	movs	r1, #0
   10d30:	2208      	movs	r2, #8
   10d32:	4650      	mov	r0, sl
   10d34:	461c      	mov	r4, r3
   10d36:	9307      	str	r3, [sp, #28]
   10d38:	f7fb fee0 	bl	cafc <memset>
   10d3c:	f1bb 0f00 	cmp.w	fp, #0
   10d40:	d004      	beq.n	10d4c <_vfiprintf_r+0x34>
   10d42:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   10d46:	2b00      	cmp	r3, #0
   10d48:	f000 86a0 	beq.w	11a8c <_vfiprintf_r+0xd74>
   10d4c:	ee18 2a10 	vmov	r2, s16
   10d50:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10d52:	07db      	lsls	r3, r3, #31
   10d54:	f140 8513 	bpl.w	1177e <_vfiprintf_r+0xa66>
   10d58:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10d5c:	b28a      	uxth	r2, r1
   10d5e:	0495      	lsls	r5, r2, #18
   10d60:	d40b      	bmi.n	10d7a <_vfiprintf_r+0x62>
   10d62:	ee18 3a10 	vmov	r3, s16
   10d66:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   10d6a:	8199      	strh	r1, [r3, #12]
   10d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10d6e:	b28a      	uxth	r2, r1
   10d70:	ee18 1a10 	vmov	r1, s16
   10d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10d78:	664b      	str	r3, [r1, #100]	; 0x64
   10d7a:	0710      	lsls	r0, r2, #28
   10d7c:	f140 8105 	bpl.w	10f8a <_vfiprintf_r+0x272>
   10d80:	ee18 3a10 	vmov	r3, s16
   10d84:	691b      	ldr	r3, [r3, #16]
   10d86:	2b00      	cmp	r3, #0
   10d88:	f000 80ff 	beq.w	10f8a <_vfiprintf_r+0x272>
   10d8c:	f002 031a 	and.w	r3, r2, #26
   10d90:	2b0a      	cmp	r3, #10
   10d92:	f000 810a 	beq.w	10faa <_vfiprintf_r+0x292>
   10d96:	2300      	movs	r3, #0
   10d98:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   10d9c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10da0:	aa1b      	add	r2, sp, #108	; 0x6c
   10da2:	930c      	str	r3, [sp, #48]	; 0x30
   10da4:	9218      	str	r2, [sp, #96]	; 0x60
   10da6:	4691      	mov	r9, r2
   10da8:	930b      	str	r3, [sp, #44]	; 0x2c
   10daa:	9305      	str	r3, [sp, #20]
   10dac:	46b0      	mov	r8, r6
   10dae:	4644      	mov	r4, r8
   10db0:	4ba8      	ldr	r3, [pc, #672]	; (11054 <_vfiprintf_r+0x33c>)
   10db2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10db6:	f7fb ff8b 	bl	ccd0 <__locale_mb_cur_max>
   10dba:	4622      	mov	r2, r4
   10dbc:	4603      	mov	r3, r0
   10dbe:	a912      	add	r1, sp, #72	; 0x48
   10dc0:	f8cd a000 	str.w	sl, [sp]
   10dc4:	4658      	mov	r0, fp
   10dc6:	47a8      	blx	r5
   10dc8:	2800      	cmp	r0, #0
   10dca:	f000 8145 	beq.w	11058 <_vfiprintf_r+0x340>
   10dce:	f2c0 8139 	blt.w	11044 <_vfiprintf_r+0x32c>
   10dd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10dd4:	2a25      	cmp	r2, #37	; 0x25
   10dd6:	4603      	mov	r3, r0
   10dd8:	d001      	beq.n	10dde <_vfiprintf_r+0xc6>
   10dda:	441c      	add	r4, r3
   10ddc:	e7e8      	b.n	10db0 <_vfiprintf_r+0x98>
   10dde:	ebb4 0608 	subs.w	r6, r4, r8
   10de2:	4605      	mov	r5, r0
   10de4:	f040 813c 	bne.w	11060 <_vfiprintf_r+0x348>
   10de8:	2300      	movs	r3, #0
   10dea:	7861      	ldrb	r1, [r4, #1]
   10dec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10df0:	f104 0801 	add.w	r8, r4, #1
   10df4:	9306      	str	r3, [sp, #24]
   10df6:	f04f 37ff 	mov.w	r7, #4294967295
   10dfa:	461e      	mov	r6, r3
   10dfc:	242b      	movs	r4, #43	; 0x2b
   10dfe:	f108 0801 	add.w	r8, r8, #1
   10e02:	f1a1 0320 	sub.w	r3, r1, #32
   10e06:	2b5a      	cmp	r3, #90	; 0x5a
   10e08:	f200 8178 	bhi.w	110fc <_vfiprintf_r+0x3e4>
   10e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   10e10:	017602b5 	.word	0x017602b5
   10e14:	02b00176 	.word	0x02b00176
   10e18:	01760176 	.word	0x01760176
   10e1c:	006a0176 	.word	0x006a0176
   10e20:	01760176 	.word	0x01760176
   10e24:	028d027d 	.word	0x028d027d
   10e28:	02880176 	.word	0x02880176
   10e2c:	01760297 	.word	0x01760297
   10e30:	005b0292 	.word	0x005b0292
   10e34:	005b005b 	.word	0x005b005b
   10e38:	005b005b 	.word	0x005b005b
   10e3c:	005b005b 	.word	0x005b005b
   10e40:	005b005b 	.word	0x005b005b
   10e44:	01760176 	.word	0x01760176
   10e48:	01760176 	.word	0x01760176
   10e4c:	01760176 	.word	0x01760176
   10e50:	01760176 	.word	0x01760176
   10e54:	025c0176 	.word	0x025c0176
   10e58:	01760084 	.word	0x01760084
   10e5c:	01760176 	.word	0x01760176
   10e60:	01760176 	.word	0x01760176
   10e64:	01760176 	.word	0x01760176
   10e68:	01760176 	.word	0x01760176
   10e6c:	00e80176 	.word	0x00e80176
   10e70:	01760176 	.word	0x01760176
   10e74:	02330176 	.word	0x02330176
   10e78:	02da0176 	.word	0x02da0176
   10e7c:	01760176 	.word	0x01760176
   10e80:	0176058b 	.word	0x0176058b
   10e84:	01760176 	.word	0x01760176
   10e88:	01760176 	.word	0x01760176
   10e8c:	01760176 	.word	0x01760176
   10e90:	01760176 	.word	0x01760176
   10e94:	025c0176 	.word	0x025c0176
   10e98:	01760086 	.word	0x01760086
   10e9c:	01760176 	.word	0x01760176
   10ea0:	008602cd 	.word	0x008602cd
   10ea4:	0176007f 	.word	0x0176007f
   10ea8:	017602c0 	.word	0x017602c0
   10eac:	00ea02fd 	.word	0x00ea02fd
   10eb0:	007f02ed 	.word	0x007f02ed
   10eb4:	02330176 	.word	0x02330176
   10eb8:	0569007c 	.word	0x0569007c
   10ebc:	01760176 	.word	0x01760176
   10ec0:	0176056b 	.word	0x0176056b
   10ec4:	007c      	.short	0x007c
   10ec6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10eca:	2200      	movs	r2, #0
   10ecc:	f818 1b01 	ldrb.w	r1, [r8], #1
   10ed0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10ed4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10ed8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10edc:	2b09      	cmp	r3, #9
   10ede:	d9f5      	bls.n	10ecc <_vfiprintf_r+0x1b4>
   10ee0:	9206      	str	r2, [sp, #24]
   10ee2:	e78e      	b.n	10e02 <_vfiprintf_r+0xea>
   10ee4:	4658      	mov	r0, fp
   10ee6:	f7fe fe1b 	bl	fb20 <_localeconv_r>
   10eea:	6843      	ldr	r3, [r0, #4]
   10eec:	930d      	str	r3, [sp, #52]	; 0x34
   10eee:	4618      	mov	r0, r3
   10ef0:	f7fc f966 	bl	d1c0 <strlen>
   10ef4:	900e      	str	r0, [sp, #56]	; 0x38
   10ef6:	4605      	mov	r5, r0
   10ef8:	4658      	mov	r0, fp
   10efa:	f7fe fe11 	bl	fb20 <_localeconv_r>
   10efe:	6883      	ldr	r3, [r0, #8]
   10f00:	930b      	str	r3, [sp, #44]	; 0x2c
   10f02:	2d00      	cmp	r5, #0
   10f04:	f040 84d6 	bne.w	118b4 <_vfiprintf_r+0xb9c>
   10f08:	f898 1000 	ldrb.w	r1, [r8]
   10f0c:	e777      	b.n	10dfe <_vfiprintf_r+0xe6>
   10f0e:	f898 1000 	ldrb.w	r1, [r8]
   10f12:	f046 0620 	orr.w	r6, r6, #32
   10f16:	e772      	b.n	10dfe <_vfiprintf_r+0xe6>
   10f18:	f046 0610 	orr.w	r6, r6, #16
   10f1c:	06b4      	lsls	r4, r6, #26
   10f1e:	f140 818e 	bpl.w	1123e <_vfiprintf_r+0x526>
   10f22:	9b07      	ldr	r3, [sp, #28]
   10f24:	3307      	adds	r3, #7
   10f26:	f023 0307 	bic.w	r3, r3, #7
   10f2a:	461a      	mov	r2, r3
   10f2c:	6859      	ldr	r1, [r3, #4]
   10f2e:	f852 3b08 	ldr.w	r3, [r2], #8
   10f32:	9207      	str	r2, [sp, #28]
   10f34:	460a      	mov	r2, r1
   10f36:	2900      	cmp	r1, #0
   10f38:	f2c0 8470 	blt.w	1181c <_vfiprintf_r+0xb04>
   10f3c:	1c79      	adds	r1, r7, #1
   10f3e:	f000 85a2 	beq.w	11a86 <_vfiprintf_r+0xd6e>
   10f42:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   10f46:	9103      	str	r1, [sp, #12]
   10f48:	ea53 0102 	orrs.w	r1, r3, r2
   10f4c:	f000 843f 	beq.w	117ce <_vfiprintf_r+0xab6>
   10f50:	2b0a      	cmp	r3, #10
   10f52:	f172 0100 	sbcs.w	r1, r2, #0
   10f56:	f080 8541 	bcs.w	119dc <_vfiprintf_r+0xcc4>
   10f5a:	3330      	adds	r3, #48	; 0x30
   10f5c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   10f60:	9e03      	ldr	r6, [sp, #12]
   10f62:	2301      	movs	r3, #1
   10f64:	9304      	str	r3, [sp, #16]
   10f66:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   10f6a:	9b04      	ldr	r3, [sp, #16]
   10f6c:	42bb      	cmp	r3, r7
   10f6e:	bfb8      	it	lt
   10f70:	463b      	movlt	r3, r7
   10f72:	9303      	str	r3, [sp, #12]
   10f74:	2300      	movs	r3, #0
   10f76:	9308      	str	r3, [sp, #32]
   10f78:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   10f7c:	2b00      	cmp	r3, #0
   10f7e:	f000 80cb 	beq.w	11118 <_vfiprintf_r+0x400>
   10f82:	9b03      	ldr	r3, [sp, #12]
   10f84:	3301      	adds	r3, #1
   10f86:	9303      	str	r3, [sp, #12]
   10f88:	e0c6      	b.n	11118 <_vfiprintf_r+0x400>
   10f8a:	ee18 1a10 	vmov	r1, s16
   10f8e:	4658      	mov	r0, fp
   10f90:	ee18 5a10 	vmov	r5, s16
   10f94:	f001 f840 	bl	12018 <__swsetup_r>
   10f98:	2800      	cmp	r0, #0
   10f9a:	f040 8652 	bne.w	11c42 <_vfiprintf_r+0xf2a>
   10f9e:	89aa      	ldrh	r2, [r5, #12]
   10fa0:	f002 031a 	and.w	r3, r2, #26
   10fa4:	2b0a      	cmp	r3, #10
   10fa6:	f47f aef6 	bne.w	10d96 <_vfiprintf_r+0x7e>
   10faa:	ee18 1a10 	vmov	r1, s16
   10fae:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   10fb2:	2b00      	cmp	r3, #0
   10fb4:	f6ff aeef 	blt.w	10d96 <_vfiprintf_r+0x7e>
   10fb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10fba:	07db      	lsls	r3, r3, #31
   10fbc:	d402      	bmi.n	10fc4 <_vfiprintf_r+0x2ac>
   10fbe:	0597      	lsls	r7, r2, #22
   10fc0:	f140 8612 	bpl.w	11be8 <_vfiprintf_r+0xed0>
   10fc4:	ee18 1a10 	vmov	r1, s16
   10fc8:	4623      	mov	r3, r4
   10fca:	4632      	mov	r2, r6
   10fcc:	4658      	mov	r0, fp
   10fce:	f000 fe69 	bl	11ca4 <__sbprintf>
   10fd2:	9005      	str	r0, [sp, #20]
   10fd4:	9805      	ldr	r0, [sp, #20]
   10fd6:	b045      	add	sp, #276	; 0x114
   10fd8:	ecbd 8b02 	vpop	{d8}
   10fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fe0:	f046 0610 	orr.w	r6, r6, #16
   10fe4:	f016 0220 	ands.w	r2, r6, #32
   10fe8:	f000 8136 	beq.w	11258 <_vfiprintf_r+0x540>
   10fec:	9b07      	ldr	r3, [sp, #28]
   10fee:	3307      	adds	r3, #7
   10ff0:	f023 0307 	bic.w	r3, r3, #7
   10ff4:	4619      	mov	r1, r3
   10ff6:	685a      	ldr	r2, [r3, #4]
   10ff8:	f851 3b08 	ldr.w	r3, [r1], #8
   10ffc:	9107      	str	r1, [sp, #28]
   10ffe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11002:	9103      	str	r1, [sp, #12]
   11004:	2100      	movs	r1, #0
   11006:	2000      	movs	r0, #0
   11008:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1100c:	1c78      	adds	r0, r7, #1
   1100e:	f000 8210 	beq.w	11432 <_vfiprintf_r+0x71a>
   11012:	9803      	ldr	r0, [sp, #12]
   11014:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   11018:	ea53 0002 	orrs.w	r0, r3, r2
   1101c:	f040 8208 	bne.w	11430 <_vfiprintf_r+0x718>
   11020:	2f00      	cmp	r7, #0
   11022:	f040 8538 	bne.w	11a96 <_vfiprintf_r+0xd7e>
   11026:	2900      	cmp	r1, #0
   11028:	f040 83d5 	bne.w	117d6 <_vfiprintf_r+0xabe>
   1102c:	9b03      	ldr	r3, [sp, #12]
   1102e:	f013 0301 	ands.w	r3, r3, #1
   11032:	9304      	str	r3, [sp, #16]
   11034:	f000 8411 	beq.w	1185a <_vfiprintf_r+0xb42>
   11038:	2330      	movs	r3, #48	; 0x30
   1103a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   1103e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11042:	e792      	b.n	10f6a <_vfiprintf_r+0x252>
   11044:	2208      	movs	r2, #8
   11046:	2100      	movs	r1, #0
   11048:	4650      	mov	r0, sl
   1104a:	f7fb fd57 	bl	cafc <memset>
   1104e:	2301      	movs	r3, #1
   11050:	441c      	add	r4, r3
   11052:	e6ad      	b.n	10db0 <_vfiprintf_r+0x98>
   11054:	2000435c 	.word	0x2000435c
   11058:	ebb4 0608 	subs.w	r6, r4, r8
   1105c:	4605      	mov	r5, r0
   1105e:	d01b      	beq.n	11098 <_vfiprintf_r+0x380>
   11060:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11062:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11064:	3301      	adds	r3, #1
   11066:	4432      	add	r2, r6
   11068:	2b07      	cmp	r3, #7
   1106a:	e9c9 8600 	strd	r8, r6, [r9]
   1106e:	921a      	str	r2, [sp, #104]	; 0x68
   11070:	9319      	str	r3, [sp, #100]	; 0x64
   11072:	dd1c      	ble.n	110ae <_vfiprintf_r+0x396>
   11074:	2a00      	cmp	r2, #0
   11076:	f000 83a6 	beq.w	117c6 <_vfiprintf_r+0xaae>
   1107a:	ee18 1a10 	vmov	r1, s16
   1107e:	aa18      	add	r2, sp, #96	; 0x60
   11080:	4658      	mov	r0, fp
   11082:	f7ff fe0d 	bl	10ca0 <__sprint_r.part.0>
   11086:	bb20      	cbnz	r0, 110d2 <_vfiprintf_r+0x3ba>
   11088:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1108c:	9b05      	ldr	r3, [sp, #20]
   1108e:	4433      	add	r3, r6
   11090:	9305      	str	r3, [sp, #20]
   11092:	2d00      	cmp	r5, #0
   11094:	f47f aea8 	bne.w	10de8 <_vfiprintf_r+0xd0>
   11098:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1109a:	2b00      	cmp	r3, #0
   1109c:	f040 85c1 	bne.w	11c22 <_vfiprintf_r+0xf0a>
   110a0:	ee18 3a10 	vmov	r3, s16
   110a4:	2200      	movs	r2, #0
   110a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   110aa:	9219      	str	r2, [sp, #100]	; 0x64
   110ac:	e015      	b.n	110da <_vfiprintf_r+0x3c2>
   110ae:	f109 0908 	add.w	r9, r9, #8
   110b2:	e7eb      	b.n	1108c <_vfiprintf_r+0x374>
   110b4:	ee18 1a10 	vmov	r1, s16
   110b8:	aa18      	add	r2, sp, #96	; 0x60
   110ba:	4658      	mov	r0, fp
   110bc:	f7ff fdf0 	bl	10ca0 <__sprint_r.part.0>
   110c0:	2800      	cmp	r0, #0
   110c2:	f000 80a6 	beq.w	11212 <_vfiprintf_r+0x4fa>
   110c6:	9b08      	ldr	r3, [sp, #32]
   110c8:	b11b      	cbz	r3, 110d2 <_vfiprintf_r+0x3ba>
   110ca:	9908      	ldr	r1, [sp, #32]
   110cc:	4658      	mov	r0, fp
   110ce:	f7fc f979 	bl	d3c4 <_free_r>
   110d2:	ee18 3a10 	vmov	r3, s16
   110d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   110da:	ee18 2a10 	vmov	r2, s16
   110de:	6e52      	ldr	r2, [r2, #100]	; 0x64
   110e0:	f012 0f01 	tst.w	r2, #1
   110e4:	b29a      	uxth	r2, r3
   110e6:	f000 80a0 	beq.w	1122a <_vfiprintf_r+0x512>
   110ea:	0650      	lsls	r0, r2, #25
   110ec:	f100 85b2 	bmi.w	11c54 <_vfiprintf_r+0xf3c>
   110f0:	9805      	ldr	r0, [sp, #20]
   110f2:	b045      	add	sp, #276	; 0x114
   110f4:	ecbd 8b02 	vpop	{d8}
   110f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110fc:	2900      	cmp	r1, #0
   110fe:	d0cb      	beq.n	11098 <_vfiprintf_r+0x380>
   11100:	2300      	movs	r3, #0
   11102:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11106:	2301      	movs	r3, #1
   11108:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1110c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   11110:	ac2b      	add	r4, sp, #172	; 0xac
   11112:	2300      	movs	r3, #0
   11114:	9308      	str	r3, [sp, #32]
   11116:	461f      	mov	r7, r3
   11118:	f016 0302 	ands.w	r3, r6, #2
   1111c:	9309      	str	r3, [sp, #36]	; 0x24
   1111e:	d002      	beq.n	11126 <_vfiprintf_r+0x40e>
   11120:	9b03      	ldr	r3, [sp, #12]
   11122:	3302      	adds	r3, #2
   11124:	9303      	str	r3, [sp, #12]
   11126:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1112a:	930a      	str	r3, [sp, #40]	; 0x28
   1112c:	d105      	bne.n	1113a <_vfiprintf_r+0x422>
   1112e:	9b06      	ldr	r3, [sp, #24]
   11130:	9a03      	ldr	r2, [sp, #12]
   11132:	1a9d      	subs	r5, r3, r2
   11134:	2d00      	cmp	r5, #0
   11136:	f300 827b 	bgt.w	11630 <_vfiprintf_r+0x918>
   1113a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1113e:	1c41      	adds	r1, r0, #1
   11140:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11144:	b182      	cbz	r2, 11168 <_vfiprintf_r+0x450>
   11146:	2201      	movs	r2, #1
   11148:	3301      	adds	r3, #1
   1114a:	f8c9 2004 	str.w	r2, [r9, #4]
   1114e:	2907      	cmp	r1, #7
   11150:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   11154:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11158:	f8c9 2000 	str.w	r2, [r9]
   1115c:	f300 824a 	bgt.w	115f4 <_vfiprintf_r+0x8dc>
   11160:	4608      	mov	r0, r1
   11162:	f109 0908 	add.w	r9, r9, #8
   11166:	3101      	adds	r1, #1
   11168:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1116a:	b1e2      	cbz	r2, 111a6 <_vfiprintf_r+0x48e>
   1116c:	aa11      	add	r2, sp, #68	; 0x44
   1116e:	3302      	adds	r3, #2
   11170:	f8c9 2000 	str.w	r2, [r9]
   11174:	2907      	cmp	r1, #7
   11176:	f04f 0202 	mov.w	r2, #2
   1117a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1117e:	f8c9 2004 	str.w	r2, [r9, #4]
   11182:	f340 8250 	ble.w	11626 <_vfiprintf_r+0x90e>
   11186:	2b00      	cmp	r3, #0
   11188:	f000 8343 	beq.w	11812 <_vfiprintf_r+0xafa>
   1118c:	ee18 1a10 	vmov	r1, s16
   11190:	aa18      	add	r2, sp, #96	; 0x60
   11192:	4658      	mov	r0, fp
   11194:	f7ff fd84 	bl	10ca0 <__sprint_r.part.0>
   11198:	2800      	cmp	r0, #0
   1119a:	d194      	bne.n	110c6 <_vfiprintf_r+0x3ae>
   1119c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   111a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   111a4:	1c41      	adds	r1, r0, #1
   111a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111a8:	2a80      	cmp	r2, #128	; 0x80
   111aa:	f000 8184 	beq.w	114b6 <_vfiprintf_r+0x79e>
   111ae:	9a04      	ldr	r2, [sp, #16]
   111b0:	1abd      	subs	r5, r7, r2
   111b2:	2d00      	cmp	r5, #0
   111b4:	f300 81d7 	bgt.w	11566 <_vfiprintf_r+0x84e>
   111b8:	9a04      	ldr	r2, [sp, #16]
   111ba:	f8c9 4000 	str.w	r4, [r9]
   111be:	4413      	add	r3, r2
   111c0:	2907      	cmp	r1, #7
   111c2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   111c6:	f8c9 2004 	str.w	r2, [r9, #4]
   111ca:	f340 816e 	ble.w	114aa <_vfiprintf_r+0x792>
   111ce:	2b00      	cmp	r3, #0
   111d0:	f000 8275 	beq.w	116be <_vfiprintf_r+0x9a6>
   111d4:	ee18 1a10 	vmov	r1, s16
   111d8:	aa18      	add	r2, sp, #96	; 0x60
   111da:	4658      	mov	r0, fp
   111dc:	f7ff fd60 	bl	10ca0 <__sprint_r.part.0>
   111e0:	2800      	cmp	r0, #0
   111e2:	f47f af70 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   111e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   111e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   111ec:	0775      	lsls	r5, r6, #29
   111ee:	d505      	bpl.n	111fc <_vfiprintf_r+0x4e4>
   111f0:	9a06      	ldr	r2, [sp, #24]
   111f2:	9903      	ldr	r1, [sp, #12]
   111f4:	1a54      	subs	r4, r2, r1
   111f6:	2c00      	cmp	r4, #0
   111f8:	f300 826b 	bgt.w	116d2 <_vfiprintf_r+0x9ba>
   111fc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   11200:	9803      	ldr	r0, [sp, #12]
   11202:	4281      	cmp	r1, r0
   11204:	bfac      	ite	ge
   11206:	1852      	addge	r2, r2, r1
   11208:	1812      	addlt	r2, r2, r0
   1120a:	9205      	str	r2, [sp, #20]
   1120c:	2b00      	cmp	r3, #0
   1120e:	f47f af51 	bne.w	110b4 <_vfiprintf_r+0x39c>
   11212:	9908      	ldr	r1, [sp, #32]
   11214:	2300      	movs	r3, #0
   11216:	9319      	str	r3, [sp, #100]	; 0x64
   11218:	2900      	cmp	r1, #0
   1121a:	f000 8149 	beq.w	114b0 <_vfiprintf_r+0x798>
   1121e:	4658      	mov	r0, fp
   11220:	f7fc f8d0 	bl	d3c4 <_free_r>
   11224:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11228:	e5c1      	b.n	10dae <_vfiprintf_r+0x96>
   1122a:	059c      	lsls	r4, r3, #22
   1122c:	f53f af5d 	bmi.w	110ea <_vfiprintf_r+0x3d2>
   11230:	ee18 4a10 	vmov	r4, s16
   11234:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11236:	f7fb fde7 	bl	ce08 <__retarget_lock_release_recursive>
   1123a:	89a2      	ldrh	r2, [r4, #12]
   1123c:	e755      	b.n	110ea <_vfiprintf_r+0x3d2>
   1123e:	06f0      	lsls	r0, r6, #27
   11240:	9a07      	ldr	r2, [sp, #28]
   11242:	f100 831f 	bmi.w	11884 <_vfiprintf_r+0xb6c>
   11246:	0671      	lsls	r1, r6, #25
   11248:	f140 8319 	bpl.w	1187e <_vfiprintf_r+0xb66>
   1124c:	f932 3b04 	ldrsh.w	r3, [r2], #4
   11250:	9207      	str	r2, [sp, #28]
   11252:	17da      	asrs	r2, r3, #31
   11254:	4611      	mov	r1, r2
   11256:	e66e      	b.n	10f36 <_vfiprintf_r+0x21e>
   11258:	f016 0310 	ands.w	r3, r6, #16
   1125c:	9907      	ldr	r1, [sp, #28]
   1125e:	f040 8309 	bne.w	11874 <_vfiprintf_r+0xb5c>
   11262:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   11266:	f000 8301 	beq.w	1186c <_vfiprintf_r+0xb54>
   1126a:	461a      	mov	r2, r3
   1126c:	f851 3b04 	ldr.w	r3, [r1], #4
   11270:	9107      	str	r1, [sp, #28]
   11272:	b29b      	uxth	r3, r3
   11274:	e6c3      	b.n	10ffe <_vfiprintf_r+0x2e6>
   11276:	9b07      	ldr	r3, [sp, #28]
   11278:	461a      	mov	r2, r3
   1127a:	2300      	movs	r3, #0
   1127c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11280:	4613      	mov	r3, r2
   11282:	f853 4b04 	ldr.w	r4, [r3], #4
   11286:	9303      	str	r3, [sp, #12]
   11288:	2c00      	cmp	r4, #0
   1128a:	f000 8412 	beq.w	11ab2 <_vfiprintf_r+0xd9a>
   1128e:	2953      	cmp	r1, #83	; 0x53
   11290:	f000 8365 	beq.w	1195e <_vfiprintf_r+0xc46>
   11294:	f016 0510 	ands.w	r5, r6, #16
   11298:	f040 8361 	bne.w	1195e <_vfiprintf_r+0xc46>
   1129c:	1c7b      	adds	r3, r7, #1
   1129e:	f000 84b3 	beq.w	11c08 <_vfiprintf_r+0xef0>
   112a2:	463a      	mov	r2, r7
   112a4:	4629      	mov	r1, r5
   112a6:	4620      	mov	r0, r4
   112a8:	f7fe fc42 	bl	fb30 <memchr>
   112ac:	9008      	str	r0, [sp, #32]
   112ae:	2800      	cmp	r0, #0
   112b0:	f000 849f 	beq.w	11bf2 <_vfiprintf_r+0xeda>
   112b4:	1b03      	subs	r3, r0, r4
   112b6:	9a03      	ldr	r2, [sp, #12]
   112b8:	9304      	str	r3, [sp, #16]
   112ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   112be:	462f      	mov	r7, r5
   112c0:	9207      	str	r2, [sp, #28]
   112c2:	9303      	str	r3, [sp, #12]
   112c4:	9508      	str	r5, [sp, #32]
   112c6:	e657      	b.n	10f78 <_vfiprintf_r+0x260>
   112c8:	2943      	cmp	r1, #67	; 0x43
   112ca:	d002      	beq.n	112d2 <_vfiprintf_r+0x5ba>
   112cc:	06f5      	lsls	r5, r6, #27
   112ce:	f140 832d 	bpl.w	1192c <_vfiprintf_r+0xc14>
   112d2:	9d07      	ldr	r5, [sp, #28]
   112d4:	2208      	movs	r2, #8
   112d6:	2100      	movs	r1, #0
   112d8:	a816      	add	r0, sp, #88	; 0x58
   112da:	ac2b      	add	r4, sp, #172	; 0xac
   112dc:	f7fb fc0e 	bl	cafc <memset>
   112e0:	ab16      	add	r3, sp, #88	; 0x58
   112e2:	f855 2b04 	ldr.w	r2, [r5], #4
   112e6:	4621      	mov	r1, r4
   112e8:	4658      	mov	r0, fp
   112ea:	f7ff fc13 	bl	10b14 <_wcrtomb_r>
   112ee:	4603      	mov	r3, r0
   112f0:	3301      	adds	r3, #1
   112f2:	9004      	str	r0, [sp, #16]
   112f4:	f000 84b3 	beq.w	11c5e <_vfiprintf_r+0xf46>
   112f8:	9b04      	ldr	r3, [sp, #16]
   112fa:	9507      	str	r5, [sp, #28]
   112fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11300:	9303      	str	r3, [sp, #12]
   11302:	2300      	movs	r3, #0
   11304:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11308:	e703      	b.n	11112 <_vfiprintf_r+0x3fa>
   1130a:	9b07      	ldr	r3, [sp, #28]
   1130c:	f853 2b04 	ldr.w	r2, [r3], #4
   11310:	9206      	str	r2, [sp, #24]
   11312:	2a00      	cmp	r2, #0
   11314:	f280 829c 	bge.w	11850 <_vfiprintf_r+0xb38>
   11318:	9a06      	ldr	r2, [sp, #24]
   1131a:	4252      	negs	r2, r2
   1131c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11320:	f898 1000 	ldrb.w	r1, [r8]
   11324:	f046 0604 	orr.w	r6, r6, #4
   11328:	e569      	b.n	10dfe <_vfiprintf_r+0xe6>
   1132a:	f898 1000 	ldrb.w	r1, [r8]
   1132e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   11332:	e564      	b.n	10dfe <_vfiprintf_r+0xe6>
   11334:	f898 1000 	ldrb.w	r1, [r8]
   11338:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1133c:	e55f      	b.n	10dfe <_vfiprintf_r+0xe6>
   1133e:	4642      	mov	r2, r8
   11340:	f812 1b01 	ldrb.w	r1, [r2], #1
   11344:	292a      	cmp	r1, #42	; 0x2a
   11346:	f000 8496 	beq.w	11c76 <_vfiprintf_r+0xf5e>
   1134a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1134e:	2b09      	cmp	r3, #9
   11350:	4690      	mov	r8, r2
   11352:	f04f 0700 	mov.w	r7, #0
   11356:	f63f ad54 	bhi.w	10e02 <_vfiprintf_r+0xea>
   1135a:	f818 1b01 	ldrb.w	r1, [r8], #1
   1135e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   11362:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   11366:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1136a:	2b09      	cmp	r3, #9
   1136c:	d9f5      	bls.n	1135a <_vfiprintf_r+0x642>
   1136e:	e548      	b.n	10e02 <_vfiprintf_r+0xea>
   11370:	f898 1000 	ldrb.w	r1, [r8]
   11374:	f046 0601 	orr.w	r6, r6, #1
   11378:	e541      	b.n	10dfe <_vfiprintf_r+0xe6>
   1137a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1137e:	2b00      	cmp	r3, #0
   11380:	f47f adc2 	bne.w	10f08 <_vfiprintf_r+0x1f0>
   11384:	2320      	movs	r3, #32
   11386:	f898 1000 	ldrb.w	r1, [r8]
   1138a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1138e:	e536      	b.n	10dfe <_vfiprintf_r+0xe6>
   11390:	f898 1000 	ldrb.w	r1, [r8]
   11394:	296c      	cmp	r1, #108	; 0x6c
   11396:	bf03      	ittte	eq
   11398:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1139c:	f046 0620 	orreq.w	r6, r6, #32
   113a0:	f108 0801 	addeq.w	r8, r8, #1
   113a4:	f046 0610 	orrne.w	r6, r6, #16
   113a8:	e529      	b.n	10dfe <_vfiprintf_r+0xe6>
   113aa:	f898 1000 	ldrb.w	r1, [r8]
   113ae:	2968      	cmp	r1, #104	; 0x68
   113b0:	bf03      	ittte	eq
   113b2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   113b6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   113ba:	f108 0801 	addeq.w	r8, r8, #1
   113be:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   113c2:	e51c      	b.n	10dfe <_vfiprintf_r+0xe6>
   113c4:	f046 0310 	orr.w	r3, r6, #16
   113c8:	9303      	str	r3, [sp, #12]
   113ca:	9b03      	ldr	r3, [sp, #12]
   113cc:	f013 0220 	ands.w	r2, r3, #32
   113d0:	f000 8206 	beq.w	117e0 <_vfiprintf_r+0xac8>
   113d4:	9b07      	ldr	r3, [sp, #28]
   113d6:	3307      	adds	r3, #7
   113d8:	f023 0307 	bic.w	r3, r3, #7
   113dc:	4619      	mov	r1, r3
   113de:	685a      	ldr	r2, [r3, #4]
   113e0:	f851 3b08 	ldr.w	r3, [r1], #8
   113e4:	9107      	str	r1, [sp, #28]
   113e6:	2101      	movs	r1, #1
   113e8:	e60d      	b.n	11006 <_vfiprintf_r+0x2ee>
   113ea:	9a07      	ldr	r2, [sp, #28]
   113ec:	f046 0302 	orr.w	r3, r6, #2
   113f0:	9303      	str	r3, [sp, #12]
   113f2:	f852 3b04 	ldr.w	r3, [r2], #4
   113f6:	9207      	str	r2, [sp, #28]
   113f8:	f647 0230 	movw	r2, #30768	; 0x7830
   113fc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   11400:	4ab8      	ldr	r2, [pc, #736]	; (116e4 <_vfiprintf_r+0x9cc>)
   11402:	920c      	str	r2, [sp, #48]	; 0x30
   11404:	2102      	movs	r1, #2
   11406:	2200      	movs	r2, #0
   11408:	e5fd      	b.n	11006 <_vfiprintf_r+0x2ee>
   1140a:	06b7      	lsls	r7, r6, #26
   1140c:	f100 8248 	bmi.w	118a0 <_vfiprintf_r+0xb88>
   11410:	06f5      	lsls	r5, r6, #27
   11412:	f100 8346 	bmi.w	11aa2 <_vfiprintf_r+0xd8a>
   11416:	0674      	lsls	r4, r6, #25
   11418:	f100 83d5 	bmi.w	11bc6 <_vfiprintf_r+0xeae>
   1141c:	05b0      	lsls	r0, r6, #22
   1141e:	f140 8340 	bpl.w	11aa2 <_vfiprintf_r+0xd8a>
   11422:	9b07      	ldr	r3, [sp, #28]
   11424:	9905      	ldr	r1, [sp, #20]
   11426:	f853 2b04 	ldr.w	r2, [r3], #4
   1142a:	9307      	str	r3, [sp, #28]
   1142c:	7011      	strb	r1, [r2, #0]
   1142e:	e4be      	b.n	10dae <_vfiprintf_r+0x96>
   11430:	9603      	str	r6, [sp, #12]
   11432:	2901      	cmp	r1, #1
   11434:	f43f ad8c 	beq.w	10f50 <_vfiprintf_r+0x238>
   11438:	2902      	cmp	r1, #2
   1143a:	ac44      	add	r4, sp, #272	; 0x110
   1143c:	d111      	bne.n	11462 <_vfiprintf_r+0x74a>
   1143e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11440:	f003 010f 	and.w	r1, r3, #15
   11444:	091b      	lsrs	r3, r3, #4
   11446:	5c41      	ldrb	r1, [r0, r1]
   11448:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1144c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   11450:	0912      	lsrs	r2, r2, #4
   11452:	ea53 0102 	orrs.w	r1, r3, r2
   11456:	d1f3      	bne.n	11440 <_vfiprintf_r+0x728>
   11458:	9e03      	ldr	r6, [sp, #12]
   1145a:	ab44      	add	r3, sp, #272	; 0x110
   1145c:	1b1b      	subs	r3, r3, r4
   1145e:	9304      	str	r3, [sp, #16]
   11460:	e583      	b.n	10f6a <_vfiprintf_r+0x252>
   11462:	f003 0107 	and.w	r1, r3, #7
   11466:	08db      	lsrs	r3, r3, #3
   11468:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1146c:	08d2      	lsrs	r2, r2, #3
   1146e:	3130      	adds	r1, #48	; 0x30
   11470:	ea53 0502 	orrs.w	r5, r3, r2
   11474:	4620      	mov	r0, r4
   11476:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1147a:	d1f2      	bne.n	11462 <_vfiprintf_r+0x74a>
   1147c:	9e03      	ldr	r6, [sp, #12]
   1147e:	07f3      	lsls	r3, r6, #31
   11480:	d5eb      	bpl.n	1145a <_vfiprintf_r+0x742>
   11482:	2930      	cmp	r1, #48	; 0x30
   11484:	d0e8      	beq.n	11458 <_vfiprintf_r+0x740>
   11486:	2330      	movs	r3, #48	; 0x30
   11488:	3802      	subs	r0, #2
   1148a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1148e:	ab44      	add	r3, sp, #272	; 0x110
   11490:	1a1b      	subs	r3, r3, r0
   11492:	9e03      	ldr	r6, [sp, #12]
   11494:	9304      	str	r3, [sp, #16]
   11496:	4604      	mov	r4, r0
   11498:	e567      	b.n	10f6a <_vfiprintf_r+0x252>
   1149a:	9b04      	ldr	r3, [sp, #16]
   1149c:	941b      	str	r4, [sp, #108]	; 0x6c
   1149e:	2201      	movs	r2, #1
   114a0:	931c      	str	r3, [sp, #112]	; 0x70
   114a2:	931a      	str	r3, [sp, #104]	; 0x68
   114a4:	9219      	str	r2, [sp, #100]	; 0x64
   114a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   114aa:	f109 0908 	add.w	r9, r9, #8
   114ae:	e69d      	b.n	111ec <_vfiprintf_r+0x4d4>
   114b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   114b4:	e47b      	b.n	10dae <_vfiprintf_r+0x96>
   114b6:	9a06      	ldr	r2, [sp, #24]
   114b8:	9d03      	ldr	r5, [sp, #12]
   114ba:	1b55      	subs	r5, r2, r5
   114bc:	2d00      	cmp	r5, #0
   114be:	f77f ae76 	ble.w	111ae <_vfiprintf_r+0x496>
   114c2:	2d10      	cmp	r5, #16
   114c4:	f340 83bb 	ble.w	11c3e <_vfiprintf_r+0xf26>
   114c8:	9409      	str	r4, [sp, #36]	; 0x24
   114ca:	ee18 4a10 	vmov	r4, s16
   114ce:	e007      	b.n	114e0 <_vfiprintf_r+0x7c8>
   114d0:	f100 0c02 	add.w	ip, r0, #2
   114d4:	f109 0908 	add.w	r9, r9, #8
   114d8:	4610      	mov	r0, r2
   114da:	3d10      	subs	r5, #16
   114dc:	2d10      	cmp	r5, #16
   114de:	dd1e      	ble.n	1151e <_vfiprintf_r+0x806>
   114e0:	4981      	ldr	r1, [pc, #516]	; (116e8 <_vfiprintf_r+0x9d0>)
   114e2:	f8c9 1000 	str.w	r1, [r9]
   114e6:	1c42      	adds	r2, r0, #1
   114e8:	3310      	adds	r3, #16
   114ea:	2110      	movs	r1, #16
   114ec:	2a07      	cmp	r2, #7
   114ee:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   114f2:	f8c9 1004 	str.w	r1, [r9, #4]
   114f6:	ddeb      	ble.n	114d0 <_vfiprintf_r+0x7b8>
   114f8:	aa18      	add	r2, sp, #96	; 0x60
   114fa:	2b00      	cmp	r3, #0
   114fc:	d074      	beq.n	115e8 <_vfiprintf_r+0x8d0>
   114fe:	4621      	mov	r1, r4
   11500:	4658      	mov	r0, fp
   11502:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11506:	f7ff fbcb 	bl	10ca0 <__sprint_r.part.0>
   1150a:	2800      	cmp	r0, #0
   1150c:	f47f addb 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   11510:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11514:	3d10      	subs	r5, #16
   11516:	2d10      	cmp	r5, #16
   11518:	f100 0c01 	add.w	ip, r0, #1
   1151c:	dce0      	bgt.n	114e0 <_vfiprintf_r+0x7c8>
   1151e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11520:	4a71      	ldr	r2, [pc, #452]	; (116e8 <_vfiprintf_r+0x9d0>)
   11522:	f8c9 5004 	str.w	r5, [r9, #4]
   11526:	442b      	add	r3, r5
   11528:	f1bc 0f07 	cmp.w	ip, #7
   1152c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   11530:	f8c9 2000 	str.w	r2, [r9]
   11534:	f340 8194 	ble.w	11860 <_vfiprintf_r+0xb48>
   11538:	2b00      	cmp	r3, #0
   1153a:	f000 831f 	beq.w	11b7c <_vfiprintf_r+0xe64>
   1153e:	ee18 1a10 	vmov	r1, s16
   11542:	aa18      	add	r2, sp, #96	; 0x60
   11544:	4658      	mov	r0, fp
   11546:	f7ff fbab 	bl	10ca0 <__sprint_r.part.0>
   1154a:	2800      	cmp	r0, #0
   1154c:	f47f adbb 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   11550:	9a04      	ldr	r2, [sp, #16]
   11552:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11556:	1abd      	subs	r5, r7, r2
   11558:	2d00      	cmp	r5, #0
   1155a:	f100 0101 	add.w	r1, r0, #1
   1155e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11562:	f77f ae29 	ble.w	111b8 <_vfiprintf_r+0x4a0>
   11566:	2d10      	cmp	r5, #16
   11568:	dd29      	ble.n	115be <_vfiprintf_r+0x8a6>
   1156a:	9409      	str	r4, [sp, #36]	; 0x24
   1156c:	2710      	movs	r7, #16
   1156e:	ee18 4a10 	vmov	r4, s16
   11572:	e007      	b.n	11584 <_vfiprintf_r+0x86c>
   11574:	f100 0c02 	add.w	ip, r0, #2
   11578:	f109 0908 	add.w	r9, r9, #8
   1157c:	4610      	mov	r0, r2
   1157e:	3d10      	subs	r5, #16
   11580:	2d10      	cmp	r5, #16
   11582:	dd1a      	ble.n	115ba <_vfiprintf_r+0x8a2>
   11584:	1c42      	adds	r2, r0, #1
   11586:	4958      	ldr	r1, [pc, #352]	; (116e8 <_vfiprintf_r+0x9d0>)
   11588:	3310      	adds	r3, #16
   1158a:	2a07      	cmp	r2, #7
   1158c:	e9c9 1700 	strd	r1, r7, [r9]
   11590:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11594:	ddee      	ble.n	11574 <_vfiprintf_r+0x85c>
   11596:	aa18      	add	r2, sp, #96	; 0x60
   11598:	b303      	cbz	r3, 115dc <_vfiprintf_r+0x8c4>
   1159a:	4621      	mov	r1, r4
   1159c:	4658      	mov	r0, fp
   1159e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115a2:	f7ff fb7d 	bl	10ca0 <__sprint_r.part.0>
   115a6:	2800      	cmp	r0, #0
   115a8:	f47f ad8d 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   115ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   115b0:	3d10      	subs	r5, #16
   115b2:	2d10      	cmp	r5, #16
   115b4:	f100 0c01 	add.w	ip, r0, #1
   115b8:	dce4      	bgt.n	11584 <_vfiprintf_r+0x86c>
   115ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   115bc:	4661      	mov	r1, ip
   115be:	4a4a      	ldr	r2, [pc, #296]	; (116e8 <_vfiprintf_r+0x9d0>)
   115c0:	f8c9 5004 	str.w	r5, [r9, #4]
   115c4:	442b      	add	r3, r5
   115c6:	2907      	cmp	r1, #7
   115c8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   115cc:	f8c9 2000 	str.w	r2, [r9]
   115d0:	f300 80e7 	bgt.w	117a2 <_vfiprintf_r+0xa8a>
   115d4:	f109 0908 	add.w	r9, r9, #8
   115d8:	3101      	adds	r1, #1
   115da:	e5ed      	b.n	111b8 <_vfiprintf_r+0x4a0>
   115dc:	f04f 0c01 	mov.w	ip, #1
   115e0:	4618      	mov	r0, r3
   115e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115e6:	e7ca      	b.n	1157e <_vfiprintf_r+0x866>
   115e8:	f04f 0c01 	mov.w	ip, #1
   115ec:	4618      	mov	r0, r3
   115ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115f2:	e772      	b.n	114da <_vfiprintf_r+0x7c2>
   115f4:	2b00      	cmp	r3, #0
   115f6:	f000 8104 	beq.w	11802 <_vfiprintf_r+0xaea>
   115fa:	ee18 1a10 	vmov	r1, s16
   115fe:	aa18      	add	r2, sp, #96	; 0x60
   11600:	4658      	mov	r0, fp
   11602:	f7ff fb4d 	bl	10ca0 <__sprint_r.part.0>
   11606:	2800      	cmp	r0, #0
   11608:	f47f ad5d 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   1160c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11610:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11614:	1c41      	adds	r1, r0, #1
   11616:	e5a7      	b.n	11168 <_vfiprintf_r+0x450>
   11618:	2302      	movs	r3, #2
   1161a:	aa11      	add	r2, sp, #68	; 0x44
   1161c:	931c      	str	r3, [sp, #112]	; 0x70
   1161e:	921b      	str	r2, [sp, #108]	; 0x6c
   11620:	2101      	movs	r1, #1
   11622:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11626:	4608      	mov	r0, r1
   11628:	f109 0908 	add.w	r9, r9, #8
   1162c:	1c41      	adds	r1, r0, #1
   1162e:	e5ba      	b.n	111a6 <_vfiprintf_r+0x48e>
   11630:	2d10      	cmp	r5, #16
   11632:	f340 82e5 	ble.w	11c00 <_vfiprintf_r+0xee8>
   11636:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1163a:	940f      	str	r4, [sp, #60]	; 0x3c
   1163c:	4608      	mov	r0, r1
   1163e:	ee18 4a10 	vmov	r4, s16
   11642:	e007      	b.n	11654 <_vfiprintf_r+0x93c>
   11644:	f100 0c02 	add.w	ip, r0, #2
   11648:	f109 0908 	add.w	r9, r9, #8
   1164c:	4610      	mov	r0, r2
   1164e:	3d10      	subs	r5, #16
   11650:	2d10      	cmp	r5, #16
   11652:	dd1d      	ble.n	11690 <_vfiprintf_r+0x978>
   11654:	4925      	ldr	r1, [pc, #148]	; (116ec <_vfiprintf_r+0x9d4>)
   11656:	f8c9 1000 	str.w	r1, [r9]
   1165a:	1c42      	adds	r2, r0, #1
   1165c:	3310      	adds	r3, #16
   1165e:	2110      	movs	r1, #16
   11660:	2a07      	cmp	r2, #7
   11662:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11666:	f8c9 1004 	str.w	r1, [r9, #4]
   1166a:	ddeb      	ble.n	11644 <_vfiprintf_r+0x92c>
   1166c:	aa18      	add	r2, sp, #96	; 0x60
   1166e:	b303      	cbz	r3, 116b2 <_vfiprintf_r+0x99a>
   11670:	4621      	mov	r1, r4
   11672:	4658      	mov	r0, fp
   11674:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11678:	f7ff fb12 	bl	10ca0 <__sprint_r.part.0>
   1167c:	2800      	cmp	r0, #0
   1167e:	f47f ad22 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   11682:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11686:	3d10      	subs	r5, #16
   11688:	2d10      	cmp	r5, #16
   1168a:	f100 0c01 	add.w	ip, r0, #1
   1168e:	dce1      	bgt.n	11654 <_vfiprintf_r+0x93c>
   11690:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11692:	4660      	mov	r0, ip
   11694:	4a15      	ldr	r2, [pc, #84]	; (116ec <_vfiprintf_r+0x9d4>)
   11696:	f8c9 5004 	str.w	r5, [r9, #4]
   1169a:	442b      	add	r3, r5
   1169c:	2807      	cmp	r0, #7
   1169e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   116a2:	f8c9 2000 	str.w	r2, [r9]
   116a6:	f300 80c1 	bgt.w	1182c <_vfiprintf_r+0xb14>
   116aa:	f109 0908 	add.w	r9, r9, #8
   116ae:	1c41      	adds	r1, r0, #1
   116b0:	e546      	b.n	11140 <_vfiprintf_r+0x428>
   116b2:	4618      	mov	r0, r3
   116b4:	f04f 0c01 	mov.w	ip, #1
   116b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116bc:	e7c7      	b.n	1164e <_vfiprintf_r+0x936>
   116be:	0776      	lsls	r6, r6, #29
   116c0:	9319      	str	r3, [sp, #100]	; 0x64
   116c2:	d553      	bpl.n	1176c <_vfiprintf_r+0xa54>
   116c4:	9a06      	ldr	r2, [sp, #24]
   116c6:	9903      	ldr	r1, [sp, #12]
   116c8:	1a54      	subs	r4, r2, r1
   116ca:	2c00      	cmp	r4, #0
   116cc:	dd4e      	ble.n	1176c <_vfiprintf_r+0xa54>
   116ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116d2:	2c10      	cmp	r4, #16
   116d4:	f340 82b0 	ble.w	11c38 <_vfiprintf_r+0xf20>
   116d8:	9919      	ldr	r1, [sp, #100]	; 0x64
   116da:	ee18 6a10 	vmov	r6, s16
   116de:	2510      	movs	r5, #16
   116e0:	e00d      	b.n	116fe <_vfiprintf_r+0x9e6>
   116e2:	bf00      	nop
   116e4:	20000c7c 	.word	0x20000c7c
   116e8:	20001204 	.word	0x20001204
   116ec:	20000cc0 	.word	0x20000cc0
   116f0:	1c88      	adds	r0, r1, #2
   116f2:	f109 0908 	add.w	r9, r9, #8
   116f6:	4611      	mov	r1, r2
   116f8:	3c10      	subs	r4, #16
   116fa:	2c10      	cmp	r4, #16
   116fc:	dd1a      	ble.n	11734 <_vfiprintf_r+0xa1c>
   116fe:	1c4a      	adds	r2, r1, #1
   11700:	48b3      	ldr	r0, [pc, #716]	; (119d0 <_vfiprintf_r+0xcb8>)
   11702:	3310      	adds	r3, #16
   11704:	2a07      	cmp	r2, #7
   11706:	e9c9 0500 	strd	r0, r5, [r9]
   1170a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1170e:	ddef      	ble.n	116f0 <_vfiprintf_r+0x9d8>
   11710:	aa18      	add	r2, sp, #96	; 0x60
   11712:	b333      	cbz	r3, 11762 <_vfiprintf_r+0xa4a>
   11714:	4631      	mov	r1, r6
   11716:	4658      	mov	r0, fp
   11718:	f7ff fac2 	bl	10ca0 <__sprint_r.part.0>
   1171c:	2800      	cmp	r0, #0
   1171e:	f47f acd2 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   11722:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   11726:	3c10      	subs	r4, #16
   11728:	2c10      	cmp	r4, #16
   1172a:	f101 0001 	add.w	r0, r1, #1
   1172e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11732:	dce4      	bgt.n	116fe <_vfiprintf_r+0x9e6>
   11734:	4aa6      	ldr	r2, [pc, #664]	; (119d0 <_vfiprintf_r+0xcb8>)
   11736:	f8c9 4004 	str.w	r4, [r9, #4]
   1173a:	4423      	add	r3, r4
   1173c:	2807      	cmp	r0, #7
   1173e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   11742:	f8c9 2000 	str.w	r2, [r9]
   11746:	f77f ad59 	ble.w	111fc <_vfiprintf_r+0x4e4>
   1174a:	b17b      	cbz	r3, 1176c <_vfiprintf_r+0xa54>
   1174c:	ee18 1a10 	vmov	r1, s16
   11750:	aa18      	add	r2, sp, #96	; 0x60
   11752:	4658      	mov	r0, fp
   11754:	f7ff faa4 	bl	10ca0 <__sprint_r.part.0>
   11758:	2800      	cmp	r0, #0
   1175a:	f47f acb4 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   1175e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11760:	e54c      	b.n	111fc <_vfiprintf_r+0x4e4>
   11762:	2001      	movs	r0, #1
   11764:	4619      	mov	r1, r3
   11766:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1176a:	e7c5      	b.n	116f8 <_vfiprintf_r+0x9e0>
   1176c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   11770:	9903      	ldr	r1, [sp, #12]
   11772:	428a      	cmp	r2, r1
   11774:	bfac      	ite	ge
   11776:	189b      	addge	r3, r3, r2
   11778:	185b      	addlt	r3, r3, r1
   1177a:	9305      	str	r3, [sp, #20]
   1177c:	e549      	b.n	11212 <_vfiprintf_r+0x4fa>
   1177e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11782:	058f      	lsls	r7, r1, #22
   11784:	ee18 3a10 	vmov	r3, s16
   11788:	b28a      	uxth	r2, r1
   1178a:	f53f aae8 	bmi.w	10d5e <_vfiprintf_r+0x46>
   1178e:	ee18 5a10 	vmov	r5, s16
   11792:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11794:	f7fb fb36 	bl	ce04 <__retarget_lock_acquire_recursive>
   11798:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1179c:	b28a      	uxth	r2, r1
   1179e:	f7ff bade 	b.w	10d5e <_vfiprintf_r+0x46>
   117a2:	2b00      	cmp	r3, #0
   117a4:	f43f ae79 	beq.w	1149a <_vfiprintf_r+0x782>
   117a8:	ee18 1a10 	vmov	r1, s16
   117ac:	aa18      	add	r2, sp, #96	; 0x60
   117ae:	4658      	mov	r0, fp
   117b0:	f7ff fa76 	bl	10ca0 <__sprint_r.part.0>
   117b4:	2800      	cmp	r0, #0
   117b6:	f47f ac86 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   117ba:	9919      	ldr	r1, [sp, #100]	; 0x64
   117bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   117be:	3101      	adds	r1, #1
   117c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117c4:	e4f8      	b.n	111b8 <_vfiprintf_r+0x4a0>
   117c6:	9219      	str	r2, [sp, #100]	; 0x64
   117c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117cc:	e45e      	b.n	1108c <_vfiprintf_r+0x374>
   117ce:	2f00      	cmp	r7, #0
   117d0:	f47f abc3 	bne.w	10f5a <_vfiprintf_r+0x242>
   117d4:	9e03      	ldr	r6, [sp, #12]
   117d6:	2700      	movs	r7, #0
   117d8:	9704      	str	r7, [sp, #16]
   117da:	ac44      	add	r4, sp, #272	; 0x110
   117dc:	f7ff bbc5 	b.w	10f6a <_vfiprintf_r+0x252>
   117e0:	9b03      	ldr	r3, [sp, #12]
   117e2:	f013 0310 	ands.w	r3, r3, #16
   117e6:	d154      	bne.n	11892 <_vfiprintf_r+0xb7a>
   117e8:	9a03      	ldr	r2, [sp, #12]
   117ea:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   117ee:	f000 816b 	beq.w	11ac8 <_vfiprintf_r+0xdb0>
   117f2:	9907      	ldr	r1, [sp, #28]
   117f4:	461a      	mov	r2, r3
   117f6:	f851 3b04 	ldr.w	r3, [r1], #4
   117fa:	9107      	str	r1, [sp, #28]
   117fc:	b29b      	uxth	r3, r3
   117fe:	2101      	movs	r1, #1
   11800:	e401      	b.n	11006 <_vfiprintf_r+0x2ee>
   11802:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11804:	2a00      	cmp	r2, #0
   11806:	d164      	bne.n	118d2 <_vfiprintf_r+0xbba>
   11808:	4618      	mov	r0, r3
   1180a:	2101      	movs	r1, #1
   1180c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11810:	e4c9      	b.n	111a6 <_vfiprintf_r+0x48e>
   11812:	2101      	movs	r1, #1
   11814:	4618      	mov	r0, r3
   11816:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1181a:	e4c4      	b.n	111a6 <_vfiprintf_r+0x48e>
   1181c:	425b      	negs	r3, r3
   1181e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   11822:	9603      	str	r6, [sp, #12]
   11824:	202d      	movs	r0, #45	; 0x2d
   11826:	2101      	movs	r1, #1
   11828:	f7ff bbee 	b.w	11008 <_vfiprintf_r+0x2f0>
   1182c:	2b00      	cmp	r3, #0
   1182e:	f000 8088 	beq.w	11942 <_vfiprintf_r+0xc2a>
   11832:	ee18 1a10 	vmov	r1, s16
   11836:	aa18      	add	r2, sp, #96	; 0x60
   11838:	4658      	mov	r0, fp
   1183a:	f7ff fa31 	bl	10ca0 <__sprint_r.part.0>
   1183e:	2800      	cmp	r0, #0
   11840:	f47f ac41 	bne.w	110c6 <_vfiprintf_r+0x3ae>
   11844:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11848:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1184c:	1c41      	adds	r1, r0, #1
   1184e:	e477      	b.n	11140 <_vfiprintf_r+0x428>
   11850:	f898 1000 	ldrb.w	r1, [r8]
   11854:	9307      	str	r3, [sp, #28]
   11856:	f7ff bad2 	b.w	10dfe <_vfiprintf_r+0xe6>
   1185a:	ac44      	add	r4, sp, #272	; 0x110
   1185c:	f7ff bb85 	b.w	10f6a <_vfiprintf_r+0x252>
   11860:	f109 0908 	add.w	r9, r9, #8
   11864:	f10c 0101 	add.w	r1, ip, #1
   11868:	4660      	mov	r0, ip
   1186a:	e4a0      	b.n	111ae <_vfiprintf_r+0x496>
   1186c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11870:	f040 8197 	bne.w	11ba2 <_vfiprintf_r+0xe8a>
   11874:	f851 3b04 	ldr.w	r3, [r1], #4
   11878:	9107      	str	r1, [sp, #28]
   1187a:	f7ff bbc0 	b.w	10ffe <_vfiprintf_r+0x2e6>
   1187e:	05b3      	lsls	r3, r6, #22
   11880:	f100 8188 	bmi.w	11b94 <_vfiprintf_r+0xe7c>
   11884:	f852 3b04 	ldr.w	r3, [r2], #4
   11888:	9207      	str	r2, [sp, #28]
   1188a:	17da      	asrs	r2, r3, #31
   1188c:	4611      	mov	r1, r2
   1188e:	f7ff bb52 	b.w	10f36 <_vfiprintf_r+0x21e>
   11892:	9907      	ldr	r1, [sp, #28]
   11894:	f851 3b04 	ldr.w	r3, [r1], #4
   11898:	9107      	str	r1, [sp, #28]
   1189a:	2101      	movs	r1, #1
   1189c:	f7ff bbb3 	b.w	11006 <_vfiprintf_r+0x2ee>
   118a0:	9b07      	ldr	r3, [sp, #28]
   118a2:	9805      	ldr	r0, [sp, #20]
   118a4:	f853 1b04 	ldr.w	r1, [r3], #4
   118a8:	9307      	str	r3, [sp, #28]
   118aa:	17c2      	asrs	r2, r0, #31
   118ac:	e9c1 0200 	strd	r0, r2, [r1]
   118b0:	f7ff ba7d 	b.w	10dae <_vfiprintf_r+0x96>
   118b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118b6:	2b00      	cmp	r3, #0
   118b8:	f43f ab26 	beq.w	10f08 <_vfiprintf_r+0x1f0>
   118bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   118be:	781b      	ldrb	r3, [r3, #0]
   118c0:	2b00      	cmp	r3, #0
   118c2:	f43f ab21 	beq.w	10f08 <_vfiprintf_r+0x1f0>
   118c6:	f898 1000 	ldrb.w	r1, [r8]
   118ca:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   118ce:	f7ff ba96 	b.w	10dfe <_vfiprintf_r+0xe6>
   118d2:	2302      	movs	r3, #2
   118d4:	aa11      	add	r2, sp, #68	; 0x44
   118d6:	931c      	str	r3, [sp, #112]	; 0x70
   118d8:	921b      	str	r2, [sp, #108]	; 0x6c
   118da:	2001      	movs	r0, #1
   118dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118e0:	e6a2      	b.n	11628 <_vfiprintf_r+0x910>
   118e2:	9603      	str	r6, [sp, #12]
   118e4:	e571      	b.n	113ca <_vfiprintf_r+0x6b2>
   118e6:	4b3b      	ldr	r3, [pc, #236]	; (119d4 <_vfiprintf_r+0xcbc>)
   118e8:	930c      	str	r3, [sp, #48]	; 0x30
   118ea:	f016 0220 	ands.w	r2, r6, #32
   118ee:	d059      	beq.n	119a4 <_vfiprintf_r+0xc8c>
   118f0:	9b07      	ldr	r3, [sp, #28]
   118f2:	3307      	adds	r3, #7
   118f4:	f023 0307 	bic.w	r3, r3, #7
   118f8:	4618      	mov	r0, r3
   118fa:	685a      	ldr	r2, [r3, #4]
   118fc:	f850 3b08 	ldr.w	r3, [r0], #8
   11900:	9007      	str	r0, [sp, #28]
   11902:	07f4      	lsls	r4, r6, #31
   11904:	d509      	bpl.n	1191a <_vfiprintf_r+0xc02>
   11906:	ea53 0002 	orrs.w	r0, r3, r2
   1190a:	d006      	beq.n	1191a <_vfiprintf_r+0xc02>
   1190c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   11910:	2130      	movs	r1, #48	; 0x30
   11912:	f046 0602 	orr.w	r6, r6, #2
   11916:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1191a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1191e:	9103      	str	r1, [sp, #12]
   11920:	2102      	movs	r1, #2
   11922:	f7ff bb70 	b.w	11006 <_vfiprintf_r+0x2ee>
   11926:	4b2c      	ldr	r3, [pc, #176]	; (119d8 <_vfiprintf_r+0xcc0>)
   11928:	930c      	str	r3, [sp, #48]	; 0x30
   1192a:	e7de      	b.n	118ea <_vfiprintf_r+0xbd2>
   1192c:	9b07      	ldr	r3, [sp, #28]
   1192e:	2101      	movs	r1, #1
   11930:	f853 2b04 	ldr.w	r2, [r3], #4
   11934:	9103      	str	r1, [sp, #12]
   11936:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1193a:	9307      	str	r3, [sp, #28]
   1193c:	9104      	str	r1, [sp, #16]
   1193e:	ac2b      	add	r4, sp, #172	; 0xac
   11940:	e4df      	b.n	11302 <_vfiprintf_r+0x5ea>
   11942:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11946:	2a00      	cmp	r2, #0
   11948:	f040 8132 	bne.w	11bb0 <_vfiprintf_r+0xe98>
   1194c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1194e:	2a00      	cmp	r2, #0
   11950:	f47f ae62 	bne.w	11618 <_vfiprintf_r+0x900>
   11954:	4618      	mov	r0, r3
   11956:	2101      	movs	r1, #1
   11958:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1195c:	e427      	b.n	111ae <_vfiprintf_r+0x496>
   1195e:	2100      	movs	r1, #0
   11960:	2208      	movs	r2, #8
   11962:	a816      	add	r0, sp, #88	; 0x58
   11964:	9413      	str	r4, [sp, #76]	; 0x4c
   11966:	f7fb f8c9 	bl	cafc <memset>
   1196a:	1c79      	adds	r1, r7, #1
   1196c:	f000 80bc 	beq.w	11ae8 <_vfiprintf_r+0xdd0>
   11970:	2500      	movs	r5, #0
   11972:	9407      	str	r4, [sp, #28]
   11974:	462c      	mov	r4, r5
   11976:	e00c      	b.n	11992 <_vfiprintf_r+0xc7a>
   11978:	a92b      	add	r1, sp, #172	; 0xac
   1197a:	4658      	mov	r0, fp
   1197c:	f7ff f8ca 	bl	10b14 <_wcrtomb_r>
   11980:	1c42      	adds	r2, r0, #1
   11982:	4420      	add	r0, r4
   11984:	f000 816b 	beq.w	11c5e <_vfiprintf_r+0xf46>
   11988:	42b8      	cmp	r0, r7
   1198a:	dc08      	bgt.n	1199e <_vfiprintf_r+0xc86>
   1198c:	f000 8170 	beq.w	11c70 <_vfiprintf_r+0xf58>
   11990:	4604      	mov	r4, r0
   11992:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11994:	5952      	ldr	r2, [r2, r5]
   11996:	ab16      	add	r3, sp, #88	; 0x58
   11998:	3504      	adds	r5, #4
   1199a:	2a00      	cmp	r2, #0
   1199c:	d1ec      	bne.n	11978 <_vfiprintf_r+0xc60>
   1199e:	9404      	str	r4, [sp, #16]
   119a0:	9c07      	ldr	r4, [sp, #28]
   119a2:	e0af      	b.n	11b04 <_vfiprintf_r+0xdec>
   119a4:	f016 0310 	ands.w	r3, r6, #16
   119a8:	9807      	ldr	r0, [sp, #28]
   119aa:	d10c      	bne.n	119c6 <_vfiprintf_r+0xcae>
   119ac:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   119b0:	d005      	beq.n	119be <_vfiprintf_r+0xca6>
   119b2:	461a      	mov	r2, r3
   119b4:	f850 3b04 	ldr.w	r3, [r0], #4
   119b8:	9007      	str	r0, [sp, #28]
   119ba:	b29b      	uxth	r3, r3
   119bc:	e7a1      	b.n	11902 <_vfiprintf_r+0xbea>
   119be:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   119c2:	f040 80e1 	bne.w	11b88 <_vfiprintf_r+0xe70>
   119c6:	f850 3b04 	ldr.w	r3, [r0], #4
   119ca:	9007      	str	r0, [sp, #28]
   119cc:	e799      	b.n	11902 <_vfiprintf_r+0xbea>
   119ce:	bf00      	nop
   119d0:	20000cc0 	.word	0x20000cc0
   119d4:	20000c7c 	.word	0x20000c7c
   119d8:	20000c90 	.word	0x20000c90
   119dc:	9903      	ldr	r1, [sp, #12]
   119de:	9704      	str	r7, [sp, #16]
   119e0:	ac44      	add	r4, sp, #272	; 0x110
   119e2:	469e      	mov	lr, r3
   119e4:	ee08 ba90 	vmov	s17, fp
   119e8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   119ec:	f04f 0c00 	mov.w	ip, #0
   119f0:	4623      	mov	r3, r4
   119f2:	e006      	b.n	11a02 <_vfiprintf_r+0xcea>
   119f4:	f1be 0f0a 	cmp.w	lr, #10
   119f8:	f172 0200 	sbcs.w	r2, r2, #0
   119fc:	d339      	bcc.n	11a72 <_vfiprintf_r+0xd5a>
   119fe:	46a6      	mov	lr, r4
   11a00:	462a      	mov	r2, r5
   11a02:	49a6      	ldr	r1, [pc, #664]	; (11c9c <_vfiprintf_r+0xf84>)
   11a04:	eb1e 0002 	adds.w	r0, lr, r2
   11a08:	f140 0000 	adc.w	r0, r0, #0
   11a0c:	460f      	mov	r7, r1
   11a0e:	fba1 1400 	umull	r1, r4, r1, r0
   11a12:	f024 0103 	bic.w	r1, r4, #3
   11a16:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   11a1a:	1a40      	subs	r0, r0, r1
   11a1c:	ebbe 0100 	subs.w	r1, lr, r0
   11a20:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   11a24:	f162 0400 	sbc.w	r4, r2, #0
   11a28:	fb05 f501 	mul.w	r5, r5, r1
   11a2c:	fb07 5504 	mla	r5, r7, r4, r5
   11a30:	fba1 4107 	umull	r4, r1, r1, r7
   11a34:	440d      	add	r5, r1
   11a36:	2705      	movs	r7, #5
   11a38:	f004 0101 	and.w	r1, r4, #1
   11a3c:	fba1 1b07 	umull	r1, fp, r1, r7
   11a40:	1809      	adds	r1, r1, r0
   11a42:	0864      	lsrs	r4, r4, #1
   11a44:	3130      	adds	r1, #48	; 0x30
   11a46:	f803 1c01 	strb.w	r1, [r3, #-1]
   11a4a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   11a4e:	f10c 0c01 	add.w	ip, ip, #1
   11a52:	3b01      	subs	r3, #1
   11a54:	086d      	lsrs	r5, r5, #1
   11a56:	2e00      	cmp	r6, #0
   11a58:	d0cc      	beq.n	119f4 <_vfiprintf_r+0xcdc>
   11a5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a5c:	7809      	ldrb	r1, [r1, #0]
   11a5e:	4561      	cmp	r1, ip
   11a60:	d1c8      	bne.n	119f4 <_vfiprintf_r+0xcdc>
   11a62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11a66:	d0c5      	beq.n	119f4 <_vfiprintf_r+0xcdc>
   11a68:	f1be 0f0a 	cmp.w	lr, #10
   11a6c:	f172 0200 	sbcs.w	r2, r2, #0
   11a70:	d26c      	bcs.n	11b4c <_vfiprintf_r+0xe34>
   11a72:	461c      	mov	r4, r3
   11a74:	ab44      	add	r3, sp, #272	; 0x110
   11a76:	1b1b      	subs	r3, r3, r4
   11a78:	9f04      	ldr	r7, [sp, #16]
   11a7a:	9e03      	ldr	r6, [sp, #12]
   11a7c:	9304      	str	r3, [sp, #16]
   11a7e:	ee18 ba90 	vmov	fp, s17
   11a82:	f7ff ba72 	b.w	10f6a <_vfiprintf_r+0x252>
   11a86:	9603      	str	r6, [sp, #12]
   11a88:	f7ff ba62 	b.w	10f50 <_vfiprintf_r+0x238>
   11a8c:	4658      	mov	r0, fp
   11a8e:	f7fa ff05 	bl	c89c <__sinit>
   11a92:	f7ff b95b 	b.w	10d4c <_vfiprintf_r+0x34>
   11a96:	2901      	cmp	r1, #1
   11a98:	9603      	str	r6, [sp, #12]
   11a9a:	f47f accd 	bne.w	11438 <_vfiprintf_r+0x720>
   11a9e:	f7ff ba5c 	b.w	10f5a <_vfiprintf_r+0x242>
   11aa2:	9b07      	ldr	r3, [sp, #28]
   11aa4:	9905      	ldr	r1, [sp, #20]
   11aa6:	f853 2b04 	ldr.w	r2, [r3], #4
   11aaa:	6011      	str	r1, [r2, #0]
   11aac:	9307      	str	r3, [sp, #28]
   11aae:	f7ff b97e 	b.w	10dae <_vfiprintf_r+0x96>
   11ab2:	2f06      	cmp	r7, #6
   11ab4:	463b      	mov	r3, r7
   11ab6:	9a03      	ldr	r2, [sp, #12]
   11ab8:	4c79      	ldr	r4, [pc, #484]	; (11ca0 <_vfiprintf_r+0xf88>)
   11aba:	9207      	str	r2, [sp, #28]
   11abc:	bf28      	it	cs
   11abe:	2306      	movcs	r3, #6
   11ac0:	9304      	str	r3, [sp, #16]
   11ac2:	9303      	str	r3, [sp, #12]
   11ac4:	f7ff bb25 	b.w	11112 <_vfiprintf_r+0x3fa>
   11ac8:	9b03      	ldr	r3, [sp, #12]
   11aca:	9907      	ldr	r1, [sp, #28]
   11acc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   11ad0:	bf14      	ite	ne
   11ad2:	f851 3b04 	ldrne.w	r3, [r1], #4
   11ad6:	f851 3b04 	ldreq.w	r3, [r1], #4
   11ada:	9107      	str	r1, [sp, #28]
   11adc:	bf1c      	itt	ne
   11ade:	4602      	movne	r2, r0
   11ae0:	b2db      	uxtbne	r3, r3
   11ae2:	2101      	movs	r1, #1
   11ae4:	f7ff ba8f 	b.w	11006 <_vfiprintf_r+0x2ee>
   11ae8:	ab16      	add	r3, sp, #88	; 0x58
   11aea:	9300      	str	r3, [sp, #0]
   11aec:	2300      	movs	r3, #0
   11aee:	4619      	mov	r1, r3
   11af0:	aa13      	add	r2, sp, #76	; 0x4c
   11af2:	4658      	mov	r0, fp
   11af4:	f7ff f834 	bl	10b60 <_wcsrtombs_r>
   11af8:	4603      	mov	r3, r0
   11afa:	3301      	adds	r3, #1
   11afc:	9004      	str	r0, [sp, #16]
   11afe:	f000 80ae 	beq.w	11c5e <_vfiprintf_r+0xf46>
   11b02:	9413      	str	r4, [sp, #76]	; 0x4c
   11b04:	9b04      	ldr	r3, [sp, #16]
   11b06:	2b00      	cmp	r3, #0
   11b08:	d030      	beq.n	11b6c <_vfiprintf_r+0xe54>
   11b0a:	2b63      	cmp	r3, #99	; 0x63
   11b0c:	dc63      	bgt.n	11bd6 <_vfiprintf_r+0xebe>
   11b0e:	2300      	movs	r3, #0
   11b10:	9308      	str	r3, [sp, #32]
   11b12:	ac2b      	add	r4, sp, #172	; 0xac
   11b14:	2208      	movs	r2, #8
   11b16:	2100      	movs	r1, #0
   11b18:	a816      	add	r0, sp, #88	; 0x58
   11b1a:	f7fa ffef 	bl	cafc <memset>
   11b1e:	9d04      	ldr	r5, [sp, #16]
   11b20:	ab16      	add	r3, sp, #88	; 0x58
   11b22:	9300      	str	r3, [sp, #0]
   11b24:	aa13      	add	r2, sp, #76	; 0x4c
   11b26:	462b      	mov	r3, r5
   11b28:	4621      	mov	r1, r4
   11b2a:	4658      	mov	r0, fp
   11b2c:	f7ff f818 	bl	10b60 <_wcsrtombs_r>
   11b30:	4285      	cmp	r5, r0
   11b32:	f040 80ab 	bne.w	11c8c <_vfiprintf_r+0xf74>
   11b36:	9b03      	ldr	r3, [sp, #12]
   11b38:	9a04      	ldr	r2, [sp, #16]
   11b3a:	9307      	str	r3, [sp, #28]
   11b3c:	2300      	movs	r3, #0
   11b3e:	54a3      	strb	r3, [r4, r2]
   11b40:	461f      	mov	r7, r3
   11b42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   11b46:	9303      	str	r3, [sp, #12]
   11b48:	f7ff ba16 	b.w	10f78 <_vfiprintf_r+0x260>
   11b4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11b4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   11b50:	1a9b      	subs	r3, r3, r2
   11b52:	4618      	mov	r0, r3
   11b54:	9308      	str	r3, [sp, #32]
   11b56:	f7fb f889 	bl	cc6c <strncpy>
   11b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b5c:	9b08      	ldr	r3, [sp, #32]
   11b5e:	784a      	ldrb	r2, [r1, #1]
   11b60:	b10a      	cbz	r2, 11b66 <_vfiprintf_r+0xe4e>
   11b62:	3101      	adds	r1, #1
   11b64:	910b      	str	r1, [sp, #44]	; 0x2c
   11b66:	f04f 0c00 	mov.w	ip, #0
   11b6a:	e748      	b.n	119fe <_vfiprintf_r+0xce6>
   11b6c:	9b03      	ldr	r3, [sp, #12]
   11b6e:	9307      	str	r3, [sp, #28]
   11b70:	9b04      	ldr	r3, [sp, #16]
   11b72:	9303      	str	r3, [sp, #12]
   11b74:	461f      	mov	r7, r3
   11b76:	9308      	str	r3, [sp, #32]
   11b78:	f7ff b9fe 	b.w	10f78 <_vfiprintf_r+0x260>
   11b7c:	2101      	movs	r1, #1
   11b7e:	4618      	mov	r0, r3
   11b80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b84:	f7ff bb13 	b.w	111ae <_vfiprintf_r+0x496>
   11b88:	f850 3b04 	ldr.w	r3, [r0], #4
   11b8c:	9007      	str	r0, [sp, #28]
   11b8e:	4622      	mov	r2, r4
   11b90:	b2db      	uxtb	r3, r3
   11b92:	e6b6      	b.n	11902 <_vfiprintf_r+0xbea>
   11b94:	f912 3b04 	ldrsb.w	r3, [r2], #4
   11b98:	9207      	str	r2, [sp, #28]
   11b9a:	17da      	asrs	r2, r3, #31
   11b9c:	4611      	mov	r1, r2
   11b9e:	f7ff b9ca 	b.w	10f36 <_vfiprintf_r+0x21e>
   11ba2:	f851 3b04 	ldr.w	r3, [r1], #4
   11ba6:	9107      	str	r1, [sp, #28]
   11ba8:	4602      	mov	r2, r0
   11baa:	b2db      	uxtb	r3, r3
   11bac:	f7ff ba27 	b.w	10ffe <_vfiprintf_r+0x2e6>
   11bb0:	2301      	movs	r3, #1
   11bb2:	931c      	str	r3, [sp, #112]	; 0x70
   11bb4:	2101      	movs	r1, #1
   11bb6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   11bba:	931b      	str	r3, [sp, #108]	; 0x6c
   11bbc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11bc0:	460b      	mov	r3, r1
   11bc2:	f7ff bacd 	b.w	11160 <_vfiprintf_r+0x448>
   11bc6:	9b07      	ldr	r3, [sp, #28]
   11bc8:	9905      	ldr	r1, [sp, #20]
   11bca:	f853 2b04 	ldr.w	r2, [r3], #4
   11bce:	9307      	str	r3, [sp, #28]
   11bd0:	8011      	strh	r1, [r2, #0]
   11bd2:	f7ff b8ec 	b.w	10dae <_vfiprintf_r+0x96>
   11bd6:	1c59      	adds	r1, r3, #1
   11bd8:	4658      	mov	r0, fp
   11bda:	f7f9 ff97 	bl	bb0c <_malloc_r>
   11bde:	4604      	mov	r4, r0
   11be0:	2800      	cmp	r0, #0
   11be2:	d03c      	beq.n	11c5e <_vfiprintf_r+0xf46>
   11be4:	9008      	str	r0, [sp, #32]
   11be6:	e795      	b.n	11b14 <_vfiprintf_r+0xdfc>
   11be8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   11bea:	f7fb f90d 	bl	ce08 <__retarget_lock_release_recursive>
   11bee:	f7ff b9e9 	b.w	10fc4 <_vfiprintf_r+0x2ac>
   11bf2:	9b03      	ldr	r3, [sp, #12]
   11bf4:	9307      	str	r3, [sp, #28]
   11bf6:	e9cd 7703 	strd	r7, r7, [sp, #12]
   11bfa:	9f08      	ldr	r7, [sp, #32]
   11bfc:	f7ff b9bc 	b.w	10f78 <_vfiprintf_r+0x260>
   11c00:	9819      	ldr	r0, [sp, #100]	; 0x64
   11c02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11c04:	3001      	adds	r0, #1
   11c06:	e545      	b.n	11694 <_vfiprintf_r+0x97c>
   11c08:	9b03      	ldr	r3, [sp, #12]
   11c0a:	9307      	str	r3, [sp, #28]
   11c0c:	4620      	mov	r0, r4
   11c0e:	f7fb fad7 	bl	d1c0 <strlen>
   11c12:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   11c16:	462f      	mov	r7, r5
   11c18:	9004      	str	r0, [sp, #16]
   11c1a:	9303      	str	r3, [sp, #12]
   11c1c:	9508      	str	r5, [sp, #32]
   11c1e:	f7ff b9ab 	b.w	10f78 <_vfiprintf_r+0x260>
   11c22:	ee18 1a10 	vmov	r1, s16
   11c26:	aa18      	add	r2, sp, #96	; 0x60
   11c28:	4658      	mov	r0, fp
   11c2a:	f7ff f839 	bl	10ca0 <__sprint_r.part.0>
   11c2e:	2800      	cmp	r0, #0
   11c30:	f43f aa36 	beq.w	110a0 <_vfiprintf_r+0x388>
   11c34:	f7ff ba4d 	b.w	110d2 <_vfiprintf_r+0x3ba>
   11c38:	9819      	ldr	r0, [sp, #100]	; 0x64
   11c3a:	3001      	adds	r0, #1
   11c3c:	e57a      	b.n	11734 <_vfiprintf_r+0xa1c>
   11c3e:	468c      	mov	ip, r1
   11c40:	e46e      	b.n	11520 <_vfiprintf_r+0x808>
   11c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   11c44:	07d9      	lsls	r1, r3, #31
   11c46:	d405      	bmi.n	11c54 <_vfiprintf_r+0xf3c>
   11c48:	89ab      	ldrh	r3, [r5, #12]
   11c4a:	059a      	lsls	r2, r3, #22
   11c4c:	d402      	bmi.n	11c54 <_vfiprintf_r+0xf3c>
   11c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   11c50:	f7fb f8da 	bl	ce08 <__retarget_lock_release_recursive>
   11c54:	f04f 33ff 	mov.w	r3, #4294967295
   11c58:	9305      	str	r3, [sp, #20]
   11c5a:	f7ff ba49 	b.w	110f0 <_vfiprintf_r+0x3d8>
   11c5e:	ee18 2a10 	vmov	r2, s16
   11c62:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11c6a:	8193      	strh	r3, [r2, #12]
   11c6c:	f7ff ba35 	b.w	110da <_vfiprintf_r+0x3c2>
   11c70:	9c07      	ldr	r4, [sp, #28]
   11c72:	9704      	str	r7, [sp, #16]
   11c74:	e746      	b.n	11b04 <_vfiprintf_r+0xdec>
   11c76:	9b07      	ldr	r3, [sp, #28]
   11c78:	f898 1001 	ldrb.w	r1, [r8, #1]
   11c7c:	f853 7b04 	ldr.w	r7, [r3], #4
   11c80:	9307      	str	r3, [sp, #28]
   11c82:	4690      	mov	r8, r2
   11c84:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11c88:	f7ff b8b9 	b.w	10dfe <_vfiprintf_r+0xe6>
   11c8c:	ee18 2a10 	vmov	r2, s16
   11c90:	8993      	ldrh	r3, [r2, #12]
   11c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11c96:	8193      	strh	r3, [r2, #12]
   11c98:	f7ff ba15 	b.w	110c6 <_vfiprintf_r+0x3ae>
   11c9c:	cccccccd 	.word	0xcccccccd
   11ca0:	20000ca4 	.word	0x20000ca4

00011ca4 <__sbprintf>:
   11ca4:	b570      	push	{r4, r5, r6, lr}
   11ca6:	460c      	mov	r4, r1
   11ca8:	8989      	ldrh	r1, [r1, #12]
   11caa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   11cae:	f021 0102 	bic.w	r1, r1, #2
   11cb2:	f8ad 1014 	strh.w	r1, [sp, #20]
   11cb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11cb8:	911b      	str	r1, [sp, #108]	; 0x6c
   11cba:	89e1      	ldrh	r1, [r4, #14]
   11cbc:	f8ad 1016 	strh.w	r1, [sp, #22]
   11cc0:	69e1      	ldr	r1, [r4, #28]
   11cc2:	9109      	str	r1, [sp, #36]	; 0x24
   11cc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11cc6:	910b      	str	r1, [sp, #44]	; 0x2c
   11cc8:	a91c      	add	r1, sp, #112	; 0x70
   11cca:	9102      	str	r1, [sp, #8]
   11ccc:	9106      	str	r1, [sp, #24]
   11cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11cd2:	4606      	mov	r6, r0
   11cd4:	9104      	str	r1, [sp, #16]
   11cd6:	9107      	str	r1, [sp, #28]
   11cd8:	a818      	add	r0, sp, #96	; 0x60
   11cda:	2100      	movs	r1, #0
   11cdc:	e9cd 3200 	strd	r3, r2, [sp]
   11ce0:	9108      	str	r1, [sp, #32]
   11ce2:	f7fb f88b 	bl	cdfc <__retarget_lock_init_recursive>
   11ce6:	e9dd 3200 	ldrd	r3, r2, [sp]
   11cea:	a902      	add	r1, sp, #8
   11cec:	4630      	mov	r0, r6
   11cee:	f7ff f813 	bl	10d18 <_vfiprintf_r>
   11cf2:	1e05      	subs	r5, r0, #0
   11cf4:	db07      	blt.n	11d06 <__sbprintf+0x62>
   11cf6:	a902      	add	r1, sp, #8
   11cf8:	4630      	mov	r0, r6
   11cfa:	f7fd fee7 	bl	facc <_fflush_r>
   11cfe:	2800      	cmp	r0, #0
   11d00:	bf18      	it	ne
   11d02:	f04f 35ff 	movne.w	r5, #4294967295
   11d06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11d0a:	065b      	lsls	r3, r3, #25
   11d0c:	d503      	bpl.n	11d16 <__sbprintf+0x72>
   11d0e:	89a3      	ldrh	r3, [r4, #12]
   11d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d14:	81a3      	strh	r3, [r4, #12]
   11d16:	9818      	ldr	r0, [sp, #96]	; 0x60
   11d18:	f7fb f872 	bl	ce00 <__retarget_lock_close_recursive>
   11d1c:	4628      	mov	r0, r5
   11d1e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   11d22:	bd70      	pop	{r4, r5, r6, pc}

00011d24 <__sfvwrite_r>:
   11d24:	6893      	ldr	r3, [r2, #8]
   11d26:	2b00      	cmp	r3, #0
   11d28:	f000 8085 	beq.w	11e36 <__sfvwrite_r+0x112>
   11d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d30:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   11d34:	460c      	mov	r4, r1
   11d36:	0719      	lsls	r1, r3, #28
   11d38:	4680      	mov	r8, r0
   11d3a:	b083      	sub	sp, #12
   11d3c:	4617      	mov	r7, r2
   11d3e:	b298      	uxth	r0, r3
   11d40:	d525      	bpl.n	11d8e <__sfvwrite_r+0x6a>
   11d42:	6923      	ldr	r3, [r4, #16]
   11d44:	b31b      	cbz	r3, 11d8e <__sfvwrite_r+0x6a>
   11d46:	f010 0302 	ands.w	r3, r0, #2
   11d4a:	683d      	ldr	r5, [r7, #0]
   11d4c:	d02d      	beq.n	11daa <__sfvwrite_r+0x86>
   11d4e:	f04f 0a00 	mov.w	sl, #0
   11d52:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 12014 <__sfvwrite_r+0x2f0>
   11d56:	4656      	mov	r6, sl
   11d58:	46b9      	mov	r9, r7
   11d5a:	455e      	cmp	r6, fp
   11d5c:	4633      	mov	r3, r6
   11d5e:	4652      	mov	r2, sl
   11d60:	bf28      	it	cs
   11d62:	465b      	movcs	r3, fp
   11d64:	4640      	mov	r0, r8
   11d66:	2e00      	cmp	r6, #0
   11d68:	d052      	beq.n	11e10 <__sfvwrite_r+0xec>
   11d6a:	69e1      	ldr	r1, [r4, #28]
   11d6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11d6e:	47b8      	blx	r7
   11d70:	2800      	cmp	r0, #0
   11d72:	dd56      	ble.n	11e22 <__sfvwrite_r+0xfe>
   11d74:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11d78:	1a1b      	subs	r3, r3, r0
   11d7a:	4482      	add	sl, r0
   11d7c:	1a36      	subs	r6, r6, r0
   11d7e:	f8c9 3008 	str.w	r3, [r9, #8]
   11d82:	2b00      	cmp	r3, #0
   11d84:	d1e9      	bne.n	11d5a <__sfvwrite_r+0x36>
   11d86:	2000      	movs	r0, #0
   11d88:	b003      	add	sp, #12
   11d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d8e:	4621      	mov	r1, r4
   11d90:	4640      	mov	r0, r8
   11d92:	f000 f941 	bl	12018 <__swsetup_r>
   11d96:	2800      	cmp	r0, #0
   11d98:	f040 8138 	bne.w	1200c <__sfvwrite_r+0x2e8>
   11d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11da0:	683d      	ldr	r5, [r7, #0]
   11da2:	b298      	uxth	r0, r3
   11da4:	f010 0302 	ands.w	r3, r0, #2
   11da8:	d1d1      	bne.n	11d4e <__sfvwrite_r+0x2a>
   11daa:	f010 0901 	ands.w	r9, r0, #1
   11dae:	d144      	bne.n	11e3a <__sfvwrite_r+0x116>
   11db0:	464e      	mov	r6, r9
   11db2:	9700      	str	r7, [sp, #0]
   11db4:	b346      	cbz	r6, 11e08 <__sfvwrite_r+0xe4>
   11db6:	0582      	lsls	r2, r0, #22
   11db8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   11dbc:	f140 8085 	bpl.w	11eca <__sfvwrite_r+0x1a6>
   11dc0:	45b3      	cmp	fp, r6
   11dc2:	465a      	mov	r2, fp
   11dc4:	f200 80b4 	bhi.w	11f30 <__sfvwrite_r+0x20c>
   11dc8:	f410 6f90 	tst.w	r0, #1152	; 0x480
   11dcc:	f040 80c1 	bne.w	11f52 <__sfvwrite_r+0x22e>
   11dd0:	6820      	ldr	r0, [r4, #0]
   11dd2:	9201      	str	r2, [sp, #4]
   11dd4:	4649      	mov	r1, r9
   11dd6:	f7fa fe15 	bl	ca04 <memmove>
   11dda:	68a3      	ldr	r3, [r4, #8]
   11ddc:	9a01      	ldr	r2, [sp, #4]
   11dde:	eba3 010b 	sub.w	r1, r3, fp
   11de2:	6823      	ldr	r3, [r4, #0]
   11de4:	60a1      	str	r1, [r4, #8]
   11de6:	4413      	add	r3, r2
   11de8:	46b2      	mov	sl, r6
   11dea:	6023      	str	r3, [r4, #0]
   11dec:	2600      	movs	r6, #0
   11dee:	9a00      	ldr	r2, [sp, #0]
   11df0:	6893      	ldr	r3, [r2, #8]
   11df2:	eba3 030a 	sub.w	r3, r3, sl
   11df6:	44d1      	add	r9, sl
   11df8:	6093      	str	r3, [r2, #8]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d0c3      	beq.n	11d86 <__sfvwrite_r+0x62>
   11dfe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11e02:	b280      	uxth	r0, r0
   11e04:	2e00      	cmp	r6, #0
   11e06:	d1d6      	bne.n	11db6 <__sfvwrite_r+0x92>
   11e08:	e9d5 9600 	ldrd	r9, r6, [r5]
   11e0c:	3508      	adds	r5, #8
   11e0e:	e7d1      	b.n	11db4 <__sfvwrite_r+0x90>
   11e10:	e9d5 a600 	ldrd	sl, r6, [r5]
   11e14:	3508      	adds	r5, #8
   11e16:	e7a0      	b.n	11d5a <__sfvwrite_r+0x36>
   11e18:	4621      	mov	r1, r4
   11e1a:	4640      	mov	r0, r8
   11e1c:	f7fd fe56 	bl	facc <_fflush_r>
   11e20:	b388      	cbz	r0, 11e86 <__sfvwrite_r+0x162>
   11e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e2a:	f04f 30ff 	mov.w	r0, #4294967295
   11e2e:	81a3      	strh	r3, [r4, #12]
   11e30:	b003      	add	sp, #12
   11e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e36:	2000      	movs	r0, #0
   11e38:	4770      	bx	lr
   11e3a:	461e      	mov	r6, r3
   11e3c:	46ba      	mov	sl, r7
   11e3e:	4699      	mov	r9, r3
   11e40:	4618      	mov	r0, r3
   11e42:	9500      	str	r5, [sp, #0]
   11e44:	461f      	mov	r7, r3
   11e46:	b366      	cbz	r6, 11ea2 <__sfvwrite_r+0x17e>
   11e48:	2800      	cmp	r0, #0
   11e4a:	d032      	beq.n	11eb2 <__sfvwrite_r+0x18e>
   11e4c:	464a      	mov	r2, r9
   11e4e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   11e52:	6820      	ldr	r0, [r4, #0]
   11e54:	68a5      	ldr	r5, [r4, #8]
   11e56:	42b2      	cmp	r2, r6
   11e58:	bf28      	it	cs
   11e5a:	4632      	movcs	r2, r6
   11e5c:	4288      	cmp	r0, r1
   11e5e:	d904      	bls.n	11e6a <__sfvwrite_r+0x146>
   11e60:	eb05 0b03 	add.w	fp, r5, r3
   11e64:	455a      	cmp	r2, fp
   11e66:	f300 80a7 	bgt.w	11fb8 <__sfvwrite_r+0x294>
   11e6a:	4293      	cmp	r3, r2
   11e6c:	dc64      	bgt.n	11f38 <__sfvwrite_r+0x214>
   11e6e:	69e1      	ldr	r1, [r4, #28]
   11e70:	6a65      	ldr	r5, [r4, #36]	; 0x24
   11e72:	463a      	mov	r2, r7
   11e74:	4640      	mov	r0, r8
   11e76:	47a8      	blx	r5
   11e78:	f1b0 0b00 	subs.w	fp, r0, #0
   11e7c:	ddd1      	ble.n	11e22 <__sfvwrite_r+0xfe>
   11e7e:	ebb9 090b 	subs.w	r9, r9, fp
   11e82:	d0c9      	beq.n	11e18 <__sfvwrite_r+0xf4>
   11e84:	2001      	movs	r0, #1
   11e86:	f8da 3008 	ldr.w	r3, [sl, #8]
   11e8a:	eba3 030b 	sub.w	r3, r3, fp
   11e8e:	445f      	add	r7, fp
   11e90:	eba6 060b 	sub.w	r6, r6, fp
   11e94:	f8ca 3008 	str.w	r3, [sl, #8]
   11e98:	2b00      	cmp	r3, #0
   11e9a:	f43f af74 	beq.w	11d86 <__sfvwrite_r+0x62>
   11e9e:	2e00      	cmp	r6, #0
   11ea0:	d1d2      	bne.n	11e48 <__sfvwrite_r+0x124>
   11ea2:	9a00      	ldr	r2, [sp, #0]
   11ea4:	6856      	ldr	r6, [r2, #4]
   11ea6:	4613      	mov	r3, r2
   11ea8:	3208      	adds	r2, #8
   11eaa:	9200      	str	r2, [sp, #0]
   11eac:	2e00      	cmp	r6, #0
   11eae:	d0f8      	beq.n	11ea2 <__sfvwrite_r+0x17e>
   11eb0:	681f      	ldr	r7, [r3, #0]
   11eb2:	4632      	mov	r2, r6
   11eb4:	210a      	movs	r1, #10
   11eb6:	4638      	mov	r0, r7
   11eb8:	f7fd fe3a 	bl	fb30 <memchr>
   11ebc:	2800      	cmp	r0, #0
   11ebe:	f000 809c 	beq.w	11ffa <__sfvwrite_r+0x2d6>
   11ec2:	3001      	adds	r0, #1
   11ec4:	eba0 0907 	sub.w	r9, r0, r7
   11ec8:	e7c0      	b.n	11e4c <__sfvwrite_r+0x128>
   11eca:	6820      	ldr	r0, [r4, #0]
   11ecc:	6923      	ldr	r3, [r4, #16]
   11ece:	4298      	cmp	r0, r3
   11ed0:	d816      	bhi.n	11f00 <__sfvwrite_r+0x1dc>
   11ed2:	6962      	ldr	r2, [r4, #20]
   11ed4:	42b2      	cmp	r2, r6
   11ed6:	d813      	bhi.n	11f00 <__sfvwrite_r+0x1dc>
   11ed8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11edc:	42b3      	cmp	r3, r6
   11ede:	bf28      	it	cs
   11ee0:	4633      	movcs	r3, r6
   11ee2:	69e1      	ldr	r1, [r4, #28]
   11ee4:	fb93 f3f2 	sdiv	r3, r3, r2
   11ee8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11eea:	fb02 f303 	mul.w	r3, r2, r3
   11eee:	4640      	mov	r0, r8
   11ef0:	464a      	mov	r2, r9
   11ef2:	47b8      	blx	r7
   11ef4:	f1b0 0a00 	subs.w	sl, r0, #0
   11ef8:	dd93      	ble.n	11e22 <__sfvwrite_r+0xfe>
   11efa:	eba6 060a 	sub.w	r6, r6, sl
   11efe:	e776      	b.n	11dee <__sfvwrite_r+0xca>
   11f00:	45b3      	cmp	fp, r6
   11f02:	46da      	mov	sl, fp
   11f04:	bf28      	it	cs
   11f06:	46b2      	movcs	sl, r6
   11f08:	4652      	mov	r2, sl
   11f0a:	4649      	mov	r1, r9
   11f0c:	f7fa fd7a 	bl	ca04 <memmove>
   11f10:	68a3      	ldr	r3, [r4, #8]
   11f12:	6822      	ldr	r2, [r4, #0]
   11f14:	eba3 030a 	sub.w	r3, r3, sl
   11f18:	4452      	add	r2, sl
   11f1a:	60a3      	str	r3, [r4, #8]
   11f1c:	6022      	str	r2, [r4, #0]
   11f1e:	2b00      	cmp	r3, #0
   11f20:	d1eb      	bne.n	11efa <__sfvwrite_r+0x1d6>
   11f22:	4621      	mov	r1, r4
   11f24:	4640      	mov	r0, r8
   11f26:	f7fd fdd1 	bl	facc <_fflush_r>
   11f2a:	2800      	cmp	r0, #0
   11f2c:	d0e5      	beq.n	11efa <__sfvwrite_r+0x1d6>
   11f2e:	e778      	b.n	11e22 <__sfvwrite_r+0xfe>
   11f30:	6820      	ldr	r0, [r4, #0]
   11f32:	46b3      	mov	fp, r6
   11f34:	4632      	mov	r2, r6
   11f36:	e74c      	b.n	11dd2 <__sfvwrite_r+0xae>
   11f38:	4639      	mov	r1, r7
   11f3a:	9201      	str	r2, [sp, #4]
   11f3c:	f7fa fd62 	bl	ca04 <memmove>
   11f40:	9a01      	ldr	r2, [sp, #4]
   11f42:	68a3      	ldr	r3, [r4, #8]
   11f44:	1a9b      	subs	r3, r3, r2
   11f46:	60a3      	str	r3, [r4, #8]
   11f48:	6823      	ldr	r3, [r4, #0]
   11f4a:	4413      	add	r3, r2
   11f4c:	6023      	str	r3, [r4, #0]
   11f4e:	4693      	mov	fp, r2
   11f50:	e795      	b.n	11e7e <__sfvwrite_r+0x15a>
   11f52:	6823      	ldr	r3, [r4, #0]
   11f54:	6921      	ldr	r1, [r4, #16]
   11f56:	eba3 0b01 	sub.w	fp, r3, r1
   11f5a:	6963      	ldr	r3, [r4, #20]
   11f5c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   11f60:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   11f64:	f10b 0301 	add.w	r3, fp, #1
   11f68:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   11f6c:	4433      	add	r3, r6
   11f6e:	4553      	cmp	r3, sl
   11f70:	4652      	mov	r2, sl
   11f72:	bf84      	itt	hi
   11f74:	469a      	movhi	sl, r3
   11f76:	4652      	movhi	r2, sl
   11f78:	0543      	lsls	r3, r0, #21
   11f7a:	d52c      	bpl.n	11fd6 <__sfvwrite_r+0x2b2>
   11f7c:	4611      	mov	r1, r2
   11f7e:	4640      	mov	r0, r8
   11f80:	f7f9 fdc4 	bl	bb0c <_malloc_r>
   11f84:	2800      	cmp	r0, #0
   11f86:	d03b      	beq.n	12000 <__sfvwrite_r+0x2dc>
   11f88:	465a      	mov	r2, fp
   11f8a:	6921      	ldr	r1, [r4, #16]
   11f8c:	9001      	str	r0, [sp, #4]
   11f8e:	f7f8 f80d 	bl	9fac <memcpy>
   11f92:	89a2      	ldrh	r2, [r4, #12]
   11f94:	9b01      	ldr	r3, [sp, #4]
   11f96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11f9e:	81a2      	strh	r2, [r4, #12]
   11fa0:	eb03 000b 	add.w	r0, r3, fp
   11fa4:	6123      	str	r3, [r4, #16]
   11fa6:	ebaa 030b 	sub.w	r3, sl, fp
   11faa:	f8c4 a014 	str.w	sl, [r4, #20]
   11fae:	60a3      	str	r3, [r4, #8]
   11fb0:	6020      	str	r0, [r4, #0]
   11fb2:	46b3      	mov	fp, r6
   11fb4:	4632      	mov	r2, r6
   11fb6:	e70c      	b.n	11dd2 <__sfvwrite_r+0xae>
   11fb8:	4639      	mov	r1, r7
   11fba:	465a      	mov	r2, fp
   11fbc:	f7fa fd22 	bl	ca04 <memmove>
   11fc0:	6823      	ldr	r3, [r4, #0]
   11fc2:	445b      	add	r3, fp
   11fc4:	6023      	str	r3, [r4, #0]
   11fc6:	4621      	mov	r1, r4
   11fc8:	4640      	mov	r0, r8
   11fca:	f7fd fd7f 	bl	facc <_fflush_r>
   11fce:	2800      	cmp	r0, #0
   11fd0:	f43f af55 	beq.w	11e7e <__sfvwrite_r+0x15a>
   11fd4:	e725      	b.n	11e22 <__sfvwrite_r+0xfe>
   11fd6:	4640      	mov	r0, r8
   11fd8:	f7fa f860 	bl	c09c <_realloc_r>
   11fdc:	4603      	mov	r3, r0
   11fde:	2800      	cmp	r0, #0
   11fe0:	d1de      	bne.n	11fa0 <__sfvwrite_r+0x27c>
   11fe2:	6921      	ldr	r1, [r4, #16]
   11fe4:	4640      	mov	r0, r8
   11fe6:	f7fb f9ed 	bl	d3c4 <_free_r>
   11fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11fee:	220c      	movs	r2, #12
   11ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11ff4:	f8c8 2000 	str.w	r2, [r8]
   11ff8:	e715      	b.n	11e26 <__sfvwrite_r+0x102>
   11ffa:	1c72      	adds	r2, r6, #1
   11ffc:	4691      	mov	r9, r2
   11ffe:	e726      	b.n	11e4e <__sfvwrite_r+0x12a>
   12000:	220c      	movs	r2, #12
   12002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12006:	f8c8 2000 	str.w	r2, [r8]
   1200a:	e70c      	b.n	11e26 <__sfvwrite_r+0x102>
   1200c:	f04f 30ff 	mov.w	r0, #4294967295
   12010:	e6ba      	b.n	11d88 <__sfvwrite_r+0x64>
   12012:	bf00      	nop
   12014:	7ffffc00 	.word	0x7ffffc00

00012018 <__swsetup_r>:
   12018:	b538      	push	{r3, r4, r5, lr}
   1201a:	4b31      	ldr	r3, [pc, #196]	; (120e0 <__swsetup_r+0xc8>)
   1201c:	681b      	ldr	r3, [r3, #0]
   1201e:	4605      	mov	r5, r0
   12020:	460c      	mov	r4, r1
   12022:	b113      	cbz	r3, 1202a <__swsetup_r+0x12>
   12024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   12026:	2a00      	cmp	r2, #0
   12028:	d04e      	beq.n	120c8 <__swsetup_r+0xb0>
   1202a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1202e:	0718      	lsls	r0, r3, #28
   12030:	b29a      	uxth	r2, r3
   12032:	d51c      	bpl.n	1206e <__swsetup_r+0x56>
   12034:	6921      	ldr	r1, [r4, #16]
   12036:	b329      	cbz	r1, 12084 <__swsetup_r+0x6c>
   12038:	f012 0001 	ands.w	r0, r2, #1
   1203c:	d007      	beq.n	1204e <__swsetup_r+0x36>
   1203e:	2000      	movs	r0, #0
   12040:	60a0      	str	r0, [r4, #8]
   12042:	6960      	ldr	r0, [r4, #20]
   12044:	4240      	negs	r0, r0
   12046:	61a0      	str	r0, [r4, #24]
   12048:	b139      	cbz	r1, 1205a <__swsetup_r+0x42>
   1204a:	2000      	movs	r0, #0
   1204c:	bd38      	pop	{r3, r4, r5, pc}
   1204e:	0795      	lsls	r5, r2, #30
   12050:	bf58      	it	pl
   12052:	6960      	ldrpl	r0, [r4, #20]
   12054:	60a0      	str	r0, [r4, #8]
   12056:	2900      	cmp	r1, #0
   12058:	d1f7      	bne.n	1204a <__swsetup_r+0x32>
   1205a:	0612      	lsls	r2, r2, #24
   1205c:	bf58      	it	pl
   1205e:	4608      	movpl	r0, r1
   12060:	d5f4      	bpl.n	1204c <__swsetup_r+0x34>
   12062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12066:	81a3      	strh	r3, [r4, #12]
   12068:	f04f 30ff 	mov.w	r0, #4294967295
   1206c:	bd38      	pop	{r3, r4, r5, pc}
   1206e:	06d1      	lsls	r1, r2, #27
   12070:	d52e      	bpl.n	120d0 <__swsetup_r+0xb8>
   12072:	0752      	lsls	r2, r2, #29
   12074:	d414      	bmi.n	120a0 <__swsetup_r+0x88>
   12076:	6921      	ldr	r1, [r4, #16]
   12078:	f043 0308 	orr.w	r3, r3, #8
   1207c:	81a3      	strh	r3, [r4, #12]
   1207e:	b29a      	uxth	r2, r3
   12080:	2900      	cmp	r1, #0
   12082:	d1d9      	bne.n	12038 <__swsetup_r+0x20>
   12084:	f402 7020 	and.w	r0, r2, #640	; 0x280
   12088:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1208c:	d0d4      	beq.n	12038 <__swsetup_r+0x20>
   1208e:	4621      	mov	r1, r4
   12090:	4628      	mov	r0, r5
   12092:	f000 f947 	bl	12324 <__smakebuf_r>
   12096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1209a:	6921      	ldr	r1, [r4, #16]
   1209c:	b29a      	uxth	r2, r3
   1209e:	e7cb      	b.n	12038 <__swsetup_r+0x20>
   120a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   120a2:	b151      	cbz	r1, 120ba <__swsetup_r+0xa2>
   120a4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   120a8:	4291      	cmp	r1, r2
   120aa:	d004      	beq.n	120b6 <__swsetup_r+0x9e>
   120ac:	4628      	mov	r0, r5
   120ae:	f7fb f989 	bl	d3c4 <_free_r>
   120b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   120b6:	2200      	movs	r2, #0
   120b8:	6322      	str	r2, [r4, #48]	; 0x30
   120ba:	6921      	ldr	r1, [r4, #16]
   120bc:	2200      	movs	r2, #0
   120be:	e9c4 1200 	strd	r1, r2, [r4]
   120c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   120c6:	e7d7      	b.n	12078 <__swsetup_r+0x60>
   120c8:	4618      	mov	r0, r3
   120ca:	f7fa fbe7 	bl	c89c <__sinit>
   120ce:	e7ac      	b.n	1202a <__swsetup_r+0x12>
   120d0:	2209      	movs	r2, #9
   120d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   120d6:	602a      	str	r2, [r5, #0]
   120d8:	f04f 30ff 	mov.w	r0, #4294967295
   120dc:	81a3      	strh	r3, [r4, #12]
   120de:	bd38      	pop	{r3, r4, r5, pc}
   120e0:	200048e4 	.word	0x200048e4

000120e4 <__fputwc>:
   120e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120e8:	b082      	sub	sp, #8
   120ea:	4682      	mov	sl, r0
   120ec:	4688      	mov	r8, r1
   120ee:	4614      	mov	r4, r2
   120f0:	f7fa fdee 	bl	ccd0 <__locale_mb_cur_max>
   120f4:	2801      	cmp	r0, #1
   120f6:	d103      	bne.n	12100 <__fputwc+0x1c>
   120f8:	f108 33ff 	add.w	r3, r8, #4294967295
   120fc:	2bfe      	cmp	r3, #254	; 0xfe
   120fe:	d936      	bls.n	1216e <__fputwc+0x8a>
   12100:	f10d 0904 	add.w	r9, sp, #4
   12104:	4642      	mov	r2, r8
   12106:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1210a:	4649      	mov	r1, r9
   1210c:	4650      	mov	r0, sl
   1210e:	f7fe fd01 	bl	10b14 <_wcrtomb_r>
   12112:	1c42      	adds	r2, r0, #1
   12114:	4606      	mov	r6, r0
   12116:	d032      	beq.n	1217e <__fputwc+0x9a>
   12118:	b320      	cbz	r0, 12164 <__fputwc+0x80>
   1211a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1211e:	2500      	movs	r5, #0
   12120:	e009      	b.n	12136 <__fputwc+0x52>
   12122:	6823      	ldr	r3, [r4, #0]
   12124:	1c5a      	adds	r2, r3, #1
   12126:	6022      	str	r2, [r4, #0]
   12128:	f883 c000 	strb.w	ip, [r3]
   1212c:	3501      	adds	r5, #1
   1212e:	42b5      	cmp	r5, r6
   12130:	d218      	bcs.n	12164 <__fputwc+0x80>
   12132:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   12136:	68a3      	ldr	r3, [r4, #8]
   12138:	3b01      	subs	r3, #1
   1213a:	2b00      	cmp	r3, #0
   1213c:	60a3      	str	r3, [r4, #8]
   1213e:	daf0      	bge.n	12122 <__fputwc+0x3e>
   12140:	69a7      	ldr	r7, [r4, #24]
   12142:	42bb      	cmp	r3, r7
   12144:	4661      	mov	r1, ip
   12146:	4622      	mov	r2, r4
   12148:	4650      	mov	r0, sl
   1214a:	db02      	blt.n	12152 <__fputwc+0x6e>
   1214c:	f1bc 0f0a 	cmp.w	ip, #10
   12150:	d1e7      	bne.n	12122 <__fputwc+0x3e>
   12152:	f000 f953 	bl	123fc <__swbuf_r>
   12156:	1c43      	adds	r3, r0, #1
   12158:	d1e8      	bne.n	1212c <__fputwc+0x48>
   1215a:	4606      	mov	r6, r0
   1215c:	4630      	mov	r0, r6
   1215e:	b002      	add	sp, #8
   12160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12164:	4646      	mov	r6, r8
   12166:	4630      	mov	r0, r6
   12168:	b002      	add	sp, #8
   1216a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1216e:	fa5f fc88 	uxtb.w	ip, r8
   12172:	f88d c004 	strb.w	ip, [sp, #4]
   12176:	4606      	mov	r6, r0
   12178:	f10d 0904 	add.w	r9, sp, #4
   1217c:	e7cf      	b.n	1211e <__fputwc+0x3a>
   1217e:	89a3      	ldrh	r3, [r4, #12]
   12180:	4630      	mov	r0, r6
   12182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12186:	81a3      	strh	r3, [r4, #12]
   12188:	b002      	add	sp, #8
   1218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1218e:	bf00      	nop

00012190 <_fputwc_r>:
   12190:	b530      	push	{r4, r5, lr}
   12192:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12194:	f013 0f01 	tst.w	r3, #1
   12198:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1219c:	4614      	mov	r4, r2
   1219e:	b083      	sub	sp, #12
   121a0:	4605      	mov	r5, r0
   121a2:	b29a      	uxth	r2, r3
   121a4:	d101      	bne.n	121aa <_fputwc_r+0x1a>
   121a6:	0598      	lsls	r0, r3, #22
   121a8:	d51c      	bpl.n	121e4 <_fputwc_r+0x54>
   121aa:	0490      	lsls	r0, r2, #18
   121ac:	d406      	bmi.n	121bc <_fputwc_r+0x2c>
   121ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   121b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   121b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   121b8:	81a3      	strh	r3, [r4, #12]
   121ba:	6662      	str	r2, [r4, #100]	; 0x64
   121bc:	4622      	mov	r2, r4
   121be:	4628      	mov	r0, r5
   121c0:	f7ff ff90 	bl	120e4 <__fputwc>
   121c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   121c6:	07da      	lsls	r2, r3, #31
   121c8:	4605      	mov	r5, r0
   121ca:	d402      	bmi.n	121d2 <_fputwc_r+0x42>
   121cc:	89a3      	ldrh	r3, [r4, #12]
   121ce:	059b      	lsls	r3, r3, #22
   121d0:	d502      	bpl.n	121d8 <_fputwc_r+0x48>
   121d2:	4628      	mov	r0, r5
   121d4:	b003      	add	sp, #12
   121d6:	bd30      	pop	{r4, r5, pc}
   121d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   121da:	f7fa fe15 	bl	ce08 <__retarget_lock_release_recursive>
   121de:	4628      	mov	r0, r5
   121e0:	b003      	add	sp, #12
   121e2:	bd30      	pop	{r4, r5, pc}
   121e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   121e6:	9101      	str	r1, [sp, #4]
   121e8:	f7fa fe0c 	bl	ce04 <__retarget_lock_acquire_recursive>
   121ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   121f0:	9901      	ldr	r1, [sp, #4]
   121f2:	b29a      	uxth	r2, r3
   121f4:	e7d9      	b.n	121aa <_fputwc_r+0x1a>
   121f6:	bf00      	nop

000121f8 <_wcsnrtombs_l>:
   121f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121fc:	b08b      	sub	sp, #44	; 0x2c
   121fe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   12202:	9f14      	ldr	r7, [sp, #80]	; 0x50
   12204:	9103      	str	r1, [sp, #12]
   12206:	4681      	mov	r9, r0
   12208:	9205      	str	r2, [sp, #20]
   1220a:	461e      	mov	r6, r3
   1220c:	f1b8 0f00 	cmp.w	r8, #0
   12210:	d05c      	beq.n	122cc <_wcsnrtombs_l+0xd4>
   12212:	9b03      	ldr	r3, [sp, #12]
   12214:	2b00      	cmp	r3, #0
   12216:	d05e      	beq.n	122d6 <_wcsnrtombs_l+0xde>
   12218:	9b05      	ldr	r3, [sp, #20]
   1221a:	681d      	ldr	r5, [r3, #0]
   1221c:	2f00      	cmp	r7, #0
   1221e:	d06a      	beq.n	122f6 <_wcsnrtombs_l+0xfe>
   12220:	1e74      	subs	r4, r6, #1
   12222:	b34e      	cbz	r6, 12278 <_wcsnrtombs_l+0x80>
   12224:	9b03      	ldr	r3, [sp, #12]
   12226:	9304      	str	r3, [sp, #16]
   12228:	3d04      	subs	r5, #4
   1222a:	2600      	movs	r6, #0
   1222c:	9501      	str	r5, [sp, #4]
   1222e:	e00b      	b.n	12248 <_wcsnrtombs_l+0x50>
   12230:	9b03      	ldr	r3, [sp, #12]
   12232:	bb2b      	cbnz	r3, 12280 <_wcsnrtombs_l+0x88>
   12234:	9b01      	ldr	r3, [sp, #4]
   12236:	681a      	ldr	r2, [r3, #0]
   12238:	2a00      	cmp	r2, #0
   1223a:	d03a      	beq.n	122b2 <_wcsnrtombs_l+0xba>
   1223c:	45bc      	cmp	ip, r7
   1223e:	d25c      	bcs.n	122fa <_wcsnrtombs_l+0x102>
   12240:	3c01      	subs	r4, #1
   12242:	1c63      	adds	r3, r4, #1
   12244:	4666      	mov	r6, ip
   12246:	d017      	beq.n	12278 <_wcsnrtombs_l+0x80>
   12248:	f8d8 3000 	ldr.w	r3, [r8]
   1224c:	9302      	str	r3, [sp, #8]
   1224e:	9b01      	ldr	r3, [sp, #4]
   12250:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   12254:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12258:	9301      	str	r3, [sp, #4]
   1225a:	a907      	add	r1, sp, #28
   1225c:	4643      	mov	r3, r8
   1225e:	4648      	mov	r0, r9
   12260:	f8d8 b004 	ldr.w	fp, [r8, #4]
   12264:	47a8      	blx	r5
   12266:	1c42      	adds	r2, r0, #1
   12268:	d03a      	beq.n	122e0 <_wcsnrtombs_l+0xe8>
   1226a:	eb00 0c06 	add.w	ip, r0, r6
   1226e:	45bc      	cmp	ip, r7
   12270:	d9de      	bls.n	12230 <_wcsnrtombs_l+0x38>
   12272:	9b02      	ldr	r3, [sp, #8]
   12274:	e9c8 3b00 	strd	r3, fp, [r8]
   12278:	4630      	mov	r0, r6
   1227a:	b00b      	add	sp, #44	; 0x2c
   1227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12280:	2800      	cmp	r0, #0
   12282:	dd0e      	ble.n	122a2 <_wcsnrtombs_l+0xaa>
   12284:	9b04      	ldr	r3, [sp, #16]
   12286:	9d01      	ldr	r5, [sp, #4]
   12288:	4418      	add	r0, r3
   1228a:	1e5a      	subs	r2, r3, #1
   1228c:	a907      	add	r1, sp, #28
   1228e:	f100 3eff 	add.w	lr, r0, #4294967295
   12292:	f811 3b01 	ldrb.w	r3, [r1], #1
   12296:	f802 3f01 	strb.w	r3, [r2, #1]!
   1229a:	4572      	cmp	r2, lr
   1229c:	d1f9      	bne.n	12292 <_wcsnrtombs_l+0x9a>
   1229e:	9501      	str	r5, [sp, #4]
   122a0:	9004      	str	r0, [sp, #16]
   122a2:	9b05      	ldr	r3, [sp, #20]
   122a4:	681a      	ldr	r2, [r3, #0]
   122a6:	3204      	adds	r2, #4
   122a8:	601a      	str	r2, [r3, #0]
   122aa:	9b01      	ldr	r3, [sp, #4]
   122ac:	681a      	ldr	r2, [r3, #0]
   122ae:	2a00      	cmp	r2, #0
   122b0:	d1c4      	bne.n	1223c <_wcsnrtombs_l+0x44>
   122b2:	9b03      	ldr	r3, [sp, #12]
   122b4:	b10b      	cbz	r3, 122ba <_wcsnrtombs_l+0xc2>
   122b6:	9b05      	ldr	r3, [sp, #20]
   122b8:	601a      	str	r2, [r3, #0]
   122ba:	f10c 36ff 	add.w	r6, ip, #4294967295
   122be:	2200      	movs	r2, #0
   122c0:	4630      	mov	r0, r6
   122c2:	f8c8 2000 	str.w	r2, [r8]
   122c6:	b00b      	add	sp, #44	; 0x2c
   122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122cc:	9b03      	ldr	r3, [sp, #12]
   122ce:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   122d2:	2b00      	cmp	r3, #0
   122d4:	d1a0      	bne.n	12218 <_wcsnrtombs_l+0x20>
   122d6:	9b05      	ldr	r3, [sp, #20]
   122d8:	f04f 37ff 	mov.w	r7, #4294967295
   122dc:	681d      	ldr	r5, [r3, #0]
   122de:	e79f      	b.n	12220 <_wcsnrtombs_l+0x28>
   122e0:	4606      	mov	r6, r0
   122e2:	218a      	movs	r1, #138	; 0x8a
   122e4:	2200      	movs	r2, #0
   122e6:	4630      	mov	r0, r6
   122e8:	f8c9 1000 	str.w	r1, [r9]
   122ec:	f8c8 2000 	str.w	r2, [r8]
   122f0:	b00b      	add	sp, #44	; 0x2c
   122f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f6:	463e      	mov	r6, r7
   122f8:	e7be      	b.n	12278 <_wcsnrtombs_l+0x80>
   122fa:	4666      	mov	r6, ip
   122fc:	e7bc      	b.n	12278 <_wcsnrtombs_l+0x80>
   122fe:	bf00      	nop

00012300 <_wcsnrtombs_r>:
   12300:	b510      	push	{r4, lr}
   12302:	b084      	sub	sp, #16
   12304:	4c05      	ldr	r4, [pc, #20]	; (1231c <_wcsnrtombs_r+0x1c>)
   12306:	9806      	ldr	r0, [sp, #24]
   12308:	9000      	str	r0, [sp, #0]
   1230a:	9807      	ldr	r0, [sp, #28]
   1230c:	9001      	str	r0, [sp, #4]
   1230e:	4804      	ldr	r0, [pc, #16]	; (12320 <_wcsnrtombs_r+0x20>)
   12310:	6800      	ldr	r0, [r0, #0]
   12312:	9402      	str	r4, [sp, #8]
   12314:	f7ff ff70 	bl	121f8 <_wcsnrtombs_l>
   12318:	b004      	add	sp, #16
   1231a:	bd10      	pop	{r4, pc}
   1231c:	2000435c 	.word	0x2000435c
   12320:	200048e4 	.word	0x200048e4

00012324 <__smakebuf_r>:
   12324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12328:	898b      	ldrh	r3, [r1, #12]
   1232a:	460c      	mov	r4, r1
   1232c:	0799      	lsls	r1, r3, #30
   1232e:	b096      	sub	sp, #88	; 0x58
   12330:	d508      	bpl.n	12344 <__smakebuf_r+0x20>
   12332:	f104 0343 	add.w	r3, r4, #67	; 0x43
   12336:	2201      	movs	r2, #1
   12338:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1233c:	6023      	str	r3, [r4, #0]
   1233e:	b016      	add	sp, #88	; 0x58
   12340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12348:	2900      	cmp	r1, #0
   1234a:	4606      	mov	r6, r0
   1234c:	db25      	blt.n	1239a <__smakebuf_r+0x76>
   1234e:	466a      	mov	r2, sp
   12350:	f000 f8ac 	bl	124ac <_fstat_r>
   12354:	2800      	cmp	r0, #0
   12356:	db1f      	blt.n	12398 <__smakebuf_r+0x74>
   12358:	9d01      	ldr	r5, [sp, #4]
   1235a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1235e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   12362:	fab5 f585 	clz	r5, r5
   12366:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1236a:	096d      	lsrs	r5, r5, #5
   1236c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   12370:	4641      	mov	r1, r8
   12372:	4630      	mov	r0, r6
   12374:	f7f9 fbca 	bl	bb0c <_malloc_r>
   12378:	b1e0      	cbz	r0, 123b4 <__smakebuf_r+0x90>
   1237a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1237e:	f8c4 8014 	str.w	r8, [r4, #20]
   12382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12386:	6020      	str	r0, [r4, #0]
   12388:	6120      	str	r0, [r4, #16]
   1238a:	81a3      	strh	r3, [r4, #12]
   1238c:	bb35      	cbnz	r5, 123dc <__smakebuf_r+0xb8>
   1238e:	433b      	orrs	r3, r7
   12390:	81a3      	strh	r3, [r4, #12]
   12392:	b016      	add	sp, #88	; 0x58
   12394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12398:	89a3      	ldrh	r3, [r4, #12]
   1239a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1239e:	d019      	beq.n	123d4 <__smakebuf_r+0xb0>
   123a0:	f04f 0840 	mov.w	r8, #64	; 0x40
   123a4:	2500      	movs	r5, #0
   123a6:	4641      	mov	r1, r8
   123a8:	4630      	mov	r0, r6
   123aa:	462f      	mov	r7, r5
   123ac:	f7f9 fbae 	bl	bb0c <_malloc_r>
   123b0:	2800      	cmp	r0, #0
   123b2:	d1e2      	bne.n	1237a <__smakebuf_r+0x56>
   123b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   123b8:	059a      	lsls	r2, r3, #22
   123ba:	d4c0      	bmi.n	1233e <__smakebuf_r+0x1a>
   123bc:	f023 0303 	bic.w	r3, r3, #3
   123c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   123c4:	f043 0302 	orr.w	r3, r3, #2
   123c8:	2101      	movs	r1, #1
   123ca:	e9c4 2104 	strd	r2, r1, [r4, #16]
   123ce:	81a3      	strh	r3, [r4, #12]
   123d0:	6022      	str	r2, [r4, #0]
   123d2:	e7b4      	b.n	1233e <__smakebuf_r+0x1a>
   123d4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   123d8:	462f      	mov	r7, r5
   123da:	e7c9      	b.n	12370 <__smakebuf_r+0x4c>
   123dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   123e0:	4630      	mov	r0, r6
   123e2:	f000 f879 	bl	124d8 <_isatty_r>
   123e6:	b910      	cbnz	r0, 123ee <__smakebuf_r+0xca>
   123e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   123ec:	e7cf      	b.n	1238e <__smakebuf_r+0x6a>
   123ee:	89a3      	ldrh	r3, [r4, #12]
   123f0:	f023 0303 	bic.w	r3, r3, #3
   123f4:	f043 0301 	orr.w	r3, r3, #1
   123f8:	b21b      	sxth	r3, r3
   123fa:	e7c8      	b.n	1238e <__smakebuf_r+0x6a>

000123fc <__swbuf_r>:
   123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123fe:	460d      	mov	r5, r1
   12400:	4614      	mov	r4, r2
   12402:	4606      	mov	r6, r0
   12404:	b110      	cbz	r0, 1240c <__swbuf_r+0x10>
   12406:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12408:	2b00      	cmp	r3, #0
   1240a:	d04c      	beq.n	124a6 <__swbuf_r+0xaa>
   1240c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12410:	69a3      	ldr	r3, [r4, #24]
   12412:	60a3      	str	r3, [r4, #8]
   12414:	0717      	lsls	r7, r2, #28
   12416:	b290      	uxth	r0, r2
   12418:	d51b      	bpl.n	12452 <__swbuf_r+0x56>
   1241a:	6923      	ldr	r3, [r4, #16]
   1241c:	b1cb      	cbz	r3, 12452 <__swbuf_r+0x56>
   1241e:	b2ed      	uxtb	r5, r5
   12420:	0481      	lsls	r1, r0, #18
   12422:	462f      	mov	r7, r5
   12424:	d522      	bpl.n	1246c <__swbuf_r+0x70>
   12426:	6822      	ldr	r2, [r4, #0]
   12428:	6961      	ldr	r1, [r4, #20]
   1242a:	1ad3      	subs	r3, r2, r3
   1242c:	4299      	cmp	r1, r3
   1242e:	dd29      	ble.n	12484 <__swbuf_r+0x88>
   12430:	3301      	adds	r3, #1
   12432:	68a1      	ldr	r1, [r4, #8]
   12434:	3901      	subs	r1, #1
   12436:	60a1      	str	r1, [r4, #8]
   12438:	1c51      	adds	r1, r2, #1
   1243a:	6021      	str	r1, [r4, #0]
   1243c:	7015      	strb	r5, [r2, #0]
   1243e:	6962      	ldr	r2, [r4, #20]
   12440:	429a      	cmp	r2, r3
   12442:	d027      	beq.n	12494 <__swbuf_r+0x98>
   12444:	89a3      	ldrh	r3, [r4, #12]
   12446:	07db      	lsls	r3, r3, #31
   12448:	d501      	bpl.n	1244e <__swbuf_r+0x52>
   1244a:	2d0a      	cmp	r5, #10
   1244c:	d022      	beq.n	12494 <__swbuf_r+0x98>
   1244e:	4638      	mov	r0, r7
   12450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12452:	4621      	mov	r1, r4
   12454:	4630      	mov	r0, r6
   12456:	f7ff fddf 	bl	12018 <__swsetup_r>
   1245a:	bb08      	cbnz	r0, 124a0 <__swbuf_r+0xa4>
   1245c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12460:	6923      	ldr	r3, [r4, #16]
   12462:	b290      	uxth	r0, r2
   12464:	b2ed      	uxtb	r5, r5
   12466:	0481      	lsls	r1, r0, #18
   12468:	462f      	mov	r7, r5
   1246a:	d4dc      	bmi.n	12426 <__swbuf_r+0x2a>
   1246c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   12470:	81a2      	strh	r2, [r4, #12]
   12472:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12474:	6961      	ldr	r1, [r4, #20]
   12476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1247a:	6662      	str	r2, [r4, #100]	; 0x64
   1247c:	6822      	ldr	r2, [r4, #0]
   1247e:	1ad3      	subs	r3, r2, r3
   12480:	4299      	cmp	r1, r3
   12482:	dcd5      	bgt.n	12430 <__swbuf_r+0x34>
   12484:	4621      	mov	r1, r4
   12486:	4630      	mov	r0, r6
   12488:	f7fd fb20 	bl	facc <_fflush_r>
   1248c:	b940      	cbnz	r0, 124a0 <__swbuf_r+0xa4>
   1248e:	6822      	ldr	r2, [r4, #0]
   12490:	2301      	movs	r3, #1
   12492:	e7ce      	b.n	12432 <__swbuf_r+0x36>
   12494:	4621      	mov	r1, r4
   12496:	4630      	mov	r0, r6
   12498:	f7fd fb18 	bl	facc <_fflush_r>
   1249c:	2800      	cmp	r0, #0
   1249e:	d0d6      	beq.n	1244e <__swbuf_r+0x52>
   124a0:	f04f 37ff 	mov.w	r7, #4294967295
   124a4:	e7d3      	b.n	1244e <__swbuf_r+0x52>
   124a6:	f7fa f9f9 	bl	c89c <__sinit>
   124aa:	e7af      	b.n	1240c <__swbuf_r+0x10>

000124ac <_fstat_r>:
   124ac:	b570      	push	{r4, r5, r6, lr}
   124ae:	460c      	mov	r4, r1
   124b0:	4d08      	ldr	r5, [pc, #32]	; (124d4 <_fstat_r+0x28>)
   124b2:	4603      	mov	r3, r0
   124b4:	2600      	movs	r6, #0
   124b6:	4620      	mov	r0, r4
   124b8:	4611      	mov	r1, r2
   124ba:	461c      	mov	r4, r3
   124bc:	602e      	str	r6, [r5, #0]
   124be:	f7f7 ff21 	bl	a304 <_fstat>
   124c2:	1c43      	adds	r3, r0, #1
   124c4:	d000      	beq.n	124c8 <_fstat_r+0x1c>
   124c6:	bd70      	pop	{r4, r5, r6, pc}
   124c8:	682b      	ldr	r3, [r5, #0]
   124ca:	2b00      	cmp	r3, #0
   124cc:	d0fb      	beq.n	124c6 <_fstat_r+0x1a>
   124ce:	6023      	str	r3, [r4, #0]
   124d0:	bd70      	pop	{r4, r5, r6, pc}
   124d2:	bf00      	nop
   124d4:	200053dc 	.word	0x200053dc

000124d8 <_isatty_r>:
   124d8:	b538      	push	{r3, r4, r5, lr}
   124da:	4d07      	ldr	r5, [pc, #28]	; (124f8 <_isatty_r+0x20>)
   124dc:	2200      	movs	r2, #0
   124de:	4604      	mov	r4, r0
   124e0:	4608      	mov	r0, r1
   124e2:	602a      	str	r2, [r5, #0]
   124e4:	f7f7 ff14 	bl	a310 <_isatty>
   124e8:	1c43      	adds	r3, r0, #1
   124ea:	d000      	beq.n	124ee <_isatty_r+0x16>
   124ec:	bd38      	pop	{r3, r4, r5, pc}
   124ee:	682b      	ldr	r3, [r5, #0]
   124f0:	2b00      	cmp	r3, #0
   124f2:	d0fb      	beq.n	124ec <_isatty_r+0x14>
   124f4:	6023      	str	r3, [r4, #0]
   124f6:	bd38      	pop	{r3, r4, r5, pc}
   124f8:	200053dc 	.word	0x200053dc
   124fc:	00000000 	.word	0x00000000

00012500 <___reboot_Teensyduino__veneer>:
   12500:	f85f f000 	ldr.w	pc, [pc]	; 12504 <___reboot_Teensyduino__veneer+0x4>
   12504:	60001d55 	.word	0x60001d55

00012508 <___init_veneer>:
   12508:	f85f f000 	ldr.w	pc, [pc]	; 1250c <___init_veneer+0x4>
   1250c:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

00012510 <_fini>:
   12510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12512:	bf00      	nop
