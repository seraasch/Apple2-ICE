
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc6d 	bl	60001e10 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc40 	bl	60001e08 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc35 	bl	60001e18 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3b 	bl	60001e28 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00010f58 	.word	0x00010f58
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60012eb8 	.word	0x60012eb8
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	00008b8d 	.word	0x00008b8d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00009fa5 	.word	0x00009fa5
600015f4:	20018864 	.word	0x20018864
600015f8:	00009fa9 	.word	0x00009fa9
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20018868 	.word	0x20018868
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9fa 	bl	60001e20 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	2001889b 	.word	0x2001889b
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018854 	.word	0x20018854
60001c50:	20018850 	.word	0x20018850
60001c54:	20018858 	.word	0x20018858
60001c58:	2001885c 	.word	0x2001885c
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	00008d69 	.word	0x00008d69

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8d8 	bl	60001e30 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f8b1 	bl	60001e40 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f89d 	bl	60001e38 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	00008f51 	.word	0x00008f51

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20018895 	.word	0x20018895

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__pwm_init_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__pwm_init_veneer+0x4>
60001e0c:	0000a335 	.word	0x0000a335

60001e10 <__set_arm_clock_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__set_arm_clock_veneer+0x4>
60001e14:	00009fc9 	.word	0x00009fc9

60001e18 <____libc_init_array_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <____libc_init_array_veneer+0x4>
60001e1c:	0000b7fd 	.word	0x0000b7fd

60001e20 <__sm_set_pool_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__sm_set_pool_veneer+0x4>
60001e24:	0000a49d 	.word	0x0000a49d

60001e28 <__main_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__main_veneer+0x4>
60001e2c:	000089e5 	.word	0x000089e5

60001e30 <__usb_init_serialnumber_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__usb_init_serialnumber_veneer+0x4>
60001e34:	000096c1 	.word	0x000096c1

60001e38 <__memset_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__memset_veneer+0x4>
60001e3c:	0000b545 	.word	0x0000b545

60001e40 <__delay_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__delay_veneer+0x4>
60001e44:	000088cd 	.word	0x000088cd

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 000083b5                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	60018c00 	.word	0x60018c00

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f008 fa95 	bl	859c <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f008 fa8f 	bl	859c <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f008 fa89 	bl	859c <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f008 fa21 	bl	84ec <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f008 fa1d 	bl	84ec <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f008 fa1a 	bl	84ec <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <OpDecoder::~OpDecoder()>:
      cc:	b510      	push	{r4, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	3020      	adds	r0, #32
	while (newdiv > 65535 && prescale < 7) {
      d2:	f008 fa0b 	bl	84ec <String::~String()>
      d6:	f104 0010 	add.w	r0, r4, #16
      da:	f008 fa07 	bl	84ec <String::~String()>
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      de:	4620      	mov	r0, r4
      e0:	f008 fa04 	bl	84ec <String::~String()>
        return("");
      e4:	4620      	mov	r0, r4
      e6:	bd10      	pop	{r4, pc}

000000e8 <initialize_opcode_info()>:
      e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
      ec:	b08f      	sub	sp, #60	; 0x3c
      ee:	4ccd      	ldr	r4, [pc, #820]	; (424 <initialize_opcode_info()+0x33c>)
      f0:	49cd      	ldr	r1, [pc, #820]	; (428 <initialize_opcode_info()+0x340>)
      f2:	f240 2b03 	movw	fp, #515	; 0x203
      f6:	a801      	add	r0, sp, #4
      f8:	4dcc      	ldr	r5, [pc, #816]	; (42c <initialize_opcode_info()+0x344>)
      fa:	f008 fa33 	bl	8564 <String::String(char const*)>
      fe:	4621      	mov	r1, r4
     100:	a805      	add	r0, sp, #20
     102:	f8df 9368 	ldr.w	r9, [pc, #872]	; 46c <initialize_opcode_info()+0x384>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f008 fa2d 	bl	8564 <String::String(char const*)>
     10a:	49c9      	ldr	r1, [pc, #804]	; (430 <initialize_opcode_info()+0x348>)
     10c:	a809      	add	r0, sp, #36	; 0x24
     10e:	4fc9      	ldr	r7, [pc, #804]	; (434 <initialize_opcode_info()+0x34c>)
	if (newbuffer) {
     110:	f008 fa28 	bl	8564 <String::String(char const*)>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	f240 1307 	movw	r3, #263	; 0x107
		capacity = maxStrLen;
     118:	a901      	add	r1, sp, #4
		return 1;
     11a:	4628      	mov	r0, r5
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     120:	f7ff ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	a801      	add	r0, sp, #4
	mask = p->mask;
     126:	f8df a348 	ldr.w	sl, [pc, #840]	; 470 <initialize_opcode_info()+0x388>
	if (pinmode & mask) {
     12a:	f7ff ffcf 	bl	cc <OpDecoder::~OpDecoder()>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4649      	mov	r1, r9
     130:	a801      	add	r0, sp, #4
	pinmode = *(p->reg + 1);
     132:	4ec1      	ldr	r6, [pc, #772]	; (438 <initialize_opcode_info()+0x350>)
	mask = p->mask;
     134:	f008 fa16 	bl	8564 <String::String(char const*)>
	if (pinmode & mask) {
     138:	49c0      	ldr	r1, [pc, #768]	; (43c <initialize_opcode_info()+0x354>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	a805      	add	r0, sp, #20
     13c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 474 <initialize_opcode_info()+0x38c>
     140:	f008 fa10 	bl	8564 <String::String(char const*)>
     144:	4639      	mov	r1, r7
     146:	a809      	add	r0, sp, #36	; 0x24
     148:	f008 fa0c 	bl	8564 <String::String(char const*)>
     14c:	f240 2306 	movw	r3, #518	; 0x206
     150:	a901      	add	r1, sp, #4
     152:	f105 0034 	add.w	r0, r5, #52	; 0x34
     156:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     15a:	f7ff ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	aa01      	add	r2, sp, #4
     160:	4610      	mov	r0, r2
     162:	f7ff ffb3 	bl	cc <OpDecoder::~OpDecoder()>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	aa01      	add	r2, sp, #4
     168:	4649      	mov	r1, r9
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	4610      	mov	r0, r2
     16c:	f008 f9fa 	bl	8564 <String::String(char const*)>
     170:	aa05      	add	r2, sp, #20
     172:	4651      	mov	r1, sl
     174:	4610      	mov	r0, r2
     176:	f008 f9f5 	bl	8564 <String::String(char const*)>
     17a:	aa09      	add	r2, sp, #36	; 0x24
     17c:	4639      	mov	r1, r7
     17e:	4610      	mov	r0, r2
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	f008 f9f0 	bl	8564 <String::String(char const*)>
     184:	a901      	add	r1, sp, #4
     186:	f505 7082 	add.w	r0, r5, #260	; 0x104
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     18a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     18e:	f7ff ff6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     192:	aa01      	add	r2, sp, #4
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 478 <initialize_opcode_info()+0x390>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4610      	mov	r0, r2
     19a:	f7ff ff97 	bl	cc <OpDecoder::~OpDecoder()>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     19e:	aa01      	add	r2, sp, #4
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1a0:	4659      	mov	r1, fp
     1a2:	4610      	mov	r0, r2
     1a4:	f008 f9de 	bl	8564 <String::String(char const*)>
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	aa05      	add	r2, sp, #20
     1aa:	4651      	mov	r1, sl
     1ac:	4610      	mov	r0, r2
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1ae:	f008 f9d9 	bl	8564 <String::String(char const*)>
     1b2:	aa09      	add	r2, sp, #36	; 0x24
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b4:	4631      	mov	r1, r6
	port->CTRL = ctrl;
     1b6:	4610      	mov	r0, r2
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	f008 f9d4 	bl	8564 <String::String(char const*)>
     1bc:	f240 2205 	movw	r2, #517	; 0x205
     1c0:	a901      	add	r1, sp, #4

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c2:	f505 709c 	add.w	r0, r5, #312	; 0x138
     1c6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ca:	f7ff ff4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     1ce:	a901      	add	r1, sp, #4
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d0:	4608      	mov	r0, r1
	port->STAT = c;
     1d2:	f7ff ff7b 	bl	cc <OpDecoder::~OpDecoder()>
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d6:	499a      	ldr	r1, [pc, #616]	; (440 <initialize_opcode_info()+0x358>)
     1d8:	a801      	add	r0, sp, #4
     1da:	f008 f9c3 	bl	8564 <String::String(char const*)>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1de:	4621      	mov	r1, r4
     1e0:	a805      	add	r0, sp, #20
     1e2:	f008 f9bf 	bl	8564 <String::String(char const*)>
};
     1e6:	4621      	mov	r1, r4
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	a809      	add	r0, sp, #36	; 0x24
     1ea:	f008 f9bb 	bl	8564 <String::String(char const*)>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	f240 1203 	movw	r2, #259	; 0x103
     1f2:	a901      	add	r1, sp, #4
     1f4:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     1f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     1fc:	f7ff ff34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     200:	a901      	add	r1, sp, #4
     202:	4608      	mov	r0, r1
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	f7ff ff62 	bl	cc <OpDecoder::~OpDecoder()>
     208:	4649      	mov	r1, r9
     20a:	a801      	add	r0, sp, #4
     20c:	f008 f9aa 	bl	8564 <String::String(char const*)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	a905      	add	r1, sp, #20
     212:	4608      	mov	r0, r1
     214:	498b      	ldr	r1, [pc, #556]	; (444 <initialize_opcode_info()+0x35c>)
     216:	f008 f9a5 	bl	8564 <String::String(char const*)>
     21a:	4639      	mov	r1, r7
     21c:	a809      	add	r0, sp, #36	; 0x24
     21e:	f008 f9a1 	bl	8564 <String::String(char const*)>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	f240 2302 	movw	r3, #514	; 0x202
     226:	a901      	add	r1, sp, #4
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	f7ff ff1a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     234:	a801      	add	r0, sp, #4
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	f7ff ff49 	bl	cc <OpDecoder::~OpDecoder()>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	4659      	mov	r1, fp
     23c:	a801      	add	r0, sp, #4
     23e:	f008 f991 	bl	8564 <String::String(char const*)>
};
     242:	4b81      	ldr	r3, [pc, #516]	; (448 <initialize_opcode_info()+0x360>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	a805      	add	r0, sp, #20
     246:	4619      	mov	r1, r3
     248:	f008 f98c 	bl	8564 <String::String(char const*)>
     24c:	4631      	mov	r1, r6
     24e:	a809      	add	r0, sp, #36	; 0x24
     250:	f008 f988 	bl	8564 <String::String(char const*)>
     254:	f44f 7381 	mov.w	r3, #258	; 0x102
     258:	a901      	add	r1, sp, #4
     25a:	f505 7002 	add.w	r0, r5, #520	; 0x208
     25e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     262:	f7ff ff01 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     266:	a801      	add	r0, sp, #4
     268:	f7ff ff30 	bl	cc <OpDecoder::~OpDecoder()>
     26c:	4649      	mov	r1, r9
     26e:	a801      	add	r0, sp, #4
     270:	f008 f978 	bl	8564 <String::String(char const*)>
     274:	4641      	mov	r1, r8
     276:	a805      	add	r0, sp, #20

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     278:	f008 f974 	bl	8564 <String::String(char const*)>
				val *= 10.0f;
     27c:	4639      	mov	r1, r7
     27e:	a809      	add	r0, sp, #36	; 0x24
			while (newPrecision > 0) {
     280:	f008 f970 	bl	8564 <String::String(char const*)>
				val *= 10.0f;
     284:	f44f 7341 	mov.w	r3, #772	; 0x304
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     288:	a901      	add	r1, sp, #4
     28a:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
     28e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     292:	f7ff fee9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	a801      	add	r0, sp, #4
     298:	f7ff ff18 	bl	cc <OpDecoder::~OpDecoder()>
     29c:	4659      	mov	r1, fp
     29e:	a801      	add	r0, sp, #4
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     2a0:	f008 f960 	bl	8564 <String::String(char const*)>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     2a4:	4641      	mov	r1, r8
     2a6:	a805      	add	r0, sp, #20
     2a8:	f008 f95c 	bl	8564 <String::String(char const*)>
     2ac:	4631      	mov	r1, r6
     2ae:	a809      	add	r0, sp, #36	; 0x24
     2b0:	f008 f958 	bl	8564 <String::String(char const*)>
     2b4:	f240 3e06 	movw	lr, #774	; 0x306
		int ndigs = (val<0) ? 4 : 3;
     2b8:	a901      	add	r1, sp, #4
     2ba:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
     2be:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     2c2:	f7ff fed1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c6:	a801      	add	r0, sp, #4
		if (width<0) {
     2c8:	f7ff ff00 	bl	cc <OpDecoder::~OpDecoder()>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2cc:	495f      	ldr	r1, [pc, #380]	; (44c <initialize_opcode_info()+0x364>)
		if (width<0) {
     2ce:	a801      	add	r0, sp, #4
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	f008 f948 	bl	8564 <String::String(char const*)>
     2d4:	495e      	ldr	r1, [pc, #376]	; (450 <initialize_opcode_info()+0x368>)
     2d6:	a805      	add	r0, sp, #20
     2d8:	f008 f944 	bl	8564 <String::String(char const*)>
     2dc:	4621      	mov	r1, r4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	a809      	add	r0, sp, #36	; 0x24
     2e0:	f008 f940 	bl	8564 <String::String(char const*)>
     2e4:	f240 2102 	movw	r1, #514	; 0x202
     2e8:	f505 7050 	add.w	r0, r5, #832	; 0x340
		while (awidth) {
     2ec:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     2f0:	a901      	add	r1, sp, #4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	f7ff feb9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     2f6:	a801      	add	r0, sp, #4
     2f8:	f7ff fee8 	bl	cc <OpDecoder::~OpDecoder()>
     2fc:	4649      	mov	r1, r9
     2fe:	a801      	add	r0, sp, #4
		while (awidth) {
     300:	f008 f930 	bl	8564 <String::String(char const*)>
				*buf++ = ' ';
     304:	a805      	add	r0, sp, #20
     306:	4953      	ldr	r1, [pc, #332]	; (454 <initialize_opcode_info()+0x36c>)
     308:	f008 f92c 	bl	8564 <String::String(char const*)>
     30c:	4639      	mov	r1, r7
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     30e:	a809      	add	r0, sp, #36	; 0x24
     310:	f008 f928 	bl	8564 <String::String(char const*)>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	aa01      	add	r2, sp, #4
     316:	f240 2c05 	movw	ip, #517	; 0x205
     31a:	f505 705d 	add.w	r0, r5, #884	; 0x374
     31e:	4611      	mov	r1, r2
     320:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
		while (awidth) {
     324:	f7ff fea0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	a801      	add	r0, sp, #4
     32a:	f7ff fecf 	bl	cc <OpDecoder::~OpDecoder()>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	4649      	mov	r1, r9
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     330:	a801      	add	r0, sp, #4
     332:	f008 f917 	bl	8564 <String::String(char const*)>
		if (val<0) *buf++ = '-';
     336:	4948      	ldr	r1, [pc, #288]	; (458 <initialize_opcode_info()+0x370>)
     338:	a805      	add	r0, sp, #20
     33a:	f008 f913 	bl	8564 <String::String(char const*)>
     33e:	4639      	mov	r1, r7
     340:	a809      	add	r0, sp, #36	; 0x24
     342:	f008 f90f 	bl	8564 <String::String(char const*)>
     346:	aa01      	add	r2, sp, #4
     348:	f44f 7c01 	mov.w	ip, #516	; 0x204
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     34c:	f205 4044 	addw	r0, r5, #1092	; 0x444
     350:	4611      	mov	r1, r2
     352:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     356:	f7ff fe87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     35a:	a801      	add	r0, sp, #4
     35c:	f7ff feb6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     360:	4659      	mov	r1, fp
     362:	a801      	add	r0, sp, #4
     364:	f008 f8fe 	bl	8564 <String::String(char const*)>
     368:	493b      	ldr	r1, [pc, #236]	; (458 <initialize_opcode_info()+0x370>)
     36a:	a805      	add	r0, sp, #20
     36c:	f008 f8fa 	bl	8564 <String::String(char const*)>
     370:	4631      	mov	r1, r6
     372:	a809      	add	r0, sp, #36	; 0x24
     374:	f008 f8f6 	bl	8564 <String::String(char const*)>
     378:	aa01      	add	r2, sp, #4
     37a:	f240 2006 	movw	r0, #518	; 0x206
     37e:	4611      	mov	r1, r2
     380:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     384:	f505 608f 	add.w	r0, r5, #1144	; 0x478
     388:	f7ff fe6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     38c:	aa01      	add	r2, sp, #4
     38e:	4610      	mov	r0, r2
     390:	f7ff fe9c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     394:	aa01      	add	r2, sp, #4
     396:	4931      	ldr	r1, [pc, #196]	; (45c <initialize_opcode_info()+0x374>)
     398:	4610      	mov	r0, r2
     39a:	f008 f8e3 	bl	8564 <String::String(char const*)>
     39e:	aa05      	add	r2, sp, #20
     3a0:	4621      	mov	r1, r4
     3a2:	4610      	mov	r0, r2
     3a4:	f008 f8de 	bl	8564 <String::String(char const*)>
     3a8:	aa09      	add	r2, sp, #36	; 0x24
     3aa:	492d      	ldr	r1, [pc, #180]	; (460 <initialize_opcode_info()+0x378>)
     3ac:	4610      	mov	r0, r2
     3ae:	f008 f8d9 	bl	8564 <String::String(char const*)>
     3b2:	f44f 7281 	mov.w	r2, #258	; 0x102
     3b6:	a901      	add	r1, sp, #4
     3b8:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
     3bc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     3c0:	f7ff fe52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3c4:	a801      	add	r0, sp, #4
     3c6:	f7ff fe81 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     3ca:	4649      	mov	r1, r9
     3cc:	a801      	add	r0, sp, #4
     3ce:	f008 f8c9 	bl	8564 <String::String(char const*)>
     3d2:	a805      	add	r0, sp, #20
     3d4:	4923      	ldr	r1, [pc, #140]	; (464 <initialize_opcode_info()+0x37c>)
     3d6:	f008 f8c5 	bl	8564 <String::String(char const*)>
     3da:	4639      	mov	r1, r7
     3dc:	a809      	add	r0, sp, #36	; 0x24
     3de:	f008 f8c1 	bl	8564 <String::String(char const*)>
     3e2:	f44f 7341 	mov.w	r3, #772	; 0x304
     3e6:	a901      	add	r1, sp, #4
     3e8:	f205 5014 	addw	r0, r5, #1300	; 0x514
     3ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     3f0:	f7ff fe3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3f4:	a801      	add	r0, sp, #4
     3f6:	f7ff fe69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     3fa:	4649      	mov	r1, r9
     3fc:	a801      	add	r0, sp, #4
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     3fe:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     402:	f008 f8af 	bl	8564 <String::String(char const*)>
     406:	4918      	ldr	r1, [pc, #96]	; (468 <initialize_opcode_info()+0x380>)
     408:	a805      	add	r0, sp, #20
     40a:	f008 f8ab 	bl	8564 <String::String(char const*)>
     40e:	4639      	mov	r1, r7
     410:	a809      	add	r0, sp, #36	; 0x24
     412:	f008 f8a7 	bl	8564 <String::String(char const*)>
     416:	f44f 7341 	mov.w	r3, #772	; 0x304
     41a:	a901      	add	r1, sp, #4
     41c:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
     420:	e02c      	b.n	47c <initialize_opcode_info()+0x394>
     422:	bf00      	nop
     424:	2000047c 	.word	0x2000047c
     428:	2000087c 	.word	0x2000087c
     42c:	20015418 	.word	0x20015418
     430:	20000880 	.word	0x20000880
     434:	20000890 	.word	0x20000890
     438:	2000089c 	.word	0x2000089c
     43c:	20000888 	.word	0x20000888
     440:	200008a0 	.word	0x200008a0
     444:	200008a4 	.word	0x200008a4
     448:	200008a8 	.word	0x200008a8
     44c:	200008b0 	.word	0x200008b0
     450:	200008b4 	.word	0x200008b4
     454:	200008b8 	.word	0x200008b8
     458:	200008c0 	.word	0x200008c0
     45c:	200008c8 	.word	0x200008c8
     460:	200008cc 	.word	0x200008cc
     464:	200008d0 	.word	0x200008d0
     468:	200008d8 	.word	0x200008d8
     46c:	20000884 	.word	0x20000884
     470:	20000894 	.word	0x20000894
     474:	200008ac 	.word	0x200008ac
     478:	20000898 	.word	0x20000898
     47c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     480:	f7ff fdf2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     484:	a801      	add	r0, sp, #4
     486:	f7ff fe21 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     48a:	4659      	mov	r1, fp
     48c:	a801      	add	r0, sp, #4
	opcode_info[0x20] = {"JSR","abs","",6,3};
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     48e:	f240 2b03 	movw	fp, #515	; 0x203
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     492:	f008 f867 	bl	8564 <String::String(char const*)>
     496:	49d0      	ldr	r1, [pc, #832]	; (7d8 <initialize_opcode_info()+0x6f0>)
     498:	a805      	add	r0, sp, #20
     49a:	f008 f863 	bl	8564 <String::String(char const*)>
     49e:	4631      	mov	r1, r6
     4a0:	a809      	add	r0, sp, #36	; 0x24
     4a2:	f008 f85f 	bl	8564 <String::String(char const*)>
     4a6:	a901      	add	r1, sp, #4
     4a8:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
     4ac:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     4b0:	f7ff fdda 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4b4:	a801      	add	r0, sp, #4
     4b6:	f7ff fe09 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     4ba:	49c8      	ldr	r1, [pc, #800]	; (7dc <initialize_opcode_info()+0x6f4>)
     4bc:	a801      	add	r0, sp, #4
     4be:	f240 3906 	movw	r9, #774	; 0x306
     4c2:	f008 f84f 	bl	8564 <String::String(char const*)>
     4c6:	4641      	mov	r1, r8
     4c8:	a805      	add	r0, sp, #20
     4ca:	f008 f84b 	bl	8564 <String::String(char const*)>
     4ce:	4621      	mov	r1, r4
     4d0:	a809      	add	r0, sp, #36	; 0x24
     4d2:	f008 f847 	bl	8564 <String::String(char const*)>
     4d6:	a901      	add	r1, sp, #4
     4d8:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
     4dc:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     4e0:	f8df 932c 	ldr.w	r9, [pc, #812]	; 810 <initialize_opcode_info()+0x728>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     4e4:	f7ff fdc0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4e8:	a801      	add	r0, sp, #4
     4ea:	f7ff fdef 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     4ee:	4649      	mov	r1, r9
     4f0:	a801      	add	r0, sp, #4
     4f2:	f008 f837 	bl	8564 <String::String(char const*)>
     4f6:	49ba      	ldr	r1, [pc, #744]	; (7e0 <initialize_opcode_info()+0x6f8>)
     4f8:	a805      	add	r0, sp, #20
     4fa:	f008 f833 	bl	8564 <String::String(char const*)>
     4fe:	4639      	mov	r1, r7
     500:	a809      	add	r0, sp, #36	; 0x24
     502:	f008 f82f 	bl	8564 <String::String(char const*)>
     506:	f240 2006 	movw	r0, #518	; 0x206
     50a:	a901      	add	r1, sp, #4
     50c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     510:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     514:	f7ff fda8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     518:	f10d 0e04 	add.w	lr, sp, #4
     51c:	4670      	mov	r0, lr
     51e:	f7ff fdd5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     522:	f10d 0e04 	add.w	lr, sp, #4
     526:	49af      	ldr	r1, [pc, #700]	; (7e4 <initialize_opcode_info()+0x6fc>)
     528:	4670      	mov	r0, lr
     52a:	f008 f81b 	bl	8564 <String::String(char const*)>
     52e:	f10d 0e14 	add.w	lr, sp, #20
     532:	4651      	mov	r1, sl
     534:	4670      	mov	r0, lr
     536:	f008 f815 	bl	8564 <String::String(char const*)>
     53a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     53e:	49aa      	ldr	r1, [pc, #680]	; (7e8 <initialize_opcode_info()+0x700>)
     540:	4670      	mov	r0, lr
     542:	f008 f80f 	bl	8564 <String::String(char const*)>
     546:	a901      	add	r1, sp, #4
     548:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
     54c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     550:	f7ff fd8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     554:	f10d 0e04 	add.w	lr, sp, #4
     558:	4670      	mov	r0, lr
     55a:	f7ff fdb7 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     55e:	f10d 0e04 	add.w	lr, sp, #4
     562:	4649      	mov	r1, r9
     564:	4670      	mov	r0, lr
     566:	f007 fffd 	bl	8564 <String::String(char const*)>
     56a:	f10d 0e14 	add.w	lr, sp, #20
     56e:	4651      	mov	r1, sl
     570:	4670      	mov	r0, lr
     572:	f007 fff7 	bl	8564 <String::String(char const*)>
     576:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     57a:	4639      	mov	r1, r7
     57c:	4670      	mov	r0, lr
     57e:	f007 fff1 	bl	8564 <String::String(char const*)>
     582:	a901      	add	r1, sp, #4
     584:	f205 7084 	addw	r0, r5, #1924	; 0x784
     588:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     58c:	f8df b284 	ldr.w	fp, [pc, #644]	; 814 <initialize_opcode_info()+0x72c>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     590:	f7ff fd6a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     594:	a801      	add	r0, sp, #4
     596:	f7ff fd99 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     59a:	4659      	mov	r1, fp
     59c:	a801      	add	r0, sp, #4
     59e:	f007 ffe1 	bl	8564 <String::String(char const*)>
     5a2:	4651      	mov	r1, sl
     5a4:	a805      	add	r0, sp, #20
     5a6:	f007 ffdd 	bl	8564 <String::String(char const*)>
     5aa:	4631      	mov	r1, r6
     5ac:	a809      	add	r0, sp, #36	; 0x24
     5ae:	f007 ffd9 	bl	8564 <String::String(char const*)>
     5b2:	f240 2e05 	movw	lr, #517	; 0x205
     5b6:	a901      	add	r1, sp, #4
     5b8:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
     5bc:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     5c0:	f7ff fd52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5c4:	a801      	add	r0, sp, #4
     5c6:	f7ff fd81 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     5ca:	4988      	ldr	r1, [pc, #544]	; (7ec <initialize_opcode_info()+0x704>)
     5cc:	a801      	add	r0, sp, #4
     5ce:	f007 ffc9 	bl	8564 <String::String(char const*)>
     5d2:	4621      	mov	r1, r4
     5d4:	a805      	add	r0, sp, #20
     5d6:	f007 ffc5 	bl	8564 <String::String(char const*)>
     5da:	4621      	mov	r1, r4
     5dc:	a809      	add	r0, sp, #36	; 0x24
     5de:	f007 ffc1 	bl	8564 <String::String(char const*)>
     5e2:	f44f 7182 	mov.w	r1, #260	; 0x104
     5e6:	f505 6002 	add.w	r0, r5, #2080	; 0x820
     5ea:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     5ee:	a901      	add	r1, sp, #4
     5f0:	f7ff fd3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5f4:	a801      	add	r0, sp, #4
     5f6:	f7ff fd69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     5fa:	4649      	mov	r1, r9
     5fc:	a801      	add	r0, sp, #4
     5fe:	f007 ffb1 	bl	8564 <String::String(char const*)>
     602:	497b      	ldr	r1, [pc, #492]	; (7f0 <initialize_opcode_info()+0x708>)
     604:	a805      	add	r0, sp, #20
     606:	f007 ffad 	bl	8564 <String::String(char const*)>
     60a:	4639      	mov	r1, r7
     60c:	a809      	add	r0, sp, #36	; 0x24
     60e:	f007 ffa9 	bl	8564 <String::String(char const*)>
     612:	f240 2102 	movw	r1, #514	; 0x202
     616:	f605 0054 	addw	r0, r5, #2132	; 0x854
     61a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     61e:	a901      	add	r1, sp, #4
     620:	f7ff fd22 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     624:	a801      	add	r0, sp, #4
     626:	f7ff fd51 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     62a:	4659      	mov	r1, fp
     62c:	a801      	add	r0, sp, #4
     62e:	f007 ff99 	bl	8564 <String::String(char const*)>
     632:	4b70      	ldr	r3, [pc, #448]	; (7f4 <initialize_opcode_info()+0x70c>)
     634:	a805      	add	r0, sp, #20
     636:	4619      	mov	r1, r3
     638:	f007 ff94 	bl	8564 <String::String(char const*)>
     63c:	4631      	mov	r1, r6
     63e:	a809      	add	r0, sp, #36	; 0x24
     640:	f007 ff90 	bl	8564 <String::String(char const*)>
     644:	f44f 7281 	mov.w	r2, #258	; 0x102
     648:	a901      	add	r1, sp, #4
     64a:	f605 0088 	addw	r0, r5, #2184	; 0x888
     64e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     652:	f7ff fd09 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     656:	a801      	add	r0, sp, #4
     658:	f7ff fd38 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     65c:	4961      	ldr	r1, [pc, #388]	; (7e4 <initialize_opcode_info()+0x6fc>)
     65e:	a801      	add	r0, sp, #4
     660:	f007 ff80 	bl	8564 <String::String(char const*)>
     664:	4641      	mov	r1, r8
     666:	a805      	add	r0, sp, #20
     668:	f007 ff7c 	bl	8564 <String::String(char const*)>
     66c:	495e      	ldr	r1, [pc, #376]	; (7e8 <initialize_opcode_info()+0x700>)
     66e:	a809      	add	r0, sp, #36	; 0x24
     670:	f007 ff78 	bl	8564 <String::String(char const*)>
     674:	f44f 7341 	mov.w	r3, #772	; 0x304
     678:	a901      	add	r1, sp, #4
     67a:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
     67e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     682:	f7ff fcf1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     686:	a801      	add	r0, sp, #4
     688:	f7ff fd20 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     68c:	4649      	mov	r1, r9
     68e:	a801      	add	r0, sp, #4
     690:	f007 ff68 	bl	8564 <String::String(char const*)>
     694:	4641      	mov	r1, r8
     696:	a805      	add	r0, sp, #20
     698:	f007 ff64 	bl	8564 <String::String(char const*)>
     69c:	4639      	mov	r1, r7
     69e:	a809      	add	r0, sp, #36	; 0x24
     6a0:	f007 ff60 	bl	8564 <String::String(char const*)>
     6a4:	f44f 7341 	mov.w	r3, #772	; 0x304
     6a8:	a901      	add	r1, sp, #4
     6aa:	f605 1024 	addw	r0, r5, #2340	; 0x924
     6ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     6b2:	f7ff fcd9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6b6:	a801      	add	r0, sp, #4
     6b8:	f7ff fd08 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     6bc:	4659      	mov	r1, fp
     6be:	a801      	add	r0, sp, #4
     6c0:	f007 ff50 	bl	8564 <String::String(char const*)>
     6c4:	4641      	mov	r1, r8
     6c6:	a805      	add	r0, sp, #20
     6c8:	f007 ff4c 	bl	8564 <String::String(char const*)>
     6cc:	4631      	mov	r1, r6
     6ce:	a809      	add	r0, sp, #36	; 0x24
     6d0:	f007 ff48 	bl	8564 <String::String(char const*)>
     6d4:	f240 3206 	movw	r2, #774	; 0x306
     6d8:	a901      	add	r1, sp, #4
     6da:	f605 1058 	addw	r0, r5, #2392	; 0x958
     6de:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     6e2:	f7ff fcc1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6e6:	a801      	add	r0, sp, #4
     6e8:	f7ff fcf0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     6ec:	4942      	ldr	r1, [pc, #264]	; (7f8 <initialize_opcode_info()+0x710>)
     6ee:	a801      	add	r0, sp, #4
     6f0:	f007 ff38 	bl	8564 <String::String(char const*)>
     6f4:	4941      	ldr	r1, [pc, #260]	; (7fc <initialize_opcode_info()+0x714>)
     6f6:	a805      	add	r0, sp, #20
     6f8:	f007 ff34 	bl	8564 <String::String(char const*)>
     6fc:	4621      	mov	r1, r4
     6fe:	a809      	add	r0, sp, #36	; 0x24
     700:	f007 ff30 	bl	8564 <String::String(char const*)>
     704:	f240 2102 	movw	r1, #514	; 0x202
     708:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
     70c:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     710:	a901      	add	r1, sp, #4
     712:	f7ff fca9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     716:	a801      	add	r0, sp, #4
     718:	f7ff fcd8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     71c:	4649      	mov	r1, r9
     71e:	a801      	add	r0, sp, #4
     720:	f007 ff20 	bl	8564 <String::String(char const*)>
     724:	4936      	ldr	r1, [pc, #216]	; (800 <initialize_opcode_info()+0x718>)
     726:	a805      	add	r0, sp, #20
     728:	f007 ff1c 	bl	8564 <String::String(char const*)>
     72c:	4639      	mov	r1, r7
     72e:	a809      	add	r0, sp, #36	; 0x24
     730:	f007 ff18 	bl	8564 <String::String(char const*)>
     734:	f240 2e05 	movw	lr, #517	; 0x205
     738:	a901      	add	r1, sp, #4
     73a:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
     73e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     742:	f7ff fc91 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     746:	a801      	add	r0, sp, #4
     748:	f7ff fcc0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     74c:	4649      	mov	r1, r9
     74e:	a801      	add	r0, sp, #4
     750:	f007 ff08 	bl	8564 <String::String(char const*)>
     754:	492b      	ldr	r1, [pc, #172]	; (804 <initialize_opcode_info()+0x71c>)
     756:	a805      	add	r0, sp, #20
     758:	f007 ff04 	bl	8564 <String::String(char const*)>
     75c:	4639      	mov	r1, r7
     75e:	a809      	add	r0, sp, #36	; 0x24
     760:	f007 ff00 	bl	8564 <String::String(char const*)>
     764:	f44f 7c01 	mov.w	ip, #516	; 0x204
     768:	a901      	add	r1, sp, #4
     76a:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
     76e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     772:	f7ff fc79 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     776:	a801      	add	r0, sp, #4
     778:	f7ff fca8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     77c:	4659      	mov	r1, fp
     77e:	a801      	add	r0, sp, #4
     780:	f007 fef0 	bl	8564 <String::String(char const*)>
     784:	491f      	ldr	r1, [pc, #124]	; (804 <initialize_opcode_info()+0x71c>)
     786:	a805      	add	r0, sp, #20
     788:	f007 feec 	bl	8564 <String::String(char const*)>
     78c:	4631      	mov	r1, r6
     78e:	a809      	add	r0, sp, #36	; 0x24
     790:	f007 fee8 	bl	8564 <String::String(char const*)>
     794:	f240 2006 	movw	r0, #518	; 0x206
     798:	a901      	add	r1, sp, #4
     79a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     79e:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
     7a2:	f7ff fc61 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7a6:	a801      	add	r0, sp, #4
     7a8:	f7ff fc90 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     7ac:	4916      	ldr	r1, [pc, #88]	; (808 <initialize_opcode_info()+0x720>)
     7ae:	a801      	add	r0, sp, #4
     7b0:	f007 fed8 	bl	8564 <String::String(char const*)>
     7b4:	4621      	mov	r1, r4
     7b6:	a805      	add	r0, sp, #20
     7b8:	f007 fed4 	bl	8564 <String::String(char const*)>
     7bc:	4913      	ldr	r1, [pc, #76]	; (80c <initialize_opcode_info()+0x724>)
     7be:	a809      	add	r0, sp, #36	; 0x24
     7c0:	f007 fed0 	bl	8564 <String::String(char const*)>
     7c4:	f44f 7281 	mov.w	r2, #258	; 0x102
     7c8:	a901      	add	r1, sp, #4
     7ca:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
     7ce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     7d2:	f7ff fc49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7d6:	e01f      	b.n	818 <initialize_opcode_info()+0x730>
     7d8:	200008d8 	.word	0x200008d8
     7dc:	200008e0 	.word	0x200008e0
     7e0:	20000888 	.word	0x20000888
     7e4:	200008e8 	.word	0x200008e8
     7e8:	200008ec 	.word	0x200008ec
     7ec:	200008f4 	.word	0x200008f4
     7f0:	200008a4 	.word	0x200008a4
     7f4:	200008a8 	.word	0x200008a8
     7f8:	200008f8 	.word	0x200008f8
     7fc:	200008b4 	.word	0x200008b4
     800:	200008b8 	.word	0x200008b8
     804:	200008c0 	.word	0x200008c0
     808:	200008fc 	.word	0x200008fc
     80c:	200008cc 	.word	0x200008cc
     810:	200008e4 	.word	0x200008e4
     814:	200008f0 	.word	0x200008f0
     818:	a801      	add	r0, sp, #4
     81a:	f7ff fc57 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     81e:	4649      	mov	r1, r9
     820:	a801      	add	r0, sp, #4
     822:	f007 fe9f 	bl	8564 <String::String(char const*)>
     826:	49cb      	ldr	r1, [pc, #812]	; (b54 <initialize_opcode_info()+0xa6c>)
     828:	a805      	add	r0, sp, #20
     82a:	f007 fe9b 	bl	8564 <String::String(char const*)>
     82e:	4639      	mov	r1, r7
     830:	a809      	add	r0, sp, #36	; 0x24
     832:	f007 fe97 	bl	8564 <String::String(char const*)>
     836:	f44f 7341 	mov.w	r3, #772	; 0x304
     83a:	a901      	add	r1, sp, #4
     83c:	f605 3094 	addw	r0, r5, #2964	; 0xb94
     840:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     844:	f7ff fc10 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     848:	a801      	add	r0, sp, #4
     84a:	f7ff fc3f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     84e:	4649      	mov	r1, r9
     850:	a801      	add	r0, sp, #4
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     852:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     856:	f007 fe85 	bl	8564 <String::String(char const*)>
     85a:	49bf      	ldr	r1, [pc, #764]	; (b58 <initialize_opcode_info()+0xa70>)
     85c:	a805      	add	r0, sp, #20
     85e:	f007 fe81 	bl	8564 <String::String(char const*)>
     862:	4639      	mov	r1, r7
     864:	a809      	add	r0, sp, #36	; 0x24
     866:	f007 fe7d 	bl	8564 <String::String(char const*)>
     86a:	f44f 7341 	mov.w	r3, #772	; 0x304
     86e:	a901      	add	r1, sp, #4
     870:	f605 4064 	addw	r0, r5, #3172	; 0xc64
     874:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     878:	f7ff fbf6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     87c:	a801      	add	r0, sp, #4
     87e:	f7ff fc25 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     882:	4659      	mov	r1, fp
     884:	a801      	add	r0, sp, #4
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     886:	f8df b304 	ldr.w	fp, [pc, #772]	; b8c <initialize_opcode_info()+0xaa4>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     88a:	f007 fe6b 	bl	8564 <String::String(char const*)>
     88e:	49b2      	ldr	r1, [pc, #712]	; (b58 <initialize_opcode_info()+0xa70>)
     890:	a805      	add	r0, sp, #20
     892:	f007 fe67 	bl	8564 <String::String(char const*)>
     896:	4631      	mov	r1, r6
     898:	a809      	add	r0, sp, #36	; 0x24
     89a:	f007 fe63 	bl	8564 <String::String(char const*)>
     89e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     8a2:	f605 4998 	addw	r9, r5, #3224	; 0xc98
     8a6:	a901      	add	r1, sp, #4
     8a8:	4648      	mov	r0, r9
     8aa:	f7ff fbdd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8ae:	a801      	add	r0, sp, #4
     8b0:	f7ff fc0c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     8b4:	49a9      	ldr	r1, [pc, #676]	; (b5c <initialize_opcode_info()+0xa74>)
     8b6:	a801      	add	r0, sp, #4
     8b8:	f007 fe54 	bl	8564 <String::String(char const*)>
     8bc:	4621      	mov	r1, r4
     8be:	a805      	add	r0, sp, #20
     8c0:	f007 fe50 	bl	8564 <String::String(char const*)>
     8c4:	49a6      	ldr	r1, [pc, #664]	; (b60 <initialize_opcode_info()+0xa78>)
     8c6:	a809      	add	r0, sp, #36	; 0x24
     8c8:	f007 fe4c 	bl	8564 <String::String(char const*)>
     8cc:	f44f 7383 	mov.w	r3, #262	; 0x106
     8d0:	a901      	add	r1, sp, #4
     8d2:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
     8d6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     8da:	f7ff fbc5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8de:	a801      	add	r0, sp, #4
     8e0:	f7ff fbf4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     8e4:	4659      	mov	r1, fp
     8e6:	a801      	add	r0, sp, #4
     8e8:	f007 fe3c 	bl	8564 <String::String(char const*)>
     8ec:	499d      	ldr	r1, [pc, #628]	; (b64 <initialize_opcode_info()+0xa7c>)
     8ee:	a805      	add	r0, sp, #20
     8f0:	f007 fe38 	bl	8564 <String::String(char const*)>
     8f4:	4639      	mov	r1, r7
     8f6:	a809      	add	r0, sp, #36	; 0x24
     8f8:	f007 fe34 	bl	8564 <String::String(char const*)>
     8fc:	f240 2006 	movw	r0, #518	; 0x206
     900:	a901      	add	r1, sp, #4
     902:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     906:	f605 5034 	addw	r0, r5, #3380	; 0xd34
     90a:	f7ff fbad 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     90e:	a801      	add	r0, sp, #4
     910:	f7ff fbdc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     914:	4659      	mov	r1, fp
     916:	a801      	add	r0, sp, #4
     918:	f007 fe24 	bl	8564 <String::String(char const*)>
     91c:	4651      	mov	r1, sl
     91e:	a805      	add	r0, sp, #20
     920:	f007 fe20 	bl	8564 <String::String(char const*)>
     924:	4639      	mov	r1, r7
     926:	a809      	add	r0, sp, #36	; 0x24
     928:	f007 fe1c 	bl	8564 <String::String(char const*)>
     92c:	f240 2e03 	movw	lr, #515	; 0x203
     930:	a901      	add	r1, sp, #4
     932:	f605 6004 	addw	r0, r5, #3588	; 0xe04
     936:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     93a:	f7ff fb95 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     93e:	a801      	add	r0, sp, #4
     940:	f7ff fbc4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     944:	4988      	ldr	r1, [pc, #544]	; (b68 <initialize_opcode_info()+0xa80>)
     946:	a801      	add	r0, sp, #4
     948:	f007 fe0c 	bl	8564 <String::String(char const*)>
     94c:	4651      	mov	r1, sl
     94e:	a805      	add	r0, sp, #20
     950:	f007 fe08 	bl	8564 <String::String(char const*)>
     954:	4631      	mov	r1, r6
     956:	a809      	add	r0, sp, #36	; 0x24
     958:	f007 fe04 	bl	8564 <String::String(char const*)>
     95c:	f240 2e05 	movw	lr, #517	; 0x205
     960:	a901      	add	r1, sp, #4
     962:	f605 6038 	addw	r0, r5, #3640	; 0xe38
     966:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     96a:	f7ff fb7d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     96e:	a801      	add	r0, sp, #4
     970:	f7ff fbac 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     974:	497d      	ldr	r1, [pc, #500]	; (b6c <initialize_opcode_info()+0xa84>)
     976:	a801      	add	r0, sp, #4
     978:	f007 fdf4 	bl	8564 <String::String(char const*)>
     97c:	4621      	mov	r1, r4
     97e:	a805      	add	r0, sp, #20
     980:	f007 fdf0 	bl	8564 <String::String(char const*)>
     984:	4621      	mov	r1, r4
     986:	a809      	add	r0, sp, #36	; 0x24
     988:	f007 fdec 	bl	8564 <String::String(char const*)>
     98c:	f240 1203 	movw	r2, #259	; 0x103
     990:	a901      	add	r1, sp, #4
     992:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
     996:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     99a:	f7ff fb65 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     99e:	a801      	add	r0, sp, #4
     9a0:	f7ff fb94 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     9a4:	4659      	mov	r1, fp
     9a6:	a801      	add	r0, sp, #4
     9a8:	f007 fddc 	bl	8564 <String::String(char const*)>
     9ac:	4970      	ldr	r1, [pc, #448]	; (b70 <initialize_opcode_info()+0xa88>)
     9ae:	a805      	add	r0, sp, #20
     9b0:	f007 fdd8 	bl	8564 <String::String(char const*)>
     9b4:	4639      	mov	r1, r7
     9b6:	a809      	add	r0, sp, #36	; 0x24
     9b8:	f007 fdd4 	bl	8564 <String::String(char const*)>
     9bc:	f240 2102 	movw	r1, #514	; 0x202
     9c0:	f605 60d4 	addw	r0, r5, #3796	; 0xed4
     9c4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     9c8:	a901      	add	r1, sp, #4
     9ca:	f7ff fb4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9ce:	a801      	add	r0, sp, #4
     9d0:	f7ff fb7c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     9d4:	4964      	ldr	r1, [pc, #400]	; (b68 <initialize_opcode_info()+0xa80>)
     9d6:	a801      	add	r0, sp, #4
     9d8:	f007 fdc4 	bl	8564 <String::String(char const*)>
     9dc:	4b65      	ldr	r3, [pc, #404]	; (b74 <initialize_opcode_info()+0xa8c>)
     9de:	a805      	add	r0, sp, #20
     9e0:	4619      	mov	r1, r3
     9e2:	f007 fdbf 	bl	8564 <String::String(char const*)>
     9e6:	4631      	mov	r1, r6
     9e8:	a809      	add	r0, sp, #36	; 0x24
     9ea:	f007 fdbb 	bl	8564 <String::String(char const*)>
     9ee:	f44f 7281 	mov.w	r2, #258	; 0x102
     9f2:	a901      	add	r1, sp, #4
     9f4:	f605 7008 	addw	r0, r5, #3848	; 0xf08
     9f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     9fc:	f7ff fb34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a00:	a801      	add	r0, sp, #4
     a02:	f7ff fb63 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     a06:	4a5c      	ldr	r2, [pc, #368]	; (b78 <initialize_opcode_info()+0xa90>)
     a08:	a801      	add	r0, sp, #4
     a0a:	4611      	mov	r1, r2
     a0c:	f007 fdaa 	bl	8564 <String::String(char const*)>
     a10:	4641      	mov	r1, r8
     a12:	a805      	add	r0, sp, #20
     a14:	f007 fda6 	bl	8564 <String::String(char const*)>
     a18:	4621      	mov	r1, r4
     a1a:	a809      	add	r0, sp, #36	; 0x24
     a1c:	f007 fda2 	bl	8564 <String::String(char const*)>
     a20:	f240 3103 	movw	r1, #771	; 0x303
     a24:	f505 6077 	add.w	r0, r5, #3952	; 0xf70
     a28:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     a2c:	a901      	add	r1, sp, #4
     a2e:	f7ff fb1b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a32:	a801      	add	r0, sp, #4
     a34:	f7ff fb4a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     a38:	4659      	mov	r1, fp
     a3a:	a801      	add	r0, sp, #4
     a3c:	f007 fd92 	bl	8564 <String::String(char const*)>
     a40:	4641      	mov	r1, r8
     a42:	a805      	add	r0, sp, #20
     a44:	f007 fd8e 	bl	8564 <String::String(char const*)>
     a48:	4639      	mov	r1, r7
     a4a:	a809      	add	r0, sp, #36	; 0x24
     a4c:	f007 fd8a 	bl	8564 <String::String(char const*)>
     a50:	f44f 7341 	mov.w	r3, #772	; 0x304
     a54:	a901      	add	r1, sp, #4
     a56:	f605 70a4 	addw	r0, r5, #4004	; 0xfa4
     a5a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     a5e:	f7ff fb03 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a62:	a801      	add	r0, sp, #4
     a64:	f7ff fb32 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     a68:	493f      	ldr	r1, [pc, #252]	; (b68 <initialize_opcode_info()+0xa80>)
     a6a:	a801      	add	r0, sp, #4
     a6c:	f007 fd7a 	bl	8564 <String::String(char const*)>
     a70:	4641      	mov	r1, r8
     a72:	a805      	add	r0, sp, #20
     a74:	f007 fd76 	bl	8564 <String::String(char const*)>
     a78:	4631      	mov	r1, r6
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f007 fd72 	bl	8564 <String::String(char const*)>
     a80:	f240 3206 	movw	r2, #774	; 0x306
     a84:	a901      	add	r1, sp, #4
     a86:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
     a8a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     a8e:	f7ff faeb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a92:	a801      	add	r0, sp, #4
     a94:	f7ff fb1a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     a98:	4938      	ldr	r1, [pc, #224]	; (b7c <initialize_opcode_info()+0xa94>)
     a9a:	a801      	add	r0, sp, #4
     a9c:	f007 fd62 	bl	8564 <String::String(char const*)>
     aa0:	4937      	ldr	r1, [pc, #220]	; (b80 <initialize_opcode_info()+0xa98>)
     aa2:	a805      	add	r0, sp, #20
     aa4:	f007 fd5e 	bl	8564 <String::String(char const*)>
     aa8:	4621      	mov	r1, r4
     aaa:	a809      	add	r0, sp, #36	; 0x24
     aac:	f007 fd5a 	bl	8564 <String::String(char const*)>
     ab0:	f240 2102 	movw	r1, #514	; 0x202
     ab4:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
     ab8:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     abc:	a901      	add	r1, sp, #4
     abe:	f7ff fad3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ac2:	a801      	add	r0, sp, #4
     ac4:	f7ff fb02 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     ac8:	4659      	mov	r1, fp
     aca:	a801      	add	r0, sp, #4
     acc:	f007 fd4a 	bl	8564 <String::String(char const*)>
     ad0:	492c      	ldr	r1, [pc, #176]	; (b84 <initialize_opcode_info()+0xa9c>)
     ad2:	a805      	add	r0, sp, #20
     ad4:	f007 fd46 	bl	8564 <String::String(char const*)>
     ad8:	4639      	mov	r1, r7
     ada:	a809      	add	r0, sp, #36	; 0x24
     adc:	f007 fd42 	bl	8564 <String::String(char const*)>
     ae0:	f240 2e05 	movw	lr, #517	; 0x205
     ae4:	a901      	add	r1, sp, #4
     ae6:	f509 7077 	add.w	r0, r9, #988	; 0x3dc
     aea:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     aee:	f7ff fabb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     af2:	a801      	add	r0, sp, #4
     af4:	f7ff faea 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     af8:	4659      	mov	r1, fp
     afa:	a801      	add	r0, sp, #4
     afc:	f007 fd32 	bl	8564 <String::String(char const*)>
     b00:	4921      	ldr	r1, [pc, #132]	; (b88 <initialize_opcode_info()+0xaa0>)
     b02:	a805      	add	r0, sp, #20
     b04:	f007 fd2e 	bl	8564 <String::String(char const*)>
     b08:	4639      	mov	r1, r7
     b0a:	a809      	add	r0, sp, #36	; 0x24
     b0c:	f007 fd2a 	bl	8564 <String::String(char const*)>
     b10:	f44f 7c01 	mov.w	ip, #516	; 0x204
     b14:	a901      	add	r1, sp, #4
     b16:	f209 40ac 	addw	r0, r9, #1196	; 0x4ac
     b1a:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     b1e:	f7ff faa3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b22:	a801      	add	r0, sp, #4
     b24:	f7ff fad2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     b28:	490f      	ldr	r1, [pc, #60]	; (b68 <initialize_opcode_info()+0xa80>)
     b2a:	a801      	add	r0, sp, #4
     b2c:	f007 fd1a 	bl	8564 <String::String(char const*)>
     b30:	4915      	ldr	r1, [pc, #84]	; (b88 <initialize_opcode_info()+0xaa0>)
     b32:	a805      	add	r0, sp, #20
     b34:	f007 fd16 	bl	8564 <String::String(char const*)>
     b38:	4631      	mov	r1, r6
     b3a:	a809      	add	r0, sp, #36	; 0x24
     b3c:	f007 fd12 	bl	8564 <String::String(char const*)>
     b40:	f240 2006 	movw	r0, #518	; 0x206
     b44:	a901      	add	r1, sp, #4
     b46:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     b4a:	f509 609c 	add.w	r0, r9, #1248	; 0x4e0
     b4e:	f7ff fa8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b52:	e01d      	b.n	b90 <initialize_opcode_info()+0xaa8>
     b54:	200008d0 	.word	0x200008d0
     b58:	200008d8 	.word	0x200008d8
     b5c:	20000900 	.word	0x20000900
     b60:	20000904 	.word	0x20000904
     b64:	20000888 	.word	0x20000888
     b68:	20000910 	.word	0x20000910
     b6c:	20000914 	.word	0x20000914
     b70:	200008a4 	.word	0x200008a4
     b74:	200008a8 	.word	0x200008a8
     b78:	20000918 	.word	0x20000918
     b7c:	2000091c 	.word	0x2000091c
     b80:	200008b4 	.word	0x200008b4
     b84:	200008b8 	.word	0x200008b8
     b88:	200008c0 	.word	0x200008c0
     b8c:	2000090c 	.word	0x2000090c
     b90:	a801      	add	r0, sp, #4
     b92:	f7ff fa9b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     b96:	49d1      	ldr	r1, [pc, #836]	; (edc <initialize_opcode_info()+0xdf4>)
     b98:	a801      	add	r0, sp, #4
     b9a:	f007 fce3 	bl	8564 <String::String(char const*)>
     b9e:	4621      	mov	r1, r4
     ba0:	a805      	add	r0, sp, #20
     ba2:	f007 fcdf 	bl	8564 <String::String(char const*)>
     ba6:	49ce      	ldr	r1, [pc, #824]	; (ee0 <initialize_opcode_info()+0xdf8>)
     ba8:	a809      	add	r0, sp, #36	; 0x24
     baa:	f007 fcdb 	bl	8564 <String::String(char const*)>
     bae:	f44f 7281 	mov.w	r2, #258	; 0x102
     bb2:	a901      	add	r1, sp, #4
     bb4:	f505 508f 	add.w	r0, r5, #4576	; 0x11e0
     bb8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     bbc:	f7ff fa54 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bc0:	a801      	add	r0, sp, #4
     bc2:	f7ff fa83 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
     bc6:	4659      	mov	r1, fp
     bc8:	a801      	add	r0, sp, #4
     bca:	f007 fccb 	bl	8564 <String::String(char const*)>
     bce:	49c5      	ldr	r1, [pc, #788]	; (ee4 <initialize_opcode_info()+0xdfc>)
     bd0:	a805      	add	r0, sp, #20
     bd2:	f007 fcc7 	bl	8564 <String::String(char const*)>
     bd6:	4639      	mov	r1, r7
     bd8:	a809      	add	r0, sp, #36	; 0x24
     bda:	f007 fcc3 	bl	8564 <String::String(char const*)>
     bde:	f44f 7341 	mov.w	r3, #772	; 0x304
     be2:	a901      	add	r1, sp, #4
     be4:	f209 507c 	addw	r0, r9, #1404	; 0x57c
     be8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     bec:	f7ff fa3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bf0:	a801      	add	r0, sp, #4
     bf2:	f7ff fa6b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     bf6:	4659      	mov	r1, fp
     bf8:	a801      	add	r0, sp, #4
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
	opcode_info[0x60] = {"RTS","","",6,1};
     bfa:	f44f 7b83 	mov.w	fp, #262	; 0x106
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     bfe:	f007 fcb1 	bl	8564 <String::String(char const*)>
     c02:	49b9      	ldr	r1, [pc, #740]	; (ee8 <initialize_opcode_info()+0xe00>)
     c04:	a805      	add	r0, sp, #20
     c06:	f007 fcad 	bl	8564 <String::String(char const*)>
     c0a:	4639      	mov	r1, r7
     c0c:	af09      	add	r7, sp, #36	; 0x24
     c0e:	4638      	mov	r0, r7
     c10:	af01      	add	r7, sp, #4
     c12:	f007 fca7 	bl	8564 <String::String(char const*)>
     c16:	f44f 7341 	mov.w	r3, #772	; 0x304
     c1a:	4639      	mov	r1, r7
     c1c:	f209 604c 	addw	r0, r9, #1612	; 0x64c
     c20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c24:	f7ff fa20 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c28:	4638      	mov	r0, r7
     c2a:	f7ff fa4f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     c2e:	4638      	mov	r0, r7
     c30:	af05      	add	r7, sp, #20
     c32:	49ae      	ldr	r1, [pc, #696]	; (eec <initialize_opcode_info()+0xe04>)
     c34:	f007 fc96 	bl	8564 <String::String(char const*)>
     c38:	49ab      	ldr	r1, [pc, #684]	; (ee8 <initialize_opcode_info()+0xe00>)
     c3a:	4638      	mov	r0, r7
     c3c:	af09      	add	r7, sp, #36	; 0x24
     c3e:	f007 fc91 	bl	8564 <String::String(char const*)>
     c42:	4631      	mov	r1, r6
     c44:	4638      	mov	r0, r7
     c46:	f240 3707 	movw	r7, #775	; 0x307
     c4a:	f007 fc8b 	bl	8564 <String::String(char const*)>
     c4e:	f509 60d0 	add.w	r0, r9, #1664	; 0x680
     c52:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     c56:	af01      	add	r7, sp, #4
     c58:	4639      	mov	r1, r7
     c5a:	f7ff fa05 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c5e:	4638      	mov	r0, r7
     c60:	f7ff fa34 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
     c64:	4638      	mov	r0, r7
     c66:	af05      	add	r7, sp, #20
     c68:	49a1      	ldr	r1, [pc, #644]	; (ef0 <initialize_opcode_info()+0xe08>)
     c6a:	f007 fc7b 	bl	8564 <String::String(char const*)>
     c6e:	4621      	mov	r1, r4
     c70:	4638      	mov	r0, r7
     c72:	af09      	add	r7, sp, #36	; 0x24
     c74:	f007 fc76 	bl	8564 <String::String(char const*)>
     c78:	4621      	mov	r1, r4
     c7a:	4638      	mov	r0, r7
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c7c:	4f9d      	ldr	r7, [pc, #628]	; (ef4 <initialize_opcode_info()+0xe0c>)
	opcode_info[0x60] = {"RTS","","",6,1};
     c7e:	f007 fc71 	bl	8564 <String::String(char const*)>
     c82:	f505 509c 	add.w	r0, r5, #4992	; 0x1380
     c86:	ad01      	add	r5, sp, #4
     c88:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c8c:	f8df b294 	ldr.w	fp, [pc, #660]	; f24 <initialize_opcode_info()+0xe3c>
	opcode_info[0x60] = {"RTS","","",6,1};
     c90:	4629      	mov	r1, r5
     c92:	f7ff f9e9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c96:	4628      	mov	r0, r5
     c98:	f7ff fa18 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c9c:	4628      	mov	r0, r5
     c9e:	ad05      	add	r5, sp, #20
     ca0:	4659      	mov	r1, fp
     ca2:	f007 fc5f 	bl	8564 <String::String(char const*)>
     ca6:	4994      	ldr	r1, [pc, #592]	; (ef8 <initialize_opcode_info()+0xe10>)
     ca8:	4628      	mov	r0, r5
     caa:	ad09      	add	r5, sp, #36	; 0x24
     cac:	f007 fc5a 	bl	8564 <String::String(char const*)>
     cb0:	4639      	mov	r1, r7
     cb2:	4628      	mov	r0, r5
     cb4:	ad01      	add	r5, sp, #4
     cb6:	f007 fc55 	bl	8564 <String::String(char const*)>
     cba:	f240 2006 	movw	r0, #518	; 0x206
     cbe:	4629      	mov	r1, r5
     cc0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     cc4:	f209 701c 	addw	r0, r9, #1820	; 0x71c
     cc8:	f7ff f9ce 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ccc:	4628      	mov	r0, r5
     cce:	f7ff f9fd 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
     cd2:	4628      	mov	r0, r5
     cd4:	ad05      	add	r5, sp, #20
     cd6:	4659      	mov	r1, fp
     cd8:	f007 fc44 	bl	8564 <String::String(char const*)>
     cdc:	4651      	mov	r1, sl
     cde:	4628      	mov	r0, r5
     ce0:	ad09      	add	r5, sp, #36	; 0x24
     ce2:	f007 fc3f 	bl	8564 <String::String(char const*)>
     ce6:	4639      	mov	r1, r7
     ce8:	4628      	mov	r0, r5
     cea:	ad01      	add	r5, sp, #4
     cec:	f007 fc3a 	bl	8564 <String::String(char const*)>
     cf0:	f240 2e03 	movw	lr, #515	; 0x203
     cf4:	4629      	mov	r1, r5
     cf6:	f209 70ec 	addw	r0, r9, #2028	; 0x7ec
     cfa:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     cfe:	f7ff f9b3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d02:	4628      	mov	r0, r5
     d04:	f7ff f9e2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d08:	497c      	ldr	r1, [pc, #496]	; (efc <initialize_opcode_info()+0xe14>)
     d0a:	4628      	mov	r0, r5
     d0c:	f240 2505 	movw	r5, #517	; 0x205
     d10:	f007 fc28 	bl	8564 <String::String(char const*)>
     d14:	4651      	mov	r1, sl
     d16:	f10d 0a14 	add.w	sl, sp, #20
     d1a:	4650      	mov	r0, sl
     d1c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     d20:	f007 fc20 	bl	8564 <String::String(char const*)>
     d24:	4631      	mov	r1, r6
     d26:	4650      	mov	r0, sl
     d28:	f10d 0a04 	add.w	sl, sp, #4
     d2c:	f007 fc1a 	bl	8564 <String::String(char const*)>
     d30:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     d34:	f509 6502 	add.w	r5, r9, #2080	; 0x820
     d38:	4651      	mov	r1, sl
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
	opcode_info[0x78] = {"SEI","","I",2,1};
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
     d3a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; f28 <initialize_opcode_info()+0xe40>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d3e:	4628      	mov	r0, r5
     d40:	f7ff f992 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d44:	a801      	add	r0, sp, #4
     d46:	f7ff f9c1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
     d4a:	496d      	ldr	r1, [pc, #436]	; (f00 <initialize_opcode_info()+0xe18>)
     d4c:	a801      	add	r0, sp, #4
     d4e:	f007 fc09 	bl	8564 <String::String(char const*)>
     d52:	4621      	mov	r1, r4
     d54:	a805      	add	r0, sp, #20
     d56:	f007 fc05 	bl	8564 <String::String(char const*)>
     d5a:	4621      	mov	r1, r4
     d5c:	a809      	add	r0, sp, #36	; 0x24
     d5e:	f007 fc01 	bl	8564 <String::String(char const*)>
     d62:	f44f 7182 	mov.w	r1, #260	; 0x104
     d66:	f609 0088 	addw	r0, r9, #2184	; 0x888
     d6a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d6e:	a901      	add	r1, sp, #4
     d70:	f7ff f97a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d74:	a801      	add	r0, sp, #4
     d76:	f7ff f9a9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
     d7a:	4659      	mov	r1, fp
     d7c:	a801      	add	r0, sp, #4
     d7e:	f007 fbf1 	bl	8564 <String::String(char const*)>
     d82:	4960      	ldr	r1, [pc, #384]	; (f04 <initialize_opcode_info()+0xe1c>)
     d84:	a805      	add	r0, sp, #20
     d86:	f007 fbed 	bl	8564 <String::String(char const*)>
     d8a:	4639      	mov	r1, r7
     d8c:	a809      	add	r0, sp, #36	; 0x24
     d8e:	f007 fbe9 	bl	8564 <String::String(char const*)>
     d92:	f240 2102 	movw	r1, #514	; 0x202
     d96:	f609 00bc 	addw	r0, r9, #2236	; 0x8bc
     d9a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d9e:	a901      	add	r1, sp, #4
     da0:	f7ff f962 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     da4:	a801      	add	r0, sp, #4
     da6:	f7ff f991 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
     daa:	4954      	ldr	r1, [pc, #336]	; (efc <initialize_opcode_info()+0xe14>)
     dac:	a801      	add	r0, sp, #4
     dae:	f007 fbd9 	bl	8564 <String::String(char const*)>
     db2:	4b55      	ldr	r3, [pc, #340]	; (f08 <initialize_opcode_info()+0xe20>)
     db4:	a805      	add	r0, sp, #20
     db6:	4619      	mov	r1, r3
     db8:	f007 fbd4 	bl	8564 <String::String(char const*)>
     dbc:	4631      	mov	r1, r6
     dbe:	a809      	add	r0, sp, #36	; 0x24
     dc0:	f007 fbd0 	bl	8564 <String::String(char const*)>
     dc4:	f44f 7281 	mov.w	r2, #258	; 0x102
     dc8:	a901      	add	r1, sp, #4
     dca:	f509 600f 	add.w	r0, r9, #2288	; 0x8f0
     dce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     dd2:	f7ff f949 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dd6:	a801      	add	r0, sp, #4
     dd8:	f7ff f978 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
     ddc:	4a4b      	ldr	r2, [pc, #300]	; (f0c <initialize_opcode_info()+0xe24>)
     dde:	a801      	add	r0, sp, #4
     de0:	4611      	mov	r1, r2
     de2:	f007 fbbf 	bl	8564 <String::String(char const*)>
     de6:	494a      	ldr	r1, [pc, #296]	; (f10 <initialize_opcode_info()+0xe28>)
     de8:	a805      	add	r0, sp, #20
     dea:	f007 fbbb 	bl	8564 <String::String(char const*)>
     dee:	4621      	mov	r1, r4
     df0:	a809      	add	r0, sp, #36	; 0x24
     df2:	f007 fbb7 	bl	8564 <String::String(char const*)>
     df6:	f240 3305 	movw	r3, #773	; 0x305
     dfa:	a901      	add	r1, sp, #4
     dfc:	f609 1058 	addw	r0, r9, #2392	; 0x958
     e00:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e04:	f7ff f930 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e08:	a801      	add	r0, sp, #4
     e0a:	f7ff f95f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
     e0e:	4659      	mov	r1, fp
     e10:	a801      	add	r0, sp, #4
     e12:	f007 fba7 	bl	8564 <String::String(char const*)>
     e16:	4641      	mov	r1, r8
     e18:	a805      	add	r0, sp, #20
     e1a:	f007 fba3 	bl	8564 <String::String(char const*)>
     e1e:	4639      	mov	r1, r7
     e20:	a809      	add	r0, sp, #36	; 0x24
     e22:	f007 fb9f 	bl	8564 <String::String(char const*)>
     e26:	f44f 7341 	mov.w	r3, #772	; 0x304
     e2a:	a901      	add	r1, sp, #4
     e2c:	f609 108c 	addw	r0, r9, #2444	; 0x98c
     e30:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e34:	f7ff f918 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e38:	a801      	add	r0, sp, #4
     e3a:	f7ff f947 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
     e3e:	492f      	ldr	r1, [pc, #188]	; (efc <initialize_opcode_info()+0xe14>)
     e40:	a801      	add	r0, sp, #4
     e42:	f007 fb8f 	bl	8564 <String::String(char const*)>
     e46:	4641      	mov	r1, r8
     e48:	a805      	add	r0, sp, #20
     e4a:	f007 fb8b 	bl	8564 <String::String(char const*)>
     e4e:	4631      	mov	r1, r6
     e50:	a809      	add	r0, sp, #36	; 0x24
     e52:	f007 fb87 	bl	8564 <String::String(char const*)>
     e56:	f240 3206 	movw	r2, #774	; 0x306
     e5a:	a901      	add	r1, sp, #4
     e5c:	f509 601c 	add.w	r0, r9, #2496	; 0x9c0
     e60:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     e64:	f7ff f900 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e68:	a801      	add	r0, sp, #4
     e6a:	f7ff f92f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
     e6e:	4929      	ldr	r1, [pc, #164]	; (f14 <initialize_opcode_info()+0xe2c>)
     e70:	a801      	add	r0, sp, #4
     e72:	f007 fb77 	bl	8564 <String::String(char const*)>
     e76:	4928      	ldr	r1, [pc, #160]	; (f18 <initialize_opcode_info()+0xe30>)
     e78:	a805      	add	r0, sp, #20
     e7a:	f007 fb73 	bl	8564 <String::String(char const*)>
     e7e:	4621      	mov	r1, r4
     e80:	a809      	add	r0, sp, #36	; 0x24
     e82:	f007 fb6f 	bl	8564 <String::String(char const*)>
     e86:	f44f 7c01 	mov.w	ip, #516	; 0x204
     e8a:	a901      	add	r1, sp, #4
     e8c:	f609 2028 	addw	r0, r9, #2600	; 0xa28
     e90:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     e94:	f7ff f8e8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e98:	a801      	add	r0, sp, #4
     e9a:	f7ff f917 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
     e9e:	4659      	mov	r1, fp
     ea0:	a801      	add	r0, sp, #4
     ea2:	f007 fb5f 	bl	8564 <String::String(char const*)>
     ea6:	491d      	ldr	r1, [pc, #116]	; (f1c <initialize_opcode_info()+0xe34>)
     ea8:	a805      	add	r0, sp, #20
     eaa:	f007 fb5b 	bl	8564 <String::String(char const*)>
     eae:	4639      	mov	r1, r7
     eb0:	a809      	add	r0, sp, #36	; 0x24
     eb2:	f007 fb57 	bl	8564 <String::String(char const*)>
     eb6:	f44f 7c01 	mov.w	ip, #516	; 0x204
     eba:	a901      	add	r1, sp, #4
     ebc:	f609 205c 	addw	r0, r9, #2652	; 0xa5c
     ec0:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     ec4:	f7ff f8d0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ec8:	a801      	add	r0, sp, #4
     eca:	f7ff f8ff 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
     ece:	4659      	mov	r1, fp
     ed0:	a801      	add	r0, sp, #4
     ed2:	f007 fb47 	bl	8564 <String::String(char const*)>
     ed6:	4912      	ldr	r1, [pc, #72]	; (f20 <initialize_opcode_info()+0xe38>)
     ed8:	a805      	add	r0, sp, #20
     eda:	e027      	b.n	f2c <initialize_opcode_info()+0xe44>
     edc:	20000920 	.word	0x20000920
     ee0:	20000924 	.word	0x20000924
     ee4:	200008d0 	.word	0x200008d0
     ee8:	200008d8 	.word	0x200008d8
     eec:	20000910 	.word	0x20000910
     ef0:	20000928 	.word	0x20000928
     ef4:	20000930 	.word	0x20000930
     ef8:	20000888 	.word	0x20000888
     efc:	20000938 	.word	0x20000938
     f00:	2000093c 	.word	0x2000093c
     f04:	200008a4 	.word	0x200008a4
     f08:	200008a8 	.word	0x200008a8
     f0c:	20000918 	.word	0x20000918
     f10:	20000940 	.word	0x20000940
     f14:	20000948 	.word	0x20000948
     f18:	200008b4 	.word	0x200008b4
     f1c:	200008b8 	.word	0x200008b8
     f20:	200008c0 	.word	0x200008c0
     f24:	2000092c 	.word	0x2000092c
     f28:	20000950 	.word	0x20000950
     f2c:	f007 fb1a 	bl	8564 <String::String(char const*)>
     f30:	4639      	mov	r1, r7
     f32:	a809      	add	r0, sp, #36	; 0x24
     f34:	f007 fb16 	bl	8564 <String::String(char const*)>
     f38:	f44f 7c01 	mov.w	ip, #516	; 0x204
     f3c:	a901      	add	r1, sp, #4
     f3e:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
     f42:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     f46:	f7ff f88f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f4a:	a801      	add	r0, sp, #4
     f4c:	f7ff f8be 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
     f50:	49cb      	ldr	r1, [pc, #812]	; (1280 <initialize_opcode_info()+0x1198>)
     f52:	a801      	add	r0, sp, #4
     f54:	f007 fb06 	bl	8564 <String::String(char const*)>
     f58:	49ca      	ldr	r1, [pc, #808]	; (1284 <initialize_opcode_info()+0x119c>)
     f5a:	a805      	add	r0, sp, #20
     f5c:	f007 fb02 	bl	8564 <String::String(char const*)>
     f60:	4631      	mov	r1, r6
     f62:	a809      	add	r0, sp, #36	; 0x24
     f64:	f007 fafe 	bl	8564 <String::String(char const*)>
     f68:	f240 2006 	movw	r0, #518	; 0x206
     f6c:	a901      	add	r1, sp, #4
     f6e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     f72:	f509 6036 	add.w	r0, r9, #2912	; 0xb60
     f76:	f7ff f877 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f7a:	a801      	add	r0, sp, #4
     f7c:	f7ff f8a6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
     f80:	49c1      	ldr	r1, [pc, #772]	; (1288 <initialize_opcode_info()+0x11a0>)
     f82:	a801      	add	r0, sp, #4
     f84:	f007 faee 	bl	8564 <String::String(char const*)>
     f88:	4621      	mov	r1, r4
     f8a:	a805      	add	r0, sp, #20
     f8c:	f007 faea 	bl	8564 <String::String(char const*)>
     f90:	49be      	ldr	r1, [pc, #760]	; (128c <initialize_opcode_info()+0x11a4>)
     f92:	a809      	add	r0, sp, #36	; 0x24
     f94:	f007 fae6 	bl	8564 <String::String(char const*)>
     f98:	f44f 7281 	mov.w	r2, #258	; 0x102
     f9c:	a901      	add	r1, sp, #4
     f9e:	f609 30c8 	addw	r0, r9, #3016	; 0xbc8
     fa2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     fa6:	f7ff f85f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     faa:	a801      	add	r0, sp, #4
     fac:	f7ff f88e 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
     fb0:	4659      	mov	r1, fp
     fb2:	a801      	add	r0, sp, #4
     fb4:	f007 fad6 	bl	8564 <String::String(char const*)>
     fb8:	49b5      	ldr	r1, [pc, #724]	; (1290 <initialize_opcode_info()+0x11a8>)
     fba:	a805      	add	r0, sp, #20
     fbc:	f007 fad2 	bl	8564 <String::String(char const*)>
     fc0:	4639      	mov	r1, r7
     fc2:	a809      	add	r0, sp, #36	; 0x24
     fc4:	f007 face 	bl	8564 <String::String(char const*)>
     fc8:	f44f 7341 	mov.w	r3, #772	; 0x304
     fcc:	a901      	add	r1, sp, #4
     fce:	f609 30fc 	addw	r0, r9, #3068	; 0xbfc
     fd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     fd6:	f7ff f847 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fda:	a801      	add	r0, sp, #4
     fdc:	f7ff f876 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     fe0:	4659      	mov	r1, fp
     fe2:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
     fe4:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 12b8 <initialize_opcode_info()+0x11d0>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     fe8:	f007 fabc 	bl	8564 <String::String(char const*)>
     fec:	49a9      	ldr	r1, [pc, #676]	; (1294 <initialize_opcode_info()+0x11ac>)
     fee:	a805      	add	r0, sp, #20
     ff0:	f007 fab8 	bl	8564 <String::String(char const*)>
     ff4:	4639      	mov	r1, r7
     ff6:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x84] = {"STY","zpg","",3,2};
     ff8:	f240 2703 	movw	r7, #515	; 0x203
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     ffc:	f007 fab2 	bl	8564 <String::String(char const*)>
    1000:	f44f 7341 	mov.w	r3, #772	; 0x304
    1004:	a901      	add	r1, sp, #4
    1006:	f609 40cc 	addw	r0, r9, #3276	; 0xccc
    100a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    100e:	f7ff f82b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1012:	a801      	add	r0, sp, #4
	opcode_info[0x85] = {"STA","zpg","",3,2};
	opcode_info[0x86] = {"STX","zpg","",3,2};
    1014:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 12bc <initialize_opcode_info()+0x11d4>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1018:	f7ff f858 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    101c:	4998      	ldr	r1, [pc, #608]	; (1280 <initialize_opcode_info()+0x1198>)
    101e:	a801      	add	r0, sp, #4
    1020:	f007 faa0 	bl	8564 <String::String(char const*)>
    1024:	499b      	ldr	r1, [pc, #620]	; (1294 <initialize_opcode_info()+0x11ac>)
    1026:	a805      	add	r0, sp, #20
    1028:	f007 fa9c 	bl	8564 <String::String(char const*)>
    102c:	4631      	mov	r1, r6
    102e:	a809      	add	r0, sp, #36	; 0x24
    1030:	f007 fa98 	bl	8564 <String::String(char const*)>
    1034:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1038:	f240 3307 	movw	r3, #775	; 0x307
    103c:	a901      	add	r1, sp, #4
    103e:	4610      	mov	r0, r2
    1040:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1044:	f7ff f810 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1048:	a801      	add	r0, sp, #4
    104a:	f7ff f83f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    104e:	4651      	mov	r1, sl
    1050:	a801      	add	r0, sp, #4
    1052:	f007 fa87 	bl	8564 <String::String(char const*)>
    1056:	4990      	ldr	r1, [pc, #576]	; (1298 <initialize_opcode_info()+0x11b0>)
    1058:	a805      	add	r0, sp, #20
    105a:	f007 fa83 	bl	8564 <String::String(char const*)>
    105e:	4621      	mov	r1, r4
    1060:	a809      	add	r0, sp, #36	; 0x24
    1062:	f007 fa7f 	bl	8564 <String::String(char const*)>
    1066:	f240 2006 	movw	r0, #518	; 0x206
    106a:	a901      	add	r1, sp, #4
    106c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1070:	f205 507c 	addw	r0, r5, #1404	; 0x57c
    1074:	f7fe fff8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1078:	a801      	add	r0, sp, #4
    107a:	f7ff f827 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    107e:	4659      	mov	r1, fp
    1080:	a801      	add	r0, sp, #4
    1082:	f007 fa6f 	bl	8564 <String::String(char const*)>
    1086:	4985      	ldr	r1, [pc, #532]	; (129c <initialize_opcode_info()+0x11b4>)
    1088:	a805      	add	r0, sp, #20
    108a:	f007 fa6b 	bl	8564 <String::String(char const*)>
    108e:	4621      	mov	r1, r4
    1090:	a809      	add	r0, sp, #36	; 0x24
    1092:	f007 fa67 	bl	8564 <String::String(char const*)>
    1096:	a901      	add	r1, sp, #4
    1098:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    109c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10a0:	f7fe ffe2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10a4:	a801      	add	r0, sp, #4
    10a6:	f7ff f811 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    10aa:	4651      	mov	r1, sl
    10ac:	a801      	add	r0, sp, #4
    10ae:	f007 fa59 	bl	8564 <String::String(char const*)>
    10b2:	497a      	ldr	r1, [pc, #488]	; (129c <initialize_opcode_info()+0x11b4>)
    10b4:	a805      	add	r0, sp, #20
    10b6:	f007 fa55 	bl	8564 <String::String(char const*)>
    10ba:	4621      	mov	r1, r4
    10bc:	a809      	add	r0, sp, #36	; 0x24
    10be:	f007 fa51 	bl	8564 <String::String(char const*)>
    10c2:	a901      	add	r1, sp, #4
    10c4:	f205 604c 	addw	r0, r5, #1612	; 0x64c
    10c8:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10cc:	f7fe ffcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10d0:	a801      	add	r0, sp, #4
    10d2:	f7fe fffb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    10d6:	4649      	mov	r1, r9
    10d8:	a801      	add	r0, sp, #4
    10da:	f007 fa43 	bl	8564 <String::String(char const*)>
    10de:	496f      	ldr	r1, [pc, #444]	; (129c <initialize_opcode_info()+0x11b4>)
    10e0:	a805      	add	r0, sp, #20
    10e2:	f007 fa3f 	bl	8564 <String::String(char const*)>
    10e6:	4621      	mov	r1, r4
    10e8:	a809      	add	r0, sp, #36	; 0x24
    10ea:	f007 fa3b 	bl	8564 <String::String(char const*)>
    10ee:	a901      	add	r1, sp, #4
    10f0:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    10f4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10f8:	f7fe ffb6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10fc:	a801      	add	r0, sp, #4
    10fe:	f7fe ffe5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    1102:	4f67      	ldr	r7, [pc, #412]	; (12a0 <initialize_opcode_info()+0x11b8>)
    1104:	4967      	ldr	r1, [pc, #412]	; (12a4 <initialize_opcode_info()+0x11bc>)
    1106:	a801      	add	r0, sp, #4
    1108:	f007 fa2c 	bl	8564 <String::String(char const*)>
    110c:	4621      	mov	r1, r4
    110e:	a805      	add	r0, sp, #20
    1110:	f007 fa28 	bl	8564 <String::String(char const*)>
    1114:	4639      	mov	r1, r7
    1116:	a809      	add	r0, sp, #36	; 0x24
    1118:	f007 fa24 	bl	8564 <String::String(char const*)>
    111c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1120:	a901      	add	r1, sp, #4
    1122:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
    1126:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    112a:	f7fe ff9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    112e:	a801      	add	r0, sp, #4
    1130:	f7fe ffcc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    1134:	495c      	ldr	r1, [pc, #368]	; (12a8 <initialize_opcode_info()+0x11c0>)
    1136:	a801      	add	r0, sp, #4
    1138:	f007 fa14 	bl	8564 <String::String(char const*)>
    113c:	4621      	mov	r1, r4
    113e:	a805      	add	r0, sp, #20
    1140:	f007 fa10 	bl	8564 <String::String(char const*)>
    1144:	4639      	mov	r1, r7
    1146:	a809      	add	r0, sp, #36	; 0x24
    1148:	f007 fa0c 	bl	8564 <String::String(char const*)>
    114c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1150:	a901      	add	r1, sp, #4
    1152:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
    1156:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    115a:	f7fe ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    115e:	a801      	add	r0, sp, #4
    1160:	f7fe ffb4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    1164:	4659      	mov	r1, fp
    1166:	a801      	add	r0, sp, #4
    1168:	f007 f9fc 	bl	8564 <String::String(char const*)>
    116c:	4641      	mov	r1, r8
    116e:	a805      	add	r0, sp, #20
    1170:	f007 f9f8 	bl	8564 <String::String(char const*)>
    1174:	4621      	mov	r1, r4
    1176:	a809      	add	r0, sp, #36	; 0x24
    1178:	f007 f9f4 	bl	8564 <String::String(char const*)>
    117c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1180:	a901      	add	r1, sp, #4
    1182:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1186:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    118a:	f7fe ff6d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    118e:	a801      	add	r0, sp, #4
    1190:	f7fe ff9c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1194:	4651      	mov	r1, sl
    1196:	a801      	add	r0, sp, #4
    1198:	f007 f9e4 	bl	8564 <String::String(char const*)>
    119c:	4641      	mov	r1, r8
    119e:	a805      	add	r0, sp, #20
    11a0:	f007 f9e0 	bl	8564 <String::String(char const*)>
    11a4:	4621      	mov	r1, r4
    11a6:	a809      	add	r0, sp, #36	; 0x24
    11a8:	f007 f9dc 	bl	8564 <String::String(char const*)>
    11ac:	f44f 7341 	mov.w	r3, #772	; 0x304
    11b0:	a901      	add	r1, sp, #4
    11b2:	f205 70ec 	addw	r0, r5, #2028	; 0x7ec
    11b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11ba:	f7fe ff55 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11be:	a801      	add	r0, sp, #4
    11c0:	f7fe ff84 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    11c4:	4649      	mov	r1, r9
    11c6:	a801      	add	r0, sp, #4
    11c8:	f007 f9cc 	bl	8564 <String::String(char const*)>
    11cc:	4641      	mov	r1, r8
    11ce:	a805      	add	r0, sp, #20
    11d0:	f007 f9c8 	bl	8564 <String::String(char const*)>
    11d4:	4621      	mov	r1, r4
    11d6:	a809      	add	r0, sp, #36	; 0x24
    11d8:	f007 f9c4 	bl	8564 <String::String(char const*)>
    11dc:	f44f 7341 	mov.w	r3, #772	; 0x304
    11e0:	a901      	add	r1, sp, #4
    11e2:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    11e6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11ea:	f7fe ff3d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11ee:	a801      	add	r0, sp, #4
    11f0:	f7fe ff6c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    11f4:	492d      	ldr	r1, [pc, #180]	; (12ac <initialize_opcode_info()+0x11c4>)
    11f6:	a801      	add	r0, sp, #4
    11f8:	f007 f9b4 	bl	8564 <String::String(char const*)>
    11fc:	492c      	ldr	r1, [pc, #176]	; (12b0 <initialize_opcode_info()+0x11c8>)
    11fe:	a805      	add	r0, sp, #20
    1200:	f007 f9b0 	bl	8564 <String::String(char const*)>
    1204:	4621      	mov	r1, r4
    1206:	a809      	add	r0, sp, #36	; 0x24
    1208:	f007 f9ac 	bl	8564 <String::String(char const*)>
    120c:	f240 2102 	movw	r1, #514	; 0x202
    1210:	f605 0088 	addw	r0, r5, #2184	; 0x888
    1214:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1218:	a901      	add	r1, sp, #4
    121a:	f7fe ff25 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    121e:	a801      	add	r0, sp, #4
    1220:	f7fe ff54 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    1224:	4651      	mov	r1, sl
    1226:	a801      	add	r0, sp, #4
    1228:	f007 f99c 	bl	8564 <String::String(char const*)>
    122c:	4921      	ldr	r1, [pc, #132]	; (12b4 <initialize_opcode_info()+0x11cc>)
    122e:	a805      	add	r0, sp, #20
    1230:	f007 f998 	bl	8564 <String::String(char const*)>
    1234:	4621      	mov	r1, r4
    1236:	a809      	add	r0, sp, #36	; 0x24
    1238:	f007 f994 	bl	8564 <String::String(char const*)>
    123c:	f240 2006 	movw	r0, #518	; 0x206
    1240:	a901      	add	r1, sp, #4
    1242:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1246:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
    124a:	f7fe ff0d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    124e:	a801      	add	r0, sp, #4
    1250:	f7fe ff3c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    1254:	4659      	mov	r1, fp
    1256:	a801      	add	r0, sp, #4
    1258:	f44f 7b01 	mov.w	fp, #516	; 0x204
    125c:	f007 f982 	bl	8564 <String::String(char const*)>
    1260:	4908      	ldr	r1, [pc, #32]	; (1284 <initialize_opcode_info()+0x119c>)
    1262:	a805      	add	r0, sp, #20
    1264:	f007 f97e 	bl	8564 <String::String(char const*)>
    1268:	4621      	mov	r1, r4
    126a:	a809      	add	r0, sp, #36	; 0x24
    126c:	f007 f97a 	bl	8564 <String::String(char const*)>
    1270:	f10d 0c04 	add.w	ip, sp, #4
    1274:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1278:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    127c:	e020      	b.n	12c0 <initialize_opcode_info()+0x11d8>
    127e:	bf00      	nop
    1280:	20000938 	.word	0x20000938
    1284:	200008c0 	.word	0x200008c0
    1288:	2000094c 	.word	0x2000094c
    128c:	20000924 	.word	0x20000924
    1290:	200008d0 	.word	0x200008d0
    1294:	200008d8 	.word	0x200008d8
    1298:	20000888 	.word	0x20000888
    129c:	20000894 	.word	0x20000894
    12a0:	20000890 	.word	0x20000890
    12a4:	2000095c 	.word	0x2000095c
    12a8:	20000960 	.word	0x20000960
    12ac:	20000964 	.word	0x20000964
    12b0:	200008b4 	.word	0x200008b4
    12b4:	200008b8 	.word	0x200008b8
    12b8:	20000954 	.word	0x20000954
    12bc:	20000958 	.word	0x20000958
    12c0:	4661      	mov	r1, ip
    12c2:	f7fe fed1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12c6:	f10d 0c04 	add.w	ip, sp, #4
    12ca:	4660      	mov	r0, ip
    12cc:	f7fe fefe 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    12d0:	f10d 0c04 	add.w	ip, sp, #4
    12d4:	4651      	mov	r1, sl
    12d6:	4660      	mov	r0, ip
    12d8:	f007 f944 	bl	8564 <String::String(char const*)>
    12dc:	f10d 0c14 	add.w	ip, sp, #20
    12e0:	49d7      	ldr	r1, [pc, #860]	; (1640 <initialize_opcode_info()+0x1558>)
    12e2:	4660      	mov	r0, ip
    12e4:	f007 f93e 	bl	8564 <String::String(char const*)>
    12e8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    12ec:	4621      	mov	r1, r4
    12ee:	4660      	mov	r0, ip
    12f0:	f007 f938 	bl	8564 <String::String(char const*)>
    12f4:	f10d 0c04 	add.w	ip, sp, #4
    12f8:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    12fc:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1300:	4661      	mov	r1, ip
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
	opcode_info[0x98] = {"TYA","","SZ",2,1};
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
	opcode_info[0x9a] = {"TXS","","",2,1};
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1302:	f8df b368 	ldr.w	fp, [pc, #872]	; 166c <initialize_opcode_info()+0x1584>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    1306:	f7fe feaf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    130a:	f10d 0c04 	add.w	ip, sp, #4
    130e:	4660      	mov	r0, ip
    1310:	f7fe fedc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    1314:	f10d 0c04 	add.w	ip, sp, #4
    1318:	4649      	mov	r1, r9
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    131a:	f44f 7981 	mov.w	r9, #258	; 0x102
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    131e:	4660      	mov	r0, ip
    1320:	f007 f920 	bl	8564 <String::String(char const*)>
    1324:	4bc7      	ldr	r3, [pc, #796]	; (1644 <initialize_opcode_info()+0x155c>)
    1326:	f10d 0c14 	add.w	ip, sp, #20
    132a:	4619      	mov	r1, r3
    132c:	4660      	mov	r0, ip
    132e:	f007 f919 	bl	8564 <String::String(char const*)>
    1332:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    1336:	4621      	mov	r1, r4
    1338:	4660      	mov	r0, ip
    133a:	f007 f913 	bl	8564 <String::String(char const*)>
    133e:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1342:	a901      	add	r1, sp, #4
    1344:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1348:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    134c:	f7fe fe8c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1350:	a801      	add	r0, sp, #4
    1352:	f7fe febb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    1356:	49bc      	ldr	r1, [pc, #752]	; (1648 <initialize_opcode_info()+0x1560>)
    1358:	a801      	add	r0, sp, #4
    135a:	f007 f903 	bl	8564 <String::String(char const*)>
    135e:	4621      	mov	r1, r4
    1360:	a805      	add	r0, sp, #20
    1362:	f007 f8ff 	bl	8564 <String::String(char const*)>
    1366:	4639      	mov	r1, r7
    1368:	a809      	add	r0, sp, #36	; 0x24
    136a:	f007 f8fb 	bl	8564 <String::String(char const*)>
    136e:	a901      	add	r1, sp, #4
    1370:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1374:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1378:	f7fe fe76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    137c:	a801      	add	r0, sp, #4
    137e:	f7fe fea5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    1382:	4651      	mov	r1, sl
    1384:	a801      	add	r0, sp, #4
    1386:	f007 f8ed 	bl	8564 <String::String(char const*)>
    138a:	49b0      	ldr	r1, [pc, #704]	; (164c <initialize_opcode_info()+0x1564>)
    138c:	a805      	add	r0, sp, #20
    138e:	f007 f8e9 	bl	8564 <String::String(char const*)>
    1392:	4621      	mov	r1, r4
    1394:	a809      	add	r0, sp, #36	; 0x24
    1396:	f007 f8e5 	bl	8564 <String::String(char const*)>
    139a:	f240 3305 	movw	r3, #773	; 0x305
    139e:	a901      	add	r1, sp, #4
    13a0:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
    13a4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    13a8:	f7fe fe5e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13ac:	a801      	add	r0, sp, #4
    13ae:	f7fe fe8d 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    13b2:	49a7      	ldr	r1, [pc, #668]	; (1650 <initialize_opcode_info()+0x1568>)
    13b4:	a801      	add	r0, sp, #4
    13b6:	f007 f8d5 	bl	8564 <String::String(char const*)>
    13ba:	4621      	mov	r1, r4
    13bc:	a805      	add	r0, sp, #20
    13be:	f007 f8d1 	bl	8564 <String::String(char const*)>
    13c2:	4621      	mov	r1, r4
    13c4:	a809      	add	r0, sp, #36	; 0x24
    13c6:	f007 f8cd 	bl	8564 <String::String(char const*)>
    13ca:	a901      	add	r1, sp, #4
    13cc:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    13d0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    13d4:	f7fe fe48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13d8:	a801      	add	r0, sp, #4
    13da:	f7fe fe77 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    13de:	4651      	mov	r1, sl
    13e0:	f10d 0a04 	add.w	sl, sp, #4
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    13e4:	f8df 9288 	ldr.w	r9, [pc, #648]	; 1670 <initialize_opcode_info()+0x1588>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    13e8:	4650      	mov	r0, sl
    13ea:	f10d 0a14 	add.w	sl, sp, #20
    13ee:	f007 f8b9 	bl	8564 <String::String(char const*)>
    13f2:	4998      	ldr	r1, [pc, #608]	; (1654 <initialize_opcode_info()+0x156c>)
    13f4:	4650      	mov	r0, sl
    13f6:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    13fa:	f007 f8b3 	bl	8564 <String::String(char const*)>
    13fe:	4621      	mov	r1, r4
    1400:	4650      	mov	r0, sl
    1402:	f240 3a05 	movw	sl, #773	; 0x305
    1406:	f007 f8ad 	bl	8564 <String::String(char const*)>
    140a:	f605 302c 	addw	r0, r5, #2860	; 0xb2c
    140e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1412:	f10d 0a04 	add.w	sl, sp, #4
    1416:	4651      	mov	r1, sl
    1418:	f7fe fe26 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    141c:	4650      	mov	r0, sl
    141e:	f7fe fe55 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1422:	4650      	mov	r0, sl
    1424:	f10d 0a14 	add.w	sl, sp, #20
    1428:	4659      	mov	r1, fp
    142a:	f007 f89b 	bl	8564 <String::String(char const*)>
    142e:	498a      	ldr	r1, [pc, #552]	; (1658 <initialize_opcode_info()+0x1570>)
    1430:	4650      	mov	r0, sl
    1432:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1436:	f007 f895 	bl	8564 <String::String(char const*)>
    143a:	4639      	mov	r1, r7
    143c:	4650      	mov	r0, sl
    143e:	f10d 0a04 	add.w	sl, sp, #4
    1442:	f007 f88f 	bl	8564 <String::String(char const*)>
    1446:	f240 2102 	movw	r1, #514	; 0x202
    144a:	f605 30c8 	addw	r0, r5, #3016	; 0xbc8
    144e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1452:	4651      	mov	r1, sl
    1454:	f7fe fe08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1458:	4650      	mov	r0, sl
    145a:	f7fe fe37 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    145e:	4650      	mov	r0, sl
    1460:	f10d 0a14 	add.w	sl, sp, #20
    1464:	4649      	mov	r1, r9
    1466:	f007 f87d 	bl	8564 <String::String(char const*)>
    146a:	497c      	ldr	r1, [pc, #496]	; (165c <initialize_opcode_info()+0x1574>)
    146c:	4650      	mov	r0, sl
    146e:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1472:	f007 f877 	bl	8564 <String::String(char const*)>
    1476:	4639      	mov	r1, r7
    1478:	4650      	mov	r0, sl
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    147a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 1674 <initialize_opcode_info()+0x158c>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    147e:	f007 f871 	bl	8564 <String::String(char const*)>
    1482:	f240 2006 	movw	r0, #518	; 0x206
    1486:	a901      	add	r1, sp, #4
    1488:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    148c:	f605 30fc 	addw	r0, r5, #3068	; 0xbfc
    1490:	f7fe fdea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1494:	a801      	add	r0, sp, #4
    1496:	f7fe fe19 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    149a:	4651      	mov	r1, sl
    149c:	a801      	add	r0, sp, #4
    149e:	f007 f861 	bl	8564 <String::String(char const*)>
    14a2:	496d      	ldr	r1, [pc, #436]	; (1658 <initialize_opcode_info()+0x1570>)
    14a4:	a805      	add	r0, sp, #20
    14a6:	f007 f85d 	bl	8564 <String::String(char const*)>
    14aa:	4639      	mov	r1, r7
    14ac:	a809      	add	r0, sp, #36	; 0x24
    14ae:	f007 f859 	bl	8564 <String::String(char const*)>
    14b2:	f240 2102 	movw	r1, #514	; 0x202
    14b6:	f505 6043 	add.w	r0, r5, #3120	; 0xc30
    14ba:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    14be:	a901      	add	r1, sp, #4
    14c0:	f7fe fdd2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14c4:	a801      	add	r0, sp, #4
    14c6:	f7fe fe01 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    14ca:	4659      	mov	r1, fp
    14cc:	a801      	add	r0, sp, #4
    14ce:	f007 f849 	bl	8564 <String::String(char const*)>
    14d2:	4963      	ldr	r1, [pc, #396]	; (1660 <initialize_opcode_info()+0x1578>)
    14d4:	a805      	add	r0, sp, #20
    14d6:	f007 f845 	bl	8564 <String::String(char const*)>
    14da:	4639      	mov	r1, r7
    14dc:	a809      	add	r0, sp, #36	; 0x24
    14de:	f007 f841 	bl	8564 <String::String(char const*)>
    14e2:	f240 2e03 	movw	lr, #515	; 0x203
    14e6:	a901      	add	r1, sp, #4
    14e8:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    14ec:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    14f0:	f7fe fdba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14f4:	a801      	add	r0, sp, #4
    14f6:	f7fe fde9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    14fa:	4649      	mov	r1, r9
    14fc:	a801      	add	r0, sp, #4
    14fe:	f007 f831 	bl	8564 <String::String(char const*)>
    1502:	4957      	ldr	r1, [pc, #348]	; (1660 <initialize_opcode_info()+0x1578>)
    1504:	a805      	add	r0, sp, #20
    1506:	f007 f82d 	bl	8564 <String::String(char const*)>
    150a:	4639      	mov	r1, r7
    150c:	a809      	add	r0, sp, #36	; 0x24
    150e:	f007 f829 	bl	8564 <String::String(char const*)>
    1512:	f240 2e03 	movw	lr, #515	; 0x203
    1516:	a901      	add	r1, sp, #4
    1518:	f605 40cc 	addw	r0, r5, #3276	; 0xccc
    151c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1520:	f7fe fda2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1524:	a801      	add	r0, sp, #4
    1526:	f7fe fdd1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    152a:	4651      	mov	r1, sl
    152c:	a801      	add	r0, sp, #4
    152e:	f007 f819 	bl	8564 <String::String(char const*)>
    1532:	494b      	ldr	r1, [pc, #300]	; (1660 <initialize_opcode_info()+0x1578>)
    1534:	a805      	add	r0, sp, #20
    1536:	f007 f815 	bl	8564 <String::String(char const*)>
    153a:	4639      	mov	r1, r7
    153c:	a809      	add	r0, sp, #36	; 0x24
    153e:	f007 f811 	bl	8564 <String::String(char const*)>
    1542:	f240 2e03 	movw	lr, #515	; 0x203
    1546:	a901      	add	r1, sp, #4
    1548:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    154c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1550:	f7fe fd8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1554:	a801      	add	r0, sp, #4
    1556:	f7fe fdb9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    155a:	4942      	ldr	r1, [pc, #264]	; (1664 <initialize_opcode_info()+0x157c>)
    155c:	a801      	add	r0, sp, #4
    155e:	f007 f801 	bl	8564 <String::String(char const*)>
    1562:	4621      	mov	r1, r4
    1564:	a805      	add	r0, sp, #20
    1566:	f006 fffd 	bl	8564 <String::String(char const*)>
    156a:	4639      	mov	r1, r7
    156c:	a809      	add	r0, sp, #36	; 0x24
    156e:	f006 fff9 	bl	8564 <String::String(char const*)>
    1572:	f44f 7281 	mov.w	r2, #258	; 0x102
    1576:	a901      	add	r1, sp, #4
    1578:	f605 5068 	addw	r0, r5, #3432	; 0xd68
    157c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1580:	f7fe fd72 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1584:	a801      	add	r0, sp, #4
    1586:	f7fe fda1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    158a:	4649      	mov	r1, r9
    158c:	a801      	add	r0, sp, #4
    158e:	f006 ffe9 	bl	8564 <String::String(char const*)>
    1592:	4931      	ldr	r1, [pc, #196]	; (1658 <initialize_opcode_info()+0x1570>)
    1594:	a805      	add	r0, sp, #20
    1596:	f006 ffe5 	bl	8564 <String::String(char const*)>
    159a:	4639      	mov	r1, r7
    159c:	a809      	add	r0, sp, #36	; 0x24
    159e:	f006 ffe1 	bl	8564 <String::String(char const*)>
    15a2:	f240 2102 	movw	r1, #514	; 0x202
    15a6:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
    15aa:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    15ae:	a901      	add	r1, sp, #4
    15b0:	f7fe fd5a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15b4:	a801      	add	r0, sp, #4
    15b6:	f7fe fd89 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    15ba:	492b      	ldr	r1, [pc, #172]	; (1668 <initialize_opcode_info()+0x1580>)
    15bc:	a801      	add	r0, sp, #4
    15be:	f006 ffd1 	bl	8564 <String::String(char const*)>
    15c2:	4621      	mov	r1, r4
    15c4:	a805      	add	r0, sp, #20
    15c6:	f006 ffcd 	bl	8564 <String::String(char const*)>
    15ca:	4639      	mov	r1, r7
    15cc:	a809      	add	r0, sp, #36	; 0x24
    15ce:	f006 ffc9 	bl	8564 <String::String(char const*)>
    15d2:	f44f 7281 	mov.w	r2, #258	; 0x102
    15d6:	a901      	add	r1, sp, #4
    15d8:	f505 605d 	add.w	r0, r5, #3536	; 0xdd0
    15dc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    15e0:	f7fe fd42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15e4:	a801      	add	r0, sp, #4
    15e6:	f7fe fd71 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    15ea:	4659      	mov	r1, fp
    15ec:	a801      	add	r0, sp, #4
    15ee:	f006 ffb9 	bl	8564 <String::String(char const*)>
    15f2:	4641      	mov	r1, r8
    15f4:	a805      	add	r0, sp, #20
    15f6:	f006 ffb5 	bl	8564 <String::String(char const*)>
    15fa:	4639      	mov	r1, r7
    15fc:	a809      	add	r0, sp, #36	; 0x24
    15fe:	f006 ffb1 	bl	8564 <String::String(char const*)>
    1602:	f44f 7341 	mov.w	r3, #772	; 0x304
    1606:	a901      	add	r1, sp, #4
    1608:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    160c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1610:	f7fe fd2a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1614:	a801      	add	r0, sp, #4
    1616:	f7fe fd59 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    161a:	4649      	mov	r1, r9
    161c:	a801      	add	r0, sp, #4
    161e:	f006 ffa1 	bl	8564 <String::String(char const*)>
    1622:	4641      	mov	r1, r8
    1624:	a805      	add	r0, sp, #20
    1626:	f006 ff9d 	bl	8564 <String::String(char const*)>
    162a:	4639      	mov	r1, r7
    162c:	a809      	add	r0, sp, #36	; 0x24
    162e:	f006 ff99 	bl	8564 <String::String(char const*)>
    1632:	f44f 7341 	mov.w	r3, #772	; 0x304
    1636:	f605 606c 	addw	r0, r5, #3692	; 0xe6c
    163a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    163e:	e01b      	b.n	1678 <initialize_opcode_info()+0x1590>
    1640:	200008c0 	.word	0x200008c0
    1644:	20000968 	.word	0x20000968
    1648:	20000970 	.word	0x20000970
    164c:	200008d0 	.word	0x200008d0
    1650:	20000974 	.word	0x20000974
    1654:	200008d8 	.word	0x200008d8
    1658:	200008a4 	.word	0x200008a4
    165c:	20000888 	.word	0x20000888
    1660:	20000894 	.word	0x20000894
    1664:	20000984 	.word	0x20000984
    1668:	20000988 	.word	0x20000988
    166c:	20000978 	.word	0x20000978
    1670:	2000097c 	.word	0x2000097c
    1674:	20000980 	.word	0x20000980
    1678:	ab01      	add	r3, sp, #4
    167a:	4619      	mov	r1, r3
    167c:	f7fe fcf4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1680:	ab01      	add	r3, sp, #4
    1682:	4618      	mov	r0, r3
    1684:	f7fe fd22 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1688:	ab01      	add	r3, sp, #4
    168a:	4651      	mov	r1, sl
    168c:	4618      	mov	r0, r3
    168e:	f006 ff69 	bl	8564 <String::String(char const*)>
    1692:	ab05      	add	r3, sp, #20
    1694:	4641      	mov	r1, r8
    1696:	f44f 7841 	mov.w	r8, #772	; 0x304
    169a:	4618      	mov	r0, r3
    169c:	f006 ff62 	bl	8564 <String::String(char const*)>
    16a0:	ab09      	add	r3, sp, #36	; 0x24
    16a2:	4639      	mov	r1, r7
    16a4:	4618      	mov	r0, r3
    16a6:	f006 ff5d 	bl	8564 <String::String(char const*)>
    16aa:	ab01      	add	r3, sp, #4
    16ac:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
    16b0:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    16b4:	4619      	mov	r1, r3
    16b6:	f7fe fcd7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16ba:	ab01      	add	r3, sp, #4
    16bc:	4618      	mov	r0, r3
    16be:	f7fe fd05 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    16c2:	ab01      	add	r3, sp, #4
    16c4:	49d8      	ldr	r1, [pc, #864]	; (1a28 <initialize_opcode_info()+0x1940>)
    16c6:	4618      	mov	r0, r3
    16c8:	f006 ff4c 	bl	8564 <String::String(char const*)>
    16cc:	ab05      	add	r3, sp, #20
    16ce:	49d7      	ldr	r1, [pc, #860]	; (1a2c <initialize_opcode_info()+0x1944>)
    16d0:	4618      	mov	r0, r3
    16d2:	f006 ff47 	bl	8564 <String::String(char const*)>
    16d6:	ab09      	add	r3, sp, #36	; 0x24
    16d8:	4621      	mov	r1, r4
    16da:	4618      	mov	r0, r3
    16dc:	f006 ff42 	bl	8564 <String::String(char const*)>
    16e0:	ab01      	add	r3, sp, #4
    16e2:	f240 2102 	movw	r1, #514	; 0x202
    16e6:	f605 7008 	addw	r0, r5, #3848	; 0xf08
    16ea:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    16ee:	4619      	mov	r1, r3
    16f0:	f7fe fcba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16f4:	ab01      	add	r3, sp, #4
    16f6:	4618      	mov	r0, r3
    16f8:	f7fe fce8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    16fc:	ab01      	add	r3, sp, #4
    16fe:	4649      	mov	r1, r9
    1700:	4618      	mov	r0, r3
    1702:	f006 ff2f 	bl	8564 <String::String(char const*)>
    1706:	ab05      	add	r3, sp, #20
    1708:	49c9      	ldr	r1, [pc, #804]	; (1a30 <initialize_opcode_info()+0x1948>)
    170a:	4618      	mov	r0, r3
    170c:	f006 ff2a 	bl	8564 <String::String(char const*)>
    1710:	ab09      	add	r3, sp, #36	; 0x24
    1712:	4639      	mov	r1, r7
    1714:	4618      	mov	r0, r3
    1716:	f006 ff25 	bl	8564 <String::String(char const*)>
    171a:	ab01      	add	r3, sp, #4
    171c:	f240 2105 	movw	r1, #517	; 0x205
    1720:	f605 703c 	addw	r0, r5, #3900	; 0xf3c
    1724:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1728:	4619      	mov	r1, r3
    172a:	f7fe fc9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    172e:	ab01      	add	r3, sp, #4
    1730:	4618      	mov	r0, r3
    1732:	f7fe fccb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1736:	ab01      	add	r3, sp, #4
    1738:	4659      	mov	r1, fp
    173a:	4618      	mov	r0, r3
    173c:	f006 ff12 	bl	8564 <String::String(char const*)>
    1740:	ab05      	add	r3, sp, #20
    1742:	49bc      	ldr	r1, [pc, #752]	; (1a34 <initialize_opcode_info()+0x194c>)
    1744:	4618      	mov	r0, r3
    1746:	f006 ff0d 	bl	8564 <String::String(char const*)>
    174a:	ab09      	add	r3, sp, #36	; 0x24
    174c:	4639      	mov	r1, r7
    174e:	4618      	mov	r0, r3
    1750:	f006 ff08 	bl	8564 <String::String(char const*)>
    1754:	ab01      	add	r3, sp, #4
    1756:	f44f 7c01 	mov.w	ip, #516	; 0x204
    175a:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
    175e:	4619      	mov	r1, r3
    1760:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1764:	f7fe fc80 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1768:	ab01      	add	r3, sp, #4
    176a:	4618      	mov	r0, r3
    176c:	f7fe fcae 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1770:	ab01      	add	r3, sp, #4
    1772:	4649      	mov	r1, r9
    1774:	4618      	mov	r0, r3
    1776:	f006 fef5 	bl	8564 <String::String(char const*)>
    177a:	ab05      	add	r3, sp, #20
    177c:	49ad      	ldr	r1, [pc, #692]	; (1a34 <initialize_opcode_info()+0x194c>)
    177e:	4618      	mov	r0, r3
    1780:	f006 fef0 	bl	8564 <String::String(char const*)>
    1784:	ab09      	add	r3, sp, #36	; 0x24
    1786:	4639      	mov	r1, r7
    1788:	4618      	mov	r0, r3
    178a:	f006 feeb 	bl	8564 <String::String(char const*)>
    178e:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1792:	ab01      	add	r3, sp, #4
    1794:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1798:	f602 302c 	addw	r0, r2, #2860	; 0xb2c
    179c:	4619      	mov	r1, r3
    179e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    17a2:	f7fe fc61 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17a6:	ab01      	add	r3, sp, #4
    17a8:	4618      	mov	r0, r3
    17aa:	f7fe fc8f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    17ae:	ab01      	add	r3, sp, #4
    17b0:	4651      	mov	r1, sl
    17b2:	4618      	mov	r0, r3
    17b4:	f006 fed6 	bl	8564 <String::String(char const*)>
    17b8:	4b9f      	ldr	r3, [pc, #636]	; (1a38 <initialize_opcode_info()+0x1950>)
    17ba:	4619      	mov	r1, r3
    17bc:	ab05      	add	r3, sp, #20
    17be:	4618      	mov	r0, r3
    17c0:	f006 fed0 	bl	8564 <String::String(char const*)>
    17c4:	ab09      	add	r3, sp, #36	; 0x24
    17c6:	4639      	mov	r1, r7
    17c8:	4618      	mov	r0, r3
    17ca:	f006 fecb 	bl	8564 <String::String(char const*)>
    17ce:	ab01      	add	r3, sp, #4
    17d0:	f44f 7c01 	mov.w	ip, #516	; 0x204
    17d4:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
    17d8:	4619      	mov	r1, r3
	opcode_info[0xb8] = {"CLV","","V",2,1};
    17da:	4d98      	ldr	r5, [pc, #608]	; (1a3c <initialize_opcode_info()+0x1954>)
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    17dc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    17e0:	f7fe fc42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17e4:	ab01      	add	r3, sp, #4
    17e6:	4618      	mov	r0, r3
    17e8:	f7fe fc70 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    17ec:	ab01      	add	r3, sp, #4
    17ee:	4994      	ldr	r1, [pc, #592]	; (1a40 <initialize_opcode_info()+0x1958>)
    17f0:	4618      	mov	r0, r3
    17f2:	f006 feb7 	bl	8564 <String::String(char const*)>
    17f6:	ab05      	add	r3, sp, #20
    17f8:	4621      	mov	r1, r4
    17fa:	4618      	mov	r0, r3
    17fc:	f006 feb2 	bl	8564 <String::String(char const*)>
    1800:	ab09      	add	r3, sp, #36	; 0x24
    1802:	4990      	ldr	r1, [pc, #576]	; (1a44 <initialize_opcode_info()+0x195c>)
    1804:	4618      	mov	r0, r3
    1806:	f006 fead 	bl	8564 <String::String(char const*)>
    180a:	ab01      	add	r3, sp, #4
    180c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1810:	4628      	mov	r0, r5
    1812:	4619      	mov	r1, r3
    1814:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1818:	f7fe fc26 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    181c:	ab01      	add	r3, sp, #4
    181e:	4618      	mov	r0, r3
    1820:	f7fe fc54 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1824:	ab01      	add	r3, sp, #4
    1826:	4649      	mov	r1, r9
    1828:	4618      	mov	r0, r3
    182a:	f006 fe9b 	bl	8564 <String::String(char const*)>
    182e:	ab05      	add	r3, sp, #20
    1830:	4985      	ldr	r1, [pc, #532]	; (1a48 <initialize_opcode_info()+0x1960>)
    1832:	4618      	mov	r0, r3
    1834:	f006 fe96 	bl	8564 <String::String(char const*)>
    1838:	ab09      	add	r3, sp, #36	; 0x24
    183a:	4639      	mov	r1, r7
    183c:	4618      	mov	r0, r3
    183e:	f006 fe91 	bl	8564 <String::String(char const*)>
    1842:	ab01      	add	r3, sp, #4
    1844:	f105 0034 	add.w	r0, r5, #52	; 0x34
    1848:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    184c:	4619      	mov	r1, r3
    184e:	f7fe fc0b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1852:	ab01      	add	r3, sp, #4
    1854:	4618      	mov	r0, r3
    1856:	f7fe fc39 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    185a:	ab01      	add	r3, sp, #4
    185c:	497b      	ldr	r1, [pc, #492]	; (1a4c <initialize_opcode_info()+0x1964>)
    185e:	4618      	mov	r0, r3
    1860:	f006 fe80 	bl	8564 <String::String(char const*)>
    1864:	ab05      	add	r3, sp, #20
    1866:	4621      	mov	r1, r4
    1868:	4618      	mov	r0, r3
    186a:	f006 fe7b 	bl	8564 <String::String(char const*)>
    186e:	ab09      	add	r3, sp, #36	; 0x24
    1870:	4621      	mov	r1, r4
    1872:	4618      	mov	r0, r3
    1874:	f006 fe76 	bl	8564 <String::String(char const*)>
    1878:	ab01      	add	r3, sp, #4
    187a:	f44f 7281 	mov.w	r2, #258	; 0x102
    187e:	f105 0068 	add.w	r0, r5, #104	; 0x68
    1882:	4619      	mov	r1, r3
    1884:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1888:	f7fe fbee 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    188c:	ab01      	add	r3, sp, #4
    188e:	4618      	mov	r0, r3
    1890:	f7fe fc1c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1894:	ab01      	add	r3, sp, #4
    1896:	4659      	mov	r1, fp
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1898:	f10d 0b04 	add.w	fp, sp, #4
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    189c:	4618      	mov	r0, r3
    189e:	f006 fe61 	bl	8564 <String::String(char const*)>
    18a2:	ab05      	add	r3, sp, #20
    18a4:	496a      	ldr	r1, [pc, #424]	; (1a50 <initialize_opcode_info()+0x1968>)
    18a6:	4618      	mov	r0, r3
    18a8:	f006 fe5c 	bl	8564 <String::String(char const*)>
    18ac:	ab09      	add	r3, sp, #36	; 0x24
    18ae:	4639      	mov	r1, r7
    18b0:	4618      	mov	r0, r3
    18b2:	f006 fe57 	bl	8564 <String::String(char const*)>
    18b6:	ab01      	add	r3, sp, #4
    18b8:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
    18bc:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    18c0:	4619      	mov	r1, r3
    18c2:	f7fe fbd1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18c6:	ab01      	add	r3, sp, #4
    18c8:	4618      	mov	r0, r3
    18ca:	f7fe fbff 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18ce:	ab01      	add	r3, sp, #4
    18d0:	4649      	mov	r1, r9
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    18d2:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1a60 <initialize_opcode_info()+0x1978>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18d6:	4618      	mov	r0, r3
    18d8:	f006 fe44 	bl	8564 <String::String(char const*)>
    18dc:	ab05      	add	r3, sp, #20
    18de:	495c      	ldr	r1, [pc, #368]	; (1a50 <initialize_opcode_info()+0x1968>)
    18e0:	4618      	mov	r0, r3
    18e2:	f006 fe3f 	bl	8564 <String::String(char const*)>
    18e6:	ab09      	add	r3, sp, #36	; 0x24
    18e8:	4639      	mov	r1, r7
    18ea:	4618      	mov	r0, r3
    18ec:	f006 fe3a 	bl	8564 <String::String(char const*)>
    18f0:	ab01      	add	r3, sp, #4
    18f2:	f505 7082 	add.w	r0, r5, #260	; 0x104
    18f6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    18fa:	4619      	mov	r1, r3
    18fc:	f7fe fbb4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1900:	ab01      	add	r3, sp, #4
    1902:	4618      	mov	r0, r3
    1904:	f7fe fbe2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1908:	ab01      	add	r3, sp, #4
    190a:	4651      	mov	r1, sl
    190c:	f10d 0a04 	add.w	sl, sp, #4
    1910:	4618      	mov	r0, r3
    1912:	f006 fe27 	bl	8564 <String::String(char const*)>
    1916:	ab05      	add	r3, sp, #20
    1918:	494b      	ldr	r1, [pc, #300]	; (1a48 <initialize_opcode_info()+0x1960>)
    191a:	4618      	mov	r0, r3
    191c:	f006 fe22 	bl	8564 <String::String(char const*)>
    1920:	ab09      	add	r3, sp, #36	; 0x24
    1922:	4639      	mov	r1, r7
    1924:	4618      	mov	r0, r3
    1926:	f006 fe1d 	bl	8564 <String::String(char const*)>
    192a:	4651      	mov	r1, sl
    192c:	f505 709c 	add.w	r0, r5, #312	; 0x138
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1930:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a64 <initialize_opcode_info()+0x197c>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1934:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1938:	f7fe fb96 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    193c:	4658      	mov	r0, fp
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    193e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1a68 <initialize_opcode_info()+0x1980>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1942:	f7fe fbc3 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1946:	4658      	mov	r0, fp
    1948:	f10d 0b14 	add.w	fp, sp, #20
    194c:	4651      	mov	r1, sl
    194e:	f006 fe09 	bl	8564 <String::String(char const*)>
    1952:	4940      	ldr	r1, [pc, #256]	; (1a54 <initialize_opcode_info()+0x196c>)
    1954:	4658      	mov	r0, fp
    1956:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    195a:	f006 fe03 	bl	8564 <String::String(char const*)>
    195e:	4631      	mov	r1, r6
    1960:	4658      	mov	r0, fp
    1962:	f10d 0b04 	add.w	fp, sp, #4
    1966:	f006 fdfd 	bl	8564 <String::String(char const*)>
    196a:	f240 2102 	movw	r1, #514	; 0x202
    196e:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
    1972:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1976:	4659      	mov	r1, fp
    1978:	f7fe fb76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    197c:	4658      	mov	r0, fp
    197e:	f7fe fba5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1982:	4658      	mov	r0, fp
    1984:	f10d 0b14 	add.w	fp, sp, #20
    1988:	4641      	mov	r1, r8
    198a:	f006 fdeb 	bl	8564 <String::String(char const*)>
    198e:	4932      	ldr	r1, [pc, #200]	; (1a58 <initialize_opcode_info()+0x1970>)
    1990:	4658      	mov	r0, fp
    1992:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1996:	f006 fde5 	bl	8564 <String::String(char const*)>
    199a:	4631      	mov	r1, r6
    199c:	4658      	mov	r0, fp
    199e:	f10d 0b04 	add.w	fp, sp, #4
    19a2:	f006 fddf 	bl	8564 <String::String(char const*)>
    19a6:	f240 2006 	movw	r0, #518	; 0x206
    19aa:	4659      	mov	r1, fp
    19ac:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    19b0:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
    19b4:	f7fe fb58 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19b8:	4658      	mov	r0, fp
    19ba:	f7fe fb87 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    19be:	4658      	mov	r0, fp
    19c0:	f10d 0b14 	add.w	fp, sp, #20
    19c4:	4651      	mov	r1, sl
    19c6:	f006 fdcd 	bl	8564 <String::String(char const*)>
    19ca:	4924      	ldr	r1, [pc, #144]	; (1a5c <initialize_opcode_info()+0x1974>)
    19cc:	4658      	mov	r0, fp
    19ce:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    19d2:	f006 fdc7 	bl	8564 <String::String(char const*)>
    19d6:	4631      	mov	r1, r6
    19d8:	4658      	mov	r0, fp
    19da:	f240 2b03 	movw	fp, #515	; 0x203
    19de:	f006 fdc1 	bl	8564 <String::String(char const*)>
    19e2:	ab01      	add	r3, sp, #4
    19e4:	f505 701c 	add.w	r0, r5, #624	; 0x270
    19e8:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    19ec:	4619      	mov	r1, r3
    19ee:	f7fe fb3b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19f2:	ab01      	add	r3, sp, #4
    19f4:	4618      	mov	r0, r3
    19f6:	f7fe fb69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    19fa:	ab01      	add	r3, sp, #4
    19fc:	4641      	mov	r1, r8
    19fe:	4618      	mov	r0, r3
    1a00:	f006 fdb0 	bl	8564 <String::String(char const*)>
    1a04:	ab05      	add	r3, sp, #20
    1a06:	4915      	ldr	r1, [pc, #84]	; (1a5c <initialize_opcode_info()+0x1974>)
    1a08:	4618      	mov	r0, r3
    1a0a:	f006 fdab 	bl	8564 <String::String(char const*)>
    1a0e:	ab09      	add	r3, sp, #36	; 0x24
    1a10:	4631      	mov	r1, r6
    1a12:	4618      	mov	r0, r3
    1a14:	f006 fda6 	bl	8564 <String::String(char const*)>
    1a18:	ab01      	add	r3, sp, #4
    1a1a:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
    1a1e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1a22:	4619      	mov	r1, r3
    1a24:	e022      	b.n	1a6c <initialize_opcode_info()+0x1984>
    1a26:	bf00      	nop
    1a28:	2000098c 	.word	0x2000098c
    1a2c:	200008b4 	.word	0x200008b4
    1a30:	200008b8 	.word	0x200008b8
    1a34:	200008c0 	.word	0x200008c0
    1a38:	20000968 	.word	0x20000968
    1a3c:	20017978 	.word	0x20017978
    1a40:	20000990 	.word	0x20000990
    1a44:	20000994 	.word	0x20000994
    1a48:	200008d0 	.word	0x200008d0
    1a4c:	20000998 	.word	0x20000998
    1a50:	200008d8 	.word	0x200008d8
    1a54:	200008a4 	.word	0x200008a4
    1a58:	20000888 	.word	0x20000888
    1a5c:	20000894 	.word	0x20000894
    1a60:	200009a4 	.word	0x200009a4
    1a64:	2000099c 	.word	0x2000099c
    1a68:	200009a0 	.word	0x200009a0
    1a6c:	f7fe fafc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a70:	ab01      	add	r3, sp, #4
    1a72:	4618      	mov	r0, r3
    1a74:	f7fe fb2a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1a78:	ab01      	add	r3, sp, #4
    1a7a:	4649      	mov	r1, r9
    1a7c:	4618      	mov	r0, r3
    1a7e:	f006 fd71 	bl	8564 <String::String(char const*)>
    1a82:	ab05      	add	r3, sp, #20
    1a84:	49d6      	ldr	r1, [pc, #856]	; (1de0 <initialize_opcode_info()+0x1cf8>)
    1a86:	4618      	mov	r0, r3
    1a88:	f006 fd6c 	bl	8564 <String::String(char const*)>
    1a8c:	ab09      	add	r3, sp, #36	; 0x24
    1a8e:	4639      	mov	r1, r7
    1a90:	4618      	mov	r0, r3
    1a92:	f006 fd67 	bl	8564 <String::String(char const*)>
    1a96:	ab01      	add	r3, sp, #4
    1a98:	f240 2e05 	movw	lr, #517	; 0x205
    1a9c:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
    1aa0:	4619      	mov	r1, r3
    1aa2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1aa6:	f7fe fadf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1aaa:	ab01      	add	r3, sp, #4
    1aac:	4618      	mov	r0, r3
    1aae:	f7fe fb0d 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1ab2:	ab01      	add	r3, sp, #4
    1ab4:	49cb      	ldr	r1, [pc, #812]	; (1de4 <initialize_opcode_info()+0x1cfc>)
    1ab6:	4618      	mov	r0, r3
    1ab8:	f006 fd54 	bl	8564 <String::String(char const*)>
    1abc:	ab05      	add	r3, sp, #20
    1abe:	4621      	mov	r1, r4
    1ac0:	4618      	mov	r0, r3
    1ac2:	f006 fd4f 	bl	8564 <String::String(char const*)>
    1ac6:	ab09      	add	r3, sp, #36	; 0x24
    1ac8:	4621      	mov	r1, r4
    1aca:	4618      	mov	r0, r3
    1acc:	f006 fd4a 	bl	8564 <String::String(char const*)>
    1ad0:	ab01      	add	r3, sp, #4
    1ad2:	f44f 7281 	mov.w	r2, #258	; 0x102
    1ad6:	f505 7050 	add.w	r0, r5, #832	; 0x340
    1ada:	4619      	mov	r1, r3
    1adc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ae0:	f7fe fac2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ae4:	ab01      	add	r3, sp, #4
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7fe faf0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1aec:	ab01      	add	r3, sp, #4
    1aee:	4641      	mov	r1, r8
    1af0:	4618      	mov	r0, r3
    1af2:	f006 fd37 	bl	8564 <String::String(char const*)>
    1af6:	ab05      	add	r3, sp, #20
    1af8:	49bb      	ldr	r1, [pc, #748]	; (1de8 <initialize_opcode_info()+0x1d00>)
    1afa:	4618      	mov	r0, r3
    1afc:	f006 fd32 	bl	8564 <String::String(char const*)>
    1b00:	ab09      	add	r3, sp, #36	; 0x24
    1b02:	4631      	mov	r1, r6
    1b04:	4618      	mov	r0, r3
    1b06:	f006 fd2d 	bl	8564 <String::String(char const*)>
    1b0a:	ab01      	add	r3, sp, #4
    1b0c:	f240 2102 	movw	r1, #514	; 0x202
    1b10:	f505 705d 	add.w	r0, r5, #884	; 0x374
    1b14:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1b18:	4619      	mov	r1, r3
    1b1a:	f7fe faa5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b1e:	ab01      	add	r3, sp, #4
    1b20:	4618      	mov	r0, r3
    1b22:	f7fe fad3 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1b26:	ab01      	add	r3, sp, #4
    1b28:	49b0      	ldr	r1, [pc, #704]	; (1dec <initialize_opcode_info()+0x1d04>)
    1b2a:	4618      	mov	r0, r3
    1b2c:	f006 fd1a 	bl	8564 <String::String(char const*)>
    1b30:	ab05      	add	r3, sp, #20
    1b32:	4621      	mov	r1, r4
    1b34:	4618      	mov	r0, r3
    1b36:	f006 fd15 	bl	8564 <String::String(char const*)>
    1b3a:	ab09      	add	r3, sp, #36	; 0x24
    1b3c:	4639      	mov	r1, r7
    1b3e:	4618      	mov	r0, r3
    1b40:	f006 fd10 	bl	8564 <String::String(char const*)>
    1b44:	ab01      	add	r3, sp, #4
    1b46:	f44f 7281 	mov.w	r2, #258	; 0x102
    1b4a:	f505 706a 	add.w	r0, r5, #936	; 0x3a8
    1b4e:	4619      	mov	r1, r3
    1b50:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1b54:	f7fe fa88 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b58:	ab01      	add	r3, sp, #4
    1b5a:	4618      	mov	r0, r3
    1b5c:	f7fe fab6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1b60:	4651      	mov	r1, sl
    1b62:	f10d 0a04 	add.w	sl, sp, #4
    1b66:	4650      	mov	r0, sl
    1b68:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 1e14 <initialize_opcode_info()+0x1d2c>
    1b6c:	f006 fcfa 	bl	8564 <String::String(char const*)>
    1b70:	ab05      	add	r3, sp, #20
    1b72:	4651      	mov	r1, sl
    1b74:	4618      	mov	r0, r3
    1b76:	f006 fcf5 	bl	8564 <String::String(char const*)>
    1b7a:	ab09      	add	r3, sp, #36	; 0x24
    1b7c:	4631      	mov	r1, r6
    1b7e:	4618      	mov	r0, r3
    1b80:	f006 fcf0 	bl	8564 <String::String(char const*)>
    1b84:	f44f 7341 	mov.w	r3, #772	; 0x304
    1b88:	a901      	add	r1, sp, #4
    1b8a:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    1b8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1b92:	f7fe fa69 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b96:	a801      	add	r0, sp, #4
    1b98:	f7fe fa98 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1b9c:	4641      	mov	r1, r8
    1b9e:	a801      	add	r0, sp, #4
    1ba0:	f006 fce0 	bl	8564 <String::String(char const*)>
    1ba4:	4651      	mov	r1, sl
    1ba6:	a805      	add	r0, sp, #20
    1ba8:	f006 fcdc 	bl	8564 <String::String(char const*)>
    1bac:	4631      	mov	r1, r6
    1bae:	a809      	add	r0, sp, #36	; 0x24
    1bb0:	f006 fcd8 	bl	8564 <String::String(char const*)>
    1bb4:	f44f 7341 	mov.w	r3, #772	; 0x304
    1bb8:	a901      	add	r1, sp, #4
    1bba:	f205 4044 	addw	r0, r5, #1092	; 0x444
    1bbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1bc2:	f7fe fa51 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bc6:	a801      	add	r0, sp, #4
    1bc8:	f7fe fa80 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1bcc:	4649      	mov	r1, r9
    1bce:	a801      	add	r0, sp, #4
    1bd0:	f006 fcc8 	bl	8564 <String::String(char const*)>
    1bd4:	4651      	mov	r1, sl
    1bd6:	a805      	add	r0, sp, #20
    1bd8:	f006 fcc4 	bl	8564 <String::String(char const*)>
    1bdc:	4639      	mov	r1, r7
    1bde:	a809      	add	r0, sp, #36	; 0x24
    1be0:	f006 fcc0 	bl	8564 <String::String(char const*)>
    1be4:	f240 3206 	movw	r2, #774	; 0x306
    1be8:	a901      	add	r1, sp, #4
    1bea:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    1bee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1bf2:	f7fe fa39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bf6:	a801      	add	r0, sp, #4
    1bf8:	f7fe fa68 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1bfc:	497c      	ldr	r1, [pc, #496]	; (1df0 <initialize_opcode_info()+0x1d08>)
    1bfe:	a801      	add	r0, sp, #4
    1c00:	f006 fcb0 	bl	8564 <String::String(char const*)>
    1c04:	4a7b      	ldr	r2, [pc, #492]	; (1df4 <initialize_opcode_info()+0x1d0c>)
    1c06:	a805      	add	r0, sp, #20
    1c08:	4611      	mov	r1, r2
    1c0a:	f006 fcab 	bl	8564 <String::String(char const*)>
    1c0e:	4621      	mov	r1, r4
    1c10:	a809      	add	r0, sp, #36	; 0x24
    1c12:	f006 fca7 	bl	8564 <String::String(char const*)>
    1c16:	f240 2102 	movw	r1, #514	; 0x202
    1c1a:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
    1c1e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1c22:	a901      	add	r1, sp, #4
    1c24:	f7fe fa20 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c28:	a801      	add	r0, sp, #4
    1c2a:	f7fe fa4f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1c2e:	4641      	mov	r1, r8
    1c30:	a801      	add	r0, sp, #4
    1c32:	f006 fc97 	bl	8564 <String::String(char const*)>
    1c36:	4b70      	ldr	r3, [pc, #448]	; (1df8 <initialize_opcode_info()+0x1d10>)
    1c38:	a805      	add	r0, sp, #20
    1c3a:	4619      	mov	r1, r3
    1c3c:	f006 fc92 	bl	8564 <String::String(char const*)>
    1c40:	4631      	mov	r1, r6
    1c42:	a809      	add	r0, sp, #36	; 0x24
    1c44:	f006 fc8e 	bl	8564 <String::String(char const*)>
    1c48:	f240 2e05 	movw	lr, #517	; 0x205
    1c4c:	a901      	add	r1, sp, #4
    1c4e:	f205 5014 	addw	r0, r5, #1300	; 0x514
    1c52:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1c56:	f7fe fa07 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c5a:	a801      	add	r0, sp, #4
    1c5c:	f7fe fa36 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1c60:	4641      	mov	r1, r8
    1c62:	a801      	add	r0, sp, #4
    1c64:	f006 fc7e 	bl	8564 <String::String(char const*)>
    1c68:	4964      	ldr	r1, [pc, #400]	; (1dfc <initialize_opcode_info()+0x1d14>)
    1c6a:	a805      	add	r0, sp, #20
    1c6c:	f006 fc7a 	bl	8564 <String::String(char const*)>
    1c70:	4631      	mov	r1, r6
    1c72:	a809      	add	r0, sp, #36	; 0x24
    1c74:	f006 fc76 	bl	8564 <String::String(char const*)>
    1c78:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1c7c:	a901      	add	r1, sp, #4
    1c7e:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
    1c82:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1c86:	f7fe f9ef 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c8a:	a801      	add	r0, sp, #4
    1c8c:	f7fe fa1e 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1c90:	4649      	mov	r1, r9
    1c92:	a801      	add	r0, sp, #4
    1c94:	f006 fc66 	bl	8564 <String::String(char const*)>
    1c98:	4958      	ldr	r1, [pc, #352]	; (1dfc <initialize_opcode_info()+0x1d14>)
    1c9a:	a805      	add	r0, sp, #20
    1c9c:	f006 fc62 	bl	8564 <String::String(char const*)>
    1ca0:	4639      	mov	r1, r7
    1ca2:	a809      	add	r0, sp, #36	; 0x24
    1ca4:	f006 fc5e 	bl	8564 <String::String(char const*)>
    1ca8:	f240 2006 	movw	r0, #518	; 0x206
    1cac:	a901      	add	r1, sp, #4
    1cae:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1cb2:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    1cb6:	f7fe f9d7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cba:	a801      	add	r0, sp, #4
    1cbc:	f7fe fa06 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    1cc0:	494f      	ldr	r1, [pc, #316]	; (1e00 <initialize_opcode_info()+0x1d18>)
    1cc2:	a801      	add	r0, sp, #4
    1cc4:	f006 fc4e 	bl	8564 <String::String(char const*)>
    1cc8:	4621      	mov	r1, r4
    1cca:	a805      	add	r0, sp, #20
    1ccc:	f006 fc4a 	bl	8564 <String::String(char const*)>
    1cd0:	494c      	ldr	r1, [pc, #304]	; (1e04 <initialize_opcode_info()+0x1d1c>)
    1cd2:	a809      	add	r0, sp, #36	; 0x24
    1cd4:	f006 fc46 	bl	8564 <String::String(char const*)>
    1cd8:	f44f 7281 	mov.w	r2, #258	; 0x102
    1cdc:	a901      	add	r1, sp, #4
    1cde:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1ce2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ce6:	f7fe f9bf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cea:	a801      	add	r0, sp, #4
    1cec:	f7fe f9ee 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    1cf0:	4641      	mov	r1, r8
    1cf2:	a801      	add	r0, sp, #4
    1cf4:	f006 fc36 	bl	8564 <String::String(char const*)>
    1cf8:	4943      	ldr	r1, [pc, #268]	; (1e08 <initialize_opcode_info()+0x1d20>)
    1cfa:	a805      	add	r0, sp, #20
    1cfc:	f006 fc32 	bl	8564 <String::String(char const*)>
    1d00:	4631      	mov	r1, r6
    1d02:	a809      	add	r0, sp, #36	; 0x24
    1d04:	f006 fc2e 	bl	8564 <String::String(char const*)>
    1d08:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d0c:	a901      	add	r1, sp, #4
    1d0e:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
    1d12:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d16:	f7fe f9a7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d1a:	a801      	add	r0, sp, #4
    1d1c:	f7fe f9d6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    1d20:	4641      	mov	r1, r8
    1d22:	f10d 0804 	add.w	r8, sp, #4
    1d26:	4640      	mov	r0, r8
    1d28:	f10d 0814 	add.w	r8, sp, #20
    1d2c:	f006 fc1a 	bl	8564 <String::String(char const*)>
    1d30:	4936      	ldr	r1, [pc, #216]	; (1e0c <initialize_opcode_info()+0x1d24>)
    1d32:	4640      	mov	r0, r8
    1d34:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d38:	f006 fc14 	bl	8564 <String::String(char const*)>
    1d3c:	4631      	mov	r1, r6
    1d3e:	4640      	mov	r0, r8
    1d40:	f10d 0804 	add.w	r8, sp, #4
    1d44:	f006 fc0e 	bl	8564 <String::String(char const*)>
    1d48:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d4c:	4641      	mov	r1, r8
    1d4e:	f205 7084 	addw	r0, r5, #1924	; 0x784
    1d52:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d56:	f7fe f987 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d5a:	4640      	mov	r0, r8
    1d5c:	f7fe f9b6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    1d60:	4640      	mov	r0, r8
    1d62:	f10d 0814 	add.w	r8, sp, #20
    1d66:	4649      	mov	r1, r9
    1d68:	f006 fbfc 	bl	8564 <String::String(char const*)>
    1d6c:	4927      	ldr	r1, [pc, #156]	; (1e0c <initialize_opcode_info()+0x1d24>)
    1d6e:	4640      	mov	r0, r8
    1d70:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d74:	f006 fbf6 	bl	8564 <String::String(char const*)>
    1d78:	f240 3907 	movw	r9, #775	; 0x307
    1d7c:	4640      	mov	r0, r8
    1d7e:	f10d 0804 	add.w	r8, sp, #4
    1d82:	4639      	mov	r1, r7
    1d84:	f006 fbee 	bl	8564 <String::String(char const*)>
    1d88:	4641      	mov	r1, r8
    1d8a:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1d8e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1d92:	f7fe f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d96:	4640      	mov	r0, r8
    1d98:	f7fe f998 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1d9c:	4640      	mov	r0, r8
    1d9e:	f10d 0814 	add.w	r8, sp, #20
    1da2:	491b      	ldr	r1, [pc, #108]	; (1e10 <initialize_opcode_info()+0x1d28>)
    1da4:	f006 fbde 	bl	8564 <String::String(char const*)>
    1da8:	490f      	ldr	r1, [pc, #60]	; (1de8 <initialize_opcode_info()+0x1d00>)
    1daa:	4640      	mov	r0, r8
    1dac:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1db0:	f006 fbd8 	bl	8564 <String::String(char const*)>
    1db4:	4631      	mov	r1, r6
    1db6:	4640      	mov	r0, r8
    1db8:	f10d 0804 	add.w	r8, sp, #4
    1dbc:	f006 fbd2 	bl	8564 <String::String(char const*)>
    1dc0:	f240 2102 	movw	r1, #514	; 0x202
    1dc4:	f505 6002 	add.w	r0, r5, #2080	; 0x820
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1dc8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e18 <initialize_opcode_info()+0x1d30>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1dcc:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1dd0:	4641      	mov	r1, r8
    1dd2:	f7fe f949 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dd6:	4640      	mov	r0, r8
    1dd8:	f7fe f978 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1ddc:	ab01      	add	r3, sp, #4
    1dde:	e01d      	b.n	1e1c <initialize_opcode_info()+0x1d34>
    1de0:	20000894 	.word	0x20000894
    1de4:	200009a8 	.word	0x200009a8
    1de8:	200008a4 	.word	0x200008a4
    1dec:	200009ac 	.word	0x200009ac
    1df0:	200009b0 	.word	0x200009b0
    1df4:	200008b4 	.word	0x200008b4
    1df8:	200008b8 	.word	0x200008b8
    1dfc:	200008c0 	.word	0x200008c0
    1e00:	200009b4 	.word	0x200009b4
    1e04:	200009b8 	.word	0x200009b8
    1e08:	200008d0 	.word	0x200008d0
    1e0c:	200008d8 	.word	0x200008d8
    1e10:	200009bc 	.word	0x200009bc
    1e14:	200008ac 	.word	0x200008ac
    1e18:	200009c0 	.word	0x200009c0
    1e1c:	4649      	mov	r1, r9
    1e1e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 2190 <initialize_opcode_info()+0x20a8>
    1e22:	4618      	mov	r0, r3
    1e24:	f006 fb9e 	bl	8564 <String::String(char const*)>
    1e28:	ab05      	add	r3, sp, #20
    1e2a:	49cb      	ldr	r1, [pc, #812]	; (2158 <initialize_opcode_info()+0x2070>)
    1e2c:	4618      	mov	r0, r3
    1e2e:	f006 fb99 	bl	8564 <String::String(char const*)>
    1e32:	ab09      	add	r3, sp, #36	; 0x24
    1e34:	4641      	mov	r1, r8
    1e36:	4618      	mov	r0, r3
    1e38:	f006 fb94 	bl	8564 <String::String(char const*)>
    1e3c:	f240 2006 	movw	r0, #518	; 0x206
    1e40:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1e44:	a801      	add	r0, sp, #4
    1e46:	4601      	mov	r1, r0
    1e48:	f605 0054 	addw	r0, r5, #2132	; 0x854
    1e4c:	f7fe f90c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e50:	a801      	add	r0, sp, #4
    1e52:	f7fe f93b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    1e56:	49c1      	ldr	r1, [pc, #772]	; (215c <initialize_opcode_info()+0x2074>)
    1e58:	a801      	add	r0, sp, #4
    1e5a:	f006 fb83 	bl	8564 <String::String(char const*)>
    1e5e:	49c0      	ldr	r1, [pc, #768]	; (2160 <initialize_opcode_info()+0x2078>)
    1e60:	a805      	add	r0, sp, #20
    1e62:	f006 fb7f 	bl	8564 <String::String(char const*)>
    1e66:	4631      	mov	r1, r6
    1e68:	a809      	add	r0, sp, #36	; 0x24
    1e6a:	f006 fb7b 	bl	8564 <String::String(char const*)>
    1e6e:	a801      	add	r0, sp, #4
    1e70:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1e74:	4601      	mov	r1, r0
    1e76:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
    1e7a:	f7fe f8f5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e7e:	a801      	add	r0, sp, #4
    1e80:	f7fe f924 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1e84:	4649      	mov	r1, r9
    1e86:	a801      	add	r0, sp, #4
    1e88:	f006 fb6c 	bl	8564 <String::String(char const*)>
    1e8c:	49b4      	ldr	r1, [pc, #720]	; (2160 <initialize_opcode_info()+0x2078>)
    1e8e:	a805      	add	r0, sp, #20
    1e90:	f006 fb68 	bl	8564 <String::String(char const*)>
    1e94:	4641      	mov	r1, r8
    1e96:	a809      	add	r0, sp, #36	; 0x24
    1e98:	f006 fb64 	bl	8564 <String::String(char const*)>
    1e9c:	a801      	add	r0, sp, #4
    1e9e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1ea2:	4601      	mov	r1, r0
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1ea4:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 2194 <initialize_opcode_info()+0x20ac>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1ea8:	f605 1024 	addw	r0, r5, #2340	; 0x924
    1eac:	f7fe f8dc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1eb0:	a801      	add	r0, sp, #4
    1eb2:	f7fe f90b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1eb6:	4659      	mov	r1, fp
    1eb8:	a801      	add	r0, sp, #4
    1eba:	f006 fb53 	bl	8564 <String::String(char const*)>
    1ebe:	49a8      	ldr	r1, [pc, #672]	; (2160 <initialize_opcode_info()+0x2078>)
    1ec0:	a805      	add	r0, sp, #20
    1ec2:	f006 fb4f 	bl	8564 <String::String(char const*)>
    1ec6:	4639      	mov	r1, r7
    1ec8:	a809      	add	r0, sp, #36	; 0x24
    1eca:	f006 fb4b 	bl	8564 <String::String(char const*)>
    1ece:	a801      	add	r0, sp, #4
    1ed0:	f240 2e05 	movw	lr, #517	; 0x205
    1ed4:	4601      	mov	r1, r0
    1ed6:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1eda:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1ede:	f7fe f8c3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ee2:	a801      	add	r0, sp, #4
    1ee4:	f7fe f8f2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    1ee8:	499e      	ldr	r1, [pc, #632]	; (2164 <initialize_opcode_info()+0x207c>)
    1eea:	a801      	add	r0, sp, #4
    1eec:	f006 fb3a 	bl	8564 <String::String(char const*)>
    1ef0:	4621      	mov	r1, r4
    1ef2:	a805      	add	r0, sp, #20
    1ef4:	f006 fb36 	bl	8564 <String::String(char const*)>
    1ef8:	4639      	mov	r1, r7
    1efa:	a809      	add	r0, sp, #36	; 0x24
    1efc:	f006 fb32 	bl	8564 <String::String(char const*)>
    1f00:	a801      	add	r0, sp, #4
    1f02:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f06:	4601      	mov	r1, r0
    1f08:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1f0c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f10:	f7fe f8aa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f14:	a801      	add	r0, sp, #4
    1f16:	f7fe f8d9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    1f1a:	4649      	mov	r1, r9
    1f1c:	a801      	add	r0, sp, #4
    1f1e:	f006 fb21 	bl	8564 <String::String(char const*)>
    1f22:	4991      	ldr	r1, [pc, #580]	; (2168 <initialize_opcode_info()+0x2080>)
    1f24:	a805      	add	r0, sp, #20
    1f26:	f006 fb1d 	bl	8564 <String::String(char const*)>
    1f2a:	4641      	mov	r1, r8
    1f2c:	a809      	add	r0, sp, #36	; 0x24
    1f2e:	f006 fb19 	bl	8564 <String::String(char const*)>
    1f32:	f240 2102 	movw	r1, #514	; 0x202
    1f36:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
    1f3a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1f3e:	a901      	add	r1, sp, #4
    1f40:	f7fe f892 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f44:	a801      	add	r0, sp, #4
    1f46:	f7fe f8c1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    1f4a:	4988      	ldr	r1, [pc, #544]	; (216c <initialize_opcode_info()+0x2084>)
    1f4c:	a801      	add	r0, sp, #4
    1f4e:	f006 fb09 	bl	8564 <String::String(char const*)>
    1f52:	4621      	mov	r1, r4
    1f54:	a805      	add	r0, sp, #20
    1f56:	f006 fb05 	bl	8564 <String::String(char const*)>
    1f5a:	4621      	mov	r1, r4
    1f5c:	a809      	add	r0, sp, #36	; 0x24
    1f5e:	f006 fb01 	bl	8564 <String::String(char const*)>
    1f62:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f66:	a901      	add	r1, sp, #4
    1f68:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1f6c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f70:	f7fe f87a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f74:	a801      	add	r0, sp, #4
    1f76:	f7fe f8a9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    1f7a:	4978      	ldr	r1, [pc, #480]	; (215c <initialize_opcode_info()+0x2074>)
    1f7c:	a801      	add	r0, sp, #4
    1f7e:	f006 faf1 	bl	8564 <String::String(char const*)>
    1f82:	4651      	mov	r1, sl
    1f84:	a805      	add	r0, sp, #20
    1f86:	f006 faed 	bl	8564 <String::String(char const*)>
    1f8a:	4631      	mov	r1, r6
    1f8c:	a809      	add	r0, sp, #36	; 0x24
    1f8e:	f44f 7641 	mov.w	r6, #772	; 0x304
    1f92:	f006 fae7 	bl	8564 <String::String(char const*)>
    1f96:	a901      	add	r1, sp, #4
    1f98:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    1f9c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1fa0:	f7fe f862 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fa4:	a801      	add	r0, sp, #4
    1fa6:	f7fe f891 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    1faa:	4649      	mov	r1, r9
    1fac:	a801      	add	r0, sp, #4
    1fae:	f006 fad9 	bl	8564 <String::String(char const*)>
    1fb2:	4651      	mov	r1, sl
    1fb4:	a805      	add	r0, sp, #20
    1fb6:	f006 fad5 	bl	8564 <String::String(char const*)>
    1fba:	4641      	mov	r1, r8
    1fbc:	a809      	add	r0, sp, #36	; 0x24
    1fbe:	f006 fad1 	bl	8564 <String::String(char const*)>
    1fc2:	a901      	add	r1, sp, #4
    1fc4:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
    1fc8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1fcc:	f7fe f84c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fd0:	a801      	add	r0, sp, #4
    1fd2:	f7fe f87b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    1fd6:	4659      	mov	r1, fp
    1fd8:	a801      	add	r0, sp, #4
    1fda:	f006 fac3 	bl	8564 <String::String(char const*)>
    1fde:	4651      	mov	r1, sl
    1fe0:	a805      	add	r0, sp, #20
    1fe2:	f006 fabf 	bl	8564 <String::String(char const*)>
    1fe6:	4639      	mov	r1, r7
    1fe8:	a809      	add	r0, sp, #36	; 0x24
    1fea:	f006 fabb 	bl	8564 <String::String(char const*)>
    1fee:	f240 3206 	movw	r2, #774	; 0x306
    1ff2:	a901      	add	r1, sp, #4
    1ff4:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
    1ff8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ffc:	f7fe f834 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2000:	a801      	add	r0, sp, #4
    2002:	f7fe f863 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    2006:	495a      	ldr	r1, [pc, #360]	; (2170 <initialize_opcode_info()+0x2088>)
    2008:	a801      	add	r0, sp, #4
    200a:	f006 faab 	bl	8564 <String::String(char const*)>
    200e:	4a59      	ldr	r2, [pc, #356]	; (2174 <initialize_opcode_info()+0x208c>)
    2010:	a805      	add	r0, sp, #20
    2012:	4611      	mov	r1, r2
    2014:	f006 faa6 	bl	8564 <String::String(char const*)>
    2018:	4621      	mov	r1, r4
    201a:	a809      	add	r0, sp, #36	; 0x24
    201c:	f006 faa2 	bl	8564 <String::String(char const*)>
    2020:	f240 2202 	movw	r2, #514	; 0x202
    2024:	a901      	add	r1, sp, #4
    2026:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
    202a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    202e:	f7fe f81b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2032:	a801      	add	r0, sp, #4
    2034:	f7fe f84a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    2038:	4649      	mov	r1, r9
    203a:	a801      	add	r0, sp, #4
    203c:	f006 fa92 	bl	8564 <String::String(char const*)>
    2040:	4b4d      	ldr	r3, [pc, #308]	; (2178 <initialize_opcode_info()+0x2090>)
    2042:	a805      	add	r0, sp, #20
    2044:	4619      	mov	r1, r3
    2046:	f006 fa8d 	bl	8564 <String::String(char const*)>
    204a:	4641      	mov	r1, r8
    204c:	a809      	add	r0, sp, #36	; 0x24
    204e:	f006 fa89 	bl	8564 <String::String(char const*)>
    2052:	f240 2e05 	movw	lr, #517	; 0x205
    2056:	a901      	add	r1, sp, #4
    2058:	f605 3094 	addw	r0, r5, #2964	; 0xb94
    205c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    2060:	f7fe f802 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2064:	a801      	add	r0, sp, #4
    2066:	f7fe f831 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    206a:	4649      	mov	r1, r9
    206c:	a801      	add	r0, sp, #4
    206e:	f006 fa79 	bl	8564 <String::String(char const*)>
    2072:	4942      	ldr	r1, [pc, #264]	; (217c <initialize_opcode_info()+0x2094>)
    2074:	a805      	add	r0, sp, #20
    2076:	f006 fa75 	bl	8564 <String::String(char const*)>
    207a:	4641      	mov	r1, r8
    207c:	a809      	add	r0, sp, #36	; 0x24
    207e:	f006 fa71 	bl	8564 <String::String(char const*)>
    2082:	f44f 7c01 	mov.w	ip, #516	; 0x204
    2086:	a901      	add	r1, sp, #4
    2088:	f605 4064 	addw	r0, r5, #3172	; 0xc64
    208c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    2090:	f7fd ffea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2094:	a801      	add	r0, sp, #4
    2096:	f7fe f819 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    209a:	4659      	mov	r1, fp
    209c:	a801      	add	r0, sp, #4
    209e:	f006 fa61 	bl	8564 <String::String(char const*)>
    20a2:	4936      	ldr	r1, [pc, #216]	; (217c <initialize_opcode_info()+0x2094>)
    20a4:	a805      	add	r0, sp, #20
    20a6:	f006 fa5d 	bl	8564 <String::String(char const*)>
    20aa:	4639      	mov	r1, r7
    20ac:	a809      	add	r0, sp, #36	; 0x24
    20ae:	f006 fa59 	bl	8564 <String::String(char const*)>
    20b2:	f240 2306 	movw	r3, #518	; 0x206
    20b6:	a901      	add	r1, sp, #4
    20b8:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    20bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20c0:	f7fd ffd2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20c4:	a801      	add	r0, sp, #4
    20c6:	f7fe f801 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    20ca:	492d      	ldr	r1, [pc, #180]	; (2180 <initialize_opcode_info()+0x2098>)
    20cc:	a801      	add	r0, sp, #4
    20ce:	f006 fa49 	bl	8564 <String::String(char const*)>
    20d2:	4621      	mov	r1, r4
    20d4:	a805      	add	r0, sp, #20
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    20d6:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0xf8] = {"SED","","D",2,1};
    20da:	f006 fa43 	bl	8564 <String::String(char const*)>
    20de:	4929      	ldr	r1, [pc, #164]	; (2184 <initialize_opcode_info()+0x209c>)
    20e0:	a809      	add	r0, sp, #36	; 0x24
    20e2:	f006 fa3f 	bl	8564 <String::String(char const*)>
    20e6:	f44f 7381 	mov.w	r3, #258	; 0x102
    20ea:	a901      	add	r1, sp, #4
    20ec:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    20f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20f4:	f7fd ffb8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20f8:	a801      	add	r0, sp, #4
    20fa:	f7fd ffe7 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    20fe:	4649      	mov	r1, r9
    2100:	a801      	add	r0, sp, #4
    2102:	f006 fa2f 	bl	8564 <String::String(char const*)>
    2106:	4920      	ldr	r1, [pc, #128]	; (2188 <initialize_opcode_info()+0x20a0>)
    2108:	a805      	add	r0, sp, #20
    210a:	f006 fa2b 	bl	8564 <String::String(char const*)>
    210e:	4641      	mov	r1, r8
    2110:	a809      	add	r0, sp, #36	; 0x24
    2112:	f006 fa27 	bl	8564 <String::String(char const*)>
    2116:	a901      	add	r1, sp, #4
    2118:	f605 5034 	addw	r0, r5, #3380	; 0xd34
    211c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2120:	f7fd ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2124:	a801      	add	r0, sp, #4
    2126:	f7fd ffd1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    212a:	4649      	mov	r1, r9
    212c:	a801      	add	r0, sp, #4
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    212e:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2132:	f006 fa17 	bl	8564 <String::String(char const*)>
    2136:	4915      	ldr	r1, [pc, #84]	; (218c <initialize_opcode_info()+0x20a4>)
    2138:	a805      	add	r0, sp, #20
    213a:	f006 fa13 	bl	8564 <String::String(char const*)>
    213e:	4641      	mov	r1, r8
    2140:	a809      	add	r0, sp, #36	; 0x24
    2142:	f006 fa0f 	bl	8564 <String::String(char const*)>
    2146:	a901      	add	r1, sp, #4
    2148:	f605 6004 	addw	r0, r5, #3588	; 0xe04
    214c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2150:	f7fd ff8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2154:	a801      	add	r0, sp, #4
    2156:	e01f      	b.n	2198 <initialize_opcode_info()+0x20b0>
    2158:	20000888 	.word	0x20000888
    215c:	200009bc 	.word	0x200009bc
    2160:	20000894 	.word	0x20000894
    2164:	200009c8 	.word	0x200009c8
    2168:	200008a4 	.word	0x200008a4
    216c:	200009cc 	.word	0x200009cc
    2170:	200009d0 	.word	0x200009d0
    2174:	200008b4 	.word	0x200008b4
    2178:	200008b8 	.word	0x200008b8
    217c:	200008c0 	.word	0x200008c0
    2180:	200009d4 	.word	0x200009d4
    2184:	200009b8 	.word	0x200009b8
    2188:	200008d0 	.word	0x200008d0
    218c:	200008d8 	.word	0x200008d8
    2190:	20000930 	.word	0x20000930
    2194:	200009c4 	.word	0x200009c4
    2198:	f7fd ff98 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    219c:	4659      	mov	r1, fp
    219e:	a801      	add	r0, sp, #4
    21a0:	f006 f9e0 	bl	8564 <String::String(char const*)>
    21a4:	490a      	ldr	r1, [pc, #40]	; (21d0 <initialize_opcode_info()+0x20e8>)
    21a6:	a805      	add	r0, sp, #20
    21a8:	f006 f9dc 	bl	8564 <String::String(char const*)>
    21ac:	4639      	mov	r1, r7
    21ae:	a809      	add	r0, sp, #36	; 0x24
    21b0:	f006 f9d8 	bl	8564 <String::String(char const*)>
    21b4:	a901      	add	r1, sp, #4
    21b6:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    21ba:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    21be:	f7fd ff53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21c2:	a801      	add	r0, sp, #4
    21c4:	f7fd ff82 	bl	cc <OpDecoder::~OpDecoder()>
    21c8:	b00f      	add	sp, #60	; 0x3c
    21ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ce:	bf00      	nop
    21d0:	200008d8 	.word	0x200008d8

000021d4 <check_for_CLK_activity()>:
    21d4:	4a0e      	ldr	r2, [pc, #56]	; (2210 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    21d6:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    21da:	6811      	ldr	r1, [r2, #0]
    21dc:	e004      	b.n	21e8 <check_for_CLK_activity()+0x14>
    21de:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    21e0:	1a5b      	subs	r3, r3, r1
    21e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    21e6:	d812      	bhi.n	220e <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    21e8:	f8dc 0000 	ldr.w	r0, [ip]
    21ec:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    21f0:	d0f5      	beq.n	21de <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    21f2:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    21f6:	e004      	b.n	2202 <check_for_CLK_activity()+0x2e>
    21f8:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    21fa:	1a5b      	subs	r3, r3, r1
    21fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2200:	d804      	bhi.n	220c <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    2202:	6803      	ldr	r3, [r0, #0]
    2204:	04db      	lsls	r3, r3, #19
    2206:	d4f7      	bmi.n	21f8 <check_for_CLK_activity()+0x24>
    return(true);
    2208:	2001      	movs	r0, #1
    220a:	4770      	bx	lr
            return(false);
    220c:	2000      	movs	r0, #0
}
    220e:	4770      	bx	lr
    2210:	20018868 	.word	0x20018868

00002214 <setup>:
void setup() {
    2214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    2218:	2100      	movs	r1, #0
void setup() {
    221a:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    221c:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    221e:	4d94      	ldr	r5, [pc, #592]	; (2470 <setup+0x25c>)
    2220:	f006 fba8 	bl	8974 <pinMode>
    pinMode(PIN_RESET, INPUT);
    2224:	2100      	movs	r1, #0
    2226:	2028      	movs	r0, #40	; 0x28
    2228:	4c92      	ldr	r4, [pc, #584]	; (2474 <setup+0x260>)
    222a:	f006 fba3 	bl	8974 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    222e:	2100      	movs	r1, #0
    2230:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2232:	4f91      	ldr	r7, [pc, #580]	; (2478 <setup+0x264>)
    2234:	f006 fb9e 	bl	8974 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    2238:	2100      	movs	r1, #0
    223a:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    223c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 24cc <setup+0x2b8>
    2240:	f006 fb98 	bl	8974 <pinMode>
    pinMode(PIN_NMI, INPUT);
    2244:	2100      	movs	r1, #0
    2246:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    2248:	f240 28ee 	movw	r8, #750	; 0x2ee
    224c:	f006 fb92 	bl	8974 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2250:	2101      	movs	r1, #1
    2252:	200c      	movs	r0, #12
    2254:	f006 fb8e 	bl	8974 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    2258:	2101      	movs	r1, #1
    225a:	2027      	movs	r0, #39	; 0x27
    225c:	f006 fb8a 	bl	8974 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2260:	2101      	movs	r1, #1
    2262:	201b      	movs	r0, #27
    2264:	f006 fb86 	bl	8974 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    2268:	2101      	movs	r1, #1
    226a:	2026      	movs	r0, #38	; 0x26
    226c:	f006 fb82 	bl	8974 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2270:	2101      	movs	r1, #1
    2272:	201c      	movs	r0, #28
    2274:	f006 fb7e 	bl	8974 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    2278:	2101      	movs	r1, #1
    227a:	2025      	movs	r0, #37	; 0x25
    227c:	f006 fb7a 	bl	8974 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    2280:	2101      	movs	r1, #1
    2282:	201d      	movs	r0, #29
    2284:	f006 fb76 	bl	8974 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2288:	2101      	movs	r1, #1
    228a:	2024      	movs	r0, #36	; 0x24
    228c:	f006 fb72 	bl	8974 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    2290:	2101      	movs	r1, #1
    2292:	201e      	movs	r0, #30
    2294:	f006 fb6e 	bl	8974 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2298:	2101      	movs	r1, #1
    229a:	2023      	movs	r0, #35	; 0x23
    229c:	f006 fb6a 	bl	8974 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    22a0:	2101      	movs	r1, #1
    22a2:	201f      	movs	r0, #31
    22a4:	f006 fb66 	bl	8974 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    22a8:	2101      	movs	r1, #1
    22aa:	2022      	movs	r0, #34	; 0x22
    22ac:	f006 fb62 	bl	8974 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    22b0:	2101      	movs	r1, #1
    22b2:	2020      	movs	r0, #32
    22b4:	f006 fb5e 	bl	8974 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    22b8:	2101      	movs	r1, #1
    22ba:	2021      	movs	r0, #33	; 0x21
    22bc:	f006 fb5a 	bl	8974 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    22c0:	2101      	movs	r1, #1
    22c2:	4608      	mov	r0, r1
    22c4:	f006 fb56 	bl	8974 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    22c8:	2101      	movs	r1, #1
    22ca:	2000      	movs	r0, #0
    22cc:	f006 fb52 	bl	8974 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    22d0:	2101      	movs	r1, #1
    22d2:	2002      	movs	r0, #2
    22d4:	f006 fb4e 	bl	8974 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    22d8:	2101      	movs	r1, #1
    22da:	2017      	movs	r0, #23
    22dc:	f006 fb4a 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    22e0:	2100      	movs	r1, #0
    22e2:	200e      	movs	r0, #14
    22e4:	f006 fb46 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    22e8:	2100      	movs	r1, #0
    22ea:	200f      	movs	r0, #15
    22ec:	f006 fb42 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    22f0:	2100      	movs	r1, #0
    22f2:	2010      	movs	r0, #16
    22f4:	f006 fb3e 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    22f8:	2100      	movs	r1, #0
    22fa:	2011      	movs	r0, #17
    22fc:	f006 fb3a 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    2300:	2100      	movs	r1, #0
    2302:	2012      	movs	r0, #18
    2304:	f006 fb36 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    2308:	2100      	movs	r1, #0
    230a:	2013      	movs	r0, #19
    230c:	f006 fb32 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    2310:	2100      	movs	r1, #0
    2312:	2014      	movs	r0, #20
    2314:	f006 fb2e 	bl	8974 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    2318:	2100      	movs	r1, #0
    231a:	2015      	movs	r0, #21
    231c:	f006 fb2a 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2320:	2101      	movs	r1, #1
    2322:	200b      	movs	r0, #11
    2324:	f006 fb26 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    2328:	2101      	movs	r1, #1
    232a:	200a      	movs	r0, #10
    232c:	f006 fb22 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2330:	2101      	movs	r1, #1
    2332:	2009      	movs	r0, #9
    2334:	f006 fb1e 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    2338:	2101      	movs	r1, #1
    233a:	2008      	movs	r0, #8
    233c:	f006 fb1a 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2340:	2101      	movs	r1, #1
    2342:	2007      	movs	r0, #7
    2344:	f006 fb16 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    2348:	2101      	movs	r1, #1
    234a:	2006      	movs	r0, #6
    234c:	f006 fb12 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2350:	2101      	movs	r1, #1
    2352:	2005      	movs	r0, #5
    2354:	f006 fb0e 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    2358:	2101      	movs	r1, #1
    235a:	2004      	movs	r0, #4
    235c:	f006 fb0a 	bl	8974 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2360:	2101      	movs	r1, #1
    2362:	2003      	movs	r0, #3
    2364:	f006 fb06 	bl	8974 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    2368:	f44f 6200 	mov.w	r2, #2048	; 0x800
    236c:	4943      	ldr	r1, [pc, #268]	; (247c <setup+0x268>)
    236e:	4844      	ldr	r0, [pc, #272]	; (2480 <setup+0x26c>)
    2370:	f006 fb40 	bl	89f4 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2374:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2378:	4942      	ldr	r1, [pc, #264]	; (2484 <setup+0x270>)
    237a:	4843      	ldr	r0, [pc, #268]	; (2488 <setup+0x274>)
    237c:	f006 fb3a 	bl	89f4 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    2380:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2384:	4941      	ldr	r1, [pc, #260]	; (248c <setup+0x278>)
    2386:	4842      	ldr	r0, [pc, #264]	; (2490 <setup+0x27c>)
    2388:	f006 fb34 	bl	89f4 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2390:	4940      	ldr	r1, [pc, #256]	; (2494 <setup+0x280>)
    2392:	4841      	ldr	r0, [pc, #260]	; (2498 <setup+0x284>)
    2394:	f006 fb2e 	bl	89f4 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2398:	f44f 6200 	mov.w	r2, #2048	; 0x800
    239c:	493f      	ldr	r1, [pc, #252]	; (249c <setup+0x288>)
    239e:	4840      	ldr	r0, [pc, #256]	; (24a0 <setup+0x28c>)
    23a0:	f006 fb28 	bl	89f4 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    23a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23a8:	493e      	ldr	r1, [pc, #248]	; (24a4 <setup+0x290>)
    23aa:	483f      	ldr	r0, [pc, #252]	; (24a8 <setup+0x294>)
    23ac:	f006 fb22 	bl	89f4 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    23b0:	682e      	ldr	r6, [r5, #0]
		yield();
    23b2:	f007 fd5d 	bl	9e70 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23b6:	7823      	ldrb	r3, [r4, #0]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d03e      	beq.n	243a <setup+0x226>
    23bc:	783b      	ldrb	r3, [r7, #0]
    23be:	07db      	lsls	r3, r3, #31
    23c0:	d53b      	bpl.n	243a <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23c2:	682b      	ldr	r3, [r5, #0]
    23c4:	f8d9 2000 	ldr.w	r2, [r9]
    23c8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23ca:	2b0e      	cmp	r3, #14
    23cc:	d935      	bls.n	243a <setup+0x226>
    Serial.setTimeout(5000);
    23ce:	f241 3188 	movw	r1, #5000	; 0x1388
    23d2:	4836      	ldr	r0, [pc, #216]	; (24ac <setup+0x298>)
    23d4:	f006 f86a 	bl	84ac <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    23d8:	4935      	ldr	r1, [pc, #212]	; (24b0 <setup+0x29c>)
    23da:	4668      	mov	r0, sp
    23dc:	f006 f8c2 	bl	8564 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    23e0:	4669      	mov	r1, sp
    23e2:	a804      	add	r0, sp, #16
    23e4:	f006 f864 	bl	84b0 <String::String(String const&)>
    23e8:	4932      	ldr	r1, [pc, #200]	; (24b4 <setup+0x2a0>)
    23ea:	a804      	add	r0, sp, #16
    23ec:	f006 f956 	bl	869c <operator+(StringSumHelper const&, char const*)>
    23f0:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    23f2:	482e      	ldr	r0, [pc, #184]	; (24ac <setup+0x298>)
    23f4:	f006 f814 	bl	8420 <Print::print(String const&)>
    23f8:	482c      	ldr	r0, [pc, #176]	; (24ac <setup+0x298>)
    23fa:	f006 f837 	bl	846c <Print::println()>
class StringSumHelper : public String
    23fe:	a804      	add	r0, sp, #16
    2400:	f006 f874 	bl	84ec <String::~String()>
    2404:	4668      	mov	r0, sp
    2406:	f006 f871 	bl	84ec <String::~String()>
    if ( !check_for_CLK_activity() ) {
    240a:	f7ff fee3 	bl	21d4 <check_for_CLK_activity()>
    240e:	bb08      	cbnz	r0, 2454 <setup+0x240>
        debug_mode = true;
    2410:	4829      	ldr	r0, [pc, #164]	; (24b8 <setup+0x2a4>)
    2412:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    2414:	4b29      	ldr	r3, [pc, #164]	; (24bc <setup+0x2a8>)
    2416:	2203      	movs	r2, #3
        debug_mode = true;
    2418:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    241a:	2146      	movs	r1, #70	; 0x46
    241c:	4828      	ldr	r0, [pc, #160]	; (24c0 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    241e:	701a      	strb	r2, [r3, #0]
    2420:	f007 fca8 	bl	9d74 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2424:	4821      	ldr	r0, [pc, #132]	; (24ac <setup+0x298>)
    2426:	f006 f821 	bl	846c <Print::println()>
    run_mode = WAITING;
    242a:	4b26      	ldr	r3, [pc, #152]	; (24c4 <setup+0x2b0>)
    242c:	2200      	movs	r2, #0
    242e:	701a      	strb	r2, [r3, #0]
}
    2430:	b009      	add	sp, #36	; 0x24
    2432:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    2436:	f7fd be57 	b.w	e8 <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    243a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    243c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    243e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2440:	b12a      	cbz	r2, 244e <setup+0x23a>
				if (elapsed > 2000) break;
    2442:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2446:	d8c2      	bhi.n	23ce <setup+0x1ba>
			yield();
    2448:	f007 fd12 	bl	9e70 <yield>
    244c:	e7b1      	b.n	23b2 <setup+0x19e>
				if (elapsed > 750) break;
    244e:	4543      	cmp	r3, r8
    2450:	d9fa      	bls.n	2448 <setup+0x234>
    2452:	e7bc      	b.n	23ce <setup+0x1ba>
        debug_mode = false;
    2454:	2300      	movs	r3, #0
        addr_mode = All_External;
    2456:	4a19      	ldr	r2, [pc, #100]	; (24bc <setup+0x2a8>)
        debug_mode = false;
    2458:	4c17      	ldr	r4, [pc, #92]	; (24b8 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    245a:	2146      	movs	r1, #70	; 0x46
    245c:	481a      	ldr	r0, [pc, #104]	; (24c8 <setup+0x2b4>)
    245e:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2460:	7013      	strb	r3, [r2, #0]
    2462:	f007 fc87 	bl	9d74 <usb_serial_write>
    2466:	4811      	ldr	r0, [pc, #68]	; (24ac <setup+0x298>)
    2468:	f006 f800 	bl	846c <Print::println()>
    246c:	e7dd      	b.n	242a <setup+0x216>
    246e:	bf00      	nop
    2470:	20018868 	.word	0x20018868
    2474:	200188ab 	.word	0x200188ab
    2478:	200188aa 	.word	0x200188aa
    247c:	20001350 	.word	0x20001350
    2480:	200123f0 	.word	0x200123f0
    2484:	20001b50 	.word	0x20001b50
    2488:	20012bf0 	.word	0x20012bf0
    248c:	20002350 	.word	0x20002350
    2490:	200133f0 	.word	0x200133f0
    2494:	20002b50 	.word	0x20002b50
    2498:	20013bf0 	.word	0x20013bf0
    249c:	20003350 	.word	0x20003350
    24a0:	200143f0 	.word	0x200143f0
    24a4:	20003b50 	.word	0x20003b50
    24a8:	20014bf0 	.word	0x20014bf0
    24ac:	20004358 	.word	0x20004358
    24b0:	20001080 	.word	0x20001080
    24b4:	200010a8 	.word	0x200010a8
    24b8:	20004966 	.word	0x20004966
    24bc:	20018894 	.word	0x20018894
    24c0:	200010b0 	.word	0x200010b0
    24c4:	200188a2 	.word	0x200188a2
    24c8:	200010f8 	.word	0x200010f8
    24cc:	20018878 	.word	0x20018878

000024d0 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    24d0:	4b21      	ldr	r3, [pc, #132]	; (2558 <sample_at_CLK_rising_edge()+0x88>)
    24d2:	781b      	ldrb	r3, [r3, #0]
    24d4:	b103      	cbz	r3, 24d8 <sample_at_CLK_rising_edge()+0x8>
    24d6:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    24d8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    24dc:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    24de:	6813      	ldr	r3, [r2, #0]
    24e0:	04db      	lsls	r3, r3, #19
    24e2:	d4fc      	bmi.n	24de <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    24e4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    24e8:	6813      	ldr	r3, [r2, #0]
    24ea:	04d8      	lsls	r0, r3, #19
    24ec:	d5fc      	bpl.n	24e8 <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    24ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    24f2:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    24f4:	04d9      	lsls	r1, r3, #19
    24f6:	d5fc      	bpl.n	24f2 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    24f8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    24fc:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    24fe:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2500:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2504:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2508:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    250a:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    250e:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2512:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2516:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    251a:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    251e:	0cd8      	lsrs	r0, r3, #19
    2520:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2524:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2526:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    252a:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    252e:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2530:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2534:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2538:	4302      	orrs	r2, r0
    253a:	4808      	ldr	r0, [pc, #32]	; (255c <sample_at_CLK_rising_edge()+0x8c>)
    253c:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    253e:	4a08      	ldr	r2, [pc, #32]	; (2560 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2540:	4808      	ldr	r0, [pc, #32]	; (2564 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2542:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2546:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2548:	4a07      	ldr	r2, [pc, #28]	; (2568 <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    254a:	4b08      	ldr	r3, [pc, #32]	; (256c <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    254c:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2550:	7019      	strb	r1, [r3, #0]
}
    2552:	f85d fb04 	ldr.w	pc, [sp], #4
    2556:	bf00      	nop
    2558:	20004966 	.word	0x20004966
    255c:	20018896 	.word	0x20018896
    2560:	20018897 	.word	0x20018897
    2564:	20018899 	.word	0x20018899
    2568:	2001889a 	.word	0x2001889a
    256c:	20018898 	.word	0x20018898

00002570 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2570:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    2574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2578:	d33c      	bcc.n	25f4 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    257a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    257e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2582:	d355      	bcc.n	2630 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2584:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    2588:	b294      	uxth	r4, r2
    258a:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    258e:	d331      	bcc.n	25f4 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2590:	2900      	cmp	r1, #0
    2592:	f000 8118 	beq.w	27c6 <read_byte(unsigned short, bool)+0x256>
    2596:	4cb3      	ldr	r4, [pc, #716]	; (2864 <read_byte(unsigned short, bool)+0x2f4>)
    2598:	f894 8000 	ldrb.w	r8, [r4]
    259c:	f1b8 0f01 	cmp.w	r8, #1
    25a0:	f040 814f 	bne.w	2842 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    25a4:	4ab0      	ldr	r2, [pc, #704]	; (2868 <read_byte(unsigned short, bool)+0x2f8>)
    25a6:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    25aa:	2100      	movs	r1, #0
    current_address = local_address;
    25ac:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    25ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    25b2:	d311      	bcc.n	25d8 <read_byte(unsigned short, bool)+0x68>
    25b4:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    25b8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    25bc:	f0c0 8135 	bcc.w	282a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    25c0:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    25c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    25c8:	f0c0 812f 	bcc.w	282a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    25cc:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    25d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    25d4:	f0c0 8129 	bcc.w	282a <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    25d8:	4ba4      	ldr	r3, [pc, #656]	; (286c <read_byte(unsigned short, bool)+0x2fc>)
    25da:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    25dc:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    25e0:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    25e2:	d02f      	beq.n	2644 <read_byte(unsigned short, bool)+0xd4>
    25e4:	b371      	cbz	r1, 2644 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    25e6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    25ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    25ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    25f2:	e027      	b.n	2644 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    25f4:	4b9e      	ldr	r3, [pc, #632]	; (2870 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    25f6:	781a      	ldrb	r2, [r3, #0]
    25f8:	2a01      	cmp	r2, #1
    25fa:	d906      	bls.n	260a <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    25fc:	4a9b      	ldr	r2, [pc, #620]	; (286c <read_byte(unsigned short, bool)+0x2fc>)
    25fe:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2600:	4b9c      	ldr	r3, [pc, #624]	; (2874 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2602:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2604:	5c18      	ldrb	r0, [r3, r0]
}
    2606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    260a:	4a96      	ldr	r2, [pc, #600]	; (2864 <read_byte(unsigned short, bool)+0x2f4>)
    260c:	f892 8000 	ldrb.w	r8, [r2]
    2610:	2900      	cmp	r1, #0
    2612:	f040 80de 	bne.w	27d2 <read_byte(unsigned short, bool)+0x262>
    2616:	2100      	movs	r1, #0
    current_address = local_address;
    2618:	4a93      	ldr	r2, [pc, #588]	; (2868 <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    261a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    261e:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2620:	f080 811d 	bcs.w	285e <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2624:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    2626:	2b01      	cmp	r3, #1
    2628:	d9d6      	bls.n	25d8 <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    262a:	4b93      	ldr	r3, [pc, #588]	; (2878 <read_byte(unsigned short, bool)+0x308>)
    262c:	781c      	ldrb	r4, [r3, #0]
    262e:	e06c      	b.n	270a <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2630:	2900      	cmp	r1, #0
    2632:	f040 813d 	bne.w	28b0 <read_byte(unsigned short, bool)+0x340>
    2636:	4b8b      	ldr	r3, [pc, #556]	; (2864 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2638:	4c8b      	ldr	r4, [pc, #556]	; (2868 <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    263a:	4a8c      	ldr	r2, [pc, #560]	; (286c <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    263c:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2640:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2642:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2644:	4b8c      	ldr	r3, [pc, #560]	; (2878 <read_byte(unsigned short, bool)+0x308>)
    2646:	781c      	ldrb	r4, [r3, #0]
    2648:	b94c      	cbnz	r4, 265e <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    264a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    264e:	6813      	ldr	r3, [r2, #0]
    2650:	04de      	lsls	r6, r3, #19
    2652:	d4fc      	bmi.n	264e <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2654:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2658:	6813      	ldr	r3, [r2, #0]
    265a:	04dd      	lsls	r5, r3, #19
    265c:	d5fc      	bpl.n	2658 <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    265e:	4e87      	ldr	r6, [pc, #540]	; (287c <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2660:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2664:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2666:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2668:	0a85      	lsrs	r5, r0, #10
    266a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    266e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2672:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2676:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    267a:	4b81      	ldr	r3, [pc, #516]	; (2880 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    267c:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2680:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2682:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2684:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2688:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    268a:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    268c:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    268e:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2692:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2696:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    269a:	433b      	orrs	r3, r7
    269c:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26a0:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26a2:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26a4:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    26ac:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26ae:	4b75      	ldr	r3, [pc, #468]	; (2884 <read_byte(unsigned short, bool)+0x314>)
    26b0:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26b2:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    26b4:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    26b6:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26b8:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    26bc:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    26c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    26c4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    26c6:	0342      	lsls	r2, r0, #13
    26c8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    26cc:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    26ce:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26d0:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    26d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    26d8:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    26da:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26dc:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    26e0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    26e4:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26e6:	f8dc 2000 	ldr.w	r2, [ip]
    26ea:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    26ee:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    26f0:	4a65      	ldr	r2, [pc, #404]	; (2888 <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    26f2:	433b      	orrs	r3, r7
    26f4:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    26f8:	0903      	lsrs	r3, r0, #4
    26fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    26fe:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2700:	6835      	ldr	r5, [r6, #0]
    2702:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2704:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2706:	430b      	orrs	r3, r1
    2708:	6033      	str	r3, [r6, #0]
    return;
    270a:	4d60      	ldr	r5, [pc, #384]	; (288c <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    270c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2710:	f8df e184 	ldr.w	lr, [pc, #388]	; 2898 <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2714:	f8df c188 	ldr.w	ip, [pc, #392]	; 28a0 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2718:	4f5d      	ldr	r7, [pc, #372]	; (2890 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    271a:	4e5e      	ldr	r6, [pc, #376]	; (2894 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    271c:	b1d4      	cbz	r4, 2754 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    271e:	782b      	ldrb	r3, [r5, #0]
    2720:	2b01      	cmp	r3, #1
    2722:	d0fb      	beq.n	271c <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2724:	f1b8 0f01 	cmp.w	r8, #1
    2728:	d005      	beq.n	2736 <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    272a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    272e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    2736:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    273a:	d05d      	beq.n	27f8 <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    273c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2740:	d352      	bcc.n	27e8 <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2742:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    274a:	d247      	bcs.n	27dc <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    274c:	4b49      	ldr	r3, [pc, #292]	; (2874 <read_byte(unsigned short, bool)+0x304>)
    274e:	5c18      	ldrb	r0, [r3, r0]
}
    2750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2754:	6813      	ldr	r3, [r2, #0]
    2756:	04d9      	lsls	r1, r3, #19
    2758:	d4fc      	bmi.n	2754 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    275a:	6813      	ldr	r3, [r2, #0]
    275c:	04db      	lsls	r3, r3, #19
    275e:	d5fc      	bpl.n	275a <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2760:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2762:	04d9      	lsls	r1, r3, #19
    2764:	d5fc      	bpl.n	2760 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2766:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    276a:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    276c:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2770:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2774:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2778:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    277c:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2780:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2784:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2788:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    278c:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2790:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2792:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2796:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    279a:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    279e:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    27a2:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27a6:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    27aa:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    27ae:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    27b2:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27b6:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    27ba:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    27bc:	ea41 010a 	orr.w	r1, r1, sl
    27c0:	f88e 1000 	strb.w	r1, [lr]
    return;
    27c4:	e7ac      	b.n	2720 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    27c6:	4c28      	ldr	r4, [pc, #160]	; (2868 <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    27c8:	4b26      	ldr	r3, [pc, #152]	; (2864 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    27ca:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    27cc:	f893 8000 	ldrb.w	r8, [r3]
    27d0:	e6f2      	b.n	25b8 <read_byte(unsigned short, bool)+0x48>
    27d2:	f1b8 0f01 	cmp.w	r8, #1
    27d6:	f47f af1f 	bne.w	2618 <read_byte(unsigned short, bool)+0xa8>
    27da:	e71c      	b.n	2616 <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    27dc:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    27e0:	b29b      	uxth	r3, r3
    27e2:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    27e6:	d203      	bcs.n	27f0 <read_byte(unsigned short, bool)+0x280>
    27e8:	4b21      	ldr	r3, [pc, #132]	; (2870 <read_byte(unsigned short, bool)+0x300>)
    27ea:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    27ec:	2b00      	cmp	r3, #0
    27ee:	d1ad      	bne.n	274c <read_byte(unsigned short, bool)+0x1dc>
    27f0:	4b29      	ldr	r3, [pc, #164]	; (2898 <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    27f2:	7818      	ldrb	r0, [r3, #0]
}
    27f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    27f8:	4928      	ldr	r1, [pc, #160]	; (289c <read_byte(unsigned short, bool)+0x32c>)
    27fa:	4b27      	ldr	r3, [pc, #156]	; (2898 <read_byte(unsigned short, bool)+0x328>)
    27fc:	780a      	ldrb	r2, [r1, #0]
    27fe:	b9b2      	cbnz	r2, 282e <read_byte(unsigned short, bool)+0x2be>
    2800:	781a      	ldrb	r2, [r3, #0]
    2802:	2a88      	cmp	r2, #136	; 0x88
    2804:	d1f5      	bne.n	27f2 <read_byte(unsigned short, bool)+0x282>
    2806:	2201      	movs	r2, #1
    2808:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    280a:	780a      	ldrb	r2, [r1, #0]
    280c:	2a03      	cmp	r2, #3
    280e:	d1f0      	bne.n	27f2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2810:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2812:	28b0      	cmp	r0, #176	; 0xb0
    2814:	d018      	beq.n	2848 <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    2816:	28b1      	cmp	r0, #177	; 0xb1
    2818:	d044      	beq.n	28a4 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    281a:	28b2      	cmp	r0, #178	; 0xb2
    281c:	d155      	bne.n	28ca <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    281e:	4814      	ldr	r0, [pc, #80]	; (2870 <read_byte(unsigned short, bool)+0x300>)
    2820:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2822:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2824:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2826:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2828:	e7e3      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    282a:	4b11      	ldr	r3, [pc, #68]	; (2870 <read_byte(unsigned short, bool)+0x300>)
    282c:	e6fa      	b.n	2624 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    282e:	2a01      	cmp	r2, #1
    2830:	d00f      	beq.n	2852 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2832:	2a02      	cmp	r2, #2
    2834:	d1ea      	bne.n	280c <read_byte(unsigned short, bool)+0x29c>
    2836:	781a      	ldrb	r2, [r3, #0]
    2838:	2a88      	cmp	r2, #136	; 0x88
    283a:	d1da      	bne.n	27f2 <read_byte(unsigned short, bool)+0x282>
    283c:	2203      	movs	r2, #3
    283e:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2840:	e7d7      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2842:	4b09      	ldr	r3, [pc, #36]	; (2868 <read_byte(unsigned short, bool)+0x2f8>)
    2844:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2846:	e6b7      	b.n	25b8 <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    2848:	2200      	movs	r2, #0
    284a:	4809      	ldr	r0, [pc, #36]	; (2870 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    284c:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    284e:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2850:	e7cf      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2852:	781a      	ldrb	r2, [r3, #0]
    2854:	2a95      	cmp	r2, #149	; 0x95
    2856:	d1d8      	bne.n	280a <read_byte(unsigned short, bool)+0x29a>
    2858:	2202      	movs	r2, #2
    285a:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    285c:	e7c9      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
    285e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2862:	e6a4      	b.n	25ae <read_byte(unsigned short, bool)+0x3e>
    2864:	200188a2 	.word	0x200188a2
    2868:	20018884 	.word	0x20018884
    286c:	2001889d 	.word	0x2001889d
    2870:	20018894 	.word	0x20018894
    2874:	200053f0 	.word	0x200053f0
    2878:	20004966 	.word	0x20004966
    287c:	42004000 	.word	0x42004000
    2880:	6dfffff3 	.word	0x6dfffff3
    2884:	cff3efff 	.word	0xcff3efff
    2888:	7fffff6f 	.word	0x7fffff6f
    288c:	20018899 	.word	0x20018899
    2890:	2001889a 	.word	0x2001889a
    2894:	20018898 	.word	0x20018898
    2898:	20018896 	.word	0x20018896
    289c:	200188a3 	.word	0x200188a3
    28a0:	20018897 	.word	0x20018897
                    addr_mode = Read_Internal_Write_External;
    28a4:	480c      	ldr	r0, [pc, #48]	; (28d8 <read_byte(unsigned short, bool)+0x368>)
    28a6:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    28a8:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    28aa:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    28ac:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    28ae:	e7a0      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    28b0:	4a0a      	ldr	r2, [pc, #40]	; (28dc <read_byte(unsigned short, bool)+0x36c>)
    28b2:	f892 8000 	ldrb.w	r8, [r2]
    28b6:	f1b8 0f01 	cmp.w	r8, #1
    28ba:	f43f ae73 	beq.w	25a4 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    28be:	4908      	ldr	r1, [pc, #32]	; (28e0 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    28c0:	2200      	movs	r2, #0
    28c2:	4b08      	ldr	r3, [pc, #32]	; (28e4 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    28c4:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    28c6:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    28c8:	e68d      	b.n	25e6 <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    28ca:	28b3      	cmp	r0, #179	; 0xb3
    28cc:	d191      	bne.n	27f2 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    28ce:	4c02      	ldr	r4, [pc, #8]	; (28d8 <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    28d0:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    28d2:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    28d4:	7008      	strb	r0, [r1, #0]
    28d6:	e78c      	b.n	27f2 <read_byte(unsigned short, bool)+0x282>
    28d8:	20018894 	.word	0x20018894
    28dc:	200188a2 	.word	0x200188a2
    28e0:	20018884 	.word	0x20018884
    28e4:	2001889d 	.word	0x2001889d

000028e8 <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    28e8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    28ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    28ee:	d201      	bcs.n	28f4 <write_byte(unsigned short, unsigned char)+0xc>
    28f0:	4b77      	ldr	r3, [pc, #476]	; (2ad0 <write_byte(unsigned short, unsigned char)+0x1e8>)
    28f2:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    28f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    28f8:	f0c0 80ad 	bcc.w	2a56 <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    28fc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2904:	d306      	bcc.n	2914 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2906:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    290a:	b29b      	uxth	r3, r3
    290c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2910:	f0c0 80a1 	bcc.w	2a56 <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2914:	4b6f      	ldr	r3, [pc, #444]	; (2ad4 <write_byte(unsigned short, unsigned char)+0x1ec>)
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	b94b      	cbnz	r3, 292e <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    291a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    291e:	6813      	ldr	r3, [r2, #0]
    2920:	04df      	lsls	r7, r3, #19
    2922:	d4fc      	bmi.n	291e <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2924:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2928:	6813      	ldr	r3, [r2, #0]
    292a:	04de      	lsls	r6, r3, #19
    292c:	d5fc      	bpl.n	2928 <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    292e:	4c6a      	ldr	r4, [pc, #424]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2930:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2934:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2936:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    293a:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    293e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2942:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2946:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2948:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    294c:	4b63      	ldr	r3, [pc, #396]	; (2adc <write_byte(unsigned short, unsigned char)+0x1f4>)
    294e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2950:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2952:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2956:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    295a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    295c:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    295e:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2960:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2964:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2968:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    296c:	432b      	orrs	r3, r5
    296e:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2970:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2972:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2974:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    297a:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    297e:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2982:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2984:	4a56      	ldr	r2, [pc, #344]	; (2ae0 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2986:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2988:	4d56      	ldr	r5, [pc, #344]	; (2ae4 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    298a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    298c:	0542      	lsls	r2, r0, #21
    298e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2992:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2994:	0343      	lsls	r3, r0, #13
    2996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    299a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    299c:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    299e:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29a0:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    29a2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    29a6:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29a8:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29aa:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29b2:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29b4:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29b6:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29ba:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    29be:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29c0:	4849      	ldr	r0, [pc, #292]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    29c2:	4332      	orrs	r2, r6
    29c4:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    29c6:	4a49      	ldr	r2, [pc, #292]	; (2aec <write_byte(unsigned short, unsigned char)+0x204>)
    29c8:	6805      	ldr	r5, [r0, #0]
    29ca:	402a      	ands	r2, r5
		if (val) {
    29cc:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    29ce:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    29d2:	ea43 030c 	orr.w	r3, r3, ip
    29d6:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    29d8:	f04f 0304 	mov.w	r3, #4
		if (val) {
    29dc:	d444      	bmi.n	2a68 <write_byte(unsigned short, unsigned char)+0x180>
    29de:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    29e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    29e4:	f04f 0201 	mov.w	r2, #1
    29e8:	4b3b      	ldr	r3, [pc, #236]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    29ea:	d544      	bpl.n	2a76 <write_byte(unsigned short, unsigned char)+0x18e>
    29ec:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    29ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    29f2:	4b39      	ldr	r3, [pc, #228]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    29f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    29f8:	d544      	bpl.n	2a84 <write_byte(unsigned short, unsigned char)+0x19c>
    29fa:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    29fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2a00:	4b35      	ldr	r3, [pc, #212]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2a06:	d544      	bpl.n	2a92 <write_byte(unsigned short, unsigned char)+0x1aa>
    2a08:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2a0e:	4b32      	ldr	r3, [pc, #200]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2a14:	d544      	bpl.n	2aa0 <write_byte(unsigned short, unsigned char)+0x1b8>
    2a16:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2a1c:	4b2e      	ldr	r3, [pc, #184]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2a22:	d544      	bpl.n	2aae <write_byte(unsigned short, unsigned char)+0x1c6>
    2a24:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2a2a:	4b2f      	ldr	r3, [pc, #188]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    2a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2a30:	d544      	bpl.n	2abc <write_byte(unsigned short, unsigned char)+0x1d4>
    2a32:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2a38:	4b2b      	ldr	r3, [pc, #172]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    2a3a:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2a3e:	d044      	beq.n	2aca <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2a44:	4c28      	ldr	r4, [pc, #160]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    2a46:	2520      	movs	r5, #32
    2a48:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2a4c:	f7ff fd40 	bl	24d0 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2a50:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a56:	4b26      	ldr	r3, [pc, #152]	; (2af0 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	2b02      	cmp	r3, #2
    2a5c:	f67f af5a 	bls.w	2914 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2a60:	4b24      	ldr	r3, [pc, #144]	; (2af4 <write_byte(unsigned short, unsigned char)+0x20c>)
    2a62:	2201      	movs	r2, #1
    2a64:	701a      	strb	r2, [r3, #0]
}
    2a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2a68:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2a6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2a6e:	f04f 0201 	mov.w	r2, #1
    2a72:	4b19      	ldr	r3, [pc, #100]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2a74:	d4ba      	bmi.n	29ec <write_byte(unsigned short, unsigned char)+0x104>
    2a76:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2a7c:	4b16      	ldr	r3, [pc, #88]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2a82:	d4ba      	bmi.n	29fa <write_byte(unsigned short, unsigned char)+0x112>
    2a84:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2a8a:	4b13      	ldr	r3, [pc, #76]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2a90:	d4ba      	bmi.n	2a08 <write_byte(unsigned short, unsigned char)+0x120>
    2a92:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2a98:	4b0f      	ldr	r3, [pc, #60]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2a9e:	d4ba      	bmi.n	2a16 <write_byte(unsigned short, unsigned char)+0x12e>
    2aa0:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2aa6:	4b0c      	ldr	r3, [pc, #48]	; (2ad8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2aac:	d4ba      	bmi.n	2a24 <write_byte(unsigned short, unsigned char)+0x13c>
    2aae:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2ab4:	4b0c      	ldr	r3, [pc, #48]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    2ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2aba:	d4ba      	bmi.n	2a32 <write_byte(unsigned short, unsigned char)+0x14a>
    2abc:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2ac2:	4b09      	ldr	r3, [pc, #36]	; (2ae8 <write_byte(unsigned short, unsigned char)+0x200>)
    2ac4:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2ac8:	d1ba      	bne.n	2a40 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2ace:	e7b9      	b.n	2a44 <write_byte(unsigned short, unsigned char)+0x15c>
    2ad0:	200053f0 	.word	0x200053f0
    2ad4:	20004966 	.word	0x20004966
    2ad8:	42004000 	.word	0x42004000
    2adc:	6dfffff3 	.word	0x6dfffff3
    2ae0:	cff3efff 	.word	0xcff3efff
    2ae4:	42008000 	.word	0x42008000
    2ae8:	4200c000 	.word	0x4200c000
    2aec:	7fffff6f 	.word	0x7fffff6f
    2af0:	20018894 	.word	0x20018894
    2af4:	2001889d 	.word	0x2001889d

00002af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2af8:	4a08      	ldr	r2, [pc, #32]	; (2b1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2afa:	0601      	lsls	r1, r0, #24
    2afc:	7813      	ldrb	r3, [r2, #0]
    2afe:	d407      	bmi.n	2b10 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b04:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2b06:	b928      	cbnz	r0, 2b14 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2b08:	f043 0302 	orr.w	r3, r3, #2
    return;
    2b0c:	7013      	strb	r3, [r2, #0]
}
    2b0e:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2b14:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2b18:	7013      	strb	r3, [r2, #0]
}
    2b1a:	4770      	bx	lr
    2b1c:	20004968 	.word	0x20004968

00002b20 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2b20:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <Fetch_Immediate(unsigned char)+0x14>)
    2b24:	2100      	movs	r1, #0
    2b26:	881b      	ldrh	r3, [r3, #0]
    2b28:	4418      	add	r0, r3
    2b2a:	b280      	uxth	r0, r0
    2b2c:	f7ff fd20 	bl	2570 <read_byte(unsigned short, bool)>
}
    2b30:	bd08      	pop	{r3, pc}
    2b32:	bf00      	nop
    2b34:	20018888 	.word	0x20018888

00002b38 <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2b38:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2b3a:	4b07      	ldr	r3, [pc, #28]	; (2b58 <Fetch_ZeroPage()+0x20>)
    2b3c:	2100      	movs	r1, #0
    2b3e:	8818      	ldrh	r0, [r3, #0]
    2b40:	3001      	adds	r0, #1
    2b42:	b280      	uxth	r0, r0
    2b44:	f7ff fd14 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2b48:	4b04      	ldr	r3, [pc, #16]	; (2b5c <Fetch_ZeroPage()+0x24>)
    2b4a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2b4c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2b4e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2b50:	f7ff fd0e 	bl	2570 <read_byte(unsigned short, bool)>
}
    2b54:	bd08      	pop	{r3, pc}
    2b56:	bf00      	nop
    2b58:	20018888 	.word	0x20018888
    2b5c:	20018886 	.word	0x20018886

00002b60 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2b60:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2b62:	4c0c      	ldr	r4, [pc, #48]	; (2b94 <Fetch_ZeroPage_X()+0x34>)
    2b64:	2100      	movs	r1, #0
    2b66:	8820      	ldrh	r0, [r4, #0]
    2b68:	3001      	adds	r0, #1
    2b6a:	b280      	uxth	r0, r0
    2b6c:	f7ff fd00 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2b70:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2b72:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2b74:	2100      	movs	r1, #0
    2b76:	1c58      	adds	r0, r3, #1
    2b78:	b280      	uxth	r0, r0
    2b7a:	f7ff fcf9 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2b7e:	4a06      	ldr	r2, [pc, #24]	; (2b98 <Fetch_ZeroPage_X()+0x38>)
    2b80:	4b06      	ldr	r3, [pc, #24]	; (2b9c <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2b82:	2100      	movs	r1, #0
    2b84:	7812      	ldrb	r2, [r2, #0]
    2b86:	18a0      	adds	r0, r4, r2
    2b88:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2b8a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2b8c:	f7ff fcf0 	bl	2570 <read_byte(unsigned short, bool)>
}
    2b90:	bd10      	pop	{r4, pc}
    2b92:	bf00      	nop
    2b94:	20018888 	.word	0x20018888
    2b98:	200188a0 	.word	0x200188a0
    2b9c:	20018886 	.word	0x20018886

00002ba0 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2ba0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2ba2:	4c0c      	ldr	r4, [pc, #48]	; (2bd4 <Fetch_ZeroPage_Y()+0x34>)
    2ba4:	2100      	movs	r1, #0
    2ba6:	8820      	ldrh	r0, [r4, #0]
    2ba8:	3001      	adds	r0, #1
    2baa:	b280      	uxth	r0, r0
    2bac:	f7ff fce0 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2bb0:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2bb2:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2bb4:	2100      	movs	r1, #0
    2bb6:	1c58      	adds	r0, r3, #1
    2bb8:	b280      	uxth	r0, r0
    2bba:	f7ff fcd9 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    2bbe:	4a06      	ldr	r2, [pc, #24]	; (2bd8 <Fetch_ZeroPage_Y()+0x38>)
    2bc0:	4b06      	ldr	r3, [pc, #24]	; (2bdc <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    2bc2:	2100      	movs	r1, #0
    2bc4:	7812      	ldrb	r2, [r2, #0]
    2bc6:	18a0      	adds	r0, r4, r2
    2bc8:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    2bca:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2bcc:	f7ff fcd0 	bl	2570 <read_byte(unsigned short, bool)>
}
    2bd0:	bd10      	pop	{r4, pc}
    2bd2:	bf00      	nop
    2bd4:	20018888 	.word	0x20018888
    2bd8:	200188a1 	.word	0x200188a1
    2bdc:	20018886 	.word	0x20018886

00002be0 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    2be0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2be2:	4c0b      	ldr	r4, [pc, #44]	; (2c10 <Fetch_Absolute()+0x30>)
    2be4:	2100      	movs	r1, #0
    2be6:	8820      	ldrh	r0, [r4, #0]
    2be8:	3001      	adds	r0, #1
    2bea:	b280      	uxth	r0, r0
    2bec:	f7ff fcc0 	bl	2570 <read_byte(unsigned short, bool)>
    2bf0:	8823      	ldrh	r3, [r4, #0]
    2bf2:	4604      	mov	r4, r0
    2bf4:	2100      	movs	r1, #0
    2bf6:	1c98      	adds	r0, r3, #2
    2bf8:	b280      	uxth	r0, r0
    2bfa:	f7ff fcb9 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    2bfe:	4b05      	ldr	r3, [pc, #20]	; (2c14 <Fetch_Absolute()+0x34>)
    2c00:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    2c04:	2100      	movs	r1, #0
    effective_address = adl + adh;
    2c06:	b280      	uxth	r0, r0
    2c08:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2c0a:	f7ff fcb1 	bl	2570 <read_byte(unsigned short, bool)>
}
    2c0e:	bd10      	pop	{r4, pc}
    2c10:	20018888 	.word	0x20018888
    2c14:	20018886 	.word	0x20018886

00002c18 <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2c1a:	4c14      	ldr	r4, [pc, #80]	; (2c6c <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2c1c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2c1e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2c20:	4d13      	ldr	r5, [pc, #76]	; (2c70 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2c22:	8823      	ldrh	r3, [r4, #0]
    2c24:	1c58      	adds	r0, r3, #1
    2c26:	b280      	uxth	r0, r0
    2c28:	f7ff fca2 	bl	2570 <read_byte(unsigned short, bool)>
    2c2c:	8823      	ldrh	r3, [r4, #0]
    2c2e:	4607      	mov	r7, r0
    2c30:	2100      	movs	r1, #0
    2c32:	1c98      	adds	r0, r3, #2
    2c34:	b280      	uxth	r0, r0
    2c36:	f7ff fc9b 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    2c3a:	4b0e      	ldr	r3, [pc, #56]	; (2c74 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2c3c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2c3e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2c40:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2c42:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    2c44:	443b      	add	r3, r7
    2c46:	4423      	add	r3, r4
    2c48:	b298      	uxth	r0, r3
    2c4a:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2c4c:	f7ff fc90 	bl	2570 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2c50:	2e01      	cmp	r6, #1
    2c52:	d000      	beq.n	2c56 <Fetch_Absolute_X(unsigned char)+0x3e>
}
    2c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2c56:	882b      	ldrh	r3, [r5, #0]
    2c58:	405c      	eors	r4, r3
    2c5a:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2c5e:	d0f9      	beq.n	2c54 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2c60:	2100      	movs	r1, #0
    2c62:	4618      	mov	r0, r3
    2c64:	f7ff fc84 	bl	2570 <read_byte(unsigned short, bool)>
}
    2c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c6a:	bf00      	nop
    2c6c:	20018888 	.word	0x20018888
    2c70:	20018886 	.word	0x20018886
    2c74:	200188a0 	.word	0x200188a0

00002c78 <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2c7a:	4c14      	ldr	r4, [pc, #80]	; (2ccc <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2c7c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2c7e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2c80:	4d13      	ldr	r5, [pc, #76]	; (2cd0 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2c82:	8823      	ldrh	r3, [r4, #0]
    2c84:	1c58      	adds	r0, r3, #1
    2c86:	b280      	uxth	r0, r0
    2c88:	f7ff fc72 	bl	2570 <read_byte(unsigned short, bool)>
    2c8c:	8823      	ldrh	r3, [r4, #0]
    2c8e:	4607      	mov	r7, r0
    2c90:	2100      	movs	r1, #0
    2c92:	1c98      	adds	r0, r3, #2
    2c94:	b280      	uxth	r0, r0
    2c96:	f7ff fc6b 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2c9a:	4b0e      	ldr	r3, [pc, #56]	; (2cd4 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2c9c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2c9e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2ca0:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2ca2:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2ca4:	443b      	add	r3, r7
    2ca6:	4423      	add	r3, r4
    2ca8:	b298      	uxth	r0, r3
    2caa:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2cac:	f7ff fc60 	bl	2570 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2cb0:	2e01      	cmp	r6, #1
    2cb2:	d000      	beq.n	2cb6 <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    2cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2cb6:	882b      	ldrh	r3, [r5, #0]
    2cb8:	405c      	eors	r4, r3
    2cba:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2cbe:	d0f9      	beq.n	2cb4 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2cc0:	2100      	movs	r1, #0
    2cc2:	4618      	mov	r0, r3
    2cc4:	f7ff fc54 	bl	2570 <read_byte(unsigned short, bool)>
}
    2cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cca:	bf00      	nop
    2ccc:	20018888 	.word	0x20018888
    2cd0:	20018886 	.word	0x20018886
    2cd4:	200188a1 	.word	0x200188a1

00002cd8 <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    2cd8:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2cda:	4b11      	ldr	r3, [pc, #68]	; (2d20 <Fetch_Indexed_Indirect_X()+0x48>)
    2cdc:	2100      	movs	r1, #0
    2cde:	8818      	ldrh	r0, [r3, #0]
    2ce0:	3001      	adds	r0, #1
    2ce2:	b280      	uxth	r0, r0
    2ce4:	f7ff fc44 	bl	2570 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    2ce8:	4b0e      	ldr	r3, [pc, #56]	; (2d24 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    2cea:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    2cec:	781c      	ldrb	r4, [r3, #0]
    2cee:	4404      	add	r4, r0
    2cf0:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    2cf2:	4620      	mov	r0, r4
    2cf4:	f7ff fc3c 	bl	2570 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    2cf8:	2100      	movs	r1, #0
    2cfa:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2cfc:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    2cfe:	f7ff fc37 	bl	2570 <read_byte(unsigned short, bool)>
    2d02:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2d04:	2100      	movs	r1, #0
    2d06:	b2e0      	uxtb	r0, r4
    2d08:	f7ff fc32 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2d0c:	4b06      	ldr	r3, [pc, #24]	; (2d28 <Fetch_Indexed_Indirect_X()+0x50>)
    2d0e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    2d12:	2100      	movs	r1, #0
    effective_address = adh + adl;
    2d14:	b280      	uxth	r0, r0
    2d16:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    2d18:	f7ff fc2a 	bl	2570 <read_byte(unsigned short, bool)>
}
    2d1c:	bd38      	pop	{r3, r4, r5, pc}
    2d1e:	bf00      	nop
    2d20:	20018888 	.word	0x20018888
    2d24:	200188a0 	.word	0x200188a0
    2d28:	20018886 	.word	0x20018886

00002d2c <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2d2e:	4b16      	ldr	r3, [pc, #88]	; (2d88 <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2d30:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2d32:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2d34:	4e15      	ldr	r6, [pc, #84]	; (2d8c <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2d36:	881b      	ldrh	r3, [r3, #0]
    2d38:	1c58      	adds	r0, r3, #1
    2d3a:	b280      	uxth	r0, r0
    2d3c:	f7ff fc18 	bl	2570 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    2d40:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2d42:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    2d44:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d46:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    2d48:	f7ff fc12 	bl	2570 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d4c:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    2d4e:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d50:	b2e0      	uxtb	r0, r4
    2d52:	f7ff fc0d 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2d56:	4b0e      	ldr	r3, [pc, #56]	; (2d90 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d58:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2d5a:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2d5c:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2d5e:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2d60:	443b      	add	r3, r7
    2d62:	4423      	add	r3, r4
    2d64:	b298      	uxth	r0, r3
    2d66:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    2d68:	f7ff fc02 	bl	2570 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d6c:	2d01      	cmp	r5, #1
    2d6e:	d000      	beq.n	2d72 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    2d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d72:	8833      	ldrh	r3, [r6, #0]
    2d74:	405c      	eors	r4, r3
    2d76:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2d7a:	d0f9      	beq.n	2d70 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    2d7c:	2100      	movs	r1, #0
    2d7e:	4618      	mov	r0, r3
    2d80:	f7ff fbf6 	bl	2570 <read_byte(unsigned short, bool)>
}
    2d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d86:	bf00      	nop
    2d88:	20018888 	.word	0x20018888
    2d8c:	20018886 	.word	0x20018886
    2d90:	200188a1 	.word	0x200188a1

00002d94 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    2d94:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2d96:	4e0c      	ldr	r6, [pc, #48]	; (2dc8 <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    2d98:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2d9a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2d9c:	4c0b      	ldr	r4, [pc, #44]	; (2dcc <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    2d9e:	8833      	ldrh	r3, [r6, #0]
    2da0:	1c58      	adds	r0, r3, #1
    2da2:	b280      	uxth	r0, r0
    2da4:	f7ff fbe4 	bl	2570 <read_byte(unsigned short, bool)>
    2da8:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    2daa:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    2dac:	2100      	movs	r1, #0
    2dae:	1c98      	adds	r0, r3, #2
    2db0:	b280      	uxth	r0, r0
    2db2:	f7ff fbdd 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2db6:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    2db8:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2dba:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    2dbe:	b280      	uxth	r0, r0
    2dc0:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    2dc2:	f7ff fd91 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2dc6:	bd70      	pop	{r4, r5, r6, pc}
    2dc8:	20018888 	.word	0x20018888
    2dcc:	20018886 	.word	0x20018886

00002dd0 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    2dd0:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2dd2:	4b0b      	ldr	r3, [pc, #44]	; (2e00 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    2dd4:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2dd6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2dd8:	4d0a      	ldr	r5, [pc, #40]	; (2e04 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	1c58      	adds	r0, r3, #1
    2dde:	b280      	uxth	r0, r0
    2de0:	f7ff fbc6 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2de4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2de6:	b280      	uxth	r0, r0
    2de8:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2dea:	f7ff fbc1 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    2dee:	4a06      	ldr	r2, [pc, #24]	; (2e08 <Write_ZeroPage_X(unsigned char)+0x38>)
    2df0:	4621      	mov	r1, r4
    2df2:	882b      	ldrh	r3, [r5, #0]
    2df4:	7810      	ldrb	r0, [r2, #0]
    2df6:	4418      	add	r0, r3
    2df8:	b2c0      	uxtb	r0, r0
    2dfa:	f7ff fd75 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2dfe:	bd38      	pop	{r3, r4, r5, pc}
    2e00:	20018888 	.word	0x20018888
    2e04:	20018886 	.word	0x20018886
    2e08:	200188a0 	.word	0x200188a0

00002e0c <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    2e0c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2e0e:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    2e10:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2e12:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e14:	4d0a      	ldr	r5, [pc, #40]	; (2e40 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2e16:	881b      	ldrh	r3, [r3, #0]
    2e18:	1c58      	adds	r0, r3, #1
    2e1a:	b280      	uxth	r0, r0
    2e1c:	f7ff fba8 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2e20:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e22:	b280      	uxth	r0, r0
    2e24:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2e26:	f7ff fba3 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    2e2a:	4a06      	ldr	r2, [pc, #24]	; (2e44 <Write_ZeroPage_Y(unsigned char)+0x38>)
    2e2c:	4621      	mov	r1, r4
    2e2e:	882b      	ldrh	r3, [r5, #0]
    2e30:	7810      	ldrb	r0, [r2, #0]
    2e32:	4418      	add	r0, r3
    2e34:	b2c0      	uxtb	r0, r0
    2e36:	f7ff fd57 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2e3a:	bd38      	pop	{r3, r4, r5, pc}
    2e3c:	20018888 	.word	0x20018888
    2e40:	20018886 	.word	0x20018886
    2e44:	200188a1 	.word	0x200188a1

00002e48 <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    2e48:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2e4a:	4d0f      	ldr	r5, [pc, #60]	; (2e88 <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    2e4c:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2e4e:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2e50:	4e0e      	ldr	r6, [pc, #56]	; (2e8c <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    2e52:	882b      	ldrh	r3, [r5, #0]
    2e54:	1c58      	adds	r0, r3, #1
    2e56:	b280      	uxth	r0, r0
    2e58:	f7ff fb8a 	bl	2570 <read_byte(unsigned short, bool)>
    2e5c:	882b      	ldrh	r3, [r5, #0]
    2e5e:	4605      	mov	r5, r0
    2e60:	2100      	movs	r1, #0
    2e62:	1c98      	adds	r0, r3, #2
    2e64:	b280      	uxth	r0, r0
    2e66:	f7ff fb83 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    2e6a:	4b09      	ldr	r3, [pc, #36]	; (2e90 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    2e6c:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	442b      	add	r3, r5
    2e72:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2e76:	b298      	uxth	r0, r3
    2e78:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    2e7a:	f7ff fb79 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2e7e:	4621      	mov	r1, r4
    2e80:	8830      	ldrh	r0, [r6, #0]
    2e82:	f7ff fd31 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2e86:	bd70      	pop	{r4, r5, r6, pc}
    2e88:	20018888 	.word	0x20018888
    2e8c:	20018886 	.word	0x20018886
    2e90:	200188a0 	.word	0x200188a0

00002e94 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    2e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2e96:	4c16      	ldr	r4, [pc, #88]	; (2ef0 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    2e98:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2e9a:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2e9c:	4d15      	ldr	r5, [pc, #84]	; (2ef4 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2e9e:	8823      	ldrh	r3, [r4, #0]
    2ea0:	1c58      	adds	r0, r3, #1
    2ea2:	b280      	uxth	r0, r0
    2ea4:	f7ff fb64 	bl	2570 <read_byte(unsigned short, bool)>
    2ea8:	8823      	ldrh	r3, [r4, #0]
    2eaa:	4607      	mov	r7, r0
    2eac:	2100      	movs	r1, #0
    2eae:	1c98      	adds	r0, r3, #2
    2eb0:	b280      	uxth	r0, r0
    2eb2:	f7ff fb5d 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    2eb6:	4b10      	ldr	r3, [pc, #64]	; (2ef8 <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    2eb8:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    2eba:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2ebc:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2ebe:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    2ec0:	443b      	add	r3, r7
    2ec2:	4423      	add	r3, r4
    2ec4:	b298      	uxth	r0, r3
    2ec6:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2ec8:	f7ff fb52 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    2ecc:	8828      	ldrh	r0, [r5, #0]
    2ece:	4044      	eors	r4, r0
    2ed0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2ed4:	d103      	bne.n	2ede <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    2ed6:	4631      	mov	r1, r6
    2ed8:	f7ff fd06 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    2ede:	2100      	movs	r1, #0
    2ee0:	f7ff fb46 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2ee4:	8828      	ldrh	r0, [r5, #0]
    2ee6:	4631      	mov	r1, r6
    2ee8:	f7ff fcfe 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eee:	bf00      	nop
    2ef0:	20018888 	.word	0x20018888
    2ef4:	20018886 	.word	0x20018886
    2ef8:	200188a1 	.word	0x200188a1

00002efc <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    2efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2efe:	4b13      	ldr	r3, [pc, #76]	; (2f4c <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    2f00:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2f02:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    2f04:	4f12      	ldr	r7, [pc, #72]	; (2f50 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    2f06:	881b      	ldrh	r3, [r3, #0]
    2f08:	1c58      	adds	r0, r3, #1
    2f0a:	b280      	uxth	r0, r0
    2f0c:	f7ff fb30 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    2f10:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    2f12:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    2f14:	4604      	mov	r4, r0
    read_byte(bal, false);
    2f16:	4628      	mov	r0, r5
    2f18:	f7ff fb2a 	bl	2570 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    2f1c:	783b      	ldrb	r3, [r7, #0]
    2f1e:	2100      	movs	r1, #0
    2f20:	441c      	add	r4, r3
    2f22:	b2e0      	uxtb	r0, r4
    2f24:	f7ff fb24 	bl	2570 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    2f28:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    2f2a:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    2f2c:	2100      	movs	r1, #0
    2f2e:	3301      	adds	r3, #1
    2f30:	441d      	add	r5, r3
    2f32:	b2e8      	uxtb	r0, r5
    2f34:	f7ff fb1c 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2f38:	4b06      	ldr	r3, [pc, #24]	; (2f54 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    2f3a:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    2f3e:	4631      	mov	r1, r6
    effective_address = adh + adl;
    2f40:	b280      	uxth	r0, r0
    2f42:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    2f44:	f7ff fcd0 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f4a:	bf00      	nop
    2f4c:	20018888 	.word	0x20018888
    2f50:	200188a0 	.word	0x200188a0
    2f54:	20018886 	.word	0x20018886

00002f58 <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    2f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2f5a:	4b11      	ldr	r3, [pc, #68]	; (2fa0 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    2f5c:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2f5e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2f60:	4f10      	ldr	r7, [pc, #64]	; (2fa4 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    2f62:	881b      	ldrh	r3, [r3, #0]
    2f64:	1c58      	adds	r0, r3, #1
    2f66:	b280      	uxth	r0, r0
    2f68:	f7ff fb02 	bl	2570 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    2f6c:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2f6e:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    2f70:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    2f72:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    2f74:	f7ff fafc 	bl	2570 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    2f78:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    2f7a:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    2f7c:	b2a0      	uxth	r0, r4
    2f7e:	f7ff faf7 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2f82:	4b09      	ldr	r3, [pc, #36]	; (2fa8 <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    2f84:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2f86:	781b      	ldrb	r3, [r3, #0]
    2f88:	4433      	add	r3, r6
    2f8a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2f8e:	b298      	uxth	r0, r3
    2f90:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    2f92:	f7ff faed 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2f96:	4629      	mov	r1, r5
    2f98:	8838      	ldrh	r0, [r7, #0]
    2f9a:	f7ff fca5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
}
    2f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fa0:	20018888 	.word	0x20018888
    2fa4:	20018886 	.word	0x20018886
    2fa8:	200188a1 	.word	0x200188a1

00002fac <reset_sequence()>:
void reset_sequence() {
    2fac:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2fae:	4b65      	ldr	r3, [pc, #404]	; (3144 <reset_sequence()+0x198>)
    2fb0:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    2fb2:	4d65      	ldr	r5, [pc, #404]	; (3148 <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2fb4:	2002      	movs	r0, #2
    2fb6:	4965      	ldr	r1, [pc, #404]	; (314c <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    2fb8:	4c65      	ldr	r4, [pc, #404]	; (3150 <reset_sequence()+0x1a4>)
    2fba:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    2fbe:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2fc4:	8828      	ldrh	r0, [r5, #0]
    2fc6:	f7ff fad3 	bl	2570 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    2fca:	8828      	ldrh	r0, [r5, #0]
    2fcc:	2100      	movs	r1, #0
    2fce:	3001      	adds	r0, #1
    2fd0:	b280      	uxth	r0, r0
    2fd2:	f7ff facd 	bl	2570 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    2fd6:	7820      	ldrb	r0, [r4, #0]
    2fd8:	2100      	movs	r1, #0
    2fda:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2fde:	f7ff fac7 	bl	2570 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    2fe2:	7820      	ldrb	r0, [r4, #0]
    2fe4:	2100      	movs	r1, #0
    2fe6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2fea:	3801      	subs	r0, #1
    2fec:	b280      	uxth	r0, r0
    2fee:	f7ff fabf 	bl	2570 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    2ff2:	7820      	ldrb	r0, [r4, #0]
    2ff4:	2100      	movs	r1, #0
    2ff6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2ffa:	3802      	subs	r0, #2
    2ffc:	b280      	uxth	r0, r0
    2ffe:	f7ff fab7 	bl	2570 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    3002:	2100      	movs	r1, #0
    3004:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    3008:	f7ff fab2 	bl	2570 <read_byte(unsigned short, bool)>
    300c:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    300e:	2100      	movs	r1, #0
    3010:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3014:	f7ff faac 	bl	2570 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    3018:	4a4e      	ldr	r2, [pc, #312]	; (3154 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    301a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    301e:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3020:	4b4d      	ldr	r3, [pc, #308]	; (3158 <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3022:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3024:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3026:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    302a:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    302c:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    302e:	d37b      	bcc.n	3128 <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3030:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3038:	d309      	bcc.n	304e <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    303a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    303e:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3042:	d371      	bcc.n	3128 <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3044:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3048:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    304c:	d36c      	bcc.n	3128 <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    304e:	4b43      	ldr	r3, [pc, #268]	; (315c <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    3050:	2100      	movs	r1, #0
    3052:	4a43      	ldr	r2, [pc, #268]	; (3160 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3054:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3056:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3058:	2b01      	cmp	r3, #1
    305a:	d005      	beq.n	3068 <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    305c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3060:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3068:	4b3e      	ldr	r3, [pc, #248]	; (3164 <reset_sequence()+0x1b8>)
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	b94b      	cbnz	r3, 3082 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    306e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3072:	6813      	ldr	r3, [r2, #0]
    3074:	04d9      	lsls	r1, r3, #19
    3076:	d4fc      	bmi.n	3072 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3078:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    307c:	6813      	ldr	r3, [r2, #0]
    307e:	04db      	lsls	r3, r3, #19
    3080:	d5fc      	bpl.n	307c <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3082:	4e32      	ldr	r6, [pc, #200]	; (314c <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3084:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3088:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    308a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    308c:	06c1      	lsls	r1, r0, #27
    308e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3092:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3096:	682a      	ldr	r2, [r5, #0]
    3098:	4b33      	ldr	r3, [pc, #204]	; (3168 <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    309a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    309e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    30a0:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30a2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    30a6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30aa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    30ac:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    30b0:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30b4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    30b6:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    30ba:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30be:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30c0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    30c2:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    30c4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30c6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30ca:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    30cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30d0:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30d2:	4a26      	ldr	r2, [pc, #152]	; (316c <reset_sequence()+0x1c0>)
    30d4:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    30d6:	4d26      	ldr	r5, [pc, #152]	; (3170 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    30d8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    30da:	0542      	lsls	r2, r0, #21
    30dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    30e0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    30e2:	0343      	lsls	r3, r0, #13
    30e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    30e8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    30ea:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    30ec:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    30f0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    30f4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    30f6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    30fa:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    30fe:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3100:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3104:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3108:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    310a:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    310c:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    310e:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3112:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3114:	480b      	ldr	r0, [pc, #44]	; (3144 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3116:	4332      	orrs	r2, r6
    3118:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    311a:	4a16      	ldr	r2, [pc, #88]	; (3174 <reset_sequence()+0x1c8>)
    311c:	6804      	ldr	r4, [r0, #0]
    311e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3120:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3122:	430b      	orrs	r3, r1
    3124:	6003      	str	r3, [r0, #0]
    return;
    3126:	e003      	b.n	3130 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3128:	4b13      	ldr	r3, [pc, #76]	; (3178 <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	2b01      	cmp	r3, #1
    312e:	d98e      	bls.n	304e <reset_sequence()+0xa2>
    3130:	2110      	movs	r1, #16
    3132:	4812      	ldr	r0, [pc, #72]	; (317c <reset_sequence()+0x1d0>)
    3134:	f006 fe1e 	bl	9d74 <usb_serial_write>
    3138:	4811      	ldr	r0, [pc, #68]	; (3180 <reset_sequence()+0x1d4>)
}
    313a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    313e:	f005 b995 	b.w	846c <Print::println()>
    3142:	bf00      	nop
    3144:	4200c000 	.word	0x4200c000
    3148:	20018888 	.word	0x20018888
    314c:	42004000 	.word	0x42004000
    3150:	20004969 	.word	0x20004969
    3154:	20004968 	.word	0x20004968
    3158:	20018884 	.word	0x20018884
    315c:	200188a2 	.word	0x200188a2
    3160:	2001889d 	.word	0x2001889d
    3164:	20004966 	.word	0x20004966
    3168:	6dfffff3 	.word	0x6dfffff3
    316c:	cff3efff 	.word	0xcff3efff
    3170:	42008000 	.word	0x42008000
    3174:	7fffff6f 	.word	0x7fffff6f
    3178:	20018894 	.word	0x20018894
    317c:	200003cc 	.word	0x200003cc
    3180:	20004358 	.word	0x20004358

00003184 <nmi_handler()>:
void nmi_handler() {
    3184:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3186:	4e67      	ldr	r6, [pc, #412]	; (3324 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    3188:	f7ff f9a2 	bl	24d0 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    318c:	4c66      	ldr	r4, [pc, #408]	; (3328 <nmi_handler()+0x1a4>)
    318e:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3190:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3192:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3194:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    3198:	4d64      	ldr	r5, [pc, #400]	; (332c <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    319a:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    319c:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31a0:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    31a2:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    31a4:	f7ff f9e4 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    31a8:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    31aa:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    31ac:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31b0:	0a09      	lsrs	r1, r1, #8
    31b2:	f7ff fb99 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31b6:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31b8:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    31ba:	3801      	subs	r0, #1
    31bc:	b2c0      	uxtb	r0, r0
    31be:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31c0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31c4:	f7ff fb90 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31c8:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31ca:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    31cc:	3801      	subs	r0, #1
    31ce:	b2c0      	uxtb	r0, r0
    31d0:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    31d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    31d6:	f7ff fb87 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    31da:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    31dc:	2100      	movs	r1, #0
    31de:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    31e2:	3b01      	subs	r3, #1
    31e4:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    31e6:	f7ff f9c3 	bl	2570 <read_byte(unsigned short, bool)>
    31ea:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    31ec:	2100      	movs	r1, #0
    31ee:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    31f2:	f7ff f9bd 	bl	2570 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    31f6:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    31f8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    31fc:	4a4c      	ldr	r2, [pc, #304]	; (3330 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    31fe:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3202:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3204:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3206:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    320a:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    320c:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    320e:	d37b      	bcc.n	3308 <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3210:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3218:	d309      	bcc.n	322e <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    321a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    321e:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3222:	d371      	bcc.n	3308 <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3224:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3228:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    322c:	d36c      	bcc.n	3308 <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    322e:	4b41      	ldr	r3, [pc, #260]	; (3334 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3230:	2100      	movs	r1, #0
    3232:	4a41      	ldr	r2, [pc, #260]	; (3338 <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3234:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3236:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3238:	2b01      	cmp	r3, #1
    323a:	d005      	beq.n	3248 <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    323c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3248:	4b3c      	ldr	r3, [pc, #240]	; (333c <nmi_handler()+0x1b8>)
    324a:	781b      	ldrb	r3, [r3, #0]
    324c:	b94b      	cbnz	r3, 3262 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    324e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3252:	6813      	ldr	r3, [r2, #0]
    3254:	04d9      	lsls	r1, r3, #19
    3256:	d4fc      	bmi.n	3252 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    3258:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    325c:	6813      	ldr	r3, [r2, #0]
    325e:	04db      	lsls	r3, r3, #19
    3260:	d5fc      	bpl.n	325c <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3262:	4e37      	ldr	r6, [pc, #220]	; (3340 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3264:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3268:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    326a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    326c:	06c1      	lsls	r1, r0, #27
    326e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3272:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3276:	682a      	ldr	r2, [r5, #0]
    3278:	4b32      	ldr	r3, [pc, #200]	; (3344 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    327a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    327e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3280:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3282:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3286:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    328a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    328c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3290:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3294:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3296:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    329a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    329e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32a0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    32a2:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    32a4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32a6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32aa:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    32ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32b0:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32b2:	4a25      	ldr	r2, [pc, #148]	; (3348 <nmi_handler()+0x1c4>)
    32b4:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32b6:	4d25      	ldr	r5, [pc, #148]	; (334c <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    32b8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    32ba:	0542      	lsls	r2, r0, #21
    32bc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    32c0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    32c2:	0343      	lsls	r3, r0, #13
    32c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    32c8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    32ca:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    32cc:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    32d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    32d4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    32d6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    32da:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    32de:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    32e0:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    32e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    32e8:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32ea:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    32ec:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32ee:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    32f2:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32f4:	4816      	ldr	r0, [pc, #88]	; (3350 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    32f6:	4332      	orrs	r2, r6
    32f8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    32fa:	4a16      	ldr	r2, [pc, #88]	; (3354 <nmi_handler()+0x1d0>)
    32fc:	6804      	ldr	r4, [r0, #0]
    32fe:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3300:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3302:	430b      	orrs	r3, r1
    3304:	6003      	str	r3, [r0, #0]
    return;
    3306:	e003      	b.n	3310 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3308:	4b13      	ldr	r3, [pc, #76]	; (3358 <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	2b01      	cmp	r3, #1
    330e:	d98e      	bls.n	322e <nmi_handler()+0xaa>
    3310:	210e      	movs	r1, #14
    3312:	4812      	ldr	r0, [pc, #72]	; (335c <nmi_handler()+0x1d8>)
    3314:	f006 fd2e 	bl	9d74 <usb_serial_write>
    3318:	4811      	ldr	r0, [pc, #68]	; (3360 <nmi_handler()+0x1dc>)
}
    331a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    331e:	f005 b8a5 	b.w	846c <Print::println()>
    3322:	bf00      	nop
    3324:	20004968 	.word	0x20004968
    3328:	20018888 	.word	0x20018888
    332c:	20004969 	.word	0x20004969
    3330:	20018884 	.word	0x20018884
    3334:	200188a2 	.word	0x200188a2
    3338:	2001889d 	.word	0x2001889d
    333c:	20004966 	.word	0x20004966
    3340:	42004000 	.word	0x42004000
    3344:	6dfffff3 	.word	0x6dfffff3
    3348:	cff3efff 	.word	0xcff3efff
    334c:	42008000 	.word	0x42008000
    3350:	4200c000 	.word	0x4200c000
    3354:	7fffff6f 	.word	0x7fffff6f
    3358:	20018894 	.word	0x20018894
    335c:	20000388 	.word	0x20000388
    3360:	20004358 	.word	0x20004358

00003364 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    3364:	b570      	push	{r4, r5, r6, lr}
    3366:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3368:	4e69      	ldr	r6, [pc, #420]	; (3510 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    336a:	f7ff f8b1 	bl	24d0 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    336e:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3370:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3372:	f000 80ca 	beq.w	350a <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    3376:	f023 0310 	bic.w	r3, r3, #16
    337a:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    337e:	4c65      	ldr	r4, [pc, #404]	; (3514 <irq_handler(unsigned char)+0x1b0>)
    3380:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3382:	4d65      	ldr	r5, [pc, #404]	; (3518 <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3384:	8820      	ldrh	r0, [r4, #0]
    3386:	7033      	strb	r3, [r6, #0]
    3388:	3001      	adds	r0, #1
    338a:	b280      	uxth	r0, r0
    338c:	f7ff f8f0 	bl	2570 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    3390:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    3392:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    3394:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3398:	0a09      	lsrs	r1, r1, #8
    339a:	f7ff faa5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    339e:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33a0:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    33a2:	3801      	subs	r0, #1
    33a4:	b2c0      	uxtb	r0, r0
    33a6:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33a8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    33ac:	f7ff fa9c 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    33b0:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33b2:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    33b4:	3801      	subs	r0, #1
    33b6:	b2c0      	uxtb	r0, r0
    33b8:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    33ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    33be:	f7ff fa93 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    33c2:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    33c4:	2100      	movs	r1, #0
    33c6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    33ca:	3b01      	subs	r3, #1
    33cc:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    33ce:	f7ff f8cf 	bl	2570 <read_byte(unsigned short, bool)>
    33d2:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    33d4:	2100      	movs	r1, #0
    33d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    33da:	f7ff f8c9 	bl	2570 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    33de:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    33e0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    33e4:	4a4d      	ldr	r2, [pc, #308]	; (351c <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    33e6:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    33ea:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    33ec:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    33ee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    33f2:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    33f4:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    33f6:	d37b      	bcc.n	34f0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    33f8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    33fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3400:	d309      	bcc.n	3416 <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3402:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3406:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    340a:	d371      	bcc.n	34f0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    340c:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3410:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3414:	d36c      	bcc.n	34f0 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3416:	4b42      	ldr	r3, [pc, #264]	; (3520 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    3418:	2100      	movs	r1, #0
    341a:	4a42      	ldr	r2, [pc, #264]	; (3524 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    341c:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    341e:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3420:	2b01      	cmp	r3, #1
    3422:	d005      	beq.n	3430 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3424:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3428:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    342c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3430:	4b3d      	ldr	r3, [pc, #244]	; (3528 <irq_handler(unsigned char)+0x1c4>)
    3432:	781b      	ldrb	r3, [r3, #0]
    3434:	b94b      	cbnz	r3, 344a <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3436:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    343a:	6813      	ldr	r3, [r2, #0]
    343c:	04d9      	lsls	r1, r3, #19
    343e:	d4fc      	bmi.n	343a <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3440:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3444:	6813      	ldr	r3, [r2, #0]
    3446:	04db      	lsls	r3, r3, #19
    3448:	d5fc      	bpl.n	3444 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    344a:	4e38      	ldr	r6, [pc, #224]	; (352c <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    344c:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3450:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3452:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3454:	06c1      	lsls	r1, r0, #27
    3456:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    345a:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    345e:	682a      	ldr	r2, [r5, #0]
    3460:	4b33      	ldr	r3, [pc, #204]	; (3530 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3462:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3466:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3468:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    346a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    346e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3472:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3474:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3478:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    347c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    347e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3482:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3486:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3488:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    348a:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    348c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    348e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3492:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3498:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    349a:	4a26      	ldr	r2, [pc, #152]	; (3534 <irq_handler(unsigned char)+0x1d0>)
    349c:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    349e:	4d26      	ldr	r5, [pc, #152]	; (3538 <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    34a0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    34a2:	0542      	lsls	r2, r0, #21
    34a4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    34a8:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    34aa:	0343      	lsls	r3, r0, #13
    34ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    34b0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    34b2:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34b4:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    34b8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34bc:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    34be:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34c2:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34c6:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34c8:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34d0:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34d2:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34d4:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34d6:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    34da:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34dc:	4817      	ldr	r0, [pc, #92]	; (353c <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    34de:	4332      	orrs	r2, r6
    34e0:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34e2:	4a17      	ldr	r2, [pc, #92]	; (3540 <irq_handler(unsigned char)+0x1dc>)
    34e4:	6804      	ldr	r4, [r0, #0]
    34e6:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    34e8:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    34ea:	430b      	orrs	r3, r1
    34ec:	6003      	str	r3, [r0, #0]
    return;
    34ee:	e003      	b.n	34f8 <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    34f0:	4b14      	ldr	r3, [pc, #80]	; (3544 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	2b01      	cmp	r3, #1
    34f6:	d98e      	bls.n	3416 <irq_handler(unsigned char)+0xb2>
    34f8:	210e      	movs	r1, #14
    34fa:	4813      	ldr	r0, [pc, #76]	; (3548 <irq_handler(unsigned char)+0x1e4>)
    34fc:	f006 fc3a 	bl	9d74 <usb_serial_write>
    3500:	4812      	ldr	r0, [pc, #72]	; (354c <irq_handler(unsigned char)+0x1e8>)
}
    3502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3506:	f004 bfb1 	b.w	846c <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    350a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    350e:	e736      	b.n	337e <irq_handler(unsigned char)+0x1a>
    3510:	20004968 	.word	0x20004968
    3514:	20018888 	.word	0x20018888
    3518:	20004969 	.word	0x20004969
    351c:	20018884 	.word	0x20018884
    3520:	200188a2 	.word	0x200188a2
    3524:	2001889d 	.word	0x2001889d
    3528:	20004966 	.word	0x20004966
    352c:	42004000 	.word	0x42004000
    3530:	6dfffff3 	.word	0x6dfffff3
    3534:	cff3efff 	.word	0xcff3efff
    3538:	42008000 	.word	0x42008000
    353c:	4200c000 	.word	0x4200c000
    3540:	7fffff6f 	.word	0x7fffff6f
    3544:	20018894 	.word	0x20018894
    3548:	20000378 	.word	0x20000378
    354c:	20004358 	.word	0x20004358

00003550 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    3550:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3552:	4c0f      	ldr	r4, [pc, #60]	; (3590 <opcode_0x0A()+0x40>)
    3554:	2100      	movs	r1, #0
    3556:	8820      	ldrh	r0, [r4, #0]
    3558:	f7ff f80a 	bl	2570 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    355c:	4b0d      	ldr	r3, [pc, #52]	; (3594 <opcode_0x0A()+0x44>)
    355e:	490e      	ldr	r1, [pc, #56]	; (3598 <opcode_0x0A()+0x48>)
    3560:	f993 2000 	ldrsb.w	r2, [r3]
    3564:	7818      	ldrb	r0, [r3, #0]
    3566:	2a00      	cmp	r2, #0
    3568:	780a      	ldrb	r2, [r1, #0]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    356a:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    356e:	bfb4      	ite	lt
    3570:	f042 0201 	orrlt.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3574:	f002 02fe 	andge.w	r2, r2, #254	; 0xfe
    register_a = register_a << 1;
    3578:	b2c0      	uxtb	r0, r0
    357a:	700a      	strb	r2, [r1, #0]
    357c:	7018      	strb	r0, [r3, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    357e:	f7ff fabb 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0A].length);
    3582:	4a06      	ldr	r2, [pc, #24]	; (359c <opcode_0x0A()+0x4c>)
    3584:	8823      	ldrh	r3, [r4, #0]
    3586:	f892 0239 	ldrb.w	r0, [r2, #569]	; 0x239
    358a:	4418      	add	r0, r3
}
    358c:	b280      	uxth	r0, r0
    358e:	bd10      	pop	{r4, pc}
    3590:	20018888 	.word	0x20018888
    3594:	2001889f 	.word	0x2001889f
    3598:	20004968 	.word	0x20004968
    359c:	20015418 	.word	0x20015418

000035a0 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    35a0:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    35a2:	4c0e      	ldr	r4, [pc, #56]	; (35dc <opcode_0x4A()+0x3c>)
    35a4:	2100      	movs	r1, #0
    35a6:	8820      	ldrh	r0, [r4, #0]
    35a8:	f7fe ffe2 	bl	2570 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35ac:	4a0c      	ldr	r2, [pc, #48]	; (35e0 <opcode_0x4A()+0x40>)
    35ae:	490d      	ldr	r1, [pc, #52]	; (35e4 <opcode_0x4A()+0x44>)
    35b0:	7810      	ldrb	r0, [r2, #0]
    35b2:	780b      	ldrb	r3, [r1, #0]
    35b4:	f010 0f01 	tst.w	r0, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    35b8:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35bc:	bf14      	ite	ne
    35be:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    35c2:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    35c6:	7010      	strb	r0, [r2, #0]
    35c8:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    35ca:	f7ff fa95 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4A].length);
    35ce:	4a06      	ldr	r2, [pc, #24]	; (35e8 <opcode_0x4A()+0x48>)
    35d0:	8823      	ldrh	r3, [r4, #0]
    35d2:	f892 0f39 	ldrb.w	r0, [r2, #3897]	; 0xf39
    35d6:	4418      	add	r0, r3
}
    35d8:	b280      	uxth	r0, r0
    35da:	bd10      	pop	{r4, pc}
    35dc:	20018888 	.word	0x20018888
    35e0:	2001889f 	.word	0x2001889f
    35e4:	20004968 	.word	0x20004968
    35e8:	20015418 	.word	0x20015418

000035ec <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    35ec:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    35ee:	4c10      	ldr	r4, [pc, #64]	; (3630 <opcode_0x6A()+0x44>)
    35f0:	2100      	movs	r1, #0
    35f2:	8820      	ldrh	r0, [r4, #0]
    35f4:	f7fe ffbc 	bl	2570 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    35f8:	490e      	ldr	r1, [pc, #56]	; (3634 <opcode_0x6A()+0x48>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35fa:	4a0f      	ldr	r2, [pc, #60]	; (3638 <opcode_0x6A()+0x4c>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    35fc:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    35fe:	f892 c000 	ldrb.w	ip, [r2]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3602:	01d8      	lsls	r0, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3604:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3608:	b2c0      	uxtb	r0, r0
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    360a:	bf14      	ite	ne
    360c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3610:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3614:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    3618:	700b      	strb	r3, [r1, #0]
    361a:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    361c:	f7ff fa6c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x6A].length);
    3620:	4a06      	ldr	r2, [pc, #24]	; (363c <opcode_0x6A()+0x50>)
    3622:	8823      	ldrh	r3, [r4, #0]
    3624:	f892 05b9 	ldrb.w	r0, [r2, #1465]	; 0x5b9
    3628:	4418      	add	r0, r3
}
    362a:	b280      	uxth	r0, r0
    362c:	bd10      	pop	{r4, pc}
    362e:	bf00      	nop
    3630:	20018888 	.word	0x20018888
    3634:	20004968 	.word	0x20004968
    3638:	2001889f 	.word	0x2001889f
    363c:	20016418 	.word	0x20016418

00003640 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3640:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3642:	4c11      	ldr	r4, [pc, #68]	; (3688 <opcode_0x2A()+0x48>)
    3644:	2100      	movs	r1, #0
    3646:	8820      	ldrh	r0, [r4, #0]
    3648:	f7fe ff92 	bl	2570 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    364c:	490f      	ldr	r1, [pc, #60]	; (368c <opcode_0x2A()+0x4c>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    364e:	4a10      	ldr	r2, [pc, #64]	; (3690 <opcode_0x2A()+0x50>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3650:	780b      	ldrb	r3, [r1, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3652:	f992 e000 	ldrsb.w	lr, [r2]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3656:	f003 0001 	and.w	r0, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    365a:	f892 c000 	ldrb.w	ip, [r2]
    365e:	f1be 0f00 	cmp.w	lr, #0
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    3662:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3666:	bfb4      	ite	lt
    3668:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    366c:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    3670:	b2c0      	uxtb	r0, r0
    3672:	700b      	strb	r3, [r1, #0]
    3674:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3676:	f7ff fa3f 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2A].length);
    367a:	4a06      	ldr	r2, [pc, #24]	; (3694 <opcode_0x2A()+0x54>)
    367c:	8823      	ldrh	r3, [r4, #0]
    367e:	f892 08b9 	ldrb.w	r0, [r2, #2233]	; 0x8b9
    3682:	4418      	add	r0, r3
}
    3684:	b280      	uxth	r0, r0
    3686:	bd10      	pop	{r4, pc}
    3688:	20018888 	.word	0x20018888
    368c:	20004968 	.word	0x20004968
    3690:	2001889f 	.word	0x2001889f
    3694:	20015418 	.word	0x20015418

00003698 <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    3698:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    369a:	4c2f      	ldr	r4, [pc, #188]	; (3758 <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    369c:	492f      	ldr	r1, [pc, #188]	; (375c <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    369e:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    36a0:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    36a4:	0716      	lsls	r6, r2, #28
    36a6:	d532      	bpl.n	370e <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    36a8:	f002 0e01 	and.w	lr, r2, #1
    36ac:	f00c 030f 	and.w	r3, ip, #15
    36b0:	f000 050f 	and.w	r5, r0, #15
    36b4:	4473      	add	r3, lr
    36b6:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    36b8:	2b09      	cmp	r3, #9
    36ba:	d823      	bhi.n	3704 <Calculate_ADC(unsigned short)+0x6c>
    36bc:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    36c0:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    36c4:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    36c8:	4435      	add	r5, r6
    36ca:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    36cc:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    36d0:	d838      	bhi.n	3744 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    36d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    36d6:	4473      	add	r3, lr
    36d8:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    36da:	fa4f fc8c 	sxtb.w	ip, ip
    36de:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    36e2:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    36e6:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    36e8:	db20      	blt.n	372c <Calculate_ADC(unsigned short)+0x94>
    36ea:	f1be 0f00 	cmp.w	lr, #0
    36ee:	db1a      	blt.n	3726 <Calculate_ADC(unsigned short)+0x8e>
    36f0:	061d      	lsls	r5, r3, #24
    36f2:	d41f      	bmi.n	3734 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    36f4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    36f8:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    36fa:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    36fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3700:	f7ff b9fa 	b.w	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3704:	3b0a      	subs	r3, #10
    3706:	f04f 0e10 	mov.w	lr, #16
    370a:	b29b      	uxth	r3, r3
    370c:	e7d8      	b.n	36c0 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    370e:	f002 0301 	and.w	r3, r2, #1
    3712:	4403      	add	r3, r0
    3714:	4463      	add	r3, ip
    3716:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3718:	2bff      	cmp	r3, #255	; 0xff
    371a:	bf8c      	ite	hi
    371c:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3720:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3724:	e7d9      	b.n	36da <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    3726:	f1bc 0f00 	cmp.w	ip, #0
    372a:	dae3      	bge.n	36f4 <Calculate_ADC(unsigned short)+0x5c>
    372c:	ea63 030e 	orn	r3, r3, lr
    3730:	061b      	lsls	r3, r3, #24
    3732:	d4df      	bmi.n	36f4 <Calculate_ADC(unsigned short)+0x5c>
    3734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    3738:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    373a:	7022      	strb	r2, [r4, #0]
}
    373c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3740:	f7ff b9da 	b.w	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    3744:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3748:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    374c:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    3750:	f042 0201 	orr.w	r2, r2, #1
    3754:	e7bf      	b.n	36d6 <Calculate_ADC(unsigned short)+0x3e>
    3756:	bf00      	nop
    3758:	20004968 	.word	0x20004968
    375c:	2001889f 	.word	0x2001889f

00003760 <Calculate_SBC(unsigned short)>:
} // 0x71 - ADC - Indirect Indexed  Y

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    3760:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    3762:	4c32      	ldr	r4, [pc, #200]	; (382c <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3764:	4932      	ldr	r1, [pc, #200]	; (3830 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    3766:	7823      	ldrb	r3, [r4, #0]
    3768:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    376a:	071e      	lsls	r6, r3, #28
    376c:	f002 0201 	and.w	r2, r2, #1
    3770:	d539      	bpl.n	37e6 <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3772:	f000 0c0f 	and.w	ip, r0, #15
    3776:	f891 e000 	ldrb.w	lr, [r1]
    377a:	4462      	add	r2, ip
    377c:	f00e 0c0f 	and.w	ip, lr, #15
    3780:	ebac 0c02 	sub.w	ip, ip, r2
    3784:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3788:	f1bc 0f09 	cmp.w	ip, #9
    378c:	d825      	bhi.n	37da <Calculate_SBC(unsigned short)+0x7a>
    378e:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3790:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    3794:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3798:	1b92      	subs	r2, r2, r6
    379a:	1b52      	subs	r2, r2, r5
    379c:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    379e:	2a90      	cmp	r2, #144	; 0x90
    37a0:	d83f      	bhi.n	3822 <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    37a2:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    37a6:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    37aa:	4494      	add	ip, r2
    37ac:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    37b0:	fa4f fe8e 	sxtb.w	lr, lr
    37b4:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    37b6:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    37ba:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    37be:	db24      	blt.n	380a <Calculate_SBC(unsigned short)+0xaa>
    37c0:	2a00      	cmp	r2, #0
    37c2:	da1f      	bge.n	3804 <Calculate_SBC(unsigned short)+0xa4>
    37c4:	f01c 0f80 	tst.w	ip, #128	; 0x80
    37c8:	d123      	bne.n	3812 <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    37ca:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    37ce:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    37d0:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    37d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    37d6:	f7ff b98f 	b.w	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    37da:	f10c 0c0a 	add.w	ip, ip, #10
    37de:	2510      	movs	r5, #16
    37e0:	fa1f fc8c 	uxth.w	ip, ip
    37e4:	e7d4      	b.n	3790 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    37e6:	f891 e000 	ldrb.w	lr, [r1]
    37ea:	ebae 0c00 	sub.w	ip, lr, r0
    37ee:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    37f2:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    37f4:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    37f8:	bf54      	ite	pl
    37fa:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    37fe:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3802:	e7d5      	b.n	37b0 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3804:	f1be 0f00 	cmp.w	lr, #0
    3808:	dadf      	bge.n	37ca <Calculate_SBC(unsigned short)+0x6a>
    380a:	ea42 020c 	orr.w	r2, r2, ip
    380e:	0612      	lsls	r2, r2, #24
    3810:	d4db      	bmi.n	37ca <Calculate_SBC(unsigned short)+0x6a>
    3812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    3816:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3818:	7023      	strb	r3, [r4, #0]
}
    381a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    381e:	f7ff b96b 	b.w	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3822:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3824:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    3828:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    382a:	e7be      	b.n	37aa <Calculate_SBC(unsigned short)+0x4a>
    382c:	20004968 	.word	0x20004968
    3830:	2001889f 	.word	0x2001889f

00003834 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3834:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3836:	4c08      	ldr	r4, [pc, #32]	; (3858 <opcode_0xE9()+0x24>)
    3838:	2100      	movs	r1, #0
    383a:	8820      	ldrh	r0, [r4, #0]
    383c:	3001      	adds	r0, #1
    383e:	b280      	uxth	r0, r0
    3840:	f7fe fe96 	bl	2570 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    3844:	b280      	uxth	r0, r0
    3846:	f7ff ff8b 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    384a:	4a04      	ldr	r2, [pc, #16]	; (385c <opcode_0xE9()+0x28>)
    384c:	8823      	ldrh	r3, [r4, #0]
    384e:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3852:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3854:	b280      	uxth	r0, r0
    3856:	bd10      	pop	{r4, pc}
    3858:	20018888 	.word	0x20018888
    385c:	20017418 	.word	0x20017418

00003860 <opcode_0xEA()>:
} // 0xF1 - SBC - Indirect Indexed  Y

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3860:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3862:	4c07      	ldr	r4, [pc, #28]	; (3880 <opcode_0xEA()+0x20>)
    3864:	2100      	movs	r1, #0
    3866:	8820      	ldrh	r0, [r4, #0]
    3868:	3001      	adds	r0, #1
    386a:	b280      	uxth	r0, r0
    386c:	f7fe fe80 	bl	2570 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3870:	4a04      	ldr	r2, [pc, #16]	; (3884 <opcode_0xEA()+0x24>)
    3872:	8823      	ldrh	r3, [r4, #0]
    3874:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3878:	4418      	add	r0, r3
} // 0xEA - NOP   
    387a:	b280      	uxth	r0, r0
    387c:	bd10      	pop	{r4, pc}
    387e:	bf00      	nop
    3880:	20018888 	.word	0x20018888
    3884:	20017418 	.word	0x20017418

00003888 <opcode_0x08()>:
} // 0x98 - TYA - Transfer Y to Accumulator

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    3888:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    388a:	4d0d      	ldr	r5, [pc, #52]	; (38c0 <opcode_0x08()+0x38>)
    388c:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    388e:	4c0d      	ldr	r4, [pc, #52]	; (38c4 <opcode_0x08()+0x3c>)
    3890:	8828      	ldrh	r0, [r5, #0]
    3892:	3001      	adds	r0, #1
    3894:	b280      	uxth	r0, r0
    3896:	f7fe fe6b 	bl	2570 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    389a:	4b0b      	ldr	r3, [pc, #44]	; (38c8 <opcode_0x08()+0x40>)
    389c:	7820      	ldrb	r0, [r4, #0]
    389e:	7819      	ldrb	r1, [r3, #0]
    38a0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    38a4:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    38a8:	f7ff f81e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    38ac:	4907      	ldr	r1, [pc, #28]	; (38cc <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    38ae:	7823      	ldrb	r3, [r4, #0]
    38b0:	882a      	ldrh	r2, [r5, #0]
    38b2:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    38b6:	3b01      	subs	r3, #1
    38b8:	4410      	add	r0, r2
    38ba:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    38bc:	b280      	uxth	r0, r0
    38be:	bd38      	pop	{r3, r4, r5, pc}
    38c0:	20018888 	.word	0x20018888
    38c4:	20004969 	.word	0x20004969
    38c8:	20004968 	.word	0x20004968
    38cc:	20015418 	.word	0x20015418

000038d0 <opcode_0x48()>:
uint16_t opcode_0x48() {
    38d0:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    38d2:	4d0c      	ldr	r5, [pc, #48]	; (3904 <opcode_0x48()+0x34>)
    38d4:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    38d6:	4c0c      	ldr	r4, [pc, #48]	; (3908 <opcode_0x48()+0x38>)
    38d8:	8828      	ldrh	r0, [r5, #0]
    38da:	3001      	adds	r0, #1
    38dc:	b280      	uxth	r0, r0
    38de:	f7fe fe47 	bl	2570 <read_byte(unsigned short, bool)>
    38e2:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    38e4:	4b09      	ldr	r3, [pc, #36]	; (390c <opcode_0x48()+0x3c>)
    38e6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    38ea:	7819      	ldrb	r1, [r3, #0]
    38ec:	f7fe fffc 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    38f0:	4907      	ldr	r1, [pc, #28]	; (3910 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    38f2:	7823      	ldrb	r3, [r4, #0]
    38f4:	882a      	ldrh	r2, [r5, #0]
    38f6:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    38fa:	3b01      	subs	r3, #1
    38fc:	4410      	add	r0, r2
    38fe:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    3900:	b280      	uxth	r0, r0
    3902:	bd38      	pop	{r3, r4, r5, pc}
    3904:	20018888 	.word	0x20018888
    3908:	20004969 	.word	0x20004969
    390c:	2001889f 	.word	0x2001889f
    3910:	20015418 	.word	0x20015418

00003914 <opcode_0x28()>:
uint16_t opcode_0x28() {
    3914:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3916:	4d11      	ldr	r5, [pc, #68]	; (395c <opcode_0x28()+0x48>)
    3918:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    391a:	4c11      	ldr	r4, [pc, #68]	; (3960 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    391c:	8828      	ldrh	r0, [r5, #0]
    391e:	3001      	adds	r0, #1
    3920:	b280      	uxth	r0, r0
    3922:	f7fe fe25 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3926:	7820      	ldrb	r0, [r4, #0]
    3928:	2100      	movs	r1, #0
    392a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    392e:	f7fe fe1f 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3932:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3934:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3936:	3301      	adds	r3, #1
    3938:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    393a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    393e:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3940:	f7fe fe16 	bl	2570 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    3944:	4b07      	ldr	r3, [pc, #28]	; (3964 <opcode_0x28()+0x50>)
    3946:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    3948:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    394c:	4906      	ldr	r1, [pc, #24]	; (3968 <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    394e:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    3952:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    3954:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    3956:	b280      	uxth	r0, r0
    3958:	bd38      	pop	{r3, r4, r5, pc}
    395a:	bf00      	nop
    395c:	20018888 	.word	0x20018888
    3960:	20004969 	.word	0x20004969
    3964:	20015418 	.word	0x20015418
    3968:	20004968 	.word	0x20004968

0000396c <opcode_0x68()>:
uint16_t opcode_0x68() {
    396c:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    396e:	4d11      	ldr	r5, [pc, #68]	; (39b4 <opcode_0x68()+0x48>)
    3970:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3972:	4c11      	ldr	r4, [pc, #68]	; (39b8 <opcode_0x68()+0x4c>)
    read_byte(register_pc+1, false);
    3974:	8828      	ldrh	r0, [r5, #0]
    3976:	3001      	adds	r0, #1
    3978:	b280      	uxth	r0, r0
    397a:	f7fe fdf9 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    397e:	7820      	ldrb	r0, [r4, #0]
    3980:	2100      	movs	r1, #0
    3982:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3986:	f7fe fdf3 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    398a:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    398c:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    398e:	3301      	adds	r3, #1
    3990:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3992:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3996:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3998:	f7fe fdea 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = pop();
    399c:	4b07      	ldr	r3, [pc, #28]	; (39bc <opcode_0x68()+0x50>)
    399e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    39a0:	f7ff f8aa 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    39a4:	4a06      	ldr	r2, [pc, #24]	; (39c0 <opcode_0x68()+0x54>)
    39a6:	882b      	ldrh	r3, [r5, #0]
    39a8:	f892 0551 	ldrb.w	r0, [r2, #1361]	; 0x551
    39ac:	4418      	add	r0, r3
} // 0x68 - PLA - Pop Accumulator from Stack
    39ae:	b280      	uxth	r0, r0
    39b0:	bd38      	pop	{r3, r4, r5, pc}
    39b2:	bf00      	nop
    39b4:	20018888 	.word	0x20018888
    39b8:	20004969 	.word	0x20004969
    39bc:	2001889f 	.word	0x2001889f
    39c0:	20016418 	.word	0x20016418

000039c4 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    39c4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    39c6:	4c12      	ldr	r4, [pc, #72]	; (3a10 <opcode_0x24()+0x4c>)
    39c8:	2100      	movs	r1, #0
    39ca:	8820      	ldrh	r0, [r4, #0]
    39cc:	3001      	adds	r0, #1
    39ce:	b280      	uxth	r0, r0
    39d0:	f7fe fdce 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    39d4:	4b0f      	ldr	r3, [pc, #60]	; (3a14 <opcode_0x24()+0x50>)
    39d6:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    39d8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    39da:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    39dc:	f7fe fdc8 	bl	2570 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    39e0:	490d      	ldr	r1, [pc, #52]	; (3a18 <opcode_0x24()+0x54>)
    39e2:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    39e6:	780a      	ldrb	r2, [r1, #0]
    39e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    39ec:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    39ee:	4a0b      	ldr	r2, [pc, #44]	; (3a1c <opcode_0x24()+0x58>)
    39f0:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    39f2:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    39f4:	480a      	ldr	r0, [pc, #40]	; (3a20 <opcode_0x24()+0x5c>)
    39f6:	8822      	ldrh	r2, [r4, #0]
    39f8:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    39fc:	bf0c      	ite	eq
    39fe:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3a02:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    3a06:	4410      	add	r0, r2
    3a08:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    3a0a:	b280      	uxth	r0, r0
    3a0c:	bd10      	pop	{r4, pc}
    3a0e:	bf00      	nop
    3a10:	20018888 	.word	0x20018888
    3a14:	20018886 	.word	0x20018886
    3a18:	20004968 	.word	0x20004968
    3a1c:	2001889f 	.word	0x2001889f
    3a20:	20015418 	.word	0x20015418

00003a24 <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    3a24:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    3a26:	f7ff f8db 	bl	2be0 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3a2a:	490d      	ldr	r1, [pc, #52]	; (3a60 <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    3a2c:	4b0d      	ldr	r3, [pc, #52]	; (3a64 <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3a2e:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    3a30:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3a34:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3a38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3a3c:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    3a40:	4809      	ldr	r0, [pc, #36]	; (3a68 <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3a42:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    3a46:	4a09      	ldr	r2, [pc, #36]	; (3a6c <opcode_0x2C()+0x48>)
    3a48:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3a4c:	bf0c      	ite	eq
    3a4e:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3a52:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    3a56:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    3a58:	8813      	ldrh	r3, [r2, #0]
    3a5a:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    3a5c:	b280      	uxth	r0, r0
    3a5e:	bd08      	pop	{r3, pc}
    3a60:	20004968 	.word	0x20004968
    3a64:	2001889f 	.word	0x2001889f
    3a68:	20015418 	.word	0x20015418
    3a6c:	20018888 	.word	0x20018888

00003a70 <Calculate_CMP(unsigned char)>:
void Calculate_CMP(uint8_t local_data) {
    int16_t temp = 0;

    Begin_Fetch_Next_Opcode();

    temp = register_a - local_data;
    3a70:	4b0e      	ldr	r3, [pc, #56]	; (3aac <Calculate_CMP(unsigned char)+0x3c>)

    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3a72:	490f      	ldr	r1, [pc, #60]	; (3ab0 <Calculate_CMP(unsigned char)+0x40>)
    temp = register_a - local_data;
    3a74:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3a76:	780b      	ldrb	r3, [r1, #0]
    3a78:	4282      	cmp	r2, r0
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    3a7a:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3a7e:	bf2c      	ite	cs
    3a80:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3a84:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3a88:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3a8a:	0600      	lsls	r0, r0, #24
    3a8c:	d407      	bmi.n	3a9e <Calculate_CMP(unsigned char)+0x2e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a92:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3a94:	b92a      	cbnz	r2, 3aa2 <Calculate_CMP(unsigned char)+0x32>
    3a96:	f043 0302 	orr.w	r3, r3, #2
    return;
    3a9a:	700b      	strb	r3, [r1, #0]
    return;
}
    3a9c:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3aa2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3aa6:	700b      	strb	r3, [r1, #0]
    3aa8:	4770      	bx	lr
    3aaa:	bf00      	nop
    3aac:	2001889f 	.word	0x2001889f
    3ab0:	20004968 	.word	0x20004968

00003ab4 <opcode_0xC9()>:
uint16_t opcode_0xC9() {
    3ab4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3ab6:	4c0f      	ldr	r4, [pc, #60]	; (3af4 <opcode_0xC9()+0x40>)
    3ab8:	2100      	movs	r1, #0
    3aba:	8820      	ldrh	r0, [r4, #0]
    3abc:	3001      	adds	r0, #1
    3abe:	b280      	uxth	r0, r0
    3ac0:	f7fe fd56 	bl	2570 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    3ac4:	4b0c      	ldr	r3, [pc, #48]	; (3af8 <opcode_0xC9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ac6:	490d      	ldr	r1, [pc, #52]	; (3afc <opcode_0xC9()+0x48>)
    temp = register_a - local_data;
    3ac8:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3aca:	780a      	ldrb	r2, [r1, #0]
    3acc:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3ace:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ad2:	bf94      	ite	ls
    3ad4:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3ad8:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3adc:	b2c0      	uxtb	r0, r0
    3ade:	700a      	strb	r2, [r1, #0]
    3ae0:	f7ff f80a 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    3ae4:	4a06      	ldr	r2, [pc, #24]	; (3b00 <opcode_0xC9()+0x4c>)
    3ae6:	8823      	ldrh	r3, [r4, #0]
    3ae8:	f892 0905 	ldrb.w	r0, [r2, #2309]	; 0x905
    3aec:	4418      	add	r0, r3
} // 0xC9 - CMP - Immediate
    3aee:	b280      	uxth	r0, r0
    3af0:	bd10      	pop	{r4, pc}
    3af2:	bf00      	nop
    3af4:	20018888 	.word	0x20018888
    3af8:	2001889f 	.word	0x2001889f
    3afc:	20004968 	.word	0x20004968
    3b00:	20017418 	.word	0x20017418

00003b04 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    3b04:	b510      	push	{r4, lr}
    3b06:	4c0f      	ldr	r4, [pc, #60]	; (3b44 <opcode_0xE0()+0x40>)
    3b08:	2100      	movs	r1, #0
    3b0a:	8820      	ldrh	r0, [r4, #0]
    3b0c:	3001      	adds	r0, #1
    3b0e:	b280      	uxth	r0, r0
    3b10:	f7fe fd2e 	bl	2570 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3b14:	4b0c      	ldr	r3, [pc, #48]	; (3b48 <opcode_0xE0()+0x44>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b16:	490d      	ldr	r1, [pc, #52]	; (3b4c <opcode_0xE0()+0x48>)
    temp = register_x - local_data;
    3b18:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b1a:	780a      	ldrb	r2, [r1, #0]
    3b1c:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3b1e:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b22:	bf94      	ite	ls
    3b24:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3b28:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3b2c:	b2c0      	uxtb	r0, r0
    3b2e:	700a      	strb	r2, [r1, #0]
    3b30:	f7fe ffe2 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    3b34:	4a06      	ldr	r2, [pc, #24]	; (3b50 <opcode_0xE0()+0x4c>)
    3b36:	8823      	ldrh	r3, [r4, #0]
    3b38:	f892 0db1 	ldrb.w	r0, [r2, #3505]	; 0xdb1
    3b3c:	4418      	add	r0, r3
} // 0xE0 - CPX - Immediate
    3b3e:	b280      	uxth	r0, r0
    3b40:	bd10      	pop	{r4, pc}
    3b42:	bf00      	nop
    3b44:	20018888 	.word	0x20018888
    3b48:	200188a0 	.word	0x200188a0
    3b4c:	20004968 	.word	0x20004968
    3b50:	20017418 	.word	0x20017418

00003b54 <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    3b54:	b510      	push	{r4, lr}
    3b56:	4c12      	ldr	r4, [pc, #72]	; (3ba0 <opcode_0xE4()+0x4c>)
    3b58:	2100      	movs	r1, #0
    3b5a:	8820      	ldrh	r0, [r4, #0]
    3b5c:	3001      	adds	r0, #1
    3b5e:	b280      	uxth	r0, r0
    3b60:	f7fe fd06 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3b64:	4b0f      	ldr	r3, [pc, #60]	; (3ba4 <opcode_0xE4()+0x50>)
    3b66:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3b68:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3b6a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3b6c:	f7fe fd00 	bl	2570 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3b70:	4b0d      	ldr	r3, [pc, #52]	; (3ba8 <opcode_0xE4()+0x54>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b72:	490e      	ldr	r1, [pc, #56]	; (3bac <opcode_0xE4()+0x58>)
    temp = register_x - local_data;
    3b74:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b76:	780a      	ldrb	r2, [r1, #0]
    3b78:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    3b7a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3b7e:	bf2c      	ite	cs
    3b80:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3b84:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3b88:	b2c0      	uxtb	r0, r0
    3b8a:	700a      	strb	r2, [r1, #0]
    3b8c:	f7fe ffb4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    3b90:	4a07      	ldr	r2, [pc, #28]	; (3bb0 <opcode_0xE4()+0x5c>)
    3b92:	8823      	ldrh	r3, [r4, #0]
    3b94:	f892 0e81 	ldrb.w	r0, [r2, #3713]	; 0xe81
    3b98:	4418      	add	r0, r3
} // 0xE4 - CPX - ZeroPage
    3b9a:	b280      	uxth	r0, r0
    3b9c:	bd10      	pop	{r4, pc}
    3b9e:	bf00      	nop
    3ba0:	20018888 	.word	0x20018888
    3ba4:	20018886 	.word	0x20018886
    3ba8:	200188a0 	.word	0x200188a0
    3bac:	20004968 	.word	0x20004968
    3bb0:	20017418 	.word	0x20017418

00003bb4 <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    3bb4:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    3bb6:	f7ff f813 	bl	2be0 <Fetch_Absolute()>
    temp = register_x - local_data;
    3bba:	4b11      	ldr	r3, [pc, #68]	; (3c00 <opcode_0xEC()+0x4c>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3bbc:	4911      	ldr	r1, [pc, #68]	; (3c04 <opcode_0xEC()+0x50>)
    temp = register_x - local_data;
    3bbe:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3bc0:	780b      	ldrb	r3, [r1, #0]
    3bc2:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    3bc4:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3bc8:	bf94      	ite	ls
    3bca:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3bce:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3bd2:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3bd4:	0600      	lsls	r0, r0, #24
    3bd6:	d40e      	bmi.n	3bf6 <opcode_0xEC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3bdc:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3bde:	b962      	cbnz	r2, 3bfa <opcode_0xEC()+0x46>
    3be0:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xEC].length);
    3be4:	4a08      	ldr	r2, [pc, #32]	; (3c08 <opcode_0xEC()+0x54>)
    3be6:	4809      	ldr	r0, [pc, #36]	; (3c0c <opcode_0xEC()+0x58>)
    3be8:	700b      	strb	r3, [r1, #0]
    3bea:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    3bee:	8813      	ldrh	r3, [r2, #0]
    3bf0:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    3bf2:	b280      	uxth	r0, r0
    3bf4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3bfa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3bfe:	e7f1      	b.n	3be4 <opcode_0xEC()+0x30>
    3c00:	200188a0 	.word	0x200188a0
    3c04:	20004968 	.word	0x20004968
    3c08:	20018888 	.word	0x20018888
    3c0c:	20018418 	.word	0x20018418

00003c10 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    3c10:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3c12:	4c0f      	ldr	r4, [pc, #60]	; (3c50 <opcode_0xC0()+0x40>)
    3c14:	2100      	movs	r1, #0
    3c16:	8820      	ldrh	r0, [r4, #0]
    3c18:	3001      	adds	r0, #1
    3c1a:	b280      	uxth	r0, r0
    3c1c:	f7fe fca8 	bl	2570 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    3c20:	4b0c      	ldr	r3, [pc, #48]	; (3c54 <opcode_0xC0()+0x44>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c22:	490d      	ldr	r1, [pc, #52]	; (3c58 <opcode_0xC0()+0x48>)
    temp = register_y - local_data;
    3c24:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c26:	780a      	ldrb	r2, [r1, #0]
    3c28:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c2a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c2e:	bf94      	ite	ls
    3c30:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c34:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c38:	b2c0      	uxtb	r0, r0
    3c3a:	700a      	strb	r2, [r1, #0]
    3c3c:	f7fe ff5c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    3c40:	4a06      	ldr	r2, [pc, #24]	; (3c5c <opcode_0xC0()+0x4c>)
    3c42:	8823      	ldrh	r3, [r4, #0]
    3c44:	f892 0731 	ldrb.w	r0, [r2, #1841]	; 0x731
    3c48:	4418      	add	r0, r3
} // 0xC0 - CPY - Immediate
    3c4a:	b280      	uxth	r0, r0
    3c4c:	bd10      	pop	{r4, pc}
    3c4e:	bf00      	nop
    3c50:	20018888 	.word	0x20018888
    3c54:	200188a1 	.word	0x200188a1
    3c58:	20004968 	.word	0x20004968
    3c5c:	20017418 	.word	0x20017418

00003c60 <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    3c60:	b510      	push	{r4, lr}
    3c62:	4c12      	ldr	r4, [pc, #72]	; (3cac <opcode_0xC4()+0x4c>)
    3c64:	2100      	movs	r1, #0
    3c66:	8820      	ldrh	r0, [r4, #0]
    3c68:	3001      	adds	r0, #1
    3c6a:	b280      	uxth	r0, r0
    3c6c:	f7fe fc80 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3c70:	4b0f      	ldr	r3, [pc, #60]	; (3cb0 <opcode_0xC4()+0x50>)
    3c72:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3c74:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3c76:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3c78:	f7fe fc7a 	bl	2570 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    3c7c:	4b0d      	ldr	r3, [pc, #52]	; (3cb4 <opcode_0xC4()+0x54>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c7e:	490e      	ldr	r1, [pc, #56]	; (3cb8 <opcode_0xC4()+0x58>)
    temp = register_y - local_data;
    3c80:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c82:	780a      	ldrb	r2, [r1, #0]
    3c84:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c86:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c8a:	bf2c      	ite	cs
    3c8c:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c90:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c94:	b2c0      	uxtb	r0, r0
    3c96:	700a      	strb	r2, [r1, #0]
    3c98:	f7fe ff2e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    3c9c:	4a07      	ldr	r2, [pc, #28]	; (3cbc <opcode_0xC4()+0x5c>)
    3c9e:	8823      	ldrh	r3, [r4, #0]
    3ca0:	f892 0801 	ldrb.w	r0, [r2, #2049]	; 0x801
    3ca4:	4418      	add	r0, r3
} // 0xC4 - CPY - ZeroPage
    3ca6:	b280      	uxth	r0, r0
    3ca8:	bd10      	pop	{r4, pc}
    3caa:	bf00      	nop
    3cac:	20018888 	.word	0x20018888
    3cb0:	20018886 	.word	0x20018886
    3cb4:	200188a1 	.word	0x200188a1
    3cb8:	20004968 	.word	0x20004968
    3cbc:	20017418 	.word	0x20017418

00003cc0 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    3cc0:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    3cc2:	f7fe ff8d 	bl	2be0 <Fetch_Absolute()>
    temp = register_y - local_data;
    3cc6:	4b11      	ldr	r3, [pc, #68]	; (3d0c <opcode_0xCC()+0x4c>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3cc8:	4911      	ldr	r1, [pc, #68]	; (3d10 <opcode_0xCC()+0x50>)
    temp = register_y - local_data;
    3cca:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ccc:	780b      	ldrb	r3, [r1, #0]
    3cce:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    3cd0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3cd4:	bf94      	ite	ls
    3cd6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3cda:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3cde:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3ce0:	0600      	lsls	r0, r0, #24
    3ce2:	d40e      	bmi.n	3d02 <opcode_0xCC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ce8:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3cea:	b962      	cbnz	r2, 3d06 <opcode_0xCC()+0x46>
    3cec:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCC].length);
    3cf0:	4a08      	ldr	r2, [pc, #32]	; (3d14 <opcode_0xCC()+0x54>)
    3cf2:	4809      	ldr	r0, [pc, #36]	; (3d18 <opcode_0xCC()+0x58>)
    3cf4:	700b      	strb	r3, [r1, #0]
    3cf6:	f890 09a1 	ldrb.w	r0, [r0, #2465]	; 0x9a1
    3cfa:	8813      	ldrh	r3, [r2, #0]
    3cfc:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    3cfe:	b280      	uxth	r0, r0
    3d00:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3d06:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3d0a:	e7f1      	b.n	3cf0 <opcode_0xCC()+0x30>
    3d0c:	200188a1 	.word	0x200188a1
    3d10:	20004968 	.word	0x20004968
    3d14:	20018888 	.word	0x20018888
    3d18:	20017418 	.word	0x20017418

00003d1c <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    3d1c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    3d1e:	4d17      	ldr	r5, [pc, #92]	; (3d7c <opcode_0x06()+0x60>)
    3d20:	b083      	sub	sp, #12
    3d22:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3d24:	4c16      	ldr	r4, [pc, #88]	; (3d80 <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    3d26:	8828      	ldrh	r0, [r5, #0]
    3d28:	3001      	adds	r0, #1
    3d2a:	b280      	uxth	r0, r0
    3d2c:	f7fe fc20 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    3d30:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3d32:	b280      	uxth	r0, r0
    3d34:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    3d36:	f7fe fc1b 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3d3a:	4a12      	ldr	r2, [pc, #72]	; (3d84 <opcode_0x06()+0x68>)
    3d3c:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3d3e:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3d42:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3d44:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3d46:	bf4c      	ite	mi
    3d48:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3d4c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3d50:	4608      	mov	r0, r1
    3d52:	9101      	str	r1, [sp, #4]
    3d54:	7013      	strb	r3, [r2, #0]
    3d56:	f7fe fecf 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    3d5a:	9901      	ldr	r1, [sp, #4]
    3d5c:	8820      	ldrh	r0, [r4, #0]
    3d5e:	f7fe fdc3 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3d62:	8820      	ldrh	r0, [r4, #0]
    3d64:	9901      	ldr	r1, [sp, #4]
    3d66:	f7fe fdbf 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    3d6a:	4a07      	ldr	r2, [pc, #28]	; (3d88 <opcode_0x06()+0x6c>)
    3d6c:	882b      	ldrh	r3, [r5, #0]
    3d6e:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    3d72:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    3d74:	b280      	uxth	r0, r0
    3d76:	b003      	add	sp, #12
    3d78:	bd30      	pop	{r4, r5, pc}
    3d7a:	bf00      	nop
    3d7c:	20018888 	.word	0x20018888
    3d80:	20018886 	.word	0x20018886
    3d84:	20004968 	.word	0x20004968
    3d88:	20015418 	.word	0x20015418

00003d8c <opcode_0x16()>:
uint16_t opcode_0x16() {
    3d8c:	b510      	push	{r4, lr}
    3d8e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    3d90:	4c11      	ldr	r4, [pc, #68]	; (3dd8 <opcode_0x16()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    3d92:	f7fe fee5 	bl	2b60 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3d96:	4a11      	ldr	r2, [pc, #68]	; (3ddc <opcode_0x16()+0x50>)
    3d98:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3d9a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3d9e:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3da0:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3da2:	bf4c      	ite	mi
    3da4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3da8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3dac:	4608      	mov	r0, r1
    3dae:	9101      	str	r1, [sp, #4]
    3db0:	7013      	strb	r3, [r2, #0]
    3db2:	f7fe fea1 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3db6:	8820      	ldrh	r0, [r4, #0]
    3db8:	9901      	ldr	r1, [sp, #4]
    3dba:	f7fe fd95 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3dbe:	8820      	ldrh	r0, [r4, #0]
    3dc0:	9901      	ldr	r1, [sp, #4]
    3dc2:	f7fe fd91 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    3dc6:	4a06      	ldr	r2, [pc, #24]	; (3de0 <opcode_0x16()+0x54>)
    3dc8:	4b06      	ldr	r3, [pc, #24]	; (3de4 <opcode_0x16()+0x58>)
    3dca:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    3dce:	881b      	ldrh	r3, [r3, #0]
    3dd0:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    3dd2:	b280      	uxth	r0, r0
    3dd4:	b002      	add	sp, #8
    3dd6:	bd10      	pop	{r4, pc}
    3dd8:	20018886 	.word	0x20018886
    3ddc:	20004968 	.word	0x20004968
    3de0:	20015418 	.word	0x20015418
    3de4:	20018888 	.word	0x20018888

00003de8 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    3de8:	b510      	push	{r4, lr}
    3dea:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    3dec:	4c11      	ldr	r4, [pc, #68]	; (3e34 <opcode_0x0E()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    3dee:	f7fe fef7 	bl	2be0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3df2:	4a11      	ldr	r2, [pc, #68]	; (3e38 <opcode_0x0E()+0x50>)
    3df4:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3df6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3dfa:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3dfc:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3dfe:	bf4c      	ite	mi
    3e00:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3e04:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3e08:	4608      	mov	r0, r1
    3e0a:	9101      	str	r1, [sp, #4]
    3e0c:	7013      	strb	r3, [r2, #0]
    3e0e:	f7fe fe73 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3e12:	8820      	ldrh	r0, [r4, #0]
    3e14:	9901      	ldr	r1, [sp, #4]
    3e16:	f7fe fd67 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3e1a:	8820      	ldrh	r0, [r4, #0]
    3e1c:	9901      	ldr	r1, [sp, #4]
    3e1e:	f7fe fd63 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    3e22:	4a06      	ldr	r2, [pc, #24]	; (3e3c <opcode_0x0E()+0x54>)
    3e24:	4b06      	ldr	r3, [pc, #24]	; (3e40 <opcode_0x0E()+0x58>)
    3e26:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    3e2a:	881b      	ldrh	r3, [r3, #0]
    3e2c:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    3e2e:	b280      	uxth	r0, r0
    3e30:	b002      	add	sp, #8
    3e32:	bd10      	pop	{r4, pc}
    3e34:	20018886 	.word	0x20018886
    3e38:	20004968 	.word	0x20004968
    3e3c:	20015418 	.word	0x20015418
    3e40:	20018888 	.word	0x20018888

00003e44 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    3e44:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    3e46:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    3e48:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    3e4a:	f7fe fee5 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e4e:	4a11      	ldr	r2, [pc, #68]	; (3e94 <opcode_0x1E()+0x50>)
    3e50:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3e52:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e56:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3e58:	b2c9      	uxtb	r1, r1
    write_byte(effective_address, local_data);
    3e5a:	4c0f      	ldr	r4, [pc, #60]	; (3e98 <opcode_0x1E()+0x54>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e5c:	bf4c      	ite	mi
    3e5e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3e62:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3e66:	4608      	mov	r0, r1
    3e68:	9101      	str	r1, [sp, #4]
    3e6a:	7013      	strb	r3, [r2, #0]
    3e6c:	f7fe fe44 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3e70:	8820      	ldrh	r0, [r4, #0]
    3e72:	9901      	ldr	r1, [sp, #4]
    3e74:	f7fe fd38 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3e78:	8820      	ldrh	r0, [r4, #0]
    3e7a:	9901      	ldr	r1, [sp, #4]
    3e7c:	f7fe fd34 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    3e80:	4a06      	ldr	r2, [pc, #24]	; (3e9c <opcode_0x1E()+0x58>)
    3e82:	4b07      	ldr	r3, [pc, #28]	; (3ea0 <opcode_0x1E()+0x5c>)
    3e84:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    3e88:	881b      	ldrh	r3, [r3, #0]
    3e8a:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    3e8c:	b280      	uxth	r0, r0
    3e8e:	b002      	add	sp, #8
    3e90:	bd10      	pop	{r4, pc}
    3e92:	bf00      	nop
    3e94:	20004968 	.word	0x20004968
    3e98:	20018886 	.word	0x20018886
    3e9c:	20015418 	.word	0x20015418
    3ea0:	20018888 	.word	0x20018888

00003ea4 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    3ea4:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    3ea6:	4e11      	ldr	r6, [pc, #68]	; (3eec <opcode_0xE6()+0x48>)
    3ea8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3eaa:	4d11      	ldr	r5, [pc, #68]	; (3ef0 <opcode_0xE6()+0x4c>)
    return read_byte(register_pc+offset, false);
    3eac:	8830      	ldrh	r0, [r6, #0]
    3eae:	3001      	adds	r0, #1
    3eb0:	b280      	uxth	r0, r0
    3eb2:	f7fe fb5d 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    3eb6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3eb8:	b280      	uxth	r0, r0
    3eba:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    3ebc:	f7fe fb58 	bl	2570 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    3ec0:	3001      	adds	r0, #1
    global_temp = local_data;
    3ec2:	4b0c      	ldr	r3, [pc, #48]	; (3ef4 <opcode_0xE6()+0x50>)
    local_data = local_data + 1;
    3ec4:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3ec6:	4620      	mov	r0, r4
    global_temp = local_data;
    3ec8:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3eca:	f7fe fe15 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    3ece:	4621      	mov	r1, r4
    3ed0:	8828      	ldrh	r0, [r5, #0]
    3ed2:	f7fe fd09 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3ed6:	8828      	ldrh	r0, [r5, #0]
    3ed8:	4621      	mov	r1, r4
    3eda:	f7fe fd05 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    3ede:	4a06      	ldr	r2, [pc, #24]	; (3ef8 <opcode_0xE6()+0x54>)
    3ee0:	8833      	ldrh	r3, [r6, #0]
    3ee2:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    3ee6:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    3ee8:	b280      	uxth	r0, r0
    3eea:	bd70      	pop	{r4, r5, r6, pc}
    3eec:	20018888 	.word	0x20018888
    3ef0:	20018886 	.word	0x20018886
    3ef4:	2001889c 	.word	0x2001889c
    3ef8:	20017418 	.word	0x20017418

00003efc <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    3efc:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    3efe:	f7fe fe2f 	bl	2b60 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    3f02:	3001      	adds	r0, #1
    global_temp = local_data;
    3f04:	4b11      	ldr	r3, [pc, #68]	; (3f4c <opcode_0xF6()+0x50>)
    local_data = local_data + 1;
    3f06:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f08:	4a11      	ldr	r2, [pc, #68]	; (3f50 <opcode_0xF6()+0x54>)
    3f0a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    3f0c:	701c      	strb	r4, [r3, #0]
    3f0e:	7813      	ldrb	r3, [r2, #0]
    3f10:	d417      	bmi.n	3f42 <opcode_0xF6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f16:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f18:	b9ac      	cbnz	r4, 3f46 <opcode_0xF6()+0x4a>
    3f1a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3f1e:	4d0d      	ldr	r5, [pc, #52]	; (3f54 <opcode_0xF6()+0x58>)
    3f20:	4621      	mov	r1, r4
    3f22:	7013      	strb	r3, [r2, #0]
    3f24:	8828      	ldrh	r0, [r5, #0]
    3f26:	f7fe fcdf 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3f2a:	8828      	ldrh	r0, [r5, #0]
    3f2c:	4621      	mov	r1, r4
    3f2e:	f7fe fcdb 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    3f32:	4a09      	ldr	r2, [pc, #36]	; (3f58 <opcode_0xF6()+0x5c>)
    3f34:	4b09      	ldr	r3, [pc, #36]	; (3f5c <opcode_0xF6()+0x60>)
    3f36:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    3f3a:	881b      	ldrh	r3, [r3, #0]
    3f3c:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    3f3e:	b280      	uxth	r0, r0
    3f40:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3f4a:	e7e8      	b.n	3f1e <opcode_0xF6()+0x22>
    3f4c:	2001889c 	.word	0x2001889c
    3f50:	20004968 	.word	0x20004968
    3f54:	20018886 	.word	0x20018886
    3f58:	20018418 	.word	0x20018418
    3f5c:	20018888 	.word	0x20018888

00003f60 <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    3f60:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    3f62:	f7fe fe3d 	bl	2be0 <Fetch_Absolute()>
    local_data = local_data + 1;
    3f66:	3001      	adds	r0, #1
    global_temp = local_data;
    3f68:	4b11      	ldr	r3, [pc, #68]	; (3fb0 <opcode_0xEE()+0x50>)
    local_data = local_data + 1;
    3f6a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f6c:	4a11      	ldr	r2, [pc, #68]	; (3fb4 <opcode_0xEE()+0x54>)
    3f6e:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    3f70:	701c      	strb	r4, [r3, #0]
    3f72:	7813      	ldrb	r3, [r2, #0]
    3f74:	d417      	bmi.n	3fa6 <opcode_0xEE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f7a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f7c:	b9ac      	cbnz	r4, 3faa <opcode_0xEE()+0x4a>
    3f7e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3f82:	4d0d      	ldr	r5, [pc, #52]	; (3fb8 <opcode_0xEE()+0x58>)
    3f84:	4621      	mov	r1, r4
    3f86:	7013      	strb	r3, [r2, #0]
    3f88:	8828      	ldrh	r0, [r5, #0]
    3f8a:	f7fe fcad 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3f8e:	8828      	ldrh	r0, [r5, #0]
    3f90:	4621      	mov	r1, r4
    3f92:	f7fe fca9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    3f96:	4a09      	ldr	r2, [pc, #36]	; (3fbc <opcode_0xEE()+0x5c>)
    3f98:	4b09      	ldr	r3, [pc, #36]	; (3fc0 <opcode_0xEE()+0x60>)
    3f9a:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    3f9e:	881b      	ldrh	r3, [r3, #0]
    3fa0:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    3fa2:	b280      	uxth	r0, r0
    3fa4:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3faa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3fae:	e7e8      	b.n	3f82 <opcode_0xEE()+0x22>
    3fb0:	2001889c 	.word	0x2001889c
    3fb4:	20004968 	.word	0x20004968
    3fb8:	20018886 	.word	0x20018886
    3fbc:	20018418 	.word	0x20018418
    3fc0:	20018888 	.word	0x20018888

00003fc4 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    3fc4:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    3fc6:	4e11      	ldr	r6, [pc, #68]	; (400c <opcode_0xC6()+0x48>)
    3fc8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3fca:	4d11      	ldr	r5, [pc, #68]	; (4010 <opcode_0xC6()+0x4c>)
    return read_byte(register_pc+offset, false);
    3fcc:	8830      	ldrh	r0, [r6, #0]
    3fce:	3001      	adds	r0, #1
    3fd0:	b280      	uxth	r0, r0
    3fd2:	f7fe facd 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    3fd6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3fd8:	b280      	uxth	r0, r0
    3fda:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    3fdc:	f7fe fac8 	bl	2570 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    3fe0:	3801      	subs	r0, #1
    global_temp = local_data;
    3fe2:	4b0c      	ldr	r3, [pc, #48]	; (4014 <opcode_0xC6()+0x50>)
    local_data = local_data - 1;
    3fe4:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3fe6:	4620      	mov	r0, r4
    global_temp = local_data;
    3fe8:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3fea:	f7fe fd85 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    3fee:	4621      	mov	r1, r4
    3ff0:	8828      	ldrh	r0, [r5, #0]
    3ff2:	f7fe fc79 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3ff6:	8828      	ldrh	r0, [r5, #0]
    3ff8:	4621      	mov	r1, r4
    3ffa:	f7fe fc75 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    3ffe:	4a06      	ldr	r2, [pc, #24]	; (4018 <opcode_0xC6()+0x54>)
    4000:	8833      	ldrh	r3, [r6, #0]
    4002:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    4006:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    4008:	b280      	uxth	r0, r0
    400a:	bd70      	pop	{r4, r5, r6, pc}
    400c:	20018888 	.word	0x20018888
    4010:	20018886 	.word	0x20018886
    4014:	2001889c 	.word	0x2001889c
    4018:	20017418 	.word	0x20017418

0000401c <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    401c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    401e:	f7fe fd9f 	bl	2b60 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    4022:	3801      	subs	r0, #1
    global_temp = local_data;
    4024:	4b11      	ldr	r3, [pc, #68]	; (406c <opcode_0xD6()+0x50>)
    local_data = local_data - 1;
    4026:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4028:	4a11      	ldr	r2, [pc, #68]	; (4070 <opcode_0xD6()+0x54>)
    402a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    402c:	701c      	strb	r4, [r3, #0]
    402e:	7813      	ldrb	r3, [r2, #0]
    4030:	d417      	bmi.n	4062 <opcode_0xD6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4036:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4038:	b9ac      	cbnz	r4, 4066 <opcode_0xD6()+0x4a>
    403a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    403e:	4d0d      	ldr	r5, [pc, #52]	; (4074 <opcode_0xD6()+0x58>)
    4040:	4621      	mov	r1, r4
    4042:	7013      	strb	r3, [r2, #0]
    4044:	8828      	ldrh	r0, [r5, #0]
    4046:	f7fe fc4f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    404a:	8828      	ldrh	r0, [r5, #0]
    404c:	4621      	mov	r1, r4
    404e:	f7fe fc4b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    4052:	4a09      	ldr	r2, [pc, #36]	; (4078 <opcode_0xD6()+0x5c>)
    4054:	4b09      	ldr	r3, [pc, #36]	; (407c <opcode_0xD6()+0x60>)
    4056:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    405a:	881b      	ldrh	r3, [r3, #0]
    405c:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    405e:	b280      	uxth	r0, r0
    4060:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4066:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    406a:	e7e8      	b.n	403e <opcode_0xD6()+0x22>
    406c:	2001889c 	.word	0x2001889c
    4070:	20004968 	.word	0x20004968
    4074:	20018886 	.word	0x20018886
    4078:	20017418 	.word	0x20017418
    407c:	20018888 	.word	0x20018888

00004080 <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    4080:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    4082:	f7fe fdad 	bl	2be0 <Fetch_Absolute()>
    local_data = local_data - 1;
    4086:	3801      	subs	r0, #1
    global_temp = local_data;
    4088:	4b11      	ldr	r3, [pc, #68]	; (40d0 <opcode_0xCE()+0x50>)
    local_data = local_data - 1;
    408a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    408c:	4a11      	ldr	r2, [pc, #68]	; (40d4 <opcode_0xCE()+0x54>)
    408e:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    4090:	701c      	strb	r4, [r3, #0]
    4092:	7813      	ldrb	r3, [r2, #0]
    4094:	d417      	bmi.n	40c6 <opcode_0xCE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    409a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    409c:	b9ac      	cbnz	r4, 40ca <opcode_0xCE()+0x4a>
    409e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    40a2:	4d0d      	ldr	r5, [pc, #52]	; (40d8 <opcode_0xCE()+0x58>)
    40a4:	4621      	mov	r1, r4
    40a6:	7013      	strb	r3, [r2, #0]
    40a8:	8828      	ldrh	r0, [r5, #0]
    40aa:	f7fe fc1d 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    40ae:	8828      	ldrh	r0, [r5, #0]
    40b0:	4621      	mov	r1, r4
    40b2:	f7fe fc19 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    40b6:	4a09      	ldr	r2, [pc, #36]	; (40dc <opcode_0xCE()+0x5c>)
    40b8:	4b09      	ldr	r3, [pc, #36]	; (40e0 <opcode_0xCE()+0x60>)
    40ba:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    40be:	881b      	ldrh	r3, [r3, #0]
    40c0:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    40c2:	b280      	uxth	r0, r0
    40c4:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    40c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    40ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    40ce:	e7e8      	b.n	40a2 <opcode_0xCE()+0x22>
    40d0:	2001889c 	.word	0x2001889c
    40d4:	20004968 	.word	0x20004968
    40d8:	20018886 	.word	0x20018886
    40dc:	20017418 	.word	0x20017418
    40e0:	20018888 	.word	0x20018888

000040e4 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    40e4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    40e6:	2000      	movs	r0, #0
    40e8:	f7fe fd96 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    40ec:	3801      	subs	r0, #1
    global_temp = local_data;
    40ee:	4b12      	ldr	r3, [pc, #72]	; (4138 <opcode_0xDE()+0x54>)
    local_data = local_data - 1;
    40f0:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    40f2:	4a12      	ldr	r2, [pc, #72]	; (413c <opcode_0xDE()+0x58>)
    40f4:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    40f6:	701c      	strb	r4, [r3, #0]
    40f8:	7813      	ldrb	r3, [r2, #0]
    40fa:	d417      	bmi.n	412c <opcode_0xDE()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    40fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4100:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4102:	b9ac      	cbnz	r4, 4130 <opcode_0xDE()+0x4c>
    4104:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    4108:	4d0d      	ldr	r5, [pc, #52]	; (4140 <opcode_0xDE()+0x5c>)
    410a:	4621      	mov	r1, r4
    410c:	7013      	strb	r3, [r2, #0]
    410e:	8828      	ldrh	r0, [r5, #0]
    4110:	f7fe fbea 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4114:	8828      	ldrh	r0, [r5, #0]
    4116:	4621      	mov	r1, r4
    4118:	f7fe fbe6 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    411c:	4a09      	ldr	r2, [pc, #36]	; (4144 <opcode_0xDE()+0x60>)
    411e:	4b0a      	ldr	r3, [pc, #40]	; (4148 <opcode_0xDE()+0x64>)
    4120:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    4124:	881b      	ldrh	r3, [r3, #0]
    4126:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    4128:	b280      	uxth	r0, r0
    412a:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4130:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4134:	e7e8      	b.n	4108 <opcode_0xDE()+0x24>
    4136:	bf00      	nop
    4138:	2001889c 	.word	0x2001889c
    413c:	20004968 	.word	0x20004968
    4140:	20018886 	.word	0x20018886
    4144:	20017418 	.word	0x20017418
    4148:	20018888 	.word	0x20018888

0000414c <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    414c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    414e:	4d16      	ldr	r5, [pc, #88]	; (41a8 <opcode_0x46()+0x5c>)
    4150:	b083      	sub	sp, #12
    4152:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4154:	4c15      	ldr	r4, [pc, #84]	; (41ac <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    4156:	8828      	ldrh	r0, [r5, #0]
    4158:	3001      	adds	r0, #1
    415a:	b280      	uxth	r0, r0
    415c:	f7fe fa08 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4160:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4162:	b280      	uxth	r0, r0
    4164:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4166:	f7fe fa03 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    416a:	4a11      	ldr	r2, [pc, #68]	; (41b0 <opcode_0x46()+0x64>)
    416c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    416e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4172:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4174:	4608      	mov	r0, r1
    4176:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4178:	bf4c      	ite	mi
    417a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    417e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4182:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4184:	f7fe fcb8 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4188:	9901      	ldr	r1, [sp, #4]
    418a:	8820      	ldrh	r0, [r4, #0]
    418c:	f7fe fbac 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4190:	8820      	ldrh	r0, [r4, #0]
    4192:	9901      	ldr	r1, [sp, #4]
    4194:	f7fe fba8 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    4198:	4a06      	ldr	r2, [pc, #24]	; (41b4 <opcode_0x46()+0x68>)
    419a:	882b      	ldrh	r3, [r5, #0]
    419c:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    41a0:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    41a2:	b280      	uxth	r0, r0
    41a4:	b003      	add	sp, #12
    41a6:	bd30      	pop	{r4, r5, pc}
    41a8:	20018888 	.word	0x20018888
    41ac:	20018886 	.word	0x20018886
    41b0:	20004968 	.word	0x20004968
    41b4:	20015418 	.word	0x20015418

000041b8 <opcode_0x56()>:
uint16_t opcode_0x56() {
    41b8:	b510      	push	{r4, lr}
    41ba:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    41bc:	4c11      	ldr	r4, [pc, #68]	; (4204 <opcode_0x56()+0x4c>)
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    41be:	f7fe fccf 	bl	2b60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    41c2:	4a11      	ldr	r2, [pc, #68]	; (4208 <opcode_0x56()+0x50>)
    41c4:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    41c6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    41ca:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    41cc:	4608      	mov	r0, r1
    41ce:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    41d0:	bf4c      	ite	mi
    41d2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    41d6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    41da:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    41dc:	f7fe fc8c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    41e0:	8820      	ldrh	r0, [r4, #0]
    41e2:	9901      	ldr	r1, [sp, #4]
    41e4:	f7fe fb80 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    41e8:	8820      	ldrh	r0, [r4, #0]
    41ea:	9901      	ldr	r1, [sp, #4]
    41ec:	f7fe fb7c 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    41f0:	4a06      	ldr	r2, [pc, #24]	; (420c <opcode_0x56()+0x54>)
    41f2:	4b07      	ldr	r3, [pc, #28]	; (4210 <opcode_0x56()+0x58>)
    41f4:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    41f8:	881b      	ldrh	r3, [r3, #0]
    41fa:	4418      	add	r0, r3
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    41fc:	b280      	uxth	r0, r0
    41fe:	b002      	add	sp, #8
    4200:	bd10      	pop	{r4, pc}
    4202:	bf00      	nop
    4204:	20018886 	.word	0x20018886
    4208:	20004968 	.word	0x20004968
    420c:	20016418 	.word	0x20016418
    4210:	20018888 	.word	0x20018888

00004214 <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    4214:	b510      	push	{r4, lr}
    4216:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4218:	4c10      	ldr	r4, [pc, #64]	; (425c <opcode_0x4E()+0x48>)
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    421a:	f7fe fce1 	bl	2be0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    421e:	4a10      	ldr	r2, [pc, #64]	; (4260 <opcode_0x4E()+0x4c>)
    4220:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4222:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4226:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4228:	4608      	mov	r0, r1
    422a:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    422c:	bf4c      	ite	mi
    422e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4232:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4236:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4238:	f7fe fc5e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    423c:	8820      	ldrh	r0, [r4, #0]
    423e:	9901      	ldr	r1, [sp, #4]
    4240:	f7fe fb52 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4244:	8820      	ldrh	r0, [r4, #0]
    4246:	9901      	ldr	r1, [sp, #4]
    4248:	f7fe fb4e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    424c:	4a05      	ldr	r2, [pc, #20]	; (4264 <opcode_0x4E()+0x50>)
    424e:	4b06      	ldr	r3, [pc, #24]	; (4268 <opcode_0x4E()+0x54>)
    4250:	7a50      	ldrb	r0, [r2, #9]
    4252:	881b      	ldrh	r3, [r3, #0]
    4254:	4418      	add	r0, r3
} // 0x4E - LSR - Logical Shift Right - Absolute
    4256:	b280      	uxth	r0, r0
    4258:	b002      	add	sp, #8
    425a:	bd10      	pop	{r4, pc}
    425c:	20018886 	.word	0x20018886
    4260:	20004968 	.word	0x20004968
    4264:	20016418 	.word	0x20016418
    4268:	20018888 	.word	0x20018888

0000426c <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    426c:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    426e:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    4270:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4272:	f7fe fcd1 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4276:	4a10      	ldr	r2, [pc, #64]	; (42b8 <opcode_0x5E()+0x4c>)
    4278:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    427a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    427e:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4280:	4c0e      	ldr	r4, [pc, #56]	; (42bc <opcode_0x5E()+0x50>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4282:	4608      	mov	r0, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4284:	bf4c      	ite	mi
    4286:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    428a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    428e:	9101      	str	r1, [sp, #4]
    4290:	7013      	strb	r3, [r2, #0]
    4292:	f7fe fc31 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4296:	8820      	ldrh	r0, [r4, #0]
    4298:	9901      	ldr	r1, [sp, #4]
    429a:	f7fe fb25 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    429e:	8820      	ldrh	r0, [r4, #0]
    42a0:	9901      	ldr	r1, [sp, #4]
    42a2:	f7fe fb21 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    42a6:	4a06      	ldr	r2, [pc, #24]	; (42c0 <opcode_0x5E()+0x54>)
    42a8:	4b06      	ldr	r3, [pc, #24]	; (42c4 <opcode_0x5E()+0x58>)
    42aa:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    42ae:	881b      	ldrh	r3, [r3, #0]
    42b0:	4418      	add	r0, r3
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    42b2:	b280      	uxth	r0, r0
    42b4:	b002      	add	sp, #8
    42b6:	bd10      	pop	{r4, pc}
    42b8:	20004968 	.word	0x20004968
    42bc:	20018886 	.word	0x20018886
    42c0:	20016418 	.word	0x20016418
    42c4:	20018888 	.word	0x20018888

000042c8 <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    42c8:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    42ca:	4d19      	ldr	r5, [pc, #100]	; (4330 <opcode_0x66()+0x68>)
    42cc:	b083      	sub	sp, #12
    42ce:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    42d0:	4c18      	ldr	r4, [pc, #96]	; (4334 <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    42d2:	8828      	ldrh	r0, [r5, #0]
    42d4:	3001      	adds	r0, #1
    42d6:	b280      	uxth	r0, r0
    42d8:	f7fe f94a 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    42dc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    42de:	b280      	uxth	r0, r0
    42e0:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    42e2:	f7fe f945 	bl	2570 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    42e6:	4a14      	ldr	r2, [pc, #80]	; (4338 <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    42e8:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    42ec:	7813      	ldrb	r3, [r2, #0]
    42ee:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    42f2:	bf14      	ite	ne
    42f4:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42f8:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    42fc:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42fe:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4300:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4304:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4306:	4608      	mov	r0, r1
    4308:	9101      	str	r1, [sp, #4]
    430a:	f7fe fbf5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    430e:	9901      	ldr	r1, [sp, #4]
    4310:	8820      	ldrh	r0, [r4, #0]
    4312:	f7fe fae9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4316:	8820      	ldrh	r0, [r4, #0]
    4318:	9901      	ldr	r1, [sp, #4]
    431a:	f7fe fae5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    431e:	4a07      	ldr	r2, [pc, #28]	; (433c <opcode_0x66()+0x74>)
    4320:	882b      	ldrh	r3, [r5, #0]
    4322:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    4326:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    4328:	b280      	uxth	r0, r0
    432a:	b003      	add	sp, #12
    432c:	bd30      	pop	{r4, r5, pc}
    432e:	bf00      	nop
    4330:	20018888 	.word	0x20018888
    4334:	20018886 	.word	0x20018886
    4338:	20004968 	.word	0x20004968
    433c:	20016418 	.word	0x20016418

00004340 <opcode_0x76()>:
uint16_t opcode_0x76() {
    4340:	b510      	push	{r4, lr}
    4342:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    4344:	f7fe fc0c 	bl	2b60 <Fetch_ZeroPage_X()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4348:	4a12      	ldr	r2, [pc, #72]	; (4394 <opcode_0x76()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    434a:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    434c:	4c12      	ldr	r4, [pc, #72]	; (4398 <opcode_0x76()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    434e:	7813      	ldrb	r3, [r2, #0]
    4350:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4354:	bf4c      	ite	mi
    4356:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    435a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    435e:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4360:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4362:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4366:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4368:	4608      	mov	r0, r1
    436a:	9101      	str	r1, [sp, #4]
    436c:	f7fe fbc4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4370:	8820      	ldrh	r0, [r4, #0]
    4372:	9901      	ldr	r1, [sp, #4]
    4374:	f7fe fab8 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4378:	8820      	ldrh	r0, [r4, #0]
    437a:	9901      	ldr	r1, [sp, #4]
    437c:	f7fe fab4 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    4380:	4a06      	ldr	r2, [pc, #24]	; (439c <opcode_0x76()+0x5c>)
    4382:	4b07      	ldr	r3, [pc, #28]	; (43a0 <opcode_0x76()+0x60>)
    4384:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    4388:	881b      	ldrh	r3, [r3, #0]
    438a:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    438c:	b280      	uxth	r0, r0
    438e:	b002      	add	sp, #8
    4390:	bd10      	pop	{r4, pc}
    4392:	bf00      	nop
    4394:	20004968 	.word	0x20004968
    4398:	20018886 	.word	0x20018886
    439c:	20016418 	.word	0x20016418
    43a0:	20018888 	.word	0x20018888

000043a4 <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    43a4:	b510      	push	{r4, lr}
    43a6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    43a8:	f7fe fc1a 	bl	2be0 <Fetch_Absolute()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43ac:	4a12      	ldr	r2, [pc, #72]	; (43f8 <opcode_0x6E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    43ae:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    43b0:	4c12      	ldr	r4, [pc, #72]	; (43fc <opcode_0x6E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43b2:	7813      	ldrb	r3, [r2, #0]
    43b4:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    43b8:	bf4c      	ite	mi
    43ba:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43be:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43c2:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43c4:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    43c6:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    43ca:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43cc:	4608      	mov	r0, r1
    43ce:	9101      	str	r1, [sp, #4]
    43d0:	f7fe fb92 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    43d4:	8820      	ldrh	r0, [r4, #0]
    43d6:	9901      	ldr	r1, [sp, #4]
    43d8:	f7fe fa86 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43dc:	8820      	ldrh	r0, [r4, #0]
    43de:	9901      	ldr	r1, [sp, #4]
    43e0:	f7fe fa82 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    43e4:	4a06      	ldr	r2, [pc, #24]	; (4400 <opcode_0x6E()+0x5c>)
    43e6:	4b07      	ldr	r3, [pc, #28]	; (4404 <opcode_0x6E()+0x60>)
    43e8:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    43ec:	881b      	ldrh	r3, [r3, #0]
    43ee:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    43f0:	b280      	uxth	r0, r0
    43f2:	b002      	add	sp, #8
    43f4:	bd10      	pop	{r4, pc}
    43f6:	bf00      	nop
    43f8:	20004968 	.word	0x20004968
    43fc:	20018886 	.word	0x20018886
    4400:	20016418 	.word	0x20016418
    4404:	20018888 	.word	0x20018888

00004408 <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    4408:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    440a:	2000      	movs	r0, #0
uint16_t opcode_0x7E() {
    440c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    440e:	f7fe fc03 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4412:	4a12      	ldr	r2, [pc, #72]	; (445c <opcode_0x7E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4414:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4416:	4c12      	ldr	r4, [pc, #72]	; (4460 <opcode_0x7E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4418:	7813      	ldrb	r3, [r2, #0]
    441a:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    441e:	bf4c      	ite	mi
    4420:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4424:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4428:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    442a:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    442c:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4430:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4432:	4608      	mov	r0, r1
    4434:	9101      	str	r1, [sp, #4]
    4436:	f7fe fb5f 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    443a:	8820      	ldrh	r0, [r4, #0]
    443c:	9901      	ldr	r1, [sp, #4]
    443e:	f7fe fa53 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4442:	8820      	ldrh	r0, [r4, #0]
    4444:	9901      	ldr	r1, [sp, #4]
    4446:	f7fe fa4f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    444a:	4a06      	ldr	r2, [pc, #24]	; (4464 <opcode_0x7E()+0x5c>)
    444c:	4b06      	ldr	r3, [pc, #24]	; (4468 <opcode_0x7E()+0x60>)
    444e:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    4452:	881b      	ldrh	r3, [r3, #0]
    4454:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    4456:	b280      	uxth	r0, r0
    4458:	b002      	add	sp, #8
    445a:	bd10      	pop	{r4, pc}
    445c:	20004968 	.word	0x20004968
    4460:	20018886 	.word	0x20018886
    4464:	20016418 	.word	0x20016418
    4468:	20018888 	.word	0x20018888

0000446c <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    446c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    446e:	4d18      	ldr	r5, [pc, #96]	; (44d0 <opcode_0x26()+0x64>)
    4470:	b083      	sub	sp, #12
    4472:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4474:	4c17      	ldr	r4, [pc, #92]	; (44d4 <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    4476:	8828      	ldrh	r0, [r5, #0]
    4478:	3001      	adds	r0, #1
    447a:	b280      	uxth	r0, r0
    447c:	f7fe f878 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4480:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4482:	b280      	uxth	r0, r0
    4484:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4486:	f7fe f873 	bl	2570 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    448a:	4a13      	ldr	r2, [pc, #76]	; (44d8 <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    448c:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4490:	7813      	ldrb	r3, [r2, #0]
    4492:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4496:	bf14      	ite	ne
    4498:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    449c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    44a0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    44a4:	7013      	strb	r3, [r2, #0]
    44a6:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44a8:	4608      	mov	r0, r1
    44aa:	9101      	str	r1, [sp, #4]
    44ac:	f7fe fb24 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    44b0:	9901      	ldr	r1, [sp, #4]
    44b2:	8820      	ldrh	r0, [r4, #0]
    44b4:	f7fe fa18 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44b8:	8820      	ldrh	r0, [r4, #0]
    44ba:	9901      	ldr	r1, [sp, #4]
    44bc:	f7fe fa14 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    44c0:	4a06      	ldr	r2, [pc, #24]	; (44dc <opcode_0x26()+0x70>)
    44c2:	882b      	ldrh	r3, [r5, #0]
    44c4:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    44c8:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    44ca:	b280      	uxth	r0, r0
    44cc:	b003      	add	sp, #12
    44ce:	bd30      	pop	{r4, r5, pc}
    44d0:	20018888 	.word	0x20018888
    44d4:	20018886 	.word	0x20018886
    44d8:	20004968 	.word	0x20004968
    44dc:	20015418 	.word	0x20015418

000044e0 <opcode_0x36()>:
uint16_t opcode_0x36() {
    44e0:	b510      	push	{r4, lr}
    44e2:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    44e4:	f7fe fb3c 	bl	2b60 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    44e8:	4a11      	ldr	r2, [pc, #68]	; (4530 <opcode_0x36()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    44ea:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    44ec:	4c11      	ldr	r4, [pc, #68]	; (4534 <opcode_0x36()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    44ee:	7813      	ldrb	r3, [r2, #0]
    44f0:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    44f4:	bf4c      	ite	mi
    44f6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    44fa:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    44fe:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4502:	7013      	strb	r3, [r2, #0]
    4504:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4506:	4608      	mov	r0, r1
    4508:	9101      	str	r1, [sp, #4]
    450a:	f7fe faf5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    450e:	8820      	ldrh	r0, [r4, #0]
    4510:	9901      	ldr	r1, [sp, #4]
    4512:	f7fe f9e9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4516:	8820      	ldrh	r0, [r4, #0]
    4518:	9901      	ldr	r1, [sp, #4]
    451a:	f7fe f9e5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    451e:	4a06      	ldr	r2, [pc, #24]	; (4538 <opcode_0x36()+0x58>)
    4520:	4b06      	ldr	r3, [pc, #24]	; (453c <opcode_0x36()+0x5c>)
    4522:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    4526:	881b      	ldrh	r3, [r3, #0]
    4528:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    452a:	b280      	uxth	r0, r0
    452c:	b002      	add	sp, #8
    452e:	bd10      	pop	{r4, pc}
    4530:	20004968 	.word	0x20004968
    4534:	20018886 	.word	0x20018886
    4538:	20015418 	.word	0x20015418
    453c:	20018888 	.word	0x20018888

00004540 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    4540:	b510      	push	{r4, lr}
    4542:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    4544:	f7fe fb4c 	bl	2be0 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4548:	4a11      	ldr	r2, [pc, #68]	; (4590 <opcode_0x2E()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    454a:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    454c:	4c11      	ldr	r4, [pc, #68]	; (4594 <opcode_0x2E()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    454e:	7813      	ldrb	r3, [r2, #0]
    4550:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4554:	bf4c      	ite	mi
    4556:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    455a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    455e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4562:	7013      	strb	r3, [r2, #0]
    4564:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4566:	4608      	mov	r0, r1
    4568:	9101      	str	r1, [sp, #4]
    456a:	f7fe fac5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    456e:	8820      	ldrh	r0, [r4, #0]
    4570:	9901      	ldr	r1, [sp, #4]
    4572:	f7fe f9b9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4576:	8820      	ldrh	r0, [r4, #0]
    4578:	9901      	ldr	r1, [sp, #4]
    457a:	f7fe f9b5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    457e:	4a06      	ldr	r2, [pc, #24]	; (4598 <opcode_0x2E()+0x58>)
    4580:	4b06      	ldr	r3, [pc, #24]	; (459c <opcode_0x2E()+0x5c>)
    4582:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    4586:	881b      	ldrh	r3, [r3, #0]
    4588:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    458a:	b280      	uxth	r0, r0
    458c:	b002      	add	sp, #8
    458e:	bd10      	pop	{r4, pc}
    4590:	20004968 	.word	0x20004968
    4594:	20018886 	.word	0x20018886
    4598:	20015418 	.word	0x20015418
    459c:	20018888 	.word	0x20018888

000045a0 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    45a0:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    45a2:	2000      	movs	r0, #0
uint16_t opcode_0x3E() {
    45a4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    45a6:	f7fe fb37 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45aa:	4a12      	ldr	r2, [pc, #72]	; (45f4 <opcode_0x3E()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    45ac:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    45ae:	4c12      	ldr	r4, [pc, #72]	; (45f8 <opcode_0x3E()+0x58>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45b0:	7813      	ldrb	r3, [r2, #0]
    45b2:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    45b6:	bf4c      	ite	mi
    45b8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    45bc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    45c0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    45c4:	7013      	strb	r3, [r2, #0]
    45c6:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45c8:	4608      	mov	r0, r1
    45ca:	9101      	str	r1, [sp, #4]
    45cc:	f7fe fa94 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    45d0:	8820      	ldrh	r0, [r4, #0]
    45d2:	9901      	ldr	r1, [sp, #4]
    45d4:	f7fe f988 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45d8:	8820      	ldrh	r0, [r4, #0]
    45da:	9901      	ldr	r1, [sp, #4]
    45dc:	f7fe f984 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    45e0:	4a06      	ldr	r2, [pc, #24]	; (45fc <opcode_0x3E()+0x5c>)
    45e2:	4b07      	ldr	r3, [pc, #28]	; (4600 <opcode_0x3E()+0x60>)
    45e4:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    45e8:	881b      	ldrh	r3, [r3, #0]
    45ea:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    45ec:	b280      	uxth	r0, r0
    45ee:	b002      	add	sp, #8
    45f0:	bd10      	pop	{r4, pc}
    45f2:	bf00      	nop
    45f4:	20004968 	.word	0x20004968
    45f8:	20018886 	.word	0x20018886
    45fc:	20015418 	.word	0x20015418
    4600:	20018888 	.word	0x20018888

00004604 <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    4604:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4606:	4c52      	ldr	r4, [pc, #328]	; (4750 <Branch_Taken()+0x14c>)
    4608:	2100      	movs	r1, #0
    460a:	8820      	ldrh	r0, [r4, #0]
    460c:	3001      	adds	r0, #1
    460e:	b280      	uxth	r0, r0
    4610:	f7fd ffae 	bl	2570 <read_byte(unsigned short, bool)>
    if ((reg_data & 0x0080) == 0x0080) {
    4614:	0605      	lsls	r5, r0, #24

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    4616:	b283      	uxth	r3, r0
    effective_address = (register_pc + 1) + effective_address;
    4618:	8820      	ldrh	r0, [r4, #0]
    461a:	4d4e      	ldr	r5, [pc, #312]	; (4754 <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    461c:	bf48      	it	mi
    461e:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    4622:	1c42      	adds	r2, r0, #1
    4624:	4413      	add	r3, r2
    4626:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4628:	ea80 0103 	eor.w	r1, r0, r3
    effective_address = (register_pc + 1) + effective_address;
    462c:	802b      	strh	r3, [r5, #0]
    return read_byte(register_pc+offset, false);
    462e:	3002      	adds	r0, #2
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4630:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    4634:	d006      	beq.n	4644 <Branch_Taken()+0x40>
    4636:	2100      	movs	r1, #0
    4638:	b280      	uxth	r0, r0
    463a:	f7fd ff99 	bl	2570 <read_byte(unsigned short, bool)>
    463e:	8820      	ldrh	r0, [r4, #0]
    4640:	2100      	movs	r1, #0
    4642:	3003      	adds	r0, #3
    4644:	b280      	uxth	r0, r0
    4646:	f7fd ff93 	bl	2570 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    464a:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    464c:	4a42      	ldr	r2, [pc, #264]	; (4758 <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4652:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    4654:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4656:	d376      	bcc.n	4746 <Branch_Taken()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4658:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    465c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4660:	d305      	bcc.n	466e <Branch_Taken()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4662:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4666:	b292      	uxth	r2, r2
    4668:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    466c:	d36b      	bcc.n	4746 <Branch_Taken()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    466e:	4a3b      	ldr	r2, [pc, #236]	; (475c <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    4670:	2000      	movs	r0, #0
    4672:	493b      	ldr	r1, [pc, #236]	; (4760 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4674:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4676:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4678:	2a01      	cmp	r2, #1
    467a:	d005      	beq.n	4688 <Branch_Taken()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    467c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4680:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4684:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    4688:	4a36      	ldr	r2, [pc, #216]	; (4764 <Branch_Taken()+0x160>)
    468a:	7812      	ldrb	r2, [r2, #0]
    468c:	b94a      	cbnz	r2, 46a2 <Branch_Taken()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    468e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4692:	680a      	ldr	r2, [r1, #0]
    4694:	04d0      	lsls	r0, r2, #19
    4696:	d4fc      	bmi.n	4692 <Branch_Taken()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4698:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    469c:	680a      	ldr	r2, [r1, #0]
    469e:	04d2      	lsls	r2, r2, #19
    46a0:	d5fc      	bpl.n	469c <Branch_Taken()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    46a2:	4e31      	ldr	r6, [pc, #196]	; (4768 <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46a4:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    46a8:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    46aa:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    46ac:	06d8      	lsls	r0, r3, #27
    46ae:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    46b2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46b6:	6829      	ldr	r1, [r5, #0]
    46b8:	4a2c      	ldr	r2, [pc, #176]	; (476c <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    46ba:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46be:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    46c0:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    46c2:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    46c6:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    46ca:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    46cc:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    46d0:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    46d4:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    46d6:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    46da:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    46de:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    46e0:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    46e2:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    46e4:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    46e6:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46ea:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    46ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    46f0:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46f2:	491f      	ldr	r1, [pc, #124]	; (4770 <Branch_Taken()+0x16c>)
    46f4:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    46f6:	4d1f      	ldr	r5, [pc, #124]	; (4774 <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    46f8:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    46fa:	0559      	lsls	r1, r3, #21
    46fc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    4700:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4702:	0359      	lsls	r1, r3, #13
    4704:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    4708:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    470a:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    470c:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4710:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4714:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4716:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4718:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    471a:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    471e:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4722:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4726:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4728:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    472a:	682c      	ldr	r4, [r5, #0]
    472c:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4730:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4732:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4734:	4910      	ldr	r1, [pc, #64]	; (4778 <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4736:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4738:	4a10      	ldr	r2, [pc, #64]	; (477c <Branch_Taken()+0x178>)
    473a:	680c      	ldr	r4, [r1, #0]
    473c:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    473e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4740:	4303      	orrs	r3, r0
    4742:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    4744:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4746:	4a0e      	ldr	r2, [pc, #56]	; (4780 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4748:	7812      	ldrb	r2, [r2, #0]
    474a:	2a01      	cmp	r2, #1
    474c:	d98f      	bls.n	466e <Branch_Taken()+0x6a>
    474e:	bd70      	pop	{r4, r5, r6, pc}
    4750:	20018888 	.word	0x20018888
    4754:	20018886 	.word	0x20018886
    4758:	20018884 	.word	0x20018884
    475c:	200188a2 	.word	0x200188a2
    4760:	2001889d 	.word	0x2001889d
    4764:	20004966 	.word	0x20004966
    4768:	42004000 	.word	0x42004000
    476c:	6dfffff3 	.word	0x6dfffff3
    4770:	cff3efff 	.word	0xcff3efff
    4774:	42008000 	.word	0x42008000
    4778:	4200c000 	.word	0x4200c000
    477c:	7fffff6f 	.word	0x7fffff6f
    4780:	20018894 	.word	0x20018894

00004784 <opcode_0x4C()>:
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    4784:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4786:	4d4b      	ldr	r5, [pc, #300]	; (48b4 <opcode_0x4C()+0x130>)
    4788:	2100      	movs	r1, #0
    478a:	8828      	ldrh	r0, [r5, #0]
    478c:	3001      	adds	r0, #1
    478e:	b280      	uxth	r0, r0
    4790:	f7fd feee 	bl	2570 <read_byte(unsigned short, bool)>
    4794:	882b      	ldrh	r3, [r5, #0]
    4796:	4604      	mov	r4, r0
    4798:	2100      	movs	r1, #0
    479a:	1c98      	adds	r0, r3, #2
    479c:	b280      	uxth	r0, r0
    479e:	f7fd fee7 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    47a2:	4a45      	ldr	r2, [pc, #276]	; (48b8 <opcode_0x4C()+0x134>)
    47a4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    47a8:	4b44      	ldr	r3, [pc, #272]	; (48bc <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    47aa:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    47ac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    47b0:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    47b2:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    47b4:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    47b6:	d378      	bcc.n	48aa <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    47b8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    47bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    47c0:	d305      	bcc.n	47ce <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    47c2:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    47c6:	b29b      	uxth	r3, r3
    47c8:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    47cc:	d36d      	bcc.n	48aa <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    47ce:	4b3c      	ldr	r3, [pc, #240]	; (48c0 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    47d0:	2100      	movs	r1, #0
    47d2:	4a3c      	ldr	r2, [pc, #240]	; (48c4 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    47d4:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    47d6:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    47d8:	2b01      	cmp	r3, #1
    47da:	d005      	beq.n	47e8 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    47dc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    47e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    47e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    47e8:	4b37      	ldr	r3, [pc, #220]	; (48c8 <opcode_0x4C()+0x144>)
    47ea:	781b      	ldrb	r3, [r3, #0]
    47ec:	b94b      	cbnz	r3, 4802 <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    47ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    47f2:	6813      	ldr	r3, [r2, #0]
    47f4:	04d9      	lsls	r1, r3, #19
    47f6:	d4fc      	bmi.n	47f2 <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    47f8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    47fc:	6813      	ldr	r3, [r2, #0]
    47fe:	04db      	lsls	r3, r3, #19
    4800:	d5fc      	bpl.n	47fc <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4802:	4d32      	ldr	r5, [pc, #200]	; (48cc <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4804:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4808:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    480a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    480c:	06c1      	lsls	r1, r0, #27
    480e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4812:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4816:	6832      	ldr	r2, [r6, #0]
    4818:	4b2d      	ldr	r3, [pc, #180]	; (48d0 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    481a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    481e:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4822:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4824:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4826:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    482a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    482e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4830:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4834:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4838:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    483a:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    483e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4842:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4844:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4846:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4848:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    484a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    484e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4854:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4856:	4a1f      	ldr	r2, [pc, #124]	; (48d4 <opcode_0x4C()+0x150>)
    4858:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    485a:	4e1f      	ldr	r6, [pc, #124]	; (48d8 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    485c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    485e:	0542      	lsls	r2, r0, #21
    4860:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4864:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4866:	0342      	lsls	r2, r0, #13
    4868:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    486c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    486e:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4870:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4878:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    487a:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    487c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4880:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4884:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4886:	6832      	ldr	r2, [r6, #0]
    4888:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    488c:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    488e:	4a13      	ldr	r2, [pc, #76]	; (48dc <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4890:	ea43 030c 	orr.w	r3, r3, ip
    4894:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4896:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4898:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    489e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    48a0:	4323      	orrs	r3, r4
    48a2:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    48a4:	430b      	orrs	r3, r1
    48a6:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    48a8:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    48aa:	4b0d      	ldr	r3, [pc, #52]	; (48e0 <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    48ac:	781b      	ldrb	r3, [r3, #0]
    48ae:	2b01      	cmp	r3, #1
    48b0:	d98d      	bls.n	47ce <opcode_0x4C()+0x4a>
    48b2:	bd70      	pop	{r4, r5, r6, pc}
    48b4:	20018888 	.word	0x20018888
    48b8:	20018886 	.word	0x20018886
    48bc:	20018884 	.word	0x20018884
    48c0:	200188a2 	.word	0x200188a2
    48c4:	2001889d 	.word	0x2001889d
    48c8:	20004966 	.word	0x20004966
    48cc:	42004000 	.word	0x42004000
    48d0:	6dfffff3 	.word	0x6dfffff3
    48d4:	cff3efff 	.word	0xcff3efff
    48d8:	42008000 	.word	0x42008000
    48dc:	7fffff6f 	.word	0x7fffff6f
    48e0:	20018894 	.word	0x20018894

000048e4 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    48e6:	4e52      	ldr	r6, [pc, #328]	; (4a30 <opcode_0x6C()+0x14c>)
    48e8:	2100      	movs	r1, #0
    48ea:	8830      	ldrh	r0, [r6, #0]
    48ec:	3001      	adds	r0, #1
    48ee:	b280      	uxth	r0, r0
    48f0:	f7fd fe3e 	bl	2570 <read_byte(unsigned short, bool)>
    48f4:	8833      	ldrh	r3, [r6, #0]
    48f6:	4604      	mov	r4, r0
    48f8:	2100      	movs	r1, #0
    48fa:	1c98      	adds	r0, r3, #2
    48fc:	b280      	uxth	r0, r0
    48fe:	f7fd fe37 	bl	2570 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    4902:	2100      	movs	r1, #0
    4904:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4908:	b284      	uxth	r4, r0
    490a:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    490c:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    490e:	f7fd fe2f 	bl	2570 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    4912:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    4914:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    4916:	b2a0      	uxth	r0, r4
    4918:	f7fd fe2a 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    491c:	4945      	ldr	r1, [pc, #276]	; (4a34 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    491e:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    4920:	4a45      	ldr	r2, [pc, #276]	; (4a38 <opcode_0x6C()+0x154>)
    4922:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    4924:	1943      	adds	r3, r0, r5
    4926:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4928:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    492a:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    492c:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    492e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4932:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    4934:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4936:	d376      	bcc.n	4a26 <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4938:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4940:	d305      	bcc.n	494e <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4942:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4946:	b29b      	uxth	r3, r3
    4948:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    494c:	d36b      	bcc.n	4a26 <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    494e:	4b3b      	ldr	r3, [pc, #236]	; (4a3c <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    4950:	2100      	movs	r1, #0
    4952:	4a3b      	ldr	r2, [pc, #236]	; (4a40 <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4954:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4956:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4958:	2b01      	cmp	r3, #1
    495a:	d005      	beq.n	4968 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    495c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4960:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4968:	4b36      	ldr	r3, [pc, #216]	; (4a44 <opcode_0x6C()+0x160>)
    496a:	781b      	ldrb	r3, [r3, #0]
    496c:	b94b      	cbnz	r3, 4982 <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    496e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4972:	6813      	ldr	r3, [r2, #0]
    4974:	04d9      	lsls	r1, r3, #19
    4976:	d4fc      	bmi.n	4972 <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4978:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    497c:	6813      	ldr	r3, [r2, #0]
    497e:	04db      	lsls	r3, r3, #19
    4980:	d5fc      	bpl.n	497c <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4982:	4d31      	ldr	r5, [pc, #196]	; (4a48 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4984:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4988:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    498a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    498c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    498e:	4f2f      	ldr	r7, [pc, #188]	; (4a4c <opcode_0x6C()+0x168>)
    4990:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4994:	4b2e      	ldr	r3, [pc, #184]	; (4a50 <opcode_0x6C()+0x16c>)
    4996:	6832      	ldr	r2, [r6, #0]
    4998:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    499a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    499c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    49a0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    49a4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    49a6:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    49aa:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    49ae:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    49b0:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    49b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    49b8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    49ba:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    49bc:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    49be:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    49c0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49c4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    49c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    49ca:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49cc:	4a21      	ldr	r2, [pc, #132]	; (4a54 <opcode_0x6C()+0x170>)
    49ce:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49d0:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    49d2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    49d4:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49d6:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    49da:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    49de:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    49e2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    49e4:	0342      	lsls	r2, r0, #13
    49e6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    49ea:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    49ec:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49ee:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    49f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49f6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    49f8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49fa:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    49fe:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4a02:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a04:	683a      	ldr	r2, [r7, #0]
    4a06:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4a0a:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a0c:	4a12      	ldr	r2, [pc, #72]	; (4a58 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4a0e:	4333      	orrs	r3, r6
    4a10:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a12:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a14:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a1a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a1c:	4323      	orrs	r3, r4
    4a1e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4a20:	430b      	orrs	r3, r1
    4a22:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a26:	4b0d      	ldr	r3, [pc, #52]	; (4a5c <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4a28:	781b      	ldrb	r3, [r3, #0]
    4a2a:	2b01      	cmp	r3, #1
    4a2c:	d98f      	bls.n	494e <opcode_0x6C()+0x6a>
    4a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a30:	20018888 	.word	0x20018888
    4a34:	20018886 	.word	0x20018886
    4a38:	20018884 	.word	0x20018884
    4a3c:	200188a2 	.word	0x200188a2
    4a40:	2001889d 	.word	0x2001889d
    4a44:	20004966 	.word	0x20004966
    4a48:	42004000 	.word	0x42004000
    4a4c:	42008000 	.word	0x42008000
    4a50:	6dfffff3 	.word	0x6dfffff3
    4a54:	cff3efff 	.word	0xcff3efff
    4a58:	7fffff6f 	.word	0x7fffff6f
    4a5c:	20018894 	.word	0x20018894

00004a60 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    4a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4a62:	4d57      	ldr	r5, [pc, #348]	; (4bc0 <opcode_0x20()+0x160>)
    4a64:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    4a66:	4c57      	ldr	r4, [pc, #348]	; (4bc4 <opcode_0x20()+0x164>)
    4a68:	8828      	ldrh	r0, [r5, #0]
    4a6a:	3001      	adds	r0, #1
    4a6c:	b280      	uxth	r0, r0
    4a6e:	f7fd fd7f 	bl	2570 <read_byte(unsigned short, bool)>
    4a72:	882b      	ldrh	r3, [r5, #0]
    4a74:	4606      	mov	r6, r0
    4a76:	2100      	movs	r1, #0
    4a78:	1c98      	adds	r0, r3, #2
    4a7a:	b280      	uxth	r0, r0
    4a7c:	f7fd fd78 	bl	2570 <read_byte(unsigned short, bool)>
    4a80:	7823      	ldrb	r3, [r4, #0]
    4a82:	4607      	mov	r7, r0
    4a84:	2100      	movs	r1, #0
    4a86:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    4a8a:	f7fd fd71 	bl	2570 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    4a8e:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    4a90:	7820      	ldrb	r0, [r4, #0]
    4a92:	0a09      	lsrs	r1, r1, #8
    4a94:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4a98:	f7fd ff26 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4a9c:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4a9e:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    4aa0:	3b01      	subs	r3, #1
    4aa2:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    4aa4:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    4aa8:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4aaa:	f7fd ff1d 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4aae:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    4ab0:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    4ab4:	4a44      	ldr	r2, [pc, #272]	; (4bc8 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    4ab6:	3b01      	subs	r3, #1
    4ab8:	b280      	uxth	r0, r0
    4aba:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4abc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4ac0:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4ac2:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4ac4:	d376      	bcc.n	4bb4 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4ac6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4ace:	d305      	bcc.n	4adc <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4ad0:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4ada:	d36b      	bcc.n	4bb4 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4adc:	4b3b      	ldr	r3, [pc, #236]	; (4bcc <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    4ade:	2100      	movs	r1, #0
    4ae0:	4a3b      	ldr	r2, [pc, #236]	; (4bd0 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ae2:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4ae4:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ae6:	2b01      	cmp	r3, #1
    4ae8:	d005      	beq.n	4af6 <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4aea:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4aee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4af6:	4b37      	ldr	r3, [pc, #220]	; (4bd4 <opcode_0x20()+0x174>)
    4af8:	781b      	ldrb	r3, [r3, #0]
    4afa:	b94b      	cbnz	r3, 4b10 <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4afc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4b00:	6813      	ldr	r3, [r2, #0]
    4b02:	04d9      	lsls	r1, r3, #19
    4b04:	d4fc      	bmi.n	4b00 <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    4b06:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4b0a:	6813      	ldr	r3, [r2, #0]
    4b0c:	04db      	lsls	r3, r3, #19
    4b0e:	d5fc      	bpl.n	4b0a <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4b10:	4d31      	ldr	r5, [pc, #196]	; (4bd8 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b12:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4b16:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4b18:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b1a:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b1c:	4f2f      	ldr	r7, [pc, #188]	; (4bdc <opcode_0x20()+0x17c>)
    4b1e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b22:	4b2f      	ldr	r3, [pc, #188]	; (4be0 <opcode_0x20()+0x180>)
    4b24:	6832      	ldr	r2, [r6, #0]
    4b26:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b28:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b2a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b2e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b32:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4b34:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4b38:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b3c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b3e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4b42:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b46:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b48:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b4a:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b4c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b4e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b52:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b58:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b5a:	4a22      	ldr	r2, [pc, #136]	; (4be4 <opcode_0x20()+0x184>)
    4b5c:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b5e:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b60:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4b62:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b64:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b68:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4b6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4b70:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4b72:	0342      	lsls	r2, r0, #13
    4b74:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4b78:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b7a:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b7c:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b84:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b86:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b88:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b8c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4b90:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b92:	683a      	ldr	r2, [r7, #0]
    4b94:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b98:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b9a:	4a13      	ldr	r2, [pc, #76]	; (4be8 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b9c:	4333      	orrs	r3, r6
    4b9e:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4ba0:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba2:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba8:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4baa:	4323      	orrs	r3, r4
    4bac:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4bae:	430b      	orrs	r3, r1
    4bb0:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4bb4:	4b0d      	ldr	r3, [pc, #52]	; (4bec <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4bb6:	781b      	ldrb	r3, [r3, #0]
    4bb8:	2b01      	cmp	r3, #1
    4bba:	d98f      	bls.n	4adc <opcode_0x20()+0x7c>
    4bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bbe:	bf00      	nop
    4bc0:	20018888 	.word	0x20018888
    4bc4:	20004969 	.word	0x20004969
    4bc8:	20018884 	.word	0x20018884
    4bcc:	200188a2 	.word	0x200188a2
    4bd0:	2001889d 	.word	0x2001889d
    4bd4:	20004966 	.word	0x20004966
    4bd8:	42004000 	.word	0x42004000
    4bdc:	42008000 	.word	0x42008000
    4be0:	6dfffff3 	.word	0x6dfffff3
    4be4:	cff3efff 	.word	0xcff3efff
    4be8:	7fffff6f 	.word	0x7fffff6f
    4bec:	20018894 	.word	0x20018894

00004bf0 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    4bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4bf2:	4d58      	ldr	r5, [pc, #352]	; (4d54 <opcode_0x40()+0x164>)
    4bf4:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    4bf6:	4c58      	ldr	r4, [pc, #352]	; (4d58 <opcode_0x40()+0x168>)
    4bf8:	8828      	ldrh	r0, [r5, #0]
    4bfa:	3001      	adds	r0, #1
    4bfc:	b280      	uxth	r0, r0
    4bfe:	f7fd fcb7 	bl	2570 <read_byte(unsigned short, bool)>
    4c02:	7820      	ldrb	r0, [r4, #0]
    4c04:	2100      	movs	r1, #0
    4c06:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4c0a:	f7fd fcb1 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4c0e:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4c10:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4c12:	3301      	adds	r3, #1
    4c14:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4c16:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4c1a:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4c1c:	f7fd fca8 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4c20:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    4c22:	4a4e      	ldr	r2, [pc, #312]	; (4d5c <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    4c24:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4c26:	3301      	adds	r3, #1
    4c28:	7010      	strb	r0, [r2, #0]
    4c2a:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4c2c:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4c30:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4c32:	f7fd fc9d 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4c36:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4c38:	4606      	mov	r6, r0
    4c3a:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4c3c:	3301      	adds	r3, #1
    4c3e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4c40:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4c44:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4c46:	f7fd fc93 	bl	2570 <read_byte(unsigned short, bool)>
    current_address = local_address;
    4c4a:	4b45      	ldr	r3, [pc, #276]	; (4d60 <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    4c4c:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    4c50:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4c52:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4c56:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4c58:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4c5a:	d376      	bcc.n	4d4a <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4c5c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4c64:	d305      	bcc.n	4c72 <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4c66:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4c6a:	b29b      	uxth	r3, r3
    4c6c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4c70:	d36b      	bcc.n	4d4a <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4c72:	4b3c      	ldr	r3, [pc, #240]	; (4d64 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    4c74:	2100      	movs	r1, #0
    4c76:	4a3c      	ldr	r2, [pc, #240]	; (4d68 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4c78:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4c7a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4c7c:	2b01      	cmp	r3, #1
    4c7e:	d005      	beq.n	4c8c <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4c80:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4c84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4c8c:	4b37      	ldr	r3, [pc, #220]	; (4d6c <opcode_0x40()+0x17c>)
    4c8e:	781b      	ldrb	r3, [r3, #0]
    4c90:	b94b      	cbnz	r3, 4ca6 <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4c92:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4c96:	6813      	ldr	r3, [r2, #0]
    4c98:	04d9      	lsls	r1, r3, #19
    4c9a:	d4fc      	bmi.n	4c96 <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    4c9c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4ca0:	6813      	ldr	r3, [r2, #0]
    4ca2:	04db      	lsls	r3, r3, #19
    4ca4:	d5fc      	bpl.n	4ca0 <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4ca6:	4d32      	ldr	r5, [pc, #200]	; (4d70 <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ca8:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4cac:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4cae:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4cb0:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cb2:	4f30      	ldr	r7, [pc, #192]	; (4d74 <opcode_0x40()+0x184>)
    4cb4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cb8:	4b2f      	ldr	r3, [pc, #188]	; (4d78 <opcode_0x40()+0x188>)
    4cba:	6832      	ldr	r2, [r6, #0]
    4cbc:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4cbe:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4cc0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4cc4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4cc8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4cca:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4cce:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4cd2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4cd4:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4cd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4cdc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4cde:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ce0:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ce2:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ce4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ce8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4cee:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cf0:	4a22      	ldr	r2, [pc, #136]	; (4d7c <opcode_0x40()+0x18c>)
    4cf2:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4cf4:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4cf6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4cf8:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4cfa:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4cfe:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4d02:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4d06:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4d08:	0342      	lsls	r2, r0, #13
    4d0a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4d0e:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d10:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d12:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d1a:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d1c:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d1e:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d22:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4d26:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d28:	683a      	ldr	r2, [r7, #0]
    4d2a:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d2e:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d30:	4a13      	ldr	r2, [pc, #76]	; (4d80 <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4d32:	4333      	orrs	r3, r6
    4d34:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d36:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d38:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d3e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d40:	4323      	orrs	r3, r4
    4d42:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4d44:	430b      	orrs	r3, r1
    4d46:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4d4a:	4b0e      	ldr	r3, [pc, #56]	; (4d84 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	2b01      	cmp	r3, #1
    4d50:	d98f      	bls.n	4c72 <opcode_0x40()+0x82>
    4d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d54:	20018888 	.word	0x20018888
    4d58:	20004969 	.word	0x20004969
    4d5c:	20004968 	.word	0x20004968
    4d60:	20018884 	.word	0x20018884
    4d64:	200188a2 	.word	0x200188a2
    4d68:	2001889d 	.word	0x2001889d
    4d6c:	20004966 	.word	0x20004966
    4d70:	42004000 	.word	0x42004000
    4d74:	42008000 	.word	0x42008000
    4d78:	6dfffff3 	.word	0x6dfffff3
    4d7c:	cff3efff 	.word	0xcff3efff
    4d80:	7fffff6f 	.word	0x7fffff6f
    4d84:	20018894 	.word	0x20018894

00004d88 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    4d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4d8a:	4d55      	ldr	r5, [pc, #340]	; (4ee0 <opcode_0x60()+0x158>)
    4d8c:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    4d8e:	4e55      	ldr	r6, [pc, #340]	; (4ee4 <opcode_0x60()+0x15c>)
    4d90:	8828      	ldrh	r0, [r5, #0]
    4d92:	3001      	adds	r0, #1
    4d94:	b280      	uxth	r0, r0
    4d96:	f7fd fbeb 	bl	2570 <read_byte(unsigned short, bool)>
    4d9a:	7830      	ldrb	r0, [r6, #0]
    4d9c:	2100      	movs	r1, #0
    4d9e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4da2:	f7fd fbe5 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4da6:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4da8:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4daa:	3301      	adds	r3, #1
    4dac:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4dae:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4db2:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4db4:	f7fd fbdc 	bl	2570 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4db8:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4dba:	4604      	mov	r4, r0
    4dbc:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4dbe:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 3;
    4dc0:	3403      	adds	r4, #3
    4dc2:	b2c0      	uxtb	r0, r0
    4dc4:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4dc6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4dca:	f7fd fbd1 	bl	2570 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    4dce:	2100      	movs	r1, #0
    register_pc = pch + pcl + 3;
    4dd0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4dd4:	b280      	uxth	r0, r0
    4dd6:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    4dd8:	f7fd fbca 	bl	2570 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    4ddc:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    4dde:	4b42      	ldr	r3, [pc, #264]	; (4ee8 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4de0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    4de4:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4de6:	d376      	bcc.n	4ed6 <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4de8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4df0:	d305      	bcc.n	4dfe <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4df2:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4df6:	b29b      	uxth	r3, r3
    4df8:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4dfc:	d36b      	bcc.n	4ed6 <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4dfe:	4b3b      	ldr	r3, [pc, #236]	; (4eec <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    4e00:	2100      	movs	r1, #0
    4e02:	4a3b      	ldr	r2, [pc, #236]	; (4ef0 <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e04:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4e06:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e08:	2b01      	cmp	r3, #1
    4e0a:	d005      	beq.n	4e18 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4e0c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4e10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4e18:	4b36      	ldr	r3, [pc, #216]	; (4ef4 <opcode_0x60()+0x16c>)
    4e1a:	781b      	ldrb	r3, [r3, #0]
    4e1c:	b94b      	cbnz	r3, 4e32 <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4e1e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e22:	6813      	ldr	r3, [r2, #0]
    4e24:	04d9      	lsls	r1, r3, #19
    4e26:	d4fc      	bmi.n	4e22 <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    4e28:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e2c:	6813      	ldr	r3, [r2, #0]
    4e2e:	04db      	lsls	r3, r3, #19
    4e30:	d5fc      	bpl.n	4e2c <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4e32:	4d31      	ldr	r5, [pc, #196]	; (4ef8 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e34:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4e38:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4e3a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4e3c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e3e:	4f2f      	ldr	r7, [pc, #188]	; (4efc <opcode_0x60()+0x174>)
    4e40:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e44:	4b2e      	ldr	r3, [pc, #184]	; (4f00 <opcode_0x60()+0x178>)
    4e46:	6832      	ldr	r2, [r6, #0]
    4e48:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4e4a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e4c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4e50:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e54:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4e56:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4e5a:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e5e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4e60:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e68:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e6a:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e6c:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4e6e:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e70:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e74:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e7a:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e7c:	4a21      	ldr	r2, [pc, #132]	; (4f04 <opcode_0x60()+0x17c>)
    4e7e:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4e80:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e82:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4e84:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4e86:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4e8a:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4e8e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4e92:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4e94:	0342      	lsls	r2, r0, #13
    4e96:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4e9a:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4e9c:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4e9e:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ea6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4ea8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4eaa:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4eae:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4eb2:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4eb4:	683a      	ldr	r2, [r7, #0]
    4eb6:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4eba:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ebc:	4a12      	ldr	r2, [pc, #72]	; (4f08 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4ebe:	4333      	orrs	r3, r6
    4ec0:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4ec2:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ec4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4eca:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4ecc:	4323      	orrs	r3, r4
    4ece:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4ed0:	430b      	orrs	r3, r1
    4ed2:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    4ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4ed6:	4b0d      	ldr	r3, [pc, #52]	; (4f0c <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4ed8:	781b      	ldrb	r3, [r3, #0]
    4eda:	2b01      	cmp	r3, #1
    4edc:	d98f      	bls.n	4dfe <opcode_0x60()+0x76>
    4ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ee0:	20018888 	.word	0x20018888
    4ee4:	20004969 	.word	0x20004969
    4ee8:	20018884 	.word	0x20018884
    4eec:	200188a2 	.word	0x200188a2
    4ef0:	2001889d 	.word	0x2001889d
    4ef4:	20004966 	.word	0x20004966
    4ef8:	42004000 	.word	0x42004000
    4efc:	42008000 	.word	0x42008000
    4f00:	6dfffff3 	.word	0x6dfffff3
    4f04:	cff3efff 	.word	0xcff3efff
    4f08:	7fffff6f 	.word	0x7fffff6f
    4f0c:	20018894 	.word	0x20018894

00004f10 <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    4f10:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4f12:	4d18      	ldr	r5, [pc, #96]	; (4f74 <opcode_0x07()+0x64>)
    4f14:	b083      	sub	sp, #12
    4f16:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4f18:	4c17      	ldr	r4, [pc, #92]	; (4f78 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    4f1a:	8828      	ldrh	r0, [r5, #0]
    4f1c:	3001      	adds	r0, #1
    4f1e:	b280      	uxth	r0, r0
    4f20:	f7fd fb26 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4f24:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4f26:	b280      	uxth	r0, r0
    4f28:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4f2a:	f7fd fb21 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f2e:	4a13      	ldr	r2, [pc, #76]	; (4f7c <opcode_0x07()+0x6c>)
    4f30:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4f32:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f36:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4f38:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f3a:	bf4c      	ite	mi
    4f3c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4f40:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    4f44:	9101      	str	r1, [sp, #4]
    4f46:	7013      	strb	r3, [r2, #0]
    4f48:	4b0d      	ldr	r3, [pc, #52]	; (4f80 <opcode_0x07()+0x70>)
    4f4a:	7818      	ldrb	r0, [r3, #0]
    4f4c:	4308      	orrs	r0, r1
    4f4e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    4f50:	f7fd fdd2 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4f54:	9901      	ldr	r1, [sp, #4]
    4f56:	8820      	ldrh	r0, [r4, #0]
    4f58:	f7fd fcc6 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4f5c:	8820      	ldrh	r0, [r4, #0]
    4f5e:	9901      	ldr	r1, [sp, #4]
    4f60:	f7fd fcc2 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    4f64:	4a07      	ldr	r2, [pc, #28]	; (4f84 <opcode_0x07()+0x74>)
    4f66:	882b      	ldrh	r3, [r5, #0]
    4f68:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    4f6c:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    4f6e:	b280      	uxth	r0, r0
    4f70:	b003      	add	sp, #12
    4f72:	bd30      	pop	{r4, r5, pc}
    4f74:	20018888 	.word	0x20018888
    4f78:	20018886 	.word	0x20018886
    4f7c:	20004968 	.word	0x20004968
    4f80:	2001889f 	.word	0x2001889f
    4f84:	20015418 	.word	0x20015418

00004f88 <opcode_0x17()>:
uint16_t opcode_0x17() {
    4f88:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f8a:	4c14      	ldr	r4, [pc, #80]	; (4fdc <opcode_0x17()+0x54>)
uint16_t opcode_0x17() {
    4f8c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    4f8e:	f7fd fde7 	bl	2b60 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f92:	0602      	lsls	r2, r0, #24
    4f94:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    4f96:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    4f9a:	4a11      	ldr	r2, [pc, #68]	; (4fe0 <opcode_0x17()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4f9c:	bf4c      	ite	mi
    4f9e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4fa2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    4fa6:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4fa8:	b2c9      	uxtb	r1, r1
    4faa:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    4fac:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    4fae:	4c0d      	ldr	r4, [pc, #52]	; (4fe4 <opcode_0x17()+0x5c>)
    4fb0:	9101      	str	r1, [sp, #4]
    4fb2:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    4fb4:	f7fd fda0 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4fb8:	8820      	ldrh	r0, [r4, #0]
    4fba:	9901      	ldr	r1, [sp, #4]
    4fbc:	f7fd fc94 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4fc0:	8820      	ldrh	r0, [r4, #0]
    4fc2:	9901      	ldr	r1, [sp, #4]
    4fc4:	f7fd fc90 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    4fc8:	4a07      	ldr	r2, [pc, #28]	; (4fe8 <opcode_0x17()+0x60>)
    4fca:	4b08      	ldr	r3, [pc, #32]	; (4fec <opcode_0x17()+0x64>)
    4fcc:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    4fd0:	881b      	ldrh	r3, [r3, #0]
    4fd2:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    4fd4:	b280      	uxth	r0, r0
    4fd6:	b002      	add	sp, #8
    4fd8:	bd10      	pop	{r4, pc}
    4fda:	bf00      	nop
    4fdc:	20004968 	.word	0x20004968
    4fe0:	2001889f 	.word	0x2001889f
    4fe4:	20018886 	.word	0x20018886
    4fe8:	20015418 	.word	0x20015418
    4fec:	20018888 	.word	0x20018888

00004ff0 <opcode_0x03()>:
uint16_t opcode_0x03() {
    4ff0:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4ff2:	4c14      	ldr	r4, [pc, #80]	; (5044 <opcode_0x03()+0x54>)
uint16_t opcode_0x03() {
    4ff4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    4ff6:	f7fd fe6f 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4ffa:	0602      	lsls	r2, r0, #24
    4ffc:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    4ffe:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5002:	4a11      	ldr	r2, [pc, #68]	; (5048 <opcode_0x03()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5004:	bf4c      	ite	mi
    5006:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    500a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    500e:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5010:	b2c9      	uxtb	r1, r1
    5012:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5014:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5016:	4c0d      	ldr	r4, [pc, #52]	; (504c <opcode_0x03()+0x5c>)
    5018:	9101      	str	r1, [sp, #4]
    501a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    501c:	f7fd fd6c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5020:	8820      	ldrh	r0, [r4, #0]
    5022:	9901      	ldr	r1, [sp, #4]
    5024:	f7fd fc60 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5028:	8820      	ldrh	r0, [r4, #0]
    502a:	9901      	ldr	r1, [sp, #4]
    502c:	f7fd fc5c 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    5030:	4a07      	ldr	r2, [pc, #28]	; (5050 <opcode_0x03()+0x60>)
    5032:	4b08      	ldr	r3, [pc, #32]	; (5054 <opcode_0x03()+0x64>)
    5034:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    5038:	881b      	ldrh	r3, [r3, #0]
    503a:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    503c:	b280      	uxth	r0, r0
    503e:	b002      	add	sp, #8
    5040:	bd10      	pop	{r4, pc}
    5042:	bf00      	nop
    5044:	20004968 	.word	0x20004968
    5048:	2001889f 	.word	0x2001889f
    504c:	20018886 	.word	0x20018886
    5050:	20015418 	.word	0x20015418
    5054:	20018888 	.word	0x20018888

00005058 <opcode_0x13()>:
uint16_t opcode_0x13() {
    5058:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    505a:	4c14      	ldr	r4, [pc, #80]	; (50ac <opcode_0x13()+0x54>)
uint16_t opcode_0x13() {
    505c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    505e:	2001      	movs	r0, #1
    5060:	f7fd fe64 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5064:	7823      	ldrb	r3, [r4, #0]
    5066:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5068:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    506c:	4a10      	ldr	r2, [pc, #64]	; (50b0 <opcode_0x13()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    506e:	bf4c      	ite	mi
    5070:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5074:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5078:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    507a:	b2c9      	uxtb	r1, r1
    507c:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    507e:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5080:	4c0c      	ldr	r4, [pc, #48]	; (50b4 <opcode_0x13()+0x5c>)
    5082:	9101      	str	r1, [sp, #4]
    5084:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5086:	f7fd fd37 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    508a:	8820      	ldrh	r0, [r4, #0]
    508c:	9901      	ldr	r1, [sp, #4]
    508e:	f7fd fc2b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5092:	8820      	ldrh	r0, [r4, #0]
    5094:	9901      	ldr	r1, [sp, #4]
    5096:	f7fd fc27 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    509a:	4a07      	ldr	r2, [pc, #28]	; (50b8 <opcode_0x13()+0x60>)
    509c:	4b07      	ldr	r3, [pc, #28]	; (50bc <opcode_0x13()+0x64>)
    509e:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    50a2:	881b      	ldrh	r3, [r3, #0]
    50a4:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    50a6:	b280      	uxth	r0, r0
    50a8:	b002      	add	sp, #8
    50aa:	bd10      	pop	{r4, pc}
    50ac:	20004968 	.word	0x20004968
    50b0:	2001889f 	.word	0x2001889f
    50b4:	20018886 	.word	0x20018886
    50b8:	20015418 	.word	0x20015418
    50bc:	20018888 	.word	0x20018888

000050c0 <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    50c0:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    50c2:	4c14      	ldr	r4, [pc, #80]	; (5114 <opcode_0x0F()+0x54>)
uint16_t opcode_0x0F() {
    50c4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    50c6:	f7fd fd8b 	bl	2be0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    50ca:	0602      	lsls	r2, r0, #24
    50cc:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    50ce:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    50d2:	4a11      	ldr	r2, [pc, #68]	; (5118 <opcode_0x0F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    50d4:	bf4c      	ite	mi
    50d6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    50da:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    50de:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    50e0:	b2c9      	uxtb	r1, r1
    50e2:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    50e4:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    50e6:	4c0d      	ldr	r4, [pc, #52]	; (511c <opcode_0x0F()+0x5c>)
    50e8:	9101      	str	r1, [sp, #4]
    50ea:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    50ec:	f7fd fd04 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    50f0:	8820      	ldrh	r0, [r4, #0]
    50f2:	9901      	ldr	r1, [sp, #4]
    50f4:	f7fd fbf8 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    50f8:	8820      	ldrh	r0, [r4, #0]
    50fa:	9901      	ldr	r1, [sp, #4]
    50fc:	f7fd fbf4 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    5100:	4a07      	ldr	r2, [pc, #28]	; (5120 <opcode_0x0F()+0x60>)
    5102:	4b08      	ldr	r3, [pc, #32]	; (5124 <opcode_0x0F()+0x64>)
    5104:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    5108:	881b      	ldrh	r3, [r3, #0]
    510a:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    510c:	b280      	uxth	r0, r0
    510e:	b002      	add	sp, #8
    5110:	bd10      	pop	{r4, pc}
    5112:	bf00      	nop
    5114:	20004968 	.word	0x20004968
    5118:	2001889f 	.word	0x2001889f
    511c:	20018886 	.word	0x20018886
    5120:	20015418 	.word	0x20015418
    5124:	20018888 	.word	0x20018888

00005128 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    5128:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    512a:	4c14      	ldr	r4, [pc, #80]	; (517c <opcode_0x1F()+0x54>)
uint16_t opcode_0x1F() {
    512c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    512e:	2001      	movs	r0, #1
    5130:	f7fd fd72 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5134:	7823      	ldrb	r3, [r4, #0]
    5136:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5138:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    513c:	4a10      	ldr	r2, [pc, #64]	; (5180 <opcode_0x1F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    513e:	bf4c      	ite	mi
    5140:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5144:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5148:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    514a:	b2c9      	uxtb	r1, r1
    514c:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    514e:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5150:	4c0c      	ldr	r4, [pc, #48]	; (5184 <opcode_0x1F()+0x5c>)
    5152:	9101      	str	r1, [sp, #4]
    5154:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5156:	f7fd fccf 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    515a:	8820      	ldrh	r0, [r4, #0]
    515c:	9901      	ldr	r1, [sp, #4]
    515e:	f7fd fbc3 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5162:	8820      	ldrh	r0, [r4, #0]
    5164:	9901      	ldr	r1, [sp, #4]
    5166:	f7fd fbbf 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    516a:	4a07      	ldr	r2, [pc, #28]	; (5188 <opcode_0x1F()+0x60>)
    516c:	4b07      	ldr	r3, [pc, #28]	; (518c <opcode_0x1F()+0x64>)
    516e:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    5172:	881b      	ldrh	r3, [r3, #0]
    5174:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    5176:	b280      	uxth	r0, r0
    5178:	b002      	add	sp, #8
    517a:	bd10      	pop	{r4, pc}
    517c:	20004968 	.word	0x20004968
    5180:	2001889f 	.word	0x2001889f
    5184:	20018886 	.word	0x20018886
    5188:	20015418 	.word	0x20015418
    518c:	20018888 	.word	0x20018888

00005190 <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    5190:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5192:	4c14      	ldr	r4, [pc, #80]	; (51e4 <opcode_0x1B()+0x54>)
uint16_t opcode_0x1B() {
    5194:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    5196:	2001      	movs	r0, #1
    5198:	f7fd fd6e 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    519c:	7823      	ldrb	r3, [r4, #0]
    519e:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    51a0:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    51a4:	4a10      	ldr	r2, [pc, #64]	; (51e8 <opcode_0x1B()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    51a6:	bf4c      	ite	mi
    51a8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    51ac:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    51b0:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    51b2:	b2c9      	uxtb	r1, r1
    51b4:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    51b6:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    51b8:	4c0c      	ldr	r4, [pc, #48]	; (51ec <opcode_0x1B()+0x5c>)
    51ba:	9101      	str	r1, [sp, #4]
    51bc:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    51be:	f7fd fc9b 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    51c2:	8820      	ldrh	r0, [r4, #0]
    51c4:	9901      	ldr	r1, [sp, #4]
    51c6:	f7fd fb8f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    51ca:	8820      	ldrh	r0, [r4, #0]
    51cc:	9901      	ldr	r1, [sp, #4]
    51ce:	f7fd fb8b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    51d2:	4a07      	ldr	r2, [pc, #28]	; (51f0 <opcode_0x1B()+0x60>)
    51d4:	4b07      	ldr	r3, [pc, #28]	; (51f4 <opcode_0x1B()+0x64>)
    51d6:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    51da:	881b      	ldrh	r3, [r3, #0]
    51dc:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    51de:	b280      	uxth	r0, r0
    51e0:	b002      	add	sp, #8
    51e2:	bd10      	pop	{r4, pc}
    51e4:	20004968 	.word	0x20004968
    51e8:	2001889f 	.word	0x2001889f
    51ec:	20018886 	.word	0x20018886
    51f0:	20015418 	.word	0x20015418
    51f4:	20018888 	.word	0x20018888

000051f8 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    51f8:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    51fa:	4d1a      	ldr	r5, [pc, #104]	; (5264 <opcode_0x27()+0x6c>)
    51fc:	b083      	sub	sp, #12
    51fe:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5200:	4c19      	ldr	r4, [pc, #100]	; (5268 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    5202:	8828      	ldrh	r0, [r5, #0]
    5204:	3001      	adds	r0, #1
    5206:	b280      	uxth	r0, r0
    5208:	f7fd f9b2 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    520c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    520e:	b280      	uxth	r0, r0
    5210:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5212:	f7fd f9ad 	bl	2570 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5216:	4915      	ldr	r1, [pc, #84]	; (526c <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5218:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    521c:	780a      	ldrb	r2, [r1, #0]
    521e:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5222:	bf14      	ite	ne
    5224:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5228:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    522c:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5230:	4b0f      	ldr	r3, [pc, #60]	; (5270 <opcode_0x27()+0x78>)
    5232:	700a      	strb	r2, [r1, #0]
    5234:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5236:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5238:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    523a:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    523c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    523e:	f7fd fc5b 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5242:	9901      	ldr	r1, [sp, #4]
    5244:	8820      	ldrh	r0, [r4, #0]
    5246:	f7fd fb4f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    524a:	8820      	ldrh	r0, [r4, #0]
    524c:	9901      	ldr	r1, [sp, #4]
    524e:	f7fd fb4b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    5252:	4a08      	ldr	r2, [pc, #32]	; (5274 <opcode_0x27()+0x7c>)
    5254:	882b      	ldrh	r3, [r5, #0]
    5256:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    525a:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    525c:	b280      	uxth	r0, r0
    525e:	b003      	add	sp, #12
    5260:	bd30      	pop	{r4, r5, pc}
    5262:	bf00      	nop
    5264:	20018888 	.word	0x20018888
    5268:	20018886 	.word	0x20018886
    526c:	20004968 	.word	0x20004968
    5270:	2001889f 	.word	0x2001889f
    5274:	20015418 	.word	0x20015418

00005278 <opcode_0x37()>:
uint16_t opcode_0x37() {
    5278:	b530      	push	{r4, r5, lr}
    527a:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    527c:	4d14      	ldr	r5, [pc, #80]	; (52d0 <opcode_0x37()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    527e:	f7fd fc6f 	bl	2b60 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5282:	4914      	ldr	r1, [pc, #80]	; (52d4 <opcode_0x37()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5284:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5286:	4c14      	ldr	r4, [pc, #80]	; (52d8 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5288:	780a      	ldrb	r2, [r1, #0]
    528a:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    528e:	bf4c      	ite	mi
    5290:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5294:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5298:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    529c:	782b      	ldrb	r3, [r5, #0]
    529e:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    52a0:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    52a2:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    52a4:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    52a6:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    52a8:	f7fd fc26 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    52ac:	8820      	ldrh	r0, [r4, #0]
    52ae:	9901      	ldr	r1, [sp, #4]
    52b0:	f7fd fb1a 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    52b4:	8820      	ldrh	r0, [r4, #0]
    52b6:	9901      	ldr	r1, [sp, #4]
    52b8:	f7fd fb16 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    52bc:	4a07      	ldr	r2, [pc, #28]	; (52dc <opcode_0x37()+0x64>)
    52be:	4b08      	ldr	r3, [pc, #32]	; (52e0 <opcode_0x37()+0x68>)
    52c0:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    52c4:	881b      	ldrh	r3, [r3, #0]
    52c6:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    52c8:	b280      	uxth	r0, r0
    52ca:	b003      	add	sp, #12
    52cc:	bd30      	pop	{r4, r5, pc}
    52ce:	bf00      	nop
    52d0:	2001889f 	.word	0x2001889f
    52d4:	20004968 	.word	0x20004968
    52d8:	20018886 	.word	0x20018886
    52dc:	20015418 	.word	0x20015418
    52e0:	20018888 	.word	0x20018888

000052e4 <opcode_0x23()>:
uint16_t opcode_0x23() {
    52e4:	b530      	push	{r4, r5, lr}
    52e6:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    52e8:	4d14      	ldr	r5, [pc, #80]	; (533c <opcode_0x23()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    52ea:	f7fd fcf5 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    52ee:	4914      	ldr	r1, [pc, #80]	; (5340 <opcode_0x23()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    52f0:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    52f2:	4c14      	ldr	r4, [pc, #80]	; (5344 <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    52f4:	780a      	ldrb	r2, [r1, #0]
    52f6:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    52fa:	bf4c      	ite	mi
    52fc:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5300:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5304:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5308:	782b      	ldrb	r3, [r5, #0]
    530a:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    530c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    530e:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5310:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5312:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5314:	f7fd fbf0 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5318:	8820      	ldrh	r0, [r4, #0]
    531a:	9901      	ldr	r1, [sp, #4]
    531c:	f7fd fae4 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5320:	8820      	ldrh	r0, [r4, #0]
    5322:	9901      	ldr	r1, [sp, #4]
    5324:	f7fd fae0 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    5328:	4a07      	ldr	r2, [pc, #28]	; (5348 <opcode_0x23()+0x64>)
    532a:	4b08      	ldr	r3, [pc, #32]	; (534c <opcode_0x23()+0x68>)
    532c:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    5330:	881b      	ldrh	r3, [r3, #0]
    5332:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    5334:	b280      	uxth	r0, r0
    5336:	b003      	add	sp, #12
    5338:	bd30      	pop	{r4, r5, pc}
    533a:	bf00      	nop
    533c:	2001889f 	.word	0x2001889f
    5340:	20004968 	.word	0x20004968
    5344:	20018886 	.word	0x20018886
    5348:	20015418 	.word	0x20015418
    534c:	20018888 	.word	0x20018888

00005350 <opcode_0x33()>:
uint16_t opcode_0x33() {
    5350:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5352:	2001      	movs	r0, #1
uint16_t opcode_0x33() {
    5354:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5356:	f7fd fce9 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    535a:	4913      	ldr	r1, [pc, #76]	; (53a8 <opcode_0x33()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    535c:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    535e:	4d13      	ldr	r5, [pc, #76]	; (53ac <opcode_0x33()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5360:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5362:	4c13      	ldr	r4, [pc, #76]	; (53b0 <opcode_0x33()+0x60>)
    5364:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5368:	bf4c      	ite	mi
    536a:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    536e:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5372:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5376:	782b      	ldrb	r3, [r5, #0]
    5378:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    537a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    537c:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    537e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5380:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5382:	f7fd fbb9 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5386:	8820      	ldrh	r0, [r4, #0]
    5388:	9901      	ldr	r1, [sp, #4]
    538a:	f7fd faad 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    538e:	8820      	ldrh	r0, [r4, #0]
    5390:	9901      	ldr	r1, [sp, #4]
    5392:	f7fd faa9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    5396:	4a07      	ldr	r2, [pc, #28]	; (53b4 <opcode_0x33()+0x64>)
    5398:	4b07      	ldr	r3, [pc, #28]	; (53b8 <opcode_0x33()+0x68>)
    539a:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    539e:	881b      	ldrh	r3, [r3, #0]
    53a0:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    53a2:	b280      	uxth	r0, r0
    53a4:	b003      	add	sp, #12
    53a6:	bd30      	pop	{r4, r5, pc}
    53a8:	20004968 	.word	0x20004968
    53ac:	2001889f 	.word	0x2001889f
    53b0:	20018886 	.word	0x20018886
    53b4:	20015418 	.word	0x20015418
    53b8:	20018888 	.word	0x20018888

000053bc <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    53bc:	b530      	push	{r4, r5, lr}
    53be:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    53c0:	4d14      	ldr	r5, [pc, #80]	; (5414 <opcode_0x2F()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    53c2:	f7fd fc0d 	bl	2be0 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    53c6:	4914      	ldr	r1, [pc, #80]	; (5418 <opcode_0x2F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    53c8:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    53ca:	4c14      	ldr	r4, [pc, #80]	; (541c <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    53cc:	780a      	ldrb	r2, [r1, #0]
    53ce:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    53d2:	bf4c      	ite	mi
    53d4:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    53d8:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    53dc:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    53e0:	782b      	ldrb	r3, [r5, #0]
    53e2:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    53e4:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    53e6:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    53e8:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    53ea:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    53ec:	f7fd fb84 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    53f0:	8820      	ldrh	r0, [r4, #0]
    53f2:	9901      	ldr	r1, [sp, #4]
    53f4:	f7fd fa78 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    53f8:	8820      	ldrh	r0, [r4, #0]
    53fa:	9901      	ldr	r1, [sp, #4]
    53fc:	f7fd fa74 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    5400:	4a07      	ldr	r2, [pc, #28]	; (5420 <opcode_0x2F()+0x64>)
    5402:	4b08      	ldr	r3, [pc, #32]	; (5424 <opcode_0x2F()+0x68>)
    5404:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    5408:	881b      	ldrh	r3, [r3, #0]
    540a:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    540c:	b280      	uxth	r0, r0
    540e:	b003      	add	sp, #12
    5410:	bd30      	pop	{r4, r5, pc}
    5412:	bf00      	nop
    5414:	2001889f 	.word	0x2001889f
    5418:	20004968 	.word	0x20004968
    541c:	20018886 	.word	0x20018886
    5420:	20015418 	.word	0x20015418
    5424:	20018888 	.word	0x20018888

00005428 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    5428:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    542a:	2001      	movs	r0, #1
uint16_t opcode_0x3F() {
    542c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    542e:	f7fd fbf3 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5432:	4913      	ldr	r1, [pc, #76]	; (5480 <opcode_0x3F()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5434:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    5436:	4d13      	ldr	r5, [pc, #76]	; (5484 <opcode_0x3F()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5438:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    543a:	4c13      	ldr	r4, [pc, #76]	; (5488 <opcode_0x3F()+0x60>)
    543c:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5440:	bf4c      	ite	mi
    5442:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5446:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    544a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    544e:	782b      	ldrb	r3, [r5, #0]
    5450:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5452:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5454:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5456:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5458:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    545a:	f7fd fb4d 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    545e:	8820      	ldrh	r0, [r4, #0]
    5460:	9901      	ldr	r1, [sp, #4]
    5462:	f7fd fa41 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5466:	8820      	ldrh	r0, [r4, #0]
    5468:	9901      	ldr	r1, [sp, #4]
    546a:	f7fd fa3d 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    546e:	4a07      	ldr	r2, [pc, #28]	; (548c <opcode_0x3F()+0x64>)
    5470:	4b07      	ldr	r3, [pc, #28]	; (5490 <opcode_0x3F()+0x68>)
    5472:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    5476:	881b      	ldrh	r3, [r3, #0]
    5478:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    547a:	b280      	uxth	r0, r0
    547c:	b003      	add	sp, #12
    547e:	bd30      	pop	{r4, r5, pc}
    5480:	20004968 	.word	0x20004968
    5484:	2001889f 	.word	0x2001889f
    5488:	20018886 	.word	0x20018886
    548c:	20015418 	.word	0x20015418
    5490:	20018888 	.word	0x20018888

00005494 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    5494:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    5496:	2001      	movs	r0, #1
uint16_t opcode_0x3B() {
    5498:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    549a:	f7fd fbed 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    549e:	4913      	ldr	r1, [pc, #76]	; (54ec <opcode_0x3B()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    54a0:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    54a2:	4d13      	ldr	r5, [pc, #76]	; (54f0 <opcode_0x3B()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    54a4:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    54a6:	4c13      	ldr	r4, [pc, #76]	; (54f4 <opcode_0x3B()+0x60>)
    54a8:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    54ac:	bf4c      	ite	mi
    54ae:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    54b2:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    54b6:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    54ba:	782b      	ldrb	r3, [r5, #0]
    54bc:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    54be:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    54c0:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    54c2:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    54c4:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    54c6:	f7fd fb17 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    54ca:	8820      	ldrh	r0, [r4, #0]
    54cc:	9901      	ldr	r1, [sp, #4]
    54ce:	f7fd fa0b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    54d2:	8820      	ldrh	r0, [r4, #0]
    54d4:	9901      	ldr	r1, [sp, #4]
    54d6:	f7fd fa07 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    54da:	4a07      	ldr	r2, [pc, #28]	; (54f8 <opcode_0x3B()+0x64>)
    54dc:	4b07      	ldr	r3, [pc, #28]	; (54fc <opcode_0x3B()+0x68>)
    54de:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    54e2:	881b      	ldrh	r3, [r3, #0]
    54e4:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    54e6:	b280      	uxth	r0, r0
    54e8:	b003      	add	sp, #12
    54ea:	bd30      	pop	{r4, r5, pc}
    54ec:	20004968 	.word	0x20004968
    54f0:	2001889f 	.word	0x2001889f
    54f4:	20018886 	.word	0x20018886
    54f8:	20015418 	.word	0x20015418
    54fc:	20018888 	.word	0x20018888

00005500 <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    5500:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5502:	4d18      	ldr	r5, [pc, #96]	; (5564 <opcode_0x47()+0x64>)
    5504:	b083      	sub	sp, #12
    5506:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5508:	4c17      	ldr	r4, [pc, #92]	; (5568 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    550a:	8828      	ldrh	r0, [r5, #0]
    550c:	3001      	adds	r0, #1
    550e:	b280      	uxth	r0, r0
    5510:	f7fd f82e 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5514:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5516:	b280      	uxth	r0, r0
    5518:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    551a:	f7fd f829 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    551e:	4a13      	ldr	r2, [pc, #76]	; (556c <opcode_0x47()+0x6c>)
    5520:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5522:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5526:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5528:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    552a:	bf4c      	ite	mi
    552c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5530:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5534:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5536:	4b0e      	ldr	r3, [pc, #56]	; (5570 <opcode_0x47()+0x70>)
    5538:	7818      	ldrb	r0, [r3, #0]
    553a:	4048      	eors	r0, r1
    553c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    553e:	f7fd fadb 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5542:	9901      	ldr	r1, [sp, #4]
    5544:	8820      	ldrh	r0, [r4, #0]
    5546:	f7fd f9cf 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    554a:	8820      	ldrh	r0, [r4, #0]
    554c:	9901      	ldr	r1, [sp, #4]
    554e:	f7fd f9cb 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    5552:	4a08      	ldr	r2, [pc, #32]	; (5574 <opcode_0x47()+0x74>)
    5554:	882b      	ldrh	r3, [r5, #0]
    5556:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    555a:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    555c:	b280      	uxth	r0, r0
    555e:	b003      	add	sp, #12
    5560:	bd30      	pop	{r4, r5, pc}
    5562:	bf00      	nop
    5564:	20018888 	.word	0x20018888
    5568:	20018886 	.word	0x20018886
    556c:	20004968 	.word	0x20004968
    5570:	2001889f 	.word	0x2001889f
    5574:	20015418 	.word	0x20015418

00005578 <opcode_0x57()>:
uint16_t opcode_0x57() {
    5578:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    557a:	4c13      	ldr	r4, [pc, #76]	; (55c8 <opcode_0x57()+0x50>)
uint16_t opcode_0x57() {
    557c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    557e:	f7fd faef 	bl	2b60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5582:	07c2      	lsls	r2, r0, #31
    5584:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5586:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    558a:	4a10      	ldr	r2, [pc, #64]	; (55cc <opcode_0x57()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    558c:	bf4c      	ite	mi
    558e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5592:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5596:	7810      	ldrb	r0, [r2, #0]
    5598:	7023      	strb	r3, [r4, #0]
    559a:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    559c:	4c0c      	ldr	r4, [pc, #48]	; (55d0 <opcode_0x57()+0x58>)
    559e:	9101      	str	r1, [sp, #4]
    55a0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    55a2:	f7fd faa9 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    55a6:	8820      	ldrh	r0, [r4, #0]
    55a8:	9901      	ldr	r1, [sp, #4]
    55aa:	f7fd f99d 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55ae:	8820      	ldrh	r0, [r4, #0]
    55b0:	9901      	ldr	r1, [sp, #4]
    55b2:	f7fd f999 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    55b6:	4a07      	ldr	r2, [pc, #28]	; (55d4 <opcode_0x57()+0x5c>)
    55b8:	4b07      	ldr	r3, [pc, #28]	; (55d8 <opcode_0x57()+0x60>)
    55ba:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    55be:	881b      	ldrh	r3, [r3, #0]
    55c0:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    55c2:	b280      	uxth	r0, r0
    55c4:	b002      	add	sp, #8
    55c6:	bd10      	pop	{r4, pc}
    55c8:	20004968 	.word	0x20004968
    55cc:	2001889f 	.word	0x2001889f
    55d0:	20018886 	.word	0x20018886
    55d4:	20016418 	.word	0x20016418
    55d8:	20018888 	.word	0x20018888

000055dc <opcode_0x43()>:
uint16_t opcode_0x43() {
    55dc:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    55de:	4c13      	ldr	r4, [pc, #76]	; (562c <opcode_0x43()+0x50>)
uint16_t opcode_0x43() {
    55e0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    55e2:	f7fd fb79 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    55e6:	07c2      	lsls	r2, r0, #31
    55e8:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    55ea:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    55ee:	4a10      	ldr	r2, [pc, #64]	; (5630 <opcode_0x43()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    55f0:	bf4c      	ite	mi
    55f2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    55f6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    55fa:	7810      	ldrb	r0, [r2, #0]
    55fc:	7023      	strb	r3, [r4, #0]
    55fe:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5600:	4c0c      	ldr	r4, [pc, #48]	; (5634 <opcode_0x43()+0x58>)
    5602:	9101      	str	r1, [sp, #4]
    5604:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5606:	f7fd fa77 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    560a:	8820      	ldrh	r0, [r4, #0]
    560c:	9901      	ldr	r1, [sp, #4]
    560e:	f7fd f96b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5612:	8820      	ldrh	r0, [r4, #0]
    5614:	9901      	ldr	r1, [sp, #4]
    5616:	f7fd f967 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    561a:	4a07      	ldr	r2, [pc, #28]	; (5638 <opcode_0x43()+0x5c>)
    561c:	4b07      	ldr	r3, [pc, #28]	; (563c <opcode_0x43()+0x60>)
    561e:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    5622:	881b      	ldrh	r3, [r3, #0]
    5624:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    5626:	b280      	uxth	r0, r0
    5628:	b002      	add	sp, #8
    562a:	bd10      	pop	{r4, pc}
    562c:	20004968 	.word	0x20004968
    5630:	2001889f 	.word	0x2001889f
    5634:	20018886 	.word	0x20018886
    5638:	20015418 	.word	0x20015418
    563c:	20018888 	.word	0x20018888

00005640 <opcode_0x53()>:
uint16_t opcode_0x53() {
    5640:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5642:	4c14      	ldr	r4, [pc, #80]	; (5694 <opcode_0x53()+0x54>)
uint16_t opcode_0x53() {
    5644:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    5646:	2001      	movs	r0, #1
    5648:	f7fd fb70 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    564c:	7823      	ldrb	r3, [r4, #0]
    564e:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5650:	4a11      	ldr	r2, [pc, #68]	; (5698 <opcode_0x53()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5652:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5656:	bf4c      	ite	mi
    5658:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    565c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5660:	7810      	ldrb	r0, [r2, #0]
    5662:	7023      	strb	r3, [r4, #0]
    5664:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5666:	4c0d      	ldr	r4, [pc, #52]	; (569c <opcode_0x53()+0x5c>)
    5668:	9101      	str	r1, [sp, #4]
    566a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    566c:	f7fd fa44 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5670:	8820      	ldrh	r0, [r4, #0]
    5672:	9901      	ldr	r1, [sp, #4]
    5674:	f7fd f938 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5678:	8820      	ldrh	r0, [r4, #0]
    567a:	9901      	ldr	r1, [sp, #4]
    567c:	f7fd f934 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    5680:	4a07      	ldr	r2, [pc, #28]	; (56a0 <opcode_0x53()+0x60>)
    5682:	4b08      	ldr	r3, [pc, #32]	; (56a4 <opcode_0x53()+0x64>)
    5684:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    5688:	881b      	ldrh	r3, [r3, #0]
    568a:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    568c:	b280      	uxth	r0, r0
    568e:	b002      	add	sp, #8
    5690:	bd10      	pop	{r4, pc}
    5692:	bf00      	nop
    5694:	20004968 	.word	0x20004968
    5698:	2001889f 	.word	0x2001889f
    569c:	20018886 	.word	0x20018886
    56a0:	20016418 	.word	0x20016418
    56a4:	20018888 	.word	0x20018888

000056a8 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    56a8:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56aa:	4c13      	ldr	r4, [pc, #76]	; (56f8 <opcode_0x4F()+0x50>)
uint16_t opcode_0x4F() {
    56ac:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    56ae:	f7fd fa97 	bl	2be0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56b2:	07c2      	lsls	r2, r0, #31
    56b4:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    56b6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    56ba:	4a10      	ldr	r2, [pc, #64]	; (56fc <opcode_0x4F()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56bc:	bf4c      	ite	mi
    56be:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    56c2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    56c6:	7810      	ldrb	r0, [r2, #0]
    56c8:	7023      	strb	r3, [r4, #0]
    56ca:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    56cc:	4c0c      	ldr	r4, [pc, #48]	; (5700 <opcode_0x4F()+0x58>)
    56ce:	9101      	str	r1, [sp, #4]
    56d0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    56d2:	f7fd fa11 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    56d6:	8820      	ldrh	r0, [r4, #0]
    56d8:	9901      	ldr	r1, [sp, #4]
    56da:	f7fd f905 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    56de:	8820      	ldrh	r0, [r4, #0]
    56e0:	9901      	ldr	r1, [sp, #4]
    56e2:	f7fd f901 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    56e6:	4a07      	ldr	r2, [pc, #28]	; (5704 <opcode_0x4F()+0x5c>)
    56e8:	4b07      	ldr	r3, [pc, #28]	; (5708 <opcode_0x4F()+0x60>)
    56ea:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    56ee:	881b      	ldrh	r3, [r3, #0]
    56f0:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    56f2:	b280      	uxth	r0, r0
    56f4:	b002      	add	sp, #8
    56f6:	bd10      	pop	{r4, pc}
    56f8:	20004968 	.word	0x20004968
    56fc:	2001889f 	.word	0x2001889f
    5700:	20018886 	.word	0x20018886
    5704:	20016418 	.word	0x20016418
    5708:	20018888 	.word	0x20018888

0000570c <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    570c:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    570e:	4c14      	ldr	r4, [pc, #80]	; (5760 <opcode_0x5F()+0x54>)
uint16_t opcode_0x5F() {
    5710:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    5712:	2001      	movs	r0, #1
    5714:	f7fd fa80 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5718:	7823      	ldrb	r3, [r4, #0]
    571a:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    571c:	4a11      	ldr	r2, [pc, #68]	; (5764 <opcode_0x5F()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    571e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5722:	bf4c      	ite	mi
    5724:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5728:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    572c:	7810      	ldrb	r0, [r2, #0]
    572e:	7023      	strb	r3, [r4, #0]
    5730:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5732:	4c0d      	ldr	r4, [pc, #52]	; (5768 <opcode_0x5F()+0x5c>)
    5734:	9101      	str	r1, [sp, #4]
    5736:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5738:	f7fd f9de 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    573c:	8820      	ldrh	r0, [r4, #0]
    573e:	9901      	ldr	r1, [sp, #4]
    5740:	f7fd f8d2 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5744:	8820      	ldrh	r0, [r4, #0]
    5746:	9901      	ldr	r1, [sp, #4]
    5748:	f7fd f8ce 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    574c:	4a07      	ldr	r2, [pc, #28]	; (576c <opcode_0x5F()+0x60>)
    574e:	4b08      	ldr	r3, [pc, #32]	; (5770 <opcode_0x5F()+0x64>)
    5750:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    5754:	881b      	ldrh	r3, [r3, #0]
    5756:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    5758:	b280      	uxth	r0, r0
    575a:	b002      	add	sp, #8
    575c:	bd10      	pop	{r4, pc}
    575e:	bf00      	nop
    5760:	20004968 	.word	0x20004968
    5764:	2001889f 	.word	0x2001889f
    5768:	20018886 	.word	0x20018886
    576c:	20016418 	.word	0x20016418
    5770:	20018888 	.word	0x20018888

00005774 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    5774:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5776:	4c14      	ldr	r4, [pc, #80]	; (57c8 <opcode_0x5B()+0x54>)
uint16_t opcode_0x5B() {
    5778:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    577a:	2001      	movs	r0, #1
    577c:	f7fd fa7c 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5780:	7823      	ldrb	r3, [r4, #0]
    5782:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5784:	4a11      	ldr	r2, [pc, #68]	; (57cc <opcode_0x5B()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5786:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    578a:	bf4c      	ite	mi
    578c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5790:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5794:	7810      	ldrb	r0, [r2, #0]
    5796:	7023      	strb	r3, [r4, #0]
    5798:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    579a:	4c0d      	ldr	r4, [pc, #52]	; (57d0 <opcode_0x5B()+0x5c>)
    579c:	9101      	str	r1, [sp, #4]
    579e:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    57a0:	f7fd f9aa 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    57a4:	8820      	ldrh	r0, [r4, #0]
    57a6:	9901      	ldr	r1, [sp, #4]
    57a8:	f7fd f89e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    57ac:	8820      	ldrh	r0, [r4, #0]
    57ae:	9901      	ldr	r1, [sp, #4]
    57b0:	f7fd f89a 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    57b4:	4a07      	ldr	r2, [pc, #28]	; (57d4 <opcode_0x5B()+0x60>)
    57b6:	4b08      	ldr	r3, [pc, #32]	; (57d8 <opcode_0x5B()+0x64>)
    57b8:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    57bc:	881b      	ldrh	r3, [r3, #0]
    57be:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    57c0:	b280      	uxth	r0, r0
    57c2:	b002      	add	sp, #8
    57c4:	bd10      	pop	{r4, pc}
    57c6:	bf00      	nop
    57c8:	20004968 	.word	0x20004968
    57cc:	2001889f 	.word	0x2001889f
    57d0:	20018886 	.word	0x20018886
    57d4:	20016418 	.word	0x20016418
    57d8:	20018888 	.word	0x20018888

000057dc <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    57de:	4e16      	ldr	r6, [pc, #88]	; (5838 <opcode_0x67()+0x5c>)
    57e0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57e2:	4d16      	ldr	r5, [pc, #88]	; (583c <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    57e4:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    57e6:	4f16      	ldr	r7, [pc, #88]	; (5840 <opcode_0x67()+0x64>)
    57e8:	3001      	adds	r0, #1
    57ea:	b280      	uxth	r0, r0
    57ec:	f7fc fec0 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    57f0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57f2:	b280      	uxth	r0, r0
    57f4:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    57f6:	f7fc febb 	bl	2570 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    57fa:	4a12      	ldr	r2, [pc, #72]	; (5844 <opcode_0x67()+0x68>)
    57fc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    57fe:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    5802:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5804:	7813      	ldrb	r3, [r2, #0]
    5806:	4621      	mov	r1, r4
    global_temp = local_data;
    5808:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    580a:	bf4c      	ite	mi
    580c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5810:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5814:	7013      	strb	r3, [r2, #0]
    5816:	f7fd f867 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    581a:	4621      	mov	r1, r4
    581c:	8828      	ldrh	r0, [r5, #0]
    581e:	f7fd f863 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    5822:	7838      	ldrb	r0, [r7, #0]
    5824:	f7fd ff38 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    5828:	4a07      	ldr	r2, [pc, #28]	; (5848 <opcode_0x67()+0x6c>)
    582a:	8833      	ldrh	r3, [r6, #0]
    582c:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    5830:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    5832:	b280      	uxth	r0, r0
    5834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5836:	bf00      	nop
    5838:	20018888 	.word	0x20018888
    583c:	20018886 	.word	0x20018886
    5840:	2001889c 	.word	0x2001889c
    5844:	20004968 	.word	0x20004968
    5848:	20016418 	.word	0x20016418

0000584c <opcode_0x77()>:
uint16_t opcode_0x77() {
    584c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    584e:	f7fd f987 	bl	2b60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5852:	4a10      	ldr	r2, [pc, #64]	; (5894 <opcode_0x77()+0x48>)
    5854:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5856:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    585a:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    585c:	4e0e      	ldr	r6, [pc, #56]	; (5898 <opcode_0x77()+0x4c>)
    585e:	4621      	mov	r1, r4
    5860:	bf4c      	ite	mi
    5862:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5866:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    586a:	4d0c      	ldr	r5, [pc, #48]	; (589c <opcode_0x77()+0x50>)
    586c:	8830      	ldrh	r0, [r6, #0]
    586e:	7013      	strb	r3, [r2, #0]
    5870:	702c      	strb	r4, [r5, #0]
    5872:	f7fd f839 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5876:	4621      	mov	r1, r4
    5878:	8830      	ldrh	r0, [r6, #0]
    587a:	f7fd f835 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    587e:	7828      	ldrb	r0, [r5, #0]
    5880:	f7fd ff0a 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    5884:	4a06      	ldr	r2, [pc, #24]	; (58a0 <opcode_0x77()+0x54>)
    5886:	4b07      	ldr	r3, [pc, #28]	; (58a4 <opcode_0x77()+0x58>)
    5888:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    588c:	881b      	ldrh	r3, [r3, #0]
    588e:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    5890:	b280      	uxth	r0, r0
    5892:	bd70      	pop	{r4, r5, r6, pc}
    5894:	20004968 	.word	0x20004968
    5898:	20018886 	.word	0x20018886
    589c:	2001889c 	.word	0x2001889c
    58a0:	20016418 	.word	0x20016418
    58a4:	20018888 	.word	0x20018888

000058a8 <opcode_0x63()>:
uint16_t opcode_0x63() {
    58a8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    58aa:	f7fd fa15 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    58ae:	4a10      	ldr	r2, [pc, #64]	; (58f0 <opcode_0x63()+0x48>)
    58b0:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    58b2:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    58b6:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    58b8:	4e0e      	ldr	r6, [pc, #56]	; (58f4 <opcode_0x63()+0x4c>)
    58ba:	4621      	mov	r1, r4
    58bc:	bf4c      	ite	mi
    58be:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58c2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    58c6:	4d0c      	ldr	r5, [pc, #48]	; (58f8 <opcode_0x63()+0x50>)
    58c8:	8830      	ldrh	r0, [r6, #0]
    58ca:	7013      	strb	r3, [r2, #0]
    58cc:	702c      	strb	r4, [r5, #0]
    58ce:	f7fd f80b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58d2:	4621      	mov	r1, r4
    58d4:	8830      	ldrh	r0, [r6, #0]
    58d6:	f7fd f807 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    58da:	7828      	ldrb	r0, [r5, #0]
    58dc:	f7fd fedc 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    58e0:	4a06      	ldr	r2, [pc, #24]	; (58fc <opcode_0x63()+0x54>)
    58e2:	4b07      	ldr	r3, [pc, #28]	; (5900 <opcode_0x63()+0x58>)
    58e4:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    58e8:	881b      	ldrh	r3, [r3, #0]
    58ea:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    58ec:	b280      	uxth	r0, r0
    58ee:	bd70      	pop	{r4, r5, r6, pc}
    58f0:	20004968 	.word	0x20004968
    58f4:	20018886 	.word	0x20018886
    58f8:	2001889c 	.word	0x2001889c
    58fc:	20016418 	.word	0x20016418
    5900:	20018888 	.word	0x20018888

00005904 <opcode_0x73()>:
uint16_t opcode_0x73() {
    5904:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    5906:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5908:	4e11      	ldr	r6, [pc, #68]	; (5950 <opcode_0x73()+0x4c>)
    590a:	f7fd fa0f 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    590e:	4a11      	ldr	r2, [pc, #68]	; (5954 <opcode_0x73()+0x50>)
    5910:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5912:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5916:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5918:	4d0f      	ldr	r5, [pc, #60]	; (5958 <opcode_0x73()+0x54>)
    591a:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    591c:	bf4c      	ite	mi
    591e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5922:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5926:	8830      	ldrh	r0, [r6, #0]
    5928:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    592a:	702c      	strb	r4, [r5, #0]
    592c:	f7fc ffdc 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5930:	4621      	mov	r1, r4
    5932:	8830      	ldrh	r0, [r6, #0]
    5934:	f7fc ffd8 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5938:	7828      	ldrb	r0, [r5, #0]
    593a:	f7fd fead 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    593e:	4a07      	ldr	r2, [pc, #28]	; (595c <opcode_0x73()+0x58>)
    5940:	4b07      	ldr	r3, [pc, #28]	; (5960 <opcode_0x73()+0x5c>)
    5942:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    5946:	881b      	ldrh	r3, [r3, #0]
    5948:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    594a:	b280      	uxth	r0, r0
    594c:	bd70      	pop	{r4, r5, r6, pc}
    594e:	bf00      	nop
    5950:	20018886 	.word	0x20018886
    5954:	20004968 	.word	0x20004968
    5958:	2001889c 	.word	0x2001889c
    595c:	20016418 	.word	0x20016418
    5960:	20018888 	.word	0x20018888

00005964 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    5964:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    5966:	f7fd f93b 	bl	2be0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    596a:	4a10      	ldr	r2, [pc, #64]	; (59ac <opcode_0x6F()+0x48>)
    596c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    596e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5972:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5974:	4e0e      	ldr	r6, [pc, #56]	; (59b0 <opcode_0x6F()+0x4c>)
    5976:	4621      	mov	r1, r4
    5978:	bf4c      	ite	mi
    597a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    597e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5982:	4d0c      	ldr	r5, [pc, #48]	; (59b4 <opcode_0x6F()+0x50>)
    5984:	8830      	ldrh	r0, [r6, #0]
    5986:	7013      	strb	r3, [r2, #0]
    5988:	702c      	strb	r4, [r5, #0]
    598a:	f7fc ffad 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    598e:	4621      	mov	r1, r4
    5990:	8830      	ldrh	r0, [r6, #0]
    5992:	f7fc ffa9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5996:	7828      	ldrb	r0, [r5, #0]
    5998:	f7fd fe7e 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    599c:	4a06      	ldr	r2, [pc, #24]	; (59b8 <opcode_0x6F()+0x54>)
    599e:	4b07      	ldr	r3, [pc, #28]	; (59bc <opcode_0x6F()+0x58>)
    59a0:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    59a4:	881b      	ldrh	r3, [r3, #0]
    59a6:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    59a8:	b280      	uxth	r0, r0
    59aa:	bd70      	pop	{r4, r5, r6, pc}
    59ac:	20004968 	.word	0x20004968
    59b0:	20018886 	.word	0x20018886
    59b4:	2001889c 	.word	0x2001889c
    59b8:	20016418 	.word	0x20016418
    59bc:	20018888 	.word	0x20018888

000059c0 <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    59c0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    59c2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    59c4:	4e11      	ldr	r6, [pc, #68]	; (5a0c <opcode_0x7F()+0x4c>)
    59c6:	f7fd f927 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59ca:	4a11      	ldr	r2, [pc, #68]	; (5a10 <opcode_0x7F()+0x50>)
    59cc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    59ce:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59d2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    59d4:	4d0f      	ldr	r5, [pc, #60]	; (5a14 <opcode_0x7F()+0x54>)
    59d6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59d8:	bf4c      	ite	mi
    59da:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59de:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    59e2:	8830      	ldrh	r0, [r6, #0]
    59e4:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    59e6:	702c      	strb	r4, [r5, #0]
    59e8:	f7fc ff7e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59ec:	4621      	mov	r1, r4
    59ee:	8830      	ldrh	r0, [r6, #0]
    59f0:	f7fc ff7a 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    59f4:	7828      	ldrb	r0, [r5, #0]
    59f6:	f7fd fe4f 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    59fa:	4a07      	ldr	r2, [pc, #28]	; (5a18 <opcode_0x7F()+0x58>)
    59fc:	4b07      	ldr	r3, [pc, #28]	; (5a1c <opcode_0x7F()+0x5c>)
    59fe:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    5a02:	881b      	ldrh	r3, [r3, #0]
    5a04:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    5a06:	b280      	uxth	r0, r0
    5a08:	bd70      	pop	{r4, r5, r6, pc}
    5a0a:	bf00      	nop
    5a0c:	20018886 	.word	0x20018886
    5a10:	20004968 	.word	0x20004968
    5a14:	2001889c 	.word	0x2001889c
    5a18:	20016418 	.word	0x20016418
    5a1c:	20018888 	.word	0x20018888

00005a20 <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    5a20:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    5a22:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5a24:	4e11      	ldr	r6, [pc, #68]	; (5a6c <opcode_0x7B()+0x4c>)
    5a26:	f7fd f927 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a2a:	4a11      	ldr	r2, [pc, #68]	; (5a70 <opcode_0x7B()+0x50>)
    5a2c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5a2e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a32:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5a34:	4d0f      	ldr	r5, [pc, #60]	; (5a74 <opcode_0x7B()+0x54>)
    5a36:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a38:	bf4c      	ite	mi
    5a3a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a3e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5a42:	8830      	ldrh	r0, [r6, #0]
    5a44:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5a46:	702c      	strb	r4, [r5, #0]
    5a48:	f7fc ff4e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a4c:	4621      	mov	r1, r4
    5a4e:	8830      	ldrh	r0, [r6, #0]
    5a50:	f7fc ff4a 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5a54:	7828      	ldrb	r0, [r5, #0]
    5a56:	f7fd fe1f 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    5a5a:	4a07      	ldr	r2, [pc, #28]	; (5a78 <opcode_0x7B()+0x58>)
    5a5c:	4b07      	ldr	r3, [pc, #28]	; (5a7c <opcode_0x7B()+0x5c>)
    5a5e:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    5a62:	881b      	ldrh	r3, [r3, #0]
    5a64:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    5a66:	b280      	uxth	r0, r0
    5a68:	bd70      	pop	{r4, r5, r6, pc}
    5a6a:	bf00      	nop
    5a6c:	20018886 	.word	0x20018886
    5a70:	20004968 	.word	0x20004968
    5a74:	2001889c 	.word	0x2001889c
    5a78:	20016418 	.word	0x20016418
    5a7c:	20018888 	.word	0x20018888

00005a80 <opcode_0xC7()>:
} // 0xBF - LAX - Absolute , Y

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    5a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5a82:	4d1a      	ldr	r5, [pc, #104]	; (5aec <opcode_0xC7()+0x6c>)
    5a84:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a86:	4e1a      	ldr	r6, [pc, #104]	; (5af0 <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    5a88:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    5a8a:	4f1a      	ldr	r7, [pc, #104]	; (5af4 <opcode_0xC7()+0x74>)
    5a8c:	3001      	adds	r0, #1
    5a8e:	b280      	uxth	r0, r0
    5a90:	f7fc fd6e 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5a94:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a96:	b280      	uxth	r0, r0
    5a98:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    5a9a:	f7fc fd69 	bl	2570 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5a9e:	3801      	subs	r0, #1
    5aa0:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5aa2:	4620      	mov	r0, r4
    global_temp = local_data;
    5aa4:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5aa6:	f7fd f827 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5aaa:	4621      	mov	r1, r4
    5aac:	8830      	ldrh	r0, [r6, #0]
    5aae:	f7fc ff1b 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ab2:	4621      	mov	r1, r4
    5ab4:	8830      	ldrh	r0, [r6, #0]
    5ab6:	f7fc ff17 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5aba:	4b0f      	ldr	r3, [pc, #60]	; (5af8 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    5abc:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    5abe:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ac0:	4a0e      	ldr	r2, [pc, #56]	; (5afc <opcode_0xC7()+0x7c>)
    5ac2:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ac4:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ac8:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5aca:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5acc:	bf94      	ite	ls
    5ace:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5ad2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5ad6:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ad8:	f7fd f80e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    5adc:	4a08      	ldr	r2, [pc, #32]	; (5b00 <opcode_0xC7()+0x80>)
    5ade:	882b      	ldrh	r3, [r5, #0]
    5ae0:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    5ae4:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    5ae6:	b280      	uxth	r0, r0
    5ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5aea:	bf00      	nop
    5aec:	20018888 	.word	0x20018888
    5af0:	20018886 	.word	0x20018886
    5af4:	2001889c 	.word	0x2001889c
    5af8:	2001889f 	.word	0x2001889f
    5afc:	20004968 	.word	0x20004968
    5b00:	20017418 	.word	0x20017418

00005b04 <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    5b04:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    5b06:	f7fd f82b 	bl	2b60 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    5b0a:	3801      	subs	r0, #1
    global_temp = local_data;
    5b0c:	4d13      	ldr	r5, [pc, #76]	; (5b5c <opcode_0xD7()+0x58>)
    local_data = local_data - 1;
    5b0e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5b10:	4e13      	ldr	r6, [pc, #76]	; (5b60 <opcode_0xD7()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5b12:	4620      	mov	r0, r4
    global_temp = local_data;
    5b14:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5b16:	f7fc ffef 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b1a:	8830      	ldrh	r0, [r6, #0]
    5b1c:	4621      	mov	r1, r4
    5b1e:	f7fc fee3 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b22:	4621      	mov	r1, r4
    5b24:	8830      	ldrh	r0, [r6, #0]
    5b26:	f7fc fedf 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5b2a:	4b0e      	ldr	r3, [pc, #56]	; (5b64 <opcode_0xD7()+0x60>)
    Calculate_CMP(global_temp);
    5b2c:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5b2e:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5b30:	4a0d      	ldr	r2, [pc, #52]	; (5b68 <opcode_0xD7()+0x64>)
    5b32:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5b34:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5b38:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5b3a:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5b3c:	bf94      	ite	ls
    5b3e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5b42:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5b46:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5b48:	f7fc ffd6 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    5b4c:	4a07      	ldr	r2, [pc, #28]	; (5b6c <opcode_0xD7()+0x68>)
    5b4e:	4b08      	ldr	r3, [pc, #32]	; (5b70 <opcode_0xD7()+0x6c>)
    5b50:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    5b54:	881b      	ldrh	r3, [r3, #0]
    5b56:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    5b58:	b280      	uxth	r0, r0
    5b5a:	bd70      	pop	{r4, r5, r6, pc}
    5b5c:	2001889c 	.word	0x2001889c
    5b60:	20018886 	.word	0x20018886
    5b64:	2001889f 	.word	0x2001889f
    5b68:	20004968 	.word	0x20004968
    5b6c:	20017418 	.word	0x20017418
    5b70:	20018888 	.word	0x20018888

00005b74 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    5b74:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    5b76:	f7fd f8af 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    5b7a:	3801      	subs	r0, #1
    global_temp = local_data;
    5b7c:	4d13      	ldr	r5, [pc, #76]	; (5bcc <opcode_0xC3()+0x58>)
    local_data = local_data - 1;
    5b7e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5b80:	4e13      	ldr	r6, [pc, #76]	; (5bd0 <opcode_0xC3()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5b82:	4620      	mov	r0, r4
    global_temp = local_data;
    5b84:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5b86:	f7fc ffb7 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b8a:	8830      	ldrh	r0, [r6, #0]
    5b8c:	4621      	mov	r1, r4
    5b8e:	f7fc feab 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b92:	4621      	mov	r1, r4
    5b94:	8830      	ldrh	r0, [r6, #0]
    5b96:	f7fc fea7 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5b9a:	4b0e      	ldr	r3, [pc, #56]	; (5bd4 <opcode_0xC3()+0x60>)
    Calculate_CMP(global_temp);
    5b9c:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5b9e:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ba0:	4a0d      	ldr	r2, [pc, #52]	; (5bd8 <opcode_0xC3()+0x64>)
    5ba2:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ba4:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ba8:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5baa:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5bac:	bf94      	ite	ls
    5bae:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5bb2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5bb6:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5bb8:	f7fc ff9e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    5bbc:	4a07      	ldr	r2, [pc, #28]	; (5bdc <opcode_0xC3()+0x68>)
    5bbe:	4b08      	ldr	r3, [pc, #32]	; (5be0 <opcode_0xC3()+0x6c>)
    5bc0:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    5bc4:	881b      	ldrh	r3, [r3, #0]
    5bc6:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    5bc8:	b280      	uxth	r0, r0
    5bca:	bd70      	pop	{r4, r5, r6, pc}
    5bcc:	2001889c 	.word	0x2001889c
    5bd0:	20018886 	.word	0x20018886
    5bd4:	2001889f 	.word	0x2001889f
    5bd8:	20004968 	.word	0x20004968
    5bdc:	20017418 	.word	0x20017418
    5be0:	20018888 	.word	0x20018888

00005be4 <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    5be4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    5be6:	2000      	movs	r0, #0
    global_temp = local_data;
    5be8:	4d15      	ldr	r5, [pc, #84]	; (5c40 <opcode_0xD3()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    5bea:	f7fd f89f 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    5bee:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5bf0:	4e14      	ldr	r6, [pc, #80]	; (5c44 <opcode_0xD3()+0x60>)
    5bf2:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5bf4:	4620      	mov	r0, r4
    global_temp = local_data;
    5bf6:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5bf8:	f7fc ff7e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5bfc:	8830      	ldrh	r0, [r6, #0]
    5bfe:	4621      	mov	r1, r4
    5c00:	f7fc fe72 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c04:	4621      	mov	r1, r4
    5c06:	8830      	ldrh	r0, [r6, #0]
    5c08:	f7fc fe6e 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5c0c:	4b0e      	ldr	r3, [pc, #56]	; (5c48 <opcode_0xD3()+0x64>)
    Calculate_CMP(global_temp);
    5c0e:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5c10:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c12:	4a0e      	ldr	r2, [pc, #56]	; (5c4c <opcode_0xD3()+0x68>)
    5c14:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c16:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c1a:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c1c:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c1e:	bf94      	ite	ls
    5c20:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5c24:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5c28:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c2a:	f7fc ff65 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD3].length);
    5c2e:	4a08      	ldr	r2, [pc, #32]	; (5c50 <opcode_0xD3()+0x6c>)
    5c30:	4b08      	ldr	r3, [pc, #32]	; (5c54 <opcode_0xD3()+0x70>)
    5c32:	f892 0b0d 	ldrb.w	r0, [r2, #2829]	; 0xb0d
    5c36:	881b      	ldrh	r3, [r3, #0]
    5c38:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    5c3a:	b280      	uxth	r0, r0
    5c3c:	bd70      	pop	{r4, r5, r6, pc}
    5c3e:	bf00      	nop
    5c40:	2001889c 	.word	0x2001889c
    5c44:	20018886 	.word	0x20018886
    5c48:	2001889f 	.word	0x2001889f
    5c4c:	20004968 	.word	0x20004968
    5c50:	20017418 	.word	0x20017418
    5c54:	20018888 	.word	0x20018888

00005c58 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    5c58:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    5c5a:	f7fc ffc1 	bl	2be0 <Fetch_Absolute()>
    local_data = local_data - 1;
    5c5e:	3801      	subs	r0, #1
    global_temp = local_data;
    5c60:	4d13      	ldr	r5, [pc, #76]	; (5cb0 <opcode_0xCF()+0x58>)
    local_data = local_data - 1;
    5c62:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5c64:	4e13      	ldr	r6, [pc, #76]	; (5cb4 <opcode_0xCF()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c66:	4620      	mov	r0, r4
    global_temp = local_data;
    5c68:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c6a:	f7fc ff45 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5c6e:	8830      	ldrh	r0, [r6, #0]
    5c70:	4621      	mov	r1, r4
    5c72:	f7fc fe39 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c76:	4621      	mov	r1, r4
    5c78:	8830      	ldrh	r0, [r6, #0]
    5c7a:	f7fc fe35 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5c7e:	4b0e      	ldr	r3, [pc, #56]	; (5cb8 <opcode_0xCF()+0x60>)
    Calculate_CMP(global_temp);
    5c80:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5c82:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c84:	4a0d      	ldr	r2, [pc, #52]	; (5cbc <opcode_0xCF()+0x64>)
    5c86:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c88:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c8c:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c8e:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c90:	bf94      	ite	ls
    5c92:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5c96:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5c9a:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5c9c:	f7fc ff2c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCF].length);
    5ca0:	4a07      	ldr	r2, [pc, #28]	; (5cc0 <opcode_0xCF()+0x68>)
    5ca2:	4b08      	ldr	r3, [pc, #32]	; (5cc4 <opcode_0xCF()+0x6c>)
    5ca4:	f892 0a3d 	ldrb.w	r0, [r2, #2621]	; 0xa3d
    5ca8:	881b      	ldrh	r3, [r3, #0]
    5caa:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    5cac:	b280      	uxth	r0, r0
    5cae:	bd70      	pop	{r4, r5, r6, pc}
    5cb0:	2001889c 	.word	0x2001889c
    5cb4:	20018886 	.word	0x20018886
    5cb8:	2001889f 	.word	0x2001889f
    5cbc:	20004968 	.word	0x20004968
    5cc0:	20017418 	.word	0x20017418
    5cc4:	20018888 	.word	0x20018888

00005cc8 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    5cc8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5cca:	2000      	movs	r0, #0
    global_temp = local_data;
    5ccc:	4d15      	ldr	r5, [pc, #84]	; (5d24 <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5cce:	f7fc ffa3 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    5cd2:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5cd4:	4e14      	ldr	r6, [pc, #80]	; (5d28 <opcode_0xDF()+0x60>)
    5cd6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5cd8:	4620      	mov	r0, r4
    global_temp = local_data;
    5cda:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5cdc:	f7fc ff0c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5ce0:	8830      	ldrh	r0, [r6, #0]
    5ce2:	4621      	mov	r1, r4
    5ce4:	f7fc fe00 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ce8:	4621      	mov	r1, r4
    5cea:	8830      	ldrh	r0, [r6, #0]
    5cec:	f7fc fdfc 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5cf0:	4b0e      	ldr	r3, [pc, #56]	; (5d2c <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    5cf2:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5cf4:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5cf6:	4a0e      	ldr	r2, [pc, #56]	; (5d30 <opcode_0xDF()+0x68>)
    5cf8:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5cfa:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5cfe:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d00:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d02:	bf94      	ite	ls
    5d04:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5d08:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5d0c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d0e:	f7fc fef3 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    5d12:	4a08      	ldr	r2, [pc, #32]	; (5d34 <opcode_0xDF()+0x6c>)
    5d14:	4b08      	ldr	r3, [pc, #32]	; (5d38 <opcode_0xDF()+0x70>)
    5d16:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    5d1a:	881b      	ldrh	r3, [r3, #0]
    5d1c:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    5d1e:	b280      	uxth	r0, r0
    5d20:	bd70      	pop	{r4, r5, r6, pc}
    5d22:	bf00      	nop
    5d24:	2001889c 	.word	0x2001889c
    5d28:	20018886 	.word	0x20018886
    5d2c:	2001889f 	.word	0x2001889f
    5d30:	20004968 	.word	0x20004968
    5d34:	20017418 	.word	0x20017418
    5d38:	20018888 	.word	0x20018888

00005d3c <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    5d3c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    5d3e:	2000      	movs	r0, #0
    global_temp = local_data;
    5d40:	4d15      	ldr	r5, [pc, #84]	; (5d98 <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    5d42:	f7fc ff99 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    5d46:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5d48:	4e14      	ldr	r6, [pc, #80]	; (5d9c <opcode_0xDB()+0x60>)
    5d4a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d4c:	4620      	mov	r0, r4
    global_temp = local_data;
    5d4e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d50:	f7fc fed2 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5d54:	8830      	ldrh	r0, [r6, #0]
    5d56:	4621      	mov	r1, r4
    5d58:	f7fc fdc6 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d5c:	4621      	mov	r1, r4
    5d5e:	8830      	ldrh	r0, [r6, #0]
    5d60:	f7fc fdc2 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5d64:	4b0e      	ldr	r3, [pc, #56]	; (5da0 <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    5d66:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5d68:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d6a:	4a0e      	ldr	r2, [pc, #56]	; (5da4 <opcode_0xDB()+0x68>)
    5d6c:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d6e:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d72:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d74:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d76:	bf94      	ite	ls
    5d78:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5d7c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5d80:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d82:	f7fc feb9 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    5d86:	4a08      	ldr	r2, [pc, #32]	; (5da8 <opcode_0xDB()+0x6c>)
    5d88:	4b08      	ldr	r3, [pc, #32]	; (5dac <opcode_0xDB()+0x70>)
    5d8a:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    5d8e:	881b      	ldrh	r3, [r3, #0]
    5d90:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    5d92:	b280      	uxth	r0, r0
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	bf00      	nop
    5d98:	2001889c 	.word	0x2001889c
    5d9c:	20018886 	.word	0x20018886
    5da0:	2001889f 	.word	0x2001889f
    5da4:	20004968 	.word	0x20004968
    5da8:	20017418 	.word	0x20017418
    5dac:	20018888 	.word	0x20018888

00005db0 <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    5db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5db2:	4e13      	ldr	r6, [pc, #76]	; (5e00 <opcode_0xE7()+0x50>)
    5db4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5db6:	4d13      	ldr	r5, [pc, #76]	; (5e04 <opcode_0xE7()+0x54>)
    return read_byte(register_pc+offset, false);
    5db8:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    5dba:	4f13      	ldr	r7, [pc, #76]	; (5e08 <opcode_0xE7()+0x58>)
    5dbc:	3001      	adds	r0, #1
    5dbe:	b280      	uxth	r0, r0
    5dc0:	f7fc fbd6 	bl	2570 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5dc4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5dc6:	b280      	uxth	r0, r0
    5dc8:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5dca:	f7fc fbd1 	bl	2570 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    5dce:	3001      	adds	r0, #1
    5dd0:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5dd2:	4620      	mov	r0, r4
    global_temp = local_data;
    5dd4:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5dd6:	f7fc fe8f 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5dda:	4621      	mov	r1, r4
    5ddc:	8828      	ldrh	r0, [r5, #0]
    5dde:	f7fc fd83 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5de2:	4621      	mov	r1, r4
    5de4:	8828      	ldrh	r0, [r5, #0]
    5de6:	f7fc fd7f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    5dea:	7838      	ldrb	r0, [r7, #0]
    5dec:	f7fd fcb8 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    5df0:	4a06      	ldr	r2, [pc, #24]	; (5e0c <opcode_0xE7()+0x5c>)
    5df2:	8833      	ldrh	r3, [r6, #0]
    5df4:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    5df8:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    5dfa:	b280      	uxth	r0, r0
    5dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dfe:	bf00      	nop
    5e00:	20018888 	.word	0x20018888
    5e04:	20018886 	.word	0x20018886
    5e08:	2001889c 	.word	0x2001889c
    5e0c:	20017418 	.word	0x20017418

00005e10 <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    5e10:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    5e12:	f7fc fea5 	bl	2b60 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    5e16:	3001      	adds	r0, #1
    global_temp = local_data;
    5e18:	4d0c      	ldr	r5, [pc, #48]	; (5e4c <opcode_0xF7()+0x3c>)
    local_data = local_data + 1;
    5e1a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5e1c:	4e0c      	ldr	r6, [pc, #48]	; (5e50 <opcode_0xF7()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e1e:	4620      	mov	r0, r4
    global_temp = local_data;
    5e20:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e22:	f7fc fe69 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5e26:	8830      	ldrh	r0, [r6, #0]
    5e28:	4621      	mov	r1, r4
    5e2a:	f7fc fd5d 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e2e:	4621      	mov	r1, r4
    5e30:	8830      	ldrh	r0, [r6, #0]
    5e32:	f7fc fd59 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5e36:	7828      	ldrb	r0, [r5, #0]
    5e38:	f7fd fc92 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    5e3c:	4a05      	ldr	r2, [pc, #20]	; (5e54 <opcode_0xF7()+0x44>)
    5e3e:	4b06      	ldr	r3, [pc, #24]	; (5e58 <opcode_0xF7()+0x48>)
    5e40:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    5e44:	881b      	ldrh	r3, [r3, #0]
    5e46:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    5e48:	b280      	uxth	r0, r0
    5e4a:	bd70      	pop	{r4, r5, r6, pc}
    5e4c:	2001889c 	.word	0x2001889c
    5e50:	20018886 	.word	0x20018886
    5e54:	20018418 	.word	0x20018418
    5e58:	20018888 	.word	0x20018888

00005e5c <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    5e5c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    5e5e:	f7fc ff3b 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    5e62:	3001      	adds	r0, #1
    global_temp = local_data;
    5e64:	4d0c      	ldr	r5, [pc, #48]	; (5e98 <opcode_0xE3()+0x3c>)
    local_data = local_data + 1;
    5e66:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5e68:	4e0c      	ldr	r6, [pc, #48]	; (5e9c <opcode_0xE3()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e6a:	4620      	mov	r0, r4
    global_temp = local_data;
    5e6c:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e6e:	f7fc fe43 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5e72:	8830      	ldrh	r0, [r6, #0]
    5e74:	4621      	mov	r1, r4
    5e76:	f7fc fd37 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e7a:	4621      	mov	r1, r4
    5e7c:	8830      	ldrh	r0, [r6, #0]
    5e7e:	f7fc fd33 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5e82:	7828      	ldrb	r0, [r5, #0]
    5e84:	f7fd fc6c 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    5e88:	4a05      	ldr	r2, [pc, #20]	; (5ea0 <opcode_0xE3()+0x44>)
    5e8a:	4b06      	ldr	r3, [pc, #24]	; (5ea4 <opcode_0xE3()+0x48>)
    5e8c:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    5e90:	881b      	ldrh	r3, [r3, #0]
    5e92:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    5e94:	b280      	uxth	r0, r0
    5e96:	bd70      	pop	{r4, r5, r6, pc}
    5e98:	2001889c 	.word	0x2001889c
    5e9c:	20018886 	.word	0x20018886
    5ea0:	20017418 	.word	0x20017418
    5ea4:	20018888 	.word	0x20018888

00005ea8 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    5ea8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    5eaa:	2000      	movs	r0, #0
    global_temp = local_data;
    5eac:	4d0e      	ldr	r5, [pc, #56]	; (5ee8 <opcode_0xF3()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    5eae:	f7fc ff3d 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    5eb2:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    5eb4:	4e0d      	ldr	r6, [pc, #52]	; (5eec <opcode_0xF3()+0x44>)
    5eb6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5eb8:	4620      	mov	r0, r4
    global_temp = local_data;
    5eba:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5ebc:	f7fc fe1c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5ec0:	8830      	ldrh	r0, [r6, #0]
    5ec2:	4621      	mov	r1, r4
    5ec4:	f7fc fd10 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ec8:	4621      	mov	r1, r4
    5eca:	8830      	ldrh	r0, [r6, #0]
    5ecc:	f7fc fd0c 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5ed0:	7828      	ldrb	r0, [r5, #0]
    5ed2:	f7fd fc45 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    5ed6:	4a06      	ldr	r2, [pc, #24]	; (5ef0 <opcode_0xF3()+0x48>)
    5ed8:	4b06      	ldr	r3, [pc, #24]	; (5ef4 <opcode_0xF3()+0x4c>)
    5eda:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    5ede:	881b      	ldrh	r3, [r3, #0]
    5ee0:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    5ee2:	b280      	uxth	r0, r0
    5ee4:	bd70      	pop	{r4, r5, r6, pc}
    5ee6:	bf00      	nop
    5ee8:	2001889c 	.word	0x2001889c
    5eec:	20018886 	.word	0x20018886
    5ef0:	20018418 	.word	0x20018418
    5ef4:	20018888 	.word	0x20018888

00005ef8 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    5ef8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    5efa:	f7fc fe71 	bl	2be0 <Fetch_Absolute()>
    local_data = local_data + 1;
    5efe:	3001      	adds	r0, #1
    global_temp = local_data;
    5f00:	4d0c      	ldr	r5, [pc, #48]	; (5f34 <opcode_0xEF()+0x3c>)
    local_data = local_data + 1;
    5f02:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5f04:	4e0c      	ldr	r6, [pc, #48]	; (5f38 <opcode_0xEF()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f06:	4620      	mov	r0, r4
    global_temp = local_data;
    5f08:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f0a:	f7fc fdf5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5f0e:	8830      	ldrh	r0, [r6, #0]
    5f10:	4621      	mov	r1, r4
    5f12:	f7fc fce9 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f16:	4621      	mov	r1, r4
    5f18:	8830      	ldrh	r0, [r6, #0]
    5f1a:	f7fc fce5 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5f1e:	7828      	ldrb	r0, [r5, #0]
    5f20:	f7fd fc1e 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    5f24:	4a05      	ldr	r2, [pc, #20]	; (5f3c <opcode_0xEF()+0x44>)
    5f26:	4b06      	ldr	r3, [pc, #24]	; (5f40 <opcode_0xEF()+0x48>)
    5f28:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    5f2c:	881b      	ldrh	r3, [r3, #0]
    5f2e:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    5f30:	b280      	uxth	r0, r0
    5f32:	bd70      	pop	{r4, r5, r6, pc}
    5f34:	2001889c 	.word	0x2001889c
    5f38:	20018886 	.word	0x20018886
    5f3c:	20018418 	.word	0x20018418
    5f40:	20018888 	.word	0x20018888

00005f44 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    5f44:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    5f46:	2000      	movs	r0, #0
    global_temp = local_data;
    5f48:	4d0e      	ldr	r5, [pc, #56]	; (5f84 <opcode_0xFF()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    5f4a:	f7fc fe65 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    5f4e:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    5f50:	4e0d      	ldr	r6, [pc, #52]	; (5f88 <opcode_0xFF()+0x44>)
    5f52:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f54:	4620      	mov	r0, r4
    global_temp = local_data;
    5f56:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f58:	f7fc fdce 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5f5c:	8830      	ldrh	r0, [r6, #0]
    5f5e:	4621      	mov	r1, r4
    5f60:	f7fc fcc2 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f64:	4621      	mov	r1, r4
    5f66:	8830      	ldrh	r0, [r6, #0]
    5f68:	f7fc fcbe 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5f6c:	7828      	ldrb	r0, [r5, #0]
    5f6e:	f7fd fbf7 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    5f72:	4a06      	ldr	r2, [pc, #24]	; (5f8c <opcode_0xFF()+0x48>)
    5f74:	4b06      	ldr	r3, [pc, #24]	; (5f90 <opcode_0xFF()+0x4c>)
    5f76:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    5f7a:	881b      	ldrh	r3, [r3, #0]
    5f7c:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    5f7e:	b280      	uxth	r0, r0
    5f80:	bd70      	pop	{r4, r5, r6, pc}
    5f82:	bf00      	nop
    5f84:	2001889c 	.word	0x2001889c
    5f88:	20018886 	.word	0x20018886
    5f8c:	20018418 	.word	0x20018418
    5f90:	20018888 	.word	0x20018888

00005f94 <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    5f94:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    5f96:	2000      	movs	r0, #0
    global_temp = local_data;
    5f98:	4d0e      	ldr	r5, [pc, #56]	; (5fd4 <opcode_0xFB()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    5f9a:	f7fc fe6d 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    5f9e:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    5fa0:	4e0d      	ldr	r6, [pc, #52]	; (5fd8 <opcode_0xFB()+0x44>)
    5fa2:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fa4:	4620      	mov	r0, r4
    global_temp = local_data;
    5fa6:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fa8:	f7fc fda6 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5fac:	8830      	ldrh	r0, [r6, #0]
    5fae:	4621      	mov	r1, r4
    5fb0:	f7fc fc9a 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5fb4:	4621      	mov	r1, r4
    5fb6:	8830      	ldrh	r0, [r6, #0]
    5fb8:	f7fc fc96 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5fbc:	7828      	ldrb	r0, [r5, #0]
    5fbe:	f7fd fbcf 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    5fc2:	4a06      	ldr	r2, [pc, #24]	; (5fdc <opcode_0xFB()+0x48>)
    5fc4:	4b06      	ldr	r3, [pc, #24]	; (5fe0 <opcode_0xFB()+0x4c>)
    5fc6:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    5fca:	881b      	ldrh	r3, [r3, #0]
    5fcc:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    5fce:	b280      	uxth	r0, r0
    5fd0:	bd70      	pop	{r4, r5, r6, pc}
    5fd2:	bf00      	nop
    5fd4:	2001889c 	.word	0x2001889c
    5fd8:	20018886 	.word	0x20018886
    5fdc:	20018418 	.word	0x20018418
    5fe0:	20018888 	.word	0x20018888

00005fe4 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    5fe4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    5fe6:	4c0e      	ldr	r4, [pc, #56]	; (6020 <opcode_0x0B()+0x3c>)
    5fe8:	2100      	movs	r1, #0
    5fea:	8820      	ldrh	r0, [r4, #0]
    5fec:	3001      	adds	r0, #1
    5fee:	b280      	uxth	r0, r0
    5ff0:	f7fc fabe 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    5ff4:	4b0b      	ldr	r3, [pc, #44]	; (6024 <opcode_0x0B()+0x40>)
    5ff6:	781a      	ldrb	r2, [r3, #0]
    5ff8:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5ffa:	4a0b      	ldr	r2, [pc, #44]	; (6028 <opcode_0x0B()+0x44>)
    5ffc:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    5ffe:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6000:	7813      	ldrb	r3, [r2, #0]
    6002:	bf4c      	ite	mi
    6004:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6008:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    600c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    600e:	f7fc fd73 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    6012:	4a06      	ldr	r2, [pc, #24]	; (602c <opcode_0x0B()+0x48>)
    6014:	8823      	ldrh	r3, [r4, #0]
    6016:	f892 026d 	ldrb.w	r0, [r2, #621]	; 0x26d
    601a:	4418      	add	r0, r3
} // 0x0B - ANC - Immediate
    601c:	b280      	uxth	r0, r0
    601e:	bd10      	pop	{r4, pc}
    6020:	20018888 	.word	0x20018888
    6024:	2001889f 	.word	0x2001889f
    6028:	20004968 	.word	0x20004968
    602c:	20015418 	.word	0x20015418

00006030 <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    6030:	b510      	push	{r4, lr}
    6032:	4c0e      	ldr	r4, [pc, #56]	; (606c <opcode_0x2B()+0x3c>)
    6034:	2100      	movs	r1, #0
    6036:	8820      	ldrh	r0, [r4, #0]
    6038:	3001      	adds	r0, #1
    603a:	b280      	uxth	r0, r0
    603c:	f7fc fa98 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6040:	4b0b      	ldr	r3, [pc, #44]	; (6070 <opcode_0x2B()+0x40>)
    6042:	781a      	ldrb	r2, [r3, #0]
    6044:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6046:	4a0b      	ldr	r2, [pc, #44]	; (6074 <opcode_0x2B()+0x44>)
    6048:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    604a:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    604c:	7813      	ldrb	r3, [r2, #0]
    604e:	bf4c      	ite	mi
    6050:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6054:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6058:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    605a:	f7fc fd4d 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    605e:	4a06      	ldr	r2, [pc, #24]	; (6078 <opcode_0x2B()+0x48>)
    6060:	8823      	ldrh	r3, [r4, #0]
    6062:	f892 08ed 	ldrb.w	r0, [r2, #2285]	; 0x8ed
    6066:	4418      	add	r0, r3
} // 0x2B - ANC - Immediate
    6068:	b280      	uxth	r0, r0
    606a:	bd10      	pop	{r4, pc}
    606c:	20018888 	.word	0x20018888
    6070:	2001889f 	.word	0x2001889f
    6074:	20004968 	.word	0x20004968
    6078:	20015418 	.word	0x20015418

0000607c <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    607c:	b510      	push	{r4, lr}
    607e:	4c10      	ldr	r4, [pc, #64]	; (60c0 <opcode_0x4B()+0x44>)
    6080:	2100      	movs	r1, #0
    6082:	8820      	ldrh	r0, [r4, #0]
    6084:	3001      	adds	r0, #1
    6086:	b280      	uxth	r0, r0
    6088:	f7fc fa72 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    608c:	4a0d      	ldr	r2, [pc, #52]	; (60c4 <opcode_0x4B()+0x48>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    608e:	490e      	ldr	r1, [pc, #56]	; (60c8 <opcode_0x4B()+0x4c>)
    register_a = register_a & local_data;
    6090:	7813      	ldrb	r3, [r2, #0]
    6092:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    6094:	780b      	ldrb	r3, [r1, #0]
    6096:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    609a:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    609e:	bf14      	ite	ne
    60a0:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    60a4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    60a8:	7010      	strb	r0, [r2, #0]
    60aa:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    60ac:	f7fc fd24 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    60b0:	4a06      	ldr	r2, [pc, #24]	; (60cc <opcode_0x4B()+0x50>)
    60b2:	8823      	ldrh	r3, [r4, #0]
    60b4:	f892 0f6d 	ldrb.w	r0, [r2, #3949]	; 0xf6d
    60b8:	4418      	add	r0, r3
} // 0x4B - ALR - Immediate
    60ba:	b280      	uxth	r0, r0
    60bc:	bd10      	pop	{r4, pc}
    60be:	bf00      	nop
    60c0:	20018888 	.word	0x20018888
    60c4:	2001889f 	.word	0x2001889f
    60c8:	20004968 	.word	0x20004968
    60cc:	20015418 	.word	0x20015418

000060d0 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    60d0:	b510      	push	{r4, lr}
    60d2:	4c0f      	ldr	r4, [pc, #60]	; (6110 <opcode_0x6B()+0x40>)
    60d4:	2100      	movs	r1, #0
    60d6:	8820      	ldrh	r0, [r4, #0]
    60d8:	3001      	adds	r0, #1
    60da:	b280      	uxth	r0, r0
    60dc:	f7fc fa48 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    60e0:	490c      	ldr	r1, [pc, #48]	; (6114 <opcode_0x6B()+0x44>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    60e2:	4a0d      	ldr	r2, [pc, #52]	; (6118 <opcode_0x6B()+0x48>)
    register_a = register_a & local_data;
    60e4:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    60e6:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    60e8:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    60ea:	0840      	lsrs	r0, r0, #1
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    60ec:	f003 03be 	and.w	r3, r3, #190	; 0xbe
    register_a = (0x7F & (register_a >> 1));
    60f0:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    60f2:	f000 0140 	and.w	r1, r0, #64	; 0x40
    60f6:	b109      	cbz	r1, 60fc <opcode_0x6B()+0x2c>
        register_flags = register_flags | 0x40;
    60f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    60fc:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    60fe:	f7fc fcfb 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    6102:	4a06      	ldr	r2, [pc, #24]	; (611c <opcode_0x6B()+0x4c>)
    6104:	8823      	ldrh	r3, [r4, #0]
    6106:	f892 05ed 	ldrb.w	r0, [r2, #1517]	; 0x5ed
    610a:	4418      	add	r0, r3
} // 0x6B - ARR - Immediate
    610c:	b280      	uxth	r0, r0
    610e:	bd10      	pop	{r4, pc}
    6110:	20018888 	.word	0x20018888
    6114:	2001889f 	.word	0x2001889f
    6118:	20004968 	.word	0x20004968
    611c:	20016418 	.word	0x20016418

00006120 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    6120:	b510      	push	{r4, lr}
    6122:	4c11      	ldr	r4, [pc, #68]	; (6168 <opcode_0xCB()+0x48>)
    6124:	2100      	movs	r1, #0
    6126:	8820      	ldrh	r0, [r4, #0]
    6128:	3001      	adds	r0, #1
    612a:	b280      	uxth	r0, r0
    612c:	f7fc fa20 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    6130:	4a0e      	ldr	r2, [pc, #56]	; (616c <opcode_0xCB()+0x4c>)
    6132:	4b0f      	ldr	r3, [pc, #60]	; (6170 <opcode_0xCB()+0x50>)
    6134:	7811      	ldrb	r1, [r2, #0]
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    613a:	490e      	ldr	r1, [pc, #56]	; (6174 <opcode_0xCB()+0x54>)
    register_x = register_x - local_data;
    613c:	1a1b      	subs	r3, r3, r0
    613e:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    6140:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    6142:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6144:	780a      	ldrb	r2, [r1, #0]
    6146:	0400      	lsls	r0, r0, #16
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6148:	4618      	mov	r0, r3
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    614a:	bf54      	ite	pl
    614c:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6150:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    6154:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6156:	f7fc fccf 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    615a:	4a07      	ldr	r2, [pc, #28]	; (6178 <opcode_0xCB()+0x58>)
    615c:	8823      	ldrh	r3, [r4, #0]
    615e:	f892 096d 	ldrb.w	r0, [r2, #2413]	; 0x96d
    6162:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    6164:	b280      	uxth	r0, r0
    6166:	bd10      	pop	{r4, pc}
    6168:	20018888 	.word	0x20018888
    616c:	200188a0 	.word	0x200188a0
    6170:	2001889f 	.word	0x2001889f
    6174:	20004968 	.word	0x20004968
    6178:	20017418 	.word	0x20017418

0000617c <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    617c:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    617e:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    6180:	f7fc fcce 	bl	2b20 <Fetch_Immediate(unsigned char)>
    while (1) {}
    6184:	e7fe      	b.n	6184 <opcode_0x02()+0x8>
    6186:	bf00      	nop

00006188 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6188:	b570      	push	{r4, r5, r6, lr}
    String op      = opcode_info[opcode].opcode;
    618a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    uint8_t length = opcode_info[opcode].length;
    618e:	4e32      	ldr	r6, [pc, #200]	; (6258 <display_next_instruction(unsigned short, unsigned char)+0xd0>)
    6190:	2334      	movs	r3, #52	; 0x34
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6192:	b092      	sub	sp, #72	; 0x48
    String op      = opcode_info[opcode].opcode;
    6194:	eb01 0282 	add.w	r2, r1, r2, lsl #2
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6198:	460c      	mov	r4, r1
    uint8_t length = opcode_info[opcode].length;
    619a:	fb03 6301 	mla	r3, r3, r1, r6
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    619e:	4605      	mov	r5, r0
    String op      = opcode_info[opcode].opcode;
    61a0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
    61a4:	a806      	add	r0, sp, #24
    uint8_t length = opcode_info[opcode].length;
    61a6:	f893 6031 	ldrb.w	r6, [r3, #49]	; 0x31
    String op      = opcode_info[opcode].opcode;
    61aa:	f002 f981 	bl	84b0 <String::String(String const&)>
    switch (length) {
    61ae:	2e02      	cmp	r6, #2
    61b0:	d013      	beq.n	61da <display_next_instruction(unsigned short, unsigned char)+0x52>
    61b2:	2e03      	cmp	r6, #3
    61b4:	d02f      	beq.n	6216 <display_next_instruction(unsigned short, unsigned char)+0x8e>
    61b6:	2e01      	cmp	r6, #1
    61b8:	d022      	beq.n	6200 <display_next_instruction(unsigned short, unsigned char)+0x78>
    61ba:	ae0a      	add	r6, sp, #40	; 0x28
							  return write((const uint8_t *)str, strlen(str)); }
    61bc:	4630      	mov	r0, r6
    61be:	f005 fd1f 	bl	bc00 <strlen>
    61c2:	4601      	mov	r1, r0
    61c4:	4630      	mov	r0, r6
    61c6:	f003 fdd5 	bl	9d74 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    61ca:	4824      	ldr	r0, [pc, #144]	; (625c <display_next_instruction(unsigned short, unsigned char)+0xd4>)
    61cc:	f002 f94e 	bl	846c <Print::println()>
}
    61d0:	a806      	add	r0, sp, #24
    61d2:	f002 f98b 	bl	84ec <String::~String()>
    61d6:	b012      	add	sp, #72	; 0x48
    61d8:	bd70      	pop	{r4, r5, r6, pc}
            uint8_t op1 = read_byte(pc+1, false);
    61da:	1c68      	adds	r0, r5, #1
    61dc:	2100      	movs	r1, #0
    61de:	b280      	uxth	r0, r0
    61e0:	f7fc f9c6 	bl	2570 <read_byte(unsigned short, bool)>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    61e4:	9b06      	ldr	r3, [sp, #24]
    61e6:	2b00      	cmp	r3, #0
    61e8:	d02f      	beq.n	624a <display_next_instruction(unsigned short, unsigned char)+0xc2>
            sprintf(buffer, "[%04X] %02X %02X     %s %02X", pc, opcode, op1, op.c_str(), op1);
    61ea:	ae0a      	add	r6, sp, #40	; 0x28
    61ec:	9301      	str	r3, [sp, #4]
    61ee:	9002      	str	r0, [sp, #8]
    61f0:	4623      	mov	r3, r4
    61f2:	9000      	str	r0, [sp, #0]
    61f4:	462a      	mov	r2, r5
    61f6:	491a      	ldr	r1, [pc, #104]	; (6260 <display_next_instruction(unsigned short, unsigned char)+0xd8>)
    61f8:	4630      	mov	r0, r6
    61fa:	f005 f8c1 	bl	b380 <sprintf>
            break;
    61fe:	e7dd      	b.n	61bc <display_next_instruction(unsigned short, unsigned char)+0x34>
    6200:	9906      	ldr	r1, [sp, #24]
    6202:	b321      	cbz	r1, 624e <display_next_instruction(unsigned short, unsigned char)+0xc6>
            sprintf(buffer, "[%04X] %02X        %s", pc, opcode, op.c_str());
    6204:	ae0a      	add	r6, sp, #40	; 0x28
    6206:	9100      	str	r1, [sp, #0]
    6208:	4623      	mov	r3, r4
    620a:	462a      	mov	r2, r5
    620c:	4915      	ldr	r1, [pc, #84]	; (6264 <display_next_instruction(unsigned short, unsigned char)+0xdc>)
    620e:	4630      	mov	r0, r6
    6210:	f005 f8b6 	bl	b380 <sprintf>
            break;
    6214:	e7d2      	b.n	61bc <display_next_instruction(unsigned short, unsigned char)+0x34>
            uint8_t op1 = read_byte(pc+1, false);
    6216:	1c68      	adds	r0, r5, #1
    6218:	2100      	movs	r1, #0
    621a:	b280      	uxth	r0, r0
    621c:	f7fc f9a8 	bl	2570 <read_byte(unsigned short, bool)>
            uint8_t op2 = read_byte(pc+2, false);
    6220:	1cab      	adds	r3, r5, #2
            uint8_t op1 = read_byte(pc+1, false);
    6222:	4606      	mov	r6, r0
            uint8_t op2 = read_byte(pc+2, false);
    6224:	2100      	movs	r1, #0
    6226:	b298      	uxth	r0, r3
    6228:	f7fc f9a2 	bl	2570 <read_byte(unsigned short, bool)>
    622c:	9b06      	ldr	r3, [sp, #24]
    622e:	b183      	cbz	r3, 6252 <display_next_instruction(unsigned short, unsigned char)+0xca>
            sprintf(buffer, "[%04X] %02X %02X %02X  %s %02X%02X", 
    6230:	9600      	str	r6, [sp, #0]
    6232:	462a      	mov	r2, r5
    6234:	9302      	str	r3, [sp, #8]
    6236:	4623      	mov	r3, r4
    6238:	9001      	str	r0, [sp, #4]
    623a:	490b      	ldr	r1, [pc, #44]	; (6268 <display_next_instruction(unsigned short, unsigned char)+0xe0>)
    623c:	e9cd 0603 	strd	r0, r6, [sp, #12]
    6240:	ae0a      	add	r6, sp, #40	; 0x28
    6242:	4630      	mov	r0, r6
    6244:	f005 f89c 	bl	b380 <sprintf>
            break;
    6248:	e7b8      	b.n	61bc <display_next_instruction(unsigned short, unsigned char)+0x34>
    624a:	4b08      	ldr	r3, [pc, #32]	; (626c <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    624c:	e7cd      	b.n	61ea <display_next_instruction(unsigned short, unsigned char)+0x62>
    624e:	4907      	ldr	r1, [pc, #28]	; (626c <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    6250:	e7d8      	b.n	6204 <display_next_instruction(unsigned short, unsigned char)+0x7c>
    6252:	4b06      	ldr	r3, [pc, #24]	; (626c <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    6254:	e7ec      	b.n	6230 <display_next_instruction(unsigned short, unsigned char)+0xa8>
    6256:	bf00      	nop
    6258:	20015418 	.word	0x20015418
    625c:	20004358 	.word	0x20004358
    6260:	200009f0 	.word	0x200009f0
    6264:	200009d8 	.word	0x200009d8
    6268:	20000a10 	.word	0x20000a10
    626c:	2000122c 	.word	0x2000122c

00006270 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6270:	4916      	ldr	r1, [pc, #88]	; (62cc <display_registers()+0x5c>)
    6272:	4b17      	ldr	r3, [pc, #92]	; (62d0 <display_registers()+0x60>)
    6274:	4a17      	ldr	r2, [pc, #92]	; (62d4 <display_registers()+0x64>)
void display_registers() {
    6276:	b510      	push	{r4, lr}
    6278:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    627a:	7808      	ldrb	r0, [r1, #0]
    627c:	781b      	ldrb	r3, [r3, #0]
    627e:	7812      	ldrb	r2, [r2, #0]
    6280:	4915      	ldr	r1, [pc, #84]	; (62d8 <display_registers()+0x68>)
    6282:	9000      	str	r0, [sp, #0]
    6284:	a802      	add	r0, sp, #8
    6286:	f005 f87b 	bl	b380 <sprintf>
    628a:	4c14      	ldr	r4, [pc, #80]	; (62dc <display_registers()+0x6c>)
							  return write((const uint8_t *)str, strlen(str)); }
    628c:	a802      	add	r0, sp, #8
    628e:	f005 fcb7 	bl	bc00 <strlen>
    6292:	4601      	mov	r1, r0
    6294:	a802      	add	r0, sp, #8
    6296:	f003 fd6d 	bl	9d74 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    629a:	4620      	mov	r0, r4
    629c:	f002 f8e6 	bl	846c <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    62a0:	4b0f      	ldr	r3, [pc, #60]	; (62e0 <display_registers()+0x70>)
    62a2:	4a10      	ldr	r2, [pc, #64]	; (62e4 <display_registers()+0x74>)
    62a4:	a802      	add	r0, sp, #8
    62a6:	781b      	ldrb	r3, [r3, #0]
    62a8:	8812      	ldrh	r2, [r2, #0]
    62aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    62ae:	490e      	ldr	r1, [pc, #56]	; (62e8 <display_registers()+0x78>)
    62b0:	f005 f866 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    62b4:	a802      	add	r0, sp, #8
    62b6:	f005 fca3 	bl	bc00 <strlen>
    62ba:	4601      	mov	r1, r0
    62bc:	a802      	add	r0, sp, #8
    62be:	f003 fd59 	bl	9d74 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    62c2:	4620      	mov	r0, r4
    62c4:	f002 f8d2 	bl	846c <Print::println()>
}
    62c8:	b00a      	add	sp, #40	; 0x28
    62ca:	bd10      	pop	{r4, pc}
    62cc:	200188a1 	.word	0x200188a1
    62d0:	200188a0 	.word	0x200188a0
    62d4:	2001889f 	.word	0x2001889f
    62d8:	20000838 	.word	0x20000838
    62dc:	20004358 	.word	0x20004358
    62e0:	20004969 	.word	0x20004969
    62e4:	20018888 	.word	0x20018888
    62e8:	2000085c 	.word	0x2000085c

000062ec <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    62ec:	490c      	ldr	r1, [pc, #48]	; (6320 <display_info()+0x34>)
    62ee:	4b0d      	ldr	r3, [pc, #52]	; (6324 <display_info()+0x38>)
    62f0:	6808      	ldr	r0, [r1, #0]
    62f2:	4a0d      	ldr	r2, [pc, #52]	; (6328 <display_info()+0x3c>)
    62f4:	781b      	ldrb	r3, [r3, #0]
    62f6:	7812      	ldrb	r2, [r2, #0]
    62f8:	490c      	ldr	r1, [pc, #48]	; (632c <display_info()+0x40>)
void display_info() {
    62fa:	b500      	push	{lr}
    62fc:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    62fe:	9000      	str	r0, [sp, #0]
    6300:	a802      	add	r0, sp, #8
    6302:	f005 f83d 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6306:	a802      	add	r0, sp, #8
    6308:	f005 fc7a 	bl	bc00 <strlen>
    630c:	4601      	mov	r1, r0
    630e:	a802      	add	r0, sp, #8
    6310:	f003 fd30 	bl	9d74 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6314:	4806      	ldr	r0, [pc, #24]	; (6330 <display_info()+0x44>)
    6316:	f002 f8a9 	bl	846c <Print::println()>
}
    631a:	b013      	add	sp, #76	; 0x4c
    631c:	f85d fb04 	ldr.w	pc, [sp], #4
    6320:	200053c8 	.word	0x200053c8
    6324:	20018894 	.word	0x20018894
    6328:	200188a2 	.word	0x200188a2
    632c:	20000398 	.word	0x20000398
    6330:	20004358 	.word	0x20004358

00006334 <get_command()>:
String get_command() {
    6334:	b570      	push	{r4, r5, r6, lr}
    6336:	b084      	sub	sp, #16
    String s = "";
    6338:	491c      	ldr	r1, [pc, #112]	; (63ac <get_command()+0x78>)
String get_command() {
    633a:	4605      	mov	r5, r0
    633c:	4e1c      	ldr	r6, [pc, #112]	; (63b0 <get_command()+0x7c>)
    String s = "";
    633e:	4668      	mov	r0, sp
    6340:	f002 f910 	bl	8564 <String::String(char const*)>
    6344:	2103      	movs	r1, #3
    6346:	481b      	ldr	r0, [pc, #108]	; (63b4 <get_command()+0x80>)
    6348:	f003 fd14 	bl	9d74 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    634c:	f003 fca8 	bl	9ca0 <usb_serial_available>
        if (Serial.available()) {
    6350:	2800      	cmp	r0, #0
    6352:	d0fb      	beq.n	634c <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    6354:	f003 fce8 	bl	9d28 <usb_serial_getchar>
            switch(c) {
    6358:	b2c4      	uxtb	r4, r0
    635a:	2c08      	cmp	r4, #8
    635c:	d00e      	beq.n	637c <get_command()+0x48>
    635e:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    6360:	4620      	mov	r0, r4
            switch(c) {
    6362:	d016      	beq.n	6392 <get_command()+0x5e>
                    if (isprint(c)) {
    6364:	f004 ff0e 	bl	b184 <isprint>
    6368:	2800      	cmp	r0, #0
    636a:	d0ef      	beq.n	634c <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    636c:	4621      	mov	r1, r4
    636e:	4668      	mov	r0, sp
    6370:	f002 f97c 	bl	866c <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6374:	4620      	mov	r0, r4
    6376:	f003 fce7 	bl	9d48 <usb_serial_putchar>
    637a:	e7e7      	b.n	634c <get_command()+0x18>
                    s.remove(s.length()-1,1);
    637c:	9902      	ldr	r1, [sp, #8]
    637e:	2201      	movs	r2, #1
    6380:	4668      	mov	r0, sp
    6382:	3901      	subs	r1, #1
    6384:	f002 fa40 	bl	8808 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6388:	2103      	movs	r1, #3
    638a:	4630      	mov	r0, r6
    638c:	f003 fcf2 	bl	9d74 <usb_serial_write>
    6390:	e7dc      	b.n	634c <get_command()+0x18>
                    return(s.toLowerCase());
    6392:	4668      	mov	r0, sp
    6394:	f002 fa58 	bl	8848 <String::toLowerCase()>
    6398:	4601      	mov	r1, r0
    639a:	4628      	mov	r0, r5
    639c:	f002 f888 	bl	84b0 <String::String(String const&)>
}
    63a0:	4668      	mov	r0, sp
    63a2:	f002 f8a3 	bl	84ec <String::~String()>
    63a6:	4628      	mov	r0, r5
    63a8:	b004      	add	sp, #16
    63aa:	bd70      	pop	{r4, r5, r6, pc}
    63ac:	2000047c 	.word	0x2000047c
    63b0:	20000374 	.word	0x20000374
    63b4:	20000370 	.word	0x20000370

000063b8 <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    63b8:	b570      	push	{r4, r5, r6, lr}
    63ba:	460d      	mov	r5, r1
    63bc:	b088      	sub	sp, #32
    String arg = "";
    63be:	4923      	ldr	r1, [pc, #140]	; (644c <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    63c0:	4616      	mov	r6, r2
    63c2:	4604      	mov	r4, r0
    String arg = "";
    63c4:	f002 f8ce 	bl	8564 <String::String(char const*)>

    String src = _src.trim();
    63c8:	4628      	mov	r0, r5
    63ca:	f002 fa4d 	bl	8868 <String::trim()>
    63ce:	4601      	mov	r1, r0
    63d0:	4668      	mov	r0, sp
    63d2:	f002 f86d 	bl	84b0 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    63d6:	9b02      	ldr	r3, [sp, #8]
    63d8:	b92b      	cbnz	r3, 63e6 <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    63da:	4668      	mov	r0, sp
    63dc:	f002 f886 	bl	84ec <String::~String()>
    63e0:	4620      	mov	r0, r4
    63e2:	b008      	add	sp, #32
    63e4:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    63e6:	2120      	movs	r1, #32
    63e8:	4668      	mov	r0, sp
    63ea:	f002 f9a5 	bl	8738 <String::indexOf(char) const>
        if (idx>0) {
    63ee:	1e05      	subs	r5, r0, #0
    63f0:	dd1e      	ble.n	6430 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    63f2:	462b      	mov	r3, r5
    63f4:	2200      	movs	r2, #0
    63f6:	4669      	mov	r1, sp
    63f8:	a804      	add	r0, sp, #16
    63fa:	f002 f9d9 	bl	87b0 <String::substring(unsigned int, unsigned int) const>
    63fe:	a904      	add	r1, sp, #16
    6400:	4620      	mov	r0, r4
    6402:	f002 f8cb 	bl	859c <String::operator=(String&&)>
    6406:	a804      	add	r0, sp, #16
    6408:	f002 f870 	bl	84ec <String::~String()>
            remainder = src.substring(idx+1);
    640c:	1c6a      	adds	r2, r5, #1
    640e:	4669      	mov	r1, sp
    6410:	a804      	add	r0, sp, #16
    6412:	f002 f9a1 	bl	8758 <String::substring(unsigned int) const>
    6416:	a904      	add	r1, sp, #16
    6418:	4630      	mov	r0, r6
    641a:	f002 f8bf 	bl	859c <String::operator=(String&&)>
    641e:	a804      	add	r0, sp, #16
    6420:	f002 f864 	bl	84ec <String::~String()>
}
    6424:	4668      	mov	r0, sp
    6426:	f002 f861 	bl	84ec <String::~String()>
    642a:	4620      	mov	r0, r4
    642c:	b008      	add	sp, #32
    642e:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    6430:	4669      	mov	r1, sp
    6432:	4620      	mov	r0, r4
    6434:	f002 f8aa 	bl	858c <String::operator=(String const&)>
            remainder = "";
    6438:	4904      	ldr	r1, [pc, #16]	; (644c <parse_next_arg(String&, String&)+0x94>)
    643a:	4630      	mov	r0, r6
    643c:	f002 f8c4 	bl	85c8 <String::operator=(char const*)>
}
    6440:	4668      	mov	r0, sp
    6442:	f002 f853 	bl	84ec <String::~String()>
    6446:	4620      	mov	r0, r4
    6448:	b008      	add	sp, #32
    644a:	bd70      	pop	{r4, r5, r6, pc}
    644c:	2000047c 	.word	0x2000047c

00006450 <process_command(String)>:


void(* resetFunc) (void) = 0;//declare reset function at address 0

ENUM_RUN_MODE process_command(String input) {
    6450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6454:	b09d      	sub	sp, #116	; 0x74
    6456:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    6458:	49ac      	ldr	r1, [pc, #688]	; (670c <process_command(String)+0x2bc>)
    645a:	4668      	mov	r0, sp
    645c:	f002 f882 	bl	8564 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    6460:	466a      	mov	r2, sp
    6462:	4621      	mov	r1, r4
    6464:	a804      	add	r0, sp, #16
    6466:	f7ff ffa7 	bl	63b8 <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    646a:	466a      	mov	r2, sp
    646c:	4669      	mov	r1, sp
    646e:	a808      	add	r0, sp, #32
    6470:	f7ff ffa2 	bl	63b8 <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    6474:	466a      	mov	r2, sp
    6476:	4669      	mov	r1, sp
    6478:	a80c      	add	r0, sp, #48	; 0x30
    647a:	f7ff ff9d 	bl	63b8 <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    647e:	2100      	movs	r1, #0
    6480:	a804      	add	r0, sp, #16
    6482:	f002 f92f 	bl	86e4 <String::operator[](unsigned int)>
    6486:	7805      	ldrb	r5, [r0, #0]
    6488:	2101      	movs	r1, #1
    648a:	a804      	add	r0, sp, #16
    648c:	f002 f92a 	bl	86e4 <String::operator[](unsigned int)>
    6490:	7803      	ldrb	r3, [r0, #0]
    6492:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    6494:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    6498:	442b      	add	r3, r5
    switch (cmd_int) {
    649a:	4293      	cmp	r3, r2
    649c:	f000 8126 	beq.w	66ec <process_command(String)+0x29c>
    64a0:	d858      	bhi.n	6554 <process_command(String)+0x104>
    64a2:	f246 4272 	movw	r2, #25714	; 0x6472
    64a6:	4293      	cmp	r3, r2
    64a8:	f000 80c0 	beq.w	662c <process_command(String)+0x1dc>
    64ac:	d935      	bls.n	651a <process_command(String)+0xca>
    64ae:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    64b2:	f000 8143 	beq.w	673c <process_command(String)+0x2ec>
    64b6:	f646 126e 	movw	r2, #26990	; 0x696e
    64ba:	4293      	cmp	r3, r2
    64bc:	d116      	bne.n	64ec <process_command(String)+0x9c>
            display_registers();
            run_mode = WAITING;          
            break;

        case CMD_IN:
            display_registers();
    64be:	f7ff fed7 	bl	6270 <display_registers()>
            display_info();
            run_mode = WAITING;
    64c2:	2400      	movs	r4, #0
            display_info();
    64c4:	f7ff ff12 	bl	62ec <display_info()>
            run_mode = WAITING;
    64c8:	4b91      	ldr	r3, [pc, #580]	; (6710 <process_command(String)+0x2c0>)
    64ca:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    64cc:	a80c      	add	r0, sp, #48	; 0x30
    64ce:	f002 f80d 	bl	84ec <String::~String()>
    64d2:	a808      	add	r0, sp, #32
    64d4:	f002 f80a 	bl	84ec <String::~String()>
    64d8:	a804      	add	r0, sp, #16
    64da:	f002 f807 	bl	84ec <String::~String()>
    64de:	4668      	mov	r0, sp
    64e0:	f002 f804 	bl	84ec <String::~String()>
    64e4:	4620      	mov	r0, r4
    64e6:	b01d      	add	sp, #116	; 0x74
    64e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    64ec:	f246 726f 	movw	r2, #26479	; 0x676f
    64f0:	4293      	cmp	r3, r2
    64f2:	f040 816a 	bne.w	67ca <process_command(String)+0x37a>
            run_mode = RUNNING;
    64f6:	4d86      	ldr	r5, [pc, #536]	; (6710 <process_command(String)+0x2c0>)
    64f8:	2402      	movs	r4, #2
            if (arg1.length()) {
    64fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    64fc:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    64fe:	2b00      	cmp	r3, #0
    6500:	d0e4      	beq.n	64cc <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6502:	9808      	ldr	r0, [sp, #32]
    6504:	2800      	cmp	r0, #0
    6506:	f000 81e6 	beq.w	68d6 <process_command(String)+0x486>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    650a:	2210      	movs	r2, #16
    650c:	2100      	movs	r1, #0
    650e:	f004 fe25 	bl	b15c <strtoul>
    6512:	4b80      	ldr	r3, [pc, #512]	; (6714 <process_command(String)+0x2c4>)
    return(run_mode);
    6514:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    6516:	8018      	strh	r0, [r3, #0]
    6518:	e7d8      	b.n	64cc <process_command(String)+0x7c>
    switch (cmd_int) {
    651a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    651e:	f000 810d 	beq.w	673c <process_command(String)+0x2ec>
    6522:	f246 226b 	movw	r2, #25195	; 0x626b
    6526:	4293      	cmp	r3, r2
    6528:	d15f      	bne.n	65ea <process_command(String)+0x19a>
    652a:	9808      	ldr	r0, [sp, #32]
    652c:	2800      	cmp	r0, #0
    652e:	f000 81b3 	beq.w	6898 <process_command(String)+0x448>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6532:	2210      	movs	r2, #16
    6534:	2100      	movs	r1, #0
    6536:	f004 fe11 	bl	b15c <strtoul>
                breakpoint = addr;
    653a:	4b77      	ldr	r3, [pc, #476]	; (6718 <process_command(String)+0x2c8>)
    653c:	6018      	str	r0, [r3, #0]
    653e:	2102      	movs	r1, #2
    6540:	4876      	ldr	r0, [pc, #472]	; (671c <process_command(String)+0x2cc>)
    6542:	f003 fc17 	bl	9d74 <usb_serial_write>
    6546:	4876      	ldr	r0, [pc, #472]	; (6720 <process_command(String)+0x2d0>)
    6548:	f001 ff90 	bl	846c <Print::println()>
            run_mode = WAITING;
    654c:	4b70      	ldr	r3, [pc, #448]	; (6710 <process_command(String)+0x2c0>)
    654e:	2400      	movs	r4, #0
    6550:	701c      	strb	r4, [r3, #0]
            break;
    6552:	e7bb      	b.n	64cc <process_command(String)+0x7c>
    switch (cmd_int) {
    6554:	f247 3273 	movw	r2, #29555	; 0x7373
    6558:	4293      	cmp	r3, r2
    655a:	f000 8161 	beq.w	6820 <process_command(String)+0x3d0>
    655e:	d94a      	bls.n	65f6 <process_command(String)+0x1a6>
    6560:	f247 4274 	movw	r2, #29812	; 0x7474
    6564:	4293      	cmp	r3, r2
    6566:	f000 80b2 	beq.w	66ce <process_command(String)+0x27e>
    656a:	f247 7272 	movw	r2, #30578	; 0x7772
    656e:	4293      	cmp	r3, r2
    6570:	f040 812b 	bne.w	67ca <process_command(String)+0x37a>
    6574:	9808      	ldr	r0, [sp, #32]
    6576:	2800      	cmp	r0, #0
    6578:	f000 818c 	beq.w	6894 <process_command(String)+0x444>
                word addr = strtoul(arg1.c_str(), 0, 16);
    657c:	2210      	movs	r2, #16
    657e:	2100      	movs	r1, #0
    6580:	f004 fdec 	bl	b15c <strtoul>
    6584:	4605      	mov	r5, r0
    6586:	980c      	ldr	r0, [sp, #48]	; 0x30
    6588:	2800      	cmp	r0, #0
    658a:	f000 819a 	beq.w	68c2 <process_command(String)+0x472>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    658e:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6592:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    6596:	2210      	movs	r2, #16
    6598:	2100      	movs	r1, #0
    659a:	f004 fddf 	bl	b15c <strtoul>
    659e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
                write_byte(addr, data);
    65a2:	b2c1      	uxtb	r1, r0
    65a4:	b2a8      	uxth	r0, r5
    65a6:	f7fc f99f 	bl	28e8 <write_byte(unsigned short, unsigned char)>
                while (remainder.length()) {
    65aa:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    65ac:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    65b0:	2b00      	cmp	r3, #0
    65b2:	d0c4      	beq.n	653e <process_command(String)+0xee>
    65b4:	ac14      	add	r4, sp, #80	; 0x50
    65b6:	4e5b      	ldr	r6, [pc, #364]	; (6724 <process_command(String)+0x2d4>)
                    String d = parse_next_arg(remainder, remainder);
    65b8:	466a      	mov	r2, sp
    65ba:	4669      	mov	r1, sp
    65bc:	4620      	mov	r0, r4
                    write_byte(++addr, data);
    65be:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    65c0:	f7ff fefa 	bl	63b8 <parse_next_arg(String&, String&)>
    65c4:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    65c6:	2210      	movs	r2, #16
    65c8:	2100      	movs	r1, #0
    65ca:	2800      	cmp	r0, #0
    65cc:	bf08      	it	eq
    65ce:	4630      	moveq	r0, r6
    65d0:	f004 fdc4 	bl	b15c <strtoul>
                    write_byte(++addr, data);
    65d4:	b2c1      	uxtb	r1, r0
    65d6:	b2a8      	uxth	r0, r5
    65d8:	f7fc f986 	bl	28e8 <write_byte(unsigned short, unsigned char)>
                }
    65dc:	4620      	mov	r0, r4
    65de:	f001 ff85 	bl	84ec <String::~String()>
                while (remainder.length()) {
    65e2:	9b02      	ldr	r3, [sp, #8]
    65e4:	2b00      	cmp	r3, #0
    65e6:	d1e7      	bne.n	65b8 <process_command(String)+0x168>
    65e8:	e7a9      	b.n	653e <process_command(String)+0xee>
    switch (cmd_int) {
    65ea:	2b00      	cmp	r3, #0
    65ec:	f040 80ed 	bne.w	67ca <process_command(String)+0x37a>
    return(run_mode);
    65f0:	4b47      	ldr	r3, [pc, #284]	; (6710 <process_command(String)+0x2c0>)
    65f2:	781c      	ldrb	r4, [r3, #0]
    65f4:	e76a      	b.n	64cc <process_command(String)+0x7c>
    switch (cmd_int) {
    65f6:	f247 2273 	movw	r2, #29299	; 0x7273
    65fa:	4293      	cmp	r3, r2
    65fc:	f000 8114 	beq.w	6828 <process_command(String)+0x3d8>
    6600:	f247 3272 	movw	r2, #29554	; 0x7372
    6604:	4293      	cmp	r3, r2
    6606:	d117      	bne.n	6638 <process_command(String)+0x1e8>
    6608:	980c      	ldr	r0, [sp, #48]	; 0x30
    660a:	2800      	cmp	r0, #0
    660c:	f000 8148 	beq.w	68a0 <process_command(String)+0x450>
                word value = strtoul(arg2.c_str(), 0, 16);
    6610:	2100      	movs	r1, #0
    6612:	2210      	movs	r2, #16
    6614:	f004 fda2 	bl	b15c <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6618:	4943      	ldr	r1, [pc, #268]	; (6728 <process_command(String)+0x2d8>)
    661a:	4604      	mov	r4, r0
    661c:	a808      	add	r0, sp, #32
    661e:	f002 f84b 	bl	86b8 <String::equals(char const*) const>
                if (arg1=="pc") {
    6622:	2800      	cmp	r0, #0
    6624:	f000 8104 	beq.w	6830 <process_command(String)+0x3e0>
                    register_pc = value & 0xFFFF;
    6628:	4b3a      	ldr	r3, [pc, #232]	; (6714 <process_command(String)+0x2c4>)
    662a:	801c      	strh	r4, [r3, #0]
            display_registers();
    662c:	f7ff fe20 	bl	6270 <display_registers()>
            run_mode = WAITING;          
    6630:	2400      	movs	r4, #0
    6632:	4b37      	ldr	r3, [pc, #220]	; (6710 <process_command(String)+0x2c0>)
    6634:	701c      	strb	r4, [r3, #0]
            break;
    6636:	e749      	b.n	64cc <process_command(String)+0x7c>
    switch (cmd_int) {
    6638:	f247 2264 	movw	r2, #29284	; 0x7264
    663c:	4293      	cmp	r3, r2
    663e:	f040 80c4 	bne.w	67ca <process_command(String)+0x37a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6642:	9808      	ldr	r0, [sp, #32]
    6644:	2800      	cmp	r0, #0
    6646:	f000 8129 	beq.w	689c <process_command(String)+0x44c>
                word addr = strtoul(arg1.c_str(), 0, 16);
    664a:	2210      	movs	r2, #16
    664c:	2100      	movs	r1, #0
    664e:	f004 fd85 	bl	b15c <strtoul>
                if (arg2.length()) {
    6652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    6654:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    6656:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    6658:	2b00      	cmp	r3, #0
    665a:	f040 80f2 	bne.w	6842 <process_command(String)+0x3f2>
                sprintf(s,"[%04X] = ", addr);
    665e:	4602      	mov	r2, r0
    6660:	4932      	ldr	r1, [pc, #200]	; (672c <process_command(String)+0x2dc>)
    6662:	4620      	mov	r0, r4
                byte count = 1;
    6664:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    6668:	f004 fe8a 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    666c:	4620      	mov	r0, r4
    666e:	f005 fac7 	bl	bc00 <strlen>
    6672:	4601      	mov	r1, r0
    6674:	4620      	mov	r0, r4
    6676:	f003 fb7d 	bl	9d74 <usb_serial_write>
                byte count = 1;
    667a:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    667c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 6734 <process_command(String)+0x2e4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6680:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    6684:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6738 <process_command(String)+0x2e8>
    6688:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    668a:	b115      	cbz	r5, 6692 <process_command(String)+0x242>
    668c:	075b      	lsls	r3, r3, #29
    668e:	f000 8109 	beq.w	68a4 <process_command(String)+0x454>
    6692:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    6696:	2100      	movs	r1, #0
    6698:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    669a:	3501      	adds	r5, #1
    669c:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    66a0:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    66a2:	f7fb ff65 	bl	2570 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    66a6:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    66a8:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    66aa:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    66ae:	4620      	mov	r0, r4
    66b0:	f004 fe66 	bl	b380 <sprintf>
    66b4:	4620      	mov	r0, r4
    66b6:	f005 faa3 	bl	bc00 <strlen>
    66ba:	4601      	mov	r1, r0
    66bc:	4620      	mov	r0, r4
    66be:	f003 fb59 	bl	9d74 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    66c2:	b2eb      	uxtb	r3, r5
    66c4:	454b      	cmp	r3, r9
    66c6:	d3e0      	bcc.n	668a <process_command(String)+0x23a>
    66c8:	2100      	movs	r1, #0
    66ca:	4810      	ldr	r0, [pc, #64]	; (670c <process_command(String)+0x2bc>)
    66cc:	e739      	b.n	6542 <process_command(String)+0xf2>
    66ce:	4d10      	ldr	r5, [pc, #64]	; (6710 <process_command(String)+0x2c0>)
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    66d0:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    66d4:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    66d8:	f7fb fefa 	bl	24d0 <sample_at_CLK_rising_edge()>
    66dc:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    66e0:	f7fb fef6 	bl	24d0 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    66e4:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    return(run_mode);
    66e8:	782c      	ldrb	r4, [r5, #0]
}
    66ea:	e6ef      	b.n	64cc <process_command(String)+0x7c>
    66ec:	9808      	ldr	r0, [sp, #32]
    66ee:	2800      	cmp	r0, #0
    66f0:	f000 80e5 	beq.w	68be <process_command(String)+0x46e>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    66f4:	220a      	movs	r2, #10
    66f6:	2100      	movs	r1, #0
    66f8:	f004 fd30 	bl	b15c <strtoul>
    66fc:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    66fe:	2803      	cmp	r0, #3
    6700:	f200 80b5 	bhi.w	686e <process_command(String)+0x41e>
                    addr_mode = (ADDR_MODE)a_mode;
    6704:	4b0a      	ldr	r3, [pc, #40]	; (6730 <process_command(String)+0x2e0>)
    6706:	7018      	strb	r0, [r3, #0]
    6708:	e720      	b.n	654c <process_command(String)+0xfc>
    670a:	bf00      	nop
    670c:	2000047c 	.word	0x2000047c
    6710:	200188a2 	.word	0x200188a2
    6714:	20018888 	.word	0x20018888
    6718:	200053c8 	.word	0x200053c8
    671c:	200007ec 	.word	0x200007ec
    6720:	20004358 	.word	0x20004358
    6724:	2000122c 	.word	0x2000122c
    6728:	200007a0 	.word	0x200007a0
    672c:	200007f0 	.word	0x200007f0
    6730:	20018894 	.word	0x20018894
    6734:	200007fc 	.word	0x200007fc
    6738:	20000808 	.word	0x20000808
            Serial.println(String("Available Commands:\n\r")+
    673c:	496f      	ldr	r1, [pc, #444]	; (68fc <process_command(String)+0x4ac>)
    673e:	a810      	add	r0, sp, #64	; 0x40
    6740:	f001 ff10 	bl	8564 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    6744:	a910      	add	r1, sp, #64	; 0x40
    6746:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6748:	2400      	movs	r4, #0
    674a:	f001 feb1 	bl	84b0 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    674e:	496c      	ldr	r1, [pc, #432]	; (6900 <process_command(String)+0x4b0>)
    6750:	a814      	add	r0, sp, #80	; 0x50
    6752:	f001 ffa3 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    6756:	496b      	ldr	r1, [pc, #428]	; (6904 <process_command(String)+0x4b4>)
    6758:	f001 ffa0 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    675c:	496a      	ldr	r1, [pc, #424]	; (6908 <process_command(String)+0x4b8>)
    675e:	f001 ff9d 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    6762:	496a      	ldr	r1, [pc, #424]	; (690c <process_command(String)+0x4bc>)
    6764:	f001 ff9a 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    6768:	4969      	ldr	r1, [pc, #420]	; (6910 <process_command(String)+0x4c0>)
    676a:	f001 ff97 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    676e:	4969      	ldr	r1, [pc, #420]	; (6914 <process_command(String)+0x4c4>)
    6770:	f001 ff94 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    6774:	4968      	ldr	r1, [pc, #416]	; (6918 <process_command(String)+0x4c8>)
    6776:	f001 ff91 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    677a:	4968      	ldr	r1, [pc, #416]	; (691c <process_command(String)+0x4cc>)
    677c:	f001 ff8e 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    6780:	4967      	ldr	r1, [pc, #412]	; (6920 <process_command(String)+0x4d0>)
    6782:	f001 ff8b 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    6786:	4967      	ldr	r1, [pc, #412]	; (6924 <process_command(String)+0x4d4>)
    6788:	f001 ff88 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    678c:	4966      	ldr	r1, [pc, #408]	; (6928 <process_command(String)+0x4d8>)
    678e:	f001 ff85 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    6792:	4966      	ldr	r1, [pc, #408]	; (692c <process_command(String)+0x4dc>)
    6794:	f001 ff82 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    6798:	4965      	ldr	r1, [pc, #404]	; (6930 <process_command(String)+0x4e0>)
    679a:	f001 ff7f 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    679e:	4965      	ldr	r1, [pc, #404]	; (6934 <process_command(String)+0x4e4>)
    67a0:	f001 ff7c 	bl	869c <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    67a4:	4964      	ldr	r1, [pc, #400]	; (6938 <process_command(String)+0x4e8>)
    67a6:	f001 ff79 	bl	869c <operator+(StringSumHelper const&, char const*)>
    67aa:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    67ac:	4863      	ldr	r0, [pc, #396]	; (693c <process_command(String)+0x4ec>)
    67ae:	f001 fe37 	bl	8420 <Print::print(String const&)>
    67b2:	4862      	ldr	r0, [pc, #392]	; (693c <process_command(String)+0x4ec>)
    67b4:	f001 fe5a 	bl	846c <Print::println()>
class StringSumHelper : public String
    67b8:	a814      	add	r0, sp, #80	; 0x50
    67ba:	f001 fe97 	bl	84ec <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    67be:	a810      	add	r0, sp, #64	; 0x40
    67c0:	f001 fe94 	bl	84ec <String::~String()>
            run_mode = WAITING;
    67c4:	4b5e      	ldr	r3, [pc, #376]	; (6940 <process_command(String)+0x4f0>)
    67c6:	701c      	strb	r4, [r3, #0]
            break;
    67c8:	e680      	b.n	64cc <process_command(String)+0x7c>
	StringSumHelper(const char *p) : String(p) {}
    67ca:	495e      	ldr	r1, [pc, #376]	; (6944 <process_command(String)+0x4f4>)
    67cc:	a814      	add	r0, sp, #80	; 0x50
    67ce:	f001 fec9 	bl	8564 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    67d2:	4621      	mov	r1, r4
    67d4:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    67d6:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    67d8:	f001 ff58 	bl	868c <operator+(StringSumHelper const&, String const&)>
    67dc:	495a      	ldr	r1, [pc, #360]	; (6948 <process_command(String)+0x4f8>)
    67de:	f001 ff5d 	bl	869c <operator+(StringSumHelper const&, char const*)>
    67e2:	a904      	add	r1, sp, #16
    67e4:	f001 ff52 	bl	868c <operator+(StringSumHelper const&, String const&)>
    67e8:	4958      	ldr	r1, [pc, #352]	; (694c <process_command(String)+0x4fc>)
    67ea:	f001 ff57 	bl	869c <operator+(StringSumHelper const&, char const*)>
    67ee:	a908      	add	r1, sp, #32
    67f0:	f001 ff4c 	bl	868c <operator+(StringSumHelper const&, String const&)>
    67f4:	4955      	ldr	r1, [pc, #340]	; (694c <process_command(String)+0x4fc>)
    67f6:	f001 ff51 	bl	869c <operator+(StringSumHelper const&, char const*)>
    67fa:	a90c      	add	r1, sp, #48	; 0x30
    67fc:	f001 ff46 	bl	868c <operator+(StringSumHelper const&, String const&)>
    6800:	4953      	ldr	r1, [pc, #332]	; (6950 <process_command(String)+0x500>)
    6802:	f001 ff4b 	bl	869c <operator+(StringSumHelper const&, char const*)>
    6806:	4601      	mov	r1, r0
    6808:	484c      	ldr	r0, [pc, #304]	; (693c <process_command(String)+0x4ec>)
    680a:	f001 fe09 	bl	8420 <Print::print(String const&)>
    680e:	484b      	ldr	r0, [pc, #300]	; (693c <process_command(String)+0x4ec>)
    6810:	f001 fe2c 	bl	846c <Print::println()>
class StringSumHelper : public String
    6814:	a814      	add	r0, sp, #80	; 0x50
    6816:	f001 fe69 	bl	84ec <String::~String()>
            run_mode = WAITING;
    681a:	4b49      	ldr	r3, [pc, #292]	; (6940 <process_command(String)+0x4f0>)
    681c:	701c      	strb	r4, [r3, #0]
            break;
    681e:	e655      	b.n	64cc <process_command(String)+0x7c>
            run_mode = SINGLE_STEP;
    6820:	4b47      	ldr	r3, [pc, #284]	; (6940 <process_command(String)+0x4f0>)
    6822:	2401      	movs	r4, #1
    6824:	701c      	strb	r4, [r3, #0]
            break;
    6826:	e651      	b.n	64cc <process_command(String)+0x7c>
            run_mode = RESETTING;
    6828:	4d45      	ldr	r5, [pc, #276]	; (6940 <process_command(String)+0x4f0>)
    682a:	2303      	movs	r3, #3
    682c:	702b      	strb	r3, [r5, #0]
    682e:	e74f      	b.n	66d0 <process_command(String)+0x280>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6830:	4948      	ldr	r1, [pc, #288]	; (6954 <process_command(String)+0x504>)
    6832:	a808      	add	r0, sp, #32
    6834:	f001 ff40 	bl	86b8 <String::equals(char const*) const>
                else if (arg1=="a") {
    6838:	2800      	cmp	r0, #0
    683a:	d044      	beq.n	68c6 <process_command(String)+0x476>
                    register_a = value & 0xFF;
    683c:	4b46      	ldr	r3, [pc, #280]	; (6958 <process_command(String)+0x508>)
    683e:	701c      	strb	r4, [r3, #0]
    6840:	e6f4      	b.n	662c <process_command(String)+0x1dc>
                    count = arg2.toInt() & 0xFF;
    6842:	a80c      	add	r0, sp, #48	; 0x30
    6844:	f002 f83c 	bl	88c0 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    6848:	4944      	ldr	r1, [pc, #272]	; (695c <process_command(String)+0x50c>)
                    count = arg2.toInt() & 0xFF;
    684a:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    684e:	4632      	mov	r2, r6
    6850:	4620      	mov	r0, r4
    6852:	f004 fd95 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6856:	4620      	mov	r0, r4
    6858:	f005 f9d2 	bl	bc00 <strlen>
    685c:	4601      	mov	r1, r0
    685e:	4620      	mov	r0, r4
    6860:	f003 fa88 	bl	9d74 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6864:	f1b9 0f00 	cmp.w	r9, #0
    6868:	f47f af07 	bne.w	667a <process_command(String)+0x22a>
    686c:	e72c      	b.n	66c8 <process_command(String)+0x278>
	StringSumHelper(const char *p) : String(p) {}
    686e:	493c      	ldr	r1, [pc, #240]	; (6960 <process_command(String)+0x510>)
    6870:	a814      	add	r0, sp, #80	; 0x50
    6872:	f001 fe77 	bl	8564 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    6876:	a908      	add	r1, sp, #32
    6878:	a814      	add	r0, sp, #80	; 0x50
    687a:	f001 ff07 	bl	868c <operator+(StringSumHelper const&, String const&)>
    687e:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6880:	482e      	ldr	r0, [pc, #184]	; (693c <process_command(String)+0x4ec>)
    6882:	f001 fdcd 	bl	8420 <Print::print(String const&)>
    6886:	482d      	ldr	r0, [pc, #180]	; (693c <process_command(String)+0x4ec>)
    6888:	f001 fdf0 	bl	846c <Print::println()>
class StringSumHelper : public String
    688c:	a814      	add	r0, sp, #80	; 0x50
    688e:	f001 fe2d 	bl	84ec <String::~String()>
            run_mode = WAITING;
    6892:	e65b      	b.n	654c <process_command(String)+0xfc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6894:	4833      	ldr	r0, [pc, #204]	; (6964 <process_command(String)+0x514>)
    6896:	e671      	b.n	657c <process_command(String)+0x12c>
    6898:	4832      	ldr	r0, [pc, #200]	; (6964 <process_command(String)+0x514>)
    689a:	e64a      	b.n	6532 <process_command(String)+0xe2>
    689c:	4831      	ldr	r0, [pc, #196]	; (6964 <process_command(String)+0x514>)
    689e:	e6d4      	b.n	664a <process_command(String)+0x1fa>
    68a0:	4830      	ldr	r0, [pc, #192]	; (6964 <process_command(String)+0x514>)
    68a2:	e6b5      	b.n	6610 <process_command(String)+0x1c0>
                        sprintf(s,"\n\r[%04X] = ", addr);
    68a4:	4659      	mov	r1, fp
    68a6:	4632      	mov	r2, r6
    68a8:	4620      	mov	r0, r4
    68aa:	f004 fd69 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    68ae:	4620      	mov	r0, r4
    68b0:	f005 f9a6 	bl	bc00 <strlen>
    68b4:	4601      	mov	r1, r0
    68b6:	4620      	mov	r0, r4
    68b8:	f003 fa5c 	bl	9d74 <usb_serial_write>
    68bc:	e6e9      	b.n	6692 <process_command(String)+0x242>
    68be:	4829      	ldr	r0, [pc, #164]	; (6964 <process_command(String)+0x514>)
    68c0:	e718      	b.n	66f4 <process_command(String)+0x2a4>
    68c2:	4828      	ldr	r0, [pc, #160]	; (6964 <process_command(String)+0x514>)
    68c4:	e663      	b.n	658e <process_command(String)+0x13e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    68c6:	4928      	ldr	r1, [pc, #160]	; (6968 <process_command(String)+0x518>)
    68c8:	a808      	add	r0, sp, #32
    68ca:	f001 fef5 	bl	86b8 <String::equals(char const*) const>
                else if (arg1=="x") {
    68ce:	b120      	cbz	r0, 68da <process_command(String)+0x48a>
                    register_x = value & 0xFF;
    68d0:	4b26      	ldr	r3, [pc, #152]	; (696c <process_command(String)+0x51c>)
    68d2:	701c      	strb	r4, [r3, #0]
    68d4:	e6aa      	b.n	662c <process_command(String)+0x1dc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    68d6:	4823      	ldr	r0, [pc, #140]	; (6964 <process_command(String)+0x514>)
    68d8:	e617      	b.n	650a <process_command(String)+0xba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    68da:	4925      	ldr	r1, [pc, #148]	; (6970 <process_command(String)+0x520>)
    68dc:	a808      	add	r0, sp, #32
    68de:	f001 feeb 	bl	86b8 <String::equals(char const*) const>
                else if (arg1=="y") {
    68e2:	b110      	cbz	r0, 68ea <process_command(String)+0x49a>
                    register_y = value & 0xFF;
    68e4:	4b23      	ldr	r3, [pc, #140]	; (6974 <process_command(String)+0x524>)
    68e6:	701c      	strb	r4, [r3, #0]
    68e8:	e6a0      	b.n	662c <process_command(String)+0x1dc>
    68ea:	2239      	movs	r2, #57	; 0x39
    68ec:	4922      	ldr	r1, [pc, #136]	; (6978 <process_command(String)+0x528>)
    68ee:	4813      	ldr	r0, [pc, #76]	; (693c <process_command(String)+0x4ec>)
    68f0:	f002 ff1a 	bl	9728 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    68f4:	4811      	ldr	r0, [pc, #68]	; (693c <process_command(String)+0x4ec>)
    68f6:	f001 fdb9 	bl	846c <Print::println()>
    68fa:	e697      	b.n	662c <process_command(String)+0x1dc>
    68fc:	200003e0 	.word	0x200003e0
    6900:	200003f8 	.word	0x200003f8
    6904:	20000434 	.word	0x20000434
    6908:	20000480 	.word	0x20000480
    690c:	200004b0 	.word	0x200004b0
    6910:	200004e4 	.word	0x200004e4
    6914:	20000528 	.word	0x20000528
    6918:	20000560 	.word	0x20000560
    691c:	200005a4 	.word	0x200005a4
    6920:	200005f4 	.word	0x200005f4
    6924:	20000630 	.word	0x20000630
    6928:	20000634 	.word	0x20000634
    692c:	2000064c 	.word	0x2000064c
    6930:	20000678 	.word	0x20000678
    6934:	200006d8 	.word	0x200006d8
    6938:	20000734 	.word	0x20000734
    693c:	20004358 	.word	0x20004358
    6940:	200188a2 	.word	0x200188a2
    6944:	20000810 	.word	0x20000810
    6948:	20000830 	.word	0x20000830
    694c:	20000834 	.word	0x20000834
    6950:	20000944 	.word	0x20000944
    6954:	200007a4 	.word	0x200007a4
    6958:	2001889f 	.word	0x2001889f
    695c:	200007f0 	.word	0x200007f0
    6960:	20000780 	.word	0x20000780
    6964:	2000122c 	.word	0x2000122c
    6968:	200007a8 	.word	0x200007a8
    696c:	200188a0 	.word	0x200188a0
    6970:	200007ac 	.word	0x200007ac
    6974:	200188a1 	.word	0x200188a1
    6978:	200007b0 	.word	0x200007b0

0000697c <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Give Teensy 4.1 a moment
    delay(50);
    6980:	2032      	movs	r0, #50	; 0x32
void loop() {
    6982:	b08d      	sub	sp, #52	; 0x34
    delay(50);
    6984:	f001 ffa2 	bl	88cc <delay>
    sample_at_CLK_rising_edge();
    6988:	f8df b15c 	ldr.w	fp, [pc, #348]	; 6ae8 <loop+0x16c>
    698c:	f7fb fda0 	bl	24d0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    6990:	4e4c      	ldr	r6, [pc, #304]	; (6ac4 <loop+0x148>)
    6992:	f7fb fd9d 	bl	24d0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    6996:	f8df 9154 	ldr.w	r9, [pc, #340]	; 6aec <loop+0x170>
    699a:	f7fb fd99 	bl	24d0 <sample_at_CLK_rising_edge()>

    reset_sequence();
    699e:	4d4a      	ldr	r5, [pc, #296]	; (6ac8 <loop+0x14c>)
    69a0:	f7fc fb04 	bl	2fac <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    69a4:	4b49      	ldr	r3, [pc, #292]	; (6acc <loop+0x150>)
    69a6:	781b      	ldrb	r3, [r3, #0]
    69a8:	2b01      	cmp	r3, #1
    69aa:	f000 81ce 	beq.w	6d4a <loop+0x3ce>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    69ae:	f89b 3000 	ldrb.w	r3, [fp]
    69b2:	2b00      	cmp	r3, #0
    69b4:	d175      	bne.n	6aa2 <loop+0x126>
    69b6:	4b46      	ldr	r3, [pc, #280]	; (6ad0 <loop+0x154>)
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	2b01      	cmp	r3, #1
    69bc:	d06f      	beq.n	6a9e <loop+0x122>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    69be:	4a45      	ldr	r2, [pc, #276]	; (6ad4 <loop+0x158>)
        nmi_n_old = direct_nmi;
    69c0:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    69c4:	7812      	ldrb	r2, [r2, #0]
    69c6:	2a01      	cmp	r2, #1
    69c8:	d073      	beq.n	6ab2 <loop+0x136>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    69ca:	2100      	movs	r1, #0
    69cc:	8830      	ldrh	r0, [r6, #0]
    69ce:	f7fb fdcf 	bl	2570 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    69d2:	4b41      	ldr	r3, [pc, #260]	; (6ad8 <loop+0x15c>)
        next_instruction = read_byte(register_pc, false);
    69d4:	4601      	mov	r1, r0
    69d6:	f889 0000 	strb.w	r0, [r9]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	2b00      	cmp	r3, #0
    69de:	f000 8089 	beq.w	6af4 <loop+0x178>
    69e2:	782a      	ldrb	r2, [r5, #0]
    69e4:	f8b6 a000 	ldrh.w	sl, [r6]
    69e8:	2a02      	cmp	r2, #2
    69ea:	f000 81be 	beq.w	6d6a <loop+0x3ee>
void loop() {
    69ee:	4650      	mov	r0, sl
    69f0:	ac04      	add	r4, sp, #16
    69f2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6af0 <loop+0x174>
    69f6:	4f39      	ldr	r7, [pc, #228]	; (6adc <loop+0x160>)
    69f8:	e033      	b.n	6a62 <loop+0xe6>
    69fa:	2101      	movs	r1, #1
    69fc:	4640      	mov	r0, r8
    69fe:	f003 f9b9 	bl	9d74 <usb_serial_write>
    6a02:	4638      	mov	r0, r7
    6a04:	f001 fd32 	bl	846c <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    6a08:	4669      	mov	r1, sp
    6a0a:	4620      	mov	r0, r4
    6a0c:	f001 fd50 	bl	84b0 <String::String(String const&)>
    6a10:	4620      	mov	r0, r4
    6a12:	f7ff fd1d 	bl	6450 <process_command(String)>
    6a16:	7028      	strb	r0, [r5, #0]
    6a18:	4620      	mov	r0, r4
    6a1a:	f001 fd67 	bl	84ec <String::~String()>
                    last_command = c;
    6a1e:	4669      	mov	r1, sp
    6a20:	482f      	ldr	r0, [pc, #188]	; (6ae0 <loop+0x164>)
    6a22:	f001 fdb3 	bl	858c <String::operator=(String const&)>
    6a26:	2101      	movs	r1, #1
    6a28:	4640      	mov	r0, r8
    6a2a:	f003 f9a3 	bl	9d74 <usb_serial_write>
    6a2e:	4638      	mov	r0, r7
    6a30:	f001 fd1c 	bl	846c <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    6a34:	782b      	ldrb	r3, [r5, #0]
    6a36:	2b02      	cmp	r3, #2
    6a38:	d009      	beq.n	6a4e <loop+0xd2>
    6a3a:	8830      	ldrh	r0, [r6, #0]
    6a3c:	4550      	cmp	r0, sl
    6a3e:	d006      	beq.n	6a4e <loop+0xd2>
                    next_instruction = read_byte(register_pc, false);
    6a40:	2100      	movs	r1, #0
    6a42:	f7fb fd95 	bl	2570 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    6a46:	f8b6 a000 	ldrh.w	sl, [r6]
                    next_instruction = read_byte(register_pc, false);
    6a4a:	f889 0000 	strb.w	r0, [r9]
                }
            } while (run_mode == WAITING);
    6a4e:	4668      	mov	r0, sp
    6a50:	f001 fd4c 	bl	84ec <String::~String()>
    6a54:	782b      	ldrb	r3, [r5, #0]
    6a56:	2b00      	cmp	r3, #0
    6a58:	f040 817a 	bne.w	6d50 <loop+0x3d4>
                display_next_instruction(register_pc, next_instruction);
    6a5c:	8830      	ldrh	r0, [r6, #0]
    6a5e:	f899 1000 	ldrb.w	r1, [r9]
    6a62:	f7ff fb91 	bl	6188 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    6a66:	4668      	mov	r0, sp
    6a68:	f7ff fc64 	bl	6334 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    6a6c:	9b02      	ldr	r3, [sp, #8]
    6a6e:	2b00      	cmp	r3, #0
    6a70:	d1c3      	bne.n	69fa <loop+0x7e>
	inline unsigned int length(void) const {return len;}
    6a72:	491b      	ldr	r1, [pc, #108]	; (6ae0 <loop+0x164>)
    6a74:	688b      	ldr	r3, [r1, #8]
    6a76:	2b00      	cmp	r3, #0
    6a78:	d0bf      	beq.n	69fa <loop+0x7e>
	size_t println(const String &s)			{ return print(s) + println(); }
    6a7a:	4638      	mov	r0, r7
    6a7c:	f001 fcd0 	bl	8420 <Print::print(String const&)>
    6a80:	4638      	mov	r0, r7
    6a82:	f001 fcf3 	bl	846c <Print::println()>
                    run_mode = process_command(last_command);
    6a86:	4916      	ldr	r1, [pc, #88]	; (6ae0 <loop+0x164>)
    6a88:	4620      	mov	r0, r4
    6a8a:	f001 fd11 	bl	84b0 <String::String(String const&)>
    6a8e:	4620      	mov	r0, r4
    6a90:	f7ff fcde 	bl	6450 <process_command(String)>
    6a94:	7028      	strb	r0, [r5, #0]
    6a96:	4620      	mov	r0, r4
    6a98:	f001 fd28 	bl	84ec <String::~String()>
    6a9c:	e7c3      	b.n	6a26 <loop+0xaa>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    6a9e:	f7fc fb71 	bl	3184 <nmi_handler()>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6aa2:	4a0c      	ldr	r2, [pc, #48]	; (6ad4 <loop+0x158>)
        nmi_n_old = direct_nmi;
    6aa4:	4b0a      	ldr	r3, [pc, #40]	; (6ad0 <loop+0x154>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6aa6:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    6aa8:	781b      	ldrb	r3, [r3, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6aaa:	2a01      	cmp	r2, #1
        nmi_n_old = direct_nmi;
    6aac:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6ab0:	d18b      	bne.n	69ca <loop+0x4e>
    6ab2:	4b0c      	ldr	r3, [pc, #48]	; (6ae4 <loop+0x168>)
    6ab4:	7818      	ldrb	r0, [r3, #0]
    6ab6:	f010 0004 	ands.w	r0, r0, #4
    6aba:	d186      	bne.n	69ca <loop+0x4e>
    6abc:	f7fc fc52 	bl	3364 <irq_handler(unsigned char)>
    6ac0:	e783      	b.n	69ca <loop+0x4e>
    6ac2:	bf00      	nop
    6ac4:	20018888 	.word	0x20018888
    6ac8:	200188a2 	.word	0x200188a2
    6acc:	2001889a 	.word	0x2001889a
    6ad0:	20018898 	.word	0x20018898
    6ad4:	20018897 	.word	0x20018897
    6ad8:	200053c8 	.word	0x200053c8
    6adc:	20004358 	.word	0x20004358
    6ae0:	200153f0 	.word	0x200153f0
    6ae4:	20004968 	.word	0x20004968
    6ae8:	20004967 	.word	0x20004967
    6aec:	2001889e 	.word	0x2001889e
    6af0:	200007f8 	.word	0x200007f8
        if (run_mode != RUNNING) {
    6af4:	782b      	ldrb	r3, [r5, #0]
    6af6:	2b02      	cmp	r3, #2
    6af8:	f040 813e 	bne.w	6d78 <loop+0x3fc>
        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0x1);

		uint16_t next_pc = 0;
        switch (next_instruction) {
    6afc:	29ff      	cmp	r1, #255	; 0xff
    6afe:	f201 8412 	bhi.w	8326 <loop+0x19aa>
    6b02:	e8df f011 	tbh	[pc, r1, lsl #1]
    6b06:	0b83      	.short	0x0b83
    6b08:	013f0b8a 	.word	0x013f0b8a
    6b0c:	0160015b 	.word	0x0160015b
    6b10:	017b016a 	.word	0x017b016a
    6b14:	01850180 	.word	0x01850180
    6b18:	019f018a 	.word	0x019f018a
    6b1c:	01a901a4 	.word	0x01a901a4
    6b20:	01c401b3 	.word	0x01c401b3
    6b24:	01ce01c9 	.word	0x01ce01c9
    6b28:	013f01d9 	.word	0x013f01d9
    6b2c:	01f001eb 	.word	0x01f001eb
    6b30:	020b01fa 	.word	0x020b01fa
    6b34:	02150210 	.word	0x02150210
    6b38:	01000228 	.word	0x01000228
    6b3c:	023f023a 	.word	0x023f023a
    6b40:	025c024a 	.word	0x025c024a
    6b44:	02660261 	.word	0x02660261
    6b48:	013f026b 	.word	0x013f026b
    6b4c:	0280027b 	.word	0x0280027b
    6b50:	02a50295 	.word	0x02a50295
    6b54:	02af02aa 	.word	0x02af02aa
    6b58:	02c802b4 	.word	0x02c802b4
    6b5c:	02d202cd 	.word	0x02d202cd
    6b60:	02e702d7 	.word	0x02e702d7
    6b64:	02f102ec 	.word	0x02f102ec
    6b68:	013f02ff 	.word	0x013f02ff
    6b6c:	05310559 	.word	0x05310559
    6b70:	054d053c 	.word	0x054d053c
    6b74:	04d80553 	.word	0x04d80553
    6b78:	010004eb 	.word	0x010004eb
    6b7c:	050104fc 	.word	0x050104fc
    6b80:	051f050d 	.word	0x051f050d
    6b84:	052b0525 	.word	0x052b0525
    6b88:	013f043d 	.word	0x013f043d
    6b8c:	0453044e 	.word	0x0453044e
    6b90:	046e045d 	.word	0x046e045d
    6b94:	04780473 	.word	0x04780473
    6b98:	0492047d 	.word	0x0492047d
    6b9c:	049c0497 	.word	0x049c0497
    6ba0:	04b204a1 	.word	0x04b204a1
    6ba4:	04bc04b7 	.word	0x04bc04b7
    6ba8:	013f04c6 	.word	0x013f04c6
    6bac:	03150310 	.word	0x03150310
    6bb0:	0330031f 	.word	0x0330031f
    6bb4:	033a0335 	.word	0x033a0335
    6bb8:	0100034d 	.word	0x0100034d
    6bbc:	0364035f 	.word	0x0364035f
    6bc0:	0381036f 	.word	0x0381036f
    6bc4:	038b0386 	.word	0x038b0386
    6bc8:	013f0390 	.word	0x013f0390
    6bcc:	03a2039d 	.word	0x03a2039d
    6bd0:	03b903ac 	.word	0x03b903ac
    6bd4:	03c303be 	.word	0x03c303be
    6bd8:	03d903c8 	.word	0x03d903c8
    6bdc:	03e303de 	.word	0x03e303de
    6be0:	03f503e8 	.word	0x03f503e8
    6be4:	03ff03fa 	.word	0x03ff03fa
    6be8:	013f0413 	.word	0x013f0413
    6bec:	04210438 	.word	0x04210438
    6bf0:	055f042b 	.word	0x055f042b
    6bf4:	056b0565 	.word	0x056b0565
    6bf8:	0100057f 	.word	0x0100057f
    6bfc:	0594058e 	.word	0x0594058e
    6c00:	05b805a9 	.word	0x05b805a9
    6c04:	05c405be 	.word	0x05c405be
    6c08:	05dd05d0 	.word	0x05dd05d0
    6c0c:	05f905e9 	.word	0x05f905e9
    6c10:	06270610 	.word	0x06270610
    6c14:	0658063e 	.word	0x0658063e
    6c18:	067a066e 	.word	0x067a066e
    6c1c:	069b068f 	.word	0x069b068f
    6c20:	06b506a8 	.word	0x06b506a8
    6c24:	06d206c2 	.word	0x06d206c2
    6c28:	013f06dd 	.word	0x013f06dd
    6c2c:	06f506ea 	.word	0x06f506ea
    6c30:	070f0702 	.word	0x070f0702
    6c34:	07390729 	.word	0x07390729
    6c38:	075b074e 	.word	0x075b074e
    6c3c:	077a076e 	.word	0x077a076e
    6c40:	07920786 	.word	0x07920786
    6c44:	07aa079e 	.word	0x07aa079e
    6c48:	07cc07bd 	.word	0x07cc07bd
    6c4c:	07f007df 	.word	0x07f007df
    6c50:	080e07ff 	.word	0x080e07ff
    6c54:	082e081d 	.word	0x082e081d
    6c58:	08560843 	.word	0x08560843
    6c5c:	0877086b 	.word	0x0877086b
    6c60:	08950886 	.word	0x08950886
    6c64:	08c208b1 	.word	0x08c208b1
    6c68:	013f08ce 	.word	0x013f08ce
    6c6c:	08f008de 	.word	0x08f008de
    6c70:	090e08ff 	.word	0x090e08ff
    6c74:	092e091d 	.word	0x092e091d
    6c78:	09520942 	.word	0x09520942
    6c7c:	097d0967 	.word	0x097d0967
    6c80:	099d098d 	.word	0x099d098d
    6c84:	09bf09ad 	.word	0x09bf09ad
    6c88:	09d209c5 	.word	0x09d209c5
    6c8c:	09e409de 	.word	0x09e409de
    6c90:	09f709ea 	.word	0x09f709ea
    6c94:	0a0309fd 	.word	0x0a0309fd
    6c98:	0a1f0a19 	.word	0x0a1f0a19
    6c9c:	0a3b0a35 	.word	0x0a3b0a35
    6ca0:	0a5a0a4d 	.word	0x0a5a0a4d
    6ca4:	0a660a60 	.word	0x0a660a60
    6ca8:	013f0a71 	.word	0x013f0a71
    6cac:	0aad0ac5 	.word	0x0aad0ac5
    6cb0:	0a7f0ab8 	.word	0x0a7f0ab8
    6cb4:	0a8b0a85 	.word	0x0a8b0a85
    6cb8:	01000a9f 	.word	0x01000a9f
    6cbc:	0ad10acb 	.word	0x0ad10acb
    6cc0:	0aeb0add 	.word	0x0aeb0add
    6cc4:	0af70af1 	.word	0x0af70af1
    6cc8:	0b510afd 	.word	0x0b510afd
    6ccc:	0b690b63 	.word	0x0b690b63
    6cd0:	0c040b6f 	.word	0x0c040b6f
    6cd4:	01460c0a 	.word	0x01460c0a
    6cd8:	01000141 	.word	0x01000141
    6cdc:	0b0b0141 	.word	0x0b0b0141
    6ce0:	0b1f0b11 	.word	0x0b1f0b11
    6ce4:	0b2b0b25 	.word	0x0b2b0b25
    6ce8:	013f0b37 	.word	0x013f0b37
    6cec:	0b460b5d 	.word	0x0b460b5d
    6cf0:	0baa0b9c 	.word	0x0baa0b9c
    6cf4:	0bb60bb0 	.word	0x0bb60bb0
    6cf8:	01000bca 	.word	0x01000bca
    6cfc:	0bdf0bd9 	.word	0x0bdf0bd9
    6d00:	0c100bf5 	.word	0x0c100bf5
    6d04:	0b7d      	.short	0x0b7d
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    6d06:	f7fc fdab 	bl	3860 <opcode_0xEA()>
    6d0a:	4607      	mov	r7, r0
        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0);

        char buf[32];
        sprintf(buf, "%04X", next_pc);
    6d0c:	4602      	mov	r2, r0
        if (run_mode == SINGLE_STEP)
    6d0e:	782b      	ldrb	r3, [r5, #0]
    6d10:	2b01      	cmp	r3, #1
    6d12:	d105      	bne.n	6d20 <loop+0x3a4>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6d14:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6d18:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    6d1c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        sprintf(buf, "%04X", next_pc);
    6d20:	ac04      	add	r4, sp, #16
    6d22:	49bb      	ldr	r1, [pc, #748]	; (7010 <loop+0x694>)
    6d24:	4620      	mov	r0, r4
    6d26:	f004 fb2b 	bl	b380 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6d2a:	4620      	mov	r0, r4
    6d2c:	f004 ff68 	bl	bc00 <strlen>
    6d30:	4601      	mov	r1, r0
    6d32:	4620      	mov	r0, r4
    6d34:	f003 f81e 	bl	9d74 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6d38:	48b6      	ldr	r0, [pc, #728]	; (7014 <loop+0x698>)
    6d3a:	f001 fb97 	bl	846c <Print::println()>
        if (direct_reset == 1) reset_sequence();
    6d3e:	4bb6      	ldr	r3, [pc, #728]	; (7018 <loop+0x69c>)
        Serial.println(buf);
        register_pc = next_pc;
    6d40:	8037      	strh	r7, [r6, #0]
        if (direct_reset == 1) reset_sequence();
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	2b01      	cmp	r3, #1
    6d46:	f47f ae32 	bne.w	69ae <loop+0x32>
    6d4a:	f7fc f92f 	bl	2fac <reset_sequence()>
    6d4e:	e62e      	b.n	69ae <loop+0x32>
        if (run_mode == RESETTING) {
    6d50:	2b03      	cmp	r3, #3
    6d52:	d014      	beq.n	6d7e <loop+0x402>
        if (run_mode == SINGLE_STEP)
    6d54:	2b01      	cmp	r3, #1
    6d56:	d105      	bne.n	6d64 <loop+0x3e8>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6d58:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6d5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                display_next_instruction(register_pc, next_instruction);
    6d64:	f899 1000 	ldrb.w	r1, [r9]
}
    6d68:	e6c8      	b.n	6afc <loop+0x180>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6d6a:	4553      	cmp	r3, sl
    6d6c:	f47f aec6 	bne.w	6afc <loop+0x180>
            run_mode = WAITING;
    6d70:	f04f 0300 	mov.w	r3, #0
    6d74:	702b      	strb	r3, [r5, #0]
    6d76:	e63a      	b.n	69ee <loop+0x72>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6d78:	f8b6 a000 	ldrh.w	sl, [r6]
    6d7c:	e637      	b.n	69ee <loop+0x72>
    }
}
    6d7e:	b00d      	add	sp, #52	; 0x34
    6d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next_pc = opcode_0x02();
    6d84:	f7ff f9fa 	bl	617c <opcode_0x02()>
				next_pc = opcode_0xE9();
    6d88:	f7fc fd54 	bl	3834 <opcode_0xE9()>
    6d8c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6d8e:	4602      	mov	r2, r0
				break; // SBC - Immediate
    6d90:	e7bd      	b.n	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    6d92:	8830      	ldrh	r0, [r6, #0]
    6d94:	2100      	movs	r1, #0
    6d96:	3001      	adds	r0, #1
    6d98:	b280      	uxth	r0, r0
    6d9a:	f7fb fbe9 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = register_x + 1;
    6d9e:	4b9f      	ldr	r3, [pc, #636]	; (701c <loop+0x6a0>)
    6da0:	7818      	ldrb	r0, [r3, #0]
    6da2:	3001      	adds	r0, #1
    6da4:	b2c0      	uxtb	r0, r0
    6da6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6da8:	f7fb fea6 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xE8].length);
    6dac:	4b9c      	ldr	r3, [pc, #624]	; (7020 <loop+0x6a4>)
    6dae:	f893 7f51 	ldrb.w	r7, [r3, #3921]	; 0xf51
    6db2:	8833      	ldrh	r3, [r6, #0]
    6db4:	441f      	add	r7, r3
    6db6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6db8:	463a      	mov	r2, r7
				break; // INX
    6dba:	e7a8      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x03();
    6dbc:	f7fe f918 	bl	4ff0 <opcode_0x03()>
    6dc0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6dc2:	4602      	mov	r2, r0
				break; // SLO - Indexed Indirect X
    6dc4:	e7a3      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage();
    6dc6:	f7fb feb7 	bl	2b38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    6dca:	4b96      	ldr	r3, [pc, #600]	; (7024 <loop+0x6a8>)
    6dcc:	f893 7101 	ldrb.w	r7, [r3, #257]	; 0x101
    6dd0:	8833      	ldrh	r3, [r6, #0]
    6dd2:	441f      	add	r7, r3
    6dd4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6dd6:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    6dd8:	e799      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_ZeroPage());
    6dda:	f7fb fead 	bl	2b38 <Fetch_ZeroPage()>
    6dde:	4b92      	ldr	r3, [pc, #584]	; (7028 <loop+0x6ac>)
    6de0:	781a      	ldrb	r2, [r3, #0]
    6de2:	4310      	orrs	r0, r2
    6de4:	b2c0      	uxtb	r0, r0
    6de6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6de8:	f7fb fe86 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x05].length);
    6dec:	4b8d      	ldr	r3, [pc, #564]	; (7024 <loop+0x6a8>)
    6dee:	f893 7135 	ldrb.w	r7, [r3, #309]	; 0x135
    6df2:	8833      	ldrh	r3, [r6, #0]
    6df4:	441f      	add	r7, r3
    6df6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6df8:	463a      	mov	r2, r7
				break; // OR ZeroPage
    6dfa:	e788      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x06();
    6dfc:	f7fc ff8e 	bl	3d1c <opcode_0x06()>
    6e00:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e02:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    6e04:	e783      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x07();
    6e06:	f7fe f883 	bl	4f10 <opcode_0x07()>
    6e0a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e0c:	4602      	mov	r2, r0
				break; // SLO - ZeroPage
    6e0e:	e77e      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x08();
    6e10:	f7fc fd3a 	bl	3888 <opcode_0x08()>
    6e14:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e16:	4602      	mov	r2, r0
				break; // PHP - Push processor status to the stack
    6e18:	e779      	b.n	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    6e1a:	8830      	ldrh	r0, [r6, #0]
    6e1c:	2100      	movs	r1, #0
    6e1e:	3001      	adds	r0, #1
    6e20:	b280      	uxth	r0, r0
    6e22:	f7fb fba5 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    6e26:	4b80      	ldr	r3, [pc, #512]	; (7028 <loop+0x6ac>)
    6e28:	781a      	ldrb	r2, [r3, #0]
    6e2a:	4310      	orrs	r0, r2
    6e2c:	b2c0      	uxtb	r0, r0
    6e2e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6e30:	f7fb fe62 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x09].length);
    6e34:	4b7b      	ldr	r3, [pc, #492]	; (7024 <loop+0x6a8>)
    6e36:	f893 7205 	ldrb.w	r7, [r3, #517]	; 0x205
    6e3a:	8833      	ldrh	r3, [r6, #0]
    6e3c:	441f      	add	r7, r3
    6e3e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6e40:	463a      	mov	r2, r7
				break; // OR - Immediate
    6e42:	e764      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x0A();
    6e44:	f7fc fb84 	bl	3550 <opcode_0x0A()>
    6e48:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e4a:	4602      	mov	r2, r0
				break; // ASL A
    6e4c:	e75f      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x0B();
    6e4e:	f7ff f8c9 	bl	5fe4 <opcode_0x0B()>
    6e52:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e54:	4602      	mov	r2, r0
				break; // ANC - Immediate
    6e56:	e75a      	b.n	6d0e <loop+0x392>
    Fetch_Absolute();
    6e58:	f7fb fec2 	bl	2be0 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    6e5c:	4b71      	ldr	r3, [pc, #452]	; (7024 <loop+0x6a8>)
    6e5e:	f893 72a1 	ldrb.w	r7, [r3, #673]	; 0x2a1
    6e62:	8833      	ldrh	r3, [r6, #0]
    6e64:	441f      	add	r7, r3
    6e66:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6e68:	463a      	mov	r2, r7
				break; // NOP - Absolute
    6e6a:	e750      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_Absolute());
    6e6c:	f7fb feb8 	bl	2be0 <Fetch_Absolute()>
    6e70:	4b6d      	ldr	r3, [pc, #436]	; (7028 <loop+0x6ac>)
    6e72:	781a      	ldrb	r2, [r3, #0]
    6e74:	4310      	orrs	r0, r2
    6e76:	b2c0      	uxtb	r0, r0
    6e78:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6e7a:	f7fb fe3d 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0D].length);
    6e7e:	4b69      	ldr	r3, [pc, #420]	; (7024 <loop+0x6a8>)
    6e80:	f893 72d5 	ldrb.w	r7, [r3, #725]	; 0x2d5
    6e84:	8833      	ldrh	r3, [r6, #0]
    6e86:	441f      	add	r7, r3
    6e88:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6e8a:	463a      	mov	r2, r7
				break; // OR - Absolute
    6e8c:	e73f      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x0E();
    6e8e:	f7fc ffab 	bl	3de8 <opcode_0x0E()>
    6e92:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e94:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute
    6e96:	e73a      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x0F();
    6e98:	f7fe f912 	bl	50c0 <opcode_0x0F()>
    6e9c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6e9e:	4602      	mov	r2, r0
				break; // SLO - Absolute
    6ea0:	e735      	b.n	6d0e <loop+0x392>
    if ((flag_n) == 0) Branch_Taken();
    6ea2:	4b62      	ldr	r3, [pc, #392]	; (702c <loop+0x6b0>)
    6ea4:	f993 3000 	ldrsb.w	r3, [r3]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	f2c1 8274 	blt.w	8396 <loop+0x1a1a>
    6eae:	f7fd fba9 	bl	4604 <Branch_Taken()>
    return(register_pc);
    6eb2:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    6eb4:	463a      	mov	r2, r7
				break; // BNE - Branch on Zero Clear
    6eb6:	e72a      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    6eb8:	2001      	movs	r0, #1
    6eba:	f7fb ff37 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    6ebe:	4b5a      	ldr	r3, [pc, #360]	; (7028 <loop+0x6ac>)
    6ec0:	781a      	ldrb	r2, [r3, #0]
    6ec2:	4310      	orrs	r0, r2
    6ec4:	b2c0      	uxtb	r0, r0
    6ec6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6ec8:	f7fb fe16 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x11].length);
    6ecc:	4b55      	ldr	r3, [pc, #340]	; (7024 <loop+0x6a8>)
    6ece:	f893 73a5 	ldrb.w	r7, [r3, #933]	; 0x3a5
    6ed2:	8833      	ldrh	r3, [r6, #0]
    6ed4:	441f      	add	r7, r3
    6ed6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6ed8:	463a      	mov	r2, r7
				break; // OR Indirect Indexed  Y
    6eda:	e718      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x13();
    6edc:	f7fe f8bc 	bl	5058 <opcode_0x13()>
    6ee0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6ee2:	4602      	mov	r2, r0
				break; // Indirect Indexed  Y
    6ee4:	e713      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    6ee6:	f7fb fe3b 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    6eea:	4b4e      	ldr	r3, [pc, #312]	; (7024 <loop+0x6a8>)
    6eec:	f893 7441 	ldrb.w	r7, [r3, #1089]	; 0x441
    6ef0:	8833      	ldrh	r3, [r6, #0]
    6ef2:	441f      	add	r7, r3
    6ef4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6ef6:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    6ef8:	e709      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_ZeroPage_X());
    6efa:	f7fb fe31 	bl	2b60 <Fetch_ZeroPage_X()>
    6efe:	4b4a      	ldr	r3, [pc, #296]	; (7028 <loop+0x6ac>)
    6f00:	781a      	ldrb	r2, [r3, #0]
    6f02:	4310      	orrs	r0, r2
    6f04:	b2c0      	uxtb	r0, r0
    6f06:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6f08:	f7fb fdf6 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x15].length);
    6f0c:	4b45      	ldr	r3, [pc, #276]	; (7024 <loop+0x6a8>)
    6f0e:	f893 7475 	ldrb.w	r7, [r3, #1141]	; 0x475
    6f12:	8833      	ldrh	r3, [r6, #0]
    6f14:	441f      	add	r7, r3
    6f16:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6f18:	463a      	mov	r2, r7
				break; // OR - ZeroPage,X
    6f1a:	e6f8      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x16();
    6f1c:	f7fc ff36 	bl	3d8c <opcode_0x16()>
    6f20:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6f22:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    6f24:	e6f3      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x17();
    6f26:	f7fe f82f 	bl	4f88 <opcode_0x17()>
    6f2a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6f2c:	4602      	mov	r2, r0
				break; // SLO - ZeroPage , X
    6f2e:	e6ee      	b.n	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    6f30:	8830      	ldrh	r0, [r6, #0]
    6f32:	2100      	movs	r1, #0
    6f34:	3001      	adds	r0, #1
    6f36:	b280      	uxth	r0, r0
    6f38:	f7fb fb1a 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x18].length);
    6f3c:	4b39      	ldr	r3, [pc, #228]	; (7024 <loop+0x6a8>)
    register_flags = register_flags & 0xFE;
    6f3e:	4a3b      	ldr	r2, [pc, #236]	; (702c <loop+0x6b0>)
    return(register_pc + opcode_info[0x18].length);
    6f40:	f893 7511 	ldrb.w	r7, [r3, #1297]	; 0x511
    6f44:	8833      	ldrh	r3, [r6, #0]
    6f46:	441f      	add	r7, r3
    register_flags = register_flags & 0xFE;
    6f48:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    6f4a:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xFE;
    6f4c:	f023 0301 	bic.w	r3, r3, #1
    6f50:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    6f52:	463a      	mov	r2, r7
				break; // CLC
    6f54:	e6db      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_Absolute_Y(1));
    6f56:	2001      	movs	r0, #1
    6f58:	f7fb fe8e 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    6f5c:	4b32      	ldr	r3, [pc, #200]	; (7028 <loop+0x6ac>)
    6f5e:	781a      	ldrb	r2, [r3, #0]
    6f60:	4310      	orrs	r0, r2
    6f62:	b2c0      	uxtb	r0, r0
    6f64:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6f66:	f7fb fdc7 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x19].length);
    6f6a:	4b2e      	ldr	r3, [pc, #184]	; (7024 <loop+0x6a8>)
    6f6c:	f893 7545 	ldrb.w	r7, [r3, #1349]	; 0x545
    6f70:	8833      	ldrh	r3, [r6, #0]
    6f72:	441f      	add	r7, r3
    6f74:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6f76:	463a      	mov	r2, r7
				break; // OR - Absolute,Y
    6f78:	e6c9      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x1B();
    6f7a:	f7fe f909 	bl	5190 <opcode_0x1B()>
    6f7e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6f80:	4602      	mov	r2, r0
				break; // SLO - Absolute , Y
    6f82:	e6c4      	b.n	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    6f84:	2001      	movs	r0, #1
    6f86:	f7fb fe47 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    6f8a:	4b26      	ldr	r3, [pc, #152]	; (7024 <loop+0x6a8>)
    6f8c:	f893 75e1 	ldrb.w	r7, [r3, #1505]	; 0x5e1
    6f90:	8833      	ldrh	r3, [r6, #0]
    6f92:	441f      	add	r7, r3
    6f94:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6f96:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    6f98:	e6b9      	b.n	6d0e <loop+0x392>
    register_a = register_a | (Fetch_Absolute_X(1));
    6f9a:	2001      	movs	r0, #1
    6f9c:	f7fb fe3c 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    6fa0:	4b21      	ldr	r3, [pc, #132]	; (7028 <loop+0x6ac>)
    6fa2:	781a      	ldrb	r2, [r3, #0]
    6fa4:	4310      	orrs	r0, r2
    6fa6:	b2c0      	uxtb	r0, r0
    6fa8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6faa:	f7fb fda5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x1D].length);
    6fae:	4b1d      	ldr	r3, [pc, #116]	; (7024 <loop+0x6a8>)
    6fb0:	f893 7615 	ldrb.w	r7, [r3, #1557]	; 0x615
    6fb4:	8833      	ldrh	r3, [r6, #0]
    6fb6:	441f      	add	r7, r3
    6fb8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6fba:	463a      	mov	r2, r7
				break; // OR - Absolute,X
    6fbc:	e6a7      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x1E();
    6fbe:	f7fc ff41 	bl	3e44 <opcode_0x1E()>
    6fc2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6fc4:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    6fc6:	e6a2      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x1F();
    6fc8:	f7fe f8ae 	bl	5128 <opcode_0x1F()>
    6fcc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6fce:	4602      	mov	r2, r0
				break; // SLO - Absolute , X
    6fd0:	e69d      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x20();
    6fd2:	f7fd fd45 	bl	4a60 <opcode_0x20()>
    6fd6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6fd8:	4602      	mov	r2, r0
				break; // JSR - Jump to Subroutine
    6fda:	e698      	b.n	6d0e <loop+0x392>
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    6fdc:	f7fb fe7c 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    6fe0:	4b11      	ldr	r3, [pc, #68]	; (7028 <loop+0x6ac>)
    6fe2:	781a      	ldrb	r2, [r3, #0]
    6fe4:	4010      	ands	r0, r2
    6fe6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6fe8:	f7fb fd86 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x21].length);
    6fec:	4b0d      	ldr	r3, [pc, #52]	; (7024 <loop+0x6a8>)
    6fee:	f893 76e5 	ldrb.w	r7, [r3, #1765]	; 0x6e5
    6ff2:	8833      	ldrh	r3, [r6, #0]
    6ff4:	441f      	add	r7, r3
    6ff6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6ff8:	463a      	mov	r2, r7
				break; // AND - Indexed Indirect
    6ffa:	e688      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x23();
    6ffc:	f7fe f972 	bl	52e4 <opcode_0x23()>
    7000:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7002:	4602      	mov	r2, r0
				break; // RLA - Indexed Indirect X
    7004:	e683      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x24();
    7006:	f7fc fcdd 	bl	39c4 <opcode_0x24()>
    700a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    700c:	4602      	mov	r2, r0
				break; // BIT - ZeroPage
    700e:	e67e      	b.n	6d0e <loop+0x392>
    7010:	20000874 	.word	0x20000874
    7014:	20004358 	.word	0x20004358
    7018:	2001889a 	.word	0x2001889a
    701c:	200188a0 	.word	0x200188a0
    7020:	20017418 	.word	0x20017418
    7024:	20015418 	.word	0x20015418
    7028:	2001889f 	.word	0x2001889f
    702c:	20004968 	.word	0x20004968
    register_a = register_a & (Fetch_ZeroPage());
    7030:	f7fb fd82 	bl	2b38 <Fetch_ZeroPage()>
    7034:	4bb9      	ldr	r3, [pc, #740]	; (731c <loop+0x9a0>)
    7036:	781a      	ldrb	r2, [r3, #0]
    7038:	4010      	ands	r0, r2
    703a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    703c:	f7fb fd5c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x25].length);
    7040:	4bb7      	ldr	r3, [pc, #732]	; (7320 <loop+0x9a4>)
    7042:	f893 77b5 	ldrb.w	r7, [r3, #1973]	; 0x7b5
    7046:	8833      	ldrh	r3, [r6, #0]
    7048:	441f      	add	r7, r3
    704a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    704c:	463a      	mov	r2, r7
				break; // AND - ZeroPage
    704e:	e65e      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x26();
    7050:	f7fd fa0c 	bl	446c <opcode_0x26()>
    7054:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7056:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage
    7058:	e659      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x27();
    705a:	f7fe f8cd 	bl	51f8 <opcode_0x27()>
    705e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7060:	4602      	mov	r2, r0
				break; // RLA - ZeroPage
    7062:	e654      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x28();
    7064:	f7fc fc56 	bl	3914 <opcode_0x28()>
    7068:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    706a:	4602      	mov	r2, r0
				break; // PLP - Pop processor status from the stack
    706c:	e64f      	b.n	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    706e:	8830      	ldrh	r0, [r6, #0]
    7070:	2100      	movs	r1, #0
    7072:	3001      	adds	r0, #1
    7074:	b280      	uxth	r0, r0
    7076:	f7fb fa7b 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    707a:	4ba8      	ldr	r3, [pc, #672]	; (731c <loop+0x9a0>)
    707c:	781a      	ldrb	r2, [r3, #0]
    707e:	4010      	ands	r0, r2
    7080:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7082:	f7fb fd39 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x29].length);
    7086:	4ba6      	ldr	r3, [pc, #664]	; (7320 <loop+0x9a4>)
    7088:	f893 7885 	ldrb.w	r7, [r3, #2181]	; 0x885
    708c:	8833      	ldrh	r3, [r6, #0]
    708e:	441f      	add	r7, r3
    7090:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7092:	463a      	mov	r2, r7
				break; // AND - Immediate
    7094:	e63b      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x2A();
    7096:	f7fc fad3 	bl	3640 <opcode_0x2A()>
    709a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    709c:	4602      	mov	r2, r0
				break; // ROL A
    709e:	e636      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x2B();
    70a0:	f7fe ffc6 	bl	6030 <opcode_0x2B()>
    70a4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70a6:	4602      	mov	r2, r0
				break; // ANC - Immediate
    70a8:	e631      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x2C();
    70aa:	f7fc fcbb 	bl	3a24 <opcode_0x2C()>
    70ae:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70b0:	4602      	mov	r2, r0
				break; // BIT - Absolute
    70b2:	e62c      	b.n	6d0e <loop+0x392>
    register_a = register_a & (Fetch_Absolute());
    70b4:	f7fb fd94 	bl	2be0 <Fetch_Absolute()>
    70b8:	4b98      	ldr	r3, [pc, #608]	; (731c <loop+0x9a0>)
    70ba:	781a      	ldrb	r2, [r3, #0]
    70bc:	4010      	ands	r0, r2
    70be:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    70c0:	f7fb fd1a 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2D].length);
    70c4:	4b96      	ldr	r3, [pc, #600]	; (7320 <loop+0x9a4>)
    70c6:	f893 7955 	ldrb.w	r7, [r3, #2389]	; 0x955
    70ca:	8833      	ldrh	r3, [r6, #0]
    70cc:	441f      	add	r7, r3
    70ce:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    70d0:	463a      	mov	r2, r7
				break; // AND - Absolute
    70d2:	e61c      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x2E();
    70d4:	f7fd fa34 	bl	4540 <opcode_0x2E()>
    70d8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70da:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute
    70dc:	e617      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x2F();
    70de:	f7fe f96d 	bl	53bc <opcode_0x2F()>
    70e2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70e4:	4602      	mov	r2, r0
				break; // RLA - Absolute
    70e6:	e612      	b.n	6d0e <loop+0x392>
    if ((flag_n) == 1) Branch_Taken();
    70e8:	4b8e      	ldr	r3, [pc, #568]	; (7324 <loop+0x9a8>)
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	09db      	lsrs	r3, r3, #7
    70ee:	f041 8157 	bne.w	83a0 <loop+0x1a24>
    return read_byte(register_pc+offset, false);
    70f2:	8830      	ldrh	r0, [r6, #0]
    70f4:	2100      	movs	r1, #0
    70f6:	3001      	adds	r0, #1
    70f8:	b280      	uxth	r0, r0
    70fa:	f7fb fa39 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc);
    70fe:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7100:	463a      	mov	r2, r7
				break; // BMI - Branch on Minus (N Flag Set)
    7102:	e604      	b.n	6d0e <loop+0x392>
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    7104:	2001      	movs	r0, #1
    7106:	f7fb fe11 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    710a:	4b84      	ldr	r3, [pc, #528]	; (731c <loop+0x9a0>)
    710c:	781a      	ldrb	r2, [r3, #0]
    710e:	4010      	ands	r0, r2
    7110:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7112:	f7fb fcf1 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x31].length);
    7116:	4b82      	ldr	r3, [pc, #520]	; (7320 <loop+0x9a4>)
    7118:	f893 7a25 	ldrb.w	r7, [r3, #2597]	; 0xa25
    711c:	8833      	ldrh	r3, [r6, #0]
    711e:	441f      	add	r7, r3
    7120:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7122:	463a      	mov	r2, r7
				break; // AND - Indirect Indexed
    7124:	e5f3      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x53();
    7126:	f7fe fa8b 	bl	5640 <opcode_0x53()>
    712a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    712c:	4602      	mov	r2, r0
				break; // SRE - Indirect Indexed  Y
    712e:	e5ee      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    7130:	f7fb fd16 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    7134:	4b7c      	ldr	r3, [pc, #496]	; (7328 <loop+0x9ac>)
    7136:	f893 7141 	ldrb.w	r7, [r3, #321]	; 0x141
    713a:	8833      	ldrh	r3, [r6, #0]
    713c:	441f      	add	r7, r3
    713e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7140:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    7142:	e5e4      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_ZeroPage_X());
    7144:	f7fb fd0c 	bl	2b60 <Fetch_ZeroPage_X()>
    7148:	4b74      	ldr	r3, [pc, #464]	; (731c <loop+0x9a0>)
    714a:	781a      	ldrb	r2, [r3, #0]
    714c:	4050      	eors	r0, r2
    714e:	b2c0      	uxtb	r0, r0
    7150:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7152:	f7fb fcd1 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x55].length);
    7156:	4b74      	ldr	r3, [pc, #464]	; (7328 <loop+0x9ac>)
    7158:	f893 7175 	ldrb.w	r7, [r3, #373]	; 0x175
    715c:	8833      	ldrh	r3, [r6, #0]
    715e:	441f      	add	r7, r3
    7160:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7162:	463a      	mov	r2, r7
				break; // EOR - ZeroPage,X
    7164:	e5d3      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x56();
    7166:	f7fd f827 	bl	41b8 <opcode_0x56()>
    716a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    716c:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage , X
    716e:	e5ce      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x57();
    7170:	f7fe fa02 	bl	5578 <opcode_0x57()>
    7174:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7176:	4602      	mov	r2, r0
				break; // SRE - ZeroPage , X
    7178:	e5c9      	b.n	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    717a:	8830      	ldrh	r0, [r6, #0]
    717c:	2100      	movs	r1, #0
    717e:	3001      	adds	r0, #1
    7180:	b280      	uxth	r0, r0
    7182:	f7fb f9f5 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x58].length);
    7186:	4b68      	ldr	r3, [pc, #416]	; (7328 <loop+0x9ac>)
    register_flags = register_flags & 0xFB;
    7188:	4a66      	ldr	r2, [pc, #408]	; (7324 <loop+0x9a8>)
    return(register_pc + opcode_info[0x58].length);
    718a:	f893 7211 	ldrb.w	r7, [r3, #529]	; 0x211
    718e:	8833      	ldrh	r3, [r6, #0]
    7190:	441f      	add	r7, r3
    register_flags = register_flags & 0xFB;
    7192:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    7194:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xFB;
    7196:	f023 0304 	bic.w	r3, r3, #4
    719a:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    719c:	463a      	mov	r2, r7
				break; // CLI
    719e:	e5b6      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    71a0:	2001      	movs	r0, #1
    71a2:	f7fb fd69 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    71a6:	4b5d      	ldr	r3, [pc, #372]	; (731c <loop+0x9a0>)
    71a8:	781a      	ldrb	r2, [r3, #0]
    71aa:	4050      	eors	r0, r2
    71ac:	b2c0      	uxtb	r0, r0
    71ae:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    71b0:	f7fb fca2 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x59].length);
    71b4:	4b5c      	ldr	r3, [pc, #368]	; (7328 <loop+0x9ac>)
    71b6:	f893 7245 	ldrb.w	r7, [r3, #581]	; 0x245
    71ba:	8833      	ldrh	r3, [r6, #0]
    71bc:	441f      	add	r7, r3
    71be:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    71c0:	463a      	mov	r2, r7
				break; // EOR - Absolute,Y
    71c2:	e5a4      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x5B();
    71c4:	f7fe fad6 	bl	5774 <opcode_0x5B()>
    71c8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    71ca:	4602      	mov	r2, r0
				break; // RE - Absolute , Y
    71cc:	e59f      	b.n	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    71ce:	2001      	movs	r0, #1
    71d0:	f7fb fd22 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    71d4:	4b54      	ldr	r3, [pc, #336]	; (7328 <loop+0x9ac>)
    71d6:	f893 72e1 	ldrb.w	r7, [r3, #737]	; 0x2e1
    71da:	8833      	ldrh	r3, [r6, #0]
    71dc:	441f      	add	r7, r3
    71de:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    71e0:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    71e2:	e594      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_Absolute_X(1));
    71e4:	2001      	movs	r0, #1
    71e6:	f7fb fd17 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    71ea:	4b4c      	ldr	r3, [pc, #304]	; (731c <loop+0x9a0>)
    71ec:	781a      	ldrb	r2, [r3, #0]
    71ee:	4050      	eors	r0, r2
    71f0:	b2c0      	uxtb	r0, r0
    71f2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    71f4:	f7fb fc80 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x5D].length);
    71f8:	4b4b      	ldr	r3, [pc, #300]	; (7328 <loop+0x9ac>)
    71fa:	f893 7315 	ldrb.w	r7, [r3, #789]	; 0x315
    71fe:	8833      	ldrh	r3, [r6, #0]
    7200:	441f      	add	r7, r3
    7202:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7204:	463a      	mov	r2, r7
				break; // EOR - Absolute,X
    7206:	e582      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x5E();
    7208:	f7fd f830 	bl	426c <opcode_0x5E()>
    720c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    720e:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute , X
    7210:	e57d      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x5F();
    7212:	f7fe fa7b 	bl	570c <opcode_0x5F()>
    7216:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7218:	4602      	mov	r2, r0
				break; // SRE - Absolute , X
    721a:	e578      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x60();
    721c:	f7fd fdb4 	bl	4d88 <opcode_0x60()>
    7220:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7222:	4602      	mov	r2, r0
				break; // RTS - Return from Subroutine
    7224:	e573      	b.n	6d0e <loop+0x392>
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    7226:	f7fb fd57 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    722a:	b280      	uxth	r0, r0
    722c:	f7fc fa34 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    7230:	4b3d      	ldr	r3, [pc, #244]	; (7328 <loop+0x9ac>)
    7232:	f893 73e5 	ldrb.w	r7, [r3, #997]	; 0x3e5
    7236:	8833      	ldrh	r3, [r6, #0]
    7238:	441f      	add	r7, r3
    723a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    723c:	463a      	mov	r2, r7
				break; // ADC - Indexed Indirect X
    723e:	e566      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x63();
    7240:	f7fe fb32 	bl	58a8 <opcode_0x63()>
    7244:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7246:	4602      	mov	r2, r0
				break; // RRA - Indexed Indirect X
    7248:	e561      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage();
    724a:	f7fb fc75 	bl	2b38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    724e:	4b36      	ldr	r3, [pc, #216]	; (7328 <loop+0x9ac>)
    7250:	f893 7481 	ldrb.w	r7, [r3, #1153]	; 0x481
    7254:	8833      	ldrh	r3, [r6, #0]
    7256:	441f      	add	r7, r3
    7258:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    725a:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    725c:	e557      	b.n	6d0e <loop+0x392>
    Calculate_ADC(Fetch_ZeroPage());
    725e:	f7fb fc6b 	bl	2b38 <Fetch_ZeroPage()>
    7262:	b280      	uxth	r0, r0
    7264:	f7fc fa18 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    7268:	4b2f      	ldr	r3, [pc, #188]	; (7328 <loop+0x9ac>)
    726a:	f893 74b5 	ldrb.w	r7, [r3, #1205]	; 0x4b5
    726e:	8833      	ldrh	r3, [r6, #0]
    7270:	441f      	add	r7, r3
    7272:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7274:	463a      	mov	r2, r7
				break; // ADC - ZeroPage
    7276:	e54a      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x66();
    7278:	f7fd f826 	bl	42c8 <opcode_0x66()>
    727c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    727e:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage
    7280:	e545      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x67();
    7282:	f7fe faab 	bl	57dc <opcode_0x67()>
    7286:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7288:	4602      	mov	r2, r0
				break; // RRA - ZeroPage
    728a:	e540      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x68();
    728c:	f7fc fb6e 	bl	396c <opcode_0x68()>
    7290:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7292:	4602      	mov	r2, r0
				break; // PLA - Pop Accumulator from the stack
    7294:	e53b      	b.n	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7296:	8830      	ldrh	r0, [r6, #0]
    7298:	2100      	movs	r1, #0
    729a:	3001      	adds	r0, #1
    729c:	b280      	uxth	r0, r0
    729e:	f7fb f967 	bl	2570 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    72a2:	b280      	uxth	r0, r0
    72a4:	f7fc f9f8 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    72a8:	4b1f      	ldr	r3, [pc, #124]	; (7328 <loop+0x9ac>)
    72aa:	f893 7585 	ldrb.w	r7, [r3, #1413]	; 0x585
    72ae:	8833      	ldrh	r3, [r6, #0]
    72b0:	441f      	add	r7, r3
    72b2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    72b4:	463a      	mov	r2, r7
				break; // ADC - Immediate
    72b6:	e52a      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x6A();
    72b8:	f7fc f998 	bl	35ec <opcode_0x6A()>
    72bc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72be:	4602      	mov	r2, r0
				break; // ROR A
    72c0:	e525      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x6B();
    72c2:	f7fe ff05 	bl	60d0 <opcode_0x6B()>
    72c6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72c8:	4602      	mov	r2, r0
				break; // ARR - Immediate
    72ca:	e520      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x6C();
    72cc:	f7fd fb0a 	bl	48e4 <opcode_0x6C()>
    72d0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72d2:	4602      	mov	r2, r0
				break; // JMP - Jump Indirect
    72d4:	e51b      	b.n	6d0e <loop+0x392>
    Calculate_ADC(Fetch_Absolute());
    72d6:	f7fb fc83 	bl	2be0 <Fetch_Absolute()>
    72da:	b280      	uxth	r0, r0
    72dc:	f7fc f9dc 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    72e0:	4b11      	ldr	r3, [pc, #68]	; (7328 <loop+0x9ac>)
    72e2:	f893 7655 	ldrb.w	r7, [r3, #1621]	; 0x655
    72e6:	8833      	ldrh	r3, [r6, #0]
    72e8:	441f      	add	r7, r3
    72ea:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    72ec:	463a      	mov	r2, r7
				break; // ADC - Absolute
    72ee:	e50e      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x6E();
    72f0:	f7fd f858 	bl	43a4 <opcode_0x6E()>
    72f4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72f6:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute
    72f8:	e509      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x6F();
    72fa:	f7fe fb33 	bl	5964 <opcode_0x6F()>
    72fe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7300:	4602      	mov	r2, r0
				break; // RRA - Absolute
    7302:	e504      	b.n	6d0e <loop+0x392>
    if ((flag_v) == 1) Branch_Taken();
    7304:	4b07      	ldr	r3, [pc, #28]	; (7324 <loop+0x9a8>)
    7306:	7819      	ldrb	r1, [r3, #0]
    7308:	f011 0140 	ands.w	r1, r1, #64	; 0x40
    730c:	f001 801f 	beq.w	834e <loop+0x19d2>
    7310:	f7fd f978 	bl	4604 <Branch_Taken()>
    return(register_pc);
    7314:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7316:	463a      	mov	r2, r7
				break; // BVS - Branch on Overflow Set
    7318:	e4f9      	b.n	6d0e <loop+0x392>
    731a:	bf00      	nop
    731c:	2001889f 	.word	0x2001889f
    7320:	20015418 	.word	0x20015418
    7324:	20004968 	.word	0x20004968
    7328:	20016418 	.word	0x20016418
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    732c:	2001      	movs	r0, #1
    732e:	f7fb fcfd 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7332:	b280      	uxth	r0, r0
    7334:	f7fc f9b0 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    7338:	4bc3      	ldr	r3, [pc, #780]	; (7648 <loop+0xccc>)
    733a:	f893 7725 	ldrb.w	r7, [r3, #1829]	; 0x725
    733e:	8833      	ldrh	r3, [r6, #0]
    7340:	441f      	add	r7, r3
    7342:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7344:	463a      	mov	r2, r7
				break; // ADC - Indirect Indexed  Y
    7346:	e4e2      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    7348:	f7fb fc0a 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    734c:	4bbe      	ldr	r3, [pc, #760]	; (7648 <loop+0xccc>)
    734e:	f893 77c1 	ldrb.w	r7, [r3, #1985]	; 0x7c1
    7352:	8833      	ldrh	r3, [r6, #0]
    7354:	441f      	add	r7, r3
    7356:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7358:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    735a:	e4d8      	b.n	6d0e <loop+0x392>
    Calculate_ADC(Fetch_ZeroPage_X());
    735c:	f7fb fc00 	bl	2b60 <Fetch_ZeroPage_X()>
    7360:	b280      	uxth	r0, r0
    7362:	f7fc f999 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    7366:	4bb8      	ldr	r3, [pc, #736]	; (7648 <loop+0xccc>)
    7368:	f893 77f5 	ldrb.w	r7, [r3, #2037]	; 0x7f5
    736c:	8833      	ldrh	r3, [r6, #0]
    736e:	441f      	add	r7, r3
    7370:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7372:	463a      	mov	r2, r7
				break; // ADC - ZeroPage , X
    7374:	e4cb      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x73();
    7376:	f7fe fac5 	bl	5904 <opcode_0x73()>
    737a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    737c:	4602      	mov	r2, r0
				break; // RRA - Indirect Indexed  Y
    737e:	e4c6      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    7380:	f7fb fcaa 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    7384:	4bb1      	ldr	r3, [pc, #708]	; (764c <loop+0xcd0>)
    7386:	781a      	ldrb	r2, [r3, #0]
    7388:	4050      	eors	r0, r2
    738a:	b2c0      	uxtb	r0, r0
    738c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    738e:	f7fb fbb3 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x41].length);
    7392:	4baf      	ldr	r3, [pc, #700]	; (7650 <loop+0xcd4>)
    7394:	f893 7d65 	ldrb.w	r7, [r3, #3429]	; 0xd65
    7398:	8833      	ldrh	r3, [r6, #0]
    739a:	441f      	add	r7, r3
    739c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    739e:	463a      	mov	r2, r7
				break; // EOR - Indexed Indirect X
    73a0:	e4b5      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x43();
    73a2:	f7fe f91b 	bl	55dc <opcode_0x43()>
    73a6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    73a8:	4602      	mov	r2, r0
				break; // SRE - Indexed Indirect X
    73aa:	e4b0      	b.n	6d0e <loop+0x392>
    Fetch_ZeroPage();
    73ac:	f7fb fbc4 	bl	2b38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    73b0:	4ba7      	ldr	r3, [pc, #668]	; (7650 <loop+0xcd4>)
    73b2:	f893 7e01 	ldrb.w	r7, [r3, #3585]	; 0xe01
    73b6:	8833      	ldrh	r3, [r6, #0]
    73b8:	441f      	add	r7, r3
    73ba:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    73bc:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    73be:	e4a6      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_ZeroPage());
    73c0:	f7fb fbba 	bl	2b38 <Fetch_ZeroPage()>
    73c4:	4ba1      	ldr	r3, [pc, #644]	; (764c <loop+0xcd0>)
    73c6:	781a      	ldrb	r2, [r3, #0]
    73c8:	4050      	eors	r0, r2
    73ca:	b2c0      	uxtb	r0, r0
    73cc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    73ce:	f7fb fb93 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x45].length);
    73d2:	4b9f      	ldr	r3, [pc, #636]	; (7650 <loop+0xcd4>)
    73d4:	f893 7e35 	ldrb.w	r7, [r3, #3637]	; 0xe35
    73d8:	8833      	ldrh	r3, [r6, #0]
    73da:	441f      	add	r7, r3
    73dc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    73de:	463a      	mov	r2, r7
				break; // EOR - ZeroPage
    73e0:	e495      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x46();
    73e2:	f7fc feb3 	bl	414c <opcode_0x46()>
    73e6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    73e8:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage
    73ea:	e490      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x47();
    73ec:	f7fe f888 	bl	5500 <opcode_0x47()>
    73f0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    73f2:	4602      	mov	r2, r0
				break; // SRE - ZeroPage
    73f4:	e48b      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x48();
    73f6:	f7fc fa6b 	bl	38d0 <opcode_0x48()>
    73fa:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    73fc:	4602      	mov	r2, r0
				break; // PHA - Push Accumulator to the stack
    73fe:	e486      	b.n	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7400:	8830      	ldrh	r0, [r6, #0]
    7402:	2100      	movs	r1, #0
    7404:	3001      	adds	r0, #1
    7406:	b280      	uxth	r0, r0
    7408:	f7fb f8b2 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    740c:	4b8f      	ldr	r3, [pc, #572]	; (764c <loop+0xcd0>)
    740e:	781a      	ldrb	r2, [r3, #0]
    7410:	4050      	eors	r0, r2
    7412:	b2c0      	uxtb	r0, r0
    7414:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7416:	f7fb fb6f 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x49].length);
    741a:	4b8d      	ldr	r3, [pc, #564]	; (7650 <loop+0xcd4>)
    741c:	f893 7f05 	ldrb.w	r7, [r3, #3845]	; 0xf05
    7420:	8833      	ldrh	r3, [r6, #0]
    7422:	441f      	add	r7, r3
    7424:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7426:	463a      	mov	r2, r7
				break; // EOR - Immediate
    7428:	e471      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x4A();
    742a:	f7fc f8b9 	bl	35a0 <opcode_0x4A()>
    742e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7430:	4602      	mov	r2, r0
				break; // LSR A
    7432:	e46c      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x4B();
    7434:	f7fe fe22 	bl	607c <opcode_0x4B()>
    7438:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    743a:	4602      	mov	r2, r0
				break; // ALR - Immediate
    743c:	e467      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x4C();
    743e:	f7fd f9a1 	bl	4784 <opcode_0x4C()>
    7442:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7444:	4602      	mov	r2, r0
				break; // JMP - Jump Absolute
    7446:	e462      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_Absolute());
    7448:	f7fb fbca 	bl	2be0 <Fetch_Absolute()>
    744c:	4b7f      	ldr	r3, [pc, #508]	; (764c <loop+0xcd0>)
    744e:	781a      	ldrb	r2, [r3, #0]
    7450:	4050      	eors	r0, r2
    7452:	b2c0      	uxtb	r0, r0
    7454:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7456:	f7fb fb4f 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4D].length);
    745a:	4b7d      	ldr	r3, [pc, #500]	; (7650 <loop+0xcd4>)
    745c:	f893 7fd5 	ldrb.w	r7, [r3, #4053]	; 0xfd5
    7460:	8833      	ldrh	r3, [r6, #0]
    7462:	441f      	add	r7, r3
    7464:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7466:	463a      	mov	r2, r7
				break; // EOR - Absolute
    7468:	e451      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x4E();
    746a:	f7fc fed3 	bl	4214 <opcode_0x4E()>
    746e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7470:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute
    7472:	e44c      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x4F();
    7474:	f7fe f918 	bl	56a8 <opcode_0x4F()>
    7478:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    747a:	4602      	mov	r2, r0
				break; // SRE - Absolute
    747c:	e447      	b.n	6d0e <loop+0x392>
    if ((flag_v) == 0) Branch_Taken();
    747e:	4b75      	ldr	r3, [pc, #468]	; (7654 <loop+0xcd8>)
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	0659      	lsls	r1, r3, #25
    7484:	f100 876a 	bmi.w	835c <loop+0x19e0>
    7488:	f7fd f8bc 	bl	4604 <Branch_Taken()>
    return(register_pc);
    748c:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    748e:	463a      	mov	r2, r7
				break; // BVC - Branch on Overflow Clear
    7490:	e43d      	b.n	6d0e <loop+0x392>
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    7492:	2001      	movs	r0, #1
    7494:	f7fb fc4a 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7498:	4b6c      	ldr	r3, [pc, #432]	; (764c <loop+0xcd0>)
    749a:	781a      	ldrb	r2, [r3, #0]
    749c:	4050      	eors	r0, r2
    749e:	b2c0      	uxtb	r0, r0
    74a0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    74a2:	f7fb fb29 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x51].length);
    74a6:	4b68      	ldr	r3, [pc, #416]	; (7648 <loop+0xccc>)
    74a8:	f893 70a5 	ldrb.w	r7, [r3, #165]	; 0xa5
    74ac:	8833      	ldrh	r3, [r6, #0]
    74ae:	441f      	add	r7, r3
    74b0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    74b2:	463a      	mov	r2, r7
				break; // EOR - Indirect Indexed  Y
    74b4:	e42b      	b.n	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    74b6:	8830      	ldrh	r0, [r6, #0]
    74b8:	2100      	movs	r1, #0
    74ba:	3001      	adds	r0, #1
    74bc:	b280      	uxth	r0, r0
    74be:	f7fb f857 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x38].length);
    74c2:	4b63      	ldr	r3, [pc, #396]	; (7650 <loop+0xcd4>)
    register_flags = register_flags | 0x01;
    74c4:	4a63      	ldr	r2, [pc, #396]	; (7654 <loop+0xcd8>)
    return(register_pc + opcode_info[0x38].length);
    74c6:	f893 7b91 	ldrb.w	r7, [r3, #2961]	; 0xb91
    74ca:	8833      	ldrh	r3, [r6, #0]
    74cc:	441f      	add	r7, r3
    register_flags = register_flags | 0x01;
    74ce:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    74d0:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x01;
    74d2:	f043 0301 	orr.w	r3, r3, #1
    74d6:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    74d8:	463a      	mov	r2, r7
				break; // SEC
    74da:	e418      	b.n	6d0e <loop+0x392>
    register_a = register_a & (Fetch_Absolute_Y(1));
    74dc:	2001      	movs	r0, #1
    74de:	f7fb fbcb 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    74e2:	4b5a      	ldr	r3, [pc, #360]	; (764c <loop+0xcd0>)
    74e4:	781a      	ldrb	r2, [r3, #0]
    74e6:	4010      	ands	r0, r2
    74e8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    74ea:	f7fb fb05 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x39].length);
    74ee:	4b58      	ldr	r3, [pc, #352]	; (7650 <loop+0xcd4>)
    74f0:	f893 7bc5 	ldrb.w	r7, [r3, #3013]	; 0xbc5
    74f4:	8833      	ldrh	r3, [r6, #0]
    74f6:	441f      	add	r7, r3
    74f8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    74fa:	463a      	mov	r2, r7
				break; // AND - Absolute,Y
    74fc:	e407      	b.n	6d0e <loop+0x392>
				next_pc = opcode_0x3B();
    74fe:	f7fd ffc9 	bl	5494 <opcode_0x3B()>
    7502:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7504:	4602      	mov	r2, r0
				break; // RLA - Absolute , Y
    7506:	e402      	b.n	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    7508:	2001      	movs	r0, #1
    750a:	f7fb fb85 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    750e:	4b50      	ldr	r3, [pc, #320]	; (7650 <loop+0xcd4>)
    7510:	f893 7c61 	ldrb.w	r7, [r3, #3169]	; 0xc61
    7514:	8833      	ldrh	r3, [r6, #0]
    7516:	441f      	add	r7, r3
    7518:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    751a:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    751c:	f7ff bbf7 	b.w	6d0e <loop+0x392>
    register_a = register_a & (Fetch_Absolute_X(1));
    7520:	2001      	movs	r0, #1
    7522:	f7fb fb79 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    7526:	4b49      	ldr	r3, [pc, #292]	; (764c <loop+0xcd0>)
    7528:	781a      	ldrb	r2, [r3, #0]
    752a:	4010      	ands	r0, r2
    752c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    752e:	f7fb fae3 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x3D].length);
    7532:	4b47      	ldr	r3, [pc, #284]	; (7650 <loop+0xcd4>)
    7534:	f893 7c95 	ldrb.w	r7, [r3, #3221]	; 0xc95
    7538:	8833      	ldrh	r3, [r6, #0]
    753a:	441f      	add	r7, r3
    753c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    753e:	463a      	mov	r2, r7
				break; // AND - Absolute,X
    7540:	f7ff bbe5 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x3E();
    7544:	f7fd f82c 	bl	45a0 <opcode_0x3E()>
    7548:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    754a:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute , X
    754c:	f7ff bbdf 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x3F();
    7550:	f7fd ff6a 	bl	5428 <opcode_0x3F()>
    7554:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7556:	4602      	mov	r2, r0
				break; // RLA - Absolute , X
    7558:	f7ff bbd9 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x40();
    755c:	f7fd fb48 	bl	4bf0 <opcode_0x40()>
    7560:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7562:	4602      	mov	r2, r0
				break; // RTI - Return from Interrupt
    7564:	f7ff bbd3 	b.w	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    7568:	f7fb fafa 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    756c:	4b38      	ldr	r3, [pc, #224]	; (7650 <loop+0xcd4>)
    756e:	f893 7ac1 	ldrb.w	r7, [r3, #2753]	; 0xac1
    7572:	8833      	ldrh	r3, [r6, #0]
    7574:	441f      	add	r7, r3
    7576:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7578:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    757a:	f7ff bbc8 	b.w	6d0e <loop+0x392>
    register_a = register_a & (Fetch_ZeroPage_X());
    757e:	f7fb faef 	bl	2b60 <Fetch_ZeroPage_X()>
    7582:	4b32      	ldr	r3, [pc, #200]	; (764c <loop+0xcd0>)
    7584:	781a      	ldrb	r2, [r3, #0]
    7586:	4010      	ands	r0, r2
    7588:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    758a:	f7fb fab5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x35].length);
    758e:	4b30      	ldr	r3, [pc, #192]	; (7650 <loop+0xcd4>)
    7590:	f893 7af5 	ldrb.w	r7, [r3, #2805]	; 0xaf5
    7594:	8833      	ldrh	r3, [r6, #0]
    7596:	441f      	add	r7, r3
    7598:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    759a:	463a      	mov	r2, r7
				break; // AND - ZeroPage,X
    759c:	f7ff bbb7 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x36();
    75a0:	f7fc ff9e 	bl	44e0 <opcode_0x36()>
    75a4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75a6:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage , X
    75a8:	f7ff bbb1 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x37();
    75ac:	f7fd fe64 	bl	5278 <opcode_0x37()>
    75b0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75b2:	4602      	mov	r2, r0
				break; // RLA - ZeroPage , X
    75b4:	f7ff bbab 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x33();
    75b8:	f7fd feca 	bl	5350 <opcode_0x33()>
    75bc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75be:	4602      	mov	r2, r0
				break; // RLA - Indirect Indexed  Y
    75c0:	f7ff bba5 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x76();
    75c4:	f7fc febc 	bl	4340 <opcode_0x76()>
    75c8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75ca:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage , X
    75cc:	f7ff bb9f 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x77();
    75d0:	f7fe f93c 	bl	584c <opcode_0x77()>
    75d4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75d6:	4602      	mov	r2, r0
				break; // RRA - ZeroPage , X
    75d8:	f7ff bb99 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    75dc:	8830      	ldrh	r0, [r6, #0]
    75de:	2100      	movs	r1, #0
    75e0:	3001      	adds	r0, #1
    75e2:	b280      	uxth	r0, r0
    75e4:	f7fa ffc4 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x78].length);
    75e8:	4b17      	ldr	r3, [pc, #92]	; (7648 <loop+0xccc>)
    register_flags = register_flags | 0x04;
    75ea:	4a1a      	ldr	r2, [pc, #104]	; (7654 <loop+0xcd8>)
    return(register_pc + opcode_info[0x78].length);
    75ec:	f893 7891 	ldrb.w	r7, [r3, #2193]	; 0x891
    75f0:	8833      	ldrh	r3, [r6, #0]
    75f2:	441f      	add	r7, r3
    register_flags = register_flags | 0x04;
    75f4:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    75f6:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x04;
    75f8:	f043 0304 	orr.w	r3, r3, #4
    75fc:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    75fe:	463a      	mov	r2, r7
				break; // SEI
    7600:	f7ff bb85 	b.w	6d0e <loop+0x392>
    Calculate_ADC(Fetch_Absolute_Y(1));
    7604:	2001      	movs	r0, #1
    7606:	f7fb fb37 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    760a:	b280      	uxth	r0, r0
    760c:	f7fc f844 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    7610:	4b0d      	ldr	r3, [pc, #52]	; (7648 <loop+0xccc>)
    7612:	f893 78c5 	ldrb.w	r7, [r3, #2245]	; 0x8c5
    7616:	8833      	ldrh	r3, [r6, #0]
    7618:	441f      	add	r7, r3
    761a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    761c:	463a      	mov	r2, r7
				break; // ADC - Absolute , Y
    761e:	f7ff bb76 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x7B();
    7622:	f7fe f9fd 	bl	5a20 <opcode_0x7B()>
    7626:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7628:	4602      	mov	r2, r0
				break; // RRA - Absolute , Y
    762a:	f7ff bb70 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    762e:	2001      	movs	r0, #1
    7630:	f7fb faf2 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    7634:	4b04      	ldr	r3, [pc, #16]	; (7648 <loop+0xccc>)
    7636:	f893 7961 	ldrb.w	r7, [r3, #2401]	; 0x961
    763a:	8833      	ldrh	r3, [r6, #0]
    763c:	441f      	add	r7, r3
    763e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7640:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    7642:	f7ff bb64 	b.w	6d0e <loop+0x392>
    7646:	bf00      	nop
    7648:	20016418 	.word	0x20016418
    764c:	2001889f 	.word	0x2001889f
    7650:	20015418 	.word	0x20015418
    7654:	20004968 	.word	0x20004968
    Calculate_ADC(Fetch_Absolute_X(1));
    7658:	2001      	movs	r0, #1
    765a:	f7fb fadd 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    765e:	b280      	uxth	r0, r0
    7660:	f7fc f81a 	bl	3698 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    7664:	4bb6      	ldr	r3, [pc, #728]	; (7940 <loop+0xfc4>)
    7666:	f893 7995 	ldrb.w	r7, [r3, #2453]	; 0x995
    766a:	8833      	ldrh	r3, [r6, #0]
    766c:	441f      	add	r7, r3
    766e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7670:	463a      	mov	r2, r7
				break; // ADC - Absolute , X
    7672:	f7ff bb4c 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x7E();
    7676:	f7fc fec7 	bl	4408 <opcode_0x7E()>
    767a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    767c:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute , X
    767e:	f7ff bb46 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0x7F();
    7682:	f7fe f99d 	bl	59c0 <opcode_0x7F()>
    7686:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7688:	4602      	mov	r2, r0
				break; // RRA - Absolute , X
    768a:	f7ff bb40 	b.w	6d0e <loop+0x392>
    Fetch_Immediate(1);
    768e:	2001      	movs	r0, #1
    7690:	f7fb fa46 	bl	2b20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    7694:	4baa      	ldr	r3, [pc, #680]	; (7940 <loop+0xfc4>)
    7696:	f893 7a31 	ldrb.w	r7, [r3, #2609]	; 0xa31
    769a:	8833      	ldrh	r3, [r6, #0]
    769c:	441f      	add	r7, r3
    769e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76a0:	463a      	mov	r2, r7
				break; // NOP - Immediate
    76a2:	f7ff bb34 	b.w	6d0e <loop+0x392>
    Write_Indexed_Indirect_X(register_a);
    76a6:	4ba7      	ldr	r3, [pc, #668]	; (7944 <loop+0xfc8>)
    76a8:	7818      	ldrb	r0, [r3, #0]
    76aa:	f7fb fc27 	bl	2efc <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x81].length);
    76ae:	4ba4      	ldr	r3, [pc, #656]	; (7940 <loop+0xfc4>)
    76b0:	f893 7a65 	ldrb.w	r7, [r3, #2661]	; 0xa65
    76b4:	8833      	ldrh	r3, [r6, #0]
    76b6:	441f      	add	r7, r3
    76b8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76ba:	463a      	mov	r2, r7
				break; // STA - Indexed Indirect X
    76bc:	f7ff bb27 	b.w	6d0e <loop+0x392>
    Fetch_Immediate(1);
    76c0:	2001      	movs	r0, #1
    76c2:	f7fb fa2d 	bl	2b20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    76c6:	4b9e      	ldr	r3, [pc, #632]	; (7940 <loop+0xfc4>)
    76c8:	f893 7a99 	ldrb.w	r7, [r3, #2713]	; 0xa99
    76cc:	8833      	ldrh	r3, [r6, #0]
    76ce:	441f      	add	r7, r3
    76d0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76d2:	463a      	mov	r2, r7
				break; // NOP - Immediate
    76d4:	f7ff bb1b 	b.w	6d0e <loop+0x392>
    Write_Indexed_Indirect_X(register_a & register_x);
    76d8:	4b9a      	ldr	r3, [pc, #616]	; (7944 <loop+0xfc8>)
    76da:	7818      	ldrb	r0, [r3, #0]
    76dc:	4b9a      	ldr	r3, [pc, #616]	; (7948 <loop+0xfcc>)
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	4018      	ands	r0, r3
    76e2:	f7fb fc0b 	bl	2efc <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x83].length);
    76e6:	4b96      	ldr	r3, [pc, #600]	; (7940 <loop+0xfc4>)
    76e8:	f893 7acd 	ldrb.w	r7, [r3, #2765]	; 0xacd
    76ec:	8833      	ldrh	r3, [r6, #0]
    76ee:	441f      	add	r7, r3
    76f0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76f2:	463a      	mov	r2, r7
				break; // SAX - Indexed Indirect X
    76f4:	f7ff bb0b 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    76f8:	8830      	ldrh	r0, [r6, #0]
    76fa:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    76fc:	4b93      	ldr	r3, [pc, #588]	; (794c <loop+0xfd0>)
    76fe:	3001      	adds	r0, #1
    7700:	781c      	ldrb	r4, [r3, #0]
    7702:	b280      	uxth	r0, r0
    7704:	f7fa ff34 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7708:	4b91      	ldr	r3, [pc, #580]	; (7950 <loop+0xfd4>)
    770a:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    770c:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    770e:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7710:	f7fb f8ea 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x84].length);
    7714:	4b8a      	ldr	r3, [pc, #552]	; (7940 <loop+0xfc4>)
    7716:	f893 7b01 	ldrb.w	r7, [r3, #2817]	; 0xb01
    771a:	8833      	ldrh	r3, [r6, #0]
    771c:	441f      	add	r7, r3
    771e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7720:	463a      	mov	r2, r7
				break; // STY - ZeroPage
    7722:	f7ff baf4 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7726:	8830      	ldrh	r0, [r6, #0]
    7728:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    772a:	4b86      	ldr	r3, [pc, #536]	; (7944 <loop+0xfc8>)
    772c:	3001      	adds	r0, #1
    772e:	781c      	ldrb	r4, [r3, #0]
    7730:	b280      	uxth	r0, r0
    7732:	f7fa ff1d 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7736:	4b86      	ldr	r3, [pc, #536]	; (7950 <loop+0xfd4>)
    7738:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    773a:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    773c:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    773e:	f7fb f8d3 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x85].length);
    7742:	4b7f      	ldr	r3, [pc, #508]	; (7940 <loop+0xfc4>)
    7744:	f893 7b35 	ldrb.w	r7, [r3, #2869]	; 0xb35
    7748:	8833      	ldrh	r3, [r6, #0]
    774a:	441f      	add	r7, r3
    774c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    774e:	463a      	mov	r2, r7
				break; // STA - ZeroPage
    7750:	f7ff badd 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7754:	8830      	ldrh	r0, [r6, #0]
    7756:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    7758:	4b7b      	ldr	r3, [pc, #492]	; (7948 <loop+0xfcc>)
    775a:	3001      	adds	r0, #1
    775c:	781c      	ldrb	r4, [r3, #0]
    775e:	b280      	uxth	r0, r0
    7760:	f7fa ff06 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7764:	4b7a      	ldr	r3, [pc, #488]	; (7950 <loop+0xfd4>)
    7766:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7768:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    776a:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    776c:	f7fb f8bc 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x86].length);
    7770:	4b73      	ldr	r3, [pc, #460]	; (7940 <loop+0xfc4>)
    7772:	f893 7b69 	ldrb.w	r7, [r3, #2921]	; 0xb69
    7776:	8833      	ldrh	r3, [r6, #0]
    7778:	441f      	add	r7, r3
    777a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    777c:	463a      	mov	r2, r7
				break; // STX - ZeroPage
    777e:	f7ff bac6 	b.w	6d0e <loop+0x392>
    Write_ZeroPage(register_a & register_x);
    7782:	4b70      	ldr	r3, [pc, #448]	; (7944 <loop+0xfc8>)
    return read_byte(register_pc+offset, false);
    7784:	2100      	movs	r1, #0
    7786:	8830      	ldrh	r0, [r6, #0]
    7788:	781c      	ldrb	r4, [r3, #0]
    778a:	4b6f      	ldr	r3, [pc, #444]	; (7948 <loop+0xfcc>)
    778c:	3001      	adds	r0, #1
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	b280      	uxth	r0, r0
    7792:	401c      	ands	r4, r3
    7794:	f7fa feec 	bl	2570 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7798:	4b6d      	ldr	r3, [pc, #436]	; (7950 <loop+0xfd4>)
    779a:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    779c:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    779e:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    77a0:	f7fb f8a2 	bl	28e8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x87].length);
    77a4:	4b66      	ldr	r3, [pc, #408]	; (7940 <loop+0xfc4>)
    77a6:	f893 7b9d 	ldrb.w	r7, [r3, #2973]	; 0xb9d
    77aa:	8833      	ldrh	r3, [r6, #0]
    77ac:	441f      	add	r7, r3
    77ae:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77b0:	463a      	mov	r2, r7
				break; // SAX - ZeroPage
    77b2:	f7ff baac 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    77b6:	8830      	ldrh	r0, [r6, #0]
    77b8:	2100      	movs	r1, #0
    77ba:	3001      	adds	r0, #1
    77bc:	b280      	uxth	r0, r0
    77be:	f7fa fed7 	bl	2570 <read_byte(unsigned short, bool)>
    register_y = register_y - 1;
    77c2:	4b62      	ldr	r3, [pc, #392]	; (794c <loop+0xfd0>)
    77c4:	7818      	ldrb	r0, [r3, #0]
    77c6:	3801      	subs	r0, #1
    77c8:	b2c0      	uxtb	r0, r0
    77ca:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    77cc:	f7fb f994 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x88].length);
    77d0:	4b5b      	ldr	r3, [pc, #364]	; (7940 <loop+0xfc4>)
    77d2:	f893 7bd1 	ldrb.w	r7, [r3, #3025]	; 0xbd1
    77d6:	8833      	ldrh	r3, [r6, #0]
    77d8:	441f      	add	r7, r3
    77da:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77dc:	463a      	mov	r2, r7
				break; // DEY
    77de:	f7ff ba96 	b.w	6d0e <loop+0x392>
    Fetch_Immediate(1);
    77e2:	2001      	movs	r0, #1
    77e4:	f7fb f99c 	bl	2b20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    77e8:	4b55      	ldr	r3, [pc, #340]	; (7940 <loop+0xfc4>)
    77ea:	f893 7c05 	ldrb.w	r7, [r3, #3077]	; 0xc05
    77ee:	8833      	ldrh	r3, [r6, #0]
    77f0:	441f      	add	r7, r3
    77f2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77f4:	463a      	mov	r2, r7
				break; // NOP - Immediate
    77f6:	f7ff ba8a 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    77fa:	8830      	ldrh	r0, [r6, #0]
    77fc:	2100      	movs	r1, #0
    77fe:	3001      	adds	r0, #1
    7800:	b280      	uxth	r0, r0
    7802:	f7fa feb5 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_x;
    7806:	4b50      	ldr	r3, [pc, #320]	; (7948 <loop+0xfcc>)
    7808:	7818      	ldrb	r0, [r3, #0]
    780a:	4b4e      	ldr	r3, [pc, #312]	; (7944 <loop+0xfc8>)
    780c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    780e:	f7fb f973 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x8A].length);
    7812:	4b4b      	ldr	r3, [pc, #300]	; (7940 <loop+0xfc4>)
    7814:	f893 7c39 	ldrb.w	r7, [r3, #3129]	; 0xc39
    7818:	8833      	ldrh	r3, [r6, #0]
    781a:	441f      	add	r7, r3
    781c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    781e:	463a      	mov	r2, r7
				break; // TXA
    7820:	f7ff ba75 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    7824:	2001      	movs	r0, #1
    7826:	f7fb f97b 	bl	2b20 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    782a:	4b45      	ldr	r3, [pc, #276]	; (7940 <loop+0xfc4>)
    782c:	f893 7c6d 	ldrb.w	r7, [r3, #3181]	; 0xc6d
    7830:	8833      	ldrh	r3, [r6, #0]
    7832:	441f      	add	r7, r3
    7834:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7836:	463a      	mov	r2, r7
				break; // ANE - Immediate
    7838:	f7ff ba69 	b.w	6d0e <loop+0x392>
    Write_Absolute(register_y);
    783c:	4b43      	ldr	r3, [pc, #268]	; (794c <loop+0xfd0>)
    783e:	7818      	ldrb	r0, [r3, #0]
    7840:	f7fb faa8 	bl	2d94 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8C].length);
    7844:	4b3e      	ldr	r3, [pc, #248]	; (7940 <loop+0xfc4>)
    7846:	f893 7ca1 	ldrb.w	r7, [r3, #3233]	; 0xca1
    784a:	8833      	ldrh	r3, [r6, #0]
    784c:	441f      	add	r7, r3
    784e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7850:	463a      	mov	r2, r7
				break; // STY - Absolute
    7852:	f7ff ba5c 	b.w	6d0e <loop+0x392>
    Write_Absolute(register_a);
    7856:	4b3b      	ldr	r3, [pc, #236]	; (7944 <loop+0xfc8>)
    7858:	7818      	ldrb	r0, [r3, #0]
    785a:	f7fb fa9b 	bl	2d94 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8D].length);
    785e:	4b38      	ldr	r3, [pc, #224]	; (7940 <loop+0xfc4>)
    7860:	f893 7cd5 	ldrb.w	r7, [r3, #3285]	; 0xcd5
    7864:	8833      	ldrh	r3, [r6, #0]
    7866:	441f      	add	r7, r3
    7868:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    786a:	463a      	mov	r2, r7
				break; // STA - Absolute
    786c:	f7ff ba4f 	b.w	6d0e <loop+0x392>
    Write_Absolute(register_x);
    7870:	4b35      	ldr	r3, [pc, #212]	; (7948 <loop+0xfcc>)
    7872:	7818      	ldrb	r0, [r3, #0]
    7874:	f7fb fa8e 	bl	2d94 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8E].length);
    7878:	4b31      	ldr	r3, [pc, #196]	; (7940 <loop+0xfc4>)
    787a:	f893 7d09 	ldrb.w	r7, [r3, #3337]	; 0xd09
    787e:	8833      	ldrh	r3, [r6, #0]
    7880:	441f      	add	r7, r3
    7882:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7884:	463a      	mov	r2, r7
				break; // STX - Absolute
    7886:	f7ff ba42 	b.w	6d0e <loop+0x392>
    Write_Absolute(register_a & register_x);
    788a:	4b2e      	ldr	r3, [pc, #184]	; (7944 <loop+0xfc8>)
    788c:	7818      	ldrb	r0, [r3, #0]
    788e:	4b2e      	ldr	r3, [pc, #184]	; (7948 <loop+0xfcc>)
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	4018      	ands	r0, r3
    7894:	f7fb fa7e 	bl	2d94 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8F].length);
    7898:	4b29      	ldr	r3, [pc, #164]	; (7940 <loop+0xfc4>)
    789a:	f893 7d3d 	ldrb.w	r7, [r3, #3389]	; 0xd3d
    789e:	8833      	ldrh	r3, [r6, #0]
    78a0:	441f      	add	r7, r3
    78a2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78a4:	463a      	mov	r2, r7
				break; // SAX - Absolute
    78a6:	f7ff ba32 	b.w	6d0e <loop+0x392>
    if ((flag_c) == 0) Branch_Taken();
    78aa:	4b2a      	ldr	r3, [pc, #168]	; (7954 <loop+0xfd8>)
    78ac:	781b      	ldrb	r3, [r3, #0]
    78ae:	07da      	lsls	r2, r3, #31
    78b0:	f100 8569 	bmi.w	8386 <loop+0x1a0a>
    78b4:	f7fc fea6 	bl	4604 <Branch_Taken()>
    return(register_pc);
    78b8:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    78ba:	463a      	mov	r2, r7
				break; // BCC - Branch on Carry Clear
    78bc:	f7ff ba27 	b.w	6d0e <loop+0x392>
    Write_Indexed_Indirect_Y(register_a);
    78c0:	4b20      	ldr	r3, [pc, #128]	; (7944 <loop+0xfc8>)
    78c2:	7818      	ldrb	r0, [r3, #0]
    78c4:	f7fb fb48 	bl	2f58 <Write_Indexed_Indirect_Y(unsigned char)>
    return(register_pc + opcode_info[0x91].length);
    78c8:	4b1d      	ldr	r3, [pc, #116]	; (7940 <loop+0xfc4>)
    78ca:	f893 7da5 	ldrb.w	r7, [r3, #3493]	; 0xda5
    78ce:	8833      	ldrh	r3, [r6, #0]
    78d0:	441f      	add	r7, r3
    78d2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78d4:	463a      	mov	r2, r7
				break; // STA - Indirect Indexed  Y
    78d6:	f7ff ba1a 	b.w	6d0e <loop+0x392>
    Fetch_ZeroPage_Y();
    78da:	f7fb f961 	bl	2ba0 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    78de:	4b18      	ldr	r3, [pc, #96]	; (7940 <loop+0xfc4>)
    78e0:	f893 7e0d 	ldrb.w	r7, [r3, #3597]	; 0xe0d
    78e4:	8833      	ldrh	r3, [r6, #0]
    78e6:	441f      	add	r7, r3
    78e8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78ea:	463a      	mov	r2, r7
				break; // SHA - ZeroPage , Y
    78ec:	f7ff ba0f 	b.w	6d0e <loop+0x392>
    Write_ZeroPage_X(register_y);
    78f0:	4b16      	ldr	r3, [pc, #88]	; (794c <loop+0xfd0>)
    78f2:	7818      	ldrb	r0, [r3, #0]
    78f4:	f7fb fa6c 	bl	2dd0 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x94].length);
    78f8:	4b11      	ldr	r3, [pc, #68]	; (7940 <loop+0xfc4>)
    78fa:	f893 7e41 	ldrb.w	r7, [r3, #3649]	; 0xe41
    78fe:	8833      	ldrh	r3, [r6, #0]
    7900:	441f      	add	r7, r3
    7902:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7904:	463a      	mov	r2, r7
				break; // STY - ZeroPage , X
    7906:	f7ff ba02 	b.w	6d0e <loop+0x392>
    Write_ZeroPage_X(register_a);
    790a:	4b0e      	ldr	r3, [pc, #56]	; (7944 <loop+0xfc8>)
    790c:	7818      	ldrb	r0, [r3, #0]
    790e:	f7fb fa5f 	bl	2dd0 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x95].length);
    7912:	4b0b      	ldr	r3, [pc, #44]	; (7940 <loop+0xfc4>)
    7914:	f893 7e75 	ldrb.w	r7, [r3, #3701]	; 0xe75
    7918:	8833      	ldrh	r3, [r6, #0]
    791a:	441f      	add	r7, r3
    791c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    791e:	463a      	mov	r2, r7
				break; // STA - ZeroPage , X
    7920:	f7ff b9f5 	b.w	6d0e <loop+0x392>
    Write_ZeroPage_Y(register_x);
    7924:	4b08      	ldr	r3, [pc, #32]	; (7948 <loop+0xfcc>)
    7926:	7818      	ldrb	r0, [r3, #0]
    7928:	f7fb fa70 	bl	2e0c <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x96].length);
    792c:	4b04      	ldr	r3, [pc, #16]	; (7940 <loop+0xfc4>)
    792e:	f893 7ea9 	ldrb.w	r7, [r3, #3753]	; 0xea9
    7932:	8833      	ldrh	r3, [r6, #0]
    7934:	441f      	add	r7, r3
    7936:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7938:	463a      	mov	r2, r7
				break; // STX - ZeroPage , Y
    793a:	f7ff b9e8 	b.w	6d0e <loop+0x392>
    793e:	bf00      	nop
    7940:	20016418 	.word	0x20016418
    7944:	2001889f 	.word	0x2001889f
    7948:	200188a0 	.word	0x200188a0
    794c:	200188a1 	.word	0x200188a1
    7950:	20018886 	.word	0x20018886
    7954:	20004968 	.word	0x20004968
    Write_ZeroPage_Y(register_a & register_x);
    7958:	4bbd      	ldr	r3, [pc, #756]	; (7c50 <loop+0x12d4>)
    795a:	7818      	ldrb	r0, [r3, #0]
    795c:	4bbd      	ldr	r3, [pc, #756]	; (7c54 <loop+0x12d8>)
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	4018      	ands	r0, r3
    7962:	f7fb fa53 	bl	2e0c <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x97].length);
    7966:	4bbc      	ldr	r3, [pc, #752]	; (7c58 <loop+0x12dc>)
    7968:	f893 7edd 	ldrb.w	r7, [r3, #3805]	; 0xedd
    796c:	8833      	ldrh	r3, [r6, #0]
    796e:	441f      	add	r7, r3
    7970:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7972:	463a      	mov	r2, r7
				break; // SAX - ZeroPage , Y
    7974:	f7ff b9cb 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7978:	8830      	ldrh	r0, [r6, #0]
    797a:	2100      	movs	r1, #0
    797c:	3001      	adds	r0, #1
    797e:	b280      	uxth	r0, r0
    7980:	f7fa fdf6 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = register_y;
    7984:	4bb5      	ldr	r3, [pc, #724]	; (7c5c <loop+0x12e0>)
    7986:	7818      	ldrb	r0, [r3, #0]
    7988:	4bb1      	ldr	r3, [pc, #708]	; (7c50 <loop+0x12d4>)
    798a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    798c:	f7fb f8b4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x98].length);
    7990:	4bb1      	ldr	r3, [pc, #708]	; (7c58 <loop+0x12dc>)
    7992:	f893 7f11 	ldrb.w	r7, [r3, #3857]	; 0xf11
    7996:	8833      	ldrh	r3, [r6, #0]
    7998:	441f      	add	r7, r3
    799a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    799c:	463a      	mov	r2, r7
				break; // TYA
    799e:	f7ff b9b6 	b.w	6d0e <loop+0x392>
    Write_Absolute_Y(register_a);
    79a2:	4bab      	ldr	r3, [pc, #684]	; (7c50 <loop+0x12d4>)
    79a4:	7818      	ldrb	r0, [r3, #0]
    79a6:	f7fb fa75 	bl	2e94 <Write_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x99].length);
    79aa:	4bab      	ldr	r3, [pc, #684]	; (7c58 <loop+0x12dc>)
    79ac:	f893 7f45 	ldrb.w	r7, [r3, #3909]	; 0xf45
    79b0:	8833      	ldrh	r3, [r6, #0]
    79b2:	441f      	add	r7, r3
    79b4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    79b6:	463a      	mov	r2, r7
				break; // STA - Absolute , Y
    79b8:	f7ff b9a9 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    79bc:	8830      	ldrh	r0, [r6, #0]
    79be:	2100      	movs	r1, #0
    79c0:	3001      	adds	r0, #1
    79c2:	b280      	uxth	r0, r0
    79c4:	f7fa fdd4 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x9A].length);
    79c8:	4ba3      	ldr	r3, [pc, #652]	; (7c58 <loop+0x12dc>)
    79ca:	f893 7f79 	ldrb.w	r7, [r3, #3961]	; 0xf79
    79ce:	8833      	ldrh	r3, [r6, #0]
    79d0:	441f      	add	r7, r3
    register_sp = register_x;
    79d2:	4ba0      	ldr	r3, [pc, #640]	; (7c54 <loop+0x12d8>)
    return(register_pc + opcode_info[0x9A].length);
    79d4:	b2bf      	uxth	r7, r7
    register_sp = register_x;
    79d6:	781a      	ldrb	r2, [r3, #0]
    79d8:	4ba1      	ldr	r3, [pc, #644]	; (7c60 <loop+0x12e4>)
    79da:	701a      	strb	r2, [r3, #0]
        sprintf(buf, "%04X", next_pc);
    79dc:	463a      	mov	r2, r7
				break; // TXS
    79de:	f7ff b996 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_Y(0);
    79e2:	2000      	movs	r0, #0
    79e4:	f7fb f948 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    79e8:	4b9b      	ldr	r3, [pc, #620]	; (7c58 <loop+0x12dc>)
    79ea:	f893 7fad 	ldrb.w	r7, [r3, #4013]	; 0xfad
    79ee:	8833      	ldrh	r3, [r6, #0]
    79f0:	441f      	add	r7, r3
    79f2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    79f4:	463a      	mov	r2, r7
				break; // TAS - Absolute , Y 
    79f6:	f7ff b98a 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_X(0);
    79fa:	2000      	movs	r0, #0
    79fc:	f7fb f90c 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    7a00:	4b95      	ldr	r3, [pc, #596]	; (7c58 <loop+0x12dc>)
    7a02:	f893 7fe1 	ldrb.w	r7, [r3, #4065]	; 0xfe1
    7a06:	8833      	ldrh	r3, [r6, #0]
    7a08:	441f      	add	r7, r3
    7a0a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a0c:	463a      	mov	r2, r7
				break; // SHY - Absolute , X
    7a0e:	f7ff b97e 	b.w	6d0e <loop+0x392>
    Write_Absolute_X(register_a);
    7a12:	4b8f      	ldr	r3, [pc, #572]	; (7c50 <loop+0x12d4>)
    7a14:	7818      	ldrb	r0, [r3, #0]
    7a16:	f7fb fa17 	bl	2e48 <Write_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9D].length);
    7a1a:	4b92      	ldr	r3, [pc, #584]	; (7c64 <loop+0x12e8>)
    7a1c:	7d5f      	ldrb	r7, [r3, #21]
    7a1e:	8833      	ldrh	r3, [r6, #0]
    7a20:	441f      	add	r7, r3
    7a22:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a24:	463a      	mov	r2, r7
				break; // STA - Absolute , X
    7a26:	f7ff b972 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_Y(0);
    7a2a:	2000      	movs	r0, #0
    7a2c:	f7fb f924 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    7a30:	4b8c      	ldr	r3, [pc, #560]	; (7c64 <loop+0x12e8>)
    7a32:	f893 7049 	ldrb.w	r7, [r3, #73]	; 0x49
    7a36:	8833      	ldrh	r3, [r6, #0]
    7a38:	441f      	add	r7, r3
    7a3a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a3c:	463a      	mov	r2, r7
				break; // SHX - Absolute , Y
    7a3e:	f7ff b966 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_Y(0);
    7a42:	2000      	movs	r0, #0
    7a44:	f7fb f918 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    7a48:	4b86      	ldr	r3, [pc, #536]	; (7c64 <loop+0x12e8>)
    7a4a:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
    7a4e:	8833      	ldrh	r3, [r6, #0]
    7a50:	441f      	add	r7, r3
    7a52:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a54:	463a      	mov	r2, r7
				break; // SHA - Absolute , Y
    7a56:	f7ff b95a 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7a5a:	8830      	ldrh	r0, [r6, #0]
    7a5c:	2100      	movs	r1, #0
    7a5e:	3001      	adds	r0, #1
    7a60:	b280      	uxth	r0, r0
    7a62:	f7fa fd85 	bl	2570 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    7a66:	4b7d      	ldr	r3, [pc, #500]	; (7c5c <loop+0x12e0>)
    7a68:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7a6a:	f7fb f845 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA0].length);
    7a6e:	4b7d      	ldr	r3, [pc, #500]	; (7c64 <loop+0x12e8>)
    7a70:	f893 70b1 	ldrb.w	r7, [r3, #177]	; 0xb1
    7a74:	8833      	ldrh	r3, [r6, #0]
    7a76:	441f      	add	r7, r3
    7a78:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a7a:	463a      	mov	r2, r7
				break; // LDY - Immediate
    7a7c:	f7ff b947 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Indexed_Indirect_X();
    7a80:	f7fb f92a 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    7a84:	4b72      	ldr	r3, [pc, #456]	; (7c50 <loop+0x12d4>)
    7a86:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a88:	f7fb f836 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA1].length);
    7a8c:	4b75      	ldr	r3, [pc, #468]	; (7c64 <loop+0x12e8>)
    7a8e:	f893 70e5 	ldrb.w	r7, [r3, #229]	; 0xe5
    7a92:	8833      	ldrh	r3, [r6, #0]
    7a94:	441f      	add	r7, r3
    7a96:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a98:	463a      	mov	r2, r7
				break; // LDA - Indexed Indirect X
    7a9a:	f7ff b938 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7a9e:	8830      	ldrh	r0, [r6, #0]
    7aa0:	2100      	movs	r1, #0
    7aa2:	3001      	adds	r0, #1
    7aa4:	b280      	uxth	r0, r0
    7aa6:	f7fa fd63 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    7aaa:	4b6a      	ldr	r3, [pc, #424]	; (7c54 <loop+0x12d8>)
    7aac:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7aae:	f7fb f823 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA2].length);
    7ab2:	4b6c      	ldr	r3, [pc, #432]	; (7c64 <loop+0x12e8>)
    7ab4:	f893 7119 	ldrb.w	r7, [r3, #281]	; 0x119
    7ab8:	8833      	ldrh	r3, [r6, #0]
    7aba:	441f      	add	r7, r3
    7abc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7abe:	463a      	mov	r2, r7
				break; // LDX - Immediate
    7ac0:	f7ff b925 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Indexed_Indirect_X();
    7ac4:	f7fb f908 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    7ac8:	4a61      	ldr	r2, [pc, #388]	; (7c50 <loop+0x12d4>)
    7aca:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7acc:	4a61      	ldr	r2, [pc, #388]	; (7c54 <loop+0x12d8>)
    7ace:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7ad0:	f7fb f812 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA3].length);
    7ad4:	4b63      	ldr	r3, [pc, #396]	; (7c64 <loop+0x12e8>)
    7ad6:	f893 714d 	ldrb.w	r7, [r3, #333]	; 0x14d
    7ada:	8833      	ldrh	r3, [r6, #0]
    7adc:	441f      	add	r7, r3
    7ade:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ae0:	463a      	mov	r2, r7
				break; // LAX - Indexed Indirect X
    7ae2:	f7ff b914 	b.w	6d0e <loop+0x392>
    register_y = Fetch_ZeroPage();
    7ae6:	f7fb f827 	bl	2b38 <Fetch_ZeroPage()>
    7aea:	4b5c      	ldr	r3, [pc, #368]	; (7c5c <loop+0x12e0>)
    7aec:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7aee:	f7fb f803 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA4].length);
    7af2:	4b5c      	ldr	r3, [pc, #368]	; (7c64 <loop+0x12e8>)
    7af4:	f893 7181 	ldrb.w	r7, [r3, #385]	; 0x181
    7af8:	8833      	ldrh	r3, [r6, #0]
    7afa:	441f      	add	r7, r3
    7afc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7afe:	463a      	mov	r2, r7
				break; // LDY - ZeroPage
    7b00:	f7ff b905 	b.w	6d0e <loop+0x392>
    register_a = Fetch_ZeroPage();
    7b04:	f7fb f818 	bl	2b38 <Fetch_ZeroPage()>
    7b08:	4b51      	ldr	r3, [pc, #324]	; (7c50 <loop+0x12d4>)
    7b0a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b0c:	f7fa fff4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA5].length);
    7b10:	4b54      	ldr	r3, [pc, #336]	; (7c64 <loop+0x12e8>)
    7b12:	f893 71b5 	ldrb.w	r7, [r3, #437]	; 0x1b5
    7b16:	8833      	ldrh	r3, [r6, #0]
    7b18:	441f      	add	r7, r3
    7b1a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b1c:	463a      	mov	r2, r7
				break; // LDA - ZeroPage
    7b1e:	f7ff b8f6 	b.w	6d0e <loop+0x392>
    register_x = Fetch_ZeroPage();
    7b22:	f7fb f809 	bl	2b38 <Fetch_ZeroPage()>
    7b26:	4b4b      	ldr	r3, [pc, #300]	; (7c54 <loop+0x12d8>)
    7b28:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7b2a:	f7fa ffe5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA6].length);
    7b2e:	4b4d      	ldr	r3, [pc, #308]	; (7c64 <loop+0x12e8>)
    7b30:	f893 71e9 	ldrb.w	r7, [r3, #489]	; 0x1e9
    7b34:	8833      	ldrh	r3, [r6, #0]
    7b36:	441f      	add	r7, r3
    7b38:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b3a:	463a      	mov	r2, r7
				break; // LDX - ZeroPage
    7b3c:	f7ff b8e7 	b.w	6d0e <loop+0x392>
    register_a = Fetch_ZeroPage();
    7b40:	f7fa fffa 	bl	2b38 <Fetch_ZeroPage()>
    7b44:	4a42      	ldr	r2, [pc, #264]	; (7c50 <loop+0x12d4>)
    7b46:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7b48:	4a42      	ldr	r2, [pc, #264]	; (7c54 <loop+0x12d8>)
    7b4a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b4c:	f7fa ffd4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA7].length);
    7b50:	4b44      	ldr	r3, [pc, #272]	; (7c64 <loop+0x12e8>)
    7b52:	f893 721d 	ldrb.w	r7, [r3, #541]	; 0x21d
    7b56:	8833      	ldrh	r3, [r6, #0]
    7b58:	441f      	add	r7, r3
    7b5a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b5c:	463a      	mov	r2, r7
				break; // LAX - ZeroPage
    7b5e:	f7ff b8d6 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7b62:	8830      	ldrh	r0, [r6, #0]
    7b64:	2100      	movs	r1, #0
    7b66:	3001      	adds	r0, #1
    7b68:	b280      	uxth	r0, r0
    7b6a:	f7fa fd01 	bl	2570 <read_byte(unsigned short, bool)>
    register_y = register_a;
    7b6e:	4b38      	ldr	r3, [pc, #224]	; (7c50 <loop+0x12d4>)
    7b70:	7818      	ldrb	r0, [r3, #0]
    7b72:	4b3a      	ldr	r3, [pc, #232]	; (7c5c <loop+0x12e0>)
    7b74:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7b76:	f7fa ffbf 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA8].length);
    7b7a:	4b3a      	ldr	r3, [pc, #232]	; (7c64 <loop+0x12e8>)
    7b7c:	f893 7251 	ldrb.w	r7, [r3, #593]	; 0x251
    7b80:	8833      	ldrh	r3, [r6, #0]
    7b82:	441f      	add	r7, r3
    7b84:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b86:	463a      	mov	r2, r7
				break; // TAY
    7b88:	f7ff b8c1 	b.w	6d0e <loop+0x392>
    return read_byte(register_pc+offset, false);
    7b8c:	8830      	ldrh	r0, [r6, #0]
    7b8e:	2100      	movs	r1, #0
    7b90:	3001      	adds	r0, #1
    7b92:	b280      	uxth	r0, r0
    7b94:	f7fa fcec 	bl	2570 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    7b98:	4b2d      	ldr	r3, [pc, #180]	; (7c50 <loop+0x12d4>)
    7b9a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b9c:	f7fa ffac 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA9].length);
    7ba0:	4b30      	ldr	r3, [pc, #192]	; (7c64 <loop+0x12e8>)
    7ba2:	f893 7285 	ldrb.w	r7, [r3, #645]	; 0x285
    7ba6:	8833      	ldrh	r3, [r6, #0]
    7ba8:	441f      	add	r7, r3
    7baa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bac:	463a      	mov	r2, r7
				break; // LDA - Immediate
    7bae:	f7ff b8ae 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7bb2:	8830      	ldrh	r0, [r6, #0]
    7bb4:	2100      	movs	r1, #0
    7bb6:	3001      	adds	r0, #1
    7bb8:	b280      	uxth	r0, r0
    7bba:	f7fa fcd9 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = register_a;
    7bbe:	4b24      	ldr	r3, [pc, #144]	; (7c50 <loop+0x12d4>)
    7bc0:	7818      	ldrb	r0, [r3, #0]
    7bc2:	4b24      	ldr	r3, [pc, #144]	; (7c54 <loop+0x12d8>)
    7bc4:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7bc6:	f7fa ff97 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAA].length);
    7bca:	4b26      	ldr	r3, [pc, #152]	; (7c64 <loop+0x12e8>)
    7bcc:	f893 72b9 	ldrb.w	r7, [r3, #697]	; 0x2b9
    7bd0:	8833      	ldrh	r3, [r6, #0]
    7bd2:	441f      	add	r7, r3
    7bd4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bd6:	463a      	mov	r2, r7
				break; // TAX
    7bd8:	f7ff b899 	b.w	6d0e <loop+0x392>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    7bdc:	2001      	movs	r0, #1
    7bde:	f7fa ff9f 	bl	2b20 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    7be2:	4b20      	ldr	r3, [pc, #128]	; (7c64 <loop+0x12e8>)
    7be4:	f893 72ed 	ldrb.w	r7, [r3, #749]	; 0x2ed
    7be8:	8833      	ldrh	r3, [r6, #0]
    7bea:	441f      	add	r7, r3
    7bec:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bee:	463a      	mov	r2, r7
				break; // LAX - Immediate
    7bf0:	f7ff b88d 	b.w	6d0e <loop+0x392>
    register_y = Fetch_Absolute();
    7bf4:	f7fa fff4 	bl	2be0 <Fetch_Absolute()>
    7bf8:	4b18      	ldr	r3, [pc, #96]	; (7c5c <loop+0x12e0>)
    7bfa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7bfc:	f7fa ff7c 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAC].length);
    7c00:	4b18      	ldr	r3, [pc, #96]	; (7c64 <loop+0x12e8>)
    7c02:	f893 7321 	ldrb.w	r7, [r3, #801]	; 0x321
    7c06:	8833      	ldrh	r3, [r6, #0]
    7c08:	441f      	add	r7, r3
    7c0a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c0c:	463a      	mov	r2, r7
				break; // LDY - Absolute
    7c0e:	f7ff b87e 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Absolute();
    7c12:	f7fa ffe5 	bl	2be0 <Fetch_Absolute()>
    7c16:	4b0e      	ldr	r3, [pc, #56]	; (7c50 <loop+0x12d4>)
    7c18:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7c1a:	f7fa ff6d 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAD].length);
    7c1e:	4b11      	ldr	r3, [pc, #68]	; (7c64 <loop+0x12e8>)
    7c20:	f893 7355 	ldrb.w	r7, [r3, #853]	; 0x355
    7c24:	8833      	ldrh	r3, [r6, #0]
    7c26:	441f      	add	r7, r3
    7c28:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c2a:	463a      	mov	r2, r7
				break; // LDA - Absolute
    7c2c:	f7ff b86f 	b.w	6d0e <loop+0x392>
    register_x = Fetch_Absolute();
    7c30:	f7fa ffd6 	bl	2be0 <Fetch_Absolute()>
    7c34:	4b07      	ldr	r3, [pc, #28]	; (7c54 <loop+0x12d8>)
    7c36:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7c38:	f7fa ff5e 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAE].length);
    7c3c:	4b09      	ldr	r3, [pc, #36]	; (7c64 <loop+0x12e8>)
    7c3e:	f893 7389 	ldrb.w	r7, [r3, #905]	; 0x389
    7c42:	8833      	ldrh	r3, [r6, #0]
    7c44:	441f      	add	r7, r3
    7c46:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c48:	463a      	mov	r2, r7
				break; // LDX - Absolute
    7c4a:	f7ff b860 	b.w	6d0e <loop+0x392>
    7c4e:	bf00      	nop
    7c50:	2001889f 	.word	0x2001889f
    7c54:	200188a0 	.word	0x200188a0
    7c58:	20016418 	.word	0x20016418
    7c5c:	200188a1 	.word	0x200188a1
    7c60:	20004969 	.word	0x20004969
    7c64:	20017418 	.word	0x20017418
    register_a = Fetch_Absolute();
    7c68:	f7fa ffba 	bl	2be0 <Fetch_Absolute()>
    7c6c:	4ac6      	ldr	r2, [pc, #792]	; (7f88 <loop+0x160c>)
    7c6e:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7c70:	4ac6      	ldr	r2, [pc, #792]	; (7f8c <loop+0x1610>)
    7c72:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7c74:	f7fa ff40 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAF].length);
    7c78:	4bc5      	ldr	r3, [pc, #788]	; (7f90 <loop+0x1614>)
    7c7a:	f893 73bd 	ldrb.w	r7, [r3, #957]	; 0x3bd
    7c7e:	8833      	ldrh	r3, [r6, #0]
    7c80:	441f      	add	r7, r3
    7c82:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c84:	463a      	mov	r2, r7
				break; // LAX - Absolute
    7c86:	f7ff b842 	b.w	6d0e <loop+0x392>
    if ((flag_c) == 1) Branch_Taken();
    7c8a:	4bc2      	ldr	r3, [pc, #776]	; (7f94 <loop+0x1618>)
    7c8c:	7819      	ldrb	r1, [r3, #0]
    7c8e:	f011 0101 	ands.w	r1, r1, #1
    7c92:	f000 836b 	beq.w	836c <loop+0x19f0>
    7c96:	f7fc fcb5 	bl	4604 <Branch_Taken()>
    return(register_pc);
    7c9a:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7c9c:	463a      	mov	r2, r7
				break; // BCS - Branch on Carry Set
    7c9e:	f7ff b836 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Indexed_Indirect_Y(1);
    7ca2:	2001      	movs	r0, #1
    7ca4:	f7fb f842 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7ca8:	4bb7      	ldr	r3, [pc, #732]	; (7f88 <loop+0x160c>)
    7caa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7cac:	f7fa ff24 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB1].length);
    7cb0:	4bb7      	ldr	r3, [pc, #732]	; (7f90 <loop+0x1614>)
    7cb2:	f893 7425 	ldrb.w	r7, [r3, #1061]	; 0x425
    7cb6:	8833      	ldrh	r3, [r6, #0]
    7cb8:	441f      	add	r7, r3
    7cba:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7cbc:	463a      	mov	r2, r7
				break; // LDA - Indirect Indexed  Y
    7cbe:	f7ff b826 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Indexed_Indirect_Y(1);
    7cc2:	2001      	movs	r0, #1
    7cc4:	f7fb f832 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7cc8:	4aaf      	ldr	r2, [pc, #700]	; (7f88 <loop+0x160c>)
    7cca:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7ccc:	4aaf      	ldr	r2, [pc, #700]	; (7f8c <loop+0x1610>)
    7cce:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7cd0:	f7fa ff12 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB3].length);
    7cd4:	4bae      	ldr	r3, [pc, #696]	; (7f90 <loop+0x1614>)
    7cd6:	f893 748d 	ldrb.w	r7, [r3, #1165]	; 0x48d
    7cda:	8833      	ldrh	r3, [r6, #0]
    7cdc:	441f      	add	r7, r3
    7cde:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ce0:	463a      	mov	r2, r7
				break; // LAX - Indirect Indexed  Y
    7ce2:	f7ff b814 	b.w	6d0e <loop+0x392>
    register_y = Fetch_ZeroPage_X();
    7ce6:	f7fa ff3b 	bl	2b60 <Fetch_ZeroPage_X()>
    7cea:	4bab      	ldr	r3, [pc, #684]	; (7f98 <loop+0x161c>)
    7cec:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7cee:	f7fa ff03 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB4].length);
    7cf2:	4ba7      	ldr	r3, [pc, #668]	; (7f90 <loop+0x1614>)
    7cf4:	f893 74c1 	ldrb.w	r7, [r3, #1217]	; 0x4c1
    7cf8:	8833      	ldrh	r3, [r6, #0]
    7cfa:	441f      	add	r7, r3
    7cfc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7cfe:	463a      	mov	r2, r7
				break; // LDY - ZeroPage , X
    7d00:	f7ff b805 	b.w	6d0e <loop+0x392>
    register_a = Fetch_ZeroPage_X();
    7d04:	f7fa ff2c 	bl	2b60 <Fetch_ZeroPage_X()>
    7d08:	4b9f      	ldr	r3, [pc, #636]	; (7f88 <loop+0x160c>)
    7d0a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7d0c:	f7fa fef4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB5].length);
    7d10:	4b9f      	ldr	r3, [pc, #636]	; (7f90 <loop+0x1614>)
    7d12:	f893 74f5 	ldrb.w	r7, [r3, #1269]	; 0x4f5
    7d16:	8833      	ldrh	r3, [r6, #0]
    7d18:	441f      	add	r7, r3
    7d1a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d1c:	463a      	mov	r2, r7
				break; // LDA - ZeroPage , X
    7d1e:	f7fe bff6 	b.w	6d0e <loop+0x392>
    register_x = Fetch_ZeroPage_Y();
    7d22:	f7fa ff3d 	bl	2ba0 <Fetch_ZeroPage_Y()>
    7d26:	4b99      	ldr	r3, [pc, #612]	; (7f8c <loop+0x1610>)
    7d28:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7d2a:	f7fa fee5 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB6].length);
    7d2e:	4b98      	ldr	r3, [pc, #608]	; (7f90 <loop+0x1614>)
    7d30:	f893 7529 	ldrb.w	r7, [r3, #1321]	; 0x529
    7d34:	8833      	ldrh	r3, [r6, #0]
    7d36:	441f      	add	r7, r3
    7d38:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d3a:	463a      	mov	r2, r7
				break; // LDX - ZeroPage , Y
    7d3c:	f7fe bfe7 	b.w	6d0e <loop+0x392>
    register_a = Fetch_ZeroPage_Y();
    7d40:	f7fa ff2e 	bl	2ba0 <Fetch_ZeroPage_Y()>
    7d44:	4a90      	ldr	r2, [pc, #576]	; (7f88 <loop+0x160c>)
    7d46:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7d48:	4a90      	ldr	r2, [pc, #576]	; (7f8c <loop+0x1610>)
    7d4a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7d4c:	f7fa fed4 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB7].length);
    7d50:	4b8f      	ldr	r3, [pc, #572]	; (7f90 <loop+0x1614>)
    7d52:	f893 755d 	ldrb.w	r7, [r3, #1373]	; 0x55d
    7d56:	8833      	ldrh	r3, [r6, #0]
    7d58:	441f      	add	r7, r3
    7d5a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d5c:	463a      	mov	r2, r7
				break; // LAX - ZeroPage , Y
    7d5e:	f7fe bfd6 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7d62:	8830      	ldrh	r0, [r6, #0]
    7d64:	2100      	movs	r1, #0
    7d66:	3001      	adds	r0, #1
    7d68:	b280      	uxth	r0, r0
    7d6a:	f7fa fc01 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xB8].length);
    7d6e:	4b88      	ldr	r3, [pc, #544]	; (7f90 <loop+0x1614>)
    register_flags = register_flags & 0xBF;
    7d70:	4a88      	ldr	r2, [pc, #544]	; (7f94 <loop+0x1618>)
    return(register_pc + opcode_info[0xB8].length);
    7d72:	f893 7591 	ldrb.w	r7, [r3, #1425]	; 0x591
    7d76:	8833      	ldrh	r3, [r6, #0]
    7d78:	441f      	add	r7, r3
    register_flags = register_flags & 0xBF;
    7d7a:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    7d7c:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xBF;
    7d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7d82:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7d84:	463a      	mov	r2, r7
				break; // CLV
    7d86:	f7fe bfc2 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Absolute_Y(1);
    7d8a:	2001      	movs	r0, #1
    7d8c:	f7fa ff74 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    7d90:	4b7d      	ldr	r3, [pc, #500]	; (7f88 <loop+0x160c>)
    7d92:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7d94:	f7fa feb0 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB9].length);
    7d98:	4b7d      	ldr	r3, [pc, #500]	; (7f90 <loop+0x1614>)
    7d9a:	f893 75c5 	ldrb.w	r7, [r3, #1477]	; 0x5c5
    7d9e:	8833      	ldrh	r3, [r6, #0]
    7da0:	441f      	add	r7, r3
    7da2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7da4:	463a      	mov	r2, r7
				break; // LDA - Absolute , Y
    7da6:	f7fe bfb2 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7daa:	8830      	ldrh	r0, [r6, #0]
    7dac:	2100      	movs	r1, #0
    7dae:	3001      	adds	r0, #1
    7db0:	b280      	uxth	r0, r0
    7db2:	f7fa fbdd 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = register_sp;
    7db6:	4b79      	ldr	r3, [pc, #484]	; (7f9c <loop+0x1620>)
    7db8:	7818      	ldrb	r0, [r3, #0]
    7dba:	4b74      	ldr	r3, [pc, #464]	; (7f8c <loop+0x1610>)
    7dbc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7dbe:	f7fa fe9b 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBA].length);
    7dc2:	4b73      	ldr	r3, [pc, #460]	; (7f90 <loop+0x1614>)
    7dc4:	f893 75f9 	ldrb.w	r7, [r3, #1529]	; 0x5f9
    7dc8:	8833      	ldrh	r3, [r6, #0]
    7dca:	441f      	add	r7, r3
    7dcc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7dce:	463a      	mov	r2, r7
				break; // TSX
    7dd0:	f7fe bf9d 	b.w	6d0e <loop+0x392>
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    7dd4:	2001      	movs	r0, #1
    7dd6:	f7fa ff4f 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    7dda:	4b70      	ldr	r3, [pc, #448]	; (7f9c <loop+0x1620>)
    register_x = register_sp;
    7ddc:	4a6b      	ldr	r2, [pc, #428]	; (7f8c <loop+0x1610>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    7dde:	781c      	ldrb	r4, [r3, #0]
    register_a = register_sp;
    7de0:	4969      	ldr	r1, [pc, #420]	; (7f88 <loop+0x160c>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    7de2:	4020      	ands	r0, r4
    7de4:	7018      	strb	r0, [r3, #0]
    register_x = register_sp;
    7de6:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    7de8:	7008      	strb	r0, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7dea:	f7fa fe85 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBB].length);
    7dee:	4b68      	ldr	r3, [pc, #416]	; (7f90 <loop+0x1614>)
    7df0:	f893 762d 	ldrb.w	r7, [r3, #1581]	; 0x62d
    7df4:	8833      	ldrh	r3, [r6, #0]
    7df6:	441f      	add	r7, r3
    7df8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7dfa:	463a      	mov	r2, r7
				break; // LAS - Absolute , Y
    7dfc:	f7fe bf87 	b.w	6d0e <loop+0x392>
    register_y = Fetch_Absolute_X(1);
    7e00:	2001      	movs	r0, #1
    7e02:	f7fa ff09 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    7e06:	4b64      	ldr	r3, [pc, #400]	; (7f98 <loop+0x161c>)
    7e08:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7e0a:	f7fa fe75 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBC].length);
    7e0e:	4b60      	ldr	r3, [pc, #384]	; (7f90 <loop+0x1614>)
    7e10:	f893 7661 	ldrb.w	r7, [r3, #1633]	; 0x661
    7e14:	8833      	ldrh	r3, [r6, #0]
    7e16:	441f      	add	r7, r3
    7e18:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e1a:	463a      	mov	r2, r7
				break; // LDY - Absolute , X
    7e1c:	f7fe bf77 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Absolute_X(1);
    7e20:	2001      	movs	r0, #1
    7e22:	f7fa fef9 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    7e26:	4b58      	ldr	r3, [pc, #352]	; (7f88 <loop+0x160c>)
    7e28:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e2a:	f7fa fe65 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBD].length);
    7e2e:	4b58      	ldr	r3, [pc, #352]	; (7f90 <loop+0x1614>)
    7e30:	f893 7695 	ldrb.w	r7, [r3, #1685]	; 0x695
    7e34:	8833      	ldrh	r3, [r6, #0]
    7e36:	441f      	add	r7, r3
    7e38:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e3a:	463a      	mov	r2, r7
				break; // LDA - Absolute , X
    7e3c:	f7fe bf67 	b.w	6d0e <loop+0x392>
    register_x = Fetch_Absolute_Y(1);
    7e40:	2001      	movs	r0, #1
    7e42:	f7fa ff19 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    7e46:	4b51      	ldr	r3, [pc, #324]	; (7f8c <loop+0x1610>)
    7e48:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7e4a:	f7fa fe55 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBE].length);
    7e4e:	4b50      	ldr	r3, [pc, #320]	; (7f90 <loop+0x1614>)
    7e50:	f893 76c9 	ldrb.w	r7, [r3, #1737]	; 0x6c9
    7e54:	8833      	ldrh	r3, [r6, #0]
    7e56:	441f      	add	r7, r3
    7e58:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e5a:	463a      	mov	r2, r7
				break; // LDX - Absolute , Y
    7e5c:	f7fe bf57 	b.w	6d0e <loop+0x392>
    register_a = Fetch_Absolute_Y(1);
    7e60:	2001      	movs	r0, #1
    7e62:	f7fa ff09 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    7e66:	4a48      	ldr	r2, [pc, #288]	; (7f88 <loop+0x160c>)
    7e68:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7e6a:	4a48      	ldr	r2, [pc, #288]	; (7f8c <loop+0x1610>)
    7e6c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e6e:	f7fa fe43 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBF].length);
    7e72:	4b47      	ldr	r3, [pc, #284]	; (7f90 <loop+0x1614>)
    7e74:	f893 76fd 	ldrb.w	r7, [r3, #1789]	; 0x6fd
    7e78:	8833      	ldrh	r3, [r6, #0]
    7e7a:	441f      	add	r7, r3
    7e7c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e7e:	463a      	mov	r2, r7
				break; // LAX - Absolute , Y
    7e80:	f7fe bf45 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC0();
    7e84:	f7fb fec4 	bl	3c10 <opcode_0xC0()>
    7e88:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7e8a:	4602      	mov	r2, r0
				break; // CPY - Immediate
    7e8c:	f7fe bf3f 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    7e90:	f7fa ff22 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    7e94:	f7fb fdec 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC1].length);
    7e98:	4b3d      	ldr	r3, [pc, #244]	; (7f90 <loop+0x1614>)
    7e9a:	f893 7765 	ldrb.w	r7, [r3, #1893]	; 0x765
    7e9e:	8833      	ldrh	r3, [r6, #0]
    7ea0:	441f      	add	r7, r3
    7ea2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ea4:	463a      	mov	r2, r7
				break; // CMP - Indexed Indirect X
    7ea6:	f7fe bf32 	b.w	6d0e <loop+0x392>
    Fetch_Immediate(1);
    7eaa:	2001      	movs	r0, #1
    7eac:	f7fa fe38 	bl	2b20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    7eb0:	4b37      	ldr	r3, [pc, #220]	; (7f90 <loop+0x1614>)
    7eb2:	f893 7799 	ldrb.w	r7, [r3, #1945]	; 0x799
    7eb6:	8833      	ldrh	r3, [r6, #0]
    7eb8:	441f      	add	r7, r3
    7eba:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ebc:	463a      	mov	r2, r7
				break; // NOP - Immediate
    7ebe:	f7fe bf26 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC3();
    7ec2:	f7fd fe57 	bl	5b74 <opcode_0xC3()>
    7ec6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7ec8:	4602      	mov	r2, r0
				break; // DCP - Indexed Indirect X
    7eca:	f7fe bf20 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC4();
    7ece:	f7fb fec7 	bl	3c60 <opcode_0xC4()>
    7ed2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7ed4:	4602      	mov	r2, r0
				break; // CPY - ZeroPage
    7ed6:	f7fe bf1a 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_ZeroPage());
    7eda:	f7fa fe2d 	bl	2b38 <Fetch_ZeroPage()>
    7ede:	f7fb fdc7 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC5].length);
    7ee2:	4b2b      	ldr	r3, [pc, #172]	; (7f90 <loop+0x1614>)
    7ee4:	f893 7835 	ldrb.w	r7, [r3, #2101]	; 0x835
    7ee8:	8833      	ldrh	r3, [r6, #0]
    7eea:	441f      	add	r7, r3
    7eec:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7eee:	463a      	mov	r2, r7
				break; // CMP - ZeroPage
    7ef0:	f7fe bf0d 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC6();
    7ef4:	f7fc f866 	bl	3fc4 <opcode_0xC6()>
    7ef8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7efa:	4602      	mov	r2, r0
				break; // DEC - ZeroPage
    7efc:	f7fe bf07 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC7();
    7f00:	f7fd fdbe 	bl	5a80 <opcode_0xC7()>
    7f04:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7f06:	4602      	mov	r2, r0
				break; // DCP - ZeroPage
    7f08:	f7fe bf01 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7f0c:	8830      	ldrh	r0, [r6, #0]
    7f0e:	2100      	movs	r1, #0
    7f10:	3001      	adds	r0, #1
    7f12:	b280      	uxth	r0, r0
    7f14:	f7fa fb2c 	bl	2570 <read_byte(unsigned short, bool)>
    register_y = register_y + 1;
    7f18:	4b1f      	ldr	r3, [pc, #124]	; (7f98 <loop+0x161c>)
    7f1a:	7818      	ldrb	r0, [r3, #0]
    7f1c:	3001      	adds	r0, #1
    7f1e:	b2c0      	uxtb	r0, r0
    7f20:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7f22:	f7fa fde9 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC8].length);
    7f26:	4b1a      	ldr	r3, [pc, #104]	; (7f90 <loop+0x1614>)
    7f28:	f893 78d1 	ldrb.w	r7, [r3, #2257]	; 0x8d1
    7f2c:	8833      	ldrh	r3, [r6, #0]
    7f2e:	441f      	add	r7, r3
    7f30:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f32:	463a      	mov	r2, r7
				break; // INY
    7f34:	f7fe beeb 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xC9();
    7f38:	f7fb fdbc 	bl	3ab4 <opcode_0xC9()>
    7f3c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7f3e:	4602      	mov	r2, r0
				break; // CMP - Immediate
    7f40:	f7fe bee5 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    7f44:	8830      	ldrh	r0, [r6, #0]
    7f46:	2100      	movs	r1, #0
    7f48:	3001      	adds	r0, #1
    7f4a:	b280      	uxth	r0, r0
    7f4c:	f7fa fb10 	bl	2570 <read_byte(unsigned short, bool)>
    register_x = register_x - 1;
    7f50:	4b0e      	ldr	r3, [pc, #56]	; (7f8c <loop+0x1610>)
    7f52:	7818      	ldrb	r0, [r3, #0]
    7f54:	3801      	subs	r0, #1
    7f56:	b2c0      	uxtb	r0, r0
    7f58:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7f5a:	f7fa fdcd 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCA].length);
    7f5e:	4b0c      	ldr	r3, [pc, #48]	; (7f90 <loop+0x1614>)
    7f60:	f893 7939 	ldrb.w	r7, [r3, #2361]	; 0x939
    7f64:	8833      	ldrh	r3, [r6, #0]
    7f66:	441f      	add	r7, r3
    7f68:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f6a:	463a      	mov	r2, r7
				break; // DEX
    7f6c:	f7fe becf 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xCB();
    7f70:	f7fe f8d6 	bl	6120 <opcode_0xCB()>
    7f74:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7f76:	4602      	mov	r2, r0
				break; // SBX - Immediate
    7f78:	f7fe bec9 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xCC();
    7f7c:	f7fb fea0 	bl	3cc0 <opcode_0xCC()>
    7f80:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7f82:	4602      	mov	r2, r0
				break; // CPY - Absolute
    7f84:	f7fe bec3 	b.w	6d0e <loop+0x392>
    7f88:	2001889f 	.word	0x2001889f
    7f8c:	200188a0 	.word	0x200188a0
    7f90:	20017418 	.word	0x20017418
    7f94:	20004968 	.word	0x20004968
    7f98:	200188a1 	.word	0x200188a1
    7f9c:	20004969 	.word	0x20004969
    Calculate_CMP(Fetch_Absolute());
    7fa0:	f7fa fe1e 	bl	2be0 <Fetch_Absolute()>
    7fa4:	f7fb fd64 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xCD].length);
    7fa8:	4bcc      	ldr	r3, [pc, #816]	; (82dc <loop+0x1960>)
    7faa:	f893 79d5 	ldrb.w	r7, [r3, #2517]	; 0x9d5
    7fae:	8833      	ldrh	r3, [r6, #0]
    7fb0:	441f      	add	r7, r3
    7fb2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7fb4:	463a      	mov	r2, r7
				break; // CMP - Absolute
    7fb6:	f7fe beaa 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xCE();
    7fba:	f7fc f861 	bl	4080 <opcode_0xCE()>
    7fbe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7fc0:	4602      	mov	r2, r0
				break; // DEC - Absolute
    7fc2:	f7fe bea4 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xCF();
    7fc6:	f7fd fe47 	bl	5c58 <opcode_0xCF()>
    7fca:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7fcc:	4602      	mov	r2, r0
				break; // DCP - Absolute
    7fce:	f7fe be9e 	b.w	6d0e <loop+0x392>
    if ((flag_z) == 0) Branch_Taken();
    7fd2:	4bc3      	ldr	r3, [pc, #780]	; (82e0 <loop+0x1964>)
    7fd4:	781b      	ldrb	r3, [r3, #0]
    7fd6:	079b      	lsls	r3, r3, #30
    7fd8:	f100 81ce 	bmi.w	8378 <loop+0x19fc>
    7fdc:	f7fc fb12 	bl	4604 <Branch_Taken()>
    return(register_pc);
    7fe0:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7fe2:	463a      	mov	r2, r7
				break; // BNE - Branch on Zero Clear
    7fe4:	f7fe be93 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    7fe8:	2001      	movs	r0, #1
    7fea:	f7fa fe9f 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7fee:	f7fb fd3f 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD1].length);
    7ff2:	4bba      	ldr	r3, [pc, #744]	; (82dc <loop+0x1960>)
    7ff4:	f893 7aa5 	ldrb.w	r7, [r3, #2725]	; 0xaa5
    7ff8:	8833      	ldrh	r3, [r6, #0]
    7ffa:	441f      	add	r7, r3
    7ffc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ffe:	463a      	mov	r2, r7
				break; // CMP - Indirect Indexed  Y
    8000:	f7fe be85 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xD6();
    8004:	f7fc f80a 	bl	401c <opcode_0xD6()>
    8008:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    800a:	4602      	mov	r2, r0
				break; // DEC - ZeroPage , X
    800c:	f7fe be7f 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xD7();
    8010:	f7fd fd78 	bl	5b04 <opcode_0xD7()>
    8014:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8016:	4602      	mov	r2, r0
				break; // DCP - ZeroPage , X
    8018:	f7fe be79 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    801c:	8830      	ldrh	r0, [r6, #0]
    801e:	2100      	movs	r1, #0
    8020:	3001      	adds	r0, #1
    8022:	b280      	uxth	r0, r0
    8024:	f7fa faa4 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xD8].length);
    8028:	4bac      	ldr	r3, [pc, #688]	; (82dc <loop+0x1960>)
    register_flags = register_flags & 0xF7;
    802a:	4aad      	ldr	r2, [pc, #692]	; (82e0 <loop+0x1964>)
    return(register_pc + opcode_info[0xD8].length);
    802c:	f893 7c11 	ldrb.w	r7, [r3, #3089]	; 0xc11
    8030:	8833      	ldrh	r3, [r6, #0]
    8032:	441f      	add	r7, r3
    register_flags = register_flags & 0xF7;
    8034:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    8036:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xF7;
    8038:	f023 0308 	bic.w	r3, r3, #8
    803c:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    803e:	463a      	mov	r2, r7
				break; // CLD
    8040:	f7fe be65 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_Absolute_Y(1));
    8044:	2001      	movs	r0, #1
    8046:	f7fa fe17 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    804a:	f7fb fd11 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD9].length);
    804e:	4ba3      	ldr	r3, [pc, #652]	; (82dc <loop+0x1960>)
    8050:	f893 7c45 	ldrb.w	r7, [r3, #3141]	; 0xc45
    8054:	8833      	ldrh	r3, [r6, #0]
    8056:	441f      	add	r7, r3
    8058:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    805a:	463a      	mov	r2, r7
				break; // CMP - Absolute , Y
    805c:	f7fe be57 	b.w	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    8060:	f7fa fd7e 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    8064:	4b9d      	ldr	r3, [pc, #628]	; (82dc <loop+0x1960>)
    8066:	f893 7b41 	ldrb.w	r7, [r3, #2881]	; 0xb41
    806a:	8833      	ldrh	r3, [r6, #0]
    806c:	441f      	add	r7, r3
    806e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8070:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    8072:	f7fe be4c 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_ZeroPage_X());
    8076:	f7fa fd73 	bl	2b60 <Fetch_ZeroPage_X()>
    807a:	f7fb fcf9 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD5].length);
    807e:	4b97      	ldr	r3, [pc, #604]	; (82dc <loop+0x1960>)
    8080:	f893 7b75 	ldrb.w	r7, [r3, #2933]	; 0xb75
    8084:	8833      	ldrh	r3, [r6, #0]
    8086:	441f      	add	r7, r3
    8088:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    808a:	463a      	mov	r2, r7
				break; // CMP - ZeroPage , X
    808c:	f7fe be3f 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xD3();
    8090:	f7fd fda8 	bl	5be4 <opcode_0xD3()>
    8094:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8096:	4602      	mov	r2, r0
				break; // DCP - Indirect Indexed  Y
    8098:	f7fe be39 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xDB();
    809c:	f7fd fe4e 	bl	5d3c <opcode_0xDB()>
    80a0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80a2:	4602      	mov	r2, r0
				break; // DCP - Absolute , Y
    80a4:	f7fe be33 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    80a8:	2001      	movs	r0, #1
    80aa:	f7fa fdb5 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    80ae:	4b8b      	ldr	r3, [pc, #556]	; (82dc <loop+0x1960>)
    80b0:	f893 7ce1 	ldrb.w	r7, [r3, #3297]	; 0xce1
    80b4:	8833      	ldrh	r3, [r6, #0]
    80b6:	441f      	add	r7, r3
    80b8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    80ba:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    80bc:	f7fe be27 	b.w	6d0e <loop+0x392>
    Calculate_CMP(Fetch_Absolute_X(1));
    80c0:	2001      	movs	r0, #1
    80c2:	f7fa fda9 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    80c6:	f7fb fcd3 	bl	3a70 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xDD].length);
    80ca:	4b84      	ldr	r3, [pc, #528]	; (82dc <loop+0x1960>)
    80cc:	f893 7d15 	ldrb.w	r7, [r3, #3349]	; 0xd15
    80d0:	8833      	ldrh	r3, [r6, #0]
    80d2:	441f      	add	r7, r3
    80d4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    80d6:	463a      	mov	r2, r7
				break; // CMP - Absolute , X
    80d8:	f7fe be19 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xDE();
    80dc:	f7fc f802 	bl	40e4 <opcode_0xDE()>
    80e0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80e2:	4602      	mov	r2, r0
				break; // DEC - Absolute , X
    80e4:	f7fe be13 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xDF();
    80e8:	f7fd fdee 	bl	5cc8 <opcode_0xDF()>
    80ec:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80ee:	4602      	mov	r2, r0
				break; // DCP - Absolute , X
    80f0:	f7fe be0d 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xE0();
    80f4:	f7fb fd06 	bl	3b04 <opcode_0xE0()>
    80f8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80fa:	4602      	mov	r2, r0
				break; // CPX - Immediate
    80fc:	f7fe be07 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    8100:	f7fa fdea 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    8104:	b280      	uxth	r0, r0
    8106:	f7fb fb2b 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    810a:	4b74      	ldr	r3, [pc, #464]	; (82dc <loop+0x1960>)
    810c:	f893 7de5 	ldrb.w	r7, [r3, #3557]	; 0xde5
    8110:	8833      	ldrh	r3, [r6, #0]
    8112:	441f      	add	r7, r3
    8114:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8116:	463a      	mov	r2, r7
				break; // SBC - Indexed Indirect X
    8118:	f7fe bdf9 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xEC();
    811c:	f7fb fd4a 	bl	3bb4 <opcode_0xEC()>
    8120:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8122:	4602      	mov	r2, r0
				break; // CPX - Absolute
    8124:	f7fe bdf3 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_Absolute());
    8128:	f7fa fd5a 	bl	2be0 <Fetch_Absolute()>
    812c:	b280      	uxth	r0, r0
    812e:	f7fb fb17 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    8132:	4b6c      	ldr	r3, [pc, #432]	; (82e4 <loop+0x1968>)
    8134:	f893 7055 	ldrb.w	r7, [r3, #85]	; 0x55
    8138:	8833      	ldrh	r3, [r6, #0]
    813a:	441f      	add	r7, r3
    813c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    813e:	463a      	mov	r2, r7
				break; // SBC - Absolute
    8140:	f7fe bde5 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xEE();
    8144:	f7fb ff0c 	bl	3f60 <opcode_0xEE()>
    8148:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    814a:	4602      	mov	r2, r0
				break; // INC - Absolute
    814c:	f7fe bddf 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xEF();
    8150:	f7fd fed2 	bl	5ef8 <opcode_0xEF()>
    8154:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8156:	4602      	mov	r2, r0
				break; // ISC - Absolute
    8158:	f7fe bdd9 	b.w	6d0e <loop+0x392>
    if ((flag_z) == 1) Branch_Taken();
    815c:	4b60      	ldr	r3, [pc, #384]	; (82e0 <loop+0x1964>)
    815e:	7819      	ldrb	r1, [r3, #0]
    8160:	f011 0102 	ands.w	r1, r1, #2
    8164:	f000 80ed 	beq.w	8342 <loop+0x19c6>
    8168:	f7fc fa4c 	bl	4604 <Branch_Taken()>
    return(register_pc);
    816c:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    816e:	463a      	mov	r2, r7
				break; // BEQ - Branch on Zero Set
    8170:	f7fe bdcd 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    8174:	2001      	movs	r0, #1
    8176:	f7fa fdd9 	bl	2d2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    817a:	b280      	uxth	r0, r0
    817c:	f7fb faf0 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    8180:	4b58      	ldr	r3, [pc, #352]	; (82e4 <loop+0x1968>)
    8182:	f893 7125 	ldrb.w	r7, [r3, #293]	; 0x125
    8186:	8833      	ldrh	r3, [r6, #0]
    8188:	441f      	add	r7, r3
    818a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    818c:	463a      	mov	r2, r7
				break; // SBC - Indirect Indexed  Y
    818e:	f7fe bdbe 	b.w	6d0e <loop+0x392>
    Fetch_ZeroPage_X();
    8192:	f7fa fce5 	bl	2b60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    8196:	4b53      	ldr	r3, [pc, #332]	; (82e4 <loop+0x1968>)
    8198:	f893 71c1 	ldrb.w	r7, [r3, #449]	; 0x1c1
    819c:	8833      	ldrh	r3, [r6, #0]
    819e:	441f      	add	r7, r3
    81a0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    81a2:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    81a4:	f7fe bdb3 	b.w	6d0e <loop+0x392>
    Fetch_Immediate(1);
    81a8:	2001      	movs	r0, #1
    81aa:	f7fa fcb9 	bl	2b20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    81ae:	4b4b      	ldr	r3, [pc, #300]	; (82dc <loop+0x1960>)
    81b0:	f893 7e19 	ldrb.w	r7, [r3, #3609]	; 0xe19
    81b4:	8833      	ldrh	r3, [r6, #0]
    81b6:	441f      	add	r7, r3
    81b8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    81ba:	463a      	mov	r2, r7
				break; // NOP - Immediate
    81bc:	f7fe bda7 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xF3();
    81c0:	f7fd fe72 	bl	5ea8 <opcode_0xF3()>
    81c4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81c6:	4602      	mov	r2, r0
				break; // ISC - Indirect Indexed  Y
    81c8:	f7fe bda1 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xE3();
    81cc:	f7fd fe46 	bl	5e5c <opcode_0xE3()>
    81d0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81d2:	4602      	mov	r2, r0
				break; // ISC - Indexed Indirect X
    81d4:	f7fe bd9b 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xE4();
    81d8:	f7fb fcbc 	bl	3b54 <opcode_0xE4()>
    81dc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81de:	4602      	mov	r2, r0
				break; // CPX - ZeroPage
    81e0:	f7fe bd95 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_ZeroPage());
    81e4:	f7fa fca8 	bl	2b38 <Fetch_ZeroPage()>
    81e8:	b280      	uxth	r0, r0
    81ea:	f7fb fab9 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    81ee:	4b3b      	ldr	r3, [pc, #236]	; (82dc <loop+0x1960>)
    81f0:	f893 7eb5 	ldrb.w	r7, [r3, #3765]	; 0xeb5
    81f4:	8833      	ldrh	r3, [r6, #0]
    81f6:	441f      	add	r7, r3
    81f8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    81fa:	463a      	mov	r2, r7
				break; // SBC - ZeroPage
    81fc:	f7fe bd87 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xFF();
    8200:	f7fd fea0 	bl	5f44 <opcode_0xFF()>
    8204:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8206:	4602      	mov	r2, r0
				break; // 
    8208:	f7fe bd81 	b.w	6d0e <loop+0x392>
				irq_handler(0x1);
    820c:	2001      	movs	r0, #1
    820e:	f7fb f8a9 	bl	3364 <irq_handler(unsigned char)>
				break; // BRK - Break
    8212:	2200      	movs	r2, #0
		uint16_t next_pc = 0;
    8214:	4617      	mov	r7, r2
				break; // BRK - Break
    8216:	f7fe bd7a 	b.w	6d0e <loop+0x392>
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    821a:	f7fa fd5d 	bl	2cd8 <Fetch_Indexed_Indirect_X()>
    821e:	4b32      	ldr	r3, [pc, #200]	; (82e8 <loop+0x196c>)
    8220:	781a      	ldrb	r2, [r3, #0]
    8222:	4310      	orrs	r0, r2
    8224:	b2c0      	uxtb	r0, r0
    8226:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8228:	f7fa fc66 	bl	2af8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x01].length);
    822c:	4b2f      	ldr	r3, [pc, #188]	; (82ec <loop+0x1970>)
    822e:	f893 7065 	ldrb.w	r7, [r3, #101]	; 0x65
    8232:	8833      	ldrh	r3, [r6, #0]
    8234:	441f      	add	r7, r3
    8236:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8238:	463a      	mov	r2, r7
				break; // OR - Indexed Indirect X
    823a:	f7fe bd68 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_ZeroPage_X());
    823e:	f7fa fc8f 	bl	2b60 <Fetch_ZeroPage_X()>
    8242:	b280      	uxth	r0, r0
    8244:	f7fb fa8c 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    8248:	4b26      	ldr	r3, [pc, #152]	; (82e4 <loop+0x1968>)
    824a:	f893 71f5 	ldrb.w	r7, [r3, #501]	; 0x1f5
    824e:	8833      	ldrh	r3, [r6, #0]
    8250:	441f      	add	r7, r3
    8252:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8254:	463a      	mov	r2, r7
				break; // SBC - ZeroPage , X
    8256:	f7fe bd5a 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xF6();
    825a:	f7fb fe4f 	bl	3efc <opcode_0xF6()>
    825e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8260:	4602      	mov	r2, r0
				break; // INC - ZeroPage , X
    8262:	f7fe bd54 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xF7();
    8266:	f7fd fdd3 	bl	5e10 <opcode_0xF7()>
    826a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    826c:	4602      	mov	r2, r0
				break; // ISC - ZeroPage , X
    826e:	f7fe bd4e 	b.w	6d0e <loop+0x392>
    read_byte(register_pc+1, false);
    8272:	8830      	ldrh	r0, [r6, #0]
    8274:	2100      	movs	r1, #0
    8276:	3001      	adds	r0, #1
    8278:	b280      	uxth	r0, r0
    827a:	f7fa f979 	bl	2570 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xF8].length);
    827e:	4b19      	ldr	r3, [pc, #100]	; (82e4 <loop+0x1968>)
    register_flags = register_flags | 0x08;
    8280:	4a17      	ldr	r2, [pc, #92]	; (82e0 <loop+0x1964>)
    return(register_pc + opcode_info[0xF8].length);
    8282:	f893 7291 	ldrb.w	r7, [r3, #657]	; 0x291
    8286:	8833      	ldrh	r3, [r6, #0]
    8288:	441f      	add	r7, r3
    register_flags = register_flags | 0x08;
    828a:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    828c:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x08;
    828e:	f043 0308 	orr.w	r3, r3, #8
    8292:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    8294:	463a      	mov	r2, r7
				break; // SED
    8296:	f7fe bd3a 	b.w	6d0e <loop+0x392>
    Calculate_SBC(Fetch_Absolute_Y(1));
    829a:	2001      	movs	r0, #1
    829c:	f7fa fcec 	bl	2c78 <Fetch_Absolute_Y(unsigned char)>
    82a0:	b280      	uxth	r0, r0
    82a2:	f7fb fa5d 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    82a6:	4b0f      	ldr	r3, [pc, #60]	; (82e4 <loop+0x1968>)
    82a8:	f893 72c5 	ldrb.w	r7, [r3, #709]	; 0x2c5
    82ac:	8833      	ldrh	r3, [r6, #0]
    82ae:	441f      	add	r7, r3
    82b0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    82b2:	463a      	mov	r2, r7
				break; // SBC - Absolute , Y
    82b4:	f7fe bd2b 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xFB();
    82b8:	f7fd fe6c 	bl	5f94 <opcode_0xFB()>
    82bc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    82be:	4602      	mov	r2, r0
				break; // ISC - Absolute , Y
    82c0:	f7fe bd25 	b.w	6d0e <loop+0x392>
    Fetch_Absolute_X(1);
    82c4:	2001      	movs	r0, #1
    82c6:	f7fa fca7 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    82ca:	4b06      	ldr	r3, [pc, #24]	; (82e4 <loop+0x1968>)
    82cc:	f893 7361 	ldrb.w	r7, [r3, #865]	; 0x361
    82d0:	8833      	ldrh	r3, [r6, #0]
    82d2:	441f      	add	r7, r3
    82d4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    82d6:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    82d8:	f7fe bd19 	b.w	6d0e <loop+0x392>
    82dc:	20017418 	.word	0x20017418
    82e0:	20004968 	.word	0x20004968
    82e4:	20018418 	.word	0x20018418
    82e8:	2001889f 	.word	0x2001889f
    82ec:	20015418 	.word	0x20015418
    Calculate_SBC(Fetch_Absolute_X(1));
    82f0:	2001      	movs	r0, #1
    82f2:	f7fa fc91 	bl	2c18 <Fetch_Absolute_X(unsigned char)>
    82f6:	b280      	uxth	r0, r0
    82f8:	f7fb fa32 	bl	3760 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    82fc:	4b2a      	ldr	r3, [pc, #168]	; (83a8 <loop+0x1a2c>)
    82fe:	f893 7395 	ldrb.w	r7, [r3, #917]	; 0x395
    8302:	8833      	ldrh	r3, [r6, #0]
    8304:	441f      	add	r7, r3
    8306:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8308:	463a      	mov	r2, r7
				break; // SBC - Absolute , X
    830a:	f7fe bd00 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xE6();
    830e:	f7fb fdc9 	bl	3ea4 <opcode_0xE6()>
    8312:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8314:	4602      	mov	r2, r0
				break; // INC - ZeroPage
    8316:	f7fe bcfa 	b.w	6d0e <loop+0x392>
				next_pc = opcode_0xE7();
    831a:	f7fd fd49 	bl	5db0 <opcode_0xE7()>
    831e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8320:	4602      	mov	r2, r0
				break; // ISC - ZeroPage
    8322:	f7fe bcf4 	b.w	6d0e <loop+0x392>
    8326:	211a      	movs	r1, #26
    8328:	4820      	ldr	r0, [pc, #128]	; (83ac <loop+0x1a30>)
    832a:	f001 fd23 	bl	9d74 <usb_serial_write>
    832e:	4820      	ldr	r0, [pc, #128]	; (83b0 <loop+0x1a34>)
    8330:	f000 f89c 	bl	846c <Print::println()>
				run_mode = WAITING;
    8334:	f04f 0300 	mov.w	r3, #0
    8338:	2200      	movs	r2, #0
    833a:	702b      	strb	r3, [r5, #0]
		uint16_t next_pc = 0;
    833c:	4617      	mov	r7, r2
    833e:	f7fe bcef 	b.w	6d20 <loop+0x3a4>
    return read_byte(register_pc+offset, false);
    8342:	8830      	ldrh	r0, [r6, #0]
    8344:	3001      	adds	r0, #1
    8346:	b280      	uxth	r0, r0
    8348:	f7fa f912 	bl	2570 <read_byte(unsigned short, bool)>
    834c:	e70e      	b.n	816c <loop+0x17f0>
    834e:	8830      	ldrh	r0, [r6, #0]
    8350:	3001      	adds	r0, #1
    8352:	b280      	uxth	r0, r0
    8354:	f7fa f90c 	bl	2570 <read_byte(unsigned short, bool)>
    8358:	f7fe bfdc 	b.w	7314 <loop+0x998>
    835c:	8830      	ldrh	r0, [r6, #0]
    835e:	2100      	movs	r1, #0
    8360:	3001      	adds	r0, #1
    8362:	b280      	uxth	r0, r0
    8364:	f7fa f904 	bl	2570 <read_byte(unsigned short, bool)>
    8368:	f7ff b890 	b.w	748c <loop+0xb10>
    836c:	8830      	ldrh	r0, [r6, #0]
    836e:	3001      	adds	r0, #1
    8370:	b280      	uxth	r0, r0
    8372:	f7fa f8fd 	bl	2570 <read_byte(unsigned short, bool)>
    8376:	e490      	b.n	7c9a <loop+0x131e>
    8378:	8830      	ldrh	r0, [r6, #0]
    837a:	2100      	movs	r1, #0
    837c:	3001      	adds	r0, #1
    837e:	b280      	uxth	r0, r0
    8380:	f7fa f8f6 	bl	2570 <read_byte(unsigned short, bool)>
    8384:	e62c      	b.n	7fe0 <loop+0x1664>
    8386:	8830      	ldrh	r0, [r6, #0]
    8388:	2100      	movs	r1, #0
    838a:	3001      	adds	r0, #1
    838c:	b280      	uxth	r0, r0
    838e:	f7fa f8ef 	bl	2570 <read_byte(unsigned short, bool)>
    8392:	f7ff ba91 	b.w	78b8 <loop+0xf3c>
        Fetch_Immediate(1);
    8396:	2001      	movs	r0, #1
    8398:	f7fa fbc2 	bl	2b20 <Fetch_Immediate(unsigned char)>
}
    839c:	f7fe bd89 	b.w	6eb2 <loop+0x536>
    if ((flag_n) == 1) Branch_Taken();
    83a0:	f7fc f930 	bl	4604 <Branch_Taken()>
    83a4:	f7fe beab 	b.w	70fe <loop+0x782>
    83a8:	20018418 	.word	0x20018418
    83ac:	20001058 	.word	0x20001058
    83b0:	20004358 	.word	0x20004358

000083b4 <_GLOBAL__sub_I_opcode_info>:
}
    83b4:	b538      	push	{r3, r4, r5, lr}
    83b6:	4c12      	ldr	r4, [pc, #72]	; (8400 <_GLOBAL__sub_I_opcode_info+0x4c>)
    83b8:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    83bc:	2100      	movs	r1, #0
    83be:	4620      	mov	r0, r4
    83c0:	f000 f8d0 	bl	8564 <String::String(char const*)>
    83c4:	2100      	movs	r1, #0
    83c6:	f104 0010 	add.w	r0, r4, #16
    83ca:	f000 f8cb 	bl	8564 <String::String(char const*)>
    83ce:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    83d2:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    83d4:	2100      	movs	r1, #0
    83d6:	f000 f8c5 	bl	8564 <String::String(char const*)>
OpDecoder opcode_info[256];
    83da:	42ac      	cmp	r4, r5
    83dc:	d1ee      	bne.n	83bc <_GLOBAL__sub_I_opcode_info+0x8>
    83de:	4a09      	ldr	r2, [pc, #36]	; (8404 <_GLOBAL__sub_I_opcode_info+0x50>)
    83e0:	2000      	movs	r0, #0
    83e2:	4909      	ldr	r1, [pc, #36]	; (8408 <_GLOBAL__sub_I_opcode_info+0x54>)
    83e4:	f002 f89c 	bl	a520 <__aeabi_atexit>
String last_command = "";
    83e8:	4908      	ldr	r1, [pc, #32]	; (840c <_GLOBAL__sub_I_opcode_info+0x58>)
    83ea:	4809      	ldr	r0, [pc, #36]	; (8410 <_GLOBAL__sub_I_opcode_info+0x5c>)
    83ec:	f000 f8ba 	bl	8564 <String::String(char const*)>
    83f0:	4a04      	ldr	r2, [pc, #16]	; (8404 <_GLOBAL__sub_I_opcode_info+0x50>)
    83f2:	4908      	ldr	r1, [pc, #32]	; (8414 <_GLOBAL__sub_I_opcode_info+0x60>)
    83f4:	4806      	ldr	r0, [pc, #24]	; (8410 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    83f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    83fa:	f002 b891 	b.w	a520 <__aeabi_atexit>
    83fe:	bf00      	nop
    8400:	20015418 	.word	0x20015418
    8404:	20004370 	.word	0x20004370
    8408:	0000009d 	.word	0x0000009d
    840c:	2000047c 	.word	0x2000047c
    8410:	200153f0 	.word	0x200153f0
    8414:	000084ed 	.word	0x000084ed

00008418 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8418:	4608      	mov	r0, r1
    841a:	f001 bc95 	b.w	9d48 <usb_serial_putchar>
    841e:	bf00      	nop

00008420 <Print::print(String const&)>:
{
    8420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8424:	688c      	ldr	r4, [r1, #8]
    8426:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    8428:	b1dc      	cbz	r4, 8462 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    842a:	2500      	movs	r5, #0
    842c:	4688      	mov	r8, r1
    842e:	4606      	mov	r6, r0
	size_t count = 0;
    8430:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8432:	462b      	mov	r3, r5
    8434:	2221      	movs	r2, #33	; 0x21
    8436:	a901      	add	r1, sp, #4
    8438:	4640      	mov	r0, r8
    843a:	f000 f961 	bl	8700 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    843e:	2c20      	cmp	r4, #32
    8440:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    8442:	6833      	ldr	r3, [r6, #0]
    8444:	bf28      	it	cs
    8446:	2220      	movcs	r2, #32
    8448:	a901      	add	r1, sp, #4
    844a:	4630      	mov	r0, r6
    844c:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    844e:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    8450:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    8452:	4798      	blx	r3
    8454:	4407      	add	r7, r0
	while (len > 0) {
    8456:	2c00      	cmp	r4, #0
    8458:	d1eb      	bne.n	8432 <Print::print(String const&)+0x12>
}
    845a:	4638      	mov	r0, r7
    845c:	b00a      	add	sp, #40	; 0x28
    845e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    8462:	4627      	mov	r7, r4
}
    8464:	4638      	mov	r0, r7
    8466:	b00a      	add	sp, #40	; 0x28
    8468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000846c <Print::println()>:
{
    846c:	b500      	push	{lr}
	return write(buf, 2);
    846e:	6803      	ldr	r3, [r0, #0]
{
    8470:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    8472:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    8476:	2202      	movs	r2, #2
    8478:	a901      	add	r1, sp, #4
    847a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    847c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    8480:	4798      	blx	r3
}
    8482:	b003      	add	sp, #12
    8484:	f85d fb04 	ldr.w	pc, [sp], #4

00008488 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8488:	4b05      	ldr	r3, [pc, #20]	; (84a0 <_write+0x18>)
    848a:	2802      	cmp	r0, #2
    848c:	bf88      	it	hi
    848e:	4603      	movhi	r3, r0
{
    8490:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8492:	681c      	ldr	r4, [r3, #0]
    8494:	4618      	mov	r0, r3
    8496:	6863      	ldr	r3, [r4, #4]
}
    8498:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    849c:	4718      	bx	r3
    849e:	bf00      	nop
    84a0:	20004358 	.word	0x20004358

000084a4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    84a4:	f001 bc40 	b.w	9d28 <usb_serial_getchar>

000084a8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    84a8:	f001 bbd8 	b.w	9c5c <usb_serial_peekchar>

000084ac <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    84ac:	6081      	str	r1, [r0, #8]
}
    84ae:	4770      	bx	lr

000084b0 <String::String(String const&)>:
String::String(const String &value)
    84b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    84b2:	4288      	cmp	r0, r1
	buffer = NULL;
    84b4:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    84b8:	4604      	mov	r4, r0
	len = 0;
    84ba:	6085      	str	r5, [r0, #8]
	flags = 0;
    84bc:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    84be:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    84c2:	d002      	beq.n	84ca <String::String(String const&)+0x1a>
    84c4:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    84c6:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    84c8:	b90e      	cbnz	r6, 84ce <String::String(String const&)+0x1e>
}
    84ca:	4620      	mov	r0, r4
    84cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    84ce:	1c70      	adds	r0, r6, #1
    84d0:	f002 f830 	bl	a534 <malloc>
	if (newbuffer) {
    84d4:	2800      	cmp	r0, #0
    84d6:	d0f8      	beq.n	84ca <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    84d8:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    84da:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    84dc:	6020      	str	r0, [r4, #0]
	len = length;
    84de:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    84e2:	f003 fb2b 	bl	bb3c <strcpy>
}
    84e6:	4620      	mov	r0, r4
    84e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84ea:	bf00      	nop

000084ec <String::~String()>:
String::~String()
    84ec:	b510      	push	{r4, lr}
    84ee:	4604      	mov	r4, r0
	free(buffer);
    84f0:	6800      	ldr	r0, [r0, #0]
    84f2:	f002 f827 	bl	a544 <free>
}
    84f6:	4620      	mov	r0, r4
    84f8:	bd10      	pop	{r4, pc}
    84fa:	bf00      	nop

000084fc <String::copy(char const*, unsigned int)>:
{
    84fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84fe:	4604      	mov	r4, r0
	if (length == 0) {
    8500:	4615      	mov	r5, r2
    8502:	b932      	cbnz	r2, 8512 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8504:	6803      	ldr	r3, [r0, #0]
    8506:	b103      	cbz	r3, 850a <String::copy(char const*, unsigned int)+0xe>
    8508:	701a      	strb	r2, [r3, #0]
		len = 0;
    850a:	2300      	movs	r3, #0
}
    850c:	4620      	mov	r0, r4
		len = 0;
    850e:	60a3      	str	r3, [r4, #8]
}
    8510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8512:	6843      	ldr	r3, [r0, #4]
    8514:	460e      	mov	r6, r1
    8516:	429a      	cmp	r2, r3
    8518:	d91c      	bls.n	8554 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    851a:	1c51      	adds	r1, r2, #1
    851c:	6800      	ldr	r0, [r0, #0]
    851e:	f002 fad5 	bl	aacc <realloc>
	if (newbuffer) {
    8522:	4607      	mov	r7, r0
    8524:	b160      	cbz	r0, 8540 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8526:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8528:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    852c:	b90b      	cbnz	r3, 8532 <String::copy(char const*, unsigned int)+0x36>
    852e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    8530:	6827      	ldr	r7, [r4, #0]
    8532:	4631      	mov	r1, r6
    8534:	4638      	mov	r0, r7
	len = length;
    8536:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8538:	f003 fb00 	bl	bb3c <strcpy>
}
    853c:	4620      	mov	r0, r4
    853e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    8540:	6820      	ldr	r0, [r4, #0]
    8542:	b110      	cbz	r0, 854a <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    8544:	f001 fffe 	bl	a544 <free>
			buffer = NULL;
    8548:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    854a:	2300      	movs	r3, #0
}
    854c:	4620      	mov	r0, r4
		len = capacity = 0;
    854e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    8552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    8554:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    8556:	4631      	mov	r1, r6
	len = length;
    8558:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    855a:	4638      	mov	r0, r7
    855c:	f003 faee 	bl	bb3c <strcpy>
	return *this;
    8560:	e7ec      	b.n	853c <String::copy(char const*, unsigned int)+0x40>
    8562:	bf00      	nop

00008564 <String::String(char const*)>:
String::String(const char *cstr)
    8564:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    8566:	2300      	movs	r3, #0
String::String(const char *cstr)
    8568:	4604      	mov	r4, r0
	capacity = 0;
    856a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    856e:	6083      	str	r3, [r0, #8]
	flags = 0;
    8570:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    8572:	b141      	cbz	r1, 8586 <String::String(char const*)+0x22>
    8574:	460d      	mov	r5, r1
    8576:	4608      	mov	r0, r1
    8578:	f003 fb42 	bl	bc00 <strlen>
    857c:	4602      	mov	r2, r0
    857e:	4629      	mov	r1, r5
    8580:	4620      	mov	r0, r4
    8582:	f7ff ffbb 	bl	84fc <String::copy(char const*, unsigned int)>
}
    8586:	4620      	mov	r0, r4
    8588:	bd38      	pop	{r3, r4, r5, pc}
    858a:	bf00      	nop

0000858c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    858c:	4281      	cmp	r1, r0
    858e:	d003      	beq.n	8598 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    8590:	688a      	ldr	r2, [r1, #8]
    8592:	6809      	ldr	r1, [r1, #0]
    8594:	f7ff bfb2 	b.w	84fc <String::copy(char const*, unsigned int)>
}
    8598:	4770      	bx	lr
    859a:	bf00      	nop

0000859c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    859c:	4288      	cmp	r0, r1
{
    859e:	b538      	push	{r3, r4, r5, lr}
    85a0:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    85a2:	d00e      	beq.n	85c2 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    85a4:	6800      	ldr	r0, [r0, #0]
    85a6:	460c      	mov	r4, r1
    85a8:	b108      	cbz	r0, 85ae <String::operator=(String&&)+0x12>
    85aa:	f001 ffcb 	bl	a544 <free>
	len = rhs.len;
    85ae:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    85b0:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    85b2:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    85b6:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    85b8:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    85bc:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    85c0:	60a3      	str	r3, [r4, #8]
}
    85c2:	4628      	mov	r0, r5
    85c4:	bd38      	pop	{r3, r4, r5, pc}
    85c6:	bf00      	nop

000085c8 <String::operator=(char const*)>:
{
    85c8:	b538      	push	{r3, r4, r5, lr}
    85ca:	4605      	mov	r5, r0
	if (cstr) {
    85cc:	460c      	mov	r4, r1
    85ce:	b149      	cbz	r1, 85e4 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    85d0:	4608      	mov	r0, r1
    85d2:	f003 fb15 	bl	bc00 <strlen>
    85d6:	4621      	mov	r1, r4
    85d8:	4602      	mov	r2, r0
    85da:	4628      	mov	r0, r5
    85dc:	f7ff ff8e 	bl	84fc <String::copy(char const*, unsigned int)>
}
    85e0:	4628      	mov	r0, r5
    85e2:	bd38      	pop	{r3, r4, r5, pc}
    85e4:	4628      	mov	r0, r5
		len = 0;
    85e6:	60a9      	str	r1, [r5, #8]
}
    85e8:	bd38      	pop	{r3, r4, r5, pc}
    85ea:	bf00      	nop

000085ec <String::append(char const*, unsigned int)>:
{
    85ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    85f0:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    85f2:	6800      	ldr	r0, [r0, #0]
{
    85f4:	460d      	mov	r5, r1
    85f6:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    85f8:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    85fa:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    85fc:	d809      	bhi.n	8612 <String::append(char const*, unsigned int)+0x26>
    85fe:	18c2      	adds	r2, r0, r3
    8600:	4291      	cmp	r1, r2
    8602:	d206      	bcs.n	8612 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    8604:	1a0f      	subs	r7, r1, r0
		self = true;
    8606:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    860a:	b936      	cbnz	r6, 861a <String::append(char const*, unsigned int)+0x2e>
}
    860c:	4620      	mov	r0, r4
    860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    8612:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    8616:	2e00      	cmp	r6, #0
    8618:	d0f8      	beq.n	860c <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    861a:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    861e:	6862      	ldr	r2, [r4, #4]
    8620:	4590      	cmp	r8, r2
    8622:	d90c      	bls.n	863e <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8624:	f108 0101 	add.w	r1, r8, #1
    8628:	f002 fa50 	bl	aacc <realloc>
	if (newbuffer) {
    862c:	2800      	cmp	r0, #0
    862e:	d0ed      	beq.n	860c <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    8630:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8632:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    8636:	b913      	cbnz	r3, 863e <String::append(char const*, unsigned int)+0x52>
    8638:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    863a:	6820      	ldr	r0, [r4, #0]
    863c:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    863e:	f1b9 0f00 	cmp.w	r9, #0
    8642:	d108      	bne.n	8656 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    8644:	4629      	mov	r1, r5
    8646:	4418      	add	r0, r3
    8648:	f003 fa78 	bl	bb3c <strcpy>
}
    864c:	4620      	mov	r0, r4
	len = newlen;
    864e:	f8c4 8008 	str.w	r8, [r4, #8]
}
    8652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    8656:	4632      	mov	r2, r6
    8658:	19c1      	adds	r1, r0, r7
    865a:	4418      	add	r0, r3
    865c:	f000 f9ca 	bl	89f4 <memcpy>
		buffer[newlen] = 0;
    8660:	6823      	ldr	r3, [r4, #0]
    8662:	2200      	movs	r2, #0
    8664:	f803 2008 	strb.w	r2, [r3, r8]
    8668:	e7f0      	b.n	864c <String::append(char const*, unsigned int)+0x60>
    866a:	bf00      	nop

0000866c <String::append(char)>:
{
    866c:	b510      	push	{r4, lr}
    866e:	b082      	sub	sp, #8
	buf[1] = 0;
    8670:	2300      	movs	r3, #0
{
    8672:	4604      	mov	r4, r0
	append(buf, 1);
    8674:	2201      	movs	r2, #1
	buf[0] = c;
    8676:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    867a:	a901      	add	r1, sp, #4
	buf[1] = 0;
    867c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    8680:	f7ff ffb4 	bl	85ec <String::append(char const*, unsigned int)>
}
    8684:	4620      	mov	r0, r4
    8686:	b002      	add	sp, #8
    8688:	bd10      	pop	{r4, pc}
    868a:	bf00      	nop

0000868c <operator+(StringSumHelper const&, String const&)>:
{
    868c:	b510      	push	{r4, lr}
    868e:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    8690:	688a      	ldr	r2, [r1, #8]
    8692:	6809      	ldr	r1, [r1, #0]
    8694:	f7ff ffaa 	bl	85ec <String::append(char const*, unsigned int)>
}
    8698:	4620      	mov	r0, r4
    869a:	bd10      	pop	{r4, pc}

0000869c <operator+(StringSumHelper const&, char const*)>:
{
    869c:	b538      	push	{r3, r4, r5, lr}
    869e:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    86a0:	b141      	cbz	r1, 86b4 <operator+(StringSumHelper const&, char const*)+0x18>
    86a2:	460c      	mov	r4, r1
    86a4:	4608      	mov	r0, r1
    86a6:	f003 faab 	bl	bc00 <strlen>
    86aa:	4602      	mov	r2, r0
    86ac:	4621      	mov	r1, r4
    86ae:	4628      	mov	r0, r5
    86b0:	f7ff ff9c 	bl	85ec <String::append(char const*, unsigned int)>
}
    86b4:	4628      	mov	r0, r5
    86b6:	bd38      	pop	{r3, r4, r5, pc}

000086b8 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    86b8:	6882      	ldr	r2, [r0, #8]
{
    86ba:	b508      	push	{r3, lr}
    86bc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    86be:	b13a      	cbz	r2, 86d0 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    86c0:	b161      	cbz	r1, 86dc <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    86c2:	6800      	ldr	r0, [r0, #0]
    86c4:	f003 f8d0 	bl	b868 <strcmp>
    86c8:	fab0 f080 	clz	r0, r0
    86cc:	0940      	lsrs	r0, r0, #5
}
    86ce:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    86d0:	b131      	cbz	r1, 86e0 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    86d2:	7818      	ldrb	r0, [r3, #0]
    86d4:	fab0 f080 	clz	r0, r0
    86d8:	0940      	lsrs	r0, r0, #5
}
    86da:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    86dc:	6803      	ldr	r3, [r0, #0]
    86de:	e7f8      	b.n	86d2 <String::equals(char const*) const+0x1a>
    86e0:	2001      	movs	r0, #1
}
    86e2:	bd08      	pop	{r3, pc}

000086e4 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    86e4:	6883      	ldr	r3, [r0, #8]
    86e6:	428b      	cmp	r3, r1
    86e8:	d903      	bls.n	86f2 <String::operator[](unsigned int)+0xe>
    86ea:	6800      	ldr	r0, [r0, #0]
    86ec:	b108      	cbz	r0, 86f2 <String::operator[](unsigned int)+0xe>
	return buffer[index];
    86ee:	4408      	add	r0, r1
}
    86f0:	4770      	bx	lr
		dummy_writable_char = 0;
    86f2:	4b02      	ldr	r3, [pc, #8]	; (86fc <String::operator[](unsigned int)+0x18>)
    86f4:	2200      	movs	r2, #0
		return dummy_writable_char;
    86f6:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    86f8:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    86fa:	4770      	bx	lr
    86fc:	20018893 	.word	0x20018893

00008700 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    8700:	b1c2      	cbz	r2, 8734 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    8702:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    8704:	fab1 f681 	clz	r6, r1
    8708:	460c      	mov	r4, r1
    870a:	0976      	lsrs	r6, r6, #5
    870c:	b119      	cbz	r1, 8716 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    870e:	6885      	ldr	r5, [r0, #8]
    8710:	429d      	cmp	r5, r3
    8712:	d801      	bhi.n	8718 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    8714:	700e      	strb	r6, [r1, #0]
}
    8716:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    8718:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    871a:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    871e:	6801      	ldr	r1, [r0, #0]
    8720:	4620      	mov	r0, r4
    8722:	4565      	cmp	r5, ip
    8724:	4419      	add	r1, r3
    8726:	bf28      	it	cs
    8728:	4665      	movcs	r5, ip
    872a:	462a      	mov	r2, r5
    872c:	f002 ffc2 	bl	b6b4 <strncpy>
	buf[n] = 0;
    8730:	5566      	strb	r6, [r4, r5]
}
    8732:	bd70      	pop	{r4, r5, r6, pc}
    8734:	4770      	bx	lr
    8736:	bf00      	nop

00008738 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    8738:	6883      	ldr	r3, [r0, #8]
    873a:	b13b      	cbz	r3, 874c <String::indexOf(char) const+0x14>
{
    873c:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    873e:	6804      	ldr	r4, [r0, #0]
    8740:	4620      	mov	r0, r4
    8742:	f002 ff51 	bl	b5e8 <strchr>
	if (temp == NULL) return -1;
    8746:	b120      	cbz	r0, 8752 <String::indexOf(char) const+0x1a>
	return temp - buffer;
    8748:	1b00      	subs	r0, r0, r4
}
    874a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    874c:	f04f 30ff 	mov.w	r0, #4294967295
}
    8750:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    8752:	f04f 30ff 	mov.w	r0, #4294967295
}
    8756:	bd10      	pop	{r4, pc}

00008758 <String::substring(unsigned int) const>:
{
    8758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    875c:	688f      	ldr	r7, [r1, #8]
{
    875e:	460e      	mov	r6, r1
    8760:	4604      	mov	r4, r0
	if (left > right) {
    8762:	4297      	cmp	r7, r2
    8764:	d202      	bcs.n	876c <String::substring(unsigned int) const+0x14>
    8766:	4613      	mov	r3, r2
    8768:	463a      	mov	r2, r7
    876a:	461f      	mov	r7, r3
	buffer = NULL;
    876c:	2300      	movs	r3, #0
	len = 0;
    876e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8770:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    8772:	68b0      	ldr	r0, [r6, #8]
    8774:	4290      	cmp	r0, r2
	capacity = 0;
    8776:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    877a:	d314      	bcc.n	87a6 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    877c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    877e:	6831      	ldr	r1, [r6, #0]
    8780:	bf28      	it	cs
    8782:	4607      	movcs	r7, r0
    8784:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    8788:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    878a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    878c:	189d      	adds	r5, r3, r2
    878e:	d00d      	beq.n	87ac <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    8790:	4628      	mov	r0, r5
    8792:	f003 fa35 	bl	bc00 <strlen>
    8796:	4629      	mov	r1, r5
    8798:	4602      	mov	r2, r0
    879a:	4620      	mov	r0, r4
    879c:	f7ff feae 	bl	84fc <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    87a0:	6833      	ldr	r3, [r6, #0]
    87a2:	f803 8007 	strb.w	r8, [r3, r7]
}
    87a6:	4620      	mov	r0, r4
    87a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    87ac:	60a5      	str	r5, [r4, #8]
    87ae:	e7f8      	b.n	87a2 <String::substring(unsigned int) const+0x4a>

000087b0 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    87b0:	429a      	cmp	r2, r3
{
    87b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87b6:	4604      	mov	r4, r0
    87b8:	460e      	mov	r6, r1
	if (left > right) {
    87ba:	d902      	bls.n	87c2 <String::substring(unsigned int, unsigned int) const+0x12>
    87bc:	4611      	mov	r1, r2
    87be:	461a      	mov	r2, r3
    87c0:	460b      	mov	r3, r1
	buffer = NULL;
    87c2:	2000      	movs	r0, #0
	len = 0;
    87c4:	60a0      	str	r0, [r4, #8]
	flags = 0;
    87c6:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    87c8:	68b7      	ldr	r7, [r6, #8]
    87ca:	4297      	cmp	r7, r2
	capacity = 0;
    87cc:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    87d0:	d314      	bcc.n	87fc <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    87d2:	429f      	cmp	r7, r3
    87d4:	bf28      	it	cs
    87d6:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    87d8:	6833      	ldr	r3, [r6, #0]
    87da:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    87de:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    87e0:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    87e2:	189d      	adds	r5, r3, r2
    87e4:	d00d      	beq.n	8802 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    87e6:	4628      	mov	r0, r5
    87e8:	f003 fa0a 	bl	bc00 <strlen>
    87ec:	4629      	mov	r1, r5
    87ee:	4602      	mov	r2, r0
    87f0:	4620      	mov	r0, r4
    87f2:	f7ff fe83 	bl	84fc <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    87f6:	6833      	ldr	r3, [r6, #0]
    87f8:	f803 8007 	strb.w	r8, [r3, r7]
}
    87fc:	4620      	mov	r0, r4
    87fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8802:	60a5      	str	r5, [r4, #8]
    8804:	e7f8      	b.n	87f8 <String::substring(unsigned int, unsigned int) const+0x48>
    8806:	bf00      	nop

00008808 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    8808:	b510      	push	{r4, lr}
    880a:	4604      	mov	r4, r0
    880c:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    880e:	68a1      	ldr	r1, [r4, #8]
    8810:	b10a      	cbz	r2, 8816 <String::remove(unsigned int, unsigned int)+0xe>
    8812:	4281      	cmp	r1, r0
    8814:	d801      	bhi.n	881a <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    8816:	4620      	mov	r0, r4
    8818:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    881a:	eb00 0c02 	add.w	ip, r0, r2
    881e:	4561      	cmp	r1, ip
    8820:	d30e      	bcc.n	8840 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    8822:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    8824:	4661      	mov	r1, ip
    8826:	1a1a      	subs	r2, r3, r0
		len = len - count;
    8828:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    882a:	6823      	ldr	r3, [r4, #0]
    882c:	4419      	add	r1, r3
    882e:	4418      	add	r0, r3
    8830:	f002 fe0c 	bl	b44c <memmove>
		buffer[len] = 0;
    8834:	6822      	ldr	r2, [r4, #0]
    8836:	68a3      	ldr	r3, [r4, #8]
    8838:	2100      	movs	r1, #0
}
    883a:	4620      	mov	r0, r4
		buffer[len] = 0;
    883c:	54d1      	strb	r1, [r2, r3]
}
    883e:	bd10      	pop	{r4, pc}
    8840:	4603      	mov	r3, r0
    8842:	2200      	movs	r2, #0
    8844:	e7f0      	b.n	8828 <String::remove(unsigned int, unsigned int)+0x20>
    8846:	bf00      	nop

00008848 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    8848:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    884a:	6804      	ldr	r4, [r0, #0]
{
    884c:	4605      	mov	r5, r0
	if (!buffer) return *this;
    884e:	b144      	cbz	r4, 8862 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    8850:	7820      	ldrb	r0, [r4, #0]
    8852:	b130      	cbz	r0, 8862 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    8854:	f002 fca6 	bl	b1a4 <tolower>
    8858:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    885a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    885e:	2800      	cmp	r0, #0
    8860:	d1f8      	bne.n	8854 <String::toLowerCase()+0xc>
	}
	return *this;
}
    8862:	4628      	mov	r0, r5
    8864:	bd38      	pop	{r3, r4, r5, pc}
    8866:	bf00      	nop

00008868 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    8868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    886c:	6807      	ldr	r7, [r0, #0]
{
    886e:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    8870:	b1e7      	cbz	r7, 88ac <String::trim()+0x44>
    8872:	6884      	ldr	r4, [r0, #8]
    8874:	b1d4      	cbz	r4, 88ac <String::trim()+0x44>
    8876:	46b8      	mov	r8, r7
    8878:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    887a:	f818 0b01 	ldrb.w	r0, [r8], #1
    887e:	f002 fc89 	bl	b194 <isspace>
    8882:	2800      	cmp	r0, #0
    8884:	d1f8      	bne.n	8878 <String::trim()+0x10>
	char *end = buffer + len - 1;
    8886:	3c01      	subs	r4, #1
    8888:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    888a:	e002      	b.n	8892 <String::trim()+0x2a>
    888c:	42a5      	cmp	r5, r4
    888e:	d805      	bhi.n	889c <String::trim()+0x34>
    8890:	3c01      	subs	r4, #1
    8892:	7820      	ldrb	r0, [r4, #0]
    8894:	f002 fc7e 	bl	b194 <isspace>
    8898:	2800      	cmp	r0, #0
    889a:	d1f7      	bne.n	888c <String::trim()+0x24>
	len = end + 1 - begin;
    889c:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    889e:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    88a0:	eba2 0205 	sub.w	r2, r2, r5
    88a4:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    88a6:	d304      	bcc.n	88b2 <String::trim()+0x4a>
	buffer[len] = 0;
    88a8:	2300      	movs	r3, #0
    88aa:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    88ac:	4630      	mov	r0, r6
    88ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    88b2:	4638      	mov	r0, r7
    88b4:	4629      	mov	r1, r5
    88b6:	f000 f89d 	bl	89f4 <memcpy>
	buffer[len] = 0;
    88ba:	6837      	ldr	r7, [r6, #0]
    88bc:	68b2      	ldr	r2, [r6, #8]
    88be:	e7f3      	b.n	88a8 <String::trim()+0x40>

000088c0 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    88c0:	6800      	ldr	r0, [r0, #0]
    88c2:	b108      	cbz	r0, 88c8 <String::toInt() const+0x8>
    88c4:	f001 be32 	b.w	a52c <atol>
	return 0;
}
    88c8:	4770      	bx	lr
    88ca:	bf00      	nop

000088cc <delay>:
	if (msec == 0) return;
    88cc:	b900      	cbnz	r0, 88d0 <delay+0x4>
    88ce:	4770      	bx	lr
{
    88d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    88d4:	2101      	movs	r1, #1
    88d6:	4681      	mov	r9, r0
    88d8:	4c21      	ldr	r4, [pc, #132]	; (8960 <delay+0x94>)
    88da:	4d22      	ldr	r5, [pc, #136]	; (8964 <delay+0x98>)
    88dc:	4e22      	ldr	r6, [pc, #136]	; (8968 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    88de:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    88e2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    88e4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    88e6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    88ea:	2b00      	cmp	r3, #0
    88ec:	d1f7      	bne.n	88de <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    88ee:	491f      	ldr	r1, [pc, #124]	; (896c <delay+0xa0>)
    88f0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    88f2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    88f6:	f8df a078 	ldr.w	sl, [pc, #120]	; 8970 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    88fa:	1a1b      	subs	r3, r3, r0
    88fc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    88fe:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8902:	f8da 2000 	ldr.w	r2, [sl]
    8906:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    890a:	455a      	cmp	r2, fp
    890c:	bf94      	ite	ls
    890e:	4490      	addls	r8, r2
    8910:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8912:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8916:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8918:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    891a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    891e:	2b00      	cmp	r3, #0
    8920:	d1f7      	bne.n	8912 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8922:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8924:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8928:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    892a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    892e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    8932:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    8936:	bf94      	ite	ls
    8938:	4462      	addls	r2, ip
    893a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    893e:	eba2 0208 	sub.w	r2, r2, r8
    8942:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    8946:	d306      	bcc.n	8956 <delay+0x8a>
			if (--msec == 0) return;
    8948:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    894c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8950:	d1df      	bne.n	8912 <delay+0x46>
}
    8952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    8956:	f001 fa8b 	bl	9e70 <yield>
		while ((micros() - start) >= 1000) {
    895a:	4904      	ldr	r1, [pc, #16]	; (896c <delay+0xa0>)
    895c:	e7d9      	b.n	8912 <delay+0x46>
    895e:	bf00      	nop
    8960:	2001886c 	.word	0x2001886c
    8964:	20018868 	.word	0x20018868
    8968:	20018864 	.word	0x20018864
    896c:	e0001000 	.word	0xe0001000
    8970:	20018860 	.word	0x20018860

00008974 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8974:	2836      	cmp	r0, #54	; 0x36
    8976:	d829      	bhi.n	89cc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8978:	4b16      	ldr	r3, [pc, #88]	; (89d4 <pinMode+0x60>)
    897a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    897c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    897e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8982:	589a      	ldr	r2, [r3, r2]
{
    8984:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8986:	6853      	ldr	r3, [r2, #4]
    8988:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    898a:	d00e      	beq.n	89aa <pinMode+0x36>
    898c:	2904      	cmp	r1, #4
    898e:	d00c      	beq.n	89aa <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8990:	ea23 0304 	bic.w	r3, r3, r4
    8994:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8996:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8998:	b1a9      	cbz	r1, 89c6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    899a:	2902      	cmp	r1, #2
    899c:	d017      	beq.n	89ce <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    899e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    89a0:	bf0c      	ite	eq
    89a2:	4a0d      	ldreq	r2, [pc, #52]	; (89d8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    89a4:	4a0d      	ldrne	r2, [pc, #52]	; (89dc <pinMode+0x68>)
    89a6:	601a      	str	r2, [r3, #0]
    89a8:	e007      	b.n	89ba <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    89aa:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    89ac:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    89ae:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    89b0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    89b2:	d008      	beq.n	89c6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    89b4:	f640 0238 	movw	r2, #2104	; 0x838
    89b8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    89ba:	6843      	ldr	r3, [r0, #4]
    89bc:	2215      	movs	r2, #21
}
    89be:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    89c2:	601a      	str	r2, [r3, #0]
}
    89c4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    89c6:	2238      	movs	r2, #56	; 0x38
    89c8:	601a      	str	r2, [r3, #0]
    89ca:	e7f6      	b.n	89ba <pinMode+0x46>
    89cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    89ce:	4a04      	ldr	r2, [pc, #16]	; (89e0 <pinMode+0x6c>)
    89d0:	601a      	str	r2, [r3, #0]
    89d2:	e7f2      	b.n	89ba <pinMode+0x46>
    89d4:	20000ce8 	.word	0x20000ce8
    89d8:	00013038 	.word	0x00013038
    89dc:	00010038 	.word	0x00010038
    89e0:	0001f038 	.word	0x0001f038

000089e4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    89e4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    89e6:	f7f9 fc15 	bl	2214 <setup>
	while (1) {
		loop();
    89ea:	f7fd ffc7 	bl	697c <loop>
		yield();
    89ee:	f001 fa3f 	bl	9e70 <yield>
	while (1) {
    89f2:	e7fa      	b.n	89ea <main+0x6>

000089f4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    89f4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    89f6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    89fa:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    89fe:	d16d      	bne.n	8adc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8a00:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8a02:	d341      	bcc.n	8a88 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8a04:	f851 3b04 	ldr.w	r3, [r1], #4
    8a08:	f840 3b04 	str.w	r3, [r0], #4
    8a0c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a10:	f840 3b04 	str.w	r3, [r0], #4
    8a14:	f851 3b04 	ldr.w	r3, [r1], #4
    8a18:	f840 3b04 	str.w	r3, [r0], #4
    8a1c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a20:	f840 3b04 	str.w	r3, [r0], #4
    8a24:	f851 3b04 	ldr.w	r3, [r1], #4
    8a28:	f840 3b04 	str.w	r3, [r0], #4
    8a2c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a30:	f840 3b04 	str.w	r3, [r0], #4
    8a34:	f851 3b04 	ldr.w	r3, [r1], #4
    8a38:	f840 3b04 	str.w	r3, [r0], #4
    8a3c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a40:	f840 3b04 	str.w	r3, [r0], #4
    8a44:	f851 3b04 	ldr.w	r3, [r1], #4
    8a48:	f840 3b04 	str.w	r3, [r0], #4
    8a4c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a50:	f840 3b04 	str.w	r3, [r0], #4
    8a54:	f851 3b04 	ldr.w	r3, [r1], #4
    8a58:	f840 3b04 	str.w	r3, [r0], #4
    8a5c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a60:	f840 3b04 	str.w	r3, [r0], #4
    8a64:	f851 3b04 	ldr.w	r3, [r1], #4
    8a68:	f840 3b04 	str.w	r3, [r0], #4
    8a6c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a70:	f840 3b04 	str.w	r3, [r0], #4
    8a74:	f851 3b04 	ldr.w	r3, [r1], #4
    8a78:	f840 3b04 	str.w	r3, [r0], #4
    8a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a80:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8a84:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8a86:	d2bd      	bcs.n	8a04 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8a88:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8a8a:	d311      	bcc.n	8ab0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8a8c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a90:	f840 3b04 	str.w	r3, [r0], #4
    8a94:	f851 3b04 	ldr.w	r3, [r1], #4
    8a98:	f840 3b04 	str.w	r3, [r0], #4
    8a9c:	f851 3b04 	ldr.w	r3, [r1], #4
    8aa0:	f840 3b04 	str.w	r3, [r0], #4
    8aa4:	f851 3b04 	ldr.w	r3, [r1], #4
    8aa8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8aac:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8aae:	d2ed      	bcs.n	8a8c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8ab0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8ab2:	d305      	bcc.n	8ac0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8ab4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8ab8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8abc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8abe:	d2f9      	bcs.n	8ab4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8ac0:	3204      	adds	r2, #4
	beq	.Ldone
    8ac2:	d008      	beq.n	8ad6 <memcpy+0xe2>

	lsls	r2, r2, #31
    8ac4:	07d2      	lsls	r2, r2, #31
	itt ne
    8ac6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8ac8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8acc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8ad0:	d301      	bcc.n	8ad6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8ad2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8ad4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8ad6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8ad8:	4770      	bx	lr
    8ada:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8adc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    8ade:	d313      	bcc.n	8b08 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8ae0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8ae2:	d08d      	beq.n	8a00 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8ae4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8ae8:	d08a      	beq.n	8a00 <memcpy+0xc>

	rsb	r3, #4
    8aea:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    8aee:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8af0:	07db      	lsls	r3, r3, #31
	itt ne
    8af2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8af4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8af8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8afc:	d380      	bcc.n	8a00 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8afe:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8b02:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8b06:	e77b      	b.n	8a00 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8b08:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8b0a:	d3d9      	bcc.n	8ac0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8b0c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8b12:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8b16:	d2f9      	bcs.n	8b0c <memcpy+0x118>

	ldrb	r3, [r1]
    8b18:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8b1a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8b1c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8b1e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8b20:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8b22:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8b24:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8b26:	4770      	bx	lr

00008b28 <ultoa>:
	int i=0, j;
    8b28:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8b2c:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    8b2e:	4666      	mov	r6, ip
	int i=0, j;
    8b30:	2400      	movs	r4, #0
    8b32:	e000      	b.n	8b36 <ultoa+0xe>
		i++;
    8b34:	3401      	adds	r4, #1
		digit = val % radix;
    8b36:	fbb0 f5f2 	udiv	r5, r0, r2
    8b3a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8b3e:	2b09      	cmp	r3, #9
    8b40:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8b44:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8b48:	fa5f fe8e 	uxtb.w	lr, lr
    8b4c:	bf98      	it	ls
    8b4e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8b52:	4290      	cmp	r0, r2
		val /= radix;
    8b54:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8b56:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    8b5a:	d2eb      	bcs.n	8b34 <ultoa+0xc>
	buf[i + 1] = 0;
    8b5c:	1c63      	adds	r3, r4, #1
    8b5e:	2200      	movs	r2, #0
    8b60:	18c8      	adds	r0, r1, r3
    8b62:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8b64:	b17c      	cbz	r4, 8b86 <ultoa+0x5e>
		t = buf[j];
    8b66:	4662      	mov	r2, ip
    8b68:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8b6c:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8b70:	eba1 030c 	sub.w	r3, r1, ip
    8b74:	3202      	adds	r2, #2
		buf[j] = buf[i];
    8b76:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    8b7a:	3b01      	subs	r3, #1
    8b7c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8b7e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8b80:	4423      	add	r3, r4
    8b82:	429a      	cmp	r2, r3
    8b84:	dbef      	blt.n	8b66 <ultoa+0x3e>
}
    8b86:	4608      	mov	r0, r1
    8b88:	bd70      	pop	{r4, r5, r6, pc}
    8b8a:	bf00      	nop

00008b8c <unused_interrupt_vector>:
	__disable_irq();
    8b8c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    8b8e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    8b92:	4c4f      	ldr	r4, [pc, #316]	; (8cd0 <unused_interrupt_vector+0x144>)
    8b94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8b98:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    8b9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8ba0:	4e4c      	ldr	r6, [pc, #304]	; (8cd4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8ba2:	4d4d      	ldr	r5, [pc, #308]	; (8cd8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8ba4:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8ba8:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    8bac:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8bb0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8bb4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8bb8:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    8bbc:	6993      	ldr	r3, [r2, #24]
    8bbe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8bc2:	69d3      	ldr	r3, [r2, #28]
    8bc4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8bc8:	f000 f8d0 	bl	8d6c <tempmonGetTemp>
    8bcc:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8bd0:	f001 fc2a 	bl	a428 <rtc_get>
	info->len = sizeof(*info) / 4;
    8bd4:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8bd6:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    8bda:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    8bde:	460b      	mov	r3, r1
    8be0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8be4:	493d      	ldr	r1, [pc, #244]	; (8cdc <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8be6:	1d30      	adds	r0, r6, #4
    8be8:	405a      	eors	r2, r3
    8bea:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8bec:	f002 0301 	and.w	r3, r2, #1
    8bf0:	3c01      	subs	r4, #1
    8bf2:	fb01 f303 	mul.w	r3, r1, r3
    8bf6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    8bfa:	d1f7      	bne.n	8bec <unused_interrupt_vector+0x60>
	while (p < end) {
    8bfc:	42a8      	cmp	r0, r5
    8bfe:	d002      	beq.n	8c06 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8c00:	6873      	ldr	r3, [r6, #4]
    8c02:	4606      	mov	r6, r0
    8c04:	e7ef      	b.n	8be6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8c06:	4b32      	ldr	r3, [pc, #200]	; (8cd0 <unused_interrupt_vector+0x144>)
    8c08:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    8c0c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8c10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8c14:	492f      	ldr	r1, [pc, #188]	; (8cd4 <unused_interrupt_vector+0x148>)
    8c16:	4a32      	ldr	r2, [pc, #200]	; (8ce0 <unused_interrupt_vector+0x154>)
    8c18:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    8c1c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    8c20:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8c24:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8c28:	4a2e      	ldr	r2, [pc, #184]	; (8ce4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    8c2a:	2502      	movs	r5, #2
    8c2c:	482e      	ldr	r0, [pc, #184]	; (8ce8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8c2e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8c30:	492e      	ldr	r1, [pc, #184]	; (8cec <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8c32:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8c36:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8c38:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8c3a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8c3c:	482c      	ldr	r0, [pc, #176]	; (8cf0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8c3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8c46:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8c48:	680b      	ldr	r3, [r1, #0]
    8c4a:	4283      	cmp	r3, r0
    8c4c:	d83d      	bhi.n	8cca <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    8c4e:	4d26      	ldr	r5, [pc, #152]	; (8ce8 <unused_interrupt_vector+0x15c>)
    8c50:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    8c52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8c56:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    8c5a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8c5c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    8c5e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8c62:	4924      	ldr	r1, [pc, #144]	; (8cf4 <unused_interrupt_vector+0x168>)
    8c64:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8c68:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    8c6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8c70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8c74:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8c78:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    8c7c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    8c80:	e001      	b.n	8c86 <unused_interrupt_vector+0xfa>
		usb_isr();
    8c82:	f000 f965 	bl	8f50 <usb_isr>
		if (PIT_TFLG0) {
    8c86:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8c8a:	2b00      	cmp	r3, #0
    8c8c:	d0f9      	beq.n	8c82 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    8c8e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8c90:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8c94:	2c4f      	cmp	r4, #79	; 0x4f
    8c96:	d9f4      	bls.n	8c82 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8c98:	4b17      	ldr	r3, [pc, #92]	; (8cf8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    8c9a:	2002      	movs	r0, #2
    8c9c:	4917      	ldr	r1, [pc, #92]	; (8cfc <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8c9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8ca2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8ca6:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8ca8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8cac:	b93b      	cbnz	r3, 8cbe <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    8cae:	4814      	ldr	r0, [pc, #80]	; (8d00 <unused_interrupt_vector+0x174>)
    8cb0:	4914      	ldr	r1, [pc, #80]	; (8d04 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8cb2:	4a0d      	ldr	r2, [pc, #52]	; (8ce8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8cb4:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8cb6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d0fa      	beq.n	8cb4 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    8cbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8cc2:	4a11      	ldr	r2, [pc, #68]	; (8d08 <unused_interrupt_vector+0x17c>)
    8cc4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8cc8:	e7fe      	b.n	8cc8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8cca:	f001 f97d 	bl	9fc8 <set_arm_clock>
    8cce:	e7be      	b.n	8c4e <unused_interrupt_vector+0xc2>
    8cd0:	2027ff00 	.word	0x2027ff00
    8cd4:	2027ff80 	.word	0x2027ff80
    8cd8:	2027ffa8 	.word	0x2027ffa8
    8cdc:	edb88320 	.word	0xedb88320
    8ce0:	2027ffa0 	.word	0x2027ffa0
    8ce4:	400fc000 	.word	0x400fc000
    8ce8:	40084000 	.word	0x40084000
    8cec:	20004354 	.word	0x20004354
    8cf0:	0bcd3d80 	.word	0x0bcd3d80
    8cf4:	00249f00 	.word	0x00249f00
    8cf8:	400d9000 	.word	0x400d9000
    8cfc:	402e0000 	.word	0x402e0000
    8d00:	400f8000 	.word	0x400f8000
    8d04:	0bad00f1 	.word	0x0bad00f1
    8d08:	05fa0004 	.word	0x05fa0004

00008d0c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    8d0c:	490a      	ldr	r1, [pc, #40]	; (8d38 <_sbrk+0x2c>)
    8d0e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8d10:	b138      	cbz	r0, 8d22 <_sbrk+0x16>
{
    8d12:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8d14:	1813      	adds	r3, r2, r0
    8d16:	4809      	ldr	r0, [pc, #36]	; (8d3c <_sbrk+0x30>)
    8d18:	4283      	cmp	r3, r0
    8d1a:	d804      	bhi.n	8d26 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8d1c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    8d1e:	600b      	str	r3, [r1, #0]
}
    8d20:	bd08      	pop	{r3, pc}
    8d22:	4610      	mov	r0, r2
    8d24:	4770      	bx	lr
                        errno = ENOMEM;
    8d26:	f002 fd63 	bl	b7f0 <__errno>
    8d2a:	230c      	movs	r3, #12
                        return (void *)-1;
    8d2c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8d30:	6003      	str	r3, [r0, #0]
}
    8d32:	4610      	mov	r0, r2
    8d34:	bd08      	pop	{r3, pc}
    8d36:	bf00      	nop
    8d38:	2000436c 	.word	0x2000436c
    8d3c:	20280000 	.word	0x20280000

00008d40 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    8d40:	2000      	movs	r0, #0
    8d42:	4770      	bx	lr

00008d44 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8d44:	f04f 30ff 	mov.w	r0, #4294967295
    8d48:	4770      	bx	lr
    8d4a:	bf00      	nop

00008d4c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    8d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8d50:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    8d52:	604b      	str	r3, [r1, #4]
}
    8d54:	4770      	bx	lr
    8d56:	bf00      	nop

00008d58 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    8d58:	2001      	movs	r0, #1
    8d5a:	4770      	bx	lr

00008d5c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    8d5c:	f04f 30ff 	mov.w	r0, #4294967295
    8d60:	4770      	bx	lr
    8d62:	bf00      	nop

00008d64 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8d64:	bf30      	wfi
    8d66:	e7fd      	b.n	8d64 <abort>

00008d68 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8d68:	f7ff bf10 	b.w	8b8c <unused_interrupt_vector>

00008d6c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8d6c:	4a12      	ldr	r2, [pc, #72]	; (8db8 <tempmonGetTemp+0x4c>)
    8d6e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8d72:	075b      	lsls	r3, r3, #29
    8d74:	d5fb      	bpl.n	8d6e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8d76:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8d7a:	4810      	ldr	r0, [pc, #64]	; (8dbc <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8d7c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8d80:	490f      	ldr	r1, [pc, #60]	; (8dc0 <tempmonGetTemp+0x54>)
    8d82:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8d86:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8d8a:	ed91 6a00 	vldr	s12, [r1]
    8d8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8d92:	4a0c      	ldr	r2, [pc, #48]	; (8dc4 <tempmonGetTemp+0x58>)
    8d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8d98:	4b0b      	ldr	r3, [pc, #44]	; (8dc8 <tempmonGetTemp+0x5c>)
    8d9a:	edd2 6a00 	vldr	s13, [r2]
    8d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8da2:	ed93 7a00 	vldr	s14, [r3]
    8da6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    8daa:	ee67 7a86 	vmul.f32	s15, s15, s12
    8dae:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    8db2:	ee37 0a40 	vsub.f32	s0, s14, s0
    8db6:	4770      	bx	lr
    8db8:	400d8100 	.word	0x400d8100
    8dbc:	20018850 	.word	0x20018850
    8dc0:	20018858 	.word	0x20018858
    8dc4:	2001885c 	.word	0x2001885c
    8dc8:	20018854 	.word	0x20018854

00008dcc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8dcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    8dce:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    8dd0:	b11b      	cbz	r3, 8dda <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8dd2:	6853      	ldr	r3, [r2, #4]
    8dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8dd8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    8dda:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8ddc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8dde:	b33c      	cbz	r4, 8e30 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8de0:	4b1a      	ldr	r3, [pc, #104]	; (8e4c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    8de2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8de4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    8de8:	420c      	tst	r4, r1
    8dea:	d11d      	bne.n	8e28 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8dec:	4e18      	ldr	r6, [pc, #96]	; (8e50 <schedule_transfer+0x84>)
    8dee:	6877      	ldr	r7, [r6, #4]
    8df0:	e004      	b.n	8dfc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8df2:	6874      	ldr	r4, [r6, #4]
    8df4:	1be4      	subs	r4, r4, r7
    8df6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    8dfa:	d20b      	bcs.n	8e14 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8dfc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8e00:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    8e04:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8e08:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8e0c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    8e10:	0464      	lsls	r4, r4, #17
    8e12:	d5ee      	bpl.n	8df2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8e14:	400d      	ands	r5, r1
    8e16:	d107      	bne.n	8e28 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8e18:	4c0c      	ldr	r4, [pc, #48]	; (8e4c <schedule_transfer+0x80>)
		endpoint->status = 0;
    8e1a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    8e1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    8e22:	430b      	orrs	r3, r1
    8e24:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8e28:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8e2a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8e2c:	bcf0      	pop	{r4, r5, r6, r7}
    8e2e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    8e30:	4d06      	ldr	r5, [pc, #24]	; (8e4c <schedule_transfer+0x80>)
	endpoint->status = 0;
    8e32:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    8e36:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    8e3a:	430b      	orrs	r3, r1
    8e3c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8e40:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    8e42:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8e44:	b662      	cpsie	i
}
    8e46:	bcf0      	pop	{r4, r5, r6, r7}
    8e48:	4770      	bx	lr
    8e4a:	bf00      	nop
    8e4c:	402e0000 	.word	0x402e0000
    8e50:	e0001000 	.word	0xe0001000

00008e54 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8e54:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8e56:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    8e58:	b19d      	cbz	r5, 8e82 <run_callbacks+0x2e>
    8e5a:	4606      	mov	r6, r0
    8e5c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    8e5e:	2400      	movs	r4, #0
    8e60:	e003      	b.n	8e6a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8e62:	6812      	ldr	r2, [r2, #0]
		count++;
    8e64:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    8e66:	2a01      	cmp	r2, #1
    8e68:	d00c      	beq.n	8e84 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    8e6a:	6853      	ldr	r3, [r2, #4]
    8e6c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    8e70:	d0f7      	beq.n	8e62 <run_callbacks+0xe>
			ep->first_transfer = t;
    8e72:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8e74:	b12c      	cbz	r4, 8e82 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    8e76:	4628      	mov	r0, r5
		ep->callback_function(first);
    8e78:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    8e7a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    8e7c:	4798      	blx	r3
	while (count) {
    8e7e:	3c01      	subs	r4, #1
    8e80:	d1f9      	bne.n	8e76 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    8e82:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    8e84:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    8e88:	e7f4      	b.n	8e74 <run_callbacks+0x20>
    8e8a:	bf00      	nop

00008e8c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8e8c:	b430      	push	{r4, r5}
	if (len > 0) {
    8e8e:	b9d9      	cbnz	r1, 8ec8 <endpoint0_transmit.constprop.0+0x3c>
    8e90:	4c1f      	ldr	r4, [pc, #124]	; (8f10 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    8e92:	4b20      	ldr	r3, [pc, #128]	; (8f14 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    8e94:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e96:	4a20      	ldr	r2, [pc, #128]	; (8f18 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    8e98:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e9a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    8e9e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    8ea0:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    8ea2:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8ea6:	2480      	movs	r4, #128	; 0x80
    8ea8:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8eaa:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8eae:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8eb2:	481a      	ldr	r0, [pc, #104]	; (8f1c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    8eb4:	432b      	orrs	r3, r5
    8eb6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8eba:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    8ebc:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d1fb      	bne.n	8ebc <endpoint0_transmit.constprop.0+0x30>
}
    8ec4:	bc30      	pop	{r4, r5}
    8ec6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ec8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    8eca:	4b15      	ldr	r3, [pc, #84]	; (8f20 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8ecc:	4c10      	ldr	r4, [pc, #64]	; (8f10 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    8ece:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ed0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8ed4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    8ed6:	4a10      	ldr	r2, [pc, #64]	; (8f18 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ed8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8eda:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    8ede:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8ee0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8ee2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8ee6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8ee8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8eea:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8eee:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8ef2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    8ef4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8ef6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    8ef8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    8efa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8f02:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8f06:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d1fb      	bne.n	8f06 <endpoint0_transmit.constprop.0+0x7a>
    8f0e:	e7c0      	b.n	8e92 <endpoint0_transmit.constprop.0+0x6>
    8f10:	20000000 	.word	0x20000000
    8f14:	20004ec0 	.word	0x20004ec0
    8f18:	402e0000 	.word	0x402e0000
    8f1c:	200053d4 	.word	0x200053d4
    8f20:	20004ee0 	.word	0x20004ee0

00008f24 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    8f24:	4908      	ldr	r1, [pc, #32]	; (8f48 <usb_stop_sof_interrupts+0x24>)
    8f26:	2201      	movs	r2, #1
    8f28:	780b      	ldrb	r3, [r1, #0]
    8f2a:	fa02 f000 	lsl.w	r0, r2, r0
    8f2e:	ea23 0000 	bic.w	r0, r3, r0
    8f32:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    8f34:	b930      	cbnz	r0, 8f44 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    8f36:	4a05      	ldr	r2, [pc, #20]	; (8f4c <usb_stop_sof_interrupts+0x28>)
    8f38:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    8f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8f40:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    8f44:	4770      	bx	lr
    8f46:	bf00      	nop
    8f48:	200188a6 	.word	0x200188a6
    8f4c:	402e0000 	.word	0x402e0000

00008f50 <usb_isr>:
{
    8f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    8f54:	4c97      	ldr	r4, [pc, #604]	; (91b4 <usb_isr+0x264>)
{
    8f56:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    8f58:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8f5c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    8f5e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    8f62:	d553      	bpl.n	900c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8f64:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8f68:	2a00      	cmp	r2, #0
    8f6a:	d04a      	beq.n	9002 <usb_isr+0xb2>
    8f6c:	4e92      	ldr	r6, [pc, #584]	; (91b8 <usb_isr+0x268>)
    8f6e:	f8df a260 	ldr.w	sl, [pc, #608]	; 91d0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    8f72:	f8df 9274 	ldr.w	r9, [pc, #628]	; 91e8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    8f76:	f8df b274 	ldr.w	fp, [pc, #628]	; 91ec <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8f7a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 91f0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    8f7e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    8f82:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8f86:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8f8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    8f8e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8f92:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8f96:	049d      	lsls	r5, r3, #18
    8f98:	d5f5      	bpl.n	8f86 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8f9a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    8f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8fa2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8fa6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8faa:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8fae:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    8fb2:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    8fb6:	d1fa      	bne.n	8fae <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    8fb8:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    8fba:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    8fbc:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    8fc0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    8fc4:	f000 81cf 	beq.w	9366 <usb_isr+0x416>
    8fc8:	f200 80db 	bhi.w	9182 <usb_isr+0x232>
    8fcc:	f240 3102 	movw	r1, #770	; 0x302
    8fd0:	428b      	cmp	r3, r1
    8fd2:	f000 81e7 	beq.w	93a4 <usb_isr+0x454>
    8fd6:	f200 809a 	bhi.w	910e <usb_isr+0x1be>
    8fda:	2b82      	cmp	r3, #130	; 0x82
    8fdc:	f000 81cb 	beq.w	9376 <usb_isr+0x426>
    8fe0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    8fe4:	f040 808a 	bne.w	90fc <usb_isr+0x1ac>
		if (endpoint > 7) break;
    8fe8:	f010 0f78 	tst.w	r0, #120	; 0x78
    8fec:	b283      	uxth	r3, r0
    8fee:	f000 8203 	beq.w	93f8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8ff2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    8ff6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8ffa:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    8ffe:	2a00      	cmp	r2, #0
    9000:	d1bd      	bne.n	8f7e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    9002:	4a6c      	ldr	r2, [pc, #432]	; (91b4 <usb_isr+0x264>)
    9004:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    9008:	2b00      	cmp	r3, #0
    900a:	d142      	bne.n	9092 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    900c:	067e      	lsls	r6, r7, #25
    900e:	d516      	bpl.n	903e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9010:	4b68      	ldr	r3, [pc, #416]	; (91b4 <usb_isr+0x264>)
    9012:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    9016:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    901a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    901e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9022:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9026:	2c00      	cmp	r4, #0
    9028:	d1fb      	bne.n	9022 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    902a:	f04f 32ff 	mov.w	r2, #4294967295
    902e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    9032:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    9036:	f000 fd29 	bl	9a8c <usb_serial_reset>
		endpointN_notify_mask = 0;
    903a:	4b60      	ldr	r3, [pc, #384]	; (91bc <usb_isr+0x26c>)
    903c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    903e:	01fc      	lsls	r4, r7, #7
    9040:	d503      	bpl.n	904a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9042:	4b5f      	ldr	r3, [pc, #380]	; (91c0 <usb_isr+0x270>)
    9044:	681b      	ldr	r3, [r3, #0]
    9046:	b103      	cbz	r3, 904a <usb_isr+0xfa>
    9048:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    904a:	01b8      	lsls	r0, r7, #6
    904c:	d503      	bpl.n	9056 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    904e:	4b5d      	ldr	r3, [pc, #372]	; (91c4 <usb_isr+0x274>)
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	b103      	cbz	r3, 9056 <usb_isr+0x106>
    9054:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    9056:	0779      	lsls	r1, r7, #29
    9058:	d508      	bpl.n	906c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    905a:	4b56      	ldr	r3, [pc, #344]	; (91b4 <usb_isr+0x264>)
    905c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    9060:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    9064:	d047      	beq.n	90f6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    9066:	4b58      	ldr	r3, [pc, #352]	; (91c8 <usb_isr+0x278>)
    9068:	2201      	movs	r2, #1
    906a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    906c:	4b51      	ldr	r3, [pc, #324]	; (91b4 <usb_isr+0x264>)
    906e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    9072:	061a      	lsls	r2, r3, #24
    9074:	d50a      	bpl.n	908c <usb_isr+0x13c>
    9076:	063b      	lsls	r3, r7, #24
    9078:	d508      	bpl.n	908c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    907a:	4a54      	ldr	r2, [pc, #336]	; (91cc <usb_isr+0x27c>)
    907c:	7813      	ldrb	r3, [r2, #0]
    907e:	b12b      	cbz	r3, 908c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    9080:	3b01      	subs	r3, #1
    9082:	b2db      	uxtb	r3, r3
    9084:	7013      	strb	r3, [r2, #0]
    9086:	2b00      	cmp	r3, #0
    9088:	f000 8272 	beq.w	9570 <usb_isr+0x620>
}
    908c:	b003      	add	sp, #12
    908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    9092:	494f      	ldr	r1, [pc, #316]	; (91d0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    9094:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    9098:	6808      	ldr	r0, [r1, #0]
    909a:	4203      	tst	r3, r0
    909c:	f040 81d1 	bne.w	9442 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    90a0:	4a46      	ldr	r2, [pc, #280]	; (91bc <usb_isr+0x26c>)
    90a2:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    90a4:	401c      	ands	r4, r3
    90a6:	d0b1      	beq.n	900c <usb_isr+0xbc>
				while (tx) {
    90a8:	ea5f 4814 	movs.w	r8, r4, lsr #16
    90ac:	d010      	beq.n	90d0 <usb_isr+0x180>
    90ae:	4e42      	ldr	r6, [pc, #264]	; (91b8 <usb_isr+0x268>)
					tx &= ~(1<<p);
    90b0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    90b4:	fa98 f5a8 	rbit	r5, r8
    90b8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    90bc:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    90c0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    90c4:	3040      	adds	r0, #64	; 0x40
    90c6:	f7ff fec5 	bl	8e54 <run_callbacks>
				while (tx) {
    90ca:	ea38 0805 	bics.w	r8, r8, r5
    90ce:	d1f1      	bne.n	90b4 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    90d0:	b2a4      	uxth	r4, r4
				while(rx) {
    90d2:	2c00      	cmp	r4, #0
    90d4:	d09a      	beq.n	900c <usb_isr+0xbc>
    90d6:	4e38      	ldr	r6, [pc, #224]	; (91b8 <usb_isr+0x268>)
					rx &= ~(1<<p);
    90d8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    90dc:	fa94 f5a4 	rbit	r5, r4
    90e0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    90e4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    90e8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    90ec:	f7ff feb2 	bl	8e54 <run_callbacks>
				while(rx) {
    90f0:	43ac      	bics	r4, r5
    90f2:	d1f3      	bne.n	90dc <usb_isr+0x18c>
    90f4:	e78a      	b.n	900c <usb_isr+0xbc>
			usb_high_speed = 0;
    90f6:	4a34      	ldr	r2, [pc, #208]	; (91c8 <usb_isr+0x278>)
    90f8:	7013      	strb	r3, [r2, #0]
    90fa:	e7b7      	b.n	906c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    90fc:	2b80      	cmp	r3, #128	; 0x80
    90fe:	f47f af78 	bne.w	8ff2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    9102:	4834      	ldr	r0, [pc, #208]	; (91d4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    9104:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    9106:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    9108:	f7ff fec0 	bl	8e8c <endpoint0_transmit.constprop.0>
		return;
    910c:	e775      	b.n	8ffa <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    910e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    9112:	f000 810b 	beq.w	932c <usb_isr+0x3dc>
    9116:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    911a:	2b01      	cmp	r3, #1
    911c:	f63f af69 	bhi.w	8ff2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9120:	4b2d      	ldr	r3, [pc, #180]	; (91d8 <usb_isr+0x288>)
    9122:	685d      	ldr	r5, [r3, #4]
    9124:	2d00      	cmp	r5, #0
    9126:	f43f af64 	beq.w	8ff2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    912a:	fa1f fc8c 	uxth.w	ip, ip
    912e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    9132:	e004      	b.n	913e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9134:	691d      	ldr	r5, [r3, #16]
    9136:	330c      	adds	r3, #12
    9138:	2d00      	cmp	r5, #0
    913a:	f43f af5a 	beq.w	8ff2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    913e:	881a      	ldrh	r2, [r3, #0]
    9140:	4572      	cmp	r2, lr
    9142:	d1f7      	bne.n	9134 <usb_isr+0x1e4>
    9144:	885a      	ldrh	r2, [r3, #2]
    9146:	4562      	cmp	r2, ip
    9148:	d1f4      	bne.n	9134 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    914a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    914e:	2a03      	cmp	r2, #3
    9150:	f000 81a5 	beq.w	949e <usb_isr+0x54e>
					datalen = list->length;
    9154:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    9156:	0c00      	lsrs	r0, r0, #16
    9158:	4282      	cmp	r2, r0
    915a:	bf28      	it	cs
    915c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    915e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    9162:	f040 81a1 	bne.w	94a8 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    9166:	4b18      	ldr	r3, [pc, #96]	; (91c8 <usb_isr+0x278>)
    9168:	491c      	ldr	r1, [pc, #112]	; (91dc <usb_isr+0x28c>)
    916a:	7818      	ldrb	r0, [r3, #0]
    916c:	4b1c      	ldr	r3, [pc, #112]	; (91e0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    916e:	9201      	str	r2, [sp, #4]
    9170:	2800      	cmp	r0, #0
    9172:	bf18      	it	ne
    9174:	4619      	movne	r1, r3
    9176:	481b      	ldr	r0, [pc, #108]	; (91e4 <usb_isr+0x294>)
    9178:	f7ff fc3c 	bl	89f4 <memcpy>
    917c:	4d19      	ldr	r5, [pc, #100]	; (91e4 <usb_isr+0x294>)
    917e:	9a01      	ldr	r2, [sp, #4]
    9180:	e1e1      	b.n	9546 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    9182:	f242 2121 	movw	r1, #8737	; 0x2221
    9186:	428b      	cmp	r3, r1
    9188:	d07c      	beq.n	9284 <usb_isr+0x334>
    918a:	d933      	bls.n	91f4 <usb_isr+0x2a4>
    918c:	f242 3121 	movw	r1, #8993	; 0x2321
    9190:	428b      	cmp	r3, r1
    9192:	f000 8081 	beq.w	9298 <usb_isr+0x348>
    9196:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    919a:	428b      	cmp	r3, r1
    919c:	f47f af29 	bne.w	8ff2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    91a0:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    91a4:	b283      	uxth	r3, r0
    91a6:	f47f af24 	bne.w	8ff2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    91aa:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    91ae:	f363 0c0f 	bfi	ip, r3, #0, #16
    91b2:	e7b5      	b.n	9120 <usb_isr+0x1d0>
    91b4:	402e0000 	.word	0x402e0000
    91b8:	20000000 	.word	0x20000000
    91bc:	200053d8 	.word	0x200053d8
    91c0:	2001887c 	.word	0x2001887c
    91c4:	20018880 	.word	0x20018880
    91c8:	200188ac 	.word	0x200188ac
    91cc:	200188ad 	.word	0x200188ad
    91d0:	200053d4 	.word	0x200053d4
    91d4:	20018818 	.word	0x20018818
    91d8:	20001188 	.word	0x20001188
    91dc:	60001e84 	.word	0x60001e84
    91e0:	60001ee8 	.word	0x60001ee8
    91e4:	20200000 	.word	0x20200000
    91e8:	200053cc 	.word	0x200053cc
    91ec:	b8c6cf5d 	.word	0xb8c6cf5d
    91f0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    91f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    91f8:	d066      	beq.n	92c8 <usb_isr+0x378>
    91fa:	f242 0121 	movw	r1, #8225	; 0x2021
    91fe:	428b      	cmp	r3, r1
    9200:	f47f aef7 	bne.w	8ff2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    9204:	0c03      	lsrs	r3, r0, #16
    9206:	2b07      	cmp	r3, #7
    9208:	f47f aef3 	bne.w	8ff2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    920c:	4bb2      	ldr	r3, [pc, #712]	; (94d8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    920e:	49b3      	ldr	r1, [pc, #716]	; (94dc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    9210:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9212:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    9214:	49b2      	ldr	r1, [pc, #712]	; (94e0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9216:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9218:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    921c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    9220:	2201      	movs	r2, #1
    9222:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9224:	4aaf      	ldr	r2, [pc, #700]	; (94e4 <usb_isr+0x594>)
    9226:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9228:	4aaf      	ldr	r2, [pc, #700]	; (94e8 <usb_isr+0x598>)
    922a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    922c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    9230:	f041 0101 	orr.w	r1, r1, #1
    9234:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9238:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    923c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9240:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9242:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    9244:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9248:	2b00      	cmp	r3, #0
    924a:	d1fb      	bne.n	9244 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    924c:	4aa7      	ldr	r2, [pc, #668]	; (94ec <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    924e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9250:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    9252:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9254:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9256:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9258:	f248 0380 	movw	r3, #32896	; 0x8080
    925c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    925e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9262:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9266:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    926a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    926e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9276:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    927a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    927e:	2b00      	cmp	r3, #0
    9280:	d1fb      	bne.n	927a <usb_isr+0x32a>
    9282:	e6ba      	b.n	8ffa <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9284:	b280      	uxth	r0, r0
    9286:	b938      	cbnz	r0, 9298 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9288:	4b99      	ldr	r3, [pc, #612]	; (94f0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    928a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    928e:	6819      	ldr	r1, [r3, #0]
    9290:	4b98      	ldr	r3, [pc, #608]	; (94f4 <usb_isr+0x5a4>)
    9292:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9294:	4b98      	ldr	r3, [pc, #608]	; (94f8 <usb_isr+0x5a8>)
    9296:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    9298:	4b94      	ldr	r3, [pc, #592]	; (94ec <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    929a:	2200      	movs	r2, #0
    929c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    929e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    92a0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    92a2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    92a4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92a6:	2280      	movs	r2, #128	; 0x80
    92a8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    92aa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    92ae:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    92b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    92b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    92ba:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    92be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    92c2:	2b00      	cmp	r3, #0
    92c4:	d1fb      	bne.n	92be <usb_isr+0x36e>
    92c6:	e698      	b.n	8ffa <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    92c8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    92cc:	4b8b      	ldr	r3, [pc, #556]	; (94fc <usb_isr+0x5ac>)
    92ce:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    92d0:	4b8b      	ldr	r3, [pc, #556]	; (9500 <usb_isr+0x5b0>)
    92d2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    92d6:	4b8b      	ldr	r3, [pc, #556]	; (9504 <usb_isr+0x5b4>)
    92d8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    92dc:	4b8a      	ldr	r3, [pc, #552]	; (9508 <usb_isr+0x5b8>)
    92de:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    92e2:	f000 fbd5 	bl	9a90 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    92e6:	2280      	movs	r2, #128	; 0x80
    92e8:	4629      	mov	r1, r5
    92ea:	4888      	ldr	r0, [pc, #544]	; (950c <usb_isr+0x5bc>)
    92ec:	f002 f92a 	bl	b544 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    92f0:	4b87      	ldr	r3, [pc, #540]	; (9510 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92f2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    92f4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    92f8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    92fc:	4b7b      	ldr	r3, [pc, #492]	; (94ec <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    92fe:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9300:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    9302:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9304:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    9306:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9308:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    930a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    930e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9312:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    931a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    931e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    9322:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9326:	2b00      	cmp	r3, #0
    9328:	d1fb      	bne.n	9322 <usb_isr+0x3d2>
    932a:	e666      	b.n	8ffa <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    932c:	4b6f      	ldr	r3, [pc, #444]	; (94ec <usb_isr+0x59c>)
    932e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    9330:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9332:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9334:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9336:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9338:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    933a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    933c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9340:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9344:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    934c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9350:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9354:	2b00      	cmp	r3, #0
    9356:	d1fb      	bne.n	9350 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9358:	0c13      	lsrs	r3, r2, #16
    935a:	065b      	lsls	r3, r3, #25
    935c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9360:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    9364:	e649      	b.n	8ffa <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    9366:	4b65      	ldr	r3, [pc, #404]	; (94fc <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9368:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    936a:	486a      	ldr	r0, [pc, #424]	; (9514 <usb_isr+0x5c4>)
    936c:	781b      	ldrb	r3, [r3, #0]
    936e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9370:	f7ff fd8c 	bl	8e8c <endpoint0_transmit.constprop.0>
		return;
    9374:	e641      	b.n	8ffa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9376:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    9378:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    937c:	f47f ae39 	bne.w	8ff2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    9380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9384:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    9388:	4a62      	ldr	r2, [pc, #392]	; (9514 <usb_isr+0x5c4>)
    938a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    938c:	0618      	lsls	r0, r3, #24
    938e:	f100 809e 	bmi.w	94ce <usb_isr+0x57e>
    9392:	07cb      	lsls	r3, r1, #31
    9394:	d501      	bpl.n	939a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    9396:	2301      	movs	r3, #1
    9398:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    939a:	2102      	movs	r1, #2
    939c:	485d      	ldr	r0, [pc, #372]	; (9514 <usb_isr+0x5c4>)
    939e:	f7ff fd75 	bl	8e8c <endpoint0_transmit.constprop.0>
		return;
    93a2:	e62a      	b.n	8ffa <usb_isr+0xaa>
		if (endpoint > 7) break;
    93a4:	f010 0f78 	tst.w	r0, #120	; 0x78
    93a8:	b283      	uxth	r3, r0
    93aa:	f47f ae22 	bne.w	8ff2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    93ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    93b2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    93b6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    93ba:	bf14      	ite	ne
    93bc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    93c0:	f043 0301 	orreq.w	r3, r3, #1
    93c4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    93c8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    93ca:	4b48      	ldr	r3, [pc, #288]	; (94ec <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    93cc:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    93ce:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    93d0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    93d2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    93d4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    93d6:	2280      	movs	r2, #128	; 0x80
    93d8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    93da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    93de:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    93e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    93e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    93ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    93ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    93f2:	2b00      	cmp	r3, #0
    93f4:	d1fb      	bne.n	93ee <usb_isr+0x49e>
    93f6:	e600      	b.n	8ffa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    93f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    93fc:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9400:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    9404:	bf14      	ite	ne
    9406:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    940a:	f023 0301 	biceq.w	r3, r3, #1
    940e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9412:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9414:	4b35      	ldr	r3, [pc, #212]	; (94ec <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9416:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9418:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    941a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    941c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    941e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9420:	2280      	movs	r2, #128	; 0x80
    9422:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9424:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9428:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    942c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9434:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9438:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    943c:	2b00      	cmp	r3, #0
    943e:	d1fb      	bne.n	9438 <usb_isr+0x4e8>
    9440:	e5db      	b.n	8ffa <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    9442:	2000      	movs	r0, #0
    9444:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    9446:	4926      	ldr	r1, [pc, #152]	; (94e0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9448:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    944a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    944c:	f242 0121 	movw	r1, #8225	; 0x2021
    9450:	428c      	cmp	r4, r1
    9452:	f47f ae25 	bne.w	90a0 <usb_isr+0x150>
    9456:	b280      	uxth	r0, r0
    9458:	2800      	cmp	r0, #0
    945a:	f47f ae21 	bne.w	90a0 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    945e:	492e      	ldr	r1, [pc, #184]	; (9518 <usb_isr+0x5c8>)
    9460:	4c2e      	ldr	r4, [pc, #184]	; (951c <usb_isr+0x5cc>)
    9462:	c903      	ldmia	r1, {r0, r1}
    9464:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    9466:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9468:	ea4f 4111 	mov.w	r1, r1, lsr #16
    946c:	6020      	str	r0, [r4, #0]
    946e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    9470:	f47f ae16 	bne.w	90a0 <usb_isr+0x150>
	__disable_irq();
    9474:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    9476:	482a      	ldr	r0, [pc, #168]	; (9520 <usb_isr+0x5d0>)
    9478:	7801      	ldrb	r1, [r0, #0]
    947a:	f041 0108 	orr.w	r1, r1, #8
    947e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9480:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9484:	060d      	lsls	r5, r1, #24
    9486:	d405      	bmi.n	9494 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9488:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    948a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    948c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9490:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    9494:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9496:	4a23      	ldr	r2, [pc, #140]	; (9524 <usb_isr+0x5d4>)
    9498:	2150      	movs	r1, #80	; 0x50
    949a:	7011      	strb	r1, [r2, #0]
    949c:	e600      	b.n	90a0 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    949e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    94a0:	782a      	ldrb	r2, [r5, #0]
    94a2:	4282      	cmp	r2, r0
    94a4:	bf28      	it	cs
    94a6:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    94a8:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    94ac:	d144      	bne.n	9538 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    94ae:	4b1e      	ldr	r3, [pc, #120]	; (9528 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    94b0:	4d1e      	ldr	r5, [pc, #120]	; (952c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    94b2:	7818      	ldrb	r0, [r3, #0]
    94b4:	491e      	ldr	r1, [pc, #120]	; (9530 <usb_isr+0x5e0>)
    94b6:	4b1f      	ldr	r3, [pc, #124]	; (9534 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    94b8:	9201      	str	r2, [sp, #4]
    94ba:	2800      	cmp	r0, #0
    94bc:	bf18      	it	ne
    94be:	4619      	movne	r1, r3
    94c0:	4628      	mov	r0, r5
    94c2:	f7ff fa97 	bl	89f4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    94c6:	2307      	movs	r3, #7
    94c8:	706b      	strb	r3, [r5, #1]
    94ca:	9a01      	ldr	r2, [sp, #4]
    94cc:	e03b      	b.n	9546 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    94ce:	03c9      	lsls	r1, r1, #15
    94d0:	f53f af61 	bmi.w	9396 <usb_isr+0x446>
    94d4:	e761      	b.n	939a <usb_isr+0x44a>
    94d6:	bf00      	nop
    94d8:	20004ee0 	.word	0x20004ee0
    94dc:	200063cc 	.word	0x200063cc
    94e0:	20005080 	.word	0x20005080
    94e4:	00070080 	.word	0x00070080
    94e8:	200073cc 	.word	0x200073cc
    94ec:	20004ec0 	.word	0x20004ec0
    94f0:	20018868 	.word	0x20018868
    94f4:	20018878 	.word	0x20018878
    94f8:	200188aa 	.word	0x200188aa
    94fc:	200188ab 	.word	0x200188ab
    9500:	00cc0002 	.word	0x00cc0002
    9504:	000200c8 	.word	0x000200c8
    9508:	00c80002 	.word	0x00c80002
    950c:	20000080 	.word	0x20000080
    9510:	74d59319 	.word	0x74d59319
    9514:	20018818 	.word	0x20018818
    9518:	200053cc 	.word	0x200053cc
    951c:	20018870 	.word	0x20018870
    9520:	200188a6 	.word	0x200188a6
    9524:	200188ad 	.word	0x200188ad
    9528:	200188ac 	.word	0x200188ac
    952c:	20200000 	.word	0x20200000
    9530:	60001ee8 	.word	0x60001ee8
    9534:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9538:	4629      	mov	r1, r5
    953a:	4d10      	ldr	r5, [pc, #64]	; (957c <usb_isr+0x62c>)
    953c:	9201      	str	r2, [sp, #4]
    953e:	4628      	mov	r0, r5
    9540:	f7ff fa58 	bl	89f4 <memcpy>
    9544:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9546:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    954a:	4415      	add	r5, r2
	asm("dsb");
    954c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9550:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9554:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    9558:	3320      	adds	r3, #32
	} while (location < end_addr);
    955a:	429d      	cmp	r5, r3
    955c:	d8fa      	bhi.n	9554 <usb_isr+0x604>
	asm("dsb");
    955e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9562:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    9566:	4805      	ldr	r0, [pc, #20]	; (957c <usb_isr+0x62c>)
    9568:	4611      	mov	r1, r2
    956a:	f7ff fc8f 	bl	8e8c <endpoint0_transmit.constprop.0>
				return;
    956e:	e544      	b.n	8ffa <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    9570:	2003      	movs	r0, #3
    9572:	f7ff fcd7 	bl	8f24 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9576:	f007 fce7 	bl	10f48 <___reboot_Teensyduino__veneer>
    957a:	bf00      	nop
    957c:	20200000 	.word	0x20200000

00009580 <usb_config_rx>:
{
    9580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9584:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9586:	1e83      	subs	r3, r0, #2
    9588:	2b02      	cmp	r3, #2
    958a:	d901      	bls.n	9590 <usb_config_rx+0x10>
}
    958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9590:	f8df 904c 	ldr.w	r9, [pc, #76]	; 95e0 <usb_config_rx+0x60>
    9594:	4615      	mov	r5, r2
    9596:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9598:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    959a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    959e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    95a0:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    95a4:	2100      	movs	r1, #0
    95a6:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    95aa:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    95ac:	f001 ffca 	bl	b544 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    95b0:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    95b4:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    95b6:	0952      	lsrs	r2, r2, #5
    95b8:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    95bc:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    95c0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    95c4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    95c8:	2f00      	cmp	r7, #0
    95ca:	d0df      	beq.n	958c <usb_config_rx+0xc>
    95cc:	4a03      	ldr	r2, [pc, #12]	; (95dc <usb_config_rx+0x5c>)
    95ce:	40b3      	lsls	r3, r6
    95d0:	6811      	ldr	r1, [r2, #0]
    95d2:	430b      	orrs	r3, r1
    95d4:	6013      	str	r3, [r2, #0]
}
    95d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95da:	bf00      	nop
    95dc:	200053d8 	.word	0x200053d8
    95e0:	20000000 	.word	0x20000000

000095e4 <usb_config_tx>:
{
    95e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95e8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    95ea:	1e81      	subs	r1, r0, #2
    95ec:	2902      	cmp	r1, #2
    95ee:	d901      	bls.n	95f4 <usb_config_tx+0x10>
}
    95f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    95f4:	01c7      	lsls	r7, r0, #7
    95f6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9644 <usb_config_tx+0x60>
    95fa:	4692      	mov	sl, r2
    95fc:	4604      	mov	r4, r0
    95fe:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9600:	223c      	movs	r2, #60	; 0x3c
    9602:	2100      	movs	r1, #0
    9604:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9606:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    960a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    960c:	f108 0004 	add.w	r0, r8, #4
    9610:	f001 ff98 	bl	b544 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9614:	faba f28a 	clz	r2, sl
    9618:	0952      	lsrs	r2, r2, #5
    961a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    961e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9622:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9624:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9628:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    962c:	2e00      	cmp	r6, #0
    962e:	d0df      	beq.n	95f0 <usb_config_tx+0xc>
    9630:	4b03      	ldr	r3, [pc, #12]	; (9640 <usb_config_tx+0x5c>)
    9632:	3410      	adds	r4, #16
    9634:	6819      	ldr	r1, [r3, #0]
    9636:	40a2      	lsls	r2, r4
    9638:	430a      	orrs	r2, r1
    963a:	601a      	str	r2, [r3, #0]
}
    963c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9640:	200053d8 	.word	0x200053d8
    9644:	20000000 	.word	0x20000000

00009648 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9648:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    964a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    964c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    964e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    9652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    9656:	b410      	push	{r4}
	transfer->next = 1;
    9658:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    965a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    965c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9660:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    9662:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    9666:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    966a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    966c:	6181      	str	r1, [r0, #24]
}
    966e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    9672:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    9676:	4770      	bx	lr

00009678 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9678:	1e83      	subs	r3, r0, #2
{
    967a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    967c:	2b02      	cmp	r3, #2
    967e:	d900      	bls.n	9682 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9680:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9682:	4b06      	ldr	r3, [pc, #24]	; (969c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    9684:	f100 0110 	add.w	r1, r0, #16
    9688:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    968c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9690:	fa0c f101 	lsl.w	r1, ip, r1
    9694:	3040      	adds	r0, #64	; 0x40
    9696:	f7ff bb99 	b.w	8dcc <schedule_transfer>
    969a:	bf00      	nop
    969c:	20000000 	.word	0x20000000

000096a0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    96a0:	1e83      	subs	r3, r0, #2
{
    96a2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    96a4:	2b02      	cmp	r3, #2
    96a6:	d900      	bls.n	96aa <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    96a8:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    96aa:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    96ac:	4b02      	ldr	r3, [pc, #8]	; (96b8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    96ae:	4081      	lsls	r1, r0
    96b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    96b4:	f7ff bb8a 	b.w	8dcc <schedule_transfer>
    96b8:	20000000 	.word	0x20000000

000096bc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    96bc:	6840      	ldr	r0, [r0, #4]
#endif
}
    96be:	4770      	bx	lr

000096c0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    96c0:	4a12      	ldr	r2, [pc, #72]	; (970c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    96c2:	4b13      	ldr	r3, [pc, #76]	; (9710 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    96c4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    96c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    96cc:	4298      	cmp	r0, r3
{
    96ce:	b510      	push	{r4, lr}
    96d0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    96d2:	d202      	bcs.n	96da <usb_init_serialnumber+0x1a>
    96d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    96d8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    96da:	4c0e      	ldr	r4, [pc, #56]	; (9714 <usb_init_serialnumber+0x54>)
    96dc:	a901      	add	r1, sp, #4
    96de:	220a      	movs	r2, #10
    96e0:	f7ff fa22 	bl	8b28 <ultoa>
	for (i=0; i<10; i++) {
    96e4:	a901      	add	r1, sp, #4
    96e6:	2300      	movs	r3, #0
    96e8:	4620      	mov	r0, r4
		char c = buf[i];
    96ea:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    96ee:	3301      	adds	r3, #1
		if (!c) break;
    96f0:	b13a      	cbz	r2, 9702 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    96f2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    96f4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    96f8:	d1f7      	bne.n	96ea <usb_init_serialnumber+0x2a>
    96fa:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    96fc:	7023      	strb	r3, [r4, #0]
}
    96fe:	b004      	add	sp, #16
    9700:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9702:	005b      	lsls	r3, r3, #1
    9704:	b2db      	uxtb	r3, r3
    9706:	7023      	strb	r3, [r4, #0]
}
    9708:	b004      	add	sp, #16
    970a:	bd10      	pop	{r4, pc}
    970c:	401f4400 	.word	0x401f4400
    9710:	00989680 	.word	0x00989680
    9714:	20004950 	.word	0x20004950

00009718 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9718:	f000 bace 	b.w	9cb8 <usb_serial_flush_input>

0000971c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    971c:	f000 bac0 	b.w	9ca0 <usb_serial_available>

00009720 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9720:	f000 bb5c 	b.w	9ddc <usb_serial_flush_output>

00009724 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9724:	f000 bb32 	b.w	9d8c <usb_serial_write_buffer_free>

00009728 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9728:	4608      	mov	r0, r1
    972a:	4611      	mov	r1, r2
    972c:	f000 bb22 	b.w	9d74 <usb_serial_write>

00009730 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9732:	4c14      	ldr	r4, [pc, #80]	; (9784 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9734:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9738:	4e13      	ldr	r6, [pc, #76]	; (9788 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    973a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    973e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9742:	4f12      	ldr	r7, [pc, #72]	; (978c <rx_queue_transfer+0x5c>)
    9744:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9748:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    974a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    974e:	4621      	mov	r1, r4
    9750:	883a      	ldrh	r2, [r7, #0]
    9752:	4630      	mov	r0, r6
    9754:	f7ff ff78 	bl	9648 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9758:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    975a:	4423      	add	r3, r4
	asm("dsb");
    975c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9760:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9764:	3420      	adds	r4, #32
	} while (location < end_addr);
    9766:	42a3      	cmp	r3, r4
    9768:	d8fa      	bhi.n	9760 <rx_queue_transfer+0x30>
	asm("dsb");
    976a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    976e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9772:	2003      	movs	r0, #3
    9774:	4631      	mov	r1, r6
    9776:	f7ff ff93 	bl	96a0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    977a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    977e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9784:	20200080 	.word	0x20200080
    9788:	20004f00 	.word	0x20004f00
    978c:	2001888a 	.word	0x2001888a

00009790 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9790:	4b24      	ldr	r3, [pc, #144]	; (9824 <rx_event+0x94>)
{
    9792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9796:	881c      	ldrh	r4, [r3, #0]
    9798:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    979a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    979c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    97a0:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    97a2:	2c00      	cmp	r4, #0
    97a4:	dd24      	ble.n	97f0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    97a6:	4920      	ldr	r1, [pc, #128]	; (9828 <rx_event+0x98>)
		if (head != rx_tail) {
    97a8:	4820      	ldr	r0, [pc, #128]	; (982c <rx_event+0x9c>)
		uint32_t head = rx_head;
    97aa:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    97ac:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    97ae:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    97b0:	4e1f      	ldr	r6, [pc, #124]	; (9830 <rx_event+0xa0>)
		if (head != rx_tail) {
    97b2:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    97b4:	481f      	ldr	r0, [pc, #124]	; (9834 <rx_event+0xa4>)
		if (head != rx_tail) {
    97b6:	d007      	beq.n	97c8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    97b8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    97bc:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    97c0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    97c4:	4294      	cmp	r4, r2
    97c6:	d918      	bls.n	97fa <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    97c8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    97ca:	2200      	movs	r2, #0
		rx_count[i] = len;
    97cc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    97d0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    97d2:	4e19      	ldr	r6, [pc, #100]	; (9838 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    97d4:	bf88      	it	hi
    97d6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    97d8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    97dc:	bf98      	it	ls
    97de:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    97e0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    97e2:	4b16      	ldr	r3, [pc, #88]	; (983c <rx_event+0xac>)
		rx_head = head;
    97e4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    97e6:	681a      	ldr	r2, [r3, #0]
    97e8:	4414      	add	r4, r2
    97ea:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    97ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    97f0:	4628      	mov	r0, r5
}
    97f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    97f6:	f7ff bf9b 	b.w	9730 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    97fa:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    97fe:	4910      	ldr	r1, [pc, #64]	; (9840 <rx_event+0xb0>)
    9800:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9802:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9804:	4408      	add	r0, r1
    9806:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    980a:	f7ff f8f3 	bl	89f4 <memcpy>
				rx_available += len;
    980e:	4a0b      	ldr	r2, [pc, #44]	; (983c <rx_event+0xac>)
				rx_queue_transfer(i);
    9810:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9812:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9816:	6813      	ldr	r3, [r2, #0]
    9818:	4423      	add	r3, r4
}
    981a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    981e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9820:	f7ff bf86 	b.w	9730 <rx_queue_transfer>
    9824:	2001888a 	.word	0x2001888a
    9828:	200188a4 	.word	0x200188a4
    982c:	200188a5 	.word	0x200188a5
    9830:	20018824 	.word	0x20018824
    9834:	20018844 	.word	0x20018844
    9838:	20018834 	.word	0x20018834
    983c:	20018820 	.word	0x20018820
    9840:	20200080 	.word	0x20200080

00009844 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9844:	4b1d      	ldr	r3, [pc, #116]	; (98bc <usb_serial_flush_callback+0x78>)
    9846:	781a      	ldrb	r2, [r3, #0]
    9848:	2a00      	cmp	r2, #0
    984a:	d136      	bne.n	98ba <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    984c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9850:	4a1b      	ldr	r2, [pc, #108]	; (98c0 <usb_serial_flush_callback+0x7c>)
    9852:	7812      	ldrb	r2, [r2, #0]
    9854:	b38a      	cbz	r2, 98ba <usb_serial_flush_callback+0x76>
{
    9856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    985a:	4d1a      	ldr	r5, [pc, #104]	; (98c4 <usb_serial_flush_callback+0x80>)
    985c:	882a      	ldrh	r2, [r5, #0]
    985e:	b352      	cbz	r2, 98b6 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9860:	4e19      	ldr	r6, [pc, #100]	; (98c8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9862:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9866:	4f19      	ldr	r7, [pc, #100]	; (98cc <usb_serial_flush_callback+0x88>)
    9868:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    986a:	4c19      	ldr	r4, [pc, #100]	; (98d0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    986c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9870:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9874:	4642      	mov	r2, r8
    9876:	4638      	mov	r0, r7
    9878:	4621      	mov	r1, r4
    987a:	f7ff fee5 	bl	9648 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    987e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9882:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9886:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    988a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    988e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9890:	42a2      	cmp	r2, r4
    9892:	d8fa      	bhi.n	988a <usb_serial_flush_callback+0x46>
	asm("dsb");
    9894:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9898:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    989c:	2004      	movs	r0, #4
    989e:	4639      	mov	r1, r7
    98a0:	f7ff feea 	bl	9678 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    98a4:	7833      	ldrb	r3, [r6, #0]
    98a6:	3301      	adds	r3, #1
    98a8:	b2db      	uxtb	r3, r3
    98aa:	2b03      	cmp	r3, #3
    98ac:	bf88      	it	hi
    98ae:	2300      	movhi	r3, #0
    98b0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    98b2:	2300      	movs	r3, #0
    98b4:	802b      	strh	r3, [r5, #0]
}
    98b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    98ba:	4770      	bx	lr
    98bc:	200188a9 	.word	0x200188a9
    98c0:	200188ab 	.word	0x200188ab
    98c4:	2001888c 	.word	0x2001888c
    98c8:	200188a8 	.word	0x200188a8
    98cc:	20005000 	.word	0x20005000
    98d0:	20201080 	.word	0x20201080

000098d4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    98d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98d8:	b085      	sub	sp, #20
	while (size > 0) {
    98da:	e9cd 1001 	strd	r1, r0, [sp, #4]
    98de:	2900      	cmp	r1, #0
    98e0:	f000 80bf 	beq.w	9a62 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    98e4:	2300      	movs	r3, #0
    98e6:	4c60      	ldr	r4, [pc, #384]	; (9a68 <usb_serial_write.part.0+0x194>)
    98e8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9a84 <usb_serial_write.part.0+0x1b0>
    98ec:	f8df a198 	ldr.w	sl, [pc, #408]	; 9a88 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    98f0:	4f5e      	ldr	r7, [pc, #376]	; (9a6c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    98f2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    98f4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    98f6:	4a5e      	ldr	r2, [pc, #376]	; (9a70 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    98f8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    98fa:	4b5e      	ldr	r3, [pc, #376]	; (9a74 <usb_serial_write.part.0+0x1a0>)
    98fc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    98fe:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9902:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9906:	2b00      	cmp	r3, #0
    9908:	f040 80a7 	bne.w	9a5a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    990c:	461e      	mov	r6, r3
		int waiting=0;
    990e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9910:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9912:	4648      	mov	r0, r9
    9914:	f7ff fed2 	bl	96bc <usb_transfer_status>
			if (!(status & 0x80)) {
    9918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    991c:	f000 808c 	beq.w	9a38 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9920:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9924:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9928:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    992c:	b905      	cbnz	r5, 9930 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    992e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9930:	2b00      	cmp	r3, #0
    9932:	d17d      	bne.n	9a30 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9934:	683b      	ldr	r3, [r7, #0]
    9936:	1b9b      	subs	r3, r3, r6
    9938:	2b78      	cmp	r3, #120	; 0x78
    993a:	f200 8087 	bhi.w	9a4c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    993e:	4b4e      	ldr	r3, [pc, #312]	; (9a78 <usb_serial_write.part.0+0x1a4>)
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	2b00      	cmp	r3, #0
    9944:	d074      	beq.n	9a30 <usb_serial_write.part.0+0x15c>
			yield();
    9946:	f000 fa93 	bl	9e70 <yield>
			tx_noautoflush = 1;
    994a:	2201      	movs	r2, #1
		while (!tx_available) {
    994c:	f8b8 3000 	ldrh.w	r3, [r8]
    9950:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9952:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9954:	2b00      	cmp	r3, #0
    9956:	d0dc      	beq.n	9912 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9958:	4a46      	ldr	r2, [pc, #280]	; (9a74 <usb_serial_write.part.0+0x1a0>)
    995a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    995e:	7811      	ldrb	r1, [r2, #0]
    9960:	461a      	mov	r2, r3
    9962:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9966:	4d45      	ldr	r5, [pc, #276]	; (9a7c <usb_serial_write.part.0+0x1a8>)
    9968:	02c9      	lsls	r1, r1, #11
    996a:	4428      	add	r0, r5
		if (size >= tx_available) {
    996c:	9d01      	ldr	r5, [sp, #4]
    996e:	4295      	cmp	r5, r2
    9970:	d217      	bcs.n	99a2 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9972:	9303      	str	r3, [sp, #12]
    9974:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9978:	462a      	mov	r2, r5
    997a:	f7ff f83b 	bl	89f4 <memcpy>
			tx_available -= size;
    997e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9980:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9984:	1b5b      	subs	r3, r3, r5
    9986:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    998a:	4b3d      	ldr	r3, [pc, #244]	; (9a80 <usb_serial_write.part.0+0x1ac>)
    998c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9990:	f3bf 8f4f 	dsb	sy
			sent += size;
    9994:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9996:	2300      	movs	r3, #0
			sent += size;
    9998:	4428      	add	r0, r5
		tx_noautoflush = 0;
    999a:	7023      	strb	r3, [r4, #0]
}
    999c:	b005      	add	sp, #20
    999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    99a2:	4b36      	ldr	r3, [pc, #216]	; (9a7c <usb_serial_write.part.0+0x1a8>)
    99a4:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    99a6:	9902      	ldr	r1, [sp, #8]
    99a8:	f7ff f824 	bl	89f4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    99ac:	2300      	movs	r3, #0
    99ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    99b2:	4629      	mov	r1, r5
    99b4:	4648      	mov	r0, r9
    99b6:	f7ff fe47 	bl	9648 <usb_prepare_transfer>
	asm("dsb");
    99ba:	f3bf 8f4f 	dsb	sy
    99be:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    99c2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    99c6:	4293      	cmp	r3, r2
    99c8:	bf34      	ite	cc
    99ca:	2301      	movcc	r3, #1
    99cc:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    99ce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    99d2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    99d6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    99da:	3520      	adds	r5, #32
	} while (location < end_addr);
    99dc:	42ab      	cmp	r3, r5
    99de:	d1fa      	bne.n	99d6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    99e0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    99e4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    99e8:	2004      	movs	r0, #4
    99ea:	4649      	mov	r1, r9
    99ec:	f7ff fe44 	bl	9678 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    99f0:	4a20      	ldr	r2, [pc, #128]	; (9a74 <usb_serial_write.part.0+0x1a0>)
    99f2:	7813      	ldrb	r3, [r2, #0]
    99f4:	3301      	adds	r3, #1
    99f6:	b2db      	uxtb	r3, r3
    99f8:	2b03      	cmp	r3, #3
    99fa:	bf84      	itt	hi
    99fc:	2300      	movhi	r3, #0
    99fe:	4a1d      	ldrhi	r2, [pc, #116]	; (9a74 <usb_serial_write.part.0+0x1a0>)
    9a00:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9a02:	f8b8 3000 	ldrh.w	r3, [r8]
    9a06:	9a01      	ldr	r2, [sp, #4]
    9a08:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9a0a:	9a00      	ldr	r2, [sp, #0]
    9a0c:	441a      	add	r2, r3
			size -= tx_available;
    9a0e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9a10:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9a12:	9a02      	ldr	r2, [sp, #8]
    9a14:	441a      	add	r2, r3
			tx_available = 0;
    9a16:	2300      	movs	r3, #0
			data += tx_available;
    9a18:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9a1a:	4a19      	ldr	r2, [pc, #100]	; (9a80 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9a1c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9a20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9a24:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9a28:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    9a2a:	2900      	cmp	r1, #0
    9a2c:	f47f af62 	bne.w	98f4 <usb_serial_write.part.0+0x20>
	return sent;
    9a30:	9800      	ldr	r0, [sp, #0]
}
    9a32:	b005      	add	sp, #20
    9a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a3c:	4b0d      	ldr	r3, [pc, #52]	; (9a74 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    9a3e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a42:	7819      	ldrb	r1, [r3, #0]
				break;
    9a44:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9a46:	f8a8 2000 	strh.w	r2, [r8]
				break;
    9a4a:	e78a      	b.n	9962 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    9a4c:	2301      	movs	r3, #1
				return sent;
    9a4e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9a50:	f88a 3000 	strb.w	r3, [sl]
}
    9a54:	b005      	add	sp, #20
    9a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a5a:	461a      	mov	r2, r3
    9a5c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9a60:	e77f      	b.n	9962 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9a62:	9801      	ldr	r0, [sp, #4]
	return sent;
    9a64:	e7e5      	b.n	9a32 <usb_serial_write.part.0+0x15e>
    9a66:	bf00      	nop
    9a68:	200188a9 	.word	0x200188a9
    9a6c:	20018868 	.word	0x20018868
    9a70:	20005000 	.word	0x20005000
    9a74:	200188a8 	.word	0x200188a8
    9a78:	200188ab 	.word	0x200188ab
    9a7c:	20201080 	.word	0x20201080
    9a80:	402e0000 	.word	0x402e0000
    9a84:	2001888c 	.word	0x2001888c
    9a88:	200188a7 	.word	0x200188a7

00009a8c <usb_serial_reset>:
}
    9a8c:	4770      	bx	lr
    9a8e:	bf00      	nop

00009a90 <usb_serial_configure>:
	if (usb_high_speed) {
    9a90:	4b2a      	ldr	r3, [pc, #168]	; (9b3c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9a92:	2100      	movs	r1, #0
    9a94:	2280      	movs	r2, #128	; 0x80
    9a96:	482a      	ldr	r0, [pc, #168]	; (9b40 <usb_serial_configure+0xb0>)
{
    9a98:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9a9a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    9a9c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9a9e:	4d29      	ldr	r5, [pc, #164]	; (9b44 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9aa0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9aa2:	4e29      	ldr	r6, [pc, #164]	; (9b48 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9aa4:	bf0c      	ite	eq
    9aa6:	2340      	moveq	r3, #64	; 0x40
    9aa8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9aac:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9aae:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9ab0:	f001 fd48 	bl	b544 <memset>
	tx_head = 0;
    9ab4:	4a25      	ldr	r2, [pc, #148]	; (9b4c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ab6:	4621      	mov	r1, r4
	tx_available = 0;
    9ab8:	4b25      	ldr	r3, [pc, #148]	; (9b50 <usb_serial_configure+0xc0>)
	tx_head = 0;
    9aba:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9abc:	f44f 7280 	mov.w	r2, #256	; 0x100
    9ac0:	4824      	ldr	r0, [pc, #144]	; (9b54 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9ac2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9ac4:	f001 fd3e 	bl	b544 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9ac8:	4a23      	ldr	r2, [pc, #140]	; (9b58 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9aca:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    9acc:	4b23      	ldr	r3, [pc, #140]	; (9b5c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9ace:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9ad0:	e9c2 4400 	strd	r4, r4, [r2]
    9ad4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9ad8:	4a21      	ldr	r2, [pc, #132]	; (9b60 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    9ada:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9ade:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9ae0:	4a20      	ldr	r2, [pc, #128]	; (9b64 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9ae2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9ae6:	4b20      	ldr	r3, [pc, #128]	; (9b68 <usb_serial_configure+0xd8>)
    9ae8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9aea:	4623      	mov	r3, r4
	rx_available = 0;
    9aec:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9aee:	4622      	mov	r2, r4
    9af0:	f7ff fd78 	bl	95e4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9af4:	4622      	mov	r2, r4
    9af6:	8831      	ldrh	r1, [r6, #0]
    9af8:	2003      	movs	r0, #3
    9afa:	4b1c      	ldr	r3, [pc, #112]	; (9b6c <usb_serial_configure+0xdc>)
    9afc:	f7ff fd40 	bl	9580 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9b00:	4623      	mov	r3, r4
    9b02:	2201      	movs	r2, #1
    9b04:	8829      	ldrh	r1, [r5, #0]
    9b06:	2004      	movs	r0, #4
    9b08:	f7ff fd6c 	bl	95e4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9b0c:	4620      	mov	r0, r4
    9b0e:	3401      	adds	r4, #1
    9b10:	f7ff fe0e 	bl	9730 <rx_queue_transfer>
    9b14:	2c08      	cmp	r4, #8
    9b16:	d1f9      	bne.n	9b0c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9b18:	4b15      	ldr	r3, [pc, #84]	; (9b70 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    9b1a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    9b1c:	4815      	ldr	r0, [pc, #84]	; (9b74 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    9b1e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9b20:	4c15      	ldr	r4, [pc, #84]	; (9b78 <usb_serial_configure+0xe8>)
    9b22:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9b24:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9b2c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9b30:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9b34:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    9b38:	bd70      	pop	{r4, r5, r6, pc}
    9b3a:	bf00      	nop
    9b3c:	200188ac 	.word	0x200188ac
    9b40:	20005000 	.word	0x20005000
    9b44:	2001888e 	.word	0x2001888e
    9b48:	2001888a 	.word	0x2001888a
    9b4c:	200188a8 	.word	0x200188a8
    9b50:	2001888c 	.word	0x2001888c
    9b54:	20004f00 	.word	0x20004f00
    9b58:	20018824 	.word	0x20018824
    9b5c:	20018834 	.word	0x20018834
    9b60:	200188a4 	.word	0x200188a4
    9b64:	20018820 	.word	0x20018820
    9b68:	200188a5 	.word	0x200188a5
    9b6c:	00009791 	.word	0x00009791
    9b70:	402e0000 	.word	0x402e0000
    9b74:	2001887c 	.word	0x2001887c
    9b78:	00009845 	.word	0x00009845

00009b7c <usb_serial_read>:
{
    9b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9b80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9b84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    9b88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9c54 <usb_serial_read+0xd8>
{
    9b8c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9b8e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    9b92:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    9b94:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    9b98:	2900      	cmp	r1, #0
    9b9a:	d04f      	beq.n	9c3c <usb_serial_read+0xc0>
    9b9c:	4680      	mov	r8, r0
    9b9e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9ba0:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    9ba2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9c58 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    9ba6:	4b26      	ldr	r3, [pc, #152]	; (9c40 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9ba8:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9bac:	4925      	ldr	r1, [pc, #148]	; (9c44 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    9bae:	781b      	ldrb	r3, [r3, #0]
    9bb0:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    9bb2:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    9bb6:	d03f      	beq.n	9c38 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9bb8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    9bba:	4b23      	ldr	r3, [pc, #140]	; (9c48 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9bbc:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    9bbe:	bf28      	it	cs
    9bc0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9bc2:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9bc4:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9bc8:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    9bcc:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    9bce:	4b1f      	ldr	r3, [pc, #124]	; (9c4c <usb_serial_read+0xd0>)
    9bd0:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    9bd4:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9bd8:	42aa      	cmp	r2, r5
    9bda:	d21c      	bcs.n	9c16 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9bdc:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9be0:	4918      	ldr	r1, [pc, #96]	; (9c44 <usb_serial_read+0xc8>)
			rx_available -= len;
    9be2:	4c1b      	ldr	r4, [pc, #108]	; (9c50 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9be4:	4461      	add	r1, ip
    9be6:	9201      	str	r2, [sp, #4]
    9be8:	f7fe ff04 	bl	89f4 <memcpy>
			rx_available -= len;
    9bec:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    9bee:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    9bf2:	4658      	mov	r0, fp
			rx_index[i] += len;
    9bf4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    9bf6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    9bfa:	442a      	add	r2, r5
			rx_available -= len;
    9bfc:	4439      	add	r1, r7
			rx_index[i] += len;
    9bfe:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    9c02:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9c04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9c0c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9c10:	b003      	add	sp, #12
    9c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9c16:	462a      	mov	r2, r5
			count += avail;
    9c18:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9c1a:	f7fe feeb 	bl	89f4 <memcpy>
			rx_available -= avail;
    9c1e:	490c      	ldr	r1, [pc, #48]	; (9c50 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9c20:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9c22:	4630      	mov	r0, r6
			rx_available -= avail;
    9c24:	680a      	ldr	r2, [r1, #0]
			p += avail;
    9c26:	44a8      	add	r8, r5
			rx_available -= avail;
    9c28:	1b52      	subs	r2, r2, r5
    9c2a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    9c2c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    9c30:	f7ff fd7e 	bl	9730 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    9c34:	45bb      	cmp	fp, r7
    9c36:	d8b6      	bhi.n	9ba6 <usb_serial_read+0x2a>
	return count;
    9c38:	4638      	mov	r0, r7
    9c3a:	e7e3      	b.n	9c04 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    9c3c:	4608      	mov	r0, r1
    9c3e:	e7e1      	b.n	9c04 <usb_serial_read+0x88>
    9c40:	200188a4 	.word	0x200188a4
    9c44:	20200080 	.word	0x20200080
    9c48:	20018844 	.word	0x20018844
    9c4c:	20018824 	.word	0x20018824
    9c50:	20018820 	.word	0x20018820
    9c54:	200188a5 	.word	0x200188a5
    9c58:	20018834 	.word	0x20018834

00009c5c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    9c5c:	4b0b      	ldr	r3, [pc, #44]	; (9c8c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    9c5e:	4a0c      	ldr	r2, [pc, #48]	; (9c90 <usb_serial_peekchar+0x34>)
    9c60:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    9c62:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    9c64:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    9c66:	428a      	cmp	r2, r1
    9c68:	d00d      	beq.n	9c86 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    9c6a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    9c6c:	4809      	ldr	r0, [pc, #36]	; (9c94 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9c6e:	4a0a      	ldr	r2, [pc, #40]	; (9c98 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    9c70:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9c72:	490a      	ldr	r1, [pc, #40]	; (9c9c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    9c74:	bf28      	it	cs
    9c76:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9c78:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9c7a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    9c7e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    9c82:	5c58      	ldrb	r0, [r3, r1]
    9c84:	4770      	bx	lr
	if (tail == rx_head) return -1;
    9c86:	f04f 30ff 	mov.w	r0, #4294967295
}
    9c8a:	4770      	bx	lr
    9c8c:	200188a4 	.word	0x200188a4
    9c90:	200188a5 	.word	0x200188a5
    9c94:	20018844 	.word	0x20018844
    9c98:	20200080 	.word	0x20200080
    9c9c:	20018834 	.word	0x20018834

00009ca0 <usb_serial_available>:
	uint32_t n = rx_available;
    9ca0:	4b04      	ldr	r3, [pc, #16]	; (9cb4 <usb_serial_available+0x14>)
{
    9ca2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    9ca4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9ca6:	b10c      	cbz	r4, 9cac <usb_serial_available+0xc>
}
    9ca8:	4620      	mov	r0, r4
    9caa:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    9cac:	f000 f8e0 	bl	9e70 <yield>
}
    9cb0:	4620      	mov	r0, r4
    9cb2:	bd10      	pop	{r4, pc}
    9cb4:	20018820 	.word	0x20018820

00009cb8 <usb_serial_flush_input>:
{
    9cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    9cbc:	4e14      	ldr	r6, [pc, #80]	; (9d10 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    9cbe:	4d15      	ldr	r5, [pc, #84]	; (9d14 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9cc0:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    9cc2:	782a      	ldrb	r2, [r5, #0]
    9cc4:	4293      	cmp	r3, r2
    9cc6:	d021      	beq.n	9d0c <usb_serial_flush_input+0x54>
    9cc8:	b2dc      	uxtb	r4, r3
    9cca:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9d1c <usb_serial_flush_input+0x64>
    9cce:	f8df b050 	ldr.w	fp, [pc, #80]	; 9d20 <usb_serial_flush_input+0x68>
    9cd2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9d24 <usb_serial_flush_input+0x6c>
    9cd6:	4f10      	ldr	r7, [pc, #64]	; (9d18 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9cd8:	3401      	adds	r4, #1
    9cda:	2c08      	cmp	r4, #8
		rx_tail = tail;
    9cdc:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9ce0:	d901      	bls.n	9ce6 <usb_serial_flush_input+0x2e>
    9ce2:	2400      	movs	r4, #0
    9ce4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    9ce6:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    9cea:	f8db 3000 	ldr.w	r3, [fp]
    9cee:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    9cf2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    9cf6:	1a52      	subs	r2, r2, r1
    9cf8:	1a9b      	subs	r3, r3, r2
    9cfa:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    9cfe:	f7ff fd17 	bl	9730 <rx_queue_transfer>
		rx_tail = tail;
    9d02:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    9d06:	782b      	ldrb	r3, [r5, #0]
    9d08:	42a3      	cmp	r3, r4
    9d0a:	d1e5      	bne.n	9cd8 <usb_serial_flush_input+0x20>
}
    9d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d10:	200188a5 	.word	0x200188a5
    9d14:	200188a4 	.word	0x200188a4
    9d18:	20018834 	.word	0x20018834
    9d1c:	20018844 	.word	0x20018844
    9d20:	20018820 	.word	0x20018820
    9d24:	20018824 	.word	0x20018824

00009d28 <usb_serial_getchar>:
{
    9d28:	b500      	push	{lr}
    9d2a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    9d2c:	2101      	movs	r1, #1
    9d2e:	f10d 0007 	add.w	r0, sp, #7
    9d32:	f7ff ff23 	bl	9b7c <usb_serial_read>
    9d36:	b120      	cbz	r0, 9d42 <usb_serial_getchar+0x1a>
    9d38:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    9d3c:	b003      	add	sp, #12
    9d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    9d42:	f04f 30ff 	mov.w	r0, #4294967295
    9d46:	e7f9      	b.n	9d3c <usb_serial_getchar+0x14>

00009d48 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    9d48:	4b09      	ldr	r3, [pc, #36]	; (9d70 <usb_serial_putchar+0x28>)
{
    9d4a:	b500      	push	{lr}
    9d4c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    9d4e:	781b      	ldrb	r3, [r3, #0]
{
    9d50:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    9d54:	b13b      	cbz	r3, 9d66 <usb_serial_putchar+0x1e>
    9d56:	2101      	movs	r1, #1
    9d58:	f10d 0007 	add.w	r0, sp, #7
    9d5c:	f7ff fdba 	bl	98d4 <usb_serial_write.part.0>
}
    9d60:	b003      	add	sp, #12
    9d62:	f85d fb04 	ldr.w	pc, [sp], #4
    9d66:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9d6a:	b003      	add	sp, #12
    9d6c:	f85d fb04 	ldr.w	pc, [sp], #4
    9d70:	200188ab 	.word	0x200188ab

00009d74 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9d74:	4b04      	ldr	r3, [pc, #16]	; (9d88 <usb_serial_write+0x14>)
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9d7c:	b10b      	cbz	r3, 9d82 <usb_serial_write+0xe>
    9d7e:	f7ff bda9 	b.w	98d4 <usb_serial_write.part.0>
}
    9d82:	4610      	mov	r0, r2
    9d84:	4770      	bx	lr
    9d86:	bf00      	nop
    9d88:	200188ab 	.word	0x200188ab

00009d8c <usb_serial_write_buffer_free>:
{
    9d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9d90:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    9d92:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9dd8 <usb_serial_write_buffer_free+0x4c>
    9d96:	2301      	movs	r3, #1
    9d98:	4d0d      	ldr	r5, [pc, #52]	; (9dd0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    9d9a:	4627      	mov	r7, r4
    9d9c:	4e0d      	ldr	r6, [pc, #52]	; (9dd4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    9d9e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    9da2:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9da4:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    9da6:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    9da8:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    9daa:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    9dae:	d005      	beq.n	9dbc <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9db0:	f7ff fc84 	bl	96bc <usb_transfer_status>
    9db4:	0603      	lsls	r3, r0, #24
    9db6:	bf58      	it	pl
    9db8:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    9dbc:	2c04      	cmp	r4, #4
    9dbe:	d1f0      	bne.n	9da2 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    9dc0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9dc4:	2300      	movs	r3, #0
}
    9dc6:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    9dc8:	f888 3000 	strb.w	r3, [r8]
}
    9dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9dd0:	20005000 	.word	0x20005000
    9dd4:	200188a8 	.word	0x200188a8
    9dd8:	200188a9 	.word	0x200188a9

00009ddc <usb_serial_flush_output>:
{
    9ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9de0:	4b1d      	ldr	r3, [pc, #116]	; (9e58 <usb_serial_flush_output+0x7c>)
    9de2:	781b      	ldrb	r3, [r3, #0]
    9de4:	b113      	cbz	r3, 9dec <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    9de6:	4d1d      	ldr	r5, [pc, #116]	; (9e5c <usb_serial_flush_output+0x80>)
    9de8:	882a      	ldrh	r2, [r5, #0]
    9dea:	b90a      	cbnz	r2, 9df0 <usb_serial_flush_output+0x14>
}
    9dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    9df0:	4e1b      	ldr	r6, [pc, #108]	; (9e60 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    9df2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9df6:	491b      	ldr	r1, [pc, #108]	; (9e64 <usb_serial_flush_output+0x88>)
    9df8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9dfa:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9dfc:	4c1a      	ldr	r4, [pc, #104]	; (9e68 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9dfe:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    9e02:	4f1a      	ldr	r7, [pc, #104]	; (9e6c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e04:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    9e08:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9e0a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    9e0c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9e0e:	4621      	mov	r1, r4
    9e10:	2300      	movs	r3, #0
    9e12:	f7ff fc19 	bl	9648 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9e16:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    9e1a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9e22:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9e26:	3420      	adds	r4, #32
	} while (location < end_addr);
    9e28:	42a2      	cmp	r2, r4
    9e2a:	d8fa      	bhi.n	9e22 <usb_serial_flush_output+0x46>
	asm("dsb");
    9e2c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9e30:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9e34:	2004      	movs	r0, #4
    9e36:	4641      	mov	r1, r8
    9e38:	f7ff fc1e 	bl	9678 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9e3c:	7833      	ldrb	r3, [r6, #0]
    9e3e:	3301      	adds	r3, #1
    9e40:	b2db      	uxtb	r3, r3
    9e42:	2b03      	cmp	r3, #3
    9e44:	bf88      	it	hi
    9e46:	2300      	movhi	r3, #0
    9e48:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9e4a:	2300      	movs	r3, #0
    9e4c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    9e4e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    9e52:	703b      	strb	r3, [r7, #0]
}
    9e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e58:	200188ab 	.word	0x200188ab
    9e5c:	2001888c 	.word	0x2001888c
    9e60:	200188a8 	.word	0x200188a8
    9e64:	20005000 	.word	0x20005000
    9e68:	20201080 	.word	0x20201080
    9e6c:	200188a9 	.word	0x200188a9

00009e70 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    9e74:	4e32      	ldr	r6, [pc, #200]	; (9f40 <yield+0xd0>)
    9e76:	7833      	ldrb	r3, [r6, #0]
    9e78:	b163      	cbz	r3, 9e94 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    9e7a:	4f32      	ldr	r7, [pc, #200]	; (9f44 <yield+0xd4>)
    9e7c:	783a      	ldrb	r2, [r7, #0]
    9e7e:	b94a      	cbnz	r2, 9e94 <yield+0x24>
	running = 1;
    9e80:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e82:	07d9      	lsls	r1, r3, #31
	running = 1;
    9e84:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    9e86:	d444      	bmi.n	9f12 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    9e88:	079a      	lsls	r2, r3, #30
    9e8a:	d426      	bmi.n	9eda <yield+0x6a>

	running = 0;
    9e8c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9e8e:	075b      	lsls	r3, r3, #29
	running = 0;
    9e90:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9e92:	d401      	bmi.n	9e98 <yield+0x28>
	
};
    9e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    9e98:	4b2b      	ldr	r3, [pc, #172]	; (9f48 <yield+0xd8>)
    9e9a:	681a      	ldr	r2, [r3, #0]
    9e9c:	2a00      	cmp	r2, #0
    9e9e:	d0f9      	beq.n	9e94 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9ea0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    9ea4:	2a00      	cmp	r2, #0
    9ea6:	d1f5      	bne.n	9e94 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9ea8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    9eac:	b672      	cpsid	i
		EventResponder *first = firstYield;
    9eae:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    9eb0:	2800      	cmp	r0, #0
    9eb2:	d03b      	beq.n	9f2c <yield+0xbc>
		if (runningFromYield) {
    9eb4:	4c25      	ldr	r4, [pc, #148]	; (9f4c <yield+0xdc>)
    9eb6:	7821      	ldrb	r1, [r4, #0]
    9eb8:	2900      	cmp	r1, #0
    9eba:	d137      	bne.n	9f2c <yield+0xbc>
		runningFromYield = true;
    9ebc:	2201      	movs	r2, #1
    9ebe:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    9ec0:	6942      	ldr	r2, [r0, #20]
    9ec2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    9ec4:	2a00      	cmp	r2, #0
    9ec6:	d038      	beq.n	9f3a <yield+0xca>
			firstYield->_prev = nullptr;
    9ec8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9eca:	b905      	cbnz	r5, 9ece <yield+0x5e>
    9ecc:	b662      	cpsie	i
		first->_triggered = false;
    9ece:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    9ed0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    9ed2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    9ed4:	4798      	blx	r3
		runningFromYield = false;
    9ed6:	7025      	strb	r5, [r4, #0]
    9ed8:	e7dc      	b.n	9e94 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9eda:	f8df 807c 	ldr.w	r8, [pc, #124]	; 9f58 <yield+0xe8>
    9ede:	f898 2000 	ldrb.w	r2, [r8]
    9ee2:	2a00      	cmp	r2, #0
    9ee4:	d0d2      	beq.n	9e8c <yield+0x1c>
    9ee6:	2500      	movs	r5, #0
    9ee8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 9f5c <yield+0xec>
    9eec:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    9eee:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9ef2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    9ef4:	6823      	ldr	r3, [r4, #0]
    9ef6:	4620      	mov	r0, r4
    9ef8:	691b      	ldr	r3, [r3, #16]
    9efa:	4798      	blx	r3
    9efc:	b110      	cbz	r0, 9f04 <yield+0x94>
    9efe:	6963      	ldr	r3, [r4, #20]
    9f00:	689b      	ldr	r3, [r3, #8]
    9f02:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    9f04:	f898 2000 	ldrb.w	r2, [r8]
    9f08:	b2eb      	uxtb	r3, r5
    9f0a:	429a      	cmp	r2, r3
    9f0c:	d8ef      	bhi.n	9eee <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    9f0e:	7833      	ldrb	r3, [r6, #0]
    9f10:	e7bc      	b.n	9e8c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    9f12:	f7ff fec5 	bl	9ca0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    9f16:	b968      	cbnz	r0, 9f34 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    9f18:	4b0d      	ldr	r3, [pc, #52]	; (9f50 <yield+0xe0>)
    9f1a:	781b      	ldrb	r3, [r3, #0]
    9f1c:	b90b      	cbnz	r3, 9f22 <yield+0xb2>
    9f1e:	7833      	ldrb	r3, [r6, #0]
    9f20:	e7b2      	b.n	9e88 <yield+0x18>
    9f22:	7833      	ldrb	r3, [r6, #0]
    9f24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9f28:	7033      	strb	r3, [r6, #0]
    9f2a:	e7ad      	b.n	9e88 <yield+0x18>
		if (doit) __enable_irq();
    9f2c:	2d00      	cmp	r5, #0
    9f2e:	d1b1      	bne.n	9e94 <yield+0x24>
    9f30:	b662      	cpsie	i
    9f32:	e7af      	b.n	9e94 <yield+0x24>
		if (Serial.available()) serialEvent();
    9f34:	f000 fa8a 	bl	a44c <serialEvent()>
    9f38:	e7ee      	b.n	9f18 <yield+0xa8>
			lastYield = nullptr;
    9f3a:	4b06      	ldr	r3, [pc, #24]	; (9f54 <yield+0xe4>)
    9f3c:	601a      	str	r2, [r3, #0]
    9f3e:	e7c4      	b.n	9eca <yield+0x5a>
    9f40:	2000496a 	.word	0x2000496a
    9f44:	20018892 	.word	0x20018892
    9f48:	20005088 	.word	0x20005088
    9f4c:	20018890 	.word	0x20018890
    9f50:	60001f58 	.word	0x60001f58
    9f54:	20005094 	.word	0x20005094
    9f58:	20018891 	.word	0x20018891
    9f5c:	20005098 	.word	0x20005098

00009f60 <EventResponder::runFromInterrupt()>:
{
    9f60:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9f62:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9f66:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9f68:	4c0c      	ldr	r4, [pc, #48]	; (9f9c <EventResponder::runFromInterrupt()+0x3c>)
    9f6a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9f6c:	b180      	cbz	r0, 9f90 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    9f6e:	4e0c      	ldr	r6, [pc, #48]	; (9fa0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    9f70:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    9f72:	6943      	ldr	r3, [r0, #20]
    9f74:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    9f76:	b173      	cbz	r3, 9f96 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9f78:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    9f7a:	b902      	cbnz	r2, 9f7e <EventResponder::runFromInterrupt()+0x1e>
    9f7c:	b662      	cpsie	i
			(*(first->_function))(*first);
    9f7e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    9f80:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9f82:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9f84:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9f88:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9f8a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9f8c:	2800      	cmp	r0, #0
    9f8e:	d1f0      	bne.n	9f72 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    9f90:	b902      	cbnz	r2, 9f94 <EventResponder::runFromInterrupt()+0x34>
    9f92:	b662      	cpsie	i
}
    9f94:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    9f96:	6033      	str	r3, [r6, #0]
    9f98:	e7ef      	b.n	9f7a <EventResponder::runFromInterrupt()+0x1a>
    9f9a:	bf00      	nop
    9f9c:	20005090 	.word	0x20005090
    9fa0:	2000508c 	.word	0x2000508c

00009fa4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    9fa4:	f7ff bfdc 	b.w	9f60 <EventResponder::runFromInterrupt()>

00009fa8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9fa8:	4904      	ldr	r1, [pc, #16]	; (9fbc <systick_isr+0x14>)
	systick_millis_count++;
    9faa:	4a05      	ldr	r2, [pc, #20]	; (9fc0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    9fac:	6849      	ldr	r1, [r1, #4]
    9fae:	4b05      	ldr	r3, [pc, #20]	; (9fc4 <systick_isr+0x1c>)
    9fb0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    9fb2:	6813      	ldr	r3, [r2, #0]
    9fb4:	3301      	adds	r3, #1
    9fb6:	6013      	str	r3, [r2, #0]
}
    9fb8:	4770      	bx	lr
    9fba:	bf00      	nop
    9fbc:	e0001000 	.word	0xe0001000
    9fc0:	20018868 	.word	0x20018868
    9fc4:	20018864 	.word	0x20018864

00009fc8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    9fc8:	49a2      	ldr	r1, [pc, #648]	; (a254 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9fca:	4ba3      	ldr	r3, [pc, #652]	; (a258 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    9fcc:	4288      	cmp	r0, r1
{
    9fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    9fd2:	4ca2      	ldr	r4, [pc, #648]	; (a25c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9fd4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    9fd6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    9fd8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    9fdc:	d91b      	bls.n	a016 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    9fde:	4ba0      	ldr	r3, [pc, #640]	; (a260 <set_arm_clock+0x298>)
    9fe0:	4298      	cmp	r0, r3
    9fe2:	f240 8102 	bls.w	a1ea <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    9fe6:	1ac3      	subs	r3, r0, r3
    9fe8:	499e      	ldr	r1, [pc, #632]	; (a264 <set_arm_clock+0x29c>)
    9fea:	0a1b      	lsrs	r3, r3, #8
    9fec:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9ff0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    9ff4:	09db      	lsrs	r3, r3, #7
    9ff6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9ffa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9ffe:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a002:	428b      	cmp	r3, r1
    a004:	bf28      	it	cs
    a006:	460b      	movcs	r3, r1
    a008:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a00c:	4b96      	ldr	r3, [pc, #600]	; (a268 <set_arm_clock+0x2a0>)
    a00e:	fba3 3707 	umull	r3, r7, r3, r7
    a012:	08ff      	lsrs	r7, r7, #3
    a014:	e004      	b.n	a020 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a016:	4f95      	ldr	r7, [pc, #596]	; (a26c <set_arm_clock+0x2a4>)
    a018:	42b8      	cmp	r0, r7
    a01a:	bf8c      	ite	hi
    a01c:	270e      	movhi	r7, #14
    a01e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a020:	498d      	ldr	r1, [pc, #564]	; (a258 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a022:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a026:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a02a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a02c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a030:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a034:	d20c      	bcs.n	a050 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a036:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a03a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a03e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a042:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a046:	680b      	ldr	r3, [r1, #0]
    a048:	2b00      	cmp	r3, #0
    a04a:	dafc      	bge.n	a046 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a04c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a050:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a054:	d124      	bne.n	a0a0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a056:	4986      	ldr	r1, [pc, #536]	; (a270 <set_arm_clock+0x2a8>)
    a058:	690c      	ldr	r4, [r1, #16]
    a05a:	4986      	ldr	r1, [pc, #536]	; (a274 <set_arm_clock+0x2ac>)
    a05c:	43a1      	bics	r1, r4
    a05e:	f000 80ea 	beq.w	a236 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a062:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a066:	4634      	mov	r4, r6
    a068:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a06c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a070:	d004      	beq.n	a07c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a072:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a076:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a078:	4b77      	ldr	r3, [pc, #476]	; (a258 <set_arm_clock+0x290>)
    a07a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a07c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a080:	d007      	beq.n	a092 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a082:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a086:	4974      	ldr	r1, [pc, #464]	; (a258 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a088:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a08a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a08c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a08e:	071a      	lsls	r2, r3, #28
    a090:	d4fc      	bmi.n	a08c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a092:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a096:	4a70      	ldr	r2, [pc, #448]	; (a258 <set_arm_clock+0x290>)
    a098:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a09a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a09c:	069b      	lsls	r3, r3, #26
    a09e:	d4fc      	bmi.n	a09a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a0a0:	4c75      	ldr	r4, [pc, #468]	; (a278 <set_arm_clock+0x2b0>)
    a0a2:	42a0      	cmp	r0, r4
    a0a4:	f200 80ce 	bhi.w	a244 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a0a8:	f04f 0c01 	mov.w	ip, #1
    a0ac:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a0ae:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a0b0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a0b4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a0b8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a0bc:	42a2      	cmp	r2, r4
    a0be:	d818      	bhi.n	a0f2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a0c0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a0c4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a0c8:	f040 808d 	bne.w	a1e6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a0cc:	f1bc 0f04 	cmp.w	ip, #4
    a0d0:	f200 8091 	bhi.w	a1f6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a0d4:	180a      	adds	r2, r1, r0
    a0d6:	42a2      	cmp	r2, r4
    a0d8:	f200 80a4 	bhi.w	a224 <set_arm_clock+0x25c>
    a0dc:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a0e0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a0e2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a0e6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a0ea:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a0ee:	42a2      	cmp	r2, r4
    a0f0:	d9e6      	bls.n	a0c0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a0f2:	f10c 31ff 	add.w	r1, ip, #4294967295
    a0f6:	028c      	lsls	r4, r1, #10
    a0f8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a0fc:	485f      	ldr	r0, [pc, #380]	; (a27c <set_arm_clock+0x2b4>)
    a0fe:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a100:	4a5f      	ldr	r2, [pc, #380]	; (a280 <set_arm_clock+0x2b8>)
    a102:	4290      	cmp	r0, r2
    a104:	d97f      	bls.n	a206 <set_arm_clock+0x23e>
    a106:	f8df a1a4 	ldr.w	sl, [pc, #420]	; a2ac <set_arm_clock+0x2e4>
    a10a:	226c      	movs	r2, #108	; 0x6c
    a10c:	485d      	ldr	r0, [pc, #372]	; (a284 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a10e:	4d58      	ldr	r5, [pc, #352]	; (a270 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a110:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a114:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a118:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a11c:	f8df c190 	ldr.w	ip, [pc, #400]	; a2b0 <set_arm_clock+0x2e8>
    a120:	ea0e 0c0c 	and.w	ip, lr, ip
    a124:	45d4      	cmp	ip, sl
    a126:	d009      	beq.n	a13c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a12c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a130:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a134:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a136:	682a      	ldr	r2, [r5, #0]
    a138:	2a00      	cmp	r2, #0
    a13a:	dafc      	bge.n	a136 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a13c:	4a46      	ldr	r2, [pc, #280]	; (a258 <set_arm_clock+0x290>)
    a13e:	6915      	ldr	r5, [r2, #16]
    a140:	f005 0507 	and.w	r5, r5, #7
    a144:	429d      	cmp	r5, r3
    a146:	d003      	beq.n	a150 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a148:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a14a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a14c:	03dd      	lsls	r5, r3, #15
    a14e:	d4fc      	bmi.n	a14a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a150:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a154:	d009      	beq.n	a16a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a156:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a15a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a15e:	4a3e      	ldr	r2, [pc, #248]	; (a258 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a160:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a162:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a164:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a166:	0799      	lsls	r1, r3, #30
    a168:	d4fc      	bmi.n	a164 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a16a:	4947      	ldr	r1, [pc, #284]	; (a288 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a16c:	4a47      	ldr	r2, [pc, #284]	; (a28c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a16e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a170:	4291      	cmp	r1, r2
    a172:	d83c      	bhi.n	a1ee <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a174:	4b46      	ldr	r3, [pc, #280]	; (a290 <set_arm_clock+0x2c8>)
    a176:	09c9      	lsrs	r1, r1, #7
    a178:	fba3 3101 	umull	r3, r1, r3, r1
    a17c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a17e:	1e4b      	subs	r3, r1, #1
    a180:	021b      	lsls	r3, r3, #8
    a182:	ea86 0203 	eor.w	r2, r6, r3
    a186:	f412 7f40 	tst.w	r2, #768	; 0x300
    a18a:	d006      	beq.n	a19a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a18c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a190:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a194:	4a30      	ldr	r2, [pc, #192]	; (a258 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a196:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a198:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a19a:	4a2f      	ldr	r2, [pc, #188]	; (a258 <set_arm_clock+0x290>)
    a19c:	6953      	ldr	r3, [r2, #20]
    a19e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    a1a2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a1a4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a1a6:	069b      	lsls	r3, r3, #26
    a1a8:	d4fc      	bmi.n	a1a4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a1aa:	4b3a      	ldr	r3, [pc, #232]	; (a294 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a1ac:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a1ae:	fba3 2300 	umull	r2, r3, r3, r0
    a1b2:	f04f 32ff 	mov.w	r2, #4294967295
    a1b6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a1ba:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a1be:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a1c2:	4a35      	ldr	r2, [pc, #212]	; (a298 <set_arm_clock+0x2d0>)
    a1c4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a1c6:	4a35      	ldr	r2, [pc, #212]	; (a29c <set_arm_clock+0x2d4>)
    a1c8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a1ca:	4a35      	ldr	r2, [pc, #212]	; (a2a0 <set_arm_clock+0x2d8>)
    a1cc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a1ce:	d208      	bcs.n	a1e2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a1d0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a1d4:	4a21      	ldr	r2, [pc, #132]	; (a25c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a1d6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a1da:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a1dc:	6813      	ldr	r3, [r2, #0]
    a1de:	2b00      	cmp	r3, #0
    a1e0:	dafc      	bge.n	a1dc <set_arm_clock+0x214>
	}

	return frequency;
}
    a1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a1e6:	4673      	mov	r3, lr
    a1e8:	e762      	b.n	a0b0 <set_arm_clock+0xe8>
    a1ea:	2712      	movs	r7, #18
    a1ec:	e718      	b.n	a020 <set_arm_clock+0x58>
    a1ee:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a1f2:	2104      	movs	r1, #4
    a1f4:	e7c5      	b.n	a182 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a1f6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a1fa:	4820      	ldr	r0, [pc, #128]	; (a27c <set_arm_clock+0x2b4>)
    a1fc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a1fe:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a200:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a202:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a206:	4a27      	ldr	r2, [pc, #156]	; (a2a4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a208:	f8df a0a8 	ldr.w	sl, [pc, #168]	; a2b4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a20c:	fba2 2000 	umull	r2, r0, r2, r0
    a210:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a212:	4825      	ldr	r0, [pc, #148]	; (a2a8 <set_arm_clock+0x2e0>)
    a214:	2a36      	cmp	r2, #54	; 0x36
    a216:	bf38      	it	cc
    a218:	2236      	movcc	r2, #54	; 0x36
    a21a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a21e:	ea42 0a0a 	orr.w	sl, r2, sl
    a222:	e774      	b.n	a10e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a224:	ea4f 248c 	mov.w	r4, ip, lsl #10
    a228:	2300      	movs	r3, #0
    a22a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a22e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a232:	46ac      	mov	ip, r5
    a234:	e762      	b.n	a0fc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a236:	461d      	mov	r5, r3
    a238:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    a23c:	4611      	mov	r1, r2
    a23e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    a242:	e713      	b.n	a06c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a244:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    a246:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a24a:	4602      	mov	r2, r0
    a24c:	4631      	mov	r1, r6
    a24e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    a250:	46e6      	mov	lr, ip
    a252:	e753      	b.n	a0fc <set_arm_clock+0x134>
    a254:	1f78a400 	.word	0x1f78a400
    a258:	400fc000 	.word	0x400fc000
    a25c:	40080000 	.word	0x40080000
    a260:	23c34600 	.word	0x23c34600
    a264:	004cb223 	.word	0x004cb223
    a268:	51eb851f 	.word	0x51eb851f
    a26c:	016e3600 	.word	0x016e3600
    a270:	400d8000 	.word	0x400d8000
    a274:	80003040 	.word	0x80003040
    a278:	269fb1ff 	.word	0x269fb1ff
    a27c:	005b8d80 	.word	0x005b8d80
    a280:	4df67eff 	.word	0x4df67eff
    a284:	4d3f6400 	.word	0x4d3f6400
    a288:	08f0d17f 	.word	0x08f0d17f
    a28c:	2cb4177f 	.word	0x2cb4177f
    a290:	00e5109f 	.word	0x00e5109f
    a294:	431bde83 	.word	0x431bde83
    a298:	20004354 	.word	0x20004354
    a29c:	20004350 	.word	0x20004350
    a2a0:	20018860 	.word	0x20018860
    a2a4:	165e9f81 	.word	0x165e9f81
    a2a8:	00b71b00 	.word	0x00b71b00
    a2ac:	8000206c 	.word	0x8000206c
    a2b0:	8001307f 	.word	0x8001307f
    a2b4:	80002000 	.word	0x80002000

0000a2b8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a2b8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a2ba:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a2bc:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a2c0:	4619      	mov	r1, r3
{
    a2c2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a2c4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a2c8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a2cc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a2d0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a2d4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a2d8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a2da:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a2de:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a2e2:	b29b      	uxth	r3, r3
    a2e4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a2e8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a2ec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a2f0:	3101      	adds	r1, #1
    a2f2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a2f6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a2f8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a2fa:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a2fe:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a300:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a302:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a304:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a306:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a30a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a30c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a30e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a310:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a312:	d1eb      	bne.n	a2ec <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a314:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a318:	b29b      	uxth	r3, r3
    a31a:	f043 030f 	orr.w	r3, r3, #15
    a31e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a322:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a326:	b29b      	uxth	r3, r3
    a328:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a32c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a330:	bd10      	pop	{r4, pc}
    a332:	bf00      	nop

0000a334 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a334:	4b37      	ldr	r3, [pc, #220]	; (a414 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a336:	4a38      	ldr	r2, [pc, #224]	; (a418 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a338:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a33a:	4838      	ldr	r0, [pc, #224]	; (a41c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a33c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a340:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a342:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a344:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a348:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a34c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a350:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a354:	430a      	orrs	r2, r1
    a356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a35a:	f7ff ffad 	bl	a2b8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a35e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a362:	f7ff ffa9 	bl	a2b8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a366:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a36a:	f7ff ffa5 	bl	a2b8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a36e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a372:	f7ff ffa1 	bl	a2b8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a376:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a378:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a37c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a380:	4611      	mov	r1, r2
    a382:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a386:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a38a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a38c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a38e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a390:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a392:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a396:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a398:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a39a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a39e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3a0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a3a2:	d1ee      	bne.n	a382 <pwm_init+0x4e>
    a3a4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a3a6:	481e      	ldr	r0, [pc, #120]	; (a420 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3a8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3ac:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a3b0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3b2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3b6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a3ba:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a3be:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a3c2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a3c4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a3c6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a3c8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3ca:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3ce:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3d0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a3d2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a3d6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3d8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a3da:	d1ee      	bne.n	a3ba <pwm_init+0x86>
    a3dc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a3de:	4811      	ldr	r0, [pc, #68]	; (a424 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a3e0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a3e2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a3e6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a3e8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a3ec:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a3f0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a3f4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a3f8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a3fa:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a3fc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a3fe:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a400:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a402:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a404:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a406:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a40a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a40c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a410:	d1ee      	bne.n	a3f0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a412:	bd70      	pop	{r4, r5, r6, pc}
    a414:	400fc000 	.word	0x400fc000
    a418:	fc030000 	.word	0xfc030000
    a41c:	403dc000 	.word	0x403dc000
    a420:	401e0000 	.word	0x401e0000
    a424:	401e4000 	.word	0x401e4000

0000a428 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    a428:	4a07      	ldr	r2, [pc, #28]	; (a448 <rtc_get+0x20>)
    a42a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    a42c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    a42e:	4619      	mov	r1, r3
    a430:	4684      	mov	ip, r0
    a432:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    a434:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    a436:	4299      	cmp	r1, r3
    a438:	d1f9      	bne.n	a42e <rtc_get+0x6>
    a43a:	4584      	cmp	ip, r0
    a43c:	d1f7      	bne.n	a42e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    a43e:	0bdb      	lsrs	r3, r3, #15
}
    a440:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    a444:	4770      	bx	lr
    a446:	bf00      	nop
    a448:	400d4000 	.word	0x400d4000

0000a44c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a44c:	4770      	bx	lr
    a44e:	bf00      	nop

0000a450 <sm_align_pool>:
{
    a450:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    a452:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    a456:	b15b      	cbz	r3, a470 <sm_align_pool+0x20>
    a458:	b1ba      	cbz	r2, a48a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    a45a:	4b0f      	ldr	r3, [pc, #60]	; (a498 <sm_align_pool+0x48>)
    a45c:	fba3 1302 	umull	r1, r3, r3, r2
    a460:	08db      	lsrs	r3, r3, #3
    a462:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a466:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a46a:	d10a      	bne.n	a482 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    a46c:	2001      	movs	r0, #1
}
    a46e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    a470:	4b09      	ldr	r3, [pc, #36]	; (a498 <sm_align_pool+0x48>)
    a472:	fba3 1302 	umull	r1, r3, r3, r2
    a476:	08db      	lsrs	r3, r3, #3
    a478:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    a47c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a480:	d001      	beq.n	a486 <sm_align_pool+0x36>
    a482:	1ad2      	subs	r2, r2, r3
    a484:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    a486:	2af0      	cmp	r2, #240	; 0xf0
    a488:	d8f0      	bhi.n	a46c <sm_align_pool+0x1c>
		errno = ENOSPC;
    a48a:	f001 f9b1 	bl	b7f0 <__errno>
    a48e:	221c      	movs	r2, #28
    a490:	4603      	mov	r3, r0
    a492:	2000      	movs	r0, #0
    a494:	601a      	str	r2, [r3, #0]
}
    a496:	bd08      	pop	{r3, pc}
    a498:	aaaaaaab 	.word	0xaaaaaaab

0000a49c <sm_set_pool>:
{
    a49c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    a49e:	4604      	mov	r4, r0
    a4a0:	b338      	cbz	r0, a4f2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    a4a2:	b119      	cbz	r1, a4ac <sm_set_pool+0x10>
    a4a4:	fab2 f682 	clz	r6, r2
    a4a8:	0976      	lsrs	r6, r6, #5
    a4aa:	b9a2      	cbnz	r2, a4d6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    a4ac:	6820      	ldr	r0, [r4, #0]
    a4ae:	b300      	cbz	r0, a4f2 <sm_set_pool+0x56>
    a4b0:	6862      	ldr	r2, [r4, #4]
    a4b2:	b1f2      	cbz	r2, a4f2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    a4b4:	4b18      	ldr	r3, [pc, #96]	; (a518 <sm_set_pool+0x7c>)
    a4b6:	4919      	ldr	r1, [pc, #100]	; (a51c <sm_set_pool+0x80>)
    a4b8:	fb02 f303 	mul.w	r3, r2, r3
    a4bc:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    a4c0:	d317      	bcc.n	a4f2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a4c2:	68a3      	ldr	r3, [r4, #8]
    a4c4:	b9e3      	cbnz	r3, a500 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    a4c6:	2200      	movs	r2, #0
			return 1;
    a4c8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    a4ca:	6022      	str	r2, [r4, #0]
    a4cc:	6062      	str	r2, [r4, #4]
    a4ce:	60a2      	str	r2, [r4, #8]
    a4d0:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    a4d2:	4618      	mov	r0, r3
    a4d4:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    a4d6:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    a4d8:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    a4da:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    a4de:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    a4e0:	f7ff ffb6 	bl	a450 <sm_align_pool>
    a4e4:	4603      	mov	r3, r0
    a4e6:	2800      	cmp	r0, #0
    a4e8:	d0f3      	beq.n	a4d2 <sm_set_pool+0x36>
	if (do_zero) {
    a4ea:	b96d      	cbnz	r5, a508 <sm_set_pool+0x6c>
	return 1;
    a4ec:	2301      	movs	r3, #1
}
    a4ee:	4618      	mov	r0, r3
    a4f0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    a4f2:	f001 f97d 	bl	b7f0 <__errno>
    a4f6:	2216      	movs	r2, #22
		return 0;
    a4f8:	2300      	movs	r3, #0
		errno = EINVAL;
    a4fa:	6002      	str	r2, [r0, #0]
}
    a4fc:	4618      	mov	r0, r3
    a4fe:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a500:	2100      	movs	r1, #0
    a502:	f001 f81f 	bl	b544 <memset>
    a506:	e7de      	b.n	a4c6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    a508:	6862      	ldr	r2, [r4, #4]
    a50a:	4631      	mov	r1, r6
    a50c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    a50e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    a510:	f001 f818 	bl	b544 <memset>
	return 1;
    a514:	2301      	movs	r3, #1
    a516:	e7dc      	b.n	a4d2 <sm_set_pool+0x36>
    a518:	aaaaaaab 	.word	0xaaaaaaab
    a51c:	15555555 	.word	0x15555555

0000a520 <__aeabi_atexit>:
    a520:	4603      	mov	r3, r0
    a522:	4608      	mov	r0, r1
    a524:	4619      	mov	r1, r3
    a526:	f000 be27 	b.w	b178 <__cxa_atexit>
    a52a:	bf00      	nop

0000a52c <atol>:
    a52c:	220a      	movs	r2, #10
    a52e:	2100      	movs	r1, #0
    a530:	f000 bd66 	b.w	b000 <strtol>

0000a534 <malloc>:
    a534:	4b02      	ldr	r3, [pc, #8]	; (a540 <malloc+0xc>)
    a536:	4601      	mov	r1, r0
    a538:	6818      	ldr	r0, [r3, #0]
    a53a:	f000 b80b 	b.w	a554 <_malloc_r>
    a53e:	bf00      	nop
    a540:	200048fc 	.word	0x200048fc

0000a544 <free>:
    a544:	4b02      	ldr	r3, [pc, #8]	; (a550 <free+0xc>)
    a546:	4601      	mov	r1, r0
    a548:	6818      	ldr	r0, [r3, #0]
    a54a:	f001 bc5b 	b.w	be04 <_free_r>
    a54e:	bf00      	nop
    a550:	200048fc 	.word	0x200048fc

0000a554 <_malloc_r>:
    a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a558:	f101 060b 	add.w	r6, r1, #11
    a55c:	2e16      	cmp	r6, #22
    a55e:	b083      	sub	sp, #12
    a560:	4604      	mov	r4, r0
    a562:	d824      	bhi.n	a5ae <_malloc_r+0x5a>
    a564:	2910      	cmp	r1, #16
    a566:	f200 80ba 	bhi.w	a6de <_malloc_r+0x18a>
    a56a:	f000 faa3 	bl	aab4 <__malloc_lock>
    a56e:	2610      	movs	r6, #16
    a570:	2218      	movs	r2, #24
    a572:	2002      	movs	r0, #2
    a574:	4fb5      	ldr	r7, [pc, #724]	; (a84c <_malloc_r+0x2f8>)
    a576:	443a      	add	r2, r7
    a578:	f1a2 0108 	sub.w	r1, r2, #8
    a57c:	6853      	ldr	r3, [r2, #4]
    a57e:	428b      	cmp	r3, r1
    a580:	f000 80ba 	beq.w	a6f8 <_malloc_r+0x1a4>
    a584:	685a      	ldr	r2, [r3, #4]
    a586:	68d9      	ldr	r1, [r3, #12]
    a588:	f022 0203 	bic.w	r2, r2, #3
    a58c:	441a      	add	r2, r3
    a58e:	689d      	ldr	r5, [r3, #8]
    a590:	60e9      	str	r1, [r5, #12]
    a592:	608d      	str	r5, [r1, #8]
    a594:	6851      	ldr	r1, [r2, #4]
    a596:	f041 0101 	orr.w	r1, r1, #1
    a59a:	4620      	mov	r0, r4
    a59c:	6051      	str	r1, [r2, #4]
    a59e:	f103 0508 	add.w	r5, r3, #8
    a5a2:	f000 fa8d 	bl	aac0 <__malloc_unlock>
    a5a6:	4628      	mov	r0, r5
    a5a8:	b003      	add	sp, #12
    a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5ae:	f036 0607 	bics.w	r6, r6, #7
    a5b2:	f100 8094 	bmi.w	a6de <_malloc_r+0x18a>
    a5b6:	42b1      	cmp	r1, r6
    a5b8:	f200 8091 	bhi.w	a6de <_malloc_r+0x18a>
    a5bc:	f000 fa7a 	bl	aab4 <__malloc_lock>
    a5c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    a5c4:	f0c0 819a 	bcc.w	a8fc <_malloc_r+0x3a8>
    a5c8:	0a73      	lsrs	r3, r6, #9
    a5ca:	f000 808f 	beq.w	a6ec <_malloc_r+0x198>
    a5ce:	2b04      	cmp	r3, #4
    a5d0:	f200 816f 	bhi.w	a8b2 <_malloc_r+0x35e>
    a5d4:	09b3      	lsrs	r3, r6, #6
    a5d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    a5da:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    a5de:	00c3      	lsls	r3, r0, #3
    a5e0:	4f9a      	ldr	r7, [pc, #616]	; (a84c <_malloc_r+0x2f8>)
    a5e2:	443b      	add	r3, r7
    a5e4:	f1a3 0508 	sub.w	r5, r3, #8
    a5e8:	685b      	ldr	r3, [r3, #4]
    a5ea:	429d      	cmp	r5, r3
    a5ec:	d106      	bne.n	a5fc <_malloc_r+0xa8>
    a5ee:	e00c      	b.n	a60a <_malloc_r+0xb6>
    a5f0:	2900      	cmp	r1, #0
    a5f2:	f280 8127 	bge.w	a844 <_malloc_r+0x2f0>
    a5f6:	68db      	ldr	r3, [r3, #12]
    a5f8:	429d      	cmp	r5, r3
    a5fa:	d006      	beq.n	a60a <_malloc_r+0xb6>
    a5fc:	685a      	ldr	r2, [r3, #4]
    a5fe:	f022 0203 	bic.w	r2, r2, #3
    a602:	1b91      	subs	r1, r2, r6
    a604:	290f      	cmp	r1, #15
    a606:	ddf3      	ble.n	a5f0 <_malloc_r+0x9c>
    a608:	4660      	mov	r0, ip
    a60a:	693d      	ldr	r5, [r7, #16]
    a60c:	f8df c250 	ldr.w	ip, [pc, #592]	; a860 <_malloc_r+0x30c>
    a610:	4565      	cmp	r5, ip
    a612:	d07c      	beq.n	a70e <_malloc_r+0x1ba>
    a614:	686a      	ldr	r2, [r5, #4]
    a616:	f022 0203 	bic.w	r2, r2, #3
    a61a:	1b93      	subs	r3, r2, r6
    a61c:	2b0f      	cmp	r3, #15
    a61e:	f300 817b 	bgt.w	a918 <_malloc_r+0x3c4>
    a622:	2b00      	cmp	r3, #0
    a624:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    a628:	f280 816c 	bge.w	a904 <_malloc_r+0x3b0>
    a62c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    a630:	f080 811a 	bcs.w	a868 <_malloc_r+0x314>
    a634:	08d3      	lsrs	r3, r2, #3
    a636:	6879      	ldr	r1, [r7, #4]
    a638:	3301      	adds	r3, #1
    a63a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    a63e:	2201      	movs	r2, #1
    a640:	fa02 f20e 	lsl.w	r2, r2, lr
    a644:	430a      	orrs	r2, r1
    a646:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    a64a:	f8c5 e008 	str.w	lr, [r5, #8]
    a64e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    a652:	3908      	subs	r1, #8
    a654:	60e9      	str	r1, [r5, #12]
    a656:	607a      	str	r2, [r7, #4]
    a658:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    a65c:	f8ce 500c 	str.w	r5, [lr, #12]
    a660:	1083      	asrs	r3, r0, #2
    a662:	2101      	movs	r1, #1
    a664:	4099      	lsls	r1, r3
    a666:	4291      	cmp	r1, r2
    a668:	d857      	bhi.n	a71a <_malloc_r+0x1c6>
    a66a:	4211      	tst	r1, r2
    a66c:	d106      	bne.n	a67c <_malloc_r+0x128>
    a66e:	f020 0003 	bic.w	r0, r0, #3
    a672:	0049      	lsls	r1, r1, #1
    a674:	4211      	tst	r1, r2
    a676:	f100 0004 	add.w	r0, r0, #4
    a67a:	d0fa      	beq.n	a672 <_malloc_r+0x11e>
    a67c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    a680:	464d      	mov	r5, r9
    a682:	4686      	mov	lr, r0
    a684:	f8d5 800c 	ldr.w	r8, [r5, #12]
    a688:	4545      	cmp	r5, r8
    a68a:	d108      	bne.n	a69e <_malloc_r+0x14a>
    a68c:	e11d      	b.n	a8ca <_malloc_r+0x376>
    a68e:	2b00      	cmp	r3, #0
    a690:	f280 8124 	bge.w	a8dc <_malloc_r+0x388>
    a694:	f8d8 800c 	ldr.w	r8, [r8, #12]
    a698:	4545      	cmp	r5, r8
    a69a:	f000 8116 	beq.w	a8ca <_malloc_r+0x376>
    a69e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a6a2:	f022 0203 	bic.w	r2, r2, #3
    a6a6:	1b93      	subs	r3, r2, r6
    a6a8:	2b0f      	cmp	r3, #15
    a6aa:	ddf0      	ble.n	a68e <_malloc_r+0x13a>
    a6ac:	4620      	mov	r0, r4
    a6ae:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    a6b2:	eb08 0106 	add.w	r1, r8, r6
    a6b6:	f046 0601 	orr.w	r6, r6, #1
    a6ba:	f8c8 6004 	str.w	r6, [r8, #4]
    a6be:	60ec      	str	r4, [r5, #12]
    a6c0:	60a5      	str	r5, [r4, #8]
    a6c2:	f043 0401 	orr.w	r4, r3, #1
    a6c6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    a6ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    a6ce:	604c      	str	r4, [r1, #4]
    a6d0:	f848 3002 	str.w	r3, [r8, r2]
    a6d4:	f000 f9f4 	bl	aac0 <__malloc_unlock>
    a6d8:	f108 0508 	add.w	r5, r8, #8
    a6dc:	e002      	b.n	a6e4 <_malloc_r+0x190>
    a6de:	230c      	movs	r3, #12
    a6e0:	6023      	str	r3, [r4, #0]
    a6e2:	2500      	movs	r5, #0
    a6e4:	4628      	mov	r0, r5
    a6e6:	b003      	add	sp, #12
    a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6ec:	f44f 7300 	mov.w	r3, #512	; 0x200
    a6f0:	2040      	movs	r0, #64	; 0x40
    a6f2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    a6f6:	e773      	b.n	a5e0 <_malloc_r+0x8c>
    a6f8:	68d3      	ldr	r3, [r2, #12]
    a6fa:	429a      	cmp	r2, r3
    a6fc:	bf08      	it	eq
    a6fe:	3002      	addeq	r0, #2
    a700:	f47f af40 	bne.w	a584 <_malloc_r+0x30>
    a704:	693d      	ldr	r5, [r7, #16]
    a706:	f8df c158 	ldr.w	ip, [pc, #344]	; a860 <_malloc_r+0x30c>
    a70a:	4565      	cmp	r5, ip
    a70c:	d182      	bne.n	a614 <_malloc_r+0xc0>
    a70e:	687a      	ldr	r2, [r7, #4]
    a710:	1083      	asrs	r3, r0, #2
    a712:	2101      	movs	r1, #1
    a714:	4099      	lsls	r1, r3
    a716:	4291      	cmp	r1, r2
    a718:	d9a7      	bls.n	a66a <_malloc_r+0x116>
    a71a:	68bd      	ldr	r5, [r7, #8]
    a71c:	686b      	ldr	r3, [r5, #4]
    a71e:	f023 0903 	bic.w	r9, r3, #3
    a722:	454e      	cmp	r6, r9
    a724:	d803      	bhi.n	a72e <_malloc_r+0x1da>
    a726:	eba9 0306 	sub.w	r3, r9, r6
    a72a:	2b0f      	cmp	r3, #15
    a72c:	dc7a      	bgt.n	a824 <_malloc_r+0x2d0>
    a72e:	f8df b134 	ldr.w	fp, [pc, #308]	; a864 <_malloc_r+0x310>
    a732:	4b47      	ldr	r3, [pc, #284]	; (a850 <_malloc_r+0x2fc>)
    a734:	f8db 2000 	ldr.w	r2, [fp]
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	3201      	adds	r2, #1
    a73c:	4433      	add	r3, r6
    a73e:	eb05 0a09 	add.w	sl, r5, r9
    a742:	f000 8133 	beq.w	a9ac <_malloc_r+0x458>
    a746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    a74a:	330f      	adds	r3, #15
    a74c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    a750:	f028 080f 	bic.w	r8, r8, #15
    a754:	4641      	mov	r1, r8
    a756:	4620      	mov	r0, r4
    a758:	f001 f822 	bl	b7a0 <_sbrk_r>
    a75c:	1c41      	adds	r1, r0, #1
    a75e:	4602      	mov	r2, r0
    a760:	f000 80f3 	beq.w	a94a <_malloc_r+0x3f6>
    a764:	4582      	cmp	sl, r0
    a766:	f200 80ee 	bhi.w	a946 <_malloc_r+0x3f2>
    a76a:	4b3a      	ldr	r3, [pc, #232]	; (a854 <_malloc_r+0x300>)
    a76c:	6819      	ldr	r1, [r3, #0]
    a76e:	4441      	add	r1, r8
    a770:	6019      	str	r1, [r3, #0]
    a772:	4608      	mov	r0, r1
    a774:	f000 814e 	beq.w	aa14 <_malloc_r+0x4c0>
    a778:	f8db 1000 	ldr.w	r1, [fp]
    a77c:	9301      	str	r3, [sp, #4]
    a77e:	3101      	adds	r1, #1
    a780:	bf1b      	ittet	ne
    a782:	eba2 010a 	subne.w	r1, r2, sl
    a786:	1809      	addne	r1, r1, r0
    a788:	f8cb 2000 	streq.w	r2, [fp]
    a78c:	6019      	strne	r1, [r3, #0]
    a78e:	f012 0b07 	ands.w	fp, r2, #7
    a792:	f000 8117 	beq.w	a9c4 <_malloc_r+0x470>
    a796:	f1cb 0108 	rsb	r1, fp, #8
    a79a:	440a      	add	r2, r1
    a79c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    a7a0:	4490      	add	r8, r2
    a7a2:	3108      	adds	r1, #8
    a7a4:	eba1 0108 	sub.w	r1, r1, r8
    a7a8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    a7ac:	4651      	mov	r1, sl
    a7ae:	4620      	mov	r0, r4
    a7b0:	9200      	str	r2, [sp, #0]
    a7b2:	f000 fff5 	bl	b7a0 <_sbrk_r>
    a7b6:	1c42      	adds	r2, r0, #1
    a7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
    a7bc:	f000 814f 	beq.w	aa5e <_malloc_r+0x50a>
    a7c0:	1a80      	subs	r0, r0, r2
    a7c2:	eb00 080a 	add.w	r8, r0, sl
    a7c6:	6819      	ldr	r1, [r3, #0]
    a7c8:	60ba      	str	r2, [r7, #8]
    a7ca:	f048 0001 	orr.w	r0, r8, #1
    a7ce:	4451      	add	r1, sl
    a7d0:	42bd      	cmp	r5, r7
    a7d2:	6050      	str	r0, [r2, #4]
    a7d4:	6019      	str	r1, [r3, #0]
    a7d6:	f000 8129 	beq.w	aa2c <_malloc_r+0x4d8>
    a7da:	f1b9 0f0f 	cmp.w	r9, #15
    a7de:	f240 8127 	bls.w	aa30 <_malloc_r+0x4dc>
    a7e2:	6868      	ldr	r0, [r5, #4]
    a7e4:	f1a9 0c0c 	sub.w	ip, r9, #12
    a7e8:	f02c 0c07 	bic.w	ip, ip, #7
    a7ec:	f000 0001 	and.w	r0, r0, #1
    a7f0:	ea40 000c 	orr.w	r0, r0, ip
    a7f4:	6068      	str	r0, [r5, #4]
    a7f6:	f04f 0e05 	mov.w	lr, #5
    a7fa:	eb05 000c 	add.w	r0, r5, ip
    a7fe:	f1bc 0f0f 	cmp.w	ip, #15
    a802:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    a806:	f200 8132 	bhi.w	aa6e <_malloc_r+0x51a>
    a80a:	6850      	ldr	r0, [r2, #4]
    a80c:	4615      	mov	r5, r2
    a80e:	4b12      	ldr	r3, [pc, #72]	; (a858 <_malloc_r+0x304>)
    a810:	681a      	ldr	r2, [r3, #0]
    a812:	428a      	cmp	r2, r1
    a814:	bf38      	it	cc
    a816:	6019      	strcc	r1, [r3, #0]
    a818:	4b10      	ldr	r3, [pc, #64]	; (a85c <_malloc_r+0x308>)
    a81a:	681a      	ldr	r2, [r3, #0]
    a81c:	428a      	cmp	r2, r1
    a81e:	bf38      	it	cc
    a820:	6019      	strcc	r1, [r3, #0]
    a822:	e094      	b.n	a94e <_malloc_r+0x3fa>
    a824:	19aa      	adds	r2, r5, r6
    a826:	f043 0301 	orr.w	r3, r3, #1
    a82a:	f046 0601 	orr.w	r6, r6, #1
    a82e:	606e      	str	r6, [r5, #4]
    a830:	4620      	mov	r0, r4
    a832:	60ba      	str	r2, [r7, #8]
    a834:	6053      	str	r3, [r2, #4]
    a836:	f000 f943 	bl	aac0 <__malloc_unlock>
    a83a:	3508      	adds	r5, #8
    a83c:	4628      	mov	r0, r5
    a83e:	b003      	add	sp, #12
    a840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a844:	68d9      	ldr	r1, [r3, #12]
    a846:	441a      	add	r2, r3
    a848:	e6a1      	b.n	a58e <_malloc_r+0x3a>
    a84a:	bf00      	nop
    a84c:	200044e0 	.word	0x200044e0
    a850:	20005288 	.word	0x20005288
    a854:	20005258 	.word	0x20005258
    a858:	20005280 	.word	0x20005280
    a85c:	20005284 	.word	0x20005284
    a860:	200044e8 	.word	0x200044e8
    a864:	200048e8 	.word	0x200048e8
    a868:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    a86c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    a870:	d363      	bcc.n	a93a <_malloc_r+0x3e6>
    a872:	2b14      	cmp	r3, #20
    a874:	f200 80b7 	bhi.w	a9e6 <_malloc_r+0x492>
    a878:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    a87c:	00c9      	lsls	r1, r1, #3
    a87e:	335b      	adds	r3, #91	; 0x5b
    a880:	eb07 0e01 	add.w	lr, r7, r1
    a884:	5879      	ldr	r1, [r7, r1]
    a886:	f1ae 0e08 	sub.w	lr, lr, #8
    a88a:	458e      	cmp	lr, r1
    a88c:	f000 8091 	beq.w	a9b2 <_malloc_r+0x45e>
    a890:	684b      	ldr	r3, [r1, #4]
    a892:	f023 0303 	bic.w	r3, r3, #3
    a896:	4293      	cmp	r3, r2
    a898:	d902      	bls.n	a8a0 <_malloc_r+0x34c>
    a89a:	6889      	ldr	r1, [r1, #8]
    a89c:	458e      	cmp	lr, r1
    a89e:	d1f7      	bne.n	a890 <_malloc_r+0x33c>
    a8a0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    a8a4:	687a      	ldr	r2, [r7, #4]
    a8a6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    a8aa:	f8ce 5008 	str.w	r5, [lr, #8]
    a8ae:	60cd      	str	r5, [r1, #12]
    a8b0:	e6d6      	b.n	a660 <_malloc_r+0x10c>
    a8b2:	2b14      	cmp	r3, #20
    a8b4:	d959      	bls.n	a96a <_malloc_r+0x416>
    a8b6:	2b54      	cmp	r3, #84	; 0x54
    a8b8:	f200 809d 	bhi.w	a9f6 <_malloc_r+0x4a2>
    a8bc:	0b33      	lsrs	r3, r6, #12
    a8be:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    a8c2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    a8c6:	00c3      	lsls	r3, r0, #3
    a8c8:	e68a      	b.n	a5e0 <_malloc_r+0x8c>
    a8ca:	f10e 0e01 	add.w	lr, lr, #1
    a8ce:	f01e 0f03 	tst.w	lr, #3
    a8d2:	f105 0508 	add.w	r5, r5, #8
    a8d6:	f47f aed5 	bne.w	a684 <_malloc_r+0x130>
    a8da:	e051      	b.n	a980 <_malloc_r+0x42c>
    a8dc:	4442      	add	r2, r8
    a8de:	4645      	mov	r5, r8
    a8e0:	6853      	ldr	r3, [r2, #4]
    a8e2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    a8e6:	f043 0301 	orr.w	r3, r3, #1
    a8ea:	6053      	str	r3, [r2, #4]
    a8ec:	f855 3f08 	ldr.w	r3, [r5, #8]!
    a8f0:	4620      	mov	r0, r4
    a8f2:	60d9      	str	r1, [r3, #12]
    a8f4:	608b      	str	r3, [r1, #8]
    a8f6:	f000 f8e3 	bl	aac0 <__malloc_unlock>
    a8fa:	e6f3      	b.n	a6e4 <_malloc_r+0x190>
    a8fc:	08f0      	lsrs	r0, r6, #3
    a8fe:	f106 0208 	add.w	r2, r6, #8
    a902:	e637      	b.n	a574 <_malloc_r+0x20>
    a904:	442a      	add	r2, r5
    a906:	4620      	mov	r0, r4
    a908:	6853      	ldr	r3, [r2, #4]
    a90a:	f043 0301 	orr.w	r3, r3, #1
    a90e:	6053      	str	r3, [r2, #4]
    a910:	3508      	adds	r5, #8
    a912:	f000 f8d5 	bl	aac0 <__malloc_unlock>
    a916:	e6e5      	b.n	a6e4 <_malloc_r+0x190>
    a918:	19a9      	adds	r1, r5, r6
    a91a:	4620      	mov	r0, r4
    a91c:	f046 0601 	orr.w	r6, r6, #1
    a920:	f043 0401 	orr.w	r4, r3, #1
    a924:	606e      	str	r6, [r5, #4]
    a926:	e9c7 1104 	strd	r1, r1, [r7, #16]
    a92a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    a92e:	604c      	str	r4, [r1, #4]
    a930:	50ab      	str	r3, [r5, r2]
    a932:	f000 f8c5 	bl	aac0 <__malloc_unlock>
    a936:	3508      	adds	r5, #8
    a938:	e6d4      	b.n	a6e4 <_malloc_r+0x190>
    a93a:	0993      	lsrs	r3, r2, #6
    a93c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    a940:	00c9      	lsls	r1, r1, #3
    a942:	3338      	adds	r3, #56	; 0x38
    a944:	e79c      	b.n	a880 <_malloc_r+0x32c>
    a946:	42bd      	cmp	r5, r7
    a948:	d05f      	beq.n	aa0a <_malloc_r+0x4b6>
    a94a:	68bd      	ldr	r5, [r7, #8]
    a94c:	6868      	ldr	r0, [r5, #4]
    a94e:	f020 0803 	bic.w	r8, r0, #3
    a952:	4546      	cmp	r6, r8
    a954:	eba8 0306 	sub.w	r3, r8, r6
    a958:	d802      	bhi.n	a960 <_malloc_r+0x40c>
    a95a:	2b0f      	cmp	r3, #15
    a95c:	f73f af62 	bgt.w	a824 <_malloc_r+0x2d0>
    a960:	4620      	mov	r0, r4
    a962:	f000 f8ad 	bl	aac0 <__malloc_unlock>
    a966:	2500      	movs	r5, #0
    a968:	e6bc      	b.n	a6e4 <_malloc_r+0x190>
    a96a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    a96e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    a972:	00c3      	lsls	r3, r0, #3
    a974:	e634      	b.n	a5e0 <_malloc_r+0x8c>
    a976:	f859 3908 	ldr.w	r3, [r9], #-8
    a97a:	454b      	cmp	r3, r9
    a97c:	f040 8096 	bne.w	aaac <_malloc_r+0x558>
    a980:	f010 0f03 	tst.w	r0, #3
    a984:	f100 30ff 	add.w	r0, r0, #4294967295
    a988:	d1f5      	bne.n	a976 <_malloc_r+0x422>
    a98a:	687b      	ldr	r3, [r7, #4]
    a98c:	ea23 0301 	bic.w	r3, r3, r1
    a990:	607b      	str	r3, [r7, #4]
    a992:	0049      	lsls	r1, r1, #1
    a994:	4299      	cmp	r1, r3
    a996:	f63f aec0 	bhi.w	a71a <_malloc_r+0x1c6>
    a99a:	b919      	cbnz	r1, a9a4 <_malloc_r+0x450>
    a99c:	e6bd      	b.n	a71a <_malloc_r+0x1c6>
    a99e:	0049      	lsls	r1, r1, #1
    a9a0:	f10e 0e04 	add.w	lr, lr, #4
    a9a4:	4219      	tst	r1, r3
    a9a6:	d0fa      	beq.n	a99e <_malloc_r+0x44a>
    a9a8:	4670      	mov	r0, lr
    a9aa:	e667      	b.n	a67c <_malloc_r+0x128>
    a9ac:	f103 0810 	add.w	r8, r3, #16
    a9b0:	e6d0      	b.n	a754 <_malloc_r+0x200>
    a9b2:	109a      	asrs	r2, r3, #2
    a9b4:	f04f 0801 	mov.w	r8, #1
    a9b8:	687b      	ldr	r3, [r7, #4]
    a9ba:	fa08 f202 	lsl.w	r2, r8, r2
    a9be:	431a      	orrs	r2, r3
    a9c0:	607a      	str	r2, [r7, #4]
    a9c2:	e770      	b.n	a8a6 <_malloc_r+0x352>
    a9c4:	eb02 0108 	add.w	r1, r2, r8
    a9c8:	4249      	negs	r1, r1
    a9ca:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    a9ce:	4651      	mov	r1, sl
    a9d0:	4620      	mov	r0, r4
    a9d2:	9200      	str	r2, [sp, #0]
    a9d4:	f000 fee4 	bl	b7a0 <_sbrk_r>
    a9d8:	1c43      	adds	r3, r0, #1
    a9da:	e9dd 2300 	ldrd	r2, r3, [sp]
    a9de:	f47f aeef 	bne.w	a7c0 <_malloc_r+0x26c>
    a9e2:	46da      	mov	sl, fp
    a9e4:	e6ef      	b.n	a7c6 <_malloc_r+0x272>
    a9e6:	2b54      	cmp	r3, #84	; 0x54
    a9e8:	d825      	bhi.n	aa36 <_malloc_r+0x4e2>
    a9ea:	0b13      	lsrs	r3, r2, #12
    a9ec:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    a9f0:	00c9      	lsls	r1, r1, #3
    a9f2:	336e      	adds	r3, #110	; 0x6e
    a9f4:	e744      	b.n	a880 <_malloc_r+0x32c>
    a9f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a9fa:	d825      	bhi.n	aa48 <_malloc_r+0x4f4>
    a9fc:	0bf3      	lsrs	r3, r6, #15
    a9fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
    aa02:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    aa06:	00c3      	lsls	r3, r0, #3
    aa08:	e5ea      	b.n	a5e0 <_malloc_r+0x8c>
    aa0a:	4b29      	ldr	r3, [pc, #164]	; (aab0 <_malloc_r+0x55c>)
    aa0c:	6818      	ldr	r0, [r3, #0]
    aa0e:	4440      	add	r0, r8
    aa10:	6018      	str	r0, [r3, #0]
    aa12:	e6b1      	b.n	a778 <_malloc_r+0x224>
    aa14:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    aa18:	f1bc 0f00 	cmp.w	ip, #0
    aa1c:	f47f aeac 	bne.w	a778 <_malloc_r+0x224>
    aa20:	68bd      	ldr	r5, [r7, #8]
    aa22:	44c8      	add	r8, r9
    aa24:	f048 0001 	orr.w	r0, r8, #1
    aa28:	6068      	str	r0, [r5, #4]
    aa2a:	e6f0      	b.n	a80e <_malloc_r+0x2ba>
    aa2c:	4615      	mov	r5, r2
    aa2e:	e6ee      	b.n	a80e <_malloc_r+0x2ba>
    aa30:	2301      	movs	r3, #1
    aa32:	6053      	str	r3, [r2, #4]
    aa34:	e794      	b.n	a960 <_malloc_r+0x40c>
    aa36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    aa3a:	d823      	bhi.n	aa84 <_malloc_r+0x530>
    aa3c:	0bd3      	lsrs	r3, r2, #15
    aa3e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    aa42:	00c9      	lsls	r1, r1, #3
    aa44:	3377      	adds	r3, #119	; 0x77
    aa46:	e71b      	b.n	a880 <_malloc_r+0x32c>
    aa48:	f240 5254 	movw	r2, #1364	; 0x554
    aa4c:	4293      	cmp	r3, r2
    aa4e:	d823      	bhi.n	aa98 <_malloc_r+0x544>
    aa50:	0cb3      	lsrs	r3, r6, #18
    aa52:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    aa56:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    aa5a:	00c3      	lsls	r3, r0, #3
    aa5c:	e5c0      	b.n	a5e0 <_malloc_r+0x8c>
    aa5e:	f1ab 0b08 	sub.w	fp, fp, #8
    aa62:	44d8      	add	r8, fp
    aa64:	eba8 0802 	sub.w	r8, r8, r2
    aa68:	f04f 0a00 	mov.w	sl, #0
    aa6c:	e6ab      	b.n	a7c6 <_malloc_r+0x272>
    aa6e:	f105 0108 	add.w	r1, r5, #8
    aa72:	4620      	mov	r0, r4
    aa74:	9300      	str	r3, [sp, #0]
    aa76:	f001 f9c5 	bl	be04 <_free_r>
    aa7a:	68bd      	ldr	r5, [r7, #8]
    aa7c:	9b00      	ldr	r3, [sp, #0]
    aa7e:	6868      	ldr	r0, [r5, #4]
    aa80:	6819      	ldr	r1, [r3, #0]
    aa82:	e6c4      	b.n	a80e <_malloc_r+0x2ba>
    aa84:	f240 5154 	movw	r1, #1364	; 0x554
    aa88:	428b      	cmp	r3, r1
    aa8a:	d80b      	bhi.n	aaa4 <_malloc_r+0x550>
    aa8c:	0c93      	lsrs	r3, r2, #18
    aa8e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    aa92:	00c9      	lsls	r1, r1, #3
    aa94:	337c      	adds	r3, #124	; 0x7c
    aa96:	e6f3      	b.n	a880 <_malloc_r+0x32c>
    aa98:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    aa9c:	207f      	movs	r0, #127	; 0x7f
    aa9e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    aaa2:	e59d      	b.n	a5e0 <_malloc_r+0x8c>
    aaa4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    aaa8:	237e      	movs	r3, #126	; 0x7e
    aaaa:	e6e9      	b.n	a880 <_malloc_r+0x32c>
    aaac:	687b      	ldr	r3, [r7, #4]
    aaae:	e770      	b.n	a992 <_malloc_r+0x43e>
    aab0:	20005258 	.word	0x20005258

0000aab4 <__malloc_lock>:
    aab4:	4801      	ldr	r0, [pc, #4]	; (aabc <__malloc_lock+0x8>)
    aab6:	f000 bec9 	b.w	b84c <__retarget_lock_acquire_recursive>
    aaba:	bf00      	nop
    aabc:	20005250 	.word	0x20005250

0000aac0 <__malloc_unlock>:
    aac0:	4801      	ldr	r0, [pc, #4]	; (aac8 <__malloc_unlock+0x8>)
    aac2:	f000 bec5 	b.w	b850 <__retarget_lock_release_recursive>
    aac6:	bf00      	nop
    aac8:	20005250 	.word	0x20005250

0000aacc <realloc>:
    aacc:	b410      	push	{r4}
    aace:	4c04      	ldr	r4, [pc, #16]	; (aae0 <realloc+0x14>)
    aad0:	4603      	mov	r3, r0
    aad2:	460a      	mov	r2, r1
    aad4:	6820      	ldr	r0, [r4, #0]
    aad6:	f85d 4b04 	ldr.w	r4, [sp], #4
    aada:	4619      	mov	r1, r3
    aadc:	f000 b802 	b.w	aae4 <_realloc_r>
    aae0:	200048fc 	.word	0x200048fc

0000aae4 <_realloc_r>:
    aae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aae8:	4617      	mov	r7, r2
    aaea:	2900      	cmp	r1, #0
    aaec:	f000 8098 	beq.w	ac20 <_realloc_r+0x13c>
    aaf0:	460c      	mov	r4, r1
    aaf2:	f107 050b 	add.w	r5, r7, #11
    aaf6:	4680      	mov	r8, r0
    aaf8:	f7ff ffdc 	bl	aab4 <__malloc_lock>
    aafc:	2d16      	cmp	r5, #22
    aafe:	f854 1c04 	ldr.w	r1, [r4, #-4]
    ab02:	d85b      	bhi.n	abbc <_realloc_r+0xd8>
    ab04:	2510      	movs	r5, #16
    ab06:	462a      	mov	r2, r5
    ab08:	42af      	cmp	r7, r5
    ab0a:	d85c      	bhi.n	abc6 <_realloc_r+0xe2>
    ab0c:	f021 0603 	bic.w	r6, r1, #3
    ab10:	4296      	cmp	r6, r2
    ab12:	f1a4 0908 	sub.w	r9, r4, #8
    ab16:	da62      	bge.n	abde <_realloc_r+0xfa>
    ab18:	4bbc      	ldr	r3, [pc, #752]	; (ae0c <_realloc_r+0x328>)
    ab1a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    ab1e:	eb09 0006 	add.w	r0, r9, r6
    ab22:	4584      	cmp	ip, r0
    ab24:	f000 8097 	beq.w	ac56 <_realloc_r+0x172>
    ab28:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ab2c:	f02c 0301 	bic.w	r3, ip, #1
    ab30:	4403      	add	r3, r0
    ab32:	685b      	ldr	r3, [r3, #4]
    ab34:	07db      	lsls	r3, r3, #31
    ab36:	d468      	bmi.n	ac0a <_realloc_r+0x126>
    ab38:	f02c 0c03 	bic.w	ip, ip, #3
    ab3c:	eb06 030c 	add.w	r3, r6, ip
    ab40:	4293      	cmp	r3, r2
    ab42:	da47      	bge.n	abd4 <_realloc_r+0xf0>
    ab44:	07cb      	lsls	r3, r1, #31
    ab46:	d410      	bmi.n	ab6a <_realloc_r+0x86>
    ab48:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ab4c:	eba9 0a03 	sub.w	sl, r9, r3
    ab50:	f8da 3004 	ldr.w	r3, [sl, #4]
    ab54:	f023 0103 	bic.w	r1, r3, #3
    ab58:	448c      	add	ip, r1
    ab5a:	44b4      	add	ip, r6
    ab5c:	4594      	cmp	ip, r2
    ab5e:	f280 8111 	bge.w	ad84 <_realloc_r+0x2a0>
    ab62:	1873      	adds	r3, r6, r1
    ab64:	4293      	cmp	r3, r2
    ab66:	f280 80e8 	bge.w	ad3a <_realloc_r+0x256>
    ab6a:	4639      	mov	r1, r7
    ab6c:	4640      	mov	r0, r8
    ab6e:	f7ff fcf1 	bl	a554 <_malloc_r>
    ab72:	4607      	mov	r7, r0
    ab74:	b1e0      	cbz	r0, abb0 <_realloc_r+0xcc>
    ab76:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ab7a:	f023 0301 	bic.w	r3, r3, #1
    ab7e:	444b      	add	r3, r9
    ab80:	f1a0 0208 	sub.w	r2, r0, #8
    ab84:	4293      	cmp	r3, r2
    ab86:	f000 80d2 	beq.w	ad2e <_realloc_r+0x24a>
    ab8a:	1f32      	subs	r2, r6, #4
    ab8c:	2a24      	cmp	r2, #36	; 0x24
    ab8e:	f200 80f5 	bhi.w	ad7c <_realloc_r+0x298>
    ab92:	2a13      	cmp	r2, #19
    ab94:	f200 80ac 	bhi.w	acf0 <_realloc_r+0x20c>
    ab98:	4603      	mov	r3, r0
    ab9a:	4622      	mov	r2, r4
    ab9c:	6811      	ldr	r1, [r2, #0]
    ab9e:	6019      	str	r1, [r3, #0]
    aba0:	6851      	ldr	r1, [r2, #4]
    aba2:	6059      	str	r1, [r3, #4]
    aba4:	6892      	ldr	r2, [r2, #8]
    aba6:	609a      	str	r2, [r3, #8]
    aba8:	4621      	mov	r1, r4
    abaa:	4640      	mov	r0, r8
    abac:	f001 f92a 	bl	be04 <_free_r>
    abb0:	4640      	mov	r0, r8
    abb2:	f7ff ff85 	bl	aac0 <__malloc_unlock>
    abb6:	4638      	mov	r0, r7
    abb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abbc:	f025 0507 	bic.w	r5, r5, #7
    abc0:	2d00      	cmp	r5, #0
    abc2:	462a      	mov	r2, r5
    abc4:	daa0      	bge.n	ab08 <_realloc_r+0x24>
    abc6:	230c      	movs	r3, #12
    abc8:	f8c8 3000 	str.w	r3, [r8]
    abcc:	2700      	movs	r7, #0
    abce:	4638      	mov	r0, r7
    abd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abd4:	461e      	mov	r6, r3
    abd6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    abda:	60d3      	str	r3, [r2, #12]
    abdc:	609a      	str	r2, [r3, #8]
    abde:	1b73      	subs	r3, r6, r5
    abe0:	2b0f      	cmp	r3, #15
    abe2:	d822      	bhi.n	ac2a <_realloc_r+0x146>
    abe4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    abe8:	f003 0301 	and.w	r3, r3, #1
    abec:	4333      	orrs	r3, r6
    abee:	444e      	add	r6, r9
    abf0:	f8c9 3004 	str.w	r3, [r9, #4]
    abf4:	6873      	ldr	r3, [r6, #4]
    abf6:	f043 0301 	orr.w	r3, r3, #1
    abfa:	6073      	str	r3, [r6, #4]
    abfc:	4640      	mov	r0, r8
    abfe:	4627      	mov	r7, r4
    ac00:	f7ff ff5e 	bl	aac0 <__malloc_unlock>
    ac04:	4638      	mov	r0, r7
    ac06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac0a:	07c9      	lsls	r1, r1, #31
    ac0c:	d4ad      	bmi.n	ab6a <_realloc_r+0x86>
    ac0e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ac12:	eba9 0a03 	sub.w	sl, r9, r3
    ac16:	f8da 1004 	ldr.w	r1, [sl, #4]
    ac1a:	f021 0103 	bic.w	r1, r1, #3
    ac1e:	e7a0      	b.n	ab62 <_realloc_r+0x7e>
    ac20:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac24:	4611      	mov	r1, r2
    ac26:	f7ff bc95 	b.w	a554 <_malloc_r>
    ac2a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ac2e:	eb09 0105 	add.w	r1, r9, r5
    ac32:	f002 0201 	and.w	r2, r2, #1
    ac36:	444e      	add	r6, r9
    ac38:	f043 0301 	orr.w	r3, r3, #1
    ac3c:	432a      	orrs	r2, r5
    ac3e:	f8c9 2004 	str.w	r2, [r9, #4]
    ac42:	604b      	str	r3, [r1, #4]
    ac44:	6873      	ldr	r3, [r6, #4]
    ac46:	f043 0301 	orr.w	r3, r3, #1
    ac4a:	3108      	adds	r1, #8
    ac4c:	6073      	str	r3, [r6, #4]
    ac4e:	4640      	mov	r0, r8
    ac50:	f001 f8d8 	bl	be04 <_free_r>
    ac54:	e7d2      	b.n	abfc <_realloc_r+0x118>
    ac56:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ac5a:	f020 0b03 	bic.w	fp, r0, #3
    ac5e:	eb06 0c0b 	add.w	ip, r6, fp
    ac62:	f105 0010 	add.w	r0, r5, #16
    ac66:	4584      	cmp	ip, r0
    ac68:	da4d      	bge.n	ad06 <_realloc_r+0x222>
    ac6a:	07c9      	lsls	r1, r1, #31
    ac6c:	f53f af7d 	bmi.w	ab6a <_realloc_r+0x86>
    ac70:	f854 1c08 	ldr.w	r1, [r4, #-8]
    ac74:	eba9 0a01 	sub.w	sl, r9, r1
    ac78:	f8da 1004 	ldr.w	r1, [sl, #4]
    ac7c:	f021 0103 	bic.w	r1, r1, #3
    ac80:	448b      	add	fp, r1
    ac82:	44b3      	add	fp, r6
    ac84:	4558      	cmp	r0, fp
    ac86:	f73f af6c 	bgt.w	ab62 <_realloc_r+0x7e>
    ac8a:	4657      	mov	r7, sl
    ac8c:	f8da 100c 	ldr.w	r1, [sl, #12]
    ac90:	f857 0f08 	ldr.w	r0, [r7, #8]!
    ac94:	1f32      	subs	r2, r6, #4
    ac96:	2a24      	cmp	r2, #36	; 0x24
    ac98:	60c1      	str	r1, [r0, #12]
    ac9a:	6088      	str	r0, [r1, #8]
    ac9c:	f200 80db 	bhi.w	ae56 <_realloc_r+0x372>
    aca0:	2a13      	cmp	r2, #19
    aca2:	f240 80d6 	bls.w	ae52 <_realloc_r+0x36e>
    aca6:	6821      	ldr	r1, [r4, #0]
    aca8:	f8ca 1008 	str.w	r1, [sl, #8]
    acac:	6861      	ldr	r1, [r4, #4]
    acae:	f8ca 100c 	str.w	r1, [sl, #12]
    acb2:	2a1b      	cmp	r2, #27
    acb4:	f200 80df 	bhi.w	ae76 <_realloc_r+0x392>
    acb8:	3408      	adds	r4, #8
    acba:	f10a 0210 	add.w	r2, sl, #16
    acbe:	6821      	ldr	r1, [r4, #0]
    acc0:	6011      	str	r1, [r2, #0]
    acc2:	6861      	ldr	r1, [r4, #4]
    acc4:	6051      	str	r1, [r2, #4]
    acc6:	68a1      	ldr	r1, [r4, #8]
    acc8:	6091      	str	r1, [r2, #8]
    acca:	eb0a 0105 	add.w	r1, sl, r5
    acce:	ebab 0205 	sub.w	r2, fp, r5
    acd2:	f042 0201 	orr.w	r2, r2, #1
    acd6:	6099      	str	r1, [r3, #8]
    acd8:	604a      	str	r2, [r1, #4]
    acda:	f8da 3004 	ldr.w	r3, [sl, #4]
    acde:	f003 0301 	and.w	r3, r3, #1
    ace2:	432b      	orrs	r3, r5
    ace4:	4640      	mov	r0, r8
    ace6:	f8ca 3004 	str.w	r3, [sl, #4]
    acea:	f7ff fee9 	bl	aac0 <__malloc_unlock>
    acee:	e76e      	b.n	abce <_realloc_r+0xea>
    acf0:	6823      	ldr	r3, [r4, #0]
    acf2:	6003      	str	r3, [r0, #0]
    acf4:	6863      	ldr	r3, [r4, #4]
    acf6:	6043      	str	r3, [r0, #4]
    acf8:	2a1b      	cmp	r2, #27
    acfa:	d868      	bhi.n	adce <_realloc_r+0x2ea>
    acfc:	f104 0208 	add.w	r2, r4, #8
    ad00:	f100 0308 	add.w	r3, r0, #8
    ad04:	e74a      	b.n	ab9c <_realloc_r+0xb8>
    ad06:	eb09 0205 	add.w	r2, r9, r5
    ad0a:	609a      	str	r2, [r3, #8]
    ad0c:	ebac 0305 	sub.w	r3, ip, r5
    ad10:	f043 0301 	orr.w	r3, r3, #1
    ad14:	6053      	str	r3, [r2, #4]
    ad16:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ad1a:	f003 0301 	and.w	r3, r3, #1
    ad1e:	432b      	orrs	r3, r5
    ad20:	4640      	mov	r0, r8
    ad22:	f844 3c04 	str.w	r3, [r4, #-4]
    ad26:	f7ff fecb 	bl	aac0 <__malloc_unlock>
    ad2a:	4627      	mov	r7, r4
    ad2c:	e74f      	b.n	abce <_realloc_r+0xea>
    ad2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    ad32:	f023 0303 	bic.w	r3, r3, #3
    ad36:	441e      	add	r6, r3
    ad38:	e751      	b.n	abde <_realloc_r+0xfa>
    ad3a:	4657      	mov	r7, sl
    ad3c:	f8da 100c 	ldr.w	r1, [sl, #12]
    ad40:	f857 0f08 	ldr.w	r0, [r7, #8]!
    ad44:	1f32      	subs	r2, r6, #4
    ad46:	2a24      	cmp	r2, #36	; 0x24
    ad48:	60c1      	str	r1, [r0, #12]
    ad4a:	6088      	str	r0, [r1, #8]
    ad4c:	d84c      	bhi.n	ade8 <_realloc_r+0x304>
    ad4e:	2a13      	cmp	r2, #19
    ad50:	d948      	bls.n	ade4 <_realloc_r+0x300>
    ad52:	6821      	ldr	r1, [r4, #0]
    ad54:	f8ca 1008 	str.w	r1, [sl, #8]
    ad58:	6861      	ldr	r1, [r4, #4]
    ad5a:	f8ca 100c 	str.w	r1, [sl, #12]
    ad5e:	2a1b      	cmp	r2, #27
    ad60:	d856      	bhi.n	ae10 <_realloc_r+0x32c>
    ad62:	3408      	adds	r4, #8
    ad64:	f10a 0210 	add.w	r2, sl, #16
    ad68:	461e      	mov	r6, r3
    ad6a:	6823      	ldr	r3, [r4, #0]
    ad6c:	6013      	str	r3, [r2, #0]
    ad6e:	6863      	ldr	r3, [r4, #4]
    ad70:	6053      	str	r3, [r2, #4]
    ad72:	68a3      	ldr	r3, [r4, #8]
    ad74:	6093      	str	r3, [r2, #8]
    ad76:	46d1      	mov	r9, sl
    ad78:	463c      	mov	r4, r7
    ad7a:	e730      	b.n	abde <_realloc_r+0xfa>
    ad7c:	4621      	mov	r1, r4
    ad7e:	f000 fb65 	bl	b44c <memmove>
    ad82:	e711      	b.n	aba8 <_realloc_r+0xc4>
    ad84:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    ad88:	4657      	mov	r7, sl
    ad8a:	60cb      	str	r3, [r1, #12]
    ad8c:	6099      	str	r1, [r3, #8]
    ad8e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    ad92:	f8da 300c 	ldr.w	r3, [sl, #12]
    ad96:	60cb      	str	r3, [r1, #12]
    ad98:	1f32      	subs	r2, r6, #4
    ad9a:	2a24      	cmp	r2, #36	; 0x24
    ad9c:	6099      	str	r1, [r3, #8]
    ad9e:	d82d      	bhi.n	adfc <_realloc_r+0x318>
    ada0:	2a13      	cmp	r2, #19
    ada2:	d929      	bls.n	adf8 <_realloc_r+0x314>
    ada4:	6823      	ldr	r3, [r4, #0]
    ada6:	f8ca 3008 	str.w	r3, [sl, #8]
    adaa:	6863      	ldr	r3, [r4, #4]
    adac:	f8ca 300c 	str.w	r3, [sl, #12]
    adb0:	2a1b      	cmp	r2, #27
    adb2:	d842      	bhi.n	ae3a <_realloc_r+0x356>
    adb4:	3408      	adds	r4, #8
    adb6:	f10a 0310 	add.w	r3, sl, #16
    adba:	6822      	ldr	r2, [r4, #0]
    adbc:	601a      	str	r2, [r3, #0]
    adbe:	6862      	ldr	r2, [r4, #4]
    adc0:	605a      	str	r2, [r3, #4]
    adc2:	68a2      	ldr	r2, [r4, #8]
    adc4:	609a      	str	r2, [r3, #8]
    adc6:	4666      	mov	r6, ip
    adc8:	46d1      	mov	r9, sl
    adca:	463c      	mov	r4, r7
    adcc:	e707      	b.n	abde <_realloc_r+0xfa>
    adce:	68a3      	ldr	r3, [r4, #8]
    add0:	6083      	str	r3, [r0, #8]
    add2:	68e3      	ldr	r3, [r4, #12]
    add4:	60c3      	str	r3, [r0, #12]
    add6:	2a24      	cmp	r2, #36	; 0x24
    add8:	d026      	beq.n	ae28 <_realloc_r+0x344>
    adda:	f104 0210 	add.w	r2, r4, #16
    adde:	f100 0310 	add.w	r3, r0, #16
    ade2:	e6db      	b.n	ab9c <_realloc_r+0xb8>
    ade4:	463a      	mov	r2, r7
    ade6:	e7bf      	b.n	ad68 <_realloc_r+0x284>
    ade8:	4621      	mov	r1, r4
    adea:	4638      	mov	r0, r7
    adec:	461e      	mov	r6, r3
    adee:	46d1      	mov	r9, sl
    adf0:	f000 fb2c 	bl	b44c <memmove>
    adf4:	463c      	mov	r4, r7
    adf6:	e6f2      	b.n	abde <_realloc_r+0xfa>
    adf8:	463b      	mov	r3, r7
    adfa:	e7de      	b.n	adba <_realloc_r+0x2d6>
    adfc:	4621      	mov	r1, r4
    adfe:	4638      	mov	r0, r7
    ae00:	4666      	mov	r6, ip
    ae02:	46d1      	mov	r9, sl
    ae04:	f000 fb22 	bl	b44c <memmove>
    ae08:	463c      	mov	r4, r7
    ae0a:	e6e8      	b.n	abde <_realloc_r+0xfa>
    ae0c:	200044e0 	.word	0x200044e0
    ae10:	68a1      	ldr	r1, [r4, #8]
    ae12:	f8ca 1010 	str.w	r1, [sl, #16]
    ae16:	68e1      	ldr	r1, [r4, #12]
    ae18:	f8ca 1014 	str.w	r1, [sl, #20]
    ae1c:	2a24      	cmp	r2, #36	; 0x24
    ae1e:	d020      	beq.n	ae62 <_realloc_r+0x37e>
    ae20:	3410      	adds	r4, #16
    ae22:	f10a 0218 	add.w	r2, sl, #24
    ae26:	e79f      	b.n	ad68 <_realloc_r+0x284>
    ae28:	6923      	ldr	r3, [r4, #16]
    ae2a:	6103      	str	r3, [r0, #16]
    ae2c:	6961      	ldr	r1, [r4, #20]
    ae2e:	6141      	str	r1, [r0, #20]
    ae30:	f104 0218 	add.w	r2, r4, #24
    ae34:	f100 0318 	add.w	r3, r0, #24
    ae38:	e6b0      	b.n	ab9c <_realloc_r+0xb8>
    ae3a:	68a3      	ldr	r3, [r4, #8]
    ae3c:	f8ca 3010 	str.w	r3, [sl, #16]
    ae40:	68e3      	ldr	r3, [r4, #12]
    ae42:	f8ca 3014 	str.w	r3, [sl, #20]
    ae46:	2a24      	cmp	r2, #36	; 0x24
    ae48:	d021      	beq.n	ae8e <_realloc_r+0x3aa>
    ae4a:	3410      	adds	r4, #16
    ae4c:	f10a 0318 	add.w	r3, sl, #24
    ae50:	e7b3      	b.n	adba <_realloc_r+0x2d6>
    ae52:	463a      	mov	r2, r7
    ae54:	e733      	b.n	acbe <_realloc_r+0x1da>
    ae56:	4621      	mov	r1, r4
    ae58:	4638      	mov	r0, r7
    ae5a:	f000 faf7 	bl	b44c <memmove>
    ae5e:	4b16      	ldr	r3, [pc, #88]	; (aeb8 <_realloc_r+0x3d4>)
    ae60:	e733      	b.n	acca <_realloc_r+0x1e6>
    ae62:	6922      	ldr	r2, [r4, #16]
    ae64:	f8ca 2018 	str.w	r2, [sl, #24]
    ae68:	6962      	ldr	r2, [r4, #20]
    ae6a:	f8ca 201c 	str.w	r2, [sl, #28]
    ae6e:	3418      	adds	r4, #24
    ae70:	f10a 0220 	add.w	r2, sl, #32
    ae74:	e778      	b.n	ad68 <_realloc_r+0x284>
    ae76:	68a1      	ldr	r1, [r4, #8]
    ae78:	f8ca 1010 	str.w	r1, [sl, #16]
    ae7c:	68e1      	ldr	r1, [r4, #12]
    ae7e:	f8ca 1014 	str.w	r1, [sl, #20]
    ae82:	2a24      	cmp	r2, #36	; 0x24
    ae84:	d00d      	beq.n	aea2 <_realloc_r+0x3be>
    ae86:	3410      	adds	r4, #16
    ae88:	f10a 0218 	add.w	r2, sl, #24
    ae8c:	e717      	b.n	acbe <_realloc_r+0x1da>
    ae8e:	6923      	ldr	r3, [r4, #16]
    ae90:	f8ca 3018 	str.w	r3, [sl, #24]
    ae94:	6963      	ldr	r3, [r4, #20]
    ae96:	f8ca 301c 	str.w	r3, [sl, #28]
    ae9a:	3418      	adds	r4, #24
    ae9c:	f10a 0320 	add.w	r3, sl, #32
    aea0:	e78b      	b.n	adba <_realloc_r+0x2d6>
    aea2:	6922      	ldr	r2, [r4, #16]
    aea4:	f8ca 2018 	str.w	r2, [sl, #24]
    aea8:	6962      	ldr	r2, [r4, #20]
    aeaa:	f8ca 201c 	str.w	r2, [sl, #28]
    aeae:	3418      	adds	r4, #24
    aeb0:	f10a 0220 	add.w	r2, sl, #32
    aeb4:	e703      	b.n	acbe <_realloc_r+0x1da>
    aeb6:	bf00      	nop
    aeb8:	200044e0 	.word	0x200044e0

0000aebc <_strtol_l.constprop.0>:
    aebc:	2b01      	cmp	r3, #1
    aebe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aec2:	d040      	beq.n	af46 <_strtol_l.constprop.0+0x8a>
    aec4:	2b24      	cmp	r3, #36	; 0x24
    aec6:	4698      	mov	r8, r3
    aec8:	d83d      	bhi.n	af46 <_strtol_l.constprop.0+0x8a>
    aeca:	4d4c      	ldr	r5, [pc, #304]	; (affc <_strtol_l.constprop.0+0x140>)
    aecc:	468e      	mov	lr, r1
    aece:	4676      	mov	r6, lr
    aed0:	f81e bb01 	ldrb.w	fp, [lr], #1
    aed4:	f815 400b 	ldrb.w	r4, [r5, fp]
    aed8:	f014 0408 	ands.w	r4, r4, #8
    aedc:	d1f7      	bne.n	aece <_strtol_l.constprop.0+0x12>
    aede:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    aee2:	d072      	beq.n	afca <_strtol_l.constprop.0+0x10e>
    aee4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    aee8:	bf08      	it	eq
    aeea:	f89e b000 	ldrbeq.w	fp, [lr]
    aeee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    aef2:	bf08      	it	eq
    aef4:	f106 0e02 	addeq.w	lr, r6, #2
    aef8:	2b00      	cmp	r3, #0
    aefa:	d042      	beq.n	af82 <_strtol_l.constprop.0+0xc6>
    aefc:	2b10      	cmp	r3, #16
    aefe:	d057      	beq.n	afb0 <_strtol_l.constprop.0+0xf4>
    af00:	fbb9 f7f8 	udiv	r7, r9, r8
    af04:	2500      	movs	r5, #0
    af06:	462e      	mov	r6, r5
    af08:	fb08 9a17 	mls	sl, r8, r7, r9
    af0c:	e005      	b.n	af1a <_strtol_l.constprop.0+0x5e>
    af0e:	d033      	beq.n	af78 <_strtol_l.constprop.0+0xbc>
    af10:	fb08 c606 	mla	r6, r8, r6, ip
    af14:	2501      	movs	r5, #1
    af16:	f81e bb01 	ldrb.w	fp, [lr], #1
    af1a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    af1e:	f1bc 0f09 	cmp.w	ip, #9
    af22:	d906      	bls.n	af32 <_strtol_l.constprop.0+0x76>
    af24:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    af28:	f1bc 0f19 	cmp.w	ip, #25
    af2c:	d812      	bhi.n	af54 <_strtol_l.constprop.0+0x98>
    af2e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    af32:	4563      	cmp	r3, ip
    af34:	dd17      	ble.n	af66 <_strtol_l.constprop.0+0xaa>
    af36:	f1b5 3fff 	cmp.w	r5, #4294967295
    af3a:	d0ec      	beq.n	af16 <_strtol_l.constprop.0+0x5a>
    af3c:	42b7      	cmp	r7, r6
    af3e:	d2e6      	bcs.n	af0e <_strtol_l.constprop.0+0x52>
    af40:	f04f 35ff 	mov.w	r5, #4294967295
    af44:	e7e7      	b.n	af16 <_strtol_l.constprop.0+0x5a>
    af46:	f000 fc53 	bl	b7f0 <__errno>
    af4a:	2316      	movs	r3, #22
    af4c:	6003      	str	r3, [r0, #0]
    af4e:	2000      	movs	r0, #0
    af50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af54:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    af58:	f1bc 0f19 	cmp.w	ip, #25
    af5c:	d803      	bhi.n	af66 <_strtol_l.constprop.0+0xaa>
    af5e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    af62:	4563      	cmp	r3, ip
    af64:	dce7      	bgt.n	af36 <_strtol_l.constprop.0+0x7a>
    af66:	1c6b      	adds	r3, r5, #1
    af68:	d027      	beq.n	afba <_strtol_l.constprop.0+0xfe>
    af6a:	b98c      	cbnz	r4, af90 <_strtol_l.constprop.0+0xd4>
    af6c:	b10a      	cbz	r2, af72 <_strtol_l.constprop.0+0xb6>
    af6e:	bba5      	cbnz	r5, afda <_strtol_l.constprop.0+0x11e>
    af70:	6011      	str	r1, [r2, #0]
    af72:	4630      	mov	r0, r6
    af74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af78:	45e2      	cmp	sl, ip
    af7a:	dac9      	bge.n	af10 <_strtol_l.constprop.0+0x54>
    af7c:	f04f 35ff 	mov.w	r5, #4294967295
    af80:	e7c9      	b.n	af16 <_strtol_l.constprop.0+0x5a>
    af82:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    af86:	d005      	beq.n	af94 <_strtol_l.constprop.0+0xd8>
    af88:	f04f 080a 	mov.w	r8, #10
    af8c:	4643      	mov	r3, r8
    af8e:	e7b7      	b.n	af00 <_strtol_l.constprop.0+0x44>
    af90:	4276      	negs	r6, r6
    af92:	e7eb      	b.n	af6c <_strtol_l.constprop.0+0xb0>
    af94:	f89e 3000 	ldrb.w	r3, [lr]
    af98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    af9c:	2b58      	cmp	r3, #88	; 0x58
    af9e:	d121      	bne.n	afe4 <_strtol_l.constprop.0+0x128>
    afa0:	f04f 0810 	mov.w	r8, #16
    afa4:	f89e b001 	ldrb.w	fp, [lr, #1]
    afa8:	4643      	mov	r3, r8
    afaa:	f10e 0e02 	add.w	lr, lr, #2
    afae:	e7a7      	b.n	af00 <_strtol_l.constprop.0+0x44>
    afb0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    afb4:	d01a      	beq.n	afec <_strtol_l.constprop.0+0x130>
    afb6:	4698      	mov	r8, r3
    afb8:	e7a2      	b.n	af00 <_strtol_l.constprop.0+0x44>
    afba:	2322      	movs	r3, #34	; 0x22
    afbc:	6003      	str	r3, [r0, #0]
    afbe:	b172      	cbz	r2, afde <_strtol_l.constprop.0+0x122>
    afc0:	f10e 31ff 	add.w	r1, lr, #4294967295
    afc4:	464e      	mov	r6, r9
    afc6:	6011      	str	r1, [r2, #0]
    afc8:	e7d3      	b.n	af72 <_strtol_l.constprop.0+0xb6>
    afca:	f89e b000 	ldrb.w	fp, [lr]
    afce:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    afd2:	f106 0e02 	add.w	lr, r6, #2
    afd6:	2401      	movs	r4, #1
    afd8:	e78e      	b.n	aef8 <_strtol_l.constprop.0+0x3c>
    afda:	46b1      	mov	r9, r6
    afdc:	e7f0      	b.n	afc0 <_strtol_l.constprop.0+0x104>
    afde:	464e      	mov	r6, r9
    afe0:	4630      	mov	r0, r6
    afe2:	e7c7      	b.n	af74 <_strtol_l.constprop.0+0xb8>
    afe4:	f04f 0808 	mov.w	r8, #8
    afe8:	4643      	mov	r3, r8
    afea:	e789      	b.n	af00 <_strtol_l.constprop.0+0x44>
    afec:	f89e 5000 	ldrb.w	r5, [lr]
    aff0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    aff4:	2d58      	cmp	r5, #88	; 0x58
    aff6:	d0d3      	beq.n	afa0 <_strtol_l.constprop.0+0xe4>
    aff8:	4698      	mov	r8, r3
    affa:	e781      	b.n	af00 <_strtol_l.constprop.0+0x44>
    affc:	20000b15 	.word	0x20000b15

0000b000 <strtol>:
    b000:	b410      	push	{r4}
    b002:	4c05      	ldr	r4, [pc, #20]	; (b018 <strtol+0x18>)
    b004:	4684      	mov	ip, r0
    b006:	4613      	mov	r3, r2
    b008:	6820      	ldr	r0, [r4, #0]
    b00a:	f85d 4b04 	ldr.w	r4, [sp], #4
    b00e:	460a      	mov	r2, r1
    b010:	4661      	mov	r1, ip
    b012:	f7ff bf53 	b.w	aebc <_strtol_l.constprop.0>
    b016:	bf00      	nop
    b018:	200048fc 	.word	0x200048fc

0000b01c <_strtoul_l.constprop.0>:
    b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b020:	4607      	mov	r7, r0
    b022:	484c      	ldr	r0, [pc, #304]	; (b154 <_strtoul_l.constprop.0+0x138>)
    b024:	460e      	mov	r6, r1
    b026:	4635      	mov	r5, r6
    b028:	f816 eb01 	ldrb.w	lr, [r6], #1
    b02c:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b030:	f01c 0c08 	ands.w	ip, ip, #8
    b034:	d1f7      	bne.n	b026 <_strtoul_l.constprop.0+0xa>
    b036:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b03a:	d05a      	beq.n	b0f2 <_strtoul_l.constprop.0+0xd6>
    b03c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b040:	bf03      	ittte	eq
    b042:	f896 e000 	ldrbeq.w	lr, [r6]
    b046:	4664      	moveq	r4, ip
    b048:	1cae      	addeq	r6, r5, #2
    b04a:	4664      	movne	r4, ip
    b04c:	b15b      	cbz	r3, b066 <_strtoul_l.constprop.0+0x4a>
    b04e:	2b10      	cmp	r3, #16
    b050:	d054      	beq.n	b0fc <_strtoul_l.constprop.0+0xe0>
    b052:	f04f 38ff 	mov.w	r8, #4294967295
    b056:	fbb8 f8f3 	udiv	r8, r8, r3
    b05a:	fb03 fa08 	mul.w	sl, r3, r8
    b05e:	ea6f 0a0a 	mvn.w	sl, sl
    b062:	4699      	mov	r9, r3
    b064:	e008      	b.n	b078 <_strtoul_l.constprop.0+0x5c>
    b066:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b06a:	d05a      	beq.n	b122 <_strtoul_l.constprop.0+0x106>
    b06c:	230a      	movs	r3, #10
    b06e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b158 <_strtoul_l.constprop.0+0x13c>
    b072:	f04f 0a05 	mov.w	sl, #5
    b076:	4699      	mov	r9, r3
    b078:	2500      	movs	r5, #0
    b07a:	4628      	mov	r0, r5
    b07c:	e005      	b.n	b08a <_strtoul_l.constprop.0+0x6e>
    b07e:	d02c      	beq.n	b0da <_strtoul_l.constprop.0+0xbe>
    b080:	fb09 c000 	mla	r0, r9, r0, ip
    b084:	2501      	movs	r5, #1
    b086:	f816 eb01 	ldrb.w	lr, [r6], #1
    b08a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b08e:	f1bc 0f09 	cmp.w	ip, #9
    b092:	d906      	bls.n	b0a2 <_strtoul_l.constprop.0+0x86>
    b094:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b098:	f1bc 0f19 	cmp.w	ip, #25
    b09c:	d80b      	bhi.n	b0b6 <_strtoul_l.constprop.0+0x9a>
    b09e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b0a2:	4563      	cmp	r3, ip
    b0a4:	dd10      	ble.n	b0c8 <_strtoul_l.constprop.0+0xac>
    b0a6:	f1b5 3fff 	cmp.w	r5, #4294967295
    b0aa:	d0ec      	beq.n	b086 <_strtoul_l.constprop.0+0x6a>
    b0ac:	4540      	cmp	r0, r8
    b0ae:	d9e6      	bls.n	b07e <_strtoul_l.constprop.0+0x62>
    b0b0:	f04f 35ff 	mov.w	r5, #4294967295
    b0b4:	e7e7      	b.n	b086 <_strtoul_l.constprop.0+0x6a>
    b0b6:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b0ba:	f1bc 0f19 	cmp.w	ip, #25
    b0be:	d803      	bhi.n	b0c8 <_strtoul_l.constprop.0+0xac>
    b0c0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b0c4:	4563      	cmp	r3, ip
    b0c6:	dcee      	bgt.n	b0a6 <_strtoul_l.constprop.0+0x8a>
    b0c8:	1c6b      	adds	r3, r5, #1
    b0ca:	d00b      	beq.n	b0e4 <_strtoul_l.constprop.0+0xc8>
    b0cc:	b104      	cbz	r4, b0d0 <_strtoul_l.constprop.0+0xb4>
    b0ce:	4240      	negs	r0, r0
    b0d0:	b10a      	cbz	r2, b0d6 <_strtoul_l.constprop.0+0xba>
    b0d2:	b965      	cbnz	r5, b0ee <_strtoul_l.constprop.0+0xd2>
    b0d4:	6011      	str	r1, [r2, #0]
    b0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0da:	45d4      	cmp	ip, sl
    b0dc:	ddd0      	ble.n	b080 <_strtoul_l.constprop.0+0x64>
    b0de:	f04f 35ff 	mov.w	r5, #4294967295
    b0e2:	e7d0      	b.n	b086 <_strtoul_l.constprop.0+0x6a>
    b0e4:	2322      	movs	r3, #34	; 0x22
    b0e6:	603b      	str	r3, [r7, #0]
    b0e8:	4628      	mov	r0, r5
    b0ea:	2a00      	cmp	r2, #0
    b0ec:	d0f3      	beq.n	b0d6 <_strtoul_l.constprop.0+0xba>
    b0ee:	1e71      	subs	r1, r6, #1
    b0f0:	e7f0      	b.n	b0d4 <_strtoul_l.constprop.0+0xb8>
    b0f2:	f896 e000 	ldrb.w	lr, [r6]
    b0f6:	2401      	movs	r4, #1
    b0f8:	1cae      	adds	r6, r5, #2
    b0fa:	e7a7      	b.n	b04c <_strtoul_l.constprop.0+0x30>
    b0fc:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b100:	d121      	bne.n	b146 <_strtoul_l.constprop.0+0x12a>
    b102:	7830      	ldrb	r0, [r6, #0]
    b104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b108:	2858      	cmp	r0, #88	; 0x58
    b10a:	d116      	bne.n	b13a <_strtoul_l.constprop.0+0x11e>
    b10c:	f04f 0910 	mov.w	r9, #16
    b110:	f896 e001 	ldrb.w	lr, [r6, #1]
    b114:	f04f 0a0f 	mov.w	sl, #15
    b118:	3602      	adds	r6, #2
    b11a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b11e:	464b      	mov	r3, r9
    b120:	e7aa      	b.n	b078 <_strtoul_l.constprop.0+0x5c>
    b122:	7833      	ldrb	r3, [r6, #0]
    b124:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b128:	2b58      	cmp	r3, #88	; 0x58
    b12a:	d0ef      	beq.n	b10c <_strtoul_l.constprop.0+0xf0>
    b12c:	2308      	movs	r3, #8
    b12e:	f04f 0a07 	mov.w	sl, #7
    b132:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b136:	4699      	mov	r9, r3
    b138:	e79e      	b.n	b078 <_strtoul_l.constprop.0+0x5c>
    b13a:	4699      	mov	r9, r3
    b13c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b140:	f04f 0a0f 	mov.w	sl, #15
    b144:	e798      	b.n	b078 <_strtoul_l.constprop.0+0x5c>
    b146:	f04f 0a0f 	mov.w	sl, #15
    b14a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b14e:	4699      	mov	r9, r3
    b150:	e792      	b.n	b078 <_strtoul_l.constprop.0+0x5c>
    b152:	bf00      	nop
    b154:	20000b15 	.word	0x20000b15
    b158:	19999999 	.word	0x19999999

0000b15c <strtoul>:
    b15c:	b410      	push	{r4}
    b15e:	4c05      	ldr	r4, [pc, #20]	; (b174 <strtoul+0x18>)
    b160:	4684      	mov	ip, r0
    b162:	4613      	mov	r3, r2
    b164:	6820      	ldr	r0, [r4, #0]
    b166:	f85d 4b04 	ldr.w	r4, [sp], #4
    b16a:	460a      	mov	r2, r1
    b16c:	4661      	mov	r1, ip
    b16e:	f7ff bf55 	b.w	b01c <_strtoul_l.constprop.0>
    b172:	bf00      	nop
    b174:	200048fc 	.word	0x200048fc

0000b178 <__cxa_atexit>:
    b178:	4613      	mov	r3, r2
    b17a:	460a      	mov	r2, r1
    b17c:	4601      	mov	r1, r0
    b17e:	2002      	movs	r0, #2
    b180:	f000 bdac 	b.w	bcdc <__register_exitproc>

0000b184 <isprint>:
    b184:	4b02      	ldr	r3, [pc, #8]	; (b190 <isprint+0xc>)
    b186:	4418      	add	r0, r3
    b188:	7840      	ldrb	r0, [r0, #1]
    b18a:	f000 0097 	and.w	r0, r0, #151	; 0x97
    b18e:	4770      	bx	lr
    b190:	20000b14 	.word	0x20000b14

0000b194 <isspace>:
    b194:	4b02      	ldr	r3, [pc, #8]	; (b1a0 <isspace+0xc>)
    b196:	4418      	add	r0, r3
    b198:	7840      	ldrb	r0, [r0, #1]
    b19a:	f000 0008 	and.w	r0, r0, #8
    b19e:	4770      	bx	lr
    b1a0:	20000b14 	.word	0x20000b14

0000b1a4 <tolower>:
    b1a4:	4b03      	ldr	r3, [pc, #12]	; (b1b4 <tolower+0x10>)
    b1a6:	5c1b      	ldrb	r3, [r3, r0]
    b1a8:	f003 0303 	and.w	r3, r3, #3
    b1ac:	2b01      	cmp	r3, #1
    b1ae:	bf08      	it	eq
    b1b0:	3020      	addeq	r0, #32
    b1b2:	4770      	bx	lr
    b1b4:	20000b15 	.word	0x20000b15

0000b1b8 <stdio_exit_handler>:
    b1b8:	4a02      	ldr	r2, [pc, #8]	; (b1c4 <stdio_exit_handler+0xc>)
    b1ba:	4903      	ldr	r1, [pc, #12]	; (b1c8 <stdio_exit_handler+0x10>)
    b1bc:	4803      	ldr	r0, [pc, #12]	; (b1cc <stdio_exit_handler+0x14>)
    b1be:	f000 b8bb 	b.w	b338 <_fwalk_sglue>
    b1c2:	bf00      	nop
    b1c4:	200048f0 	.word	0x200048f0
    b1c8:	0000e315 	.word	0x0000e315
    b1cc:	20001230 	.word	0x20001230

0000b1d0 <cleanup_stdio>:
    b1d0:	4b0c      	ldr	r3, [pc, #48]	; (b204 <cleanup_stdio+0x34>)
    b1d2:	6841      	ldr	r1, [r0, #4]
    b1d4:	4299      	cmp	r1, r3
    b1d6:	b510      	push	{r4, lr}
    b1d8:	4604      	mov	r4, r0
    b1da:	d001      	beq.n	b1e0 <cleanup_stdio+0x10>
    b1dc:	f003 f89a 	bl	e314 <_fclose_r>
    b1e0:	68a1      	ldr	r1, [r4, #8]
    b1e2:	4b09      	ldr	r3, [pc, #36]	; (b208 <cleanup_stdio+0x38>)
    b1e4:	4299      	cmp	r1, r3
    b1e6:	d002      	beq.n	b1ee <cleanup_stdio+0x1e>
    b1e8:	4620      	mov	r0, r4
    b1ea:	f003 f893 	bl	e314 <_fclose_r>
    b1ee:	68e1      	ldr	r1, [r4, #12]
    b1f0:	4b06      	ldr	r3, [pc, #24]	; (b20c <cleanup_stdio+0x3c>)
    b1f2:	4299      	cmp	r1, r3
    b1f4:	d004      	beq.n	b200 <cleanup_stdio+0x30>
    b1f6:	4620      	mov	r0, r4
    b1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1fc:	f003 b88a 	b.w	e314 <_fclose_r>
    b200:	bd10      	pop	{r4, pc}
    b202:	bf00      	nop
    b204:	2000528c 	.word	0x2000528c
    b208:	200052f4 	.word	0x200052f4
    b20c:	2000535c 	.word	0x2000535c

0000b210 <global_stdio_init.part.0>:
    b210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b214:	4c2a      	ldr	r4, [pc, #168]	; (b2c0 <global_stdio_init.part.0+0xb0>)
    b216:	4b2b      	ldr	r3, [pc, #172]	; (b2c4 <global_stdio_init.part.0+0xb4>)
    b218:	482b      	ldr	r0, [pc, #172]	; (b2c8 <global_stdio_init.part.0+0xb8>)
    b21a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b2dc <global_stdio_init.part.0+0xcc>
    b21e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b2e0 <global_stdio_init.part.0+0xd0>
    b222:	4f2a      	ldr	r7, [pc, #168]	; (b2cc <global_stdio_init.part.0+0xbc>)
    b224:	6018      	str	r0, [r3, #0]
    b226:	2500      	movs	r5, #0
    b228:	2304      	movs	r3, #4
    b22a:	2208      	movs	r2, #8
    b22c:	4629      	mov	r1, r5
    b22e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b232:	4e27      	ldr	r6, [pc, #156]	; (b2d0 <global_stdio_init.part.0+0xc0>)
    b234:	6665      	str	r5, [r4, #100]	; 0x64
    b236:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b23a:	e9c4 5500 	strd	r5, r5, [r4]
    b23e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b242:	61a5      	str	r5, [r4, #24]
    b244:	f000 f97e 	bl	b544 <memset>
    b248:	4b22      	ldr	r3, [pc, #136]	; (b2d4 <global_stdio_init.part.0+0xc4>)
    b24a:	6763      	str	r3, [r4, #116]	; 0x74
    b24c:	2208      	movs	r2, #8
    b24e:	4629      	mov	r1, r5
    b250:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b254:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b258:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b25c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b260:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b264:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b268:	6725      	str	r5, [r4, #112]	; 0x70
    b26a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b26e:	62e6      	str	r6, [r4, #44]	; 0x2c
    b270:	f000 f968 	bl	b544 <memset>
    b274:	4b18      	ldr	r3, [pc, #96]	; (b2d8 <global_stdio_init.part.0+0xc8>)
    b276:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b27a:	4629      	mov	r1, r5
    b27c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b280:	2208      	movs	r2, #8
    b282:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b286:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b28a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b28e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b292:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b296:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b29a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b29e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b2a2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b2a6:	f000 f94d 	bl	b544 <memset>
    b2aa:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b2ae:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b2b2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b2b6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b2be:	bf00      	nop
    b2c0:	2000528c 	.word	0x2000528c
    b2c4:	200053c4 	.word	0x200053c4
    b2c8:	0000b1b9 	.word	0x0000b1b9
    b2cc:	0000b425 	.word	0x0000b425
    b2d0:	0000b445 	.word	0x0000b445
    b2d4:	00010009 	.word	0x00010009
    b2d8:	00020012 	.word	0x00020012
    b2dc:	0000b3c1 	.word	0x0000b3c1
    b2e0:	0000b3e5 	.word	0x0000b3e5

0000b2e4 <__sinit>:
    b2e4:	b510      	push	{r4, lr}
    b2e6:	4604      	mov	r4, r0
    b2e8:	480a      	ldr	r0, [pc, #40]	; (b314 <__sinit+0x30>)
    b2ea:	f000 faaf 	bl	b84c <__retarget_lock_acquire_recursive>
    b2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b2f0:	b923      	cbnz	r3, b2fc <__sinit+0x18>
    b2f2:	4b09      	ldr	r3, [pc, #36]	; (b318 <__sinit+0x34>)
    b2f4:	4a09      	ldr	r2, [pc, #36]	; (b31c <__sinit+0x38>)
    b2f6:	681b      	ldr	r3, [r3, #0]
    b2f8:	6362      	str	r2, [r4, #52]	; 0x34
    b2fa:	b123      	cbz	r3, b306 <__sinit+0x22>
    b2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b300:	4804      	ldr	r0, [pc, #16]	; (b314 <__sinit+0x30>)
    b302:	f000 baa5 	b.w	b850 <__retarget_lock_release_recursive>
    b306:	f7ff ff83 	bl	b210 <global_stdio_init.part.0>
    b30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b30e:	4801      	ldr	r0, [pc, #4]	; (b314 <__sinit+0x30>)
    b310:	f000 ba9e 	b.w	b850 <__retarget_lock_release_recursive>
    b314:	20005254 	.word	0x20005254
    b318:	200053c4 	.word	0x200053c4
    b31c:	0000b1d1 	.word	0x0000b1d1

0000b320 <__sfp_lock_acquire>:
    b320:	4801      	ldr	r0, [pc, #4]	; (b328 <__sfp_lock_acquire+0x8>)
    b322:	f000 ba93 	b.w	b84c <__retarget_lock_acquire_recursive>
    b326:	bf00      	nop
    b328:	20005254 	.word	0x20005254

0000b32c <__sfp_lock_release>:
    b32c:	4801      	ldr	r0, [pc, #4]	; (b334 <__sfp_lock_release+0x8>)
    b32e:	f000 ba8f 	b.w	b850 <__retarget_lock_release_recursive>
    b332:	bf00      	nop
    b334:	20005254 	.word	0x20005254

0000b338 <_fwalk_sglue>:
    b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b33c:	4680      	mov	r8, r0
    b33e:	460f      	mov	r7, r1
    b340:	4616      	mov	r6, r2
    b342:	f04f 0900 	mov.w	r9, #0
    b346:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b34a:	3d01      	subs	r5, #1
    b34c:	d411      	bmi.n	b372 <_fwalk_sglue+0x3a>
    b34e:	89a3      	ldrh	r3, [r4, #12]
    b350:	2b01      	cmp	r3, #1
    b352:	f105 35ff 	add.w	r5, r5, #4294967295
    b356:	d908      	bls.n	b36a <_fwalk_sglue+0x32>
    b358:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b35c:	3301      	adds	r3, #1
    b35e:	4621      	mov	r1, r4
    b360:	d003      	beq.n	b36a <_fwalk_sglue+0x32>
    b362:	4640      	mov	r0, r8
    b364:	47b8      	blx	r7
    b366:	ea49 0900 	orr.w	r9, r9, r0
    b36a:	1c6b      	adds	r3, r5, #1
    b36c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b370:	d1ed      	bne.n	b34e <_fwalk_sglue+0x16>
    b372:	6836      	ldr	r6, [r6, #0]
    b374:	2e00      	cmp	r6, #0
    b376:	d1e6      	bne.n	b346 <_fwalk_sglue+0xe>
    b378:	4648      	mov	r0, r9
    b37a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b37e:	bf00      	nop

0000b380 <sprintf>:
    b380:	b40e      	push	{r1, r2, r3}
    b382:	b510      	push	{r4, lr}
    b384:	b09d      	sub	sp, #116	; 0x74
    b386:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b38a:	ab1f      	add	r3, sp, #124	; 0x7c
    b38c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b390:	9104      	str	r1, [sp, #16]
    b392:	4909      	ldr	r1, [pc, #36]	; (b3b8 <sprintf+0x38>)
    b394:	f853 2b04 	ldr.w	r2, [r3], #4
    b398:	9002      	str	r0, [sp, #8]
    b39a:	4c08      	ldr	r4, [pc, #32]	; (b3bc <sprintf+0x3c>)
    b39c:	6808      	ldr	r0, [r1, #0]
    b39e:	9301      	str	r3, [sp, #4]
    b3a0:	a902      	add	r1, sp, #8
    b3a2:	9405      	str	r4, [sp, #20]
    b3a4:	f001 fa14 	bl	c7d0 <_svfprintf_r>
    b3a8:	9b02      	ldr	r3, [sp, #8]
    b3aa:	2200      	movs	r2, #0
    b3ac:	701a      	strb	r2, [r3, #0]
    b3ae:	b01d      	add	sp, #116	; 0x74
    b3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3b4:	b003      	add	sp, #12
    b3b6:	4770      	bx	lr
    b3b8:	200048fc 	.word	0x200048fc
    b3bc:	ffff0208 	.word	0xffff0208

0000b3c0 <__sread>:
    b3c0:	b510      	push	{r4, lr}
    b3c2:	460c      	mov	r4, r1
    b3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b3c8:	f000 f9d4 	bl	b774 <_read_r>
    b3cc:	2800      	cmp	r0, #0
    b3ce:	db03      	blt.n	b3d8 <__sread+0x18>
    b3d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b3d2:	4403      	add	r3, r0
    b3d4:	6523      	str	r3, [r4, #80]	; 0x50
    b3d6:	bd10      	pop	{r4, pc}
    b3d8:	89a3      	ldrh	r3, [r4, #12]
    b3da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b3de:	81a3      	strh	r3, [r4, #12]
    b3e0:	bd10      	pop	{r4, pc}
    b3e2:	bf00      	nop

0000b3e4 <__swrite>:
    b3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3e8:	460c      	mov	r4, r1
    b3ea:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b3ee:	461f      	mov	r7, r3
    b3f0:	05cb      	lsls	r3, r1, #23
    b3f2:	4605      	mov	r5, r0
    b3f4:	4616      	mov	r6, r2
    b3f6:	d40b      	bmi.n	b410 <__swrite+0x2c>
    b3f8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b3fc:	81a1      	strh	r1, [r4, #12]
    b3fe:	463b      	mov	r3, r7
    b400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b404:	4632      	mov	r2, r6
    b406:	4628      	mov	r0, r5
    b408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b40c:	f000 b9da 	b.w	b7c4 <_write_r>
    b410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b414:	2302      	movs	r3, #2
    b416:	2200      	movs	r2, #0
    b418:	f000 f996 	bl	b748 <_lseek_r>
    b41c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b420:	e7ea      	b.n	b3f8 <__swrite+0x14>
    b422:	bf00      	nop

0000b424 <__sseek>:
    b424:	b510      	push	{r4, lr}
    b426:	460c      	mov	r4, r1
    b428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b42c:	f000 f98c 	bl	b748 <_lseek_r>
    b430:	89a3      	ldrh	r3, [r4, #12]
    b432:	1c42      	adds	r2, r0, #1
    b434:	bf0e      	itee	eq
    b436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b43e:	6520      	strne	r0, [r4, #80]	; 0x50
    b440:	81a3      	strh	r3, [r4, #12]
    b442:	bd10      	pop	{r4, pc}

0000b444 <__sclose>:
    b444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b448:	f000 b96c 	b.w	b724 <_close_r>

0000b44c <memmove>:
    b44c:	4288      	cmp	r0, r1
    b44e:	d90d      	bls.n	b46c <memmove+0x20>
    b450:	188b      	adds	r3, r1, r2
    b452:	4283      	cmp	r3, r0
    b454:	d90a      	bls.n	b46c <memmove+0x20>
    b456:	eb00 0c02 	add.w	ip, r0, r2
    b45a:	b1ba      	cbz	r2, b48c <memmove+0x40>
    b45c:	4662      	mov	r2, ip
    b45e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b462:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b466:	4299      	cmp	r1, r3
    b468:	d1f9      	bne.n	b45e <memmove+0x12>
    b46a:	4770      	bx	lr
    b46c:	2a0f      	cmp	r2, #15
    b46e:	d80e      	bhi.n	b48e <memmove+0x42>
    b470:	4603      	mov	r3, r0
    b472:	f102 3cff 	add.w	ip, r2, #4294967295
    b476:	b14a      	cbz	r2, b48c <memmove+0x40>
    b478:	f10c 0c01 	add.w	ip, ip, #1
    b47c:	3b01      	subs	r3, #1
    b47e:	448c      	add	ip, r1
    b480:	f811 2b01 	ldrb.w	r2, [r1], #1
    b484:	f803 2f01 	strb.w	r2, [r3, #1]!
    b488:	4561      	cmp	r1, ip
    b48a:	d1f9      	bne.n	b480 <memmove+0x34>
    b48c:	4770      	bx	lr
    b48e:	ea40 0301 	orr.w	r3, r0, r1
    b492:	079b      	lsls	r3, r3, #30
    b494:	d150      	bne.n	b538 <memmove+0xec>
    b496:	f1a2 0310 	sub.w	r3, r2, #16
    b49a:	b570      	push	{r4, r5, r6, lr}
    b49c:	f101 0c20 	add.w	ip, r1, #32
    b4a0:	f023 050f 	bic.w	r5, r3, #15
    b4a4:	f101 0e10 	add.w	lr, r1, #16
    b4a8:	f100 0410 	add.w	r4, r0, #16
    b4ac:	44ac      	add	ip, r5
    b4ae:	091b      	lsrs	r3, r3, #4
    b4b0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b4b4:	f844 5c10 	str.w	r5, [r4, #-16]
    b4b8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b4bc:	f844 5c0c 	str.w	r5, [r4, #-12]
    b4c0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b4c4:	f844 5c08 	str.w	r5, [r4, #-8]
    b4c8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b4cc:	f844 5c04 	str.w	r5, [r4, #-4]
    b4d0:	f10e 0e10 	add.w	lr, lr, #16
    b4d4:	45e6      	cmp	lr, ip
    b4d6:	f104 0410 	add.w	r4, r4, #16
    b4da:	d1e9      	bne.n	b4b0 <memmove+0x64>
    b4dc:	3301      	adds	r3, #1
    b4de:	f012 0f0c 	tst.w	r2, #12
    b4e2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b4e6:	f002 040f 	and.w	r4, r2, #15
    b4ea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b4ee:	d027      	beq.n	b540 <memmove+0xf4>
    b4f0:	3c04      	subs	r4, #4
    b4f2:	f024 0603 	bic.w	r6, r4, #3
    b4f6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b4fa:	441e      	add	r6, r3
    b4fc:	1f1c      	subs	r4, r3, #4
    b4fe:	468e      	mov	lr, r1
    b500:	f85e 5b04 	ldr.w	r5, [lr], #4
    b504:	f844 5f04 	str.w	r5, [r4, #4]!
    b508:	42b4      	cmp	r4, r6
    b50a:	d1f9      	bne.n	b500 <memmove+0xb4>
    b50c:	f10c 0401 	add.w	r4, ip, #1
    b510:	f002 0203 	and.w	r2, r2, #3
    b514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b51c:	f102 3cff 	add.w	ip, r2, #4294967295
    b520:	b14a      	cbz	r2, b536 <memmove+0xea>
    b522:	f10c 0c01 	add.w	ip, ip, #1
    b526:	3b01      	subs	r3, #1
    b528:	448c      	add	ip, r1
    b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
    b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
    b532:	4561      	cmp	r1, ip
    b534:	d1f9      	bne.n	b52a <memmove+0xde>
    b536:	bd70      	pop	{r4, r5, r6, pc}
    b538:	f102 3cff 	add.w	ip, r2, #4294967295
    b53c:	4603      	mov	r3, r0
    b53e:	e79b      	b.n	b478 <memmove+0x2c>
    b540:	4622      	mov	r2, r4
    b542:	e7eb      	b.n	b51c <memmove+0xd0>

0000b544 <memset>:
    b544:	0783      	lsls	r3, r0, #30
    b546:	b530      	push	{r4, r5, lr}
    b548:	d048      	beq.n	b5dc <memset+0x98>
    b54a:	1e54      	subs	r4, r2, #1
    b54c:	2a00      	cmp	r2, #0
    b54e:	d03f      	beq.n	b5d0 <memset+0x8c>
    b550:	b2ca      	uxtb	r2, r1
    b552:	4603      	mov	r3, r0
    b554:	e001      	b.n	b55a <memset+0x16>
    b556:	3c01      	subs	r4, #1
    b558:	d33a      	bcc.n	b5d0 <memset+0x8c>
    b55a:	f803 2b01 	strb.w	r2, [r3], #1
    b55e:	079d      	lsls	r5, r3, #30
    b560:	d1f9      	bne.n	b556 <memset+0x12>
    b562:	2c03      	cmp	r4, #3
    b564:	d92d      	bls.n	b5c2 <memset+0x7e>
    b566:	b2cd      	uxtb	r5, r1
    b568:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b56c:	2c0f      	cmp	r4, #15
    b56e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b572:	d936      	bls.n	b5e2 <memset+0x9e>
    b574:	f1a4 0210 	sub.w	r2, r4, #16
    b578:	f022 0c0f 	bic.w	ip, r2, #15
    b57c:	f103 0e20 	add.w	lr, r3, #32
    b580:	44e6      	add	lr, ip
    b582:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b586:	f103 0210 	add.w	r2, r3, #16
    b58a:	e942 5504 	strd	r5, r5, [r2, #-16]
    b58e:	e942 5502 	strd	r5, r5, [r2, #-8]
    b592:	3210      	adds	r2, #16
    b594:	4572      	cmp	r2, lr
    b596:	d1f8      	bne.n	b58a <memset+0x46>
    b598:	f10c 0201 	add.w	r2, ip, #1
    b59c:	f014 0f0c 	tst.w	r4, #12
    b5a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b5a4:	f004 0c0f 	and.w	ip, r4, #15
    b5a8:	d013      	beq.n	b5d2 <memset+0x8e>
    b5aa:	f1ac 0304 	sub.w	r3, ip, #4
    b5ae:	f023 0303 	bic.w	r3, r3, #3
    b5b2:	3304      	adds	r3, #4
    b5b4:	4413      	add	r3, r2
    b5b6:	f842 5b04 	str.w	r5, [r2], #4
    b5ba:	4293      	cmp	r3, r2
    b5bc:	d1fb      	bne.n	b5b6 <memset+0x72>
    b5be:	f00c 0403 	and.w	r4, ip, #3
    b5c2:	b12c      	cbz	r4, b5d0 <memset+0x8c>
    b5c4:	b2c9      	uxtb	r1, r1
    b5c6:	441c      	add	r4, r3
    b5c8:	f803 1b01 	strb.w	r1, [r3], #1
    b5cc:	429c      	cmp	r4, r3
    b5ce:	d1fb      	bne.n	b5c8 <memset+0x84>
    b5d0:	bd30      	pop	{r4, r5, pc}
    b5d2:	4664      	mov	r4, ip
    b5d4:	4613      	mov	r3, r2
    b5d6:	2c00      	cmp	r4, #0
    b5d8:	d1f4      	bne.n	b5c4 <memset+0x80>
    b5da:	e7f9      	b.n	b5d0 <memset+0x8c>
    b5dc:	4603      	mov	r3, r0
    b5de:	4614      	mov	r4, r2
    b5e0:	e7bf      	b.n	b562 <memset+0x1e>
    b5e2:	461a      	mov	r2, r3
    b5e4:	46a4      	mov	ip, r4
    b5e6:	e7e0      	b.n	b5aa <memset+0x66>

0000b5e8 <strchr>:
    b5e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    b5ec:	4603      	mov	r3, r0
    b5ee:	d044      	beq.n	b67a <strchr+0x92>
    b5f0:	0782      	lsls	r2, r0, #30
    b5f2:	d132      	bne.n	b65a <strchr+0x72>
    b5f4:	b510      	push	{r4, lr}
    b5f6:	6804      	ldr	r4, [r0, #0]
    b5f8:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    b5fc:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    b600:	ea8e 0204 	eor.w	r2, lr, r4
    b604:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b608:	ea23 0302 	bic.w	r3, r3, r2
    b60c:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    b610:	ea22 0204 	bic.w	r2, r2, r4
    b614:	4313      	orrs	r3, r2
    b616:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b61a:	d10f      	bne.n	b63c <strchr+0x54>
    b61c:	f850 4f04 	ldr.w	r4, [r0, #4]!
    b620:	ea84 0c0e 	eor.w	ip, r4, lr
    b624:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    b628:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    b62c:	ea23 0304 	bic.w	r3, r3, r4
    b630:	ea22 020c 	bic.w	r2, r2, ip
    b634:	4313      	orrs	r3, r2
    b636:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b63a:	d0ef      	beq.n	b61c <strchr+0x34>
    b63c:	7803      	ldrb	r3, [r0, #0]
    b63e:	b923      	cbnz	r3, b64a <strchr+0x62>
    b640:	e036      	b.n	b6b0 <strchr+0xc8>
    b642:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    b646:	2b00      	cmp	r3, #0
    b648:	d032      	beq.n	b6b0 <strchr+0xc8>
    b64a:	4299      	cmp	r1, r3
    b64c:	d1f9      	bne.n	b642 <strchr+0x5a>
    b64e:	bd10      	pop	{r4, pc}
    b650:	428a      	cmp	r2, r1
    b652:	d011      	beq.n	b678 <strchr+0x90>
    b654:	079a      	lsls	r2, r3, #30
    b656:	4618      	mov	r0, r3
    b658:	d0cc      	beq.n	b5f4 <strchr+0xc>
    b65a:	4618      	mov	r0, r3
    b65c:	f813 2b01 	ldrb.w	r2, [r3], #1
    b660:	2a00      	cmp	r2, #0
    b662:	d1f5      	bne.n	b650 <strchr+0x68>
    b664:	4610      	mov	r0, r2
    b666:	4770      	bx	lr
    b668:	0799      	lsls	r1, r3, #30
    b66a:	4618      	mov	r0, r3
    b66c:	d007      	beq.n	b67e <strchr+0x96>
    b66e:	4618      	mov	r0, r3
    b670:	3301      	adds	r3, #1
    b672:	7802      	ldrb	r2, [r0, #0]
    b674:	2a00      	cmp	r2, #0
    b676:	d1f7      	bne.n	b668 <strchr+0x80>
    b678:	4770      	bx	lr
    b67a:	0782      	lsls	r2, r0, #30
    b67c:	d1f7      	bne.n	b66e <strchr+0x86>
    b67e:	6802      	ldr	r2, [r0, #0]
    b680:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b684:	ea23 0302 	bic.w	r3, r3, r2
    b688:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b68c:	d108      	bne.n	b6a0 <strchr+0xb8>
    b68e:	f850 2f04 	ldr.w	r2, [r0, #4]!
    b692:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b696:	ea23 0302 	bic.w	r3, r3, r2
    b69a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b69e:	d0f6      	beq.n	b68e <strchr+0xa6>
    b6a0:	7803      	ldrb	r3, [r0, #0]
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	d0e8      	beq.n	b678 <strchr+0x90>
    b6a6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	d1fb      	bne.n	b6a6 <strchr+0xbe>
    b6ae:	4770      	bx	lr
    b6b0:	4618      	mov	r0, r3
    b6b2:	bd10      	pop	{r4, pc}

0000b6b4 <strncpy>:
    b6b4:	ea40 0301 	orr.w	r3, r0, r1
    b6b8:	079b      	lsls	r3, r3, #30
    b6ba:	b530      	push	{r4, r5, lr}
    b6bc:	d101      	bne.n	b6c2 <strncpy+0xe>
    b6be:	2a03      	cmp	r2, #3
    b6c0:	d80f      	bhi.n	b6e2 <strncpy+0x2e>
    b6c2:	4684      	mov	ip, r0
    b6c4:	f101 3eff 	add.w	lr, r1, #4294967295
    b6c8:	e007      	b.n	b6da <strncpy+0x26>
    b6ca:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    b6ce:	f803 1b01 	strb.w	r1, [r3], #1
    b6d2:	1e54      	subs	r4, r2, #1
    b6d4:	b1c1      	cbz	r1, b708 <strncpy+0x54>
    b6d6:	469c      	mov	ip, r3
    b6d8:	4622      	mov	r2, r4
    b6da:	4663      	mov	r3, ip
    b6dc:	2a00      	cmp	r2, #0
    b6de:	d1f4      	bne.n	b6ca <strncpy+0x16>
    b6e0:	bd30      	pop	{r4, r5, pc}
    b6e2:	460b      	mov	r3, r1
    b6e4:	4684      	mov	ip, r0
    b6e6:	4619      	mov	r1, r3
    b6e8:	f853 5b04 	ldr.w	r5, [r3], #4
    b6ec:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b6f0:	ea24 0405 	bic.w	r4, r4, r5
    b6f4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b6f8:	d1e4      	bne.n	b6c4 <strncpy+0x10>
    b6fa:	3a04      	subs	r2, #4
    b6fc:	2a03      	cmp	r2, #3
    b6fe:	f84c 5b04 	str.w	r5, [ip], #4
    b702:	4619      	mov	r1, r3
    b704:	d8ef      	bhi.n	b6e6 <strncpy+0x32>
    b706:	e7dd      	b.n	b6c4 <strncpy+0x10>
    b708:	4494      	add	ip, r2
    b70a:	2c00      	cmp	r4, #0
    b70c:	d0e8      	beq.n	b6e0 <strncpy+0x2c>
    b70e:	f803 1b01 	strb.w	r1, [r3], #1
    b712:	4563      	cmp	r3, ip
    b714:	d1fb      	bne.n	b70e <strncpy+0x5a>
    b716:	bd30      	pop	{r4, r5, pc}

0000b718 <__locale_mb_cur_max>:
    b718:	4b01      	ldr	r3, [pc, #4]	; (b720 <__locale_mb_cur_max+0x8>)
    b71a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    b71e:	4770      	bx	lr
    b720:	20004374 	.word	0x20004374

0000b724 <_close_r>:
    b724:	b538      	push	{r3, r4, r5, lr}
    b726:	4d07      	ldr	r5, [pc, #28]	; (b744 <_close_r+0x20>)
    b728:	2200      	movs	r2, #0
    b72a:	4604      	mov	r4, r0
    b72c:	4608      	mov	r0, r1
    b72e:	602a      	str	r2, [r5, #0]
    b730:	f7fd fb08 	bl	8d44 <_close>
    b734:	1c43      	adds	r3, r0, #1
    b736:	d000      	beq.n	b73a <_close_r+0x16>
    b738:	bd38      	pop	{r3, r4, r5, pc}
    b73a:	682b      	ldr	r3, [r5, #0]
    b73c:	2b00      	cmp	r3, #0
    b73e:	d0fb      	beq.n	b738 <_close_r+0x14>
    b740:	6023      	str	r3, [r4, #0]
    b742:	bd38      	pop	{r3, r4, r5, pc}
    b744:	200053dc 	.word	0x200053dc

0000b748 <_lseek_r>:
    b748:	b538      	push	{r3, r4, r5, lr}
    b74a:	460c      	mov	r4, r1
    b74c:	4d08      	ldr	r5, [pc, #32]	; (b770 <_lseek_r+0x28>)
    b74e:	4684      	mov	ip, r0
    b750:	4611      	mov	r1, r2
    b752:	4620      	mov	r0, r4
    b754:	461a      	mov	r2, r3
    b756:	2300      	movs	r3, #0
    b758:	602b      	str	r3, [r5, #0]
    b75a:	4664      	mov	r4, ip
    b75c:	f7fd fafe 	bl	8d5c <_lseek>
    b760:	1c43      	adds	r3, r0, #1
    b762:	d000      	beq.n	b766 <_lseek_r+0x1e>
    b764:	bd38      	pop	{r3, r4, r5, pc}
    b766:	682b      	ldr	r3, [r5, #0]
    b768:	2b00      	cmp	r3, #0
    b76a:	d0fb      	beq.n	b764 <_lseek_r+0x1c>
    b76c:	6023      	str	r3, [r4, #0]
    b76e:	bd38      	pop	{r3, r4, r5, pc}
    b770:	200053dc 	.word	0x200053dc

0000b774 <_read_r>:
    b774:	b538      	push	{r3, r4, r5, lr}
    b776:	460c      	mov	r4, r1
    b778:	4d08      	ldr	r5, [pc, #32]	; (b79c <_read_r+0x28>)
    b77a:	4684      	mov	ip, r0
    b77c:	4611      	mov	r1, r2
    b77e:	4620      	mov	r0, r4
    b780:	461a      	mov	r2, r3
    b782:	2300      	movs	r3, #0
    b784:	602b      	str	r3, [r5, #0]
    b786:	4664      	mov	r4, ip
    b788:	f7fd fada 	bl	8d40 <_read>
    b78c:	1c43      	adds	r3, r0, #1
    b78e:	d000      	beq.n	b792 <_read_r+0x1e>
    b790:	bd38      	pop	{r3, r4, r5, pc}
    b792:	682b      	ldr	r3, [r5, #0]
    b794:	2b00      	cmp	r3, #0
    b796:	d0fb      	beq.n	b790 <_read_r+0x1c>
    b798:	6023      	str	r3, [r4, #0]
    b79a:	bd38      	pop	{r3, r4, r5, pc}
    b79c:	200053dc 	.word	0x200053dc

0000b7a0 <_sbrk_r>:
    b7a0:	b538      	push	{r3, r4, r5, lr}
    b7a2:	4d07      	ldr	r5, [pc, #28]	; (b7c0 <_sbrk_r+0x20>)
    b7a4:	2200      	movs	r2, #0
    b7a6:	4604      	mov	r4, r0
    b7a8:	4608      	mov	r0, r1
    b7aa:	602a      	str	r2, [r5, #0]
    b7ac:	f7fd faae 	bl	8d0c <_sbrk>
    b7b0:	1c43      	adds	r3, r0, #1
    b7b2:	d000      	beq.n	b7b6 <_sbrk_r+0x16>
    b7b4:	bd38      	pop	{r3, r4, r5, pc}
    b7b6:	682b      	ldr	r3, [r5, #0]
    b7b8:	2b00      	cmp	r3, #0
    b7ba:	d0fb      	beq.n	b7b4 <_sbrk_r+0x14>
    b7bc:	6023      	str	r3, [r4, #0]
    b7be:	bd38      	pop	{r3, r4, r5, pc}
    b7c0:	200053dc 	.word	0x200053dc

0000b7c4 <_write_r>:
    b7c4:	b538      	push	{r3, r4, r5, lr}
    b7c6:	460c      	mov	r4, r1
    b7c8:	4d08      	ldr	r5, [pc, #32]	; (b7ec <_write_r+0x28>)
    b7ca:	4684      	mov	ip, r0
    b7cc:	4611      	mov	r1, r2
    b7ce:	4620      	mov	r0, r4
    b7d0:	461a      	mov	r2, r3
    b7d2:	2300      	movs	r3, #0
    b7d4:	602b      	str	r3, [r5, #0]
    b7d6:	4664      	mov	r4, ip
    b7d8:	f7fc fe56 	bl	8488 <_write>
    b7dc:	1c43      	adds	r3, r0, #1
    b7de:	d000      	beq.n	b7e2 <_write_r+0x1e>
    b7e0:	bd38      	pop	{r3, r4, r5, pc}
    b7e2:	682b      	ldr	r3, [r5, #0]
    b7e4:	2b00      	cmp	r3, #0
    b7e6:	d0fb      	beq.n	b7e0 <_write_r+0x1c>
    b7e8:	6023      	str	r3, [r4, #0]
    b7ea:	bd38      	pop	{r3, r4, r5, pc}
    b7ec:	200053dc 	.word	0x200053dc

0000b7f0 <__errno>:
    b7f0:	4b01      	ldr	r3, [pc, #4]	; (b7f8 <__errno+0x8>)
    b7f2:	6818      	ldr	r0, [r3, #0]
    b7f4:	4770      	bx	lr
    b7f6:	bf00      	nop
    b7f8:	200048fc 	.word	0x200048fc

0000b7fc <__libc_init_array>:
    b7fc:	b570      	push	{r4, r5, r6, lr}
    b7fe:	4e0d      	ldr	r6, [pc, #52]	; (b834 <__libc_init_array+0x38>)
    b800:	4d0d      	ldr	r5, [pc, #52]	; (b838 <__libc_init_array+0x3c>)
    b802:	1b76      	subs	r6, r6, r5
    b804:	10b6      	asrs	r6, r6, #2
    b806:	d006      	beq.n	b816 <__libc_init_array+0x1a>
    b808:	2400      	movs	r4, #0
    b80a:	f855 3b04 	ldr.w	r3, [r5], #4
    b80e:	3401      	adds	r4, #1
    b810:	4798      	blx	r3
    b812:	42a6      	cmp	r6, r4
    b814:	d1f9      	bne.n	b80a <__libc_init_array+0xe>
    b816:	4e09      	ldr	r6, [pc, #36]	; (b83c <__libc_init_array+0x40>)
    b818:	4d09      	ldr	r5, [pc, #36]	; (b840 <__libc_init_array+0x44>)
    b81a:	1b76      	subs	r6, r6, r5
    b81c:	f005 fb90 	bl	10f40 <___init_veneer>
    b820:	10b6      	asrs	r6, r6, #2
    b822:	d006      	beq.n	b832 <__libc_init_array+0x36>
    b824:	2400      	movs	r4, #0
    b826:	f855 3b04 	ldr.w	r3, [r5], #4
    b82a:	3401      	adds	r4, #1
    b82c:	4798      	blx	r3
    b82e:	42a6      	cmp	r6, r4
    b830:	d1f9      	bne.n	b826 <__libc_init_array+0x2a>
    b832:	bd70      	pop	{r4, r5, r6, pc}
    b834:	60001e48 	.word	0x60001e48
    b838:	60001e48 	.word	0x60001e48
    b83c:	60001e50 	.word	0x60001e50
    b840:	60001e48 	.word	0x60001e48

0000b844 <__retarget_lock_init_recursive>:
    b844:	4770      	bx	lr
    b846:	bf00      	nop

0000b848 <__retarget_lock_close_recursive>:
    b848:	4770      	bx	lr
    b84a:	bf00      	nop

0000b84c <__retarget_lock_acquire_recursive>:
    b84c:	4770      	bx	lr
    b84e:	bf00      	nop

0000b850 <__retarget_lock_release_recursive>:
    b850:	4770      	bx	lr
    b852:	bf00      	nop
	...
    b860:	eba2 0003 	sub.w	r0, r2, r3
    b864:	4770      	bx	lr
    b866:	bf00      	nop

0000b868 <strcmp>:
    b868:	7802      	ldrb	r2, [r0, #0]
    b86a:	780b      	ldrb	r3, [r1, #0]
    b86c:	2a01      	cmp	r2, #1
    b86e:	bf28      	it	cs
    b870:	429a      	cmpcs	r2, r3
    b872:	d1f5      	bne.n	b860 <__retarget_lock_release_recursive+0x10>
    b874:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    b878:	ea40 0401 	orr.w	r4, r0, r1
    b87c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    b880:	f06f 0c00 	mvn.w	ip, #0
    b884:	ea4f 7244 	mov.w	r2, r4, lsl #29
    b888:	b312      	cbz	r2, b8d0 <strcmp+0x68>
    b88a:	ea80 0401 	eor.w	r4, r0, r1
    b88e:	f014 0f07 	tst.w	r4, #7
    b892:	d16a      	bne.n	b96a <strcmp+0x102>
    b894:	f000 0407 	and.w	r4, r0, #7
    b898:	f020 0007 	bic.w	r0, r0, #7
    b89c:	f004 0503 	and.w	r5, r4, #3
    b8a0:	f021 0107 	bic.w	r1, r1, #7
    b8a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    b8a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b8ac:	f014 0f04 	tst.w	r4, #4
    b8b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b8b4:	fa0c f405 	lsl.w	r4, ip, r5
    b8b8:	ea62 0204 	orn	r2, r2, r4
    b8bc:	ea66 0604 	orn	r6, r6, r4
    b8c0:	d00a      	beq.n	b8d8 <strcmp+0x70>
    b8c2:	ea63 0304 	orn	r3, r3, r4
    b8c6:	4662      	mov	r2, ip
    b8c8:	ea67 0704 	orn	r7, r7, r4
    b8cc:	4666      	mov	r6, ip
    b8ce:	e003      	b.n	b8d8 <strcmp+0x70>
    b8d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    b8d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    b8d8:	fa82 f54c 	uadd8	r5, r2, ip
    b8dc:	ea82 0406 	eor.w	r4, r2, r6
    b8e0:	faa4 f48c 	sel	r4, r4, ip
    b8e4:	bb6c      	cbnz	r4, b942 <strcmp+0xda>
    b8e6:	fa83 f54c 	uadd8	r5, r3, ip
    b8ea:	ea83 0507 	eor.w	r5, r3, r7
    b8ee:	faa5 f58c 	sel	r5, r5, ip
    b8f2:	b995      	cbnz	r5, b91a <strcmp+0xb2>
    b8f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    b8f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    b8fc:	fa82 f54c 	uadd8	r5, r2, ip
    b900:	ea82 0406 	eor.w	r4, r2, r6
    b904:	faa4 f48c 	sel	r4, r4, ip
    b908:	fa83 f54c 	uadd8	r5, r3, ip
    b90c:	ea83 0507 	eor.w	r5, r3, r7
    b910:	faa5 f58c 	sel	r5, r5, ip
    b914:	4325      	orrs	r5, r4
    b916:	d0db      	beq.n	b8d0 <strcmp+0x68>
    b918:	b99c      	cbnz	r4, b942 <strcmp+0xda>
    b91a:	ba2d      	rev	r5, r5
    b91c:	fab5 f485 	clz	r4, r5
    b920:	f024 0407 	bic.w	r4, r4, #7
    b924:	fa27 f104 	lsr.w	r1, r7, r4
    b928:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b92c:	fa23 f304 	lsr.w	r3, r3, r4
    b930:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b934:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b938:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b93c:	eba0 0001 	sub.w	r0, r0, r1
    b940:	4770      	bx	lr
    b942:	ba24      	rev	r4, r4
    b944:	fab4 f484 	clz	r4, r4
    b948:	f024 0407 	bic.w	r4, r4, #7
    b94c:	fa26 f104 	lsr.w	r1, r6, r4
    b950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    b954:	fa22 f204 	lsr.w	r2, r2, r4
    b958:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    b95c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b960:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b964:	eba0 0001 	sub.w	r0, r0, r1
    b968:	4770      	bx	lr
    b96a:	f014 0f03 	tst.w	r4, #3
    b96e:	d13c      	bne.n	b9ea <strcmp+0x182>
    b970:	f010 0403 	ands.w	r4, r0, #3
    b974:	d128      	bne.n	b9c8 <strcmp+0x160>
    b976:	f850 2b08 	ldr.w	r2, [r0], #8
    b97a:	f851 3b08 	ldr.w	r3, [r1], #8
    b97e:	fa82 f54c 	uadd8	r5, r2, ip
    b982:	ea82 0503 	eor.w	r5, r2, r3
    b986:	faa5 f58c 	sel	r5, r5, ip
    b98a:	b95d      	cbnz	r5, b9a4 <strcmp+0x13c>
    b98c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    b990:	f851 3c04 	ldr.w	r3, [r1, #-4]
    b994:	fa82 f54c 	uadd8	r5, r2, ip
    b998:	ea82 0503 	eor.w	r5, r2, r3
    b99c:	faa5 f58c 	sel	r5, r5, ip
    b9a0:	2d00      	cmp	r5, #0
    b9a2:	d0e8      	beq.n	b976 <strcmp+0x10e>
    b9a4:	ba2d      	rev	r5, r5
    b9a6:	fab5 f485 	clz	r4, r5
    b9aa:	f024 0407 	bic.w	r4, r4, #7
    b9ae:	fa23 f104 	lsr.w	r1, r3, r4
    b9b2:	fa22 f204 	lsr.w	r2, r2, r4
    b9b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    b9ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b9be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    b9c2:	eba0 0001 	sub.w	r0, r0, r1
    b9c6:	4770      	bx	lr
    b9c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    b9cc:	f020 0003 	bic.w	r0, r0, #3
    b9d0:	f850 2b08 	ldr.w	r2, [r0], #8
    b9d4:	f021 0103 	bic.w	r1, r1, #3
    b9d8:	f851 3b08 	ldr.w	r3, [r1], #8
    b9dc:	fa0c f404 	lsl.w	r4, ip, r4
    b9e0:	ea62 0204 	orn	r2, r2, r4
    b9e4:	ea63 0304 	orn	r3, r3, r4
    b9e8:	e7c9      	b.n	b97e <strcmp+0x116>
    b9ea:	f010 0403 	ands.w	r4, r0, #3
    b9ee:	d01a      	beq.n	ba26 <strcmp+0x1be>
    b9f0:	eba1 0104 	sub.w	r1, r1, r4
    b9f4:	f020 0003 	bic.w	r0, r0, #3
    b9f8:	07e4      	lsls	r4, r4, #31
    b9fa:	f850 2b04 	ldr.w	r2, [r0], #4
    b9fe:	d006      	beq.n	ba0e <strcmp+0x1a6>
    ba00:	d20f      	bcs.n	ba22 <strcmp+0x1ba>
    ba02:	788b      	ldrb	r3, [r1, #2]
    ba04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    ba08:	1ae4      	subs	r4, r4, r3
    ba0a:	d106      	bne.n	ba1a <strcmp+0x1b2>
    ba0c:	b12b      	cbz	r3, ba1a <strcmp+0x1b2>
    ba0e:	78cb      	ldrb	r3, [r1, #3]
    ba10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    ba14:	1ae4      	subs	r4, r4, r3
    ba16:	d100      	bne.n	ba1a <strcmp+0x1b2>
    ba18:	b91b      	cbnz	r3, ba22 <strcmp+0x1ba>
    ba1a:	4620      	mov	r0, r4
    ba1c:	f85d 4b10 	ldr.w	r4, [sp], #16
    ba20:	4770      	bx	lr
    ba22:	f101 0104 	add.w	r1, r1, #4
    ba26:	f850 2b04 	ldr.w	r2, [r0], #4
    ba2a:	07cc      	lsls	r4, r1, #31
    ba2c:	f021 0103 	bic.w	r1, r1, #3
    ba30:	f851 3b04 	ldr.w	r3, [r1], #4
    ba34:	d848      	bhi.n	bac8 <strcmp+0x260>
    ba36:	d224      	bcs.n	ba82 <strcmp+0x21a>
    ba38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    ba3c:	fa82 f54c 	uadd8	r5, r2, ip
    ba40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    ba44:	faa5 f58c 	sel	r5, r5, ip
    ba48:	d10a      	bne.n	ba60 <strcmp+0x1f8>
    ba4a:	b965      	cbnz	r5, ba66 <strcmp+0x1fe>
    ba4c:	f851 3b04 	ldr.w	r3, [r1], #4
    ba50:	ea84 0402 	eor.w	r4, r4, r2
    ba54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    ba58:	d10e      	bne.n	ba78 <strcmp+0x210>
    ba5a:	f850 2b04 	ldr.w	r2, [r0], #4
    ba5e:	e7eb      	b.n	ba38 <strcmp+0x1d0>
    ba60:	ea4f 2313 	mov.w	r3, r3, lsr #8
    ba64:	e055      	b.n	bb12 <strcmp+0x2aa>
    ba66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    ba6a:	d14d      	bne.n	bb08 <strcmp+0x2a0>
    ba6c:	7808      	ldrb	r0, [r1, #0]
    ba6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    ba72:	f1c0 0000 	rsb	r0, r0, #0
    ba76:	4770      	bx	lr
    ba78:	ea4f 6212 	mov.w	r2, r2, lsr #24
    ba7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ba80:	e047      	b.n	bb12 <strcmp+0x2aa>
    ba82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    ba86:	fa82 f54c 	uadd8	r5, r2, ip
    ba8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    ba8e:	faa5 f58c 	sel	r5, r5, ip
    ba92:	d10a      	bne.n	baaa <strcmp+0x242>
    ba94:	b965      	cbnz	r5, bab0 <strcmp+0x248>
    ba96:	f851 3b04 	ldr.w	r3, [r1], #4
    ba9a:	ea84 0402 	eor.w	r4, r4, r2
    ba9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    baa2:	d10c      	bne.n	babe <strcmp+0x256>
    baa4:	f850 2b04 	ldr.w	r2, [r0], #4
    baa8:	e7eb      	b.n	ba82 <strcmp+0x21a>
    baaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    baae:	e030      	b.n	bb12 <strcmp+0x2aa>
    bab0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bab4:	d128      	bne.n	bb08 <strcmp+0x2a0>
    bab6:	880b      	ldrh	r3, [r1, #0]
    bab8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    babc:	e029      	b.n	bb12 <strcmp+0x2aa>
    babe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bac2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bac6:	e024      	b.n	bb12 <strcmp+0x2aa>
    bac8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bacc:	fa82 f54c 	uadd8	r5, r2, ip
    bad0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bad4:	faa5 f58c 	sel	r5, r5, ip
    bad8:	d10a      	bne.n	baf0 <strcmp+0x288>
    bada:	b965      	cbnz	r5, baf6 <strcmp+0x28e>
    badc:	f851 3b04 	ldr.w	r3, [r1], #4
    bae0:	ea84 0402 	eor.w	r4, r4, r2
    bae4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bae8:	d109      	bne.n	bafe <strcmp+0x296>
    baea:	f850 2b04 	ldr.w	r2, [r0], #4
    baee:	e7eb      	b.n	bac8 <strcmp+0x260>
    baf0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    baf4:	e00d      	b.n	bb12 <strcmp+0x2aa>
    baf6:	f015 0fff 	tst.w	r5, #255	; 0xff
    bafa:	d105      	bne.n	bb08 <strcmp+0x2a0>
    bafc:	680b      	ldr	r3, [r1, #0]
    bafe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bb02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb06:	e004      	b.n	bb12 <strcmp+0x2aa>
    bb08:	f04f 0000 	mov.w	r0, #0
    bb0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bb10:	4770      	bx	lr
    bb12:	ba12      	rev	r2, r2
    bb14:	ba1b      	rev	r3, r3
    bb16:	fa82 f44c 	uadd8	r4, r2, ip
    bb1a:	ea82 0403 	eor.w	r4, r2, r3
    bb1e:	faa4 f58c 	sel	r5, r4, ip
    bb22:	fab5 f485 	clz	r4, r5
    bb26:	fa02 f204 	lsl.w	r2, r2, r4
    bb2a:	fa03 f304 	lsl.w	r3, r3, r4
    bb2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    bb32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bb36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    bb3a:	4770      	bx	lr

0000bb3c <strcpy>:
    bb3c:	ea80 0201 	eor.w	r2, r0, r1
    bb40:	4684      	mov	ip, r0
    bb42:	f012 0f03 	tst.w	r2, #3
    bb46:	d14f      	bne.n	bbe8 <strcpy+0xac>
    bb48:	f011 0f03 	tst.w	r1, #3
    bb4c:	d132      	bne.n	bbb4 <strcpy+0x78>
    bb4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bb52:	f011 0f04 	tst.w	r1, #4
    bb56:	f851 3b04 	ldr.w	r3, [r1], #4
    bb5a:	d00b      	beq.n	bb74 <strcpy+0x38>
    bb5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bb60:	439a      	bics	r2, r3
    bb62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bb66:	bf04      	itt	eq
    bb68:	f84c 3b04 	streq.w	r3, [ip], #4
    bb6c:	f851 3b04 	ldreq.w	r3, [r1], #4
    bb70:	d116      	bne.n	bba0 <strcpy+0x64>
    bb72:	bf00      	nop
    bb74:	f851 4b04 	ldr.w	r4, [r1], #4
    bb78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bb7c:	439a      	bics	r2, r3
    bb7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bb82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bb86:	d10b      	bne.n	bba0 <strcpy+0x64>
    bb88:	f84c 3b04 	str.w	r3, [ip], #4
    bb8c:	43a2      	bics	r2, r4
    bb8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bb92:	bf04      	itt	eq
    bb94:	f851 3b04 	ldreq.w	r3, [r1], #4
    bb98:	f84c 4b04 	streq.w	r4, [ip], #4
    bb9c:	d0ea      	beq.n	bb74 <strcpy+0x38>
    bb9e:	4623      	mov	r3, r4
    bba0:	f80c 3b01 	strb.w	r3, [ip], #1
    bba4:	f013 0fff 	tst.w	r3, #255	; 0xff
    bba8:	ea4f 2333 	mov.w	r3, r3, ror #8
    bbac:	d1f8      	bne.n	bba0 <strcpy+0x64>
    bbae:	f85d 4b04 	ldr.w	r4, [sp], #4
    bbb2:	4770      	bx	lr
    bbb4:	f011 0f01 	tst.w	r1, #1
    bbb8:	d006      	beq.n	bbc8 <strcpy+0x8c>
    bbba:	f811 2b01 	ldrb.w	r2, [r1], #1
    bbbe:	f80c 2b01 	strb.w	r2, [ip], #1
    bbc2:	2a00      	cmp	r2, #0
    bbc4:	bf08      	it	eq
    bbc6:	4770      	bxeq	lr
    bbc8:	f011 0f02 	tst.w	r1, #2
    bbcc:	d0bf      	beq.n	bb4e <strcpy+0x12>
    bbce:	f831 2b02 	ldrh.w	r2, [r1], #2
    bbd2:	f012 0fff 	tst.w	r2, #255	; 0xff
    bbd6:	bf16      	itet	ne
    bbd8:	f82c 2b02 	strhne.w	r2, [ip], #2
    bbdc:	f88c 2000 	strbeq.w	r2, [ip]
    bbe0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    bbe4:	d1b3      	bne.n	bb4e <strcpy+0x12>
    bbe6:	4770      	bx	lr
    bbe8:	f811 2b01 	ldrb.w	r2, [r1], #1
    bbec:	f80c 2b01 	strb.w	r2, [ip], #1
    bbf0:	2a00      	cmp	r2, #0
    bbf2:	d1f9      	bne.n	bbe8 <strcpy+0xac>
    bbf4:	4770      	bx	lr
    bbf6:	bf00      	nop
	...

0000bc00 <strlen>:
    bc00:	f890 f000 	pld	[r0]
    bc04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    bc08:	f020 0107 	bic.w	r1, r0, #7
    bc0c:	f06f 0c00 	mvn.w	ip, #0
    bc10:	f010 0407 	ands.w	r4, r0, #7
    bc14:	f891 f020 	pld	[r1, #32]
    bc18:	f040 8049 	bne.w	bcae <strlen+0xae>
    bc1c:	f04f 0400 	mov.w	r4, #0
    bc20:	f06f 0007 	mvn.w	r0, #7
    bc24:	e9d1 2300 	ldrd	r2, r3, [r1]
    bc28:	f891 f040 	pld	[r1, #64]	; 0x40
    bc2c:	f100 0008 	add.w	r0, r0, #8
    bc30:	fa82 f24c 	uadd8	r2, r2, ip
    bc34:	faa4 f28c 	sel	r2, r4, ip
    bc38:	fa83 f34c 	uadd8	r3, r3, ip
    bc3c:	faa2 f38c 	sel	r3, r2, ip
    bc40:	bb4b      	cbnz	r3, bc96 <strlen+0x96>
    bc42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    bc46:	fa82 f24c 	uadd8	r2, r2, ip
    bc4a:	f100 0008 	add.w	r0, r0, #8
    bc4e:	faa4 f28c 	sel	r2, r4, ip
    bc52:	fa83 f34c 	uadd8	r3, r3, ip
    bc56:	faa2 f38c 	sel	r3, r2, ip
    bc5a:	b9e3      	cbnz	r3, bc96 <strlen+0x96>
    bc5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    bc60:	fa82 f24c 	uadd8	r2, r2, ip
    bc64:	f100 0008 	add.w	r0, r0, #8
    bc68:	faa4 f28c 	sel	r2, r4, ip
    bc6c:	fa83 f34c 	uadd8	r3, r3, ip
    bc70:	faa2 f38c 	sel	r3, r2, ip
    bc74:	b97b      	cbnz	r3, bc96 <strlen+0x96>
    bc76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    bc7a:	f101 0120 	add.w	r1, r1, #32
    bc7e:	fa82 f24c 	uadd8	r2, r2, ip
    bc82:	f100 0008 	add.w	r0, r0, #8
    bc86:	faa4 f28c 	sel	r2, r4, ip
    bc8a:	fa83 f34c 	uadd8	r3, r3, ip
    bc8e:	faa2 f38c 	sel	r3, r2, ip
    bc92:	2b00      	cmp	r3, #0
    bc94:	d0c6      	beq.n	bc24 <strlen+0x24>
    bc96:	2a00      	cmp	r2, #0
    bc98:	bf04      	itt	eq
    bc9a:	3004      	addeq	r0, #4
    bc9c:	461a      	moveq	r2, r3
    bc9e:	ba12      	rev	r2, r2
    bca0:	fab2 f282 	clz	r2, r2
    bca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    bca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bcac:	4770      	bx	lr
    bcae:	e9d1 2300 	ldrd	r2, r3, [r1]
    bcb2:	f004 0503 	and.w	r5, r4, #3
    bcb6:	f1c4 0000 	rsb	r0, r4, #0
    bcba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bcbe:	f014 0f04 	tst.w	r4, #4
    bcc2:	f891 f040 	pld	[r1, #64]	; 0x40
    bcc6:	fa0c f505 	lsl.w	r5, ip, r5
    bcca:	ea62 0205 	orn	r2, r2, r5
    bcce:	bf1c      	itt	ne
    bcd0:	ea63 0305 	ornne	r3, r3, r5
    bcd4:	4662      	movne	r2, ip
    bcd6:	f04f 0400 	mov.w	r4, #0
    bcda:	e7a9      	b.n	bc30 <strlen+0x30>

0000bcdc <__register_exitproc>:
    bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bce0:	f8df a07c 	ldr.w	sl, [pc, #124]	; bd60 <__register_exitproc+0x84>
    bce4:	4606      	mov	r6, r0
    bce6:	f8da 0000 	ldr.w	r0, [sl]
    bcea:	4698      	mov	r8, r3
    bcec:	460f      	mov	r7, r1
    bcee:	4691      	mov	r9, r2
    bcf0:	f7ff fdac 	bl	b84c <__retarget_lock_acquire_recursive>
    bcf4:	4b18      	ldr	r3, [pc, #96]	; (bd58 <__register_exitproc+0x7c>)
    bcf6:	681c      	ldr	r4, [r3, #0]
    bcf8:	b324      	cbz	r4, bd44 <__register_exitproc+0x68>
    bcfa:	6865      	ldr	r5, [r4, #4]
    bcfc:	2d1f      	cmp	r5, #31
    bcfe:	dc24      	bgt.n	bd4a <__register_exitproc+0x6e>
    bd00:	b95e      	cbnz	r6, bd1a <__register_exitproc+0x3e>
    bd02:	1c6b      	adds	r3, r5, #1
    bd04:	3502      	adds	r5, #2
    bd06:	f8da 0000 	ldr.w	r0, [sl]
    bd0a:	6063      	str	r3, [r4, #4]
    bd0c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    bd10:	f7ff fd9e 	bl	b850 <__retarget_lock_release_recursive>
    bd14:	2000      	movs	r0, #0
    bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    bd1e:	2301      	movs	r3, #1
    bd20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    bd24:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    bd28:	40ab      	lsls	r3, r5
    bd2a:	431a      	orrs	r2, r3
    bd2c:	2e02      	cmp	r6, #2
    bd2e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    bd32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    bd36:	d1e4      	bne.n	bd02 <__register_exitproc+0x26>
    bd38:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    bd3c:	431a      	orrs	r2, r3
    bd3e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bd42:	e7de      	b.n	bd02 <__register_exitproc+0x26>
    bd44:	4c05      	ldr	r4, [pc, #20]	; (bd5c <__register_exitproc+0x80>)
    bd46:	601c      	str	r4, [r3, #0]
    bd48:	e7d7      	b.n	bcfa <__register_exitproc+0x1e>
    bd4a:	f8da 0000 	ldr.w	r0, [sl]
    bd4e:	f7ff fd7f 	bl	b850 <__retarget_lock_release_recursive>
    bd52:	f04f 30ff 	mov.w	r0, #4294967295
    bd56:	e7de      	b.n	bd16 <__register_exitproc+0x3a>
    bd58:	200050b8 	.word	0x200050b8
    bd5c:	200050bc 	.word	0x200050bc
    bd60:	20004368 	.word	0x20004368

0000bd64 <_malloc_trim_r>:
    bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd66:	4f24      	ldr	r7, [pc, #144]	; (bdf8 <_malloc_trim_r+0x94>)
    bd68:	460c      	mov	r4, r1
    bd6a:	4606      	mov	r6, r0
    bd6c:	f7fe fea2 	bl	aab4 <__malloc_lock>
    bd70:	68bb      	ldr	r3, [r7, #8]
    bd72:	685d      	ldr	r5, [r3, #4]
    bd74:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    bd78:	310f      	adds	r1, #15
    bd7a:	f025 0503 	bic.w	r5, r5, #3
    bd7e:	194b      	adds	r3, r1, r5
    bd80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    bd84:	f023 030f 	bic.w	r3, r3, #15
    bd88:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    bd8c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    bd90:	db07      	blt.n	bda2 <_malloc_trim_r+0x3e>
    bd92:	2100      	movs	r1, #0
    bd94:	4630      	mov	r0, r6
    bd96:	f7ff fd03 	bl	b7a0 <_sbrk_r>
    bd9a:	68bb      	ldr	r3, [r7, #8]
    bd9c:	442b      	add	r3, r5
    bd9e:	4298      	cmp	r0, r3
    bda0:	d004      	beq.n	bdac <_malloc_trim_r+0x48>
    bda2:	4630      	mov	r0, r6
    bda4:	f7fe fe8c 	bl	aac0 <__malloc_unlock>
    bda8:	2000      	movs	r0, #0
    bdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdac:	4261      	negs	r1, r4
    bdae:	4630      	mov	r0, r6
    bdb0:	f7ff fcf6 	bl	b7a0 <_sbrk_r>
    bdb4:	3001      	adds	r0, #1
    bdb6:	d00d      	beq.n	bdd4 <_malloc_trim_r+0x70>
    bdb8:	4a10      	ldr	r2, [pc, #64]	; (bdfc <_malloc_trim_r+0x98>)
    bdba:	68bb      	ldr	r3, [r7, #8]
    bdbc:	1b2d      	subs	r5, r5, r4
    bdbe:	f045 0501 	orr.w	r5, r5, #1
    bdc2:	605d      	str	r5, [r3, #4]
    bdc4:	6813      	ldr	r3, [r2, #0]
    bdc6:	4630      	mov	r0, r6
    bdc8:	1b1b      	subs	r3, r3, r4
    bdca:	6013      	str	r3, [r2, #0]
    bdcc:	f7fe fe78 	bl	aac0 <__malloc_unlock>
    bdd0:	2001      	movs	r0, #1
    bdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bdd4:	2100      	movs	r1, #0
    bdd6:	4630      	mov	r0, r6
    bdd8:	f7ff fce2 	bl	b7a0 <_sbrk_r>
    bddc:	68ba      	ldr	r2, [r7, #8]
    bdde:	1a83      	subs	r3, r0, r2
    bde0:	2b0f      	cmp	r3, #15
    bde2:	ddde      	ble.n	bda2 <_malloc_trim_r+0x3e>
    bde4:	f043 0301 	orr.w	r3, r3, #1
    bde8:	6053      	str	r3, [r2, #4]
    bdea:	4b05      	ldr	r3, [pc, #20]	; (be00 <_malloc_trim_r+0x9c>)
    bdec:	4903      	ldr	r1, [pc, #12]	; (bdfc <_malloc_trim_r+0x98>)
    bdee:	681b      	ldr	r3, [r3, #0]
    bdf0:	1ac0      	subs	r0, r0, r3
    bdf2:	6008      	str	r0, [r1, #0]
    bdf4:	e7d5      	b.n	bda2 <_malloc_trim_r+0x3e>
    bdf6:	bf00      	nop
    bdf8:	200044e0 	.word	0x200044e0
    bdfc:	20005258 	.word	0x20005258
    be00:	200048e8 	.word	0x200048e8

0000be04 <_free_r>:
    be04:	2900      	cmp	r1, #0
    be06:	d061      	beq.n	becc <_free_r+0xc8>
    be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be0a:	460c      	mov	r4, r1
    be0c:	4606      	mov	r6, r0
    be0e:	f7fe fe51 	bl	aab4 <__malloc_lock>
    be12:	f854 2c04 	ldr.w	r2, [r4, #-4]
    be16:	4f7b      	ldr	r7, [pc, #492]	; (c004 <_free_r+0x200>)
    be18:	f1a4 0508 	sub.w	r5, r4, #8
    be1c:	f022 0101 	bic.w	r1, r2, #1
    be20:	eb05 0c01 	add.w	ip, r5, r1
    be24:	68b8      	ldr	r0, [r7, #8]
    be26:	f8dc 3004 	ldr.w	r3, [ip, #4]
    be2a:	4560      	cmp	r0, ip
    be2c:	f023 0303 	bic.w	r3, r3, #3
    be30:	f000 808b 	beq.w	bf4a <_free_r+0x146>
    be34:	07d2      	lsls	r2, r2, #31
    be36:	f8cc 3004 	str.w	r3, [ip, #4]
    be3a:	d432      	bmi.n	bea2 <_free_r+0x9e>
    be3c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    be40:	1aad      	subs	r5, r5, r2
    be42:	4411      	add	r1, r2
    be44:	68aa      	ldr	r2, [r5, #8]
    be46:	f107 0008 	add.w	r0, r7, #8
    be4a:	4282      	cmp	r2, r0
    be4c:	d06a      	beq.n	bf24 <_free_r+0x120>
    be4e:	eb0c 0403 	add.w	r4, ip, r3
    be52:	f8d4 e004 	ldr.w	lr, [r4, #4]
    be56:	68ec      	ldr	r4, [r5, #12]
    be58:	60d4      	str	r4, [r2, #12]
    be5a:	f01e 0f01 	tst.w	lr, #1
    be5e:	60a2      	str	r2, [r4, #8]
    be60:	f000 8097 	beq.w	bf92 <_free_r+0x18e>
    be64:	f041 0301 	orr.w	r3, r1, #1
    be68:	606b      	str	r3, [r5, #4]
    be6a:	f8cc 1000 	str.w	r1, [ip]
    be6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    be72:	d235      	bcs.n	bee0 <_free_r+0xdc>
    be74:	6878      	ldr	r0, [r7, #4]
    be76:	08cb      	lsrs	r3, r1, #3
    be78:	2201      	movs	r2, #1
    be7a:	0949      	lsrs	r1, r1, #5
    be7c:	3301      	adds	r3, #1
    be7e:	408a      	lsls	r2, r1
    be80:	4302      	orrs	r2, r0
    be82:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    be86:	607a      	str	r2, [r7, #4]
    be88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    be8c:	3a08      	subs	r2, #8
    be8e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    be92:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    be96:	60cd      	str	r5, [r1, #12]
    be98:	4630      	mov	r0, r6
    be9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    be9e:	f7fe be0f 	b.w	aac0 <__malloc_unlock>
    bea2:	eb0c 0203 	add.w	r2, ip, r3
    bea6:	6852      	ldr	r2, [r2, #4]
    bea8:	07d0      	lsls	r0, r2, #31
    beaa:	d410      	bmi.n	bece <_free_r+0xca>
    beac:	4419      	add	r1, r3
    beae:	f107 0008 	add.w	r0, r7, #8
    beb2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    beb6:	4283      	cmp	r3, r0
    beb8:	d073      	beq.n	bfa2 <_free_r+0x19e>
    beba:	f8dc 200c 	ldr.w	r2, [ip, #12]
    bebe:	60da      	str	r2, [r3, #12]
    bec0:	6093      	str	r3, [r2, #8]
    bec2:	f041 0301 	orr.w	r3, r1, #1
    bec6:	606b      	str	r3, [r5, #4]
    bec8:	5069      	str	r1, [r5, r1]
    beca:	e7d0      	b.n	be6e <_free_r+0x6a>
    becc:	4770      	bx	lr
    bece:	f041 0301 	orr.w	r3, r1, #1
    bed2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    bed6:	f844 3c04 	str.w	r3, [r4, #-4]
    beda:	f8cc 1000 	str.w	r1, [ip]
    bede:	d3c9      	bcc.n	be74 <_free_r+0x70>
    bee0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    bee4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    bee8:	d248      	bcs.n	bf7c <_free_r+0x178>
    beea:	098b      	lsrs	r3, r1, #6
    beec:	f103 0039 	add.w	r0, r3, #57	; 0x39
    bef0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    bef4:	00c3      	lsls	r3, r0, #3
    bef6:	18f8      	adds	r0, r7, r3
    bef8:	58fb      	ldr	r3, [r7, r3]
    befa:	3808      	subs	r0, #8
    befc:	4298      	cmp	r0, r3
    befe:	d059      	beq.n	bfb4 <_free_r+0x1b0>
    bf00:	685a      	ldr	r2, [r3, #4]
    bf02:	f022 0203 	bic.w	r2, r2, #3
    bf06:	428a      	cmp	r2, r1
    bf08:	d902      	bls.n	bf10 <_free_r+0x10c>
    bf0a:	689b      	ldr	r3, [r3, #8]
    bf0c:	4298      	cmp	r0, r3
    bf0e:	d1f7      	bne.n	bf00 <_free_r+0xfc>
    bf10:	68d8      	ldr	r0, [r3, #12]
    bf12:	e9c5 3002 	strd	r3, r0, [r5, #8]
    bf16:	6085      	str	r5, [r0, #8]
    bf18:	60dd      	str	r5, [r3, #12]
    bf1a:	4630      	mov	r0, r6
    bf1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf20:	f7fe bdce 	b.w	aac0 <__malloc_unlock>
    bf24:	eb0c 0203 	add.w	r2, ip, r3
    bf28:	6852      	ldr	r2, [r2, #4]
    bf2a:	07d2      	lsls	r2, r2, #31
    bf2c:	d463      	bmi.n	bff6 <_free_r+0x1f2>
    bf2e:	440b      	add	r3, r1
    bf30:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    bf34:	60ca      	str	r2, [r1, #12]
    bf36:	6091      	str	r1, [r2, #8]
    bf38:	f043 0201 	orr.w	r2, r3, #1
    bf3c:	606a      	str	r2, [r5, #4]
    bf3e:	4630      	mov	r0, r6
    bf40:	50eb      	str	r3, [r5, r3]
    bf42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bf46:	f7fe bdbb 	b.w	aac0 <__malloc_unlock>
    bf4a:	440b      	add	r3, r1
    bf4c:	07d1      	lsls	r1, r2, #31
    bf4e:	d407      	bmi.n	bf60 <_free_r+0x15c>
    bf50:	f854 2c08 	ldr.w	r2, [r4, #-8]
    bf54:	1aad      	subs	r5, r5, r2
    bf56:	4413      	add	r3, r2
    bf58:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    bf5c:	60ca      	str	r2, [r1, #12]
    bf5e:	6091      	str	r1, [r2, #8]
    bf60:	f043 0201 	orr.w	r2, r3, #1
    bf64:	606a      	str	r2, [r5, #4]
    bf66:	4a28      	ldr	r2, [pc, #160]	; (c008 <_free_r+0x204>)
    bf68:	60bd      	str	r5, [r7, #8]
    bf6a:	6812      	ldr	r2, [r2, #0]
    bf6c:	429a      	cmp	r2, r3
    bf6e:	d893      	bhi.n	be98 <_free_r+0x94>
    bf70:	4b26      	ldr	r3, [pc, #152]	; (c00c <_free_r+0x208>)
    bf72:	4630      	mov	r0, r6
    bf74:	6819      	ldr	r1, [r3, #0]
    bf76:	f7ff fef5 	bl	bd64 <_malloc_trim_r>
    bf7a:	e78d      	b.n	be98 <_free_r+0x94>
    bf7c:	2b14      	cmp	r3, #20
    bf7e:	d90a      	bls.n	bf96 <_free_r+0x192>
    bf80:	2b54      	cmp	r3, #84	; 0x54
    bf82:	d81f      	bhi.n	bfc4 <_free_r+0x1c0>
    bf84:	0b0b      	lsrs	r3, r1, #12
    bf86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    bf8a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    bf8e:	00c3      	lsls	r3, r0, #3
    bf90:	e7b1      	b.n	bef6 <_free_r+0xf2>
    bf92:	4419      	add	r1, r3
    bf94:	e78d      	b.n	beb2 <_free_r+0xae>
    bf96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    bf9a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    bf9e:	00c3      	lsls	r3, r0, #3
    bfa0:	e7a9      	b.n	bef6 <_free_r+0xf2>
    bfa2:	f041 0301 	orr.w	r3, r1, #1
    bfa6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    bfaa:	e9c5 0002 	strd	r0, r0, [r5, #8]
    bfae:	606b      	str	r3, [r5, #4]
    bfb0:	5069      	str	r1, [r5, r1]
    bfb2:	e771      	b.n	be98 <_free_r+0x94>
    bfb4:	6879      	ldr	r1, [r7, #4]
    bfb6:	1092      	asrs	r2, r2, #2
    bfb8:	2401      	movs	r4, #1
    bfba:	fa04 f202 	lsl.w	r2, r4, r2
    bfbe:	430a      	orrs	r2, r1
    bfc0:	607a      	str	r2, [r7, #4]
    bfc2:	e7a6      	b.n	bf12 <_free_r+0x10e>
    bfc4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    bfc8:	d806      	bhi.n	bfd8 <_free_r+0x1d4>
    bfca:	0bcb      	lsrs	r3, r1, #15
    bfcc:	f103 0078 	add.w	r0, r3, #120	; 0x78
    bfd0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    bfd4:	00c3      	lsls	r3, r0, #3
    bfd6:	e78e      	b.n	bef6 <_free_r+0xf2>
    bfd8:	f240 5254 	movw	r2, #1364	; 0x554
    bfdc:	4293      	cmp	r3, r2
    bfde:	d806      	bhi.n	bfee <_free_r+0x1ea>
    bfe0:	0c8b      	lsrs	r3, r1, #18
    bfe2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    bfe6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    bfea:	00c3      	lsls	r3, r0, #3
    bfec:	e783      	b.n	bef6 <_free_r+0xf2>
    bfee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    bff2:	227e      	movs	r2, #126	; 0x7e
    bff4:	e77f      	b.n	bef6 <_free_r+0xf2>
    bff6:	f041 0301 	orr.w	r3, r1, #1
    bffa:	606b      	str	r3, [r5, #4]
    bffc:	f8cc 1000 	str.w	r1, [ip]
    c000:	e74a      	b.n	be98 <_free_r+0x94>
    c002:	bf00      	nop
    c004:	200044e0 	.word	0x200044e0
    c008:	200048ec 	.word	0x200048ec
    c00c:	20005288 	.word	0x20005288

0000c010 <__ascii_mbtowc>:
    c010:	b082      	sub	sp, #8
    c012:	b149      	cbz	r1, c028 <__ascii_mbtowc+0x18>
    c014:	b15a      	cbz	r2, c02e <__ascii_mbtowc+0x1e>
    c016:	b16b      	cbz	r3, c034 <__ascii_mbtowc+0x24>
    c018:	7813      	ldrb	r3, [r2, #0]
    c01a:	600b      	str	r3, [r1, #0]
    c01c:	7812      	ldrb	r2, [r2, #0]
    c01e:	1e10      	subs	r0, r2, #0
    c020:	bf18      	it	ne
    c022:	2001      	movne	r0, #1
    c024:	b002      	add	sp, #8
    c026:	4770      	bx	lr
    c028:	a901      	add	r1, sp, #4
    c02a:	2a00      	cmp	r2, #0
    c02c:	d1f3      	bne.n	c016 <__ascii_mbtowc+0x6>
    c02e:	4610      	mov	r0, r2
    c030:	b002      	add	sp, #8
    c032:	4770      	bx	lr
    c034:	f06f 0001 	mvn.w	r0, #1
    c038:	e7f4      	b.n	c024 <__ascii_mbtowc+0x14>
    c03a:	bf00      	nop

0000c03c <_Balloc>:
    c03c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c03e:	b570      	push	{r4, r5, r6, lr}
    c040:	4605      	mov	r5, r0
    c042:	460c      	mov	r4, r1
    c044:	b14b      	cbz	r3, c05a <_Balloc+0x1e>
    c046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c04a:	b180      	cbz	r0, c06e <_Balloc+0x32>
    c04c:	6802      	ldr	r2, [r0, #0]
    c04e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c052:	2300      	movs	r3, #0
    c054:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c058:	bd70      	pop	{r4, r5, r6, pc}
    c05a:	2221      	movs	r2, #33	; 0x21
    c05c:	2104      	movs	r1, #4
    c05e:	f002 fb33 	bl	e6c8 <_calloc_r>
    c062:	4603      	mov	r3, r0
    c064:	6468      	str	r0, [r5, #68]	; 0x44
    c066:	2800      	cmp	r0, #0
    c068:	d1ed      	bne.n	c046 <_Balloc+0xa>
    c06a:	2000      	movs	r0, #0
    c06c:	bd70      	pop	{r4, r5, r6, pc}
    c06e:	2101      	movs	r1, #1
    c070:	fa01 f604 	lsl.w	r6, r1, r4
    c074:	1d72      	adds	r2, r6, #5
    c076:	0092      	lsls	r2, r2, #2
    c078:	4628      	mov	r0, r5
    c07a:	f002 fb25 	bl	e6c8 <_calloc_r>
    c07e:	2800      	cmp	r0, #0
    c080:	d0f3      	beq.n	c06a <_Balloc+0x2e>
    c082:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c086:	e7e4      	b.n	c052 <_Balloc+0x16>

0000c088 <_Bfree>:
    c088:	b131      	cbz	r1, c098 <_Bfree+0x10>
    c08a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c08c:	684a      	ldr	r2, [r1, #4]
    c08e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c092:	6008      	str	r0, [r1, #0]
    c094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c098:	4770      	bx	lr
    c09a:	bf00      	nop

0000c09c <__multadd>:
    c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0a0:	690e      	ldr	r6, [r1, #16]
    c0a2:	4680      	mov	r8, r0
    c0a4:	460f      	mov	r7, r1
    c0a6:	461d      	mov	r5, r3
    c0a8:	f101 0e14 	add.w	lr, r1, #20
    c0ac:	2000      	movs	r0, #0
    c0ae:	f8de 1000 	ldr.w	r1, [lr]
    c0b2:	b28c      	uxth	r4, r1
    c0b4:	fb02 5304 	mla	r3, r2, r4, r5
    c0b8:	0c09      	lsrs	r1, r1, #16
    c0ba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c0be:	fb02 cc01 	mla	ip, r2, r1, ip
    c0c2:	3001      	adds	r0, #1
    c0c4:	b29c      	uxth	r4, r3
    c0c6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c0ca:	4286      	cmp	r6, r0
    c0cc:	f84e 4b04 	str.w	r4, [lr], #4
    c0d0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c0d4:	dceb      	bgt.n	c0ae <__multadd+0x12>
    c0d6:	b13d      	cbz	r5, c0e8 <__multadd+0x4c>
    c0d8:	68bb      	ldr	r3, [r7, #8]
    c0da:	42b3      	cmp	r3, r6
    c0dc:	dd07      	ble.n	c0ee <__multadd+0x52>
    c0de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c0e2:	3601      	adds	r6, #1
    c0e4:	615d      	str	r5, [r3, #20]
    c0e6:	613e      	str	r6, [r7, #16]
    c0e8:	4638      	mov	r0, r7
    c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0ee:	6879      	ldr	r1, [r7, #4]
    c0f0:	4640      	mov	r0, r8
    c0f2:	3101      	adds	r1, #1
    c0f4:	f7ff ffa2 	bl	c03c <_Balloc>
    c0f8:	4604      	mov	r4, r0
    c0fa:	b1b0      	cbz	r0, c12a <__multadd+0x8e>
    c0fc:	693a      	ldr	r2, [r7, #16]
    c0fe:	3202      	adds	r2, #2
    c100:	f107 010c 	add.w	r1, r7, #12
    c104:	0092      	lsls	r2, r2, #2
    c106:	300c      	adds	r0, #12
    c108:	f7fc fc74 	bl	89f4 <memcpy>
    c10c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c110:	687a      	ldr	r2, [r7, #4]
    c112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c116:	6039      	str	r1, [r7, #0]
    c118:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c11c:	4627      	mov	r7, r4
    c11e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c122:	3601      	adds	r6, #1
    c124:	615d      	str	r5, [r3, #20]
    c126:	613e      	str	r6, [r7, #16]
    c128:	e7de      	b.n	c0e8 <__multadd+0x4c>
    c12a:	4b03      	ldr	r3, [pc, #12]	; (c138 <__multadd+0x9c>)
    c12c:	4803      	ldr	r0, [pc, #12]	; (c13c <__multadd+0xa0>)
    c12e:	4622      	mov	r2, r4
    c130:	21ba      	movs	r1, #186	; 0xba
    c132:	f002 faa9 	bl	e688 <__assert_func>
    c136:	bf00      	nop
    c138:	20000aa4 	.word	0x20000aa4
    c13c:	20000ab8 	.word	0x20000ab8

0000c140 <__hi0bits>:
    c140:	0c03      	lsrs	r3, r0, #16
    c142:	041b      	lsls	r3, r3, #16
    c144:	b9d3      	cbnz	r3, c17c <__hi0bits+0x3c>
    c146:	0400      	lsls	r0, r0, #16
    c148:	2310      	movs	r3, #16
    c14a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c14e:	bf04      	itt	eq
    c150:	0200      	lsleq	r0, r0, #8
    c152:	3308      	addeq	r3, #8
    c154:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c158:	bf04      	itt	eq
    c15a:	0100      	lsleq	r0, r0, #4
    c15c:	3304      	addeq	r3, #4
    c15e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c162:	bf04      	itt	eq
    c164:	0080      	lsleq	r0, r0, #2
    c166:	3302      	addeq	r3, #2
    c168:	2800      	cmp	r0, #0
    c16a:	db05      	blt.n	c178 <__hi0bits+0x38>
    c16c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c170:	f103 0301 	add.w	r3, r3, #1
    c174:	bf08      	it	eq
    c176:	2320      	moveq	r3, #32
    c178:	4618      	mov	r0, r3
    c17a:	4770      	bx	lr
    c17c:	2300      	movs	r3, #0
    c17e:	e7e4      	b.n	c14a <__hi0bits+0xa>

0000c180 <__lo0bits>:
    c180:	6803      	ldr	r3, [r0, #0]
    c182:	f013 0207 	ands.w	r2, r3, #7
    c186:	d008      	beq.n	c19a <__lo0bits+0x1a>
    c188:	07d9      	lsls	r1, r3, #31
    c18a:	d41f      	bmi.n	c1cc <__lo0bits+0x4c>
    c18c:	079a      	lsls	r2, r3, #30
    c18e:	d522      	bpl.n	c1d6 <__lo0bits+0x56>
    c190:	085b      	lsrs	r3, r3, #1
    c192:	6003      	str	r3, [r0, #0]
    c194:	2201      	movs	r2, #1
    c196:	4610      	mov	r0, r2
    c198:	4770      	bx	lr
    c19a:	b299      	uxth	r1, r3
    c19c:	b909      	cbnz	r1, c1a2 <__lo0bits+0x22>
    c19e:	0c1b      	lsrs	r3, r3, #16
    c1a0:	2210      	movs	r2, #16
    c1a2:	b2d9      	uxtb	r1, r3
    c1a4:	b909      	cbnz	r1, c1aa <__lo0bits+0x2a>
    c1a6:	3208      	adds	r2, #8
    c1a8:	0a1b      	lsrs	r3, r3, #8
    c1aa:	0719      	lsls	r1, r3, #28
    c1ac:	bf04      	itt	eq
    c1ae:	091b      	lsreq	r3, r3, #4
    c1b0:	3204      	addeq	r2, #4
    c1b2:	0799      	lsls	r1, r3, #30
    c1b4:	bf04      	itt	eq
    c1b6:	089b      	lsreq	r3, r3, #2
    c1b8:	3202      	addeq	r2, #2
    c1ba:	07d9      	lsls	r1, r3, #31
    c1bc:	d403      	bmi.n	c1c6 <__lo0bits+0x46>
    c1be:	085b      	lsrs	r3, r3, #1
    c1c0:	f102 0201 	add.w	r2, r2, #1
    c1c4:	d005      	beq.n	c1d2 <__lo0bits+0x52>
    c1c6:	6003      	str	r3, [r0, #0]
    c1c8:	4610      	mov	r0, r2
    c1ca:	4770      	bx	lr
    c1cc:	2200      	movs	r2, #0
    c1ce:	4610      	mov	r0, r2
    c1d0:	4770      	bx	lr
    c1d2:	2220      	movs	r2, #32
    c1d4:	e7df      	b.n	c196 <__lo0bits+0x16>
    c1d6:	089b      	lsrs	r3, r3, #2
    c1d8:	2202      	movs	r2, #2
    c1da:	6003      	str	r3, [r0, #0]
    c1dc:	4610      	mov	r0, r2
    c1de:	4770      	bx	lr

0000c1e0 <__i2b>:
    c1e0:	b538      	push	{r3, r4, r5, lr}
    c1e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c1e4:	4604      	mov	r4, r0
    c1e6:	460d      	mov	r5, r1
    c1e8:	b14b      	cbz	r3, c1fe <__i2b+0x1e>
    c1ea:	6858      	ldr	r0, [r3, #4]
    c1ec:	b1b0      	cbz	r0, c21c <__i2b+0x3c>
    c1ee:	6802      	ldr	r2, [r0, #0]
    c1f0:	605a      	str	r2, [r3, #4]
    c1f2:	2200      	movs	r2, #0
    c1f4:	2301      	movs	r3, #1
    c1f6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c1fa:	60c2      	str	r2, [r0, #12]
    c1fc:	bd38      	pop	{r3, r4, r5, pc}
    c1fe:	2221      	movs	r2, #33	; 0x21
    c200:	2104      	movs	r1, #4
    c202:	f002 fa61 	bl	e6c8 <_calloc_r>
    c206:	4603      	mov	r3, r0
    c208:	6460      	str	r0, [r4, #68]	; 0x44
    c20a:	2800      	cmp	r0, #0
    c20c:	d1ed      	bne.n	c1ea <__i2b+0xa>
    c20e:	4b09      	ldr	r3, [pc, #36]	; (c234 <__i2b+0x54>)
    c210:	4809      	ldr	r0, [pc, #36]	; (c238 <__i2b+0x58>)
    c212:	2200      	movs	r2, #0
    c214:	f240 1145 	movw	r1, #325	; 0x145
    c218:	f002 fa36 	bl	e688 <__assert_func>
    c21c:	221c      	movs	r2, #28
    c21e:	2101      	movs	r1, #1
    c220:	4620      	mov	r0, r4
    c222:	f002 fa51 	bl	e6c8 <_calloc_r>
    c226:	2800      	cmp	r0, #0
    c228:	d0f1      	beq.n	c20e <__i2b+0x2e>
    c22a:	2201      	movs	r2, #1
    c22c:	2302      	movs	r3, #2
    c22e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c232:	e7de      	b.n	c1f2 <__i2b+0x12>
    c234:	20000aa4 	.word	0x20000aa4
    c238:	20000ab8 	.word	0x20000ab8

0000c23c <__multiply>:
    c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c240:	690e      	ldr	r6, [r1, #16]
    c242:	6915      	ldr	r5, [r2, #16]
    c244:	42ae      	cmp	r6, r5
    c246:	b085      	sub	sp, #20
    c248:	4688      	mov	r8, r1
    c24a:	4614      	mov	r4, r2
    c24c:	db05      	blt.n	c25a <__multiply+0x1e>
    c24e:	462a      	mov	r2, r5
    c250:	4623      	mov	r3, r4
    c252:	4635      	mov	r5, r6
    c254:	460c      	mov	r4, r1
    c256:	4616      	mov	r6, r2
    c258:	4698      	mov	r8, r3
    c25a:	68a3      	ldr	r3, [r4, #8]
    c25c:	6861      	ldr	r1, [r4, #4]
    c25e:	19af      	adds	r7, r5, r6
    c260:	42bb      	cmp	r3, r7
    c262:	bfb8      	it	lt
    c264:	3101      	addlt	r1, #1
    c266:	f7ff fee9 	bl	c03c <_Balloc>
    c26a:	9001      	str	r0, [sp, #4]
    c26c:	2800      	cmp	r0, #0
    c26e:	f000 8087 	beq.w	c380 <__multiply+0x144>
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	f103 0914 	add.w	r9, r3, #20
    c278:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c27c:	45d1      	cmp	r9, sl
    c27e:	d205      	bcs.n	c28c <__multiply+0x50>
    c280:	464b      	mov	r3, r9
    c282:	2200      	movs	r2, #0
    c284:	f843 2b04 	str.w	r2, [r3], #4
    c288:	459a      	cmp	sl, r3
    c28a:	d8fb      	bhi.n	c284 <__multiply+0x48>
    c28c:	f108 0814 	add.w	r8, r8, #20
    c290:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    c294:	f104 0314 	add.w	r3, r4, #20
    c298:	45d8      	cmp	r8, fp
    c29a:	461a      	mov	r2, r3
    c29c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    c2a0:	d25f      	bcs.n	c362 <__multiply+0x126>
    c2a2:	1b2b      	subs	r3, r5, r4
    c2a4:	3b15      	subs	r3, #21
    c2a6:	f023 0303 	bic.w	r3, r3, #3
    c2aa:	3304      	adds	r3, #4
    c2ac:	3415      	adds	r4, #21
    c2ae:	42a5      	cmp	r5, r4
    c2b0:	bf38      	it	cc
    c2b2:	2304      	movcc	r3, #4
    c2b4:	e9cd a702 	strd	sl, r7, [sp, #8]
    c2b8:	46ac      	mov	ip, r5
    c2ba:	461f      	mov	r7, r3
    c2bc:	4692      	mov	sl, r2
    c2be:	e005      	b.n	c2cc <__multiply+0x90>
    c2c0:	0c09      	lsrs	r1, r1, #16
    c2c2:	d129      	bne.n	c318 <__multiply+0xdc>
    c2c4:	45c3      	cmp	fp, r8
    c2c6:	f109 0904 	add.w	r9, r9, #4
    c2ca:	d948      	bls.n	c35e <__multiply+0x122>
    c2cc:	f858 1b04 	ldr.w	r1, [r8], #4
    c2d0:	b28d      	uxth	r5, r1
    c2d2:	2d00      	cmp	r5, #0
    c2d4:	d0f4      	beq.n	c2c0 <__multiply+0x84>
    c2d6:	4656      	mov	r6, sl
    c2d8:	464c      	mov	r4, r9
    c2da:	2300      	movs	r3, #0
    c2dc:	f856 1b04 	ldr.w	r1, [r6], #4
    c2e0:	6822      	ldr	r2, [r4, #0]
    c2e2:	fa1f fe81 	uxth.w	lr, r1
    c2e6:	b290      	uxth	r0, r2
    c2e8:	0c09      	lsrs	r1, r1, #16
    c2ea:	fb05 000e 	mla	r0, r5, lr, r0
    c2ee:	0c12      	lsrs	r2, r2, #16
    c2f0:	4403      	add	r3, r0
    c2f2:	fb05 2201 	mla	r2, r5, r1, r2
    c2f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c2fa:	b29b      	uxth	r3, r3
    c2fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c300:	45b4      	cmp	ip, r6
    c302:	f844 3b04 	str.w	r3, [r4], #4
    c306:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c30a:	d8e7      	bhi.n	c2dc <__multiply+0xa0>
    c30c:	f849 3007 	str.w	r3, [r9, r7]
    c310:	f858 1c04 	ldr.w	r1, [r8, #-4]
    c314:	0c09      	lsrs	r1, r1, #16
    c316:	d0d5      	beq.n	c2c4 <__multiply+0x88>
    c318:	f8d9 3000 	ldr.w	r3, [r9]
    c31c:	4650      	mov	r0, sl
    c31e:	461a      	mov	r2, r3
    c320:	464c      	mov	r4, r9
    c322:	2600      	movs	r6, #0
    c324:	8805      	ldrh	r5, [r0, #0]
    c326:	0c12      	lsrs	r2, r2, #16
    c328:	fb01 2205 	mla	r2, r1, r5, r2
    c32c:	4416      	add	r6, r2
    c32e:	b29b      	uxth	r3, r3
    c330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    c334:	f844 3b04 	str.w	r3, [r4], #4
    c338:	f850 5b04 	ldr.w	r5, [r0], #4
    c33c:	6822      	ldr	r2, [r4, #0]
    c33e:	0c2d      	lsrs	r5, r5, #16
    c340:	b293      	uxth	r3, r2
    c342:	fb01 3305 	mla	r3, r1, r5, r3
    c346:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    c34a:	4584      	cmp	ip, r0
    c34c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    c350:	d8e8      	bhi.n	c324 <__multiply+0xe8>
    c352:	45c3      	cmp	fp, r8
    c354:	f849 3007 	str.w	r3, [r9, r7]
    c358:	f109 0904 	add.w	r9, r9, #4
    c35c:	d8b6      	bhi.n	c2cc <__multiply+0x90>
    c35e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    c362:	2f00      	cmp	r7, #0
    c364:	dc02      	bgt.n	c36c <__multiply+0x130>
    c366:	e005      	b.n	c374 <__multiply+0x138>
    c368:	3f01      	subs	r7, #1
    c36a:	d003      	beq.n	c374 <__multiply+0x138>
    c36c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    c370:	2b00      	cmp	r3, #0
    c372:	d0f9      	beq.n	c368 <__multiply+0x12c>
    c374:	9b01      	ldr	r3, [sp, #4]
    c376:	4618      	mov	r0, r3
    c378:	611f      	str	r7, [r3, #16]
    c37a:	b005      	add	sp, #20
    c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c380:	4b03      	ldr	r3, [pc, #12]	; (c390 <__multiply+0x154>)
    c382:	4804      	ldr	r0, [pc, #16]	; (c394 <__multiply+0x158>)
    c384:	9a01      	ldr	r2, [sp, #4]
    c386:	f44f 71b1 	mov.w	r1, #354	; 0x162
    c38a:	f002 f97d 	bl	e688 <__assert_func>
    c38e:	bf00      	nop
    c390:	20000aa4 	.word	0x20000aa4
    c394:	20000ab8 	.word	0x20000ab8

0000c398 <__pow5mult>:
    c398:	f012 0303 	ands.w	r3, r2, #3
    c39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a0:	4614      	mov	r4, r2
    c3a2:	4606      	mov	r6, r0
    c3a4:	d132      	bne.n	c40c <__pow5mult+0x74>
    c3a6:	460d      	mov	r5, r1
    c3a8:	10a4      	asrs	r4, r4, #2
    c3aa:	d020      	beq.n	c3ee <__pow5mult+0x56>
    c3ac:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    c3b0:	f1b8 0f00 	cmp.w	r8, #0
    c3b4:	d033      	beq.n	c41e <__pow5mult+0x86>
    c3b6:	07e3      	lsls	r3, r4, #31
    c3b8:	f04f 0700 	mov.w	r7, #0
    c3bc:	d407      	bmi.n	c3ce <__pow5mult+0x36>
    c3be:	1064      	asrs	r4, r4, #1
    c3c0:	d015      	beq.n	c3ee <__pow5mult+0x56>
    c3c2:	f8d8 0000 	ldr.w	r0, [r8]
    c3c6:	b1a8      	cbz	r0, c3f4 <__pow5mult+0x5c>
    c3c8:	4680      	mov	r8, r0
    c3ca:	07e3      	lsls	r3, r4, #31
    c3cc:	d5f7      	bpl.n	c3be <__pow5mult+0x26>
    c3ce:	4642      	mov	r2, r8
    c3d0:	4629      	mov	r1, r5
    c3d2:	4630      	mov	r0, r6
    c3d4:	f7ff ff32 	bl	c23c <__multiply>
    c3d8:	b1b5      	cbz	r5, c408 <__pow5mult+0x70>
    c3da:	6869      	ldr	r1, [r5, #4]
    c3dc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    c3de:	1064      	asrs	r4, r4, #1
    c3e0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c3e4:	602a      	str	r2, [r5, #0]
    c3e6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    c3ea:	4605      	mov	r5, r0
    c3ec:	d1e9      	bne.n	c3c2 <__pow5mult+0x2a>
    c3ee:	4628      	mov	r0, r5
    c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3f4:	4642      	mov	r2, r8
    c3f6:	4641      	mov	r1, r8
    c3f8:	4630      	mov	r0, r6
    c3fa:	f7ff ff1f 	bl	c23c <__multiply>
    c3fe:	f8c8 0000 	str.w	r0, [r8]
    c402:	6007      	str	r7, [r0, #0]
    c404:	4680      	mov	r8, r0
    c406:	e7e0      	b.n	c3ca <__pow5mult+0x32>
    c408:	4605      	mov	r5, r0
    c40a:	e7d8      	b.n	c3be <__pow5mult+0x26>
    c40c:	3b01      	subs	r3, #1
    c40e:	4a0f      	ldr	r2, [pc, #60]	; (c44c <__pow5mult+0xb4>)
    c410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c414:	2300      	movs	r3, #0
    c416:	f7ff fe41 	bl	c09c <__multadd>
    c41a:	4605      	mov	r5, r0
    c41c:	e7c4      	b.n	c3a8 <__pow5mult+0x10>
    c41e:	2101      	movs	r1, #1
    c420:	4630      	mov	r0, r6
    c422:	f7ff fe0b 	bl	c03c <_Balloc>
    c426:	4680      	mov	r8, r0
    c428:	b140      	cbz	r0, c43c <__pow5mult+0xa4>
    c42a:	2301      	movs	r3, #1
    c42c:	f240 2271 	movw	r2, #625	; 0x271
    c430:	e9c0 3204 	strd	r3, r2, [r0, #16]
    c434:	2300      	movs	r3, #0
    c436:	6430      	str	r0, [r6, #64]	; 0x40
    c438:	6003      	str	r3, [r0, #0]
    c43a:	e7bc      	b.n	c3b6 <__pow5mult+0x1e>
    c43c:	4b04      	ldr	r3, [pc, #16]	; (c450 <__pow5mult+0xb8>)
    c43e:	4805      	ldr	r0, [pc, #20]	; (c454 <__pow5mult+0xbc>)
    c440:	4642      	mov	r2, r8
    c442:	f240 1145 	movw	r1, #325	; 0x145
    c446:	f002 f91f 	bl	e688 <__assert_func>
    c44a:	bf00      	nop
    c44c:	20001074 	.word	0x20001074
    c450:	20000aa4 	.word	0x20000aa4
    c454:	20000ab8 	.word	0x20000ab8

0000c458 <__lshift>:
    c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c45c:	460d      	mov	r5, r1
    c45e:	4614      	mov	r4, r2
    c460:	692f      	ldr	r7, [r5, #16]
    c462:	68ab      	ldr	r3, [r5, #8]
    c464:	6849      	ldr	r1, [r1, #4]
    c466:	eb07 1762 	add.w	r7, r7, r2, asr #5
    c46a:	1c7e      	adds	r6, r7, #1
    c46c:	429e      	cmp	r6, r3
    c46e:	4680      	mov	r8, r0
    c470:	ea4f 1962 	mov.w	r9, r2, asr #5
    c474:	dd04      	ble.n	c480 <__lshift+0x28>
    c476:	005b      	lsls	r3, r3, #1
    c478:	429e      	cmp	r6, r3
    c47a:	f101 0101 	add.w	r1, r1, #1
    c47e:	dcfa      	bgt.n	c476 <__lshift+0x1e>
    c480:	4640      	mov	r0, r8
    c482:	f7ff fddb 	bl	c03c <_Balloc>
    c486:	4684      	mov	ip, r0
    c488:	2800      	cmp	r0, #0
    c48a:	d052      	beq.n	c532 <__lshift+0xda>
    c48c:	f1b9 0f00 	cmp.w	r9, #0
    c490:	f100 0214 	add.w	r2, r0, #20
    c494:	dd0e      	ble.n	c4b4 <__lshift+0x5c>
    c496:	f109 0105 	add.w	r1, r9, #5
    c49a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    c49e:	4613      	mov	r3, r2
    c4a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c4a4:	2000      	movs	r0, #0
    c4a6:	f843 0b04 	str.w	r0, [r3], #4
    c4aa:	428b      	cmp	r3, r1
    c4ac:	d1fb      	bne.n	c4a6 <__lshift+0x4e>
    c4ae:	f1ae 0314 	sub.w	r3, lr, #20
    c4b2:	441a      	add	r2, r3
    c4b4:	6929      	ldr	r1, [r5, #16]
    c4b6:	f105 0314 	add.w	r3, r5, #20
    c4ba:	f014 0e1f 	ands.w	lr, r4, #31
    c4be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c4c2:	d02e      	beq.n	c522 <__lshift+0xca>
    c4c4:	f1ce 0920 	rsb	r9, lr, #32
    c4c8:	4610      	mov	r0, r2
    c4ca:	f04f 0a00 	mov.w	sl, #0
    c4ce:	681c      	ldr	r4, [r3, #0]
    c4d0:	fa04 f40e 	lsl.w	r4, r4, lr
    c4d4:	ea44 040a 	orr.w	r4, r4, sl
    c4d8:	f840 4b04 	str.w	r4, [r0], #4
    c4dc:	f853 4b04 	ldr.w	r4, [r3], #4
    c4e0:	4299      	cmp	r1, r3
    c4e2:	fa24 fa09 	lsr.w	sl, r4, r9
    c4e6:	d8f2      	bhi.n	c4ce <__lshift+0x76>
    c4e8:	1b4b      	subs	r3, r1, r5
    c4ea:	3b15      	subs	r3, #21
    c4ec:	f023 0303 	bic.w	r3, r3, #3
    c4f0:	3304      	adds	r3, #4
    c4f2:	f105 0015 	add.w	r0, r5, #21
    c4f6:	4281      	cmp	r1, r0
    c4f8:	bf38      	it	cc
    c4fa:	2304      	movcc	r3, #4
    c4fc:	f1ba 0f00 	cmp.w	sl, #0
    c500:	bf18      	it	ne
    c502:	4637      	movne	r7, r6
    c504:	f842 a003 	str.w	sl, [r2, r3]
    c508:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c50c:	686a      	ldr	r2, [r5, #4]
    c50e:	f8cc 7010 	str.w	r7, [ip, #16]
    c512:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c516:	6029      	str	r1, [r5, #0]
    c518:	4660      	mov	r0, ip
    c51a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c522:	3a04      	subs	r2, #4
    c524:	f853 0b04 	ldr.w	r0, [r3], #4
    c528:	f842 0f04 	str.w	r0, [r2, #4]!
    c52c:	4299      	cmp	r1, r3
    c52e:	d8f9      	bhi.n	c524 <__lshift+0xcc>
    c530:	e7ea      	b.n	c508 <__lshift+0xb0>
    c532:	4b03      	ldr	r3, [pc, #12]	; (c540 <__lshift+0xe8>)
    c534:	4803      	ldr	r0, [pc, #12]	; (c544 <__lshift+0xec>)
    c536:	4662      	mov	r2, ip
    c538:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    c53c:	f002 f8a4 	bl	e688 <__assert_func>
    c540:	20000aa4 	.word	0x20000aa4
    c544:	20000ab8 	.word	0x20000ab8

0000c548 <__mcmp>:
    c548:	690b      	ldr	r3, [r1, #16]
    c54a:	4684      	mov	ip, r0
    c54c:	6900      	ldr	r0, [r0, #16]
    c54e:	1ac0      	subs	r0, r0, r3
    c550:	d116      	bne.n	c580 <__mcmp+0x38>
    c552:	f10c 0c14 	add.w	ip, ip, #20
    c556:	3114      	adds	r1, #20
    c558:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    c55c:	b410      	push	{r4}
    c55e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    c562:	e001      	b.n	c568 <__mcmp+0x20>
    c564:	4594      	cmp	ip, r2
    c566:	d208      	bcs.n	c57a <__mcmp+0x32>
    c568:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c56c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c570:	428c      	cmp	r4, r1
    c572:	d0f7      	beq.n	c564 <__mcmp+0x1c>
    c574:	d205      	bcs.n	c582 <__mcmp+0x3a>
    c576:	f04f 30ff 	mov.w	r0, #4294967295
    c57a:	f85d 4b04 	ldr.w	r4, [sp], #4
    c57e:	4770      	bx	lr
    c580:	4770      	bx	lr
    c582:	2001      	movs	r0, #1
    c584:	f85d 4b04 	ldr.w	r4, [sp], #4
    c588:	4770      	bx	lr
    c58a:	bf00      	nop

0000c58c <__mdiff>:
    c58c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c590:	690f      	ldr	r7, [r1, #16]
    c592:	6913      	ldr	r3, [r2, #16]
    c594:	1aff      	subs	r7, r7, r3
    c596:	2f00      	cmp	r7, #0
    c598:	460e      	mov	r6, r1
    c59a:	4690      	mov	r8, r2
    c59c:	d17f      	bne.n	c69e <__mdiff+0x112>
    c59e:	f101 0514 	add.w	r5, r1, #20
    c5a2:	3214      	adds	r2, #20
    c5a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c5a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c5ac:	e001      	b.n	c5b2 <__mdiff+0x26>
    c5ae:	429d      	cmp	r5, r3
    c5b0:	d278      	bcs.n	c6a4 <__mdiff+0x118>
    c5b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c5b6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c5ba:	42a1      	cmp	r1, r4
    c5bc:	d0f7      	beq.n	c5ae <__mdiff+0x22>
    c5be:	d369      	bcc.n	c694 <__mdiff+0x108>
    c5c0:	6871      	ldr	r1, [r6, #4]
    c5c2:	f7ff fd3b 	bl	c03c <_Balloc>
    c5c6:	4681      	mov	r9, r0
    c5c8:	2800      	cmp	r0, #0
    c5ca:	d077      	beq.n	c6bc <__mdiff+0x130>
    c5cc:	6935      	ldr	r5, [r6, #16]
    c5ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
    c5d2:	60c7      	str	r7, [r0, #12]
    c5d4:	f108 0e14 	add.w	lr, r8, #20
    c5d8:	f106 0014 	add.w	r0, r6, #20
    c5dc:	f109 0a14 	add.w	sl, r9, #20
    c5e0:	f106 0110 	add.w	r1, r6, #16
    c5e4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    c5e8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    c5ec:	4656      	mov	r6, sl
    c5ee:	f04f 0c00 	mov.w	ip, #0
    c5f2:	f85e 4b04 	ldr.w	r4, [lr], #4
    c5f6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    c5fa:	b2a3      	uxth	r3, r4
    c5fc:	fa1c fc8b 	uxtah	ip, ip, fp
    c600:	ebac 0303 	sub.w	r3, ip, r3
    c604:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c608:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    c60c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    c610:	b29b      	uxth	r3, r3
    c612:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c616:	4572      	cmp	r2, lr
    c618:	f846 3b04 	str.w	r3, [r6], #4
    c61c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    c620:	d8e7      	bhi.n	c5f2 <__mdiff+0x66>
    c622:	eba2 0108 	sub.w	r1, r2, r8
    c626:	3915      	subs	r1, #21
    c628:	f108 0815 	add.w	r8, r8, #21
    c62c:	4542      	cmp	r2, r8
    c62e:	f021 0403 	bic.w	r4, r1, #3
    c632:	f104 0404 	add.w	r4, r4, #4
    c636:	bf38      	it	cc
    c638:	2404      	movcc	r4, #4
    c63a:	4420      	add	r0, r4
    c63c:	f021 0203 	bic.w	r2, r1, #3
    c640:	bf38      	it	cc
    c642:	2200      	movcc	r2, #0
    c644:	4287      	cmp	r7, r0
    c646:	4452      	add	r2, sl
    c648:	4454      	add	r4, sl
    c64a:	d918      	bls.n	c67e <__mdiff+0xf2>
    c64c:	4626      	mov	r6, r4
    c64e:	4601      	mov	r1, r0
    c650:	f851 3b04 	ldr.w	r3, [r1], #4
    c654:	fa1c fc83 	uxtah	ip, ip, r3
    c658:	ea4f 422c 	mov.w	r2, ip, asr #16
    c65c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c660:	fa1f fc8c 	uxth.w	ip, ip
    c664:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    c668:	428f      	cmp	r7, r1
    c66a:	f846 3b04 	str.w	r3, [r6], #4
    c66e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    c672:	d8ed      	bhi.n	c650 <__mdiff+0xc4>
    c674:	3f01      	subs	r7, #1
    c676:	1a3f      	subs	r7, r7, r0
    c678:	f027 0703 	bic.w	r7, r7, #3
    c67c:	19e2      	adds	r2, r4, r7
    c67e:	b923      	cbnz	r3, c68a <__mdiff+0xfe>
    c680:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    c684:	3d01      	subs	r5, #1
    c686:	2b00      	cmp	r3, #0
    c688:	d0fa      	beq.n	c680 <__mdiff+0xf4>
    c68a:	f8c9 5010 	str.w	r5, [r9, #16]
    c68e:	4648      	mov	r0, r9
    c690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c694:	4633      	mov	r3, r6
    c696:	2701      	movs	r7, #1
    c698:	4646      	mov	r6, r8
    c69a:	4698      	mov	r8, r3
    c69c:	e790      	b.n	c5c0 <__mdiff+0x34>
    c69e:	dbf9      	blt.n	c694 <__mdiff+0x108>
    c6a0:	2700      	movs	r7, #0
    c6a2:	e78d      	b.n	c5c0 <__mdiff+0x34>
    c6a4:	2100      	movs	r1, #0
    c6a6:	f7ff fcc9 	bl	c03c <_Balloc>
    c6aa:	4681      	mov	r9, r0
    c6ac:	b168      	cbz	r0, c6ca <__mdiff+0x13e>
    c6ae:	2201      	movs	r2, #1
    c6b0:	2300      	movs	r3, #0
    c6b2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    c6b6:	4648      	mov	r0, r9
    c6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6bc:	4b06      	ldr	r3, [pc, #24]	; (c6d8 <__mdiff+0x14c>)
    c6be:	4807      	ldr	r0, [pc, #28]	; (c6dc <__mdiff+0x150>)
    c6c0:	464a      	mov	r2, r9
    c6c2:	f240 2145 	movw	r1, #581	; 0x245
    c6c6:	f001 ffdf 	bl	e688 <__assert_func>
    c6ca:	4b03      	ldr	r3, [pc, #12]	; (c6d8 <__mdiff+0x14c>)
    c6cc:	4803      	ldr	r0, [pc, #12]	; (c6dc <__mdiff+0x150>)
    c6ce:	464a      	mov	r2, r9
    c6d0:	f240 2137 	movw	r1, #567	; 0x237
    c6d4:	f001 ffd8 	bl	e688 <__assert_func>
    c6d8:	20000aa4 	.word	0x20000aa4
    c6dc:	20000ab8 	.word	0x20000ab8

0000c6e0 <__d2b>:
    c6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c6e4:	4688      	mov	r8, r1
    c6e6:	b083      	sub	sp, #12
    c6e8:	2101      	movs	r1, #1
    c6ea:	ec57 6b10 	vmov	r6, r7, d0
    c6ee:	4615      	mov	r5, r2
    c6f0:	f7ff fca4 	bl	c03c <_Balloc>
    c6f4:	4604      	mov	r4, r0
    c6f6:	2800      	cmp	r0, #0
    c6f8:	d051      	beq.n	c79e <__d2b+0xbe>
    c6fa:	f3c7 590a 	ubfx	r9, r7, #20, #11
    c6fe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    c702:	f1b9 0f00 	cmp.w	r9, #0
    c706:	d001      	beq.n	c70c <__d2b+0x2c>
    c708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c70c:	2e00      	cmp	r6, #0
    c70e:	9301      	str	r3, [sp, #4]
    c710:	d118      	bne.n	c744 <__d2b+0x64>
    c712:	a801      	add	r0, sp, #4
    c714:	f7ff fd34 	bl	c180 <__lo0bits>
    c718:	9a01      	ldr	r2, [sp, #4]
    c71a:	6162      	str	r2, [r4, #20]
    c71c:	2201      	movs	r2, #1
    c71e:	f100 0320 	add.w	r3, r0, #32
    c722:	6122      	str	r2, [r4, #16]
    c724:	f1b9 0f00 	cmp.w	r9, #0
    c728:	d025      	beq.n	c776 <__d2b+0x96>
    c72a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    c72e:	eb09 0203 	add.w	r2, r9, r3
    c732:	4620      	mov	r0, r4
    c734:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    c738:	f8c8 2000 	str.w	r2, [r8]
    c73c:	602b      	str	r3, [r5, #0]
    c73e:	b003      	add	sp, #12
    c740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c744:	4668      	mov	r0, sp
    c746:	9600      	str	r6, [sp, #0]
    c748:	f7ff fd1a 	bl	c180 <__lo0bits>
    c74c:	4603      	mov	r3, r0
    c74e:	b310      	cbz	r0, c796 <__d2b+0xb6>
    c750:	e9dd 0200 	ldrd	r0, r2, [sp]
    c754:	f1c3 0120 	rsb	r1, r3, #32
    c758:	fa02 f101 	lsl.w	r1, r2, r1
    c75c:	4301      	orrs	r1, r0
    c75e:	40da      	lsrs	r2, r3
    c760:	6161      	str	r1, [r4, #20]
    c762:	9201      	str	r2, [sp, #4]
    c764:	2a00      	cmp	r2, #0
    c766:	61a2      	str	r2, [r4, #24]
    c768:	bf14      	ite	ne
    c76a:	2202      	movne	r2, #2
    c76c:	2201      	moveq	r2, #1
    c76e:	6122      	str	r2, [r4, #16]
    c770:	f1b9 0f00 	cmp.w	r9, #0
    c774:	d1d9      	bne.n	c72a <__d2b+0x4a>
    c776:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    c77a:	f8c8 3000 	str.w	r3, [r8]
    c77e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c782:	6918      	ldr	r0, [r3, #16]
    c784:	f7ff fcdc 	bl	c140 <__hi0bits>
    c788:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    c78c:	4620      	mov	r0, r4
    c78e:	602b      	str	r3, [r5, #0]
    c790:	b003      	add	sp, #12
    c792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c796:	9a00      	ldr	r2, [sp, #0]
    c798:	6162      	str	r2, [r4, #20]
    c79a:	9a01      	ldr	r2, [sp, #4]
    c79c:	e7e2      	b.n	c764 <__d2b+0x84>
    c79e:	4b03      	ldr	r3, [pc, #12]	; (c7ac <__d2b+0xcc>)
    c7a0:	4803      	ldr	r0, [pc, #12]	; (c7b0 <__d2b+0xd0>)
    c7a2:	4622      	mov	r2, r4
    c7a4:	f240 310f 	movw	r1, #783	; 0x30f
    c7a8:	f001 ff6e 	bl	e688 <__assert_func>
    c7ac:	20000aa4 	.word	0x20000aa4
    c7b0:	20000ab8 	.word	0x20000ab8

0000c7b4 <__ascii_wctomb>:
    c7b4:	b149      	cbz	r1, c7ca <__ascii_wctomb+0x16>
    c7b6:	2aff      	cmp	r2, #255	; 0xff
    c7b8:	d802      	bhi.n	c7c0 <__ascii_wctomb+0xc>
    c7ba:	700a      	strb	r2, [r1, #0]
    c7bc:	2001      	movs	r0, #1
    c7be:	4770      	bx	lr
    c7c0:	238a      	movs	r3, #138	; 0x8a
    c7c2:	6003      	str	r3, [r0, #0]
    c7c4:	f04f 30ff 	mov.w	r0, #4294967295
    c7c8:	4770      	bx	lr
    c7ca:	4608      	mov	r0, r1
    c7cc:	4770      	bx	lr
    c7ce:	bf00      	nop

0000c7d0 <_svfprintf_r>:
    c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7d4:	ed2d 8b08 	vpush	{d8-d11}
    c7d8:	b0d1      	sub	sp, #324	; 0x144
    c7da:	460c      	mov	r4, r1
    c7dc:	ee0b 1a10 	vmov	s22, r1
    c7e0:	4690      	mov	r8, r2
    c7e2:	9308      	str	r3, [sp, #32]
    c7e4:	4683      	mov	fp, r0
    c7e6:	f001 febb 	bl	e560 <_localeconv_r>
    c7ea:	6803      	ldr	r3, [r0, #0]
    c7ec:	9312      	str	r3, [sp, #72]	; 0x48
    c7ee:	4618      	mov	r0, r3
    c7f0:	f7ff fa06 	bl	bc00 <strlen>
    c7f4:	af20      	add	r7, sp, #128	; 0x80
    c7f6:	9010      	str	r0, [sp, #64]	; 0x40
    c7f8:	2208      	movs	r2, #8
    c7fa:	2100      	movs	r1, #0
    c7fc:	4638      	mov	r0, r7
    c7fe:	f7fe fea1 	bl	b544 <memset>
    c802:	89a3      	ldrh	r3, [r4, #12]
    c804:	061b      	lsls	r3, r3, #24
    c806:	d503      	bpl.n	c810 <_svfprintf_r+0x40>
    c808:	6923      	ldr	r3, [r4, #16]
    c80a:	2b00      	cmp	r3, #0
    c80c:	f000 8755 	beq.w	d6ba <_svfprintf_r+0xeea>
    c810:	2300      	movs	r3, #0
    c812:	ed9f 8b83 	vldr	d8, [pc, #524]	; ca20 <_svfprintf_r+0x250>
    c816:	ed9f 9b84 	vldr	d9, [pc, #528]	; ca28 <_svfprintf_r+0x258>
    c81a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    c81e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    c822:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    c826:	aa27      	add	r2, sp, #156	; 0x9c
    c828:	930e      	str	r3, [sp, #56]	; 0x38
    c82a:	9224      	str	r2, [sp, #144]	; 0x90
    c82c:	4692      	mov	sl, r2
    c82e:	9311      	str	r3, [sp, #68]	; 0x44
    c830:	9304      	str	r3, [sp, #16]
    c832:	4644      	mov	r4, r8
    c834:	46a1      	mov	r9, r4
    c836:	4b7e      	ldr	r3, [pc, #504]	; (ca30 <_svfprintf_r+0x260>)
    c838:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    c83c:	f7fe ff6c 	bl	b718 <__locale_mb_cur_max>
    c840:	464a      	mov	r2, r9
    c842:	4603      	mov	r3, r0
    c844:	a91c      	add	r1, sp, #112	; 0x70
    c846:	9700      	str	r7, [sp, #0]
    c848:	4658      	mov	r0, fp
    c84a:	47a8      	blx	r5
    c84c:	2800      	cmp	r0, #0
    c84e:	f000 80b0 	beq.w	c9b2 <_svfprintf_r+0x1e2>
    c852:	f2c0 80a6 	blt.w	c9a2 <_svfprintf_r+0x1d2>
    c856:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c858:	2a25      	cmp	r2, #37	; 0x25
    c85a:	4603      	mov	r3, r0
    c85c:	d001      	beq.n	c862 <_svfprintf_r+0x92>
    c85e:	4499      	add	r9, r3
    c860:	e7e9      	b.n	c836 <_svfprintf_r+0x66>
    c862:	ebb9 0504 	subs.w	r5, r9, r4
    c866:	4606      	mov	r6, r0
    c868:	f040 80a7 	bne.w	c9ba <_svfprintf_r+0x1ea>
    c86c:	2300      	movs	r3, #0
    c86e:	f04f 32ff 	mov.w	r2, #4294967295
    c872:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    c876:	4698      	mov	r8, r3
    c878:	9306      	str	r3, [sp, #24]
    c87a:	f109 0901 	add.w	r9, r9, #1
    c87e:	f899 3000 	ldrb.w	r3, [r9]
    c882:	9203      	str	r2, [sp, #12]
    c884:	252b      	movs	r5, #43	; 0x2b
    c886:	2620      	movs	r6, #32
    c888:	f109 0901 	add.w	r9, r9, #1
    c88c:	f1a3 0220 	sub.w	r2, r3, #32
    c890:	2a5a      	cmp	r2, #90	; 0x5a
    c892:	f200 80cf 	bhi.w	ca34 <_svfprintf_r+0x264>
    c896:	e8df f012 	tbh	[pc, r2, lsl #1]
    c89a:	02e8      	.short	0x02e8
    c89c:	00cd00cd 	.word	0x00cd00cd
    c8a0:	00cd02e3 	.word	0x00cd02e3
    c8a4:	00cd00cd 	.word	0x00cd00cd
    c8a8:	00cd006a 	.word	0x00cd006a
    c8ac:	020500cd 	.word	0x020500cd
    c8b0:	00cd0284 	.word	0x00cd0284
    c8b4:	02c90210 	.word	0x02c90210
    c8b8:	02bd00cd 	.word	0x02bd00cd
    c8bc:	005b005b 	.word	0x005b005b
    c8c0:	005b005b 	.word	0x005b005b
    c8c4:	005b005b 	.word	0x005b005b
    c8c8:	005b005b 	.word	0x005b005b
    c8cc:	00cd005b 	.word	0x00cd005b
    c8d0:	00cd00cd 	.word	0x00cd00cd
    c8d4:	00cd00cd 	.word	0x00cd00cd
    c8d8:	00cd00cd 	.word	0x00cd00cd
    c8dc:	00cd0153 	.word	0x00cd0153
    c8e0:	021a0183 	.word	0x021a0183
    c8e4:	01530153 	.word	0x01530153
    c8e8:	00cd0153 	.word	0x00cd0153
    c8ec:	00cd00cd 	.word	0x00cd00cd
    c8f0:	021500cd 	.word	0x021500cd
    c8f4:	00cd00cd 	.word	0x00cd00cd
    c8f8:	00cd0296 	.word	0x00cd0296
    c8fc:	00cd00cd 	.word	0x00cd00cd
    c900:	00cd01ab 	.word	0x00cd01ab
    c904:	00cd02aa 	.word	0x00cd02aa
    c908:	06e300cd 	.word	0x06e300cd
    c90c:	00cd00cd 	.word	0x00cd00cd
    c910:	00cd00cd 	.word	0x00cd00cd
    c914:	00cd00cd 	.word	0x00cd00cd
    c918:	00cd00cd 	.word	0x00cd00cd
    c91c:	00cd0153 	.word	0x00cd0153
    c920:	01de0183 	.word	0x01de0183
    c924:	01530153 	.word	0x01530153
    c928:	02770153 	.word	0x02770153
    c92c:	007f01de 	.word	0x007f01de
    c930:	028900cd 	.word	0x028900cd
    c934:	025f00cd 	.word	0x025f00cd
    c938:	022f06e0 	.word	0x022f06e0
    c93c:	00cd007f 	.word	0x00cd007f
    c940:	007c01ab 	.word	0x007c01ab
    c944:	00cd06b8 	.word	0x00cd06b8
    c948:	06bd00cd 	.word	0x06bd00cd
    c94c:	007c00cd 	.word	0x007c00cd
    c950:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c954:	2100      	movs	r1, #0
    c956:	f819 3b01 	ldrb.w	r3, [r9], #1
    c95a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c95e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    c962:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    c966:	2a09      	cmp	r2, #9
    c968:	d9f5      	bls.n	c956 <_svfprintf_r+0x186>
    c96a:	9106      	str	r1, [sp, #24]
    c96c:	e78e      	b.n	c88c <_svfprintf_r+0xbc>
    c96e:	4658      	mov	r0, fp
    c970:	f001 fdf6 	bl	e560 <_localeconv_r>
    c974:	6843      	ldr	r3, [r0, #4]
    c976:	9315      	str	r3, [sp, #84]	; 0x54
    c978:	4618      	mov	r0, r3
    c97a:	f7ff f941 	bl	bc00 <strlen>
    c97e:	9016      	str	r0, [sp, #88]	; 0x58
    c980:	4658      	mov	r0, fp
    c982:	f001 fded 	bl	e560 <_localeconv_r>
    c986:	6883      	ldr	r3, [r0, #8]
    c988:	9313      	str	r3, [sp, #76]	; 0x4c
    c98a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c98c:	2b00      	cmp	r3, #0
    c98e:	f040 862d 	bne.w	d5ec <_svfprintf_r+0xe1c>
    c992:	f899 3000 	ldrb.w	r3, [r9]
    c996:	e777      	b.n	c888 <_svfprintf_r+0xb8>
    c998:	f899 3000 	ldrb.w	r3, [r9]
    c99c:	f048 0820 	orr.w	r8, r8, #32
    c9a0:	e772      	b.n	c888 <_svfprintf_r+0xb8>
    c9a2:	2208      	movs	r2, #8
    c9a4:	2100      	movs	r1, #0
    c9a6:	4638      	mov	r0, r7
    c9a8:	f7fe fdcc 	bl	b544 <memset>
    c9ac:	2301      	movs	r3, #1
    c9ae:	4499      	add	r9, r3
    c9b0:	e741      	b.n	c836 <_svfprintf_r+0x66>
    c9b2:	ebb9 0504 	subs.w	r5, r9, r4
    c9b6:	4606      	mov	r6, r0
    c9b8:	d011      	beq.n	c9de <_svfprintf_r+0x20e>
    c9ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c9bc:	442b      	add	r3, r5
    c9be:	9326      	str	r3, [sp, #152]	; 0x98
    c9c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    c9c2:	3301      	adds	r3, #1
    c9c4:	2b07      	cmp	r3, #7
    c9c6:	e9ca 4500 	strd	r4, r5, [sl]
    c9ca:	9325      	str	r3, [sp, #148]	; 0x94
    c9cc:	dc1c      	bgt.n	ca08 <_svfprintf_r+0x238>
    c9ce:	f10a 0a08 	add.w	sl, sl, #8
    c9d2:	9b04      	ldr	r3, [sp, #16]
    c9d4:	442b      	add	r3, r5
    c9d6:	9304      	str	r3, [sp, #16]
    c9d8:	2e00      	cmp	r6, #0
    c9da:	f47f af47 	bne.w	c86c <_svfprintf_r+0x9c>
    c9de:	9b26      	ldr	r3, [sp, #152]	; 0x98
    c9e0:	2b00      	cmp	r3, #0
    c9e2:	f041 820b 	bne.w	ddfc <_svfprintf_r+0x162c>
    c9e6:	ee1b 3a10 	vmov	r3, s22
    c9ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    c9ee:	f013 0f40 	tst.w	r3, #64	; 0x40
    c9f2:	9b04      	ldr	r3, [sp, #16]
    c9f4:	bf18      	it	ne
    c9f6:	f04f 33ff 	movne.w	r3, #4294967295
    c9fa:	9304      	str	r3, [sp, #16]
    c9fc:	9804      	ldr	r0, [sp, #16]
    c9fe:	b051      	add	sp, #324	; 0x144
    ca00:	ecbd 8b08 	vpop	{d8-d11}
    ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca08:	ee1b 1a10 	vmov	r1, s22
    ca0c:	aa24      	add	r2, sp, #144	; 0x90
    ca0e:	4658      	mov	r0, fp
    ca10:	f002 fde6 	bl	f5e0 <__ssprint_r>
    ca14:	2800      	cmp	r0, #0
    ca16:	d1e6      	bne.n	c9e6 <_svfprintf_r+0x216>
    ca18:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ca1c:	e7d9      	b.n	c9d2 <_svfprintf_r+0x202>
    ca1e:	bf00      	nop
	...
    ca28:	ffffffff 	.word	0xffffffff
    ca2c:	7fefffff 	.word	0x7fefffff
    ca30:	20004374 	.word	0x20004374
    ca34:	930b      	str	r3, [sp, #44]	; 0x2c
    ca36:	2b00      	cmp	r3, #0
    ca38:	d0d1      	beq.n	c9de <_svfprintf_r+0x20e>
    ca3a:	2100      	movs	r1, #0
    ca3c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ca40:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    ca44:	2301      	movs	r3, #1
    ca46:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ca4a:	9302      	str	r3, [sp, #8]
    ca4c:	9107      	str	r1, [sp, #28]
    ca4e:	9305      	str	r3, [sp, #20]
    ca50:	9103      	str	r1, [sp, #12]
    ca52:	910f      	str	r1, [sp, #60]	; 0x3c
    ca54:	ac37      	add	r4, sp, #220	; 0xdc
    ca56:	f018 0302 	ands.w	r3, r8, #2
    ca5a:	9309      	str	r3, [sp, #36]	; 0x24
    ca5c:	d002      	beq.n	ca64 <_svfprintf_r+0x294>
    ca5e:	9b02      	ldr	r3, [sp, #8]
    ca60:	3302      	adds	r3, #2
    ca62:	9302      	str	r3, [sp, #8]
    ca64:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    ca68:	930a      	str	r3, [sp, #40]	; 0x28
    ca6a:	d105      	bne.n	ca78 <_svfprintf_r+0x2a8>
    ca6c:	9b06      	ldr	r3, [sp, #24]
    ca6e:	9a02      	ldr	r2, [sp, #8]
    ca70:	1a9d      	subs	r5, r3, r2
    ca72:	2d00      	cmp	r5, #0
    ca74:	f300 8369 	bgt.w	d14a <_svfprintf_r+0x97a>
    ca78:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ca7a:	b189      	cbz	r1, caa0 <_svfprintf_r+0x2d0>
    ca7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    ca7e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    ca82:	3101      	adds	r1, #1
    ca84:	3201      	adds	r2, #1
    ca86:	f8ca 0000 	str.w	r0, [sl]
    ca8a:	2907      	cmp	r1, #7
    ca8c:	f04f 0001 	mov.w	r0, #1
    ca90:	9226      	str	r2, [sp, #152]	; 0x98
    ca92:	9125      	str	r1, [sp, #148]	; 0x94
    ca94:	f8ca 0004 	str.w	r0, [sl, #4]
    ca98:	f300 83a2 	bgt.w	d1e0 <_svfprintf_r+0xa10>
    ca9c:	f10a 0a08 	add.w	sl, sl, #8
    caa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caa2:	b183      	cbz	r3, cac6 <_svfprintf_r+0x2f6>
    caa4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    caa6:	a91a      	add	r1, sp, #104	; 0x68
    caa8:	3301      	adds	r3, #1
    caaa:	3202      	adds	r2, #2
    caac:	f8ca 1000 	str.w	r1, [sl]
    cab0:	2b07      	cmp	r3, #7
    cab2:	f04f 0102 	mov.w	r1, #2
    cab6:	9226      	str	r2, [sp, #152]	; 0x98
    cab8:	9325      	str	r3, [sp, #148]	; 0x94
    caba:	f8ca 1004 	str.w	r1, [sl, #4]
    cabe:	f300 83a3 	bgt.w	d208 <_svfprintf_r+0xa38>
    cac2:	f10a 0a08 	add.w	sl, sl, #8
    cac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cac8:	2b80      	cmp	r3, #128	; 0x80
    caca:	f000 826c 	beq.w	cfa6 <_svfprintf_r+0x7d6>
    cace:	9b03      	ldr	r3, [sp, #12]
    cad0:	9905      	ldr	r1, [sp, #20]
    cad2:	1a5d      	subs	r5, r3, r1
    cad4:	2d00      	cmp	r5, #0
    cad6:	f300 82a5 	bgt.w	d024 <_svfprintf_r+0x854>
    cada:	f418 7f80 	tst.w	r8, #256	; 0x100
    cade:	f040 820d 	bne.w	cefc <_svfprintf_r+0x72c>
    cae2:	9b05      	ldr	r3, [sp, #20]
    cae4:	f8ca 3004 	str.w	r3, [sl, #4]
    cae8:	441a      	add	r2, r3
    caea:	9b25      	ldr	r3, [sp, #148]	; 0x94
    caec:	f8ca 4000 	str.w	r4, [sl]
    caf0:	3301      	adds	r3, #1
    caf2:	2b07      	cmp	r3, #7
    caf4:	9226      	str	r2, [sp, #152]	; 0x98
    caf6:	9325      	str	r3, [sp, #148]	; 0x94
    caf8:	f300 831b 	bgt.w	d132 <_svfprintf_r+0x962>
    cafc:	f10a 0a08 	add.w	sl, sl, #8
    cb00:	f018 0f04 	tst.w	r8, #4
    cb04:	d005      	beq.n	cb12 <_svfprintf_r+0x342>
    cb06:	9b06      	ldr	r3, [sp, #24]
    cb08:	9902      	ldr	r1, [sp, #8]
    cb0a:	1a5c      	subs	r4, r3, r1
    cb0c:	2c00      	cmp	r4, #0
    cb0e:	f300 8388 	bgt.w	d222 <_svfprintf_r+0xa52>
    cb12:	9b04      	ldr	r3, [sp, #16]
    cb14:	9906      	ldr	r1, [sp, #24]
    cb16:	9802      	ldr	r0, [sp, #8]
    cb18:	4281      	cmp	r1, r0
    cb1a:	bfac      	ite	ge
    cb1c:	185b      	addge	r3, r3, r1
    cb1e:	181b      	addlt	r3, r3, r0
    cb20:	9304      	str	r3, [sp, #16]
    cb22:	2a00      	cmp	r2, #0
    cb24:	f040 82b0 	bne.w	d088 <_svfprintf_r+0x8b8>
    cb28:	2300      	movs	r3, #0
    cb2a:	9325      	str	r3, [sp, #148]	; 0x94
    cb2c:	9b07      	ldr	r3, [sp, #28]
    cb2e:	b11b      	cbz	r3, cb38 <_svfprintf_r+0x368>
    cb30:	9907      	ldr	r1, [sp, #28]
    cb32:	4658      	mov	r0, fp
    cb34:	f7ff f966 	bl	be04 <_free_r>
    cb38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    cb3c:	464c      	mov	r4, r9
    cb3e:	e679      	b.n	c834 <_svfprintf_r+0x64>
    cb40:	930b      	str	r3, [sp, #44]	; 0x2c
    cb42:	9b08      	ldr	r3, [sp, #32]
    cb44:	3307      	adds	r3, #7
    cb46:	f023 0307 	bic.w	r3, r3, #7
    cb4a:	ecb3 8b02 	vldmia	r3!, {d8}
    cb4e:	eeb0 7bc8 	vabs.f64	d7, d8
    cb52:	eeb4 7b49 	vcmp.f64	d7, d9
    cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb5a:	9308      	str	r3, [sp, #32]
    cb5c:	f340 84e9 	ble.w	d532 <_svfprintf_r+0xd62>
    cb60:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    cb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cb68:	f101 8059 	bmi.w	dc1e <_svfprintf_r+0x144e>
    cb6c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    cb70:	4cab      	ldr	r4, [pc, #684]	; (ce20 <_svfprintf_r+0x650>)
    cb72:	4bac      	ldr	r3, [pc, #688]	; (ce24 <_svfprintf_r+0x654>)
    cb74:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    cb78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cb7a:	2a47      	cmp	r2, #71	; 0x47
    cb7c:	bfc8      	it	gt
    cb7e:	461c      	movgt	r4, r3
    cb80:	2300      	movs	r3, #0
    cb82:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    cb86:	2203      	movs	r2, #3
    cb88:	9307      	str	r3, [sp, #28]
    cb8a:	9202      	str	r2, [sp, #8]
    cb8c:	9205      	str	r2, [sp, #20]
    cb8e:	9303      	str	r3, [sp, #12]
    cb90:	930f      	str	r3, [sp, #60]	; 0x3c
    cb92:	2900      	cmp	r1, #0
    cb94:	f43f af5f 	beq.w	ca56 <_svfprintf_r+0x286>
    cb98:	9b02      	ldr	r3, [sp, #8]
    cb9a:	3301      	adds	r3, #1
    cb9c:	9302      	str	r3, [sp, #8]
    cb9e:	e75a      	b.n	ca56 <_svfprintf_r+0x286>
    cba0:	2b43      	cmp	r3, #67	; 0x43
    cba2:	930b      	str	r3, [sp, #44]	; 0x2c
    cba4:	d003      	beq.n	cbae <_svfprintf_r+0x3de>
    cba6:	f018 0f10 	tst.w	r8, #16
    cbaa:	f000 855d 	beq.w	d668 <_svfprintf_r+0xe98>
    cbae:	9d08      	ldr	r5, [sp, #32]
    cbb0:	2208      	movs	r2, #8
    cbb2:	2100      	movs	r1, #0
    cbb4:	a822      	add	r0, sp, #136	; 0x88
    cbb6:	ac37      	add	r4, sp, #220	; 0xdc
    cbb8:	f7fe fcc4 	bl	b544 <memset>
    cbbc:	ab22      	add	r3, sp, #136	; 0x88
    cbbe:	f855 2b04 	ldr.w	r2, [r5], #4
    cbc2:	4621      	mov	r1, r4
    cbc4:	4658      	mov	r0, fp
    cbc6:	f002 fcc5 	bl	f554 <_wcrtomb_r>
    cbca:	4603      	mov	r3, r0
    cbcc:	3301      	adds	r3, #1
    cbce:	9005      	str	r0, [sp, #20]
    cbd0:	f001 82ee 	beq.w	e1b0 <_svfprintf_r+0x19e0>
    cbd4:	9b05      	ldr	r3, [sp, #20]
    cbd6:	9508      	str	r5, [sp, #32]
    cbd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cbdc:	9302      	str	r3, [sp, #8]
    cbde:	2100      	movs	r1, #0
    cbe0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    cbe4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    cbe8:	9107      	str	r1, [sp, #28]
    cbea:	9103      	str	r1, [sp, #12]
    cbec:	910f      	str	r1, [sp, #60]	; 0x3c
    cbee:	e732      	b.n	ca56 <_svfprintf_r+0x286>
    cbf0:	930b      	str	r3, [sp, #44]	; 0x2c
    cbf2:	9b08      	ldr	r3, [sp, #32]
    cbf4:	461a      	mov	r2, r3
    cbf6:	2300      	movs	r3, #0
    cbf8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    cbfc:	4613      	mov	r3, r2
    cbfe:	f853 4b04 	ldr.w	r4, [r3], #4
    cc02:	9308      	str	r3, [sp, #32]
    cc04:	2c00      	cmp	r4, #0
    cc06:	f000 8548 	beq.w	d69a <_svfprintf_r+0xeca>
    cc0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc0c:	2b53      	cmp	r3, #83	; 0x53
    cc0e:	f000 86ec 	beq.w	d9ea <_svfprintf_r+0x121a>
    cc12:	f018 0310 	ands.w	r3, r8, #16
    cc16:	930c      	str	r3, [sp, #48]	; 0x30
    cc18:	f040 86e7 	bne.w	d9ea <_svfprintf_r+0x121a>
    cc1c:	9b03      	ldr	r3, [sp, #12]
    cc1e:	1c5d      	adds	r5, r3, #1
    cc20:	f001 80e5 	beq.w	ddee <_svfprintf_r+0x161e>
    cc24:	990c      	ldr	r1, [sp, #48]	; 0x30
    cc26:	461a      	mov	r2, r3
    cc28:	4620      	mov	r0, r4
    cc2a:	f001 fca1 	bl	e570 <memchr>
    cc2e:	9007      	str	r0, [sp, #28]
    cc30:	2800      	cmp	r0, #0
    cc32:	f001 8328 	beq.w	e286 <_svfprintf_r+0x1ab6>
    cc36:	9b07      	ldr	r3, [sp, #28]
    cc38:	1b1a      	subs	r2, r3, r4
    cc3a:	9205      	str	r2, [sp, #20]
    cc3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc3e:	9303      	str	r3, [sp, #12]
    cc40:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    cc44:	930f      	str	r3, [sp, #60]	; 0x3c
    cc46:	930d      	str	r3, [sp, #52]	; 0x34
    cc48:	9307      	str	r3, [sp, #28]
    cc4a:	2373      	movs	r3, #115	; 0x73
    cc4c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    cc50:	9202      	str	r2, [sp, #8]
    cc52:	930b      	str	r3, [sp, #44]	; 0x2c
    cc54:	e79d      	b.n	cb92 <_svfprintf_r+0x3c2>
    cc56:	f018 0f20 	tst.w	r8, #32
    cc5a:	930b      	str	r3, [sp, #44]	; 0x2c
    cc5c:	9b08      	ldr	r3, [sp, #32]
    cc5e:	d03d      	beq.n	ccdc <_svfprintf_r+0x50c>
    cc60:	3307      	adds	r3, #7
    cc62:	f023 0307 	bic.w	r3, r3, #7
    cc66:	461a      	mov	r2, r3
    cc68:	4611      	mov	r1, r2
    cc6a:	685b      	ldr	r3, [r3, #4]
    cc6c:	f851 2b08 	ldr.w	r2, [r1], #8
    cc70:	9108      	str	r1, [sp, #32]
    cc72:	4619      	mov	r1, r3
    cc74:	2b00      	cmp	r3, #0
    cc76:	f2c0 840c 	blt.w	d492 <_svfprintf_r+0xcc2>
    cc7a:	9b03      	ldr	r3, [sp, #12]
    cc7c:	3301      	adds	r3, #1
    cc7e:	f000 829e 	beq.w	d1be <_svfprintf_r+0x9ee>
    cc82:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    cc86:	ea52 0301 	orrs.w	r3, r2, r1
    cc8a:	9002      	str	r0, [sp, #8]
    cc8c:	f040 8299 	bne.w	d1c2 <_svfprintf_r+0x9f2>
    cc90:	9b03      	ldr	r3, [sp, #12]
    cc92:	2b00      	cmp	r3, #0
    cc94:	f040 829a 	bne.w	d1cc <_svfprintf_r+0x9fc>
    cc98:	4680      	mov	r8, r0
    cc9a:	2300      	movs	r3, #0
    cc9c:	9303      	str	r3, [sp, #12]
    cc9e:	9305      	str	r3, [sp, #20]
    cca0:	ac50      	add	r4, sp, #320	; 0x140
    cca2:	e106      	b.n	ceb2 <_svfprintf_r+0x6e2>
    cca4:	9b08      	ldr	r3, [sp, #32]
    cca6:	f853 2b04 	ldr.w	r2, [r3], #4
    ccaa:	9206      	str	r2, [sp, #24]
    ccac:	2a00      	cmp	r2, #0
    ccae:	f280 8419 	bge.w	d4e4 <_svfprintf_r+0xd14>
    ccb2:	9a06      	ldr	r2, [sp, #24]
    ccb4:	9308      	str	r3, [sp, #32]
    ccb6:	4252      	negs	r2, r2
    ccb8:	9206      	str	r2, [sp, #24]
    ccba:	f899 3000 	ldrb.w	r3, [r9]
    ccbe:	f048 0804 	orr.w	r8, r8, #4
    ccc2:	e5e1      	b.n	c888 <_svfprintf_r+0xb8>
    ccc4:	f899 3000 	ldrb.w	r3, [r9]
    ccc8:	f048 0808 	orr.w	r8, r8, #8
    cccc:	e5dc      	b.n	c888 <_svfprintf_r+0xb8>
    ccce:	f048 0810 	orr.w	r8, r8, #16
    ccd2:	f018 0f20 	tst.w	r8, #32
    ccd6:	930b      	str	r3, [sp, #44]	; 0x2c
    ccd8:	9b08      	ldr	r3, [sp, #32]
    ccda:	d1c1      	bne.n	cc60 <_svfprintf_r+0x490>
    ccdc:	f018 0f10 	tst.w	r8, #16
    cce0:	f040 840b 	bne.w	d4fa <_svfprintf_r+0xd2a>
    cce4:	f018 0f40 	tst.w	r8, #64	; 0x40
    cce8:	f000 8403 	beq.w	d4f2 <_svfprintf_r+0xd22>
    ccec:	f933 2b04 	ldrsh.w	r2, [r3], #4
    ccf0:	9308      	str	r3, [sp, #32]
    ccf2:	17d1      	asrs	r1, r2, #31
    ccf4:	460b      	mov	r3, r1
    ccf6:	e7bd      	b.n	cc74 <_svfprintf_r+0x4a4>
    ccf8:	9b08      	ldr	r3, [sp, #32]
    ccfa:	f048 0202 	orr.w	r2, r8, #2
    ccfe:	9202      	str	r2, [sp, #8]
    cd00:	f853 2b04 	ldr.w	r2, [r3], #4
    cd04:	9308      	str	r3, [sp, #32]
    cd06:	f647 0330 	movw	r3, #30768	; 0x7830
    cd0a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    cd0e:	2078      	movs	r0, #120	; 0x78
    cd10:	4b45      	ldr	r3, [pc, #276]	; (ce28 <_svfprintf_r+0x658>)
    cd12:	9311      	str	r3, [sp, #68]	; 0x44
    cd14:	2100      	movs	r1, #0
    cd16:	2302      	movs	r3, #2
    cd18:	900b      	str	r0, [sp, #44]	; 0x2c
    cd1a:	2000      	movs	r0, #0
    cd1c:	9c03      	ldr	r4, [sp, #12]
    cd1e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    cd22:	1c60      	adds	r0, r4, #1
    cd24:	f000 80ad 	beq.w	ce82 <_svfprintf_r+0x6b2>
    cd28:	9802      	ldr	r0, [sp, #8]
    cd2a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    cd2e:	ea52 0001 	orrs.w	r0, r2, r1
    cd32:	f040 80a4 	bne.w	ce7e <_svfprintf_r+0x6ae>
    cd36:	2c00      	cmp	r4, #0
    cd38:	f040 86ae 	bne.w	da98 <_svfprintf_r+0x12c8>
    cd3c:	2b00      	cmp	r3, #0
    cd3e:	d1ac      	bne.n	cc9a <_svfprintf_r+0x4ca>
    cd40:	9b02      	ldr	r3, [sp, #8]
    cd42:	f013 0301 	ands.w	r3, r3, #1
    cd46:	9305      	str	r3, [sp, #20]
    cd48:	f000 83d1 	beq.w	d4ee <_svfprintf_r+0xd1e>
    cd4c:	2330      	movs	r3, #48	; 0x30
    cd4e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    cd52:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    cd56:	e0ac      	b.n	ceb2 <_svfprintf_r+0x6e2>
    cd58:	f018 0f20 	tst.w	r8, #32
    cd5c:	f040 83d4 	bne.w	d508 <_svfprintf_r+0xd38>
    cd60:	f018 0f10 	tst.w	r8, #16
    cd64:	f040 869f 	bne.w	daa6 <_svfprintf_r+0x12d6>
    cd68:	f018 0f40 	tst.w	r8, #64	; 0x40
    cd6c:	f040 8797 	bne.w	dc9e <_svfprintf_r+0x14ce>
    cd70:	f418 7f00 	tst.w	r8, #512	; 0x200
    cd74:	f000 8697 	beq.w	daa6 <_svfprintf_r+0x12d6>
    cd78:	9b08      	ldr	r3, [sp, #32]
    cd7a:	9904      	ldr	r1, [sp, #16]
    cd7c:	f853 2b04 	ldr.w	r2, [r3], #4
    cd80:	9308      	str	r3, [sp, #32]
    cd82:	7011      	strb	r1, [r2, #0]
    cd84:	464c      	mov	r4, r9
    cd86:	e555      	b.n	c834 <_svfprintf_r+0x64>
    cd88:	f899 3000 	ldrb.w	r3, [r9]
    cd8c:	2b68      	cmp	r3, #104	; 0x68
    cd8e:	bf03      	ittte	eq
    cd90:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    cd94:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    cd98:	f109 0901 	addeq.w	r9, r9, #1
    cd9c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    cda0:	e572      	b.n	c888 <_svfprintf_r+0xb8>
    cda2:	f899 3000 	ldrb.w	r3, [r9]
    cda6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    cdaa:	e56d      	b.n	c888 <_svfprintf_r+0xb8>
    cdac:	f899 3000 	ldrb.w	r3, [r9]
    cdb0:	2b6c      	cmp	r3, #108	; 0x6c
    cdb2:	bf03      	ittte	eq
    cdb4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    cdb8:	f048 0820 	orreq.w	r8, r8, #32
    cdbc:	f109 0901 	addeq.w	r9, r9, #1
    cdc0:	f048 0810 	orrne.w	r8, r8, #16
    cdc4:	e560      	b.n	c888 <_svfprintf_r+0xb8>
    cdc6:	930b      	str	r3, [sp, #44]	; 0x2c
    cdc8:	f048 0810 	orr.w	r8, r8, #16
    cdcc:	f018 0120 	ands.w	r1, r8, #32
    cdd0:	f000 8351 	beq.w	d476 <_svfprintf_r+0xca6>
    cdd4:	9b08      	ldr	r3, [sp, #32]
    cdd6:	3307      	adds	r3, #7
    cdd8:	f023 0307 	bic.w	r3, r3, #7
    cddc:	6859      	ldr	r1, [r3, #4]
    cdde:	f853 2b08 	ldr.w	r2, [r3], #8
    cde2:	9308      	str	r3, [sp, #32]
    cde4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    cde8:	9302      	str	r3, [sp, #8]
    cdea:	2300      	movs	r3, #0
    cdec:	e795      	b.n	cd1a <_svfprintf_r+0x54a>
    cdee:	930b      	str	r3, [sp, #44]	; 0x2c
    cdf0:	f048 0310 	orr.w	r3, r8, #16
    cdf4:	9302      	str	r3, [sp, #8]
    cdf6:	9b02      	ldr	r3, [sp, #8]
    cdf8:	f013 0120 	ands.w	r1, r3, #32
    cdfc:	f000 8329 	beq.w	d452 <_svfprintf_r+0xc82>
    ce00:	9b08      	ldr	r3, [sp, #32]
    ce02:	3307      	adds	r3, #7
    ce04:	f023 0307 	bic.w	r3, r3, #7
    ce08:	6859      	ldr	r1, [r3, #4]
    ce0a:	f853 2b08 	ldr.w	r2, [r3], #8
    ce0e:	9308      	str	r3, [sp, #32]
    ce10:	2301      	movs	r3, #1
    ce12:	e782      	b.n	cd1a <_svfprintf_r+0x54a>
    ce14:	f899 3000 	ldrb.w	r3, [r9]
    ce18:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    ce1c:	e534      	b.n	c888 <_svfprintf_r+0xb8>
    ce1e:	bf00      	nop
    ce20:	20000c84 	.word	0x20000c84
    ce24:	20000c88 	.word	0x20000c88
    ce28:	20000c94 	.word	0x20000c94
    ce2c:	4649      	mov	r1, r9
    ce2e:	f811 3b01 	ldrb.w	r3, [r1], #1
    ce32:	2b2a      	cmp	r3, #42	; 0x2a
    ce34:	f001 8249 	beq.w	e2ca <_svfprintf_r+0x1afa>
    ce38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ce3c:	2a09      	cmp	r2, #9
    ce3e:	4689      	mov	r9, r1
    ce40:	bf98      	it	ls
    ce42:	2100      	movls	r1, #0
    ce44:	f201 8144 	bhi.w	e0d0 <_svfprintf_r+0x1900>
    ce48:	f819 3b01 	ldrb.w	r3, [r9], #1
    ce4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ce50:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ce54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ce58:	2a09      	cmp	r2, #9
    ce5a:	d9f5      	bls.n	ce48 <_svfprintf_r+0x678>
    ce5c:	9103      	str	r1, [sp, #12]
    ce5e:	e515      	b.n	c88c <_svfprintf_r+0xbc>
    ce60:	f899 3000 	ldrb.w	r3, [r9]
    ce64:	f048 0801 	orr.w	r8, r8, #1
    ce68:	e50e      	b.n	c888 <_svfprintf_r+0xb8>
    ce6a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ce6e:	2b00      	cmp	r3, #0
    ce70:	f47f ad8f 	bne.w	c992 <_svfprintf_r+0x1c2>
    ce74:	f899 3000 	ldrb.w	r3, [r9]
    ce78:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    ce7c:	e504      	b.n	c888 <_svfprintf_r+0xb8>
    ce7e:	f8cd 8008 	str.w	r8, [sp, #8]
    ce82:	2b01      	cmp	r3, #1
    ce84:	f000 819d 	beq.w	d1c2 <_svfprintf_r+0x9f2>
    ce88:	2b02      	cmp	r3, #2
    ce8a:	ac50      	add	r4, sp, #320	; 0x140
    ce8c:	d120      	bne.n	ced0 <_svfprintf_r+0x700>
    ce8e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ce90:	f002 030f 	and.w	r3, r2, #15
    ce94:	0912      	lsrs	r2, r2, #4
    ce96:	5cc3      	ldrb	r3, [r0, r3]
    ce98:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ce9c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    cea0:	0909      	lsrs	r1, r1, #4
    cea2:	ea52 0301 	orrs.w	r3, r2, r1
    cea6:	d1f3      	bne.n	ce90 <_svfprintf_r+0x6c0>
    cea8:	ab50      	add	r3, sp, #320	; 0x140
    ceaa:	1b1b      	subs	r3, r3, r4
    ceac:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ceb0:	9305      	str	r3, [sp, #20]
    ceb2:	9a05      	ldr	r2, [sp, #20]
    ceb4:	9803      	ldr	r0, [sp, #12]
    ceb6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ceba:	4282      	cmp	r2, r0
    cebc:	f04f 0300 	mov.w	r3, #0
    cec0:	bfb8      	it	lt
    cec2:	4602      	movlt	r2, r0
    cec4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    cec8:	9307      	str	r3, [sp, #28]
    ceca:	9202      	str	r2, [sp, #8]
    cecc:	930f      	str	r3, [sp, #60]	; 0x3c
    cece:	e660      	b.n	cb92 <_svfprintf_r+0x3c2>
    ced0:	f002 0307 	and.w	r3, r2, #7
    ced4:	08d2      	lsrs	r2, r2, #3
    ced6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    ceda:	08c9      	lsrs	r1, r1, #3
    cedc:	3330      	adds	r3, #48	; 0x30
    cede:	ea52 0501 	orrs.w	r5, r2, r1
    cee2:	4620      	mov	r0, r4
    cee4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    cee8:	d1f2      	bne.n	ced0 <_svfprintf_r+0x700>
    ceea:	9a02      	ldr	r2, [sp, #8]
    ceec:	07d1      	lsls	r1, r2, #31
    ceee:	f100 824d 	bmi.w	d38c <_svfprintf_r+0xbbc>
    cef2:	ab50      	add	r3, sp, #320	; 0x140
    cef4:	1b1b      	subs	r3, r3, r4
    cef6:	4690      	mov	r8, r2
    cef8:	9305      	str	r3, [sp, #20]
    cefa:	e7da      	b.n	ceb2 <_svfprintf_r+0x6e2>
    cefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cefe:	2b65      	cmp	r3, #101	; 0x65
    cf00:	f340 80d4 	ble.w	d0ac <_svfprintf_r+0x8dc>
    cf04:	eeb5 8b40 	vcmp.f64	d8, #0.0
    cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf0c:	f040 81c1 	bne.w	d292 <_svfprintf_r+0xac2>
    cf10:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cf12:	49ba      	ldr	r1, [pc, #744]	; (d1fc <_svfprintf_r+0xa2c>)
    cf14:	f8ca 1000 	str.w	r1, [sl]
    cf18:	3301      	adds	r3, #1
    cf1a:	3201      	adds	r2, #1
    cf1c:	2101      	movs	r1, #1
    cf1e:	2b07      	cmp	r3, #7
    cf20:	9226      	str	r2, [sp, #152]	; 0x98
    cf22:	9325      	str	r3, [sp, #148]	; 0x94
    cf24:	f8ca 1004 	str.w	r1, [sl, #4]
    cf28:	f300 8551 	bgt.w	d9ce <_svfprintf_r+0x11fe>
    cf2c:	f10a 0a08 	add.w	sl, sl, #8
    cf30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    cf32:	990e      	ldr	r1, [sp, #56]	; 0x38
    cf34:	428b      	cmp	r3, r1
    cf36:	f280 82d0 	bge.w	d4da <_svfprintf_r+0xd0a>
    cf3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cf3c:	9912      	ldr	r1, [sp, #72]	; 0x48
    cf3e:	441a      	add	r2, r3
    cf40:	e9ca 1300 	strd	r1, r3, [sl]
    cf44:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cf46:	9226      	str	r2, [sp, #152]	; 0x98
    cf48:	3301      	adds	r3, #1
    cf4a:	2b07      	cmp	r3, #7
    cf4c:	9325      	str	r3, [sp, #148]	; 0x94
    cf4e:	f300 8397 	bgt.w	d680 <_svfprintf_r+0xeb0>
    cf52:	f10a 0a08 	add.w	sl, sl, #8
    cf56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf58:	1e5c      	subs	r4, r3, #1
    cf5a:	2c00      	cmp	r4, #0
    cf5c:	f77f add0 	ble.w	cb00 <_svfprintf_r+0x330>
    cf60:	2c10      	cmp	r4, #16
    cf62:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cf64:	f340 856e 	ble.w	da44 <_svfprintf_r+0x1274>
    cf68:	ee1b 6a10 	vmov	r6, s22
    cf6c:	2510      	movs	r5, #16
    cf6e:	e005      	b.n	cf7c <_svfprintf_r+0x7ac>
    cf70:	f10a 0a08 	add.w	sl, sl, #8
    cf74:	3c10      	subs	r4, #16
    cf76:	2c10      	cmp	r4, #16
    cf78:	f340 8564 	ble.w	da44 <_svfprintf_r+0x1274>
    cf7c:	3301      	adds	r3, #1
    cf7e:	49a0      	ldr	r1, [pc, #640]	; (d200 <_svfprintf_r+0xa30>)
    cf80:	3210      	adds	r2, #16
    cf82:	2b07      	cmp	r3, #7
    cf84:	e9ca 1500 	strd	r1, r5, [sl]
    cf88:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    cf8c:	ddf0      	ble.n	cf70 <_svfprintf_r+0x7a0>
    cf8e:	aa24      	add	r2, sp, #144	; 0x90
    cf90:	4631      	mov	r1, r6
    cf92:	4658      	mov	r0, fp
    cf94:	f002 fb24 	bl	f5e0 <__ssprint_r>
    cf98:	2800      	cmp	r0, #0
    cf9a:	d17e      	bne.n	d09a <_svfprintf_r+0x8ca>
    cf9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    cfa0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    cfa4:	e7e6      	b.n	cf74 <_svfprintf_r+0x7a4>
    cfa6:	9b06      	ldr	r3, [sp, #24]
    cfa8:	9902      	ldr	r1, [sp, #8]
    cfaa:	1a5d      	subs	r5, r3, r1
    cfac:	2d00      	cmp	r5, #0
    cfae:	f77f ad8e 	ble.w	cace <_svfprintf_r+0x2fe>
    cfb2:	2d10      	cmp	r5, #16
    cfb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cfb6:	dd21      	ble.n	cffc <_svfprintf_r+0x82c>
    cfb8:	9409      	str	r4, [sp, #36]	; 0x24
    cfba:	2610      	movs	r6, #16
    cfbc:	ee1b 4a10 	vmov	r4, s22
    cfc0:	e004      	b.n	cfcc <_svfprintf_r+0x7fc>
    cfc2:	3d10      	subs	r5, #16
    cfc4:	2d10      	cmp	r5, #16
    cfc6:	f10a 0a08 	add.w	sl, sl, #8
    cfca:	dd16      	ble.n	cffa <_svfprintf_r+0x82a>
    cfcc:	3301      	adds	r3, #1
    cfce:	498c      	ldr	r1, [pc, #560]	; (d200 <_svfprintf_r+0xa30>)
    cfd0:	3210      	adds	r2, #16
    cfd2:	2b07      	cmp	r3, #7
    cfd4:	e9ca 1600 	strd	r1, r6, [sl]
    cfd8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    cfdc:	ddf1      	ble.n	cfc2 <_svfprintf_r+0x7f2>
    cfde:	aa24      	add	r2, sp, #144	; 0x90
    cfe0:	4621      	mov	r1, r4
    cfe2:	4658      	mov	r0, fp
    cfe4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    cfe8:	f002 fafa 	bl	f5e0 <__ssprint_r>
    cfec:	2800      	cmp	r0, #0
    cfee:	d154      	bne.n	d09a <_svfprintf_r+0x8ca>
    cff0:	3d10      	subs	r5, #16
    cff2:	2d10      	cmp	r5, #16
    cff4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    cff8:	dce8      	bgt.n	cfcc <_svfprintf_r+0x7fc>
    cffa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cffc:	4980      	ldr	r1, [pc, #512]	; (d200 <_svfprintf_r+0xa30>)
    cffe:	f8ca 5004 	str.w	r5, [sl, #4]
    d002:	3301      	adds	r3, #1
    d004:	442a      	add	r2, r5
    d006:	2b07      	cmp	r3, #7
    d008:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d00c:	f8ca 1000 	str.w	r1, [sl]
    d010:	f300 8526 	bgt.w	da60 <_svfprintf_r+0x1290>
    d014:	9b03      	ldr	r3, [sp, #12]
    d016:	9905      	ldr	r1, [sp, #20]
    d018:	1a5d      	subs	r5, r3, r1
    d01a:	2d00      	cmp	r5, #0
    d01c:	f10a 0a08 	add.w	sl, sl, #8
    d020:	f77f ad5b 	ble.w	cada <_svfprintf_r+0x30a>
    d024:	2d10      	cmp	r5, #16
    d026:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d028:	dd1f      	ble.n	d06a <_svfprintf_r+0x89a>
    d02a:	4651      	mov	r1, sl
    d02c:	2610      	movs	r6, #16
    d02e:	ee1b aa10 	vmov	sl, s22
    d032:	e004      	b.n	d03e <_svfprintf_r+0x86e>
    d034:	3d10      	subs	r5, #16
    d036:	2d10      	cmp	r5, #16
    d038:	f101 0108 	add.w	r1, r1, #8
    d03c:	dd14      	ble.n	d068 <_svfprintf_r+0x898>
    d03e:	3301      	adds	r3, #1
    d040:	486f      	ldr	r0, [pc, #444]	; (d200 <_svfprintf_r+0xa30>)
    d042:	3210      	adds	r2, #16
    d044:	2b07      	cmp	r3, #7
    d046:	e9c1 0600 	strd	r0, r6, [r1]
    d04a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d04e:	ddf1      	ble.n	d034 <_svfprintf_r+0x864>
    d050:	aa24      	add	r2, sp, #144	; 0x90
    d052:	4651      	mov	r1, sl
    d054:	4658      	mov	r0, fp
    d056:	f002 fac3 	bl	f5e0 <__ssprint_r>
    d05a:	b9f0      	cbnz	r0, d09a <_svfprintf_r+0x8ca>
    d05c:	3d10      	subs	r5, #16
    d05e:	2d10      	cmp	r5, #16
    d060:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d064:	a927      	add	r1, sp, #156	; 0x9c
    d066:	dcea      	bgt.n	d03e <_svfprintf_r+0x86e>
    d068:	468a      	mov	sl, r1
    d06a:	3301      	adds	r3, #1
    d06c:	4964      	ldr	r1, [pc, #400]	; (d200 <_svfprintf_r+0xa30>)
    d06e:	f8ca 5004 	str.w	r5, [sl, #4]
    d072:	442a      	add	r2, r5
    d074:	2b07      	cmp	r3, #7
    d076:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d07a:	f8ca 1000 	str.w	r1, [sl]
    d07e:	f300 81da 	bgt.w	d436 <_svfprintf_r+0xc66>
    d082:	f10a 0a08 	add.w	sl, sl, #8
    d086:	e528      	b.n	cada <_svfprintf_r+0x30a>
    d088:	ee1b 1a10 	vmov	r1, s22
    d08c:	aa24      	add	r2, sp, #144	; 0x90
    d08e:	4658      	mov	r0, fp
    d090:	f002 faa6 	bl	f5e0 <__ssprint_r>
    d094:	2800      	cmp	r0, #0
    d096:	f43f ad47 	beq.w	cb28 <_svfprintf_r+0x358>
    d09a:	9b07      	ldr	r3, [sp, #28]
    d09c:	2b00      	cmp	r3, #0
    d09e:	f43f aca2 	beq.w	c9e6 <_svfprintf_r+0x216>
    d0a2:	9907      	ldr	r1, [sp, #28]
    d0a4:	4658      	mov	r0, fp
    d0a6:	f7fe fead 	bl	be04 <_free_r>
    d0aa:	e49c      	b.n	c9e6 <_svfprintf_r+0x216>
    d0ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0ae:	2b01      	cmp	r3, #1
    d0b0:	f340 817a 	ble.w	d3a8 <_svfprintf_r+0xbd8>
    d0b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d0b6:	f8ca 4000 	str.w	r4, [sl]
    d0ba:	3301      	adds	r3, #1
    d0bc:	3201      	adds	r2, #1
    d0be:	2101      	movs	r1, #1
    d0c0:	2b07      	cmp	r3, #7
    d0c2:	9226      	str	r2, [sp, #152]	; 0x98
    d0c4:	9325      	str	r3, [sp, #148]	; 0x94
    d0c6:	f8ca 1004 	str.w	r1, [sl, #4]
    d0ca:	f300 81f8 	bgt.w	d4be <_svfprintf_r+0xcee>
    d0ce:	f10a 0a08 	add.w	sl, sl, #8
    d0d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    d0d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    d0d6:	3301      	adds	r3, #1
    d0d8:	440a      	add	r2, r1
    d0da:	2b07      	cmp	r3, #7
    d0dc:	e9ca 0100 	strd	r0, r1, [sl]
    d0e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d0e4:	f300 81dd 	bgt.w	d4a2 <_svfprintf_r+0xcd2>
    d0e8:	f10a 0a08 	add.w	sl, sl, #8
    d0ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0f4:	f000 8177 	beq.w	d3e6 <_svfprintf_r+0xc16>
    d0f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    d0fa:	3301      	adds	r3, #1
    d0fc:	3901      	subs	r1, #1
    d0fe:	3401      	adds	r4, #1
    d100:	440a      	add	r2, r1
    d102:	2b07      	cmp	r3, #7
    d104:	f8ca 4000 	str.w	r4, [sl]
    d108:	9325      	str	r3, [sp, #148]	; 0x94
    d10a:	f8ca 1004 	str.w	r1, [sl, #4]
    d10e:	9226      	str	r2, [sp, #152]	; 0x98
    d110:	f300 815b 	bgt.w	d3ca <_svfprintf_r+0xbfa>
    d114:	f10a 0a08 	add.w	sl, sl, #8
    d118:	9914      	ldr	r1, [sp, #80]	; 0x50
    d11a:	f8ca 1004 	str.w	r1, [sl, #4]
    d11e:	3301      	adds	r3, #1
    d120:	440a      	add	r2, r1
    d122:	2b07      	cmp	r3, #7
    d124:	a91e      	add	r1, sp, #120	; 0x78
    d126:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d12a:	f8ca 1000 	str.w	r1, [sl]
    d12e:	f77f ace5 	ble.w	cafc <_svfprintf_r+0x32c>
    d132:	ee1b 1a10 	vmov	r1, s22
    d136:	aa24      	add	r2, sp, #144	; 0x90
    d138:	4658      	mov	r0, fp
    d13a:	f002 fa51 	bl	f5e0 <__ssprint_r>
    d13e:	2800      	cmp	r0, #0
    d140:	d1ab      	bne.n	d09a <_svfprintf_r+0x8ca>
    d142:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d144:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d148:	e4da      	b.n	cb00 <_svfprintf_r+0x330>
    d14a:	2d10      	cmp	r5, #16
    d14c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    d150:	4e2c      	ldr	r6, [pc, #176]	; (d204 <_svfprintf_r+0xa34>)
    d152:	dd24      	ble.n	d19e <_svfprintf_r+0x9ce>
    d154:	9417      	str	r4, [sp, #92]	; 0x5c
    d156:	2310      	movs	r3, #16
    d158:	ee1b 4a10 	vmov	r4, s22
    d15c:	4608      	mov	r0, r1
    d15e:	e004      	b.n	d16a <_svfprintf_r+0x99a>
    d160:	3d10      	subs	r5, #16
    d162:	2d10      	cmp	r5, #16
    d164:	f10a 0a08 	add.w	sl, sl, #8
    d168:	dd17      	ble.n	d19a <_svfprintf_r+0x9ca>
    d16a:	3001      	adds	r0, #1
    d16c:	3210      	adds	r2, #16
    d16e:	2807      	cmp	r0, #7
    d170:	e9ca 6300 	strd	r6, r3, [sl]
    d174:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    d178:	ddf2      	ble.n	d160 <_svfprintf_r+0x990>
    d17a:	aa24      	add	r2, sp, #144	; 0x90
    d17c:	4621      	mov	r1, r4
    d17e:	4658      	mov	r0, fp
    d180:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d184:	f002 fa2c 	bl	f5e0 <__ssprint_r>
    d188:	2800      	cmp	r0, #0
    d18a:	d186      	bne.n	d09a <_svfprintf_r+0x8ca>
    d18c:	3d10      	subs	r5, #16
    d18e:	2d10      	cmp	r5, #16
    d190:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    d194:	f04f 0310 	mov.w	r3, #16
    d198:	dce7      	bgt.n	d16a <_svfprintf_r+0x99a>
    d19a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d19c:	4601      	mov	r1, r0
    d19e:	3101      	adds	r1, #1
    d1a0:	442a      	add	r2, r5
    d1a2:	2907      	cmp	r1, #7
    d1a4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    d1a8:	f8ca 6000 	str.w	r6, [sl]
    d1ac:	f8ca 5004 	str.w	r5, [sl, #4]
    d1b0:	f300 83bd 	bgt.w	d92e <_svfprintf_r+0x115e>
    d1b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d1b8:	f10a 0a08 	add.w	sl, sl, #8
    d1bc:	e45d      	b.n	ca7a <_svfprintf_r+0x2aa>
    d1be:	f8cd 8008 	str.w	r8, [sp, #8]
    d1c2:	2a0a      	cmp	r2, #10
    d1c4:	f171 0300 	sbcs.w	r3, r1, #0
    d1c8:	f080 8345 	bcs.w	d856 <_svfprintf_r+0x1086>
    d1cc:	3230      	adds	r2, #48	; 0x30
    d1ce:	2301      	movs	r3, #1
    d1d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d1d4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    d1d8:	9305      	str	r3, [sp, #20]
    d1da:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d1de:	e668      	b.n	ceb2 <_svfprintf_r+0x6e2>
    d1e0:	ee1b 1a10 	vmov	r1, s22
    d1e4:	aa24      	add	r2, sp, #144	; 0x90
    d1e6:	4658      	mov	r0, fp
    d1e8:	f002 f9fa 	bl	f5e0 <__ssprint_r>
    d1ec:	2800      	cmp	r0, #0
    d1ee:	f47f af54 	bne.w	d09a <_svfprintf_r+0x8ca>
    d1f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d1f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d1f8:	e452      	b.n	caa0 <_svfprintf_r+0x2d0>
    d1fa:	bf00      	nop
    d1fc:	20000cc4 	.word	0x20000cc4
    d200:	2000120c 	.word	0x2000120c
    d204:	20000cc8 	.word	0x20000cc8
    d208:	ee1b 1a10 	vmov	r1, s22
    d20c:	aa24      	add	r2, sp, #144	; 0x90
    d20e:	4658      	mov	r0, fp
    d210:	f002 f9e6 	bl	f5e0 <__ssprint_r>
    d214:	2800      	cmp	r0, #0
    d216:	f47f af40 	bne.w	d09a <_svfprintf_r+0x8ca>
    d21a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d21c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d220:	e451      	b.n	cac6 <_svfprintf_r+0x2f6>
    d222:	2c10      	cmp	r4, #16
    d224:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d226:	4ebe      	ldr	r6, [pc, #760]	; (d520 <_svfprintf_r+0xd50>)
    d228:	dd1f      	ble.n	d26a <_svfprintf_r+0xa9a>
    d22a:	ee1b 8a10 	vmov	r8, s22
    d22e:	2510      	movs	r5, #16
    d230:	e004      	b.n	d23c <_svfprintf_r+0xa6c>
    d232:	3c10      	subs	r4, #16
    d234:	2c10      	cmp	r4, #16
    d236:	f10a 0a08 	add.w	sl, sl, #8
    d23a:	dd16      	ble.n	d26a <_svfprintf_r+0xa9a>
    d23c:	3301      	adds	r3, #1
    d23e:	3210      	adds	r2, #16
    d240:	2b07      	cmp	r3, #7
    d242:	e9ca 6500 	strd	r6, r5, [sl]
    d246:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d24a:	ddf2      	ble.n	d232 <_svfprintf_r+0xa62>
    d24c:	aa24      	add	r2, sp, #144	; 0x90
    d24e:	4641      	mov	r1, r8
    d250:	4658      	mov	r0, fp
    d252:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d256:	f002 f9c3 	bl	f5e0 <__ssprint_r>
    d25a:	2800      	cmp	r0, #0
    d25c:	f47f af1d 	bne.w	d09a <_svfprintf_r+0x8ca>
    d260:	3c10      	subs	r4, #16
    d262:	2c10      	cmp	r4, #16
    d264:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d268:	dce8      	bgt.n	d23c <_svfprintf_r+0xa6c>
    d26a:	3301      	adds	r3, #1
    d26c:	4422      	add	r2, r4
    d26e:	2b07      	cmp	r3, #7
    d270:	e9ca 6400 	strd	r6, r4, [sl]
    d274:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d278:	f77f ac4b 	ble.w	cb12 <_svfprintf_r+0x342>
    d27c:	ee1b 1a10 	vmov	r1, s22
    d280:	aa24      	add	r2, sp, #144	; 0x90
    d282:	4658      	mov	r0, fp
    d284:	f002 f9ac 	bl	f5e0 <__ssprint_r>
    d288:	2800      	cmp	r0, #0
    d28a:	f47f af06 	bne.w	d09a <_svfprintf_r+0x8ca>
    d28e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d290:	e43f      	b.n	cb12 <_svfprintf_r+0x342>
    d292:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d294:	2900      	cmp	r1, #0
    d296:	f340 835a 	ble.w	d94e <_svfprintf_r+0x117e>
    d29a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d29e:	429e      	cmp	r6, r3
    d2a0:	bfa8      	it	ge
    d2a2:	461e      	movge	r6, r3
    d2a4:	2e00      	cmp	r6, #0
    d2a6:	dd0b      	ble.n	d2c0 <_svfprintf_r+0xaf0>
    d2a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d2aa:	3301      	adds	r3, #1
    d2ac:	4432      	add	r2, r6
    d2ae:	2b07      	cmp	r3, #7
    d2b0:	e9ca 4600 	strd	r4, r6, [sl]
    d2b4:	9226      	str	r2, [sp, #152]	; 0x98
    d2b6:	9325      	str	r3, [sp, #148]	; 0x94
    d2b8:	f300 8689 	bgt.w	dfce <_svfprintf_r+0x17fe>
    d2bc:	f10a 0a08 	add.w	sl, sl, #8
    d2c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d2c2:	2e00      	cmp	r6, #0
    d2c4:	bfa8      	it	ge
    d2c6:	1bad      	subge	r5, r5, r6
    d2c8:	2d00      	cmp	r5, #0
    d2ca:	f300 8203 	bgt.w	d6d4 <_svfprintf_r+0xf04>
    d2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2d0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    d2d4:	4423      	add	r3, r4
    d2d6:	9305      	str	r3, [sp, #20]
    d2d8:	f040 821f 	bne.w	d71a <_svfprintf_r+0xf4a>
    d2dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d2de:	990e      	ldr	r1, [sp, #56]	; 0x38
    d2e0:	428b      	cmp	r3, r1
    d2e2:	db03      	blt.n	d2ec <_svfprintf_r+0xb1c>
    d2e4:	f018 0f01 	tst.w	r8, #1
    d2e8:	f000 84cf 	beq.w	dc8a <_svfprintf_r+0x14ba>
    d2ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    d2ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    d2f0:	440a      	add	r2, r1
    d2f2:	e9ca 0100 	strd	r0, r1, [sl]
    d2f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    d2f8:	9226      	str	r2, [sp, #152]	; 0x98
    d2fa:	3101      	adds	r1, #1
    d2fc:	2907      	cmp	r1, #7
    d2fe:	9125      	str	r1, [sp, #148]	; 0x94
    d300:	f300 86a5 	bgt.w	e04e <_svfprintf_r+0x187e>
    d304:	f10a 0a08 	add.w	sl, sl, #8
    d308:	990e      	ldr	r1, [sp, #56]	; 0x38
    d30a:	1865      	adds	r5, r4, r1
    d30c:	1acc      	subs	r4, r1, r3
    d30e:	9b05      	ldr	r3, [sp, #20]
    d310:	1aed      	subs	r5, r5, r3
    d312:	42a5      	cmp	r5, r4
    d314:	bfa8      	it	ge
    d316:	4625      	movge	r5, r4
    d318:	2d00      	cmp	r5, #0
    d31a:	dd0d      	ble.n	d338 <_svfprintf_r+0xb68>
    d31c:	f8ca 3000 	str.w	r3, [sl]
    d320:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d322:	f8ca 5004 	str.w	r5, [sl, #4]
    d326:	3301      	adds	r3, #1
    d328:	442a      	add	r2, r5
    d32a:	2b07      	cmp	r3, #7
    d32c:	9226      	str	r2, [sp, #152]	; 0x98
    d32e:	9325      	str	r3, [sp, #148]	; 0x94
    d330:	f300 86bb 	bgt.w	e0aa <_svfprintf_r+0x18da>
    d334:	f10a 0a08 	add.w	sl, sl, #8
    d338:	2d00      	cmp	r5, #0
    d33a:	bfa8      	it	ge
    d33c:	1b64      	subge	r4, r4, r5
    d33e:	2c00      	cmp	r4, #0
    d340:	f77f abde 	ble.w	cb00 <_svfprintf_r+0x330>
    d344:	2c10      	cmp	r4, #16
    d346:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d348:	f340 837c 	ble.w	da44 <_svfprintf_r+0x1274>
    d34c:	ee1b 6a10 	vmov	r6, s22
    d350:	2510      	movs	r5, #16
    d352:	e005      	b.n	d360 <_svfprintf_r+0xb90>
    d354:	f10a 0a08 	add.w	sl, sl, #8
    d358:	3c10      	subs	r4, #16
    d35a:	2c10      	cmp	r4, #16
    d35c:	f340 8372 	ble.w	da44 <_svfprintf_r+0x1274>
    d360:	3301      	adds	r3, #1
    d362:	4970      	ldr	r1, [pc, #448]	; (d524 <_svfprintf_r+0xd54>)
    d364:	3210      	adds	r2, #16
    d366:	2b07      	cmp	r3, #7
    d368:	e9ca 1500 	strd	r1, r5, [sl]
    d36c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d370:	ddf0      	ble.n	d354 <_svfprintf_r+0xb84>
    d372:	aa24      	add	r2, sp, #144	; 0x90
    d374:	4631      	mov	r1, r6
    d376:	4658      	mov	r0, fp
    d378:	f002 f932 	bl	f5e0 <__ssprint_r>
    d37c:	2800      	cmp	r0, #0
    d37e:	f47f ae8c 	bne.w	d09a <_svfprintf_r+0x8ca>
    d382:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d386:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d38a:	e7e5      	b.n	d358 <_svfprintf_r+0xb88>
    d38c:	2b30      	cmp	r3, #48	; 0x30
    d38e:	f43f ad8b 	beq.w	cea8 <_svfprintf_r+0x6d8>
    d392:	2330      	movs	r3, #48	; 0x30
    d394:	3802      	subs	r0, #2
    d396:	f804 3c01 	strb.w	r3, [r4, #-1]
    d39a:	ab50      	add	r3, sp, #320	; 0x140
    d39c:	1a1b      	subs	r3, r3, r0
    d39e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d3a2:	9305      	str	r3, [sp, #20]
    d3a4:	4604      	mov	r4, r0
    d3a6:	e584      	b.n	ceb2 <_svfprintf_r+0x6e2>
    d3a8:	f018 0f01 	tst.w	r8, #1
    d3ac:	f47f ae82 	bne.w	d0b4 <_svfprintf_r+0x8e4>
    d3b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d3b2:	f8ca 4000 	str.w	r4, [sl]
    d3b6:	3301      	adds	r3, #1
    d3b8:	3201      	adds	r2, #1
    d3ba:	2101      	movs	r1, #1
    d3bc:	2b07      	cmp	r3, #7
    d3be:	9226      	str	r2, [sp, #152]	; 0x98
    d3c0:	9325      	str	r3, [sp, #148]	; 0x94
    d3c2:	f8ca 1004 	str.w	r1, [sl, #4]
    d3c6:	f77f aea5 	ble.w	d114 <_svfprintf_r+0x944>
    d3ca:	ee1b 1a10 	vmov	r1, s22
    d3ce:	aa24      	add	r2, sp, #144	; 0x90
    d3d0:	4658      	mov	r0, fp
    d3d2:	f002 f905 	bl	f5e0 <__ssprint_r>
    d3d6:	2800      	cmp	r0, #0
    d3d8:	f47f ae5f 	bne.w	d09a <_svfprintf_r+0x8ca>
    d3dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d3e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d3e4:	e698      	b.n	d118 <_svfprintf_r+0x948>
    d3e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    d3e8:	1e4c      	subs	r4, r1, #1
    d3ea:	2c00      	cmp	r4, #0
    d3ec:	f77f ae94 	ble.w	d118 <_svfprintf_r+0x948>
    d3f0:	2c10      	cmp	r4, #16
    d3f2:	f340 8361 	ble.w	dab8 <_svfprintf_r+0x12e8>
    d3f6:	ee1b 6a10 	vmov	r6, s22
    d3fa:	2510      	movs	r5, #16
    d3fc:	e005      	b.n	d40a <_svfprintf_r+0xc3a>
    d3fe:	f10a 0a08 	add.w	sl, sl, #8
    d402:	3c10      	subs	r4, #16
    d404:	2c10      	cmp	r4, #16
    d406:	f340 8357 	ble.w	dab8 <_svfprintf_r+0x12e8>
    d40a:	3301      	adds	r3, #1
    d40c:	4945      	ldr	r1, [pc, #276]	; (d524 <_svfprintf_r+0xd54>)
    d40e:	3210      	adds	r2, #16
    d410:	2b07      	cmp	r3, #7
    d412:	e9ca 1500 	strd	r1, r5, [sl]
    d416:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d41a:	ddf0      	ble.n	d3fe <_svfprintf_r+0xc2e>
    d41c:	aa24      	add	r2, sp, #144	; 0x90
    d41e:	4631      	mov	r1, r6
    d420:	4658      	mov	r0, fp
    d422:	f002 f8dd 	bl	f5e0 <__ssprint_r>
    d426:	2800      	cmp	r0, #0
    d428:	f47f ae37 	bne.w	d09a <_svfprintf_r+0x8ca>
    d42c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d430:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d434:	e7e5      	b.n	d402 <_svfprintf_r+0xc32>
    d436:	ee1b 1a10 	vmov	r1, s22
    d43a:	aa24      	add	r2, sp, #144	; 0x90
    d43c:	4658      	mov	r0, fp
    d43e:	f002 f8cf 	bl	f5e0 <__ssprint_r>
    d442:	2800      	cmp	r0, #0
    d444:	f47f ae29 	bne.w	d09a <_svfprintf_r+0x8ca>
    d448:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d44a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d44e:	f7ff bb44 	b.w	cada <_svfprintf_r+0x30a>
    d452:	9b02      	ldr	r3, [sp, #8]
    d454:	f013 0310 	ands.w	r3, r3, #16
    d458:	f040 80c1 	bne.w	d5de <_svfprintf_r+0xe0e>
    d45c:	9a02      	ldr	r2, [sp, #8]
    d45e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    d462:	f000 837a 	beq.w	db5a <_svfprintf_r+0x138a>
    d466:	9808      	ldr	r0, [sp, #32]
    d468:	f850 2b04 	ldr.w	r2, [r0], #4
    d46c:	9008      	str	r0, [sp, #32]
    d46e:	4619      	mov	r1, r3
    d470:	b292      	uxth	r2, r2
    d472:	2301      	movs	r3, #1
    d474:	e451      	b.n	cd1a <_svfprintf_r+0x54a>
    d476:	f018 0310 	ands.w	r3, r8, #16
    d47a:	d155      	bne.n	d528 <_svfprintf_r+0xd58>
    d47c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    d480:	f000 835d 	beq.w	db3e <_svfprintf_r+0x136e>
    d484:	9808      	ldr	r0, [sp, #32]
    d486:	f850 2b04 	ldr.w	r2, [r0], #4
    d48a:	9008      	str	r0, [sp, #32]
    d48c:	4619      	mov	r1, r3
    d48e:	b292      	uxth	r2, r2
    d490:	e4a8      	b.n	cde4 <_svfprintf_r+0x614>
    d492:	4252      	negs	r2, r2
    d494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d498:	f8cd 8008 	str.w	r8, [sp, #8]
    d49c:	202d      	movs	r0, #45	; 0x2d
    d49e:	2301      	movs	r3, #1
    d4a0:	e43c      	b.n	cd1c <_svfprintf_r+0x54c>
    d4a2:	ee1b 1a10 	vmov	r1, s22
    d4a6:	aa24      	add	r2, sp, #144	; 0x90
    d4a8:	4658      	mov	r0, fp
    d4aa:	f002 f899 	bl	f5e0 <__ssprint_r>
    d4ae:	2800      	cmp	r0, #0
    d4b0:	f47f adf3 	bne.w	d09a <_svfprintf_r+0x8ca>
    d4b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d4b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d4bc:	e616      	b.n	d0ec <_svfprintf_r+0x91c>
    d4be:	ee1b 1a10 	vmov	r1, s22
    d4c2:	aa24      	add	r2, sp, #144	; 0x90
    d4c4:	4658      	mov	r0, fp
    d4c6:	f002 f88b 	bl	f5e0 <__ssprint_r>
    d4ca:	2800      	cmp	r0, #0
    d4cc:	f47f ade5 	bne.w	d09a <_svfprintf_r+0x8ca>
    d4d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d4d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d4d8:	e5fb      	b.n	d0d2 <_svfprintf_r+0x902>
    d4da:	f018 0f01 	tst.w	r8, #1
    d4de:	f43f ab0f 	beq.w	cb00 <_svfprintf_r+0x330>
    d4e2:	e52a      	b.n	cf3a <_svfprintf_r+0x76a>
    d4e4:	9308      	str	r3, [sp, #32]
    d4e6:	f899 3000 	ldrb.w	r3, [r9]
    d4ea:	f7ff b9cd 	b.w	c888 <_svfprintf_r+0xb8>
    d4ee:	ac50      	add	r4, sp, #320	; 0x140
    d4f0:	e4df      	b.n	ceb2 <_svfprintf_r+0x6e2>
    d4f2:	f418 7f00 	tst.w	r8, #512	; 0x200
    d4f6:	f040 83db 	bne.w	dcb0 <_svfprintf_r+0x14e0>
    d4fa:	f853 2b04 	ldr.w	r2, [r3], #4
    d4fe:	9308      	str	r3, [sp, #32]
    d500:	17d1      	asrs	r1, r2, #31
    d502:	460b      	mov	r3, r1
    d504:	f7ff bbb6 	b.w	cc74 <_svfprintf_r+0x4a4>
    d508:	9b08      	ldr	r3, [sp, #32]
    d50a:	9804      	ldr	r0, [sp, #16]
    d50c:	f853 1b04 	ldr.w	r1, [r3], #4
    d510:	9308      	str	r3, [sp, #32]
    d512:	17c2      	asrs	r2, r0, #31
    d514:	e9c1 0200 	strd	r0, r2, [r1]
    d518:	464c      	mov	r4, r9
    d51a:	f7ff b98b 	b.w	c834 <_svfprintf_r+0x64>
    d51e:	bf00      	nop
    d520:	20000cc8 	.word	0x20000cc8
    d524:	2000120c 	.word	0x2000120c
    d528:	9b08      	ldr	r3, [sp, #32]
    d52a:	f853 2b04 	ldr.w	r2, [r3], #4
    d52e:	9308      	str	r3, [sp, #32]
    d530:	e458      	b.n	cde4 <_svfprintf_r+0x614>
    d532:	eeb4 8b48 	vcmp.f64	d8, d8
    d536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d53a:	f180 8694 	bvs.w	e266 <_svfprintf_r+0x1a96>
    d53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d540:	2b61      	cmp	r3, #97	; 0x61
    d542:	f000 8552 	beq.w	dfea <_svfprintf_r+0x181a>
    d546:	2b41      	cmp	r3, #65	; 0x41
    d548:	f000 85c0 	beq.w	e0cc <_svfprintf_r+0x18fc>
    d54c:	9b03      	ldr	r3, [sp, #12]
    d54e:	3301      	adds	r3, #1
    d550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d552:	f023 0520 	bic.w	r5, r3, #32
    d556:	f000 8480 	beq.w	de5a <_svfprintf_r+0x168a>
    d55a:	2d47      	cmp	r5, #71	; 0x47
    d55c:	d104      	bne.n	d568 <_svfprintf_r+0xd98>
    d55e:	9b03      	ldr	r3, [sp, #12]
    d560:	2b00      	cmp	r3, #0
    d562:	bf08      	it	eq
    d564:	2301      	moveq	r3, #1
    d566:	9303      	str	r3, [sp, #12]
    d568:	ee18 3a90 	vmov	r3, s17
    d56c:	2b00      	cmp	r3, #0
    d56e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    d572:	4646      	mov	r6, r8
    d574:	f2c0 8618 	blt.w	e1a8 <_svfprintf_r+0x19d8>
    d578:	eeb0 ab48 	vmov.f64	d10, d8
    d57c:	2300      	movs	r3, #0
    d57e:	4690      	mov	r8, r2
    d580:	9309      	str	r3, [sp, #36]	; 0x24
    d582:	9307      	str	r3, [sp, #28]
    d584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d586:	3b41      	subs	r3, #65	; 0x41
    d588:	2b25      	cmp	r3, #37	; 0x25
    d58a:	f200 8398 	bhi.w	dcbe <_svfprintf_r+0x14ee>
    d58e:	e8df f013 	tbh	[pc, r3, lsl #1]
    d592:	046f      	.short	0x046f
    d594:	03960396 	.word	0x03960396
    d598:	04680396 	.word	0x04680396
    d59c:	0396046c 	.word	0x0396046c
    d5a0:	03960396 	.word	0x03960396
    d5a4:	03960396 	.word	0x03960396
    d5a8:	03960396 	.word	0x03960396
    d5ac:	03960396 	.word	0x03960396
    d5b0:	03960396 	.word	0x03960396
    d5b4:	03960396 	.word	0x03960396
    d5b8:	03960396 	.word	0x03960396
    d5bc:	03960396 	.word	0x03960396
    d5c0:	03960396 	.word	0x03960396
    d5c4:	03960396 	.word	0x03960396
    d5c8:	03960396 	.word	0x03960396
    d5cc:	03960396 	.word	0x03960396
    d5d0:	03960396 	.word	0x03960396
    d5d4:	03960396 	.word	0x03960396
    d5d8:	04680396 	.word	0x04680396
    d5dc:	046c      	.short	0x046c
    d5de:	9b08      	ldr	r3, [sp, #32]
    d5e0:	f853 2b04 	ldr.w	r2, [r3], #4
    d5e4:	9308      	str	r3, [sp, #32]
    d5e6:	2301      	movs	r3, #1
    d5e8:	f7ff bb97 	b.w	cd1a <_svfprintf_r+0x54a>
    d5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	f43f a9cf 	beq.w	c992 <_svfprintf_r+0x1c2>
    d5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	f43f a9ca 	beq.w	c992 <_svfprintf_r+0x1c2>
    d5fe:	f899 3000 	ldrb.w	r3, [r9]
    d602:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    d606:	f7ff b93f 	b.w	c888 <_svfprintf_r+0xb8>
    d60a:	930b      	str	r3, [sp, #44]	; 0x2c
    d60c:	f8cd 8008 	str.w	r8, [sp, #8]
    d610:	f7ff bbf1 	b.w	cdf6 <_svfprintf_r+0x626>
    d614:	930b      	str	r3, [sp, #44]	; 0x2c
    d616:	4b9a      	ldr	r3, [pc, #616]	; (d880 <_svfprintf_r+0x10b0>)
    d618:	9311      	str	r3, [sp, #68]	; 0x44
    d61a:	f018 0120 	ands.w	r1, r8, #32
    d61e:	f000 8105 	beq.w	d82c <_svfprintf_r+0x105c>
    d622:	9b08      	ldr	r3, [sp, #32]
    d624:	3307      	adds	r3, #7
    d626:	f023 0307 	bic.w	r3, r3, #7
    d62a:	6859      	ldr	r1, [r3, #4]
    d62c:	f853 2b08 	ldr.w	r2, [r3], #8
    d630:	9308      	str	r3, [sp, #32]
    d632:	f018 0f01 	tst.w	r8, #1
    d636:	d00a      	beq.n	d64e <_svfprintf_r+0xe7e>
    d638:	ea52 0301 	orrs.w	r3, r2, r1
    d63c:	d007      	beq.n	d64e <_svfprintf_r+0xe7e>
    d63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d640:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    d644:	2330      	movs	r3, #48	; 0x30
    d646:	f048 0802 	orr.w	r8, r8, #2
    d64a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    d64e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d652:	9302      	str	r3, [sp, #8]
    d654:	2302      	movs	r3, #2
    d656:	f7ff bb60 	b.w	cd1a <_svfprintf_r+0x54a>
    d65a:	930b      	str	r3, [sp, #44]	; 0x2c
    d65c:	f7ff bbb6 	b.w	cdcc <_svfprintf_r+0x5fc>
    d660:	930b      	str	r3, [sp, #44]	; 0x2c
    d662:	4b88      	ldr	r3, [pc, #544]	; (d884 <_svfprintf_r+0x10b4>)
    d664:	9311      	str	r3, [sp, #68]	; 0x44
    d666:	e7d8      	b.n	d61a <_svfprintf_r+0xe4a>
    d668:	9b08      	ldr	r3, [sp, #32]
    d66a:	2101      	movs	r1, #1
    d66c:	f853 2b04 	ldr.w	r2, [r3], #4
    d670:	9102      	str	r1, [sp, #8]
    d672:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    d676:	9308      	str	r3, [sp, #32]
    d678:	9105      	str	r1, [sp, #20]
    d67a:	ac37      	add	r4, sp, #220	; 0xdc
    d67c:	f7ff baaf 	b.w	cbde <_svfprintf_r+0x40e>
    d680:	ee1b 1a10 	vmov	r1, s22
    d684:	aa24      	add	r2, sp, #144	; 0x90
    d686:	4658      	mov	r0, fp
    d688:	f001 ffaa 	bl	f5e0 <__ssprint_r>
    d68c:	2800      	cmp	r0, #0
    d68e:	f47f ad04 	bne.w	d09a <_svfprintf_r+0x8ca>
    d692:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d694:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d698:	e45d      	b.n	cf56 <_svfprintf_r+0x786>
    d69a:	9b03      	ldr	r3, [sp, #12]
    d69c:	9407      	str	r4, [sp, #28]
    d69e:	2b06      	cmp	r3, #6
    d6a0:	4622      	mov	r2, r4
    d6a2:	bf28      	it	cs
    d6a4:	2306      	movcs	r3, #6
    d6a6:	9403      	str	r4, [sp, #12]
    d6a8:	4621      	mov	r1, r4
    d6aa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    d6ae:	4c76      	ldr	r4, [pc, #472]	; (d888 <_svfprintf_r+0x10b8>)
    d6b0:	9302      	str	r3, [sp, #8]
    d6b2:	9305      	str	r3, [sp, #20]
    d6b4:	920f      	str	r2, [sp, #60]	; 0x3c
    d6b6:	f7ff ba6c 	b.w	cb92 <_svfprintf_r+0x3c2>
    d6ba:	2140      	movs	r1, #64	; 0x40
    d6bc:	4658      	mov	r0, fp
    d6be:	f7fc ff49 	bl	a554 <_malloc_r>
    d6c2:	6020      	str	r0, [r4, #0]
    d6c4:	6120      	str	r0, [r4, #16]
    d6c6:	2800      	cmp	r0, #0
    d6c8:	f000 860f 	beq.w	e2ea <_svfprintf_r+0x1b1a>
    d6cc:	2340      	movs	r3, #64	; 0x40
    d6ce:	6163      	str	r3, [r4, #20]
    d6d0:	f7ff b89e 	b.w	c810 <_svfprintf_r+0x40>
    d6d4:	2d10      	cmp	r5, #16
    d6d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d6d8:	f340 825d 	ble.w	db96 <_svfprintf_r+0x13c6>
    d6dc:	4651      	mov	r1, sl
    d6de:	2610      	movs	r6, #16
    d6e0:	ee1b aa10 	vmov	sl, s22
    d6e4:	e004      	b.n	d6f0 <_svfprintf_r+0xf20>
    d6e6:	3108      	adds	r1, #8
    d6e8:	3d10      	subs	r5, #16
    d6ea:	2d10      	cmp	r5, #16
    d6ec:	f340 8252 	ble.w	db94 <_svfprintf_r+0x13c4>
    d6f0:	3301      	adds	r3, #1
    d6f2:	4866      	ldr	r0, [pc, #408]	; (d88c <_svfprintf_r+0x10bc>)
    d6f4:	3210      	adds	r2, #16
    d6f6:	2b07      	cmp	r3, #7
    d6f8:	e9c1 0600 	strd	r0, r6, [r1]
    d6fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d700:	ddf1      	ble.n	d6e6 <_svfprintf_r+0xf16>
    d702:	aa24      	add	r2, sp, #144	; 0x90
    d704:	4651      	mov	r1, sl
    d706:	4658      	mov	r0, fp
    d708:	f001 ff6a 	bl	f5e0 <__ssprint_r>
    d70c:	2800      	cmp	r0, #0
    d70e:	f47f acc4 	bne.w	d09a <_svfprintf_r+0x8ca>
    d712:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d716:	a927      	add	r1, sp, #156	; 0x9c
    d718:	e7e6      	b.n	d6e8 <_svfprintf_r+0xf18>
    d71a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d71c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    d720:	18e3      	adds	r3, r4, r3
    d722:	9303      	str	r3, [sp, #12]
    d724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d726:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    d72a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    d72c:	9d05      	ldr	r5, [sp, #20]
    d72e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    d732:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    d736:	940b      	str	r4, [sp, #44]	; 0x2c
    d738:	ee1b 1a10 	vmov	r1, s22
    d73c:	4650      	mov	r0, sl
    d73e:	2b00      	cmp	r3, #0
    d740:	d034      	beq.n	d7ac <_svfprintf_r+0xfdc>
    d742:	f1b8 0f00 	cmp.w	r8, #0
    d746:	d135      	bne.n	d7b4 <_svfprintf_r+0xfe4>
    d748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d74a:	3b01      	subs	r3, #1
    d74c:	3e01      	subs	r6, #1
    d74e:	930d      	str	r3, [sp, #52]	; 0x34
    d750:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d752:	e9c0 3900 	strd	r3, r9, [r0]
    d756:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d758:	3301      	adds	r3, #1
    d75a:	444a      	add	r2, r9
    d75c:	2b07      	cmp	r3, #7
    d75e:	9226      	str	r2, [sp, #152]	; 0x98
    d760:	9325      	str	r3, [sp, #148]	; 0x94
    d762:	dc6c      	bgt.n	d83e <_svfprintf_r+0x106e>
    d764:	3008      	adds	r0, #8
    d766:	9b03      	ldr	r3, [sp, #12]
    d768:	f896 c000 	ldrb.w	ip, [r6]
    d76c:	1b5b      	subs	r3, r3, r5
    d76e:	4563      	cmp	r3, ip
    d770:	bfa8      	it	ge
    d772:	4663      	movge	r3, ip
    d774:	2b00      	cmp	r3, #0
    d776:	469a      	mov	sl, r3
    d778:	dd0c      	ble.n	d794 <_svfprintf_r+0xfc4>
    d77a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    d77c:	3401      	adds	r4, #1
    d77e:	441a      	add	r2, r3
    d780:	2c07      	cmp	r4, #7
    d782:	e9c0 5300 	strd	r5, r3, [r0]
    d786:	9226      	str	r2, [sp, #152]	; 0x98
    d788:	9425      	str	r4, [sp, #148]	; 0x94
    d78a:	f300 8177 	bgt.w	da7c <_svfprintf_r+0x12ac>
    d78e:	f896 c000 	ldrb.w	ip, [r6]
    d792:	3008      	adds	r0, #8
    d794:	f1ba 0f00 	cmp.w	sl, #0
    d798:	bfac      	ite	ge
    d79a:	ebac 040a 	subge.w	r4, ip, sl
    d79e:	4664      	movlt	r4, ip
    d7a0:	2c00      	cmp	r4, #0
    d7a2:	dc0a      	bgt.n	d7ba <_svfprintf_r+0xfea>
    d7a4:	4465      	add	r5, ip
    d7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d7a8:	2b00      	cmp	r3, #0
    d7aa:	d1ca      	bne.n	d742 <_svfprintf_r+0xf72>
    d7ac:	f1b8 0f00 	cmp.w	r8, #0
    d7b0:	f000 83ac 	beq.w	df0c <_svfprintf_r+0x173c>
    d7b4:	f108 38ff 	add.w	r8, r8, #4294967295
    d7b8:	e7ca      	b.n	d750 <_svfprintf_r+0xf80>
    d7ba:	2c10      	cmp	r4, #16
    d7bc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    d7c0:	dd24      	ble.n	d80c <_svfprintf_r+0x103c>
    d7c2:	9505      	str	r5, [sp, #20]
    d7c4:	f04f 0a10 	mov.w	sl, #16
    d7c8:	4663      	mov	r3, ip
    d7ca:	460d      	mov	r5, r1
    d7cc:	e004      	b.n	d7d8 <_svfprintf_r+0x1008>
    d7ce:	3c10      	subs	r4, #16
    d7d0:	2c10      	cmp	r4, #16
    d7d2:	f100 0008 	add.w	r0, r0, #8
    d7d6:	dd16      	ble.n	d806 <_svfprintf_r+0x1036>
    d7d8:	3301      	adds	r3, #1
    d7da:	492c      	ldr	r1, [pc, #176]	; (d88c <_svfprintf_r+0x10bc>)
    d7dc:	3210      	adds	r2, #16
    d7de:	2b07      	cmp	r3, #7
    d7e0:	e9c0 1a00 	strd	r1, sl, [r0]
    d7e4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d7e8:	ddf1      	ble.n	d7ce <_svfprintf_r+0xffe>
    d7ea:	aa24      	add	r2, sp, #144	; 0x90
    d7ec:	4629      	mov	r1, r5
    d7ee:	4658      	mov	r0, fp
    d7f0:	f001 fef6 	bl	f5e0 <__ssprint_r>
    d7f4:	2800      	cmp	r0, #0
    d7f6:	f47f ac50 	bne.w	d09a <_svfprintf_r+0x8ca>
    d7fa:	3c10      	subs	r4, #16
    d7fc:	2c10      	cmp	r4, #16
    d7fe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d802:	a827      	add	r0, sp, #156	; 0x9c
    d804:	dce8      	bgt.n	d7d8 <_svfprintf_r+0x1008>
    d806:	4629      	mov	r1, r5
    d808:	9d05      	ldr	r5, [sp, #20]
    d80a:	469c      	mov	ip, r3
    d80c:	f10c 0301 	add.w	r3, ip, #1
    d810:	4422      	add	r2, r4
    d812:	6044      	str	r4, [r0, #4]
    d814:	2b07      	cmp	r3, #7
    d816:	4c1d      	ldr	r4, [pc, #116]	; (d88c <_svfprintf_r+0x10bc>)
    d818:	6004      	str	r4, [r0, #0]
    d81a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d81e:	f300 83c6 	bgt.w	dfae <_svfprintf_r+0x17de>
    d822:	f896 c000 	ldrb.w	ip, [r6]
    d826:	3008      	adds	r0, #8
    d828:	4465      	add	r5, ip
    d82a:	e7bc      	b.n	d7a6 <_svfprintf_r+0xfd6>
    d82c:	f018 0310 	ands.w	r3, r8, #16
    d830:	f000 80c2 	beq.w	d9b8 <_svfprintf_r+0x11e8>
    d834:	9b08      	ldr	r3, [sp, #32]
    d836:	f853 2b04 	ldr.w	r2, [r3], #4
    d83a:	9308      	str	r3, [sp, #32]
    d83c:	e6f9      	b.n	d632 <_svfprintf_r+0xe62>
    d83e:	aa24      	add	r2, sp, #144	; 0x90
    d840:	4658      	mov	r0, fp
    d842:	9105      	str	r1, [sp, #20]
    d844:	f001 fecc 	bl	f5e0 <__ssprint_r>
    d848:	2800      	cmp	r0, #0
    d84a:	f47f ac26 	bne.w	d09a <_svfprintf_r+0x8ca>
    d84e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d850:	9905      	ldr	r1, [sp, #20]
    d852:	a827      	add	r0, sp, #156	; 0x9c
    d854:	e787      	b.n	d766 <_svfprintf_r+0xf96>
    d856:	9802      	ldr	r0, [sp, #8]
    d858:	f8cd a01c 	str.w	sl, [sp, #28]
    d85c:	ac50      	add	r4, sp, #320	; 0x140
    d85e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    d862:	2500      	movs	r5, #0
    d864:	ee0a ba10 	vmov	s20, fp
    d868:	4b09      	ldr	r3, [pc, #36]	; (d890 <_svfprintf_r+0x10c0>)
    d86a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    d86e:	f8cd 9014 	str.w	r9, [sp, #20]
    d872:	46a3      	mov	fp, r4
    d874:	f04f 0805 	mov.w	r8, #5
    d878:	46ac      	mov	ip, r5
    d87a:	4604      	mov	r4, r0
    d87c:	e010      	b.n	d8a0 <_svfprintf_r+0x10d0>
    d87e:	bf00      	nop
    d880:	20000c94 	.word	0x20000c94
    d884:	20000ca8 	.word	0x20000ca8
    d888:	20000cbc 	.word	0x20000cbc
    d88c:	2000120c 	.word	0x2000120c
    d890:	cccccccd 	.word	0xcccccccd
    d894:	2a0a      	cmp	r2, #10
    d896:	f171 0100 	sbcs.w	r1, r1, #0
    d89a:	d336      	bcc.n	d90a <_svfprintf_r+0x113a>
    d89c:	464a      	mov	r2, r9
    d89e:	4631      	mov	r1, r6
    d8a0:	1850      	adds	r0, r2, r1
    d8a2:	f140 0000 	adc.w	r0, r0, #0
    d8a6:	fba3 5600 	umull	r5, r6, r3, r0
    d8aa:	f026 0503 	bic.w	r5, r6, #3
    d8ae:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    d8b2:	1b40      	subs	r0, r0, r5
    d8b4:	1a15      	subs	r5, r2, r0
    d8b6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    d8ba:	f161 0e00 	sbc.w	lr, r1, #0
    d8be:	fb06 f605 	mul.w	r6, r6, r5
    d8c2:	fba5 9503 	umull	r9, r5, r5, r3
    d8c6:	fb03 660e 	mla	r6, r3, lr, r6
    d8ca:	f009 0e01 	and.w	lr, r9, #1
    d8ce:	442e      	add	r6, r5
    d8d0:	fbae 5e08 	umull	r5, lr, lr, r8
    d8d4:	182d      	adds	r5, r5, r0
    d8d6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    d8da:	3530      	adds	r5, #48	; 0x30
    d8dc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    d8e0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    d8e4:	f10c 0c01 	add.w	ip, ip, #1
    d8e8:	f10b 3bff 	add.w	fp, fp, #4294967295
    d8ec:	0876      	lsrs	r6, r6, #1
    d8ee:	2c00      	cmp	r4, #0
    d8f0:	d0d0      	beq.n	d894 <_svfprintf_r+0x10c4>
    d8f2:	f89a 0000 	ldrb.w	r0, [sl]
    d8f6:	4584      	cmp	ip, r0
    d8f8:	d1cc      	bne.n	d894 <_svfprintf_r+0x10c4>
    d8fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    d8fe:	d0c9      	beq.n	d894 <_svfprintf_r+0x10c4>
    d900:	2a0a      	cmp	r2, #10
    d902:	f171 0100 	sbcs.w	r1, r1, #0
    d906:	f080 818f 	bcs.w	dc28 <_svfprintf_r+0x1458>
    d90a:	465c      	mov	r4, fp
    d90c:	ab50      	add	r3, sp, #320	; 0x140
    d90e:	1b1b      	subs	r3, r3, r4
    d910:	f8dd 9014 	ldr.w	r9, [sp, #20]
    d914:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    d918:	ee1a ba10 	vmov	fp, s20
    d91c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    d920:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d924:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    d928:	9305      	str	r3, [sp, #20]
    d92a:	f7ff bac2 	b.w	ceb2 <_svfprintf_r+0x6e2>
    d92e:	ee1b 1a10 	vmov	r1, s22
    d932:	aa24      	add	r2, sp, #144	; 0x90
    d934:	4658      	mov	r0, fp
    d936:	f001 fe53 	bl	f5e0 <__ssprint_r>
    d93a:	2800      	cmp	r0, #0
    d93c:	f47f abad 	bne.w	d09a <_svfprintf_r+0x8ca>
    d940:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d944:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d946:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d94a:	f7ff b896 	b.w	ca7a <_svfprintf_r+0x2aa>
    d94e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d950:	48be      	ldr	r0, [pc, #760]	; (dc4c <_svfprintf_r+0x147c>)
    d952:	f8ca 0000 	str.w	r0, [sl]
    d956:	3301      	adds	r3, #1
    d958:	3201      	adds	r2, #1
    d95a:	2001      	movs	r0, #1
    d95c:	2b07      	cmp	r3, #7
    d95e:	9226      	str	r2, [sp, #152]	; 0x98
    d960:	9325      	str	r3, [sp, #148]	; 0x94
    d962:	f8ca 0004 	str.w	r0, [sl, #4]
    d966:	f300 8177 	bgt.w	dc58 <_svfprintf_r+0x1488>
    d96a:	f10a 0a08 	add.w	sl, sl, #8
    d96e:	2900      	cmp	r1, #0
    d970:	f040 80af 	bne.w	dad2 <_svfprintf_r+0x1302>
    d974:	990e      	ldr	r1, [sp, #56]	; 0x38
    d976:	f008 0301 	and.w	r3, r8, #1
    d97a:	430b      	orrs	r3, r1
    d97c:	f43f a8c0 	beq.w	cb00 <_svfprintf_r+0x330>
    d980:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d982:	9912      	ldr	r1, [sp, #72]	; 0x48
    d984:	441a      	add	r2, r3
    d986:	e9ca 1300 	strd	r1, r3, [sl]
    d98a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d98c:	9226      	str	r2, [sp, #152]	; 0x98
    d98e:	3301      	adds	r3, #1
    d990:	2b07      	cmp	r3, #7
    d992:	9325      	str	r3, [sp, #148]	; 0x94
    d994:	f300 8252 	bgt.w	de3c <_svfprintf_r+0x166c>
    d998:	f10a 0a08 	add.w	sl, sl, #8
    d99c:	990e      	ldr	r1, [sp, #56]	; 0x38
    d99e:	f8ca 4000 	str.w	r4, [sl]
    d9a2:	3301      	adds	r3, #1
    d9a4:	440a      	add	r2, r1
    d9a6:	2b07      	cmp	r3, #7
    d9a8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d9ac:	f8ca 1004 	str.w	r1, [sl, #4]
    d9b0:	f77f a8a4 	ble.w	cafc <_svfprintf_r+0x32c>
    d9b4:	f7ff bbbd 	b.w	d132 <_svfprintf_r+0x962>
    d9b8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    d9bc:	f000 80dd 	beq.w	db7a <_svfprintf_r+0x13aa>
    d9c0:	9808      	ldr	r0, [sp, #32]
    d9c2:	f850 2b04 	ldr.w	r2, [r0], #4
    d9c6:	9008      	str	r0, [sp, #32]
    d9c8:	4619      	mov	r1, r3
    d9ca:	b292      	uxth	r2, r2
    d9cc:	e631      	b.n	d632 <_svfprintf_r+0xe62>
    d9ce:	ee1b 1a10 	vmov	r1, s22
    d9d2:	aa24      	add	r2, sp, #144	; 0x90
    d9d4:	4658      	mov	r0, fp
    d9d6:	f001 fe03 	bl	f5e0 <__ssprint_r>
    d9da:	2800      	cmp	r0, #0
    d9dc:	f47f ab5d 	bne.w	d09a <_svfprintf_r+0x8ca>
    d9e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d9e2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d9e6:	f7ff baa3 	b.w	cf30 <_svfprintf_r+0x760>
    d9ea:	ae22      	add	r6, sp, #136	; 0x88
    d9ec:	2208      	movs	r2, #8
    d9ee:	2100      	movs	r1, #0
    d9f0:	4630      	mov	r0, r6
    d9f2:	941d      	str	r4, [sp, #116]	; 0x74
    d9f4:	f7fd fda6 	bl	b544 <memset>
    d9f8:	9b03      	ldr	r3, [sp, #12]
    d9fa:	1c5a      	adds	r2, r3, #1
    d9fc:	f000 80db 	beq.w	dbb6 <_svfprintf_r+0x13e6>
    da00:	2500      	movs	r5, #0
    da02:	f8cd 9008 	str.w	r9, [sp, #8]
    da06:	f8cd 801c 	str.w	r8, [sp, #28]
    da0a:	4699      	mov	r9, r3
    da0c:	46a8      	mov	r8, r5
    da0e:	e00c      	b.n	da2a <_svfprintf_r+0x125a>
    da10:	a937      	add	r1, sp, #220	; 0xdc
    da12:	4658      	mov	r0, fp
    da14:	f001 fd9e 	bl	f554 <_wcrtomb_r>
    da18:	1c43      	adds	r3, r0, #1
    da1a:	4440      	add	r0, r8
    da1c:	f000 83c8 	beq.w	e1b0 <_svfprintf_r+0x19e0>
    da20:	4548      	cmp	r0, r9
    da22:	dc08      	bgt.n	da36 <_svfprintf_r+0x1266>
    da24:	f000 8418 	beq.w	e258 <_svfprintf_r+0x1a88>
    da28:	4680      	mov	r8, r0
    da2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    da2c:	5952      	ldr	r2, [r2, r5]
    da2e:	4633      	mov	r3, r6
    da30:	3504      	adds	r5, #4
    da32:	2a00      	cmp	r2, #0
    da34:	d1ec      	bne.n	da10 <_svfprintf_r+0x1240>
    da36:	f8cd 8014 	str.w	r8, [sp, #20]
    da3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    da3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    da42:	e0c5      	b.n	dbd0 <_svfprintf_r+0x1400>
    da44:	3301      	adds	r3, #1
    da46:	4982      	ldr	r1, [pc, #520]	; (dc50 <_svfprintf_r+0x1480>)
    da48:	f8ca 4004 	str.w	r4, [sl, #4]
    da4c:	4422      	add	r2, r4
    da4e:	2b07      	cmp	r3, #7
    da50:	f8ca 1000 	str.w	r1, [sl]
    da54:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da58:	f77f a850 	ble.w	cafc <_svfprintf_r+0x32c>
    da5c:	f7ff bb69 	b.w	d132 <_svfprintf_r+0x962>
    da60:	ee1b 1a10 	vmov	r1, s22
    da64:	aa24      	add	r2, sp, #144	; 0x90
    da66:	4658      	mov	r0, fp
    da68:	f001 fdba 	bl	f5e0 <__ssprint_r>
    da6c:	2800      	cmp	r0, #0
    da6e:	f47f ab14 	bne.w	d09a <_svfprintf_r+0x8ca>
    da72:	9a26      	ldr	r2, [sp, #152]	; 0x98
    da74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da78:	f7ff b829 	b.w	cace <_svfprintf_r+0x2fe>
    da7c:	aa24      	add	r2, sp, #144	; 0x90
    da7e:	4658      	mov	r0, fp
    da80:	9105      	str	r1, [sp, #20]
    da82:	f001 fdad 	bl	f5e0 <__ssprint_r>
    da86:	2800      	cmp	r0, #0
    da88:	f47f ab07 	bne.w	d09a <_svfprintf_r+0x8ca>
    da8c:	f896 c000 	ldrb.w	ip, [r6]
    da90:	9a26      	ldr	r2, [sp, #152]	; 0x98
    da92:	9905      	ldr	r1, [sp, #20]
    da94:	a827      	add	r0, sp, #156	; 0x9c
    da96:	e67d      	b.n	d794 <_svfprintf_r+0xfc4>
    da98:	2b01      	cmp	r3, #1
    da9a:	f8cd 8008 	str.w	r8, [sp, #8]
    da9e:	f47f a9f3 	bne.w	ce88 <_svfprintf_r+0x6b8>
    daa2:	f7ff bb93 	b.w	d1cc <_svfprintf_r+0x9fc>
    daa6:	9b08      	ldr	r3, [sp, #32]
    daa8:	9904      	ldr	r1, [sp, #16]
    daaa:	f853 2b04 	ldr.w	r2, [r3], #4
    daae:	464c      	mov	r4, r9
    dab0:	6011      	str	r1, [r2, #0]
    dab2:	9308      	str	r3, [sp, #32]
    dab4:	f7fe bebe 	b.w	c834 <_svfprintf_r+0x64>
    dab8:	3301      	adds	r3, #1
    daba:	4965      	ldr	r1, [pc, #404]	; (dc50 <_svfprintf_r+0x1480>)
    dabc:	f8ca 4004 	str.w	r4, [sl, #4]
    dac0:	4422      	add	r2, r4
    dac2:	2b07      	cmp	r3, #7
    dac4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dac8:	f8ca 1000 	str.w	r1, [sl]
    dacc:	f77f ab22 	ble.w	d114 <_svfprintf_r+0x944>
    dad0:	e47b      	b.n	d3ca <_svfprintf_r+0xbfa>
    dad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dad4:	9812      	ldr	r0, [sp, #72]	; 0x48
    dad6:	441a      	add	r2, r3
    dad8:	e9ca 0300 	strd	r0, r3, [sl]
    dadc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dade:	9226      	str	r2, [sp, #152]	; 0x98
    dae0:	3301      	adds	r3, #1
    dae2:	2b07      	cmp	r3, #7
    dae4:	9325      	str	r3, [sp, #148]	; 0x94
    dae6:	f300 81a9 	bgt.w	de3c <_svfprintf_r+0x166c>
    daea:	f10a 0a08 	add.w	sl, sl, #8
    daee:	2900      	cmp	r1, #0
    daf0:	f6bf af54 	bge.w	d99c <_svfprintf_r+0x11cc>
    daf4:	424d      	negs	r5, r1
    daf6:	3110      	adds	r1, #16
    daf8:	f280 830f 	bge.w	e11a <_svfprintf_r+0x194a>
    dafc:	ee1b 1a10 	vmov	r1, s22
    db00:	2610      	movs	r6, #16
    db02:	e005      	b.n	db10 <_svfprintf_r+0x1340>
    db04:	f10a 0a08 	add.w	sl, sl, #8
    db08:	3d10      	subs	r5, #16
    db0a:	2d10      	cmp	r5, #16
    db0c:	f340 8305 	ble.w	e11a <_svfprintf_r+0x194a>
    db10:	3301      	adds	r3, #1
    db12:	484f      	ldr	r0, [pc, #316]	; (dc50 <_svfprintf_r+0x1480>)
    db14:	3210      	adds	r2, #16
    db16:	2b07      	cmp	r3, #7
    db18:	e9ca 0600 	strd	r0, r6, [sl]
    db1c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    db20:	ddf0      	ble.n	db04 <_svfprintf_r+0x1334>
    db22:	aa24      	add	r2, sp, #144	; 0x90
    db24:	4658      	mov	r0, fp
    db26:	9103      	str	r1, [sp, #12]
    db28:	f001 fd5a 	bl	f5e0 <__ssprint_r>
    db2c:	2800      	cmp	r0, #0
    db2e:	f47f aab4 	bne.w	d09a <_svfprintf_r+0x8ca>
    db32:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    db36:	9903      	ldr	r1, [sp, #12]
    db38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db3c:	e7e4      	b.n	db08 <_svfprintf_r+0x1338>
    db3e:	9b08      	ldr	r3, [sp, #32]
    db40:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    db44:	bf1a      	itte	ne
    db46:	4611      	movne	r1, r2
    db48:	f853 2b04 	ldrne.w	r2, [r3], #4
    db4c:	f853 2b04 	ldreq.w	r2, [r3], #4
    db50:	9308      	str	r3, [sp, #32]
    db52:	bf18      	it	ne
    db54:	b2d2      	uxtbne	r2, r2
    db56:	f7ff b945 	b.w	cde4 <_svfprintf_r+0x614>
    db5a:	9b02      	ldr	r3, [sp, #8]
    db5c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    db60:	9b08      	ldr	r3, [sp, #32]
    db62:	bf1a      	itte	ne
    db64:	4611      	movne	r1, r2
    db66:	f853 2b04 	ldrne.w	r2, [r3], #4
    db6a:	f853 2b04 	ldreq.w	r2, [r3], #4
    db6e:	9308      	str	r3, [sp, #32]
    db70:	bf18      	it	ne
    db72:	b2d2      	uxtbne	r2, r2
    db74:	2301      	movs	r3, #1
    db76:	f7ff b8d0 	b.w	cd1a <_svfprintf_r+0x54a>
    db7a:	9b08      	ldr	r3, [sp, #32]
    db7c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    db80:	bf1a      	itte	ne
    db82:	4611      	movne	r1, r2
    db84:	f853 2b04 	ldrne.w	r2, [r3], #4
    db88:	f853 2b04 	ldreq.w	r2, [r3], #4
    db8c:	9308      	str	r3, [sp, #32]
    db8e:	bf18      	it	ne
    db90:	b2d2      	uxtbne	r2, r2
    db92:	e54e      	b.n	d632 <_svfprintf_r+0xe62>
    db94:	468a      	mov	sl, r1
    db96:	3301      	adds	r3, #1
    db98:	492d      	ldr	r1, [pc, #180]	; (dc50 <_svfprintf_r+0x1480>)
    db9a:	f8ca 5004 	str.w	r5, [sl, #4]
    db9e:	442a      	add	r2, r5
    dba0:	2b07      	cmp	r3, #7
    dba2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dba6:	f8ca 1000 	str.w	r1, [sl]
    dbaa:	f300 8139 	bgt.w	de20 <_svfprintf_r+0x1650>
    dbae:	f10a 0a08 	add.w	sl, sl, #8
    dbb2:	f7ff bb8c 	b.w	d2ce <_svfprintf_r+0xafe>
    dbb6:	2300      	movs	r3, #0
    dbb8:	4619      	mov	r1, r3
    dbba:	9600      	str	r6, [sp, #0]
    dbbc:	aa1d      	add	r2, sp, #116	; 0x74
    dbbe:	4658      	mov	r0, fp
    dbc0:	f001 fcee 	bl	f5a0 <_wcsrtombs_r>
    dbc4:	4603      	mov	r3, r0
    dbc6:	3301      	adds	r3, #1
    dbc8:	9005      	str	r0, [sp, #20]
    dbca:	f000 82f1 	beq.w	e1b0 <_svfprintf_r+0x19e0>
    dbce:	941d      	str	r4, [sp, #116]	; 0x74
    dbd0:	9b05      	ldr	r3, [sp, #20]
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	d04e      	beq.n	dc74 <_svfprintf_r+0x14a4>
    dbd6:	2b63      	cmp	r3, #99	; 0x63
    dbd8:	f300 8118 	bgt.w	de0c <_svfprintf_r+0x163c>
    dbdc:	2300      	movs	r3, #0
    dbde:	9307      	str	r3, [sp, #28]
    dbe0:	ac37      	add	r4, sp, #220	; 0xdc
    dbe2:	2208      	movs	r2, #8
    dbe4:	2100      	movs	r1, #0
    dbe6:	4630      	mov	r0, r6
    dbe8:	f7fd fcac 	bl	b544 <memset>
    dbec:	9d05      	ldr	r5, [sp, #20]
    dbee:	9600      	str	r6, [sp, #0]
    dbf0:	462b      	mov	r3, r5
    dbf2:	aa1d      	add	r2, sp, #116	; 0x74
    dbf4:	4621      	mov	r1, r4
    dbf6:	4658      	mov	r0, fp
    dbf8:	f001 fcd2 	bl	f5a0 <_wcsrtombs_r>
    dbfc:	4285      	cmp	r5, r0
    dbfe:	f040 837c 	bne.w	e2fa <_svfprintf_r+0x1b2a>
    dc02:	9a05      	ldr	r2, [sp, #20]
    dc04:	2300      	movs	r3, #0
    dc06:	54a3      	strb	r3, [r4, r2]
    dc08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    dc0c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dc10:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dc14:	9303      	str	r3, [sp, #12]
    dc16:	9202      	str	r2, [sp, #8]
    dc18:	930f      	str	r3, [sp, #60]	; 0x3c
    dc1a:	f7fe bfba 	b.w	cb92 <_svfprintf_r+0x3c2>
    dc1e:	212d      	movs	r1, #45	; 0x2d
    dc20:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dc24:	f7fe bfa4 	b.w	cb70 <_svfprintf_r+0x3a0>
    dc28:	9b16      	ldr	r3, [sp, #88]	; 0x58
    dc2a:	9915      	ldr	r1, [sp, #84]	; 0x54
    dc2c:	ebab 0b03 	sub.w	fp, fp, r3
    dc30:	461a      	mov	r2, r3
    dc32:	4658      	mov	r0, fp
    dc34:	f7fd fd3e 	bl	b6b4 <strncpy>
    dc38:	f89a 2001 	ldrb.w	r2, [sl, #1]
    dc3c:	4b05      	ldr	r3, [pc, #20]	; (dc54 <_svfprintf_r+0x1484>)
    dc3e:	b10a      	cbz	r2, dc44 <_svfprintf_r+0x1474>
    dc40:	f10a 0a01 	add.w	sl, sl, #1
    dc44:	f04f 0c00 	mov.w	ip, #0
    dc48:	e628      	b.n	d89c <_svfprintf_r+0x10cc>
    dc4a:	bf00      	nop
    dc4c:	20000cc4 	.word	0x20000cc4
    dc50:	2000120c 	.word	0x2000120c
    dc54:	cccccccd 	.word	0xcccccccd
    dc58:	ee1b 1a10 	vmov	r1, s22
    dc5c:	aa24      	add	r2, sp, #144	; 0x90
    dc5e:	4658      	mov	r0, fp
    dc60:	f001 fcbe 	bl	f5e0 <__ssprint_r>
    dc64:	2800      	cmp	r0, #0
    dc66:	f47f aa18 	bne.w	d09a <_svfprintf_r+0x8ca>
    dc6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    dc6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dc6e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc72:	e67c      	b.n	d96e <_svfprintf_r+0x119e>
    dc74:	9b05      	ldr	r3, [sp, #20]
    dc76:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dc7a:	930f      	str	r3, [sp, #60]	; 0x3c
    dc7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    dc80:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    dc84:	9307      	str	r3, [sp, #28]
    dc86:	f7fe bf84 	b.w	cb92 <_svfprintf_r+0x3c2>
    dc8a:	990e      	ldr	r1, [sp, #56]	; 0x38
    dc8c:	9805      	ldr	r0, [sp, #20]
    dc8e:	1865      	adds	r5, r4, r1
    dc90:	1a2d      	subs	r5, r5, r0
    dc92:	1acc      	subs	r4, r1, r3
    dc94:	42a5      	cmp	r5, r4
    dc96:	bfa8      	it	ge
    dc98:	4625      	movge	r5, r4
    dc9a:	f7ff bb4d 	b.w	d338 <_svfprintf_r+0xb68>
    dc9e:	9b08      	ldr	r3, [sp, #32]
    dca0:	9904      	ldr	r1, [sp, #16]
    dca2:	f853 2b04 	ldr.w	r2, [r3], #4
    dca6:	9308      	str	r3, [sp, #32]
    dca8:	8011      	strh	r1, [r2, #0]
    dcaa:	464c      	mov	r4, r9
    dcac:	f7fe bdc2 	b.w	c834 <_svfprintf_r+0x64>
    dcb0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    dcb4:	9308      	str	r3, [sp, #32]
    dcb6:	17d1      	asrs	r1, r2, #31
    dcb8:	460b      	mov	r3, r1
    dcba:	f7fe bfdb 	b.w	cc74 <_svfprintf_r+0x4a4>
    dcbe:	9a03      	ldr	r2, [sp, #12]
    dcc0:	2102      	movs	r1, #2
    dcc2:	ab22      	add	r3, sp, #136	; 0x88
    dcc4:	9301      	str	r3, [sp, #4]
    dcc6:	ab1d      	add	r3, sp, #116	; 0x74
    dcc8:	9300      	str	r3, [sp, #0]
    dcca:	4658      	mov	r0, fp
    dccc:	ab1b      	add	r3, sp, #108	; 0x6c
    dcce:	eeb0 0b4a 	vmov.f64	d0, d10
    dcd2:	9202      	str	r2, [sp, #8]
    dcd4:	f000 fdc8 	bl	e868 <_dtoa_r>
    dcd8:	2d47      	cmp	r5, #71	; 0x47
    dcda:	9a02      	ldr	r2, [sp, #8]
    dcdc:	4604      	mov	r4, r0
    dcde:	f000 8161 	beq.w	dfa4 <_svfprintf_r+0x17d4>
    dce2:	2d46      	cmp	r5, #70	; 0x46
    dce4:	4410      	add	r0, r2
    dce6:	d105      	bne.n	dcf4 <_svfprintf_r+0x1524>
    dce8:	7823      	ldrb	r3, [r4, #0]
    dcea:	2b30      	cmp	r3, #48	; 0x30
    dcec:	f000 826f 	beq.w	e1ce <_svfprintf_r+0x19fe>
    dcf0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    dcf2:	4410      	add	r0, r2
    dcf4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    dcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dcfc:	f040 8146 	bne.w	df8c <_svfprintf_r+0x17bc>
    dd00:	4603      	mov	r3, r0
    dd02:	1b1b      	subs	r3, r3, r4
    dd04:	930e      	str	r3, [sp, #56]	; 0x38
    dd06:	2d47      	cmp	r5, #71	; 0x47
    dd08:	f000 8110 	beq.w	df2c <_svfprintf_r+0x175c>
    dd0c:	2d46      	cmp	r5, #70	; 0x46
    dd0e:	f000 81b5 	beq.w	e07c <_svfprintf_r+0x18ac>
    dd12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dd14:	930c      	str	r3, [sp, #48]	; 0x30
    dd16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd18:	2d41      	cmp	r5, #65	; 0x41
    dd1a:	f103 33ff 	add.w	r3, r3, #4294967295
    dd1e:	931b      	str	r3, [sp, #108]	; 0x6c
    dd20:	f000 81e5 	beq.w	e0ee <_svfprintf_r+0x191e>
    dd24:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    dd28:	2100      	movs	r1, #0
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	bfb8      	it	lt
    dd2e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    dd30:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    dd34:	bfba      	itte	lt
    dd36:	f1c3 0301 	rsblt	r3, r3, #1
    dd3a:	222d      	movlt	r2, #45	; 0x2d
    dd3c:	222b      	movge	r2, #43	; 0x2b
    dd3e:	2b09      	cmp	r3, #9
    dd40:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    dd44:	f340 81da 	ble.w	e0fc <_svfprintf_r+0x192c>
    dd48:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    dd4c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; e16c <_svfprintf_r+0x199c>
    dd50:	462a      	mov	r2, r5
    dd52:	4610      	mov	r0, r2
    dd54:	fb8c 2103 	smull	r2, r1, ip, r3
    dd58:	17da      	asrs	r2, r3, #31
    dd5a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    dd5e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    dd62:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    dd66:	3130      	adds	r1, #48	; 0x30
    dd68:	f800 1c01 	strb.w	r1, [r0, #-1]
    dd6c:	4619      	mov	r1, r3
    dd6e:	2963      	cmp	r1, #99	; 0x63
    dd70:	4613      	mov	r3, r2
    dd72:	f100 32ff 	add.w	r2, r0, #4294967295
    dd76:	dcec      	bgt.n	dd52 <_svfprintf_r+0x1582>
    dd78:	3330      	adds	r3, #48	; 0x30
    dd7a:	b2d9      	uxtb	r1, r3
    dd7c:	1e83      	subs	r3, r0, #2
    dd7e:	429d      	cmp	r5, r3
    dd80:	f802 1c01 	strb.w	r1, [r2, #-1]
    dd84:	f240 828b 	bls.w	e29e <_svfprintf_r+0x1ace>
    dd88:	4613      	mov	r3, r2
    dd8a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    dd8e:	e001      	b.n	dd94 <_svfprintf_r+0x15c4>
    dd90:	f813 1b01 	ldrb.w	r1, [r3], #1
    dd94:	f802 1b01 	strb.w	r1, [r2], #1
    dd98:	429d      	cmp	r5, r3
    dd9a:	d1f9      	bne.n	dd90 <_svfprintf_r+0x15c0>
    dd9c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    dda0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    dda4:	1a1b      	subs	r3, r3, r0
    dda6:	4413      	add	r3, r2
    dda8:	aa1e      	add	r2, sp, #120	; 0x78
    ddaa:	1a9b      	subs	r3, r3, r2
    ddac:	9314      	str	r3, [sp, #80]	; 0x50
    ddae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ddb2:	2b01      	cmp	r3, #1
    ddb4:	441a      	add	r2, r3
    ddb6:	9205      	str	r2, [sp, #20]
    ddb8:	f340 8203 	ble.w	e1c2 <_svfprintf_r+0x19f2>
    ddbc:	9b05      	ldr	r3, [sp, #20]
    ddbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ddc0:	4413      	add	r3, r2
    ddc2:	9305      	str	r3, [sp, #20]
    ddc4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    ddc8:	9a05      	ldr	r2, [sp, #20]
    ddca:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    ddce:	2300      	movs	r3, #0
    ddd0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ddd4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    ddd8:	930f      	str	r3, [sp, #60]	; 0x3c
    ddda:	9202      	str	r2, [sp, #8]
    dddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddde:	2b00      	cmp	r3, #0
    dde0:	f040 80b1 	bne.w	df46 <_svfprintf_r+0x1776>
    dde4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dde8:	9303      	str	r3, [sp, #12]
    ddea:	f7fe bed2 	b.w	cb92 <_svfprintf_r+0x3c2>
    ddee:	4620      	mov	r0, r4
    ddf0:	f7fd ff06 	bl	bc00 <strlen>
    ddf4:	4602      	mov	r2, r0
    ddf6:	9005      	str	r0, [sp, #20]
    ddf8:	f7fe bf20 	b.w	cc3c <_svfprintf_r+0x46c>
    ddfc:	ee1b 1a10 	vmov	r1, s22
    de00:	aa24      	add	r2, sp, #144	; 0x90
    de02:	4658      	mov	r0, fp
    de04:	f001 fbec 	bl	f5e0 <__ssprint_r>
    de08:	f7fe bded 	b.w	c9e6 <_svfprintf_r+0x216>
    de0c:	1c59      	adds	r1, r3, #1
    de0e:	4658      	mov	r0, fp
    de10:	f7fc fba0 	bl	a554 <_malloc_r>
    de14:	4604      	mov	r4, r0
    de16:	2800      	cmp	r0, #0
    de18:	f000 81ca 	beq.w	e1b0 <_svfprintf_r+0x19e0>
    de1c:	9007      	str	r0, [sp, #28]
    de1e:	e6e0      	b.n	dbe2 <_svfprintf_r+0x1412>
    de20:	ee1b 1a10 	vmov	r1, s22
    de24:	aa24      	add	r2, sp, #144	; 0x90
    de26:	4658      	mov	r0, fp
    de28:	f001 fbda 	bl	f5e0 <__ssprint_r>
    de2c:	2800      	cmp	r0, #0
    de2e:	f47f a934 	bne.w	d09a <_svfprintf_r+0x8ca>
    de32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    de34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de38:	f7ff ba49 	b.w	d2ce <_svfprintf_r+0xafe>
    de3c:	ee1b 1a10 	vmov	r1, s22
    de40:	aa24      	add	r2, sp, #144	; 0x90
    de42:	4658      	mov	r0, fp
    de44:	f001 fbcc 	bl	f5e0 <__ssprint_r>
    de48:	2800      	cmp	r0, #0
    de4a:	f47f a926 	bne.w	d09a <_svfprintf_r+0x8ca>
    de4e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    de52:	991b      	ldr	r1, [sp, #108]	; 0x6c
    de54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de58:	e649      	b.n	daee <_svfprintf_r+0x131e>
    de5a:	2306      	movs	r3, #6
    de5c:	9303      	str	r3, [sp, #12]
    de5e:	f7ff bb83 	b.w	d568 <_svfprintf_r+0xd98>
    de62:	9b03      	ldr	r3, [sp, #12]
    de64:	2102      	movs	r1, #2
    de66:	1c5a      	adds	r2, r3, #1
    de68:	e72b      	b.n	dcc2 <_svfprintf_r+0x14f2>
    de6a:	9a03      	ldr	r2, [sp, #12]
    de6c:	2103      	movs	r1, #3
    de6e:	e728      	b.n	dcc2 <_svfprintf_r+0x14f2>
    de70:	a81b      	add	r0, sp, #108	; 0x6c
    de72:	eeb0 0b4a 	vmov.f64	d0, d10
    de76:	f000 fbcb 	bl	e610 <frexp>
    de7a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    de7e:	ee20 0b07 	vmul.f64	d0, d0, d7
    de82:	eeb5 0b40 	vcmp.f64	d0, #0.0
    de86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de8a:	d101      	bne.n	de90 <_svfprintf_r+0x16c0>
    de8c:	2301      	movs	r3, #1
    de8e:	931b      	str	r3, [sp, #108]	; 0x6c
    de90:	48b3      	ldr	r0, [pc, #716]	; (e160 <_svfprintf_r+0x1990>)
    de92:	9b03      	ldr	r3, [sp, #12]
    de94:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    de98:	3b01      	subs	r3, #1
    de9a:	4622      	mov	r2, r4
    de9c:	e004      	b.n	dea8 <_svfprintf_r+0x16d8>
    de9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    dea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dea6:	d013      	beq.n	ded0 <_svfprintf_r+0x1700>
    dea8:	ee20 0b05 	vmul.f64	d0, d0, d5
    deac:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    deb0:	f1b3 3fff 	cmp.w	r3, #4294967295
    deb4:	ee17 1a90 	vmov	r1, s15
    deb8:	5c41      	ldrb	r1, [r0, r1]
    deba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    debe:	4694      	mov	ip, r2
    dec0:	ee30 0b46 	vsub.f64	d0, d0, d6
    dec4:	f802 1b01 	strb.w	r1, [r2], #1
    dec8:	4619      	mov	r1, r3
    deca:	f103 33ff 	add.w	r3, r3, #4294967295
    dece:	d1e6      	bne.n	de9e <_svfprintf_r+0x16ce>
    ded0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ded4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dedc:	f300 8148 	bgt.w	e170 <_svfprintf_r+0x19a0>
    dee0:	eeb4 0b46 	vcmp.f64	d0, d6
    dee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dee8:	d104      	bne.n	def4 <_svfprintf_r+0x1724>
    deea:	ee17 3a90 	vmov	r3, s15
    deee:	07db      	lsls	r3, r3, #31
    def0:	f100 813e 	bmi.w	e170 <_svfprintf_r+0x19a0>
    def4:	2900      	cmp	r1, #0
    def6:	db06      	blt.n	df06 <_svfprintf_r+0x1736>
    def8:	1c4b      	adds	r3, r1, #1
    defa:	4413      	add	r3, r2
    defc:	2130      	movs	r1, #48	; 0x30
    defe:	f802 1b01 	strb.w	r1, [r2], #1
    df02:	4293      	cmp	r3, r2
    df04:	d1fb      	bne.n	defe <_svfprintf_r+0x172e>
    df06:	1b13      	subs	r3, r2, r4
    df08:	930e      	str	r3, [sp, #56]	; 0x38
    df0a:	e6fc      	b.n	dd06 <_svfprintf_r+0x1536>
    df0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    df0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    df10:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    df14:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    df18:	9613      	str	r6, [sp, #76]	; 0x4c
    df1a:	18e3      	adds	r3, r4, r3
    df1c:	429d      	cmp	r5, r3
    df1e:	4629      	mov	r1, r5
    df20:	bf28      	it	cs
    df22:	4619      	movcs	r1, r3
    df24:	4682      	mov	sl, r0
    df26:	9105      	str	r1, [sp, #20]
    df28:	f7ff b9d8 	b.w	d2dc <_svfprintf_r+0xb0c>
    df2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    df2e:	930c      	str	r3, [sp, #48]	; 0x30
    df30:	1cda      	adds	r2, r3, #3
    df32:	db02      	blt.n	df3a <_svfprintf_r+0x176a>
    df34:	9a03      	ldr	r2, [sp, #12]
    df36:	4293      	cmp	r3, r2
    df38:	dd0c      	ble.n	df54 <_svfprintf_r+0x1784>
    df3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df3c:	3b02      	subs	r3, #2
    df3e:	930b      	str	r3, [sp, #44]	; 0x2c
    df40:	f023 0520 	bic.w	r5, r3, #32
    df44:	e6e7      	b.n	dd16 <_svfprintf_r+0x1546>
    df46:	212d      	movs	r1, #45	; 0x2d
    df48:	2300      	movs	r3, #0
    df4a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    df4e:	9303      	str	r3, [sp, #12]
    df50:	f7fe be22 	b.w	cb98 <_svfprintf_r+0x3c8>
    df54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    df58:	4293      	cmp	r3, r2
    df5a:	f2c0 80bd 	blt.w	e0d8 <_svfprintf_r+0x1908>
    df5e:	07f0      	lsls	r0, r6, #31
    df60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df62:	f140 8132 	bpl.w	e1ca <_svfprintf_r+0x19fa>
    df66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    df68:	4413      	add	r3, r2
    df6a:	9305      	str	r3, [sp, #20]
    df6c:	0571      	lsls	r1, r6, #21
    df6e:	d503      	bpl.n	df78 <_svfprintf_r+0x17a8>
    df70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df72:	2b00      	cmp	r3, #0
    df74:	f300 8135 	bgt.w	e1e2 <_svfprintf_r+0x1a12>
    df78:	9b05      	ldr	r3, [sp, #20]
    df7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    df7e:	9302      	str	r3, [sp, #8]
    df80:	2367      	movs	r3, #103	; 0x67
    df82:	930b      	str	r3, [sp, #44]	; 0x2c
    df84:	2300      	movs	r3, #0
    df86:	930f      	str	r3, [sp, #60]	; 0x3c
    df88:	930d      	str	r3, [sp, #52]	; 0x34
    df8a:	e727      	b.n	dddc <_svfprintf_r+0x160c>
    df8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df8e:	4283      	cmp	r3, r0
    df90:	f4bf aeb7 	bcs.w	dd02 <_svfprintf_r+0x1532>
    df94:	2130      	movs	r1, #48	; 0x30
    df96:	1c5a      	adds	r2, r3, #1
    df98:	9222      	str	r2, [sp, #136]	; 0x88
    df9a:	7019      	strb	r1, [r3, #0]
    df9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df9e:	4298      	cmp	r0, r3
    dfa0:	d8f9      	bhi.n	df96 <_svfprintf_r+0x17c6>
    dfa2:	e6ae      	b.n	dd02 <_svfprintf_r+0x1532>
    dfa4:	07f3      	lsls	r3, r6, #31
    dfa6:	f100 80a7 	bmi.w	e0f8 <_svfprintf_r+0x1928>
    dfaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    dfac:	e6a9      	b.n	dd02 <_svfprintf_r+0x1532>
    dfae:	aa24      	add	r2, sp, #144	; 0x90
    dfb0:	4658      	mov	r0, fp
    dfb2:	9105      	str	r1, [sp, #20]
    dfb4:	f001 fb14 	bl	f5e0 <__ssprint_r>
    dfb8:	2800      	cmp	r0, #0
    dfba:	f47f a86e 	bne.w	d09a <_svfprintf_r+0x8ca>
    dfbe:	f896 c000 	ldrb.w	ip, [r6]
    dfc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dfc4:	9905      	ldr	r1, [sp, #20]
    dfc6:	a827      	add	r0, sp, #156	; 0x9c
    dfc8:	4465      	add	r5, ip
    dfca:	f7ff bbec 	b.w	d7a6 <_svfprintf_r+0xfd6>
    dfce:	ee1b 1a10 	vmov	r1, s22
    dfd2:	aa24      	add	r2, sp, #144	; 0x90
    dfd4:	4658      	mov	r0, fp
    dfd6:	f001 fb03 	bl	f5e0 <__ssprint_r>
    dfda:	2800      	cmp	r0, #0
    dfdc:	f47f a85d 	bne.w	d09a <_svfprintf_r+0x8ca>
    dfe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dfe2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfe6:	f7ff b96b 	b.w	d2c0 <_svfprintf_r+0xaf0>
    dfea:	2378      	movs	r3, #120	; 0x78
    dfec:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    dff0:	2330      	movs	r3, #48	; 0x30
    dff2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    dff6:	9b03      	ldr	r3, [sp, #12]
    dff8:	2b63      	cmp	r3, #99	; 0x63
    dffa:	f048 0602 	orr.w	r6, r8, #2
    dffe:	f300 80a6 	bgt.w	e14e <_svfprintf_r+0x197e>
    e002:	2300      	movs	r3, #0
    e004:	9307      	str	r3, [sp, #28]
    e006:	ac37      	add	r4, sp, #220	; 0xdc
    e008:	ee18 3a90 	vmov	r3, s17
    e00c:	2b00      	cmp	r3, #0
    e00e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e012:	db2b      	blt.n	e06c <_svfprintf_r+0x189c>
    e014:	eeb0 ab48 	vmov.f64	d10, d8
    e018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e01a:	f023 0520 	bic.w	r5, r3, #32
    e01e:	2300      	movs	r3, #0
    e020:	9309      	str	r3, [sp, #36]	; 0x24
    e022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e024:	2b61      	cmp	r3, #97	; 0x61
    e026:	f47f aaad 	bne.w	d584 <_svfprintf_r+0xdb4>
    e02a:	eeb0 0b4a 	vmov.f64	d0, d10
    e02e:	a81b      	add	r0, sp, #108	; 0x6c
    e030:	f000 faee 	bl	e610 <frexp>
    e034:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e038:	ee20 0b07 	vmul.f64	d0, d0, d7
    e03c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e044:	d101      	bne.n	e04a <_svfprintf_r+0x187a>
    e046:	2301      	movs	r3, #1
    e048:	931b      	str	r3, [sp, #108]	; 0x6c
    e04a:	4846      	ldr	r0, [pc, #280]	; (e164 <_svfprintf_r+0x1994>)
    e04c:	e721      	b.n	de92 <_svfprintf_r+0x16c2>
    e04e:	ee1b 1a10 	vmov	r1, s22
    e052:	aa24      	add	r2, sp, #144	; 0x90
    e054:	4658      	mov	r0, fp
    e056:	f001 fac3 	bl	f5e0 <__ssprint_r>
    e05a:	2800      	cmp	r0, #0
    e05c:	f47f a81d 	bne.w	d09a <_svfprintf_r+0x8ca>
    e060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e062:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e064:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e068:	f7ff b94e 	b.w	d308 <_svfprintf_r+0xb38>
    e06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e06e:	f023 0520 	bic.w	r5, r3, #32
    e072:	232d      	movs	r3, #45	; 0x2d
    e074:	9309      	str	r3, [sp, #36]	; 0x24
    e076:	eeb1 ab48 	vneg.f64	d10, d8
    e07a:	e7d2      	b.n	e022 <_svfprintf_r+0x1852>
    e07c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e07e:	920c      	str	r2, [sp, #48]	; 0x30
    e080:	2a00      	cmp	r2, #0
    e082:	f006 0301 	and.w	r3, r6, #1
    e086:	f340 810d 	ble.w	e2a4 <_svfprintf_r+0x1ad4>
    e08a:	9903      	ldr	r1, [sp, #12]
    e08c:	430b      	orrs	r3, r1
    e08e:	f040 80cf 	bne.w	e230 <_svfprintf_r+0x1a60>
    e092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e094:	9305      	str	r3, [sp, #20]
    e096:	2366      	movs	r3, #102	; 0x66
    e098:	930b      	str	r3, [sp, #44]	; 0x2c
    e09a:	0572      	lsls	r2, r6, #21
    e09c:	f100 80a3 	bmi.w	e1e6 <_svfprintf_r+0x1a16>
    e0a0:	9b05      	ldr	r3, [sp, #20]
    e0a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e0a6:	9302      	str	r3, [sp, #8]
    e0a8:	e76c      	b.n	df84 <_svfprintf_r+0x17b4>
    e0aa:	ee1b 1a10 	vmov	r1, s22
    e0ae:	aa24      	add	r2, sp, #144	; 0x90
    e0b0:	4658      	mov	r0, fp
    e0b2:	f001 fa95 	bl	f5e0 <__ssprint_r>
    e0b6:	2800      	cmp	r0, #0
    e0b8:	f47e afef 	bne.w	d09a <_svfprintf_r+0x8ca>
    e0bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e0be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e0c2:	1b1c      	subs	r4, r3, r4
    e0c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0c8:	f7ff b936 	b.w	d338 <_svfprintf_r+0xb68>
    e0cc:	2358      	movs	r3, #88	; 0x58
    e0ce:	e78d      	b.n	dfec <_svfprintf_r+0x181c>
    e0d0:	2200      	movs	r2, #0
    e0d2:	9203      	str	r2, [sp, #12]
    e0d4:	f7fe bbda 	b.w	c88c <_svfprintf_r+0xbc>
    e0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e0dc:	189a      	adds	r2, r3, r2
    e0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e0e0:	9205      	str	r2, [sp, #20]
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	f340 80ab 	ble.w	e23e <_svfprintf_r+0x1a6e>
    e0e8:	2367      	movs	r3, #103	; 0x67
    e0ea:	930b      	str	r3, [sp, #44]	; 0x2c
    e0ec:	e7d5      	b.n	e09a <_svfprintf_r+0x18ca>
    e0ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e0f0:	320f      	adds	r2, #15
    e0f2:	b2d2      	uxtb	r2, r2
    e0f4:	2101      	movs	r1, #1
    e0f6:	e618      	b.n	dd2a <_svfprintf_r+0x155a>
    e0f8:	18a0      	adds	r0, r4, r2
    e0fa:	e5fb      	b.n	dcf4 <_svfprintf_r+0x1524>
    e0fc:	2900      	cmp	r1, #0
    e0fe:	f040 80a8 	bne.w	e252 <_svfprintf_r+0x1a82>
    e102:	2230      	movs	r2, #48	; 0x30
    e104:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    e108:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    e10c:	3330      	adds	r3, #48	; 0x30
    e10e:	f802 3b01 	strb.w	r3, [r2], #1
    e112:	ab1e      	add	r3, sp, #120	; 0x78
    e114:	1ad3      	subs	r3, r2, r3
    e116:	9314      	str	r3, [sp, #80]	; 0x50
    e118:	e649      	b.n	ddae <_svfprintf_r+0x15de>
    e11a:	3301      	adds	r3, #1
    e11c:	4912      	ldr	r1, [pc, #72]	; (e168 <_svfprintf_r+0x1998>)
    e11e:	f8ca 5004 	str.w	r5, [sl, #4]
    e122:	442a      	add	r2, r5
    e124:	2b07      	cmp	r3, #7
    e126:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e12a:	f8ca 1000 	str.w	r1, [sl]
    e12e:	f77f ac33 	ble.w	d998 <_svfprintf_r+0x11c8>
    e132:	ee1b 1a10 	vmov	r1, s22
    e136:	aa24      	add	r2, sp, #144	; 0x90
    e138:	4658      	mov	r0, fp
    e13a:	f001 fa51 	bl	f5e0 <__ssprint_r>
    e13e:	2800      	cmp	r0, #0
    e140:	f47e afab 	bne.w	d09a <_svfprintf_r+0x8ca>
    e144:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e148:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e14c:	e426      	b.n	d99c <_svfprintf_r+0x11cc>
    e14e:	1c59      	adds	r1, r3, #1
    e150:	4658      	mov	r0, fp
    e152:	f7fc f9ff 	bl	a554 <_malloc_r>
    e156:	4604      	mov	r4, r0
    e158:	b350      	cbz	r0, e1b0 <_svfprintf_r+0x19e0>
    e15a:	9007      	str	r0, [sp, #28]
    e15c:	e754      	b.n	e008 <_svfprintf_r+0x1838>
    e15e:	bf00      	nop
    e160:	20000ca8 	.word	0x20000ca8
    e164:	20000c94 	.word	0x20000c94
    e168:	2000120c 	.word	0x2000120c
    e16c:	66666667 	.word	0x66666667
    e170:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    e174:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    e178:	f890 c00f 	ldrb.w	ip, [r0, #15]
    e17c:	4561      	cmp	r1, ip
    e17e:	4613      	mov	r3, r2
    e180:	d10a      	bne.n	e198 <_svfprintf_r+0x19c8>
    e182:	f04f 0e30 	mov.w	lr, #48	; 0x30
    e186:	f803 ec01 	strb.w	lr, [r3, #-1]
    e18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e18c:	1e59      	subs	r1, r3, #1
    e18e:	9122      	str	r1, [sp, #136]	; 0x88
    e190:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    e194:	458c      	cmp	ip, r1
    e196:	d0f6      	beq.n	e186 <_svfprintf_r+0x19b6>
    e198:	2939      	cmp	r1, #57	; 0x39
    e19a:	bf16      	itet	ne
    e19c:	3101      	addne	r1, #1
    e19e:	7a81      	ldrbeq	r1, [r0, #10]
    e1a0:	b2c9      	uxtbne	r1, r1
    e1a2:	f803 1c01 	strb.w	r1, [r3, #-1]
    e1a6:	e6ae      	b.n	df06 <_svfprintf_r+0x1736>
    e1a8:	2300      	movs	r3, #0
    e1aa:	4690      	mov	r8, r2
    e1ac:	9307      	str	r3, [sp, #28]
    e1ae:	e760      	b.n	e072 <_svfprintf_r+0x18a2>
    e1b0:	ee1b 2a10 	vmov	r2, s22
    e1b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e1bc:	8193      	strh	r3, [r2, #12]
    e1be:	f7fe bc16 	b.w	c9ee <_svfprintf_r+0x21e>
    e1c2:	07f5      	lsls	r5, r6, #31
    e1c4:	f57f adfe 	bpl.w	ddc4 <_svfprintf_r+0x15f4>
    e1c8:	e5f8      	b.n	ddbc <_svfprintf_r+0x15ec>
    e1ca:	9305      	str	r3, [sp, #20]
    e1cc:	e6ce      	b.n	df6c <_svfprintf_r+0x179c>
    e1ce:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e1d6:	f43f ad8b 	beq.w	dcf0 <_svfprintf_r+0x1520>
    e1da:	f1c2 0201 	rsb	r2, r2, #1
    e1de:	921b      	str	r2, [sp, #108]	; 0x6c
    e1e0:	e587      	b.n	dcf2 <_svfprintf_r+0x1522>
    e1e2:	2367      	movs	r3, #103	; 0x67
    e1e4:	930b      	str	r3, [sp, #44]	; 0x2c
    e1e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e1e8:	780b      	ldrb	r3, [r1, #0]
    e1ea:	2bff      	cmp	r3, #255	; 0xff
    e1ec:	d079      	beq.n	e2e2 <_svfprintf_r+0x1b12>
    e1ee:	2500      	movs	r5, #0
    e1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e1f2:	4628      	mov	r0, r5
    e1f4:	e003      	b.n	e1fe <_svfprintf_r+0x1a2e>
    e1f6:	3001      	adds	r0, #1
    e1f8:	3101      	adds	r1, #1
    e1fa:	2bff      	cmp	r3, #255	; 0xff
    e1fc:	d008      	beq.n	e210 <_svfprintf_r+0x1a40>
    e1fe:	4293      	cmp	r3, r2
    e200:	da06      	bge.n	e210 <_svfprintf_r+0x1a40>
    e202:	1ad2      	subs	r2, r2, r3
    e204:	784b      	ldrb	r3, [r1, #1]
    e206:	2b00      	cmp	r3, #0
    e208:	d1f5      	bne.n	e1f6 <_svfprintf_r+0x1a26>
    e20a:	780b      	ldrb	r3, [r1, #0]
    e20c:	3501      	adds	r5, #1
    e20e:	e7f4      	b.n	e1fa <_svfprintf_r+0x1a2a>
    e210:	920c      	str	r2, [sp, #48]	; 0x30
    e212:	9113      	str	r1, [sp, #76]	; 0x4c
    e214:	900d      	str	r0, [sp, #52]	; 0x34
    e216:	950f      	str	r5, [sp, #60]	; 0x3c
    e218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e21c:	9916      	ldr	r1, [sp, #88]	; 0x58
    e21e:	4413      	add	r3, r2
    e220:	9a05      	ldr	r2, [sp, #20]
    e222:	fb01 2303 	mla	r3, r1, r3, r2
    e226:	9305      	str	r3, [sp, #20]
    e228:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e22c:	9302      	str	r3, [sp, #8]
    e22e:	e5d5      	b.n	dddc <_svfprintf_r+0x160c>
    e230:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e232:	18d3      	adds	r3, r2, r3
    e234:	4419      	add	r1, r3
    e236:	2366      	movs	r3, #102	; 0x66
    e238:	9105      	str	r1, [sp, #20]
    e23a:	930b      	str	r3, [sp, #44]	; 0x2c
    e23c:	e72d      	b.n	e09a <_svfprintf_r+0x18ca>
    e23e:	f1c3 0301 	rsb	r3, r3, #1
    e242:	441a      	add	r2, r3
    e244:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e248:	9302      	str	r3, [sp, #8]
    e24a:	2367      	movs	r3, #103	; 0x67
    e24c:	9205      	str	r2, [sp, #20]
    e24e:	930b      	str	r3, [sp, #44]	; 0x2c
    e250:	e698      	b.n	df84 <_svfprintf_r+0x17b4>
    e252:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e256:	e759      	b.n	e10c <_svfprintf_r+0x193c>
    e258:	9b03      	ldr	r3, [sp, #12]
    e25a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e25e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e262:	9305      	str	r3, [sp, #20]
    e264:	e4b4      	b.n	dbd0 <_svfprintf_r+0x1400>
    e266:	ee18 3a90 	vmov	r3, s17
    e26a:	2b00      	cmp	r3, #0
    e26c:	bfb4      	ite	lt
    e26e:	212d      	movlt	r1, #45	; 0x2d
    e270:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    e274:	4c25      	ldr	r4, [pc, #148]	; (e30c <_svfprintf_r+0x1b3c>)
    e276:	4b26      	ldr	r3, [pc, #152]	; (e310 <_svfprintf_r+0x1b40>)
    e278:	bfb8      	it	lt
    e27a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    e27e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e282:	f7fe bc79 	b.w	cb78 <_svfprintf_r+0x3a8>
    e286:	9b03      	ldr	r3, [sp, #12]
    e288:	9302      	str	r3, [sp, #8]
    e28a:	9305      	str	r3, [sp, #20]
    e28c:	2373      	movs	r3, #115	; 0x73
    e28e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e292:	9003      	str	r0, [sp, #12]
    e294:	900f      	str	r0, [sp, #60]	; 0x3c
    e296:	900d      	str	r0, [sp, #52]	; 0x34
    e298:	930b      	str	r3, [sp, #44]	; 0x2c
    e29a:	f7fe bc7a 	b.w	cb92 <_svfprintf_r+0x3c2>
    e29e:	2302      	movs	r3, #2
    e2a0:	9314      	str	r3, [sp, #80]	; 0x50
    e2a2:	e584      	b.n	ddae <_svfprintf_r+0x15de>
    e2a4:	9a03      	ldr	r2, [sp, #12]
    e2a6:	4313      	orrs	r3, r2
    e2a8:	d105      	bne.n	e2b6 <_svfprintf_r+0x1ae6>
    e2aa:	2301      	movs	r3, #1
    e2ac:	2266      	movs	r2, #102	; 0x66
    e2ae:	9302      	str	r3, [sp, #8]
    e2b0:	920b      	str	r2, [sp, #44]	; 0x2c
    e2b2:	9305      	str	r3, [sp, #20]
    e2b4:	e666      	b.n	df84 <_svfprintf_r+0x17b4>
    e2b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e2b8:	3301      	adds	r3, #1
    e2ba:	441a      	add	r2, r3
    e2bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e2c0:	9302      	str	r3, [sp, #8]
    e2c2:	2366      	movs	r3, #102	; 0x66
    e2c4:	9205      	str	r2, [sp, #20]
    e2c6:	930b      	str	r3, [sp, #44]	; 0x2c
    e2c8:	e65c      	b.n	df84 <_svfprintf_r+0x17b4>
    e2ca:	9a08      	ldr	r2, [sp, #32]
    e2cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    e2d0:	4689      	mov	r9, r1
    e2d2:	f852 1b04 	ldr.w	r1, [r2], #4
    e2d6:	9208      	str	r2, [sp, #32]
    e2d8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    e2dc:	9103      	str	r1, [sp, #12]
    e2de:	f7fe bad3 	b.w	c888 <_svfprintf_r+0xb8>
    e2e2:	2300      	movs	r3, #0
    e2e4:	930f      	str	r3, [sp, #60]	; 0x3c
    e2e6:	930d      	str	r3, [sp, #52]	; 0x34
    e2e8:	e796      	b.n	e218 <_svfprintf_r+0x1a48>
    e2ea:	230c      	movs	r3, #12
    e2ec:	f8cb 3000 	str.w	r3, [fp]
    e2f0:	f04f 33ff 	mov.w	r3, #4294967295
    e2f4:	9304      	str	r3, [sp, #16]
    e2f6:	f7fe bb81 	b.w	c9fc <_svfprintf_r+0x22c>
    e2fa:	ee1b 2a10 	vmov	r2, s22
    e2fe:	8993      	ldrh	r3, [r2, #12]
    e300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e304:	8193      	strh	r3, [r2, #12]
    e306:	f7fe bec8 	b.w	d09a <_svfprintf_r+0x8ca>
    e30a:	bf00      	nop
    e30c:	20000c8c 	.word	0x20000c8c
    e310:	20000c90 	.word	0x20000c90

0000e314 <_fclose_r>:
    e314:	b570      	push	{r4, r5, r6, lr}
    e316:	2900      	cmp	r1, #0
    e318:	d04b      	beq.n	e3b2 <_fclose_r+0x9e>
    e31a:	4606      	mov	r6, r0
    e31c:	460c      	mov	r4, r1
    e31e:	b110      	cbz	r0, e326 <_fclose_r+0x12>
    e320:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e322:	2b00      	cmp	r3, #0
    e324:	d048      	beq.n	e3b8 <_fclose_r+0xa4>
    e326:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e328:	07d8      	lsls	r0, r3, #31
    e32a:	d534      	bpl.n	e396 <_fclose_r+0x82>
    e32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e330:	2b00      	cmp	r3, #0
    e332:	d03e      	beq.n	e3b2 <_fclose_r+0x9e>
    e334:	4621      	mov	r1, r4
    e336:	4630      	mov	r0, r6
    e338:	f000 f850 	bl	e3dc <__sflush_r>
    e33c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e33e:	4605      	mov	r5, r0
    e340:	b133      	cbz	r3, e350 <_fclose_r+0x3c>
    e342:	69e1      	ldr	r1, [r4, #28]
    e344:	4630      	mov	r0, r6
    e346:	4798      	blx	r3
    e348:	2800      	cmp	r0, #0
    e34a:	bfb8      	it	lt
    e34c:	f04f 35ff 	movlt.w	r5, #4294967295
    e350:	89a3      	ldrh	r3, [r4, #12]
    e352:	061a      	lsls	r2, r3, #24
    e354:	d43c      	bmi.n	e3d0 <_fclose_r+0xbc>
    e356:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e358:	b141      	cbz	r1, e36c <_fclose_r+0x58>
    e35a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e35e:	4299      	cmp	r1, r3
    e360:	d002      	beq.n	e368 <_fclose_r+0x54>
    e362:	4630      	mov	r0, r6
    e364:	f7fd fd4e 	bl	be04 <_free_r>
    e368:	2300      	movs	r3, #0
    e36a:	6323      	str	r3, [r4, #48]	; 0x30
    e36c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e36e:	b121      	cbz	r1, e37a <_fclose_r+0x66>
    e370:	4630      	mov	r0, r6
    e372:	f7fd fd47 	bl	be04 <_free_r>
    e376:	2300      	movs	r3, #0
    e378:	6463      	str	r3, [r4, #68]	; 0x44
    e37a:	f7fc ffd1 	bl	b320 <__sfp_lock_acquire>
    e37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e380:	2200      	movs	r2, #0
    e382:	07db      	lsls	r3, r3, #31
    e384:	81a2      	strh	r2, [r4, #12]
    e386:	d51f      	bpl.n	e3c8 <_fclose_r+0xb4>
    e388:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e38a:	f7fd fa5d 	bl	b848 <__retarget_lock_close_recursive>
    e38e:	f7fc ffcd 	bl	b32c <__sfp_lock_release>
    e392:	4628      	mov	r0, r5
    e394:	bd70      	pop	{r4, r5, r6, pc}
    e396:	89a3      	ldrh	r3, [r4, #12]
    e398:	0599      	lsls	r1, r3, #22
    e39a:	d4cb      	bmi.n	e334 <_fclose_r+0x20>
    e39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e39e:	f7fd fa55 	bl	b84c <__retarget_lock_acquire_recursive>
    e3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d1c4      	bne.n	e334 <_fclose_r+0x20>
    e3aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
    e3ac:	f015 0501 	ands.w	r5, r5, #1
    e3b0:	d005      	beq.n	e3be <_fclose_r+0xaa>
    e3b2:	2500      	movs	r5, #0
    e3b4:	4628      	mov	r0, r5
    e3b6:	bd70      	pop	{r4, r5, r6, pc}
    e3b8:	f7fc ff94 	bl	b2e4 <__sinit>
    e3bc:	e7b3      	b.n	e326 <_fclose_r+0x12>
    e3be:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e3c0:	f7fd fa46 	bl	b850 <__retarget_lock_release_recursive>
    e3c4:	4628      	mov	r0, r5
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
    e3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e3ca:	f7fd fa41 	bl	b850 <__retarget_lock_release_recursive>
    e3ce:	e7db      	b.n	e388 <_fclose_r+0x74>
    e3d0:	6921      	ldr	r1, [r4, #16]
    e3d2:	4630      	mov	r0, r6
    e3d4:	f7fd fd16 	bl	be04 <_free_r>
    e3d8:	e7bd      	b.n	e356 <_fclose_r+0x42>
    e3da:	bf00      	nop

0000e3dc <__sflush_r>:
    e3dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    e3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3e4:	460c      	mov	r4, r1
    e3e6:	0711      	lsls	r1, r2, #28
    e3e8:	4680      	mov	r8, r0
    e3ea:	d447      	bmi.n	e47c <__sflush_r+0xa0>
    e3ec:	6863      	ldr	r3, [r4, #4]
    e3ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	81a2      	strh	r2, [r4, #12]
    e3f6:	dd5e      	ble.n	e4b6 <__sflush_r+0xda>
    e3f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e3fa:	2d00      	cmp	r5, #0
    e3fc:	d058      	beq.n	e4b0 <__sflush_r+0xd4>
    e3fe:	2300      	movs	r3, #0
    e400:	f8d8 6000 	ldr.w	r6, [r8]
    e404:	f8c8 3000 	str.w	r3, [r8]
    e408:	b293      	uxth	r3, r2
    e40a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    e40e:	d156      	bne.n	e4be <__sflush_r+0xe2>
    e410:	2301      	movs	r3, #1
    e412:	69e1      	ldr	r1, [r4, #28]
    e414:	4640      	mov	r0, r8
    e416:	47a8      	blx	r5
    e418:	1c43      	adds	r3, r0, #1
    e41a:	d067      	beq.n	e4ec <__sflush_r+0x110>
    e41c:	89a3      	ldrh	r3, [r4, #12]
    e41e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e420:	075f      	lsls	r7, r3, #29
    e422:	d505      	bpl.n	e430 <__sflush_r+0x54>
    e424:	6863      	ldr	r3, [r4, #4]
    e426:	1ac0      	subs	r0, r0, r3
    e428:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e42a:	b10b      	cbz	r3, e430 <__sflush_r+0x54>
    e42c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e42e:	1ac0      	subs	r0, r0, r3
    e430:	69e1      	ldr	r1, [r4, #28]
    e432:	4602      	mov	r2, r0
    e434:	2300      	movs	r3, #0
    e436:	4640      	mov	r0, r8
    e438:	47a8      	blx	r5
    e43a:	1c41      	adds	r1, r0, #1
    e43c:	d141      	bne.n	e4c2 <__sflush_r+0xe6>
    e43e:	f8d8 3000 	ldr.w	r3, [r8]
    e442:	2b00      	cmp	r3, #0
    e444:	d03d      	beq.n	e4c2 <__sflush_r+0xe6>
    e446:	2b1d      	cmp	r3, #29
    e448:	d001      	beq.n	e44e <__sflush_r+0x72>
    e44a:	2b16      	cmp	r3, #22
    e44c:	d156      	bne.n	e4fc <__sflush_r+0x120>
    e44e:	89a3      	ldrh	r3, [r4, #12]
    e450:	6922      	ldr	r2, [r4, #16]
    e452:	6022      	str	r2, [r4, #0]
    e454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e458:	2100      	movs	r1, #0
    e45a:	6061      	str	r1, [r4, #4]
    e45c:	81a3      	strh	r3, [r4, #12]
    e45e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e460:	f8c8 6000 	str.w	r6, [r8]
    e464:	b321      	cbz	r1, e4b0 <__sflush_r+0xd4>
    e466:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e46a:	4299      	cmp	r1, r3
    e46c:	d002      	beq.n	e474 <__sflush_r+0x98>
    e46e:	4640      	mov	r0, r8
    e470:	f7fd fcc8 	bl	be04 <_free_r>
    e474:	2000      	movs	r0, #0
    e476:	6320      	str	r0, [r4, #48]	; 0x30
    e478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e47c:	6926      	ldr	r6, [r4, #16]
    e47e:	b1be      	cbz	r6, e4b0 <__sflush_r+0xd4>
    e480:	b293      	uxth	r3, r2
    e482:	6825      	ldr	r5, [r4, #0]
    e484:	6026      	str	r6, [r4, #0]
    e486:	079a      	lsls	r2, r3, #30
    e488:	bf0c      	ite	eq
    e48a:	6963      	ldreq	r3, [r4, #20]
    e48c:	2300      	movne	r3, #0
    e48e:	1bad      	subs	r5, r5, r6
    e490:	60a3      	str	r3, [r4, #8]
    e492:	e00b      	b.n	e4ac <__sflush_r+0xd0>
    e494:	462b      	mov	r3, r5
    e496:	4632      	mov	r2, r6
    e498:	69e1      	ldr	r1, [r4, #28]
    e49a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e49c:	4640      	mov	r0, r8
    e49e:	47b8      	blx	r7
    e4a0:	f1b0 0c00 	subs.w	ip, r0, #0
    e4a4:	eba5 050c 	sub.w	r5, r5, ip
    e4a8:	4466      	add	r6, ip
    e4aa:	dd17      	ble.n	e4dc <__sflush_r+0x100>
    e4ac:	2d00      	cmp	r5, #0
    e4ae:	dcf1      	bgt.n	e494 <__sflush_r+0xb8>
    e4b0:	2000      	movs	r0, #0
    e4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e4b8:	2b00      	cmp	r3, #0
    e4ba:	dc9d      	bgt.n	e3f8 <__sflush_r+0x1c>
    e4bc:	e7f8      	b.n	e4b0 <__sflush_r+0xd4>
    e4be:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e4c0:	e7ae      	b.n	e420 <__sflush_r+0x44>
    e4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e4c6:	6922      	ldr	r2, [r4, #16]
    e4c8:	6022      	str	r2, [r4, #0]
    e4ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e4ce:	81a3      	strh	r3, [r4, #12]
    e4d0:	2200      	movs	r2, #0
    e4d2:	04db      	lsls	r3, r3, #19
    e4d4:	6062      	str	r2, [r4, #4]
    e4d6:	d5c2      	bpl.n	e45e <__sflush_r+0x82>
    e4d8:	6520      	str	r0, [r4, #80]	; 0x50
    e4da:	e7c0      	b.n	e45e <__sflush_r+0x82>
    e4dc:	89a3      	ldrh	r3, [r4, #12]
    e4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e4e2:	f04f 30ff 	mov.w	r0, #4294967295
    e4e6:	81a3      	strh	r3, [r4, #12]
    e4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4ec:	f8d8 3000 	ldr.w	r3, [r8]
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d093      	beq.n	e41c <__sflush_r+0x40>
    e4f4:	2b1d      	cmp	r3, #29
    e4f6:	d006      	beq.n	e506 <__sflush_r+0x12a>
    e4f8:	2b16      	cmp	r3, #22
    e4fa:	d004      	beq.n	e506 <__sflush_r+0x12a>
    e4fc:	89a3      	ldrh	r3, [r4, #12]
    e4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e502:	81a3      	strh	r3, [r4, #12]
    e504:	e7d5      	b.n	e4b2 <__sflush_r+0xd6>
    e506:	f8c8 6000 	str.w	r6, [r8]
    e50a:	e7d1      	b.n	e4b0 <__sflush_r+0xd4>

0000e50c <_fflush_r>:
    e50c:	b538      	push	{r3, r4, r5, lr}
    e50e:	460c      	mov	r4, r1
    e510:	4605      	mov	r5, r0
    e512:	b108      	cbz	r0, e518 <_fflush_r+0xc>
    e514:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e516:	b303      	cbz	r3, e55a <_fflush_r+0x4e>
    e518:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    e51c:	b188      	cbz	r0, e542 <_fflush_r+0x36>
    e51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e520:	07db      	lsls	r3, r3, #31
    e522:	d401      	bmi.n	e528 <_fflush_r+0x1c>
    e524:	0581      	lsls	r1, r0, #22
    e526:	d50f      	bpl.n	e548 <_fflush_r+0x3c>
    e528:	4628      	mov	r0, r5
    e52a:	4621      	mov	r1, r4
    e52c:	f7ff ff56 	bl	e3dc <__sflush_r>
    e530:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e532:	07da      	lsls	r2, r3, #31
    e534:	4605      	mov	r5, r0
    e536:	d402      	bmi.n	e53e <_fflush_r+0x32>
    e538:	89a3      	ldrh	r3, [r4, #12]
    e53a:	059b      	lsls	r3, r3, #22
    e53c:	d508      	bpl.n	e550 <_fflush_r+0x44>
    e53e:	4628      	mov	r0, r5
    e540:	bd38      	pop	{r3, r4, r5, pc}
    e542:	4605      	mov	r5, r0
    e544:	4628      	mov	r0, r5
    e546:	bd38      	pop	{r3, r4, r5, pc}
    e548:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e54a:	f7fd f97f 	bl	b84c <__retarget_lock_acquire_recursive>
    e54e:	e7eb      	b.n	e528 <_fflush_r+0x1c>
    e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e552:	f7fd f97d 	bl	b850 <__retarget_lock_release_recursive>
    e556:	4628      	mov	r0, r5
    e558:	bd38      	pop	{r3, r4, r5, pc}
    e55a:	f7fc fec3 	bl	b2e4 <__sinit>
    e55e:	e7db      	b.n	e518 <_fflush_r+0xc>

0000e560 <_localeconv_r>:
    e560:	4800      	ldr	r0, [pc, #0]	; (e564 <_localeconv_r+0x4>)
    e562:	4770      	bx	lr
    e564:	20004464 	.word	0x20004464
	...

0000e570 <memchr>:
    e570:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e574:	2a10      	cmp	r2, #16
    e576:	db2b      	blt.n	e5d0 <memchr+0x60>
    e578:	f010 0f07 	tst.w	r0, #7
    e57c:	d008      	beq.n	e590 <memchr+0x20>
    e57e:	f810 3b01 	ldrb.w	r3, [r0], #1
    e582:	3a01      	subs	r2, #1
    e584:	428b      	cmp	r3, r1
    e586:	d02d      	beq.n	e5e4 <memchr+0x74>
    e588:	f010 0f07 	tst.w	r0, #7
    e58c:	b342      	cbz	r2, e5e0 <memchr+0x70>
    e58e:	d1f6      	bne.n	e57e <memchr+0xe>
    e590:	b4f0      	push	{r4, r5, r6, r7}
    e592:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e596:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e59a:	f022 0407 	bic.w	r4, r2, #7
    e59e:	f07f 0700 	mvns.w	r7, #0
    e5a2:	2300      	movs	r3, #0
    e5a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e5a8:	3c08      	subs	r4, #8
    e5aa:	ea85 0501 	eor.w	r5, r5, r1
    e5ae:	ea86 0601 	eor.w	r6, r6, r1
    e5b2:	fa85 f547 	uadd8	r5, r5, r7
    e5b6:	faa3 f587 	sel	r5, r3, r7
    e5ba:	fa86 f647 	uadd8	r6, r6, r7
    e5be:	faa5 f687 	sel	r6, r5, r7
    e5c2:	b98e      	cbnz	r6, e5e8 <memchr+0x78>
    e5c4:	d1ee      	bne.n	e5a4 <memchr+0x34>
    e5c6:	bcf0      	pop	{r4, r5, r6, r7}
    e5c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e5cc:	f002 0207 	and.w	r2, r2, #7
    e5d0:	b132      	cbz	r2, e5e0 <memchr+0x70>
    e5d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    e5d6:	3a01      	subs	r2, #1
    e5d8:	ea83 0301 	eor.w	r3, r3, r1
    e5dc:	b113      	cbz	r3, e5e4 <memchr+0x74>
    e5de:	d1f8      	bne.n	e5d2 <memchr+0x62>
    e5e0:	2000      	movs	r0, #0
    e5e2:	4770      	bx	lr
    e5e4:	3801      	subs	r0, #1
    e5e6:	4770      	bx	lr
    e5e8:	2d00      	cmp	r5, #0
    e5ea:	bf06      	itte	eq
    e5ec:	4635      	moveq	r5, r6
    e5ee:	3803      	subeq	r0, #3
    e5f0:	3807      	subne	r0, #7
    e5f2:	f015 0f01 	tst.w	r5, #1
    e5f6:	d107      	bne.n	e608 <memchr+0x98>
    e5f8:	3001      	adds	r0, #1
    e5fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    e5fe:	bf02      	ittt	eq
    e600:	3001      	addeq	r0, #1
    e602:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e606:	3001      	addeq	r0, #1
    e608:	bcf0      	pop	{r4, r5, r6, r7}
    e60a:	3801      	subs	r0, #1
    e60c:	4770      	bx	lr
    e60e:	bf00      	nop

0000e610 <frexp>:
    e610:	b430      	push	{r4, r5}
    e612:	b082      	sub	sp, #8
    e614:	ed8d 0b00 	vstr	d0, [sp]
    e618:	9a01      	ldr	r2, [sp, #4]
    e61a:	4c19      	ldr	r4, [pc, #100]	; (e680 <frexp+0x70>)
    e61c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e620:	2100      	movs	r1, #0
    e622:	42a3      	cmp	r3, r4
    e624:	6001      	str	r1, [r0, #0]
    e626:	dc21      	bgt.n	e66c <frexp+0x5c>
    e628:	9c00      	ldr	r4, [sp, #0]
    e62a:	431c      	orrs	r4, r3
    e62c:	d01e      	beq.n	e66c <frexp+0x5c>
    e62e:	4c15      	ldr	r4, [pc, #84]	; (e684 <frexp+0x74>)
    e630:	4014      	ands	r4, r2
    e632:	b954      	cbnz	r4, e64a <frexp+0x3a>
    e634:	ed9f 7b10 	vldr	d7, [pc, #64]	; e678 <frexp+0x68>
    e638:	ee20 7b07 	vmul.f64	d7, d0, d7
    e63c:	ed8d 7b00 	vstr	d7, [sp]
    e640:	9a01      	ldr	r2, [sp, #4]
    e642:	f06f 0135 	mvn.w	r1, #53	; 0x35
    e646:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e64a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    e64e:	e9dd 4500 	ldrd	r4, r5, [sp]
    e652:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    e656:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    e65a:	151b      	asrs	r3, r3, #20
    e65c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    e660:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    e664:	e9cd 4500 	strd	r4, r5, [sp]
    e668:	440b      	add	r3, r1
    e66a:	6003      	str	r3, [r0, #0]
    e66c:	ed9d 0b00 	vldr	d0, [sp]
    e670:	b002      	add	sp, #8
    e672:	bc30      	pop	{r4, r5}
    e674:	4770      	bx	lr
    e676:	bf00      	nop
    e678:	00000000 	.word	0x00000000
    e67c:	43500000 	.word	0x43500000
    e680:	7fefffff 	.word	0x7fefffff
    e684:	7ff00000 	.word	0x7ff00000

0000e688 <__assert_func>:
    e688:	b500      	push	{lr}
    e68a:	4c0b      	ldr	r4, [pc, #44]	; (e6b8 <__assert_func+0x30>)
    e68c:	6825      	ldr	r5, [r4, #0]
    e68e:	4614      	mov	r4, r2
    e690:	68ee      	ldr	r6, [r5, #12]
    e692:	461a      	mov	r2, r3
    e694:	b085      	sub	sp, #20
    e696:	4603      	mov	r3, r0
    e698:	460d      	mov	r5, r1
    e69a:	b14c      	cbz	r4, e6b0 <__assert_func+0x28>
    e69c:	4907      	ldr	r1, [pc, #28]	; (e6bc <__assert_func+0x34>)
    e69e:	9500      	str	r5, [sp, #0]
    e6a0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e6a4:	4630      	mov	r0, r6
    e6a6:	4906      	ldr	r1, [pc, #24]	; (e6c0 <__assert_func+0x38>)
    e6a8:	f000 ff86 	bl	f5b8 <fiprintf>
    e6ac:	f7fa fb5a 	bl	8d64 <abort>
    e6b0:	4904      	ldr	r1, [pc, #16]	; (e6c4 <__assert_func+0x3c>)
    e6b2:	460c      	mov	r4, r1
    e6b4:	e7f3      	b.n	e69e <__assert_func+0x16>
    e6b6:	bf00      	nop
    e6b8:	200048fc 	.word	0x200048fc
    e6bc:	20000a64 	.word	0x20000a64
    e6c0:	20000a74 	.word	0x20000a74
    e6c4:	2000047c 	.word	0x2000047c

0000e6c8 <_calloc_r>:
    e6c8:	b538      	push	{r3, r4, r5, lr}
    e6ca:	fba1 1402 	umull	r1, r4, r1, r2
    e6ce:	bb8c      	cbnz	r4, e734 <_calloc_r+0x6c>
    e6d0:	f7fb ff40 	bl	a554 <_malloc_r>
    e6d4:	4605      	mov	r5, r0
    e6d6:	b1e0      	cbz	r0, e712 <_calloc_r+0x4a>
    e6d8:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e6dc:	f022 0203 	bic.w	r2, r2, #3
    e6e0:	3a04      	subs	r2, #4
    e6e2:	2a24      	cmp	r2, #36	; 0x24
    e6e4:	d817      	bhi.n	e716 <_calloc_r+0x4e>
    e6e6:	2a13      	cmp	r2, #19
    e6e8:	d91a      	bls.n	e720 <_calloc_r+0x58>
    e6ea:	2a1b      	cmp	r2, #27
    e6ec:	e9c0 4400 	strd	r4, r4, [r0]
    e6f0:	d91d      	bls.n	e72e <_calloc_r+0x66>
    e6f2:	2a24      	cmp	r2, #36	; 0x24
    e6f4:	bf14      	ite	ne
    e6f6:	f100 0210 	addne.w	r2, r0, #16
    e6fa:	f100 0218 	addeq.w	r2, r0, #24
    e6fe:	f04f 0300 	mov.w	r3, #0
    e702:	e9c0 4402 	strd	r4, r4, [r0, #8]
    e706:	bf04      	itt	eq
    e708:	6104      	streq	r4, [r0, #16]
    e70a:	6144      	streq	r4, [r0, #20]
    e70c:	e9c2 3300 	strd	r3, r3, [r2]
    e710:	6093      	str	r3, [r2, #8]
    e712:	4628      	mov	r0, r5
    e714:	bd38      	pop	{r3, r4, r5, pc}
    e716:	4621      	mov	r1, r4
    e718:	f7fc ff14 	bl	b544 <memset>
    e71c:	4628      	mov	r0, r5
    e71e:	bd38      	pop	{r3, r4, r5, pc}
    e720:	4602      	mov	r2, r0
    e722:	2300      	movs	r3, #0
    e724:	e9c2 3300 	strd	r3, r3, [r2]
    e728:	6093      	str	r3, [r2, #8]
    e72a:	4628      	mov	r0, r5
    e72c:	bd38      	pop	{r3, r4, r5, pc}
    e72e:	f100 0208 	add.w	r2, r0, #8
    e732:	e7f6      	b.n	e722 <_calloc_r+0x5a>
    e734:	f7fd f85c 	bl	b7f0 <__errno>
    e738:	230c      	movs	r3, #12
    e73a:	2500      	movs	r5, #0
    e73c:	6003      	str	r3, [r0, #0]
    e73e:	e7e8      	b.n	e712 <_calloc_r+0x4a>

0000e740 <quorem>:
    e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e744:	6903      	ldr	r3, [r0, #16]
    e746:	690c      	ldr	r4, [r1, #16]
    e748:	42a3      	cmp	r3, r4
    e74a:	b083      	sub	sp, #12
    e74c:	f2c0 8087 	blt.w	e85e <quorem+0x11e>
    e750:	3c01      	subs	r4, #1
    e752:	f101 0514 	add.w	r5, r1, #20
    e756:	00a3      	lsls	r3, r4, #2
    e758:	f100 0814 	add.w	r8, r0, #20
    e75c:	9300      	str	r3, [sp, #0]
    e75e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    e762:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    e766:	3301      	adds	r3, #1
    e768:	4681      	mov	r9, r0
    e76a:	429a      	cmp	r2, r3
    e76c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    e770:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    e774:	9001      	str	r0, [sp, #4]
    e776:	fbb2 f6f3 	udiv	r6, r2, r3
    e77a:	d33b      	bcc.n	e7f4 <quorem+0xb4>
    e77c:	f04f 0c00 	mov.w	ip, #0
    e780:	46ae      	mov	lr, r5
    e782:	4640      	mov	r0, r8
    e784:	46e2      	mov	sl, ip
    e786:	4663      	mov	r3, ip
    e788:	f85e bb04 	ldr.w	fp, [lr], #4
    e78c:	6802      	ldr	r2, [r0, #0]
    e78e:	fa1f fc8b 	uxth.w	ip, fp
    e792:	fb06 330c 	mla	r3, r6, ip, r3
    e796:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e79a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    e79e:	fb06 cc0b 	mla	ip, r6, fp, ip
    e7a2:	b29b      	uxth	r3, r3
    e7a4:	ebaa 0303 	sub.w	r3, sl, r3
    e7a8:	fa1f fa8c 	uxth.w	sl, ip
    e7ac:	fa13 f382 	uxtah	r3, r3, r2
    e7b0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    e7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    e7b8:	b29b      	uxth	r3, r3
    e7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e7be:	4577      	cmp	r7, lr
    e7c0:	f840 3b04 	str.w	r3, [r0], #4
    e7c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
    e7c8:	ea4f 431c 	mov.w	r3, ip, lsr #16
    e7cc:	d2dc      	bcs.n	e788 <quorem+0x48>
    e7ce:	9b00      	ldr	r3, [sp, #0]
    e7d0:	f858 3003 	ldr.w	r3, [r8, r3]
    e7d4:	b973      	cbnz	r3, e7f4 <quorem+0xb4>
    e7d6:	9b01      	ldr	r3, [sp, #4]
    e7d8:	3b04      	subs	r3, #4
    e7da:	4598      	cmp	r8, r3
    e7dc:	d304      	bcc.n	e7e8 <quorem+0xa8>
    e7de:	e007      	b.n	e7f0 <quorem+0xb0>
    e7e0:	4598      	cmp	r8, r3
    e7e2:	f104 34ff 	add.w	r4, r4, #4294967295
    e7e6:	d203      	bcs.n	e7f0 <quorem+0xb0>
    e7e8:	f853 2904 	ldr.w	r2, [r3], #-4
    e7ec:	2a00      	cmp	r2, #0
    e7ee:	d0f7      	beq.n	e7e0 <quorem+0xa0>
    e7f0:	f8c9 4010 	str.w	r4, [r9, #16]
    e7f4:	4648      	mov	r0, r9
    e7f6:	f7fd fea7 	bl	c548 <__mcmp>
    e7fa:	2800      	cmp	r0, #0
    e7fc:	db2b      	blt.n	e856 <quorem+0x116>
    e7fe:	3601      	adds	r6, #1
    e800:	4641      	mov	r1, r8
    e802:	2300      	movs	r3, #0
    e804:	f855 0b04 	ldr.w	r0, [r5], #4
    e808:	f8d1 c000 	ldr.w	ip, [r1]
    e80c:	b282      	uxth	r2, r0
    e80e:	1a9a      	subs	r2, r3, r2
    e810:	0c03      	lsrs	r3, r0, #16
    e812:	fa12 f28c 	uxtah	r2, r2, ip
    e816:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    e81a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e81e:	b292      	uxth	r2, r2
    e820:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e824:	42af      	cmp	r7, r5
    e826:	f841 2b04 	str.w	r2, [r1], #4
    e82a:	ea4f 4323 	mov.w	r3, r3, asr #16
    e82e:	d2e9      	bcs.n	e804 <quorem+0xc4>
    e830:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    e834:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    e838:	b96a      	cbnz	r2, e856 <quorem+0x116>
    e83a:	3b04      	subs	r3, #4
    e83c:	4598      	cmp	r8, r3
    e83e:	d304      	bcc.n	e84a <quorem+0x10a>
    e840:	e007      	b.n	e852 <quorem+0x112>
    e842:	4598      	cmp	r8, r3
    e844:	f104 34ff 	add.w	r4, r4, #4294967295
    e848:	d203      	bcs.n	e852 <quorem+0x112>
    e84a:	f853 2904 	ldr.w	r2, [r3], #-4
    e84e:	2a00      	cmp	r2, #0
    e850:	d0f7      	beq.n	e842 <quorem+0x102>
    e852:	f8c9 4010 	str.w	r4, [r9, #16]
    e856:	4630      	mov	r0, r6
    e858:	b003      	add	sp, #12
    e85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e85e:	2000      	movs	r0, #0
    e860:	b003      	add	sp, #12
    e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e866:	bf00      	nop

0000e868 <_dtoa_r>:
    e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e86c:	ed2d 8b02 	vpush	{d8}
    e870:	b08f      	sub	sp, #60	; 0x3c
    e872:	ed8d 0b02 	vstr	d0, [sp, #8]
    e876:	9101      	str	r1, [sp, #4]
    e878:	6b81      	ldr	r1, [r0, #56]	; 0x38
    e87a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    e87c:	9305      	str	r3, [sp, #20]
    e87e:	ec57 6b10 	vmov	r6, r7, d0
    e882:	4604      	mov	r4, r0
    e884:	4693      	mov	fp, r2
    e886:	b141      	cbz	r1, e89a <_dtoa_r+0x32>
    e888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    e88a:	604a      	str	r2, [r1, #4]
    e88c:	2301      	movs	r3, #1
    e88e:	4093      	lsls	r3, r2
    e890:	608b      	str	r3, [r1, #8]
    e892:	f7fd fbf9 	bl	c088 <_Bfree>
    e896:	2300      	movs	r3, #0
    e898:	63a3      	str	r3, [r4, #56]	; 0x38
    e89a:	f1b7 0800 	subs.w	r8, r7, #0
    e89e:	bfb4      	ite	lt
    e8a0:	2301      	movlt	r3, #1
    e8a2:	2300      	movge	r3, #0
    e8a4:	602b      	str	r3, [r5, #0]
    e8a6:	4bbe      	ldr	r3, [pc, #760]	; (eba0 <_dtoa_r+0x338>)
    e8a8:	bfbc      	itt	lt
    e8aa:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    e8ae:	f8cd 800c 	strlt.w	r8, [sp, #12]
    e8b2:	ea33 0308 	bics.w	r3, r3, r8
    e8b6:	f000 809f 	beq.w	e9f8 <_dtoa_r+0x190>
    e8ba:	ed9d 8b02 	vldr	d8, [sp, #8]
    e8be:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8c6:	d111      	bne.n	e8ec <_dtoa_r+0x84>
    e8c8:	9a05      	ldr	r2, [sp, #20]
    e8ca:	2301      	movs	r3, #1
    e8cc:	6013      	str	r3, [r2, #0]
    e8ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e8d0:	2b00      	cmp	r3, #0
    e8d2:	f000 823f 	beq.w	ed54 <_dtoa_r+0x4ec>
    e8d6:	4bb3      	ldr	r3, [pc, #716]	; (eba4 <_dtoa_r+0x33c>)
    e8d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e8da:	6013      	str	r3, [r2, #0]
    e8dc:	3b01      	subs	r3, #1
    e8de:	9300      	str	r3, [sp, #0]
    e8e0:	9800      	ldr	r0, [sp, #0]
    e8e2:	b00f      	add	sp, #60	; 0x3c
    e8e4:	ecbd 8b02 	vpop	{d8}
    e8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8ec:	aa0c      	add	r2, sp, #48	; 0x30
    e8ee:	a90d      	add	r1, sp, #52	; 0x34
    e8f0:	4620      	mov	r0, r4
    e8f2:	eeb0 0b48 	vmov.f64	d0, d8
    e8f6:	f7fd fef3 	bl	c6e0 <__d2b>
    e8fa:	ea5f 5318 	movs.w	r3, r8, lsr #20
    e8fe:	4605      	mov	r5, r0
    e900:	f040 8092 	bne.w	ea28 <_dtoa_r+0x1c0>
    e904:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    e908:	440b      	add	r3, r1
    e90a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    e90e:	2a20      	cmp	r2, #32
    e910:	f340 82fa 	ble.w	ef08 <_dtoa_r+0x6a0>
    e914:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    e918:	fa08 f802 	lsl.w	r8, r8, r2
    e91c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    e920:	40d6      	lsrs	r6, r2
    e922:	ea48 0206 	orr.w	r2, r8, r6
    e926:	ee07 2a10 	vmov	s14, r2
    e92a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    e92e:	1e58      	subs	r0, r3, #1
    e930:	ee17 6a90 	vmov	r6, s15
    e934:	ec53 2b17 	vmov	r2, r3, d7
    e938:	f04f 0a01 	mov.w	sl, #1
    e93c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    e940:	ed9f 3b91 	vldr	d3, [pc, #580]	; eb88 <_dtoa_r+0x320>
    e944:	ed9f 7b92 	vldr	d7, [pc, #584]	; eb90 <_dtoa_r+0x328>
    e948:	ed9f 5b93 	vldr	d5, [pc, #588]	; eb98 <_dtoa_r+0x330>
    e94c:	ee06 0a90 	vmov	s13, r0
    e950:	ec43 2b12 	vmov	d2, r2, r3
    e954:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    e958:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    e95c:	ee32 6b46 	vsub.f64	d6, d2, d6
    e960:	eea6 7b03 	vfma.f64	d7, d6, d3
    e964:	eea4 7b05 	vfma.f64	d7, d4, d5
    e968:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    e96c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    e970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e974:	ee16 7a90 	vmov	r7, s13
    e978:	d508      	bpl.n	e98c <_dtoa_r+0x124>
    e97a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    e97e:	eeb4 6b47 	vcmp.f64	d6, d7
    e982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e986:	bf18      	it	ne
    e988:	f107 37ff 	addne.w	r7, r7, #4294967295
    e98c:	2f16      	cmp	r7, #22
    e98e:	f200 8145 	bhi.w	ec1c <_dtoa_r+0x3b4>
    e992:	4b85      	ldr	r3, [pc, #532]	; (eba8 <_dtoa_r+0x340>)
    e994:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    e998:	ed93 7b00 	vldr	d7, [r3]
    e99c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    e9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e9a4:	d557      	bpl.n	ea56 <_dtoa_r+0x1ee>
    e9a6:	1a09      	subs	r1, r1, r0
    e9a8:	2300      	movs	r3, #0
    e9aa:	f1b1 0801 	subs.w	r8, r1, #1
    e9ae:	f107 37ff 	add.w	r7, r7, #4294967295
    e9b2:	930a      	str	r3, [sp, #40]	; 0x28
    e9b4:	f100 8139 	bmi.w	ec2a <_dtoa_r+0x3c2>
    e9b8:	2300      	movs	r3, #0
    e9ba:	9306      	str	r3, [sp, #24]
    e9bc:	2f00      	cmp	r7, #0
    e9be:	da52      	bge.n	ea66 <_dtoa_r+0x1fe>
    e9c0:	9b06      	ldr	r3, [sp, #24]
    e9c2:	9704      	str	r7, [sp, #16]
    e9c4:	1bdb      	subs	r3, r3, r7
    e9c6:	9306      	str	r3, [sp, #24]
    e9c8:	427b      	negs	r3, r7
    e9ca:	9308      	str	r3, [sp, #32]
    e9cc:	9b01      	ldr	r3, [sp, #4]
    e9ce:	2b09      	cmp	r3, #9
    e9d0:	f04f 0700 	mov.w	r7, #0
    e9d4:	d84e      	bhi.n	ea74 <_dtoa_r+0x20c>
    e9d6:	2b05      	cmp	r3, #5
    e9d8:	f340 829d 	ble.w	ef16 <_dtoa_r+0x6ae>
    e9dc:	3b04      	subs	r3, #4
    e9de:	9301      	str	r3, [sp, #4]
    e9e0:	2600      	movs	r6, #0
    e9e2:	9b01      	ldr	r3, [sp, #4]
    e9e4:	1e9a      	subs	r2, r3, #2
    e9e6:	2a03      	cmp	r2, #3
    e9e8:	f200 8125 	bhi.w	ec36 <_dtoa_r+0x3ce>
    e9ec:	e8df f012 	tbh	[pc, r2, lsl #1]
    e9f0:	03a703aa 	.word	0x03a703aa
    e9f4:	037e039d 	.word	0x037e039d
    e9f8:	9a05      	ldr	r2, [sp, #20]
    e9fa:	f3c8 0813 	ubfx	r8, r8, #0, #20
    e9fe:	f242 730f 	movw	r3, #9999	; 0x270f
    ea02:	ea58 0806 	orrs.w	r8, r8, r6
    ea06:	6013      	str	r3, [r2, #0]
    ea08:	d11e      	bne.n	ea48 <_dtoa_r+0x1e0>
    ea0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	f000 8591 	beq.w	f534 <_dtoa_r+0xccc>
    ea12:	4b66      	ldr	r3, [pc, #408]	; (ebac <_dtoa_r+0x344>)
    ea14:	9300      	str	r3, [sp, #0]
    ea16:	3308      	adds	r3, #8
    ea18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ea1a:	9800      	ldr	r0, [sp, #0]
    ea1c:	6013      	str	r3, [r2, #0]
    ea1e:	b00f      	add	sp, #60	; 0x3c
    ea20:	ecbd 8b02 	vpop	{d8}
    ea24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea28:	ee18 6a90 	vmov	r6, s17
    ea2c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    ea30:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    ea34:	ec53 2b18 	vmov	r2, r3, d8
    ea38:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    ea3c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea3e:	f04f 0a00 	mov.w	sl, #0
    ea42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ea46:	e77b      	b.n	e940 <_dtoa_r+0xd8>
    ea48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	f040 833b 	bne.w	f0c6 <_dtoa_r+0x85e>
    ea50:	4b57      	ldr	r3, [pc, #348]	; (ebb0 <_dtoa_r+0x348>)
    ea52:	9300      	str	r3, [sp, #0]
    ea54:	e744      	b.n	e8e0 <_dtoa_r+0x78>
    ea56:	1a09      	subs	r1, r1, r0
    ea58:	2300      	movs	r3, #0
    ea5a:	f1b1 0801 	subs.w	r8, r1, #1
    ea5e:	930a      	str	r3, [sp, #40]	; 0x28
    ea60:	f100 80e3 	bmi.w	ec2a <_dtoa_r+0x3c2>
    ea64:	9306      	str	r3, [sp, #24]
    ea66:	2300      	movs	r3, #0
    ea68:	9308      	str	r3, [sp, #32]
    ea6a:	9b01      	ldr	r3, [sp, #4]
    ea6c:	9704      	str	r7, [sp, #16]
    ea6e:	2b09      	cmp	r3, #9
    ea70:	44b8      	add	r8, r7
    ea72:	d9b0      	bls.n	e9d6 <_dtoa_r+0x16e>
    ea74:	2300      	movs	r3, #0
    ea76:	2601      	movs	r6, #1
    ea78:	9301      	str	r3, [sp, #4]
    ea7a:	9607      	str	r6, [sp, #28]
    ea7c:	f04f 39ff 	mov.w	r9, #4294967295
    ea80:	469b      	mov	fp, r3
    ea82:	2100      	movs	r1, #0
    ea84:	63e1      	str	r1, [r4, #60]	; 0x3c
    ea86:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    ea8a:	4620      	mov	r0, r4
    ea8c:	f7fd fad6 	bl	c03c <_Balloc>
    ea90:	9000      	str	r0, [sp, #0]
    ea92:	2800      	cmp	r0, #0
    ea94:	f000 8540 	beq.w	f518 <_dtoa_r+0xcb0>
    ea98:	9b00      	ldr	r3, [sp, #0]
    ea9a:	63a3      	str	r3, [r4, #56]	; 0x38
    ea9c:	f1b9 0f0e 	cmp.w	r9, #14
    eaa0:	f200 80dc 	bhi.w	ec5c <_dtoa_r+0x3f4>
    eaa4:	2e00      	cmp	r6, #0
    eaa6:	f000 80d9 	beq.w	ec5c <_dtoa_r+0x3f4>
    eaaa:	9b04      	ldr	r3, [sp, #16]
    eaac:	2b00      	cmp	r3, #0
    eaae:	f340 83de 	ble.w	f26e <_dtoa_r+0xa06>
    eab2:	4a3d      	ldr	r2, [pc, #244]	; (eba8 <_dtoa_r+0x340>)
    eab4:	f003 010f 	and.w	r1, r3, #15
    eab8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    eabc:	ed92 7b00 	vldr	d7, [r2]
    eac0:	111a      	asrs	r2, r3, #4
    eac2:	05db      	lsls	r3, r3, #23
    eac4:	f140 8382 	bpl.w	f1cc <_dtoa_r+0x964>
    eac8:	493a      	ldr	r1, [pc, #232]	; (ebb4 <_dtoa_r+0x34c>)
    eaca:	ed91 6b08 	vldr	d6, [r1, #32]
    eace:	f002 020f 	and.w	r2, r2, #15
    ead2:	2003      	movs	r0, #3
    ead4:	ee88 5b06 	vdiv.f64	d5, d8, d6
    ead8:	b15a      	cbz	r2, eaf2 <_dtoa_r+0x28a>
    eada:	4936      	ldr	r1, [pc, #216]	; (ebb4 <_dtoa_r+0x34c>)
    eadc:	07d6      	lsls	r6, r2, #31
    eade:	d504      	bpl.n	eaea <_dtoa_r+0x282>
    eae0:	ed91 6b00 	vldr	d6, [r1]
    eae4:	3001      	adds	r0, #1
    eae6:	ee27 7b06 	vmul.f64	d7, d7, d6
    eaea:	1052      	asrs	r2, r2, #1
    eaec:	f101 0108 	add.w	r1, r1, #8
    eaf0:	d1f4      	bne.n	eadc <_dtoa_r+0x274>
    eaf2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    eaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eaf8:	b13b      	cbz	r3, eb0a <_dtoa_r+0x2a2>
    eafa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    eafe:	eeb4 6bc7 	vcmpe.f64	d6, d7
    eb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb06:	f100 84ae 	bmi.w	f466 <_dtoa_r+0xbfe>
    eb0a:	ee07 0a90 	vmov	s15, r0
    eb0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    eb12:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    eb16:	eea5 7b06 	vfma.f64	d7, d5, d6
    eb1a:	ee17 2a90 	vmov	r2, s15
    eb1e:	ec51 0b17 	vmov	r0, r1, d7
    eb22:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    eb26:	f1b9 0f00 	cmp.w	r9, #0
    eb2a:	f000 8388 	beq.w	f23e <_dtoa_r+0x9d6>
    eb2e:	9e04      	ldr	r6, [sp, #16]
    eb30:	464a      	mov	r2, r9
    eb32:	9b07      	ldr	r3, [sp, #28]
    eb34:	2b00      	cmp	r3, #0
    eb36:	f000 8447 	beq.w	f3c8 <_dtoa_r+0xb60>
    eb3a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    eb3e:	4b1a      	ldr	r3, [pc, #104]	; (eba8 <_dtoa_r+0x340>)
    eb40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    eb44:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    eb48:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    eb4c:	ee36 7b47 	vsub.f64	d7, d6, d7
    eb50:	ed1c 6b02 	vldr	d6, [ip, #-8]
    eb54:	ee83 5b06 	vdiv.f64	d5, d3, d6
    eb58:	ec41 0b16 	vmov	d6, r0, r1
    eb5c:	ee14 0a90 	vmov	r0, s9
    eb60:	ee35 5b46 	vsub.f64	d5, d5, d6
    eb64:	9900      	ldr	r1, [sp, #0]
    eb66:	eeb4 5bc7 	vcmpe.f64	d5, d7
    eb6a:	3030      	adds	r0, #48	; 0x30
    eb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb70:	f801 0b01 	strb.w	r0, [r1], #1
    eb74:	f300 84ac 	bgt.w	f4d0 <_dtoa_r+0xc68>
    eb78:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    eb7c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    eb80:	f04f 0c00 	mov.w	ip, #0
    eb84:	e031      	b.n	ebea <_dtoa_r+0x382>
    eb86:	bf00      	nop
    eb88:	636f4361 	.word	0x636f4361
    eb8c:	3fd287a7 	.word	0x3fd287a7
    eb90:	8b60c8b3 	.word	0x8b60c8b3
    eb94:	3fc68a28 	.word	0x3fc68a28
    eb98:	509f79fb 	.word	0x509f79fb
    eb9c:	3fd34413 	.word	0x3fd34413
    eba0:	7ff00000 	.word	0x7ff00000
    eba4:	20000cc5 	.word	0x20000cc5
    eba8:	200002a8 	.word	0x200002a8
    ebac:	20000c18 	.word	0x20000c18
    ebb0:	20000c24 	.word	0x20000c24
    ebb4:	20000280 	.word	0x20000280
    ebb8:	f10c 0c01 	add.w	ip, ip, #1
    ebbc:	4594      	cmp	ip, r2
    ebbe:	da4d      	bge.n	ec5c <_dtoa_r+0x3f4>
    ebc0:	ee27 7b04 	vmul.f64	d7, d7, d4
    ebc4:	ee25 5b04 	vmul.f64	d5, d5, d4
    ebc8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ebcc:	ee16 3a90 	vmov	r3, s13
    ebd0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    ebd4:	3330      	adds	r3, #48	; 0x30
    ebd6:	ee37 7b43 	vsub.f64	d7, d7, d3
    ebda:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ebde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebe2:	f801 3b01 	strb.w	r3, [r1], #1
    ebe6:	f100 8473 	bmi.w	f4d0 <_dtoa_r+0xc68>
    ebea:	ee32 6b47 	vsub.f64	d6, d2, d7
    ebee:	eeb4 6bc5 	vcmpe.f64	d6, d5
    ebf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebf6:	d5df      	bpl.n	ebb8 <_dtoa_r+0x350>
    ebf8:	9a00      	ldr	r2, [sp, #0]
    ebfa:	9604      	str	r6, [sp, #16]
    ebfc:	e002      	b.n	ec04 <_dtoa_r+0x39c>
    ebfe:	428a      	cmp	r2, r1
    ec00:	f000 8450 	beq.w	f4a4 <_dtoa_r+0xc3c>
    ec04:	4689      	mov	r9, r1
    ec06:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ec0a:	2b39      	cmp	r3, #57	; 0x39
    ec0c:	d0f7      	beq.n	ebfe <_dtoa_r+0x396>
    ec0e:	3301      	adds	r3, #1
    ec10:	b2db      	uxtb	r3, r3
    ec12:	700b      	strb	r3, [r1, #0]
    ec14:	9b04      	ldr	r3, [sp, #16]
    ec16:	3301      	adds	r3, #1
    ec18:	9304      	str	r3, [sp, #16]
    ec1a:	e155      	b.n	eec8 <_dtoa_r+0x660>
    ec1c:	1a09      	subs	r1, r1, r0
    ec1e:	2301      	movs	r3, #1
    ec20:	f1b1 0801 	subs.w	r8, r1, #1
    ec24:	930a      	str	r3, [sp, #40]	; 0x28
    ec26:	f57f aec7 	bpl.w	e9b8 <_dtoa_r+0x150>
    ec2a:	f1c1 0301 	rsb	r3, r1, #1
    ec2e:	9306      	str	r3, [sp, #24]
    ec30:	f04f 0800 	mov.w	r8, #0
    ec34:	e6c2      	b.n	e9bc <_dtoa_r+0x154>
    ec36:	2600      	movs	r6, #0
    ec38:	63e6      	str	r6, [r4, #60]	; 0x3c
    ec3a:	4631      	mov	r1, r6
    ec3c:	4620      	mov	r0, r4
    ec3e:	f7fd f9fd 	bl	c03c <_Balloc>
    ec42:	9000      	str	r0, [sp, #0]
    ec44:	2800      	cmp	r0, #0
    ec46:	f000 8467 	beq.w	f518 <_dtoa_r+0xcb0>
    ec4a:	9b00      	ldr	r3, [sp, #0]
    ec4c:	63a3      	str	r3, [r4, #56]	; 0x38
    ec4e:	f04f 33ff 	mov.w	r3, #4294967295
    ec52:	930b      	str	r3, [sp, #44]	; 0x2c
    ec54:	4699      	mov	r9, r3
    ec56:	2301      	movs	r3, #1
    ec58:	46b3      	mov	fp, r6
    ec5a:	9307      	str	r3, [sp, #28]
    ec5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ec5e:	2a00      	cmp	r2, #0
    ec60:	db55      	blt.n	ed0e <_dtoa_r+0x4a6>
    ec62:	9904      	ldr	r1, [sp, #16]
    ec64:	290e      	cmp	r1, #14
    ec66:	dc52      	bgt.n	ed0e <_dtoa_r+0x4a6>
    ec68:	4bb7      	ldr	r3, [pc, #732]	; (ef48 <_dtoa_r+0x6e0>)
    ec6a:	f1bb 0f00 	cmp.w	fp, #0
    ec6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    ec72:	ed93 6b00 	vldr	d6, [r3]
    ec76:	da15      	bge.n	eca4 <_dtoa_r+0x43c>
    ec78:	f1b9 0f00 	cmp.w	r9, #0
    ec7c:	dc12      	bgt.n	eca4 <_dtoa_r+0x43c>
    ec7e:	f040 82f2 	bne.w	f266 <_dtoa_r+0x9fe>
    ec82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ec86:	ee26 7b07 	vmul.f64	d7, d6, d7
    ec8a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ec8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec92:	46ca      	mov	sl, r9
    ec94:	464e      	mov	r6, r9
    ec96:	f200 826d 	bhi.w	f174 <_dtoa_r+0x90c>
    ec9a:	f8dd 8000 	ldr.w	r8, [sp]
    ec9e:	ea6f 0b0b 	mvn.w	fp, fp
    eca2:	e270      	b.n	f186 <_dtoa_r+0x91e>
    eca4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    eca8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    ecac:	9900      	ldr	r1, [sp, #0]
    ecae:	ee17 3a10 	vmov	r3, s14
    ecb2:	f1b9 0f01 	cmp.w	r9, #1
    ecb6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    ecba:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    ecbe:	f801 3b01 	strb.w	r3, [r1], #1
    ecc2:	eea5 8b46 	vfms.f64	d8, d5, d6
    ecc6:	f000 8334 	beq.w	f332 <_dtoa_r+0xaca>
    ecca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ecce:	2301      	movs	r3, #1
    ecd0:	e011      	b.n	ecf6 <_dtoa_r+0x48e>
    ecd2:	ee88 7b06 	vdiv.f64	d7, d8, d6
    ecd6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    ecda:	3301      	adds	r3, #1
    ecdc:	ee17 2a10 	vmov	r2, s14
    ece0:	454b      	cmp	r3, r9
    ece2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    ece6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    ecea:	f801 2b01 	strb.w	r2, [r1], #1
    ecee:	eea5 8b46 	vfms.f64	d8, d5, d6
    ecf2:	f000 831e 	beq.w	f332 <_dtoa_r+0xaca>
    ecf6:	ee28 8b04 	vmul.f64	d8, d8, d4
    ecfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ecfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed02:	d1e6      	bne.n	ecd2 <_dtoa_r+0x46a>
    ed04:	9b04      	ldr	r3, [sp, #16]
    ed06:	3301      	adds	r3, #1
    ed08:	9304      	str	r3, [sp, #16]
    ed0a:	4689      	mov	r9, r1
    ed0c:	e0dc      	b.n	eec8 <_dtoa_r+0x660>
    ed0e:	9b07      	ldr	r3, [sp, #28]
    ed10:	b343      	cbz	r3, ed64 <_dtoa_r+0x4fc>
    ed12:	9b01      	ldr	r3, [sp, #4]
    ed14:	2b01      	cmp	r3, #1
    ed16:	f340 8276 	ble.w	f206 <_dtoa_r+0x99e>
    ed1a:	9b08      	ldr	r3, [sp, #32]
    ed1c:	f109 3aff 	add.w	sl, r9, #4294967295
    ed20:	4553      	cmp	r3, sl
    ed22:	f280 823f 	bge.w	f1a4 <_dtoa_r+0x93c>
    ed26:	9b08      	ldr	r3, [sp, #32]
    ed28:	f8cd a020 	str.w	sl, [sp, #32]
    ed2c:	ebaa 0203 	sub.w	r2, sl, r3
    ed30:	4417      	add	r7, r2
    ed32:	f04f 0a00 	mov.w	sl, #0
    ed36:	f1b9 0f00 	cmp.w	r9, #0
    ed3a:	f2c0 8325 	blt.w	f388 <_dtoa_r+0xb20>
    ed3e:	9b06      	ldr	r3, [sp, #24]
    ed40:	9309      	str	r3, [sp, #36]	; 0x24
    ed42:	444b      	add	r3, r9
    ed44:	44c8      	add	r8, r9
    ed46:	9306      	str	r3, [sp, #24]
    ed48:	2101      	movs	r1, #1
    ed4a:	4620      	mov	r0, r4
    ed4c:	f7fd fa48 	bl	c1e0 <__i2b>
    ed50:	4606      	mov	r6, r0
    ed52:	e00c      	b.n	ed6e <_dtoa_r+0x506>
    ed54:	4b7d      	ldr	r3, [pc, #500]	; (ef4c <_dtoa_r+0x6e4>)
    ed56:	9300      	str	r3, [sp, #0]
    ed58:	9800      	ldr	r0, [sp, #0]
    ed5a:	b00f      	add	sp, #60	; 0x3c
    ed5c:	ecbd 8b02 	vpop	{d8}
    ed60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed64:	9b06      	ldr	r3, [sp, #24]
    ed66:	f8dd a020 	ldr.w	sl, [sp, #32]
    ed6a:	9e07      	ldr	r6, [sp, #28]
    ed6c:	9309      	str	r3, [sp, #36]	; 0x24
    ed6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed70:	b16b      	cbz	r3, ed8e <_dtoa_r+0x526>
    ed72:	f1b8 0f00 	cmp.w	r8, #0
    ed76:	dd0a      	ble.n	ed8e <_dtoa_r+0x526>
    ed78:	4543      	cmp	r3, r8
    ed7a:	9906      	ldr	r1, [sp, #24]
    ed7c:	461a      	mov	r2, r3
    ed7e:	bfa8      	it	ge
    ed80:	4642      	movge	r2, r8
    ed82:	1a89      	subs	r1, r1, r2
    ed84:	1a9b      	subs	r3, r3, r2
    ed86:	9106      	str	r1, [sp, #24]
    ed88:	9309      	str	r3, [sp, #36]	; 0x24
    ed8a:	eba8 0802 	sub.w	r8, r8, r2
    ed8e:	9b08      	ldr	r3, [sp, #32]
    ed90:	b163      	cbz	r3, edac <_dtoa_r+0x544>
    ed92:	9b07      	ldr	r3, [sp, #28]
    ed94:	2b00      	cmp	r3, #0
    ed96:	f000 82a7 	beq.w	f2e8 <_dtoa_r+0xa80>
    ed9a:	f1ba 0f00 	cmp.w	sl, #0
    ed9e:	f300 8204 	bgt.w	f1aa <_dtoa_r+0x942>
    eda2:	9b08      	ldr	r3, [sp, #32]
    eda4:	ebb3 020a 	subs.w	r2, r3, sl
    eda8:	f040 82ff 	bne.w	f3aa <_dtoa_r+0xb42>
    edac:	2101      	movs	r1, #1
    edae:	4620      	mov	r0, r4
    edb0:	f7fd fa16 	bl	c1e0 <__i2b>
    edb4:	2f00      	cmp	r7, #0
    edb6:	4682      	mov	sl, r0
    edb8:	f300 80af 	bgt.w	ef1a <_dtoa_r+0x6b2>
    edbc:	9b01      	ldr	r3, [sp, #4]
    edbe:	2b01      	cmp	r3, #1
    edc0:	f340 8187 	ble.w	f0d2 <_dtoa_r+0x86a>
    edc4:	2300      	movs	r3, #0
    edc6:	9308      	str	r3, [sp, #32]
    edc8:	2001      	movs	r0, #1
    edca:	2f00      	cmp	r7, #0
    edcc:	f040 80b1 	bne.w	ef32 <_dtoa_r+0x6ca>
    edd0:	4440      	add	r0, r8
    edd2:	f010 001f 	ands.w	r0, r0, #31
    edd6:	f000 817a 	beq.w	f0ce <_dtoa_r+0x866>
    edda:	f1c0 0220 	rsb	r2, r0, #32
    edde:	2a04      	cmp	r2, #4
    ede0:	f300 8088 	bgt.w	eef4 <_dtoa_r+0x68c>
    ede4:	f040 81f6 	bne.w	f1d4 <_dtoa_r+0x96c>
    ede8:	9b06      	ldr	r3, [sp, #24]
    edea:	2b00      	cmp	r3, #0
    edec:	dd05      	ble.n	edfa <_dtoa_r+0x592>
    edee:	4629      	mov	r1, r5
    edf0:	461a      	mov	r2, r3
    edf2:	4620      	mov	r0, r4
    edf4:	f7fd fb30 	bl	c458 <__lshift>
    edf8:	4605      	mov	r5, r0
    edfa:	f1b8 0f00 	cmp.w	r8, #0
    edfe:	dd05      	ble.n	ee0c <_dtoa_r+0x5a4>
    ee00:	4651      	mov	r1, sl
    ee02:	4642      	mov	r2, r8
    ee04:	4620      	mov	r0, r4
    ee06:	f7fd fb27 	bl	c458 <__lshift>
    ee0a:	4682      	mov	sl, r0
    ee0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ee0e:	2b00      	cmp	r3, #0
    ee10:	f040 813f 	bne.w	f092 <_dtoa_r+0x82a>
    ee14:	f1b9 0f00 	cmp.w	r9, #0
    ee18:	f340 8125 	ble.w	f066 <_dtoa_r+0x7fe>
    ee1c:	9b07      	ldr	r3, [sp, #28]
    ee1e:	2b00      	cmp	r3, #0
    ee20:	f040 80a3 	bne.w	ef6a <_dtoa_r+0x702>
    ee24:	9b04      	ldr	r3, [sp, #16]
    ee26:	3301      	adds	r3, #1
    ee28:	9304      	str	r3, [sp, #16]
    ee2a:	f8dd 8000 	ldr.w	r8, [sp]
    ee2e:	2701      	movs	r7, #1
    ee30:	e007      	b.n	ee42 <_dtoa_r+0x5da>
    ee32:	4629      	mov	r1, r5
    ee34:	2300      	movs	r3, #0
    ee36:	220a      	movs	r2, #10
    ee38:	4620      	mov	r0, r4
    ee3a:	f7fd f92f 	bl	c09c <__multadd>
    ee3e:	3701      	adds	r7, #1
    ee40:	4605      	mov	r5, r0
    ee42:	4651      	mov	r1, sl
    ee44:	4628      	mov	r0, r5
    ee46:	f7ff fc7b 	bl	e740 <quorem>
    ee4a:	45b9      	cmp	r9, r7
    ee4c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    ee50:	f808 0b01 	strb.w	r0, [r8], #1
    ee54:	dced      	bgt.n	ee32 <_dtoa_r+0x5ca>
    ee56:	f1b9 0f00 	cmp.w	r9, #0
    ee5a:	9a00      	ldr	r2, [sp, #0]
    ee5c:	bfcc      	ite	gt
    ee5e:	46cb      	movgt	fp, r9
    ee60:	f04f 0b01 	movle.w	fp, #1
    ee64:	4603      	mov	r3, r0
    ee66:	4493      	add	fp, r2
    ee68:	2700      	movs	r7, #0
    ee6a:	4629      	mov	r1, r5
    ee6c:	2201      	movs	r2, #1
    ee6e:	4620      	mov	r0, r4
    ee70:	9301      	str	r3, [sp, #4]
    ee72:	f7fd faf1 	bl	c458 <__lshift>
    ee76:	4651      	mov	r1, sl
    ee78:	4605      	mov	r5, r0
    ee7a:	f7fd fb65 	bl	c548 <__mcmp>
    ee7e:	2800      	cmp	r0, #0
    ee80:	f340 81af 	ble.w	f1e2 <_dtoa_r+0x97a>
    ee84:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    ee88:	9a00      	ldr	r2, [sp, #0]
    ee8a:	f10b 3bff 	add.w	fp, fp, #4294967295
    ee8e:	e004      	b.n	ee9a <_dtoa_r+0x632>
    ee90:	455a      	cmp	r2, fp
    ee92:	f000 81b1 	beq.w	f1f8 <_dtoa_r+0x990>
    ee96:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ee9a:	2b39      	cmp	r3, #57	; 0x39
    ee9c:	f10b 0901 	add.w	r9, fp, #1
    eea0:	d0f6      	beq.n	ee90 <_dtoa_r+0x628>
    eea2:	3301      	adds	r3, #1
    eea4:	f88b 3000 	strb.w	r3, [fp]
    eea8:	4651      	mov	r1, sl
    eeaa:	4620      	mov	r0, r4
    eeac:	f7fd f8ec 	bl	c088 <_Bfree>
    eeb0:	b156      	cbz	r6, eec8 <_dtoa_r+0x660>
    eeb2:	b12f      	cbz	r7, eec0 <_dtoa_r+0x658>
    eeb4:	42b7      	cmp	r7, r6
    eeb6:	d003      	beq.n	eec0 <_dtoa_r+0x658>
    eeb8:	4639      	mov	r1, r7
    eeba:	4620      	mov	r0, r4
    eebc:	f7fd f8e4 	bl	c088 <_Bfree>
    eec0:	4631      	mov	r1, r6
    eec2:	4620      	mov	r0, r4
    eec4:	f7fd f8e0 	bl	c088 <_Bfree>
    eec8:	4629      	mov	r1, r5
    eeca:	4620      	mov	r0, r4
    eecc:	f7fd f8dc 	bl	c088 <_Bfree>
    eed0:	2300      	movs	r3, #0
    eed2:	f889 3000 	strb.w	r3, [r9]
    eed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    eeda:	601a      	str	r2, [r3, #0]
    eedc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    eede:	2b00      	cmp	r3, #0
    eee0:	f43f acfe 	beq.w	e8e0 <_dtoa_r+0x78>
    eee4:	9800      	ldr	r0, [sp, #0]
    eee6:	f8c3 9000 	str.w	r9, [r3]
    eeea:	b00f      	add	sp, #60	; 0x3c
    eeec:	ecbd 8b02 	vpop	{d8}
    eef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eef4:	f1c0 001c 	rsb	r0, r0, #28
    eef8:	9b06      	ldr	r3, [sp, #24]
    eefa:	4403      	add	r3, r0
    eefc:	9306      	str	r3, [sp, #24]
    eefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef00:	4403      	add	r3, r0
    ef02:	9309      	str	r3, [sp, #36]	; 0x24
    ef04:	4480      	add	r8, r0
    ef06:	e76f      	b.n	ede8 <_dtoa_r+0x580>
    ef08:	f1c2 0220 	rsb	r2, r2, #32
    ef0c:	fa06 f202 	lsl.w	r2, r6, r2
    ef10:	ee07 2a10 	vmov	s14, r2
    ef14:	e509      	b.n	e92a <_dtoa_r+0xc2>
    ef16:	2601      	movs	r6, #1
    ef18:	e563      	b.n	e9e2 <_dtoa_r+0x17a>
    ef1a:	4601      	mov	r1, r0
    ef1c:	463a      	mov	r2, r7
    ef1e:	4620      	mov	r0, r4
    ef20:	f7fd fa3a 	bl	c398 <__pow5mult>
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	2b01      	cmp	r3, #1
    ef28:	4682      	mov	sl, r0
    ef2a:	f340 81c5 	ble.w	f2b8 <_dtoa_r+0xa50>
    ef2e:	2300      	movs	r3, #0
    ef30:	9308      	str	r3, [sp, #32]
    ef32:	f8da 2010 	ldr.w	r2, [sl, #16]
    ef36:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    ef3a:	6910      	ldr	r0, [r2, #16]
    ef3c:	f7fd f900 	bl	c140 <__hi0bits>
    ef40:	f1c0 0020 	rsb	r0, r0, #32
    ef44:	e744      	b.n	edd0 <_dtoa_r+0x568>
    ef46:	bf00      	nop
    ef48:	200002a8 	.word	0x200002a8
    ef4c:	20000cc4 	.word	0x20000cc4
    ef50:	4631      	mov	r1, r6
    ef52:	2300      	movs	r3, #0
    ef54:	220a      	movs	r2, #10
    ef56:	4620      	mov	r0, r4
    ef58:	f7fd f8a0 	bl	c09c <__multadd>
    ef5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ef5e:	2b00      	cmp	r3, #0
    ef60:	4606      	mov	r6, r0
    ef62:	f340 82ce 	ble.w	f502 <_dtoa_r+0xc9a>
    ef66:	9704      	str	r7, [sp, #16]
    ef68:	4699      	mov	r9, r3
    ef6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef6c:	2b00      	cmp	r3, #0
    ef6e:	dd05      	ble.n	ef7c <_dtoa_r+0x714>
    ef70:	4631      	mov	r1, r6
    ef72:	461a      	mov	r2, r3
    ef74:	4620      	mov	r0, r4
    ef76:	f7fd fa6f 	bl	c458 <__lshift>
    ef7a:	4606      	mov	r6, r0
    ef7c:	9b08      	ldr	r3, [sp, #32]
    ef7e:	2b00      	cmp	r3, #0
    ef80:	f040 81eb 	bne.w	f35a <_dtoa_r+0xaf2>
    ef84:	46b0      	mov	r8, r6
    ef86:	9b02      	ldr	r3, [sp, #8]
    ef88:	9f00      	ldr	r7, [sp, #0]
    ef8a:	f003 0201 	and.w	r2, r3, #1
    ef8e:	1e7b      	subs	r3, r7, #1
    ef90:	444b      	add	r3, r9
    ef92:	9308      	str	r3, [sp, #32]
    ef94:	9b01      	ldr	r3, [sp, #4]
    ef96:	920a      	str	r2, [sp, #40]	; 0x28
    ef98:	4313      	orrs	r3, r2
    ef9a:	9309      	str	r3, [sp, #36]	; 0x24
    ef9c:	4651      	mov	r1, sl
    ef9e:	4628      	mov	r0, r5
    efa0:	f7ff fbce 	bl	e740 <quorem>
    efa4:	4631      	mov	r1, r6
    efa6:	4683      	mov	fp, r0
    efa8:	4628      	mov	r0, r5
    efaa:	f7fd facd 	bl	c548 <__mcmp>
    efae:	4642      	mov	r2, r8
    efb0:	4651      	mov	r1, sl
    efb2:	4681      	mov	r9, r0
    efb4:	4620      	mov	r0, r4
    efb6:	f7fd fae9 	bl	c58c <__mdiff>
    efba:	68c2      	ldr	r2, [r0, #12]
    efbc:	4601      	mov	r1, r0
    efbe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    efc2:	2a00      	cmp	r2, #0
    efc4:	d142      	bne.n	f04c <_dtoa_r+0x7e4>
    efc6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    efca:	4628      	mov	r0, r5
    efcc:	f7fd fabc 	bl	c548 <__mcmp>
    efd0:	9906      	ldr	r1, [sp, #24]
    efd2:	9002      	str	r0, [sp, #8]
    efd4:	4620      	mov	r0, r4
    efd6:	f7fd f857 	bl	c088 <_Bfree>
    efda:	9a02      	ldr	r2, [sp, #8]
    efdc:	9b07      	ldr	r3, [sp, #28]
    efde:	b91a      	cbnz	r2, efe8 <_dtoa_r+0x780>
    efe0:	9909      	ldr	r1, [sp, #36]	; 0x24
    efe2:	2900      	cmp	r1, #0
    efe4:	f000 827e 	beq.w	f4e4 <_dtoa_r+0xc7c>
    efe8:	f1b9 0f00 	cmp.w	r9, #0
    efec:	f2c0 8183 	blt.w	f2f6 <_dtoa_r+0xa8e>
    eff0:	9901      	ldr	r1, [sp, #4]
    eff2:	ea49 0901 	orr.w	r9, r9, r1
    eff6:	990a      	ldr	r1, [sp, #40]	; 0x28
    eff8:	ea51 0909 	orrs.w	r9, r1, r9
    effc:	f000 817b 	beq.w	f2f6 <_dtoa_r+0xa8e>
    f000:	2a00      	cmp	r2, #0
    f002:	f300 81c6 	bgt.w	f392 <_dtoa_r+0xb2a>
    f006:	9a08      	ldr	r2, [sp, #32]
    f008:	703b      	strb	r3, [r7, #0]
    f00a:	f107 0901 	add.w	r9, r7, #1
    f00e:	4297      	cmp	r7, r2
    f010:	46cb      	mov	fp, r9
    f012:	f000 81c4 	beq.w	f39e <_dtoa_r+0xb36>
    f016:	4629      	mov	r1, r5
    f018:	2300      	movs	r3, #0
    f01a:	220a      	movs	r2, #10
    f01c:	4620      	mov	r0, r4
    f01e:	f7fd f83d 	bl	c09c <__multadd>
    f022:	4546      	cmp	r6, r8
    f024:	4605      	mov	r5, r0
    f026:	4631      	mov	r1, r6
    f028:	f04f 0300 	mov.w	r3, #0
    f02c:	f04f 020a 	mov.w	r2, #10
    f030:	4620      	mov	r0, r4
    f032:	d012      	beq.n	f05a <_dtoa_r+0x7f2>
    f034:	f7fd f832 	bl	c09c <__multadd>
    f038:	4641      	mov	r1, r8
    f03a:	4606      	mov	r6, r0
    f03c:	2300      	movs	r3, #0
    f03e:	220a      	movs	r2, #10
    f040:	4620      	mov	r0, r4
    f042:	f7fd f82b 	bl	c09c <__multadd>
    f046:	464f      	mov	r7, r9
    f048:	4680      	mov	r8, r0
    f04a:	e7a7      	b.n	ef9c <_dtoa_r+0x734>
    f04c:	4620      	mov	r0, r4
    f04e:	9302      	str	r3, [sp, #8]
    f050:	f7fd f81a 	bl	c088 <_Bfree>
    f054:	9b02      	ldr	r3, [sp, #8]
    f056:	2201      	movs	r2, #1
    f058:	e7c6      	b.n	efe8 <_dtoa_r+0x780>
    f05a:	f7fd f81f 	bl	c09c <__multadd>
    f05e:	464f      	mov	r7, r9
    f060:	4606      	mov	r6, r0
    f062:	4680      	mov	r8, r0
    f064:	e79a      	b.n	ef9c <_dtoa_r+0x734>
    f066:	9b01      	ldr	r3, [sp, #4]
    f068:	2b02      	cmp	r3, #2
    f06a:	dc71      	bgt.n	f150 <_dtoa_r+0x8e8>
    f06c:	9b07      	ldr	r3, [sp, #28]
    f06e:	2b00      	cmp	r3, #0
    f070:	f47f af7b 	bne.w	ef6a <_dtoa_r+0x702>
    f074:	9b04      	ldr	r3, [sp, #16]
    f076:	4651      	mov	r1, sl
    f078:	3301      	adds	r3, #1
    f07a:	4628      	mov	r0, r5
    f07c:	9304      	str	r3, [sp, #16]
    f07e:	f7ff fb5f 	bl	e740 <quorem>
    f082:	f8dd b000 	ldr.w	fp, [sp]
    f086:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f08a:	f80b 3b01 	strb.w	r3, [fp], #1
    f08e:	2700      	movs	r7, #0
    f090:	e6eb      	b.n	ee6a <_dtoa_r+0x602>
    f092:	4651      	mov	r1, sl
    f094:	4628      	mov	r0, r5
    f096:	f7fd fa57 	bl	c548 <__mcmp>
    f09a:	2800      	cmp	r0, #0
    f09c:	f6bf aeba 	bge.w	ee14 <_dtoa_r+0x5ac>
    f0a0:	4629      	mov	r1, r5
    f0a2:	2300      	movs	r3, #0
    f0a4:	220a      	movs	r2, #10
    f0a6:	4620      	mov	r0, r4
    f0a8:	f7fc fff8 	bl	c09c <__multadd>
    f0ac:	9b04      	ldr	r3, [sp, #16]
    f0ae:	1e5f      	subs	r7, r3, #1
    f0b0:	9b07      	ldr	r3, [sp, #28]
    f0b2:	4605      	mov	r5, r0
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	f47f af4b 	bne.w	ef50 <_dtoa_r+0x6e8>
    f0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0bc:	2b00      	cmp	r3, #0
    f0be:	f340 8218 	ble.w	f4f2 <_dtoa_r+0xc8a>
    f0c2:	4699      	mov	r9, r3
    f0c4:	e6b1      	b.n	ee2a <_dtoa_r+0x5c2>
    f0c6:	4bbc      	ldr	r3, [pc, #752]	; (f3b8 <_dtoa_r+0xb50>)
    f0c8:	9300      	str	r3, [sp, #0]
    f0ca:	3303      	adds	r3, #3
    f0cc:	e4a4      	b.n	ea18 <_dtoa_r+0x1b0>
    f0ce:	201c      	movs	r0, #28
    f0d0:	e712      	b.n	eef8 <_dtoa_r+0x690>
    f0d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f0d6:	2800      	cmp	r0, #0
    f0d8:	f47f ae74 	bne.w	edc4 <_dtoa_r+0x55c>
    f0dc:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f0e0:	2a00      	cmp	r2, #0
    f0e2:	f000 80f4 	beq.w	f2ce <_dtoa_r+0xa66>
    f0e6:	9b02      	ldr	r3, [sp, #8]
    f0e8:	9308      	str	r3, [sp, #32]
    f0ea:	e66d      	b.n	edc8 <_dtoa_r+0x560>
    f0ec:	2301      	movs	r3, #1
    f0ee:	9307      	str	r3, [sp, #28]
    f0f0:	9b04      	ldr	r3, [sp, #16]
    f0f2:	445b      	add	r3, fp
    f0f4:	f103 0901 	add.w	r9, r3, #1
    f0f8:	f1b9 0f01 	cmp.w	r9, #1
    f0fc:	46cc      	mov	ip, r9
    f0fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f100:	bfb8      	it	lt
    f102:	f04f 0c01 	movlt.w	ip, #1
    f106:	2100      	movs	r1, #0
    f108:	f1bc 0f17 	cmp.w	ip, #23
    f10c:	63e1      	str	r1, [r4, #60]	; 0x3c
    f10e:	f77f acbc 	ble.w	ea8a <_dtoa_r+0x222>
    f112:	2001      	movs	r0, #1
    f114:	2204      	movs	r2, #4
    f116:	0052      	lsls	r2, r2, #1
    f118:	f102 0314 	add.w	r3, r2, #20
    f11c:	4563      	cmp	r3, ip
    f11e:	4601      	mov	r1, r0
    f120:	f100 0001 	add.w	r0, r0, #1
    f124:	d9f7      	bls.n	f116 <_dtoa_r+0x8ae>
    f126:	63e1      	str	r1, [r4, #60]	; 0x3c
    f128:	e4af      	b.n	ea8a <_dtoa_r+0x222>
    f12a:	2301      	movs	r3, #1
    f12c:	9307      	str	r3, [sp, #28]
    f12e:	f1bb 0f00 	cmp.w	fp, #0
    f132:	dd52      	ble.n	f1da <_dtoa_r+0x972>
    f134:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    f138:	46d9      	mov	r9, fp
    f13a:	46dc      	mov	ip, fp
    f13c:	e7e3      	b.n	f106 <_dtoa_r+0x89e>
    f13e:	2300      	movs	r3, #0
    f140:	9307      	str	r3, [sp, #28]
    f142:	e7d5      	b.n	f0f0 <_dtoa_r+0x888>
    f144:	2300      	movs	r3, #0
    f146:	9307      	str	r3, [sp, #28]
    f148:	e7f1      	b.n	f12e <_dtoa_r+0x8c6>
    f14a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f14e:	9704      	str	r7, [sp, #16]
    f150:	f1b9 0f00 	cmp.w	r9, #0
    f154:	f47f ada1 	bne.w	ec9a <_dtoa_r+0x432>
    f158:	4651      	mov	r1, sl
    f15a:	464b      	mov	r3, r9
    f15c:	2205      	movs	r2, #5
    f15e:	4620      	mov	r0, r4
    f160:	f7fc ff9c 	bl	c09c <__multadd>
    f164:	4601      	mov	r1, r0
    f166:	4682      	mov	sl, r0
    f168:	4628      	mov	r0, r5
    f16a:	f7fd f9ed 	bl	c548 <__mcmp>
    f16e:	2800      	cmp	r0, #0
    f170:	f77f ad93 	ble.w	ec9a <_dtoa_r+0x432>
    f174:	9b04      	ldr	r3, [sp, #16]
    f176:	f103 0b01 	add.w	fp, r3, #1
    f17a:	9b00      	ldr	r3, [sp, #0]
    f17c:	2231      	movs	r2, #49	; 0x31
    f17e:	4698      	mov	r8, r3
    f180:	f803 2b01 	strb.w	r2, [r3], #1
    f184:	9300      	str	r3, [sp, #0]
    f186:	4651      	mov	r1, sl
    f188:	4620      	mov	r0, r4
    f18a:	f7fc ff7d 	bl	c088 <_Bfree>
    f18e:	f10b 0301 	add.w	r3, fp, #1
    f192:	f8dd 9000 	ldr.w	r9, [sp]
    f196:	9304      	str	r3, [sp, #16]
    f198:	f8cd 8000 	str.w	r8, [sp]
    f19c:	2e00      	cmp	r6, #0
    f19e:	f47f ae8f 	bne.w	eec0 <_dtoa_r+0x658>
    f1a2:	e691      	b.n	eec8 <_dtoa_r+0x660>
    f1a4:	eba3 0a0a 	sub.w	sl, r3, sl
    f1a8:	e5c5      	b.n	ed36 <_dtoa_r+0x4ce>
    f1aa:	4631      	mov	r1, r6
    f1ac:	4652      	mov	r2, sl
    f1ae:	4620      	mov	r0, r4
    f1b0:	f7fd f8f2 	bl	c398 <__pow5mult>
    f1b4:	462a      	mov	r2, r5
    f1b6:	4601      	mov	r1, r0
    f1b8:	4606      	mov	r6, r0
    f1ba:	4620      	mov	r0, r4
    f1bc:	f7fd f83e 	bl	c23c <__multiply>
    f1c0:	4629      	mov	r1, r5
    f1c2:	4605      	mov	r5, r0
    f1c4:	4620      	mov	r0, r4
    f1c6:	f7fc ff5f 	bl	c088 <_Bfree>
    f1ca:	e5ea      	b.n	eda2 <_dtoa_r+0x53a>
    f1cc:	2002      	movs	r0, #2
    f1ce:	eeb0 5b48 	vmov.f64	d5, d8
    f1d2:	e481      	b.n	ead8 <_dtoa_r+0x270>
    f1d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f1d8:	e68e      	b.n	eef8 <_dtoa_r+0x690>
    f1da:	f04f 0b01 	mov.w	fp, #1
    f1de:	46d9      	mov	r9, fp
    f1e0:	e44f      	b.n	ea82 <_dtoa_r+0x21a>
    f1e2:	d103      	bne.n	f1ec <_dtoa_r+0x984>
    f1e4:	9b01      	ldr	r3, [sp, #4]
    f1e6:	07db      	lsls	r3, r3, #31
    f1e8:	f53f ae4c 	bmi.w	ee84 <_dtoa_r+0x61c>
    f1ec:	46d9      	mov	r9, fp
    f1ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f1f2:	2b30      	cmp	r3, #48	; 0x30
    f1f4:	d0fa      	beq.n	f1ec <_dtoa_r+0x984>
    f1f6:	e657      	b.n	eea8 <_dtoa_r+0x640>
    f1f8:	9b04      	ldr	r3, [sp, #16]
    f1fa:	9a00      	ldr	r2, [sp, #0]
    f1fc:	3301      	adds	r3, #1
    f1fe:	9304      	str	r3, [sp, #16]
    f200:	2331      	movs	r3, #49	; 0x31
    f202:	7013      	strb	r3, [r2, #0]
    f204:	e650      	b.n	eea8 <_dtoa_r+0x640>
    f206:	f1ba 0f00 	cmp.w	sl, #0
    f20a:	f000 8123 	beq.w	f454 <_dtoa_r+0xbec>
    f20e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    f212:	9b06      	ldr	r3, [sp, #24]
    f214:	9309      	str	r3, [sp, #36]	; 0x24
    f216:	4413      	add	r3, r2
    f218:	f8dd a020 	ldr.w	sl, [sp, #32]
    f21c:	9306      	str	r3, [sp, #24]
    f21e:	4490      	add	r8, r2
    f220:	e592      	b.n	ed48 <_dtoa_r+0x4e0>
    f222:	ee07 0a90 	vmov	s15, r0
    f226:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    f22a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    f22e:	eea6 5b07 	vfma.f64	d5, d6, d7
    f232:	ee15 2a90 	vmov	r2, s11
    f236:	ec51 0b15 	vmov	r0, r1, d5
    f23a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f23e:	ec41 0b15 	vmov	d5, r0, r1
    f242:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f246:	ee36 7b47 	vsub.f64	d7, d6, d7
    f24a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f252:	f300 8137 	bgt.w	f4c4 <_dtoa_r+0xc5c>
    f256:	eeb1 5b45 	vneg.f64	d5, d5
    f25a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f262:	f57f acfb 	bpl.w	ec5c <_dtoa_r+0x3f4>
    f266:	f04f 0a00 	mov.w	sl, #0
    f26a:	4656      	mov	r6, sl
    f26c:	e515      	b.n	ec9a <_dtoa_r+0x432>
    f26e:	f000 80f5 	beq.w	f45c <_dtoa_r+0xbf4>
    f272:	9b04      	ldr	r3, [sp, #16]
    f274:	4951      	ldr	r1, [pc, #324]	; (f3bc <_dtoa_r+0xb54>)
    f276:	425a      	negs	r2, r3
    f278:	f002 000f 	and.w	r0, r2, #15
    f27c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    f280:	ed91 6b00 	vldr	d6, [r1]
    f284:	1112      	asrs	r2, r2, #4
    f286:	ee28 6b06 	vmul.f64	d6, d8, d6
    f28a:	f000 8142 	beq.w	f512 <_dtoa_r+0xcaa>
    f28e:	eeb0 7b46 	vmov.f64	d7, d6
    f292:	494b      	ldr	r1, [pc, #300]	; (f3c0 <_dtoa_r+0xb58>)
    f294:	2600      	movs	r6, #0
    f296:	2002      	movs	r0, #2
    f298:	07d3      	lsls	r3, r2, #31
    f29a:	d505      	bpl.n	f2a8 <_dtoa_r+0xa40>
    f29c:	ed91 5b00 	vldr	d5, [r1]
    f2a0:	3001      	adds	r0, #1
    f2a2:	2601      	movs	r6, #1
    f2a4:	ee27 7b05 	vmul.f64	d7, d7, d5
    f2a8:	1052      	asrs	r2, r2, #1
    f2aa:	f101 0108 	add.w	r1, r1, #8
    f2ae:	d1f3      	bne.n	f298 <_dtoa_r+0xa30>
    f2b0:	2e00      	cmp	r6, #0
    f2b2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    f2b6:	e41e      	b.n	eaf6 <_dtoa_r+0x28e>
    f2b8:	9b02      	ldr	r3, [sp, #8]
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	f47f ae37 	bne.w	ef2e <_dtoa_r+0x6c6>
    f2c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f2c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f2c8:	2a00      	cmp	r2, #0
    f2ca:	f040 8137 	bne.w	f53c <_dtoa_r+0xcd4>
    f2ce:	4a3d      	ldr	r2, [pc, #244]	; (f3c4 <_dtoa_r+0xb5c>)
    f2d0:	400a      	ands	r2, r1
    f2d2:	2a00      	cmp	r2, #0
    f2d4:	f000 80fa 	beq.w	f4cc <_dtoa_r+0xc64>
    f2d8:	9b06      	ldr	r3, [sp, #24]
    f2da:	3301      	adds	r3, #1
    f2dc:	9306      	str	r3, [sp, #24]
    f2de:	2301      	movs	r3, #1
    f2e0:	f108 0801 	add.w	r8, r8, #1
    f2e4:	9308      	str	r3, [sp, #32]
    f2e6:	e56f      	b.n	edc8 <_dtoa_r+0x560>
    f2e8:	4629      	mov	r1, r5
    f2ea:	9a08      	ldr	r2, [sp, #32]
    f2ec:	4620      	mov	r0, r4
    f2ee:	f7fd f853 	bl	c398 <__pow5mult>
    f2f2:	4605      	mov	r5, r0
    f2f4:	e55a      	b.n	edac <_dtoa_r+0x544>
    f2f6:	2a00      	cmp	r2, #0
    f2f8:	dd12      	ble.n	f320 <_dtoa_r+0xab8>
    f2fa:	4629      	mov	r1, r5
    f2fc:	2201      	movs	r2, #1
    f2fe:	4620      	mov	r0, r4
    f300:	9301      	str	r3, [sp, #4]
    f302:	f7fd f8a9 	bl	c458 <__lshift>
    f306:	4651      	mov	r1, sl
    f308:	4605      	mov	r5, r0
    f30a:	f7fd f91d 	bl	c548 <__mcmp>
    f30e:	2800      	cmp	r0, #0
    f310:	9b01      	ldr	r3, [sp, #4]
    f312:	f340 80e1 	ble.w	f4d8 <_dtoa_r+0xc70>
    f316:	2b39      	cmp	r3, #57	; 0x39
    f318:	f000 80ca 	beq.w	f4b0 <_dtoa_r+0xc48>
    f31c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f320:	46b9      	mov	r9, r7
    f322:	f809 3b01 	strb.w	r3, [r9], #1
    f326:	9b04      	ldr	r3, [sp, #16]
    f328:	3301      	adds	r3, #1
    f32a:	4637      	mov	r7, r6
    f32c:	9304      	str	r3, [sp, #16]
    f32e:	4646      	mov	r6, r8
    f330:	e5ba      	b.n	eea8 <_dtoa_r+0x640>
    f332:	ee38 8b08 	vadd.f64	d8, d8, d8
    f336:	eeb4 8bc6 	vcmpe.f64	d8, d6
    f33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f33e:	dc0a      	bgt.n	f356 <_dtoa_r+0xaee>
    f340:	eeb4 8b46 	vcmp.f64	d8, d6
    f344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f348:	f47f acdc 	bne.w	ed04 <_dtoa_r+0x49c>
    f34c:	ee17 3a10 	vmov	r3, s14
    f350:	07d8      	lsls	r0, r3, #31
    f352:	f57f acd7 	bpl.w	ed04 <_dtoa_r+0x49c>
    f356:	9a00      	ldr	r2, [sp, #0]
    f358:	e454      	b.n	ec04 <_dtoa_r+0x39c>
    f35a:	6871      	ldr	r1, [r6, #4]
    f35c:	4620      	mov	r0, r4
    f35e:	f7fc fe6d 	bl	c03c <_Balloc>
    f362:	4607      	mov	r7, r0
    f364:	2800      	cmp	r0, #0
    f366:	f000 80de 	beq.w	f526 <_dtoa_r+0xcbe>
    f36a:	6933      	ldr	r3, [r6, #16]
    f36c:	3302      	adds	r3, #2
    f36e:	009a      	lsls	r2, r3, #2
    f370:	f106 010c 	add.w	r1, r6, #12
    f374:	300c      	adds	r0, #12
    f376:	f7f9 fb3d 	bl	89f4 <memcpy>
    f37a:	4639      	mov	r1, r7
    f37c:	2201      	movs	r2, #1
    f37e:	4620      	mov	r0, r4
    f380:	f7fd f86a 	bl	c458 <__lshift>
    f384:	4680      	mov	r8, r0
    f386:	e5fe      	b.n	ef86 <_dtoa_r+0x71e>
    f388:	9b06      	ldr	r3, [sp, #24]
    f38a:	eba3 0309 	sub.w	r3, r3, r9
    f38e:	9309      	str	r3, [sp, #36]	; 0x24
    f390:	e4da      	b.n	ed48 <_dtoa_r+0x4e0>
    f392:	2b39      	cmp	r3, #57	; 0x39
    f394:	f000 808c 	beq.w	f4b0 <_dtoa_r+0xc48>
    f398:	46b9      	mov	r9, r7
    f39a:	3301      	adds	r3, #1
    f39c:	e7c1      	b.n	f322 <_dtoa_r+0xaba>
    f39e:	9a04      	ldr	r2, [sp, #16]
    f3a0:	3201      	adds	r2, #1
    f3a2:	4637      	mov	r7, r6
    f3a4:	9204      	str	r2, [sp, #16]
    f3a6:	4646      	mov	r6, r8
    f3a8:	e55f      	b.n	ee6a <_dtoa_r+0x602>
    f3aa:	4629      	mov	r1, r5
    f3ac:	4620      	mov	r0, r4
    f3ae:	f7fc fff3 	bl	c398 <__pow5mult>
    f3b2:	4605      	mov	r5, r0
    f3b4:	e4fa      	b.n	edac <_dtoa_r+0x544>
    f3b6:	bf00      	nop
    f3b8:	20000c24 	.word	0x20000c24
    f3bc:	200002a8 	.word	0x200002a8
    f3c0:	20000280 	.word	0x20000280
    f3c4:	7ff00000 	.word	0x7ff00000
    f3c8:	4b5e      	ldr	r3, [pc, #376]	; (f544 <_dtoa_r+0xcdc>)
    f3ca:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    f3ce:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f3d2:	ed1c 3b02 	vldr	d3, [ip, #-8]
    f3d6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    f3da:	ee36 7b47 	vsub.f64	d7, d6, d7
    f3de:	ec41 0b16 	vmov	d6, r0, r1
    f3e2:	ee15 1a90 	vmov	r1, s11
    f3e6:	ee23 3b06 	vmul.f64	d3, d3, d6
    f3ea:	9800      	ldr	r0, [sp, #0]
    f3ec:	3130      	adds	r1, #48	; 0x30
    f3ee:	2a01      	cmp	r2, #1
    f3f0:	f800 1b01 	strb.w	r1, [r0], #1
    f3f4:	f000 8083 	beq.w	f4fe <_dtoa_r+0xc96>
    f3f8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f3fc:	9b00      	ldr	r3, [sp, #0]
    f3fe:	1899      	adds	r1, r3, r2
    f400:	ee27 7b04 	vmul.f64	d7, d7, d4
    f404:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f408:	ee16 3a90 	vmov	r3, s13
    f40c:	3330      	adds	r3, #48	; 0x30
    f40e:	f800 3b01 	strb.w	r3, [r0], #1
    f412:	4281      	cmp	r1, r0
    f414:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    f418:	ee37 7b45 	vsub.f64	d7, d7, d5
    f41c:	d1f0      	bne.n	f400 <_dtoa_r+0xb98>
    f41e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f422:	ee33 5b06 	vadd.f64	d5, d3, d6
    f426:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f42e:	f53f abe3 	bmi.w	ebf8 <_dtoa_r+0x390>
    f432:	ee36 6b43 	vsub.f64	d6, d6, d3
    f436:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f43e:	f77f ac0d 	ble.w	ec5c <_dtoa_r+0x3f4>
    f442:	4689      	mov	r9, r1
    f444:	3901      	subs	r1, #1
    f446:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    f44a:	2b30      	cmp	r3, #48	; 0x30
    f44c:	d0f9      	beq.n	f442 <_dtoa_r+0xbda>
    f44e:	1c73      	adds	r3, r6, #1
    f450:	9304      	str	r3, [sp, #16]
    f452:	e539      	b.n	eec8 <_dtoa_r+0x660>
    f454:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f456:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    f45a:	e6da      	b.n	f212 <_dtoa_r+0x9aa>
    f45c:	2002      	movs	r0, #2
    f45e:	eeb0 6b48 	vmov.f64	d6, d8
    f462:	f7ff bb48 	b.w	eaf6 <_dtoa_r+0x28e>
    f466:	f1b9 0f00 	cmp.w	r9, #0
    f46a:	f43f aeda 	beq.w	f222 <_dtoa_r+0x9ba>
    f46e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f470:	2a00      	cmp	r2, #0
    f472:	f77f abf3 	ble.w	ec5c <_dtoa_r+0x3f4>
    f476:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f47a:	ee26 6b04 	vmul.f64	d6, d6, d4
    f47e:	3001      	adds	r0, #1
    f480:	ee07 0a90 	vmov	s15, r0
    f484:	9b04      	ldr	r3, [sp, #16]
    f486:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f48a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f48e:	eea6 7b05 	vfma.f64	d7, d6, d5
    f492:	ee17 ca90 	vmov	ip, s15
    f496:	ec51 0b17 	vmov	r0, r1, d7
    f49a:	1e5e      	subs	r6, r3, #1
    f49c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    f4a0:	f7ff bb47 	b.w	eb32 <_dtoa_r+0x2ca>
    f4a4:	9b04      	ldr	r3, [sp, #16]
    f4a6:	3301      	adds	r3, #1
    f4a8:	9304      	str	r3, [sp, #16]
    f4aa:	2331      	movs	r3, #49	; 0x31
    f4ac:	f7ff bbb1 	b.w	ec12 <_dtoa_r+0x3aa>
    f4b0:	9b04      	ldr	r3, [sp, #16]
    f4b2:	46bb      	mov	fp, r7
    f4b4:	3301      	adds	r3, #1
    f4b6:	9304      	str	r3, [sp, #16]
    f4b8:	2339      	movs	r3, #57	; 0x39
    f4ba:	4637      	mov	r7, r6
    f4bc:	f80b 3b01 	strb.w	r3, [fp], #1
    f4c0:	4646      	mov	r6, r8
    f4c2:	e4e1      	b.n	ee88 <_dtoa_r+0x620>
    f4c4:	f04f 0a00 	mov.w	sl, #0
    f4c8:	4656      	mov	r6, sl
    f4ca:	e653      	b.n	f174 <_dtoa_r+0x90c>
    f4cc:	9208      	str	r2, [sp, #32]
    f4ce:	e47b      	b.n	edc8 <_dtoa_r+0x560>
    f4d0:	1c73      	adds	r3, r6, #1
    f4d2:	9304      	str	r3, [sp, #16]
    f4d4:	4689      	mov	r9, r1
    f4d6:	e4f7      	b.n	eec8 <_dtoa_r+0x660>
    f4d8:	f47f af22 	bne.w	f320 <_dtoa_r+0xab8>
    f4dc:	07da      	lsls	r2, r3, #31
    f4de:	f57f af1f 	bpl.w	f320 <_dtoa_r+0xab8>
    f4e2:	e718      	b.n	f316 <_dtoa_r+0xaae>
    f4e4:	2b39      	cmp	r3, #57	; 0x39
    f4e6:	d0e3      	beq.n	f4b0 <_dtoa_r+0xc48>
    f4e8:	f1b9 0f00 	cmp.w	r9, #0
    f4ec:	f73f af16 	bgt.w	f31c <_dtoa_r+0xab4>
    f4f0:	e716      	b.n	f320 <_dtoa_r+0xab8>
    f4f2:	9b01      	ldr	r3, [sp, #4]
    f4f4:	2b02      	cmp	r3, #2
    f4f6:	f73f ae28 	bgt.w	f14a <_dtoa_r+0x8e2>
    f4fa:	9704      	str	r7, [sp, #16]
    f4fc:	e5ba      	b.n	f074 <_dtoa_r+0x80c>
    f4fe:	4601      	mov	r1, r0
    f500:	e78d      	b.n	f41e <_dtoa_r+0xbb6>
    f502:	9b01      	ldr	r3, [sp, #4]
    f504:	2b02      	cmp	r3, #2
    f506:	f73f ae20 	bgt.w	f14a <_dtoa_r+0x8e2>
    f50a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f50e:	9704      	str	r7, [sp, #16]
    f510:	e52b      	b.n	ef6a <_dtoa_r+0x702>
    f512:	2002      	movs	r0, #2
    f514:	f7ff baef 	b.w	eaf6 <_dtoa_r+0x28e>
    f518:	4b0b      	ldr	r3, [pc, #44]	; (f548 <_dtoa_r+0xce0>)
    f51a:	480c      	ldr	r0, [pc, #48]	; (f54c <_dtoa_r+0xce4>)
    f51c:	2200      	movs	r2, #0
    f51e:	f240 11af 	movw	r1, #431	; 0x1af
    f522:	f7ff f8b1 	bl	e688 <__assert_func>
    f526:	4b08      	ldr	r3, [pc, #32]	; (f548 <_dtoa_r+0xce0>)
    f528:	4808      	ldr	r0, [pc, #32]	; (f54c <_dtoa_r+0xce4>)
    f52a:	463a      	mov	r2, r7
    f52c:	f240 21ef 	movw	r1, #751	; 0x2ef
    f530:	f7ff f8aa 	bl	e688 <__assert_func>
    f534:	4b06      	ldr	r3, [pc, #24]	; (f550 <_dtoa_r+0xce8>)
    f536:	9300      	str	r3, [sp, #0]
    f538:	f7ff b9d2 	b.w	e8e0 <_dtoa_r+0x78>
    f53c:	9b02      	ldr	r3, [sp, #8]
    f53e:	9308      	str	r3, [sp, #32]
    f540:	e4f7      	b.n	ef32 <_dtoa_r+0x6ca>
    f542:	bf00      	nop
    f544:	200002a8 	.word	0x200002a8
    f548:	20000aa4 	.word	0x20000aa4
    f54c:	20000c28 	.word	0x20000c28
    f550:	20000c18 	.word	0x20000c18

0000f554 <_wcrtomb_r>:
    f554:	b570      	push	{r4, r5, r6, lr}
    f556:	4605      	mov	r5, r0
    f558:	b084      	sub	sp, #16
    f55a:	b15b      	cbz	r3, f574 <_wcrtomb_r+0x20>
    f55c:	461c      	mov	r4, r3
    f55e:	b169      	cbz	r1, f57c <_wcrtomb_r+0x28>
    f560:	4b0e      	ldr	r3, [pc, #56]	; (f59c <_wcrtomb_r+0x48>)
    f562:	4628      	mov	r0, r5
    f564:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    f568:	4623      	mov	r3, r4
    f56a:	47b0      	blx	r6
    f56c:	1c43      	adds	r3, r0, #1
    f56e:	d00f      	beq.n	f590 <_wcrtomb_r+0x3c>
    f570:	b004      	add	sp, #16
    f572:	bd70      	pop	{r4, r5, r6, pc}
    f574:	f500 7482 	add.w	r4, r0, #260	; 0x104
    f578:	2900      	cmp	r1, #0
    f57a:	d1f1      	bne.n	f560 <_wcrtomb_r+0xc>
    f57c:	4a07      	ldr	r2, [pc, #28]	; (f59c <_wcrtomb_r+0x48>)
    f57e:	4623      	mov	r3, r4
    f580:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    f584:	4628      	mov	r0, r5
    f586:	460a      	mov	r2, r1
    f588:	a901      	add	r1, sp, #4
    f58a:	47b0      	blx	r6
    f58c:	1c43      	adds	r3, r0, #1
    f58e:	d1ef      	bne.n	f570 <_wcrtomb_r+0x1c>
    f590:	2200      	movs	r2, #0
    f592:	238a      	movs	r3, #138	; 0x8a
    f594:	6022      	str	r2, [r4, #0]
    f596:	602b      	str	r3, [r5, #0]
    f598:	b004      	add	sp, #16
    f59a:	bd70      	pop	{r4, r5, r6, pc}
    f59c:	20004374 	.word	0x20004374

0000f5a0 <_wcsrtombs_r>:
    f5a0:	b510      	push	{r4, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	9c04      	ldr	r4, [sp, #16]
    f5a6:	e9cd 3400 	strd	r3, r4, [sp]
    f5aa:	f04f 33ff 	mov.w	r3, #4294967295
    f5ae:	f001 fbc7 	bl	10d40 <_wcsnrtombs_r>
    f5b2:	b002      	add	sp, #8
    f5b4:	bd10      	pop	{r4, pc}
    f5b6:	bf00      	nop

0000f5b8 <fiprintf>:
    f5b8:	b40e      	push	{r1, r2, r3}
    f5ba:	b510      	push	{r4, lr}
    f5bc:	b083      	sub	sp, #12
    f5be:	ab05      	add	r3, sp, #20
    f5c0:	4c06      	ldr	r4, [pc, #24]	; (f5dc <fiprintf+0x24>)
    f5c2:	f853 2b04 	ldr.w	r2, [r3], #4
    f5c6:	9301      	str	r3, [sp, #4]
    f5c8:	4601      	mov	r1, r0
    f5ca:	6820      	ldr	r0, [r4, #0]
    f5cc:	f000 f8c4 	bl	f758 <_vfiprintf_r>
    f5d0:	b003      	add	sp, #12
    f5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5d6:	b003      	add	sp, #12
    f5d8:	4770      	bx	lr
    f5da:	bf00      	nop
    f5dc:	200048fc 	.word	0x200048fc

0000f5e0 <__ssprint_r>:
    f5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5e4:	6893      	ldr	r3, [r2, #8]
    f5e6:	6817      	ldr	r7, [r2, #0]
    f5e8:	b083      	sub	sp, #12
    f5ea:	4692      	mov	sl, r2
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	d070      	beq.n	f6d2 <__ssprint_r+0xf2>
    f5f0:	4681      	mov	r9, r0
    f5f2:	688a      	ldr	r2, [r1, #8]
    f5f4:	6808      	ldr	r0, [r1, #0]
    f5f6:	460c      	mov	r4, r1
    f5f8:	3708      	adds	r7, #8
    f5fa:	e043      	b.n	f684 <__ssprint_r+0xa4>
    f5fc:	89a3      	ldrh	r3, [r4, #12]
    f5fe:	f413 6f90 	tst.w	r3, #1152	; 0x480
    f602:	d02e      	beq.n	f662 <__ssprint_r+0x82>
    f604:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    f608:	eba0 0801 	sub.w	r8, r0, r1
    f60c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    f610:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    f614:	f108 0001 	add.w	r0, r8, #1
    f618:	1076      	asrs	r6, r6, #1
    f61a:	4428      	add	r0, r5
    f61c:	42b0      	cmp	r0, r6
    f61e:	4632      	mov	r2, r6
    f620:	bf84      	itt	hi
    f622:	4606      	movhi	r6, r0
    f624:	4632      	movhi	r2, r6
    f626:	055b      	lsls	r3, r3, #21
    f628:	d537      	bpl.n	f69a <__ssprint_r+0xba>
    f62a:	4611      	mov	r1, r2
    f62c:	4648      	mov	r0, r9
    f62e:	f7fa ff91 	bl	a554 <_malloc_r>
    f632:	9001      	str	r0, [sp, #4]
    f634:	2800      	cmp	r0, #0
    f636:	d03a      	beq.n	f6ae <__ssprint_r+0xce>
    f638:	4642      	mov	r2, r8
    f63a:	6921      	ldr	r1, [r4, #16]
    f63c:	f7f9 f9da 	bl	89f4 <memcpy>
    f640:	89a2      	ldrh	r2, [r4, #12]
    f642:	9b01      	ldr	r3, [sp, #4]
    f644:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    f648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f64c:	81a2      	strh	r2, [r4, #12]
    f64e:	eba6 0208 	sub.w	r2, r6, r8
    f652:	eb03 0008 	add.w	r0, r3, r8
    f656:	6166      	str	r6, [r4, #20]
    f658:	60a2      	str	r2, [r4, #8]
    f65a:	6123      	str	r3, [r4, #16]
    f65c:	6020      	str	r0, [r4, #0]
    f65e:	462e      	mov	r6, r5
    f660:	46a8      	mov	r8, r5
    f662:	4642      	mov	r2, r8
    f664:	4659      	mov	r1, fp
    f666:	f7fb fef1 	bl	b44c <memmove>
    f66a:	f8da 3008 	ldr.w	r3, [sl, #8]
    f66e:	68a2      	ldr	r2, [r4, #8]
    f670:	6820      	ldr	r0, [r4, #0]
    f672:	1b92      	subs	r2, r2, r6
    f674:	4440      	add	r0, r8
    f676:	1b5b      	subs	r3, r3, r5
    f678:	60a2      	str	r2, [r4, #8]
    f67a:	6020      	str	r0, [r4, #0]
    f67c:	f8ca 3008 	str.w	r3, [sl, #8]
    f680:	b33b      	cbz	r3, f6d2 <__ssprint_r+0xf2>
    f682:	3708      	adds	r7, #8
    f684:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    f688:	2d00      	cmp	r5, #0
    f68a:	d0fa      	beq.n	f682 <__ssprint_r+0xa2>
    f68c:	42aa      	cmp	r2, r5
    f68e:	4616      	mov	r6, r2
    f690:	4690      	mov	r8, r2
    f692:	d9b3      	bls.n	f5fc <__ssprint_r+0x1c>
    f694:	462e      	mov	r6, r5
    f696:	46a8      	mov	r8, r5
    f698:	e7e3      	b.n	f662 <__ssprint_r+0x82>
    f69a:	4648      	mov	r0, r9
    f69c:	f7fb fa22 	bl	aae4 <_realloc_r>
    f6a0:	4603      	mov	r3, r0
    f6a2:	2800      	cmp	r0, #0
    f6a4:	d1d3      	bne.n	f64e <__ssprint_r+0x6e>
    f6a6:	6921      	ldr	r1, [r4, #16]
    f6a8:	4648      	mov	r0, r9
    f6aa:	f7fc fbab 	bl	be04 <_free_r>
    f6ae:	89a3      	ldrh	r3, [r4, #12]
    f6b0:	220c      	movs	r2, #12
    f6b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f6b6:	f8c9 2000 	str.w	r2, [r9]
    f6ba:	f04f 30ff 	mov.w	r0, #4294967295
    f6be:	81a3      	strh	r3, [r4, #12]
    f6c0:	2200      	movs	r2, #0
    f6c2:	2300      	movs	r3, #0
    f6c4:	f8ca 2008 	str.w	r2, [sl, #8]
    f6c8:	f8ca 3004 	str.w	r3, [sl, #4]
    f6cc:	b003      	add	sp, #12
    f6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6d2:	2000      	movs	r0, #0
    f6d4:	2300      	movs	r3, #0
    f6d6:	f8ca 3004 	str.w	r3, [sl, #4]
    f6da:	b003      	add	sp, #12
    f6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f6e0 <__sprint_r.part.0>:
    f6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    f6e6:	049c      	lsls	r4, r3, #18
    f6e8:	4690      	mov	r8, r2
    f6ea:	d52d      	bpl.n	f748 <__sprint_r.part.0+0x68>
    f6ec:	6893      	ldr	r3, [r2, #8]
    f6ee:	6812      	ldr	r2, [r2, #0]
    f6f0:	b343      	cbz	r3, f744 <__sprint_r.part.0+0x64>
    f6f2:	468b      	mov	fp, r1
    f6f4:	4606      	mov	r6, r0
    f6f6:	f102 0908 	add.w	r9, r2, #8
    f6fa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    f6fe:	ea5f 079a 	movs.w	r7, sl, lsr #2
    f702:	d015      	beq.n	f730 <__sprint_r.part.0+0x50>
    f704:	3d04      	subs	r5, #4
    f706:	2400      	movs	r4, #0
    f708:	e001      	b.n	f70e <__sprint_r.part.0+0x2e>
    f70a:	42a7      	cmp	r7, r4
    f70c:	d00e      	beq.n	f72c <__sprint_r.part.0+0x4c>
    f70e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    f712:	465a      	mov	r2, fp
    f714:	4630      	mov	r0, r6
    f716:	f001 fa5b 	bl	10bd0 <_fputwc_r>
    f71a:	1c43      	adds	r3, r0, #1
    f71c:	f104 0401 	add.w	r4, r4, #1
    f720:	d1f3      	bne.n	f70a <__sprint_r.part.0+0x2a>
    f722:	2300      	movs	r3, #0
    f724:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f72c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f730:	f02a 0a03 	bic.w	sl, sl, #3
    f734:	eba3 030a 	sub.w	r3, r3, sl
    f738:	f8c8 3008 	str.w	r3, [r8, #8]
    f73c:	f109 0908 	add.w	r9, r9, #8
    f740:	2b00      	cmp	r3, #0
    f742:	d1da      	bne.n	f6fa <__sprint_r.part.0+0x1a>
    f744:	2000      	movs	r0, #0
    f746:	e7ec      	b.n	f722 <__sprint_r.part.0+0x42>
    f748:	f001 f80c 	bl	10764 <__sfvwrite_r>
    f74c:	2300      	movs	r3, #0
    f74e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f756:	bf00      	nop

0000f758 <_vfiprintf_r>:
    f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f75c:	ed2d 8b02 	vpush	{d8}
    f760:	b0c5      	sub	sp, #276	; 0x114
    f762:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    f766:	4683      	mov	fp, r0
    f768:	ee08 1a10 	vmov	s16, r1
    f76c:	4616      	mov	r6, r2
    f76e:	2100      	movs	r1, #0
    f770:	2208      	movs	r2, #8
    f772:	4650      	mov	r0, sl
    f774:	461c      	mov	r4, r3
    f776:	9307      	str	r3, [sp, #28]
    f778:	f7fb fee4 	bl	b544 <memset>
    f77c:	f1bb 0f00 	cmp.w	fp, #0
    f780:	d004      	beq.n	f78c <_vfiprintf_r+0x34>
    f782:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    f786:	2b00      	cmp	r3, #0
    f788:	f000 86a0 	beq.w	104cc <_vfiprintf_r+0xd74>
    f78c:	ee18 2a10 	vmov	r2, s16
    f790:	6e53      	ldr	r3, [r2, #100]	; 0x64
    f792:	07db      	lsls	r3, r3, #31
    f794:	f140 8513 	bpl.w	101be <_vfiprintf_r+0xa66>
    f798:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    f79c:	b28a      	uxth	r2, r1
    f79e:	0495      	lsls	r5, r2, #18
    f7a0:	d40b      	bmi.n	f7ba <_vfiprintf_r+0x62>
    f7a2:	ee18 3a10 	vmov	r3, s16
    f7a6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    f7aa:	8199      	strh	r1, [r3, #12]
    f7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f7ae:	b28a      	uxth	r2, r1
    f7b0:	ee18 1a10 	vmov	r1, s16
    f7b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f7b8:	664b      	str	r3, [r1, #100]	; 0x64
    f7ba:	0710      	lsls	r0, r2, #28
    f7bc:	f140 8105 	bpl.w	f9ca <_vfiprintf_r+0x272>
    f7c0:	ee18 3a10 	vmov	r3, s16
    f7c4:	691b      	ldr	r3, [r3, #16]
    f7c6:	2b00      	cmp	r3, #0
    f7c8:	f000 80ff 	beq.w	f9ca <_vfiprintf_r+0x272>
    f7cc:	f002 031a 	and.w	r3, r2, #26
    f7d0:	2b0a      	cmp	r3, #10
    f7d2:	f000 810a 	beq.w	f9ea <_vfiprintf_r+0x292>
    f7d6:	2300      	movs	r3, #0
    f7d8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    f7dc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    f7e0:	aa1b      	add	r2, sp, #108	; 0x6c
    f7e2:	930c      	str	r3, [sp, #48]	; 0x30
    f7e4:	9218      	str	r2, [sp, #96]	; 0x60
    f7e6:	4691      	mov	r9, r2
    f7e8:	930b      	str	r3, [sp, #44]	; 0x2c
    f7ea:	9305      	str	r3, [sp, #20]
    f7ec:	46b0      	mov	r8, r6
    f7ee:	4644      	mov	r4, r8
    f7f0:	4ba8      	ldr	r3, [pc, #672]	; (fa94 <_vfiprintf_r+0x33c>)
    f7f2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    f7f6:	f7fb ff8f 	bl	b718 <__locale_mb_cur_max>
    f7fa:	4622      	mov	r2, r4
    f7fc:	4603      	mov	r3, r0
    f7fe:	a912      	add	r1, sp, #72	; 0x48
    f800:	f8cd a000 	str.w	sl, [sp]
    f804:	4658      	mov	r0, fp
    f806:	47a8      	blx	r5
    f808:	2800      	cmp	r0, #0
    f80a:	f000 8145 	beq.w	fa98 <_vfiprintf_r+0x340>
    f80e:	f2c0 8139 	blt.w	fa84 <_vfiprintf_r+0x32c>
    f812:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f814:	2a25      	cmp	r2, #37	; 0x25
    f816:	4603      	mov	r3, r0
    f818:	d001      	beq.n	f81e <_vfiprintf_r+0xc6>
    f81a:	441c      	add	r4, r3
    f81c:	e7e8      	b.n	f7f0 <_vfiprintf_r+0x98>
    f81e:	ebb4 0608 	subs.w	r6, r4, r8
    f822:	4605      	mov	r5, r0
    f824:	f040 813c 	bne.w	faa0 <_vfiprintf_r+0x348>
    f828:	2300      	movs	r3, #0
    f82a:	7861      	ldrb	r1, [r4, #1]
    f82c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    f830:	f104 0801 	add.w	r8, r4, #1
    f834:	9306      	str	r3, [sp, #24]
    f836:	f04f 37ff 	mov.w	r7, #4294967295
    f83a:	461e      	mov	r6, r3
    f83c:	242b      	movs	r4, #43	; 0x2b
    f83e:	f108 0801 	add.w	r8, r8, #1
    f842:	f1a1 0320 	sub.w	r3, r1, #32
    f846:	2b5a      	cmp	r3, #90	; 0x5a
    f848:	f200 8178 	bhi.w	fb3c <_vfiprintf_r+0x3e4>
    f84c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f850:	017602b5 	.word	0x017602b5
    f854:	02b00176 	.word	0x02b00176
    f858:	01760176 	.word	0x01760176
    f85c:	006a0176 	.word	0x006a0176
    f860:	01760176 	.word	0x01760176
    f864:	028d027d 	.word	0x028d027d
    f868:	02880176 	.word	0x02880176
    f86c:	01760297 	.word	0x01760297
    f870:	005b0292 	.word	0x005b0292
    f874:	005b005b 	.word	0x005b005b
    f878:	005b005b 	.word	0x005b005b
    f87c:	005b005b 	.word	0x005b005b
    f880:	005b005b 	.word	0x005b005b
    f884:	01760176 	.word	0x01760176
    f888:	01760176 	.word	0x01760176
    f88c:	01760176 	.word	0x01760176
    f890:	01760176 	.word	0x01760176
    f894:	025c0176 	.word	0x025c0176
    f898:	01760084 	.word	0x01760084
    f89c:	01760176 	.word	0x01760176
    f8a0:	01760176 	.word	0x01760176
    f8a4:	01760176 	.word	0x01760176
    f8a8:	01760176 	.word	0x01760176
    f8ac:	00e80176 	.word	0x00e80176
    f8b0:	01760176 	.word	0x01760176
    f8b4:	02330176 	.word	0x02330176
    f8b8:	02da0176 	.word	0x02da0176
    f8bc:	01760176 	.word	0x01760176
    f8c0:	0176058b 	.word	0x0176058b
    f8c4:	01760176 	.word	0x01760176
    f8c8:	01760176 	.word	0x01760176
    f8cc:	01760176 	.word	0x01760176
    f8d0:	01760176 	.word	0x01760176
    f8d4:	025c0176 	.word	0x025c0176
    f8d8:	01760086 	.word	0x01760086
    f8dc:	01760176 	.word	0x01760176
    f8e0:	008602cd 	.word	0x008602cd
    f8e4:	0176007f 	.word	0x0176007f
    f8e8:	017602c0 	.word	0x017602c0
    f8ec:	00ea02fd 	.word	0x00ea02fd
    f8f0:	007f02ed 	.word	0x007f02ed
    f8f4:	02330176 	.word	0x02330176
    f8f8:	0569007c 	.word	0x0569007c
    f8fc:	01760176 	.word	0x01760176
    f900:	0176056b 	.word	0x0176056b
    f904:	007c      	.short	0x007c
    f906:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f90a:	2200      	movs	r2, #0
    f90c:	f818 1b01 	ldrb.w	r1, [r8], #1
    f910:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f914:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    f918:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    f91c:	2b09      	cmp	r3, #9
    f91e:	d9f5      	bls.n	f90c <_vfiprintf_r+0x1b4>
    f920:	9206      	str	r2, [sp, #24]
    f922:	e78e      	b.n	f842 <_vfiprintf_r+0xea>
    f924:	4658      	mov	r0, fp
    f926:	f7fe fe1b 	bl	e560 <_localeconv_r>
    f92a:	6843      	ldr	r3, [r0, #4]
    f92c:	930d      	str	r3, [sp, #52]	; 0x34
    f92e:	4618      	mov	r0, r3
    f930:	f7fc f966 	bl	bc00 <strlen>
    f934:	900e      	str	r0, [sp, #56]	; 0x38
    f936:	4605      	mov	r5, r0
    f938:	4658      	mov	r0, fp
    f93a:	f7fe fe11 	bl	e560 <_localeconv_r>
    f93e:	6883      	ldr	r3, [r0, #8]
    f940:	930b      	str	r3, [sp, #44]	; 0x2c
    f942:	2d00      	cmp	r5, #0
    f944:	f040 84d6 	bne.w	102f4 <_vfiprintf_r+0xb9c>
    f948:	f898 1000 	ldrb.w	r1, [r8]
    f94c:	e777      	b.n	f83e <_vfiprintf_r+0xe6>
    f94e:	f898 1000 	ldrb.w	r1, [r8]
    f952:	f046 0620 	orr.w	r6, r6, #32
    f956:	e772      	b.n	f83e <_vfiprintf_r+0xe6>
    f958:	f046 0610 	orr.w	r6, r6, #16
    f95c:	06b4      	lsls	r4, r6, #26
    f95e:	f140 818e 	bpl.w	fc7e <_vfiprintf_r+0x526>
    f962:	9b07      	ldr	r3, [sp, #28]
    f964:	3307      	adds	r3, #7
    f966:	f023 0307 	bic.w	r3, r3, #7
    f96a:	461a      	mov	r2, r3
    f96c:	6859      	ldr	r1, [r3, #4]
    f96e:	f852 3b08 	ldr.w	r3, [r2], #8
    f972:	9207      	str	r2, [sp, #28]
    f974:	460a      	mov	r2, r1
    f976:	2900      	cmp	r1, #0
    f978:	f2c0 8470 	blt.w	1025c <_vfiprintf_r+0xb04>
    f97c:	1c79      	adds	r1, r7, #1
    f97e:	f000 85a2 	beq.w	104c6 <_vfiprintf_r+0xd6e>
    f982:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    f986:	9103      	str	r1, [sp, #12]
    f988:	ea53 0102 	orrs.w	r1, r3, r2
    f98c:	f000 843f 	beq.w	1020e <_vfiprintf_r+0xab6>
    f990:	2b0a      	cmp	r3, #10
    f992:	f172 0100 	sbcs.w	r1, r2, #0
    f996:	f080 8541 	bcs.w	1041c <_vfiprintf_r+0xcc4>
    f99a:	3330      	adds	r3, #48	; 0x30
    f99c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    f9a0:	9e03      	ldr	r6, [sp, #12]
    f9a2:	2301      	movs	r3, #1
    f9a4:	9304      	str	r3, [sp, #16]
    f9a6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    f9aa:	9b04      	ldr	r3, [sp, #16]
    f9ac:	42bb      	cmp	r3, r7
    f9ae:	bfb8      	it	lt
    f9b0:	463b      	movlt	r3, r7
    f9b2:	9303      	str	r3, [sp, #12]
    f9b4:	2300      	movs	r3, #0
    f9b6:	9308      	str	r3, [sp, #32]
    f9b8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    f9bc:	2b00      	cmp	r3, #0
    f9be:	f000 80cb 	beq.w	fb58 <_vfiprintf_r+0x400>
    f9c2:	9b03      	ldr	r3, [sp, #12]
    f9c4:	3301      	adds	r3, #1
    f9c6:	9303      	str	r3, [sp, #12]
    f9c8:	e0c6      	b.n	fb58 <_vfiprintf_r+0x400>
    f9ca:	ee18 1a10 	vmov	r1, s16
    f9ce:	4658      	mov	r0, fp
    f9d0:	ee18 5a10 	vmov	r5, s16
    f9d4:	f001 f840 	bl	10a58 <__swsetup_r>
    f9d8:	2800      	cmp	r0, #0
    f9da:	f040 8652 	bne.w	10682 <_vfiprintf_r+0xf2a>
    f9de:	89aa      	ldrh	r2, [r5, #12]
    f9e0:	f002 031a 	and.w	r3, r2, #26
    f9e4:	2b0a      	cmp	r3, #10
    f9e6:	f47f aef6 	bne.w	f7d6 <_vfiprintf_r+0x7e>
    f9ea:	ee18 1a10 	vmov	r1, s16
    f9ee:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    f9f2:	2b00      	cmp	r3, #0
    f9f4:	f6ff aeef 	blt.w	f7d6 <_vfiprintf_r+0x7e>
    f9f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    f9fa:	07db      	lsls	r3, r3, #31
    f9fc:	d402      	bmi.n	fa04 <_vfiprintf_r+0x2ac>
    f9fe:	0597      	lsls	r7, r2, #22
    fa00:	f140 8612 	bpl.w	10628 <_vfiprintf_r+0xed0>
    fa04:	ee18 1a10 	vmov	r1, s16
    fa08:	4623      	mov	r3, r4
    fa0a:	4632      	mov	r2, r6
    fa0c:	4658      	mov	r0, fp
    fa0e:	f000 fe69 	bl	106e4 <__sbprintf>
    fa12:	9005      	str	r0, [sp, #20]
    fa14:	9805      	ldr	r0, [sp, #20]
    fa16:	b045      	add	sp, #276	; 0x114
    fa18:	ecbd 8b02 	vpop	{d8}
    fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa20:	f046 0610 	orr.w	r6, r6, #16
    fa24:	f016 0220 	ands.w	r2, r6, #32
    fa28:	f000 8136 	beq.w	fc98 <_vfiprintf_r+0x540>
    fa2c:	9b07      	ldr	r3, [sp, #28]
    fa2e:	3307      	adds	r3, #7
    fa30:	f023 0307 	bic.w	r3, r3, #7
    fa34:	4619      	mov	r1, r3
    fa36:	685a      	ldr	r2, [r3, #4]
    fa38:	f851 3b08 	ldr.w	r3, [r1], #8
    fa3c:	9107      	str	r1, [sp, #28]
    fa3e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    fa42:	9103      	str	r1, [sp, #12]
    fa44:	2100      	movs	r1, #0
    fa46:	2000      	movs	r0, #0
    fa48:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    fa4c:	1c78      	adds	r0, r7, #1
    fa4e:	f000 8210 	beq.w	fe72 <_vfiprintf_r+0x71a>
    fa52:	9803      	ldr	r0, [sp, #12]
    fa54:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    fa58:	ea53 0002 	orrs.w	r0, r3, r2
    fa5c:	f040 8208 	bne.w	fe70 <_vfiprintf_r+0x718>
    fa60:	2f00      	cmp	r7, #0
    fa62:	f040 8538 	bne.w	104d6 <_vfiprintf_r+0xd7e>
    fa66:	2900      	cmp	r1, #0
    fa68:	f040 83d5 	bne.w	10216 <_vfiprintf_r+0xabe>
    fa6c:	9b03      	ldr	r3, [sp, #12]
    fa6e:	f013 0301 	ands.w	r3, r3, #1
    fa72:	9304      	str	r3, [sp, #16]
    fa74:	f000 8411 	beq.w	1029a <_vfiprintf_r+0xb42>
    fa78:	2330      	movs	r3, #48	; 0x30
    fa7a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    fa7e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    fa82:	e792      	b.n	f9aa <_vfiprintf_r+0x252>
    fa84:	2208      	movs	r2, #8
    fa86:	2100      	movs	r1, #0
    fa88:	4650      	mov	r0, sl
    fa8a:	f7fb fd5b 	bl	b544 <memset>
    fa8e:	2301      	movs	r3, #1
    fa90:	441c      	add	r4, r3
    fa92:	e6ad      	b.n	f7f0 <_vfiprintf_r+0x98>
    fa94:	20004374 	.word	0x20004374
    fa98:	ebb4 0608 	subs.w	r6, r4, r8
    fa9c:	4605      	mov	r5, r0
    fa9e:	d01b      	beq.n	fad8 <_vfiprintf_r+0x380>
    faa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    faa2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    faa4:	3301      	adds	r3, #1
    faa6:	4432      	add	r2, r6
    faa8:	2b07      	cmp	r3, #7
    faaa:	e9c9 8600 	strd	r8, r6, [r9]
    faae:	921a      	str	r2, [sp, #104]	; 0x68
    fab0:	9319      	str	r3, [sp, #100]	; 0x64
    fab2:	dd1c      	ble.n	faee <_vfiprintf_r+0x396>
    fab4:	2a00      	cmp	r2, #0
    fab6:	f000 83a6 	beq.w	10206 <_vfiprintf_r+0xaae>
    faba:	ee18 1a10 	vmov	r1, s16
    fabe:	aa18      	add	r2, sp, #96	; 0x60
    fac0:	4658      	mov	r0, fp
    fac2:	f7ff fe0d 	bl	f6e0 <__sprint_r.part.0>
    fac6:	bb20      	cbnz	r0, fb12 <_vfiprintf_r+0x3ba>
    fac8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    facc:	9b05      	ldr	r3, [sp, #20]
    face:	4433      	add	r3, r6
    fad0:	9305      	str	r3, [sp, #20]
    fad2:	2d00      	cmp	r5, #0
    fad4:	f47f aea8 	bne.w	f828 <_vfiprintf_r+0xd0>
    fad8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fada:	2b00      	cmp	r3, #0
    fadc:	f040 85c1 	bne.w	10662 <_vfiprintf_r+0xf0a>
    fae0:	ee18 3a10 	vmov	r3, s16
    fae4:	2200      	movs	r2, #0
    fae6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    faea:	9219      	str	r2, [sp, #100]	; 0x64
    faec:	e015      	b.n	fb1a <_vfiprintf_r+0x3c2>
    faee:	f109 0908 	add.w	r9, r9, #8
    faf2:	e7eb      	b.n	facc <_vfiprintf_r+0x374>
    faf4:	ee18 1a10 	vmov	r1, s16
    faf8:	aa18      	add	r2, sp, #96	; 0x60
    fafa:	4658      	mov	r0, fp
    fafc:	f7ff fdf0 	bl	f6e0 <__sprint_r.part.0>
    fb00:	2800      	cmp	r0, #0
    fb02:	f000 80a6 	beq.w	fc52 <_vfiprintf_r+0x4fa>
    fb06:	9b08      	ldr	r3, [sp, #32]
    fb08:	b11b      	cbz	r3, fb12 <_vfiprintf_r+0x3ba>
    fb0a:	9908      	ldr	r1, [sp, #32]
    fb0c:	4658      	mov	r0, fp
    fb0e:	f7fc f979 	bl	be04 <_free_r>
    fb12:	ee18 3a10 	vmov	r3, s16
    fb16:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    fb1a:	ee18 2a10 	vmov	r2, s16
    fb1e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    fb20:	f012 0f01 	tst.w	r2, #1
    fb24:	b29a      	uxth	r2, r3
    fb26:	f000 80a0 	beq.w	fc6a <_vfiprintf_r+0x512>
    fb2a:	0650      	lsls	r0, r2, #25
    fb2c:	f100 85b2 	bmi.w	10694 <_vfiprintf_r+0xf3c>
    fb30:	9805      	ldr	r0, [sp, #20]
    fb32:	b045      	add	sp, #276	; 0x114
    fb34:	ecbd 8b02 	vpop	{d8}
    fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb3c:	2900      	cmp	r1, #0
    fb3e:	d0cb      	beq.n	fad8 <_vfiprintf_r+0x380>
    fb40:	2300      	movs	r3, #0
    fb42:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fb46:	2301      	movs	r3, #1
    fb48:	e9cd 3303 	strd	r3, r3, [sp, #12]
    fb4c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    fb50:	ac2b      	add	r4, sp, #172	; 0xac
    fb52:	2300      	movs	r3, #0
    fb54:	9308      	str	r3, [sp, #32]
    fb56:	461f      	mov	r7, r3
    fb58:	f016 0302 	ands.w	r3, r6, #2
    fb5c:	9309      	str	r3, [sp, #36]	; 0x24
    fb5e:	d002      	beq.n	fb66 <_vfiprintf_r+0x40e>
    fb60:	9b03      	ldr	r3, [sp, #12]
    fb62:	3302      	adds	r3, #2
    fb64:	9303      	str	r3, [sp, #12]
    fb66:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    fb6a:	930a      	str	r3, [sp, #40]	; 0x28
    fb6c:	d105      	bne.n	fb7a <_vfiprintf_r+0x422>
    fb6e:	9b06      	ldr	r3, [sp, #24]
    fb70:	9a03      	ldr	r2, [sp, #12]
    fb72:	1a9d      	subs	r5, r3, r2
    fb74:	2d00      	cmp	r5, #0
    fb76:	f300 827b 	bgt.w	10070 <_vfiprintf_r+0x918>
    fb7a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fb7e:	1c41      	adds	r1, r0, #1
    fb80:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    fb84:	b182      	cbz	r2, fba8 <_vfiprintf_r+0x450>
    fb86:	2201      	movs	r2, #1
    fb88:	3301      	adds	r3, #1
    fb8a:	f8c9 2004 	str.w	r2, [r9, #4]
    fb8e:	2907      	cmp	r1, #7
    fb90:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    fb94:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fb98:	f8c9 2000 	str.w	r2, [r9]
    fb9c:	f300 824a 	bgt.w	10034 <_vfiprintf_r+0x8dc>
    fba0:	4608      	mov	r0, r1
    fba2:	f109 0908 	add.w	r9, r9, #8
    fba6:	3101      	adds	r1, #1
    fba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fbaa:	b1e2      	cbz	r2, fbe6 <_vfiprintf_r+0x48e>
    fbac:	aa11      	add	r2, sp, #68	; 0x44
    fbae:	3302      	adds	r3, #2
    fbb0:	f8c9 2000 	str.w	r2, [r9]
    fbb4:	2907      	cmp	r1, #7
    fbb6:	f04f 0202 	mov.w	r2, #2
    fbba:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fbbe:	f8c9 2004 	str.w	r2, [r9, #4]
    fbc2:	f340 8250 	ble.w	10066 <_vfiprintf_r+0x90e>
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	f000 8343 	beq.w	10252 <_vfiprintf_r+0xafa>
    fbcc:	ee18 1a10 	vmov	r1, s16
    fbd0:	aa18      	add	r2, sp, #96	; 0x60
    fbd2:	4658      	mov	r0, fp
    fbd4:	f7ff fd84 	bl	f6e0 <__sprint_r.part.0>
    fbd8:	2800      	cmp	r0, #0
    fbda:	d194      	bne.n	fb06 <_vfiprintf_r+0x3ae>
    fbdc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fbe0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fbe4:	1c41      	adds	r1, r0, #1
    fbe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fbe8:	2a80      	cmp	r2, #128	; 0x80
    fbea:	f000 8184 	beq.w	fef6 <_vfiprintf_r+0x79e>
    fbee:	9a04      	ldr	r2, [sp, #16]
    fbf0:	1abd      	subs	r5, r7, r2
    fbf2:	2d00      	cmp	r5, #0
    fbf4:	f300 81d7 	bgt.w	ffa6 <_vfiprintf_r+0x84e>
    fbf8:	9a04      	ldr	r2, [sp, #16]
    fbfa:	f8c9 4000 	str.w	r4, [r9]
    fbfe:	4413      	add	r3, r2
    fc00:	2907      	cmp	r1, #7
    fc02:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fc06:	f8c9 2004 	str.w	r2, [r9, #4]
    fc0a:	f340 816e 	ble.w	feea <_vfiprintf_r+0x792>
    fc0e:	2b00      	cmp	r3, #0
    fc10:	f000 8275 	beq.w	100fe <_vfiprintf_r+0x9a6>
    fc14:	ee18 1a10 	vmov	r1, s16
    fc18:	aa18      	add	r2, sp, #96	; 0x60
    fc1a:	4658      	mov	r0, fp
    fc1c:	f7ff fd60 	bl	f6e0 <__sprint_r.part.0>
    fc20:	2800      	cmp	r0, #0
    fc22:	f47f af70 	bne.w	fb06 <_vfiprintf_r+0x3ae>
    fc26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fc28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fc2c:	0775      	lsls	r5, r6, #29
    fc2e:	d505      	bpl.n	fc3c <_vfiprintf_r+0x4e4>
    fc30:	9a06      	ldr	r2, [sp, #24]
    fc32:	9903      	ldr	r1, [sp, #12]
    fc34:	1a54      	subs	r4, r2, r1
    fc36:	2c00      	cmp	r4, #0
    fc38:	f300 826b 	bgt.w	10112 <_vfiprintf_r+0x9ba>
    fc3c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    fc40:	9803      	ldr	r0, [sp, #12]
    fc42:	4281      	cmp	r1, r0
    fc44:	bfac      	ite	ge
    fc46:	1852      	addge	r2, r2, r1
    fc48:	1812      	addlt	r2, r2, r0
    fc4a:	9205      	str	r2, [sp, #20]
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	f47f af51 	bne.w	faf4 <_vfiprintf_r+0x39c>
    fc52:	9908      	ldr	r1, [sp, #32]
    fc54:	2300      	movs	r3, #0
    fc56:	9319      	str	r3, [sp, #100]	; 0x64
    fc58:	2900      	cmp	r1, #0
    fc5a:	f000 8149 	beq.w	fef0 <_vfiprintf_r+0x798>
    fc5e:	4658      	mov	r0, fp
    fc60:	f7fc f8d0 	bl	be04 <_free_r>
    fc64:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fc68:	e5c1      	b.n	f7ee <_vfiprintf_r+0x96>
    fc6a:	059c      	lsls	r4, r3, #22
    fc6c:	f53f af5d 	bmi.w	fb2a <_vfiprintf_r+0x3d2>
    fc70:	ee18 4a10 	vmov	r4, s16
    fc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc76:	f7fb fdeb 	bl	b850 <__retarget_lock_release_recursive>
    fc7a:	89a2      	ldrh	r2, [r4, #12]
    fc7c:	e755      	b.n	fb2a <_vfiprintf_r+0x3d2>
    fc7e:	06f0      	lsls	r0, r6, #27
    fc80:	9a07      	ldr	r2, [sp, #28]
    fc82:	f100 831f 	bmi.w	102c4 <_vfiprintf_r+0xb6c>
    fc86:	0671      	lsls	r1, r6, #25
    fc88:	f140 8319 	bpl.w	102be <_vfiprintf_r+0xb66>
    fc8c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    fc90:	9207      	str	r2, [sp, #28]
    fc92:	17da      	asrs	r2, r3, #31
    fc94:	4611      	mov	r1, r2
    fc96:	e66e      	b.n	f976 <_vfiprintf_r+0x21e>
    fc98:	f016 0310 	ands.w	r3, r6, #16
    fc9c:	9907      	ldr	r1, [sp, #28]
    fc9e:	f040 8309 	bne.w	102b4 <_vfiprintf_r+0xb5c>
    fca2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    fca6:	f000 8301 	beq.w	102ac <_vfiprintf_r+0xb54>
    fcaa:	461a      	mov	r2, r3
    fcac:	f851 3b04 	ldr.w	r3, [r1], #4
    fcb0:	9107      	str	r1, [sp, #28]
    fcb2:	b29b      	uxth	r3, r3
    fcb4:	e6c3      	b.n	fa3e <_vfiprintf_r+0x2e6>
    fcb6:	9b07      	ldr	r3, [sp, #28]
    fcb8:	461a      	mov	r2, r3
    fcba:	2300      	movs	r3, #0
    fcbc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fcc0:	4613      	mov	r3, r2
    fcc2:	f853 4b04 	ldr.w	r4, [r3], #4
    fcc6:	9303      	str	r3, [sp, #12]
    fcc8:	2c00      	cmp	r4, #0
    fcca:	f000 8412 	beq.w	104f2 <_vfiprintf_r+0xd9a>
    fcce:	2953      	cmp	r1, #83	; 0x53
    fcd0:	f000 8365 	beq.w	1039e <_vfiprintf_r+0xc46>
    fcd4:	f016 0510 	ands.w	r5, r6, #16
    fcd8:	f040 8361 	bne.w	1039e <_vfiprintf_r+0xc46>
    fcdc:	1c7b      	adds	r3, r7, #1
    fcde:	f000 84b3 	beq.w	10648 <_vfiprintf_r+0xef0>
    fce2:	463a      	mov	r2, r7
    fce4:	4629      	mov	r1, r5
    fce6:	4620      	mov	r0, r4
    fce8:	f7fe fc42 	bl	e570 <memchr>
    fcec:	9008      	str	r0, [sp, #32]
    fcee:	2800      	cmp	r0, #0
    fcf0:	f000 849f 	beq.w	10632 <_vfiprintf_r+0xeda>
    fcf4:	1b03      	subs	r3, r0, r4
    fcf6:	9a03      	ldr	r2, [sp, #12]
    fcf8:	9304      	str	r3, [sp, #16]
    fcfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fcfe:	462f      	mov	r7, r5
    fd00:	9207      	str	r2, [sp, #28]
    fd02:	9303      	str	r3, [sp, #12]
    fd04:	9508      	str	r5, [sp, #32]
    fd06:	e657      	b.n	f9b8 <_vfiprintf_r+0x260>
    fd08:	2943      	cmp	r1, #67	; 0x43
    fd0a:	d002      	beq.n	fd12 <_vfiprintf_r+0x5ba>
    fd0c:	06f5      	lsls	r5, r6, #27
    fd0e:	f140 832d 	bpl.w	1036c <_vfiprintf_r+0xc14>
    fd12:	9d07      	ldr	r5, [sp, #28]
    fd14:	2208      	movs	r2, #8
    fd16:	2100      	movs	r1, #0
    fd18:	a816      	add	r0, sp, #88	; 0x58
    fd1a:	ac2b      	add	r4, sp, #172	; 0xac
    fd1c:	f7fb fc12 	bl	b544 <memset>
    fd20:	ab16      	add	r3, sp, #88	; 0x58
    fd22:	f855 2b04 	ldr.w	r2, [r5], #4
    fd26:	4621      	mov	r1, r4
    fd28:	4658      	mov	r0, fp
    fd2a:	f7ff fc13 	bl	f554 <_wcrtomb_r>
    fd2e:	4603      	mov	r3, r0
    fd30:	3301      	adds	r3, #1
    fd32:	9004      	str	r0, [sp, #16]
    fd34:	f000 84b3 	beq.w	1069e <_vfiprintf_r+0xf46>
    fd38:	9b04      	ldr	r3, [sp, #16]
    fd3a:	9507      	str	r5, [sp, #28]
    fd3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fd40:	9303      	str	r3, [sp, #12]
    fd42:	2300      	movs	r3, #0
    fd44:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fd48:	e703      	b.n	fb52 <_vfiprintf_r+0x3fa>
    fd4a:	9b07      	ldr	r3, [sp, #28]
    fd4c:	f853 2b04 	ldr.w	r2, [r3], #4
    fd50:	9206      	str	r2, [sp, #24]
    fd52:	2a00      	cmp	r2, #0
    fd54:	f280 829c 	bge.w	10290 <_vfiprintf_r+0xb38>
    fd58:	9a06      	ldr	r2, [sp, #24]
    fd5a:	4252      	negs	r2, r2
    fd5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fd60:	f898 1000 	ldrb.w	r1, [r8]
    fd64:	f046 0604 	orr.w	r6, r6, #4
    fd68:	e569      	b.n	f83e <_vfiprintf_r+0xe6>
    fd6a:	f898 1000 	ldrb.w	r1, [r8]
    fd6e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    fd72:	e564      	b.n	f83e <_vfiprintf_r+0xe6>
    fd74:	f898 1000 	ldrb.w	r1, [r8]
    fd78:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    fd7c:	e55f      	b.n	f83e <_vfiprintf_r+0xe6>
    fd7e:	4642      	mov	r2, r8
    fd80:	f812 1b01 	ldrb.w	r1, [r2], #1
    fd84:	292a      	cmp	r1, #42	; 0x2a
    fd86:	f000 8496 	beq.w	106b6 <_vfiprintf_r+0xf5e>
    fd8a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fd8e:	2b09      	cmp	r3, #9
    fd90:	4690      	mov	r8, r2
    fd92:	f04f 0700 	mov.w	r7, #0
    fd96:	f63f ad54 	bhi.w	f842 <_vfiprintf_r+0xea>
    fd9a:	f818 1b01 	ldrb.w	r1, [r8], #1
    fd9e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    fda2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    fda6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fdaa:	2b09      	cmp	r3, #9
    fdac:	d9f5      	bls.n	fd9a <_vfiprintf_r+0x642>
    fdae:	e548      	b.n	f842 <_vfiprintf_r+0xea>
    fdb0:	f898 1000 	ldrb.w	r1, [r8]
    fdb4:	f046 0601 	orr.w	r6, r6, #1
    fdb8:	e541      	b.n	f83e <_vfiprintf_r+0xe6>
    fdba:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	f47f adc2 	bne.w	f948 <_vfiprintf_r+0x1f0>
    fdc4:	2320      	movs	r3, #32
    fdc6:	f898 1000 	ldrb.w	r1, [r8]
    fdca:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fdce:	e536      	b.n	f83e <_vfiprintf_r+0xe6>
    fdd0:	f898 1000 	ldrb.w	r1, [r8]
    fdd4:	296c      	cmp	r1, #108	; 0x6c
    fdd6:	bf03      	ittte	eq
    fdd8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    fddc:	f046 0620 	orreq.w	r6, r6, #32
    fde0:	f108 0801 	addeq.w	r8, r8, #1
    fde4:	f046 0610 	orrne.w	r6, r6, #16
    fde8:	e529      	b.n	f83e <_vfiprintf_r+0xe6>
    fdea:	f898 1000 	ldrb.w	r1, [r8]
    fdee:	2968      	cmp	r1, #104	; 0x68
    fdf0:	bf03      	ittte	eq
    fdf2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    fdf6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    fdfa:	f108 0801 	addeq.w	r8, r8, #1
    fdfe:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    fe02:	e51c      	b.n	f83e <_vfiprintf_r+0xe6>
    fe04:	f046 0310 	orr.w	r3, r6, #16
    fe08:	9303      	str	r3, [sp, #12]
    fe0a:	9b03      	ldr	r3, [sp, #12]
    fe0c:	f013 0220 	ands.w	r2, r3, #32
    fe10:	f000 8206 	beq.w	10220 <_vfiprintf_r+0xac8>
    fe14:	9b07      	ldr	r3, [sp, #28]
    fe16:	3307      	adds	r3, #7
    fe18:	f023 0307 	bic.w	r3, r3, #7
    fe1c:	4619      	mov	r1, r3
    fe1e:	685a      	ldr	r2, [r3, #4]
    fe20:	f851 3b08 	ldr.w	r3, [r1], #8
    fe24:	9107      	str	r1, [sp, #28]
    fe26:	2101      	movs	r1, #1
    fe28:	e60d      	b.n	fa46 <_vfiprintf_r+0x2ee>
    fe2a:	9a07      	ldr	r2, [sp, #28]
    fe2c:	f046 0302 	orr.w	r3, r6, #2
    fe30:	9303      	str	r3, [sp, #12]
    fe32:	f852 3b04 	ldr.w	r3, [r2], #4
    fe36:	9207      	str	r2, [sp, #28]
    fe38:	f647 0230 	movw	r2, #30768	; 0x7830
    fe3c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    fe40:	4ab8      	ldr	r2, [pc, #736]	; (10124 <_vfiprintf_r+0x9cc>)
    fe42:	920c      	str	r2, [sp, #48]	; 0x30
    fe44:	2102      	movs	r1, #2
    fe46:	2200      	movs	r2, #0
    fe48:	e5fd      	b.n	fa46 <_vfiprintf_r+0x2ee>
    fe4a:	06b7      	lsls	r7, r6, #26
    fe4c:	f100 8248 	bmi.w	102e0 <_vfiprintf_r+0xb88>
    fe50:	06f5      	lsls	r5, r6, #27
    fe52:	f100 8346 	bmi.w	104e2 <_vfiprintf_r+0xd8a>
    fe56:	0674      	lsls	r4, r6, #25
    fe58:	f100 83d5 	bmi.w	10606 <_vfiprintf_r+0xeae>
    fe5c:	05b0      	lsls	r0, r6, #22
    fe5e:	f140 8340 	bpl.w	104e2 <_vfiprintf_r+0xd8a>
    fe62:	9b07      	ldr	r3, [sp, #28]
    fe64:	9905      	ldr	r1, [sp, #20]
    fe66:	f853 2b04 	ldr.w	r2, [r3], #4
    fe6a:	9307      	str	r3, [sp, #28]
    fe6c:	7011      	strb	r1, [r2, #0]
    fe6e:	e4be      	b.n	f7ee <_vfiprintf_r+0x96>
    fe70:	9603      	str	r6, [sp, #12]
    fe72:	2901      	cmp	r1, #1
    fe74:	f43f ad8c 	beq.w	f990 <_vfiprintf_r+0x238>
    fe78:	2902      	cmp	r1, #2
    fe7a:	ac44      	add	r4, sp, #272	; 0x110
    fe7c:	d111      	bne.n	fea2 <_vfiprintf_r+0x74a>
    fe7e:	980c      	ldr	r0, [sp, #48]	; 0x30
    fe80:	f003 010f 	and.w	r1, r3, #15
    fe84:	091b      	lsrs	r3, r3, #4
    fe86:	5c41      	ldrb	r1, [r0, r1]
    fe88:	f804 1d01 	strb.w	r1, [r4, #-1]!
    fe8c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    fe90:	0912      	lsrs	r2, r2, #4
    fe92:	ea53 0102 	orrs.w	r1, r3, r2
    fe96:	d1f3      	bne.n	fe80 <_vfiprintf_r+0x728>
    fe98:	9e03      	ldr	r6, [sp, #12]
    fe9a:	ab44      	add	r3, sp, #272	; 0x110
    fe9c:	1b1b      	subs	r3, r3, r4
    fe9e:	9304      	str	r3, [sp, #16]
    fea0:	e583      	b.n	f9aa <_vfiprintf_r+0x252>
    fea2:	f003 0107 	and.w	r1, r3, #7
    fea6:	08db      	lsrs	r3, r3, #3
    fea8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    feac:	08d2      	lsrs	r2, r2, #3
    feae:	3130      	adds	r1, #48	; 0x30
    feb0:	ea53 0502 	orrs.w	r5, r3, r2
    feb4:	4620      	mov	r0, r4
    feb6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    feba:	d1f2      	bne.n	fea2 <_vfiprintf_r+0x74a>
    febc:	9e03      	ldr	r6, [sp, #12]
    febe:	07f3      	lsls	r3, r6, #31
    fec0:	d5eb      	bpl.n	fe9a <_vfiprintf_r+0x742>
    fec2:	2930      	cmp	r1, #48	; 0x30
    fec4:	d0e8      	beq.n	fe98 <_vfiprintf_r+0x740>
    fec6:	2330      	movs	r3, #48	; 0x30
    fec8:	3802      	subs	r0, #2
    feca:	f804 3c01 	strb.w	r3, [r4, #-1]
    fece:	ab44      	add	r3, sp, #272	; 0x110
    fed0:	1a1b      	subs	r3, r3, r0
    fed2:	9e03      	ldr	r6, [sp, #12]
    fed4:	9304      	str	r3, [sp, #16]
    fed6:	4604      	mov	r4, r0
    fed8:	e567      	b.n	f9aa <_vfiprintf_r+0x252>
    feda:	9b04      	ldr	r3, [sp, #16]
    fedc:	941b      	str	r4, [sp, #108]	; 0x6c
    fede:	2201      	movs	r2, #1
    fee0:	931c      	str	r3, [sp, #112]	; 0x70
    fee2:	931a      	str	r3, [sp, #104]	; 0x68
    fee4:	9219      	str	r2, [sp, #100]	; 0x64
    fee6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    feea:	f109 0908 	add.w	r9, r9, #8
    feee:	e69d      	b.n	fc2c <_vfiprintf_r+0x4d4>
    fef0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fef4:	e47b      	b.n	f7ee <_vfiprintf_r+0x96>
    fef6:	9a06      	ldr	r2, [sp, #24]
    fef8:	9d03      	ldr	r5, [sp, #12]
    fefa:	1b55      	subs	r5, r2, r5
    fefc:	2d00      	cmp	r5, #0
    fefe:	f77f ae76 	ble.w	fbee <_vfiprintf_r+0x496>
    ff02:	2d10      	cmp	r5, #16
    ff04:	f340 83bb 	ble.w	1067e <_vfiprintf_r+0xf26>
    ff08:	9409      	str	r4, [sp, #36]	; 0x24
    ff0a:	ee18 4a10 	vmov	r4, s16
    ff0e:	e007      	b.n	ff20 <_vfiprintf_r+0x7c8>
    ff10:	f100 0c02 	add.w	ip, r0, #2
    ff14:	f109 0908 	add.w	r9, r9, #8
    ff18:	4610      	mov	r0, r2
    ff1a:	3d10      	subs	r5, #16
    ff1c:	2d10      	cmp	r5, #16
    ff1e:	dd1e      	ble.n	ff5e <_vfiprintf_r+0x806>
    ff20:	4981      	ldr	r1, [pc, #516]	; (10128 <_vfiprintf_r+0x9d0>)
    ff22:	f8c9 1000 	str.w	r1, [r9]
    ff26:	1c42      	adds	r2, r0, #1
    ff28:	3310      	adds	r3, #16
    ff2a:	2110      	movs	r1, #16
    ff2c:	2a07      	cmp	r2, #7
    ff2e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ff32:	f8c9 1004 	str.w	r1, [r9, #4]
    ff36:	ddeb      	ble.n	ff10 <_vfiprintf_r+0x7b8>
    ff38:	aa18      	add	r2, sp, #96	; 0x60
    ff3a:	2b00      	cmp	r3, #0
    ff3c:	d074      	beq.n	10028 <_vfiprintf_r+0x8d0>
    ff3e:	4621      	mov	r1, r4
    ff40:	4658      	mov	r0, fp
    ff42:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ff46:	f7ff fbcb 	bl	f6e0 <__sprint_r.part.0>
    ff4a:	2800      	cmp	r0, #0
    ff4c:	f47f addb 	bne.w	fb06 <_vfiprintf_r+0x3ae>
    ff50:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ff54:	3d10      	subs	r5, #16
    ff56:	2d10      	cmp	r5, #16
    ff58:	f100 0c01 	add.w	ip, r0, #1
    ff5c:	dce0      	bgt.n	ff20 <_vfiprintf_r+0x7c8>
    ff5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ff60:	4a71      	ldr	r2, [pc, #452]	; (10128 <_vfiprintf_r+0x9d0>)
    ff62:	f8c9 5004 	str.w	r5, [r9, #4]
    ff66:	442b      	add	r3, r5
    ff68:	f1bc 0f07 	cmp.w	ip, #7
    ff6c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    ff70:	f8c9 2000 	str.w	r2, [r9]
    ff74:	f340 8194 	ble.w	102a0 <_vfiprintf_r+0xb48>
    ff78:	2b00      	cmp	r3, #0
    ff7a:	f000 831f 	beq.w	105bc <_vfiprintf_r+0xe64>
    ff7e:	ee18 1a10 	vmov	r1, s16
    ff82:	aa18      	add	r2, sp, #96	; 0x60
    ff84:	4658      	mov	r0, fp
    ff86:	f7ff fbab 	bl	f6e0 <__sprint_r.part.0>
    ff8a:	2800      	cmp	r0, #0
    ff8c:	f47f adbb 	bne.w	fb06 <_vfiprintf_r+0x3ae>
    ff90:	9a04      	ldr	r2, [sp, #16]
    ff92:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ff96:	1abd      	subs	r5, r7, r2
    ff98:	2d00      	cmp	r5, #0
    ff9a:	f100 0101 	add.w	r1, r0, #1
    ff9e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ffa2:	f77f ae29 	ble.w	fbf8 <_vfiprintf_r+0x4a0>
    ffa6:	2d10      	cmp	r5, #16
    ffa8:	dd29      	ble.n	fffe <_vfiprintf_r+0x8a6>
    ffaa:	9409      	str	r4, [sp, #36]	; 0x24
    ffac:	2710      	movs	r7, #16
    ffae:	ee18 4a10 	vmov	r4, s16
    ffb2:	e007      	b.n	ffc4 <_vfiprintf_r+0x86c>
    ffb4:	f100 0c02 	add.w	ip, r0, #2
    ffb8:	f109 0908 	add.w	r9, r9, #8
    ffbc:	4610      	mov	r0, r2
    ffbe:	3d10      	subs	r5, #16
    ffc0:	2d10      	cmp	r5, #16
    ffc2:	dd1a      	ble.n	fffa <_vfiprintf_r+0x8a2>
    ffc4:	1c42      	adds	r2, r0, #1
    ffc6:	4958      	ldr	r1, [pc, #352]	; (10128 <_vfiprintf_r+0x9d0>)
    ffc8:	3310      	adds	r3, #16
    ffca:	2a07      	cmp	r2, #7
    ffcc:	e9c9 1700 	strd	r1, r7, [r9]
    ffd0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ffd4:	ddee      	ble.n	ffb4 <_vfiprintf_r+0x85c>
    ffd6:	aa18      	add	r2, sp, #96	; 0x60
    ffd8:	b303      	cbz	r3, 1001c <_vfiprintf_r+0x8c4>
    ffda:	4621      	mov	r1, r4
    ffdc:	4658      	mov	r0, fp
    ffde:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ffe2:	f7ff fb7d 	bl	f6e0 <__sprint_r.part.0>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	f47f ad8d 	bne.w	fb06 <_vfiprintf_r+0x3ae>
    ffec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fff0:	3d10      	subs	r5, #16
    fff2:	2d10      	cmp	r5, #16
    fff4:	f100 0c01 	add.w	ip, r0, #1
    fff8:	dce4      	bgt.n	ffc4 <_vfiprintf_r+0x86c>
    fffa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fffc:	4661      	mov	r1, ip
    fffe:	4a4a      	ldr	r2, [pc, #296]	; (10128 <_vfiprintf_r+0x9d0>)
   10000:	f8c9 5004 	str.w	r5, [r9, #4]
   10004:	442b      	add	r3, r5
   10006:	2907      	cmp	r1, #7
   10008:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1000c:	f8c9 2000 	str.w	r2, [r9]
   10010:	f300 80e7 	bgt.w	101e2 <_vfiprintf_r+0xa8a>
   10014:	f109 0908 	add.w	r9, r9, #8
   10018:	3101      	adds	r1, #1
   1001a:	e5ed      	b.n	fbf8 <_vfiprintf_r+0x4a0>
   1001c:	f04f 0c01 	mov.w	ip, #1
   10020:	4618      	mov	r0, r3
   10022:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10026:	e7ca      	b.n	ffbe <_vfiprintf_r+0x866>
   10028:	f04f 0c01 	mov.w	ip, #1
   1002c:	4618      	mov	r0, r3
   1002e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10032:	e772      	b.n	ff1a <_vfiprintf_r+0x7c2>
   10034:	2b00      	cmp	r3, #0
   10036:	f000 8104 	beq.w	10242 <_vfiprintf_r+0xaea>
   1003a:	ee18 1a10 	vmov	r1, s16
   1003e:	aa18      	add	r2, sp, #96	; 0x60
   10040:	4658      	mov	r0, fp
   10042:	f7ff fb4d 	bl	f6e0 <__sprint_r.part.0>
   10046:	2800      	cmp	r0, #0
   10048:	f47f ad5d 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   1004c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10050:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10054:	1c41      	adds	r1, r0, #1
   10056:	e5a7      	b.n	fba8 <_vfiprintf_r+0x450>
   10058:	2302      	movs	r3, #2
   1005a:	aa11      	add	r2, sp, #68	; 0x44
   1005c:	931c      	str	r3, [sp, #112]	; 0x70
   1005e:	921b      	str	r2, [sp, #108]	; 0x6c
   10060:	2101      	movs	r1, #1
   10062:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10066:	4608      	mov	r0, r1
   10068:	f109 0908 	add.w	r9, r9, #8
   1006c:	1c41      	adds	r1, r0, #1
   1006e:	e5ba      	b.n	fbe6 <_vfiprintf_r+0x48e>
   10070:	2d10      	cmp	r5, #16
   10072:	f340 82e5 	ble.w	10640 <_vfiprintf_r+0xee8>
   10076:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1007a:	940f      	str	r4, [sp, #60]	; 0x3c
   1007c:	4608      	mov	r0, r1
   1007e:	ee18 4a10 	vmov	r4, s16
   10082:	e007      	b.n	10094 <_vfiprintf_r+0x93c>
   10084:	f100 0c02 	add.w	ip, r0, #2
   10088:	f109 0908 	add.w	r9, r9, #8
   1008c:	4610      	mov	r0, r2
   1008e:	3d10      	subs	r5, #16
   10090:	2d10      	cmp	r5, #16
   10092:	dd1d      	ble.n	100d0 <_vfiprintf_r+0x978>
   10094:	4925      	ldr	r1, [pc, #148]	; (1012c <_vfiprintf_r+0x9d4>)
   10096:	f8c9 1000 	str.w	r1, [r9]
   1009a:	1c42      	adds	r2, r0, #1
   1009c:	3310      	adds	r3, #16
   1009e:	2110      	movs	r1, #16
   100a0:	2a07      	cmp	r2, #7
   100a2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   100a6:	f8c9 1004 	str.w	r1, [r9, #4]
   100aa:	ddeb      	ble.n	10084 <_vfiprintf_r+0x92c>
   100ac:	aa18      	add	r2, sp, #96	; 0x60
   100ae:	b303      	cbz	r3, 100f2 <_vfiprintf_r+0x99a>
   100b0:	4621      	mov	r1, r4
   100b2:	4658      	mov	r0, fp
   100b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   100b8:	f7ff fb12 	bl	f6e0 <__sprint_r.part.0>
   100bc:	2800      	cmp	r0, #0
   100be:	f47f ad22 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   100c2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   100c6:	3d10      	subs	r5, #16
   100c8:	2d10      	cmp	r5, #16
   100ca:	f100 0c01 	add.w	ip, r0, #1
   100ce:	dce1      	bgt.n	10094 <_vfiprintf_r+0x93c>
   100d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   100d2:	4660      	mov	r0, ip
   100d4:	4a15      	ldr	r2, [pc, #84]	; (1012c <_vfiprintf_r+0x9d4>)
   100d6:	f8c9 5004 	str.w	r5, [r9, #4]
   100da:	442b      	add	r3, r5
   100dc:	2807      	cmp	r0, #7
   100de:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   100e2:	f8c9 2000 	str.w	r2, [r9]
   100e6:	f300 80c1 	bgt.w	1026c <_vfiprintf_r+0xb14>
   100ea:	f109 0908 	add.w	r9, r9, #8
   100ee:	1c41      	adds	r1, r0, #1
   100f0:	e546      	b.n	fb80 <_vfiprintf_r+0x428>
   100f2:	4618      	mov	r0, r3
   100f4:	f04f 0c01 	mov.w	ip, #1
   100f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   100fc:	e7c7      	b.n	1008e <_vfiprintf_r+0x936>
   100fe:	0776      	lsls	r6, r6, #29
   10100:	9319      	str	r3, [sp, #100]	; 0x64
   10102:	d553      	bpl.n	101ac <_vfiprintf_r+0xa54>
   10104:	9a06      	ldr	r2, [sp, #24]
   10106:	9903      	ldr	r1, [sp, #12]
   10108:	1a54      	subs	r4, r2, r1
   1010a:	2c00      	cmp	r4, #0
   1010c:	dd4e      	ble.n	101ac <_vfiprintf_r+0xa54>
   1010e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10112:	2c10      	cmp	r4, #16
   10114:	f340 82b0 	ble.w	10678 <_vfiprintf_r+0xf20>
   10118:	9919      	ldr	r1, [sp, #100]	; 0x64
   1011a:	ee18 6a10 	vmov	r6, s16
   1011e:	2510      	movs	r5, #16
   10120:	e00d      	b.n	1013e <_vfiprintf_r+0x9e6>
   10122:	bf00      	nop
   10124:	20000c94 	.word	0x20000c94
   10128:	2000121c 	.word	0x2000121c
   1012c:	20000cd8 	.word	0x20000cd8
   10130:	1c88      	adds	r0, r1, #2
   10132:	f109 0908 	add.w	r9, r9, #8
   10136:	4611      	mov	r1, r2
   10138:	3c10      	subs	r4, #16
   1013a:	2c10      	cmp	r4, #16
   1013c:	dd1a      	ble.n	10174 <_vfiprintf_r+0xa1c>
   1013e:	1c4a      	adds	r2, r1, #1
   10140:	48b3      	ldr	r0, [pc, #716]	; (10410 <_vfiprintf_r+0xcb8>)
   10142:	3310      	adds	r3, #16
   10144:	2a07      	cmp	r2, #7
   10146:	e9c9 0500 	strd	r0, r5, [r9]
   1014a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1014e:	ddef      	ble.n	10130 <_vfiprintf_r+0x9d8>
   10150:	aa18      	add	r2, sp, #96	; 0x60
   10152:	b333      	cbz	r3, 101a2 <_vfiprintf_r+0xa4a>
   10154:	4631      	mov	r1, r6
   10156:	4658      	mov	r0, fp
   10158:	f7ff fac2 	bl	f6e0 <__sprint_r.part.0>
   1015c:	2800      	cmp	r0, #0
   1015e:	f47f acd2 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   10162:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   10166:	3c10      	subs	r4, #16
   10168:	2c10      	cmp	r4, #16
   1016a:	f101 0001 	add.w	r0, r1, #1
   1016e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10172:	dce4      	bgt.n	1013e <_vfiprintf_r+0x9e6>
   10174:	4aa6      	ldr	r2, [pc, #664]	; (10410 <_vfiprintf_r+0xcb8>)
   10176:	f8c9 4004 	str.w	r4, [r9, #4]
   1017a:	4423      	add	r3, r4
   1017c:	2807      	cmp	r0, #7
   1017e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10182:	f8c9 2000 	str.w	r2, [r9]
   10186:	f77f ad59 	ble.w	fc3c <_vfiprintf_r+0x4e4>
   1018a:	b17b      	cbz	r3, 101ac <_vfiprintf_r+0xa54>
   1018c:	ee18 1a10 	vmov	r1, s16
   10190:	aa18      	add	r2, sp, #96	; 0x60
   10192:	4658      	mov	r0, fp
   10194:	f7ff faa4 	bl	f6e0 <__sprint_r.part.0>
   10198:	2800      	cmp	r0, #0
   1019a:	f47f acb4 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   1019e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   101a0:	e54c      	b.n	fc3c <_vfiprintf_r+0x4e4>
   101a2:	2001      	movs	r0, #1
   101a4:	4619      	mov	r1, r3
   101a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   101aa:	e7c5      	b.n	10138 <_vfiprintf_r+0x9e0>
   101ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   101b0:	9903      	ldr	r1, [sp, #12]
   101b2:	428a      	cmp	r2, r1
   101b4:	bfac      	ite	ge
   101b6:	189b      	addge	r3, r3, r2
   101b8:	185b      	addlt	r3, r3, r1
   101ba:	9305      	str	r3, [sp, #20]
   101bc:	e549      	b.n	fc52 <_vfiprintf_r+0x4fa>
   101be:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   101c2:	058f      	lsls	r7, r1, #22
   101c4:	ee18 3a10 	vmov	r3, s16
   101c8:	b28a      	uxth	r2, r1
   101ca:	f53f aae8 	bmi.w	f79e <_vfiprintf_r+0x46>
   101ce:	ee18 5a10 	vmov	r5, s16
   101d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
   101d4:	f7fb fb3a 	bl	b84c <__retarget_lock_acquire_recursive>
   101d8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   101dc:	b28a      	uxth	r2, r1
   101de:	f7ff bade 	b.w	f79e <_vfiprintf_r+0x46>
   101e2:	2b00      	cmp	r3, #0
   101e4:	f43f ae79 	beq.w	feda <_vfiprintf_r+0x782>
   101e8:	ee18 1a10 	vmov	r1, s16
   101ec:	aa18      	add	r2, sp, #96	; 0x60
   101ee:	4658      	mov	r0, fp
   101f0:	f7ff fa76 	bl	f6e0 <__sprint_r.part.0>
   101f4:	2800      	cmp	r0, #0
   101f6:	f47f ac86 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   101fa:	9919      	ldr	r1, [sp, #100]	; 0x64
   101fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   101fe:	3101      	adds	r1, #1
   10200:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10204:	e4f8      	b.n	fbf8 <_vfiprintf_r+0x4a0>
   10206:	9219      	str	r2, [sp, #100]	; 0x64
   10208:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1020c:	e45e      	b.n	facc <_vfiprintf_r+0x374>
   1020e:	2f00      	cmp	r7, #0
   10210:	f47f abc3 	bne.w	f99a <_vfiprintf_r+0x242>
   10214:	9e03      	ldr	r6, [sp, #12]
   10216:	2700      	movs	r7, #0
   10218:	9704      	str	r7, [sp, #16]
   1021a:	ac44      	add	r4, sp, #272	; 0x110
   1021c:	f7ff bbc5 	b.w	f9aa <_vfiprintf_r+0x252>
   10220:	9b03      	ldr	r3, [sp, #12]
   10222:	f013 0310 	ands.w	r3, r3, #16
   10226:	d154      	bne.n	102d2 <_vfiprintf_r+0xb7a>
   10228:	9a03      	ldr	r2, [sp, #12]
   1022a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1022e:	f000 816b 	beq.w	10508 <_vfiprintf_r+0xdb0>
   10232:	9907      	ldr	r1, [sp, #28]
   10234:	461a      	mov	r2, r3
   10236:	f851 3b04 	ldr.w	r3, [r1], #4
   1023a:	9107      	str	r1, [sp, #28]
   1023c:	b29b      	uxth	r3, r3
   1023e:	2101      	movs	r1, #1
   10240:	e401      	b.n	fa46 <_vfiprintf_r+0x2ee>
   10242:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10244:	2a00      	cmp	r2, #0
   10246:	d164      	bne.n	10312 <_vfiprintf_r+0xbba>
   10248:	4618      	mov	r0, r3
   1024a:	2101      	movs	r1, #1
   1024c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10250:	e4c9      	b.n	fbe6 <_vfiprintf_r+0x48e>
   10252:	2101      	movs	r1, #1
   10254:	4618      	mov	r0, r3
   10256:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1025a:	e4c4      	b.n	fbe6 <_vfiprintf_r+0x48e>
   1025c:	425b      	negs	r3, r3
   1025e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   10262:	9603      	str	r6, [sp, #12]
   10264:	202d      	movs	r0, #45	; 0x2d
   10266:	2101      	movs	r1, #1
   10268:	f7ff bbee 	b.w	fa48 <_vfiprintf_r+0x2f0>
   1026c:	2b00      	cmp	r3, #0
   1026e:	f000 8088 	beq.w	10382 <_vfiprintf_r+0xc2a>
   10272:	ee18 1a10 	vmov	r1, s16
   10276:	aa18      	add	r2, sp, #96	; 0x60
   10278:	4658      	mov	r0, fp
   1027a:	f7ff fa31 	bl	f6e0 <__sprint_r.part.0>
   1027e:	2800      	cmp	r0, #0
   10280:	f47f ac41 	bne.w	fb06 <_vfiprintf_r+0x3ae>
   10284:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10288:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1028c:	1c41      	adds	r1, r0, #1
   1028e:	e477      	b.n	fb80 <_vfiprintf_r+0x428>
   10290:	f898 1000 	ldrb.w	r1, [r8]
   10294:	9307      	str	r3, [sp, #28]
   10296:	f7ff bad2 	b.w	f83e <_vfiprintf_r+0xe6>
   1029a:	ac44      	add	r4, sp, #272	; 0x110
   1029c:	f7ff bb85 	b.w	f9aa <_vfiprintf_r+0x252>
   102a0:	f109 0908 	add.w	r9, r9, #8
   102a4:	f10c 0101 	add.w	r1, ip, #1
   102a8:	4660      	mov	r0, ip
   102aa:	e4a0      	b.n	fbee <_vfiprintf_r+0x496>
   102ac:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   102b0:	f040 8197 	bne.w	105e2 <_vfiprintf_r+0xe8a>
   102b4:	f851 3b04 	ldr.w	r3, [r1], #4
   102b8:	9107      	str	r1, [sp, #28]
   102ba:	f7ff bbc0 	b.w	fa3e <_vfiprintf_r+0x2e6>
   102be:	05b3      	lsls	r3, r6, #22
   102c0:	f100 8188 	bmi.w	105d4 <_vfiprintf_r+0xe7c>
   102c4:	f852 3b04 	ldr.w	r3, [r2], #4
   102c8:	9207      	str	r2, [sp, #28]
   102ca:	17da      	asrs	r2, r3, #31
   102cc:	4611      	mov	r1, r2
   102ce:	f7ff bb52 	b.w	f976 <_vfiprintf_r+0x21e>
   102d2:	9907      	ldr	r1, [sp, #28]
   102d4:	f851 3b04 	ldr.w	r3, [r1], #4
   102d8:	9107      	str	r1, [sp, #28]
   102da:	2101      	movs	r1, #1
   102dc:	f7ff bbb3 	b.w	fa46 <_vfiprintf_r+0x2ee>
   102e0:	9b07      	ldr	r3, [sp, #28]
   102e2:	9805      	ldr	r0, [sp, #20]
   102e4:	f853 1b04 	ldr.w	r1, [r3], #4
   102e8:	9307      	str	r3, [sp, #28]
   102ea:	17c2      	asrs	r2, r0, #31
   102ec:	e9c1 0200 	strd	r0, r2, [r1]
   102f0:	f7ff ba7d 	b.w	f7ee <_vfiprintf_r+0x96>
   102f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102f6:	2b00      	cmp	r3, #0
   102f8:	f43f ab26 	beq.w	f948 <_vfiprintf_r+0x1f0>
   102fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   102fe:	781b      	ldrb	r3, [r3, #0]
   10300:	2b00      	cmp	r3, #0
   10302:	f43f ab21 	beq.w	f948 <_vfiprintf_r+0x1f0>
   10306:	f898 1000 	ldrb.w	r1, [r8]
   1030a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1030e:	f7ff ba96 	b.w	f83e <_vfiprintf_r+0xe6>
   10312:	2302      	movs	r3, #2
   10314:	aa11      	add	r2, sp, #68	; 0x44
   10316:	931c      	str	r3, [sp, #112]	; 0x70
   10318:	921b      	str	r2, [sp, #108]	; 0x6c
   1031a:	2001      	movs	r0, #1
   1031c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10320:	e6a2      	b.n	10068 <_vfiprintf_r+0x910>
   10322:	9603      	str	r6, [sp, #12]
   10324:	e571      	b.n	fe0a <_vfiprintf_r+0x6b2>
   10326:	4b3b      	ldr	r3, [pc, #236]	; (10414 <_vfiprintf_r+0xcbc>)
   10328:	930c      	str	r3, [sp, #48]	; 0x30
   1032a:	f016 0220 	ands.w	r2, r6, #32
   1032e:	d059      	beq.n	103e4 <_vfiprintf_r+0xc8c>
   10330:	9b07      	ldr	r3, [sp, #28]
   10332:	3307      	adds	r3, #7
   10334:	f023 0307 	bic.w	r3, r3, #7
   10338:	4618      	mov	r0, r3
   1033a:	685a      	ldr	r2, [r3, #4]
   1033c:	f850 3b08 	ldr.w	r3, [r0], #8
   10340:	9007      	str	r0, [sp, #28]
   10342:	07f4      	lsls	r4, r6, #31
   10344:	d509      	bpl.n	1035a <_vfiprintf_r+0xc02>
   10346:	ea53 0002 	orrs.w	r0, r3, r2
   1034a:	d006      	beq.n	1035a <_vfiprintf_r+0xc02>
   1034c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10350:	2130      	movs	r1, #48	; 0x30
   10352:	f046 0602 	orr.w	r6, r6, #2
   10356:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1035a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1035e:	9103      	str	r1, [sp, #12]
   10360:	2102      	movs	r1, #2
   10362:	f7ff bb70 	b.w	fa46 <_vfiprintf_r+0x2ee>
   10366:	4b2c      	ldr	r3, [pc, #176]	; (10418 <_vfiprintf_r+0xcc0>)
   10368:	930c      	str	r3, [sp, #48]	; 0x30
   1036a:	e7de      	b.n	1032a <_vfiprintf_r+0xbd2>
   1036c:	9b07      	ldr	r3, [sp, #28]
   1036e:	2101      	movs	r1, #1
   10370:	f853 2b04 	ldr.w	r2, [r3], #4
   10374:	9103      	str	r1, [sp, #12]
   10376:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1037a:	9307      	str	r3, [sp, #28]
   1037c:	9104      	str	r1, [sp, #16]
   1037e:	ac2b      	add	r4, sp, #172	; 0xac
   10380:	e4df      	b.n	fd42 <_vfiprintf_r+0x5ea>
   10382:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10386:	2a00      	cmp	r2, #0
   10388:	f040 8132 	bne.w	105f0 <_vfiprintf_r+0xe98>
   1038c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1038e:	2a00      	cmp	r2, #0
   10390:	f47f ae62 	bne.w	10058 <_vfiprintf_r+0x900>
   10394:	4618      	mov	r0, r3
   10396:	2101      	movs	r1, #1
   10398:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1039c:	e427      	b.n	fbee <_vfiprintf_r+0x496>
   1039e:	2100      	movs	r1, #0
   103a0:	2208      	movs	r2, #8
   103a2:	a816      	add	r0, sp, #88	; 0x58
   103a4:	9413      	str	r4, [sp, #76]	; 0x4c
   103a6:	f7fb f8cd 	bl	b544 <memset>
   103aa:	1c79      	adds	r1, r7, #1
   103ac:	f000 80bc 	beq.w	10528 <_vfiprintf_r+0xdd0>
   103b0:	2500      	movs	r5, #0
   103b2:	9407      	str	r4, [sp, #28]
   103b4:	462c      	mov	r4, r5
   103b6:	e00c      	b.n	103d2 <_vfiprintf_r+0xc7a>
   103b8:	a92b      	add	r1, sp, #172	; 0xac
   103ba:	4658      	mov	r0, fp
   103bc:	f7ff f8ca 	bl	f554 <_wcrtomb_r>
   103c0:	1c42      	adds	r2, r0, #1
   103c2:	4420      	add	r0, r4
   103c4:	f000 816b 	beq.w	1069e <_vfiprintf_r+0xf46>
   103c8:	42b8      	cmp	r0, r7
   103ca:	dc08      	bgt.n	103de <_vfiprintf_r+0xc86>
   103cc:	f000 8170 	beq.w	106b0 <_vfiprintf_r+0xf58>
   103d0:	4604      	mov	r4, r0
   103d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   103d4:	5952      	ldr	r2, [r2, r5]
   103d6:	ab16      	add	r3, sp, #88	; 0x58
   103d8:	3504      	adds	r5, #4
   103da:	2a00      	cmp	r2, #0
   103dc:	d1ec      	bne.n	103b8 <_vfiprintf_r+0xc60>
   103de:	9404      	str	r4, [sp, #16]
   103e0:	9c07      	ldr	r4, [sp, #28]
   103e2:	e0af      	b.n	10544 <_vfiprintf_r+0xdec>
   103e4:	f016 0310 	ands.w	r3, r6, #16
   103e8:	9807      	ldr	r0, [sp, #28]
   103ea:	d10c      	bne.n	10406 <_vfiprintf_r+0xcae>
   103ec:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   103f0:	d005      	beq.n	103fe <_vfiprintf_r+0xca6>
   103f2:	461a      	mov	r2, r3
   103f4:	f850 3b04 	ldr.w	r3, [r0], #4
   103f8:	9007      	str	r0, [sp, #28]
   103fa:	b29b      	uxth	r3, r3
   103fc:	e7a1      	b.n	10342 <_vfiprintf_r+0xbea>
   103fe:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10402:	f040 80e1 	bne.w	105c8 <_vfiprintf_r+0xe70>
   10406:	f850 3b04 	ldr.w	r3, [r0], #4
   1040a:	9007      	str	r0, [sp, #28]
   1040c:	e799      	b.n	10342 <_vfiprintf_r+0xbea>
   1040e:	bf00      	nop
   10410:	20000cd8 	.word	0x20000cd8
   10414:	20000c94 	.word	0x20000c94
   10418:	20000ca8 	.word	0x20000ca8
   1041c:	9903      	ldr	r1, [sp, #12]
   1041e:	9704      	str	r7, [sp, #16]
   10420:	ac44      	add	r4, sp, #272	; 0x110
   10422:	469e      	mov	lr, r3
   10424:	ee08 ba90 	vmov	s17, fp
   10428:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   1042c:	f04f 0c00 	mov.w	ip, #0
   10430:	4623      	mov	r3, r4
   10432:	e006      	b.n	10442 <_vfiprintf_r+0xcea>
   10434:	f1be 0f0a 	cmp.w	lr, #10
   10438:	f172 0200 	sbcs.w	r2, r2, #0
   1043c:	d339      	bcc.n	104b2 <_vfiprintf_r+0xd5a>
   1043e:	46a6      	mov	lr, r4
   10440:	462a      	mov	r2, r5
   10442:	49a6      	ldr	r1, [pc, #664]	; (106dc <_vfiprintf_r+0xf84>)
   10444:	eb1e 0002 	adds.w	r0, lr, r2
   10448:	f140 0000 	adc.w	r0, r0, #0
   1044c:	460f      	mov	r7, r1
   1044e:	fba1 1400 	umull	r1, r4, r1, r0
   10452:	f024 0103 	bic.w	r1, r4, #3
   10456:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1045a:	1a40      	subs	r0, r0, r1
   1045c:	ebbe 0100 	subs.w	r1, lr, r0
   10460:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10464:	f162 0400 	sbc.w	r4, r2, #0
   10468:	fb05 f501 	mul.w	r5, r5, r1
   1046c:	fb07 5504 	mla	r5, r7, r4, r5
   10470:	fba1 4107 	umull	r4, r1, r1, r7
   10474:	440d      	add	r5, r1
   10476:	2705      	movs	r7, #5
   10478:	f004 0101 	and.w	r1, r4, #1
   1047c:	fba1 1b07 	umull	r1, fp, r1, r7
   10480:	1809      	adds	r1, r1, r0
   10482:	0864      	lsrs	r4, r4, #1
   10484:	3130      	adds	r1, #48	; 0x30
   10486:	f803 1c01 	strb.w	r1, [r3, #-1]
   1048a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1048e:	f10c 0c01 	add.w	ip, ip, #1
   10492:	3b01      	subs	r3, #1
   10494:	086d      	lsrs	r5, r5, #1
   10496:	2e00      	cmp	r6, #0
   10498:	d0cc      	beq.n	10434 <_vfiprintf_r+0xcdc>
   1049a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1049c:	7809      	ldrb	r1, [r1, #0]
   1049e:	4561      	cmp	r1, ip
   104a0:	d1c8      	bne.n	10434 <_vfiprintf_r+0xcdc>
   104a2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   104a6:	d0c5      	beq.n	10434 <_vfiprintf_r+0xcdc>
   104a8:	f1be 0f0a 	cmp.w	lr, #10
   104ac:	f172 0200 	sbcs.w	r2, r2, #0
   104b0:	d26c      	bcs.n	1058c <_vfiprintf_r+0xe34>
   104b2:	461c      	mov	r4, r3
   104b4:	ab44      	add	r3, sp, #272	; 0x110
   104b6:	1b1b      	subs	r3, r3, r4
   104b8:	9f04      	ldr	r7, [sp, #16]
   104ba:	9e03      	ldr	r6, [sp, #12]
   104bc:	9304      	str	r3, [sp, #16]
   104be:	ee18 ba90 	vmov	fp, s17
   104c2:	f7ff ba72 	b.w	f9aa <_vfiprintf_r+0x252>
   104c6:	9603      	str	r6, [sp, #12]
   104c8:	f7ff ba62 	b.w	f990 <_vfiprintf_r+0x238>
   104cc:	4658      	mov	r0, fp
   104ce:	f7fa ff09 	bl	b2e4 <__sinit>
   104d2:	f7ff b95b 	b.w	f78c <_vfiprintf_r+0x34>
   104d6:	2901      	cmp	r1, #1
   104d8:	9603      	str	r6, [sp, #12]
   104da:	f47f accd 	bne.w	fe78 <_vfiprintf_r+0x720>
   104de:	f7ff ba5c 	b.w	f99a <_vfiprintf_r+0x242>
   104e2:	9b07      	ldr	r3, [sp, #28]
   104e4:	9905      	ldr	r1, [sp, #20]
   104e6:	f853 2b04 	ldr.w	r2, [r3], #4
   104ea:	6011      	str	r1, [r2, #0]
   104ec:	9307      	str	r3, [sp, #28]
   104ee:	f7ff b97e 	b.w	f7ee <_vfiprintf_r+0x96>
   104f2:	2f06      	cmp	r7, #6
   104f4:	463b      	mov	r3, r7
   104f6:	9a03      	ldr	r2, [sp, #12]
   104f8:	4c79      	ldr	r4, [pc, #484]	; (106e0 <_vfiprintf_r+0xf88>)
   104fa:	9207      	str	r2, [sp, #28]
   104fc:	bf28      	it	cs
   104fe:	2306      	movcs	r3, #6
   10500:	9304      	str	r3, [sp, #16]
   10502:	9303      	str	r3, [sp, #12]
   10504:	f7ff bb25 	b.w	fb52 <_vfiprintf_r+0x3fa>
   10508:	9b03      	ldr	r3, [sp, #12]
   1050a:	9907      	ldr	r1, [sp, #28]
   1050c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10510:	bf14      	ite	ne
   10512:	f851 3b04 	ldrne.w	r3, [r1], #4
   10516:	f851 3b04 	ldreq.w	r3, [r1], #4
   1051a:	9107      	str	r1, [sp, #28]
   1051c:	bf1c      	itt	ne
   1051e:	4602      	movne	r2, r0
   10520:	b2db      	uxtbne	r3, r3
   10522:	2101      	movs	r1, #1
   10524:	f7ff ba8f 	b.w	fa46 <_vfiprintf_r+0x2ee>
   10528:	ab16      	add	r3, sp, #88	; 0x58
   1052a:	9300      	str	r3, [sp, #0]
   1052c:	2300      	movs	r3, #0
   1052e:	4619      	mov	r1, r3
   10530:	aa13      	add	r2, sp, #76	; 0x4c
   10532:	4658      	mov	r0, fp
   10534:	f7ff f834 	bl	f5a0 <_wcsrtombs_r>
   10538:	4603      	mov	r3, r0
   1053a:	3301      	adds	r3, #1
   1053c:	9004      	str	r0, [sp, #16]
   1053e:	f000 80ae 	beq.w	1069e <_vfiprintf_r+0xf46>
   10542:	9413      	str	r4, [sp, #76]	; 0x4c
   10544:	9b04      	ldr	r3, [sp, #16]
   10546:	2b00      	cmp	r3, #0
   10548:	d030      	beq.n	105ac <_vfiprintf_r+0xe54>
   1054a:	2b63      	cmp	r3, #99	; 0x63
   1054c:	dc63      	bgt.n	10616 <_vfiprintf_r+0xebe>
   1054e:	2300      	movs	r3, #0
   10550:	9308      	str	r3, [sp, #32]
   10552:	ac2b      	add	r4, sp, #172	; 0xac
   10554:	2208      	movs	r2, #8
   10556:	2100      	movs	r1, #0
   10558:	a816      	add	r0, sp, #88	; 0x58
   1055a:	f7fa fff3 	bl	b544 <memset>
   1055e:	9d04      	ldr	r5, [sp, #16]
   10560:	ab16      	add	r3, sp, #88	; 0x58
   10562:	9300      	str	r3, [sp, #0]
   10564:	aa13      	add	r2, sp, #76	; 0x4c
   10566:	462b      	mov	r3, r5
   10568:	4621      	mov	r1, r4
   1056a:	4658      	mov	r0, fp
   1056c:	f7ff f818 	bl	f5a0 <_wcsrtombs_r>
   10570:	4285      	cmp	r5, r0
   10572:	f040 80ab 	bne.w	106cc <_vfiprintf_r+0xf74>
   10576:	9b03      	ldr	r3, [sp, #12]
   10578:	9a04      	ldr	r2, [sp, #16]
   1057a:	9307      	str	r3, [sp, #28]
   1057c:	2300      	movs	r3, #0
   1057e:	54a3      	strb	r3, [r4, r2]
   10580:	461f      	mov	r7, r3
   10582:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10586:	9303      	str	r3, [sp, #12]
   10588:	f7ff ba16 	b.w	f9b8 <_vfiprintf_r+0x260>
   1058c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1058e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10590:	1a9b      	subs	r3, r3, r2
   10592:	4618      	mov	r0, r3
   10594:	9308      	str	r3, [sp, #32]
   10596:	f7fb f88d 	bl	b6b4 <strncpy>
   1059a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1059c:	9b08      	ldr	r3, [sp, #32]
   1059e:	784a      	ldrb	r2, [r1, #1]
   105a0:	b10a      	cbz	r2, 105a6 <_vfiprintf_r+0xe4e>
   105a2:	3101      	adds	r1, #1
   105a4:	910b      	str	r1, [sp, #44]	; 0x2c
   105a6:	f04f 0c00 	mov.w	ip, #0
   105aa:	e748      	b.n	1043e <_vfiprintf_r+0xce6>
   105ac:	9b03      	ldr	r3, [sp, #12]
   105ae:	9307      	str	r3, [sp, #28]
   105b0:	9b04      	ldr	r3, [sp, #16]
   105b2:	9303      	str	r3, [sp, #12]
   105b4:	461f      	mov	r7, r3
   105b6:	9308      	str	r3, [sp, #32]
   105b8:	f7ff b9fe 	b.w	f9b8 <_vfiprintf_r+0x260>
   105bc:	2101      	movs	r1, #1
   105be:	4618      	mov	r0, r3
   105c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105c4:	f7ff bb13 	b.w	fbee <_vfiprintf_r+0x496>
   105c8:	f850 3b04 	ldr.w	r3, [r0], #4
   105cc:	9007      	str	r0, [sp, #28]
   105ce:	4622      	mov	r2, r4
   105d0:	b2db      	uxtb	r3, r3
   105d2:	e6b6      	b.n	10342 <_vfiprintf_r+0xbea>
   105d4:	f912 3b04 	ldrsb.w	r3, [r2], #4
   105d8:	9207      	str	r2, [sp, #28]
   105da:	17da      	asrs	r2, r3, #31
   105dc:	4611      	mov	r1, r2
   105de:	f7ff b9ca 	b.w	f976 <_vfiprintf_r+0x21e>
   105e2:	f851 3b04 	ldr.w	r3, [r1], #4
   105e6:	9107      	str	r1, [sp, #28]
   105e8:	4602      	mov	r2, r0
   105ea:	b2db      	uxtb	r3, r3
   105ec:	f7ff ba27 	b.w	fa3e <_vfiprintf_r+0x2e6>
   105f0:	2301      	movs	r3, #1
   105f2:	931c      	str	r3, [sp, #112]	; 0x70
   105f4:	2101      	movs	r1, #1
   105f6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   105fa:	931b      	str	r3, [sp, #108]	; 0x6c
   105fc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10600:	460b      	mov	r3, r1
   10602:	f7ff bacd 	b.w	fba0 <_vfiprintf_r+0x448>
   10606:	9b07      	ldr	r3, [sp, #28]
   10608:	9905      	ldr	r1, [sp, #20]
   1060a:	f853 2b04 	ldr.w	r2, [r3], #4
   1060e:	9307      	str	r3, [sp, #28]
   10610:	8011      	strh	r1, [r2, #0]
   10612:	f7ff b8ec 	b.w	f7ee <_vfiprintf_r+0x96>
   10616:	1c59      	adds	r1, r3, #1
   10618:	4658      	mov	r0, fp
   1061a:	f7f9 ff9b 	bl	a554 <_malloc_r>
   1061e:	4604      	mov	r4, r0
   10620:	2800      	cmp	r0, #0
   10622:	d03c      	beq.n	1069e <_vfiprintf_r+0xf46>
   10624:	9008      	str	r0, [sp, #32]
   10626:	e795      	b.n	10554 <_vfiprintf_r+0xdfc>
   10628:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1062a:	f7fb f911 	bl	b850 <__retarget_lock_release_recursive>
   1062e:	f7ff b9e9 	b.w	fa04 <_vfiprintf_r+0x2ac>
   10632:	9b03      	ldr	r3, [sp, #12]
   10634:	9307      	str	r3, [sp, #28]
   10636:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1063a:	9f08      	ldr	r7, [sp, #32]
   1063c:	f7ff b9bc 	b.w	f9b8 <_vfiprintf_r+0x260>
   10640:	9819      	ldr	r0, [sp, #100]	; 0x64
   10642:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10644:	3001      	adds	r0, #1
   10646:	e545      	b.n	100d4 <_vfiprintf_r+0x97c>
   10648:	9b03      	ldr	r3, [sp, #12]
   1064a:	9307      	str	r3, [sp, #28]
   1064c:	4620      	mov	r0, r4
   1064e:	f7fb fad7 	bl	bc00 <strlen>
   10652:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   10656:	462f      	mov	r7, r5
   10658:	9004      	str	r0, [sp, #16]
   1065a:	9303      	str	r3, [sp, #12]
   1065c:	9508      	str	r5, [sp, #32]
   1065e:	f7ff b9ab 	b.w	f9b8 <_vfiprintf_r+0x260>
   10662:	ee18 1a10 	vmov	r1, s16
   10666:	aa18      	add	r2, sp, #96	; 0x60
   10668:	4658      	mov	r0, fp
   1066a:	f7ff f839 	bl	f6e0 <__sprint_r.part.0>
   1066e:	2800      	cmp	r0, #0
   10670:	f43f aa36 	beq.w	fae0 <_vfiprintf_r+0x388>
   10674:	f7ff ba4d 	b.w	fb12 <_vfiprintf_r+0x3ba>
   10678:	9819      	ldr	r0, [sp, #100]	; 0x64
   1067a:	3001      	adds	r0, #1
   1067c:	e57a      	b.n	10174 <_vfiprintf_r+0xa1c>
   1067e:	468c      	mov	ip, r1
   10680:	e46e      	b.n	ff60 <_vfiprintf_r+0x808>
   10682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10684:	07d9      	lsls	r1, r3, #31
   10686:	d405      	bmi.n	10694 <_vfiprintf_r+0xf3c>
   10688:	89ab      	ldrh	r3, [r5, #12]
   1068a:	059a      	lsls	r2, r3, #22
   1068c:	d402      	bmi.n	10694 <_vfiprintf_r+0xf3c>
   1068e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10690:	f7fb f8de 	bl	b850 <__retarget_lock_release_recursive>
   10694:	f04f 33ff 	mov.w	r3, #4294967295
   10698:	9305      	str	r3, [sp, #20]
   1069a:	f7ff ba49 	b.w	fb30 <_vfiprintf_r+0x3d8>
   1069e:	ee18 2a10 	vmov	r2, s16
   106a2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   106a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106aa:	8193      	strh	r3, [r2, #12]
   106ac:	f7ff ba35 	b.w	fb1a <_vfiprintf_r+0x3c2>
   106b0:	9c07      	ldr	r4, [sp, #28]
   106b2:	9704      	str	r7, [sp, #16]
   106b4:	e746      	b.n	10544 <_vfiprintf_r+0xdec>
   106b6:	9b07      	ldr	r3, [sp, #28]
   106b8:	f898 1001 	ldrb.w	r1, [r8, #1]
   106bc:	f853 7b04 	ldr.w	r7, [r3], #4
   106c0:	9307      	str	r3, [sp, #28]
   106c2:	4690      	mov	r8, r2
   106c4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   106c8:	f7ff b8b9 	b.w	f83e <_vfiprintf_r+0xe6>
   106cc:	ee18 2a10 	vmov	r2, s16
   106d0:	8993      	ldrh	r3, [r2, #12]
   106d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106d6:	8193      	strh	r3, [r2, #12]
   106d8:	f7ff ba15 	b.w	fb06 <_vfiprintf_r+0x3ae>
   106dc:	cccccccd 	.word	0xcccccccd
   106e0:	20000cbc 	.word	0x20000cbc

000106e4 <__sbprintf>:
   106e4:	b570      	push	{r4, r5, r6, lr}
   106e6:	460c      	mov	r4, r1
   106e8:	8989      	ldrh	r1, [r1, #12]
   106ea:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   106ee:	f021 0102 	bic.w	r1, r1, #2
   106f2:	f8ad 1014 	strh.w	r1, [sp, #20]
   106f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   106f8:	911b      	str	r1, [sp, #108]	; 0x6c
   106fa:	89e1      	ldrh	r1, [r4, #14]
   106fc:	f8ad 1016 	strh.w	r1, [sp, #22]
   10700:	69e1      	ldr	r1, [r4, #28]
   10702:	9109      	str	r1, [sp, #36]	; 0x24
   10704:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10706:	910b      	str	r1, [sp, #44]	; 0x2c
   10708:	a91c      	add	r1, sp, #112	; 0x70
   1070a:	9102      	str	r1, [sp, #8]
   1070c:	9106      	str	r1, [sp, #24]
   1070e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10712:	4606      	mov	r6, r0
   10714:	9104      	str	r1, [sp, #16]
   10716:	9107      	str	r1, [sp, #28]
   10718:	a818      	add	r0, sp, #96	; 0x60
   1071a:	2100      	movs	r1, #0
   1071c:	e9cd 3200 	strd	r3, r2, [sp]
   10720:	9108      	str	r1, [sp, #32]
   10722:	f7fb f88f 	bl	b844 <__retarget_lock_init_recursive>
   10726:	e9dd 3200 	ldrd	r3, r2, [sp]
   1072a:	a902      	add	r1, sp, #8
   1072c:	4630      	mov	r0, r6
   1072e:	f7ff f813 	bl	f758 <_vfiprintf_r>
   10732:	1e05      	subs	r5, r0, #0
   10734:	db07      	blt.n	10746 <__sbprintf+0x62>
   10736:	a902      	add	r1, sp, #8
   10738:	4630      	mov	r0, r6
   1073a:	f7fd fee7 	bl	e50c <_fflush_r>
   1073e:	2800      	cmp	r0, #0
   10740:	bf18      	it	ne
   10742:	f04f 35ff 	movne.w	r5, #4294967295
   10746:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1074a:	065b      	lsls	r3, r3, #25
   1074c:	d503      	bpl.n	10756 <__sbprintf+0x72>
   1074e:	89a3      	ldrh	r3, [r4, #12]
   10750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10754:	81a3      	strh	r3, [r4, #12]
   10756:	9818      	ldr	r0, [sp, #96]	; 0x60
   10758:	f7fb f876 	bl	b848 <__retarget_lock_close_recursive>
   1075c:	4628      	mov	r0, r5
   1075e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   10762:	bd70      	pop	{r4, r5, r6, pc}

00010764 <__sfvwrite_r>:
   10764:	6893      	ldr	r3, [r2, #8]
   10766:	2b00      	cmp	r3, #0
   10768:	f000 8085 	beq.w	10876 <__sfvwrite_r+0x112>
   1076c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10770:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   10774:	460c      	mov	r4, r1
   10776:	0719      	lsls	r1, r3, #28
   10778:	4680      	mov	r8, r0
   1077a:	b083      	sub	sp, #12
   1077c:	4617      	mov	r7, r2
   1077e:	b298      	uxth	r0, r3
   10780:	d525      	bpl.n	107ce <__sfvwrite_r+0x6a>
   10782:	6923      	ldr	r3, [r4, #16]
   10784:	b31b      	cbz	r3, 107ce <__sfvwrite_r+0x6a>
   10786:	f010 0302 	ands.w	r3, r0, #2
   1078a:	683d      	ldr	r5, [r7, #0]
   1078c:	d02d      	beq.n	107ea <__sfvwrite_r+0x86>
   1078e:	f04f 0a00 	mov.w	sl, #0
   10792:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 10a54 <__sfvwrite_r+0x2f0>
   10796:	4656      	mov	r6, sl
   10798:	46b9      	mov	r9, r7
   1079a:	455e      	cmp	r6, fp
   1079c:	4633      	mov	r3, r6
   1079e:	4652      	mov	r2, sl
   107a0:	bf28      	it	cs
   107a2:	465b      	movcs	r3, fp
   107a4:	4640      	mov	r0, r8
   107a6:	2e00      	cmp	r6, #0
   107a8:	d052      	beq.n	10850 <__sfvwrite_r+0xec>
   107aa:	69e1      	ldr	r1, [r4, #28]
   107ac:	6a67      	ldr	r7, [r4, #36]	; 0x24
   107ae:	47b8      	blx	r7
   107b0:	2800      	cmp	r0, #0
   107b2:	dd56      	ble.n	10862 <__sfvwrite_r+0xfe>
   107b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   107b8:	1a1b      	subs	r3, r3, r0
   107ba:	4482      	add	sl, r0
   107bc:	1a36      	subs	r6, r6, r0
   107be:	f8c9 3008 	str.w	r3, [r9, #8]
   107c2:	2b00      	cmp	r3, #0
   107c4:	d1e9      	bne.n	1079a <__sfvwrite_r+0x36>
   107c6:	2000      	movs	r0, #0
   107c8:	b003      	add	sp, #12
   107ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107ce:	4621      	mov	r1, r4
   107d0:	4640      	mov	r0, r8
   107d2:	f000 f941 	bl	10a58 <__swsetup_r>
   107d6:	2800      	cmp	r0, #0
   107d8:	f040 8138 	bne.w	10a4c <__sfvwrite_r+0x2e8>
   107dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   107e0:	683d      	ldr	r5, [r7, #0]
   107e2:	b298      	uxth	r0, r3
   107e4:	f010 0302 	ands.w	r3, r0, #2
   107e8:	d1d1      	bne.n	1078e <__sfvwrite_r+0x2a>
   107ea:	f010 0901 	ands.w	r9, r0, #1
   107ee:	d144      	bne.n	1087a <__sfvwrite_r+0x116>
   107f0:	464e      	mov	r6, r9
   107f2:	9700      	str	r7, [sp, #0]
   107f4:	b346      	cbz	r6, 10848 <__sfvwrite_r+0xe4>
   107f6:	0582      	lsls	r2, r0, #22
   107f8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   107fc:	f140 8085 	bpl.w	1090a <__sfvwrite_r+0x1a6>
   10800:	45b3      	cmp	fp, r6
   10802:	465a      	mov	r2, fp
   10804:	f200 80b4 	bhi.w	10970 <__sfvwrite_r+0x20c>
   10808:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1080c:	f040 80c1 	bne.w	10992 <__sfvwrite_r+0x22e>
   10810:	6820      	ldr	r0, [r4, #0]
   10812:	9201      	str	r2, [sp, #4]
   10814:	4649      	mov	r1, r9
   10816:	f7fa fe19 	bl	b44c <memmove>
   1081a:	68a3      	ldr	r3, [r4, #8]
   1081c:	9a01      	ldr	r2, [sp, #4]
   1081e:	eba3 010b 	sub.w	r1, r3, fp
   10822:	6823      	ldr	r3, [r4, #0]
   10824:	60a1      	str	r1, [r4, #8]
   10826:	4413      	add	r3, r2
   10828:	46b2      	mov	sl, r6
   1082a:	6023      	str	r3, [r4, #0]
   1082c:	2600      	movs	r6, #0
   1082e:	9a00      	ldr	r2, [sp, #0]
   10830:	6893      	ldr	r3, [r2, #8]
   10832:	eba3 030a 	sub.w	r3, r3, sl
   10836:	44d1      	add	r9, sl
   10838:	6093      	str	r3, [r2, #8]
   1083a:	2b00      	cmp	r3, #0
   1083c:	d0c3      	beq.n	107c6 <__sfvwrite_r+0x62>
   1083e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10842:	b280      	uxth	r0, r0
   10844:	2e00      	cmp	r6, #0
   10846:	d1d6      	bne.n	107f6 <__sfvwrite_r+0x92>
   10848:	e9d5 9600 	ldrd	r9, r6, [r5]
   1084c:	3508      	adds	r5, #8
   1084e:	e7d1      	b.n	107f4 <__sfvwrite_r+0x90>
   10850:	e9d5 a600 	ldrd	sl, r6, [r5]
   10854:	3508      	adds	r5, #8
   10856:	e7a0      	b.n	1079a <__sfvwrite_r+0x36>
   10858:	4621      	mov	r1, r4
   1085a:	4640      	mov	r0, r8
   1085c:	f7fd fe56 	bl	e50c <_fflush_r>
   10860:	b388      	cbz	r0, 108c6 <__sfvwrite_r+0x162>
   10862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1086a:	f04f 30ff 	mov.w	r0, #4294967295
   1086e:	81a3      	strh	r3, [r4, #12]
   10870:	b003      	add	sp, #12
   10872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10876:	2000      	movs	r0, #0
   10878:	4770      	bx	lr
   1087a:	461e      	mov	r6, r3
   1087c:	46ba      	mov	sl, r7
   1087e:	4699      	mov	r9, r3
   10880:	4618      	mov	r0, r3
   10882:	9500      	str	r5, [sp, #0]
   10884:	461f      	mov	r7, r3
   10886:	b366      	cbz	r6, 108e2 <__sfvwrite_r+0x17e>
   10888:	2800      	cmp	r0, #0
   1088a:	d032      	beq.n	108f2 <__sfvwrite_r+0x18e>
   1088c:	464a      	mov	r2, r9
   1088e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10892:	6820      	ldr	r0, [r4, #0]
   10894:	68a5      	ldr	r5, [r4, #8]
   10896:	42b2      	cmp	r2, r6
   10898:	bf28      	it	cs
   1089a:	4632      	movcs	r2, r6
   1089c:	4288      	cmp	r0, r1
   1089e:	d904      	bls.n	108aa <__sfvwrite_r+0x146>
   108a0:	eb05 0b03 	add.w	fp, r5, r3
   108a4:	455a      	cmp	r2, fp
   108a6:	f300 80a7 	bgt.w	109f8 <__sfvwrite_r+0x294>
   108aa:	4293      	cmp	r3, r2
   108ac:	dc64      	bgt.n	10978 <__sfvwrite_r+0x214>
   108ae:	69e1      	ldr	r1, [r4, #28]
   108b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   108b2:	463a      	mov	r2, r7
   108b4:	4640      	mov	r0, r8
   108b6:	47a8      	blx	r5
   108b8:	f1b0 0b00 	subs.w	fp, r0, #0
   108bc:	ddd1      	ble.n	10862 <__sfvwrite_r+0xfe>
   108be:	ebb9 090b 	subs.w	r9, r9, fp
   108c2:	d0c9      	beq.n	10858 <__sfvwrite_r+0xf4>
   108c4:	2001      	movs	r0, #1
   108c6:	f8da 3008 	ldr.w	r3, [sl, #8]
   108ca:	eba3 030b 	sub.w	r3, r3, fp
   108ce:	445f      	add	r7, fp
   108d0:	eba6 060b 	sub.w	r6, r6, fp
   108d4:	f8ca 3008 	str.w	r3, [sl, #8]
   108d8:	2b00      	cmp	r3, #0
   108da:	f43f af74 	beq.w	107c6 <__sfvwrite_r+0x62>
   108de:	2e00      	cmp	r6, #0
   108e0:	d1d2      	bne.n	10888 <__sfvwrite_r+0x124>
   108e2:	9a00      	ldr	r2, [sp, #0]
   108e4:	6856      	ldr	r6, [r2, #4]
   108e6:	4613      	mov	r3, r2
   108e8:	3208      	adds	r2, #8
   108ea:	9200      	str	r2, [sp, #0]
   108ec:	2e00      	cmp	r6, #0
   108ee:	d0f8      	beq.n	108e2 <__sfvwrite_r+0x17e>
   108f0:	681f      	ldr	r7, [r3, #0]
   108f2:	4632      	mov	r2, r6
   108f4:	210a      	movs	r1, #10
   108f6:	4638      	mov	r0, r7
   108f8:	f7fd fe3a 	bl	e570 <memchr>
   108fc:	2800      	cmp	r0, #0
   108fe:	f000 809c 	beq.w	10a3a <__sfvwrite_r+0x2d6>
   10902:	3001      	adds	r0, #1
   10904:	eba0 0907 	sub.w	r9, r0, r7
   10908:	e7c0      	b.n	1088c <__sfvwrite_r+0x128>
   1090a:	6820      	ldr	r0, [r4, #0]
   1090c:	6923      	ldr	r3, [r4, #16]
   1090e:	4298      	cmp	r0, r3
   10910:	d816      	bhi.n	10940 <__sfvwrite_r+0x1dc>
   10912:	6962      	ldr	r2, [r4, #20]
   10914:	42b2      	cmp	r2, r6
   10916:	d813      	bhi.n	10940 <__sfvwrite_r+0x1dc>
   10918:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1091c:	42b3      	cmp	r3, r6
   1091e:	bf28      	it	cs
   10920:	4633      	movcs	r3, r6
   10922:	69e1      	ldr	r1, [r4, #28]
   10924:	fb93 f3f2 	sdiv	r3, r3, r2
   10928:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1092a:	fb02 f303 	mul.w	r3, r2, r3
   1092e:	4640      	mov	r0, r8
   10930:	464a      	mov	r2, r9
   10932:	47b8      	blx	r7
   10934:	f1b0 0a00 	subs.w	sl, r0, #0
   10938:	dd93      	ble.n	10862 <__sfvwrite_r+0xfe>
   1093a:	eba6 060a 	sub.w	r6, r6, sl
   1093e:	e776      	b.n	1082e <__sfvwrite_r+0xca>
   10940:	45b3      	cmp	fp, r6
   10942:	46da      	mov	sl, fp
   10944:	bf28      	it	cs
   10946:	46b2      	movcs	sl, r6
   10948:	4652      	mov	r2, sl
   1094a:	4649      	mov	r1, r9
   1094c:	f7fa fd7e 	bl	b44c <memmove>
   10950:	68a3      	ldr	r3, [r4, #8]
   10952:	6822      	ldr	r2, [r4, #0]
   10954:	eba3 030a 	sub.w	r3, r3, sl
   10958:	4452      	add	r2, sl
   1095a:	60a3      	str	r3, [r4, #8]
   1095c:	6022      	str	r2, [r4, #0]
   1095e:	2b00      	cmp	r3, #0
   10960:	d1eb      	bne.n	1093a <__sfvwrite_r+0x1d6>
   10962:	4621      	mov	r1, r4
   10964:	4640      	mov	r0, r8
   10966:	f7fd fdd1 	bl	e50c <_fflush_r>
   1096a:	2800      	cmp	r0, #0
   1096c:	d0e5      	beq.n	1093a <__sfvwrite_r+0x1d6>
   1096e:	e778      	b.n	10862 <__sfvwrite_r+0xfe>
   10970:	6820      	ldr	r0, [r4, #0]
   10972:	46b3      	mov	fp, r6
   10974:	4632      	mov	r2, r6
   10976:	e74c      	b.n	10812 <__sfvwrite_r+0xae>
   10978:	4639      	mov	r1, r7
   1097a:	9201      	str	r2, [sp, #4]
   1097c:	f7fa fd66 	bl	b44c <memmove>
   10980:	9a01      	ldr	r2, [sp, #4]
   10982:	68a3      	ldr	r3, [r4, #8]
   10984:	1a9b      	subs	r3, r3, r2
   10986:	60a3      	str	r3, [r4, #8]
   10988:	6823      	ldr	r3, [r4, #0]
   1098a:	4413      	add	r3, r2
   1098c:	6023      	str	r3, [r4, #0]
   1098e:	4693      	mov	fp, r2
   10990:	e795      	b.n	108be <__sfvwrite_r+0x15a>
   10992:	6823      	ldr	r3, [r4, #0]
   10994:	6921      	ldr	r1, [r4, #16]
   10996:	eba3 0b01 	sub.w	fp, r3, r1
   1099a:	6963      	ldr	r3, [r4, #20]
   1099c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   109a0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   109a4:	f10b 0301 	add.w	r3, fp, #1
   109a8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   109ac:	4433      	add	r3, r6
   109ae:	4553      	cmp	r3, sl
   109b0:	4652      	mov	r2, sl
   109b2:	bf84      	itt	hi
   109b4:	469a      	movhi	sl, r3
   109b6:	4652      	movhi	r2, sl
   109b8:	0543      	lsls	r3, r0, #21
   109ba:	d52c      	bpl.n	10a16 <__sfvwrite_r+0x2b2>
   109bc:	4611      	mov	r1, r2
   109be:	4640      	mov	r0, r8
   109c0:	f7f9 fdc8 	bl	a554 <_malloc_r>
   109c4:	2800      	cmp	r0, #0
   109c6:	d03b      	beq.n	10a40 <__sfvwrite_r+0x2dc>
   109c8:	465a      	mov	r2, fp
   109ca:	6921      	ldr	r1, [r4, #16]
   109cc:	9001      	str	r0, [sp, #4]
   109ce:	f7f8 f811 	bl	89f4 <memcpy>
   109d2:	89a2      	ldrh	r2, [r4, #12]
   109d4:	9b01      	ldr	r3, [sp, #4]
   109d6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   109da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   109de:	81a2      	strh	r2, [r4, #12]
   109e0:	eb03 000b 	add.w	r0, r3, fp
   109e4:	6123      	str	r3, [r4, #16]
   109e6:	ebaa 030b 	sub.w	r3, sl, fp
   109ea:	f8c4 a014 	str.w	sl, [r4, #20]
   109ee:	60a3      	str	r3, [r4, #8]
   109f0:	6020      	str	r0, [r4, #0]
   109f2:	46b3      	mov	fp, r6
   109f4:	4632      	mov	r2, r6
   109f6:	e70c      	b.n	10812 <__sfvwrite_r+0xae>
   109f8:	4639      	mov	r1, r7
   109fa:	465a      	mov	r2, fp
   109fc:	f7fa fd26 	bl	b44c <memmove>
   10a00:	6823      	ldr	r3, [r4, #0]
   10a02:	445b      	add	r3, fp
   10a04:	6023      	str	r3, [r4, #0]
   10a06:	4621      	mov	r1, r4
   10a08:	4640      	mov	r0, r8
   10a0a:	f7fd fd7f 	bl	e50c <_fflush_r>
   10a0e:	2800      	cmp	r0, #0
   10a10:	f43f af55 	beq.w	108be <__sfvwrite_r+0x15a>
   10a14:	e725      	b.n	10862 <__sfvwrite_r+0xfe>
   10a16:	4640      	mov	r0, r8
   10a18:	f7fa f864 	bl	aae4 <_realloc_r>
   10a1c:	4603      	mov	r3, r0
   10a1e:	2800      	cmp	r0, #0
   10a20:	d1de      	bne.n	109e0 <__sfvwrite_r+0x27c>
   10a22:	6921      	ldr	r1, [r4, #16]
   10a24:	4640      	mov	r0, r8
   10a26:	f7fb f9ed 	bl	be04 <_free_r>
   10a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a2e:	220c      	movs	r2, #12
   10a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10a34:	f8c8 2000 	str.w	r2, [r8]
   10a38:	e715      	b.n	10866 <__sfvwrite_r+0x102>
   10a3a:	1c72      	adds	r2, r6, #1
   10a3c:	4691      	mov	r9, r2
   10a3e:	e726      	b.n	1088e <__sfvwrite_r+0x12a>
   10a40:	220c      	movs	r2, #12
   10a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a46:	f8c8 2000 	str.w	r2, [r8]
   10a4a:	e70c      	b.n	10866 <__sfvwrite_r+0x102>
   10a4c:	f04f 30ff 	mov.w	r0, #4294967295
   10a50:	e6ba      	b.n	107c8 <__sfvwrite_r+0x64>
   10a52:	bf00      	nop
   10a54:	7ffffc00 	.word	0x7ffffc00

00010a58 <__swsetup_r>:
   10a58:	b538      	push	{r3, r4, r5, lr}
   10a5a:	4b31      	ldr	r3, [pc, #196]	; (10b20 <__swsetup_r+0xc8>)
   10a5c:	681b      	ldr	r3, [r3, #0]
   10a5e:	4605      	mov	r5, r0
   10a60:	460c      	mov	r4, r1
   10a62:	b113      	cbz	r3, 10a6a <__swsetup_r+0x12>
   10a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10a66:	2a00      	cmp	r2, #0
   10a68:	d04e      	beq.n	10b08 <__swsetup_r+0xb0>
   10a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a6e:	0718      	lsls	r0, r3, #28
   10a70:	b29a      	uxth	r2, r3
   10a72:	d51c      	bpl.n	10aae <__swsetup_r+0x56>
   10a74:	6921      	ldr	r1, [r4, #16]
   10a76:	b329      	cbz	r1, 10ac4 <__swsetup_r+0x6c>
   10a78:	f012 0001 	ands.w	r0, r2, #1
   10a7c:	d007      	beq.n	10a8e <__swsetup_r+0x36>
   10a7e:	2000      	movs	r0, #0
   10a80:	60a0      	str	r0, [r4, #8]
   10a82:	6960      	ldr	r0, [r4, #20]
   10a84:	4240      	negs	r0, r0
   10a86:	61a0      	str	r0, [r4, #24]
   10a88:	b139      	cbz	r1, 10a9a <__swsetup_r+0x42>
   10a8a:	2000      	movs	r0, #0
   10a8c:	bd38      	pop	{r3, r4, r5, pc}
   10a8e:	0795      	lsls	r5, r2, #30
   10a90:	bf58      	it	pl
   10a92:	6960      	ldrpl	r0, [r4, #20]
   10a94:	60a0      	str	r0, [r4, #8]
   10a96:	2900      	cmp	r1, #0
   10a98:	d1f7      	bne.n	10a8a <__swsetup_r+0x32>
   10a9a:	0612      	lsls	r2, r2, #24
   10a9c:	bf58      	it	pl
   10a9e:	4608      	movpl	r0, r1
   10aa0:	d5f4      	bpl.n	10a8c <__swsetup_r+0x34>
   10aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10aa6:	81a3      	strh	r3, [r4, #12]
   10aa8:	f04f 30ff 	mov.w	r0, #4294967295
   10aac:	bd38      	pop	{r3, r4, r5, pc}
   10aae:	06d1      	lsls	r1, r2, #27
   10ab0:	d52e      	bpl.n	10b10 <__swsetup_r+0xb8>
   10ab2:	0752      	lsls	r2, r2, #29
   10ab4:	d414      	bmi.n	10ae0 <__swsetup_r+0x88>
   10ab6:	6921      	ldr	r1, [r4, #16]
   10ab8:	f043 0308 	orr.w	r3, r3, #8
   10abc:	81a3      	strh	r3, [r4, #12]
   10abe:	b29a      	uxth	r2, r3
   10ac0:	2900      	cmp	r1, #0
   10ac2:	d1d9      	bne.n	10a78 <__swsetup_r+0x20>
   10ac4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   10ac8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   10acc:	d0d4      	beq.n	10a78 <__swsetup_r+0x20>
   10ace:	4621      	mov	r1, r4
   10ad0:	4628      	mov	r0, r5
   10ad2:	f000 f947 	bl	10d64 <__smakebuf_r>
   10ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ada:	6921      	ldr	r1, [r4, #16]
   10adc:	b29a      	uxth	r2, r3
   10ade:	e7cb      	b.n	10a78 <__swsetup_r+0x20>
   10ae0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10ae2:	b151      	cbz	r1, 10afa <__swsetup_r+0xa2>
   10ae4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10ae8:	4291      	cmp	r1, r2
   10aea:	d004      	beq.n	10af6 <__swsetup_r+0x9e>
   10aec:	4628      	mov	r0, r5
   10aee:	f7fb f989 	bl	be04 <_free_r>
   10af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10af6:	2200      	movs	r2, #0
   10af8:	6322      	str	r2, [r4, #48]	; 0x30
   10afa:	6921      	ldr	r1, [r4, #16]
   10afc:	2200      	movs	r2, #0
   10afe:	e9c4 1200 	strd	r1, r2, [r4]
   10b02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   10b06:	e7d7      	b.n	10ab8 <__swsetup_r+0x60>
   10b08:	4618      	mov	r0, r3
   10b0a:	f7fa fbeb 	bl	b2e4 <__sinit>
   10b0e:	e7ac      	b.n	10a6a <__swsetup_r+0x12>
   10b10:	2209      	movs	r2, #9
   10b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b16:	602a      	str	r2, [r5, #0]
   10b18:	f04f 30ff 	mov.w	r0, #4294967295
   10b1c:	81a3      	strh	r3, [r4, #12]
   10b1e:	bd38      	pop	{r3, r4, r5, pc}
   10b20:	200048fc 	.word	0x200048fc

00010b24 <__fputwc>:
   10b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b28:	b082      	sub	sp, #8
   10b2a:	4682      	mov	sl, r0
   10b2c:	4688      	mov	r8, r1
   10b2e:	4614      	mov	r4, r2
   10b30:	f7fa fdf2 	bl	b718 <__locale_mb_cur_max>
   10b34:	2801      	cmp	r0, #1
   10b36:	d103      	bne.n	10b40 <__fputwc+0x1c>
   10b38:	f108 33ff 	add.w	r3, r8, #4294967295
   10b3c:	2bfe      	cmp	r3, #254	; 0xfe
   10b3e:	d936      	bls.n	10bae <__fputwc+0x8a>
   10b40:	f10d 0904 	add.w	r9, sp, #4
   10b44:	4642      	mov	r2, r8
   10b46:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   10b4a:	4649      	mov	r1, r9
   10b4c:	4650      	mov	r0, sl
   10b4e:	f7fe fd01 	bl	f554 <_wcrtomb_r>
   10b52:	1c42      	adds	r2, r0, #1
   10b54:	4606      	mov	r6, r0
   10b56:	d032      	beq.n	10bbe <__fputwc+0x9a>
   10b58:	b320      	cbz	r0, 10ba4 <__fputwc+0x80>
   10b5a:	f89d c004 	ldrb.w	ip, [sp, #4]
   10b5e:	2500      	movs	r5, #0
   10b60:	e009      	b.n	10b76 <__fputwc+0x52>
   10b62:	6823      	ldr	r3, [r4, #0]
   10b64:	1c5a      	adds	r2, r3, #1
   10b66:	6022      	str	r2, [r4, #0]
   10b68:	f883 c000 	strb.w	ip, [r3]
   10b6c:	3501      	adds	r5, #1
   10b6e:	42b5      	cmp	r5, r6
   10b70:	d218      	bcs.n	10ba4 <__fputwc+0x80>
   10b72:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   10b76:	68a3      	ldr	r3, [r4, #8]
   10b78:	3b01      	subs	r3, #1
   10b7a:	2b00      	cmp	r3, #0
   10b7c:	60a3      	str	r3, [r4, #8]
   10b7e:	daf0      	bge.n	10b62 <__fputwc+0x3e>
   10b80:	69a7      	ldr	r7, [r4, #24]
   10b82:	42bb      	cmp	r3, r7
   10b84:	4661      	mov	r1, ip
   10b86:	4622      	mov	r2, r4
   10b88:	4650      	mov	r0, sl
   10b8a:	db02      	blt.n	10b92 <__fputwc+0x6e>
   10b8c:	f1bc 0f0a 	cmp.w	ip, #10
   10b90:	d1e7      	bne.n	10b62 <__fputwc+0x3e>
   10b92:	f000 f953 	bl	10e3c <__swbuf_r>
   10b96:	1c43      	adds	r3, r0, #1
   10b98:	d1e8      	bne.n	10b6c <__fputwc+0x48>
   10b9a:	4606      	mov	r6, r0
   10b9c:	4630      	mov	r0, r6
   10b9e:	b002      	add	sp, #8
   10ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ba4:	4646      	mov	r6, r8
   10ba6:	4630      	mov	r0, r6
   10ba8:	b002      	add	sp, #8
   10baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bae:	fa5f fc88 	uxtb.w	ip, r8
   10bb2:	f88d c004 	strb.w	ip, [sp, #4]
   10bb6:	4606      	mov	r6, r0
   10bb8:	f10d 0904 	add.w	r9, sp, #4
   10bbc:	e7cf      	b.n	10b5e <__fputwc+0x3a>
   10bbe:	89a3      	ldrh	r3, [r4, #12]
   10bc0:	4630      	mov	r0, r6
   10bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10bc6:	81a3      	strh	r3, [r4, #12]
   10bc8:	b002      	add	sp, #8
   10bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bce:	bf00      	nop

00010bd0 <_fputwc_r>:
   10bd0:	b530      	push	{r4, r5, lr}
   10bd2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10bd4:	f013 0f01 	tst.w	r3, #1
   10bd8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10bdc:	4614      	mov	r4, r2
   10bde:	b083      	sub	sp, #12
   10be0:	4605      	mov	r5, r0
   10be2:	b29a      	uxth	r2, r3
   10be4:	d101      	bne.n	10bea <_fputwc_r+0x1a>
   10be6:	0598      	lsls	r0, r3, #22
   10be8:	d51c      	bpl.n	10c24 <_fputwc_r+0x54>
   10bea:	0490      	lsls	r0, r2, #18
   10bec:	d406      	bmi.n	10bfc <_fputwc_r+0x2c>
   10bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   10bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10bf8:	81a3      	strh	r3, [r4, #12]
   10bfa:	6662      	str	r2, [r4, #100]	; 0x64
   10bfc:	4622      	mov	r2, r4
   10bfe:	4628      	mov	r0, r5
   10c00:	f7ff ff90 	bl	10b24 <__fputwc>
   10c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c06:	07da      	lsls	r2, r3, #31
   10c08:	4605      	mov	r5, r0
   10c0a:	d402      	bmi.n	10c12 <_fputwc_r+0x42>
   10c0c:	89a3      	ldrh	r3, [r4, #12]
   10c0e:	059b      	lsls	r3, r3, #22
   10c10:	d502      	bpl.n	10c18 <_fputwc_r+0x48>
   10c12:	4628      	mov	r0, r5
   10c14:	b003      	add	sp, #12
   10c16:	bd30      	pop	{r4, r5, pc}
   10c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c1a:	f7fa fe19 	bl	b850 <__retarget_lock_release_recursive>
   10c1e:	4628      	mov	r0, r5
   10c20:	b003      	add	sp, #12
   10c22:	bd30      	pop	{r4, r5, pc}
   10c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c26:	9101      	str	r1, [sp, #4]
   10c28:	f7fa fe10 	bl	b84c <__retarget_lock_acquire_recursive>
   10c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10c30:	9901      	ldr	r1, [sp, #4]
   10c32:	b29a      	uxth	r2, r3
   10c34:	e7d9      	b.n	10bea <_fputwc_r+0x1a>
   10c36:	bf00      	nop

00010c38 <_wcsnrtombs_l>:
   10c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c3c:	b08b      	sub	sp, #44	; 0x2c
   10c3e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   10c42:	9f14      	ldr	r7, [sp, #80]	; 0x50
   10c44:	9103      	str	r1, [sp, #12]
   10c46:	4681      	mov	r9, r0
   10c48:	9205      	str	r2, [sp, #20]
   10c4a:	461e      	mov	r6, r3
   10c4c:	f1b8 0f00 	cmp.w	r8, #0
   10c50:	d05c      	beq.n	10d0c <_wcsnrtombs_l+0xd4>
   10c52:	9b03      	ldr	r3, [sp, #12]
   10c54:	2b00      	cmp	r3, #0
   10c56:	d05e      	beq.n	10d16 <_wcsnrtombs_l+0xde>
   10c58:	9b05      	ldr	r3, [sp, #20]
   10c5a:	681d      	ldr	r5, [r3, #0]
   10c5c:	2f00      	cmp	r7, #0
   10c5e:	d06a      	beq.n	10d36 <_wcsnrtombs_l+0xfe>
   10c60:	1e74      	subs	r4, r6, #1
   10c62:	b34e      	cbz	r6, 10cb8 <_wcsnrtombs_l+0x80>
   10c64:	9b03      	ldr	r3, [sp, #12]
   10c66:	9304      	str	r3, [sp, #16]
   10c68:	3d04      	subs	r5, #4
   10c6a:	2600      	movs	r6, #0
   10c6c:	9501      	str	r5, [sp, #4]
   10c6e:	e00b      	b.n	10c88 <_wcsnrtombs_l+0x50>
   10c70:	9b03      	ldr	r3, [sp, #12]
   10c72:	bb2b      	cbnz	r3, 10cc0 <_wcsnrtombs_l+0x88>
   10c74:	9b01      	ldr	r3, [sp, #4]
   10c76:	681a      	ldr	r2, [r3, #0]
   10c78:	2a00      	cmp	r2, #0
   10c7a:	d03a      	beq.n	10cf2 <_wcsnrtombs_l+0xba>
   10c7c:	45bc      	cmp	ip, r7
   10c7e:	d25c      	bcs.n	10d3a <_wcsnrtombs_l+0x102>
   10c80:	3c01      	subs	r4, #1
   10c82:	1c63      	adds	r3, r4, #1
   10c84:	4666      	mov	r6, ip
   10c86:	d017      	beq.n	10cb8 <_wcsnrtombs_l+0x80>
   10c88:	f8d8 3000 	ldr.w	r3, [r8]
   10c8c:	9302      	str	r3, [sp, #8]
   10c8e:	9b01      	ldr	r3, [sp, #4]
   10c90:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   10c94:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10c98:	9301      	str	r3, [sp, #4]
   10c9a:	a907      	add	r1, sp, #28
   10c9c:	4643      	mov	r3, r8
   10c9e:	4648      	mov	r0, r9
   10ca0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   10ca4:	47a8      	blx	r5
   10ca6:	1c42      	adds	r2, r0, #1
   10ca8:	d03a      	beq.n	10d20 <_wcsnrtombs_l+0xe8>
   10caa:	eb00 0c06 	add.w	ip, r0, r6
   10cae:	45bc      	cmp	ip, r7
   10cb0:	d9de      	bls.n	10c70 <_wcsnrtombs_l+0x38>
   10cb2:	9b02      	ldr	r3, [sp, #8]
   10cb4:	e9c8 3b00 	strd	r3, fp, [r8]
   10cb8:	4630      	mov	r0, r6
   10cba:	b00b      	add	sp, #44	; 0x2c
   10cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cc0:	2800      	cmp	r0, #0
   10cc2:	dd0e      	ble.n	10ce2 <_wcsnrtombs_l+0xaa>
   10cc4:	9b04      	ldr	r3, [sp, #16]
   10cc6:	9d01      	ldr	r5, [sp, #4]
   10cc8:	4418      	add	r0, r3
   10cca:	1e5a      	subs	r2, r3, #1
   10ccc:	a907      	add	r1, sp, #28
   10cce:	f100 3eff 	add.w	lr, r0, #4294967295
   10cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
   10cd6:	f802 3f01 	strb.w	r3, [r2, #1]!
   10cda:	4572      	cmp	r2, lr
   10cdc:	d1f9      	bne.n	10cd2 <_wcsnrtombs_l+0x9a>
   10cde:	9501      	str	r5, [sp, #4]
   10ce0:	9004      	str	r0, [sp, #16]
   10ce2:	9b05      	ldr	r3, [sp, #20]
   10ce4:	681a      	ldr	r2, [r3, #0]
   10ce6:	3204      	adds	r2, #4
   10ce8:	601a      	str	r2, [r3, #0]
   10cea:	9b01      	ldr	r3, [sp, #4]
   10cec:	681a      	ldr	r2, [r3, #0]
   10cee:	2a00      	cmp	r2, #0
   10cf0:	d1c4      	bne.n	10c7c <_wcsnrtombs_l+0x44>
   10cf2:	9b03      	ldr	r3, [sp, #12]
   10cf4:	b10b      	cbz	r3, 10cfa <_wcsnrtombs_l+0xc2>
   10cf6:	9b05      	ldr	r3, [sp, #20]
   10cf8:	601a      	str	r2, [r3, #0]
   10cfa:	f10c 36ff 	add.w	r6, ip, #4294967295
   10cfe:	2200      	movs	r2, #0
   10d00:	4630      	mov	r0, r6
   10d02:	f8c8 2000 	str.w	r2, [r8]
   10d06:	b00b      	add	sp, #44	; 0x2c
   10d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d0c:	9b03      	ldr	r3, [sp, #12]
   10d0e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   10d12:	2b00      	cmp	r3, #0
   10d14:	d1a0      	bne.n	10c58 <_wcsnrtombs_l+0x20>
   10d16:	9b05      	ldr	r3, [sp, #20]
   10d18:	f04f 37ff 	mov.w	r7, #4294967295
   10d1c:	681d      	ldr	r5, [r3, #0]
   10d1e:	e79f      	b.n	10c60 <_wcsnrtombs_l+0x28>
   10d20:	4606      	mov	r6, r0
   10d22:	218a      	movs	r1, #138	; 0x8a
   10d24:	2200      	movs	r2, #0
   10d26:	4630      	mov	r0, r6
   10d28:	f8c9 1000 	str.w	r1, [r9]
   10d2c:	f8c8 2000 	str.w	r2, [r8]
   10d30:	b00b      	add	sp, #44	; 0x2c
   10d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d36:	463e      	mov	r6, r7
   10d38:	e7be      	b.n	10cb8 <_wcsnrtombs_l+0x80>
   10d3a:	4666      	mov	r6, ip
   10d3c:	e7bc      	b.n	10cb8 <_wcsnrtombs_l+0x80>
   10d3e:	bf00      	nop

00010d40 <_wcsnrtombs_r>:
   10d40:	b510      	push	{r4, lr}
   10d42:	b084      	sub	sp, #16
   10d44:	4c05      	ldr	r4, [pc, #20]	; (10d5c <_wcsnrtombs_r+0x1c>)
   10d46:	9806      	ldr	r0, [sp, #24]
   10d48:	9000      	str	r0, [sp, #0]
   10d4a:	9807      	ldr	r0, [sp, #28]
   10d4c:	9001      	str	r0, [sp, #4]
   10d4e:	4804      	ldr	r0, [pc, #16]	; (10d60 <_wcsnrtombs_r+0x20>)
   10d50:	6800      	ldr	r0, [r0, #0]
   10d52:	9402      	str	r4, [sp, #8]
   10d54:	f7ff ff70 	bl	10c38 <_wcsnrtombs_l>
   10d58:	b004      	add	sp, #16
   10d5a:	bd10      	pop	{r4, pc}
   10d5c:	20004374 	.word	0x20004374
   10d60:	200048fc 	.word	0x200048fc

00010d64 <__smakebuf_r>:
   10d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10d68:	898b      	ldrh	r3, [r1, #12]
   10d6a:	460c      	mov	r4, r1
   10d6c:	0799      	lsls	r1, r3, #30
   10d6e:	b096      	sub	sp, #88	; 0x58
   10d70:	d508      	bpl.n	10d84 <__smakebuf_r+0x20>
   10d72:	f104 0343 	add.w	r3, r4, #67	; 0x43
   10d76:	2201      	movs	r2, #1
   10d78:	e9c4 3204 	strd	r3, r2, [r4, #16]
   10d7c:	6023      	str	r3, [r4, #0]
   10d7e:	b016      	add	sp, #88	; 0x58
   10d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10d88:	2900      	cmp	r1, #0
   10d8a:	4606      	mov	r6, r0
   10d8c:	db25      	blt.n	10dda <__smakebuf_r+0x76>
   10d8e:	466a      	mov	r2, sp
   10d90:	f000 f8ac 	bl	10eec <_fstat_r>
   10d94:	2800      	cmp	r0, #0
   10d96:	db1f      	blt.n	10dd8 <__smakebuf_r+0x74>
   10d98:	9d01      	ldr	r5, [sp, #4]
   10d9a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   10d9e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   10da2:	fab5 f585 	clz	r5, r5
   10da6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   10daa:	096d      	lsrs	r5, r5, #5
   10dac:	f44f 6700 	mov.w	r7, #2048	; 0x800
   10db0:	4641      	mov	r1, r8
   10db2:	4630      	mov	r0, r6
   10db4:	f7f9 fbce 	bl	a554 <_malloc_r>
   10db8:	b1e0      	cbz	r0, 10df4 <__smakebuf_r+0x90>
   10dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10dbe:	f8c4 8014 	str.w	r8, [r4, #20]
   10dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10dc6:	6020      	str	r0, [r4, #0]
   10dc8:	6120      	str	r0, [r4, #16]
   10dca:	81a3      	strh	r3, [r4, #12]
   10dcc:	bb35      	cbnz	r5, 10e1c <__smakebuf_r+0xb8>
   10dce:	433b      	orrs	r3, r7
   10dd0:	81a3      	strh	r3, [r4, #12]
   10dd2:	b016      	add	sp, #88	; 0x58
   10dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10dd8:	89a3      	ldrh	r3, [r4, #12]
   10dda:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   10dde:	d019      	beq.n	10e14 <__smakebuf_r+0xb0>
   10de0:	f04f 0840 	mov.w	r8, #64	; 0x40
   10de4:	2500      	movs	r5, #0
   10de6:	4641      	mov	r1, r8
   10de8:	4630      	mov	r0, r6
   10dea:	462f      	mov	r7, r5
   10dec:	f7f9 fbb2 	bl	a554 <_malloc_r>
   10df0:	2800      	cmp	r0, #0
   10df2:	d1e2      	bne.n	10dba <__smakebuf_r+0x56>
   10df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10df8:	059a      	lsls	r2, r3, #22
   10dfa:	d4c0      	bmi.n	10d7e <__smakebuf_r+0x1a>
   10dfc:	f023 0303 	bic.w	r3, r3, #3
   10e00:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10e04:	f043 0302 	orr.w	r3, r3, #2
   10e08:	2101      	movs	r1, #1
   10e0a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   10e0e:	81a3      	strh	r3, [r4, #12]
   10e10:	6022      	str	r2, [r4, #0]
   10e12:	e7b4      	b.n	10d7e <__smakebuf_r+0x1a>
   10e14:	f44f 6880 	mov.w	r8, #1024	; 0x400
   10e18:	462f      	mov	r7, r5
   10e1a:	e7c9      	b.n	10db0 <__smakebuf_r+0x4c>
   10e1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10e20:	4630      	mov	r0, r6
   10e22:	f000 f879 	bl	10f18 <_isatty_r>
   10e26:	b910      	cbnz	r0, 10e2e <__smakebuf_r+0xca>
   10e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10e2c:	e7cf      	b.n	10dce <__smakebuf_r+0x6a>
   10e2e:	89a3      	ldrh	r3, [r4, #12]
   10e30:	f023 0303 	bic.w	r3, r3, #3
   10e34:	f043 0301 	orr.w	r3, r3, #1
   10e38:	b21b      	sxth	r3, r3
   10e3a:	e7c8      	b.n	10dce <__smakebuf_r+0x6a>

00010e3c <__swbuf_r>:
   10e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e3e:	460d      	mov	r5, r1
   10e40:	4614      	mov	r4, r2
   10e42:	4606      	mov	r6, r0
   10e44:	b110      	cbz	r0, 10e4c <__swbuf_r+0x10>
   10e46:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10e48:	2b00      	cmp	r3, #0
   10e4a:	d04c      	beq.n	10ee6 <__swbuf_r+0xaa>
   10e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10e50:	69a3      	ldr	r3, [r4, #24]
   10e52:	60a3      	str	r3, [r4, #8]
   10e54:	0717      	lsls	r7, r2, #28
   10e56:	b290      	uxth	r0, r2
   10e58:	d51b      	bpl.n	10e92 <__swbuf_r+0x56>
   10e5a:	6923      	ldr	r3, [r4, #16]
   10e5c:	b1cb      	cbz	r3, 10e92 <__swbuf_r+0x56>
   10e5e:	b2ed      	uxtb	r5, r5
   10e60:	0481      	lsls	r1, r0, #18
   10e62:	462f      	mov	r7, r5
   10e64:	d522      	bpl.n	10eac <__swbuf_r+0x70>
   10e66:	6822      	ldr	r2, [r4, #0]
   10e68:	6961      	ldr	r1, [r4, #20]
   10e6a:	1ad3      	subs	r3, r2, r3
   10e6c:	4299      	cmp	r1, r3
   10e6e:	dd29      	ble.n	10ec4 <__swbuf_r+0x88>
   10e70:	3301      	adds	r3, #1
   10e72:	68a1      	ldr	r1, [r4, #8]
   10e74:	3901      	subs	r1, #1
   10e76:	60a1      	str	r1, [r4, #8]
   10e78:	1c51      	adds	r1, r2, #1
   10e7a:	6021      	str	r1, [r4, #0]
   10e7c:	7015      	strb	r5, [r2, #0]
   10e7e:	6962      	ldr	r2, [r4, #20]
   10e80:	429a      	cmp	r2, r3
   10e82:	d027      	beq.n	10ed4 <__swbuf_r+0x98>
   10e84:	89a3      	ldrh	r3, [r4, #12]
   10e86:	07db      	lsls	r3, r3, #31
   10e88:	d501      	bpl.n	10e8e <__swbuf_r+0x52>
   10e8a:	2d0a      	cmp	r5, #10
   10e8c:	d022      	beq.n	10ed4 <__swbuf_r+0x98>
   10e8e:	4638      	mov	r0, r7
   10e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e92:	4621      	mov	r1, r4
   10e94:	4630      	mov	r0, r6
   10e96:	f7ff fddf 	bl	10a58 <__swsetup_r>
   10e9a:	bb08      	cbnz	r0, 10ee0 <__swbuf_r+0xa4>
   10e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   10ea0:	6923      	ldr	r3, [r4, #16]
   10ea2:	b290      	uxth	r0, r2
   10ea4:	b2ed      	uxtb	r5, r5
   10ea6:	0481      	lsls	r1, r0, #18
   10ea8:	462f      	mov	r7, r5
   10eaa:	d4dc      	bmi.n	10e66 <__swbuf_r+0x2a>
   10eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10eb0:	81a2      	strh	r2, [r4, #12]
   10eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10eb4:	6961      	ldr	r1, [r4, #20]
   10eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   10eba:	6662      	str	r2, [r4, #100]	; 0x64
   10ebc:	6822      	ldr	r2, [r4, #0]
   10ebe:	1ad3      	subs	r3, r2, r3
   10ec0:	4299      	cmp	r1, r3
   10ec2:	dcd5      	bgt.n	10e70 <__swbuf_r+0x34>
   10ec4:	4621      	mov	r1, r4
   10ec6:	4630      	mov	r0, r6
   10ec8:	f7fd fb20 	bl	e50c <_fflush_r>
   10ecc:	b940      	cbnz	r0, 10ee0 <__swbuf_r+0xa4>
   10ece:	6822      	ldr	r2, [r4, #0]
   10ed0:	2301      	movs	r3, #1
   10ed2:	e7ce      	b.n	10e72 <__swbuf_r+0x36>
   10ed4:	4621      	mov	r1, r4
   10ed6:	4630      	mov	r0, r6
   10ed8:	f7fd fb18 	bl	e50c <_fflush_r>
   10edc:	2800      	cmp	r0, #0
   10ede:	d0d6      	beq.n	10e8e <__swbuf_r+0x52>
   10ee0:	f04f 37ff 	mov.w	r7, #4294967295
   10ee4:	e7d3      	b.n	10e8e <__swbuf_r+0x52>
   10ee6:	f7fa f9fd 	bl	b2e4 <__sinit>
   10eea:	e7af      	b.n	10e4c <__swbuf_r+0x10>

00010eec <_fstat_r>:
   10eec:	b570      	push	{r4, r5, r6, lr}
   10eee:	460c      	mov	r4, r1
   10ef0:	4d08      	ldr	r5, [pc, #32]	; (10f14 <_fstat_r+0x28>)
   10ef2:	4603      	mov	r3, r0
   10ef4:	2600      	movs	r6, #0
   10ef6:	4620      	mov	r0, r4
   10ef8:	4611      	mov	r1, r2
   10efa:	461c      	mov	r4, r3
   10efc:	602e      	str	r6, [r5, #0]
   10efe:	f7f7 ff25 	bl	8d4c <_fstat>
   10f02:	1c43      	adds	r3, r0, #1
   10f04:	d000      	beq.n	10f08 <_fstat_r+0x1c>
   10f06:	bd70      	pop	{r4, r5, r6, pc}
   10f08:	682b      	ldr	r3, [r5, #0]
   10f0a:	2b00      	cmp	r3, #0
   10f0c:	d0fb      	beq.n	10f06 <_fstat_r+0x1a>
   10f0e:	6023      	str	r3, [r4, #0]
   10f10:	bd70      	pop	{r4, r5, r6, pc}
   10f12:	bf00      	nop
   10f14:	200053dc 	.word	0x200053dc

00010f18 <_isatty_r>:
   10f18:	b538      	push	{r3, r4, r5, lr}
   10f1a:	4d07      	ldr	r5, [pc, #28]	; (10f38 <_isatty_r+0x20>)
   10f1c:	2200      	movs	r2, #0
   10f1e:	4604      	mov	r4, r0
   10f20:	4608      	mov	r0, r1
   10f22:	602a      	str	r2, [r5, #0]
   10f24:	f7f7 ff18 	bl	8d58 <_isatty>
   10f28:	1c43      	adds	r3, r0, #1
   10f2a:	d000      	beq.n	10f2e <_isatty_r+0x16>
   10f2c:	bd38      	pop	{r3, r4, r5, pc}
   10f2e:	682b      	ldr	r3, [r5, #0]
   10f30:	2b00      	cmp	r3, #0
   10f32:	d0fb      	beq.n	10f2c <_isatty_r+0x14>
   10f34:	6023      	str	r3, [r4, #0]
   10f36:	bd38      	pop	{r3, r4, r5, pc}
   10f38:	200053dc 	.word	0x200053dc
   10f3c:	00000000 	.word	0x00000000

00010f40 <___init_veneer>:
   10f40:	f85f f000 	ldr.w	pc, [pc]	; 10f44 <___init_veneer+0x4>
   10f44:	60001dfd 	.word	0x60001dfd

00010f48 <___reboot_Teensyduino__veneer>:
   10f48:	f85f f000 	ldr.w	pc, [pc]	; 10f4c <___reboot_Teensyduino__veneer+0x4>
   10f4c:	60001d55 	.word	0x60001d55

Disassembly of section .fini:

00010f50 <_fini>:
   10f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f52:	bf00      	nop
