
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc85 	bl	60001e40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc40 	bl	60001e08 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc45 	bl	60001e38 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3f 	bl	60001e30 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000111d8 	.word	0x000111d8
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60013138 	.word	0x60013138
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	00008dfd 	.word	0x00008dfd
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000a215 	.word	0x0000a215
600015f4:	20018864 	.word	0x20018864
600015f8:	0000a219 	.word	0x0000a219
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20018868 	.word	0x20018868
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9fe 	bl	60001e28 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	2001889b 	.word	0x2001889b
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018854 	.word	0x20018854
60001c50:	20018850 	.word	0x20018850
60001c54:	20018858 	.word	0x20018858
60001c58:	2001885c 	.word	0x2001885c
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	00008fd9 	.word	0x00008fd9

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8cc 	bl	60001e18 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f899 	bl	60001e10 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f891 	bl	60001e20 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	000091c1 	.word	0x000091c1

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20018895 	.word	0x20018895

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__pwm_init_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__pwm_init_veneer+0x4>
60001e0c:	0000a5a5 	.word	0x0000a5a5

60001e10 <__delay_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__delay_veneer+0x4>
60001e14:	00008b3d 	.word	0x00008b3d

60001e18 <__usb_init_serialnumber_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__usb_init_serialnumber_veneer+0x4>
60001e1c:	00009931 	.word	0x00009931

60001e20 <__memset_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__memset_veneer+0x4>
60001e24:	0000b7b5 	.word	0x0000b7b5

60001e28 <__sm_set_pool_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__sm_set_pool_veneer+0x4>
60001e2c:	0000a70d 	.word	0x0000a70d

60001e30 <__main_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__main_veneer+0x4>
60001e34:	00008c55 	.word	0x00008c55

60001e38 <____libc_init_array_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <____libc_init_array_veneer+0x4>
60001e3c:	0000ba6d 	.word	0x0000ba6d

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	0000a239 	.word	0x0000a239

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 000085f9                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	60018c00 	.word	0x60018c00

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f008 fbcd 	bl	880c <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f008 fbc7 	bl	880c <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f008 fbc1 	bl	880c <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f008 fb59 	bl	875c <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f008 fb55 	bl	875c <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f008 fb52 	bl	875c <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <OpDecoder::~OpDecoder()>:
      cc:	b510      	push	{r4, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	3020      	adds	r0, #32
	while (newdiv > 65535 && prescale < 7) {
      d2:	f008 fb43 	bl	875c <String::~String()>
      d6:	f104 0010 	add.w	r0, r4, #16
      da:	f008 fb3f 	bl	875c <String::~String()>
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      de:	4620      	mov	r0, r4
      e0:	f008 fb3c 	bl	875c <String::~String()>
        return("");
      e4:	4620      	mov	r0, r4
      e6:	bd10      	pop	{r4, pc}

000000e8 <initialize_opcode_info()>:
      e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}
      ec:	b08f      	sub	sp, #60	; 0x3c
      ee:	4ccd      	ldr	r4, [pc, #820]	; (424 <initialize_opcode_info()+0x33c>)
      f0:	49cd      	ldr	r1, [pc, #820]	; (428 <initialize_opcode_info()+0x340>)
      f2:	f240 2b03 	movw	fp, #515	; 0x203
      f6:	a801      	add	r0, sp, #4
      f8:	4dcc      	ldr	r5, [pc, #816]	; (42c <initialize_opcode_info()+0x344>)
      fa:	f008 fb6b 	bl	87d4 <String::String(char const*)>
      fe:	4621      	mov	r1, r4
     100:	a805      	add	r0, sp, #20
     102:	f8df 9368 	ldr.w	r9, [pc, #872]	; 46c <initialize_opcode_info()+0x384>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f008 fb65 	bl	87d4 <String::String(char const*)>
     10a:	49c9      	ldr	r1, [pc, #804]	; (430 <initialize_opcode_info()+0x348>)
     10c:	a809      	add	r0, sp, #36	; 0x24
     10e:	4fc9      	ldr	r7, [pc, #804]	; (434 <initialize_opcode_info()+0x34c>)
	if (newbuffer) {
     110:	f008 fb60 	bl	87d4 <String::String(char const*)>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	f240 1307 	movw	r3, #263	; 0x107
		capacity = maxStrLen;
     118:	a901      	add	r1, sp, #4
		return 1;
     11a:	4628      	mov	r0, r5
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     120:	f7ff ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	a801      	add	r0, sp, #4
	mask = p->mask;
     126:	f8df a348 	ldr.w	sl, [pc, #840]	; 470 <initialize_opcode_info()+0x388>
	if (pinmode & mask) {
     12a:	f7ff ffcf 	bl	cc <OpDecoder::~OpDecoder()>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4649      	mov	r1, r9
     130:	a801      	add	r0, sp, #4
	pinmode = *(p->reg + 1);
     132:	4ec1      	ldr	r6, [pc, #772]	; (438 <initialize_opcode_info()+0x350>)
	mask = p->mask;
     134:	f008 fb4e 	bl	87d4 <String::String(char const*)>
	if (pinmode & mask) {
     138:	49c0      	ldr	r1, [pc, #768]	; (43c <initialize_opcode_info()+0x354>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	a805      	add	r0, sp, #20
     13c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 474 <initialize_opcode_info()+0x38c>
     140:	f008 fb48 	bl	87d4 <String::String(char const*)>
     144:	4639      	mov	r1, r7
     146:	a809      	add	r0, sp, #36	; 0x24
     148:	f008 fb44 	bl	87d4 <String::String(char const*)>
     14c:	f240 2306 	movw	r3, #518	; 0x206
     150:	a901      	add	r1, sp, #4
     152:	f105 0034 	add.w	r0, r5, #52	; 0x34
     156:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     15a:	f7ff ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	aa01      	add	r2, sp, #4
     160:	4610      	mov	r0, r2
     162:	f7ff ffb3 	bl	cc <OpDecoder::~OpDecoder()>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	aa01      	add	r2, sp, #4
     168:	4649      	mov	r1, r9
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	4610      	mov	r0, r2
     16c:	f008 fb32 	bl	87d4 <String::String(char const*)>
     170:	aa05      	add	r2, sp, #20
     172:	4651      	mov	r1, sl
     174:	4610      	mov	r0, r2
     176:	f008 fb2d 	bl	87d4 <String::String(char const*)>
     17a:	aa09      	add	r2, sp, #36	; 0x24
     17c:	4639      	mov	r1, r7
     17e:	4610      	mov	r0, r2
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	f008 fb28 	bl	87d4 <String::String(char const*)>
     184:	a901      	add	r1, sp, #4
     186:	f505 7082 	add.w	r0, r5, #260	; 0x104
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     18a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     18e:	f7ff ff6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     192:	aa01      	add	r2, sp, #4
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 478 <initialize_opcode_info()+0x390>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4610      	mov	r0, r2
     19a:	f7ff ff97 	bl	cc <OpDecoder::~OpDecoder()>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     19e:	aa01      	add	r2, sp, #4
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1a0:	4659      	mov	r1, fp
     1a2:	4610      	mov	r0, r2
     1a4:	f008 fb16 	bl	87d4 <String::String(char const*)>
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	aa05      	add	r2, sp, #20
     1aa:	4651      	mov	r1, sl
     1ac:	4610      	mov	r0, r2
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1ae:	f008 fb11 	bl	87d4 <String::String(char const*)>
     1b2:	aa09      	add	r2, sp, #36	; 0x24
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b4:	4631      	mov	r1, r6
	port->CTRL = ctrl;
     1b6:	4610      	mov	r0, r2
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	f008 fb0c 	bl	87d4 <String::String(char const*)>
     1bc:	f240 2205 	movw	r2, #517	; 0x205
     1c0:	a901      	add	r1, sp, #4

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c2:	f505 709c 	add.w	r0, r5, #312	; 0x138
     1c6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ca:	f7ff ff4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     1ce:	a901      	add	r1, sp, #4
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d0:	4608      	mov	r0, r1
	port->STAT = c;
     1d2:	f7ff ff7b 	bl	cc <OpDecoder::~OpDecoder()>
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d6:	499a      	ldr	r1, [pc, #616]	; (440 <initialize_opcode_info()+0x358>)
     1d8:	a801      	add	r0, sp, #4
     1da:	f008 fafb 	bl	87d4 <String::String(char const*)>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1de:	4621      	mov	r1, r4
     1e0:	a805      	add	r0, sp, #20
     1e2:	f008 faf7 	bl	87d4 <String::String(char const*)>
};
     1e6:	4621      	mov	r1, r4
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	a809      	add	r0, sp, #36	; 0x24
     1ea:	f008 faf3 	bl	87d4 <String::String(char const*)>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	f240 1203 	movw	r2, #259	; 0x103
     1f2:	a901      	add	r1, sp, #4
     1f4:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     1f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     1fc:	f7ff ff34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     200:	a901      	add	r1, sp, #4
     202:	4608      	mov	r0, r1
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	f7ff ff62 	bl	cc <OpDecoder::~OpDecoder()>
     208:	4649      	mov	r1, r9
     20a:	a801      	add	r0, sp, #4
     20c:	f008 fae2 	bl	87d4 <String::String(char const*)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	a905      	add	r1, sp, #20
     212:	4608      	mov	r0, r1
     214:	498b      	ldr	r1, [pc, #556]	; (444 <initialize_opcode_info()+0x35c>)
     216:	f008 fadd 	bl	87d4 <String::String(char const*)>
     21a:	4639      	mov	r1, r7
     21c:	a809      	add	r0, sp, #36	; 0x24
     21e:	f008 fad9 	bl	87d4 <String::String(char const*)>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	f240 2302 	movw	r3, #514	; 0x202
     226:	a901      	add	r1, sp, #4
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	f7ff ff1a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     234:	a801      	add	r0, sp, #4
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	f7ff ff49 	bl	cc <OpDecoder::~OpDecoder()>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	4659      	mov	r1, fp
     23c:	a801      	add	r0, sp, #4
     23e:	f008 fac9 	bl	87d4 <String::String(char const*)>
};
     242:	4b81      	ldr	r3, [pc, #516]	; (448 <initialize_opcode_info()+0x360>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	a805      	add	r0, sp, #20
     246:	4619      	mov	r1, r3
     248:	f008 fac4 	bl	87d4 <String::String(char const*)>
     24c:	4631      	mov	r1, r6
     24e:	a809      	add	r0, sp, #36	; 0x24
     250:	f008 fac0 	bl	87d4 <String::String(char const*)>
     254:	f44f 7381 	mov.w	r3, #258	; 0x102
     258:	a901      	add	r1, sp, #4
     25a:	f505 7002 	add.w	r0, r5, #520	; 0x208
     25e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     262:	f7ff ff01 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     266:	a801      	add	r0, sp, #4
     268:	f7ff ff30 	bl	cc <OpDecoder::~OpDecoder()>
     26c:	4649      	mov	r1, r9
     26e:	a801      	add	r0, sp, #4
     270:	f008 fab0 	bl	87d4 <String::String(char const*)>
     274:	4641      	mov	r1, r8
     276:	a805      	add	r0, sp, #20

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     278:	f008 faac 	bl	87d4 <String::String(char const*)>
				val *= 10.0f;
     27c:	4639      	mov	r1, r7
     27e:	a809      	add	r0, sp, #36	; 0x24
			while (newPrecision > 0) {
     280:	f008 faa8 	bl	87d4 <String::String(char const*)>
				val *= 10.0f;
     284:	f44f 7341 	mov.w	r3, #772	; 0x304
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     288:	a901      	add	r1, sp, #4
     28a:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
     28e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     292:	f7ff fee9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	a801      	add	r0, sp, #4
     298:	f7ff ff18 	bl	cc <OpDecoder::~OpDecoder()>
     29c:	4659      	mov	r1, fp
     29e:	a801      	add	r0, sp, #4
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     2a0:	f008 fa98 	bl	87d4 <String::String(char const*)>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     2a4:	4641      	mov	r1, r8
     2a6:	a805      	add	r0, sp, #20
     2a8:	f008 fa94 	bl	87d4 <String::String(char const*)>
     2ac:	4631      	mov	r1, r6
     2ae:	a809      	add	r0, sp, #36	; 0x24
     2b0:	f008 fa90 	bl	87d4 <String::String(char const*)>
     2b4:	f240 3e06 	movw	lr, #774	; 0x306
		int ndigs = (val<0) ? 4 : 3;
     2b8:	a901      	add	r1, sp, #4
     2ba:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
     2be:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     2c2:	f7ff fed1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c6:	a801      	add	r0, sp, #4
		if (width<0) {
     2c8:	f7ff ff00 	bl	cc <OpDecoder::~OpDecoder()>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2cc:	495f      	ldr	r1, [pc, #380]	; (44c <initialize_opcode_info()+0x364>)
		if (width<0) {
     2ce:	a801      	add	r0, sp, #4
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d0:	f008 fa80 	bl	87d4 <String::String(char const*)>
     2d4:	495e      	ldr	r1, [pc, #376]	; (450 <initialize_opcode_info()+0x368>)
     2d6:	a805      	add	r0, sp, #20
     2d8:	f008 fa7c 	bl	87d4 <String::String(char const*)>
     2dc:	4621      	mov	r1, r4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2de:	a809      	add	r0, sp, #36	; 0x24
     2e0:	f008 fa78 	bl	87d4 <String::String(char const*)>
     2e4:	f240 2102 	movw	r1, #514	; 0x202
     2e8:	f505 7050 	add.w	r0, r5, #832	; 0x340
		while (awidth) {
     2ec:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     2f0:	a901      	add	r1, sp, #4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	f7ff feb9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     2f6:	a801      	add	r0, sp, #4
     2f8:	f7ff fee8 	bl	cc <OpDecoder::~OpDecoder()>
     2fc:	4649      	mov	r1, r9
     2fe:	a801      	add	r0, sp, #4
		while (awidth) {
     300:	f008 fa68 	bl	87d4 <String::String(char const*)>
				*buf++ = ' ';
     304:	a805      	add	r0, sp, #20
     306:	4953      	ldr	r1, [pc, #332]	; (454 <initialize_opcode_info()+0x36c>)
     308:	f008 fa64 	bl	87d4 <String::String(char const*)>
     30c:	4639      	mov	r1, r7
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     30e:	a809      	add	r0, sp, #36	; 0x24
     310:	f008 fa60 	bl	87d4 <String::String(char const*)>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     314:	aa01      	add	r2, sp, #4
     316:	f240 2c05 	movw	ip, #517	; 0x205
     31a:	f505 705d 	add.w	r0, r5, #884	; 0x374
     31e:	4611      	mov	r1, r2
     320:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
		while (awidth) {
     324:	f7ff fea0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	a801      	add	r0, sp, #4
     32a:	f7ff fecf 	bl	cc <OpDecoder::~OpDecoder()>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	4649      	mov	r1, r9
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     330:	a801      	add	r0, sp, #4
     332:	f008 fa4f 	bl	87d4 <String::String(char const*)>
		if (val<0) *buf++ = '-';
     336:	4948      	ldr	r1, [pc, #288]	; (458 <initialize_opcode_info()+0x370>)
     338:	a805      	add	r0, sp, #20
     33a:	f008 fa4b 	bl	87d4 <String::String(char const*)>
     33e:	4639      	mov	r1, r7
     340:	a809      	add	r0, sp, #36	; 0x24
     342:	f008 fa47 	bl	87d4 <String::String(char const*)>
     346:	aa01      	add	r2, sp, #4
     348:	f44f 7c01 	mov.w	ip, #516	; 0x204
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     34c:	f205 4044 	addw	r0, r5, #1092	; 0x444
     350:	4611      	mov	r1, r2
     352:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     356:	f7ff fe87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     35a:	a801      	add	r0, sp, #4
     35c:	f7ff feb6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     360:	4659      	mov	r1, fp
     362:	a801      	add	r0, sp, #4
     364:	f008 fa36 	bl	87d4 <String::String(char const*)>
     368:	493b      	ldr	r1, [pc, #236]	; (458 <initialize_opcode_info()+0x370>)
     36a:	a805      	add	r0, sp, #20
     36c:	f008 fa32 	bl	87d4 <String::String(char const*)>
     370:	4631      	mov	r1, r6
     372:	a809      	add	r0, sp, #36	; 0x24
     374:	f008 fa2e 	bl	87d4 <String::String(char const*)>
     378:	aa01      	add	r2, sp, #4
     37a:	f240 2006 	movw	r0, #518	; 0x206
     37e:	4611      	mov	r1, r2
     380:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     384:	f505 608f 	add.w	r0, r5, #1144	; 0x478
     388:	f7ff fe6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     38c:	aa01      	add	r2, sp, #4
     38e:	4610      	mov	r0, r2
     390:	f7ff fe9c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     394:	aa01      	add	r2, sp, #4
     396:	4931      	ldr	r1, [pc, #196]	; (45c <initialize_opcode_info()+0x374>)
     398:	4610      	mov	r0, r2
     39a:	f008 fa1b 	bl	87d4 <String::String(char const*)>
     39e:	aa05      	add	r2, sp, #20
     3a0:	4621      	mov	r1, r4
     3a2:	4610      	mov	r0, r2
     3a4:	f008 fa16 	bl	87d4 <String::String(char const*)>
     3a8:	aa09      	add	r2, sp, #36	; 0x24
     3aa:	492d      	ldr	r1, [pc, #180]	; (460 <initialize_opcode_info()+0x378>)
     3ac:	4610      	mov	r0, r2
     3ae:	f008 fa11 	bl	87d4 <String::String(char const*)>
     3b2:	f44f 7281 	mov.w	r2, #258	; 0x102
     3b6:	a901      	add	r1, sp, #4
     3b8:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
     3bc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     3c0:	f7ff fe52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3c4:	a801      	add	r0, sp, #4
     3c6:	f7ff fe81 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     3ca:	4649      	mov	r1, r9
     3cc:	a801      	add	r0, sp, #4
     3ce:	f008 fa01 	bl	87d4 <String::String(char const*)>
     3d2:	a805      	add	r0, sp, #20
     3d4:	4923      	ldr	r1, [pc, #140]	; (464 <initialize_opcode_info()+0x37c>)
     3d6:	f008 f9fd 	bl	87d4 <String::String(char const*)>
     3da:	4639      	mov	r1, r7
     3dc:	a809      	add	r0, sp, #36	; 0x24
     3de:	f008 f9f9 	bl	87d4 <String::String(char const*)>
     3e2:	f44f 7341 	mov.w	r3, #772	; 0x304
     3e6:	a901      	add	r1, sp, #4
     3e8:	f205 5014 	addw	r0, r5, #1300	; 0x514
     3ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     3f0:	f7ff fe3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3f4:	a801      	add	r0, sp, #4
     3f6:	f7ff fe69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     3fa:	4649      	mov	r1, r9
     3fc:	a801      	add	r0, sp, #4
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     3fe:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     402:	f008 f9e7 	bl	87d4 <String::String(char const*)>
     406:	4918      	ldr	r1, [pc, #96]	; (468 <initialize_opcode_info()+0x380>)
     408:	a805      	add	r0, sp, #20
     40a:	f008 f9e3 	bl	87d4 <String::String(char const*)>
     40e:	4639      	mov	r1, r7
     410:	a809      	add	r0, sp, #36	; 0x24
     412:	f008 f9df 	bl	87d4 <String::String(char const*)>
     416:	f44f 7341 	mov.w	r3, #772	; 0x304
     41a:	a901      	add	r1, sp, #4
     41c:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
     420:	e02c      	b.n	47c <initialize_opcode_info()+0x394>
     422:	bf00      	nop
     424:	20000488 	.word	0x20000488
     428:	200008a0 	.word	0x200008a0
     42c:	20015418 	.word	0x20015418
     430:	200008a4 	.word	0x200008a4
     434:	200008b4 	.word	0x200008b4
     438:	200008c0 	.word	0x200008c0
     43c:	200008ac 	.word	0x200008ac
     440:	200008c4 	.word	0x200008c4
     444:	200008c8 	.word	0x200008c8
     448:	200008cc 	.word	0x200008cc
     44c:	200008d4 	.word	0x200008d4
     450:	200008d8 	.word	0x200008d8
     454:	200008dc 	.word	0x200008dc
     458:	200008e4 	.word	0x200008e4
     45c:	200008ec 	.word	0x200008ec
     460:	200008f0 	.word	0x200008f0
     464:	200008f4 	.word	0x200008f4
     468:	200008fc 	.word	0x200008fc
     46c:	200008a8 	.word	0x200008a8
     470:	200008b8 	.word	0x200008b8
     474:	200008d0 	.word	0x200008d0
     478:	200008bc 	.word	0x200008bc
     47c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     480:	f7ff fdf2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     484:	a801      	add	r0, sp, #4
     486:	f7ff fe21 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     48a:	4659      	mov	r1, fp
     48c:	a801      	add	r0, sp, #4
	opcode_info[0x20] = {"JSR","abs","",6,3};
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     48e:	f240 2b03 	movw	fp, #515	; 0x203
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     492:	f008 f99f 	bl	87d4 <String::String(char const*)>
     496:	49d0      	ldr	r1, [pc, #832]	; (7d8 <initialize_opcode_info()+0x6f0>)
     498:	a805      	add	r0, sp, #20
     49a:	f008 f99b 	bl	87d4 <String::String(char const*)>
     49e:	4631      	mov	r1, r6
     4a0:	a809      	add	r0, sp, #36	; 0x24
     4a2:	f008 f997 	bl	87d4 <String::String(char const*)>
     4a6:	a901      	add	r1, sp, #4
     4a8:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
     4ac:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     4b0:	f7ff fdda 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4b4:	a801      	add	r0, sp, #4
     4b6:	f7ff fe09 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     4ba:	49c8      	ldr	r1, [pc, #800]	; (7dc <initialize_opcode_info()+0x6f4>)
     4bc:	a801      	add	r0, sp, #4
     4be:	f240 3906 	movw	r9, #774	; 0x306
     4c2:	f008 f987 	bl	87d4 <String::String(char const*)>
     4c6:	4641      	mov	r1, r8
     4c8:	a805      	add	r0, sp, #20
     4ca:	f008 f983 	bl	87d4 <String::String(char const*)>
     4ce:	4621      	mov	r1, r4
     4d0:	a809      	add	r0, sp, #36	; 0x24
     4d2:	f008 f97f 	bl	87d4 <String::String(char const*)>
     4d6:	a901      	add	r1, sp, #4
     4d8:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
     4dc:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     4e0:	f8df 932c 	ldr.w	r9, [pc, #812]	; 810 <initialize_opcode_info()+0x728>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     4e4:	f7ff fdc0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4e8:	a801      	add	r0, sp, #4
     4ea:	f7ff fdef 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     4ee:	4649      	mov	r1, r9
     4f0:	a801      	add	r0, sp, #4
     4f2:	f008 f96f 	bl	87d4 <String::String(char const*)>
     4f6:	49ba      	ldr	r1, [pc, #744]	; (7e0 <initialize_opcode_info()+0x6f8>)
     4f8:	a805      	add	r0, sp, #20
     4fa:	f008 f96b 	bl	87d4 <String::String(char const*)>
     4fe:	4639      	mov	r1, r7
     500:	a809      	add	r0, sp, #36	; 0x24
     502:	f008 f967 	bl	87d4 <String::String(char const*)>
     506:	f240 2006 	movw	r0, #518	; 0x206
     50a:	a901      	add	r1, sp, #4
     50c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     510:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     514:	f7ff fda8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     518:	f10d 0e04 	add.w	lr, sp, #4
     51c:	4670      	mov	r0, lr
     51e:	f7ff fdd5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     522:	f10d 0e04 	add.w	lr, sp, #4
     526:	49af      	ldr	r1, [pc, #700]	; (7e4 <initialize_opcode_info()+0x6fc>)
     528:	4670      	mov	r0, lr
     52a:	f008 f953 	bl	87d4 <String::String(char const*)>
     52e:	f10d 0e14 	add.w	lr, sp, #20
     532:	4651      	mov	r1, sl
     534:	4670      	mov	r0, lr
     536:	f008 f94d 	bl	87d4 <String::String(char const*)>
     53a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     53e:	49aa      	ldr	r1, [pc, #680]	; (7e8 <initialize_opcode_info()+0x700>)
     540:	4670      	mov	r0, lr
     542:	f008 f947 	bl	87d4 <String::String(char const*)>
     546:	a901      	add	r1, sp, #4
     548:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
     54c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     550:	f7ff fd8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     554:	f10d 0e04 	add.w	lr, sp, #4
     558:	4670      	mov	r0, lr
     55a:	f7ff fdb7 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     55e:	f10d 0e04 	add.w	lr, sp, #4
     562:	4649      	mov	r1, r9
     564:	4670      	mov	r0, lr
     566:	f008 f935 	bl	87d4 <String::String(char const*)>
     56a:	f10d 0e14 	add.w	lr, sp, #20
     56e:	4651      	mov	r1, sl
     570:	4670      	mov	r0, lr
     572:	f008 f92f 	bl	87d4 <String::String(char const*)>
     576:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     57a:	4639      	mov	r1, r7
     57c:	4670      	mov	r0, lr
     57e:	f008 f929 	bl	87d4 <String::String(char const*)>
     582:	a901      	add	r1, sp, #4
     584:	f205 7084 	addw	r0, r5, #1924	; 0x784
     588:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     58c:	f8df b284 	ldr.w	fp, [pc, #644]	; 814 <initialize_opcode_info()+0x72c>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     590:	f7ff fd6a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     594:	a801      	add	r0, sp, #4
     596:	f7ff fd99 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     59a:	4659      	mov	r1, fp
     59c:	a801      	add	r0, sp, #4
     59e:	f008 f919 	bl	87d4 <String::String(char const*)>
     5a2:	4651      	mov	r1, sl
     5a4:	a805      	add	r0, sp, #20
     5a6:	f008 f915 	bl	87d4 <String::String(char const*)>
     5aa:	4631      	mov	r1, r6
     5ac:	a809      	add	r0, sp, #36	; 0x24
     5ae:	f008 f911 	bl	87d4 <String::String(char const*)>
     5b2:	f240 2e05 	movw	lr, #517	; 0x205
     5b6:	a901      	add	r1, sp, #4
     5b8:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
     5bc:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     5c0:	f7ff fd52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5c4:	a801      	add	r0, sp, #4
     5c6:	f7ff fd81 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     5ca:	4988      	ldr	r1, [pc, #544]	; (7ec <initialize_opcode_info()+0x704>)
     5cc:	a801      	add	r0, sp, #4
     5ce:	f008 f901 	bl	87d4 <String::String(char const*)>
     5d2:	4621      	mov	r1, r4
     5d4:	a805      	add	r0, sp, #20
     5d6:	f008 f8fd 	bl	87d4 <String::String(char const*)>
     5da:	4621      	mov	r1, r4
     5dc:	a809      	add	r0, sp, #36	; 0x24
     5de:	f008 f8f9 	bl	87d4 <String::String(char const*)>
     5e2:	f44f 7182 	mov.w	r1, #260	; 0x104
     5e6:	f505 6002 	add.w	r0, r5, #2080	; 0x820
     5ea:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     5ee:	a901      	add	r1, sp, #4
     5f0:	f7ff fd3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5f4:	a801      	add	r0, sp, #4
     5f6:	f7ff fd69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     5fa:	4649      	mov	r1, r9
     5fc:	a801      	add	r0, sp, #4
     5fe:	f008 f8e9 	bl	87d4 <String::String(char const*)>
     602:	497b      	ldr	r1, [pc, #492]	; (7f0 <initialize_opcode_info()+0x708>)
     604:	a805      	add	r0, sp, #20
     606:	f008 f8e5 	bl	87d4 <String::String(char const*)>
     60a:	4639      	mov	r1, r7
     60c:	a809      	add	r0, sp, #36	; 0x24
     60e:	f008 f8e1 	bl	87d4 <String::String(char const*)>
     612:	f240 2102 	movw	r1, #514	; 0x202
     616:	f605 0054 	addw	r0, r5, #2132	; 0x854
     61a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     61e:	a901      	add	r1, sp, #4
     620:	f7ff fd22 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     624:	a801      	add	r0, sp, #4
     626:	f7ff fd51 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     62a:	4659      	mov	r1, fp
     62c:	a801      	add	r0, sp, #4
     62e:	f008 f8d1 	bl	87d4 <String::String(char const*)>
     632:	4b70      	ldr	r3, [pc, #448]	; (7f4 <initialize_opcode_info()+0x70c>)
     634:	a805      	add	r0, sp, #20
     636:	4619      	mov	r1, r3
     638:	f008 f8cc 	bl	87d4 <String::String(char const*)>
     63c:	4631      	mov	r1, r6
     63e:	a809      	add	r0, sp, #36	; 0x24
     640:	f008 f8c8 	bl	87d4 <String::String(char const*)>
     644:	f44f 7281 	mov.w	r2, #258	; 0x102
     648:	a901      	add	r1, sp, #4
     64a:	f605 0088 	addw	r0, r5, #2184	; 0x888
     64e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     652:	f7ff fd09 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     656:	a801      	add	r0, sp, #4
     658:	f7ff fd38 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     65c:	4961      	ldr	r1, [pc, #388]	; (7e4 <initialize_opcode_info()+0x6fc>)
     65e:	a801      	add	r0, sp, #4
     660:	f008 f8b8 	bl	87d4 <String::String(char const*)>
     664:	4641      	mov	r1, r8
     666:	a805      	add	r0, sp, #20
     668:	f008 f8b4 	bl	87d4 <String::String(char const*)>
     66c:	495e      	ldr	r1, [pc, #376]	; (7e8 <initialize_opcode_info()+0x700>)
     66e:	a809      	add	r0, sp, #36	; 0x24
     670:	f008 f8b0 	bl	87d4 <String::String(char const*)>
     674:	f44f 7341 	mov.w	r3, #772	; 0x304
     678:	a901      	add	r1, sp, #4
     67a:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
     67e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     682:	f7ff fcf1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     686:	a801      	add	r0, sp, #4
     688:	f7ff fd20 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     68c:	4649      	mov	r1, r9
     68e:	a801      	add	r0, sp, #4
     690:	f008 f8a0 	bl	87d4 <String::String(char const*)>
     694:	4641      	mov	r1, r8
     696:	a805      	add	r0, sp, #20
     698:	f008 f89c 	bl	87d4 <String::String(char const*)>
     69c:	4639      	mov	r1, r7
     69e:	a809      	add	r0, sp, #36	; 0x24
     6a0:	f008 f898 	bl	87d4 <String::String(char const*)>
     6a4:	f44f 7341 	mov.w	r3, #772	; 0x304
     6a8:	a901      	add	r1, sp, #4
     6aa:	f605 1024 	addw	r0, r5, #2340	; 0x924
     6ae:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     6b2:	f7ff fcd9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6b6:	a801      	add	r0, sp, #4
     6b8:	f7ff fd08 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     6bc:	4659      	mov	r1, fp
     6be:	a801      	add	r0, sp, #4
     6c0:	f008 f888 	bl	87d4 <String::String(char const*)>
     6c4:	4641      	mov	r1, r8
     6c6:	a805      	add	r0, sp, #20
     6c8:	f008 f884 	bl	87d4 <String::String(char const*)>
     6cc:	4631      	mov	r1, r6
     6ce:	a809      	add	r0, sp, #36	; 0x24
     6d0:	f008 f880 	bl	87d4 <String::String(char const*)>
     6d4:	f240 3206 	movw	r2, #774	; 0x306
     6d8:	a901      	add	r1, sp, #4
     6da:	f605 1058 	addw	r0, r5, #2392	; 0x958
     6de:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     6e2:	f7ff fcc1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6e6:	a801      	add	r0, sp, #4
     6e8:	f7ff fcf0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     6ec:	4942      	ldr	r1, [pc, #264]	; (7f8 <initialize_opcode_info()+0x710>)
     6ee:	a801      	add	r0, sp, #4
     6f0:	f008 f870 	bl	87d4 <String::String(char const*)>
     6f4:	4941      	ldr	r1, [pc, #260]	; (7fc <initialize_opcode_info()+0x714>)
     6f6:	a805      	add	r0, sp, #20
     6f8:	f008 f86c 	bl	87d4 <String::String(char const*)>
     6fc:	4621      	mov	r1, r4
     6fe:	a809      	add	r0, sp, #36	; 0x24
     700:	f008 f868 	bl	87d4 <String::String(char const*)>
     704:	f240 2102 	movw	r1, #514	; 0x202
     708:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
     70c:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     710:	a901      	add	r1, sp, #4
     712:	f7ff fca9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     716:	a801      	add	r0, sp, #4
     718:	f7ff fcd8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     71c:	4649      	mov	r1, r9
     71e:	a801      	add	r0, sp, #4
     720:	f008 f858 	bl	87d4 <String::String(char const*)>
     724:	4936      	ldr	r1, [pc, #216]	; (800 <initialize_opcode_info()+0x718>)
     726:	a805      	add	r0, sp, #20
     728:	f008 f854 	bl	87d4 <String::String(char const*)>
     72c:	4639      	mov	r1, r7
     72e:	a809      	add	r0, sp, #36	; 0x24
     730:	f008 f850 	bl	87d4 <String::String(char const*)>
     734:	f240 2e05 	movw	lr, #517	; 0x205
     738:	a901      	add	r1, sp, #4
     73a:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
     73e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     742:	f7ff fc91 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     746:	a801      	add	r0, sp, #4
     748:	f7ff fcc0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     74c:	4649      	mov	r1, r9
     74e:	a801      	add	r0, sp, #4
     750:	f008 f840 	bl	87d4 <String::String(char const*)>
     754:	492b      	ldr	r1, [pc, #172]	; (804 <initialize_opcode_info()+0x71c>)
     756:	a805      	add	r0, sp, #20
     758:	f008 f83c 	bl	87d4 <String::String(char const*)>
     75c:	4639      	mov	r1, r7
     75e:	a809      	add	r0, sp, #36	; 0x24
     760:	f008 f838 	bl	87d4 <String::String(char const*)>
     764:	f44f 7c01 	mov.w	ip, #516	; 0x204
     768:	a901      	add	r1, sp, #4
     76a:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
     76e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     772:	f7ff fc79 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     776:	a801      	add	r0, sp, #4
     778:	f7ff fca8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     77c:	4659      	mov	r1, fp
     77e:	a801      	add	r0, sp, #4
     780:	f008 f828 	bl	87d4 <String::String(char const*)>
     784:	491f      	ldr	r1, [pc, #124]	; (804 <initialize_opcode_info()+0x71c>)
     786:	a805      	add	r0, sp, #20
     788:	f008 f824 	bl	87d4 <String::String(char const*)>
     78c:	4631      	mov	r1, r6
     78e:	a809      	add	r0, sp, #36	; 0x24
     790:	f008 f820 	bl	87d4 <String::String(char const*)>
     794:	f240 2006 	movw	r0, #518	; 0x206
     798:	a901      	add	r1, sp, #4
     79a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     79e:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
     7a2:	f7ff fc61 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7a6:	a801      	add	r0, sp, #4
     7a8:	f7ff fc90 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     7ac:	4916      	ldr	r1, [pc, #88]	; (808 <initialize_opcode_info()+0x720>)
     7ae:	a801      	add	r0, sp, #4
     7b0:	f008 f810 	bl	87d4 <String::String(char const*)>
     7b4:	4621      	mov	r1, r4
     7b6:	a805      	add	r0, sp, #20
     7b8:	f008 f80c 	bl	87d4 <String::String(char const*)>
     7bc:	4913      	ldr	r1, [pc, #76]	; (80c <initialize_opcode_info()+0x724>)
     7be:	a809      	add	r0, sp, #36	; 0x24
     7c0:	f008 f808 	bl	87d4 <String::String(char const*)>
     7c4:	f44f 7281 	mov.w	r2, #258	; 0x102
     7c8:	a901      	add	r1, sp, #4
     7ca:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
     7ce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     7d2:	f7ff fc49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7d6:	e01f      	b.n	818 <initialize_opcode_info()+0x730>
     7d8:	200008fc 	.word	0x200008fc
     7dc:	20000904 	.word	0x20000904
     7e0:	200008ac 	.word	0x200008ac
     7e4:	2000090c 	.word	0x2000090c
     7e8:	20000910 	.word	0x20000910
     7ec:	20000918 	.word	0x20000918
     7f0:	200008c8 	.word	0x200008c8
     7f4:	200008cc 	.word	0x200008cc
     7f8:	2000091c 	.word	0x2000091c
     7fc:	200008d8 	.word	0x200008d8
     800:	200008dc 	.word	0x200008dc
     804:	200008e4 	.word	0x200008e4
     808:	20000920 	.word	0x20000920
     80c:	200008f0 	.word	0x200008f0
     810:	20000908 	.word	0x20000908
     814:	20000914 	.word	0x20000914
     818:	a801      	add	r0, sp, #4
     81a:	f7ff fc57 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     81e:	4649      	mov	r1, r9
     820:	a801      	add	r0, sp, #4
     822:	f007 ffd7 	bl	87d4 <String::String(char const*)>
     826:	49cb      	ldr	r1, [pc, #812]	; (b54 <initialize_opcode_info()+0xa6c>)
     828:	a805      	add	r0, sp, #20
     82a:	f007 ffd3 	bl	87d4 <String::String(char const*)>
     82e:	4639      	mov	r1, r7
     830:	a809      	add	r0, sp, #36	; 0x24
     832:	f007 ffcf 	bl	87d4 <String::String(char const*)>
     836:	f44f 7341 	mov.w	r3, #772	; 0x304
     83a:	a901      	add	r1, sp, #4
     83c:	f605 3094 	addw	r0, r5, #2964	; 0xb94
     840:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     844:	f7ff fc10 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     848:	a801      	add	r0, sp, #4
     84a:	f7ff fc3f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     84e:	4649      	mov	r1, r9
     850:	a801      	add	r0, sp, #4
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     852:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     856:	f007 ffbd 	bl	87d4 <String::String(char const*)>
     85a:	49bf      	ldr	r1, [pc, #764]	; (b58 <initialize_opcode_info()+0xa70>)
     85c:	a805      	add	r0, sp, #20
     85e:	f007 ffb9 	bl	87d4 <String::String(char const*)>
     862:	4639      	mov	r1, r7
     864:	a809      	add	r0, sp, #36	; 0x24
     866:	f007 ffb5 	bl	87d4 <String::String(char const*)>
     86a:	f44f 7341 	mov.w	r3, #772	; 0x304
     86e:	a901      	add	r1, sp, #4
     870:	f605 4064 	addw	r0, r5, #3172	; 0xc64
     874:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     878:	f7ff fbf6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     87c:	a801      	add	r0, sp, #4
     87e:	f7ff fc25 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     882:	4659      	mov	r1, fp
     884:	a801      	add	r0, sp, #4
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     886:	f8df b304 	ldr.w	fp, [pc, #772]	; b8c <initialize_opcode_info()+0xaa4>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     88a:	f007 ffa3 	bl	87d4 <String::String(char const*)>
     88e:	49b2      	ldr	r1, [pc, #712]	; (b58 <initialize_opcode_info()+0xa70>)
     890:	a805      	add	r0, sp, #20
     892:	f007 ff9f 	bl	87d4 <String::String(char const*)>
     896:	4631      	mov	r1, r6
     898:	a809      	add	r0, sp, #36	; 0x24
     89a:	f007 ff9b 	bl	87d4 <String::String(char const*)>
     89e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     8a2:	f605 4998 	addw	r9, r5, #3224	; 0xc98
     8a6:	a901      	add	r1, sp, #4
     8a8:	4648      	mov	r0, r9
     8aa:	f7ff fbdd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8ae:	a801      	add	r0, sp, #4
     8b0:	f7ff fc0c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     8b4:	49a9      	ldr	r1, [pc, #676]	; (b5c <initialize_opcode_info()+0xa74>)
     8b6:	a801      	add	r0, sp, #4
     8b8:	f007 ff8c 	bl	87d4 <String::String(char const*)>
     8bc:	4621      	mov	r1, r4
     8be:	a805      	add	r0, sp, #20
     8c0:	f007 ff88 	bl	87d4 <String::String(char const*)>
     8c4:	49a6      	ldr	r1, [pc, #664]	; (b60 <initialize_opcode_info()+0xa78>)
     8c6:	a809      	add	r0, sp, #36	; 0x24
     8c8:	f007 ff84 	bl	87d4 <String::String(char const*)>
     8cc:	f44f 7383 	mov.w	r3, #262	; 0x106
     8d0:	a901      	add	r1, sp, #4
     8d2:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
     8d6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     8da:	f7ff fbc5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8de:	a801      	add	r0, sp, #4
     8e0:	f7ff fbf4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     8e4:	4659      	mov	r1, fp
     8e6:	a801      	add	r0, sp, #4
     8e8:	f007 ff74 	bl	87d4 <String::String(char const*)>
     8ec:	499d      	ldr	r1, [pc, #628]	; (b64 <initialize_opcode_info()+0xa7c>)
     8ee:	a805      	add	r0, sp, #20
     8f0:	f007 ff70 	bl	87d4 <String::String(char const*)>
     8f4:	4639      	mov	r1, r7
     8f6:	a809      	add	r0, sp, #36	; 0x24
     8f8:	f007 ff6c 	bl	87d4 <String::String(char const*)>
     8fc:	f240 2006 	movw	r0, #518	; 0x206
     900:	a901      	add	r1, sp, #4
     902:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     906:	f605 5034 	addw	r0, r5, #3380	; 0xd34
     90a:	f7ff fbad 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     90e:	a801      	add	r0, sp, #4
     910:	f7ff fbdc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     914:	4659      	mov	r1, fp
     916:	a801      	add	r0, sp, #4
     918:	f007 ff5c 	bl	87d4 <String::String(char const*)>
     91c:	4651      	mov	r1, sl
     91e:	a805      	add	r0, sp, #20
     920:	f007 ff58 	bl	87d4 <String::String(char const*)>
     924:	4639      	mov	r1, r7
     926:	a809      	add	r0, sp, #36	; 0x24
     928:	f007 ff54 	bl	87d4 <String::String(char const*)>
     92c:	f240 2e03 	movw	lr, #515	; 0x203
     930:	a901      	add	r1, sp, #4
     932:	f605 6004 	addw	r0, r5, #3588	; 0xe04
     936:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     93a:	f7ff fb95 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     93e:	a801      	add	r0, sp, #4
     940:	f7ff fbc4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     944:	4988      	ldr	r1, [pc, #544]	; (b68 <initialize_opcode_info()+0xa80>)
     946:	a801      	add	r0, sp, #4
     948:	f007 ff44 	bl	87d4 <String::String(char const*)>
     94c:	4651      	mov	r1, sl
     94e:	a805      	add	r0, sp, #20
     950:	f007 ff40 	bl	87d4 <String::String(char const*)>
     954:	4631      	mov	r1, r6
     956:	a809      	add	r0, sp, #36	; 0x24
     958:	f007 ff3c 	bl	87d4 <String::String(char const*)>
     95c:	f240 2e05 	movw	lr, #517	; 0x205
     960:	a901      	add	r1, sp, #4
     962:	f605 6038 	addw	r0, r5, #3640	; 0xe38
     966:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     96a:	f7ff fb7d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     96e:	a801      	add	r0, sp, #4
     970:	f7ff fbac 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     974:	497d      	ldr	r1, [pc, #500]	; (b6c <initialize_opcode_info()+0xa84>)
     976:	a801      	add	r0, sp, #4
     978:	f007 ff2c 	bl	87d4 <String::String(char const*)>
     97c:	4621      	mov	r1, r4
     97e:	a805      	add	r0, sp, #20
     980:	f007 ff28 	bl	87d4 <String::String(char const*)>
     984:	4621      	mov	r1, r4
     986:	a809      	add	r0, sp, #36	; 0x24
     988:	f007 ff24 	bl	87d4 <String::String(char const*)>
     98c:	f240 1203 	movw	r2, #259	; 0x103
     990:	a901      	add	r1, sp, #4
     992:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
     996:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     99a:	f7ff fb65 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     99e:	a801      	add	r0, sp, #4
     9a0:	f7ff fb94 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     9a4:	4659      	mov	r1, fp
     9a6:	a801      	add	r0, sp, #4
     9a8:	f007 ff14 	bl	87d4 <String::String(char const*)>
     9ac:	4970      	ldr	r1, [pc, #448]	; (b70 <initialize_opcode_info()+0xa88>)
     9ae:	a805      	add	r0, sp, #20
     9b0:	f007 ff10 	bl	87d4 <String::String(char const*)>
     9b4:	4639      	mov	r1, r7
     9b6:	a809      	add	r0, sp, #36	; 0x24
     9b8:	f007 ff0c 	bl	87d4 <String::String(char const*)>
     9bc:	f240 2102 	movw	r1, #514	; 0x202
     9c0:	f605 60d4 	addw	r0, r5, #3796	; 0xed4
     9c4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     9c8:	a901      	add	r1, sp, #4
     9ca:	f7ff fb4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9ce:	a801      	add	r0, sp, #4
     9d0:	f7ff fb7c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     9d4:	4964      	ldr	r1, [pc, #400]	; (b68 <initialize_opcode_info()+0xa80>)
     9d6:	a801      	add	r0, sp, #4
     9d8:	f007 fefc 	bl	87d4 <String::String(char const*)>
     9dc:	4b65      	ldr	r3, [pc, #404]	; (b74 <initialize_opcode_info()+0xa8c>)
     9de:	a805      	add	r0, sp, #20
     9e0:	4619      	mov	r1, r3
     9e2:	f007 fef7 	bl	87d4 <String::String(char const*)>
     9e6:	4631      	mov	r1, r6
     9e8:	a809      	add	r0, sp, #36	; 0x24
     9ea:	f007 fef3 	bl	87d4 <String::String(char const*)>
     9ee:	f44f 7281 	mov.w	r2, #258	; 0x102
     9f2:	a901      	add	r1, sp, #4
     9f4:	f605 7008 	addw	r0, r5, #3848	; 0xf08
     9f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     9fc:	f7ff fb34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a00:	a801      	add	r0, sp, #4
     a02:	f7ff fb63 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     a06:	4a5c      	ldr	r2, [pc, #368]	; (b78 <initialize_opcode_info()+0xa90>)
     a08:	a801      	add	r0, sp, #4
     a0a:	4611      	mov	r1, r2
     a0c:	f007 fee2 	bl	87d4 <String::String(char const*)>
     a10:	4641      	mov	r1, r8
     a12:	a805      	add	r0, sp, #20
     a14:	f007 fede 	bl	87d4 <String::String(char const*)>
     a18:	4621      	mov	r1, r4
     a1a:	a809      	add	r0, sp, #36	; 0x24
     a1c:	f007 feda 	bl	87d4 <String::String(char const*)>
     a20:	f240 3103 	movw	r1, #771	; 0x303
     a24:	f505 6077 	add.w	r0, r5, #3952	; 0xf70
     a28:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     a2c:	a901      	add	r1, sp, #4
     a2e:	f7ff fb1b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a32:	a801      	add	r0, sp, #4
     a34:	f7ff fb4a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     a38:	4659      	mov	r1, fp
     a3a:	a801      	add	r0, sp, #4
     a3c:	f007 feca 	bl	87d4 <String::String(char const*)>
     a40:	4641      	mov	r1, r8
     a42:	a805      	add	r0, sp, #20
     a44:	f007 fec6 	bl	87d4 <String::String(char const*)>
     a48:	4639      	mov	r1, r7
     a4a:	a809      	add	r0, sp, #36	; 0x24
     a4c:	f007 fec2 	bl	87d4 <String::String(char const*)>
     a50:	f44f 7341 	mov.w	r3, #772	; 0x304
     a54:	a901      	add	r1, sp, #4
     a56:	f605 70a4 	addw	r0, r5, #4004	; 0xfa4
     a5a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     a5e:	f7ff fb03 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a62:	a801      	add	r0, sp, #4
     a64:	f7ff fb32 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     a68:	493f      	ldr	r1, [pc, #252]	; (b68 <initialize_opcode_info()+0xa80>)
     a6a:	a801      	add	r0, sp, #4
     a6c:	f007 feb2 	bl	87d4 <String::String(char const*)>
     a70:	4641      	mov	r1, r8
     a72:	a805      	add	r0, sp, #20
     a74:	f007 feae 	bl	87d4 <String::String(char const*)>
     a78:	4631      	mov	r1, r6
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f007 feaa 	bl	87d4 <String::String(char const*)>
     a80:	f240 3206 	movw	r2, #774	; 0x306
     a84:	a901      	add	r1, sp, #4
     a86:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
     a8a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     a8e:	f7ff faeb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a92:	a801      	add	r0, sp, #4
     a94:	f7ff fb1a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     a98:	4938      	ldr	r1, [pc, #224]	; (b7c <initialize_opcode_info()+0xa94>)
     a9a:	a801      	add	r0, sp, #4
     a9c:	f007 fe9a 	bl	87d4 <String::String(char const*)>
     aa0:	4937      	ldr	r1, [pc, #220]	; (b80 <initialize_opcode_info()+0xa98>)
     aa2:	a805      	add	r0, sp, #20
     aa4:	f007 fe96 	bl	87d4 <String::String(char const*)>
     aa8:	4621      	mov	r1, r4
     aaa:	a809      	add	r0, sp, #36	; 0x24
     aac:	f007 fe92 	bl	87d4 <String::String(char const*)>
     ab0:	f240 2102 	movw	r1, #514	; 0x202
     ab4:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
     ab8:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     abc:	a901      	add	r1, sp, #4
     abe:	f7ff fad3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ac2:	a801      	add	r0, sp, #4
     ac4:	f7ff fb02 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     ac8:	4659      	mov	r1, fp
     aca:	a801      	add	r0, sp, #4
     acc:	f007 fe82 	bl	87d4 <String::String(char const*)>
     ad0:	492c      	ldr	r1, [pc, #176]	; (b84 <initialize_opcode_info()+0xa9c>)
     ad2:	a805      	add	r0, sp, #20
     ad4:	f007 fe7e 	bl	87d4 <String::String(char const*)>
     ad8:	4639      	mov	r1, r7
     ada:	a809      	add	r0, sp, #36	; 0x24
     adc:	f007 fe7a 	bl	87d4 <String::String(char const*)>
     ae0:	f240 2e05 	movw	lr, #517	; 0x205
     ae4:	a901      	add	r1, sp, #4
     ae6:	f509 7077 	add.w	r0, r9, #988	; 0x3dc
     aea:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     aee:	f7ff fabb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     af2:	a801      	add	r0, sp, #4
     af4:	f7ff faea 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     af8:	4659      	mov	r1, fp
     afa:	a801      	add	r0, sp, #4
     afc:	f007 fe6a 	bl	87d4 <String::String(char const*)>
     b00:	4921      	ldr	r1, [pc, #132]	; (b88 <initialize_opcode_info()+0xaa0>)
     b02:	a805      	add	r0, sp, #20
     b04:	f007 fe66 	bl	87d4 <String::String(char const*)>
     b08:	4639      	mov	r1, r7
     b0a:	a809      	add	r0, sp, #36	; 0x24
     b0c:	f007 fe62 	bl	87d4 <String::String(char const*)>
     b10:	f44f 7c01 	mov.w	ip, #516	; 0x204
     b14:	a901      	add	r1, sp, #4
     b16:	f209 40ac 	addw	r0, r9, #1196	; 0x4ac
     b1a:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     b1e:	f7ff faa3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b22:	a801      	add	r0, sp, #4
     b24:	f7ff fad2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     b28:	490f      	ldr	r1, [pc, #60]	; (b68 <initialize_opcode_info()+0xa80>)
     b2a:	a801      	add	r0, sp, #4
     b2c:	f007 fe52 	bl	87d4 <String::String(char const*)>
     b30:	4915      	ldr	r1, [pc, #84]	; (b88 <initialize_opcode_info()+0xaa0>)
     b32:	a805      	add	r0, sp, #20
     b34:	f007 fe4e 	bl	87d4 <String::String(char const*)>
     b38:	4631      	mov	r1, r6
     b3a:	a809      	add	r0, sp, #36	; 0x24
     b3c:	f007 fe4a 	bl	87d4 <String::String(char const*)>
     b40:	f240 2006 	movw	r0, #518	; 0x206
     b44:	a901      	add	r1, sp, #4
     b46:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     b4a:	f509 609c 	add.w	r0, r9, #1248	; 0x4e0
     b4e:	f7ff fa8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b52:	e01d      	b.n	b90 <initialize_opcode_info()+0xaa8>
     b54:	200008f4 	.word	0x200008f4
     b58:	200008fc 	.word	0x200008fc
     b5c:	20000924 	.word	0x20000924
     b60:	20000928 	.word	0x20000928
     b64:	200008ac 	.word	0x200008ac
     b68:	20000934 	.word	0x20000934
     b6c:	20000938 	.word	0x20000938
     b70:	200008c8 	.word	0x200008c8
     b74:	200008cc 	.word	0x200008cc
     b78:	2000093c 	.word	0x2000093c
     b7c:	20000940 	.word	0x20000940
     b80:	200008d8 	.word	0x200008d8
     b84:	200008dc 	.word	0x200008dc
     b88:	200008e4 	.word	0x200008e4
     b8c:	20000930 	.word	0x20000930
     b90:	a801      	add	r0, sp, #4
     b92:	f7ff fa9b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     b96:	49d1      	ldr	r1, [pc, #836]	; (edc <initialize_opcode_info()+0xdf4>)
     b98:	a801      	add	r0, sp, #4
     b9a:	f007 fe1b 	bl	87d4 <String::String(char const*)>
     b9e:	4621      	mov	r1, r4
     ba0:	a805      	add	r0, sp, #20
     ba2:	f007 fe17 	bl	87d4 <String::String(char const*)>
     ba6:	49ce      	ldr	r1, [pc, #824]	; (ee0 <initialize_opcode_info()+0xdf8>)
     ba8:	a809      	add	r0, sp, #36	; 0x24
     baa:	f007 fe13 	bl	87d4 <String::String(char const*)>
     bae:	f44f 7281 	mov.w	r2, #258	; 0x102
     bb2:	a901      	add	r1, sp, #4
     bb4:	f505 508f 	add.w	r0, r5, #4576	; 0x11e0
     bb8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     bbc:	f7ff fa54 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bc0:	a801      	add	r0, sp, #4
     bc2:	f7ff fa83 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
     bc6:	4659      	mov	r1, fp
     bc8:	a801      	add	r0, sp, #4
     bca:	f007 fe03 	bl	87d4 <String::String(char const*)>
     bce:	49c5      	ldr	r1, [pc, #788]	; (ee4 <initialize_opcode_info()+0xdfc>)
     bd0:	a805      	add	r0, sp, #20
     bd2:	f007 fdff 	bl	87d4 <String::String(char const*)>
     bd6:	4639      	mov	r1, r7
     bd8:	a809      	add	r0, sp, #36	; 0x24
     bda:	f007 fdfb 	bl	87d4 <String::String(char const*)>
     bde:	f44f 7341 	mov.w	r3, #772	; 0x304
     be2:	a901      	add	r1, sp, #4
     be4:	f209 507c 	addw	r0, r9, #1404	; 0x57c
     be8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     bec:	f7ff fa3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bf0:	a801      	add	r0, sp, #4
     bf2:	f7ff fa6b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     bf6:	4659      	mov	r1, fp
     bf8:	a801      	add	r0, sp, #4
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
	opcode_info[0x60] = {"RTS","","",6,1};
     bfa:	f44f 7b83 	mov.w	fp, #262	; 0x106
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     bfe:	f007 fde9 	bl	87d4 <String::String(char const*)>
     c02:	49b9      	ldr	r1, [pc, #740]	; (ee8 <initialize_opcode_info()+0xe00>)
     c04:	a805      	add	r0, sp, #20
     c06:	f007 fde5 	bl	87d4 <String::String(char const*)>
     c0a:	4639      	mov	r1, r7
     c0c:	af09      	add	r7, sp, #36	; 0x24
     c0e:	4638      	mov	r0, r7
     c10:	af01      	add	r7, sp, #4
     c12:	f007 fddf 	bl	87d4 <String::String(char const*)>
     c16:	f44f 7341 	mov.w	r3, #772	; 0x304
     c1a:	4639      	mov	r1, r7
     c1c:	f209 604c 	addw	r0, r9, #1612	; 0x64c
     c20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c24:	f7ff fa20 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c28:	4638      	mov	r0, r7
     c2a:	f7ff fa4f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     c2e:	4638      	mov	r0, r7
     c30:	af05      	add	r7, sp, #20
     c32:	49ae      	ldr	r1, [pc, #696]	; (eec <initialize_opcode_info()+0xe04>)
     c34:	f007 fdce 	bl	87d4 <String::String(char const*)>
     c38:	49ab      	ldr	r1, [pc, #684]	; (ee8 <initialize_opcode_info()+0xe00>)
     c3a:	4638      	mov	r0, r7
     c3c:	af09      	add	r7, sp, #36	; 0x24
     c3e:	f007 fdc9 	bl	87d4 <String::String(char const*)>
     c42:	4631      	mov	r1, r6
     c44:	4638      	mov	r0, r7
     c46:	f240 3707 	movw	r7, #775	; 0x307
     c4a:	f007 fdc3 	bl	87d4 <String::String(char const*)>
     c4e:	f509 60d0 	add.w	r0, r9, #1664	; 0x680
     c52:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     c56:	af01      	add	r7, sp, #4
     c58:	4639      	mov	r1, r7
     c5a:	f7ff fa05 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c5e:	4638      	mov	r0, r7
     c60:	f7ff fa34 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
     c64:	4638      	mov	r0, r7
     c66:	af05      	add	r7, sp, #20
     c68:	49a1      	ldr	r1, [pc, #644]	; (ef0 <initialize_opcode_info()+0xe08>)
     c6a:	f007 fdb3 	bl	87d4 <String::String(char const*)>
     c6e:	4621      	mov	r1, r4
     c70:	4638      	mov	r0, r7
     c72:	af09      	add	r7, sp, #36	; 0x24
     c74:	f007 fdae 	bl	87d4 <String::String(char const*)>
     c78:	4621      	mov	r1, r4
     c7a:	4638      	mov	r0, r7
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c7c:	4f9d      	ldr	r7, [pc, #628]	; (ef4 <initialize_opcode_info()+0xe0c>)
	opcode_info[0x60] = {"RTS","","",6,1};
     c7e:	f007 fda9 	bl	87d4 <String::String(char const*)>
     c82:	f505 509c 	add.w	r0, r5, #4992	; 0x1380
     c86:	ad01      	add	r5, sp, #4
     c88:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c8c:	f8df b294 	ldr.w	fp, [pc, #660]	; f24 <initialize_opcode_info()+0xe3c>
	opcode_info[0x60] = {"RTS","","",6,1};
     c90:	4629      	mov	r1, r5
     c92:	f7ff f9e9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c96:	4628      	mov	r0, r5
     c98:	f7ff fa18 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     c9c:	4628      	mov	r0, r5
     c9e:	ad05      	add	r5, sp, #20
     ca0:	4659      	mov	r1, fp
     ca2:	f007 fd97 	bl	87d4 <String::String(char const*)>
     ca6:	4994      	ldr	r1, [pc, #592]	; (ef8 <initialize_opcode_info()+0xe10>)
     ca8:	4628      	mov	r0, r5
     caa:	ad09      	add	r5, sp, #36	; 0x24
     cac:	f007 fd92 	bl	87d4 <String::String(char const*)>
     cb0:	4639      	mov	r1, r7
     cb2:	4628      	mov	r0, r5
     cb4:	ad01      	add	r5, sp, #4
     cb6:	f007 fd8d 	bl	87d4 <String::String(char const*)>
     cba:	f240 2006 	movw	r0, #518	; 0x206
     cbe:	4629      	mov	r1, r5
     cc0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     cc4:	f209 701c 	addw	r0, r9, #1820	; 0x71c
     cc8:	f7ff f9ce 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ccc:	4628      	mov	r0, r5
     cce:	f7ff f9fd 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
     cd2:	4628      	mov	r0, r5
     cd4:	ad05      	add	r5, sp, #20
     cd6:	4659      	mov	r1, fp
     cd8:	f007 fd7c 	bl	87d4 <String::String(char const*)>
     cdc:	4651      	mov	r1, sl
     cde:	4628      	mov	r0, r5
     ce0:	ad09      	add	r5, sp, #36	; 0x24
     ce2:	f007 fd77 	bl	87d4 <String::String(char const*)>
     ce6:	4639      	mov	r1, r7
     ce8:	4628      	mov	r0, r5
     cea:	ad01      	add	r5, sp, #4
     cec:	f007 fd72 	bl	87d4 <String::String(char const*)>
     cf0:	f240 2e03 	movw	lr, #515	; 0x203
     cf4:	4629      	mov	r1, r5
     cf6:	f209 70ec 	addw	r0, r9, #2028	; 0x7ec
     cfa:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     cfe:	f7ff f9b3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d02:	4628      	mov	r0, r5
     d04:	f7ff f9e2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d08:	497c      	ldr	r1, [pc, #496]	; (efc <initialize_opcode_info()+0xe14>)
     d0a:	4628      	mov	r0, r5
     d0c:	f240 2505 	movw	r5, #517	; 0x205
     d10:	f007 fd60 	bl	87d4 <String::String(char const*)>
     d14:	4651      	mov	r1, sl
     d16:	f10d 0a14 	add.w	sl, sp, #20
     d1a:	4650      	mov	r0, sl
     d1c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     d20:	f007 fd58 	bl	87d4 <String::String(char const*)>
     d24:	4631      	mov	r1, r6
     d26:	4650      	mov	r0, sl
     d28:	f10d 0a04 	add.w	sl, sp, #4
     d2c:	f007 fd52 	bl	87d4 <String::String(char const*)>
     d30:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     d34:	f509 6502 	add.w	r5, r9, #2080	; 0x820
     d38:	4651      	mov	r1, sl
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
	opcode_info[0x78] = {"SEI","","I",2,1};
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
     d3a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; f28 <initialize_opcode_info()+0xe40>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d3e:	4628      	mov	r0, r5
     d40:	f7ff f992 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d44:	a801      	add	r0, sp, #4
     d46:	f7ff f9c1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
     d4a:	496d      	ldr	r1, [pc, #436]	; (f00 <initialize_opcode_info()+0xe18>)
     d4c:	a801      	add	r0, sp, #4
     d4e:	f007 fd41 	bl	87d4 <String::String(char const*)>
     d52:	4621      	mov	r1, r4
     d54:	a805      	add	r0, sp, #20
     d56:	f007 fd3d 	bl	87d4 <String::String(char const*)>
     d5a:	4621      	mov	r1, r4
     d5c:	a809      	add	r0, sp, #36	; 0x24
     d5e:	f007 fd39 	bl	87d4 <String::String(char const*)>
     d62:	f44f 7182 	mov.w	r1, #260	; 0x104
     d66:	f609 0088 	addw	r0, r9, #2184	; 0x888
     d6a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d6e:	a901      	add	r1, sp, #4
     d70:	f7ff f97a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d74:	a801      	add	r0, sp, #4
     d76:	f7ff f9a9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
     d7a:	4659      	mov	r1, fp
     d7c:	a801      	add	r0, sp, #4
     d7e:	f007 fd29 	bl	87d4 <String::String(char const*)>
     d82:	4960      	ldr	r1, [pc, #384]	; (f04 <initialize_opcode_info()+0xe1c>)
     d84:	a805      	add	r0, sp, #20
     d86:	f007 fd25 	bl	87d4 <String::String(char const*)>
     d8a:	4639      	mov	r1, r7
     d8c:	a809      	add	r0, sp, #36	; 0x24
     d8e:	f007 fd21 	bl	87d4 <String::String(char const*)>
     d92:	f240 2102 	movw	r1, #514	; 0x202
     d96:	f609 00bc 	addw	r0, r9, #2236	; 0x8bc
     d9a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d9e:	a901      	add	r1, sp, #4
     da0:	f7ff f962 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     da4:	a801      	add	r0, sp, #4
     da6:	f7ff f991 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
     daa:	4954      	ldr	r1, [pc, #336]	; (efc <initialize_opcode_info()+0xe14>)
     dac:	a801      	add	r0, sp, #4
     dae:	f007 fd11 	bl	87d4 <String::String(char const*)>
     db2:	4b55      	ldr	r3, [pc, #340]	; (f08 <initialize_opcode_info()+0xe20>)
     db4:	a805      	add	r0, sp, #20
     db6:	4619      	mov	r1, r3
     db8:	f007 fd0c 	bl	87d4 <String::String(char const*)>
     dbc:	4631      	mov	r1, r6
     dbe:	a809      	add	r0, sp, #36	; 0x24
     dc0:	f007 fd08 	bl	87d4 <String::String(char const*)>
     dc4:	f44f 7281 	mov.w	r2, #258	; 0x102
     dc8:	a901      	add	r1, sp, #4
     dca:	f509 600f 	add.w	r0, r9, #2288	; 0x8f0
     dce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     dd2:	f7ff f949 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dd6:	a801      	add	r0, sp, #4
     dd8:	f7ff f978 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
     ddc:	4a4b      	ldr	r2, [pc, #300]	; (f0c <initialize_opcode_info()+0xe24>)
     dde:	a801      	add	r0, sp, #4
     de0:	4611      	mov	r1, r2
     de2:	f007 fcf7 	bl	87d4 <String::String(char const*)>
     de6:	494a      	ldr	r1, [pc, #296]	; (f10 <initialize_opcode_info()+0xe28>)
     de8:	a805      	add	r0, sp, #20
     dea:	f007 fcf3 	bl	87d4 <String::String(char const*)>
     dee:	4621      	mov	r1, r4
     df0:	a809      	add	r0, sp, #36	; 0x24
     df2:	f007 fcef 	bl	87d4 <String::String(char const*)>
     df6:	f240 3305 	movw	r3, #773	; 0x305
     dfa:	a901      	add	r1, sp, #4
     dfc:	f609 1058 	addw	r0, r9, #2392	; 0x958
     e00:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e04:	f7ff f930 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e08:	a801      	add	r0, sp, #4
     e0a:	f7ff f95f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
     e0e:	4659      	mov	r1, fp
     e10:	a801      	add	r0, sp, #4
     e12:	f007 fcdf 	bl	87d4 <String::String(char const*)>
     e16:	4641      	mov	r1, r8
     e18:	a805      	add	r0, sp, #20
     e1a:	f007 fcdb 	bl	87d4 <String::String(char const*)>
     e1e:	4639      	mov	r1, r7
     e20:	a809      	add	r0, sp, #36	; 0x24
     e22:	f007 fcd7 	bl	87d4 <String::String(char const*)>
     e26:	f44f 7341 	mov.w	r3, #772	; 0x304
     e2a:	a901      	add	r1, sp, #4
     e2c:	f609 108c 	addw	r0, r9, #2444	; 0x98c
     e30:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     e34:	f7ff f918 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e38:	a801      	add	r0, sp, #4
     e3a:	f7ff f947 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
     e3e:	492f      	ldr	r1, [pc, #188]	; (efc <initialize_opcode_info()+0xe14>)
     e40:	a801      	add	r0, sp, #4
     e42:	f007 fcc7 	bl	87d4 <String::String(char const*)>
     e46:	4641      	mov	r1, r8
     e48:	a805      	add	r0, sp, #20
     e4a:	f007 fcc3 	bl	87d4 <String::String(char const*)>
     e4e:	4631      	mov	r1, r6
     e50:	a809      	add	r0, sp, #36	; 0x24
     e52:	f007 fcbf 	bl	87d4 <String::String(char const*)>
     e56:	f240 3206 	movw	r2, #774	; 0x306
     e5a:	a901      	add	r1, sp, #4
     e5c:	f509 601c 	add.w	r0, r9, #2496	; 0x9c0
     e60:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     e64:	f7ff f900 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e68:	a801      	add	r0, sp, #4
     e6a:	f7ff f92f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
     e6e:	4929      	ldr	r1, [pc, #164]	; (f14 <initialize_opcode_info()+0xe2c>)
     e70:	a801      	add	r0, sp, #4
     e72:	f007 fcaf 	bl	87d4 <String::String(char const*)>
     e76:	4928      	ldr	r1, [pc, #160]	; (f18 <initialize_opcode_info()+0xe30>)
     e78:	a805      	add	r0, sp, #20
     e7a:	f007 fcab 	bl	87d4 <String::String(char const*)>
     e7e:	4621      	mov	r1, r4
     e80:	a809      	add	r0, sp, #36	; 0x24
     e82:	f007 fca7 	bl	87d4 <String::String(char const*)>
     e86:	f44f 7c01 	mov.w	ip, #516	; 0x204
     e8a:	a901      	add	r1, sp, #4
     e8c:	f609 2028 	addw	r0, r9, #2600	; 0xa28
     e90:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     e94:	f7ff f8e8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e98:	a801      	add	r0, sp, #4
     e9a:	f7ff f917 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
     e9e:	4659      	mov	r1, fp
     ea0:	a801      	add	r0, sp, #4
     ea2:	f007 fc97 	bl	87d4 <String::String(char const*)>
     ea6:	491d      	ldr	r1, [pc, #116]	; (f1c <initialize_opcode_info()+0xe34>)
     ea8:	a805      	add	r0, sp, #20
     eaa:	f007 fc93 	bl	87d4 <String::String(char const*)>
     eae:	4639      	mov	r1, r7
     eb0:	a809      	add	r0, sp, #36	; 0x24
     eb2:	f007 fc8f 	bl	87d4 <String::String(char const*)>
     eb6:	f44f 7c01 	mov.w	ip, #516	; 0x204
     eba:	a901      	add	r1, sp, #4
     ebc:	f609 205c 	addw	r0, r9, #2652	; 0xa5c
     ec0:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     ec4:	f7ff f8d0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ec8:	a801      	add	r0, sp, #4
     eca:	f7ff f8ff 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
     ece:	4659      	mov	r1, fp
     ed0:	a801      	add	r0, sp, #4
     ed2:	f007 fc7f 	bl	87d4 <String::String(char const*)>
     ed6:	4912      	ldr	r1, [pc, #72]	; (f20 <initialize_opcode_info()+0xe38>)
     ed8:	a805      	add	r0, sp, #20
     eda:	e027      	b.n	f2c <initialize_opcode_info()+0xe44>
     edc:	20000944 	.word	0x20000944
     ee0:	20000948 	.word	0x20000948
     ee4:	200008f4 	.word	0x200008f4
     ee8:	200008fc 	.word	0x200008fc
     eec:	20000934 	.word	0x20000934
     ef0:	2000094c 	.word	0x2000094c
     ef4:	20000954 	.word	0x20000954
     ef8:	200008ac 	.word	0x200008ac
     efc:	2000095c 	.word	0x2000095c
     f00:	20000960 	.word	0x20000960
     f04:	200008c8 	.word	0x200008c8
     f08:	200008cc 	.word	0x200008cc
     f0c:	2000093c 	.word	0x2000093c
     f10:	20000964 	.word	0x20000964
     f14:	2000096c 	.word	0x2000096c
     f18:	200008d8 	.word	0x200008d8
     f1c:	200008dc 	.word	0x200008dc
     f20:	200008e4 	.word	0x200008e4
     f24:	20000950 	.word	0x20000950
     f28:	20000974 	.word	0x20000974
     f2c:	f007 fc52 	bl	87d4 <String::String(char const*)>
     f30:	4639      	mov	r1, r7
     f32:	a809      	add	r0, sp, #36	; 0x24
     f34:	f007 fc4e 	bl	87d4 <String::String(char const*)>
     f38:	f44f 7c01 	mov.w	ip, #516	; 0x204
     f3c:	a901      	add	r1, sp, #4
     f3e:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
     f42:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     f46:	f7ff f88f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f4a:	a801      	add	r0, sp, #4
     f4c:	f7ff f8be 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
     f50:	49cb      	ldr	r1, [pc, #812]	; (1280 <initialize_opcode_info()+0x1198>)
     f52:	a801      	add	r0, sp, #4
     f54:	f007 fc3e 	bl	87d4 <String::String(char const*)>
     f58:	49ca      	ldr	r1, [pc, #808]	; (1284 <initialize_opcode_info()+0x119c>)
     f5a:	a805      	add	r0, sp, #20
     f5c:	f007 fc3a 	bl	87d4 <String::String(char const*)>
     f60:	4631      	mov	r1, r6
     f62:	a809      	add	r0, sp, #36	; 0x24
     f64:	f007 fc36 	bl	87d4 <String::String(char const*)>
     f68:	f240 2006 	movw	r0, #518	; 0x206
     f6c:	a901      	add	r1, sp, #4
     f6e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     f72:	f509 6036 	add.w	r0, r9, #2912	; 0xb60
     f76:	f7ff f877 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f7a:	a801      	add	r0, sp, #4
     f7c:	f7ff f8a6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
     f80:	49c1      	ldr	r1, [pc, #772]	; (1288 <initialize_opcode_info()+0x11a0>)
     f82:	a801      	add	r0, sp, #4
     f84:	f007 fc26 	bl	87d4 <String::String(char const*)>
     f88:	4621      	mov	r1, r4
     f8a:	a805      	add	r0, sp, #20
     f8c:	f007 fc22 	bl	87d4 <String::String(char const*)>
     f90:	49be      	ldr	r1, [pc, #760]	; (128c <initialize_opcode_info()+0x11a4>)
     f92:	a809      	add	r0, sp, #36	; 0x24
     f94:	f007 fc1e 	bl	87d4 <String::String(char const*)>
     f98:	f44f 7281 	mov.w	r2, #258	; 0x102
     f9c:	a901      	add	r1, sp, #4
     f9e:	f609 30c8 	addw	r0, r9, #3016	; 0xbc8
     fa2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     fa6:	f7ff f85f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     faa:	a801      	add	r0, sp, #4
     fac:	f7ff f88e 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
     fb0:	4659      	mov	r1, fp
     fb2:	a801      	add	r0, sp, #4
     fb4:	f007 fc0e 	bl	87d4 <String::String(char const*)>
     fb8:	49b5      	ldr	r1, [pc, #724]	; (1290 <initialize_opcode_info()+0x11a8>)
     fba:	a805      	add	r0, sp, #20
     fbc:	f007 fc0a 	bl	87d4 <String::String(char const*)>
     fc0:	4639      	mov	r1, r7
     fc2:	a809      	add	r0, sp, #36	; 0x24
     fc4:	f007 fc06 	bl	87d4 <String::String(char const*)>
     fc8:	f44f 7341 	mov.w	r3, #772	; 0x304
     fcc:	a901      	add	r1, sp, #4
     fce:	f609 30fc 	addw	r0, r9, #3068	; 0xbfc
     fd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     fd6:	f7ff f847 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fda:	a801      	add	r0, sp, #4
     fdc:	f7ff f876 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     fe0:	4659      	mov	r1, fp
     fe2:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
     fe4:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 12b8 <initialize_opcode_info()+0x11d0>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     fe8:	f007 fbf4 	bl	87d4 <String::String(char const*)>
     fec:	49a9      	ldr	r1, [pc, #676]	; (1294 <initialize_opcode_info()+0x11ac>)
     fee:	a805      	add	r0, sp, #20
     ff0:	f007 fbf0 	bl	87d4 <String::String(char const*)>
     ff4:	4639      	mov	r1, r7
     ff6:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x84] = {"STY","zpg","",3,2};
     ff8:	f240 2703 	movw	r7, #515	; 0x203
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
     ffc:	f007 fbea 	bl	87d4 <String::String(char const*)>
    1000:	f44f 7341 	mov.w	r3, #772	; 0x304
    1004:	a901      	add	r1, sp, #4
    1006:	f609 40cc 	addw	r0, r9, #3276	; 0xccc
    100a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    100e:	f7ff f82b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1012:	a801      	add	r0, sp, #4
	opcode_info[0x85] = {"STA","zpg","",3,2};
	opcode_info[0x86] = {"STX","zpg","",3,2};
    1014:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 12bc <initialize_opcode_info()+0x11d4>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1018:	f7ff f858 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    101c:	4998      	ldr	r1, [pc, #608]	; (1280 <initialize_opcode_info()+0x1198>)
    101e:	a801      	add	r0, sp, #4
    1020:	f007 fbd8 	bl	87d4 <String::String(char const*)>
    1024:	499b      	ldr	r1, [pc, #620]	; (1294 <initialize_opcode_info()+0x11ac>)
    1026:	a805      	add	r0, sp, #20
    1028:	f007 fbd4 	bl	87d4 <String::String(char const*)>
    102c:	4631      	mov	r1, r6
    102e:	a809      	add	r0, sp, #36	; 0x24
    1030:	f007 fbd0 	bl	87d4 <String::String(char const*)>
    1034:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1038:	f240 3307 	movw	r3, #775	; 0x307
    103c:	a901      	add	r1, sp, #4
    103e:	4610      	mov	r0, r2
    1040:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1044:	f7ff f810 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1048:	a801      	add	r0, sp, #4
    104a:	f7ff f83f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    104e:	4651      	mov	r1, sl
    1050:	a801      	add	r0, sp, #4
    1052:	f007 fbbf 	bl	87d4 <String::String(char const*)>
    1056:	4990      	ldr	r1, [pc, #576]	; (1298 <initialize_opcode_info()+0x11b0>)
    1058:	a805      	add	r0, sp, #20
    105a:	f007 fbbb 	bl	87d4 <String::String(char const*)>
    105e:	4621      	mov	r1, r4
    1060:	a809      	add	r0, sp, #36	; 0x24
    1062:	f007 fbb7 	bl	87d4 <String::String(char const*)>
    1066:	f240 2006 	movw	r0, #518	; 0x206
    106a:	a901      	add	r1, sp, #4
    106c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1070:	f205 507c 	addw	r0, r5, #1404	; 0x57c
    1074:	f7fe fff8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1078:	a801      	add	r0, sp, #4
    107a:	f7ff f827 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    107e:	4659      	mov	r1, fp
    1080:	a801      	add	r0, sp, #4
    1082:	f007 fba7 	bl	87d4 <String::String(char const*)>
    1086:	4985      	ldr	r1, [pc, #532]	; (129c <initialize_opcode_info()+0x11b4>)
    1088:	a805      	add	r0, sp, #20
    108a:	f007 fba3 	bl	87d4 <String::String(char const*)>
    108e:	4621      	mov	r1, r4
    1090:	a809      	add	r0, sp, #36	; 0x24
    1092:	f007 fb9f 	bl	87d4 <String::String(char const*)>
    1096:	a901      	add	r1, sp, #4
    1098:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    109c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10a0:	f7fe ffe2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10a4:	a801      	add	r0, sp, #4
    10a6:	f7ff f811 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    10aa:	4651      	mov	r1, sl
    10ac:	a801      	add	r0, sp, #4
    10ae:	f007 fb91 	bl	87d4 <String::String(char const*)>
    10b2:	497a      	ldr	r1, [pc, #488]	; (129c <initialize_opcode_info()+0x11b4>)
    10b4:	a805      	add	r0, sp, #20
    10b6:	f007 fb8d 	bl	87d4 <String::String(char const*)>
    10ba:	4621      	mov	r1, r4
    10bc:	a809      	add	r0, sp, #36	; 0x24
    10be:	f007 fb89 	bl	87d4 <String::String(char const*)>
    10c2:	a901      	add	r1, sp, #4
    10c4:	f205 604c 	addw	r0, r5, #1612	; 0x64c
    10c8:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10cc:	f7fe ffcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10d0:	a801      	add	r0, sp, #4
    10d2:	f7fe fffb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    10d6:	4649      	mov	r1, r9
    10d8:	a801      	add	r0, sp, #4
    10da:	f007 fb7b 	bl	87d4 <String::String(char const*)>
    10de:	496f      	ldr	r1, [pc, #444]	; (129c <initialize_opcode_info()+0x11b4>)
    10e0:	a805      	add	r0, sp, #20
    10e2:	f007 fb77 	bl	87d4 <String::String(char const*)>
    10e6:	4621      	mov	r1, r4
    10e8:	a809      	add	r0, sp, #36	; 0x24
    10ea:	f007 fb73 	bl	87d4 <String::String(char const*)>
    10ee:	a901      	add	r1, sp, #4
    10f0:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    10f4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    10f8:	f7fe ffb6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10fc:	a801      	add	r0, sp, #4
    10fe:	f7fe ffe5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    1102:	4f67      	ldr	r7, [pc, #412]	; (12a0 <initialize_opcode_info()+0x11b8>)
    1104:	4967      	ldr	r1, [pc, #412]	; (12a4 <initialize_opcode_info()+0x11bc>)
    1106:	a801      	add	r0, sp, #4
    1108:	f007 fb64 	bl	87d4 <String::String(char const*)>
    110c:	4621      	mov	r1, r4
    110e:	a805      	add	r0, sp, #20
    1110:	f007 fb60 	bl	87d4 <String::String(char const*)>
    1114:	4639      	mov	r1, r7
    1116:	a809      	add	r0, sp, #36	; 0x24
    1118:	f007 fb5c 	bl	87d4 <String::String(char const*)>
    111c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1120:	a901      	add	r1, sp, #4
    1122:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
    1126:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    112a:	f7fe ff9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    112e:	a801      	add	r0, sp, #4
    1130:	f7fe ffcc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    1134:	495c      	ldr	r1, [pc, #368]	; (12a8 <initialize_opcode_info()+0x11c0>)
    1136:	a801      	add	r0, sp, #4
    1138:	f007 fb4c 	bl	87d4 <String::String(char const*)>
    113c:	4621      	mov	r1, r4
    113e:	a805      	add	r0, sp, #20
    1140:	f007 fb48 	bl	87d4 <String::String(char const*)>
    1144:	4639      	mov	r1, r7
    1146:	a809      	add	r0, sp, #36	; 0x24
    1148:	f007 fb44 	bl	87d4 <String::String(char const*)>
    114c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1150:	a901      	add	r1, sp, #4
    1152:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
    1156:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    115a:	f7fe ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    115e:	a801      	add	r0, sp, #4
    1160:	f7fe ffb4 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    1164:	4659      	mov	r1, fp
    1166:	a801      	add	r0, sp, #4
    1168:	f007 fb34 	bl	87d4 <String::String(char const*)>
    116c:	4641      	mov	r1, r8
    116e:	a805      	add	r0, sp, #20
    1170:	f007 fb30 	bl	87d4 <String::String(char const*)>
    1174:	4621      	mov	r1, r4
    1176:	a809      	add	r0, sp, #36	; 0x24
    1178:	f007 fb2c 	bl	87d4 <String::String(char const*)>
    117c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1180:	a901      	add	r1, sp, #4
    1182:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1186:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    118a:	f7fe ff6d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    118e:	a801      	add	r0, sp, #4
    1190:	f7fe ff9c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1194:	4651      	mov	r1, sl
    1196:	a801      	add	r0, sp, #4
    1198:	f007 fb1c 	bl	87d4 <String::String(char const*)>
    119c:	4641      	mov	r1, r8
    119e:	a805      	add	r0, sp, #20
    11a0:	f007 fb18 	bl	87d4 <String::String(char const*)>
    11a4:	4621      	mov	r1, r4
    11a6:	a809      	add	r0, sp, #36	; 0x24
    11a8:	f007 fb14 	bl	87d4 <String::String(char const*)>
    11ac:	f44f 7341 	mov.w	r3, #772	; 0x304
    11b0:	a901      	add	r1, sp, #4
    11b2:	f205 70ec 	addw	r0, r5, #2028	; 0x7ec
    11b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11ba:	f7fe ff55 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11be:	a801      	add	r0, sp, #4
    11c0:	f7fe ff84 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    11c4:	4649      	mov	r1, r9
    11c6:	a801      	add	r0, sp, #4
    11c8:	f007 fb04 	bl	87d4 <String::String(char const*)>
    11cc:	4641      	mov	r1, r8
    11ce:	a805      	add	r0, sp, #20
    11d0:	f007 fb00 	bl	87d4 <String::String(char const*)>
    11d4:	4621      	mov	r1, r4
    11d6:	a809      	add	r0, sp, #36	; 0x24
    11d8:	f007 fafc 	bl	87d4 <String::String(char const*)>
    11dc:	f44f 7341 	mov.w	r3, #772	; 0x304
    11e0:	a901      	add	r1, sp, #4
    11e2:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    11e6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11ea:	f7fe ff3d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11ee:	a801      	add	r0, sp, #4
    11f0:	f7fe ff6c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    11f4:	492d      	ldr	r1, [pc, #180]	; (12ac <initialize_opcode_info()+0x11c4>)
    11f6:	a801      	add	r0, sp, #4
    11f8:	f007 faec 	bl	87d4 <String::String(char const*)>
    11fc:	492c      	ldr	r1, [pc, #176]	; (12b0 <initialize_opcode_info()+0x11c8>)
    11fe:	a805      	add	r0, sp, #20
    1200:	f007 fae8 	bl	87d4 <String::String(char const*)>
    1204:	4621      	mov	r1, r4
    1206:	a809      	add	r0, sp, #36	; 0x24
    1208:	f007 fae4 	bl	87d4 <String::String(char const*)>
    120c:	f240 2102 	movw	r1, #514	; 0x202
    1210:	f605 0088 	addw	r0, r5, #2184	; 0x888
    1214:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1218:	a901      	add	r1, sp, #4
    121a:	f7fe ff25 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    121e:	a801      	add	r0, sp, #4
    1220:	f7fe ff54 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    1224:	4651      	mov	r1, sl
    1226:	a801      	add	r0, sp, #4
    1228:	f007 fad4 	bl	87d4 <String::String(char const*)>
    122c:	4921      	ldr	r1, [pc, #132]	; (12b4 <initialize_opcode_info()+0x11cc>)
    122e:	a805      	add	r0, sp, #20
    1230:	f007 fad0 	bl	87d4 <String::String(char const*)>
    1234:	4621      	mov	r1, r4
    1236:	a809      	add	r0, sp, #36	; 0x24
    1238:	f007 facc 	bl	87d4 <String::String(char const*)>
    123c:	f240 2006 	movw	r0, #518	; 0x206
    1240:	a901      	add	r1, sp, #4
    1242:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1246:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
    124a:	f7fe ff0d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    124e:	a801      	add	r0, sp, #4
    1250:	f7fe ff3c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    1254:	4659      	mov	r1, fp
    1256:	a801      	add	r0, sp, #4
    1258:	f44f 7b01 	mov.w	fp, #516	; 0x204
    125c:	f007 faba 	bl	87d4 <String::String(char const*)>
    1260:	4908      	ldr	r1, [pc, #32]	; (1284 <initialize_opcode_info()+0x119c>)
    1262:	a805      	add	r0, sp, #20
    1264:	f007 fab6 	bl	87d4 <String::String(char const*)>
    1268:	4621      	mov	r1, r4
    126a:	a809      	add	r0, sp, #36	; 0x24
    126c:	f007 fab2 	bl	87d4 <String::String(char const*)>
    1270:	f10d 0c04 	add.w	ip, sp, #4
    1274:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1278:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    127c:	e020      	b.n	12c0 <initialize_opcode_info()+0x11d8>
    127e:	bf00      	nop
    1280:	2000095c 	.word	0x2000095c
    1284:	200008e4 	.word	0x200008e4
    1288:	20000970 	.word	0x20000970
    128c:	20000948 	.word	0x20000948
    1290:	200008f4 	.word	0x200008f4
    1294:	200008fc 	.word	0x200008fc
    1298:	200008ac 	.word	0x200008ac
    129c:	200008b8 	.word	0x200008b8
    12a0:	200008b4 	.word	0x200008b4
    12a4:	20000980 	.word	0x20000980
    12a8:	20000984 	.word	0x20000984
    12ac:	20000988 	.word	0x20000988
    12b0:	200008d8 	.word	0x200008d8
    12b4:	200008dc 	.word	0x200008dc
    12b8:	20000978 	.word	0x20000978
    12bc:	2000097c 	.word	0x2000097c
    12c0:	4661      	mov	r1, ip
    12c2:	f7fe fed1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12c6:	f10d 0c04 	add.w	ip, sp, #4
    12ca:	4660      	mov	r0, ip
    12cc:	f7fe fefe 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    12d0:	f10d 0c04 	add.w	ip, sp, #4
    12d4:	4651      	mov	r1, sl
    12d6:	4660      	mov	r0, ip
    12d8:	f007 fa7c 	bl	87d4 <String::String(char const*)>
    12dc:	f10d 0c14 	add.w	ip, sp, #20
    12e0:	49d7      	ldr	r1, [pc, #860]	; (1640 <initialize_opcode_info()+0x1558>)
    12e2:	4660      	mov	r0, ip
    12e4:	f007 fa76 	bl	87d4 <String::String(char const*)>
    12e8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    12ec:	4621      	mov	r1, r4
    12ee:	4660      	mov	r0, ip
    12f0:	f007 fa70 	bl	87d4 <String::String(char const*)>
    12f4:	f10d 0c04 	add.w	ip, sp, #4
    12f8:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    12fc:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1300:	4661      	mov	r1, ip
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
	opcode_info[0x98] = {"TYA","","SZ",2,1};
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
	opcode_info[0x9a] = {"TXS","","",2,1};
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1302:	f8df b368 	ldr.w	fp, [pc, #872]	; 166c <initialize_opcode_info()+0x1584>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    1306:	f7fe feaf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    130a:	f10d 0c04 	add.w	ip, sp, #4
    130e:	4660      	mov	r0, ip
    1310:	f7fe fedc 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    1314:	f10d 0c04 	add.w	ip, sp, #4
    1318:	4649      	mov	r1, r9
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    131a:	f44f 7981 	mov.w	r9, #258	; 0x102
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    131e:	4660      	mov	r0, ip
    1320:	f007 fa58 	bl	87d4 <String::String(char const*)>
    1324:	4bc7      	ldr	r3, [pc, #796]	; (1644 <initialize_opcode_info()+0x155c>)
    1326:	f10d 0c14 	add.w	ip, sp, #20
    132a:	4619      	mov	r1, r3
    132c:	4660      	mov	r0, ip
    132e:	f007 fa51 	bl	87d4 <String::String(char const*)>
    1332:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    1336:	4621      	mov	r1, r4
    1338:	4660      	mov	r0, ip
    133a:	f007 fa4b 	bl	87d4 <String::String(char const*)>
    133e:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1342:	a901      	add	r1, sp, #4
    1344:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1348:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    134c:	f7fe fe8c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1350:	a801      	add	r0, sp, #4
    1352:	f7fe febb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    1356:	49bc      	ldr	r1, [pc, #752]	; (1648 <initialize_opcode_info()+0x1560>)
    1358:	a801      	add	r0, sp, #4
    135a:	f007 fa3b 	bl	87d4 <String::String(char const*)>
    135e:	4621      	mov	r1, r4
    1360:	a805      	add	r0, sp, #20
    1362:	f007 fa37 	bl	87d4 <String::String(char const*)>
    1366:	4639      	mov	r1, r7
    1368:	a809      	add	r0, sp, #36	; 0x24
    136a:	f007 fa33 	bl	87d4 <String::String(char const*)>
    136e:	a901      	add	r1, sp, #4
    1370:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1374:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1378:	f7fe fe76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    137c:	a801      	add	r0, sp, #4
    137e:	f7fe fea5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    1382:	4651      	mov	r1, sl
    1384:	a801      	add	r0, sp, #4
    1386:	f007 fa25 	bl	87d4 <String::String(char const*)>
    138a:	49b0      	ldr	r1, [pc, #704]	; (164c <initialize_opcode_info()+0x1564>)
    138c:	a805      	add	r0, sp, #20
    138e:	f007 fa21 	bl	87d4 <String::String(char const*)>
    1392:	4621      	mov	r1, r4
    1394:	a809      	add	r0, sp, #36	; 0x24
    1396:	f007 fa1d 	bl	87d4 <String::String(char const*)>
    139a:	f240 3305 	movw	r3, #773	; 0x305
    139e:	a901      	add	r1, sp, #4
    13a0:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
    13a4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    13a8:	f7fe fe5e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13ac:	a801      	add	r0, sp, #4
    13ae:	f7fe fe8d 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    13b2:	49a7      	ldr	r1, [pc, #668]	; (1650 <initialize_opcode_info()+0x1568>)
    13b4:	a801      	add	r0, sp, #4
    13b6:	f007 fa0d 	bl	87d4 <String::String(char const*)>
    13ba:	4621      	mov	r1, r4
    13bc:	a805      	add	r0, sp, #20
    13be:	f007 fa09 	bl	87d4 <String::String(char const*)>
    13c2:	4621      	mov	r1, r4
    13c4:	a809      	add	r0, sp, #36	; 0x24
    13c6:	f007 fa05 	bl	87d4 <String::String(char const*)>
    13ca:	a901      	add	r1, sp, #4
    13cc:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    13d0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    13d4:	f7fe fe48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13d8:	a801      	add	r0, sp, #4
    13da:	f7fe fe77 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    13de:	4651      	mov	r1, sl
    13e0:	f10d 0a04 	add.w	sl, sp, #4
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    13e4:	f8df 9288 	ldr.w	r9, [pc, #648]	; 1670 <initialize_opcode_info()+0x1588>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    13e8:	4650      	mov	r0, sl
    13ea:	f10d 0a14 	add.w	sl, sp, #20
    13ee:	f007 f9f1 	bl	87d4 <String::String(char const*)>
    13f2:	4998      	ldr	r1, [pc, #608]	; (1654 <initialize_opcode_info()+0x156c>)
    13f4:	4650      	mov	r0, sl
    13f6:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    13fa:	f007 f9eb 	bl	87d4 <String::String(char const*)>
    13fe:	4621      	mov	r1, r4
    1400:	4650      	mov	r0, sl
    1402:	f240 3a05 	movw	sl, #773	; 0x305
    1406:	f007 f9e5 	bl	87d4 <String::String(char const*)>
    140a:	f605 302c 	addw	r0, r5, #2860	; 0xb2c
    140e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1412:	f10d 0a04 	add.w	sl, sp, #4
    1416:	4651      	mov	r1, sl
    1418:	f7fe fe26 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    141c:	4650      	mov	r0, sl
    141e:	f7fe fe55 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    1422:	4650      	mov	r0, sl
    1424:	f10d 0a14 	add.w	sl, sp, #20
    1428:	4659      	mov	r1, fp
    142a:	f007 f9d3 	bl	87d4 <String::String(char const*)>
    142e:	498a      	ldr	r1, [pc, #552]	; (1658 <initialize_opcode_info()+0x1570>)
    1430:	4650      	mov	r0, sl
    1432:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1436:	f007 f9cd 	bl	87d4 <String::String(char const*)>
    143a:	4639      	mov	r1, r7
    143c:	4650      	mov	r0, sl
    143e:	f10d 0a04 	add.w	sl, sp, #4
    1442:	f007 f9c7 	bl	87d4 <String::String(char const*)>
    1446:	f240 2102 	movw	r1, #514	; 0x202
    144a:	f605 30c8 	addw	r0, r5, #3016	; 0xbc8
    144e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1452:	4651      	mov	r1, sl
    1454:	f7fe fe08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1458:	4650      	mov	r0, sl
    145a:	f7fe fe37 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    145e:	4650      	mov	r0, sl
    1460:	f10d 0a14 	add.w	sl, sp, #20
    1464:	4649      	mov	r1, r9
    1466:	f007 f9b5 	bl	87d4 <String::String(char const*)>
    146a:	497c      	ldr	r1, [pc, #496]	; (165c <initialize_opcode_info()+0x1574>)
    146c:	4650      	mov	r0, sl
    146e:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1472:	f007 f9af 	bl	87d4 <String::String(char const*)>
    1476:	4639      	mov	r1, r7
    1478:	4650      	mov	r0, sl
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    147a:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 1674 <initialize_opcode_info()+0x158c>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    147e:	f007 f9a9 	bl	87d4 <String::String(char const*)>
    1482:	f240 2006 	movw	r0, #518	; 0x206
    1486:	a901      	add	r1, sp, #4
    1488:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    148c:	f605 30fc 	addw	r0, r5, #3068	; 0xbfc
    1490:	f7fe fdea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1494:	a801      	add	r0, sp, #4
    1496:	f7fe fe19 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    149a:	4651      	mov	r1, sl
    149c:	a801      	add	r0, sp, #4
    149e:	f007 f999 	bl	87d4 <String::String(char const*)>
    14a2:	496d      	ldr	r1, [pc, #436]	; (1658 <initialize_opcode_info()+0x1570>)
    14a4:	a805      	add	r0, sp, #20
    14a6:	f007 f995 	bl	87d4 <String::String(char const*)>
    14aa:	4639      	mov	r1, r7
    14ac:	a809      	add	r0, sp, #36	; 0x24
    14ae:	f007 f991 	bl	87d4 <String::String(char const*)>
    14b2:	f240 2102 	movw	r1, #514	; 0x202
    14b6:	f505 6043 	add.w	r0, r5, #3120	; 0xc30
    14ba:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    14be:	a901      	add	r1, sp, #4
    14c0:	f7fe fdd2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14c4:	a801      	add	r0, sp, #4
    14c6:	f7fe fe01 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    14ca:	4659      	mov	r1, fp
    14cc:	a801      	add	r0, sp, #4
    14ce:	f007 f981 	bl	87d4 <String::String(char const*)>
    14d2:	4963      	ldr	r1, [pc, #396]	; (1660 <initialize_opcode_info()+0x1578>)
    14d4:	a805      	add	r0, sp, #20
    14d6:	f007 f97d 	bl	87d4 <String::String(char const*)>
    14da:	4639      	mov	r1, r7
    14dc:	a809      	add	r0, sp, #36	; 0x24
    14de:	f007 f979 	bl	87d4 <String::String(char const*)>
    14e2:	f240 2e03 	movw	lr, #515	; 0x203
    14e6:	a901      	add	r1, sp, #4
    14e8:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    14ec:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    14f0:	f7fe fdba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14f4:	a801      	add	r0, sp, #4
    14f6:	f7fe fde9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    14fa:	4649      	mov	r1, r9
    14fc:	a801      	add	r0, sp, #4
    14fe:	f007 f969 	bl	87d4 <String::String(char const*)>
    1502:	4957      	ldr	r1, [pc, #348]	; (1660 <initialize_opcode_info()+0x1578>)
    1504:	a805      	add	r0, sp, #20
    1506:	f007 f965 	bl	87d4 <String::String(char const*)>
    150a:	4639      	mov	r1, r7
    150c:	a809      	add	r0, sp, #36	; 0x24
    150e:	f007 f961 	bl	87d4 <String::String(char const*)>
    1512:	f240 2e03 	movw	lr, #515	; 0x203
    1516:	a901      	add	r1, sp, #4
    1518:	f605 40cc 	addw	r0, r5, #3276	; 0xccc
    151c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1520:	f7fe fda2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1524:	a801      	add	r0, sp, #4
    1526:	f7fe fdd1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    152a:	4651      	mov	r1, sl
    152c:	a801      	add	r0, sp, #4
    152e:	f007 f951 	bl	87d4 <String::String(char const*)>
    1532:	494b      	ldr	r1, [pc, #300]	; (1660 <initialize_opcode_info()+0x1578>)
    1534:	a805      	add	r0, sp, #20
    1536:	f007 f94d 	bl	87d4 <String::String(char const*)>
    153a:	4639      	mov	r1, r7
    153c:	a809      	add	r0, sp, #36	; 0x24
    153e:	f007 f949 	bl	87d4 <String::String(char const*)>
    1542:	f240 2e03 	movw	lr, #515	; 0x203
    1546:	a901      	add	r1, sp, #4
    1548:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    154c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1550:	f7fe fd8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1554:	a801      	add	r0, sp, #4
    1556:	f7fe fdb9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    155a:	4942      	ldr	r1, [pc, #264]	; (1664 <initialize_opcode_info()+0x157c>)
    155c:	a801      	add	r0, sp, #4
    155e:	f007 f939 	bl	87d4 <String::String(char const*)>
    1562:	4621      	mov	r1, r4
    1564:	a805      	add	r0, sp, #20
    1566:	f007 f935 	bl	87d4 <String::String(char const*)>
    156a:	4639      	mov	r1, r7
    156c:	a809      	add	r0, sp, #36	; 0x24
    156e:	f007 f931 	bl	87d4 <String::String(char const*)>
    1572:	f44f 7281 	mov.w	r2, #258	; 0x102
    1576:	a901      	add	r1, sp, #4
    1578:	f605 5068 	addw	r0, r5, #3432	; 0xd68
    157c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1580:	f7fe fd72 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1584:	a801      	add	r0, sp, #4
    1586:	f7fe fda1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    158a:	4649      	mov	r1, r9
    158c:	a801      	add	r0, sp, #4
    158e:	f007 f921 	bl	87d4 <String::String(char const*)>
    1592:	4931      	ldr	r1, [pc, #196]	; (1658 <initialize_opcode_info()+0x1570>)
    1594:	a805      	add	r0, sp, #20
    1596:	f007 f91d 	bl	87d4 <String::String(char const*)>
    159a:	4639      	mov	r1, r7
    159c:	a809      	add	r0, sp, #36	; 0x24
    159e:	f007 f919 	bl	87d4 <String::String(char const*)>
    15a2:	f240 2102 	movw	r1, #514	; 0x202
    15a6:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
    15aa:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    15ae:	a901      	add	r1, sp, #4
    15b0:	f7fe fd5a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15b4:	a801      	add	r0, sp, #4
    15b6:	f7fe fd89 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    15ba:	492b      	ldr	r1, [pc, #172]	; (1668 <initialize_opcode_info()+0x1580>)
    15bc:	a801      	add	r0, sp, #4
    15be:	f007 f909 	bl	87d4 <String::String(char const*)>
    15c2:	4621      	mov	r1, r4
    15c4:	a805      	add	r0, sp, #20
    15c6:	f007 f905 	bl	87d4 <String::String(char const*)>
    15ca:	4639      	mov	r1, r7
    15cc:	a809      	add	r0, sp, #36	; 0x24
    15ce:	f007 f901 	bl	87d4 <String::String(char const*)>
    15d2:	f44f 7281 	mov.w	r2, #258	; 0x102
    15d6:	a901      	add	r1, sp, #4
    15d8:	f505 605d 	add.w	r0, r5, #3536	; 0xdd0
    15dc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    15e0:	f7fe fd42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15e4:	a801      	add	r0, sp, #4
    15e6:	f7fe fd71 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    15ea:	4659      	mov	r1, fp
    15ec:	a801      	add	r0, sp, #4
    15ee:	f007 f8f1 	bl	87d4 <String::String(char const*)>
    15f2:	4641      	mov	r1, r8
    15f4:	a805      	add	r0, sp, #20
    15f6:	f007 f8ed 	bl	87d4 <String::String(char const*)>
    15fa:	4639      	mov	r1, r7
    15fc:	a809      	add	r0, sp, #36	; 0x24
    15fe:	f007 f8e9 	bl	87d4 <String::String(char const*)>
    1602:	f44f 7341 	mov.w	r3, #772	; 0x304
    1606:	a901      	add	r1, sp, #4
    1608:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    160c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1610:	f7fe fd2a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1614:	a801      	add	r0, sp, #4
    1616:	f7fe fd59 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    161a:	4649      	mov	r1, r9
    161c:	a801      	add	r0, sp, #4
    161e:	f007 f8d9 	bl	87d4 <String::String(char const*)>
    1622:	4641      	mov	r1, r8
    1624:	a805      	add	r0, sp, #20
    1626:	f007 f8d5 	bl	87d4 <String::String(char const*)>
    162a:	4639      	mov	r1, r7
    162c:	a809      	add	r0, sp, #36	; 0x24
    162e:	f007 f8d1 	bl	87d4 <String::String(char const*)>
    1632:	f44f 7341 	mov.w	r3, #772	; 0x304
    1636:	f605 606c 	addw	r0, r5, #3692	; 0xe6c
    163a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    163e:	e01b      	b.n	1678 <initialize_opcode_info()+0x1590>
    1640:	200008e4 	.word	0x200008e4
    1644:	2000098c 	.word	0x2000098c
    1648:	20000994 	.word	0x20000994
    164c:	200008f4 	.word	0x200008f4
    1650:	20000998 	.word	0x20000998
    1654:	200008fc 	.word	0x200008fc
    1658:	200008c8 	.word	0x200008c8
    165c:	200008ac 	.word	0x200008ac
    1660:	200008b8 	.word	0x200008b8
    1664:	200009a8 	.word	0x200009a8
    1668:	200009ac 	.word	0x200009ac
    166c:	2000099c 	.word	0x2000099c
    1670:	200009a0 	.word	0x200009a0
    1674:	200009a4 	.word	0x200009a4
    1678:	ab01      	add	r3, sp, #4
    167a:	4619      	mov	r1, r3
    167c:	f7fe fcf4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1680:	ab01      	add	r3, sp, #4
    1682:	4618      	mov	r0, r3
    1684:	f7fe fd22 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1688:	ab01      	add	r3, sp, #4
    168a:	4651      	mov	r1, sl
    168c:	4618      	mov	r0, r3
    168e:	f007 f8a1 	bl	87d4 <String::String(char const*)>
    1692:	ab05      	add	r3, sp, #20
    1694:	4641      	mov	r1, r8
    1696:	f44f 7841 	mov.w	r8, #772	; 0x304
    169a:	4618      	mov	r0, r3
    169c:	f007 f89a 	bl	87d4 <String::String(char const*)>
    16a0:	ab09      	add	r3, sp, #36	; 0x24
    16a2:	4639      	mov	r1, r7
    16a4:	4618      	mov	r0, r3
    16a6:	f007 f895 	bl	87d4 <String::String(char const*)>
    16aa:	ab01      	add	r3, sp, #4
    16ac:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
    16b0:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    16b4:	4619      	mov	r1, r3
    16b6:	f7fe fcd7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16ba:	ab01      	add	r3, sp, #4
    16bc:	4618      	mov	r0, r3
    16be:	f7fe fd05 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    16c2:	ab01      	add	r3, sp, #4
    16c4:	49d8      	ldr	r1, [pc, #864]	; (1a28 <initialize_opcode_info()+0x1940>)
    16c6:	4618      	mov	r0, r3
    16c8:	f007 f884 	bl	87d4 <String::String(char const*)>
    16cc:	ab05      	add	r3, sp, #20
    16ce:	49d7      	ldr	r1, [pc, #860]	; (1a2c <initialize_opcode_info()+0x1944>)
    16d0:	4618      	mov	r0, r3
    16d2:	f007 f87f 	bl	87d4 <String::String(char const*)>
    16d6:	ab09      	add	r3, sp, #36	; 0x24
    16d8:	4621      	mov	r1, r4
    16da:	4618      	mov	r0, r3
    16dc:	f007 f87a 	bl	87d4 <String::String(char const*)>
    16e0:	ab01      	add	r3, sp, #4
    16e2:	f240 2102 	movw	r1, #514	; 0x202
    16e6:	f605 7008 	addw	r0, r5, #3848	; 0xf08
    16ea:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    16ee:	4619      	mov	r1, r3
    16f0:	f7fe fcba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16f4:	ab01      	add	r3, sp, #4
    16f6:	4618      	mov	r0, r3
    16f8:	f7fe fce8 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    16fc:	ab01      	add	r3, sp, #4
    16fe:	4649      	mov	r1, r9
    1700:	4618      	mov	r0, r3
    1702:	f007 f867 	bl	87d4 <String::String(char const*)>
    1706:	ab05      	add	r3, sp, #20
    1708:	49c9      	ldr	r1, [pc, #804]	; (1a30 <initialize_opcode_info()+0x1948>)
    170a:	4618      	mov	r0, r3
    170c:	f007 f862 	bl	87d4 <String::String(char const*)>
    1710:	ab09      	add	r3, sp, #36	; 0x24
    1712:	4639      	mov	r1, r7
    1714:	4618      	mov	r0, r3
    1716:	f007 f85d 	bl	87d4 <String::String(char const*)>
    171a:	ab01      	add	r3, sp, #4
    171c:	f240 2105 	movw	r1, #517	; 0x205
    1720:	f605 703c 	addw	r0, r5, #3900	; 0xf3c
    1724:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1728:	4619      	mov	r1, r3
    172a:	f7fe fc9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    172e:	ab01      	add	r3, sp, #4
    1730:	4618      	mov	r0, r3
    1732:	f7fe fccb 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1736:	ab01      	add	r3, sp, #4
    1738:	4659      	mov	r1, fp
    173a:	4618      	mov	r0, r3
    173c:	f007 f84a 	bl	87d4 <String::String(char const*)>
    1740:	ab05      	add	r3, sp, #20
    1742:	49bc      	ldr	r1, [pc, #752]	; (1a34 <initialize_opcode_info()+0x194c>)
    1744:	4618      	mov	r0, r3
    1746:	f007 f845 	bl	87d4 <String::String(char const*)>
    174a:	ab09      	add	r3, sp, #36	; 0x24
    174c:	4639      	mov	r1, r7
    174e:	4618      	mov	r0, r3
    1750:	f007 f840 	bl	87d4 <String::String(char const*)>
    1754:	ab01      	add	r3, sp, #4
    1756:	f44f 7c01 	mov.w	ip, #516	; 0x204
    175a:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
    175e:	4619      	mov	r1, r3
    1760:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1764:	f7fe fc80 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1768:	ab01      	add	r3, sp, #4
    176a:	4618      	mov	r0, r3
    176c:	f7fe fcae 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1770:	ab01      	add	r3, sp, #4
    1772:	4649      	mov	r1, r9
    1774:	4618      	mov	r0, r3
    1776:	f007 f82d 	bl	87d4 <String::String(char const*)>
    177a:	ab05      	add	r3, sp, #20
    177c:	49ad      	ldr	r1, [pc, #692]	; (1a34 <initialize_opcode_info()+0x194c>)
    177e:	4618      	mov	r0, r3
    1780:	f007 f828 	bl	87d4 <String::String(char const*)>
    1784:	ab09      	add	r3, sp, #36	; 0x24
    1786:	4639      	mov	r1, r7
    1788:	4618      	mov	r0, r3
    178a:	f007 f823 	bl	87d4 <String::String(char const*)>
    178e:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1792:	ab01      	add	r3, sp, #4
    1794:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1798:	f602 302c 	addw	r0, r2, #2860	; 0xb2c
    179c:	4619      	mov	r1, r3
    179e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    17a2:	f7fe fc61 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17a6:	ab01      	add	r3, sp, #4
    17a8:	4618      	mov	r0, r3
    17aa:	f7fe fc8f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    17ae:	ab01      	add	r3, sp, #4
    17b0:	4651      	mov	r1, sl
    17b2:	4618      	mov	r0, r3
    17b4:	f007 f80e 	bl	87d4 <String::String(char const*)>
    17b8:	4b9f      	ldr	r3, [pc, #636]	; (1a38 <initialize_opcode_info()+0x1950>)
    17ba:	4619      	mov	r1, r3
    17bc:	ab05      	add	r3, sp, #20
    17be:	4618      	mov	r0, r3
    17c0:	f007 f808 	bl	87d4 <String::String(char const*)>
    17c4:	ab09      	add	r3, sp, #36	; 0x24
    17c6:	4639      	mov	r1, r7
    17c8:	4618      	mov	r0, r3
    17ca:	f007 f803 	bl	87d4 <String::String(char const*)>
    17ce:	ab01      	add	r3, sp, #4
    17d0:	f44f 7c01 	mov.w	ip, #516	; 0x204
    17d4:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
    17d8:	4619      	mov	r1, r3
	opcode_info[0xb8] = {"CLV","","V",2,1};
    17da:	4d98      	ldr	r5, [pc, #608]	; (1a3c <initialize_opcode_info()+0x1954>)
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    17dc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    17e0:	f7fe fc42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17e4:	ab01      	add	r3, sp, #4
    17e6:	4618      	mov	r0, r3
    17e8:	f7fe fc70 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    17ec:	ab01      	add	r3, sp, #4
    17ee:	4994      	ldr	r1, [pc, #592]	; (1a40 <initialize_opcode_info()+0x1958>)
    17f0:	4618      	mov	r0, r3
    17f2:	f006 ffef 	bl	87d4 <String::String(char const*)>
    17f6:	ab05      	add	r3, sp, #20
    17f8:	4621      	mov	r1, r4
    17fa:	4618      	mov	r0, r3
    17fc:	f006 ffea 	bl	87d4 <String::String(char const*)>
    1800:	ab09      	add	r3, sp, #36	; 0x24
    1802:	4990      	ldr	r1, [pc, #576]	; (1a44 <initialize_opcode_info()+0x195c>)
    1804:	4618      	mov	r0, r3
    1806:	f006 ffe5 	bl	87d4 <String::String(char const*)>
    180a:	ab01      	add	r3, sp, #4
    180c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1810:	4628      	mov	r0, r5
    1812:	4619      	mov	r1, r3
    1814:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1818:	f7fe fc26 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    181c:	ab01      	add	r3, sp, #4
    181e:	4618      	mov	r0, r3
    1820:	f7fe fc54 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1824:	ab01      	add	r3, sp, #4
    1826:	4649      	mov	r1, r9
    1828:	4618      	mov	r0, r3
    182a:	f006 ffd3 	bl	87d4 <String::String(char const*)>
    182e:	ab05      	add	r3, sp, #20
    1830:	4985      	ldr	r1, [pc, #532]	; (1a48 <initialize_opcode_info()+0x1960>)
    1832:	4618      	mov	r0, r3
    1834:	f006 ffce 	bl	87d4 <String::String(char const*)>
    1838:	ab09      	add	r3, sp, #36	; 0x24
    183a:	4639      	mov	r1, r7
    183c:	4618      	mov	r0, r3
    183e:	f006 ffc9 	bl	87d4 <String::String(char const*)>
    1842:	ab01      	add	r3, sp, #4
    1844:	f105 0034 	add.w	r0, r5, #52	; 0x34
    1848:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    184c:	4619      	mov	r1, r3
    184e:	f7fe fc0b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1852:	ab01      	add	r3, sp, #4
    1854:	4618      	mov	r0, r3
    1856:	f7fe fc39 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    185a:	ab01      	add	r3, sp, #4
    185c:	497b      	ldr	r1, [pc, #492]	; (1a4c <initialize_opcode_info()+0x1964>)
    185e:	4618      	mov	r0, r3
    1860:	f006 ffb8 	bl	87d4 <String::String(char const*)>
    1864:	ab05      	add	r3, sp, #20
    1866:	4621      	mov	r1, r4
    1868:	4618      	mov	r0, r3
    186a:	f006 ffb3 	bl	87d4 <String::String(char const*)>
    186e:	ab09      	add	r3, sp, #36	; 0x24
    1870:	4621      	mov	r1, r4
    1872:	4618      	mov	r0, r3
    1874:	f006 ffae 	bl	87d4 <String::String(char const*)>
    1878:	ab01      	add	r3, sp, #4
    187a:	f44f 7281 	mov.w	r2, #258	; 0x102
    187e:	f105 0068 	add.w	r0, r5, #104	; 0x68
    1882:	4619      	mov	r1, r3
    1884:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1888:	f7fe fbee 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    188c:	ab01      	add	r3, sp, #4
    188e:	4618      	mov	r0, r3
    1890:	f7fe fc1c 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1894:	ab01      	add	r3, sp, #4
    1896:	4659      	mov	r1, fp
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1898:	f10d 0b04 	add.w	fp, sp, #4
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    189c:	4618      	mov	r0, r3
    189e:	f006 ff99 	bl	87d4 <String::String(char const*)>
    18a2:	ab05      	add	r3, sp, #20
    18a4:	496a      	ldr	r1, [pc, #424]	; (1a50 <initialize_opcode_info()+0x1968>)
    18a6:	4618      	mov	r0, r3
    18a8:	f006 ff94 	bl	87d4 <String::String(char const*)>
    18ac:	ab09      	add	r3, sp, #36	; 0x24
    18ae:	4639      	mov	r1, r7
    18b0:	4618      	mov	r0, r3
    18b2:	f006 ff8f 	bl	87d4 <String::String(char const*)>
    18b6:	ab01      	add	r3, sp, #4
    18b8:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
    18bc:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    18c0:	4619      	mov	r1, r3
    18c2:	f7fe fbd1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18c6:	ab01      	add	r3, sp, #4
    18c8:	4618      	mov	r0, r3
    18ca:	f7fe fbff 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18ce:	ab01      	add	r3, sp, #4
    18d0:	4649      	mov	r1, r9
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    18d2:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1a60 <initialize_opcode_info()+0x1978>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    18d6:	4618      	mov	r0, r3
    18d8:	f006 ff7c 	bl	87d4 <String::String(char const*)>
    18dc:	ab05      	add	r3, sp, #20
    18de:	495c      	ldr	r1, [pc, #368]	; (1a50 <initialize_opcode_info()+0x1968>)
    18e0:	4618      	mov	r0, r3
    18e2:	f006 ff77 	bl	87d4 <String::String(char const*)>
    18e6:	ab09      	add	r3, sp, #36	; 0x24
    18e8:	4639      	mov	r1, r7
    18ea:	4618      	mov	r0, r3
    18ec:	f006 ff72 	bl	87d4 <String::String(char const*)>
    18f0:	ab01      	add	r3, sp, #4
    18f2:	f505 7082 	add.w	r0, r5, #260	; 0x104
    18f6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    18fa:	4619      	mov	r1, r3
    18fc:	f7fe fbb4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1900:	ab01      	add	r3, sp, #4
    1902:	4618      	mov	r0, r3
    1904:	f7fe fbe2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1908:	ab01      	add	r3, sp, #4
    190a:	4651      	mov	r1, sl
    190c:	f10d 0a04 	add.w	sl, sp, #4
    1910:	4618      	mov	r0, r3
    1912:	f006 ff5f 	bl	87d4 <String::String(char const*)>
    1916:	ab05      	add	r3, sp, #20
    1918:	494b      	ldr	r1, [pc, #300]	; (1a48 <initialize_opcode_info()+0x1960>)
    191a:	4618      	mov	r0, r3
    191c:	f006 ff5a 	bl	87d4 <String::String(char const*)>
    1920:	ab09      	add	r3, sp, #36	; 0x24
    1922:	4639      	mov	r1, r7
    1924:	4618      	mov	r0, r3
    1926:	f006 ff55 	bl	87d4 <String::String(char const*)>
    192a:	4651      	mov	r1, sl
    192c:	f505 709c 	add.w	r0, r5, #312	; 0x138
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1930:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a64 <initialize_opcode_info()+0x197c>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1934:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1938:	f7fe fb96 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    193c:	4658      	mov	r0, fp
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    193e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1a68 <initialize_opcode_info()+0x1980>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1942:	f7fe fbc3 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1946:	4658      	mov	r0, fp
    1948:	f10d 0b14 	add.w	fp, sp, #20
    194c:	4651      	mov	r1, sl
    194e:	f006 ff41 	bl	87d4 <String::String(char const*)>
    1952:	4940      	ldr	r1, [pc, #256]	; (1a54 <initialize_opcode_info()+0x196c>)
    1954:	4658      	mov	r0, fp
    1956:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    195a:	f006 ff3b 	bl	87d4 <String::String(char const*)>
    195e:	4631      	mov	r1, r6
    1960:	4658      	mov	r0, fp
    1962:	f10d 0b04 	add.w	fp, sp, #4
    1966:	f006 ff35 	bl	87d4 <String::String(char const*)>
    196a:	f240 2102 	movw	r1, #514	; 0x202
    196e:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
    1972:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1976:	4659      	mov	r1, fp
    1978:	f7fe fb76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    197c:	4658      	mov	r0, fp
    197e:	f7fe fba5 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1982:	4658      	mov	r0, fp
    1984:	f10d 0b14 	add.w	fp, sp, #20
    1988:	4641      	mov	r1, r8
    198a:	f006 ff23 	bl	87d4 <String::String(char const*)>
    198e:	4932      	ldr	r1, [pc, #200]	; (1a58 <initialize_opcode_info()+0x1970>)
    1990:	4658      	mov	r0, fp
    1992:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1996:	f006 ff1d 	bl	87d4 <String::String(char const*)>
    199a:	4631      	mov	r1, r6
    199c:	4658      	mov	r0, fp
    199e:	f10d 0b04 	add.w	fp, sp, #4
    19a2:	f006 ff17 	bl	87d4 <String::String(char const*)>
    19a6:	f240 2006 	movw	r0, #518	; 0x206
    19aa:	4659      	mov	r1, fp
    19ac:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    19b0:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
    19b4:	f7fe fb58 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19b8:	4658      	mov	r0, fp
    19ba:	f7fe fb87 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    19be:	4658      	mov	r0, fp
    19c0:	f10d 0b14 	add.w	fp, sp, #20
    19c4:	4651      	mov	r1, sl
    19c6:	f006 ff05 	bl	87d4 <String::String(char const*)>
    19ca:	4924      	ldr	r1, [pc, #144]	; (1a5c <initialize_opcode_info()+0x1974>)
    19cc:	4658      	mov	r0, fp
    19ce:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    19d2:	f006 feff 	bl	87d4 <String::String(char const*)>
    19d6:	4631      	mov	r1, r6
    19d8:	4658      	mov	r0, fp
    19da:	f240 2b03 	movw	fp, #515	; 0x203
    19de:	f006 fef9 	bl	87d4 <String::String(char const*)>
    19e2:	ab01      	add	r3, sp, #4
    19e4:	f505 701c 	add.w	r0, r5, #624	; 0x270
    19e8:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    19ec:	4619      	mov	r1, r3
    19ee:	f7fe fb3b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19f2:	ab01      	add	r3, sp, #4
    19f4:	4618      	mov	r0, r3
    19f6:	f7fe fb69 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    19fa:	ab01      	add	r3, sp, #4
    19fc:	4641      	mov	r1, r8
    19fe:	4618      	mov	r0, r3
    1a00:	f006 fee8 	bl	87d4 <String::String(char const*)>
    1a04:	ab05      	add	r3, sp, #20
    1a06:	4915      	ldr	r1, [pc, #84]	; (1a5c <initialize_opcode_info()+0x1974>)
    1a08:	4618      	mov	r0, r3
    1a0a:	f006 fee3 	bl	87d4 <String::String(char const*)>
    1a0e:	ab09      	add	r3, sp, #36	; 0x24
    1a10:	4631      	mov	r1, r6
    1a12:	4618      	mov	r0, r3
    1a14:	f006 fede 	bl	87d4 <String::String(char const*)>
    1a18:	ab01      	add	r3, sp, #4
    1a1a:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
    1a1e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1a22:	4619      	mov	r1, r3
    1a24:	e022      	b.n	1a6c <initialize_opcode_info()+0x1984>
    1a26:	bf00      	nop
    1a28:	200009b0 	.word	0x200009b0
    1a2c:	200008d8 	.word	0x200008d8
    1a30:	200008dc 	.word	0x200008dc
    1a34:	200008e4 	.word	0x200008e4
    1a38:	2000098c 	.word	0x2000098c
    1a3c:	20017978 	.word	0x20017978
    1a40:	200009b4 	.word	0x200009b4
    1a44:	200009b8 	.word	0x200009b8
    1a48:	200008f4 	.word	0x200008f4
    1a4c:	200009bc 	.word	0x200009bc
    1a50:	200008fc 	.word	0x200008fc
    1a54:	200008c8 	.word	0x200008c8
    1a58:	200008ac 	.word	0x200008ac
    1a5c:	200008b8 	.word	0x200008b8
    1a60:	200009c8 	.word	0x200009c8
    1a64:	200009c0 	.word	0x200009c0
    1a68:	200009c4 	.word	0x200009c4
    1a6c:	f7fe fafc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a70:	ab01      	add	r3, sp, #4
    1a72:	4618      	mov	r0, r3
    1a74:	f7fe fb2a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1a78:	ab01      	add	r3, sp, #4
    1a7a:	4649      	mov	r1, r9
    1a7c:	4618      	mov	r0, r3
    1a7e:	f006 fea9 	bl	87d4 <String::String(char const*)>
    1a82:	ab05      	add	r3, sp, #20
    1a84:	49d6      	ldr	r1, [pc, #856]	; (1de0 <initialize_opcode_info()+0x1cf8>)
    1a86:	4618      	mov	r0, r3
    1a88:	f006 fea4 	bl	87d4 <String::String(char const*)>
    1a8c:	ab09      	add	r3, sp, #36	; 0x24
    1a8e:	4639      	mov	r1, r7
    1a90:	4618      	mov	r0, r3
    1a92:	f006 fe9f 	bl	87d4 <String::String(char const*)>
    1a96:	ab01      	add	r3, sp, #4
    1a98:	f240 2e05 	movw	lr, #517	; 0x205
    1a9c:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
    1aa0:	4619      	mov	r1, r3
    1aa2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1aa6:	f7fe fadf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1aaa:	ab01      	add	r3, sp, #4
    1aac:	4618      	mov	r0, r3
    1aae:	f7fe fb0d 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1ab2:	ab01      	add	r3, sp, #4
    1ab4:	49cb      	ldr	r1, [pc, #812]	; (1de4 <initialize_opcode_info()+0x1cfc>)
    1ab6:	4618      	mov	r0, r3
    1ab8:	f006 fe8c 	bl	87d4 <String::String(char const*)>
    1abc:	ab05      	add	r3, sp, #20
    1abe:	4621      	mov	r1, r4
    1ac0:	4618      	mov	r0, r3
    1ac2:	f006 fe87 	bl	87d4 <String::String(char const*)>
    1ac6:	ab09      	add	r3, sp, #36	; 0x24
    1ac8:	4621      	mov	r1, r4
    1aca:	4618      	mov	r0, r3
    1acc:	f006 fe82 	bl	87d4 <String::String(char const*)>
    1ad0:	ab01      	add	r3, sp, #4
    1ad2:	f44f 7281 	mov.w	r2, #258	; 0x102
    1ad6:	f505 7050 	add.w	r0, r5, #832	; 0x340
    1ada:	4619      	mov	r1, r3
    1adc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ae0:	f7fe fac2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ae4:	ab01      	add	r3, sp, #4
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7fe faf0 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1aec:	ab01      	add	r3, sp, #4
    1aee:	4641      	mov	r1, r8
    1af0:	4618      	mov	r0, r3
    1af2:	f006 fe6f 	bl	87d4 <String::String(char const*)>
    1af6:	ab05      	add	r3, sp, #20
    1af8:	49bb      	ldr	r1, [pc, #748]	; (1de8 <initialize_opcode_info()+0x1d00>)
    1afa:	4618      	mov	r0, r3
    1afc:	f006 fe6a 	bl	87d4 <String::String(char const*)>
    1b00:	ab09      	add	r3, sp, #36	; 0x24
    1b02:	4631      	mov	r1, r6
    1b04:	4618      	mov	r0, r3
    1b06:	f006 fe65 	bl	87d4 <String::String(char const*)>
    1b0a:	ab01      	add	r3, sp, #4
    1b0c:	f240 2102 	movw	r1, #514	; 0x202
    1b10:	f505 705d 	add.w	r0, r5, #884	; 0x374
    1b14:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1b18:	4619      	mov	r1, r3
    1b1a:	f7fe faa5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b1e:	ab01      	add	r3, sp, #4
    1b20:	4618      	mov	r0, r3
    1b22:	f7fe fad3 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1b26:	ab01      	add	r3, sp, #4
    1b28:	49b0      	ldr	r1, [pc, #704]	; (1dec <initialize_opcode_info()+0x1d04>)
    1b2a:	4618      	mov	r0, r3
    1b2c:	f006 fe52 	bl	87d4 <String::String(char const*)>
    1b30:	ab05      	add	r3, sp, #20
    1b32:	4621      	mov	r1, r4
    1b34:	4618      	mov	r0, r3
    1b36:	f006 fe4d 	bl	87d4 <String::String(char const*)>
    1b3a:	ab09      	add	r3, sp, #36	; 0x24
    1b3c:	4639      	mov	r1, r7
    1b3e:	4618      	mov	r0, r3
    1b40:	f006 fe48 	bl	87d4 <String::String(char const*)>
    1b44:	ab01      	add	r3, sp, #4
    1b46:	f44f 7281 	mov.w	r2, #258	; 0x102
    1b4a:	f505 706a 	add.w	r0, r5, #936	; 0x3a8
    1b4e:	4619      	mov	r1, r3
    1b50:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1b54:	f7fe fa88 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b58:	ab01      	add	r3, sp, #4
    1b5a:	4618      	mov	r0, r3
    1b5c:	f7fe fab6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1b60:	4651      	mov	r1, sl
    1b62:	f10d 0a04 	add.w	sl, sp, #4
    1b66:	4650      	mov	r0, sl
    1b68:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 1e14 <initialize_opcode_info()+0x1d2c>
    1b6c:	f006 fe32 	bl	87d4 <String::String(char const*)>
    1b70:	ab05      	add	r3, sp, #20
    1b72:	4651      	mov	r1, sl
    1b74:	4618      	mov	r0, r3
    1b76:	f006 fe2d 	bl	87d4 <String::String(char const*)>
    1b7a:	ab09      	add	r3, sp, #36	; 0x24
    1b7c:	4631      	mov	r1, r6
    1b7e:	4618      	mov	r0, r3
    1b80:	f006 fe28 	bl	87d4 <String::String(char const*)>
    1b84:	f44f 7341 	mov.w	r3, #772	; 0x304
    1b88:	a901      	add	r1, sp, #4
    1b8a:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    1b8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1b92:	f7fe fa69 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b96:	a801      	add	r0, sp, #4
    1b98:	f7fe fa98 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1b9c:	4641      	mov	r1, r8
    1b9e:	a801      	add	r0, sp, #4
    1ba0:	f006 fe18 	bl	87d4 <String::String(char const*)>
    1ba4:	4651      	mov	r1, sl
    1ba6:	a805      	add	r0, sp, #20
    1ba8:	f006 fe14 	bl	87d4 <String::String(char const*)>
    1bac:	4631      	mov	r1, r6
    1bae:	a809      	add	r0, sp, #36	; 0x24
    1bb0:	f006 fe10 	bl	87d4 <String::String(char const*)>
    1bb4:	f44f 7341 	mov.w	r3, #772	; 0x304
    1bb8:	a901      	add	r1, sp, #4
    1bba:	f205 4044 	addw	r0, r5, #1092	; 0x444
    1bbe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1bc2:	f7fe fa51 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bc6:	a801      	add	r0, sp, #4
    1bc8:	f7fe fa80 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1bcc:	4649      	mov	r1, r9
    1bce:	a801      	add	r0, sp, #4
    1bd0:	f006 fe00 	bl	87d4 <String::String(char const*)>
    1bd4:	4651      	mov	r1, sl
    1bd6:	a805      	add	r0, sp, #20
    1bd8:	f006 fdfc 	bl	87d4 <String::String(char const*)>
    1bdc:	4639      	mov	r1, r7
    1bde:	a809      	add	r0, sp, #36	; 0x24
    1be0:	f006 fdf8 	bl	87d4 <String::String(char const*)>
    1be4:	f240 3206 	movw	r2, #774	; 0x306
    1be8:	a901      	add	r1, sp, #4
    1bea:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    1bee:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1bf2:	f7fe fa39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bf6:	a801      	add	r0, sp, #4
    1bf8:	f7fe fa68 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1bfc:	497c      	ldr	r1, [pc, #496]	; (1df0 <initialize_opcode_info()+0x1d08>)
    1bfe:	a801      	add	r0, sp, #4
    1c00:	f006 fde8 	bl	87d4 <String::String(char const*)>
    1c04:	4a7b      	ldr	r2, [pc, #492]	; (1df4 <initialize_opcode_info()+0x1d0c>)
    1c06:	a805      	add	r0, sp, #20
    1c08:	4611      	mov	r1, r2
    1c0a:	f006 fde3 	bl	87d4 <String::String(char const*)>
    1c0e:	4621      	mov	r1, r4
    1c10:	a809      	add	r0, sp, #36	; 0x24
    1c12:	f006 fddf 	bl	87d4 <String::String(char const*)>
    1c16:	f240 2102 	movw	r1, #514	; 0x202
    1c1a:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
    1c1e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1c22:	a901      	add	r1, sp, #4
    1c24:	f7fe fa20 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c28:	a801      	add	r0, sp, #4
    1c2a:	f7fe fa4f 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1c2e:	4641      	mov	r1, r8
    1c30:	a801      	add	r0, sp, #4
    1c32:	f006 fdcf 	bl	87d4 <String::String(char const*)>
    1c36:	4b70      	ldr	r3, [pc, #448]	; (1df8 <initialize_opcode_info()+0x1d10>)
    1c38:	a805      	add	r0, sp, #20
    1c3a:	4619      	mov	r1, r3
    1c3c:	f006 fdca 	bl	87d4 <String::String(char const*)>
    1c40:	4631      	mov	r1, r6
    1c42:	a809      	add	r0, sp, #36	; 0x24
    1c44:	f006 fdc6 	bl	87d4 <String::String(char const*)>
    1c48:	f240 2e05 	movw	lr, #517	; 0x205
    1c4c:	a901      	add	r1, sp, #4
    1c4e:	f205 5014 	addw	r0, r5, #1300	; 0x514
    1c52:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1c56:	f7fe fa07 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c5a:	a801      	add	r0, sp, #4
    1c5c:	f7fe fa36 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1c60:	4641      	mov	r1, r8
    1c62:	a801      	add	r0, sp, #4
    1c64:	f006 fdb6 	bl	87d4 <String::String(char const*)>
    1c68:	4964      	ldr	r1, [pc, #400]	; (1dfc <initialize_opcode_info()+0x1d14>)
    1c6a:	a805      	add	r0, sp, #20
    1c6c:	f006 fdb2 	bl	87d4 <String::String(char const*)>
    1c70:	4631      	mov	r1, r6
    1c72:	a809      	add	r0, sp, #36	; 0x24
    1c74:	f006 fdae 	bl	87d4 <String::String(char const*)>
    1c78:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1c7c:	a901      	add	r1, sp, #4
    1c7e:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
    1c82:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1c86:	f7fe f9ef 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c8a:	a801      	add	r0, sp, #4
    1c8c:	f7fe fa1e 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1c90:	4649      	mov	r1, r9
    1c92:	a801      	add	r0, sp, #4
    1c94:	f006 fd9e 	bl	87d4 <String::String(char const*)>
    1c98:	4958      	ldr	r1, [pc, #352]	; (1dfc <initialize_opcode_info()+0x1d14>)
    1c9a:	a805      	add	r0, sp, #20
    1c9c:	f006 fd9a 	bl	87d4 <String::String(char const*)>
    1ca0:	4639      	mov	r1, r7
    1ca2:	a809      	add	r0, sp, #36	; 0x24
    1ca4:	f006 fd96 	bl	87d4 <String::String(char const*)>
    1ca8:	f240 2006 	movw	r0, #518	; 0x206
    1cac:	a901      	add	r1, sp, #4
    1cae:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1cb2:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    1cb6:	f7fe f9d7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cba:	a801      	add	r0, sp, #4
    1cbc:	f7fe fa06 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    1cc0:	494f      	ldr	r1, [pc, #316]	; (1e00 <initialize_opcode_info()+0x1d18>)
    1cc2:	a801      	add	r0, sp, #4
    1cc4:	f006 fd86 	bl	87d4 <String::String(char const*)>
    1cc8:	4621      	mov	r1, r4
    1cca:	a805      	add	r0, sp, #20
    1ccc:	f006 fd82 	bl	87d4 <String::String(char const*)>
    1cd0:	494c      	ldr	r1, [pc, #304]	; (1e04 <initialize_opcode_info()+0x1d1c>)
    1cd2:	a809      	add	r0, sp, #36	; 0x24
    1cd4:	f006 fd7e 	bl	87d4 <String::String(char const*)>
    1cd8:	f44f 7281 	mov.w	r2, #258	; 0x102
    1cdc:	a901      	add	r1, sp, #4
    1cde:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1ce2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ce6:	f7fe f9bf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cea:	a801      	add	r0, sp, #4
    1cec:	f7fe f9ee 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    1cf0:	4641      	mov	r1, r8
    1cf2:	a801      	add	r0, sp, #4
    1cf4:	f006 fd6e 	bl	87d4 <String::String(char const*)>
    1cf8:	4943      	ldr	r1, [pc, #268]	; (1e08 <initialize_opcode_info()+0x1d20>)
    1cfa:	a805      	add	r0, sp, #20
    1cfc:	f006 fd6a 	bl	87d4 <String::String(char const*)>
    1d00:	4631      	mov	r1, r6
    1d02:	a809      	add	r0, sp, #36	; 0x24
    1d04:	f006 fd66 	bl	87d4 <String::String(char const*)>
    1d08:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d0c:	a901      	add	r1, sp, #4
    1d0e:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
    1d12:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d16:	f7fe f9a7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d1a:	a801      	add	r0, sp, #4
    1d1c:	f7fe f9d6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    1d20:	4641      	mov	r1, r8
    1d22:	f10d 0804 	add.w	r8, sp, #4
    1d26:	4640      	mov	r0, r8
    1d28:	f10d 0814 	add.w	r8, sp, #20
    1d2c:	f006 fd52 	bl	87d4 <String::String(char const*)>
    1d30:	4936      	ldr	r1, [pc, #216]	; (1e0c <initialize_opcode_info()+0x1d24>)
    1d32:	4640      	mov	r0, r8
    1d34:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d38:	f006 fd4c 	bl	87d4 <String::String(char const*)>
    1d3c:	4631      	mov	r1, r6
    1d3e:	4640      	mov	r0, r8
    1d40:	f10d 0804 	add.w	r8, sp, #4
    1d44:	f006 fd46 	bl	87d4 <String::String(char const*)>
    1d48:	f44f 7341 	mov.w	r3, #772	; 0x304
    1d4c:	4641      	mov	r1, r8
    1d4e:	f205 7084 	addw	r0, r5, #1924	; 0x784
    1d52:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1d56:	f7fe f987 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d5a:	4640      	mov	r0, r8
    1d5c:	f7fe f9b6 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    1d60:	4640      	mov	r0, r8
    1d62:	f10d 0814 	add.w	r8, sp, #20
    1d66:	4649      	mov	r1, r9
    1d68:	f006 fd34 	bl	87d4 <String::String(char const*)>
    1d6c:	4927      	ldr	r1, [pc, #156]	; (1e0c <initialize_opcode_info()+0x1d24>)
    1d6e:	4640      	mov	r0, r8
    1d70:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1d74:	f006 fd2e 	bl	87d4 <String::String(char const*)>
    1d78:	f240 3907 	movw	r9, #775	; 0x307
    1d7c:	4640      	mov	r0, r8
    1d7e:	f10d 0804 	add.w	r8, sp, #4
    1d82:	4639      	mov	r1, r7
    1d84:	f006 fd26 	bl	87d4 <String::String(char const*)>
    1d88:	4641      	mov	r1, r8
    1d8a:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1d8e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1d92:	f7fe f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d96:	4640      	mov	r0, r8
    1d98:	f7fe f998 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1d9c:	4640      	mov	r0, r8
    1d9e:	f10d 0814 	add.w	r8, sp, #20
    1da2:	491b      	ldr	r1, [pc, #108]	; (1e10 <initialize_opcode_info()+0x1d28>)
    1da4:	f006 fd16 	bl	87d4 <String::String(char const*)>
    1da8:	490f      	ldr	r1, [pc, #60]	; (1de8 <initialize_opcode_info()+0x1d00>)
    1daa:	4640      	mov	r0, r8
    1dac:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1db0:	f006 fd10 	bl	87d4 <String::String(char const*)>
    1db4:	4631      	mov	r1, r6
    1db6:	4640      	mov	r0, r8
    1db8:	f10d 0804 	add.w	r8, sp, #4
    1dbc:	f006 fd0a 	bl	87d4 <String::String(char const*)>
    1dc0:	f240 2102 	movw	r1, #514	; 0x202
    1dc4:	f505 6002 	add.w	r0, r5, #2080	; 0x820
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1dc8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e18 <initialize_opcode_info()+0x1d30>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1dcc:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1dd0:	4641      	mov	r1, r8
    1dd2:	f7fe f949 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dd6:	4640      	mov	r0, r8
    1dd8:	f7fe f978 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1ddc:	ab01      	add	r3, sp, #4
    1dde:	e01d      	b.n	1e1c <initialize_opcode_info()+0x1d34>
    1de0:	200008b8 	.word	0x200008b8
    1de4:	200009cc 	.word	0x200009cc
    1de8:	200008c8 	.word	0x200008c8
    1dec:	200009d0 	.word	0x200009d0
    1df0:	200009d4 	.word	0x200009d4
    1df4:	200008d8 	.word	0x200008d8
    1df8:	200008dc 	.word	0x200008dc
    1dfc:	200008e4 	.word	0x200008e4
    1e00:	200009d8 	.word	0x200009d8
    1e04:	200009dc 	.word	0x200009dc
    1e08:	200008f4 	.word	0x200008f4
    1e0c:	200008fc 	.word	0x200008fc
    1e10:	200009e0 	.word	0x200009e0
    1e14:	200008d0 	.word	0x200008d0
    1e18:	200009e4 	.word	0x200009e4
    1e1c:	4649      	mov	r1, r9
    1e1e:	f8df 8370 	ldr.w	r8, [pc, #880]	; 2190 <initialize_opcode_info()+0x20a8>
    1e22:	4618      	mov	r0, r3
    1e24:	f006 fcd6 	bl	87d4 <String::String(char const*)>
    1e28:	ab05      	add	r3, sp, #20
    1e2a:	49cb      	ldr	r1, [pc, #812]	; (2158 <initialize_opcode_info()+0x2070>)
    1e2c:	4618      	mov	r0, r3
    1e2e:	f006 fcd1 	bl	87d4 <String::String(char const*)>
    1e32:	ab09      	add	r3, sp, #36	; 0x24
    1e34:	4641      	mov	r1, r8
    1e36:	4618      	mov	r0, r3
    1e38:	f006 fccc 	bl	87d4 <String::String(char const*)>
    1e3c:	f240 2006 	movw	r0, #518	; 0x206
    1e40:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1e44:	a801      	add	r0, sp, #4
    1e46:	4601      	mov	r1, r0
    1e48:	f605 0054 	addw	r0, r5, #2132	; 0x854
    1e4c:	f7fe f90c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e50:	a801      	add	r0, sp, #4
    1e52:	f7fe f93b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    1e56:	49c1      	ldr	r1, [pc, #772]	; (215c <initialize_opcode_info()+0x2074>)
    1e58:	a801      	add	r0, sp, #4
    1e5a:	f006 fcbb 	bl	87d4 <String::String(char const*)>
    1e5e:	49c0      	ldr	r1, [pc, #768]	; (2160 <initialize_opcode_info()+0x2078>)
    1e60:	a805      	add	r0, sp, #20
    1e62:	f006 fcb7 	bl	87d4 <String::String(char const*)>
    1e66:	4631      	mov	r1, r6
    1e68:	a809      	add	r0, sp, #36	; 0x24
    1e6a:	f006 fcb3 	bl	87d4 <String::String(char const*)>
    1e6e:	a801      	add	r0, sp, #4
    1e70:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1e74:	4601      	mov	r1, r0
    1e76:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
    1e7a:	f7fe f8f5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e7e:	a801      	add	r0, sp, #4
    1e80:	f7fe f924 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1e84:	4649      	mov	r1, r9
    1e86:	a801      	add	r0, sp, #4
    1e88:	f006 fca4 	bl	87d4 <String::String(char const*)>
    1e8c:	49b4      	ldr	r1, [pc, #720]	; (2160 <initialize_opcode_info()+0x2078>)
    1e8e:	a805      	add	r0, sp, #20
    1e90:	f006 fca0 	bl	87d4 <String::String(char const*)>
    1e94:	4641      	mov	r1, r8
    1e96:	a809      	add	r0, sp, #36	; 0x24
    1e98:	f006 fc9c 	bl	87d4 <String::String(char const*)>
    1e9c:	a801      	add	r0, sp, #4
    1e9e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1ea2:	4601      	mov	r1, r0
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1ea4:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 2194 <initialize_opcode_info()+0x20ac>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1ea8:	f605 1024 	addw	r0, r5, #2340	; 0x924
    1eac:	f7fe f8dc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1eb0:	a801      	add	r0, sp, #4
    1eb2:	f7fe f90b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1eb6:	4659      	mov	r1, fp
    1eb8:	a801      	add	r0, sp, #4
    1eba:	f006 fc8b 	bl	87d4 <String::String(char const*)>
    1ebe:	49a8      	ldr	r1, [pc, #672]	; (2160 <initialize_opcode_info()+0x2078>)
    1ec0:	a805      	add	r0, sp, #20
    1ec2:	f006 fc87 	bl	87d4 <String::String(char const*)>
    1ec6:	4639      	mov	r1, r7
    1ec8:	a809      	add	r0, sp, #36	; 0x24
    1eca:	f006 fc83 	bl	87d4 <String::String(char const*)>
    1ece:	a801      	add	r0, sp, #4
    1ed0:	f240 2e05 	movw	lr, #517	; 0x205
    1ed4:	4601      	mov	r1, r0
    1ed6:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1eda:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1ede:	f7fe f8c3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ee2:	a801      	add	r0, sp, #4
    1ee4:	f7fe f8f2 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    1ee8:	499e      	ldr	r1, [pc, #632]	; (2164 <initialize_opcode_info()+0x207c>)
    1eea:	a801      	add	r0, sp, #4
    1eec:	f006 fc72 	bl	87d4 <String::String(char const*)>
    1ef0:	4621      	mov	r1, r4
    1ef2:	a805      	add	r0, sp, #20
    1ef4:	f006 fc6e 	bl	87d4 <String::String(char const*)>
    1ef8:	4639      	mov	r1, r7
    1efa:	a809      	add	r0, sp, #36	; 0x24
    1efc:	f006 fc6a 	bl	87d4 <String::String(char const*)>
    1f00:	a801      	add	r0, sp, #4
    1f02:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f06:	4601      	mov	r1, r0
    1f08:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1f0c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f10:	f7fe f8aa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f14:	a801      	add	r0, sp, #4
    1f16:	f7fe f8d9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    1f1a:	4649      	mov	r1, r9
    1f1c:	a801      	add	r0, sp, #4
    1f1e:	f006 fc59 	bl	87d4 <String::String(char const*)>
    1f22:	4991      	ldr	r1, [pc, #580]	; (2168 <initialize_opcode_info()+0x2080>)
    1f24:	a805      	add	r0, sp, #20
    1f26:	f006 fc55 	bl	87d4 <String::String(char const*)>
    1f2a:	4641      	mov	r1, r8
    1f2c:	a809      	add	r0, sp, #36	; 0x24
    1f2e:	f006 fc51 	bl	87d4 <String::String(char const*)>
    1f32:	f240 2102 	movw	r1, #514	; 0x202
    1f36:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
    1f3a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1f3e:	a901      	add	r1, sp, #4
    1f40:	f7fe f892 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f44:	a801      	add	r0, sp, #4
    1f46:	f7fe f8c1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    1f4a:	4988      	ldr	r1, [pc, #544]	; (216c <initialize_opcode_info()+0x2084>)
    1f4c:	a801      	add	r0, sp, #4
    1f4e:	f006 fc41 	bl	87d4 <String::String(char const*)>
    1f52:	4621      	mov	r1, r4
    1f54:	a805      	add	r0, sp, #20
    1f56:	f006 fc3d 	bl	87d4 <String::String(char const*)>
    1f5a:	4621      	mov	r1, r4
    1f5c:	a809      	add	r0, sp, #36	; 0x24
    1f5e:	f006 fc39 	bl	87d4 <String::String(char const*)>
    1f62:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f66:	a901      	add	r1, sp, #4
    1f68:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    1f6c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f70:	f7fe f87a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f74:	a801      	add	r0, sp, #4
    1f76:	f7fe f8a9 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    1f7a:	4978      	ldr	r1, [pc, #480]	; (215c <initialize_opcode_info()+0x2074>)
    1f7c:	a801      	add	r0, sp, #4
    1f7e:	f006 fc29 	bl	87d4 <String::String(char const*)>
    1f82:	4651      	mov	r1, sl
    1f84:	a805      	add	r0, sp, #20
    1f86:	f006 fc25 	bl	87d4 <String::String(char const*)>
    1f8a:	4631      	mov	r1, r6
    1f8c:	a809      	add	r0, sp, #36	; 0x24
    1f8e:	f44f 7641 	mov.w	r6, #772	; 0x304
    1f92:	f006 fc1f 	bl	87d4 <String::String(char const*)>
    1f96:	a901      	add	r1, sp, #4
    1f98:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    1f9c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1fa0:	f7fe f862 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fa4:	a801      	add	r0, sp, #4
    1fa6:	f7fe f891 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    1faa:	4649      	mov	r1, r9
    1fac:	a801      	add	r0, sp, #4
    1fae:	f006 fc11 	bl	87d4 <String::String(char const*)>
    1fb2:	4651      	mov	r1, sl
    1fb4:	a805      	add	r0, sp, #20
    1fb6:	f006 fc0d 	bl	87d4 <String::String(char const*)>
    1fba:	4641      	mov	r1, r8
    1fbc:	a809      	add	r0, sp, #36	; 0x24
    1fbe:	f006 fc09 	bl	87d4 <String::String(char const*)>
    1fc2:	a901      	add	r1, sp, #4
    1fc4:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
    1fc8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1fcc:	f7fe f84c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fd0:	a801      	add	r0, sp, #4
    1fd2:	f7fe f87b 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    1fd6:	4659      	mov	r1, fp
    1fd8:	a801      	add	r0, sp, #4
    1fda:	f006 fbfb 	bl	87d4 <String::String(char const*)>
    1fde:	4651      	mov	r1, sl
    1fe0:	a805      	add	r0, sp, #20
    1fe2:	f006 fbf7 	bl	87d4 <String::String(char const*)>
    1fe6:	4639      	mov	r1, r7
    1fe8:	a809      	add	r0, sp, #36	; 0x24
    1fea:	f006 fbf3 	bl	87d4 <String::String(char const*)>
    1fee:	f240 3206 	movw	r2, #774	; 0x306
    1ff2:	a901      	add	r1, sp, #4
    1ff4:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
    1ff8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ffc:	f7fe f834 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2000:	a801      	add	r0, sp, #4
    2002:	f7fe f863 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    2006:	495a      	ldr	r1, [pc, #360]	; (2170 <initialize_opcode_info()+0x2088>)
    2008:	a801      	add	r0, sp, #4
    200a:	f006 fbe3 	bl	87d4 <String::String(char const*)>
    200e:	4a59      	ldr	r2, [pc, #356]	; (2174 <initialize_opcode_info()+0x208c>)
    2010:	a805      	add	r0, sp, #20
    2012:	4611      	mov	r1, r2
    2014:	f006 fbde 	bl	87d4 <String::String(char const*)>
    2018:	4621      	mov	r1, r4
    201a:	a809      	add	r0, sp, #36	; 0x24
    201c:	f006 fbda 	bl	87d4 <String::String(char const*)>
    2020:	f240 2202 	movw	r2, #514	; 0x202
    2024:	a901      	add	r1, sp, #4
    2026:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
    202a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    202e:	f7fe f81b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2032:	a801      	add	r0, sp, #4
    2034:	f7fe f84a 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    2038:	4649      	mov	r1, r9
    203a:	a801      	add	r0, sp, #4
    203c:	f006 fbca 	bl	87d4 <String::String(char const*)>
    2040:	4b4d      	ldr	r3, [pc, #308]	; (2178 <initialize_opcode_info()+0x2090>)
    2042:	a805      	add	r0, sp, #20
    2044:	4619      	mov	r1, r3
    2046:	f006 fbc5 	bl	87d4 <String::String(char const*)>
    204a:	4641      	mov	r1, r8
    204c:	a809      	add	r0, sp, #36	; 0x24
    204e:	f006 fbc1 	bl	87d4 <String::String(char const*)>
    2052:	f240 2e05 	movw	lr, #517	; 0x205
    2056:	a901      	add	r1, sp, #4
    2058:	f605 3094 	addw	r0, r5, #2964	; 0xb94
    205c:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    2060:	f7fe f802 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2064:	a801      	add	r0, sp, #4
    2066:	f7fe f831 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    206a:	4649      	mov	r1, r9
    206c:	a801      	add	r0, sp, #4
    206e:	f006 fbb1 	bl	87d4 <String::String(char const*)>
    2072:	4942      	ldr	r1, [pc, #264]	; (217c <initialize_opcode_info()+0x2094>)
    2074:	a805      	add	r0, sp, #20
    2076:	f006 fbad 	bl	87d4 <String::String(char const*)>
    207a:	4641      	mov	r1, r8
    207c:	a809      	add	r0, sp, #36	; 0x24
    207e:	f006 fba9 	bl	87d4 <String::String(char const*)>
    2082:	f44f 7c01 	mov.w	ip, #516	; 0x204
    2086:	a901      	add	r1, sp, #4
    2088:	f605 4064 	addw	r0, r5, #3172	; 0xc64
    208c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    2090:	f7fd ffea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2094:	a801      	add	r0, sp, #4
    2096:	f7fe f819 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    209a:	4659      	mov	r1, fp
    209c:	a801      	add	r0, sp, #4
    209e:	f006 fb99 	bl	87d4 <String::String(char const*)>
    20a2:	4936      	ldr	r1, [pc, #216]	; (217c <initialize_opcode_info()+0x2094>)
    20a4:	a805      	add	r0, sp, #20
    20a6:	f006 fb95 	bl	87d4 <String::String(char const*)>
    20aa:	4639      	mov	r1, r7
    20ac:	a809      	add	r0, sp, #36	; 0x24
    20ae:	f006 fb91 	bl	87d4 <String::String(char const*)>
    20b2:	f240 2306 	movw	r3, #518	; 0x206
    20b6:	a901      	add	r1, sp, #4
    20b8:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    20bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20c0:	f7fd ffd2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20c4:	a801      	add	r0, sp, #4
    20c6:	f7fe f801 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    20ca:	492d      	ldr	r1, [pc, #180]	; (2180 <initialize_opcode_info()+0x2098>)
    20cc:	a801      	add	r0, sp, #4
    20ce:	f006 fb81 	bl	87d4 <String::String(char const*)>
    20d2:	4621      	mov	r1, r4
    20d4:	a805      	add	r0, sp, #20
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    20d6:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0xf8] = {"SED","","D",2,1};
    20da:	f006 fb7b 	bl	87d4 <String::String(char const*)>
    20de:	4929      	ldr	r1, [pc, #164]	; (2184 <initialize_opcode_info()+0x209c>)
    20e0:	a809      	add	r0, sp, #36	; 0x24
    20e2:	f006 fb77 	bl	87d4 <String::String(char const*)>
    20e6:	f44f 7381 	mov.w	r3, #258	; 0x102
    20ea:	a901      	add	r1, sp, #4
    20ec:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    20f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20f4:	f7fd ffb8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20f8:	a801      	add	r0, sp, #4
    20fa:	f7fd ffe7 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    20fe:	4649      	mov	r1, r9
    2100:	a801      	add	r0, sp, #4
    2102:	f006 fb67 	bl	87d4 <String::String(char const*)>
    2106:	4920      	ldr	r1, [pc, #128]	; (2188 <initialize_opcode_info()+0x20a0>)
    2108:	a805      	add	r0, sp, #20
    210a:	f006 fb63 	bl	87d4 <String::String(char const*)>
    210e:	4641      	mov	r1, r8
    2110:	a809      	add	r0, sp, #36	; 0x24
    2112:	f006 fb5f 	bl	87d4 <String::String(char const*)>
    2116:	a901      	add	r1, sp, #4
    2118:	f605 5034 	addw	r0, r5, #3380	; 0xd34
    211c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2120:	f7fd ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2124:	a801      	add	r0, sp, #4
    2126:	f7fd ffd1 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    212a:	4649      	mov	r1, r9
    212c:	a801      	add	r0, sp, #4
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    212e:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2132:	f006 fb4f 	bl	87d4 <String::String(char const*)>
    2136:	4915      	ldr	r1, [pc, #84]	; (218c <initialize_opcode_info()+0x20a4>)
    2138:	a805      	add	r0, sp, #20
    213a:	f006 fb4b 	bl	87d4 <String::String(char const*)>
    213e:	4641      	mov	r1, r8
    2140:	a809      	add	r0, sp, #36	; 0x24
    2142:	f006 fb47 	bl	87d4 <String::String(char const*)>
    2146:	a901      	add	r1, sp, #4
    2148:	f605 6004 	addw	r0, r5, #3588	; 0xe04
    214c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2150:	f7fd ff8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2154:	a801      	add	r0, sp, #4
    2156:	e01f      	b.n	2198 <initialize_opcode_info()+0x20b0>
    2158:	200008ac 	.word	0x200008ac
    215c:	200009e0 	.word	0x200009e0
    2160:	200008b8 	.word	0x200008b8
    2164:	200009ec 	.word	0x200009ec
    2168:	200008c8 	.word	0x200008c8
    216c:	200009f0 	.word	0x200009f0
    2170:	200009f4 	.word	0x200009f4
    2174:	200008d8 	.word	0x200008d8
    2178:	200008dc 	.word	0x200008dc
    217c:	200008e4 	.word	0x200008e4
    2180:	200009f8 	.word	0x200009f8
    2184:	200009dc 	.word	0x200009dc
    2188:	200008f4 	.word	0x200008f4
    218c:	200008fc 	.word	0x200008fc
    2190:	20000954 	.word	0x20000954
    2194:	200009e8 	.word	0x200009e8
    2198:	f7fd ff98 	bl	cc <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    219c:	4659      	mov	r1, fp
    219e:	a801      	add	r0, sp, #4
    21a0:	f006 fb18 	bl	87d4 <String::String(char const*)>
    21a4:	490a      	ldr	r1, [pc, #40]	; (21d0 <initialize_opcode_info()+0x20e8>)
    21a6:	a805      	add	r0, sp, #20
    21a8:	f006 fb14 	bl	87d4 <String::String(char const*)>
    21ac:	4639      	mov	r1, r7
    21ae:	a809      	add	r0, sp, #36	; 0x24
    21b0:	f006 fb10 	bl	87d4 <String::String(char const*)>
    21b4:	a901      	add	r1, sp, #4
    21b6:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    21ba:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    21be:	f7fd ff53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21c2:	a801      	add	r0, sp, #4
    21c4:	f7fd ff82 	bl	cc <OpDecoder::~OpDecoder()>
    21c8:	b00f      	add	sp, #60	; 0x3c
    21ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21ce:	bf00      	nop
    21d0:	200008fc 	.word	0x200008fc

000021d4 <check_for_CLK_activity()>:
    21d4:	4a0e      	ldr	r2, [pc, #56]	; (2210 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    21d6:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    21da:	6811      	ldr	r1, [r2, #0]
    21dc:	e004      	b.n	21e8 <check_for_CLK_activity()+0x14>
    21de:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    21e0:	1a5b      	subs	r3, r3, r1
    21e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    21e6:	d812      	bhi.n	220e <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    21e8:	f8dc 0000 	ldr.w	r0, [ip]
    21ec:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    21f0:	d0f5      	beq.n	21de <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    21f2:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    21f6:	e004      	b.n	2202 <check_for_CLK_activity()+0x2e>
    21f8:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    21fa:	1a5b      	subs	r3, r3, r1
    21fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2200:	d804      	bhi.n	220c <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    2202:	6803      	ldr	r3, [r0, #0]
    2204:	04db      	lsls	r3, r3, #19
    2206:	d4f7      	bmi.n	21f8 <check_for_CLK_activity()+0x24>
    return(true);
    2208:	2001      	movs	r0, #1
    220a:	4770      	bx	lr
            return(false);
    220c:	2000      	movs	r0, #0
}
    220e:	4770      	bx	lr
    2210:	20018868 	.word	0x20018868

00002214 <setup>:
void setup() {
    2214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    2218:	2100      	movs	r1, #0
void setup() {
    221a:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    221c:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    221e:	4d94      	ldr	r5, [pc, #592]	; (2470 <setup+0x25c>)
    2220:	f006 fce0 	bl	8be4 <pinMode>
    pinMode(PIN_RESET, INPUT);
    2224:	2100      	movs	r1, #0
    2226:	2028      	movs	r0, #40	; 0x28
    2228:	4c92      	ldr	r4, [pc, #584]	; (2474 <setup+0x260>)
    222a:	f006 fcdb 	bl	8be4 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    222e:	2100      	movs	r1, #0
    2230:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2232:	4f91      	ldr	r7, [pc, #580]	; (2478 <setup+0x264>)
    2234:	f006 fcd6 	bl	8be4 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    2238:	2100      	movs	r1, #0
    223a:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    223c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 24cc <setup+0x2b8>
    2240:	f006 fcd0 	bl	8be4 <pinMode>
    pinMode(PIN_NMI, INPUT);
    2244:	2100      	movs	r1, #0
    2246:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    2248:	f240 28ee 	movw	r8, #750	; 0x2ee
    224c:	f006 fcca 	bl	8be4 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2250:	2101      	movs	r1, #1
    2252:	200c      	movs	r0, #12
    2254:	f006 fcc6 	bl	8be4 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    2258:	2101      	movs	r1, #1
    225a:	2027      	movs	r0, #39	; 0x27
    225c:	f006 fcc2 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2260:	2101      	movs	r1, #1
    2262:	201b      	movs	r0, #27
    2264:	f006 fcbe 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    2268:	2101      	movs	r1, #1
    226a:	2026      	movs	r0, #38	; 0x26
    226c:	f006 fcba 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2270:	2101      	movs	r1, #1
    2272:	201c      	movs	r0, #28
    2274:	f006 fcb6 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    2278:	2101      	movs	r1, #1
    227a:	2025      	movs	r0, #37	; 0x25
    227c:	f006 fcb2 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    2280:	2101      	movs	r1, #1
    2282:	201d      	movs	r0, #29
    2284:	f006 fcae 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2288:	2101      	movs	r1, #1
    228a:	2024      	movs	r0, #36	; 0x24
    228c:	f006 fcaa 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    2290:	2101      	movs	r1, #1
    2292:	201e      	movs	r0, #30
    2294:	f006 fca6 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2298:	2101      	movs	r1, #1
    229a:	2023      	movs	r0, #35	; 0x23
    229c:	f006 fca2 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    22a0:	2101      	movs	r1, #1
    22a2:	201f      	movs	r0, #31
    22a4:	f006 fc9e 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    22a8:	2101      	movs	r1, #1
    22aa:	2022      	movs	r0, #34	; 0x22
    22ac:	f006 fc9a 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    22b0:	2101      	movs	r1, #1
    22b2:	2020      	movs	r0, #32
    22b4:	f006 fc96 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    22b8:	2101      	movs	r1, #1
    22ba:	2021      	movs	r0, #33	; 0x21
    22bc:	f006 fc92 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    22c0:	2101      	movs	r1, #1
    22c2:	4608      	mov	r0, r1
    22c4:	f006 fc8e 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    22c8:	2101      	movs	r1, #1
    22ca:	2000      	movs	r0, #0
    22cc:	f006 fc8a 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    22d0:	2101      	movs	r1, #1
    22d2:	2002      	movs	r0, #2
    22d4:	f006 fc86 	bl	8be4 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    22d8:	2101      	movs	r1, #1
    22da:	2017      	movs	r0, #23
    22dc:	f006 fc82 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    22e0:	2100      	movs	r1, #0
    22e2:	200e      	movs	r0, #14
    22e4:	f006 fc7e 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    22e8:	2100      	movs	r1, #0
    22ea:	200f      	movs	r0, #15
    22ec:	f006 fc7a 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    22f0:	2100      	movs	r1, #0
    22f2:	2010      	movs	r0, #16
    22f4:	f006 fc76 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    22f8:	2100      	movs	r1, #0
    22fa:	2011      	movs	r0, #17
    22fc:	f006 fc72 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    2300:	2100      	movs	r1, #0
    2302:	2012      	movs	r0, #18
    2304:	f006 fc6e 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    2308:	2100      	movs	r1, #0
    230a:	2013      	movs	r0, #19
    230c:	f006 fc6a 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    2310:	2100      	movs	r1, #0
    2312:	2014      	movs	r0, #20
    2314:	f006 fc66 	bl	8be4 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    2318:	2100      	movs	r1, #0
    231a:	2015      	movs	r0, #21
    231c:	f006 fc62 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2320:	2101      	movs	r1, #1
    2322:	200b      	movs	r0, #11
    2324:	f006 fc5e 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    2328:	2101      	movs	r1, #1
    232a:	200a      	movs	r0, #10
    232c:	f006 fc5a 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2330:	2101      	movs	r1, #1
    2332:	2009      	movs	r0, #9
    2334:	f006 fc56 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    2338:	2101      	movs	r1, #1
    233a:	2008      	movs	r0, #8
    233c:	f006 fc52 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2340:	2101      	movs	r1, #1
    2342:	2007      	movs	r0, #7
    2344:	f006 fc4e 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    2348:	2101      	movs	r1, #1
    234a:	2006      	movs	r0, #6
    234c:	f006 fc4a 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2350:	2101      	movs	r1, #1
    2352:	2005      	movs	r0, #5
    2354:	f006 fc46 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    2358:	2101      	movs	r1, #1
    235a:	2004      	movs	r0, #4
    235c:	f006 fc42 	bl	8be4 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2360:	2101      	movs	r1, #1
    2362:	2003      	movs	r0, #3
    2364:	f006 fc3e 	bl	8be4 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    2368:	f44f 6200 	mov.w	r2, #2048	; 0x800
    236c:	4943      	ldr	r1, [pc, #268]	; (247c <setup+0x268>)
    236e:	4844      	ldr	r0, [pc, #272]	; (2480 <setup+0x26c>)
    2370:	f006 fc78 	bl	8c64 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2374:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2378:	4942      	ldr	r1, [pc, #264]	; (2484 <setup+0x270>)
    237a:	4843      	ldr	r0, [pc, #268]	; (2488 <setup+0x274>)
    237c:	f006 fc72 	bl	8c64 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    2380:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2384:	4941      	ldr	r1, [pc, #260]	; (248c <setup+0x278>)
    2386:	4842      	ldr	r0, [pc, #264]	; (2490 <setup+0x27c>)
    2388:	f006 fc6c 	bl	8c64 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2390:	4940      	ldr	r1, [pc, #256]	; (2494 <setup+0x280>)
    2392:	4841      	ldr	r0, [pc, #260]	; (2498 <setup+0x284>)
    2394:	f006 fc66 	bl	8c64 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2398:	f44f 6200 	mov.w	r2, #2048	; 0x800
    239c:	493f      	ldr	r1, [pc, #252]	; (249c <setup+0x288>)
    239e:	4840      	ldr	r0, [pc, #256]	; (24a0 <setup+0x28c>)
    23a0:	f006 fc60 	bl	8c64 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    23a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    23a8:	493e      	ldr	r1, [pc, #248]	; (24a4 <setup+0x290>)
    23aa:	483f      	ldr	r0, [pc, #252]	; (24a8 <setup+0x294>)
    23ac:	f006 fc5a 	bl	8c64 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    23b0:	682e      	ldr	r6, [r5, #0]
		yield();
    23b2:	f007 fe95 	bl	a0e0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23b6:	7823      	ldrb	r3, [r4, #0]
    23b8:	2b00      	cmp	r3, #0
    23ba:	d03e      	beq.n	243a <setup+0x226>
    23bc:	783b      	ldrb	r3, [r7, #0]
    23be:	07db      	lsls	r3, r3, #31
    23c0:	d53b      	bpl.n	243a <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    23c2:	682b      	ldr	r3, [r5, #0]
    23c4:	f8d9 2000 	ldr.w	r2, [r9]
    23c8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    23ca:	2b0e      	cmp	r3, #14
    23cc:	d935      	bls.n	243a <setup+0x226>
    Serial.setTimeout(5000);
    23ce:	f241 3188 	movw	r1, #5000	; 0x1388
    23d2:	4836      	ldr	r0, [pc, #216]	; (24ac <setup+0x298>)
    23d4:	f006 f98c 	bl	86f0 <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    23d8:	4935      	ldr	r1, [pc, #212]	; (24b0 <setup+0x29c>)
    23da:	4668      	mov	r0, sp
    23dc:	f006 f9fa 	bl	87d4 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    23e0:	4669      	mov	r1, sp
    23e2:	a804      	add	r0, sp, #16
    23e4:	f006 f986 	bl	86f4 <String::String(String const&)>
    23e8:	4932      	ldr	r1, [pc, #200]	; (24b4 <setup+0x2a0>)
    23ea:	a804      	add	r0, sp, #16
    23ec:	f006 fa8e 	bl	890c <operator+(StringSumHelper const&, char const*)>
    23f0:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    23f2:	482e      	ldr	r0, [pc, #184]	; (24ac <setup+0x298>)
    23f4:	f006 f936 	bl	8664 <Print::print(String const&)>
    23f8:	482c      	ldr	r0, [pc, #176]	; (24ac <setup+0x298>)
    23fa:	f006 f959 	bl	86b0 <Print::println()>
class StringSumHelper : public String
    23fe:	a804      	add	r0, sp, #16
    2400:	f006 f9ac 	bl	875c <String::~String()>
    2404:	4668      	mov	r0, sp
    2406:	f006 f9a9 	bl	875c <String::~String()>
    if ( !check_for_CLK_activity() ) {
    240a:	f7ff fee3 	bl	21d4 <check_for_CLK_activity()>
    240e:	bb08      	cbnz	r0, 2454 <setup+0x240>
        debug_mode = true;
    2410:	4829      	ldr	r0, [pc, #164]	; (24b8 <setup+0x2a4>)
    2412:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    2414:	4b29      	ldr	r3, [pc, #164]	; (24bc <setup+0x2a8>)
    2416:	2203      	movs	r2, #3
        debug_mode = true;
    2418:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    241a:	2146      	movs	r1, #70	; 0x46
    241c:	4828      	ldr	r0, [pc, #160]	; (24c0 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    241e:	701a      	strb	r2, [r3, #0]
    2420:	f007 fde0 	bl	9fe4 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2424:	4821      	ldr	r0, [pc, #132]	; (24ac <setup+0x298>)
    2426:	f006 f943 	bl	86b0 <Print::println()>
    run_mode = WAITING;
    242a:	4b26      	ldr	r3, [pc, #152]	; (24c4 <setup+0x2b0>)
    242c:	2200      	movs	r2, #0
    242e:	701a      	strb	r2, [r3, #0]
}
    2430:	b009      	add	sp, #36	; 0x24
    2432:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    2436:	f7fd be57 	b.w	e8 <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    243a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    243c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    243e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2440:	b12a      	cbz	r2, 244e <setup+0x23a>
				if (elapsed > 2000) break;
    2442:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2446:	d8c2      	bhi.n	23ce <setup+0x1ba>
			yield();
    2448:	f007 fe4a 	bl	a0e0 <yield>
    244c:	e7b1      	b.n	23b2 <setup+0x19e>
				if (elapsed > 750) break;
    244e:	4543      	cmp	r3, r8
    2450:	d9fa      	bls.n	2448 <setup+0x234>
    2452:	e7bc      	b.n	23ce <setup+0x1ba>
        debug_mode = false;
    2454:	2300      	movs	r3, #0
        addr_mode = All_External;
    2456:	4a19      	ldr	r2, [pc, #100]	; (24bc <setup+0x2a8>)
        debug_mode = false;
    2458:	4c17      	ldr	r4, [pc, #92]	; (24b8 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    245a:	2146      	movs	r1, #70	; 0x46
    245c:	481a      	ldr	r0, [pc, #104]	; (24c8 <setup+0x2b4>)
    245e:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2460:	7013      	strb	r3, [r2, #0]
    2462:	f007 fdbf 	bl	9fe4 <usb_serial_write>
    2466:	4811      	ldr	r0, [pc, #68]	; (24ac <setup+0x298>)
    2468:	f006 f922 	bl	86b0 <Print::println()>
    246c:	e7dd      	b.n	242a <setup+0x216>
    246e:	bf00      	nop
    2470:	20018868 	.word	0x20018868
    2474:	200188ab 	.word	0x200188ab
    2478:	200188aa 	.word	0x200188aa
    247c:	20001378 	.word	0x20001378
    2480:	200123f0 	.word	0x200123f0
    2484:	20001b78 	.word	0x20001b78
    2488:	20012bf0 	.word	0x20012bf0
    248c:	20002378 	.word	0x20002378
    2490:	200133f0 	.word	0x200133f0
    2494:	20002b78 	.word	0x20002b78
    2498:	20013bf0 	.word	0x20013bf0
    249c:	20003378 	.word	0x20003378
    24a0:	200143f0 	.word	0x200143f0
    24a4:	20003b78 	.word	0x20003b78
    24a8:	20014bf0 	.word	0x20014bf0
    24ac:	20004380 	.word	0x20004380
    24b0:	200010a4 	.word	0x200010a4
    24b4:	200010cc 	.word	0x200010cc
    24b8:	2000498e 	.word	0x2000498e
    24bc:	20018894 	.word	0x20018894
    24c0:	200010d4 	.word	0x200010d4
    24c4:	200188a2 	.word	0x200188a2
    24c8:	2000111c 	.word	0x2000111c
    24cc:	20018878 	.word	0x20018878

000024d0 <flag_status()>:
String flag_status(void) {
    24d0:	b570      	push	{r4, r5, r6, lr}
    24d2:	b088      	sub	sp, #32
    s = s + (flag_c ? "C" : "-");
    24d4:	4d4e      	ldr	r5, [pc, #312]	; (2610 <flag_status()+0x140>)
String flag_status(void) {
    24d6:	4606      	mov	r6, r0
    String s;
    24d8:	2100      	movs	r1, #0
    24da:	4668      	mov	r0, sp
    s = s + (flag_c ? "C" : "-");
    24dc:	4c4d      	ldr	r4, [pc, #308]	; (2614 <flag_status()+0x144>)
    String s;
    24de:	f006 f979 	bl	87d4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    24e2:	4669      	mov	r1, sp
    24e4:	a804      	add	r0, sp, #16
    24e6:	f006 f905 	bl	86f4 <String::String(String const&)>
    s = s + (flag_c ? "C" : "-");
    24ea:	782b      	ldrb	r3, [r5, #0]
    24ec:	494a      	ldr	r1, [pc, #296]	; (2618 <flag_status()+0x148>)
    24ee:	a804      	add	r0, sp, #16
    24f0:	f013 0f01 	tst.w	r3, #1
    24f4:	bf08      	it	eq
    24f6:	4621      	moveq	r1, r4
    24f8:	f006 fa08 	bl	890c <operator+(StringSumHelper const&, char const*)>
    24fc:	4601      	mov	r1, r0
    24fe:	4668      	mov	r0, sp
    2500:	f006 f97c 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    2504:	a804      	add	r0, sp, #16
    2506:	f006 f929 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    250a:	4669      	mov	r1, sp
    250c:	a804      	add	r0, sp, #16
    250e:	f006 f8f1 	bl	86f4 <String::String(String const&)>
    s = s + (flag_z ? "Z" : "-");
    2512:	782b      	ldrb	r3, [r5, #0]
    2514:	4941      	ldr	r1, [pc, #260]	; (261c <flag_status()+0x14c>)
    2516:	a804      	add	r0, sp, #16
    2518:	f013 0f02 	tst.w	r3, #2
    251c:	bf08      	it	eq
    251e:	4621      	moveq	r1, r4
    2520:	f006 f9f4 	bl	890c <operator+(StringSumHelper const&, char const*)>
    2524:	4601      	mov	r1, r0
    2526:	4668      	mov	r0, sp
    2528:	f006 f968 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    252c:	a804      	add	r0, sp, #16
    252e:	f006 f915 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2532:	4669      	mov	r1, sp
    2534:	a804      	add	r0, sp, #16
    2536:	f006 f8dd 	bl	86f4 <String::String(String const&)>
    s = s + (flag_i ? "I" : "-");
    253a:	782b      	ldrb	r3, [r5, #0]
    253c:	4938      	ldr	r1, [pc, #224]	; (2620 <flag_status()+0x150>)
    253e:	a804      	add	r0, sp, #16
    2540:	f013 0f04 	tst.w	r3, #4
    2544:	bf08      	it	eq
    2546:	4621      	moveq	r1, r4
    2548:	f006 f9e0 	bl	890c <operator+(StringSumHelper const&, char const*)>
    254c:	4601      	mov	r1, r0
    254e:	4668      	mov	r0, sp
    2550:	f006 f954 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    2554:	a804      	add	r0, sp, #16
    2556:	f006 f901 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    255a:	4669      	mov	r1, sp
    255c:	a804      	add	r0, sp, #16
    255e:	f006 f8c9 	bl	86f4 <String::String(String const&)>
    s = s + (flag_d ? "D" : "-");
    2562:	782b      	ldrb	r3, [r5, #0]
    2564:	492f      	ldr	r1, [pc, #188]	; (2624 <flag_status()+0x154>)
    2566:	a804      	add	r0, sp, #16
    2568:	f013 0f08 	tst.w	r3, #8
    256c:	bf08      	it	eq
    256e:	4621      	moveq	r1, r4
    2570:	f006 f9cc 	bl	890c <operator+(StringSumHelper const&, char const*)>
    2574:	4601      	mov	r1, r0
    2576:	4668      	mov	r0, sp
    2578:	f006 f940 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    257c:	a804      	add	r0, sp, #16
    257e:	f006 f8ed 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2582:	4669      	mov	r1, sp
    2584:	a804      	add	r0, sp, #16
    2586:	f006 f8b5 	bl	86f4 <String::String(String const&)>
    s = s + (flag_b ? "B" : "-");
    258a:	782b      	ldrb	r3, [r5, #0]
    258c:	4926      	ldr	r1, [pc, #152]	; (2628 <flag_status()+0x158>)
    258e:	a804      	add	r0, sp, #16
    2590:	f013 0f10 	tst.w	r3, #16
    2594:	bf08      	it	eq
    2596:	4621      	moveq	r1, r4
    2598:	f006 f9b8 	bl	890c <operator+(StringSumHelper const&, char const*)>
    259c:	4601      	mov	r1, r0
    259e:	4668      	mov	r0, sp
    25a0:	f006 f92c 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    25a4:	a804      	add	r0, sp, #16
    25a6:	f006 f8d9 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    25aa:	4669      	mov	r1, sp
    25ac:	a804      	add	r0, sp, #16
    25ae:	f006 f8a1 	bl	86f4 <String::String(String const&)>
    s = s + (flag_v ? "V" : "-");
    25b2:	782b      	ldrb	r3, [r5, #0]
    25b4:	491d      	ldr	r1, [pc, #116]	; (262c <flag_status()+0x15c>)
    25b6:	a804      	add	r0, sp, #16
    25b8:	f013 0f40 	tst.w	r3, #64	; 0x40
    25bc:	bf08      	it	eq
    25be:	4621      	moveq	r1, r4
    25c0:	f006 f9a4 	bl	890c <operator+(StringSumHelper const&, char const*)>
    25c4:	4601      	mov	r1, r0
    25c6:	4668      	mov	r0, sp
    25c8:	f006 f918 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    25cc:	a804      	add	r0, sp, #16
    25ce:	f006 f8c5 	bl	875c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    25d2:	4669      	mov	r1, sp
    25d4:	a804      	add	r0, sp, #16
    25d6:	f006 f88d 	bl	86f4 <String::String(String const&)>
    s = s + (flag_n ? "N" : "-");
    25da:	4b15      	ldr	r3, [pc, #84]	; (2630 <flag_status()+0x160>)
    25dc:	f995 1000 	ldrsb.w	r1, [r5]
    25e0:	a804      	add	r0, sp, #16
    25e2:	ea13 0121 	ands.w	r1, r3, r1, asr #32
    25e6:	bf38      	it	cc
    25e8:	4621      	movcc	r1, r4
    25ea:	f006 f98f 	bl	890c <operator+(StringSumHelper const&, char const*)>
    25ee:	4601      	mov	r1, r0
    25f0:	4668      	mov	r0, sp
    25f2:	f006 f903 	bl	87fc <String::operator=(String const&)>
class StringSumHelper : public String
    25f6:	a804      	add	r0, sp, #16
    25f8:	f006 f8b0 	bl	875c <String::~String()>
    return(s);
    25fc:	4669      	mov	r1, sp
    25fe:	4630      	mov	r0, r6
    2600:	f006 f896 	bl	8730 <String::String(String&&)>
}
    2604:	4668      	mov	r0, sp
    2606:	f006 f8a9 	bl	875c <String::~String()>
    260a:	4630      	mov	r0, r6
    260c:	b008      	add	sp, #32
    260e:	bd70      	pop	{r4, r5, r6, pc}
    2610:	20004990 	.word	0x20004990
    2614:	20000370 	.word	0x20000370
    2618:	200008f0 	.word	0x200008f0
    261c:	20000374 	.word	0x20000374
    2620:	20000948 	.word	0x20000948
    2624:	200009dc 	.word	0x200009dc
    2628:	200008a4 	.word	0x200008a4
    262c:	200009b8 	.word	0x200009b8
    2630:	20000378 	.word	0x20000378

00002634 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    2634:	4b21      	ldr	r3, [pc, #132]	; (26bc <sample_at_CLK_rising_edge()+0x88>)
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	b103      	cbz	r3, 263c <sample_at_CLK_rising_edge()+0x8>
    263a:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    263c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    2640:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2642:	6813      	ldr	r3, [r2, #0]
    2644:	04db      	lsls	r3, r3, #19
    2646:	d4fc      	bmi.n	2642 <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    2648:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    264c:	6813      	ldr	r3, [r2, #0]
    264e:	04d8      	lsls	r0, r3, #19
    2650:	d5fc      	bpl.n	264c <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    2652:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2656:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2658:	04d9      	lsls	r1, r3, #19
    265a:	d5fc      	bpl.n	2656 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    265c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2660:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2662:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2664:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2668:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    266c:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    266e:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2672:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2676:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    267a:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    267e:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2682:	0cd8      	lsrs	r0, r3, #19
    2684:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2688:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    268a:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    268e:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2692:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2694:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2698:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    269c:	4302      	orrs	r2, r0
    269e:	4808      	ldr	r0, [pc, #32]	; (26c0 <sample_at_CLK_rising_edge()+0x8c>)
    26a0:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    26a2:	4a08      	ldr	r2, [pc, #32]	; (26c4 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    26a4:	4808      	ldr	r0, [pc, #32]	; (26c8 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    26a6:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    26aa:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    26ac:	4a07      	ldr	r2, [pc, #28]	; (26cc <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    26ae:	4b08      	ldr	r3, [pc, #32]	; (26d0 <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    26b0:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    26b4:	7019      	strb	r1, [r3, #0]
}
    26b6:	f85d fb04 	ldr.w	pc, [sp], #4
    26ba:	bf00      	nop
    26bc:	2000498e 	.word	0x2000498e
    26c0:	20018896 	.word	0x20018896
    26c4:	20018897 	.word	0x20018897
    26c8:	20018899 	.word	0x20018899
    26cc:	2001889a 	.word	0x2001889a
    26d0:	20018898 	.word	0x20018898

000026d4 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    26d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    26d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    26dc:	d33c      	bcc.n	2758 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    26de:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    26e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    26e6:	d355      	bcc.n	2794 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    26e8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    26ec:	b294      	uxth	r4, r2
    26ee:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    26f2:	d331      	bcc.n	2758 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    26f4:	2900      	cmp	r1, #0
    26f6:	f000 8118 	beq.w	292a <read_byte(unsigned short, bool)+0x256>
    26fa:	4cb3      	ldr	r4, [pc, #716]	; (29c8 <read_byte(unsigned short, bool)+0x2f4>)
    26fc:	f894 8000 	ldrb.w	r8, [r4]
    2700:	f1b8 0f01 	cmp.w	r8, #1
    2704:	f040 814f 	bne.w	29a6 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    2708:	4ab0      	ldr	r2, [pc, #704]	; (29cc <read_byte(unsigned short, bool)+0x2f8>)
    270a:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    270e:	2100      	movs	r1, #0
    current_address = local_address;
    2710:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2716:	d311      	bcc.n	273c <read_byte(unsigned short, bool)+0x68>
    2718:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    271c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    2720:	f0c0 8135 	bcc.w	298e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    2724:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    2728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    272c:	f0c0 812f 	bcc.w	298e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2730:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    2734:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    2738:	f0c0 8129 	bcc.w	298e <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    273c:	4ba4      	ldr	r3, [pc, #656]	; (29d0 <read_byte(unsigned short, bool)+0x2fc>)
    273e:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2740:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    2744:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2746:	d02f      	beq.n	27a8 <read_byte(unsigned short, bool)+0xd4>
    2748:	b371      	cbz	r1, 27a8 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    274a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    274e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2756:	e027      	b.n	27a8 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2758:	4b9e      	ldr	r3, [pc, #632]	; (29d4 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    275a:	781a      	ldrb	r2, [r3, #0]
    275c:	2a01      	cmp	r2, #1
    275e:	d906      	bls.n	276e <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    2760:	4a9b      	ldr	r2, [pc, #620]	; (29d0 <read_byte(unsigned short, bool)+0x2fc>)
    2762:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2764:	4b9c      	ldr	r3, [pc, #624]	; (29d8 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2766:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2768:	5c18      	ldrb	r0, [r3, r0]
}
    276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    276e:	4a96      	ldr	r2, [pc, #600]	; (29c8 <read_byte(unsigned short, bool)+0x2f4>)
    2770:	f892 8000 	ldrb.w	r8, [r2]
    2774:	2900      	cmp	r1, #0
    2776:	f040 80de 	bne.w	2936 <read_byte(unsigned short, bool)+0x262>
    277a:	2100      	movs	r1, #0
    current_address = local_address;
    277c:	4a93      	ldr	r2, [pc, #588]	; (29cc <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    277e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    2782:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2784:	f080 811d 	bcs.w	29c2 <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2788:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    278a:	2b01      	cmp	r3, #1
    278c:	d9d6      	bls.n	273c <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    278e:	4b93      	ldr	r3, [pc, #588]	; (29dc <read_byte(unsigned short, bool)+0x308>)
    2790:	781c      	ldrb	r4, [r3, #0]
    2792:	e06c      	b.n	286e <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2794:	2900      	cmp	r1, #0
    2796:	f040 813d 	bne.w	2a14 <read_byte(unsigned short, bool)+0x340>
    279a:	4b8b      	ldr	r3, [pc, #556]	; (29c8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    279c:	4c8b      	ldr	r4, [pc, #556]	; (29cc <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    279e:	4a8c      	ldr	r2, [pc, #560]	; (29d0 <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    27a0:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    27a4:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    27a6:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    27a8:	4b8c      	ldr	r3, [pc, #560]	; (29dc <read_byte(unsigned short, bool)+0x308>)
    27aa:	781c      	ldrb	r4, [r3, #0]
    27ac:	b94c      	cbnz	r4, 27c2 <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    27ae:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    27b2:	6813      	ldr	r3, [r2, #0]
    27b4:	04de      	lsls	r6, r3, #19
    27b6:	d4fc      	bmi.n	27b2 <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    27b8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    27bc:	6813      	ldr	r3, [r2, #0]
    27be:	04dd      	lsls	r5, r3, #19
    27c0:	d5fc      	bpl.n	27bc <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    27c2:	4e87      	ldr	r6, [pc, #540]	; (29e0 <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27c4:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    27c8:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    27ca:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    27cc:	0a85      	lsrs	r5, r0, #10
    27ce:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    27d2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27d6:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    27da:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27de:	4b81      	ldr	r3, [pc, #516]	; (29e4 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    27e0:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27e4:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    27e6:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    27e8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    27ec:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    27ee:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    27f0:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    27f2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    27f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    27fa:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    27fe:	433b      	orrs	r3, r7
    2800:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2804:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2806:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2808:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    280c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    2810:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2812:	4b75      	ldr	r3, [pc, #468]	; (29e8 <read_byte(unsigned short, bool)+0x314>)
    2814:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2816:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2818:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    281a:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    281c:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2820:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    2828:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    282a:	0342      	lsls	r2, r0, #13
    282c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    2830:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2832:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2834:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    283c:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    283e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2840:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2844:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    2848:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    284a:	f8dc 2000 	ldr.w	r2, [ip]
    284e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2852:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2854:	4a65      	ldr	r2, [pc, #404]	; (29ec <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2856:	433b      	orrs	r3, r7
    2858:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    285c:	0903      	lsrs	r3, r0, #4
    285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2862:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2864:	6835      	ldr	r5, [r6, #0]
    2866:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2868:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    286a:	430b      	orrs	r3, r1
    286c:	6033      	str	r3, [r6, #0]
    return;
    286e:	4d60      	ldr	r5, [pc, #384]	; (29f0 <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2870:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2874:	f8df e184 	ldr.w	lr, [pc, #388]	; 29fc <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2878:	f8df c188 	ldr.w	ip, [pc, #392]	; 2a04 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    287c:	4f5d      	ldr	r7, [pc, #372]	; (29f4 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    287e:	4e5e      	ldr	r6, [pc, #376]	; (29f8 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    2880:	b1d4      	cbz	r4, 28b8 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    2882:	782b      	ldrb	r3, [r5, #0]
    2884:	2b01      	cmp	r3, #1
    2886:	d0fb      	beq.n	2880 <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2888:	f1b8 0f01 	cmp.w	r8, #1
    288c:	d005      	beq.n	289a <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    288e:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2892:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    289a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    289e:	d05d      	beq.n	295c <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    28a0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    28a4:	d352      	bcc.n	294c <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    28a6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    28aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    28ae:	d247      	bcs.n	2940 <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    28b0:	4b49      	ldr	r3, [pc, #292]	; (29d8 <read_byte(unsigned short, bool)+0x304>)
    28b2:	5c18      	ldrb	r0, [r3, r0]
}
    28b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    28b8:	6813      	ldr	r3, [r2, #0]
    28ba:	04d9      	lsls	r1, r3, #19
    28bc:	d4fc      	bmi.n	28b8 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    28be:	6813      	ldr	r3, [r2, #0]
    28c0:	04db      	lsls	r3, r3, #19
    28c2:	d5fc      	bpl.n	28be <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    28c4:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    28c6:	04d9      	lsls	r1, r3, #19
    28c8:	d5fc      	bpl.n	28c4 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    28ca:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    28ce:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    28d0:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    28d4:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    28d8:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    28dc:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    28e0:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    28e4:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    28e8:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    28ec:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    28f0:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    28f4:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    28f6:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    28fa:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    28fe:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2902:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2906:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    290a:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    290e:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2912:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2916:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    291a:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    291e:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2920:	ea41 010a 	orr.w	r1, r1, sl
    2924:	f88e 1000 	strb.w	r1, [lr]
    return;
    2928:	e7ac      	b.n	2884 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    292a:	4c28      	ldr	r4, [pc, #160]	; (29cc <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    292c:	4b26      	ldr	r3, [pc, #152]	; (29c8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    292e:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2930:	f893 8000 	ldrb.w	r8, [r3]
    2934:	e6f2      	b.n	271c <read_byte(unsigned short, bool)+0x48>
    2936:	f1b8 0f01 	cmp.w	r8, #1
    293a:	f47f af1f 	bne.w	277c <read_byte(unsigned short, bool)+0xa8>
    293e:	e71c      	b.n	277a <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2940:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2944:	b29b      	uxth	r3, r3
    2946:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    294a:	d203      	bcs.n	2954 <read_byte(unsigned short, bool)+0x280>
    294c:	4b21      	ldr	r3, [pc, #132]	; (29d4 <read_byte(unsigned short, bool)+0x300>)
    294e:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    2950:	2b00      	cmp	r3, #0
    2952:	d1ad      	bne.n	28b0 <read_byte(unsigned short, bool)+0x1dc>
    2954:	4b29      	ldr	r3, [pc, #164]	; (29fc <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    2956:	7818      	ldrb	r0, [r3, #0]
}
    2958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    295c:	4928      	ldr	r1, [pc, #160]	; (2a00 <read_byte(unsigned short, bool)+0x32c>)
    295e:	4b27      	ldr	r3, [pc, #156]	; (29fc <read_byte(unsigned short, bool)+0x328>)
    2960:	780a      	ldrb	r2, [r1, #0]
    2962:	b9b2      	cbnz	r2, 2992 <read_byte(unsigned short, bool)+0x2be>
    2964:	781a      	ldrb	r2, [r3, #0]
    2966:	2a88      	cmp	r2, #136	; 0x88
    2968:	d1f5      	bne.n	2956 <read_byte(unsigned short, bool)+0x282>
    296a:	2201      	movs	r2, #1
    296c:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    296e:	780a      	ldrb	r2, [r1, #0]
    2970:	2a03      	cmp	r2, #3
    2972:	d1f0      	bne.n	2956 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2974:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2976:	28b0      	cmp	r0, #176	; 0xb0
    2978:	d018      	beq.n	29ac <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    297a:	28b1      	cmp	r0, #177	; 0xb1
    297c:	d044      	beq.n	2a08 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    297e:	28b2      	cmp	r0, #178	; 0xb2
    2980:	d155      	bne.n	2a2e <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    2982:	4814      	ldr	r0, [pc, #80]	; (29d4 <read_byte(unsigned short, bool)+0x300>)
    2984:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2986:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2988:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    298a:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    298c:	e7e3      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    298e:	4b11      	ldr	r3, [pc, #68]	; (29d4 <read_byte(unsigned short, bool)+0x300>)
    2990:	e6fa      	b.n	2788 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2992:	2a01      	cmp	r2, #1
    2994:	d00f      	beq.n	29b6 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2996:	2a02      	cmp	r2, #2
    2998:	d1ea      	bne.n	2970 <read_byte(unsigned short, bool)+0x29c>
    299a:	781a      	ldrb	r2, [r3, #0]
    299c:	2a88      	cmp	r2, #136	; 0x88
    299e:	d1da      	bne.n	2956 <read_byte(unsigned short, bool)+0x282>
    29a0:	2203      	movs	r2, #3
    29a2:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    29a4:	e7d7      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    29a6:	4b09      	ldr	r3, [pc, #36]	; (29cc <read_byte(unsigned short, bool)+0x2f8>)
    29a8:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29aa:	e6b7      	b.n	271c <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    29ac:	2200      	movs	r2, #0
    29ae:	4809      	ldr	r0, [pc, #36]	; (29d4 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    29b0:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    29b2:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    29b4:	e7cf      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    29b6:	781a      	ldrb	r2, [r3, #0]
    29b8:	2a95      	cmp	r2, #149	; 0x95
    29ba:	d1d8      	bne.n	296e <read_byte(unsigned short, bool)+0x29a>
    29bc:	2202      	movs	r2, #2
    29be:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    29c0:	e7c9      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
    29c2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    29c6:	e6a4      	b.n	2712 <read_byte(unsigned short, bool)+0x3e>
    29c8:	200188a2 	.word	0x200188a2
    29cc:	20018884 	.word	0x20018884
    29d0:	2001889d 	.word	0x2001889d
    29d4:	20018894 	.word	0x20018894
    29d8:	200053f0 	.word	0x200053f0
    29dc:	2000498e 	.word	0x2000498e
    29e0:	42004000 	.word	0x42004000
    29e4:	6dfffff3 	.word	0x6dfffff3
    29e8:	cff3efff 	.word	0xcff3efff
    29ec:	7fffff6f 	.word	0x7fffff6f
    29f0:	20018899 	.word	0x20018899
    29f4:	2001889a 	.word	0x2001889a
    29f8:	20018898 	.word	0x20018898
    29fc:	20018896 	.word	0x20018896
    2a00:	200188a3 	.word	0x200188a3
    2a04:	20018897 	.word	0x20018897
                    addr_mode = Read_Internal_Write_External;
    2a08:	480c      	ldr	r0, [pc, #48]	; (2a3c <read_byte(unsigned short, bool)+0x368>)
    2a0a:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    2a0c:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    2a0e:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2a10:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2a12:	e7a0      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a14:	4a0a      	ldr	r2, [pc, #40]	; (2a40 <read_byte(unsigned short, bool)+0x36c>)
    2a16:	f892 8000 	ldrb.w	r8, [r2]
    2a1a:	f1b8 0f01 	cmp.w	r8, #1
    2a1e:	f43f ae73 	beq.w	2708 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    2a22:	4908      	ldr	r1, [pc, #32]	; (2a44 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    2a24:	2200      	movs	r2, #0
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    2a28:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    2a2a:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2a2c:	e68d      	b.n	274a <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    2a2e:	28b3      	cmp	r0, #179	; 0xb3
    2a30:	d191      	bne.n	2956 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    2a32:	4c02      	ldr	r4, [pc, #8]	; (2a3c <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    2a34:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    2a36:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    2a38:	7008      	strb	r0, [r1, #0]
    2a3a:	e78c      	b.n	2956 <read_byte(unsigned short, bool)+0x282>
    2a3c:	20018894 	.word	0x20018894
    2a40:	200188a2 	.word	0x200188a2
    2a44:	20018884 	.word	0x20018884
    2a48:	2001889d 	.word	0x2001889d

00002a4c <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2a4c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    2a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2a52:	d201      	bcs.n	2a58 <write_byte(unsigned short, unsigned char)+0xc>
    2a54:	4b77      	ldr	r3, [pc, #476]	; (2c34 <write_byte(unsigned short, unsigned char)+0x1e8>)
    2a56:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a58:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2a5c:	f0c0 80ad 	bcc.w	2bba <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2a60:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2a68:	d306      	bcc.n	2a78 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2a6a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2a6e:	b29b      	uxth	r3, r3
    2a70:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2a74:	f0c0 80a1 	bcc.w	2bba <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2a78:	4b6f      	ldr	r3, [pc, #444]	; (2c38 <write_byte(unsigned short, unsigned char)+0x1ec>)
    2a7a:	781b      	ldrb	r3, [r3, #0]
    2a7c:	b94b      	cbnz	r3, 2a92 <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2a7e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a82:	6813      	ldr	r3, [r2, #0]
    2a84:	04df      	lsls	r7, r3, #19
    2a86:	d4fc      	bmi.n	2a82 <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2a88:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a8c:	6813      	ldr	r3, [r2, #0]
    2a8e:	04de      	lsls	r6, r3, #19
    2a90:	d5fc      	bpl.n	2a8c <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2a92:	4c6a      	ldr	r4, [pc, #424]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a94:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2a98:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2a9a:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2a9e:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2aa2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2aa6:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2aaa:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2aac:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ab0:	4b63      	ldr	r3, [pc, #396]	; (2c40 <write_byte(unsigned short, unsigned char)+0x1f4>)
    2ab2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2ab4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ab6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2aba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2abe:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ac0:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ac2:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2ac4:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ac8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2acc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ad0:	432b      	orrs	r3, r5
    2ad2:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2ad4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ad6:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2ad8:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2ade:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2ae2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2ae6:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ae8:	4a56      	ldr	r2, [pc, #344]	; (2c44 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2aea:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2aec:	4d56      	ldr	r5, [pc, #344]	; (2c48 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2aee:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2af0:	0542      	lsls	r2, r0, #21
    2af2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2af6:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2af8:	0343      	lsls	r3, r0, #13
    2afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2afe:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b00:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b02:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b04:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b06:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b0a:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b0c:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b0e:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b16:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b18:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b1a:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b1e:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b22:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b24:	4849      	ldr	r0, [pc, #292]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b26:	4332      	orrs	r2, r6
    2b28:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b2a:	4a49      	ldr	r2, [pc, #292]	; (2c50 <write_byte(unsigned short, unsigned char)+0x204>)
    2b2c:	6805      	ldr	r5, [r0, #0]
    2b2e:	402a      	ands	r2, r5
		if (val) {
    2b30:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b32:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2b36:	ea43 030c 	orr.w	r3, r3, ip
    2b3a:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2b3c:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2b40:	d444      	bmi.n	2bcc <write_byte(unsigned short, unsigned char)+0x180>
    2b42:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2b44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2b48:	f04f 0201 	mov.w	r2, #1
    2b4c:	4b3b      	ldr	r3, [pc, #236]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2b4e:	d544      	bpl.n	2bda <write_byte(unsigned short, unsigned char)+0x18e>
    2b50:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2b56:	4b39      	ldr	r3, [pc, #228]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2b5c:	d544      	bpl.n	2be8 <write_byte(unsigned short, unsigned char)+0x19c>
    2b5e:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2b64:	4b35      	ldr	r3, [pc, #212]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2b6a:	d544      	bpl.n	2bf6 <write_byte(unsigned short, unsigned char)+0x1aa>
    2b6c:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2b72:	4b32      	ldr	r3, [pc, #200]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2b78:	d544      	bpl.n	2c04 <write_byte(unsigned short, unsigned char)+0x1b8>
    2b7a:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2b80:	4b2e      	ldr	r3, [pc, #184]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2b86:	d544      	bpl.n	2c12 <write_byte(unsigned short, unsigned char)+0x1c6>
    2b88:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2b8e:	4b2f      	ldr	r3, [pc, #188]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    2b90:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2b94:	d544      	bpl.n	2c20 <write_byte(unsigned short, unsigned char)+0x1d4>
    2b96:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2b9c:	4b2b      	ldr	r3, [pc, #172]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    2b9e:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2ba2:	d044      	beq.n	2c2e <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2ba8:	4c28      	ldr	r4, [pc, #160]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    2baa:	2520      	movs	r5, #32
    2bac:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2bb0:	f7ff fd40 	bl	2634 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2bb4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2bba:	4b26      	ldr	r3, [pc, #152]	; (2c54 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2bbc:	781b      	ldrb	r3, [r3, #0]
    2bbe:	2b02      	cmp	r3, #2
    2bc0:	f67f af5a 	bls.w	2a78 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2bc4:	4b24      	ldr	r3, [pc, #144]	; (2c58 <write_byte(unsigned short, unsigned char)+0x20c>)
    2bc6:	2201      	movs	r2, #1
    2bc8:	701a      	strb	r2, [r3, #0]
}
    2bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2bcc:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2bce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2bd2:	f04f 0201 	mov.w	r2, #1
    2bd6:	4b19      	ldr	r3, [pc, #100]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2bd8:	d4ba      	bmi.n	2b50 <write_byte(unsigned short, unsigned char)+0x104>
    2bda:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2be0:	4b16      	ldr	r3, [pc, #88]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2be6:	d4ba      	bmi.n	2b5e <write_byte(unsigned short, unsigned char)+0x112>
    2be8:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2bee:	4b13      	ldr	r3, [pc, #76]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2bf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2bf4:	d4ba      	bmi.n	2b6c <write_byte(unsigned short, unsigned char)+0x120>
    2bf6:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2bfc:	4b0f      	ldr	r3, [pc, #60]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2bfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2c02:	d4ba      	bmi.n	2b7a <write_byte(unsigned short, unsigned char)+0x12e>
    2c04:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2c0a:	4b0c      	ldr	r3, [pc, #48]	; (2c3c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2c10:	d4ba      	bmi.n	2b88 <write_byte(unsigned short, unsigned char)+0x13c>
    2c12:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2c18:	4b0c      	ldr	r3, [pc, #48]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    2c1a:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2c1e:	d4ba      	bmi.n	2b96 <write_byte(unsigned short, unsigned char)+0x14a>
    2c20:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2c26:	4b09      	ldr	r3, [pc, #36]	; (2c4c <write_byte(unsigned short, unsigned char)+0x200>)
    2c28:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2c2c:	d1ba      	bne.n	2ba4 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2c32:	e7b9      	b.n	2ba8 <write_byte(unsigned short, unsigned char)+0x15c>
    2c34:	200053f0 	.word	0x200053f0
    2c38:	2000498e 	.word	0x2000498e
    2c3c:	42004000 	.word	0x42004000
    2c40:	6dfffff3 	.word	0x6dfffff3
    2c44:	cff3efff 	.word	0xcff3efff
    2c48:	42008000 	.word	0x42008000
    2c4c:	4200c000 	.word	0x4200c000
    2c50:	7fffff6f 	.word	0x7fffff6f
    2c54:	20018894 	.word	0x20018894
    2c58:	2001889d 	.word	0x2001889d

00002c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c5c:	4a08      	ldr	r2, [pc, #32]	; (2c80 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2c5e:	0601      	lsls	r1, r0, #24
    2c60:	7813      	ldrb	r3, [r2, #0]
    2c62:	d407      	bmi.n	2c74 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c68:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2c6a:	b928      	cbnz	r0, 2c78 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2c6c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2c70:	7013      	strb	r3, [r2, #0]
}
    2c72:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2c78:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2c7c:	7013      	strb	r3, [r2, #0]
}
    2c7e:	4770      	bx	lr
    2c80:	20004990 	.word	0x20004990

00002c84 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2c84:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2c86:	4b04      	ldr	r3, [pc, #16]	; (2c98 <Fetch_Immediate(unsigned char)+0x14>)
    2c88:	2100      	movs	r1, #0
    2c8a:	881b      	ldrh	r3, [r3, #0]
    2c8c:	4418      	add	r0, r3
    2c8e:	b280      	uxth	r0, r0
    2c90:	f7ff fd20 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2c94:	bd08      	pop	{r3, pc}
    2c96:	bf00      	nop
    2c98:	20018888 	.word	0x20018888

00002c9c <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2c9c:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2c9e:	4b07      	ldr	r3, [pc, #28]	; (2cbc <Fetch_ZeroPage()+0x20>)
    2ca0:	2100      	movs	r1, #0
    2ca2:	8818      	ldrh	r0, [r3, #0]
    2ca4:	3001      	adds	r0, #1
    2ca6:	b280      	uxth	r0, r0
    2ca8:	f7ff fd14 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2cac:	4b04      	ldr	r3, [pc, #16]	; (2cc0 <Fetch_ZeroPage()+0x24>)
    2cae:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2cb0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2cb2:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2cb4:	f7ff fd0e 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2cb8:	bd08      	pop	{r3, pc}
    2cba:	bf00      	nop
    2cbc:	20018888 	.word	0x20018888
    2cc0:	20018886 	.word	0x20018886

00002cc4 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2cc4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2cc6:	4c0c      	ldr	r4, [pc, #48]	; (2cf8 <Fetch_ZeroPage_X()+0x34>)
    2cc8:	2100      	movs	r1, #0
    2cca:	8820      	ldrh	r0, [r4, #0]
    2ccc:	3001      	adds	r0, #1
    2cce:	b280      	uxth	r0, r0
    2cd0:	f7ff fd00 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2cd4:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2cd6:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2cd8:	2100      	movs	r1, #0
    2cda:	1c58      	adds	r0, r3, #1
    2cdc:	b280      	uxth	r0, r0
    2cde:	f7ff fcf9 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2ce2:	4a06      	ldr	r2, [pc, #24]	; (2cfc <Fetch_ZeroPage_X()+0x38>)
    2ce4:	4b06      	ldr	r3, [pc, #24]	; (2d00 <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2ce6:	2100      	movs	r1, #0
    2ce8:	7812      	ldrb	r2, [r2, #0]
    2cea:	18a0      	adds	r0, r4, r2
    2cec:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2cee:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2cf0:	f7ff fcf0 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2cf4:	bd10      	pop	{r4, pc}
    2cf6:	bf00      	nop
    2cf8:	20018888 	.word	0x20018888
    2cfc:	200188a0 	.word	0x200188a0
    2d00:	20018886 	.word	0x20018886

00002d04 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2d04:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2d06:	4c0c      	ldr	r4, [pc, #48]	; (2d38 <Fetch_ZeroPage_Y()+0x34>)
    2d08:	2100      	movs	r1, #0
    2d0a:	8820      	ldrh	r0, [r4, #0]
    2d0c:	3001      	adds	r0, #1
    2d0e:	b280      	uxth	r0, r0
    2d10:	f7ff fce0 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2d14:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2d16:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2d18:	2100      	movs	r1, #0
    2d1a:	1c58      	adds	r0, r3, #1
    2d1c:	b280      	uxth	r0, r0
    2d1e:	f7ff fcd9 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    2d22:	4a06      	ldr	r2, [pc, #24]	; (2d3c <Fetch_ZeroPage_Y()+0x38>)
    2d24:	4b06      	ldr	r3, [pc, #24]	; (2d40 <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    2d26:	2100      	movs	r1, #0
    2d28:	7812      	ldrb	r2, [r2, #0]
    2d2a:	18a0      	adds	r0, r4, r2
    2d2c:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    2d2e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2d30:	f7ff fcd0 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2d34:	bd10      	pop	{r4, pc}
    2d36:	bf00      	nop
    2d38:	20018888 	.word	0x20018888
    2d3c:	200188a1 	.word	0x200188a1
    2d40:	20018886 	.word	0x20018886

00002d44 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    2d44:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2d46:	4c0b      	ldr	r4, [pc, #44]	; (2d74 <Fetch_Absolute()+0x30>)
    2d48:	2100      	movs	r1, #0
    2d4a:	8820      	ldrh	r0, [r4, #0]
    2d4c:	3001      	adds	r0, #1
    2d4e:	b280      	uxth	r0, r0
    2d50:	f7ff fcc0 	bl	26d4 <read_byte(unsigned short, bool)>
    2d54:	8823      	ldrh	r3, [r4, #0]
    2d56:	4604      	mov	r4, r0
    2d58:	2100      	movs	r1, #0
    2d5a:	1c98      	adds	r0, r3, #2
    2d5c:	b280      	uxth	r0, r0
    2d5e:	f7ff fcb9 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    2d62:	4b05      	ldr	r3, [pc, #20]	; (2d78 <Fetch_Absolute()+0x34>)
    2d64:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    2d68:	2100      	movs	r1, #0
    effective_address = adl + adh;
    2d6a:	b280      	uxth	r0, r0
    2d6c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2d6e:	f7ff fcb1 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2d72:	bd10      	pop	{r4, pc}
    2d74:	20018888 	.word	0x20018888
    2d78:	20018886 	.word	0x20018886

00002d7c <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2d7e:	4c14      	ldr	r4, [pc, #80]	; (2dd0 <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2d80:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2d82:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2d84:	4d13      	ldr	r5, [pc, #76]	; (2dd4 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2d86:	8823      	ldrh	r3, [r4, #0]
    2d88:	1c58      	adds	r0, r3, #1
    2d8a:	b280      	uxth	r0, r0
    2d8c:	f7ff fca2 	bl	26d4 <read_byte(unsigned short, bool)>
    2d90:	8823      	ldrh	r3, [r4, #0]
    2d92:	4607      	mov	r7, r0
    2d94:	2100      	movs	r1, #0
    2d96:	1c98      	adds	r0, r3, #2
    2d98:	b280      	uxth	r0, r0
    2d9a:	f7ff fc9b 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    2d9e:	4b0e      	ldr	r3, [pc, #56]	; (2dd8 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2da0:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2da2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2da4:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2da6:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    2da8:	443b      	add	r3, r7
    2daa:	4423      	add	r3, r4
    2dac:	b298      	uxth	r0, r3
    2dae:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2db0:	f7ff fc90 	bl	26d4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2db4:	2e01      	cmp	r6, #1
    2db6:	d000      	beq.n	2dba <Fetch_Absolute_X(unsigned char)+0x3e>
}
    2db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2dba:	882b      	ldrh	r3, [r5, #0]
    2dbc:	405c      	eors	r4, r3
    2dbe:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2dc2:	d0f9      	beq.n	2db8 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2dc4:	2100      	movs	r1, #0
    2dc6:	4618      	mov	r0, r3
    2dc8:	f7ff fc84 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dce:	bf00      	nop
    2dd0:	20018888 	.word	0x20018888
    2dd4:	20018886 	.word	0x20018886
    2dd8:	200188a0 	.word	0x200188a0

00002ddc <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2dde:	4c14      	ldr	r4, [pc, #80]	; (2e30 <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2de0:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2de2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2de4:	4d13      	ldr	r5, [pc, #76]	; (2e34 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2de6:	8823      	ldrh	r3, [r4, #0]
    2de8:	1c58      	adds	r0, r3, #1
    2dea:	b280      	uxth	r0, r0
    2dec:	f7ff fc72 	bl	26d4 <read_byte(unsigned short, bool)>
    2df0:	8823      	ldrh	r3, [r4, #0]
    2df2:	4607      	mov	r7, r0
    2df4:	2100      	movs	r1, #0
    2df6:	1c98      	adds	r0, r3, #2
    2df8:	b280      	uxth	r0, r0
    2dfa:	f7ff fc6b 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2dfe:	4b0e      	ldr	r3, [pc, #56]	; (2e38 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2e00:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2e02:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2e04:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2e06:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2e08:	443b      	add	r3, r7
    2e0a:	4423      	add	r3, r4
    2e0c:	b298      	uxth	r0, r3
    2e0e:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2e10:	f7ff fc60 	bl	26d4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2e14:	2e01      	cmp	r6, #1
    2e16:	d000      	beq.n	2e1a <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    2e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2e1a:	882b      	ldrh	r3, [r5, #0]
    2e1c:	405c      	eors	r4, r3
    2e1e:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2e22:	d0f9      	beq.n	2e18 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2e24:	2100      	movs	r1, #0
    2e26:	4618      	mov	r0, r3
    2e28:	f7ff fc54 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e2e:	bf00      	nop
    2e30:	20018888 	.word	0x20018888
    2e34:	20018886 	.word	0x20018886
    2e38:	200188a1 	.word	0x200188a1

00002e3c <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    2e3c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2e3e:	4b11      	ldr	r3, [pc, #68]	; (2e84 <Fetch_Indexed_Indirect_X()+0x48>)
    2e40:	2100      	movs	r1, #0
    2e42:	8818      	ldrh	r0, [r3, #0]
    2e44:	3001      	adds	r0, #1
    2e46:	b280      	uxth	r0, r0
    2e48:	f7ff fc44 	bl	26d4 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    2e4c:	4b0e      	ldr	r3, [pc, #56]	; (2e88 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    2e4e:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    2e50:	781c      	ldrb	r4, [r3, #0]
    2e52:	4404      	add	r4, r0
    2e54:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    2e56:	4620      	mov	r0, r4
    2e58:	f7ff fc3c 	bl	26d4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    2e5c:	2100      	movs	r1, #0
    2e5e:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2e60:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    2e62:	f7ff fc37 	bl	26d4 <read_byte(unsigned short, bool)>
    2e66:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2e68:	2100      	movs	r1, #0
    2e6a:	b2e0      	uxtb	r0, r4
    2e6c:	f7ff fc32 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2e70:	4b06      	ldr	r3, [pc, #24]	; (2e8c <Fetch_Indexed_Indirect_X()+0x50>)
    2e72:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    2e76:	2100      	movs	r1, #0
    effective_address = adh + adl;
    2e78:	b280      	uxth	r0, r0
    2e7a:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    2e7c:	f7ff fc2a 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2e80:	bd38      	pop	{r3, r4, r5, pc}
    2e82:	bf00      	nop
    2e84:	20018888 	.word	0x20018888
    2e88:	200188a0 	.word	0x200188a0
    2e8c:	20018886 	.word	0x20018886

00002e90 <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2e92:	4b16      	ldr	r3, [pc, #88]	; (2eec <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2e94:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2e96:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2e98:	4e15      	ldr	r6, [pc, #84]	; (2ef0 <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2e9a:	881b      	ldrh	r3, [r3, #0]
    2e9c:	1c58      	adds	r0, r3, #1
    2e9e:	b280      	uxth	r0, r0
    2ea0:	f7ff fc18 	bl	26d4 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    2ea4:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2ea6:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    2ea8:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2eaa:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    2eac:	f7ff fc12 	bl	26d4 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2eb0:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    2eb2:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2eb4:	b2e0      	uxtb	r0, r4
    2eb6:	f7ff fc0d 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2eba:	4b0e      	ldr	r3, [pc, #56]	; (2ef4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2ebc:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2ebe:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2ec0:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2ec2:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2ec4:	443b      	add	r3, r7
    2ec6:	4423      	add	r3, r4
    2ec8:	b298      	uxth	r0, r3
    2eca:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    2ecc:	f7ff fc02 	bl	26d4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2ed0:	2d01      	cmp	r5, #1
    2ed2:	d000      	beq.n	2ed6 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    2ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2ed6:	8833      	ldrh	r3, [r6, #0]
    2ed8:	405c      	eors	r4, r3
    2eda:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2ede:	d0f9      	beq.n	2ed4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    2ee0:	2100      	movs	r1, #0
    2ee2:	4618      	mov	r0, r3
    2ee4:	f7ff fbf6 	bl	26d4 <read_byte(unsigned short, bool)>
}
    2ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2eea:	bf00      	nop
    2eec:	20018888 	.word	0x20018888
    2ef0:	20018886 	.word	0x20018886
    2ef4:	200188a1 	.word	0x200188a1

00002ef8 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    2ef8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2efa:	4e0c      	ldr	r6, [pc, #48]	; (2f2c <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    2efc:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2efe:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f00:	4c0b      	ldr	r4, [pc, #44]	; (2f30 <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    2f02:	8833      	ldrh	r3, [r6, #0]
    2f04:	1c58      	adds	r0, r3, #1
    2f06:	b280      	uxth	r0, r0
    2f08:	f7ff fbe4 	bl	26d4 <read_byte(unsigned short, bool)>
    2f0c:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    2f0e:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    2f10:	2100      	movs	r1, #0
    2f12:	1c98      	adds	r0, r3, #2
    2f14:	b280      	uxth	r0, r0
    2f16:	f7ff fbdd 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2f1a:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    2f1c:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2f1e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    2f22:	b280      	uxth	r0, r0
    2f24:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    2f26:	f7ff fd91 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
    2f2c:	20018888 	.word	0x20018888
    2f30:	20018886 	.word	0x20018886

00002f34 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    2f34:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2f36:	4b0b      	ldr	r3, [pc, #44]	; (2f64 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    2f38:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2f3a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f3c:	4d0a      	ldr	r5, [pc, #40]	; (2f68 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2f3e:	881b      	ldrh	r3, [r3, #0]
    2f40:	1c58      	adds	r0, r3, #1
    2f42:	b280      	uxth	r0, r0
    2f44:	f7ff fbc6 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2f48:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f4a:	b280      	uxth	r0, r0
    2f4c:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2f4e:	f7ff fbc1 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    2f52:	4a06      	ldr	r2, [pc, #24]	; (2f6c <Write_ZeroPage_X(unsigned char)+0x38>)
    2f54:	4621      	mov	r1, r4
    2f56:	882b      	ldrh	r3, [r5, #0]
    2f58:	7810      	ldrb	r0, [r2, #0]
    2f5a:	4418      	add	r0, r3
    2f5c:	b2c0      	uxtb	r0, r0
    2f5e:	f7ff fd75 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    2f62:	bd38      	pop	{r3, r4, r5, pc}
    2f64:	20018888 	.word	0x20018888
    2f68:	20018886 	.word	0x20018886
    2f6c:	200188a0 	.word	0x200188a0

00002f70 <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    2f70:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2f72:	4b0b      	ldr	r3, [pc, #44]	; (2fa0 <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    2f74:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2f76:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f78:	4d0a      	ldr	r5, [pc, #40]	; (2fa4 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2f7a:	881b      	ldrh	r3, [r3, #0]
    2f7c:	1c58      	adds	r0, r3, #1
    2f7e:	b280      	uxth	r0, r0
    2f80:	f7ff fba8 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2f84:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f86:	b280      	uxth	r0, r0
    2f88:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2f8a:	f7ff fba3 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    2f8e:	4a06      	ldr	r2, [pc, #24]	; (2fa8 <Write_ZeroPage_Y(unsigned char)+0x38>)
    2f90:	4621      	mov	r1, r4
    2f92:	882b      	ldrh	r3, [r5, #0]
    2f94:	7810      	ldrb	r0, [r2, #0]
    2f96:	4418      	add	r0, r3
    2f98:	b2c0      	uxtb	r0, r0
    2f9a:	f7ff fd57 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    2f9e:	bd38      	pop	{r3, r4, r5, pc}
    2fa0:	20018888 	.word	0x20018888
    2fa4:	20018886 	.word	0x20018886
    2fa8:	200188a1 	.word	0x200188a1

00002fac <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    2fac:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2fae:	4d0f      	ldr	r5, [pc, #60]	; (2fec <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    2fb0:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2fb2:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2fb4:	4e0e      	ldr	r6, [pc, #56]	; (2ff0 <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    2fb6:	882b      	ldrh	r3, [r5, #0]
    2fb8:	1c58      	adds	r0, r3, #1
    2fba:	b280      	uxth	r0, r0
    2fbc:	f7ff fb8a 	bl	26d4 <read_byte(unsigned short, bool)>
    2fc0:	882b      	ldrh	r3, [r5, #0]
    2fc2:	4605      	mov	r5, r0
    2fc4:	2100      	movs	r1, #0
    2fc6:	1c98      	adds	r0, r3, #2
    2fc8:	b280      	uxth	r0, r0
    2fca:	f7ff fb83 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    2fce:	4b09      	ldr	r3, [pc, #36]	; (2ff4 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    2fd0:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2fd2:	781b      	ldrb	r3, [r3, #0]
    2fd4:	442b      	add	r3, r5
    2fd6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2fda:	b298      	uxth	r0, r3
    2fdc:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    2fde:	f7ff fb79 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2fe2:	4621      	mov	r1, r4
    2fe4:	8830      	ldrh	r0, [r6, #0]
    2fe6:	f7ff fd31 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    2fea:	bd70      	pop	{r4, r5, r6, pc}
    2fec:	20018888 	.word	0x20018888
    2ff0:	20018886 	.word	0x20018886
    2ff4:	200188a0 	.word	0x200188a0

00002ff8 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    2ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2ffa:	4c16      	ldr	r4, [pc, #88]	; (3054 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    2ffc:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2ffe:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    3000:	4d15      	ldr	r5, [pc, #84]	; (3058 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    3002:	8823      	ldrh	r3, [r4, #0]
    3004:	1c58      	adds	r0, r3, #1
    3006:	b280      	uxth	r0, r0
    3008:	f7ff fb64 	bl	26d4 <read_byte(unsigned short, bool)>
    300c:	8823      	ldrh	r3, [r4, #0]
    300e:	4607      	mov	r7, r0
    3010:	2100      	movs	r1, #0
    3012:	1c98      	adds	r0, r3, #2
    3014:	b280      	uxth	r0, r0
    3016:	f7ff fb5d 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    301a:	4b10      	ldr	r3, [pc, #64]	; (305c <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    301c:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    301e:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    3020:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    3022:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    3024:	443b      	add	r3, r7
    3026:	4423      	add	r3, r4
    3028:	b298      	uxth	r0, r3
    302a:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    302c:	f7ff fb52 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    3030:	8828      	ldrh	r0, [r5, #0]
    3032:	4044      	eors	r4, r0
    3034:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    3038:	d103      	bne.n	3042 <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    303a:	4631      	mov	r1, r6
    303c:	f7ff fd06 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    3040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    3042:	2100      	movs	r1, #0
    3044:	f7ff fb46 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    3048:	8828      	ldrh	r0, [r5, #0]
    304a:	4631      	mov	r1, r6
    304c:	f7ff fcfe 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    3050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3052:	bf00      	nop
    3054:	20018888 	.word	0x20018888
    3058:	20018886 	.word	0x20018886
    305c:	200188a1 	.word	0x200188a1

00003060 <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    3062:	4b13      	ldr	r3, [pc, #76]	; (30b0 <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3064:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    3066:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    3068:	4f12      	ldr	r7, [pc, #72]	; (30b4 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    306a:	881b      	ldrh	r3, [r3, #0]
    306c:	1c58      	adds	r0, r3, #1
    306e:	b280      	uxth	r0, r0
    3070:	f7ff fb30 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    3074:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    3076:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    3078:	4604      	mov	r4, r0
    read_byte(bal, false);
    307a:	4628      	mov	r0, r5
    307c:	f7ff fb2a 	bl	26d4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    3080:	783b      	ldrb	r3, [r7, #0]
    3082:	2100      	movs	r1, #0
    3084:	441c      	add	r4, r3
    3086:	b2e0      	uxtb	r0, r4
    3088:	f7ff fb24 	bl	26d4 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    308c:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    308e:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3090:	2100      	movs	r1, #0
    3092:	3301      	adds	r3, #1
    3094:	441d      	add	r5, r3
    3096:	b2e8      	uxtb	r0, r5
    3098:	f7ff fb1c 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    309c:	4b06      	ldr	r3, [pc, #24]	; (30b8 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    309e:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    30a2:	4631      	mov	r1, r6
    effective_address = adh + adl;
    30a4:	b280      	uxth	r0, r0
    30a6:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    30a8:	f7ff fcd0 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    30ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30ae:	bf00      	nop
    30b0:	20018888 	.word	0x20018888
    30b4:	200188a0 	.word	0x200188a0
    30b8:	20018886 	.word	0x20018886

000030bc <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    30bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    30be:	4b11      	ldr	r3, [pc, #68]	; (3104 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    30c0:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    30c2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30c4:	4f10      	ldr	r7, [pc, #64]	; (3108 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    30c6:	881b      	ldrh	r3, [r3, #0]
    30c8:	1c58      	adds	r0, r3, #1
    30ca:	b280      	uxth	r0, r0
    30cc:	f7ff fb02 	bl	26d4 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    30d0:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    30d2:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    30d4:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    30d6:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    30d8:	f7ff fafc 	bl	26d4 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    30dc:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    30de:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    30e0:	b2a0      	uxth	r0, r4
    30e2:	f7ff faf7 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    30e6:	4b09      	ldr	r3, [pc, #36]	; (310c <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    30e8:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30ea:	781b      	ldrb	r3, [r3, #0]
    30ec:	4433      	add	r3, r6
    30ee:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    30f2:	b298      	uxth	r0, r3
    30f4:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    30f6:	f7ff faed 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    30fa:	4629      	mov	r1, r5
    30fc:	8838      	ldrh	r0, [r7, #0]
    30fe:	f7ff fca5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
}
    3102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3104:	20018888 	.word	0x20018888
    3108:	20018886 	.word	0x20018886
    310c:	200188a1 	.word	0x200188a1

00003110 <reset_sequence()>:
void reset_sequence() {
    3110:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    3112:	4b65      	ldr	r3, [pc, #404]	; (32a8 <reset_sequence()+0x198>)
    3114:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    3116:	4d65      	ldr	r5, [pc, #404]	; (32ac <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3118:	2002      	movs	r0, #2
    311a:	4965      	ldr	r1, [pc, #404]	; (32b0 <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    311c:	4c65      	ldr	r4, [pc, #404]	; (32b4 <reset_sequence()+0x1a4>)
    311e:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    3122:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    3124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3128:	8828      	ldrh	r0, [r5, #0]
    312a:	f7ff fad3 	bl	26d4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    312e:	8828      	ldrh	r0, [r5, #0]
    3130:	2100      	movs	r1, #0
    3132:	3001      	adds	r0, #1
    3134:	b280      	uxth	r0, r0
    3136:	f7ff facd 	bl	26d4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    313a:	7820      	ldrb	r0, [r4, #0]
    313c:	2100      	movs	r1, #0
    313e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3142:	f7ff fac7 	bl	26d4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    3146:	7820      	ldrb	r0, [r4, #0]
    3148:	2100      	movs	r1, #0
    314a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    314e:	3801      	subs	r0, #1
    3150:	b280      	uxth	r0, r0
    3152:	f7ff fabf 	bl	26d4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    3156:	7820      	ldrb	r0, [r4, #0]
    3158:	2100      	movs	r1, #0
    315a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    315e:	3802      	subs	r0, #2
    3160:	b280      	uxth	r0, r0
    3162:	f7ff fab7 	bl	26d4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    3166:	2100      	movs	r1, #0
    3168:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    316c:	f7ff fab2 	bl	26d4 <read_byte(unsigned short, bool)>
    3170:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    3172:	2100      	movs	r1, #0
    3174:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3178:	f7ff faac 	bl	26d4 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    317c:	4a4e      	ldr	r2, [pc, #312]	; (32b8 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    317e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    3182:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3184:	4b4d      	ldr	r3, [pc, #308]	; (32bc <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3186:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3188:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    318a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    318e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    3190:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3192:	d37b      	bcc.n	328c <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3194:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    319c:	d309      	bcc.n	31b2 <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    319e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    31a2:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    31a6:	d371      	bcc.n	328c <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    31a8:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    31ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    31b0:	d36c      	bcc.n	328c <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    31b2:	4b43      	ldr	r3, [pc, #268]	; (32c0 <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    31b4:	2100      	movs	r1, #0
    31b6:	4a43      	ldr	r2, [pc, #268]	; (32c4 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    31b8:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    31ba:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    31bc:	2b01      	cmp	r3, #1
    31be:	d005      	beq.n	31cc <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    31c0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    31c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    31c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    31cc:	4b3e      	ldr	r3, [pc, #248]	; (32c8 <reset_sequence()+0x1b8>)
    31ce:	781b      	ldrb	r3, [r3, #0]
    31d0:	b94b      	cbnz	r3, 31e6 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    31d2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    31d6:	6813      	ldr	r3, [r2, #0]
    31d8:	04d9      	lsls	r1, r3, #19
    31da:	d4fc      	bmi.n	31d6 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    31dc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    31e0:	6813      	ldr	r3, [r2, #0]
    31e2:	04db      	lsls	r3, r3, #19
    31e4:	d5fc      	bpl.n	31e0 <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    31e6:	4e32      	ldr	r6, [pc, #200]	; (32b0 <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    31e8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    31ec:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    31ee:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    31f0:	06c1      	lsls	r1, r0, #27
    31f2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    31f6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    31fa:	682a      	ldr	r2, [r5, #0]
    31fc:	4b33      	ldr	r3, [pc, #204]	; (32cc <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    31fe:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3202:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3204:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3206:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    320a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    320e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3210:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3214:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3218:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    321a:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    321e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3222:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3224:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3226:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3228:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    322a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    322e:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3234:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3236:	4a26      	ldr	r2, [pc, #152]	; (32d0 <reset_sequence()+0x1c0>)
    3238:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    323a:	4d26      	ldr	r5, [pc, #152]	; (32d4 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    323c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    323e:	0542      	lsls	r2, r0, #21
    3240:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3244:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3246:	0343      	lsls	r3, r0, #13
    3248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    324c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    324e:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3250:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3254:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3258:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    325a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    325e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3262:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3264:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3268:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    326c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    326e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3270:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3272:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3276:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3278:	480b      	ldr	r0, [pc, #44]	; (32a8 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    327a:	4332      	orrs	r2, r6
    327c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    327e:	4a16      	ldr	r2, [pc, #88]	; (32d8 <reset_sequence()+0x1c8>)
    3280:	6804      	ldr	r4, [r0, #0]
    3282:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3284:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3286:	430b      	orrs	r3, r1
    3288:	6003      	str	r3, [r0, #0]
    return;
    328a:	e003      	b.n	3294 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    328c:	4b13      	ldr	r3, [pc, #76]	; (32dc <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	2b01      	cmp	r3, #1
    3292:	d98e      	bls.n	31b2 <reset_sequence()+0xa2>
    3294:	2110      	movs	r1, #16
    3296:	4812      	ldr	r0, [pc, #72]	; (32e0 <reset_sequence()+0x1d0>)
    3298:	f006 fea4 	bl	9fe4 <usb_serial_write>
    329c:	4811      	ldr	r0, [pc, #68]	; (32e4 <reset_sequence()+0x1d4>)
}
    329e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    32a2:	f005 ba05 	b.w	86b0 <Print::println()>
    32a6:	bf00      	nop
    32a8:	4200c000 	.word	0x4200c000
    32ac:	20018888 	.word	0x20018888
    32b0:	42004000 	.word	0x42004000
    32b4:	20004991 	.word	0x20004991
    32b8:	20004990 	.word	0x20004990
    32bc:	20018884 	.word	0x20018884
    32c0:	200188a2 	.word	0x200188a2
    32c4:	2001889d 	.word	0x2001889d
    32c8:	2000498e 	.word	0x2000498e
    32cc:	6dfffff3 	.word	0x6dfffff3
    32d0:	cff3efff 	.word	0xcff3efff
    32d4:	42008000 	.word	0x42008000
    32d8:	7fffff6f 	.word	0x7fffff6f
    32dc:	20018894 	.word	0x20018894
    32e0:	200003d8 	.word	0x200003d8
    32e4:	20004380 	.word	0x20004380

000032e8 <nmi_handler()>:
void nmi_handler() {
    32e8:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    32ea:	4e67      	ldr	r6, [pc, #412]	; (3488 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    32ec:	f7ff f9a2 	bl	2634 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    32f0:	4c66      	ldr	r4, [pc, #408]	; (348c <nmi_handler()+0x1a4>)
    32f2:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    32f4:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    32f6:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    32f8:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    32fc:	4d64      	ldr	r5, [pc, #400]	; (3490 <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    32fe:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3300:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3304:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3306:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3308:	f7ff f9e4 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    330c:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    330e:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    3310:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3314:	0a09      	lsrs	r1, r1, #8
    3316:	f7ff fb99 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    331a:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    331c:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    331e:	3801      	subs	r0, #1
    3320:	b2c0      	uxtb	r0, r0
    3322:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3324:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3328:	f7ff fb90 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    332c:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    332e:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3330:	3801      	subs	r0, #1
    3332:	b2c0      	uxtb	r0, r0
    3334:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3336:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    333a:	f7ff fb87 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    333e:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    3340:	2100      	movs	r1, #0
    3342:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    3346:	3b01      	subs	r3, #1
    3348:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    334a:	f7ff f9c3 	bl	26d4 <read_byte(unsigned short, bool)>
    334e:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    3350:	2100      	movs	r1, #0
    3352:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    3356:	f7ff f9bd 	bl	26d4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    335a:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    335c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3360:	4a4c      	ldr	r2, [pc, #304]	; (3494 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3362:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3366:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3368:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    336a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    336e:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3370:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3372:	d37b      	bcc.n	346c <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3374:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    337c:	d309      	bcc.n	3392 <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    337e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3382:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3386:	d371      	bcc.n	346c <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3388:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    338c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3390:	d36c      	bcc.n	346c <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3392:	4b41      	ldr	r3, [pc, #260]	; (3498 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3394:	2100      	movs	r1, #0
    3396:	4a41      	ldr	r2, [pc, #260]	; (349c <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3398:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    339a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    339c:	2b01      	cmp	r3, #1
    339e:	d005      	beq.n	33ac <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    33a0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    33a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    33a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    33ac:	4b3c      	ldr	r3, [pc, #240]	; (34a0 <nmi_handler()+0x1b8>)
    33ae:	781b      	ldrb	r3, [r3, #0]
    33b0:	b94b      	cbnz	r3, 33c6 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    33b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    33b6:	6813      	ldr	r3, [r2, #0]
    33b8:	04d9      	lsls	r1, r3, #19
    33ba:	d4fc      	bmi.n	33b6 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    33bc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    33c0:	6813      	ldr	r3, [r2, #0]
    33c2:	04db      	lsls	r3, r3, #19
    33c4:	d5fc      	bpl.n	33c0 <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    33c6:	4e37      	ldr	r6, [pc, #220]	; (34a4 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33c8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    33cc:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    33ce:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    33d0:	06c1      	lsls	r1, r0, #27
    33d2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    33d6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33da:	682a      	ldr	r2, [r5, #0]
    33dc:	4b32      	ldr	r3, [pc, #200]	; (34a8 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    33de:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33e2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    33e4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    33e6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    33ea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    33ee:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    33f0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    33f4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    33f8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    33fa:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    33fe:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3402:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3404:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3406:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3408:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    340a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    340e:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3414:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3416:	4a25      	ldr	r2, [pc, #148]	; (34ac <nmi_handler()+0x1c4>)
    3418:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    341a:	4d25      	ldr	r5, [pc, #148]	; (34b0 <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    341c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    341e:	0542      	lsls	r2, r0, #21
    3420:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3424:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3426:	0343      	lsls	r3, r0, #13
    3428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    342c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    342e:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3430:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3434:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3438:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    343a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    343e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3442:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3444:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3448:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    344c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    344e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3450:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3452:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3456:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3458:	4816      	ldr	r0, [pc, #88]	; (34b4 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    345a:	4332      	orrs	r2, r6
    345c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    345e:	4a16      	ldr	r2, [pc, #88]	; (34b8 <nmi_handler()+0x1d0>)
    3460:	6804      	ldr	r4, [r0, #0]
    3462:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3464:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3466:	430b      	orrs	r3, r1
    3468:	6003      	str	r3, [r0, #0]
    return;
    346a:	e003      	b.n	3474 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    346c:	4b13      	ldr	r3, [pc, #76]	; (34bc <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    346e:	781b      	ldrb	r3, [r3, #0]
    3470:	2b01      	cmp	r3, #1
    3472:	d98e      	bls.n	3392 <nmi_handler()+0xaa>
    3474:	210e      	movs	r1, #14
    3476:	4812      	ldr	r0, [pc, #72]	; (34c0 <nmi_handler()+0x1d8>)
    3478:	f006 fdb4 	bl	9fe4 <usb_serial_write>
    347c:	4811      	ldr	r0, [pc, #68]	; (34c4 <nmi_handler()+0x1dc>)
}
    347e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3482:	f005 b915 	b.w	86b0 <Print::println()>
    3486:	bf00      	nop
    3488:	20004990 	.word	0x20004990
    348c:	20018888 	.word	0x20018888
    3490:	20004991 	.word	0x20004991
    3494:	20018884 	.word	0x20018884
    3498:	200188a2 	.word	0x200188a2
    349c:	2001889d 	.word	0x2001889d
    34a0:	2000498e 	.word	0x2000498e
    34a4:	42004000 	.word	0x42004000
    34a8:	6dfffff3 	.word	0x6dfffff3
    34ac:	cff3efff 	.word	0xcff3efff
    34b0:	42008000 	.word	0x42008000
    34b4:	4200c000 	.word	0x4200c000
    34b8:	7fffff6f 	.word	0x7fffff6f
    34bc:	20018894 	.word	0x20018894
    34c0:	20000394 	.word	0x20000394
    34c4:	20004380 	.word	0x20004380

000034c8 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    34c8:	b570      	push	{r4, r5, r6, lr}
    34ca:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    34cc:	4e69      	ldr	r6, [pc, #420]	; (3674 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    34ce:	f7ff f8b1 	bl	2634 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    34d2:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    34d4:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    34d6:	f000 80ca 	beq.w	366e <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    34da:	f023 0310 	bic.w	r3, r3, #16
    34de:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    34e2:	4c65      	ldr	r4, [pc, #404]	; (3678 <irq_handler(unsigned char)+0x1b0>)
    34e4:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    34e6:	4d65      	ldr	r5, [pc, #404]	; (367c <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    34e8:	8820      	ldrh	r0, [r4, #0]
    34ea:	7033      	strb	r3, [r6, #0]
    34ec:	3001      	adds	r0, #1
    34ee:	b280      	uxth	r0, r0
    34f0:	f7ff f8f0 	bl	26d4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    34f4:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    34f6:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    34f8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34fc:	0a09      	lsrs	r1, r1, #8
    34fe:	f7ff faa5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3502:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3504:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    3506:	3801      	subs	r0, #1
    3508:	b2c0      	uxtb	r0, r0
    350a:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    350c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3510:	f7ff fa9c 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3514:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3516:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3518:	3801      	subs	r0, #1
    351a:	b2c0      	uxtb	r0, r0
    351c:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    351e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3522:	f7ff fa93 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3526:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    3528:	2100      	movs	r1, #0
    352a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    352e:	3b01      	subs	r3, #1
    3530:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    3532:	f7ff f8cf 	bl	26d4 <read_byte(unsigned short, bool)>
    3536:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    3538:	2100      	movs	r1, #0
    353a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    353e:	f7ff f8c9 	bl	26d4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3542:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    3544:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3548:	4a4d      	ldr	r2, [pc, #308]	; (3680 <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    354a:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    354e:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3550:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3552:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    3556:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3558:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    355a:	d37b      	bcc.n	3654 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    355c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3564:	d309      	bcc.n	357a <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3566:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    356a:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    356e:	d371      	bcc.n	3654 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3570:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3574:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3578:	d36c      	bcc.n	3654 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    357a:	4b42      	ldr	r3, [pc, #264]	; (3684 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    357c:	2100      	movs	r1, #0
    357e:	4a42      	ldr	r2, [pc, #264]	; (3688 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3580:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3582:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3584:	2b01      	cmp	r3, #1
    3586:	d005      	beq.n	3594 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3588:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    358c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3594:	4b3d      	ldr	r3, [pc, #244]	; (368c <irq_handler(unsigned char)+0x1c4>)
    3596:	781b      	ldrb	r3, [r3, #0]
    3598:	b94b      	cbnz	r3, 35ae <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    359a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    359e:	6813      	ldr	r3, [r2, #0]
    35a0:	04d9      	lsls	r1, r3, #19
    35a2:	d4fc      	bmi.n	359e <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    35a4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    35a8:	6813      	ldr	r3, [r2, #0]
    35aa:	04db      	lsls	r3, r3, #19
    35ac:	d5fc      	bpl.n	35a8 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    35ae:	4e38      	ldr	r6, [pc, #224]	; (3690 <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35b0:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    35b4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    35b6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    35b8:	06c1      	lsls	r1, r0, #27
    35ba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35be:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35c2:	682a      	ldr	r2, [r5, #0]
    35c4:	4b33      	ldr	r3, [pc, #204]	; (3694 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35c6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35ca:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    35cc:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35ce:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    35d2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35d6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    35d8:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    35dc:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35e0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    35e2:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    35e6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35ea:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35ec:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35ee:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    35f0:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35f2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35f6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    35f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35fc:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35fe:	4a26      	ldr	r2, [pc, #152]	; (3698 <irq_handler(unsigned char)+0x1d0>)
    3600:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3602:	4d26      	ldr	r5, [pc, #152]	; (369c <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3604:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3606:	0542      	lsls	r2, r0, #21
    3608:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    360c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    360e:	0343      	lsls	r3, r0, #13
    3610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    3614:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3616:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3618:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    361c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3620:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3622:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3626:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    362a:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    362c:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3630:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3634:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3636:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3638:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    363a:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    363e:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3640:	4817      	ldr	r0, [pc, #92]	; (36a0 <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3642:	4332      	orrs	r2, r6
    3644:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3646:	4a17      	ldr	r2, [pc, #92]	; (36a4 <irq_handler(unsigned char)+0x1dc>)
    3648:	6804      	ldr	r4, [r0, #0]
    364a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    364c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    364e:	430b      	orrs	r3, r1
    3650:	6003      	str	r3, [r0, #0]
    return;
    3652:	e003      	b.n	365c <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3654:	4b14      	ldr	r3, [pc, #80]	; (36a8 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3656:	781b      	ldrb	r3, [r3, #0]
    3658:	2b01      	cmp	r3, #1
    365a:	d98e      	bls.n	357a <irq_handler(unsigned char)+0xb2>
    365c:	210e      	movs	r1, #14
    365e:	4813      	ldr	r0, [pc, #76]	; (36ac <irq_handler(unsigned char)+0x1e4>)
    3660:	f006 fcc0 	bl	9fe4 <usb_serial_write>
    3664:	4812      	ldr	r0, [pc, #72]	; (36b0 <irq_handler(unsigned char)+0x1e8>)
}
    3666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    366a:	f005 b821 	b.w	86b0 <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    366e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3672:	e736      	b.n	34e2 <irq_handler(unsigned char)+0x1a>
    3674:	20004990 	.word	0x20004990
    3678:	20018888 	.word	0x20018888
    367c:	20004991 	.word	0x20004991
    3680:	20018884 	.word	0x20018884
    3684:	200188a2 	.word	0x200188a2
    3688:	2001889d 	.word	0x2001889d
    368c:	2000498e 	.word	0x2000498e
    3690:	42004000 	.word	0x42004000
    3694:	6dfffff3 	.word	0x6dfffff3
    3698:	cff3efff 	.word	0xcff3efff
    369c:	42008000 	.word	0x42008000
    36a0:	4200c000 	.word	0x4200c000
    36a4:	7fffff6f 	.word	0x7fffff6f
    36a8:	20018894 	.word	0x20018894
    36ac:	20000384 	.word	0x20000384
    36b0:	20004380 	.word	0x20004380

000036b4 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    36b4:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    36b6:	4c0f      	ldr	r4, [pc, #60]	; (36f4 <opcode_0x0A()+0x40>)
    36b8:	2100      	movs	r1, #0
    36ba:	8820      	ldrh	r0, [r4, #0]
    36bc:	f7ff f80a 	bl	26d4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36c0:	4b0d      	ldr	r3, [pc, #52]	; (36f8 <opcode_0x0A()+0x44>)
    36c2:	490e      	ldr	r1, [pc, #56]	; (36fc <opcode_0x0A()+0x48>)
    36c4:	f993 2000 	ldrsb.w	r2, [r3]
    36c8:	7818      	ldrb	r0, [r3, #0]
    36ca:	2a00      	cmp	r2, #0
    36cc:	780a      	ldrb	r2, [r1, #0]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    36ce:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36d2:	bfb4      	ite	lt
    36d4:	f042 0201 	orrlt.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    36d8:	f002 02fe 	andge.w	r2, r2, #254	; 0xfe
    register_a = register_a << 1;
    36dc:	b2c0      	uxtb	r0, r0
    36de:	700a      	strb	r2, [r1, #0]
    36e0:	7018      	strb	r0, [r3, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    36e2:	f7ff fabb 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0A].length);
    36e6:	4a06      	ldr	r2, [pc, #24]	; (3700 <opcode_0x0A()+0x4c>)
    36e8:	8823      	ldrh	r3, [r4, #0]
    36ea:	f892 0239 	ldrb.w	r0, [r2, #569]	; 0x239
    36ee:	4418      	add	r0, r3
}
    36f0:	b280      	uxth	r0, r0
    36f2:	bd10      	pop	{r4, pc}
    36f4:	20018888 	.word	0x20018888
    36f8:	2001889f 	.word	0x2001889f
    36fc:	20004990 	.word	0x20004990
    3700:	20015418 	.word	0x20015418

00003704 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    3704:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3706:	4c0e      	ldr	r4, [pc, #56]	; (3740 <opcode_0x4A()+0x3c>)
    3708:	2100      	movs	r1, #0
    370a:	8820      	ldrh	r0, [r4, #0]
    370c:	f7fe ffe2 	bl	26d4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3710:	4a0c      	ldr	r2, [pc, #48]	; (3744 <opcode_0x4A()+0x40>)
    3712:	490d      	ldr	r1, [pc, #52]	; (3748 <opcode_0x4A()+0x44>)
    3714:	7810      	ldrb	r0, [r2, #0]
    3716:	780b      	ldrb	r3, [r1, #0]
    3718:	f010 0f01 	tst.w	r0, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    371c:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3720:	bf14      	ite	ne
    3722:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3726:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    372a:	7010      	strb	r0, [r2, #0]
    372c:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    372e:	f7ff fa95 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4A].length);
    3732:	4a06      	ldr	r2, [pc, #24]	; (374c <opcode_0x4A()+0x48>)
    3734:	8823      	ldrh	r3, [r4, #0]
    3736:	f892 0f39 	ldrb.w	r0, [r2, #3897]	; 0xf39
    373a:	4418      	add	r0, r3
}
    373c:	b280      	uxth	r0, r0
    373e:	bd10      	pop	{r4, pc}
    3740:	20018888 	.word	0x20018888
    3744:	2001889f 	.word	0x2001889f
    3748:	20004990 	.word	0x20004990
    374c:	20015418 	.word	0x20015418

00003750 <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    3750:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3752:	4c10      	ldr	r4, [pc, #64]	; (3794 <opcode_0x6A()+0x44>)
    3754:	2100      	movs	r1, #0
    3756:	8820      	ldrh	r0, [r4, #0]
    3758:	f7fe ffbc 	bl	26d4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    375c:	490e      	ldr	r1, [pc, #56]	; (3798 <opcode_0x6A()+0x48>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    375e:	4a0f      	ldr	r2, [pc, #60]	; (379c <opcode_0x6A()+0x4c>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3760:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3762:	f892 c000 	ldrb.w	ip, [r2]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3766:	01d8      	lsls	r0, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3768:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    376c:	b2c0      	uxtb	r0, r0
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    376e:	bf14      	ite	ne
    3770:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3774:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3778:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    377c:	700b      	strb	r3, [r1, #0]
    377e:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3780:	f7ff fa6c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x6A].length);
    3784:	4a06      	ldr	r2, [pc, #24]	; (37a0 <opcode_0x6A()+0x50>)
    3786:	8823      	ldrh	r3, [r4, #0]
    3788:	f892 05b9 	ldrb.w	r0, [r2, #1465]	; 0x5b9
    378c:	4418      	add	r0, r3
}
    378e:	b280      	uxth	r0, r0
    3790:	bd10      	pop	{r4, pc}
    3792:	bf00      	nop
    3794:	20018888 	.word	0x20018888
    3798:	20004990 	.word	0x20004990
    379c:	2001889f 	.word	0x2001889f
    37a0:	20016418 	.word	0x20016418

000037a4 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    37a4:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    37a6:	4c11      	ldr	r4, [pc, #68]	; (37ec <opcode_0x2A()+0x48>)
    37a8:	2100      	movs	r1, #0
    37aa:	8820      	ldrh	r0, [r4, #0]
    37ac:	f7fe ff92 	bl	26d4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    37b0:	490f      	ldr	r1, [pc, #60]	; (37f0 <opcode_0x2A()+0x4c>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    37b2:	4a10      	ldr	r2, [pc, #64]	; (37f4 <opcode_0x2A()+0x50>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    37b4:	780b      	ldrb	r3, [r1, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    37b6:	f992 e000 	ldrsb.w	lr, [r2]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    37ba:	f003 0001 	and.w	r0, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    37be:	f892 c000 	ldrb.w	ip, [r2]
    37c2:	f1be 0f00 	cmp.w	lr, #0
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    37c6:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    37ca:	bfb4      	ite	lt
    37cc:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    37d0:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    37d4:	b2c0      	uxtb	r0, r0
    37d6:	700b      	strb	r3, [r1, #0]
    37d8:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    37da:	f7ff fa3f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2A].length);
    37de:	4a06      	ldr	r2, [pc, #24]	; (37f8 <opcode_0x2A()+0x54>)
    37e0:	8823      	ldrh	r3, [r4, #0]
    37e2:	f892 08b9 	ldrb.w	r0, [r2, #2233]	; 0x8b9
    37e6:	4418      	add	r0, r3
}
    37e8:	b280      	uxth	r0, r0
    37ea:	bd10      	pop	{r4, pc}
    37ec:	20018888 	.word	0x20018888
    37f0:	20004990 	.word	0x20004990
    37f4:	2001889f 	.word	0x2001889f
    37f8:	20015418 	.word	0x20015418

000037fc <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    37fc:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    37fe:	4c2f      	ldr	r4, [pc, #188]	; (38bc <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3800:	492f      	ldr	r1, [pc, #188]	; (38c0 <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    3802:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3804:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    3808:	0716      	lsls	r6, r2, #28
    380a:	d532      	bpl.n	3872 <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    380c:	f002 0e01 	and.w	lr, r2, #1
    3810:	f00c 030f 	and.w	r3, ip, #15
    3814:	f000 050f 	and.w	r5, r0, #15
    3818:	4473      	add	r3, lr
    381a:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    381c:	2b09      	cmp	r3, #9
    381e:	d823      	bhi.n	3868 <Calculate_ADC(unsigned short)+0x6c>
    3820:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    3824:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    3828:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    382c:	4435      	add	r5, r6
    382e:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3830:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    3834:	d838      	bhi.n	38a8 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3836:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    383a:	4473      	add	r3, lr
    383c:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    383e:	fa4f fc8c 	sxtb.w	ip, ip
    3842:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3846:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    384a:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    384c:	db20      	blt.n	3890 <Calculate_ADC(unsigned short)+0x94>
    384e:	f1be 0f00 	cmp.w	lr, #0
    3852:	db1a      	blt.n	388a <Calculate_ADC(unsigned short)+0x8e>
    3854:	061d      	lsls	r5, r3, #24
    3856:	d41f      	bmi.n	3898 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3858:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    385c:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    385e:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3864:	f7ff b9fa 	b.w	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3868:	3b0a      	subs	r3, #10
    386a:	f04f 0e10 	mov.w	lr, #16
    386e:	b29b      	uxth	r3, r3
    3870:	e7d8      	b.n	3824 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    3872:	f002 0301 	and.w	r3, r2, #1
    3876:	4403      	add	r3, r0
    3878:	4463      	add	r3, ip
    387a:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    387c:	2bff      	cmp	r3, #255	; 0xff
    387e:	bf8c      	ite	hi
    3880:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3884:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3888:	e7d9      	b.n	383e <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    388a:	f1bc 0f00 	cmp.w	ip, #0
    388e:	dae3      	bge.n	3858 <Calculate_ADC(unsigned short)+0x5c>
    3890:	ea63 030e 	orn	r3, r3, lr
    3894:	061b      	lsls	r3, r3, #24
    3896:	d4df      	bmi.n	3858 <Calculate_ADC(unsigned short)+0x5c>
    3898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    389c:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    389e:	7022      	strb	r2, [r4, #0]
}
    38a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    38a4:	f7ff b9da 	b.w	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    38a8:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    38ac:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    38b0:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    38b4:	f042 0201 	orr.w	r2, r2, #1
    38b8:	e7bf      	b.n	383a <Calculate_ADC(unsigned short)+0x3e>
    38ba:	bf00      	nop
    38bc:	20004990 	.word	0x20004990
    38c0:	2001889f 	.word	0x2001889f

000038c4 <Calculate_SBC(unsigned short)>:
} // 0x71 - ADC - Indirect Indexed  Y

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    38c4:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    38c6:	4c32      	ldr	r4, [pc, #200]	; (3990 <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    38c8:	4932      	ldr	r1, [pc, #200]	; (3994 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    38ca:	7823      	ldrb	r3, [r4, #0]
    38cc:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    38ce:	071e      	lsls	r6, r3, #28
    38d0:	f002 0201 	and.w	r2, r2, #1
    38d4:	d539      	bpl.n	394a <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    38d6:	f000 0c0f 	and.w	ip, r0, #15
    38da:	f891 e000 	ldrb.w	lr, [r1]
    38de:	4462      	add	r2, ip
    38e0:	f00e 0c0f 	and.w	ip, lr, #15
    38e4:	ebac 0c02 	sub.w	ip, ip, r2
    38e8:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    38ec:	f1bc 0f09 	cmp.w	ip, #9
    38f0:	d825      	bhi.n	393e <Calculate_SBC(unsigned short)+0x7a>
    38f2:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    38f4:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    38f8:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    38fc:	1b92      	subs	r2, r2, r6
    38fe:	1b52      	subs	r2, r2, r5
    3900:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3902:	2a90      	cmp	r2, #144	; 0x90
    3904:	d83f      	bhi.n	3986 <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3906:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    390a:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    390e:	4494      	add	ip, r2
    3910:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3914:	fa4f fe8e 	sxtb.w	lr, lr
    3918:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    391a:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    391e:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3922:	db24      	blt.n	396e <Calculate_SBC(unsigned short)+0xaa>
    3924:	2a00      	cmp	r2, #0
    3926:	da1f      	bge.n	3968 <Calculate_SBC(unsigned short)+0xa4>
    3928:	f01c 0f80 	tst.w	ip, #128	; 0x80
    392c:	d123      	bne.n	3976 <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    392e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3932:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3934:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    393a:	f7ff b98f 	b.w	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    393e:	f10c 0c0a 	add.w	ip, ip, #10
    3942:	2510      	movs	r5, #16
    3944:	fa1f fc8c 	uxth.w	ip, ip
    3948:	e7d4      	b.n	38f4 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    394a:	f891 e000 	ldrb.w	lr, [r1]
    394e:	ebae 0c00 	sub.w	ip, lr, r0
    3952:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3956:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    3958:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    395c:	bf54      	ite	pl
    395e:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    3962:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3966:	e7d5      	b.n	3914 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3968:	f1be 0f00 	cmp.w	lr, #0
    396c:	dadf      	bge.n	392e <Calculate_SBC(unsigned short)+0x6a>
    396e:	ea42 020c 	orr.w	r2, r2, ip
    3972:	0612      	lsls	r2, r2, #24
    3974:	d4db      	bmi.n	392e <Calculate_SBC(unsigned short)+0x6a>
    3976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    397a:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    397c:	7023      	strb	r3, [r4, #0]
}
    397e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3982:	f7ff b96b 	b.w	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3986:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3988:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    398c:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    398e:	e7be      	b.n	390e <Calculate_SBC(unsigned short)+0x4a>
    3990:	20004990 	.word	0x20004990
    3994:	2001889f 	.word	0x2001889f

00003998 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3998:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    399a:	4c08      	ldr	r4, [pc, #32]	; (39bc <opcode_0xE9()+0x24>)
    399c:	2100      	movs	r1, #0
    399e:	8820      	ldrh	r0, [r4, #0]
    39a0:	3001      	adds	r0, #1
    39a2:	b280      	uxth	r0, r0
    39a4:	f7fe fe96 	bl	26d4 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    39a8:	b280      	uxth	r0, r0
    39aa:	f7ff ff8b 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    39ae:	4a04      	ldr	r2, [pc, #16]	; (39c0 <opcode_0xE9()+0x28>)
    39b0:	8823      	ldrh	r3, [r4, #0]
    39b2:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    39b6:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    39b8:	b280      	uxth	r0, r0
    39ba:	bd10      	pop	{r4, pc}
    39bc:	20018888 	.word	0x20018888
    39c0:	20017418 	.word	0x20017418

000039c4 <opcode_0xEA()>:
} // 0xF1 - SBC - Indirect Indexed  Y

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    39c4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    39c6:	4c07      	ldr	r4, [pc, #28]	; (39e4 <opcode_0xEA()+0x20>)
    39c8:	2100      	movs	r1, #0
    39ca:	8820      	ldrh	r0, [r4, #0]
    39cc:	3001      	adds	r0, #1
    39ce:	b280      	uxth	r0, r0
    39d0:	f7fe fe80 	bl	26d4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    39d4:	4a04      	ldr	r2, [pc, #16]	; (39e8 <opcode_0xEA()+0x24>)
    39d6:	8823      	ldrh	r3, [r4, #0]
    39d8:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    39dc:	4418      	add	r0, r3
} // 0xEA - NOP   
    39de:	b280      	uxth	r0, r0
    39e0:	bd10      	pop	{r4, pc}
    39e2:	bf00      	nop
    39e4:	20018888 	.word	0x20018888
    39e8:	20017418 	.word	0x20017418

000039ec <opcode_0x08()>:
} // 0x98 - TYA - Transfer Y to Accumulator

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    39ec:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    39ee:	4d0d      	ldr	r5, [pc, #52]	; (3a24 <opcode_0x08()+0x38>)
    39f0:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    39f2:	4c0d      	ldr	r4, [pc, #52]	; (3a28 <opcode_0x08()+0x3c>)
    39f4:	8828      	ldrh	r0, [r5, #0]
    39f6:	3001      	adds	r0, #1
    39f8:	b280      	uxth	r0, r0
    39fa:	f7fe fe6b 	bl	26d4 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    39fe:	4b0b      	ldr	r3, [pc, #44]	; (3a2c <opcode_0x08()+0x40>)
    3a00:	7820      	ldrb	r0, [r4, #0]
    3a02:	7819      	ldrb	r1, [r3, #0]
    3a04:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3a08:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    3a0c:	f7ff f81e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    3a10:	4907      	ldr	r1, [pc, #28]	; (3a30 <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    3a12:	7823      	ldrb	r3, [r4, #0]
    3a14:	882a      	ldrh	r2, [r5, #0]
    3a16:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    3a1a:	3b01      	subs	r3, #1
    3a1c:	4410      	add	r0, r2
    3a1e:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    3a20:	b280      	uxth	r0, r0
    3a22:	bd38      	pop	{r3, r4, r5, pc}
    3a24:	20018888 	.word	0x20018888
    3a28:	20004991 	.word	0x20004991
    3a2c:	20004990 	.word	0x20004990
    3a30:	20015418 	.word	0x20015418

00003a34 <opcode_0x48()>:
uint16_t opcode_0x48() {
    3a34:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3a36:	4d0c      	ldr	r5, [pc, #48]	; (3a68 <opcode_0x48()+0x34>)
    3a38:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3a3a:	4c0c      	ldr	r4, [pc, #48]	; (3a6c <opcode_0x48()+0x38>)
    3a3c:	8828      	ldrh	r0, [r5, #0]
    3a3e:	3001      	adds	r0, #1
    3a40:	b280      	uxth	r0, r0
    3a42:	f7fe fe47 	bl	26d4 <read_byte(unsigned short, bool)>
    3a46:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    3a48:	4b09      	ldr	r3, [pc, #36]	; (3a70 <opcode_0x48()+0x3c>)
    3a4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3a4e:	7819      	ldrb	r1, [r3, #0]
    3a50:	f7fe fffc 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    3a54:	4907      	ldr	r1, [pc, #28]	; (3a74 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    3a56:	7823      	ldrb	r3, [r4, #0]
    3a58:	882a      	ldrh	r2, [r5, #0]
    3a5a:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    3a5e:	3b01      	subs	r3, #1
    3a60:	4410      	add	r0, r2
    3a62:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    3a64:	b280      	uxth	r0, r0
    3a66:	bd38      	pop	{r3, r4, r5, pc}
    3a68:	20018888 	.word	0x20018888
    3a6c:	20004991 	.word	0x20004991
    3a70:	2001889f 	.word	0x2001889f
    3a74:	20015418 	.word	0x20015418

00003a78 <opcode_0x28()>:
uint16_t opcode_0x28() {
    3a78:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3a7a:	4d11      	ldr	r5, [pc, #68]	; (3ac0 <opcode_0x28()+0x48>)
    3a7c:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3a7e:	4c11      	ldr	r4, [pc, #68]	; (3ac4 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    3a80:	8828      	ldrh	r0, [r5, #0]
    3a82:	3001      	adds	r0, #1
    3a84:	b280      	uxth	r0, r0
    3a86:	f7fe fe25 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3a8a:	7820      	ldrb	r0, [r4, #0]
    3a8c:	2100      	movs	r1, #0
    3a8e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3a92:	f7fe fe1f 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3a96:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3a98:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3a9a:	3301      	adds	r3, #1
    3a9c:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3a9e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3aa2:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3aa4:	f7fe fe16 	bl	26d4 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    3aa8:	4b07      	ldr	r3, [pc, #28]	; (3ac8 <opcode_0x28()+0x50>)
    3aaa:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    3aac:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3ab0:	4906      	ldr	r1, [pc, #24]	; (3acc <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    3ab2:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    3ab6:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    3ab8:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    3aba:	b280      	uxth	r0, r0
    3abc:	bd38      	pop	{r3, r4, r5, pc}
    3abe:	bf00      	nop
    3ac0:	20018888 	.word	0x20018888
    3ac4:	20004991 	.word	0x20004991
    3ac8:	20015418 	.word	0x20015418
    3acc:	20004990 	.word	0x20004990

00003ad0 <opcode_0x68()>:
uint16_t opcode_0x68() {
    3ad0:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3ad2:	4d11      	ldr	r5, [pc, #68]	; (3b18 <opcode_0x68()+0x48>)
    3ad4:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3ad6:	4c11      	ldr	r4, [pc, #68]	; (3b1c <opcode_0x68()+0x4c>)
    read_byte(register_pc+1, false);
    3ad8:	8828      	ldrh	r0, [r5, #0]
    3ada:	3001      	adds	r0, #1
    3adc:	b280      	uxth	r0, r0
    3ade:	f7fe fdf9 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3ae2:	7820      	ldrb	r0, [r4, #0]
    3ae4:	2100      	movs	r1, #0
    3ae6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3aea:	f7fe fdf3 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3aee:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3af0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3af2:	3301      	adds	r3, #1
    3af4:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3af6:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3afa:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3afc:	f7fe fdea 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = pop();
    3b00:	4b07      	ldr	r3, [pc, #28]	; (3b20 <opcode_0x68()+0x50>)
    3b02:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b04:	f7ff f8aa 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    3b08:	4a06      	ldr	r2, [pc, #24]	; (3b24 <opcode_0x68()+0x54>)
    3b0a:	882b      	ldrh	r3, [r5, #0]
    3b0c:	f892 0551 	ldrb.w	r0, [r2, #1361]	; 0x551
    3b10:	4418      	add	r0, r3
} // 0x68 - PLA - Pop Accumulator from Stack
    3b12:	b280      	uxth	r0, r0
    3b14:	bd38      	pop	{r3, r4, r5, pc}
    3b16:	bf00      	nop
    3b18:	20018888 	.word	0x20018888
    3b1c:	20004991 	.word	0x20004991
    3b20:	2001889f 	.word	0x2001889f
    3b24:	20016418 	.word	0x20016418

00003b28 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    3b28:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3b2a:	4c12      	ldr	r4, [pc, #72]	; (3b74 <opcode_0x24()+0x4c>)
    3b2c:	2100      	movs	r1, #0
    3b2e:	8820      	ldrh	r0, [r4, #0]
    3b30:	3001      	adds	r0, #1
    3b32:	b280      	uxth	r0, r0
    3b34:	f7fe fdce 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3b38:	4b0f      	ldr	r3, [pc, #60]	; (3b78 <opcode_0x24()+0x50>)
    3b3a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3b3c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3b3e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3b40:	f7fe fdc8 	bl	26d4 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3b44:	490d      	ldr	r1, [pc, #52]	; (3b7c <opcode_0x24()+0x54>)
    3b46:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3b4a:	780a      	ldrb	r2, [r1, #0]
    3b4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3b50:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    3b52:	4a0b      	ldr	r2, [pc, #44]	; (3b80 <opcode_0x24()+0x58>)
    3b54:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3b56:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    3b58:	480a      	ldr	r0, [pc, #40]	; (3b84 <opcode_0x24()+0x5c>)
    3b5a:	8822      	ldrh	r2, [r4, #0]
    3b5c:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3b60:	bf0c      	ite	eq
    3b62:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3b66:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    3b6a:	4410      	add	r0, r2
    3b6c:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    3b6e:	b280      	uxth	r0, r0
    3b70:	bd10      	pop	{r4, pc}
    3b72:	bf00      	nop
    3b74:	20018888 	.word	0x20018888
    3b78:	20018886 	.word	0x20018886
    3b7c:	20004990 	.word	0x20004990
    3b80:	2001889f 	.word	0x2001889f
    3b84:	20015418 	.word	0x20015418

00003b88 <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    3b88:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    3b8a:	f7ff f8db 	bl	2d44 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3b8e:	490d      	ldr	r1, [pc, #52]	; (3bc4 <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    3b90:	4b0d      	ldr	r3, [pc, #52]	; (3bc8 <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3b92:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    3b94:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3b98:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3b9c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ba0:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    3ba4:	4809      	ldr	r0, [pc, #36]	; (3bcc <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3ba6:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    3baa:	4a09      	ldr	r2, [pc, #36]	; (3bd0 <opcode_0x2C()+0x48>)
    3bac:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3bb0:	bf0c      	ite	eq
    3bb2:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3bb6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    3bba:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    3bbc:	8813      	ldrh	r3, [r2, #0]
    3bbe:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    3bc0:	b280      	uxth	r0, r0
    3bc2:	bd08      	pop	{r3, pc}
    3bc4:	20004990 	.word	0x20004990
    3bc8:	2001889f 	.word	0x2001889f
    3bcc:	20015418 	.word	0x20015418
    3bd0:	20018888 	.word	0x20018888

00003bd4 <Calculate_CMP(unsigned char)>:
void Calculate_CMP(uint8_t local_data) {
    int16_t temp = 0;

    Begin_Fetch_Next_Opcode();

    temp = register_a - local_data;
    3bd4:	4b0e      	ldr	r3, [pc, #56]	; (3c10 <Calculate_CMP(unsigned char)+0x3c>)

    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3bd6:	490f      	ldr	r1, [pc, #60]	; (3c14 <Calculate_CMP(unsigned char)+0x40>)
    temp = register_a - local_data;
    3bd8:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3bda:	780b      	ldrb	r3, [r1, #0]
    3bdc:	4282      	cmp	r2, r0
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    3bde:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3be2:	bf2c      	ite	cs
    3be4:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3be8:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3bec:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3bee:	0600      	lsls	r0, r0, #24
    3bf0:	d407      	bmi.n	3c02 <Calculate_CMP(unsigned char)+0x2e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3bf6:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3bf8:	b92a      	cbnz	r2, 3c06 <Calculate_CMP(unsigned char)+0x32>
    3bfa:	f043 0302 	orr.w	r3, r3, #2
    return;
    3bfe:	700b      	strb	r3, [r1, #0]
    return;
}
    3c00:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3c06:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3c0a:	700b      	strb	r3, [r1, #0]
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop
    3c10:	2001889f 	.word	0x2001889f
    3c14:	20004990 	.word	0x20004990

00003c18 <opcode_0xC9()>:
uint16_t opcode_0xC9() {
    3c18:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3c1a:	4c0f      	ldr	r4, [pc, #60]	; (3c58 <opcode_0xC9()+0x40>)
    3c1c:	2100      	movs	r1, #0
    3c1e:	8820      	ldrh	r0, [r4, #0]
    3c20:	3001      	adds	r0, #1
    3c22:	b280      	uxth	r0, r0
    3c24:	f7fe fd56 	bl	26d4 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    3c28:	4b0c      	ldr	r3, [pc, #48]	; (3c5c <opcode_0xC9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c2a:	490d      	ldr	r1, [pc, #52]	; (3c60 <opcode_0xC9()+0x48>)
    temp = register_a - local_data;
    3c2c:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c2e:	780a      	ldrb	r2, [r1, #0]
    3c30:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c32:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c36:	bf94      	ite	ls
    3c38:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c3c:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c40:	b2c0      	uxtb	r0, r0
    3c42:	700a      	strb	r2, [r1, #0]
    3c44:	f7ff f80a 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    3c48:	4a06      	ldr	r2, [pc, #24]	; (3c64 <opcode_0xC9()+0x4c>)
    3c4a:	8823      	ldrh	r3, [r4, #0]
    3c4c:	f892 0905 	ldrb.w	r0, [r2, #2309]	; 0x905
    3c50:	4418      	add	r0, r3
} // 0xC9 - CMP - Immediate
    3c52:	b280      	uxth	r0, r0
    3c54:	bd10      	pop	{r4, pc}
    3c56:	bf00      	nop
    3c58:	20018888 	.word	0x20018888
    3c5c:	2001889f 	.word	0x2001889f
    3c60:	20004990 	.word	0x20004990
    3c64:	20017418 	.word	0x20017418

00003c68 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    3c68:	b510      	push	{r4, lr}
    3c6a:	4c0f      	ldr	r4, [pc, #60]	; (3ca8 <opcode_0xE0()+0x40>)
    3c6c:	2100      	movs	r1, #0
    3c6e:	8820      	ldrh	r0, [r4, #0]
    3c70:	3001      	adds	r0, #1
    3c72:	b280      	uxth	r0, r0
    3c74:	f7fe fd2e 	bl	26d4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3c78:	4b0c      	ldr	r3, [pc, #48]	; (3cac <opcode_0xE0()+0x44>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c7a:	490d      	ldr	r1, [pc, #52]	; (3cb0 <opcode_0xE0()+0x48>)
    temp = register_x - local_data;
    3c7c:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c7e:	780a      	ldrb	r2, [r1, #0]
    3c80:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c82:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3c86:	bf94      	ite	ls
    3c88:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c8c:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3c90:	b2c0      	uxtb	r0, r0
    3c92:	700a      	strb	r2, [r1, #0]
    3c94:	f7fe ffe2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    3c98:	4a06      	ldr	r2, [pc, #24]	; (3cb4 <opcode_0xE0()+0x4c>)
    3c9a:	8823      	ldrh	r3, [r4, #0]
    3c9c:	f892 0db1 	ldrb.w	r0, [r2, #3505]	; 0xdb1
    3ca0:	4418      	add	r0, r3
} // 0xE0 - CPX - Immediate
    3ca2:	b280      	uxth	r0, r0
    3ca4:	bd10      	pop	{r4, pc}
    3ca6:	bf00      	nop
    3ca8:	20018888 	.word	0x20018888
    3cac:	200188a0 	.word	0x200188a0
    3cb0:	20004990 	.word	0x20004990
    3cb4:	20017418 	.word	0x20017418

00003cb8 <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    3cb8:	b510      	push	{r4, lr}
    3cba:	4c12      	ldr	r4, [pc, #72]	; (3d04 <opcode_0xE4()+0x4c>)
    3cbc:	2100      	movs	r1, #0
    3cbe:	8820      	ldrh	r0, [r4, #0]
    3cc0:	3001      	adds	r0, #1
    3cc2:	b280      	uxth	r0, r0
    3cc4:	f7fe fd06 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3cc8:	4b0f      	ldr	r3, [pc, #60]	; (3d08 <opcode_0xE4()+0x50>)
    3cca:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3ccc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3cce:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3cd0:	f7fe fd00 	bl	26d4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3cd4:	4b0d      	ldr	r3, [pc, #52]	; (3d0c <opcode_0xE4()+0x54>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3cd6:	490e      	ldr	r1, [pc, #56]	; (3d10 <opcode_0xE4()+0x58>)
    temp = register_x - local_data;
    3cd8:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3cda:	780a      	ldrb	r2, [r1, #0]
    3cdc:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    3cde:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ce2:	bf2c      	ite	cs
    3ce4:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3ce8:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3cec:	b2c0      	uxtb	r0, r0
    3cee:	700a      	strb	r2, [r1, #0]
    3cf0:	f7fe ffb4 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    3cf4:	4a07      	ldr	r2, [pc, #28]	; (3d14 <opcode_0xE4()+0x5c>)
    3cf6:	8823      	ldrh	r3, [r4, #0]
    3cf8:	f892 0e81 	ldrb.w	r0, [r2, #3713]	; 0xe81
    3cfc:	4418      	add	r0, r3
} // 0xE4 - CPX - ZeroPage
    3cfe:	b280      	uxth	r0, r0
    3d00:	bd10      	pop	{r4, pc}
    3d02:	bf00      	nop
    3d04:	20018888 	.word	0x20018888
    3d08:	20018886 	.word	0x20018886
    3d0c:	200188a0 	.word	0x200188a0
    3d10:	20004990 	.word	0x20004990
    3d14:	20017418 	.word	0x20017418

00003d18 <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    3d18:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    3d1a:	f7ff f813 	bl	2d44 <Fetch_Absolute()>
    temp = register_x - local_data;
    3d1e:	4b0c      	ldr	r3, [pc, #48]	; (3d50 <opcode_0xEC()+0x38>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d20:	490c      	ldr	r1, [pc, #48]	; (3d54 <opcode_0xEC()+0x3c>)
    temp = register_x - local_data;
    3d22:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d24:	780a      	ldrb	r2, [r1, #0]
    3d26:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3d28:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d2c:	bf94      	ite	ls
    3d2e:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3d32:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3d36:	b2c0      	uxtb	r0, r0
    3d38:	700a      	strb	r2, [r1, #0]
    3d3a:	f7fe ff8f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xEC].length);
    3d3e:	4a06      	ldr	r2, [pc, #24]	; (3d58 <opcode_0xEC()+0x40>)
    3d40:	4b06      	ldr	r3, [pc, #24]	; (3d5c <opcode_0xEC()+0x44>)
    3d42:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
    3d46:	881b      	ldrh	r3, [r3, #0]
    3d48:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    3d4a:	b280      	uxth	r0, r0
    3d4c:	bd08      	pop	{r3, pc}
    3d4e:	bf00      	nop
    3d50:	200188a0 	.word	0x200188a0
    3d54:	20004990 	.word	0x20004990
    3d58:	20018418 	.word	0x20018418
    3d5c:	20018888 	.word	0x20018888

00003d60 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    3d60:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3d62:	4c0f      	ldr	r4, [pc, #60]	; (3da0 <opcode_0xC0()+0x40>)
    3d64:	2100      	movs	r1, #0
    3d66:	8820      	ldrh	r0, [r4, #0]
    3d68:	3001      	adds	r0, #1
    3d6a:	b280      	uxth	r0, r0
    3d6c:	f7fe fcb2 	bl	26d4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    3d70:	4b0c      	ldr	r3, [pc, #48]	; (3da4 <opcode_0xC0()+0x44>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d72:	490d      	ldr	r1, [pc, #52]	; (3da8 <opcode_0xC0()+0x48>)
    temp = register_y - local_data;
    3d74:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d76:	780a      	ldrb	r2, [r1, #0]
    3d78:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3d7a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3d7e:	bf94      	ite	ls
    3d80:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3d84:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3d88:	b2c0      	uxtb	r0, r0
    3d8a:	700a      	strb	r2, [r1, #0]
    3d8c:	f7fe ff66 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    3d90:	4a06      	ldr	r2, [pc, #24]	; (3dac <opcode_0xC0()+0x4c>)
    3d92:	8823      	ldrh	r3, [r4, #0]
    3d94:	f892 0731 	ldrb.w	r0, [r2, #1841]	; 0x731
    3d98:	4418      	add	r0, r3
} // 0xC0 - CPY - Immediate
    3d9a:	b280      	uxth	r0, r0
    3d9c:	bd10      	pop	{r4, pc}
    3d9e:	bf00      	nop
    3da0:	20018888 	.word	0x20018888
    3da4:	200188a1 	.word	0x200188a1
    3da8:	20004990 	.word	0x20004990
    3dac:	20017418 	.word	0x20017418

00003db0 <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    3db0:	b510      	push	{r4, lr}
    3db2:	4c12      	ldr	r4, [pc, #72]	; (3dfc <opcode_0xC4()+0x4c>)
    3db4:	2100      	movs	r1, #0
    3db6:	8820      	ldrh	r0, [r4, #0]
    3db8:	3001      	adds	r0, #1
    3dba:	b280      	uxth	r0, r0
    3dbc:	f7fe fc8a 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3dc0:	4b0f      	ldr	r3, [pc, #60]	; (3e00 <opcode_0xC4()+0x50>)
    3dc2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3dc4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3dc6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3dc8:	f7fe fc84 	bl	26d4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    3dcc:	4b0d      	ldr	r3, [pc, #52]	; (3e04 <opcode_0xC4()+0x54>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3dce:	490e      	ldr	r1, [pc, #56]	; (3e08 <opcode_0xC4()+0x58>)
    temp = register_y - local_data;
    3dd0:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3dd2:	780a      	ldrb	r2, [r1, #0]
    3dd4:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    3dd6:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3dda:	bf2c      	ite	cs
    3ddc:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3de0:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3de4:	b2c0      	uxtb	r0, r0
    3de6:	700a      	strb	r2, [r1, #0]
    3de8:	f7fe ff38 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    3dec:	4a07      	ldr	r2, [pc, #28]	; (3e0c <opcode_0xC4()+0x5c>)
    3dee:	8823      	ldrh	r3, [r4, #0]
    3df0:	f892 0801 	ldrb.w	r0, [r2, #2049]	; 0x801
    3df4:	4418      	add	r0, r3
} // 0xC4 - CPY - ZeroPage
    3df6:	b280      	uxth	r0, r0
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	bf00      	nop
    3dfc:	20018888 	.word	0x20018888
    3e00:	20018886 	.word	0x20018886
    3e04:	200188a1 	.word	0x200188a1
    3e08:	20004990 	.word	0x20004990
    3e0c:	20017418 	.word	0x20017418

00003e10 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    3e10:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    3e12:	f7fe ff97 	bl	2d44 <Fetch_Absolute()>
    temp = register_y - local_data;
    3e16:	4b0c      	ldr	r3, [pc, #48]	; (3e48 <opcode_0xCC()+0x38>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3e18:	490c      	ldr	r1, [pc, #48]	; (3e4c <opcode_0xCC()+0x3c>)
    temp = register_y - local_data;
    3e1a:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3e1c:	780a      	ldrb	r2, [r1, #0]
    3e1e:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3e20:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3e24:	bf94      	ite	ls
    3e26:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3e2a:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3e2e:	b2c0      	uxtb	r0, r0
    3e30:	700a      	strb	r2, [r1, #0]
    3e32:	f7fe ff13 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCC].length);
    3e36:	4a06      	ldr	r2, [pc, #24]	; (3e50 <opcode_0xCC()+0x40>)
    3e38:	4b06      	ldr	r3, [pc, #24]	; (3e54 <opcode_0xCC()+0x44>)
    3e3a:	f892 09a1 	ldrb.w	r0, [r2, #2465]	; 0x9a1
    3e3e:	881b      	ldrh	r3, [r3, #0]
    3e40:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    3e42:	b280      	uxth	r0, r0
    3e44:	bd08      	pop	{r3, pc}
    3e46:	bf00      	nop
    3e48:	200188a1 	.word	0x200188a1
    3e4c:	20004990 	.word	0x20004990
    3e50:	20017418 	.word	0x20017418
    3e54:	20018888 	.word	0x20018888

00003e58 <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    3e58:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    3e5a:	4d17      	ldr	r5, [pc, #92]	; (3eb8 <opcode_0x06()+0x60>)
    3e5c:	b083      	sub	sp, #12
    3e5e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3e60:	4c16      	ldr	r4, [pc, #88]	; (3ebc <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    3e62:	8828      	ldrh	r0, [r5, #0]
    3e64:	3001      	adds	r0, #1
    3e66:	b280      	uxth	r0, r0
    3e68:	f7fe fc34 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    3e6c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3e6e:	b280      	uxth	r0, r0
    3e70:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    3e72:	f7fe fc2f 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e76:	4a12      	ldr	r2, [pc, #72]	; (3ec0 <opcode_0x06()+0x68>)
    3e78:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3e7a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e7e:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3e80:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3e82:	bf4c      	ite	mi
    3e84:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3e88:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3e8c:	4608      	mov	r0, r1
    3e8e:	9101      	str	r1, [sp, #4]
    3e90:	7013      	strb	r3, [r2, #0]
    3e92:	f7fe fee3 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    3e96:	9901      	ldr	r1, [sp, #4]
    3e98:	8820      	ldrh	r0, [r4, #0]
    3e9a:	f7fe fdd7 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3e9e:	8820      	ldrh	r0, [r4, #0]
    3ea0:	9901      	ldr	r1, [sp, #4]
    3ea2:	f7fe fdd3 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    3ea6:	4a07      	ldr	r2, [pc, #28]	; (3ec4 <opcode_0x06()+0x6c>)
    3ea8:	882b      	ldrh	r3, [r5, #0]
    3eaa:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    3eae:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    3eb0:	b280      	uxth	r0, r0
    3eb2:	b003      	add	sp, #12
    3eb4:	bd30      	pop	{r4, r5, pc}
    3eb6:	bf00      	nop
    3eb8:	20018888 	.word	0x20018888
    3ebc:	20018886 	.word	0x20018886
    3ec0:	20004990 	.word	0x20004990
    3ec4:	20015418 	.word	0x20015418

00003ec8 <opcode_0x16()>:
uint16_t opcode_0x16() {
    3ec8:	b510      	push	{r4, lr}
    3eca:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    3ecc:	4c11      	ldr	r4, [pc, #68]	; (3f14 <opcode_0x16()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    3ece:	f7fe fef9 	bl	2cc4 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3ed2:	4a11      	ldr	r2, [pc, #68]	; (3f18 <opcode_0x16()+0x50>)
    3ed4:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3ed6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3eda:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3edc:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3ede:	bf4c      	ite	mi
    3ee0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3ee4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3ee8:	4608      	mov	r0, r1
    3eea:	9101      	str	r1, [sp, #4]
    3eec:	7013      	strb	r3, [r2, #0]
    3eee:	f7fe feb5 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3ef2:	8820      	ldrh	r0, [r4, #0]
    3ef4:	9901      	ldr	r1, [sp, #4]
    3ef6:	f7fe fda9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3efa:	8820      	ldrh	r0, [r4, #0]
    3efc:	9901      	ldr	r1, [sp, #4]
    3efe:	f7fe fda5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    3f02:	4a06      	ldr	r2, [pc, #24]	; (3f1c <opcode_0x16()+0x54>)
    3f04:	4b06      	ldr	r3, [pc, #24]	; (3f20 <opcode_0x16()+0x58>)
    3f06:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    3f0a:	881b      	ldrh	r3, [r3, #0]
    3f0c:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    3f0e:	b280      	uxth	r0, r0
    3f10:	b002      	add	sp, #8
    3f12:	bd10      	pop	{r4, pc}
    3f14:	20018886 	.word	0x20018886
    3f18:	20004990 	.word	0x20004990
    3f1c:	20015418 	.word	0x20015418
    3f20:	20018888 	.word	0x20018888

00003f24 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    3f24:	b510      	push	{r4, lr}
    3f26:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    3f28:	4c11      	ldr	r4, [pc, #68]	; (3f70 <opcode_0x0E()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    3f2a:	f7fe ff0b 	bl	2d44 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f2e:	4a11      	ldr	r2, [pc, #68]	; (3f74 <opcode_0x0E()+0x50>)
    3f30:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3f32:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f36:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3f38:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f3a:	bf4c      	ite	mi
    3f3c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3f40:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3f44:	4608      	mov	r0, r1
    3f46:	9101      	str	r1, [sp, #4]
    3f48:	7013      	strb	r3, [r2, #0]
    3f4a:	f7fe fe87 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3f4e:	8820      	ldrh	r0, [r4, #0]
    3f50:	9901      	ldr	r1, [sp, #4]
    3f52:	f7fe fd7b 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3f56:	8820      	ldrh	r0, [r4, #0]
    3f58:	9901      	ldr	r1, [sp, #4]
    3f5a:	f7fe fd77 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    3f5e:	4a06      	ldr	r2, [pc, #24]	; (3f78 <opcode_0x0E()+0x54>)
    3f60:	4b06      	ldr	r3, [pc, #24]	; (3f7c <opcode_0x0E()+0x58>)
    3f62:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    3f66:	881b      	ldrh	r3, [r3, #0]
    3f68:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    3f6a:	b280      	uxth	r0, r0
    3f6c:	b002      	add	sp, #8
    3f6e:	bd10      	pop	{r4, pc}
    3f70:	20018886 	.word	0x20018886
    3f74:	20004990 	.word	0x20004990
    3f78:	20015418 	.word	0x20015418
    3f7c:	20018888 	.word	0x20018888

00003f80 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    3f80:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    3f82:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    3f84:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    3f86:	f7fe fef9 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f8a:	4a11      	ldr	r2, [pc, #68]	; (3fd0 <opcode_0x1E()+0x50>)
    3f8c:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3f8e:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f92:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3f94:	b2c9      	uxtb	r1, r1
    write_byte(effective_address, local_data);
    3f96:	4c0f      	ldr	r4, [pc, #60]	; (3fd4 <opcode_0x1E()+0x54>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3f98:	bf4c      	ite	mi
    3f9a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3f9e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    3fa2:	4608      	mov	r0, r1
    3fa4:	9101      	str	r1, [sp, #4]
    3fa6:	7013      	strb	r3, [r2, #0]
    3fa8:	f7fe fe58 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3fac:	8820      	ldrh	r0, [r4, #0]
    3fae:	9901      	ldr	r1, [sp, #4]
    3fb0:	f7fe fd4c 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3fb4:	8820      	ldrh	r0, [r4, #0]
    3fb6:	9901      	ldr	r1, [sp, #4]
    3fb8:	f7fe fd48 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    3fbc:	4a06      	ldr	r2, [pc, #24]	; (3fd8 <opcode_0x1E()+0x58>)
    3fbe:	4b07      	ldr	r3, [pc, #28]	; (3fdc <opcode_0x1E()+0x5c>)
    3fc0:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    3fc4:	881b      	ldrh	r3, [r3, #0]
    3fc6:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    3fc8:	b280      	uxth	r0, r0
    3fca:	b002      	add	sp, #8
    3fcc:	bd10      	pop	{r4, pc}
    3fce:	bf00      	nop
    3fd0:	20004990 	.word	0x20004990
    3fd4:	20018886 	.word	0x20018886
    3fd8:	20015418 	.word	0x20015418
    3fdc:	20018888 	.word	0x20018888

00003fe0 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    3fe0:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    3fe2:	4e11      	ldr	r6, [pc, #68]	; (4028 <opcode_0xE6()+0x48>)
    3fe4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3fe6:	4d11      	ldr	r5, [pc, #68]	; (402c <opcode_0xE6()+0x4c>)
    return read_byte(register_pc+offset, false);
    3fe8:	8830      	ldrh	r0, [r6, #0]
    3fea:	3001      	adds	r0, #1
    3fec:	b280      	uxth	r0, r0
    3fee:	f7fe fb71 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    3ff2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3ff4:	b280      	uxth	r0, r0
    3ff6:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    3ff8:	f7fe fb6c 	bl	26d4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    3ffc:	3001      	adds	r0, #1
    global_temp = local_data;
    3ffe:	4b0c      	ldr	r3, [pc, #48]	; (4030 <opcode_0xE6()+0x50>)
    local_data = local_data + 1;
    4000:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4002:	4620      	mov	r0, r4
    global_temp = local_data;
    4004:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4006:	f7fe fe29 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    400a:	4621      	mov	r1, r4
    400c:	8828      	ldrh	r0, [r5, #0]
    400e:	f7fe fd1d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4012:	8828      	ldrh	r0, [r5, #0]
    4014:	4621      	mov	r1, r4
    4016:	f7fe fd19 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    401a:	4a06      	ldr	r2, [pc, #24]	; (4034 <opcode_0xE6()+0x54>)
    401c:	8833      	ldrh	r3, [r6, #0]
    401e:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    4022:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    4024:	b280      	uxth	r0, r0
    4026:	bd70      	pop	{r4, r5, r6, pc}
    4028:	20018888 	.word	0x20018888
    402c:	20018886 	.word	0x20018886
    4030:	2001889c 	.word	0x2001889c
    4034:	20017418 	.word	0x20017418

00004038 <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    4038:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    403a:	f7fe fe43 	bl	2cc4 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    403e:	3001      	adds	r0, #1
    global_temp = local_data;
    4040:	4b11      	ldr	r3, [pc, #68]	; (4088 <opcode_0xF6()+0x50>)
    local_data = local_data + 1;
    4042:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4044:	4a11      	ldr	r2, [pc, #68]	; (408c <opcode_0xF6()+0x54>)
    4046:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    4048:	701c      	strb	r4, [r3, #0]
    404a:	7813      	ldrb	r3, [r2, #0]
    404c:	d417      	bmi.n	407e <opcode_0xF6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    404e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4052:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4054:	b9ac      	cbnz	r4, 4082 <opcode_0xF6()+0x4a>
    4056:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    405a:	4d0d      	ldr	r5, [pc, #52]	; (4090 <opcode_0xF6()+0x58>)
    405c:	4621      	mov	r1, r4
    405e:	7013      	strb	r3, [r2, #0]
    4060:	8828      	ldrh	r0, [r5, #0]
    4062:	f7fe fcf3 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4066:	8828      	ldrh	r0, [r5, #0]
    4068:	4621      	mov	r1, r4
    406a:	f7fe fcef 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    406e:	4a09      	ldr	r2, [pc, #36]	; (4094 <opcode_0xF6()+0x5c>)
    4070:	4b09      	ldr	r3, [pc, #36]	; (4098 <opcode_0xF6()+0x60>)
    4072:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    4076:	881b      	ldrh	r3, [r3, #0]
    4078:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    407a:	b280      	uxth	r0, r0
    407c:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4082:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4086:	e7e8      	b.n	405a <opcode_0xF6()+0x22>
    4088:	2001889c 	.word	0x2001889c
    408c:	20004990 	.word	0x20004990
    4090:	20018886 	.word	0x20018886
    4094:	20018418 	.word	0x20018418
    4098:	20018888 	.word	0x20018888

0000409c <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    409c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    409e:	f7fe fe51 	bl	2d44 <Fetch_Absolute()>
    local_data = local_data + 1;
    40a2:	3001      	adds	r0, #1
    global_temp = local_data;
    40a4:	4b0b      	ldr	r3, [pc, #44]	; (40d4 <opcode_0xEE()+0x38>)
    local_data = local_data + 1;
    40a6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    40a8:	4d0b      	ldr	r5, [pc, #44]	; (40d8 <opcode_0xEE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    40aa:	4620      	mov	r0, r4
    global_temp = local_data;
    40ac:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    40ae:	f7fe fdd5 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    40b2:	8828      	ldrh	r0, [r5, #0]
    40b4:	4621      	mov	r1, r4
    40b6:	f7fe fcc9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    40ba:	8828      	ldrh	r0, [r5, #0]
    40bc:	4621      	mov	r1, r4
    40be:	f7fe fcc5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    40c2:	4a06      	ldr	r2, [pc, #24]	; (40dc <opcode_0xEE()+0x40>)
    40c4:	4b06      	ldr	r3, [pc, #24]	; (40e0 <opcode_0xEE()+0x44>)
    40c6:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    40ca:	881b      	ldrh	r3, [r3, #0]
    40cc:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    40ce:	b280      	uxth	r0, r0
    40d0:	bd38      	pop	{r3, r4, r5, pc}
    40d2:	bf00      	nop
    40d4:	2001889c 	.word	0x2001889c
    40d8:	20018886 	.word	0x20018886
    40dc:	20018418 	.word	0x20018418
    40e0:	20018888 	.word	0x20018888

000040e4 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    40e4:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    40e6:	4e11      	ldr	r6, [pc, #68]	; (412c <opcode_0xC6()+0x48>)
    40e8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    40ea:	4d11      	ldr	r5, [pc, #68]	; (4130 <opcode_0xC6()+0x4c>)
    return read_byte(register_pc+offset, false);
    40ec:	8830      	ldrh	r0, [r6, #0]
    40ee:	3001      	adds	r0, #1
    40f0:	b280      	uxth	r0, r0
    40f2:	f7fe faef 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    40f6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    40f8:	b280      	uxth	r0, r0
    40fa:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    40fc:	f7fe faea 	bl	26d4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    4100:	3801      	subs	r0, #1
    global_temp = local_data;
    4102:	4b0c      	ldr	r3, [pc, #48]	; (4134 <opcode_0xC6()+0x50>)
    local_data = local_data - 1;
    4104:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4106:	4620      	mov	r0, r4
    global_temp = local_data;
    4108:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    410a:	f7fe fda7 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    410e:	4621      	mov	r1, r4
    4110:	8828      	ldrh	r0, [r5, #0]
    4112:	f7fe fc9b 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4116:	8828      	ldrh	r0, [r5, #0]
    4118:	4621      	mov	r1, r4
    411a:	f7fe fc97 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    411e:	4a06      	ldr	r2, [pc, #24]	; (4138 <opcode_0xC6()+0x54>)
    4120:	8833      	ldrh	r3, [r6, #0]
    4122:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    4126:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    4128:	b280      	uxth	r0, r0
    412a:	bd70      	pop	{r4, r5, r6, pc}
    412c:	20018888 	.word	0x20018888
    4130:	20018886 	.word	0x20018886
    4134:	2001889c 	.word	0x2001889c
    4138:	20017418 	.word	0x20017418

0000413c <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    413c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    413e:	f7fe fdc1 	bl	2cc4 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    4142:	3801      	subs	r0, #1
    global_temp = local_data;
    4144:	4b0b      	ldr	r3, [pc, #44]	; (4174 <opcode_0xD6()+0x38>)
    local_data = local_data - 1;
    4146:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    4148:	4d0b      	ldr	r5, [pc, #44]	; (4178 <opcode_0xD6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    414a:	4620      	mov	r0, r4
    global_temp = local_data;
    414c:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    414e:	f7fe fd85 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4152:	8828      	ldrh	r0, [r5, #0]
    4154:	4621      	mov	r1, r4
    4156:	f7fe fc79 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    415a:	8828      	ldrh	r0, [r5, #0]
    415c:	4621      	mov	r1, r4
    415e:	f7fe fc75 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    4162:	4a06      	ldr	r2, [pc, #24]	; (417c <opcode_0xD6()+0x40>)
    4164:	4b06      	ldr	r3, [pc, #24]	; (4180 <opcode_0xD6()+0x44>)
    4166:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    416a:	881b      	ldrh	r3, [r3, #0]
    416c:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    416e:	b280      	uxth	r0, r0
    4170:	bd38      	pop	{r3, r4, r5, pc}
    4172:	bf00      	nop
    4174:	2001889c 	.word	0x2001889c
    4178:	20018886 	.word	0x20018886
    417c:	20017418 	.word	0x20017418
    4180:	20018888 	.word	0x20018888

00004184 <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    4184:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    4186:	f7fe fddd 	bl	2d44 <Fetch_Absolute()>
    local_data = local_data - 1;
    418a:	3801      	subs	r0, #1
    global_temp = local_data;
    418c:	4b11      	ldr	r3, [pc, #68]	; (41d4 <opcode_0xCE()+0x50>)
    local_data = local_data - 1;
    418e:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4190:	4a11      	ldr	r2, [pc, #68]	; (41d8 <opcode_0xCE()+0x54>)
    4192:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    4194:	701c      	strb	r4, [r3, #0]
    4196:	7813      	ldrb	r3, [r2, #0]
    4198:	d417      	bmi.n	41ca <opcode_0xCE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    419a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    419e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    41a0:	b9ac      	cbnz	r4, 41ce <opcode_0xCE()+0x4a>
    41a2:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    41a6:	4d0d      	ldr	r5, [pc, #52]	; (41dc <opcode_0xCE()+0x58>)
    41a8:	4621      	mov	r1, r4
    41aa:	7013      	strb	r3, [r2, #0]
    41ac:	8828      	ldrh	r0, [r5, #0]
    41ae:	f7fe fc4d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    41b2:	8828      	ldrh	r0, [r5, #0]
    41b4:	4621      	mov	r1, r4
    41b6:	f7fe fc49 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    41ba:	4a09      	ldr	r2, [pc, #36]	; (41e0 <opcode_0xCE()+0x5c>)
    41bc:	4b09      	ldr	r3, [pc, #36]	; (41e4 <opcode_0xCE()+0x60>)
    41be:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    41c2:	881b      	ldrh	r3, [r3, #0]
    41c4:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    41c6:	b280      	uxth	r0, r0
    41c8:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    41ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    41ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    41d2:	e7e8      	b.n	41a6 <opcode_0xCE()+0x22>
    41d4:	2001889c 	.word	0x2001889c
    41d8:	20004990 	.word	0x20004990
    41dc:	20018886 	.word	0x20018886
    41e0:	20017418 	.word	0x20017418
    41e4:	20018888 	.word	0x20018888

000041e8 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    41e8:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    41ea:	2000      	movs	r0, #0
    write_byte(effective_address, local_data);
    41ec:	4d0c      	ldr	r5, [pc, #48]	; (4220 <opcode_0xDE()+0x38>)
    41ee:	f7fe fdc5 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    41f2:	3801      	subs	r0, #1
    global_temp = local_data;
    41f4:	4b0b      	ldr	r3, [pc, #44]	; (4224 <opcode_0xDE()+0x3c>)
    local_data = local_data - 1;
    41f6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    41f8:	4620      	mov	r0, r4
    global_temp = local_data;
    41fa:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    41fc:	f7fe fd2e 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4200:	8828      	ldrh	r0, [r5, #0]
    4202:	4621      	mov	r1, r4
    4204:	f7fe fc22 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4208:	8828      	ldrh	r0, [r5, #0]
    420a:	4621      	mov	r1, r4
    420c:	f7fe fc1e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    4210:	4a05      	ldr	r2, [pc, #20]	; (4228 <opcode_0xDE()+0x40>)
    4212:	4b06      	ldr	r3, [pc, #24]	; (422c <opcode_0xDE()+0x44>)
    4214:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    4218:	881b      	ldrh	r3, [r3, #0]
    421a:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    421c:	b280      	uxth	r0, r0
    421e:	bd38      	pop	{r3, r4, r5, pc}
    4220:	20018886 	.word	0x20018886
    4224:	2001889c 	.word	0x2001889c
    4228:	20017418 	.word	0x20017418
    422c:	20018888 	.word	0x20018888

00004230 <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    4230:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4232:	4d16      	ldr	r5, [pc, #88]	; (428c <opcode_0x46()+0x5c>)
    4234:	b083      	sub	sp, #12
    4236:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4238:	4c15      	ldr	r4, [pc, #84]	; (4290 <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    423a:	8828      	ldrh	r0, [r5, #0]
    423c:	3001      	adds	r0, #1
    423e:	b280      	uxth	r0, r0
    4240:	f7fe fa48 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4244:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4246:	b280      	uxth	r0, r0
    4248:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    424a:	f7fe fa43 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    424e:	4a11      	ldr	r2, [pc, #68]	; (4294 <opcode_0x46()+0x64>)
    4250:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4252:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4256:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4258:	4608      	mov	r0, r1
    425a:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    425c:	bf4c      	ite	mi
    425e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4262:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4266:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4268:	f7fe fcf8 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    426c:	9901      	ldr	r1, [sp, #4]
    426e:	8820      	ldrh	r0, [r4, #0]
    4270:	f7fe fbec 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4274:	8820      	ldrh	r0, [r4, #0]
    4276:	9901      	ldr	r1, [sp, #4]
    4278:	f7fe fbe8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    427c:	4a06      	ldr	r2, [pc, #24]	; (4298 <opcode_0x46()+0x68>)
    427e:	882b      	ldrh	r3, [r5, #0]
    4280:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    4284:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    4286:	b280      	uxth	r0, r0
    4288:	b003      	add	sp, #12
    428a:	bd30      	pop	{r4, r5, pc}
    428c:	20018888 	.word	0x20018888
    4290:	20018886 	.word	0x20018886
    4294:	20004990 	.word	0x20004990
    4298:	20015418 	.word	0x20015418

0000429c <opcode_0x56()>:
uint16_t opcode_0x56() {
    429c:	b510      	push	{r4, lr}
    429e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    42a0:	4c11      	ldr	r4, [pc, #68]	; (42e8 <opcode_0x56()+0x4c>)
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    42a2:	f7fe fd0f 	bl	2cc4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    42a6:	4a11      	ldr	r2, [pc, #68]	; (42ec <opcode_0x56()+0x50>)
    42a8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    42aa:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    42ae:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    42b0:	4608      	mov	r0, r1
    42b2:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    42b4:	bf4c      	ite	mi
    42b6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42ba:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    42be:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    42c0:	f7fe fccc 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    42c4:	8820      	ldrh	r0, [r4, #0]
    42c6:	9901      	ldr	r1, [sp, #4]
    42c8:	f7fe fbc0 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    42cc:	8820      	ldrh	r0, [r4, #0]
    42ce:	9901      	ldr	r1, [sp, #4]
    42d0:	f7fe fbbc 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    42d4:	4a06      	ldr	r2, [pc, #24]	; (42f0 <opcode_0x56()+0x54>)
    42d6:	4b07      	ldr	r3, [pc, #28]	; (42f4 <opcode_0x56()+0x58>)
    42d8:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    42dc:	881b      	ldrh	r3, [r3, #0]
    42de:	4418      	add	r0, r3
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    42e0:	b280      	uxth	r0, r0
    42e2:	b002      	add	sp, #8
    42e4:	bd10      	pop	{r4, pc}
    42e6:	bf00      	nop
    42e8:	20018886 	.word	0x20018886
    42ec:	20004990 	.word	0x20004990
    42f0:	20016418 	.word	0x20016418
    42f4:	20018888 	.word	0x20018888

000042f8 <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    42f8:	b510      	push	{r4, lr}
    42fa:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    42fc:	4c10      	ldr	r4, [pc, #64]	; (4340 <opcode_0x4E()+0x48>)
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    42fe:	f7fe fd21 	bl	2d44 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4302:	4a10      	ldr	r2, [pc, #64]	; (4344 <opcode_0x4E()+0x4c>)
    4304:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4306:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    430a:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    430c:	4608      	mov	r0, r1
    430e:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4310:	bf4c      	ite	mi
    4312:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4316:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    431a:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    431c:	f7fe fc9e 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4320:	8820      	ldrh	r0, [r4, #0]
    4322:	9901      	ldr	r1, [sp, #4]
    4324:	f7fe fb92 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4328:	8820      	ldrh	r0, [r4, #0]
    432a:	9901      	ldr	r1, [sp, #4]
    432c:	f7fe fb8e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    4330:	4a05      	ldr	r2, [pc, #20]	; (4348 <opcode_0x4E()+0x50>)
    4332:	4b06      	ldr	r3, [pc, #24]	; (434c <opcode_0x4E()+0x54>)
    4334:	7a50      	ldrb	r0, [r2, #9]
    4336:	881b      	ldrh	r3, [r3, #0]
    4338:	4418      	add	r0, r3
} // 0x4E - LSR - Logical Shift Right - Absolute
    433a:	b280      	uxth	r0, r0
    433c:	b002      	add	sp, #8
    433e:	bd10      	pop	{r4, pc}
    4340:	20018886 	.word	0x20018886
    4344:	20004990 	.word	0x20004990
    4348:	20016418 	.word	0x20016418
    434c:	20018888 	.word	0x20018888

00004350 <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    4350:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4352:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    4354:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4356:	f7fe fd11 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    435a:	4a10      	ldr	r2, [pc, #64]	; (439c <opcode_0x5E()+0x4c>)
    435c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    435e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4362:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4364:	4c0e      	ldr	r4, [pc, #56]	; (43a0 <opcode_0x5E()+0x50>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4366:	4608      	mov	r0, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4368:	bf4c      	ite	mi
    436a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    436e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4372:	9101      	str	r1, [sp, #4]
    4374:	7013      	strb	r3, [r2, #0]
    4376:	f7fe fc71 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    437a:	8820      	ldrh	r0, [r4, #0]
    437c:	9901      	ldr	r1, [sp, #4]
    437e:	f7fe fb65 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4382:	8820      	ldrh	r0, [r4, #0]
    4384:	9901      	ldr	r1, [sp, #4]
    4386:	f7fe fb61 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    438a:	4a06      	ldr	r2, [pc, #24]	; (43a4 <opcode_0x5E()+0x54>)
    438c:	4b06      	ldr	r3, [pc, #24]	; (43a8 <opcode_0x5E()+0x58>)
    438e:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    4392:	881b      	ldrh	r3, [r3, #0]
    4394:	4418      	add	r0, r3
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    4396:	b280      	uxth	r0, r0
    4398:	b002      	add	sp, #8
    439a:	bd10      	pop	{r4, pc}
    439c:	20004990 	.word	0x20004990
    43a0:	20018886 	.word	0x20018886
    43a4:	20016418 	.word	0x20016418
    43a8:	20018888 	.word	0x20018888

000043ac <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    43ac:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    43ae:	4d19      	ldr	r5, [pc, #100]	; (4414 <opcode_0x66()+0x68>)
    43b0:	b083      	sub	sp, #12
    43b2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    43b4:	4c18      	ldr	r4, [pc, #96]	; (4418 <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    43b6:	8828      	ldrh	r0, [r5, #0]
    43b8:	3001      	adds	r0, #1
    43ba:	b280      	uxth	r0, r0
    43bc:	f7fe f98a 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    43c0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    43c2:	b280      	uxth	r0, r0
    43c4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    43c6:	f7fe f985 	bl	26d4 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43ca:	4a14      	ldr	r2, [pc, #80]	; (441c <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    43cc:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43d0:	7813      	ldrb	r3, [r2, #0]
    43d2:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    43d6:	bf14      	ite	ne
    43d8:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43dc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    43e0:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43e2:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    43e4:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    43e8:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43ea:	4608      	mov	r0, r1
    43ec:	9101      	str	r1, [sp, #4]
    43ee:	f7fe fc35 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    43f2:	9901      	ldr	r1, [sp, #4]
    43f4:	8820      	ldrh	r0, [r4, #0]
    43f6:	f7fe fb29 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43fa:	8820      	ldrh	r0, [r4, #0]
    43fc:	9901      	ldr	r1, [sp, #4]
    43fe:	f7fe fb25 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    4402:	4a07      	ldr	r2, [pc, #28]	; (4420 <opcode_0x66()+0x74>)
    4404:	882b      	ldrh	r3, [r5, #0]
    4406:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    440a:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    440c:	b280      	uxth	r0, r0
    440e:	b003      	add	sp, #12
    4410:	bd30      	pop	{r4, r5, pc}
    4412:	bf00      	nop
    4414:	20018888 	.word	0x20018888
    4418:	20018886 	.word	0x20018886
    441c:	20004990 	.word	0x20004990
    4420:	20016418 	.word	0x20016418

00004424 <opcode_0x76()>:
uint16_t opcode_0x76() {
    4424:	b510      	push	{r4, lr}
    4426:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    4428:	f7fe fc4c 	bl	2cc4 <Fetch_ZeroPage_X()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    442c:	4a12      	ldr	r2, [pc, #72]	; (4478 <opcode_0x76()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    442e:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4430:	4c12      	ldr	r4, [pc, #72]	; (447c <opcode_0x76()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4432:	7813      	ldrb	r3, [r2, #0]
    4434:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4438:	bf4c      	ite	mi
    443a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    443e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4442:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4444:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4446:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    444a:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    444c:	4608      	mov	r0, r1
    444e:	9101      	str	r1, [sp, #4]
    4450:	f7fe fc04 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4454:	8820      	ldrh	r0, [r4, #0]
    4456:	9901      	ldr	r1, [sp, #4]
    4458:	f7fe faf8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    445c:	8820      	ldrh	r0, [r4, #0]
    445e:	9901      	ldr	r1, [sp, #4]
    4460:	f7fe faf4 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    4464:	4a06      	ldr	r2, [pc, #24]	; (4480 <opcode_0x76()+0x5c>)
    4466:	4b07      	ldr	r3, [pc, #28]	; (4484 <opcode_0x76()+0x60>)
    4468:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    446c:	881b      	ldrh	r3, [r3, #0]
    446e:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    4470:	b280      	uxth	r0, r0
    4472:	b002      	add	sp, #8
    4474:	bd10      	pop	{r4, pc}
    4476:	bf00      	nop
    4478:	20004990 	.word	0x20004990
    447c:	20018886 	.word	0x20018886
    4480:	20016418 	.word	0x20016418
    4484:	20018888 	.word	0x20018888

00004488 <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    4488:	b510      	push	{r4, lr}
    448a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    448c:	f7fe fc5a 	bl	2d44 <Fetch_Absolute()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4490:	4a12      	ldr	r2, [pc, #72]	; (44dc <opcode_0x6E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4492:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4494:	4c12      	ldr	r4, [pc, #72]	; (44e0 <opcode_0x6E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4496:	7813      	ldrb	r3, [r2, #0]
    4498:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    449c:	bf4c      	ite	mi
    449e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    44a2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    44a6:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    44a8:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    44aa:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    44ae:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44b0:	4608      	mov	r0, r1
    44b2:	9101      	str	r1, [sp, #4]
    44b4:	f7fe fbd2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    44b8:	8820      	ldrh	r0, [r4, #0]
    44ba:	9901      	ldr	r1, [sp, #4]
    44bc:	f7fe fac6 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44c0:	8820      	ldrh	r0, [r4, #0]
    44c2:	9901      	ldr	r1, [sp, #4]
    44c4:	f7fe fac2 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    44c8:	4a06      	ldr	r2, [pc, #24]	; (44e4 <opcode_0x6E()+0x5c>)
    44ca:	4b07      	ldr	r3, [pc, #28]	; (44e8 <opcode_0x6E()+0x60>)
    44cc:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    44d0:	881b      	ldrh	r3, [r3, #0]
    44d2:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    44d4:	b280      	uxth	r0, r0
    44d6:	b002      	add	sp, #8
    44d8:	bd10      	pop	{r4, pc}
    44da:	bf00      	nop
    44dc:	20004990 	.word	0x20004990
    44e0:	20018886 	.word	0x20018886
    44e4:	20016418 	.word	0x20016418
    44e8:	20018888 	.word	0x20018888

000044ec <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    44ec:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    44ee:	2000      	movs	r0, #0
uint16_t opcode_0x7E() {
    44f0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    44f2:	f7fe fc43 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    44f6:	4a12      	ldr	r2, [pc, #72]	; (4540 <opcode_0x7E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    44f8:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    44fa:	4c12      	ldr	r4, [pc, #72]	; (4544 <opcode_0x7E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    44fc:	7813      	ldrb	r3, [r2, #0]
    44fe:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4502:	bf4c      	ite	mi
    4504:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4508:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    450c:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    450e:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4510:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4514:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4516:	4608      	mov	r0, r1
    4518:	9101      	str	r1, [sp, #4]
    451a:	f7fe fb9f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    451e:	8820      	ldrh	r0, [r4, #0]
    4520:	9901      	ldr	r1, [sp, #4]
    4522:	f7fe fa93 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4526:	8820      	ldrh	r0, [r4, #0]
    4528:	9901      	ldr	r1, [sp, #4]
    452a:	f7fe fa8f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    452e:	4a06      	ldr	r2, [pc, #24]	; (4548 <opcode_0x7E()+0x5c>)
    4530:	4b06      	ldr	r3, [pc, #24]	; (454c <opcode_0x7E()+0x60>)
    4532:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    4536:	881b      	ldrh	r3, [r3, #0]
    4538:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    453a:	b280      	uxth	r0, r0
    453c:	b002      	add	sp, #8
    453e:	bd10      	pop	{r4, pc}
    4540:	20004990 	.word	0x20004990
    4544:	20018886 	.word	0x20018886
    4548:	20016418 	.word	0x20016418
    454c:	20018888 	.word	0x20018888

00004550 <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    4550:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4552:	4d18      	ldr	r5, [pc, #96]	; (45b4 <opcode_0x26()+0x64>)
    4554:	b083      	sub	sp, #12
    4556:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4558:	4c17      	ldr	r4, [pc, #92]	; (45b8 <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    455a:	8828      	ldrh	r0, [r5, #0]
    455c:	3001      	adds	r0, #1
    455e:	b280      	uxth	r0, r0
    4560:	f7fe f8b8 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4564:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4566:	b280      	uxth	r0, r0
    4568:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    456a:	f7fe f8b3 	bl	26d4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    456e:	4a13      	ldr	r2, [pc, #76]	; (45bc <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4570:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4574:	7813      	ldrb	r3, [r2, #0]
    4576:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    457a:	bf14      	ite	ne
    457c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4580:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4584:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4588:	7013      	strb	r3, [r2, #0]
    458a:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    458c:	4608      	mov	r0, r1
    458e:	9101      	str	r1, [sp, #4]
    4590:	f7fe fb64 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4594:	9901      	ldr	r1, [sp, #4]
    4596:	8820      	ldrh	r0, [r4, #0]
    4598:	f7fe fa58 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    459c:	8820      	ldrh	r0, [r4, #0]
    459e:	9901      	ldr	r1, [sp, #4]
    45a0:	f7fe fa54 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    45a4:	4a06      	ldr	r2, [pc, #24]	; (45c0 <opcode_0x26()+0x70>)
    45a6:	882b      	ldrh	r3, [r5, #0]
    45a8:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    45ac:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    45ae:	b280      	uxth	r0, r0
    45b0:	b003      	add	sp, #12
    45b2:	bd30      	pop	{r4, r5, pc}
    45b4:	20018888 	.word	0x20018888
    45b8:	20018886 	.word	0x20018886
    45bc:	20004990 	.word	0x20004990
    45c0:	20015418 	.word	0x20015418

000045c4 <opcode_0x36()>:
uint16_t opcode_0x36() {
    45c4:	b510      	push	{r4, lr}
    45c6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    45c8:	f7fe fb7c 	bl	2cc4 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45cc:	4a11      	ldr	r2, [pc, #68]	; (4614 <opcode_0x36()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    45ce:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    45d0:	4c11      	ldr	r4, [pc, #68]	; (4618 <opcode_0x36()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45d2:	7813      	ldrb	r3, [r2, #0]
    45d4:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    45d8:	bf4c      	ite	mi
    45da:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    45de:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    45e2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    45e6:	7013      	strb	r3, [r2, #0]
    45e8:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45ea:	4608      	mov	r0, r1
    45ec:	9101      	str	r1, [sp, #4]
    45ee:	f7fe fb35 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    45f2:	8820      	ldrh	r0, [r4, #0]
    45f4:	9901      	ldr	r1, [sp, #4]
    45f6:	f7fe fa29 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45fa:	8820      	ldrh	r0, [r4, #0]
    45fc:	9901      	ldr	r1, [sp, #4]
    45fe:	f7fe fa25 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    4602:	4a06      	ldr	r2, [pc, #24]	; (461c <opcode_0x36()+0x58>)
    4604:	4b06      	ldr	r3, [pc, #24]	; (4620 <opcode_0x36()+0x5c>)
    4606:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    460a:	881b      	ldrh	r3, [r3, #0]
    460c:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    460e:	b280      	uxth	r0, r0
    4610:	b002      	add	sp, #8
    4612:	bd10      	pop	{r4, pc}
    4614:	20004990 	.word	0x20004990
    4618:	20018886 	.word	0x20018886
    461c:	20015418 	.word	0x20015418
    4620:	20018888 	.word	0x20018888

00004624 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    4624:	b510      	push	{r4, lr}
    4626:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    4628:	f7fe fb8c 	bl	2d44 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    462c:	4a11      	ldr	r2, [pc, #68]	; (4674 <opcode_0x2E()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    462e:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4630:	4c11      	ldr	r4, [pc, #68]	; (4678 <opcode_0x2E()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4632:	7813      	ldrb	r3, [r2, #0]
    4634:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4638:	bf4c      	ite	mi
    463a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    463e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4642:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4646:	7013      	strb	r3, [r2, #0]
    4648:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    464a:	4608      	mov	r0, r1
    464c:	9101      	str	r1, [sp, #4]
    464e:	f7fe fb05 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4652:	8820      	ldrh	r0, [r4, #0]
    4654:	9901      	ldr	r1, [sp, #4]
    4656:	f7fe f9f9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    465a:	8820      	ldrh	r0, [r4, #0]
    465c:	9901      	ldr	r1, [sp, #4]
    465e:	f7fe f9f5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    4662:	4a06      	ldr	r2, [pc, #24]	; (467c <opcode_0x2E()+0x58>)
    4664:	4b06      	ldr	r3, [pc, #24]	; (4680 <opcode_0x2E()+0x5c>)
    4666:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    466a:	881b      	ldrh	r3, [r3, #0]
    466c:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    466e:	b280      	uxth	r0, r0
    4670:	b002      	add	sp, #8
    4672:	bd10      	pop	{r4, pc}
    4674:	20004990 	.word	0x20004990
    4678:	20018886 	.word	0x20018886
    467c:	20015418 	.word	0x20015418
    4680:	20018888 	.word	0x20018888

00004684 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    4684:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    4686:	2000      	movs	r0, #0
uint16_t opcode_0x3E() {
    4688:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    468a:	f7fe fb77 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    468e:	4a12      	ldr	r2, [pc, #72]	; (46d8 <opcode_0x3E()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4690:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4692:	4c12      	ldr	r4, [pc, #72]	; (46dc <opcode_0x3E()+0x58>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4694:	7813      	ldrb	r3, [r2, #0]
    4696:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    469a:	bf4c      	ite	mi
    469c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    46a0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    46a4:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    46a8:	7013      	strb	r3, [r2, #0]
    46aa:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46ac:	4608      	mov	r0, r1
    46ae:	9101      	str	r1, [sp, #4]
    46b0:	f7fe fad4 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    46b4:	8820      	ldrh	r0, [r4, #0]
    46b6:	9901      	ldr	r1, [sp, #4]
    46b8:	f7fe f9c8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    46bc:	8820      	ldrh	r0, [r4, #0]
    46be:	9901      	ldr	r1, [sp, #4]
    46c0:	f7fe f9c4 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    46c4:	4a06      	ldr	r2, [pc, #24]	; (46e0 <opcode_0x3E()+0x5c>)
    46c6:	4b07      	ldr	r3, [pc, #28]	; (46e4 <opcode_0x3E()+0x60>)
    46c8:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    46cc:	881b      	ldrh	r3, [r3, #0]
    46ce:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    46d0:	b280      	uxth	r0, r0
    46d2:	b002      	add	sp, #8
    46d4:	bd10      	pop	{r4, pc}
    46d6:	bf00      	nop
    46d8:	20004990 	.word	0x20004990
    46dc:	20018886 	.word	0x20018886
    46e0:	20015418 	.word	0x20015418
    46e4:	20018888 	.word	0x20018888

000046e8 <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    46e8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    46ea:	4c52      	ldr	r4, [pc, #328]	; (4834 <Branch_Taken()+0x14c>)
    46ec:	2100      	movs	r1, #0
    46ee:	8820      	ldrh	r0, [r4, #0]
    46f0:	3001      	adds	r0, #1
    46f2:	b280      	uxth	r0, r0
    46f4:	f7fd ffee 	bl	26d4 <read_byte(unsigned short, bool)>

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    effective_address = (register_pc + 2) + effective_address;
    46f8:	8821      	ldrh	r1, [r4, #0]
    if ((reg_data & 0x0080) == 0x0080) {
    46fa:	0605      	lsls	r5, r0, #24
    effective_address = Sign_Extend16(Fetch_Immediate(1));
    46fc:	b283      	uxth	r3, r0
    effective_address = (register_pc + 2) + effective_address;
    46fe:	f101 0002 	add.w	r0, r1, #2
    4702:	4d4d      	ldr	r5, [pc, #308]	; (4838 <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    4704:	bf48      	it	mi
    4706:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    470a:	b280      	uxth	r0, r0
    470c:	4403      	add	r3, r0
    470e:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4710:	4059      	eors	r1, r3
    effective_address = (register_pc + 2) + effective_address;
    4712:	802b      	strh	r3, [r5, #0]
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4714:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    4718:	d006      	beq.n	4728 <Branch_Taken()+0x40>
    return read_byte(register_pc+offset, false);
    471a:	2100      	movs	r1, #0
    471c:	f7fd ffda 	bl	26d4 <read_byte(unsigned short, bool)>
    4720:	8820      	ldrh	r0, [r4, #0]
    4722:	2100      	movs	r1, #0
    4724:	3003      	adds	r0, #3
    4726:	b280      	uxth	r0, r0
    4728:	f7fd ffd4 	bl	26d4 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    472c:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    472e:	4a43      	ldr	r2, [pc, #268]	; (483c <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4734:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    4736:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4738:	d376      	bcc.n	4828 <Branch_Taken()+0x140>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    473a:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    473e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4742:	d305      	bcc.n	4750 <Branch_Taken()+0x68>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4744:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4748:	b292      	uxth	r2, r2
    474a:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    474e:	d36b      	bcc.n	4828 <Branch_Taken()+0x140>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4750:	4a3b      	ldr	r2, [pc, #236]	; (4840 <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    4752:	2000      	movs	r0, #0
    4754:	493b      	ldr	r1, [pc, #236]	; (4844 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4756:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4758:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    475a:	2a01      	cmp	r2, #1
    475c:	d005      	beq.n	476a <Branch_Taken()+0x82>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    475e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4762:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4766:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    476a:	4a37      	ldr	r2, [pc, #220]	; (4848 <Branch_Taken()+0x160>)
    476c:	7812      	ldrb	r2, [r2, #0]
    476e:	b94a      	cbnz	r2, 4784 <Branch_Taken()+0x9c>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4770:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4774:	680a      	ldr	r2, [r1, #0]
    4776:	04d0      	lsls	r0, r2, #19
    4778:	d4fc      	bmi.n	4774 <Branch_Taken()+0x8c>
    while (CLK0) {}      // Wait for CLK0 to become low
    477a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    477e:	680a      	ldr	r2, [r1, #0]
    4780:	04d2      	lsls	r2, r2, #19
    4782:	d5fc      	bpl.n	477e <Branch_Taken()+0x96>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4784:	4e31      	ldr	r6, [pc, #196]	; (484c <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4786:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    478a:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    478c:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    478e:	06d8      	lsls	r0, r3, #27
    4790:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4794:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4798:	6829      	ldr	r1, [r5, #0]
    479a:	4a2d      	ldr	r2, [pc, #180]	; (4850 <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    479c:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    47a0:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    47a2:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    47a4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    47a8:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    47ac:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    47ae:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    47b2:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    47b6:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    47b8:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    47bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    47c0:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    47c2:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    47c4:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    47c6:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    47c8:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    47cc:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    47ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    47d2:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    47d4:	491f      	ldr	r1, [pc, #124]	; (4854 <Branch_Taken()+0x16c>)
    47d6:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    47d8:	4d1f      	ldr	r5, [pc, #124]	; (4858 <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    47da:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    47dc:	0559      	lsls	r1, r3, #21
    47de:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    47e2:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    47e4:	0359      	lsls	r1, r3, #13
    47e6:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    47ea:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    47ec:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    47ee:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    47f2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    47f6:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    47f8:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    47fa:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    47fc:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4800:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4804:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4808:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    480a:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    480c:	682c      	ldr	r4, [r5, #0]
    480e:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4812:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4814:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4816:	4911      	ldr	r1, [pc, #68]	; (485c <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4818:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    481a:	4a11      	ldr	r2, [pc, #68]	; (4860 <Branch_Taken()+0x178>)
    481c:	680c      	ldr	r4, [r1, #0]
    481e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4820:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4822:	4303      	orrs	r3, r0
    4824:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    4826:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4828:	4a0e      	ldr	r2, [pc, #56]	; (4864 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    482a:	7812      	ldrb	r2, [r2, #0]
    482c:	2a01      	cmp	r2, #1
    482e:	d98f      	bls.n	4750 <Branch_Taken()+0x68>
    4830:	bd70      	pop	{r4, r5, r6, pc}
    4832:	bf00      	nop
    4834:	20018888 	.word	0x20018888
    4838:	20018886 	.word	0x20018886
    483c:	20018884 	.word	0x20018884
    4840:	200188a2 	.word	0x200188a2
    4844:	2001889d 	.word	0x2001889d
    4848:	2000498e 	.word	0x2000498e
    484c:	42004000 	.word	0x42004000
    4850:	6dfffff3 	.word	0x6dfffff3
    4854:	cff3efff 	.word	0xcff3efff
    4858:	42008000 	.word	0x42008000
    485c:	4200c000 	.word	0x4200c000
    4860:	7fffff6f 	.word	0x7fffff6f
    4864:	20018894 	.word	0x20018894

00004868 <opcode_0xF0()>:
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    4868:	4b0c      	ldr	r3, [pc, #48]	; (489c <opcode_0xF0()+0x34>)
uint16_t opcode_0xF0() {
    486a:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    486c:	781b      	ldrb	r3, [r3, #0]
    486e:	4c0c      	ldr	r4, [pc, #48]	; (48a0 <opcode_0xF0()+0x38>)
    4870:	f3c3 0140 	ubfx	r1, r3, #1, #1
    4874:	079b      	lsls	r3, r3, #30
    4876:	d503      	bpl.n	4880 <opcode_0xF0()+0x18>
    4878:	f7ff ff36 	bl	46e8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xF0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    487c:	8820      	ldrh	r0, [r4, #0]
    487e:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xF0].length;
    4880:	4b08      	ldr	r3, [pc, #32]	; (48a4 <opcode_0xF0()+0x3c>)
    4882:	8822      	ldrh	r2, [r4, #0]
    4884:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    4888:	4413      	add	r3, r2
    488a:	b29b      	uxth	r3, r3
    return read_byte(register_pc+offset, false);
    488c:	1c58      	adds	r0, r3, #1
    488e:	8023      	strh	r3, [r4, #0]
    4890:	b280      	uxth	r0, r0
    4892:	f7fd ff1f 	bl	26d4 <read_byte(unsigned short, bool)>
} // 0xF0 - BEQ - Branch on Zero Set
    4896:	8820      	ldrh	r0, [r4, #0]
    4898:	bd10      	pop	{r4, pc}
    489a:	bf00      	nop
    489c:	20004990 	.word	0x20004990
    48a0:	20018888 	.word	0x20018888
    48a4:	20018418 	.word	0x20018418

000048a8 <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    48a8:	4b0b      	ldr	r3, [pc, #44]	; (48d8 <opcode_0xD0()+0x30>)
uint16_t opcode_0xD0() {
    48aa:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    48ac:	781b      	ldrb	r3, [r3, #0]
    48ae:	4c0b      	ldr	r4, [pc, #44]	; (48dc <opcode_0xD0()+0x34>)
    48b0:	079b      	lsls	r3, r3, #30
    48b2:	d403      	bmi.n	48bc <opcode_0xD0()+0x14>
    48b4:	f7ff ff18 	bl	46e8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xD0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    48b8:	8820      	ldrh	r0, [r4, #0]
    48ba:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xD0].length;
    48bc:	4b08      	ldr	r3, [pc, #32]	; (48e0 <opcode_0xD0()+0x38>)
    48be:	2100      	movs	r1, #0
    48c0:	8822      	ldrh	r2, [r4, #0]
    48c2:	f893 3a71 	ldrb.w	r3, [r3, #2673]	; 0xa71
    48c6:	4413      	add	r3, r2
    48c8:	b29b      	uxth	r3, r3
    48ca:	1c58      	adds	r0, r3, #1
    48cc:	8023      	strh	r3, [r4, #0]
    48ce:	b280      	uxth	r0, r0
    48d0:	f7fd ff00 	bl	26d4 <read_byte(unsigned short, bool)>
} // 0xD0 - BNE - Branch on Zero Clear
    48d4:	8820      	ldrh	r0, [r4, #0]
    48d6:	bd10      	pop	{r4, pc}
    48d8:	20004990 	.word	0x20004990
    48dc:	20018888 	.word	0x20018888
    48e0:	20017418 	.word	0x20017418

000048e4 <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    48e4:	4b0c      	ldr	r3, [pc, #48]	; (4918 <opcode_0x70()+0x34>)
uint16_t opcode_0x70() {
    48e6:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	4c0c      	ldr	r4, [pc, #48]	; (491c <opcode_0x70()+0x38>)
    48ec:	f3c3 1180 	ubfx	r1, r3, #6, #1
    48f0:	065b      	lsls	r3, r3, #25
    48f2:	d503      	bpl.n	48fc <opcode_0x70()+0x18>
    48f4:	f7ff fef8 	bl	46e8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x70].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    48f8:	8820      	ldrh	r0, [r4, #0]
    48fa:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x70].length;
    48fc:	4b08      	ldr	r3, [pc, #32]	; (4920 <opcode_0x70()+0x3c>)
    48fe:	8822      	ldrh	r2, [r4, #0]
    4900:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
    4904:	4413      	add	r3, r2
    4906:	b29b      	uxth	r3, r3
    4908:	1c58      	adds	r0, r3, #1
    490a:	8023      	strh	r3, [r4, #0]
    490c:	b280      	uxth	r0, r0
    490e:	f7fd fee1 	bl	26d4 <read_byte(unsigned short, bool)>
} // 0x70 - BVS - Branch on Overflow Set
    4912:	8820      	ldrh	r0, [r4, #0]
    4914:	bd10      	pop	{r4, pc}
    4916:	bf00      	nop
    4918:	20004990 	.word	0x20004990
    491c:	20018888 	.word	0x20018888
    4920:	20016418 	.word	0x20016418

00004924 <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    4924:	4b0b      	ldr	r3, [pc, #44]	; (4954 <opcode_0x50()+0x30>)
uint16_t opcode_0x50() {
    4926:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    4928:	781b      	ldrb	r3, [r3, #0]
    492a:	4c0b      	ldr	r4, [pc, #44]	; (4958 <opcode_0x50()+0x34>)
    492c:	065b      	lsls	r3, r3, #25
    492e:	d403      	bmi.n	4938 <opcode_0x50()+0x14>
    4930:	f7ff feda 	bl	46e8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x50].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    4934:	8820      	ldrh	r0, [r4, #0]
    4936:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x50].length;
    4938:	4b08      	ldr	r3, [pc, #32]	; (495c <opcode_0x50()+0x38>)
    493a:	2100      	movs	r1, #0
    493c:	8822      	ldrh	r2, [r4, #0]
    493e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    4942:	4413      	add	r3, r2
    4944:	b29b      	uxth	r3, r3
    4946:	1c58      	adds	r0, r3, #1
    4948:	8023      	strh	r3, [r4, #0]
    494a:	b280      	uxth	r0, r0
    494c:	f7fd fec2 	bl	26d4 <read_byte(unsigned short, bool)>
} // 0x50 - BVC - Branch on Overflow Clear
    4950:	8820      	ldrh	r0, [r4, #0]
    4952:	bd10      	pop	{r4, pc}
    4954:	20004990 	.word	0x20004990
    4958:	20018888 	.word	0x20018888
    495c:	20016418 	.word	0x20016418

00004960 <opcode_0x4C()>:
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    4960:	b570      	push	{r4, r5, r6, lr}
    4962:	4d4b      	ldr	r5, [pc, #300]	; (4a90 <opcode_0x4C()+0x130>)
    4964:	2100      	movs	r1, #0
    4966:	8828      	ldrh	r0, [r5, #0]
    4968:	3001      	adds	r0, #1
    496a:	b280      	uxth	r0, r0
    496c:	f7fd feb2 	bl	26d4 <read_byte(unsigned short, bool)>
    4970:	882b      	ldrh	r3, [r5, #0]
    4972:	4604      	mov	r4, r0
    4974:	2100      	movs	r1, #0
    4976:	1c98      	adds	r0, r3, #2
    4978:	b280      	uxth	r0, r0
    497a:	f7fd feab 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    497e:	4a45      	ldr	r2, [pc, #276]	; (4a94 <opcode_0x4C()+0x134>)
    4980:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    4984:	4b44      	ldr	r3, [pc, #272]	; (4a98 <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    4986:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4988:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    498c:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    498e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4990:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4992:	d378      	bcc.n	4a86 <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4994:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    499c:	d305      	bcc.n	49aa <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    499e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    49a2:	b29b      	uxth	r3, r3
    49a4:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    49a8:	d36d      	bcc.n	4a86 <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    49aa:	4b3c      	ldr	r3, [pc, #240]	; (4a9c <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    49ac:	2100      	movs	r1, #0
    49ae:	4a3c      	ldr	r2, [pc, #240]	; (4aa0 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    49b0:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    49b2:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    49b4:	2b01      	cmp	r3, #1
    49b6:	d005      	beq.n	49c4 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    49b8:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    49bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    49c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    49c4:	4b37      	ldr	r3, [pc, #220]	; (4aa4 <opcode_0x4C()+0x144>)
    49c6:	781b      	ldrb	r3, [r3, #0]
    49c8:	b94b      	cbnz	r3, 49de <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    49ca:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    49ce:	6813      	ldr	r3, [r2, #0]
    49d0:	04d9      	lsls	r1, r3, #19
    49d2:	d4fc      	bmi.n	49ce <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    49d4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    49d8:	6813      	ldr	r3, [r2, #0]
    49da:	04db      	lsls	r3, r3, #19
    49dc:	d5fc      	bpl.n	49d8 <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    49de:	4d32      	ldr	r5, [pc, #200]	; (4aa8 <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49e0:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    49e4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    49e6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    49e8:	06c1      	lsls	r1, r0, #27
    49ea:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49ee:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49f2:	6832      	ldr	r2, [r6, #0]
    49f4:	4b2d      	ldr	r3, [pc, #180]	; (4aac <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    49f6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    49fa:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    49fe:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4a00:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4a02:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4a06:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4a0a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4a0c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4a10:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4a14:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4a16:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4a1a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4a1e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4a20:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4a22:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4a24:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4a26:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a2a:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4a30:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a32:	4a1f      	ldr	r2, [pc, #124]	; (4ab0 <opcode_0x4C()+0x150>)
    4a34:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a36:	4e1f      	ldr	r6, [pc, #124]	; (4ab4 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4a38:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4a3a:	0542      	lsls	r2, r0, #21
    4a3c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4a40:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4a42:	0342      	lsls	r2, r0, #13
    4a44:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4a48:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4a4a:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4a4c:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4a54:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4a56:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a58:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4a5c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4a60:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a62:	6832      	ldr	r2, [r6, #0]
    4a64:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4a68:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a6a:	4a13      	ldr	r2, [pc, #76]	; (4ab8 <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4a6c:	ea43 030c 	orr.w	r3, r3, ip
    4a70:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a72:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a74:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4a7a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4a7c:	4323      	orrs	r3, r4
    4a7e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4a80:	430b      	orrs	r3, r1
    4a82:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    4a84:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a86:	4b0d      	ldr	r3, [pc, #52]	; (4abc <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4a88:	781b      	ldrb	r3, [r3, #0]
    4a8a:	2b01      	cmp	r3, #1
    4a8c:	d98d      	bls.n	49aa <opcode_0x4C()+0x4a>
    4a8e:	bd70      	pop	{r4, r5, r6, pc}
    4a90:	20018888 	.word	0x20018888
    4a94:	20018886 	.word	0x20018886
    4a98:	20018884 	.word	0x20018884
    4a9c:	200188a2 	.word	0x200188a2
    4aa0:	2001889d 	.word	0x2001889d
    4aa4:	2000498e 	.word	0x2000498e
    4aa8:	42004000 	.word	0x42004000
    4aac:	6dfffff3 	.word	0x6dfffff3
    4ab0:	cff3efff 	.word	0xcff3efff
    4ab4:	42008000 	.word	0x42008000
    4ab8:	7fffff6f 	.word	0x7fffff6f
    4abc:	20018894 	.word	0x20018894

00004ac0 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    4ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4ac2:	4e52      	ldr	r6, [pc, #328]	; (4c0c <opcode_0x6C()+0x14c>)
    4ac4:	2100      	movs	r1, #0
    4ac6:	8830      	ldrh	r0, [r6, #0]
    4ac8:	3001      	adds	r0, #1
    4aca:	b280      	uxth	r0, r0
    4acc:	f7fd fe02 	bl	26d4 <read_byte(unsigned short, bool)>
    4ad0:	8833      	ldrh	r3, [r6, #0]
    4ad2:	4604      	mov	r4, r0
    4ad4:	2100      	movs	r1, #0
    4ad6:	1c98      	adds	r0, r3, #2
    4ad8:	b280      	uxth	r0, r0
    4ada:	f7fd fdfb 	bl	26d4 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    4ade:	2100      	movs	r1, #0
    4ae0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4ae4:	b284      	uxth	r4, r0
    4ae6:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    4ae8:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    4aea:	f7fd fdf3 	bl	26d4 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    4aee:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    4af0:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    4af2:	b2a0      	uxth	r0, r4
    4af4:	f7fd fdee 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    4af8:	4945      	ldr	r1, [pc, #276]	; (4c10 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    4afa:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    4afc:	4a45      	ldr	r2, [pc, #276]	; (4c14 <opcode_0x6C()+0x154>)
    4afe:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    4b00:	1943      	adds	r3, r0, r5
    4b02:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4b04:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    4b06:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4b08:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b0a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4b0e:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    4b10:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b12:	d376      	bcc.n	4c02 <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4b14:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4b1c:	d305      	bcc.n	4b2a <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4b1e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4b22:	b29b      	uxth	r3, r3
    4b24:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4b28:	d36b      	bcc.n	4c02 <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b2a:	4b3b      	ldr	r3, [pc, #236]	; (4c18 <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    4b2c:	2100      	movs	r1, #0
    4b2e:	4a3b      	ldr	r2, [pc, #236]	; (4c1c <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b30:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4b32:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b34:	2b01      	cmp	r3, #1
    4b36:	d005      	beq.n	4b44 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4b38:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4b3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4b44:	4b36      	ldr	r3, [pc, #216]	; (4c20 <opcode_0x6C()+0x160>)
    4b46:	781b      	ldrb	r3, [r3, #0]
    4b48:	b94b      	cbnz	r3, 4b5e <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4b4a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4b4e:	6813      	ldr	r3, [r2, #0]
    4b50:	04d9      	lsls	r1, r3, #19
    4b52:	d4fc      	bmi.n	4b4e <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4b54:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4b58:	6813      	ldr	r3, [r2, #0]
    4b5a:	04db      	lsls	r3, r3, #19
    4b5c:	d5fc      	bpl.n	4b58 <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4b5e:	4d31      	ldr	r5, [pc, #196]	; (4c24 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b60:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4b64:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4b66:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b68:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b6a:	4f2f      	ldr	r7, [pc, #188]	; (4c28 <opcode_0x6C()+0x168>)
    4b6c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b70:	4b2e      	ldr	r3, [pc, #184]	; (4c2c <opcode_0x6C()+0x16c>)
    4b72:	6832      	ldr	r2, [r6, #0]
    4b74:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b76:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b78:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b7c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b80:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4b82:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4b86:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b8a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b8c:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b94:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b96:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b98:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b9a:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b9c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba0:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ba6:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba8:	4a21      	ldr	r2, [pc, #132]	; (4c30 <opcode_0x6C()+0x170>)
    4baa:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bac:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4bae:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4bb0:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bb2:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4bb6:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4bba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4bbe:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4bc0:	0342      	lsls	r2, r0, #13
    4bc2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4bc6:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4bc8:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bca:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bd2:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4bd4:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4bd6:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4bda:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4bde:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4be0:	683a      	ldr	r2, [r7, #0]
    4be2:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4be6:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4be8:	4a12      	ldr	r2, [pc, #72]	; (4c34 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4bea:	4333      	orrs	r3, r6
    4bec:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bee:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4bf0:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4bf6:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bf8:	4323      	orrs	r3, r4
    4bfa:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4bfc:	430b      	orrs	r3, r1
    4bfe:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4c02:	4b0d      	ldr	r3, [pc, #52]	; (4c38 <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4c04:	781b      	ldrb	r3, [r3, #0]
    4c06:	2b01      	cmp	r3, #1
    4c08:	d98f      	bls.n	4b2a <opcode_0x6C()+0x6a>
    4c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c0c:	20018888 	.word	0x20018888
    4c10:	20018886 	.word	0x20018886
    4c14:	20018884 	.word	0x20018884
    4c18:	200188a2 	.word	0x200188a2
    4c1c:	2001889d 	.word	0x2001889d
    4c20:	2000498e 	.word	0x2000498e
    4c24:	42004000 	.word	0x42004000
    4c28:	42008000 	.word	0x42008000
    4c2c:	6dfffff3 	.word	0x6dfffff3
    4c30:	cff3efff 	.word	0xcff3efff
    4c34:	7fffff6f 	.word	0x7fffff6f
    4c38:	20018894 	.word	0x20018894

00004c3c <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    4c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4c3e:	4d57      	ldr	r5, [pc, #348]	; (4d9c <opcode_0x20()+0x160>)
    4c40:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    4c42:	4c57      	ldr	r4, [pc, #348]	; (4da0 <opcode_0x20()+0x164>)
    4c44:	8828      	ldrh	r0, [r5, #0]
    4c46:	3001      	adds	r0, #1
    4c48:	b280      	uxth	r0, r0
    4c4a:	f7fd fd43 	bl	26d4 <read_byte(unsigned short, bool)>
    4c4e:	882b      	ldrh	r3, [r5, #0]
    4c50:	4606      	mov	r6, r0
    4c52:	2100      	movs	r1, #0
    4c54:	1c98      	adds	r0, r3, #2
    4c56:	b280      	uxth	r0, r0
    4c58:	f7fd fd3c 	bl	26d4 <read_byte(unsigned short, bool)>
    4c5c:	7823      	ldrb	r3, [r4, #0]
    4c5e:	4607      	mov	r7, r0
    4c60:	2100      	movs	r1, #0
    4c62:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    4c66:	f7fd fd35 	bl	26d4 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    4c6a:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    4c6c:	7820      	ldrb	r0, [r4, #0]
    4c6e:	0a09      	lsrs	r1, r1, #8
    4c70:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4c74:	f7fd feea 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4c78:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4c7a:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    4c7c:	3b01      	subs	r3, #1
    4c7e:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    4c80:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    4c84:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4c86:	f7fd fee1 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4c8a:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    4c8c:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    4c90:	4a44      	ldr	r2, [pc, #272]	; (4da4 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    4c92:	3b01      	subs	r3, #1
    4c94:	b280      	uxth	r0, r0
    4c96:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4c98:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4c9c:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4c9e:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4ca0:	d376      	bcc.n	4d90 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4ca2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4caa:	d305      	bcc.n	4cb8 <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4cac:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4cb0:	b29b      	uxth	r3, r3
    4cb2:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4cb6:	d36b      	bcc.n	4d90 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cb8:	4b3b      	ldr	r3, [pc, #236]	; (4da8 <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    4cba:	2100      	movs	r1, #0
    4cbc:	4a3b      	ldr	r2, [pc, #236]	; (4dac <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cbe:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4cc0:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	d005      	beq.n	4cd2 <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4cc6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4cca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4cd2:	4b37      	ldr	r3, [pc, #220]	; (4db0 <opcode_0x20()+0x174>)
    4cd4:	781b      	ldrb	r3, [r3, #0]
    4cd6:	b94b      	cbnz	r3, 4cec <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4cd8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4cdc:	6813      	ldr	r3, [r2, #0]
    4cde:	04d9      	lsls	r1, r3, #19
    4ce0:	d4fc      	bmi.n	4cdc <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    4ce2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4ce6:	6813      	ldr	r3, [r2, #0]
    4ce8:	04db      	lsls	r3, r3, #19
    4cea:	d5fc      	bpl.n	4ce6 <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4cec:	4d31      	ldr	r5, [pc, #196]	; (4db4 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cee:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4cf2:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4cf4:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4cf6:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cf8:	4f2f      	ldr	r7, [pc, #188]	; (4db8 <opcode_0x20()+0x17c>)
    4cfa:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4cfe:	4b2f      	ldr	r3, [pc, #188]	; (4dbc <opcode_0x20()+0x180>)
    4d00:	6832      	ldr	r2, [r6, #0]
    4d02:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d04:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d06:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d0a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d0e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4d10:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4d14:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d18:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4d1a:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4d1e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d22:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d24:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d26:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d28:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d2a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d2e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d34:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d36:	4a22      	ldr	r2, [pc, #136]	; (4dc0 <opcode_0x20()+0x184>)
    4d38:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d3a:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d3c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4d3e:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d40:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4d44:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4d48:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4d4c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4d4e:	0342      	lsls	r2, r0, #13
    4d50:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4d54:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d56:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d58:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d60:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d62:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d64:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d68:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4d6c:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d6e:	683a      	ldr	r2, [r7, #0]
    4d70:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d74:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d76:	4a13      	ldr	r2, [pc, #76]	; (4dc4 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4d78:	4333      	orrs	r3, r6
    4d7a:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d7c:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d7e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d84:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4d86:	4323      	orrs	r3, r4
    4d88:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4d8a:	430b      	orrs	r3, r1
    4d8c:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4d90:	4b0d      	ldr	r3, [pc, #52]	; (4dc8 <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4d92:	781b      	ldrb	r3, [r3, #0]
    4d94:	2b01      	cmp	r3, #1
    4d96:	d98f      	bls.n	4cb8 <opcode_0x20()+0x7c>
    4d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d9a:	bf00      	nop
    4d9c:	20018888 	.word	0x20018888
    4da0:	20004991 	.word	0x20004991
    4da4:	20018884 	.word	0x20018884
    4da8:	200188a2 	.word	0x200188a2
    4dac:	2001889d 	.word	0x2001889d
    4db0:	2000498e 	.word	0x2000498e
    4db4:	42004000 	.word	0x42004000
    4db8:	42008000 	.word	0x42008000
    4dbc:	6dfffff3 	.word	0x6dfffff3
    4dc0:	cff3efff 	.word	0xcff3efff
    4dc4:	7fffff6f 	.word	0x7fffff6f
    4dc8:	20018894 	.word	0x20018894

00004dcc <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    4dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4dce:	4d58      	ldr	r5, [pc, #352]	; (4f30 <opcode_0x40()+0x164>)
    4dd0:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    4dd2:	4c58      	ldr	r4, [pc, #352]	; (4f34 <opcode_0x40()+0x168>)
    4dd4:	8828      	ldrh	r0, [r5, #0]
    4dd6:	3001      	adds	r0, #1
    4dd8:	b280      	uxth	r0, r0
    4dda:	f7fd fc7b 	bl	26d4 <read_byte(unsigned short, bool)>
    4dde:	7820      	ldrb	r0, [r4, #0]
    4de0:	2100      	movs	r1, #0
    4de2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4de6:	f7fd fc75 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4dea:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4dec:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4dee:	3301      	adds	r3, #1
    4df0:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4df2:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4df6:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4df8:	f7fd fc6c 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4dfc:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    4dfe:	4a4e      	ldr	r2, [pc, #312]	; (4f38 <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    4e00:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4e02:	3301      	adds	r3, #1
    4e04:	7010      	strb	r0, [r2, #0]
    4e06:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4e08:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4e0c:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4e0e:	f7fd fc61 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4e12:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4e14:	4606      	mov	r6, r0
    4e16:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4e18:	3301      	adds	r3, #1
    4e1a:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4e1c:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4e20:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    4e22:	f7fd fc57 	bl	26d4 <read_byte(unsigned short, bool)>
    current_address = local_address;
    4e26:	4b45      	ldr	r3, [pc, #276]	; (4f3c <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    4e28:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    4e2c:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e2e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4e32:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4e34:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e36:	d376      	bcc.n	4f26 <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4e38:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e40:	d305      	bcc.n	4e4e <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4e42:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4e46:	b29b      	uxth	r3, r3
    4e48:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4e4c:	d36b      	bcc.n	4f26 <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e4e:	4b3c      	ldr	r3, [pc, #240]	; (4f40 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    4e50:	2100      	movs	r1, #0
    4e52:	4a3c      	ldr	r2, [pc, #240]	; (4f44 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e54:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4e56:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e58:	2b01      	cmp	r3, #1
    4e5a:	d005      	beq.n	4e68 <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4e5c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4e60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4e68:	4b37      	ldr	r3, [pc, #220]	; (4f48 <opcode_0x40()+0x17c>)
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	b94b      	cbnz	r3, 4e82 <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4e6e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e72:	6813      	ldr	r3, [r2, #0]
    4e74:	04d9      	lsls	r1, r3, #19
    4e76:	d4fc      	bmi.n	4e72 <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    4e78:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e7c:	6813      	ldr	r3, [r2, #0]
    4e7e:	04db      	lsls	r3, r3, #19
    4e80:	d5fc      	bpl.n	4e7c <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4e82:	4d32      	ldr	r5, [pc, #200]	; (4f4c <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e84:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4e88:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4e8a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4e8c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e8e:	4f30      	ldr	r7, [pc, #192]	; (4f50 <opcode_0x40()+0x184>)
    4e90:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e94:	4b2f      	ldr	r3, [pc, #188]	; (4f54 <opcode_0x40()+0x188>)
    4e96:	6832      	ldr	r2, [r6, #0]
    4e98:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4e9a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4e9c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4ea0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ea4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4ea6:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4eaa:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4eae:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4eb0:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4eb8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4eba:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ebc:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ebe:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ec0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ec4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4eca:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ecc:	4a22      	ldr	r2, [pc, #136]	; (4f58 <opcode_0x40()+0x18c>)
    4ece:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ed0:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ed2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4ed4:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ed6:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4eda:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4ede:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4ee2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4ee4:	0342      	lsls	r2, r0, #13
    4ee6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4eea:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4eec:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4eee:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ef6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4ef8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4efa:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4efe:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4f02:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f04:	683a      	ldr	r2, [r7, #0]
    4f06:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f0a:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f0c:	4a13      	ldr	r2, [pc, #76]	; (4f5c <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4f0e:	4333      	orrs	r3, r6
    4f10:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f12:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f14:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f1a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f1c:	4323      	orrs	r3, r4
    4f1e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4f20:	430b      	orrs	r3, r1
    4f22:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4f26:	4b0e      	ldr	r3, [pc, #56]	; (4f60 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4f28:	781b      	ldrb	r3, [r3, #0]
    4f2a:	2b01      	cmp	r3, #1
    4f2c:	d98f      	bls.n	4e4e <opcode_0x40()+0x82>
    4f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f30:	20018888 	.word	0x20018888
    4f34:	20004991 	.word	0x20004991
    4f38:	20004990 	.word	0x20004990
    4f3c:	20018884 	.word	0x20018884
    4f40:	200188a2 	.word	0x200188a2
    4f44:	2001889d 	.word	0x2001889d
    4f48:	2000498e 	.word	0x2000498e
    4f4c:	42004000 	.word	0x42004000
    4f50:	42008000 	.word	0x42008000
    4f54:	6dfffff3 	.word	0x6dfffff3
    4f58:	cff3efff 	.word	0xcff3efff
    4f5c:	7fffff6f 	.word	0x7fffff6f
    4f60:	20018894 	.word	0x20018894

00004f64 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    4f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4f66:	4d55      	ldr	r5, [pc, #340]	; (50bc <opcode_0x60()+0x158>)
    4f68:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    4f6a:	4e55      	ldr	r6, [pc, #340]	; (50c0 <opcode_0x60()+0x15c>)
    4f6c:	8828      	ldrh	r0, [r5, #0]
    4f6e:	3001      	adds	r0, #1
    4f70:	b280      	uxth	r0, r0
    4f72:	f7fd fbaf 	bl	26d4 <read_byte(unsigned short, bool)>
    4f76:	7830      	ldrb	r0, [r6, #0]
    4f78:	2100      	movs	r1, #0
    4f7a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4f7e:	f7fd fba9 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4f82:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4f84:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4f86:	3301      	adds	r3, #1
    4f88:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4f8a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4f8e:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4f90:	f7fd fba0 	bl	26d4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4f94:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4f96:	4604      	mov	r4, r0
    4f98:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4f9a:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 3;
    4f9c:	3403      	adds	r4, #3
    4f9e:	b2c0      	uxtb	r0, r0
    4fa0:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4fa2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4fa6:	f7fd fb95 	bl	26d4 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    4faa:	2100      	movs	r1, #0
    register_pc = pch + pcl + 3;
    4fac:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4fb0:	b280      	uxth	r0, r0
    4fb2:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    4fb4:	f7fd fb8e 	bl	26d4 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    4fb8:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    4fba:	4b42      	ldr	r3, [pc, #264]	; (50c4 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fbc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    4fc0:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fc2:	d376      	bcc.n	50b2 <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4fc4:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4fcc:	d305      	bcc.n	4fda <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4fce:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4fd2:	b29b      	uxth	r3, r3
    4fd4:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4fd8:	d36b      	bcc.n	50b2 <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4fda:	4b3b      	ldr	r3, [pc, #236]	; (50c8 <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    4fdc:	2100      	movs	r1, #0
    4fde:	4a3b      	ldr	r2, [pc, #236]	; (50cc <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4fe0:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4fe2:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4fe4:	2b01      	cmp	r3, #1
    4fe6:	d005      	beq.n	4ff4 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4fe8:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4fec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4ff4:	4b36      	ldr	r3, [pc, #216]	; (50d0 <opcode_0x60()+0x16c>)
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	b94b      	cbnz	r3, 500e <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4ffa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4ffe:	6813      	ldr	r3, [r2, #0]
    5000:	04d9      	lsls	r1, r3, #19
    5002:	d4fc      	bmi.n	4ffe <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    5004:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5008:	6813      	ldr	r3, [r2, #0]
    500a:	04db      	lsls	r3, r3, #19
    500c:	d5fc      	bpl.n	5008 <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    500e:	4d31      	ldr	r5, [pc, #196]	; (50d4 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5010:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    5014:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    5016:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5018:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    501a:	4f2f      	ldr	r7, [pc, #188]	; (50d8 <opcode_0x60()+0x174>)
    501c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5020:	4b2e      	ldr	r3, [pc, #184]	; (50dc <opcode_0x60()+0x178>)
    5022:	6832      	ldr	r2, [r6, #0]
    5024:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5026:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5028:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    502c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5030:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    5032:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    5036:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    503a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    503c:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5044:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5046:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5048:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    504a:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    504c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5050:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5056:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5058:	4a21      	ldr	r2, [pc, #132]	; (50e0 <opcode_0x60()+0x17c>)
    505a:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    505c:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    505e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5060:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5062:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5066:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    506a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    506e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    5070:	0342      	lsls	r2, r0, #13
    5072:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5076:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5078:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    507a:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5082:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5084:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5086:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    508a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    508e:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5090:	683a      	ldr	r2, [r7, #0]
    5092:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5096:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5098:	4a12      	ldr	r2, [pc, #72]	; (50e4 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    509a:	4333      	orrs	r3, r6
    509c:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    509e:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50a0:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50a6:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50a8:	4323      	orrs	r3, r4
    50aa:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    50ac:	430b      	orrs	r3, r1
    50ae:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    50b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    50b2:	4b0d      	ldr	r3, [pc, #52]	; (50e8 <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    50b4:	781b      	ldrb	r3, [r3, #0]
    50b6:	2b01      	cmp	r3, #1
    50b8:	d98f      	bls.n	4fda <opcode_0x60()+0x76>
    50ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50bc:	20018888 	.word	0x20018888
    50c0:	20004991 	.word	0x20004991
    50c4:	20018884 	.word	0x20018884
    50c8:	200188a2 	.word	0x200188a2
    50cc:	2001889d 	.word	0x2001889d
    50d0:	2000498e 	.word	0x2000498e
    50d4:	42004000 	.word	0x42004000
    50d8:	42008000 	.word	0x42008000
    50dc:	6dfffff3 	.word	0x6dfffff3
    50e0:	cff3efff 	.word	0xcff3efff
    50e4:	7fffff6f 	.word	0x7fffff6f
    50e8:	20018894 	.word	0x20018894

000050ec <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    50ec:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    50ee:	4d18      	ldr	r5, [pc, #96]	; (5150 <opcode_0x07()+0x64>)
    50f0:	b083      	sub	sp, #12
    50f2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    50f4:	4c17      	ldr	r4, [pc, #92]	; (5154 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    50f6:	8828      	ldrh	r0, [r5, #0]
    50f8:	3001      	adds	r0, #1
    50fa:	b280      	uxth	r0, r0
    50fc:	f7fd faea 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5100:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5102:	b280      	uxth	r0, r0
    5104:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5106:	f7fd fae5 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    510a:	4a13      	ldr	r2, [pc, #76]	; (5158 <opcode_0x07()+0x6c>)
    510c:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    510e:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5112:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5114:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5116:	bf4c      	ite	mi
    5118:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    511c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5120:	9101      	str	r1, [sp, #4]
    5122:	7013      	strb	r3, [r2, #0]
    5124:	4b0d      	ldr	r3, [pc, #52]	; (515c <opcode_0x07()+0x70>)
    5126:	7818      	ldrb	r0, [r3, #0]
    5128:	4308      	orrs	r0, r1
    512a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    512c:	f7fd fd96 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5130:	9901      	ldr	r1, [sp, #4]
    5132:	8820      	ldrh	r0, [r4, #0]
    5134:	f7fd fc8a 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5138:	8820      	ldrh	r0, [r4, #0]
    513a:	9901      	ldr	r1, [sp, #4]
    513c:	f7fd fc86 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    5140:	4a07      	ldr	r2, [pc, #28]	; (5160 <opcode_0x07()+0x74>)
    5142:	882b      	ldrh	r3, [r5, #0]
    5144:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    5148:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    514a:	b280      	uxth	r0, r0
    514c:	b003      	add	sp, #12
    514e:	bd30      	pop	{r4, r5, pc}
    5150:	20018888 	.word	0x20018888
    5154:	20018886 	.word	0x20018886
    5158:	20004990 	.word	0x20004990
    515c:	2001889f 	.word	0x2001889f
    5160:	20015418 	.word	0x20015418

00005164 <opcode_0x17()>:
uint16_t opcode_0x17() {
    5164:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5166:	4c14      	ldr	r4, [pc, #80]	; (51b8 <opcode_0x17()+0x54>)
uint16_t opcode_0x17() {
    5168:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    516a:	f7fd fdab 	bl	2cc4 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    516e:	0602      	lsls	r2, r0, #24
    5170:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    5172:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5176:	4a11      	ldr	r2, [pc, #68]	; (51bc <opcode_0x17()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5178:	bf4c      	ite	mi
    517a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    517e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5182:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5184:	b2c9      	uxtb	r1, r1
    5186:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5188:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    518a:	4c0d      	ldr	r4, [pc, #52]	; (51c0 <opcode_0x17()+0x5c>)
    518c:	9101      	str	r1, [sp, #4]
    518e:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5190:	f7fd fd64 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5194:	8820      	ldrh	r0, [r4, #0]
    5196:	9901      	ldr	r1, [sp, #4]
    5198:	f7fd fc58 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    519c:	8820      	ldrh	r0, [r4, #0]
    519e:	9901      	ldr	r1, [sp, #4]
    51a0:	f7fd fc54 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    51a4:	4a07      	ldr	r2, [pc, #28]	; (51c4 <opcode_0x17()+0x60>)
    51a6:	4b08      	ldr	r3, [pc, #32]	; (51c8 <opcode_0x17()+0x64>)
    51a8:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    51ac:	881b      	ldrh	r3, [r3, #0]
    51ae:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    51b0:	b280      	uxth	r0, r0
    51b2:	b002      	add	sp, #8
    51b4:	bd10      	pop	{r4, pc}
    51b6:	bf00      	nop
    51b8:	20004990 	.word	0x20004990
    51bc:	2001889f 	.word	0x2001889f
    51c0:	20018886 	.word	0x20018886
    51c4:	20015418 	.word	0x20015418
    51c8:	20018888 	.word	0x20018888

000051cc <opcode_0x03()>:
uint16_t opcode_0x03() {
    51cc:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    51ce:	4c14      	ldr	r4, [pc, #80]	; (5220 <opcode_0x03()+0x54>)
uint16_t opcode_0x03() {
    51d0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    51d2:	f7fd fe33 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    51d6:	0602      	lsls	r2, r0, #24
    51d8:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    51da:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    51de:	4a11      	ldr	r2, [pc, #68]	; (5224 <opcode_0x03()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    51e0:	bf4c      	ite	mi
    51e2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    51e6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    51ea:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    51ec:	b2c9      	uxtb	r1, r1
    51ee:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    51f0:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    51f2:	4c0d      	ldr	r4, [pc, #52]	; (5228 <opcode_0x03()+0x5c>)
    51f4:	9101      	str	r1, [sp, #4]
    51f6:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    51f8:	f7fd fd30 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    51fc:	8820      	ldrh	r0, [r4, #0]
    51fe:	9901      	ldr	r1, [sp, #4]
    5200:	f7fd fc24 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5204:	8820      	ldrh	r0, [r4, #0]
    5206:	9901      	ldr	r1, [sp, #4]
    5208:	f7fd fc20 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    520c:	4a07      	ldr	r2, [pc, #28]	; (522c <opcode_0x03()+0x60>)
    520e:	4b08      	ldr	r3, [pc, #32]	; (5230 <opcode_0x03()+0x64>)
    5210:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    5214:	881b      	ldrh	r3, [r3, #0]
    5216:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    5218:	b280      	uxth	r0, r0
    521a:	b002      	add	sp, #8
    521c:	bd10      	pop	{r4, pc}
    521e:	bf00      	nop
    5220:	20004990 	.word	0x20004990
    5224:	2001889f 	.word	0x2001889f
    5228:	20018886 	.word	0x20018886
    522c:	20015418 	.word	0x20015418
    5230:	20018888 	.word	0x20018888

00005234 <opcode_0x13()>:
uint16_t opcode_0x13() {
    5234:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5236:	4c14      	ldr	r4, [pc, #80]	; (5288 <opcode_0x13()+0x54>)
uint16_t opcode_0x13() {
    5238:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    523a:	2001      	movs	r0, #1
    523c:	f7fd fe28 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5240:	7823      	ldrb	r3, [r4, #0]
    5242:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5244:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5248:	4a10      	ldr	r2, [pc, #64]	; (528c <opcode_0x13()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    524a:	bf4c      	ite	mi
    524c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5250:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5254:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5256:	b2c9      	uxtb	r1, r1
    5258:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    525a:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    525c:	4c0c      	ldr	r4, [pc, #48]	; (5290 <opcode_0x13()+0x5c>)
    525e:	9101      	str	r1, [sp, #4]
    5260:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5262:	f7fd fcfb 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5266:	8820      	ldrh	r0, [r4, #0]
    5268:	9901      	ldr	r1, [sp, #4]
    526a:	f7fd fbef 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    526e:	8820      	ldrh	r0, [r4, #0]
    5270:	9901      	ldr	r1, [sp, #4]
    5272:	f7fd fbeb 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    5276:	4a07      	ldr	r2, [pc, #28]	; (5294 <opcode_0x13()+0x60>)
    5278:	4b07      	ldr	r3, [pc, #28]	; (5298 <opcode_0x13()+0x64>)
    527a:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    527e:	881b      	ldrh	r3, [r3, #0]
    5280:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    5282:	b280      	uxth	r0, r0
    5284:	b002      	add	sp, #8
    5286:	bd10      	pop	{r4, pc}
    5288:	20004990 	.word	0x20004990
    528c:	2001889f 	.word	0x2001889f
    5290:	20018886 	.word	0x20018886
    5294:	20015418 	.word	0x20015418
    5298:	20018888 	.word	0x20018888

0000529c <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    529c:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    529e:	4c14      	ldr	r4, [pc, #80]	; (52f0 <opcode_0x0F()+0x54>)
uint16_t opcode_0x0F() {
    52a0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    52a2:	f7fd fd4f 	bl	2d44 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    52a6:	0602      	lsls	r2, r0, #24
    52a8:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    52aa:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    52ae:	4a11      	ldr	r2, [pc, #68]	; (52f4 <opcode_0x0F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    52b0:	bf4c      	ite	mi
    52b2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    52b6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    52ba:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    52bc:	b2c9      	uxtb	r1, r1
    52be:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    52c0:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    52c2:	4c0d      	ldr	r4, [pc, #52]	; (52f8 <opcode_0x0F()+0x5c>)
    52c4:	9101      	str	r1, [sp, #4]
    52c6:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    52c8:	f7fd fcc8 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    52cc:	8820      	ldrh	r0, [r4, #0]
    52ce:	9901      	ldr	r1, [sp, #4]
    52d0:	f7fd fbbc 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    52d4:	8820      	ldrh	r0, [r4, #0]
    52d6:	9901      	ldr	r1, [sp, #4]
    52d8:	f7fd fbb8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    52dc:	4a07      	ldr	r2, [pc, #28]	; (52fc <opcode_0x0F()+0x60>)
    52de:	4b08      	ldr	r3, [pc, #32]	; (5300 <opcode_0x0F()+0x64>)
    52e0:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    52e4:	881b      	ldrh	r3, [r3, #0]
    52e6:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    52e8:	b280      	uxth	r0, r0
    52ea:	b002      	add	sp, #8
    52ec:	bd10      	pop	{r4, pc}
    52ee:	bf00      	nop
    52f0:	20004990 	.word	0x20004990
    52f4:	2001889f 	.word	0x2001889f
    52f8:	20018886 	.word	0x20018886
    52fc:	20015418 	.word	0x20015418
    5300:	20018888 	.word	0x20018888

00005304 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    5304:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5306:	4c14      	ldr	r4, [pc, #80]	; (5358 <opcode_0x1F()+0x54>)
uint16_t opcode_0x1F() {
    5308:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    530a:	2001      	movs	r0, #1
    530c:	f7fd fd36 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5310:	7823      	ldrb	r3, [r4, #0]
    5312:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5314:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5318:	4a10      	ldr	r2, [pc, #64]	; (535c <opcode_0x1F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    531a:	bf4c      	ite	mi
    531c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5320:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5324:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5326:	b2c9      	uxtb	r1, r1
    5328:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    532a:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    532c:	4c0c      	ldr	r4, [pc, #48]	; (5360 <opcode_0x1F()+0x5c>)
    532e:	9101      	str	r1, [sp, #4]
    5330:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5332:	f7fd fc93 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5336:	8820      	ldrh	r0, [r4, #0]
    5338:	9901      	ldr	r1, [sp, #4]
    533a:	f7fd fb87 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    533e:	8820      	ldrh	r0, [r4, #0]
    5340:	9901      	ldr	r1, [sp, #4]
    5342:	f7fd fb83 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    5346:	4a07      	ldr	r2, [pc, #28]	; (5364 <opcode_0x1F()+0x60>)
    5348:	4b07      	ldr	r3, [pc, #28]	; (5368 <opcode_0x1F()+0x64>)
    534a:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    534e:	881b      	ldrh	r3, [r3, #0]
    5350:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    5352:	b280      	uxth	r0, r0
    5354:	b002      	add	sp, #8
    5356:	bd10      	pop	{r4, pc}
    5358:	20004990 	.word	0x20004990
    535c:	2001889f 	.word	0x2001889f
    5360:	20018886 	.word	0x20018886
    5364:	20015418 	.word	0x20015418
    5368:	20018888 	.word	0x20018888

0000536c <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    536c:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    536e:	4c14      	ldr	r4, [pc, #80]	; (53c0 <opcode_0x1B()+0x54>)
uint16_t opcode_0x1B() {
    5370:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    5372:	2001      	movs	r0, #1
    5374:	f7fd fd32 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5378:	7823      	ldrb	r3, [r4, #0]
    537a:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    537c:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5380:	4a10      	ldr	r2, [pc, #64]	; (53c4 <opcode_0x1B()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5382:	bf4c      	ite	mi
    5384:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5388:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    538c:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    538e:	b2c9      	uxtb	r1, r1
    5390:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5392:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5394:	4c0c      	ldr	r4, [pc, #48]	; (53c8 <opcode_0x1B()+0x5c>)
    5396:	9101      	str	r1, [sp, #4]
    5398:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    539a:	f7fd fc5f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    539e:	8820      	ldrh	r0, [r4, #0]
    53a0:	9901      	ldr	r1, [sp, #4]
    53a2:	f7fd fb53 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    53a6:	8820      	ldrh	r0, [r4, #0]
    53a8:	9901      	ldr	r1, [sp, #4]
    53aa:	f7fd fb4f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    53ae:	4a07      	ldr	r2, [pc, #28]	; (53cc <opcode_0x1B()+0x60>)
    53b0:	4b07      	ldr	r3, [pc, #28]	; (53d0 <opcode_0x1B()+0x64>)
    53b2:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    53b6:	881b      	ldrh	r3, [r3, #0]
    53b8:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    53ba:	b280      	uxth	r0, r0
    53bc:	b002      	add	sp, #8
    53be:	bd10      	pop	{r4, pc}
    53c0:	20004990 	.word	0x20004990
    53c4:	2001889f 	.word	0x2001889f
    53c8:	20018886 	.word	0x20018886
    53cc:	20015418 	.word	0x20015418
    53d0:	20018888 	.word	0x20018888

000053d4 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    53d4:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    53d6:	4d1a      	ldr	r5, [pc, #104]	; (5440 <opcode_0x27()+0x6c>)
    53d8:	b083      	sub	sp, #12
    53da:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    53dc:	4c19      	ldr	r4, [pc, #100]	; (5444 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    53de:	8828      	ldrh	r0, [r5, #0]
    53e0:	3001      	adds	r0, #1
    53e2:	b280      	uxth	r0, r0
    53e4:	f7fd f976 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    53e8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    53ea:	b280      	uxth	r0, r0
    53ec:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    53ee:	f7fd f971 	bl	26d4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    53f2:	4915      	ldr	r1, [pc, #84]	; (5448 <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    53f4:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    53f8:	780a      	ldrb	r2, [r1, #0]
    53fa:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    53fe:	bf14      	ite	ne
    5400:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5404:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5408:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    540c:	4b0f      	ldr	r3, [pc, #60]	; (544c <opcode_0x27()+0x78>)
    540e:	700a      	strb	r2, [r1, #0]
    5410:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5412:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5414:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    5416:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5418:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    541a:	f7fd fc1f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    541e:	9901      	ldr	r1, [sp, #4]
    5420:	8820      	ldrh	r0, [r4, #0]
    5422:	f7fd fb13 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5426:	8820      	ldrh	r0, [r4, #0]
    5428:	9901      	ldr	r1, [sp, #4]
    542a:	f7fd fb0f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    542e:	4a08      	ldr	r2, [pc, #32]	; (5450 <opcode_0x27()+0x7c>)
    5430:	882b      	ldrh	r3, [r5, #0]
    5432:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    5436:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    5438:	b280      	uxth	r0, r0
    543a:	b003      	add	sp, #12
    543c:	bd30      	pop	{r4, r5, pc}
    543e:	bf00      	nop
    5440:	20018888 	.word	0x20018888
    5444:	20018886 	.word	0x20018886
    5448:	20004990 	.word	0x20004990
    544c:	2001889f 	.word	0x2001889f
    5450:	20015418 	.word	0x20015418

00005454 <opcode_0x37()>:
uint16_t opcode_0x37() {
    5454:	b530      	push	{r4, r5, lr}
    5456:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    5458:	4d14      	ldr	r5, [pc, #80]	; (54ac <opcode_0x37()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    545a:	f7fd fc33 	bl	2cc4 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    545e:	4914      	ldr	r1, [pc, #80]	; (54b0 <opcode_0x37()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5460:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5462:	4c14      	ldr	r4, [pc, #80]	; (54b4 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5464:	780a      	ldrb	r2, [r1, #0]
    5466:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    546a:	bf4c      	ite	mi
    546c:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5470:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5474:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5478:	782b      	ldrb	r3, [r5, #0]
    547a:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    547c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    547e:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5480:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5482:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5484:	f7fd fbea 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5488:	8820      	ldrh	r0, [r4, #0]
    548a:	9901      	ldr	r1, [sp, #4]
    548c:	f7fd fade 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5490:	8820      	ldrh	r0, [r4, #0]
    5492:	9901      	ldr	r1, [sp, #4]
    5494:	f7fd fada 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    5498:	4a07      	ldr	r2, [pc, #28]	; (54b8 <opcode_0x37()+0x64>)
    549a:	4b08      	ldr	r3, [pc, #32]	; (54bc <opcode_0x37()+0x68>)
    549c:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    54a4:	b280      	uxth	r0, r0
    54a6:	b003      	add	sp, #12
    54a8:	bd30      	pop	{r4, r5, pc}
    54aa:	bf00      	nop
    54ac:	2001889f 	.word	0x2001889f
    54b0:	20004990 	.word	0x20004990
    54b4:	20018886 	.word	0x20018886
    54b8:	20015418 	.word	0x20015418
    54bc:	20018888 	.word	0x20018888

000054c0 <opcode_0x23()>:
uint16_t opcode_0x23() {
    54c0:	b530      	push	{r4, r5, lr}
    54c2:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    54c4:	4d14      	ldr	r5, [pc, #80]	; (5518 <opcode_0x23()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    54c6:	f7fd fcb9 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    54ca:	4914      	ldr	r1, [pc, #80]	; (551c <opcode_0x23()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    54cc:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    54ce:	4c14      	ldr	r4, [pc, #80]	; (5520 <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    54d0:	780a      	ldrb	r2, [r1, #0]
    54d2:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    54d6:	bf4c      	ite	mi
    54d8:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    54dc:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    54e0:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    54e4:	782b      	ldrb	r3, [r5, #0]
    54e6:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    54e8:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    54ea:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    54ec:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    54ee:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    54f0:	f7fd fbb4 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    54f4:	8820      	ldrh	r0, [r4, #0]
    54f6:	9901      	ldr	r1, [sp, #4]
    54f8:	f7fd faa8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    54fc:	8820      	ldrh	r0, [r4, #0]
    54fe:	9901      	ldr	r1, [sp, #4]
    5500:	f7fd faa4 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    5504:	4a07      	ldr	r2, [pc, #28]	; (5524 <opcode_0x23()+0x64>)
    5506:	4b08      	ldr	r3, [pc, #32]	; (5528 <opcode_0x23()+0x68>)
    5508:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    550c:	881b      	ldrh	r3, [r3, #0]
    550e:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    5510:	b280      	uxth	r0, r0
    5512:	b003      	add	sp, #12
    5514:	bd30      	pop	{r4, r5, pc}
    5516:	bf00      	nop
    5518:	2001889f 	.word	0x2001889f
    551c:	20004990 	.word	0x20004990
    5520:	20018886 	.word	0x20018886
    5524:	20015418 	.word	0x20015418
    5528:	20018888 	.word	0x20018888

0000552c <opcode_0x33()>:
uint16_t opcode_0x33() {
    552c:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    552e:	2001      	movs	r0, #1
uint16_t opcode_0x33() {
    5530:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5532:	f7fd fcad 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5536:	4913      	ldr	r1, [pc, #76]	; (5584 <opcode_0x33()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5538:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    553a:	4d13      	ldr	r5, [pc, #76]	; (5588 <opcode_0x33()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    553c:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    553e:	4c13      	ldr	r4, [pc, #76]	; (558c <opcode_0x33()+0x60>)
    5540:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5544:	bf4c      	ite	mi
    5546:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    554a:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    554e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5552:	782b      	ldrb	r3, [r5, #0]
    5554:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5556:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5558:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    555a:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    555c:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    555e:	f7fd fb7d 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5562:	8820      	ldrh	r0, [r4, #0]
    5564:	9901      	ldr	r1, [sp, #4]
    5566:	f7fd fa71 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    556a:	8820      	ldrh	r0, [r4, #0]
    556c:	9901      	ldr	r1, [sp, #4]
    556e:	f7fd fa6d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    5572:	4a07      	ldr	r2, [pc, #28]	; (5590 <opcode_0x33()+0x64>)
    5574:	4b07      	ldr	r3, [pc, #28]	; (5594 <opcode_0x33()+0x68>)
    5576:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    557a:	881b      	ldrh	r3, [r3, #0]
    557c:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    557e:	b280      	uxth	r0, r0
    5580:	b003      	add	sp, #12
    5582:	bd30      	pop	{r4, r5, pc}
    5584:	20004990 	.word	0x20004990
    5588:	2001889f 	.word	0x2001889f
    558c:	20018886 	.word	0x20018886
    5590:	20015418 	.word	0x20015418
    5594:	20018888 	.word	0x20018888

00005598 <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    5598:	b530      	push	{r4, r5, lr}
    559a:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    559c:	4d14      	ldr	r5, [pc, #80]	; (55f0 <opcode_0x2F()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    559e:	f7fd fbd1 	bl	2d44 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    55a2:	4914      	ldr	r1, [pc, #80]	; (55f4 <opcode_0x2F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    55a4:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    55a6:	4c14      	ldr	r4, [pc, #80]	; (55f8 <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    55a8:	780a      	ldrb	r2, [r1, #0]
    55aa:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    55ae:	bf4c      	ite	mi
    55b0:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    55b4:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    55b8:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    55bc:	782b      	ldrb	r3, [r5, #0]
    55be:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    55c0:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    55c2:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    55c4:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    55c6:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    55c8:	f7fd fb48 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    55cc:	8820      	ldrh	r0, [r4, #0]
    55ce:	9901      	ldr	r1, [sp, #4]
    55d0:	f7fd fa3c 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55d4:	8820      	ldrh	r0, [r4, #0]
    55d6:	9901      	ldr	r1, [sp, #4]
    55d8:	f7fd fa38 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    55dc:	4a07      	ldr	r2, [pc, #28]	; (55fc <opcode_0x2F()+0x64>)
    55de:	4b08      	ldr	r3, [pc, #32]	; (5600 <opcode_0x2F()+0x68>)
    55e0:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    55e4:	881b      	ldrh	r3, [r3, #0]
    55e6:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    55e8:	b280      	uxth	r0, r0
    55ea:	b003      	add	sp, #12
    55ec:	bd30      	pop	{r4, r5, pc}
    55ee:	bf00      	nop
    55f0:	2001889f 	.word	0x2001889f
    55f4:	20004990 	.word	0x20004990
    55f8:	20018886 	.word	0x20018886
    55fc:	20015418 	.word	0x20015418
    5600:	20018888 	.word	0x20018888

00005604 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    5604:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    5606:	2001      	movs	r0, #1
uint16_t opcode_0x3F() {
    5608:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    560a:	f7fd fbb7 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    560e:	4913      	ldr	r1, [pc, #76]	; (565c <opcode_0x3F()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5610:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    5612:	4d13      	ldr	r5, [pc, #76]	; (5660 <opcode_0x3F()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5614:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5616:	4c13      	ldr	r4, [pc, #76]	; (5664 <opcode_0x3F()+0x60>)
    5618:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    561c:	bf4c      	ite	mi
    561e:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5622:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5626:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    562a:	782b      	ldrb	r3, [r5, #0]
    562c:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    562e:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5630:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5632:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5634:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5636:	f7fd fb11 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    563a:	8820      	ldrh	r0, [r4, #0]
    563c:	9901      	ldr	r1, [sp, #4]
    563e:	f7fd fa05 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5642:	8820      	ldrh	r0, [r4, #0]
    5644:	9901      	ldr	r1, [sp, #4]
    5646:	f7fd fa01 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    564a:	4a07      	ldr	r2, [pc, #28]	; (5668 <opcode_0x3F()+0x64>)
    564c:	4b07      	ldr	r3, [pc, #28]	; (566c <opcode_0x3F()+0x68>)
    564e:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    5652:	881b      	ldrh	r3, [r3, #0]
    5654:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    5656:	b280      	uxth	r0, r0
    5658:	b003      	add	sp, #12
    565a:	bd30      	pop	{r4, r5, pc}
    565c:	20004990 	.word	0x20004990
    5660:	2001889f 	.word	0x2001889f
    5664:	20018886 	.word	0x20018886
    5668:	20015418 	.word	0x20015418
    566c:	20018888 	.word	0x20018888

00005670 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    5670:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    5672:	2001      	movs	r0, #1
uint16_t opcode_0x3B() {
    5674:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    5676:	f7fd fbb1 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    567a:	4913      	ldr	r1, [pc, #76]	; (56c8 <opcode_0x3B()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    567c:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    567e:	4d13      	ldr	r5, [pc, #76]	; (56cc <opcode_0x3B()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5680:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5682:	4c13      	ldr	r4, [pc, #76]	; (56d0 <opcode_0x3B()+0x60>)
    5684:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5688:	bf4c      	ite	mi
    568a:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    568e:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5692:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5696:	782b      	ldrb	r3, [r5, #0]
    5698:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    569a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    569c:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    569e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    56a0:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    56a2:	f7fd fadb 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    56a6:	8820      	ldrh	r0, [r4, #0]
    56a8:	9901      	ldr	r1, [sp, #4]
    56aa:	f7fd f9cf 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    56ae:	8820      	ldrh	r0, [r4, #0]
    56b0:	9901      	ldr	r1, [sp, #4]
    56b2:	f7fd f9cb 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    56b6:	4a07      	ldr	r2, [pc, #28]	; (56d4 <opcode_0x3B()+0x64>)
    56b8:	4b07      	ldr	r3, [pc, #28]	; (56d8 <opcode_0x3B()+0x68>)
    56ba:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    56c2:	b280      	uxth	r0, r0
    56c4:	b003      	add	sp, #12
    56c6:	bd30      	pop	{r4, r5, pc}
    56c8:	20004990 	.word	0x20004990
    56cc:	2001889f 	.word	0x2001889f
    56d0:	20018886 	.word	0x20018886
    56d4:	20015418 	.word	0x20015418
    56d8:	20018888 	.word	0x20018888

000056dc <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    56dc:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    56de:	4d18      	ldr	r5, [pc, #96]	; (5740 <opcode_0x47()+0x64>)
    56e0:	b083      	sub	sp, #12
    56e2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    56e4:	4c17      	ldr	r4, [pc, #92]	; (5744 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    56e6:	8828      	ldrh	r0, [r5, #0]
    56e8:	3001      	adds	r0, #1
    56ea:	b280      	uxth	r0, r0
    56ec:	f7fc fff2 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    56f0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    56f2:	b280      	uxth	r0, r0
    56f4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    56f6:	f7fc ffed 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56fa:	4a13      	ldr	r2, [pc, #76]	; (5748 <opcode_0x47()+0x6c>)
    56fc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    56fe:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5702:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5704:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5706:	bf4c      	ite	mi
    5708:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    570c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5710:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5712:	4b0e      	ldr	r3, [pc, #56]	; (574c <opcode_0x47()+0x70>)
    5714:	7818      	ldrb	r0, [r3, #0]
    5716:	4048      	eors	r0, r1
    5718:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    571a:	f7fd fa9f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    571e:	9901      	ldr	r1, [sp, #4]
    5720:	8820      	ldrh	r0, [r4, #0]
    5722:	f7fd f993 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5726:	8820      	ldrh	r0, [r4, #0]
    5728:	9901      	ldr	r1, [sp, #4]
    572a:	f7fd f98f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    572e:	4a08      	ldr	r2, [pc, #32]	; (5750 <opcode_0x47()+0x74>)
    5730:	882b      	ldrh	r3, [r5, #0]
    5732:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    5736:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    5738:	b280      	uxth	r0, r0
    573a:	b003      	add	sp, #12
    573c:	bd30      	pop	{r4, r5, pc}
    573e:	bf00      	nop
    5740:	20018888 	.word	0x20018888
    5744:	20018886 	.word	0x20018886
    5748:	20004990 	.word	0x20004990
    574c:	2001889f 	.word	0x2001889f
    5750:	20015418 	.word	0x20015418

00005754 <opcode_0x57()>:
uint16_t opcode_0x57() {
    5754:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5756:	4c13      	ldr	r4, [pc, #76]	; (57a4 <opcode_0x57()+0x50>)
uint16_t opcode_0x57() {
    5758:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    575a:	f7fd fab3 	bl	2cc4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    575e:	07c2      	lsls	r2, r0, #31
    5760:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5762:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5766:	4a10      	ldr	r2, [pc, #64]	; (57a8 <opcode_0x57()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5768:	bf4c      	ite	mi
    576a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    576e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5772:	7810      	ldrb	r0, [r2, #0]
    5774:	7023      	strb	r3, [r4, #0]
    5776:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5778:	4c0c      	ldr	r4, [pc, #48]	; (57ac <opcode_0x57()+0x58>)
    577a:	9101      	str	r1, [sp, #4]
    577c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    577e:	f7fd fa6d 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5782:	8820      	ldrh	r0, [r4, #0]
    5784:	9901      	ldr	r1, [sp, #4]
    5786:	f7fd f961 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    578a:	8820      	ldrh	r0, [r4, #0]
    578c:	9901      	ldr	r1, [sp, #4]
    578e:	f7fd f95d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    5792:	4a07      	ldr	r2, [pc, #28]	; (57b0 <opcode_0x57()+0x5c>)
    5794:	4b07      	ldr	r3, [pc, #28]	; (57b4 <opcode_0x57()+0x60>)
    5796:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    579a:	881b      	ldrh	r3, [r3, #0]
    579c:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    579e:	b280      	uxth	r0, r0
    57a0:	b002      	add	sp, #8
    57a2:	bd10      	pop	{r4, pc}
    57a4:	20004990 	.word	0x20004990
    57a8:	2001889f 	.word	0x2001889f
    57ac:	20018886 	.word	0x20018886
    57b0:	20016418 	.word	0x20016418
    57b4:	20018888 	.word	0x20018888

000057b8 <opcode_0x43()>:
uint16_t opcode_0x43() {
    57b8:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    57ba:	4c13      	ldr	r4, [pc, #76]	; (5808 <opcode_0x43()+0x50>)
uint16_t opcode_0x43() {
    57bc:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    57be:	f7fd fb3d 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    57c2:	07c2      	lsls	r2, r0, #31
    57c4:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    57c6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    57ca:	4a10      	ldr	r2, [pc, #64]	; (580c <opcode_0x43()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    57cc:	bf4c      	ite	mi
    57ce:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    57d2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    57d6:	7810      	ldrb	r0, [r2, #0]
    57d8:	7023      	strb	r3, [r4, #0]
    57da:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    57dc:	4c0c      	ldr	r4, [pc, #48]	; (5810 <opcode_0x43()+0x58>)
    57de:	9101      	str	r1, [sp, #4]
    57e0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    57e2:	f7fd fa3b 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    57e6:	8820      	ldrh	r0, [r4, #0]
    57e8:	9901      	ldr	r1, [sp, #4]
    57ea:	f7fd f92f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    57ee:	8820      	ldrh	r0, [r4, #0]
    57f0:	9901      	ldr	r1, [sp, #4]
    57f2:	f7fd f92b 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    57f6:	4a07      	ldr	r2, [pc, #28]	; (5814 <opcode_0x43()+0x5c>)
    57f8:	4b07      	ldr	r3, [pc, #28]	; (5818 <opcode_0x43()+0x60>)
    57fa:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    57fe:	881b      	ldrh	r3, [r3, #0]
    5800:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    5802:	b280      	uxth	r0, r0
    5804:	b002      	add	sp, #8
    5806:	bd10      	pop	{r4, pc}
    5808:	20004990 	.word	0x20004990
    580c:	2001889f 	.word	0x2001889f
    5810:	20018886 	.word	0x20018886
    5814:	20015418 	.word	0x20015418
    5818:	20018888 	.word	0x20018888

0000581c <opcode_0x53()>:
uint16_t opcode_0x53() {
    581c:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    581e:	4c14      	ldr	r4, [pc, #80]	; (5870 <opcode_0x53()+0x54>)
uint16_t opcode_0x53() {
    5820:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    5822:	2001      	movs	r0, #1
    5824:	f7fd fb34 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5828:	7823      	ldrb	r3, [r4, #0]
    582a:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    582c:	4a11      	ldr	r2, [pc, #68]	; (5874 <opcode_0x53()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    582e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5832:	bf4c      	ite	mi
    5834:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5838:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    583c:	7810      	ldrb	r0, [r2, #0]
    583e:	7023      	strb	r3, [r4, #0]
    5840:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5842:	4c0d      	ldr	r4, [pc, #52]	; (5878 <opcode_0x53()+0x5c>)
    5844:	9101      	str	r1, [sp, #4]
    5846:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5848:	f7fd fa08 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    584c:	8820      	ldrh	r0, [r4, #0]
    584e:	9901      	ldr	r1, [sp, #4]
    5850:	f7fd f8fc 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5854:	8820      	ldrh	r0, [r4, #0]
    5856:	9901      	ldr	r1, [sp, #4]
    5858:	f7fd f8f8 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    585c:	4a07      	ldr	r2, [pc, #28]	; (587c <opcode_0x53()+0x60>)
    585e:	4b08      	ldr	r3, [pc, #32]	; (5880 <opcode_0x53()+0x64>)
    5860:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    5864:	881b      	ldrh	r3, [r3, #0]
    5866:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    5868:	b280      	uxth	r0, r0
    586a:	b002      	add	sp, #8
    586c:	bd10      	pop	{r4, pc}
    586e:	bf00      	nop
    5870:	20004990 	.word	0x20004990
    5874:	2001889f 	.word	0x2001889f
    5878:	20018886 	.word	0x20018886
    587c:	20016418 	.word	0x20016418
    5880:	20018888 	.word	0x20018888

00005884 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    5884:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5886:	4c13      	ldr	r4, [pc, #76]	; (58d4 <opcode_0x4F()+0x50>)
uint16_t opcode_0x4F() {
    5888:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    588a:	f7fd fa5b 	bl	2d44 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    588e:	07c2      	lsls	r2, r0, #31
    5890:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5892:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5896:	4a10      	ldr	r2, [pc, #64]	; (58d8 <opcode_0x4F()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5898:	bf4c      	ite	mi
    589a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    589e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    58a2:	7810      	ldrb	r0, [r2, #0]
    58a4:	7023      	strb	r3, [r4, #0]
    58a6:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    58a8:	4c0c      	ldr	r4, [pc, #48]	; (58dc <opcode_0x4F()+0x58>)
    58aa:	9101      	str	r1, [sp, #4]
    58ac:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    58ae:	f7fd f9d5 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    58b2:	8820      	ldrh	r0, [r4, #0]
    58b4:	9901      	ldr	r1, [sp, #4]
    58b6:	f7fd f8c9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58ba:	8820      	ldrh	r0, [r4, #0]
    58bc:	9901      	ldr	r1, [sp, #4]
    58be:	f7fd f8c5 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    58c2:	4a07      	ldr	r2, [pc, #28]	; (58e0 <opcode_0x4F()+0x5c>)
    58c4:	4b07      	ldr	r3, [pc, #28]	; (58e4 <opcode_0x4F()+0x60>)
    58c6:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    58ca:	881b      	ldrh	r3, [r3, #0]
    58cc:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    58ce:	b280      	uxth	r0, r0
    58d0:	b002      	add	sp, #8
    58d2:	bd10      	pop	{r4, pc}
    58d4:	20004990 	.word	0x20004990
    58d8:	2001889f 	.word	0x2001889f
    58dc:	20018886 	.word	0x20018886
    58e0:	20016418 	.word	0x20016418
    58e4:	20018888 	.word	0x20018888

000058e8 <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    58e8:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    58ea:	4c14      	ldr	r4, [pc, #80]	; (593c <opcode_0x5F()+0x54>)
uint16_t opcode_0x5F() {
    58ec:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    58ee:	2001      	movs	r0, #1
    58f0:	f7fd fa44 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    58f4:	7823      	ldrb	r3, [r4, #0]
    58f6:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    58f8:	4a11      	ldr	r2, [pc, #68]	; (5940 <opcode_0x5F()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    58fa:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    58fe:	bf4c      	ite	mi
    5900:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5904:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5908:	7810      	ldrb	r0, [r2, #0]
    590a:	7023      	strb	r3, [r4, #0]
    590c:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    590e:	4c0d      	ldr	r4, [pc, #52]	; (5944 <opcode_0x5F()+0x5c>)
    5910:	9101      	str	r1, [sp, #4]
    5912:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5914:	f7fd f9a2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5918:	8820      	ldrh	r0, [r4, #0]
    591a:	9901      	ldr	r1, [sp, #4]
    591c:	f7fd f896 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5920:	8820      	ldrh	r0, [r4, #0]
    5922:	9901      	ldr	r1, [sp, #4]
    5924:	f7fd f892 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    5928:	4a07      	ldr	r2, [pc, #28]	; (5948 <opcode_0x5F()+0x60>)
    592a:	4b08      	ldr	r3, [pc, #32]	; (594c <opcode_0x5F()+0x64>)
    592c:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    5930:	881b      	ldrh	r3, [r3, #0]
    5932:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    5934:	b280      	uxth	r0, r0
    5936:	b002      	add	sp, #8
    5938:	bd10      	pop	{r4, pc}
    593a:	bf00      	nop
    593c:	20004990 	.word	0x20004990
    5940:	2001889f 	.word	0x2001889f
    5944:	20018886 	.word	0x20018886
    5948:	20016418 	.word	0x20016418
    594c:	20018888 	.word	0x20018888

00005950 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    5950:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5952:	4c14      	ldr	r4, [pc, #80]	; (59a4 <opcode_0x5B()+0x54>)
uint16_t opcode_0x5B() {
    5954:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    5956:	2001      	movs	r0, #1
    5958:	f7fd fa40 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    595c:	7823      	ldrb	r3, [r4, #0]
    595e:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5960:	4a11      	ldr	r2, [pc, #68]	; (59a8 <opcode_0x5B()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5962:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5966:	bf4c      	ite	mi
    5968:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    596c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5970:	7810      	ldrb	r0, [r2, #0]
    5972:	7023      	strb	r3, [r4, #0]
    5974:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5976:	4c0d      	ldr	r4, [pc, #52]	; (59ac <opcode_0x5B()+0x5c>)
    5978:	9101      	str	r1, [sp, #4]
    597a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    597c:	f7fd f96e 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5980:	8820      	ldrh	r0, [r4, #0]
    5982:	9901      	ldr	r1, [sp, #4]
    5984:	f7fd f862 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5988:	8820      	ldrh	r0, [r4, #0]
    598a:	9901      	ldr	r1, [sp, #4]
    598c:	f7fd f85e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    5990:	4a07      	ldr	r2, [pc, #28]	; (59b0 <opcode_0x5B()+0x60>)
    5992:	4b08      	ldr	r3, [pc, #32]	; (59b4 <opcode_0x5B()+0x64>)
    5994:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    5998:	881b      	ldrh	r3, [r3, #0]
    599a:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    599c:	b280      	uxth	r0, r0
    599e:	b002      	add	sp, #8
    59a0:	bd10      	pop	{r4, pc}
    59a2:	bf00      	nop
    59a4:	20004990 	.word	0x20004990
    59a8:	2001889f 	.word	0x2001889f
    59ac:	20018886 	.word	0x20018886
    59b0:	20016418 	.word	0x20016418
    59b4:	20018888 	.word	0x20018888

000059b8 <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    59b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    59ba:	4e16      	ldr	r6, [pc, #88]	; (5a14 <opcode_0x67()+0x5c>)
    59bc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    59be:	4d16      	ldr	r5, [pc, #88]	; (5a18 <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    59c0:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    59c2:	4f16      	ldr	r7, [pc, #88]	; (5a1c <opcode_0x67()+0x64>)
    59c4:	3001      	adds	r0, #1
    59c6:	b280      	uxth	r0, r0
    59c8:	f7fc fe84 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    59cc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    59ce:	b280      	uxth	r0, r0
    59d0:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    59d2:	f7fc fe7f 	bl	26d4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59d6:	4a12      	ldr	r2, [pc, #72]	; (5a20 <opcode_0x67()+0x68>)
    59d8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    59da:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    59de:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59e0:	7813      	ldrb	r3, [r2, #0]
    59e2:	4621      	mov	r1, r4
    global_temp = local_data;
    59e4:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    59e6:	bf4c      	ite	mi
    59e8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59ec:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    59f0:	7013      	strb	r3, [r2, #0]
    59f2:	f7fd f82b 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59f6:	4621      	mov	r1, r4
    59f8:	8828      	ldrh	r0, [r5, #0]
    59fa:	f7fd f827 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    59fe:	7838      	ldrb	r0, [r7, #0]
    5a00:	f7fd fefc 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    5a04:	4a07      	ldr	r2, [pc, #28]	; (5a24 <opcode_0x67()+0x6c>)
    5a06:	8833      	ldrh	r3, [r6, #0]
    5a08:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    5a0c:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    5a0e:	b280      	uxth	r0, r0
    5a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a12:	bf00      	nop
    5a14:	20018888 	.word	0x20018888
    5a18:	20018886 	.word	0x20018886
    5a1c:	2001889c 	.word	0x2001889c
    5a20:	20004990 	.word	0x20004990
    5a24:	20016418 	.word	0x20016418

00005a28 <opcode_0x77()>:
uint16_t opcode_0x77() {
    5a28:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    5a2a:	f7fd f94b 	bl	2cc4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a2e:	4a10      	ldr	r2, [pc, #64]	; (5a70 <opcode_0x77()+0x48>)
    5a30:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5a32:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a36:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5a38:	4e0e      	ldr	r6, [pc, #56]	; (5a74 <opcode_0x77()+0x4c>)
    5a3a:	4621      	mov	r1, r4
    5a3c:	bf4c      	ite	mi
    5a3e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a42:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5a46:	4d0c      	ldr	r5, [pc, #48]	; (5a78 <opcode_0x77()+0x50>)
    5a48:	8830      	ldrh	r0, [r6, #0]
    5a4a:	7013      	strb	r3, [r2, #0]
    5a4c:	702c      	strb	r4, [r5, #0]
    5a4e:	f7fc fffd 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a52:	4621      	mov	r1, r4
    5a54:	8830      	ldrh	r0, [r6, #0]
    5a56:	f7fc fff9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5a5a:	7828      	ldrb	r0, [r5, #0]
    5a5c:	f7fd fece 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    5a60:	4a06      	ldr	r2, [pc, #24]	; (5a7c <opcode_0x77()+0x54>)
    5a62:	4b07      	ldr	r3, [pc, #28]	; (5a80 <opcode_0x77()+0x58>)
    5a64:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    5a68:	881b      	ldrh	r3, [r3, #0]
    5a6a:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    5a6c:	b280      	uxth	r0, r0
    5a6e:	bd70      	pop	{r4, r5, r6, pc}
    5a70:	20004990 	.word	0x20004990
    5a74:	20018886 	.word	0x20018886
    5a78:	2001889c 	.word	0x2001889c
    5a7c:	20016418 	.word	0x20016418
    5a80:	20018888 	.word	0x20018888

00005a84 <opcode_0x63()>:
uint16_t opcode_0x63() {
    5a84:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    5a86:	f7fd f9d9 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a8a:	4a10      	ldr	r2, [pc, #64]	; (5acc <opcode_0x63()+0x48>)
    5a8c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5a8e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a92:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5a94:	4e0e      	ldr	r6, [pc, #56]	; (5ad0 <opcode_0x63()+0x4c>)
    5a96:	4621      	mov	r1, r4
    5a98:	bf4c      	ite	mi
    5a9a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a9e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5aa2:	4d0c      	ldr	r5, [pc, #48]	; (5ad4 <opcode_0x63()+0x50>)
    5aa4:	8830      	ldrh	r0, [r6, #0]
    5aa6:	7013      	strb	r3, [r2, #0]
    5aa8:	702c      	strb	r4, [r5, #0]
    5aaa:	f7fc ffcf 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5aae:	4621      	mov	r1, r4
    5ab0:	8830      	ldrh	r0, [r6, #0]
    5ab2:	f7fc ffcb 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5ab6:	7828      	ldrb	r0, [r5, #0]
    5ab8:	f7fd fea0 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    5abc:	4a06      	ldr	r2, [pc, #24]	; (5ad8 <opcode_0x63()+0x54>)
    5abe:	4b07      	ldr	r3, [pc, #28]	; (5adc <opcode_0x63()+0x58>)
    5ac0:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    5ac4:	881b      	ldrh	r3, [r3, #0]
    5ac6:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    5ac8:	b280      	uxth	r0, r0
    5aca:	bd70      	pop	{r4, r5, r6, pc}
    5acc:	20004990 	.word	0x20004990
    5ad0:	20018886 	.word	0x20018886
    5ad4:	2001889c 	.word	0x2001889c
    5ad8:	20016418 	.word	0x20016418
    5adc:	20018888 	.word	0x20018888

00005ae0 <opcode_0x73()>:
uint16_t opcode_0x73() {
    5ae0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    5ae2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5ae4:	4e11      	ldr	r6, [pc, #68]	; (5b2c <opcode_0x73()+0x4c>)
    5ae6:	f7fd f9d3 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5aea:	4a11      	ldr	r2, [pc, #68]	; (5b30 <opcode_0x73()+0x50>)
    5aec:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5aee:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5af2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5af4:	4d0f      	ldr	r5, [pc, #60]	; (5b34 <opcode_0x73()+0x54>)
    5af6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5af8:	bf4c      	ite	mi
    5afa:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5afe:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5b02:	8830      	ldrh	r0, [r6, #0]
    5b04:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5b06:	702c      	strb	r4, [r5, #0]
    5b08:	f7fc ffa0 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b0c:	4621      	mov	r1, r4
    5b0e:	8830      	ldrh	r0, [r6, #0]
    5b10:	f7fc ff9c 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5b14:	7828      	ldrb	r0, [r5, #0]
    5b16:	f7fd fe71 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    5b1a:	4a07      	ldr	r2, [pc, #28]	; (5b38 <opcode_0x73()+0x58>)
    5b1c:	4b07      	ldr	r3, [pc, #28]	; (5b3c <opcode_0x73()+0x5c>)
    5b1e:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    5b22:	881b      	ldrh	r3, [r3, #0]
    5b24:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    5b26:	b280      	uxth	r0, r0
    5b28:	bd70      	pop	{r4, r5, r6, pc}
    5b2a:	bf00      	nop
    5b2c:	20018886 	.word	0x20018886
    5b30:	20004990 	.word	0x20004990
    5b34:	2001889c 	.word	0x2001889c
    5b38:	20016418 	.word	0x20016418
    5b3c:	20018888 	.word	0x20018888

00005b40 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    5b40:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    5b42:	f7fd f8ff 	bl	2d44 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b46:	4a10      	ldr	r2, [pc, #64]	; (5b88 <opcode_0x6F()+0x48>)
    5b48:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5b4a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b4e:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5b50:	4e0e      	ldr	r6, [pc, #56]	; (5b8c <opcode_0x6F()+0x4c>)
    5b52:	4621      	mov	r1, r4
    5b54:	bf4c      	ite	mi
    5b56:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b5a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5b5e:	4d0c      	ldr	r5, [pc, #48]	; (5b90 <opcode_0x6F()+0x50>)
    5b60:	8830      	ldrh	r0, [r6, #0]
    5b62:	7013      	strb	r3, [r2, #0]
    5b64:	702c      	strb	r4, [r5, #0]
    5b66:	f7fc ff71 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b6a:	4621      	mov	r1, r4
    5b6c:	8830      	ldrh	r0, [r6, #0]
    5b6e:	f7fc ff6d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5b72:	7828      	ldrb	r0, [r5, #0]
    5b74:	f7fd fe42 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    5b78:	4a06      	ldr	r2, [pc, #24]	; (5b94 <opcode_0x6F()+0x54>)
    5b7a:	4b07      	ldr	r3, [pc, #28]	; (5b98 <opcode_0x6F()+0x58>)
    5b7c:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    5b80:	881b      	ldrh	r3, [r3, #0]
    5b82:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    5b84:	b280      	uxth	r0, r0
    5b86:	bd70      	pop	{r4, r5, r6, pc}
    5b88:	20004990 	.word	0x20004990
    5b8c:	20018886 	.word	0x20018886
    5b90:	2001889c 	.word	0x2001889c
    5b94:	20016418 	.word	0x20016418
    5b98:	20018888 	.word	0x20018888

00005b9c <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    5b9c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    5b9e:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5ba0:	4e11      	ldr	r6, [pc, #68]	; (5be8 <opcode_0x7F()+0x4c>)
    5ba2:	f7fd f8eb 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ba6:	4a11      	ldr	r2, [pc, #68]	; (5bec <opcode_0x7F()+0x50>)
    5ba8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5baa:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bae:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5bb0:	4d0f      	ldr	r5, [pc, #60]	; (5bf0 <opcode_0x7F()+0x54>)
    5bb2:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bb4:	bf4c      	ite	mi
    5bb6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5bba:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5bbe:	8830      	ldrh	r0, [r6, #0]
    5bc0:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5bc2:	702c      	strb	r4, [r5, #0]
    5bc4:	f7fc ff42 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bc8:	4621      	mov	r1, r4
    5bca:	8830      	ldrh	r0, [r6, #0]
    5bcc:	f7fc ff3e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5bd0:	7828      	ldrb	r0, [r5, #0]
    5bd2:	f7fd fe13 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    5bd6:	4a07      	ldr	r2, [pc, #28]	; (5bf4 <opcode_0x7F()+0x58>)
    5bd8:	4b07      	ldr	r3, [pc, #28]	; (5bf8 <opcode_0x7F()+0x5c>)
    5bda:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    5bde:	881b      	ldrh	r3, [r3, #0]
    5be0:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    5be2:	b280      	uxth	r0, r0
    5be4:	bd70      	pop	{r4, r5, r6, pc}
    5be6:	bf00      	nop
    5be8:	20018886 	.word	0x20018886
    5bec:	20004990 	.word	0x20004990
    5bf0:	2001889c 	.word	0x2001889c
    5bf4:	20016418 	.word	0x20016418
    5bf8:	20018888 	.word	0x20018888

00005bfc <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    5bfc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    5bfe:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5c00:	4e11      	ldr	r6, [pc, #68]	; (5c48 <opcode_0x7B()+0x4c>)
    5c02:	f7fd f8eb 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c06:	4a11      	ldr	r2, [pc, #68]	; (5c4c <opcode_0x7B()+0x50>)
    5c08:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5c0a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c0e:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5c10:	4d0f      	ldr	r5, [pc, #60]	; (5c50 <opcode_0x7B()+0x54>)
    5c12:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c14:	bf4c      	ite	mi
    5c16:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c1a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5c1e:	8830      	ldrh	r0, [r6, #0]
    5c20:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5c22:	702c      	strb	r4, [r5, #0]
    5c24:	f7fc ff12 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c28:	4621      	mov	r1, r4
    5c2a:	8830      	ldrh	r0, [r6, #0]
    5c2c:	f7fc ff0e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5c30:	7828      	ldrb	r0, [r5, #0]
    5c32:	f7fd fde3 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    5c36:	4a07      	ldr	r2, [pc, #28]	; (5c54 <opcode_0x7B()+0x58>)
    5c38:	4b07      	ldr	r3, [pc, #28]	; (5c58 <opcode_0x7B()+0x5c>)
    5c3a:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    5c3e:	881b      	ldrh	r3, [r3, #0]
    5c40:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    5c42:	b280      	uxth	r0, r0
    5c44:	bd70      	pop	{r4, r5, r6, pc}
    5c46:	bf00      	nop
    5c48:	20018886 	.word	0x20018886
    5c4c:	20004990 	.word	0x20004990
    5c50:	2001889c 	.word	0x2001889c
    5c54:	20016418 	.word	0x20016418
    5c58:	20018888 	.word	0x20018888

00005c5c <opcode_0xC7()>:
} // 0xBF - LAX - Absolute , Y

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    5c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5c5e:	4d1a      	ldr	r5, [pc, #104]	; (5cc8 <opcode_0xC7()+0x6c>)
    5c60:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5c62:	4e1a      	ldr	r6, [pc, #104]	; (5ccc <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    5c64:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    5c66:	4f1a      	ldr	r7, [pc, #104]	; (5cd0 <opcode_0xC7()+0x74>)
    5c68:	3001      	adds	r0, #1
    5c6a:	b280      	uxth	r0, r0
    5c6c:	f7fc fd32 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5c70:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5c72:	b280      	uxth	r0, r0
    5c74:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    5c76:	f7fc fd2d 	bl	26d4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5c7a:	3801      	subs	r0, #1
    5c7c:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c7e:	4620      	mov	r0, r4
    global_temp = local_data;
    5c80:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5c82:	f7fc ffeb 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5c86:	4621      	mov	r1, r4
    5c88:	8830      	ldrh	r0, [r6, #0]
    5c8a:	f7fc fedf 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c8e:	4621      	mov	r1, r4
    5c90:	8830      	ldrh	r0, [r6, #0]
    5c92:	f7fc fedb 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5c96:	4b0f      	ldr	r3, [pc, #60]	; (5cd4 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    5c98:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    5c9a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5c9c:	4a0e      	ldr	r2, [pc, #56]	; (5cd8 <opcode_0xC7()+0x7c>)
    5c9e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ca0:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ca4:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ca6:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ca8:	bf94      	ite	ls
    5caa:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5cae:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5cb2:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5cb4:	f7fc ffd2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    5cb8:	4a08      	ldr	r2, [pc, #32]	; (5cdc <opcode_0xC7()+0x80>)
    5cba:	882b      	ldrh	r3, [r5, #0]
    5cbc:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    5cc0:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    5cc2:	b280      	uxth	r0, r0
    5cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cc6:	bf00      	nop
    5cc8:	20018888 	.word	0x20018888
    5ccc:	20018886 	.word	0x20018886
    5cd0:	2001889c 	.word	0x2001889c
    5cd4:	2001889f 	.word	0x2001889f
    5cd8:	20004990 	.word	0x20004990
    5cdc:	20017418 	.word	0x20017418

00005ce0 <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    5ce0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    5ce2:	f7fc ffef 	bl	2cc4 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    5ce6:	3801      	subs	r0, #1
    global_temp = local_data;
    5ce8:	4d13      	ldr	r5, [pc, #76]	; (5d38 <opcode_0xD7()+0x58>)
    local_data = local_data - 1;
    5cea:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5cec:	4e13      	ldr	r6, [pc, #76]	; (5d3c <opcode_0xD7()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5cee:	4620      	mov	r0, r4
    global_temp = local_data;
    5cf0:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5cf2:	f7fc ffb3 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5cf6:	8830      	ldrh	r0, [r6, #0]
    5cf8:	4621      	mov	r1, r4
    5cfa:	f7fc fea7 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5cfe:	4621      	mov	r1, r4
    5d00:	8830      	ldrh	r0, [r6, #0]
    5d02:	f7fc fea3 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5d06:	4b0e      	ldr	r3, [pc, #56]	; (5d40 <opcode_0xD7()+0x60>)
    Calculate_CMP(global_temp);
    5d08:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5d0a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d0c:	4a0d      	ldr	r2, [pc, #52]	; (5d44 <opcode_0xD7()+0x64>)
    5d0e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d10:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d14:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d16:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d18:	bf94      	ite	ls
    5d1a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5d1e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5d22:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d24:	f7fc ff9a 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    5d28:	4a07      	ldr	r2, [pc, #28]	; (5d48 <opcode_0xD7()+0x68>)
    5d2a:	4b08      	ldr	r3, [pc, #32]	; (5d4c <opcode_0xD7()+0x6c>)
    5d2c:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    5d30:	881b      	ldrh	r3, [r3, #0]
    5d32:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    5d34:	b280      	uxth	r0, r0
    5d36:	bd70      	pop	{r4, r5, r6, pc}
    5d38:	2001889c 	.word	0x2001889c
    5d3c:	20018886 	.word	0x20018886
    5d40:	2001889f 	.word	0x2001889f
    5d44:	20004990 	.word	0x20004990
    5d48:	20017418 	.word	0x20017418
    5d4c:	20018888 	.word	0x20018888

00005d50 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    5d50:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    5d52:	f7fd f873 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    5d56:	3801      	subs	r0, #1
    global_temp = local_data;
    5d58:	4d13      	ldr	r5, [pc, #76]	; (5da8 <opcode_0xC3()+0x58>)
    local_data = local_data - 1;
    5d5a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5d5c:	4e13      	ldr	r6, [pc, #76]	; (5dac <opcode_0xC3()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d5e:	4620      	mov	r0, r4
    global_temp = local_data;
    5d60:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d62:	f7fc ff7b 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5d66:	8830      	ldrh	r0, [r6, #0]
    5d68:	4621      	mov	r1, r4
    5d6a:	f7fc fe6f 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d6e:	4621      	mov	r1, r4
    5d70:	8830      	ldrh	r0, [r6, #0]
    5d72:	f7fc fe6b 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5d76:	4b0e      	ldr	r3, [pc, #56]	; (5db0 <opcode_0xC3()+0x60>)
    Calculate_CMP(global_temp);
    5d78:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5d7a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d7c:	4a0d      	ldr	r2, [pc, #52]	; (5db4 <opcode_0xC3()+0x64>)
    5d7e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d80:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d84:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d86:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5d88:	bf94      	ite	ls
    5d8a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5d8e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5d92:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5d94:	f7fc ff62 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    5d98:	4a07      	ldr	r2, [pc, #28]	; (5db8 <opcode_0xC3()+0x68>)
    5d9a:	4b08      	ldr	r3, [pc, #32]	; (5dbc <opcode_0xC3()+0x6c>)
    5d9c:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    5da0:	881b      	ldrh	r3, [r3, #0]
    5da2:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    5da4:	b280      	uxth	r0, r0
    5da6:	bd70      	pop	{r4, r5, r6, pc}
    5da8:	2001889c 	.word	0x2001889c
    5dac:	20018886 	.word	0x20018886
    5db0:	2001889f 	.word	0x2001889f
    5db4:	20004990 	.word	0x20004990
    5db8:	20017418 	.word	0x20017418
    5dbc:	20018888 	.word	0x20018888

00005dc0 <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    5dc0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    5dc2:	2000      	movs	r0, #0
    global_temp = local_data;
    5dc4:	4d15      	ldr	r5, [pc, #84]	; (5e1c <opcode_0xD3()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    5dc6:	f7fd f863 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    5dca:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5dcc:	4e14      	ldr	r6, [pc, #80]	; (5e20 <opcode_0xD3()+0x60>)
    5dce:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5dd0:	4620      	mov	r0, r4
    global_temp = local_data;
    5dd2:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5dd4:	f7fc ff42 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5dd8:	8830      	ldrh	r0, [r6, #0]
    5dda:	4621      	mov	r1, r4
    5ddc:	f7fc fe36 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5de0:	4621      	mov	r1, r4
    5de2:	8830      	ldrh	r0, [r6, #0]
    5de4:	f7fc fe32 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5de8:	4b0e      	ldr	r3, [pc, #56]	; (5e24 <opcode_0xD3()+0x64>)
    Calculate_CMP(global_temp);
    5dea:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5dec:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5dee:	4a0e      	ldr	r2, [pc, #56]	; (5e28 <opcode_0xD3()+0x68>)
    5df0:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5df2:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5df6:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5df8:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5dfa:	bf94      	ite	ls
    5dfc:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5e00:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5e04:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5e06:	f7fc ff29 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD3].length);
    5e0a:	4a08      	ldr	r2, [pc, #32]	; (5e2c <opcode_0xD3()+0x6c>)
    5e0c:	4b08      	ldr	r3, [pc, #32]	; (5e30 <opcode_0xD3()+0x70>)
    5e0e:	f892 0b0d 	ldrb.w	r0, [r2, #2829]	; 0xb0d
    5e12:	881b      	ldrh	r3, [r3, #0]
    5e14:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    5e16:	b280      	uxth	r0, r0
    5e18:	bd70      	pop	{r4, r5, r6, pc}
    5e1a:	bf00      	nop
    5e1c:	2001889c 	.word	0x2001889c
    5e20:	20018886 	.word	0x20018886
    5e24:	2001889f 	.word	0x2001889f
    5e28:	20004990 	.word	0x20004990
    5e2c:	20017418 	.word	0x20017418
    5e30:	20018888 	.word	0x20018888

00005e34 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    5e34:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    5e36:	f7fc ff85 	bl	2d44 <Fetch_Absolute()>
    local_data = local_data - 1;
    5e3a:	3801      	subs	r0, #1
    global_temp = local_data;
    5e3c:	4d13      	ldr	r5, [pc, #76]	; (5e8c <opcode_0xCF()+0x58>)
    local_data = local_data - 1;
    5e3e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5e40:	4e13      	ldr	r6, [pc, #76]	; (5e90 <opcode_0xCF()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e42:	4620      	mov	r0, r4
    global_temp = local_data;
    5e44:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5e46:	f7fc ff09 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5e4a:	8830      	ldrh	r0, [r6, #0]
    5e4c:	4621      	mov	r1, r4
    5e4e:	f7fc fdfd 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e52:	4621      	mov	r1, r4
    5e54:	8830      	ldrh	r0, [r6, #0]
    5e56:	f7fc fdf9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5e5a:	4b0e      	ldr	r3, [pc, #56]	; (5e94 <opcode_0xCF()+0x60>)
    Calculate_CMP(global_temp);
    5e5c:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5e5e:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5e60:	4a0d      	ldr	r2, [pc, #52]	; (5e98 <opcode_0xCF()+0x64>)
    5e62:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5e64:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5e68:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5e6a:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5e6c:	bf94      	ite	ls
    5e6e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5e72:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5e76:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5e78:	f7fc fef0 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCF].length);
    5e7c:	4a07      	ldr	r2, [pc, #28]	; (5e9c <opcode_0xCF()+0x68>)
    5e7e:	4b08      	ldr	r3, [pc, #32]	; (5ea0 <opcode_0xCF()+0x6c>)
    5e80:	f892 0a3d 	ldrb.w	r0, [r2, #2621]	; 0xa3d
    5e84:	881b      	ldrh	r3, [r3, #0]
    5e86:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    5e88:	b280      	uxth	r0, r0
    5e8a:	bd70      	pop	{r4, r5, r6, pc}
    5e8c:	2001889c 	.word	0x2001889c
    5e90:	20018886 	.word	0x20018886
    5e94:	2001889f 	.word	0x2001889f
    5e98:	20004990 	.word	0x20004990
    5e9c:	20017418 	.word	0x20017418
    5ea0:	20018888 	.word	0x20018888

00005ea4 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    5ea4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5ea6:	2000      	movs	r0, #0
    global_temp = local_data;
    5ea8:	4d15      	ldr	r5, [pc, #84]	; (5f00 <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5eaa:	f7fc ff67 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    5eae:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5eb0:	4e14      	ldr	r6, [pc, #80]	; (5f04 <opcode_0xDF()+0x60>)
    5eb2:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5eb4:	4620      	mov	r0, r4
    global_temp = local_data;
    5eb6:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5eb8:	f7fc fed0 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5ebc:	8830      	ldrh	r0, [r6, #0]
    5ebe:	4621      	mov	r1, r4
    5ec0:	f7fc fdc4 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ec4:	4621      	mov	r1, r4
    5ec6:	8830      	ldrh	r0, [r6, #0]
    5ec8:	f7fc fdc0 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5ecc:	4b0e      	ldr	r3, [pc, #56]	; (5f08 <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    5ece:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5ed0:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ed2:	4a0e      	ldr	r2, [pc, #56]	; (5f0c <opcode_0xDF()+0x68>)
    5ed4:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ed6:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5eda:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5edc:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5ede:	bf94      	ite	ls
    5ee0:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5ee4:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5ee8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5eea:	f7fc feb7 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    5eee:	4a08      	ldr	r2, [pc, #32]	; (5f10 <opcode_0xDF()+0x6c>)
    5ef0:	4b08      	ldr	r3, [pc, #32]	; (5f14 <opcode_0xDF()+0x70>)
    5ef2:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    5ef6:	881b      	ldrh	r3, [r3, #0]
    5ef8:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    5efa:	b280      	uxth	r0, r0
    5efc:	bd70      	pop	{r4, r5, r6, pc}
    5efe:	bf00      	nop
    5f00:	2001889c 	.word	0x2001889c
    5f04:	20018886 	.word	0x20018886
    5f08:	2001889f 	.word	0x2001889f
    5f0c:	20004990 	.word	0x20004990
    5f10:	20017418 	.word	0x20017418
    5f14:	20018888 	.word	0x20018888

00005f18 <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    5f18:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    5f1a:	2000      	movs	r0, #0
    global_temp = local_data;
    5f1c:	4d15      	ldr	r5, [pc, #84]	; (5f74 <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    5f1e:	f7fc ff5d 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    5f22:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    5f24:	4e14      	ldr	r6, [pc, #80]	; (5f78 <opcode_0xDB()+0x60>)
    5f26:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f28:	4620      	mov	r0, r4
    global_temp = local_data;
    5f2a:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f2c:	f7fc fe96 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5f30:	8830      	ldrh	r0, [r6, #0]
    5f32:	4621      	mov	r1, r4
    5f34:	f7fc fd8a 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f38:	4621      	mov	r1, r4
    5f3a:	8830      	ldrh	r0, [r6, #0]
    5f3c:	f7fc fd86 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5f40:	4b0e      	ldr	r3, [pc, #56]	; (5f7c <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    5f42:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    5f44:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5f46:	4a0e      	ldr	r2, [pc, #56]	; (5f80 <opcode_0xDB()+0x68>)
    5f48:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5f4a:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5f4e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5f50:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5f52:	bf94      	ite	ls
    5f54:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5f58:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5f5c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5f5e:	f7fc fe7d 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    5f62:	4a08      	ldr	r2, [pc, #32]	; (5f84 <opcode_0xDB()+0x6c>)
    5f64:	4b08      	ldr	r3, [pc, #32]	; (5f88 <opcode_0xDB()+0x70>)
    5f66:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    5f6a:	881b      	ldrh	r3, [r3, #0]
    5f6c:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    5f6e:	b280      	uxth	r0, r0
    5f70:	bd70      	pop	{r4, r5, r6, pc}
    5f72:	bf00      	nop
    5f74:	2001889c 	.word	0x2001889c
    5f78:	20018886 	.word	0x20018886
    5f7c:	2001889f 	.word	0x2001889f
    5f80:	20004990 	.word	0x20004990
    5f84:	20017418 	.word	0x20017418
    5f88:	20018888 	.word	0x20018888

00005f8c <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    5f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5f8e:	4e13      	ldr	r6, [pc, #76]	; (5fdc <opcode_0xE7()+0x50>)
    5f90:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5f92:	4d13      	ldr	r5, [pc, #76]	; (5fe0 <opcode_0xE7()+0x54>)
    return read_byte(register_pc+offset, false);
    5f94:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    5f96:	4f13      	ldr	r7, [pc, #76]	; (5fe4 <opcode_0xE7()+0x58>)
    5f98:	3001      	adds	r0, #1
    5f9a:	b280      	uxth	r0, r0
    5f9c:	f7fc fb9a 	bl	26d4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5fa0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5fa2:	b280      	uxth	r0, r0
    5fa4:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5fa6:	f7fc fb95 	bl	26d4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    5faa:	3001      	adds	r0, #1
    5fac:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fae:	4620      	mov	r0, r4
    global_temp = local_data;
    5fb0:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fb2:	f7fc fe53 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5fb6:	4621      	mov	r1, r4
    5fb8:	8828      	ldrh	r0, [r5, #0]
    5fba:	f7fc fd47 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5fbe:	4621      	mov	r1, r4
    5fc0:	8828      	ldrh	r0, [r5, #0]
    5fc2:	f7fc fd43 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    5fc6:	7838      	ldrb	r0, [r7, #0]
    5fc8:	f7fd fc7c 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    5fcc:	4a06      	ldr	r2, [pc, #24]	; (5fe8 <opcode_0xE7()+0x5c>)
    5fce:	8833      	ldrh	r3, [r6, #0]
    5fd0:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    5fd4:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    5fd6:	b280      	uxth	r0, r0
    5fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fda:	bf00      	nop
    5fdc:	20018888 	.word	0x20018888
    5fe0:	20018886 	.word	0x20018886
    5fe4:	2001889c 	.word	0x2001889c
    5fe8:	20017418 	.word	0x20017418

00005fec <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    5fec:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    5fee:	f7fc fe69 	bl	2cc4 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    5ff2:	3001      	adds	r0, #1
    global_temp = local_data;
    5ff4:	4d0c      	ldr	r5, [pc, #48]	; (6028 <opcode_0xF7()+0x3c>)
    local_data = local_data + 1;
    5ff6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    5ff8:	4e0c      	ldr	r6, [pc, #48]	; (602c <opcode_0xF7()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5ffa:	4620      	mov	r0, r4
    global_temp = local_data;
    5ffc:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5ffe:	f7fc fe2d 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6002:	8830      	ldrh	r0, [r6, #0]
    6004:	4621      	mov	r1, r4
    6006:	f7fc fd21 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    600a:	4621      	mov	r1, r4
    600c:	8830      	ldrh	r0, [r6, #0]
    600e:	f7fc fd1d 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6012:	7828      	ldrb	r0, [r5, #0]
    6014:	f7fd fc56 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    6018:	4a05      	ldr	r2, [pc, #20]	; (6030 <opcode_0xF7()+0x44>)
    601a:	4b06      	ldr	r3, [pc, #24]	; (6034 <opcode_0xF7()+0x48>)
    601c:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    6020:	881b      	ldrh	r3, [r3, #0]
    6022:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    6024:	b280      	uxth	r0, r0
    6026:	bd70      	pop	{r4, r5, r6, pc}
    6028:	2001889c 	.word	0x2001889c
    602c:	20018886 	.word	0x20018886
    6030:	20018418 	.word	0x20018418
    6034:	20018888 	.word	0x20018888

00006038 <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    6038:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    603a:	f7fc feff 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    603e:	3001      	adds	r0, #1
    global_temp = local_data;
    6040:	4d0c      	ldr	r5, [pc, #48]	; (6074 <opcode_0xE3()+0x3c>)
    local_data = local_data + 1;
    6042:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6044:	4e0c      	ldr	r6, [pc, #48]	; (6078 <opcode_0xE3()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6046:	4620      	mov	r0, r4
    global_temp = local_data;
    6048:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    604a:	f7fc fe07 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    604e:	8830      	ldrh	r0, [r6, #0]
    6050:	4621      	mov	r1, r4
    6052:	f7fc fcfb 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6056:	4621      	mov	r1, r4
    6058:	8830      	ldrh	r0, [r6, #0]
    605a:	f7fc fcf7 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    605e:	7828      	ldrb	r0, [r5, #0]
    6060:	f7fd fc30 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    6064:	4a05      	ldr	r2, [pc, #20]	; (607c <opcode_0xE3()+0x44>)
    6066:	4b06      	ldr	r3, [pc, #24]	; (6080 <opcode_0xE3()+0x48>)
    6068:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    606c:	881b      	ldrh	r3, [r3, #0]
    606e:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    6070:	b280      	uxth	r0, r0
    6072:	bd70      	pop	{r4, r5, r6, pc}
    6074:	2001889c 	.word	0x2001889c
    6078:	20018886 	.word	0x20018886
    607c:	20017418 	.word	0x20017418
    6080:	20018888 	.word	0x20018888

00006084 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    6084:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    6086:	2000      	movs	r0, #0
    global_temp = local_data;
    6088:	4d0e      	ldr	r5, [pc, #56]	; (60c4 <opcode_0xF3()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    608a:	f7fc ff01 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    608e:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    6090:	4e0d      	ldr	r6, [pc, #52]	; (60c8 <opcode_0xF3()+0x44>)
    6092:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6094:	4620      	mov	r0, r4
    global_temp = local_data;
    6096:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6098:	f7fc fde0 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    609c:	8830      	ldrh	r0, [r6, #0]
    609e:	4621      	mov	r1, r4
    60a0:	f7fc fcd4 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60a4:	4621      	mov	r1, r4
    60a6:	8830      	ldrh	r0, [r6, #0]
    60a8:	f7fc fcd0 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    60ac:	7828      	ldrb	r0, [r5, #0]
    60ae:	f7fd fc09 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    60b2:	4a06      	ldr	r2, [pc, #24]	; (60cc <opcode_0xF3()+0x48>)
    60b4:	4b06      	ldr	r3, [pc, #24]	; (60d0 <opcode_0xF3()+0x4c>)
    60b6:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    60ba:	881b      	ldrh	r3, [r3, #0]
    60bc:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    60be:	b280      	uxth	r0, r0
    60c0:	bd70      	pop	{r4, r5, r6, pc}
    60c2:	bf00      	nop
    60c4:	2001889c 	.word	0x2001889c
    60c8:	20018886 	.word	0x20018886
    60cc:	20018418 	.word	0x20018418
    60d0:	20018888 	.word	0x20018888

000060d4 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    60d4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    60d6:	f7fc fe35 	bl	2d44 <Fetch_Absolute()>
    local_data = local_data + 1;
    60da:	3001      	adds	r0, #1
    global_temp = local_data;
    60dc:	4d0c      	ldr	r5, [pc, #48]	; (6110 <opcode_0xEF()+0x3c>)
    local_data = local_data + 1;
    60de:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    60e0:	4e0c      	ldr	r6, [pc, #48]	; (6114 <opcode_0xEF()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    60e2:	4620      	mov	r0, r4
    global_temp = local_data;
    60e4:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    60e6:	f7fc fdb9 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    60ea:	8830      	ldrh	r0, [r6, #0]
    60ec:	4621      	mov	r1, r4
    60ee:	f7fc fcad 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60f2:	4621      	mov	r1, r4
    60f4:	8830      	ldrh	r0, [r6, #0]
    60f6:	f7fc fca9 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    60fa:	7828      	ldrb	r0, [r5, #0]
    60fc:	f7fd fbe2 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    6100:	4a05      	ldr	r2, [pc, #20]	; (6118 <opcode_0xEF()+0x44>)
    6102:	4b06      	ldr	r3, [pc, #24]	; (611c <opcode_0xEF()+0x48>)
    6104:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    6108:	881b      	ldrh	r3, [r3, #0]
    610a:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    610c:	b280      	uxth	r0, r0
    610e:	bd70      	pop	{r4, r5, r6, pc}
    6110:	2001889c 	.word	0x2001889c
    6114:	20018886 	.word	0x20018886
    6118:	20018418 	.word	0x20018418
    611c:	20018888 	.word	0x20018888

00006120 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    6120:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    6122:	2000      	movs	r0, #0
    global_temp = local_data;
    6124:	4d0e      	ldr	r5, [pc, #56]	; (6160 <opcode_0xFF()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    6126:	f7fc fe29 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    612a:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    612c:	4e0d      	ldr	r6, [pc, #52]	; (6164 <opcode_0xFF()+0x44>)
    612e:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6130:	4620      	mov	r0, r4
    global_temp = local_data;
    6132:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6134:	f7fc fd92 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6138:	8830      	ldrh	r0, [r6, #0]
    613a:	4621      	mov	r1, r4
    613c:	f7fc fc86 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6140:	4621      	mov	r1, r4
    6142:	8830      	ldrh	r0, [r6, #0]
    6144:	f7fc fc82 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6148:	7828      	ldrb	r0, [r5, #0]
    614a:	f7fd fbbb 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    614e:	4a06      	ldr	r2, [pc, #24]	; (6168 <opcode_0xFF()+0x48>)
    6150:	4b06      	ldr	r3, [pc, #24]	; (616c <opcode_0xFF()+0x4c>)
    6152:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    6156:	881b      	ldrh	r3, [r3, #0]
    6158:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    615a:	b280      	uxth	r0, r0
    615c:	bd70      	pop	{r4, r5, r6, pc}
    615e:	bf00      	nop
    6160:	2001889c 	.word	0x2001889c
    6164:	20018886 	.word	0x20018886
    6168:	20018418 	.word	0x20018418
    616c:	20018888 	.word	0x20018888

00006170 <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    6170:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    6172:	2000      	movs	r0, #0
    global_temp = local_data;
    6174:	4d0e      	ldr	r5, [pc, #56]	; (61b0 <opcode_0xFB()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    6176:	f7fc fe31 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    617a:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    617c:	4e0d      	ldr	r6, [pc, #52]	; (61b4 <opcode_0xFB()+0x44>)
    617e:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6180:	4620      	mov	r0, r4
    global_temp = local_data;
    6182:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6184:	f7fc fd6a 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6188:	8830      	ldrh	r0, [r6, #0]
    618a:	4621      	mov	r1, r4
    618c:	f7fc fc5e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6190:	4621      	mov	r1, r4
    6192:	8830      	ldrh	r0, [r6, #0]
    6194:	f7fc fc5a 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6198:	7828      	ldrb	r0, [r5, #0]
    619a:	f7fd fb93 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    619e:	4a06      	ldr	r2, [pc, #24]	; (61b8 <opcode_0xFB()+0x48>)
    61a0:	4b06      	ldr	r3, [pc, #24]	; (61bc <opcode_0xFB()+0x4c>)
    61a2:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    61a6:	881b      	ldrh	r3, [r3, #0]
    61a8:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    61aa:	b280      	uxth	r0, r0
    61ac:	bd70      	pop	{r4, r5, r6, pc}
    61ae:	bf00      	nop
    61b0:	2001889c 	.word	0x2001889c
    61b4:	20018886 	.word	0x20018886
    61b8:	20018418 	.word	0x20018418
    61bc:	20018888 	.word	0x20018888

000061c0 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    61c0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    61c2:	4c0e      	ldr	r4, [pc, #56]	; (61fc <opcode_0x0B()+0x3c>)
    61c4:	2100      	movs	r1, #0
    61c6:	8820      	ldrh	r0, [r4, #0]
    61c8:	3001      	adds	r0, #1
    61ca:	b280      	uxth	r0, r0
    61cc:	f7fc fa82 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    61d0:	4b0b      	ldr	r3, [pc, #44]	; (6200 <opcode_0x0B()+0x40>)
    61d2:	781a      	ldrb	r2, [r3, #0]
    61d4:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    61d6:	4a0b      	ldr	r2, [pc, #44]	; (6204 <opcode_0x0B()+0x44>)
    61d8:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    61da:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    61dc:	7813      	ldrb	r3, [r2, #0]
    61de:	bf4c      	ite	mi
    61e0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    61e4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    61e8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    61ea:	f7fc fd37 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    61ee:	4a06      	ldr	r2, [pc, #24]	; (6208 <opcode_0x0B()+0x48>)
    61f0:	8823      	ldrh	r3, [r4, #0]
    61f2:	f892 026d 	ldrb.w	r0, [r2, #621]	; 0x26d
    61f6:	4418      	add	r0, r3
} // 0x0B - ANC - Immediate
    61f8:	b280      	uxth	r0, r0
    61fa:	bd10      	pop	{r4, pc}
    61fc:	20018888 	.word	0x20018888
    6200:	2001889f 	.word	0x2001889f
    6204:	20004990 	.word	0x20004990
    6208:	20015418 	.word	0x20015418

0000620c <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    620c:	b510      	push	{r4, lr}
    620e:	4c0e      	ldr	r4, [pc, #56]	; (6248 <opcode_0x2B()+0x3c>)
    6210:	2100      	movs	r1, #0
    6212:	8820      	ldrh	r0, [r4, #0]
    6214:	3001      	adds	r0, #1
    6216:	b280      	uxth	r0, r0
    6218:	f7fc fa5c 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    621c:	4b0b      	ldr	r3, [pc, #44]	; (624c <opcode_0x2B()+0x40>)
    621e:	781a      	ldrb	r2, [r3, #0]
    6220:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6222:	4a0b      	ldr	r2, [pc, #44]	; (6250 <opcode_0x2B()+0x44>)
    6224:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    6226:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6228:	7813      	ldrb	r3, [r2, #0]
    622a:	bf4c      	ite	mi
    622c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6230:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6234:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6236:	f7fc fd11 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    623a:	4a06      	ldr	r2, [pc, #24]	; (6254 <opcode_0x2B()+0x48>)
    623c:	8823      	ldrh	r3, [r4, #0]
    623e:	f892 08ed 	ldrb.w	r0, [r2, #2285]	; 0x8ed
    6242:	4418      	add	r0, r3
} // 0x2B - ANC - Immediate
    6244:	b280      	uxth	r0, r0
    6246:	bd10      	pop	{r4, pc}
    6248:	20018888 	.word	0x20018888
    624c:	2001889f 	.word	0x2001889f
    6250:	20004990 	.word	0x20004990
    6254:	20015418 	.word	0x20015418

00006258 <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    6258:	b510      	push	{r4, lr}
    625a:	4c10      	ldr	r4, [pc, #64]	; (629c <opcode_0x4B()+0x44>)
    625c:	2100      	movs	r1, #0
    625e:	8820      	ldrh	r0, [r4, #0]
    6260:	3001      	adds	r0, #1
    6262:	b280      	uxth	r0, r0
    6264:	f7fc fa36 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6268:	4a0d      	ldr	r2, [pc, #52]	; (62a0 <opcode_0x4B()+0x48>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    626a:	490e      	ldr	r1, [pc, #56]	; (62a4 <opcode_0x4B()+0x4c>)
    register_a = register_a & local_data;
    626c:	7813      	ldrb	r3, [r2, #0]
    626e:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    6270:	780b      	ldrb	r3, [r1, #0]
    6272:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    6276:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    627a:	bf14      	ite	ne
    627c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6280:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    6284:	7010      	strb	r0, [r2, #0]
    6286:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6288:	f7fc fce8 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    628c:	4a06      	ldr	r2, [pc, #24]	; (62a8 <opcode_0x4B()+0x50>)
    628e:	8823      	ldrh	r3, [r4, #0]
    6290:	f892 0f6d 	ldrb.w	r0, [r2, #3949]	; 0xf6d
    6294:	4418      	add	r0, r3
} // 0x4B - ALR - Immediate
    6296:	b280      	uxth	r0, r0
    6298:	bd10      	pop	{r4, pc}
    629a:	bf00      	nop
    629c:	20018888 	.word	0x20018888
    62a0:	2001889f 	.word	0x2001889f
    62a4:	20004990 	.word	0x20004990
    62a8:	20015418 	.word	0x20015418

000062ac <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    62ac:	b510      	push	{r4, lr}
    62ae:	4c0f      	ldr	r4, [pc, #60]	; (62ec <opcode_0x6B()+0x40>)
    62b0:	2100      	movs	r1, #0
    62b2:	8820      	ldrh	r0, [r4, #0]
    62b4:	3001      	adds	r0, #1
    62b6:	b280      	uxth	r0, r0
    62b8:	f7fc fa0c 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    62bc:	490c      	ldr	r1, [pc, #48]	; (62f0 <opcode_0x6B()+0x44>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    62be:	4a0d      	ldr	r2, [pc, #52]	; (62f4 <opcode_0x6B()+0x48>)
    register_a = register_a & local_data;
    62c0:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    62c2:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    62c4:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    62c6:	0840      	lsrs	r0, r0, #1
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    62c8:	f003 03be 	and.w	r3, r3, #190	; 0xbe
    register_a = (0x7F & (register_a >> 1));
    62cc:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    62ce:	f000 0140 	and.w	r1, r0, #64	; 0x40
    62d2:	b109      	cbz	r1, 62d8 <opcode_0x6B()+0x2c>
        register_flags = register_flags | 0x40;
    62d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    62d8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    62da:	f7fc fcbf 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    62de:	4a06      	ldr	r2, [pc, #24]	; (62f8 <opcode_0x6B()+0x4c>)
    62e0:	8823      	ldrh	r3, [r4, #0]
    62e2:	f892 05ed 	ldrb.w	r0, [r2, #1517]	; 0x5ed
    62e6:	4418      	add	r0, r3
} // 0x6B - ARR - Immediate
    62e8:	b280      	uxth	r0, r0
    62ea:	bd10      	pop	{r4, pc}
    62ec:	20018888 	.word	0x20018888
    62f0:	2001889f 	.word	0x2001889f
    62f4:	20004990 	.word	0x20004990
    62f8:	20016418 	.word	0x20016418

000062fc <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    62fc:	b510      	push	{r4, lr}
    62fe:	4c11      	ldr	r4, [pc, #68]	; (6344 <opcode_0xCB()+0x48>)
    6300:	2100      	movs	r1, #0
    6302:	8820      	ldrh	r0, [r4, #0]
    6304:	3001      	adds	r0, #1
    6306:	b280      	uxth	r0, r0
    6308:	f7fc f9e4 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    630c:	4a0e      	ldr	r2, [pc, #56]	; (6348 <opcode_0xCB()+0x4c>)
    630e:	4b0f      	ldr	r3, [pc, #60]	; (634c <opcode_0xCB()+0x50>)
    6310:	7811      	ldrb	r1, [r2, #0]
    6312:	781b      	ldrb	r3, [r3, #0]
    6314:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6316:	490e      	ldr	r1, [pc, #56]	; (6350 <opcode_0xCB()+0x54>)
    register_x = register_x - local_data;
    6318:	1a1b      	subs	r3, r3, r0
    631a:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    631c:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    631e:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6320:	780a      	ldrb	r2, [r1, #0]
    6322:	0400      	lsls	r0, r0, #16
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6324:	4618      	mov	r0, r3
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6326:	bf54      	ite	pl
    6328:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    632c:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    6330:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6332:	f7fc fc93 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    6336:	4a07      	ldr	r2, [pc, #28]	; (6354 <opcode_0xCB()+0x58>)
    6338:	8823      	ldrh	r3, [r4, #0]
    633a:	f892 096d 	ldrb.w	r0, [r2, #2413]	; 0x96d
    633e:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    6340:	b280      	uxth	r0, r0
    6342:	bd10      	pop	{r4, pc}
    6344:	20018888 	.word	0x20018888
    6348:	200188a0 	.word	0x200188a0
    634c:	2001889f 	.word	0x2001889f
    6350:	20004990 	.word	0x20004990
    6354:	20017418 	.word	0x20017418

00006358 <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    6358:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    635a:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    635c:	f7fc fc92 	bl	2c84 <Fetch_Immediate(unsigned char)>
    while (1) {}
    6360:	e7fe      	b.n	6360 <opcode_0x02()+0x8>
    6362:	bf00      	nop

00006364 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6364:	b570      	push	{r4, r5, r6, lr}
    String op      = opcode_info[opcode].opcode;
    6366:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    uint8_t length = opcode_info[opcode].length;
    636a:	4e32      	ldr	r6, [pc, #200]	; (6434 <display_next_instruction(unsigned short, unsigned char)+0xd0>)
    636c:	2334      	movs	r3, #52	; 0x34
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    636e:	b092      	sub	sp, #72	; 0x48
    String op      = opcode_info[opcode].opcode;
    6370:	eb01 0282 	add.w	r2, r1, r2, lsl #2
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6374:	460c      	mov	r4, r1
    uint8_t length = opcode_info[opcode].length;
    6376:	fb03 6301 	mla	r3, r3, r1, r6
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    637a:	4605      	mov	r5, r0
    String op      = opcode_info[opcode].opcode;
    637c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
    6380:	a806      	add	r0, sp, #24
    uint8_t length = opcode_info[opcode].length;
    6382:	f893 6031 	ldrb.w	r6, [r3, #49]	; 0x31
    String op      = opcode_info[opcode].opcode;
    6386:	f002 f9b5 	bl	86f4 <String::String(String const&)>
    switch (length) {
    638a:	2e02      	cmp	r6, #2
    638c:	d013      	beq.n	63b6 <display_next_instruction(unsigned short, unsigned char)+0x52>
    638e:	2e03      	cmp	r6, #3
    6390:	d02f      	beq.n	63f2 <display_next_instruction(unsigned short, unsigned char)+0x8e>
    6392:	2e01      	cmp	r6, #1
    6394:	d022      	beq.n	63dc <display_next_instruction(unsigned short, unsigned char)+0x78>
    6396:	ae0a      	add	r6, sp, #40	; 0x28
							  return write((const uint8_t *)str, strlen(str)); }
    6398:	4630      	mov	r0, r6
    639a:	f005 fd71 	bl	be80 <strlen>
    639e:	4601      	mov	r1, r0
    63a0:	4630      	mov	r0, r6
    63a2:	f003 fe1f 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    63a6:	4824      	ldr	r0, [pc, #144]	; (6438 <display_next_instruction(unsigned short, unsigned char)+0xd4>)
    63a8:	f002 f982 	bl	86b0 <Print::println()>
}
    63ac:	a806      	add	r0, sp, #24
    63ae:	f002 f9d5 	bl	875c <String::~String()>
    63b2:	b012      	add	sp, #72	; 0x48
    63b4:	bd70      	pop	{r4, r5, r6, pc}
            uint8_t op1 = read_byte(pc+1, false);
    63b6:	1c68      	adds	r0, r5, #1
    63b8:	2100      	movs	r1, #0
    63ba:	b280      	uxth	r0, r0
    63bc:	f7fc f98a 	bl	26d4 <read_byte(unsigned short, bool)>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    63c0:	9b06      	ldr	r3, [sp, #24]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d02f      	beq.n	6426 <display_next_instruction(unsigned short, unsigned char)+0xc2>
            sprintf(buffer, "[%04X] %02X %02X     %s %02X", pc, opcode, op1, op.c_str(), op1);
    63c6:	ae0a      	add	r6, sp, #40	; 0x28
    63c8:	9301      	str	r3, [sp, #4]
    63ca:	9002      	str	r0, [sp, #8]
    63cc:	4623      	mov	r3, r4
    63ce:	9000      	str	r0, [sp, #0]
    63d0:	462a      	mov	r2, r5
    63d2:	491a      	ldr	r1, [pc, #104]	; (643c <display_next_instruction(unsigned short, unsigned char)+0xd8>)
    63d4:	4630      	mov	r0, r6
    63d6:	f005 f90b 	bl	b5f0 <sprintf>
            break;
    63da:	e7dd      	b.n	6398 <display_next_instruction(unsigned short, unsigned char)+0x34>
    63dc:	9906      	ldr	r1, [sp, #24]
    63de:	b321      	cbz	r1, 642a <display_next_instruction(unsigned short, unsigned char)+0xc6>
            sprintf(buffer, "[%04X] %02X        %s", pc, opcode, op.c_str());
    63e0:	ae0a      	add	r6, sp, #40	; 0x28
    63e2:	9100      	str	r1, [sp, #0]
    63e4:	4623      	mov	r3, r4
    63e6:	462a      	mov	r2, r5
    63e8:	4915      	ldr	r1, [pc, #84]	; (6440 <display_next_instruction(unsigned short, unsigned char)+0xdc>)
    63ea:	4630      	mov	r0, r6
    63ec:	f005 f900 	bl	b5f0 <sprintf>
            break;
    63f0:	e7d2      	b.n	6398 <display_next_instruction(unsigned short, unsigned char)+0x34>
            uint8_t op1 = read_byte(pc+1, false);
    63f2:	1c68      	adds	r0, r5, #1
    63f4:	2100      	movs	r1, #0
    63f6:	b280      	uxth	r0, r0
    63f8:	f7fc f96c 	bl	26d4 <read_byte(unsigned short, bool)>
            uint8_t op2 = read_byte(pc+2, false);
    63fc:	1cab      	adds	r3, r5, #2
            uint8_t op1 = read_byte(pc+1, false);
    63fe:	4606      	mov	r6, r0
            uint8_t op2 = read_byte(pc+2, false);
    6400:	2100      	movs	r1, #0
    6402:	b298      	uxth	r0, r3
    6404:	f7fc f966 	bl	26d4 <read_byte(unsigned short, bool)>
    6408:	9b06      	ldr	r3, [sp, #24]
    640a:	b183      	cbz	r3, 642e <display_next_instruction(unsigned short, unsigned char)+0xca>
            sprintf(buffer, "[%04X] %02X %02X %02X  %s %02X%02X", 
    640c:	9600      	str	r6, [sp, #0]
    640e:	462a      	mov	r2, r5
    6410:	9302      	str	r3, [sp, #8]
    6412:	4623      	mov	r3, r4
    6414:	9001      	str	r0, [sp, #4]
    6416:	490b      	ldr	r1, [pc, #44]	; (6444 <display_next_instruction(unsigned short, unsigned char)+0xe0>)
    6418:	e9cd 0603 	strd	r0, r6, [sp, #12]
    641c:	ae0a      	add	r6, sp, #40	; 0x28
    641e:	4630      	mov	r0, r6
    6420:	f005 f8e6 	bl	b5f0 <sprintf>
            break;
    6424:	e7b8      	b.n	6398 <display_next_instruction(unsigned short, unsigned char)+0x34>
    6426:	4b08      	ldr	r3, [pc, #32]	; (6448 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    6428:	e7cd      	b.n	63c6 <display_next_instruction(unsigned short, unsigned char)+0x62>
    642a:	4907      	ldr	r1, [pc, #28]	; (6448 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    642c:	e7d8      	b.n	63e0 <display_next_instruction(unsigned short, unsigned char)+0x7c>
    642e:	4b06      	ldr	r3, [pc, #24]	; (6448 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    6430:	e7ec      	b.n	640c <display_next_instruction(unsigned short, unsigned char)+0xa8>
    6432:	bf00      	nop
    6434:	20015418 	.word	0x20015418
    6438:	20004380 	.word	0x20004380
    643c:	20000a14 	.word	0x20000a14
    6440:	200009fc 	.word	0x200009fc
    6444:	20000a34 	.word	0x20000a34
    6448:	20001250 	.word	0x20001250

0000644c <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    644c:	4922      	ldr	r1, [pc, #136]	; (64d8 <display_registers()+0x8c>)
    644e:	4b23      	ldr	r3, [pc, #140]	; (64dc <display_registers()+0x90>)
    6450:	4a23      	ldr	r2, [pc, #140]	; (64e0 <display_registers()+0x94>)
void display_registers() {
    6452:	b500      	push	{lr}
    6454:	b08f      	sub	sp, #60	; 0x3c
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6456:	7808      	ldrb	r0, [r1, #0]
    6458:	781b      	ldrb	r3, [r3, #0]
    645a:	7812      	ldrb	r2, [r2, #0]
    645c:	4921      	ldr	r1, [pc, #132]	; (64e4 <display_registers()+0x98>)
    645e:	9000      	str	r0, [sp, #0]
    6460:	a806      	add	r0, sp, #24
    6462:	f005 f8c5 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6466:	a806      	add	r0, sp, #24
    6468:	f005 fd0a 	bl	be80 <strlen>
    646c:	4601      	mov	r1, r0
    646e:	a806      	add	r0, sp, #24
    6470:	f003 fdb8 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6474:	481c      	ldr	r0, [pc, #112]	; (64e8 <display_registers()+0x9c>)
    6476:	f002 f91b 	bl	86b0 <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    647a:	4b1c      	ldr	r3, [pc, #112]	; (64ec <display_registers()+0xa0>)
    647c:	4a1c      	ldr	r2, [pc, #112]	; (64f0 <display_registers()+0xa4>)
    647e:	a806      	add	r0, sp, #24
    6480:	781b      	ldrb	r3, [r3, #0]
    6482:	8812      	ldrh	r2, [r2, #0]
    6484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6488:	491a      	ldr	r1, [pc, #104]	; (64f4 <display_registers()+0xa8>)
    648a:	f005 f8b1 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    648e:	a806      	add	r0, sp, #24
    6490:	f005 fcf6 	bl	be80 <strlen>
    6494:	4601      	mov	r1, r0
    6496:	a806      	add	r0, sp, #24
    6498:	f003 fda4 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    649c:	4812      	ldr	r0, [pc, #72]	; (64e8 <display_registers()+0x9c>)
    649e:	f002 f907 	bl	86b0 <Print::println()>
    sprintf(buf, "            Flags: %s", flag_status().c_str());
    64a2:	a802      	add	r0, sp, #8
    64a4:	f7fc f814 	bl	24d0 <flag_status()>
    64a8:	9a02      	ldr	r2, [sp, #8]
    64aa:	b19a      	cbz	r2, 64d4 <display_registers()+0x88>
    64ac:	4912      	ldr	r1, [pc, #72]	; (64f8 <display_registers()+0xac>)
    64ae:	a806      	add	r0, sp, #24
    64b0:	f005 f89e 	bl	b5f0 <sprintf>
    64b4:	a802      	add	r0, sp, #8
    64b6:	f002 f951 	bl	875c <String::~String()>
							  return write((const uint8_t *)str, strlen(str)); }
    64ba:	a806      	add	r0, sp, #24
    64bc:	f005 fce0 	bl	be80 <strlen>
    64c0:	4601      	mov	r1, r0
    64c2:	a806      	add	r0, sp, #24
    64c4:	f003 fd8e 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    64c8:	4807      	ldr	r0, [pc, #28]	; (64e8 <display_registers()+0x9c>)
    64ca:	f002 f8f1 	bl	86b0 <Print::println()>
}
    64ce:	b00f      	add	sp, #60	; 0x3c
    64d0:	f85d fb04 	ldr.w	pc, [sp], #4
    64d4:	4a09      	ldr	r2, [pc, #36]	; (64fc <display_registers()+0xb0>)
    64d6:	e7e9      	b.n	64ac <display_registers()+0x60>
    64d8:	200188a1 	.word	0x200188a1
    64dc:	200188a0 	.word	0x200188a0
    64e0:	2001889f 	.word	0x2001889f
    64e4:	20000844 	.word	0x20000844
    64e8:	20004380 	.word	0x20004380
    64ec:	20004991 	.word	0x20004991
    64f0:	20018888 	.word	0x20018888
    64f4:	20000868 	.word	0x20000868
    64f8:	20000888 	.word	0x20000888
    64fc:	20001250 	.word	0x20001250

00006500 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    6500:	490c      	ldr	r1, [pc, #48]	; (6534 <display_info()+0x34>)
    6502:	4b0d      	ldr	r3, [pc, #52]	; (6538 <display_info()+0x38>)
    6504:	6808      	ldr	r0, [r1, #0]
    6506:	4a0d      	ldr	r2, [pc, #52]	; (653c <display_info()+0x3c>)
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	7812      	ldrb	r2, [r2, #0]
    650c:	490c      	ldr	r1, [pc, #48]	; (6540 <display_info()+0x40>)
void display_info() {
    650e:	b500      	push	{lr}
    6510:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    6512:	9000      	str	r0, [sp, #0]
    6514:	a802      	add	r0, sp, #8
    6516:	f005 f86b 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    651a:	a802      	add	r0, sp, #8
    651c:	f005 fcb0 	bl	be80 <strlen>
    6520:	4601      	mov	r1, r0
    6522:	a802      	add	r0, sp, #8
    6524:	f003 fd5e 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6528:	4806      	ldr	r0, [pc, #24]	; (6544 <display_info()+0x44>)
    652a:	f002 f8c1 	bl	86b0 <Print::println()>
}
    652e:	b013      	add	sp, #76	; 0x4c
    6530:	f85d fb04 	ldr.w	pc, [sp], #4
    6534:	200053c8 	.word	0x200053c8
    6538:	20018894 	.word	0x20018894
    653c:	200188a2 	.word	0x200188a2
    6540:	200003a4 	.word	0x200003a4
    6544:	20004380 	.word	0x20004380

00006548 <get_command()>:
String get_command() {
    6548:	b570      	push	{r4, r5, r6, lr}
    654a:	b084      	sub	sp, #16
    String s = "";
    654c:	491c      	ldr	r1, [pc, #112]	; (65c0 <get_command()+0x78>)
String get_command() {
    654e:	4605      	mov	r5, r0
    6550:	4e1c      	ldr	r6, [pc, #112]	; (65c4 <get_command()+0x7c>)
    String s = "";
    6552:	4668      	mov	r0, sp
    6554:	f002 f93e 	bl	87d4 <String::String(char const*)>
    6558:	2103      	movs	r1, #3
    655a:	481b      	ldr	r0, [pc, #108]	; (65c8 <get_command()+0x80>)
    655c:	f003 fd42 	bl	9fe4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    6560:	f003 fcd6 	bl	9f10 <usb_serial_available>
        if (Serial.available()) {
    6564:	2800      	cmp	r0, #0
    6566:	d0fb      	beq.n	6560 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    6568:	f003 fd16 	bl	9f98 <usb_serial_getchar>
            switch(c) {
    656c:	b2c4      	uxtb	r4, r0
    656e:	2c08      	cmp	r4, #8
    6570:	d00e      	beq.n	6590 <get_command()+0x48>
    6572:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    6574:	4620      	mov	r0, r4
            switch(c) {
    6576:	d016      	beq.n	65a6 <get_command()+0x5e>
                    if (isprint(c)) {
    6578:	f004 ff3c 	bl	b3f4 <isprint>
    657c:	2800      	cmp	r0, #0
    657e:	d0ef      	beq.n	6560 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    6580:	4621      	mov	r1, r4
    6582:	4668      	mov	r0, sp
    6584:	f002 f9aa 	bl	88dc <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6588:	4620      	mov	r0, r4
    658a:	f003 fd15 	bl	9fb8 <usb_serial_putchar>
    658e:	e7e7      	b.n	6560 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    6590:	9902      	ldr	r1, [sp, #8]
    6592:	2201      	movs	r2, #1
    6594:	4668      	mov	r0, sp
    6596:	3901      	subs	r1, #1
    6598:	f002 fa6e 	bl	8a78 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    659c:	2103      	movs	r1, #3
    659e:	4630      	mov	r0, r6
    65a0:	f003 fd20 	bl	9fe4 <usb_serial_write>
    65a4:	e7dc      	b.n	6560 <get_command()+0x18>
                    return(s.toLowerCase());
    65a6:	4668      	mov	r0, sp
    65a8:	f002 fa86 	bl	8ab8 <String::toLowerCase()>
    65ac:	4601      	mov	r1, r0
    65ae:	4628      	mov	r0, r5
    65b0:	f002 f8a0 	bl	86f4 <String::String(String const&)>
}
    65b4:	4668      	mov	r0, sp
    65b6:	f002 f8d1 	bl	875c <String::~String()>
    65ba:	4628      	mov	r0, r5
    65bc:	b004      	add	sp, #16
    65be:	bd70      	pop	{r4, r5, r6, pc}
    65c0:	20000488 	.word	0x20000488
    65c4:	20000380 	.word	0x20000380
    65c8:	2000037c 	.word	0x2000037c

000065cc <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	460d      	mov	r5, r1
    65d0:	b088      	sub	sp, #32
    String arg = "";
    65d2:	4923      	ldr	r1, [pc, #140]	; (6660 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    65d4:	4616      	mov	r6, r2
    65d6:	4604      	mov	r4, r0
    String arg = "";
    65d8:	f002 f8fc 	bl	87d4 <String::String(char const*)>

    String src = _src.trim();
    65dc:	4628      	mov	r0, r5
    65de:	f002 fa7b 	bl	8ad8 <String::trim()>
    65e2:	4601      	mov	r1, r0
    65e4:	4668      	mov	r0, sp
    65e6:	f002 f885 	bl	86f4 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    65ea:	9b02      	ldr	r3, [sp, #8]
    65ec:	b92b      	cbnz	r3, 65fa <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    65ee:	4668      	mov	r0, sp
    65f0:	f002 f8b4 	bl	875c <String::~String()>
    65f4:	4620      	mov	r0, r4
    65f6:	b008      	add	sp, #32
    65f8:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    65fa:	2120      	movs	r1, #32
    65fc:	4668      	mov	r0, sp
    65fe:	f002 f9d3 	bl	89a8 <String::indexOf(char) const>
        if (idx>0) {
    6602:	1e05      	subs	r5, r0, #0
    6604:	dd1e      	ble.n	6644 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    6606:	462b      	mov	r3, r5
    6608:	2200      	movs	r2, #0
    660a:	4669      	mov	r1, sp
    660c:	a804      	add	r0, sp, #16
    660e:	f002 fa07 	bl	8a20 <String::substring(unsigned int, unsigned int) const>
    6612:	a904      	add	r1, sp, #16
    6614:	4620      	mov	r0, r4
    6616:	f002 f8f9 	bl	880c <String::operator=(String&&)>
    661a:	a804      	add	r0, sp, #16
    661c:	f002 f89e 	bl	875c <String::~String()>
            remainder = src.substring(idx+1);
    6620:	1c6a      	adds	r2, r5, #1
    6622:	4669      	mov	r1, sp
    6624:	a804      	add	r0, sp, #16
    6626:	f002 f9cf 	bl	89c8 <String::substring(unsigned int) const>
    662a:	a904      	add	r1, sp, #16
    662c:	4630      	mov	r0, r6
    662e:	f002 f8ed 	bl	880c <String::operator=(String&&)>
    6632:	a804      	add	r0, sp, #16
    6634:	f002 f892 	bl	875c <String::~String()>
}
    6638:	4668      	mov	r0, sp
    663a:	f002 f88f 	bl	875c <String::~String()>
    663e:	4620      	mov	r0, r4
    6640:	b008      	add	sp, #32
    6642:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    6644:	4669      	mov	r1, sp
    6646:	4620      	mov	r0, r4
    6648:	f002 f8d8 	bl	87fc <String::operator=(String const&)>
            remainder = "";
    664c:	4904      	ldr	r1, [pc, #16]	; (6660 <parse_next_arg(String&, String&)+0x94>)
    664e:	4630      	mov	r0, r6
    6650:	f002 f8f2 	bl	8838 <String::operator=(char const*)>
}
    6654:	4668      	mov	r0, sp
    6656:	f002 f881 	bl	875c <String::~String()>
    665a:	4620      	mov	r0, r4
    665c:	b008      	add	sp, #32
    665e:	bd70      	pop	{r4, r5, r6, pc}
    6660:	20000488 	.word	0x20000488

00006664 <process_command(String)>:


ENUM_RUN_MODE process_command(String input) {
    6664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6668:	b09d      	sub	sp, #116	; 0x74
    666a:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    666c:	49ac      	ldr	r1, [pc, #688]	; (6920 <process_command(String)+0x2bc>)
    666e:	4668      	mov	r0, sp
    6670:	f002 f8b0 	bl	87d4 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    6674:	466a      	mov	r2, sp
    6676:	4621      	mov	r1, r4
    6678:	a804      	add	r0, sp, #16
    667a:	f7ff ffa7 	bl	65cc <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    667e:	466a      	mov	r2, sp
    6680:	4669      	mov	r1, sp
    6682:	a808      	add	r0, sp, #32
    6684:	f7ff ffa2 	bl	65cc <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    6688:	466a      	mov	r2, sp
    668a:	4669      	mov	r1, sp
    668c:	a80c      	add	r0, sp, #48	; 0x30
    668e:	f7ff ff9d 	bl	65cc <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    6692:	2100      	movs	r1, #0
    6694:	a804      	add	r0, sp, #16
    6696:	f002 f95d 	bl	8954 <String::operator[](unsigned int)>
    669a:	7805      	ldrb	r5, [r0, #0]
    669c:	2101      	movs	r1, #1
    669e:	a804      	add	r0, sp, #16
    66a0:	f002 f958 	bl	8954 <String::operator[](unsigned int)>
    66a4:	7803      	ldrb	r3, [r0, #0]
    66a6:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    66a8:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    66ac:	442b      	add	r3, r5
    switch (cmd_int) {
    66ae:	4293      	cmp	r3, r2
    66b0:	f000 8126 	beq.w	6900 <process_command(String)+0x29c>
    66b4:	d858      	bhi.n	6768 <process_command(String)+0x104>
    66b6:	f246 4272 	movw	r2, #25714	; 0x6472
    66ba:	4293      	cmp	r3, r2
    66bc:	f000 80c0 	beq.w	6840 <process_command(String)+0x1dc>
    66c0:	d935      	bls.n	672e <process_command(String)+0xca>
    66c2:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    66c6:	f000 8143 	beq.w	6950 <process_command(String)+0x2ec>
    66ca:	f646 126e 	movw	r2, #26990	; 0x696e
    66ce:	4293      	cmp	r3, r2
    66d0:	d116      	bne.n	6700 <process_command(String)+0x9c>
            display_registers();
            run_mode = WAITING;          
            break;

        case CMD_IN:
            display_registers();
    66d2:	f7ff febb 	bl	644c <display_registers()>
            display_info();
            run_mode = WAITING;
    66d6:	2400      	movs	r4, #0
            display_info();
    66d8:	f7ff ff12 	bl	6500 <display_info()>
            run_mode = WAITING;
    66dc:	4b91      	ldr	r3, [pc, #580]	; (6924 <process_command(String)+0x2c0>)
    66de:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    66e0:	a80c      	add	r0, sp, #48	; 0x30
    66e2:	f002 f83b 	bl	875c <String::~String()>
    66e6:	a808      	add	r0, sp, #32
    66e8:	f002 f838 	bl	875c <String::~String()>
    66ec:	a804      	add	r0, sp, #16
    66ee:	f002 f835 	bl	875c <String::~String()>
    66f2:	4668      	mov	r0, sp
    66f4:	f002 f832 	bl	875c <String::~String()>
    66f8:	4620      	mov	r0, r4
    66fa:	b01d      	add	sp, #116	; 0x74
    66fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    6700:	f246 726f 	movw	r2, #26479	; 0x676f
    6704:	4293      	cmp	r3, r2
    6706:	f040 816a 	bne.w	69de <process_command(String)+0x37a>
            run_mode = RUNNING;
    670a:	4d86      	ldr	r5, [pc, #536]	; (6924 <process_command(String)+0x2c0>)
    670c:	2402      	movs	r4, #2
            if (arg1.length()) {
    670e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    6710:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    6712:	2b00      	cmp	r3, #0
    6714:	d0e4      	beq.n	66e0 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6716:	9808      	ldr	r0, [sp, #32]
    6718:	2800      	cmp	r0, #0
    671a:	f000 81e6 	beq.w	6aea <process_command(String)+0x486>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    671e:	2210      	movs	r2, #16
    6720:	2100      	movs	r1, #0
    6722:	f004 fe53 	bl	b3cc <strtoul>
    6726:	4b80      	ldr	r3, [pc, #512]	; (6928 <process_command(String)+0x2c4>)
    return(run_mode);
    6728:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    672a:	8018      	strh	r0, [r3, #0]
    672c:	e7d8      	b.n	66e0 <process_command(String)+0x7c>
    switch (cmd_int) {
    672e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    6732:	f000 810d 	beq.w	6950 <process_command(String)+0x2ec>
    6736:	f246 226b 	movw	r2, #25195	; 0x626b
    673a:	4293      	cmp	r3, r2
    673c:	d15f      	bne.n	67fe <process_command(String)+0x19a>
    673e:	9808      	ldr	r0, [sp, #32]
    6740:	2800      	cmp	r0, #0
    6742:	f000 81b3 	beq.w	6aac <process_command(String)+0x448>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6746:	2210      	movs	r2, #16
    6748:	2100      	movs	r1, #0
    674a:	f004 fe3f 	bl	b3cc <strtoul>
                breakpoint = addr;
    674e:	4b77      	ldr	r3, [pc, #476]	; (692c <process_command(String)+0x2c8>)
    6750:	6018      	str	r0, [r3, #0]
    6752:	2102      	movs	r1, #2
    6754:	4876      	ldr	r0, [pc, #472]	; (6930 <process_command(String)+0x2cc>)
    6756:	f003 fc45 	bl	9fe4 <usb_serial_write>
    675a:	4876      	ldr	r0, [pc, #472]	; (6934 <process_command(String)+0x2d0>)
    675c:	f001 ffa8 	bl	86b0 <Print::println()>
            run_mode = WAITING;
    6760:	4b70      	ldr	r3, [pc, #448]	; (6924 <process_command(String)+0x2c0>)
    6762:	2400      	movs	r4, #0
    6764:	701c      	strb	r4, [r3, #0]
            break;
    6766:	e7bb      	b.n	66e0 <process_command(String)+0x7c>
    switch (cmd_int) {
    6768:	f247 3273 	movw	r2, #29555	; 0x7373
    676c:	4293      	cmp	r3, r2
    676e:	f000 8161 	beq.w	6a34 <process_command(String)+0x3d0>
    6772:	d94a      	bls.n	680a <process_command(String)+0x1a6>
    6774:	f247 4274 	movw	r2, #29812	; 0x7474
    6778:	4293      	cmp	r3, r2
    677a:	f000 80b2 	beq.w	68e2 <process_command(String)+0x27e>
    677e:	f247 7272 	movw	r2, #30578	; 0x7772
    6782:	4293      	cmp	r3, r2
    6784:	f040 812b 	bne.w	69de <process_command(String)+0x37a>
    6788:	9808      	ldr	r0, [sp, #32]
    678a:	2800      	cmp	r0, #0
    678c:	f000 818c 	beq.w	6aa8 <process_command(String)+0x444>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6790:	2210      	movs	r2, #16
    6792:	2100      	movs	r1, #0
    6794:	f004 fe1a 	bl	b3cc <strtoul>
    6798:	4605      	mov	r5, r0
    679a:	980c      	ldr	r0, [sp, #48]	; 0x30
    679c:	2800      	cmp	r0, #0
    679e:	f000 819a 	beq.w	6ad6 <process_command(String)+0x472>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    67a2:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    67a6:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    67aa:	2210      	movs	r2, #16
    67ac:	2100      	movs	r1, #0
    67ae:	f004 fe0d 	bl	b3cc <strtoul>
    67b2:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
                write_byte(addr, data);
    67b6:	b2c1      	uxtb	r1, r0
    67b8:	b2a8      	uxth	r0, r5
    67ba:	f7fc f947 	bl	2a4c <write_byte(unsigned short, unsigned char)>
                while (remainder.length()) {
    67be:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    67c0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    67c4:	2b00      	cmp	r3, #0
    67c6:	d0c4      	beq.n	6752 <process_command(String)+0xee>
    67c8:	ac14      	add	r4, sp, #80	; 0x50
    67ca:	4e5b      	ldr	r6, [pc, #364]	; (6938 <process_command(String)+0x2d4>)
                    String d = parse_next_arg(remainder, remainder);
    67cc:	466a      	mov	r2, sp
    67ce:	4669      	mov	r1, sp
    67d0:	4620      	mov	r0, r4
                    write_byte(++addr, data);
    67d2:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    67d4:	f7ff fefa 	bl	65cc <parse_next_arg(String&, String&)>
    67d8:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    67da:	2210      	movs	r2, #16
    67dc:	2100      	movs	r1, #0
    67de:	2800      	cmp	r0, #0
    67e0:	bf08      	it	eq
    67e2:	4630      	moveq	r0, r6
    67e4:	f004 fdf2 	bl	b3cc <strtoul>
                    write_byte(++addr, data);
    67e8:	b2c1      	uxtb	r1, r0
    67ea:	b2a8      	uxth	r0, r5
    67ec:	f7fc f92e 	bl	2a4c <write_byte(unsigned short, unsigned char)>
                }
    67f0:	4620      	mov	r0, r4
    67f2:	f001 ffb3 	bl	875c <String::~String()>
                while (remainder.length()) {
    67f6:	9b02      	ldr	r3, [sp, #8]
    67f8:	2b00      	cmp	r3, #0
    67fa:	d1e7      	bne.n	67cc <process_command(String)+0x168>
    67fc:	e7a9      	b.n	6752 <process_command(String)+0xee>
    switch (cmd_int) {
    67fe:	2b00      	cmp	r3, #0
    6800:	f040 80ed 	bne.w	69de <process_command(String)+0x37a>
    return(run_mode);
    6804:	4b47      	ldr	r3, [pc, #284]	; (6924 <process_command(String)+0x2c0>)
    6806:	781c      	ldrb	r4, [r3, #0]
    6808:	e76a      	b.n	66e0 <process_command(String)+0x7c>
    switch (cmd_int) {
    680a:	f247 2273 	movw	r2, #29299	; 0x7273
    680e:	4293      	cmp	r3, r2
    6810:	f000 8114 	beq.w	6a3c <process_command(String)+0x3d8>
    6814:	f247 3272 	movw	r2, #29554	; 0x7372
    6818:	4293      	cmp	r3, r2
    681a:	d117      	bne.n	684c <process_command(String)+0x1e8>
    681c:	980c      	ldr	r0, [sp, #48]	; 0x30
    681e:	2800      	cmp	r0, #0
    6820:	f000 8148 	beq.w	6ab4 <process_command(String)+0x450>
                word value = strtoul(arg2.c_str(), 0, 16);
    6824:	2100      	movs	r1, #0
    6826:	2210      	movs	r2, #16
    6828:	f004 fdd0 	bl	b3cc <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    682c:	4943      	ldr	r1, [pc, #268]	; (693c <process_command(String)+0x2d8>)
    682e:	4604      	mov	r4, r0
    6830:	a808      	add	r0, sp, #32
    6832:	f002 f879 	bl	8928 <String::equals(char const*) const>
                if (arg1=="pc") {
    6836:	2800      	cmp	r0, #0
    6838:	f000 8104 	beq.w	6a44 <process_command(String)+0x3e0>
                    register_pc = value & 0xFFFF;
    683c:	4b3a      	ldr	r3, [pc, #232]	; (6928 <process_command(String)+0x2c4>)
    683e:	801c      	strh	r4, [r3, #0]
            display_registers();
    6840:	f7ff fe04 	bl	644c <display_registers()>
            run_mode = WAITING;          
    6844:	2400      	movs	r4, #0
    6846:	4b37      	ldr	r3, [pc, #220]	; (6924 <process_command(String)+0x2c0>)
    6848:	701c      	strb	r4, [r3, #0]
            break;
    684a:	e749      	b.n	66e0 <process_command(String)+0x7c>
    switch (cmd_int) {
    684c:	f247 2264 	movw	r2, #29284	; 0x7264
    6850:	4293      	cmp	r3, r2
    6852:	f040 80c4 	bne.w	69de <process_command(String)+0x37a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6856:	9808      	ldr	r0, [sp, #32]
    6858:	2800      	cmp	r0, #0
    685a:	f000 8129 	beq.w	6ab0 <process_command(String)+0x44c>
                word addr = strtoul(arg1.c_str(), 0, 16);
    685e:	2210      	movs	r2, #16
    6860:	2100      	movs	r1, #0
    6862:	f004 fdb3 	bl	b3cc <strtoul>
                if (arg2.length()) {
    6866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    6868:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    686a:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    686c:	2b00      	cmp	r3, #0
    686e:	f040 80f2 	bne.w	6a56 <process_command(String)+0x3f2>
                sprintf(s,"[%04X] = ", addr);
    6872:	4602      	mov	r2, r0
    6874:	4932      	ldr	r1, [pc, #200]	; (6940 <process_command(String)+0x2dc>)
    6876:	4620      	mov	r0, r4
                byte count = 1;
    6878:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    687c:	f004 feb8 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6880:	4620      	mov	r0, r4
    6882:	f005 fafd 	bl	be80 <strlen>
    6886:	4601      	mov	r1, r0
    6888:	4620      	mov	r0, r4
    688a:	f003 fbab 	bl	9fe4 <usb_serial_write>
                byte count = 1;
    688e:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    6890:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 6948 <process_command(String)+0x2e4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6894:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    6898:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 694c <process_command(String)+0x2e8>
    689c:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    689e:	b115      	cbz	r5, 68a6 <process_command(String)+0x242>
    68a0:	075b      	lsls	r3, r3, #29
    68a2:	f000 8109 	beq.w	6ab8 <process_command(String)+0x454>
    68a6:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    68aa:	2100      	movs	r1, #0
    68ac:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    68ae:	3501      	adds	r5, #1
    68b0:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    68b4:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    68b6:	f7fb ff0d 	bl	26d4 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    68ba:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    68bc:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    68be:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    68c2:	4620      	mov	r0, r4
    68c4:	f004 fe94 	bl	b5f0 <sprintf>
    68c8:	4620      	mov	r0, r4
    68ca:	f005 fad9 	bl	be80 <strlen>
    68ce:	4601      	mov	r1, r0
    68d0:	4620      	mov	r0, r4
    68d2:	f003 fb87 	bl	9fe4 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    68d6:	b2eb      	uxtb	r3, r5
    68d8:	454b      	cmp	r3, r9
    68da:	d3e0      	bcc.n	689e <process_command(String)+0x23a>
    68dc:	2100      	movs	r1, #0
    68de:	4810      	ldr	r0, [pc, #64]	; (6920 <process_command(String)+0x2bc>)
    68e0:	e739      	b.n	6756 <process_command(String)+0xf2>
    68e2:	4d10      	ldr	r5, [pc, #64]	; (6924 <process_command(String)+0x2c0>)
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    68e4:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    68e8:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    68ec:	f7fb fea2 	bl	2634 <sample_at_CLK_rising_edge()>
    68f0:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    68f4:	f7fb fe9e 	bl	2634 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    68f8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    return(run_mode);
    68fc:	782c      	ldrb	r4, [r5, #0]
}
    68fe:	e6ef      	b.n	66e0 <process_command(String)+0x7c>
    6900:	9808      	ldr	r0, [sp, #32]
    6902:	2800      	cmp	r0, #0
    6904:	f000 80e5 	beq.w	6ad2 <process_command(String)+0x46e>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    6908:	220a      	movs	r2, #10
    690a:	2100      	movs	r1, #0
    690c:	f004 fd5e 	bl	b3cc <strtoul>
    6910:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    6912:	2803      	cmp	r0, #3
    6914:	f200 80b5 	bhi.w	6a82 <process_command(String)+0x41e>
                    addr_mode = (ADDR_MODE)a_mode;
    6918:	4b0a      	ldr	r3, [pc, #40]	; (6944 <process_command(String)+0x2e0>)
    691a:	7018      	strb	r0, [r3, #0]
    691c:	e720      	b.n	6760 <process_command(String)+0xfc>
    691e:	bf00      	nop
    6920:	20000488 	.word	0x20000488
    6924:	200188a2 	.word	0x200188a2
    6928:	20018888 	.word	0x20018888
    692c:	200053c8 	.word	0x200053c8
    6930:	200007f8 	.word	0x200007f8
    6934:	20004380 	.word	0x20004380
    6938:	20001250 	.word	0x20001250
    693c:	200007ac 	.word	0x200007ac
    6940:	200007fc 	.word	0x200007fc
    6944:	20018894 	.word	0x20018894
    6948:	20000808 	.word	0x20000808
    694c:	20000814 	.word	0x20000814
            Serial.println(String("Available Commands:\n\r")+
    6950:	496f      	ldr	r1, [pc, #444]	; (6b10 <process_command(String)+0x4ac>)
    6952:	a810      	add	r0, sp, #64	; 0x40
    6954:	f001 ff3e 	bl	87d4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    6958:	a910      	add	r1, sp, #64	; 0x40
    695a:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    695c:	2400      	movs	r4, #0
    695e:	f001 fec9 	bl	86f4 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    6962:	496c      	ldr	r1, [pc, #432]	; (6b14 <process_command(String)+0x4b0>)
    6964:	a814      	add	r0, sp, #80	; 0x50
    6966:	f001 ffd1 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    696a:	496b      	ldr	r1, [pc, #428]	; (6b18 <process_command(String)+0x4b4>)
    696c:	f001 ffce 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    6970:	496a      	ldr	r1, [pc, #424]	; (6b1c <process_command(String)+0x4b8>)
    6972:	f001 ffcb 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    6976:	496a      	ldr	r1, [pc, #424]	; (6b20 <process_command(String)+0x4bc>)
    6978:	f001 ffc8 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    697c:	4969      	ldr	r1, [pc, #420]	; (6b24 <process_command(String)+0x4c0>)
    697e:	f001 ffc5 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    6982:	4969      	ldr	r1, [pc, #420]	; (6b28 <process_command(String)+0x4c4>)
    6984:	f001 ffc2 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    6988:	4968      	ldr	r1, [pc, #416]	; (6b2c <process_command(String)+0x4c8>)
    698a:	f001 ffbf 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    698e:	4968      	ldr	r1, [pc, #416]	; (6b30 <process_command(String)+0x4cc>)
    6990:	f001 ffbc 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    6994:	4967      	ldr	r1, [pc, #412]	; (6b34 <process_command(String)+0x4d0>)
    6996:	f001 ffb9 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    699a:	4967      	ldr	r1, [pc, #412]	; (6b38 <process_command(String)+0x4d4>)
    699c:	f001 ffb6 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    69a0:	4966      	ldr	r1, [pc, #408]	; (6b3c <process_command(String)+0x4d8>)
    69a2:	f001 ffb3 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    69a6:	4966      	ldr	r1, [pc, #408]	; (6b40 <process_command(String)+0x4dc>)
    69a8:	f001 ffb0 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    69ac:	4965      	ldr	r1, [pc, #404]	; (6b44 <process_command(String)+0x4e0>)
    69ae:	f001 ffad 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    69b2:	4965      	ldr	r1, [pc, #404]	; (6b48 <process_command(String)+0x4e4>)
    69b4:	f001 ffaa 	bl	890c <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    69b8:	4964      	ldr	r1, [pc, #400]	; (6b4c <process_command(String)+0x4e8>)
    69ba:	f001 ffa7 	bl	890c <operator+(StringSumHelper const&, char const*)>
    69be:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    69c0:	4863      	ldr	r0, [pc, #396]	; (6b50 <process_command(String)+0x4ec>)
    69c2:	f001 fe4f 	bl	8664 <Print::print(String const&)>
    69c6:	4862      	ldr	r0, [pc, #392]	; (6b50 <process_command(String)+0x4ec>)
    69c8:	f001 fe72 	bl	86b0 <Print::println()>
class StringSumHelper : public String
    69cc:	a814      	add	r0, sp, #80	; 0x50
    69ce:	f001 fec5 	bl	875c <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    69d2:	a810      	add	r0, sp, #64	; 0x40
    69d4:	f001 fec2 	bl	875c <String::~String()>
            run_mode = WAITING;
    69d8:	4b5e      	ldr	r3, [pc, #376]	; (6b54 <process_command(String)+0x4f0>)
    69da:	701c      	strb	r4, [r3, #0]
            break;
    69dc:	e680      	b.n	66e0 <process_command(String)+0x7c>
	StringSumHelper(const char *p) : String(p) {}
    69de:	495e      	ldr	r1, [pc, #376]	; (6b58 <process_command(String)+0x4f4>)
    69e0:	a814      	add	r0, sp, #80	; 0x50
    69e2:	f001 fef7 	bl	87d4 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    69e6:	4621      	mov	r1, r4
    69e8:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    69ea:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    69ec:	f001 ff86 	bl	88fc <operator+(StringSumHelper const&, String const&)>
    69f0:	495a      	ldr	r1, [pc, #360]	; (6b5c <process_command(String)+0x4f8>)
    69f2:	f001 ff8b 	bl	890c <operator+(StringSumHelper const&, char const*)>
    69f6:	a904      	add	r1, sp, #16
    69f8:	f001 ff80 	bl	88fc <operator+(StringSumHelper const&, String const&)>
    69fc:	4958      	ldr	r1, [pc, #352]	; (6b60 <process_command(String)+0x4fc>)
    69fe:	f001 ff85 	bl	890c <operator+(StringSumHelper const&, char const*)>
    6a02:	a908      	add	r1, sp, #32
    6a04:	f001 ff7a 	bl	88fc <operator+(StringSumHelper const&, String const&)>
    6a08:	4955      	ldr	r1, [pc, #340]	; (6b60 <process_command(String)+0x4fc>)
    6a0a:	f001 ff7f 	bl	890c <operator+(StringSumHelper const&, char const*)>
    6a0e:	a90c      	add	r1, sp, #48	; 0x30
    6a10:	f001 ff74 	bl	88fc <operator+(StringSumHelper const&, String const&)>
    6a14:	4953      	ldr	r1, [pc, #332]	; (6b64 <process_command(String)+0x500>)
    6a16:	f001 ff79 	bl	890c <operator+(StringSumHelper const&, char const*)>
    6a1a:	4601      	mov	r1, r0
    6a1c:	484c      	ldr	r0, [pc, #304]	; (6b50 <process_command(String)+0x4ec>)
    6a1e:	f001 fe21 	bl	8664 <Print::print(String const&)>
    6a22:	484b      	ldr	r0, [pc, #300]	; (6b50 <process_command(String)+0x4ec>)
    6a24:	f001 fe44 	bl	86b0 <Print::println()>
class StringSumHelper : public String
    6a28:	a814      	add	r0, sp, #80	; 0x50
    6a2a:	f001 fe97 	bl	875c <String::~String()>
            run_mode = WAITING;
    6a2e:	4b49      	ldr	r3, [pc, #292]	; (6b54 <process_command(String)+0x4f0>)
    6a30:	701c      	strb	r4, [r3, #0]
            break;
    6a32:	e655      	b.n	66e0 <process_command(String)+0x7c>
            run_mode = SINGLE_STEP;
    6a34:	4b47      	ldr	r3, [pc, #284]	; (6b54 <process_command(String)+0x4f0>)
    6a36:	2401      	movs	r4, #1
    6a38:	701c      	strb	r4, [r3, #0]
            break;
    6a3a:	e651      	b.n	66e0 <process_command(String)+0x7c>
            run_mode = RESETTING;
    6a3c:	4d45      	ldr	r5, [pc, #276]	; (6b54 <process_command(String)+0x4f0>)
    6a3e:	2303      	movs	r3, #3
    6a40:	702b      	strb	r3, [r5, #0]
    6a42:	e74f      	b.n	68e4 <process_command(String)+0x280>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6a44:	4948      	ldr	r1, [pc, #288]	; (6b68 <process_command(String)+0x504>)
    6a46:	a808      	add	r0, sp, #32
    6a48:	f001 ff6e 	bl	8928 <String::equals(char const*) const>
                else if (arg1=="a") {
    6a4c:	2800      	cmp	r0, #0
    6a4e:	d044      	beq.n	6ada <process_command(String)+0x476>
                    register_a = value & 0xFF;
    6a50:	4b46      	ldr	r3, [pc, #280]	; (6b6c <process_command(String)+0x508>)
    6a52:	701c      	strb	r4, [r3, #0]
    6a54:	e6f4      	b.n	6840 <process_command(String)+0x1dc>
                    count = arg2.toInt() & 0xFF;
    6a56:	a80c      	add	r0, sp, #48	; 0x30
    6a58:	f002 f86a 	bl	8b30 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    6a5c:	4944      	ldr	r1, [pc, #272]	; (6b70 <process_command(String)+0x50c>)
                    count = arg2.toInt() & 0xFF;
    6a5e:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    6a62:	4632      	mov	r2, r6
    6a64:	4620      	mov	r0, r4
    6a66:	f004 fdc3 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6a6a:	4620      	mov	r0, r4
    6a6c:	f005 fa08 	bl	be80 <strlen>
    6a70:	4601      	mov	r1, r0
    6a72:	4620      	mov	r0, r4
    6a74:	f003 fab6 	bl	9fe4 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6a78:	f1b9 0f00 	cmp.w	r9, #0
    6a7c:	f47f af07 	bne.w	688e <process_command(String)+0x22a>
    6a80:	e72c      	b.n	68dc <process_command(String)+0x278>
	StringSumHelper(const char *p) : String(p) {}
    6a82:	493c      	ldr	r1, [pc, #240]	; (6b74 <process_command(String)+0x510>)
    6a84:	a814      	add	r0, sp, #80	; 0x50
    6a86:	f001 fea5 	bl	87d4 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    6a8a:	a908      	add	r1, sp, #32
    6a8c:	a814      	add	r0, sp, #80	; 0x50
    6a8e:	f001 ff35 	bl	88fc <operator+(StringSumHelper const&, String const&)>
    6a92:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6a94:	482e      	ldr	r0, [pc, #184]	; (6b50 <process_command(String)+0x4ec>)
    6a96:	f001 fde5 	bl	8664 <Print::print(String const&)>
    6a9a:	482d      	ldr	r0, [pc, #180]	; (6b50 <process_command(String)+0x4ec>)
    6a9c:	f001 fe08 	bl	86b0 <Print::println()>
class StringSumHelper : public String
    6aa0:	a814      	add	r0, sp, #80	; 0x50
    6aa2:	f001 fe5b 	bl	875c <String::~String()>
            run_mode = WAITING;
    6aa6:	e65b      	b.n	6760 <process_command(String)+0xfc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6aa8:	4833      	ldr	r0, [pc, #204]	; (6b78 <process_command(String)+0x514>)
    6aaa:	e671      	b.n	6790 <process_command(String)+0x12c>
    6aac:	4832      	ldr	r0, [pc, #200]	; (6b78 <process_command(String)+0x514>)
    6aae:	e64a      	b.n	6746 <process_command(String)+0xe2>
    6ab0:	4831      	ldr	r0, [pc, #196]	; (6b78 <process_command(String)+0x514>)
    6ab2:	e6d4      	b.n	685e <process_command(String)+0x1fa>
    6ab4:	4830      	ldr	r0, [pc, #192]	; (6b78 <process_command(String)+0x514>)
    6ab6:	e6b5      	b.n	6824 <process_command(String)+0x1c0>
                        sprintf(s,"\n\r[%04X] = ", addr);
    6ab8:	4659      	mov	r1, fp
    6aba:	4632      	mov	r2, r6
    6abc:	4620      	mov	r0, r4
    6abe:	f004 fd97 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ac2:	4620      	mov	r0, r4
    6ac4:	f005 f9dc 	bl	be80 <strlen>
    6ac8:	4601      	mov	r1, r0
    6aca:	4620      	mov	r0, r4
    6acc:	f003 fa8a 	bl	9fe4 <usb_serial_write>
    6ad0:	e6e9      	b.n	68a6 <process_command(String)+0x242>
    6ad2:	4829      	ldr	r0, [pc, #164]	; (6b78 <process_command(String)+0x514>)
    6ad4:	e718      	b.n	6908 <process_command(String)+0x2a4>
    6ad6:	4828      	ldr	r0, [pc, #160]	; (6b78 <process_command(String)+0x514>)
    6ad8:	e663      	b.n	67a2 <process_command(String)+0x13e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6ada:	4928      	ldr	r1, [pc, #160]	; (6b7c <process_command(String)+0x518>)
    6adc:	a808      	add	r0, sp, #32
    6ade:	f001 ff23 	bl	8928 <String::equals(char const*) const>
                else if (arg1=="x") {
    6ae2:	b120      	cbz	r0, 6aee <process_command(String)+0x48a>
                    register_x = value & 0xFF;
    6ae4:	4b26      	ldr	r3, [pc, #152]	; (6b80 <process_command(String)+0x51c>)
    6ae6:	701c      	strb	r4, [r3, #0]
    6ae8:	e6aa      	b.n	6840 <process_command(String)+0x1dc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6aea:	4823      	ldr	r0, [pc, #140]	; (6b78 <process_command(String)+0x514>)
    6aec:	e617      	b.n	671e <process_command(String)+0xba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6aee:	4925      	ldr	r1, [pc, #148]	; (6b84 <process_command(String)+0x520>)
    6af0:	a808      	add	r0, sp, #32
    6af2:	f001 ff19 	bl	8928 <String::equals(char const*) const>
                else if (arg1=="y") {
    6af6:	b110      	cbz	r0, 6afe <process_command(String)+0x49a>
                    register_y = value & 0xFF;
    6af8:	4b23      	ldr	r3, [pc, #140]	; (6b88 <process_command(String)+0x524>)
    6afa:	701c      	strb	r4, [r3, #0]
    6afc:	e6a0      	b.n	6840 <process_command(String)+0x1dc>
    6afe:	2239      	movs	r2, #57	; 0x39
    6b00:	4922      	ldr	r1, [pc, #136]	; (6b8c <process_command(String)+0x528>)
    6b02:	4813      	ldr	r0, [pc, #76]	; (6b50 <process_command(String)+0x4ec>)
    6b04:	f002 ff48 	bl	9998 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t println(const char s[])			{ return print(s) + println(); }
    6b08:	4811      	ldr	r0, [pc, #68]	; (6b50 <process_command(String)+0x4ec>)
    6b0a:	f001 fdd1 	bl	86b0 <Print::println()>
    6b0e:	e697      	b.n	6840 <process_command(String)+0x1dc>
    6b10:	200003ec 	.word	0x200003ec
    6b14:	20000404 	.word	0x20000404
    6b18:	20000440 	.word	0x20000440
    6b1c:	2000048c 	.word	0x2000048c
    6b20:	200004bc 	.word	0x200004bc
    6b24:	200004f0 	.word	0x200004f0
    6b28:	20000534 	.word	0x20000534
    6b2c:	2000056c 	.word	0x2000056c
    6b30:	200005b0 	.word	0x200005b0
    6b34:	20000600 	.word	0x20000600
    6b38:	2000063c 	.word	0x2000063c
    6b3c:	20000640 	.word	0x20000640
    6b40:	20000658 	.word	0x20000658
    6b44:	20000684 	.word	0x20000684
    6b48:	200006e4 	.word	0x200006e4
    6b4c:	20000740 	.word	0x20000740
    6b50:	20004380 	.word	0x20004380
    6b54:	200188a2 	.word	0x200188a2
    6b58:	2000081c 	.word	0x2000081c
    6b5c:	2000083c 	.word	0x2000083c
    6b60:	20000840 	.word	0x20000840
    6b64:	20000968 	.word	0x20000968
    6b68:	200007b0 	.word	0x200007b0
    6b6c:	2001889f 	.word	0x2001889f
    6b70:	200007fc 	.word	0x200007fc
    6b74:	2000078c 	.word	0x2000078c
    6b78:	20001250 	.word	0x20001250
    6b7c:	200007b4 	.word	0x200007b4
    6b80:	200188a0 	.word	0x200188a0
    6b84:	200007b8 	.word	0x200007b8
    6b88:	200188a1 	.word	0x200188a1
    6b8c:	200007bc 	.word	0x200007bc

00006b90 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    6b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b94:	f8df b140 	ldr.w	fp, [pc, #320]	; 6cd8 <loop+0x148>
    6b98:	b08d      	sub	sp, #52	; 0x34
    6b9a:	4e47      	ldr	r6, [pc, #284]	; (6cb8 <loop+0x128>)

    // Give Teensy 4.1 a moment
    delay(50);
    6b9c:	2032      	movs	r0, #50	; 0x32
    6b9e:	f8df 913c 	ldr.w	r9, [pc, #316]	; 6cdc <loop+0x14c>
    6ba2:	f001 ffcb 	bl	8b3c <delay>
    sample_at_CLK_rising_edge();
    6ba6:	4d45      	ldr	r5, [pc, #276]	; (6cbc <loop+0x12c>)
    6ba8:	f7fb fd44 	bl	2634 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    6bac:	f7fb fd42 	bl	2634 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    6bb0:	f7fb fd40 	bl	2634 <sample_at_CLK_rising_edge()>

    reset_sequence();
    6bb4:	f7fc faac 	bl	3110 <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    6bb8:	4b41      	ldr	r3, [pc, #260]	; (6cc0 <loop+0x130>)
    6bba:	781b      	ldrb	r3, [r3, #0]
    6bbc:	2b01      	cmp	r3, #1
    6bbe:	f000 81d3 	beq.w	6f68 <loop+0x3d8>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    6bc2:	f89b 3000 	ldrb.w	r3, [fp]
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	f040 81d5 	bne.w	6f76 <loop+0x3e6>
    6bcc:	4b3d      	ldr	r3, [pc, #244]	; (6cc4 <loop+0x134>)
    6bce:	781b      	ldrb	r3, [r3, #0]
    6bd0:	2b01      	cmp	r3, #1
    6bd2:	f000 81f4 	beq.w	6fbe <loop+0x42e>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6bd6:	4a3c      	ldr	r2, [pc, #240]	; (6cc8 <loop+0x138>)
        nmi_n_old = direct_nmi;
    6bd8:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6bdc:	7812      	ldrb	r2, [r2, #0]
    6bde:	2a01      	cmp	r2, #1
    6be0:	f000 81d2 	beq.w	6f88 <loop+0x3f8>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    6be4:	2100      	movs	r1, #0
    6be6:	8830      	ldrh	r0, [r6, #0]
    6be8:	f7fb fd74 	bl	26d4 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6bec:	4b37      	ldr	r3, [pc, #220]	; (6ccc <loop+0x13c>)
        next_instruction = read_byte(register_pc, false);
    6bee:	4601      	mov	r1, r0
    6bf0:	f889 0000 	strb.w	r0, [r9]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6bf4:	681b      	ldr	r3, [r3, #0]
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	f000 81cf 	beq.w	6f9a <loop+0x40a>
    6bfc:	782a      	ldrb	r2, [r5, #0]
    6bfe:	f8b6 a000 	ldrh.w	sl, [r6]
    6c02:	2a02      	cmp	r2, #2
    6c04:	f000 81d4 	beq.w	6fb0 <loop+0x420>
void loop() {
    6c08:	4650      	mov	r0, sl
    6c0a:	ac04      	add	r4, sp, #16
    6c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 6ce0 <loop+0x150>
    6c10:	4f2f      	ldr	r7, [pc, #188]	; (6cd0 <loop+0x140>)
    6c12:	e032      	b.n	6c7a <loop+0xea>
    6c14:	2101      	movs	r1, #1
    6c16:	4640      	mov	r0, r8
    6c18:	f003 f9e4 	bl	9fe4 <usb_serial_write>
    6c1c:	4638      	mov	r0, r7
    6c1e:	f001 fd47 	bl	86b0 <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    6c22:	4669      	mov	r1, sp
    6c24:	4620      	mov	r0, r4
    6c26:	f001 fd65 	bl	86f4 <String::String(String const&)>
    6c2a:	4620      	mov	r0, r4
    6c2c:	f7ff fd1a 	bl	6664 <process_command(String)>
    6c30:	7028      	strb	r0, [r5, #0]
    6c32:	4620      	mov	r0, r4
    6c34:	f001 fd92 	bl	875c <String::~String()>
                    last_command = c;
    6c38:	4669      	mov	r1, sp
    6c3a:	4826      	ldr	r0, [pc, #152]	; (6cd4 <loop+0x144>)
    6c3c:	f001 fdde 	bl	87fc <String::operator=(String const&)>
    6c40:	2101      	movs	r1, #1
    6c42:	4640      	mov	r0, r8
    6c44:	f003 f9ce 	bl	9fe4 <usb_serial_write>
    6c48:	4638      	mov	r0, r7
    6c4a:	f001 fd31 	bl	86b0 <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    6c4e:	782b      	ldrb	r3, [r5, #0]
    6c50:	2b02      	cmp	r3, #2
    6c52:	d009      	beq.n	6c68 <loop+0xd8>
    6c54:	8830      	ldrh	r0, [r6, #0]
    6c56:	4550      	cmp	r0, sl
    6c58:	d006      	beq.n	6c68 <loop+0xd8>
                    next_instruction = read_byte(register_pc, false);
    6c5a:	2100      	movs	r1, #0
    6c5c:	f7fb fd3a 	bl	26d4 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    6c60:	f8b6 a000 	ldrh.w	sl, [r6]
                    next_instruction = read_byte(register_pc, false);
    6c64:	f889 0000 	strb.w	r0, [r9]
                }
            } while (run_mode == WAITING);
    6c68:	4668      	mov	r0, sp
    6c6a:	f001 fd77 	bl	875c <String::~String()>
    6c6e:	782b      	ldrb	r3, [r5, #0]
    6c70:	2b00      	cmp	r3, #0
    6c72:	d145      	bne.n	6d00 <loop+0x170>
                display_next_instruction(register_pc, next_instruction);
    6c74:	8830      	ldrh	r0, [r6, #0]
    6c76:	f899 1000 	ldrb.w	r1, [r9]
    6c7a:	f7ff fb73 	bl	6364 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    6c7e:	4668      	mov	r0, sp
    6c80:	f7ff fc62 	bl	6548 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    6c84:	9b02      	ldr	r3, [sp, #8]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d1c4      	bne.n	6c14 <loop+0x84>
	inline unsigned int length(void) const {return len;}
    6c8a:	4912      	ldr	r1, [pc, #72]	; (6cd4 <loop+0x144>)
    6c8c:	688b      	ldr	r3, [r1, #8]
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d0c0      	beq.n	6c14 <loop+0x84>
	size_t println(const String &s)			{ return print(s) + println(); }
    6c92:	4638      	mov	r0, r7
    6c94:	f001 fce6 	bl	8664 <Print::print(String const&)>
    6c98:	4638      	mov	r0, r7
    6c9a:	f001 fd09 	bl	86b0 <Print::println()>
                    run_mode = process_command(last_command);
    6c9e:	490d      	ldr	r1, [pc, #52]	; (6cd4 <loop+0x144>)
    6ca0:	4620      	mov	r0, r4
    6ca2:	f001 fd27 	bl	86f4 <String::String(String const&)>
    6ca6:	4620      	mov	r0, r4
    6ca8:	f7ff fcdc 	bl	6664 <process_command(String)>
    6cac:	7028      	strb	r0, [r5, #0]
    6cae:	4620      	mov	r0, r4
    6cb0:	f001 fd54 	bl	875c <String::~String()>
    6cb4:	e7c4      	b.n	6c40 <loop+0xb0>
    6cb6:	bf00      	nop
    6cb8:	20018888 	.word	0x20018888
    6cbc:	200188a2 	.word	0x200188a2
    6cc0:	2001889a 	.word	0x2001889a
    6cc4:	20018898 	.word	0x20018898
    6cc8:	20018897 	.word	0x20018897
    6ccc:	200053c8 	.word	0x200053c8
    6cd0:	20004380 	.word	0x20004380
    6cd4:	200153f0 	.word	0x200153f0
    6cd8:	2000498f 	.word	0x2000498f
    6cdc:	2001889e 	.word	0x2001889e
    6ce0:	20000804 	.word	0x20000804
        virtual int read() { return usb_serial_getchar(); }
    6ce4:	f003 f958 	bl	9f98 <usb_serial_getchar>
        else {
            while (Serial.available() > 0) {
                // read the incoming byte:
                char b = Serial.read();

                switch(b) {
    6ce8:	b2c0      	uxtb	r0, r0
    6cea:	281b      	cmp	r0, #27
    6cec:	f000 815c 	beq.w	6fa8 <loop+0x418>
        virtual int available() { return usb_serial_available(); }
    6cf0:	f003 f90e 	bl	9f10 <usb_serial_available>
            while (Serial.available() > 0) {
    6cf4:	2800      	cmp	r0, #0
    6cf6:	dcf5      	bgt.n	6ce4 <loop+0x154>
                        run_mode = WAITING;
                }
            }
        }

        if (run_mode == WAITING) {
    6cf8:	782b      	ldrb	r3, [r5, #0]
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	f43f af5c 	beq.w	6bb8 <loop+0x28>
            // just transitioned to WAITING while running...
            // skip the rest of this loop
            continue;
        }

        if (run_mode == RESETTING) {
    6d00:	2b03      	cmp	r3, #3
    6d02:	f000 8161 	beq.w	6fc8 <loop+0x438>
            // to be called again, which executes the reset sequence
            break;
        }

        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    6d06:	2b01      	cmp	r3, #1
    6d08:	d105      	bne.n	6d16 <loop+0x186>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6d0a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6d0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            digitalWriteFast(PIN_SYNC, 0x1);

		uint16_t next_pc = 0;
        switch (next_instruction) {
    6d16:	f899 3000 	ldrb.w	r3, [r9]
    6d1a:	2bff      	cmp	r3, #255	; 0xff
    6d1c:	f201 8426 	bhi.w	856c <loop+0x19dc>
    6d20:	e8df f013 	tbh	[pc, r3, lsl #1]
    6d24:	01570c1d 	.word	0x01570c1d
    6d28:	01680155 	.word	0x01680155
    6d2c:	0177016d 	.word	0x0177016d
    6d30:	018d0188 	.word	0x018d0188
    6d34:	01970192 	.word	0x01970192
    6d38:	01b101ac 	.word	0x01b101ac
    6d3c:	01c001b6 	.word	0x01c001b6
    6d40:	01d601d1 	.word	0x01d601d1
    6d44:	01e601db 	.word	0x01e601db
    6d48:	01f80155 	.word	0x01f80155
    6d4c:	020701fd 	.word	0x020701fd
    6d50:	021d0218 	.word	0x021d0218
    6d54:	02350222 	.word	0x02350222
    6d58:	02470100 	.word	0x02470100
    6d5c:	0257024c 	.word	0x0257024c
    6d60:	026e0269 	.word	0x026e0269
    6d64:	02880273 	.word	0x02880273
    6d68:	02980155 	.word	0x02980155
    6d6c:	02a2029d 	.word	0x02a2029d
    6d70:	02b702b2 	.word	0x02b702b2
    6d74:	02c102bc 	.word	0x02c102bc
    6d78:	02da02d5 	.word	0x02da02d5
    6d7c:	02e402df 	.word	0x02e402df
    6d80:	02f902f4 	.word	0x02f902f4
    6d84:	031202fe 	.word	0x031202fe
    6d88:	056b0155 	.word	0x056b0155
    6d8c:	055a054f 	.word	0x055a054f
    6d90:	0523051d 	.word	0x0523051d
    6d94:	053d0529 	.word	0x053d0529
    6d98:	04d40100 	.word	0x04d40100
    6d9c:	04e404d9 	.word	0x04e404d9
    6da0:	04fa04f5 	.word	0x04fa04f5
    6da4:	050504ff 	.word	0x050504ff
    6da8:	05170155 	.word	0x05170155
    6dac:	044f0445 	.word	0x044f0445
    6db0:	04650460 	.word	0x04650460
    6db4:	046f046a 	.word	0x046f046a
    6db8:	04890484 	.word	0x04890484
    6dbc:	0493048e 	.word	0x0493048e
    6dc0:	04a904a4 	.word	0x04a904a4
    6dc4:	04b304ae 	.word	0x04b304ae
    6dc8:	04c50155 	.word	0x04c50155
    6dcc:	032304ca 	.word	0x032304ca
    6dd0:	03390334 	.word	0x03390334
    6dd4:	0351033e 	.word	0x0351033e
    6dd8:	03630100 	.word	0x03630100
    6ddc:	03730368 	.word	0x03730368
    6de0:	038a0385 	.word	0x038a0385
    6de4:	0394038f 	.word	0x0394038f
    6de8:	03a10155 	.word	0x03a10155
    6dec:	03b003a6 	.word	0x03b003a6
    6df0:	03c203bd 	.word	0x03c203bd
    6df4:	03cc03c7 	.word	0x03cc03c7
    6df8:	03e203dd 	.word	0x03e203dd
    6dfc:	03ec03e7 	.word	0x03ec03e7
    6e00:	03fe03f9 	.word	0x03fe03f9
    6e04:	0411040c 	.word	0x0411040c
    6e08:	041f0155 	.word	0x041f0155
    6e0c:	042e0424 	.word	0x042e0424
    6e10:	0440043b 	.word	0x0440043b
    6e14:	05850571 	.word	0x05850571
    6e18:	05940100 	.word	0x05940100
    6e1c:	05ae05a2 	.word	0x05ae05a2
    6e20:	05c305bd 	.word	0x05c305bd
    6e24:	05d505c9 	.word	0x05d505c9
    6e28:	05ee05e2 	.word	0x05ee05e2
    6e2c:	061505fe 	.word	0x061505fe
    6e30:	0643062c 	.word	0x0643062c
    6e34:	0673065d 	.word	0x0673065d
    6e38:	0694067f 	.word	0x0694067f
    6e3c:	06ad06a0 	.word	0x06ad06a0
    6e40:	06c706ba 	.word	0x06c706ba
    6e44:	06e206d7 	.word	0x06e206d7
    6e48:	07540155 	.word	0x07540155
    6e4c:	0747073a 	.word	0x0747073a
    6e50:	06fc06ef 	.word	0x06fc06ef
    6e54:	072d0718 	.word	0x072d0718
    6e58:	0772075f 	.word	0x0772075f
    6e5c:	078a077e 	.word	0x078a077e
    6e60:	07a20796 	.word	0x07a20796
    6e64:	07c107ae 	.word	0x07c107ae
    6e68:	07e307d0 	.word	0x07e307d0
    6e6c:	080307f4 	.word	0x080307f4
    6e70:	08210812 	.word	0x08210812
    6e74:	08470832 	.word	0x08470832
    6e78:	086f085a 	.word	0x086f085a
    6e7c:	088a087b 	.word	0x088a087b
    6e80:	08b508a6 	.word	0x08b508a6
    6e84:	08d208c6 	.word	0x08d208c6
    6e88:	08e20155 	.word	0x08e20155
    6e8c:	090308f4 	.word	0x090308f4
    6e90:	09210912 	.word	0x09210912
    6e94:	09460932 	.word	0x09460932
    6e98:	096b0956 	.word	0x096b0956
    6e9c:	09910981 	.word	0x09910981
    6ea0:	09b109a1 	.word	0x09b109a1
    6ea4:	09c909c3 	.word	0x09c909c3
    6ea8:	09e209d6 	.word	0x09e209d6
    6eac:	09ee09e8 	.word	0x09ee09e8
    6eb0:	0a0109fb 	.word	0x0a0109fb
    6eb4:	0a1d0a07 	.word	0x0a1d0a07
    6eb8:	0a460a23 	.word	0x0a460a23
    6ebc:	0a520a4c 	.word	0x0a520a4c
    6ec0:	0a650a5f 	.word	0x0a650a5f
    6ec4:	0a710a6b 	.word	0x0a710a6b
    6ec8:	0a7f0155 	.word	0x0a7f0155
    6ecc:	0a900a85 	.word	0x0a900a85
    6ed0:	0aa30a9d 	.word	0x0aa30a9d
    6ed4:	0abd0aa9 	.word	0x0abd0aa9
    6ed8:	0acb0100 	.word	0x0acb0100
    6edc:	0add0ad1 	.word	0x0add0ad1
    6ee0:	0af10aeb 	.word	0x0af10aeb
    6ee4:	0afd0af7 	.word	0x0afd0af7
    6ee8:	0b170b0b 	.word	0x0b170b0b
    6eec:	0b230b1d 	.word	0x0b230b1d
    6ef0:	0b370b31 	.word	0x0b370b31
    6ef4:	0b530b3d 	.word	0x0b530b3d
    6ef8:	0b650100 	.word	0x0b650100
    6efc:	0b710b6b 	.word	0x0b710b6b
    6f00:	0b850b7f 	.word	0x0b850b7f
    6f04:	0b910b8b 	.word	0x0b910b8b
    6f08:	0ba00155 	.word	0x0ba00155
    6f0c:	0bb10ba6 	.word	0x0bb10ba6
    6f10:	0bc50bbf 	.word	0x0bc50bbf
    6f14:	0bdf0bcb 	.word	0x0bdf0bcb
    6f18:	0bee0100 	.word	0x0bee0100
    6f1c:	0c080bf4 	.word	0x0c080bf4
    6f20:	0c170c24 	.word	0x0c170c24
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    6f24:	f7fc fd4e 	bl	39c4 <opcode_0xEA()>
    6f28:	4607      	mov	r7, r0
        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0);

        char buf[32];
        sprintf(buf, "%04X", next_pc);
    6f2a:	4602      	mov	r2, r0
        if (run_mode == SINGLE_STEP)
    6f2c:	782b      	ldrb	r3, [r5, #0]
    6f2e:	2b01      	cmp	r3, #1
    6f30:	d105      	bne.n	6f3e <loop+0x3ae>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6f32:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6f36:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    6f3a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        sprintf(buf, "%04X", next_pc);
    6f3e:	ac04      	add	r4, sp, #16
    6f40:	49b4      	ldr	r1, [pc, #720]	; (7214 <loop+0x684>)
    6f42:	4620      	mov	r0, r4
    6f44:	f004 fb54 	bl	b5f0 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6f48:	4620      	mov	r0, r4
    6f4a:	f004 ff99 	bl	be80 <strlen>
    6f4e:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6f50:	4620      	mov	r0, r4
    6f52:	f003 f847 	bl	9fe4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6f56:	48b0      	ldr	r0, [pc, #704]	; (7218 <loop+0x688>)
    6f58:	f001 fbaa 	bl	86b0 <Print::println()>
        if (direct_reset == 1) reset_sequence();
    6f5c:	4baf      	ldr	r3, [pc, #700]	; (721c <loop+0x68c>)
        Serial.println(buf);
        register_pc = next_pc;
    6f5e:	8037      	strh	r7, [r6, #0]
        if (direct_reset == 1) reset_sequence();
    6f60:	781b      	ldrb	r3, [r3, #0]
    6f62:	2b01      	cmp	r3, #1
    6f64:	f47f ae2d 	bne.w	6bc2 <loop+0x32>
    6f68:	f7fc f8d2 	bl	3110 <reset_sequence()>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    6f6c:	f89b 3000 	ldrb.w	r3, [fp]
    6f70:	2b00      	cmp	r3, #0
    6f72:	f43f ae2b 	beq.w	6bcc <loop+0x3c>
        nmi_n_old = direct_nmi;
    6f76:	4baa      	ldr	r3, [pc, #680]	; (7220 <loop+0x690>)
    6f78:	781b      	ldrb	r3, [r3, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6f7a:	4aaa      	ldr	r2, [pc, #680]	; (7224 <loop+0x694>)
        nmi_n_old = direct_nmi;
    6f7c:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6f80:	7812      	ldrb	r2, [r2, #0]
    6f82:	2a01      	cmp	r2, #1
    6f84:	f47f ae2e 	bne.w	6be4 <loop+0x54>
    6f88:	4ba7      	ldr	r3, [pc, #668]	; (7228 <loop+0x698>)
    6f8a:	7818      	ldrb	r0, [r3, #0]
    6f8c:	f010 0004 	ands.w	r0, r0, #4
    6f90:	f47f ae28 	bne.w	6be4 <loop+0x54>
    6f94:	f7fc fa98 	bl	34c8 <irq_handler(unsigned char)>
    6f98:	e624      	b.n	6be4 <loop+0x54>
        if (run_mode != RUNNING) {
    6f9a:	782b      	ldrb	r3, [r5, #0]
    6f9c:	2b02      	cmp	r3, #2
    6f9e:	f43f aea7 	beq.w	6cf0 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6fa2:	f8b6 a000 	ldrh.w	sl, [r6]
    6fa6:	e62f      	b.n	6c08 <loop+0x78>
                        run_mode = WAITING;
    6fa8:	f04f 0300 	mov.w	r3, #0
    6fac:	702b      	strb	r3, [r5, #0]
    6fae:	e69f      	b.n	6cf0 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6fb0:	4553      	cmp	r3, sl
    6fb2:	f47f ae9d 	bne.w	6cf0 <loop+0x160>
            run_mode = WAITING;
    6fb6:	f04f 0300 	mov.w	r3, #0
    6fba:	702b      	strb	r3, [r5, #0]
    6fbc:	e624      	b.n	6c08 <loop+0x78>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    6fbe:	f7fc f993 	bl	32e8 <nmi_handler()>
        nmi_n_old = direct_nmi;
    6fc2:	4b97      	ldr	r3, [pc, #604]	; (7220 <loop+0x690>)
    6fc4:	781b      	ldrb	r3, [r3, #0]
    6fc6:	e7d8      	b.n	6f7a <loop+0x3ea>
    }
}
    6fc8:	b00d      	add	sp, #52	; 0x34
    6fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next_pc = opcode_0x02();
    6fce:	f7ff f9c3 	bl	6358 <opcode_0x02()>
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    6fd2:	f7fb ff33 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    6fd6:	4b95      	ldr	r3, [pc, #596]	; (722c <loop+0x69c>)
    6fd8:	781a      	ldrb	r2, [r3, #0]
    6fda:	4310      	orrs	r0, r2
    6fdc:	b2c0      	uxtb	r0, r0
    6fde:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6fe0:	f7fb fe3c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x01].length);
    6fe4:	4b92      	ldr	r3, [pc, #584]	; (7230 <loop+0x6a0>)
    6fe6:	f893 7065 	ldrb.w	r7, [r3, #101]	; 0x65
    6fea:	8833      	ldrh	r3, [r6, #0]
    6fec:	441f      	add	r7, r3
    6fee:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    6ff0:	463a      	mov	r2, r7
				break; // OR - Indexed Indirect X
    6ff2:	e79b      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x03();
    6ff4:	f7fe f8ea 	bl	51cc <opcode_0x03()>
    6ff8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    6ffa:	4602      	mov	r2, r0
				break; // SLO - Indexed Indirect X
    6ffc:	e796      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage();
    6ffe:	f7fb fe4d 	bl	2c9c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    7002:	4b8b      	ldr	r3, [pc, #556]	; (7230 <loop+0x6a0>)
    7004:	f893 7101 	ldrb.w	r7, [r3, #257]	; 0x101
    7008:	8833      	ldrh	r3, [r6, #0]
    700a:	441f      	add	r7, r3
    700c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    700e:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    7010:	e78c      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_ZeroPage());
    7012:	f7fb fe43 	bl	2c9c <Fetch_ZeroPage()>
    7016:	4b85      	ldr	r3, [pc, #532]	; (722c <loop+0x69c>)
    7018:	781a      	ldrb	r2, [r3, #0]
    701a:	4310      	orrs	r0, r2
    701c:	b2c0      	uxtb	r0, r0
    701e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7020:	f7fb fe1c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x05].length);
    7024:	4b82      	ldr	r3, [pc, #520]	; (7230 <loop+0x6a0>)
    7026:	f893 7135 	ldrb.w	r7, [r3, #309]	; 0x135
    702a:	8833      	ldrh	r3, [r6, #0]
    702c:	441f      	add	r7, r3
    702e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7030:	463a      	mov	r2, r7
				break; // OR ZeroPage
    7032:	e77b      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x06();
    7034:	f7fc ff10 	bl	3e58 <opcode_0x06()>
    7038:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    703a:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    703c:	e776      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x07();
    703e:	f7fe f855 	bl	50ec <opcode_0x07()>
    7042:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7044:	4602      	mov	r2, r0
				break; // SLO - ZeroPage
    7046:	e771      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x08();
    7048:	f7fc fcd0 	bl	39ec <opcode_0x08()>
    704c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    704e:	4602      	mov	r2, r0
				break; // PHP - Push processor status to the stack
    7050:	e76c      	b.n	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7052:	8830      	ldrh	r0, [r6, #0]
    7054:	2100      	movs	r1, #0
    7056:	3001      	adds	r0, #1
    7058:	b280      	uxth	r0, r0
    705a:	f7fb fb3b 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    705e:	4b73      	ldr	r3, [pc, #460]	; (722c <loop+0x69c>)
    7060:	781a      	ldrb	r2, [r3, #0]
    7062:	4310      	orrs	r0, r2
    7064:	b2c0      	uxtb	r0, r0
    7066:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7068:	f7fb fdf8 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x09].length);
    706c:	4b70      	ldr	r3, [pc, #448]	; (7230 <loop+0x6a0>)
    706e:	f893 7205 	ldrb.w	r7, [r3, #517]	; 0x205
    7072:	8833      	ldrh	r3, [r6, #0]
    7074:	441f      	add	r7, r3
    7076:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7078:	463a      	mov	r2, r7
				break; // OR - Immediate
    707a:	e757      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x0A();
    707c:	f7fc fb1a 	bl	36b4 <opcode_0x0A()>
    7080:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7082:	4602      	mov	r2, r0
				break; // ASL A
    7084:	e752      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x0B();
    7086:	f7ff f89b 	bl	61c0 <opcode_0x0B()>
    708a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    708c:	4602      	mov	r2, r0
				break; // ANC - Immediate
    708e:	e74d      	b.n	6f2c <loop+0x39c>
    Fetch_Absolute();
    7090:	f7fb fe58 	bl	2d44 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    7094:	4b66      	ldr	r3, [pc, #408]	; (7230 <loop+0x6a0>)
    7096:	f893 72a1 	ldrb.w	r7, [r3, #673]	; 0x2a1
    709a:	8833      	ldrh	r3, [r6, #0]
    709c:	441f      	add	r7, r3
    709e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    70a0:	463a      	mov	r2, r7
				break; // NOP - Absolute
    70a2:	e743      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_Absolute());
    70a4:	f7fb fe4e 	bl	2d44 <Fetch_Absolute()>
    70a8:	4b60      	ldr	r3, [pc, #384]	; (722c <loop+0x69c>)
    70aa:	781a      	ldrb	r2, [r3, #0]
    70ac:	4310      	orrs	r0, r2
    70ae:	b2c0      	uxtb	r0, r0
    70b0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    70b2:	f7fb fdd3 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0D].length);
    70b6:	4b5e      	ldr	r3, [pc, #376]	; (7230 <loop+0x6a0>)
    70b8:	f893 72d5 	ldrb.w	r7, [r3, #725]	; 0x2d5
    70bc:	8833      	ldrh	r3, [r6, #0]
    70be:	441f      	add	r7, r3
    70c0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    70c2:	463a      	mov	r2, r7
				break; // OR - Absolute
    70c4:	e732      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x0E();
    70c6:	f7fc ff2d 	bl	3f24 <opcode_0x0E()>
    70ca:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70cc:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute
    70ce:	e72d      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x0F();
    70d0:	f7fe f8e4 	bl	529c <opcode_0x0F()>
    70d4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    70d6:	4602      	mov	r2, r0
				break; // SLO - Absolute
    70d8:	e728      	b.n	6f2c <loop+0x39c>
    if ((flag_n) == 0) Branch_Taken();
    70da:	4b53      	ldr	r3, [pc, #332]	; (7228 <loop+0x698>)
    70dc:	f993 3000 	ldrsb.w	r3, [r3]
    70e0:	2b00      	cmp	r3, #0
    70e2:	f2c1 825d 	blt.w	85a0 <loop+0x1a10>
    70e6:	f7fd faff 	bl	46e8 <Branch_Taken()>
    return(register_pc);
    70ea:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    70ec:	463a      	mov	r2, r7
				break; // BNE - Branch on Zero Clear
    70ee:	e71d      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    70f0:	2001      	movs	r0, #1
    70f2:	f7fb fecd 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    70f6:	4b4d      	ldr	r3, [pc, #308]	; (722c <loop+0x69c>)
    70f8:	781a      	ldrb	r2, [r3, #0]
    70fa:	4310      	orrs	r0, r2
    70fc:	b2c0      	uxtb	r0, r0
    70fe:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7100:	f7fb fdac 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x11].length);
    7104:	4b4a      	ldr	r3, [pc, #296]	; (7230 <loop+0x6a0>)
    7106:	f893 73a5 	ldrb.w	r7, [r3, #933]	; 0x3a5
    710a:	8833      	ldrh	r3, [r6, #0]
    710c:	441f      	add	r7, r3
    710e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7110:	463a      	mov	r2, r7
				break; // OR Indirect Indexed  Y
    7112:	e70b      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x13();
    7114:	f7fe f88e 	bl	5234 <opcode_0x13()>
    7118:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    711a:	4602      	mov	r2, r0
				break; // Indirect Indexed  Y
    711c:	e706      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    711e:	f7fb fdd1 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    7122:	4b43      	ldr	r3, [pc, #268]	; (7230 <loop+0x6a0>)
    7124:	f893 7441 	ldrb.w	r7, [r3, #1089]	; 0x441
    7128:	8833      	ldrh	r3, [r6, #0]
    712a:	441f      	add	r7, r3
    712c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    712e:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    7130:	e6fc      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_ZeroPage_X());
    7132:	f7fb fdc7 	bl	2cc4 <Fetch_ZeroPage_X()>
    7136:	4b3d      	ldr	r3, [pc, #244]	; (722c <loop+0x69c>)
    7138:	781a      	ldrb	r2, [r3, #0]
    713a:	4310      	orrs	r0, r2
    713c:	b2c0      	uxtb	r0, r0
    713e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7140:	f7fb fd8c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x15].length);
    7144:	4b3a      	ldr	r3, [pc, #232]	; (7230 <loop+0x6a0>)
    7146:	f893 7475 	ldrb.w	r7, [r3, #1141]	; 0x475
    714a:	8833      	ldrh	r3, [r6, #0]
    714c:	441f      	add	r7, r3
    714e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7150:	463a      	mov	r2, r7
				break; // OR - ZeroPage,X
    7152:	e6eb      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x16();
    7154:	f7fc feb8 	bl	3ec8 <opcode_0x16()>
    7158:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    715a:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    715c:	e6e6      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x17();
    715e:	f7fe f801 	bl	5164 <opcode_0x17()>
    7162:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7164:	4602      	mov	r2, r0
				break; // SLO - ZeroPage , X
    7166:	e6e1      	b.n	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7168:	8830      	ldrh	r0, [r6, #0]
    716a:	2100      	movs	r1, #0
    716c:	3001      	adds	r0, #1
    716e:	b280      	uxth	r0, r0
    7170:	f7fb fab0 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x18].length);
    7174:	4b2e      	ldr	r3, [pc, #184]	; (7230 <loop+0x6a0>)
    register_flags = register_flags & 0xFE;
    7176:	4a2c      	ldr	r2, [pc, #176]	; (7228 <loop+0x698>)
    return(register_pc + opcode_info[0x18].length);
    7178:	f893 7511 	ldrb.w	r7, [r3, #1297]	; 0x511
    717c:	8833      	ldrh	r3, [r6, #0]
    717e:	441f      	add	r7, r3
    register_flags = register_flags & 0xFE;
    7180:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    7182:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xFE;
    7184:	f023 0301 	bic.w	r3, r3, #1
    7188:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    718a:	463a      	mov	r2, r7
				break; // CLC
    718c:	e6ce      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_Absolute_Y(1));
    718e:	2001      	movs	r0, #1
    7190:	f7fb fe24 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    7194:	4b25      	ldr	r3, [pc, #148]	; (722c <loop+0x69c>)
    7196:	781a      	ldrb	r2, [r3, #0]
    7198:	4310      	orrs	r0, r2
    719a:	b2c0      	uxtb	r0, r0
    719c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    719e:	f7fb fd5d 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x19].length);
    71a2:	4b23      	ldr	r3, [pc, #140]	; (7230 <loop+0x6a0>)
    71a4:	f893 7545 	ldrb.w	r7, [r3, #1349]	; 0x545
    71a8:	8833      	ldrh	r3, [r6, #0]
    71aa:	441f      	add	r7, r3
    71ac:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    71ae:	463a      	mov	r2, r7
				break; // OR - Absolute,Y
    71b0:	e6bc      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x1B();
    71b2:	f7fe f8db 	bl	536c <opcode_0x1B()>
    71b6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    71b8:	4602      	mov	r2, r0
				break; // SLO - Absolute , Y
    71ba:	e6b7      	b.n	6f2c <loop+0x39c>
    Fetch_Absolute_X(1);
    71bc:	2001      	movs	r0, #1
    71be:	f7fb fddd 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    71c2:	4b1b      	ldr	r3, [pc, #108]	; (7230 <loop+0x6a0>)
    71c4:	f893 75e1 	ldrb.w	r7, [r3, #1505]	; 0x5e1
    71c8:	8833      	ldrh	r3, [r6, #0]
    71ca:	441f      	add	r7, r3
    71cc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    71ce:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    71d0:	e6ac      	b.n	6f2c <loop+0x39c>
    register_a = register_a | (Fetch_Absolute_X(1));
    71d2:	2001      	movs	r0, #1
    71d4:	f7fb fdd2 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    71d8:	4b14      	ldr	r3, [pc, #80]	; (722c <loop+0x69c>)
    71da:	781a      	ldrb	r2, [r3, #0]
    71dc:	4310      	orrs	r0, r2
    71de:	b2c0      	uxtb	r0, r0
    71e0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    71e2:	f7fb fd3b 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x1D].length);
    71e6:	4b12      	ldr	r3, [pc, #72]	; (7230 <loop+0x6a0>)
    71e8:	f893 7615 	ldrb.w	r7, [r3, #1557]	; 0x615
    71ec:	8833      	ldrh	r3, [r6, #0]
    71ee:	441f      	add	r7, r3
    71f0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    71f2:	463a      	mov	r2, r7
				break; // OR - Absolute,X
    71f4:	e69a      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x1E();
    71f6:	f7fc fec3 	bl	3f80 <opcode_0x1E()>
    71fa:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    71fc:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    71fe:	e695      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x1F();
    7200:	f7fe f880 	bl	5304 <opcode_0x1F()>
    7204:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7206:	4602      	mov	r2, r0
				break; // SLO - Absolute , X
    7208:	e690      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x20();
    720a:	f7fd fd17 	bl	4c3c <opcode_0x20()>
    720e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7210:	4602      	mov	r2, r0
				break; // JSR - Jump to Subroutine
    7212:	e68b      	b.n	6f2c <loop+0x39c>
    7214:	20000880 	.word	0x20000880
    7218:	20004380 	.word	0x20004380
    721c:	2001889a 	.word	0x2001889a
    7220:	20018898 	.word	0x20018898
    7224:	20018897 	.word	0x20018897
    7228:	20004990 	.word	0x20004990
    722c:	2001889f 	.word	0x2001889f
    7230:	20015418 	.word	0x20015418
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    7234:	f7fb fe02 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    7238:	4bbc      	ldr	r3, [pc, #752]	; (752c <loop+0x99c>)
    723a:	781a      	ldrb	r2, [r3, #0]
    723c:	4010      	ands	r0, r2
    723e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7240:	f7fb fd0c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x21].length);
    7244:	4bba      	ldr	r3, [pc, #744]	; (7530 <loop+0x9a0>)
    7246:	f893 76e5 	ldrb.w	r7, [r3, #1765]	; 0x6e5
    724a:	8833      	ldrh	r3, [r6, #0]
    724c:	441f      	add	r7, r3
    724e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7250:	463a      	mov	r2, r7
				break; // AND - Indexed Indirect
    7252:	e66b      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x23();
    7254:	f7fe f934 	bl	54c0 <opcode_0x23()>
    7258:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    725a:	4602      	mov	r2, r0
				break; // RLA - Indexed Indirect X
    725c:	e666      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x24();
    725e:	f7fc fc63 	bl	3b28 <opcode_0x24()>
    7262:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7264:	4602      	mov	r2, r0
				break; // BIT - ZeroPage
    7266:	e661      	b.n	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_ZeroPage());
    7268:	f7fb fd18 	bl	2c9c <Fetch_ZeroPage()>
    726c:	4baf      	ldr	r3, [pc, #700]	; (752c <loop+0x99c>)
    726e:	781a      	ldrb	r2, [r3, #0]
    7270:	4010      	ands	r0, r2
    7272:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7274:	f7fb fcf2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x25].length);
    7278:	4bad      	ldr	r3, [pc, #692]	; (7530 <loop+0x9a0>)
    727a:	f893 77b5 	ldrb.w	r7, [r3, #1973]	; 0x7b5
    727e:	8833      	ldrh	r3, [r6, #0]
    7280:	441f      	add	r7, r3
    7282:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7284:	463a      	mov	r2, r7
				break; // AND - ZeroPage
    7286:	e651      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x26();
    7288:	f7fd f962 	bl	4550 <opcode_0x26()>
    728c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    728e:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage
    7290:	e64c      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x27();
    7292:	f7fe f89f 	bl	53d4 <opcode_0x27()>
    7296:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7298:	4602      	mov	r2, r0
				break; // RLA - ZeroPage
    729a:	e647      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x28();
    729c:	f7fc fbec 	bl	3a78 <opcode_0x28()>
    72a0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72a2:	4602      	mov	r2, r0
				break; // PLP - Pop processor status from the stack
    72a4:	e642      	b.n	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    72a6:	8830      	ldrh	r0, [r6, #0]
    72a8:	2100      	movs	r1, #0
    72aa:	3001      	adds	r0, #1
    72ac:	b280      	uxth	r0, r0
    72ae:	f7fb fa11 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    72b2:	4b9e      	ldr	r3, [pc, #632]	; (752c <loop+0x99c>)
    72b4:	781a      	ldrb	r2, [r3, #0]
    72b6:	4010      	ands	r0, r2
    72b8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    72ba:	f7fb fccf 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x29].length);
    72be:	4b9c      	ldr	r3, [pc, #624]	; (7530 <loop+0x9a0>)
    72c0:	f893 7885 	ldrb.w	r7, [r3, #2181]	; 0x885
    72c4:	8833      	ldrh	r3, [r6, #0]
    72c6:	441f      	add	r7, r3
    72c8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    72ca:	463a      	mov	r2, r7
				break; // AND - Immediate
    72cc:	e62e      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x2A();
    72ce:	f7fc fa69 	bl	37a4 <opcode_0x2A()>
    72d2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72d4:	4602      	mov	r2, r0
				break; // ROL A
    72d6:	e629      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x2B();
    72d8:	f7fe ff98 	bl	620c <opcode_0x2B()>
    72dc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72de:	4602      	mov	r2, r0
				break; // ANC - Immediate
    72e0:	e624      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x2C();
    72e2:	f7fc fc51 	bl	3b88 <opcode_0x2C()>
    72e6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    72e8:	4602      	mov	r2, r0
				break; // BIT - Absolute
    72ea:	e61f      	b.n	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_Absolute());
    72ec:	f7fb fd2a 	bl	2d44 <Fetch_Absolute()>
    72f0:	4b8e      	ldr	r3, [pc, #568]	; (752c <loop+0x99c>)
    72f2:	781a      	ldrb	r2, [r3, #0]
    72f4:	4010      	ands	r0, r2
    72f6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    72f8:	f7fb fcb0 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2D].length);
    72fc:	4b8c      	ldr	r3, [pc, #560]	; (7530 <loop+0x9a0>)
    72fe:	f893 7955 	ldrb.w	r7, [r3, #2389]	; 0x955
    7302:	8833      	ldrh	r3, [r6, #0]
    7304:	441f      	add	r7, r3
    7306:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7308:	463a      	mov	r2, r7
				break; // AND - Absolute
    730a:	e60f      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x2E();
    730c:	f7fd f98a 	bl	4624 <opcode_0x2E()>
    7310:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7312:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute
    7314:	e60a      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x2F();
    7316:	f7fe f93f 	bl	5598 <opcode_0x2F()>
    731a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    731c:	4602      	mov	r2, r0
				break; // RLA - Absolute
    731e:	e605      	b.n	6f2c <loop+0x39c>
    if ((flag_n) == 1) Branch_Taken();
    7320:	4b84      	ldr	r3, [pc, #528]	; (7534 <loop+0x9a4>)
    7322:	781b      	ldrb	r3, [r3, #0]
    7324:	09db      	lsrs	r3, r3, #7
    7326:	f041 8157 	bne.w	85d8 <loop+0x1a48>
        register_pc = register_pc + opcode_info[0x30].length;
    732a:	4b81      	ldr	r3, [pc, #516]	; (7530 <loop+0x9a0>)
    return read_byte(register_pc+offset, false);
    732c:	2100      	movs	r1, #0
    732e:	8832      	ldrh	r2, [r6, #0]
    7330:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
    7334:	4413      	add	r3, r2
    7336:	b29b      	uxth	r3, r3
    7338:	8033      	strh	r3, [r6, #0]
    733a:	3301      	adds	r3, #1
    733c:	b298      	uxth	r0, r3
    733e:	f7fb f9c9 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc);
    7342:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7344:	463a      	mov	r2, r7
				break; // BMI - Branch on Minus (N Flag Set)
    7346:	e5f1      	b.n	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    7348:	2001      	movs	r0, #1
    734a:	f7fb fda1 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    734e:	4b77      	ldr	r3, [pc, #476]	; (752c <loop+0x99c>)
    7350:	781a      	ldrb	r2, [r3, #0]
    7352:	4010      	ands	r0, r2
    7354:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7356:	f7fb fc81 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x31].length);
    735a:	4b75      	ldr	r3, [pc, #468]	; (7530 <loop+0x9a0>)
    735c:	f893 7a25 	ldrb.w	r7, [r3, #2597]	; 0xa25
    7360:	8833      	ldrh	r3, [r6, #0]
    7362:	441f      	add	r7, r3
    7364:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7366:	463a      	mov	r2, r7
				break; // AND - Indirect Indexed
    7368:	e5e0      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_ZeroPage_X());
    736a:	f7fb fcab 	bl	2cc4 <Fetch_ZeroPage_X()>
    736e:	4b6f      	ldr	r3, [pc, #444]	; (752c <loop+0x99c>)
    7370:	781a      	ldrb	r2, [r3, #0]
    7372:	4050      	eors	r0, r2
    7374:	b2c0      	uxtb	r0, r0
    7376:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7378:	f7fb fc70 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x55].length);
    737c:	4b6e      	ldr	r3, [pc, #440]	; (7538 <loop+0x9a8>)
    737e:	f893 7175 	ldrb.w	r7, [r3, #373]	; 0x175
    7382:	8833      	ldrh	r3, [r6, #0]
    7384:	441f      	add	r7, r3
    7386:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7388:	463a      	mov	r2, r7
				break; // EOR - ZeroPage,X
    738a:	e5cf      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x56();
    738c:	f7fc ff86 	bl	429c <opcode_0x56()>
    7390:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7392:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage , X
    7394:	e5ca      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x57();
    7396:	f7fe f9dd 	bl	5754 <opcode_0x57()>
    739a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    739c:	4602      	mov	r2, r0
				break; // SRE - ZeroPage , X
    739e:	e5c5      	b.n	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    73a0:	8830      	ldrh	r0, [r6, #0]
    73a2:	2100      	movs	r1, #0
    73a4:	3001      	adds	r0, #1
    73a6:	b280      	uxth	r0, r0
    73a8:	f7fb f994 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x58].length);
    73ac:	4b62      	ldr	r3, [pc, #392]	; (7538 <loop+0x9a8>)
    register_flags = register_flags & 0xFB;
    73ae:	4a61      	ldr	r2, [pc, #388]	; (7534 <loop+0x9a4>)
    return(register_pc + opcode_info[0x58].length);
    73b0:	f893 7211 	ldrb.w	r7, [r3, #529]	; 0x211
    73b4:	8833      	ldrh	r3, [r6, #0]
    73b6:	441f      	add	r7, r3
    register_flags = register_flags & 0xFB;
    73b8:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    73ba:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xFB;
    73bc:	f023 0304 	bic.w	r3, r3, #4
    73c0:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    73c2:	463a      	mov	r2, r7
				break; // CLI
    73c4:	e5b2      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    73c6:	2001      	movs	r0, #1
    73c8:	f7fb fd08 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    73cc:	4b57      	ldr	r3, [pc, #348]	; (752c <loop+0x99c>)
    73ce:	781a      	ldrb	r2, [r3, #0]
    73d0:	4050      	eors	r0, r2
    73d2:	b2c0      	uxtb	r0, r0
    73d4:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    73d6:	f7fb fc41 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x59].length);
    73da:	4b57      	ldr	r3, [pc, #348]	; (7538 <loop+0x9a8>)
    73dc:	f893 7245 	ldrb.w	r7, [r3, #581]	; 0x245
    73e0:	8833      	ldrh	r3, [r6, #0]
    73e2:	441f      	add	r7, r3
    73e4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    73e6:	463a      	mov	r2, r7
				break; // EOR - Absolute,Y
    73e8:	e5a0      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x5B();
    73ea:	f7fe fab1 	bl	5950 <opcode_0x5B()>
    73ee:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    73f0:	4602      	mov	r2, r0
				break; // RE - Absolute , Y
    73f2:	e59b      	b.n	6f2c <loop+0x39c>
    Fetch_Absolute_X(1);
    73f4:	2001      	movs	r0, #1
    73f6:	f7fb fcc1 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    73fa:	4b4f      	ldr	r3, [pc, #316]	; (7538 <loop+0x9a8>)
    73fc:	f893 72e1 	ldrb.w	r7, [r3, #737]	; 0x2e1
    7400:	8833      	ldrh	r3, [r6, #0]
    7402:	441f      	add	r7, r3
    7404:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7406:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    7408:	e590      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_Absolute_X(1));
    740a:	2001      	movs	r0, #1
    740c:	f7fb fcb6 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    7410:	4b46      	ldr	r3, [pc, #280]	; (752c <loop+0x99c>)
    7412:	781a      	ldrb	r2, [r3, #0]
    7414:	4050      	eors	r0, r2
    7416:	b2c0      	uxtb	r0, r0
    7418:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    741a:	f7fb fc1f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x5D].length);
    741e:	4b46      	ldr	r3, [pc, #280]	; (7538 <loop+0x9a8>)
    7420:	f893 7315 	ldrb.w	r7, [r3, #789]	; 0x315
    7424:	8833      	ldrh	r3, [r6, #0]
    7426:	441f      	add	r7, r3
    7428:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    742a:	463a      	mov	r2, r7
				break; // EOR - Absolute,X
    742c:	e57e      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x5E();
    742e:	f7fc ff8f 	bl	4350 <opcode_0x5E()>
    7432:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7434:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute , X
    7436:	e579      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x5F();
    7438:	f7fe fa56 	bl	58e8 <opcode_0x5F()>
    743c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    743e:	4602      	mov	r2, r0
				break; // SRE - Absolute , X
    7440:	e574      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x60();
    7442:	f7fd fd8f 	bl	4f64 <opcode_0x60()>
    7446:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7448:	4602      	mov	r2, r0
				break; // RTS - Return from Subroutine
    744a:	e56f      	b.n	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    744c:	f7fb fcf6 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    7450:	b280      	uxth	r0, r0
    7452:	f7fc f9d3 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    7456:	4b38      	ldr	r3, [pc, #224]	; (7538 <loop+0x9a8>)
    7458:	f893 73e5 	ldrb.w	r7, [r3, #997]	; 0x3e5
    745c:	8833      	ldrh	r3, [r6, #0]
    745e:	441f      	add	r7, r3
    7460:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7462:	463a      	mov	r2, r7
				break; // ADC - Indexed Indirect X
    7464:	e562      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x63();
    7466:	f7fe fb0d 	bl	5a84 <opcode_0x63()>
    746a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    746c:	4602      	mov	r2, r0
				break; // RRA - Indexed Indirect X
    746e:	e55d      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage();
    7470:	f7fb fc14 	bl	2c9c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    7474:	4b30      	ldr	r3, [pc, #192]	; (7538 <loop+0x9a8>)
    7476:	f893 7481 	ldrb.w	r7, [r3, #1153]	; 0x481
    747a:	8833      	ldrh	r3, [r6, #0]
    747c:	441f      	add	r7, r3
    747e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7480:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    7482:	e553      	b.n	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_ZeroPage());
    7484:	f7fb fc0a 	bl	2c9c <Fetch_ZeroPage()>
    7488:	b280      	uxth	r0, r0
    748a:	f7fc f9b7 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    748e:	4b2a      	ldr	r3, [pc, #168]	; (7538 <loop+0x9a8>)
    7490:	f893 74b5 	ldrb.w	r7, [r3, #1205]	; 0x4b5
    7494:	8833      	ldrh	r3, [r6, #0]
    7496:	441f      	add	r7, r3
    7498:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    749a:	463a      	mov	r2, r7
				break; // ADC - ZeroPage
    749c:	e546      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x66();
    749e:	f7fc ff85 	bl	43ac <opcode_0x66()>
    74a2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74a4:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage
    74a6:	e541      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x67();
    74a8:	f7fe fa86 	bl	59b8 <opcode_0x67()>
    74ac:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74ae:	4602      	mov	r2, r0
				break; // RRA - ZeroPage
    74b0:	e53c      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x68();
    74b2:	f7fc fb0d 	bl	3ad0 <opcode_0x68()>
    74b6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74b8:	4602      	mov	r2, r0
				break; // PLA - Pop Accumulator from the stack
    74ba:	e537      	b.n	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    74bc:	8830      	ldrh	r0, [r6, #0]
    74be:	2100      	movs	r1, #0
    74c0:	3001      	adds	r0, #1
    74c2:	b280      	uxth	r0, r0
    74c4:	f7fb f906 	bl	26d4 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    74c8:	b280      	uxth	r0, r0
    74ca:	f7fc f997 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    74ce:	4b1a      	ldr	r3, [pc, #104]	; (7538 <loop+0x9a8>)
    74d0:	f893 7585 	ldrb.w	r7, [r3, #1413]	; 0x585
    74d4:	8833      	ldrh	r3, [r6, #0]
    74d6:	441f      	add	r7, r3
    74d8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    74da:	463a      	mov	r2, r7
				break; // ADC - Immediate
    74dc:	e526      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x6A();
    74de:	f7fc f937 	bl	3750 <opcode_0x6A()>
    74e2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74e4:	4602      	mov	r2, r0
				break; // ROR A
    74e6:	e521      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x6B();
    74e8:	f7fe fee0 	bl	62ac <opcode_0x6B()>
    74ec:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74ee:	4602      	mov	r2, r0
				break; // ARR - Immediate
    74f0:	e51c      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x6C();
    74f2:	f7fd fae5 	bl	4ac0 <opcode_0x6C()>
    74f6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    74f8:	4602      	mov	r2, r0
				break; // JMP - Jump Indirect
    74fa:	e517      	b.n	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_Absolute());
    74fc:	f7fb fc22 	bl	2d44 <Fetch_Absolute()>
    7500:	b280      	uxth	r0, r0
    7502:	f7fc f97b 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    7506:	4b0c      	ldr	r3, [pc, #48]	; (7538 <loop+0x9a8>)
    7508:	f893 7655 	ldrb.w	r7, [r3, #1621]	; 0x655
    750c:	8833      	ldrh	r3, [r6, #0]
    750e:	441f      	add	r7, r3
    7510:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7512:	463a      	mov	r2, r7
				break; // ADC - Absolute
    7514:	e50a      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x6E();
    7516:	f7fc ffb7 	bl	4488 <opcode_0x6E()>
    751a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    751c:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute
    751e:	e505      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x6F();
    7520:	f7fe fb0e 	bl	5b40 <opcode_0x6F()>
    7524:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7526:	4602      	mov	r2, r0
				break; // RRA - Absolute
    7528:	e500      	b.n	6f2c <loop+0x39c>
    752a:	bf00      	nop
    752c:	2001889f 	.word	0x2001889f
    7530:	20015418 	.word	0x20015418
    7534:	20004990 	.word	0x20004990
    7538:	20016418 	.word	0x20016418
				next_pc = opcode_0x70();
    753c:	f7fd f9d2 	bl	48e4 <opcode_0x70()>
    7540:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7542:	4602      	mov	r2, r0
				break; // BVS - Branch on Overflow Set
    7544:	e4f2      	b.n	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    7546:	2001      	movs	r0, #1
    7548:	f7fb fca2 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    754c:	b280      	uxth	r0, r0
    754e:	f7fc f955 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    7552:	4bc1      	ldr	r3, [pc, #772]	; (7858 <loop+0xcc8>)
    7554:	f893 7725 	ldrb.w	r7, [r3, #1829]	; 0x725
    7558:	8833      	ldrh	r3, [r6, #0]
    755a:	441f      	add	r7, r3
    755c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    755e:	463a      	mov	r2, r7
				break; // ADC - Indirect Indexed  Y
    7560:	e4e4      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x73();
    7562:	f7fe fabd 	bl	5ae0 <opcode_0x73()>
    7566:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7568:	4602      	mov	r2, r0
				break; // RRA - Indirect Indexed  Y
    756a:	e4df      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    756c:	f7fb fbaa 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    7570:	4bb9      	ldr	r3, [pc, #740]	; (7858 <loop+0xcc8>)
    7572:	f893 77c1 	ldrb.w	r7, [r3, #1985]	; 0x7c1
    7576:	8833      	ldrh	r3, [r6, #0]
    7578:	441f      	add	r7, r3
    757a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    757c:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    757e:	e4d5      	b.n	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_ZeroPage_X());
    7580:	f7fb fba0 	bl	2cc4 <Fetch_ZeroPage_X()>
    7584:	b280      	uxth	r0, r0
    7586:	f7fc f939 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    758a:	4bb3      	ldr	r3, [pc, #716]	; (7858 <loop+0xcc8>)
    758c:	f893 77f5 	ldrb.w	r7, [r3, #2037]	; 0x7f5
    7590:	8833      	ldrh	r3, [r6, #0]
    7592:	441f      	add	r7, r3
    7594:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7596:	463a      	mov	r2, r7
				break; // ADC - ZeroPage , X
    7598:	e4c8      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x76();
    759a:	f7fc ff43 	bl	4424 <opcode_0x76()>
    759e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75a0:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage , X
    75a2:	e4c3      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x77();
    75a4:	f7fe fa40 	bl	5a28 <opcode_0x77()>
    75a8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75aa:	4602      	mov	r2, r0
				break; // RRA - ZeroPage , X
    75ac:	e4be      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage();
    75ae:	f7fb fb75 	bl	2c9c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    75b2:	4baa      	ldr	r3, [pc, #680]	; (785c <loop+0xccc>)
    75b4:	f893 7e01 	ldrb.w	r7, [r3, #3585]	; 0xe01
    75b8:	8833      	ldrh	r3, [r6, #0]
    75ba:	441f      	add	r7, r3
    75bc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    75be:	463a      	mov	r2, r7
				break; // NOP - ZeroPage
    75c0:	e4b4      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_ZeroPage());
    75c2:	f7fb fb6b 	bl	2c9c <Fetch_ZeroPage()>
    75c6:	4ba6      	ldr	r3, [pc, #664]	; (7860 <loop+0xcd0>)
    75c8:	781a      	ldrb	r2, [r3, #0]
    75ca:	4050      	eors	r0, r2
    75cc:	b2c0      	uxtb	r0, r0
    75ce:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    75d0:	f7fb fb44 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x45].length);
    75d4:	4ba1      	ldr	r3, [pc, #644]	; (785c <loop+0xccc>)
    75d6:	f893 7e35 	ldrb.w	r7, [r3, #3637]	; 0xe35
    75da:	8833      	ldrh	r3, [r6, #0]
    75dc:	441f      	add	r7, r3
    75de:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    75e0:	463a      	mov	r2, r7
				break; // EOR - ZeroPage
    75e2:	e4a3      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x46();
    75e4:	f7fc fe24 	bl	4230 <opcode_0x46()>
    75e8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75ea:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage
    75ec:	e49e      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x47();
    75ee:	f7fe f875 	bl	56dc <opcode_0x47()>
    75f2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75f4:	4602      	mov	r2, r0
				break; // SRE - ZeroPage
    75f6:	e499      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x48();
    75f8:	f7fc fa1c 	bl	3a34 <opcode_0x48()>
    75fc:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    75fe:	4602      	mov	r2, r0
				break; // PHA - Push Accumulator to the stack
    7600:	e494      	b.n	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7602:	8830      	ldrh	r0, [r6, #0]
    7604:	2100      	movs	r1, #0
    7606:	3001      	adds	r0, #1
    7608:	b280      	uxth	r0, r0
    760a:	f7fb f863 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    760e:	4b94      	ldr	r3, [pc, #592]	; (7860 <loop+0xcd0>)
    7610:	781a      	ldrb	r2, [r3, #0]
    7612:	4050      	eors	r0, r2
    7614:	b2c0      	uxtb	r0, r0
    7616:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7618:	f7fb fb20 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x49].length);
    761c:	4b8f      	ldr	r3, [pc, #572]	; (785c <loop+0xccc>)
    761e:	f893 7f05 	ldrb.w	r7, [r3, #3845]	; 0xf05
    7622:	8833      	ldrh	r3, [r6, #0]
    7624:	441f      	add	r7, r3
    7626:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7628:	463a      	mov	r2, r7
				break; // EOR - Immediate
    762a:	e47f      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x4A();
    762c:	f7fc f86a 	bl	3704 <opcode_0x4A()>
    7630:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7632:	4602      	mov	r2, r0
				break; // LSR A
    7634:	e47a      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x4B();
    7636:	f7fe fe0f 	bl	6258 <opcode_0x4B()>
    763a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    763c:	4602      	mov	r2, r0
				break; // ALR - Immediate
    763e:	e475      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x4C();
    7640:	f7fd f98e 	bl	4960 <opcode_0x4C()>
    7644:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7646:	4602      	mov	r2, r0
				break; // JMP - Jump Absolute
    7648:	e470      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_Absolute());
    764a:	f7fb fb7b 	bl	2d44 <Fetch_Absolute()>
    764e:	4b84      	ldr	r3, [pc, #528]	; (7860 <loop+0xcd0>)
    7650:	781a      	ldrb	r2, [r3, #0]
    7652:	4050      	eors	r0, r2
    7654:	b2c0      	uxtb	r0, r0
    7656:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7658:	f7fb fb00 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4D].length);
    765c:	4b7f      	ldr	r3, [pc, #508]	; (785c <loop+0xccc>)
    765e:	f893 7fd5 	ldrb.w	r7, [r3, #4053]	; 0xfd5
    7662:	8833      	ldrh	r3, [r6, #0]
    7664:	441f      	add	r7, r3
    7666:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7668:	463a      	mov	r2, r7
				break; // EOR - Absolute
    766a:	e45f      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x4E();
    766c:	f7fc fe44 	bl	42f8 <opcode_0x4E()>
    7670:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7672:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute
    7674:	e45a      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x4F();
    7676:	f7fe f905 	bl	5884 <opcode_0x4F()>
    767a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    767c:	4602      	mov	r2, r0
				break; // SRE - Absolute
    767e:	e455      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x50();
    7680:	f7fd f950 	bl	4924 <opcode_0x50()>
    7684:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7686:	4602      	mov	r2, r0
				break; // BVC - Branch on Overflow Clear
    7688:	e450      	b.n	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    768a:	2001      	movs	r0, #1
    768c:	f7fb fc00 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7690:	4b73      	ldr	r3, [pc, #460]	; (7860 <loop+0xcd0>)
    7692:	781a      	ldrb	r2, [r3, #0]
    7694:	4050      	eors	r0, r2
    7696:	b2c0      	uxtb	r0, r0
    7698:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    769a:	f7fb fadf 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x51].length);
    769e:	4b6e      	ldr	r3, [pc, #440]	; (7858 <loop+0xcc8>)
    76a0:	f893 70a5 	ldrb.w	r7, [r3, #165]	; 0xa5
    76a4:	8833      	ldrh	r3, [r6, #0]
    76a6:	441f      	add	r7, r3
    76a8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76aa:	463a      	mov	r2, r7
				break; // EOR - Indirect Indexed  Y
    76ac:	e43e      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x53();
    76ae:	f7fe f8b5 	bl	581c <opcode_0x53()>
    76b2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    76b4:	4602      	mov	r2, r0
				break; // SRE - Indirect Indexed  Y
    76b6:	e439      	b.n	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    76b8:	f7fb fb04 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    76bc:	4b66      	ldr	r3, [pc, #408]	; (7858 <loop+0xcc8>)
    76be:	f893 7141 	ldrb.w	r7, [r3, #321]	; 0x141
    76c2:	8833      	ldrh	r3, [r6, #0]
    76c4:	441f      	add	r7, r3
    76c6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76c8:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    76ca:	e42f      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x3B();
    76cc:	f7fd ffd0 	bl	5670 <opcode_0x3B()>
    76d0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    76d2:	4602      	mov	r2, r0
				break; // RLA - Absolute , Y
    76d4:	e42a      	b.n	6f2c <loop+0x39c>
    Fetch_Absolute_X(1);
    76d6:	2001      	movs	r0, #1
    76d8:	f7fb fb50 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    76dc:	4b5f      	ldr	r3, [pc, #380]	; (785c <loop+0xccc>)
    76de:	f893 7c61 	ldrb.w	r7, [r3, #3169]	; 0xc61
    76e2:	8833      	ldrh	r3, [r6, #0]
    76e4:	441f      	add	r7, r3
    76e6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    76e8:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    76ea:	e41f      	b.n	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_Absolute_X(1));
    76ec:	2001      	movs	r0, #1
    76ee:	f7fb fb45 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    76f2:	4b5b      	ldr	r3, [pc, #364]	; (7860 <loop+0xcd0>)
    76f4:	781a      	ldrb	r2, [r3, #0]
    76f6:	4010      	ands	r0, r2
    76f8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    76fa:	f7fb faaf 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x3D].length);
    76fe:	4b57      	ldr	r3, [pc, #348]	; (785c <loop+0xccc>)
    7700:	f893 7c95 	ldrb.w	r7, [r3, #3221]	; 0xc95
    7704:	8833      	ldrh	r3, [r6, #0]
    7706:	441f      	add	r7, r3
    7708:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    770a:	463a      	mov	r2, r7
				break; // AND - Absolute,X
    770c:	e40e      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x3E();
    770e:	f7fc ffb9 	bl	4684 <opcode_0x3E()>
    7712:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7714:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute , X
    7716:	e409      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x3F();
    7718:	f7fd ff74 	bl	5604 <opcode_0x3F()>
    771c:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    771e:	4602      	mov	r2, r0
				break; // RLA - Absolute , X
    7720:	e404      	b.n	6f2c <loop+0x39c>
				next_pc = opcode_0x40();
    7722:	f7fd fb53 	bl	4dcc <opcode_0x40()>
    7726:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7728:	4602      	mov	r2, r0
				break; // RTI - Return from Interrupt
    772a:	f7ff bbff 	b.w	6f2c <loop+0x39c>
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    772e:	f7fb fb85 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    7732:	4b4b      	ldr	r3, [pc, #300]	; (7860 <loop+0xcd0>)
    7734:	781a      	ldrb	r2, [r3, #0]
    7736:	4050      	eors	r0, r2
    7738:	b2c0      	uxtb	r0, r0
    773a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    773c:	f7fb fa8e 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x41].length);
    7740:	4b46      	ldr	r3, [pc, #280]	; (785c <loop+0xccc>)
    7742:	f893 7d65 	ldrb.w	r7, [r3, #3429]	; 0xd65
    7746:	8833      	ldrh	r3, [r6, #0]
    7748:	441f      	add	r7, r3
    774a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    774c:	463a      	mov	r2, r7
				break; // EOR - Indexed Indirect X
    774e:	f7ff bbed 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x43();
    7752:	f7fe f831 	bl	57b8 <opcode_0x43()>
    7756:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7758:	4602      	mov	r2, r0
				break; // SRE - Indexed Indirect X
    775a:	f7ff bbe7 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x36();
    775e:	f7fc ff31 	bl	45c4 <opcode_0x36()>
    7762:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7764:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage , X
    7766:	f7ff bbe1 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x37();
    776a:	f7fd fe73 	bl	5454 <opcode_0x37()>
    776e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7770:	4602      	mov	r2, r0
				break; // RLA - ZeroPage , X
    7772:	f7ff bbdb 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7776:	8830      	ldrh	r0, [r6, #0]
    7778:	2100      	movs	r1, #0
    777a:	3001      	adds	r0, #1
    777c:	b280      	uxth	r0, r0
    777e:	f7fa ffa9 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x38].length);
    7782:	4b36      	ldr	r3, [pc, #216]	; (785c <loop+0xccc>)
    register_flags = register_flags | 0x01;
    7784:	4a37      	ldr	r2, [pc, #220]	; (7864 <loop+0xcd4>)
    return(register_pc + opcode_info[0x38].length);
    7786:	f893 7b91 	ldrb.w	r7, [r3, #2961]	; 0xb91
    778a:	8833      	ldrh	r3, [r6, #0]
    778c:	441f      	add	r7, r3
    register_flags = register_flags | 0x01;
    778e:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    7790:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x01;
    7792:	f043 0301 	orr.w	r3, r3, #1
    7796:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7798:	463a      	mov	r2, r7
				break; // SEC
    779a:	f7ff bbc7 	b.w	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_Absolute_Y(1));
    779e:	2001      	movs	r0, #1
    77a0:	f7fb fb1c 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    77a4:	4b2e      	ldr	r3, [pc, #184]	; (7860 <loop+0xcd0>)
    77a6:	781a      	ldrb	r2, [r3, #0]
    77a8:	4010      	ands	r0, r2
    77aa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    77ac:	f7fb fa56 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x39].length);
    77b0:	4b2a      	ldr	r3, [pc, #168]	; (785c <loop+0xccc>)
    77b2:	f893 7bc5 	ldrb.w	r7, [r3, #3013]	; 0xbc5
    77b6:	8833      	ldrh	r3, [r6, #0]
    77b8:	441f      	add	r7, r3
    77ba:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77bc:	463a      	mov	r2, r7
				break; // AND - Absolute,Y
    77be:	f7ff bbb5 	b.w	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    77c2:	f7fb fa7f 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    77c6:	4b25      	ldr	r3, [pc, #148]	; (785c <loop+0xccc>)
    77c8:	f893 7ac1 	ldrb.w	r7, [r3, #2753]	; 0xac1
    77cc:	8833      	ldrh	r3, [r6, #0]
    77ce:	441f      	add	r7, r3
    77d0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77d2:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    77d4:	f7ff bbaa 	b.w	6f2c <loop+0x39c>
    register_a = register_a & (Fetch_ZeroPage_X());
    77d8:	f7fb fa74 	bl	2cc4 <Fetch_ZeroPage_X()>
    77dc:	4b20      	ldr	r3, [pc, #128]	; (7860 <loop+0xcd0>)
    77de:	781a      	ldrb	r2, [r3, #0]
    77e0:	4010      	ands	r0, r2
    77e2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    77e4:	f7fb fa3a 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x35].length);
    77e8:	4b1c      	ldr	r3, [pc, #112]	; (785c <loop+0xccc>)
    77ea:	f893 7af5 	ldrb.w	r7, [r3, #2805]	; 0xaf5
    77ee:	8833      	ldrh	r3, [r6, #0]
    77f0:	441f      	add	r7, r3
    77f2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    77f4:	463a      	mov	r2, r7
				break; // AND - ZeroPage,X
    77f6:	f7ff bb99 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x33();
    77fa:	f7fd fe97 	bl	552c <opcode_0x33()>
    77fe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7800:	4602      	mov	r2, r0
				break; // RLA - Indirect Indexed  Y
    7802:	f7ff bb93 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7806:	8830      	ldrh	r0, [r6, #0]
    7808:	2100      	movs	r1, #0
    780a:	3001      	adds	r0, #1
    780c:	b280      	uxth	r0, r0
    780e:	f7fa ff61 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x78].length);
    7812:	4b11      	ldr	r3, [pc, #68]	; (7858 <loop+0xcc8>)
    register_flags = register_flags | 0x04;
    7814:	4a13      	ldr	r2, [pc, #76]	; (7864 <loop+0xcd4>)
    return(register_pc + opcode_info[0x78].length);
    7816:	f893 7891 	ldrb.w	r7, [r3, #2193]	; 0x891
    781a:	8833      	ldrh	r3, [r6, #0]
    781c:	441f      	add	r7, r3
    register_flags = register_flags | 0x04;
    781e:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    7820:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x04;
    7822:	f043 0304 	orr.w	r3, r3, #4
    7826:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7828:	463a      	mov	r2, r7
				break; // SEI
    782a:	f7ff bb7f 	b.w	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_Absolute_Y(1));
    782e:	2001      	movs	r0, #1
    7830:	f7fb fad4 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    7834:	b280      	uxth	r0, r0
    7836:	f7fb ffe1 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    783a:	4b07      	ldr	r3, [pc, #28]	; (7858 <loop+0xcc8>)
    783c:	f893 78c5 	ldrb.w	r7, [r3, #2245]	; 0x8c5
    7840:	8833      	ldrh	r3, [r6, #0]
    7842:	441f      	add	r7, r3
    7844:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7846:	463a      	mov	r2, r7
				break; // ADC - Absolute , Y
    7848:	f7ff bb70 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x7B();
    784c:	f7fe f9d6 	bl	5bfc <opcode_0x7B()>
    7850:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    7852:	4602      	mov	r2, r0
				break; // RRA - Absolute , Y
    7854:	f7ff bb6a 	b.w	6f2c <loop+0x39c>
    7858:	20016418 	.word	0x20016418
    785c:	20015418 	.word	0x20015418
    7860:	2001889f 	.word	0x2001889f
    7864:	20004990 	.word	0x20004990
    Fetch_Absolute_X(1);
    7868:	2001      	movs	r0, #1
    786a:	f7fb fa87 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    786e:	4bb3      	ldr	r3, [pc, #716]	; (7b3c <loop+0xfac>)
    7870:	f893 7961 	ldrb.w	r7, [r3, #2401]	; 0x961
    7874:	8833      	ldrh	r3, [r6, #0]
    7876:	441f      	add	r7, r3
    7878:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    787a:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    787c:	f7ff bb56 	b.w	6f2c <loop+0x39c>
    Calculate_ADC(Fetch_Absolute_X(1));
    7880:	2001      	movs	r0, #1
    7882:	f7fb fa7b 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    7886:	b280      	uxth	r0, r0
    7888:	f7fb ffb8 	bl	37fc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    788c:	4bab      	ldr	r3, [pc, #684]	; (7b3c <loop+0xfac>)
    788e:	f893 7995 	ldrb.w	r7, [r3, #2453]	; 0x995
    7892:	8833      	ldrh	r3, [r6, #0]
    7894:	441f      	add	r7, r3
    7896:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7898:	463a      	mov	r2, r7
				break; // ADC - Absolute , X
    789a:	f7ff bb47 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x7E();
    789e:	f7fc fe25 	bl	44ec <opcode_0x7E()>
    78a2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    78a4:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute , X
    78a6:	f7ff bb41 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0x7F();
    78aa:	f7fe f977 	bl	5b9c <opcode_0x7F()>
    78ae:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    78b0:	4602      	mov	r2, r0
				break; // RRA - Absolute , X
    78b2:	f7ff bb3b 	b.w	6f2c <loop+0x39c>
    Fetch_Immediate(1);
    78b6:	2001      	movs	r0, #1
    78b8:	f7fb f9e4 	bl	2c84 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    78bc:	4b9f      	ldr	r3, [pc, #636]	; (7b3c <loop+0xfac>)
    78be:	f893 7a31 	ldrb.w	r7, [r3, #2609]	; 0xa31
    78c2:	8833      	ldrh	r3, [r6, #0]
    78c4:	441f      	add	r7, r3
    78c6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78c8:	463a      	mov	r2, r7
				break; // NOP - Immediate
    78ca:	f7ff bb2f 	b.w	6f2c <loop+0x39c>
    Write_Indexed_Indirect_X(register_a);
    78ce:	4b9c      	ldr	r3, [pc, #624]	; (7b40 <loop+0xfb0>)
    78d0:	7818      	ldrb	r0, [r3, #0]
    78d2:	f7fb fbc5 	bl	3060 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x81].length);
    78d6:	4b99      	ldr	r3, [pc, #612]	; (7b3c <loop+0xfac>)
    78d8:	f893 7a65 	ldrb.w	r7, [r3, #2661]	; 0xa65
    78dc:	8833      	ldrh	r3, [r6, #0]
    78de:	441f      	add	r7, r3
    78e0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78e2:	463a      	mov	r2, r7
				break; // STA - Indexed Indirect X
    78e4:	f7ff bb22 	b.w	6f2c <loop+0x39c>
    Fetch_Immediate(1);
    78e8:	2001      	movs	r0, #1
    78ea:	f7fb f9cb 	bl	2c84 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    78ee:	4b93      	ldr	r3, [pc, #588]	; (7b3c <loop+0xfac>)
    78f0:	f893 7a99 	ldrb.w	r7, [r3, #2713]	; 0xa99
    78f4:	8833      	ldrh	r3, [r6, #0]
    78f6:	441f      	add	r7, r3
    78f8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    78fa:	463a      	mov	r2, r7
				break; // NOP - Immediate
    78fc:	f7ff bb16 	b.w	6f2c <loop+0x39c>
    Write_Indexed_Indirect_X(register_a & register_x);
    7900:	4b8f      	ldr	r3, [pc, #572]	; (7b40 <loop+0xfb0>)
    7902:	7818      	ldrb	r0, [r3, #0]
    7904:	4b8f      	ldr	r3, [pc, #572]	; (7b44 <loop+0xfb4>)
    7906:	781b      	ldrb	r3, [r3, #0]
    7908:	4018      	ands	r0, r3
    790a:	f7fb fba9 	bl	3060 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x83].length);
    790e:	4b8b      	ldr	r3, [pc, #556]	; (7b3c <loop+0xfac>)
    7910:	f893 7acd 	ldrb.w	r7, [r3, #2765]	; 0xacd
    7914:	8833      	ldrh	r3, [r6, #0]
    7916:	441f      	add	r7, r3
    7918:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    791a:	463a      	mov	r2, r7
				break; // SAX - Indexed Indirect X
    791c:	f7ff bb06 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7920:	8830      	ldrh	r0, [r6, #0]
    7922:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    7924:	4b88      	ldr	r3, [pc, #544]	; (7b48 <loop+0xfb8>)
    7926:	3001      	adds	r0, #1
    7928:	781c      	ldrb	r4, [r3, #0]
    792a:	b280      	uxth	r0, r0
    792c:	f7fa fed2 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7930:	4b86      	ldr	r3, [pc, #536]	; (7b4c <loop+0xfbc>)
    7932:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7934:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7936:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7938:	f7fb f888 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x84].length);
    793c:	4b7f      	ldr	r3, [pc, #508]	; (7b3c <loop+0xfac>)
    793e:	f893 7b01 	ldrb.w	r7, [r3, #2817]	; 0xb01
    7942:	8833      	ldrh	r3, [r6, #0]
    7944:	441f      	add	r7, r3
    7946:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7948:	463a      	mov	r2, r7
				break; // STY - ZeroPage
    794a:	f7ff baef 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    794e:	8830      	ldrh	r0, [r6, #0]
    7950:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    7952:	4b7b      	ldr	r3, [pc, #492]	; (7b40 <loop+0xfb0>)
    7954:	3001      	adds	r0, #1
    7956:	781c      	ldrb	r4, [r3, #0]
    7958:	b280      	uxth	r0, r0
    795a:	f7fa febb 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    795e:	4b7b      	ldr	r3, [pc, #492]	; (7b4c <loop+0xfbc>)
    7960:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7962:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7964:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7966:	f7fb f871 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x85].length);
    796a:	4b74      	ldr	r3, [pc, #464]	; (7b3c <loop+0xfac>)
    796c:	f893 7b35 	ldrb.w	r7, [r3, #2869]	; 0xb35
    7970:	8833      	ldrh	r3, [r6, #0]
    7972:	441f      	add	r7, r3
    7974:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7976:	463a      	mov	r2, r7
				break; // STA - ZeroPage
    7978:	f7ff bad8 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    797c:	8830      	ldrh	r0, [r6, #0]
    797e:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    7980:	4b70      	ldr	r3, [pc, #448]	; (7b44 <loop+0xfb4>)
    7982:	3001      	adds	r0, #1
    7984:	781c      	ldrb	r4, [r3, #0]
    7986:	b280      	uxth	r0, r0
    7988:	f7fa fea4 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    798c:	4b6f      	ldr	r3, [pc, #444]	; (7b4c <loop+0xfbc>)
    798e:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7990:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7992:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7994:	f7fb f85a 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x86].length);
    7998:	4b68      	ldr	r3, [pc, #416]	; (7b3c <loop+0xfac>)
    799a:	f893 7b69 	ldrb.w	r7, [r3, #2921]	; 0xb69
    799e:	8833      	ldrh	r3, [r6, #0]
    79a0:	441f      	add	r7, r3
    79a2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    79a4:	463a      	mov	r2, r7
				break; // STX - ZeroPage
    79a6:	f7ff bac1 	b.w	6f2c <loop+0x39c>
    Write_ZeroPage(register_a & register_x);
    79aa:	4b65      	ldr	r3, [pc, #404]	; (7b40 <loop+0xfb0>)
    return read_byte(register_pc+offset, false);
    79ac:	2100      	movs	r1, #0
    79ae:	8830      	ldrh	r0, [r6, #0]
    79b0:	781c      	ldrb	r4, [r3, #0]
    79b2:	4b64      	ldr	r3, [pc, #400]	; (7b44 <loop+0xfb4>)
    79b4:	3001      	adds	r0, #1
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	b280      	uxth	r0, r0
    79ba:	401c      	ands	r4, r3
    79bc:	f7fa fe8a 	bl	26d4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    79c0:	4b62      	ldr	r3, [pc, #392]	; (7b4c <loop+0xfbc>)
    79c2:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    79c4:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    79c6:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    79c8:	f7fb f840 	bl	2a4c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x87].length);
    79cc:	4b5b      	ldr	r3, [pc, #364]	; (7b3c <loop+0xfac>)
    79ce:	f893 7b9d 	ldrb.w	r7, [r3, #2973]	; 0xb9d
    79d2:	8833      	ldrh	r3, [r6, #0]
    79d4:	441f      	add	r7, r3
    79d6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    79d8:	463a      	mov	r2, r7
				break; // SAX - ZeroPage
    79da:	f7ff baa7 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    79de:	8830      	ldrh	r0, [r6, #0]
    79e0:	2100      	movs	r1, #0
    79e2:	3001      	adds	r0, #1
    79e4:	b280      	uxth	r0, r0
    79e6:	f7fa fe75 	bl	26d4 <read_byte(unsigned short, bool)>
    register_y = register_y - 1;
    79ea:	4b57      	ldr	r3, [pc, #348]	; (7b48 <loop+0xfb8>)
    79ec:	7818      	ldrb	r0, [r3, #0]
    79ee:	3801      	subs	r0, #1
    79f0:	b2c0      	uxtb	r0, r0
    79f2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    79f4:	f7fb f932 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x88].length);
    79f8:	4b50      	ldr	r3, [pc, #320]	; (7b3c <loop+0xfac>)
    79fa:	f893 7bd1 	ldrb.w	r7, [r3, #3025]	; 0xbd1
    79fe:	8833      	ldrh	r3, [r6, #0]
    7a00:	441f      	add	r7, r3
    7a02:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a04:	463a      	mov	r2, r7
				break; // DEY
    7a06:	f7ff ba91 	b.w	6f2c <loop+0x39c>
    Fetch_Immediate(1);
    7a0a:	2001      	movs	r0, #1
    7a0c:	f7fb f93a 	bl	2c84 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    7a10:	4b4a      	ldr	r3, [pc, #296]	; (7b3c <loop+0xfac>)
    7a12:	f893 7c05 	ldrb.w	r7, [r3, #3077]	; 0xc05
    7a16:	8833      	ldrh	r3, [r6, #0]
    7a18:	441f      	add	r7, r3
    7a1a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a1c:	463a      	mov	r2, r7
				break; // NOP - Immediate
    7a1e:	f7ff ba85 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7a22:	8830      	ldrh	r0, [r6, #0]
    7a24:	2100      	movs	r1, #0
    7a26:	3001      	adds	r0, #1
    7a28:	b280      	uxth	r0, r0
    7a2a:	f7fa fe53 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_x;
    7a2e:	4b45      	ldr	r3, [pc, #276]	; (7b44 <loop+0xfb4>)
    7a30:	7818      	ldrb	r0, [r3, #0]
    7a32:	4b43      	ldr	r3, [pc, #268]	; (7b40 <loop+0xfb0>)
    7a34:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a36:	f7fb f911 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x8A].length);
    7a3a:	4b40      	ldr	r3, [pc, #256]	; (7b3c <loop+0xfac>)
    7a3c:	f893 7c39 	ldrb.w	r7, [r3, #3129]	; 0xc39
    7a40:	8833      	ldrh	r3, [r6, #0]
    7a42:	441f      	add	r7, r3
    7a44:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a46:	463a      	mov	r2, r7
				break; // TXA
    7a48:	f7ff ba70 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    7a4c:	2001      	movs	r0, #1
    7a4e:	f7fb f919 	bl	2c84 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    7a52:	4b3a      	ldr	r3, [pc, #232]	; (7b3c <loop+0xfac>)
    7a54:	f893 7c6d 	ldrb.w	r7, [r3, #3181]	; 0xc6d
    7a58:	8833      	ldrh	r3, [r6, #0]
    7a5a:	441f      	add	r7, r3
    7a5c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a5e:	463a      	mov	r2, r7
				break; // ANE - Immediate
    7a60:	f7ff ba64 	b.w	6f2c <loop+0x39c>
    Write_Absolute(register_y);
    7a64:	4b38      	ldr	r3, [pc, #224]	; (7b48 <loop+0xfb8>)
    7a66:	7818      	ldrb	r0, [r3, #0]
    7a68:	f7fb fa46 	bl	2ef8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8C].length);
    7a6c:	4b33      	ldr	r3, [pc, #204]	; (7b3c <loop+0xfac>)
    7a6e:	f893 7ca1 	ldrb.w	r7, [r3, #3233]	; 0xca1
    7a72:	8833      	ldrh	r3, [r6, #0]
    7a74:	441f      	add	r7, r3
    7a76:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a78:	463a      	mov	r2, r7
				break; // STY - Absolute
    7a7a:	f7ff ba57 	b.w	6f2c <loop+0x39c>
    Write_Absolute(register_a);
    7a7e:	4b30      	ldr	r3, [pc, #192]	; (7b40 <loop+0xfb0>)
    7a80:	7818      	ldrb	r0, [r3, #0]
    7a82:	f7fb fa39 	bl	2ef8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8D].length);
    7a86:	4b2d      	ldr	r3, [pc, #180]	; (7b3c <loop+0xfac>)
    7a88:	f893 7cd5 	ldrb.w	r7, [r3, #3285]	; 0xcd5
    7a8c:	8833      	ldrh	r3, [r6, #0]
    7a8e:	441f      	add	r7, r3
    7a90:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7a92:	463a      	mov	r2, r7
				break; // STA - Absolute
    7a94:	f7ff ba4a 	b.w	6f2c <loop+0x39c>
    Write_Absolute(register_x);
    7a98:	4b2a      	ldr	r3, [pc, #168]	; (7b44 <loop+0xfb4>)
    7a9a:	7818      	ldrb	r0, [r3, #0]
    7a9c:	f7fb fa2c 	bl	2ef8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8E].length);
    7aa0:	4b26      	ldr	r3, [pc, #152]	; (7b3c <loop+0xfac>)
    7aa2:	f893 7d09 	ldrb.w	r7, [r3, #3337]	; 0xd09
    7aa6:	8833      	ldrh	r3, [r6, #0]
    7aa8:	441f      	add	r7, r3
    7aaa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7aac:	463a      	mov	r2, r7
				break; // STX - Absolute
    7aae:	f7ff ba3d 	b.w	6f2c <loop+0x39c>
    Write_Absolute(register_a & register_x);
    7ab2:	4b23      	ldr	r3, [pc, #140]	; (7b40 <loop+0xfb0>)
    7ab4:	7818      	ldrb	r0, [r3, #0]
    7ab6:	4b23      	ldr	r3, [pc, #140]	; (7b44 <loop+0xfb4>)
    7ab8:	781b      	ldrb	r3, [r3, #0]
    7aba:	4018      	ands	r0, r3
    7abc:	f7fb fa1c 	bl	2ef8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8F].length);
    7ac0:	4b1e      	ldr	r3, [pc, #120]	; (7b3c <loop+0xfac>)
    7ac2:	f893 7d3d 	ldrb.w	r7, [r3, #3389]	; 0xd3d
    7ac6:	8833      	ldrh	r3, [r6, #0]
    7ac8:	441f      	add	r7, r3
    7aca:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7acc:	463a      	mov	r2, r7
				break; // SAX - Absolute
    7ace:	f7ff ba2d 	b.w	6f2c <loop+0x39c>
    if ((flag_c) == 0) Branch_Taken();
    7ad2:	4b1f      	ldr	r3, [pc, #124]	; (7b50 <loop+0xfc0>)
    7ad4:	781b      	ldrb	r3, [r3, #0]
    7ad6:	07db      	lsls	r3, r3, #31
    7ad8:	f100 8570 	bmi.w	85bc <loop+0x1a2c>
    7adc:	f7fc fe04 	bl	46e8 <Branch_Taken()>
    return(register_pc);
    7ae0:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7ae2:	463a      	mov	r2, r7
				break; // BCC - Branch on Carry Clear
    7ae4:	f7ff ba22 	b.w	6f2c <loop+0x39c>
    Write_Indexed_Indirect_Y(register_a);
    7ae8:	4b15      	ldr	r3, [pc, #84]	; (7b40 <loop+0xfb0>)
    7aea:	7818      	ldrb	r0, [r3, #0]
    7aec:	f7fb fae6 	bl	30bc <Write_Indexed_Indirect_Y(unsigned char)>
    return(register_pc + opcode_info[0x91].length);
    7af0:	4b12      	ldr	r3, [pc, #72]	; (7b3c <loop+0xfac>)
    7af2:	f893 7da5 	ldrb.w	r7, [r3, #3493]	; 0xda5
    7af6:	8833      	ldrh	r3, [r6, #0]
    7af8:	441f      	add	r7, r3
    7afa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7afc:	463a      	mov	r2, r7
				break; // STA - Indirect Indexed  Y
    7afe:	f7ff ba15 	b.w	6f2c <loop+0x39c>
    Write_ZeroPage_Y(register_x);
    7b02:	4b10      	ldr	r3, [pc, #64]	; (7b44 <loop+0xfb4>)
    7b04:	7818      	ldrb	r0, [r3, #0]
    7b06:	f7fb fa33 	bl	2f70 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x96].length);
    7b0a:	4b0c      	ldr	r3, [pc, #48]	; (7b3c <loop+0xfac>)
    7b0c:	f893 7ea9 	ldrb.w	r7, [r3, #3753]	; 0xea9
    7b10:	8833      	ldrh	r3, [r6, #0]
    7b12:	441f      	add	r7, r3
    7b14:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b16:	463a      	mov	r2, r7
				break; // STX - ZeroPage , Y
    7b18:	f7ff ba08 	b.w	6f2c <loop+0x39c>
    Write_ZeroPage_Y(register_a & register_x);
    7b1c:	4b08      	ldr	r3, [pc, #32]	; (7b40 <loop+0xfb0>)
    7b1e:	7818      	ldrb	r0, [r3, #0]
    7b20:	4b08      	ldr	r3, [pc, #32]	; (7b44 <loop+0xfb4>)
    7b22:	781b      	ldrb	r3, [r3, #0]
    7b24:	4018      	ands	r0, r3
    7b26:	f7fb fa23 	bl	2f70 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x97].length);
    7b2a:	4b04      	ldr	r3, [pc, #16]	; (7b3c <loop+0xfac>)
    7b2c:	f893 7edd 	ldrb.w	r7, [r3, #3805]	; 0xedd
    7b30:	8833      	ldrh	r3, [r6, #0]
    7b32:	441f      	add	r7, r3
    7b34:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b36:	463a      	mov	r2, r7
				break; // SAX - ZeroPage , Y
    7b38:	f7ff b9f8 	b.w	6f2c <loop+0x39c>
    7b3c:	20016418 	.word	0x20016418
    7b40:	2001889f 	.word	0x2001889f
    7b44:	200188a0 	.word	0x200188a0
    7b48:	200188a1 	.word	0x200188a1
    7b4c:	20018886 	.word	0x20018886
    7b50:	20004990 	.word	0x20004990
    read_byte(register_pc+1, false);
    7b54:	8830      	ldrh	r0, [r6, #0]
    7b56:	2100      	movs	r1, #0
    7b58:	3001      	adds	r0, #1
    7b5a:	b280      	uxth	r0, r0
    7b5c:	f7fa fdba 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = register_y;
    7b60:	4bbd      	ldr	r3, [pc, #756]	; (7e58 <loop+0x12c8>)
    7b62:	7818      	ldrb	r0, [r3, #0]
    7b64:	4bbd      	ldr	r3, [pc, #756]	; (7e5c <loop+0x12cc>)
    7b66:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b68:	f7fb f878 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x98].length);
    7b6c:	4bbc      	ldr	r3, [pc, #752]	; (7e60 <loop+0x12d0>)
    7b6e:	f893 7f11 	ldrb.w	r7, [r3, #3857]	; 0xf11
    7b72:	8833      	ldrh	r3, [r6, #0]
    7b74:	441f      	add	r7, r3
    7b76:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b78:	463a      	mov	r2, r7
				break; // TYA
    7b7a:	f7ff b9d7 	b.w	6f2c <loop+0x39c>
    Write_Absolute_Y(register_a);
    7b7e:	4bb7      	ldr	r3, [pc, #732]	; (7e5c <loop+0x12cc>)
    7b80:	7818      	ldrb	r0, [r3, #0]
    7b82:	f7fb fa39 	bl	2ff8 <Write_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x99].length);
    7b86:	4bb6      	ldr	r3, [pc, #728]	; (7e60 <loop+0x12d0>)
    7b88:	f893 7f45 	ldrb.w	r7, [r3, #3909]	; 0xf45
    7b8c:	8833      	ldrh	r3, [r6, #0]
    7b8e:	441f      	add	r7, r3
    7b90:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7b92:	463a      	mov	r2, r7
				break; // STA - Absolute , Y
    7b94:	f7ff b9ca 	b.w	6f2c <loop+0x39c>
    Write_ZeroPage_X(register_y);
    7b98:	4baf      	ldr	r3, [pc, #700]	; (7e58 <loop+0x12c8>)
    7b9a:	7818      	ldrb	r0, [r3, #0]
    7b9c:	f7fb f9ca 	bl	2f34 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x94].length);
    7ba0:	4baf      	ldr	r3, [pc, #700]	; (7e60 <loop+0x12d0>)
    7ba2:	f893 7e41 	ldrb.w	r7, [r3, #3649]	; 0xe41
    7ba6:	8833      	ldrh	r3, [r6, #0]
    7ba8:	441f      	add	r7, r3
    7baa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bac:	463a      	mov	r2, r7
				break; // STY - ZeroPage , X
    7bae:	f7ff b9bd 	b.w	6f2c <loop+0x39c>
    Write_ZeroPage_X(register_a);
    7bb2:	4baa      	ldr	r3, [pc, #680]	; (7e5c <loop+0x12cc>)
    7bb4:	7818      	ldrb	r0, [r3, #0]
    7bb6:	f7fb f9bd 	bl	2f34 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x95].length);
    7bba:	4ba9      	ldr	r3, [pc, #676]	; (7e60 <loop+0x12d0>)
    7bbc:	f893 7e75 	ldrb.w	r7, [r3, #3701]	; 0xe75
    7bc0:	8833      	ldrh	r3, [r6, #0]
    7bc2:	441f      	add	r7, r3
    7bc4:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bc6:	463a      	mov	r2, r7
				break; // STA - ZeroPage , X
    7bc8:	f7ff b9b0 	b.w	6f2c <loop+0x39c>
    Fetch_ZeroPage_Y();
    7bcc:	f7fb f89a 	bl	2d04 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    7bd0:	4ba3      	ldr	r3, [pc, #652]	; (7e60 <loop+0x12d0>)
    7bd2:	f893 7e0d 	ldrb.w	r7, [r3, #3597]	; 0xe0d
    7bd6:	8833      	ldrh	r3, [r6, #0]
    7bd8:	441f      	add	r7, r3
    7bda:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7bdc:	463a      	mov	r2, r7
				break; // SHA - ZeroPage , Y
    7bde:	f7ff b9a5 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7be2:	8830      	ldrh	r0, [r6, #0]
    7be4:	2100      	movs	r1, #0
    7be6:	3001      	adds	r0, #1
    7be8:	b280      	uxth	r0, r0
    7bea:	f7fa fd73 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x9A].length);
    7bee:	4b9c      	ldr	r3, [pc, #624]	; (7e60 <loop+0x12d0>)
    7bf0:	f893 7f79 	ldrb.w	r7, [r3, #3961]	; 0xf79
    7bf4:	8833      	ldrh	r3, [r6, #0]
    7bf6:	441f      	add	r7, r3
    register_sp = register_x;
    7bf8:	4b9a      	ldr	r3, [pc, #616]	; (7e64 <loop+0x12d4>)
    return(register_pc + opcode_info[0x9A].length);
    7bfa:	b2bf      	uxth	r7, r7
    register_sp = register_x;
    7bfc:	781a      	ldrb	r2, [r3, #0]
    7bfe:	4b9a      	ldr	r3, [pc, #616]	; (7e68 <loop+0x12d8>)
    7c00:	701a      	strb	r2, [r3, #0]
        sprintf(buf, "%04X", next_pc);
    7c02:	463a      	mov	r2, r7
				break; // TXS
    7c04:	f7ff b992 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_Y(0);
    7c08:	2000      	movs	r0, #0
    7c0a:	f7fb f8e7 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    7c0e:	4b94      	ldr	r3, [pc, #592]	; (7e60 <loop+0x12d0>)
    7c10:	f893 7fad 	ldrb.w	r7, [r3, #4013]	; 0xfad
    7c14:	8833      	ldrh	r3, [r6, #0]
    7c16:	441f      	add	r7, r3
    7c18:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c1a:	463a      	mov	r2, r7
				break; // TAS - Absolute , Y 
    7c1c:	f7ff b986 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_X(0);
    7c20:	2000      	movs	r0, #0
    7c22:	f7fb f8ab 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    7c26:	4b8e      	ldr	r3, [pc, #568]	; (7e60 <loop+0x12d0>)
    7c28:	f893 7fe1 	ldrb.w	r7, [r3, #4065]	; 0xfe1
    7c2c:	8833      	ldrh	r3, [r6, #0]
    7c2e:	441f      	add	r7, r3
    7c30:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c32:	463a      	mov	r2, r7
				break; // SHY - Absolute , X
    7c34:	f7ff b97a 	b.w	6f2c <loop+0x39c>
    Write_Absolute_X(register_a);
    7c38:	4b88      	ldr	r3, [pc, #544]	; (7e5c <loop+0x12cc>)
    7c3a:	7818      	ldrb	r0, [r3, #0]
    7c3c:	f7fb f9b6 	bl	2fac <Write_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9D].length);
    7c40:	4b8a      	ldr	r3, [pc, #552]	; (7e6c <loop+0x12dc>)
    7c42:	7d5f      	ldrb	r7, [r3, #21]
    7c44:	8833      	ldrh	r3, [r6, #0]
    7c46:	441f      	add	r7, r3
    7c48:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c4a:	463a      	mov	r2, r7
				break; // STA - Absolute , X
    7c4c:	f7ff b96e 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_Y(0);
    7c50:	2000      	movs	r0, #0
    7c52:	f7fb f8c3 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    7c56:	4b85      	ldr	r3, [pc, #532]	; (7e6c <loop+0x12dc>)
    7c58:	f893 7049 	ldrb.w	r7, [r3, #73]	; 0x49
    7c5c:	8833      	ldrh	r3, [r6, #0]
    7c5e:	441f      	add	r7, r3
    7c60:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c62:	463a      	mov	r2, r7
				break; // SHX - Absolute , Y
    7c64:	f7ff b962 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_Y(0);
    7c68:	2000      	movs	r0, #0
    7c6a:	f7fb f8b7 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    7c6e:	4b7f      	ldr	r3, [pc, #508]	; (7e6c <loop+0x12dc>)
    7c70:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
    7c74:	8833      	ldrh	r3, [r6, #0]
    7c76:	441f      	add	r7, r3
    7c78:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7c7a:	463a      	mov	r2, r7
				break; // SHA - Absolute , Y
    7c7c:	f7ff b956 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7c80:	8830      	ldrh	r0, [r6, #0]
    7c82:	2100      	movs	r1, #0
    7c84:	3001      	adds	r0, #1
    7c86:	b280      	uxth	r0, r0
    7c88:	f7fa fd24 	bl	26d4 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    7c8c:	4b72      	ldr	r3, [pc, #456]	; (7e58 <loop+0x12c8>)
    7c8e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7c90:	f7fa ffe4 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA0].length);
    7c94:	4b75      	ldr	r3, [pc, #468]	; (7e6c <loop+0x12dc>)
    7c96:	f893 70b1 	ldrb.w	r7, [r3, #177]	; 0xb1
    7c9a:	8833      	ldrh	r3, [r6, #0]
    7c9c:	441f      	add	r7, r3
    7c9e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ca0:	463a      	mov	r2, r7
				break; // LDY - Immediate
    7ca2:	f7ff b943 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Indexed_Indirect_X();
    7ca6:	f7fb f8c9 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    7caa:	4b6c      	ldr	r3, [pc, #432]	; (7e5c <loop+0x12cc>)
    7cac:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7cae:	f7fa ffd5 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA1].length);
    7cb2:	4b6e      	ldr	r3, [pc, #440]	; (7e6c <loop+0x12dc>)
    7cb4:	f893 70e5 	ldrb.w	r7, [r3, #229]	; 0xe5
    7cb8:	8833      	ldrh	r3, [r6, #0]
    7cba:	441f      	add	r7, r3
    7cbc:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7cbe:	463a      	mov	r2, r7
				break; // LDA - Indexed Indirect X
    7cc0:	f7ff b934 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7cc4:	8830      	ldrh	r0, [r6, #0]
    7cc6:	2100      	movs	r1, #0
    7cc8:	3001      	adds	r0, #1
    7cca:	b280      	uxth	r0, r0
    7ccc:	f7fa fd02 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    7cd0:	4b64      	ldr	r3, [pc, #400]	; (7e64 <loop+0x12d4>)
    7cd2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7cd4:	f7fa ffc2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA2].length);
    7cd8:	4b64      	ldr	r3, [pc, #400]	; (7e6c <loop+0x12dc>)
    7cda:	f893 7119 	ldrb.w	r7, [r3, #281]	; 0x119
    7cde:	8833      	ldrh	r3, [r6, #0]
    7ce0:	441f      	add	r7, r3
    7ce2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ce4:	463a      	mov	r2, r7
				break; // LDX - Immediate
    7ce6:	f7ff b921 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Indexed_Indirect_X();
    7cea:	f7fb f8a7 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    7cee:	4a5b      	ldr	r2, [pc, #364]	; (7e5c <loop+0x12cc>)
    7cf0:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7cf2:	4a5c      	ldr	r2, [pc, #368]	; (7e64 <loop+0x12d4>)
    7cf4:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7cf6:	f7fa ffb1 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA3].length);
    7cfa:	4b5c      	ldr	r3, [pc, #368]	; (7e6c <loop+0x12dc>)
    7cfc:	f893 714d 	ldrb.w	r7, [r3, #333]	; 0x14d
    7d00:	8833      	ldrh	r3, [r6, #0]
    7d02:	441f      	add	r7, r3
    7d04:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d06:	463a      	mov	r2, r7
				break; // LAX - Indexed Indirect X
    7d08:	f7ff b910 	b.w	6f2c <loop+0x39c>
    register_y = Fetch_ZeroPage();
    7d0c:	f7fa ffc6 	bl	2c9c <Fetch_ZeroPage()>
    7d10:	4b51      	ldr	r3, [pc, #324]	; (7e58 <loop+0x12c8>)
    7d12:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7d14:	f7fa ffa2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA4].length);
    7d18:	4b54      	ldr	r3, [pc, #336]	; (7e6c <loop+0x12dc>)
    7d1a:	f893 7181 	ldrb.w	r7, [r3, #385]	; 0x181
    7d1e:	8833      	ldrh	r3, [r6, #0]
    7d20:	441f      	add	r7, r3
    7d22:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d24:	463a      	mov	r2, r7
				break; // LDY - ZeroPage
    7d26:	f7ff b901 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_ZeroPage();
    7d2a:	f7fa ffb7 	bl	2c9c <Fetch_ZeroPage()>
    7d2e:	4b4b      	ldr	r3, [pc, #300]	; (7e5c <loop+0x12cc>)
    7d30:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7d32:	f7fa ff93 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA5].length);
    7d36:	4b4d      	ldr	r3, [pc, #308]	; (7e6c <loop+0x12dc>)
    7d38:	f893 71b5 	ldrb.w	r7, [r3, #437]	; 0x1b5
    7d3c:	8833      	ldrh	r3, [r6, #0]
    7d3e:	441f      	add	r7, r3
    7d40:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d42:	463a      	mov	r2, r7
				break; // LDA - ZeroPage
    7d44:	f7ff b8f2 	b.w	6f2c <loop+0x39c>
    register_x = Fetch_ZeroPage();
    7d48:	f7fa ffa8 	bl	2c9c <Fetch_ZeroPage()>
    7d4c:	4b45      	ldr	r3, [pc, #276]	; (7e64 <loop+0x12d4>)
    7d4e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7d50:	f7fa ff84 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA6].length);
    7d54:	4b45      	ldr	r3, [pc, #276]	; (7e6c <loop+0x12dc>)
    7d56:	f893 71e9 	ldrb.w	r7, [r3, #489]	; 0x1e9
    7d5a:	8833      	ldrh	r3, [r6, #0]
    7d5c:	441f      	add	r7, r3
    7d5e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d60:	463a      	mov	r2, r7
				break; // LDX - ZeroPage
    7d62:	f7ff b8e3 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_ZeroPage();
    7d66:	f7fa ff99 	bl	2c9c <Fetch_ZeroPage()>
    7d6a:	4a3c      	ldr	r2, [pc, #240]	; (7e5c <loop+0x12cc>)
    7d6c:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7d6e:	4a3d      	ldr	r2, [pc, #244]	; (7e64 <loop+0x12d4>)
    7d70:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7d72:	f7fa ff73 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA7].length);
    7d76:	4b3d      	ldr	r3, [pc, #244]	; (7e6c <loop+0x12dc>)
    7d78:	f893 721d 	ldrb.w	r7, [r3, #541]	; 0x21d
    7d7c:	8833      	ldrh	r3, [r6, #0]
    7d7e:	441f      	add	r7, r3
    7d80:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7d82:	463a      	mov	r2, r7
				break; // LAX - ZeroPage
    7d84:	f7ff b8d2 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7d88:	8830      	ldrh	r0, [r6, #0]
    7d8a:	2100      	movs	r1, #0
    7d8c:	3001      	adds	r0, #1
    7d8e:	b280      	uxth	r0, r0
    7d90:	f7fa fca0 	bl	26d4 <read_byte(unsigned short, bool)>
    register_y = register_a;
    7d94:	4b31      	ldr	r3, [pc, #196]	; (7e5c <loop+0x12cc>)
    7d96:	7818      	ldrb	r0, [r3, #0]
    7d98:	4b2f      	ldr	r3, [pc, #188]	; (7e58 <loop+0x12c8>)
    7d9a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7d9c:	f7fa ff5e 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA8].length);
    7da0:	4b32      	ldr	r3, [pc, #200]	; (7e6c <loop+0x12dc>)
    7da2:	f893 7251 	ldrb.w	r7, [r3, #593]	; 0x251
    7da6:	8833      	ldrh	r3, [r6, #0]
    7da8:	441f      	add	r7, r3
    7daa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7dac:	463a      	mov	r2, r7
				break; // TAY
    7dae:	f7ff b8bd 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    7db2:	8830      	ldrh	r0, [r6, #0]
    7db4:	2100      	movs	r1, #0
    7db6:	3001      	adds	r0, #1
    7db8:	b280      	uxth	r0, r0
    7dba:	f7fa fc8b 	bl	26d4 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    7dbe:	4b27      	ldr	r3, [pc, #156]	; (7e5c <loop+0x12cc>)
    7dc0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7dc2:	f7fa ff4b 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA9].length);
    7dc6:	4b29      	ldr	r3, [pc, #164]	; (7e6c <loop+0x12dc>)
    7dc8:	f893 7285 	ldrb.w	r7, [r3, #645]	; 0x285
    7dcc:	8833      	ldrh	r3, [r6, #0]
    7dce:	441f      	add	r7, r3
    7dd0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7dd2:	463a      	mov	r2, r7
				break; // LDA - Immediate
    7dd4:	f7ff b8aa 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7dd8:	8830      	ldrh	r0, [r6, #0]
    7dda:	2100      	movs	r1, #0
    7ddc:	3001      	adds	r0, #1
    7dde:	b280      	uxth	r0, r0
    7de0:	f7fa fc78 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = register_a;
    7de4:	4b1d      	ldr	r3, [pc, #116]	; (7e5c <loop+0x12cc>)
    7de6:	7818      	ldrb	r0, [r3, #0]
    7de8:	4b1e      	ldr	r3, [pc, #120]	; (7e64 <loop+0x12d4>)
    7dea:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7dec:	f7fa ff36 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAA].length);
    7df0:	4b1e      	ldr	r3, [pc, #120]	; (7e6c <loop+0x12dc>)
    7df2:	f893 72b9 	ldrb.w	r7, [r3, #697]	; 0x2b9
    7df6:	8833      	ldrh	r3, [r6, #0]
    7df8:	441f      	add	r7, r3
    7dfa:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7dfc:	463a      	mov	r2, r7
				break; // TAX
    7dfe:	f7ff b895 	b.w	6f2c <loop+0x39c>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    7e02:	2001      	movs	r0, #1
    7e04:	f7fa ff3e 	bl	2c84 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    7e08:	4b18      	ldr	r3, [pc, #96]	; (7e6c <loop+0x12dc>)
    7e0a:	f893 72ed 	ldrb.w	r7, [r3, #749]	; 0x2ed
    7e0e:	8833      	ldrh	r3, [r6, #0]
    7e10:	441f      	add	r7, r3
    7e12:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e14:	463a      	mov	r2, r7
				break; // LAX - Immediate
    7e16:	f7ff b889 	b.w	6f2c <loop+0x39c>
    register_y = Fetch_Absolute();
    7e1a:	f7fa ff93 	bl	2d44 <Fetch_Absolute()>
    7e1e:	4b0e      	ldr	r3, [pc, #56]	; (7e58 <loop+0x12c8>)
    7e20:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7e22:	f7fa ff1b 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAC].length);
    7e26:	4b11      	ldr	r3, [pc, #68]	; (7e6c <loop+0x12dc>)
    7e28:	f893 7321 	ldrb.w	r7, [r3, #801]	; 0x321
    7e2c:	8833      	ldrh	r3, [r6, #0]
    7e2e:	441f      	add	r7, r3
    7e30:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e32:	463a      	mov	r2, r7
				break; // LDY - Absolute
    7e34:	f7ff b87a 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Absolute();
    7e38:	f7fa ff84 	bl	2d44 <Fetch_Absolute()>
    7e3c:	4b07      	ldr	r3, [pc, #28]	; (7e5c <loop+0x12cc>)
    7e3e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e40:	f7fa ff0c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAD].length);
    7e44:	4b09      	ldr	r3, [pc, #36]	; (7e6c <loop+0x12dc>)
    7e46:	f893 7355 	ldrb.w	r7, [r3, #853]	; 0x355
    7e4a:	8833      	ldrh	r3, [r6, #0]
    7e4c:	441f      	add	r7, r3
    7e4e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e50:	463a      	mov	r2, r7
				break; // LDA - Absolute
    7e52:	f7ff b86b 	b.w	6f2c <loop+0x39c>
    7e56:	bf00      	nop
    7e58:	200188a1 	.word	0x200188a1
    7e5c:	2001889f 	.word	0x2001889f
    7e60:	20016418 	.word	0x20016418
    7e64:	200188a0 	.word	0x200188a0
    7e68:	20004991 	.word	0x20004991
    7e6c:	20017418 	.word	0x20017418
    register_x = Fetch_Absolute();
    7e70:	f7fa ff68 	bl	2d44 <Fetch_Absolute()>
    7e74:	4bc8      	ldr	r3, [pc, #800]	; (8198 <loop+0x1608>)
    7e76:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7e78:	f7fa fef0 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAE].length);
    7e7c:	4bc7      	ldr	r3, [pc, #796]	; (819c <loop+0x160c>)
    7e7e:	f893 7389 	ldrb.w	r7, [r3, #905]	; 0x389
    7e82:	8833      	ldrh	r3, [r6, #0]
    7e84:	441f      	add	r7, r3
    7e86:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7e88:	463a      	mov	r2, r7
				break; // LDX - Absolute
    7e8a:	f7ff b84f 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Absolute();
    7e8e:	f7fa ff59 	bl	2d44 <Fetch_Absolute()>
    7e92:	4ac3      	ldr	r2, [pc, #780]	; (81a0 <loop+0x1610>)
    7e94:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7e96:	4ac0      	ldr	r2, [pc, #768]	; (8198 <loop+0x1608>)
    7e98:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e9a:	f7fa fedf 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAF].length);
    7e9e:	4bbf      	ldr	r3, [pc, #764]	; (819c <loop+0x160c>)
    7ea0:	f893 73bd 	ldrb.w	r7, [r3, #957]	; 0x3bd
    7ea4:	8833      	ldrh	r3, [r6, #0]
    7ea6:	441f      	add	r7, r3
    7ea8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7eaa:	463a      	mov	r2, r7
				break; // LAX - Absolute
    7eac:	f7ff b83e 	b.w	6f2c <loop+0x39c>
    if ((flag_c) == 1) Branch_Taken();
    7eb0:	4bbc      	ldr	r3, [pc, #752]	; (81a4 <loop+0x1614>)
    7eb2:	7819      	ldrb	r1, [r3, #0]
    7eb4:	f011 0101 	ands.w	r1, r1, #1
    7eb8:	f000 8366 	beq.w	8588 <loop+0x19f8>
    7ebc:	f7fc fc14 	bl	46e8 <Branch_Taken()>
    return(register_pc);
    7ec0:	8837      	ldrh	r7, [r6, #0]
        sprintf(buf, "%04X", next_pc);
    7ec2:	463a      	mov	r2, r7
				break; // BCS - Branch on Carry Set
    7ec4:	f7ff b832 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Indexed_Indirect_Y(1);
    7ec8:	2001      	movs	r0, #1
    7eca:	f7fa ffe1 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7ece:	4bb4      	ldr	r3, [pc, #720]	; (81a0 <loop+0x1610>)
    7ed0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7ed2:	f7fa fec3 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB1].length);
    7ed6:	4bb1      	ldr	r3, [pc, #708]	; (819c <loop+0x160c>)
    7ed8:	f893 7425 	ldrb.w	r7, [r3, #1061]	; 0x425
    7edc:	8833      	ldrh	r3, [r6, #0]
    7ede:	441f      	add	r7, r3
    7ee0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ee2:	463a      	mov	r2, r7
				break; // LDA - Indirect Indexed  Y
    7ee4:	f7ff b822 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Indexed_Indirect_Y(1);
    7ee8:	2001      	movs	r0, #1
    7eea:	f7fa ffd1 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7eee:	4aac      	ldr	r2, [pc, #688]	; (81a0 <loop+0x1610>)
    7ef0:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7ef2:	4aa9      	ldr	r2, [pc, #676]	; (8198 <loop+0x1608>)
    7ef4:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7ef6:	f7fa feb1 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB3].length);
    7efa:	4ba8      	ldr	r3, [pc, #672]	; (819c <loop+0x160c>)
    7efc:	f893 748d 	ldrb.w	r7, [r3, #1165]	; 0x48d
    7f00:	8833      	ldrh	r3, [r6, #0]
    7f02:	441f      	add	r7, r3
    7f04:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f06:	463a      	mov	r2, r7
				break; // LAX - Indirect Indexed  Y
    7f08:	f7ff b810 	b.w	6f2c <loop+0x39c>
    register_y = Fetch_ZeroPage_X();
    7f0c:	f7fa feda 	bl	2cc4 <Fetch_ZeroPage_X()>
    7f10:	4ba5      	ldr	r3, [pc, #660]	; (81a8 <loop+0x1618>)
    7f12:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7f14:	f7fa fea2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB4].length);
    7f18:	4ba0      	ldr	r3, [pc, #640]	; (819c <loop+0x160c>)
    7f1a:	f893 74c1 	ldrb.w	r7, [r3, #1217]	; 0x4c1
    7f1e:	8833      	ldrh	r3, [r6, #0]
    7f20:	441f      	add	r7, r3
    7f22:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f24:	463a      	mov	r2, r7
				break; // LDY - ZeroPage , X
    7f26:	f7ff b801 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_ZeroPage_X();
    7f2a:	f7fa fecb 	bl	2cc4 <Fetch_ZeroPage_X()>
    7f2e:	4b9c      	ldr	r3, [pc, #624]	; (81a0 <loop+0x1610>)
    7f30:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7f32:	f7fa fe93 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB5].length);
    7f36:	4b99      	ldr	r3, [pc, #612]	; (819c <loop+0x160c>)
    7f38:	f893 74f5 	ldrb.w	r7, [r3, #1269]	; 0x4f5
    7f3c:	8833      	ldrh	r3, [r6, #0]
    7f3e:	441f      	add	r7, r3
    7f40:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f42:	463a      	mov	r2, r7
				break; // LDA - ZeroPage , X
    7f44:	f7fe bff2 	b.w	6f2c <loop+0x39c>
    register_x = Fetch_ZeroPage_Y();
    7f48:	f7fa fedc 	bl	2d04 <Fetch_ZeroPage_Y()>
    7f4c:	4b92      	ldr	r3, [pc, #584]	; (8198 <loop+0x1608>)
    7f4e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7f50:	f7fa fe84 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB6].length);
    7f54:	4b91      	ldr	r3, [pc, #580]	; (819c <loop+0x160c>)
    7f56:	f893 7529 	ldrb.w	r7, [r3, #1321]	; 0x529
    7f5a:	8833      	ldrh	r3, [r6, #0]
    7f5c:	441f      	add	r7, r3
    7f5e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f60:	463a      	mov	r2, r7
				break; // LDX - ZeroPage , Y
    7f62:	f7fe bfe3 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_ZeroPage_Y();
    7f66:	f7fa fecd 	bl	2d04 <Fetch_ZeroPage_Y()>
    7f6a:	4a8d      	ldr	r2, [pc, #564]	; (81a0 <loop+0x1610>)
    7f6c:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    7f6e:	4a8a      	ldr	r2, [pc, #552]	; (8198 <loop+0x1608>)
    7f70:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7f72:	f7fa fe73 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB7].length);
    7f76:	4b89      	ldr	r3, [pc, #548]	; (819c <loop+0x160c>)
    7f78:	f893 755d 	ldrb.w	r7, [r3, #1373]	; 0x55d
    7f7c:	8833      	ldrh	r3, [r6, #0]
    7f7e:	441f      	add	r7, r3
    7f80:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7f82:	463a      	mov	r2, r7
				break; // LAX - ZeroPage , Y
    7f84:	f7fe bfd2 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7f88:	8830      	ldrh	r0, [r6, #0]
    7f8a:	2100      	movs	r1, #0
    7f8c:	3001      	adds	r0, #1
    7f8e:	b280      	uxth	r0, r0
    7f90:	f7fa fba0 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xB8].length);
    7f94:	4b81      	ldr	r3, [pc, #516]	; (819c <loop+0x160c>)
    register_flags = register_flags & 0xBF;
    7f96:	4a83      	ldr	r2, [pc, #524]	; (81a4 <loop+0x1614>)
    return(register_pc + opcode_info[0xB8].length);
    7f98:	f893 7591 	ldrb.w	r7, [r3, #1425]	; 0x591
    7f9c:	8833      	ldrh	r3, [r6, #0]
    7f9e:	441f      	add	r7, r3
    register_flags = register_flags & 0xBF;
    7fa0:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    7fa2:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xBF;
    7fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7fa8:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7faa:	463a      	mov	r2, r7
				break; // CLV
    7fac:	f7fe bfbe 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Absolute_Y(1);
    7fb0:	2001      	movs	r0, #1
    7fb2:	f7fa ff13 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    7fb6:	4b7a      	ldr	r3, [pc, #488]	; (81a0 <loop+0x1610>)
    7fb8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7fba:	f7fa fe4f 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB9].length);
    7fbe:	4b77      	ldr	r3, [pc, #476]	; (819c <loop+0x160c>)
    7fc0:	f893 75c5 	ldrb.w	r7, [r3, #1477]	; 0x5c5
    7fc4:	8833      	ldrh	r3, [r6, #0]
    7fc6:	441f      	add	r7, r3
    7fc8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7fca:	463a      	mov	r2, r7
				break; // LDA - Absolute , Y
    7fcc:	f7fe bfae 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    7fd0:	8830      	ldrh	r0, [r6, #0]
    7fd2:	2100      	movs	r1, #0
    7fd4:	3001      	adds	r0, #1
    7fd6:	b280      	uxth	r0, r0
    7fd8:	f7fa fb7c 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = register_sp;
    7fdc:	4b73      	ldr	r3, [pc, #460]	; (81ac <loop+0x161c>)
    7fde:	7818      	ldrb	r0, [r3, #0]
    7fe0:	4b6d      	ldr	r3, [pc, #436]	; (8198 <loop+0x1608>)
    7fe2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    7fe4:	f7fa fe3a 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBA].length);
    7fe8:	4b6c      	ldr	r3, [pc, #432]	; (819c <loop+0x160c>)
    7fea:	f893 75f9 	ldrb.w	r7, [r3, #1529]	; 0x5f9
    7fee:	8833      	ldrh	r3, [r6, #0]
    7ff0:	441f      	add	r7, r3
    7ff2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    7ff4:	463a      	mov	r2, r7
				break; // TSX
    7ff6:	f7fe bf99 	b.w	6f2c <loop+0x39c>
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    7ffa:	2001      	movs	r0, #1
    7ffc:	f7fa feee 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    8000:	4b6a      	ldr	r3, [pc, #424]	; (81ac <loop+0x161c>)
    register_x = register_sp;
    8002:	4a65      	ldr	r2, [pc, #404]	; (8198 <loop+0x1608>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    8004:	781c      	ldrb	r4, [r3, #0]
    register_a = register_sp;
    8006:	4966      	ldr	r1, [pc, #408]	; (81a0 <loop+0x1610>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    8008:	4020      	ands	r0, r4
    800a:	7018      	strb	r0, [r3, #0]
    register_x = register_sp;
    800c:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    800e:	7008      	strb	r0, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8010:	f7fa fe24 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBB].length);
    8014:	4b61      	ldr	r3, [pc, #388]	; (819c <loop+0x160c>)
    8016:	f893 762d 	ldrb.w	r7, [r3, #1581]	; 0x62d
    801a:	8833      	ldrh	r3, [r6, #0]
    801c:	441f      	add	r7, r3
    801e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8020:	463a      	mov	r2, r7
				break; // LAS - Absolute , Y
    8022:	f7fe bf83 	b.w	6f2c <loop+0x39c>
    register_y = Fetch_Absolute_X(1);
    8026:	2001      	movs	r0, #1
    8028:	f7fa fea8 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    802c:	4b5e      	ldr	r3, [pc, #376]	; (81a8 <loop+0x1618>)
    802e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8030:	f7fa fe14 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBC].length);
    8034:	4b59      	ldr	r3, [pc, #356]	; (819c <loop+0x160c>)
    8036:	f893 7661 	ldrb.w	r7, [r3, #1633]	; 0x661
    803a:	8833      	ldrh	r3, [r6, #0]
    803c:	441f      	add	r7, r3
    803e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8040:	463a      	mov	r2, r7
				break; // LDY - Absolute , X
    8042:	f7fe bf73 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Absolute_X(1);
    8046:	2001      	movs	r0, #1
    8048:	f7fa fe98 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    804c:	4b54      	ldr	r3, [pc, #336]	; (81a0 <loop+0x1610>)
    804e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8050:	f7fa fe04 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBD].length);
    8054:	4b51      	ldr	r3, [pc, #324]	; (819c <loop+0x160c>)
    8056:	f893 7695 	ldrb.w	r7, [r3, #1685]	; 0x695
    805a:	8833      	ldrh	r3, [r6, #0]
    805c:	441f      	add	r7, r3
    805e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8060:	463a      	mov	r2, r7
				break; // LDA - Absolute , X
    8062:	f7fe bf63 	b.w	6f2c <loop+0x39c>
    register_x = Fetch_Absolute_Y(1);
    8066:	2001      	movs	r0, #1
    8068:	f7fa feb8 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    806c:	4b4a      	ldr	r3, [pc, #296]	; (8198 <loop+0x1608>)
    806e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8070:	f7fa fdf4 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBE].length);
    8074:	4b49      	ldr	r3, [pc, #292]	; (819c <loop+0x160c>)
    8076:	f893 76c9 	ldrb.w	r7, [r3, #1737]	; 0x6c9
    807a:	8833      	ldrh	r3, [r6, #0]
    807c:	441f      	add	r7, r3
    807e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8080:	463a      	mov	r2, r7
				break; // LDX - Absolute , Y
    8082:	f7fe bf53 	b.w	6f2c <loop+0x39c>
    register_a = Fetch_Absolute_Y(1);
    8086:	2001      	movs	r0, #1
    8088:	f7fa fea8 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    808c:	4a44      	ldr	r2, [pc, #272]	; (81a0 <loop+0x1610>)
    808e:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8090:	4a41      	ldr	r2, [pc, #260]	; (8198 <loop+0x1608>)
    8092:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8094:	f7fa fde2 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBF].length);
    8098:	4b40      	ldr	r3, [pc, #256]	; (819c <loop+0x160c>)
    809a:	f893 76fd 	ldrb.w	r7, [r3, #1789]	; 0x6fd
    809e:	8833      	ldrh	r3, [r6, #0]
    80a0:	441f      	add	r7, r3
    80a2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    80a4:	463a      	mov	r2, r7
				break; // LAX - Absolute , Y
    80a6:	f7fe bf41 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC0();
    80aa:	f7fb fe59 	bl	3d60 <opcode_0xC0()>
    80ae:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80b0:	4602      	mov	r2, r0
				break; // CPY - Immediate
    80b2:	f7fe bf3b 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    80b6:	f7fa fec1 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    80ba:	f7fb fd8b 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC1].length);
    80be:	4b37      	ldr	r3, [pc, #220]	; (819c <loop+0x160c>)
    80c0:	f893 7765 	ldrb.w	r7, [r3, #1893]	; 0x765
    80c4:	8833      	ldrh	r3, [r6, #0]
    80c6:	441f      	add	r7, r3
    80c8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    80ca:	463a      	mov	r2, r7
				break; // CMP - Indexed Indirect X
    80cc:	f7fe bf2e 	b.w	6f2c <loop+0x39c>
    Fetch_Immediate(1);
    80d0:	2001      	movs	r0, #1
    80d2:	f7fa fdd7 	bl	2c84 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    80d6:	4b31      	ldr	r3, [pc, #196]	; (819c <loop+0x160c>)
    80d8:	f893 7799 	ldrb.w	r7, [r3, #1945]	; 0x799
    80dc:	8833      	ldrh	r3, [r6, #0]
    80de:	441f      	add	r7, r3
    80e0:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    80e2:	463a      	mov	r2, r7
				break; // NOP - Immediate
    80e4:	f7fe bf22 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC3();
    80e8:	f7fd fe32 	bl	5d50 <opcode_0xC3()>
    80ec:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80ee:	4602      	mov	r2, r0
				break; // DCP - Indexed Indirect X
    80f0:	f7fe bf1c 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC4();
    80f4:	f7fb fe5c 	bl	3db0 <opcode_0xC4()>
    80f8:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    80fa:	4602      	mov	r2, r0
				break; // CPY - ZeroPage
    80fc:	f7fe bf16 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_ZeroPage());
    8100:	f7fa fdcc 	bl	2c9c <Fetch_ZeroPage()>
    8104:	f7fb fd66 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC5].length);
    8108:	4b24      	ldr	r3, [pc, #144]	; (819c <loop+0x160c>)
    810a:	f893 7835 	ldrb.w	r7, [r3, #2101]	; 0x835
    810e:	8833      	ldrh	r3, [r6, #0]
    8110:	441f      	add	r7, r3
    8112:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8114:	463a      	mov	r2, r7
				break; // CMP - ZeroPage
    8116:	f7fe bf09 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC6();
    811a:	f7fb ffe3 	bl	40e4 <opcode_0xC6()>
    811e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8120:	4602      	mov	r2, r0
				break; // DEC - ZeroPage
    8122:	f7fe bf03 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC7();
    8126:	f7fd fd99 	bl	5c5c <opcode_0xC7()>
    812a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    812c:	4602      	mov	r2, r0
				break; // DCP - ZeroPage
    812e:	f7fe befd 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    8132:	8830      	ldrh	r0, [r6, #0]
    8134:	2100      	movs	r1, #0
    8136:	3001      	adds	r0, #1
    8138:	b280      	uxth	r0, r0
    813a:	f7fa facb 	bl	26d4 <read_byte(unsigned short, bool)>
    register_y = register_y + 1;
    813e:	4b1a      	ldr	r3, [pc, #104]	; (81a8 <loop+0x1618>)
    8140:	7818      	ldrb	r0, [r3, #0]
    8142:	3001      	adds	r0, #1
    8144:	b2c0      	uxtb	r0, r0
    8146:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8148:	f7fa fd88 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC8].length);
    814c:	4b13      	ldr	r3, [pc, #76]	; (819c <loop+0x160c>)
    814e:	f893 78d1 	ldrb.w	r7, [r3, #2257]	; 0x8d1
    8152:	8833      	ldrh	r3, [r6, #0]
    8154:	441f      	add	r7, r3
    8156:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8158:	463a      	mov	r2, r7
				break; // INY
    815a:	f7fe bee7 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xC9();
    815e:	f7fb fd5b 	bl	3c18 <opcode_0xC9()>
    8162:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8164:	4602      	mov	r2, r0
				break; // CMP - Immediate
    8166:	f7fe bee1 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    816a:	8830      	ldrh	r0, [r6, #0]
    816c:	2100      	movs	r1, #0
    816e:	3001      	adds	r0, #1
    8170:	b280      	uxth	r0, r0
    8172:	f7fa faaf 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = register_x - 1;
    8176:	4b08      	ldr	r3, [pc, #32]	; (8198 <loop+0x1608>)
    8178:	7818      	ldrb	r0, [r3, #0]
    817a:	3801      	subs	r0, #1
    817c:	b2c0      	uxtb	r0, r0
    817e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8180:	f7fa fd6c 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCA].length);
    8184:	4b05      	ldr	r3, [pc, #20]	; (819c <loop+0x160c>)
    8186:	f893 7939 	ldrb.w	r7, [r3, #2361]	; 0x939
    818a:	8833      	ldrh	r3, [r6, #0]
    818c:	441f      	add	r7, r3
    818e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8190:	463a      	mov	r2, r7
				break; // DEX
    8192:	f7fe becb 	b.w	6f2c <loop+0x39c>
    8196:	bf00      	nop
    8198:	200188a0 	.word	0x200188a0
    819c:	20017418 	.word	0x20017418
    81a0:	2001889f 	.word	0x2001889f
    81a4:	20004990 	.word	0x20004990
    81a8:	200188a1 	.word	0x200188a1
    81ac:	20004991 	.word	0x20004991
				next_pc = opcode_0xCB();
    81b0:	f7fe f8a4 	bl	62fc <opcode_0xCB()>
    81b4:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81b6:	4602      	mov	r2, r0
				break; // SBX - Immediate
    81b8:	f7fe beb8 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xCC();
    81bc:	f7fb fe28 	bl	3e10 <opcode_0xCC()>
    81c0:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81c2:	4602      	mov	r2, r0
				break; // CPY - Absolute
    81c4:	f7fe beb2 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_Absolute());
    81c8:	f7fa fdbc 	bl	2d44 <Fetch_Absolute()>
    81cc:	f7fb fd02 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xCD].length);
    81d0:	4bd4      	ldr	r3, [pc, #848]	; (8524 <loop+0x1994>)
    81d2:	f893 79d5 	ldrb.w	r7, [r3, #2517]	; 0x9d5
    81d6:	8833      	ldrh	r3, [r6, #0]
    81d8:	441f      	add	r7, r3
    81da:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    81dc:	463a      	mov	r2, r7
				break; // CMP - Absolute
    81de:	f7fe bea5 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xCE();
    81e2:	f7fb ffcf 	bl	4184 <opcode_0xCE()>
    81e6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81e8:	4602      	mov	r2, r0
				break; // DEC - Absolute
    81ea:	f7fe be9f 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xCF();
    81ee:	f7fd fe21 	bl	5e34 <opcode_0xCF()>
    81f2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    81f4:	4602      	mov	r2, r0
				break; // DCP - Absolute
    81f6:	f7fe be99 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xD0();
    81fa:	f7fc fb55 	bl	48a8 <opcode_0xD0()>
    81fe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8200:	4602      	mov	r2, r0
				break; // BNE - Branch on Zero Clear
    8202:	f7fe be93 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    8206:	2001      	movs	r0, #1
    8208:	f7fa fe42 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    820c:	f7fb fce2 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD1].length);
    8210:	4bc4      	ldr	r3, [pc, #784]	; (8524 <loop+0x1994>)
    8212:	f893 7aa5 	ldrb.w	r7, [r3, #2725]	; 0xaa5
    8216:	8833      	ldrh	r3, [r6, #0]
    8218:	441f      	add	r7, r3
    821a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    821c:	463a      	mov	r2, r7
				break; // CMP - Indirect Indexed  Y
    821e:	f7fe be85 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xD3();
    8222:	f7fd fdcd 	bl	5dc0 <opcode_0xD3()>
    8226:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8228:	4602      	mov	r2, r0
				break; // DCP - Indirect Indexed  Y
    822a:	f7fe be7f 	b.w	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    822e:	f7fa fd49 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    8232:	4bbc      	ldr	r3, [pc, #752]	; (8524 <loop+0x1994>)
    8234:	f893 7b41 	ldrb.w	r7, [r3, #2881]	; 0xb41
    8238:	8833      	ldrh	r3, [r6, #0]
    823a:	441f      	add	r7, r3
    823c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    823e:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    8240:	f7fe be74 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_ZeroPage_X());
    8244:	f7fa fd3e 	bl	2cc4 <Fetch_ZeroPage_X()>
    8248:	f7fb fcc4 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD5].length);
    824c:	4bb5      	ldr	r3, [pc, #724]	; (8524 <loop+0x1994>)
    824e:	f893 7b75 	ldrb.w	r7, [r3, #2933]	; 0xb75
    8252:	8833      	ldrh	r3, [r6, #0]
    8254:	441f      	add	r7, r3
    8256:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8258:	463a      	mov	r2, r7
				break; // CMP - ZeroPage , X
    825a:	f7fe be67 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xD6();
    825e:	f7fb ff6d 	bl	413c <opcode_0xD6()>
    8262:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8264:	4602      	mov	r2, r0
				break; // DEC - ZeroPage , X
    8266:	f7fe be61 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xD7();
    826a:	f7fd fd39 	bl	5ce0 <opcode_0xD7()>
    826e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8270:	4602      	mov	r2, r0
				break; // DCP - ZeroPage , X
    8272:	f7fe be5b 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    8276:	8830      	ldrh	r0, [r6, #0]
    8278:	2100      	movs	r1, #0
    827a:	3001      	adds	r0, #1
    827c:	b280      	uxth	r0, r0
    827e:	f7fa fa29 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xD8].length);
    8282:	4ba8      	ldr	r3, [pc, #672]	; (8524 <loop+0x1994>)
    register_flags = register_flags & 0xF7;
    8284:	4aa8      	ldr	r2, [pc, #672]	; (8528 <loop+0x1998>)
    return(register_pc + opcode_info[0xD8].length);
    8286:	f893 7c11 	ldrb.w	r7, [r3, #3089]	; 0xc11
    828a:	8833      	ldrh	r3, [r6, #0]
    828c:	441f      	add	r7, r3
    register_flags = register_flags & 0xF7;
    828e:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    8290:	b2bf      	uxth	r7, r7
    register_flags = register_flags & 0xF7;
    8292:	f023 0308 	bic.w	r3, r3, #8
    8296:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    8298:	463a      	mov	r2, r7
				break; // CLD
    829a:	f7fe be47 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_Absolute_Y(1));
    829e:	2001      	movs	r0, #1
    82a0:	f7fa fd9c 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    82a4:	f7fb fc96 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD9].length);
    82a8:	4b9e      	ldr	r3, [pc, #632]	; (8524 <loop+0x1994>)
    82aa:	f893 7c45 	ldrb.w	r7, [r3, #3141]	; 0xc45
    82ae:	8833      	ldrh	r3, [r6, #0]
    82b0:	441f      	add	r7, r3
    82b2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    82b4:	463a      	mov	r2, r7
				break; // CMP - Absolute , Y
    82b6:	f7fe be39 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xDB();
    82ba:	f7fd fe2d 	bl	5f18 <opcode_0xDB()>
    82be:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    82c0:	4602      	mov	r2, r0
				break; // DCP - Absolute , Y
    82c2:	f7fe be33 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_X(1);
    82c6:	2001      	movs	r0, #1
    82c8:	f7fa fd58 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    82cc:	4b95      	ldr	r3, [pc, #596]	; (8524 <loop+0x1994>)
    82ce:	f893 7ce1 	ldrb.w	r7, [r3, #3297]	; 0xce1
    82d2:	8833      	ldrh	r3, [r6, #0]
    82d4:	441f      	add	r7, r3
    82d6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    82d8:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    82da:	f7fe be27 	b.w	6f2c <loop+0x39c>
    Calculate_CMP(Fetch_Absolute_X(1));
    82de:	2001      	movs	r0, #1
    82e0:	f7fa fd4c 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    82e4:	f7fb fc76 	bl	3bd4 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xDD].length);
    82e8:	4b8e      	ldr	r3, [pc, #568]	; (8524 <loop+0x1994>)
    82ea:	f893 7d15 	ldrb.w	r7, [r3, #3349]	; 0xd15
    82ee:	8833      	ldrh	r3, [r6, #0]
    82f0:	441f      	add	r7, r3
    82f2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    82f4:	463a      	mov	r2, r7
				break; // CMP - Absolute , X
    82f6:	f7fe be19 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xDE();
    82fa:	f7fb ff75 	bl	41e8 <opcode_0xDE()>
    82fe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8300:	4602      	mov	r2, r0
				break; // DEC - Absolute , X
    8302:	f7fe be13 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xDF();
    8306:	f7fd fdcd 	bl	5ea4 <opcode_0xDF()>
    830a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    830c:	4602      	mov	r2, r0
				break; // DCP - Absolute , X
    830e:	f7fe be0d 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE0();
    8312:	f7fb fca9 	bl	3c68 <opcode_0xE0()>
    8316:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8318:	4602      	mov	r2, r0
				break; // CPX - Immediate
    831a:	f7fe be07 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    831e:	f7fa fd8d 	bl	2e3c <Fetch_Indexed_Indirect_X()>
    8322:	b280      	uxth	r0, r0
    8324:	f7fb face 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    8328:	4b7e      	ldr	r3, [pc, #504]	; (8524 <loop+0x1994>)
    832a:	f893 7de5 	ldrb.w	r7, [r3, #3557]	; 0xde5
    832e:	8833      	ldrh	r3, [r6, #0]
    8330:	441f      	add	r7, r3
    8332:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8334:	463a      	mov	r2, r7
				break; // SBC - Indexed Indirect X
    8336:	f7fe bdf9 	b.w	6f2c <loop+0x39c>
    Fetch_Immediate(1);
    833a:	2001      	movs	r0, #1
    833c:	f7fa fca2 	bl	2c84 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    8340:	4b78      	ldr	r3, [pc, #480]	; (8524 <loop+0x1994>)
    8342:	f893 7e19 	ldrb.w	r7, [r3, #3609]	; 0xe19
    8346:	8833      	ldrh	r3, [r6, #0]
    8348:	441f      	add	r7, r3
    834a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    834c:	463a      	mov	r2, r7
				break; // NOP - Immediate
    834e:	f7fe bded 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE3();
    8352:	f7fd fe71 	bl	6038 <opcode_0xE3()>
    8356:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8358:	4602      	mov	r2, r0
				break; // ISC - Indexed Indirect X
    835a:	f7fe bde7 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE4();
    835e:	f7fb fcab 	bl	3cb8 <opcode_0xE4()>
    8362:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8364:	4602      	mov	r2, r0
				break; // CPX - ZeroPage
    8366:	f7fe bde1 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_ZeroPage());
    836a:	f7fa fc97 	bl	2c9c <Fetch_ZeroPage()>
    836e:	b280      	uxth	r0, r0
    8370:	f7fb faa8 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    8374:	4b6b      	ldr	r3, [pc, #428]	; (8524 <loop+0x1994>)
    8376:	f893 7eb5 	ldrb.w	r7, [r3, #3765]	; 0xeb5
    837a:	8833      	ldrh	r3, [r6, #0]
    837c:	441f      	add	r7, r3
    837e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8380:	463a      	mov	r2, r7
				break; // SBC - ZeroPage
    8382:	f7fe bdd3 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE6();
    8386:	f7fb fe2b 	bl	3fe0 <opcode_0xE6()>
    838a:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    838c:	4602      	mov	r2, r0
				break; // INC - ZeroPage
    838e:	f7fe bdcd 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE7();
    8392:	f7fd fdfb 	bl	5f8c <opcode_0xE7()>
    8396:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8398:	4602      	mov	r2, r0
				break; // ISC - ZeroPage
    839a:	f7fe bdc7 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    839e:	8830      	ldrh	r0, [r6, #0]
    83a0:	2100      	movs	r1, #0
    83a2:	3001      	adds	r0, #1
    83a4:	b280      	uxth	r0, r0
    83a6:	f7fa f995 	bl	26d4 <read_byte(unsigned short, bool)>
    register_x = register_x + 1;
    83aa:	4b60      	ldr	r3, [pc, #384]	; (852c <loop+0x199c>)
    83ac:	7818      	ldrb	r0, [r3, #0]
    83ae:	3001      	adds	r0, #1
    83b0:	b2c0      	uxtb	r0, r0
    83b2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    83b4:	f7fa fc52 	bl	2c5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xE8].length);
    83b8:	4b5a      	ldr	r3, [pc, #360]	; (8524 <loop+0x1994>)
    83ba:	f893 7f51 	ldrb.w	r7, [r3, #3921]	; 0xf51
    83be:	8833      	ldrh	r3, [r6, #0]
    83c0:	441f      	add	r7, r3
    83c2:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    83c4:	463a      	mov	r2, r7
				break; // INX
    83c6:	f7fe bdb1 	b.w	6f2c <loop+0x39c>
    return read_byte(register_pc+offset, false);
    83ca:	8830      	ldrh	r0, [r6, #0]
    83cc:	2100      	movs	r1, #0
    83ce:	3001      	adds	r0, #1
    83d0:	b280      	uxth	r0, r0
    83d2:	f7fa f97f 	bl	26d4 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    83d6:	b280      	uxth	r0, r0
    83d8:	f7fb fa74 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    83dc:	4b51      	ldr	r3, [pc, #324]	; (8524 <loop+0x1994>)
    83de:	f893 7f85 	ldrb.w	r7, [r3, #3973]	; 0xf85
    83e2:	8833      	ldrh	r3, [r6, #0]
    83e4:	441f      	add	r7, r3
    83e6:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    83e8:	463a      	mov	r2, r7
				break; // SBC - Immediate
    83ea:	f7fe bd9f 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xE9();
    83ee:	f7fb fad3 	bl	3998 <opcode_0xE9()>
    83f2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    83f4:	4602      	mov	r2, r0
				break; // SBC - Immediate
    83f6:	f7fe bd99 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xEC();
    83fa:	f7fb fc8d 	bl	3d18 <opcode_0xEC()>
    83fe:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8400:	4602      	mov	r2, r0
				break; // CPX - Absolute
    8402:	f7fe bd93 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_Absolute());
    8406:	f7fa fc9d 	bl	2d44 <Fetch_Absolute()>
    840a:	b280      	uxth	r0, r0
    840c:	f7fb fa5a 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    8410:	4b47      	ldr	r3, [pc, #284]	; (8530 <loop+0x19a0>)
    8412:	f893 7055 	ldrb.w	r7, [r3, #85]	; 0x55
    8416:	8833      	ldrh	r3, [r6, #0]
    8418:	441f      	add	r7, r3
    841a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    841c:	463a      	mov	r2, r7
				break; // SBC - Absolute
    841e:	f7fe bd85 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xEE();
    8422:	f7fb fe3b 	bl	409c <opcode_0xEE()>
    8426:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8428:	4602      	mov	r2, r0
				break; // INC - Absolute
    842a:	f7fe bd7f 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xEF();
    842e:	f7fd fe51 	bl	60d4 <opcode_0xEF()>
    8432:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8434:	4602      	mov	r2, r0
				break; // ISC - Absolute
    8436:	f7fe bd79 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xF0();
    843a:	f7fc fa15 	bl	4868 <opcode_0xF0()>
    843e:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8440:	4602      	mov	r2, r0
				break; // BEQ - Branch on Zero Set
    8442:	f7fe bd73 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    8446:	2001      	movs	r0, #1
    8448:	f7fa fd22 	bl	2e90 <Fetch_Indexed_Indirect_Y(unsigned char)>
    844c:	b280      	uxth	r0, r0
    844e:	f7fb fa39 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    8452:	4b37      	ldr	r3, [pc, #220]	; (8530 <loop+0x19a0>)
    8454:	f893 7125 	ldrb.w	r7, [r3, #293]	; 0x125
    8458:	8833      	ldrh	r3, [r6, #0]
    845a:	441f      	add	r7, r3
    845c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    845e:	463a      	mov	r2, r7
				break; // SBC - Indirect Indexed  Y
    8460:	f7fe bd64 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xF3();
    8464:	f7fd fe0e 	bl	6084 <opcode_0xF3()>
    8468:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    846a:	4602      	mov	r2, r0
				break; // ISC - Indirect Indexed  Y
    846c:	f7fe bd5e 	b.w	6f2c <loop+0x39c>
    Fetch_ZeroPage_X();
    8470:	f7fa fc28 	bl	2cc4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    8474:	4b2e      	ldr	r3, [pc, #184]	; (8530 <loop+0x19a0>)
    8476:	f893 71c1 	ldrb.w	r7, [r3, #449]	; 0x1c1
    847a:	8833      	ldrh	r3, [r6, #0]
    847c:	441f      	add	r7, r3
    847e:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    8480:	463a      	mov	r2, r7
				break; // NOP - ZeroPage , X
    8482:	f7fe bd53 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_ZeroPage_X());
    8486:	f7fa fc1d 	bl	2cc4 <Fetch_ZeroPage_X()>
    848a:	b280      	uxth	r0, r0
    848c:	f7fb fa1a 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    8490:	4b27      	ldr	r3, [pc, #156]	; (8530 <loop+0x19a0>)
    8492:	f893 71f5 	ldrb.w	r7, [r3, #501]	; 0x1f5
    8496:	8833      	ldrh	r3, [r6, #0]
    8498:	441f      	add	r7, r3
    849a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    849c:	463a      	mov	r2, r7
				break; // SBC - ZeroPage , X
    849e:	f7fe bd45 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xF6();
    84a2:	f7fb fdc9 	bl	4038 <opcode_0xF6()>
    84a6:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    84a8:	4602      	mov	r2, r0
				break; // INC - ZeroPage , X
    84aa:	f7fe bd3f 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xF7();
    84ae:	f7fd fd9d 	bl	5fec <opcode_0xF7()>
    84b2:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    84b4:	4602      	mov	r2, r0
				break; // ISC - ZeroPage , X
    84b6:	f7fe bd39 	b.w	6f2c <loop+0x39c>
    read_byte(register_pc+1, false);
    84ba:	8830      	ldrh	r0, [r6, #0]
    84bc:	2100      	movs	r1, #0
    84be:	3001      	adds	r0, #1
    84c0:	b280      	uxth	r0, r0
    84c2:	f7fa f907 	bl	26d4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xF8].length);
    84c6:	4b1a      	ldr	r3, [pc, #104]	; (8530 <loop+0x19a0>)
    register_flags = register_flags | 0x08;
    84c8:	4a17      	ldr	r2, [pc, #92]	; (8528 <loop+0x1998>)
    return(register_pc + opcode_info[0xF8].length);
    84ca:	f893 7291 	ldrb.w	r7, [r3, #657]	; 0x291
    84ce:	8833      	ldrh	r3, [r6, #0]
    84d0:	441f      	add	r7, r3
    register_flags = register_flags | 0x08;
    84d2:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    84d4:	b2bf      	uxth	r7, r7
    register_flags = register_flags | 0x08;
    84d6:	f043 0308 	orr.w	r3, r3, #8
    84da:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    84dc:	463a      	mov	r2, r7
				break; // SED
    84de:	f7fe bd25 	b.w	6f2c <loop+0x39c>
    Calculate_SBC(Fetch_Absolute_Y(1));
    84e2:	2001      	movs	r0, #1
    84e4:	f7fa fc7a 	bl	2ddc <Fetch_Absolute_Y(unsigned char)>
    84e8:	b280      	uxth	r0, r0
    84ea:	f7fb f9eb 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    84ee:	4b10      	ldr	r3, [pc, #64]	; (8530 <loop+0x19a0>)
    84f0:	f893 72c5 	ldrb.w	r7, [r3, #709]	; 0x2c5
    84f4:	8833      	ldrh	r3, [r6, #0]
    84f6:	441f      	add	r7, r3
    84f8:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    84fa:	463a      	mov	r2, r7
				break; // SBC - Absolute , Y
    84fc:	f7fe bd16 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xFB();
    8500:	f7fd fe36 	bl	6170 <opcode_0xFB()>
    8504:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8506:	4602      	mov	r2, r0
				break; // ISC - Absolute , Y
    8508:	f7fe bd10 	b.w	6f2c <loop+0x39c>
    Fetch_Absolute_X(1);
    850c:	2001      	movs	r0, #1
    850e:	f7fa fc35 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    8512:	4b07      	ldr	r3, [pc, #28]	; (8530 <loop+0x19a0>)
    8514:	f893 7361 	ldrb.w	r7, [r3, #865]	; 0x361
    8518:	8833      	ldrh	r3, [r6, #0]
    851a:	441f      	add	r7, r3
    851c:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    851e:	463a      	mov	r2, r7
				break; // NOP - Absolute , X
    8520:	f7fe bd04 	b.w	6f2c <loop+0x39c>
    8524:	20017418 	.word	0x20017418
    8528:	20004990 	.word	0x20004990
    852c:	200188a0 	.word	0x200188a0
    8530:	20018418 	.word	0x20018418
    Calculate_SBC(Fetch_Absolute_X(1));
    8534:	2001      	movs	r0, #1
    8536:	f7fa fc21 	bl	2d7c <Fetch_Absolute_X(unsigned char)>
    853a:	b280      	uxth	r0, r0
    853c:	f7fb f9c2 	bl	38c4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    8540:	4b27      	ldr	r3, [pc, #156]	; (85e0 <loop+0x1a50>)
    8542:	f893 7395 	ldrb.w	r7, [r3, #917]	; 0x395
    8546:	8833      	ldrh	r3, [r6, #0]
    8548:	441f      	add	r7, r3
    854a:	b2bf      	uxth	r7, r7
        sprintf(buf, "%04X", next_pc);
    854c:	463a      	mov	r2, r7
				break; // SBC - Absolute , X
    854e:	f7fe bced 	b.w	6f2c <loop+0x39c>
				next_pc = opcode_0xFF();
    8552:	f7fd fde5 	bl	6120 <opcode_0xFF()>
    8556:	4607      	mov	r7, r0
        sprintf(buf, "%04X", next_pc);
    8558:	4602      	mov	r2, r0
				break; // 
    855a:	f7fe bce7 	b.w	6f2c <loop+0x39c>
				irq_handler(0x1);
    855e:	2001      	movs	r0, #1
    8560:	f7fa ffb2 	bl	34c8 <irq_handler(unsigned char)>
				break; // BRK - Break
    8564:	2200      	movs	r2, #0
		uint16_t next_pc = 0;
    8566:	4617      	mov	r7, r2
				break; // BRK - Break
    8568:	f7fe bce0 	b.w	6f2c <loop+0x39c>
    856c:	211a      	movs	r1, #26
    856e:	481d      	ldr	r0, [pc, #116]	; (85e4 <loop+0x1a54>)
    8570:	f001 fd38 	bl	9fe4 <usb_serial_write>
    8574:	481c      	ldr	r0, [pc, #112]	; (85e8 <loop+0x1a58>)
    8576:	f000 f89b 	bl	86b0 <Print::println()>
				run_mode = WAITING;
    857a:	f04f 0300 	mov.w	r3, #0
    857e:	2200      	movs	r2, #0
    8580:	702b      	strb	r3, [r5, #0]
		uint16_t next_pc = 0;
    8582:	4617      	mov	r7, r2
    8584:	f7fe bcdb 	b.w	6f3e <loop+0x3ae>
        register_pc = register_pc + opcode_info[0xB0].length;
    8588:	4b18      	ldr	r3, [pc, #96]	; (85ec <loop+0x1a5c>)
    858a:	8832      	ldrh	r2, [r6, #0]
    858c:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
    8590:	4413      	add	r3, r2
    8592:	b29b      	uxth	r3, r3
    8594:	8033      	strh	r3, [r6, #0]
    return read_byte(register_pc+offset, false);
    8596:	3301      	adds	r3, #1
    8598:	b298      	uxth	r0, r3
    859a:	f7fa f89b 	bl	26d4 <read_byte(unsigned short, bool)>
    859e:	e48f      	b.n	7ec0 <loop+0x1330>
        register_pc = register_pc + opcode_info[0x10].length;
    85a0:	4b13      	ldr	r3, [pc, #76]	; (85f0 <loop+0x1a60>)
    85a2:	2100      	movs	r1, #0
    85a4:	8832      	ldrh	r2, [r6, #0]
    85a6:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
    85aa:	4413      	add	r3, r2
    85ac:	b29b      	uxth	r3, r3
    85ae:	8033      	strh	r3, [r6, #0]
    85b0:	3301      	adds	r3, #1
    85b2:	b298      	uxth	r0, r3
    85b4:	f7fa f88e 	bl	26d4 <read_byte(unsigned short, bool)>
    85b8:	f7fe bd97 	b.w	70ea <loop+0x55a>
        register_pc = register_pc + opcode_info[0x90].length;
    85bc:	4b0d      	ldr	r3, [pc, #52]	; (85f4 <loop+0x1a64>)
    85be:	2100      	movs	r1, #0
    85c0:	8832      	ldrh	r2, [r6, #0]
    85c2:	f893 3d71 	ldrb.w	r3, [r3, #3441]	; 0xd71
    85c6:	4413      	add	r3, r2
    85c8:	b29b      	uxth	r3, r3
    85ca:	8033      	strh	r3, [r6, #0]
    85cc:	3301      	adds	r3, #1
    85ce:	b298      	uxth	r0, r3
    85d0:	f7fa f880 	bl	26d4 <read_byte(unsigned short, bool)>
    85d4:	f7ff ba84 	b.w	7ae0 <loop+0xf50>
    if ((flag_n) == 1) Branch_Taken();
    85d8:	f7fc f886 	bl	46e8 <Branch_Taken()>
    85dc:	f7fe beb1 	b.w	7342 <loop+0x7b2>
    85e0:	20018418 	.word	0x20018418
    85e4:	2000107c 	.word	0x2000107c
    85e8:	20004380 	.word	0x20004380
    85ec:	20017418 	.word	0x20017418
    85f0:	20015418 	.word	0x20015418
    85f4:	20016418 	.word	0x20016418

000085f8 <_GLOBAL__sub_I_opcode_info>:
}
    85f8:	b538      	push	{r3, r4, r5, lr}
    85fa:	4c12      	ldr	r4, [pc, #72]	; (8644 <_GLOBAL__sub_I_opcode_info+0x4c>)
    85fc:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    8600:	2100      	movs	r1, #0
    8602:	4620      	mov	r0, r4
    8604:	f000 f8e6 	bl	87d4 <String::String(char const*)>
    8608:	2100      	movs	r1, #0
    860a:	f104 0010 	add.w	r0, r4, #16
    860e:	f000 f8e1 	bl	87d4 <String::String(char const*)>
    8612:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    8616:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    8618:	2100      	movs	r1, #0
    861a:	f000 f8db 	bl	87d4 <String::String(char const*)>
OpDecoder opcode_info[256];
    861e:	42ac      	cmp	r4, r5
    8620:	d1ee      	bne.n	8600 <_GLOBAL__sub_I_opcode_info+0x8>
    8622:	4a09      	ldr	r2, [pc, #36]	; (8648 <_GLOBAL__sub_I_opcode_info+0x50>)
    8624:	2000      	movs	r0, #0
    8626:	4909      	ldr	r1, [pc, #36]	; (864c <_GLOBAL__sub_I_opcode_info+0x54>)
    8628:	f002 f8b2 	bl	a790 <__aeabi_atexit>
String last_command = "";
    862c:	4908      	ldr	r1, [pc, #32]	; (8650 <_GLOBAL__sub_I_opcode_info+0x58>)
    862e:	4809      	ldr	r0, [pc, #36]	; (8654 <_GLOBAL__sub_I_opcode_info+0x5c>)
    8630:	f000 f8d0 	bl	87d4 <String::String(char const*)>
    8634:	4a04      	ldr	r2, [pc, #16]	; (8648 <_GLOBAL__sub_I_opcode_info+0x50>)
    8636:	4908      	ldr	r1, [pc, #32]	; (8658 <_GLOBAL__sub_I_opcode_info+0x60>)
    8638:	4806      	ldr	r0, [pc, #24]	; (8654 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    863a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    863e:	f002 b8a7 	b.w	a790 <__aeabi_atexit>
    8642:	bf00      	nop
    8644:	20015418 	.word	0x20015418
    8648:	20004398 	.word	0x20004398
    864c:	0000009d 	.word	0x0000009d
    8650:	20000488 	.word	0x20000488
    8654:	200153f0 	.word	0x200153f0
    8658:	0000875d 	.word	0x0000875d

0000865c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    865c:	4608      	mov	r0, r1
    865e:	f001 bcab 	b.w	9fb8 <usb_serial_putchar>
    8662:	bf00      	nop

00008664 <Print::print(String const&)>:
{
    8664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8668:	688c      	ldr	r4, [r1, #8]
    866a:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    866c:	b1dc      	cbz	r4, 86a6 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    866e:	2500      	movs	r5, #0
    8670:	4688      	mov	r8, r1
    8672:	4606      	mov	r6, r0
	size_t count = 0;
    8674:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8676:	462b      	mov	r3, r5
    8678:	2221      	movs	r2, #33	; 0x21
    867a:	a901      	add	r1, sp, #4
    867c:	4640      	mov	r0, r8
    867e:	f000 f977 	bl	8970 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    8682:	2c20      	cmp	r4, #32
    8684:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    8686:	6833      	ldr	r3, [r6, #0]
    8688:	bf28      	it	cs
    868a:	2220      	movcs	r2, #32
    868c:	a901      	add	r1, sp, #4
    868e:	4630      	mov	r0, r6
    8690:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    8692:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    8694:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    8696:	4798      	blx	r3
    8698:	4407      	add	r7, r0
	while (len > 0) {
    869a:	2c00      	cmp	r4, #0
    869c:	d1eb      	bne.n	8676 <Print::print(String const&)+0x12>
}
    869e:	4638      	mov	r0, r7
    86a0:	b00a      	add	sp, #40	; 0x28
    86a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    86a6:	4627      	mov	r7, r4
}
    86a8:	4638      	mov	r0, r7
    86aa:	b00a      	add	sp, #40	; 0x28
    86ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000086b0 <Print::println()>:
{
    86b0:	b500      	push	{lr}
	return write(buf, 2);
    86b2:	6803      	ldr	r3, [r0, #0]
{
    86b4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    86b6:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    86ba:	2202      	movs	r2, #2
    86bc:	a901      	add	r1, sp, #4
    86be:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    86c0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    86c4:	4798      	blx	r3
}
    86c6:	b003      	add	sp, #12
    86c8:	f85d fb04 	ldr.w	pc, [sp], #4

000086cc <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    86cc:	4b05      	ldr	r3, [pc, #20]	; (86e4 <_write+0x18>)
    86ce:	2802      	cmp	r0, #2
    86d0:	bf88      	it	hi
    86d2:	4603      	movhi	r3, r0
{
    86d4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    86d6:	681c      	ldr	r4, [r3, #0]
    86d8:	4618      	mov	r0, r3
    86da:	6863      	ldr	r3, [r4, #4]
}
    86dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    86e0:	4718      	bx	r3
    86e2:	bf00      	nop
    86e4:	20004380 	.word	0x20004380

000086e8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    86e8:	f001 bc56 	b.w	9f98 <usb_serial_getchar>

000086ec <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    86ec:	f001 bbee 	b.w	9ecc <usb_serial_peekchar>

000086f0 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    86f0:	6081      	str	r1, [r0, #8]
}
    86f2:	4770      	bx	lr

000086f4 <String::String(String const&)>:
String::String(const String &value)
    86f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    86f6:	4288      	cmp	r0, r1
	buffer = NULL;
    86f8:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    86fc:	4604      	mov	r4, r0
	len = 0;
    86fe:	6085      	str	r5, [r0, #8]
	flags = 0;
    8700:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    8702:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    8706:	d002      	beq.n	870e <String::String(String const&)+0x1a>
    8708:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    870a:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    870c:	b90e      	cbnz	r6, 8712 <String::String(String const&)+0x1e>
}
    870e:	4620      	mov	r0, r4
    8710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8712:	1c70      	adds	r0, r6, #1
    8714:	f002 f846 	bl	a7a4 <malloc>
	if (newbuffer) {
    8718:	2800      	cmp	r0, #0
    871a:	d0f8      	beq.n	870e <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    871c:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    871e:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    8720:	6020      	str	r0, [r4, #0]
	len = length;
    8722:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    8726:	f003 fb49 	bl	bdbc <strcpy>
}
    872a:	4620      	mov	r0, r4
    872c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    872e:	bf00      	nop

00008730 <String::String(String&&)>:
	buffer = NULL;
    8730:	2300      	movs	r3, #0
	if (&rhs == this) return;
    8732:	4288      	cmp	r0, r1
	capacity = 0;
    8734:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8738:	6083      	str	r3, [r0, #8]
	flags = 0;
    873a:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    873c:	d00c      	beq.n	8758 <String::String(String&&)+0x28>
String::String(String &&rval)
    873e:	b410      	push	{r4}
	capacity = rhs.capacity;
    8740:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    8744:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    8748:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    874c:	688a      	ldr	r2, [r1, #8]
}
    874e:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    8752:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    8754:	6082      	str	r2, [r0, #8]
}
    8756:	4770      	bx	lr
    8758:	4770      	bx	lr
    875a:	bf00      	nop

0000875c <String::~String()>:
String::~String()
    875c:	b510      	push	{r4, lr}
    875e:	4604      	mov	r4, r0
	free(buffer);
    8760:	6800      	ldr	r0, [r0, #0]
    8762:	f002 f827 	bl	a7b4 <free>
}
    8766:	4620      	mov	r0, r4
    8768:	bd10      	pop	{r4, pc}
    876a:	bf00      	nop

0000876c <String::copy(char const*, unsigned int)>:
{
    876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    876e:	4604      	mov	r4, r0
	if (length == 0) {
    8770:	4615      	mov	r5, r2
    8772:	b932      	cbnz	r2, 8782 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8774:	6803      	ldr	r3, [r0, #0]
    8776:	b103      	cbz	r3, 877a <String::copy(char const*, unsigned int)+0xe>
    8778:	701a      	strb	r2, [r3, #0]
		len = 0;
    877a:	2300      	movs	r3, #0
}
    877c:	4620      	mov	r0, r4
		len = 0;
    877e:	60a3      	str	r3, [r4, #8]
}
    8780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8782:	6843      	ldr	r3, [r0, #4]
    8784:	460e      	mov	r6, r1
    8786:	429a      	cmp	r2, r3
    8788:	d91c      	bls.n	87c4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    878a:	1c51      	adds	r1, r2, #1
    878c:	6800      	ldr	r0, [r0, #0]
    878e:	f002 fad5 	bl	ad3c <realloc>
	if (newbuffer) {
    8792:	4607      	mov	r7, r0
    8794:	b160      	cbz	r0, 87b0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8796:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8798:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    879c:	b90b      	cbnz	r3, 87a2 <String::copy(char const*, unsigned int)+0x36>
    879e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    87a0:	6827      	ldr	r7, [r4, #0]
    87a2:	4631      	mov	r1, r6
    87a4:	4638      	mov	r0, r7
	len = length;
    87a6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    87a8:	f003 fb08 	bl	bdbc <strcpy>
}
    87ac:	4620      	mov	r0, r4
    87ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    87b0:	6820      	ldr	r0, [r4, #0]
    87b2:	b110      	cbz	r0, 87ba <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    87b4:	f001 fffe 	bl	a7b4 <free>
			buffer = NULL;
    87b8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    87ba:	2300      	movs	r3, #0
}
    87bc:	4620      	mov	r0, r4
		len = capacity = 0;
    87be:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    87c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    87c4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    87c6:	4631      	mov	r1, r6
	len = length;
    87c8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    87ca:	4638      	mov	r0, r7
    87cc:	f003 faf6 	bl	bdbc <strcpy>
	return *this;
    87d0:	e7ec      	b.n	87ac <String::copy(char const*, unsigned int)+0x40>
    87d2:	bf00      	nop

000087d4 <String::String(char const*)>:
String::String(const char *cstr)
    87d4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    87d6:	2300      	movs	r3, #0
String::String(const char *cstr)
    87d8:	4604      	mov	r4, r0
	capacity = 0;
    87da:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    87de:	6083      	str	r3, [r0, #8]
	flags = 0;
    87e0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    87e2:	b141      	cbz	r1, 87f6 <String::String(char const*)+0x22>
    87e4:	460d      	mov	r5, r1
    87e6:	4608      	mov	r0, r1
    87e8:	f003 fb4a 	bl	be80 <strlen>
    87ec:	4602      	mov	r2, r0
    87ee:	4629      	mov	r1, r5
    87f0:	4620      	mov	r0, r4
    87f2:	f7ff ffbb 	bl	876c <String::copy(char const*, unsigned int)>
}
    87f6:	4620      	mov	r0, r4
    87f8:	bd38      	pop	{r3, r4, r5, pc}
    87fa:	bf00      	nop

000087fc <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    87fc:	4281      	cmp	r1, r0
    87fe:	d003      	beq.n	8808 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    8800:	688a      	ldr	r2, [r1, #8]
    8802:	6809      	ldr	r1, [r1, #0]
    8804:	f7ff bfb2 	b.w	876c <String::copy(char const*, unsigned int)>
}
    8808:	4770      	bx	lr
    880a:	bf00      	nop

0000880c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    880c:	4288      	cmp	r0, r1
{
    880e:	b538      	push	{r3, r4, r5, lr}
    8810:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    8812:	d00e      	beq.n	8832 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    8814:	6800      	ldr	r0, [r0, #0]
    8816:	460c      	mov	r4, r1
    8818:	b108      	cbz	r0, 881e <String::operator=(String&&)+0x12>
    881a:	f001 ffcb 	bl	a7b4 <free>
	len = rhs.len;
    881e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    8820:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    8822:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    8826:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    8828:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    882c:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    8830:	60a3      	str	r3, [r4, #8]
}
    8832:	4628      	mov	r0, r5
    8834:	bd38      	pop	{r3, r4, r5, pc}
    8836:	bf00      	nop

00008838 <String::operator=(char const*)>:
{
    8838:	b538      	push	{r3, r4, r5, lr}
    883a:	4605      	mov	r5, r0
	if (cstr) {
    883c:	460c      	mov	r4, r1
    883e:	b149      	cbz	r1, 8854 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    8840:	4608      	mov	r0, r1
    8842:	f003 fb1d 	bl	be80 <strlen>
    8846:	4621      	mov	r1, r4
    8848:	4602      	mov	r2, r0
    884a:	4628      	mov	r0, r5
    884c:	f7ff ff8e 	bl	876c <String::copy(char const*, unsigned int)>
}
    8850:	4628      	mov	r0, r5
    8852:	bd38      	pop	{r3, r4, r5, pc}
    8854:	4628      	mov	r0, r5
		len = 0;
    8856:	60a9      	str	r1, [r5, #8]
}
    8858:	bd38      	pop	{r3, r4, r5, pc}
    885a:	bf00      	nop

0000885c <String::append(char const*, unsigned int)>:
{
    885c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8860:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8862:	6800      	ldr	r0, [r0, #0]
{
    8864:	460d      	mov	r5, r1
    8866:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8868:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    886a:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    886c:	d809      	bhi.n	8882 <String::append(char const*, unsigned int)+0x26>
    886e:	18c2      	adds	r2, r0, r3
    8870:	4291      	cmp	r1, r2
    8872:	d206      	bcs.n	8882 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    8874:	1a0f      	subs	r7, r1, r0
		self = true;
    8876:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    887a:	b936      	cbnz	r6, 888a <String::append(char const*, unsigned int)+0x2e>
}
    887c:	4620      	mov	r0, r4
    887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    8882:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    8886:	2e00      	cmp	r6, #0
    8888:	d0f8      	beq.n	887c <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    888a:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    888e:	6862      	ldr	r2, [r4, #4]
    8890:	4590      	cmp	r8, r2
    8892:	d90c      	bls.n	88ae <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8894:	f108 0101 	add.w	r1, r8, #1
    8898:	f002 fa50 	bl	ad3c <realloc>
	if (newbuffer) {
    889c:	2800      	cmp	r0, #0
    889e:	d0ed      	beq.n	887c <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    88a0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    88a2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    88a6:	b913      	cbnz	r3, 88ae <String::append(char const*, unsigned int)+0x52>
    88a8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    88aa:	6820      	ldr	r0, [r4, #0]
    88ac:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    88ae:	f1b9 0f00 	cmp.w	r9, #0
    88b2:	d108      	bne.n	88c6 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    88b4:	4629      	mov	r1, r5
    88b6:	4418      	add	r0, r3
    88b8:	f003 fa80 	bl	bdbc <strcpy>
}
    88bc:	4620      	mov	r0, r4
	len = newlen;
    88be:	f8c4 8008 	str.w	r8, [r4, #8]
}
    88c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    88c6:	4632      	mov	r2, r6
    88c8:	19c1      	adds	r1, r0, r7
    88ca:	4418      	add	r0, r3
    88cc:	f000 f9ca 	bl	8c64 <memcpy>
		buffer[newlen] = 0;
    88d0:	6823      	ldr	r3, [r4, #0]
    88d2:	2200      	movs	r2, #0
    88d4:	f803 2008 	strb.w	r2, [r3, r8]
    88d8:	e7f0      	b.n	88bc <String::append(char const*, unsigned int)+0x60>
    88da:	bf00      	nop

000088dc <String::append(char)>:
{
    88dc:	b510      	push	{r4, lr}
    88de:	b082      	sub	sp, #8
	buf[1] = 0;
    88e0:	2300      	movs	r3, #0
{
    88e2:	4604      	mov	r4, r0
	append(buf, 1);
    88e4:	2201      	movs	r2, #1
	buf[0] = c;
    88e6:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    88ea:	a901      	add	r1, sp, #4
	buf[1] = 0;
    88ec:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    88f0:	f7ff ffb4 	bl	885c <String::append(char const*, unsigned int)>
}
    88f4:	4620      	mov	r0, r4
    88f6:	b002      	add	sp, #8
    88f8:	bd10      	pop	{r4, pc}
    88fa:	bf00      	nop

000088fc <operator+(StringSumHelper const&, String const&)>:
{
    88fc:	b510      	push	{r4, lr}
    88fe:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    8900:	688a      	ldr	r2, [r1, #8]
    8902:	6809      	ldr	r1, [r1, #0]
    8904:	f7ff ffaa 	bl	885c <String::append(char const*, unsigned int)>
}
    8908:	4620      	mov	r0, r4
    890a:	bd10      	pop	{r4, pc}

0000890c <operator+(StringSumHelper const&, char const*)>:
{
    890c:	b538      	push	{r3, r4, r5, lr}
    890e:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    8910:	b141      	cbz	r1, 8924 <operator+(StringSumHelper const&, char const*)+0x18>
    8912:	460c      	mov	r4, r1
    8914:	4608      	mov	r0, r1
    8916:	f003 fab3 	bl	be80 <strlen>
    891a:	4602      	mov	r2, r0
    891c:	4621      	mov	r1, r4
    891e:	4628      	mov	r0, r5
    8920:	f7ff ff9c 	bl	885c <String::append(char const*, unsigned int)>
}
    8924:	4628      	mov	r0, r5
    8926:	bd38      	pop	{r3, r4, r5, pc}

00008928 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8928:	6882      	ldr	r2, [r0, #8]
{
    892a:	b508      	push	{r3, lr}
    892c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    892e:	b13a      	cbz	r2, 8940 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    8930:	b161      	cbz	r1, 894c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    8932:	6800      	ldr	r0, [r0, #0]
    8934:	f003 f8d8 	bl	bae8 <strcmp>
    8938:	fab0 f080 	clz	r0, r0
    893c:	0940      	lsrs	r0, r0, #5
}
    893e:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8940:	b131      	cbz	r1, 8950 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    8942:	7818      	ldrb	r0, [r3, #0]
    8944:	fab0 f080 	clz	r0, r0
    8948:	0940      	lsrs	r0, r0, #5
}
    894a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    894c:	6803      	ldr	r3, [r0, #0]
    894e:	e7f8      	b.n	8942 <String::equals(char const*) const+0x1a>
    8950:	2001      	movs	r0, #1
}
    8952:	bd08      	pop	{r3, pc}

00008954 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    8954:	6883      	ldr	r3, [r0, #8]
    8956:	428b      	cmp	r3, r1
    8958:	d903      	bls.n	8962 <String::operator[](unsigned int)+0xe>
    895a:	6800      	ldr	r0, [r0, #0]
    895c:	b108      	cbz	r0, 8962 <String::operator[](unsigned int)+0xe>
	return buffer[index];
    895e:	4408      	add	r0, r1
}
    8960:	4770      	bx	lr
		dummy_writable_char = 0;
    8962:	4b02      	ldr	r3, [pc, #8]	; (896c <String::operator[](unsigned int)+0x18>)
    8964:	2200      	movs	r2, #0
		return dummy_writable_char;
    8966:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    8968:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    896a:	4770      	bx	lr
    896c:	20018893 	.word	0x20018893

00008970 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    8970:	b1c2      	cbz	r2, 89a4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    8972:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    8974:	fab1 f681 	clz	r6, r1
    8978:	460c      	mov	r4, r1
    897a:	0976      	lsrs	r6, r6, #5
    897c:	b119      	cbz	r1, 8986 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    897e:	6885      	ldr	r5, [r0, #8]
    8980:	429d      	cmp	r5, r3
    8982:	d801      	bhi.n	8988 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    8984:	700e      	strb	r6, [r1, #0]
}
    8986:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    8988:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    898a:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    898e:	6801      	ldr	r1, [r0, #0]
    8990:	4620      	mov	r0, r4
    8992:	4565      	cmp	r5, ip
    8994:	4419      	add	r1, r3
    8996:	bf28      	it	cs
    8998:	4665      	movcs	r5, ip
    899a:	462a      	mov	r2, r5
    899c:	f002 ffc2 	bl	b924 <strncpy>
	buf[n] = 0;
    89a0:	5566      	strb	r6, [r4, r5]
}
    89a2:	bd70      	pop	{r4, r5, r6, pc}
    89a4:	4770      	bx	lr
    89a6:	bf00      	nop

000089a8 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    89a8:	6883      	ldr	r3, [r0, #8]
    89aa:	b13b      	cbz	r3, 89bc <String::indexOf(char) const+0x14>
{
    89ac:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    89ae:	6804      	ldr	r4, [r0, #0]
    89b0:	4620      	mov	r0, r4
    89b2:	f002 ff51 	bl	b858 <strchr>
	if (temp == NULL) return -1;
    89b6:	b120      	cbz	r0, 89c2 <String::indexOf(char) const+0x1a>
	return temp - buffer;
    89b8:	1b00      	subs	r0, r0, r4
}
    89ba:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    89bc:	f04f 30ff 	mov.w	r0, #4294967295
}
    89c0:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    89c2:	f04f 30ff 	mov.w	r0, #4294967295
}
    89c6:	bd10      	pop	{r4, pc}

000089c8 <String::substring(unsigned int) const>:
{
    89c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    89cc:	688f      	ldr	r7, [r1, #8]
{
    89ce:	460e      	mov	r6, r1
    89d0:	4604      	mov	r4, r0
	if (left > right) {
    89d2:	4297      	cmp	r7, r2
    89d4:	d202      	bcs.n	89dc <String::substring(unsigned int) const+0x14>
    89d6:	4613      	mov	r3, r2
    89d8:	463a      	mov	r2, r7
    89da:	461f      	mov	r7, r3
	buffer = NULL;
    89dc:	2300      	movs	r3, #0
	len = 0;
    89de:	60a3      	str	r3, [r4, #8]
	flags = 0;
    89e0:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    89e2:	68b0      	ldr	r0, [r6, #8]
    89e4:	4290      	cmp	r0, r2
	capacity = 0;
    89e6:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    89ea:	d314      	bcc.n	8a16 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    89ec:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    89ee:	6831      	ldr	r1, [r6, #0]
    89f0:	bf28      	it	cs
    89f2:	4607      	movcs	r7, r0
    89f4:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    89f8:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    89fa:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    89fc:	189d      	adds	r5, r3, r2
    89fe:	d00d      	beq.n	8a1c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    8a00:	4628      	mov	r0, r5
    8a02:	f003 fa3d 	bl	be80 <strlen>
    8a06:	4629      	mov	r1, r5
    8a08:	4602      	mov	r2, r0
    8a0a:	4620      	mov	r0, r4
    8a0c:	f7ff feae 	bl	876c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8a10:	6833      	ldr	r3, [r6, #0]
    8a12:	f803 8007 	strb.w	r8, [r3, r7]
}
    8a16:	4620      	mov	r0, r4
    8a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8a1c:	60a5      	str	r5, [r4, #8]
    8a1e:	e7f8      	b.n	8a12 <String::substring(unsigned int) const+0x4a>

00008a20 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    8a20:	429a      	cmp	r2, r3
{
    8a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a26:	4604      	mov	r4, r0
    8a28:	460e      	mov	r6, r1
	if (left > right) {
    8a2a:	d902      	bls.n	8a32 <String::substring(unsigned int, unsigned int) const+0x12>
    8a2c:	4611      	mov	r1, r2
    8a2e:	461a      	mov	r2, r3
    8a30:	460b      	mov	r3, r1
	buffer = NULL;
    8a32:	2000      	movs	r0, #0
	len = 0;
    8a34:	60a0      	str	r0, [r4, #8]
	flags = 0;
    8a36:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    8a38:	68b7      	ldr	r7, [r6, #8]
    8a3a:	4297      	cmp	r7, r2
	capacity = 0;
    8a3c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    8a40:	d314      	bcc.n	8a6c <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    8a42:	429f      	cmp	r7, r3
    8a44:	bf28      	it	cs
    8a46:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    8a48:	6833      	ldr	r3, [r6, #0]
    8a4a:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    8a4e:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    8a50:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    8a52:	189d      	adds	r5, r3, r2
    8a54:	d00d      	beq.n	8a72 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    8a56:	4628      	mov	r0, r5
    8a58:	f003 fa12 	bl	be80 <strlen>
    8a5c:	4629      	mov	r1, r5
    8a5e:	4602      	mov	r2, r0
    8a60:	4620      	mov	r0, r4
    8a62:	f7ff fe83 	bl	876c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8a66:	6833      	ldr	r3, [r6, #0]
    8a68:	f803 8007 	strb.w	r8, [r3, r7]
}
    8a6c:	4620      	mov	r0, r4
    8a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8a72:	60a5      	str	r5, [r4, #8]
    8a74:	e7f8      	b.n	8a68 <String::substring(unsigned int, unsigned int) const+0x48>
    8a76:	bf00      	nop

00008a78 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    8a78:	b510      	push	{r4, lr}
    8a7a:	4604      	mov	r4, r0
    8a7c:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    8a7e:	68a1      	ldr	r1, [r4, #8]
    8a80:	b10a      	cbz	r2, 8a86 <String::remove(unsigned int, unsigned int)+0xe>
    8a82:	4281      	cmp	r1, r0
    8a84:	d801      	bhi.n	8a8a <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    8a86:	4620      	mov	r0, r4
    8a88:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    8a8a:	eb00 0c02 	add.w	ip, r0, r2
    8a8e:	4561      	cmp	r1, ip
    8a90:	d30e      	bcc.n	8ab0 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    8a92:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    8a94:	4661      	mov	r1, ip
    8a96:	1a1a      	subs	r2, r3, r0
		len = len - count;
    8a98:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    8a9a:	6823      	ldr	r3, [r4, #0]
    8a9c:	4419      	add	r1, r3
    8a9e:	4418      	add	r0, r3
    8aa0:	f002 fe0c 	bl	b6bc <memmove>
		buffer[len] = 0;
    8aa4:	6822      	ldr	r2, [r4, #0]
    8aa6:	68a3      	ldr	r3, [r4, #8]
    8aa8:	2100      	movs	r1, #0
}
    8aaa:	4620      	mov	r0, r4
		buffer[len] = 0;
    8aac:	54d1      	strb	r1, [r2, r3]
}
    8aae:	bd10      	pop	{r4, pc}
    8ab0:	4603      	mov	r3, r0
    8ab2:	2200      	movs	r2, #0
    8ab4:	e7f0      	b.n	8a98 <String::remove(unsigned int, unsigned int)+0x20>
    8ab6:	bf00      	nop

00008ab8 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    8ab8:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    8aba:	6804      	ldr	r4, [r0, #0]
{
    8abc:	4605      	mov	r5, r0
	if (!buffer) return *this;
    8abe:	b144      	cbz	r4, 8ad2 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    8ac0:	7820      	ldrb	r0, [r4, #0]
    8ac2:	b130      	cbz	r0, 8ad2 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    8ac4:	f002 fca6 	bl	b414 <tolower>
    8ac8:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    8aca:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    8ace:	2800      	cmp	r0, #0
    8ad0:	d1f8      	bne.n	8ac4 <String::toLowerCase()+0xc>
	}
	return *this;
}
    8ad2:	4628      	mov	r0, r5
    8ad4:	bd38      	pop	{r3, r4, r5, pc}
    8ad6:	bf00      	nop

00008ad8 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    8ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    8adc:	6807      	ldr	r7, [r0, #0]
{
    8ade:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    8ae0:	b1e7      	cbz	r7, 8b1c <String::trim()+0x44>
    8ae2:	6884      	ldr	r4, [r0, #8]
    8ae4:	b1d4      	cbz	r4, 8b1c <String::trim()+0x44>
    8ae6:	46b8      	mov	r8, r7
    8ae8:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    8aea:	f818 0b01 	ldrb.w	r0, [r8], #1
    8aee:	f002 fc89 	bl	b404 <isspace>
    8af2:	2800      	cmp	r0, #0
    8af4:	d1f8      	bne.n	8ae8 <String::trim()+0x10>
	char *end = buffer + len - 1;
    8af6:	3c01      	subs	r4, #1
    8af8:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    8afa:	e002      	b.n	8b02 <String::trim()+0x2a>
    8afc:	42a5      	cmp	r5, r4
    8afe:	d805      	bhi.n	8b0c <String::trim()+0x34>
    8b00:	3c01      	subs	r4, #1
    8b02:	7820      	ldrb	r0, [r4, #0]
    8b04:	f002 fc7e 	bl	b404 <isspace>
    8b08:	2800      	cmp	r0, #0
    8b0a:	d1f7      	bne.n	8afc <String::trim()+0x24>
	len = end + 1 - begin;
    8b0c:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    8b0e:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    8b10:	eba2 0205 	sub.w	r2, r2, r5
    8b14:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    8b16:	d304      	bcc.n	8b22 <String::trim()+0x4a>
	buffer[len] = 0;
    8b18:	2300      	movs	r3, #0
    8b1a:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    8b1c:	4630      	mov	r0, r6
    8b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    8b22:	4638      	mov	r0, r7
    8b24:	4629      	mov	r1, r5
    8b26:	f000 f89d 	bl	8c64 <memcpy>
	buffer[len] = 0;
    8b2a:	6837      	ldr	r7, [r6, #0]
    8b2c:	68b2      	ldr	r2, [r6, #8]
    8b2e:	e7f3      	b.n	8b18 <String::trim()+0x40>

00008b30 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    8b30:	6800      	ldr	r0, [r0, #0]
    8b32:	b108      	cbz	r0, 8b38 <String::toInt() const+0x8>
    8b34:	f001 be32 	b.w	a79c <atol>
	return 0;
}
    8b38:	4770      	bx	lr
    8b3a:	bf00      	nop

00008b3c <delay>:
	if (msec == 0) return;
    8b3c:	b900      	cbnz	r0, 8b40 <delay+0x4>
    8b3e:	4770      	bx	lr
{
    8b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8b44:	2101      	movs	r1, #1
    8b46:	4681      	mov	r9, r0
    8b48:	4c21      	ldr	r4, [pc, #132]	; (8bd0 <delay+0x94>)
    8b4a:	4d22      	ldr	r5, [pc, #136]	; (8bd4 <delay+0x98>)
    8b4c:	4e22      	ldr	r6, [pc, #136]	; (8bd8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8b4e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8b52:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8b54:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8b56:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d1f7      	bne.n	8b4e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8b5e:	491f      	ldr	r1, [pc, #124]	; (8bdc <delay+0xa0>)
    8b60:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    8b62:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8b66:	f8df a078 	ldr.w	sl, [pc, #120]	; 8be0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    8b6a:	1a1b      	subs	r3, r3, r0
    8b6c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    8b6e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8b72:	f8da 2000 	ldr.w	r2, [sl]
    8b76:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    8b7a:	455a      	cmp	r2, fp
    8b7c:	bf94      	ite	ls
    8b7e:	4490      	addls	r8, r2
    8b80:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8b82:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8b86:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8b88:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8b8a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8b8e:	2b00      	cmp	r3, #0
    8b90:	d1f7      	bne.n	8b82 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8b92:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8b94:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8b98:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    8b9a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8b9e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    8ba2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    8ba6:	bf94      	ite	ls
    8ba8:	4462      	addls	r2, ip
    8baa:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    8bae:	eba2 0208 	sub.w	r2, r2, r8
    8bb2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    8bb6:	d306      	bcc.n	8bc6 <delay+0x8a>
			if (--msec == 0) return;
    8bb8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    8bbc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8bc0:	d1df      	bne.n	8b82 <delay+0x46>
}
    8bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    8bc6:	f001 fa8b 	bl	a0e0 <yield>
		while ((micros() - start) >= 1000) {
    8bca:	4904      	ldr	r1, [pc, #16]	; (8bdc <delay+0xa0>)
    8bcc:	e7d9      	b.n	8b82 <delay+0x46>
    8bce:	bf00      	nop
    8bd0:	2001886c 	.word	0x2001886c
    8bd4:	20018868 	.word	0x20018868
    8bd8:	20018864 	.word	0x20018864
    8bdc:	e0001000 	.word	0xe0001000
    8be0:	20018860 	.word	0x20018860

00008be4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8be4:	2836      	cmp	r0, #54	; 0x36
    8be6:	d829      	bhi.n	8c3c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8be8:	4b16      	ldr	r3, [pc, #88]	; (8c44 <pinMode+0x60>)
    8bea:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8bec:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    8bee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8bf2:	589a      	ldr	r2, [r3, r2]
{
    8bf4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8bf6:	6853      	ldr	r3, [r2, #4]
    8bf8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8bfa:	d00e      	beq.n	8c1a <pinMode+0x36>
    8bfc:	2904      	cmp	r1, #4
    8bfe:	d00c      	beq.n	8c1a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8c00:	ea23 0304 	bic.w	r3, r3, r4
    8c04:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8c06:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8c08:	b1a9      	cbz	r1, 8c36 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    8c0a:	2902      	cmp	r1, #2
    8c0c:	d017      	beq.n	8c3e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    8c0e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8c10:	bf0c      	ite	eq
    8c12:	4a0d      	ldreq	r2, [pc, #52]	; (8c48 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8c14:	4a0d      	ldrne	r2, [pc, #52]	; (8c4c <pinMode+0x68>)
    8c16:	601a      	str	r2, [r3, #0]
    8c18:	e007      	b.n	8c2a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8c1a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    8c1c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8c1e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8c20:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8c22:	d008      	beq.n	8c36 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8c24:	f640 0238 	movw	r2, #2104	; 0x838
    8c28:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8c2a:	6843      	ldr	r3, [r0, #4]
    8c2c:	2215      	movs	r2, #21
}
    8c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    8c32:	601a      	str	r2, [r3, #0]
}
    8c34:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8c36:	2238      	movs	r2, #56	; 0x38
    8c38:	601a      	str	r2, [r3, #0]
    8c3a:	e7f6      	b.n	8c2a <pinMode+0x46>
    8c3c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8c3e:	4a04      	ldr	r2, [pc, #16]	; (8c50 <pinMode+0x6c>)
    8c40:	601a      	str	r2, [r3, #0]
    8c42:	e7f2      	b.n	8c2a <pinMode+0x46>
    8c44:	20000d0c 	.word	0x20000d0c
    8c48:	00013038 	.word	0x00013038
    8c4c:	00010038 	.word	0x00010038
    8c50:	0001f038 	.word	0x0001f038

00008c54 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8c54:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8c56:	f7f9 fadd 	bl	2214 <setup>
	while (1) {
		loop();
    8c5a:	f7fd ff99 	bl	6b90 <loop>
		yield();
    8c5e:	f001 fa3f 	bl	a0e0 <yield>
	while (1) {
    8c62:	e7fa      	b.n	8c5a <main+0x6>

00008c64 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8c64:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8c66:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8c6a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8c6e:	d16d      	bne.n	8d4c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8c70:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8c72:	d341      	bcc.n	8cf8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8c74:	f851 3b04 	ldr.w	r3, [r1], #4
    8c78:	f840 3b04 	str.w	r3, [r0], #4
    8c7c:	f851 3b04 	ldr.w	r3, [r1], #4
    8c80:	f840 3b04 	str.w	r3, [r0], #4
    8c84:	f851 3b04 	ldr.w	r3, [r1], #4
    8c88:	f840 3b04 	str.w	r3, [r0], #4
    8c8c:	f851 3b04 	ldr.w	r3, [r1], #4
    8c90:	f840 3b04 	str.w	r3, [r0], #4
    8c94:	f851 3b04 	ldr.w	r3, [r1], #4
    8c98:	f840 3b04 	str.w	r3, [r0], #4
    8c9c:	f851 3b04 	ldr.w	r3, [r1], #4
    8ca0:	f840 3b04 	str.w	r3, [r0], #4
    8ca4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ca8:	f840 3b04 	str.w	r3, [r0], #4
    8cac:	f851 3b04 	ldr.w	r3, [r1], #4
    8cb0:	f840 3b04 	str.w	r3, [r0], #4
    8cb4:	f851 3b04 	ldr.w	r3, [r1], #4
    8cb8:	f840 3b04 	str.w	r3, [r0], #4
    8cbc:	f851 3b04 	ldr.w	r3, [r1], #4
    8cc0:	f840 3b04 	str.w	r3, [r0], #4
    8cc4:	f851 3b04 	ldr.w	r3, [r1], #4
    8cc8:	f840 3b04 	str.w	r3, [r0], #4
    8ccc:	f851 3b04 	ldr.w	r3, [r1], #4
    8cd0:	f840 3b04 	str.w	r3, [r0], #4
    8cd4:	f851 3b04 	ldr.w	r3, [r1], #4
    8cd8:	f840 3b04 	str.w	r3, [r0], #4
    8cdc:	f851 3b04 	ldr.w	r3, [r1], #4
    8ce0:	f840 3b04 	str.w	r3, [r0], #4
    8ce4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ce8:	f840 3b04 	str.w	r3, [r0], #4
    8cec:	f851 3b04 	ldr.w	r3, [r1], #4
    8cf0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8cf4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8cf6:	d2bd      	bcs.n	8c74 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8cf8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8cfa:	d311      	bcc.n	8d20 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8cfc:	f851 3b04 	ldr.w	r3, [r1], #4
    8d00:	f840 3b04 	str.w	r3, [r0], #4
    8d04:	f851 3b04 	ldr.w	r3, [r1], #4
    8d08:	f840 3b04 	str.w	r3, [r0], #4
    8d0c:	f851 3b04 	ldr.w	r3, [r1], #4
    8d10:	f840 3b04 	str.w	r3, [r0], #4
    8d14:	f851 3b04 	ldr.w	r3, [r1], #4
    8d18:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8d1c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8d1e:	d2ed      	bcs.n	8cfc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8d20:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8d22:	d305      	bcc.n	8d30 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8d24:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8d28:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8d2c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8d2e:	d2f9      	bcs.n	8d24 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8d30:	3204      	adds	r2, #4
	beq	.Ldone
    8d32:	d008      	beq.n	8d46 <memcpy+0xe2>

	lsls	r2, r2, #31
    8d34:	07d2      	lsls	r2, r2, #31
	itt ne
    8d36:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8d38:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8d3c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8d40:	d301      	bcc.n	8d46 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8d42:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8d44:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8d46:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8d48:	4770      	bx	lr
    8d4a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8d4c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    8d4e:	d313      	bcc.n	8d78 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8d50:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8d52:	d08d      	beq.n	8c70 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8d54:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8d58:	d08a      	beq.n	8c70 <memcpy+0xc>

	rsb	r3, #4
    8d5a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    8d5e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8d60:	07db      	lsls	r3, r3, #31
	itt ne
    8d62:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8d64:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8d68:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8d6c:	d380      	bcc.n	8c70 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8d6e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8d72:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8d76:	e77b      	b.n	8c70 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8d78:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8d7a:	d3d9      	bcc.n	8d30 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8d7c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8d7e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8d82:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8d86:	d2f9      	bcs.n	8d7c <memcpy+0x118>

	ldrb	r3, [r1]
    8d88:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8d8a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8d8c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8d8e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8d90:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8d92:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8d94:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8d96:	4770      	bx	lr

00008d98 <ultoa>:
	int i=0, j;
    8d98:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8d9c:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    8d9e:	4666      	mov	r6, ip
	int i=0, j;
    8da0:	2400      	movs	r4, #0
    8da2:	e000      	b.n	8da6 <ultoa+0xe>
		i++;
    8da4:	3401      	adds	r4, #1
		digit = val % radix;
    8da6:	fbb0 f5f2 	udiv	r5, r0, r2
    8daa:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8dae:	2b09      	cmp	r3, #9
    8db0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    8db4:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8db8:	fa5f fe8e 	uxtb.w	lr, lr
    8dbc:	bf98      	it	ls
    8dbe:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    8dc2:	4290      	cmp	r0, r2
		val /= radix;
    8dc4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8dc6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    8dca:	d2eb      	bcs.n	8da4 <ultoa+0xc>
	buf[i + 1] = 0;
    8dcc:	1c63      	adds	r3, r4, #1
    8dce:	2200      	movs	r2, #0
    8dd0:	18c8      	adds	r0, r1, r3
    8dd2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    8dd4:	b17c      	cbz	r4, 8df6 <ultoa+0x5e>
		t = buf[j];
    8dd6:	4662      	mov	r2, ip
    8dd8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8ddc:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    8de0:	eba1 030c 	sub.w	r3, r1, ip
    8de4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    8de6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    8dea:	3b01      	subs	r3, #1
    8dec:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    8dee:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8df0:	4423      	add	r3, r4
    8df2:	429a      	cmp	r2, r3
    8df4:	dbef      	blt.n	8dd6 <ultoa+0x3e>
}
    8df6:	4608      	mov	r0, r1
    8df8:	bd70      	pop	{r4, r5, r6, pc}
    8dfa:	bf00      	nop

00008dfc <unused_interrupt_vector>:
	__disable_irq();
    8dfc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    8dfe:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    8e02:	4c4f      	ldr	r4, [pc, #316]	; (8f40 <unused_interrupt_vector+0x144>)
    8e04:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    8e08:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    8e0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    8e10:	4e4c      	ldr	r6, [pc, #304]	; (8f44 <unused_interrupt_vector+0x148>)
	while (p < end) {
    8e12:	4d4d      	ldr	r5, [pc, #308]	; (8f48 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    8e14:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    8e18:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    8e1c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    8e20:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    8e24:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    8e28:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    8e2c:	6993      	ldr	r3, [r2, #24]
    8e2e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    8e32:	69d3      	ldr	r3, [r2, #28]
    8e34:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    8e38:	f000 f8d0 	bl	8fdc <tempmonGetTemp>
    8e3c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    8e40:	f001 fc2a 	bl	a698 <rtc_get>
	info->len = sizeof(*info) / 4;
    8e44:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    8e46:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    8e4a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    8e4e:	460b      	mov	r3, r1
    8e50:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8e54:	493d      	ldr	r1, [pc, #244]	; (8f4c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    8e56:	1d30      	adds	r0, r6, #4
    8e58:	405a      	eors	r2, r3
    8e5a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    8e5c:	f002 0301 	and.w	r3, r2, #1
    8e60:	3c01      	subs	r4, #1
    8e62:	fb01 f303 	mul.w	r3, r1, r3
    8e66:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    8e6a:	d1f7      	bne.n	8e5c <unused_interrupt_vector+0x60>
	while (p < end) {
    8e6c:	42a8      	cmp	r0, r5
    8e6e:	d002      	beq.n	8e76 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    8e70:	6873      	ldr	r3, [r6, #4]
    8e72:	4606      	mov	r6, r0
    8e74:	e7ef      	b.n	8e56 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    8e76:	4b32      	ldr	r3, [pc, #200]	; (8f40 <unused_interrupt_vector+0x144>)
    8e78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    8e7c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8e80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8e84:	492f      	ldr	r1, [pc, #188]	; (8f44 <unused_interrupt_vector+0x148>)
    8e86:	4a32      	ldr	r2, [pc, #200]	; (8f50 <unused_interrupt_vector+0x154>)
    8e88:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    8e8c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    8e90:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8e94:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8e98:	4a2e      	ldr	r2, [pc, #184]	; (8f54 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    8e9a:	2502      	movs	r5, #2
    8e9c:	482e      	ldr	r0, [pc, #184]	; (8f58 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8e9e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8ea0:	492e      	ldr	r1, [pc, #184]	; (8f5c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    8ea2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    8ea6:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    8ea8:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8eaa:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8eac:	482c      	ldr	r0, [pc, #176]	; (8f60 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    8eae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    8eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8eb6:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8eb8:	680b      	ldr	r3, [r1, #0]
    8eba:	4283      	cmp	r3, r0
    8ebc:	d83d      	bhi.n	8f3a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    8ebe:	4d26      	ldr	r5, [pc, #152]	; (8f58 <unused_interrupt_vector+0x15c>)
    8ec0:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    8ec2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8ec6:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    8eca:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8ecc:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    8ece:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    8ed2:	4924      	ldr	r1, [pc, #144]	; (8f64 <unused_interrupt_vector+0x168>)
    8ed4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    8ed8:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    8edc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    8ee0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    8ee4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    8ee8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    8eec:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    8ef0:	e001      	b.n	8ef6 <unused_interrupt_vector+0xfa>
		usb_isr();
    8ef2:	f000 f965 	bl	91c0 <usb_isr>
		if (PIT_TFLG0) {
    8ef6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8efa:	2b00      	cmp	r3, #0
    8efc:	d0f9      	beq.n	8ef2 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    8efe:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    8f00:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    8f04:	2c4f      	cmp	r4, #79	; 0x4f
    8f06:	d9f4      	bls.n	8ef2 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8f08:	4b17      	ldr	r3, [pc, #92]	; (8f68 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    8f0a:	2002      	movs	r0, #2
    8f0c:	4917      	ldr	r1, [pc, #92]	; (8f6c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    8f12:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    8f16:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8f18:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    8f1c:	b93b      	cbnz	r3, 8f2e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    8f1e:	4814      	ldr	r0, [pc, #80]	; (8f70 <unused_interrupt_vector+0x174>)
    8f20:	4914      	ldr	r1, [pc, #80]	; (8f74 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8f22:	4a0d      	ldr	r2, [pc, #52]	; (8f58 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    8f24:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    8f26:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d0fa      	beq.n	8f24 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    8f2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8f32:	4a11      	ldr	r2, [pc, #68]	; (8f78 <unused_interrupt_vector+0x17c>)
    8f34:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    8f38:	e7fe      	b.n	8f38 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    8f3a:	f001 f97d 	bl	a238 <set_arm_clock>
    8f3e:	e7be      	b.n	8ebe <unused_interrupt_vector+0xc2>
    8f40:	2027ff00 	.word	0x2027ff00
    8f44:	2027ff80 	.word	0x2027ff80
    8f48:	2027ffa8 	.word	0x2027ffa8
    8f4c:	edb88320 	.word	0xedb88320
    8f50:	2027ffa0 	.word	0x2027ffa0
    8f54:	400fc000 	.word	0x400fc000
    8f58:	40084000 	.word	0x40084000
    8f5c:	2000437c 	.word	0x2000437c
    8f60:	0bcd3d80 	.word	0x0bcd3d80
    8f64:	00249f00 	.word	0x00249f00
    8f68:	400d9000 	.word	0x400d9000
    8f6c:	402e0000 	.word	0x402e0000
    8f70:	400f8000 	.word	0x400f8000
    8f74:	0bad00f1 	.word	0x0bad00f1
    8f78:	05fa0004 	.word	0x05fa0004

00008f7c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    8f7c:	490a      	ldr	r1, [pc, #40]	; (8fa8 <_sbrk+0x2c>)
    8f7e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    8f80:	b138      	cbz	r0, 8f92 <_sbrk+0x16>
{
    8f82:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    8f84:	1813      	adds	r3, r2, r0
    8f86:	4809      	ldr	r0, [pc, #36]	; (8fac <_sbrk+0x30>)
    8f88:	4283      	cmp	r3, r0
    8f8a:	d804      	bhi.n	8f96 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8f8c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    8f8e:	600b      	str	r3, [r1, #0]
}
    8f90:	bd08      	pop	{r3, pc}
    8f92:	4610      	mov	r0, r2
    8f94:	4770      	bx	lr
                        errno = ENOMEM;
    8f96:	f002 fd63 	bl	ba60 <__errno>
    8f9a:	230c      	movs	r3, #12
                        return (void *)-1;
    8f9c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    8fa0:	6003      	str	r3, [r0, #0]
}
    8fa2:	4610      	mov	r0, r2
    8fa4:	bd08      	pop	{r3, pc}
    8fa6:	bf00      	nop
    8fa8:	20004394 	.word	0x20004394
    8fac:	20280000 	.word	0x20280000

00008fb0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    8fb0:	2000      	movs	r0, #0
    8fb2:	4770      	bx	lr

00008fb4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    8fb4:	f04f 30ff 	mov.w	r0, #4294967295
    8fb8:	4770      	bx	lr
    8fba:	bf00      	nop

00008fbc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    8fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    8fc0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    8fc2:	604b      	str	r3, [r1, #4]
}
    8fc4:	4770      	bx	lr
    8fc6:	bf00      	nop

00008fc8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    8fc8:	2001      	movs	r0, #1
    8fca:	4770      	bx	lr

00008fcc <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    8fcc:	f04f 30ff 	mov.w	r0, #4294967295
    8fd0:	4770      	bx	lr
    8fd2:	bf00      	nop

00008fd4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    8fd4:	bf30      	wfi
    8fd6:	e7fd      	b.n	8fd4 <abort>

00008fd8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    8fd8:	f7ff bf10 	b.w	8dfc <unused_interrupt_vector>

00008fdc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    8fdc:	4a12      	ldr	r2, [pc, #72]	; (9028 <tempmonGetTemp+0x4c>)
    8fde:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    8fe2:	075b      	lsls	r3, r3, #29
    8fe4:	d5fb      	bpl.n	8fde <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8fe6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8fea:	4810      	ldr	r0, [pc, #64]	; (902c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8fec:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8ff0:	490f      	ldr	r1, [pc, #60]	; (9030 <tempmonGetTemp+0x54>)
    8ff2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    8ff6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    8ffa:	ed91 6a00 	vldr	s12, [r1]
    8ffe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9002:	4a0c      	ldr	r2, [pc, #48]	; (9034 <tempmonGetTemp+0x58>)
    9004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9008:	4b0b      	ldr	r3, [pc, #44]	; (9038 <tempmonGetTemp+0x5c>)
    900a:	edd2 6a00 	vldr	s13, [r2]
    900e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9012:	ed93 7a00 	vldr	s14, [r3]
    9016:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    901a:	ee67 7a86 	vmul.f32	s15, s15, s12
    901e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    9022:	ee37 0a40 	vsub.f32	s0, s14, s0
    9026:	4770      	bx	lr
    9028:	400d8100 	.word	0x400d8100
    902c:	20018850 	.word	0x20018850
    9030:	20018858 	.word	0x20018858
    9034:	2001885c 	.word	0x2001885c
    9038:	20018854 	.word	0x20018854

0000903c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    903c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    903e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    9040:	b11b      	cbz	r3, 904a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9042:	6853      	ldr	r3, [r2, #4]
    9044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9048:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    904a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    904c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    904e:	b33c      	cbz	r4, 90a0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    9050:	4b1a      	ldr	r3, [pc, #104]	; (90bc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    9052:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9054:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9058:	420c      	tst	r4, r1
    905a:	d11d      	bne.n	9098 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    905c:	4e18      	ldr	r6, [pc, #96]	; (90c0 <schedule_transfer+0x84>)
    905e:	6877      	ldr	r7, [r6, #4]
    9060:	e004      	b.n	906c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9062:	6874      	ldr	r4, [r6, #4]
    9064:	1be4      	subs	r4, r4, r7
    9066:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    906a:	d20b      	bcs.n	9084 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    906c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    9070:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    9074:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    9078:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    907c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    9080:	0464      	lsls	r4, r4, #17
    9082:	d5ee      	bpl.n	9062 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9084:	400d      	ands	r5, r1
    9086:	d107      	bne.n	9098 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    9088:	4c0c      	ldr	r4, [pc, #48]	; (90bc <schedule_transfer+0x80>)
		endpoint->status = 0;
    908a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    908e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9092:	430b      	orrs	r3, r1
    9094:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    9098:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    909a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    909c:	bcf0      	pop	{r4, r5, r6, r7}
    909e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    90a0:	4d06      	ldr	r5, [pc, #24]	; (90bc <schedule_transfer+0x80>)
	endpoint->status = 0;
    90a2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    90a6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    90aa:	430b      	orrs	r3, r1
    90ac:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    90b0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    90b2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    90b4:	b662      	cpsie	i
}
    90b6:	bcf0      	pop	{r4, r5, r6, r7}
    90b8:	4770      	bx	lr
    90ba:	bf00      	nop
    90bc:	402e0000 	.word	0x402e0000
    90c0:	e0001000 	.word	0xe0001000

000090c4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    90c4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    90c6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    90c8:	b19d      	cbz	r5, 90f2 <run_callbacks+0x2e>
    90ca:	4606      	mov	r6, r0
    90cc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    90ce:	2400      	movs	r4, #0
    90d0:	e003      	b.n	90da <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    90d2:	6812      	ldr	r2, [r2, #0]
		count++;
    90d4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    90d6:	2a01      	cmp	r2, #1
    90d8:	d00c      	beq.n	90f4 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    90da:	6853      	ldr	r3, [r2, #4]
    90dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    90e0:	d0f7      	beq.n	90d2 <run_callbacks+0xe>
			ep->first_transfer = t;
    90e2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    90e4:	b12c      	cbz	r4, 90f2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    90e6:	4628      	mov	r0, r5
		ep->callback_function(first);
    90e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    90ea:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    90ec:	4798      	blx	r3
	while (count) {
    90ee:	3c01      	subs	r4, #1
    90f0:	d1f9      	bne.n	90e6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    90f2:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    90f4:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    90f8:	e7f4      	b.n	90e4 <run_callbacks+0x20>
    90fa:	bf00      	nop

000090fc <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    90fc:	b430      	push	{r4, r5}
	if (len > 0) {
    90fe:	b9d9      	cbnz	r1, 9138 <endpoint0_transmit.constprop.0+0x3c>
    9100:	4c1f      	ldr	r4, [pc, #124]	; (9180 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    9102:	4b20      	ldr	r3, [pc, #128]	; (9184 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    9104:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9106:	4a20      	ldr	r2, [pc, #128]	; (9188 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    9108:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    910a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    910e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9110:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    9112:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9116:	2480      	movs	r4, #128	; 0x80
    9118:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    911a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    911e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9122:	481a      	ldr	r0, [pc, #104]	; (918c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    9124:	432b      	orrs	r3, r5
    9126:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    912a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    912c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9130:	2b00      	cmp	r3, #0
    9132:	d1fb      	bne.n	912c <endpoint0_transmit.constprop.0+0x30>
}
    9134:	bc30      	pop	{r4, r5}
    9136:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9138:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    913a:	4b15      	ldr	r3, [pc, #84]	; (9190 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    913c:	4c10      	ldr	r4, [pc, #64]	; (9180 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    913e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9140:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9144:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    9146:	4a10      	ldr	r2, [pc, #64]	; (9188 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9148:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    914a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    914e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9150:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9152:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9156:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9158:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    915a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    915e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9162:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    9164:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9166:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    9168:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    916a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    916e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9172:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9176:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    917a:	2b00      	cmp	r3, #0
    917c:	d1fb      	bne.n	9176 <endpoint0_transmit.constprop.0+0x7a>
    917e:	e7c0      	b.n	9102 <endpoint0_transmit.constprop.0+0x6>
    9180:	20000000 	.word	0x20000000
    9184:	20004ec0 	.word	0x20004ec0
    9188:	402e0000 	.word	0x402e0000
    918c:	200053d4 	.word	0x200053d4
    9190:	20004ee0 	.word	0x20004ee0

00009194 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    9194:	4908      	ldr	r1, [pc, #32]	; (91b8 <usb_stop_sof_interrupts+0x24>)
    9196:	2201      	movs	r2, #1
    9198:	780b      	ldrb	r3, [r1, #0]
    919a:	fa02 f000 	lsl.w	r0, r2, r0
    919e:	ea23 0000 	bic.w	r0, r3, r0
    91a2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    91a4:	b930      	cbnz	r0, 91b4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    91a6:	4a05      	ldr	r2, [pc, #20]	; (91bc <usb_stop_sof_interrupts+0x28>)
    91a8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    91ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    91b0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    91b4:	4770      	bx	lr
    91b6:	bf00      	nop
    91b8:	200188a6 	.word	0x200188a6
    91bc:	402e0000 	.word	0x402e0000

000091c0 <usb_isr>:
{
    91c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    91c4:	4c97      	ldr	r4, [pc, #604]	; (9424 <usb_isr+0x264>)
{
    91c6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    91c8:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    91cc:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    91ce:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    91d2:	d553      	bpl.n	927c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    91d4:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    91d8:	2a00      	cmp	r2, #0
    91da:	d04a      	beq.n	9272 <usb_isr+0xb2>
    91dc:	4e92      	ldr	r6, [pc, #584]	; (9428 <usb_isr+0x268>)
    91de:	f8df a260 	ldr.w	sl, [pc, #608]	; 9440 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    91e2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 9458 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    91e6:	f8df b274 	ldr.w	fp, [pc, #628]	; 945c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    91ea:	f8df 8274 	ldr.w	r8, [pc, #628]	; 9460 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    91ee:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    91f2:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    91f6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    91fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    91fe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9202:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9206:	049d      	lsls	r5, r3, #18
    9208:	d5f5      	bpl.n	91f6 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    920a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    920e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9212:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9216:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    921a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    921e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    9222:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    9226:	d1fa      	bne.n	921e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    9228:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    922a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    922c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    9230:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    9234:	f000 81cf 	beq.w	95d6 <usb_isr+0x416>
    9238:	f200 80db 	bhi.w	93f2 <usb_isr+0x232>
    923c:	f240 3102 	movw	r1, #770	; 0x302
    9240:	428b      	cmp	r3, r1
    9242:	f000 81e7 	beq.w	9614 <usb_isr+0x454>
    9246:	f200 809a 	bhi.w	937e <usb_isr+0x1be>
    924a:	2b82      	cmp	r3, #130	; 0x82
    924c:	f000 81cb 	beq.w	95e6 <usb_isr+0x426>
    9250:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9254:	f040 808a 	bne.w	936c <usb_isr+0x1ac>
		if (endpoint > 7) break;
    9258:	f010 0f78 	tst.w	r0, #120	; 0x78
    925c:	b283      	uxth	r3, r0
    925e:	f000 8203 	beq.w	9668 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    9262:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9266:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    926a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    926e:	2a00      	cmp	r2, #0
    9270:	d1bd      	bne.n	91ee <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    9272:	4a6c      	ldr	r2, [pc, #432]	; (9424 <usb_isr+0x264>)
    9274:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    9278:	2b00      	cmp	r3, #0
    927a:	d142      	bne.n	9302 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    927c:	067e      	lsls	r6, r7, #25
    927e:	d516      	bpl.n	92ae <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9280:	4b68      	ldr	r3, [pc, #416]	; (9424 <usb_isr+0x264>)
    9282:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    9286:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    928a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    928e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9292:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9296:	2c00      	cmp	r4, #0
    9298:	d1fb      	bne.n	9292 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    929a:	f04f 32ff 	mov.w	r2, #4294967295
    929e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    92a2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    92a6:	f000 fd29 	bl	9cfc <usb_serial_reset>
		endpointN_notify_mask = 0;
    92aa:	4b60      	ldr	r3, [pc, #384]	; (942c <usb_isr+0x26c>)
    92ac:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    92ae:	01fc      	lsls	r4, r7, #7
    92b0:	d503      	bpl.n	92ba <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    92b2:	4b5f      	ldr	r3, [pc, #380]	; (9430 <usb_isr+0x270>)
    92b4:	681b      	ldr	r3, [r3, #0]
    92b6:	b103      	cbz	r3, 92ba <usb_isr+0xfa>
    92b8:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    92ba:	01b8      	lsls	r0, r7, #6
    92bc:	d503      	bpl.n	92c6 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    92be:	4b5d      	ldr	r3, [pc, #372]	; (9434 <usb_isr+0x274>)
    92c0:	681b      	ldr	r3, [r3, #0]
    92c2:	b103      	cbz	r3, 92c6 <usb_isr+0x106>
    92c4:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    92c6:	0779      	lsls	r1, r7, #29
    92c8:	d508      	bpl.n	92dc <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    92ca:	4b56      	ldr	r3, [pc, #344]	; (9424 <usb_isr+0x264>)
    92cc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    92d0:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    92d4:	d047      	beq.n	9366 <usb_isr+0x1a6>
			usb_high_speed = 1;
    92d6:	4b58      	ldr	r3, [pc, #352]	; (9438 <usb_isr+0x278>)
    92d8:	2201      	movs	r2, #1
    92da:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    92dc:	4b51      	ldr	r3, [pc, #324]	; (9424 <usb_isr+0x264>)
    92de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    92e2:	061a      	lsls	r2, r3, #24
    92e4:	d50a      	bpl.n	92fc <usb_isr+0x13c>
    92e6:	063b      	lsls	r3, r7, #24
    92e8:	d508      	bpl.n	92fc <usb_isr+0x13c>
		if (usb_reboot_timer) {
    92ea:	4a54      	ldr	r2, [pc, #336]	; (943c <usb_isr+0x27c>)
    92ec:	7813      	ldrb	r3, [r2, #0]
    92ee:	b12b      	cbz	r3, 92fc <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    92f0:	3b01      	subs	r3, #1
    92f2:	b2db      	uxtb	r3, r3
    92f4:	7013      	strb	r3, [r2, #0]
    92f6:	2b00      	cmp	r3, #0
    92f8:	f000 8272 	beq.w	97e0 <usb_isr+0x620>
}
    92fc:	b003      	add	sp, #12
    92fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    9302:	494f      	ldr	r1, [pc, #316]	; (9440 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    9304:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    9308:	6808      	ldr	r0, [r1, #0]
    930a:	4203      	tst	r3, r0
    930c:	f040 81d1 	bne.w	96b2 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    9310:	4a46      	ldr	r2, [pc, #280]	; (942c <usb_isr+0x26c>)
    9312:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    9314:	401c      	ands	r4, r3
    9316:	d0b1      	beq.n	927c <usb_isr+0xbc>
				while (tx) {
    9318:	ea5f 4814 	movs.w	r8, r4, lsr #16
    931c:	d010      	beq.n	9340 <usb_isr+0x180>
    931e:	4e42      	ldr	r6, [pc, #264]	; (9428 <usb_isr+0x268>)
					tx &= ~(1<<p);
    9320:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    9324:	fa98 f5a8 	rbit	r5, r8
    9328:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    932c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    9330:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9334:	3040      	adds	r0, #64	; 0x40
    9336:	f7ff fec5 	bl	90c4 <run_callbacks>
				while (tx) {
    933a:	ea38 0805 	bics.w	r8, r8, r5
    933e:	d1f1      	bne.n	9324 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    9340:	b2a4      	uxth	r4, r4
				while(rx) {
    9342:	2c00      	cmp	r4, #0
    9344:	d09a      	beq.n	927c <usb_isr+0xbc>
    9346:	4e38      	ldr	r6, [pc, #224]	; (9428 <usb_isr+0x268>)
					rx &= ~(1<<p);
    9348:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    934c:	fa94 f5a4 	rbit	r5, r4
    9350:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    9354:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    9358:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    935c:	f7ff feb2 	bl	90c4 <run_callbacks>
				while(rx) {
    9360:	43ac      	bics	r4, r5
    9362:	d1f3      	bne.n	934c <usb_isr+0x18c>
    9364:	e78a      	b.n	927c <usb_isr+0xbc>
			usb_high_speed = 0;
    9366:	4a34      	ldr	r2, [pc, #208]	; (9438 <usb_isr+0x278>)
    9368:	7013      	strb	r3, [r2, #0]
    936a:	e7b7      	b.n	92dc <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    936c:	2b80      	cmp	r3, #128	; 0x80
    936e:	f47f af78 	bne.w	9262 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    9372:	4834      	ldr	r0, [pc, #208]	; (9444 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    9374:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    9376:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    9378:	f7ff fec0 	bl	90fc <endpoint0_transmit.constprop.0>
		return;
    937c:	e775      	b.n	926a <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    937e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    9382:	f000 810b 	beq.w	959c <usb_isr+0x3dc>
    9386:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    938a:	2b01      	cmp	r3, #1
    938c:	f63f af69 	bhi.w	9262 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9390:	4b2d      	ldr	r3, [pc, #180]	; (9448 <usb_isr+0x288>)
    9392:	685d      	ldr	r5, [r3, #4]
    9394:	2d00      	cmp	r5, #0
    9396:	f43f af64 	beq.w	9262 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    939a:	fa1f fc8c 	uxth.w	ip, ip
    939e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    93a2:	e004      	b.n	93ae <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    93a4:	691d      	ldr	r5, [r3, #16]
    93a6:	330c      	adds	r3, #12
    93a8:	2d00      	cmp	r5, #0
    93aa:	f43f af5a 	beq.w	9262 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    93ae:	881a      	ldrh	r2, [r3, #0]
    93b0:	4572      	cmp	r2, lr
    93b2:	d1f7      	bne.n	93a4 <usb_isr+0x1e4>
    93b4:	885a      	ldrh	r2, [r3, #2]
    93b6:	4562      	cmp	r2, ip
    93b8:	d1f4      	bne.n	93a4 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    93ba:	ea4f 221e 	mov.w	r2, lr, lsr #8
    93be:	2a03      	cmp	r2, #3
    93c0:	f000 81a5 	beq.w	970e <usb_isr+0x54e>
					datalen = list->length;
    93c4:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    93c6:	0c00      	lsrs	r0, r0, #16
    93c8:	4282      	cmp	r2, r0
    93ca:	bf28      	it	cs
    93cc:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    93ce:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    93d2:	f040 81a1 	bne.w	9718 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    93d6:	4b18      	ldr	r3, [pc, #96]	; (9438 <usb_isr+0x278>)
    93d8:	491c      	ldr	r1, [pc, #112]	; (944c <usb_isr+0x28c>)
    93da:	7818      	ldrb	r0, [r3, #0]
    93dc:	4b1c      	ldr	r3, [pc, #112]	; (9450 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    93de:	9201      	str	r2, [sp, #4]
    93e0:	2800      	cmp	r0, #0
    93e2:	bf18      	it	ne
    93e4:	4619      	movne	r1, r3
    93e6:	481b      	ldr	r0, [pc, #108]	; (9454 <usb_isr+0x294>)
    93e8:	f7ff fc3c 	bl	8c64 <memcpy>
    93ec:	4d19      	ldr	r5, [pc, #100]	; (9454 <usb_isr+0x294>)
    93ee:	9a01      	ldr	r2, [sp, #4]
    93f0:	e1e1      	b.n	97b6 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    93f2:	f242 2121 	movw	r1, #8737	; 0x2221
    93f6:	428b      	cmp	r3, r1
    93f8:	d07c      	beq.n	94f4 <usb_isr+0x334>
    93fa:	d933      	bls.n	9464 <usb_isr+0x2a4>
    93fc:	f242 3121 	movw	r1, #8993	; 0x2321
    9400:	428b      	cmp	r3, r1
    9402:	f000 8081 	beq.w	9508 <usb_isr+0x348>
    9406:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    940a:	428b      	cmp	r3, r1
    940c:	f47f af29 	bne.w	9262 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    9410:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    9414:	b283      	uxth	r3, r0
    9416:	f47f af24 	bne.w	9262 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    941a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    941e:	f363 0c0f 	bfi	ip, r3, #0, #16
    9422:	e7b5      	b.n	9390 <usb_isr+0x1d0>
    9424:	402e0000 	.word	0x402e0000
    9428:	20000000 	.word	0x20000000
    942c:	200053d8 	.word	0x200053d8
    9430:	2001887c 	.word	0x2001887c
    9434:	20018880 	.word	0x20018880
    9438:	200188ac 	.word	0x200188ac
    943c:	200188ad 	.word	0x200188ad
    9440:	200053d4 	.word	0x200053d4
    9444:	20018818 	.word	0x20018818
    9448:	200011ac 	.word	0x200011ac
    944c:	60001e84 	.word	0x60001e84
    9450:	60001ee8 	.word	0x60001ee8
    9454:	20200000 	.word	0x20200000
    9458:	200053cc 	.word	0x200053cc
    945c:	b8c6cf5d 	.word	0xb8c6cf5d
    9460:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    9464:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9468:	d066      	beq.n	9538 <usb_isr+0x378>
    946a:	f242 0121 	movw	r1, #8225	; 0x2021
    946e:	428b      	cmp	r3, r1
    9470:	f47f aef7 	bne.w	9262 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    9474:	0c03      	lsrs	r3, r0, #16
    9476:	2b07      	cmp	r3, #7
    9478:	f47f aef3 	bne.w	9262 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    947c:	4bb2      	ldr	r3, [pc, #712]	; (9748 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    947e:	49b3      	ldr	r1, [pc, #716]	; (974c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    9480:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9482:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    9484:	49b2      	ldr	r1, [pc, #712]	; (9750 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9486:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9488:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    948c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    9490:	2201      	movs	r2, #1
    9492:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9494:	4aaf      	ldr	r2, [pc, #700]	; (9754 <usb_isr+0x594>)
    9496:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9498:	4aaf      	ldr	r2, [pc, #700]	; (9758 <usb_isr+0x598>)
    949a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    949c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    94a0:	f041 0101 	orr.w	r1, r1, #1
    94a4:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    94a8:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    94ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    94b0:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    94b2:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    94b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    94b8:	2b00      	cmp	r3, #0
    94ba:	d1fb      	bne.n	94b4 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    94bc:	4aa7      	ldr	r2, [pc, #668]	; (975c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    94be:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    94c0:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    94c2:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    94c4:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    94c6:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    94c8:	f248 0380 	movw	r3, #32896	; 0x8080
    94cc:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    94ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    94d2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    94d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    94da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    94de:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    94e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    94e6:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    94ea:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    94ee:	2b00      	cmp	r3, #0
    94f0:	d1fb      	bne.n	94ea <usb_isr+0x32a>
    94f2:	e6ba      	b.n	926a <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    94f4:	b280      	uxth	r0, r0
    94f6:	b938      	cbnz	r0, 9508 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    94f8:	4b99      	ldr	r3, [pc, #612]	; (9760 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    94fa:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    94fe:	6819      	ldr	r1, [r3, #0]
    9500:	4b98      	ldr	r3, [pc, #608]	; (9764 <usb_isr+0x5a4>)
    9502:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9504:	4b98      	ldr	r3, [pc, #608]	; (9768 <usb_isr+0x5a8>)
    9506:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    9508:	4b94      	ldr	r3, [pc, #592]	; (975c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    950a:	2200      	movs	r2, #0
    950c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    950e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9510:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9512:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9514:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9516:	2280      	movs	r2, #128	; 0x80
    9518:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    951a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    951e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9522:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    952a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    952e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9532:	2b00      	cmp	r3, #0
    9534:	d1fb      	bne.n	952e <usb_isr+0x36e>
    9536:	e698      	b.n	926a <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    9538:	f3c2 4207 	ubfx	r2, r2, #16, #8
    953c:	4b8b      	ldr	r3, [pc, #556]	; (976c <usb_isr+0x5ac>)
    953e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9540:	4b8b      	ldr	r3, [pc, #556]	; (9770 <usb_isr+0x5b0>)
    9542:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9546:	4b8b      	ldr	r3, [pc, #556]	; (9774 <usb_isr+0x5b4>)
    9548:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    954c:	4b8a      	ldr	r3, [pc, #552]	; (9778 <usb_isr+0x5b8>)
    954e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    9552:	f000 fbd5 	bl	9d00 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    9556:	2280      	movs	r2, #128	; 0x80
    9558:	4629      	mov	r1, r5
    955a:	4888      	ldr	r0, [pc, #544]	; (977c <usb_isr+0x5bc>)
    955c:	f002 f92a 	bl	b7b4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    9560:	4b87      	ldr	r3, [pc, #540]	; (9780 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9562:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    9564:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    9568:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    956c:	4b7b      	ldr	r3, [pc, #492]	; (975c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    956e:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9570:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    9572:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9574:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    9576:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9578:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    957a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    957e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9582:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    958a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    958e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    9592:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9596:	2b00      	cmp	r3, #0
    9598:	d1fb      	bne.n	9592 <usb_isr+0x3d2>
    959a:	e666      	b.n	926a <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    959c:	4b6f      	ldr	r3, [pc, #444]	; (975c <usb_isr+0x59c>)
    959e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    95a0:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    95a2:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    95a4:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    95a6:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    95a8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    95aa:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    95ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    95b0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    95b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    95b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    95bc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    95c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    95c4:	2b00      	cmp	r3, #0
    95c6:	d1fb      	bne.n	95c0 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    95c8:	0c13      	lsrs	r3, r2, #16
    95ca:	065b      	lsls	r3, r3, #25
    95cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    95d0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    95d4:	e649      	b.n	926a <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    95d6:	4b65      	ldr	r3, [pc, #404]	; (976c <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    95d8:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    95da:	486a      	ldr	r0, [pc, #424]	; (9784 <usb_isr+0x5c4>)
    95dc:	781b      	ldrb	r3, [r3, #0]
    95de:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    95e0:	f7ff fd8c 	bl	90fc <endpoint0_transmit.constprop.0>
		return;
    95e4:	e641      	b.n	926a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    95e6:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    95e8:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    95ec:	f47f ae39 	bne.w	9262 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    95f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    95f4:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    95f8:	4a62      	ldr	r2, [pc, #392]	; (9784 <usb_isr+0x5c4>)
    95fa:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    95fc:	0618      	lsls	r0, r3, #24
    95fe:	f100 809e 	bmi.w	973e <usb_isr+0x57e>
    9602:	07cb      	lsls	r3, r1, #31
    9604:	d501      	bpl.n	960a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    9606:	2301      	movs	r3, #1
    9608:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    960a:	2102      	movs	r1, #2
    960c:	485d      	ldr	r0, [pc, #372]	; (9784 <usb_isr+0x5c4>)
    960e:	f7ff fd75 	bl	90fc <endpoint0_transmit.constprop.0>
		return;
    9612:	e62a      	b.n	926a <usb_isr+0xaa>
		if (endpoint > 7) break;
    9614:	f010 0f78 	tst.w	r0, #120	; 0x78
    9618:	b283      	uxth	r3, r0
    961a:	f47f ae22 	bne.w	9262 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    961e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    9622:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9626:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    962a:	bf14      	ite	ne
    962c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9630:	f043 0301 	orreq.w	r3, r3, #1
    9634:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9638:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    963a:	4b48      	ldr	r3, [pc, #288]	; (975c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    963c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    963e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9640:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9642:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9644:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9646:	2280      	movs	r2, #128	; 0x80
    9648:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    964a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    964e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9652:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    965a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    965e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9662:	2b00      	cmp	r3, #0
    9664:	d1fb      	bne.n	965e <usb_isr+0x49e>
    9666:	e600      	b.n	926a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    966c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9670:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    9674:	bf14      	ite	ne
    9676:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    967a:	f023 0301 	biceq.w	r3, r3, #1
    967e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9682:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9684:	4b35      	ldr	r3, [pc, #212]	; (975c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9686:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9688:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    968a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    968c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    968e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9690:	2280      	movs	r2, #128	; 0x80
    9692:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9694:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9698:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    969c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    96a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    96a4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    96a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    96ac:	2b00      	cmp	r3, #0
    96ae:	d1fb      	bne.n	96a8 <usb_isr+0x4e8>
    96b0:	e5db      	b.n	926a <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    96b2:	2000      	movs	r0, #0
    96b4:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    96b6:	4926      	ldr	r1, [pc, #152]	; (9750 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    96b8:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    96ba:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    96bc:	f242 0121 	movw	r1, #8225	; 0x2021
    96c0:	428c      	cmp	r4, r1
    96c2:	f47f ae25 	bne.w	9310 <usb_isr+0x150>
    96c6:	b280      	uxth	r0, r0
    96c8:	2800      	cmp	r0, #0
    96ca:	f47f ae21 	bne.w	9310 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    96ce:	492e      	ldr	r1, [pc, #184]	; (9788 <usb_isr+0x5c8>)
    96d0:	4c2e      	ldr	r4, [pc, #184]	; (978c <usb_isr+0x5cc>)
    96d2:	c903      	ldmia	r1, {r0, r1}
    96d4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    96d6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    96d8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    96dc:	6020      	str	r0, [r4, #0]
    96de:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    96e0:	f47f ae16 	bne.w	9310 <usb_isr+0x150>
	__disable_irq();
    96e4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    96e6:	482a      	ldr	r0, [pc, #168]	; (9790 <usb_isr+0x5d0>)
    96e8:	7801      	ldrb	r1, [r0, #0]
    96ea:	f041 0108 	orr.w	r1, r1, #8
    96ee:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    96f0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    96f4:	060d      	lsls	r5, r1, #24
    96f6:	d405      	bmi.n	9704 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    96f8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    96fa:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    96fc:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9700:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    9704:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9706:	4a23      	ldr	r2, [pc, #140]	; (9794 <usb_isr+0x5d4>)
    9708:	2150      	movs	r1, #80	; 0x50
    970a:	7011      	strb	r1, [r2, #0]
    970c:	e600      	b.n	9310 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    970e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    9710:	782a      	ldrb	r2, [r5, #0]
    9712:	4282      	cmp	r2, r0
    9714:	bf28      	it	cs
    9716:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    9718:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    971c:	d144      	bne.n	97a8 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    971e:	4b1e      	ldr	r3, [pc, #120]	; (9798 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9720:	4d1e      	ldr	r5, [pc, #120]	; (979c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    9722:	7818      	ldrb	r0, [r3, #0]
    9724:	491e      	ldr	r1, [pc, #120]	; (97a0 <usb_isr+0x5e0>)
    9726:	4b1f      	ldr	r3, [pc, #124]	; (97a4 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9728:	9201      	str	r2, [sp, #4]
    972a:	2800      	cmp	r0, #0
    972c:	bf18      	it	ne
    972e:	4619      	movne	r1, r3
    9730:	4628      	mov	r0, r5
    9732:	f7ff fa97 	bl	8c64 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9736:	2307      	movs	r3, #7
    9738:	706b      	strb	r3, [r5, #1]
    973a:	9a01      	ldr	r2, [sp, #4]
    973c:	e03b      	b.n	97b6 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    973e:	03c9      	lsls	r1, r1, #15
    9740:	f53f af61 	bmi.w	9606 <usb_isr+0x446>
    9744:	e761      	b.n	960a <usb_isr+0x44a>
    9746:	bf00      	nop
    9748:	20004ee0 	.word	0x20004ee0
    974c:	200063cc 	.word	0x200063cc
    9750:	20005080 	.word	0x20005080
    9754:	00070080 	.word	0x00070080
    9758:	200073cc 	.word	0x200073cc
    975c:	20004ec0 	.word	0x20004ec0
    9760:	20018868 	.word	0x20018868
    9764:	20018878 	.word	0x20018878
    9768:	200188aa 	.word	0x200188aa
    976c:	200188ab 	.word	0x200188ab
    9770:	00cc0002 	.word	0x00cc0002
    9774:	000200c8 	.word	0x000200c8
    9778:	00c80002 	.word	0x00c80002
    977c:	20000080 	.word	0x20000080
    9780:	74d59319 	.word	0x74d59319
    9784:	20018818 	.word	0x20018818
    9788:	200053cc 	.word	0x200053cc
    978c:	20018870 	.word	0x20018870
    9790:	200188a6 	.word	0x200188a6
    9794:	200188ad 	.word	0x200188ad
    9798:	200188ac 	.word	0x200188ac
    979c:	20200000 	.word	0x20200000
    97a0:	60001ee8 	.word	0x60001ee8
    97a4:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    97a8:	4629      	mov	r1, r5
    97aa:	4d10      	ldr	r5, [pc, #64]	; (97ec <usb_isr+0x62c>)
    97ac:	9201      	str	r2, [sp, #4]
    97ae:	4628      	mov	r0, r5
    97b0:	f7ff fa58 	bl	8c64 <memcpy>
    97b4:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    97b6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    97ba:	4415      	add	r5, r2
	asm("dsb");
    97bc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    97c0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    97c4:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    97c8:	3320      	adds	r3, #32
	} while (location < end_addr);
    97ca:	429d      	cmp	r5, r3
    97cc:	d8fa      	bhi.n	97c4 <usb_isr+0x604>
	asm("dsb");
    97ce:	f3bf 8f4f 	dsb	sy
	asm("isb");
    97d2:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    97d6:	4805      	ldr	r0, [pc, #20]	; (97ec <usb_isr+0x62c>)
    97d8:	4611      	mov	r1, r2
    97da:	f7ff fc8f 	bl	90fc <endpoint0_transmit.constprop.0>
				return;
    97de:	e544      	b.n	926a <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    97e0:	2003      	movs	r0, #3
    97e2:	f7ff fcd7 	bl	9194 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    97e6:	f007 fceb 	bl	111c0 <___reboot_Teensyduino__veneer>
    97ea:	bf00      	nop
    97ec:	20200000 	.word	0x20200000

000097f0 <usb_config_rx>:
{
    97f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97f4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    97f6:	1e83      	subs	r3, r0, #2
    97f8:	2b02      	cmp	r3, #2
    97fa:	d901      	bls.n	9800 <usb_config_rx+0x10>
}
    97fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9800:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9850 <usb_config_rx+0x60>
    9804:	4615      	mov	r5, r2
    9806:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9808:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    980a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    980e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9810:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9814:	2100      	movs	r1, #0
    9816:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    981a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    981c:	f001 ffca 	bl	b7b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9820:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    9824:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9826:	0952      	lsrs	r2, r2, #5
    9828:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    982c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9830:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9834:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9838:	2f00      	cmp	r7, #0
    983a:	d0df      	beq.n	97fc <usb_config_rx+0xc>
    983c:	4a03      	ldr	r2, [pc, #12]	; (984c <usb_config_rx+0x5c>)
    983e:	40b3      	lsls	r3, r6
    9840:	6811      	ldr	r1, [r2, #0]
    9842:	430b      	orrs	r3, r1
    9844:	6013      	str	r3, [r2, #0]
}
    9846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    984a:	bf00      	nop
    984c:	200053d8 	.word	0x200053d8
    9850:	20000000 	.word	0x20000000

00009854 <usb_config_tx>:
{
    9854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9858:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    985a:	1e81      	subs	r1, r0, #2
    985c:	2902      	cmp	r1, #2
    985e:	d901      	bls.n	9864 <usb_config_tx+0x10>
}
    9860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9864:	01c7      	lsls	r7, r0, #7
    9866:	f8df 904c 	ldr.w	r9, [pc, #76]	; 98b4 <usb_config_tx+0x60>
    986a:	4692      	mov	sl, r2
    986c:	4604      	mov	r4, r0
    986e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9870:	223c      	movs	r2, #60	; 0x3c
    9872:	2100      	movs	r1, #0
    9874:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9876:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    987a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    987c:	f108 0004 	add.w	r0, r8, #4
    9880:	f001 ff98 	bl	b7b4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9884:	faba f28a 	clz	r2, sl
    9888:	0952      	lsrs	r2, r2, #5
    988a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    988e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9892:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9894:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9898:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    989c:	2e00      	cmp	r6, #0
    989e:	d0df      	beq.n	9860 <usb_config_tx+0xc>
    98a0:	4b03      	ldr	r3, [pc, #12]	; (98b0 <usb_config_tx+0x5c>)
    98a2:	3410      	adds	r4, #16
    98a4:	6819      	ldr	r1, [r3, #0]
    98a6:	40a2      	lsls	r2, r4
    98a8:	430a      	orrs	r2, r1
    98aa:	601a      	str	r2, [r3, #0]
}
    98ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98b0:	200053d8 	.word	0x200053d8
    98b4:	20000000 	.word	0x20000000

000098b8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    98b8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    98ba:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    98bc:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    98be:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    98c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    98c6:	b410      	push	{r4}
	transfer->next = 1;
    98c8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    98ca:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    98cc:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    98d0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    98d2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    98d6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    98da:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    98dc:	6181      	str	r1, [r0, #24]
}
    98de:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    98e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    98e6:	4770      	bx	lr

000098e8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    98e8:	1e83      	subs	r3, r0, #2
{
    98ea:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    98ec:	2b02      	cmp	r3, #2
    98ee:	d900      	bls.n	98f2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    98f0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    98f2:	4b06      	ldr	r3, [pc, #24]	; (990c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    98f4:	f100 0110 	add.w	r1, r0, #16
    98f8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    98fc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9900:	fa0c f101 	lsl.w	r1, ip, r1
    9904:	3040      	adds	r0, #64	; 0x40
    9906:	f7ff bb99 	b.w	903c <schedule_transfer>
    990a:	bf00      	nop
    990c:	20000000 	.word	0x20000000

00009910 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9910:	1e83      	subs	r3, r0, #2
{
    9912:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9914:	2b02      	cmp	r3, #2
    9916:	d900      	bls.n	991a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    9918:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    991a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    991c:	4b02      	ldr	r3, [pc, #8]	; (9928 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    991e:	4081      	lsls	r1, r0
    9920:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9924:	f7ff bb8a 	b.w	903c <schedule_transfer>
    9928:	20000000 	.word	0x20000000

0000992c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    992c:	6840      	ldr	r0, [r0, #4]
#endif
}
    992e:	4770      	bx	lr

00009930 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9930:	4a12      	ldr	r2, [pc, #72]	; (997c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9932:	4b13      	ldr	r3, [pc, #76]	; (9980 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9934:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9938:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    993c:	4298      	cmp	r0, r3
{
    993e:	b510      	push	{r4, lr}
    9940:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9942:	d202      	bcs.n	994a <usb_init_serialnumber+0x1a>
    9944:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9948:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    994a:	4c0e      	ldr	r4, [pc, #56]	; (9984 <usb_init_serialnumber+0x54>)
    994c:	a901      	add	r1, sp, #4
    994e:	220a      	movs	r2, #10
    9950:	f7ff fa22 	bl	8d98 <ultoa>
	for (i=0; i<10; i++) {
    9954:	a901      	add	r1, sp, #4
    9956:	2300      	movs	r3, #0
    9958:	4620      	mov	r0, r4
		char c = buf[i];
    995a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    995e:	3301      	adds	r3, #1
		if (!c) break;
    9960:	b13a      	cbz	r2, 9972 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    9962:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    9964:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    9968:	d1f7      	bne.n	995a <usb_init_serialnumber+0x2a>
    996a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    996c:	7023      	strb	r3, [r4, #0]
}
    996e:	b004      	add	sp, #16
    9970:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9972:	005b      	lsls	r3, r3, #1
    9974:	b2db      	uxtb	r3, r3
    9976:	7023      	strb	r3, [r4, #0]
}
    9978:	b004      	add	sp, #16
    997a:	bd10      	pop	{r4, pc}
    997c:	401f4400 	.word	0x401f4400
    9980:	00989680 	.word	0x00989680
    9984:	20004978 	.word	0x20004978

00009988 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9988:	f000 bace 	b.w	9f28 <usb_serial_flush_input>

0000998c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    998c:	f000 bac0 	b.w	9f10 <usb_serial_available>

00009990 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9990:	f000 bb5c 	b.w	a04c <usb_serial_flush_output>

00009994 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9994:	f000 bb32 	b.w	9ffc <usb_serial_write_buffer_free>

00009998 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9998:	4608      	mov	r0, r1
    999a:	4611      	mov	r1, r2
    999c:	f000 bb22 	b.w	9fe4 <usb_serial_write>

000099a0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    99a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    99a2:	4c14      	ldr	r4, [pc, #80]	; (99f4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99a4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    99a8:	4e13      	ldr	r6, [pc, #76]	; (99f8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    99ae:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    99b2:	4f12      	ldr	r7, [pc, #72]	; (99fc <rx_queue_transfer+0x5c>)
    99b4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    99b8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    99ba:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    99be:	4621      	mov	r1, r4
    99c0:	883a      	ldrh	r2, [r7, #0]
    99c2:	4630      	mov	r0, r6
    99c4:	f7ff ff78 	bl	98b8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    99c8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    99ca:	4423      	add	r3, r4
	asm("dsb");
    99cc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    99d0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    99d4:	3420      	adds	r4, #32
	} while (location < end_addr);
    99d6:	42a3      	cmp	r3, r4
    99d8:	d8fa      	bhi.n	99d0 <rx_queue_transfer+0x30>
	asm("dsb");
    99da:	f3bf 8f4f 	dsb	sy
	asm("isb");
    99de:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    99e2:	2003      	movs	r0, #3
    99e4:	4631      	mov	r1, r6
    99e6:	f7ff ff93 	bl	9910 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    99ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    99ee:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    99f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99f4:	20200080 	.word	0x20200080
    99f8:	20004f00 	.word	0x20004f00
    99fc:	2001888a 	.word	0x2001888a

00009a00 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a00:	4b24      	ldr	r3, [pc, #144]	; (9a94 <rx_event+0x94>)
{
    9a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a06:	881c      	ldrh	r4, [r3, #0]
    9a08:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9a0a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9a0c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9a10:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9a12:	2c00      	cmp	r4, #0
    9a14:	dd24      	ble.n	9a60 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9a16:	4920      	ldr	r1, [pc, #128]	; (9a98 <rx_event+0x98>)
		if (head != rx_tail) {
    9a18:	4820      	ldr	r0, [pc, #128]	; (9a9c <rx_event+0x9c>)
		uint32_t head = rx_head;
    9a1a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9a1c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9a1e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9a20:	4e1f      	ldr	r6, [pc, #124]	; (9aa0 <rx_event+0xa0>)
		if (head != rx_tail) {
    9a22:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9a24:	481f      	ldr	r0, [pc, #124]	; (9aa4 <rx_event+0xa4>)
		if (head != rx_tail) {
    9a26:	d007      	beq.n	9a38 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9a28:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9a2c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9a30:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9a34:	4294      	cmp	r4, r2
    9a36:	d918      	bls.n	9a6a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9a38:	3301      	adds	r3, #1
		rx_index[i] = 0;
    9a3a:	2200      	movs	r2, #0
		rx_count[i] = len;
    9a3c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9a40:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    9a42:	4e19      	ldr	r6, [pc, #100]	; (9aa8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9a44:	bf88      	it	hi
    9a46:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    9a48:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9a4c:	bf98      	it	ls
    9a4e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    9a50:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    9a52:	4b16      	ldr	r3, [pc, #88]	; (9aac <rx_event+0xac>)
		rx_head = head;
    9a54:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9a56:	681a      	ldr	r2, [r3, #0]
    9a58:	4414      	add	r4, r2
    9a5a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9a60:	4628      	mov	r0, r5
}
    9a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9a66:	f7ff bf9b 	b.w	99a0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9a6a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9a6e:	4910      	ldr	r1, [pc, #64]	; (9ab0 <rx_event+0xb0>)
    9a70:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9a72:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9a74:	4408      	add	r0, r1
    9a76:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    9a7a:	f7ff f8f3 	bl	8c64 <memcpy>
				rx_available += len;
    9a7e:	4a0b      	ldr	r2, [pc, #44]	; (9aac <rx_event+0xac>)
				rx_queue_transfer(i);
    9a80:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9a82:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9a86:	6813      	ldr	r3, [r2, #0]
    9a88:	4423      	add	r3, r4
}
    9a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9a8e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9a90:	f7ff bf86 	b.w	99a0 <rx_queue_transfer>
    9a94:	2001888a 	.word	0x2001888a
    9a98:	200188a4 	.word	0x200188a4
    9a9c:	200188a5 	.word	0x200188a5
    9aa0:	20018824 	.word	0x20018824
    9aa4:	20018844 	.word	0x20018844
    9aa8:	20018834 	.word	0x20018834
    9aac:	20018820 	.word	0x20018820
    9ab0:	20200080 	.word	0x20200080

00009ab4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9ab4:	4b1d      	ldr	r3, [pc, #116]	; (9b2c <usb_serial_flush_callback+0x78>)
    9ab6:	781a      	ldrb	r2, [r3, #0]
    9ab8:	2a00      	cmp	r2, #0
    9aba:	d136      	bne.n	9b2a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9abc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9ac0:	4a1b      	ldr	r2, [pc, #108]	; (9b30 <usb_serial_flush_callback+0x7c>)
    9ac2:	7812      	ldrb	r2, [r2, #0]
    9ac4:	b38a      	cbz	r2, 9b2a <usb_serial_flush_callback+0x76>
{
    9ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9aca:	4d1a      	ldr	r5, [pc, #104]	; (9b34 <usb_serial_flush_callback+0x80>)
    9acc:	882a      	ldrh	r2, [r5, #0]
    9ace:	b352      	cbz	r2, 9b26 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9ad0:	4e19      	ldr	r6, [pc, #100]	; (9b38 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9ad2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9ad6:	4f19      	ldr	r7, [pc, #100]	; (9b3c <usb_serial_flush_callback+0x88>)
    9ad8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ada:	4c19      	ldr	r4, [pc, #100]	; (9b40 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9adc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9ae0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9ae4:	4642      	mov	r2, r8
    9ae6:	4638      	mov	r0, r7
    9ae8:	4621      	mov	r1, r4
    9aea:	f7ff fee5 	bl	98b8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9aee:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9af2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9af6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9afa:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9afe:	3420      	adds	r4, #32
	} while (location < end_addr);
    9b00:	42a2      	cmp	r2, r4
    9b02:	d8fa      	bhi.n	9afa <usb_serial_flush_callback+0x46>
	asm("dsb");
    9b04:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9b08:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9b0c:	2004      	movs	r0, #4
    9b0e:	4639      	mov	r1, r7
    9b10:	f7ff feea 	bl	98e8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9b14:	7833      	ldrb	r3, [r6, #0]
    9b16:	3301      	adds	r3, #1
    9b18:	b2db      	uxtb	r3, r3
    9b1a:	2b03      	cmp	r3, #3
    9b1c:	bf88      	it	hi
    9b1e:	2300      	movhi	r3, #0
    9b20:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9b22:	2300      	movs	r3, #0
    9b24:	802b      	strh	r3, [r5, #0]
}
    9b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b2a:	4770      	bx	lr
    9b2c:	200188a9 	.word	0x200188a9
    9b30:	200188ab 	.word	0x200188ab
    9b34:	2001888c 	.word	0x2001888c
    9b38:	200188a8 	.word	0x200188a8
    9b3c:	20005000 	.word	0x20005000
    9b40:	20201080 	.word	0x20201080

00009b44 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b48:	b085      	sub	sp, #20
	while (size > 0) {
    9b4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9b4e:	2900      	cmp	r1, #0
    9b50:	f000 80bf 	beq.w	9cd2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9b54:	2300      	movs	r3, #0
    9b56:	4c60      	ldr	r4, [pc, #384]	; (9cd8 <usb_serial_write.part.0+0x194>)
    9b58:	f8df 8198 	ldr.w	r8, [pc, #408]	; 9cf4 <usb_serial_write.part.0+0x1b0>
    9b5c:	f8df a198 	ldr.w	sl, [pc, #408]	; 9cf8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9b60:	4f5e      	ldr	r7, [pc, #376]	; (9cdc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9b62:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9b64:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9b66:	4a5e      	ldr	r2, [pc, #376]	; (9ce0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9b68:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9b6a:	4b5e      	ldr	r3, [pc, #376]	; (9ce4 <usb_serial_write.part.0+0x1a0>)
    9b6c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    9b6e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9b72:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9b76:	2b00      	cmp	r3, #0
    9b78:	f040 80a7 	bne.w	9cca <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    9b7c:	461e      	mov	r6, r3
		int waiting=0;
    9b7e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9b80:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9b82:	4648      	mov	r0, r9
    9b84:	f7ff fed2 	bl	992c <usb_transfer_status>
			if (!(status & 0x80)) {
    9b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    9b8c:	f000 808c 	beq.w	9ca8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9b90:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9b94:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9b98:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    9b9c:	b905      	cbnz	r5, 9ba0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    9b9e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d17d      	bne.n	9ca0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9ba4:	683b      	ldr	r3, [r7, #0]
    9ba6:	1b9b      	subs	r3, r3, r6
    9ba8:	2b78      	cmp	r3, #120	; 0x78
    9baa:	f200 8087 	bhi.w	9cbc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    9bae:	4b4e      	ldr	r3, [pc, #312]	; (9ce8 <usb_serial_write.part.0+0x1a4>)
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d074      	beq.n	9ca0 <usb_serial_write.part.0+0x15c>
			yield();
    9bb6:	f000 fa93 	bl	a0e0 <yield>
			tx_noautoflush = 1;
    9bba:	2201      	movs	r2, #1
		while (!tx_available) {
    9bbc:	f8b8 3000 	ldrh.w	r3, [r8]
    9bc0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9bc2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9bc4:	2b00      	cmp	r3, #0
    9bc6:	d0dc      	beq.n	9b82 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9bc8:	4a46      	ldr	r2, [pc, #280]	; (9ce4 <usb_serial_write.part.0+0x1a0>)
    9bca:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9bce:	7811      	ldrb	r1, [r2, #0]
    9bd0:	461a      	mov	r2, r3
    9bd2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9bd6:	4d45      	ldr	r5, [pc, #276]	; (9cec <usb_serial_write.part.0+0x1a8>)
    9bd8:	02c9      	lsls	r1, r1, #11
    9bda:	4428      	add	r0, r5
		if (size >= tx_available) {
    9bdc:	9d01      	ldr	r5, [sp, #4]
    9bde:	4295      	cmp	r5, r2
    9be0:	d217      	bcs.n	9c12 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9be2:	9303      	str	r3, [sp, #12]
    9be4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9be8:	462a      	mov	r2, r5
    9bea:	f7ff f83b 	bl	8c64 <memcpy>
			tx_available -= size;
    9bee:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9bf0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9bf4:	1b5b      	subs	r3, r3, r5
    9bf6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9bfa:	4b3d      	ldr	r3, [pc, #244]	; (9cf0 <usb_serial_write.part.0+0x1ac>)
    9bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9c00:	f3bf 8f4f 	dsb	sy
			sent += size;
    9c04:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9c06:	2300      	movs	r3, #0
			sent += size;
    9c08:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9c0a:	7023      	strb	r3, [r4, #0]
}
    9c0c:	b005      	add	sp, #20
    9c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c12:	4b36      	ldr	r3, [pc, #216]	; (9cec <usb_serial_write.part.0+0x1a8>)
    9c14:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9c16:	9902      	ldr	r1, [sp, #8]
    9c18:	f7ff f824 	bl	8c64 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9c1c:	2300      	movs	r3, #0
    9c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9c22:	4629      	mov	r1, r5
    9c24:	4648      	mov	r0, r9
    9c26:	f7ff fe47 	bl	98b8 <usb_prepare_transfer>
	asm("dsb");
    9c2a:	f3bf 8f4f 	dsb	sy
    9c2e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9c32:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9c36:	4293      	cmp	r3, r2
    9c38:	bf34      	ite	cc
    9c3a:	2301      	movcc	r3, #1
    9c3c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9c3e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9c42:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9c46:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9c4a:	3520      	adds	r5, #32
	} while (location < end_addr);
    9c4c:	42ab      	cmp	r3, r5
    9c4e:	d1fa      	bne.n	9c46 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9c50:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c54:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9c58:	2004      	movs	r0, #4
    9c5a:	4649      	mov	r1, r9
    9c5c:	f7ff fe44 	bl	98e8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9c60:	4a20      	ldr	r2, [pc, #128]	; (9ce4 <usb_serial_write.part.0+0x1a0>)
    9c62:	7813      	ldrb	r3, [r2, #0]
    9c64:	3301      	adds	r3, #1
    9c66:	b2db      	uxtb	r3, r3
    9c68:	2b03      	cmp	r3, #3
    9c6a:	bf84      	itt	hi
    9c6c:	2300      	movhi	r3, #0
    9c6e:	4a1d      	ldrhi	r2, [pc, #116]	; (9ce4 <usb_serial_write.part.0+0x1a0>)
    9c70:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9c72:	f8b8 3000 	ldrh.w	r3, [r8]
    9c76:	9a01      	ldr	r2, [sp, #4]
    9c78:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9c7a:	9a00      	ldr	r2, [sp, #0]
    9c7c:	441a      	add	r2, r3
			size -= tx_available;
    9c7e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9c80:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9c82:	9a02      	ldr	r2, [sp, #8]
    9c84:	441a      	add	r2, r3
			tx_available = 0;
    9c86:	2300      	movs	r3, #0
			data += tx_available;
    9c88:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9c8a:	4a19      	ldr	r2, [pc, #100]	; (9cf0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9c8c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9c90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9c94:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9c98:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    9c9a:	2900      	cmp	r1, #0
    9c9c:	f47f af62 	bne.w	9b64 <usb_serial_write.part.0+0x20>
	return sent;
    9ca0:	9800      	ldr	r0, [sp, #0]
}
    9ca2:	b005      	add	sp, #20
    9ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9cac:	4b0d      	ldr	r3, [pc, #52]	; (9ce4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    9cae:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9cb2:	7819      	ldrb	r1, [r3, #0]
				break;
    9cb4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9cb6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    9cba:	e78a      	b.n	9bd2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    9cbc:	2301      	movs	r3, #1
				return sent;
    9cbe:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    9cc0:	f88a 3000 	strb.w	r3, [sl]
}
    9cc4:	b005      	add	sp, #20
    9cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9cca:	461a      	mov	r2, r3
    9ccc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9cd0:	e77f      	b.n	9bd2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    9cd2:	9801      	ldr	r0, [sp, #4]
	return sent;
    9cd4:	e7e5      	b.n	9ca2 <usb_serial_write.part.0+0x15e>
    9cd6:	bf00      	nop
    9cd8:	200188a9 	.word	0x200188a9
    9cdc:	20018868 	.word	0x20018868
    9ce0:	20005000 	.word	0x20005000
    9ce4:	200188a8 	.word	0x200188a8
    9ce8:	200188ab 	.word	0x200188ab
    9cec:	20201080 	.word	0x20201080
    9cf0:	402e0000 	.word	0x402e0000
    9cf4:	2001888c 	.word	0x2001888c
    9cf8:	200188a7 	.word	0x200188a7

00009cfc <usb_serial_reset>:
}
    9cfc:	4770      	bx	lr
    9cfe:	bf00      	nop

00009d00 <usb_serial_configure>:
	if (usb_high_speed) {
    9d00:	4b2a      	ldr	r3, [pc, #168]	; (9dac <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9d02:	2100      	movs	r1, #0
    9d04:	2280      	movs	r2, #128	; 0x80
    9d06:	482a      	ldr	r0, [pc, #168]	; (9db0 <usb_serial_configure+0xb0>)
{
    9d08:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9d0a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    9d0c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9d0e:	4d29      	ldr	r5, [pc, #164]	; (9db4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    9d10:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    9d12:	4e29      	ldr	r6, [pc, #164]	; (9db8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    9d14:	bf0c      	ite	eq
    9d16:	2340      	moveq	r3, #64	; 0x40
    9d18:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9d1c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9d1e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9d20:	f001 fd48 	bl	b7b4 <memset>
	tx_head = 0;
    9d24:	4a25      	ldr	r2, [pc, #148]	; (9dbc <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9d26:	4621      	mov	r1, r4
	tx_available = 0;
    9d28:	4b25      	ldr	r3, [pc, #148]	; (9dc0 <usb_serial_configure+0xc0>)
	tx_head = 0;
    9d2a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9d30:	4824      	ldr	r0, [pc, #144]	; (9dc4 <usb_serial_configure+0xc4>)
	tx_available = 0;
    9d32:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9d34:	f001 fd3e 	bl	b7b4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9d38:	4a23      	ldr	r2, [pc, #140]	; (9dc8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9d3a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    9d3c:	4b23      	ldr	r3, [pc, #140]	; (9dcc <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9d3e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    9d40:	e9c2 4400 	strd	r4, r4, [r2]
    9d44:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    9d48:	4a21      	ldr	r2, [pc, #132]	; (9dd0 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    9d4a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    9d4e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    9d50:	4a20      	ldr	r2, [pc, #128]	; (9dd4 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    9d52:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    9d56:	4b20      	ldr	r3, [pc, #128]	; (9dd8 <usb_serial_configure+0xd8>)
    9d58:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9d5a:	4623      	mov	r3, r4
	rx_available = 0;
    9d5c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9d5e:	4622      	mov	r2, r4
    9d60:	f7ff fd78 	bl	9854 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9d64:	4622      	mov	r2, r4
    9d66:	8831      	ldrh	r1, [r6, #0]
    9d68:	2003      	movs	r0, #3
    9d6a:	4b1c      	ldr	r3, [pc, #112]	; (9ddc <usb_serial_configure+0xdc>)
    9d6c:	f7ff fd40 	bl	97f0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9d70:	4623      	mov	r3, r4
    9d72:	2201      	movs	r2, #1
    9d74:	8829      	ldrh	r1, [r5, #0]
    9d76:	2004      	movs	r0, #4
    9d78:	f7ff fd6c 	bl	9854 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9d7c:	4620      	mov	r0, r4
    9d7e:	3401      	adds	r4, #1
    9d80:	f7ff fe0e 	bl	99a0 <rx_queue_transfer>
    9d84:	2c08      	cmp	r4, #8
    9d86:	d1f9      	bne.n	9d7c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    9d88:	4b15      	ldr	r3, [pc, #84]	; (9de0 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    9d8a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    9d8c:	4815      	ldr	r0, [pc, #84]	; (9de4 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    9d8e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    9d90:	4c15      	ldr	r4, [pc, #84]	; (9de8 <usb_serial_configure+0xe8>)
    9d92:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9d94:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9d9c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9da0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9da4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    9da8:	bd70      	pop	{r4, r5, r6, pc}
    9daa:	bf00      	nop
    9dac:	200188ac 	.word	0x200188ac
    9db0:	20005000 	.word	0x20005000
    9db4:	2001888e 	.word	0x2001888e
    9db8:	2001888a 	.word	0x2001888a
    9dbc:	200188a8 	.word	0x200188a8
    9dc0:	2001888c 	.word	0x2001888c
    9dc4:	20004f00 	.word	0x20004f00
    9dc8:	20018824 	.word	0x20018824
    9dcc:	20018834 	.word	0x20018834
    9dd0:	200188a4 	.word	0x200188a4
    9dd4:	20018820 	.word	0x20018820
    9dd8:	200188a5 	.word	0x200188a5
    9ddc:	00009a01 	.word	0x00009a01
    9de0:	402e0000 	.word	0x402e0000
    9de4:	2001887c 	.word	0x2001887c
    9de8:	00009ab5 	.word	0x00009ab5

00009dec <usb_serial_read>:
{
    9dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9df0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    9df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 9ec4 <usb_serial_read+0xd8>
{
    9dfc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9dfe:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    9e02:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    9e04:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    9e08:	2900      	cmp	r1, #0
    9e0a:	d04f      	beq.n	9eac <usb_serial_read+0xc0>
    9e0c:	4680      	mov	r8, r0
    9e0e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    9e10:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    9e12:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 9ec8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    9e16:	4b26      	ldr	r3, [pc, #152]	; (9eb0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9e18:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9e1c:	4925      	ldr	r1, [pc, #148]	; (9eb4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    9e22:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    9e26:	d03f      	beq.n	9ea8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    9e28:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    9e2a:	4b23      	ldr	r3, [pc, #140]	; (9eb8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9e2c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    9e2e:	bf28      	it	cs
    9e30:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9e32:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9e34:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9e38:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    9e3c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    9e3e:	4b1f      	ldr	r3, [pc, #124]	; (9ebc <usb_serial_read+0xd0>)
    9e40:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    9e44:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    9e48:	42aa      	cmp	r2, r5
    9e4a:	d21c      	bcs.n	9e86 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9e4c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    9e50:	4918      	ldr	r1, [pc, #96]	; (9eb4 <usb_serial_read+0xc8>)
			rx_available -= len;
    9e52:	4c1b      	ldr	r4, [pc, #108]	; (9ec0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9e54:	4461      	add	r1, ip
    9e56:	9201      	str	r2, [sp, #4]
    9e58:	f7fe ff04 	bl	8c64 <memcpy>
			rx_available -= len;
    9e5c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    9e5e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    9e62:	4658      	mov	r0, fp
			rx_index[i] += len;
    9e64:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    9e66:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    9e6a:	442a      	add	r2, r5
			rx_available -= len;
    9e6c:	4439      	add	r1, r7
			rx_index[i] += len;
    9e6e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    9e72:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9e74:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9e78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9e7c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    9e80:	b003      	add	sp, #12
    9e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9e86:	462a      	mov	r2, r5
			count += avail;
    9e88:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9e8a:	f7fe feeb 	bl	8c64 <memcpy>
			rx_available -= avail;
    9e8e:	490c      	ldr	r1, [pc, #48]	; (9ec0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    9e90:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9e92:	4630      	mov	r0, r6
			rx_available -= avail;
    9e94:	680a      	ldr	r2, [r1, #0]
			p += avail;
    9e96:	44a8      	add	r8, r5
			rx_available -= avail;
    9e98:	1b52      	subs	r2, r2, r5
    9e9a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    9e9c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    9ea0:	f7ff fd7e 	bl	99a0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    9ea4:	45bb      	cmp	fp, r7
    9ea6:	d8b6      	bhi.n	9e16 <usb_serial_read+0x2a>
	return count;
    9ea8:	4638      	mov	r0, r7
    9eaa:	e7e3      	b.n	9e74 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    9eac:	4608      	mov	r0, r1
    9eae:	e7e1      	b.n	9e74 <usb_serial_read+0x88>
    9eb0:	200188a4 	.word	0x200188a4
    9eb4:	20200080 	.word	0x20200080
    9eb8:	20018844 	.word	0x20018844
    9ebc:	20018824 	.word	0x20018824
    9ec0:	20018820 	.word	0x20018820
    9ec4:	200188a5 	.word	0x200188a5
    9ec8:	20018834 	.word	0x20018834

00009ecc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    9ecc:	4b0b      	ldr	r3, [pc, #44]	; (9efc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    9ece:	4a0c      	ldr	r2, [pc, #48]	; (9f00 <usb_serial_peekchar+0x34>)
    9ed0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    9ed2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    9ed4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    9ed6:	428a      	cmp	r2, r1
    9ed8:	d00d      	beq.n	9ef6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    9eda:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    9edc:	4809      	ldr	r0, [pc, #36]	; (9f04 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9ede:	4a0a      	ldr	r2, [pc, #40]	; (9f08 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    9ee0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9ee2:	490a      	ldr	r1, [pc, #40]	; (9f0c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    9ee4:	bf28      	it	cs
    9ee6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9ee8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9eea:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    9eee:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    9ef2:	5c58      	ldrb	r0, [r3, r1]
    9ef4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    9ef6:	f04f 30ff 	mov.w	r0, #4294967295
}
    9efa:	4770      	bx	lr
    9efc:	200188a4 	.word	0x200188a4
    9f00:	200188a5 	.word	0x200188a5
    9f04:	20018844 	.word	0x20018844
    9f08:	20200080 	.word	0x20200080
    9f0c:	20018834 	.word	0x20018834

00009f10 <usb_serial_available>:
	uint32_t n = rx_available;
    9f10:	4b04      	ldr	r3, [pc, #16]	; (9f24 <usb_serial_available+0x14>)
{
    9f12:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    9f14:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9f16:	b10c      	cbz	r4, 9f1c <usb_serial_available+0xc>
}
    9f18:	4620      	mov	r0, r4
    9f1a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    9f1c:	f000 f8e0 	bl	a0e0 <yield>
}
    9f20:	4620      	mov	r0, r4
    9f22:	bd10      	pop	{r4, pc}
    9f24:	20018820 	.word	0x20018820

00009f28 <usb_serial_flush_input>:
{
    9f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    9f2c:	4e14      	ldr	r6, [pc, #80]	; (9f80 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    9f2e:	4d15      	ldr	r5, [pc, #84]	; (9f84 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    9f30:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    9f32:	782a      	ldrb	r2, [r5, #0]
    9f34:	4293      	cmp	r3, r2
    9f36:	d021      	beq.n	9f7c <usb_serial_flush_input+0x54>
    9f38:	b2dc      	uxtb	r4, r3
    9f3a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 9f8c <usb_serial_flush_input+0x64>
    9f3e:	f8df b050 	ldr.w	fp, [pc, #80]	; 9f90 <usb_serial_flush_input+0x68>
    9f42:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9f94 <usb_serial_flush_input+0x6c>
    9f46:	4f10      	ldr	r7, [pc, #64]	; (9f88 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    9f48:	3401      	adds	r4, #1
    9f4a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    9f4c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    9f50:	d901      	bls.n	9f56 <usb_serial_flush_input+0x2e>
    9f52:	2400      	movs	r4, #0
    9f54:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    9f56:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    9f5a:	f8db 3000 	ldr.w	r3, [fp]
    9f5e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    9f62:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    9f66:	1a52      	subs	r2, r2, r1
    9f68:	1a9b      	subs	r3, r3, r2
    9f6a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    9f6e:	f7ff fd17 	bl	99a0 <rx_queue_transfer>
		rx_tail = tail;
    9f72:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    9f76:	782b      	ldrb	r3, [r5, #0]
    9f78:	42a3      	cmp	r3, r4
    9f7a:	d1e5      	bne.n	9f48 <usb_serial_flush_input+0x20>
}
    9f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f80:	200188a5 	.word	0x200188a5
    9f84:	200188a4 	.word	0x200188a4
    9f88:	20018834 	.word	0x20018834
    9f8c:	20018844 	.word	0x20018844
    9f90:	20018820 	.word	0x20018820
    9f94:	20018824 	.word	0x20018824

00009f98 <usb_serial_getchar>:
{
    9f98:	b500      	push	{lr}
    9f9a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    9f9c:	2101      	movs	r1, #1
    9f9e:	f10d 0007 	add.w	r0, sp, #7
    9fa2:	f7ff ff23 	bl	9dec <usb_serial_read>
    9fa6:	b120      	cbz	r0, 9fb2 <usb_serial_getchar+0x1a>
    9fa8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    9fac:	b003      	add	sp, #12
    9fae:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    9fb2:	f04f 30ff 	mov.w	r0, #4294967295
    9fb6:	e7f9      	b.n	9fac <usb_serial_getchar+0x14>

00009fb8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    9fb8:	4b09      	ldr	r3, [pc, #36]	; (9fe0 <usb_serial_putchar+0x28>)
{
    9fba:	b500      	push	{lr}
    9fbc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    9fbe:	781b      	ldrb	r3, [r3, #0]
{
    9fc0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    9fc4:	b13b      	cbz	r3, 9fd6 <usb_serial_putchar+0x1e>
    9fc6:	2101      	movs	r1, #1
    9fc8:	f10d 0007 	add.w	r0, sp, #7
    9fcc:	f7ff fdba 	bl	9b44 <usb_serial_write.part.0>
}
    9fd0:	b003      	add	sp, #12
    9fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    9fd6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9fda:	b003      	add	sp, #12
    9fdc:	f85d fb04 	ldr.w	pc, [sp], #4
    9fe0:	200188ab 	.word	0x200188ab

00009fe4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9fe4:	4b04      	ldr	r3, [pc, #16]	; (9ff8 <usb_serial_write+0x14>)
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    9fec:	b10b      	cbz	r3, 9ff2 <usb_serial_write+0xe>
    9fee:	f7ff bda9 	b.w	9b44 <usb_serial_write.part.0>
}
    9ff2:	4610      	mov	r0, r2
    9ff4:	4770      	bx	lr
    9ff6:	bf00      	nop
    9ff8:	200188ab 	.word	0x200188ab

00009ffc <usb_serial_write_buffer_free>:
{
    9ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a000:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a002:	f8df 8044 	ldr.w	r8, [pc, #68]	; a048 <usb_serial_write_buffer_free+0x4c>
    a006:	2301      	movs	r3, #1
    a008:	4d0d      	ldr	r5, [pc, #52]	; (a040 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a00a:	4627      	mov	r7, r4
    a00c:	4e0d      	ldr	r6, [pc, #52]	; (a044 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a00e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a012:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a014:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a016:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a018:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a01a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a01e:	d005      	beq.n	a02c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a020:	f7ff fc84 	bl	992c <usb_transfer_status>
    a024:	0603      	lsls	r3, r0, #24
    a026:	bf58      	it	pl
    a028:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a02c:	2c04      	cmp	r4, #4
    a02e:	d1f0      	bne.n	a012 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a030:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a034:	2300      	movs	r3, #0
}
    a036:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a038:	f888 3000 	strb.w	r3, [r8]
}
    a03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a040:	20005000 	.word	0x20005000
    a044:	200188a8 	.word	0x200188a8
    a048:	200188a9 	.word	0x200188a9

0000a04c <usb_serial_flush_output>:
{
    a04c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a050:	4b1d      	ldr	r3, [pc, #116]	; (a0c8 <usb_serial_flush_output+0x7c>)
    a052:	781b      	ldrb	r3, [r3, #0]
    a054:	b113      	cbz	r3, a05c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a056:	4d1d      	ldr	r5, [pc, #116]	; (a0cc <usb_serial_flush_output+0x80>)
    a058:	882a      	ldrh	r2, [r5, #0]
    a05a:	b90a      	cbnz	r2, a060 <usb_serial_flush_output+0x14>
}
    a05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a060:	4e1b      	ldr	r6, [pc, #108]	; (a0d0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a062:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a066:	491b      	ldr	r1, [pc, #108]	; (a0d4 <usb_serial_flush_output+0x88>)
    a068:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a06a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a06c:	4c1a      	ldr	r4, [pc, #104]	; (a0d8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a06e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a072:	4f1a      	ldr	r7, [pc, #104]	; (a0dc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a074:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a078:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a07a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a07c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a07e:	4621      	mov	r1, r4
    a080:	2300      	movs	r3, #0
    a082:	f7ff fc19 	bl	98b8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a086:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a08a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a08e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a092:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a096:	3420      	adds	r4, #32
	} while (location < end_addr);
    a098:	42a2      	cmp	r2, r4
    a09a:	d8fa      	bhi.n	a092 <usb_serial_flush_output+0x46>
	asm("dsb");
    a09c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a0a0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a0a4:	2004      	movs	r0, #4
    a0a6:	4641      	mov	r1, r8
    a0a8:	f7ff fc1e 	bl	98e8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a0ac:	7833      	ldrb	r3, [r6, #0]
    a0ae:	3301      	adds	r3, #1
    a0b0:	b2db      	uxtb	r3, r3
    a0b2:	2b03      	cmp	r3, #3
    a0b4:	bf88      	it	hi
    a0b6:	2300      	movhi	r3, #0
    a0b8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a0ba:	2300      	movs	r3, #0
    a0bc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a0be:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a0c2:	703b      	strb	r3, [r7, #0]
}
    a0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0c8:	200188ab 	.word	0x200188ab
    a0cc:	2001888c 	.word	0x2001888c
    a0d0:	200188a8 	.word	0x200188a8
    a0d4:	20005000 	.word	0x20005000
    a0d8:	20201080 	.word	0x20201080
    a0dc:	200188a9 	.word	0x200188a9

0000a0e0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a0e4:	4e32      	ldr	r6, [pc, #200]	; (a1b0 <yield+0xd0>)
    a0e6:	7833      	ldrb	r3, [r6, #0]
    a0e8:	b163      	cbz	r3, a104 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a0ea:	4f32      	ldr	r7, [pc, #200]	; (a1b4 <yield+0xd4>)
    a0ec:	783a      	ldrb	r2, [r7, #0]
    a0ee:	b94a      	cbnz	r2, a104 <yield+0x24>
	running = 1;
    a0f0:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a0f2:	07d9      	lsls	r1, r3, #31
	running = 1;
    a0f4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a0f6:	d444      	bmi.n	a182 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a0f8:	079a      	lsls	r2, r3, #30
    a0fa:	d426      	bmi.n	a14a <yield+0x6a>

	running = 0;
    a0fc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a0fe:	075b      	lsls	r3, r3, #29
	running = 0;
    a100:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a102:	d401      	bmi.n	a108 <yield+0x28>
	
};
    a104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a108:	4b2b      	ldr	r3, [pc, #172]	; (a1b8 <yield+0xd8>)
    a10a:	681a      	ldr	r2, [r3, #0]
    a10c:	2a00      	cmp	r2, #0
    a10e:	d0f9      	beq.n	a104 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a110:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a114:	2a00      	cmp	r2, #0
    a116:	d1f5      	bne.n	a104 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a118:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a11c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a11e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a120:	2800      	cmp	r0, #0
    a122:	d03b      	beq.n	a19c <yield+0xbc>
		if (runningFromYield) {
    a124:	4c25      	ldr	r4, [pc, #148]	; (a1bc <yield+0xdc>)
    a126:	7821      	ldrb	r1, [r4, #0]
    a128:	2900      	cmp	r1, #0
    a12a:	d137      	bne.n	a19c <yield+0xbc>
		runningFromYield = true;
    a12c:	2201      	movs	r2, #1
    a12e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a130:	6942      	ldr	r2, [r0, #20]
    a132:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a134:	2a00      	cmp	r2, #0
    a136:	d038      	beq.n	a1aa <yield+0xca>
			firstYield->_prev = nullptr;
    a138:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a13a:	b905      	cbnz	r5, a13e <yield+0x5e>
    a13c:	b662      	cpsie	i
		first->_triggered = false;
    a13e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a140:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a142:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a144:	4798      	blx	r3
		runningFromYield = false;
    a146:	7025      	strb	r5, [r4, #0]
    a148:	e7dc      	b.n	a104 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a14a:	f8df 807c 	ldr.w	r8, [pc, #124]	; a1c8 <yield+0xe8>
    a14e:	f898 2000 	ldrb.w	r2, [r8]
    a152:	2a00      	cmp	r2, #0
    a154:	d0d2      	beq.n	a0fc <yield+0x1c>
    a156:	2500      	movs	r5, #0
    a158:	f8df 9070 	ldr.w	r9, [pc, #112]	; a1cc <yield+0xec>
    a15c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a15e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a162:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a164:	6823      	ldr	r3, [r4, #0]
    a166:	4620      	mov	r0, r4
    a168:	691b      	ldr	r3, [r3, #16]
    a16a:	4798      	blx	r3
    a16c:	b110      	cbz	r0, a174 <yield+0x94>
    a16e:	6963      	ldr	r3, [r4, #20]
    a170:	689b      	ldr	r3, [r3, #8]
    a172:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a174:	f898 2000 	ldrb.w	r2, [r8]
    a178:	b2eb      	uxtb	r3, r5
    a17a:	429a      	cmp	r2, r3
    a17c:	d8ef      	bhi.n	a15e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a17e:	7833      	ldrb	r3, [r6, #0]
    a180:	e7bc      	b.n	a0fc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a182:	f7ff fec5 	bl	9f10 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a186:	b968      	cbnz	r0, a1a4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a188:	4b0d      	ldr	r3, [pc, #52]	; (a1c0 <yield+0xe0>)
    a18a:	781b      	ldrb	r3, [r3, #0]
    a18c:	b90b      	cbnz	r3, a192 <yield+0xb2>
    a18e:	7833      	ldrb	r3, [r6, #0]
    a190:	e7b2      	b.n	a0f8 <yield+0x18>
    a192:	7833      	ldrb	r3, [r6, #0]
    a194:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a198:	7033      	strb	r3, [r6, #0]
    a19a:	e7ad      	b.n	a0f8 <yield+0x18>
		if (doit) __enable_irq();
    a19c:	2d00      	cmp	r5, #0
    a19e:	d1b1      	bne.n	a104 <yield+0x24>
    a1a0:	b662      	cpsie	i
    a1a2:	e7af      	b.n	a104 <yield+0x24>
		if (Serial.available()) serialEvent();
    a1a4:	f000 fa8a 	bl	a6bc <serialEvent()>
    a1a8:	e7ee      	b.n	a188 <yield+0xa8>
			lastYield = nullptr;
    a1aa:	4b06      	ldr	r3, [pc, #24]	; (a1c4 <yield+0xe4>)
    a1ac:	601a      	str	r2, [r3, #0]
    a1ae:	e7c4      	b.n	a13a <yield+0x5a>
    a1b0:	20004992 	.word	0x20004992
    a1b4:	20018892 	.word	0x20018892
    a1b8:	20005088 	.word	0x20005088
    a1bc:	20018890 	.word	0x20018890
    a1c0:	60001f58 	.word	0x60001f58
    a1c4:	20005094 	.word	0x20005094
    a1c8:	20018891 	.word	0x20018891
    a1cc:	20005098 	.word	0x20005098

0000a1d0 <EventResponder::runFromInterrupt()>:
{
    a1d0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a1d2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a1d6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a1d8:	4c0c      	ldr	r4, [pc, #48]	; (a20c <EventResponder::runFromInterrupt()+0x3c>)
    a1da:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a1dc:	b180      	cbz	r0, a200 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    a1de:	4e0c      	ldr	r6, [pc, #48]	; (a210 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    a1e0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    a1e2:	6943      	ldr	r3, [r0, #20]
    a1e4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    a1e6:	b173      	cbz	r3, a206 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a1e8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    a1ea:	b902      	cbnz	r2, a1ee <EventResponder::runFromInterrupt()+0x1e>
    a1ec:	b662      	cpsie	i
			(*(first->_function))(*first);
    a1ee:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    a1f0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a1f2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a1f4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a1f8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a1fa:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a1fc:	2800      	cmp	r0, #0
    a1fe:	d1f0      	bne.n	a1e2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    a200:	b902      	cbnz	r2, a204 <EventResponder::runFromInterrupt()+0x34>
    a202:	b662      	cpsie	i
}
    a204:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    a206:	6033      	str	r3, [r6, #0]
    a208:	e7ef      	b.n	a1ea <EventResponder::runFromInterrupt()+0x1a>
    a20a:	bf00      	nop
    a20c:	20005090 	.word	0x20005090
    a210:	2000508c 	.word	0x2000508c

0000a214 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    a214:	f7ff bfdc 	b.w	a1d0 <EventResponder::runFromInterrupt()>

0000a218 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a218:	4904      	ldr	r1, [pc, #16]	; (a22c <systick_isr+0x14>)
	systick_millis_count++;
    a21a:	4a05      	ldr	r2, [pc, #20]	; (a230 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    a21c:	6849      	ldr	r1, [r1, #4]
    a21e:	4b05      	ldr	r3, [pc, #20]	; (a234 <systick_isr+0x1c>)
    a220:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    a222:	6813      	ldr	r3, [r2, #0]
    a224:	3301      	adds	r3, #1
    a226:	6013      	str	r3, [r2, #0]
}
    a228:	4770      	bx	lr
    a22a:	bf00      	nop
    a22c:	e0001000 	.word	0xe0001000
    a230:	20018868 	.word	0x20018868
    a234:	20018864 	.word	0x20018864

0000a238 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a238:	49a2      	ldr	r1, [pc, #648]	; (a4c4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a23a:	4ba3      	ldr	r3, [pc, #652]	; (a4c8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a23c:	4288      	cmp	r0, r1
{
    a23e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a242:	4ca2      	ldr	r4, [pc, #648]	; (a4cc <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a244:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a246:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a248:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a24c:	d91b      	bls.n	a286 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a24e:	4ba0      	ldr	r3, [pc, #640]	; (a4d0 <set_arm_clock+0x298>)
    a250:	4298      	cmp	r0, r3
    a252:	f240 8102 	bls.w	a45a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a256:	1ac3      	subs	r3, r0, r3
    a258:	499e      	ldr	r1, [pc, #632]	; (a4d4 <set_arm_clock+0x29c>)
    a25a:	0a1b      	lsrs	r3, r3, #8
    a25c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a260:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a264:	09db      	lsrs	r3, r3, #7
    a266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a26a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a26e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a272:	428b      	cmp	r3, r1
    a274:	bf28      	it	cs
    a276:	460b      	movcs	r3, r1
    a278:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a27c:	4b96      	ldr	r3, [pc, #600]	; (a4d8 <set_arm_clock+0x2a0>)
    a27e:	fba3 3707 	umull	r3, r7, r3, r7
    a282:	08ff      	lsrs	r7, r7, #3
    a284:	e004      	b.n	a290 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a286:	4f95      	ldr	r7, [pc, #596]	; (a4dc <set_arm_clock+0x2a4>)
    a288:	42b8      	cmp	r0, r7
    a28a:	bf8c      	ite	hi
    a28c:	270e      	movhi	r7, #14
    a28e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a290:	498d      	ldr	r1, [pc, #564]	; (a4c8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a292:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a296:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a29a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a29c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a2a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a2a4:	d20c      	bcs.n	a2c0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a2a6:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a2aa:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a2ae:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a2b2:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a2b6:	680b      	ldr	r3, [r1, #0]
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	dafc      	bge.n	a2b6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a2bc:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a2c0:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a2c4:	d124      	bne.n	a310 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a2c6:	4986      	ldr	r1, [pc, #536]	; (a4e0 <set_arm_clock+0x2a8>)
    a2c8:	690c      	ldr	r4, [r1, #16]
    a2ca:	4986      	ldr	r1, [pc, #536]	; (a4e4 <set_arm_clock+0x2ac>)
    a2cc:	43a1      	bics	r1, r4
    a2ce:	f000 80ea 	beq.w	a4a6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a2d2:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a2d6:	4634      	mov	r4, r6
    a2d8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a2dc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a2e0:	d004      	beq.n	a2ec <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a2e2:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a2e6:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a2e8:	4b77      	ldr	r3, [pc, #476]	; (a4c8 <set_arm_clock+0x290>)
    a2ea:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a2ec:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a2f0:	d007      	beq.n	a302 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a2f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a2f6:	4974      	ldr	r1, [pc, #464]	; (a4c8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a2f8:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a2fa:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a2fc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a2fe:	071a      	lsls	r2, r3, #28
    a300:	d4fc      	bmi.n	a2fc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a302:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a306:	4a70      	ldr	r2, [pc, #448]	; (a4c8 <set_arm_clock+0x290>)
    a308:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a30a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a30c:	069b      	lsls	r3, r3, #26
    a30e:	d4fc      	bmi.n	a30a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a310:	4c75      	ldr	r4, [pc, #468]	; (a4e8 <set_arm_clock+0x2b0>)
    a312:	42a0      	cmp	r0, r4
    a314:	f200 80ce 	bhi.w	a4b4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a318:	f04f 0c01 	mov.w	ip, #1
    a31c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a31e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a320:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a324:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a328:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a32c:	42a2      	cmp	r2, r4
    a32e:	d818      	bhi.n	a362 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a330:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a334:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a338:	f040 808d 	bne.w	a456 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a33c:	f1bc 0f04 	cmp.w	ip, #4
    a340:	f200 8091 	bhi.w	a466 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a344:	180a      	adds	r2, r1, r0
    a346:	42a2      	cmp	r2, r4
    a348:	f200 80a4 	bhi.w	a494 <set_arm_clock+0x25c>
    a34c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a350:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a352:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a356:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a35a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a35e:	42a2      	cmp	r2, r4
    a360:	d9e6      	bls.n	a330 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a362:	f10c 31ff 	add.w	r1, ip, #4294967295
    a366:	028c      	lsls	r4, r1, #10
    a368:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a36c:	485f      	ldr	r0, [pc, #380]	; (a4ec <set_arm_clock+0x2b4>)
    a36e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a370:	4a5f      	ldr	r2, [pc, #380]	; (a4f0 <set_arm_clock+0x2b8>)
    a372:	4290      	cmp	r0, r2
    a374:	d97f      	bls.n	a476 <set_arm_clock+0x23e>
    a376:	f8df a1a4 	ldr.w	sl, [pc, #420]	; a51c <set_arm_clock+0x2e4>
    a37a:	226c      	movs	r2, #108	; 0x6c
    a37c:	485d      	ldr	r0, [pc, #372]	; (a4f4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a37e:	4d58      	ldr	r5, [pc, #352]	; (a4e0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a380:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a384:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a388:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a38c:	f8df c190 	ldr.w	ip, [pc, #400]	; a520 <set_arm_clock+0x2e8>
    a390:	ea0e 0c0c 	and.w	ip, lr, ip
    a394:	45d4      	cmp	ip, sl
    a396:	d009      	beq.n	a3ac <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a39c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a3a0:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a3a4:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a3a6:	682a      	ldr	r2, [r5, #0]
    a3a8:	2a00      	cmp	r2, #0
    a3aa:	dafc      	bge.n	a3a6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a3ac:	4a46      	ldr	r2, [pc, #280]	; (a4c8 <set_arm_clock+0x290>)
    a3ae:	6915      	ldr	r5, [r2, #16]
    a3b0:	f005 0507 	and.w	r5, r5, #7
    a3b4:	429d      	cmp	r5, r3
    a3b6:	d003      	beq.n	a3c0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a3b8:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a3ba:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a3bc:	03dd      	lsls	r5, r3, #15
    a3be:	d4fc      	bmi.n	a3ba <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a3c0:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a3c4:	d009      	beq.n	a3da <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a3c6:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a3ca:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a3ce:	4a3e      	ldr	r2, [pc, #248]	; (a4c8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a3d0:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a3d2:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a3d4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a3d6:	0799      	lsls	r1, r3, #30
    a3d8:	d4fc      	bmi.n	a3d4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a3da:	4947      	ldr	r1, [pc, #284]	; (a4f8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a3dc:	4a47      	ldr	r2, [pc, #284]	; (a4fc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a3de:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a3e0:	4291      	cmp	r1, r2
    a3e2:	d83c      	bhi.n	a45e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a3e4:	4b46      	ldr	r3, [pc, #280]	; (a500 <set_arm_clock+0x2c8>)
    a3e6:	09c9      	lsrs	r1, r1, #7
    a3e8:	fba3 3101 	umull	r3, r1, r3, r1
    a3ec:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a3ee:	1e4b      	subs	r3, r1, #1
    a3f0:	021b      	lsls	r3, r3, #8
    a3f2:	ea86 0203 	eor.w	r2, r6, r3
    a3f6:	f412 7f40 	tst.w	r2, #768	; 0x300
    a3fa:	d006      	beq.n	a40a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a3fc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a400:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a404:	4a30      	ldr	r2, [pc, #192]	; (a4c8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a406:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a408:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a40a:	4a2f      	ldr	r2, [pc, #188]	; (a4c8 <set_arm_clock+0x290>)
    a40c:	6953      	ldr	r3, [r2, #20]
    a40e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    a412:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a414:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a416:	069b      	lsls	r3, r3, #26
    a418:	d4fc      	bmi.n	a414 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a41a:	4b3a      	ldr	r3, [pc, #232]	; (a504 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a41c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a41e:	fba3 2300 	umull	r2, r3, r3, r0
    a422:	f04f 32ff 	mov.w	r2, #4294967295
    a426:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a42a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a42e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a432:	4a35      	ldr	r2, [pc, #212]	; (a508 <set_arm_clock+0x2d0>)
    a434:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a436:	4a35      	ldr	r2, [pc, #212]	; (a50c <set_arm_clock+0x2d4>)
    a438:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a43a:	4a35      	ldr	r2, [pc, #212]	; (a510 <set_arm_clock+0x2d8>)
    a43c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a43e:	d208      	bcs.n	a452 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a440:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a444:	4a21      	ldr	r2, [pc, #132]	; (a4cc <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a446:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a44a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a44c:	6813      	ldr	r3, [r2, #0]
    a44e:	2b00      	cmp	r3, #0
    a450:	dafc      	bge.n	a44c <set_arm_clock+0x214>
	}

	return frequency;
}
    a452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a456:	4673      	mov	r3, lr
    a458:	e762      	b.n	a320 <set_arm_clock+0xe8>
    a45a:	2712      	movs	r7, #18
    a45c:	e718      	b.n	a290 <set_arm_clock+0x58>
    a45e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a462:	2104      	movs	r1, #4
    a464:	e7c5      	b.n	a3f2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a466:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a46a:	4820      	ldr	r0, [pc, #128]	; (a4ec <set_arm_clock+0x2b4>)
    a46c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a46e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a470:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a472:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a476:	4a27      	ldr	r2, [pc, #156]	; (a514 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a478:	f8df a0a8 	ldr.w	sl, [pc, #168]	; a524 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a47c:	fba2 2000 	umull	r2, r0, r2, r0
    a480:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a482:	4825      	ldr	r0, [pc, #148]	; (a518 <set_arm_clock+0x2e0>)
    a484:	2a36      	cmp	r2, #54	; 0x36
    a486:	bf38      	it	cc
    a488:	2236      	movcc	r2, #54	; 0x36
    a48a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a48e:	ea42 0a0a 	orr.w	sl, r2, sl
    a492:	e774      	b.n	a37e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a494:	ea4f 248c 	mov.w	r4, ip, lsl #10
    a498:	2300      	movs	r3, #0
    a49a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a49e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a4a2:	46ac      	mov	ip, r5
    a4a4:	e762      	b.n	a36c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a4a6:	461d      	mov	r5, r3
    a4a8:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    a4ac:	4611      	mov	r1, r2
    a4ae:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    a4b2:	e713      	b.n	a2dc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a4b4:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    a4b6:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a4ba:	4602      	mov	r2, r0
    a4bc:	4631      	mov	r1, r6
    a4be:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    a4c0:	46e6      	mov	lr, ip
    a4c2:	e753      	b.n	a36c <set_arm_clock+0x134>
    a4c4:	1f78a400 	.word	0x1f78a400
    a4c8:	400fc000 	.word	0x400fc000
    a4cc:	40080000 	.word	0x40080000
    a4d0:	23c34600 	.word	0x23c34600
    a4d4:	004cb223 	.word	0x004cb223
    a4d8:	51eb851f 	.word	0x51eb851f
    a4dc:	016e3600 	.word	0x016e3600
    a4e0:	400d8000 	.word	0x400d8000
    a4e4:	80003040 	.word	0x80003040
    a4e8:	269fb1ff 	.word	0x269fb1ff
    a4ec:	005b8d80 	.word	0x005b8d80
    a4f0:	4df67eff 	.word	0x4df67eff
    a4f4:	4d3f6400 	.word	0x4d3f6400
    a4f8:	08f0d17f 	.word	0x08f0d17f
    a4fc:	2cb4177f 	.word	0x2cb4177f
    a500:	00e5109f 	.word	0x00e5109f
    a504:	431bde83 	.word	0x431bde83
    a508:	2000437c 	.word	0x2000437c
    a50c:	20004378 	.word	0x20004378
    a510:	20018860 	.word	0x20018860
    a514:	165e9f81 	.word	0x165e9f81
    a518:	00b71b00 	.word	0x00b71b00
    a51c:	8000206c 	.word	0x8000206c
    a520:	8001307f 	.word	0x8001307f
    a524:	80002000 	.word	0x80002000

0000a528 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a528:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a52a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a52c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a530:	4619      	mov	r1, r3
{
    a532:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a534:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a538:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a53c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a540:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a544:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a548:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a54a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a54e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a552:	b29b      	uxth	r3, r3
    a554:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a558:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a55c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a560:	3101      	adds	r1, #1
    a562:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a566:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a568:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a56a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a56e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a570:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a572:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a574:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a576:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a57a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a57c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a57e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a580:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a582:	d1eb      	bne.n	a55c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a584:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a588:	b29b      	uxth	r3, r3
    a58a:	f043 030f 	orr.w	r3, r3, #15
    a58e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a592:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a596:	b29b      	uxth	r3, r3
    a598:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a59c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a5a0:	bd10      	pop	{r4, pc}
    a5a2:	bf00      	nop

0000a5a4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a5a4:	4b37      	ldr	r3, [pc, #220]	; (a684 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a5a6:	4a38      	ldr	r2, [pc, #224]	; (a688 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a5a8:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a5aa:	4838      	ldr	r0, [pc, #224]	; (a68c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a5ac:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a5b0:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a5b2:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a5b4:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a5b8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a5bc:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a5c0:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a5c4:	430a      	orrs	r2, r1
    a5c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a5ca:	f7ff ffad 	bl	a528 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a5ce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a5d2:	f7ff ffa9 	bl	a528 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a5d6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a5da:	f7ff ffa5 	bl	a528 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a5de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a5e2:	f7ff ffa1 	bl	a528 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a5e6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a5e8:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a5ec:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a5f0:	4611      	mov	r1, r2
    a5f2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a5f6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a5fa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a5fc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a5fe:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a600:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a602:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a606:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a608:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a60a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a60e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a610:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a612:	d1ee      	bne.n	a5f2 <pwm_init+0x4e>
    a614:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a616:	481e      	ldr	r0, [pc, #120]	; (a690 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a618:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a61c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a620:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a622:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a626:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a62a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a62e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a632:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a634:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a636:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a638:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a63a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a63e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a640:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a642:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a646:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a648:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a64a:	d1ee      	bne.n	a62a <pwm_init+0x86>
    a64c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a64e:	4811      	ldr	r0, [pc, #68]	; (a694 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a650:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a652:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a656:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a658:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a65c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a660:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a664:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a668:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a66a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a66c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a66e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a670:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a672:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a674:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a676:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a67a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a67c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a680:	d1ee      	bne.n	a660 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a682:	bd70      	pop	{r4, r5, r6, pc}
    a684:	400fc000 	.word	0x400fc000
    a688:	fc030000 	.word	0xfc030000
    a68c:	403dc000 	.word	0x403dc000
    a690:	401e0000 	.word	0x401e0000
    a694:	401e4000 	.word	0x401e4000

0000a698 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    a698:	4a07      	ldr	r2, [pc, #28]	; (a6b8 <rtc_get+0x20>)
    a69a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    a69c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    a69e:	4619      	mov	r1, r3
    a6a0:	4684      	mov	ip, r0
    a6a2:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    a6a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    a6a6:	4299      	cmp	r1, r3
    a6a8:	d1f9      	bne.n	a69e <rtc_get+0x6>
    a6aa:	4584      	cmp	ip, r0
    a6ac:	d1f7      	bne.n	a69e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    a6ae:	0bdb      	lsrs	r3, r3, #15
}
    a6b0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    a6b4:	4770      	bx	lr
    a6b6:	bf00      	nop
    a6b8:	400d4000 	.word	0x400d4000

0000a6bc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a6bc:	4770      	bx	lr
    a6be:	bf00      	nop

0000a6c0 <sm_align_pool>:
{
    a6c0:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    a6c2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    a6c6:	b15b      	cbz	r3, a6e0 <sm_align_pool+0x20>
    a6c8:	b1ba      	cbz	r2, a6fa <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    a6ca:	4b0f      	ldr	r3, [pc, #60]	; (a708 <sm_align_pool+0x48>)
    a6cc:	fba3 1302 	umull	r1, r3, r3, r2
    a6d0:	08db      	lsrs	r3, r3, #3
    a6d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a6d6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a6da:	d10a      	bne.n	a6f2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    a6dc:	2001      	movs	r0, #1
}
    a6de:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    a6e0:	4b09      	ldr	r3, [pc, #36]	; (a708 <sm_align_pool+0x48>)
    a6e2:	fba3 1302 	umull	r1, r3, r3, r2
    a6e6:	08db      	lsrs	r3, r3, #3
    a6e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    a6ec:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    a6f0:	d001      	beq.n	a6f6 <sm_align_pool+0x36>
    a6f2:	1ad2      	subs	r2, r2, r3
    a6f4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    a6f6:	2af0      	cmp	r2, #240	; 0xf0
    a6f8:	d8f0      	bhi.n	a6dc <sm_align_pool+0x1c>
		errno = ENOSPC;
    a6fa:	f001 f9b1 	bl	ba60 <__errno>
    a6fe:	221c      	movs	r2, #28
    a700:	4603      	mov	r3, r0
    a702:	2000      	movs	r0, #0
    a704:	601a      	str	r2, [r3, #0]
}
    a706:	bd08      	pop	{r3, pc}
    a708:	aaaaaaab 	.word	0xaaaaaaab

0000a70c <sm_set_pool>:
{
    a70c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    a70e:	4604      	mov	r4, r0
    a710:	b338      	cbz	r0, a762 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    a712:	b119      	cbz	r1, a71c <sm_set_pool+0x10>
    a714:	fab2 f682 	clz	r6, r2
    a718:	0976      	lsrs	r6, r6, #5
    a71a:	b9a2      	cbnz	r2, a746 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    a71c:	6820      	ldr	r0, [r4, #0]
    a71e:	b300      	cbz	r0, a762 <sm_set_pool+0x56>
    a720:	6862      	ldr	r2, [r4, #4]
    a722:	b1f2      	cbz	r2, a762 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    a724:	4b18      	ldr	r3, [pc, #96]	; (a788 <sm_set_pool+0x7c>)
    a726:	4919      	ldr	r1, [pc, #100]	; (a78c <sm_set_pool+0x80>)
    a728:	fb02 f303 	mul.w	r3, r2, r3
    a72c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    a730:	d317      	bcc.n	a762 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a732:	68a3      	ldr	r3, [r4, #8]
    a734:	b9e3      	cbnz	r3, a770 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    a736:	2200      	movs	r2, #0
			return 1;
    a738:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    a73a:	6022      	str	r2, [r4, #0]
    a73c:	6062      	str	r2, [r4, #4]
    a73e:	60a2      	str	r2, [r4, #8]
    a740:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    a742:	4618      	mov	r0, r3
    a744:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    a746:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    a748:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    a74a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    a74e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    a750:	f7ff ffb6 	bl	a6c0 <sm_align_pool>
    a754:	4603      	mov	r3, r0
    a756:	2800      	cmp	r0, #0
    a758:	d0f3      	beq.n	a742 <sm_set_pool+0x36>
	if (do_zero) {
    a75a:	b96d      	cbnz	r5, a778 <sm_set_pool+0x6c>
	return 1;
    a75c:	2301      	movs	r3, #1
}
    a75e:	4618      	mov	r0, r3
    a760:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    a762:	f001 f97d 	bl	ba60 <__errno>
    a766:	2216      	movs	r2, #22
		return 0;
    a768:	2300      	movs	r3, #0
		errno = EINVAL;
    a76a:	6002      	str	r2, [r0, #0]
}
    a76c:	4618      	mov	r0, r3
    a76e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    a770:	2100      	movs	r1, #0
    a772:	f001 f81f 	bl	b7b4 <memset>
    a776:	e7de      	b.n	a736 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    a778:	6862      	ldr	r2, [r4, #4]
    a77a:	4631      	mov	r1, r6
    a77c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    a77e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    a780:	f001 f818 	bl	b7b4 <memset>
	return 1;
    a784:	2301      	movs	r3, #1
    a786:	e7dc      	b.n	a742 <sm_set_pool+0x36>
    a788:	aaaaaaab 	.word	0xaaaaaaab
    a78c:	15555555 	.word	0x15555555

0000a790 <__aeabi_atexit>:
    a790:	4603      	mov	r3, r0
    a792:	4608      	mov	r0, r1
    a794:	4619      	mov	r1, r3
    a796:	f000 be27 	b.w	b3e8 <__cxa_atexit>
    a79a:	bf00      	nop

0000a79c <atol>:
    a79c:	220a      	movs	r2, #10
    a79e:	2100      	movs	r1, #0
    a7a0:	f000 bd66 	b.w	b270 <strtol>

0000a7a4 <malloc>:
    a7a4:	4b02      	ldr	r3, [pc, #8]	; (a7b0 <malloc+0xc>)
    a7a6:	4601      	mov	r1, r0
    a7a8:	6818      	ldr	r0, [r3, #0]
    a7aa:	f000 b80b 	b.w	a7c4 <_malloc_r>
    a7ae:	bf00      	nop
    a7b0:	20004924 	.word	0x20004924

0000a7b4 <free>:
    a7b4:	4b02      	ldr	r3, [pc, #8]	; (a7c0 <free+0xc>)
    a7b6:	4601      	mov	r1, r0
    a7b8:	6818      	ldr	r0, [r3, #0]
    a7ba:	f001 bc63 	b.w	c084 <_free_r>
    a7be:	bf00      	nop
    a7c0:	20004924 	.word	0x20004924

0000a7c4 <_malloc_r>:
    a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7c8:	f101 060b 	add.w	r6, r1, #11
    a7cc:	2e16      	cmp	r6, #22
    a7ce:	b083      	sub	sp, #12
    a7d0:	4604      	mov	r4, r0
    a7d2:	d824      	bhi.n	a81e <_malloc_r+0x5a>
    a7d4:	2910      	cmp	r1, #16
    a7d6:	f200 80ba 	bhi.w	a94e <_malloc_r+0x18a>
    a7da:	f000 faa3 	bl	ad24 <__malloc_lock>
    a7de:	2610      	movs	r6, #16
    a7e0:	2218      	movs	r2, #24
    a7e2:	2002      	movs	r0, #2
    a7e4:	4fb5      	ldr	r7, [pc, #724]	; (aabc <_malloc_r+0x2f8>)
    a7e6:	443a      	add	r2, r7
    a7e8:	f1a2 0108 	sub.w	r1, r2, #8
    a7ec:	6853      	ldr	r3, [r2, #4]
    a7ee:	428b      	cmp	r3, r1
    a7f0:	f000 80ba 	beq.w	a968 <_malloc_r+0x1a4>
    a7f4:	685a      	ldr	r2, [r3, #4]
    a7f6:	68d9      	ldr	r1, [r3, #12]
    a7f8:	f022 0203 	bic.w	r2, r2, #3
    a7fc:	441a      	add	r2, r3
    a7fe:	689d      	ldr	r5, [r3, #8]
    a800:	60e9      	str	r1, [r5, #12]
    a802:	608d      	str	r5, [r1, #8]
    a804:	6851      	ldr	r1, [r2, #4]
    a806:	f041 0101 	orr.w	r1, r1, #1
    a80a:	4620      	mov	r0, r4
    a80c:	6051      	str	r1, [r2, #4]
    a80e:	f103 0508 	add.w	r5, r3, #8
    a812:	f000 fa8d 	bl	ad30 <__malloc_unlock>
    a816:	4628      	mov	r0, r5
    a818:	b003      	add	sp, #12
    a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a81e:	f036 0607 	bics.w	r6, r6, #7
    a822:	f100 8094 	bmi.w	a94e <_malloc_r+0x18a>
    a826:	42b1      	cmp	r1, r6
    a828:	f200 8091 	bhi.w	a94e <_malloc_r+0x18a>
    a82c:	f000 fa7a 	bl	ad24 <__malloc_lock>
    a830:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    a834:	f0c0 819a 	bcc.w	ab6c <_malloc_r+0x3a8>
    a838:	0a73      	lsrs	r3, r6, #9
    a83a:	f000 808f 	beq.w	a95c <_malloc_r+0x198>
    a83e:	2b04      	cmp	r3, #4
    a840:	f200 816f 	bhi.w	ab22 <_malloc_r+0x35e>
    a844:	09b3      	lsrs	r3, r6, #6
    a846:	f103 0039 	add.w	r0, r3, #57	; 0x39
    a84a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    a84e:	00c3      	lsls	r3, r0, #3
    a850:	4f9a      	ldr	r7, [pc, #616]	; (aabc <_malloc_r+0x2f8>)
    a852:	443b      	add	r3, r7
    a854:	f1a3 0508 	sub.w	r5, r3, #8
    a858:	685b      	ldr	r3, [r3, #4]
    a85a:	429d      	cmp	r5, r3
    a85c:	d106      	bne.n	a86c <_malloc_r+0xa8>
    a85e:	e00c      	b.n	a87a <_malloc_r+0xb6>
    a860:	2900      	cmp	r1, #0
    a862:	f280 8127 	bge.w	aab4 <_malloc_r+0x2f0>
    a866:	68db      	ldr	r3, [r3, #12]
    a868:	429d      	cmp	r5, r3
    a86a:	d006      	beq.n	a87a <_malloc_r+0xb6>
    a86c:	685a      	ldr	r2, [r3, #4]
    a86e:	f022 0203 	bic.w	r2, r2, #3
    a872:	1b91      	subs	r1, r2, r6
    a874:	290f      	cmp	r1, #15
    a876:	ddf3      	ble.n	a860 <_malloc_r+0x9c>
    a878:	4660      	mov	r0, ip
    a87a:	693d      	ldr	r5, [r7, #16]
    a87c:	f8df c250 	ldr.w	ip, [pc, #592]	; aad0 <_malloc_r+0x30c>
    a880:	4565      	cmp	r5, ip
    a882:	d07c      	beq.n	a97e <_malloc_r+0x1ba>
    a884:	686a      	ldr	r2, [r5, #4]
    a886:	f022 0203 	bic.w	r2, r2, #3
    a88a:	1b93      	subs	r3, r2, r6
    a88c:	2b0f      	cmp	r3, #15
    a88e:	f300 817b 	bgt.w	ab88 <_malloc_r+0x3c4>
    a892:	2b00      	cmp	r3, #0
    a894:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    a898:	f280 816c 	bge.w	ab74 <_malloc_r+0x3b0>
    a89c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    a8a0:	f080 811a 	bcs.w	aad8 <_malloc_r+0x314>
    a8a4:	08d3      	lsrs	r3, r2, #3
    a8a6:	6879      	ldr	r1, [r7, #4]
    a8a8:	3301      	adds	r3, #1
    a8aa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    a8ae:	2201      	movs	r2, #1
    a8b0:	fa02 f20e 	lsl.w	r2, r2, lr
    a8b4:	430a      	orrs	r2, r1
    a8b6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    a8ba:	f8c5 e008 	str.w	lr, [r5, #8]
    a8be:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    a8c2:	3908      	subs	r1, #8
    a8c4:	60e9      	str	r1, [r5, #12]
    a8c6:	607a      	str	r2, [r7, #4]
    a8c8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    a8cc:	f8ce 500c 	str.w	r5, [lr, #12]
    a8d0:	1083      	asrs	r3, r0, #2
    a8d2:	2101      	movs	r1, #1
    a8d4:	4099      	lsls	r1, r3
    a8d6:	4291      	cmp	r1, r2
    a8d8:	d857      	bhi.n	a98a <_malloc_r+0x1c6>
    a8da:	4211      	tst	r1, r2
    a8dc:	d106      	bne.n	a8ec <_malloc_r+0x128>
    a8de:	f020 0003 	bic.w	r0, r0, #3
    a8e2:	0049      	lsls	r1, r1, #1
    a8e4:	4211      	tst	r1, r2
    a8e6:	f100 0004 	add.w	r0, r0, #4
    a8ea:	d0fa      	beq.n	a8e2 <_malloc_r+0x11e>
    a8ec:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    a8f0:	464d      	mov	r5, r9
    a8f2:	4686      	mov	lr, r0
    a8f4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    a8f8:	4545      	cmp	r5, r8
    a8fa:	d108      	bne.n	a90e <_malloc_r+0x14a>
    a8fc:	e11d      	b.n	ab3a <_malloc_r+0x376>
    a8fe:	2b00      	cmp	r3, #0
    a900:	f280 8124 	bge.w	ab4c <_malloc_r+0x388>
    a904:	f8d8 800c 	ldr.w	r8, [r8, #12]
    a908:	4545      	cmp	r5, r8
    a90a:	f000 8116 	beq.w	ab3a <_malloc_r+0x376>
    a90e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    a912:	f022 0203 	bic.w	r2, r2, #3
    a916:	1b93      	subs	r3, r2, r6
    a918:	2b0f      	cmp	r3, #15
    a91a:	ddf0      	ble.n	a8fe <_malloc_r+0x13a>
    a91c:	4620      	mov	r0, r4
    a91e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    a922:	eb08 0106 	add.w	r1, r8, r6
    a926:	f046 0601 	orr.w	r6, r6, #1
    a92a:	f8c8 6004 	str.w	r6, [r8, #4]
    a92e:	60ec      	str	r4, [r5, #12]
    a930:	60a5      	str	r5, [r4, #8]
    a932:	f043 0401 	orr.w	r4, r3, #1
    a936:	e9c7 1104 	strd	r1, r1, [r7, #16]
    a93a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    a93e:	604c      	str	r4, [r1, #4]
    a940:	f848 3002 	str.w	r3, [r8, r2]
    a944:	f000 f9f4 	bl	ad30 <__malloc_unlock>
    a948:	f108 0508 	add.w	r5, r8, #8
    a94c:	e002      	b.n	a954 <_malloc_r+0x190>
    a94e:	230c      	movs	r3, #12
    a950:	6023      	str	r3, [r4, #0]
    a952:	2500      	movs	r5, #0
    a954:	4628      	mov	r0, r5
    a956:	b003      	add	sp, #12
    a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a95c:	f44f 7300 	mov.w	r3, #512	; 0x200
    a960:	2040      	movs	r0, #64	; 0x40
    a962:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    a966:	e773      	b.n	a850 <_malloc_r+0x8c>
    a968:	68d3      	ldr	r3, [r2, #12]
    a96a:	429a      	cmp	r2, r3
    a96c:	bf08      	it	eq
    a96e:	3002      	addeq	r0, #2
    a970:	f47f af40 	bne.w	a7f4 <_malloc_r+0x30>
    a974:	693d      	ldr	r5, [r7, #16]
    a976:	f8df c158 	ldr.w	ip, [pc, #344]	; aad0 <_malloc_r+0x30c>
    a97a:	4565      	cmp	r5, ip
    a97c:	d182      	bne.n	a884 <_malloc_r+0xc0>
    a97e:	687a      	ldr	r2, [r7, #4]
    a980:	1083      	asrs	r3, r0, #2
    a982:	2101      	movs	r1, #1
    a984:	4099      	lsls	r1, r3
    a986:	4291      	cmp	r1, r2
    a988:	d9a7      	bls.n	a8da <_malloc_r+0x116>
    a98a:	68bd      	ldr	r5, [r7, #8]
    a98c:	686b      	ldr	r3, [r5, #4]
    a98e:	f023 0903 	bic.w	r9, r3, #3
    a992:	454e      	cmp	r6, r9
    a994:	d803      	bhi.n	a99e <_malloc_r+0x1da>
    a996:	eba9 0306 	sub.w	r3, r9, r6
    a99a:	2b0f      	cmp	r3, #15
    a99c:	dc7a      	bgt.n	aa94 <_malloc_r+0x2d0>
    a99e:	f8df b134 	ldr.w	fp, [pc, #308]	; aad4 <_malloc_r+0x310>
    a9a2:	4b47      	ldr	r3, [pc, #284]	; (aac0 <_malloc_r+0x2fc>)
    a9a4:	f8db 2000 	ldr.w	r2, [fp]
    a9a8:	681b      	ldr	r3, [r3, #0]
    a9aa:	3201      	adds	r2, #1
    a9ac:	4433      	add	r3, r6
    a9ae:	eb05 0a09 	add.w	sl, r5, r9
    a9b2:	f000 8133 	beq.w	ac1c <_malloc_r+0x458>
    a9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    a9ba:	330f      	adds	r3, #15
    a9bc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    a9c0:	f028 080f 	bic.w	r8, r8, #15
    a9c4:	4641      	mov	r1, r8
    a9c6:	4620      	mov	r0, r4
    a9c8:	f001 f822 	bl	ba10 <_sbrk_r>
    a9cc:	1c41      	adds	r1, r0, #1
    a9ce:	4602      	mov	r2, r0
    a9d0:	f000 80f3 	beq.w	abba <_malloc_r+0x3f6>
    a9d4:	4582      	cmp	sl, r0
    a9d6:	f200 80ee 	bhi.w	abb6 <_malloc_r+0x3f2>
    a9da:	4b3a      	ldr	r3, [pc, #232]	; (aac4 <_malloc_r+0x300>)
    a9dc:	6819      	ldr	r1, [r3, #0]
    a9de:	4441      	add	r1, r8
    a9e0:	6019      	str	r1, [r3, #0]
    a9e2:	4608      	mov	r0, r1
    a9e4:	f000 814e 	beq.w	ac84 <_malloc_r+0x4c0>
    a9e8:	f8db 1000 	ldr.w	r1, [fp]
    a9ec:	9301      	str	r3, [sp, #4]
    a9ee:	3101      	adds	r1, #1
    a9f0:	bf1b      	ittet	ne
    a9f2:	eba2 010a 	subne.w	r1, r2, sl
    a9f6:	1809      	addne	r1, r1, r0
    a9f8:	f8cb 2000 	streq.w	r2, [fp]
    a9fc:	6019      	strne	r1, [r3, #0]
    a9fe:	f012 0b07 	ands.w	fp, r2, #7
    aa02:	f000 8117 	beq.w	ac34 <_malloc_r+0x470>
    aa06:	f1cb 0108 	rsb	r1, fp, #8
    aa0a:	440a      	add	r2, r1
    aa0c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    aa10:	4490      	add	r8, r2
    aa12:	3108      	adds	r1, #8
    aa14:	eba1 0108 	sub.w	r1, r1, r8
    aa18:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    aa1c:	4651      	mov	r1, sl
    aa1e:	4620      	mov	r0, r4
    aa20:	9200      	str	r2, [sp, #0]
    aa22:	f000 fff5 	bl	ba10 <_sbrk_r>
    aa26:	1c42      	adds	r2, r0, #1
    aa28:	e9dd 2300 	ldrd	r2, r3, [sp]
    aa2c:	f000 814f 	beq.w	acce <_malloc_r+0x50a>
    aa30:	1a80      	subs	r0, r0, r2
    aa32:	eb00 080a 	add.w	r8, r0, sl
    aa36:	6819      	ldr	r1, [r3, #0]
    aa38:	60ba      	str	r2, [r7, #8]
    aa3a:	f048 0001 	orr.w	r0, r8, #1
    aa3e:	4451      	add	r1, sl
    aa40:	42bd      	cmp	r5, r7
    aa42:	6050      	str	r0, [r2, #4]
    aa44:	6019      	str	r1, [r3, #0]
    aa46:	f000 8129 	beq.w	ac9c <_malloc_r+0x4d8>
    aa4a:	f1b9 0f0f 	cmp.w	r9, #15
    aa4e:	f240 8127 	bls.w	aca0 <_malloc_r+0x4dc>
    aa52:	6868      	ldr	r0, [r5, #4]
    aa54:	f1a9 0c0c 	sub.w	ip, r9, #12
    aa58:	f02c 0c07 	bic.w	ip, ip, #7
    aa5c:	f000 0001 	and.w	r0, r0, #1
    aa60:	ea40 000c 	orr.w	r0, r0, ip
    aa64:	6068      	str	r0, [r5, #4]
    aa66:	f04f 0e05 	mov.w	lr, #5
    aa6a:	eb05 000c 	add.w	r0, r5, ip
    aa6e:	f1bc 0f0f 	cmp.w	ip, #15
    aa72:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    aa76:	f200 8132 	bhi.w	acde <_malloc_r+0x51a>
    aa7a:	6850      	ldr	r0, [r2, #4]
    aa7c:	4615      	mov	r5, r2
    aa7e:	4b12      	ldr	r3, [pc, #72]	; (aac8 <_malloc_r+0x304>)
    aa80:	681a      	ldr	r2, [r3, #0]
    aa82:	428a      	cmp	r2, r1
    aa84:	bf38      	it	cc
    aa86:	6019      	strcc	r1, [r3, #0]
    aa88:	4b10      	ldr	r3, [pc, #64]	; (aacc <_malloc_r+0x308>)
    aa8a:	681a      	ldr	r2, [r3, #0]
    aa8c:	428a      	cmp	r2, r1
    aa8e:	bf38      	it	cc
    aa90:	6019      	strcc	r1, [r3, #0]
    aa92:	e094      	b.n	abbe <_malloc_r+0x3fa>
    aa94:	19aa      	adds	r2, r5, r6
    aa96:	f043 0301 	orr.w	r3, r3, #1
    aa9a:	f046 0601 	orr.w	r6, r6, #1
    aa9e:	606e      	str	r6, [r5, #4]
    aaa0:	4620      	mov	r0, r4
    aaa2:	60ba      	str	r2, [r7, #8]
    aaa4:	6053      	str	r3, [r2, #4]
    aaa6:	f000 f943 	bl	ad30 <__malloc_unlock>
    aaaa:	3508      	adds	r5, #8
    aaac:	4628      	mov	r0, r5
    aaae:	b003      	add	sp, #12
    aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aab4:	68d9      	ldr	r1, [r3, #12]
    aab6:	441a      	add	r2, r3
    aab8:	e6a1      	b.n	a7fe <_malloc_r+0x3a>
    aaba:	bf00      	nop
    aabc:	20004508 	.word	0x20004508
    aac0:	20005288 	.word	0x20005288
    aac4:	20005258 	.word	0x20005258
    aac8:	20005280 	.word	0x20005280
    aacc:	20005284 	.word	0x20005284
    aad0:	20004510 	.word	0x20004510
    aad4:	20004910 	.word	0x20004910
    aad8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    aadc:	ea4f 2352 	mov.w	r3, r2, lsr #9
    aae0:	d363      	bcc.n	abaa <_malloc_r+0x3e6>
    aae2:	2b14      	cmp	r3, #20
    aae4:	f200 80b7 	bhi.w	ac56 <_malloc_r+0x492>
    aae8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    aaec:	00c9      	lsls	r1, r1, #3
    aaee:	335b      	adds	r3, #91	; 0x5b
    aaf0:	eb07 0e01 	add.w	lr, r7, r1
    aaf4:	5879      	ldr	r1, [r7, r1]
    aaf6:	f1ae 0e08 	sub.w	lr, lr, #8
    aafa:	458e      	cmp	lr, r1
    aafc:	f000 8091 	beq.w	ac22 <_malloc_r+0x45e>
    ab00:	684b      	ldr	r3, [r1, #4]
    ab02:	f023 0303 	bic.w	r3, r3, #3
    ab06:	4293      	cmp	r3, r2
    ab08:	d902      	bls.n	ab10 <_malloc_r+0x34c>
    ab0a:	6889      	ldr	r1, [r1, #8]
    ab0c:	458e      	cmp	lr, r1
    ab0e:	d1f7      	bne.n	ab00 <_malloc_r+0x33c>
    ab10:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    ab14:	687a      	ldr	r2, [r7, #4]
    ab16:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    ab1a:	f8ce 5008 	str.w	r5, [lr, #8]
    ab1e:	60cd      	str	r5, [r1, #12]
    ab20:	e6d6      	b.n	a8d0 <_malloc_r+0x10c>
    ab22:	2b14      	cmp	r3, #20
    ab24:	d959      	bls.n	abda <_malloc_r+0x416>
    ab26:	2b54      	cmp	r3, #84	; 0x54
    ab28:	f200 809d 	bhi.w	ac66 <_malloc_r+0x4a2>
    ab2c:	0b33      	lsrs	r3, r6, #12
    ab2e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ab32:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    ab36:	00c3      	lsls	r3, r0, #3
    ab38:	e68a      	b.n	a850 <_malloc_r+0x8c>
    ab3a:	f10e 0e01 	add.w	lr, lr, #1
    ab3e:	f01e 0f03 	tst.w	lr, #3
    ab42:	f105 0508 	add.w	r5, r5, #8
    ab46:	f47f aed5 	bne.w	a8f4 <_malloc_r+0x130>
    ab4a:	e051      	b.n	abf0 <_malloc_r+0x42c>
    ab4c:	4442      	add	r2, r8
    ab4e:	4645      	mov	r5, r8
    ab50:	6853      	ldr	r3, [r2, #4]
    ab52:	f8d8 100c 	ldr.w	r1, [r8, #12]
    ab56:	f043 0301 	orr.w	r3, r3, #1
    ab5a:	6053      	str	r3, [r2, #4]
    ab5c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    ab60:	4620      	mov	r0, r4
    ab62:	60d9      	str	r1, [r3, #12]
    ab64:	608b      	str	r3, [r1, #8]
    ab66:	f000 f8e3 	bl	ad30 <__malloc_unlock>
    ab6a:	e6f3      	b.n	a954 <_malloc_r+0x190>
    ab6c:	08f0      	lsrs	r0, r6, #3
    ab6e:	f106 0208 	add.w	r2, r6, #8
    ab72:	e637      	b.n	a7e4 <_malloc_r+0x20>
    ab74:	442a      	add	r2, r5
    ab76:	4620      	mov	r0, r4
    ab78:	6853      	ldr	r3, [r2, #4]
    ab7a:	f043 0301 	orr.w	r3, r3, #1
    ab7e:	6053      	str	r3, [r2, #4]
    ab80:	3508      	adds	r5, #8
    ab82:	f000 f8d5 	bl	ad30 <__malloc_unlock>
    ab86:	e6e5      	b.n	a954 <_malloc_r+0x190>
    ab88:	19a9      	adds	r1, r5, r6
    ab8a:	4620      	mov	r0, r4
    ab8c:	f046 0601 	orr.w	r6, r6, #1
    ab90:	f043 0401 	orr.w	r4, r3, #1
    ab94:	606e      	str	r6, [r5, #4]
    ab96:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ab9a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    ab9e:	604c      	str	r4, [r1, #4]
    aba0:	50ab      	str	r3, [r5, r2]
    aba2:	f000 f8c5 	bl	ad30 <__malloc_unlock>
    aba6:	3508      	adds	r5, #8
    aba8:	e6d4      	b.n	a954 <_malloc_r+0x190>
    abaa:	0993      	lsrs	r3, r2, #6
    abac:	f103 0139 	add.w	r1, r3, #57	; 0x39
    abb0:	00c9      	lsls	r1, r1, #3
    abb2:	3338      	adds	r3, #56	; 0x38
    abb4:	e79c      	b.n	aaf0 <_malloc_r+0x32c>
    abb6:	42bd      	cmp	r5, r7
    abb8:	d05f      	beq.n	ac7a <_malloc_r+0x4b6>
    abba:	68bd      	ldr	r5, [r7, #8]
    abbc:	6868      	ldr	r0, [r5, #4]
    abbe:	f020 0803 	bic.w	r8, r0, #3
    abc2:	4546      	cmp	r6, r8
    abc4:	eba8 0306 	sub.w	r3, r8, r6
    abc8:	d802      	bhi.n	abd0 <_malloc_r+0x40c>
    abca:	2b0f      	cmp	r3, #15
    abcc:	f73f af62 	bgt.w	aa94 <_malloc_r+0x2d0>
    abd0:	4620      	mov	r0, r4
    abd2:	f000 f8ad 	bl	ad30 <__malloc_unlock>
    abd6:	2500      	movs	r5, #0
    abd8:	e6bc      	b.n	a954 <_malloc_r+0x190>
    abda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    abde:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    abe2:	00c3      	lsls	r3, r0, #3
    abe4:	e634      	b.n	a850 <_malloc_r+0x8c>
    abe6:	f859 3908 	ldr.w	r3, [r9], #-8
    abea:	454b      	cmp	r3, r9
    abec:	f040 8096 	bne.w	ad1c <_malloc_r+0x558>
    abf0:	f010 0f03 	tst.w	r0, #3
    abf4:	f100 30ff 	add.w	r0, r0, #4294967295
    abf8:	d1f5      	bne.n	abe6 <_malloc_r+0x422>
    abfa:	687b      	ldr	r3, [r7, #4]
    abfc:	ea23 0301 	bic.w	r3, r3, r1
    ac00:	607b      	str	r3, [r7, #4]
    ac02:	0049      	lsls	r1, r1, #1
    ac04:	4299      	cmp	r1, r3
    ac06:	f63f aec0 	bhi.w	a98a <_malloc_r+0x1c6>
    ac0a:	b919      	cbnz	r1, ac14 <_malloc_r+0x450>
    ac0c:	e6bd      	b.n	a98a <_malloc_r+0x1c6>
    ac0e:	0049      	lsls	r1, r1, #1
    ac10:	f10e 0e04 	add.w	lr, lr, #4
    ac14:	4219      	tst	r1, r3
    ac16:	d0fa      	beq.n	ac0e <_malloc_r+0x44a>
    ac18:	4670      	mov	r0, lr
    ac1a:	e667      	b.n	a8ec <_malloc_r+0x128>
    ac1c:	f103 0810 	add.w	r8, r3, #16
    ac20:	e6d0      	b.n	a9c4 <_malloc_r+0x200>
    ac22:	109a      	asrs	r2, r3, #2
    ac24:	f04f 0801 	mov.w	r8, #1
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	fa08 f202 	lsl.w	r2, r8, r2
    ac2e:	431a      	orrs	r2, r3
    ac30:	607a      	str	r2, [r7, #4]
    ac32:	e770      	b.n	ab16 <_malloc_r+0x352>
    ac34:	eb02 0108 	add.w	r1, r2, r8
    ac38:	4249      	negs	r1, r1
    ac3a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ac3e:	4651      	mov	r1, sl
    ac40:	4620      	mov	r0, r4
    ac42:	9200      	str	r2, [sp, #0]
    ac44:	f000 fee4 	bl	ba10 <_sbrk_r>
    ac48:	1c43      	adds	r3, r0, #1
    ac4a:	e9dd 2300 	ldrd	r2, r3, [sp]
    ac4e:	f47f aeef 	bne.w	aa30 <_malloc_r+0x26c>
    ac52:	46da      	mov	sl, fp
    ac54:	e6ef      	b.n	aa36 <_malloc_r+0x272>
    ac56:	2b54      	cmp	r3, #84	; 0x54
    ac58:	d825      	bhi.n	aca6 <_malloc_r+0x4e2>
    ac5a:	0b13      	lsrs	r3, r2, #12
    ac5c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    ac60:	00c9      	lsls	r1, r1, #3
    ac62:	336e      	adds	r3, #110	; 0x6e
    ac64:	e744      	b.n	aaf0 <_malloc_r+0x32c>
    ac66:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ac6a:	d825      	bhi.n	acb8 <_malloc_r+0x4f4>
    ac6c:	0bf3      	lsrs	r3, r6, #15
    ac6e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ac72:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    ac76:	00c3      	lsls	r3, r0, #3
    ac78:	e5ea      	b.n	a850 <_malloc_r+0x8c>
    ac7a:	4b29      	ldr	r3, [pc, #164]	; (ad20 <_malloc_r+0x55c>)
    ac7c:	6818      	ldr	r0, [r3, #0]
    ac7e:	4440      	add	r0, r8
    ac80:	6018      	str	r0, [r3, #0]
    ac82:	e6b1      	b.n	a9e8 <_malloc_r+0x224>
    ac84:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    ac88:	f1bc 0f00 	cmp.w	ip, #0
    ac8c:	f47f aeac 	bne.w	a9e8 <_malloc_r+0x224>
    ac90:	68bd      	ldr	r5, [r7, #8]
    ac92:	44c8      	add	r8, r9
    ac94:	f048 0001 	orr.w	r0, r8, #1
    ac98:	6068      	str	r0, [r5, #4]
    ac9a:	e6f0      	b.n	aa7e <_malloc_r+0x2ba>
    ac9c:	4615      	mov	r5, r2
    ac9e:	e6ee      	b.n	aa7e <_malloc_r+0x2ba>
    aca0:	2301      	movs	r3, #1
    aca2:	6053      	str	r3, [r2, #4]
    aca4:	e794      	b.n	abd0 <_malloc_r+0x40c>
    aca6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    acaa:	d823      	bhi.n	acf4 <_malloc_r+0x530>
    acac:	0bd3      	lsrs	r3, r2, #15
    acae:	f103 0178 	add.w	r1, r3, #120	; 0x78
    acb2:	00c9      	lsls	r1, r1, #3
    acb4:	3377      	adds	r3, #119	; 0x77
    acb6:	e71b      	b.n	aaf0 <_malloc_r+0x32c>
    acb8:	f240 5254 	movw	r2, #1364	; 0x554
    acbc:	4293      	cmp	r3, r2
    acbe:	d823      	bhi.n	ad08 <_malloc_r+0x544>
    acc0:	0cb3      	lsrs	r3, r6, #18
    acc2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    acc6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    acca:	00c3      	lsls	r3, r0, #3
    accc:	e5c0      	b.n	a850 <_malloc_r+0x8c>
    acce:	f1ab 0b08 	sub.w	fp, fp, #8
    acd2:	44d8      	add	r8, fp
    acd4:	eba8 0802 	sub.w	r8, r8, r2
    acd8:	f04f 0a00 	mov.w	sl, #0
    acdc:	e6ab      	b.n	aa36 <_malloc_r+0x272>
    acde:	f105 0108 	add.w	r1, r5, #8
    ace2:	4620      	mov	r0, r4
    ace4:	9300      	str	r3, [sp, #0]
    ace6:	f001 f9cd 	bl	c084 <_free_r>
    acea:	68bd      	ldr	r5, [r7, #8]
    acec:	9b00      	ldr	r3, [sp, #0]
    acee:	6868      	ldr	r0, [r5, #4]
    acf0:	6819      	ldr	r1, [r3, #0]
    acf2:	e6c4      	b.n	aa7e <_malloc_r+0x2ba>
    acf4:	f240 5154 	movw	r1, #1364	; 0x554
    acf8:	428b      	cmp	r3, r1
    acfa:	d80b      	bhi.n	ad14 <_malloc_r+0x550>
    acfc:	0c93      	lsrs	r3, r2, #18
    acfe:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    ad02:	00c9      	lsls	r1, r1, #3
    ad04:	337c      	adds	r3, #124	; 0x7c
    ad06:	e6f3      	b.n	aaf0 <_malloc_r+0x32c>
    ad08:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    ad0c:	207f      	movs	r0, #127	; 0x7f
    ad0e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    ad12:	e59d      	b.n	a850 <_malloc_r+0x8c>
    ad14:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    ad18:	237e      	movs	r3, #126	; 0x7e
    ad1a:	e6e9      	b.n	aaf0 <_malloc_r+0x32c>
    ad1c:	687b      	ldr	r3, [r7, #4]
    ad1e:	e770      	b.n	ac02 <_malloc_r+0x43e>
    ad20:	20005258 	.word	0x20005258

0000ad24 <__malloc_lock>:
    ad24:	4801      	ldr	r0, [pc, #4]	; (ad2c <__malloc_lock+0x8>)
    ad26:	f000 bec9 	b.w	babc <__retarget_lock_acquire_recursive>
    ad2a:	bf00      	nop
    ad2c:	20005250 	.word	0x20005250

0000ad30 <__malloc_unlock>:
    ad30:	4801      	ldr	r0, [pc, #4]	; (ad38 <__malloc_unlock+0x8>)
    ad32:	f000 bec5 	b.w	bac0 <__retarget_lock_release_recursive>
    ad36:	bf00      	nop
    ad38:	20005250 	.word	0x20005250

0000ad3c <realloc>:
    ad3c:	b410      	push	{r4}
    ad3e:	4c04      	ldr	r4, [pc, #16]	; (ad50 <realloc+0x14>)
    ad40:	4603      	mov	r3, r0
    ad42:	460a      	mov	r2, r1
    ad44:	6820      	ldr	r0, [r4, #0]
    ad46:	f85d 4b04 	ldr.w	r4, [sp], #4
    ad4a:	4619      	mov	r1, r3
    ad4c:	f000 b802 	b.w	ad54 <_realloc_r>
    ad50:	20004924 	.word	0x20004924

0000ad54 <_realloc_r>:
    ad54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad58:	4617      	mov	r7, r2
    ad5a:	2900      	cmp	r1, #0
    ad5c:	f000 8098 	beq.w	ae90 <_realloc_r+0x13c>
    ad60:	460c      	mov	r4, r1
    ad62:	f107 050b 	add.w	r5, r7, #11
    ad66:	4680      	mov	r8, r0
    ad68:	f7ff ffdc 	bl	ad24 <__malloc_lock>
    ad6c:	2d16      	cmp	r5, #22
    ad6e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    ad72:	d85b      	bhi.n	ae2c <_realloc_r+0xd8>
    ad74:	2510      	movs	r5, #16
    ad76:	462a      	mov	r2, r5
    ad78:	42af      	cmp	r7, r5
    ad7a:	d85c      	bhi.n	ae36 <_realloc_r+0xe2>
    ad7c:	f021 0603 	bic.w	r6, r1, #3
    ad80:	4296      	cmp	r6, r2
    ad82:	f1a4 0908 	sub.w	r9, r4, #8
    ad86:	da62      	bge.n	ae4e <_realloc_r+0xfa>
    ad88:	4bbc      	ldr	r3, [pc, #752]	; (b07c <_realloc_r+0x328>)
    ad8a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    ad8e:	eb09 0006 	add.w	r0, r9, r6
    ad92:	4584      	cmp	ip, r0
    ad94:	f000 8097 	beq.w	aec6 <_realloc_r+0x172>
    ad98:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ad9c:	f02c 0301 	bic.w	r3, ip, #1
    ada0:	4403      	add	r3, r0
    ada2:	685b      	ldr	r3, [r3, #4]
    ada4:	07db      	lsls	r3, r3, #31
    ada6:	d468      	bmi.n	ae7a <_realloc_r+0x126>
    ada8:	f02c 0c03 	bic.w	ip, ip, #3
    adac:	eb06 030c 	add.w	r3, r6, ip
    adb0:	4293      	cmp	r3, r2
    adb2:	da47      	bge.n	ae44 <_realloc_r+0xf0>
    adb4:	07cb      	lsls	r3, r1, #31
    adb6:	d410      	bmi.n	adda <_realloc_r+0x86>
    adb8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    adbc:	eba9 0a03 	sub.w	sl, r9, r3
    adc0:	f8da 3004 	ldr.w	r3, [sl, #4]
    adc4:	f023 0103 	bic.w	r1, r3, #3
    adc8:	448c      	add	ip, r1
    adca:	44b4      	add	ip, r6
    adcc:	4594      	cmp	ip, r2
    adce:	f280 8111 	bge.w	aff4 <_realloc_r+0x2a0>
    add2:	1873      	adds	r3, r6, r1
    add4:	4293      	cmp	r3, r2
    add6:	f280 80e8 	bge.w	afaa <_realloc_r+0x256>
    adda:	4639      	mov	r1, r7
    addc:	4640      	mov	r0, r8
    adde:	f7ff fcf1 	bl	a7c4 <_malloc_r>
    ade2:	4607      	mov	r7, r0
    ade4:	b1e0      	cbz	r0, ae20 <_realloc_r+0xcc>
    ade6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    adea:	f023 0301 	bic.w	r3, r3, #1
    adee:	444b      	add	r3, r9
    adf0:	f1a0 0208 	sub.w	r2, r0, #8
    adf4:	4293      	cmp	r3, r2
    adf6:	f000 80d2 	beq.w	af9e <_realloc_r+0x24a>
    adfa:	1f32      	subs	r2, r6, #4
    adfc:	2a24      	cmp	r2, #36	; 0x24
    adfe:	f200 80f5 	bhi.w	afec <_realloc_r+0x298>
    ae02:	2a13      	cmp	r2, #19
    ae04:	f200 80ac 	bhi.w	af60 <_realloc_r+0x20c>
    ae08:	4603      	mov	r3, r0
    ae0a:	4622      	mov	r2, r4
    ae0c:	6811      	ldr	r1, [r2, #0]
    ae0e:	6019      	str	r1, [r3, #0]
    ae10:	6851      	ldr	r1, [r2, #4]
    ae12:	6059      	str	r1, [r3, #4]
    ae14:	6892      	ldr	r2, [r2, #8]
    ae16:	609a      	str	r2, [r3, #8]
    ae18:	4621      	mov	r1, r4
    ae1a:	4640      	mov	r0, r8
    ae1c:	f001 f932 	bl	c084 <_free_r>
    ae20:	4640      	mov	r0, r8
    ae22:	f7ff ff85 	bl	ad30 <__malloc_unlock>
    ae26:	4638      	mov	r0, r7
    ae28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae2c:	f025 0507 	bic.w	r5, r5, #7
    ae30:	2d00      	cmp	r5, #0
    ae32:	462a      	mov	r2, r5
    ae34:	daa0      	bge.n	ad78 <_realloc_r+0x24>
    ae36:	230c      	movs	r3, #12
    ae38:	f8c8 3000 	str.w	r3, [r8]
    ae3c:	2700      	movs	r7, #0
    ae3e:	4638      	mov	r0, r7
    ae40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae44:	461e      	mov	r6, r3
    ae46:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    ae4a:	60d3      	str	r3, [r2, #12]
    ae4c:	609a      	str	r2, [r3, #8]
    ae4e:	1b73      	subs	r3, r6, r5
    ae50:	2b0f      	cmp	r3, #15
    ae52:	d822      	bhi.n	ae9a <_realloc_r+0x146>
    ae54:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ae58:	f003 0301 	and.w	r3, r3, #1
    ae5c:	4333      	orrs	r3, r6
    ae5e:	444e      	add	r6, r9
    ae60:	f8c9 3004 	str.w	r3, [r9, #4]
    ae64:	6873      	ldr	r3, [r6, #4]
    ae66:	f043 0301 	orr.w	r3, r3, #1
    ae6a:	6073      	str	r3, [r6, #4]
    ae6c:	4640      	mov	r0, r8
    ae6e:	4627      	mov	r7, r4
    ae70:	f7ff ff5e 	bl	ad30 <__malloc_unlock>
    ae74:	4638      	mov	r0, r7
    ae76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae7a:	07c9      	lsls	r1, r1, #31
    ae7c:	d4ad      	bmi.n	adda <_realloc_r+0x86>
    ae7e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ae82:	eba9 0a03 	sub.w	sl, r9, r3
    ae86:	f8da 1004 	ldr.w	r1, [sl, #4]
    ae8a:	f021 0103 	bic.w	r1, r1, #3
    ae8e:	e7a0      	b.n	add2 <_realloc_r+0x7e>
    ae90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae94:	4611      	mov	r1, r2
    ae96:	f7ff bc95 	b.w	a7c4 <_malloc_r>
    ae9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ae9e:	eb09 0105 	add.w	r1, r9, r5
    aea2:	f002 0201 	and.w	r2, r2, #1
    aea6:	444e      	add	r6, r9
    aea8:	f043 0301 	orr.w	r3, r3, #1
    aeac:	432a      	orrs	r2, r5
    aeae:	f8c9 2004 	str.w	r2, [r9, #4]
    aeb2:	604b      	str	r3, [r1, #4]
    aeb4:	6873      	ldr	r3, [r6, #4]
    aeb6:	f043 0301 	orr.w	r3, r3, #1
    aeba:	3108      	adds	r1, #8
    aebc:	6073      	str	r3, [r6, #4]
    aebe:	4640      	mov	r0, r8
    aec0:	f001 f8e0 	bl	c084 <_free_r>
    aec4:	e7d2      	b.n	ae6c <_realloc_r+0x118>
    aec6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    aeca:	f020 0b03 	bic.w	fp, r0, #3
    aece:	eb06 0c0b 	add.w	ip, r6, fp
    aed2:	f105 0010 	add.w	r0, r5, #16
    aed6:	4584      	cmp	ip, r0
    aed8:	da4d      	bge.n	af76 <_realloc_r+0x222>
    aeda:	07c9      	lsls	r1, r1, #31
    aedc:	f53f af7d 	bmi.w	adda <_realloc_r+0x86>
    aee0:	f854 1c08 	ldr.w	r1, [r4, #-8]
    aee4:	eba9 0a01 	sub.w	sl, r9, r1
    aee8:	f8da 1004 	ldr.w	r1, [sl, #4]
    aeec:	f021 0103 	bic.w	r1, r1, #3
    aef0:	448b      	add	fp, r1
    aef2:	44b3      	add	fp, r6
    aef4:	4558      	cmp	r0, fp
    aef6:	f73f af6c 	bgt.w	add2 <_realloc_r+0x7e>
    aefa:	4657      	mov	r7, sl
    aefc:	f8da 100c 	ldr.w	r1, [sl, #12]
    af00:	f857 0f08 	ldr.w	r0, [r7, #8]!
    af04:	1f32      	subs	r2, r6, #4
    af06:	2a24      	cmp	r2, #36	; 0x24
    af08:	60c1      	str	r1, [r0, #12]
    af0a:	6088      	str	r0, [r1, #8]
    af0c:	f200 80db 	bhi.w	b0c6 <_realloc_r+0x372>
    af10:	2a13      	cmp	r2, #19
    af12:	f240 80d6 	bls.w	b0c2 <_realloc_r+0x36e>
    af16:	6821      	ldr	r1, [r4, #0]
    af18:	f8ca 1008 	str.w	r1, [sl, #8]
    af1c:	6861      	ldr	r1, [r4, #4]
    af1e:	f8ca 100c 	str.w	r1, [sl, #12]
    af22:	2a1b      	cmp	r2, #27
    af24:	f200 80df 	bhi.w	b0e6 <_realloc_r+0x392>
    af28:	3408      	adds	r4, #8
    af2a:	f10a 0210 	add.w	r2, sl, #16
    af2e:	6821      	ldr	r1, [r4, #0]
    af30:	6011      	str	r1, [r2, #0]
    af32:	6861      	ldr	r1, [r4, #4]
    af34:	6051      	str	r1, [r2, #4]
    af36:	68a1      	ldr	r1, [r4, #8]
    af38:	6091      	str	r1, [r2, #8]
    af3a:	eb0a 0105 	add.w	r1, sl, r5
    af3e:	ebab 0205 	sub.w	r2, fp, r5
    af42:	f042 0201 	orr.w	r2, r2, #1
    af46:	6099      	str	r1, [r3, #8]
    af48:	604a      	str	r2, [r1, #4]
    af4a:	f8da 3004 	ldr.w	r3, [sl, #4]
    af4e:	f003 0301 	and.w	r3, r3, #1
    af52:	432b      	orrs	r3, r5
    af54:	4640      	mov	r0, r8
    af56:	f8ca 3004 	str.w	r3, [sl, #4]
    af5a:	f7ff fee9 	bl	ad30 <__malloc_unlock>
    af5e:	e76e      	b.n	ae3e <_realloc_r+0xea>
    af60:	6823      	ldr	r3, [r4, #0]
    af62:	6003      	str	r3, [r0, #0]
    af64:	6863      	ldr	r3, [r4, #4]
    af66:	6043      	str	r3, [r0, #4]
    af68:	2a1b      	cmp	r2, #27
    af6a:	d868      	bhi.n	b03e <_realloc_r+0x2ea>
    af6c:	f104 0208 	add.w	r2, r4, #8
    af70:	f100 0308 	add.w	r3, r0, #8
    af74:	e74a      	b.n	ae0c <_realloc_r+0xb8>
    af76:	eb09 0205 	add.w	r2, r9, r5
    af7a:	609a      	str	r2, [r3, #8]
    af7c:	ebac 0305 	sub.w	r3, ip, r5
    af80:	f043 0301 	orr.w	r3, r3, #1
    af84:	6053      	str	r3, [r2, #4]
    af86:	f854 3c04 	ldr.w	r3, [r4, #-4]
    af8a:	f003 0301 	and.w	r3, r3, #1
    af8e:	432b      	orrs	r3, r5
    af90:	4640      	mov	r0, r8
    af92:	f844 3c04 	str.w	r3, [r4, #-4]
    af96:	f7ff fecb 	bl	ad30 <__malloc_unlock>
    af9a:	4627      	mov	r7, r4
    af9c:	e74f      	b.n	ae3e <_realloc_r+0xea>
    af9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    afa2:	f023 0303 	bic.w	r3, r3, #3
    afa6:	441e      	add	r6, r3
    afa8:	e751      	b.n	ae4e <_realloc_r+0xfa>
    afaa:	4657      	mov	r7, sl
    afac:	f8da 100c 	ldr.w	r1, [sl, #12]
    afb0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    afb4:	1f32      	subs	r2, r6, #4
    afb6:	2a24      	cmp	r2, #36	; 0x24
    afb8:	60c1      	str	r1, [r0, #12]
    afba:	6088      	str	r0, [r1, #8]
    afbc:	d84c      	bhi.n	b058 <_realloc_r+0x304>
    afbe:	2a13      	cmp	r2, #19
    afc0:	d948      	bls.n	b054 <_realloc_r+0x300>
    afc2:	6821      	ldr	r1, [r4, #0]
    afc4:	f8ca 1008 	str.w	r1, [sl, #8]
    afc8:	6861      	ldr	r1, [r4, #4]
    afca:	f8ca 100c 	str.w	r1, [sl, #12]
    afce:	2a1b      	cmp	r2, #27
    afd0:	d856      	bhi.n	b080 <_realloc_r+0x32c>
    afd2:	3408      	adds	r4, #8
    afd4:	f10a 0210 	add.w	r2, sl, #16
    afd8:	461e      	mov	r6, r3
    afda:	6823      	ldr	r3, [r4, #0]
    afdc:	6013      	str	r3, [r2, #0]
    afde:	6863      	ldr	r3, [r4, #4]
    afe0:	6053      	str	r3, [r2, #4]
    afe2:	68a3      	ldr	r3, [r4, #8]
    afe4:	6093      	str	r3, [r2, #8]
    afe6:	46d1      	mov	r9, sl
    afe8:	463c      	mov	r4, r7
    afea:	e730      	b.n	ae4e <_realloc_r+0xfa>
    afec:	4621      	mov	r1, r4
    afee:	f000 fb65 	bl	b6bc <memmove>
    aff2:	e711      	b.n	ae18 <_realloc_r+0xc4>
    aff4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    aff8:	4657      	mov	r7, sl
    affa:	60cb      	str	r3, [r1, #12]
    affc:	6099      	str	r1, [r3, #8]
    affe:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b002:	f8da 300c 	ldr.w	r3, [sl, #12]
    b006:	60cb      	str	r3, [r1, #12]
    b008:	1f32      	subs	r2, r6, #4
    b00a:	2a24      	cmp	r2, #36	; 0x24
    b00c:	6099      	str	r1, [r3, #8]
    b00e:	d82d      	bhi.n	b06c <_realloc_r+0x318>
    b010:	2a13      	cmp	r2, #19
    b012:	d929      	bls.n	b068 <_realloc_r+0x314>
    b014:	6823      	ldr	r3, [r4, #0]
    b016:	f8ca 3008 	str.w	r3, [sl, #8]
    b01a:	6863      	ldr	r3, [r4, #4]
    b01c:	f8ca 300c 	str.w	r3, [sl, #12]
    b020:	2a1b      	cmp	r2, #27
    b022:	d842      	bhi.n	b0aa <_realloc_r+0x356>
    b024:	3408      	adds	r4, #8
    b026:	f10a 0310 	add.w	r3, sl, #16
    b02a:	6822      	ldr	r2, [r4, #0]
    b02c:	601a      	str	r2, [r3, #0]
    b02e:	6862      	ldr	r2, [r4, #4]
    b030:	605a      	str	r2, [r3, #4]
    b032:	68a2      	ldr	r2, [r4, #8]
    b034:	609a      	str	r2, [r3, #8]
    b036:	4666      	mov	r6, ip
    b038:	46d1      	mov	r9, sl
    b03a:	463c      	mov	r4, r7
    b03c:	e707      	b.n	ae4e <_realloc_r+0xfa>
    b03e:	68a3      	ldr	r3, [r4, #8]
    b040:	6083      	str	r3, [r0, #8]
    b042:	68e3      	ldr	r3, [r4, #12]
    b044:	60c3      	str	r3, [r0, #12]
    b046:	2a24      	cmp	r2, #36	; 0x24
    b048:	d026      	beq.n	b098 <_realloc_r+0x344>
    b04a:	f104 0210 	add.w	r2, r4, #16
    b04e:	f100 0310 	add.w	r3, r0, #16
    b052:	e6db      	b.n	ae0c <_realloc_r+0xb8>
    b054:	463a      	mov	r2, r7
    b056:	e7bf      	b.n	afd8 <_realloc_r+0x284>
    b058:	4621      	mov	r1, r4
    b05a:	4638      	mov	r0, r7
    b05c:	461e      	mov	r6, r3
    b05e:	46d1      	mov	r9, sl
    b060:	f000 fb2c 	bl	b6bc <memmove>
    b064:	463c      	mov	r4, r7
    b066:	e6f2      	b.n	ae4e <_realloc_r+0xfa>
    b068:	463b      	mov	r3, r7
    b06a:	e7de      	b.n	b02a <_realloc_r+0x2d6>
    b06c:	4621      	mov	r1, r4
    b06e:	4638      	mov	r0, r7
    b070:	4666      	mov	r6, ip
    b072:	46d1      	mov	r9, sl
    b074:	f000 fb22 	bl	b6bc <memmove>
    b078:	463c      	mov	r4, r7
    b07a:	e6e8      	b.n	ae4e <_realloc_r+0xfa>
    b07c:	20004508 	.word	0x20004508
    b080:	68a1      	ldr	r1, [r4, #8]
    b082:	f8ca 1010 	str.w	r1, [sl, #16]
    b086:	68e1      	ldr	r1, [r4, #12]
    b088:	f8ca 1014 	str.w	r1, [sl, #20]
    b08c:	2a24      	cmp	r2, #36	; 0x24
    b08e:	d020      	beq.n	b0d2 <_realloc_r+0x37e>
    b090:	3410      	adds	r4, #16
    b092:	f10a 0218 	add.w	r2, sl, #24
    b096:	e79f      	b.n	afd8 <_realloc_r+0x284>
    b098:	6923      	ldr	r3, [r4, #16]
    b09a:	6103      	str	r3, [r0, #16]
    b09c:	6961      	ldr	r1, [r4, #20]
    b09e:	6141      	str	r1, [r0, #20]
    b0a0:	f104 0218 	add.w	r2, r4, #24
    b0a4:	f100 0318 	add.w	r3, r0, #24
    b0a8:	e6b0      	b.n	ae0c <_realloc_r+0xb8>
    b0aa:	68a3      	ldr	r3, [r4, #8]
    b0ac:	f8ca 3010 	str.w	r3, [sl, #16]
    b0b0:	68e3      	ldr	r3, [r4, #12]
    b0b2:	f8ca 3014 	str.w	r3, [sl, #20]
    b0b6:	2a24      	cmp	r2, #36	; 0x24
    b0b8:	d021      	beq.n	b0fe <_realloc_r+0x3aa>
    b0ba:	3410      	adds	r4, #16
    b0bc:	f10a 0318 	add.w	r3, sl, #24
    b0c0:	e7b3      	b.n	b02a <_realloc_r+0x2d6>
    b0c2:	463a      	mov	r2, r7
    b0c4:	e733      	b.n	af2e <_realloc_r+0x1da>
    b0c6:	4621      	mov	r1, r4
    b0c8:	4638      	mov	r0, r7
    b0ca:	f000 faf7 	bl	b6bc <memmove>
    b0ce:	4b16      	ldr	r3, [pc, #88]	; (b128 <_realloc_r+0x3d4>)
    b0d0:	e733      	b.n	af3a <_realloc_r+0x1e6>
    b0d2:	6922      	ldr	r2, [r4, #16]
    b0d4:	f8ca 2018 	str.w	r2, [sl, #24]
    b0d8:	6962      	ldr	r2, [r4, #20]
    b0da:	f8ca 201c 	str.w	r2, [sl, #28]
    b0de:	3418      	adds	r4, #24
    b0e0:	f10a 0220 	add.w	r2, sl, #32
    b0e4:	e778      	b.n	afd8 <_realloc_r+0x284>
    b0e6:	68a1      	ldr	r1, [r4, #8]
    b0e8:	f8ca 1010 	str.w	r1, [sl, #16]
    b0ec:	68e1      	ldr	r1, [r4, #12]
    b0ee:	f8ca 1014 	str.w	r1, [sl, #20]
    b0f2:	2a24      	cmp	r2, #36	; 0x24
    b0f4:	d00d      	beq.n	b112 <_realloc_r+0x3be>
    b0f6:	3410      	adds	r4, #16
    b0f8:	f10a 0218 	add.w	r2, sl, #24
    b0fc:	e717      	b.n	af2e <_realloc_r+0x1da>
    b0fe:	6923      	ldr	r3, [r4, #16]
    b100:	f8ca 3018 	str.w	r3, [sl, #24]
    b104:	6963      	ldr	r3, [r4, #20]
    b106:	f8ca 301c 	str.w	r3, [sl, #28]
    b10a:	3418      	adds	r4, #24
    b10c:	f10a 0320 	add.w	r3, sl, #32
    b110:	e78b      	b.n	b02a <_realloc_r+0x2d6>
    b112:	6922      	ldr	r2, [r4, #16]
    b114:	f8ca 2018 	str.w	r2, [sl, #24]
    b118:	6962      	ldr	r2, [r4, #20]
    b11a:	f8ca 201c 	str.w	r2, [sl, #28]
    b11e:	3418      	adds	r4, #24
    b120:	f10a 0220 	add.w	r2, sl, #32
    b124:	e703      	b.n	af2e <_realloc_r+0x1da>
    b126:	bf00      	nop
    b128:	20004508 	.word	0x20004508

0000b12c <_strtol_l.constprop.0>:
    b12c:	2b01      	cmp	r3, #1
    b12e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b132:	d040      	beq.n	b1b6 <_strtol_l.constprop.0+0x8a>
    b134:	2b24      	cmp	r3, #36	; 0x24
    b136:	4698      	mov	r8, r3
    b138:	d83d      	bhi.n	b1b6 <_strtol_l.constprop.0+0x8a>
    b13a:	4d4c      	ldr	r5, [pc, #304]	; (b26c <_strtol_l.constprop.0+0x140>)
    b13c:	468e      	mov	lr, r1
    b13e:	4676      	mov	r6, lr
    b140:	f81e bb01 	ldrb.w	fp, [lr], #1
    b144:	f815 400b 	ldrb.w	r4, [r5, fp]
    b148:	f014 0408 	ands.w	r4, r4, #8
    b14c:	d1f7      	bne.n	b13e <_strtol_l.constprop.0+0x12>
    b14e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b152:	d072      	beq.n	b23a <_strtol_l.constprop.0+0x10e>
    b154:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b158:	bf08      	it	eq
    b15a:	f89e b000 	ldrbeq.w	fp, [lr]
    b15e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b162:	bf08      	it	eq
    b164:	f106 0e02 	addeq.w	lr, r6, #2
    b168:	2b00      	cmp	r3, #0
    b16a:	d042      	beq.n	b1f2 <_strtol_l.constprop.0+0xc6>
    b16c:	2b10      	cmp	r3, #16
    b16e:	d057      	beq.n	b220 <_strtol_l.constprop.0+0xf4>
    b170:	fbb9 f7f8 	udiv	r7, r9, r8
    b174:	2500      	movs	r5, #0
    b176:	462e      	mov	r6, r5
    b178:	fb08 9a17 	mls	sl, r8, r7, r9
    b17c:	e005      	b.n	b18a <_strtol_l.constprop.0+0x5e>
    b17e:	d033      	beq.n	b1e8 <_strtol_l.constprop.0+0xbc>
    b180:	fb08 c606 	mla	r6, r8, r6, ip
    b184:	2501      	movs	r5, #1
    b186:	f81e bb01 	ldrb.w	fp, [lr], #1
    b18a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b18e:	f1bc 0f09 	cmp.w	ip, #9
    b192:	d906      	bls.n	b1a2 <_strtol_l.constprop.0+0x76>
    b194:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b198:	f1bc 0f19 	cmp.w	ip, #25
    b19c:	d812      	bhi.n	b1c4 <_strtol_l.constprop.0+0x98>
    b19e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b1a2:	4563      	cmp	r3, ip
    b1a4:	dd17      	ble.n	b1d6 <_strtol_l.constprop.0+0xaa>
    b1a6:	f1b5 3fff 	cmp.w	r5, #4294967295
    b1aa:	d0ec      	beq.n	b186 <_strtol_l.constprop.0+0x5a>
    b1ac:	42b7      	cmp	r7, r6
    b1ae:	d2e6      	bcs.n	b17e <_strtol_l.constprop.0+0x52>
    b1b0:	f04f 35ff 	mov.w	r5, #4294967295
    b1b4:	e7e7      	b.n	b186 <_strtol_l.constprop.0+0x5a>
    b1b6:	f000 fc53 	bl	ba60 <__errno>
    b1ba:	2316      	movs	r3, #22
    b1bc:	6003      	str	r3, [r0, #0]
    b1be:	2000      	movs	r0, #0
    b1c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1c4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b1c8:	f1bc 0f19 	cmp.w	ip, #25
    b1cc:	d803      	bhi.n	b1d6 <_strtol_l.constprop.0+0xaa>
    b1ce:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b1d2:	4563      	cmp	r3, ip
    b1d4:	dce7      	bgt.n	b1a6 <_strtol_l.constprop.0+0x7a>
    b1d6:	1c6b      	adds	r3, r5, #1
    b1d8:	d027      	beq.n	b22a <_strtol_l.constprop.0+0xfe>
    b1da:	b98c      	cbnz	r4, b200 <_strtol_l.constprop.0+0xd4>
    b1dc:	b10a      	cbz	r2, b1e2 <_strtol_l.constprop.0+0xb6>
    b1de:	bba5      	cbnz	r5, b24a <_strtol_l.constprop.0+0x11e>
    b1e0:	6011      	str	r1, [r2, #0]
    b1e2:	4630      	mov	r0, r6
    b1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1e8:	45e2      	cmp	sl, ip
    b1ea:	dac9      	bge.n	b180 <_strtol_l.constprop.0+0x54>
    b1ec:	f04f 35ff 	mov.w	r5, #4294967295
    b1f0:	e7c9      	b.n	b186 <_strtol_l.constprop.0+0x5a>
    b1f2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b1f6:	d005      	beq.n	b204 <_strtol_l.constprop.0+0xd8>
    b1f8:	f04f 080a 	mov.w	r8, #10
    b1fc:	4643      	mov	r3, r8
    b1fe:	e7b7      	b.n	b170 <_strtol_l.constprop.0+0x44>
    b200:	4276      	negs	r6, r6
    b202:	e7eb      	b.n	b1dc <_strtol_l.constprop.0+0xb0>
    b204:	f89e 3000 	ldrb.w	r3, [lr]
    b208:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b20c:	2b58      	cmp	r3, #88	; 0x58
    b20e:	d121      	bne.n	b254 <_strtol_l.constprop.0+0x128>
    b210:	f04f 0810 	mov.w	r8, #16
    b214:	f89e b001 	ldrb.w	fp, [lr, #1]
    b218:	4643      	mov	r3, r8
    b21a:	f10e 0e02 	add.w	lr, lr, #2
    b21e:	e7a7      	b.n	b170 <_strtol_l.constprop.0+0x44>
    b220:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b224:	d01a      	beq.n	b25c <_strtol_l.constprop.0+0x130>
    b226:	4698      	mov	r8, r3
    b228:	e7a2      	b.n	b170 <_strtol_l.constprop.0+0x44>
    b22a:	2322      	movs	r3, #34	; 0x22
    b22c:	6003      	str	r3, [r0, #0]
    b22e:	b172      	cbz	r2, b24e <_strtol_l.constprop.0+0x122>
    b230:	f10e 31ff 	add.w	r1, lr, #4294967295
    b234:	464e      	mov	r6, r9
    b236:	6011      	str	r1, [r2, #0]
    b238:	e7d3      	b.n	b1e2 <_strtol_l.constprop.0+0xb6>
    b23a:	f89e b000 	ldrb.w	fp, [lr]
    b23e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b242:	f106 0e02 	add.w	lr, r6, #2
    b246:	2401      	movs	r4, #1
    b248:	e78e      	b.n	b168 <_strtol_l.constprop.0+0x3c>
    b24a:	46b1      	mov	r9, r6
    b24c:	e7f0      	b.n	b230 <_strtol_l.constprop.0+0x104>
    b24e:	464e      	mov	r6, r9
    b250:	4630      	mov	r0, r6
    b252:	e7c7      	b.n	b1e4 <_strtol_l.constprop.0+0xb8>
    b254:	f04f 0808 	mov.w	r8, #8
    b258:	4643      	mov	r3, r8
    b25a:	e789      	b.n	b170 <_strtol_l.constprop.0+0x44>
    b25c:	f89e 5000 	ldrb.w	r5, [lr]
    b260:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b264:	2d58      	cmp	r5, #88	; 0x58
    b266:	d0d3      	beq.n	b210 <_strtol_l.constprop.0+0xe4>
    b268:	4698      	mov	r8, r3
    b26a:	e781      	b.n	b170 <_strtol_l.constprop.0+0x44>
    b26c:	20000b39 	.word	0x20000b39

0000b270 <strtol>:
    b270:	b410      	push	{r4}
    b272:	4c05      	ldr	r4, [pc, #20]	; (b288 <strtol+0x18>)
    b274:	4684      	mov	ip, r0
    b276:	4613      	mov	r3, r2
    b278:	6820      	ldr	r0, [r4, #0]
    b27a:	f85d 4b04 	ldr.w	r4, [sp], #4
    b27e:	460a      	mov	r2, r1
    b280:	4661      	mov	r1, ip
    b282:	f7ff bf53 	b.w	b12c <_strtol_l.constprop.0>
    b286:	bf00      	nop
    b288:	20004924 	.word	0x20004924

0000b28c <_strtoul_l.constprop.0>:
    b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b290:	4607      	mov	r7, r0
    b292:	484c      	ldr	r0, [pc, #304]	; (b3c4 <_strtoul_l.constprop.0+0x138>)
    b294:	460e      	mov	r6, r1
    b296:	4635      	mov	r5, r6
    b298:	f816 eb01 	ldrb.w	lr, [r6], #1
    b29c:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b2a0:	f01c 0c08 	ands.w	ip, ip, #8
    b2a4:	d1f7      	bne.n	b296 <_strtoul_l.constprop.0+0xa>
    b2a6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b2aa:	d05a      	beq.n	b362 <_strtoul_l.constprop.0+0xd6>
    b2ac:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b2b0:	bf03      	ittte	eq
    b2b2:	f896 e000 	ldrbeq.w	lr, [r6]
    b2b6:	4664      	moveq	r4, ip
    b2b8:	1cae      	addeq	r6, r5, #2
    b2ba:	4664      	movne	r4, ip
    b2bc:	b15b      	cbz	r3, b2d6 <_strtoul_l.constprop.0+0x4a>
    b2be:	2b10      	cmp	r3, #16
    b2c0:	d054      	beq.n	b36c <_strtoul_l.constprop.0+0xe0>
    b2c2:	f04f 38ff 	mov.w	r8, #4294967295
    b2c6:	fbb8 f8f3 	udiv	r8, r8, r3
    b2ca:	fb03 fa08 	mul.w	sl, r3, r8
    b2ce:	ea6f 0a0a 	mvn.w	sl, sl
    b2d2:	4699      	mov	r9, r3
    b2d4:	e008      	b.n	b2e8 <_strtoul_l.constprop.0+0x5c>
    b2d6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b2da:	d05a      	beq.n	b392 <_strtoul_l.constprop.0+0x106>
    b2dc:	230a      	movs	r3, #10
    b2de:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b3c8 <_strtoul_l.constprop.0+0x13c>
    b2e2:	f04f 0a05 	mov.w	sl, #5
    b2e6:	4699      	mov	r9, r3
    b2e8:	2500      	movs	r5, #0
    b2ea:	4628      	mov	r0, r5
    b2ec:	e005      	b.n	b2fa <_strtoul_l.constprop.0+0x6e>
    b2ee:	d02c      	beq.n	b34a <_strtoul_l.constprop.0+0xbe>
    b2f0:	fb09 c000 	mla	r0, r9, r0, ip
    b2f4:	2501      	movs	r5, #1
    b2f6:	f816 eb01 	ldrb.w	lr, [r6], #1
    b2fa:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b2fe:	f1bc 0f09 	cmp.w	ip, #9
    b302:	d906      	bls.n	b312 <_strtoul_l.constprop.0+0x86>
    b304:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b308:	f1bc 0f19 	cmp.w	ip, #25
    b30c:	d80b      	bhi.n	b326 <_strtoul_l.constprop.0+0x9a>
    b30e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b312:	4563      	cmp	r3, ip
    b314:	dd10      	ble.n	b338 <_strtoul_l.constprop.0+0xac>
    b316:	f1b5 3fff 	cmp.w	r5, #4294967295
    b31a:	d0ec      	beq.n	b2f6 <_strtoul_l.constprop.0+0x6a>
    b31c:	4540      	cmp	r0, r8
    b31e:	d9e6      	bls.n	b2ee <_strtoul_l.constprop.0+0x62>
    b320:	f04f 35ff 	mov.w	r5, #4294967295
    b324:	e7e7      	b.n	b2f6 <_strtoul_l.constprop.0+0x6a>
    b326:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b32a:	f1bc 0f19 	cmp.w	ip, #25
    b32e:	d803      	bhi.n	b338 <_strtoul_l.constprop.0+0xac>
    b330:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b334:	4563      	cmp	r3, ip
    b336:	dcee      	bgt.n	b316 <_strtoul_l.constprop.0+0x8a>
    b338:	1c6b      	adds	r3, r5, #1
    b33a:	d00b      	beq.n	b354 <_strtoul_l.constprop.0+0xc8>
    b33c:	b104      	cbz	r4, b340 <_strtoul_l.constprop.0+0xb4>
    b33e:	4240      	negs	r0, r0
    b340:	b10a      	cbz	r2, b346 <_strtoul_l.constprop.0+0xba>
    b342:	b965      	cbnz	r5, b35e <_strtoul_l.constprop.0+0xd2>
    b344:	6011      	str	r1, [r2, #0]
    b346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b34a:	45d4      	cmp	ip, sl
    b34c:	ddd0      	ble.n	b2f0 <_strtoul_l.constprop.0+0x64>
    b34e:	f04f 35ff 	mov.w	r5, #4294967295
    b352:	e7d0      	b.n	b2f6 <_strtoul_l.constprop.0+0x6a>
    b354:	2322      	movs	r3, #34	; 0x22
    b356:	603b      	str	r3, [r7, #0]
    b358:	4628      	mov	r0, r5
    b35a:	2a00      	cmp	r2, #0
    b35c:	d0f3      	beq.n	b346 <_strtoul_l.constprop.0+0xba>
    b35e:	1e71      	subs	r1, r6, #1
    b360:	e7f0      	b.n	b344 <_strtoul_l.constprop.0+0xb8>
    b362:	f896 e000 	ldrb.w	lr, [r6]
    b366:	2401      	movs	r4, #1
    b368:	1cae      	adds	r6, r5, #2
    b36a:	e7a7      	b.n	b2bc <_strtoul_l.constprop.0+0x30>
    b36c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b370:	d121      	bne.n	b3b6 <_strtoul_l.constprop.0+0x12a>
    b372:	7830      	ldrb	r0, [r6, #0]
    b374:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b378:	2858      	cmp	r0, #88	; 0x58
    b37a:	d116      	bne.n	b3aa <_strtoul_l.constprop.0+0x11e>
    b37c:	f04f 0910 	mov.w	r9, #16
    b380:	f896 e001 	ldrb.w	lr, [r6, #1]
    b384:	f04f 0a0f 	mov.w	sl, #15
    b388:	3602      	adds	r6, #2
    b38a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b38e:	464b      	mov	r3, r9
    b390:	e7aa      	b.n	b2e8 <_strtoul_l.constprop.0+0x5c>
    b392:	7833      	ldrb	r3, [r6, #0]
    b394:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b398:	2b58      	cmp	r3, #88	; 0x58
    b39a:	d0ef      	beq.n	b37c <_strtoul_l.constprop.0+0xf0>
    b39c:	2308      	movs	r3, #8
    b39e:	f04f 0a07 	mov.w	sl, #7
    b3a2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b3a6:	4699      	mov	r9, r3
    b3a8:	e79e      	b.n	b2e8 <_strtoul_l.constprop.0+0x5c>
    b3aa:	4699      	mov	r9, r3
    b3ac:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b3b0:	f04f 0a0f 	mov.w	sl, #15
    b3b4:	e798      	b.n	b2e8 <_strtoul_l.constprop.0+0x5c>
    b3b6:	f04f 0a0f 	mov.w	sl, #15
    b3ba:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b3be:	4699      	mov	r9, r3
    b3c0:	e792      	b.n	b2e8 <_strtoul_l.constprop.0+0x5c>
    b3c2:	bf00      	nop
    b3c4:	20000b39 	.word	0x20000b39
    b3c8:	19999999 	.word	0x19999999

0000b3cc <strtoul>:
    b3cc:	b410      	push	{r4}
    b3ce:	4c05      	ldr	r4, [pc, #20]	; (b3e4 <strtoul+0x18>)
    b3d0:	4684      	mov	ip, r0
    b3d2:	4613      	mov	r3, r2
    b3d4:	6820      	ldr	r0, [r4, #0]
    b3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b3da:	460a      	mov	r2, r1
    b3dc:	4661      	mov	r1, ip
    b3de:	f7ff bf55 	b.w	b28c <_strtoul_l.constprop.0>
    b3e2:	bf00      	nop
    b3e4:	20004924 	.word	0x20004924

0000b3e8 <__cxa_atexit>:
    b3e8:	4613      	mov	r3, r2
    b3ea:	460a      	mov	r2, r1
    b3ec:	4601      	mov	r1, r0
    b3ee:	2002      	movs	r0, #2
    b3f0:	f000 bdb4 	b.w	bf5c <__register_exitproc>

0000b3f4 <isprint>:
    b3f4:	4b02      	ldr	r3, [pc, #8]	; (b400 <isprint+0xc>)
    b3f6:	4418      	add	r0, r3
    b3f8:	7840      	ldrb	r0, [r0, #1]
    b3fa:	f000 0097 	and.w	r0, r0, #151	; 0x97
    b3fe:	4770      	bx	lr
    b400:	20000b38 	.word	0x20000b38

0000b404 <isspace>:
    b404:	4b02      	ldr	r3, [pc, #8]	; (b410 <isspace+0xc>)
    b406:	4418      	add	r0, r3
    b408:	7840      	ldrb	r0, [r0, #1]
    b40a:	f000 0008 	and.w	r0, r0, #8
    b40e:	4770      	bx	lr
    b410:	20000b38 	.word	0x20000b38

0000b414 <tolower>:
    b414:	4b03      	ldr	r3, [pc, #12]	; (b424 <tolower+0x10>)
    b416:	5c1b      	ldrb	r3, [r3, r0]
    b418:	f003 0303 	and.w	r3, r3, #3
    b41c:	2b01      	cmp	r3, #1
    b41e:	bf08      	it	eq
    b420:	3020      	addeq	r0, #32
    b422:	4770      	bx	lr
    b424:	20000b39 	.word	0x20000b39

0000b428 <stdio_exit_handler>:
    b428:	4a02      	ldr	r2, [pc, #8]	; (b434 <stdio_exit_handler+0xc>)
    b42a:	4903      	ldr	r1, [pc, #12]	; (b438 <stdio_exit_handler+0x10>)
    b42c:	4803      	ldr	r0, [pc, #12]	; (b43c <stdio_exit_handler+0x14>)
    b42e:	f000 b8bb 	b.w	b5a8 <_fwalk_sglue>
    b432:	bf00      	nop
    b434:	20004918 	.word	0x20004918
    b438:	0000e595 	.word	0x0000e595
    b43c:	20001258 	.word	0x20001258

0000b440 <cleanup_stdio>:
    b440:	4b0c      	ldr	r3, [pc, #48]	; (b474 <cleanup_stdio+0x34>)
    b442:	6841      	ldr	r1, [r0, #4]
    b444:	4299      	cmp	r1, r3
    b446:	b510      	push	{r4, lr}
    b448:	4604      	mov	r4, r0
    b44a:	d001      	beq.n	b450 <cleanup_stdio+0x10>
    b44c:	f003 f8a2 	bl	e594 <_fclose_r>
    b450:	68a1      	ldr	r1, [r4, #8]
    b452:	4b09      	ldr	r3, [pc, #36]	; (b478 <cleanup_stdio+0x38>)
    b454:	4299      	cmp	r1, r3
    b456:	d002      	beq.n	b45e <cleanup_stdio+0x1e>
    b458:	4620      	mov	r0, r4
    b45a:	f003 f89b 	bl	e594 <_fclose_r>
    b45e:	68e1      	ldr	r1, [r4, #12]
    b460:	4b06      	ldr	r3, [pc, #24]	; (b47c <cleanup_stdio+0x3c>)
    b462:	4299      	cmp	r1, r3
    b464:	d004      	beq.n	b470 <cleanup_stdio+0x30>
    b466:	4620      	mov	r0, r4
    b468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b46c:	f003 b892 	b.w	e594 <_fclose_r>
    b470:	bd10      	pop	{r4, pc}
    b472:	bf00      	nop
    b474:	2000528c 	.word	0x2000528c
    b478:	200052f4 	.word	0x200052f4
    b47c:	2000535c 	.word	0x2000535c

0000b480 <global_stdio_init.part.0>:
    b480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b484:	4c2a      	ldr	r4, [pc, #168]	; (b530 <global_stdio_init.part.0+0xb0>)
    b486:	4b2b      	ldr	r3, [pc, #172]	; (b534 <global_stdio_init.part.0+0xb4>)
    b488:	482b      	ldr	r0, [pc, #172]	; (b538 <global_stdio_init.part.0+0xb8>)
    b48a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b54c <global_stdio_init.part.0+0xcc>
    b48e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b550 <global_stdio_init.part.0+0xd0>
    b492:	4f2a      	ldr	r7, [pc, #168]	; (b53c <global_stdio_init.part.0+0xbc>)
    b494:	6018      	str	r0, [r3, #0]
    b496:	2500      	movs	r5, #0
    b498:	2304      	movs	r3, #4
    b49a:	2208      	movs	r2, #8
    b49c:	4629      	mov	r1, r5
    b49e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b4a2:	4e27      	ldr	r6, [pc, #156]	; (b540 <global_stdio_init.part.0+0xc0>)
    b4a4:	6665      	str	r5, [r4, #100]	; 0x64
    b4a6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b4aa:	e9c4 5500 	strd	r5, r5, [r4]
    b4ae:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b4b2:	61a5      	str	r5, [r4, #24]
    b4b4:	f000 f97e 	bl	b7b4 <memset>
    b4b8:	4b22      	ldr	r3, [pc, #136]	; (b544 <global_stdio_init.part.0+0xc4>)
    b4ba:	6763      	str	r3, [r4, #116]	; 0x74
    b4bc:	2208      	movs	r2, #8
    b4be:	4629      	mov	r1, r5
    b4c0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b4c4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b4c8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b4cc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b4d0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b4d4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b4d8:	6725      	str	r5, [r4, #112]	; 0x70
    b4da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b4de:	62e6      	str	r6, [r4, #44]	; 0x2c
    b4e0:	f000 f968 	bl	b7b4 <memset>
    b4e4:	4b18      	ldr	r3, [pc, #96]	; (b548 <global_stdio_init.part.0+0xc8>)
    b4e6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b4ea:	4629      	mov	r1, r5
    b4ec:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b4f0:	2208      	movs	r2, #8
    b4f2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b4f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b4fa:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b4fe:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b502:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b506:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b50a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b50e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b512:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b516:	f000 f94d 	bl	b7b4 <memset>
    b51a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b51e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b522:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b526:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b52e:	bf00      	nop
    b530:	2000528c 	.word	0x2000528c
    b534:	200053c4 	.word	0x200053c4
    b538:	0000b429 	.word	0x0000b429
    b53c:	0000b695 	.word	0x0000b695
    b540:	0000b6b5 	.word	0x0000b6b5
    b544:	00010009 	.word	0x00010009
    b548:	00020012 	.word	0x00020012
    b54c:	0000b631 	.word	0x0000b631
    b550:	0000b655 	.word	0x0000b655

0000b554 <__sinit>:
    b554:	b510      	push	{r4, lr}
    b556:	4604      	mov	r4, r0
    b558:	480a      	ldr	r0, [pc, #40]	; (b584 <__sinit+0x30>)
    b55a:	f000 faaf 	bl	babc <__retarget_lock_acquire_recursive>
    b55e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b560:	b923      	cbnz	r3, b56c <__sinit+0x18>
    b562:	4b09      	ldr	r3, [pc, #36]	; (b588 <__sinit+0x34>)
    b564:	4a09      	ldr	r2, [pc, #36]	; (b58c <__sinit+0x38>)
    b566:	681b      	ldr	r3, [r3, #0]
    b568:	6362      	str	r2, [r4, #52]	; 0x34
    b56a:	b123      	cbz	r3, b576 <__sinit+0x22>
    b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b570:	4804      	ldr	r0, [pc, #16]	; (b584 <__sinit+0x30>)
    b572:	f000 baa5 	b.w	bac0 <__retarget_lock_release_recursive>
    b576:	f7ff ff83 	bl	b480 <global_stdio_init.part.0>
    b57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b57e:	4801      	ldr	r0, [pc, #4]	; (b584 <__sinit+0x30>)
    b580:	f000 ba9e 	b.w	bac0 <__retarget_lock_release_recursive>
    b584:	20005254 	.word	0x20005254
    b588:	200053c4 	.word	0x200053c4
    b58c:	0000b441 	.word	0x0000b441

0000b590 <__sfp_lock_acquire>:
    b590:	4801      	ldr	r0, [pc, #4]	; (b598 <__sfp_lock_acquire+0x8>)
    b592:	f000 ba93 	b.w	babc <__retarget_lock_acquire_recursive>
    b596:	bf00      	nop
    b598:	20005254 	.word	0x20005254

0000b59c <__sfp_lock_release>:
    b59c:	4801      	ldr	r0, [pc, #4]	; (b5a4 <__sfp_lock_release+0x8>)
    b59e:	f000 ba8f 	b.w	bac0 <__retarget_lock_release_recursive>
    b5a2:	bf00      	nop
    b5a4:	20005254 	.word	0x20005254

0000b5a8 <_fwalk_sglue>:
    b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b5ac:	4680      	mov	r8, r0
    b5ae:	460f      	mov	r7, r1
    b5b0:	4616      	mov	r6, r2
    b5b2:	f04f 0900 	mov.w	r9, #0
    b5b6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b5ba:	3d01      	subs	r5, #1
    b5bc:	d411      	bmi.n	b5e2 <_fwalk_sglue+0x3a>
    b5be:	89a3      	ldrh	r3, [r4, #12]
    b5c0:	2b01      	cmp	r3, #1
    b5c2:	f105 35ff 	add.w	r5, r5, #4294967295
    b5c6:	d908      	bls.n	b5da <_fwalk_sglue+0x32>
    b5c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b5cc:	3301      	adds	r3, #1
    b5ce:	4621      	mov	r1, r4
    b5d0:	d003      	beq.n	b5da <_fwalk_sglue+0x32>
    b5d2:	4640      	mov	r0, r8
    b5d4:	47b8      	blx	r7
    b5d6:	ea49 0900 	orr.w	r9, r9, r0
    b5da:	1c6b      	adds	r3, r5, #1
    b5dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b5e0:	d1ed      	bne.n	b5be <_fwalk_sglue+0x16>
    b5e2:	6836      	ldr	r6, [r6, #0]
    b5e4:	2e00      	cmp	r6, #0
    b5e6:	d1e6      	bne.n	b5b6 <_fwalk_sglue+0xe>
    b5e8:	4648      	mov	r0, r9
    b5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b5ee:	bf00      	nop

0000b5f0 <sprintf>:
    b5f0:	b40e      	push	{r1, r2, r3}
    b5f2:	b510      	push	{r4, lr}
    b5f4:	b09d      	sub	sp, #116	; 0x74
    b5f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b5fa:	ab1f      	add	r3, sp, #124	; 0x7c
    b5fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b600:	9104      	str	r1, [sp, #16]
    b602:	4909      	ldr	r1, [pc, #36]	; (b628 <sprintf+0x38>)
    b604:	f853 2b04 	ldr.w	r2, [r3], #4
    b608:	9002      	str	r0, [sp, #8]
    b60a:	4c08      	ldr	r4, [pc, #32]	; (b62c <sprintf+0x3c>)
    b60c:	6808      	ldr	r0, [r1, #0]
    b60e:	9301      	str	r3, [sp, #4]
    b610:	a902      	add	r1, sp, #8
    b612:	9405      	str	r4, [sp, #20]
    b614:	f001 fa1c 	bl	ca50 <_svfprintf_r>
    b618:	9b02      	ldr	r3, [sp, #8]
    b61a:	2200      	movs	r2, #0
    b61c:	701a      	strb	r2, [r3, #0]
    b61e:	b01d      	add	sp, #116	; 0x74
    b620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b624:	b003      	add	sp, #12
    b626:	4770      	bx	lr
    b628:	20004924 	.word	0x20004924
    b62c:	ffff0208 	.word	0xffff0208

0000b630 <__sread>:
    b630:	b510      	push	{r4, lr}
    b632:	460c      	mov	r4, r1
    b634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b638:	f000 f9d4 	bl	b9e4 <_read_r>
    b63c:	2800      	cmp	r0, #0
    b63e:	db03      	blt.n	b648 <__sread+0x18>
    b640:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b642:	4403      	add	r3, r0
    b644:	6523      	str	r3, [r4, #80]	; 0x50
    b646:	bd10      	pop	{r4, pc}
    b648:	89a3      	ldrh	r3, [r4, #12]
    b64a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b64e:	81a3      	strh	r3, [r4, #12]
    b650:	bd10      	pop	{r4, pc}
    b652:	bf00      	nop

0000b654 <__swrite>:
    b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b658:	460c      	mov	r4, r1
    b65a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    b65e:	461f      	mov	r7, r3
    b660:	05cb      	lsls	r3, r1, #23
    b662:	4605      	mov	r5, r0
    b664:	4616      	mov	r6, r2
    b666:	d40b      	bmi.n	b680 <__swrite+0x2c>
    b668:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    b66c:	81a1      	strh	r1, [r4, #12]
    b66e:	463b      	mov	r3, r7
    b670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b674:	4632      	mov	r2, r6
    b676:	4628      	mov	r0, r5
    b678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b67c:	f000 b9da 	b.w	ba34 <_write_r>
    b680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b684:	2302      	movs	r3, #2
    b686:	2200      	movs	r2, #0
    b688:	f000 f996 	bl	b9b8 <_lseek_r>
    b68c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    b690:	e7ea      	b.n	b668 <__swrite+0x14>
    b692:	bf00      	nop

0000b694 <__sseek>:
    b694:	b510      	push	{r4, lr}
    b696:	460c      	mov	r4, r1
    b698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b69c:	f000 f98c 	bl	b9b8 <_lseek_r>
    b6a0:	89a3      	ldrh	r3, [r4, #12]
    b6a2:	1c42      	adds	r2, r0, #1
    b6a4:	bf0e      	itee	eq
    b6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b6ae:	6520      	strne	r0, [r4, #80]	; 0x50
    b6b0:	81a3      	strh	r3, [r4, #12]
    b6b2:	bd10      	pop	{r4, pc}

0000b6b4 <__sclose>:
    b6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b6b8:	f000 b96c 	b.w	b994 <_close_r>

0000b6bc <memmove>:
    b6bc:	4288      	cmp	r0, r1
    b6be:	d90d      	bls.n	b6dc <memmove+0x20>
    b6c0:	188b      	adds	r3, r1, r2
    b6c2:	4283      	cmp	r3, r0
    b6c4:	d90a      	bls.n	b6dc <memmove+0x20>
    b6c6:	eb00 0c02 	add.w	ip, r0, r2
    b6ca:	b1ba      	cbz	r2, b6fc <memmove+0x40>
    b6cc:	4662      	mov	r2, ip
    b6ce:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    b6d2:	f802 cd01 	strb.w	ip, [r2, #-1]!
    b6d6:	4299      	cmp	r1, r3
    b6d8:	d1f9      	bne.n	b6ce <memmove+0x12>
    b6da:	4770      	bx	lr
    b6dc:	2a0f      	cmp	r2, #15
    b6de:	d80e      	bhi.n	b6fe <memmove+0x42>
    b6e0:	4603      	mov	r3, r0
    b6e2:	f102 3cff 	add.w	ip, r2, #4294967295
    b6e6:	b14a      	cbz	r2, b6fc <memmove+0x40>
    b6e8:	f10c 0c01 	add.w	ip, ip, #1
    b6ec:	3b01      	subs	r3, #1
    b6ee:	448c      	add	ip, r1
    b6f0:	f811 2b01 	ldrb.w	r2, [r1], #1
    b6f4:	f803 2f01 	strb.w	r2, [r3, #1]!
    b6f8:	4561      	cmp	r1, ip
    b6fa:	d1f9      	bne.n	b6f0 <memmove+0x34>
    b6fc:	4770      	bx	lr
    b6fe:	ea40 0301 	orr.w	r3, r0, r1
    b702:	079b      	lsls	r3, r3, #30
    b704:	d150      	bne.n	b7a8 <memmove+0xec>
    b706:	f1a2 0310 	sub.w	r3, r2, #16
    b70a:	b570      	push	{r4, r5, r6, lr}
    b70c:	f101 0c20 	add.w	ip, r1, #32
    b710:	f023 050f 	bic.w	r5, r3, #15
    b714:	f101 0e10 	add.w	lr, r1, #16
    b718:	f100 0410 	add.w	r4, r0, #16
    b71c:	44ac      	add	ip, r5
    b71e:	091b      	lsrs	r3, r3, #4
    b720:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    b724:	f844 5c10 	str.w	r5, [r4, #-16]
    b728:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    b72c:	f844 5c0c 	str.w	r5, [r4, #-12]
    b730:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    b734:	f844 5c08 	str.w	r5, [r4, #-8]
    b738:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    b73c:	f844 5c04 	str.w	r5, [r4, #-4]
    b740:	f10e 0e10 	add.w	lr, lr, #16
    b744:	45e6      	cmp	lr, ip
    b746:	f104 0410 	add.w	r4, r4, #16
    b74a:	d1e9      	bne.n	b720 <memmove+0x64>
    b74c:	3301      	adds	r3, #1
    b74e:	f012 0f0c 	tst.w	r2, #12
    b752:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    b756:	f002 040f 	and.w	r4, r2, #15
    b75a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    b75e:	d027      	beq.n	b7b0 <memmove+0xf4>
    b760:	3c04      	subs	r4, #4
    b762:	f024 0603 	bic.w	r6, r4, #3
    b766:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    b76a:	441e      	add	r6, r3
    b76c:	1f1c      	subs	r4, r3, #4
    b76e:	468e      	mov	lr, r1
    b770:	f85e 5b04 	ldr.w	r5, [lr], #4
    b774:	f844 5f04 	str.w	r5, [r4, #4]!
    b778:	42b4      	cmp	r4, r6
    b77a:	d1f9      	bne.n	b770 <memmove+0xb4>
    b77c:	f10c 0401 	add.w	r4, ip, #1
    b780:	f002 0203 	and.w	r2, r2, #3
    b784:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    b788:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    b78c:	f102 3cff 	add.w	ip, r2, #4294967295
    b790:	b14a      	cbz	r2, b7a6 <memmove+0xea>
    b792:	f10c 0c01 	add.w	ip, ip, #1
    b796:	3b01      	subs	r3, #1
    b798:	448c      	add	ip, r1
    b79a:	f811 2b01 	ldrb.w	r2, [r1], #1
    b79e:	f803 2f01 	strb.w	r2, [r3, #1]!
    b7a2:	4561      	cmp	r1, ip
    b7a4:	d1f9      	bne.n	b79a <memmove+0xde>
    b7a6:	bd70      	pop	{r4, r5, r6, pc}
    b7a8:	f102 3cff 	add.w	ip, r2, #4294967295
    b7ac:	4603      	mov	r3, r0
    b7ae:	e79b      	b.n	b6e8 <memmove+0x2c>
    b7b0:	4622      	mov	r2, r4
    b7b2:	e7eb      	b.n	b78c <memmove+0xd0>

0000b7b4 <memset>:
    b7b4:	0783      	lsls	r3, r0, #30
    b7b6:	b530      	push	{r4, r5, lr}
    b7b8:	d048      	beq.n	b84c <memset+0x98>
    b7ba:	1e54      	subs	r4, r2, #1
    b7bc:	2a00      	cmp	r2, #0
    b7be:	d03f      	beq.n	b840 <memset+0x8c>
    b7c0:	b2ca      	uxtb	r2, r1
    b7c2:	4603      	mov	r3, r0
    b7c4:	e001      	b.n	b7ca <memset+0x16>
    b7c6:	3c01      	subs	r4, #1
    b7c8:	d33a      	bcc.n	b840 <memset+0x8c>
    b7ca:	f803 2b01 	strb.w	r2, [r3], #1
    b7ce:	079d      	lsls	r5, r3, #30
    b7d0:	d1f9      	bne.n	b7c6 <memset+0x12>
    b7d2:	2c03      	cmp	r4, #3
    b7d4:	d92d      	bls.n	b832 <memset+0x7e>
    b7d6:	b2cd      	uxtb	r5, r1
    b7d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b7dc:	2c0f      	cmp	r4, #15
    b7de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b7e2:	d936      	bls.n	b852 <memset+0x9e>
    b7e4:	f1a4 0210 	sub.w	r2, r4, #16
    b7e8:	f022 0c0f 	bic.w	ip, r2, #15
    b7ec:	f103 0e20 	add.w	lr, r3, #32
    b7f0:	44e6      	add	lr, ip
    b7f2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    b7f6:	f103 0210 	add.w	r2, r3, #16
    b7fa:	e942 5504 	strd	r5, r5, [r2, #-16]
    b7fe:	e942 5502 	strd	r5, r5, [r2, #-8]
    b802:	3210      	adds	r2, #16
    b804:	4572      	cmp	r2, lr
    b806:	d1f8      	bne.n	b7fa <memset+0x46>
    b808:	f10c 0201 	add.w	r2, ip, #1
    b80c:	f014 0f0c 	tst.w	r4, #12
    b810:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    b814:	f004 0c0f 	and.w	ip, r4, #15
    b818:	d013      	beq.n	b842 <memset+0x8e>
    b81a:	f1ac 0304 	sub.w	r3, ip, #4
    b81e:	f023 0303 	bic.w	r3, r3, #3
    b822:	3304      	adds	r3, #4
    b824:	4413      	add	r3, r2
    b826:	f842 5b04 	str.w	r5, [r2], #4
    b82a:	4293      	cmp	r3, r2
    b82c:	d1fb      	bne.n	b826 <memset+0x72>
    b82e:	f00c 0403 	and.w	r4, ip, #3
    b832:	b12c      	cbz	r4, b840 <memset+0x8c>
    b834:	b2c9      	uxtb	r1, r1
    b836:	441c      	add	r4, r3
    b838:	f803 1b01 	strb.w	r1, [r3], #1
    b83c:	429c      	cmp	r4, r3
    b83e:	d1fb      	bne.n	b838 <memset+0x84>
    b840:	bd30      	pop	{r4, r5, pc}
    b842:	4664      	mov	r4, ip
    b844:	4613      	mov	r3, r2
    b846:	2c00      	cmp	r4, #0
    b848:	d1f4      	bne.n	b834 <memset+0x80>
    b84a:	e7f9      	b.n	b840 <memset+0x8c>
    b84c:	4603      	mov	r3, r0
    b84e:	4614      	mov	r4, r2
    b850:	e7bf      	b.n	b7d2 <memset+0x1e>
    b852:	461a      	mov	r2, r3
    b854:	46a4      	mov	ip, r4
    b856:	e7e0      	b.n	b81a <memset+0x66>

0000b858 <strchr>:
    b858:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    b85c:	4603      	mov	r3, r0
    b85e:	d044      	beq.n	b8ea <strchr+0x92>
    b860:	0782      	lsls	r2, r0, #30
    b862:	d132      	bne.n	b8ca <strchr+0x72>
    b864:	b510      	push	{r4, lr}
    b866:	6804      	ldr	r4, [r0, #0]
    b868:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    b86c:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    b870:	ea8e 0204 	eor.w	r2, lr, r4
    b874:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b878:	ea23 0302 	bic.w	r3, r3, r2
    b87c:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    b880:	ea22 0204 	bic.w	r2, r2, r4
    b884:	4313      	orrs	r3, r2
    b886:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b88a:	d10f      	bne.n	b8ac <strchr+0x54>
    b88c:	f850 4f04 	ldr.w	r4, [r0, #4]!
    b890:	ea84 0c0e 	eor.w	ip, r4, lr
    b894:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    b898:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    b89c:	ea23 0304 	bic.w	r3, r3, r4
    b8a0:	ea22 020c 	bic.w	r2, r2, ip
    b8a4:	4313      	orrs	r3, r2
    b8a6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b8aa:	d0ef      	beq.n	b88c <strchr+0x34>
    b8ac:	7803      	ldrb	r3, [r0, #0]
    b8ae:	b923      	cbnz	r3, b8ba <strchr+0x62>
    b8b0:	e036      	b.n	b920 <strchr+0xc8>
    b8b2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d032      	beq.n	b920 <strchr+0xc8>
    b8ba:	4299      	cmp	r1, r3
    b8bc:	d1f9      	bne.n	b8b2 <strchr+0x5a>
    b8be:	bd10      	pop	{r4, pc}
    b8c0:	428a      	cmp	r2, r1
    b8c2:	d011      	beq.n	b8e8 <strchr+0x90>
    b8c4:	079a      	lsls	r2, r3, #30
    b8c6:	4618      	mov	r0, r3
    b8c8:	d0cc      	beq.n	b864 <strchr+0xc>
    b8ca:	4618      	mov	r0, r3
    b8cc:	f813 2b01 	ldrb.w	r2, [r3], #1
    b8d0:	2a00      	cmp	r2, #0
    b8d2:	d1f5      	bne.n	b8c0 <strchr+0x68>
    b8d4:	4610      	mov	r0, r2
    b8d6:	4770      	bx	lr
    b8d8:	0799      	lsls	r1, r3, #30
    b8da:	4618      	mov	r0, r3
    b8dc:	d007      	beq.n	b8ee <strchr+0x96>
    b8de:	4618      	mov	r0, r3
    b8e0:	3301      	adds	r3, #1
    b8e2:	7802      	ldrb	r2, [r0, #0]
    b8e4:	2a00      	cmp	r2, #0
    b8e6:	d1f7      	bne.n	b8d8 <strchr+0x80>
    b8e8:	4770      	bx	lr
    b8ea:	0782      	lsls	r2, r0, #30
    b8ec:	d1f7      	bne.n	b8de <strchr+0x86>
    b8ee:	6802      	ldr	r2, [r0, #0]
    b8f0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b8f4:	ea23 0302 	bic.w	r3, r3, r2
    b8f8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b8fc:	d108      	bne.n	b910 <strchr+0xb8>
    b8fe:	f850 2f04 	ldr.w	r2, [r0, #4]!
    b902:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    b906:	ea23 0302 	bic.w	r3, r3, r2
    b90a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    b90e:	d0f6      	beq.n	b8fe <strchr+0xa6>
    b910:	7803      	ldrb	r3, [r0, #0]
    b912:	2b00      	cmp	r3, #0
    b914:	d0e8      	beq.n	b8e8 <strchr+0x90>
    b916:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    b91a:	2b00      	cmp	r3, #0
    b91c:	d1fb      	bne.n	b916 <strchr+0xbe>
    b91e:	4770      	bx	lr
    b920:	4618      	mov	r0, r3
    b922:	bd10      	pop	{r4, pc}

0000b924 <strncpy>:
    b924:	ea40 0301 	orr.w	r3, r0, r1
    b928:	079b      	lsls	r3, r3, #30
    b92a:	b530      	push	{r4, r5, lr}
    b92c:	d101      	bne.n	b932 <strncpy+0xe>
    b92e:	2a03      	cmp	r2, #3
    b930:	d80f      	bhi.n	b952 <strncpy+0x2e>
    b932:	4684      	mov	ip, r0
    b934:	f101 3eff 	add.w	lr, r1, #4294967295
    b938:	e007      	b.n	b94a <strncpy+0x26>
    b93a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    b93e:	f803 1b01 	strb.w	r1, [r3], #1
    b942:	1e54      	subs	r4, r2, #1
    b944:	b1c1      	cbz	r1, b978 <strncpy+0x54>
    b946:	469c      	mov	ip, r3
    b948:	4622      	mov	r2, r4
    b94a:	4663      	mov	r3, ip
    b94c:	2a00      	cmp	r2, #0
    b94e:	d1f4      	bne.n	b93a <strncpy+0x16>
    b950:	bd30      	pop	{r4, r5, pc}
    b952:	460b      	mov	r3, r1
    b954:	4684      	mov	ip, r0
    b956:	4619      	mov	r1, r3
    b958:	f853 5b04 	ldr.w	r5, [r3], #4
    b95c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    b960:	ea24 0405 	bic.w	r4, r4, r5
    b964:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    b968:	d1e4      	bne.n	b934 <strncpy+0x10>
    b96a:	3a04      	subs	r2, #4
    b96c:	2a03      	cmp	r2, #3
    b96e:	f84c 5b04 	str.w	r5, [ip], #4
    b972:	4619      	mov	r1, r3
    b974:	d8ef      	bhi.n	b956 <strncpy+0x32>
    b976:	e7dd      	b.n	b934 <strncpy+0x10>
    b978:	4494      	add	ip, r2
    b97a:	2c00      	cmp	r4, #0
    b97c:	d0e8      	beq.n	b950 <strncpy+0x2c>
    b97e:	f803 1b01 	strb.w	r1, [r3], #1
    b982:	4563      	cmp	r3, ip
    b984:	d1fb      	bne.n	b97e <strncpy+0x5a>
    b986:	bd30      	pop	{r4, r5, pc}

0000b988 <__locale_mb_cur_max>:
    b988:	4b01      	ldr	r3, [pc, #4]	; (b990 <__locale_mb_cur_max+0x8>)
    b98a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    b98e:	4770      	bx	lr
    b990:	2000439c 	.word	0x2000439c

0000b994 <_close_r>:
    b994:	b538      	push	{r3, r4, r5, lr}
    b996:	4d07      	ldr	r5, [pc, #28]	; (b9b4 <_close_r+0x20>)
    b998:	2200      	movs	r2, #0
    b99a:	4604      	mov	r4, r0
    b99c:	4608      	mov	r0, r1
    b99e:	602a      	str	r2, [r5, #0]
    b9a0:	f7fd fb08 	bl	8fb4 <_close>
    b9a4:	1c43      	adds	r3, r0, #1
    b9a6:	d000      	beq.n	b9aa <_close_r+0x16>
    b9a8:	bd38      	pop	{r3, r4, r5, pc}
    b9aa:	682b      	ldr	r3, [r5, #0]
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d0fb      	beq.n	b9a8 <_close_r+0x14>
    b9b0:	6023      	str	r3, [r4, #0]
    b9b2:	bd38      	pop	{r3, r4, r5, pc}
    b9b4:	200053dc 	.word	0x200053dc

0000b9b8 <_lseek_r>:
    b9b8:	b538      	push	{r3, r4, r5, lr}
    b9ba:	460c      	mov	r4, r1
    b9bc:	4d08      	ldr	r5, [pc, #32]	; (b9e0 <_lseek_r+0x28>)
    b9be:	4684      	mov	ip, r0
    b9c0:	4611      	mov	r1, r2
    b9c2:	4620      	mov	r0, r4
    b9c4:	461a      	mov	r2, r3
    b9c6:	2300      	movs	r3, #0
    b9c8:	602b      	str	r3, [r5, #0]
    b9ca:	4664      	mov	r4, ip
    b9cc:	f7fd fafe 	bl	8fcc <_lseek>
    b9d0:	1c43      	adds	r3, r0, #1
    b9d2:	d000      	beq.n	b9d6 <_lseek_r+0x1e>
    b9d4:	bd38      	pop	{r3, r4, r5, pc}
    b9d6:	682b      	ldr	r3, [r5, #0]
    b9d8:	2b00      	cmp	r3, #0
    b9da:	d0fb      	beq.n	b9d4 <_lseek_r+0x1c>
    b9dc:	6023      	str	r3, [r4, #0]
    b9de:	bd38      	pop	{r3, r4, r5, pc}
    b9e0:	200053dc 	.word	0x200053dc

0000b9e4 <_read_r>:
    b9e4:	b538      	push	{r3, r4, r5, lr}
    b9e6:	460c      	mov	r4, r1
    b9e8:	4d08      	ldr	r5, [pc, #32]	; (ba0c <_read_r+0x28>)
    b9ea:	4684      	mov	ip, r0
    b9ec:	4611      	mov	r1, r2
    b9ee:	4620      	mov	r0, r4
    b9f0:	461a      	mov	r2, r3
    b9f2:	2300      	movs	r3, #0
    b9f4:	602b      	str	r3, [r5, #0]
    b9f6:	4664      	mov	r4, ip
    b9f8:	f7fd fada 	bl	8fb0 <_read>
    b9fc:	1c43      	adds	r3, r0, #1
    b9fe:	d000      	beq.n	ba02 <_read_r+0x1e>
    ba00:	bd38      	pop	{r3, r4, r5, pc}
    ba02:	682b      	ldr	r3, [r5, #0]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d0fb      	beq.n	ba00 <_read_r+0x1c>
    ba08:	6023      	str	r3, [r4, #0]
    ba0a:	bd38      	pop	{r3, r4, r5, pc}
    ba0c:	200053dc 	.word	0x200053dc

0000ba10 <_sbrk_r>:
    ba10:	b538      	push	{r3, r4, r5, lr}
    ba12:	4d07      	ldr	r5, [pc, #28]	; (ba30 <_sbrk_r+0x20>)
    ba14:	2200      	movs	r2, #0
    ba16:	4604      	mov	r4, r0
    ba18:	4608      	mov	r0, r1
    ba1a:	602a      	str	r2, [r5, #0]
    ba1c:	f7fd faae 	bl	8f7c <_sbrk>
    ba20:	1c43      	adds	r3, r0, #1
    ba22:	d000      	beq.n	ba26 <_sbrk_r+0x16>
    ba24:	bd38      	pop	{r3, r4, r5, pc}
    ba26:	682b      	ldr	r3, [r5, #0]
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d0fb      	beq.n	ba24 <_sbrk_r+0x14>
    ba2c:	6023      	str	r3, [r4, #0]
    ba2e:	bd38      	pop	{r3, r4, r5, pc}
    ba30:	200053dc 	.word	0x200053dc

0000ba34 <_write_r>:
    ba34:	b538      	push	{r3, r4, r5, lr}
    ba36:	460c      	mov	r4, r1
    ba38:	4d08      	ldr	r5, [pc, #32]	; (ba5c <_write_r+0x28>)
    ba3a:	4684      	mov	ip, r0
    ba3c:	4611      	mov	r1, r2
    ba3e:	4620      	mov	r0, r4
    ba40:	461a      	mov	r2, r3
    ba42:	2300      	movs	r3, #0
    ba44:	602b      	str	r3, [r5, #0]
    ba46:	4664      	mov	r4, ip
    ba48:	f7fc fe40 	bl	86cc <_write>
    ba4c:	1c43      	adds	r3, r0, #1
    ba4e:	d000      	beq.n	ba52 <_write_r+0x1e>
    ba50:	bd38      	pop	{r3, r4, r5, pc}
    ba52:	682b      	ldr	r3, [r5, #0]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d0fb      	beq.n	ba50 <_write_r+0x1c>
    ba58:	6023      	str	r3, [r4, #0]
    ba5a:	bd38      	pop	{r3, r4, r5, pc}
    ba5c:	200053dc 	.word	0x200053dc

0000ba60 <__errno>:
    ba60:	4b01      	ldr	r3, [pc, #4]	; (ba68 <__errno+0x8>)
    ba62:	6818      	ldr	r0, [r3, #0]
    ba64:	4770      	bx	lr
    ba66:	bf00      	nop
    ba68:	20004924 	.word	0x20004924

0000ba6c <__libc_init_array>:
    ba6c:	b570      	push	{r4, r5, r6, lr}
    ba6e:	4e0d      	ldr	r6, [pc, #52]	; (baa4 <__libc_init_array+0x38>)
    ba70:	4d0d      	ldr	r5, [pc, #52]	; (baa8 <__libc_init_array+0x3c>)
    ba72:	1b76      	subs	r6, r6, r5
    ba74:	10b6      	asrs	r6, r6, #2
    ba76:	d006      	beq.n	ba86 <__libc_init_array+0x1a>
    ba78:	2400      	movs	r4, #0
    ba7a:	f855 3b04 	ldr.w	r3, [r5], #4
    ba7e:	3401      	adds	r4, #1
    ba80:	4798      	blx	r3
    ba82:	42a6      	cmp	r6, r4
    ba84:	d1f9      	bne.n	ba7a <__libc_init_array+0xe>
    ba86:	4e09      	ldr	r6, [pc, #36]	; (baac <__libc_init_array+0x40>)
    ba88:	4d09      	ldr	r5, [pc, #36]	; (bab0 <__libc_init_array+0x44>)
    ba8a:	1b76      	subs	r6, r6, r5
    ba8c:	f005 fb9c 	bl	111c8 <___init_veneer>
    ba90:	10b6      	asrs	r6, r6, #2
    ba92:	d006      	beq.n	baa2 <__libc_init_array+0x36>
    ba94:	2400      	movs	r4, #0
    ba96:	f855 3b04 	ldr.w	r3, [r5], #4
    ba9a:	3401      	adds	r4, #1
    ba9c:	4798      	blx	r3
    ba9e:	42a6      	cmp	r6, r4
    baa0:	d1f9      	bne.n	ba96 <__libc_init_array+0x2a>
    baa2:	bd70      	pop	{r4, r5, r6, pc}
    baa4:	60001e48 	.word	0x60001e48
    baa8:	60001e48 	.word	0x60001e48
    baac:	60001e50 	.word	0x60001e50
    bab0:	60001e48 	.word	0x60001e48

0000bab4 <__retarget_lock_init_recursive>:
    bab4:	4770      	bx	lr
    bab6:	bf00      	nop

0000bab8 <__retarget_lock_close_recursive>:
    bab8:	4770      	bx	lr
    baba:	bf00      	nop

0000babc <__retarget_lock_acquire_recursive>:
    babc:	4770      	bx	lr
    babe:	bf00      	nop

0000bac0 <__retarget_lock_release_recursive>:
    bac0:	4770      	bx	lr
    bac2:	bf00      	nop
	...
    bae0:	eba2 0003 	sub.w	r0, r2, r3
    bae4:	4770      	bx	lr
    bae6:	bf00      	nop

0000bae8 <strcmp>:
    bae8:	7802      	ldrb	r2, [r0, #0]
    baea:	780b      	ldrb	r3, [r1, #0]
    baec:	2a01      	cmp	r2, #1
    baee:	bf28      	it	cs
    baf0:	429a      	cmpcs	r2, r3
    baf2:	d1f5      	bne.n	bae0 <__retarget_lock_release_recursive+0x20>
    baf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    baf8:	ea40 0401 	orr.w	r4, r0, r1
    bafc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bb00:	f06f 0c00 	mvn.w	ip, #0
    bb04:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bb08:	b312      	cbz	r2, bb50 <strcmp+0x68>
    bb0a:	ea80 0401 	eor.w	r4, r0, r1
    bb0e:	f014 0f07 	tst.w	r4, #7
    bb12:	d16a      	bne.n	bbea <strcmp+0x102>
    bb14:	f000 0407 	and.w	r4, r0, #7
    bb18:	f020 0007 	bic.w	r0, r0, #7
    bb1c:	f004 0503 	and.w	r5, r4, #3
    bb20:	f021 0107 	bic.w	r1, r1, #7
    bb24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bb28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bb2c:	f014 0f04 	tst.w	r4, #4
    bb30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bb34:	fa0c f405 	lsl.w	r4, ip, r5
    bb38:	ea62 0204 	orn	r2, r2, r4
    bb3c:	ea66 0604 	orn	r6, r6, r4
    bb40:	d00a      	beq.n	bb58 <strcmp+0x70>
    bb42:	ea63 0304 	orn	r3, r3, r4
    bb46:	4662      	mov	r2, ip
    bb48:	ea67 0704 	orn	r7, r7, r4
    bb4c:	4666      	mov	r6, ip
    bb4e:	e003      	b.n	bb58 <strcmp+0x70>
    bb50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bb54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bb58:	fa82 f54c 	uadd8	r5, r2, ip
    bb5c:	ea82 0406 	eor.w	r4, r2, r6
    bb60:	faa4 f48c 	sel	r4, r4, ip
    bb64:	bb6c      	cbnz	r4, bbc2 <strcmp+0xda>
    bb66:	fa83 f54c 	uadd8	r5, r3, ip
    bb6a:	ea83 0507 	eor.w	r5, r3, r7
    bb6e:	faa5 f58c 	sel	r5, r5, ip
    bb72:	b995      	cbnz	r5, bb9a <strcmp+0xb2>
    bb74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bb78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bb7c:	fa82 f54c 	uadd8	r5, r2, ip
    bb80:	ea82 0406 	eor.w	r4, r2, r6
    bb84:	faa4 f48c 	sel	r4, r4, ip
    bb88:	fa83 f54c 	uadd8	r5, r3, ip
    bb8c:	ea83 0507 	eor.w	r5, r3, r7
    bb90:	faa5 f58c 	sel	r5, r5, ip
    bb94:	4325      	orrs	r5, r4
    bb96:	d0db      	beq.n	bb50 <strcmp+0x68>
    bb98:	b99c      	cbnz	r4, bbc2 <strcmp+0xda>
    bb9a:	ba2d      	rev	r5, r5
    bb9c:	fab5 f485 	clz	r4, r5
    bba0:	f024 0407 	bic.w	r4, r4, #7
    bba4:	fa27 f104 	lsr.w	r1, r7, r4
    bba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bbac:	fa23 f304 	lsr.w	r3, r3, r4
    bbb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bbb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bbb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bbbc:	eba0 0001 	sub.w	r0, r0, r1
    bbc0:	4770      	bx	lr
    bbc2:	ba24      	rev	r4, r4
    bbc4:	fab4 f484 	clz	r4, r4
    bbc8:	f024 0407 	bic.w	r4, r4, #7
    bbcc:	fa26 f104 	lsr.w	r1, r6, r4
    bbd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bbd4:	fa22 f204 	lsr.w	r2, r2, r4
    bbd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bbdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bbe0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bbe4:	eba0 0001 	sub.w	r0, r0, r1
    bbe8:	4770      	bx	lr
    bbea:	f014 0f03 	tst.w	r4, #3
    bbee:	d13c      	bne.n	bc6a <strcmp+0x182>
    bbf0:	f010 0403 	ands.w	r4, r0, #3
    bbf4:	d128      	bne.n	bc48 <strcmp+0x160>
    bbf6:	f850 2b08 	ldr.w	r2, [r0], #8
    bbfa:	f851 3b08 	ldr.w	r3, [r1], #8
    bbfe:	fa82 f54c 	uadd8	r5, r2, ip
    bc02:	ea82 0503 	eor.w	r5, r2, r3
    bc06:	faa5 f58c 	sel	r5, r5, ip
    bc0a:	b95d      	cbnz	r5, bc24 <strcmp+0x13c>
    bc0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    bc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
    bc14:	fa82 f54c 	uadd8	r5, r2, ip
    bc18:	ea82 0503 	eor.w	r5, r2, r3
    bc1c:	faa5 f58c 	sel	r5, r5, ip
    bc20:	2d00      	cmp	r5, #0
    bc22:	d0e8      	beq.n	bbf6 <strcmp+0x10e>
    bc24:	ba2d      	rev	r5, r5
    bc26:	fab5 f485 	clz	r4, r5
    bc2a:	f024 0407 	bic.w	r4, r4, #7
    bc2e:	fa23 f104 	lsr.w	r1, r3, r4
    bc32:	fa22 f204 	lsr.w	r2, r2, r4
    bc36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bc3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bc3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bc42:	eba0 0001 	sub.w	r0, r0, r1
    bc46:	4770      	bx	lr
    bc48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    bc4c:	f020 0003 	bic.w	r0, r0, #3
    bc50:	f850 2b08 	ldr.w	r2, [r0], #8
    bc54:	f021 0103 	bic.w	r1, r1, #3
    bc58:	f851 3b08 	ldr.w	r3, [r1], #8
    bc5c:	fa0c f404 	lsl.w	r4, ip, r4
    bc60:	ea62 0204 	orn	r2, r2, r4
    bc64:	ea63 0304 	orn	r3, r3, r4
    bc68:	e7c9      	b.n	bbfe <strcmp+0x116>
    bc6a:	f010 0403 	ands.w	r4, r0, #3
    bc6e:	d01a      	beq.n	bca6 <strcmp+0x1be>
    bc70:	eba1 0104 	sub.w	r1, r1, r4
    bc74:	f020 0003 	bic.w	r0, r0, #3
    bc78:	07e4      	lsls	r4, r4, #31
    bc7a:	f850 2b04 	ldr.w	r2, [r0], #4
    bc7e:	d006      	beq.n	bc8e <strcmp+0x1a6>
    bc80:	d20f      	bcs.n	bca2 <strcmp+0x1ba>
    bc82:	788b      	ldrb	r3, [r1, #2]
    bc84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    bc88:	1ae4      	subs	r4, r4, r3
    bc8a:	d106      	bne.n	bc9a <strcmp+0x1b2>
    bc8c:	b12b      	cbz	r3, bc9a <strcmp+0x1b2>
    bc8e:	78cb      	ldrb	r3, [r1, #3]
    bc90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    bc94:	1ae4      	subs	r4, r4, r3
    bc96:	d100      	bne.n	bc9a <strcmp+0x1b2>
    bc98:	b91b      	cbnz	r3, bca2 <strcmp+0x1ba>
    bc9a:	4620      	mov	r0, r4
    bc9c:	f85d 4b10 	ldr.w	r4, [sp], #16
    bca0:	4770      	bx	lr
    bca2:	f101 0104 	add.w	r1, r1, #4
    bca6:	f850 2b04 	ldr.w	r2, [r0], #4
    bcaa:	07cc      	lsls	r4, r1, #31
    bcac:	f021 0103 	bic.w	r1, r1, #3
    bcb0:	f851 3b04 	ldr.w	r3, [r1], #4
    bcb4:	d848      	bhi.n	bd48 <strcmp+0x260>
    bcb6:	d224      	bcs.n	bd02 <strcmp+0x21a>
    bcb8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    bcbc:	fa82 f54c 	uadd8	r5, r2, ip
    bcc0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    bcc4:	faa5 f58c 	sel	r5, r5, ip
    bcc8:	d10a      	bne.n	bce0 <strcmp+0x1f8>
    bcca:	b965      	cbnz	r5, bce6 <strcmp+0x1fe>
    bccc:	f851 3b04 	ldr.w	r3, [r1], #4
    bcd0:	ea84 0402 	eor.w	r4, r4, r2
    bcd4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    bcd8:	d10e      	bne.n	bcf8 <strcmp+0x210>
    bcda:	f850 2b04 	ldr.w	r2, [r0], #4
    bcde:	e7eb      	b.n	bcb8 <strcmp+0x1d0>
    bce0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    bce4:	e055      	b.n	bd92 <strcmp+0x2aa>
    bce6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    bcea:	d14d      	bne.n	bd88 <strcmp+0x2a0>
    bcec:	7808      	ldrb	r0, [r1, #0]
    bcee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bcf2:	f1c0 0000 	rsb	r0, r0, #0
    bcf6:	4770      	bx	lr
    bcf8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bcfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bd00:	e047      	b.n	bd92 <strcmp+0x2aa>
    bd02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    bd06:	fa82 f54c 	uadd8	r5, r2, ip
    bd0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    bd0e:	faa5 f58c 	sel	r5, r5, ip
    bd12:	d10a      	bne.n	bd2a <strcmp+0x242>
    bd14:	b965      	cbnz	r5, bd30 <strcmp+0x248>
    bd16:	f851 3b04 	ldr.w	r3, [r1], #4
    bd1a:	ea84 0402 	eor.w	r4, r4, r2
    bd1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    bd22:	d10c      	bne.n	bd3e <strcmp+0x256>
    bd24:	f850 2b04 	ldr.w	r2, [r0], #4
    bd28:	e7eb      	b.n	bd02 <strcmp+0x21a>
    bd2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    bd2e:	e030      	b.n	bd92 <strcmp+0x2aa>
    bd30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    bd34:	d128      	bne.n	bd88 <strcmp+0x2a0>
    bd36:	880b      	ldrh	r3, [r1, #0]
    bd38:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bd3c:	e029      	b.n	bd92 <strcmp+0x2aa>
    bd3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    bd42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    bd46:	e024      	b.n	bd92 <strcmp+0x2aa>
    bd48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    bd4c:	fa82 f54c 	uadd8	r5, r2, ip
    bd50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    bd54:	faa5 f58c 	sel	r5, r5, ip
    bd58:	d10a      	bne.n	bd70 <strcmp+0x288>
    bd5a:	b965      	cbnz	r5, bd76 <strcmp+0x28e>
    bd5c:	f851 3b04 	ldr.w	r3, [r1], #4
    bd60:	ea84 0402 	eor.w	r4, r4, r2
    bd64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    bd68:	d109      	bne.n	bd7e <strcmp+0x296>
    bd6a:	f850 2b04 	ldr.w	r2, [r0], #4
    bd6e:	e7eb      	b.n	bd48 <strcmp+0x260>
    bd70:	ea4f 6313 	mov.w	r3, r3, lsr #24
    bd74:	e00d      	b.n	bd92 <strcmp+0x2aa>
    bd76:	f015 0fff 	tst.w	r5, #255	; 0xff
    bd7a:	d105      	bne.n	bd88 <strcmp+0x2a0>
    bd7c:	680b      	ldr	r3, [r1, #0]
    bd7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    bd82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bd86:	e004      	b.n	bd92 <strcmp+0x2aa>
    bd88:	f04f 0000 	mov.w	r0, #0
    bd8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bd90:	4770      	bx	lr
    bd92:	ba12      	rev	r2, r2
    bd94:	ba1b      	rev	r3, r3
    bd96:	fa82 f44c 	uadd8	r4, r2, ip
    bd9a:	ea82 0403 	eor.w	r4, r2, r3
    bd9e:	faa4 f58c 	sel	r5, r4, ip
    bda2:	fab5 f485 	clz	r4, r5
    bda6:	fa02 f204 	lsl.w	r2, r2, r4
    bdaa:	fa03 f304 	lsl.w	r3, r3, r4
    bdae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    bdb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bdb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    bdba:	4770      	bx	lr

0000bdbc <strcpy>:
    bdbc:	ea80 0201 	eor.w	r2, r0, r1
    bdc0:	4684      	mov	ip, r0
    bdc2:	f012 0f03 	tst.w	r2, #3
    bdc6:	d14f      	bne.n	be68 <strcpy+0xac>
    bdc8:	f011 0f03 	tst.w	r1, #3
    bdcc:	d132      	bne.n	be34 <strcpy+0x78>
    bdce:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bdd2:	f011 0f04 	tst.w	r1, #4
    bdd6:	f851 3b04 	ldr.w	r3, [r1], #4
    bdda:	d00b      	beq.n	bdf4 <strcpy+0x38>
    bddc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bde0:	439a      	bics	r2, r3
    bde2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bde6:	bf04      	itt	eq
    bde8:	f84c 3b04 	streq.w	r3, [ip], #4
    bdec:	f851 3b04 	ldreq.w	r3, [r1], #4
    bdf0:	d116      	bne.n	be20 <strcpy+0x64>
    bdf2:	bf00      	nop
    bdf4:	f851 4b04 	ldr.w	r4, [r1], #4
    bdf8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bdfc:	439a      	bics	r2, r3
    bdfe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    be02:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    be06:	d10b      	bne.n	be20 <strcpy+0x64>
    be08:	f84c 3b04 	str.w	r3, [ip], #4
    be0c:	43a2      	bics	r2, r4
    be0e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    be12:	bf04      	itt	eq
    be14:	f851 3b04 	ldreq.w	r3, [r1], #4
    be18:	f84c 4b04 	streq.w	r4, [ip], #4
    be1c:	d0ea      	beq.n	bdf4 <strcpy+0x38>
    be1e:	4623      	mov	r3, r4
    be20:	f80c 3b01 	strb.w	r3, [ip], #1
    be24:	f013 0fff 	tst.w	r3, #255	; 0xff
    be28:	ea4f 2333 	mov.w	r3, r3, ror #8
    be2c:	d1f8      	bne.n	be20 <strcpy+0x64>
    be2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    be32:	4770      	bx	lr
    be34:	f011 0f01 	tst.w	r1, #1
    be38:	d006      	beq.n	be48 <strcpy+0x8c>
    be3a:	f811 2b01 	ldrb.w	r2, [r1], #1
    be3e:	f80c 2b01 	strb.w	r2, [ip], #1
    be42:	2a00      	cmp	r2, #0
    be44:	bf08      	it	eq
    be46:	4770      	bxeq	lr
    be48:	f011 0f02 	tst.w	r1, #2
    be4c:	d0bf      	beq.n	bdce <strcpy+0x12>
    be4e:	f831 2b02 	ldrh.w	r2, [r1], #2
    be52:	f012 0fff 	tst.w	r2, #255	; 0xff
    be56:	bf16      	itet	ne
    be58:	f82c 2b02 	strhne.w	r2, [ip], #2
    be5c:	f88c 2000 	strbeq.w	r2, [ip]
    be60:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    be64:	d1b3      	bne.n	bdce <strcpy+0x12>
    be66:	4770      	bx	lr
    be68:	f811 2b01 	ldrb.w	r2, [r1], #1
    be6c:	f80c 2b01 	strb.w	r2, [ip], #1
    be70:	2a00      	cmp	r2, #0
    be72:	d1f9      	bne.n	be68 <strcpy+0xac>
    be74:	4770      	bx	lr
    be76:	bf00      	nop
	...

0000be80 <strlen>:
    be80:	f890 f000 	pld	[r0]
    be84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    be88:	f020 0107 	bic.w	r1, r0, #7
    be8c:	f06f 0c00 	mvn.w	ip, #0
    be90:	f010 0407 	ands.w	r4, r0, #7
    be94:	f891 f020 	pld	[r1, #32]
    be98:	f040 8049 	bne.w	bf2e <strlen+0xae>
    be9c:	f04f 0400 	mov.w	r4, #0
    bea0:	f06f 0007 	mvn.w	r0, #7
    bea4:	e9d1 2300 	ldrd	r2, r3, [r1]
    bea8:	f891 f040 	pld	[r1, #64]	; 0x40
    beac:	f100 0008 	add.w	r0, r0, #8
    beb0:	fa82 f24c 	uadd8	r2, r2, ip
    beb4:	faa4 f28c 	sel	r2, r4, ip
    beb8:	fa83 f34c 	uadd8	r3, r3, ip
    bebc:	faa2 f38c 	sel	r3, r2, ip
    bec0:	bb4b      	cbnz	r3, bf16 <strlen+0x96>
    bec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    bec6:	fa82 f24c 	uadd8	r2, r2, ip
    beca:	f100 0008 	add.w	r0, r0, #8
    bece:	faa4 f28c 	sel	r2, r4, ip
    bed2:	fa83 f34c 	uadd8	r3, r3, ip
    bed6:	faa2 f38c 	sel	r3, r2, ip
    beda:	b9e3      	cbnz	r3, bf16 <strlen+0x96>
    bedc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    bee0:	fa82 f24c 	uadd8	r2, r2, ip
    bee4:	f100 0008 	add.w	r0, r0, #8
    bee8:	faa4 f28c 	sel	r2, r4, ip
    beec:	fa83 f34c 	uadd8	r3, r3, ip
    bef0:	faa2 f38c 	sel	r3, r2, ip
    bef4:	b97b      	cbnz	r3, bf16 <strlen+0x96>
    bef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    befa:	f101 0120 	add.w	r1, r1, #32
    befe:	fa82 f24c 	uadd8	r2, r2, ip
    bf02:	f100 0008 	add.w	r0, r0, #8
    bf06:	faa4 f28c 	sel	r2, r4, ip
    bf0a:	fa83 f34c 	uadd8	r3, r3, ip
    bf0e:	faa2 f38c 	sel	r3, r2, ip
    bf12:	2b00      	cmp	r3, #0
    bf14:	d0c6      	beq.n	bea4 <strlen+0x24>
    bf16:	2a00      	cmp	r2, #0
    bf18:	bf04      	itt	eq
    bf1a:	3004      	addeq	r0, #4
    bf1c:	461a      	moveq	r2, r3
    bf1e:	ba12      	rev	r2, r2
    bf20:	fab2 f282 	clz	r2, r2
    bf24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    bf28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bf2c:	4770      	bx	lr
    bf2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    bf32:	f004 0503 	and.w	r5, r4, #3
    bf36:	f1c4 0000 	rsb	r0, r4, #0
    bf3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bf3e:	f014 0f04 	tst.w	r4, #4
    bf42:	f891 f040 	pld	[r1, #64]	; 0x40
    bf46:	fa0c f505 	lsl.w	r5, ip, r5
    bf4a:	ea62 0205 	orn	r2, r2, r5
    bf4e:	bf1c      	itt	ne
    bf50:	ea63 0305 	ornne	r3, r3, r5
    bf54:	4662      	movne	r2, ip
    bf56:	f04f 0400 	mov.w	r4, #0
    bf5a:	e7a9      	b.n	beb0 <strlen+0x30>

0000bf5c <__register_exitproc>:
    bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf60:	f8df a07c 	ldr.w	sl, [pc, #124]	; bfe0 <__register_exitproc+0x84>
    bf64:	4606      	mov	r6, r0
    bf66:	f8da 0000 	ldr.w	r0, [sl]
    bf6a:	4698      	mov	r8, r3
    bf6c:	460f      	mov	r7, r1
    bf6e:	4691      	mov	r9, r2
    bf70:	f7ff fda4 	bl	babc <__retarget_lock_acquire_recursive>
    bf74:	4b18      	ldr	r3, [pc, #96]	; (bfd8 <__register_exitproc+0x7c>)
    bf76:	681c      	ldr	r4, [r3, #0]
    bf78:	b324      	cbz	r4, bfc4 <__register_exitproc+0x68>
    bf7a:	6865      	ldr	r5, [r4, #4]
    bf7c:	2d1f      	cmp	r5, #31
    bf7e:	dc24      	bgt.n	bfca <__register_exitproc+0x6e>
    bf80:	b95e      	cbnz	r6, bf9a <__register_exitproc+0x3e>
    bf82:	1c6b      	adds	r3, r5, #1
    bf84:	3502      	adds	r5, #2
    bf86:	f8da 0000 	ldr.w	r0, [sl]
    bf8a:	6063      	str	r3, [r4, #4]
    bf8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    bf90:	f7ff fd96 	bl	bac0 <__retarget_lock_release_recursive>
    bf94:	2000      	movs	r0, #0
    bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf9a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    bf9e:	2301      	movs	r3, #1
    bfa0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    bfa4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    bfa8:	40ab      	lsls	r3, r5
    bfaa:	431a      	orrs	r2, r3
    bfac:	2e02      	cmp	r6, #2
    bfae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    bfb2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    bfb6:	d1e4      	bne.n	bf82 <__register_exitproc+0x26>
    bfb8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    bfbc:	431a      	orrs	r2, r3
    bfbe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bfc2:	e7de      	b.n	bf82 <__register_exitproc+0x26>
    bfc4:	4c05      	ldr	r4, [pc, #20]	; (bfdc <__register_exitproc+0x80>)
    bfc6:	601c      	str	r4, [r3, #0]
    bfc8:	e7d7      	b.n	bf7a <__register_exitproc+0x1e>
    bfca:	f8da 0000 	ldr.w	r0, [sl]
    bfce:	f7ff fd77 	bl	bac0 <__retarget_lock_release_recursive>
    bfd2:	f04f 30ff 	mov.w	r0, #4294967295
    bfd6:	e7de      	b.n	bf96 <__register_exitproc+0x3a>
    bfd8:	200050b8 	.word	0x200050b8
    bfdc:	200050bc 	.word	0x200050bc
    bfe0:	20004390 	.word	0x20004390

0000bfe4 <_malloc_trim_r>:
    bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bfe6:	4f24      	ldr	r7, [pc, #144]	; (c078 <_malloc_trim_r+0x94>)
    bfe8:	460c      	mov	r4, r1
    bfea:	4606      	mov	r6, r0
    bfec:	f7fe fe9a 	bl	ad24 <__malloc_lock>
    bff0:	68bb      	ldr	r3, [r7, #8]
    bff2:	685d      	ldr	r5, [r3, #4]
    bff4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    bff8:	310f      	adds	r1, #15
    bffa:	f025 0503 	bic.w	r5, r5, #3
    bffe:	194b      	adds	r3, r1, r5
    c000:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c004:	f023 030f 	bic.w	r3, r3, #15
    c008:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c00c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c010:	db07      	blt.n	c022 <_malloc_trim_r+0x3e>
    c012:	2100      	movs	r1, #0
    c014:	4630      	mov	r0, r6
    c016:	f7ff fcfb 	bl	ba10 <_sbrk_r>
    c01a:	68bb      	ldr	r3, [r7, #8]
    c01c:	442b      	add	r3, r5
    c01e:	4298      	cmp	r0, r3
    c020:	d004      	beq.n	c02c <_malloc_trim_r+0x48>
    c022:	4630      	mov	r0, r6
    c024:	f7fe fe84 	bl	ad30 <__malloc_unlock>
    c028:	2000      	movs	r0, #0
    c02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c02c:	4261      	negs	r1, r4
    c02e:	4630      	mov	r0, r6
    c030:	f7ff fcee 	bl	ba10 <_sbrk_r>
    c034:	3001      	adds	r0, #1
    c036:	d00d      	beq.n	c054 <_malloc_trim_r+0x70>
    c038:	4a10      	ldr	r2, [pc, #64]	; (c07c <_malloc_trim_r+0x98>)
    c03a:	68bb      	ldr	r3, [r7, #8]
    c03c:	1b2d      	subs	r5, r5, r4
    c03e:	f045 0501 	orr.w	r5, r5, #1
    c042:	605d      	str	r5, [r3, #4]
    c044:	6813      	ldr	r3, [r2, #0]
    c046:	4630      	mov	r0, r6
    c048:	1b1b      	subs	r3, r3, r4
    c04a:	6013      	str	r3, [r2, #0]
    c04c:	f7fe fe70 	bl	ad30 <__malloc_unlock>
    c050:	2001      	movs	r0, #1
    c052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c054:	2100      	movs	r1, #0
    c056:	4630      	mov	r0, r6
    c058:	f7ff fcda 	bl	ba10 <_sbrk_r>
    c05c:	68ba      	ldr	r2, [r7, #8]
    c05e:	1a83      	subs	r3, r0, r2
    c060:	2b0f      	cmp	r3, #15
    c062:	ddde      	ble.n	c022 <_malloc_trim_r+0x3e>
    c064:	f043 0301 	orr.w	r3, r3, #1
    c068:	6053      	str	r3, [r2, #4]
    c06a:	4b05      	ldr	r3, [pc, #20]	; (c080 <_malloc_trim_r+0x9c>)
    c06c:	4903      	ldr	r1, [pc, #12]	; (c07c <_malloc_trim_r+0x98>)
    c06e:	681b      	ldr	r3, [r3, #0]
    c070:	1ac0      	subs	r0, r0, r3
    c072:	6008      	str	r0, [r1, #0]
    c074:	e7d5      	b.n	c022 <_malloc_trim_r+0x3e>
    c076:	bf00      	nop
    c078:	20004508 	.word	0x20004508
    c07c:	20005258 	.word	0x20005258
    c080:	20004910 	.word	0x20004910

0000c084 <_free_r>:
    c084:	2900      	cmp	r1, #0
    c086:	d061      	beq.n	c14c <_free_r+0xc8>
    c088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c08a:	460c      	mov	r4, r1
    c08c:	4606      	mov	r6, r0
    c08e:	f7fe fe49 	bl	ad24 <__malloc_lock>
    c092:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c096:	4f7b      	ldr	r7, [pc, #492]	; (c284 <_free_r+0x200>)
    c098:	f1a4 0508 	sub.w	r5, r4, #8
    c09c:	f022 0101 	bic.w	r1, r2, #1
    c0a0:	eb05 0c01 	add.w	ip, r5, r1
    c0a4:	68b8      	ldr	r0, [r7, #8]
    c0a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c0aa:	4560      	cmp	r0, ip
    c0ac:	f023 0303 	bic.w	r3, r3, #3
    c0b0:	f000 808b 	beq.w	c1ca <_free_r+0x146>
    c0b4:	07d2      	lsls	r2, r2, #31
    c0b6:	f8cc 3004 	str.w	r3, [ip, #4]
    c0ba:	d432      	bmi.n	c122 <_free_r+0x9e>
    c0bc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c0c0:	1aad      	subs	r5, r5, r2
    c0c2:	4411      	add	r1, r2
    c0c4:	68aa      	ldr	r2, [r5, #8]
    c0c6:	f107 0008 	add.w	r0, r7, #8
    c0ca:	4282      	cmp	r2, r0
    c0cc:	d06a      	beq.n	c1a4 <_free_r+0x120>
    c0ce:	eb0c 0403 	add.w	r4, ip, r3
    c0d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c0d6:	68ec      	ldr	r4, [r5, #12]
    c0d8:	60d4      	str	r4, [r2, #12]
    c0da:	f01e 0f01 	tst.w	lr, #1
    c0de:	60a2      	str	r2, [r4, #8]
    c0e0:	f000 8097 	beq.w	c212 <_free_r+0x18e>
    c0e4:	f041 0301 	orr.w	r3, r1, #1
    c0e8:	606b      	str	r3, [r5, #4]
    c0ea:	f8cc 1000 	str.w	r1, [ip]
    c0ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c0f2:	d235      	bcs.n	c160 <_free_r+0xdc>
    c0f4:	6878      	ldr	r0, [r7, #4]
    c0f6:	08cb      	lsrs	r3, r1, #3
    c0f8:	2201      	movs	r2, #1
    c0fa:	0949      	lsrs	r1, r1, #5
    c0fc:	3301      	adds	r3, #1
    c0fe:	408a      	lsls	r2, r1
    c100:	4302      	orrs	r2, r0
    c102:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c106:	607a      	str	r2, [r7, #4]
    c108:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c10c:	3a08      	subs	r2, #8
    c10e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c112:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c116:	60cd      	str	r5, [r1, #12]
    c118:	4630      	mov	r0, r6
    c11a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c11e:	f7fe be07 	b.w	ad30 <__malloc_unlock>
    c122:	eb0c 0203 	add.w	r2, ip, r3
    c126:	6852      	ldr	r2, [r2, #4]
    c128:	07d0      	lsls	r0, r2, #31
    c12a:	d410      	bmi.n	c14e <_free_r+0xca>
    c12c:	4419      	add	r1, r3
    c12e:	f107 0008 	add.w	r0, r7, #8
    c132:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c136:	4283      	cmp	r3, r0
    c138:	d073      	beq.n	c222 <_free_r+0x19e>
    c13a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c13e:	60da      	str	r2, [r3, #12]
    c140:	6093      	str	r3, [r2, #8]
    c142:	f041 0301 	orr.w	r3, r1, #1
    c146:	606b      	str	r3, [r5, #4]
    c148:	5069      	str	r1, [r5, r1]
    c14a:	e7d0      	b.n	c0ee <_free_r+0x6a>
    c14c:	4770      	bx	lr
    c14e:	f041 0301 	orr.w	r3, r1, #1
    c152:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c156:	f844 3c04 	str.w	r3, [r4, #-4]
    c15a:	f8cc 1000 	str.w	r1, [ip]
    c15e:	d3c9      	bcc.n	c0f4 <_free_r+0x70>
    c160:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c164:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c168:	d248      	bcs.n	c1fc <_free_r+0x178>
    c16a:	098b      	lsrs	r3, r1, #6
    c16c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c170:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c174:	00c3      	lsls	r3, r0, #3
    c176:	18f8      	adds	r0, r7, r3
    c178:	58fb      	ldr	r3, [r7, r3]
    c17a:	3808      	subs	r0, #8
    c17c:	4298      	cmp	r0, r3
    c17e:	d059      	beq.n	c234 <_free_r+0x1b0>
    c180:	685a      	ldr	r2, [r3, #4]
    c182:	f022 0203 	bic.w	r2, r2, #3
    c186:	428a      	cmp	r2, r1
    c188:	d902      	bls.n	c190 <_free_r+0x10c>
    c18a:	689b      	ldr	r3, [r3, #8]
    c18c:	4298      	cmp	r0, r3
    c18e:	d1f7      	bne.n	c180 <_free_r+0xfc>
    c190:	68d8      	ldr	r0, [r3, #12]
    c192:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c196:	6085      	str	r5, [r0, #8]
    c198:	60dd      	str	r5, [r3, #12]
    c19a:	4630      	mov	r0, r6
    c19c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c1a0:	f7fe bdc6 	b.w	ad30 <__malloc_unlock>
    c1a4:	eb0c 0203 	add.w	r2, ip, r3
    c1a8:	6852      	ldr	r2, [r2, #4]
    c1aa:	07d2      	lsls	r2, r2, #31
    c1ac:	d463      	bmi.n	c276 <_free_r+0x1f2>
    c1ae:	440b      	add	r3, r1
    c1b0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c1b4:	60ca      	str	r2, [r1, #12]
    c1b6:	6091      	str	r1, [r2, #8]
    c1b8:	f043 0201 	orr.w	r2, r3, #1
    c1bc:	606a      	str	r2, [r5, #4]
    c1be:	4630      	mov	r0, r6
    c1c0:	50eb      	str	r3, [r5, r3]
    c1c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c1c6:	f7fe bdb3 	b.w	ad30 <__malloc_unlock>
    c1ca:	440b      	add	r3, r1
    c1cc:	07d1      	lsls	r1, r2, #31
    c1ce:	d407      	bmi.n	c1e0 <_free_r+0x15c>
    c1d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c1d4:	1aad      	subs	r5, r5, r2
    c1d6:	4413      	add	r3, r2
    c1d8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c1dc:	60ca      	str	r2, [r1, #12]
    c1de:	6091      	str	r1, [r2, #8]
    c1e0:	f043 0201 	orr.w	r2, r3, #1
    c1e4:	606a      	str	r2, [r5, #4]
    c1e6:	4a28      	ldr	r2, [pc, #160]	; (c288 <_free_r+0x204>)
    c1e8:	60bd      	str	r5, [r7, #8]
    c1ea:	6812      	ldr	r2, [r2, #0]
    c1ec:	429a      	cmp	r2, r3
    c1ee:	d893      	bhi.n	c118 <_free_r+0x94>
    c1f0:	4b26      	ldr	r3, [pc, #152]	; (c28c <_free_r+0x208>)
    c1f2:	4630      	mov	r0, r6
    c1f4:	6819      	ldr	r1, [r3, #0]
    c1f6:	f7ff fef5 	bl	bfe4 <_malloc_trim_r>
    c1fa:	e78d      	b.n	c118 <_free_r+0x94>
    c1fc:	2b14      	cmp	r3, #20
    c1fe:	d90a      	bls.n	c216 <_free_r+0x192>
    c200:	2b54      	cmp	r3, #84	; 0x54
    c202:	d81f      	bhi.n	c244 <_free_r+0x1c0>
    c204:	0b0b      	lsrs	r3, r1, #12
    c206:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c20a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c20e:	00c3      	lsls	r3, r0, #3
    c210:	e7b1      	b.n	c176 <_free_r+0xf2>
    c212:	4419      	add	r1, r3
    c214:	e78d      	b.n	c132 <_free_r+0xae>
    c216:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c21a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c21e:	00c3      	lsls	r3, r0, #3
    c220:	e7a9      	b.n	c176 <_free_r+0xf2>
    c222:	f041 0301 	orr.w	r3, r1, #1
    c226:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c22a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c22e:	606b      	str	r3, [r5, #4]
    c230:	5069      	str	r1, [r5, r1]
    c232:	e771      	b.n	c118 <_free_r+0x94>
    c234:	6879      	ldr	r1, [r7, #4]
    c236:	1092      	asrs	r2, r2, #2
    c238:	2401      	movs	r4, #1
    c23a:	fa04 f202 	lsl.w	r2, r4, r2
    c23e:	430a      	orrs	r2, r1
    c240:	607a      	str	r2, [r7, #4]
    c242:	e7a6      	b.n	c192 <_free_r+0x10e>
    c244:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c248:	d806      	bhi.n	c258 <_free_r+0x1d4>
    c24a:	0bcb      	lsrs	r3, r1, #15
    c24c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c250:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c254:	00c3      	lsls	r3, r0, #3
    c256:	e78e      	b.n	c176 <_free_r+0xf2>
    c258:	f240 5254 	movw	r2, #1364	; 0x554
    c25c:	4293      	cmp	r3, r2
    c25e:	d806      	bhi.n	c26e <_free_r+0x1ea>
    c260:	0c8b      	lsrs	r3, r1, #18
    c262:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c266:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c26a:	00c3      	lsls	r3, r0, #3
    c26c:	e783      	b.n	c176 <_free_r+0xf2>
    c26e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c272:	227e      	movs	r2, #126	; 0x7e
    c274:	e77f      	b.n	c176 <_free_r+0xf2>
    c276:	f041 0301 	orr.w	r3, r1, #1
    c27a:	606b      	str	r3, [r5, #4]
    c27c:	f8cc 1000 	str.w	r1, [ip]
    c280:	e74a      	b.n	c118 <_free_r+0x94>
    c282:	bf00      	nop
    c284:	20004508 	.word	0x20004508
    c288:	20004914 	.word	0x20004914
    c28c:	20005288 	.word	0x20005288

0000c290 <__ascii_mbtowc>:
    c290:	b082      	sub	sp, #8
    c292:	b149      	cbz	r1, c2a8 <__ascii_mbtowc+0x18>
    c294:	b15a      	cbz	r2, c2ae <__ascii_mbtowc+0x1e>
    c296:	b16b      	cbz	r3, c2b4 <__ascii_mbtowc+0x24>
    c298:	7813      	ldrb	r3, [r2, #0]
    c29a:	600b      	str	r3, [r1, #0]
    c29c:	7812      	ldrb	r2, [r2, #0]
    c29e:	1e10      	subs	r0, r2, #0
    c2a0:	bf18      	it	ne
    c2a2:	2001      	movne	r0, #1
    c2a4:	b002      	add	sp, #8
    c2a6:	4770      	bx	lr
    c2a8:	a901      	add	r1, sp, #4
    c2aa:	2a00      	cmp	r2, #0
    c2ac:	d1f3      	bne.n	c296 <__ascii_mbtowc+0x6>
    c2ae:	4610      	mov	r0, r2
    c2b0:	b002      	add	sp, #8
    c2b2:	4770      	bx	lr
    c2b4:	f06f 0001 	mvn.w	r0, #1
    c2b8:	e7f4      	b.n	c2a4 <__ascii_mbtowc+0x14>
    c2ba:	bf00      	nop

0000c2bc <_Balloc>:
    c2bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c2be:	b570      	push	{r4, r5, r6, lr}
    c2c0:	4605      	mov	r5, r0
    c2c2:	460c      	mov	r4, r1
    c2c4:	b14b      	cbz	r3, c2da <_Balloc+0x1e>
    c2c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c2ca:	b180      	cbz	r0, c2ee <_Balloc+0x32>
    c2cc:	6802      	ldr	r2, [r0, #0]
    c2ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c2d2:	2300      	movs	r3, #0
    c2d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c2d8:	bd70      	pop	{r4, r5, r6, pc}
    c2da:	2221      	movs	r2, #33	; 0x21
    c2dc:	2104      	movs	r1, #4
    c2de:	f002 fb33 	bl	e948 <_calloc_r>
    c2e2:	4603      	mov	r3, r0
    c2e4:	6468      	str	r0, [r5, #68]	; 0x44
    c2e6:	2800      	cmp	r0, #0
    c2e8:	d1ed      	bne.n	c2c6 <_Balloc+0xa>
    c2ea:	2000      	movs	r0, #0
    c2ec:	bd70      	pop	{r4, r5, r6, pc}
    c2ee:	2101      	movs	r1, #1
    c2f0:	fa01 f604 	lsl.w	r6, r1, r4
    c2f4:	1d72      	adds	r2, r6, #5
    c2f6:	0092      	lsls	r2, r2, #2
    c2f8:	4628      	mov	r0, r5
    c2fa:	f002 fb25 	bl	e948 <_calloc_r>
    c2fe:	2800      	cmp	r0, #0
    c300:	d0f3      	beq.n	c2ea <_Balloc+0x2e>
    c302:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c306:	e7e4      	b.n	c2d2 <_Balloc+0x16>

0000c308 <_Bfree>:
    c308:	b131      	cbz	r1, c318 <_Bfree+0x10>
    c30a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c30c:	684a      	ldr	r2, [r1, #4]
    c30e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c312:	6008      	str	r0, [r1, #0]
    c314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c318:	4770      	bx	lr
    c31a:	bf00      	nop

0000c31c <__multadd>:
    c31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c320:	690e      	ldr	r6, [r1, #16]
    c322:	4680      	mov	r8, r0
    c324:	460f      	mov	r7, r1
    c326:	461d      	mov	r5, r3
    c328:	f101 0e14 	add.w	lr, r1, #20
    c32c:	2000      	movs	r0, #0
    c32e:	f8de 1000 	ldr.w	r1, [lr]
    c332:	b28c      	uxth	r4, r1
    c334:	fb02 5304 	mla	r3, r2, r4, r5
    c338:	0c09      	lsrs	r1, r1, #16
    c33a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c33e:	fb02 cc01 	mla	ip, r2, r1, ip
    c342:	3001      	adds	r0, #1
    c344:	b29c      	uxth	r4, r3
    c346:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c34a:	4286      	cmp	r6, r0
    c34c:	f84e 4b04 	str.w	r4, [lr], #4
    c350:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c354:	dceb      	bgt.n	c32e <__multadd+0x12>
    c356:	b13d      	cbz	r5, c368 <__multadd+0x4c>
    c358:	68bb      	ldr	r3, [r7, #8]
    c35a:	42b3      	cmp	r3, r6
    c35c:	dd07      	ble.n	c36e <__multadd+0x52>
    c35e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c362:	3601      	adds	r6, #1
    c364:	615d      	str	r5, [r3, #20]
    c366:	613e      	str	r6, [r7, #16]
    c368:	4638      	mov	r0, r7
    c36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c36e:	6879      	ldr	r1, [r7, #4]
    c370:	4640      	mov	r0, r8
    c372:	3101      	adds	r1, #1
    c374:	f7ff ffa2 	bl	c2bc <_Balloc>
    c378:	4604      	mov	r4, r0
    c37a:	b1b0      	cbz	r0, c3aa <__multadd+0x8e>
    c37c:	693a      	ldr	r2, [r7, #16]
    c37e:	3202      	adds	r2, #2
    c380:	f107 010c 	add.w	r1, r7, #12
    c384:	0092      	lsls	r2, r2, #2
    c386:	300c      	adds	r0, #12
    c388:	f7fc fc6c 	bl	8c64 <memcpy>
    c38c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c390:	687a      	ldr	r2, [r7, #4]
    c392:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c396:	6039      	str	r1, [r7, #0]
    c398:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c39c:	4627      	mov	r7, r4
    c39e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c3a2:	3601      	adds	r6, #1
    c3a4:	615d      	str	r5, [r3, #20]
    c3a6:	613e      	str	r6, [r7, #16]
    c3a8:	e7de      	b.n	c368 <__multadd+0x4c>
    c3aa:	4b03      	ldr	r3, [pc, #12]	; (c3b8 <__multadd+0x9c>)
    c3ac:	4803      	ldr	r0, [pc, #12]	; (c3bc <__multadd+0xa0>)
    c3ae:	4622      	mov	r2, r4
    c3b0:	21ba      	movs	r1, #186	; 0xba
    c3b2:	f002 faa9 	bl	e908 <__assert_func>
    c3b6:	bf00      	nop
    c3b8:	20000ac8 	.word	0x20000ac8
    c3bc:	20000adc 	.word	0x20000adc

0000c3c0 <__hi0bits>:
    c3c0:	0c03      	lsrs	r3, r0, #16
    c3c2:	041b      	lsls	r3, r3, #16
    c3c4:	b9d3      	cbnz	r3, c3fc <__hi0bits+0x3c>
    c3c6:	0400      	lsls	r0, r0, #16
    c3c8:	2310      	movs	r3, #16
    c3ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c3ce:	bf04      	itt	eq
    c3d0:	0200      	lsleq	r0, r0, #8
    c3d2:	3308      	addeq	r3, #8
    c3d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c3d8:	bf04      	itt	eq
    c3da:	0100      	lsleq	r0, r0, #4
    c3dc:	3304      	addeq	r3, #4
    c3de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c3e2:	bf04      	itt	eq
    c3e4:	0080      	lsleq	r0, r0, #2
    c3e6:	3302      	addeq	r3, #2
    c3e8:	2800      	cmp	r0, #0
    c3ea:	db05      	blt.n	c3f8 <__hi0bits+0x38>
    c3ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c3f0:	f103 0301 	add.w	r3, r3, #1
    c3f4:	bf08      	it	eq
    c3f6:	2320      	moveq	r3, #32
    c3f8:	4618      	mov	r0, r3
    c3fa:	4770      	bx	lr
    c3fc:	2300      	movs	r3, #0
    c3fe:	e7e4      	b.n	c3ca <__hi0bits+0xa>

0000c400 <__lo0bits>:
    c400:	6803      	ldr	r3, [r0, #0]
    c402:	f013 0207 	ands.w	r2, r3, #7
    c406:	d008      	beq.n	c41a <__lo0bits+0x1a>
    c408:	07d9      	lsls	r1, r3, #31
    c40a:	d41f      	bmi.n	c44c <__lo0bits+0x4c>
    c40c:	079a      	lsls	r2, r3, #30
    c40e:	d522      	bpl.n	c456 <__lo0bits+0x56>
    c410:	085b      	lsrs	r3, r3, #1
    c412:	6003      	str	r3, [r0, #0]
    c414:	2201      	movs	r2, #1
    c416:	4610      	mov	r0, r2
    c418:	4770      	bx	lr
    c41a:	b299      	uxth	r1, r3
    c41c:	b909      	cbnz	r1, c422 <__lo0bits+0x22>
    c41e:	0c1b      	lsrs	r3, r3, #16
    c420:	2210      	movs	r2, #16
    c422:	b2d9      	uxtb	r1, r3
    c424:	b909      	cbnz	r1, c42a <__lo0bits+0x2a>
    c426:	3208      	adds	r2, #8
    c428:	0a1b      	lsrs	r3, r3, #8
    c42a:	0719      	lsls	r1, r3, #28
    c42c:	bf04      	itt	eq
    c42e:	091b      	lsreq	r3, r3, #4
    c430:	3204      	addeq	r2, #4
    c432:	0799      	lsls	r1, r3, #30
    c434:	bf04      	itt	eq
    c436:	089b      	lsreq	r3, r3, #2
    c438:	3202      	addeq	r2, #2
    c43a:	07d9      	lsls	r1, r3, #31
    c43c:	d403      	bmi.n	c446 <__lo0bits+0x46>
    c43e:	085b      	lsrs	r3, r3, #1
    c440:	f102 0201 	add.w	r2, r2, #1
    c444:	d005      	beq.n	c452 <__lo0bits+0x52>
    c446:	6003      	str	r3, [r0, #0]
    c448:	4610      	mov	r0, r2
    c44a:	4770      	bx	lr
    c44c:	2200      	movs	r2, #0
    c44e:	4610      	mov	r0, r2
    c450:	4770      	bx	lr
    c452:	2220      	movs	r2, #32
    c454:	e7df      	b.n	c416 <__lo0bits+0x16>
    c456:	089b      	lsrs	r3, r3, #2
    c458:	2202      	movs	r2, #2
    c45a:	6003      	str	r3, [r0, #0]
    c45c:	4610      	mov	r0, r2
    c45e:	4770      	bx	lr

0000c460 <__i2b>:
    c460:	b538      	push	{r3, r4, r5, lr}
    c462:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c464:	4604      	mov	r4, r0
    c466:	460d      	mov	r5, r1
    c468:	b14b      	cbz	r3, c47e <__i2b+0x1e>
    c46a:	6858      	ldr	r0, [r3, #4]
    c46c:	b1b0      	cbz	r0, c49c <__i2b+0x3c>
    c46e:	6802      	ldr	r2, [r0, #0]
    c470:	605a      	str	r2, [r3, #4]
    c472:	2200      	movs	r2, #0
    c474:	2301      	movs	r3, #1
    c476:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c47a:	60c2      	str	r2, [r0, #12]
    c47c:	bd38      	pop	{r3, r4, r5, pc}
    c47e:	2221      	movs	r2, #33	; 0x21
    c480:	2104      	movs	r1, #4
    c482:	f002 fa61 	bl	e948 <_calloc_r>
    c486:	4603      	mov	r3, r0
    c488:	6460      	str	r0, [r4, #68]	; 0x44
    c48a:	2800      	cmp	r0, #0
    c48c:	d1ed      	bne.n	c46a <__i2b+0xa>
    c48e:	4b09      	ldr	r3, [pc, #36]	; (c4b4 <__i2b+0x54>)
    c490:	4809      	ldr	r0, [pc, #36]	; (c4b8 <__i2b+0x58>)
    c492:	2200      	movs	r2, #0
    c494:	f240 1145 	movw	r1, #325	; 0x145
    c498:	f002 fa36 	bl	e908 <__assert_func>
    c49c:	221c      	movs	r2, #28
    c49e:	2101      	movs	r1, #1
    c4a0:	4620      	mov	r0, r4
    c4a2:	f002 fa51 	bl	e948 <_calloc_r>
    c4a6:	2800      	cmp	r0, #0
    c4a8:	d0f1      	beq.n	c48e <__i2b+0x2e>
    c4aa:	2201      	movs	r2, #1
    c4ac:	2302      	movs	r3, #2
    c4ae:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c4b2:	e7de      	b.n	c472 <__i2b+0x12>
    c4b4:	20000ac8 	.word	0x20000ac8
    c4b8:	20000adc 	.word	0x20000adc

0000c4bc <__multiply>:
    c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4c0:	690e      	ldr	r6, [r1, #16]
    c4c2:	6915      	ldr	r5, [r2, #16]
    c4c4:	42ae      	cmp	r6, r5
    c4c6:	b085      	sub	sp, #20
    c4c8:	4688      	mov	r8, r1
    c4ca:	4614      	mov	r4, r2
    c4cc:	db05      	blt.n	c4da <__multiply+0x1e>
    c4ce:	462a      	mov	r2, r5
    c4d0:	4623      	mov	r3, r4
    c4d2:	4635      	mov	r5, r6
    c4d4:	460c      	mov	r4, r1
    c4d6:	4616      	mov	r6, r2
    c4d8:	4698      	mov	r8, r3
    c4da:	68a3      	ldr	r3, [r4, #8]
    c4dc:	6861      	ldr	r1, [r4, #4]
    c4de:	19af      	adds	r7, r5, r6
    c4e0:	42bb      	cmp	r3, r7
    c4e2:	bfb8      	it	lt
    c4e4:	3101      	addlt	r1, #1
    c4e6:	f7ff fee9 	bl	c2bc <_Balloc>
    c4ea:	9001      	str	r0, [sp, #4]
    c4ec:	2800      	cmp	r0, #0
    c4ee:	f000 8087 	beq.w	c600 <__multiply+0x144>
    c4f2:	9b01      	ldr	r3, [sp, #4]
    c4f4:	f103 0914 	add.w	r9, r3, #20
    c4f8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c4fc:	45d1      	cmp	r9, sl
    c4fe:	d205      	bcs.n	c50c <__multiply+0x50>
    c500:	464b      	mov	r3, r9
    c502:	2200      	movs	r2, #0
    c504:	f843 2b04 	str.w	r2, [r3], #4
    c508:	459a      	cmp	sl, r3
    c50a:	d8fb      	bhi.n	c504 <__multiply+0x48>
    c50c:	f108 0814 	add.w	r8, r8, #20
    c510:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    c514:	f104 0314 	add.w	r3, r4, #20
    c518:	45d8      	cmp	r8, fp
    c51a:	461a      	mov	r2, r3
    c51c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    c520:	d25f      	bcs.n	c5e2 <__multiply+0x126>
    c522:	1b2b      	subs	r3, r5, r4
    c524:	3b15      	subs	r3, #21
    c526:	f023 0303 	bic.w	r3, r3, #3
    c52a:	3304      	adds	r3, #4
    c52c:	3415      	adds	r4, #21
    c52e:	42a5      	cmp	r5, r4
    c530:	bf38      	it	cc
    c532:	2304      	movcc	r3, #4
    c534:	e9cd a702 	strd	sl, r7, [sp, #8]
    c538:	46ac      	mov	ip, r5
    c53a:	461f      	mov	r7, r3
    c53c:	4692      	mov	sl, r2
    c53e:	e005      	b.n	c54c <__multiply+0x90>
    c540:	0c09      	lsrs	r1, r1, #16
    c542:	d129      	bne.n	c598 <__multiply+0xdc>
    c544:	45c3      	cmp	fp, r8
    c546:	f109 0904 	add.w	r9, r9, #4
    c54a:	d948      	bls.n	c5de <__multiply+0x122>
    c54c:	f858 1b04 	ldr.w	r1, [r8], #4
    c550:	b28d      	uxth	r5, r1
    c552:	2d00      	cmp	r5, #0
    c554:	d0f4      	beq.n	c540 <__multiply+0x84>
    c556:	4656      	mov	r6, sl
    c558:	464c      	mov	r4, r9
    c55a:	2300      	movs	r3, #0
    c55c:	f856 1b04 	ldr.w	r1, [r6], #4
    c560:	6822      	ldr	r2, [r4, #0]
    c562:	fa1f fe81 	uxth.w	lr, r1
    c566:	b290      	uxth	r0, r2
    c568:	0c09      	lsrs	r1, r1, #16
    c56a:	fb05 000e 	mla	r0, r5, lr, r0
    c56e:	0c12      	lsrs	r2, r2, #16
    c570:	4403      	add	r3, r0
    c572:	fb05 2201 	mla	r2, r5, r1, r2
    c576:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c57a:	b29b      	uxth	r3, r3
    c57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c580:	45b4      	cmp	ip, r6
    c582:	f844 3b04 	str.w	r3, [r4], #4
    c586:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c58a:	d8e7      	bhi.n	c55c <__multiply+0xa0>
    c58c:	f849 3007 	str.w	r3, [r9, r7]
    c590:	f858 1c04 	ldr.w	r1, [r8, #-4]
    c594:	0c09      	lsrs	r1, r1, #16
    c596:	d0d5      	beq.n	c544 <__multiply+0x88>
    c598:	f8d9 3000 	ldr.w	r3, [r9]
    c59c:	4650      	mov	r0, sl
    c59e:	461a      	mov	r2, r3
    c5a0:	464c      	mov	r4, r9
    c5a2:	2600      	movs	r6, #0
    c5a4:	8805      	ldrh	r5, [r0, #0]
    c5a6:	0c12      	lsrs	r2, r2, #16
    c5a8:	fb01 2205 	mla	r2, r1, r5, r2
    c5ac:	4416      	add	r6, r2
    c5ae:	b29b      	uxth	r3, r3
    c5b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    c5b4:	f844 3b04 	str.w	r3, [r4], #4
    c5b8:	f850 5b04 	ldr.w	r5, [r0], #4
    c5bc:	6822      	ldr	r2, [r4, #0]
    c5be:	0c2d      	lsrs	r5, r5, #16
    c5c0:	b293      	uxth	r3, r2
    c5c2:	fb01 3305 	mla	r3, r1, r5, r3
    c5c6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    c5ca:	4584      	cmp	ip, r0
    c5cc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    c5d0:	d8e8      	bhi.n	c5a4 <__multiply+0xe8>
    c5d2:	45c3      	cmp	fp, r8
    c5d4:	f849 3007 	str.w	r3, [r9, r7]
    c5d8:	f109 0904 	add.w	r9, r9, #4
    c5dc:	d8b6      	bhi.n	c54c <__multiply+0x90>
    c5de:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    c5e2:	2f00      	cmp	r7, #0
    c5e4:	dc02      	bgt.n	c5ec <__multiply+0x130>
    c5e6:	e005      	b.n	c5f4 <__multiply+0x138>
    c5e8:	3f01      	subs	r7, #1
    c5ea:	d003      	beq.n	c5f4 <__multiply+0x138>
    c5ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    c5f0:	2b00      	cmp	r3, #0
    c5f2:	d0f9      	beq.n	c5e8 <__multiply+0x12c>
    c5f4:	9b01      	ldr	r3, [sp, #4]
    c5f6:	4618      	mov	r0, r3
    c5f8:	611f      	str	r7, [r3, #16]
    c5fa:	b005      	add	sp, #20
    c5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c600:	4b03      	ldr	r3, [pc, #12]	; (c610 <__multiply+0x154>)
    c602:	4804      	ldr	r0, [pc, #16]	; (c614 <__multiply+0x158>)
    c604:	9a01      	ldr	r2, [sp, #4]
    c606:	f44f 71b1 	mov.w	r1, #354	; 0x162
    c60a:	f002 f97d 	bl	e908 <__assert_func>
    c60e:	bf00      	nop
    c610:	20000ac8 	.word	0x20000ac8
    c614:	20000adc 	.word	0x20000adc

0000c618 <__pow5mult>:
    c618:	f012 0303 	ands.w	r3, r2, #3
    c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c620:	4614      	mov	r4, r2
    c622:	4606      	mov	r6, r0
    c624:	d132      	bne.n	c68c <__pow5mult+0x74>
    c626:	460d      	mov	r5, r1
    c628:	10a4      	asrs	r4, r4, #2
    c62a:	d020      	beq.n	c66e <__pow5mult+0x56>
    c62c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    c630:	f1b8 0f00 	cmp.w	r8, #0
    c634:	d033      	beq.n	c69e <__pow5mult+0x86>
    c636:	07e3      	lsls	r3, r4, #31
    c638:	f04f 0700 	mov.w	r7, #0
    c63c:	d407      	bmi.n	c64e <__pow5mult+0x36>
    c63e:	1064      	asrs	r4, r4, #1
    c640:	d015      	beq.n	c66e <__pow5mult+0x56>
    c642:	f8d8 0000 	ldr.w	r0, [r8]
    c646:	b1a8      	cbz	r0, c674 <__pow5mult+0x5c>
    c648:	4680      	mov	r8, r0
    c64a:	07e3      	lsls	r3, r4, #31
    c64c:	d5f7      	bpl.n	c63e <__pow5mult+0x26>
    c64e:	4642      	mov	r2, r8
    c650:	4629      	mov	r1, r5
    c652:	4630      	mov	r0, r6
    c654:	f7ff ff32 	bl	c4bc <__multiply>
    c658:	b1b5      	cbz	r5, c688 <__pow5mult+0x70>
    c65a:	6869      	ldr	r1, [r5, #4]
    c65c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    c65e:	1064      	asrs	r4, r4, #1
    c660:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c664:	602a      	str	r2, [r5, #0]
    c666:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    c66a:	4605      	mov	r5, r0
    c66c:	d1e9      	bne.n	c642 <__pow5mult+0x2a>
    c66e:	4628      	mov	r0, r5
    c670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c674:	4642      	mov	r2, r8
    c676:	4641      	mov	r1, r8
    c678:	4630      	mov	r0, r6
    c67a:	f7ff ff1f 	bl	c4bc <__multiply>
    c67e:	f8c8 0000 	str.w	r0, [r8]
    c682:	6007      	str	r7, [r0, #0]
    c684:	4680      	mov	r8, r0
    c686:	e7e0      	b.n	c64a <__pow5mult+0x32>
    c688:	4605      	mov	r5, r0
    c68a:	e7d8      	b.n	c63e <__pow5mult+0x26>
    c68c:	3b01      	subs	r3, #1
    c68e:	4a0f      	ldr	r2, [pc, #60]	; (c6cc <__pow5mult+0xb4>)
    c690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c694:	2300      	movs	r3, #0
    c696:	f7ff fe41 	bl	c31c <__multadd>
    c69a:	4605      	mov	r5, r0
    c69c:	e7c4      	b.n	c628 <__pow5mult+0x10>
    c69e:	2101      	movs	r1, #1
    c6a0:	4630      	mov	r0, r6
    c6a2:	f7ff fe0b 	bl	c2bc <_Balloc>
    c6a6:	4680      	mov	r8, r0
    c6a8:	b140      	cbz	r0, c6bc <__pow5mult+0xa4>
    c6aa:	2301      	movs	r3, #1
    c6ac:	f240 2271 	movw	r2, #625	; 0x271
    c6b0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    c6b4:	2300      	movs	r3, #0
    c6b6:	6430      	str	r0, [r6, #64]	; 0x40
    c6b8:	6003      	str	r3, [r0, #0]
    c6ba:	e7bc      	b.n	c636 <__pow5mult+0x1e>
    c6bc:	4b04      	ldr	r3, [pc, #16]	; (c6d0 <__pow5mult+0xb8>)
    c6be:	4805      	ldr	r0, [pc, #20]	; (c6d4 <__pow5mult+0xbc>)
    c6c0:	4642      	mov	r2, r8
    c6c2:	f240 1145 	movw	r1, #325	; 0x145
    c6c6:	f002 f91f 	bl	e908 <__assert_func>
    c6ca:	bf00      	nop
    c6cc:	20001098 	.word	0x20001098
    c6d0:	20000ac8 	.word	0x20000ac8
    c6d4:	20000adc 	.word	0x20000adc

0000c6d8 <__lshift>:
    c6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6dc:	460d      	mov	r5, r1
    c6de:	4614      	mov	r4, r2
    c6e0:	692f      	ldr	r7, [r5, #16]
    c6e2:	68ab      	ldr	r3, [r5, #8]
    c6e4:	6849      	ldr	r1, [r1, #4]
    c6e6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    c6ea:	1c7e      	adds	r6, r7, #1
    c6ec:	429e      	cmp	r6, r3
    c6ee:	4680      	mov	r8, r0
    c6f0:	ea4f 1962 	mov.w	r9, r2, asr #5
    c6f4:	dd04      	ble.n	c700 <__lshift+0x28>
    c6f6:	005b      	lsls	r3, r3, #1
    c6f8:	429e      	cmp	r6, r3
    c6fa:	f101 0101 	add.w	r1, r1, #1
    c6fe:	dcfa      	bgt.n	c6f6 <__lshift+0x1e>
    c700:	4640      	mov	r0, r8
    c702:	f7ff fddb 	bl	c2bc <_Balloc>
    c706:	4684      	mov	ip, r0
    c708:	2800      	cmp	r0, #0
    c70a:	d052      	beq.n	c7b2 <__lshift+0xda>
    c70c:	f1b9 0f00 	cmp.w	r9, #0
    c710:	f100 0214 	add.w	r2, r0, #20
    c714:	dd0e      	ble.n	c734 <__lshift+0x5c>
    c716:	f109 0105 	add.w	r1, r9, #5
    c71a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    c71e:	4613      	mov	r3, r2
    c720:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c724:	2000      	movs	r0, #0
    c726:	f843 0b04 	str.w	r0, [r3], #4
    c72a:	428b      	cmp	r3, r1
    c72c:	d1fb      	bne.n	c726 <__lshift+0x4e>
    c72e:	f1ae 0314 	sub.w	r3, lr, #20
    c732:	441a      	add	r2, r3
    c734:	6929      	ldr	r1, [r5, #16]
    c736:	f105 0314 	add.w	r3, r5, #20
    c73a:	f014 0e1f 	ands.w	lr, r4, #31
    c73e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c742:	d02e      	beq.n	c7a2 <__lshift+0xca>
    c744:	f1ce 0920 	rsb	r9, lr, #32
    c748:	4610      	mov	r0, r2
    c74a:	f04f 0a00 	mov.w	sl, #0
    c74e:	681c      	ldr	r4, [r3, #0]
    c750:	fa04 f40e 	lsl.w	r4, r4, lr
    c754:	ea44 040a 	orr.w	r4, r4, sl
    c758:	f840 4b04 	str.w	r4, [r0], #4
    c75c:	f853 4b04 	ldr.w	r4, [r3], #4
    c760:	4299      	cmp	r1, r3
    c762:	fa24 fa09 	lsr.w	sl, r4, r9
    c766:	d8f2      	bhi.n	c74e <__lshift+0x76>
    c768:	1b4b      	subs	r3, r1, r5
    c76a:	3b15      	subs	r3, #21
    c76c:	f023 0303 	bic.w	r3, r3, #3
    c770:	3304      	adds	r3, #4
    c772:	f105 0015 	add.w	r0, r5, #21
    c776:	4281      	cmp	r1, r0
    c778:	bf38      	it	cc
    c77a:	2304      	movcc	r3, #4
    c77c:	f1ba 0f00 	cmp.w	sl, #0
    c780:	bf18      	it	ne
    c782:	4637      	movne	r7, r6
    c784:	f842 a003 	str.w	sl, [r2, r3]
    c788:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c78c:	686a      	ldr	r2, [r5, #4]
    c78e:	f8cc 7010 	str.w	r7, [ip, #16]
    c792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c796:	6029      	str	r1, [r5, #0]
    c798:	4660      	mov	r0, ip
    c79a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    c79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7a2:	3a04      	subs	r2, #4
    c7a4:	f853 0b04 	ldr.w	r0, [r3], #4
    c7a8:	f842 0f04 	str.w	r0, [r2, #4]!
    c7ac:	4299      	cmp	r1, r3
    c7ae:	d8f9      	bhi.n	c7a4 <__lshift+0xcc>
    c7b0:	e7ea      	b.n	c788 <__lshift+0xb0>
    c7b2:	4b03      	ldr	r3, [pc, #12]	; (c7c0 <__lshift+0xe8>)
    c7b4:	4803      	ldr	r0, [pc, #12]	; (c7c4 <__lshift+0xec>)
    c7b6:	4662      	mov	r2, ip
    c7b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    c7bc:	f002 f8a4 	bl	e908 <__assert_func>
    c7c0:	20000ac8 	.word	0x20000ac8
    c7c4:	20000adc 	.word	0x20000adc

0000c7c8 <__mcmp>:
    c7c8:	690b      	ldr	r3, [r1, #16]
    c7ca:	4684      	mov	ip, r0
    c7cc:	6900      	ldr	r0, [r0, #16]
    c7ce:	1ac0      	subs	r0, r0, r3
    c7d0:	d116      	bne.n	c800 <__mcmp+0x38>
    c7d2:	f10c 0c14 	add.w	ip, ip, #20
    c7d6:	3114      	adds	r1, #20
    c7d8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    c7dc:	b410      	push	{r4}
    c7de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    c7e2:	e001      	b.n	c7e8 <__mcmp+0x20>
    c7e4:	4594      	cmp	ip, r2
    c7e6:	d208      	bcs.n	c7fa <__mcmp+0x32>
    c7e8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c7ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c7f0:	428c      	cmp	r4, r1
    c7f2:	d0f7      	beq.n	c7e4 <__mcmp+0x1c>
    c7f4:	d205      	bcs.n	c802 <__mcmp+0x3a>
    c7f6:	f04f 30ff 	mov.w	r0, #4294967295
    c7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    c7fe:	4770      	bx	lr
    c800:	4770      	bx	lr
    c802:	2001      	movs	r0, #1
    c804:	f85d 4b04 	ldr.w	r4, [sp], #4
    c808:	4770      	bx	lr
    c80a:	bf00      	nop

0000c80c <__mdiff>:
    c80c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c810:	690f      	ldr	r7, [r1, #16]
    c812:	6913      	ldr	r3, [r2, #16]
    c814:	1aff      	subs	r7, r7, r3
    c816:	2f00      	cmp	r7, #0
    c818:	460e      	mov	r6, r1
    c81a:	4690      	mov	r8, r2
    c81c:	d17f      	bne.n	c91e <__mdiff+0x112>
    c81e:	f101 0514 	add.w	r5, r1, #20
    c822:	3214      	adds	r2, #20
    c824:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c828:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c82c:	e001      	b.n	c832 <__mdiff+0x26>
    c82e:	429d      	cmp	r5, r3
    c830:	d278      	bcs.n	c924 <__mdiff+0x118>
    c832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c836:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c83a:	42a1      	cmp	r1, r4
    c83c:	d0f7      	beq.n	c82e <__mdiff+0x22>
    c83e:	d369      	bcc.n	c914 <__mdiff+0x108>
    c840:	6871      	ldr	r1, [r6, #4]
    c842:	f7ff fd3b 	bl	c2bc <_Balloc>
    c846:	4681      	mov	r9, r0
    c848:	2800      	cmp	r0, #0
    c84a:	d077      	beq.n	c93c <__mdiff+0x130>
    c84c:	6935      	ldr	r5, [r6, #16]
    c84e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    c852:	60c7      	str	r7, [r0, #12]
    c854:	f108 0e14 	add.w	lr, r8, #20
    c858:	f106 0014 	add.w	r0, r6, #20
    c85c:	f109 0a14 	add.w	sl, r9, #20
    c860:	f106 0110 	add.w	r1, r6, #16
    c864:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    c868:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    c86c:	4656      	mov	r6, sl
    c86e:	f04f 0c00 	mov.w	ip, #0
    c872:	f85e 4b04 	ldr.w	r4, [lr], #4
    c876:	f851 bf04 	ldr.w	fp, [r1, #4]!
    c87a:	b2a3      	uxth	r3, r4
    c87c:	fa1c fc8b 	uxtah	ip, ip, fp
    c880:	ebac 0303 	sub.w	r3, ip, r3
    c884:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c888:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    c88c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    c890:	b29b      	uxth	r3, r3
    c892:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c896:	4572      	cmp	r2, lr
    c898:	f846 3b04 	str.w	r3, [r6], #4
    c89c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    c8a0:	d8e7      	bhi.n	c872 <__mdiff+0x66>
    c8a2:	eba2 0108 	sub.w	r1, r2, r8
    c8a6:	3915      	subs	r1, #21
    c8a8:	f108 0815 	add.w	r8, r8, #21
    c8ac:	4542      	cmp	r2, r8
    c8ae:	f021 0403 	bic.w	r4, r1, #3
    c8b2:	f104 0404 	add.w	r4, r4, #4
    c8b6:	bf38      	it	cc
    c8b8:	2404      	movcc	r4, #4
    c8ba:	4420      	add	r0, r4
    c8bc:	f021 0203 	bic.w	r2, r1, #3
    c8c0:	bf38      	it	cc
    c8c2:	2200      	movcc	r2, #0
    c8c4:	4287      	cmp	r7, r0
    c8c6:	4452      	add	r2, sl
    c8c8:	4454      	add	r4, sl
    c8ca:	d918      	bls.n	c8fe <__mdiff+0xf2>
    c8cc:	4626      	mov	r6, r4
    c8ce:	4601      	mov	r1, r0
    c8d0:	f851 3b04 	ldr.w	r3, [r1], #4
    c8d4:	fa1c fc83 	uxtah	ip, ip, r3
    c8d8:	ea4f 422c 	mov.w	r2, ip, asr #16
    c8dc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c8e0:	fa1f fc8c 	uxth.w	ip, ip
    c8e4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    c8e8:	428f      	cmp	r7, r1
    c8ea:	f846 3b04 	str.w	r3, [r6], #4
    c8ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
    c8f2:	d8ed      	bhi.n	c8d0 <__mdiff+0xc4>
    c8f4:	3f01      	subs	r7, #1
    c8f6:	1a3f      	subs	r7, r7, r0
    c8f8:	f027 0703 	bic.w	r7, r7, #3
    c8fc:	19e2      	adds	r2, r4, r7
    c8fe:	b923      	cbnz	r3, c90a <__mdiff+0xfe>
    c900:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    c904:	3d01      	subs	r5, #1
    c906:	2b00      	cmp	r3, #0
    c908:	d0fa      	beq.n	c900 <__mdiff+0xf4>
    c90a:	f8c9 5010 	str.w	r5, [r9, #16]
    c90e:	4648      	mov	r0, r9
    c910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c914:	4633      	mov	r3, r6
    c916:	2701      	movs	r7, #1
    c918:	4646      	mov	r6, r8
    c91a:	4698      	mov	r8, r3
    c91c:	e790      	b.n	c840 <__mdiff+0x34>
    c91e:	dbf9      	blt.n	c914 <__mdiff+0x108>
    c920:	2700      	movs	r7, #0
    c922:	e78d      	b.n	c840 <__mdiff+0x34>
    c924:	2100      	movs	r1, #0
    c926:	f7ff fcc9 	bl	c2bc <_Balloc>
    c92a:	4681      	mov	r9, r0
    c92c:	b168      	cbz	r0, c94a <__mdiff+0x13e>
    c92e:	2201      	movs	r2, #1
    c930:	2300      	movs	r3, #0
    c932:	e9c9 2304 	strd	r2, r3, [r9, #16]
    c936:	4648      	mov	r0, r9
    c938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c93c:	4b06      	ldr	r3, [pc, #24]	; (c958 <__mdiff+0x14c>)
    c93e:	4807      	ldr	r0, [pc, #28]	; (c95c <__mdiff+0x150>)
    c940:	464a      	mov	r2, r9
    c942:	f240 2145 	movw	r1, #581	; 0x245
    c946:	f001 ffdf 	bl	e908 <__assert_func>
    c94a:	4b03      	ldr	r3, [pc, #12]	; (c958 <__mdiff+0x14c>)
    c94c:	4803      	ldr	r0, [pc, #12]	; (c95c <__mdiff+0x150>)
    c94e:	464a      	mov	r2, r9
    c950:	f240 2137 	movw	r1, #567	; 0x237
    c954:	f001 ffd8 	bl	e908 <__assert_func>
    c958:	20000ac8 	.word	0x20000ac8
    c95c:	20000adc 	.word	0x20000adc

0000c960 <__d2b>:
    c960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c964:	4688      	mov	r8, r1
    c966:	b083      	sub	sp, #12
    c968:	2101      	movs	r1, #1
    c96a:	ec57 6b10 	vmov	r6, r7, d0
    c96e:	4615      	mov	r5, r2
    c970:	f7ff fca4 	bl	c2bc <_Balloc>
    c974:	4604      	mov	r4, r0
    c976:	2800      	cmp	r0, #0
    c978:	d051      	beq.n	ca1e <__d2b+0xbe>
    c97a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    c97e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    c982:	f1b9 0f00 	cmp.w	r9, #0
    c986:	d001      	beq.n	c98c <__d2b+0x2c>
    c988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c98c:	2e00      	cmp	r6, #0
    c98e:	9301      	str	r3, [sp, #4]
    c990:	d118      	bne.n	c9c4 <__d2b+0x64>
    c992:	a801      	add	r0, sp, #4
    c994:	f7ff fd34 	bl	c400 <__lo0bits>
    c998:	9a01      	ldr	r2, [sp, #4]
    c99a:	6162      	str	r2, [r4, #20]
    c99c:	2201      	movs	r2, #1
    c99e:	f100 0320 	add.w	r3, r0, #32
    c9a2:	6122      	str	r2, [r4, #16]
    c9a4:	f1b9 0f00 	cmp.w	r9, #0
    c9a8:	d025      	beq.n	c9f6 <__d2b+0x96>
    c9aa:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    c9ae:	eb09 0203 	add.w	r2, r9, r3
    c9b2:	4620      	mov	r0, r4
    c9b4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    c9b8:	f8c8 2000 	str.w	r2, [r8]
    c9bc:	602b      	str	r3, [r5, #0]
    c9be:	b003      	add	sp, #12
    c9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c9c4:	4668      	mov	r0, sp
    c9c6:	9600      	str	r6, [sp, #0]
    c9c8:	f7ff fd1a 	bl	c400 <__lo0bits>
    c9cc:	4603      	mov	r3, r0
    c9ce:	b310      	cbz	r0, ca16 <__d2b+0xb6>
    c9d0:	e9dd 0200 	ldrd	r0, r2, [sp]
    c9d4:	f1c3 0120 	rsb	r1, r3, #32
    c9d8:	fa02 f101 	lsl.w	r1, r2, r1
    c9dc:	4301      	orrs	r1, r0
    c9de:	40da      	lsrs	r2, r3
    c9e0:	6161      	str	r1, [r4, #20]
    c9e2:	9201      	str	r2, [sp, #4]
    c9e4:	2a00      	cmp	r2, #0
    c9e6:	61a2      	str	r2, [r4, #24]
    c9e8:	bf14      	ite	ne
    c9ea:	2202      	movne	r2, #2
    c9ec:	2201      	moveq	r2, #1
    c9ee:	6122      	str	r2, [r4, #16]
    c9f0:	f1b9 0f00 	cmp.w	r9, #0
    c9f4:	d1d9      	bne.n	c9aa <__d2b+0x4a>
    c9f6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    c9fa:	f8c8 3000 	str.w	r3, [r8]
    c9fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    ca02:	6918      	ldr	r0, [r3, #16]
    ca04:	f7ff fcdc 	bl	c3c0 <__hi0bits>
    ca08:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    ca0c:	4620      	mov	r0, r4
    ca0e:	602b      	str	r3, [r5, #0]
    ca10:	b003      	add	sp, #12
    ca12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ca16:	9a00      	ldr	r2, [sp, #0]
    ca18:	6162      	str	r2, [r4, #20]
    ca1a:	9a01      	ldr	r2, [sp, #4]
    ca1c:	e7e2      	b.n	c9e4 <__d2b+0x84>
    ca1e:	4b03      	ldr	r3, [pc, #12]	; (ca2c <__d2b+0xcc>)
    ca20:	4803      	ldr	r0, [pc, #12]	; (ca30 <__d2b+0xd0>)
    ca22:	4622      	mov	r2, r4
    ca24:	f240 310f 	movw	r1, #783	; 0x30f
    ca28:	f001 ff6e 	bl	e908 <__assert_func>
    ca2c:	20000ac8 	.word	0x20000ac8
    ca30:	20000adc 	.word	0x20000adc

0000ca34 <__ascii_wctomb>:
    ca34:	b149      	cbz	r1, ca4a <__ascii_wctomb+0x16>
    ca36:	2aff      	cmp	r2, #255	; 0xff
    ca38:	d802      	bhi.n	ca40 <__ascii_wctomb+0xc>
    ca3a:	700a      	strb	r2, [r1, #0]
    ca3c:	2001      	movs	r0, #1
    ca3e:	4770      	bx	lr
    ca40:	238a      	movs	r3, #138	; 0x8a
    ca42:	6003      	str	r3, [r0, #0]
    ca44:	f04f 30ff 	mov.w	r0, #4294967295
    ca48:	4770      	bx	lr
    ca4a:	4608      	mov	r0, r1
    ca4c:	4770      	bx	lr
    ca4e:	bf00      	nop

0000ca50 <_svfprintf_r>:
    ca50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca54:	ed2d 8b08 	vpush	{d8-d11}
    ca58:	b0d1      	sub	sp, #324	; 0x144
    ca5a:	460c      	mov	r4, r1
    ca5c:	ee0b 1a10 	vmov	s22, r1
    ca60:	4690      	mov	r8, r2
    ca62:	9308      	str	r3, [sp, #32]
    ca64:	4683      	mov	fp, r0
    ca66:	f001 febb 	bl	e7e0 <_localeconv_r>
    ca6a:	6803      	ldr	r3, [r0, #0]
    ca6c:	9312      	str	r3, [sp, #72]	; 0x48
    ca6e:	4618      	mov	r0, r3
    ca70:	f7ff fa06 	bl	be80 <strlen>
    ca74:	af20      	add	r7, sp, #128	; 0x80
    ca76:	9010      	str	r0, [sp, #64]	; 0x40
    ca78:	2208      	movs	r2, #8
    ca7a:	2100      	movs	r1, #0
    ca7c:	4638      	mov	r0, r7
    ca7e:	f7fe fe99 	bl	b7b4 <memset>
    ca82:	89a3      	ldrh	r3, [r4, #12]
    ca84:	061b      	lsls	r3, r3, #24
    ca86:	d503      	bpl.n	ca90 <_svfprintf_r+0x40>
    ca88:	6923      	ldr	r3, [r4, #16]
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	f000 8755 	beq.w	d93a <_svfprintf_r+0xeea>
    ca90:	2300      	movs	r3, #0
    ca92:	ed9f 8b83 	vldr	d8, [pc, #524]	; cca0 <_svfprintf_r+0x250>
    ca96:	ed9f 9b84 	vldr	d9, [pc, #528]	; cca8 <_svfprintf_r+0x258>
    ca9a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    ca9e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    caa2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    caa6:	aa27      	add	r2, sp, #156	; 0x9c
    caa8:	930e      	str	r3, [sp, #56]	; 0x38
    caaa:	9224      	str	r2, [sp, #144]	; 0x90
    caac:	4692      	mov	sl, r2
    caae:	9311      	str	r3, [sp, #68]	; 0x44
    cab0:	9304      	str	r3, [sp, #16]
    cab2:	4644      	mov	r4, r8
    cab4:	46a1      	mov	r9, r4
    cab6:	4b7e      	ldr	r3, [pc, #504]	; (ccb0 <_svfprintf_r+0x260>)
    cab8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cabc:	f7fe ff64 	bl	b988 <__locale_mb_cur_max>
    cac0:	464a      	mov	r2, r9
    cac2:	4603      	mov	r3, r0
    cac4:	a91c      	add	r1, sp, #112	; 0x70
    cac6:	9700      	str	r7, [sp, #0]
    cac8:	4658      	mov	r0, fp
    caca:	47a8      	blx	r5
    cacc:	2800      	cmp	r0, #0
    cace:	f000 80b0 	beq.w	cc32 <_svfprintf_r+0x1e2>
    cad2:	f2c0 80a6 	blt.w	cc22 <_svfprintf_r+0x1d2>
    cad6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cad8:	2a25      	cmp	r2, #37	; 0x25
    cada:	4603      	mov	r3, r0
    cadc:	d001      	beq.n	cae2 <_svfprintf_r+0x92>
    cade:	4499      	add	r9, r3
    cae0:	e7e9      	b.n	cab6 <_svfprintf_r+0x66>
    cae2:	ebb9 0504 	subs.w	r5, r9, r4
    cae6:	4606      	mov	r6, r0
    cae8:	f040 80a7 	bne.w	cc3a <_svfprintf_r+0x1ea>
    caec:	2300      	movs	r3, #0
    caee:	f04f 32ff 	mov.w	r2, #4294967295
    caf2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    caf6:	4698      	mov	r8, r3
    caf8:	9306      	str	r3, [sp, #24]
    cafa:	f109 0901 	add.w	r9, r9, #1
    cafe:	f899 3000 	ldrb.w	r3, [r9]
    cb02:	9203      	str	r2, [sp, #12]
    cb04:	252b      	movs	r5, #43	; 0x2b
    cb06:	2620      	movs	r6, #32
    cb08:	f109 0901 	add.w	r9, r9, #1
    cb0c:	f1a3 0220 	sub.w	r2, r3, #32
    cb10:	2a5a      	cmp	r2, #90	; 0x5a
    cb12:	f200 80cf 	bhi.w	ccb4 <_svfprintf_r+0x264>
    cb16:	e8df f012 	tbh	[pc, r2, lsl #1]
    cb1a:	02e8      	.short	0x02e8
    cb1c:	00cd00cd 	.word	0x00cd00cd
    cb20:	00cd02e3 	.word	0x00cd02e3
    cb24:	00cd00cd 	.word	0x00cd00cd
    cb28:	00cd006a 	.word	0x00cd006a
    cb2c:	020500cd 	.word	0x020500cd
    cb30:	00cd0284 	.word	0x00cd0284
    cb34:	02c90210 	.word	0x02c90210
    cb38:	02bd00cd 	.word	0x02bd00cd
    cb3c:	005b005b 	.word	0x005b005b
    cb40:	005b005b 	.word	0x005b005b
    cb44:	005b005b 	.word	0x005b005b
    cb48:	005b005b 	.word	0x005b005b
    cb4c:	00cd005b 	.word	0x00cd005b
    cb50:	00cd00cd 	.word	0x00cd00cd
    cb54:	00cd00cd 	.word	0x00cd00cd
    cb58:	00cd00cd 	.word	0x00cd00cd
    cb5c:	00cd0153 	.word	0x00cd0153
    cb60:	021a0183 	.word	0x021a0183
    cb64:	01530153 	.word	0x01530153
    cb68:	00cd0153 	.word	0x00cd0153
    cb6c:	00cd00cd 	.word	0x00cd00cd
    cb70:	021500cd 	.word	0x021500cd
    cb74:	00cd00cd 	.word	0x00cd00cd
    cb78:	00cd0296 	.word	0x00cd0296
    cb7c:	00cd00cd 	.word	0x00cd00cd
    cb80:	00cd01ab 	.word	0x00cd01ab
    cb84:	00cd02aa 	.word	0x00cd02aa
    cb88:	06e300cd 	.word	0x06e300cd
    cb8c:	00cd00cd 	.word	0x00cd00cd
    cb90:	00cd00cd 	.word	0x00cd00cd
    cb94:	00cd00cd 	.word	0x00cd00cd
    cb98:	00cd00cd 	.word	0x00cd00cd
    cb9c:	00cd0153 	.word	0x00cd0153
    cba0:	01de0183 	.word	0x01de0183
    cba4:	01530153 	.word	0x01530153
    cba8:	02770153 	.word	0x02770153
    cbac:	007f01de 	.word	0x007f01de
    cbb0:	028900cd 	.word	0x028900cd
    cbb4:	025f00cd 	.word	0x025f00cd
    cbb8:	022f06e0 	.word	0x022f06e0
    cbbc:	00cd007f 	.word	0x00cd007f
    cbc0:	007c01ab 	.word	0x007c01ab
    cbc4:	00cd06b8 	.word	0x00cd06b8
    cbc8:	06bd00cd 	.word	0x06bd00cd
    cbcc:	007c00cd 	.word	0x007c00cd
    cbd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cbd4:	2100      	movs	r1, #0
    cbd6:	f819 3b01 	ldrb.w	r3, [r9], #1
    cbda:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    cbde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    cbe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cbe6:	2a09      	cmp	r2, #9
    cbe8:	d9f5      	bls.n	cbd6 <_svfprintf_r+0x186>
    cbea:	9106      	str	r1, [sp, #24]
    cbec:	e78e      	b.n	cb0c <_svfprintf_r+0xbc>
    cbee:	4658      	mov	r0, fp
    cbf0:	f001 fdf6 	bl	e7e0 <_localeconv_r>
    cbf4:	6843      	ldr	r3, [r0, #4]
    cbf6:	9315      	str	r3, [sp, #84]	; 0x54
    cbf8:	4618      	mov	r0, r3
    cbfa:	f7ff f941 	bl	be80 <strlen>
    cbfe:	9016      	str	r0, [sp, #88]	; 0x58
    cc00:	4658      	mov	r0, fp
    cc02:	f001 fded 	bl	e7e0 <_localeconv_r>
    cc06:	6883      	ldr	r3, [r0, #8]
    cc08:	9313      	str	r3, [sp, #76]	; 0x4c
    cc0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	f040 862d 	bne.w	d86c <_svfprintf_r+0xe1c>
    cc12:	f899 3000 	ldrb.w	r3, [r9]
    cc16:	e777      	b.n	cb08 <_svfprintf_r+0xb8>
    cc18:	f899 3000 	ldrb.w	r3, [r9]
    cc1c:	f048 0820 	orr.w	r8, r8, #32
    cc20:	e772      	b.n	cb08 <_svfprintf_r+0xb8>
    cc22:	2208      	movs	r2, #8
    cc24:	2100      	movs	r1, #0
    cc26:	4638      	mov	r0, r7
    cc28:	f7fe fdc4 	bl	b7b4 <memset>
    cc2c:	2301      	movs	r3, #1
    cc2e:	4499      	add	r9, r3
    cc30:	e741      	b.n	cab6 <_svfprintf_r+0x66>
    cc32:	ebb9 0504 	subs.w	r5, r9, r4
    cc36:	4606      	mov	r6, r0
    cc38:	d011      	beq.n	cc5e <_svfprintf_r+0x20e>
    cc3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    cc3c:	442b      	add	r3, r5
    cc3e:	9326      	str	r3, [sp, #152]	; 0x98
    cc40:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cc42:	3301      	adds	r3, #1
    cc44:	2b07      	cmp	r3, #7
    cc46:	e9ca 4500 	strd	r4, r5, [sl]
    cc4a:	9325      	str	r3, [sp, #148]	; 0x94
    cc4c:	dc1c      	bgt.n	cc88 <_svfprintf_r+0x238>
    cc4e:	f10a 0a08 	add.w	sl, sl, #8
    cc52:	9b04      	ldr	r3, [sp, #16]
    cc54:	442b      	add	r3, r5
    cc56:	9304      	str	r3, [sp, #16]
    cc58:	2e00      	cmp	r6, #0
    cc5a:	f47f af47 	bne.w	caec <_svfprintf_r+0x9c>
    cc5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    cc60:	2b00      	cmp	r3, #0
    cc62:	f041 820b 	bne.w	e07c <_svfprintf_r+0x162c>
    cc66:	ee1b 3a10 	vmov	r3, s22
    cc6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    cc6e:	f013 0f40 	tst.w	r3, #64	; 0x40
    cc72:	9b04      	ldr	r3, [sp, #16]
    cc74:	bf18      	it	ne
    cc76:	f04f 33ff 	movne.w	r3, #4294967295
    cc7a:	9304      	str	r3, [sp, #16]
    cc7c:	9804      	ldr	r0, [sp, #16]
    cc7e:	b051      	add	sp, #324	; 0x144
    cc80:	ecbd 8b08 	vpop	{d8-d11}
    cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc88:	ee1b 1a10 	vmov	r1, s22
    cc8c:	aa24      	add	r2, sp, #144	; 0x90
    cc8e:	4658      	mov	r0, fp
    cc90:	f002 fde6 	bl	f860 <__ssprint_r>
    cc94:	2800      	cmp	r0, #0
    cc96:	d1e6      	bne.n	cc66 <_svfprintf_r+0x216>
    cc98:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    cc9c:	e7d9      	b.n	cc52 <_svfprintf_r+0x202>
    cc9e:	bf00      	nop
	...
    cca8:	ffffffff 	.word	0xffffffff
    ccac:	7fefffff 	.word	0x7fefffff
    ccb0:	2000439c 	.word	0x2000439c
    ccb4:	930b      	str	r3, [sp, #44]	; 0x2c
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	d0d1      	beq.n	cc5e <_svfprintf_r+0x20e>
    ccba:	2100      	movs	r1, #0
    ccbc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ccc0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    ccc4:	2301      	movs	r3, #1
    ccc6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ccca:	9302      	str	r3, [sp, #8]
    cccc:	9107      	str	r1, [sp, #28]
    ccce:	9305      	str	r3, [sp, #20]
    ccd0:	9103      	str	r1, [sp, #12]
    ccd2:	910f      	str	r1, [sp, #60]	; 0x3c
    ccd4:	ac37      	add	r4, sp, #220	; 0xdc
    ccd6:	f018 0302 	ands.w	r3, r8, #2
    ccda:	9309      	str	r3, [sp, #36]	; 0x24
    ccdc:	d002      	beq.n	cce4 <_svfprintf_r+0x294>
    ccde:	9b02      	ldr	r3, [sp, #8]
    cce0:	3302      	adds	r3, #2
    cce2:	9302      	str	r3, [sp, #8]
    cce4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    cce8:	930a      	str	r3, [sp, #40]	; 0x28
    ccea:	d105      	bne.n	ccf8 <_svfprintf_r+0x2a8>
    ccec:	9b06      	ldr	r3, [sp, #24]
    ccee:	9a02      	ldr	r2, [sp, #8]
    ccf0:	1a9d      	subs	r5, r3, r2
    ccf2:	2d00      	cmp	r5, #0
    ccf4:	f300 8369 	bgt.w	d3ca <_svfprintf_r+0x97a>
    ccf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ccfa:	b189      	cbz	r1, cd20 <_svfprintf_r+0x2d0>
    ccfc:	9925      	ldr	r1, [sp, #148]	; 0x94
    ccfe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    cd02:	3101      	adds	r1, #1
    cd04:	3201      	adds	r2, #1
    cd06:	f8ca 0000 	str.w	r0, [sl]
    cd0a:	2907      	cmp	r1, #7
    cd0c:	f04f 0001 	mov.w	r0, #1
    cd10:	9226      	str	r2, [sp, #152]	; 0x98
    cd12:	9125      	str	r1, [sp, #148]	; 0x94
    cd14:	f8ca 0004 	str.w	r0, [sl, #4]
    cd18:	f300 83a2 	bgt.w	d460 <_svfprintf_r+0xa10>
    cd1c:	f10a 0a08 	add.w	sl, sl, #8
    cd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd22:	b183      	cbz	r3, cd46 <_svfprintf_r+0x2f6>
    cd24:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cd26:	a91a      	add	r1, sp, #104	; 0x68
    cd28:	3301      	adds	r3, #1
    cd2a:	3202      	adds	r2, #2
    cd2c:	f8ca 1000 	str.w	r1, [sl]
    cd30:	2b07      	cmp	r3, #7
    cd32:	f04f 0102 	mov.w	r1, #2
    cd36:	9226      	str	r2, [sp, #152]	; 0x98
    cd38:	9325      	str	r3, [sp, #148]	; 0x94
    cd3a:	f8ca 1004 	str.w	r1, [sl, #4]
    cd3e:	f300 83a3 	bgt.w	d488 <_svfprintf_r+0xa38>
    cd42:	f10a 0a08 	add.w	sl, sl, #8
    cd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd48:	2b80      	cmp	r3, #128	; 0x80
    cd4a:	f000 826c 	beq.w	d226 <_svfprintf_r+0x7d6>
    cd4e:	9b03      	ldr	r3, [sp, #12]
    cd50:	9905      	ldr	r1, [sp, #20]
    cd52:	1a5d      	subs	r5, r3, r1
    cd54:	2d00      	cmp	r5, #0
    cd56:	f300 82a5 	bgt.w	d2a4 <_svfprintf_r+0x854>
    cd5a:	f418 7f80 	tst.w	r8, #256	; 0x100
    cd5e:	f040 820d 	bne.w	d17c <_svfprintf_r+0x72c>
    cd62:	9b05      	ldr	r3, [sp, #20]
    cd64:	f8ca 3004 	str.w	r3, [sl, #4]
    cd68:	441a      	add	r2, r3
    cd6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    cd6c:	f8ca 4000 	str.w	r4, [sl]
    cd70:	3301      	adds	r3, #1
    cd72:	2b07      	cmp	r3, #7
    cd74:	9226      	str	r2, [sp, #152]	; 0x98
    cd76:	9325      	str	r3, [sp, #148]	; 0x94
    cd78:	f300 831b 	bgt.w	d3b2 <_svfprintf_r+0x962>
    cd7c:	f10a 0a08 	add.w	sl, sl, #8
    cd80:	f018 0f04 	tst.w	r8, #4
    cd84:	d005      	beq.n	cd92 <_svfprintf_r+0x342>
    cd86:	9b06      	ldr	r3, [sp, #24]
    cd88:	9902      	ldr	r1, [sp, #8]
    cd8a:	1a5c      	subs	r4, r3, r1
    cd8c:	2c00      	cmp	r4, #0
    cd8e:	f300 8388 	bgt.w	d4a2 <_svfprintf_r+0xa52>
    cd92:	9b04      	ldr	r3, [sp, #16]
    cd94:	9906      	ldr	r1, [sp, #24]
    cd96:	9802      	ldr	r0, [sp, #8]
    cd98:	4281      	cmp	r1, r0
    cd9a:	bfac      	ite	ge
    cd9c:	185b      	addge	r3, r3, r1
    cd9e:	181b      	addlt	r3, r3, r0
    cda0:	9304      	str	r3, [sp, #16]
    cda2:	2a00      	cmp	r2, #0
    cda4:	f040 82b0 	bne.w	d308 <_svfprintf_r+0x8b8>
    cda8:	2300      	movs	r3, #0
    cdaa:	9325      	str	r3, [sp, #148]	; 0x94
    cdac:	9b07      	ldr	r3, [sp, #28]
    cdae:	b11b      	cbz	r3, cdb8 <_svfprintf_r+0x368>
    cdb0:	9907      	ldr	r1, [sp, #28]
    cdb2:	4658      	mov	r0, fp
    cdb4:	f7ff f966 	bl	c084 <_free_r>
    cdb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    cdbc:	464c      	mov	r4, r9
    cdbe:	e679      	b.n	cab4 <_svfprintf_r+0x64>
    cdc0:	930b      	str	r3, [sp, #44]	; 0x2c
    cdc2:	9b08      	ldr	r3, [sp, #32]
    cdc4:	3307      	adds	r3, #7
    cdc6:	f023 0307 	bic.w	r3, r3, #7
    cdca:	ecb3 8b02 	vldmia	r3!, {d8}
    cdce:	eeb0 7bc8 	vabs.f64	d7, d8
    cdd2:	eeb4 7b49 	vcmp.f64	d7, d9
    cdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cdda:	9308      	str	r3, [sp, #32]
    cddc:	f340 84e9 	ble.w	d7b2 <_svfprintf_r+0xd62>
    cde0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    cde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cde8:	f101 8059 	bmi.w	de9e <_svfprintf_r+0x144e>
    cdec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    cdf0:	4cab      	ldr	r4, [pc, #684]	; (d0a0 <_svfprintf_r+0x650>)
    cdf2:	4bac      	ldr	r3, [pc, #688]	; (d0a4 <_svfprintf_r+0x654>)
    cdf4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    cdf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdfa:	2a47      	cmp	r2, #71	; 0x47
    cdfc:	bfc8      	it	gt
    cdfe:	461c      	movgt	r4, r3
    ce00:	2300      	movs	r3, #0
    ce02:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    ce06:	2203      	movs	r2, #3
    ce08:	9307      	str	r3, [sp, #28]
    ce0a:	9202      	str	r2, [sp, #8]
    ce0c:	9205      	str	r2, [sp, #20]
    ce0e:	9303      	str	r3, [sp, #12]
    ce10:	930f      	str	r3, [sp, #60]	; 0x3c
    ce12:	2900      	cmp	r1, #0
    ce14:	f43f af5f 	beq.w	ccd6 <_svfprintf_r+0x286>
    ce18:	9b02      	ldr	r3, [sp, #8]
    ce1a:	3301      	adds	r3, #1
    ce1c:	9302      	str	r3, [sp, #8]
    ce1e:	e75a      	b.n	ccd6 <_svfprintf_r+0x286>
    ce20:	2b43      	cmp	r3, #67	; 0x43
    ce22:	930b      	str	r3, [sp, #44]	; 0x2c
    ce24:	d003      	beq.n	ce2e <_svfprintf_r+0x3de>
    ce26:	f018 0f10 	tst.w	r8, #16
    ce2a:	f000 855d 	beq.w	d8e8 <_svfprintf_r+0xe98>
    ce2e:	9d08      	ldr	r5, [sp, #32]
    ce30:	2208      	movs	r2, #8
    ce32:	2100      	movs	r1, #0
    ce34:	a822      	add	r0, sp, #136	; 0x88
    ce36:	ac37      	add	r4, sp, #220	; 0xdc
    ce38:	f7fe fcbc 	bl	b7b4 <memset>
    ce3c:	ab22      	add	r3, sp, #136	; 0x88
    ce3e:	f855 2b04 	ldr.w	r2, [r5], #4
    ce42:	4621      	mov	r1, r4
    ce44:	4658      	mov	r0, fp
    ce46:	f002 fcc5 	bl	f7d4 <_wcrtomb_r>
    ce4a:	4603      	mov	r3, r0
    ce4c:	3301      	adds	r3, #1
    ce4e:	9005      	str	r0, [sp, #20]
    ce50:	f001 82ee 	beq.w	e430 <_svfprintf_r+0x19e0>
    ce54:	9b05      	ldr	r3, [sp, #20]
    ce56:	9508      	str	r5, [sp, #32]
    ce58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ce5c:	9302      	str	r3, [sp, #8]
    ce5e:	2100      	movs	r1, #0
    ce60:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    ce64:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    ce68:	9107      	str	r1, [sp, #28]
    ce6a:	9103      	str	r1, [sp, #12]
    ce6c:	910f      	str	r1, [sp, #60]	; 0x3c
    ce6e:	e732      	b.n	ccd6 <_svfprintf_r+0x286>
    ce70:	930b      	str	r3, [sp, #44]	; 0x2c
    ce72:	9b08      	ldr	r3, [sp, #32]
    ce74:	461a      	mov	r2, r3
    ce76:	2300      	movs	r3, #0
    ce78:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    ce7c:	4613      	mov	r3, r2
    ce7e:	f853 4b04 	ldr.w	r4, [r3], #4
    ce82:	9308      	str	r3, [sp, #32]
    ce84:	2c00      	cmp	r4, #0
    ce86:	f000 8548 	beq.w	d91a <_svfprintf_r+0xeca>
    ce8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce8c:	2b53      	cmp	r3, #83	; 0x53
    ce8e:	f000 86ec 	beq.w	dc6a <_svfprintf_r+0x121a>
    ce92:	f018 0310 	ands.w	r3, r8, #16
    ce96:	930c      	str	r3, [sp, #48]	; 0x30
    ce98:	f040 86e7 	bne.w	dc6a <_svfprintf_r+0x121a>
    ce9c:	9b03      	ldr	r3, [sp, #12]
    ce9e:	1c5d      	adds	r5, r3, #1
    cea0:	f001 80e5 	beq.w	e06e <_svfprintf_r+0x161e>
    cea4:	990c      	ldr	r1, [sp, #48]	; 0x30
    cea6:	461a      	mov	r2, r3
    cea8:	4620      	mov	r0, r4
    ceaa:	f001 fca1 	bl	e7f0 <memchr>
    ceae:	9007      	str	r0, [sp, #28]
    ceb0:	2800      	cmp	r0, #0
    ceb2:	f001 8328 	beq.w	e506 <_svfprintf_r+0x1ab6>
    ceb6:	9b07      	ldr	r3, [sp, #28]
    ceb8:	1b1a      	subs	r2, r3, r4
    ceba:	9205      	str	r2, [sp, #20]
    cebc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cebe:	9303      	str	r3, [sp, #12]
    cec0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    cec4:	930f      	str	r3, [sp, #60]	; 0x3c
    cec6:	930d      	str	r3, [sp, #52]	; 0x34
    cec8:	9307      	str	r3, [sp, #28]
    ceca:	2373      	movs	r3, #115	; 0x73
    cecc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ced0:	9202      	str	r2, [sp, #8]
    ced2:	930b      	str	r3, [sp, #44]	; 0x2c
    ced4:	e79d      	b.n	ce12 <_svfprintf_r+0x3c2>
    ced6:	f018 0f20 	tst.w	r8, #32
    ceda:	930b      	str	r3, [sp, #44]	; 0x2c
    cedc:	9b08      	ldr	r3, [sp, #32]
    cede:	d03d      	beq.n	cf5c <_svfprintf_r+0x50c>
    cee0:	3307      	adds	r3, #7
    cee2:	f023 0307 	bic.w	r3, r3, #7
    cee6:	461a      	mov	r2, r3
    cee8:	4611      	mov	r1, r2
    ceea:	685b      	ldr	r3, [r3, #4]
    ceec:	f851 2b08 	ldr.w	r2, [r1], #8
    cef0:	9108      	str	r1, [sp, #32]
    cef2:	4619      	mov	r1, r3
    cef4:	2b00      	cmp	r3, #0
    cef6:	f2c0 840c 	blt.w	d712 <_svfprintf_r+0xcc2>
    cefa:	9b03      	ldr	r3, [sp, #12]
    cefc:	3301      	adds	r3, #1
    cefe:	f000 829e 	beq.w	d43e <_svfprintf_r+0x9ee>
    cf02:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    cf06:	ea52 0301 	orrs.w	r3, r2, r1
    cf0a:	9002      	str	r0, [sp, #8]
    cf0c:	f040 8299 	bne.w	d442 <_svfprintf_r+0x9f2>
    cf10:	9b03      	ldr	r3, [sp, #12]
    cf12:	2b00      	cmp	r3, #0
    cf14:	f040 829a 	bne.w	d44c <_svfprintf_r+0x9fc>
    cf18:	4680      	mov	r8, r0
    cf1a:	2300      	movs	r3, #0
    cf1c:	9303      	str	r3, [sp, #12]
    cf1e:	9305      	str	r3, [sp, #20]
    cf20:	ac50      	add	r4, sp, #320	; 0x140
    cf22:	e106      	b.n	d132 <_svfprintf_r+0x6e2>
    cf24:	9b08      	ldr	r3, [sp, #32]
    cf26:	f853 2b04 	ldr.w	r2, [r3], #4
    cf2a:	9206      	str	r2, [sp, #24]
    cf2c:	2a00      	cmp	r2, #0
    cf2e:	f280 8419 	bge.w	d764 <_svfprintf_r+0xd14>
    cf32:	9a06      	ldr	r2, [sp, #24]
    cf34:	9308      	str	r3, [sp, #32]
    cf36:	4252      	negs	r2, r2
    cf38:	9206      	str	r2, [sp, #24]
    cf3a:	f899 3000 	ldrb.w	r3, [r9]
    cf3e:	f048 0804 	orr.w	r8, r8, #4
    cf42:	e5e1      	b.n	cb08 <_svfprintf_r+0xb8>
    cf44:	f899 3000 	ldrb.w	r3, [r9]
    cf48:	f048 0808 	orr.w	r8, r8, #8
    cf4c:	e5dc      	b.n	cb08 <_svfprintf_r+0xb8>
    cf4e:	f048 0810 	orr.w	r8, r8, #16
    cf52:	f018 0f20 	tst.w	r8, #32
    cf56:	930b      	str	r3, [sp, #44]	; 0x2c
    cf58:	9b08      	ldr	r3, [sp, #32]
    cf5a:	d1c1      	bne.n	cee0 <_svfprintf_r+0x490>
    cf5c:	f018 0f10 	tst.w	r8, #16
    cf60:	f040 840b 	bne.w	d77a <_svfprintf_r+0xd2a>
    cf64:	f018 0f40 	tst.w	r8, #64	; 0x40
    cf68:	f000 8403 	beq.w	d772 <_svfprintf_r+0xd22>
    cf6c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    cf70:	9308      	str	r3, [sp, #32]
    cf72:	17d1      	asrs	r1, r2, #31
    cf74:	460b      	mov	r3, r1
    cf76:	e7bd      	b.n	cef4 <_svfprintf_r+0x4a4>
    cf78:	9b08      	ldr	r3, [sp, #32]
    cf7a:	f048 0202 	orr.w	r2, r8, #2
    cf7e:	9202      	str	r2, [sp, #8]
    cf80:	f853 2b04 	ldr.w	r2, [r3], #4
    cf84:	9308      	str	r3, [sp, #32]
    cf86:	f647 0330 	movw	r3, #30768	; 0x7830
    cf8a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    cf8e:	2078      	movs	r0, #120	; 0x78
    cf90:	4b45      	ldr	r3, [pc, #276]	; (d0a8 <_svfprintf_r+0x658>)
    cf92:	9311      	str	r3, [sp, #68]	; 0x44
    cf94:	2100      	movs	r1, #0
    cf96:	2302      	movs	r3, #2
    cf98:	900b      	str	r0, [sp, #44]	; 0x2c
    cf9a:	2000      	movs	r0, #0
    cf9c:	9c03      	ldr	r4, [sp, #12]
    cf9e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    cfa2:	1c60      	adds	r0, r4, #1
    cfa4:	f000 80ad 	beq.w	d102 <_svfprintf_r+0x6b2>
    cfa8:	9802      	ldr	r0, [sp, #8]
    cfaa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    cfae:	ea52 0001 	orrs.w	r0, r2, r1
    cfb2:	f040 80a4 	bne.w	d0fe <_svfprintf_r+0x6ae>
    cfb6:	2c00      	cmp	r4, #0
    cfb8:	f040 86ae 	bne.w	dd18 <_svfprintf_r+0x12c8>
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d1ac      	bne.n	cf1a <_svfprintf_r+0x4ca>
    cfc0:	9b02      	ldr	r3, [sp, #8]
    cfc2:	f013 0301 	ands.w	r3, r3, #1
    cfc6:	9305      	str	r3, [sp, #20]
    cfc8:	f000 83d1 	beq.w	d76e <_svfprintf_r+0xd1e>
    cfcc:	2330      	movs	r3, #48	; 0x30
    cfce:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    cfd2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    cfd6:	e0ac      	b.n	d132 <_svfprintf_r+0x6e2>
    cfd8:	f018 0f20 	tst.w	r8, #32
    cfdc:	f040 83d4 	bne.w	d788 <_svfprintf_r+0xd38>
    cfe0:	f018 0f10 	tst.w	r8, #16
    cfe4:	f040 869f 	bne.w	dd26 <_svfprintf_r+0x12d6>
    cfe8:	f018 0f40 	tst.w	r8, #64	; 0x40
    cfec:	f040 8797 	bne.w	df1e <_svfprintf_r+0x14ce>
    cff0:	f418 7f00 	tst.w	r8, #512	; 0x200
    cff4:	f000 8697 	beq.w	dd26 <_svfprintf_r+0x12d6>
    cff8:	9b08      	ldr	r3, [sp, #32]
    cffa:	9904      	ldr	r1, [sp, #16]
    cffc:	f853 2b04 	ldr.w	r2, [r3], #4
    d000:	9308      	str	r3, [sp, #32]
    d002:	7011      	strb	r1, [r2, #0]
    d004:	464c      	mov	r4, r9
    d006:	e555      	b.n	cab4 <_svfprintf_r+0x64>
    d008:	f899 3000 	ldrb.w	r3, [r9]
    d00c:	2b68      	cmp	r3, #104	; 0x68
    d00e:	bf03      	ittte	eq
    d010:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d014:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    d018:	f109 0901 	addeq.w	r9, r9, #1
    d01c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    d020:	e572      	b.n	cb08 <_svfprintf_r+0xb8>
    d022:	f899 3000 	ldrb.w	r3, [r9]
    d026:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    d02a:	e56d      	b.n	cb08 <_svfprintf_r+0xb8>
    d02c:	f899 3000 	ldrb.w	r3, [r9]
    d030:	2b6c      	cmp	r3, #108	; 0x6c
    d032:	bf03      	ittte	eq
    d034:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d038:	f048 0820 	orreq.w	r8, r8, #32
    d03c:	f109 0901 	addeq.w	r9, r9, #1
    d040:	f048 0810 	orrne.w	r8, r8, #16
    d044:	e560      	b.n	cb08 <_svfprintf_r+0xb8>
    d046:	930b      	str	r3, [sp, #44]	; 0x2c
    d048:	f048 0810 	orr.w	r8, r8, #16
    d04c:	f018 0120 	ands.w	r1, r8, #32
    d050:	f000 8351 	beq.w	d6f6 <_svfprintf_r+0xca6>
    d054:	9b08      	ldr	r3, [sp, #32]
    d056:	3307      	adds	r3, #7
    d058:	f023 0307 	bic.w	r3, r3, #7
    d05c:	6859      	ldr	r1, [r3, #4]
    d05e:	f853 2b08 	ldr.w	r2, [r3], #8
    d062:	9308      	str	r3, [sp, #32]
    d064:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d068:	9302      	str	r3, [sp, #8]
    d06a:	2300      	movs	r3, #0
    d06c:	e795      	b.n	cf9a <_svfprintf_r+0x54a>
    d06e:	930b      	str	r3, [sp, #44]	; 0x2c
    d070:	f048 0310 	orr.w	r3, r8, #16
    d074:	9302      	str	r3, [sp, #8]
    d076:	9b02      	ldr	r3, [sp, #8]
    d078:	f013 0120 	ands.w	r1, r3, #32
    d07c:	f000 8329 	beq.w	d6d2 <_svfprintf_r+0xc82>
    d080:	9b08      	ldr	r3, [sp, #32]
    d082:	3307      	adds	r3, #7
    d084:	f023 0307 	bic.w	r3, r3, #7
    d088:	6859      	ldr	r1, [r3, #4]
    d08a:	f853 2b08 	ldr.w	r2, [r3], #8
    d08e:	9308      	str	r3, [sp, #32]
    d090:	2301      	movs	r3, #1
    d092:	e782      	b.n	cf9a <_svfprintf_r+0x54a>
    d094:	f899 3000 	ldrb.w	r3, [r9]
    d098:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    d09c:	e534      	b.n	cb08 <_svfprintf_r+0xb8>
    d09e:	bf00      	nop
    d0a0:	20000ca8 	.word	0x20000ca8
    d0a4:	20000cac 	.word	0x20000cac
    d0a8:	20000cb8 	.word	0x20000cb8
    d0ac:	4649      	mov	r1, r9
    d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
    d0b2:	2b2a      	cmp	r3, #42	; 0x2a
    d0b4:	f001 8249 	beq.w	e54a <_svfprintf_r+0x1afa>
    d0b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d0bc:	2a09      	cmp	r2, #9
    d0be:	4689      	mov	r9, r1
    d0c0:	bf98      	it	ls
    d0c2:	2100      	movls	r1, #0
    d0c4:	f201 8144 	bhi.w	e350 <_svfprintf_r+0x1900>
    d0c8:	f819 3b01 	ldrb.w	r3, [r9], #1
    d0cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d0d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d0d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d0d8:	2a09      	cmp	r2, #9
    d0da:	d9f5      	bls.n	d0c8 <_svfprintf_r+0x678>
    d0dc:	9103      	str	r1, [sp, #12]
    d0de:	e515      	b.n	cb0c <_svfprintf_r+0xbc>
    d0e0:	f899 3000 	ldrb.w	r3, [r9]
    d0e4:	f048 0801 	orr.w	r8, r8, #1
    d0e8:	e50e      	b.n	cb08 <_svfprintf_r+0xb8>
    d0ea:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    d0ee:	2b00      	cmp	r3, #0
    d0f0:	f47f ad8f 	bne.w	cc12 <_svfprintf_r+0x1c2>
    d0f4:	f899 3000 	ldrb.w	r3, [r9]
    d0f8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    d0fc:	e504      	b.n	cb08 <_svfprintf_r+0xb8>
    d0fe:	f8cd 8008 	str.w	r8, [sp, #8]
    d102:	2b01      	cmp	r3, #1
    d104:	f000 819d 	beq.w	d442 <_svfprintf_r+0x9f2>
    d108:	2b02      	cmp	r3, #2
    d10a:	ac50      	add	r4, sp, #320	; 0x140
    d10c:	d120      	bne.n	d150 <_svfprintf_r+0x700>
    d10e:	9811      	ldr	r0, [sp, #68]	; 0x44
    d110:	f002 030f 	and.w	r3, r2, #15
    d114:	0912      	lsrs	r2, r2, #4
    d116:	5cc3      	ldrb	r3, [r0, r3]
    d118:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d11c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d120:	0909      	lsrs	r1, r1, #4
    d122:	ea52 0301 	orrs.w	r3, r2, r1
    d126:	d1f3      	bne.n	d110 <_svfprintf_r+0x6c0>
    d128:	ab50      	add	r3, sp, #320	; 0x140
    d12a:	1b1b      	subs	r3, r3, r4
    d12c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d130:	9305      	str	r3, [sp, #20]
    d132:	9a05      	ldr	r2, [sp, #20]
    d134:	9803      	ldr	r0, [sp, #12]
    d136:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d13a:	4282      	cmp	r2, r0
    d13c:	f04f 0300 	mov.w	r3, #0
    d140:	bfb8      	it	lt
    d142:	4602      	movlt	r2, r0
    d144:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d148:	9307      	str	r3, [sp, #28]
    d14a:	9202      	str	r2, [sp, #8]
    d14c:	930f      	str	r3, [sp, #60]	; 0x3c
    d14e:	e660      	b.n	ce12 <_svfprintf_r+0x3c2>
    d150:	f002 0307 	and.w	r3, r2, #7
    d154:	08d2      	lsrs	r2, r2, #3
    d156:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d15a:	08c9      	lsrs	r1, r1, #3
    d15c:	3330      	adds	r3, #48	; 0x30
    d15e:	ea52 0501 	orrs.w	r5, r2, r1
    d162:	4620      	mov	r0, r4
    d164:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d168:	d1f2      	bne.n	d150 <_svfprintf_r+0x700>
    d16a:	9a02      	ldr	r2, [sp, #8]
    d16c:	07d1      	lsls	r1, r2, #31
    d16e:	f100 824d 	bmi.w	d60c <_svfprintf_r+0xbbc>
    d172:	ab50      	add	r3, sp, #320	; 0x140
    d174:	1b1b      	subs	r3, r3, r4
    d176:	4690      	mov	r8, r2
    d178:	9305      	str	r3, [sp, #20]
    d17a:	e7da      	b.n	d132 <_svfprintf_r+0x6e2>
    d17c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d17e:	2b65      	cmp	r3, #101	; 0x65
    d180:	f340 80d4 	ble.w	d32c <_svfprintf_r+0x8dc>
    d184:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d18c:	f040 81c1 	bne.w	d512 <_svfprintf_r+0xac2>
    d190:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d192:	49ba      	ldr	r1, [pc, #744]	; (d47c <_svfprintf_r+0xa2c>)
    d194:	f8ca 1000 	str.w	r1, [sl]
    d198:	3301      	adds	r3, #1
    d19a:	3201      	adds	r2, #1
    d19c:	2101      	movs	r1, #1
    d19e:	2b07      	cmp	r3, #7
    d1a0:	9226      	str	r2, [sp, #152]	; 0x98
    d1a2:	9325      	str	r3, [sp, #148]	; 0x94
    d1a4:	f8ca 1004 	str.w	r1, [sl, #4]
    d1a8:	f300 8551 	bgt.w	dc4e <_svfprintf_r+0x11fe>
    d1ac:	f10a 0a08 	add.w	sl, sl, #8
    d1b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d1b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    d1b4:	428b      	cmp	r3, r1
    d1b6:	f280 82d0 	bge.w	d75a <_svfprintf_r+0xd0a>
    d1ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d1bc:	9912      	ldr	r1, [sp, #72]	; 0x48
    d1be:	441a      	add	r2, r3
    d1c0:	e9ca 1300 	strd	r1, r3, [sl]
    d1c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d1c6:	9226      	str	r2, [sp, #152]	; 0x98
    d1c8:	3301      	adds	r3, #1
    d1ca:	2b07      	cmp	r3, #7
    d1cc:	9325      	str	r3, [sp, #148]	; 0x94
    d1ce:	f300 8397 	bgt.w	d900 <_svfprintf_r+0xeb0>
    d1d2:	f10a 0a08 	add.w	sl, sl, #8
    d1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d1d8:	1e5c      	subs	r4, r3, #1
    d1da:	2c00      	cmp	r4, #0
    d1dc:	f77f add0 	ble.w	cd80 <_svfprintf_r+0x330>
    d1e0:	2c10      	cmp	r4, #16
    d1e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d1e4:	f340 856e 	ble.w	dcc4 <_svfprintf_r+0x1274>
    d1e8:	ee1b 6a10 	vmov	r6, s22
    d1ec:	2510      	movs	r5, #16
    d1ee:	e005      	b.n	d1fc <_svfprintf_r+0x7ac>
    d1f0:	f10a 0a08 	add.w	sl, sl, #8
    d1f4:	3c10      	subs	r4, #16
    d1f6:	2c10      	cmp	r4, #16
    d1f8:	f340 8564 	ble.w	dcc4 <_svfprintf_r+0x1274>
    d1fc:	3301      	adds	r3, #1
    d1fe:	49a0      	ldr	r1, [pc, #640]	; (d480 <_svfprintf_r+0xa30>)
    d200:	3210      	adds	r2, #16
    d202:	2b07      	cmp	r3, #7
    d204:	e9ca 1500 	strd	r1, r5, [sl]
    d208:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d20c:	ddf0      	ble.n	d1f0 <_svfprintf_r+0x7a0>
    d20e:	aa24      	add	r2, sp, #144	; 0x90
    d210:	4631      	mov	r1, r6
    d212:	4658      	mov	r0, fp
    d214:	f002 fb24 	bl	f860 <__ssprint_r>
    d218:	2800      	cmp	r0, #0
    d21a:	d17e      	bne.n	d31a <_svfprintf_r+0x8ca>
    d21c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d220:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d224:	e7e6      	b.n	d1f4 <_svfprintf_r+0x7a4>
    d226:	9b06      	ldr	r3, [sp, #24]
    d228:	9902      	ldr	r1, [sp, #8]
    d22a:	1a5d      	subs	r5, r3, r1
    d22c:	2d00      	cmp	r5, #0
    d22e:	f77f ad8e 	ble.w	cd4e <_svfprintf_r+0x2fe>
    d232:	2d10      	cmp	r5, #16
    d234:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d236:	dd21      	ble.n	d27c <_svfprintf_r+0x82c>
    d238:	9409      	str	r4, [sp, #36]	; 0x24
    d23a:	2610      	movs	r6, #16
    d23c:	ee1b 4a10 	vmov	r4, s22
    d240:	e004      	b.n	d24c <_svfprintf_r+0x7fc>
    d242:	3d10      	subs	r5, #16
    d244:	2d10      	cmp	r5, #16
    d246:	f10a 0a08 	add.w	sl, sl, #8
    d24a:	dd16      	ble.n	d27a <_svfprintf_r+0x82a>
    d24c:	3301      	adds	r3, #1
    d24e:	498c      	ldr	r1, [pc, #560]	; (d480 <_svfprintf_r+0xa30>)
    d250:	3210      	adds	r2, #16
    d252:	2b07      	cmp	r3, #7
    d254:	e9ca 1600 	strd	r1, r6, [sl]
    d258:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d25c:	ddf1      	ble.n	d242 <_svfprintf_r+0x7f2>
    d25e:	aa24      	add	r2, sp, #144	; 0x90
    d260:	4621      	mov	r1, r4
    d262:	4658      	mov	r0, fp
    d264:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d268:	f002 fafa 	bl	f860 <__ssprint_r>
    d26c:	2800      	cmp	r0, #0
    d26e:	d154      	bne.n	d31a <_svfprintf_r+0x8ca>
    d270:	3d10      	subs	r5, #16
    d272:	2d10      	cmp	r5, #16
    d274:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d278:	dce8      	bgt.n	d24c <_svfprintf_r+0x7fc>
    d27a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d27c:	4980      	ldr	r1, [pc, #512]	; (d480 <_svfprintf_r+0xa30>)
    d27e:	f8ca 5004 	str.w	r5, [sl, #4]
    d282:	3301      	adds	r3, #1
    d284:	442a      	add	r2, r5
    d286:	2b07      	cmp	r3, #7
    d288:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d28c:	f8ca 1000 	str.w	r1, [sl]
    d290:	f300 8526 	bgt.w	dce0 <_svfprintf_r+0x1290>
    d294:	9b03      	ldr	r3, [sp, #12]
    d296:	9905      	ldr	r1, [sp, #20]
    d298:	1a5d      	subs	r5, r3, r1
    d29a:	2d00      	cmp	r5, #0
    d29c:	f10a 0a08 	add.w	sl, sl, #8
    d2a0:	f77f ad5b 	ble.w	cd5a <_svfprintf_r+0x30a>
    d2a4:	2d10      	cmp	r5, #16
    d2a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d2a8:	dd1f      	ble.n	d2ea <_svfprintf_r+0x89a>
    d2aa:	4651      	mov	r1, sl
    d2ac:	2610      	movs	r6, #16
    d2ae:	ee1b aa10 	vmov	sl, s22
    d2b2:	e004      	b.n	d2be <_svfprintf_r+0x86e>
    d2b4:	3d10      	subs	r5, #16
    d2b6:	2d10      	cmp	r5, #16
    d2b8:	f101 0108 	add.w	r1, r1, #8
    d2bc:	dd14      	ble.n	d2e8 <_svfprintf_r+0x898>
    d2be:	3301      	adds	r3, #1
    d2c0:	486f      	ldr	r0, [pc, #444]	; (d480 <_svfprintf_r+0xa30>)
    d2c2:	3210      	adds	r2, #16
    d2c4:	2b07      	cmp	r3, #7
    d2c6:	e9c1 0600 	strd	r0, r6, [r1]
    d2ca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d2ce:	ddf1      	ble.n	d2b4 <_svfprintf_r+0x864>
    d2d0:	aa24      	add	r2, sp, #144	; 0x90
    d2d2:	4651      	mov	r1, sl
    d2d4:	4658      	mov	r0, fp
    d2d6:	f002 fac3 	bl	f860 <__ssprint_r>
    d2da:	b9f0      	cbnz	r0, d31a <_svfprintf_r+0x8ca>
    d2dc:	3d10      	subs	r5, #16
    d2de:	2d10      	cmp	r5, #16
    d2e0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d2e4:	a927      	add	r1, sp, #156	; 0x9c
    d2e6:	dcea      	bgt.n	d2be <_svfprintf_r+0x86e>
    d2e8:	468a      	mov	sl, r1
    d2ea:	3301      	adds	r3, #1
    d2ec:	4964      	ldr	r1, [pc, #400]	; (d480 <_svfprintf_r+0xa30>)
    d2ee:	f8ca 5004 	str.w	r5, [sl, #4]
    d2f2:	442a      	add	r2, r5
    d2f4:	2b07      	cmp	r3, #7
    d2f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d2fa:	f8ca 1000 	str.w	r1, [sl]
    d2fe:	f300 81da 	bgt.w	d6b6 <_svfprintf_r+0xc66>
    d302:	f10a 0a08 	add.w	sl, sl, #8
    d306:	e528      	b.n	cd5a <_svfprintf_r+0x30a>
    d308:	ee1b 1a10 	vmov	r1, s22
    d30c:	aa24      	add	r2, sp, #144	; 0x90
    d30e:	4658      	mov	r0, fp
    d310:	f002 faa6 	bl	f860 <__ssprint_r>
    d314:	2800      	cmp	r0, #0
    d316:	f43f ad47 	beq.w	cda8 <_svfprintf_r+0x358>
    d31a:	9b07      	ldr	r3, [sp, #28]
    d31c:	2b00      	cmp	r3, #0
    d31e:	f43f aca2 	beq.w	cc66 <_svfprintf_r+0x216>
    d322:	9907      	ldr	r1, [sp, #28]
    d324:	4658      	mov	r0, fp
    d326:	f7fe fead 	bl	c084 <_free_r>
    d32a:	e49c      	b.n	cc66 <_svfprintf_r+0x216>
    d32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d32e:	2b01      	cmp	r3, #1
    d330:	f340 817a 	ble.w	d628 <_svfprintf_r+0xbd8>
    d334:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d336:	f8ca 4000 	str.w	r4, [sl]
    d33a:	3301      	adds	r3, #1
    d33c:	3201      	adds	r2, #1
    d33e:	2101      	movs	r1, #1
    d340:	2b07      	cmp	r3, #7
    d342:	9226      	str	r2, [sp, #152]	; 0x98
    d344:	9325      	str	r3, [sp, #148]	; 0x94
    d346:	f8ca 1004 	str.w	r1, [sl, #4]
    d34a:	f300 81f8 	bgt.w	d73e <_svfprintf_r+0xcee>
    d34e:	f10a 0a08 	add.w	sl, sl, #8
    d352:	9910      	ldr	r1, [sp, #64]	; 0x40
    d354:	9812      	ldr	r0, [sp, #72]	; 0x48
    d356:	3301      	adds	r3, #1
    d358:	440a      	add	r2, r1
    d35a:	2b07      	cmp	r3, #7
    d35c:	e9ca 0100 	strd	r0, r1, [sl]
    d360:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d364:	f300 81dd 	bgt.w	d722 <_svfprintf_r+0xcd2>
    d368:	f10a 0a08 	add.w	sl, sl, #8
    d36c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d374:	f000 8177 	beq.w	d666 <_svfprintf_r+0xc16>
    d378:	990e      	ldr	r1, [sp, #56]	; 0x38
    d37a:	3301      	adds	r3, #1
    d37c:	3901      	subs	r1, #1
    d37e:	3401      	adds	r4, #1
    d380:	440a      	add	r2, r1
    d382:	2b07      	cmp	r3, #7
    d384:	f8ca 4000 	str.w	r4, [sl]
    d388:	9325      	str	r3, [sp, #148]	; 0x94
    d38a:	f8ca 1004 	str.w	r1, [sl, #4]
    d38e:	9226      	str	r2, [sp, #152]	; 0x98
    d390:	f300 815b 	bgt.w	d64a <_svfprintf_r+0xbfa>
    d394:	f10a 0a08 	add.w	sl, sl, #8
    d398:	9914      	ldr	r1, [sp, #80]	; 0x50
    d39a:	f8ca 1004 	str.w	r1, [sl, #4]
    d39e:	3301      	adds	r3, #1
    d3a0:	440a      	add	r2, r1
    d3a2:	2b07      	cmp	r3, #7
    d3a4:	a91e      	add	r1, sp, #120	; 0x78
    d3a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d3aa:	f8ca 1000 	str.w	r1, [sl]
    d3ae:	f77f ace5 	ble.w	cd7c <_svfprintf_r+0x32c>
    d3b2:	ee1b 1a10 	vmov	r1, s22
    d3b6:	aa24      	add	r2, sp, #144	; 0x90
    d3b8:	4658      	mov	r0, fp
    d3ba:	f002 fa51 	bl	f860 <__ssprint_r>
    d3be:	2800      	cmp	r0, #0
    d3c0:	d1ab      	bne.n	d31a <_svfprintf_r+0x8ca>
    d3c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d3c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d3c8:	e4da      	b.n	cd80 <_svfprintf_r+0x330>
    d3ca:	2d10      	cmp	r5, #16
    d3cc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    d3d0:	4e2c      	ldr	r6, [pc, #176]	; (d484 <_svfprintf_r+0xa34>)
    d3d2:	dd24      	ble.n	d41e <_svfprintf_r+0x9ce>
    d3d4:	9417      	str	r4, [sp, #92]	; 0x5c
    d3d6:	2310      	movs	r3, #16
    d3d8:	ee1b 4a10 	vmov	r4, s22
    d3dc:	4608      	mov	r0, r1
    d3de:	e004      	b.n	d3ea <_svfprintf_r+0x99a>
    d3e0:	3d10      	subs	r5, #16
    d3e2:	2d10      	cmp	r5, #16
    d3e4:	f10a 0a08 	add.w	sl, sl, #8
    d3e8:	dd17      	ble.n	d41a <_svfprintf_r+0x9ca>
    d3ea:	3001      	adds	r0, #1
    d3ec:	3210      	adds	r2, #16
    d3ee:	2807      	cmp	r0, #7
    d3f0:	e9ca 6300 	strd	r6, r3, [sl]
    d3f4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    d3f8:	ddf2      	ble.n	d3e0 <_svfprintf_r+0x990>
    d3fa:	aa24      	add	r2, sp, #144	; 0x90
    d3fc:	4621      	mov	r1, r4
    d3fe:	4658      	mov	r0, fp
    d400:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d404:	f002 fa2c 	bl	f860 <__ssprint_r>
    d408:	2800      	cmp	r0, #0
    d40a:	d186      	bne.n	d31a <_svfprintf_r+0x8ca>
    d40c:	3d10      	subs	r5, #16
    d40e:	2d10      	cmp	r5, #16
    d410:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    d414:	f04f 0310 	mov.w	r3, #16
    d418:	dce7      	bgt.n	d3ea <_svfprintf_r+0x99a>
    d41a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d41c:	4601      	mov	r1, r0
    d41e:	3101      	adds	r1, #1
    d420:	442a      	add	r2, r5
    d422:	2907      	cmp	r1, #7
    d424:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    d428:	f8ca 6000 	str.w	r6, [sl]
    d42c:	f8ca 5004 	str.w	r5, [sl, #4]
    d430:	f300 83bd 	bgt.w	dbae <_svfprintf_r+0x115e>
    d434:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d438:	f10a 0a08 	add.w	sl, sl, #8
    d43c:	e45d      	b.n	ccfa <_svfprintf_r+0x2aa>
    d43e:	f8cd 8008 	str.w	r8, [sp, #8]
    d442:	2a0a      	cmp	r2, #10
    d444:	f171 0300 	sbcs.w	r3, r1, #0
    d448:	f080 8345 	bcs.w	dad6 <_svfprintf_r+0x1086>
    d44c:	3230      	adds	r2, #48	; 0x30
    d44e:	2301      	movs	r3, #1
    d450:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d454:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    d458:	9305      	str	r3, [sp, #20]
    d45a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d45e:	e668      	b.n	d132 <_svfprintf_r+0x6e2>
    d460:	ee1b 1a10 	vmov	r1, s22
    d464:	aa24      	add	r2, sp, #144	; 0x90
    d466:	4658      	mov	r0, fp
    d468:	f002 f9fa 	bl	f860 <__ssprint_r>
    d46c:	2800      	cmp	r0, #0
    d46e:	f47f af54 	bne.w	d31a <_svfprintf_r+0x8ca>
    d472:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d474:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d478:	e452      	b.n	cd20 <_svfprintf_r+0x2d0>
    d47a:	bf00      	nop
    d47c:	20000ce8 	.word	0x20000ce8
    d480:	20001230 	.word	0x20001230
    d484:	20000cec 	.word	0x20000cec
    d488:	ee1b 1a10 	vmov	r1, s22
    d48c:	aa24      	add	r2, sp, #144	; 0x90
    d48e:	4658      	mov	r0, fp
    d490:	f002 f9e6 	bl	f860 <__ssprint_r>
    d494:	2800      	cmp	r0, #0
    d496:	f47f af40 	bne.w	d31a <_svfprintf_r+0x8ca>
    d49a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d49c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d4a0:	e451      	b.n	cd46 <_svfprintf_r+0x2f6>
    d4a2:	2c10      	cmp	r4, #16
    d4a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d4a6:	4ebe      	ldr	r6, [pc, #760]	; (d7a0 <_svfprintf_r+0xd50>)
    d4a8:	dd1f      	ble.n	d4ea <_svfprintf_r+0xa9a>
    d4aa:	ee1b 8a10 	vmov	r8, s22
    d4ae:	2510      	movs	r5, #16
    d4b0:	e004      	b.n	d4bc <_svfprintf_r+0xa6c>
    d4b2:	3c10      	subs	r4, #16
    d4b4:	2c10      	cmp	r4, #16
    d4b6:	f10a 0a08 	add.w	sl, sl, #8
    d4ba:	dd16      	ble.n	d4ea <_svfprintf_r+0xa9a>
    d4bc:	3301      	adds	r3, #1
    d4be:	3210      	adds	r2, #16
    d4c0:	2b07      	cmp	r3, #7
    d4c2:	e9ca 6500 	strd	r6, r5, [sl]
    d4c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d4ca:	ddf2      	ble.n	d4b2 <_svfprintf_r+0xa62>
    d4cc:	aa24      	add	r2, sp, #144	; 0x90
    d4ce:	4641      	mov	r1, r8
    d4d0:	4658      	mov	r0, fp
    d4d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d4d6:	f002 f9c3 	bl	f860 <__ssprint_r>
    d4da:	2800      	cmp	r0, #0
    d4dc:	f47f af1d 	bne.w	d31a <_svfprintf_r+0x8ca>
    d4e0:	3c10      	subs	r4, #16
    d4e2:	2c10      	cmp	r4, #16
    d4e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d4e8:	dce8      	bgt.n	d4bc <_svfprintf_r+0xa6c>
    d4ea:	3301      	adds	r3, #1
    d4ec:	4422      	add	r2, r4
    d4ee:	2b07      	cmp	r3, #7
    d4f0:	e9ca 6400 	strd	r6, r4, [sl]
    d4f4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d4f8:	f77f ac4b 	ble.w	cd92 <_svfprintf_r+0x342>
    d4fc:	ee1b 1a10 	vmov	r1, s22
    d500:	aa24      	add	r2, sp, #144	; 0x90
    d502:	4658      	mov	r0, fp
    d504:	f002 f9ac 	bl	f860 <__ssprint_r>
    d508:	2800      	cmp	r0, #0
    d50a:	f47f af06 	bne.w	d31a <_svfprintf_r+0x8ca>
    d50e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d510:	e43f      	b.n	cd92 <_svfprintf_r+0x342>
    d512:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d514:	2900      	cmp	r1, #0
    d516:	f340 835a 	ble.w	dbce <_svfprintf_r+0x117e>
    d51a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d51c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d51e:	429e      	cmp	r6, r3
    d520:	bfa8      	it	ge
    d522:	461e      	movge	r6, r3
    d524:	2e00      	cmp	r6, #0
    d526:	dd0b      	ble.n	d540 <_svfprintf_r+0xaf0>
    d528:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d52a:	3301      	adds	r3, #1
    d52c:	4432      	add	r2, r6
    d52e:	2b07      	cmp	r3, #7
    d530:	e9ca 4600 	strd	r4, r6, [sl]
    d534:	9226      	str	r2, [sp, #152]	; 0x98
    d536:	9325      	str	r3, [sp, #148]	; 0x94
    d538:	f300 8689 	bgt.w	e24e <_svfprintf_r+0x17fe>
    d53c:	f10a 0a08 	add.w	sl, sl, #8
    d540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d542:	2e00      	cmp	r6, #0
    d544:	bfa8      	it	ge
    d546:	1bad      	subge	r5, r5, r6
    d548:	2d00      	cmp	r5, #0
    d54a:	f300 8203 	bgt.w	d954 <_svfprintf_r+0xf04>
    d54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d550:	f418 6f80 	tst.w	r8, #1024	; 0x400
    d554:	4423      	add	r3, r4
    d556:	9305      	str	r3, [sp, #20]
    d558:	f040 821f 	bne.w	d99a <_svfprintf_r+0xf4a>
    d55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d55e:	990e      	ldr	r1, [sp, #56]	; 0x38
    d560:	428b      	cmp	r3, r1
    d562:	db03      	blt.n	d56c <_svfprintf_r+0xb1c>
    d564:	f018 0f01 	tst.w	r8, #1
    d568:	f000 84cf 	beq.w	df0a <_svfprintf_r+0x14ba>
    d56c:	9910      	ldr	r1, [sp, #64]	; 0x40
    d56e:	9812      	ldr	r0, [sp, #72]	; 0x48
    d570:	440a      	add	r2, r1
    d572:	e9ca 0100 	strd	r0, r1, [sl]
    d576:	9925      	ldr	r1, [sp, #148]	; 0x94
    d578:	9226      	str	r2, [sp, #152]	; 0x98
    d57a:	3101      	adds	r1, #1
    d57c:	2907      	cmp	r1, #7
    d57e:	9125      	str	r1, [sp, #148]	; 0x94
    d580:	f300 86a5 	bgt.w	e2ce <_svfprintf_r+0x187e>
    d584:	f10a 0a08 	add.w	sl, sl, #8
    d588:	990e      	ldr	r1, [sp, #56]	; 0x38
    d58a:	1865      	adds	r5, r4, r1
    d58c:	1acc      	subs	r4, r1, r3
    d58e:	9b05      	ldr	r3, [sp, #20]
    d590:	1aed      	subs	r5, r5, r3
    d592:	42a5      	cmp	r5, r4
    d594:	bfa8      	it	ge
    d596:	4625      	movge	r5, r4
    d598:	2d00      	cmp	r5, #0
    d59a:	dd0d      	ble.n	d5b8 <_svfprintf_r+0xb68>
    d59c:	f8ca 3000 	str.w	r3, [sl]
    d5a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d5a2:	f8ca 5004 	str.w	r5, [sl, #4]
    d5a6:	3301      	adds	r3, #1
    d5a8:	442a      	add	r2, r5
    d5aa:	2b07      	cmp	r3, #7
    d5ac:	9226      	str	r2, [sp, #152]	; 0x98
    d5ae:	9325      	str	r3, [sp, #148]	; 0x94
    d5b0:	f300 86bb 	bgt.w	e32a <_svfprintf_r+0x18da>
    d5b4:	f10a 0a08 	add.w	sl, sl, #8
    d5b8:	2d00      	cmp	r5, #0
    d5ba:	bfa8      	it	ge
    d5bc:	1b64      	subge	r4, r4, r5
    d5be:	2c00      	cmp	r4, #0
    d5c0:	f77f abde 	ble.w	cd80 <_svfprintf_r+0x330>
    d5c4:	2c10      	cmp	r4, #16
    d5c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d5c8:	f340 837c 	ble.w	dcc4 <_svfprintf_r+0x1274>
    d5cc:	ee1b 6a10 	vmov	r6, s22
    d5d0:	2510      	movs	r5, #16
    d5d2:	e005      	b.n	d5e0 <_svfprintf_r+0xb90>
    d5d4:	f10a 0a08 	add.w	sl, sl, #8
    d5d8:	3c10      	subs	r4, #16
    d5da:	2c10      	cmp	r4, #16
    d5dc:	f340 8372 	ble.w	dcc4 <_svfprintf_r+0x1274>
    d5e0:	3301      	adds	r3, #1
    d5e2:	4970      	ldr	r1, [pc, #448]	; (d7a4 <_svfprintf_r+0xd54>)
    d5e4:	3210      	adds	r2, #16
    d5e6:	2b07      	cmp	r3, #7
    d5e8:	e9ca 1500 	strd	r1, r5, [sl]
    d5ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d5f0:	ddf0      	ble.n	d5d4 <_svfprintf_r+0xb84>
    d5f2:	aa24      	add	r2, sp, #144	; 0x90
    d5f4:	4631      	mov	r1, r6
    d5f6:	4658      	mov	r0, fp
    d5f8:	f002 f932 	bl	f860 <__ssprint_r>
    d5fc:	2800      	cmp	r0, #0
    d5fe:	f47f ae8c 	bne.w	d31a <_svfprintf_r+0x8ca>
    d602:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d606:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d60a:	e7e5      	b.n	d5d8 <_svfprintf_r+0xb88>
    d60c:	2b30      	cmp	r3, #48	; 0x30
    d60e:	f43f ad8b 	beq.w	d128 <_svfprintf_r+0x6d8>
    d612:	2330      	movs	r3, #48	; 0x30
    d614:	3802      	subs	r0, #2
    d616:	f804 3c01 	strb.w	r3, [r4, #-1]
    d61a:	ab50      	add	r3, sp, #320	; 0x140
    d61c:	1a1b      	subs	r3, r3, r0
    d61e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d622:	9305      	str	r3, [sp, #20]
    d624:	4604      	mov	r4, r0
    d626:	e584      	b.n	d132 <_svfprintf_r+0x6e2>
    d628:	f018 0f01 	tst.w	r8, #1
    d62c:	f47f ae82 	bne.w	d334 <_svfprintf_r+0x8e4>
    d630:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d632:	f8ca 4000 	str.w	r4, [sl]
    d636:	3301      	adds	r3, #1
    d638:	3201      	adds	r2, #1
    d63a:	2101      	movs	r1, #1
    d63c:	2b07      	cmp	r3, #7
    d63e:	9226      	str	r2, [sp, #152]	; 0x98
    d640:	9325      	str	r3, [sp, #148]	; 0x94
    d642:	f8ca 1004 	str.w	r1, [sl, #4]
    d646:	f77f aea5 	ble.w	d394 <_svfprintf_r+0x944>
    d64a:	ee1b 1a10 	vmov	r1, s22
    d64e:	aa24      	add	r2, sp, #144	; 0x90
    d650:	4658      	mov	r0, fp
    d652:	f002 f905 	bl	f860 <__ssprint_r>
    d656:	2800      	cmp	r0, #0
    d658:	f47f ae5f 	bne.w	d31a <_svfprintf_r+0x8ca>
    d65c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d660:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d664:	e698      	b.n	d398 <_svfprintf_r+0x948>
    d666:	990e      	ldr	r1, [sp, #56]	; 0x38
    d668:	1e4c      	subs	r4, r1, #1
    d66a:	2c00      	cmp	r4, #0
    d66c:	f77f ae94 	ble.w	d398 <_svfprintf_r+0x948>
    d670:	2c10      	cmp	r4, #16
    d672:	f340 8361 	ble.w	dd38 <_svfprintf_r+0x12e8>
    d676:	ee1b 6a10 	vmov	r6, s22
    d67a:	2510      	movs	r5, #16
    d67c:	e005      	b.n	d68a <_svfprintf_r+0xc3a>
    d67e:	f10a 0a08 	add.w	sl, sl, #8
    d682:	3c10      	subs	r4, #16
    d684:	2c10      	cmp	r4, #16
    d686:	f340 8357 	ble.w	dd38 <_svfprintf_r+0x12e8>
    d68a:	3301      	adds	r3, #1
    d68c:	4945      	ldr	r1, [pc, #276]	; (d7a4 <_svfprintf_r+0xd54>)
    d68e:	3210      	adds	r2, #16
    d690:	2b07      	cmp	r3, #7
    d692:	e9ca 1500 	strd	r1, r5, [sl]
    d696:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d69a:	ddf0      	ble.n	d67e <_svfprintf_r+0xc2e>
    d69c:	aa24      	add	r2, sp, #144	; 0x90
    d69e:	4631      	mov	r1, r6
    d6a0:	4658      	mov	r0, fp
    d6a2:	f002 f8dd 	bl	f860 <__ssprint_r>
    d6a6:	2800      	cmp	r0, #0
    d6a8:	f47f ae37 	bne.w	d31a <_svfprintf_r+0x8ca>
    d6ac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d6b0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d6b4:	e7e5      	b.n	d682 <_svfprintf_r+0xc32>
    d6b6:	ee1b 1a10 	vmov	r1, s22
    d6ba:	aa24      	add	r2, sp, #144	; 0x90
    d6bc:	4658      	mov	r0, fp
    d6be:	f002 f8cf 	bl	f860 <__ssprint_r>
    d6c2:	2800      	cmp	r0, #0
    d6c4:	f47f ae29 	bne.w	d31a <_svfprintf_r+0x8ca>
    d6c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d6ca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d6ce:	f7ff bb44 	b.w	cd5a <_svfprintf_r+0x30a>
    d6d2:	9b02      	ldr	r3, [sp, #8]
    d6d4:	f013 0310 	ands.w	r3, r3, #16
    d6d8:	f040 80c1 	bne.w	d85e <_svfprintf_r+0xe0e>
    d6dc:	9a02      	ldr	r2, [sp, #8]
    d6de:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    d6e2:	f000 837a 	beq.w	ddda <_svfprintf_r+0x138a>
    d6e6:	9808      	ldr	r0, [sp, #32]
    d6e8:	f850 2b04 	ldr.w	r2, [r0], #4
    d6ec:	9008      	str	r0, [sp, #32]
    d6ee:	4619      	mov	r1, r3
    d6f0:	b292      	uxth	r2, r2
    d6f2:	2301      	movs	r3, #1
    d6f4:	e451      	b.n	cf9a <_svfprintf_r+0x54a>
    d6f6:	f018 0310 	ands.w	r3, r8, #16
    d6fa:	d155      	bne.n	d7a8 <_svfprintf_r+0xd58>
    d6fc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    d700:	f000 835d 	beq.w	ddbe <_svfprintf_r+0x136e>
    d704:	9808      	ldr	r0, [sp, #32]
    d706:	f850 2b04 	ldr.w	r2, [r0], #4
    d70a:	9008      	str	r0, [sp, #32]
    d70c:	4619      	mov	r1, r3
    d70e:	b292      	uxth	r2, r2
    d710:	e4a8      	b.n	d064 <_svfprintf_r+0x614>
    d712:	4252      	negs	r2, r2
    d714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d718:	f8cd 8008 	str.w	r8, [sp, #8]
    d71c:	202d      	movs	r0, #45	; 0x2d
    d71e:	2301      	movs	r3, #1
    d720:	e43c      	b.n	cf9c <_svfprintf_r+0x54c>
    d722:	ee1b 1a10 	vmov	r1, s22
    d726:	aa24      	add	r2, sp, #144	; 0x90
    d728:	4658      	mov	r0, fp
    d72a:	f002 f899 	bl	f860 <__ssprint_r>
    d72e:	2800      	cmp	r0, #0
    d730:	f47f adf3 	bne.w	d31a <_svfprintf_r+0x8ca>
    d734:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d738:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d73c:	e616      	b.n	d36c <_svfprintf_r+0x91c>
    d73e:	ee1b 1a10 	vmov	r1, s22
    d742:	aa24      	add	r2, sp, #144	; 0x90
    d744:	4658      	mov	r0, fp
    d746:	f002 f88b 	bl	f860 <__ssprint_r>
    d74a:	2800      	cmp	r0, #0
    d74c:	f47f ade5 	bne.w	d31a <_svfprintf_r+0x8ca>
    d750:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d754:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d758:	e5fb      	b.n	d352 <_svfprintf_r+0x902>
    d75a:	f018 0f01 	tst.w	r8, #1
    d75e:	f43f ab0f 	beq.w	cd80 <_svfprintf_r+0x330>
    d762:	e52a      	b.n	d1ba <_svfprintf_r+0x76a>
    d764:	9308      	str	r3, [sp, #32]
    d766:	f899 3000 	ldrb.w	r3, [r9]
    d76a:	f7ff b9cd 	b.w	cb08 <_svfprintf_r+0xb8>
    d76e:	ac50      	add	r4, sp, #320	; 0x140
    d770:	e4df      	b.n	d132 <_svfprintf_r+0x6e2>
    d772:	f418 7f00 	tst.w	r8, #512	; 0x200
    d776:	f040 83db 	bne.w	df30 <_svfprintf_r+0x14e0>
    d77a:	f853 2b04 	ldr.w	r2, [r3], #4
    d77e:	9308      	str	r3, [sp, #32]
    d780:	17d1      	asrs	r1, r2, #31
    d782:	460b      	mov	r3, r1
    d784:	f7ff bbb6 	b.w	cef4 <_svfprintf_r+0x4a4>
    d788:	9b08      	ldr	r3, [sp, #32]
    d78a:	9804      	ldr	r0, [sp, #16]
    d78c:	f853 1b04 	ldr.w	r1, [r3], #4
    d790:	9308      	str	r3, [sp, #32]
    d792:	17c2      	asrs	r2, r0, #31
    d794:	e9c1 0200 	strd	r0, r2, [r1]
    d798:	464c      	mov	r4, r9
    d79a:	f7ff b98b 	b.w	cab4 <_svfprintf_r+0x64>
    d79e:	bf00      	nop
    d7a0:	20000cec 	.word	0x20000cec
    d7a4:	20001230 	.word	0x20001230
    d7a8:	9b08      	ldr	r3, [sp, #32]
    d7aa:	f853 2b04 	ldr.w	r2, [r3], #4
    d7ae:	9308      	str	r3, [sp, #32]
    d7b0:	e458      	b.n	d064 <_svfprintf_r+0x614>
    d7b2:	eeb4 8b48 	vcmp.f64	d8, d8
    d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d7ba:	f180 8694 	bvs.w	e4e6 <_svfprintf_r+0x1a96>
    d7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d7c0:	2b61      	cmp	r3, #97	; 0x61
    d7c2:	f000 8552 	beq.w	e26a <_svfprintf_r+0x181a>
    d7c6:	2b41      	cmp	r3, #65	; 0x41
    d7c8:	f000 85c0 	beq.w	e34c <_svfprintf_r+0x18fc>
    d7cc:	9b03      	ldr	r3, [sp, #12]
    d7ce:	3301      	adds	r3, #1
    d7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d7d2:	f023 0520 	bic.w	r5, r3, #32
    d7d6:	f000 8480 	beq.w	e0da <_svfprintf_r+0x168a>
    d7da:	2d47      	cmp	r5, #71	; 0x47
    d7dc:	d104      	bne.n	d7e8 <_svfprintf_r+0xd98>
    d7de:	9b03      	ldr	r3, [sp, #12]
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	bf08      	it	eq
    d7e4:	2301      	moveq	r3, #1
    d7e6:	9303      	str	r3, [sp, #12]
    d7e8:	ee18 3a90 	vmov	r3, s17
    d7ec:	2b00      	cmp	r3, #0
    d7ee:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    d7f2:	4646      	mov	r6, r8
    d7f4:	f2c0 8618 	blt.w	e428 <_svfprintf_r+0x19d8>
    d7f8:	eeb0 ab48 	vmov.f64	d10, d8
    d7fc:	2300      	movs	r3, #0
    d7fe:	4690      	mov	r8, r2
    d800:	9309      	str	r3, [sp, #36]	; 0x24
    d802:	9307      	str	r3, [sp, #28]
    d804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d806:	3b41      	subs	r3, #65	; 0x41
    d808:	2b25      	cmp	r3, #37	; 0x25
    d80a:	f200 8398 	bhi.w	df3e <_svfprintf_r+0x14ee>
    d80e:	e8df f013 	tbh	[pc, r3, lsl #1]
    d812:	046f      	.short	0x046f
    d814:	03960396 	.word	0x03960396
    d818:	04680396 	.word	0x04680396
    d81c:	0396046c 	.word	0x0396046c
    d820:	03960396 	.word	0x03960396
    d824:	03960396 	.word	0x03960396
    d828:	03960396 	.word	0x03960396
    d82c:	03960396 	.word	0x03960396
    d830:	03960396 	.word	0x03960396
    d834:	03960396 	.word	0x03960396
    d838:	03960396 	.word	0x03960396
    d83c:	03960396 	.word	0x03960396
    d840:	03960396 	.word	0x03960396
    d844:	03960396 	.word	0x03960396
    d848:	03960396 	.word	0x03960396
    d84c:	03960396 	.word	0x03960396
    d850:	03960396 	.word	0x03960396
    d854:	03960396 	.word	0x03960396
    d858:	04680396 	.word	0x04680396
    d85c:	046c      	.short	0x046c
    d85e:	9b08      	ldr	r3, [sp, #32]
    d860:	f853 2b04 	ldr.w	r2, [r3], #4
    d864:	9308      	str	r3, [sp, #32]
    d866:	2301      	movs	r3, #1
    d868:	f7ff bb97 	b.w	cf9a <_svfprintf_r+0x54a>
    d86c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d86e:	2b00      	cmp	r3, #0
    d870:	f43f a9cf 	beq.w	cc12 <_svfprintf_r+0x1c2>
    d874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	2b00      	cmp	r3, #0
    d87a:	f43f a9ca 	beq.w	cc12 <_svfprintf_r+0x1c2>
    d87e:	f899 3000 	ldrb.w	r3, [r9]
    d882:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    d886:	f7ff b93f 	b.w	cb08 <_svfprintf_r+0xb8>
    d88a:	930b      	str	r3, [sp, #44]	; 0x2c
    d88c:	f8cd 8008 	str.w	r8, [sp, #8]
    d890:	f7ff bbf1 	b.w	d076 <_svfprintf_r+0x626>
    d894:	930b      	str	r3, [sp, #44]	; 0x2c
    d896:	4b9a      	ldr	r3, [pc, #616]	; (db00 <_svfprintf_r+0x10b0>)
    d898:	9311      	str	r3, [sp, #68]	; 0x44
    d89a:	f018 0120 	ands.w	r1, r8, #32
    d89e:	f000 8105 	beq.w	daac <_svfprintf_r+0x105c>
    d8a2:	9b08      	ldr	r3, [sp, #32]
    d8a4:	3307      	adds	r3, #7
    d8a6:	f023 0307 	bic.w	r3, r3, #7
    d8aa:	6859      	ldr	r1, [r3, #4]
    d8ac:	f853 2b08 	ldr.w	r2, [r3], #8
    d8b0:	9308      	str	r3, [sp, #32]
    d8b2:	f018 0f01 	tst.w	r8, #1
    d8b6:	d00a      	beq.n	d8ce <_svfprintf_r+0xe7e>
    d8b8:	ea52 0301 	orrs.w	r3, r2, r1
    d8bc:	d007      	beq.n	d8ce <_svfprintf_r+0xe7e>
    d8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d8c0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    d8c4:	2330      	movs	r3, #48	; 0x30
    d8c6:	f048 0802 	orr.w	r8, r8, #2
    d8ca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    d8ce:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d8d2:	9302      	str	r3, [sp, #8]
    d8d4:	2302      	movs	r3, #2
    d8d6:	f7ff bb60 	b.w	cf9a <_svfprintf_r+0x54a>
    d8da:	930b      	str	r3, [sp, #44]	; 0x2c
    d8dc:	f7ff bbb6 	b.w	d04c <_svfprintf_r+0x5fc>
    d8e0:	930b      	str	r3, [sp, #44]	; 0x2c
    d8e2:	4b88      	ldr	r3, [pc, #544]	; (db04 <_svfprintf_r+0x10b4>)
    d8e4:	9311      	str	r3, [sp, #68]	; 0x44
    d8e6:	e7d8      	b.n	d89a <_svfprintf_r+0xe4a>
    d8e8:	9b08      	ldr	r3, [sp, #32]
    d8ea:	2101      	movs	r1, #1
    d8ec:	f853 2b04 	ldr.w	r2, [r3], #4
    d8f0:	9102      	str	r1, [sp, #8]
    d8f2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    d8f6:	9308      	str	r3, [sp, #32]
    d8f8:	9105      	str	r1, [sp, #20]
    d8fa:	ac37      	add	r4, sp, #220	; 0xdc
    d8fc:	f7ff baaf 	b.w	ce5e <_svfprintf_r+0x40e>
    d900:	ee1b 1a10 	vmov	r1, s22
    d904:	aa24      	add	r2, sp, #144	; 0x90
    d906:	4658      	mov	r0, fp
    d908:	f001 ffaa 	bl	f860 <__ssprint_r>
    d90c:	2800      	cmp	r0, #0
    d90e:	f47f ad04 	bne.w	d31a <_svfprintf_r+0x8ca>
    d912:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d914:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d918:	e45d      	b.n	d1d6 <_svfprintf_r+0x786>
    d91a:	9b03      	ldr	r3, [sp, #12]
    d91c:	9407      	str	r4, [sp, #28]
    d91e:	2b06      	cmp	r3, #6
    d920:	4622      	mov	r2, r4
    d922:	bf28      	it	cs
    d924:	2306      	movcs	r3, #6
    d926:	9403      	str	r4, [sp, #12]
    d928:	4621      	mov	r1, r4
    d92a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    d92e:	4c76      	ldr	r4, [pc, #472]	; (db08 <_svfprintf_r+0x10b8>)
    d930:	9302      	str	r3, [sp, #8]
    d932:	9305      	str	r3, [sp, #20]
    d934:	920f      	str	r2, [sp, #60]	; 0x3c
    d936:	f7ff ba6c 	b.w	ce12 <_svfprintf_r+0x3c2>
    d93a:	2140      	movs	r1, #64	; 0x40
    d93c:	4658      	mov	r0, fp
    d93e:	f7fc ff41 	bl	a7c4 <_malloc_r>
    d942:	6020      	str	r0, [r4, #0]
    d944:	6120      	str	r0, [r4, #16]
    d946:	2800      	cmp	r0, #0
    d948:	f000 860f 	beq.w	e56a <_svfprintf_r+0x1b1a>
    d94c:	2340      	movs	r3, #64	; 0x40
    d94e:	6163      	str	r3, [r4, #20]
    d950:	f7ff b89e 	b.w	ca90 <_svfprintf_r+0x40>
    d954:	2d10      	cmp	r5, #16
    d956:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d958:	f340 825d 	ble.w	de16 <_svfprintf_r+0x13c6>
    d95c:	4651      	mov	r1, sl
    d95e:	2610      	movs	r6, #16
    d960:	ee1b aa10 	vmov	sl, s22
    d964:	e004      	b.n	d970 <_svfprintf_r+0xf20>
    d966:	3108      	adds	r1, #8
    d968:	3d10      	subs	r5, #16
    d96a:	2d10      	cmp	r5, #16
    d96c:	f340 8252 	ble.w	de14 <_svfprintf_r+0x13c4>
    d970:	3301      	adds	r3, #1
    d972:	4866      	ldr	r0, [pc, #408]	; (db0c <_svfprintf_r+0x10bc>)
    d974:	3210      	adds	r2, #16
    d976:	2b07      	cmp	r3, #7
    d978:	e9c1 0600 	strd	r0, r6, [r1]
    d97c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d980:	ddf1      	ble.n	d966 <_svfprintf_r+0xf16>
    d982:	aa24      	add	r2, sp, #144	; 0x90
    d984:	4651      	mov	r1, sl
    d986:	4658      	mov	r0, fp
    d988:	f001 ff6a 	bl	f860 <__ssprint_r>
    d98c:	2800      	cmp	r0, #0
    d98e:	f47f acc4 	bne.w	d31a <_svfprintf_r+0x8ca>
    d992:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d996:	a927      	add	r1, sp, #156	; 0x9c
    d998:	e7e6      	b.n	d968 <_svfprintf_r+0xf18>
    d99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d99c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    d9a0:	18e3      	adds	r3, r4, r3
    d9a2:	9303      	str	r3, [sp, #12]
    d9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d9a6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    d9aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    d9ac:	9d05      	ldr	r5, [sp, #20]
    d9ae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    d9b2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    d9b6:	940b      	str	r4, [sp, #44]	; 0x2c
    d9b8:	ee1b 1a10 	vmov	r1, s22
    d9bc:	4650      	mov	r0, sl
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d034      	beq.n	da2c <_svfprintf_r+0xfdc>
    d9c2:	f1b8 0f00 	cmp.w	r8, #0
    d9c6:	d135      	bne.n	da34 <_svfprintf_r+0xfe4>
    d9c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d9ca:	3b01      	subs	r3, #1
    d9cc:	3e01      	subs	r6, #1
    d9ce:	930d      	str	r3, [sp, #52]	; 0x34
    d9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d9d2:	e9c0 3900 	strd	r3, r9, [r0]
    d9d6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9d8:	3301      	adds	r3, #1
    d9da:	444a      	add	r2, r9
    d9dc:	2b07      	cmp	r3, #7
    d9de:	9226      	str	r2, [sp, #152]	; 0x98
    d9e0:	9325      	str	r3, [sp, #148]	; 0x94
    d9e2:	dc6c      	bgt.n	dabe <_svfprintf_r+0x106e>
    d9e4:	3008      	adds	r0, #8
    d9e6:	9b03      	ldr	r3, [sp, #12]
    d9e8:	f896 c000 	ldrb.w	ip, [r6]
    d9ec:	1b5b      	subs	r3, r3, r5
    d9ee:	4563      	cmp	r3, ip
    d9f0:	bfa8      	it	ge
    d9f2:	4663      	movge	r3, ip
    d9f4:	2b00      	cmp	r3, #0
    d9f6:	469a      	mov	sl, r3
    d9f8:	dd0c      	ble.n	da14 <_svfprintf_r+0xfc4>
    d9fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    d9fc:	3401      	adds	r4, #1
    d9fe:	441a      	add	r2, r3
    da00:	2c07      	cmp	r4, #7
    da02:	e9c0 5300 	strd	r5, r3, [r0]
    da06:	9226      	str	r2, [sp, #152]	; 0x98
    da08:	9425      	str	r4, [sp, #148]	; 0x94
    da0a:	f300 8177 	bgt.w	dcfc <_svfprintf_r+0x12ac>
    da0e:	f896 c000 	ldrb.w	ip, [r6]
    da12:	3008      	adds	r0, #8
    da14:	f1ba 0f00 	cmp.w	sl, #0
    da18:	bfac      	ite	ge
    da1a:	ebac 040a 	subge.w	r4, ip, sl
    da1e:	4664      	movlt	r4, ip
    da20:	2c00      	cmp	r4, #0
    da22:	dc0a      	bgt.n	da3a <_svfprintf_r+0xfea>
    da24:	4465      	add	r5, ip
    da26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da28:	2b00      	cmp	r3, #0
    da2a:	d1ca      	bne.n	d9c2 <_svfprintf_r+0xf72>
    da2c:	f1b8 0f00 	cmp.w	r8, #0
    da30:	f000 83ac 	beq.w	e18c <_svfprintf_r+0x173c>
    da34:	f108 38ff 	add.w	r8, r8, #4294967295
    da38:	e7ca      	b.n	d9d0 <_svfprintf_r+0xf80>
    da3a:	2c10      	cmp	r4, #16
    da3c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    da40:	dd24      	ble.n	da8c <_svfprintf_r+0x103c>
    da42:	9505      	str	r5, [sp, #20]
    da44:	f04f 0a10 	mov.w	sl, #16
    da48:	4663      	mov	r3, ip
    da4a:	460d      	mov	r5, r1
    da4c:	e004      	b.n	da58 <_svfprintf_r+0x1008>
    da4e:	3c10      	subs	r4, #16
    da50:	2c10      	cmp	r4, #16
    da52:	f100 0008 	add.w	r0, r0, #8
    da56:	dd16      	ble.n	da86 <_svfprintf_r+0x1036>
    da58:	3301      	adds	r3, #1
    da5a:	492c      	ldr	r1, [pc, #176]	; (db0c <_svfprintf_r+0x10bc>)
    da5c:	3210      	adds	r2, #16
    da5e:	2b07      	cmp	r3, #7
    da60:	e9c0 1a00 	strd	r1, sl, [r0]
    da64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da68:	ddf1      	ble.n	da4e <_svfprintf_r+0xffe>
    da6a:	aa24      	add	r2, sp, #144	; 0x90
    da6c:	4629      	mov	r1, r5
    da6e:	4658      	mov	r0, fp
    da70:	f001 fef6 	bl	f860 <__ssprint_r>
    da74:	2800      	cmp	r0, #0
    da76:	f47f ac50 	bne.w	d31a <_svfprintf_r+0x8ca>
    da7a:	3c10      	subs	r4, #16
    da7c:	2c10      	cmp	r4, #16
    da7e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    da82:	a827      	add	r0, sp, #156	; 0x9c
    da84:	dce8      	bgt.n	da58 <_svfprintf_r+0x1008>
    da86:	4629      	mov	r1, r5
    da88:	9d05      	ldr	r5, [sp, #20]
    da8a:	469c      	mov	ip, r3
    da8c:	f10c 0301 	add.w	r3, ip, #1
    da90:	4422      	add	r2, r4
    da92:	6044      	str	r4, [r0, #4]
    da94:	2b07      	cmp	r3, #7
    da96:	4c1d      	ldr	r4, [pc, #116]	; (db0c <_svfprintf_r+0x10bc>)
    da98:	6004      	str	r4, [r0, #0]
    da9a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da9e:	f300 83c6 	bgt.w	e22e <_svfprintf_r+0x17de>
    daa2:	f896 c000 	ldrb.w	ip, [r6]
    daa6:	3008      	adds	r0, #8
    daa8:	4465      	add	r5, ip
    daaa:	e7bc      	b.n	da26 <_svfprintf_r+0xfd6>
    daac:	f018 0310 	ands.w	r3, r8, #16
    dab0:	f000 80c2 	beq.w	dc38 <_svfprintf_r+0x11e8>
    dab4:	9b08      	ldr	r3, [sp, #32]
    dab6:	f853 2b04 	ldr.w	r2, [r3], #4
    daba:	9308      	str	r3, [sp, #32]
    dabc:	e6f9      	b.n	d8b2 <_svfprintf_r+0xe62>
    dabe:	aa24      	add	r2, sp, #144	; 0x90
    dac0:	4658      	mov	r0, fp
    dac2:	9105      	str	r1, [sp, #20]
    dac4:	f001 fecc 	bl	f860 <__ssprint_r>
    dac8:	2800      	cmp	r0, #0
    daca:	f47f ac26 	bne.w	d31a <_svfprintf_r+0x8ca>
    dace:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dad0:	9905      	ldr	r1, [sp, #20]
    dad2:	a827      	add	r0, sp, #156	; 0x9c
    dad4:	e787      	b.n	d9e6 <_svfprintf_r+0xf96>
    dad6:	9802      	ldr	r0, [sp, #8]
    dad8:	f8cd a01c 	str.w	sl, [sp, #28]
    dadc:	ac50      	add	r4, sp, #320	; 0x140
    dade:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    dae2:	2500      	movs	r5, #0
    dae4:	ee0a ba10 	vmov	s20, fp
    dae8:	4b09      	ldr	r3, [pc, #36]	; (db10 <_svfprintf_r+0x10c0>)
    daea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    daee:	f8cd 9014 	str.w	r9, [sp, #20]
    daf2:	46a3      	mov	fp, r4
    daf4:	f04f 0805 	mov.w	r8, #5
    daf8:	46ac      	mov	ip, r5
    dafa:	4604      	mov	r4, r0
    dafc:	e010      	b.n	db20 <_svfprintf_r+0x10d0>
    dafe:	bf00      	nop
    db00:	20000cb8 	.word	0x20000cb8
    db04:	20000ccc 	.word	0x20000ccc
    db08:	20000ce0 	.word	0x20000ce0
    db0c:	20001230 	.word	0x20001230
    db10:	cccccccd 	.word	0xcccccccd
    db14:	2a0a      	cmp	r2, #10
    db16:	f171 0100 	sbcs.w	r1, r1, #0
    db1a:	d336      	bcc.n	db8a <_svfprintf_r+0x113a>
    db1c:	464a      	mov	r2, r9
    db1e:	4631      	mov	r1, r6
    db20:	1850      	adds	r0, r2, r1
    db22:	f140 0000 	adc.w	r0, r0, #0
    db26:	fba3 5600 	umull	r5, r6, r3, r0
    db2a:	f026 0503 	bic.w	r5, r6, #3
    db2e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    db32:	1b40      	subs	r0, r0, r5
    db34:	1a15      	subs	r5, r2, r0
    db36:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    db3a:	f161 0e00 	sbc.w	lr, r1, #0
    db3e:	fb06 f605 	mul.w	r6, r6, r5
    db42:	fba5 9503 	umull	r9, r5, r5, r3
    db46:	fb03 660e 	mla	r6, r3, lr, r6
    db4a:	f009 0e01 	and.w	lr, r9, #1
    db4e:	442e      	add	r6, r5
    db50:	fbae 5e08 	umull	r5, lr, lr, r8
    db54:	182d      	adds	r5, r5, r0
    db56:	ea4f 0959 	mov.w	r9, r9, lsr #1
    db5a:	3530      	adds	r5, #48	; 0x30
    db5c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    db60:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    db64:	f10c 0c01 	add.w	ip, ip, #1
    db68:	f10b 3bff 	add.w	fp, fp, #4294967295
    db6c:	0876      	lsrs	r6, r6, #1
    db6e:	2c00      	cmp	r4, #0
    db70:	d0d0      	beq.n	db14 <_svfprintf_r+0x10c4>
    db72:	f89a 0000 	ldrb.w	r0, [sl]
    db76:	4584      	cmp	ip, r0
    db78:	d1cc      	bne.n	db14 <_svfprintf_r+0x10c4>
    db7a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    db7e:	d0c9      	beq.n	db14 <_svfprintf_r+0x10c4>
    db80:	2a0a      	cmp	r2, #10
    db82:	f171 0100 	sbcs.w	r1, r1, #0
    db86:	f080 818f 	bcs.w	dea8 <_svfprintf_r+0x1458>
    db8a:	465c      	mov	r4, fp
    db8c:	ab50      	add	r3, sp, #320	; 0x140
    db8e:	1b1b      	subs	r3, r3, r4
    db90:	f8dd 9014 	ldr.w	r9, [sp, #20]
    db94:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    db98:	ee1a ba10 	vmov	fp, s20
    db9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    dba0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dba4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    dba8:	9305      	str	r3, [sp, #20]
    dbaa:	f7ff bac2 	b.w	d132 <_svfprintf_r+0x6e2>
    dbae:	ee1b 1a10 	vmov	r1, s22
    dbb2:	aa24      	add	r2, sp, #144	; 0x90
    dbb4:	4658      	mov	r0, fp
    dbb6:	f001 fe53 	bl	f860 <__ssprint_r>
    dbba:	2800      	cmp	r0, #0
    dbbc:	f47f abad 	bne.w	d31a <_svfprintf_r+0x8ca>
    dbc0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dbc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dbc6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dbca:	f7ff b896 	b.w	ccfa <_svfprintf_r+0x2aa>
    dbce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbd0:	48be      	ldr	r0, [pc, #760]	; (decc <_svfprintf_r+0x147c>)
    dbd2:	f8ca 0000 	str.w	r0, [sl]
    dbd6:	3301      	adds	r3, #1
    dbd8:	3201      	adds	r2, #1
    dbda:	2001      	movs	r0, #1
    dbdc:	2b07      	cmp	r3, #7
    dbde:	9226      	str	r2, [sp, #152]	; 0x98
    dbe0:	9325      	str	r3, [sp, #148]	; 0x94
    dbe2:	f8ca 0004 	str.w	r0, [sl, #4]
    dbe6:	f300 8177 	bgt.w	ded8 <_svfprintf_r+0x1488>
    dbea:	f10a 0a08 	add.w	sl, sl, #8
    dbee:	2900      	cmp	r1, #0
    dbf0:	f040 80af 	bne.w	dd52 <_svfprintf_r+0x1302>
    dbf4:	990e      	ldr	r1, [sp, #56]	; 0x38
    dbf6:	f008 0301 	and.w	r3, r8, #1
    dbfa:	430b      	orrs	r3, r1
    dbfc:	f43f a8c0 	beq.w	cd80 <_svfprintf_r+0x330>
    dc00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc02:	9912      	ldr	r1, [sp, #72]	; 0x48
    dc04:	441a      	add	r2, r3
    dc06:	e9ca 1300 	strd	r1, r3, [sl]
    dc0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dc0c:	9226      	str	r2, [sp, #152]	; 0x98
    dc0e:	3301      	adds	r3, #1
    dc10:	2b07      	cmp	r3, #7
    dc12:	9325      	str	r3, [sp, #148]	; 0x94
    dc14:	f300 8252 	bgt.w	e0bc <_svfprintf_r+0x166c>
    dc18:	f10a 0a08 	add.w	sl, sl, #8
    dc1c:	990e      	ldr	r1, [sp, #56]	; 0x38
    dc1e:	f8ca 4000 	str.w	r4, [sl]
    dc22:	3301      	adds	r3, #1
    dc24:	440a      	add	r2, r1
    dc26:	2b07      	cmp	r3, #7
    dc28:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dc2c:	f8ca 1004 	str.w	r1, [sl, #4]
    dc30:	f77f a8a4 	ble.w	cd7c <_svfprintf_r+0x32c>
    dc34:	f7ff bbbd 	b.w	d3b2 <_svfprintf_r+0x962>
    dc38:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    dc3c:	f000 80dd 	beq.w	ddfa <_svfprintf_r+0x13aa>
    dc40:	9808      	ldr	r0, [sp, #32]
    dc42:	f850 2b04 	ldr.w	r2, [r0], #4
    dc46:	9008      	str	r0, [sp, #32]
    dc48:	4619      	mov	r1, r3
    dc4a:	b292      	uxth	r2, r2
    dc4c:	e631      	b.n	d8b2 <_svfprintf_r+0xe62>
    dc4e:	ee1b 1a10 	vmov	r1, s22
    dc52:	aa24      	add	r2, sp, #144	; 0x90
    dc54:	4658      	mov	r0, fp
    dc56:	f001 fe03 	bl	f860 <__ssprint_r>
    dc5a:	2800      	cmp	r0, #0
    dc5c:	f47f ab5d 	bne.w	d31a <_svfprintf_r+0x8ca>
    dc60:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dc62:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dc66:	f7ff baa3 	b.w	d1b0 <_svfprintf_r+0x760>
    dc6a:	ae22      	add	r6, sp, #136	; 0x88
    dc6c:	2208      	movs	r2, #8
    dc6e:	2100      	movs	r1, #0
    dc70:	4630      	mov	r0, r6
    dc72:	941d      	str	r4, [sp, #116]	; 0x74
    dc74:	f7fd fd9e 	bl	b7b4 <memset>
    dc78:	9b03      	ldr	r3, [sp, #12]
    dc7a:	1c5a      	adds	r2, r3, #1
    dc7c:	f000 80db 	beq.w	de36 <_svfprintf_r+0x13e6>
    dc80:	2500      	movs	r5, #0
    dc82:	f8cd 9008 	str.w	r9, [sp, #8]
    dc86:	f8cd 801c 	str.w	r8, [sp, #28]
    dc8a:	4699      	mov	r9, r3
    dc8c:	46a8      	mov	r8, r5
    dc8e:	e00c      	b.n	dcaa <_svfprintf_r+0x125a>
    dc90:	a937      	add	r1, sp, #220	; 0xdc
    dc92:	4658      	mov	r0, fp
    dc94:	f001 fd9e 	bl	f7d4 <_wcrtomb_r>
    dc98:	1c43      	adds	r3, r0, #1
    dc9a:	4440      	add	r0, r8
    dc9c:	f000 83c8 	beq.w	e430 <_svfprintf_r+0x19e0>
    dca0:	4548      	cmp	r0, r9
    dca2:	dc08      	bgt.n	dcb6 <_svfprintf_r+0x1266>
    dca4:	f000 8418 	beq.w	e4d8 <_svfprintf_r+0x1a88>
    dca8:	4680      	mov	r8, r0
    dcaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    dcac:	5952      	ldr	r2, [r2, r5]
    dcae:	4633      	mov	r3, r6
    dcb0:	3504      	adds	r5, #4
    dcb2:	2a00      	cmp	r2, #0
    dcb4:	d1ec      	bne.n	dc90 <_svfprintf_r+0x1240>
    dcb6:	f8cd 8014 	str.w	r8, [sp, #20]
    dcba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    dcbe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    dcc2:	e0c5      	b.n	de50 <_svfprintf_r+0x1400>
    dcc4:	3301      	adds	r3, #1
    dcc6:	4982      	ldr	r1, [pc, #520]	; (ded0 <_svfprintf_r+0x1480>)
    dcc8:	f8ca 4004 	str.w	r4, [sl, #4]
    dccc:	4422      	add	r2, r4
    dcce:	2b07      	cmp	r3, #7
    dcd0:	f8ca 1000 	str.w	r1, [sl]
    dcd4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dcd8:	f77f a850 	ble.w	cd7c <_svfprintf_r+0x32c>
    dcdc:	f7ff bb69 	b.w	d3b2 <_svfprintf_r+0x962>
    dce0:	ee1b 1a10 	vmov	r1, s22
    dce4:	aa24      	add	r2, sp, #144	; 0x90
    dce6:	4658      	mov	r0, fp
    dce8:	f001 fdba 	bl	f860 <__ssprint_r>
    dcec:	2800      	cmp	r0, #0
    dcee:	f47f ab14 	bne.w	d31a <_svfprintf_r+0x8ca>
    dcf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dcf4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dcf8:	f7ff b829 	b.w	cd4e <_svfprintf_r+0x2fe>
    dcfc:	aa24      	add	r2, sp, #144	; 0x90
    dcfe:	4658      	mov	r0, fp
    dd00:	9105      	str	r1, [sp, #20]
    dd02:	f001 fdad 	bl	f860 <__ssprint_r>
    dd06:	2800      	cmp	r0, #0
    dd08:	f47f ab07 	bne.w	d31a <_svfprintf_r+0x8ca>
    dd0c:	f896 c000 	ldrb.w	ip, [r6]
    dd10:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dd12:	9905      	ldr	r1, [sp, #20]
    dd14:	a827      	add	r0, sp, #156	; 0x9c
    dd16:	e67d      	b.n	da14 <_svfprintf_r+0xfc4>
    dd18:	2b01      	cmp	r3, #1
    dd1a:	f8cd 8008 	str.w	r8, [sp, #8]
    dd1e:	f47f a9f3 	bne.w	d108 <_svfprintf_r+0x6b8>
    dd22:	f7ff bb93 	b.w	d44c <_svfprintf_r+0x9fc>
    dd26:	9b08      	ldr	r3, [sp, #32]
    dd28:	9904      	ldr	r1, [sp, #16]
    dd2a:	f853 2b04 	ldr.w	r2, [r3], #4
    dd2e:	464c      	mov	r4, r9
    dd30:	6011      	str	r1, [r2, #0]
    dd32:	9308      	str	r3, [sp, #32]
    dd34:	f7fe bebe 	b.w	cab4 <_svfprintf_r+0x64>
    dd38:	3301      	adds	r3, #1
    dd3a:	4965      	ldr	r1, [pc, #404]	; (ded0 <_svfprintf_r+0x1480>)
    dd3c:	f8ca 4004 	str.w	r4, [sl, #4]
    dd40:	4422      	add	r2, r4
    dd42:	2b07      	cmp	r3, #7
    dd44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dd48:	f8ca 1000 	str.w	r1, [sl]
    dd4c:	f77f ab22 	ble.w	d394 <_svfprintf_r+0x944>
    dd50:	e47b      	b.n	d64a <_svfprintf_r+0xbfa>
    dd52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd54:	9812      	ldr	r0, [sp, #72]	; 0x48
    dd56:	441a      	add	r2, r3
    dd58:	e9ca 0300 	strd	r0, r3, [sl]
    dd5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd5e:	9226      	str	r2, [sp, #152]	; 0x98
    dd60:	3301      	adds	r3, #1
    dd62:	2b07      	cmp	r3, #7
    dd64:	9325      	str	r3, [sp, #148]	; 0x94
    dd66:	f300 81a9 	bgt.w	e0bc <_svfprintf_r+0x166c>
    dd6a:	f10a 0a08 	add.w	sl, sl, #8
    dd6e:	2900      	cmp	r1, #0
    dd70:	f6bf af54 	bge.w	dc1c <_svfprintf_r+0x11cc>
    dd74:	424d      	negs	r5, r1
    dd76:	3110      	adds	r1, #16
    dd78:	f280 830f 	bge.w	e39a <_svfprintf_r+0x194a>
    dd7c:	ee1b 1a10 	vmov	r1, s22
    dd80:	2610      	movs	r6, #16
    dd82:	e005      	b.n	dd90 <_svfprintf_r+0x1340>
    dd84:	f10a 0a08 	add.w	sl, sl, #8
    dd88:	3d10      	subs	r5, #16
    dd8a:	2d10      	cmp	r5, #16
    dd8c:	f340 8305 	ble.w	e39a <_svfprintf_r+0x194a>
    dd90:	3301      	adds	r3, #1
    dd92:	484f      	ldr	r0, [pc, #316]	; (ded0 <_svfprintf_r+0x1480>)
    dd94:	3210      	adds	r2, #16
    dd96:	2b07      	cmp	r3, #7
    dd98:	e9ca 0600 	strd	r0, r6, [sl]
    dd9c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dda0:	ddf0      	ble.n	dd84 <_svfprintf_r+0x1334>
    dda2:	aa24      	add	r2, sp, #144	; 0x90
    dda4:	4658      	mov	r0, fp
    dda6:	9103      	str	r1, [sp, #12]
    dda8:	f001 fd5a 	bl	f860 <__ssprint_r>
    ddac:	2800      	cmp	r0, #0
    ddae:	f47f aab4 	bne.w	d31a <_svfprintf_r+0x8ca>
    ddb2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ddb6:	9903      	ldr	r1, [sp, #12]
    ddb8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ddbc:	e7e4      	b.n	dd88 <_svfprintf_r+0x1338>
    ddbe:	9b08      	ldr	r3, [sp, #32]
    ddc0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    ddc4:	bf1a      	itte	ne
    ddc6:	4611      	movne	r1, r2
    ddc8:	f853 2b04 	ldrne.w	r2, [r3], #4
    ddcc:	f853 2b04 	ldreq.w	r2, [r3], #4
    ddd0:	9308      	str	r3, [sp, #32]
    ddd2:	bf18      	it	ne
    ddd4:	b2d2      	uxtbne	r2, r2
    ddd6:	f7ff b945 	b.w	d064 <_svfprintf_r+0x614>
    ddda:	9b02      	ldr	r3, [sp, #8]
    dddc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    dde0:	9b08      	ldr	r3, [sp, #32]
    dde2:	bf1a      	itte	ne
    dde4:	4611      	movne	r1, r2
    dde6:	f853 2b04 	ldrne.w	r2, [r3], #4
    ddea:	f853 2b04 	ldreq.w	r2, [r3], #4
    ddee:	9308      	str	r3, [sp, #32]
    ddf0:	bf18      	it	ne
    ddf2:	b2d2      	uxtbne	r2, r2
    ddf4:	2301      	movs	r3, #1
    ddf6:	f7ff b8d0 	b.w	cf9a <_svfprintf_r+0x54a>
    ddfa:	9b08      	ldr	r3, [sp, #32]
    ddfc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    de00:	bf1a      	itte	ne
    de02:	4611      	movne	r1, r2
    de04:	f853 2b04 	ldrne.w	r2, [r3], #4
    de08:	f853 2b04 	ldreq.w	r2, [r3], #4
    de0c:	9308      	str	r3, [sp, #32]
    de0e:	bf18      	it	ne
    de10:	b2d2      	uxtbne	r2, r2
    de12:	e54e      	b.n	d8b2 <_svfprintf_r+0xe62>
    de14:	468a      	mov	sl, r1
    de16:	3301      	adds	r3, #1
    de18:	492d      	ldr	r1, [pc, #180]	; (ded0 <_svfprintf_r+0x1480>)
    de1a:	f8ca 5004 	str.w	r5, [sl, #4]
    de1e:	442a      	add	r2, r5
    de20:	2b07      	cmp	r3, #7
    de22:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    de26:	f8ca 1000 	str.w	r1, [sl]
    de2a:	f300 8139 	bgt.w	e0a0 <_svfprintf_r+0x1650>
    de2e:	f10a 0a08 	add.w	sl, sl, #8
    de32:	f7ff bb8c 	b.w	d54e <_svfprintf_r+0xafe>
    de36:	2300      	movs	r3, #0
    de38:	4619      	mov	r1, r3
    de3a:	9600      	str	r6, [sp, #0]
    de3c:	aa1d      	add	r2, sp, #116	; 0x74
    de3e:	4658      	mov	r0, fp
    de40:	f001 fcee 	bl	f820 <_wcsrtombs_r>
    de44:	4603      	mov	r3, r0
    de46:	3301      	adds	r3, #1
    de48:	9005      	str	r0, [sp, #20]
    de4a:	f000 82f1 	beq.w	e430 <_svfprintf_r+0x19e0>
    de4e:	941d      	str	r4, [sp, #116]	; 0x74
    de50:	9b05      	ldr	r3, [sp, #20]
    de52:	2b00      	cmp	r3, #0
    de54:	d04e      	beq.n	def4 <_svfprintf_r+0x14a4>
    de56:	2b63      	cmp	r3, #99	; 0x63
    de58:	f300 8118 	bgt.w	e08c <_svfprintf_r+0x163c>
    de5c:	2300      	movs	r3, #0
    de5e:	9307      	str	r3, [sp, #28]
    de60:	ac37      	add	r4, sp, #220	; 0xdc
    de62:	2208      	movs	r2, #8
    de64:	2100      	movs	r1, #0
    de66:	4630      	mov	r0, r6
    de68:	f7fd fca4 	bl	b7b4 <memset>
    de6c:	9d05      	ldr	r5, [sp, #20]
    de6e:	9600      	str	r6, [sp, #0]
    de70:	462b      	mov	r3, r5
    de72:	aa1d      	add	r2, sp, #116	; 0x74
    de74:	4621      	mov	r1, r4
    de76:	4658      	mov	r0, fp
    de78:	f001 fcd2 	bl	f820 <_wcsrtombs_r>
    de7c:	4285      	cmp	r5, r0
    de7e:	f040 837c 	bne.w	e57a <_svfprintf_r+0x1b2a>
    de82:	9a05      	ldr	r2, [sp, #20]
    de84:	2300      	movs	r3, #0
    de86:	54a3      	strb	r3, [r4, r2]
    de88:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    de8c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    de90:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    de94:	9303      	str	r3, [sp, #12]
    de96:	9202      	str	r2, [sp, #8]
    de98:	930f      	str	r3, [sp, #60]	; 0x3c
    de9a:	f7fe bfba 	b.w	ce12 <_svfprintf_r+0x3c2>
    de9e:	212d      	movs	r1, #45	; 0x2d
    dea0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    dea4:	f7fe bfa4 	b.w	cdf0 <_svfprintf_r+0x3a0>
    dea8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    deaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    deac:	ebab 0b03 	sub.w	fp, fp, r3
    deb0:	461a      	mov	r2, r3
    deb2:	4658      	mov	r0, fp
    deb4:	f7fd fd36 	bl	b924 <strncpy>
    deb8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    debc:	4b05      	ldr	r3, [pc, #20]	; (ded4 <_svfprintf_r+0x1484>)
    debe:	b10a      	cbz	r2, dec4 <_svfprintf_r+0x1474>
    dec0:	f10a 0a01 	add.w	sl, sl, #1
    dec4:	f04f 0c00 	mov.w	ip, #0
    dec8:	e628      	b.n	db1c <_svfprintf_r+0x10cc>
    deca:	bf00      	nop
    decc:	20000ce8 	.word	0x20000ce8
    ded0:	20001230 	.word	0x20001230
    ded4:	cccccccd 	.word	0xcccccccd
    ded8:	ee1b 1a10 	vmov	r1, s22
    dedc:	aa24      	add	r2, sp, #144	; 0x90
    dede:	4658      	mov	r0, fp
    dee0:	f001 fcbe 	bl	f860 <__ssprint_r>
    dee4:	2800      	cmp	r0, #0
    dee6:	f47f aa18 	bne.w	d31a <_svfprintf_r+0x8ca>
    deea:	991b      	ldr	r1, [sp, #108]	; 0x6c
    deec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    deee:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    def2:	e67c      	b.n	dbee <_svfprintf_r+0x119e>
    def4:	9b05      	ldr	r3, [sp, #20]
    def6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    defa:	930f      	str	r3, [sp, #60]	; 0x3c
    defc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    df00:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    df04:	9307      	str	r3, [sp, #28]
    df06:	f7fe bf84 	b.w	ce12 <_svfprintf_r+0x3c2>
    df0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    df0c:	9805      	ldr	r0, [sp, #20]
    df0e:	1865      	adds	r5, r4, r1
    df10:	1a2d      	subs	r5, r5, r0
    df12:	1acc      	subs	r4, r1, r3
    df14:	42a5      	cmp	r5, r4
    df16:	bfa8      	it	ge
    df18:	4625      	movge	r5, r4
    df1a:	f7ff bb4d 	b.w	d5b8 <_svfprintf_r+0xb68>
    df1e:	9b08      	ldr	r3, [sp, #32]
    df20:	9904      	ldr	r1, [sp, #16]
    df22:	f853 2b04 	ldr.w	r2, [r3], #4
    df26:	9308      	str	r3, [sp, #32]
    df28:	8011      	strh	r1, [r2, #0]
    df2a:	464c      	mov	r4, r9
    df2c:	f7fe bdc2 	b.w	cab4 <_svfprintf_r+0x64>
    df30:	f913 2b04 	ldrsb.w	r2, [r3], #4
    df34:	9308      	str	r3, [sp, #32]
    df36:	17d1      	asrs	r1, r2, #31
    df38:	460b      	mov	r3, r1
    df3a:	f7fe bfdb 	b.w	cef4 <_svfprintf_r+0x4a4>
    df3e:	9a03      	ldr	r2, [sp, #12]
    df40:	2102      	movs	r1, #2
    df42:	ab22      	add	r3, sp, #136	; 0x88
    df44:	9301      	str	r3, [sp, #4]
    df46:	ab1d      	add	r3, sp, #116	; 0x74
    df48:	9300      	str	r3, [sp, #0]
    df4a:	4658      	mov	r0, fp
    df4c:	ab1b      	add	r3, sp, #108	; 0x6c
    df4e:	eeb0 0b4a 	vmov.f64	d0, d10
    df52:	9202      	str	r2, [sp, #8]
    df54:	f000 fdc8 	bl	eae8 <_dtoa_r>
    df58:	2d47      	cmp	r5, #71	; 0x47
    df5a:	9a02      	ldr	r2, [sp, #8]
    df5c:	4604      	mov	r4, r0
    df5e:	f000 8161 	beq.w	e224 <_svfprintf_r+0x17d4>
    df62:	2d46      	cmp	r5, #70	; 0x46
    df64:	4410      	add	r0, r2
    df66:	d105      	bne.n	df74 <_svfprintf_r+0x1524>
    df68:	7823      	ldrb	r3, [r4, #0]
    df6a:	2b30      	cmp	r3, #48	; 0x30
    df6c:	f000 826f 	beq.w	e44e <_svfprintf_r+0x19fe>
    df70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    df72:	4410      	add	r0, r2
    df74:	eeb5 ab40 	vcmp.f64	d10, #0.0
    df78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    df7c:	f040 8146 	bne.w	e20c <_svfprintf_r+0x17bc>
    df80:	4603      	mov	r3, r0
    df82:	1b1b      	subs	r3, r3, r4
    df84:	930e      	str	r3, [sp, #56]	; 0x38
    df86:	2d47      	cmp	r5, #71	; 0x47
    df88:	f000 8110 	beq.w	e1ac <_svfprintf_r+0x175c>
    df8c:	2d46      	cmp	r5, #70	; 0x46
    df8e:	f000 81b5 	beq.w	e2fc <_svfprintf_r+0x18ac>
    df92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    df94:	930c      	str	r3, [sp, #48]	; 0x30
    df96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df98:	2d41      	cmp	r5, #65	; 0x41
    df9a:	f103 33ff 	add.w	r3, r3, #4294967295
    df9e:	931b      	str	r3, [sp, #108]	; 0x6c
    dfa0:	f000 81e5 	beq.w	e36e <_svfprintf_r+0x191e>
    dfa4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    dfa8:	2100      	movs	r1, #0
    dfaa:	2b00      	cmp	r3, #0
    dfac:	bfb8      	it	lt
    dfae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    dfb0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    dfb4:	bfba      	itte	lt
    dfb6:	f1c3 0301 	rsblt	r3, r3, #1
    dfba:	222d      	movlt	r2, #45	; 0x2d
    dfbc:	222b      	movge	r2, #43	; 0x2b
    dfbe:	2b09      	cmp	r3, #9
    dfc0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    dfc4:	f340 81da 	ble.w	e37c <_svfprintf_r+0x192c>
    dfc8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    dfcc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; e3ec <_svfprintf_r+0x199c>
    dfd0:	462a      	mov	r2, r5
    dfd2:	4610      	mov	r0, r2
    dfd4:	fb8c 2103 	smull	r2, r1, ip, r3
    dfd8:	17da      	asrs	r2, r3, #31
    dfda:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    dfde:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    dfe2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    dfe6:	3130      	adds	r1, #48	; 0x30
    dfe8:	f800 1c01 	strb.w	r1, [r0, #-1]
    dfec:	4619      	mov	r1, r3
    dfee:	2963      	cmp	r1, #99	; 0x63
    dff0:	4613      	mov	r3, r2
    dff2:	f100 32ff 	add.w	r2, r0, #4294967295
    dff6:	dcec      	bgt.n	dfd2 <_svfprintf_r+0x1582>
    dff8:	3330      	adds	r3, #48	; 0x30
    dffa:	b2d9      	uxtb	r1, r3
    dffc:	1e83      	subs	r3, r0, #2
    dffe:	429d      	cmp	r5, r3
    e000:	f802 1c01 	strb.w	r1, [r2, #-1]
    e004:	f240 828b 	bls.w	e51e <_svfprintf_r+0x1ace>
    e008:	4613      	mov	r3, r2
    e00a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e00e:	e001      	b.n	e014 <_svfprintf_r+0x15c4>
    e010:	f813 1b01 	ldrb.w	r1, [r3], #1
    e014:	f802 1b01 	strb.w	r1, [r2], #1
    e018:	429d      	cmp	r5, r3
    e01a:	d1f9      	bne.n	e010 <_svfprintf_r+0x15c0>
    e01c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    e020:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e024:	1a1b      	subs	r3, r3, r0
    e026:	4413      	add	r3, r2
    e028:	aa1e      	add	r2, sp, #120	; 0x78
    e02a:	1a9b      	subs	r3, r3, r2
    e02c:	9314      	str	r3, [sp, #80]	; 0x50
    e02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e030:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e032:	2b01      	cmp	r3, #1
    e034:	441a      	add	r2, r3
    e036:	9205      	str	r2, [sp, #20]
    e038:	f340 8203 	ble.w	e442 <_svfprintf_r+0x19f2>
    e03c:	9b05      	ldr	r3, [sp, #20]
    e03e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e040:	4413      	add	r3, r2
    e042:	9305      	str	r3, [sp, #20]
    e044:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    e048:	9a05      	ldr	r2, [sp, #20]
    e04a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    e04e:	2300      	movs	r3, #0
    e050:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e054:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e058:	930f      	str	r3, [sp, #60]	; 0x3c
    e05a:	9202      	str	r2, [sp, #8]
    e05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e05e:	2b00      	cmp	r3, #0
    e060:	f040 80b1 	bne.w	e1c6 <_svfprintf_r+0x1776>
    e064:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e068:	9303      	str	r3, [sp, #12]
    e06a:	f7fe bed2 	b.w	ce12 <_svfprintf_r+0x3c2>
    e06e:	4620      	mov	r0, r4
    e070:	f7fd ff06 	bl	be80 <strlen>
    e074:	4602      	mov	r2, r0
    e076:	9005      	str	r0, [sp, #20]
    e078:	f7fe bf20 	b.w	cebc <_svfprintf_r+0x46c>
    e07c:	ee1b 1a10 	vmov	r1, s22
    e080:	aa24      	add	r2, sp, #144	; 0x90
    e082:	4658      	mov	r0, fp
    e084:	f001 fbec 	bl	f860 <__ssprint_r>
    e088:	f7fe bded 	b.w	cc66 <_svfprintf_r+0x216>
    e08c:	1c59      	adds	r1, r3, #1
    e08e:	4658      	mov	r0, fp
    e090:	f7fc fb98 	bl	a7c4 <_malloc_r>
    e094:	4604      	mov	r4, r0
    e096:	2800      	cmp	r0, #0
    e098:	f000 81ca 	beq.w	e430 <_svfprintf_r+0x19e0>
    e09c:	9007      	str	r0, [sp, #28]
    e09e:	e6e0      	b.n	de62 <_svfprintf_r+0x1412>
    e0a0:	ee1b 1a10 	vmov	r1, s22
    e0a4:	aa24      	add	r2, sp, #144	; 0x90
    e0a6:	4658      	mov	r0, fp
    e0a8:	f001 fbda 	bl	f860 <__ssprint_r>
    e0ac:	2800      	cmp	r0, #0
    e0ae:	f47f a934 	bne.w	d31a <_svfprintf_r+0x8ca>
    e0b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e0b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0b8:	f7ff ba49 	b.w	d54e <_svfprintf_r+0xafe>
    e0bc:	ee1b 1a10 	vmov	r1, s22
    e0c0:	aa24      	add	r2, sp, #144	; 0x90
    e0c2:	4658      	mov	r0, fp
    e0c4:	f001 fbcc 	bl	f860 <__ssprint_r>
    e0c8:	2800      	cmp	r0, #0
    e0ca:	f47f a926 	bne.w	d31a <_svfprintf_r+0x8ca>
    e0ce:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e0d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e0d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0d8:	e649      	b.n	dd6e <_svfprintf_r+0x131e>
    e0da:	2306      	movs	r3, #6
    e0dc:	9303      	str	r3, [sp, #12]
    e0de:	f7ff bb83 	b.w	d7e8 <_svfprintf_r+0xd98>
    e0e2:	9b03      	ldr	r3, [sp, #12]
    e0e4:	2102      	movs	r1, #2
    e0e6:	1c5a      	adds	r2, r3, #1
    e0e8:	e72b      	b.n	df42 <_svfprintf_r+0x14f2>
    e0ea:	9a03      	ldr	r2, [sp, #12]
    e0ec:	2103      	movs	r1, #3
    e0ee:	e728      	b.n	df42 <_svfprintf_r+0x14f2>
    e0f0:	a81b      	add	r0, sp, #108	; 0x6c
    e0f2:	eeb0 0b4a 	vmov.f64	d0, d10
    e0f6:	f000 fbcb 	bl	e890 <frexp>
    e0fa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e0fe:	ee20 0b07 	vmul.f64	d0, d0, d7
    e102:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e10a:	d101      	bne.n	e110 <_svfprintf_r+0x16c0>
    e10c:	2301      	movs	r3, #1
    e10e:	931b      	str	r3, [sp, #108]	; 0x6c
    e110:	48b3      	ldr	r0, [pc, #716]	; (e3e0 <_svfprintf_r+0x1990>)
    e112:	9b03      	ldr	r3, [sp, #12]
    e114:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    e118:	3b01      	subs	r3, #1
    e11a:	4622      	mov	r2, r4
    e11c:	e004      	b.n	e128 <_svfprintf_r+0x16d8>
    e11e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e126:	d013      	beq.n	e150 <_svfprintf_r+0x1700>
    e128:	ee20 0b05 	vmul.f64	d0, d0, d5
    e12c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    e130:	f1b3 3fff 	cmp.w	r3, #4294967295
    e134:	ee17 1a90 	vmov	r1, s15
    e138:	5c41      	ldrb	r1, [r0, r1]
    e13a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    e13e:	4694      	mov	ip, r2
    e140:	ee30 0b46 	vsub.f64	d0, d0, d6
    e144:	f802 1b01 	strb.w	r1, [r2], #1
    e148:	4619      	mov	r1, r3
    e14a:	f103 33ff 	add.w	r3, r3, #4294967295
    e14e:	d1e6      	bne.n	e11e <_svfprintf_r+0x16ce>
    e150:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    e154:	eeb4 0bc6 	vcmpe.f64	d0, d6
    e158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e15c:	f300 8148 	bgt.w	e3f0 <_svfprintf_r+0x19a0>
    e160:	eeb4 0b46 	vcmp.f64	d0, d6
    e164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e168:	d104      	bne.n	e174 <_svfprintf_r+0x1724>
    e16a:	ee17 3a90 	vmov	r3, s15
    e16e:	07db      	lsls	r3, r3, #31
    e170:	f100 813e 	bmi.w	e3f0 <_svfprintf_r+0x19a0>
    e174:	2900      	cmp	r1, #0
    e176:	db06      	blt.n	e186 <_svfprintf_r+0x1736>
    e178:	1c4b      	adds	r3, r1, #1
    e17a:	4413      	add	r3, r2
    e17c:	2130      	movs	r1, #48	; 0x30
    e17e:	f802 1b01 	strb.w	r1, [r2], #1
    e182:	4293      	cmp	r3, r2
    e184:	d1fb      	bne.n	e17e <_svfprintf_r+0x172e>
    e186:	1b13      	subs	r3, r2, r4
    e188:	930e      	str	r3, [sp, #56]	; 0x38
    e18a:	e6fc      	b.n	df86 <_svfprintf_r+0x1536>
    e18c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e190:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    e194:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    e198:	9613      	str	r6, [sp, #76]	; 0x4c
    e19a:	18e3      	adds	r3, r4, r3
    e19c:	429d      	cmp	r5, r3
    e19e:	4629      	mov	r1, r5
    e1a0:	bf28      	it	cs
    e1a2:	4619      	movcs	r1, r3
    e1a4:	4682      	mov	sl, r0
    e1a6:	9105      	str	r1, [sp, #20]
    e1a8:	f7ff b9d8 	b.w	d55c <_svfprintf_r+0xb0c>
    e1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e1ae:	930c      	str	r3, [sp, #48]	; 0x30
    e1b0:	1cda      	adds	r2, r3, #3
    e1b2:	db02      	blt.n	e1ba <_svfprintf_r+0x176a>
    e1b4:	9a03      	ldr	r2, [sp, #12]
    e1b6:	4293      	cmp	r3, r2
    e1b8:	dd0c      	ble.n	e1d4 <_svfprintf_r+0x1784>
    e1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e1bc:	3b02      	subs	r3, #2
    e1be:	930b      	str	r3, [sp, #44]	; 0x2c
    e1c0:	f023 0520 	bic.w	r5, r3, #32
    e1c4:	e6e7      	b.n	df96 <_svfprintf_r+0x1546>
    e1c6:	212d      	movs	r1, #45	; 0x2d
    e1c8:	2300      	movs	r3, #0
    e1ca:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e1ce:	9303      	str	r3, [sp, #12]
    e1d0:	f7fe be22 	b.w	ce18 <_svfprintf_r+0x3c8>
    e1d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e1d8:	4293      	cmp	r3, r2
    e1da:	f2c0 80bd 	blt.w	e358 <_svfprintf_r+0x1908>
    e1de:	07f0      	lsls	r0, r6, #31
    e1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1e2:	f140 8132 	bpl.w	e44a <_svfprintf_r+0x19fa>
    e1e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e1e8:	4413      	add	r3, r2
    e1ea:	9305      	str	r3, [sp, #20]
    e1ec:	0571      	lsls	r1, r6, #21
    e1ee:	d503      	bpl.n	e1f8 <_svfprintf_r+0x17a8>
    e1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e1f2:	2b00      	cmp	r3, #0
    e1f4:	f300 8135 	bgt.w	e462 <_svfprintf_r+0x1a12>
    e1f8:	9b05      	ldr	r3, [sp, #20]
    e1fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e1fe:	9302      	str	r3, [sp, #8]
    e200:	2367      	movs	r3, #103	; 0x67
    e202:	930b      	str	r3, [sp, #44]	; 0x2c
    e204:	2300      	movs	r3, #0
    e206:	930f      	str	r3, [sp, #60]	; 0x3c
    e208:	930d      	str	r3, [sp, #52]	; 0x34
    e20a:	e727      	b.n	e05c <_svfprintf_r+0x160c>
    e20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e20e:	4283      	cmp	r3, r0
    e210:	f4bf aeb7 	bcs.w	df82 <_svfprintf_r+0x1532>
    e214:	2130      	movs	r1, #48	; 0x30
    e216:	1c5a      	adds	r2, r3, #1
    e218:	9222      	str	r2, [sp, #136]	; 0x88
    e21a:	7019      	strb	r1, [r3, #0]
    e21c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e21e:	4298      	cmp	r0, r3
    e220:	d8f9      	bhi.n	e216 <_svfprintf_r+0x17c6>
    e222:	e6ae      	b.n	df82 <_svfprintf_r+0x1532>
    e224:	07f3      	lsls	r3, r6, #31
    e226:	f100 80a7 	bmi.w	e378 <_svfprintf_r+0x1928>
    e22a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e22c:	e6a9      	b.n	df82 <_svfprintf_r+0x1532>
    e22e:	aa24      	add	r2, sp, #144	; 0x90
    e230:	4658      	mov	r0, fp
    e232:	9105      	str	r1, [sp, #20]
    e234:	f001 fb14 	bl	f860 <__ssprint_r>
    e238:	2800      	cmp	r0, #0
    e23a:	f47f a86e 	bne.w	d31a <_svfprintf_r+0x8ca>
    e23e:	f896 c000 	ldrb.w	ip, [r6]
    e242:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e244:	9905      	ldr	r1, [sp, #20]
    e246:	a827      	add	r0, sp, #156	; 0x9c
    e248:	4465      	add	r5, ip
    e24a:	f7ff bbec 	b.w	da26 <_svfprintf_r+0xfd6>
    e24e:	ee1b 1a10 	vmov	r1, s22
    e252:	aa24      	add	r2, sp, #144	; 0x90
    e254:	4658      	mov	r0, fp
    e256:	f001 fb03 	bl	f860 <__ssprint_r>
    e25a:	2800      	cmp	r0, #0
    e25c:	f47f a85d 	bne.w	d31a <_svfprintf_r+0x8ca>
    e260:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e262:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e266:	f7ff b96b 	b.w	d540 <_svfprintf_r+0xaf0>
    e26a:	2378      	movs	r3, #120	; 0x78
    e26c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e270:	2330      	movs	r3, #48	; 0x30
    e272:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e276:	9b03      	ldr	r3, [sp, #12]
    e278:	2b63      	cmp	r3, #99	; 0x63
    e27a:	f048 0602 	orr.w	r6, r8, #2
    e27e:	f300 80a6 	bgt.w	e3ce <_svfprintf_r+0x197e>
    e282:	2300      	movs	r3, #0
    e284:	9307      	str	r3, [sp, #28]
    e286:	ac37      	add	r4, sp, #220	; 0xdc
    e288:	ee18 3a90 	vmov	r3, s17
    e28c:	2b00      	cmp	r3, #0
    e28e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e292:	db2b      	blt.n	e2ec <_svfprintf_r+0x189c>
    e294:	eeb0 ab48 	vmov.f64	d10, d8
    e298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e29a:	f023 0520 	bic.w	r5, r3, #32
    e29e:	2300      	movs	r3, #0
    e2a0:	9309      	str	r3, [sp, #36]	; 0x24
    e2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e2a4:	2b61      	cmp	r3, #97	; 0x61
    e2a6:	f47f aaad 	bne.w	d804 <_svfprintf_r+0xdb4>
    e2aa:	eeb0 0b4a 	vmov.f64	d0, d10
    e2ae:	a81b      	add	r0, sp, #108	; 0x6c
    e2b0:	f000 faee 	bl	e890 <frexp>
    e2b4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e2b8:	ee20 0b07 	vmul.f64	d0, d0, d7
    e2bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e2c4:	d101      	bne.n	e2ca <_svfprintf_r+0x187a>
    e2c6:	2301      	movs	r3, #1
    e2c8:	931b      	str	r3, [sp, #108]	; 0x6c
    e2ca:	4846      	ldr	r0, [pc, #280]	; (e3e4 <_svfprintf_r+0x1994>)
    e2cc:	e721      	b.n	e112 <_svfprintf_r+0x16c2>
    e2ce:	ee1b 1a10 	vmov	r1, s22
    e2d2:	aa24      	add	r2, sp, #144	; 0x90
    e2d4:	4658      	mov	r0, fp
    e2d6:	f001 fac3 	bl	f860 <__ssprint_r>
    e2da:	2800      	cmp	r0, #0
    e2dc:	f47f a81d 	bne.w	d31a <_svfprintf_r+0x8ca>
    e2e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e2e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e2e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2e8:	f7ff b94e 	b.w	d588 <_svfprintf_r+0xb38>
    e2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e2ee:	f023 0520 	bic.w	r5, r3, #32
    e2f2:	232d      	movs	r3, #45	; 0x2d
    e2f4:	9309      	str	r3, [sp, #36]	; 0x24
    e2f6:	eeb1 ab48 	vneg.f64	d10, d8
    e2fa:	e7d2      	b.n	e2a2 <_svfprintf_r+0x1852>
    e2fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e2fe:	920c      	str	r2, [sp, #48]	; 0x30
    e300:	2a00      	cmp	r2, #0
    e302:	f006 0301 	and.w	r3, r6, #1
    e306:	f340 810d 	ble.w	e524 <_svfprintf_r+0x1ad4>
    e30a:	9903      	ldr	r1, [sp, #12]
    e30c:	430b      	orrs	r3, r1
    e30e:	f040 80cf 	bne.w	e4b0 <_svfprintf_r+0x1a60>
    e312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e314:	9305      	str	r3, [sp, #20]
    e316:	2366      	movs	r3, #102	; 0x66
    e318:	930b      	str	r3, [sp, #44]	; 0x2c
    e31a:	0572      	lsls	r2, r6, #21
    e31c:	f100 80a3 	bmi.w	e466 <_svfprintf_r+0x1a16>
    e320:	9b05      	ldr	r3, [sp, #20]
    e322:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e326:	9302      	str	r3, [sp, #8]
    e328:	e76c      	b.n	e204 <_svfprintf_r+0x17b4>
    e32a:	ee1b 1a10 	vmov	r1, s22
    e32e:	aa24      	add	r2, sp, #144	; 0x90
    e330:	4658      	mov	r0, fp
    e332:	f001 fa95 	bl	f860 <__ssprint_r>
    e336:	2800      	cmp	r0, #0
    e338:	f47e afef 	bne.w	d31a <_svfprintf_r+0x8ca>
    e33c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e340:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e342:	1b1c      	subs	r4, r3, r4
    e344:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e348:	f7ff b936 	b.w	d5b8 <_svfprintf_r+0xb68>
    e34c:	2358      	movs	r3, #88	; 0x58
    e34e:	e78d      	b.n	e26c <_svfprintf_r+0x181c>
    e350:	2200      	movs	r2, #0
    e352:	9203      	str	r2, [sp, #12]
    e354:	f7fe bbda 	b.w	cb0c <_svfprintf_r+0xbc>
    e358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e35a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e35c:	189a      	adds	r2, r3, r2
    e35e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e360:	9205      	str	r2, [sp, #20]
    e362:	2b00      	cmp	r3, #0
    e364:	f340 80ab 	ble.w	e4be <_svfprintf_r+0x1a6e>
    e368:	2367      	movs	r3, #103	; 0x67
    e36a:	930b      	str	r3, [sp, #44]	; 0x2c
    e36c:	e7d5      	b.n	e31a <_svfprintf_r+0x18ca>
    e36e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e370:	320f      	adds	r2, #15
    e372:	b2d2      	uxtb	r2, r2
    e374:	2101      	movs	r1, #1
    e376:	e618      	b.n	dfaa <_svfprintf_r+0x155a>
    e378:	18a0      	adds	r0, r4, r2
    e37a:	e5fb      	b.n	df74 <_svfprintf_r+0x1524>
    e37c:	2900      	cmp	r1, #0
    e37e:	f040 80a8 	bne.w	e4d2 <_svfprintf_r+0x1a82>
    e382:	2230      	movs	r2, #48	; 0x30
    e384:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    e388:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    e38c:	3330      	adds	r3, #48	; 0x30
    e38e:	f802 3b01 	strb.w	r3, [r2], #1
    e392:	ab1e      	add	r3, sp, #120	; 0x78
    e394:	1ad3      	subs	r3, r2, r3
    e396:	9314      	str	r3, [sp, #80]	; 0x50
    e398:	e649      	b.n	e02e <_svfprintf_r+0x15de>
    e39a:	3301      	adds	r3, #1
    e39c:	4912      	ldr	r1, [pc, #72]	; (e3e8 <_svfprintf_r+0x1998>)
    e39e:	f8ca 5004 	str.w	r5, [sl, #4]
    e3a2:	442a      	add	r2, r5
    e3a4:	2b07      	cmp	r3, #7
    e3a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e3aa:	f8ca 1000 	str.w	r1, [sl]
    e3ae:	f77f ac33 	ble.w	dc18 <_svfprintf_r+0x11c8>
    e3b2:	ee1b 1a10 	vmov	r1, s22
    e3b6:	aa24      	add	r2, sp, #144	; 0x90
    e3b8:	4658      	mov	r0, fp
    e3ba:	f001 fa51 	bl	f860 <__ssprint_r>
    e3be:	2800      	cmp	r0, #0
    e3c0:	f47e afab 	bne.w	d31a <_svfprintf_r+0x8ca>
    e3c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e3c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e3cc:	e426      	b.n	dc1c <_svfprintf_r+0x11cc>
    e3ce:	1c59      	adds	r1, r3, #1
    e3d0:	4658      	mov	r0, fp
    e3d2:	f7fc f9f7 	bl	a7c4 <_malloc_r>
    e3d6:	4604      	mov	r4, r0
    e3d8:	b350      	cbz	r0, e430 <_svfprintf_r+0x19e0>
    e3da:	9007      	str	r0, [sp, #28]
    e3dc:	e754      	b.n	e288 <_svfprintf_r+0x1838>
    e3de:	bf00      	nop
    e3e0:	20000ccc 	.word	0x20000ccc
    e3e4:	20000cb8 	.word	0x20000cb8
    e3e8:	20001230 	.word	0x20001230
    e3ec:	66666667 	.word	0x66666667
    e3f0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    e3f4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    e3f8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    e3fc:	4561      	cmp	r1, ip
    e3fe:	4613      	mov	r3, r2
    e400:	d10a      	bne.n	e418 <_svfprintf_r+0x19c8>
    e402:	f04f 0e30 	mov.w	lr, #48	; 0x30
    e406:	f803 ec01 	strb.w	lr, [r3, #-1]
    e40a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e40c:	1e59      	subs	r1, r3, #1
    e40e:	9122      	str	r1, [sp, #136]	; 0x88
    e410:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    e414:	458c      	cmp	ip, r1
    e416:	d0f6      	beq.n	e406 <_svfprintf_r+0x19b6>
    e418:	2939      	cmp	r1, #57	; 0x39
    e41a:	bf16      	itet	ne
    e41c:	3101      	addne	r1, #1
    e41e:	7a81      	ldrbeq	r1, [r0, #10]
    e420:	b2c9      	uxtbne	r1, r1
    e422:	f803 1c01 	strb.w	r1, [r3, #-1]
    e426:	e6ae      	b.n	e186 <_svfprintf_r+0x1736>
    e428:	2300      	movs	r3, #0
    e42a:	4690      	mov	r8, r2
    e42c:	9307      	str	r3, [sp, #28]
    e42e:	e760      	b.n	e2f2 <_svfprintf_r+0x18a2>
    e430:	ee1b 2a10 	vmov	r2, s22
    e434:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e43c:	8193      	strh	r3, [r2, #12]
    e43e:	f7fe bc16 	b.w	cc6e <_svfprintf_r+0x21e>
    e442:	07f5      	lsls	r5, r6, #31
    e444:	f57f adfe 	bpl.w	e044 <_svfprintf_r+0x15f4>
    e448:	e5f8      	b.n	e03c <_svfprintf_r+0x15ec>
    e44a:	9305      	str	r3, [sp, #20]
    e44c:	e6ce      	b.n	e1ec <_svfprintf_r+0x179c>
    e44e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e456:	f43f ad8b 	beq.w	df70 <_svfprintf_r+0x1520>
    e45a:	f1c2 0201 	rsb	r2, r2, #1
    e45e:	921b      	str	r2, [sp, #108]	; 0x6c
    e460:	e587      	b.n	df72 <_svfprintf_r+0x1522>
    e462:	2367      	movs	r3, #103	; 0x67
    e464:	930b      	str	r3, [sp, #44]	; 0x2c
    e466:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e468:	780b      	ldrb	r3, [r1, #0]
    e46a:	2bff      	cmp	r3, #255	; 0xff
    e46c:	d079      	beq.n	e562 <_svfprintf_r+0x1b12>
    e46e:	2500      	movs	r5, #0
    e470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e472:	4628      	mov	r0, r5
    e474:	e003      	b.n	e47e <_svfprintf_r+0x1a2e>
    e476:	3001      	adds	r0, #1
    e478:	3101      	adds	r1, #1
    e47a:	2bff      	cmp	r3, #255	; 0xff
    e47c:	d008      	beq.n	e490 <_svfprintf_r+0x1a40>
    e47e:	4293      	cmp	r3, r2
    e480:	da06      	bge.n	e490 <_svfprintf_r+0x1a40>
    e482:	1ad2      	subs	r2, r2, r3
    e484:	784b      	ldrb	r3, [r1, #1]
    e486:	2b00      	cmp	r3, #0
    e488:	d1f5      	bne.n	e476 <_svfprintf_r+0x1a26>
    e48a:	780b      	ldrb	r3, [r1, #0]
    e48c:	3501      	adds	r5, #1
    e48e:	e7f4      	b.n	e47a <_svfprintf_r+0x1a2a>
    e490:	920c      	str	r2, [sp, #48]	; 0x30
    e492:	9113      	str	r1, [sp, #76]	; 0x4c
    e494:	900d      	str	r0, [sp, #52]	; 0x34
    e496:	950f      	str	r5, [sp, #60]	; 0x3c
    e498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e49a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e49c:	9916      	ldr	r1, [sp, #88]	; 0x58
    e49e:	4413      	add	r3, r2
    e4a0:	9a05      	ldr	r2, [sp, #20]
    e4a2:	fb01 2303 	mla	r3, r1, r3, r2
    e4a6:	9305      	str	r3, [sp, #20]
    e4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e4ac:	9302      	str	r3, [sp, #8]
    e4ae:	e5d5      	b.n	e05c <_svfprintf_r+0x160c>
    e4b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e4b2:	18d3      	adds	r3, r2, r3
    e4b4:	4419      	add	r1, r3
    e4b6:	2366      	movs	r3, #102	; 0x66
    e4b8:	9105      	str	r1, [sp, #20]
    e4ba:	930b      	str	r3, [sp, #44]	; 0x2c
    e4bc:	e72d      	b.n	e31a <_svfprintf_r+0x18ca>
    e4be:	f1c3 0301 	rsb	r3, r3, #1
    e4c2:	441a      	add	r2, r3
    e4c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e4c8:	9302      	str	r3, [sp, #8]
    e4ca:	2367      	movs	r3, #103	; 0x67
    e4cc:	9205      	str	r2, [sp, #20]
    e4ce:	930b      	str	r3, [sp, #44]	; 0x2c
    e4d0:	e698      	b.n	e204 <_svfprintf_r+0x17b4>
    e4d2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e4d6:	e759      	b.n	e38c <_svfprintf_r+0x193c>
    e4d8:	9b03      	ldr	r3, [sp, #12]
    e4da:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e4de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e4e2:	9305      	str	r3, [sp, #20]
    e4e4:	e4b4      	b.n	de50 <_svfprintf_r+0x1400>
    e4e6:	ee18 3a90 	vmov	r3, s17
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	bfb4      	ite	lt
    e4ee:	212d      	movlt	r1, #45	; 0x2d
    e4f0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    e4f4:	4c25      	ldr	r4, [pc, #148]	; (e58c <_svfprintf_r+0x1b3c>)
    e4f6:	4b26      	ldr	r3, [pc, #152]	; (e590 <_svfprintf_r+0x1b40>)
    e4f8:	bfb8      	it	lt
    e4fa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    e4fe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e502:	f7fe bc79 	b.w	cdf8 <_svfprintf_r+0x3a8>
    e506:	9b03      	ldr	r3, [sp, #12]
    e508:	9302      	str	r3, [sp, #8]
    e50a:	9305      	str	r3, [sp, #20]
    e50c:	2373      	movs	r3, #115	; 0x73
    e50e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e512:	9003      	str	r0, [sp, #12]
    e514:	900f      	str	r0, [sp, #60]	; 0x3c
    e516:	900d      	str	r0, [sp, #52]	; 0x34
    e518:	930b      	str	r3, [sp, #44]	; 0x2c
    e51a:	f7fe bc7a 	b.w	ce12 <_svfprintf_r+0x3c2>
    e51e:	2302      	movs	r3, #2
    e520:	9314      	str	r3, [sp, #80]	; 0x50
    e522:	e584      	b.n	e02e <_svfprintf_r+0x15de>
    e524:	9a03      	ldr	r2, [sp, #12]
    e526:	4313      	orrs	r3, r2
    e528:	d105      	bne.n	e536 <_svfprintf_r+0x1ae6>
    e52a:	2301      	movs	r3, #1
    e52c:	2266      	movs	r2, #102	; 0x66
    e52e:	9302      	str	r3, [sp, #8]
    e530:	920b      	str	r2, [sp, #44]	; 0x2c
    e532:	9305      	str	r3, [sp, #20]
    e534:	e666      	b.n	e204 <_svfprintf_r+0x17b4>
    e536:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e538:	3301      	adds	r3, #1
    e53a:	441a      	add	r2, r3
    e53c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e540:	9302      	str	r3, [sp, #8]
    e542:	2366      	movs	r3, #102	; 0x66
    e544:	9205      	str	r2, [sp, #20]
    e546:	930b      	str	r3, [sp, #44]	; 0x2c
    e548:	e65c      	b.n	e204 <_svfprintf_r+0x17b4>
    e54a:	9a08      	ldr	r2, [sp, #32]
    e54c:	f899 3001 	ldrb.w	r3, [r9, #1]
    e550:	4689      	mov	r9, r1
    e552:	f852 1b04 	ldr.w	r1, [r2], #4
    e556:	9208      	str	r2, [sp, #32]
    e558:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    e55c:	9103      	str	r1, [sp, #12]
    e55e:	f7fe bad3 	b.w	cb08 <_svfprintf_r+0xb8>
    e562:	2300      	movs	r3, #0
    e564:	930f      	str	r3, [sp, #60]	; 0x3c
    e566:	930d      	str	r3, [sp, #52]	; 0x34
    e568:	e796      	b.n	e498 <_svfprintf_r+0x1a48>
    e56a:	230c      	movs	r3, #12
    e56c:	f8cb 3000 	str.w	r3, [fp]
    e570:	f04f 33ff 	mov.w	r3, #4294967295
    e574:	9304      	str	r3, [sp, #16]
    e576:	f7fe bb81 	b.w	cc7c <_svfprintf_r+0x22c>
    e57a:	ee1b 2a10 	vmov	r2, s22
    e57e:	8993      	ldrh	r3, [r2, #12]
    e580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e584:	8193      	strh	r3, [r2, #12]
    e586:	f7fe bec8 	b.w	d31a <_svfprintf_r+0x8ca>
    e58a:	bf00      	nop
    e58c:	20000cb0 	.word	0x20000cb0
    e590:	20000cb4 	.word	0x20000cb4

0000e594 <_fclose_r>:
    e594:	b570      	push	{r4, r5, r6, lr}
    e596:	2900      	cmp	r1, #0
    e598:	d04b      	beq.n	e632 <_fclose_r+0x9e>
    e59a:	4606      	mov	r6, r0
    e59c:	460c      	mov	r4, r1
    e59e:	b110      	cbz	r0, e5a6 <_fclose_r+0x12>
    e5a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d048      	beq.n	e638 <_fclose_r+0xa4>
    e5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e5a8:	07d8      	lsls	r0, r3, #31
    e5aa:	d534      	bpl.n	e616 <_fclose_r+0x82>
    e5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e5b0:	2b00      	cmp	r3, #0
    e5b2:	d03e      	beq.n	e632 <_fclose_r+0x9e>
    e5b4:	4621      	mov	r1, r4
    e5b6:	4630      	mov	r0, r6
    e5b8:	f000 f850 	bl	e65c <__sflush_r>
    e5bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e5be:	4605      	mov	r5, r0
    e5c0:	b133      	cbz	r3, e5d0 <_fclose_r+0x3c>
    e5c2:	69e1      	ldr	r1, [r4, #28]
    e5c4:	4630      	mov	r0, r6
    e5c6:	4798      	blx	r3
    e5c8:	2800      	cmp	r0, #0
    e5ca:	bfb8      	it	lt
    e5cc:	f04f 35ff 	movlt.w	r5, #4294967295
    e5d0:	89a3      	ldrh	r3, [r4, #12]
    e5d2:	061a      	lsls	r2, r3, #24
    e5d4:	d43c      	bmi.n	e650 <_fclose_r+0xbc>
    e5d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e5d8:	b141      	cbz	r1, e5ec <_fclose_r+0x58>
    e5da:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e5de:	4299      	cmp	r1, r3
    e5e0:	d002      	beq.n	e5e8 <_fclose_r+0x54>
    e5e2:	4630      	mov	r0, r6
    e5e4:	f7fd fd4e 	bl	c084 <_free_r>
    e5e8:	2300      	movs	r3, #0
    e5ea:	6323      	str	r3, [r4, #48]	; 0x30
    e5ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e5ee:	b121      	cbz	r1, e5fa <_fclose_r+0x66>
    e5f0:	4630      	mov	r0, r6
    e5f2:	f7fd fd47 	bl	c084 <_free_r>
    e5f6:	2300      	movs	r3, #0
    e5f8:	6463      	str	r3, [r4, #68]	; 0x44
    e5fa:	f7fc ffc9 	bl	b590 <__sfp_lock_acquire>
    e5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e600:	2200      	movs	r2, #0
    e602:	07db      	lsls	r3, r3, #31
    e604:	81a2      	strh	r2, [r4, #12]
    e606:	d51f      	bpl.n	e648 <_fclose_r+0xb4>
    e608:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e60a:	f7fd fa55 	bl	bab8 <__retarget_lock_close_recursive>
    e60e:	f7fc ffc5 	bl	b59c <__sfp_lock_release>
    e612:	4628      	mov	r0, r5
    e614:	bd70      	pop	{r4, r5, r6, pc}
    e616:	89a3      	ldrh	r3, [r4, #12]
    e618:	0599      	lsls	r1, r3, #22
    e61a:	d4cb      	bmi.n	e5b4 <_fclose_r+0x20>
    e61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e61e:	f7fd fa4d 	bl	babc <__retarget_lock_acquire_recursive>
    e622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e626:	2b00      	cmp	r3, #0
    e628:	d1c4      	bne.n	e5b4 <_fclose_r+0x20>
    e62a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    e62c:	f015 0501 	ands.w	r5, r5, #1
    e630:	d005      	beq.n	e63e <_fclose_r+0xaa>
    e632:	2500      	movs	r5, #0
    e634:	4628      	mov	r0, r5
    e636:	bd70      	pop	{r4, r5, r6, pc}
    e638:	f7fc ff8c 	bl	b554 <__sinit>
    e63c:	e7b3      	b.n	e5a6 <_fclose_r+0x12>
    e63e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e640:	f7fd fa3e 	bl	bac0 <__retarget_lock_release_recursive>
    e644:	4628      	mov	r0, r5
    e646:	bd70      	pop	{r4, r5, r6, pc}
    e648:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e64a:	f7fd fa39 	bl	bac0 <__retarget_lock_release_recursive>
    e64e:	e7db      	b.n	e608 <_fclose_r+0x74>
    e650:	6921      	ldr	r1, [r4, #16]
    e652:	4630      	mov	r0, r6
    e654:	f7fd fd16 	bl	c084 <_free_r>
    e658:	e7bd      	b.n	e5d6 <_fclose_r+0x42>
    e65a:	bf00      	nop

0000e65c <__sflush_r>:
    e65c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e664:	460c      	mov	r4, r1
    e666:	0711      	lsls	r1, r2, #28
    e668:	4680      	mov	r8, r0
    e66a:	d447      	bmi.n	e6fc <__sflush_r+0xa0>
    e66c:	6863      	ldr	r3, [r4, #4]
    e66e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    e672:	2b00      	cmp	r3, #0
    e674:	81a2      	strh	r2, [r4, #12]
    e676:	dd5e      	ble.n	e736 <__sflush_r+0xda>
    e678:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e67a:	2d00      	cmp	r5, #0
    e67c:	d058      	beq.n	e730 <__sflush_r+0xd4>
    e67e:	2300      	movs	r3, #0
    e680:	f8d8 6000 	ldr.w	r6, [r8]
    e684:	f8c8 3000 	str.w	r3, [r8]
    e688:	b293      	uxth	r3, r2
    e68a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    e68e:	d156      	bne.n	e73e <__sflush_r+0xe2>
    e690:	2301      	movs	r3, #1
    e692:	69e1      	ldr	r1, [r4, #28]
    e694:	4640      	mov	r0, r8
    e696:	47a8      	blx	r5
    e698:	1c43      	adds	r3, r0, #1
    e69a:	d067      	beq.n	e76c <__sflush_r+0x110>
    e69c:	89a3      	ldrh	r3, [r4, #12]
    e69e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e6a0:	075f      	lsls	r7, r3, #29
    e6a2:	d505      	bpl.n	e6b0 <__sflush_r+0x54>
    e6a4:	6863      	ldr	r3, [r4, #4]
    e6a6:	1ac0      	subs	r0, r0, r3
    e6a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e6aa:	b10b      	cbz	r3, e6b0 <__sflush_r+0x54>
    e6ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e6ae:	1ac0      	subs	r0, r0, r3
    e6b0:	69e1      	ldr	r1, [r4, #28]
    e6b2:	4602      	mov	r2, r0
    e6b4:	2300      	movs	r3, #0
    e6b6:	4640      	mov	r0, r8
    e6b8:	47a8      	blx	r5
    e6ba:	1c41      	adds	r1, r0, #1
    e6bc:	d141      	bne.n	e742 <__sflush_r+0xe6>
    e6be:	f8d8 3000 	ldr.w	r3, [r8]
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d03d      	beq.n	e742 <__sflush_r+0xe6>
    e6c6:	2b1d      	cmp	r3, #29
    e6c8:	d001      	beq.n	e6ce <__sflush_r+0x72>
    e6ca:	2b16      	cmp	r3, #22
    e6cc:	d156      	bne.n	e77c <__sflush_r+0x120>
    e6ce:	89a3      	ldrh	r3, [r4, #12]
    e6d0:	6922      	ldr	r2, [r4, #16]
    e6d2:	6022      	str	r2, [r4, #0]
    e6d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e6d8:	2100      	movs	r1, #0
    e6da:	6061      	str	r1, [r4, #4]
    e6dc:	81a3      	strh	r3, [r4, #12]
    e6de:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e6e0:	f8c8 6000 	str.w	r6, [r8]
    e6e4:	b321      	cbz	r1, e730 <__sflush_r+0xd4>
    e6e6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e6ea:	4299      	cmp	r1, r3
    e6ec:	d002      	beq.n	e6f4 <__sflush_r+0x98>
    e6ee:	4640      	mov	r0, r8
    e6f0:	f7fd fcc8 	bl	c084 <_free_r>
    e6f4:	2000      	movs	r0, #0
    e6f6:	6320      	str	r0, [r4, #48]	; 0x30
    e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6fc:	6926      	ldr	r6, [r4, #16]
    e6fe:	b1be      	cbz	r6, e730 <__sflush_r+0xd4>
    e700:	b293      	uxth	r3, r2
    e702:	6825      	ldr	r5, [r4, #0]
    e704:	6026      	str	r6, [r4, #0]
    e706:	079a      	lsls	r2, r3, #30
    e708:	bf0c      	ite	eq
    e70a:	6963      	ldreq	r3, [r4, #20]
    e70c:	2300      	movne	r3, #0
    e70e:	1bad      	subs	r5, r5, r6
    e710:	60a3      	str	r3, [r4, #8]
    e712:	e00b      	b.n	e72c <__sflush_r+0xd0>
    e714:	462b      	mov	r3, r5
    e716:	4632      	mov	r2, r6
    e718:	69e1      	ldr	r1, [r4, #28]
    e71a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e71c:	4640      	mov	r0, r8
    e71e:	47b8      	blx	r7
    e720:	f1b0 0c00 	subs.w	ip, r0, #0
    e724:	eba5 050c 	sub.w	r5, r5, ip
    e728:	4466      	add	r6, ip
    e72a:	dd17      	ble.n	e75c <__sflush_r+0x100>
    e72c:	2d00      	cmp	r5, #0
    e72e:	dcf1      	bgt.n	e714 <__sflush_r+0xb8>
    e730:	2000      	movs	r0, #0
    e732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e736:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e738:	2b00      	cmp	r3, #0
    e73a:	dc9d      	bgt.n	e678 <__sflush_r+0x1c>
    e73c:	e7f8      	b.n	e730 <__sflush_r+0xd4>
    e73e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e740:	e7ae      	b.n	e6a0 <__sflush_r+0x44>
    e742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e746:	6922      	ldr	r2, [r4, #16]
    e748:	6022      	str	r2, [r4, #0]
    e74a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e74e:	81a3      	strh	r3, [r4, #12]
    e750:	2200      	movs	r2, #0
    e752:	04db      	lsls	r3, r3, #19
    e754:	6062      	str	r2, [r4, #4]
    e756:	d5c2      	bpl.n	e6de <__sflush_r+0x82>
    e758:	6520      	str	r0, [r4, #80]	; 0x50
    e75a:	e7c0      	b.n	e6de <__sflush_r+0x82>
    e75c:	89a3      	ldrh	r3, [r4, #12]
    e75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e762:	f04f 30ff 	mov.w	r0, #4294967295
    e766:	81a3      	strh	r3, [r4, #12]
    e768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e76c:	f8d8 3000 	ldr.w	r3, [r8]
    e770:	2b00      	cmp	r3, #0
    e772:	d093      	beq.n	e69c <__sflush_r+0x40>
    e774:	2b1d      	cmp	r3, #29
    e776:	d006      	beq.n	e786 <__sflush_r+0x12a>
    e778:	2b16      	cmp	r3, #22
    e77a:	d004      	beq.n	e786 <__sflush_r+0x12a>
    e77c:	89a3      	ldrh	r3, [r4, #12]
    e77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e782:	81a3      	strh	r3, [r4, #12]
    e784:	e7d5      	b.n	e732 <__sflush_r+0xd6>
    e786:	f8c8 6000 	str.w	r6, [r8]
    e78a:	e7d1      	b.n	e730 <__sflush_r+0xd4>

0000e78c <_fflush_r>:
    e78c:	b538      	push	{r3, r4, r5, lr}
    e78e:	460c      	mov	r4, r1
    e790:	4605      	mov	r5, r0
    e792:	b108      	cbz	r0, e798 <_fflush_r+0xc>
    e794:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e796:	b303      	cbz	r3, e7da <_fflush_r+0x4e>
    e798:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    e79c:	b188      	cbz	r0, e7c2 <_fflush_r+0x36>
    e79e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7a0:	07db      	lsls	r3, r3, #31
    e7a2:	d401      	bmi.n	e7a8 <_fflush_r+0x1c>
    e7a4:	0581      	lsls	r1, r0, #22
    e7a6:	d50f      	bpl.n	e7c8 <_fflush_r+0x3c>
    e7a8:	4628      	mov	r0, r5
    e7aa:	4621      	mov	r1, r4
    e7ac:	f7ff ff56 	bl	e65c <__sflush_r>
    e7b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7b2:	07da      	lsls	r2, r3, #31
    e7b4:	4605      	mov	r5, r0
    e7b6:	d402      	bmi.n	e7be <_fflush_r+0x32>
    e7b8:	89a3      	ldrh	r3, [r4, #12]
    e7ba:	059b      	lsls	r3, r3, #22
    e7bc:	d508      	bpl.n	e7d0 <_fflush_r+0x44>
    e7be:	4628      	mov	r0, r5
    e7c0:	bd38      	pop	{r3, r4, r5, pc}
    e7c2:	4605      	mov	r5, r0
    e7c4:	4628      	mov	r0, r5
    e7c6:	bd38      	pop	{r3, r4, r5, pc}
    e7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e7ca:	f7fd f977 	bl	babc <__retarget_lock_acquire_recursive>
    e7ce:	e7eb      	b.n	e7a8 <_fflush_r+0x1c>
    e7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e7d2:	f7fd f975 	bl	bac0 <__retarget_lock_release_recursive>
    e7d6:	4628      	mov	r0, r5
    e7d8:	bd38      	pop	{r3, r4, r5, pc}
    e7da:	f7fc febb 	bl	b554 <__sinit>
    e7de:	e7db      	b.n	e798 <_fflush_r+0xc>

0000e7e0 <_localeconv_r>:
    e7e0:	4800      	ldr	r0, [pc, #0]	; (e7e4 <_localeconv_r+0x4>)
    e7e2:	4770      	bx	lr
    e7e4:	2000448c 	.word	0x2000448c
	...

0000e7f0 <memchr>:
    e7f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e7f4:	2a10      	cmp	r2, #16
    e7f6:	db2b      	blt.n	e850 <memchr+0x60>
    e7f8:	f010 0f07 	tst.w	r0, #7
    e7fc:	d008      	beq.n	e810 <memchr+0x20>
    e7fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    e802:	3a01      	subs	r2, #1
    e804:	428b      	cmp	r3, r1
    e806:	d02d      	beq.n	e864 <memchr+0x74>
    e808:	f010 0f07 	tst.w	r0, #7
    e80c:	b342      	cbz	r2, e860 <memchr+0x70>
    e80e:	d1f6      	bne.n	e7fe <memchr+0xe>
    e810:	b4f0      	push	{r4, r5, r6, r7}
    e812:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e816:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e81a:	f022 0407 	bic.w	r4, r2, #7
    e81e:	f07f 0700 	mvns.w	r7, #0
    e822:	2300      	movs	r3, #0
    e824:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    e828:	3c08      	subs	r4, #8
    e82a:	ea85 0501 	eor.w	r5, r5, r1
    e82e:	ea86 0601 	eor.w	r6, r6, r1
    e832:	fa85 f547 	uadd8	r5, r5, r7
    e836:	faa3 f587 	sel	r5, r3, r7
    e83a:	fa86 f647 	uadd8	r6, r6, r7
    e83e:	faa5 f687 	sel	r6, r5, r7
    e842:	b98e      	cbnz	r6, e868 <memchr+0x78>
    e844:	d1ee      	bne.n	e824 <memchr+0x34>
    e846:	bcf0      	pop	{r4, r5, r6, r7}
    e848:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    e84c:	f002 0207 	and.w	r2, r2, #7
    e850:	b132      	cbz	r2, e860 <memchr+0x70>
    e852:	f810 3b01 	ldrb.w	r3, [r0], #1
    e856:	3a01      	subs	r2, #1
    e858:	ea83 0301 	eor.w	r3, r3, r1
    e85c:	b113      	cbz	r3, e864 <memchr+0x74>
    e85e:	d1f8      	bne.n	e852 <memchr+0x62>
    e860:	2000      	movs	r0, #0
    e862:	4770      	bx	lr
    e864:	3801      	subs	r0, #1
    e866:	4770      	bx	lr
    e868:	2d00      	cmp	r5, #0
    e86a:	bf06      	itte	eq
    e86c:	4635      	moveq	r5, r6
    e86e:	3803      	subeq	r0, #3
    e870:	3807      	subne	r0, #7
    e872:	f015 0f01 	tst.w	r5, #1
    e876:	d107      	bne.n	e888 <memchr+0x98>
    e878:	3001      	adds	r0, #1
    e87a:	f415 7f80 	tst.w	r5, #256	; 0x100
    e87e:	bf02      	ittt	eq
    e880:	3001      	addeq	r0, #1
    e882:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    e886:	3001      	addeq	r0, #1
    e888:	bcf0      	pop	{r4, r5, r6, r7}
    e88a:	3801      	subs	r0, #1
    e88c:	4770      	bx	lr
    e88e:	bf00      	nop

0000e890 <frexp>:
    e890:	b430      	push	{r4, r5}
    e892:	b082      	sub	sp, #8
    e894:	ed8d 0b00 	vstr	d0, [sp]
    e898:	9a01      	ldr	r2, [sp, #4]
    e89a:	4c19      	ldr	r4, [pc, #100]	; (e900 <frexp+0x70>)
    e89c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e8a0:	2100      	movs	r1, #0
    e8a2:	42a3      	cmp	r3, r4
    e8a4:	6001      	str	r1, [r0, #0]
    e8a6:	dc21      	bgt.n	e8ec <frexp+0x5c>
    e8a8:	9c00      	ldr	r4, [sp, #0]
    e8aa:	431c      	orrs	r4, r3
    e8ac:	d01e      	beq.n	e8ec <frexp+0x5c>
    e8ae:	4c15      	ldr	r4, [pc, #84]	; (e904 <frexp+0x74>)
    e8b0:	4014      	ands	r4, r2
    e8b2:	b954      	cbnz	r4, e8ca <frexp+0x3a>
    e8b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; e8f8 <frexp+0x68>
    e8b8:	ee20 7b07 	vmul.f64	d7, d0, d7
    e8bc:	ed8d 7b00 	vstr	d7, [sp]
    e8c0:	9a01      	ldr	r2, [sp, #4]
    e8c2:	f06f 0135 	mvn.w	r1, #53	; 0x35
    e8c6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    e8ca:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    e8ce:	e9dd 4500 	ldrd	r4, r5, [sp]
    e8d2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    e8d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    e8da:	151b      	asrs	r3, r3, #20
    e8dc:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    e8e0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    e8e4:	e9cd 4500 	strd	r4, r5, [sp]
    e8e8:	440b      	add	r3, r1
    e8ea:	6003      	str	r3, [r0, #0]
    e8ec:	ed9d 0b00 	vldr	d0, [sp]
    e8f0:	b002      	add	sp, #8
    e8f2:	bc30      	pop	{r4, r5}
    e8f4:	4770      	bx	lr
    e8f6:	bf00      	nop
    e8f8:	00000000 	.word	0x00000000
    e8fc:	43500000 	.word	0x43500000
    e900:	7fefffff 	.word	0x7fefffff
    e904:	7ff00000 	.word	0x7ff00000

0000e908 <__assert_func>:
    e908:	b500      	push	{lr}
    e90a:	4c0b      	ldr	r4, [pc, #44]	; (e938 <__assert_func+0x30>)
    e90c:	6825      	ldr	r5, [r4, #0]
    e90e:	4614      	mov	r4, r2
    e910:	68ee      	ldr	r6, [r5, #12]
    e912:	461a      	mov	r2, r3
    e914:	b085      	sub	sp, #20
    e916:	4603      	mov	r3, r0
    e918:	460d      	mov	r5, r1
    e91a:	b14c      	cbz	r4, e930 <__assert_func+0x28>
    e91c:	4907      	ldr	r1, [pc, #28]	; (e93c <__assert_func+0x34>)
    e91e:	9500      	str	r5, [sp, #0]
    e920:	e9cd 1401 	strd	r1, r4, [sp, #4]
    e924:	4630      	mov	r0, r6
    e926:	4906      	ldr	r1, [pc, #24]	; (e940 <__assert_func+0x38>)
    e928:	f000 ff86 	bl	f838 <fiprintf>
    e92c:	f7fa fb52 	bl	8fd4 <abort>
    e930:	4904      	ldr	r1, [pc, #16]	; (e944 <__assert_func+0x3c>)
    e932:	460c      	mov	r4, r1
    e934:	e7f3      	b.n	e91e <__assert_func+0x16>
    e936:	bf00      	nop
    e938:	20004924 	.word	0x20004924
    e93c:	20000a88 	.word	0x20000a88
    e940:	20000a98 	.word	0x20000a98
    e944:	20000488 	.word	0x20000488

0000e948 <_calloc_r>:
    e948:	b538      	push	{r3, r4, r5, lr}
    e94a:	fba1 1402 	umull	r1, r4, r1, r2
    e94e:	bb8c      	cbnz	r4, e9b4 <_calloc_r+0x6c>
    e950:	f7fb ff38 	bl	a7c4 <_malloc_r>
    e954:	4605      	mov	r5, r0
    e956:	b1e0      	cbz	r0, e992 <_calloc_r+0x4a>
    e958:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e95c:	f022 0203 	bic.w	r2, r2, #3
    e960:	3a04      	subs	r2, #4
    e962:	2a24      	cmp	r2, #36	; 0x24
    e964:	d817      	bhi.n	e996 <_calloc_r+0x4e>
    e966:	2a13      	cmp	r2, #19
    e968:	d91a      	bls.n	e9a0 <_calloc_r+0x58>
    e96a:	2a1b      	cmp	r2, #27
    e96c:	e9c0 4400 	strd	r4, r4, [r0]
    e970:	d91d      	bls.n	e9ae <_calloc_r+0x66>
    e972:	2a24      	cmp	r2, #36	; 0x24
    e974:	bf14      	ite	ne
    e976:	f100 0210 	addne.w	r2, r0, #16
    e97a:	f100 0218 	addeq.w	r2, r0, #24
    e97e:	f04f 0300 	mov.w	r3, #0
    e982:	e9c0 4402 	strd	r4, r4, [r0, #8]
    e986:	bf04      	itt	eq
    e988:	6104      	streq	r4, [r0, #16]
    e98a:	6144      	streq	r4, [r0, #20]
    e98c:	e9c2 3300 	strd	r3, r3, [r2]
    e990:	6093      	str	r3, [r2, #8]
    e992:	4628      	mov	r0, r5
    e994:	bd38      	pop	{r3, r4, r5, pc}
    e996:	4621      	mov	r1, r4
    e998:	f7fc ff0c 	bl	b7b4 <memset>
    e99c:	4628      	mov	r0, r5
    e99e:	bd38      	pop	{r3, r4, r5, pc}
    e9a0:	4602      	mov	r2, r0
    e9a2:	2300      	movs	r3, #0
    e9a4:	e9c2 3300 	strd	r3, r3, [r2]
    e9a8:	6093      	str	r3, [r2, #8]
    e9aa:	4628      	mov	r0, r5
    e9ac:	bd38      	pop	{r3, r4, r5, pc}
    e9ae:	f100 0208 	add.w	r2, r0, #8
    e9b2:	e7f6      	b.n	e9a2 <_calloc_r+0x5a>
    e9b4:	f7fd f854 	bl	ba60 <__errno>
    e9b8:	230c      	movs	r3, #12
    e9ba:	2500      	movs	r5, #0
    e9bc:	6003      	str	r3, [r0, #0]
    e9be:	e7e8      	b.n	e992 <_calloc_r+0x4a>

0000e9c0 <quorem>:
    e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9c4:	6903      	ldr	r3, [r0, #16]
    e9c6:	690c      	ldr	r4, [r1, #16]
    e9c8:	42a3      	cmp	r3, r4
    e9ca:	b083      	sub	sp, #12
    e9cc:	f2c0 8087 	blt.w	eade <quorem+0x11e>
    e9d0:	3c01      	subs	r4, #1
    e9d2:	f101 0514 	add.w	r5, r1, #20
    e9d6:	00a3      	lsls	r3, r4, #2
    e9d8:	f100 0814 	add.w	r8, r0, #20
    e9dc:	9300      	str	r3, [sp, #0]
    e9de:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    e9e2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    e9e6:	3301      	adds	r3, #1
    e9e8:	4681      	mov	r9, r0
    e9ea:	429a      	cmp	r2, r3
    e9ec:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    e9f0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    e9f4:	9001      	str	r0, [sp, #4]
    e9f6:	fbb2 f6f3 	udiv	r6, r2, r3
    e9fa:	d33b      	bcc.n	ea74 <quorem+0xb4>
    e9fc:	f04f 0c00 	mov.w	ip, #0
    ea00:	46ae      	mov	lr, r5
    ea02:	4640      	mov	r0, r8
    ea04:	46e2      	mov	sl, ip
    ea06:	4663      	mov	r3, ip
    ea08:	f85e bb04 	ldr.w	fp, [lr], #4
    ea0c:	6802      	ldr	r2, [r0, #0]
    ea0e:	fa1f fc8b 	uxth.w	ip, fp
    ea12:	fb06 330c 	mla	r3, r6, ip, r3
    ea16:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ea1a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    ea1e:	fb06 cc0b 	mla	ip, r6, fp, ip
    ea22:	b29b      	uxth	r3, r3
    ea24:	ebaa 0303 	sub.w	r3, sl, r3
    ea28:	fa1f fa8c 	uxth.w	sl, ip
    ea2c:	fa13 f382 	uxtah	r3, r3, r2
    ea30:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    ea34:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ea38:	b29b      	uxth	r3, r3
    ea3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ea3e:	4577      	cmp	r7, lr
    ea40:	f840 3b04 	str.w	r3, [r0], #4
    ea44:	ea4f 4a22 	mov.w	sl, r2, asr #16
    ea48:	ea4f 431c 	mov.w	r3, ip, lsr #16
    ea4c:	d2dc      	bcs.n	ea08 <quorem+0x48>
    ea4e:	9b00      	ldr	r3, [sp, #0]
    ea50:	f858 3003 	ldr.w	r3, [r8, r3]
    ea54:	b973      	cbnz	r3, ea74 <quorem+0xb4>
    ea56:	9b01      	ldr	r3, [sp, #4]
    ea58:	3b04      	subs	r3, #4
    ea5a:	4598      	cmp	r8, r3
    ea5c:	d304      	bcc.n	ea68 <quorem+0xa8>
    ea5e:	e007      	b.n	ea70 <quorem+0xb0>
    ea60:	4598      	cmp	r8, r3
    ea62:	f104 34ff 	add.w	r4, r4, #4294967295
    ea66:	d203      	bcs.n	ea70 <quorem+0xb0>
    ea68:	f853 2904 	ldr.w	r2, [r3], #-4
    ea6c:	2a00      	cmp	r2, #0
    ea6e:	d0f7      	beq.n	ea60 <quorem+0xa0>
    ea70:	f8c9 4010 	str.w	r4, [r9, #16]
    ea74:	4648      	mov	r0, r9
    ea76:	f7fd fea7 	bl	c7c8 <__mcmp>
    ea7a:	2800      	cmp	r0, #0
    ea7c:	db2b      	blt.n	ead6 <quorem+0x116>
    ea7e:	3601      	adds	r6, #1
    ea80:	4641      	mov	r1, r8
    ea82:	2300      	movs	r3, #0
    ea84:	f855 0b04 	ldr.w	r0, [r5], #4
    ea88:	f8d1 c000 	ldr.w	ip, [r1]
    ea8c:	b282      	uxth	r2, r0
    ea8e:	1a9a      	subs	r2, r3, r2
    ea90:	0c03      	lsrs	r3, r0, #16
    ea92:	fa12 f28c 	uxtah	r2, r2, ip
    ea96:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    ea9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ea9e:	b292      	uxth	r2, r2
    eaa0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    eaa4:	42af      	cmp	r7, r5
    eaa6:	f841 2b04 	str.w	r2, [r1], #4
    eaaa:	ea4f 4323 	mov.w	r3, r3, asr #16
    eaae:	d2e9      	bcs.n	ea84 <quorem+0xc4>
    eab0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    eab4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    eab8:	b96a      	cbnz	r2, ead6 <quorem+0x116>
    eaba:	3b04      	subs	r3, #4
    eabc:	4598      	cmp	r8, r3
    eabe:	d304      	bcc.n	eaca <quorem+0x10a>
    eac0:	e007      	b.n	ead2 <quorem+0x112>
    eac2:	4598      	cmp	r8, r3
    eac4:	f104 34ff 	add.w	r4, r4, #4294967295
    eac8:	d203      	bcs.n	ead2 <quorem+0x112>
    eaca:	f853 2904 	ldr.w	r2, [r3], #-4
    eace:	2a00      	cmp	r2, #0
    ead0:	d0f7      	beq.n	eac2 <quorem+0x102>
    ead2:	f8c9 4010 	str.w	r4, [r9, #16]
    ead6:	4630      	mov	r0, r6
    ead8:	b003      	add	sp, #12
    eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eade:	2000      	movs	r0, #0
    eae0:	b003      	add	sp, #12
    eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eae6:	bf00      	nop

0000eae8 <_dtoa_r>:
    eae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eaec:	ed2d 8b02 	vpush	{d8}
    eaf0:	b08f      	sub	sp, #60	; 0x3c
    eaf2:	ed8d 0b02 	vstr	d0, [sp, #8]
    eaf6:	9101      	str	r1, [sp, #4]
    eaf8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    eafa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    eafc:	9305      	str	r3, [sp, #20]
    eafe:	ec57 6b10 	vmov	r6, r7, d0
    eb02:	4604      	mov	r4, r0
    eb04:	4693      	mov	fp, r2
    eb06:	b141      	cbz	r1, eb1a <_dtoa_r+0x32>
    eb08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    eb0a:	604a      	str	r2, [r1, #4]
    eb0c:	2301      	movs	r3, #1
    eb0e:	4093      	lsls	r3, r2
    eb10:	608b      	str	r3, [r1, #8]
    eb12:	f7fd fbf9 	bl	c308 <_Bfree>
    eb16:	2300      	movs	r3, #0
    eb18:	63a3      	str	r3, [r4, #56]	; 0x38
    eb1a:	f1b7 0800 	subs.w	r8, r7, #0
    eb1e:	bfb4      	ite	lt
    eb20:	2301      	movlt	r3, #1
    eb22:	2300      	movge	r3, #0
    eb24:	602b      	str	r3, [r5, #0]
    eb26:	4bbe      	ldr	r3, [pc, #760]	; (ee20 <_dtoa_r+0x338>)
    eb28:	bfbc      	itt	lt
    eb2a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    eb2e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    eb32:	ea33 0308 	bics.w	r3, r3, r8
    eb36:	f000 809f 	beq.w	ec78 <_dtoa_r+0x190>
    eb3a:	ed9d 8b02 	vldr	d8, [sp, #8]
    eb3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    eb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb46:	d111      	bne.n	eb6c <_dtoa_r+0x84>
    eb48:	9a05      	ldr	r2, [sp, #20]
    eb4a:	2301      	movs	r3, #1
    eb4c:	6013      	str	r3, [r2, #0]
    eb4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    eb50:	2b00      	cmp	r3, #0
    eb52:	f000 823f 	beq.w	efd4 <_dtoa_r+0x4ec>
    eb56:	4bb3      	ldr	r3, [pc, #716]	; (ee24 <_dtoa_r+0x33c>)
    eb58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    eb5a:	6013      	str	r3, [r2, #0]
    eb5c:	3b01      	subs	r3, #1
    eb5e:	9300      	str	r3, [sp, #0]
    eb60:	9800      	ldr	r0, [sp, #0]
    eb62:	b00f      	add	sp, #60	; 0x3c
    eb64:	ecbd 8b02 	vpop	{d8}
    eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb6c:	aa0c      	add	r2, sp, #48	; 0x30
    eb6e:	a90d      	add	r1, sp, #52	; 0x34
    eb70:	4620      	mov	r0, r4
    eb72:	eeb0 0b48 	vmov.f64	d0, d8
    eb76:	f7fd fef3 	bl	c960 <__d2b>
    eb7a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    eb7e:	4605      	mov	r5, r0
    eb80:	f040 8092 	bne.w	eca8 <_dtoa_r+0x1c0>
    eb84:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    eb88:	440b      	add	r3, r1
    eb8a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    eb8e:	2a20      	cmp	r2, #32
    eb90:	f340 82fa 	ble.w	f188 <_dtoa_r+0x6a0>
    eb94:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    eb98:	fa08 f802 	lsl.w	r8, r8, r2
    eb9c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    eba0:	40d6      	lsrs	r6, r2
    eba2:	ea48 0206 	orr.w	r2, r8, r6
    eba6:	ee07 2a10 	vmov	s14, r2
    ebaa:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    ebae:	1e58      	subs	r0, r3, #1
    ebb0:	ee17 6a90 	vmov	r6, s15
    ebb4:	ec53 2b17 	vmov	r2, r3, d7
    ebb8:	f04f 0a01 	mov.w	sl, #1
    ebbc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    ebc0:	ed9f 3b91 	vldr	d3, [pc, #580]	; ee08 <_dtoa_r+0x320>
    ebc4:	ed9f 7b92 	vldr	d7, [pc, #584]	; ee10 <_dtoa_r+0x328>
    ebc8:	ed9f 5b93 	vldr	d5, [pc, #588]	; ee18 <_dtoa_r+0x330>
    ebcc:	ee06 0a90 	vmov	s13, r0
    ebd0:	ec43 2b12 	vmov	d2, r2, r3
    ebd4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    ebd8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    ebdc:	ee32 6b46 	vsub.f64	d6, d2, d6
    ebe0:	eea6 7b03 	vfma.f64	d7, d6, d3
    ebe4:	eea4 7b05 	vfma.f64	d7, d4, d5
    ebe8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ebec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebf4:	ee16 7a90 	vmov	r7, s13
    ebf8:	d508      	bpl.n	ec0c <_dtoa_r+0x124>
    ebfa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    ebfe:	eeb4 6b47 	vcmp.f64	d6, d7
    ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec06:	bf18      	it	ne
    ec08:	f107 37ff 	addne.w	r7, r7, #4294967295
    ec0c:	2f16      	cmp	r7, #22
    ec0e:	f200 8145 	bhi.w	ee9c <_dtoa_r+0x3b4>
    ec12:	4b85      	ldr	r3, [pc, #532]	; (ee28 <_dtoa_r+0x340>)
    ec14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    ec18:	ed93 7b00 	vldr	d7, [r3]
    ec1c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ec20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ec24:	d557      	bpl.n	ecd6 <_dtoa_r+0x1ee>
    ec26:	1a09      	subs	r1, r1, r0
    ec28:	2300      	movs	r3, #0
    ec2a:	f1b1 0801 	subs.w	r8, r1, #1
    ec2e:	f107 37ff 	add.w	r7, r7, #4294967295
    ec32:	930a      	str	r3, [sp, #40]	; 0x28
    ec34:	f100 8139 	bmi.w	eeaa <_dtoa_r+0x3c2>
    ec38:	2300      	movs	r3, #0
    ec3a:	9306      	str	r3, [sp, #24]
    ec3c:	2f00      	cmp	r7, #0
    ec3e:	da52      	bge.n	ece6 <_dtoa_r+0x1fe>
    ec40:	9b06      	ldr	r3, [sp, #24]
    ec42:	9704      	str	r7, [sp, #16]
    ec44:	1bdb      	subs	r3, r3, r7
    ec46:	9306      	str	r3, [sp, #24]
    ec48:	427b      	negs	r3, r7
    ec4a:	9308      	str	r3, [sp, #32]
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	2b09      	cmp	r3, #9
    ec50:	f04f 0700 	mov.w	r7, #0
    ec54:	d84e      	bhi.n	ecf4 <_dtoa_r+0x20c>
    ec56:	2b05      	cmp	r3, #5
    ec58:	f340 829d 	ble.w	f196 <_dtoa_r+0x6ae>
    ec5c:	3b04      	subs	r3, #4
    ec5e:	9301      	str	r3, [sp, #4]
    ec60:	2600      	movs	r6, #0
    ec62:	9b01      	ldr	r3, [sp, #4]
    ec64:	1e9a      	subs	r2, r3, #2
    ec66:	2a03      	cmp	r2, #3
    ec68:	f200 8125 	bhi.w	eeb6 <_dtoa_r+0x3ce>
    ec6c:	e8df f012 	tbh	[pc, r2, lsl #1]
    ec70:	03a703aa 	.word	0x03a703aa
    ec74:	037e039d 	.word	0x037e039d
    ec78:	9a05      	ldr	r2, [sp, #20]
    ec7a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    ec7e:	f242 730f 	movw	r3, #9999	; 0x270f
    ec82:	ea58 0806 	orrs.w	r8, r8, r6
    ec86:	6013      	str	r3, [r2, #0]
    ec88:	d11e      	bne.n	ecc8 <_dtoa_r+0x1e0>
    ec8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	f000 8591 	beq.w	f7b4 <_dtoa_r+0xccc>
    ec92:	4b66      	ldr	r3, [pc, #408]	; (ee2c <_dtoa_r+0x344>)
    ec94:	9300      	str	r3, [sp, #0]
    ec96:	3308      	adds	r3, #8
    ec98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ec9a:	9800      	ldr	r0, [sp, #0]
    ec9c:	6013      	str	r3, [r2, #0]
    ec9e:	b00f      	add	sp, #60	; 0x3c
    eca0:	ecbd 8b02 	vpop	{d8}
    eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eca8:	ee18 6a90 	vmov	r6, s17
    ecac:	f3c6 0613 	ubfx	r6, r6, #0, #20
    ecb0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    ecb4:	ec53 2b18 	vmov	r2, r3, d8
    ecb8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    ecbc:	990c      	ldr	r1, [sp, #48]	; 0x30
    ecbe:	f04f 0a00 	mov.w	sl, #0
    ecc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    ecc6:	e77b      	b.n	ebc0 <_dtoa_r+0xd8>
    ecc8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ecca:	2b00      	cmp	r3, #0
    eccc:	f040 833b 	bne.w	f346 <_dtoa_r+0x85e>
    ecd0:	4b57      	ldr	r3, [pc, #348]	; (ee30 <_dtoa_r+0x348>)
    ecd2:	9300      	str	r3, [sp, #0]
    ecd4:	e744      	b.n	eb60 <_dtoa_r+0x78>
    ecd6:	1a09      	subs	r1, r1, r0
    ecd8:	2300      	movs	r3, #0
    ecda:	f1b1 0801 	subs.w	r8, r1, #1
    ecde:	930a      	str	r3, [sp, #40]	; 0x28
    ece0:	f100 80e3 	bmi.w	eeaa <_dtoa_r+0x3c2>
    ece4:	9306      	str	r3, [sp, #24]
    ece6:	2300      	movs	r3, #0
    ece8:	9308      	str	r3, [sp, #32]
    ecea:	9b01      	ldr	r3, [sp, #4]
    ecec:	9704      	str	r7, [sp, #16]
    ecee:	2b09      	cmp	r3, #9
    ecf0:	44b8      	add	r8, r7
    ecf2:	d9b0      	bls.n	ec56 <_dtoa_r+0x16e>
    ecf4:	2300      	movs	r3, #0
    ecf6:	2601      	movs	r6, #1
    ecf8:	9301      	str	r3, [sp, #4]
    ecfa:	9607      	str	r6, [sp, #28]
    ecfc:	f04f 39ff 	mov.w	r9, #4294967295
    ed00:	469b      	mov	fp, r3
    ed02:	2100      	movs	r1, #0
    ed04:	63e1      	str	r1, [r4, #60]	; 0x3c
    ed06:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    ed0a:	4620      	mov	r0, r4
    ed0c:	f7fd fad6 	bl	c2bc <_Balloc>
    ed10:	9000      	str	r0, [sp, #0]
    ed12:	2800      	cmp	r0, #0
    ed14:	f000 8540 	beq.w	f798 <_dtoa_r+0xcb0>
    ed18:	9b00      	ldr	r3, [sp, #0]
    ed1a:	63a3      	str	r3, [r4, #56]	; 0x38
    ed1c:	f1b9 0f0e 	cmp.w	r9, #14
    ed20:	f200 80dc 	bhi.w	eedc <_dtoa_r+0x3f4>
    ed24:	2e00      	cmp	r6, #0
    ed26:	f000 80d9 	beq.w	eedc <_dtoa_r+0x3f4>
    ed2a:	9b04      	ldr	r3, [sp, #16]
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	f340 83de 	ble.w	f4ee <_dtoa_r+0xa06>
    ed32:	4a3d      	ldr	r2, [pc, #244]	; (ee28 <_dtoa_r+0x340>)
    ed34:	f003 010f 	and.w	r1, r3, #15
    ed38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ed3c:	ed92 7b00 	vldr	d7, [r2]
    ed40:	111a      	asrs	r2, r3, #4
    ed42:	05db      	lsls	r3, r3, #23
    ed44:	f140 8382 	bpl.w	f44c <_dtoa_r+0x964>
    ed48:	493a      	ldr	r1, [pc, #232]	; (ee34 <_dtoa_r+0x34c>)
    ed4a:	ed91 6b08 	vldr	d6, [r1, #32]
    ed4e:	f002 020f 	and.w	r2, r2, #15
    ed52:	2003      	movs	r0, #3
    ed54:	ee88 5b06 	vdiv.f64	d5, d8, d6
    ed58:	b15a      	cbz	r2, ed72 <_dtoa_r+0x28a>
    ed5a:	4936      	ldr	r1, [pc, #216]	; (ee34 <_dtoa_r+0x34c>)
    ed5c:	07d6      	lsls	r6, r2, #31
    ed5e:	d504      	bpl.n	ed6a <_dtoa_r+0x282>
    ed60:	ed91 6b00 	vldr	d6, [r1]
    ed64:	3001      	adds	r0, #1
    ed66:	ee27 7b06 	vmul.f64	d7, d7, d6
    ed6a:	1052      	asrs	r2, r2, #1
    ed6c:	f101 0108 	add.w	r1, r1, #8
    ed70:	d1f4      	bne.n	ed5c <_dtoa_r+0x274>
    ed72:	ee85 6b07 	vdiv.f64	d6, d5, d7
    ed76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ed78:	b13b      	cbz	r3, ed8a <_dtoa_r+0x2a2>
    ed7a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    ed7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ed86:	f100 84ae 	bmi.w	f6e6 <_dtoa_r+0xbfe>
    ed8a:	ee07 0a90 	vmov	s15, r0
    ed8e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    ed92:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    ed96:	eea5 7b06 	vfma.f64	d7, d5, d6
    ed9a:	ee17 2a90 	vmov	r2, s15
    ed9e:	ec51 0b17 	vmov	r0, r1, d7
    eda2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    eda6:	f1b9 0f00 	cmp.w	r9, #0
    edaa:	f000 8388 	beq.w	f4be <_dtoa_r+0x9d6>
    edae:	9e04      	ldr	r6, [sp, #16]
    edb0:	464a      	mov	r2, r9
    edb2:	9b07      	ldr	r3, [sp, #28]
    edb4:	2b00      	cmp	r3, #0
    edb6:	f000 8447 	beq.w	f648 <_dtoa_r+0xb60>
    edba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    edbe:	4b1a      	ldr	r3, [pc, #104]	; (ee28 <_dtoa_r+0x340>)
    edc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    edc4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    edc8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    edcc:	ee36 7b47 	vsub.f64	d7, d6, d7
    edd0:	ed1c 6b02 	vldr	d6, [ip, #-8]
    edd4:	ee83 5b06 	vdiv.f64	d5, d3, d6
    edd8:	ec41 0b16 	vmov	d6, r0, r1
    eddc:	ee14 0a90 	vmov	r0, s9
    ede0:	ee35 5b46 	vsub.f64	d5, d5, d6
    ede4:	9900      	ldr	r1, [sp, #0]
    ede6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    edea:	3030      	adds	r0, #48	; 0x30
    edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edf0:	f801 0b01 	strb.w	r0, [r1], #1
    edf4:	f300 84ac 	bgt.w	f750 <_dtoa_r+0xc68>
    edf8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    edfc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ee00:	f04f 0c00 	mov.w	ip, #0
    ee04:	e031      	b.n	ee6a <_dtoa_r+0x382>
    ee06:	bf00      	nop
    ee08:	636f4361 	.word	0x636f4361
    ee0c:	3fd287a7 	.word	0x3fd287a7
    ee10:	8b60c8b3 	.word	0x8b60c8b3
    ee14:	3fc68a28 	.word	0x3fc68a28
    ee18:	509f79fb 	.word	0x509f79fb
    ee1c:	3fd34413 	.word	0x3fd34413
    ee20:	7ff00000 	.word	0x7ff00000
    ee24:	20000ce9 	.word	0x20000ce9
    ee28:	200002a8 	.word	0x200002a8
    ee2c:	20000c3c 	.word	0x20000c3c
    ee30:	20000c48 	.word	0x20000c48
    ee34:	20000280 	.word	0x20000280
    ee38:	f10c 0c01 	add.w	ip, ip, #1
    ee3c:	4594      	cmp	ip, r2
    ee3e:	da4d      	bge.n	eedc <_dtoa_r+0x3f4>
    ee40:	ee27 7b04 	vmul.f64	d7, d7, d4
    ee44:	ee25 5b04 	vmul.f64	d5, d5, d4
    ee48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ee4c:	ee16 3a90 	vmov	r3, s13
    ee50:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    ee54:	3330      	adds	r3, #48	; 0x30
    ee56:	ee37 7b43 	vsub.f64	d7, d7, d3
    ee5a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ee5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee62:	f801 3b01 	strb.w	r3, [r1], #1
    ee66:	f100 8473 	bmi.w	f750 <_dtoa_r+0xc68>
    ee6a:	ee32 6b47 	vsub.f64	d6, d2, d7
    ee6e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    ee72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ee76:	d5df      	bpl.n	ee38 <_dtoa_r+0x350>
    ee78:	9a00      	ldr	r2, [sp, #0]
    ee7a:	9604      	str	r6, [sp, #16]
    ee7c:	e002      	b.n	ee84 <_dtoa_r+0x39c>
    ee7e:	428a      	cmp	r2, r1
    ee80:	f000 8450 	beq.w	f724 <_dtoa_r+0xc3c>
    ee84:	4689      	mov	r9, r1
    ee86:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    ee8a:	2b39      	cmp	r3, #57	; 0x39
    ee8c:	d0f7      	beq.n	ee7e <_dtoa_r+0x396>
    ee8e:	3301      	adds	r3, #1
    ee90:	b2db      	uxtb	r3, r3
    ee92:	700b      	strb	r3, [r1, #0]
    ee94:	9b04      	ldr	r3, [sp, #16]
    ee96:	3301      	adds	r3, #1
    ee98:	9304      	str	r3, [sp, #16]
    ee9a:	e155      	b.n	f148 <_dtoa_r+0x660>
    ee9c:	1a09      	subs	r1, r1, r0
    ee9e:	2301      	movs	r3, #1
    eea0:	f1b1 0801 	subs.w	r8, r1, #1
    eea4:	930a      	str	r3, [sp, #40]	; 0x28
    eea6:	f57f aec7 	bpl.w	ec38 <_dtoa_r+0x150>
    eeaa:	f1c1 0301 	rsb	r3, r1, #1
    eeae:	9306      	str	r3, [sp, #24]
    eeb0:	f04f 0800 	mov.w	r8, #0
    eeb4:	e6c2      	b.n	ec3c <_dtoa_r+0x154>
    eeb6:	2600      	movs	r6, #0
    eeb8:	63e6      	str	r6, [r4, #60]	; 0x3c
    eeba:	4631      	mov	r1, r6
    eebc:	4620      	mov	r0, r4
    eebe:	f7fd f9fd 	bl	c2bc <_Balloc>
    eec2:	9000      	str	r0, [sp, #0]
    eec4:	2800      	cmp	r0, #0
    eec6:	f000 8467 	beq.w	f798 <_dtoa_r+0xcb0>
    eeca:	9b00      	ldr	r3, [sp, #0]
    eecc:	63a3      	str	r3, [r4, #56]	; 0x38
    eece:	f04f 33ff 	mov.w	r3, #4294967295
    eed2:	930b      	str	r3, [sp, #44]	; 0x2c
    eed4:	4699      	mov	r9, r3
    eed6:	2301      	movs	r3, #1
    eed8:	46b3      	mov	fp, r6
    eeda:	9307      	str	r3, [sp, #28]
    eedc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    eede:	2a00      	cmp	r2, #0
    eee0:	db55      	blt.n	ef8e <_dtoa_r+0x4a6>
    eee2:	9904      	ldr	r1, [sp, #16]
    eee4:	290e      	cmp	r1, #14
    eee6:	dc52      	bgt.n	ef8e <_dtoa_r+0x4a6>
    eee8:	4bb7      	ldr	r3, [pc, #732]	; (f1c8 <_dtoa_r+0x6e0>)
    eeea:	f1bb 0f00 	cmp.w	fp, #0
    eeee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    eef2:	ed93 6b00 	vldr	d6, [r3]
    eef6:	da15      	bge.n	ef24 <_dtoa_r+0x43c>
    eef8:	f1b9 0f00 	cmp.w	r9, #0
    eefc:	dc12      	bgt.n	ef24 <_dtoa_r+0x43c>
    eefe:	f040 82f2 	bne.w	f4e6 <_dtoa_r+0x9fe>
    ef02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ef06:	ee26 7b07 	vmul.f64	d7, d6, d7
    ef0a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef12:	46ca      	mov	sl, r9
    ef14:	464e      	mov	r6, r9
    ef16:	f200 826d 	bhi.w	f3f4 <_dtoa_r+0x90c>
    ef1a:	f8dd 8000 	ldr.w	r8, [sp]
    ef1e:	ea6f 0b0b 	mvn.w	fp, fp
    ef22:	e270      	b.n	f406 <_dtoa_r+0x91e>
    ef24:	ee88 7b06 	vdiv.f64	d7, d8, d6
    ef28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    ef2c:	9900      	ldr	r1, [sp, #0]
    ef2e:	ee17 3a10 	vmov	r3, s14
    ef32:	f1b9 0f01 	cmp.w	r9, #1
    ef36:	f103 0330 	add.w	r3, r3, #48	; 0x30
    ef3a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    ef3e:	f801 3b01 	strb.w	r3, [r1], #1
    ef42:	eea5 8b46 	vfms.f64	d8, d5, d6
    ef46:	f000 8334 	beq.w	f5b2 <_dtoa_r+0xaca>
    ef4a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ef4e:	2301      	movs	r3, #1
    ef50:	e011      	b.n	ef76 <_dtoa_r+0x48e>
    ef52:	ee88 7b06 	vdiv.f64	d7, d8, d6
    ef56:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    ef5a:	3301      	adds	r3, #1
    ef5c:	ee17 2a10 	vmov	r2, s14
    ef60:	454b      	cmp	r3, r9
    ef62:	f102 0230 	add.w	r2, r2, #48	; 0x30
    ef66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    ef6a:	f801 2b01 	strb.w	r2, [r1], #1
    ef6e:	eea5 8b46 	vfms.f64	d8, d5, d6
    ef72:	f000 831e 	beq.w	f5b2 <_dtoa_r+0xaca>
    ef76:	ee28 8b04 	vmul.f64	d8, d8, d4
    ef7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ef7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef82:	d1e6      	bne.n	ef52 <_dtoa_r+0x46a>
    ef84:	9b04      	ldr	r3, [sp, #16]
    ef86:	3301      	adds	r3, #1
    ef88:	9304      	str	r3, [sp, #16]
    ef8a:	4689      	mov	r9, r1
    ef8c:	e0dc      	b.n	f148 <_dtoa_r+0x660>
    ef8e:	9b07      	ldr	r3, [sp, #28]
    ef90:	b343      	cbz	r3, efe4 <_dtoa_r+0x4fc>
    ef92:	9b01      	ldr	r3, [sp, #4]
    ef94:	2b01      	cmp	r3, #1
    ef96:	f340 8276 	ble.w	f486 <_dtoa_r+0x99e>
    ef9a:	9b08      	ldr	r3, [sp, #32]
    ef9c:	f109 3aff 	add.w	sl, r9, #4294967295
    efa0:	4553      	cmp	r3, sl
    efa2:	f280 823f 	bge.w	f424 <_dtoa_r+0x93c>
    efa6:	9b08      	ldr	r3, [sp, #32]
    efa8:	f8cd a020 	str.w	sl, [sp, #32]
    efac:	ebaa 0203 	sub.w	r2, sl, r3
    efb0:	4417      	add	r7, r2
    efb2:	f04f 0a00 	mov.w	sl, #0
    efb6:	f1b9 0f00 	cmp.w	r9, #0
    efba:	f2c0 8325 	blt.w	f608 <_dtoa_r+0xb20>
    efbe:	9b06      	ldr	r3, [sp, #24]
    efc0:	9309      	str	r3, [sp, #36]	; 0x24
    efc2:	444b      	add	r3, r9
    efc4:	44c8      	add	r8, r9
    efc6:	9306      	str	r3, [sp, #24]
    efc8:	2101      	movs	r1, #1
    efca:	4620      	mov	r0, r4
    efcc:	f7fd fa48 	bl	c460 <__i2b>
    efd0:	4606      	mov	r6, r0
    efd2:	e00c      	b.n	efee <_dtoa_r+0x506>
    efd4:	4b7d      	ldr	r3, [pc, #500]	; (f1cc <_dtoa_r+0x6e4>)
    efd6:	9300      	str	r3, [sp, #0]
    efd8:	9800      	ldr	r0, [sp, #0]
    efda:	b00f      	add	sp, #60	; 0x3c
    efdc:	ecbd 8b02 	vpop	{d8}
    efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efe4:	9b06      	ldr	r3, [sp, #24]
    efe6:	f8dd a020 	ldr.w	sl, [sp, #32]
    efea:	9e07      	ldr	r6, [sp, #28]
    efec:	9309      	str	r3, [sp, #36]	; 0x24
    efee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eff0:	b16b      	cbz	r3, f00e <_dtoa_r+0x526>
    eff2:	f1b8 0f00 	cmp.w	r8, #0
    eff6:	dd0a      	ble.n	f00e <_dtoa_r+0x526>
    eff8:	4543      	cmp	r3, r8
    effa:	9906      	ldr	r1, [sp, #24]
    effc:	461a      	mov	r2, r3
    effe:	bfa8      	it	ge
    f000:	4642      	movge	r2, r8
    f002:	1a89      	subs	r1, r1, r2
    f004:	1a9b      	subs	r3, r3, r2
    f006:	9106      	str	r1, [sp, #24]
    f008:	9309      	str	r3, [sp, #36]	; 0x24
    f00a:	eba8 0802 	sub.w	r8, r8, r2
    f00e:	9b08      	ldr	r3, [sp, #32]
    f010:	b163      	cbz	r3, f02c <_dtoa_r+0x544>
    f012:	9b07      	ldr	r3, [sp, #28]
    f014:	2b00      	cmp	r3, #0
    f016:	f000 82a7 	beq.w	f568 <_dtoa_r+0xa80>
    f01a:	f1ba 0f00 	cmp.w	sl, #0
    f01e:	f300 8204 	bgt.w	f42a <_dtoa_r+0x942>
    f022:	9b08      	ldr	r3, [sp, #32]
    f024:	ebb3 020a 	subs.w	r2, r3, sl
    f028:	f040 82ff 	bne.w	f62a <_dtoa_r+0xb42>
    f02c:	2101      	movs	r1, #1
    f02e:	4620      	mov	r0, r4
    f030:	f7fd fa16 	bl	c460 <__i2b>
    f034:	2f00      	cmp	r7, #0
    f036:	4682      	mov	sl, r0
    f038:	f300 80af 	bgt.w	f19a <_dtoa_r+0x6b2>
    f03c:	9b01      	ldr	r3, [sp, #4]
    f03e:	2b01      	cmp	r3, #1
    f040:	f340 8187 	ble.w	f352 <_dtoa_r+0x86a>
    f044:	2300      	movs	r3, #0
    f046:	9308      	str	r3, [sp, #32]
    f048:	2001      	movs	r0, #1
    f04a:	2f00      	cmp	r7, #0
    f04c:	f040 80b1 	bne.w	f1b2 <_dtoa_r+0x6ca>
    f050:	4440      	add	r0, r8
    f052:	f010 001f 	ands.w	r0, r0, #31
    f056:	f000 817a 	beq.w	f34e <_dtoa_r+0x866>
    f05a:	f1c0 0220 	rsb	r2, r0, #32
    f05e:	2a04      	cmp	r2, #4
    f060:	f300 8088 	bgt.w	f174 <_dtoa_r+0x68c>
    f064:	f040 81f6 	bne.w	f454 <_dtoa_r+0x96c>
    f068:	9b06      	ldr	r3, [sp, #24]
    f06a:	2b00      	cmp	r3, #0
    f06c:	dd05      	ble.n	f07a <_dtoa_r+0x592>
    f06e:	4629      	mov	r1, r5
    f070:	461a      	mov	r2, r3
    f072:	4620      	mov	r0, r4
    f074:	f7fd fb30 	bl	c6d8 <__lshift>
    f078:	4605      	mov	r5, r0
    f07a:	f1b8 0f00 	cmp.w	r8, #0
    f07e:	dd05      	ble.n	f08c <_dtoa_r+0x5a4>
    f080:	4651      	mov	r1, sl
    f082:	4642      	mov	r2, r8
    f084:	4620      	mov	r0, r4
    f086:	f7fd fb27 	bl	c6d8 <__lshift>
    f08a:	4682      	mov	sl, r0
    f08c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f08e:	2b00      	cmp	r3, #0
    f090:	f040 813f 	bne.w	f312 <_dtoa_r+0x82a>
    f094:	f1b9 0f00 	cmp.w	r9, #0
    f098:	f340 8125 	ble.w	f2e6 <_dtoa_r+0x7fe>
    f09c:	9b07      	ldr	r3, [sp, #28]
    f09e:	2b00      	cmp	r3, #0
    f0a0:	f040 80a3 	bne.w	f1ea <_dtoa_r+0x702>
    f0a4:	9b04      	ldr	r3, [sp, #16]
    f0a6:	3301      	adds	r3, #1
    f0a8:	9304      	str	r3, [sp, #16]
    f0aa:	f8dd 8000 	ldr.w	r8, [sp]
    f0ae:	2701      	movs	r7, #1
    f0b0:	e007      	b.n	f0c2 <_dtoa_r+0x5da>
    f0b2:	4629      	mov	r1, r5
    f0b4:	2300      	movs	r3, #0
    f0b6:	220a      	movs	r2, #10
    f0b8:	4620      	mov	r0, r4
    f0ba:	f7fd f92f 	bl	c31c <__multadd>
    f0be:	3701      	adds	r7, #1
    f0c0:	4605      	mov	r5, r0
    f0c2:	4651      	mov	r1, sl
    f0c4:	4628      	mov	r0, r5
    f0c6:	f7ff fc7b 	bl	e9c0 <quorem>
    f0ca:	45b9      	cmp	r9, r7
    f0cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f0d0:	f808 0b01 	strb.w	r0, [r8], #1
    f0d4:	dced      	bgt.n	f0b2 <_dtoa_r+0x5ca>
    f0d6:	f1b9 0f00 	cmp.w	r9, #0
    f0da:	9a00      	ldr	r2, [sp, #0]
    f0dc:	bfcc      	ite	gt
    f0de:	46cb      	movgt	fp, r9
    f0e0:	f04f 0b01 	movle.w	fp, #1
    f0e4:	4603      	mov	r3, r0
    f0e6:	4493      	add	fp, r2
    f0e8:	2700      	movs	r7, #0
    f0ea:	4629      	mov	r1, r5
    f0ec:	2201      	movs	r2, #1
    f0ee:	4620      	mov	r0, r4
    f0f0:	9301      	str	r3, [sp, #4]
    f0f2:	f7fd faf1 	bl	c6d8 <__lshift>
    f0f6:	4651      	mov	r1, sl
    f0f8:	4605      	mov	r5, r0
    f0fa:	f7fd fb65 	bl	c7c8 <__mcmp>
    f0fe:	2800      	cmp	r0, #0
    f100:	f340 81af 	ble.w	f462 <_dtoa_r+0x97a>
    f104:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f108:	9a00      	ldr	r2, [sp, #0]
    f10a:	f10b 3bff 	add.w	fp, fp, #4294967295
    f10e:	e004      	b.n	f11a <_dtoa_r+0x632>
    f110:	455a      	cmp	r2, fp
    f112:	f000 81b1 	beq.w	f478 <_dtoa_r+0x990>
    f116:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f11a:	2b39      	cmp	r3, #57	; 0x39
    f11c:	f10b 0901 	add.w	r9, fp, #1
    f120:	d0f6      	beq.n	f110 <_dtoa_r+0x628>
    f122:	3301      	adds	r3, #1
    f124:	f88b 3000 	strb.w	r3, [fp]
    f128:	4651      	mov	r1, sl
    f12a:	4620      	mov	r0, r4
    f12c:	f7fd f8ec 	bl	c308 <_Bfree>
    f130:	b156      	cbz	r6, f148 <_dtoa_r+0x660>
    f132:	b12f      	cbz	r7, f140 <_dtoa_r+0x658>
    f134:	42b7      	cmp	r7, r6
    f136:	d003      	beq.n	f140 <_dtoa_r+0x658>
    f138:	4639      	mov	r1, r7
    f13a:	4620      	mov	r0, r4
    f13c:	f7fd f8e4 	bl	c308 <_Bfree>
    f140:	4631      	mov	r1, r6
    f142:	4620      	mov	r0, r4
    f144:	f7fd f8e0 	bl	c308 <_Bfree>
    f148:	4629      	mov	r1, r5
    f14a:	4620      	mov	r0, r4
    f14c:	f7fd f8dc 	bl	c308 <_Bfree>
    f150:	2300      	movs	r3, #0
    f152:	f889 3000 	strb.w	r3, [r9]
    f156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f15a:	601a      	str	r2, [r3, #0]
    f15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f15e:	2b00      	cmp	r3, #0
    f160:	f43f acfe 	beq.w	eb60 <_dtoa_r+0x78>
    f164:	9800      	ldr	r0, [sp, #0]
    f166:	f8c3 9000 	str.w	r9, [r3]
    f16a:	b00f      	add	sp, #60	; 0x3c
    f16c:	ecbd 8b02 	vpop	{d8}
    f170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f174:	f1c0 001c 	rsb	r0, r0, #28
    f178:	9b06      	ldr	r3, [sp, #24]
    f17a:	4403      	add	r3, r0
    f17c:	9306      	str	r3, [sp, #24]
    f17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f180:	4403      	add	r3, r0
    f182:	9309      	str	r3, [sp, #36]	; 0x24
    f184:	4480      	add	r8, r0
    f186:	e76f      	b.n	f068 <_dtoa_r+0x580>
    f188:	f1c2 0220 	rsb	r2, r2, #32
    f18c:	fa06 f202 	lsl.w	r2, r6, r2
    f190:	ee07 2a10 	vmov	s14, r2
    f194:	e509      	b.n	ebaa <_dtoa_r+0xc2>
    f196:	2601      	movs	r6, #1
    f198:	e563      	b.n	ec62 <_dtoa_r+0x17a>
    f19a:	4601      	mov	r1, r0
    f19c:	463a      	mov	r2, r7
    f19e:	4620      	mov	r0, r4
    f1a0:	f7fd fa3a 	bl	c618 <__pow5mult>
    f1a4:	9b01      	ldr	r3, [sp, #4]
    f1a6:	2b01      	cmp	r3, #1
    f1a8:	4682      	mov	sl, r0
    f1aa:	f340 81c5 	ble.w	f538 <_dtoa_r+0xa50>
    f1ae:	2300      	movs	r3, #0
    f1b0:	9308      	str	r3, [sp, #32]
    f1b2:	f8da 2010 	ldr.w	r2, [sl, #16]
    f1b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    f1ba:	6910      	ldr	r0, [r2, #16]
    f1bc:	f7fd f900 	bl	c3c0 <__hi0bits>
    f1c0:	f1c0 0020 	rsb	r0, r0, #32
    f1c4:	e744      	b.n	f050 <_dtoa_r+0x568>
    f1c6:	bf00      	nop
    f1c8:	200002a8 	.word	0x200002a8
    f1cc:	20000ce8 	.word	0x20000ce8
    f1d0:	4631      	mov	r1, r6
    f1d2:	2300      	movs	r3, #0
    f1d4:	220a      	movs	r2, #10
    f1d6:	4620      	mov	r0, r4
    f1d8:	f7fd f8a0 	bl	c31c <__multadd>
    f1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f1de:	2b00      	cmp	r3, #0
    f1e0:	4606      	mov	r6, r0
    f1e2:	f340 82ce 	ble.w	f782 <_dtoa_r+0xc9a>
    f1e6:	9704      	str	r7, [sp, #16]
    f1e8:	4699      	mov	r9, r3
    f1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1ec:	2b00      	cmp	r3, #0
    f1ee:	dd05      	ble.n	f1fc <_dtoa_r+0x714>
    f1f0:	4631      	mov	r1, r6
    f1f2:	461a      	mov	r2, r3
    f1f4:	4620      	mov	r0, r4
    f1f6:	f7fd fa6f 	bl	c6d8 <__lshift>
    f1fa:	4606      	mov	r6, r0
    f1fc:	9b08      	ldr	r3, [sp, #32]
    f1fe:	2b00      	cmp	r3, #0
    f200:	f040 81eb 	bne.w	f5da <_dtoa_r+0xaf2>
    f204:	46b0      	mov	r8, r6
    f206:	9b02      	ldr	r3, [sp, #8]
    f208:	9f00      	ldr	r7, [sp, #0]
    f20a:	f003 0201 	and.w	r2, r3, #1
    f20e:	1e7b      	subs	r3, r7, #1
    f210:	444b      	add	r3, r9
    f212:	9308      	str	r3, [sp, #32]
    f214:	9b01      	ldr	r3, [sp, #4]
    f216:	920a      	str	r2, [sp, #40]	; 0x28
    f218:	4313      	orrs	r3, r2
    f21a:	9309      	str	r3, [sp, #36]	; 0x24
    f21c:	4651      	mov	r1, sl
    f21e:	4628      	mov	r0, r5
    f220:	f7ff fbce 	bl	e9c0 <quorem>
    f224:	4631      	mov	r1, r6
    f226:	4683      	mov	fp, r0
    f228:	4628      	mov	r0, r5
    f22a:	f7fd facd 	bl	c7c8 <__mcmp>
    f22e:	4642      	mov	r2, r8
    f230:	4651      	mov	r1, sl
    f232:	4681      	mov	r9, r0
    f234:	4620      	mov	r0, r4
    f236:	f7fd fae9 	bl	c80c <__mdiff>
    f23a:	68c2      	ldr	r2, [r0, #12]
    f23c:	4601      	mov	r1, r0
    f23e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f242:	2a00      	cmp	r2, #0
    f244:	d142      	bne.n	f2cc <_dtoa_r+0x7e4>
    f246:	e9cd 0306 	strd	r0, r3, [sp, #24]
    f24a:	4628      	mov	r0, r5
    f24c:	f7fd fabc 	bl	c7c8 <__mcmp>
    f250:	9906      	ldr	r1, [sp, #24]
    f252:	9002      	str	r0, [sp, #8]
    f254:	4620      	mov	r0, r4
    f256:	f7fd f857 	bl	c308 <_Bfree>
    f25a:	9a02      	ldr	r2, [sp, #8]
    f25c:	9b07      	ldr	r3, [sp, #28]
    f25e:	b91a      	cbnz	r2, f268 <_dtoa_r+0x780>
    f260:	9909      	ldr	r1, [sp, #36]	; 0x24
    f262:	2900      	cmp	r1, #0
    f264:	f000 827e 	beq.w	f764 <_dtoa_r+0xc7c>
    f268:	f1b9 0f00 	cmp.w	r9, #0
    f26c:	f2c0 8183 	blt.w	f576 <_dtoa_r+0xa8e>
    f270:	9901      	ldr	r1, [sp, #4]
    f272:	ea49 0901 	orr.w	r9, r9, r1
    f276:	990a      	ldr	r1, [sp, #40]	; 0x28
    f278:	ea51 0909 	orrs.w	r9, r1, r9
    f27c:	f000 817b 	beq.w	f576 <_dtoa_r+0xa8e>
    f280:	2a00      	cmp	r2, #0
    f282:	f300 81c6 	bgt.w	f612 <_dtoa_r+0xb2a>
    f286:	9a08      	ldr	r2, [sp, #32]
    f288:	703b      	strb	r3, [r7, #0]
    f28a:	f107 0901 	add.w	r9, r7, #1
    f28e:	4297      	cmp	r7, r2
    f290:	46cb      	mov	fp, r9
    f292:	f000 81c4 	beq.w	f61e <_dtoa_r+0xb36>
    f296:	4629      	mov	r1, r5
    f298:	2300      	movs	r3, #0
    f29a:	220a      	movs	r2, #10
    f29c:	4620      	mov	r0, r4
    f29e:	f7fd f83d 	bl	c31c <__multadd>
    f2a2:	4546      	cmp	r6, r8
    f2a4:	4605      	mov	r5, r0
    f2a6:	4631      	mov	r1, r6
    f2a8:	f04f 0300 	mov.w	r3, #0
    f2ac:	f04f 020a 	mov.w	r2, #10
    f2b0:	4620      	mov	r0, r4
    f2b2:	d012      	beq.n	f2da <_dtoa_r+0x7f2>
    f2b4:	f7fd f832 	bl	c31c <__multadd>
    f2b8:	4641      	mov	r1, r8
    f2ba:	4606      	mov	r6, r0
    f2bc:	2300      	movs	r3, #0
    f2be:	220a      	movs	r2, #10
    f2c0:	4620      	mov	r0, r4
    f2c2:	f7fd f82b 	bl	c31c <__multadd>
    f2c6:	464f      	mov	r7, r9
    f2c8:	4680      	mov	r8, r0
    f2ca:	e7a7      	b.n	f21c <_dtoa_r+0x734>
    f2cc:	4620      	mov	r0, r4
    f2ce:	9302      	str	r3, [sp, #8]
    f2d0:	f7fd f81a 	bl	c308 <_Bfree>
    f2d4:	9b02      	ldr	r3, [sp, #8]
    f2d6:	2201      	movs	r2, #1
    f2d8:	e7c6      	b.n	f268 <_dtoa_r+0x780>
    f2da:	f7fd f81f 	bl	c31c <__multadd>
    f2de:	464f      	mov	r7, r9
    f2e0:	4606      	mov	r6, r0
    f2e2:	4680      	mov	r8, r0
    f2e4:	e79a      	b.n	f21c <_dtoa_r+0x734>
    f2e6:	9b01      	ldr	r3, [sp, #4]
    f2e8:	2b02      	cmp	r3, #2
    f2ea:	dc71      	bgt.n	f3d0 <_dtoa_r+0x8e8>
    f2ec:	9b07      	ldr	r3, [sp, #28]
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	f47f af7b 	bne.w	f1ea <_dtoa_r+0x702>
    f2f4:	9b04      	ldr	r3, [sp, #16]
    f2f6:	4651      	mov	r1, sl
    f2f8:	3301      	adds	r3, #1
    f2fa:	4628      	mov	r0, r5
    f2fc:	9304      	str	r3, [sp, #16]
    f2fe:	f7ff fb5f 	bl	e9c0 <quorem>
    f302:	f8dd b000 	ldr.w	fp, [sp]
    f306:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f30a:	f80b 3b01 	strb.w	r3, [fp], #1
    f30e:	2700      	movs	r7, #0
    f310:	e6eb      	b.n	f0ea <_dtoa_r+0x602>
    f312:	4651      	mov	r1, sl
    f314:	4628      	mov	r0, r5
    f316:	f7fd fa57 	bl	c7c8 <__mcmp>
    f31a:	2800      	cmp	r0, #0
    f31c:	f6bf aeba 	bge.w	f094 <_dtoa_r+0x5ac>
    f320:	4629      	mov	r1, r5
    f322:	2300      	movs	r3, #0
    f324:	220a      	movs	r2, #10
    f326:	4620      	mov	r0, r4
    f328:	f7fc fff8 	bl	c31c <__multadd>
    f32c:	9b04      	ldr	r3, [sp, #16]
    f32e:	1e5f      	subs	r7, r3, #1
    f330:	9b07      	ldr	r3, [sp, #28]
    f332:	4605      	mov	r5, r0
    f334:	2b00      	cmp	r3, #0
    f336:	f47f af4b 	bne.w	f1d0 <_dtoa_r+0x6e8>
    f33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f33c:	2b00      	cmp	r3, #0
    f33e:	f340 8218 	ble.w	f772 <_dtoa_r+0xc8a>
    f342:	4699      	mov	r9, r3
    f344:	e6b1      	b.n	f0aa <_dtoa_r+0x5c2>
    f346:	4bbc      	ldr	r3, [pc, #752]	; (f638 <_dtoa_r+0xb50>)
    f348:	9300      	str	r3, [sp, #0]
    f34a:	3303      	adds	r3, #3
    f34c:	e4a4      	b.n	ec98 <_dtoa_r+0x1b0>
    f34e:	201c      	movs	r0, #28
    f350:	e712      	b.n	f178 <_dtoa_r+0x690>
    f352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f356:	2800      	cmp	r0, #0
    f358:	f47f ae74 	bne.w	f044 <_dtoa_r+0x55c>
    f35c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f360:	2a00      	cmp	r2, #0
    f362:	f000 80f4 	beq.w	f54e <_dtoa_r+0xa66>
    f366:	9b02      	ldr	r3, [sp, #8]
    f368:	9308      	str	r3, [sp, #32]
    f36a:	e66d      	b.n	f048 <_dtoa_r+0x560>
    f36c:	2301      	movs	r3, #1
    f36e:	9307      	str	r3, [sp, #28]
    f370:	9b04      	ldr	r3, [sp, #16]
    f372:	445b      	add	r3, fp
    f374:	f103 0901 	add.w	r9, r3, #1
    f378:	f1b9 0f01 	cmp.w	r9, #1
    f37c:	46cc      	mov	ip, r9
    f37e:	930b      	str	r3, [sp, #44]	; 0x2c
    f380:	bfb8      	it	lt
    f382:	f04f 0c01 	movlt.w	ip, #1
    f386:	2100      	movs	r1, #0
    f388:	f1bc 0f17 	cmp.w	ip, #23
    f38c:	63e1      	str	r1, [r4, #60]	; 0x3c
    f38e:	f77f acbc 	ble.w	ed0a <_dtoa_r+0x222>
    f392:	2001      	movs	r0, #1
    f394:	2204      	movs	r2, #4
    f396:	0052      	lsls	r2, r2, #1
    f398:	f102 0314 	add.w	r3, r2, #20
    f39c:	4563      	cmp	r3, ip
    f39e:	4601      	mov	r1, r0
    f3a0:	f100 0001 	add.w	r0, r0, #1
    f3a4:	d9f7      	bls.n	f396 <_dtoa_r+0x8ae>
    f3a6:	63e1      	str	r1, [r4, #60]	; 0x3c
    f3a8:	e4af      	b.n	ed0a <_dtoa_r+0x222>
    f3aa:	2301      	movs	r3, #1
    f3ac:	9307      	str	r3, [sp, #28]
    f3ae:	f1bb 0f00 	cmp.w	fp, #0
    f3b2:	dd52      	ble.n	f45a <_dtoa_r+0x972>
    f3b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    f3b8:	46d9      	mov	r9, fp
    f3ba:	46dc      	mov	ip, fp
    f3bc:	e7e3      	b.n	f386 <_dtoa_r+0x89e>
    f3be:	2300      	movs	r3, #0
    f3c0:	9307      	str	r3, [sp, #28]
    f3c2:	e7d5      	b.n	f370 <_dtoa_r+0x888>
    f3c4:	2300      	movs	r3, #0
    f3c6:	9307      	str	r3, [sp, #28]
    f3c8:	e7f1      	b.n	f3ae <_dtoa_r+0x8c6>
    f3ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f3ce:	9704      	str	r7, [sp, #16]
    f3d0:	f1b9 0f00 	cmp.w	r9, #0
    f3d4:	f47f ada1 	bne.w	ef1a <_dtoa_r+0x432>
    f3d8:	4651      	mov	r1, sl
    f3da:	464b      	mov	r3, r9
    f3dc:	2205      	movs	r2, #5
    f3de:	4620      	mov	r0, r4
    f3e0:	f7fc ff9c 	bl	c31c <__multadd>
    f3e4:	4601      	mov	r1, r0
    f3e6:	4682      	mov	sl, r0
    f3e8:	4628      	mov	r0, r5
    f3ea:	f7fd f9ed 	bl	c7c8 <__mcmp>
    f3ee:	2800      	cmp	r0, #0
    f3f0:	f77f ad93 	ble.w	ef1a <_dtoa_r+0x432>
    f3f4:	9b04      	ldr	r3, [sp, #16]
    f3f6:	f103 0b01 	add.w	fp, r3, #1
    f3fa:	9b00      	ldr	r3, [sp, #0]
    f3fc:	2231      	movs	r2, #49	; 0x31
    f3fe:	4698      	mov	r8, r3
    f400:	f803 2b01 	strb.w	r2, [r3], #1
    f404:	9300      	str	r3, [sp, #0]
    f406:	4651      	mov	r1, sl
    f408:	4620      	mov	r0, r4
    f40a:	f7fc ff7d 	bl	c308 <_Bfree>
    f40e:	f10b 0301 	add.w	r3, fp, #1
    f412:	f8dd 9000 	ldr.w	r9, [sp]
    f416:	9304      	str	r3, [sp, #16]
    f418:	f8cd 8000 	str.w	r8, [sp]
    f41c:	2e00      	cmp	r6, #0
    f41e:	f47f ae8f 	bne.w	f140 <_dtoa_r+0x658>
    f422:	e691      	b.n	f148 <_dtoa_r+0x660>
    f424:	eba3 0a0a 	sub.w	sl, r3, sl
    f428:	e5c5      	b.n	efb6 <_dtoa_r+0x4ce>
    f42a:	4631      	mov	r1, r6
    f42c:	4652      	mov	r2, sl
    f42e:	4620      	mov	r0, r4
    f430:	f7fd f8f2 	bl	c618 <__pow5mult>
    f434:	462a      	mov	r2, r5
    f436:	4601      	mov	r1, r0
    f438:	4606      	mov	r6, r0
    f43a:	4620      	mov	r0, r4
    f43c:	f7fd f83e 	bl	c4bc <__multiply>
    f440:	4629      	mov	r1, r5
    f442:	4605      	mov	r5, r0
    f444:	4620      	mov	r0, r4
    f446:	f7fc ff5f 	bl	c308 <_Bfree>
    f44a:	e5ea      	b.n	f022 <_dtoa_r+0x53a>
    f44c:	2002      	movs	r0, #2
    f44e:	eeb0 5b48 	vmov.f64	d5, d8
    f452:	e481      	b.n	ed58 <_dtoa_r+0x270>
    f454:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f458:	e68e      	b.n	f178 <_dtoa_r+0x690>
    f45a:	f04f 0b01 	mov.w	fp, #1
    f45e:	46d9      	mov	r9, fp
    f460:	e44f      	b.n	ed02 <_dtoa_r+0x21a>
    f462:	d103      	bne.n	f46c <_dtoa_r+0x984>
    f464:	9b01      	ldr	r3, [sp, #4]
    f466:	07db      	lsls	r3, r3, #31
    f468:	f53f ae4c 	bmi.w	f104 <_dtoa_r+0x61c>
    f46c:	46d9      	mov	r9, fp
    f46e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f472:	2b30      	cmp	r3, #48	; 0x30
    f474:	d0fa      	beq.n	f46c <_dtoa_r+0x984>
    f476:	e657      	b.n	f128 <_dtoa_r+0x640>
    f478:	9b04      	ldr	r3, [sp, #16]
    f47a:	9a00      	ldr	r2, [sp, #0]
    f47c:	3301      	adds	r3, #1
    f47e:	9304      	str	r3, [sp, #16]
    f480:	2331      	movs	r3, #49	; 0x31
    f482:	7013      	strb	r3, [r2, #0]
    f484:	e650      	b.n	f128 <_dtoa_r+0x640>
    f486:	f1ba 0f00 	cmp.w	sl, #0
    f48a:	f000 8123 	beq.w	f6d4 <_dtoa_r+0xbec>
    f48e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    f492:	9b06      	ldr	r3, [sp, #24]
    f494:	9309      	str	r3, [sp, #36]	; 0x24
    f496:	4413      	add	r3, r2
    f498:	f8dd a020 	ldr.w	sl, [sp, #32]
    f49c:	9306      	str	r3, [sp, #24]
    f49e:	4490      	add	r8, r2
    f4a0:	e592      	b.n	efc8 <_dtoa_r+0x4e0>
    f4a2:	ee07 0a90 	vmov	s15, r0
    f4a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    f4aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    f4ae:	eea6 5b07 	vfma.f64	d5, d6, d7
    f4b2:	ee15 2a90 	vmov	r2, s11
    f4b6:	ec51 0b15 	vmov	r0, r1, d5
    f4ba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f4be:	ec41 0b15 	vmov	d5, r0, r1
    f4c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f4c6:	ee36 7b47 	vsub.f64	d7, d6, d7
    f4ca:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4d2:	f300 8137 	bgt.w	f744 <_dtoa_r+0xc5c>
    f4d6:	eeb1 5b45 	vneg.f64	d5, d5
    f4da:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4e2:	f57f acfb 	bpl.w	eedc <_dtoa_r+0x3f4>
    f4e6:	f04f 0a00 	mov.w	sl, #0
    f4ea:	4656      	mov	r6, sl
    f4ec:	e515      	b.n	ef1a <_dtoa_r+0x432>
    f4ee:	f000 80f5 	beq.w	f6dc <_dtoa_r+0xbf4>
    f4f2:	9b04      	ldr	r3, [sp, #16]
    f4f4:	4951      	ldr	r1, [pc, #324]	; (f63c <_dtoa_r+0xb54>)
    f4f6:	425a      	negs	r2, r3
    f4f8:	f002 000f 	and.w	r0, r2, #15
    f4fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    f500:	ed91 6b00 	vldr	d6, [r1]
    f504:	1112      	asrs	r2, r2, #4
    f506:	ee28 6b06 	vmul.f64	d6, d8, d6
    f50a:	f000 8142 	beq.w	f792 <_dtoa_r+0xcaa>
    f50e:	eeb0 7b46 	vmov.f64	d7, d6
    f512:	494b      	ldr	r1, [pc, #300]	; (f640 <_dtoa_r+0xb58>)
    f514:	2600      	movs	r6, #0
    f516:	2002      	movs	r0, #2
    f518:	07d3      	lsls	r3, r2, #31
    f51a:	d505      	bpl.n	f528 <_dtoa_r+0xa40>
    f51c:	ed91 5b00 	vldr	d5, [r1]
    f520:	3001      	adds	r0, #1
    f522:	2601      	movs	r6, #1
    f524:	ee27 7b05 	vmul.f64	d7, d7, d5
    f528:	1052      	asrs	r2, r2, #1
    f52a:	f101 0108 	add.w	r1, r1, #8
    f52e:	d1f3      	bne.n	f518 <_dtoa_r+0xa30>
    f530:	2e00      	cmp	r6, #0
    f532:	fe06 6b07 	vseleq.f64	d6, d6, d7
    f536:	e41e      	b.n	ed76 <_dtoa_r+0x28e>
    f538:	9b02      	ldr	r3, [sp, #8]
    f53a:	2b00      	cmp	r3, #0
    f53c:	f47f ae37 	bne.w	f1ae <_dtoa_r+0x6c6>
    f540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f544:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f548:	2a00      	cmp	r2, #0
    f54a:	f040 8137 	bne.w	f7bc <_dtoa_r+0xcd4>
    f54e:	4a3d      	ldr	r2, [pc, #244]	; (f644 <_dtoa_r+0xb5c>)
    f550:	400a      	ands	r2, r1
    f552:	2a00      	cmp	r2, #0
    f554:	f000 80fa 	beq.w	f74c <_dtoa_r+0xc64>
    f558:	9b06      	ldr	r3, [sp, #24]
    f55a:	3301      	adds	r3, #1
    f55c:	9306      	str	r3, [sp, #24]
    f55e:	2301      	movs	r3, #1
    f560:	f108 0801 	add.w	r8, r8, #1
    f564:	9308      	str	r3, [sp, #32]
    f566:	e56f      	b.n	f048 <_dtoa_r+0x560>
    f568:	4629      	mov	r1, r5
    f56a:	9a08      	ldr	r2, [sp, #32]
    f56c:	4620      	mov	r0, r4
    f56e:	f7fd f853 	bl	c618 <__pow5mult>
    f572:	4605      	mov	r5, r0
    f574:	e55a      	b.n	f02c <_dtoa_r+0x544>
    f576:	2a00      	cmp	r2, #0
    f578:	dd12      	ble.n	f5a0 <_dtoa_r+0xab8>
    f57a:	4629      	mov	r1, r5
    f57c:	2201      	movs	r2, #1
    f57e:	4620      	mov	r0, r4
    f580:	9301      	str	r3, [sp, #4]
    f582:	f7fd f8a9 	bl	c6d8 <__lshift>
    f586:	4651      	mov	r1, sl
    f588:	4605      	mov	r5, r0
    f58a:	f7fd f91d 	bl	c7c8 <__mcmp>
    f58e:	2800      	cmp	r0, #0
    f590:	9b01      	ldr	r3, [sp, #4]
    f592:	f340 80e1 	ble.w	f758 <_dtoa_r+0xc70>
    f596:	2b39      	cmp	r3, #57	; 0x39
    f598:	f000 80ca 	beq.w	f730 <_dtoa_r+0xc48>
    f59c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f5a0:	46b9      	mov	r9, r7
    f5a2:	f809 3b01 	strb.w	r3, [r9], #1
    f5a6:	9b04      	ldr	r3, [sp, #16]
    f5a8:	3301      	adds	r3, #1
    f5aa:	4637      	mov	r7, r6
    f5ac:	9304      	str	r3, [sp, #16]
    f5ae:	4646      	mov	r6, r8
    f5b0:	e5ba      	b.n	f128 <_dtoa_r+0x640>
    f5b2:	ee38 8b08 	vadd.f64	d8, d8, d8
    f5b6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5be:	dc0a      	bgt.n	f5d6 <_dtoa_r+0xaee>
    f5c0:	eeb4 8b46 	vcmp.f64	d8, d6
    f5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5c8:	f47f acdc 	bne.w	ef84 <_dtoa_r+0x49c>
    f5cc:	ee17 3a10 	vmov	r3, s14
    f5d0:	07d8      	lsls	r0, r3, #31
    f5d2:	f57f acd7 	bpl.w	ef84 <_dtoa_r+0x49c>
    f5d6:	9a00      	ldr	r2, [sp, #0]
    f5d8:	e454      	b.n	ee84 <_dtoa_r+0x39c>
    f5da:	6871      	ldr	r1, [r6, #4]
    f5dc:	4620      	mov	r0, r4
    f5de:	f7fc fe6d 	bl	c2bc <_Balloc>
    f5e2:	4607      	mov	r7, r0
    f5e4:	2800      	cmp	r0, #0
    f5e6:	f000 80de 	beq.w	f7a6 <_dtoa_r+0xcbe>
    f5ea:	6933      	ldr	r3, [r6, #16]
    f5ec:	3302      	adds	r3, #2
    f5ee:	009a      	lsls	r2, r3, #2
    f5f0:	f106 010c 	add.w	r1, r6, #12
    f5f4:	300c      	adds	r0, #12
    f5f6:	f7f9 fb35 	bl	8c64 <memcpy>
    f5fa:	4639      	mov	r1, r7
    f5fc:	2201      	movs	r2, #1
    f5fe:	4620      	mov	r0, r4
    f600:	f7fd f86a 	bl	c6d8 <__lshift>
    f604:	4680      	mov	r8, r0
    f606:	e5fe      	b.n	f206 <_dtoa_r+0x71e>
    f608:	9b06      	ldr	r3, [sp, #24]
    f60a:	eba3 0309 	sub.w	r3, r3, r9
    f60e:	9309      	str	r3, [sp, #36]	; 0x24
    f610:	e4da      	b.n	efc8 <_dtoa_r+0x4e0>
    f612:	2b39      	cmp	r3, #57	; 0x39
    f614:	f000 808c 	beq.w	f730 <_dtoa_r+0xc48>
    f618:	46b9      	mov	r9, r7
    f61a:	3301      	adds	r3, #1
    f61c:	e7c1      	b.n	f5a2 <_dtoa_r+0xaba>
    f61e:	9a04      	ldr	r2, [sp, #16]
    f620:	3201      	adds	r2, #1
    f622:	4637      	mov	r7, r6
    f624:	9204      	str	r2, [sp, #16]
    f626:	4646      	mov	r6, r8
    f628:	e55f      	b.n	f0ea <_dtoa_r+0x602>
    f62a:	4629      	mov	r1, r5
    f62c:	4620      	mov	r0, r4
    f62e:	f7fc fff3 	bl	c618 <__pow5mult>
    f632:	4605      	mov	r5, r0
    f634:	e4fa      	b.n	f02c <_dtoa_r+0x544>
    f636:	bf00      	nop
    f638:	20000c48 	.word	0x20000c48
    f63c:	200002a8 	.word	0x200002a8
    f640:	20000280 	.word	0x20000280
    f644:	7ff00000 	.word	0x7ff00000
    f648:	4b5e      	ldr	r3, [pc, #376]	; (f7c4 <_dtoa_r+0xcdc>)
    f64a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    f64e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f652:	ed1c 3b02 	vldr	d3, [ip, #-8]
    f656:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    f65a:	ee36 7b47 	vsub.f64	d7, d6, d7
    f65e:	ec41 0b16 	vmov	d6, r0, r1
    f662:	ee15 1a90 	vmov	r1, s11
    f666:	ee23 3b06 	vmul.f64	d3, d3, d6
    f66a:	9800      	ldr	r0, [sp, #0]
    f66c:	3130      	adds	r1, #48	; 0x30
    f66e:	2a01      	cmp	r2, #1
    f670:	f800 1b01 	strb.w	r1, [r0], #1
    f674:	f000 8083 	beq.w	f77e <_dtoa_r+0xc96>
    f678:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f67c:	9b00      	ldr	r3, [sp, #0]
    f67e:	1899      	adds	r1, r3, r2
    f680:	ee27 7b04 	vmul.f64	d7, d7, d4
    f684:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f688:	ee16 3a90 	vmov	r3, s13
    f68c:	3330      	adds	r3, #48	; 0x30
    f68e:	f800 3b01 	strb.w	r3, [r0], #1
    f692:	4281      	cmp	r1, r0
    f694:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    f698:	ee37 7b45 	vsub.f64	d7, d7, d5
    f69c:	d1f0      	bne.n	f680 <_dtoa_r+0xb98>
    f69e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f6a2:	ee33 5b06 	vadd.f64	d5, d3, d6
    f6a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6ae:	f53f abe3 	bmi.w	ee78 <_dtoa_r+0x390>
    f6b2:	ee36 6b43 	vsub.f64	d6, d6, d3
    f6b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6be:	f77f ac0d 	ble.w	eedc <_dtoa_r+0x3f4>
    f6c2:	4689      	mov	r9, r1
    f6c4:	3901      	subs	r1, #1
    f6c6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    f6ca:	2b30      	cmp	r3, #48	; 0x30
    f6cc:	d0f9      	beq.n	f6c2 <_dtoa_r+0xbda>
    f6ce:	1c73      	adds	r3, r6, #1
    f6d0:	9304      	str	r3, [sp, #16]
    f6d2:	e539      	b.n	f148 <_dtoa_r+0x660>
    f6d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f6d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    f6da:	e6da      	b.n	f492 <_dtoa_r+0x9aa>
    f6dc:	2002      	movs	r0, #2
    f6de:	eeb0 6b48 	vmov.f64	d6, d8
    f6e2:	f7ff bb48 	b.w	ed76 <_dtoa_r+0x28e>
    f6e6:	f1b9 0f00 	cmp.w	r9, #0
    f6ea:	f43f aeda 	beq.w	f4a2 <_dtoa_r+0x9ba>
    f6ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f6f0:	2a00      	cmp	r2, #0
    f6f2:	f77f abf3 	ble.w	eedc <_dtoa_r+0x3f4>
    f6f6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f6fa:	ee26 6b04 	vmul.f64	d6, d6, d4
    f6fe:	3001      	adds	r0, #1
    f700:	ee07 0a90 	vmov	s15, r0
    f704:	9b04      	ldr	r3, [sp, #16]
    f706:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f70a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f70e:	eea6 7b05 	vfma.f64	d7, d6, d5
    f712:	ee17 ca90 	vmov	ip, s15
    f716:	ec51 0b17 	vmov	r0, r1, d7
    f71a:	1e5e      	subs	r6, r3, #1
    f71c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    f720:	f7ff bb47 	b.w	edb2 <_dtoa_r+0x2ca>
    f724:	9b04      	ldr	r3, [sp, #16]
    f726:	3301      	adds	r3, #1
    f728:	9304      	str	r3, [sp, #16]
    f72a:	2331      	movs	r3, #49	; 0x31
    f72c:	f7ff bbb1 	b.w	ee92 <_dtoa_r+0x3aa>
    f730:	9b04      	ldr	r3, [sp, #16]
    f732:	46bb      	mov	fp, r7
    f734:	3301      	adds	r3, #1
    f736:	9304      	str	r3, [sp, #16]
    f738:	2339      	movs	r3, #57	; 0x39
    f73a:	4637      	mov	r7, r6
    f73c:	f80b 3b01 	strb.w	r3, [fp], #1
    f740:	4646      	mov	r6, r8
    f742:	e4e1      	b.n	f108 <_dtoa_r+0x620>
    f744:	f04f 0a00 	mov.w	sl, #0
    f748:	4656      	mov	r6, sl
    f74a:	e653      	b.n	f3f4 <_dtoa_r+0x90c>
    f74c:	9208      	str	r2, [sp, #32]
    f74e:	e47b      	b.n	f048 <_dtoa_r+0x560>
    f750:	1c73      	adds	r3, r6, #1
    f752:	9304      	str	r3, [sp, #16]
    f754:	4689      	mov	r9, r1
    f756:	e4f7      	b.n	f148 <_dtoa_r+0x660>
    f758:	f47f af22 	bne.w	f5a0 <_dtoa_r+0xab8>
    f75c:	07da      	lsls	r2, r3, #31
    f75e:	f57f af1f 	bpl.w	f5a0 <_dtoa_r+0xab8>
    f762:	e718      	b.n	f596 <_dtoa_r+0xaae>
    f764:	2b39      	cmp	r3, #57	; 0x39
    f766:	d0e3      	beq.n	f730 <_dtoa_r+0xc48>
    f768:	f1b9 0f00 	cmp.w	r9, #0
    f76c:	f73f af16 	bgt.w	f59c <_dtoa_r+0xab4>
    f770:	e716      	b.n	f5a0 <_dtoa_r+0xab8>
    f772:	9b01      	ldr	r3, [sp, #4]
    f774:	2b02      	cmp	r3, #2
    f776:	f73f ae28 	bgt.w	f3ca <_dtoa_r+0x8e2>
    f77a:	9704      	str	r7, [sp, #16]
    f77c:	e5ba      	b.n	f2f4 <_dtoa_r+0x80c>
    f77e:	4601      	mov	r1, r0
    f780:	e78d      	b.n	f69e <_dtoa_r+0xbb6>
    f782:	9b01      	ldr	r3, [sp, #4]
    f784:	2b02      	cmp	r3, #2
    f786:	f73f ae20 	bgt.w	f3ca <_dtoa_r+0x8e2>
    f78a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f78e:	9704      	str	r7, [sp, #16]
    f790:	e52b      	b.n	f1ea <_dtoa_r+0x702>
    f792:	2002      	movs	r0, #2
    f794:	f7ff baef 	b.w	ed76 <_dtoa_r+0x28e>
    f798:	4b0b      	ldr	r3, [pc, #44]	; (f7c8 <_dtoa_r+0xce0>)
    f79a:	480c      	ldr	r0, [pc, #48]	; (f7cc <_dtoa_r+0xce4>)
    f79c:	2200      	movs	r2, #0
    f79e:	f240 11af 	movw	r1, #431	; 0x1af
    f7a2:	f7ff f8b1 	bl	e908 <__assert_func>
    f7a6:	4b08      	ldr	r3, [pc, #32]	; (f7c8 <_dtoa_r+0xce0>)
    f7a8:	4808      	ldr	r0, [pc, #32]	; (f7cc <_dtoa_r+0xce4>)
    f7aa:	463a      	mov	r2, r7
    f7ac:	f240 21ef 	movw	r1, #751	; 0x2ef
    f7b0:	f7ff f8aa 	bl	e908 <__assert_func>
    f7b4:	4b06      	ldr	r3, [pc, #24]	; (f7d0 <_dtoa_r+0xce8>)
    f7b6:	9300      	str	r3, [sp, #0]
    f7b8:	f7ff b9d2 	b.w	eb60 <_dtoa_r+0x78>
    f7bc:	9b02      	ldr	r3, [sp, #8]
    f7be:	9308      	str	r3, [sp, #32]
    f7c0:	e4f7      	b.n	f1b2 <_dtoa_r+0x6ca>
    f7c2:	bf00      	nop
    f7c4:	200002a8 	.word	0x200002a8
    f7c8:	20000ac8 	.word	0x20000ac8
    f7cc:	20000c4c 	.word	0x20000c4c
    f7d0:	20000c3c 	.word	0x20000c3c

0000f7d4 <_wcrtomb_r>:
    f7d4:	b570      	push	{r4, r5, r6, lr}
    f7d6:	4605      	mov	r5, r0
    f7d8:	b084      	sub	sp, #16
    f7da:	b15b      	cbz	r3, f7f4 <_wcrtomb_r+0x20>
    f7dc:	461c      	mov	r4, r3
    f7de:	b169      	cbz	r1, f7fc <_wcrtomb_r+0x28>
    f7e0:	4b0e      	ldr	r3, [pc, #56]	; (f81c <_wcrtomb_r+0x48>)
    f7e2:	4628      	mov	r0, r5
    f7e4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    f7e8:	4623      	mov	r3, r4
    f7ea:	47b0      	blx	r6
    f7ec:	1c43      	adds	r3, r0, #1
    f7ee:	d00f      	beq.n	f810 <_wcrtomb_r+0x3c>
    f7f0:	b004      	add	sp, #16
    f7f2:	bd70      	pop	{r4, r5, r6, pc}
    f7f4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    f7f8:	2900      	cmp	r1, #0
    f7fa:	d1f1      	bne.n	f7e0 <_wcrtomb_r+0xc>
    f7fc:	4a07      	ldr	r2, [pc, #28]	; (f81c <_wcrtomb_r+0x48>)
    f7fe:	4623      	mov	r3, r4
    f800:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    f804:	4628      	mov	r0, r5
    f806:	460a      	mov	r2, r1
    f808:	a901      	add	r1, sp, #4
    f80a:	47b0      	blx	r6
    f80c:	1c43      	adds	r3, r0, #1
    f80e:	d1ef      	bne.n	f7f0 <_wcrtomb_r+0x1c>
    f810:	2200      	movs	r2, #0
    f812:	238a      	movs	r3, #138	; 0x8a
    f814:	6022      	str	r2, [r4, #0]
    f816:	602b      	str	r3, [r5, #0]
    f818:	b004      	add	sp, #16
    f81a:	bd70      	pop	{r4, r5, r6, pc}
    f81c:	2000439c 	.word	0x2000439c

0000f820 <_wcsrtombs_r>:
    f820:	b510      	push	{r4, lr}
    f822:	b082      	sub	sp, #8
    f824:	9c04      	ldr	r4, [sp, #16]
    f826:	e9cd 3400 	strd	r3, r4, [sp]
    f82a:	f04f 33ff 	mov.w	r3, #4294967295
    f82e:	f001 fbc7 	bl	10fc0 <_wcsnrtombs_r>
    f832:	b002      	add	sp, #8
    f834:	bd10      	pop	{r4, pc}
    f836:	bf00      	nop

0000f838 <fiprintf>:
    f838:	b40e      	push	{r1, r2, r3}
    f83a:	b510      	push	{r4, lr}
    f83c:	b083      	sub	sp, #12
    f83e:	ab05      	add	r3, sp, #20
    f840:	4c06      	ldr	r4, [pc, #24]	; (f85c <fiprintf+0x24>)
    f842:	f853 2b04 	ldr.w	r2, [r3], #4
    f846:	9301      	str	r3, [sp, #4]
    f848:	4601      	mov	r1, r0
    f84a:	6820      	ldr	r0, [r4, #0]
    f84c:	f000 f8c4 	bl	f9d8 <_vfiprintf_r>
    f850:	b003      	add	sp, #12
    f852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f856:	b003      	add	sp, #12
    f858:	4770      	bx	lr
    f85a:	bf00      	nop
    f85c:	20004924 	.word	0x20004924

0000f860 <__ssprint_r>:
    f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f864:	6893      	ldr	r3, [r2, #8]
    f866:	6817      	ldr	r7, [r2, #0]
    f868:	b083      	sub	sp, #12
    f86a:	4692      	mov	sl, r2
    f86c:	2b00      	cmp	r3, #0
    f86e:	d070      	beq.n	f952 <__ssprint_r+0xf2>
    f870:	4681      	mov	r9, r0
    f872:	688a      	ldr	r2, [r1, #8]
    f874:	6808      	ldr	r0, [r1, #0]
    f876:	460c      	mov	r4, r1
    f878:	3708      	adds	r7, #8
    f87a:	e043      	b.n	f904 <__ssprint_r+0xa4>
    f87c:	89a3      	ldrh	r3, [r4, #12]
    f87e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    f882:	d02e      	beq.n	f8e2 <__ssprint_r+0x82>
    f884:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    f888:	eba0 0801 	sub.w	r8, r0, r1
    f88c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    f890:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    f894:	f108 0001 	add.w	r0, r8, #1
    f898:	1076      	asrs	r6, r6, #1
    f89a:	4428      	add	r0, r5
    f89c:	42b0      	cmp	r0, r6
    f89e:	4632      	mov	r2, r6
    f8a0:	bf84      	itt	hi
    f8a2:	4606      	movhi	r6, r0
    f8a4:	4632      	movhi	r2, r6
    f8a6:	055b      	lsls	r3, r3, #21
    f8a8:	d537      	bpl.n	f91a <__ssprint_r+0xba>
    f8aa:	4611      	mov	r1, r2
    f8ac:	4648      	mov	r0, r9
    f8ae:	f7fa ff89 	bl	a7c4 <_malloc_r>
    f8b2:	9001      	str	r0, [sp, #4]
    f8b4:	2800      	cmp	r0, #0
    f8b6:	d03a      	beq.n	f92e <__ssprint_r+0xce>
    f8b8:	4642      	mov	r2, r8
    f8ba:	6921      	ldr	r1, [r4, #16]
    f8bc:	f7f9 f9d2 	bl	8c64 <memcpy>
    f8c0:	89a2      	ldrh	r2, [r4, #12]
    f8c2:	9b01      	ldr	r3, [sp, #4]
    f8c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    f8c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    f8cc:	81a2      	strh	r2, [r4, #12]
    f8ce:	eba6 0208 	sub.w	r2, r6, r8
    f8d2:	eb03 0008 	add.w	r0, r3, r8
    f8d6:	6166      	str	r6, [r4, #20]
    f8d8:	60a2      	str	r2, [r4, #8]
    f8da:	6123      	str	r3, [r4, #16]
    f8dc:	6020      	str	r0, [r4, #0]
    f8de:	462e      	mov	r6, r5
    f8e0:	46a8      	mov	r8, r5
    f8e2:	4642      	mov	r2, r8
    f8e4:	4659      	mov	r1, fp
    f8e6:	f7fb fee9 	bl	b6bc <memmove>
    f8ea:	f8da 3008 	ldr.w	r3, [sl, #8]
    f8ee:	68a2      	ldr	r2, [r4, #8]
    f8f0:	6820      	ldr	r0, [r4, #0]
    f8f2:	1b92      	subs	r2, r2, r6
    f8f4:	4440      	add	r0, r8
    f8f6:	1b5b      	subs	r3, r3, r5
    f8f8:	60a2      	str	r2, [r4, #8]
    f8fa:	6020      	str	r0, [r4, #0]
    f8fc:	f8ca 3008 	str.w	r3, [sl, #8]
    f900:	b33b      	cbz	r3, f952 <__ssprint_r+0xf2>
    f902:	3708      	adds	r7, #8
    f904:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    f908:	2d00      	cmp	r5, #0
    f90a:	d0fa      	beq.n	f902 <__ssprint_r+0xa2>
    f90c:	42aa      	cmp	r2, r5
    f90e:	4616      	mov	r6, r2
    f910:	4690      	mov	r8, r2
    f912:	d9b3      	bls.n	f87c <__ssprint_r+0x1c>
    f914:	462e      	mov	r6, r5
    f916:	46a8      	mov	r8, r5
    f918:	e7e3      	b.n	f8e2 <__ssprint_r+0x82>
    f91a:	4648      	mov	r0, r9
    f91c:	f7fb fa1a 	bl	ad54 <_realloc_r>
    f920:	4603      	mov	r3, r0
    f922:	2800      	cmp	r0, #0
    f924:	d1d3      	bne.n	f8ce <__ssprint_r+0x6e>
    f926:	6921      	ldr	r1, [r4, #16]
    f928:	4648      	mov	r0, r9
    f92a:	f7fc fbab 	bl	c084 <_free_r>
    f92e:	89a3      	ldrh	r3, [r4, #12]
    f930:	220c      	movs	r2, #12
    f932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f936:	f8c9 2000 	str.w	r2, [r9]
    f93a:	f04f 30ff 	mov.w	r0, #4294967295
    f93e:	81a3      	strh	r3, [r4, #12]
    f940:	2200      	movs	r2, #0
    f942:	2300      	movs	r3, #0
    f944:	f8ca 2008 	str.w	r2, [sl, #8]
    f948:	f8ca 3004 	str.w	r3, [sl, #4]
    f94c:	b003      	add	sp, #12
    f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f952:	2000      	movs	r0, #0
    f954:	2300      	movs	r3, #0
    f956:	f8ca 3004 	str.w	r3, [sl, #4]
    f95a:	b003      	add	sp, #12
    f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f960 <__sprint_r.part.0>:
    f960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f964:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    f966:	049c      	lsls	r4, r3, #18
    f968:	4690      	mov	r8, r2
    f96a:	d52d      	bpl.n	f9c8 <__sprint_r.part.0+0x68>
    f96c:	6893      	ldr	r3, [r2, #8]
    f96e:	6812      	ldr	r2, [r2, #0]
    f970:	b343      	cbz	r3, f9c4 <__sprint_r.part.0+0x64>
    f972:	468b      	mov	fp, r1
    f974:	4606      	mov	r6, r0
    f976:	f102 0908 	add.w	r9, r2, #8
    f97a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    f97e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    f982:	d015      	beq.n	f9b0 <__sprint_r.part.0+0x50>
    f984:	3d04      	subs	r5, #4
    f986:	2400      	movs	r4, #0
    f988:	e001      	b.n	f98e <__sprint_r.part.0+0x2e>
    f98a:	42a7      	cmp	r7, r4
    f98c:	d00e      	beq.n	f9ac <__sprint_r.part.0+0x4c>
    f98e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    f992:	465a      	mov	r2, fp
    f994:	4630      	mov	r0, r6
    f996:	f001 fa5b 	bl	10e50 <_fputwc_r>
    f99a:	1c43      	adds	r3, r0, #1
    f99c:	f104 0401 	add.w	r4, r4, #1
    f9a0:	d1f3      	bne.n	f98a <__sprint_r.part.0+0x2a>
    f9a2:	2300      	movs	r3, #0
    f9a4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f9b0:	f02a 0a03 	bic.w	sl, sl, #3
    f9b4:	eba3 030a 	sub.w	r3, r3, sl
    f9b8:	f8c8 3008 	str.w	r3, [r8, #8]
    f9bc:	f109 0908 	add.w	r9, r9, #8
    f9c0:	2b00      	cmp	r3, #0
    f9c2:	d1da      	bne.n	f97a <__sprint_r.part.0+0x1a>
    f9c4:	2000      	movs	r0, #0
    f9c6:	e7ec      	b.n	f9a2 <__sprint_r.part.0+0x42>
    f9c8:	f001 f80c 	bl	109e4 <__sfvwrite_r>
    f9cc:	2300      	movs	r3, #0
    f9ce:	e9c8 3301 	strd	r3, r3, [r8, #4]
    f9d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9d6:	bf00      	nop

0000f9d8 <_vfiprintf_r>:
    f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9dc:	ed2d 8b02 	vpush	{d8}
    f9e0:	b0c5      	sub	sp, #276	; 0x114
    f9e2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    f9e6:	4683      	mov	fp, r0
    f9e8:	ee08 1a10 	vmov	s16, r1
    f9ec:	4616      	mov	r6, r2
    f9ee:	2100      	movs	r1, #0
    f9f0:	2208      	movs	r2, #8
    f9f2:	4650      	mov	r0, sl
    f9f4:	461c      	mov	r4, r3
    f9f6:	9307      	str	r3, [sp, #28]
    f9f8:	f7fb fedc 	bl	b7b4 <memset>
    f9fc:	f1bb 0f00 	cmp.w	fp, #0
    fa00:	d004      	beq.n	fa0c <_vfiprintf_r+0x34>
    fa02:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    fa06:	2b00      	cmp	r3, #0
    fa08:	f000 86a0 	beq.w	1074c <_vfiprintf_r+0xd74>
    fa0c:	ee18 2a10 	vmov	r2, s16
    fa10:	6e53      	ldr	r3, [r2, #100]	; 0x64
    fa12:	07db      	lsls	r3, r3, #31
    fa14:	f140 8513 	bpl.w	1043e <_vfiprintf_r+0xa66>
    fa18:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    fa1c:	b28a      	uxth	r2, r1
    fa1e:	0495      	lsls	r5, r2, #18
    fa20:	d40b      	bmi.n	fa3a <_vfiprintf_r+0x62>
    fa22:	ee18 3a10 	vmov	r3, s16
    fa26:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    fa2a:	8199      	strh	r1, [r3, #12]
    fa2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fa2e:	b28a      	uxth	r2, r1
    fa30:	ee18 1a10 	vmov	r1, s16
    fa34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    fa38:	664b      	str	r3, [r1, #100]	; 0x64
    fa3a:	0710      	lsls	r0, r2, #28
    fa3c:	f140 8105 	bpl.w	fc4a <_vfiprintf_r+0x272>
    fa40:	ee18 3a10 	vmov	r3, s16
    fa44:	691b      	ldr	r3, [r3, #16]
    fa46:	2b00      	cmp	r3, #0
    fa48:	f000 80ff 	beq.w	fc4a <_vfiprintf_r+0x272>
    fa4c:	f002 031a 	and.w	r3, r2, #26
    fa50:	2b0a      	cmp	r3, #10
    fa52:	f000 810a 	beq.w	fc6a <_vfiprintf_r+0x292>
    fa56:	2300      	movs	r3, #0
    fa58:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    fa5c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    fa60:	aa1b      	add	r2, sp, #108	; 0x6c
    fa62:	930c      	str	r3, [sp, #48]	; 0x30
    fa64:	9218      	str	r2, [sp, #96]	; 0x60
    fa66:	4691      	mov	r9, r2
    fa68:	930b      	str	r3, [sp, #44]	; 0x2c
    fa6a:	9305      	str	r3, [sp, #20]
    fa6c:	46b0      	mov	r8, r6
    fa6e:	4644      	mov	r4, r8
    fa70:	4ba8      	ldr	r3, [pc, #672]	; (fd14 <_vfiprintf_r+0x33c>)
    fa72:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    fa76:	f7fb ff87 	bl	b988 <__locale_mb_cur_max>
    fa7a:	4622      	mov	r2, r4
    fa7c:	4603      	mov	r3, r0
    fa7e:	a912      	add	r1, sp, #72	; 0x48
    fa80:	f8cd a000 	str.w	sl, [sp]
    fa84:	4658      	mov	r0, fp
    fa86:	47a8      	blx	r5
    fa88:	2800      	cmp	r0, #0
    fa8a:	f000 8145 	beq.w	fd18 <_vfiprintf_r+0x340>
    fa8e:	f2c0 8139 	blt.w	fd04 <_vfiprintf_r+0x32c>
    fa92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fa94:	2a25      	cmp	r2, #37	; 0x25
    fa96:	4603      	mov	r3, r0
    fa98:	d001      	beq.n	fa9e <_vfiprintf_r+0xc6>
    fa9a:	441c      	add	r4, r3
    fa9c:	e7e8      	b.n	fa70 <_vfiprintf_r+0x98>
    fa9e:	ebb4 0608 	subs.w	r6, r4, r8
    faa2:	4605      	mov	r5, r0
    faa4:	f040 813c 	bne.w	fd20 <_vfiprintf_r+0x348>
    faa8:	2300      	movs	r3, #0
    faaa:	7861      	ldrb	r1, [r4, #1]
    faac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fab0:	f104 0801 	add.w	r8, r4, #1
    fab4:	9306      	str	r3, [sp, #24]
    fab6:	f04f 37ff 	mov.w	r7, #4294967295
    faba:	461e      	mov	r6, r3
    fabc:	242b      	movs	r4, #43	; 0x2b
    fabe:	f108 0801 	add.w	r8, r8, #1
    fac2:	f1a1 0320 	sub.w	r3, r1, #32
    fac6:	2b5a      	cmp	r3, #90	; 0x5a
    fac8:	f200 8178 	bhi.w	fdbc <_vfiprintf_r+0x3e4>
    facc:	e8df f013 	tbh	[pc, r3, lsl #1]
    fad0:	017602b5 	.word	0x017602b5
    fad4:	02b00176 	.word	0x02b00176
    fad8:	01760176 	.word	0x01760176
    fadc:	006a0176 	.word	0x006a0176
    fae0:	01760176 	.word	0x01760176
    fae4:	028d027d 	.word	0x028d027d
    fae8:	02880176 	.word	0x02880176
    faec:	01760297 	.word	0x01760297
    faf0:	005b0292 	.word	0x005b0292
    faf4:	005b005b 	.word	0x005b005b
    faf8:	005b005b 	.word	0x005b005b
    fafc:	005b005b 	.word	0x005b005b
    fb00:	005b005b 	.word	0x005b005b
    fb04:	01760176 	.word	0x01760176
    fb08:	01760176 	.word	0x01760176
    fb0c:	01760176 	.word	0x01760176
    fb10:	01760176 	.word	0x01760176
    fb14:	025c0176 	.word	0x025c0176
    fb18:	01760084 	.word	0x01760084
    fb1c:	01760176 	.word	0x01760176
    fb20:	01760176 	.word	0x01760176
    fb24:	01760176 	.word	0x01760176
    fb28:	01760176 	.word	0x01760176
    fb2c:	00e80176 	.word	0x00e80176
    fb30:	01760176 	.word	0x01760176
    fb34:	02330176 	.word	0x02330176
    fb38:	02da0176 	.word	0x02da0176
    fb3c:	01760176 	.word	0x01760176
    fb40:	0176058b 	.word	0x0176058b
    fb44:	01760176 	.word	0x01760176
    fb48:	01760176 	.word	0x01760176
    fb4c:	01760176 	.word	0x01760176
    fb50:	01760176 	.word	0x01760176
    fb54:	025c0176 	.word	0x025c0176
    fb58:	01760086 	.word	0x01760086
    fb5c:	01760176 	.word	0x01760176
    fb60:	008602cd 	.word	0x008602cd
    fb64:	0176007f 	.word	0x0176007f
    fb68:	017602c0 	.word	0x017602c0
    fb6c:	00ea02fd 	.word	0x00ea02fd
    fb70:	007f02ed 	.word	0x007f02ed
    fb74:	02330176 	.word	0x02330176
    fb78:	0569007c 	.word	0x0569007c
    fb7c:	01760176 	.word	0x01760176
    fb80:	0176056b 	.word	0x0176056b
    fb84:	007c      	.short	0x007c
    fb86:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fb8a:	2200      	movs	r2, #0
    fb8c:	f818 1b01 	ldrb.w	r1, [r8], #1
    fb90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    fb94:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    fb98:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    fb9c:	2b09      	cmp	r3, #9
    fb9e:	d9f5      	bls.n	fb8c <_vfiprintf_r+0x1b4>
    fba0:	9206      	str	r2, [sp, #24]
    fba2:	e78e      	b.n	fac2 <_vfiprintf_r+0xea>
    fba4:	4658      	mov	r0, fp
    fba6:	f7fe fe1b 	bl	e7e0 <_localeconv_r>
    fbaa:	6843      	ldr	r3, [r0, #4]
    fbac:	930d      	str	r3, [sp, #52]	; 0x34
    fbae:	4618      	mov	r0, r3
    fbb0:	f7fc f966 	bl	be80 <strlen>
    fbb4:	900e      	str	r0, [sp, #56]	; 0x38
    fbb6:	4605      	mov	r5, r0
    fbb8:	4658      	mov	r0, fp
    fbba:	f7fe fe11 	bl	e7e0 <_localeconv_r>
    fbbe:	6883      	ldr	r3, [r0, #8]
    fbc0:	930b      	str	r3, [sp, #44]	; 0x2c
    fbc2:	2d00      	cmp	r5, #0
    fbc4:	f040 84d6 	bne.w	10574 <_vfiprintf_r+0xb9c>
    fbc8:	f898 1000 	ldrb.w	r1, [r8]
    fbcc:	e777      	b.n	fabe <_vfiprintf_r+0xe6>
    fbce:	f898 1000 	ldrb.w	r1, [r8]
    fbd2:	f046 0620 	orr.w	r6, r6, #32
    fbd6:	e772      	b.n	fabe <_vfiprintf_r+0xe6>
    fbd8:	f046 0610 	orr.w	r6, r6, #16
    fbdc:	06b4      	lsls	r4, r6, #26
    fbde:	f140 818e 	bpl.w	fefe <_vfiprintf_r+0x526>
    fbe2:	9b07      	ldr	r3, [sp, #28]
    fbe4:	3307      	adds	r3, #7
    fbe6:	f023 0307 	bic.w	r3, r3, #7
    fbea:	461a      	mov	r2, r3
    fbec:	6859      	ldr	r1, [r3, #4]
    fbee:	f852 3b08 	ldr.w	r3, [r2], #8
    fbf2:	9207      	str	r2, [sp, #28]
    fbf4:	460a      	mov	r2, r1
    fbf6:	2900      	cmp	r1, #0
    fbf8:	f2c0 8470 	blt.w	104dc <_vfiprintf_r+0xb04>
    fbfc:	1c79      	adds	r1, r7, #1
    fbfe:	f000 85a2 	beq.w	10746 <_vfiprintf_r+0xd6e>
    fc02:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    fc06:	9103      	str	r1, [sp, #12]
    fc08:	ea53 0102 	orrs.w	r1, r3, r2
    fc0c:	f000 843f 	beq.w	1048e <_vfiprintf_r+0xab6>
    fc10:	2b0a      	cmp	r3, #10
    fc12:	f172 0100 	sbcs.w	r1, r2, #0
    fc16:	f080 8541 	bcs.w	1069c <_vfiprintf_r+0xcc4>
    fc1a:	3330      	adds	r3, #48	; 0x30
    fc1c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    fc20:	9e03      	ldr	r6, [sp, #12]
    fc22:	2301      	movs	r3, #1
    fc24:	9304      	str	r3, [sp, #16]
    fc26:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    fc2a:	9b04      	ldr	r3, [sp, #16]
    fc2c:	42bb      	cmp	r3, r7
    fc2e:	bfb8      	it	lt
    fc30:	463b      	movlt	r3, r7
    fc32:	9303      	str	r3, [sp, #12]
    fc34:	2300      	movs	r3, #0
    fc36:	9308      	str	r3, [sp, #32]
    fc38:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	f000 80cb 	beq.w	fdd8 <_vfiprintf_r+0x400>
    fc42:	9b03      	ldr	r3, [sp, #12]
    fc44:	3301      	adds	r3, #1
    fc46:	9303      	str	r3, [sp, #12]
    fc48:	e0c6      	b.n	fdd8 <_vfiprintf_r+0x400>
    fc4a:	ee18 1a10 	vmov	r1, s16
    fc4e:	4658      	mov	r0, fp
    fc50:	ee18 5a10 	vmov	r5, s16
    fc54:	f001 f840 	bl	10cd8 <__swsetup_r>
    fc58:	2800      	cmp	r0, #0
    fc5a:	f040 8652 	bne.w	10902 <_vfiprintf_r+0xf2a>
    fc5e:	89aa      	ldrh	r2, [r5, #12]
    fc60:	f002 031a 	and.w	r3, r2, #26
    fc64:	2b0a      	cmp	r3, #10
    fc66:	f47f aef6 	bne.w	fa56 <_vfiprintf_r+0x7e>
    fc6a:	ee18 1a10 	vmov	r1, s16
    fc6e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    fc72:	2b00      	cmp	r3, #0
    fc74:	f6ff aeef 	blt.w	fa56 <_vfiprintf_r+0x7e>
    fc78:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    fc7a:	07db      	lsls	r3, r3, #31
    fc7c:	d402      	bmi.n	fc84 <_vfiprintf_r+0x2ac>
    fc7e:	0597      	lsls	r7, r2, #22
    fc80:	f140 8612 	bpl.w	108a8 <_vfiprintf_r+0xed0>
    fc84:	ee18 1a10 	vmov	r1, s16
    fc88:	4623      	mov	r3, r4
    fc8a:	4632      	mov	r2, r6
    fc8c:	4658      	mov	r0, fp
    fc8e:	f000 fe69 	bl	10964 <__sbprintf>
    fc92:	9005      	str	r0, [sp, #20]
    fc94:	9805      	ldr	r0, [sp, #20]
    fc96:	b045      	add	sp, #276	; 0x114
    fc98:	ecbd 8b02 	vpop	{d8}
    fc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fca0:	f046 0610 	orr.w	r6, r6, #16
    fca4:	f016 0220 	ands.w	r2, r6, #32
    fca8:	f000 8136 	beq.w	ff18 <_vfiprintf_r+0x540>
    fcac:	9b07      	ldr	r3, [sp, #28]
    fcae:	3307      	adds	r3, #7
    fcb0:	f023 0307 	bic.w	r3, r3, #7
    fcb4:	4619      	mov	r1, r3
    fcb6:	685a      	ldr	r2, [r3, #4]
    fcb8:	f851 3b08 	ldr.w	r3, [r1], #8
    fcbc:	9107      	str	r1, [sp, #28]
    fcbe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    fcc2:	9103      	str	r1, [sp, #12]
    fcc4:	2100      	movs	r1, #0
    fcc6:	2000      	movs	r0, #0
    fcc8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    fccc:	1c78      	adds	r0, r7, #1
    fcce:	f000 8210 	beq.w	100f2 <_vfiprintf_r+0x71a>
    fcd2:	9803      	ldr	r0, [sp, #12]
    fcd4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    fcd8:	ea53 0002 	orrs.w	r0, r3, r2
    fcdc:	f040 8208 	bne.w	100f0 <_vfiprintf_r+0x718>
    fce0:	2f00      	cmp	r7, #0
    fce2:	f040 8538 	bne.w	10756 <_vfiprintf_r+0xd7e>
    fce6:	2900      	cmp	r1, #0
    fce8:	f040 83d5 	bne.w	10496 <_vfiprintf_r+0xabe>
    fcec:	9b03      	ldr	r3, [sp, #12]
    fcee:	f013 0301 	ands.w	r3, r3, #1
    fcf2:	9304      	str	r3, [sp, #16]
    fcf4:	f000 8411 	beq.w	1051a <_vfiprintf_r+0xb42>
    fcf8:	2330      	movs	r3, #48	; 0x30
    fcfa:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    fcfe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    fd02:	e792      	b.n	fc2a <_vfiprintf_r+0x252>
    fd04:	2208      	movs	r2, #8
    fd06:	2100      	movs	r1, #0
    fd08:	4650      	mov	r0, sl
    fd0a:	f7fb fd53 	bl	b7b4 <memset>
    fd0e:	2301      	movs	r3, #1
    fd10:	441c      	add	r4, r3
    fd12:	e6ad      	b.n	fa70 <_vfiprintf_r+0x98>
    fd14:	2000439c 	.word	0x2000439c
    fd18:	ebb4 0608 	subs.w	r6, r4, r8
    fd1c:	4605      	mov	r5, r0
    fd1e:	d01b      	beq.n	fd58 <_vfiprintf_r+0x380>
    fd20:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fd22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    fd24:	3301      	adds	r3, #1
    fd26:	4432      	add	r2, r6
    fd28:	2b07      	cmp	r3, #7
    fd2a:	e9c9 8600 	strd	r8, r6, [r9]
    fd2e:	921a      	str	r2, [sp, #104]	; 0x68
    fd30:	9319      	str	r3, [sp, #100]	; 0x64
    fd32:	dd1c      	ble.n	fd6e <_vfiprintf_r+0x396>
    fd34:	2a00      	cmp	r2, #0
    fd36:	f000 83a6 	beq.w	10486 <_vfiprintf_r+0xaae>
    fd3a:	ee18 1a10 	vmov	r1, s16
    fd3e:	aa18      	add	r2, sp, #96	; 0x60
    fd40:	4658      	mov	r0, fp
    fd42:	f7ff fe0d 	bl	f960 <__sprint_r.part.0>
    fd46:	bb20      	cbnz	r0, fd92 <_vfiprintf_r+0x3ba>
    fd48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fd4c:	9b05      	ldr	r3, [sp, #20]
    fd4e:	4433      	add	r3, r6
    fd50:	9305      	str	r3, [sp, #20]
    fd52:	2d00      	cmp	r5, #0
    fd54:	f47f aea8 	bne.w	faa8 <_vfiprintf_r+0xd0>
    fd58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fd5a:	2b00      	cmp	r3, #0
    fd5c:	f040 85c1 	bne.w	108e2 <_vfiprintf_r+0xf0a>
    fd60:	ee18 3a10 	vmov	r3, s16
    fd64:	2200      	movs	r2, #0
    fd66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    fd6a:	9219      	str	r2, [sp, #100]	; 0x64
    fd6c:	e015      	b.n	fd9a <_vfiprintf_r+0x3c2>
    fd6e:	f109 0908 	add.w	r9, r9, #8
    fd72:	e7eb      	b.n	fd4c <_vfiprintf_r+0x374>
    fd74:	ee18 1a10 	vmov	r1, s16
    fd78:	aa18      	add	r2, sp, #96	; 0x60
    fd7a:	4658      	mov	r0, fp
    fd7c:	f7ff fdf0 	bl	f960 <__sprint_r.part.0>
    fd80:	2800      	cmp	r0, #0
    fd82:	f000 80a6 	beq.w	fed2 <_vfiprintf_r+0x4fa>
    fd86:	9b08      	ldr	r3, [sp, #32]
    fd88:	b11b      	cbz	r3, fd92 <_vfiprintf_r+0x3ba>
    fd8a:	9908      	ldr	r1, [sp, #32]
    fd8c:	4658      	mov	r0, fp
    fd8e:	f7fc f979 	bl	c084 <_free_r>
    fd92:	ee18 3a10 	vmov	r3, s16
    fd96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    fd9a:	ee18 2a10 	vmov	r2, s16
    fd9e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    fda0:	f012 0f01 	tst.w	r2, #1
    fda4:	b29a      	uxth	r2, r3
    fda6:	f000 80a0 	beq.w	feea <_vfiprintf_r+0x512>
    fdaa:	0650      	lsls	r0, r2, #25
    fdac:	f100 85b2 	bmi.w	10914 <_vfiprintf_r+0xf3c>
    fdb0:	9805      	ldr	r0, [sp, #20]
    fdb2:	b045      	add	sp, #276	; 0x114
    fdb4:	ecbd 8b02 	vpop	{d8}
    fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdbc:	2900      	cmp	r1, #0
    fdbe:	d0cb      	beq.n	fd58 <_vfiprintf_r+0x380>
    fdc0:	2300      	movs	r3, #0
    fdc2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fdc6:	2301      	movs	r3, #1
    fdc8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    fdcc:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    fdd0:	ac2b      	add	r4, sp, #172	; 0xac
    fdd2:	2300      	movs	r3, #0
    fdd4:	9308      	str	r3, [sp, #32]
    fdd6:	461f      	mov	r7, r3
    fdd8:	f016 0302 	ands.w	r3, r6, #2
    fddc:	9309      	str	r3, [sp, #36]	; 0x24
    fdde:	d002      	beq.n	fde6 <_vfiprintf_r+0x40e>
    fde0:	9b03      	ldr	r3, [sp, #12]
    fde2:	3302      	adds	r3, #2
    fde4:	9303      	str	r3, [sp, #12]
    fde6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    fdea:	930a      	str	r3, [sp, #40]	; 0x28
    fdec:	d105      	bne.n	fdfa <_vfiprintf_r+0x422>
    fdee:	9b06      	ldr	r3, [sp, #24]
    fdf0:	9a03      	ldr	r2, [sp, #12]
    fdf2:	1a9d      	subs	r5, r3, r2
    fdf4:	2d00      	cmp	r5, #0
    fdf6:	f300 827b 	bgt.w	102f0 <_vfiprintf_r+0x918>
    fdfa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fdfe:	1c41      	adds	r1, r0, #1
    fe00:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    fe04:	b182      	cbz	r2, fe28 <_vfiprintf_r+0x450>
    fe06:	2201      	movs	r2, #1
    fe08:	3301      	adds	r3, #1
    fe0a:	f8c9 2004 	str.w	r2, [r9, #4]
    fe0e:	2907      	cmp	r1, #7
    fe10:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    fe14:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fe18:	f8c9 2000 	str.w	r2, [r9]
    fe1c:	f300 824a 	bgt.w	102b4 <_vfiprintf_r+0x8dc>
    fe20:	4608      	mov	r0, r1
    fe22:	f109 0908 	add.w	r9, r9, #8
    fe26:	3101      	adds	r1, #1
    fe28:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fe2a:	b1e2      	cbz	r2, fe66 <_vfiprintf_r+0x48e>
    fe2c:	aa11      	add	r2, sp, #68	; 0x44
    fe2e:	3302      	adds	r3, #2
    fe30:	f8c9 2000 	str.w	r2, [r9]
    fe34:	2907      	cmp	r1, #7
    fe36:	f04f 0202 	mov.w	r2, #2
    fe3a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fe3e:	f8c9 2004 	str.w	r2, [r9, #4]
    fe42:	f340 8250 	ble.w	102e6 <_vfiprintf_r+0x90e>
    fe46:	2b00      	cmp	r3, #0
    fe48:	f000 8343 	beq.w	104d2 <_vfiprintf_r+0xafa>
    fe4c:	ee18 1a10 	vmov	r1, s16
    fe50:	aa18      	add	r2, sp, #96	; 0x60
    fe52:	4658      	mov	r0, fp
    fe54:	f7ff fd84 	bl	f960 <__sprint_r.part.0>
    fe58:	2800      	cmp	r0, #0
    fe5a:	d194      	bne.n	fd86 <_vfiprintf_r+0x3ae>
    fe5c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    fe60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fe64:	1c41      	adds	r1, r0, #1
    fe66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe68:	2a80      	cmp	r2, #128	; 0x80
    fe6a:	f000 8184 	beq.w	10176 <_vfiprintf_r+0x79e>
    fe6e:	9a04      	ldr	r2, [sp, #16]
    fe70:	1abd      	subs	r5, r7, r2
    fe72:	2d00      	cmp	r5, #0
    fe74:	f300 81d7 	bgt.w	10226 <_vfiprintf_r+0x84e>
    fe78:	9a04      	ldr	r2, [sp, #16]
    fe7a:	f8c9 4000 	str.w	r4, [r9]
    fe7e:	4413      	add	r3, r2
    fe80:	2907      	cmp	r1, #7
    fe82:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    fe86:	f8c9 2004 	str.w	r2, [r9, #4]
    fe8a:	f340 816e 	ble.w	1016a <_vfiprintf_r+0x792>
    fe8e:	2b00      	cmp	r3, #0
    fe90:	f000 8275 	beq.w	1037e <_vfiprintf_r+0x9a6>
    fe94:	ee18 1a10 	vmov	r1, s16
    fe98:	aa18      	add	r2, sp, #96	; 0x60
    fe9a:	4658      	mov	r0, fp
    fe9c:	f7ff fd60 	bl	f960 <__sprint_r.part.0>
    fea0:	2800      	cmp	r0, #0
    fea2:	f47f af70 	bne.w	fd86 <_vfiprintf_r+0x3ae>
    fea6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fea8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    feac:	0775      	lsls	r5, r6, #29
    feae:	d505      	bpl.n	febc <_vfiprintf_r+0x4e4>
    feb0:	9a06      	ldr	r2, [sp, #24]
    feb2:	9903      	ldr	r1, [sp, #12]
    feb4:	1a54      	subs	r4, r2, r1
    feb6:	2c00      	cmp	r4, #0
    feb8:	f300 826b 	bgt.w	10392 <_vfiprintf_r+0x9ba>
    febc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    fec0:	9803      	ldr	r0, [sp, #12]
    fec2:	4281      	cmp	r1, r0
    fec4:	bfac      	ite	ge
    fec6:	1852      	addge	r2, r2, r1
    fec8:	1812      	addlt	r2, r2, r0
    feca:	9205      	str	r2, [sp, #20]
    fecc:	2b00      	cmp	r3, #0
    fece:	f47f af51 	bne.w	fd74 <_vfiprintf_r+0x39c>
    fed2:	9908      	ldr	r1, [sp, #32]
    fed4:	2300      	movs	r3, #0
    fed6:	9319      	str	r3, [sp, #100]	; 0x64
    fed8:	2900      	cmp	r1, #0
    feda:	f000 8149 	beq.w	10170 <_vfiprintf_r+0x798>
    fede:	4658      	mov	r0, fp
    fee0:	f7fc f8d0 	bl	c084 <_free_r>
    fee4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    fee8:	e5c1      	b.n	fa6e <_vfiprintf_r+0x96>
    feea:	059c      	lsls	r4, r3, #22
    feec:	f53f af5d 	bmi.w	fdaa <_vfiprintf_r+0x3d2>
    fef0:	ee18 4a10 	vmov	r4, s16
    fef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fef6:	f7fb fde3 	bl	bac0 <__retarget_lock_release_recursive>
    fefa:	89a2      	ldrh	r2, [r4, #12]
    fefc:	e755      	b.n	fdaa <_vfiprintf_r+0x3d2>
    fefe:	06f0      	lsls	r0, r6, #27
    ff00:	9a07      	ldr	r2, [sp, #28]
    ff02:	f100 831f 	bmi.w	10544 <_vfiprintf_r+0xb6c>
    ff06:	0671      	lsls	r1, r6, #25
    ff08:	f140 8319 	bpl.w	1053e <_vfiprintf_r+0xb66>
    ff0c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    ff10:	9207      	str	r2, [sp, #28]
    ff12:	17da      	asrs	r2, r3, #31
    ff14:	4611      	mov	r1, r2
    ff16:	e66e      	b.n	fbf6 <_vfiprintf_r+0x21e>
    ff18:	f016 0310 	ands.w	r3, r6, #16
    ff1c:	9907      	ldr	r1, [sp, #28]
    ff1e:	f040 8309 	bne.w	10534 <_vfiprintf_r+0xb5c>
    ff22:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    ff26:	f000 8301 	beq.w	1052c <_vfiprintf_r+0xb54>
    ff2a:	461a      	mov	r2, r3
    ff2c:	f851 3b04 	ldr.w	r3, [r1], #4
    ff30:	9107      	str	r1, [sp, #28]
    ff32:	b29b      	uxth	r3, r3
    ff34:	e6c3      	b.n	fcbe <_vfiprintf_r+0x2e6>
    ff36:	9b07      	ldr	r3, [sp, #28]
    ff38:	461a      	mov	r2, r3
    ff3a:	2300      	movs	r3, #0
    ff3c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ff40:	4613      	mov	r3, r2
    ff42:	f853 4b04 	ldr.w	r4, [r3], #4
    ff46:	9303      	str	r3, [sp, #12]
    ff48:	2c00      	cmp	r4, #0
    ff4a:	f000 8412 	beq.w	10772 <_vfiprintf_r+0xd9a>
    ff4e:	2953      	cmp	r1, #83	; 0x53
    ff50:	f000 8365 	beq.w	1061e <_vfiprintf_r+0xc46>
    ff54:	f016 0510 	ands.w	r5, r6, #16
    ff58:	f040 8361 	bne.w	1061e <_vfiprintf_r+0xc46>
    ff5c:	1c7b      	adds	r3, r7, #1
    ff5e:	f000 84b3 	beq.w	108c8 <_vfiprintf_r+0xef0>
    ff62:	463a      	mov	r2, r7
    ff64:	4629      	mov	r1, r5
    ff66:	4620      	mov	r0, r4
    ff68:	f7fe fc42 	bl	e7f0 <memchr>
    ff6c:	9008      	str	r0, [sp, #32]
    ff6e:	2800      	cmp	r0, #0
    ff70:	f000 849f 	beq.w	108b2 <_vfiprintf_r+0xeda>
    ff74:	1b03      	subs	r3, r0, r4
    ff76:	9a03      	ldr	r2, [sp, #12]
    ff78:	9304      	str	r3, [sp, #16]
    ff7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ff7e:	462f      	mov	r7, r5
    ff80:	9207      	str	r2, [sp, #28]
    ff82:	9303      	str	r3, [sp, #12]
    ff84:	9508      	str	r5, [sp, #32]
    ff86:	e657      	b.n	fc38 <_vfiprintf_r+0x260>
    ff88:	2943      	cmp	r1, #67	; 0x43
    ff8a:	d002      	beq.n	ff92 <_vfiprintf_r+0x5ba>
    ff8c:	06f5      	lsls	r5, r6, #27
    ff8e:	f140 832d 	bpl.w	105ec <_vfiprintf_r+0xc14>
    ff92:	9d07      	ldr	r5, [sp, #28]
    ff94:	2208      	movs	r2, #8
    ff96:	2100      	movs	r1, #0
    ff98:	a816      	add	r0, sp, #88	; 0x58
    ff9a:	ac2b      	add	r4, sp, #172	; 0xac
    ff9c:	f7fb fc0a 	bl	b7b4 <memset>
    ffa0:	ab16      	add	r3, sp, #88	; 0x58
    ffa2:	f855 2b04 	ldr.w	r2, [r5], #4
    ffa6:	4621      	mov	r1, r4
    ffa8:	4658      	mov	r0, fp
    ffaa:	f7ff fc13 	bl	f7d4 <_wcrtomb_r>
    ffae:	4603      	mov	r3, r0
    ffb0:	3301      	adds	r3, #1
    ffb2:	9004      	str	r0, [sp, #16]
    ffb4:	f000 84b3 	beq.w	1091e <_vfiprintf_r+0xf46>
    ffb8:	9b04      	ldr	r3, [sp, #16]
    ffba:	9507      	str	r5, [sp, #28]
    ffbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ffc0:	9303      	str	r3, [sp, #12]
    ffc2:	2300      	movs	r3, #0
    ffc4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ffc8:	e703      	b.n	fdd2 <_vfiprintf_r+0x3fa>
    ffca:	9b07      	ldr	r3, [sp, #28]
    ffcc:	f853 2b04 	ldr.w	r2, [r3], #4
    ffd0:	9206      	str	r2, [sp, #24]
    ffd2:	2a00      	cmp	r2, #0
    ffd4:	f280 829c 	bge.w	10510 <_vfiprintf_r+0xb38>
    ffd8:	9a06      	ldr	r2, [sp, #24]
    ffda:	4252      	negs	r2, r2
    ffdc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    ffe0:	f898 1000 	ldrb.w	r1, [r8]
    ffe4:	f046 0604 	orr.w	r6, r6, #4
    ffe8:	e569      	b.n	fabe <_vfiprintf_r+0xe6>
    ffea:	f898 1000 	ldrb.w	r1, [r8]
    ffee:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    fff2:	e564      	b.n	fabe <_vfiprintf_r+0xe6>
    fff4:	f898 1000 	ldrb.w	r1, [r8]
    fff8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    fffc:	e55f      	b.n	fabe <_vfiprintf_r+0xe6>
    fffe:	4642      	mov	r2, r8
   10000:	f812 1b01 	ldrb.w	r1, [r2], #1
   10004:	292a      	cmp	r1, #42	; 0x2a
   10006:	f000 8496 	beq.w	10936 <_vfiprintf_r+0xf5e>
   1000a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1000e:	2b09      	cmp	r3, #9
   10010:	4690      	mov	r8, r2
   10012:	f04f 0700 	mov.w	r7, #0
   10016:	f63f ad54 	bhi.w	fac2 <_vfiprintf_r+0xea>
   1001a:	f818 1b01 	ldrb.w	r1, [r8], #1
   1001e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   10022:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   10026:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1002a:	2b09      	cmp	r3, #9
   1002c:	d9f5      	bls.n	1001a <_vfiprintf_r+0x642>
   1002e:	e548      	b.n	fac2 <_vfiprintf_r+0xea>
   10030:	f898 1000 	ldrb.w	r1, [r8]
   10034:	f046 0601 	orr.w	r6, r6, #1
   10038:	e541      	b.n	fabe <_vfiprintf_r+0xe6>
   1003a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1003e:	2b00      	cmp	r3, #0
   10040:	f47f adc2 	bne.w	fbc8 <_vfiprintf_r+0x1f0>
   10044:	2320      	movs	r3, #32
   10046:	f898 1000 	ldrb.w	r1, [r8]
   1004a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1004e:	e536      	b.n	fabe <_vfiprintf_r+0xe6>
   10050:	f898 1000 	ldrb.w	r1, [r8]
   10054:	296c      	cmp	r1, #108	; 0x6c
   10056:	bf03      	ittte	eq
   10058:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1005c:	f046 0620 	orreq.w	r6, r6, #32
   10060:	f108 0801 	addeq.w	r8, r8, #1
   10064:	f046 0610 	orrne.w	r6, r6, #16
   10068:	e529      	b.n	fabe <_vfiprintf_r+0xe6>
   1006a:	f898 1000 	ldrb.w	r1, [r8]
   1006e:	2968      	cmp	r1, #104	; 0x68
   10070:	bf03      	ittte	eq
   10072:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   10076:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   1007a:	f108 0801 	addeq.w	r8, r8, #1
   1007e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   10082:	e51c      	b.n	fabe <_vfiprintf_r+0xe6>
   10084:	f046 0310 	orr.w	r3, r6, #16
   10088:	9303      	str	r3, [sp, #12]
   1008a:	9b03      	ldr	r3, [sp, #12]
   1008c:	f013 0220 	ands.w	r2, r3, #32
   10090:	f000 8206 	beq.w	104a0 <_vfiprintf_r+0xac8>
   10094:	9b07      	ldr	r3, [sp, #28]
   10096:	3307      	adds	r3, #7
   10098:	f023 0307 	bic.w	r3, r3, #7
   1009c:	4619      	mov	r1, r3
   1009e:	685a      	ldr	r2, [r3, #4]
   100a0:	f851 3b08 	ldr.w	r3, [r1], #8
   100a4:	9107      	str	r1, [sp, #28]
   100a6:	2101      	movs	r1, #1
   100a8:	e60d      	b.n	fcc6 <_vfiprintf_r+0x2ee>
   100aa:	9a07      	ldr	r2, [sp, #28]
   100ac:	f046 0302 	orr.w	r3, r6, #2
   100b0:	9303      	str	r3, [sp, #12]
   100b2:	f852 3b04 	ldr.w	r3, [r2], #4
   100b6:	9207      	str	r2, [sp, #28]
   100b8:	f647 0230 	movw	r2, #30768	; 0x7830
   100bc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   100c0:	4ab8      	ldr	r2, [pc, #736]	; (103a4 <_vfiprintf_r+0x9cc>)
   100c2:	920c      	str	r2, [sp, #48]	; 0x30
   100c4:	2102      	movs	r1, #2
   100c6:	2200      	movs	r2, #0
   100c8:	e5fd      	b.n	fcc6 <_vfiprintf_r+0x2ee>
   100ca:	06b7      	lsls	r7, r6, #26
   100cc:	f100 8248 	bmi.w	10560 <_vfiprintf_r+0xb88>
   100d0:	06f5      	lsls	r5, r6, #27
   100d2:	f100 8346 	bmi.w	10762 <_vfiprintf_r+0xd8a>
   100d6:	0674      	lsls	r4, r6, #25
   100d8:	f100 83d5 	bmi.w	10886 <_vfiprintf_r+0xeae>
   100dc:	05b0      	lsls	r0, r6, #22
   100de:	f140 8340 	bpl.w	10762 <_vfiprintf_r+0xd8a>
   100e2:	9b07      	ldr	r3, [sp, #28]
   100e4:	9905      	ldr	r1, [sp, #20]
   100e6:	f853 2b04 	ldr.w	r2, [r3], #4
   100ea:	9307      	str	r3, [sp, #28]
   100ec:	7011      	strb	r1, [r2, #0]
   100ee:	e4be      	b.n	fa6e <_vfiprintf_r+0x96>
   100f0:	9603      	str	r6, [sp, #12]
   100f2:	2901      	cmp	r1, #1
   100f4:	f43f ad8c 	beq.w	fc10 <_vfiprintf_r+0x238>
   100f8:	2902      	cmp	r1, #2
   100fa:	ac44      	add	r4, sp, #272	; 0x110
   100fc:	d111      	bne.n	10122 <_vfiprintf_r+0x74a>
   100fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   10100:	f003 010f 	and.w	r1, r3, #15
   10104:	091b      	lsrs	r3, r3, #4
   10106:	5c41      	ldrb	r1, [r0, r1]
   10108:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1010c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   10110:	0912      	lsrs	r2, r2, #4
   10112:	ea53 0102 	orrs.w	r1, r3, r2
   10116:	d1f3      	bne.n	10100 <_vfiprintf_r+0x728>
   10118:	9e03      	ldr	r6, [sp, #12]
   1011a:	ab44      	add	r3, sp, #272	; 0x110
   1011c:	1b1b      	subs	r3, r3, r4
   1011e:	9304      	str	r3, [sp, #16]
   10120:	e583      	b.n	fc2a <_vfiprintf_r+0x252>
   10122:	f003 0107 	and.w	r1, r3, #7
   10126:	08db      	lsrs	r3, r3, #3
   10128:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1012c:	08d2      	lsrs	r2, r2, #3
   1012e:	3130      	adds	r1, #48	; 0x30
   10130:	ea53 0502 	orrs.w	r5, r3, r2
   10134:	4620      	mov	r0, r4
   10136:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1013a:	d1f2      	bne.n	10122 <_vfiprintf_r+0x74a>
   1013c:	9e03      	ldr	r6, [sp, #12]
   1013e:	07f3      	lsls	r3, r6, #31
   10140:	d5eb      	bpl.n	1011a <_vfiprintf_r+0x742>
   10142:	2930      	cmp	r1, #48	; 0x30
   10144:	d0e8      	beq.n	10118 <_vfiprintf_r+0x740>
   10146:	2330      	movs	r3, #48	; 0x30
   10148:	3802      	subs	r0, #2
   1014a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1014e:	ab44      	add	r3, sp, #272	; 0x110
   10150:	1a1b      	subs	r3, r3, r0
   10152:	9e03      	ldr	r6, [sp, #12]
   10154:	9304      	str	r3, [sp, #16]
   10156:	4604      	mov	r4, r0
   10158:	e567      	b.n	fc2a <_vfiprintf_r+0x252>
   1015a:	9b04      	ldr	r3, [sp, #16]
   1015c:	941b      	str	r4, [sp, #108]	; 0x6c
   1015e:	2201      	movs	r2, #1
   10160:	931c      	str	r3, [sp, #112]	; 0x70
   10162:	931a      	str	r3, [sp, #104]	; 0x68
   10164:	9219      	str	r2, [sp, #100]	; 0x64
   10166:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1016a:	f109 0908 	add.w	r9, r9, #8
   1016e:	e69d      	b.n	feac <_vfiprintf_r+0x4d4>
   10170:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10174:	e47b      	b.n	fa6e <_vfiprintf_r+0x96>
   10176:	9a06      	ldr	r2, [sp, #24]
   10178:	9d03      	ldr	r5, [sp, #12]
   1017a:	1b55      	subs	r5, r2, r5
   1017c:	2d00      	cmp	r5, #0
   1017e:	f77f ae76 	ble.w	fe6e <_vfiprintf_r+0x496>
   10182:	2d10      	cmp	r5, #16
   10184:	f340 83bb 	ble.w	108fe <_vfiprintf_r+0xf26>
   10188:	9409      	str	r4, [sp, #36]	; 0x24
   1018a:	ee18 4a10 	vmov	r4, s16
   1018e:	e007      	b.n	101a0 <_vfiprintf_r+0x7c8>
   10190:	f100 0c02 	add.w	ip, r0, #2
   10194:	f109 0908 	add.w	r9, r9, #8
   10198:	4610      	mov	r0, r2
   1019a:	3d10      	subs	r5, #16
   1019c:	2d10      	cmp	r5, #16
   1019e:	dd1e      	ble.n	101de <_vfiprintf_r+0x806>
   101a0:	4981      	ldr	r1, [pc, #516]	; (103a8 <_vfiprintf_r+0x9d0>)
   101a2:	f8c9 1000 	str.w	r1, [r9]
   101a6:	1c42      	adds	r2, r0, #1
   101a8:	3310      	adds	r3, #16
   101aa:	2110      	movs	r1, #16
   101ac:	2a07      	cmp	r2, #7
   101ae:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   101b2:	f8c9 1004 	str.w	r1, [r9, #4]
   101b6:	ddeb      	ble.n	10190 <_vfiprintf_r+0x7b8>
   101b8:	aa18      	add	r2, sp, #96	; 0x60
   101ba:	2b00      	cmp	r3, #0
   101bc:	d074      	beq.n	102a8 <_vfiprintf_r+0x8d0>
   101be:	4621      	mov	r1, r4
   101c0:	4658      	mov	r0, fp
   101c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   101c6:	f7ff fbcb 	bl	f960 <__sprint_r.part.0>
   101ca:	2800      	cmp	r0, #0
   101cc:	f47f addb 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   101d0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   101d4:	3d10      	subs	r5, #16
   101d6:	2d10      	cmp	r5, #16
   101d8:	f100 0c01 	add.w	ip, r0, #1
   101dc:	dce0      	bgt.n	101a0 <_vfiprintf_r+0x7c8>
   101de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   101e0:	4a71      	ldr	r2, [pc, #452]	; (103a8 <_vfiprintf_r+0x9d0>)
   101e2:	f8c9 5004 	str.w	r5, [r9, #4]
   101e6:	442b      	add	r3, r5
   101e8:	f1bc 0f07 	cmp.w	ip, #7
   101ec:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   101f0:	f8c9 2000 	str.w	r2, [r9]
   101f4:	f340 8194 	ble.w	10520 <_vfiprintf_r+0xb48>
   101f8:	2b00      	cmp	r3, #0
   101fa:	f000 831f 	beq.w	1083c <_vfiprintf_r+0xe64>
   101fe:	ee18 1a10 	vmov	r1, s16
   10202:	aa18      	add	r2, sp, #96	; 0x60
   10204:	4658      	mov	r0, fp
   10206:	f7ff fbab 	bl	f960 <__sprint_r.part.0>
   1020a:	2800      	cmp	r0, #0
   1020c:	f47f adbb 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   10210:	9a04      	ldr	r2, [sp, #16]
   10212:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10216:	1abd      	subs	r5, r7, r2
   10218:	2d00      	cmp	r5, #0
   1021a:	f100 0101 	add.w	r1, r0, #1
   1021e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10222:	f77f ae29 	ble.w	fe78 <_vfiprintf_r+0x4a0>
   10226:	2d10      	cmp	r5, #16
   10228:	dd29      	ble.n	1027e <_vfiprintf_r+0x8a6>
   1022a:	9409      	str	r4, [sp, #36]	; 0x24
   1022c:	2710      	movs	r7, #16
   1022e:	ee18 4a10 	vmov	r4, s16
   10232:	e007      	b.n	10244 <_vfiprintf_r+0x86c>
   10234:	f100 0c02 	add.w	ip, r0, #2
   10238:	f109 0908 	add.w	r9, r9, #8
   1023c:	4610      	mov	r0, r2
   1023e:	3d10      	subs	r5, #16
   10240:	2d10      	cmp	r5, #16
   10242:	dd1a      	ble.n	1027a <_vfiprintf_r+0x8a2>
   10244:	1c42      	adds	r2, r0, #1
   10246:	4958      	ldr	r1, [pc, #352]	; (103a8 <_vfiprintf_r+0x9d0>)
   10248:	3310      	adds	r3, #16
   1024a:	2a07      	cmp	r2, #7
   1024c:	e9c9 1700 	strd	r1, r7, [r9]
   10250:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10254:	ddee      	ble.n	10234 <_vfiprintf_r+0x85c>
   10256:	aa18      	add	r2, sp, #96	; 0x60
   10258:	b303      	cbz	r3, 1029c <_vfiprintf_r+0x8c4>
   1025a:	4621      	mov	r1, r4
   1025c:	4658      	mov	r0, fp
   1025e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10262:	f7ff fb7d 	bl	f960 <__sprint_r.part.0>
   10266:	2800      	cmp	r0, #0
   10268:	f47f ad8d 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   1026c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10270:	3d10      	subs	r5, #16
   10272:	2d10      	cmp	r5, #16
   10274:	f100 0c01 	add.w	ip, r0, #1
   10278:	dce4      	bgt.n	10244 <_vfiprintf_r+0x86c>
   1027a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1027c:	4661      	mov	r1, ip
   1027e:	4a4a      	ldr	r2, [pc, #296]	; (103a8 <_vfiprintf_r+0x9d0>)
   10280:	f8c9 5004 	str.w	r5, [r9, #4]
   10284:	442b      	add	r3, r5
   10286:	2907      	cmp	r1, #7
   10288:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1028c:	f8c9 2000 	str.w	r2, [r9]
   10290:	f300 80e7 	bgt.w	10462 <_vfiprintf_r+0xa8a>
   10294:	f109 0908 	add.w	r9, r9, #8
   10298:	3101      	adds	r1, #1
   1029a:	e5ed      	b.n	fe78 <_vfiprintf_r+0x4a0>
   1029c:	f04f 0c01 	mov.w	ip, #1
   102a0:	4618      	mov	r0, r3
   102a2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102a6:	e7ca      	b.n	1023e <_vfiprintf_r+0x866>
   102a8:	f04f 0c01 	mov.w	ip, #1
   102ac:	4618      	mov	r0, r3
   102ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102b2:	e772      	b.n	1019a <_vfiprintf_r+0x7c2>
   102b4:	2b00      	cmp	r3, #0
   102b6:	f000 8104 	beq.w	104c2 <_vfiprintf_r+0xaea>
   102ba:	ee18 1a10 	vmov	r1, s16
   102be:	aa18      	add	r2, sp, #96	; 0x60
   102c0:	4658      	mov	r0, fp
   102c2:	f7ff fb4d 	bl	f960 <__sprint_r.part.0>
   102c6:	2800      	cmp	r0, #0
   102c8:	f47f ad5d 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   102cc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   102d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102d4:	1c41      	adds	r1, r0, #1
   102d6:	e5a7      	b.n	fe28 <_vfiprintf_r+0x450>
   102d8:	2302      	movs	r3, #2
   102da:	aa11      	add	r2, sp, #68	; 0x44
   102dc:	931c      	str	r3, [sp, #112]	; 0x70
   102de:	921b      	str	r2, [sp, #108]	; 0x6c
   102e0:	2101      	movs	r1, #1
   102e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102e6:	4608      	mov	r0, r1
   102e8:	f109 0908 	add.w	r9, r9, #8
   102ec:	1c41      	adds	r1, r0, #1
   102ee:	e5ba      	b.n	fe66 <_vfiprintf_r+0x48e>
   102f0:	2d10      	cmp	r5, #16
   102f2:	f340 82e5 	ble.w	108c0 <_vfiprintf_r+0xee8>
   102f6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   102fa:	940f      	str	r4, [sp, #60]	; 0x3c
   102fc:	4608      	mov	r0, r1
   102fe:	ee18 4a10 	vmov	r4, s16
   10302:	e007      	b.n	10314 <_vfiprintf_r+0x93c>
   10304:	f100 0c02 	add.w	ip, r0, #2
   10308:	f109 0908 	add.w	r9, r9, #8
   1030c:	4610      	mov	r0, r2
   1030e:	3d10      	subs	r5, #16
   10310:	2d10      	cmp	r5, #16
   10312:	dd1d      	ble.n	10350 <_vfiprintf_r+0x978>
   10314:	4925      	ldr	r1, [pc, #148]	; (103ac <_vfiprintf_r+0x9d4>)
   10316:	f8c9 1000 	str.w	r1, [r9]
   1031a:	1c42      	adds	r2, r0, #1
   1031c:	3310      	adds	r3, #16
   1031e:	2110      	movs	r1, #16
   10320:	2a07      	cmp	r2, #7
   10322:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10326:	f8c9 1004 	str.w	r1, [r9, #4]
   1032a:	ddeb      	ble.n	10304 <_vfiprintf_r+0x92c>
   1032c:	aa18      	add	r2, sp, #96	; 0x60
   1032e:	b303      	cbz	r3, 10372 <_vfiprintf_r+0x99a>
   10330:	4621      	mov	r1, r4
   10332:	4658      	mov	r0, fp
   10334:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10338:	f7ff fb12 	bl	f960 <__sprint_r.part.0>
   1033c:	2800      	cmp	r0, #0
   1033e:	f47f ad22 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   10342:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10346:	3d10      	subs	r5, #16
   10348:	2d10      	cmp	r5, #16
   1034a:	f100 0c01 	add.w	ip, r0, #1
   1034e:	dce1      	bgt.n	10314 <_vfiprintf_r+0x93c>
   10350:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10352:	4660      	mov	r0, ip
   10354:	4a15      	ldr	r2, [pc, #84]	; (103ac <_vfiprintf_r+0x9d4>)
   10356:	f8c9 5004 	str.w	r5, [r9, #4]
   1035a:	442b      	add	r3, r5
   1035c:	2807      	cmp	r0, #7
   1035e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10362:	f8c9 2000 	str.w	r2, [r9]
   10366:	f300 80c1 	bgt.w	104ec <_vfiprintf_r+0xb14>
   1036a:	f109 0908 	add.w	r9, r9, #8
   1036e:	1c41      	adds	r1, r0, #1
   10370:	e546      	b.n	fe00 <_vfiprintf_r+0x428>
   10372:	4618      	mov	r0, r3
   10374:	f04f 0c01 	mov.w	ip, #1
   10378:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1037c:	e7c7      	b.n	1030e <_vfiprintf_r+0x936>
   1037e:	0776      	lsls	r6, r6, #29
   10380:	9319      	str	r3, [sp, #100]	; 0x64
   10382:	d553      	bpl.n	1042c <_vfiprintf_r+0xa54>
   10384:	9a06      	ldr	r2, [sp, #24]
   10386:	9903      	ldr	r1, [sp, #12]
   10388:	1a54      	subs	r4, r2, r1
   1038a:	2c00      	cmp	r4, #0
   1038c:	dd4e      	ble.n	1042c <_vfiprintf_r+0xa54>
   1038e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10392:	2c10      	cmp	r4, #16
   10394:	f340 82b0 	ble.w	108f8 <_vfiprintf_r+0xf20>
   10398:	9919      	ldr	r1, [sp, #100]	; 0x64
   1039a:	ee18 6a10 	vmov	r6, s16
   1039e:	2510      	movs	r5, #16
   103a0:	e00d      	b.n	103be <_vfiprintf_r+0x9e6>
   103a2:	bf00      	nop
   103a4:	20000cb8 	.word	0x20000cb8
   103a8:	20001240 	.word	0x20001240
   103ac:	20000cfc 	.word	0x20000cfc
   103b0:	1c88      	adds	r0, r1, #2
   103b2:	f109 0908 	add.w	r9, r9, #8
   103b6:	4611      	mov	r1, r2
   103b8:	3c10      	subs	r4, #16
   103ba:	2c10      	cmp	r4, #16
   103bc:	dd1a      	ble.n	103f4 <_vfiprintf_r+0xa1c>
   103be:	1c4a      	adds	r2, r1, #1
   103c0:	48b3      	ldr	r0, [pc, #716]	; (10690 <_vfiprintf_r+0xcb8>)
   103c2:	3310      	adds	r3, #16
   103c4:	2a07      	cmp	r2, #7
   103c6:	e9c9 0500 	strd	r0, r5, [r9]
   103ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   103ce:	ddef      	ble.n	103b0 <_vfiprintf_r+0x9d8>
   103d0:	aa18      	add	r2, sp, #96	; 0x60
   103d2:	b333      	cbz	r3, 10422 <_vfiprintf_r+0xa4a>
   103d4:	4631      	mov	r1, r6
   103d6:	4658      	mov	r0, fp
   103d8:	f7ff fac2 	bl	f960 <__sprint_r.part.0>
   103dc:	2800      	cmp	r0, #0
   103de:	f47f acd2 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   103e2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   103e6:	3c10      	subs	r4, #16
   103e8:	2c10      	cmp	r4, #16
   103ea:	f101 0001 	add.w	r0, r1, #1
   103ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   103f2:	dce4      	bgt.n	103be <_vfiprintf_r+0x9e6>
   103f4:	4aa6      	ldr	r2, [pc, #664]	; (10690 <_vfiprintf_r+0xcb8>)
   103f6:	f8c9 4004 	str.w	r4, [r9, #4]
   103fa:	4423      	add	r3, r4
   103fc:	2807      	cmp	r0, #7
   103fe:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10402:	f8c9 2000 	str.w	r2, [r9]
   10406:	f77f ad59 	ble.w	febc <_vfiprintf_r+0x4e4>
   1040a:	b17b      	cbz	r3, 1042c <_vfiprintf_r+0xa54>
   1040c:	ee18 1a10 	vmov	r1, s16
   10410:	aa18      	add	r2, sp, #96	; 0x60
   10412:	4658      	mov	r0, fp
   10414:	f7ff faa4 	bl	f960 <__sprint_r.part.0>
   10418:	2800      	cmp	r0, #0
   1041a:	f47f acb4 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   1041e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10420:	e54c      	b.n	febc <_vfiprintf_r+0x4e4>
   10422:	2001      	movs	r0, #1
   10424:	4619      	mov	r1, r3
   10426:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1042a:	e7c5      	b.n	103b8 <_vfiprintf_r+0x9e0>
   1042c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10430:	9903      	ldr	r1, [sp, #12]
   10432:	428a      	cmp	r2, r1
   10434:	bfac      	ite	ge
   10436:	189b      	addge	r3, r3, r2
   10438:	185b      	addlt	r3, r3, r1
   1043a:	9305      	str	r3, [sp, #20]
   1043c:	e549      	b.n	fed2 <_vfiprintf_r+0x4fa>
   1043e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10442:	058f      	lsls	r7, r1, #22
   10444:	ee18 3a10 	vmov	r3, s16
   10448:	b28a      	uxth	r2, r1
   1044a:	f53f aae8 	bmi.w	fa1e <_vfiprintf_r+0x46>
   1044e:	ee18 5a10 	vmov	r5, s16
   10452:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10454:	f7fb fb32 	bl	babc <__retarget_lock_acquire_recursive>
   10458:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1045c:	b28a      	uxth	r2, r1
   1045e:	f7ff bade 	b.w	fa1e <_vfiprintf_r+0x46>
   10462:	2b00      	cmp	r3, #0
   10464:	f43f ae79 	beq.w	1015a <_vfiprintf_r+0x782>
   10468:	ee18 1a10 	vmov	r1, s16
   1046c:	aa18      	add	r2, sp, #96	; 0x60
   1046e:	4658      	mov	r0, fp
   10470:	f7ff fa76 	bl	f960 <__sprint_r.part.0>
   10474:	2800      	cmp	r0, #0
   10476:	f47f ac86 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   1047a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1047c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1047e:	3101      	adds	r1, #1
   10480:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10484:	e4f8      	b.n	fe78 <_vfiprintf_r+0x4a0>
   10486:	9219      	str	r2, [sp, #100]	; 0x64
   10488:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1048c:	e45e      	b.n	fd4c <_vfiprintf_r+0x374>
   1048e:	2f00      	cmp	r7, #0
   10490:	f47f abc3 	bne.w	fc1a <_vfiprintf_r+0x242>
   10494:	9e03      	ldr	r6, [sp, #12]
   10496:	2700      	movs	r7, #0
   10498:	9704      	str	r7, [sp, #16]
   1049a:	ac44      	add	r4, sp, #272	; 0x110
   1049c:	f7ff bbc5 	b.w	fc2a <_vfiprintf_r+0x252>
   104a0:	9b03      	ldr	r3, [sp, #12]
   104a2:	f013 0310 	ands.w	r3, r3, #16
   104a6:	d154      	bne.n	10552 <_vfiprintf_r+0xb7a>
   104a8:	9a03      	ldr	r2, [sp, #12]
   104aa:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   104ae:	f000 816b 	beq.w	10788 <_vfiprintf_r+0xdb0>
   104b2:	9907      	ldr	r1, [sp, #28]
   104b4:	461a      	mov	r2, r3
   104b6:	f851 3b04 	ldr.w	r3, [r1], #4
   104ba:	9107      	str	r1, [sp, #28]
   104bc:	b29b      	uxth	r3, r3
   104be:	2101      	movs	r1, #1
   104c0:	e401      	b.n	fcc6 <_vfiprintf_r+0x2ee>
   104c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   104c4:	2a00      	cmp	r2, #0
   104c6:	d164      	bne.n	10592 <_vfiprintf_r+0xbba>
   104c8:	4618      	mov	r0, r3
   104ca:	2101      	movs	r1, #1
   104cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   104d0:	e4c9      	b.n	fe66 <_vfiprintf_r+0x48e>
   104d2:	2101      	movs	r1, #1
   104d4:	4618      	mov	r0, r3
   104d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   104da:	e4c4      	b.n	fe66 <_vfiprintf_r+0x48e>
   104dc:	425b      	negs	r3, r3
   104de:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   104e2:	9603      	str	r6, [sp, #12]
   104e4:	202d      	movs	r0, #45	; 0x2d
   104e6:	2101      	movs	r1, #1
   104e8:	f7ff bbee 	b.w	fcc8 <_vfiprintf_r+0x2f0>
   104ec:	2b00      	cmp	r3, #0
   104ee:	f000 8088 	beq.w	10602 <_vfiprintf_r+0xc2a>
   104f2:	ee18 1a10 	vmov	r1, s16
   104f6:	aa18      	add	r2, sp, #96	; 0x60
   104f8:	4658      	mov	r0, fp
   104fa:	f7ff fa31 	bl	f960 <__sprint_r.part.0>
   104fe:	2800      	cmp	r0, #0
   10500:	f47f ac41 	bne.w	fd86 <_vfiprintf_r+0x3ae>
   10504:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10508:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1050c:	1c41      	adds	r1, r0, #1
   1050e:	e477      	b.n	fe00 <_vfiprintf_r+0x428>
   10510:	f898 1000 	ldrb.w	r1, [r8]
   10514:	9307      	str	r3, [sp, #28]
   10516:	f7ff bad2 	b.w	fabe <_vfiprintf_r+0xe6>
   1051a:	ac44      	add	r4, sp, #272	; 0x110
   1051c:	f7ff bb85 	b.w	fc2a <_vfiprintf_r+0x252>
   10520:	f109 0908 	add.w	r9, r9, #8
   10524:	f10c 0101 	add.w	r1, ip, #1
   10528:	4660      	mov	r0, ip
   1052a:	e4a0      	b.n	fe6e <_vfiprintf_r+0x496>
   1052c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10530:	f040 8197 	bne.w	10862 <_vfiprintf_r+0xe8a>
   10534:	f851 3b04 	ldr.w	r3, [r1], #4
   10538:	9107      	str	r1, [sp, #28]
   1053a:	f7ff bbc0 	b.w	fcbe <_vfiprintf_r+0x2e6>
   1053e:	05b3      	lsls	r3, r6, #22
   10540:	f100 8188 	bmi.w	10854 <_vfiprintf_r+0xe7c>
   10544:	f852 3b04 	ldr.w	r3, [r2], #4
   10548:	9207      	str	r2, [sp, #28]
   1054a:	17da      	asrs	r2, r3, #31
   1054c:	4611      	mov	r1, r2
   1054e:	f7ff bb52 	b.w	fbf6 <_vfiprintf_r+0x21e>
   10552:	9907      	ldr	r1, [sp, #28]
   10554:	f851 3b04 	ldr.w	r3, [r1], #4
   10558:	9107      	str	r1, [sp, #28]
   1055a:	2101      	movs	r1, #1
   1055c:	f7ff bbb3 	b.w	fcc6 <_vfiprintf_r+0x2ee>
   10560:	9b07      	ldr	r3, [sp, #28]
   10562:	9805      	ldr	r0, [sp, #20]
   10564:	f853 1b04 	ldr.w	r1, [r3], #4
   10568:	9307      	str	r3, [sp, #28]
   1056a:	17c2      	asrs	r2, r0, #31
   1056c:	e9c1 0200 	strd	r0, r2, [r1]
   10570:	f7ff ba7d 	b.w	fa6e <_vfiprintf_r+0x96>
   10574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10576:	2b00      	cmp	r3, #0
   10578:	f43f ab26 	beq.w	fbc8 <_vfiprintf_r+0x1f0>
   1057c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1057e:	781b      	ldrb	r3, [r3, #0]
   10580:	2b00      	cmp	r3, #0
   10582:	f43f ab21 	beq.w	fbc8 <_vfiprintf_r+0x1f0>
   10586:	f898 1000 	ldrb.w	r1, [r8]
   1058a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1058e:	f7ff ba96 	b.w	fabe <_vfiprintf_r+0xe6>
   10592:	2302      	movs	r3, #2
   10594:	aa11      	add	r2, sp, #68	; 0x44
   10596:	931c      	str	r3, [sp, #112]	; 0x70
   10598:	921b      	str	r2, [sp, #108]	; 0x6c
   1059a:	2001      	movs	r0, #1
   1059c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105a0:	e6a2      	b.n	102e8 <_vfiprintf_r+0x910>
   105a2:	9603      	str	r6, [sp, #12]
   105a4:	e571      	b.n	1008a <_vfiprintf_r+0x6b2>
   105a6:	4b3b      	ldr	r3, [pc, #236]	; (10694 <_vfiprintf_r+0xcbc>)
   105a8:	930c      	str	r3, [sp, #48]	; 0x30
   105aa:	f016 0220 	ands.w	r2, r6, #32
   105ae:	d059      	beq.n	10664 <_vfiprintf_r+0xc8c>
   105b0:	9b07      	ldr	r3, [sp, #28]
   105b2:	3307      	adds	r3, #7
   105b4:	f023 0307 	bic.w	r3, r3, #7
   105b8:	4618      	mov	r0, r3
   105ba:	685a      	ldr	r2, [r3, #4]
   105bc:	f850 3b08 	ldr.w	r3, [r0], #8
   105c0:	9007      	str	r0, [sp, #28]
   105c2:	07f4      	lsls	r4, r6, #31
   105c4:	d509      	bpl.n	105da <_vfiprintf_r+0xc02>
   105c6:	ea53 0002 	orrs.w	r0, r3, r2
   105ca:	d006      	beq.n	105da <_vfiprintf_r+0xc02>
   105cc:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   105d0:	2130      	movs	r1, #48	; 0x30
   105d2:	f046 0602 	orr.w	r6, r6, #2
   105d6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   105da:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   105de:	9103      	str	r1, [sp, #12]
   105e0:	2102      	movs	r1, #2
   105e2:	f7ff bb70 	b.w	fcc6 <_vfiprintf_r+0x2ee>
   105e6:	4b2c      	ldr	r3, [pc, #176]	; (10698 <_vfiprintf_r+0xcc0>)
   105e8:	930c      	str	r3, [sp, #48]	; 0x30
   105ea:	e7de      	b.n	105aa <_vfiprintf_r+0xbd2>
   105ec:	9b07      	ldr	r3, [sp, #28]
   105ee:	2101      	movs	r1, #1
   105f0:	f853 2b04 	ldr.w	r2, [r3], #4
   105f4:	9103      	str	r1, [sp, #12]
   105f6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   105fa:	9307      	str	r3, [sp, #28]
   105fc:	9104      	str	r1, [sp, #16]
   105fe:	ac2b      	add	r4, sp, #172	; 0xac
   10600:	e4df      	b.n	ffc2 <_vfiprintf_r+0x5ea>
   10602:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10606:	2a00      	cmp	r2, #0
   10608:	f040 8132 	bne.w	10870 <_vfiprintf_r+0xe98>
   1060c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1060e:	2a00      	cmp	r2, #0
   10610:	f47f ae62 	bne.w	102d8 <_vfiprintf_r+0x900>
   10614:	4618      	mov	r0, r3
   10616:	2101      	movs	r1, #1
   10618:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1061c:	e427      	b.n	fe6e <_vfiprintf_r+0x496>
   1061e:	2100      	movs	r1, #0
   10620:	2208      	movs	r2, #8
   10622:	a816      	add	r0, sp, #88	; 0x58
   10624:	9413      	str	r4, [sp, #76]	; 0x4c
   10626:	f7fb f8c5 	bl	b7b4 <memset>
   1062a:	1c79      	adds	r1, r7, #1
   1062c:	f000 80bc 	beq.w	107a8 <_vfiprintf_r+0xdd0>
   10630:	2500      	movs	r5, #0
   10632:	9407      	str	r4, [sp, #28]
   10634:	462c      	mov	r4, r5
   10636:	e00c      	b.n	10652 <_vfiprintf_r+0xc7a>
   10638:	a92b      	add	r1, sp, #172	; 0xac
   1063a:	4658      	mov	r0, fp
   1063c:	f7ff f8ca 	bl	f7d4 <_wcrtomb_r>
   10640:	1c42      	adds	r2, r0, #1
   10642:	4420      	add	r0, r4
   10644:	f000 816b 	beq.w	1091e <_vfiprintf_r+0xf46>
   10648:	42b8      	cmp	r0, r7
   1064a:	dc08      	bgt.n	1065e <_vfiprintf_r+0xc86>
   1064c:	f000 8170 	beq.w	10930 <_vfiprintf_r+0xf58>
   10650:	4604      	mov	r4, r0
   10652:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10654:	5952      	ldr	r2, [r2, r5]
   10656:	ab16      	add	r3, sp, #88	; 0x58
   10658:	3504      	adds	r5, #4
   1065a:	2a00      	cmp	r2, #0
   1065c:	d1ec      	bne.n	10638 <_vfiprintf_r+0xc60>
   1065e:	9404      	str	r4, [sp, #16]
   10660:	9c07      	ldr	r4, [sp, #28]
   10662:	e0af      	b.n	107c4 <_vfiprintf_r+0xdec>
   10664:	f016 0310 	ands.w	r3, r6, #16
   10668:	9807      	ldr	r0, [sp, #28]
   1066a:	d10c      	bne.n	10686 <_vfiprintf_r+0xcae>
   1066c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10670:	d005      	beq.n	1067e <_vfiprintf_r+0xca6>
   10672:	461a      	mov	r2, r3
   10674:	f850 3b04 	ldr.w	r3, [r0], #4
   10678:	9007      	str	r0, [sp, #28]
   1067a:	b29b      	uxth	r3, r3
   1067c:	e7a1      	b.n	105c2 <_vfiprintf_r+0xbea>
   1067e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10682:	f040 80e1 	bne.w	10848 <_vfiprintf_r+0xe70>
   10686:	f850 3b04 	ldr.w	r3, [r0], #4
   1068a:	9007      	str	r0, [sp, #28]
   1068c:	e799      	b.n	105c2 <_vfiprintf_r+0xbea>
   1068e:	bf00      	nop
   10690:	20000cfc 	.word	0x20000cfc
   10694:	20000cb8 	.word	0x20000cb8
   10698:	20000ccc 	.word	0x20000ccc
   1069c:	9903      	ldr	r1, [sp, #12]
   1069e:	9704      	str	r7, [sp, #16]
   106a0:	ac44      	add	r4, sp, #272	; 0x110
   106a2:	469e      	mov	lr, r3
   106a4:	ee08 ba90 	vmov	s17, fp
   106a8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   106ac:	f04f 0c00 	mov.w	ip, #0
   106b0:	4623      	mov	r3, r4
   106b2:	e006      	b.n	106c2 <_vfiprintf_r+0xcea>
   106b4:	f1be 0f0a 	cmp.w	lr, #10
   106b8:	f172 0200 	sbcs.w	r2, r2, #0
   106bc:	d339      	bcc.n	10732 <_vfiprintf_r+0xd5a>
   106be:	46a6      	mov	lr, r4
   106c0:	462a      	mov	r2, r5
   106c2:	49a6      	ldr	r1, [pc, #664]	; (1095c <_vfiprintf_r+0xf84>)
   106c4:	eb1e 0002 	adds.w	r0, lr, r2
   106c8:	f140 0000 	adc.w	r0, r0, #0
   106cc:	460f      	mov	r7, r1
   106ce:	fba1 1400 	umull	r1, r4, r1, r0
   106d2:	f024 0103 	bic.w	r1, r4, #3
   106d6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   106da:	1a40      	subs	r0, r0, r1
   106dc:	ebbe 0100 	subs.w	r1, lr, r0
   106e0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   106e4:	f162 0400 	sbc.w	r4, r2, #0
   106e8:	fb05 f501 	mul.w	r5, r5, r1
   106ec:	fb07 5504 	mla	r5, r7, r4, r5
   106f0:	fba1 4107 	umull	r4, r1, r1, r7
   106f4:	440d      	add	r5, r1
   106f6:	2705      	movs	r7, #5
   106f8:	f004 0101 	and.w	r1, r4, #1
   106fc:	fba1 1b07 	umull	r1, fp, r1, r7
   10700:	1809      	adds	r1, r1, r0
   10702:	0864      	lsrs	r4, r4, #1
   10704:	3130      	adds	r1, #48	; 0x30
   10706:	f803 1c01 	strb.w	r1, [r3, #-1]
   1070a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1070e:	f10c 0c01 	add.w	ip, ip, #1
   10712:	3b01      	subs	r3, #1
   10714:	086d      	lsrs	r5, r5, #1
   10716:	2e00      	cmp	r6, #0
   10718:	d0cc      	beq.n	106b4 <_vfiprintf_r+0xcdc>
   1071a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1071c:	7809      	ldrb	r1, [r1, #0]
   1071e:	4561      	cmp	r1, ip
   10720:	d1c8      	bne.n	106b4 <_vfiprintf_r+0xcdc>
   10722:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10726:	d0c5      	beq.n	106b4 <_vfiprintf_r+0xcdc>
   10728:	f1be 0f0a 	cmp.w	lr, #10
   1072c:	f172 0200 	sbcs.w	r2, r2, #0
   10730:	d26c      	bcs.n	1080c <_vfiprintf_r+0xe34>
   10732:	461c      	mov	r4, r3
   10734:	ab44      	add	r3, sp, #272	; 0x110
   10736:	1b1b      	subs	r3, r3, r4
   10738:	9f04      	ldr	r7, [sp, #16]
   1073a:	9e03      	ldr	r6, [sp, #12]
   1073c:	9304      	str	r3, [sp, #16]
   1073e:	ee18 ba90 	vmov	fp, s17
   10742:	f7ff ba72 	b.w	fc2a <_vfiprintf_r+0x252>
   10746:	9603      	str	r6, [sp, #12]
   10748:	f7ff ba62 	b.w	fc10 <_vfiprintf_r+0x238>
   1074c:	4658      	mov	r0, fp
   1074e:	f7fa ff01 	bl	b554 <__sinit>
   10752:	f7ff b95b 	b.w	fa0c <_vfiprintf_r+0x34>
   10756:	2901      	cmp	r1, #1
   10758:	9603      	str	r6, [sp, #12]
   1075a:	f47f accd 	bne.w	100f8 <_vfiprintf_r+0x720>
   1075e:	f7ff ba5c 	b.w	fc1a <_vfiprintf_r+0x242>
   10762:	9b07      	ldr	r3, [sp, #28]
   10764:	9905      	ldr	r1, [sp, #20]
   10766:	f853 2b04 	ldr.w	r2, [r3], #4
   1076a:	6011      	str	r1, [r2, #0]
   1076c:	9307      	str	r3, [sp, #28]
   1076e:	f7ff b97e 	b.w	fa6e <_vfiprintf_r+0x96>
   10772:	2f06      	cmp	r7, #6
   10774:	463b      	mov	r3, r7
   10776:	9a03      	ldr	r2, [sp, #12]
   10778:	4c79      	ldr	r4, [pc, #484]	; (10960 <_vfiprintf_r+0xf88>)
   1077a:	9207      	str	r2, [sp, #28]
   1077c:	bf28      	it	cs
   1077e:	2306      	movcs	r3, #6
   10780:	9304      	str	r3, [sp, #16]
   10782:	9303      	str	r3, [sp, #12]
   10784:	f7ff bb25 	b.w	fdd2 <_vfiprintf_r+0x3fa>
   10788:	9b03      	ldr	r3, [sp, #12]
   1078a:	9907      	ldr	r1, [sp, #28]
   1078c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10790:	bf14      	ite	ne
   10792:	f851 3b04 	ldrne.w	r3, [r1], #4
   10796:	f851 3b04 	ldreq.w	r3, [r1], #4
   1079a:	9107      	str	r1, [sp, #28]
   1079c:	bf1c      	itt	ne
   1079e:	4602      	movne	r2, r0
   107a0:	b2db      	uxtbne	r3, r3
   107a2:	2101      	movs	r1, #1
   107a4:	f7ff ba8f 	b.w	fcc6 <_vfiprintf_r+0x2ee>
   107a8:	ab16      	add	r3, sp, #88	; 0x58
   107aa:	9300      	str	r3, [sp, #0]
   107ac:	2300      	movs	r3, #0
   107ae:	4619      	mov	r1, r3
   107b0:	aa13      	add	r2, sp, #76	; 0x4c
   107b2:	4658      	mov	r0, fp
   107b4:	f7ff f834 	bl	f820 <_wcsrtombs_r>
   107b8:	4603      	mov	r3, r0
   107ba:	3301      	adds	r3, #1
   107bc:	9004      	str	r0, [sp, #16]
   107be:	f000 80ae 	beq.w	1091e <_vfiprintf_r+0xf46>
   107c2:	9413      	str	r4, [sp, #76]	; 0x4c
   107c4:	9b04      	ldr	r3, [sp, #16]
   107c6:	2b00      	cmp	r3, #0
   107c8:	d030      	beq.n	1082c <_vfiprintf_r+0xe54>
   107ca:	2b63      	cmp	r3, #99	; 0x63
   107cc:	dc63      	bgt.n	10896 <_vfiprintf_r+0xebe>
   107ce:	2300      	movs	r3, #0
   107d0:	9308      	str	r3, [sp, #32]
   107d2:	ac2b      	add	r4, sp, #172	; 0xac
   107d4:	2208      	movs	r2, #8
   107d6:	2100      	movs	r1, #0
   107d8:	a816      	add	r0, sp, #88	; 0x58
   107da:	f7fa ffeb 	bl	b7b4 <memset>
   107de:	9d04      	ldr	r5, [sp, #16]
   107e0:	ab16      	add	r3, sp, #88	; 0x58
   107e2:	9300      	str	r3, [sp, #0]
   107e4:	aa13      	add	r2, sp, #76	; 0x4c
   107e6:	462b      	mov	r3, r5
   107e8:	4621      	mov	r1, r4
   107ea:	4658      	mov	r0, fp
   107ec:	f7ff f818 	bl	f820 <_wcsrtombs_r>
   107f0:	4285      	cmp	r5, r0
   107f2:	f040 80ab 	bne.w	1094c <_vfiprintf_r+0xf74>
   107f6:	9b03      	ldr	r3, [sp, #12]
   107f8:	9a04      	ldr	r2, [sp, #16]
   107fa:	9307      	str	r3, [sp, #28]
   107fc:	2300      	movs	r3, #0
   107fe:	54a3      	strb	r3, [r4, r2]
   10800:	461f      	mov	r7, r3
   10802:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10806:	9303      	str	r3, [sp, #12]
   10808:	f7ff ba16 	b.w	fc38 <_vfiprintf_r+0x260>
   1080c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1080e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10810:	1a9b      	subs	r3, r3, r2
   10812:	4618      	mov	r0, r3
   10814:	9308      	str	r3, [sp, #32]
   10816:	f7fb f885 	bl	b924 <strncpy>
   1081a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1081c:	9b08      	ldr	r3, [sp, #32]
   1081e:	784a      	ldrb	r2, [r1, #1]
   10820:	b10a      	cbz	r2, 10826 <_vfiprintf_r+0xe4e>
   10822:	3101      	adds	r1, #1
   10824:	910b      	str	r1, [sp, #44]	; 0x2c
   10826:	f04f 0c00 	mov.w	ip, #0
   1082a:	e748      	b.n	106be <_vfiprintf_r+0xce6>
   1082c:	9b03      	ldr	r3, [sp, #12]
   1082e:	9307      	str	r3, [sp, #28]
   10830:	9b04      	ldr	r3, [sp, #16]
   10832:	9303      	str	r3, [sp, #12]
   10834:	461f      	mov	r7, r3
   10836:	9308      	str	r3, [sp, #32]
   10838:	f7ff b9fe 	b.w	fc38 <_vfiprintf_r+0x260>
   1083c:	2101      	movs	r1, #1
   1083e:	4618      	mov	r0, r3
   10840:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10844:	f7ff bb13 	b.w	fe6e <_vfiprintf_r+0x496>
   10848:	f850 3b04 	ldr.w	r3, [r0], #4
   1084c:	9007      	str	r0, [sp, #28]
   1084e:	4622      	mov	r2, r4
   10850:	b2db      	uxtb	r3, r3
   10852:	e6b6      	b.n	105c2 <_vfiprintf_r+0xbea>
   10854:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10858:	9207      	str	r2, [sp, #28]
   1085a:	17da      	asrs	r2, r3, #31
   1085c:	4611      	mov	r1, r2
   1085e:	f7ff b9ca 	b.w	fbf6 <_vfiprintf_r+0x21e>
   10862:	f851 3b04 	ldr.w	r3, [r1], #4
   10866:	9107      	str	r1, [sp, #28]
   10868:	4602      	mov	r2, r0
   1086a:	b2db      	uxtb	r3, r3
   1086c:	f7ff ba27 	b.w	fcbe <_vfiprintf_r+0x2e6>
   10870:	2301      	movs	r3, #1
   10872:	931c      	str	r3, [sp, #112]	; 0x70
   10874:	2101      	movs	r1, #1
   10876:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1087a:	931b      	str	r3, [sp, #108]	; 0x6c
   1087c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10880:	460b      	mov	r3, r1
   10882:	f7ff bacd 	b.w	fe20 <_vfiprintf_r+0x448>
   10886:	9b07      	ldr	r3, [sp, #28]
   10888:	9905      	ldr	r1, [sp, #20]
   1088a:	f853 2b04 	ldr.w	r2, [r3], #4
   1088e:	9307      	str	r3, [sp, #28]
   10890:	8011      	strh	r1, [r2, #0]
   10892:	f7ff b8ec 	b.w	fa6e <_vfiprintf_r+0x96>
   10896:	1c59      	adds	r1, r3, #1
   10898:	4658      	mov	r0, fp
   1089a:	f7f9 ff93 	bl	a7c4 <_malloc_r>
   1089e:	4604      	mov	r4, r0
   108a0:	2800      	cmp	r0, #0
   108a2:	d03c      	beq.n	1091e <_vfiprintf_r+0xf46>
   108a4:	9008      	str	r0, [sp, #32]
   108a6:	e795      	b.n	107d4 <_vfiprintf_r+0xdfc>
   108a8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   108aa:	f7fb f909 	bl	bac0 <__retarget_lock_release_recursive>
   108ae:	f7ff b9e9 	b.w	fc84 <_vfiprintf_r+0x2ac>
   108b2:	9b03      	ldr	r3, [sp, #12]
   108b4:	9307      	str	r3, [sp, #28]
   108b6:	e9cd 7703 	strd	r7, r7, [sp, #12]
   108ba:	9f08      	ldr	r7, [sp, #32]
   108bc:	f7ff b9bc 	b.w	fc38 <_vfiprintf_r+0x260>
   108c0:	9819      	ldr	r0, [sp, #100]	; 0x64
   108c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   108c4:	3001      	adds	r0, #1
   108c6:	e545      	b.n	10354 <_vfiprintf_r+0x97c>
   108c8:	9b03      	ldr	r3, [sp, #12]
   108ca:	9307      	str	r3, [sp, #28]
   108cc:	4620      	mov	r0, r4
   108ce:	f7fb fad7 	bl	be80 <strlen>
   108d2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   108d6:	462f      	mov	r7, r5
   108d8:	9004      	str	r0, [sp, #16]
   108da:	9303      	str	r3, [sp, #12]
   108dc:	9508      	str	r5, [sp, #32]
   108de:	f7ff b9ab 	b.w	fc38 <_vfiprintf_r+0x260>
   108e2:	ee18 1a10 	vmov	r1, s16
   108e6:	aa18      	add	r2, sp, #96	; 0x60
   108e8:	4658      	mov	r0, fp
   108ea:	f7ff f839 	bl	f960 <__sprint_r.part.0>
   108ee:	2800      	cmp	r0, #0
   108f0:	f43f aa36 	beq.w	fd60 <_vfiprintf_r+0x388>
   108f4:	f7ff ba4d 	b.w	fd92 <_vfiprintf_r+0x3ba>
   108f8:	9819      	ldr	r0, [sp, #100]	; 0x64
   108fa:	3001      	adds	r0, #1
   108fc:	e57a      	b.n	103f4 <_vfiprintf_r+0xa1c>
   108fe:	468c      	mov	ip, r1
   10900:	e46e      	b.n	101e0 <_vfiprintf_r+0x808>
   10902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10904:	07d9      	lsls	r1, r3, #31
   10906:	d405      	bmi.n	10914 <_vfiprintf_r+0xf3c>
   10908:	89ab      	ldrh	r3, [r5, #12]
   1090a:	059a      	lsls	r2, r3, #22
   1090c:	d402      	bmi.n	10914 <_vfiprintf_r+0xf3c>
   1090e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10910:	f7fb f8d6 	bl	bac0 <__retarget_lock_release_recursive>
   10914:	f04f 33ff 	mov.w	r3, #4294967295
   10918:	9305      	str	r3, [sp, #20]
   1091a:	f7ff ba49 	b.w	fdb0 <_vfiprintf_r+0x3d8>
   1091e:	ee18 2a10 	vmov	r2, s16
   10922:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1092a:	8193      	strh	r3, [r2, #12]
   1092c:	f7ff ba35 	b.w	fd9a <_vfiprintf_r+0x3c2>
   10930:	9c07      	ldr	r4, [sp, #28]
   10932:	9704      	str	r7, [sp, #16]
   10934:	e746      	b.n	107c4 <_vfiprintf_r+0xdec>
   10936:	9b07      	ldr	r3, [sp, #28]
   10938:	f898 1001 	ldrb.w	r1, [r8, #1]
   1093c:	f853 7b04 	ldr.w	r7, [r3], #4
   10940:	9307      	str	r3, [sp, #28]
   10942:	4690      	mov	r8, r2
   10944:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   10948:	f7ff b8b9 	b.w	fabe <_vfiprintf_r+0xe6>
   1094c:	ee18 2a10 	vmov	r2, s16
   10950:	8993      	ldrh	r3, [r2, #12]
   10952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10956:	8193      	strh	r3, [r2, #12]
   10958:	f7ff ba15 	b.w	fd86 <_vfiprintf_r+0x3ae>
   1095c:	cccccccd 	.word	0xcccccccd
   10960:	20000ce0 	.word	0x20000ce0

00010964 <__sbprintf>:
   10964:	b570      	push	{r4, r5, r6, lr}
   10966:	460c      	mov	r4, r1
   10968:	8989      	ldrh	r1, [r1, #12]
   1096a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1096e:	f021 0102 	bic.w	r1, r1, #2
   10972:	f8ad 1014 	strh.w	r1, [sp, #20]
   10976:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10978:	911b      	str	r1, [sp, #108]	; 0x6c
   1097a:	89e1      	ldrh	r1, [r4, #14]
   1097c:	f8ad 1016 	strh.w	r1, [sp, #22]
   10980:	69e1      	ldr	r1, [r4, #28]
   10982:	9109      	str	r1, [sp, #36]	; 0x24
   10984:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10986:	910b      	str	r1, [sp, #44]	; 0x2c
   10988:	a91c      	add	r1, sp, #112	; 0x70
   1098a:	9102      	str	r1, [sp, #8]
   1098c:	9106      	str	r1, [sp, #24]
   1098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10992:	4606      	mov	r6, r0
   10994:	9104      	str	r1, [sp, #16]
   10996:	9107      	str	r1, [sp, #28]
   10998:	a818      	add	r0, sp, #96	; 0x60
   1099a:	2100      	movs	r1, #0
   1099c:	e9cd 3200 	strd	r3, r2, [sp]
   109a0:	9108      	str	r1, [sp, #32]
   109a2:	f7fb f887 	bl	bab4 <__retarget_lock_init_recursive>
   109a6:	e9dd 3200 	ldrd	r3, r2, [sp]
   109aa:	a902      	add	r1, sp, #8
   109ac:	4630      	mov	r0, r6
   109ae:	f7ff f813 	bl	f9d8 <_vfiprintf_r>
   109b2:	1e05      	subs	r5, r0, #0
   109b4:	db07      	blt.n	109c6 <__sbprintf+0x62>
   109b6:	a902      	add	r1, sp, #8
   109b8:	4630      	mov	r0, r6
   109ba:	f7fd fee7 	bl	e78c <_fflush_r>
   109be:	2800      	cmp	r0, #0
   109c0:	bf18      	it	ne
   109c2:	f04f 35ff 	movne.w	r5, #4294967295
   109c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   109ca:	065b      	lsls	r3, r3, #25
   109cc:	d503      	bpl.n	109d6 <__sbprintf+0x72>
   109ce:	89a3      	ldrh	r3, [r4, #12]
   109d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   109d4:	81a3      	strh	r3, [r4, #12]
   109d6:	9818      	ldr	r0, [sp, #96]	; 0x60
   109d8:	f7fb f86e 	bl	bab8 <__retarget_lock_close_recursive>
   109dc:	4628      	mov	r0, r5
   109de:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   109e2:	bd70      	pop	{r4, r5, r6, pc}

000109e4 <__sfvwrite_r>:
   109e4:	6893      	ldr	r3, [r2, #8]
   109e6:	2b00      	cmp	r3, #0
   109e8:	f000 8085 	beq.w	10af6 <__sfvwrite_r+0x112>
   109ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   109f4:	460c      	mov	r4, r1
   109f6:	0719      	lsls	r1, r3, #28
   109f8:	4680      	mov	r8, r0
   109fa:	b083      	sub	sp, #12
   109fc:	4617      	mov	r7, r2
   109fe:	b298      	uxth	r0, r3
   10a00:	d525      	bpl.n	10a4e <__sfvwrite_r+0x6a>
   10a02:	6923      	ldr	r3, [r4, #16]
   10a04:	b31b      	cbz	r3, 10a4e <__sfvwrite_r+0x6a>
   10a06:	f010 0302 	ands.w	r3, r0, #2
   10a0a:	683d      	ldr	r5, [r7, #0]
   10a0c:	d02d      	beq.n	10a6a <__sfvwrite_r+0x86>
   10a0e:	f04f 0a00 	mov.w	sl, #0
   10a12:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 10cd4 <__sfvwrite_r+0x2f0>
   10a16:	4656      	mov	r6, sl
   10a18:	46b9      	mov	r9, r7
   10a1a:	455e      	cmp	r6, fp
   10a1c:	4633      	mov	r3, r6
   10a1e:	4652      	mov	r2, sl
   10a20:	bf28      	it	cs
   10a22:	465b      	movcs	r3, fp
   10a24:	4640      	mov	r0, r8
   10a26:	2e00      	cmp	r6, #0
   10a28:	d052      	beq.n	10ad0 <__sfvwrite_r+0xec>
   10a2a:	69e1      	ldr	r1, [r4, #28]
   10a2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10a2e:	47b8      	blx	r7
   10a30:	2800      	cmp	r0, #0
   10a32:	dd56      	ble.n	10ae2 <__sfvwrite_r+0xfe>
   10a34:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10a38:	1a1b      	subs	r3, r3, r0
   10a3a:	4482      	add	sl, r0
   10a3c:	1a36      	subs	r6, r6, r0
   10a3e:	f8c9 3008 	str.w	r3, [r9, #8]
   10a42:	2b00      	cmp	r3, #0
   10a44:	d1e9      	bne.n	10a1a <__sfvwrite_r+0x36>
   10a46:	2000      	movs	r0, #0
   10a48:	b003      	add	sp, #12
   10a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a4e:	4621      	mov	r1, r4
   10a50:	4640      	mov	r0, r8
   10a52:	f000 f941 	bl	10cd8 <__swsetup_r>
   10a56:	2800      	cmp	r0, #0
   10a58:	f040 8138 	bne.w	10ccc <__sfvwrite_r+0x2e8>
   10a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a60:	683d      	ldr	r5, [r7, #0]
   10a62:	b298      	uxth	r0, r3
   10a64:	f010 0302 	ands.w	r3, r0, #2
   10a68:	d1d1      	bne.n	10a0e <__sfvwrite_r+0x2a>
   10a6a:	f010 0901 	ands.w	r9, r0, #1
   10a6e:	d144      	bne.n	10afa <__sfvwrite_r+0x116>
   10a70:	464e      	mov	r6, r9
   10a72:	9700      	str	r7, [sp, #0]
   10a74:	b346      	cbz	r6, 10ac8 <__sfvwrite_r+0xe4>
   10a76:	0582      	lsls	r2, r0, #22
   10a78:	f8d4 b008 	ldr.w	fp, [r4, #8]
   10a7c:	f140 8085 	bpl.w	10b8a <__sfvwrite_r+0x1a6>
   10a80:	45b3      	cmp	fp, r6
   10a82:	465a      	mov	r2, fp
   10a84:	f200 80b4 	bhi.w	10bf0 <__sfvwrite_r+0x20c>
   10a88:	f410 6f90 	tst.w	r0, #1152	; 0x480
   10a8c:	f040 80c1 	bne.w	10c12 <__sfvwrite_r+0x22e>
   10a90:	6820      	ldr	r0, [r4, #0]
   10a92:	9201      	str	r2, [sp, #4]
   10a94:	4649      	mov	r1, r9
   10a96:	f7fa fe11 	bl	b6bc <memmove>
   10a9a:	68a3      	ldr	r3, [r4, #8]
   10a9c:	9a01      	ldr	r2, [sp, #4]
   10a9e:	eba3 010b 	sub.w	r1, r3, fp
   10aa2:	6823      	ldr	r3, [r4, #0]
   10aa4:	60a1      	str	r1, [r4, #8]
   10aa6:	4413      	add	r3, r2
   10aa8:	46b2      	mov	sl, r6
   10aaa:	6023      	str	r3, [r4, #0]
   10aac:	2600      	movs	r6, #0
   10aae:	9a00      	ldr	r2, [sp, #0]
   10ab0:	6893      	ldr	r3, [r2, #8]
   10ab2:	eba3 030a 	sub.w	r3, r3, sl
   10ab6:	44d1      	add	r9, sl
   10ab8:	6093      	str	r3, [r2, #8]
   10aba:	2b00      	cmp	r3, #0
   10abc:	d0c3      	beq.n	10a46 <__sfvwrite_r+0x62>
   10abe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10ac2:	b280      	uxth	r0, r0
   10ac4:	2e00      	cmp	r6, #0
   10ac6:	d1d6      	bne.n	10a76 <__sfvwrite_r+0x92>
   10ac8:	e9d5 9600 	ldrd	r9, r6, [r5]
   10acc:	3508      	adds	r5, #8
   10ace:	e7d1      	b.n	10a74 <__sfvwrite_r+0x90>
   10ad0:	e9d5 a600 	ldrd	sl, r6, [r5]
   10ad4:	3508      	adds	r5, #8
   10ad6:	e7a0      	b.n	10a1a <__sfvwrite_r+0x36>
   10ad8:	4621      	mov	r1, r4
   10ada:	4640      	mov	r0, r8
   10adc:	f7fd fe56 	bl	e78c <_fflush_r>
   10ae0:	b388      	cbz	r0, 10b46 <__sfvwrite_r+0x162>
   10ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10aea:	f04f 30ff 	mov.w	r0, #4294967295
   10aee:	81a3      	strh	r3, [r4, #12]
   10af0:	b003      	add	sp, #12
   10af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10af6:	2000      	movs	r0, #0
   10af8:	4770      	bx	lr
   10afa:	461e      	mov	r6, r3
   10afc:	46ba      	mov	sl, r7
   10afe:	4699      	mov	r9, r3
   10b00:	4618      	mov	r0, r3
   10b02:	9500      	str	r5, [sp, #0]
   10b04:	461f      	mov	r7, r3
   10b06:	b366      	cbz	r6, 10b62 <__sfvwrite_r+0x17e>
   10b08:	2800      	cmp	r0, #0
   10b0a:	d032      	beq.n	10b72 <__sfvwrite_r+0x18e>
   10b0c:	464a      	mov	r2, r9
   10b0e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10b12:	6820      	ldr	r0, [r4, #0]
   10b14:	68a5      	ldr	r5, [r4, #8]
   10b16:	42b2      	cmp	r2, r6
   10b18:	bf28      	it	cs
   10b1a:	4632      	movcs	r2, r6
   10b1c:	4288      	cmp	r0, r1
   10b1e:	d904      	bls.n	10b2a <__sfvwrite_r+0x146>
   10b20:	eb05 0b03 	add.w	fp, r5, r3
   10b24:	455a      	cmp	r2, fp
   10b26:	f300 80a7 	bgt.w	10c78 <__sfvwrite_r+0x294>
   10b2a:	4293      	cmp	r3, r2
   10b2c:	dc64      	bgt.n	10bf8 <__sfvwrite_r+0x214>
   10b2e:	69e1      	ldr	r1, [r4, #28]
   10b30:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10b32:	463a      	mov	r2, r7
   10b34:	4640      	mov	r0, r8
   10b36:	47a8      	blx	r5
   10b38:	f1b0 0b00 	subs.w	fp, r0, #0
   10b3c:	ddd1      	ble.n	10ae2 <__sfvwrite_r+0xfe>
   10b3e:	ebb9 090b 	subs.w	r9, r9, fp
   10b42:	d0c9      	beq.n	10ad8 <__sfvwrite_r+0xf4>
   10b44:	2001      	movs	r0, #1
   10b46:	f8da 3008 	ldr.w	r3, [sl, #8]
   10b4a:	eba3 030b 	sub.w	r3, r3, fp
   10b4e:	445f      	add	r7, fp
   10b50:	eba6 060b 	sub.w	r6, r6, fp
   10b54:	f8ca 3008 	str.w	r3, [sl, #8]
   10b58:	2b00      	cmp	r3, #0
   10b5a:	f43f af74 	beq.w	10a46 <__sfvwrite_r+0x62>
   10b5e:	2e00      	cmp	r6, #0
   10b60:	d1d2      	bne.n	10b08 <__sfvwrite_r+0x124>
   10b62:	9a00      	ldr	r2, [sp, #0]
   10b64:	6856      	ldr	r6, [r2, #4]
   10b66:	4613      	mov	r3, r2
   10b68:	3208      	adds	r2, #8
   10b6a:	9200      	str	r2, [sp, #0]
   10b6c:	2e00      	cmp	r6, #0
   10b6e:	d0f8      	beq.n	10b62 <__sfvwrite_r+0x17e>
   10b70:	681f      	ldr	r7, [r3, #0]
   10b72:	4632      	mov	r2, r6
   10b74:	210a      	movs	r1, #10
   10b76:	4638      	mov	r0, r7
   10b78:	f7fd fe3a 	bl	e7f0 <memchr>
   10b7c:	2800      	cmp	r0, #0
   10b7e:	f000 809c 	beq.w	10cba <__sfvwrite_r+0x2d6>
   10b82:	3001      	adds	r0, #1
   10b84:	eba0 0907 	sub.w	r9, r0, r7
   10b88:	e7c0      	b.n	10b0c <__sfvwrite_r+0x128>
   10b8a:	6820      	ldr	r0, [r4, #0]
   10b8c:	6923      	ldr	r3, [r4, #16]
   10b8e:	4298      	cmp	r0, r3
   10b90:	d816      	bhi.n	10bc0 <__sfvwrite_r+0x1dc>
   10b92:	6962      	ldr	r2, [r4, #20]
   10b94:	42b2      	cmp	r2, r6
   10b96:	d813      	bhi.n	10bc0 <__sfvwrite_r+0x1dc>
   10b98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10b9c:	42b3      	cmp	r3, r6
   10b9e:	bf28      	it	cs
   10ba0:	4633      	movcs	r3, r6
   10ba2:	69e1      	ldr	r1, [r4, #28]
   10ba4:	fb93 f3f2 	sdiv	r3, r3, r2
   10ba8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10baa:	fb02 f303 	mul.w	r3, r2, r3
   10bae:	4640      	mov	r0, r8
   10bb0:	464a      	mov	r2, r9
   10bb2:	47b8      	blx	r7
   10bb4:	f1b0 0a00 	subs.w	sl, r0, #0
   10bb8:	dd93      	ble.n	10ae2 <__sfvwrite_r+0xfe>
   10bba:	eba6 060a 	sub.w	r6, r6, sl
   10bbe:	e776      	b.n	10aae <__sfvwrite_r+0xca>
   10bc0:	45b3      	cmp	fp, r6
   10bc2:	46da      	mov	sl, fp
   10bc4:	bf28      	it	cs
   10bc6:	46b2      	movcs	sl, r6
   10bc8:	4652      	mov	r2, sl
   10bca:	4649      	mov	r1, r9
   10bcc:	f7fa fd76 	bl	b6bc <memmove>
   10bd0:	68a3      	ldr	r3, [r4, #8]
   10bd2:	6822      	ldr	r2, [r4, #0]
   10bd4:	eba3 030a 	sub.w	r3, r3, sl
   10bd8:	4452      	add	r2, sl
   10bda:	60a3      	str	r3, [r4, #8]
   10bdc:	6022      	str	r2, [r4, #0]
   10bde:	2b00      	cmp	r3, #0
   10be0:	d1eb      	bne.n	10bba <__sfvwrite_r+0x1d6>
   10be2:	4621      	mov	r1, r4
   10be4:	4640      	mov	r0, r8
   10be6:	f7fd fdd1 	bl	e78c <_fflush_r>
   10bea:	2800      	cmp	r0, #0
   10bec:	d0e5      	beq.n	10bba <__sfvwrite_r+0x1d6>
   10bee:	e778      	b.n	10ae2 <__sfvwrite_r+0xfe>
   10bf0:	6820      	ldr	r0, [r4, #0]
   10bf2:	46b3      	mov	fp, r6
   10bf4:	4632      	mov	r2, r6
   10bf6:	e74c      	b.n	10a92 <__sfvwrite_r+0xae>
   10bf8:	4639      	mov	r1, r7
   10bfa:	9201      	str	r2, [sp, #4]
   10bfc:	f7fa fd5e 	bl	b6bc <memmove>
   10c00:	9a01      	ldr	r2, [sp, #4]
   10c02:	68a3      	ldr	r3, [r4, #8]
   10c04:	1a9b      	subs	r3, r3, r2
   10c06:	60a3      	str	r3, [r4, #8]
   10c08:	6823      	ldr	r3, [r4, #0]
   10c0a:	4413      	add	r3, r2
   10c0c:	6023      	str	r3, [r4, #0]
   10c0e:	4693      	mov	fp, r2
   10c10:	e795      	b.n	10b3e <__sfvwrite_r+0x15a>
   10c12:	6823      	ldr	r3, [r4, #0]
   10c14:	6921      	ldr	r1, [r4, #16]
   10c16:	eba3 0b01 	sub.w	fp, r3, r1
   10c1a:	6963      	ldr	r3, [r4, #20]
   10c1c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   10c20:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   10c24:	f10b 0301 	add.w	r3, fp, #1
   10c28:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   10c2c:	4433      	add	r3, r6
   10c2e:	4553      	cmp	r3, sl
   10c30:	4652      	mov	r2, sl
   10c32:	bf84      	itt	hi
   10c34:	469a      	movhi	sl, r3
   10c36:	4652      	movhi	r2, sl
   10c38:	0543      	lsls	r3, r0, #21
   10c3a:	d52c      	bpl.n	10c96 <__sfvwrite_r+0x2b2>
   10c3c:	4611      	mov	r1, r2
   10c3e:	4640      	mov	r0, r8
   10c40:	f7f9 fdc0 	bl	a7c4 <_malloc_r>
   10c44:	2800      	cmp	r0, #0
   10c46:	d03b      	beq.n	10cc0 <__sfvwrite_r+0x2dc>
   10c48:	465a      	mov	r2, fp
   10c4a:	6921      	ldr	r1, [r4, #16]
   10c4c:	9001      	str	r0, [sp, #4]
   10c4e:	f7f8 f809 	bl	8c64 <memcpy>
   10c52:	89a2      	ldrh	r2, [r4, #12]
   10c54:	9b01      	ldr	r3, [sp, #4]
   10c56:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10c5e:	81a2      	strh	r2, [r4, #12]
   10c60:	eb03 000b 	add.w	r0, r3, fp
   10c64:	6123      	str	r3, [r4, #16]
   10c66:	ebaa 030b 	sub.w	r3, sl, fp
   10c6a:	f8c4 a014 	str.w	sl, [r4, #20]
   10c6e:	60a3      	str	r3, [r4, #8]
   10c70:	6020      	str	r0, [r4, #0]
   10c72:	46b3      	mov	fp, r6
   10c74:	4632      	mov	r2, r6
   10c76:	e70c      	b.n	10a92 <__sfvwrite_r+0xae>
   10c78:	4639      	mov	r1, r7
   10c7a:	465a      	mov	r2, fp
   10c7c:	f7fa fd1e 	bl	b6bc <memmove>
   10c80:	6823      	ldr	r3, [r4, #0]
   10c82:	445b      	add	r3, fp
   10c84:	6023      	str	r3, [r4, #0]
   10c86:	4621      	mov	r1, r4
   10c88:	4640      	mov	r0, r8
   10c8a:	f7fd fd7f 	bl	e78c <_fflush_r>
   10c8e:	2800      	cmp	r0, #0
   10c90:	f43f af55 	beq.w	10b3e <__sfvwrite_r+0x15a>
   10c94:	e725      	b.n	10ae2 <__sfvwrite_r+0xfe>
   10c96:	4640      	mov	r0, r8
   10c98:	f7fa f85c 	bl	ad54 <_realloc_r>
   10c9c:	4603      	mov	r3, r0
   10c9e:	2800      	cmp	r0, #0
   10ca0:	d1de      	bne.n	10c60 <__sfvwrite_r+0x27c>
   10ca2:	6921      	ldr	r1, [r4, #16]
   10ca4:	4640      	mov	r0, r8
   10ca6:	f7fb f9ed 	bl	c084 <_free_r>
   10caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cae:	220c      	movs	r2, #12
   10cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   10cb4:	f8c8 2000 	str.w	r2, [r8]
   10cb8:	e715      	b.n	10ae6 <__sfvwrite_r+0x102>
   10cba:	1c72      	adds	r2, r6, #1
   10cbc:	4691      	mov	r9, r2
   10cbe:	e726      	b.n	10b0e <__sfvwrite_r+0x12a>
   10cc0:	220c      	movs	r2, #12
   10cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cc6:	f8c8 2000 	str.w	r2, [r8]
   10cca:	e70c      	b.n	10ae6 <__sfvwrite_r+0x102>
   10ccc:	f04f 30ff 	mov.w	r0, #4294967295
   10cd0:	e6ba      	b.n	10a48 <__sfvwrite_r+0x64>
   10cd2:	bf00      	nop
   10cd4:	7ffffc00 	.word	0x7ffffc00

00010cd8 <__swsetup_r>:
   10cd8:	b538      	push	{r3, r4, r5, lr}
   10cda:	4b31      	ldr	r3, [pc, #196]	; (10da0 <__swsetup_r+0xc8>)
   10cdc:	681b      	ldr	r3, [r3, #0]
   10cde:	4605      	mov	r5, r0
   10ce0:	460c      	mov	r4, r1
   10ce2:	b113      	cbz	r3, 10cea <__swsetup_r+0x12>
   10ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   10ce6:	2a00      	cmp	r2, #0
   10ce8:	d04e      	beq.n	10d88 <__swsetup_r+0xb0>
   10cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10cee:	0718      	lsls	r0, r3, #28
   10cf0:	b29a      	uxth	r2, r3
   10cf2:	d51c      	bpl.n	10d2e <__swsetup_r+0x56>
   10cf4:	6921      	ldr	r1, [r4, #16]
   10cf6:	b329      	cbz	r1, 10d44 <__swsetup_r+0x6c>
   10cf8:	f012 0001 	ands.w	r0, r2, #1
   10cfc:	d007      	beq.n	10d0e <__swsetup_r+0x36>
   10cfe:	2000      	movs	r0, #0
   10d00:	60a0      	str	r0, [r4, #8]
   10d02:	6960      	ldr	r0, [r4, #20]
   10d04:	4240      	negs	r0, r0
   10d06:	61a0      	str	r0, [r4, #24]
   10d08:	b139      	cbz	r1, 10d1a <__swsetup_r+0x42>
   10d0a:	2000      	movs	r0, #0
   10d0c:	bd38      	pop	{r3, r4, r5, pc}
   10d0e:	0795      	lsls	r5, r2, #30
   10d10:	bf58      	it	pl
   10d12:	6960      	ldrpl	r0, [r4, #20]
   10d14:	60a0      	str	r0, [r4, #8]
   10d16:	2900      	cmp	r1, #0
   10d18:	d1f7      	bne.n	10d0a <__swsetup_r+0x32>
   10d1a:	0612      	lsls	r2, r2, #24
   10d1c:	bf58      	it	pl
   10d1e:	4608      	movpl	r0, r1
   10d20:	d5f4      	bpl.n	10d0c <__swsetup_r+0x34>
   10d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d26:	81a3      	strh	r3, [r4, #12]
   10d28:	f04f 30ff 	mov.w	r0, #4294967295
   10d2c:	bd38      	pop	{r3, r4, r5, pc}
   10d2e:	06d1      	lsls	r1, r2, #27
   10d30:	d52e      	bpl.n	10d90 <__swsetup_r+0xb8>
   10d32:	0752      	lsls	r2, r2, #29
   10d34:	d414      	bmi.n	10d60 <__swsetup_r+0x88>
   10d36:	6921      	ldr	r1, [r4, #16]
   10d38:	f043 0308 	orr.w	r3, r3, #8
   10d3c:	81a3      	strh	r3, [r4, #12]
   10d3e:	b29a      	uxth	r2, r3
   10d40:	2900      	cmp	r1, #0
   10d42:	d1d9      	bne.n	10cf8 <__swsetup_r+0x20>
   10d44:	f402 7020 	and.w	r0, r2, #640	; 0x280
   10d48:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   10d4c:	d0d4      	beq.n	10cf8 <__swsetup_r+0x20>
   10d4e:	4621      	mov	r1, r4
   10d50:	4628      	mov	r0, r5
   10d52:	f000 f947 	bl	10fe4 <__smakebuf_r>
   10d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10d5a:	6921      	ldr	r1, [r4, #16]
   10d5c:	b29a      	uxth	r2, r3
   10d5e:	e7cb      	b.n	10cf8 <__swsetup_r+0x20>
   10d60:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10d62:	b151      	cbz	r1, 10d7a <__swsetup_r+0xa2>
   10d64:	f104 0240 	add.w	r2, r4, #64	; 0x40
   10d68:	4291      	cmp	r1, r2
   10d6a:	d004      	beq.n	10d76 <__swsetup_r+0x9e>
   10d6c:	4628      	mov	r0, r5
   10d6e:	f7fb f989 	bl	c084 <_free_r>
   10d72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10d76:	2200      	movs	r2, #0
   10d78:	6322      	str	r2, [r4, #48]	; 0x30
   10d7a:	6921      	ldr	r1, [r4, #16]
   10d7c:	2200      	movs	r2, #0
   10d7e:	e9c4 1200 	strd	r1, r2, [r4]
   10d82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   10d86:	e7d7      	b.n	10d38 <__swsetup_r+0x60>
   10d88:	4618      	mov	r0, r3
   10d8a:	f7fa fbe3 	bl	b554 <__sinit>
   10d8e:	e7ac      	b.n	10cea <__swsetup_r+0x12>
   10d90:	2209      	movs	r2, #9
   10d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d96:	602a      	str	r2, [r5, #0]
   10d98:	f04f 30ff 	mov.w	r0, #4294967295
   10d9c:	81a3      	strh	r3, [r4, #12]
   10d9e:	bd38      	pop	{r3, r4, r5, pc}
   10da0:	20004924 	.word	0x20004924

00010da4 <__fputwc>:
   10da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10da8:	b082      	sub	sp, #8
   10daa:	4682      	mov	sl, r0
   10dac:	4688      	mov	r8, r1
   10dae:	4614      	mov	r4, r2
   10db0:	f7fa fdea 	bl	b988 <__locale_mb_cur_max>
   10db4:	2801      	cmp	r0, #1
   10db6:	d103      	bne.n	10dc0 <__fputwc+0x1c>
   10db8:	f108 33ff 	add.w	r3, r8, #4294967295
   10dbc:	2bfe      	cmp	r3, #254	; 0xfe
   10dbe:	d936      	bls.n	10e2e <__fputwc+0x8a>
   10dc0:	f10d 0904 	add.w	r9, sp, #4
   10dc4:	4642      	mov	r2, r8
   10dc6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   10dca:	4649      	mov	r1, r9
   10dcc:	4650      	mov	r0, sl
   10dce:	f7fe fd01 	bl	f7d4 <_wcrtomb_r>
   10dd2:	1c42      	adds	r2, r0, #1
   10dd4:	4606      	mov	r6, r0
   10dd6:	d032      	beq.n	10e3e <__fputwc+0x9a>
   10dd8:	b320      	cbz	r0, 10e24 <__fputwc+0x80>
   10dda:	f89d c004 	ldrb.w	ip, [sp, #4]
   10dde:	2500      	movs	r5, #0
   10de0:	e009      	b.n	10df6 <__fputwc+0x52>
   10de2:	6823      	ldr	r3, [r4, #0]
   10de4:	1c5a      	adds	r2, r3, #1
   10de6:	6022      	str	r2, [r4, #0]
   10de8:	f883 c000 	strb.w	ip, [r3]
   10dec:	3501      	adds	r5, #1
   10dee:	42b5      	cmp	r5, r6
   10df0:	d218      	bcs.n	10e24 <__fputwc+0x80>
   10df2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   10df6:	68a3      	ldr	r3, [r4, #8]
   10df8:	3b01      	subs	r3, #1
   10dfa:	2b00      	cmp	r3, #0
   10dfc:	60a3      	str	r3, [r4, #8]
   10dfe:	daf0      	bge.n	10de2 <__fputwc+0x3e>
   10e00:	69a7      	ldr	r7, [r4, #24]
   10e02:	42bb      	cmp	r3, r7
   10e04:	4661      	mov	r1, ip
   10e06:	4622      	mov	r2, r4
   10e08:	4650      	mov	r0, sl
   10e0a:	db02      	blt.n	10e12 <__fputwc+0x6e>
   10e0c:	f1bc 0f0a 	cmp.w	ip, #10
   10e10:	d1e7      	bne.n	10de2 <__fputwc+0x3e>
   10e12:	f000 f953 	bl	110bc <__swbuf_r>
   10e16:	1c43      	adds	r3, r0, #1
   10e18:	d1e8      	bne.n	10dec <__fputwc+0x48>
   10e1a:	4606      	mov	r6, r0
   10e1c:	4630      	mov	r0, r6
   10e1e:	b002      	add	sp, #8
   10e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e24:	4646      	mov	r6, r8
   10e26:	4630      	mov	r0, r6
   10e28:	b002      	add	sp, #8
   10e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e2e:	fa5f fc88 	uxtb.w	ip, r8
   10e32:	f88d c004 	strb.w	ip, [sp, #4]
   10e36:	4606      	mov	r6, r0
   10e38:	f10d 0904 	add.w	r9, sp, #4
   10e3c:	e7cf      	b.n	10dde <__fputwc+0x3a>
   10e3e:	89a3      	ldrh	r3, [r4, #12]
   10e40:	4630      	mov	r0, r6
   10e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e46:	81a3      	strh	r3, [r4, #12]
   10e48:	b002      	add	sp, #8
   10e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e4e:	bf00      	nop

00010e50 <_fputwc_r>:
   10e50:	b530      	push	{r4, r5, lr}
   10e52:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10e54:	f013 0f01 	tst.w	r3, #1
   10e58:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10e5c:	4614      	mov	r4, r2
   10e5e:	b083      	sub	sp, #12
   10e60:	4605      	mov	r5, r0
   10e62:	b29a      	uxth	r2, r3
   10e64:	d101      	bne.n	10e6a <_fputwc_r+0x1a>
   10e66:	0598      	lsls	r0, r3, #22
   10e68:	d51c      	bpl.n	10ea4 <_fputwc_r+0x54>
   10e6a:	0490      	lsls	r0, r2, #18
   10e6c:	d406      	bmi.n	10e7c <_fputwc_r+0x2c>
   10e6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   10e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   10e78:	81a3      	strh	r3, [r4, #12]
   10e7a:	6662      	str	r2, [r4, #100]	; 0x64
   10e7c:	4622      	mov	r2, r4
   10e7e:	4628      	mov	r0, r5
   10e80:	f7ff ff90 	bl	10da4 <__fputwc>
   10e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e86:	07da      	lsls	r2, r3, #31
   10e88:	4605      	mov	r5, r0
   10e8a:	d402      	bmi.n	10e92 <_fputwc_r+0x42>
   10e8c:	89a3      	ldrh	r3, [r4, #12]
   10e8e:	059b      	lsls	r3, r3, #22
   10e90:	d502      	bpl.n	10e98 <_fputwc_r+0x48>
   10e92:	4628      	mov	r0, r5
   10e94:	b003      	add	sp, #12
   10e96:	bd30      	pop	{r4, r5, pc}
   10e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10e9a:	f7fa fe11 	bl	bac0 <__retarget_lock_release_recursive>
   10e9e:	4628      	mov	r0, r5
   10ea0:	b003      	add	sp, #12
   10ea2:	bd30      	pop	{r4, r5, pc}
   10ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ea6:	9101      	str	r1, [sp, #4]
   10ea8:	f7fa fe08 	bl	babc <__retarget_lock_acquire_recursive>
   10eac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10eb0:	9901      	ldr	r1, [sp, #4]
   10eb2:	b29a      	uxth	r2, r3
   10eb4:	e7d9      	b.n	10e6a <_fputwc_r+0x1a>
   10eb6:	bf00      	nop

00010eb8 <_wcsnrtombs_l>:
   10eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ebc:	b08b      	sub	sp, #44	; 0x2c
   10ebe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   10ec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   10ec4:	9103      	str	r1, [sp, #12]
   10ec6:	4681      	mov	r9, r0
   10ec8:	9205      	str	r2, [sp, #20]
   10eca:	461e      	mov	r6, r3
   10ecc:	f1b8 0f00 	cmp.w	r8, #0
   10ed0:	d05c      	beq.n	10f8c <_wcsnrtombs_l+0xd4>
   10ed2:	9b03      	ldr	r3, [sp, #12]
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d05e      	beq.n	10f96 <_wcsnrtombs_l+0xde>
   10ed8:	9b05      	ldr	r3, [sp, #20]
   10eda:	681d      	ldr	r5, [r3, #0]
   10edc:	2f00      	cmp	r7, #0
   10ede:	d06a      	beq.n	10fb6 <_wcsnrtombs_l+0xfe>
   10ee0:	1e74      	subs	r4, r6, #1
   10ee2:	b34e      	cbz	r6, 10f38 <_wcsnrtombs_l+0x80>
   10ee4:	9b03      	ldr	r3, [sp, #12]
   10ee6:	9304      	str	r3, [sp, #16]
   10ee8:	3d04      	subs	r5, #4
   10eea:	2600      	movs	r6, #0
   10eec:	9501      	str	r5, [sp, #4]
   10eee:	e00b      	b.n	10f08 <_wcsnrtombs_l+0x50>
   10ef0:	9b03      	ldr	r3, [sp, #12]
   10ef2:	bb2b      	cbnz	r3, 10f40 <_wcsnrtombs_l+0x88>
   10ef4:	9b01      	ldr	r3, [sp, #4]
   10ef6:	681a      	ldr	r2, [r3, #0]
   10ef8:	2a00      	cmp	r2, #0
   10efa:	d03a      	beq.n	10f72 <_wcsnrtombs_l+0xba>
   10efc:	45bc      	cmp	ip, r7
   10efe:	d25c      	bcs.n	10fba <_wcsnrtombs_l+0x102>
   10f00:	3c01      	subs	r4, #1
   10f02:	1c63      	adds	r3, r4, #1
   10f04:	4666      	mov	r6, ip
   10f06:	d017      	beq.n	10f38 <_wcsnrtombs_l+0x80>
   10f08:	f8d8 3000 	ldr.w	r3, [r8]
   10f0c:	9302      	str	r3, [sp, #8]
   10f0e:	9b01      	ldr	r3, [sp, #4]
   10f10:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   10f14:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10f18:	9301      	str	r3, [sp, #4]
   10f1a:	a907      	add	r1, sp, #28
   10f1c:	4643      	mov	r3, r8
   10f1e:	4648      	mov	r0, r9
   10f20:	f8d8 b004 	ldr.w	fp, [r8, #4]
   10f24:	47a8      	blx	r5
   10f26:	1c42      	adds	r2, r0, #1
   10f28:	d03a      	beq.n	10fa0 <_wcsnrtombs_l+0xe8>
   10f2a:	eb00 0c06 	add.w	ip, r0, r6
   10f2e:	45bc      	cmp	ip, r7
   10f30:	d9de      	bls.n	10ef0 <_wcsnrtombs_l+0x38>
   10f32:	9b02      	ldr	r3, [sp, #8]
   10f34:	e9c8 3b00 	strd	r3, fp, [r8]
   10f38:	4630      	mov	r0, r6
   10f3a:	b00b      	add	sp, #44	; 0x2c
   10f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f40:	2800      	cmp	r0, #0
   10f42:	dd0e      	ble.n	10f62 <_wcsnrtombs_l+0xaa>
   10f44:	9b04      	ldr	r3, [sp, #16]
   10f46:	9d01      	ldr	r5, [sp, #4]
   10f48:	4418      	add	r0, r3
   10f4a:	1e5a      	subs	r2, r3, #1
   10f4c:	a907      	add	r1, sp, #28
   10f4e:	f100 3eff 	add.w	lr, r0, #4294967295
   10f52:	f811 3b01 	ldrb.w	r3, [r1], #1
   10f56:	f802 3f01 	strb.w	r3, [r2, #1]!
   10f5a:	4572      	cmp	r2, lr
   10f5c:	d1f9      	bne.n	10f52 <_wcsnrtombs_l+0x9a>
   10f5e:	9501      	str	r5, [sp, #4]
   10f60:	9004      	str	r0, [sp, #16]
   10f62:	9b05      	ldr	r3, [sp, #20]
   10f64:	681a      	ldr	r2, [r3, #0]
   10f66:	3204      	adds	r2, #4
   10f68:	601a      	str	r2, [r3, #0]
   10f6a:	9b01      	ldr	r3, [sp, #4]
   10f6c:	681a      	ldr	r2, [r3, #0]
   10f6e:	2a00      	cmp	r2, #0
   10f70:	d1c4      	bne.n	10efc <_wcsnrtombs_l+0x44>
   10f72:	9b03      	ldr	r3, [sp, #12]
   10f74:	b10b      	cbz	r3, 10f7a <_wcsnrtombs_l+0xc2>
   10f76:	9b05      	ldr	r3, [sp, #20]
   10f78:	601a      	str	r2, [r3, #0]
   10f7a:	f10c 36ff 	add.w	r6, ip, #4294967295
   10f7e:	2200      	movs	r2, #0
   10f80:	4630      	mov	r0, r6
   10f82:	f8c8 2000 	str.w	r2, [r8]
   10f86:	b00b      	add	sp, #44	; 0x2c
   10f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f8c:	9b03      	ldr	r3, [sp, #12]
   10f8e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   10f92:	2b00      	cmp	r3, #0
   10f94:	d1a0      	bne.n	10ed8 <_wcsnrtombs_l+0x20>
   10f96:	9b05      	ldr	r3, [sp, #20]
   10f98:	f04f 37ff 	mov.w	r7, #4294967295
   10f9c:	681d      	ldr	r5, [r3, #0]
   10f9e:	e79f      	b.n	10ee0 <_wcsnrtombs_l+0x28>
   10fa0:	4606      	mov	r6, r0
   10fa2:	218a      	movs	r1, #138	; 0x8a
   10fa4:	2200      	movs	r2, #0
   10fa6:	4630      	mov	r0, r6
   10fa8:	f8c9 1000 	str.w	r1, [r9]
   10fac:	f8c8 2000 	str.w	r2, [r8]
   10fb0:	b00b      	add	sp, #44	; 0x2c
   10fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fb6:	463e      	mov	r6, r7
   10fb8:	e7be      	b.n	10f38 <_wcsnrtombs_l+0x80>
   10fba:	4666      	mov	r6, ip
   10fbc:	e7bc      	b.n	10f38 <_wcsnrtombs_l+0x80>
   10fbe:	bf00      	nop

00010fc0 <_wcsnrtombs_r>:
   10fc0:	b510      	push	{r4, lr}
   10fc2:	b084      	sub	sp, #16
   10fc4:	4c05      	ldr	r4, [pc, #20]	; (10fdc <_wcsnrtombs_r+0x1c>)
   10fc6:	9806      	ldr	r0, [sp, #24]
   10fc8:	9000      	str	r0, [sp, #0]
   10fca:	9807      	ldr	r0, [sp, #28]
   10fcc:	9001      	str	r0, [sp, #4]
   10fce:	4804      	ldr	r0, [pc, #16]	; (10fe0 <_wcsnrtombs_r+0x20>)
   10fd0:	6800      	ldr	r0, [r0, #0]
   10fd2:	9402      	str	r4, [sp, #8]
   10fd4:	f7ff ff70 	bl	10eb8 <_wcsnrtombs_l>
   10fd8:	b004      	add	sp, #16
   10fda:	bd10      	pop	{r4, pc}
   10fdc:	2000439c 	.word	0x2000439c
   10fe0:	20004924 	.word	0x20004924

00010fe4 <__smakebuf_r>:
   10fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fe8:	898b      	ldrh	r3, [r1, #12]
   10fea:	460c      	mov	r4, r1
   10fec:	0799      	lsls	r1, r3, #30
   10fee:	b096      	sub	sp, #88	; 0x58
   10ff0:	d508      	bpl.n	11004 <__smakebuf_r+0x20>
   10ff2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   10ff6:	2201      	movs	r2, #1
   10ff8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   10ffc:	6023      	str	r3, [r4, #0]
   10ffe:	b016      	add	sp, #88	; 0x58
   11000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11008:	2900      	cmp	r1, #0
   1100a:	4606      	mov	r6, r0
   1100c:	db25      	blt.n	1105a <__smakebuf_r+0x76>
   1100e:	466a      	mov	r2, sp
   11010:	f000 f8ac 	bl	1116c <_fstat_r>
   11014:	2800      	cmp	r0, #0
   11016:	db1f      	blt.n	11058 <__smakebuf_r+0x74>
   11018:	9d01      	ldr	r5, [sp, #4]
   1101a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1101e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   11022:	fab5 f585 	clz	r5, r5
   11026:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1102a:	096d      	lsrs	r5, r5, #5
   1102c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   11030:	4641      	mov	r1, r8
   11032:	4630      	mov	r0, r6
   11034:	f7f9 fbc6 	bl	a7c4 <_malloc_r>
   11038:	b1e0      	cbz	r0, 11074 <__smakebuf_r+0x90>
   1103a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1103e:	f8c4 8014 	str.w	r8, [r4, #20]
   11042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11046:	6020      	str	r0, [r4, #0]
   11048:	6120      	str	r0, [r4, #16]
   1104a:	81a3      	strh	r3, [r4, #12]
   1104c:	bb35      	cbnz	r5, 1109c <__smakebuf_r+0xb8>
   1104e:	433b      	orrs	r3, r7
   11050:	81a3      	strh	r3, [r4, #12]
   11052:	b016      	add	sp, #88	; 0x58
   11054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11058:	89a3      	ldrh	r3, [r4, #12]
   1105a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1105e:	d019      	beq.n	11094 <__smakebuf_r+0xb0>
   11060:	f04f 0840 	mov.w	r8, #64	; 0x40
   11064:	2500      	movs	r5, #0
   11066:	4641      	mov	r1, r8
   11068:	4630      	mov	r0, r6
   1106a:	462f      	mov	r7, r5
   1106c:	f7f9 fbaa 	bl	a7c4 <_malloc_r>
   11070:	2800      	cmp	r0, #0
   11072:	d1e2      	bne.n	1103a <__smakebuf_r+0x56>
   11074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11078:	059a      	lsls	r2, r3, #22
   1107a:	d4c0      	bmi.n	10ffe <__smakebuf_r+0x1a>
   1107c:	f023 0303 	bic.w	r3, r3, #3
   11080:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11084:	f043 0302 	orr.w	r3, r3, #2
   11088:	2101      	movs	r1, #1
   1108a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1108e:	81a3      	strh	r3, [r4, #12]
   11090:	6022      	str	r2, [r4, #0]
   11092:	e7b4      	b.n	10ffe <__smakebuf_r+0x1a>
   11094:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11098:	462f      	mov	r7, r5
   1109a:	e7c9      	b.n	11030 <__smakebuf_r+0x4c>
   1109c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   110a0:	4630      	mov	r0, r6
   110a2:	f000 f879 	bl	11198 <_isatty_r>
   110a6:	b910      	cbnz	r0, 110ae <__smakebuf_r+0xca>
   110a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   110ac:	e7cf      	b.n	1104e <__smakebuf_r+0x6a>
   110ae:	89a3      	ldrh	r3, [r4, #12]
   110b0:	f023 0303 	bic.w	r3, r3, #3
   110b4:	f043 0301 	orr.w	r3, r3, #1
   110b8:	b21b      	sxth	r3, r3
   110ba:	e7c8      	b.n	1104e <__smakebuf_r+0x6a>

000110bc <__swbuf_r>:
   110bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110be:	460d      	mov	r5, r1
   110c0:	4614      	mov	r4, r2
   110c2:	4606      	mov	r6, r0
   110c4:	b110      	cbz	r0, 110cc <__swbuf_r+0x10>
   110c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   110c8:	2b00      	cmp	r3, #0
   110ca:	d04c      	beq.n	11166 <__swbuf_r+0xaa>
   110cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   110d0:	69a3      	ldr	r3, [r4, #24]
   110d2:	60a3      	str	r3, [r4, #8]
   110d4:	0717      	lsls	r7, r2, #28
   110d6:	b290      	uxth	r0, r2
   110d8:	d51b      	bpl.n	11112 <__swbuf_r+0x56>
   110da:	6923      	ldr	r3, [r4, #16]
   110dc:	b1cb      	cbz	r3, 11112 <__swbuf_r+0x56>
   110de:	b2ed      	uxtb	r5, r5
   110e0:	0481      	lsls	r1, r0, #18
   110e2:	462f      	mov	r7, r5
   110e4:	d522      	bpl.n	1112c <__swbuf_r+0x70>
   110e6:	6822      	ldr	r2, [r4, #0]
   110e8:	6961      	ldr	r1, [r4, #20]
   110ea:	1ad3      	subs	r3, r2, r3
   110ec:	4299      	cmp	r1, r3
   110ee:	dd29      	ble.n	11144 <__swbuf_r+0x88>
   110f0:	3301      	adds	r3, #1
   110f2:	68a1      	ldr	r1, [r4, #8]
   110f4:	3901      	subs	r1, #1
   110f6:	60a1      	str	r1, [r4, #8]
   110f8:	1c51      	adds	r1, r2, #1
   110fa:	6021      	str	r1, [r4, #0]
   110fc:	7015      	strb	r5, [r2, #0]
   110fe:	6962      	ldr	r2, [r4, #20]
   11100:	429a      	cmp	r2, r3
   11102:	d027      	beq.n	11154 <__swbuf_r+0x98>
   11104:	89a3      	ldrh	r3, [r4, #12]
   11106:	07db      	lsls	r3, r3, #31
   11108:	d501      	bpl.n	1110e <__swbuf_r+0x52>
   1110a:	2d0a      	cmp	r5, #10
   1110c:	d022      	beq.n	11154 <__swbuf_r+0x98>
   1110e:	4638      	mov	r0, r7
   11110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11112:	4621      	mov	r1, r4
   11114:	4630      	mov	r0, r6
   11116:	f7ff fddf 	bl	10cd8 <__swsetup_r>
   1111a:	bb08      	cbnz	r0, 11160 <__swbuf_r+0xa4>
   1111c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11120:	6923      	ldr	r3, [r4, #16]
   11122:	b290      	uxth	r0, r2
   11124:	b2ed      	uxtb	r5, r5
   11126:	0481      	lsls	r1, r0, #18
   11128:	462f      	mov	r7, r5
   1112a:	d4dc      	bmi.n	110e6 <__swbuf_r+0x2a>
   1112c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11130:	81a2      	strh	r2, [r4, #12]
   11132:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11134:	6961      	ldr	r1, [r4, #20]
   11136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1113a:	6662      	str	r2, [r4, #100]	; 0x64
   1113c:	6822      	ldr	r2, [r4, #0]
   1113e:	1ad3      	subs	r3, r2, r3
   11140:	4299      	cmp	r1, r3
   11142:	dcd5      	bgt.n	110f0 <__swbuf_r+0x34>
   11144:	4621      	mov	r1, r4
   11146:	4630      	mov	r0, r6
   11148:	f7fd fb20 	bl	e78c <_fflush_r>
   1114c:	b940      	cbnz	r0, 11160 <__swbuf_r+0xa4>
   1114e:	6822      	ldr	r2, [r4, #0]
   11150:	2301      	movs	r3, #1
   11152:	e7ce      	b.n	110f2 <__swbuf_r+0x36>
   11154:	4621      	mov	r1, r4
   11156:	4630      	mov	r0, r6
   11158:	f7fd fb18 	bl	e78c <_fflush_r>
   1115c:	2800      	cmp	r0, #0
   1115e:	d0d6      	beq.n	1110e <__swbuf_r+0x52>
   11160:	f04f 37ff 	mov.w	r7, #4294967295
   11164:	e7d3      	b.n	1110e <__swbuf_r+0x52>
   11166:	f7fa f9f5 	bl	b554 <__sinit>
   1116a:	e7af      	b.n	110cc <__swbuf_r+0x10>

0001116c <_fstat_r>:
   1116c:	b570      	push	{r4, r5, r6, lr}
   1116e:	460c      	mov	r4, r1
   11170:	4d08      	ldr	r5, [pc, #32]	; (11194 <_fstat_r+0x28>)
   11172:	4603      	mov	r3, r0
   11174:	2600      	movs	r6, #0
   11176:	4620      	mov	r0, r4
   11178:	4611      	mov	r1, r2
   1117a:	461c      	mov	r4, r3
   1117c:	602e      	str	r6, [r5, #0]
   1117e:	f7f7 ff1d 	bl	8fbc <_fstat>
   11182:	1c43      	adds	r3, r0, #1
   11184:	d000      	beq.n	11188 <_fstat_r+0x1c>
   11186:	bd70      	pop	{r4, r5, r6, pc}
   11188:	682b      	ldr	r3, [r5, #0]
   1118a:	2b00      	cmp	r3, #0
   1118c:	d0fb      	beq.n	11186 <_fstat_r+0x1a>
   1118e:	6023      	str	r3, [r4, #0]
   11190:	bd70      	pop	{r4, r5, r6, pc}
   11192:	bf00      	nop
   11194:	200053dc 	.word	0x200053dc

00011198 <_isatty_r>:
   11198:	b538      	push	{r3, r4, r5, lr}
   1119a:	4d07      	ldr	r5, [pc, #28]	; (111b8 <_isatty_r+0x20>)
   1119c:	2200      	movs	r2, #0
   1119e:	4604      	mov	r4, r0
   111a0:	4608      	mov	r0, r1
   111a2:	602a      	str	r2, [r5, #0]
   111a4:	f7f7 ff10 	bl	8fc8 <_isatty>
   111a8:	1c43      	adds	r3, r0, #1
   111aa:	d000      	beq.n	111ae <_isatty_r+0x16>
   111ac:	bd38      	pop	{r3, r4, r5, pc}
   111ae:	682b      	ldr	r3, [r5, #0]
   111b0:	2b00      	cmp	r3, #0
   111b2:	d0fb      	beq.n	111ac <_isatty_r+0x14>
   111b4:	6023      	str	r3, [r4, #0]
   111b6:	bd38      	pop	{r3, r4, r5, pc}
   111b8:	200053dc 	.word	0x200053dc
   111bc:	00000000 	.word	0x00000000

000111c0 <___reboot_Teensyduino__veneer>:
   111c0:	f85f f000 	ldr.w	pc, [pc]	; 111c4 <___reboot_Teensyduino__veneer+0x4>
   111c4:	60001d55 	.word	0x60001d55

000111c8 <___init_veneer>:
   111c8:	f85f f000 	ldr.w	pc, [pc]	; 111cc <___init_veneer+0x4>
   111cc:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

000111d0 <_fini>:
   111d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111d2:	bf00      	nop
