
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc79 	bl	60001e28 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc4c 	bl	60001e20 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc31 	bl	60001e10 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc2b 	bl	60001e08 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	000115d8 	.word	0x000115d8
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60013538 	.word	0x60013538
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	0000913d 	.word	0x0000913d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000a555 	.word	0x0000a555
600015f4:	20018868 	.word	0x20018868
600015f8:	0000a559 	.word	0x0000a559
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001886c 	.word	0x2001886c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9f6 	bl	60001e18 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	200188a3 	.word	0x200188a3
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018858 	.word	0x20018858
60001c50:	20018854 	.word	0x20018854
60001c54:	2001885c 	.word	0x2001885c
60001c58:	20018860 	.word	0x20018860
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	00009319 	.word	0x00009319

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8dc 	bl	60001e38 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f8b1 	bl	60001e40 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f899 	bl	60001e30 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	00009501 	.word	0x00009501

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	2001889d 	.word	0x2001889d

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__main_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__main_veneer+0x4>
60001e0c:	00008f95 	.word	0x00008f95

60001e10 <____libc_init_array_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <____libc_init_array_veneer+0x4>
60001e14:	0000be79 	.word	0x0000be79

60001e18 <__sm_set_pool_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__sm_set_pool_veneer+0x4>
60001e1c:	0000aa4d 	.word	0x0000aa4d

60001e20 <__pwm_init_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__pwm_init_veneer+0x4>
60001e24:	0000a8e5 	.word	0x0000a8e5

60001e28 <__set_arm_clock_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__set_arm_clock_veneer+0x4>
60001e2c:	0000a579 	.word	0x0000a579

60001e30 <__memset_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__memset_veneer+0x4>
60001e34:	0000bbc1 	.word	0x0000bbc1

60001e38 <__usb_init_serialnumber_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__usb_init_serialnumber_veneer+0x4>
60001e3c:	00009c71 	.word	0x00009c71

60001e40 <__delay_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__delay_veneer+0x4>
60001e44:	00008e7d 	.word	0x00008e7d

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 000088d9                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	60019000 	.word	0x60019000

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f008 fd6d 	bl	8b4c <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f008 fd67 	bl	8b4c <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f008 fd61 	bl	8b4c <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f008 fcc9 	bl	8a3c <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f008 fcc5 	bl	8a3c <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f008 fcc2 	bl	8a3c <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <Print::println(char const*) [clone .isra.0]>:
      cc:	b538      	push	{r3, r4, r5, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	b149      	cbz	r1, e6 <Print::println(char const*) [clone .isra.0]+0x1a>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4608      	mov	r0, r1
      d4:	460d      	mov	r5, r1
      d6:	f00c f8d3 	bl	c280 <strlen>
      da:	6823      	ldr	r3, [r4, #0]
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	4602      	mov	r2, r0
      de:	4629      	mov	r1, r5
      e0:	685b      	ldr	r3, [r3, #4]
        return("");
      e2:	4620      	mov	r0, r4
      e4:	4798      	blx	r3
      e6:	4620      	mov	r0, r4
      e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}
      ec:	f008 bc50 	b.w	8990 <Print::println()>

000000f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>:
      f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      f4:	b093      	sub	sp, #76	; 0x4c
      f6:	460c      	mov	r4, r1
      f8:	4607      	mov	r7, r0
      fa:	2100      	movs	r1, #0
      fc:	a802      	add	r0, sp, #8
      fe:	9301      	str	r3, [sp, #4]
     100:	4691      	mov	r9, r2
     102:	f8df 8340 	ldr.w	r8, [pc, #832]	; 444 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x354>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f008 fcd5 	bl	8ab4 <String::String(char const*)>
     10a:	2334      	movs	r3, #52	; 0x34
     10c:	fb03 8304 	mla	r3, r3, r4, r8
	if (newbuffer) {
     110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	2b02      	cmp	r3, #2
		capacity = maxStrLen;
     116:	d022      	beq.n	15e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x6e>
     118:	eb04 0644 	add.w	r6, r4, r4, lsl #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	2b03      	cmp	r3, #3
     11e:	ad0e      	add	r5, sp, #56	; 0x38
     120:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	ea4f 0686 	mov.w	r6, r6, lsl #2
     128:	d068      	beq.n	1fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x10c>
	mask = p->mask;
	if (pinmode & mask) {
     12a:	eb08 0106 	add.w	r1, r8, r6
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4628      	mov	r0, r5
     130:	f008 fc50 	bl	89d4 <String::String(String const&)>
	mask = p->mask;
     134:	49ae      	ldr	r1, [pc, #696]	; (3f0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x300>)
	if (pinmode & mask) {
     136:	4628      	mov	r0, r5
     138:	f008 fd88 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	a902      	add	r1, sp, #8
     13e:	f008 fd7d 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     142:	4601      	mov	r1, r0
     144:	4638      	mov	r0, r7
     146:	f008 fc45 	bl	89d4 <String::String(String const&)>
     14a:	4628      	mov	r0, r5
     14c:	f008 fc76 	bl	8a3c <String::~String()>
     150:	a802      	add	r0, sp, #8
     152:	f008 fc73 	bl	8a3c <String::~String()>
     156:	4638      	mov	r0, r7
     158:	b013      	add	sp, #76	; 0x4c
     15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
     162:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	2210      	movs	r2, #16
     168:	4649      	mov	r1, r9
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
     16e:	4650      	mov	r0, sl
     170:	f008 fcb4 	bl	8adc <String::String(int, unsigned char)>
     174:	499f      	ldr	r1, [pc, #636]	; (3f4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x304>)
     176:	00b6      	lsls	r6, r6, #2
     178:	ad0e      	add	r5, sp, #56	; 0x38
     17a:	f106 0b10 	add.w	fp, r6, #16
     17e:	44c3      	add	fp, r8
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	4658      	mov	r0, fp
     182:	f008 fd71 	bl	8c68 <String::equals(char const*) const>
     186:	2800      	cmp	r0, #0
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     188:	f040 8097 	bne.w	2ba <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ca>
     18c:	499a      	ldr	r1, [pc, #616]	; (3f8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x308>)
     18e:	4658      	mov	r0, fp
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	f008 fd6a 	bl	8c68 <String::equals(char const*) const>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	2800      	cmp	r0, #0
     196:	d060      	beq.n	25a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x16a>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4998      	ldr	r1, [pc, #608]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     19a:	4628      	mov	r0, r5
     19c:	f008 fc8a 	bl	8ab4 <String::String(char const*)>
     1a0:	4651      	mov	r1, sl
     1a2:	4628      	mov	r0, r5
     1a4:	f008 fd4a 	bl	8c3c <operator+(StringSumHelper const&, String const&)>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	4601      	mov	r1, r0
     1aa:	a802      	add	r0, sp, #8
     1ac:	f008 fcc6 	bl	8b3c <String::operator=(String const&)>

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1b0:	4628      	mov	r0, r5
     1b2:	f008 fc43 	bl	8a3c <String::~String()>

	// write out computed CTRL
	port->CTRL = ctrl;
     1b6:	4992      	ldr	r1, [pc, #584]	; (400 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x310>)

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	4658      	mov	r0, fp
     1ba:	f008 fd55 	bl	8c68 <String::equals(char const*) const>
     1be:	2800      	cmp	r0, #0
     1c0:	f040 8103 	bne.w	3ca <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2da>

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	498f      	ldr	r1, [pc, #572]	; (404 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x314>)
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c6:	4658      	mov	r0, fp
     1c8:	f008 fd4e 	bl	8c68 <String::equals(char const*) const>
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1cc:	2800      	cmp	r0, #0
     1ce:	f040 80e9 	bne.w	3a4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2b4>
	port->STAT = c;
     1d2:	498d      	ldr	r1, [pc, #564]	; (408 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x318>)

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d4:	4658      	mov	r0, fp
     1d6:	f008 fd47 	bl	8c68 <String::equals(char const*) const>
     1da:	2800      	cmp	r0, #0
     1dc:	f040 80cf 	bne.w	37e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x28e>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	9b04      	ldr	r3, [sp, #16]
     1e2:	2b00      	cmp	r3, #0
};
     1e4:	f000 80b8 	beq.w	358 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x268>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	4650      	mov	r0, sl
     1ea:	f008 fc27 	bl	8a3c <String::~String()>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	2334      	movs	r3, #52	; 0x34
     1f0:	fb03 8404 	mla	r4, r3, r4, r8
     1f4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
     1f8:	2b03      	cmp	r3, #3
     1fa:	d196      	bne.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     1fc:	f106 0410 	add.w	r4, r6, #16
     200:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	4649      	mov	r1, r9
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     206:	2210      	movs	r2, #16
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     208:	a806      	add	r0, sp, #24
     20a:	4444      	add	r4, r8
     20c:	f008 fc66 	bl	8adc <String::String(int, unsigned char)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	9901      	ldr	r1, [sp, #4]
     212:	2210      	movs	r2, #16
     214:	4650      	mov	r0, sl
     216:	f008 fc61 	bl	8adc <String::String(int, unsigned char)>
     21a:	497c      	ldr	r1, [pc, #496]	; (40c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x31c>)
     21c:	4620      	mov	r0, r4
     21e:	f008 fd23 	bl	8c68 <String::equals(char const*) const>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	2800      	cmp	r0, #0
     224:	d159      	bne.n	2da <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ea>
     226:	497a      	ldr	r1, [pc, #488]	; (410 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x320>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	4620      	mov	r0, r4
     22a:	f008 fd1d 	bl	8c68 <String::equals(char const*) const>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22e:	2800      	cmp	r0, #0
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	d17c      	bne.n	32c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x23c>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	4978      	ldr	r1, [pc, #480]	; (414 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x324>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	4620      	mov	r0, r4
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	f008 fd17 	bl	8c68 <String::equals(char const*) const>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	2800      	cmp	r0, #0
     23c:	d160      	bne.n	300 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x210>
     23e:	4976      	ldr	r1, [pc, #472]	; (418 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x328>)
};
     240:	4620      	mov	r0, r4
     242:	f008 fd11 	bl	8c68 <String::equals(char const*) const>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     246:	bb10      	cbnz	r0, 28e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x19e>
     248:	9b04      	ldr	r3, [sp, #16]
     24a:	b16b      	cbz	r3, 268 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x178>
     24c:	4650      	mov	r0, sl
     24e:	f008 fbf5 	bl	8a3c <String::~String()>
     252:	a806      	add	r0, sp, #24
     254:	f008 fbf2 	bl	8a3c <String::~String()>
     258:	e767      	b.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     25a:	4970      	ldr	r1, [pc, #448]	; (41c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x32c>)
     25c:	4658      	mov	r0, fp
     25e:	f008 fd03 	bl	8c68 <String::equals(char const*) const>
     262:	2800      	cmp	r0, #0
     264:	d198      	bne.n	198 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xa8>
     266:	e7a6      	b.n	1b6 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xc6>
     268:	496d      	ldr	r1, [pc, #436]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     26a:	4628      	mov	r0, r5
     26c:	f008 fc22 	bl	8ab4 <String::String(char const*)>
     270:	4621      	mov	r1, r4
     272:	4628      	mov	r0, r5
     274:	f008 fce2 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
		}
		if (instr->operands == "(ind)") {
			s = "($" + operand2 + operand1 + ")"; 
		}
		if (s.length() == 0) {
			s = "<unknown_format: " + instr->operands + ">";
     278:	496a      	ldr	r1, [pc, #424]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     27a:	f008 fce7 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     27e:	4601      	mov	r1, r0
     280:	a802      	add	r0, sp, #8
     282:	f008 fc5b 	bl	8b3c <String::operator=(String const&)>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     286:	4628      	mov	r0, r5
     288:	f008 fbd8 	bl	8a3c <String::~String()>
     28c:	e7de      	b.n	24c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x15c>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     28e:	4966      	ldr	r1, [pc, #408]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     290:	4628      	mov	r0, r5
     292:	f008 fc0f 	bl	8ab4 <String::String(char const*)>
			s = "($" + operand2 + operand1 + ")"; 
     296:	4651      	mov	r1, sl
     298:	4628      	mov	r0, r5
     29a:	f008 fccf 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     29e:	a906      	add	r1, sp, #24
     2a0:	f008 fccc 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     2a4:	4961      	ldr	r1, [pc, #388]	; (42c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x33c>)
     2a6:	f008 fcd1 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     2aa:	4601      	mov	r1, r0
     2ac:	a802      	add	r0, sp, #8
     2ae:	f008 fc45 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     2b2:	4628      	mov	r0, r5
     2b4:	f008 fbc2 	bl	8a3c <String::~String()>
     2b8:	e7c6      	b.n	248 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x158>
	StringSumHelper(const char *p) : String(p) {}
     2ba:	495d      	ldr	r1, [pc, #372]	; (430 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x340>)
     2bc:	4628      	mov	r0, r5
     2be:	f008 fbf9 	bl	8ab4 <String::String(char const*)>
			s = "#$" + operand;
     2c2:	4651      	mov	r1, sl
     2c4:	4628      	mov	r0, r5
     2c6:	f008 fcb9 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     2ca:	4601      	mov	r1, r0
     2cc:	a802      	add	r0, sp, #8
     2ce:	f008 fc35 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     2d2:	4628      	mov	r0, r5
     2d4:	f008 fbb2 	bl	8a3c <String::~String()>
     2d8:	e758      	b.n	18c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x9c>
	StringSumHelper(const char *p) : String(p) {}
     2da:	4948      	ldr	r1, [pc, #288]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     2dc:	4628      	mov	r0, r5
     2de:	f008 fbe9 	bl	8ab4 <String::String(char const*)>
			s = "$" + operand2 + operand1; 
     2e2:	4651      	mov	r1, sl
     2e4:	4628      	mov	r0, r5
     2e6:	f008 fca9 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     2ea:	a906      	add	r1, sp, #24
     2ec:	f008 fca6 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     2f0:	4601      	mov	r1, r0
     2f2:	a802      	add	r0, sp, #8
     2f4:	f008 fc22 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     2f8:	4628      	mov	r0, r5
     2fa:	f008 fb9f 	bl	8a3c <String::~String()>
     2fe:	e792      	b.n	226 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x136>
	StringSumHelper(const char *p) : String(p) {}
     300:	493e      	ldr	r1, [pc, #248]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     302:	4628      	mov	r0, r5
     304:	f008 fbd6 	bl	8ab4 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",Y"; 
     308:	4651      	mov	r1, sl
     30a:	4628      	mov	r0, r5
     30c:	f008 fc96 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     310:	a906      	add	r1, sp, #24
     312:	f008 fc93 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     316:	4947      	ldr	r1, [pc, #284]	; (434 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x344>)
     318:	f008 fc98 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     31c:	4601      	mov	r1, r0
     31e:	a802      	add	r0, sp, #8
     320:	f008 fc0c 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     324:	4628      	mov	r0, r5
     326:	f008 fb89 	bl	8a3c <String::~String()>
     32a:	e788      	b.n	23e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x14e>
	StringSumHelper(const char *p) : String(p) {}
     32c:	4933      	ldr	r1, [pc, #204]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     32e:	4628      	mov	r0, r5
     330:	f008 fbc0 	bl	8ab4 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",X"; 
     334:	4651      	mov	r1, sl
     336:	4628      	mov	r0, r5
     338:	f008 fc80 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     33c:	a906      	add	r1, sp, #24
     33e:	f008 fc7d 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     342:	493d      	ldr	r1, [pc, #244]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     344:	f008 fc82 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     348:	4601      	mov	r1, r0
     34a:	a802      	add	r0, sp, #8
     34c:	f008 fbf6 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     350:	4628      	mov	r0, r5
     352:	f008 fb73 	bl	8a3c <String::~String()>
     356:	e76c      	b.n	232 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x142>
	StringSumHelper(const char *p) : String(p) {}
     358:	4931      	ldr	r1, [pc, #196]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     35a:	4628      	mov	r0, r5
     35c:	f008 fbaa 	bl	8ab4 <String::String(char const*)>
			s = "<unknown_format: " + instr->operands + ">";
     360:	4659      	mov	r1, fp
     362:	4628      	mov	r0, r5
     364:	f008 fc6a 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     368:	492e      	ldr	r1, [pc, #184]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     36a:	f008 fc6f 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     36e:	4601      	mov	r1, r0
     370:	a802      	add	r0, sp, #8
     372:	f008 fbe3 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     376:	4628      	mov	r0, r5
     378:	f008 fb60 	bl	8a3c <String::~String()>
     37c:	e734      	b.n	1e8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf8>
	StringSumHelper(const char *p) : String(p) {}
     37e:	491f      	ldr	r1, [pc, #124]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     380:	4628      	mov	r0, r5
     382:	f008 fb97 	bl	8ab4 <String::String(char const*)>
			s = "$" + operand + ",X"; 
     386:	4651      	mov	r1, sl
     388:	4628      	mov	r0, r5
     38a:	f008 fc57 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     38e:	492a      	ldr	r1, [pc, #168]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     390:	f008 fc5c 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     394:	4601      	mov	r1, r0
     396:	a802      	add	r0, sp, #8
     398:	f008 fbd0 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     39c:	4628      	mov	r0, r5
     39e:	f008 fb4d 	bl	8a3c <String::~String()>
     3a2:	e71d      	b.n	1e0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf0>
	StringSumHelper(const char *p) : String(p) {}
     3a4:	4920      	ldr	r1, [pc, #128]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3a6:	4628      	mov	r0, r5
     3a8:	f008 fb84 	bl	8ab4 <String::String(char const*)>
			s = "($" + operand + "),Y"; 
     3ac:	4651      	mov	r1, sl
     3ae:	4628      	mov	r0, r5
     3b0:	f008 fc44 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     3b4:	4921      	ldr	r1, [pc, #132]	; (43c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x34c>)
     3b6:	f008 fc49 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     3ba:	4601      	mov	r1, r0
     3bc:	a802      	add	r0, sp, #8
     3be:	f008 fbbd 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     3c2:	4628      	mov	r0, r5
     3c4:	f008 fb3a 	bl	8a3c <String::~String()>
     3c8:	e703      	b.n	1d2 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xe2>
	StringSumHelper(const char *p) : String(p) {}
     3ca:	4917      	ldr	r1, [pc, #92]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3cc:	4628      	mov	r0, r5
     3ce:	f008 fb71 	bl	8ab4 <String::String(char const*)>
			s = "($" + operand + ",X)"; 
     3d2:	4651      	mov	r1, sl
     3d4:	4628      	mov	r0, r5
     3d6:	f008 fc31 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
     3da:	4919      	ldr	r1, [pc, #100]	; (440 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x350>)
     3dc:	f008 fc36 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
     3e0:	4601      	mov	r1, r0
     3e2:	a802      	add	r0, sp, #8
     3e4:	f008 fbaa 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
     3e8:	4628      	mov	r0, r5
     3ea:	f008 fb27 	bl	8a3c <String::~String()>
     3ee:	e6e9      	b.n	1c4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xd4>
     3f0:	20000420 	.word	0x20000420
     3f4:	200003d8 	.word	0x200003d8
     3f8:	200003e0 	.word	0x200003e0
     3fc:	200003e4 	.word	0x200003e4
     400:	200003ec 	.word	0x200003ec
     404:	200003f8 	.word	0x200003f8
     408:	20000404 	.word	0x20000404
     40c:	20000428 	.word	0x20000428
     410:	2000042c 	.word	0x2000042c
     414:	20000434 	.word	0x20000434
     418:	20000440 	.word	0x20000440
     41c:	200003e8 	.word	0x200003e8
     420:	20000410 	.word	0x20000410
     424:	20000424 	.word	0x20000424
     428:	200003f4 	.word	0x200003f4
     42c:	20000444 	.word	0x20000444
     430:	200003dc 	.word	0x200003dc
     434:	2000043c 	.word	0x2000043c
     438:	2000040c 	.word	0x2000040c
     43c:	20000990 	.word	0x20000990
     440:	200003f0 	.word	0x200003f0
     444:	20015418 	.word	0x20015418

00000448 <OpDecoder::~OpDecoder()>:
struct OpDecoder {
     448:	b510      	push	{r4, lr}
     44a:	4604      	mov	r4, r0
     44c:	3020      	adds	r0, #32
     44e:	f008 faf5 	bl	8a3c <String::~String()>
     452:	f104 0010 	add.w	r0, r4, #16
     456:	f008 faf1 	bl	8a3c <String::~String()>
     45a:	4620      	mov	r0, r4
     45c:	f008 faee 	bl	8a3c <String::~String()>
     460:	4620      	mov	r0, r4
     462:	bd10      	pop	{r4, pc}

00000464 <initialize_opcode_info()>:
	}
	
	return(instr->opcode + " " + s);
}

void initialize_opcode_info() {
     464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     468:	4cb7      	ldr	r4, [pc, #732]	; (748 <initialize_opcode_info()+0x2e4>)
     46a:	b08f      	sub	sp, #60	; 0x3c

	for (int i=0; i<=255; i++)
		opcode_info[i] = {"---","",0,1};
     46c:	4eb7      	ldr	r6, [pc, #732]	; (74c <initialize_opcode_info()+0x2e8>)
     46e:	f504 5750 	add.w	r7, r4, #13312	; 0x3400
     472:	4db7      	ldr	r5, [pc, #732]	; (750 <initialize_opcode_info()+0x2ec>)
     474:	2234      	movs	r2, #52	; 0x34
     476:	2100      	movs	r1, #0
     478:	a801      	add	r0, sp, #4
     47a:	f00b fba1 	bl	bbc0 <memset>
     47e:	4631      	mov	r1, r6
     480:	a801      	add	r0, sp, #4
     482:	f008 fb17 	bl	8ab4 <String::String(char const*)>
     486:	4629      	mov	r1, r5
     488:	a805      	add	r0, sp, #20
     48a:	f008 fb13 	bl	8ab4 <String::String(char const*)>
     48e:	220a      	movs	r2, #10
     490:	2100      	movs	r1, #0
     492:	a809      	add	r0, sp, #36	; 0x24
     494:	f008 fb22 	bl	8adc <String::String(int, unsigned char)>
     498:	2301      	movs	r3, #1
struct OpDecoder {
     49a:	4620      	mov	r0, r4
     49c:	a901      	add	r1, sp, #4
		opcode_info[i] = {"---","",0,1};
     49e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
struct OpDecoder {
     4a2:	f008 fb53 	bl	8b4c <String::operator=(String&&)>
     4a6:	f104 0010 	add.w	r0, r4, #16
     4aa:	a905      	add	r1, sp, #20
     4ac:	f008 fb4e 	bl	8b4c <String::operator=(String&&)>
     4b0:	a909      	add	r1, sp, #36	; 0x24
     4b2:	f104 0020 	add.w	r0, r4, #32
	for (int i=0; i<=255; i++)
     4b6:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
     4b8:	f008 fb48 	bl	8b4c <String::operator=(String&&)>
     4bc:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
     4c0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
     4c4:	a809      	add	r0, sp, #36	; 0x24
     4c6:	f804 2c04 	strb.w	r2, [r4, #-4]
     4ca:	f804 3c03 	strb.w	r3, [r4, #-3]
     4ce:	f008 fab5 	bl	8a3c <String::~String()>
     4d2:	a805      	add	r0, sp, #20
     4d4:	f008 fab2 	bl	8a3c <String::~String()>
     4d8:	a801      	add	r0, sp, #4
     4da:	f008 faaf 	bl	8a3c <String::~String()>
	for (int i=0; i<=255; i++)
     4de:	42bc      	cmp	r4, r7
     4e0:	d1c8      	bne.n	474 <initialize_opcode_info()+0x10>
		
	opcode_info[0x00] = {"BRK","","B",7,1};
     4e2:	499c      	ldr	r1, [pc, #624]	; (754 <initialize_opcode_info()+0x2f0>)
     4e4:	a801      	add	r0, sp, #4
     4e6:	f008 fae5 	bl	8ab4 <String::String(char const*)>
     4ea:	4999      	ldr	r1, [pc, #612]	; (750 <initialize_opcode_info()+0x2ec>)
     4ec:	a805      	add	r0, sp, #20
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     4ee:	f240 2706 	movw	r7, #518	; 0x206
	opcode_info[0x00] = {"BRK","","B",7,1};
     4f2:	f008 fadf 	bl	8ab4 <String::String(char const*)>
     4f6:	4998      	ldr	r1, [pc, #608]	; (758 <initialize_opcode_info()+0x2f4>)
     4f8:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     4fa:	f240 2803 	movw	r8, #515	; 0x203
	opcode_info[0x00] = {"BRK","","B",7,1};
     4fe:	f008 fad9 	bl	8ab4 <String::String(char const*)>
     502:	f240 1307 	movw	r3, #263	; 0x107
     506:	a901      	add	r1, sp, #4
     508:	488f      	ldr	r0, [pc, #572]	; (748 <initialize_opcode_info()+0x2e4>)
     50a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     50e:	f7ff fdab 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     512:	a801      	add	r0, sp, #4
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     514:	f240 2a05 	movw	sl, #517	; 0x205
	opcode_info[0x00] = {"BRK","","B",7,1};
     518:	f7ff ff96 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     51c:	498f      	ldr	r1, [pc, #572]	; (75c <initialize_opcode_info()+0x2f8>)
     51e:	a801      	add	r0, sp, #4
	opcode_info[0x08] = {"PHP","","",3,1};
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
     520:	f240 2602 	movw	r6, #514	; 0x202
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     524:	f008 fac6 	bl	8ab4 <String::String(char const*)>
     528:	498d      	ldr	r1, [pc, #564]	; (760 <initialize_opcode_info()+0x2fc>)
     52a:	a805      	add	r0, sp, #20
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
     52c:	f44f 7581 	mov.w	r5, #258	; 0x102
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     530:	f008 fac0 	bl	8ab4 <String::String(char const*)>
     534:	498b      	ldr	r1, [pc, #556]	; (764 <initialize_opcode_info()+0x300>)
     536:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     538:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     53c:	f008 faba 	bl	8ab4 <String::String(char const*)>
     540:	a901      	add	r1, sp, #4
     542:	4889      	ldr	r0, [pc, #548]	; (768 <initialize_opcode_info()+0x304>)
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
     544:	f240 3b06 	movw	fp, #774	; 0x306
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     548:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     54c:	f7ff fd8c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     550:	a801      	add	r0, sp, #4
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     552:	f44f 7901 	mov.w	r9, #516	; 0x204
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     556:	f7ff ff77 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     55a:	4980      	ldr	r1, [pc, #512]	; (75c <initialize_opcode_info()+0x2f8>)
     55c:	a801      	add	r0, sp, #4
     55e:	f008 faa9 	bl	8ab4 <String::String(char const*)>
     562:	4982      	ldr	r1, [pc, #520]	; (76c <initialize_opcode_info()+0x308>)
     564:	a805      	add	r0, sp, #20
     566:	f008 faa5 	bl	8ab4 <String::String(char const*)>
     56a:	497e      	ldr	r1, [pc, #504]	; (764 <initialize_opcode_info()+0x300>)
     56c:	a809      	add	r0, sp, #36	; 0x24
     56e:	f008 faa1 	bl	8ab4 <String::String(char const*)>
     572:	a901      	add	r1, sp, #4
     574:	487e      	ldr	r0, [pc, #504]	; (770 <initialize_opcode_info()+0x30c>)
     576:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     57a:	f7ff fd75 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     57e:	a801      	add	r0, sp, #4
     580:	f7ff ff62 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     584:	497b      	ldr	r1, [pc, #492]	; (774 <initialize_opcode_info()+0x310>)
     586:	a801      	add	r0, sp, #4
     588:	f008 fa94 	bl	8ab4 <String::String(char const*)>
     58c:	4977      	ldr	r1, [pc, #476]	; (76c <initialize_opcode_info()+0x308>)
     58e:	a805      	add	r0, sp, #20
     590:	f008 fa90 	bl	8ab4 <String::String(char const*)>
     594:	4978      	ldr	r1, [pc, #480]	; (778 <initialize_opcode_info()+0x314>)
     596:	a809      	add	r0, sp, #36	; 0x24
     598:	f008 fa8c 	bl	8ab4 <String::String(char const*)>
     59c:	a901      	add	r1, sp, #4
     59e:	4877      	ldr	r0, [pc, #476]	; (77c <initialize_opcode_info()+0x318>)
     5a0:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     5a4:	f7ff fd60 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5a8:	a801      	add	r0, sp, #4
     5aa:	f7ff ff4d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x08] = {"PHP","","",3,1};
     5ae:	4974      	ldr	r1, [pc, #464]	; (780 <initialize_opcode_info()+0x31c>)
     5b0:	a801      	add	r0, sp, #4
     5b2:	f008 fa7f 	bl	8ab4 <String::String(char const*)>
     5b6:	4966      	ldr	r1, [pc, #408]	; (750 <initialize_opcode_info()+0x2ec>)
     5b8:	a805      	add	r0, sp, #20
     5ba:	f008 fa7b 	bl	8ab4 <String::String(char const*)>
     5be:	4964      	ldr	r1, [pc, #400]	; (750 <initialize_opcode_info()+0x2ec>)
     5c0:	a809      	add	r0, sp, #36	; 0x24
     5c2:	f008 fa77 	bl	8ab4 <String::String(char const*)>
     5c6:	f240 1303 	movw	r3, #259	; 0x103
     5ca:	a901      	add	r1, sp, #4
     5cc:	486d      	ldr	r0, [pc, #436]	; (784 <initialize_opcode_info()+0x320>)
     5ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     5d2:	f7ff fd49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5d6:	a801      	add	r0, sp, #4
     5d8:	f7ff ff36 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
     5dc:	495f      	ldr	r1, [pc, #380]	; (75c <initialize_opcode_info()+0x2f8>)
     5de:	a801      	add	r0, sp, #4
     5e0:	f008 fa68 	bl	8ab4 <String::String(char const*)>
     5e4:	4968      	ldr	r1, [pc, #416]	; (788 <initialize_opcode_info()+0x324>)
     5e6:	a805      	add	r0, sp, #20
     5e8:	f008 fa64 	bl	8ab4 <String::String(char const*)>
     5ec:	495d      	ldr	r1, [pc, #372]	; (764 <initialize_opcode_info()+0x300>)
     5ee:	a809      	add	r0, sp, #36	; 0x24
     5f0:	f008 fa60 	bl	8ab4 <String::String(char const*)>
     5f4:	a901      	add	r1, sp, #4
     5f6:	4865      	ldr	r0, [pc, #404]	; (78c <initialize_opcode_info()+0x328>)
     5f8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     5fc:	f7ff fd34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     600:	a801      	add	r0, sp, #4
     602:	f7ff ff21 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
     606:	495b      	ldr	r1, [pc, #364]	; (774 <initialize_opcode_info()+0x310>)
     608:	a801      	add	r0, sp, #4
     60a:	f008 fa53 	bl	8ab4 <String::String(char const*)>
     60e:	4960      	ldr	r1, [pc, #384]	; (790 <initialize_opcode_info()+0x32c>)
     610:	a805      	add	r0, sp, #20
     612:	f008 fa4f 	bl	8ab4 <String::String(char const*)>
     616:	4958      	ldr	r1, [pc, #352]	; (778 <initialize_opcode_info()+0x314>)
     618:	a809      	add	r0, sp, #36	; 0x24
     61a:	f008 fa4b 	bl	8ab4 <String::String(char const*)>
     61e:	a901      	add	r1, sp, #4
     620:	485c      	ldr	r0, [pc, #368]	; (794 <initialize_opcode_info()+0x330>)
     622:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     626:	f7ff fd1f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     62a:	a801      	add	r0, sp, #4
     62c:	f7ff ff0c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     630:	494a      	ldr	r1, [pc, #296]	; (75c <initialize_opcode_info()+0x2f8>)
     632:	a801      	add	r0, sp, #4
     634:	f008 fa3e 	bl	8ab4 <String::String(char const*)>
     638:	4957      	ldr	r1, [pc, #348]	; (798 <initialize_opcode_info()+0x334>)
     63a:	a805      	add	r0, sp, #20
     63c:	f008 fa3a 	bl	8ab4 <String::String(char const*)>
     640:	4948      	ldr	r1, [pc, #288]	; (764 <initialize_opcode_info()+0x300>)
     642:	a809      	add	r0, sp, #36	; 0x24
     644:	f008 fa36 	bl	8ab4 <String::String(char const*)>
     648:	a901      	add	r1, sp, #4
     64a:	4854      	ldr	r0, [pc, #336]	; (79c <initialize_opcode_info()+0x338>)
     64c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     650:	f7ff fd0a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     654:	a801      	add	r0, sp, #4
     656:	f7ff fef7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
     65a:	4946      	ldr	r1, [pc, #280]	; (774 <initialize_opcode_info()+0x310>)
     65c:	a801      	add	r0, sp, #4
     65e:	f008 fa29 	bl	8ab4 <String::String(char const*)>
     662:	494d      	ldr	r1, [pc, #308]	; (798 <initialize_opcode_info()+0x334>)
     664:	a805      	add	r0, sp, #20
     666:	f008 fa25 	bl	8ab4 <String::String(char const*)>
     66a:	4943      	ldr	r1, [pc, #268]	; (778 <initialize_opcode_info()+0x314>)
     66c:	a809      	add	r0, sp, #36	; 0x24
     66e:	f008 fa21 	bl	8ab4 <String::String(char const*)>
     672:	a901      	add	r1, sp, #4
     674:	484a      	ldr	r0, [pc, #296]	; (7a0 <initialize_opcode_info()+0x33c>)
     676:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     67a:	f7ff fcf5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     67e:	a801      	add	r0, sp, #4
     680:	f7ff fee2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x10] = {"BPL","rel","",2,2};
     684:	4947      	ldr	r1, [pc, #284]	; (7a4 <initialize_opcode_info()+0x340>)
     686:	a801      	add	r0, sp, #4
     688:	f008 fa14 	bl	8ab4 <String::String(char const*)>
     68c:	4946      	ldr	r1, [pc, #280]	; (7a8 <initialize_opcode_info()+0x344>)
     68e:	a805      	add	r0, sp, #20
     690:	f008 fa10 	bl	8ab4 <String::String(char const*)>
     694:	492e      	ldr	r1, [pc, #184]	; (750 <initialize_opcode_info()+0x2ec>)
     696:	a809      	add	r0, sp, #36	; 0x24
     698:	f008 fa0c 	bl	8ab4 <String::String(char const*)>
     69c:	a901      	add	r1, sp, #4
     69e:	4843      	ldr	r0, [pc, #268]	; (7ac <initialize_opcode_info()+0x348>)
     6a0:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     6a4:	f7ff fce0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6a8:	a801      	add	r0, sp, #4
     6aa:	f7ff fecd 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
     6ae:	492b      	ldr	r1, [pc, #172]	; (75c <initialize_opcode_info()+0x2f8>)
     6b0:	a801      	add	r0, sp, #4
     6b2:	f008 f9ff 	bl	8ab4 <String::String(char const*)>
     6b6:	493e      	ldr	r1, [pc, #248]	; (7b0 <initialize_opcode_info()+0x34c>)
     6b8:	a805      	add	r0, sp, #20
     6ba:	f008 f9fb 	bl	8ab4 <String::String(char const*)>
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <initialize_opcode_info()+0x300>)
     6c0:	a809      	add	r0, sp, #36	; 0x24
     6c2:	f008 f9f7 	bl	8ab4 <String::String(char const*)>
     6c6:	a901      	add	r1, sp, #4
     6c8:	483a      	ldr	r0, [pc, #232]	; (7b4 <initialize_opcode_info()+0x350>)
     6ca:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     6ce:	f7ff fccb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6d2:	a801      	add	r0, sp, #4
     6d4:	f7ff feb8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     6d8:	4920      	ldr	r1, [pc, #128]	; (75c <initialize_opcode_info()+0x2f8>)
     6da:	a801      	add	r0, sp, #4
     6dc:	f008 f9ea 	bl	8ab4 <String::String(char const*)>
     6e0:	4935      	ldr	r1, [pc, #212]	; (7b8 <initialize_opcode_info()+0x354>)
     6e2:	a805      	add	r0, sp, #20
     6e4:	f008 f9e6 	bl	8ab4 <String::String(char const*)>
     6e8:	491e      	ldr	r1, [pc, #120]	; (764 <initialize_opcode_info()+0x300>)
     6ea:	a809      	add	r0, sp, #36	; 0x24
     6ec:	f008 f9e2 	bl	8ab4 <String::String(char const*)>
     6f0:	a901      	add	r1, sp, #4
     6f2:	4832      	ldr	r0, [pc, #200]	; (7bc <initialize_opcode_info()+0x358>)
     6f4:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     6f8:	f7ff fcb6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6fc:	a801      	add	r0, sp, #4
     6fe:	f7ff fea3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     702:	491c      	ldr	r1, [pc, #112]	; (774 <initialize_opcode_info()+0x310>)
     704:	a801      	add	r0, sp, #4
     706:	f008 f9d5 	bl	8ab4 <String::String(char const*)>
     70a:	492b      	ldr	r1, [pc, #172]	; (7b8 <initialize_opcode_info()+0x354>)
     70c:	a805      	add	r0, sp, #20
     70e:	f008 f9d1 	bl	8ab4 <String::String(char const*)>
     712:	4919      	ldr	r1, [pc, #100]	; (778 <initialize_opcode_info()+0x314>)
     714:	a809      	add	r0, sp, #36	; 0x24
     716:	f008 f9cd 	bl	8ab4 <String::String(char const*)>
     71a:	a901      	add	r1, sp, #4
     71c:	4828      	ldr	r0, [pc, #160]	; (7c0 <initialize_opcode_info()+0x35c>)
     71e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     722:	f7ff fca1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     726:	a801      	add	r0, sp, #4
     728:	f7ff fe8e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     72c:	4925      	ldr	r1, [pc, #148]	; (7c4 <initialize_opcode_info()+0x360>)
     72e:	a801      	add	r0, sp, #4
     730:	f008 f9c0 	bl	8ab4 <String::String(char const*)>
     734:	4906      	ldr	r1, [pc, #24]	; (750 <initialize_opcode_info()+0x2ec>)
     736:	a805      	add	r0, sp, #20
     738:	f008 f9bc 	bl	8ab4 <String::String(char const*)>
     73c:	4922      	ldr	r1, [pc, #136]	; (7c8 <initialize_opcode_info()+0x364>)
     73e:	a809      	add	r0, sp, #36	; 0x24
     740:	f008 f9b8 	bl	8ab4 <String::String(char const*)>
     744:	a901      	add	r1, sp, #4
     746:	e041      	b.n	7cc <initialize_opcode_info()+0x368>
     748:	20015418 	.word	0x20015418
     74c:	20000964 	.word	0x20000964
     750:	200004f8 	.word	0x200004f8
     754:	20000968 	.word	0x20000968
     758:	2000096c 	.word	0x2000096c
     75c:	20000970 	.word	0x20000970
     760:	200003ec 	.word	0x200003ec
     764:	20000974 	.word	0x20000974
     768:	2001544c 	.word	0x2001544c
     76c:	200003e0 	.word	0x200003e0
     770:	2001551c 	.word	0x2001551c
     774:	20000978 	.word	0x20000978
     778:	2000097c 	.word	0x2000097c
     77c:	20015550 	.word	0x20015550
     780:	20000980 	.word	0x20000980
     784:	200155b8 	.word	0x200155b8
     788:	200003d8 	.word	0x200003d8
     78c:	200155ec 	.word	0x200155ec
     790:	20000984 	.word	0x20000984
     794:	20015620 	.word	0x20015620
     798:	20000428 	.word	0x20000428
     79c:	200156bc 	.word	0x200156bc
     7a0:	200156f0 	.word	0x200156f0
     7a4:	20000988 	.word	0x20000988
     7a8:	200003e8 	.word	0x200003e8
     7ac:	20015758 	.word	0x20015758
     7b0:	2000098c 	.word	0x2000098c
     7b4:	2001578c 	.word	0x2001578c
     7b8:	20000404 	.word	0x20000404
     7bc:	2001585c 	.word	0x2001585c
     7c0:	20015890 	.word	0x20015890
     7c4:	20000994 	.word	0x20000994
     7c8:	20000998 	.word	0x20000998
     7cc:	48b4      	ldr	r0, [pc, #720]	; (aa0 <initialize_opcode_info()+0x63c>)
     7ce:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     7d2:	f7ff fc49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7d6:	a801      	add	r0, sp, #4
     7d8:	f7ff fe36 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     7dc:	49b1      	ldr	r1, [pc, #708]	; (aa4 <initialize_opcode_info()+0x640>)
     7de:	a801      	add	r0, sp, #4
     7e0:	f008 f968 	bl	8ab4 <String::String(char const*)>
     7e4:	49b0      	ldr	r1, [pc, #704]	; (aa8 <initialize_opcode_info()+0x644>)
     7e6:	a805      	add	r0, sp, #20
     7e8:	f008 f964 	bl	8ab4 <String::String(char const*)>
     7ec:	49af      	ldr	r1, [pc, #700]	; (aac <initialize_opcode_info()+0x648>)
     7ee:	a809      	add	r0, sp, #36	; 0x24
     7f0:	f008 f960 	bl	8ab4 <String::String(char const*)>
     7f4:	a901      	add	r1, sp, #4
     7f6:	48ae      	ldr	r0, [pc, #696]	; (ab0 <initialize_opcode_info()+0x64c>)
     7f8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     7fc:	f7ff fc34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     800:	a801      	add	r0, sp, #4
     802:	f7ff fe21 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     806:	49a7      	ldr	r1, [pc, #668]	; (aa4 <initialize_opcode_info()+0x640>)
     808:	a801      	add	r0, sp, #4
     80a:	f008 f953 	bl	8ab4 <String::String(char const*)>
     80e:	49a9      	ldr	r1, [pc, #676]	; (ab4 <initialize_opcode_info()+0x650>)
     810:	a805      	add	r0, sp, #20
     812:	f008 f94f 	bl	8ab4 <String::String(char const*)>
     816:	49a5      	ldr	r1, [pc, #660]	; (aac <initialize_opcode_info()+0x648>)
     818:	a809      	add	r0, sp, #36	; 0x24
     81a:	f008 f94b 	bl	8ab4 <String::String(char const*)>
     81e:	a901      	add	r1, sp, #4
     820:	48a5      	ldr	r0, [pc, #660]	; (ab8 <initialize_opcode_info()+0x654>)
     822:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     826:	f7ff fc1f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     82a:	a801      	add	r0, sp, #4
     82c:	f7ff fe0c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     830:	49a2      	ldr	r1, [pc, #648]	; (abc <initialize_opcode_info()+0x658>)
     832:	a801      	add	r0, sp, #4
     834:	f008 f93e 	bl	8ab4 <String::String(char const*)>
     838:	499e      	ldr	r1, [pc, #632]	; (ab4 <initialize_opcode_info()+0x650>)
     83a:	a805      	add	r0, sp, #20
     83c:	f008 f93a 	bl	8ab4 <String::String(char const*)>
     840:	499f      	ldr	r1, [pc, #636]	; (ac0 <initialize_opcode_info()+0x65c>)
     842:	a809      	add	r0, sp, #36	; 0x24
     844:	f008 f936 	bl	8ab4 <String::String(char const*)>
     848:	f240 3307 	movw	r3, #775	; 0x307
     84c:	a901      	add	r1, sp, #4
     84e:	489d      	ldr	r0, [pc, #628]	; (ac4 <initialize_opcode_info()+0x660>)
     850:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     854:	f7ff fc08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     858:	a801      	add	r0, sp, #4
     85a:	f7ff fdf5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     85e:	499a      	ldr	r1, [pc, #616]	; (ac8 <initialize_opcode_info()+0x664>)
     860:	a801      	add	r0, sp, #4
     862:	f008 f927 	bl	8ab4 <String::String(char const*)>
     866:	4999      	ldr	r1, [pc, #612]	; (acc <initialize_opcode_info()+0x668>)
     868:	a805      	add	r0, sp, #20
     86a:	f008 f923 	bl	8ab4 <String::String(char const*)>
     86e:	4998      	ldr	r1, [pc, #608]	; (ad0 <initialize_opcode_info()+0x66c>)
     870:	a809      	add	r0, sp, #36	; 0x24
     872:	f008 f91f 	bl	8ab4 <String::String(char const*)>
     876:	a901      	add	r1, sp, #4
     878:	4896      	ldr	r0, [pc, #600]	; (ad4 <initialize_opcode_info()+0x670>)
     87a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     87e:	f7ff fbf3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     882:	a801      	add	r0, sp, #4
     884:	f7ff fde0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     888:	4993      	ldr	r1, [pc, #588]	; (ad8 <initialize_opcode_info()+0x674>)
     88a:	a801      	add	r0, sp, #4
     88c:	f008 f912 	bl	8ab4 <String::String(char const*)>
     890:	4992      	ldr	r1, [pc, #584]	; (adc <initialize_opcode_info()+0x678>)
     892:	a805      	add	r0, sp, #20
     894:	f008 f90e 	bl	8ab4 <String::String(char const*)>
     898:	4984      	ldr	r1, [pc, #528]	; (aac <initialize_opcode_info()+0x648>)
     89a:	a809      	add	r0, sp, #36	; 0x24
     89c:	f008 f90a 	bl	8ab4 <String::String(char const*)>
     8a0:	a901      	add	r1, sp, #4
     8a2:	488f      	ldr	r0, [pc, #572]	; (ae0 <initialize_opcode_info()+0x67c>)
     8a4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     8a8:	f7ff fbde 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8ac:	a801      	add	r0, sp, #4
     8ae:	f7ff fdcb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     8b2:	498c      	ldr	r1, [pc, #560]	; (ae4 <initialize_opcode_info()+0x680>)
     8b4:	a801      	add	r0, sp, #4
     8b6:	f008 f8fd 	bl	8ab4 <String::String(char const*)>
     8ba:	498b      	ldr	r1, [pc, #556]	; (ae8 <initialize_opcode_info()+0x684>)
     8bc:	a805      	add	r0, sp, #20
     8be:	f008 f8f9 	bl	8ab4 <String::String(char const*)>
     8c2:	498a      	ldr	r1, [pc, #552]	; (aec <initialize_opcode_info()+0x688>)
     8c4:	a809      	add	r0, sp, #36	; 0x24
     8c6:	f008 f8f5 	bl	8ab4 <String::String(char const*)>
     8ca:	a901      	add	r1, sp, #4
     8cc:	4888      	ldr	r0, [pc, #544]	; (af0 <initialize_opcode_info()+0x68c>)
     8ce:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     8d2:	f7ff fbc9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8d6:	a801      	add	r0, sp, #4
     8d8:	f7ff fdb6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     8dc:	497e      	ldr	r1, [pc, #504]	; (ad8 <initialize_opcode_info()+0x674>)
     8de:	a801      	add	r0, sp, #4
     8e0:	f008 f8e8 	bl	8ab4 <String::String(char const*)>
     8e4:	4980      	ldr	r1, [pc, #512]	; (ae8 <initialize_opcode_info()+0x684>)
     8e6:	a805      	add	r0, sp, #20
     8e8:	f008 f8e4 	bl	8ab4 <String::String(char const*)>
     8ec:	496f      	ldr	r1, [pc, #444]	; (aac <initialize_opcode_info()+0x648>)
     8ee:	a809      	add	r0, sp, #36	; 0x24
     8f0:	f008 f8e0 	bl	8ab4 <String::String(char const*)>
     8f4:	a901      	add	r1, sp, #4
     8f6:	487f      	ldr	r0, [pc, #508]	; (af4 <initialize_opcode_info()+0x690>)
     8f8:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     8fc:	f7ff fbb4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     900:	a801      	add	r0, sp, #4
     902:	f7ff fda1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     906:	497c      	ldr	r1, [pc, #496]	; (af8 <initialize_opcode_info()+0x694>)
     908:	a801      	add	r0, sp, #4
     90a:	f008 f8d3 	bl	8ab4 <String::String(char const*)>
     90e:	4976      	ldr	r1, [pc, #472]	; (ae8 <initialize_opcode_info()+0x684>)
     910:	a805      	add	r0, sp, #20
     912:	f008 f8cf 	bl	8ab4 <String::String(char const*)>
     916:	496a      	ldr	r1, [pc, #424]	; (ac0 <initialize_opcode_info()+0x65c>)
     918:	a809      	add	r0, sp, #36	; 0x24
     91a:	f008 f8cb 	bl	8ab4 <String::String(char const*)>
     91e:	a901      	add	r1, sp, #4
     920:	4876      	ldr	r0, [pc, #472]	; (afc <initialize_opcode_info()+0x698>)
     922:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     926:	f7ff fb9f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     92a:	a801      	add	r0, sp, #4
     92c:	f7ff fd8c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     930:	4973      	ldr	r1, [pc, #460]	; (b00 <initialize_opcode_info()+0x69c>)
     932:	a801      	add	r0, sp, #4
     934:	f008 f8be 	bl	8ab4 <String::String(char const*)>
     938:	4965      	ldr	r1, [pc, #404]	; (ad0 <initialize_opcode_info()+0x66c>)
     93a:	a805      	add	r0, sp, #20
     93c:	f008 f8ba 	bl	8ab4 <String::String(char const*)>
     940:	4963      	ldr	r1, [pc, #396]	; (ad0 <initialize_opcode_info()+0x66c>)
     942:	a809      	add	r0, sp, #36	; 0x24
     944:	f008 f8b6 	bl	8ab4 <String::String(char const*)>
     948:	a801      	add	r0, sp, #4
     94a:	f44f 7182 	mov.w	r1, #260	; 0x104
     94e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     952:	4601      	mov	r1, r0
     954:	486b      	ldr	r0, [pc, #428]	; (b04 <initialize_opcode_info()+0x6a0>)
     956:	f7ff fb87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     95a:	a801      	add	r0, sp, #4
     95c:	f7ff fd74 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     960:	495d      	ldr	r1, [pc, #372]	; (ad8 <initialize_opcode_info()+0x674>)
     962:	a801      	add	r0, sp, #4
     964:	f008 f8a6 	bl	8ab4 <String::String(char const*)>
     968:	4967      	ldr	r1, [pc, #412]	; (b08 <initialize_opcode_info()+0x6a4>)
     96a:	a805      	add	r0, sp, #20
     96c:	f008 f8a2 	bl	8ab4 <String::String(char const*)>
     970:	494e      	ldr	r1, [pc, #312]	; (aac <initialize_opcode_info()+0x648>)
     972:	a809      	add	r0, sp, #36	; 0x24
     974:	f008 f89e 	bl	8ab4 <String::String(char const*)>
     978:	a801      	add	r0, sp, #4
     97a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     97e:	4601      	mov	r1, r0
     980:	4862      	ldr	r0, [pc, #392]	; (b0c <initialize_opcode_info()+0x6a8>)
     982:	f7ff fb71 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     986:	a801      	add	r0, sp, #4
     988:	f7ff fd5e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     98c:	495a      	ldr	r1, [pc, #360]	; (af8 <initialize_opcode_info()+0x694>)
     98e:	a801      	add	r0, sp, #4
     990:	f008 f890 	bl	8ab4 <String::String(char const*)>
     994:	495e      	ldr	r1, [pc, #376]	; (b10 <initialize_opcode_info()+0x6ac>)
     996:	a805      	add	r0, sp, #20
     998:	f008 f88c 	bl	8ab4 <String::String(char const*)>
     99c:	4948      	ldr	r1, [pc, #288]	; (ac0 <initialize_opcode_info()+0x65c>)
     99e:	a809      	add	r0, sp, #36	; 0x24
     9a0:	f008 f888 	bl	8ab4 <String::String(char const*)>
     9a4:	a801      	add	r0, sp, #4
     9a6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     9aa:	4601      	mov	r1, r0
     9ac:	4859      	ldr	r0, [pc, #356]	; (b14 <initialize_opcode_info()+0x6b0>)
     9ae:	f7ff fb5b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9b2:	a801      	add	r0, sp, #4
     9b4:	f7ff fd48 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     9b8:	494a      	ldr	r1, [pc, #296]	; (ae4 <initialize_opcode_info()+0x680>)
     9ba:	a801      	add	r0, sp, #4
     9bc:	f008 f87a 	bl	8ab4 <String::String(char const*)>
     9c0:	4942      	ldr	r1, [pc, #264]	; (acc <initialize_opcode_info()+0x668>)
     9c2:	a805      	add	r0, sp, #20
     9c4:	f008 f876 	bl	8ab4 <String::String(char const*)>
     9c8:	4948      	ldr	r1, [pc, #288]	; (aec <initialize_opcode_info()+0x688>)
     9ca:	a809      	add	r0, sp, #36	; 0x24
     9cc:	f008 f872 	bl	8ab4 <String::String(char const*)>
     9d0:	a801      	add	r0, sp, #4
     9d2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     9d6:	4601      	mov	r1, r0
     9d8:	484f      	ldr	r0, [pc, #316]	; (b18 <initialize_opcode_info()+0x6b4>)
     9da:	f7ff fb45 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9de:	a801      	add	r0, sp, #4
     9e0:	f7ff fd32 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     9e4:	493c      	ldr	r1, [pc, #240]	; (ad8 <initialize_opcode_info()+0x674>)
     9e6:	a801      	add	r0, sp, #4
     9e8:	f008 f864 	bl	8ab4 <String::String(char const*)>
     9ec:	4937      	ldr	r1, [pc, #220]	; (acc <initialize_opcode_info()+0x668>)
     9ee:	a805      	add	r0, sp, #20
     9f0:	f008 f860 	bl	8ab4 <String::String(char const*)>
     9f4:	492d      	ldr	r1, [pc, #180]	; (aac <initialize_opcode_info()+0x648>)
     9f6:	a809      	add	r0, sp, #36	; 0x24
     9f8:	f008 f85c 	bl	8ab4 <String::String(char const*)>
     9fc:	a801      	add	r0, sp, #4
     9fe:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     a02:	4601      	mov	r1, r0
     a04:	4845      	ldr	r0, [pc, #276]	; (b1c <initialize_opcode_info()+0x6b8>)
     a06:	f7ff fb2f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a0a:	a801      	add	r0, sp, #4
     a0c:	f7ff fd1c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     a10:	4939      	ldr	r1, [pc, #228]	; (af8 <initialize_opcode_info()+0x694>)
     a12:	a801      	add	r0, sp, #4
     a14:	f008 f84e 	bl	8ab4 <String::String(char const*)>
     a18:	492c      	ldr	r1, [pc, #176]	; (acc <initialize_opcode_info()+0x668>)
     a1a:	a805      	add	r0, sp, #20
     a1c:	f008 f84a 	bl	8ab4 <String::String(char const*)>
     a20:	4927      	ldr	r1, [pc, #156]	; (ac0 <initialize_opcode_info()+0x65c>)
     a22:	a809      	add	r0, sp, #36	; 0x24
     a24:	f008 f846 	bl	8ab4 <String::String(char const*)>
     a28:	a801      	add	r0, sp, #4
     a2a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     a2e:	4601      	mov	r1, r0
     a30:	483b      	ldr	r0, [pc, #236]	; (b20 <initialize_opcode_info()+0x6bc>)
     a32:	f7ff fb19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a36:	a801      	add	r0, sp, #4
     a38:	f7ff fd06 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     a3c:	4939      	ldr	r1, [pc, #228]	; (b24 <initialize_opcode_info()+0x6c0>)
     a3e:	a801      	add	r0, sp, #4
     a40:	f008 f838 	bl	8ab4 <String::String(char const*)>
     a44:	4938      	ldr	r1, [pc, #224]	; (b28 <initialize_opcode_info()+0x6c4>)
     a46:	a805      	add	r0, sp, #20
     a48:	f008 f834 	bl	8ab4 <String::String(char const*)>
     a4c:	4920      	ldr	r1, [pc, #128]	; (ad0 <initialize_opcode_info()+0x66c>)
     a4e:	a809      	add	r0, sp, #36	; 0x24
     a50:	f008 f830 	bl	8ab4 <String::String(char const*)>
     a54:	a801      	add	r0, sp, #4
     a56:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     a5a:	4601      	mov	r1, r0
     a5c:	4833      	ldr	r0, [pc, #204]	; (b2c <initialize_opcode_info()+0x6c8>)
     a5e:	f7ff fb03 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a62:	a801      	add	r0, sp, #4
     a64:	f7ff fcf0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     a68:	491b      	ldr	r1, [pc, #108]	; (ad8 <initialize_opcode_info()+0x674>)
     a6a:	a801      	add	r0, sp, #4
     a6c:	f008 f822 	bl	8ab4 <String::String(char const*)>
     a70:	492f      	ldr	r1, [pc, #188]	; (b30 <initialize_opcode_info()+0x6cc>)
     a72:	a805      	add	r0, sp, #20
     a74:	f008 f81e 	bl	8ab4 <String::String(char const*)>
     a78:	490c      	ldr	r1, [pc, #48]	; (aac <initialize_opcode_info()+0x648>)
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f008 f81a 	bl	8ab4 <String::String(char const*)>
     a80:	a801      	add	r0, sp, #4
     a82:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     a86:	4601      	mov	r1, r0
     a88:	482a      	ldr	r0, [pc, #168]	; (b34 <initialize_opcode_info()+0x6d0>)
     a8a:	f7ff faed 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a8e:	a801      	add	r0, sp, #4
     a90:	f7ff fcda 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     a94:	4910      	ldr	r1, [pc, #64]	; (ad8 <initialize_opcode_info()+0x674>)
     a96:	a801      	add	r0, sp, #4
     a98:	f008 f80c 	bl	8ab4 <String::String(char const*)>
     a9c:	e04c      	b.n	b38 <initialize_opcode_info()+0x6d4>
     a9e:	bf00      	nop
     aa0:	200158f8 	.word	0x200158f8
     aa4:	20000970 	.word	0x20000970
     aa8:	20000434 	.word	0x20000434
     aac:	20000974 	.word	0x20000974
     ab0:	2001592c 	.word	0x2001592c
     ab4:	2000042c 	.word	0x2000042c
     ab8:	200159fc 	.word	0x200159fc
     abc:	20000978 	.word	0x20000978
     ac0:	2000097c 	.word	0x2000097c
     ac4:	20015a30 	.word	0x20015a30
     ac8:	2000099c 	.word	0x2000099c
     acc:	20000428 	.word	0x20000428
     ad0:	200004f8 	.word	0x200004f8
     ad4:	20015a98 	.word	0x20015a98
     ad8:	200009a0 	.word	0x200009a0
     adc:	200003ec 	.word	0x200003ec
     ae0:	20015acc 	.word	0x20015acc
     ae4:	200009a4 	.word	0x200009a4
     ae8:	200003e0 	.word	0x200003e0
     aec:	200009a8 	.word	0x200009a8
     af0:	20015b68 	.word	0x20015b68
     af4:	20015b9c 	.word	0x20015b9c
     af8:	200009ac 	.word	0x200009ac
     afc:	20015bd0 	.word	0x20015bd0
     b00:	200009b0 	.word	0x200009b0
     b04:	20015c38 	.word	0x20015c38
     b08:	200003d8 	.word	0x200003d8
     b0c:	20015c6c 	.word	0x20015c6c
     b10:	20000984 	.word	0x20000984
     b14:	20015ca0 	.word	0x20015ca0
     b18:	20015d08 	.word	0x20015d08
     b1c:	20015d3c 	.word	0x20015d3c
     b20:	20015d70 	.word	0x20015d70
     b24:	200009b4 	.word	0x200009b4
     b28:	200003e8 	.word	0x200003e8
     b2c:	20015dd8 	.word	0x20015dd8
     b30:	2000098c 	.word	0x2000098c
     b34:	20015e0c 	.word	0x20015e0c
     b38:	49c4      	ldr	r1, [pc, #784]	; (e4c <initialize_opcode_info()+0x9e8>)
     b3a:	a805      	add	r0, sp, #20
     b3c:	f007 ffba 	bl	8ab4 <String::String(char const*)>
     b40:	49c3      	ldr	r1, [pc, #780]	; (e50 <initialize_opcode_info()+0x9ec>)
     b42:	a809      	add	r0, sp, #36	; 0x24
     b44:	f007 ffb6 	bl	8ab4 <String::String(char const*)>
     b48:	a801      	add	r0, sp, #4
     b4a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     b4e:	4601      	mov	r1, r0
     b50:	48c0      	ldr	r0, [pc, #768]	; (e54 <initialize_opcode_info()+0x9f0>)
     b52:	f7ff fa89 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b56:	a801      	add	r0, sp, #4
     b58:	f7ff fc76 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     b5c:	49be      	ldr	r1, [pc, #760]	; (e58 <initialize_opcode_info()+0x9f4>)
     b5e:	a801      	add	r0, sp, #4
     b60:	f007 ffa8 	bl	8ab4 <String::String(char const*)>
     b64:	49b9      	ldr	r1, [pc, #740]	; (e4c <initialize_opcode_info()+0x9e8>)
     b66:	a805      	add	r0, sp, #20
     b68:	f007 ffa4 	bl	8ab4 <String::String(char const*)>
     b6c:	49bb      	ldr	r1, [pc, #748]	; (e5c <initialize_opcode_info()+0x9f8>)
     b6e:	a809      	add	r0, sp, #36	; 0x24
     b70:	f007 ffa0 	bl	8ab4 <String::String(char const*)>
     b74:	a801      	add	r0, sp, #4
     b76:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     b7a:	4601      	mov	r1, r0
     b7c:	48b8      	ldr	r0, [pc, #736]	; (e60 <initialize_opcode_info()+0x9fc>)
     b7e:	f7ff fa73 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b82:	a801      	add	r0, sp, #4
     b84:	f7ff fc60 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     b88:	49b6      	ldr	r1, [pc, #728]	; (e64 <initialize_opcode_info()+0xa00>)
     b8a:	a801      	add	r0, sp, #4
     b8c:	f007 ff92 	bl	8ab4 <String::String(char const*)>
     b90:	49b5      	ldr	r1, [pc, #724]	; (e68 <initialize_opcode_info()+0xa04>)
     b92:	a805      	add	r0, sp, #20
     b94:	f007 ff8e 	bl	8ab4 <String::String(char const*)>
     b98:	49b4      	ldr	r1, [pc, #720]	; (e6c <initialize_opcode_info()+0xa08>)
     b9a:	a809      	add	r0, sp, #36	; 0x24
     b9c:	f007 ff8a 	bl	8ab4 <String::String(char const*)>
     ba0:	a801      	add	r0, sp, #4
     ba2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     ba6:	4601      	mov	r1, r0
     ba8:	48b1      	ldr	r0, [pc, #708]	; (e70 <initialize_opcode_info()+0xa0c>)
     baa:	f7ff fa5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bae:	a801      	add	r0, sp, #4
     bb0:	f7ff fc4a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     bb4:	49af      	ldr	r1, [pc, #700]	; (e74 <initialize_opcode_info()+0xa10>)
     bb6:	a801      	add	r0, sp, #4
     bb8:	f007 ff7c 	bl	8ab4 <String::String(char const*)>
     bbc:	49ae      	ldr	r1, [pc, #696]	; (e78 <initialize_opcode_info()+0xa14>)
     bbe:	a805      	add	r0, sp, #20
     bc0:	f007 ff78 	bl	8ab4 <String::String(char const*)>
     bc4:	49a2      	ldr	r1, [pc, #648]	; (e50 <initialize_opcode_info()+0x9ec>)
     bc6:	a809      	add	r0, sp, #36	; 0x24
     bc8:	f007 ff74 	bl	8ab4 <String::String(char const*)>
     bcc:	a801      	add	r0, sp, #4
     bce:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     bd2:	4601      	mov	r1, r0
     bd4:	48a9      	ldr	r0, [pc, #676]	; (e7c <initialize_opcode_info()+0xa18>)
     bd6:	f7ff fa47 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bda:	a801      	add	r0, sp, #4
     bdc:	f7ff fc34 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     be0:	49a4      	ldr	r1, [pc, #656]	; (e74 <initialize_opcode_info()+0xa10>)
     be2:	a801      	add	r0, sp, #4
     be4:	f007 ff66 	bl	8ab4 <String::String(char const*)>
     be8:	49a5      	ldr	r1, [pc, #660]	; (e80 <initialize_opcode_info()+0xa1c>)
     bea:	a805      	add	r0, sp, #20
     bec:	f007 ff62 	bl	8ab4 <String::String(char const*)>
     bf0:	4997      	ldr	r1, [pc, #604]	; (e50 <initialize_opcode_info()+0x9ec>)
     bf2:	a809      	add	r0, sp, #36	; 0x24
     bf4:	f007 ff5e 	bl	8ab4 <String::String(char const*)>
     bf8:	a801      	add	r0, sp, #4
     bfa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     bfe:	4601      	mov	r1, r0
     c00:	48a0      	ldr	r0, [pc, #640]	; (e84 <initialize_opcode_info()+0xa20>)
     c02:	f7ff fa31 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c06:	a801      	add	r0, sp, #4
     c08:	f7ff fc1e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     c0c:	4992      	ldr	r1, [pc, #584]	; (e58 <initialize_opcode_info()+0x9f4>)
     c0e:	a801      	add	r0, sp, #4
     c10:	f007 ff50 	bl	8ab4 <String::String(char const*)>
     c14:	499a      	ldr	r1, [pc, #616]	; (e80 <initialize_opcode_info()+0xa1c>)
     c16:	a805      	add	r0, sp, #20
     c18:	f007 ff4c 	bl	8ab4 <String::String(char const*)>
     c1c:	498f      	ldr	r1, [pc, #572]	; (e5c <initialize_opcode_info()+0x9f8>)
     c1e:	a809      	add	r0, sp, #36	; 0x24
     c20:	f007 ff48 	bl	8ab4 <String::String(char const*)>
     c24:	a801      	add	r0, sp, #4
     c26:	f240 3307 	movw	r3, #775	; 0x307
     c2a:	4601      	mov	r1, r0
     c2c:	4896      	ldr	r0, [pc, #600]	; (e88 <initialize_opcode_info()+0xa24>)
     c2e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c32:	f7ff fa19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c36:	a801      	add	r0, sp, #4
     c38:	f7ff fc06 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     c3c:	4993      	ldr	r1, [pc, #588]	; (e8c <initialize_opcode_info()+0xa28>)
     c3e:	a801      	add	r0, sp, #4
     c40:	f007 ff38 	bl	8ab4 <String::String(char const*)>
     c44:	4988      	ldr	r1, [pc, #544]	; (e68 <initialize_opcode_info()+0xa04>)
     c46:	a805      	add	r0, sp, #20
     c48:	f007 ff34 	bl	8ab4 <String::String(char const*)>
     c4c:	4990      	ldr	r1, [pc, #576]	; (e90 <initialize_opcode_info()+0xa2c>)
     c4e:	a809      	add	r0, sp, #36	; 0x24
     c50:	f007 ff30 	bl	8ab4 <String::String(char const*)>
     c54:	f10d 0c04 	add.w	ip, sp, #4
     c58:	f44f 7083 	mov.w	r0, #262	; 0x106
     c5c:	4661      	mov	r1, ip
     c5e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     c62:	488c      	ldr	r0, [pc, #560]	; (e94 <initialize_opcode_info()+0xa30>)
     c64:	f7ff fa00 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c68:	f10d 0c04 	add.w	ip, sp, #4
     c6c:	4660      	mov	r0, ip
     c6e:	f7ff fbeb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     c72:	f10d 0c04 	add.w	ip, sp, #4
     c76:	4988      	ldr	r1, [pc, #544]	; (e98 <initialize_opcode_info()+0xa34>)
     c78:	4660      	mov	r0, ip
     c7a:	f007 ff1b 	bl	8ab4 <String::String(char const*)>
     c7e:	f10d 0c14 	add.w	ip, sp, #20
     c82:	4986      	ldr	r1, [pc, #536]	; (e9c <initialize_opcode_info()+0xa38>)
     c84:	4660      	mov	r0, ip
     c86:	f007 ff15 	bl	8ab4 <String::String(char const*)>
     c8a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     c8e:	4970      	ldr	r1, [pc, #448]	; (e50 <initialize_opcode_info()+0x9ec>)
     c90:	4660      	mov	r0, ip
     c92:	f007 ff0f 	bl	8ab4 <String::String(char const*)>
     c96:	f10d 0c04 	add.w	ip, sp, #4
     c9a:	4881      	ldr	r0, [pc, #516]	; (ea0 <initialize_opcode_info()+0xa3c>)
     c9c:	4661      	mov	r1, ip
     c9e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     ca2:	f7ff f9e1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ca6:	f10d 0c04 	add.w	ip, sp, #4
     caa:	4660      	mov	r0, ip
     cac:	f7ff fbcc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     cb0:	f10d 0c04 	add.w	ip, sp, #4
     cb4:	4978      	ldr	r1, [pc, #480]	; (e98 <initialize_opcode_info()+0xa34>)
     cb6:	4660      	mov	r0, ip
     cb8:	f007 fefc 	bl	8ab4 <String::String(char const*)>
     cbc:	f10d 0c14 	add.w	ip, sp, #20
     cc0:	4978      	ldr	r1, [pc, #480]	; (ea4 <initialize_opcode_info()+0xa40>)
     cc2:	4660      	mov	r0, ip
     cc4:	f007 fef6 	bl	8ab4 <String::String(char const*)>
     cc8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     ccc:	4960      	ldr	r1, [pc, #384]	; (e50 <initialize_opcode_info()+0x9ec>)
     cce:	4660      	mov	r0, ip
     cd0:	f007 fef0 	bl	8ab4 <String::String(char const*)>
     cd4:	f10d 0c04 	add.w	ip, sp, #4
     cd8:	4873      	ldr	r0, [pc, #460]	; (ea8 <initialize_opcode_info()+0xa44>)
     cda:	4661      	mov	r1, ip
     cdc:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     ce0:	f7ff f9c2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ce4:	f10d 0c04 	add.w	ip, sp, #4
     ce8:	4660      	mov	r0, ip
     cea:	f7ff fbad 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     cee:	f10d 0c04 	add.w	ip, sp, #4
     cf2:	496e      	ldr	r1, [pc, #440]	; (eac <initialize_opcode_info()+0xa48>)
     cf4:	4660      	mov	r0, ip
     cf6:	f007 fedd 	bl	8ab4 <String::String(char const*)>
     cfa:	f10d 0c14 	add.w	ip, sp, #20
     cfe:	4969      	ldr	r1, [pc, #420]	; (ea4 <initialize_opcode_info()+0xa40>)
     d00:	4660      	mov	r0, ip
     d02:	f007 fed7 	bl	8ab4 <String::String(char const*)>
     d06:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     d0a:	4954      	ldr	r1, [pc, #336]	; (e5c <initialize_opcode_info()+0x9f8>)
     d0c:	4660      	mov	r0, ip
     d0e:	f007 fed1 	bl	8ab4 <String::String(char const*)>
     d12:	f10d 0c04 	add.w	ip, sp, #4
     d16:	4866      	ldr	r0, [pc, #408]	; (eb0 <initialize_opcode_info()+0xa4c>)
     d18:	4661      	mov	r1, ip
     d1a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     d1e:	f7ff f9a3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d22:	f10d 0c04 	add.w	ip, sp, #4
     d26:	4660      	mov	r0, ip
     d28:	f7ff fb8e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     d2c:	f10d 0c04 	add.w	ip, sp, #4
     d30:	4960      	ldr	r1, [pc, #384]	; (eb4 <initialize_opcode_info()+0xa50>)
     d32:	4660      	mov	r0, ip
     d34:	f007 febe 	bl	8ab4 <String::String(char const*)>
     d38:	f10d 0c14 	add.w	ip, sp, #20
     d3c:	494a      	ldr	r1, [pc, #296]	; (e68 <initialize_opcode_info()+0xa04>)
     d3e:	4660      	mov	r0, ip
     d40:	f007 feb8 	bl	8ab4 <String::String(char const*)>
     d44:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     d48:	4947      	ldr	r1, [pc, #284]	; (e68 <initialize_opcode_info()+0xa04>)
     d4a:	4660      	mov	r0, ip
     d4c:	f007 feb2 	bl	8ab4 <String::String(char const*)>
     d50:	f240 1203 	movw	r2, #259	; 0x103
     d54:	4858      	ldr	r0, [pc, #352]	; (eb8 <initialize_opcode_info()+0xa54>)
     d56:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     d5a:	aa01      	add	r2, sp, #4
     d5c:	4611      	mov	r1, r2
     d5e:	f7ff f983 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d62:	aa01      	add	r2, sp, #4
     d64:	4610      	mov	r0, r2
     d66:	f7ff fb6f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     d6a:	aa01      	add	r2, sp, #4
     d6c:	494a      	ldr	r1, [pc, #296]	; (e98 <initialize_opcode_info()+0xa34>)
     d6e:	4610      	mov	r0, r2
     d70:	f007 fea0 	bl	8ab4 <String::String(char const*)>
     d74:	aa05      	add	r2, sp, #20
     d76:	4951      	ldr	r1, [pc, #324]	; (ebc <initialize_opcode_info()+0xa58>)
     d78:	4610      	mov	r0, r2
     d7a:	f007 fe9b 	bl	8ab4 <String::String(char const*)>
     d7e:	aa09      	add	r2, sp, #36	; 0x24
     d80:	4933      	ldr	r1, [pc, #204]	; (e50 <initialize_opcode_info()+0x9ec>)
     d82:	4610      	mov	r0, r2
     d84:	f007 fe96 	bl	8ab4 <String::String(char const*)>
     d88:	aa01      	add	r2, sp, #4
     d8a:	484d      	ldr	r0, [pc, #308]	; (ec0 <initialize_opcode_info()+0xa5c>)
     d8c:	4611      	mov	r1, r2
     d8e:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     d92:	f7ff f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d96:	aa01      	add	r2, sp, #4
     d98:	4610      	mov	r0, r2
     d9a:	f7ff fb55 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     d9e:	aa01      	add	r2, sp, #4
     da0:	4942      	ldr	r1, [pc, #264]	; (eac <initialize_opcode_info()+0xa48>)
     da2:	4610      	mov	r0, r2
     da4:	f007 fe86 	bl	8ab4 <String::String(char const*)>
     da8:	aa05      	add	r2, sp, #20
     daa:	4946      	ldr	r1, [pc, #280]	; (ec4 <initialize_opcode_info()+0xa60>)
     dac:	4610      	mov	r0, r2
     dae:	f007 fe81 	bl	8ab4 <String::String(char const*)>
     db2:	aa09      	add	r2, sp, #36	; 0x24
     db4:	4929      	ldr	r1, [pc, #164]	; (e5c <initialize_opcode_info()+0x9f8>)
     db6:	4610      	mov	r0, r2
     db8:	f007 fe7c 	bl	8ab4 <String::String(char const*)>
     dbc:	aa01      	add	r2, sp, #4
     dbe:	4842      	ldr	r0, [pc, #264]	; (ec8 <initialize_opcode_info()+0xa64>)
     dc0:	4611      	mov	r1, r2
     dc2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     dc6:	f7ff f94f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dca:	aa01      	add	r2, sp, #4
     dcc:	4610      	mov	r0, r2
     dce:	f7ff fb3b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     dd2:	aa01      	add	r2, sp, #4
     dd4:	493d      	ldr	r1, [pc, #244]	; (ecc <initialize_opcode_info()+0xa68>)
     dd6:	4610      	mov	r0, r2
     dd8:	f007 fe6c 	bl	8ab4 <String::String(char const*)>
     ddc:	aa05      	add	r2, sp, #20
     dde:	493c      	ldr	r1, [pc, #240]	; (ed0 <initialize_opcode_info()+0xa6c>)
     de0:	4610      	mov	r0, r2
     de2:	f007 fe67 	bl	8ab4 <String::String(char const*)>
     de6:	aa09      	add	r2, sp, #36	; 0x24
     de8:	491f      	ldr	r1, [pc, #124]	; (e68 <initialize_opcode_info()+0xa04>)
     dea:	4610      	mov	r0, r2
     dec:	f007 fe62 	bl	8ab4 <String::String(char const*)>
     df0:	aa01      	add	r2, sp, #4
     df2:	f240 3303 	movw	r3, #771	; 0x303
     df6:	4837      	ldr	r0, [pc, #220]	; (ed4 <initialize_opcode_info()+0xa70>)
     df8:	4611      	mov	r1, r2
     dfa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     dfe:	f7ff f933 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e02:	aa01      	add	r2, sp, #4
     e04:	4610      	mov	r0, r2
     e06:	f7ff fb1f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     e0a:	aa01      	add	r2, sp, #4
     e0c:	4922      	ldr	r1, [pc, #136]	; (e98 <initialize_opcode_info()+0xa34>)
     e0e:	4610      	mov	r0, r2
     e10:	f007 fe50 	bl	8ab4 <String::String(char const*)>
     e14:	aa05      	add	r2, sp, #20
     e16:	492e      	ldr	r1, [pc, #184]	; (ed0 <initialize_opcode_info()+0xa6c>)
     e18:	4610      	mov	r0, r2
     e1a:	f007 fe4b 	bl	8ab4 <String::String(char const*)>
     e1e:	aa09      	add	r2, sp, #36	; 0x24
     e20:	490b      	ldr	r1, [pc, #44]	; (e50 <initialize_opcode_info()+0x9ec>)
     e22:	4610      	mov	r0, r2
     e24:	f007 fe46 	bl	8ab4 <String::String(char const*)>
     e28:	aa01      	add	r2, sp, #4
     e2a:	482b      	ldr	r0, [pc, #172]	; (ed8 <initialize_opcode_info()+0xa74>)
     e2c:	4611      	mov	r1, r2
     e2e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     e32:	f7ff f919 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e36:	aa01      	add	r2, sp, #4
     e38:	4610      	mov	r0, r2
     e3a:	f7ff fb05 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     e3e:	aa01      	add	r2, sp, #4
     e40:	491a      	ldr	r1, [pc, #104]	; (eac <initialize_opcode_info()+0xa48>)
     e42:	4610      	mov	r0, r2
     e44:	f007 fe36 	bl	8ab4 <String::String(char const*)>
     e48:	e048      	b.n	edc <initialize_opcode_info()+0xa78>
     e4a:	bf00      	nop
     e4c:	20000404 	.word	0x20000404
     e50:	20000974 	.word	0x20000974
     e54:	20015edc 	.word	0x20015edc
     e58:	200009ac 	.word	0x200009ac
     e5c:	2000097c 	.word	0x2000097c
     e60:	20015f10 	.word	0x20015f10
     e64:	200009b8 	.word	0x200009b8
     e68:	200004f8 	.word	0x200004f8
     e6c:	20000998 	.word	0x20000998
     e70:	20015f78 	.word	0x20015f78
     e74:	200009a0 	.word	0x200009a0
     e78:	20000434 	.word	0x20000434
     e7c:	20015fac 	.word	0x20015fac
     e80:	2000042c 	.word	0x2000042c
     e84:	2001607c 	.word	0x2001607c
     e88:	200160b0 	.word	0x200160b0
     e8c:	200009bc 	.word	0x200009bc
     e90:	200009c0 	.word	0x200009c0
     e94:	20016118 	.word	0x20016118
     e98:	200009c8 	.word	0x200009c8
     e9c:	200003ec 	.word	0x200003ec
     ea0:	2001614c 	.word	0x2001614c
     ea4:	200003e0 	.word	0x200003e0
     ea8:	2001621c 	.word	0x2001621c
     eac:	200009cc 	.word	0x200009cc
     eb0:	20016250 	.word	0x20016250
     eb4:	200009d0 	.word	0x200009d0
     eb8:	200162b8 	.word	0x200162b8
     ebc:	200003d8 	.word	0x200003d8
     ec0:	200162ec 	.word	0x200162ec
     ec4:	20000984 	.word	0x20000984
     ec8:	20016320 	.word	0x20016320
     ecc:	200009d4 	.word	0x200009d4
     ed0:	20000428 	.word	0x20000428
     ed4:	20016388 	.word	0x20016388
     ed8:	200163bc 	.word	0x200163bc
     edc:	aa05      	add	r2, sp, #20
     ede:	49ba      	ldr	r1, [pc, #744]	; (11c8 <initialize_opcode_info()+0xd64>)
     ee0:	4610      	mov	r0, r2
     ee2:	f007 fde7 	bl	8ab4 <String::String(char const*)>
     ee6:	aa09      	add	r2, sp, #36	; 0x24
     ee8:	49b8      	ldr	r1, [pc, #736]	; (11cc <initialize_opcode_info()+0xd68>)
     eea:	4610      	mov	r0, r2
     eec:	f007 fde2 	bl	8ab4 <String::String(char const*)>
     ef0:	aa01      	add	r2, sp, #4
     ef2:	48b7      	ldr	r0, [pc, #732]	; (11d0 <initialize_opcode_info()+0xd6c>)
     ef4:	4611      	mov	r1, r2
     ef6:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     efa:	f7ff f8b5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     efe:	aa01      	add	r2, sp, #4
     f00:	4610      	mov	r0, r2
     f02:	f7ff faa1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     f06:	aa01      	add	r2, sp, #4
     f08:	49b2      	ldr	r1, [pc, #712]	; (11d4 <initialize_opcode_info()+0xd70>)
     f0a:	4610      	mov	r0, r2
     f0c:	f007 fdd2 	bl	8ab4 <String::String(char const*)>
     f10:	aa05      	add	r2, sp, #20
     f12:	49b1      	ldr	r1, [pc, #708]	; (11d8 <initialize_opcode_info()+0xd74>)
     f14:	4610      	mov	r0, r2
     f16:	f007 fdcd 	bl	8ab4 <String::String(char const*)>
     f1a:	aa09      	add	r2, sp, #36	; 0x24
     f1c:	49af      	ldr	r1, [pc, #700]	; (11dc <initialize_opcode_info()+0xd78>)
     f1e:	4610      	mov	r0, r2
     f20:	f007 fdc8 	bl	8ab4 <String::String(char const*)>
     f24:	aa01      	add	r2, sp, #4
     f26:	48ae      	ldr	r0, [pc, #696]	; (11e0 <initialize_opcode_info()+0xd7c>)
     f28:	4611      	mov	r1, r2
     f2a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     f2e:	f7ff f89b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f32:	aa01      	add	r2, sp, #4
     f34:	4610      	mov	r0, r2
     f36:	f7ff fa87 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     f3a:	aa01      	add	r2, sp, #4
     f3c:	49a9      	ldr	r1, [pc, #676]	; (11e4 <initialize_opcode_info()+0xd80>)
     f3e:	4610      	mov	r0, r2
     f40:	f007 fdb8 	bl	8ab4 <String::String(char const*)>
     f44:	aa05      	add	r2, sp, #20
     f46:	49a8      	ldr	r1, [pc, #672]	; (11e8 <initialize_opcode_info()+0xd84>)
     f48:	4610      	mov	r0, r2
     f4a:	f007 fdb3 	bl	8ab4 <String::String(char const*)>
     f4e:	aa09      	add	r2, sp, #36	; 0x24
     f50:	49a6      	ldr	r1, [pc, #664]	; (11ec <initialize_opcode_info()+0xd88>)
     f52:	4610      	mov	r0, r2
     f54:	f007 fdae 	bl	8ab4 <String::String(char const*)>
     f58:	aa01      	add	r2, sp, #4
     f5a:	48a5      	ldr	r0, [pc, #660]	; (11f0 <initialize_opcode_info()+0xd8c>)
     f5c:	4611      	mov	r1, r2
     f5e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     f62:	f7ff f881 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f66:	aa01      	add	r2, sp, #4
     f68:	4610      	mov	r0, r2
     f6a:	f7ff fa6d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     f6e:	aa01      	add	r2, sp, #4
     f70:	499c      	ldr	r1, [pc, #624]	; (11e4 <initialize_opcode_info()+0xd80>)
     f72:	4610      	mov	r0, r2
     f74:	f007 fd9e 	bl	8ab4 <String::String(char const*)>
     f78:	aa05      	add	r2, sp, #20
     f7a:	499e      	ldr	r1, [pc, #632]	; (11f4 <initialize_opcode_info()+0xd90>)
     f7c:	4610      	mov	r0, r2
     f7e:	f007 fd99 	bl	8ab4 <String::String(char const*)>
     f82:	aa09      	add	r2, sp, #36	; 0x24
     f84:	4999      	ldr	r1, [pc, #612]	; (11ec <initialize_opcode_info()+0xd88>)
     f86:	4610      	mov	r0, r2
     f88:	f007 fd94 	bl	8ab4 <String::String(char const*)>
     f8c:	aa01      	add	r2, sp, #4
     f8e:	489a      	ldr	r0, [pc, #616]	; (11f8 <initialize_opcode_info()+0xd94>)
     f90:	4611      	mov	r1, r2
     f92:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     f96:	f7ff f867 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f9a:	aa01      	add	r2, sp, #4
     f9c:	4610      	mov	r0, r2
     f9e:	f7ff fa53 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     fa2:	aa01      	add	r2, sp, #4
     fa4:	4995      	ldr	r1, [pc, #596]	; (11fc <initialize_opcode_info()+0xd98>)
     fa6:	4610      	mov	r0, r2
     fa8:	f007 fd84 	bl	8ab4 <String::String(char const*)>
     fac:	aa05      	add	r2, sp, #20
     fae:	4991      	ldr	r1, [pc, #580]	; (11f4 <initialize_opcode_info()+0xd90>)
     fb0:	4610      	mov	r0, r2
     fb2:	f007 fd7f 	bl	8ab4 <String::String(char const*)>
     fb6:	aa09      	add	r2, sp, #36	; 0x24
     fb8:	4984      	ldr	r1, [pc, #528]	; (11cc <initialize_opcode_info()+0xd68>)
     fba:	4610      	mov	r0, r2
     fbc:	f007 fd7a 	bl	8ab4 <String::String(char const*)>
     fc0:	aa01      	add	r2, sp, #4
     fc2:	488f      	ldr	r0, [pc, #572]	; (1200 <initialize_opcode_info()+0xd9c>)
     fc4:	4611      	mov	r1, r2
     fc6:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     fca:	f7ff f84d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fce:	aa01      	add	r2, sp, #4
     fd0:	4610      	mov	r0, r2
     fd2:	f7ff fa39 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     fd6:	aa01      	add	r2, sp, #4
     fd8:	498a      	ldr	r1, [pc, #552]	; (1204 <initialize_opcode_info()+0xda0>)
     fda:	4610      	mov	r0, r2
     fdc:	f007 fd6a 	bl	8ab4 <String::String(char const*)>
     fe0:	aa05      	add	r2, sp, #20
     fe2:	497e      	ldr	r1, [pc, #504]	; (11dc <initialize_opcode_info()+0xd78>)
     fe4:	4610      	mov	r0, r2
     fe6:	f007 fd65 	bl	8ab4 <String::String(char const*)>
     fea:	aa09      	add	r2, sp, #36	; 0x24
     fec:	4986      	ldr	r1, [pc, #536]	; (1208 <initialize_opcode_info()+0xda4>)
     fee:	4610      	mov	r0, r2
     ff0:	f007 fd60 	bl	8ab4 <String::String(char const*)>
     ff4:	aa01      	add	r2, sp, #4
     ff6:	4885      	ldr	r0, [pc, #532]	; (120c <initialize_opcode_info()+0xda8>)
     ff8:	4611      	mov	r1, r2
     ffa:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     ffe:	f7ff f833 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1002:	aa01      	add	r2, sp, #4
    1004:	4610      	mov	r0, r2
    1006:	f7ff fa1f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
    100a:	aa01      	add	r2, sp, #4
    100c:	4975      	ldr	r1, [pc, #468]	; (11e4 <initialize_opcode_info()+0xd80>)
    100e:	4610      	mov	r0, r2
    1010:	f007 fd50 	bl	8ab4 <String::String(char const*)>
    1014:	aa05      	add	r2, sp, #20
    1016:	497e      	ldr	r1, [pc, #504]	; (1210 <initialize_opcode_info()+0xdac>)
    1018:	4610      	mov	r0, r2
    101a:	f007 fd4b 	bl	8ab4 <String::String(char const*)>
    101e:	aa09      	add	r2, sp, #36	; 0x24
    1020:	4972      	ldr	r1, [pc, #456]	; (11ec <initialize_opcode_info()+0xd88>)
    1022:	4610      	mov	r0, r2
    1024:	f007 fd46 	bl	8ab4 <String::String(char const*)>
    1028:	aa01      	add	r2, sp, #4
    102a:	487a      	ldr	r0, [pc, #488]	; (1214 <initialize_opcode_info()+0xdb0>)
    102c:	4611      	mov	r1, r2
    102e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1032:	f7ff f819 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1036:	aa01      	add	r2, sp, #4
    1038:	4610      	mov	r0, r2
    103a:	f7ff fa05 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
    103e:	aa01      	add	r2, sp, #4
    1040:	4968      	ldr	r1, [pc, #416]	; (11e4 <initialize_opcode_info()+0xd80>)
    1042:	4610      	mov	r0, r2
    1044:	f007 fd36 	bl	8ab4 <String::String(char const*)>
    1048:	aa05      	add	r2, sp, #20
    104a:	4973      	ldr	r1, [pc, #460]	; (1218 <initialize_opcode_info()+0xdb4>)
    104c:	4610      	mov	r0, r2
    104e:	f007 fd31 	bl	8ab4 <String::String(char const*)>
    1052:	aa09      	add	r2, sp, #36	; 0x24
    1054:	4965      	ldr	r1, [pc, #404]	; (11ec <initialize_opcode_info()+0xd88>)
    1056:	4610      	mov	r0, r2
    1058:	f007 fd2c 	bl	8ab4 <String::String(char const*)>
    105c:	aa01      	add	r2, sp, #4
    105e:	486f      	ldr	r0, [pc, #444]	; (121c <initialize_opcode_info()+0xdb8>)
    1060:	4611      	mov	r1, r2
    1062:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1066:	f7fe ffff 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    106a:	aa01      	add	r2, sp, #4
    106c:	4610      	mov	r0, r2
    106e:	f7ff f9eb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
    1072:	aa01      	add	r2, sp, #4
    1074:	4961      	ldr	r1, [pc, #388]	; (11fc <initialize_opcode_info()+0xd98>)
    1076:	4610      	mov	r0, r2
    1078:	f007 fd1c 	bl	8ab4 <String::String(char const*)>
    107c:	aa05      	add	r2, sp, #20
    107e:	4966      	ldr	r1, [pc, #408]	; (1218 <initialize_opcode_info()+0xdb4>)
    1080:	4610      	mov	r0, r2
    1082:	f007 fd17 	bl	8ab4 <String::String(char const*)>
    1086:	aa09      	add	r2, sp, #36	; 0x24
    1088:	4950      	ldr	r1, [pc, #320]	; (11cc <initialize_opcode_info()+0xd68>)
    108a:	4610      	mov	r0, r2
    108c:	f007 fd12 	bl	8ab4 <String::String(char const*)>
    1090:	aa01      	add	r2, sp, #4
    1092:	f240 3307 	movw	r3, #775	; 0x307
    1096:	4862      	ldr	r0, [pc, #392]	; (1220 <initialize_opcode_info()+0xdbc>)
    1098:	4611      	mov	r1, r2
    109a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    109e:	f7fe ffe3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10a2:	aa01      	add	r2, sp, #4
    10a4:	4610      	mov	r0, r2
    10a6:	f7ff f9cf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
    10aa:	aa01      	add	r2, sp, #4
    10ac:	495d      	ldr	r1, [pc, #372]	; (1224 <initialize_opcode_info()+0xdc0>)
    10ae:	4610      	mov	r0, r2
    10b0:	f007 fd00 	bl	8ab4 <String::String(char const*)>
    10b4:	aa05      	add	r2, sp, #20
    10b6:	4949      	ldr	r1, [pc, #292]	; (11dc <initialize_opcode_info()+0xd78>)
    10b8:	4610      	mov	r0, r2
    10ba:	f007 fcfb 	bl	8ab4 <String::String(char const*)>
    10be:	aa09      	add	r2, sp, #36	; 0x24
    10c0:	4946      	ldr	r1, [pc, #280]	; (11dc <initialize_opcode_info()+0xd78>)
    10c2:	4610      	mov	r0, r2
    10c4:	f007 fcf6 	bl	8ab4 <String::String(char const*)>
    10c8:	aa01      	add	r2, sp, #4
    10ca:	f44f 7083 	mov.w	r0, #262	; 0x106
    10ce:	4611      	mov	r1, r2
    10d0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    10d4:	4854      	ldr	r0, [pc, #336]	; (1228 <initialize_opcode_info()+0xdc4>)
    10d6:	f7fe ffc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10da:	a801      	add	r0, sp, #4
    10dc:	f7ff f9b4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
    10e0:	4952      	ldr	r1, [pc, #328]	; (122c <initialize_opcode_info()+0xdc8>)
    10e2:	a801      	add	r0, sp, #4
    10e4:	f007 fce6 	bl	8ab4 <String::String(char const*)>
    10e8:	4951      	ldr	r1, [pc, #324]	; (1230 <initialize_opcode_info()+0xdcc>)
    10ea:	a805      	add	r0, sp, #20
    10ec:	f007 fce2 	bl	8ab4 <String::String(char const*)>
    10f0:	4950      	ldr	r1, [pc, #320]	; (1234 <initialize_opcode_info()+0xdd0>)
    10f2:	a809      	add	r0, sp, #36	; 0x24
    10f4:	f007 fcde 	bl	8ab4 <String::String(char const*)>
    10f8:	aa01      	add	r2, sp, #4
    10fa:	484f      	ldr	r0, [pc, #316]	; (1238 <initialize_opcode_info()+0xdd4>)
    10fc:	4611      	mov	r1, r2
    10fe:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1102:	f7fe ffb1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1106:	a801      	add	r0, sp, #4
    1108:	f7ff f99e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
    110c:	4947      	ldr	r1, [pc, #284]	; (122c <initialize_opcode_info()+0xdc8>)
    110e:	a801      	add	r0, sp, #4
    1110:	f007 fcd0 	bl	8ab4 <String::String(char const*)>
    1114:	4949      	ldr	r1, [pc, #292]	; (123c <initialize_opcode_info()+0xdd8>)
    1116:	a805      	add	r0, sp, #20
    1118:	f007 fccc 	bl	8ab4 <String::String(char const*)>
    111c:	4945      	ldr	r1, [pc, #276]	; (1234 <initialize_opcode_info()+0xdd0>)
    111e:	a809      	add	r0, sp, #36	; 0x24
    1120:	f007 fcc8 	bl	8ab4 <String::String(char const*)>
    1124:	aa01      	add	r2, sp, #4
    1126:	4846      	ldr	r0, [pc, #280]	; (1240 <initialize_opcode_info()+0xddc>)
    1128:	4611      	mov	r1, r2
    112a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    112e:	f7fe ff9b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1132:	a801      	add	r0, sp, #4
    1134:	f7ff f988 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
    1138:	4942      	ldr	r1, [pc, #264]	; (1244 <initialize_opcode_info()+0xde0>)
    113a:	a801      	add	r0, sp, #4
    113c:	f007 fcba 	bl	8ab4 <String::String(char const*)>
    1140:	493e      	ldr	r1, [pc, #248]	; (123c <initialize_opcode_info()+0xdd8>)
    1142:	a805      	add	r0, sp, #20
    1144:	f007 fcb6 	bl	8ab4 <String::String(char const*)>
    1148:	4920      	ldr	r1, [pc, #128]	; (11cc <initialize_opcode_info()+0xd68>)
    114a:	a809      	add	r0, sp, #36	; 0x24
    114c:	f007 fcb2 	bl	8ab4 <String::String(char const*)>
    1150:	aa01      	add	r2, sp, #4
    1152:	483d      	ldr	r0, [pc, #244]	; (1248 <initialize_opcode_info()+0xde4>)
    1154:	4611      	mov	r1, r2
    1156:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    115a:	f7fe ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    115e:	a801      	add	r0, sp, #4
    1160:	f7ff f972 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
    1164:	4939      	ldr	r1, [pc, #228]	; (124c <initialize_opcode_info()+0xde8>)
    1166:	a801      	add	r0, sp, #4
    1168:	f007 fca4 	bl	8ab4 <String::String(char const*)>
    116c:	491b      	ldr	r1, [pc, #108]	; (11dc <initialize_opcode_info()+0xd78>)
    116e:	a805      	add	r0, sp, #20
    1170:	f007 fca0 	bl	8ab4 <String::String(char const*)>
    1174:	4919      	ldr	r1, [pc, #100]	; (11dc <initialize_opcode_info()+0xd78>)
    1176:	a809      	add	r0, sp, #36	; 0x24
    1178:	f007 fc9c 	bl	8ab4 <String::String(char const*)>
    117c:	f44f 7182 	mov.w	r1, #260	; 0x104
    1180:	4833      	ldr	r0, [pc, #204]	; (1250 <initialize_opcode_info()+0xdec>)
    1182:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1186:	a901      	add	r1, sp, #4
    1188:	f7fe ff6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    118c:	a801      	add	r0, sp, #4
    118e:	f7ff f95b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
    1192:	4926      	ldr	r1, [pc, #152]	; (122c <initialize_opcode_info()+0xdc8>)
    1194:	a801      	add	r0, sp, #4
    1196:	f007 fc8d 	bl	8ab4 <String::String(char const*)>
    119a:	492e      	ldr	r1, [pc, #184]	; (1254 <initialize_opcode_info()+0xdf0>)
    119c:	a805      	add	r0, sp, #20
    119e:	f007 fc89 	bl	8ab4 <String::String(char const*)>
    11a2:	4924      	ldr	r1, [pc, #144]	; (1234 <initialize_opcode_info()+0xdd0>)
    11a4:	a809      	add	r0, sp, #36	; 0x24
    11a6:	f007 fc85 	bl	8ab4 <String::String(char const*)>
    11aa:	a901      	add	r1, sp, #4
    11ac:	482a      	ldr	r0, [pc, #168]	; (1258 <initialize_opcode_info()+0xdf4>)
    11ae:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    11b2:	f7fe ff59 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11b6:	a801      	add	r0, sp, #4
    11b8:	f7ff f946 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
    11bc:	4921      	ldr	r1, [pc, #132]	; (1244 <initialize_opcode_info()+0xde0>)
    11be:	a801      	add	r0, sp, #4
    11c0:	f007 fc78 	bl	8ab4 <String::String(char const*)>
    11c4:	e04a      	b.n	125c <initialize_opcode_info()+0xdf8>
    11c6:	bf00      	nop
    11c8:	20000428 	.word	0x20000428
    11cc:	2000097c 	.word	0x2000097c
    11d0:	200163f0 	.word	0x200163f0
    11d4:	200009d8 	.word	0x200009d8
    11d8:	200003e8 	.word	0x200003e8
    11dc:	200004f8 	.word	0x200004f8
    11e0:	20016458 	.word	0x20016458
    11e4:	200009c8 	.word	0x200009c8
    11e8:	2000098c 	.word	0x2000098c
    11ec:	20000974 	.word	0x20000974
    11f0:	2001648c 	.word	0x2001648c
    11f4:	20000404 	.word	0x20000404
    11f8:	2001655c 	.word	0x2001655c
    11fc:	200009cc 	.word	0x200009cc
    1200:	20016590 	.word	0x20016590
    1204:	200009dc 	.word	0x200009dc
    1208:	200009e0 	.word	0x200009e0
    120c:	200165f8 	.word	0x200165f8
    1210:	20000434 	.word	0x20000434
    1214:	2001662c 	.word	0x2001662c
    1218:	2000042c 	.word	0x2000042c
    121c:	200166fc 	.word	0x200166fc
    1220:	20016730 	.word	0x20016730
    1224:	200009e4 	.word	0x200009e4
    1228:	20016798 	.word	0x20016798
    122c:	200009e8 	.word	0x200009e8
    1230:	200003ec 	.word	0x200003ec
    1234:	200009ec 	.word	0x200009ec
    1238:	200167cc 	.word	0x200167cc
    123c:	200003e0 	.word	0x200003e0
    1240:	2001689c 	.word	0x2001689c
    1244:	200009f4 	.word	0x200009f4
    1248:	200168d0 	.word	0x200168d0
    124c:	200009f8 	.word	0x200009f8
    1250:	20016938 	.word	0x20016938
    1254:	200003d8 	.word	0x200003d8
    1258:	2001696c 	.word	0x2001696c
    125c:	49b2      	ldr	r1, [pc, #712]	; (1528 <initialize_opcode_info()+0x10c4>)
    125e:	a805      	add	r0, sp, #20
    1260:	f007 fc28 	bl	8ab4 <String::String(char const*)>
    1264:	49b1      	ldr	r1, [pc, #708]	; (152c <initialize_opcode_info()+0x10c8>)
    1266:	a809      	add	r0, sp, #36	; 0x24
    1268:	f007 fc24 	bl	8ab4 <String::String(char const*)>
    126c:	a901      	add	r1, sp, #4
    126e:	48b0      	ldr	r0, [pc, #704]	; (1530 <initialize_opcode_info()+0x10cc>)
    1270:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1274:	f7fe fef8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1278:	a801      	add	r0, sp, #4
    127a:	f7ff f8e5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
    127e:	49ad      	ldr	r1, [pc, #692]	; (1534 <initialize_opcode_info()+0x10d0>)
    1280:	a801      	add	r0, sp, #4
    1282:	f007 fc17 	bl	8ab4 <String::String(char const*)>
    1286:	49ac      	ldr	r1, [pc, #688]	; (1538 <initialize_opcode_info()+0x10d4>)
    1288:	a805      	add	r0, sp, #20
    128a:	f007 fc13 	bl	8ab4 <String::String(char const*)>
    128e:	49ab      	ldr	r1, [pc, #684]	; (153c <initialize_opcode_info()+0x10d8>)
    1290:	a809      	add	r0, sp, #36	; 0x24
    1292:	f007 fc0f 	bl	8ab4 <String::String(char const*)>
    1296:	f240 3205 	movw	r2, #773	; 0x305
    129a:	a901      	add	r1, sp, #4
    129c:	48a8      	ldr	r0, [pc, #672]	; (1540 <initialize_opcode_info()+0x10dc>)
    129e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    12a2:	f7fe fee1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12a6:	a801      	add	r0, sp, #4
    12a8:	f7ff f8ce 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
    12ac:	49a5      	ldr	r1, [pc, #660]	; (1544 <initialize_opcode_info()+0x10e0>)
    12ae:	a801      	add	r0, sp, #4
    12b0:	f007 fc00 	bl	8ab4 <String::String(char const*)>
    12b4:	49a4      	ldr	r1, [pc, #656]	; (1548 <initialize_opcode_info()+0x10e4>)
    12b6:	a805      	add	r0, sp, #20
    12b8:	f007 fbfc 	bl	8ab4 <String::String(char const*)>
    12bc:	49a3      	ldr	r1, [pc, #652]	; (154c <initialize_opcode_info()+0x10e8>)
    12be:	a809      	add	r0, sp, #36	; 0x24
    12c0:	f007 fbf8 	bl	8ab4 <String::String(char const*)>
    12c4:	a901      	add	r1, sp, #4
    12c6:	48a2      	ldr	r0, [pc, #648]	; (1550 <initialize_opcode_info()+0x10ec>)
    12c8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    12cc:	f7fe fecc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12d0:	a801      	add	r0, sp, #4
    12d2:	f7ff f8b9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
    12d6:	499f      	ldr	r1, [pc, #636]	; (1554 <initialize_opcode_info()+0x10f0>)
    12d8:	a801      	add	r0, sp, #4
    12da:	f007 fbeb 	bl	8ab4 <String::String(char const*)>
    12de:	499a      	ldr	r1, [pc, #616]	; (1548 <initialize_opcode_info()+0x10e4>)
    12e0:	a805      	add	r0, sp, #20
    12e2:	f007 fbe7 	bl	8ab4 <String::String(char const*)>
    12e6:	4991      	ldr	r1, [pc, #580]	; (152c <initialize_opcode_info()+0x10c8>)
    12e8:	a809      	add	r0, sp, #36	; 0x24
    12ea:	f007 fbe3 	bl	8ab4 <String::String(char const*)>
    12ee:	a901      	add	r1, sp, #4
    12f0:	4899      	ldr	r0, [pc, #612]	; (1558 <initialize_opcode_info()+0x10f4>)
    12f2:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    12f6:	f7fe feb7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12fa:	a801      	add	r0, sp, #4
    12fc:	f7ff f8a4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
    1300:	4996      	ldr	r1, [pc, #600]	; (155c <initialize_opcode_info()+0x10f8>)
    1302:	a801      	add	r0, sp, #4
    1304:	f007 fbd6 	bl	8ab4 <String::String(char const*)>
    1308:	4995      	ldr	r1, [pc, #596]	; (1560 <initialize_opcode_info()+0x10fc>)
    130a:	a805      	add	r0, sp, #20
    130c:	f007 fbd2 	bl	8ab4 <String::String(char const*)>
    1310:	498a      	ldr	r1, [pc, #552]	; (153c <initialize_opcode_info()+0x10d8>)
    1312:	a809      	add	r0, sp, #36	; 0x24
    1314:	f007 fbce 	bl	8ab4 <String::String(char const*)>
    1318:	a901      	add	r1, sp, #4
    131a:	4892      	ldr	r0, [pc, #584]	; (1564 <initialize_opcode_info()+0x1100>)
    131c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1320:	f7fe fea2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1324:	a801      	add	r0, sp, #4
    1326:	f7ff f88f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
    132a:	4986      	ldr	r1, [pc, #536]	; (1544 <initialize_opcode_info()+0x10e0>)
    132c:	a801      	add	r0, sp, #4
    132e:	f007 fbc1 	bl	8ab4 <String::String(char const*)>
    1332:	498d      	ldr	r1, [pc, #564]	; (1568 <initialize_opcode_info()+0x1104>)
    1334:	a805      	add	r0, sp, #20
    1336:	f007 fbbd 	bl	8ab4 <String::String(char const*)>
    133a:	4984      	ldr	r1, [pc, #528]	; (154c <initialize_opcode_info()+0x10e8>)
    133c:	a809      	add	r0, sp, #36	; 0x24
    133e:	f007 fbb9 	bl	8ab4 <String::String(char const*)>
    1342:	a901      	add	r1, sp, #4
    1344:	4889      	ldr	r0, [pc, #548]	; (156c <initialize_opcode_info()+0x1108>)
    1346:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    134a:	f7fe fe8d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    134e:	a801      	add	r0, sp, #4
    1350:	f7ff f87a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
    1354:	497b      	ldr	r1, [pc, #492]	; (1544 <initialize_opcode_info()+0x10e0>)
    1356:	a801      	add	r0, sp, #4
    1358:	f007 fbac 	bl	8ab4 <String::String(char const*)>
    135c:	4984      	ldr	r1, [pc, #528]	; (1570 <initialize_opcode_info()+0x110c>)
    135e:	a805      	add	r0, sp, #20
    1360:	f007 fba8 	bl	8ab4 <String::String(char const*)>
    1364:	4979      	ldr	r1, [pc, #484]	; (154c <initialize_opcode_info()+0x10e8>)
    1366:	a809      	add	r0, sp, #36	; 0x24
    1368:	f007 fba4 	bl	8ab4 <String::String(char const*)>
    136c:	a901      	add	r1, sp, #4
    136e:	4881      	ldr	r0, [pc, #516]	; (1574 <initialize_opcode_info()+0x1110>)
    1370:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1374:	f7fe fe78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1378:	a801      	add	r0, sp, #4
    137a:	f7ff f865 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
    137e:	4975      	ldr	r1, [pc, #468]	; (1554 <initialize_opcode_info()+0x10f0>)
    1380:	a801      	add	r0, sp, #4
    1382:	f007 fb97 	bl	8ab4 <String::String(char const*)>
    1386:	497a      	ldr	r1, [pc, #488]	; (1570 <initialize_opcode_info()+0x110c>)
    1388:	a805      	add	r0, sp, #20
    138a:	f007 fb93 	bl	8ab4 <String::String(char const*)>
    138e:	4967      	ldr	r1, [pc, #412]	; (152c <initialize_opcode_info()+0x10c8>)
    1390:	a809      	add	r0, sp, #36	; 0x24
    1392:	f007 fb8f 	bl	8ab4 <String::String(char const*)>
    1396:	a901      	add	r1, sp, #4
    1398:	4877      	ldr	r0, [pc, #476]	; (1578 <initialize_opcode_info()+0x1114>)
    139a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    139e:	f7fe fe63 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13a2:	a801      	add	r0, sp, #4
    13a4:	f7ff f850 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
    13a8:	4974      	ldr	r1, [pc, #464]	; (157c <initialize_opcode_info()+0x1118>)
    13aa:	a801      	add	r0, sp, #4
    13ac:	f007 fb82 	bl	8ab4 <String::String(char const*)>
    13b0:	4962      	ldr	r1, [pc, #392]	; (153c <initialize_opcode_info()+0x10d8>)
    13b2:	a805      	add	r0, sp, #20
    13b4:	f007 fb7e 	bl	8ab4 <String::String(char const*)>
    13b8:	4971      	ldr	r1, [pc, #452]	; (1580 <initialize_opcode_info()+0x111c>)
    13ba:	a809      	add	r0, sp, #36	; 0x24
    13bc:	f007 fb7a 	bl	8ab4 <String::String(char const*)>
    13c0:	a901      	add	r1, sp, #4
    13c2:	4870      	ldr	r0, [pc, #448]	; (1584 <initialize_opcode_info()+0x1120>)
    13c4:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    13c8:	f7fe fe4e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13cc:	a801      	add	r0, sp, #4
    13ce:	f7ff f83b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
    13d2:	495c      	ldr	r1, [pc, #368]	; (1544 <initialize_opcode_info()+0x10e0>)
    13d4:	a801      	add	r0, sp, #4
    13d6:	f007 fb6d 	bl	8ab4 <String::String(char const*)>
    13da:	496b      	ldr	r1, [pc, #428]	; (1588 <initialize_opcode_info()+0x1124>)
    13dc:	a805      	add	r0, sp, #20
    13de:	f007 fb69 	bl	8ab4 <String::String(char const*)>
    13e2:	495a      	ldr	r1, [pc, #360]	; (154c <initialize_opcode_info()+0x10e8>)
    13e4:	a809      	add	r0, sp, #36	; 0x24
    13e6:	f007 fb65 	bl	8ab4 <String::String(char const*)>
    13ea:	a901      	add	r1, sp, #4
    13ec:	4867      	ldr	r0, [pc, #412]	; (158c <initialize_opcode_info()+0x1128>)
    13ee:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    13f2:	f7fe fe39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13f6:	a801      	add	r0, sp, #4
    13f8:	f7ff f826 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    13fc:	4951      	ldr	r1, [pc, #324]	; (1544 <initialize_opcode_info()+0x10e0>)
    13fe:	a801      	add	r0, sp, #4
    1400:	f007 fb58 	bl	8ab4 <String::String(char const*)>
    1404:	4962      	ldr	r1, [pc, #392]	; (1590 <initialize_opcode_info()+0x112c>)
    1406:	a805      	add	r0, sp, #20
    1408:	f007 fb54 	bl	8ab4 <String::String(char const*)>
    140c:	494f      	ldr	r1, [pc, #316]	; (154c <initialize_opcode_info()+0x10e8>)
    140e:	a809      	add	r0, sp, #36	; 0x24
    1410:	f007 fb50 	bl	8ab4 <String::String(char const*)>
    1414:	a901      	add	r1, sp, #4
    1416:	485f      	ldr	r0, [pc, #380]	; (1594 <initialize_opcode_info()+0x1130>)
    1418:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    141c:	f7fe fe24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1420:	a801      	add	r0, sp, #4
    1422:	f7ff f811 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    1426:	494b      	ldr	r1, [pc, #300]	; (1554 <initialize_opcode_info()+0x10f0>)
    1428:	a801      	add	r0, sp, #4
    142a:	f007 fb43 	bl	8ab4 <String::String(char const*)>
    142e:	4958      	ldr	r1, [pc, #352]	; (1590 <initialize_opcode_info()+0x112c>)
    1430:	a805      	add	r0, sp, #20
    1432:	f007 fb3f 	bl	8ab4 <String::String(char const*)>
    1436:	493d      	ldr	r1, [pc, #244]	; (152c <initialize_opcode_info()+0x10c8>)
    1438:	a809      	add	r0, sp, #36	; 0x24
    143a:	f007 fb3b 	bl	8ab4 <String::String(char const*)>
    143e:	f240 3307 	movw	r3, #775	; 0x307
    1442:	a901      	add	r1, sp, #4
    1444:	4854      	ldr	r0, [pc, #336]	; (1598 <initialize_opcode_info()+0x1134>)
    1446:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    144a:	f7fe fe0d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    144e:	a801      	add	r0, sp, #4
    1450:	f7fe fffa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    1454:	4951      	ldr	r1, [pc, #324]	; (159c <initialize_opcode_info()+0x1138>)
    1456:	a801      	add	r0, sp, #4
    1458:	f007 fb2c 	bl	8ab4 <String::String(char const*)>
    145c:	4950      	ldr	r1, [pc, #320]	; (15a0 <initialize_opcode_info()+0x113c>)
    145e:	a805      	add	r0, sp, #20
    1460:	f007 fb28 	bl	8ab4 <String::String(char const*)>
    1464:	4935      	ldr	r1, [pc, #212]	; (153c <initialize_opcode_info()+0x10d8>)
    1466:	a809      	add	r0, sp, #36	; 0x24
    1468:	f007 fb24 	bl	8ab4 <String::String(char const*)>
    146c:	a901      	add	r1, sp, #4
    146e:	484d      	ldr	r0, [pc, #308]	; (15a4 <initialize_opcode_info()+0x1140>)
    1470:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1474:	f7fe fdf8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1478:	a801      	add	r0, sp, #4
    147a:	f7fe ffe5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    147e:	494a      	ldr	r1, [pc, #296]	; (15a8 <initialize_opcode_info()+0x1144>)
    1480:	a801      	add	r0, sp, #4
    1482:	f007 fb17 	bl	8ab4 <String::String(char const*)>
    1486:	4949      	ldr	r1, [pc, #292]	; (15ac <initialize_opcode_info()+0x1148>)
    1488:	a805      	add	r0, sp, #20
    148a:	f007 fb13 	bl	8ab4 <String::String(char const*)>
    148e:	492b      	ldr	r1, [pc, #172]	; (153c <initialize_opcode_info()+0x10d8>)
    1490:	a809      	add	r0, sp, #36	; 0x24
    1492:	f007 fb0f 	bl	8ab4 <String::String(char const*)>
    1496:	a901      	add	r1, sp, #4
    1498:	4845      	ldr	r0, [pc, #276]	; (15b0 <initialize_opcode_info()+0x114c>)
    149a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    149e:	f7fe fde3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14a2:	a801      	add	r0, sp, #4
    14a4:	f7fe ffd0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    14a8:	493c      	ldr	r1, [pc, #240]	; (159c <initialize_opcode_info()+0x1138>)
    14aa:	a801      	add	r0, sp, #4
    14ac:	f007 fb02 	bl	8ab4 <String::String(char const*)>
    14b0:	493e      	ldr	r1, [pc, #248]	; (15ac <initialize_opcode_info()+0x1148>)
    14b2:	a805      	add	r0, sp, #20
    14b4:	f007 fafe 	bl	8ab4 <String::String(char const*)>
    14b8:	4920      	ldr	r1, [pc, #128]	; (153c <initialize_opcode_info()+0x10d8>)
    14ba:	a809      	add	r0, sp, #36	; 0x24
    14bc:	f007 fafa 	bl	8ab4 <String::String(char const*)>
    14c0:	a901      	add	r1, sp, #4
    14c2:	483c      	ldr	r0, [pc, #240]	; (15b4 <initialize_opcode_info()+0x1150>)
    14c4:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    14c8:	f7fe fdce 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14cc:	a801      	add	r0, sp, #4
    14ce:	f7fe ffbb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    14d2:	4939      	ldr	r1, [pc, #228]	; (15b8 <initialize_opcode_info()+0x1154>)
    14d4:	a801      	add	r0, sp, #4
    14d6:	f007 faed 	bl	8ab4 <String::String(char const*)>
    14da:	4934      	ldr	r1, [pc, #208]	; (15ac <initialize_opcode_info()+0x1148>)
    14dc:	a805      	add	r0, sp, #20
    14de:	f007 fae9 	bl	8ab4 <String::String(char const*)>
    14e2:	4916      	ldr	r1, [pc, #88]	; (153c <initialize_opcode_info()+0x10d8>)
    14e4:	a809      	add	r0, sp, #36	; 0x24
    14e6:	f007 fae5 	bl	8ab4 <String::String(char const*)>
    14ea:	a901      	add	r1, sp, #4
    14ec:	4833      	ldr	r0, [pc, #204]	; (15bc <initialize_opcode_info()+0x1158>)
    14ee:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    14f2:	f7fe fdb9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14f6:	a801      	add	r0, sp, #4
    14f8:	f7fe ffa6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    14fc:	4930      	ldr	r1, [pc, #192]	; (15c0 <initialize_opcode_info()+0x115c>)
    14fe:	a801      	add	r0, sp, #4
    1500:	f007 fad8 	bl	8ab4 <String::String(char const*)>
    1504:	490d      	ldr	r1, [pc, #52]	; (153c <initialize_opcode_info()+0x10d8>)
    1506:	a805      	add	r0, sp, #20
    1508:	f007 fad4 	bl	8ab4 <String::String(char const*)>
    150c:	492d      	ldr	r1, [pc, #180]	; (15c4 <initialize_opcode_info()+0x1160>)
    150e:	a809      	add	r0, sp, #36	; 0x24
    1510:	f007 fad0 	bl	8ab4 <String::String(char const*)>
    1514:	a901      	add	r1, sp, #4
    1516:	482c      	ldr	r0, [pc, #176]	; (15c8 <initialize_opcode_info()+0x1164>)
    1518:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    151c:	f7fe fda4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1520:	a801      	add	r0, sp, #4
    1522:	f7fe ff91 	bl	448 <OpDecoder::~OpDecoder()>
    1526:	e051      	b.n	15cc <initialize_opcode_info()+0x1168>
    1528:	20000984 	.word	0x20000984
    152c:	2000097c 	.word	0x2000097c
    1530:	200169a0 	.word	0x200169a0
    1534:	200009d4 	.word	0x200009d4
    1538:	20000440 	.word	0x20000440
    153c:	200004f8 	.word	0x200004f8
    1540:	20016a08 	.word	0x20016a08
    1544:	200009e8 	.word	0x200009e8
    1548:	20000428 	.word	0x20000428
    154c:	200009ec 	.word	0x200009ec
    1550:	20016a3c 	.word	0x20016a3c
    1554:	200009f4 	.word	0x200009f4
    1558:	20016a70 	.word	0x20016a70
    155c:	200009fc 	.word	0x200009fc
    1560:	200003e8 	.word	0x200003e8
    1564:	20016ad8 	.word	0x20016ad8
    1568:	2000098c 	.word	0x2000098c
    156c:	20016b0c 	.word	0x20016b0c
    1570:	20000404 	.word	0x20000404
    1574:	20016bdc 	.word	0x20016bdc
    1578:	20016c10 	.word	0x20016c10
    157c:	20000a00 	.word	0x20000a00
    1580:	200009e0 	.word	0x200009e0
    1584:	20016c78 	.word	0x20016c78
    1588:	20000434 	.word	0x20000434
    158c:	20016cac 	.word	0x20016cac
    1590:	2000042c 	.word	0x2000042c
    1594:	20016d7c 	.word	0x20016d7c
    1598:	20016db0 	.word	0x20016db0
    159c:	20000a04 	.word	0x20000a04
    15a0:	200003ec 	.word	0x200003ec
    15a4:	20016e4c 	.word	0x20016e4c
    15a8:	20000a08 	.word	0x20000a08
    15ac:	200003e0 	.word	0x200003e0
    15b0:	20016ee8 	.word	0x20016ee8
    15b4:	20016f1c 	.word	0x20016f1c
    15b8:	20000a0c 	.word	0x20000a0c
    15bc:	20016f50 	.word	0x20016f50
    15c0:	20000a10 	.word	0x20000a10
    15c4:	20000974 	.word	0x20000974
    15c8:	20016fb8 	.word	0x20016fb8
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    15cc:	49b2      	ldr	r1, [pc, #712]	; (1898 <initialize_opcode_info()+0x1434>)
    15ce:	a801      	add	r0, sp, #4
    15d0:	f007 fa70 	bl	8ab4 <String::String(char const*)>
    15d4:	49b1      	ldr	r1, [pc, #708]	; (189c <initialize_opcode_info()+0x1438>)
    15d6:	a805      	add	r0, sp, #20
    15d8:	f007 fa6c 	bl	8ab4 <String::String(char const*)>
    15dc:	49b0      	ldr	r1, [pc, #704]	; (18a0 <initialize_opcode_info()+0x143c>)
    15de:	a809      	add	r0, sp, #36	; 0x24
    15e0:	f007 fa68 	bl	8ab4 <String::String(char const*)>
    15e4:	a901      	add	r1, sp, #4
    15e6:	48af      	ldr	r0, [pc, #700]	; (18a4 <initialize_opcode_info()+0x1440>)
    15e8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    15ec:	f7fe fd3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15f0:	a801      	add	r0, sp, #4
    15f2:	f7fe ff29 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    15f6:	49ac      	ldr	r1, [pc, #688]	; (18a8 <initialize_opcode_info()+0x1444>)
    15f8:	a801      	add	r0, sp, #4
    15fa:	f007 fa5b 	bl	8ab4 <String::String(char const*)>
    15fe:	49ab      	ldr	r1, [pc, #684]	; (18ac <initialize_opcode_info()+0x1448>)
    1600:	a805      	add	r0, sp, #20
    1602:	f007 fa57 	bl	8ab4 <String::String(char const*)>
    1606:	49a5      	ldr	r1, [pc, #660]	; (189c <initialize_opcode_info()+0x1438>)
    1608:	a809      	add	r0, sp, #36	; 0x24
    160a:	f007 fa53 	bl	8ab4 <String::String(char const*)>
    160e:	a901      	add	r1, sp, #4
    1610:	48a7      	ldr	r0, [pc, #668]	; (18b0 <initialize_opcode_info()+0x144c>)
    1612:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1616:	f7fe fd27 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    161a:	a801      	add	r0, sp, #4
    161c:	f7fe ff14 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1620:	49a4      	ldr	r1, [pc, #656]	; (18b4 <initialize_opcode_info()+0x1450>)
    1622:	a801      	add	r0, sp, #4
    1624:	f007 fa46 	bl	8ab4 <String::String(char const*)>
    1628:	49a0      	ldr	r1, [pc, #640]	; (18ac <initialize_opcode_info()+0x1448>)
    162a:	a805      	add	r0, sp, #20
    162c:	f007 fa42 	bl	8ab4 <String::String(char const*)>
    1630:	499a      	ldr	r1, [pc, #616]	; (189c <initialize_opcode_info()+0x1438>)
    1632:	a809      	add	r0, sp, #36	; 0x24
    1634:	f007 fa3e 	bl	8ab4 <String::String(char const*)>
    1638:	a901      	add	r1, sp, #4
    163a:	489f      	ldr	r0, [pc, #636]	; (18b8 <initialize_opcode_info()+0x1454>)
    163c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1640:	f7fe fd12 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1644:	a801      	add	r0, sp, #4
    1646:	f7fe feff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    164a:	499c      	ldr	r1, [pc, #624]	; (18bc <initialize_opcode_info()+0x1458>)
    164c:	a801      	add	r0, sp, #4
    164e:	f007 fa31 	bl	8ab4 <String::String(char const*)>
    1652:	4996      	ldr	r1, [pc, #600]	; (18ac <initialize_opcode_info()+0x1448>)
    1654:	a805      	add	r0, sp, #20
    1656:	f007 fa2d 	bl	8ab4 <String::String(char const*)>
    165a:	4990      	ldr	r1, [pc, #576]	; (189c <initialize_opcode_info()+0x1438>)
    165c:	a809      	add	r0, sp, #36	; 0x24
    165e:	f007 fa29 	bl	8ab4 <String::String(char const*)>
    1662:	a901      	add	r1, sp, #4
    1664:	4896      	ldr	r0, [pc, #600]	; (18c0 <initialize_opcode_info()+0x145c>)
    1666:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    166a:	f7fe fcfd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    166e:	a801      	add	r0, sp, #4
    1670:	f7fe feea 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    1674:	4993      	ldr	r1, [pc, #588]	; (18c4 <initialize_opcode_info()+0x1460>)
    1676:	a801      	add	r0, sp, #4
    1678:	f007 fa1c 	bl	8ab4 <String::String(char const*)>
    167c:	4992      	ldr	r1, [pc, #584]	; (18c8 <initialize_opcode_info()+0x1464>)
    167e:	a805      	add	r0, sp, #20
    1680:	f007 fa18 	bl	8ab4 <String::String(char const*)>
    1684:	4985      	ldr	r1, [pc, #532]	; (189c <initialize_opcode_info()+0x1438>)
    1686:	a809      	add	r0, sp, #36	; 0x24
    1688:	f007 fa14 	bl	8ab4 <String::String(char const*)>
    168c:	a901      	add	r1, sp, #4
    168e:	488f      	ldr	r0, [pc, #572]	; (18cc <initialize_opcode_info()+0x1468>)
    1690:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1694:	f7fe fce8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1698:	a801      	add	r0, sp, #4
    169a:	f7fe fed5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    169e:	4985      	ldr	r1, [pc, #532]	; (18b4 <initialize_opcode_info()+0x1450>)
    16a0:	a801      	add	r0, sp, #4
    16a2:	f007 fa07 	bl	8ab4 <String::String(char const*)>
    16a6:	498a      	ldr	r1, [pc, #552]	; (18d0 <initialize_opcode_info()+0x146c>)
    16a8:	a805      	add	r0, sp, #20
    16aa:	f007 fa03 	bl	8ab4 <String::String(char const*)>
    16ae:	497b      	ldr	r1, [pc, #492]	; (189c <initialize_opcode_info()+0x1438>)
    16b0:	a809      	add	r0, sp, #36	; 0x24
    16b2:	f007 f9ff 	bl	8ab4 <String::String(char const*)>
    16b6:	a901      	add	r1, sp, #4
    16b8:	4886      	ldr	r0, [pc, #536]	; (18d4 <initialize_opcode_info()+0x1470>)
    16ba:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    16be:	f7fe fcd3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16c2:	a801      	add	r0, sp, #4
    16c4:	f7fe fec0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    16c8:	4977      	ldr	r1, [pc, #476]	; (18a8 <initialize_opcode_info()+0x1444>)
    16ca:	a801      	add	r0, sp, #4
    16cc:	f007 f9f2 	bl	8ab4 <String::String(char const*)>
    16d0:	4981      	ldr	r1, [pc, #516]	; (18d8 <initialize_opcode_info()+0x1474>)
    16d2:	a805      	add	r0, sp, #20
    16d4:	f007 f9ee 	bl	8ab4 <String::String(char const*)>
    16d8:	4970      	ldr	r1, [pc, #448]	; (189c <initialize_opcode_info()+0x1438>)
    16da:	a809      	add	r0, sp, #36	; 0x24
    16dc:	f007 f9ea 	bl	8ab4 <String::String(char const*)>
    16e0:	a901      	add	r1, sp, #4
    16e2:	487e      	ldr	r0, [pc, #504]	; (18dc <initialize_opcode_info()+0x1478>)
    16e4:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    16e8:	f7fe fcbe 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16ec:	a801      	add	r0, sp, #4
    16ee:	f7fe feab 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    16f2:	4970      	ldr	r1, [pc, #448]	; (18b4 <initialize_opcode_info()+0x1450>)
    16f4:	a801      	add	r0, sp, #4
    16f6:	f007 f9dd 	bl	8ab4 <String::String(char const*)>
    16fa:	4977      	ldr	r1, [pc, #476]	; (18d8 <initialize_opcode_info()+0x1474>)
    16fc:	a805      	add	r0, sp, #20
    16fe:	f007 f9d9 	bl	8ab4 <String::String(char const*)>
    1702:	4966      	ldr	r1, [pc, #408]	; (189c <initialize_opcode_info()+0x1438>)
    1704:	a809      	add	r0, sp, #36	; 0x24
    1706:	f007 f9d5 	bl	8ab4 <String::String(char const*)>
    170a:	a901      	add	r1, sp, #4
    170c:	4874      	ldr	r0, [pc, #464]	; (18e0 <initialize_opcode_info()+0x147c>)
    170e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1712:	f7fe fca9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1716:	a801      	add	r0, sp, #4
    1718:	f7fe fe96 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    171c:	4967      	ldr	r1, [pc, #412]	; (18bc <initialize_opcode_info()+0x1458>)
    171e:	a801      	add	r0, sp, #4
    1720:	f007 f9c8 	bl	8ab4 <String::String(char const*)>
    1724:	496f      	ldr	r1, [pc, #444]	; (18e4 <initialize_opcode_info()+0x1480>)
    1726:	a805      	add	r0, sp, #20
    1728:	f007 f9c4 	bl	8ab4 <String::String(char const*)>
    172c:	495b      	ldr	r1, [pc, #364]	; (189c <initialize_opcode_info()+0x1438>)
    172e:	a809      	add	r0, sp, #36	; 0x24
    1730:	f007 f9c0 	bl	8ab4 <String::String(char const*)>
    1734:	a901      	add	r1, sp, #4
    1736:	486c      	ldr	r0, [pc, #432]	; (18e8 <initialize_opcode_info()+0x1484>)
    1738:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    173c:	f7fe fc94 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1740:	a801      	add	r0, sp, #4
    1742:	f7fe fe81 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    1746:	4969      	ldr	r1, [pc, #420]	; (18ec <initialize_opcode_info()+0x1488>)
    1748:	a801      	add	r0, sp, #4
    174a:	f007 f9b3 	bl	8ab4 <String::String(char const*)>
    174e:	4953      	ldr	r1, [pc, #332]	; (189c <initialize_opcode_info()+0x1438>)
    1750:	a805      	add	r0, sp, #20
    1752:	f007 f9af 	bl	8ab4 <String::String(char const*)>
    1756:	4952      	ldr	r1, [pc, #328]	; (18a0 <initialize_opcode_info()+0x143c>)
    1758:	a809      	add	r0, sp, #36	; 0x24
    175a:	f007 f9ab 	bl	8ab4 <String::String(char const*)>
    175e:	a901      	add	r1, sp, #4
    1760:	4863      	ldr	r0, [pc, #396]	; (18f0 <initialize_opcode_info()+0x148c>)
    1762:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1766:	f7fe fc7f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    176a:	a801      	add	r0, sp, #4
    176c:	f7fe fe6c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    1770:	4950      	ldr	r1, [pc, #320]	; (18b4 <initialize_opcode_info()+0x1450>)
    1772:	a801      	add	r0, sp, #4
    1774:	f007 f99e 	bl	8ab4 <String::String(char const*)>
    1778:	495e      	ldr	r1, [pc, #376]	; (18f4 <initialize_opcode_info()+0x1490>)
    177a:	a805      	add	r0, sp, #20
    177c:	f007 f99a 	bl	8ab4 <String::String(char const*)>
    1780:	4946      	ldr	r1, [pc, #280]	; (189c <initialize_opcode_info()+0x1438>)
    1782:	a809      	add	r0, sp, #36	; 0x24
    1784:	f007 f996 	bl	8ab4 <String::String(char const*)>
    1788:	f240 3205 	movw	r2, #773	; 0x305
    178c:	a901      	add	r1, sp, #4
    178e:	485a      	ldr	r0, [pc, #360]	; (18f8 <initialize_opcode_info()+0x1494>)
    1790:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1794:	f7fe fc68 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1798:	a801      	add	r0, sp, #4
    179a:	f7fe fe55 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    179e:	4957      	ldr	r1, [pc, #348]	; (18fc <initialize_opcode_info()+0x1498>)
    17a0:	a801      	add	r0, sp, #4
    17a2:	f007 f987 	bl	8ab4 <String::String(char const*)>
    17a6:	493d      	ldr	r1, [pc, #244]	; (189c <initialize_opcode_info()+0x1438>)
    17a8:	a805      	add	r0, sp, #20
    17aa:	f007 f983 	bl	8ab4 <String::String(char const*)>
    17ae:	493b      	ldr	r1, [pc, #236]	; (189c <initialize_opcode_info()+0x1438>)
    17b0:	a809      	add	r0, sp, #36	; 0x24
    17b2:	f007 f97f 	bl	8ab4 <String::String(char const*)>
    17b6:	a901      	add	r1, sp, #4
    17b8:	4851      	ldr	r0, [pc, #324]	; (1900 <initialize_opcode_info()+0x149c>)
    17ba:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    17be:	f7fe fc53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17c2:	a801      	add	r0, sp, #4
    17c4:	f7fe fe40 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    17c8:	493a      	ldr	r1, [pc, #232]	; (18b4 <initialize_opcode_info()+0x1450>)
    17ca:	a801      	add	r0, sp, #4
    17cc:	f007 f972 	bl	8ab4 <String::String(char const*)>
    17d0:	494c      	ldr	r1, [pc, #304]	; (1904 <initialize_opcode_info()+0x14a0>)
    17d2:	a805      	add	r0, sp, #20
    17d4:	f007 f96e 	bl	8ab4 <String::String(char const*)>
    17d8:	4930      	ldr	r1, [pc, #192]	; (189c <initialize_opcode_info()+0x1438>)
    17da:	a809      	add	r0, sp, #36	; 0x24
    17dc:	f007 f96a 	bl	8ab4 <String::String(char const*)>
    17e0:	f240 3205 	movw	r2, #773	; 0x305
    17e4:	a901      	add	r1, sp, #4
    17e6:	4848      	ldr	r0, [pc, #288]	; (1908 <initialize_opcode_info()+0x14a4>)
    17e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    17ec:	f7fe fc3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17f0:	a801      	add	r0, sp, #4
    17f2:	f7fe fe29 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    17f6:	4945      	ldr	r1, [pc, #276]	; (190c <initialize_opcode_info()+0x14a8>)
    17f8:	a801      	add	r0, sp, #4
    17fa:	f007 f95b 	bl	8ab4 <String::String(char const*)>
    17fe:	4944      	ldr	r1, [pc, #272]	; (1910 <initialize_opcode_info()+0x14ac>)
    1800:	a805      	add	r0, sp, #20
    1802:	f007 f957 	bl	8ab4 <String::String(char const*)>
    1806:	4926      	ldr	r1, [pc, #152]	; (18a0 <initialize_opcode_info()+0x143c>)
    1808:	a809      	add	r0, sp, #36	; 0x24
    180a:	f007 f953 	bl	8ab4 <String::String(char const*)>
    180e:	a901      	add	r1, sp, #4
    1810:	4840      	ldr	r0, [pc, #256]	; (1914 <initialize_opcode_info()+0x14b0>)
    1812:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1816:	f7fe fc27 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    181a:	a801      	add	r0, sp, #4
    181c:	f7fe fe14 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    1820:	493d      	ldr	r1, [pc, #244]	; (1918 <initialize_opcode_info()+0x14b4>)
    1822:	a801      	add	r0, sp, #4
    1824:	f007 f946 	bl	8ab4 <String::String(char const*)>
    1828:	493c      	ldr	r1, [pc, #240]	; (191c <initialize_opcode_info()+0x14b8>)
    182a:	a805      	add	r0, sp, #20
    182c:	f007 f942 	bl	8ab4 <String::String(char const*)>
    1830:	491b      	ldr	r1, [pc, #108]	; (18a0 <initialize_opcode_info()+0x143c>)
    1832:	a809      	add	r0, sp, #36	; 0x24
    1834:	f007 f93e 	bl	8ab4 <String::String(char const*)>
    1838:	a901      	add	r1, sp, #4
    183a:	4839      	ldr	r0, [pc, #228]	; (1920 <initialize_opcode_info()+0x14bc>)
    183c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1840:	f7fe fc12 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1844:	a801      	add	r0, sp, #4
    1846:	f7fe fdff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    184a:	4936      	ldr	r1, [pc, #216]	; (1924 <initialize_opcode_info()+0x14c0>)
    184c:	a801      	add	r0, sp, #4
    184e:	f007 f931 	bl	8ab4 <String::String(char const*)>
    1852:	492f      	ldr	r1, [pc, #188]	; (1910 <initialize_opcode_info()+0x14ac>)
    1854:	a805      	add	r0, sp, #20
    1856:	f007 f92d 	bl	8ab4 <String::String(char const*)>
    185a:	4911      	ldr	r1, [pc, #68]	; (18a0 <initialize_opcode_info()+0x143c>)
    185c:	a809      	add	r0, sp, #36	; 0x24
    185e:	f007 f929 	bl	8ab4 <String::String(char const*)>
    1862:	a901      	add	r1, sp, #4
    1864:	4830      	ldr	r0, [pc, #192]	; (1928 <initialize_opcode_info()+0x14c4>)
    1866:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    186a:	f7fe fbfd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    186e:	a801      	add	r0, sp, #4
    1870:	f7fe fdea 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    1874:	4925      	ldr	r1, [pc, #148]	; (190c <initialize_opcode_info()+0x14a8>)
    1876:	a801      	add	r0, sp, #4
    1878:	f007 f91c 	bl	8ab4 <String::String(char const*)>
    187c:	492b      	ldr	r1, [pc, #172]	; (192c <initialize_opcode_info()+0x14c8>)
    187e:	a805      	add	r0, sp, #20
    1880:	f007 f918 	bl	8ab4 <String::String(char const*)>
    1884:	4906      	ldr	r1, [pc, #24]	; (18a0 <initialize_opcode_info()+0x143c>)
    1886:	a809      	add	r0, sp, #36	; 0x24
    1888:	f007 f914 	bl	8ab4 <String::String(char const*)>
    188c:	a901      	add	r1, sp, #4
    188e:	4828      	ldr	r0, [pc, #160]	; (1930 <initialize_opcode_info()+0x14cc>)
    1890:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1894:	e04e      	b.n	1934 <initialize_opcode_info()+0x14d0>
    1896:	bf00      	nop
    1898:	20000a14 	.word	0x20000a14
    189c:	200004f8 	.word	0x200004f8
    18a0:	20000974 	.word	0x20000974
    18a4:	20017020 	.word	0x20017020
    18a8:	20000a08 	.word	0x20000a08
    18ac:	20000428 	.word	0x20000428
    18b0:	20017088 	.word	0x20017088
    18b4:	20000a04 	.word	0x20000a04
    18b8:	200170bc 	.word	0x200170bc
    18bc:	20000a0c 	.word	0x20000a0c
    18c0:	200170f0 	.word	0x200170f0
    18c4:	20000a18 	.word	0x20000a18
    18c8:	200003e8 	.word	0x200003e8
    18cc:	20017158 	.word	0x20017158
    18d0:	2000098c 	.word	0x2000098c
    18d4:	2001718c 	.word	0x2001718c
    18d8:	20000404 	.word	0x20000404
    18dc:	20017228 	.word	0x20017228
    18e0:	2001725c 	.word	0x2001725c
    18e4:	20000a1c 	.word	0x20000a1c
    18e8:	20017290 	.word	0x20017290
    18ec:	20000a24 	.word	0x20000a24
    18f0:	200172f8 	.word	0x200172f8
    18f4:	20000434 	.word	0x20000434
    18f8:	2001732c 	.word	0x2001732c
    18fc:	20000a28 	.word	0x20000a28
    1900:	20017360 	.word	0x20017360
    1904:	2000042c 	.word	0x2000042c
    1908:	200173fc 	.word	0x200173fc
    190c:	20000a2c 	.word	0x20000a2c
    1910:	200003d8 	.word	0x200003d8
    1914:	20017498 	.word	0x20017498
    1918:	20000a30 	.word	0x20000a30
    191c:	200003ec 	.word	0x200003ec
    1920:	200174cc 	.word	0x200174cc
    1924:	20000a34 	.word	0x20000a34
    1928:	20017500 	.word	0x20017500
    192c:	200003e0 	.word	0x200003e0
    1930:	20017568 	.word	0x20017568
    1934:	f7fe fb98 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1938:	a801      	add	r0, sp, #4
    193a:	f7fe fd85 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    193e:	49b2      	ldr	r1, [pc, #712]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1940:	a801      	add	r0, sp, #4
    1942:	f007 f8b7 	bl	8ab4 <String::String(char const*)>
    1946:	49b1      	ldr	r1, [pc, #708]	; (1c0c <initialize_opcode_info()+0x17a8>)
    1948:	a805      	add	r0, sp, #20
    194a:	f007 f8b3 	bl	8ab4 <String::String(char const*)>
    194e:	49b0      	ldr	r1, [pc, #704]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1950:	a809      	add	r0, sp, #36	; 0x24
    1952:	f007 f8af 	bl	8ab4 <String::String(char const*)>
    1956:	a901      	add	r1, sp, #4
    1958:	48ae      	ldr	r0, [pc, #696]	; (1c14 <initialize_opcode_info()+0x17b0>)
    195a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    195e:	f7fe fb83 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1962:	a801      	add	r0, sp, #4
    1964:	f7fe fd70 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    1968:	49ab      	ldr	r1, [pc, #684]	; (1c18 <initialize_opcode_info()+0x17b4>)
    196a:	a801      	add	r0, sp, #4
    196c:	f007 f8a2 	bl	8ab4 <String::String(char const*)>
    1970:	49a6      	ldr	r1, [pc, #664]	; (1c0c <initialize_opcode_info()+0x17a8>)
    1972:	a805      	add	r0, sp, #20
    1974:	f007 f89e 	bl	8ab4 <String::String(char const*)>
    1978:	49a5      	ldr	r1, [pc, #660]	; (1c10 <initialize_opcode_info()+0x17ac>)
    197a:	a809      	add	r0, sp, #36	; 0x24
    197c:	f007 f89a 	bl	8ab4 <String::String(char const*)>
    1980:	a901      	add	r1, sp, #4
    1982:	48a6      	ldr	r0, [pc, #664]	; (1c1c <initialize_opcode_info()+0x17b8>)
    1984:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1988:	f7fe fb6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    198c:	a801      	add	r0, sp, #4
    198e:	f7fe fd5b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    1992:	49a3      	ldr	r1, [pc, #652]	; (1c20 <initialize_opcode_info()+0x17bc>)
    1994:	a801      	add	r0, sp, #4
    1996:	f007 f88d 	bl	8ab4 <String::String(char const*)>
    199a:	49a2      	ldr	r1, [pc, #648]	; (1c24 <initialize_opcode_info()+0x17c0>)
    199c:	a805      	add	r0, sp, #20
    199e:	f007 f889 	bl	8ab4 <String::String(char const*)>
    19a2:	499b      	ldr	r1, [pc, #620]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19a4:	a809      	add	r0, sp, #36	; 0x24
    19a6:	f007 f885 	bl	8ab4 <String::String(char const*)>
    19aa:	a901      	add	r1, sp, #4
    19ac:	489e      	ldr	r0, [pc, #632]	; (1c28 <initialize_opcode_info()+0x17c4>)
    19ae:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    19b2:	f7fe fb59 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19b6:	a801      	add	r0, sp, #4
    19b8:	f7fe fd46 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    19bc:	4992      	ldr	r1, [pc, #584]	; (1c08 <initialize_opcode_info()+0x17a4>)
    19be:	a801      	add	r0, sp, #4
    19c0:	f007 f878 	bl	8ab4 <String::String(char const*)>
    19c4:	4999      	ldr	r1, [pc, #612]	; (1c2c <initialize_opcode_info()+0x17c8>)
    19c6:	a805      	add	r0, sp, #20
    19c8:	f007 f874 	bl	8ab4 <String::String(char const*)>
    19cc:	4990      	ldr	r1, [pc, #576]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19ce:	a809      	add	r0, sp, #36	; 0x24
    19d0:	f007 f870 	bl	8ab4 <String::String(char const*)>
    19d4:	a901      	add	r1, sp, #4
    19d6:	4896      	ldr	r0, [pc, #600]	; (1c30 <initialize_opcode_info()+0x17cc>)
    19d8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    19dc:	f7fe fb44 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19e0:	a801      	add	r0, sp, #4
    19e2:	f7fe fd31 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    19e6:	4993      	ldr	r1, [pc, #588]	; (1c34 <initialize_opcode_info()+0x17d0>)
    19e8:	a801      	add	r0, sp, #4
    19ea:	f007 f863 	bl	8ab4 <String::String(char const*)>
    19ee:	498d      	ldr	r1, [pc, #564]	; (1c24 <initialize_opcode_info()+0x17c0>)
    19f0:	a805      	add	r0, sp, #20
    19f2:	f007 f85f 	bl	8ab4 <String::String(char const*)>
    19f6:	4986      	ldr	r1, [pc, #536]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19f8:	a809      	add	r0, sp, #36	; 0x24
    19fa:	f007 f85b 	bl	8ab4 <String::String(char const*)>
    19fe:	a901      	add	r1, sp, #4
    1a00:	488d      	ldr	r0, [pc, #564]	; (1c38 <initialize_opcode_info()+0x17d4>)
    1a02:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1a06:	f7fe fb2f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a0a:	a801      	add	r0, sp, #4
    1a0c:	f7fe fd1c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    1a10:	498a      	ldr	r1, [pc, #552]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1a12:	a801      	add	r0, sp, #4
    1a14:	f007 f84e 	bl	8ab4 <String::String(char const*)>
    1a18:	4989      	ldr	r1, [pc, #548]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a1a:	a805      	add	r0, sp, #20
    1a1c:	f007 f84a 	bl	8ab4 <String::String(char const*)>
    1a20:	497b      	ldr	r1, [pc, #492]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a22:	a809      	add	r0, sp, #36	; 0x24
    1a24:	f007 f846 	bl	8ab4 <String::String(char const*)>
    1a28:	a901      	add	r1, sp, #4
    1a2a:	4886      	ldr	r0, [pc, #536]	; (1c44 <initialize_opcode_info()+0x17e0>)
    1a2c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a30:	f7fe fb1a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a34:	a801      	add	r0, sp, #4
    1a36:	f7fe fd07 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    1a3a:	4973      	ldr	r1, [pc, #460]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1a3c:	a801      	add	r0, sp, #4
    1a3e:	f007 f839 	bl	8ab4 <String::String(char const*)>
    1a42:	497f      	ldr	r1, [pc, #508]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a44:	a805      	add	r0, sp, #20
    1a46:	f007 f835 	bl	8ab4 <String::String(char const*)>
    1a4a:	4971      	ldr	r1, [pc, #452]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a4c:	a809      	add	r0, sp, #36	; 0x24
    1a4e:	f007 f831 	bl	8ab4 <String::String(char const*)>
    1a52:	a901      	add	r1, sp, #4
    1a54:	487c      	ldr	r0, [pc, #496]	; (1c48 <initialize_opcode_info()+0x17e4>)
    1a56:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a5a:	f7fe fb05 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a5e:	a801      	add	r0, sp, #4
    1a60:	f7fe fcf2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1a64:	496c      	ldr	r1, [pc, #432]	; (1c18 <initialize_opcode_info()+0x17b4>)
    1a66:	a801      	add	r0, sp, #4
    1a68:	f007 f824 	bl	8ab4 <String::String(char const*)>
    1a6c:	4974      	ldr	r1, [pc, #464]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a6e:	a805      	add	r0, sp, #20
    1a70:	f007 f820 	bl	8ab4 <String::String(char const*)>
    1a74:	4966      	ldr	r1, [pc, #408]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a76:	a809      	add	r0, sp, #36	; 0x24
    1a78:	f007 f81c 	bl	8ab4 <String::String(char const*)>
    1a7c:	a901      	add	r1, sp, #4
    1a7e:	4873      	ldr	r0, [pc, #460]	; (1c4c <initialize_opcode_info()+0x17e8>)
    1a80:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a84:	f7fe faf0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a88:	a801      	add	r0, sp, #4
    1a8a:	f7fe fcdd 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    1a8e:	4970      	ldr	r1, [pc, #448]	; (1c50 <initialize_opcode_info()+0x17ec>)
    1a90:	a801      	add	r0, sp, #4
    1a92:	f007 f80f 	bl	8ab4 <String::String(char const*)>
    1a96:	496f      	ldr	r1, [pc, #444]	; (1c54 <initialize_opcode_info()+0x17f0>)
    1a98:	a805      	add	r0, sp, #20
    1a9a:	f007 f80b 	bl	8ab4 <String::String(char const*)>
    1a9e:	4961      	ldr	r1, [pc, #388]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1aa0:	a809      	add	r0, sp, #36	; 0x24
    1aa2:	f007 f807 	bl	8ab4 <String::String(char const*)>
    1aa6:	a901      	add	r1, sp, #4
    1aa8:	486b      	ldr	r0, [pc, #428]	; (1c58 <initialize_opcode_info()+0x17f4>)
    1aaa:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1aae:	f7fe fadb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ab2:	a801      	add	r0, sp, #4
    1ab4:	f7fe fcc8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    1ab8:	4953      	ldr	r1, [pc, #332]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1aba:	a801      	add	r0, sp, #4
    1abc:	f006 fffa 	bl	8ab4 <String::String(char const*)>
    1ac0:	4966      	ldr	r1, [pc, #408]	; (1c5c <initialize_opcode_info()+0x17f8>)
    1ac2:	a805      	add	r0, sp, #20
    1ac4:	f006 fff6 	bl	8ab4 <String::String(char const*)>
    1ac8:	4951      	ldr	r1, [pc, #324]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1aca:	a809      	add	r0, sp, #36	; 0x24
    1acc:	f006 fff2 	bl	8ab4 <String::String(char const*)>
    1ad0:	a901      	add	r1, sp, #4
    1ad2:	4863      	ldr	r0, [pc, #396]	; (1c60 <initialize_opcode_info()+0x17fc>)
    1ad4:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1ad8:	f7fe fac6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1adc:	a801      	add	r0, sp, #4
    1ade:	f7fe fcb3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1ae2:	4956      	ldr	r1, [pc, #344]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1ae4:	a801      	add	r0, sp, #4
    1ae6:	f006 ffe5 	bl	8ab4 <String::String(char const*)>
    1aea:	495e      	ldr	r1, [pc, #376]	; (1c64 <initialize_opcode_info()+0x1800>)
    1aec:	a805      	add	r0, sp, #20
    1aee:	f006 ffe1 	bl	8ab4 <String::String(char const*)>
    1af2:	4947      	ldr	r1, [pc, #284]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1af4:	a809      	add	r0, sp, #36	; 0x24
    1af6:	f006 ffdd 	bl	8ab4 <String::String(char const*)>
    1afa:	a901      	add	r1, sp, #4
    1afc:	485a      	ldr	r0, [pc, #360]	; (1c68 <initialize_opcode_info()+0x1804>)
    1afe:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b02:	f7fe fab1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b06:	a801      	add	r0, sp, #4
    1b08:	f7fe fc9e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1b0c:	493e      	ldr	r1, [pc, #248]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1b0e:	a801      	add	r0, sp, #4
    1b10:	f006 ffd0 	bl	8ab4 <String::String(char const*)>
    1b14:	4953      	ldr	r1, [pc, #332]	; (1c64 <initialize_opcode_info()+0x1800>)
    1b16:	a805      	add	r0, sp, #20
    1b18:	f006 ffcc 	bl	8ab4 <String::String(char const*)>
    1b1c:	493c      	ldr	r1, [pc, #240]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b1e:	a809      	add	r0, sp, #36	; 0x24
    1b20:	f006 ffc8 	bl	8ab4 <String::String(char const*)>
    1b24:	a901      	add	r1, sp, #4
    1b26:	4851      	ldr	r0, [pc, #324]	; (1c6c <initialize_opcode_info()+0x1808>)
    1b28:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b2c:	f7fe fa9c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b30:	a801      	add	r0, sp, #4
    1b32:	f7fe fc89 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    1b36:	4938      	ldr	r1, [pc, #224]	; (1c18 <initialize_opcode_info()+0x17b4>)
    1b38:	a801      	add	r0, sp, #4
    1b3a:	f006 ffbb 	bl	8ab4 <String::String(char const*)>
    1b3e:	494c      	ldr	r1, [pc, #304]	; (1c70 <initialize_opcode_info()+0x180c>)
    1b40:	a805      	add	r0, sp, #20
    1b42:	f006 ffb7 	bl	8ab4 <String::String(char const*)>
    1b46:	4932      	ldr	r1, [pc, #200]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b48:	a809      	add	r0, sp, #36	; 0x24
    1b4a:	f006 ffb3 	bl	8ab4 <String::String(char const*)>
    1b4e:	a901      	add	r1, sp, #4
    1b50:	4848      	ldr	r0, [pc, #288]	; (1c74 <initialize_opcode_info()+0x1810>)
    1b52:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b56:	f7fe fa87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b5a:	a801      	add	r0, sp, #4
    1b5c:	f7fe fc74 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    1b60:	4945      	ldr	r1, [pc, #276]	; (1c78 <initialize_opcode_info()+0x1814>)
    1b62:	a801      	add	r0, sp, #4
    1b64:	f006 ffa6 	bl	8ab4 <String::String(char const*)>
    1b68:	492e      	ldr	r1, [pc, #184]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1b6a:	a805      	add	r0, sp, #20
    1b6c:	f006 ffa2 	bl	8ab4 <String::String(char const*)>
    1b70:	4942      	ldr	r1, [pc, #264]	; (1c7c <initialize_opcode_info()+0x1818>)
    1b72:	a809      	add	r0, sp, #36	; 0x24
    1b74:	f006 ff9e 	bl	8ab4 <String::String(char const*)>
    1b78:	a901      	add	r1, sp, #4
    1b7a:	4841      	ldr	r0, [pc, #260]	; (1c80 <initialize_opcode_info()+0x181c>)
    1b7c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1b80:	f7fe fa72 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b84:	a801      	add	r0, sp, #4
    1b86:	f7fe fc5f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1b8a:	491f      	ldr	r1, [pc, #124]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1b8c:	a801      	add	r0, sp, #4
    1b8e:	f006 ff91 	bl	8ab4 <String::String(char const*)>
    1b92:	493c      	ldr	r1, [pc, #240]	; (1c84 <initialize_opcode_info()+0x1820>)
    1b94:	a805      	add	r0, sp, #20
    1b96:	f006 ff8d 	bl	8ab4 <String::String(char const*)>
    1b9a:	491d      	ldr	r1, [pc, #116]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b9c:	a809      	add	r0, sp, #36	; 0x24
    1b9e:	f006 ff89 	bl	8ab4 <String::String(char const*)>
    1ba2:	a901      	add	r1, sp, #4
    1ba4:	4838      	ldr	r0, [pc, #224]	; (1c88 <initialize_opcode_info()+0x1824>)
    1ba6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1baa:	f7fe fa5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bae:	a801      	add	r0, sp, #4
    1bb0:	f7fe fc4a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    1bb4:	4935      	ldr	r1, [pc, #212]	; (1c8c <initialize_opcode_info()+0x1828>)
    1bb6:	a801      	add	r0, sp, #4
    1bb8:	f006 ff7c 	bl	8ab4 <String::String(char const*)>
    1bbc:	4919      	ldr	r1, [pc, #100]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1bbe:	a805      	add	r0, sp, #20
    1bc0:	f006 ff78 	bl	8ab4 <String::String(char const*)>
    1bc4:	4917      	ldr	r1, [pc, #92]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1bc6:	a809      	add	r0, sp, #36	; 0x24
    1bc8:	f006 ff74 	bl	8ab4 <String::String(char const*)>
    1bcc:	a901      	add	r1, sp, #4
    1bce:	4830      	ldr	r0, [pc, #192]	; (1c90 <initialize_opcode_info()+0x182c>)
    1bd0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1bd4:	f7fe fa48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bd8:	a801      	add	r0, sp, #4
    1bda:	f7fe fc35 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1bde:	4917      	ldr	r1, [pc, #92]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1be0:	a801      	add	r0, sp, #4
    1be2:	f006 ff67 	bl	8ab4 <String::String(char const*)>
    1be6:	492b      	ldr	r1, [pc, #172]	; (1c94 <initialize_opcode_info()+0x1830>)
    1be8:	a805      	add	r0, sp, #20
    1bea:	f006 ff63 	bl	8ab4 <String::String(char const*)>
    1bee:	4908      	ldr	r1, [pc, #32]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1bf0:	a809      	add	r0, sp, #36	; 0x24
    1bf2:	f006 ff5f 	bl	8ab4 <String::String(char const*)>
    1bf6:	a901      	add	r1, sp, #4
    1bf8:	4827      	ldr	r0, [pc, #156]	; (1c98 <initialize_opcode_info()+0x1834>)
    1bfa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1bfe:	f7fe fa33 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c02:	a801      	add	r0, sp, #4
    1c04:	e04a      	b.n	1c9c <initialize_opcode_info()+0x1838>
    1c06:	bf00      	nop
    1c08:	20000a30 	.word	0x20000a30
    1c0c:	200003e0 	.word	0x200003e0
    1c10:	20000974 	.word	0x20000974
    1c14:	2001759c 	.word	0x2001759c
    1c18:	20000a34 	.word	0x20000a34
    1c1c:	200175d0 	.word	0x200175d0
    1c20:	20000a38 	.word	0x20000a38
    1c24:	200004f8 	.word	0x200004f8
    1c28:	20017638 	.word	0x20017638
    1c2c:	200003d8 	.word	0x200003d8
    1c30:	2001766c 	.word	0x2001766c
    1c34:	20000a3c 	.word	0x20000a3c
    1c38:	200176a0 	.word	0x200176a0
    1c3c:	20000a2c 	.word	0x20000a2c
    1c40:	20000428 	.word	0x20000428
    1c44:	20017708 	.word	0x20017708
    1c48:	2001773c 	.word	0x2001773c
    1c4c:	20017770 	.word	0x20017770
    1c50:	20000a40 	.word	0x20000a40
    1c54:	200003e8 	.word	0x200003e8
    1c58:	200177d8 	.word	0x200177d8
    1c5c:	2000098c 	.word	0x2000098c
    1c60:	2001780c 	.word	0x2001780c
    1c64:	20000404 	.word	0x20000404
    1c68:	200178a8 	.word	0x200178a8
    1c6c:	200178dc 	.word	0x200178dc
    1c70:	20000a1c 	.word	0x20000a1c
    1c74:	20017910 	.word	0x20017910
    1c78:	20000a44 	.word	0x20000a44
    1c7c:	20000a48 	.word	0x20000a48
    1c80:	20017978 	.word	0x20017978
    1c84:	20000434 	.word	0x20000434
    1c88:	200179ac 	.word	0x200179ac
    1c8c:	20000a4c 	.word	0x20000a4c
    1c90:	200179e0 	.word	0x200179e0
    1c94:	2000042c 	.word	0x2000042c
    1c98:	20017a48 	.word	0x20017a48
    1c9c:	f7fe fbd4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    1ca0:	49b1      	ldr	r1, [pc, #708]	; (1f68 <initialize_opcode_info()+0x1b04>)
    1ca2:	a801      	add	r0, sp, #4
    1ca4:	f006 ff06 	bl	8ab4 <String::String(char const*)>
    1ca8:	49b0      	ldr	r1, [pc, #704]	; (1f6c <initialize_opcode_info()+0x1b08>)
    1caa:	a805      	add	r0, sp, #20
    1cac:	f006 ff02 	bl	8ab4 <String::String(char const*)>
    1cb0:	49af      	ldr	r1, [pc, #700]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1cb2:	a809      	add	r0, sp, #36	; 0x24
    1cb4:	f006 fefe 	bl	8ab4 <String::String(char const*)>
    1cb8:	a901      	add	r1, sp, #4
    1cba:	48ae      	ldr	r0, [pc, #696]	; (1f74 <initialize_opcode_info()+0x1b10>)
    1cbc:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1cc0:	f7fe f9d2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cc4:	a801      	add	r0, sp, #4
    1cc6:	f7fe fbbf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1cca:	49ab      	ldr	r1, [pc, #684]	; (1f78 <initialize_opcode_info()+0x1b14>)
    1ccc:	a801      	add	r0, sp, #4
    1cce:	f006 fef1 	bl	8ab4 <String::String(char const*)>
    1cd2:	49aa      	ldr	r1, [pc, #680]	; (1f7c <initialize_opcode_info()+0x1b18>)
    1cd4:	a805      	add	r0, sp, #20
    1cd6:	f006 feed 	bl	8ab4 <String::String(char const*)>
    1cda:	49a5      	ldr	r1, [pc, #660]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1cdc:	a809      	add	r0, sp, #36	; 0x24
    1cde:	f006 fee9 	bl	8ab4 <String::String(char const*)>
    1ce2:	a901      	add	r1, sp, #4
    1ce4:	48a6      	ldr	r0, [pc, #664]	; (1f80 <initialize_opcode_info()+0x1b1c>)
    1ce6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1cea:	f7fe f9bd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cee:	a801      	add	r0, sp, #4
    1cf0:	f7fe fbaa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1cf4:	49a3      	ldr	r1, [pc, #652]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1cf6:	a801      	add	r0, sp, #4
    1cf8:	f006 fedc 	bl	8ab4 <String::String(char const*)>
    1cfc:	49a2      	ldr	r1, [pc, #648]	; (1f88 <initialize_opcode_info()+0x1b24>)
    1cfe:	a805      	add	r0, sp, #20
    1d00:	f006 fed8 	bl	8ab4 <String::String(char const*)>
    1d04:	49a1      	ldr	r1, [pc, #644]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d06:	a809      	add	r0, sp, #36	; 0x24
    1d08:	f006 fed4 	bl	8ab4 <String::String(char const*)>
    1d0c:	a901      	add	r1, sp, #4
    1d0e:	48a0      	ldr	r0, [pc, #640]	; (1f90 <initialize_opcode_info()+0x1b2c>)
    1d10:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1d14:	f7fe f9a8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d18:	a801      	add	r0, sp, #4
    1d1a:	f7fe fb95 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1d1e:	499d      	ldr	r1, [pc, #628]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1d20:	a801      	add	r0, sp, #4
    1d22:	f006 fec7 	bl	8ab4 <String::String(char const*)>
    1d26:	499c      	ldr	r1, [pc, #624]	; (1f98 <initialize_opcode_info()+0x1b34>)
    1d28:	a805      	add	r0, sp, #20
    1d2a:	f006 fec3 	bl	8ab4 <String::String(char const*)>
    1d2e:	4997      	ldr	r1, [pc, #604]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d30:	a809      	add	r0, sp, #36	; 0x24
    1d32:	f006 febf 	bl	8ab4 <String::String(char const*)>
    1d36:	a901      	add	r1, sp, #4
    1d38:	4898      	ldr	r0, [pc, #608]	; (1f9c <initialize_opcode_info()+0x1b38>)
    1d3a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1d3e:	f7fe f993 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d42:	a801      	add	r0, sp, #4
    1d44:	f7fe fb80 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    1d48:	498e      	ldr	r1, [pc, #568]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1d4a:	a801      	add	r0, sp, #4
    1d4c:	f006 feb2 	bl	8ab4 <String::String(char const*)>
    1d50:	4993      	ldr	r1, [pc, #588]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1d52:	a805      	add	r0, sp, #20
    1d54:	f006 feae 	bl	8ab4 <String::String(char const*)>
    1d58:	498c      	ldr	r1, [pc, #560]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d5a:	a809      	add	r0, sp, #36	; 0x24
    1d5c:	f006 feaa 	bl	8ab4 <String::String(char const*)>
    1d60:	a901      	add	r1, sp, #4
    1d62:	4890      	ldr	r0, [pc, #576]	; (1fa4 <initialize_opcode_info()+0x1b40>)
    1d64:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1d68:	f7fe f97e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d6c:	a801      	add	r0, sp, #4
    1d6e:	f7fe fb6b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    1d72:	4988      	ldr	r1, [pc, #544]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1d74:	a801      	add	r0, sp, #4
    1d76:	f006 fe9d 	bl	8ab4 <String::String(char const*)>
    1d7a:	4989      	ldr	r1, [pc, #548]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1d7c:	a805      	add	r0, sp, #20
    1d7e:	f006 fe99 	bl	8ab4 <String::String(char const*)>
    1d82:	4982      	ldr	r1, [pc, #520]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d84:	a809      	add	r0, sp, #36	; 0x24
    1d86:	f006 fe95 	bl	8ab4 <String::String(char const*)>
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	4886      	ldr	r0, [pc, #536]	; (1fa8 <initialize_opcode_info()+0x1b44>)
    1d8e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1d92:	f7fe f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d96:	a801      	add	r0, sp, #4
    1d98:	f7fe fb56 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1d9c:	4983      	ldr	r1, [pc, #524]	; (1fac <initialize_opcode_info()+0x1b48>)
    1d9e:	a801      	add	r0, sp, #4
    1da0:	f006 fe88 	bl	8ab4 <String::String(char const*)>
    1da4:	497e      	ldr	r1, [pc, #504]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1da6:	a805      	add	r0, sp, #20
    1da8:	f006 fe84 	bl	8ab4 <String::String(char const*)>
    1dac:	4970      	ldr	r1, [pc, #448]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1dae:	a809      	add	r0, sp, #36	; 0x24
    1db0:	f006 fe80 	bl	8ab4 <String::String(char const*)>
    1db4:	a901      	add	r1, sp, #4
    1db6:	487e      	ldr	r0, [pc, #504]	; (1fb0 <initialize_opcode_info()+0x1b4c>)
    1db8:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1dbc:	f7fe f954 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	f7fe fb41 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1dc6:	497b      	ldr	r1, [pc, #492]	; (1fb4 <initialize_opcode_info()+0x1b50>)
    1dc8:	a801      	add	r0, sp, #4
    1dca:	f006 fe73 	bl	8ab4 <String::String(char const*)>
    1dce:	497a      	ldr	r1, [pc, #488]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1dd0:	a805      	add	r0, sp, #20
    1dd2:	f006 fe6f 	bl	8ab4 <String::String(char const*)>
    1dd6:	4978      	ldr	r1, [pc, #480]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1dd8:	a809      	add	r0, sp, #36	; 0x24
    1dda:	f006 fe6b 	bl	8ab4 <String::String(char const*)>
    1dde:	a901      	add	r1, sp, #4
    1de0:	4876      	ldr	r0, [pc, #472]	; (1fbc <initialize_opcode_info()+0x1b58>)
    1de2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1de6:	f7fe f93f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dea:	a801      	add	r0, sp, #4
    1dec:	f7fe fb2c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1df0:	4968      	ldr	r1, [pc, #416]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1df2:	a801      	add	r0, sp, #4
    1df4:	f006 fe5e 	bl	8ab4 <String::String(char const*)>
    1df8:	4963      	ldr	r1, [pc, #396]	; (1f88 <initialize_opcode_info()+0x1b24>)
    1dfa:	a805      	add	r0, sp, #20
    1dfc:	f006 fe5a 	bl	8ab4 <String::String(char const*)>
    1e00:	4962      	ldr	r1, [pc, #392]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e02:	a809      	add	r0, sp, #36	; 0x24
    1e04:	f006 fe56 	bl	8ab4 <String::String(char const*)>
    1e08:	a901      	add	r1, sp, #4
    1e0a:	486d      	ldr	r0, [pc, #436]	; (1fc0 <initialize_opcode_info()+0x1b5c>)
    1e0c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1e10:	f7fe f92a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e14:	a801      	add	r0, sp, #4
    1e16:	f7fe fb17 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1e1a:	496a      	ldr	r1, [pc, #424]	; (1fc4 <initialize_opcode_info()+0x1b60>)
    1e1c:	a801      	add	r0, sp, #4
    1e1e:	f006 fe49 	bl	8ab4 <String::String(char const*)>
    1e22:	4965      	ldr	r1, [pc, #404]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1e24:	a805      	add	r0, sp, #20
    1e26:	f006 fe45 	bl	8ab4 <String::String(char const*)>
    1e2a:	4951      	ldr	r1, [pc, #324]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1e2c:	a809      	add	r0, sp, #36	; 0x24
    1e2e:	f006 fe41 	bl	8ab4 <String::String(char const*)>
    1e32:	a901      	add	r1, sp, #4
    1e34:	4864      	ldr	r0, [pc, #400]	; (1fc8 <initialize_opcode_info()+0x1b64>)
    1e36:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1e3a:	f7fe f915 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e3e:	a801      	add	r0, sp, #4
    1e40:	f7fe fb02 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1e44:	494f      	ldr	r1, [pc, #316]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1e46:	a801      	add	r0, sp, #4
    1e48:	f006 fe34 	bl	8ab4 <String::String(char const*)>
    1e4c:	495f      	ldr	r1, [pc, #380]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1e4e:	a805      	add	r0, sp, #20
    1e50:	f006 fe30 	bl	8ab4 <String::String(char const*)>
    1e54:	494d      	ldr	r1, [pc, #308]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e56:	a809      	add	r0, sp, #36	; 0x24
    1e58:	f006 fe2c 	bl	8ab4 <String::String(char const*)>
    1e5c:	a901      	add	r1, sp, #4
    1e5e:	485c      	ldr	r0, [pc, #368]	; (1fd0 <initialize_opcode_info()+0x1b6c>)
    1e60:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1e64:	f7fe f900 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e68:	a801      	add	r0, sp, #4
    1e6a:	f7fe faed 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1e6e:	4949      	ldr	r1, [pc, #292]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1e70:	a801      	add	r0, sp, #4
    1e72:	f006 fe1f 	bl	8ab4 <String::String(char const*)>
    1e76:	4955      	ldr	r1, [pc, #340]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1e78:	a805      	add	r0, sp, #20
    1e7a:	f006 fe1b 	bl	8ab4 <String::String(char const*)>
    1e7e:	4943      	ldr	r1, [pc, #268]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e80:	a809      	add	r0, sp, #36	; 0x24
    1e82:	f006 fe17 	bl	8ab4 <String::String(char const*)>
    1e86:	a901      	add	r1, sp, #4
    1e88:	4852      	ldr	r0, [pc, #328]	; (1fd4 <initialize_opcode_info()+0x1b70>)
    1e8a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1e8e:	f7fe f8eb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e92:	a801      	add	r0, sp, #4
    1e94:	f7fe fad8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1e98:	4944      	ldr	r1, [pc, #272]	; (1fac <initialize_opcode_info()+0x1b48>)
    1e9a:	a801      	add	r0, sp, #4
    1e9c:	f006 fe0a 	bl	8ab4 <String::String(char const*)>
    1ea0:	494a      	ldr	r1, [pc, #296]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1ea2:	a805      	add	r0, sp, #20
    1ea4:	f006 fe06 	bl	8ab4 <String::String(char const*)>
    1ea8:	4931      	ldr	r1, [pc, #196]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1eaa:	a809      	add	r0, sp, #36	; 0x24
    1eac:	f006 fe02 	bl	8ab4 <String::String(char const*)>
    1eb0:	a901      	add	r1, sp, #4
    1eb2:	4849      	ldr	r0, [pc, #292]	; (1fd8 <initialize_opcode_info()+0x1b74>)
    1eb4:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1eb8:	f7fe f8d6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ebc:	a801      	add	r0, sp, #4
    1ebe:	f7fe fac3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1ec2:	4946      	ldr	r1, [pc, #280]	; (1fdc <initialize_opcode_info()+0x1b78>)
    1ec4:	a801      	add	r0, sp, #4
    1ec6:	f006 fdf5 	bl	8ab4 <String::String(char const*)>
    1eca:	4945      	ldr	r1, [pc, #276]	; (1fe0 <initialize_opcode_info()+0x1b7c>)
    1ecc:	a805      	add	r0, sp, #20
    1ece:	f006 fdf1 	bl	8ab4 <String::String(char const*)>
    1ed2:	4939      	ldr	r1, [pc, #228]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1ed4:	a809      	add	r0, sp, #36	; 0x24
    1ed6:	f006 fded 	bl	8ab4 <String::String(char const*)>
    1eda:	a901      	add	r1, sp, #4
    1edc:	4841      	ldr	r0, [pc, #260]	; (1fe4 <initialize_opcode_info()+0x1b80>)
    1ede:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1ee2:	f7fe f8c1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ee6:	a801      	add	r0, sp, #4
    1ee8:	f7fe faae 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1eec:	4929      	ldr	r1, [pc, #164]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1eee:	a801      	add	r0, sp, #4
    1ef0:	f006 fde0 	bl	8ab4 <String::String(char const*)>
    1ef4:	493c      	ldr	r1, [pc, #240]	; (1fe8 <initialize_opcode_info()+0x1b84>)
    1ef6:	a805      	add	r0, sp, #20
    1ef8:	f006 fddc 	bl	8ab4 <String::String(char const*)>
    1efc:	4923      	ldr	r1, [pc, #140]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1efe:	a809      	add	r0, sp, #36	; 0x24
    1f00:	f006 fdd8 	bl	8ab4 <String::String(char const*)>
    1f04:	a901      	add	r1, sp, #4
    1f06:	4839      	ldr	r0, [pc, #228]	; (1fec <initialize_opcode_info()+0x1b88>)
    1f08:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1f0c:	f7fe f8ac 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f10:	a801      	add	r0, sp, #4
    1f12:	f7fe fa99 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1f16:	491f      	ldr	r1, [pc, #124]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1f18:	a801      	add	r0, sp, #4
    1f1a:	f006 fdcb 	bl	8ab4 <String::String(char const*)>
    1f1e:	4934      	ldr	r1, [pc, #208]	; (1ff0 <initialize_opcode_info()+0x1b8c>)
    1f20:	a805      	add	r0, sp, #20
    1f22:	f006 fdc7 	bl	8ab4 <String::String(char const*)>
    1f26:	4919      	ldr	r1, [pc, #100]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1f28:	a809      	add	r0, sp, #36	; 0x24
    1f2a:	f006 fdc3 	bl	8ab4 <String::String(char const*)>
    1f2e:	a901      	add	r1, sp, #4
    1f30:	4830      	ldr	r0, [pc, #192]	; (1ff4 <initialize_opcode_info()+0x1b90>)
    1f32:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1f36:	f7fe f897 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f3a:	a801      	add	r0, sp, #4
    1f3c:	f7fe fa84 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1f40:	491a      	ldr	r1, [pc, #104]	; (1fac <initialize_opcode_info()+0x1b48>)
    1f42:	a801      	add	r0, sp, #4
    1f44:	f006 fdb6 	bl	8ab4 <String::String(char const*)>
    1f48:	4929      	ldr	r1, [pc, #164]	; (1ff0 <initialize_opcode_info()+0x1b8c>)
    1f4a:	a805      	add	r0, sp, #20
    1f4c:	f006 fdb2 	bl	8ab4 <String::String(char const*)>
    1f50:	4907      	ldr	r1, [pc, #28]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1f52:	a809      	add	r0, sp, #36	; 0x24
    1f54:	f006 fdae 	bl	8ab4 <String::String(char const*)>
    1f58:	a901      	add	r1, sp, #4
    1f5a:	4827      	ldr	r0, [pc, #156]	; (1ff8 <initialize_opcode_info()+0x1b94>)
    1f5c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1f60:	f7fe f882 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f64:	a801      	add	r0, sp, #4
    1f66:	e049      	b.n	1ffc <initialize_opcode_info()+0x1b98>
    1f68:	20000a30 	.word	0x20000a30
    1f6c:	2000042c 	.word	0x2000042c
    1f70:	20000974 	.word	0x20000974
    1f74:	20017a7c 	.word	0x20017a7c
    1f78:	20000a34 	.word	0x20000a34
    1f7c:	20000434 	.word	0x20000434
    1f80:	20017ab0 	.word	0x20017ab0
    1f84:	20000a50 	.word	0x20000a50
    1f88:	200003d8 	.word	0x200003d8
    1f8c:	2000097c 	.word	0x2000097c
    1f90:	20017b18 	.word	0x20017b18
    1f94:	20000a54 	.word	0x20000a54
    1f98:	200003ec 	.word	0x200003ec
    1f9c:	20017b4c 	.word	0x20017b4c
    1fa0:	200003e0 	.word	0x200003e0
    1fa4:	20017be8 	.word	0x20017be8
    1fa8:	20017c1c 	.word	0x20017c1c
    1fac:	20000a58 	.word	0x20000a58
    1fb0:	20017c50 	.word	0x20017c50
    1fb4:	20000a5c 	.word	0x20000a5c
    1fb8:	200004f8 	.word	0x200004f8
    1fbc:	20017cb8 	.word	0x20017cb8
    1fc0:	20017cec 	.word	0x20017cec
    1fc4:	20000a60 	.word	0x20000a60
    1fc8:	20017d20 	.word	0x20017d20
    1fcc:	20000428 	.word	0x20000428
    1fd0:	20017d88 	.word	0x20017d88
    1fd4:	20017dbc 	.word	0x20017dbc
    1fd8:	20017df0 	.word	0x20017df0
    1fdc:	20000a64 	.word	0x20000a64
    1fe0:	200003e8 	.word	0x200003e8
    1fe4:	20017e58 	.word	0x20017e58
    1fe8:	2000098c 	.word	0x2000098c
    1fec:	20017e8c 	.word	0x20017e8c
    1ff0:	20000404 	.word	0x20000404
    1ff4:	20017f5c 	.word	0x20017f5c
    1ff8:	20017f90 	.word	0x20017f90
    1ffc:	f7fe fa24 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    2000:	49b2      	ldr	r1, [pc, #712]	; (22cc <initialize_opcode_info()+0x1e68>)
    2002:	a801      	add	r0, sp, #4
    2004:	f006 fd56 	bl	8ab4 <String::String(char const*)>
    2008:	49b1      	ldr	r1, [pc, #708]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    200a:	a805      	add	r0, sp, #20
    200c:	f006 fd52 	bl	8ab4 <String::String(char const*)>
    2010:	49b0      	ldr	r1, [pc, #704]	; (22d4 <initialize_opcode_info()+0x1e70>)
    2012:	a809      	add	r0, sp, #36	; 0x24
    2014:	f006 fd4e 	bl	8ab4 <String::String(char const*)>
    2018:	a901      	add	r1, sp, #4
    201a:	48af      	ldr	r0, [pc, #700]	; (22d8 <initialize_opcode_info()+0x1e74>)
    201c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    2020:	f7fe f822 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2024:	a801      	add	r0, sp, #4
    2026:	f7fe fa0f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    202a:	49ac      	ldr	r1, [pc, #688]	; (22dc <initialize_opcode_info()+0x1e78>)
    202c:	a801      	add	r0, sp, #4
    202e:	f006 fd41 	bl	8ab4 <String::String(char const*)>
    2032:	49ab      	ldr	r1, [pc, #684]	; (22e0 <initialize_opcode_info()+0x1e7c>)
    2034:	a805      	add	r0, sp, #20
    2036:	f006 fd3d 	bl	8ab4 <String::String(char const*)>
    203a:	49aa      	ldr	r1, [pc, #680]	; (22e4 <initialize_opcode_info()+0x1e80>)
    203c:	a809      	add	r0, sp, #36	; 0x24
    203e:	f006 fd39 	bl	8ab4 <String::String(char const*)>
    2042:	a901      	add	r1, sp, #4
    2044:	48a8      	ldr	r0, [pc, #672]	; (22e8 <initialize_opcode_info()+0x1e84>)
    2046:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    204a:	f7fe f80d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    204e:	a801      	add	r0, sp, #4
    2050:	f7fe f9fa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    2054:	49a1      	ldr	r1, [pc, #644]	; (22dc <initialize_opcode_info()+0x1e78>)
    2056:	a801      	add	r0, sp, #4
    2058:	f006 fd2c 	bl	8ab4 <String::String(char const*)>
    205c:	49a3      	ldr	r1, [pc, #652]	; (22ec <initialize_opcode_info()+0x1e88>)
    205e:	a805      	add	r0, sp, #20
    2060:	f006 fd28 	bl	8ab4 <String::String(char const*)>
    2064:	499f      	ldr	r1, [pc, #636]	; (22e4 <initialize_opcode_info()+0x1e80>)
    2066:	a809      	add	r0, sp, #36	; 0x24
    2068:	f006 fd24 	bl	8ab4 <String::String(char const*)>
    206c:	a901      	add	r1, sp, #4
    206e:	48a0      	ldr	r0, [pc, #640]	; (22f0 <initialize_opcode_info()+0x1e8c>)
    2070:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2074:	f7fd fff8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2078:	a801      	add	r0, sp, #4
    207a:	f7fe f9e5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    207e:	499d      	ldr	r1, [pc, #628]	; (22f4 <initialize_opcode_info()+0x1e90>)
    2080:	a801      	add	r0, sp, #4
    2082:	f006 fd17 	bl	8ab4 <String::String(char const*)>
    2086:	4999      	ldr	r1, [pc, #612]	; (22ec <initialize_opcode_info()+0x1e88>)
    2088:	a805      	add	r0, sp, #20
    208a:	f006 fd13 	bl	8ab4 <String::String(char const*)>
    208e:	499a      	ldr	r1, [pc, #616]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2090:	a809      	add	r0, sp, #36	; 0x24
    2092:	f006 fd0f 	bl	8ab4 <String::String(char const*)>
    2096:	f240 3307 	movw	r3, #775	; 0x307
    209a:	a901      	add	r1, sp, #4
    209c:	4897      	ldr	r0, [pc, #604]	; (22fc <initialize_opcode_info()+0x1e98>)
    209e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20a2:	f7fd ffe1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20a6:	a801      	add	r0, sp, #4
    20a8:	f7fe f9ce 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    20ac:	4994      	ldr	r1, [pc, #592]	; (2300 <initialize_opcode_info()+0x1e9c>)
    20ae:	a801      	add	r0, sp, #4
    20b0:	f006 fd00 	bl	8ab4 <String::String(char const*)>
    20b4:	4993      	ldr	r1, [pc, #588]	; (2304 <initialize_opcode_info()+0x1ea0>)
    20b6:	a805      	add	r0, sp, #20
    20b8:	f006 fcfc 	bl	8ab4 <String::String(char const*)>
    20bc:	4989      	ldr	r1, [pc, #548]	; (22e4 <initialize_opcode_info()+0x1e80>)
    20be:	a809      	add	r0, sp, #36	; 0x24
    20c0:	f006 fcf8 	bl	8ab4 <String::String(char const*)>
    20c4:	a901      	add	r1, sp, #4
    20c6:	4890      	ldr	r0, [pc, #576]	; (2308 <initialize_opcode_info()+0x1ea4>)
    20c8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    20cc:	f7fd ffcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20d0:	a801      	add	r0, sp, #4
    20d2:	f7fe f9b9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    20d6:	498d      	ldr	r1, [pc, #564]	; (230c <initialize_opcode_info()+0x1ea8>)
    20d8:	a801      	add	r0, sp, #4
    20da:	f006 fceb 	bl	8ab4 <String::String(char const*)>
    20de:	498c      	ldr	r1, [pc, #560]	; (2310 <initialize_opcode_info()+0x1eac>)
    20e0:	a805      	add	r0, sp, #20
    20e2:	f006 fce7 	bl	8ab4 <String::String(char const*)>
    20e6:	498b      	ldr	r1, [pc, #556]	; (2314 <initialize_opcode_info()+0x1eb0>)
    20e8:	a809      	add	r0, sp, #36	; 0x24
    20ea:	f006 fce3 	bl	8ab4 <String::String(char const*)>
    20ee:	a901      	add	r1, sp, #4
    20f0:	4889      	ldr	r0, [pc, #548]	; (2318 <initialize_opcode_info()+0x1eb4>)
    20f2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    20f6:	f7fd ffb7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20fa:	a801      	add	r0, sp, #4
    20fc:	f7fe f9a4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    2100:	497f      	ldr	r1, [pc, #508]	; (2300 <initialize_opcode_info()+0x1e9c>)
    2102:	a801      	add	r0, sp, #4
    2104:	f006 fcd6 	bl	8ab4 <String::String(char const*)>
    2108:	4984      	ldr	r1, [pc, #528]	; (231c <initialize_opcode_info()+0x1eb8>)
    210a:	a805      	add	r0, sp, #20
    210c:	f006 fcd2 	bl	8ab4 <String::String(char const*)>
    2110:	4974      	ldr	r1, [pc, #464]	; (22e4 <initialize_opcode_info()+0x1e80>)
    2112:	a809      	add	r0, sp, #36	; 0x24
    2114:	f006 fcce 	bl	8ab4 <String::String(char const*)>
    2118:	a901      	add	r1, sp, #4
    211a:	4881      	ldr	r0, [pc, #516]	; (2320 <initialize_opcode_info()+0x1ebc>)
    211c:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    2120:	f7fd ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2124:	a801      	add	r0, sp, #4
    2126:	f7fe f98f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    212a:	4978      	ldr	r1, [pc, #480]	; (230c <initialize_opcode_info()+0x1ea8>)
    212c:	a801      	add	r0, sp, #4
    212e:	f006 fcc1 	bl	8ab4 <String::String(char const*)>
    2132:	497a      	ldr	r1, [pc, #488]	; (231c <initialize_opcode_info()+0x1eb8>)
    2134:	a805      	add	r0, sp, #20
    2136:	f006 fcbd 	bl	8ab4 <String::String(char const*)>
    213a:	4976      	ldr	r1, [pc, #472]	; (2314 <initialize_opcode_info()+0x1eb0>)
    213c:	a809      	add	r0, sp, #36	; 0x24
    213e:	f006 fcb9 	bl	8ab4 <String::String(char const*)>
    2142:	a901      	add	r1, sp, #4
    2144:	4877      	ldr	r0, [pc, #476]	; (2324 <initialize_opcode_info()+0x1ec0>)
    2146:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    214a:	f7fd ff8d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    214e:	a801      	add	r0, sp, #4
    2150:	f7fe f97a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    2154:	4974      	ldr	r1, [pc, #464]	; (2328 <initialize_opcode_info()+0x1ec4>)
    2156:	a801      	add	r0, sp, #4
    2158:	f006 fcac 	bl	8ab4 <String::String(char const*)>
    215c:	496f      	ldr	r1, [pc, #444]	; (231c <initialize_opcode_info()+0x1eb8>)
    215e:	a805      	add	r0, sp, #20
    2160:	f006 fca8 	bl	8ab4 <String::String(char const*)>
    2164:	4964      	ldr	r1, [pc, #400]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2166:	a809      	add	r0, sp, #36	; 0x24
    2168:	f006 fca4 	bl	8ab4 <String::String(char const*)>
    216c:	a901      	add	r1, sp, #4
    216e:	486f      	ldr	r0, [pc, #444]	; (232c <initialize_opcode_info()+0x1ec8>)
    2170:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    2174:	f7fd ff78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2178:	a801      	add	r0, sp, #4
    217a:	f7fe f965 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    217e:	496c      	ldr	r1, [pc, #432]	; (2330 <initialize_opcode_info()+0x1ecc>)
    2180:	a801      	add	r0, sp, #4
    2182:	f006 fc97 	bl	8ab4 <String::String(char const*)>
    2186:	4952      	ldr	r1, [pc, #328]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    2188:	a805      	add	r0, sp, #20
    218a:	f006 fc93 	bl	8ab4 <String::String(char const*)>
    218e:	495a      	ldr	r1, [pc, #360]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2190:	a809      	add	r0, sp, #36	; 0x24
    2192:	f006 fc8f 	bl	8ab4 <String::String(char const*)>
    2196:	a901      	add	r1, sp, #4
    2198:	4866      	ldr	r0, [pc, #408]	; (2334 <initialize_opcode_info()+0x1ed0>)
    219a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    219e:	f7fd ff63 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21a2:	a801      	add	r0, sp, #4
    21a4:	f7fe f950 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    21a8:	4958      	ldr	r1, [pc, #352]	; (230c <initialize_opcode_info()+0x1ea8>)
    21aa:	a801      	add	r0, sp, #4
    21ac:	f006 fc82 	bl	8ab4 <String::String(char const*)>
    21b0:	4954      	ldr	r1, [pc, #336]	; (2304 <initialize_opcode_info()+0x1ea0>)
    21b2:	a805      	add	r0, sp, #20
    21b4:	f006 fc7e 	bl	8ab4 <String::String(char const*)>
    21b8:	4956      	ldr	r1, [pc, #344]	; (2314 <initialize_opcode_info()+0x1eb0>)
    21ba:	a809      	add	r0, sp, #36	; 0x24
    21bc:	f006 fc7a 	bl	8ab4 <String::String(char const*)>
    21c0:	a901      	add	r1, sp, #4
    21c2:	485d      	ldr	r0, [pc, #372]	; (2338 <initialize_opcode_info()+0x1ed4>)
    21c4:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    21c8:	f7fd ff4e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21cc:	a801      	add	r0, sp, #4
    21ce:	f7fe f93b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    21d2:	495a      	ldr	r1, [pc, #360]	; (233c <initialize_opcode_info()+0x1ed8>)
    21d4:	a801      	add	r0, sp, #4
    21d6:	f006 fc6d 	bl	8ab4 <String::String(char const*)>
    21da:	493d      	ldr	r1, [pc, #244]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    21dc:	a805      	add	r0, sp, #20
    21de:	f006 fc69 	bl	8ab4 <String::String(char const*)>
    21e2:	493b      	ldr	r1, [pc, #236]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    21e4:	a809      	add	r0, sp, #36	; 0x24
    21e6:	f006 fc65 	bl	8ab4 <String::String(char const*)>
    21ea:	a901      	add	r1, sp, #4
    21ec:	4854      	ldr	r0, [pc, #336]	; (2340 <initialize_opcode_info()+0x1edc>)
    21ee:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    21f2:	f7fd ff39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21f6:	a801      	add	r0, sp, #4
    21f8:	f7fe f926 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    21fc:	4940      	ldr	r1, [pc, #256]	; (2300 <initialize_opcode_info()+0x1e9c>)
    21fe:	a801      	add	r0, sp, #4
    2200:	f006 fc58 	bl	8ab4 <String::String(char const*)>
    2204:	494f      	ldr	r1, [pc, #316]	; (2344 <initialize_opcode_info()+0x1ee0>)
    2206:	a805      	add	r0, sp, #20
    2208:	f006 fc54 	bl	8ab4 <String::String(char const*)>
    220c:	4935      	ldr	r1, [pc, #212]	; (22e4 <initialize_opcode_info()+0x1e80>)
    220e:	a809      	add	r0, sp, #36	; 0x24
    2210:	f006 fc50 	bl	8ab4 <String::String(char const*)>
    2214:	a901      	add	r1, sp, #4
    2216:	484c      	ldr	r0, [pc, #304]	; (2348 <initialize_opcode_info()+0x1ee4>)
    2218:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    221c:	f7fd ff24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2220:	a801      	add	r0, sp, #4
    2222:	f7fe f911 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    2226:	4939      	ldr	r1, [pc, #228]	; (230c <initialize_opcode_info()+0x1ea8>)
    2228:	a801      	add	r0, sp, #4
    222a:	f006 fc43 	bl	8ab4 <String::String(char const*)>
    222e:	4945      	ldr	r1, [pc, #276]	; (2344 <initialize_opcode_info()+0x1ee0>)
    2230:	a805      	add	r0, sp, #20
    2232:	f006 fc3f 	bl	8ab4 <String::String(char const*)>
    2236:	4937      	ldr	r1, [pc, #220]	; (2314 <initialize_opcode_info()+0x1eb0>)
    2238:	a809      	add	r0, sp, #36	; 0x24
    223a:	f006 fc3b 	bl	8ab4 <String::String(char const*)>
    223e:	a901      	add	r1, sp, #4
    2240:	4842      	ldr	r0, [pc, #264]	; (234c <initialize_opcode_info()+0x1ee8>)
    2242:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2246:	f7fd ff0f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    224a:	a801      	add	r0, sp, #4
    224c:	f7fe f8fc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    2250:	4935      	ldr	r1, [pc, #212]	; (2328 <initialize_opcode_info()+0x1ec4>)
    2252:	a801      	add	r0, sp, #4
    2254:	f006 fc2e 	bl	8ab4 <String::String(char const*)>
    2258:	493a      	ldr	r1, [pc, #232]	; (2344 <initialize_opcode_info()+0x1ee0>)
    225a:	a805      	add	r0, sp, #20
    225c:	f006 fc2a 	bl	8ab4 <String::String(char const*)>
    2260:	4925      	ldr	r1, [pc, #148]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2262:	a809      	add	r0, sp, #36	; 0x24
    2264:	f006 fc26 	bl	8ab4 <String::String(char const*)>
    2268:	a901      	add	r1, sp, #4
    226a:	4839      	ldr	r0, [pc, #228]	; (2350 <initialize_opcode_info()+0x1eec>)
    226c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    2270:	f7fd fefa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2274:	a801      	add	r0, sp, #4
    2276:	f7fe f8e7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    227a:	4936      	ldr	r1, [pc, #216]	; (2354 <initialize_opcode_info()+0x1ef0>)
    227c:	a801      	add	r0, sp, #4
    227e:	f006 fc19 	bl	8ab4 <String::String(char const*)>
    2282:	4935      	ldr	r1, [pc, #212]	; (2358 <initialize_opcode_info()+0x1ef4>)
    2284:	a805      	add	r0, sp, #20
    2286:	f006 fc15 	bl	8ab4 <String::String(char const*)>
    228a:	4911      	ldr	r1, [pc, #68]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    228c:	a809      	add	r0, sp, #36	; 0x24
    228e:	f006 fc11 	bl	8ab4 <String::String(char const*)>
    2292:	a901      	add	r1, sp, #4
    2294:	4831      	ldr	r0, [pc, #196]	; (235c <initialize_opcode_info()+0x1ef8>)
    2296:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    229a:	f7fd fee5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    229e:	a801      	add	r0, sp, #4
    22a0:	f7fe f8d2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    22a4:	4919      	ldr	r1, [pc, #100]	; (230c <initialize_opcode_info()+0x1ea8>)
    22a6:	a801      	add	r0, sp, #4
    22a8:	f006 fc04 	bl	8ab4 <String::String(char const*)>
    22ac:	492c      	ldr	r1, [pc, #176]	; (2360 <initialize_opcode_info()+0x1efc>)
    22ae:	a805      	add	r0, sp, #20
    22b0:	f006 fc00 	bl	8ab4 <String::String(char const*)>
    22b4:	4917      	ldr	r1, [pc, #92]	; (2314 <initialize_opcode_info()+0x1eb0>)
    22b6:	a809      	add	r0, sp, #36	; 0x24
    22b8:	f006 fbfc 	bl	8ab4 <String::String(char const*)>
    22bc:	a901      	add	r1, sp, #4
    22be:	4829      	ldr	r0, [pc, #164]	; (2364 <initialize_opcode_info()+0x1f00>)
    22c0:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    22c4:	f7fd fed0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    22c8:	e04e      	b.n	2368 <initialize_opcode_info()+0x1f04>
    22ca:	bf00      	nop
    22cc:	20000a68 	.word	0x20000a68
    22d0:	200004f8 	.word	0x200004f8
    22d4:	20000a6c 	.word	0x20000a6c
    22d8:	20017ff8 	.word	0x20017ff8
    22dc:	20000a54 	.word	0x20000a54
    22e0:	20000434 	.word	0x20000434
    22e4:	2000097c 	.word	0x2000097c
    22e8:	2001802c 	.word	0x2001802c
    22ec:	2000042c 	.word	0x2000042c
    22f0:	200180fc 	.word	0x200180fc
    22f4:	20000a58 	.word	0x20000a58
    22f8:	20000974 	.word	0x20000974
    22fc:	20018130 	.word	0x20018130
    2300:	20000a70 	.word	0x20000a70
    2304:	200003d8 	.word	0x200003d8
    2308:	20018198 	.word	0x20018198
    230c:	20000a74 	.word	0x20000a74
    2310:	200003ec 	.word	0x200003ec
    2314:	200009ec 	.word	0x200009ec
    2318:	200181cc 	.word	0x200181cc
    231c:	200003e0 	.word	0x200003e0
    2320:	20018268 	.word	0x20018268
    2324:	2001829c 	.word	0x2001829c
    2328:	20000a78 	.word	0x20000a78
    232c:	200182d0 	.word	0x200182d0
    2330:	20000a7c 	.word	0x20000a7c
    2334:	20018338 	.word	0x20018338
    2338:	2001836c 	.word	0x2001836c
    233c:	20000a80 	.word	0x20000a80
    2340:	200183a0 	.word	0x200183a0
    2344:	20000428 	.word	0x20000428
    2348:	20018408 	.word	0x20018408
    234c:	2001843c 	.word	0x2001843c
    2350:	20018470 	.word	0x20018470
    2354:	20000a84 	.word	0x20000a84
    2358:	200003e8 	.word	0x200003e8
    235c:	200184d8 	.word	0x200184d8
    2360:	2000098c 	.word	0x2000098c
    2364:	2001850c 	.word	0x2001850c
    2368:	a801      	add	r0, sp, #4
    236a:	f7fe f86d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    236e:	4941      	ldr	r1, [pc, #260]	; (2474 <initialize_opcode_info()+0x2010>)
    2370:	a801      	add	r0, sp, #4
    2372:	f006 fb9f 	bl	8ab4 <String::String(char const*)>
    2376:	4940      	ldr	r1, [pc, #256]	; (2478 <initialize_opcode_info()+0x2014>)
    2378:	a805      	add	r0, sp, #20
    237a:	f006 fb9b 	bl	8ab4 <String::String(char const*)>
    237e:	493f      	ldr	r1, [pc, #252]	; (247c <initialize_opcode_info()+0x2018>)
    2380:	a809      	add	r0, sp, #36	; 0x24
    2382:	f006 fb97 	bl	8ab4 <String::String(char const*)>
    2386:	a901      	add	r1, sp, #4
    2388:	483d      	ldr	r0, [pc, #244]	; (2480 <initialize_opcode_info()+0x201c>)
    238a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    238e:	f7fd fe6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2392:	a801      	add	r0, sp, #4
    2394:	f7fe f858 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    2398:	493a      	ldr	r1, [pc, #232]	; (2484 <initialize_opcode_info()+0x2020>)
    239a:	a801      	add	r0, sp, #4
    239c:	f006 fb8a 	bl	8ab4 <String::String(char const*)>
    23a0:	4935      	ldr	r1, [pc, #212]	; (2478 <initialize_opcode_info()+0x2014>)
    23a2:	a805      	add	r0, sp, #20
    23a4:	f006 fb86 	bl	8ab4 <String::String(char const*)>
    23a8:	4937      	ldr	r1, [pc, #220]	; (2488 <initialize_opcode_info()+0x2024>)
    23aa:	a809      	add	r0, sp, #36	; 0x24
    23ac:	f006 fb82 	bl	8ab4 <String::String(char const*)>
    23b0:	a901      	add	r1, sp, #4
    23b2:	4836      	ldr	r0, [pc, #216]	; (248c <initialize_opcode_info()+0x2028>)
    23b4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    23b8:	f7fd fe56 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23bc:	a801      	add	r0, sp, #4
    23be:	f7fe f843 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    23c2:	4933      	ldr	r1, [pc, #204]	; (2490 <initialize_opcode_info()+0x202c>)
    23c4:	a801      	add	r0, sp, #4
    23c6:	f006 fb75 	bl	8ab4 <String::String(char const*)>
    23ca:	4932      	ldr	r1, [pc, #200]	; (2494 <initialize_opcode_info()+0x2030>)
    23cc:	a805      	add	r0, sp, #20
    23ce:	f006 fb71 	bl	8ab4 <String::String(char const*)>
    23d2:	4931      	ldr	r1, [pc, #196]	; (2498 <initialize_opcode_info()+0x2034>)
    23d4:	a809      	add	r0, sp, #36	; 0x24
    23d6:	f006 fb6d 	bl	8ab4 <String::String(char const*)>
    23da:	a901      	add	r1, sp, #4
    23dc:	482f      	ldr	r0, [pc, #188]	; (249c <initialize_opcode_info()+0x2038>)
    23de:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    23e2:	f7fd fe41 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23e6:	a801      	add	r0, sp, #4
    23e8:	f7fe f82e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    23ec:	4921      	ldr	r1, [pc, #132]	; (2474 <initialize_opcode_info()+0x2010>)
    23ee:	a801      	add	r0, sp, #4
    23f0:	f006 fb60 	bl	8ab4 <String::String(char const*)>
    23f4:	492a      	ldr	r1, [pc, #168]	; (24a0 <initialize_opcode_info()+0x203c>)
    23f6:	a805      	add	r0, sp, #20
    23f8:	f006 fb5c 	bl	8ab4 <String::String(char const*)>
    23fc:	491f      	ldr	r1, [pc, #124]	; (247c <initialize_opcode_info()+0x2018>)
    23fe:	a809      	add	r0, sp, #36	; 0x24
    2400:	f006 fb58 	bl	8ab4 <String::String(char const*)>
    2404:	a901      	add	r1, sp, #4
    2406:	4827      	ldr	r0, [pc, #156]	; (24a4 <initialize_opcode_info()+0x2040>)
    2408:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    240c:	f7fd fe2c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2410:	a801      	add	r0, sp, #4
    2412:	f7fe f819 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2416:	4917      	ldr	r1, [pc, #92]	; (2474 <initialize_opcode_info()+0x2010>)
    2418:	a801      	add	r0, sp, #4
    241a:	f006 fb4b 	bl	8ab4 <String::String(char const*)>
    241e:	4922      	ldr	r1, [pc, #136]	; (24a8 <initialize_opcode_info()+0x2044>)
    2420:	a805      	add	r0, sp, #20
    2422:	f006 fb47 	bl	8ab4 <String::String(char const*)>
    2426:	4915      	ldr	r1, [pc, #84]	; (247c <initialize_opcode_info()+0x2018>)
    2428:	a809      	add	r0, sp, #36	; 0x24
    242a:	f006 fb43 	bl	8ab4 <String::String(char const*)>
    242e:	a901      	add	r1, sp, #4
    2430:	481e      	ldr	r0, [pc, #120]	; (24ac <initialize_opcode_info()+0x2048>)
    2432:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2436:	f7fd fe17 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    243a:	a801      	add	r0, sp, #4
    243c:	f7fe f804 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    2440:	4910      	ldr	r1, [pc, #64]	; (2484 <initialize_opcode_info()+0x2020>)
    2442:	a801      	add	r0, sp, #4
    2444:	f006 fb36 	bl	8ab4 <String::String(char const*)>
    2448:	4917      	ldr	r1, [pc, #92]	; (24a8 <initialize_opcode_info()+0x2044>)
    244a:	a805      	add	r0, sp, #20
    244c:	f006 fb32 	bl	8ab4 <String::String(char const*)>
    2450:	490d      	ldr	r1, [pc, #52]	; (2488 <initialize_opcode_info()+0x2024>)
    2452:	a809      	add	r0, sp, #36	; 0x24
    2454:	f006 fb2e 	bl	8ab4 <String::String(char const*)>
    2458:	f240 3307 	movw	r3, #775	; 0x307
    245c:	a901      	add	r1, sp, #4
    245e:	4814      	ldr	r0, [pc, #80]	; (24b0 <initialize_opcode_info()+0x204c>)
    2460:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2464:	f7fd fe00 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2468:	a801      	add	r0, sp, #4
    246a:	f7fd ffed 	bl	448 <OpDecoder::~OpDecoder()>
    246e:	b00f      	add	sp, #60	; 0x3c
    2470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2474:	20000a74 	.word	0x20000a74
    2478:	20000404 	.word	0x20000404
    247c:	200009ec 	.word	0x200009ec
    2480:	200185dc 	.word	0x200185dc
    2484:	20000a78 	.word	0x20000a78
    2488:	20000974 	.word	0x20000974
    248c:	20018610 	.word	0x20018610
    2490:	20000a88 	.word	0x20000a88
    2494:	200004f8 	.word	0x200004f8
    2498:	20000a6c 	.word	0x20000a6c
    249c:	20018678 	.word	0x20018678
    24a0:	20000434 	.word	0x20000434
    24a4:	200186ac 	.word	0x200186ac
    24a8:	2000042c 	.word	0x2000042c
    24ac:	2001877c 	.word	0x2001877c
    24b0:	200187b0 	.word	0x200187b0

000024b4 <check_for_CLK_activity()>:
    24b4:	4a0e      	ldr	r2, [pc, #56]	; (24f0 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    24b6:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    24ba:	6811      	ldr	r1, [r2, #0]
    24bc:	e004      	b.n	24c8 <check_for_CLK_activity()+0x14>
    24be:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    24c0:	1a5b      	subs	r3, r3, r1
    24c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    24c6:	d812      	bhi.n	24ee <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    24c8:	f8dc 0000 	ldr.w	r0, [ip]
    24cc:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    24d0:	d0f5      	beq.n	24be <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    24d2:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    24d6:	e004      	b.n	24e2 <check_for_CLK_activity()+0x2e>
    24d8:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    24da:	1a5b      	subs	r3, r3, r1
    24dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    24e0:	d804      	bhi.n	24ec <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    24e2:	6803      	ldr	r3, [r0, #0]
    24e4:	04db      	lsls	r3, r3, #19
    24e6:	d4f7      	bmi.n	24d8 <check_for_CLK_activity()+0x24>
    return(true);
    24e8:	2001      	movs	r0, #1
    24ea:	4770      	bx	lr
            return(false);
    24ec:	2000      	movs	r0, #0
}
    24ee:	4770      	bx	lr
    24f0:	2001886c 	.word	0x2001886c

000024f4 <setup>:
void setup() {
    24f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    24f8:	2100      	movs	r1, #0
void setup() {
    24fa:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    24fc:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    24fe:	4d94      	ldr	r5, [pc, #592]	; (2750 <setup+0x25c>)
    2500:	f006 fd10 	bl	8f24 <pinMode>
    pinMode(PIN_RESET, INPUT);
    2504:	2100      	movs	r1, #0
    2506:	2028      	movs	r0, #40	; 0x28
    2508:	4c92      	ldr	r4, [pc, #584]	; (2754 <setup+0x260>)
    250a:	f006 fd0b 	bl	8f24 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    250e:	2100      	movs	r1, #0
    2510:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2512:	4f91      	ldr	r7, [pc, #580]	; (2758 <setup+0x264>)
    2514:	f006 fd06 	bl	8f24 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    2518:	2100      	movs	r1, #0
    251a:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    251c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 27ac <setup+0x2b8>
    2520:	f006 fd00 	bl	8f24 <pinMode>
    pinMode(PIN_NMI, INPUT);
    2524:	2100      	movs	r1, #0
    2526:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    2528:	f240 28ee 	movw	r8, #750	; 0x2ee
    252c:	f006 fcfa 	bl	8f24 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2530:	2101      	movs	r1, #1
    2532:	200c      	movs	r0, #12
    2534:	f006 fcf6 	bl	8f24 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    2538:	2101      	movs	r1, #1
    253a:	2027      	movs	r0, #39	; 0x27
    253c:	f006 fcf2 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2540:	2101      	movs	r1, #1
    2542:	201b      	movs	r0, #27
    2544:	f006 fcee 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    2548:	2101      	movs	r1, #1
    254a:	2026      	movs	r0, #38	; 0x26
    254c:	f006 fcea 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2550:	2101      	movs	r1, #1
    2552:	201c      	movs	r0, #28
    2554:	f006 fce6 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    2558:	2101      	movs	r1, #1
    255a:	2025      	movs	r0, #37	; 0x25
    255c:	f006 fce2 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    2560:	2101      	movs	r1, #1
    2562:	201d      	movs	r0, #29
    2564:	f006 fcde 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2568:	2101      	movs	r1, #1
    256a:	2024      	movs	r0, #36	; 0x24
    256c:	f006 fcda 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    2570:	2101      	movs	r1, #1
    2572:	201e      	movs	r0, #30
    2574:	f006 fcd6 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2578:	2101      	movs	r1, #1
    257a:	2023      	movs	r0, #35	; 0x23
    257c:	f006 fcd2 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    2580:	2101      	movs	r1, #1
    2582:	201f      	movs	r0, #31
    2584:	f006 fcce 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    2588:	2101      	movs	r1, #1
    258a:	2022      	movs	r0, #34	; 0x22
    258c:	f006 fcca 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    2590:	2101      	movs	r1, #1
    2592:	2020      	movs	r0, #32
    2594:	f006 fcc6 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    2598:	2101      	movs	r1, #1
    259a:	2021      	movs	r0, #33	; 0x21
    259c:	f006 fcc2 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    25a0:	2101      	movs	r1, #1
    25a2:	4608      	mov	r0, r1
    25a4:	f006 fcbe 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    25a8:	2101      	movs	r1, #1
    25aa:	2000      	movs	r0, #0
    25ac:	f006 fcba 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    25b0:	2101      	movs	r1, #1
    25b2:	2002      	movs	r0, #2
    25b4:	f006 fcb6 	bl	8f24 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    25b8:	2101      	movs	r1, #1
    25ba:	2017      	movs	r0, #23
    25bc:	f006 fcb2 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    25c0:	2100      	movs	r1, #0
    25c2:	200e      	movs	r0, #14
    25c4:	f006 fcae 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    25c8:	2100      	movs	r1, #0
    25ca:	200f      	movs	r0, #15
    25cc:	f006 fcaa 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    25d0:	2100      	movs	r1, #0
    25d2:	2010      	movs	r0, #16
    25d4:	f006 fca6 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    25d8:	2100      	movs	r1, #0
    25da:	2011      	movs	r0, #17
    25dc:	f006 fca2 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    25e0:	2100      	movs	r1, #0
    25e2:	2012      	movs	r0, #18
    25e4:	f006 fc9e 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    25e8:	2100      	movs	r1, #0
    25ea:	2013      	movs	r0, #19
    25ec:	f006 fc9a 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    25f0:	2100      	movs	r1, #0
    25f2:	2014      	movs	r0, #20
    25f4:	f006 fc96 	bl	8f24 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    25f8:	2100      	movs	r1, #0
    25fa:	2015      	movs	r0, #21
    25fc:	f006 fc92 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2600:	2101      	movs	r1, #1
    2602:	200b      	movs	r0, #11
    2604:	f006 fc8e 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    2608:	2101      	movs	r1, #1
    260a:	200a      	movs	r0, #10
    260c:	f006 fc8a 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2610:	2101      	movs	r1, #1
    2612:	2009      	movs	r0, #9
    2614:	f006 fc86 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    2618:	2101      	movs	r1, #1
    261a:	2008      	movs	r0, #8
    261c:	f006 fc82 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2620:	2101      	movs	r1, #1
    2622:	2007      	movs	r0, #7
    2624:	f006 fc7e 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    2628:	2101      	movs	r1, #1
    262a:	2006      	movs	r0, #6
    262c:	f006 fc7a 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2630:	2101      	movs	r1, #1
    2632:	2005      	movs	r0, #5
    2634:	f006 fc76 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    2638:	2101      	movs	r1, #1
    263a:	2004      	movs	r0, #4
    263c:	f006 fc72 	bl	8f24 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2640:	2101      	movs	r1, #1
    2642:	2003      	movs	r0, #3
    2644:	f006 fc6e 	bl	8f24 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    2648:	f44f 6200 	mov.w	r2, #2048	; 0x800
    264c:	4943      	ldr	r1, [pc, #268]	; (275c <setup+0x268>)
    264e:	4844      	ldr	r0, [pc, #272]	; (2760 <setup+0x26c>)
    2650:	f006 fca8 	bl	8fa4 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2654:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2658:	4942      	ldr	r1, [pc, #264]	; (2764 <setup+0x270>)
    265a:	4843      	ldr	r0, [pc, #268]	; (2768 <setup+0x274>)
    265c:	f006 fca2 	bl	8fa4 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    2660:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2664:	4941      	ldr	r1, [pc, #260]	; (276c <setup+0x278>)
    2666:	4842      	ldr	r0, [pc, #264]	; (2770 <setup+0x27c>)
    2668:	f006 fc9c 	bl	8fa4 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    266c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2670:	4940      	ldr	r1, [pc, #256]	; (2774 <setup+0x280>)
    2672:	4841      	ldr	r0, [pc, #260]	; (2778 <setup+0x284>)
    2674:	f006 fc96 	bl	8fa4 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2678:	f44f 6200 	mov.w	r2, #2048	; 0x800
    267c:	493f      	ldr	r1, [pc, #252]	; (277c <setup+0x288>)
    267e:	4840      	ldr	r0, [pc, #256]	; (2780 <setup+0x28c>)
    2680:	f006 fc90 	bl	8fa4 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    2684:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2688:	493e      	ldr	r1, [pc, #248]	; (2784 <setup+0x290>)
    268a:	483f      	ldr	r0, [pc, #252]	; (2788 <setup+0x294>)
    268c:	f006 fc8a 	bl	8fa4 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    2690:	682e      	ldr	r6, [r5, #0]
		yield();
    2692:	f007 fec5 	bl	a420 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2696:	7823      	ldrb	r3, [r4, #0]
    2698:	2b00      	cmp	r3, #0
    269a:	d03e      	beq.n	271a <setup+0x226>
    269c:	783b      	ldrb	r3, [r7, #0]
    269e:	07db      	lsls	r3, r3, #31
    26a0:	d53b      	bpl.n	271a <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    26a2:	682b      	ldr	r3, [r5, #0]
    26a4:	f8d9 2000 	ldr.w	r2, [r9]
    26a8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    26aa:	2b0e      	cmp	r3, #14
    26ac:	d935      	bls.n	271a <setup+0x226>
    Serial.setTimeout(5000);
    26ae:	f241 3188 	movw	r1, #5000	; 0x1388
    26b2:	4836      	ldr	r0, [pc, #216]	; (278c <setup+0x298>)
    26b4:	f006 f98c 	bl	89d0 <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    26b8:	4935      	ldr	r1, [pc, #212]	; (2790 <setup+0x29c>)
    26ba:	4668      	mov	r0, sp
    26bc:	f006 f9fa 	bl	8ab4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    26c0:	4669      	mov	r1, sp
    26c2:	a804      	add	r0, sp, #16
    26c4:	f006 f986 	bl	89d4 <String::String(String const&)>
    26c8:	4932      	ldr	r1, [pc, #200]	; (2794 <setup+0x2a0>)
    26ca:	a804      	add	r0, sp, #16
    26cc:	f006 fabe 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    26d0:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    26d2:	482e      	ldr	r0, [pc, #184]	; (278c <setup+0x298>)
    26d4:	f006 f936 	bl	8944 <Print::print(String const&)>
    26d8:	482c      	ldr	r0, [pc, #176]	; (278c <setup+0x298>)
    26da:	f006 f959 	bl	8990 <Print::println()>
class StringSumHelper : public String
    26de:	a804      	add	r0, sp, #16
    26e0:	f006 f9ac 	bl	8a3c <String::~String()>
    26e4:	4668      	mov	r0, sp
    26e6:	f006 f9a9 	bl	8a3c <String::~String()>
    if ( !check_for_CLK_activity() ) {
    26ea:	f7ff fee3 	bl	24b4 <check_for_CLK_activity()>
    26ee:	bb08      	cbnz	r0, 2734 <setup+0x240>
        debug_mode = true;
    26f0:	4829      	ldr	r0, [pc, #164]	; (2798 <setup+0x2a4>)
    26f2:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    26f4:	4b29      	ldr	r3, [pc, #164]	; (279c <setup+0x2a8>)
    26f6:	2203      	movs	r2, #3
        debug_mode = true;
    26f8:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    26fa:	2146      	movs	r1, #70	; 0x46
    26fc:	4828      	ldr	r0, [pc, #160]	; (27a0 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    26fe:	701a      	strb	r2, [r3, #0]
    2700:	f007 fe10 	bl	a324 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2704:	4821      	ldr	r0, [pc, #132]	; (278c <setup+0x298>)
    2706:	f006 f943 	bl	8990 <Print::println()>
    run_mode = WAITING;
    270a:	4b26      	ldr	r3, [pc, #152]	; (27a4 <setup+0x2b0>)
    270c:	2200      	movs	r2, #0
    270e:	701a      	strb	r2, [r3, #0]
}
    2710:	b009      	add	sp, #36	; 0x24
    2712:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    2716:	f7fd bea5 	b.w	464 <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    271a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    271c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    271e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2720:	b12a      	cbz	r2, 272e <setup+0x23a>
				if (elapsed > 2000) break;
    2722:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2726:	d8c2      	bhi.n	26ae <setup+0x1ba>
			yield();
    2728:	f007 fe7a 	bl	a420 <yield>
    272c:	e7b1      	b.n	2692 <setup+0x19e>
				if (elapsed > 750) break;
    272e:	4543      	cmp	r3, r8
    2730:	d9fa      	bls.n	2728 <setup+0x234>
    2732:	e7bc      	b.n	26ae <setup+0x1ba>
        debug_mode = false;
    2734:	2300      	movs	r3, #0
        addr_mode = All_External;
    2736:	4a19      	ldr	r2, [pc, #100]	; (279c <setup+0x2a8>)
        debug_mode = false;
    2738:	4c17      	ldr	r4, [pc, #92]	; (2798 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    273a:	2146      	movs	r1, #70	; 0x46
    273c:	481a      	ldr	r0, [pc, #104]	; (27a8 <setup+0x2b4>)
    273e:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2740:	7013      	strb	r3, [r2, #0]
    2742:	f007 fdef 	bl	a324 <usb_serial_write>
    2746:	4811      	ldr	r0, [pc, #68]	; (278c <setup+0x298>)
    2748:	f006 f922 	bl	8990 <Print::println()>
    274c:	e7dd      	b.n	270a <setup+0x216>
    274e:	bf00      	nop
    2750:	2001886c 	.word	0x2001886c
    2754:	200188b5 	.word	0x200188b5
    2758:	200188b4 	.word	0x200188b4
    275c:	20001408 	.word	0x20001408
    2760:	200123f0 	.word	0x200123f0
    2764:	20001c08 	.word	0x20001c08
    2768:	20012bf0 	.word	0x20012bf0
    276c:	20002408 	.word	0x20002408
    2770:	200133f0 	.word	0x200133f0
    2774:	20002c08 	.word	0x20002c08
    2778:	20013bf0 	.word	0x20013bf0
    277c:	20003408 	.word	0x20003408
    2780:	200143f0 	.word	0x200143f0
    2784:	20003c08 	.word	0x20003c08
    2788:	20014bf0 	.word	0x20014bf0
    278c:	20004410 	.word	0x20004410
    2790:	20001138 	.word	0x20001138
    2794:	20001160 	.word	0x20001160
    2798:	20004a1e 	.word	0x20004a1e
    279c:	2001889c 	.word	0x2001889c
    27a0:	20001168 	.word	0x20001168
    27a4:	200188ac 	.word	0x200188ac
    27a8:	200011b0 	.word	0x200011b0
    27ac:	2001887c 	.word	0x2001887c

000027b0 <flag_status()>:
String flag_status(void) {
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	b088      	sub	sp, #32
    s = s + (flag_c ? "C" : "-");
    27b4:	4d4e      	ldr	r5, [pc, #312]	; (28f0 <flag_status()+0x140>)
String flag_status(void) {
    27b6:	4606      	mov	r6, r0
    String s;
    27b8:	2100      	movs	r1, #0
    27ba:	4668      	mov	r0, sp
    s = s + (flag_c ? "C" : "-");
    27bc:	4c4d      	ldr	r4, [pc, #308]	; (28f4 <flag_status()+0x144>)
    String s;
    27be:	f006 f979 	bl	8ab4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    27c2:	4669      	mov	r1, sp
    27c4:	a804      	add	r0, sp, #16
    27c6:	f006 f905 	bl	89d4 <String::String(String const&)>
    s = s + (flag_c ? "C" : "-");
    27ca:	782b      	ldrb	r3, [r5, #0]
    27cc:	494a      	ldr	r1, [pc, #296]	; (28f8 <flag_status()+0x148>)
    27ce:	a804      	add	r0, sp, #16
    27d0:	f013 0f01 	tst.w	r3, #1
    27d4:	bf08      	it	eq
    27d6:	4621      	moveq	r1, r4
    27d8:	f006 fa38 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    27dc:	4601      	mov	r1, r0
    27de:	4668      	mov	r0, sp
    27e0:	f006 f9ac 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    27e4:	a804      	add	r0, sp, #16
    27e6:	f006 f929 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    27ea:	4669      	mov	r1, sp
    27ec:	a804      	add	r0, sp, #16
    27ee:	f006 f8f1 	bl	89d4 <String::String(String const&)>
    s = s + (flag_z ? "Z" : "-");
    27f2:	782b      	ldrb	r3, [r5, #0]
    27f4:	4941      	ldr	r1, [pc, #260]	; (28fc <flag_status()+0x14c>)
    27f6:	a804      	add	r0, sp, #16
    27f8:	f013 0f02 	tst.w	r3, #2
    27fc:	bf08      	it	eq
    27fe:	4621      	moveq	r1, r4
    2800:	f006 fa24 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    2804:	4601      	mov	r1, r0
    2806:	4668      	mov	r0, sp
    2808:	f006 f998 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    280c:	a804      	add	r0, sp, #16
    280e:	f006 f915 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2812:	4669      	mov	r1, sp
    2814:	a804      	add	r0, sp, #16
    2816:	f006 f8dd 	bl	89d4 <String::String(String const&)>
    s = s + (flag_i ? "I" : "-");
    281a:	782b      	ldrb	r3, [r5, #0]
    281c:	4938      	ldr	r1, [pc, #224]	; (2900 <flag_status()+0x150>)
    281e:	a804      	add	r0, sp, #16
    2820:	f013 0f04 	tst.w	r3, #4
    2824:	bf08      	it	eq
    2826:	4621      	moveq	r1, r4
    2828:	f006 fa10 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    282c:	4601      	mov	r1, r0
    282e:	4668      	mov	r0, sp
    2830:	f006 f984 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    2834:	a804      	add	r0, sp, #16
    2836:	f006 f901 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    283a:	4669      	mov	r1, sp
    283c:	a804      	add	r0, sp, #16
    283e:	f006 f8c9 	bl	89d4 <String::String(String const&)>
    s = s + (flag_d ? "D" : "-");
    2842:	782b      	ldrb	r3, [r5, #0]
    2844:	492f      	ldr	r1, [pc, #188]	; (2904 <flag_status()+0x154>)
    2846:	a804      	add	r0, sp, #16
    2848:	f013 0f08 	tst.w	r3, #8
    284c:	bf08      	it	eq
    284e:	4621      	moveq	r1, r4
    2850:	f006 f9fc 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    2854:	4601      	mov	r1, r0
    2856:	4668      	mov	r0, sp
    2858:	f006 f970 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    285c:	a804      	add	r0, sp, #16
    285e:	f006 f8ed 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2862:	4669      	mov	r1, sp
    2864:	a804      	add	r0, sp, #16
    2866:	f006 f8b5 	bl	89d4 <String::String(String const&)>
    s = s + (flag_b ? "B" : "-");
    286a:	782b      	ldrb	r3, [r5, #0]
    286c:	4926      	ldr	r1, [pc, #152]	; (2908 <flag_status()+0x158>)
    286e:	a804      	add	r0, sp, #16
    2870:	f013 0f10 	tst.w	r3, #16
    2874:	bf08      	it	eq
    2876:	4621      	moveq	r1, r4
    2878:	f006 f9e8 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    287c:	4601      	mov	r1, r0
    287e:	4668      	mov	r0, sp
    2880:	f006 f95c 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    2884:	a804      	add	r0, sp, #16
    2886:	f006 f8d9 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    288a:	4669      	mov	r1, sp
    288c:	a804      	add	r0, sp, #16
    288e:	f006 f8a1 	bl	89d4 <String::String(String const&)>
    s = s + (flag_v ? "V" : "-");
    2892:	782b      	ldrb	r3, [r5, #0]
    2894:	491d      	ldr	r1, [pc, #116]	; (290c <flag_status()+0x15c>)
    2896:	a804      	add	r0, sp, #16
    2898:	f013 0f40 	tst.w	r3, #64	; 0x40
    289c:	bf08      	it	eq
    289e:	4621      	moveq	r1, r4
    28a0:	f006 f9d4 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    28a4:	4601      	mov	r1, r0
    28a6:	4668      	mov	r0, sp
    28a8:	f006 f948 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    28ac:	a804      	add	r0, sp, #16
    28ae:	f006 f8c5 	bl	8a3c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    28b2:	4669      	mov	r1, sp
    28b4:	a804      	add	r0, sp, #16
    28b6:	f006 f88d 	bl	89d4 <String::String(String const&)>
    s = s + (flag_n ? "N" : "-");
    28ba:	4b15      	ldr	r3, [pc, #84]	; (2910 <flag_status()+0x160>)
    28bc:	f995 1000 	ldrsb.w	r1, [r5]
    28c0:	a804      	add	r0, sp, #16
    28c2:	ea13 0121 	ands.w	r1, r3, r1, asr #32
    28c6:	bf38      	it	cc
    28c8:	4621      	movcc	r1, r4
    28ca:	f006 f9bf 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    28ce:	4601      	mov	r1, r0
    28d0:	4668      	mov	r0, sp
    28d2:	f006 f933 	bl	8b3c <String::operator=(String const&)>
class StringSumHelper : public String
    28d6:	a804      	add	r0, sp, #16
    28d8:	f006 f8b0 	bl	8a3c <String::~String()>
    return(s);
    28dc:	4669      	mov	r1, sp
    28de:	4630      	mov	r0, r6
    28e0:	f006 f896 	bl	8a10 <String::String(String&&)>
}
    28e4:	4668      	mov	r0, sp
    28e6:	f006 f8a9 	bl	8a3c <String::~String()>
    28ea:	4630      	mov	r0, r6
    28ec:	b008      	add	sp, #32
    28ee:	bd70      	pop	{r4, r5, r6, pc}
    28f0:	20004a20 	.word	0x20004a20
    28f4:	20000370 	.word	0x20000370
    28f8:	20000998 	.word	0x20000998
    28fc:	20000374 	.word	0x20000374
    2900:	200009e0 	.word	0x200009e0
    2904:	20000a6c 	.word	0x20000a6c
    2908:	2000096c 	.word	0x2000096c
    290c:	20000a48 	.word	0x20000a48
    2910:	20000378 	.word	0x20000378

00002914 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    2914:	4b21      	ldr	r3, [pc, #132]	; (299c <sample_at_CLK_rising_edge()+0x88>)
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	b103      	cbz	r3, 291c <sample_at_CLK_rising_edge()+0x8>
    291a:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    291c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    2920:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2922:	6813      	ldr	r3, [r2, #0]
    2924:	04db      	lsls	r3, r3, #19
    2926:	d4fc      	bmi.n	2922 <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    2928:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    292c:	6813      	ldr	r3, [r2, #0]
    292e:	04d8      	lsls	r0, r3, #19
    2930:	d5fc      	bpl.n	292c <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    2932:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2936:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2938:	04d9      	lsls	r1, r3, #19
    293a:	d5fc      	bpl.n	2936 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    293c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2940:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2942:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2944:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2948:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    294c:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    294e:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2952:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2956:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    295a:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    295e:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2962:	0cd8      	lsrs	r0, r3, #19
    2964:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2968:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    296a:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    296e:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2972:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2974:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2978:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    297c:	4302      	orrs	r2, r0
    297e:	4808      	ldr	r0, [pc, #32]	; (29a0 <sample_at_CLK_rising_edge()+0x8c>)
    2980:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2982:	4a08      	ldr	r2, [pc, #32]	; (29a4 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2984:	4808      	ldr	r0, [pc, #32]	; (29a8 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2986:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    298a:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    298c:	4a07      	ldr	r2, [pc, #28]	; (29ac <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    298e:	4b08      	ldr	r3, [pc, #32]	; (29b0 <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2990:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2994:	7019      	strb	r1, [r3, #0]
}
    2996:	f85d fb04 	ldr.w	pc, [sp], #4
    299a:	bf00      	nop
    299c:	20004a1e 	.word	0x20004a1e
    29a0:	2001889e 	.word	0x2001889e
    29a4:	2001889f 	.word	0x2001889f
    29a8:	200188a1 	.word	0x200188a1
    29ac:	200188a2 	.word	0x200188a2
    29b0:	200188a0 	.word	0x200188a0

000029b4 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    29b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    29b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    29bc:	d33c      	bcc.n	2a38 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29be:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    29c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    29c6:	d355      	bcc.n	2a74 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    29c8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    29cc:	b294      	uxth	r4, r2
    29ce:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    29d2:	d331      	bcc.n	2a38 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    29d4:	2900      	cmp	r1, #0
    29d6:	f000 8118 	beq.w	2c0a <read_byte(unsigned short, bool)+0x256>
    29da:	4cb3      	ldr	r4, [pc, #716]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    29dc:	f894 8000 	ldrb.w	r8, [r4]
    29e0:	f1b8 0f01 	cmp.w	r8, #1
    29e4:	f040 814f 	bne.w	2c86 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    29e8:	4ab0      	ldr	r2, [pc, #704]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    29ea:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    29ee:	2100      	movs	r1, #0
    current_address = local_address;
    29f0:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    29f6:	d311      	bcc.n	2a1c <read_byte(unsigned short, bool)+0x68>
    29f8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    29fc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    2a00:	f0c0 8135 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    2a04:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    2a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2a0c:	f0c0 812f 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2a10:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    2a14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    2a18:	f0c0 8129 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    2a1c:	4ba4      	ldr	r3, [pc, #656]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
    2a1e:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2a20:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    2a24:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2a26:	d02f      	beq.n	2a88 <read_byte(unsigned short, bool)+0xd4>
    2a28:	b371      	cbz	r1, 2a88 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    2a2a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2a2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2a36:	e027      	b.n	2a88 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a38:	4b9e      	ldr	r3, [pc, #632]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    2a3a:	781a      	ldrb	r2, [r3, #0]
    2a3c:	2a01      	cmp	r2, #1
    2a3e:	d906      	bls.n	2a4e <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    2a40:	4a9b      	ldr	r2, [pc, #620]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
    2a42:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2a44:	4b9c      	ldr	r3, [pc, #624]	; (2cb8 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2a46:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2a48:	5c18      	ldrb	r0, [r3, r0]
}
    2a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a4e:	4a96      	ldr	r2, [pc, #600]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    2a50:	f892 8000 	ldrb.w	r8, [r2]
    2a54:	2900      	cmp	r1, #0
    2a56:	f040 80de 	bne.w	2c16 <read_byte(unsigned short, bool)+0x262>
    2a5a:	2100      	movs	r1, #0
    current_address = local_address;
    2a5c:	4a93      	ldr	r2, [pc, #588]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    2a62:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a64:	f080 811d 	bcs.w	2ca2 <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2a68:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    2a6a:	2b01      	cmp	r3, #1
    2a6c:	d9d6      	bls.n	2a1c <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    2a6e:	4b93      	ldr	r3, [pc, #588]	; (2cbc <read_byte(unsigned short, bool)+0x308>)
    2a70:	781c      	ldrb	r4, [r3, #0]
    2a72:	e06c      	b.n	2b4e <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a74:	2900      	cmp	r1, #0
    2a76:	f040 813d 	bne.w	2cf4 <read_byte(unsigned short, bool)+0x340>
    2a7a:	4b8b      	ldr	r3, [pc, #556]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2a7c:	4c8b      	ldr	r4, [pc, #556]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    2a7e:	4a8c      	ldr	r2, [pc, #560]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a80:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2a84:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2a86:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2a88:	4b8c      	ldr	r3, [pc, #560]	; (2cbc <read_byte(unsigned short, bool)+0x308>)
    2a8a:	781c      	ldrb	r4, [r3, #0]
    2a8c:	b94c      	cbnz	r4, 2aa2 <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2a8e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a92:	6813      	ldr	r3, [r2, #0]
    2a94:	04de      	lsls	r6, r3, #19
    2a96:	d4fc      	bmi.n	2a92 <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2a98:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a9c:	6813      	ldr	r3, [r2, #0]
    2a9e:	04dd      	lsls	r5, r3, #19
    2aa0:	d5fc      	bpl.n	2a9c <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2aa2:	4e87      	ldr	r6, [pc, #540]	; (2cc0 <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2aa4:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2aa8:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2aaa:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2aac:	0a85      	lsrs	r5, r0, #10
    2aae:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2ab2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ab6:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2aba:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2abe:	4b81      	ldr	r3, [pc, #516]	; (2cc4 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2ac0:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ac4:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2ac6:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ac8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2acc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ace:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ad0:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2ad2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ad6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2ada:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ade:	433b      	orrs	r3, r7
    2ae0:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2ae4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ae6:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ae8:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    2af0:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2af2:	4b75      	ldr	r3, [pc, #468]	; (2cc8 <read_byte(unsigned short, bool)+0x314>)
    2af4:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2af6:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2af8:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2afa:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2afc:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b00:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    2b08:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2b0a:	0342      	lsls	r2, r0, #13
    2b0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    2b10:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b12:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b14:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b1c:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b1e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b20:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b24:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    2b28:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b2a:	f8dc 2000 	ldr.w	r2, [ip]
    2b2e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b32:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b34:	4a65      	ldr	r2, [pc, #404]	; (2ccc <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b36:	433b      	orrs	r3, r7
    2b38:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b3c:	0903      	lsrs	r3, r0, #4
    2b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b42:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b44:	6835      	ldr	r5, [r6, #0]
    2b46:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b48:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2b4a:	430b      	orrs	r3, r1
    2b4c:	6033      	str	r3, [r6, #0]
    return;
    2b4e:	4d60      	ldr	r5, [pc, #384]	; (2cd0 <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2b50:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2b54:	f8df e184 	ldr.w	lr, [pc, #388]	; 2cdc <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2b58:	f8df c188 	ldr.w	ip, [pc, #392]	; 2ce4 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2b5c:	4f5d      	ldr	r7, [pc, #372]	; (2cd4 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2b5e:	4e5e      	ldr	r6, [pc, #376]	; (2cd8 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    2b60:	b1d4      	cbz	r4, 2b98 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    2b62:	782b      	ldrb	r3, [r5, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d0fb      	beq.n	2b60 <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2b68:	f1b8 0f01 	cmp.w	r8, #1
    2b6c:	d005      	beq.n	2b7a <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    2b6e:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2b72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    2b7a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2b7e:	d05d      	beq.n	2c3c <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2b80:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2b84:	d352      	bcc.n	2c2c <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2b86:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2b8e:	d247      	bcs.n	2c20 <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    2b90:	4b49      	ldr	r3, [pc, #292]	; (2cb8 <read_byte(unsigned short, bool)+0x304>)
    2b92:	5c18      	ldrb	r0, [r3, r0]
}
    2b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2b98:	6813      	ldr	r3, [r2, #0]
    2b9a:	04d9      	lsls	r1, r3, #19
    2b9c:	d4fc      	bmi.n	2b98 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    2b9e:	6813      	ldr	r3, [r2, #0]
    2ba0:	04db      	lsls	r3, r3, #19
    2ba2:	d5fc      	bpl.n	2b9e <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2ba4:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2ba6:	04d9      	lsls	r1, r3, #19
    2ba8:	d5fc      	bpl.n	2ba4 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2baa:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2bae:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2bb0:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2bb4:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2bb8:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2bbc:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bc0:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2bc4:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2bc8:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2bcc:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bd0:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2bd4:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2bd6:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2bda:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2bde:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2be2:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2be6:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bea:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2bee:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2bf2:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2bf6:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bfa:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2bfe:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c00:	ea41 010a 	orr.w	r1, r1, sl
    2c04:	f88e 1000 	strb.w	r1, [lr]
    return;
    2c08:	e7ac      	b.n	2b64 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    2c0a:	4c28      	ldr	r4, [pc, #160]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2c0c:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2c0e:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2c10:	f893 8000 	ldrb.w	r8, [r3]
    2c14:	e6f2      	b.n	29fc <read_byte(unsigned short, bool)+0x48>
    2c16:	f1b8 0f01 	cmp.w	r8, #1
    2c1a:	f47f af1f 	bne.w	2a5c <read_byte(unsigned short, bool)+0xa8>
    2c1e:	e71c      	b.n	2a5a <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2c20:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2c24:	b29b      	uxth	r3, r3
    2c26:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2c2a:	d203      	bcs.n	2c34 <read_byte(unsigned short, bool)+0x280>
    2c2c:	4b21      	ldr	r3, [pc, #132]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c2e:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    2c30:	2b00      	cmp	r3, #0
    2c32:	d1ad      	bne.n	2b90 <read_byte(unsigned short, bool)+0x1dc>
    2c34:	4b29      	ldr	r3, [pc, #164]	; (2cdc <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    2c36:	7818      	ldrb	r0, [r3, #0]
}
    2c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2c3c:	4928      	ldr	r1, [pc, #160]	; (2ce0 <read_byte(unsigned short, bool)+0x32c>)
    2c3e:	4b27      	ldr	r3, [pc, #156]	; (2cdc <read_byte(unsigned short, bool)+0x328>)
    2c40:	780a      	ldrb	r2, [r1, #0]
    2c42:	b9b2      	cbnz	r2, 2c72 <read_byte(unsigned short, bool)+0x2be>
    2c44:	781a      	ldrb	r2, [r3, #0]
    2c46:	2a88      	cmp	r2, #136	; 0x88
    2c48:	d1f5      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2c4a:	2201      	movs	r2, #1
    2c4c:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    2c4e:	780a      	ldrb	r2, [r1, #0]
    2c50:	2a03      	cmp	r2, #3
    2c52:	d1f0      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2c54:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2c56:	28b0      	cmp	r0, #176	; 0xb0
    2c58:	d018      	beq.n	2c8c <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    2c5a:	28b1      	cmp	r0, #177	; 0xb1
    2c5c:	d044      	beq.n	2ce8 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    2c5e:	28b2      	cmp	r0, #178	; 0xb2
    2c60:	d155      	bne.n	2d0e <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    2c62:	4814      	ldr	r0, [pc, #80]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c64:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2c66:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2c68:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2c6a:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2c6c:	e7e3      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2c6e:	4b11      	ldr	r3, [pc, #68]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c70:	e6fa      	b.n	2a68 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2c72:	2a01      	cmp	r2, #1
    2c74:	d00f      	beq.n	2c96 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2c76:	2a02      	cmp	r2, #2
    2c78:	d1ea      	bne.n	2c50 <read_byte(unsigned short, bool)+0x29c>
    2c7a:	781a      	ldrb	r2, [r3, #0]
    2c7c:	2a88      	cmp	r2, #136	; 0x88
    2c7e:	d1da      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2c80:	2203      	movs	r2, #3
    2c82:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2c84:	e7d7      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2c86:	4b09      	ldr	r3, [pc, #36]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    2c88:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2c8a:	e6b7      	b.n	29fc <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    2c8c:	2200      	movs	r2, #0
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    2c90:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    2c92:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2c94:	e7cf      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2c96:	781a      	ldrb	r2, [r3, #0]
    2c98:	2a95      	cmp	r2, #149	; 0x95
    2c9a:	d1d8      	bne.n	2c4e <read_byte(unsigned short, bool)+0x29a>
    2c9c:	2202      	movs	r2, #2
    2c9e:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2ca0:	e7c9      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2ca2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2ca6:	e6a4      	b.n	29f2 <read_byte(unsigned short, bool)+0x3e>
    2ca8:	200188ac 	.word	0x200188ac
    2cac:	20018888 	.word	0x20018888
    2cb0:	200188a5 	.word	0x200188a5
    2cb4:	2001889c 	.word	0x2001889c
    2cb8:	200053f0 	.word	0x200053f0
    2cbc:	20004a1e 	.word	0x20004a1e
    2cc0:	42004000 	.word	0x42004000
    2cc4:	6dfffff3 	.word	0x6dfffff3
    2cc8:	cff3efff 	.word	0xcff3efff
    2ccc:	7fffff6f 	.word	0x7fffff6f
    2cd0:	200188a1 	.word	0x200188a1
    2cd4:	200188a2 	.word	0x200188a2
    2cd8:	200188a0 	.word	0x200188a0
    2cdc:	2001889e 	.word	0x2001889e
    2ce0:	200188ad 	.word	0x200188ad
    2ce4:	2001889f 	.word	0x2001889f
                    addr_mode = Read_Internal_Write_External;
    2ce8:	480c      	ldr	r0, [pc, #48]	; (2d1c <read_byte(unsigned short, bool)+0x368>)
    2cea:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    2cec:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    2cee:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2cf0:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2cf2:	e7a0      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2cf4:	4a0a      	ldr	r2, [pc, #40]	; (2d20 <read_byte(unsigned short, bool)+0x36c>)
    2cf6:	f892 8000 	ldrb.w	r8, [r2]
    2cfa:	f1b8 0f01 	cmp.w	r8, #1
    2cfe:	f43f ae73 	beq.w	29e8 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    2d02:	4908      	ldr	r1, [pc, #32]	; (2d24 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    2d04:	2200      	movs	r2, #0
    2d06:	4b08      	ldr	r3, [pc, #32]	; (2d28 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    2d08:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    2d0a:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2d0c:	e68d      	b.n	2a2a <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    2d0e:	28b3      	cmp	r0, #179	; 0xb3
    2d10:	d191      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    2d12:	4c02      	ldr	r4, [pc, #8]	; (2d1c <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    2d14:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    2d16:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    2d18:	7008      	strb	r0, [r1, #0]
    2d1a:	e78c      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2d1c:	2001889c 	.word	0x2001889c
    2d20:	200188ac 	.word	0x200188ac
    2d24:	20018888 	.word	0x20018888
    2d28:	200188a5 	.word	0x200188a5

00002d2c <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2d2c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    2d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2d32:	d201      	bcs.n	2d38 <write_byte(unsigned short, unsigned char)+0xc>
    2d34:	4b77      	ldr	r3, [pc, #476]	; (2f14 <write_byte(unsigned short, unsigned char)+0x1e8>)
    2d36:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2d38:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2d3c:	f0c0 80ad 	bcc.w	2e9a <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2d40:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2d48:	d306      	bcc.n	2d58 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2d4a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2d4e:	b29b      	uxth	r3, r3
    2d50:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2d54:	f0c0 80a1 	bcc.w	2e9a <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2d58:	4b6f      	ldr	r3, [pc, #444]	; (2f18 <write_byte(unsigned short, unsigned char)+0x1ec>)
    2d5a:	781b      	ldrb	r3, [r3, #0]
    2d5c:	b94b      	cbnz	r3, 2d72 <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2d5e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2d62:	6813      	ldr	r3, [r2, #0]
    2d64:	04df      	lsls	r7, r3, #19
    2d66:	d4fc      	bmi.n	2d62 <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2d68:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2d6c:	6813      	ldr	r3, [r2, #0]
    2d6e:	04de      	lsls	r6, r3, #19
    2d70:	d5fc      	bpl.n	2d6c <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2d72:	4c6a      	ldr	r4, [pc, #424]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d74:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2d78:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2d7a:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2d7e:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2d82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2d86:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d8a:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2d8c:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d90:	4b63      	ldr	r3, [pc, #396]	; (2f20 <write_byte(unsigned short, unsigned char)+0x1f4>)
    2d92:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2d94:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2d96:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2d9a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2d9e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2da0:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2da2:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2da4:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2da8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2dac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2db0:	432b      	orrs	r3, r5
    2db2:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2db4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2db6:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2db8:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2dbe:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2dc2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dc6:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dc8:	4a56      	ldr	r2, [pc, #344]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2dca:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dcc:	4d56      	ldr	r5, [pc, #344]	; (2f28 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dce:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2dd0:	0542      	lsls	r2, r0, #21
    2dd2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2dd6:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2dd8:	0343      	lsls	r3, r0, #13
    2dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2dde:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2de0:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2de2:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2de4:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2de6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2dea:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2dec:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2dee:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2df6:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2df8:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2dfa:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dfe:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e02:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e04:	4849      	ldr	r0, [pc, #292]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2e06:	4332      	orrs	r2, r6
    2e08:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e0a:	4a49      	ldr	r2, [pc, #292]	; (2f30 <write_byte(unsigned short, unsigned char)+0x204>)
    2e0c:	6805      	ldr	r5, [r0, #0]
    2e0e:	402a      	ands	r2, r5
		if (val) {
    2e10:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2e12:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2e16:	ea43 030c 	orr.w	r3, r3, ip
    2e1a:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2e1c:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2e20:	d444      	bmi.n	2eac <write_byte(unsigned short, unsigned char)+0x180>
    2e22:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2e24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2e28:	f04f 0201 	mov.w	r2, #1
    2e2c:	4b3b      	ldr	r3, [pc, #236]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2e2e:	d544      	bpl.n	2eba <write_byte(unsigned short, unsigned char)+0x18e>
    2e30:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2e36:	4b39      	ldr	r3, [pc, #228]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2e3c:	d544      	bpl.n	2ec8 <write_byte(unsigned short, unsigned char)+0x19c>
    2e3e:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2e44:	4b35      	ldr	r3, [pc, #212]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2e4a:	d544      	bpl.n	2ed6 <write_byte(unsigned short, unsigned char)+0x1aa>
    2e4c:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2e52:	4b32      	ldr	r3, [pc, #200]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2e58:	d544      	bpl.n	2ee4 <write_byte(unsigned short, unsigned char)+0x1b8>
    2e5a:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2e60:	4b2e      	ldr	r3, [pc, #184]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2e66:	d544      	bpl.n	2ef2 <write_byte(unsigned short, unsigned char)+0x1c6>
    2e68:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2e6e:	4b2f      	ldr	r3, [pc, #188]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2e70:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2e74:	d544      	bpl.n	2f00 <write_byte(unsigned short, unsigned char)+0x1d4>
    2e76:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2e7c:	4b2b      	ldr	r3, [pc, #172]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2e7e:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2e82:	d044      	beq.n	2f0e <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2e88:	4c28      	ldr	r4, [pc, #160]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2e8a:	2520      	movs	r5, #32
    2e8c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2e90:	f7ff fd40 	bl	2914 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2e94:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2e9a:	4b26      	ldr	r3, [pc, #152]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2b02      	cmp	r3, #2
    2ea0:	f67f af5a 	bls.w	2d58 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2ea4:	4b24      	ldr	r3, [pc, #144]	; (2f38 <write_byte(unsigned short, unsigned char)+0x20c>)
    2ea6:	2201      	movs	r2, #1
    2ea8:	701a      	strb	r2, [r3, #0]
}
    2eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2eac:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2eae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2eb2:	f04f 0201 	mov.w	r2, #1
    2eb6:	4b19      	ldr	r3, [pc, #100]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2eb8:	d4ba      	bmi.n	2e30 <write_byte(unsigned short, unsigned char)+0x104>
    2eba:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2ec0:	4b16      	ldr	r3, [pc, #88]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2ec6:	d4ba      	bmi.n	2e3e <write_byte(unsigned short, unsigned char)+0x112>
    2ec8:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2ece:	4b13      	ldr	r3, [pc, #76]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2ed4:	d4ba      	bmi.n	2e4c <write_byte(unsigned short, unsigned char)+0x120>
    2ed6:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2edc:	4b0f      	ldr	r3, [pc, #60]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ede:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2ee2:	d4ba      	bmi.n	2e5a <write_byte(unsigned short, unsigned char)+0x12e>
    2ee4:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2eea:	4b0c      	ldr	r3, [pc, #48]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2ef0:	d4ba      	bmi.n	2e68 <write_byte(unsigned short, unsigned char)+0x13c>
    2ef2:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2ef8:	4b0c      	ldr	r3, [pc, #48]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2efa:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2efe:	d4ba      	bmi.n	2e76 <write_byte(unsigned short, unsigned char)+0x14a>
    2f00:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2f06:	4b09      	ldr	r3, [pc, #36]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2f08:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2f0c:	d1ba      	bne.n	2e84 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2f12:	e7b9      	b.n	2e88 <write_byte(unsigned short, unsigned char)+0x15c>
    2f14:	200053f0 	.word	0x200053f0
    2f18:	20004a1e 	.word	0x20004a1e
    2f1c:	42004000 	.word	0x42004000
    2f20:	6dfffff3 	.word	0x6dfffff3
    2f24:	cff3efff 	.word	0xcff3efff
    2f28:	42008000 	.word	0x42008000
    2f2c:	4200c000 	.word	0x4200c000
    2f30:	7fffff6f 	.word	0x7fffff6f
    2f34:	2001889c 	.word	0x2001889c
    2f38:	200188a5 	.word	0x200188a5

00002f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f3c:	4a08      	ldr	r2, [pc, #32]	; (2f60 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2f3e:	0601      	lsls	r1, r0, #24
    2f40:	7813      	ldrb	r3, [r2, #0]
    2f42:	d407      	bmi.n	2f54 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f48:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2f4a:	b928      	cbnz	r0, 2f58 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2f4c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2f50:	7013      	strb	r3, [r2, #0]
}
    2f52:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2f58:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f5c:	7013      	strb	r3, [r2, #0]
}
    2f5e:	4770      	bx	lr
    2f60:	20004a20 	.word	0x20004a20

00002f64 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2f64:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2f66:	4b04      	ldr	r3, [pc, #16]	; (2f78 <Fetch_Immediate(unsigned char)+0x14>)
    2f68:	2100      	movs	r1, #0
    2f6a:	881b      	ldrh	r3, [r3, #0]
    2f6c:	4418      	add	r0, r3
    2f6e:	b280      	uxth	r0, r0
    2f70:	f7ff fd20 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2f74:	bd08      	pop	{r3, pc}
    2f76:	bf00      	nop
    2f78:	2001888c 	.word	0x2001888c

00002f7c <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2f7c:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2f7e:	4b07      	ldr	r3, [pc, #28]	; (2f9c <Fetch_ZeroPage()+0x20>)
    2f80:	2100      	movs	r1, #0
    2f82:	8818      	ldrh	r0, [r3, #0]
    2f84:	3001      	adds	r0, #1
    2f86:	b280      	uxth	r0, r0
    2f88:	f7ff fd14 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2f8c:	4b04      	ldr	r3, [pc, #16]	; (2fa0 <Fetch_ZeroPage()+0x24>)
    2f8e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2f90:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f92:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2f94:	f7ff fd0e 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2f98:	bd08      	pop	{r3, pc}
    2f9a:	bf00      	nop
    2f9c:	2001888c 	.word	0x2001888c
    2fa0:	2001888a 	.word	0x2001888a

00002fa4 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2fa4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2fa6:	4c0c      	ldr	r4, [pc, #48]	; (2fd8 <Fetch_ZeroPage_X()+0x34>)
    2fa8:	2100      	movs	r1, #0
    2faa:	8820      	ldrh	r0, [r4, #0]
    2fac:	3001      	adds	r0, #1
    2fae:	b280      	uxth	r0, r0
    2fb0:	f7ff fd00 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2fb4:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2fb6:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2fb8:	2100      	movs	r1, #0
    2fba:	1c58      	adds	r0, r3, #1
    2fbc:	b280      	uxth	r0, r0
    2fbe:	f7ff fcf9 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2fc2:	4a06      	ldr	r2, [pc, #24]	; (2fdc <Fetch_ZeroPage_X()+0x38>)
    2fc4:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2fc6:	2100      	movs	r1, #0
    2fc8:	7812      	ldrb	r2, [r2, #0]
    2fca:	18a0      	adds	r0, r4, r2
    2fcc:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2fce:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2fd0:	f7ff fcf0 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2fd4:	bd10      	pop	{r4, pc}
    2fd6:	bf00      	nop
    2fd8:	2001888c 	.word	0x2001888c
    2fdc:	200188a9 	.word	0x200188a9
    2fe0:	2001888a 	.word	0x2001888a

00002fe4 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2fe4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2fe6:	4c0c      	ldr	r4, [pc, #48]	; (3018 <Fetch_ZeroPage_Y()+0x34>)
    2fe8:	2100      	movs	r1, #0
    2fea:	8820      	ldrh	r0, [r4, #0]
    2fec:	3001      	adds	r0, #1
    2fee:	b280      	uxth	r0, r0
    2ff0:	f7ff fce0 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2ff4:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2ff6:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2ff8:	2100      	movs	r1, #0
    2ffa:	1c58      	adds	r0, r3, #1
    2ffc:	b280      	uxth	r0, r0
    2ffe:	f7ff fcd9 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    3002:	4a06      	ldr	r2, [pc, #24]	; (301c <Fetch_ZeroPage_Y()+0x38>)
    3004:	4b06      	ldr	r3, [pc, #24]	; (3020 <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    3006:	2100      	movs	r1, #0
    3008:	7812      	ldrb	r2, [r2, #0]
    300a:	18a0      	adds	r0, r4, r2
    300c:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    300e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3010:	f7ff fcd0 	bl	29b4 <read_byte(unsigned short, bool)>
}
    3014:	bd10      	pop	{r4, pc}
    3016:	bf00      	nop
    3018:	2001888c 	.word	0x2001888c
    301c:	200188aa 	.word	0x200188aa
    3020:	2001888a 	.word	0x2001888a

00003024 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    3024:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3026:	4c0b      	ldr	r4, [pc, #44]	; (3054 <Fetch_Absolute()+0x30>)
    3028:	2100      	movs	r1, #0
    302a:	8820      	ldrh	r0, [r4, #0]
    302c:	3001      	adds	r0, #1
    302e:	b280      	uxth	r0, r0
    3030:	f7ff fcc0 	bl	29b4 <read_byte(unsigned short, bool)>
    3034:	8823      	ldrh	r3, [r4, #0]
    3036:	4604      	mov	r4, r0
    3038:	2100      	movs	r1, #0
    303a:	1c98      	adds	r0, r3, #2
    303c:	b280      	uxth	r0, r0
    303e:	f7ff fcb9 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    3042:	4b05      	ldr	r3, [pc, #20]	; (3058 <Fetch_Absolute()+0x34>)
    3044:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    3048:	2100      	movs	r1, #0
    effective_address = adl + adh;
    304a:	b280      	uxth	r0, r0
    304c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    304e:	f7ff fcb1 	bl	29b4 <read_byte(unsigned short, bool)>
}
    3052:	bd10      	pop	{r4, pc}
    3054:	2001888c 	.word	0x2001888c
    3058:	2001888a 	.word	0x2001888a

0000305c <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    305e:	4c14      	ldr	r4, [pc, #80]	; (30b0 <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    3060:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    3062:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    3064:	4d13      	ldr	r5, [pc, #76]	; (30b4 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    3066:	8823      	ldrh	r3, [r4, #0]
    3068:	1c58      	adds	r0, r3, #1
    306a:	b280      	uxth	r0, r0
    306c:	f7ff fca2 	bl	29b4 <read_byte(unsigned short, bool)>
    3070:	8823      	ldrh	r3, [r4, #0]
    3072:	4607      	mov	r7, r0
    3074:	2100      	movs	r1, #0
    3076:	1c98      	adds	r0, r3, #2
    3078:	b280      	uxth	r0, r0
    307a:	f7ff fc9b 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    307e:	4b0e      	ldr	r3, [pc, #56]	; (30b8 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    3080:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    3082:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    3084:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    3086:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    3088:	443b      	add	r3, r7
    308a:	4423      	add	r3, r4
    308c:	b298      	uxth	r0, r3
    308e:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    3090:	f7ff fc90 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3094:	2e01      	cmp	r6, #1
    3096:	d000      	beq.n	309a <Fetch_Absolute_X(unsigned char)+0x3e>
}
    3098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    309a:	882b      	ldrh	r3, [r5, #0]
    309c:	405c      	eors	r4, r3
    309e:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    30a2:	d0f9      	beq.n	3098 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    30a4:	2100      	movs	r1, #0
    30a6:	4618      	mov	r0, r3
    30a8:	f7ff fc84 	bl	29b4 <read_byte(unsigned short, bool)>
}
    30ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30ae:	bf00      	nop
    30b0:	2001888c 	.word	0x2001888c
    30b4:	2001888a 	.word	0x2001888a
    30b8:	200188a9 	.word	0x200188a9

000030bc <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    30bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    30be:	4c14      	ldr	r4, [pc, #80]	; (3110 <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    30c0:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    30c2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30c4:	4d13      	ldr	r5, [pc, #76]	; (3114 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    30c6:	8823      	ldrh	r3, [r4, #0]
    30c8:	1c58      	adds	r0, r3, #1
    30ca:	b280      	uxth	r0, r0
    30cc:	f7ff fc72 	bl	29b4 <read_byte(unsigned short, bool)>
    30d0:	8823      	ldrh	r3, [r4, #0]
    30d2:	4607      	mov	r7, r0
    30d4:	2100      	movs	r1, #0
    30d6:	1c98      	adds	r0, r3, #2
    30d8:	b280      	uxth	r0, r0
    30da:	f7ff fc6b 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    30de:	4b0e      	ldr	r3, [pc, #56]	; (3118 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    30e0:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    30e2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30e4:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    30e6:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    30e8:	443b      	add	r3, r7
    30ea:	4423      	add	r3, r4
    30ec:	b298      	uxth	r0, r3
    30ee:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    30f0:	f7ff fc60 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    30f4:	2e01      	cmp	r6, #1
    30f6:	d000      	beq.n	30fa <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    30f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    30fa:	882b      	ldrh	r3, [r5, #0]
    30fc:	405c      	eors	r4, r3
    30fe:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    3102:	d0f9      	beq.n	30f8 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    3104:	2100      	movs	r1, #0
    3106:	4618      	mov	r0, r3
    3108:	f7ff fc54 	bl	29b4 <read_byte(unsigned short, bool)>
}
    310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    310e:	bf00      	nop
    3110:	2001888c 	.word	0x2001888c
    3114:	2001888a 	.word	0x2001888a
    3118:	200188aa 	.word	0x200188aa

0000311c <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    311c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    311e:	4b11      	ldr	r3, [pc, #68]	; (3164 <Fetch_Indexed_Indirect_X()+0x48>)
    3120:	2100      	movs	r1, #0
    3122:	8818      	ldrh	r0, [r3, #0]
    3124:	3001      	adds	r0, #1
    3126:	b280      	uxth	r0, r0
    3128:	f7ff fc44 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    312c:	4b0e      	ldr	r3, [pc, #56]	; (3168 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    312e:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    3130:	781c      	ldrb	r4, [r3, #0]
    3132:	4404      	add	r4, r0
    3134:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    3136:	4620      	mov	r0, r4
    3138:	f7ff fc3c 	bl	29b4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    313c:	2100      	movs	r1, #0
    313e:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    3140:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    3142:	f7ff fc37 	bl	29b4 <read_byte(unsigned short, bool)>
    3146:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    3148:	2100      	movs	r1, #0
    314a:	b2e0      	uxtb	r0, r4
    314c:	f7ff fc32 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3150:	4b06      	ldr	r3, [pc, #24]	; (316c <Fetch_Indexed_Indirect_X()+0x50>)
    3152:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    3156:	2100      	movs	r1, #0
    effective_address = adh + adl;
    3158:	b280      	uxth	r0, r0
    315a:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    315c:	f7ff fc2a 	bl	29b4 <read_byte(unsigned short, bool)>
}
    3160:	bd38      	pop	{r3, r4, r5, pc}
    3162:	bf00      	nop
    3164:	2001888c 	.word	0x2001888c
    3168:	200188a9 	.word	0x200188a9
    316c:	2001888a 	.word	0x2001888a

00003170 <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    3170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    3172:	4b16      	ldr	r3, [pc, #88]	; (31cc <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    3174:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    3176:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3178:	4e15      	ldr	r6, [pc, #84]	; (31d0 <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	1c58      	adds	r0, r3, #1
    317e:	b280      	uxth	r0, r0
    3180:	f7ff fc18 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    3184:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    3186:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    3188:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    318a:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    318c:	f7ff fc12 	bl	29b4 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3190:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    3192:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3194:	b2e0      	uxtb	r0, r4
    3196:	f7ff fc0d 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    319a:	4b0e      	ldr	r3, [pc, #56]	; (31d4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    319c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    319e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    31a0:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    31a2:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    31a4:	443b      	add	r3, r7
    31a6:	4423      	add	r3, r4
    31a8:	b298      	uxth	r0, r3
    31aa:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    31ac:	f7ff fc02 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    31b0:	2d01      	cmp	r5, #1
    31b2:	d000      	beq.n	31b6 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    31b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    31b6:	8833      	ldrh	r3, [r6, #0]
    31b8:	405c      	eors	r4, r3
    31ba:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    31be:	d0f9      	beq.n	31b4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    31c0:	2100      	movs	r1, #0
    31c2:	4618      	mov	r0, r3
    31c4:	f7ff fbf6 	bl	29b4 <read_byte(unsigned short, bool)>
}
    31c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ca:	bf00      	nop
    31cc:	2001888c 	.word	0x2001888c
    31d0:	2001888a 	.word	0x2001888a
    31d4:	200188aa 	.word	0x200188aa

000031d8 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    31d8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    31da:	4e0c      	ldr	r6, [pc, #48]	; (320c <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    31dc:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    31de:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    31e0:	4c0b      	ldr	r4, [pc, #44]	; (3210 <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    31e2:	8833      	ldrh	r3, [r6, #0]
    31e4:	1c58      	adds	r0, r3, #1
    31e6:	b280      	uxth	r0, r0
    31e8:	f7ff fbe4 	bl	29b4 <read_byte(unsigned short, bool)>
    31ec:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    31ee:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    31f0:	2100      	movs	r1, #0
    31f2:	1c98      	adds	r0, r3, #2
    31f4:	b280      	uxth	r0, r0
    31f6:	f7ff fbdd 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    31fa:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    31fc:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    31fe:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    3202:	b280      	uxth	r0, r0
    3204:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    3206:	f7ff fd91 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    320a:	bd70      	pop	{r4, r5, r6, pc}
    320c:	2001888c 	.word	0x2001888c
    3210:	2001888a 	.word	0x2001888a

00003214 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    3214:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    3216:	4b0b      	ldr	r3, [pc, #44]	; (3244 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    3218:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    321a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    321c:	4d0a      	ldr	r5, [pc, #40]	; (3248 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    321e:	881b      	ldrh	r3, [r3, #0]
    3220:	1c58      	adds	r0, r3, #1
    3222:	b280      	uxth	r0, r0
    3224:	f7ff fbc6 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    3228:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    322a:	b280      	uxth	r0, r0
    322c:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    322e:	f7ff fbc1 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    3232:	4a06      	ldr	r2, [pc, #24]	; (324c <Write_ZeroPage_X(unsigned char)+0x38>)
    3234:	4621      	mov	r1, r4
    3236:	882b      	ldrh	r3, [r5, #0]
    3238:	7810      	ldrb	r0, [r2, #0]
    323a:	4418      	add	r0, r3
    323c:	b2c0      	uxtb	r0, r0
    323e:	f7ff fd75 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3242:	bd38      	pop	{r3, r4, r5, pc}
    3244:	2001888c 	.word	0x2001888c
    3248:	2001888a 	.word	0x2001888a
    324c:	200188a9 	.word	0x200188a9

00003250 <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    3250:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    3252:	4b0b      	ldr	r3, [pc, #44]	; (3280 <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    3254:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    3256:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3258:	4d0a      	ldr	r5, [pc, #40]	; (3284 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    325a:	881b      	ldrh	r3, [r3, #0]
    325c:	1c58      	adds	r0, r3, #1
    325e:	b280      	uxth	r0, r0
    3260:	f7ff fba8 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    3264:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3266:	b280      	uxth	r0, r0
    3268:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    326a:	f7ff fba3 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    326e:	4a06      	ldr	r2, [pc, #24]	; (3288 <Write_ZeroPage_Y(unsigned char)+0x38>)
    3270:	4621      	mov	r1, r4
    3272:	882b      	ldrh	r3, [r5, #0]
    3274:	7810      	ldrb	r0, [r2, #0]
    3276:	4418      	add	r0, r3
    3278:	b2c0      	uxtb	r0, r0
    327a:	f7ff fd57 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    327e:	bd38      	pop	{r3, r4, r5, pc}
    3280:	2001888c 	.word	0x2001888c
    3284:	2001888a 	.word	0x2001888a
    3288:	200188aa 	.word	0x200188aa

0000328c <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    328c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    328e:	4d0f      	ldr	r5, [pc, #60]	; (32cc <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    3290:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    3292:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    3294:	4e0e      	ldr	r6, [pc, #56]	; (32d0 <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    3296:	882b      	ldrh	r3, [r5, #0]
    3298:	1c58      	adds	r0, r3, #1
    329a:	b280      	uxth	r0, r0
    329c:	f7ff fb8a 	bl	29b4 <read_byte(unsigned short, bool)>
    32a0:	882b      	ldrh	r3, [r5, #0]
    32a2:	4605      	mov	r5, r0
    32a4:	2100      	movs	r1, #0
    32a6:	1c98      	adds	r0, r3, #2
    32a8:	b280      	uxth	r0, r0
    32aa:	f7ff fb83 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    32ae:	4b09      	ldr	r3, [pc, #36]	; (32d4 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    32b0:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	442b      	add	r3, r5
    32b6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    32ba:	b298      	uxth	r0, r3
    32bc:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    32be:	f7ff fb79 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    32c2:	4621      	mov	r1, r4
    32c4:	8830      	ldrh	r0, [r6, #0]
    32c6:	f7ff fd31 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    32ca:	bd70      	pop	{r4, r5, r6, pc}
    32cc:	2001888c 	.word	0x2001888c
    32d0:	2001888a 	.word	0x2001888a
    32d4:	200188a9 	.word	0x200188a9

000032d8 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    32d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    32da:	4c16      	ldr	r4, [pc, #88]	; (3334 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    32dc:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    32de:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    32e0:	4d15      	ldr	r5, [pc, #84]	; (3338 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    32e2:	8823      	ldrh	r3, [r4, #0]
    32e4:	1c58      	adds	r0, r3, #1
    32e6:	b280      	uxth	r0, r0
    32e8:	f7ff fb64 	bl	29b4 <read_byte(unsigned short, bool)>
    32ec:	8823      	ldrh	r3, [r4, #0]
    32ee:	4607      	mov	r7, r0
    32f0:	2100      	movs	r1, #0
    32f2:	1c98      	adds	r0, r3, #2
    32f4:	b280      	uxth	r0, r0
    32f6:	f7ff fb5d 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    32fa:	4b10      	ldr	r3, [pc, #64]	; (333c <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    32fc:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    32fe:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    3300:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    3302:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    3304:	443b      	add	r3, r7
    3306:	4423      	add	r3, r4
    3308:	b298      	uxth	r0, r3
    330a:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    330c:	f7ff fb52 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    3310:	8828      	ldrh	r0, [r5, #0]
    3312:	4044      	eors	r4, r0
    3314:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    3318:	d103      	bne.n	3322 <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    331a:	4631      	mov	r1, r6
    331c:	f7ff fd06 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    3322:	2100      	movs	r1, #0
    3324:	f7ff fb46 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    3328:	8828      	ldrh	r0, [r5, #0]
    332a:	4631      	mov	r1, r6
    332c:	f7ff fcfe 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3332:	bf00      	nop
    3334:	2001888c 	.word	0x2001888c
    3338:	2001888a 	.word	0x2001888a
    333c:	200188aa 	.word	0x200188aa

00003340 <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    3342:	4b13      	ldr	r3, [pc, #76]	; (3390 <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3344:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    3346:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    3348:	4f12      	ldr	r7, [pc, #72]	; (3394 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    334a:	881b      	ldrh	r3, [r3, #0]
    334c:	1c58      	adds	r0, r3, #1
    334e:	b280      	uxth	r0, r0
    3350:	f7ff fb30 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    3354:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    3356:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    3358:	4604      	mov	r4, r0
    read_byte(bal, false);
    335a:	4628      	mov	r0, r5
    335c:	f7ff fb2a 	bl	29b4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    3360:	783b      	ldrb	r3, [r7, #0]
    3362:	2100      	movs	r1, #0
    3364:	441c      	add	r4, r3
    3366:	b2e0      	uxtb	r0, r4
    3368:	f7ff fb24 	bl	29b4 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    336c:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    336e:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3370:	2100      	movs	r1, #0
    3372:	3301      	adds	r3, #1
    3374:	441d      	add	r5, r3
    3376:	b2e8      	uxtb	r0, r5
    3378:	f7ff fb1c 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    337c:	4b06      	ldr	r3, [pc, #24]	; (3398 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    337e:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    3382:	4631      	mov	r1, r6
    effective_address = adh + adl;
    3384:	b280      	uxth	r0, r0
    3386:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    3388:	f7ff fcd0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    338c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    338e:	bf00      	nop
    3390:	2001888c 	.word	0x2001888c
    3394:	200188a9 	.word	0x200188a9
    3398:	2001888a 	.word	0x2001888a

0000339c <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    339e:	4b11      	ldr	r3, [pc, #68]	; (33e4 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    33a0:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    33a2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    33a4:	4f10      	ldr	r7, [pc, #64]	; (33e8 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    33a6:	881b      	ldrh	r3, [r3, #0]
    33a8:	1c58      	adds	r0, r3, #1
    33aa:	b280      	uxth	r0, r0
    33ac:	f7ff fb02 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    33b0:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    33b2:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    33b4:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    33b6:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    33b8:	f7ff fafc 	bl	29b4 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    33bc:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    33be:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    33c0:	b2a0      	uxth	r0, r4
    33c2:	f7ff faf7 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    33c6:	4b09      	ldr	r3, [pc, #36]	; (33ec <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    33c8:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    33ca:	781b      	ldrb	r3, [r3, #0]
    33cc:	4433      	add	r3, r6
    33ce:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    33d2:	b298      	uxth	r0, r3
    33d4:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    33d6:	f7ff faed 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    33da:	4629      	mov	r1, r5
    33dc:	8838      	ldrh	r0, [r7, #0]
    33de:	f7ff fca5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    33e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33e4:	2001888c 	.word	0x2001888c
    33e8:	2001888a 	.word	0x2001888a
    33ec:	200188aa 	.word	0x200188aa

000033f0 <reset_sequence()>:
void reset_sequence() {
    33f0:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    33f2:	4b65      	ldr	r3, [pc, #404]	; (3588 <reset_sequence()+0x198>)
    33f4:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    33f6:	4d65      	ldr	r5, [pc, #404]	; (358c <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    33f8:	2002      	movs	r0, #2
    33fa:	4965      	ldr	r1, [pc, #404]	; (3590 <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    33fc:	4c65      	ldr	r4, [pc, #404]	; (3594 <reset_sequence()+0x1a4>)
    33fe:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    3402:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    3404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3408:	8828      	ldrh	r0, [r5, #0]
    340a:	f7ff fad3 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    340e:	8828      	ldrh	r0, [r5, #0]
    3410:	2100      	movs	r1, #0
    3412:	3001      	adds	r0, #1
    3414:	b280      	uxth	r0, r0
    3416:	f7ff facd 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    341a:	7820      	ldrb	r0, [r4, #0]
    341c:	2100      	movs	r1, #0
    341e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3422:	f7ff fac7 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    3426:	7820      	ldrb	r0, [r4, #0]
    3428:	2100      	movs	r1, #0
    342a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    342e:	3801      	subs	r0, #1
    3430:	b280      	uxth	r0, r0
    3432:	f7ff fabf 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    3436:	7820      	ldrb	r0, [r4, #0]
    3438:	2100      	movs	r1, #0
    343a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    343e:	3802      	subs	r0, #2
    3440:	b280      	uxth	r0, r0
    3442:	f7ff fab7 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    3446:	2100      	movs	r1, #0
    3448:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    344c:	f7ff fab2 	bl	29b4 <read_byte(unsigned short, bool)>
    3450:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    3452:	2100      	movs	r1, #0
    3454:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3458:	f7ff faac 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    345c:	4a4e      	ldr	r2, [pc, #312]	; (3598 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    345e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    3462:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3464:	4b4d      	ldr	r3, [pc, #308]	; (359c <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3466:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3468:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    346a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    346e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    3470:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3472:	d37b      	bcc.n	356c <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3474:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    347c:	d309      	bcc.n	3492 <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    347e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3482:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3486:	d371      	bcc.n	356c <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3488:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    348c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3490:	d36c      	bcc.n	356c <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3492:	4b43      	ldr	r3, [pc, #268]	; (35a0 <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    3494:	2100      	movs	r1, #0
    3496:	4a43      	ldr	r2, [pc, #268]	; (35a4 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3498:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    349a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    349c:	2b01      	cmp	r3, #1
    349e:	d005      	beq.n	34ac <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    34a0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    34a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    34a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    34ac:	4b3e      	ldr	r3, [pc, #248]	; (35a8 <reset_sequence()+0x1b8>)
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	b94b      	cbnz	r3, 34c6 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    34b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    34b6:	6813      	ldr	r3, [r2, #0]
    34b8:	04d9      	lsls	r1, r3, #19
    34ba:	d4fc      	bmi.n	34b6 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    34bc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    34c0:	6813      	ldr	r3, [r2, #0]
    34c2:	04db      	lsls	r3, r3, #19
    34c4:	d5fc      	bpl.n	34c0 <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    34c6:	4e32      	ldr	r6, [pc, #200]	; (3590 <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34c8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    34cc:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    34ce:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    34d0:	06c1      	lsls	r1, r0, #27
    34d2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34d6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34da:	682a      	ldr	r2, [r5, #0]
    34dc:	4b33      	ldr	r3, [pc, #204]	; (35ac <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34de:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34e2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    34e4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34e6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    34ea:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34ee:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    34f0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    34f4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34f8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    34fa:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    34fe:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3502:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3504:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3506:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3508:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    350a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    350e:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3514:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3516:	4a26      	ldr	r2, [pc, #152]	; (35b0 <reset_sequence()+0x1c0>)
    3518:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    351a:	4d26      	ldr	r5, [pc, #152]	; (35b4 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    351c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    351e:	0542      	lsls	r2, r0, #21
    3520:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3524:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3526:	0343      	lsls	r3, r0, #13
    3528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    352c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    352e:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3530:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3534:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3538:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    353a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    353e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3542:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3544:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3548:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    354c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    354e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3550:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3552:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3556:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3558:	480b      	ldr	r0, [pc, #44]	; (3588 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    355a:	4332      	orrs	r2, r6
    355c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    355e:	4a16      	ldr	r2, [pc, #88]	; (35b8 <reset_sequence()+0x1c8>)
    3560:	6804      	ldr	r4, [r0, #0]
    3562:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3564:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3566:	430b      	orrs	r3, r1
    3568:	6003      	str	r3, [r0, #0]
    return;
    356a:	e003      	b.n	3574 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    356c:	4b13      	ldr	r3, [pc, #76]	; (35bc <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    356e:	781b      	ldrb	r3, [r3, #0]
    3570:	2b01      	cmp	r3, #1
    3572:	d98e      	bls.n	3492 <reset_sequence()+0xa2>
    3574:	2110      	movs	r1, #16
    3576:	4812      	ldr	r0, [pc, #72]	; (35c0 <reset_sequence()+0x1d0>)
    3578:	f006 fed4 	bl	a324 <usb_serial_write>
    357c:	4811      	ldr	r0, [pc, #68]	; (35c4 <reset_sequence()+0x1d4>)
}
    357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3582:	f005 ba05 	b.w	8990 <Print::println()>
    3586:	bf00      	nop
    3588:	4200c000 	.word	0x4200c000
    358c:	2001888c 	.word	0x2001888c
    3590:	42004000 	.word	0x42004000
    3594:	20004a21 	.word	0x20004a21
    3598:	20004a20 	.word	0x20004a20
    359c:	20018888 	.word	0x20018888
    35a0:	200188ac 	.word	0x200188ac
    35a4:	200188a5 	.word	0x200188a5
    35a8:	20004a1e 	.word	0x20004a1e
    35ac:	6dfffff3 	.word	0x6dfffff3
    35b0:	cff3efff 	.word	0xcff3efff
    35b4:	42008000 	.word	0x42008000
    35b8:	7fffff6f 	.word	0x7fffff6f
    35bc:	2001889c 	.word	0x2001889c
    35c0:	20000448 	.word	0x20000448
    35c4:	20004410 	.word	0x20004410

000035c8 <nmi_handler()>:
void nmi_handler() {
    35c8:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35ca:	4e67      	ldr	r6, [pc, #412]	; (3768 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    35cc:	f7ff f9a2 	bl	2914 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35d0:	4c66      	ldr	r4, [pc, #408]	; (376c <nmi_handler()+0x1a4>)
    35d2:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35d4:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35d6:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35d8:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    35dc:	4d64      	ldr	r5, [pc, #400]	; (3770 <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35de:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35e0:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35e4:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35e6:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35e8:	f7ff f9e4 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    35ec:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    35ee:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    35f0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    35f4:	0a09      	lsrs	r1, r1, #8
    35f6:	f7ff fb99 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    35fa:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    35fc:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    35fe:	3801      	subs	r0, #1
    3600:	b2c0      	uxtb	r0, r0
    3602:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3604:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3608:	f7ff fb90 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    360c:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    360e:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3610:	3801      	subs	r0, #1
    3612:	b2c0      	uxtb	r0, r0
    3614:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3616:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    361a:	f7ff fb87 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    361e:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    3620:	2100      	movs	r1, #0
    3622:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    3626:	3b01      	subs	r3, #1
    3628:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    362a:	f7ff f9c3 	bl	29b4 <read_byte(unsigned short, bool)>
    362e:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    3630:	2100      	movs	r1, #0
    3632:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    3636:	f7ff f9bd 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    363a:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    363c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3640:	4a4c      	ldr	r2, [pc, #304]	; (3774 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3642:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3646:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3648:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    364a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    364e:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3650:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3652:	d37b      	bcc.n	374c <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3654:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    365c:	d309      	bcc.n	3672 <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    365e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3662:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3666:	d371      	bcc.n	374c <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3668:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    366c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3670:	d36c      	bcc.n	374c <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3672:	4b41      	ldr	r3, [pc, #260]	; (3778 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3674:	2100      	movs	r1, #0
    3676:	4a41      	ldr	r2, [pc, #260]	; (377c <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3678:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    367a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    367c:	2b01      	cmp	r3, #1
    367e:	d005      	beq.n	368c <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3680:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3684:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    368c:	4b3c      	ldr	r3, [pc, #240]	; (3780 <nmi_handler()+0x1b8>)
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	b94b      	cbnz	r3, 36a6 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3692:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3696:	6813      	ldr	r3, [r2, #0]
    3698:	04d9      	lsls	r1, r3, #19
    369a:	d4fc      	bmi.n	3696 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    369c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    36a0:	6813      	ldr	r3, [r2, #0]
    36a2:	04db      	lsls	r3, r3, #19
    36a4:	d5fc      	bpl.n	36a0 <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    36a6:	4e37      	ldr	r6, [pc, #220]	; (3784 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36a8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    36ac:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    36ae:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    36b0:	06c1      	lsls	r1, r0, #27
    36b2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    36b6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36ba:	682a      	ldr	r2, [r5, #0]
    36bc:	4b32      	ldr	r3, [pc, #200]	; (3788 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    36be:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36c2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    36c4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36c6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    36ca:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36ce:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    36d0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    36d4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36d8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    36da:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    36de:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36e2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36e4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36e6:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    36e8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36ea:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36ee:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    36f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36f4:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36f6:	4a25      	ldr	r2, [pc, #148]	; (378c <nmi_handler()+0x1c4>)
    36f8:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36fa:	4d25      	ldr	r5, [pc, #148]	; (3790 <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36fc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    36fe:	0542      	lsls	r2, r0, #21
    3700:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3704:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3706:	0343      	lsls	r3, r0, #13
    3708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    370c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    370e:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3710:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3714:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3718:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    371a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    371e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3722:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3724:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3728:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    372c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    372e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3730:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3732:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3736:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3738:	4816      	ldr	r0, [pc, #88]	; (3794 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    373a:	4332      	orrs	r2, r6
    373c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    373e:	4a16      	ldr	r2, [pc, #88]	; (3798 <nmi_handler()+0x1d0>)
    3740:	6804      	ldr	r4, [r0, #0]
    3742:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3744:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3746:	430b      	orrs	r3, r1
    3748:	6003      	str	r3, [r0, #0]
    return;
    374a:	e003      	b.n	3754 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    374c:	4b13      	ldr	r3, [pc, #76]	; (379c <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    374e:	781b      	ldrb	r3, [r3, #0]
    3750:	2b01      	cmp	r3, #1
    3752:	d98e      	bls.n	3672 <nmi_handler()+0xaa>
    3754:	210e      	movs	r1, #14
    3756:	4812      	ldr	r0, [pc, #72]	; (37a0 <nmi_handler()+0x1d8>)
    3758:	f006 fde4 	bl	a324 <usb_serial_write>
    375c:	4811      	ldr	r0, [pc, #68]	; (37a4 <nmi_handler()+0x1dc>)
}
    375e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3762:	f005 b915 	b.w	8990 <Print::println()>
    3766:	bf00      	nop
    3768:	20004a20 	.word	0x20004a20
    376c:	2001888c 	.word	0x2001888c
    3770:	20004a21 	.word	0x20004a21
    3774:	20018888 	.word	0x20018888
    3778:	200188ac 	.word	0x200188ac
    377c:	200188a5 	.word	0x200188a5
    3780:	20004a1e 	.word	0x20004a1e
    3784:	42004000 	.word	0x42004000
    3788:	6dfffff3 	.word	0x6dfffff3
    378c:	cff3efff 	.word	0xcff3efff
    3790:	42008000 	.word	0x42008000
    3794:	4200c000 	.word	0x4200c000
    3798:	7fffff6f 	.word	0x7fffff6f
    379c:	2001889c 	.word	0x2001889c
    37a0:	20000394 	.word	0x20000394
    37a4:	20004410 	.word	0x20004410

000037a8 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    37a8:	b570      	push	{r4, r5, r6, lr}
    37aa:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    37ac:	4e69      	ldr	r6, [pc, #420]	; (3954 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    37ae:	f7ff f8b1 	bl	2914 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    37b2:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    37b4:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    37b6:	f000 80ca 	beq.w	394e <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    37ba:	f023 0310 	bic.w	r3, r3, #16
    37be:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    37c2:	4c65      	ldr	r4, [pc, #404]	; (3958 <irq_handler(unsigned char)+0x1b0>)
    37c4:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    37c6:	4d65      	ldr	r5, [pc, #404]	; (395c <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    37c8:	8820      	ldrh	r0, [r4, #0]
    37ca:	7033      	strb	r3, [r6, #0]
    37cc:	3001      	adds	r0, #1
    37ce:	b280      	uxth	r0, r0
    37d0:	f7ff f8f0 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    37d4:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    37d6:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    37d8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    37dc:	0a09      	lsrs	r1, r1, #8
    37de:	f7ff faa5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    37e2:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37e4:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    37e6:	3801      	subs	r0, #1
    37e8:	b2c0      	uxtb	r0, r0
    37ea:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37ec:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    37f0:	f7ff fa9c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    37f4:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37f6:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    37f8:	3801      	subs	r0, #1
    37fa:	b2c0      	uxtb	r0, r0
    37fc:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37fe:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3802:	f7ff fa93 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3806:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    3808:	2100      	movs	r1, #0
    380a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    380e:	3b01      	subs	r3, #1
    3810:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    3812:	f7ff f8cf 	bl	29b4 <read_byte(unsigned short, bool)>
    3816:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    3818:	2100      	movs	r1, #0
    381a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    381e:	f7ff f8c9 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3822:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    3824:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3828:	4a4d      	ldr	r2, [pc, #308]	; (3960 <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    382a:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    382e:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3830:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3832:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    3836:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3838:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    383a:	d37b      	bcc.n	3934 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    383c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3844:	d309      	bcc.n	385a <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3846:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    384a:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    384e:	d371      	bcc.n	3934 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3850:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3854:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3858:	d36c      	bcc.n	3934 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    385a:	4b42      	ldr	r3, [pc, #264]	; (3964 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    385c:	2100      	movs	r1, #0
    385e:	4a42      	ldr	r2, [pc, #264]	; (3968 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3860:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3862:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3864:	2b01      	cmp	r3, #1
    3866:	d005      	beq.n	3874 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3868:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    386c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3874:	4b3d      	ldr	r3, [pc, #244]	; (396c <irq_handler(unsigned char)+0x1c4>)
    3876:	781b      	ldrb	r3, [r3, #0]
    3878:	b94b      	cbnz	r3, 388e <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    387a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    387e:	6813      	ldr	r3, [r2, #0]
    3880:	04d9      	lsls	r1, r3, #19
    3882:	d4fc      	bmi.n	387e <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3884:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3888:	6813      	ldr	r3, [r2, #0]
    388a:	04db      	lsls	r3, r3, #19
    388c:	d5fc      	bpl.n	3888 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    388e:	4e38      	ldr	r6, [pc, #224]	; (3970 <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3890:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3894:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3896:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3898:	06c1      	lsls	r1, r0, #27
    389a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    389e:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38a2:	682a      	ldr	r2, [r5, #0]
    38a4:	4b33      	ldr	r3, [pc, #204]	; (3974 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38a6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38aa:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38ac:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ae:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38b2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38b6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    38b8:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    38bc:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38c0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    38c2:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    38c6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ca:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38cc:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ce:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38d0:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38d2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38d6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38dc:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38de:	4a26      	ldr	r2, [pc, #152]	; (3978 <irq_handler(unsigned char)+0x1d0>)
    38e0:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38e2:	4d26      	ldr	r5, [pc, #152]	; (397c <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38e4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    38e6:	0542      	lsls	r2, r0, #21
    38e8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    38ec:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    38ee:	0343      	lsls	r3, r0, #13
    38f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    38f4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    38f6:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38f8:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    38fc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3900:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3902:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3906:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    390a:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    390c:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3910:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3914:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3916:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3918:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    391a:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    391e:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3920:	4817      	ldr	r0, [pc, #92]	; (3980 <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3922:	4332      	orrs	r2, r6
    3924:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3926:	4a17      	ldr	r2, [pc, #92]	; (3984 <irq_handler(unsigned char)+0x1dc>)
    3928:	6804      	ldr	r4, [r0, #0]
    392a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    392c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    392e:	430b      	orrs	r3, r1
    3930:	6003      	str	r3, [r0, #0]
    return;
    3932:	e003      	b.n	393c <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3934:	4b14      	ldr	r3, [pc, #80]	; (3988 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	2b01      	cmp	r3, #1
    393a:	d98e      	bls.n	385a <irq_handler(unsigned char)+0xb2>
    393c:	210e      	movs	r1, #14
    393e:	4813      	ldr	r0, [pc, #76]	; (398c <irq_handler(unsigned char)+0x1e4>)
    3940:	f006 fcf0 	bl	a324 <usb_serial_write>
    3944:	4812      	ldr	r0, [pc, #72]	; (3990 <irq_handler(unsigned char)+0x1e8>)
}
    3946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    394a:	f005 b821 	b.w	8990 <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    394e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3952:	e736      	b.n	37c2 <irq_handler(unsigned char)+0x1a>
    3954:	20004a20 	.word	0x20004a20
    3958:	2001888c 	.word	0x2001888c
    395c:	20004a21 	.word	0x20004a21
    3960:	20018888 	.word	0x20018888
    3964:	200188ac 	.word	0x200188ac
    3968:	200188a5 	.word	0x200188a5
    396c:	20004a1e 	.word	0x20004a1e
    3970:	42004000 	.word	0x42004000
    3974:	6dfffff3 	.word	0x6dfffff3
    3978:	cff3efff 	.word	0xcff3efff
    397c:	42008000 	.word	0x42008000
    3980:	4200c000 	.word	0x4200c000
    3984:	7fffff6f 	.word	0x7fffff6f
    3988:	2001889c 	.word	0x2001889c
    398c:	20000384 	.word	0x20000384
    3990:	20004410 	.word	0x20004410

00003994 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    3994:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3996:	4c0f      	ldr	r4, [pc, #60]	; (39d4 <opcode_0x0A()+0x40>)
    3998:	2100      	movs	r1, #0
    399a:	8820      	ldrh	r0, [r4, #0]
    399c:	f7ff f80a 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39a0:	4b0d      	ldr	r3, [pc, #52]	; (39d8 <opcode_0x0A()+0x44>)
    39a2:	490e      	ldr	r1, [pc, #56]	; (39dc <opcode_0x0A()+0x48>)
    39a4:	f993 2000 	ldrsb.w	r2, [r3]
    39a8:	7818      	ldrb	r0, [r3, #0]
    39aa:	2a00      	cmp	r2, #0
    39ac:	780a      	ldrb	r2, [r1, #0]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    39ae:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39b2:	bfb4      	ite	lt
    39b4:	f042 0201 	orrlt.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    39b8:	f002 02fe 	andge.w	r2, r2, #254	; 0xfe
    register_a = register_a << 1;
    39bc:	b2c0      	uxtb	r0, r0
    39be:	700a      	strb	r2, [r1, #0]
    39c0:	7018      	strb	r0, [r3, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    39c2:	f7ff fabb 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0A].length);
    39c6:	4a06      	ldr	r2, [pc, #24]	; (39e0 <opcode_0x0A()+0x4c>)
    39c8:	8823      	ldrh	r3, [r4, #0]
    39ca:	f892 0239 	ldrb.w	r0, [r2, #569]	; 0x239
    39ce:	4418      	add	r0, r3
}
    39d0:	b280      	uxth	r0, r0
    39d2:	bd10      	pop	{r4, pc}
    39d4:	2001888c 	.word	0x2001888c
    39d8:	200188a8 	.word	0x200188a8
    39dc:	20004a20 	.word	0x20004a20
    39e0:	20015418 	.word	0x20015418

000039e4 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    39e4:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    39e6:	4c0e      	ldr	r4, [pc, #56]	; (3a20 <opcode_0x4A()+0x3c>)
    39e8:	2100      	movs	r1, #0
    39ea:	8820      	ldrh	r0, [r4, #0]
    39ec:	f7fe ffe2 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39f0:	4a0c      	ldr	r2, [pc, #48]	; (3a24 <opcode_0x4A()+0x40>)
    39f2:	490d      	ldr	r1, [pc, #52]	; (3a28 <opcode_0x4A()+0x44>)
    39f4:	7810      	ldrb	r0, [r2, #0]
    39f6:	780b      	ldrb	r3, [r1, #0]
    39f8:	f010 0f01 	tst.w	r0, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    39fc:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a00:	bf14      	ite	ne
    3a02:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3a06:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    3a0a:	7010      	strb	r0, [r2, #0]
    3a0c:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a0e:	f7ff fa95 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4A].length);
    3a12:	4a06      	ldr	r2, [pc, #24]	; (3a2c <opcode_0x4A()+0x48>)
    3a14:	8823      	ldrh	r3, [r4, #0]
    3a16:	f892 0f39 	ldrb.w	r0, [r2, #3897]	; 0xf39
    3a1a:	4418      	add	r0, r3
}
    3a1c:	b280      	uxth	r0, r0
    3a1e:	bd10      	pop	{r4, pc}
    3a20:	2001888c 	.word	0x2001888c
    3a24:	200188a8 	.word	0x200188a8
    3a28:	20004a20 	.word	0x20004a20
    3a2c:	20015418 	.word	0x20015418

00003a30 <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    3a30:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3a32:	4c10      	ldr	r4, [pc, #64]	; (3a74 <opcode_0x6A()+0x44>)
    3a34:	2100      	movs	r1, #0
    3a36:	8820      	ldrh	r0, [r4, #0]
    3a38:	f7fe ffbc 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a3c:	490e      	ldr	r1, [pc, #56]	; (3a78 <opcode_0x6A()+0x48>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a3e:	4a0f      	ldr	r2, [pc, #60]	; (3a7c <opcode_0x6A()+0x4c>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a40:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a42:	f892 c000 	ldrb.w	ip, [r2]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a46:	01d8      	lsls	r0, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a48:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a4c:	b2c0      	uxtb	r0, r0
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a4e:	bf14      	ite	ne
    3a50:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3a54:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3a58:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    3a5c:	700b      	strb	r3, [r1, #0]
    3a5e:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a60:	f7ff fa6c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x6A].length);
    3a64:	4a06      	ldr	r2, [pc, #24]	; (3a80 <opcode_0x6A()+0x50>)
    3a66:	8823      	ldrh	r3, [r4, #0]
    3a68:	f892 05b9 	ldrb.w	r0, [r2, #1465]	; 0x5b9
    3a6c:	4418      	add	r0, r3
}
    3a6e:	b280      	uxth	r0, r0
    3a70:	bd10      	pop	{r4, pc}
    3a72:	bf00      	nop
    3a74:	2001888c 	.word	0x2001888c
    3a78:	20004a20 	.word	0x20004a20
    3a7c:	200188a8 	.word	0x200188a8
    3a80:	20016418 	.word	0x20016418

00003a84 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3a84:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3a86:	4c11      	ldr	r4, [pc, #68]	; (3acc <opcode_0x2A()+0x48>)
    3a88:	2100      	movs	r1, #0
    3a8a:	8820      	ldrh	r0, [r4, #0]
    3a8c:	f7fe ff92 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3a90:	490f      	ldr	r1, [pc, #60]	; (3ad0 <opcode_0x2A()+0x4c>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a92:	4a10      	ldr	r2, [pc, #64]	; (3ad4 <opcode_0x2A()+0x50>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3a94:	780b      	ldrb	r3, [r1, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a96:	f992 e000 	ldrsb.w	lr, [r2]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3a9a:	f003 0001 	and.w	r0, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a9e:	f892 c000 	ldrb.w	ip, [r2]
    3aa2:	f1be 0f00 	cmp.w	lr, #0
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    3aa6:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3aaa:	bfb4      	ite	lt
    3aac:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3ab0:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    3ab4:	b2c0      	uxtb	r0, r0
    3ab6:	700b      	strb	r3, [r1, #0]
    3ab8:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3aba:	f7ff fa3f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2A].length);
    3abe:	4a06      	ldr	r2, [pc, #24]	; (3ad8 <opcode_0x2A()+0x54>)
    3ac0:	8823      	ldrh	r3, [r4, #0]
    3ac2:	f892 08b9 	ldrb.w	r0, [r2, #2233]	; 0x8b9
    3ac6:	4418      	add	r0, r3
}
    3ac8:	b280      	uxth	r0, r0
    3aca:	bd10      	pop	{r4, pc}
    3acc:	2001888c 	.word	0x2001888c
    3ad0:	20004a20 	.word	0x20004a20
    3ad4:	200188a8 	.word	0x200188a8
    3ad8:	20015418 	.word	0x20015418

00003adc <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    3adc:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    3ade:	4c2f      	ldr	r4, [pc, #188]	; (3b9c <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3ae0:	492f      	ldr	r1, [pc, #188]	; (3ba0 <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    3ae2:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3ae4:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    3ae8:	0716      	lsls	r6, r2, #28
    3aea:	d532      	bpl.n	3b52 <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3aec:	f002 0e01 	and.w	lr, r2, #1
    3af0:	f00c 030f 	and.w	r3, ip, #15
    3af4:	f000 050f 	and.w	r5, r0, #15
    3af8:	4473      	add	r3, lr
    3afa:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    3afc:	2b09      	cmp	r3, #9
    3afe:	d823      	bhi.n	3b48 <Calculate_ADC(unsigned short)+0x6c>
    3b00:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    3b04:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    3b08:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3b0c:	4435      	add	r5, r6
    3b0e:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3b10:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    3b14:	d838      	bhi.n	3b88 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3b16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3b1a:	4473      	add	r3, lr
    3b1c:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3b1e:	fa4f fc8c 	sxtb.w	ip, ip
    3b22:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b26:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    3b2a:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b2c:	db20      	blt.n	3b70 <Calculate_ADC(unsigned short)+0x94>
    3b2e:	f1be 0f00 	cmp.w	lr, #0
    3b32:	db1a      	blt.n	3b6a <Calculate_ADC(unsigned short)+0x8e>
    3b34:	061d      	lsls	r5, r3, #24
    3b36:	d41f      	bmi.n	3b78 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3b38:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    3b3c:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b3e:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b44:	f7ff b9fa 	b.w	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3b48:	3b0a      	subs	r3, #10
    3b4a:	f04f 0e10 	mov.w	lr, #16
    3b4e:	b29b      	uxth	r3, r3
    3b50:	e7d8      	b.n	3b04 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    3b52:	f002 0301 	and.w	r3, r2, #1
    3b56:	4403      	add	r3, r0
    3b58:	4463      	add	r3, ip
    3b5a:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3b5c:	2bff      	cmp	r3, #255	; 0xff
    3b5e:	bf8c      	ite	hi
    3b60:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3b64:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3b68:	e7d9      	b.n	3b1e <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    3b6a:	f1bc 0f00 	cmp.w	ip, #0
    3b6e:	dae3      	bge.n	3b38 <Calculate_ADC(unsigned short)+0x5c>
    3b70:	ea63 030e 	orn	r3, r3, lr
    3b74:	061b      	lsls	r3, r3, #24
    3b76:	d4df      	bmi.n	3b38 <Calculate_ADC(unsigned short)+0x5c>
    3b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    3b7c:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b7e:	7022      	strb	r2, [r4, #0]
}
    3b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b84:	f7ff b9da 	b.w	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    3b88:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3b8c:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    3b90:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    3b94:	f042 0201 	orr.w	r2, r2, #1
    3b98:	e7bf      	b.n	3b1a <Calculate_ADC(unsigned short)+0x3e>
    3b9a:	bf00      	nop
    3b9c:	20004a20 	.word	0x20004a20
    3ba0:	200188a8 	.word	0x200188a8

00003ba4 <Calculate_SBC(unsigned short)>:
} // 0x71 - ADC - Indirect Indexed  Y

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    3ba4:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    3ba6:	4c32      	ldr	r4, [pc, #200]	; (3c70 <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3ba8:	4932      	ldr	r1, [pc, #200]	; (3c74 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    3baa:	7823      	ldrb	r3, [r4, #0]
    3bac:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    3bae:	071e      	lsls	r6, r3, #28
    3bb0:	f002 0201 	and.w	r2, r2, #1
    3bb4:	d539      	bpl.n	3c2a <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3bb6:	f000 0c0f 	and.w	ip, r0, #15
    3bba:	f891 e000 	ldrb.w	lr, [r1]
    3bbe:	4462      	add	r2, ip
    3bc0:	f00e 0c0f 	and.w	ip, lr, #15
    3bc4:	ebac 0c02 	sub.w	ip, ip, r2
    3bc8:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3bcc:	f1bc 0f09 	cmp.w	ip, #9
    3bd0:	d825      	bhi.n	3c1e <Calculate_SBC(unsigned short)+0x7a>
    3bd2:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3bd4:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    3bd8:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3bdc:	1b92      	subs	r2, r2, r6
    3bde:	1b52      	subs	r2, r2, r5
    3be0:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3be2:	2a90      	cmp	r2, #144	; 0x90
    3be4:	d83f      	bhi.n	3c66 <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3be6:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    3bea:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3bee:	4494      	add	ip, r2
    3bf0:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3bf4:	fa4f fe8e 	sxtb.w	lr, lr
    3bf8:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3bfa:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    3bfe:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c02:	db24      	blt.n	3c4e <Calculate_SBC(unsigned short)+0xaa>
    3c04:	2a00      	cmp	r2, #0
    3c06:	da1f      	bge.n	3c48 <Calculate_SBC(unsigned short)+0xa4>
    3c08:	f01c 0f80 	tst.w	ip, #128	; 0x80
    3c0c:	d123      	bne.n	3c56 <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3c0e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3c12:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c14:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3c1a:	f7ff b98f 	b.w	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    3c1e:	f10c 0c0a 	add.w	ip, ip, #10
    3c22:	2510      	movs	r5, #16
    3c24:	fa1f fc8c 	uxth.w	ip, ip
    3c28:	e7d4      	b.n	3bd4 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    3c2a:	f891 e000 	ldrb.w	lr, [r1]
    3c2e:	ebae 0c00 	sub.w	ip, lr, r0
    3c32:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3c36:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    3c38:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3c3c:	bf54      	ite	pl
    3c3e:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c42:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3c46:	e7d5      	b.n	3bf4 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3c48:	f1be 0f00 	cmp.w	lr, #0
    3c4c:	dadf      	bge.n	3c0e <Calculate_SBC(unsigned short)+0x6a>
    3c4e:	ea42 020c 	orr.w	r2, r2, ip
    3c52:	0612      	lsls	r2, r2, #24
    3c54:	d4db      	bmi.n	3c0e <Calculate_SBC(unsigned short)+0x6a>
    3c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    3c5a:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c5c:	7023      	strb	r3, [r4, #0]
}
    3c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3c62:	f7ff b96b 	b.w	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3c66:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3c68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    3c6c:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    3c6e:	e7be      	b.n	3bee <Calculate_SBC(unsigned short)+0x4a>
    3c70:	20004a20 	.word	0x20004a20
    3c74:	200188a8 	.word	0x200188a8

00003c78 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3c78:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3c7a:	4c08      	ldr	r4, [pc, #32]	; (3c9c <opcode_0xE9()+0x24>)
    3c7c:	2100      	movs	r1, #0
    3c7e:	8820      	ldrh	r0, [r4, #0]
    3c80:	3001      	adds	r0, #1
    3c82:	b280      	uxth	r0, r0
    3c84:	f7fe fe96 	bl	29b4 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    3c88:	b280      	uxth	r0, r0
    3c8a:	f7ff ff8b 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    3c8e:	4a04      	ldr	r2, [pc, #16]	; (3ca0 <opcode_0xE9()+0x28>)
    3c90:	8823      	ldrh	r3, [r4, #0]
    3c92:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3c96:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3c98:	b280      	uxth	r0, r0
    3c9a:	bd10      	pop	{r4, pc}
    3c9c:	2001888c 	.word	0x2001888c
    3ca0:	20017418 	.word	0x20017418

00003ca4 <opcode_0xEA()>:
} // 0xF1 - SBC - Indirect Indexed  Y

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3ca4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3ca6:	4c07      	ldr	r4, [pc, #28]	; (3cc4 <opcode_0xEA()+0x20>)
    3ca8:	2100      	movs	r1, #0
    3caa:	8820      	ldrh	r0, [r4, #0]
    3cac:	3001      	adds	r0, #1
    3cae:	b280      	uxth	r0, r0
    3cb0:	f7fe fe80 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3cb4:	4a04      	ldr	r2, [pc, #16]	; (3cc8 <opcode_0xEA()+0x24>)
    3cb6:	8823      	ldrh	r3, [r4, #0]
    3cb8:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3cbc:	4418      	add	r0, r3
} // 0xEA - NOP   
    3cbe:	b280      	uxth	r0, r0
    3cc0:	bd10      	pop	{r4, pc}
    3cc2:	bf00      	nop
    3cc4:	2001888c 	.word	0x2001888c
    3cc8:	20017418 	.word	0x20017418

00003ccc <opcode_0x08()>:
} // 0x98 - TYA - Transfer Y to Accumulator

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    3ccc:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3cce:	4d0d      	ldr	r5, [pc, #52]	; (3d04 <opcode_0x08()+0x38>)
    3cd0:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3cd2:	4c0d      	ldr	r4, [pc, #52]	; (3d08 <opcode_0x08()+0x3c>)
    3cd4:	8828      	ldrh	r0, [r5, #0]
    3cd6:	3001      	adds	r0, #1
    3cd8:	b280      	uxth	r0, r0
    3cda:	f7fe fe6b 	bl	29b4 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    3cde:	4b0b      	ldr	r3, [pc, #44]	; (3d0c <opcode_0x08()+0x40>)
    3ce0:	7820      	ldrb	r0, [r4, #0]
    3ce2:	7819      	ldrb	r1, [r3, #0]
    3ce4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3ce8:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    3cec:	f7ff f81e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    3cf0:	4907      	ldr	r1, [pc, #28]	; (3d10 <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    3cf2:	7823      	ldrb	r3, [r4, #0]
    3cf4:	882a      	ldrh	r2, [r5, #0]
    3cf6:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    3cfa:	3b01      	subs	r3, #1
    3cfc:	4410      	add	r0, r2
    3cfe:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    3d00:	b280      	uxth	r0, r0
    3d02:	bd38      	pop	{r3, r4, r5, pc}
    3d04:	2001888c 	.word	0x2001888c
    3d08:	20004a21 	.word	0x20004a21
    3d0c:	20004a20 	.word	0x20004a20
    3d10:	20015418 	.word	0x20015418

00003d14 <opcode_0x48()>:
uint16_t opcode_0x48() {
    3d14:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3d16:	4d0c      	ldr	r5, [pc, #48]	; (3d48 <opcode_0x48()+0x34>)
    3d18:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3d1a:	4c0c      	ldr	r4, [pc, #48]	; (3d4c <opcode_0x48()+0x38>)
    3d1c:	8828      	ldrh	r0, [r5, #0]
    3d1e:	3001      	adds	r0, #1
    3d20:	b280      	uxth	r0, r0
    3d22:	f7fe fe47 	bl	29b4 <read_byte(unsigned short, bool)>
    3d26:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    3d28:	4b09      	ldr	r3, [pc, #36]	; (3d50 <opcode_0x48()+0x3c>)
    3d2a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3d2e:	7819      	ldrb	r1, [r3, #0]
    3d30:	f7fe fffc 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    3d34:	4907      	ldr	r1, [pc, #28]	; (3d54 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    3d36:	7823      	ldrb	r3, [r4, #0]
    3d38:	882a      	ldrh	r2, [r5, #0]
    3d3a:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    3d3e:	3b01      	subs	r3, #1
    3d40:	4410      	add	r0, r2
    3d42:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    3d44:	b280      	uxth	r0, r0
    3d46:	bd38      	pop	{r3, r4, r5, pc}
    3d48:	2001888c 	.word	0x2001888c
    3d4c:	20004a21 	.word	0x20004a21
    3d50:	200188a8 	.word	0x200188a8
    3d54:	20015418 	.word	0x20015418

00003d58 <opcode_0x28()>:
uint16_t opcode_0x28() {
    3d58:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3d5a:	4d11      	ldr	r5, [pc, #68]	; (3da0 <opcode_0x28()+0x48>)
    3d5c:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3d5e:	4c11      	ldr	r4, [pc, #68]	; (3da4 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    3d60:	8828      	ldrh	r0, [r5, #0]
    3d62:	3001      	adds	r0, #1
    3d64:	b280      	uxth	r0, r0
    3d66:	f7fe fe25 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3d6a:	7820      	ldrb	r0, [r4, #0]
    3d6c:	2100      	movs	r1, #0
    3d6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3d72:	f7fe fe1f 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3d76:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3d78:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3d7a:	3301      	adds	r3, #1
    3d7c:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3d7e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3d82:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3d84:	f7fe fe16 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    3d88:	4b07      	ldr	r3, [pc, #28]	; (3da8 <opcode_0x28()+0x50>)
    3d8a:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    3d8c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3d90:	4906      	ldr	r1, [pc, #24]	; (3dac <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    3d92:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    3d96:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    3d98:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    3d9a:	b280      	uxth	r0, r0
    3d9c:	bd38      	pop	{r3, r4, r5, pc}
    3d9e:	bf00      	nop
    3da0:	2001888c 	.word	0x2001888c
    3da4:	20004a21 	.word	0x20004a21
    3da8:	20015418 	.word	0x20015418
    3dac:	20004a20 	.word	0x20004a20

00003db0 <opcode_0x68()>:
uint16_t opcode_0x68() {
    3db0:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3db2:	4d11      	ldr	r5, [pc, #68]	; (3df8 <opcode_0x68()+0x48>)
    3db4:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3db6:	4c11      	ldr	r4, [pc, #68]	; (3dfc <opcode_0x68()+0x4c>)
    read_byte(register_pc+1, false);
    3db8:	8828      	ldrh	r0, [r5, #0]
    3dba:	3001      	adds	r0, #1
    3dbc:	b280      	uxth	r0, r0
    3dbe:	f7fe fdf9 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3dc2:	7820      	ldrb	r0, [r4, #0]
    3dc4:	2100      	movs	r1, #0
    3dc6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3dca:	f7fe fdf3 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3dce:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3dd0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3dd2:	3301      	adds	r3, #1
    3dd4:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3dd6:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3dda:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3ddc:	f7fe fdea 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = pop();
    3de0:	4b07      	ldr	r3, [pc, #28]	; (3e00 <opcode_0x68()+0x50>)
    3de2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3de4:	f7ff f8aa 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    3de8:	4a06      	ldr	r2, [pc, #24]	; (3e04 <opcode_0x68()+0x54>)
    3dea:	882b      	ldrh	r3, [r5, #0]
    3dec:	f892 0551 	ldrb.w	r0, [r2, #1361]	; 0x551
    3df0:	4418      	add	r0, r3
} // 0x68 - PLA - Pop Accumulator from Stack
    3df2:	b280      	uxth	r0, r0
    3df4:	bd38      	pop	{r3, r4, r5, pc}
    3df6:	bf00      	nop
    3df8:	2001888c 	.word	0x2001888c
    3dfc:	20004a21 	.word	0x20004a21
    3e00:	200188a8 	.word	0x200188a8
    3e04:	20016418 	.word	0x20016418

00003e08 <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
uint16_t opcode_0x29() {
    3e08:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3e0a:	4c0a      	ldr	r4, [pc, #40]	; (3e34 <opcode_0x29()+0x2c>)
    3e0c:	2100      	movs	r1, #0
    3e0e:	8820      	ldrh	r0, [r4, #0]
    3e10:	3001      	adds	r0, #1
    3e12:	b280      	uxth	r0, r0
    3e14:	f7fe fdce 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    3e18:	4b07      	ldr	r3, [pc, #28]	; (3e38 <opcode_0x29()+0x30>)
    3e1a:	781a      	ldrb	r2, [r3, #0]
    3e1c:	4010      	ands	r0, r2
    3e1e:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e20:	f7ff f88c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x29].length);
    3e24:	4a05      	ldr	r2, [pc, #20]	; (3e3c <opcode_0x29()+0x34>)
    3e26:	8823      	ldrh	r3, [r4, #0]
    3e28:	f892 0885 	ldrb.w	r0, [r2, #2181]	; 0x885
    3e2c:	4418      	add	r0, r3
} // 0x29 - AND - Immediate
    3e2e:	b280      	uxth	r0, r0
    3e30:	bd10      	pop	{r4, pc}
    3e32:	bf00      	nop
    3e34:	2001888c 	.word	0x2001888c
    3e38:	200188a8 	.word	0x200188a8
    3e3c:	20015418 	.word	0x20015418

00003e40 <opcode_0x09()>:
} // 0x31 - AND - Indirect Indexed  Y

// -------------------------------------------------
// ORA
// -------------------------------------------------
uint16_t opcode_0x09() {
    3e40:	b510      	push	{r4, lr}
    3e42:	4c0a      	ldr	r4, [pc, #40]	; (3e6c <opcode_0x09()+0x2c>)
    3e44:	2100      	movs	r1, #0
    3e46:	8820      	ldrh	r0, [r4, #0]
    3e48:	3001      	adds	r0, #1
    3e4a:	b280      	uxth	r0, r0
    3e4c:	f7fe fdb2 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    3e50:	4b07      	ldr	r3, [pc, #28]	; (3e70 <opcode_0x09()+0x30>)
    3e52:	781a      	ldrb	r2, [r3, #0]
    3e54:	4310      	orrs	r0, r2
    3e56:	b2c0      	uxtb	r0, r0
    3e58:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e5a:	f7ff f86f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x09].length);
    3e5e:	4a05      	ldr	r2, [pc, #20]	; (3e74 <opcode_0x09()+0x34>)
    3e60:	8823      	ldrh	r3, [r4, #0]
    3e62:	f892 0205 	ldrb.w	r0, [r2, #517]	; 0x205
    3e66:	4418      	add	r0, r3
} // 0x09 - OR - Immediate
    3e68:	b280      	uxth	r0, r0
    3e6a:	bd10      	pop	{r4, pc}
    3e6c:	2001888c 	.word	0x2001888c
    3e70:	200188a8 	.word	0x200188a8
    3e74:	20015418 	.word	0x20015418

00003e78 <opcode_0x49()>:
} // 0x11 - OR - Indirect Indexed  Y

// -------------------------------------------------
// EOR
// -------------------------------------------------
uint16_t opcode_0x49() {
    3e78:	b510      	push	{r4, lr}
    3e7a:	4c0a      	ldr	r4, [pc, #40]	; (3ea4 <opcode_0x49()+0x2c>)
    3e7c:	2100      	movs	r1, #0
    3e7e:	8820      	ldrh	r0, [r4, #0]
    3e80:	3001      	adds	r0, #1
    3e82:	b280      	uxth	r0, r0
    3e84:	f7fe fd96 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    3e88:	4b07      	ldr	r3, [pc, #28]	; (3ea8 <opcode_0x49()+0x30>)
    3e8a:	781a      	ldrb	r2, [r3, #0]
    3e8c:	4050      	eors	r0, r2
    3e8e:	b2c0      	uxtb	r0, r0
    3e90:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e92:	f7ff f853 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x49].length);
    3e96:	4a05      	ldr	r2, [pc, #20]	; (3eac <opcode_0x49()+0x34>)
    3e98:	8823      	ldrh	r3, [r4, #0]
    3e9a:	f892 0f05 	ldrb.w	r0, [r2, #3845]	; 0xf05
    3e9e:	4418      	add	r0, r3
} // 0x49 - EOR - Immediate
    3ea0:	b280      	uxth	r0, r0
    3ea2:	bd10      	pop	{r4, pc}
    3ea4:	2001888c 	.word	0x2001888c
    3ea8:	200188a8 	.word	0x200188a8
    3eac:	20015418 	.word	0x20015418

00003eb0 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    3eb0:	b510      	push	{r4, lr}
    3eb2:	4c12      	ldr	r4, [pc, #72]	; (3efc <opcode_0x24()+0x4c>)
    3eb4:	2100      	movs	r1, #0
    3eb6:	8820      	ldrh	r0, [r4, #0]
    3eb8:	3001      	adds	r0, #1
    3eba:	b280      	uxth	r0, r0
    3ebc:	f7fe fd7a 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3ec0:	4b0f      	ldr	r3, [pc, #60]	; (3f00 <opcode_0x24()+0x50>)
    3ec2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3ec4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3ec6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3ec8:	f7fe fd74 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3ecc:	490d      	ldr	r1, [pc, #52]	; (3f04 <opcode_0x24()+0x54>)
    3ece:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3ed2:	780a      	ldrb	r2, [r1, #0]
    3ed4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3ed8:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    3eda:	4a0b      	ldr	r2, [pc, #44]	; (3f08 <opcode_0x24()+0x58>)
    3edc:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ede:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    3ee0:	480a      	ldr	r0, [pc, #40]	; (3f0c <opcode_0x24()+0x5c>)
    3ee2:	8822      	ldrh	r2, [r4, #0]
    3ee4:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ee8:	bf0c      	ite	eq
    3eea:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3eee:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    3ef2:	4410      	add	r0, r2
    3ef4:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    3ef6:	b280      	uxth	r0, r0
    3ef8:	bd10      	pop	{r4, pc}
    3efa:	bf00      	nop
    3efc:	2001888c 	.word	0x2001888c
    3f00:	2001888a 	.word	0x2001888a
    3f04:	20004a20 	.word	0x20004a20
    3f08:	200188a8 	.word	0x200188a8
    3f0c:	20015418 	.word	0x20015418

00003f10 <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    3f10:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    3f12:	f7ff f887 	bl	3024 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f16:	490d      	ldr	r1, [pc, #52]	; (3f4c <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    3f18:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f1a:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    3f1c:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f20:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3f24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f28:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    3f2c:	4809      	ldr	r0, [pc, #36]	; (3f54 <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f2e:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    3f32:	4a09      	ldr	r2, [pc, #36]	; (3f58 <opcode_0x2C()+0x48>)
    3f34:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f38:	bf0c      	ite	eq
    3f3a:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f3e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    3f42:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    3f44:	8813      	ldrh	r3, [r2, #0]
    3f46:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    3f48:	b280      	uxth	r0, r0
    3f4a:	bd08      	pop	{r3, pc}
    3f4c:	20004a20 	.word	0x20004a20
    3f50:	200188a8 	.word	0x200188a8
    3f54:	20015418 	.word	0x20015418
    3f58:	2001888c 	.word	0x2001888c

00003f5c <Calculate_CMP(unsigned char)>:
void Calculate_CMP(uint8_t local_data) {
    int16_t temp = 0;

    Begin_Fetch_Next_Opcode();

    temp = register_a - local_data;
    3f5c:	4b07      	ldr	r3, [pc, #28]	; (3f7c <Calculate_CMP(unsigned char)+0x20>)

    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f5e:	4908      	ldr	r1, [pc, #32]	; (3f80 <Calculate_CMP(unsigned char)+0x24>)
    temp = register_a - local_data;
    3f60:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f62:	780a      	ldrb	r2, [r1, #0]
    3f64:	4283      	cmp	r3, r0
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    3f66:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f6a:	bf2c      	ite	cs
    3f6c:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3f70:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3f74:	b2c0      	uxtb	r0, r0
    3f76:	700a      	strb	r2, [r1, #0]
    3f78:	f7fe bfe0 	b.w	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3f7c:	200188a8 	.word	0x200188a8
    3f80:	20004a20 	.word	0x20004a20

00003f84 <opcode_0xC9()>:
    return;
}
uint16_t opcode_0xC9() {
    3f84:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3f86:	4c0f      	ldr	r4, [pc, #60]	; (3fc4 <opcode_0xC9()+0x40>)
    3f88:	2100      	movs	r1, #0
    3f8a:	8820      	ldrh	r0, [r4, #0]
    3f8c:	3001      	adds	r0, #1
    3f8e:	b280      	uxth	r0, r0
    3f90:	f7fe fd10 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    3f94:	4b0c      	ldr	r3, [pc, #48]	; (3fc8 <opcode_0xC9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f96:	490d      	ldr	r1, [pc, #52]	; (3fcc <opcode_0xC9()+0x48>)
    temp = register_a - local_data;
    3f98:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f9a:	780a      	ldrb	r2, [r1, #0]
    3f9c:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3f9e:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3fa2:	bf94      	ite	ls
    3fa4:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3fa8:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3fac:	b2c0      	uxtb	r0, r0
    3fae:	700a      	strb	r2, [r1, #0]
    3fb0:	f7fe ffc4 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    3fb4:	4a06      	ldr	r2, [pc, #24]	; (3fd0 <opcode_0xC9()+0x4c>)
    3fb6:	8823      	ldrh	r3, [r4, #0]
    3fb8:	f892 0905 	ldrb.w	r0, [r2, #2309]	; 0x905
    3fbc:	4418      	add	r0, r3
} // 0xC9 - CMP - Immediate
    3fbe:	b280      	uxth	r0, r0
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	bf00      	nop
    3fc4:	2001888c 	.word	0x2001888c
    3fc8:	200188a8 	.word	0x200188a8
    3fcc:	20004a20 	.word	0x20004a20
    3fd0:	20017418 	.word	0x20017418

00003fd4 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    3fd4:	b510      	push	{r4, lr}
    3fd6:	4c0f      	ldr	r4, [pc, #60]	; (4014 <opcode_0xE0()+0x40>)
    3fd8:	2100      	movs	r1, #0
    3fda:	8820      	ldrh	r0, [r4, #0]
    3fdc:	3001      	adds	r0, #1
    3fde:	b280      	uxth	r0, r0
    3fe0:	f7fe fce8 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3fe4:	4b0c      	ldr	r3, [pc, #48]	; (4018 <opcode_0xE0()+0x44>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3fe6:	490d      	ldr	r1, [pc, #52]	; (401c <opcode_0xE0()+0x48>)
    temp = register_x - local_data;
    3fe8:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3fea:	780a      	ldrb	r2, [r1, #0]
    3fec:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3fee:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ff2:	bf94      	ite	ls
    3ff4:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3ff8:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3ffc:	b2c0      	uxtb	r0, r0
    3ffe:	700a      	strb	r2, [r1, #0]
    4000:	f7fe ff9c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    4004:	4a06      	ldr	r2, [pc, #24]	; (4020 <opcode_0xE0()+0x4c>)
    4006:	8823      	ldrh	r3, [r4, #0]
    4008:	f892 0db1 	ldrb.w	r0, [r2, #3505]	; 0xdb1
    400c:	4418      	add	r0, r3
} // 0xE0 - CPX - Immediate
    400e:	b280      	uxth	r0, r0
    4010:	bd10      	pop	{r4, pc}
    4012:	bf00      	nop
    4014:	2001888c 	.word	0x2001888c
    4018:	200188a9 	.word	0x200188a9
    401c:	20004a20 	.word	0x20004a20
    4020:	20017418 	.word	0x20017418

00004024 <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    4024:	b510      	push	{r4, lr}
    4026:	4c12      	ldr	r4, [pc, #72]	; (4070 <opcode_0xE4()+0x4c>)
    4028:	2100      	movs	r1, #0
    402a:	8820      	ldrh	r0, [r4, #0]
    402c:	3001      	adds	r0, #1
    402e:	b280      	uxth	r0, r0
    4030:	f7fe fcc0 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4034:	4b0f      	ldr	r3, [pc, #60]	; (4074 <opcode_0xE4()+0x50>)
    4036:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4038:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    403a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    403c:	f7fe fcba 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    4040:	4b0d      	ldr	r3, [pc, #52]	; (4078 <opcode_0xE4()+0x54>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4042:	490e      	ldr	r1, [pc, #56]	; (407c <opcode_0xE4()+0x58>)
    temp = register_x - local_data;
    4044:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4046:	780a      	ldrb	r2, [r1, #0]
    4048:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    404a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    404e:	bf2c      	ite	cs
    4050:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4054:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4058:	b2c0      	uxtb	r0, r0
    405a:	700a      	strb	r2, [r1, #0]
    405c:	f7fe ff6e 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    4060:	4a07      	ldr	r2, [pc, #28]	; (4080 <opcode_0xE4()+0x5c>)
    4062:	8823      	ldrh	r3, [r4, #0]
    4064:	f892 0e81 	ldrb.w	r0, [r2, #3713]	; 0xe81
    4068:	4418      	add	r0, r3
} // 0xE4 - CPX - ZeroPage
    406a:	b280      	uxth	r0, r0
    406c:	bd10      	pop	{r4, pc}
    406e:	bf00      	nop
    4070:	2001888c 	.word	0x2001888c
    4074:	2001888a 	.word	0x2001888a
    4078:	200188a9 	.word	0x200188a9
    407c:	20004a20 	.word	0x20004a20
    4080:	20017418 	.word	0x20017418

00004084 <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    4084:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    4086:	f7fe ffcd 	bl	3024 <Fetch_Absolute()>
    temp = register_x - local_data;
    408a:	4b0c      	ldr	r3, [pc, #48]	; (40bc <opcode_0xEC()+0x38>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    408c:	490c      	ldr	r1, [pc, #48]	; (40c0 <opcode_0xEC()+0x3c>)
    temp = register_x - local_data;
    408e:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4090:	780a      	ldrb	r2, [r1, #0]
    4092:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    4094:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4098:	bf94      	ite	ls
    409a:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    409e:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    40a2:	b2c0      	uxtb	r0, r0
    40a4:	700a      	strb	r2, [r1, #0]
    40a6:	f7fe ff49 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xEC].length);
    40aa:	4a06      	ldr	r2, [pc, #24]	; (40c4 <opcode_0xEC()+0x40>)
    40ac:	4b06      	ldr	r3, [pc, #24]	; (40c8 <opcode_0xEC()+0x44>)
    40ae:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
    40b2:	881b      	ldrh	r3, [r3, #0]
    40b4:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    40b6:	b280      	uxth	r0, r0
    40b8:	bd08      	pop	{r3, pc}
    40ba:	bf00      	nop
    40bc:	200188a9 	.word	0x200188a9
    40c0:	20004a20 	.word	0x20004a20
    40c4:	20018418 	.word	0x20018418
    40c8:	2001888c 	.word	0x2001888c

000040cc <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    40cc:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    40ce:	4c0f      	ldr	r4, [pc, #60]	; (410c <opcode_0xC0()+0x40>)
    40d0:	2100      	movs	r1, #0
    40d2:	8820      	ldrh	r0, [r4, #0]
    40d4:	3001      	adds	r0, #1
    40d6:	b280      	uxth	r0, r0
    40d8:	f7fe fc6c 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    40dc:	4b0c      	ldr	r3, [pc, #48]	; (4110 <opcode_0xC0()+0x44>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40de:	490d      	ldr	r1, [pc, #52]	; (4114 <opcode_0xC0()+0x48>)
    temp = register_y - local_data;
    40e0:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40e2:	780a      	ldrb	r2, [r1, #0]
    40e4:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    40e6:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40ea:	bf94      	ite	ls
    40ec:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    40f0:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    40f4:	b2c0      	uxtb	r0, r0
    40f6:	700a      	strb	r2, [r1, #0]
    40f8:	f7fe ff20 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    40fc:	4a06      	ldr	r2, [pc, #24]	; (4118 <opcode_0xC0()+0x4c>)
    40fe:	8823      	ldrh	r3, [r4, #0]
    4100:	f892 0731 	ldrb.w	r0, [r2, #1841]	; 0x731
    4104:	4418      	add	r0, r3
} // 0xC0 - CPY - Immediate
    4106:	b280      	uxth	r0, r0
    4108:	bd10      	pop	{r4, pc}
    410a:	bf00      	nop
    410c:	2001888c 	.word	0x2001888c
    4110:	200188aa 	.word	0x200188aa
    4114:	20004a20 	.word	0x20004a20
    4118:	20017418 	.word	0x20017418

0000411c <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    411c:	b510      	push	{r4, lr}
    411e:	4c12      	ldr	r4, [pc, #72]	; (4168 <opcode_0xC4()+0x4c>)
    4120:	2100      	movs	r1, #0
    4122:	8820      	ldrh	r0, [r4, #0]
    4124:	3001      	adds	r0, #1
    4126:	b280      	uxth	r0, r0
    4128:	f7fe fc44 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    412c:	4b0f      	ldr	r3, [pc, #60]	; (416c <opcode_0xC4()+0x50>)
    412e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4130:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4132:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4134:	f7fe fc3e 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    4138:	4b0d      	ldr	r3, [pc, #52]	; (4170 <opcode_0xC4()+0x54>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    413a:	490e      	ldr	r1, [pc, #56]	; (4174 <opcode_0xC4()+0x58>)
    temp = register_y - local_data;
    413c:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    413e:	780a      	ldrb	r2, [r1, #0]
    4140:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    4142:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4146:	bf2c      	ite	cs
    4148:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    414c:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4150:	b2c0      	uxtb	r0, r0
    4152:	700a      	strb	r2, [r1, #0]
    4154:	f7fe fef2 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    4158:	4a07      	ldr	r2, [pc, #28]	; (4178 <opcode_0xC4()+0x5c>)
    415a:	8823      	ldrh	r3, [r4, #0]
    415c:	f892 0801 	ldrb.w	r0, [r2, #2049]	; 0x801
    4160:	4418      	add	r0, r3
} // 0xC4 - CPY - ZeroPage
    4162:	b280      	uxth	r0, r0
    4164:	bd10      	pop	{r4, pc}
    4166:	bf00      	nop
    4168:	2001888c 	.word	0x2001888c
    416c:	2001888a 	.word	0x2001888a
    4170:	200188aa 	.word	0x200188aa
    4174:	20004a20 	.word	0x20004a20
    4178:	20017418 	.word	0x20017418

0000417c <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    417c:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    417e:	f7fe ff51 	bl	3024 <Fetch_Absolute()>
    temp = register_y - local_data;
    4182:	4b0c      	ldr	r3, [pc, #48]	; (41b4 <opcode_0xCC()+0x38>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4184:	490c      	ldr	r1, [pc, #48]	; (41b8 <opcode_0xCC()+0x3c>)
    temp = register_y - local_data;
    4186:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4188:	780a      	ldrb	r2, [r1, #0]
    418a:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    418c:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4190:	bf94      	ite	ls
    4192:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4196:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    419a:	b2c0      	uxtb	r0, r0
    419c:	700a      	strb	r2, [r1, #0]
    419e:	f7fe fecd 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCC].length);
    41a2:	4a06      	ldr	r2, [pc, #24]	; (41bc <opcode_0xCC()+0x40>)
    41a4:	4b06      	ldr	r3, [pc, #24]	; (41c0 <opcode_0xCC()+0x44>)
    41a6:	f892 09a1 	ldrb.w	r0, [r2, #2465]	; 0x9a1
    41aa:	881b      	ldrh	r3, [r3, #0]
    41ac:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    41ae:	b280      	uxth	r0, r0
    41b0:	bd08      	pop	{r3, pc}
    41b2:	bf00      	nop
    41b4:	200188aa 	.word	0x200188aa
    41b8:	20004a20 	.word	0x20004a20
    41bc:	20017418 	.word	0x20017418
    41c0:	2001888c 	.word	0x2001888c

000041c4 <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    41c4:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    41c6:	4d17      	ldr	r5, [pc, #92]	; (4224 <opcode_0x06()+0x60>)
    41c8:	b083      	sub	sp, #12
    41ca:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41cc:	4c16      	ldr	r4, [pc, #88]	; (4228 <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    41ce:	8828      	ldrh	r0, [r5, #0]
    41d0:	3001      	adds	r0, #1
    41d2:	b280      	uxth	r0, r0
    41d4:	f7fe fbee 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    41d8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41da:	b280      	uxth	r0, r0
    41dc:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    41de:	f7fe fbe9 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41e2:	4a12      	ldr	r2, [pc, #72]	; (422c <opcode_0x06()+0x68>)
    41e4:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    41e6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41ea:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    41ec:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41ee:	bf4c      	ite	mi
    41f0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    41f4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    41f8:	4608      	mov	r0, r1
    41fa:	9101      	str	r1, [sp, #4]
    41fc:	7013      	strb	r3, [r2, #0]
    41fe:	f7fe fe9d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4202:	9901      	ldr	r1, [sp, #4]
    4204:	8820      	ldrh	r0, [r4, #0]
    4206:	f7fe fd91 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    420a:	8820      	ldrh	r0, [r4, #0]
    420c:	9901      	ldr	r1, [sp, #4]
    420e:	f7fe fd8d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    4212:	4a07      	ldr	r2, [pc, #28]	; (4230 <opcode_0x06()+0x6c>)
    4214:	882b      	ldrh	r3, [r5, #0]
    4216:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    421a:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    421c:	b280      	uxth	r0, r0
    421e:	b003      	add	sp, #12
    4220:	bd30      	pop	{r4, r5, pc}
    4222:	bf00      	nop
    4224:	2001888c 	.word	0x2001888c
    4228:	2001888a 	.word	0x2001888a
    422c:	20004a20 	.word	0x20004a20
    4230:	20015418 	.word	0x20015418

00004234 <opcode_0x16()>:
uint16_t opcode_0x16() {
    4234:	b510      	push	{r4, lr}
    4236:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4238:	4c11      	ldr	r4, [pc, #68]	; (4280 <opcode_0x16()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    423a:	f7fe feb3 	bl	2fa4 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    423e:	4a11      	ldr	r2, [pc, #68]	; (4284 <opcode_0x16()+0x50>)
    4240:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4242:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4246:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4248:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    424a:	bf4c      	ite	mi
    424c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4250:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4254:	4608      	mov	r0, r1
    4256:	9101      	str	r1, [sp, #4]
    4258:	7013      	strb	r3, [r2, #0]
    425a:	f7fe fe6f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    425e:	8820      	ldrh	r0, [r4, #0]
    4260:	9901      	ldr	r1, [sp, #4]
    4262:	f7fe fd63 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4266:	8820      	ldrh	r0, [r4, #0]
    4268:	9901      	ldr	r1, [sp, #4]
    426a:	f7fe fd5f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    426e:	4a06      	ldr	r2, [pc, #24]	; (4288 <opcode_0x16()+0x54>)
    4270:	4b06      	ldr	r3, [pc, #24]	; (428c <opcode_0x16()+0x58>)
    4272:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    4276:	881b      	ldrh	r3, [r3, #0]
    4278:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    427a:	b280      	uxth	r0, r0
    427c:	b002      	add	sp, #8
    427e:	bd10      	pop	{r4, pc}
    4280:	2001888a 	.word	0x2001888a
    4284:	20004a20 	.word	0x20004a20
    4288:	20015418 	.word	0x20015418
    428c:	2001888c 	.word	0x2001888c

00004290 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    4290:	b510      	push	{r4, lr}
    4292:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4294:	4c11      	ldr	r4, [pc, #68]	; (42dc <opcode_0x0E()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    4296:	f7fe fec5 	bl	3024 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    429a:	4a11      	ldr	r2, [pc, #68]	; (42e0 <opcode_0x0E()+0x50>)
    429c:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    429e:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42a2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    42a4:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42a6:	bf4c      	ite	mi
    42a8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42ac:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    42b0:	4608      	mov	r0, r1
    42b2:	9101      	str	r1, [sp, #4]
    42b4:	7013      	strb	r3, [r2, #0]
    42b6:	f7fe fe41 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    42ba:	8820      	ldrh	r0, [r4, #0]
    42bc:	9901      	ldr	r1, [sp, #4]
    42be:	f7fe fd35 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    42c2:	8820      	ldrh	r0, [r4, #0]
    42c4:	9901      	ldr	r1, [sp, #4]
    42c6:	f7fe fd31 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    42ca:	4a06      	ldr	r2, [pc, #24]	; (42e4 <opcode_0x0E()+0x54>)
    42cc:	4b06      	ldr	r3, [pc, #24]	; (42e8 <opcode_0x0E()+0x58>)
    42ce:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    42d2:	881b      	ldrh	r3, [r3, #0]
    42d4:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    42d6:	b280      	uxth	r0, r0
    42d8:	b002      	add	sp, #8
    42da:	bd10      	pop	{r4, pc}
    42dc:	2001888a 	.word	0x2001888a
    42e0:	20004a20 	.word	0x20004a20
    42e4:	20015418 	.word	0x20015418
    42e8:	2001888c 	.word	0x2001888c

000042ec <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    42ec:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    42ee:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    42f0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    42f2:	f7fe feb3 	bl	305c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42f6:	4a11      	ldr	r2, [pc, #68]	; (433c <opcode_0x1E()+0x50>)
    42f8:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    42fa:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42fe:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4300:	b2c9      	uxtb	r1, r1
    write_byte(effective_address, local_data);
    4302:	4c0f      	ldr	r4, [pc, #60]	; (4340 <opcode_0x1E()+0x54>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4304:	bf4c      	ite	mi
    4306:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    430a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    430e:	4608      	mov	r0, r1
    4310:	9101      	str	r1, [sp, #4]
    4312:	7013      	strb	r3, [r2, #0]
    4314:	f7fe fe12 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4318:	8820      	ldrh	r0, [r4, #0]
    431a:	9901      	ldr	r1, [sp, #4]
    431c:	f7fe fd06 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4320:	8820      	ldrh	r0, [r4, #0]
    4322:	9901      	ldr	r1, [sp, #4]
    4324:	f7fe fd02 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    4328:	4a06      	ldr	r2, [pc, #24]	; (4344 <opcode_0x1E()+0x58>)
    432a:	4b07      	ldr	r3, [pc, #28]	; (4348 <opcode_0x1E()+0x5c>)
    432c:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    4330:	881b      	ldrh	r3, [r3, #0]
    4332:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    4334:	b280      	uxth	r0, r0
    4336:	b002      	add	sp, #8
    4338:	bd10      	pop	{r4, pc}
    433a:	bf00      	nop
    433c:	20004a20 	.word	0x20004a20
    4340:	2001888a 	.word	0x2001888a
    4344:	20015418 	.word	0x20015418
    4348:	2001888c 	.word	0x2001888c

0000434c <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    434c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    434e:	4e11      	ldr	r6, [pc, #68]	; (4394 <opcode_0xE6()+0x48>)
    4350:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4352:	4d11      	ldr	r5, [pc, #68]	; (4398 <opcode_0xE6()+0x4c>)
    return read_byte(register_pc+offset, false);
    4354:	8830      	ldrh	r0, [r6, #0]
    4356:	3001      	adds	r0, #1
    4358:	b280      	uxth	r0, r0
    435a:	f7fe fb2b 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    435e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4360:	b280      	uxth	r0, r0
    4362:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    4364:	f7fe fb26 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    4368:	3001      	adds	r0, #1
    global_temp = local_data;
    436a:	4b0c      	ldr	r3, [pc, #48]	; (439c <opcode_0xE6()+0x50>)
    local_data = local_data + 1;
    436c:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    436e:	4620      	mov	r0, r4
    global_temp = local_data;
    4370:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4372:	f7fe fde3 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4376:	4621      	mov	r1, r4
    4378:	8828      	ldrh	r0, [r5, #0]
    437a:	f7fe fcd7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    437e:	8828      	ldrh	r0, [r5, #0]
    4380:	4621      	mov	r1, r4
    4382:	f7fe fcd3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    4386:	4a06      	ldr	r2, [pc, #24]	; (43a0 <opcode_0xE6()+0x54>)
    4388:	8833      	ldrh	r3, [r6, #0]
    438a:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    438e:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    4390:	b280      	uxth	r0, r0
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	2001888c 	.word	0x2001888c
    4398:	2001888a 	.word	0x2001888a
    439c:	200188a4 	.word	0x200188a4
    43a0:	20017418 	.word	0x20017418

000043a4 <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    43a4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    43a6:	f7fe fdfd 	bl	2fa4 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    43aa:	3001      	adds	r0, #1
    global_temp = local_data;
    43ac:	4b0b      	ldr	r3, [pc, #44]	; (43dc <opcode_0xF6()+0x38>)
    local_data = local_data + 1;
    43ae:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    43b0:	4d0b      	ldr	r5, [pc, #44]	; (43e0 <opcode_0xF6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43b2:	4620      	mov	r0, r4
    global_temp = local_data;
    43b4:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43b6:	f7fe fdc1 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    43ba:	8828      	ldrh	r0, [r5, #0]
    43bc:	4621      	mov	r1, r4
    43be:	f7fe fcb5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43c2:	8828      	ldrh	r0, [r5, #0]
    43c4:	4621      	mov	r1, r4
    43c6:	f7fe fcb1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    43ca:	4a06      	ldr	r2, [pc, #24]	; (43e4 <opcode_0xF6()+0x40>)
    43cc:	4b06      	ldr	r3, [pc, #24]	; (43e8 <opcode_0xF6()+0x44>)
    43ce:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    43d2:	881b      	ldrh	r3, [r3, #0]
    43d4:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    43d6:	b280      	uxth	r0, r0
    43d8:	bd38      	pop	{r3, r4, r5, pc}
    43da:	bf00      	nop
    43dc:	200188a4 	.word	0x200188a4
    43e0:	2001888a 	.word	0x2001888a
    43e4:	20018418 	.word	0x20018418
    43e8:	2001888c 	.word	0x2001888c

000043ec <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    43ec:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    43ee:	f7fe fe19 	bl	3024 <Fetch_Absolute()>
    local_data = local_data + 1;
    43f2:	3001      	adds	r0, #1
    global_temp = local_data;
    43f4:	4b0b      	ldr	r3, [pc, #44]	; (4424 <opcode_0xEE()+0x38>)
    local_data = local_data + 1;
    43f6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    43f8:	4d0b      	ldr	r5, [pc, #44]	; (4428 <opcode_0xEE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43fa:	4620      	mov	r0, r4
    global_temp = local_data;
    43fc:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43fe:	f7fe fd9d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4402:	8828      	ldrh	r0, [r5, #0]
    4404:	4621      	mov	r1, r4
    4406:	f7fe fc91 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    440a:	8828      	ldrh	r0, [r5, #0]
    440c:	4621      	mov	r1, r4
    440e:	f7fe fc8d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    4412:	4a06      	ldr	r2, [pc, #24]	; (442c <opcode_0xEE()+0x40>)
    4414:	4b06      	ldr	r3, [pc, #24]	; (4430 <opcode_0xEE()+0x44>)
    4416:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    441a:	881b      	ldrh	r3, [r3, #0]
    441c:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    441e:	b280      	uxth	r0, r0
    4420:	bd38      	pop	{r3, r4, r5, pc}
    4422:	bf00      	nop
    4424:	200188a4 	.word	0x200188a4
    4428:	2001888a 	.word	0x2001888a
    442c:	20018418 	.word	0x20018418
    4430:	2001888c 	.word	0x2001888c

00004434 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    4434:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4436:	4e11      	ldr	r6, [pc, #68]	; (447c <opcode_0xC6()+0x48>)
    4438:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    443a:	4d11      	ldr	r5, [pc, #68]	; (4480 <opcode_0xC6()+0x4c>)
    return read_byte(register_pc+offset, false);
    443c:	8830      	ldrh	r0, [r6, #0]
    443e:	3001      	adds	r0, #1
    4440:	b280      	uxth	r0, r0
    4442:	f7fe fab7 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4446:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4448:	b280      	uxth	r0, r0
    444a:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    444c:	f7fe fab2 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    4450:	3801      	subs	r0, #1
    global_temp = local_data;
    4452:	4b0c      	ldr	r3, [pc, #48]	; (4484 <opcode_0xC6()+0x50>)
    local_data = local_data - 1;
    4454:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4456:	4620      	mov	r0, r4
    global_temp = local_data;
    4458:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    445a:	f7fe fd6f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    445e:	4621      	mov	r1, r4
    4460:	8828      	ldrh	r0, [r5, #0]
    4462:	f7fe fc63 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4466:	8828      	ldrh	r0, [r5, #0]
    4468:	4621      	mov	r1, r4
    446a:	f7fe fc5f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    446e:	4a06      	ldr	r2, [pc, #24]	; (4488 <opcode_0xC6()+0x54>)
    4470:	8833      	ldrh	r3, [r6, #0]
    4472:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    4476:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    4478:	b280      	uxth	r0, r0
    447a:	bd70      	pop	{r4, r5, r6, pc}
    447c:	2001888c 	.word	0x2001888c
    4480:	2001888a 	.word	0x2001888a
    4484:	200188a4 	.word	0x200188a4
    4488:	20017418 	.word	0x20017418

0000448c <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    448c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    448e:	f7fe fd89 	bl	2fa4 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    4492:	3801      	subs	r0, #1
    global_temp = local_data;
    4494:	4b0b      	ldr	r3, [pc, #44]	; (44c4 <opcode_0xD6()+0x38>)
    local_data = local_data - 1;
    4496:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    4498:	4d0b      	ldr	r5, [pc, #44]	; (44c8 <opcode_0xD6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    449a:	4620      	mov	r0, r4
    global_temp = local_data;
    449c:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    449e:	f7fe fd4d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    44a2:	8828      	ldrh	r0, [r5, #0]
    44a4:	4621      	mov	r1, r4
    44a6:	f7fe fc41 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44aa:	8828      	ldrh	r0, [r5, #0]
    44ac:	4621      	mov	r1, r4
    44ae:	f7fe fc3d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    44b2:	4a06      	ldr	r2, [pc, #24]	; (44cc <opcode_0xD6()+0x40>)
    44b4:	4b06      	ldr	r3, [pc, #24]	; (44d0 <opcode_0xD6()+0x44>)
    44b6:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    44ba:	881b      	ldrh	r3, [r3, #0]
    44bc:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    44be:	b280      	uxth	r0, r0
    44c0:	bd38      	pop	{r3, r4, r5, pc}
    44c2:	bf00      	nop
    44c4:	200188a4 	.word	0x200188a4
    44c8:	2001888a 	.word	0x2001888a
    44cc:	20017418 	.word	0x20017418
    44d0:	2001888c 	.word	0x2001888c

000044d4 <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    44d4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    44d6:	f7fe fda5 	bl	3024 <Fetch_Absolute()>
    local_data = local_data - 1;
    44da:	3801      	subs	r0, #1
    global_temp = local_data;
    44dc:	4b0b      	ldr	r3, [pc, #44]	; (450c <opcode_0xCE()+0x38>)
    local_data = local_data - 1;
    44de:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    44e0:	4d0b      	ldr	r5, [pc, #44]	; (4510 <opcode_0xCE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44e2:	4620      	mov	r0, r4
    global_temp = local_data;
    44e4:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44e6:	f7fe fd29 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    44ea:	8828      	ldrh	r0, [r5, #0]
    44ec:	4621      	mov	r1, r4
    44ee:	f7fe fc1d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44f2:	8828      	ldrh	r0, [r5, #0]
    44f4:	4621      	mov	r1, r4
    44f6:	f7fe fc19 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    44fa:	4a06      	ldr	r2, [pc, #24]	; (4514 <opcode_0xCE()+0x40>)
    44fc:	4b06      	ldr	r3, [pc, #24]	; (4518 <opcode_0xCE()+0x44>)
    44fe:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    4502:	881b      	ldrh	r3, [r3, #0]
    4504:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    4506:	b280      	uxth	r0, r0
    4508:	bd38      	pop	{r3, r4, r5, pc}
    450a:	bf00      	nop
    450c:	200188a4 	.word	0x200188a4
    4510:	2001888a 	.word	0x2001888a
    4514:	20017418 	.word	0x20017418
    4518:	2001888c 	.word	0x2001888c

0000451c <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    451c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    451e:	2000      	movs	r0, #0
    write_byte(effective_address, local_data);
    4520:	4d0c      	ldr	r5, [pc, #48]	; (4554 <opcode_0xDE()+0x38>)
    4522:	f7fe fd9b 	bl	305c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    4526:	3801      	subs	r0, #1
    global_temp = local_data;
    4528:	4b0b      	ldr	r3, [pc, #44]	; (4558 <opcode_0xDE()+0x3c>)
    local_data = local_data - 1;
    452a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    452c:	4620      	mov	r0, r4
    global_temp = local_data;
    452e:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4530:	f7fe fd04 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4534:	8828      	ldrh	r0, [r5, #0]
    4536:	4621      	mov	r1, r4
    4538:	f7fe fbf8 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    453c:	8828      	ldrh	r0, [r5, #0]
    453e:	4621      	mov	r1, r4
    4540:	f7fe fbf4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    4544:	4a05      	ldr	r2, [pc, #20]	; (455c <opcode_0xDE()+0x40>)
    4546:	4b06      	ldr	r3, [pc, #24]	; (4560 <opcode_0xDE()+0x44>)
    4548:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    454c:	881b      	ldrh	r3, [r3, #0]
    454e:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    4550:	b280      	uxth	r0, r0
    4552:	bd38      	pop	{r3, r4, r5, pc}
    4554:	2001888a 	.word	0x2001888a
    4558:	200188a4 	.word	0x200188a4
    455c:	20017418 	.word	0x20017418
    4560:	2001888c 	.word	0x2001888c

00004564 <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    4564:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4566:	4d16      	ldr	r5, [pc, #88]	; (45c0 <opcode_0x46()+0x5c>)
    4568:	b083      	sub	sp, #12
    456a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    456c:	4c15      	ldr	r4, [pc, #84]	; (45c4 <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    456e:	8828      	ldrh	r0, [r5, #0]
    4570:	3001      	adds	r0, #1
    4572:	b280      	uxth	r0, r0
    4574:	f7fe fa1e 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4578:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    457a:	b280      	uxth	r0, r0
    457c:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    457e:	f7fe fa19 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4582:	4a11      	ldr	r2, [pc, #68]	; (45c8 <opcode_0x46()+0x64>)
    4584:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4586:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    458a:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    458c:	4608      	mov	r0, r1
    458e:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4590:	bf4c      	ite	mi
    4592:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4596:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    459a:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    459c:	f7fe fcce 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    45a0:	9901      	ldr	r1, [sp, #4]
    45a2:	8820      	ldrh	r0, [r4, #0]
    45a4:	f7fe fbc2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45a8:	8820      	ldrh	r0, [r4, #0]
    45aa:	9901      	ldr	r1, [sp, #4]
    45ac:	f7fe fbbe 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    45b0:	4a06      	ldr	r2, [pc, #24]	; (45cc <opcode_0x46()+0x68>)
    45b2:	882b      	ldrh	r3, [r5, #0]
    45b4:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    45b8:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    45ba:	b280      	uxth	r0, r0
    45bc:	b003      	add	sp, #12
    45be:	bd30      	pop	{r4, r5, pc}
    45c0:	2001888c 	.word	0x2001888c
    45c4:	2001888a 	.word	0x2001888a
    45c8:	20004a20 	.word	0x20004a20
    45cc:	20015418 	.word	0x20015418

000045d0 <opcode_0x56()>:
uint16_t opcode_0x56() {
    45d0:	b510      	push	{r4, lr}
    45d2:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    45d4:	4c11      	ldr	r4, [pc, #68]	; (461c <opcode_0x56()+0x4c>)
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    45d6:	f7fe fce5 	bl	2fa4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45da:	4a11      	ldr	r2, [pc, #68]	; (4620 <opcode_0x56()+0x50>)
    45dc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    45de:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45e2:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45e4:	4608      	mov	r0, r1
    45e6:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45e8:	bf4c      	ite	mi
    45ea:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    45ee:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    45f2:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45f4:	f7fe fca2 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    45f8:	8820      	ldrh	r0, [r4, #0]
    45fa:	9901      	ldr	r1, [sp, #4]
    45fc:	f7fe fb96 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4600:	8820      	ldrh	r0, [r4, #0]
    4602:	9901      	ldr	r1, [sp, #4]
    4604:	f7fe fb92 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    4608:	4a06      	ldr	r2, [pc, #24]	; (4624 <opcode_0x56()+0x54>)
    460a:	4b07      	ldr	r3, [pc, #28]	; (4628 <opcode_0x56()+0x58>)
    460c:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    4610:	881b      	ldrh	r3, [r3, #0]
    4612:	4418      	add	r0, r3
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    4614:	b280      	uxth	r0, r0
    4616:	b002      	add	sp, #8
    4618:	bd10      	pop	{r4, pc}
    461a:	bf00      	nop
    461c:	2001888a 	.word	0x2001888a
    4620:	20004a20 	.word	0x20004a20
    4624:	20016418 	.word	0x20016418
    4628:	2001888c 	.word	0x2001888c

0000462c <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    462c:	b510      	push	{r4, lr}
    462e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4630:	4c10      	ldr	r4, [pc, #64]	; (4674 <opcode_0x4E()+0x48>)
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    4632:	f7fe fcf7 	bl	3024 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4636:	4a10      	ldr	r2, [pc, #64]	; (4678 <opcode_0x4E()+0x4c>)
    4638:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    463a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    463e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4640:	4608      	mov	r0, r1
    4642:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4644:	bf4c      	ite	mi
    4646:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    464a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    464e:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4650:	f7fe fc74 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4654:	8820      	ldrh	r0, [r4, #0]
    4656:	9901      	ldr	r1, [sp, #4]
    4658:	f7fe fb68 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    465c:	8820      	ldrh	r0, [r4, #0]
    465e:	9901      	ldr	r1, [sp, #4]
    4660:	f7fe fb64 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    4664:	4a05      	ldr	r2, [pc, #20]	; (467c <opcode_0x4E()+0x50>)
    4666:	4b06      	ldr	r3, [pc, #24]	; (4680 <opcode_0x4E()+0x54>)
    4668:	7a50      	ldrb	r0, [r2, #9]
    466a:	881b      	ldrh	r3, [r3, #0]
    466c:	4418      	add	r0, r3
} // 0x4E - LSR - Logical Shift Right - Absolute
    466e:	b280      	uxth	r0, r0
    4670:	b002      	add	sp, #8
    4672:	bd10      	pop	{r4, pc}
    4674:	2001888a 	.word	0x2001888a
    4678:	20004a20 	.word	0x20004a20
    467c:	20016418 	.word	0x20016418
    4680:	2001888c 	.word	0x2001888c

00004684 <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    4684:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4686:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    4688:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    468a:	f7fe fce7 	bl	305c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    468e:	4a10      	ldr	r2, [pc, #64]	; (46d0 <opcode_0x5E()+0x4c>)
    4690:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4692:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4696:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4698:	4c0e      	ldr	r4, [pc, #56]	; (46d4 <opcode_0x5E()+0x50>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    469a:	4608      	mov	r0, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    469c:	bf4c      	ite	mi
    469e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    46a2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46a6:	9101      	str	r1, [sp, #4]
    46a8:	7013      	strb	r3, [r2, #0]
    46aa:	f7fe fc47 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    46ae:	8820      	ldrh	r0, [r4, #0]
    46b0:	9901      	ldr	r1, [sp, #4]
    46b2:	f7fe fb3b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    46b6:	8820      	ldrh	r0, [r4, #0]
    46b8:	9901      	ldr	r1, [sp, #4]
    46ba:	f7fe fb37 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    46be:	4a06      	ldr	r2, [pc, #24]	; (46d8 <opcode_0x5E()+0x54>)
    46c0:	4b06      	ldr	r3, [pc, #24]	; (46dc <opcode_0x5E()+0x58>)
    46c2:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    46c6:	881b      	ldrh	r3, [r3, #0]
    46c8:	4418      	add	r0, r3
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    46ca:	b280      	uxth	r0, r0
    46cc:	b002      	add	sp, #8
    46ce:	bd10      	pop	{r4, pc}
    46d0:	20004a20 	.word	0x20004a20
    46d4:	2001888a 	.word	0x2001888a
    46d8:	20016418 	.word	0x20016418
    46dc:	2001888c 	.word	0x2001888c

000046e0 <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    46e0:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    46e2:	4d19      	ldr	r5, [pc, #100]	; (4748 <opcode_0x66()+0x68>)
    46e4:	b083      	sub	sp, #12
    46e6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    46e8:	4c18      	ldr	r4, [pc, #96]	; (474c <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    46ea:	8828      	ldrh	r0, [r5, #0]
    46ec:	3001      	adds	r0, #1
    46ee:	b280      	uxth	r0, r0
    46f0:	f7fe f960 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    46f4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    46f6:	b280      	uxth	r0, r0
    46f8:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    46fa:	f7fe f95b 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    46fe:	4a14      	ldr	r2, [pc, #80]	; (4750 <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4700:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4704:	7813      	ldrb	r3, [r2, #0]
    4706:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    470a:	bf14      	ite	ne
    470c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4710:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4714:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4716:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4718:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    471c:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    471e:	4608      	mov	r0, r1
    4720:	9101      	str	r1, [sp, #4]
    4722:	f7fe fc0b 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4726:	9901      	ldr	r1, [sp, #4]
    4728:	8820      	ldrh	r0, [r4, #0]
    472a:	f7fe faff 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    472e:	8820      	ldrh	r0, [r4, #0]
    4730:	9901      	ldr	r1, [sp, #4]
    4732:	f7fe fafb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    4736:	4a07      	ldr	r2, [pc, #28]	; (4754 <opcode_0x66()+0x74>)
    4738:	882b      	ldrh	r3, [r5, #0]
    473a:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    473e:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    4740:	b280      	uxth	r0, r0
    4742:	b003      	add	sp, #12
    4744:	bd30      	pop	{r4, r5, pc}
    4746:	bf00      	nop
    4748:	2001888c 	.word	0x2001888c
    474c:	2001888a 	.word	0x2001888a
    4750:	20004a20 	.word	0x20004a20
    4754:	20016418 	.word	0x20016418

00004758 <opcode_0x76()>:
uint16_t opcode_0x76() {
    4758:	b510      	push	{r4, lr}
    475a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    475c:	f7fe fc22 	bl	2fa4 <Fetch_ZeroPage_X()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4760:	4a12      	ldr	r2, [pc, #72]	; (47ac <opcode_0x76()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4762:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4764:	4c12      	ldr	r4, [pc, #72]	; (47b0 <opcode_0x76()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4766:	7813      	ldrb	r3, [r2, #0]
    4768:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    476c:	bf4c      	ite	mi
    476e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4772:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4776:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4778:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    477a:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    477e:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4780:	4608      	mov	r0, r1
    4782:	9101      	str	r1, [sp, #4]
    4784:	f7fe fbda 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4788:	8820      	ldrh	r0, [r4, #0]
    478a:	9901      	ldr	r1, [sp, #4]
    478c:	f7fe face 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4790:	8820      	ldrh	r0, [r4, #0]
    4792:	9901      	ldr	r1, [sp, #4]
    4794:	f7fe faca 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    4798:	4a06      	ldr	r2, [pc, #24]	; (47b4 <opcode_0x76()+0x5c>)
    479a:	4b07      	ldr	r3, [pc, #28]	; (47b8 <opcode_0x76()+0x60>)
    479c:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    47a0:	881b      	ldrh	r3, [r3, #0]
    47a2:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    47a4:	b280      	uxth	r0, r0
    47a6:	b002      	add	sp, #8
    47a8:	bd10      	pop	{r4, pc}
    47aa:	bf00      	nop
    47ac:	20004a20 	.word	0x20004a20
    47b0:	2001888a 	.word	0x2001888a
    47b4:	20016418 	.word	0x20016418
    47b8:	2001888c 	.word	0x2001888c

000047bc <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    47bc:	b510      	push	{r4, lr}
    47be:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    47c0:	f7fe fc30 	bl	3024 <Fetch_Absolute()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47c4:	4a12      	ldr	r2, [pc, #72]	; (4810 <opcode_0x6E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47c6:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    47c8:	4c12      	ldr	r4, [pc, #72]	; (4814 <opcode_0x6E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47ca:	7813      	ldrb	r3, [r2, #0]
    47cc:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47d0:	bf4c      	ite	mi
    47d2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47d6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47da:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47dc:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    47de:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    47e2:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    47e4:	4608      	mov	r0, r1
    47e6:	9101      	str	r1, [sp, #4]
    47e8:	f7fe fba8 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    47ec:	8820      	ldrh	r0, [r4, #0]
    47ee:	9901      	ldr	r1, [sp, #4]
    47f0:	f7fe fa9c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    47f4:	8820      	ldrh	r0, [r4, #0]
    47f6:	9901      	ldr	r1, [sp, #4]
    47f8:	f7fe fa98 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    47fc:	4a06      	ldr	r2, [pc, #24]	; (4818 <opcode_0x6E()+0x5c>)
    47fe:	4b07      	ldr	r3, [pc, #28]	; (481c <opcode_0x6E()+0x60>)
    4800:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    4804:	881b      	ldrh	r3, [r3, #0]
    4806:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    4808:	b280      	uxth	r0, r0
    480a:	b002      	add	sp, #8
    480c:	bd10      	pop	{r4, pc}
    480e:	bf00      	nop
    4810:	20004a20 	.word	0x20004a20
    4814:	2001888a 	.word	0x2001888a
    4818:	20016418 	.word	0x20016418
    481c:	2001888c 	.word	0x2001888c

00004820 <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    4820:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    4822:	2000      	movs	r0, #0
uint16_t opcode_0x7E() {
    4824:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    4826:	f7fe fc19 	bl	305c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    482a:	4a12      	ldr	r2, [pc, #72]	; (4874 <opcode_0x7E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    482c:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    482e:	4c12      	ldr	r4, [pc, #72]	; (4878 <opcode_0x7E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4830:	7813      	ldrb	r3, [r2, #0]
    4832:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4836:	bf4c      	ite	mi
    4838:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    483c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4840:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4842:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4844:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4848:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    484a:	4608      	mov	r0, r1
    484c:	9101      	str	r1, [sp, #4]
    484e:	f7fe fb75 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4852:	8820      	ldrh	r0, [r4, #0]
    4854:	9901      	ldr	r1, [sp, #4]
    4856:	f7fe fa69 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    485a:	8820      	ldrh	r0, [r4, #0]
    485c:	9901      	ldr	r1, [sp, #4]
    485e:	f7fe fa65 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    4862:	4a06      	ldr	r2, [pc, #24]	; (487c <opcode_0x7E()+0x5c>)
    4864:	4b06      	ldr	r3, [pc, #24]	; (4880 <opcode_0x7E()+0x60>)
    4866:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    486a:	881b      	ldrh	r3, [r3, #0]
    486c:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    486e:	b280      	uxth	r0, r0
    4870:	b002      	add	sp, #8
    4872:	bd10      	pop	{r4, pc}
    4874:	20004a20 	.word	0x20004a20
    4878:	2001888a 	.word	0x2001888a
    487c:	20016418 	.word	0x20016418
    4880:	2001888c 	.word	0x2001888c

00004884 <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    4884:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4886:	4d18      	ldr	r5, [pc, #96]	; (48e8 <opcode_0x26()+0x64>)
    4888:	b083      	sub	sp, #12
    488a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    488c:	4c17      	ldr	r4, [pc, #92]	; (48ec <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    488e:	8828      	ldrh	r0, [r5, #0]
    4890:	3001      	adds	r0, #1
    4892:	b280      	uxth	r0, r0
    4894:	f7fe f88e 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4898:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    489a:	b280      	uxth	r0, r0
    489c:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    489e:	f7fe f889 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    48a2:	4a13      	ldr	r2, [pc, #76]	; (48f0 <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    48a4:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    48a8:	7813      	ldrb	r3, [r2, #0]
    48aa:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    48ae:	bf14      	ite	ne
    48b0:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    48b4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    48b8:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    48bc:	7013      	strb	r3, [r2, #0]
    48be:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    48c0:	4608      	mov	r0, r1
    48c2:	9101      	str	r1, [sp, #4]
    48c4:	f7fe fb3a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    48c8:	9901      	ldr	r1, [sp, #4]
    48ca:	8820      	ldrh	r0, [r4, #0]
    48cc:	f7fe fa2e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    48d0:	8820      	ldrh	r0, [r4, #0]
    48d2:	9901      	ldr	r1, [sp, #4]
    48d4:	f7fe fa2a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    48d8:	4a06      	ldr	r2, [pc, #24]	; (48f4 <opcode_0x26()+0x70>)
    48da:	882b      	ldrh	r3, [r5, #0]
    48dc:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    48e0:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    48e2:	b280      	uxth	r0, r0
    48e4:	b003      	add	sp, #12
    48e6:	bd30      	pop	{r4, r5, pc}
    48e8:	2001888c 	.word	0x2001888c
    48ec:	2001888a 	.word	0x2001888a
    48f0:	20004a20 	.word	0x20004a20
    48f4:	20015418 	.word	0x20015418

000048f8 <opcode_0x36()>:
uint16_t opcode_0x36() {
    48f8:	b510      	push	{r4, lr}
    48fa:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    48fc:	f7fe fb52 	bl	2fa4 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4900:	4a11      	ldr	r2, [pc, #68]	; (4948 <opcode_0x36()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4902:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4904:	4c11      	ldr	r4, [pc, #68]	; (494c <opcode_0x36()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4906:	7813      	ldrb	r3, [r2, #0]
    4908:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    490c:	bf4c      	ite	mi
    490e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4912:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4916:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    491a:	7013      	strb	r3, [r2, #0]
    491c:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    491e:	4608      	mov	r0, r1
    4920:	9101      	str	r1, [sp, #4]
    4922:	f7fe fb0b 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4926:	8820      	ldrh	r0, [r4, #0]
    4928:	9901      	ldr	r1, [sp, #4]
    492a:	f7fe f9ff 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    492e:	8820      	ldrh	r0, [r4, #0]
    4930:	9901      	ldr	r1, [sp, #4]
    4932:	f7fe f9fb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    4936:	4a06      	ldr	r2, [pc, #24]	; (4950 <opcode_0x36()+0x58>)
    4938:	4b06      	ldr	r3, [pc, #24]	; (4954 <opcode_0x36()+0x5c>)
    493a:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    493e:	881b      	ldrh	r3, [r3, #0]
    4940:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    4942:	b280      	uxth	r0, r0
    4944:	b002      	add	sp, #8
    4946:	bd10      	pop	{r4, pc}
    4948:	20004a20 	.word	0x20004a20
    494c:	2001888a 	.word	0x2001888a
    4950:	20015418 	.word	0x20015418
    4954:	2001888c 	.word	0x2001888c

00004958 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    4958:	b510      	push	{r4, lr}
    495a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    495c:	f7fe fb62 	bl	3024 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4960:	4a11      	ldr	r2, [pc, #68]	; (49a8 <opcode_0x2E()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4962:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4964:	4c11      	ldr	r4, [pc, #68]	; (49ac <opcode_0x2E()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4966:	7813      	ldrb	r3, [r2, #0]
    4968:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    496c:	bf4c      	ite	mi
    496e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4972:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4976:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    497a:	7013      	strb	r3, [r2, #0]
    497c:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    497e:	4608      	mov	r0, r1
    4980:	9101      	str	r1, [sp, #4]
    4982:	f7fe fadb 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4986:	8820      	ldrh	r0, [r4, #0]
    4988:	9901      	ldr	r1, [sp, #4]
    498a:	f7fe f9cf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    498e:	8820      	ldrh	r0, [r4, #0]
    4990:	9901      	ldr	r1, [sp, #4]
    4992:	f7fe f9cb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    4996:	4a06      	ldr	r2, [pc, #24]	; (49b0 <opcode_0x2E()+0x58>)
    4998:	4b06      	ldr	r3, [pc, #24]	; (49b4 <opcode_0x2E()+0x5c>)
    499a:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    499e:	881b      	ldrh	r3, [r3, #0]
    49a0:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    49a2:	b280      	uxth	r0, r0
    49a4:	b002      	add	sp, #8
    49a6:	bd10      	pop	{r4, pc}
    49a8:	20004a20 	.word	0x20004a20
    49ac:	2001888a 	.word	0x2001888a
    49b0:	20015418 	.word	0x20015418
    49b4:	2001888c 	.word	0x2001888c

000049b8 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    49b8:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    49ba:	2000      	movs	r0, #0
uint16_t opcode_0x3E() {
    49bc:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    49be:	f7fe fb4d 	bl	305c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49c2:	4a12      	ldr	r2, [pc, #72]	; (4a0c <opcode_0x3E()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49c4:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    49c6:	4c12      	ldr	r4, [pc, #72]	; (4a10 <opcode_0x3E()+0x58>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49c8:	7813      	ldrb	r3, [r2, #0]
    49ca:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49ce:	bf4c      	ite	mi
    49d0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    49d4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    49d8:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    49dc:	7013      	strb	r3, [r2, #0]
    49de:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    49e0:	4608      	mov	r0, r1
    49e2:	9101      	str	r1, [sp, #4]
    49e4:	f7fe faaa 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    49e8:	8820      	ldrh	r0, [r4, #0]
    49ea:	9901      	ldr	r1, [sp, #4]
    49ec:	f7fe f99e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    49f0:	8820      	ldrh	r0, [r4, #0]
    49f2:	9901      	ldr	r1, [sp, #4]
    49f4:	f7fe f99a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    49f8:	4a06      	ldr	r2, [pc, #24]	; (4a14 <opcode_0x3E()+0x5c>)
    49fa:	4b07      	ldr	r3, [pc, #28]	; (4a18 <opcode_0x3E()+0x60>)
    49fc:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    4a00:	881b      	ldrh	r3, [r3, #0]
    4a02:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    4a04:	b280      	uxth	r0, r0
    4a06:	b002      	add	sp, #8
    4a08:	bd10      	pop	{r4, pc}
    4a0a:	bf00      	nop
    4a0c:	20004a20 	.word	0x20004a20
    4a10:	2001888a 	.word	0x2001888a
    4a14:	20015418 	.word	0x20015418
    4a18:	2001888c 	.word	0x2001888c

00004a1c <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    4a1c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4a1e:	4c52      	ldr	r4, [pc, #328]	; (4b68 <Branch_Taken()+0x14c>)
    4a20:	2100      	movs	r1, #0
    4a22:	8820      	ldrh	r0, [r4, #0]
    4a24:	3001      	adds	r0, #1
    4a26:	b280      	uxth	r0, r0
    4a28:	f7fd ffc4 	bl	29b4 <read_byte(unsigned short, bool)>

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    effective_address = (register_pc + 2) + effective_address;
    4a2c:	8821      	ldrh	r1, [r4, #0]
    if ((reg_data & 0x0080) == 0x0080) {
    4a2e:	0605      	lsls	r5, r0, #24
    effective_address = Sign_Extend16(Fetch_Immediate(1));
    4a30:	b283      	uxth	r3, r0
    effective_address = (register_pc + 2) + effective_address;
    4a32:	f101 0002 	add.w	r0, r1, #2
    4a36:	4d4d      	ldr	r5, [pc, #308]	; (4b6c <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    4a38:	bf48      	it	mi
    4a3a:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    4a3e:	b280      	uxth	r0, r0
    4a40:	4403      	add	r3, r0
    4a42:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4a44:	4059      	eors	r1, r3
    effective_address = (register_pc + 2) + effective_address;
    4a46:	802b      	strh	r3, [r5, #0]
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4a48:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    4a4c:	d006      	beq.n	4a5c <Branch_Taken()+0x40>
    return read_byte(register_pc+offset, false);
    4a4e:	2100      	movs	r1, #0
    4a50:	f7fd ffb0 	bl	29b4 <read_byte(unsigned short, bool)>
    4a54:	8820      	ldrh	r0, [r4, #0]
    4a56:	2100      	movs	r1, #0
    4a58:	3003      	adds	r0, #3
    4a5a:	b280      	uxth	r0, r0
    4a5c:	f7fd ffaa 	bl	29b4 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    4a60:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    4a62:	4a43      	ldr	r2, [pc, #268]	; (4b70 <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a68:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    4a6a:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a6c:	d376      	bcc.n	4b5c <Branch_Taken()+0x140>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4a6e:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    4a72:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4a76:	d305      	bcc.n	4a84 <Branch_Taken()+0x68>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4a78:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4a7c:	b292      	uxth	r2, r2
    4a7e:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    4a82:	d36b      	bcc.n	4b5c <Branch_Taken()+0x140>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a84:	4a3b      	ldr	r2, [pc, #236]	; (4b74 <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    4a86:	2000      	movs	r0, #0
    4a88:	493b      	ldr	r1, [pc, #236]	; (4b78 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a8a:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4a8c:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a8e:	2a01      	cmp	r2, #1
    4a90:	d005      	beq.n	4a9e <Branch_Taken()+0x82>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4a92:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4a96:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4a9a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    4a9e:	4a37      	ldr	r2, [pc, #220]	; (4b7c <Branch_Taken()+0x160>)
    4aa0:	7812      	ldrb	r2, [r2, #0]
    4aa2:	b94a      	cbnz	r2, 4ab8 <Branch_Taken()+0x9c>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4aa4:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4aa8:	680a      	ldr	r2, [r1, #0]
    4aaa:	04d0      	lsls	r0, r2, #19
    4aac:	d4fc      	bmi.n	4aa8 <Branch_Taken()+0x8c>
    while (CLK0) {}      // Wait for CLK0 to become low
    4aae:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4ab2:	680a      	ldr	r2, [r1, #0]
    4ab4:	04d2      	lsls	r2, r2, #19
    4ab6:	d5fc      	bpl.n	4ab2 <Branch_Taken()+0x96>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4ab8:	4e31      	ldr	r6, [pc, #196]	; (4b80 <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4aba:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    4abe:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4ac0:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4ac2:	06d8      	lsls	r0, r3, #27
    4ac4:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ac8:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4acc:	6829      	ldr	r1, [r5, #0]
    4ace:	4a2d      	ldr	r2, [pc, #180]	; (4b84 <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ad0:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ad4:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4ad6:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ad8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4adc:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ae0:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4ae2:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4ae6:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4aea:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4aec:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4af4:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4af6:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4af8:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4afa:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4afc:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b00:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b06:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b08:	491f      	ldr	r1, [pc, #124]	; (4b88 <Branch_Taken()+0x16c>)
    4b0a:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b0c:	4d1f      	ldr	r5, [pc, #124]	; (4b8c <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b0e:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4b10:	0559      	lsls	r1, r3, #21
    4b12:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    4b16:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4b18:	0359      	lsls	r1, r3, #13
    4b1a:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    4b1e:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b20:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b22:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b26:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b2a:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b2c:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b2e:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b30:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b34:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b3c:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b3e:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b40:	682c      	ldr	r4, [r5, #0]
    4b42:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b46:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b48:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b4a:	4911      	ldr	r1, [pc, #68]	; (4b90 <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b4c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b4e:	4a11      	ldr	r2, [pc, #68]	; (4b94 <Branch_Taken()+0x178>)
    4b50:	680c      	ldr	r4, [r1, #0]
    4b52:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b54:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4b56:	4303      	orrs	r3, r0
    4b58:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    4b5a:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b5c:	4a0e      	ldr	r2, [pc, #56]	; (4b98 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4b5e:	7812      	ldrb	r2, [r2, #0]
    4b60:	2a01      	cmp	r2, #1
    4b62:	d98f      	bls.n	4a84 <Branch_Taken()+0x68>
    4b64:	bd70      	pop	{r4, r5, r6, pc}
    4b66:	bf00      	nop
    4b68:	2001888c 	.word	0x2001888c
    4b6c:	2001888a 	.word	0x2001888a
    4b70:	20018888 	.word	0x20018888
    4b74:	200188ac 	.word	0x200188ac
    4b78:	200188a5 	.word	0x200188a5
    4b7c:	20004a1e 	.word	0x20004a1e
    4b80:	42004000 	.word	0x42004000
    4b84:	6dfffff3 	.word	0x6dfffff3
    4b88:	cff3efff 	.word	0xcff3efff
    4b8c:	42008000 	.word	0x42008000
    4b90:	4200c000 	.word	0x4200c000
    4b94:	7fffff6f 	.word	0x7fffff6f
    4b98:	2001889c 	.word	0x2001889c

00004b9c <opcode_0xF0()>:
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    4b9c:	4b0c      	ldr	r3, [pc, #48]	; (4bd0 <opcode_0xF0()+0x34>)
uint16_t opcode_0xF0() {
    4b9e:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	4c0c      	ldr	r4, [pc, #48]	; (4bd4 <opcode_0xF0()+0x38>)
    4ba4:	f3c3 0140 	ubfx	r1, r3, #1, #1
    4ba8:	079b      	lsls	r3, r3, #30
    4baa:	d503      	bpl.n	4bb4 <opcode_0xF0()+0x18>
    4bac:	f7ff ff36 	bl	4a1c <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xF0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    4bb0:	8820      	ldrh	r0, [r4, #0]
    4bb2:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xF0].length;
    4bb4:	4b08      	ldr	r3, [pc, #32]	; (4bd8 <opcode_0xF0()+0x3c>)
    4bb6:	8822      	ldrh	r2, [r4, #0]
    4bb8:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    4bbc:	4413      	add	r3, r2
    4bbe:	b29b      	uxth	r3, r3
    return read_byte(register_pc+offset, false);
    4bc0:	1c58      	adds	r0, r3, #1
    4bc2:	8023      	strh	r3, [r4, #0]
    4bc4:	b280      	uxth	r0, r0
    4bc6:	f7fd fef5 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0xF0 - BEQ - Branch on Zero Set
    4bca:	8820      	ldrh	r0, [r4, #0]
    4bcc:	bd10      	pop	{r4, pc}
    4bce:	bf00      	nop
    4bd0:	20004a20 	.word	0x20004a20
    4bd4:	2001888c 	.word	0x2001888c
    4bd8:	20018418 	.word	0x20018418

00004bdc <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    4bdc:	4b0b      	ldr	r3, [pc, #44]	; (4c0c <opcode_0xD0()+0x30>)
uint16_t opcode_0xD0() {
    4bde:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    4be0:	781b      	ldrb	r3, [r3, #0]
    4be2:	4c0b      	ldr	r4, [pc, #44]	; (4c10 <opcode_0xD0()+0x34>)
    4be4:	079b      	lsls	r3, r3, #30
    4be6:	d403      	bmi.n	4bf0 <opcode_0xD0()+0x14>
    4be8:	f7ff ff18 	bl	4a1c <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xD0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    4bec:	8820      	ldrh	r0, [r4, #0]
    4bee:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xD0].length;
    4bf0:	4b08      	ldr	r3, [pc, #32]	; (4c14 <opcode_0xD0()+0x38>)
    4bf2:	2100      	movs	r1, #0
    4bf4:	8822      	ldrh	r2, [r4, #0]
    4bf6:	f893 3a71 	ldrb.w	r3, [r3, #2673]	; 0xa71
    4bfa:	4413      	add	r3, r2
    4bfc:	b29b      	uxth	r3, r3
    4bfe:	1c58      	adds	r0, r3, #1
    4c00:	8023      	strh	r3, [r4, #0]
    4c02:	b280      	uxth	r0, r0
    4c04:	f7fd fed6 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0xD0 - BNE - Branch on Zero Clear
    4c08:	8820      	ldrh	r0, [r4, #0]
    4c0a:	bd10      	pop	{r4, pc}
    4c0c:	20004a20 	.word	0x20004a20
    4c10:	2001888c 	.word	0x2001888c
    4c14:	20017418 	.word	0x20017418

00004c18 <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    4c18:	4b0c      	ldr	r3, [pc, #48]	; (4c4c <opcode_0x70()+0x34>)
uint16_t opcode_0x70() {
    4c1a:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    4c1c:	781b      	ldrb	r3, [r3, #0]
    4c1e:	4c0c      	ldr	r4, [pc, #48]	; (4c50 <opcode_0x70()+0x38>)
    4c20:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4c24:	065b      	lsls	r3, r3, #25
    4c26:	d503      	bpl.n	4c30 <opcode_0x70()+0x18>
    4c28:	f7ff fef8 	bl	4a1c <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x70].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    4c2c:	8820      	ldrh	r0, [r4, #0]
    4c2e:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x70].length;
    4c30:	4b08      	ldr	r3, [pc, #32]	; (4c54 <opcode_0x70()+0x3c>)
    4c32:	8822      	ldrh	r2, [r4, #0]
    4c34:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
    4c38:	4413      	add	r3, r2
    4c3a:	b29b      	uxth	r3, r3
    4c3c:	1c58      	adds	r0, r3, #1
    4c3e:	8023      	strh	r3, [r4, #0]
    4c40:	b280      	uxth	r0, r0
    4c42:	f7fd feb7 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0x70 - BVS - Branch on Overflow Set
    4c46:	8820      	ldrh	r0, [r4, #0]
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	bf00      	nop
    4c4c:	20004a20 	.word	0x20004a20
    4c50:	2001888c 	.word	0x2001888c
    4c54:	20016418 	.word	0x20016418

00004c58 <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    4c58:	4b0b      	ldr	r3, [pc, #44]	; (4c88 <opcode_0x50()+0x30>)
uint16_t opcode_0x50() {
    4c5a:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    4c5c:	781b      	ldrb	r3, [r3, #0]
    4c5e:	4c0b      	ldr	r4, [pc, #44]	; (4c8c <opcode_0x50()+0x34>)
    4c60:	065b      	lsls	r3, r3, #25
    4c62:	d403      	bmi.n	4c6c <opcode_0x50()+0x14>
    4c64:	f7ff feda 	bl	4a1c <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x50].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    4c68:	8820      	ldrh	r0, [r4, #0]
    4c6a:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x50].length;
    4c6c:	4b08      	ldr	r3, [pc, #32]	; (4c90 <opcode_0x50()+0x38>)
    4c6e:	2100      	movs	r1, #0
    4c70:	8822      	ldrh	r2, [r4, #0]
    4c72:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    4c76:	4413      	add	r3, r2
    4c78:	b29b      	uxth	r3, r3
    4c7a:	1c58      	adds	r0, r3, #1
    4c7c:	8023      	strh	r3, [r4, #0]
    4c7e:	b280      	uxth	r0, r0
    4c80:	f7fd fe98 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0x50 - BVC - Branch on Overflow Clear
    4c84:	8820      	ldrh	r0, [r4, #0]
    4c86:	bd10      	pop	{r4, pc}
    4c88:	20004a20 	.word	0x20004a20
    4c8c:	2001888c 	.word	0x2001888c
    4c90:	20016418 	.word	0x20016418

00004c94 <opcode_0x4C()>:
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    4c94:	b570      	push	{r4, r5, r6, lr}
    4c96:	4d4b      	ldr	r5, [pc, #300]	; (4dc4 <opcode_0x4C()+0x130>)
    4c98:	2100      	movs	r1, #0
    4c9a:	8828      	ldrh	r0, [r5, #0]
    4c9c:	3001      	adds	r0, #1
    4c9e:	b280      	uxth	r0, r0
    4ca0:	f7fd fe88 	bl	29b4 <read_byte(unsigned short, bool)>
    4ca4:	882b      	ldrh	r3, [r5, #0]
    4ca6:	4604      	mov	r4, r0
    4ca8:	2100      	movs	r1, #0
    4caa:	1c98      	adds	r0, r3, #2
    4cac:	b280      	uxth	r0, r0
    4cae:	f7fd fe81 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    4cb2:	4a45      	ldr	r2, [pc, #276]	; (4dc8 <opcode_0x4C()+0x134>)
    4cb4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    4cb8:	4b44      	ldr	r3, [pc, #272]	; (4dcc <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    4cba:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4cbc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    4cc0:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    4cc2:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4cc4:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4cc6:	d378      	bcc.n	4dba <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4cc8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4cd0:	d305      	bcc.n	4cde <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4cd2:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4cd6:	b29b      	uxth	r3, r3
    4cd8:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4cdc:	d36d      	bcc.n	4dba <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cde:	4b3c      	ldr	r3, [pc, #240]	; (4dd0 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    4ce0:	2100      	movs	r1, #0
    4ce2:	4a3c      	ldr	r2, [pc, #240]	; (4dd4 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ce4:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4ce6:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ce8:	2b01      	cmp	r3, #1
    4cea:	d005      	beq.n	4cf8 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4cec:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4cf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4cf8:	4b37      	ldr	r3, [pc, #220]	; (4dd8 <opcode_0x4C()+0x144>)
    4cfa:	781b      	ldrb	r3, [r3, #0]
    4cfc:	b94b      	cbnz	r3, 4d12 <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4cfe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4d02:	6813      	ldr	r3, [r2, #0]
    4d04:	04d9      	lsls	r1, r3, #19
    4d06:	d4fc      	bmi.n	4d02 <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4d08:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4d0c:	6813      	ldr	r3, [r2, #0]
    4d0e:	04db      	lsls	r3, r3, #19
    4d10:	d5fc      	bpl.n	4d0c <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4d12:	4d32      	ldr	r5, [pc, #200]	; (4ddc <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d14:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4d18:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4d1a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4d1c:	06c1      	lsls	r1, r0, #27
    4d1e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d22:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d26:	6832      	ldr	r2, [r6, #0]
    4d28:	4b2d      	ldr	r3, [pc, #180]	; (4de0 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d2a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4d2e:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d32:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d34:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d36:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d3a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d3e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4d40:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4d44:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d48:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4d4a:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4d4e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d52:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d54:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d56:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d58:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d5a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d5e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d64:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d66:	4a1f      	ldr	r2, [pc, #124]	; (4de4 <opcode_0x4C()+0x150>)
    4d68:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d6a:	4e1f      	ldr	r6, [pc, #124]	; (4de8 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d6c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4d6e:	0542      	lsls	r2, r0, #21
    4d70:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4d74:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4d76:	0342      	lsls	r2, r0, #13
    4d78:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4d7c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d7e:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d80:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d88:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d8a:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d8c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d90:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4d94:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d96:	6832      	ldr	r2, [r6, #0]
    4d98:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d9c:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d9e:	4a13      	ldr	r2, [pc, #76]	; (4dec <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4da0:	ea43 030c 	orr.w	r3, r3, ip
    4da4:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4da6:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4da8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4dae:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4db0:	4323      	orrs	r3, r4
    4db2:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4db4:	430b      	orrs	r3, r1
    4db6:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    4db8:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4dba:	4b0d      	ldr	r3, [pc, #52]	; (4df0 <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4dbc:	781b      	ldrb	r3, [r3, #0]
    4dbe:	2b01      	cmp	r3, #1
    4dc0:	d98d      	bls.n	4cde <opcode_0x4C()+0x4a>
    4dc2:	bd70      	pop	{r4, r5, r6, pc}
    4dc4:	2001888c 	.word	0x2001888c
    4dc8:	2001888a 	.word	0x2001888a
    4dcc:	20018888 	.word	0x20018888
    4dd0:	200188ac 	.word	0x200188ac
    4dd4:	200188a5 	.word	0x200188a5
    4dd8:	20004a1e 	.word	0x20004a1e
    4ddc:	42004000 	.word	0x42004000
    4de0:	6dfffff3 	.word	0x6dfffff3
    4de4:	cff3efff 	.word	0xcff3efff
    4de8:	42008000 	.word	0x42008000
    4dec:	7fffff6f 	.word	0x7fffff6f
    4df0:	2001889c 	.word	0x2001889c

00004df4 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    4df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4df6:	4e52      	ldr	r6, [pc, #328]	; (4f40 <opcode_0x6C()+0x14c>)
    4df8:	2100      	movs	r1, #0
    4dfa:	8830      	ldrh	r0, [r6, #0]
    4dfc:	3001      	adds	r0, #1
    4dfe:	b280      	uxth	r0, r0
    4e00:	f7fd fdd8 	bl	29b4 <read_byte(unsigned short, bool)>
    4e04:	8833      	ldrh	r3, [r6, #0]
    4e06:	4604      	mov	r4, r0
    4e08:	2100      	movs	r1, #0
    4e0a:	1c98      	adds	r0, r3, #2
    4e0c:	b280      	uxth	r0, r0
    4e0e:	f7fd fdd1 	bl	29b4 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    4e12:	2100      	movs	r1, #0
    4e14:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4e18:	b284      	uxth	r4, r0
    4e1a:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    4e1c:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    4e1e:	f7fd fdc9 	bl	29b4 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    4e22:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    4e24:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    4e26:	b2a0      	uxth	r0, r4
    4e28:	f7fd fdc4 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    4e2c:	4945      	ldr	r1, [pc, #276]	; (4f44 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    4e2e:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    4e30:	4a45      	ldr	r2, [pc, #276]	; (4f48 <opcode_0x6C()+0x154>)
    4e32:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    4e34:	1943      	adds	r3, r0, r5
    4e36:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4e38:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    4e3a:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4e3c:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e3e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4e42:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    4e44:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e46:	d376      	bcc.n	4f36 <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4e48:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e50:	d305      	bcc.n	4e5e <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4e52:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4e56:	b29b      	uxth	r3, r3
    4e58:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4e5c:	d36b      	bcc.n	4f36 <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e5e:	4b3b      	ldr	r3, [pc, #236]	; (4f4c <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    4e60:	2100      	movs	r1, #0
    4e62:	4a3b      	ldr	r2, [pc, #236]	; (4f50 <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e64:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4e66:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e68:	2b01      	cmp	r3, #1
    4e6a:	d005      	beq.n	4e78 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4e6c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4e70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4e78:	4b36      	ldr	r3, [pc, #216]	; (4f54 <opcode_0x6C()+0x160>)
    4e7a:	781b      	ldrb	r3, [r3, #0]
    4e7c:	b94b      	cbnz	r3, 4e92 <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4e7e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e82:	6813      	ldr	r3, [r2, #0]
    4e84:	04d9      	lsls	r1, r3, #19
    4e86:	d4fc      	bmi.n	4e82 <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4e88:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e8c:	6813      	ldr	r3, [r2, #0]
    4e8e:	04db      	lsls	r3, r3, #19
    4e90:	d5fc      	bpl.n	4e8c <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4e92:	4d31      	ldr	r5, [pc, #196]	; (4f58 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e94:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4e98:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4e9a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4e9c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e9e:	4f2f      	ldr	r7, [pc, #188]	; (4f5c <opcode_0x6C()+0x168>)
    4ea0:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ea4:	4b2e      	ldr	r3, [pc, #184]	; (4f60 <opcode_0x6C()+0x16c>)
    4ea6:	6832      	ldr	r2, [r6, #0]
    4ea8:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4eaa:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4eac:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4eb0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4eb4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4eb6:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4eba:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ebe:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4ec0:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ec8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4eca:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ecc:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ece:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ed0:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ed4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4eda:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4edc:	4a21      	ldr	r2, [pc, #132]	; (4f64 <opcode_0x6C()+0x170>)
    4ede:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ee0:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ee2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4ee4:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ee6:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4eea:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4eee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4ef2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4ef4:	0342      	lsls	r2, r0, #13
    4ef6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4efa:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4efc:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4efe:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f06:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f08:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f0a:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f0e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4f12:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f14:	683a      	ldr	r2, [r7, #0]
    4f16:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f1a:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f1c:	4a12      	ldr	r2, [pc, #72]	; (4f68 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4f1e:	4333      	orrs	r3, r6
    4f20:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f22:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f24:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f2a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f2c:	4323      	orrs	r3, r4
    4f2e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4f30:	430b      	orrs	r3, r1
    4f32:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4f36:	4b0d      	ldr	r3, [pc, #52]	; (4f6c <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	2b01      	cmp	r3, #1
    4f3c:	d98f      	bls.n	4e5e <opcode_0x6C()+0x6a>
    4f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f40:	2001888c 	.word	0x2001888c
    4f44:	2001888a 	.word	0x2001888a
    4f48:	20018888 	.word	0x20018888
    4f4c:	200188ac 	.word	0x200188ac
    4f50:	200188a5 	.word	0x200188a5
    4f54:	20004a1e 	.word	0x20004a1e
    4f58:	42004000 	.word	0x42004000
    4f5c:	42008000 	.word	0x42008000
    4f60:	6dfffff3 	.word	0x6dfffff3
    4f64:	cff3efff 	.word	0xcff3efff
    4f68:	7fffff6f 	.word	0x7fffff6f
    4f6c:	2001889c 	.word	0x2001889c

00004f70 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    4f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4f72:	4d57      	ldr	r5, [pc, #348]	; (50d0 <opcode_0x20()+0x160>)
    4f74:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    4f76:	4c57      	ldr	r4, [pc, #348]	; (50d4 <opcode_0x20()+0x164>)
    4f78:	8828      	ldrh	r0, [r5, #0]
    4f7a:	3001      	adds	r0, #1
    4f7c:	b280      	uxth	r0, r0
    4f7e:	f7fd fd19 	bl	29b4 <read_byte(unsigned short, bool)>
    4f82:	882b      	ldrh	r3, [r5, #0]
    4f84:	4606      	mov	r6, r0
    4f86:	2100      	movs	r1, #0
    4f88:	1c98      	adds	r0, r3, #2
    4f8a:	b280      	uxth	r0, r0
    4f8c:	f7fd fd12 	bl	29b4 <read_byte(unsigned short, bool)>
    4f90:	7823      	ldrb	r3, [r4, #0]
    4f92:	4607      	mov	r7, r0
    4f94:	2100      	movs	r1, #0
    4f96:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    4f9a:	f7fd fd0b 	bl	29b4 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    4f9e:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    4fa0:	7820      	ldrb	r0, [r4, #0]
    4fa2:	0a09      	lsrs	r1, r1, #8
    4fa4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4fa8:	f7fd fec0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4fac:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4fae:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    4fb0:	3b01      	subs	r3, #1
    4fb2:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    4fb4:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    4fb8:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4fba:	f7fd feb7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4fbe:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    4fc0:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    4fc4:	4a44      	ldr	r2, [pc, #272]	; (50d8 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    4fc6:	3b01      	subs	r3, #1
    4fc8:	b280      	uxth	r0, r0
    4fca:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fcc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4fd0:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4fd2:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fd4:	d376      	bcc.n	50c4 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4fd6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4fde:	d305      	bcc.n	4fec <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4fe0:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4fe4:	b29b      	uxth	r3, r3
    4fe6:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4fea:	d36b      	bcc.n	50c4 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4fec:	4b3b      	ldr	r3, [pc, #236]	; (50dc <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    4fee:	2100      	movs	r1, #0
    4ff0:	4a3b      	ldr	r2, [pc, #236]	; (50e0 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ff2:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4ff4:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ff6:	2b01      	cmp	r3, #1
    4ff8:	d005      	beq.n	5006 <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4ffa:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4ffe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    5006:	4b37      	ldr	r3, [pc, #220]	; (50e4 <opcode_0x20()+0x174>)
    5008:	781b      	ldrb	r3, [r3, #0]
    500a:	b94b      	cbnz	r3, 5020 <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    500c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5010:	6813      	ldr	r3, [r2, #0]
    5012:	04d9      	lsls	r1, r3, #19
    5014:	d4fc      	bmi.n	5010 <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    5016:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    501a:	6813      	ldr	r3, [r2, #0]
    501c:	04db      	lsls	r3, r3, #19
    501e:	d5fc      	bpl.n	501a <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    5020:	4d31      	ldr	r5, [pc, #196]	; (50e8 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5022:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    5026:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    5028:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    502a:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    502c:	4f2f      	ldr	r7, [pc, #188]	; (50ec <opcode_0x20()+0x17c>)
    502e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5032:	4b2f      	ldr	r3, [pc, #188]	; (50f0 <opcode_0x20()+0x180>)
    5034:	6832      	ldr	r2, [r6, #0]
    5036:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5038:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    503a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    503e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5042:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    5044:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    5048:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    504c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    504e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5052:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5056:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5058:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    505a:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    505c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    505e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5062:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5068:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    506a:	4a22      	ldr	r2, [pc, #136]	; (50f4 <opcode_0x20()+0x184>)
    506c:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    506e:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5070:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5072:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5074:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5078:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    507c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    5080:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    5082:	0342      	lsls	r2, r0, #13
    5084:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5088:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    508a:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    508c:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5094:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5096:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5098:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    509c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    50a0:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50a2:	683a      	ldr	r2, [r7, #0]
    50a4:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    50a8:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50aa:	4a13      	ldr	r2, [pc, #76]	; (50f8 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    50ac:	4333      	orrs	r3, r6
    50ae:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50b0:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50b2:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50b8:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50ba:	4323      	orrs	r3, r4
    50bc:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    50be:	430b      	orrs	r3, r1
    50c0:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    50c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    50c4:	4b0d      	ldr	r3, [pc, #52]	; (50fc <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    50c6:	781b      	ldrb	r3, [r3, #0]
    50c8:	2b01      	cmp	r3, #1
    50ca:	d98f      	bls.n	4fec <opcode_0x20()+0x7c>
    50cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50ce:	bf00      	nop
    50d0:	2001888c 	.word	0x2001888c
    50d4:	20004a21 	.word	0x20004a21
    50d8:	20018888 	.word	0x20018888
    50dc:	200188ac 	.word	0x200188ac
    50e0:	200188a5 	.word	0x200188a5
    50e4:	20004a1e 	.word	0x20004a1e
    50e8:	42004000 	.word	0x42004000
    50ec:	42008000 	.word	0x42008000
    50f0:	6dfffff3 	.word	0x6dfffff3
    50f4:	cff3efff 	.word	0xcff3efff
    50f8:	7fffff6f 	.word	0x7fffff6f
    50fc:	2001889c 	.word	0x2001889c

00005100 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    5100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5102:	4d58      	ldr	r5, [pc, #352]	; (5264 <opcode_0x40()+0x164>)
    5104:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    5106:	4c58      	ldr	r4, [pc, #352]	; (5268 <opcode_0x40()+0x168>)
    5108:	8828      	ldrh	r0, [r5, #0]
    510a:	3001      	adds	r0, #1
    510c:	b280      	uxth	r0, r0
    510e:	f7fd fc51 	bl	29b4 <read_byte(unsigned short, bool)>
    5112:	7820      	ldrb	r0, [r4, #0]
    5114:	2100      	movs	r1, #0
    5116:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    511a:	f7fd fc4b 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    511e:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5120:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    5122:	3301      	adds	r3, #1
    5124:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    5126:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    512a:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    512c:	f7fd fc42 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5130:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    5132:	4a4e      	ldr	r2, [pc, #312]	; (526c <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    5134:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    5136:	3301      	adds	r3, #1
    5138:	7010      	strb	r0, [r2, #0]
    513a:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    513c:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    5140:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5142:	f7fd fc37 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5146:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5148:	4606      	mov	r6, r0
    514a:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    514c:	3301      	adds	r3, #1
    514e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    5150:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    5154:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5156:	f7fd fc2d 	bl	29b4 <read_byte(unsigned short, bool)>
    current_address = local_address;
    515a:	4b45      	ldr	r3, [pc, #276]	; (5270 <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    515c:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    5160:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5162:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    5166:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    5168:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    516a:	d376      	bcc.n	525a <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    516c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    5170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5174:	d305      	bcc.n	5182 <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    5176:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    517a:	b29b      	uxth	r3, r3
    517c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    5180:	d36b      	bcc.n	525a <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5182:	4b3c      	ldr	r3, [pc, #240]	; (5274 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    5184:	2100      	movs	r1, #0
    5186:	4a3c      	ldr	r2, [pc, #240]	; (5278 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5188:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    518a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    518c:	2b01      	cmp	r3, #1
    518e:	d005      	beq.n	519c <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5190:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5194:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    519c:	4b37      	ldr	r3, [pc, #220]	; (527c <opcode_0x40()+0x17c>)
    519e:	781b      	ldrb	r3, [r3, #0]
    51a0:	b94b      	cbnz	r3, 51b6 <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    51a2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    51a6:	6813      	ldr	r3, [r2, #0]
    51a8:	04d9      	lsls	r1, r3, #19
    51aa:	d4fc      	bmi.n	51a6 <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    51ac:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    51b0:	6813      	ldr	r3, [r2, #0]
    51b2:	04db      	lsls	r3, r3, #19
    51b4:	d5fc      	bpl.n	51b0 <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    51b6:	4d32      	ldr	r5, [pc, #200]	; (5280 <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51b8:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    51bc:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    51be:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    51c0:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51c2:	4f30      	ldr	r7, [pc, #192]	; (5284 <opcode_0x40()+0x184>)
    51c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51c8:	4b2f      	ldr	r3, [pc, #188]	; (5288 <opcode_0x40()+0x188>)
    51ca:	6832      	ldr	r2, [r6, #0]
    51cc:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    51ce:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51d0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    51d4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51d8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    51da:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    51de:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51e2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    51e4:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    51e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51ec:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    51ee:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51f0:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    51f2:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    51f4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51f8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    51fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    51fe:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5200:	4a22      	ldr	r2, [pc, #136]	; (528c <opcode_0x40()+0x18c>)
    5202:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5204:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5206:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5208:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    520a:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    520e:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5212:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    5216:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    5218:	0342      	lsls	r2, r0, #13
    521a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    521e:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5220:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5222:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    522a:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    522c:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    522e:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5232:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    5236:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5238:	683a      	ldr	r2, [r7, #0]
    523a:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    523e:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5240:	4a13      	ldr	r2, [pc, #76]	; (5290 <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5242:	4333      	orrs	r3, r6
    5244:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5246:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5248:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    524e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5250:	4323      	orrs	r3, r4
    5252:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5254:	430b      	orrs	r3, r1
    5256:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    5258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    525a:	4b0e      	ldr	r3, [pc, #56]	; (5294 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    525c:	781b      	ldrb	r3, [r3, #0]
    525e:	2b01      	cmp	r3, #1
    5260:	d98f      	bls.n	5182 <opcode_0x40()+0x82>
    5262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5264:	2001888c 	.word	0x2001888c
    5268:	20004a21 	.word	0x20004a21
    526c:	20004a20 	.word	0x20004a20
    5270:	20018888 	.word	0x20018888
    5274:	200188ac 	.word	0x200188ac
    5278:	200188a5 	.word	0x200188a5
    527c:	20004a1e 	.word	0x20004a1e
    5280:	42004000 	.word	0x42004000
    5284:	42008000 	.word	0x42008000
    5288:	6dfffff3 	.word	0x6dfffff3
    528c:	cff3efff 	.word	0xcff3efff
    5290:	7fffff6f 	.word	0x7fffff6f
    5294:	2001889c 	.word	0x2001889c

00005298 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    5298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    529a:	4d55      	ldr	r5, [pc, #340]	; (53f0 <opcode_0x60()+0x158>)
    529c:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    529e:	4e55      	ldr	r6, [pc, #340]	; (53f4 <opcode_0x60()+0x15c>)
    52a0:	8828      	ldrh	r0, [r5, #0]
    52a2:	3001      	adds	r0, #1
    52a4:	b280      	uxth	r0, r0
    52a6:	f7fd fb85 	bl	29b4 <read_byte(unsigned short, bool)>
    52aa:	7830      	ldrb	r0, [r6, #0]
    52ac:	2100      	movs	r1, #0
    52ae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    52b2:	f7fd fb7f 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    52b6:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52b8:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    52ba:	3301      	adds	r3, #1
    52bc:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    52be:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    52c2:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52c4:	f7fd fb76 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    52c8:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52ca:	4604      	mov	r4, r0
    52cc:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    52ce:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 3;
    52d0:	3403      	adds	r4, #3
    52d2:	b2c0      	uxtb	r0, r0
    52d4:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52d6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    52da:	f7fd fb6b 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    52de:	2100      	movs	r1, #0
    register_pc = pch + pcl + 3;
    52e0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    52e4:	b280      	uxth	r0, r0
    52e6:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    52e8:	f7fd fb64 	bl	29b4 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    52ec:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    52ee:	4b42      	ldr	r3, [pc, #264]	; (53f8 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    52f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    52f4:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    52f6:	d376      	bcc.n	53e6 <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    52f8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    52fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5300:	d305      	bcc.n	530e <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    5302:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    5306:	b29b      	uxth	r3, r3
    5308:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    530c:	d36b      	bcc.n	53e6 <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    530e:	4b3b      	ldr	r3, [pc, #236]	; (53fc <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    5310:	2100      	movs	r1, #0
    5312:	4a3b      	ldr	r2, [pc, #236]	; (5400 <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5314:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    5316:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5318:	2b01      	cmp	r3, #1
    531a:	d005      	beq.n	5328 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    531c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5320:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    5328:	4b36      	ldr	r3, [pc, #216]	; (5404 <opcode_0x60()+0x16c>)
    532a:	781b      	ldrb	r3, [r3, #0]
    532c:	b94b      	cbnz	r3, 5342 <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    532e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5332:	6813      	ldr	r3, [r2, #0]
    5334:	04d9      	lsls	r1, r3, #19
    5336:	d4fc      	bmi.n	5332 <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    5338:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    533c:	6813      	ldr	r3, [r2, #0]
    533e:	04db      	lsls	r3, r3, #19
    5340:	d5fc      	bpl.n	533c <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    5342:	4d31      	ldr	r5, [pc, #196]	; (5408 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5344:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    5348:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    534a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    534c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    534e:	4f2f      	ldr	r7, [pc, #188]	; (540c <opcode_0x60()+0x174>)
    5350:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5354:	4b2e      	ldr	r3, [pc, #184]	; (5410 <opcode_0x60()+0x178>)
    5356:	6832      	ldr	r2, [r6, #0]
    5358:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    535a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    535c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5360:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5364:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    5366:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    536a:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    536e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5370:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5378:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    537a:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    537c:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    537e:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5380:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5384:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    538a:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    538c:	4a21      	ldr	r2, [pc, #132]	; (5414 <opcode_0x60()+0x17c>)
    538e:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5390:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5392:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5394:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5396:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    539a:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    539e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    53a2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    53a4:	0342      	lsls	r2, r0, #13
    53a6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    53aa:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    53ac:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    53ae:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    53b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    53b6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53b8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53ba:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53be:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    53c2:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53c4:	683a      	ldr	r2, [r7, #0]
    53c6:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53ca:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53cc:	4a12      	ldr	r2, [pc, #72]	; (5418 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    53ce:	4333      	orrs	r3, r6
    53d0:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53d2:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53d4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53da:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53dc:	4323      	orrs	r3, r4
    53de:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    53e0:	430b      	orrs	r3, r1
    53e2:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    53e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    53e6:	4b0d      	ldr	r3, [pc, #52]	; (541c <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    53e8:	781b      	ldrb	r3, [r3, #0]
    53ea:	2b01      	cmp	r3, #1
    53ec:	d98f      	bls.n	530e <opcode_0x60()+0x76>
    53ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f0:	2001888c 	.word	0x2001888c
    53f4:	20004a21 	.word	0x20004a21
    53f8:	20018888 	.word	0x20018888
    53fc:	200188ac 	.word	0x200188ac
    5400:	200188a5 	.word	0x200188a5
    5404:	20004a1e 	.word	0x20004a1e
    5408:	42004000 	.word	0x42004000
    540c:	42008000 	.word	0x42008000
    5410:	6dfffff3 	.word	0x6dfffff3
    5414:	cff3efff 	.word	0xcff3efff
    5418:	7fffff6f 	.word	0x7fffff6f
    541c:	2001889c 	.word	0x2001889c

00005420 <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    5420:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5422:	4d18      	ldr	r5, [pc, #96]	; (5484 <opcode_0x07()+0x64>)
    5424:	b083      	sub	sp, #12
    5426:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5428:	4c17      	ldr	r4, [pc, #92]	; (5488 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    542a:	8828      	ldrh	r0, [r5, #0]
    542c:	3001      	adds	r0, #1
    542e:	b280      	uxth	r0, r0
    5430:	f7fd fac0 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5434:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5436:	b280      	uxth	r0, r0
    5438:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    543a:	f7fd fabb 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    543e:	4a13      	ldr	r2, [pc, #76]	; (548c <opcode_0x07()+0x6c>)
    5440:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5442:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5446:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5448:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    544a:	bf4c      	ite	mi
    544c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5450:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5454:	9101      	str	r1, [sp, #4]
    5456:	7013      	strb	r3, [r2, #0]
    5458:	4b0d      	ldr	r3, [pc, #52]	; (5490 <opcode_0x07()+0x70>)
    545a:	7818      	ldrb	r0, [r3, #0]
    545c:	4308      	orrs	r0, r1
    545e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5460:	f7fd fd6c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5464:	9901      	ldr	r1, [sp, #4]
    5466:	8820      	ldrh	r0, [r4, #0]
    5468:	f7fd fc60 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    546c:	8820      	ldrh	r0, [r4, #0]
    546e:	9901      	ldr	r1, [sp, #4]
    5470:	f7fd fc5c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    5474:	4a07      	ldr	r2, [pc, #28]	; (5494 <opcode_0x07()+0x74>)
    5476:	882b      	ldrh	r3, [r5, #0]
    5478:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    547c:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    547e:	b280      	uxth	r0, r0
    5480:	b003      	add	sp, #12
    5482:	bd30      	pop	{r4, r5, pc}
    5484:	2001888c 	.word	0x2001888c
    5488:	2001888a 	.word	0x2001888a
    548c:	20004a20 	.word	0x20004a20
    5490:	200188a8 	.word	0x200188a8
    5494:	20015418 	.word	0x20015418

00005498 <opcode_0x17()>:
uint16_t opcode_0x17() {
    5498:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    549a:	4c14      	ldr	r4, [pc, #80]	; (54ec <opcode_0x17()+0x54>)
uint16_t opcode_0x17() {
    549c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    549e:	f7fd fd81 	bl	2fa4 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54a2:	0602      	lsls	r2, r0, #24
    54a4:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    54a6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    54aa:	4a11      	ldr	r2, [pc, #68]	; (54f0 <opcode_0x17()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54ac:	bf4c      	ite	mi
    54ae:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    54b2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    54b6:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    54b8:	b2c9      	uxtb	r1, r1
    54ba:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    54bc:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    54be:	4c0d      	ldr	r4, [pc, #52]	; (54f4 <opcode_0x17()+0x5c>)
    54c0:	9101      	str	r1, [sp, #4]
    54c2:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    54c4:	f7fd fd3a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    54c8:	8820      	ldrh	r0, [r4, #0]
    54ca:	9901      	ldr	r1, [sp, #4]
    54cc:	f7fd fc2e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    54d0:	8820      	ldrh	r0, [r4, #0]
    54d2:	9901      	ldr	r1, [sp, #4]
    54d4:	f7fd fc2a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    54d8:	4a07      	ldr	r2, [pc, #28]	; (54f8 <opcode_0x17()+0x60>)
    54da:	4b08      	ldr	r3, [pc, #32]	; (54fc <opcode_0x17()+0x64>)
    54dc:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    54e0:	881b      	ldrh	r3, [r3, #0]
    54e2:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    54e4:	b280      	uxth	r0, r0
    54e6:	b002      	add	sp, #8
    54e8:	bd10      	pop	{r4, pc}
    54ea:	bf00      	nop
    54ec:	20004a20 	.word	0x20004a20
    54f0:	200188a8 	.word	0x200188a8
    54f4:	2001888a 	.word	0x2001888a
    54f8:	20015418 	.word	0x20015418
    54fc:	2001888c 	.word	0x2001888c

00005500 <opcode_0x03()>:
uint16_t opcode_0x03() {
    5500:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5502:	4c14      	ldr	r4, [pc, #80]	; (5554 <opcode_0x03()+0x54>)
uint16_t opcode_0x03() {
    5504:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    5506:	f7fd fe09 	bl	311c <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    550a:	0602      	lsls	r2, r0, #24
    550c:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    550e:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5512:	4a11      	ldr	r2, [pc, #68]	; (5558 <opcode_0x03()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5514:	bf4c      	ite	mi
    5516:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    551a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    551e:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5520:	b2c9      	uxtb	r1, r1
    5522:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5524:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5526:	4c0d      	ldr	r4, [pc, #52]	; (555c <opcode_0x03()+0x5c>)
    5528:	9101      	str	r1, [sp, #4]
    552a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    552c:	f7fd fd06 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5530:	8820      	ldrh	r0, [r4, #0]
    5532:	9901      	ldr	r1, [sp, #4]
    5534:	f7fd fbfa 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5538:	8820      	ldrh	r0, [r4, #0]
    553a:	9901      	ldr	r1, [sp, #4]
    553c:	f7fd fbf6 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    5540:	4a07      	ldr	r2, [pc, #28]	; (5560 <opcode_0x03()+0x60>)
    5542:	4b08      	ldr	r3, [pc, #32]	; (5564 <opcode_0x03()+0x64>)
    5544:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    5548:	881b      	ldrh	r3, [r3, #0]
    554a:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    554c:	b280      	uxth	r0, r0
    554e:	b002      	add	sp, #8
    5550:	bd10      	pop	{r4, pc}
    5552:	bf00      	nop
    5554:	20004a20 	.word	0x20004a20
    5558:	200188a8 	.word	0x200188a8
    555c:	2001888a 	.word	0x2001888a
    5560:	20015418 	.word	0x20015418
    5564:	2001888c 	.word	0x2001888c

00005568 <opcode_0x13()>:
uint16_t opcode_0x13() {
    5568:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    556a:	4c14      	ldr	r4, [pc, #80]	; (55bc <opcode_0x13()+0x54>)
uint16_t opcode_0x13() {
    556c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    556e:	2001      	movs	r0, #1
    5570:	f7fd fdfe 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5574:	7823      	ldrb	r3, [r4, #0]
    5576:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5578:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    557c:	4a10      	ldr	r2, [pc, #64]	; (55c0 <opcode_0x13()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    557e:	bf4c      	ite	mi
    5580:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5584:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5588:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    558a:	b2c9      	uxtb	r1, r1
    558c:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    558e:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5590:	4c0c      	ldr	r4, [pc, #48]	; (55c4 <opcode_0x13()+0x5c>)
    5592:	9101      	str	r1, [sp, #4]
    5594:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5596:	f7fd fcd1 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    559a:	8820      	ldrh	r0, [r4, #0]
    559c:	9901      	ldr	r1, [sp, #4]
    559e:	f7fd fbc5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55a2:	8820      	ldrh	r0, [r4, #0]
    55a4:	9901      	ldr	r1, [sp, #4]
    55a6:	f7fd fbc1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    55aa:	4a07      	ldr	r2, [pc, #28]	; (55c8 <opcode_0x13()+0x60>)
    55ac:	4b07      	ldr	r3, [pc, #28]	; (55cc <opcode_0x13()+0x64>)
    55ae:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    55b2:	881b      	ldrh	r3, [r3, #0]
    55b4:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    55b6:	b280      	uxth	r0, r0
    55b8:	b002      	add	sp, #8
    55ba:	bd10      	pop	{r4, pc}
    55bc:	20004a20 	.word	0x20004a20
    55c0:	200188a8 	.word	0x200188a8
    55c4:	2001888a 	.word	0x2001888a
    55c8:	20015418 	.word	0x20015418
    55cc:	2001888c 	.word	0x2001888c

000055d0 <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    55d0:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55d2:	4c14      	ldr	r4, [pc, #80]	; (5624 <opcode_0x0F()+0x54>)
uint16_t opcode_0x0F() {
    55d4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    55d6:	f7fd fd25 	bl	3024 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55da:	0602      	lsls	r2, r0, #24
    55dc:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    55de:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    55e2:	4a11      	ldr	r2, [pc, #68]	; (5628 <opcode_0x0F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55e4:	bf4c      	ite	mi
    55e6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    55ea:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    55ee:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    55f0:	b2c9      	uxtb	r1, r1
    55f2:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    55f4:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    55f6:	4c0d      	ldr	r4, [pc, #52]	; (562c <opcode_0x0F()+0x5c>)
    55f8:	9101      	str	r1, [sp, #4]
    55fa:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    55fc:	f7fd fc9e 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5600:	8820      	ldrh	r0, [r4, #0]
    5602:	9901      	ldr	r1, [sp, #4]
    5604:	f7fd fb92 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5608:	8820      	ldrh	r0, [r4, #0]
    560a:	9901      	ldr	r1, [sp, #4]
    560c:	f7fd fb8e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    5610:	4a07      	ldr	r2, [pc, #28]	; (5630 <opcode_0x0F()+0x60>)
    5612:	4b08      	ldr	r3, [pc, #32]	; (5634 <opcode_0x0F()+0x64>)
    5614:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    5618:	881b      	ldrh	r3, [r3, #0]
    561a:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    561c:	b280      	uxth	r0, r0
    561e:	b002      	add	sp, #8
    5620:	bd10      	pop	{r4, pc}
    5622:	bf00      	nop
    5624:	20004a20 	.word	0x20004a20
    5628:	200188a8 	.word	0x200188a8
    562c:	2001888a 	.word	0x2001888a
    5630:	20015418 	.word	0x20015418
    5634:	2001888c 	.word	0x2001888c

00005638 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    5638:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    563a:	4c14      	ldr	r4, [pc, #80]	; (568c <opcode_0x1F()+0x54>)
uint16_t opcode_0x1F() {
    563c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    563e:	2001      	movs	r0, #1
    5640:	f7fd fd0c 	bl	305c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5644:	7823      	ldrb	r3, [r4, #0]
    5646:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5648:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    564c:	4a10      	ldr	r2, [pc, #64]	; (5690 <opcode_0x1F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    564e:	bf4c      	ite	mi
    5650:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5654:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5658:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    565a:	b2c9      	uxtb	r1, r1
    565c:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    565e:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5660:	4c0c      	ldr	r4, [pc, #48]	; (5694 <opcode_0x1F()+0x5c>)
    5662:	9101      	str	r1, [sp, #4]
    5664:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5666:	f7fd fc69 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    566a:	8820      	ldrh	r0, [r4, #0]
    566c:	9901      	ldr	r1, [sp, #4]
    566e:	f7fd fb5d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5672:	8820      	ldrh	r0, [r4, #0]
    5674:	9901      	ldr	r1, [sp, #4]
    5676:	f7fd fb59 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    567a:	4a07      	ldr	r2, [pc, #28]	; (5698 <opcode_0x1F()+0x60>)
    567c:	4b07      	ldr	r3, [pc, #28]	; (569c <opcode_0x1F()+0x64>)
    567e:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    5682:	881b      	ldrh	r3, [r3, #0]
    5684:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    5686:	b280      	uxth	r0, r0
    5688:	b002      	add	sp, #8
    568a:	bd10      	pop	{r4, pc}
    568c:	20004a20 	.word	0x20004a20
    5690:	200188a8 	.word	0x200188a8
    5694:	2001888a 	.word	0x2001888a
    5698:	20015418 	.word	0x20015418
    569c:	2001888c 	.word	0x2001888c

000056a0 <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    56a0:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56a2:	4c14      	ldr	r4, [pc, #80]	; (56f4 <opcode_0x1B()+0x54>)
uint16_t opcode_0x1B() {
    56a4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    56a6:	2001      	movs	r0, #1
    56a8:	f7fd fd08 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56ac:	7823      	ldrb	r3, [r4, #0]
    56ae:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    56b0:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    56b4:	4a10      	ldr	r2, [pc, #64]	; (56f8 <opcode_0x1B()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56b6:	bf4c      	ite	mi
    56b8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    56bc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    56c0:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    56c2:	b2c9      	uxtb	r1, r1
    56c4:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    56c6:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    56c8:	4c0c      	ldr	r4, [pc, #48]	; (56fc <opcode_0x1B()+0x5c>)
    56ca:	9101      	str	r1, [sp, #4]
    56cc:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    56ce:	f7fd fc35 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    56d2:	8820      	ldrh	r0, [r4, #0]
    56d4:	9901      	ldr	r1, [sp, #4]
    56d6:	f7fd fb29 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    56da:	8820      	ldrh	r0, [r4, #0]
    56dc:	9901      	ldr	r1, [sp, #4]
    56de:	f7fd fb25 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    56e2:	4a07      	ldr	r2, [pc, #28]	; (5700 <opcode_0x1B()+0x60>)
    56e4:	4b07      	ldr	r3, [pc, #28]	; (5704 <opcode_0x1B()+0x64>)
    56e6:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    56ea:	881b      	ldrh	r3, [r3, #0]
    56ec:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    56ee:	b280      	uxth	r0, r0
    56f0:	b002      	add	sp, #8
    56f2:	bd10      	pop	{r4, pc}
    56f4:	20004a20 	.word	0x20004a20
    56f8:	200188a8 	.word	0x200188a8
    56fc:	2001888a 	.word	0x2001888a
    5700:	20015418 	.word	0x20015418
    5704:	2001888c 	.word	0x2001888c

00005708 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    5708:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    570a:	4d1a      	ldr	r5, [pc, #104]	; (5774 <opcode_0x27()+0x6c>)
    570c:	b083      	sub	sp, #12
    570e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5710:	4c19      	ldr	r4, [pc, #100]	; (5778 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    5712:	8828      	ldrh	r0, [r5, #0]
    5714:	3001      	adds	r0, #1
    5716:	b280      	uxth	r0, r0
    5718:	f7fd f94c 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    571c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    571e:	b280      	uxth	r0, r0
    5720:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5722:	f7fd f947 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5726:	4915      	ldr	r1, [pc, #84]	; (577c <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5728:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    572c:	780a      	ldrb	r2, [r1, #0]
    572e:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5732:	bf14      	ite	ne
    5734:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5738:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    573c:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5740:	4b0f      	ldr	r3, [pc, #60]	; (5780 <opcode_0x27()+0x78>)
    5742:	700a      	strb	r2, [r1, #0]
    5744:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5746:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5748:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    574a:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    574c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    574e:	f7fd fbf5 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5752:	9901      	ldr	r1, [sp, #4]
    5754:	8820      	ldrh	r0, [r4, #0]
    5756:	f7fd fae9 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    575a:	8820      	ldrh	r0, [r4, #0]
    575c:	9901      	ldr	r1, [sp, #4]
    575e:	f7fd fae5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    5762:	4a08      	ldr	r2, [pc, #32]	; (5784 <opcode_0x27()+0x7c>)
    5764:	882b      	ldrh	r3, [r5, #0]
    5766:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    576a:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    576c:	b280      	uxth	r0, r0
    576e:	b003      	add	sp, #12
    5770:	bd30      	pop	{r4, r5, pc}
    5772:	bf00      	nop
    5774:	2001888c 	.word	0x2001888c
    5778:	2001888a 	.word	0x2001888a
    577c:	20004a20 	.word	0x20004a20
    5780:	200188a8 	.word	0x200188a8
    5784:	20015418 	.word	0x20015418

00005788 <opcode_0x37()>:
uint16_t opcode_0x37() {
    5788:	b530      	push	{r4, r5, lr}
    578a:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    578c:	4d14      	ldr	r5, [pc, #80]	; (57e0 <opcode_0x37()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    578e:	f7fd fc09 	bl	2fa4 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5792:	4914      	ldr	r1, [pc, #80]	; (57e4 <opcode_0x37()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5794:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5796:	4c14      	ldr	r4, [pc, #80]	; (57e8 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5798:	780a      	ldrb	r2, [r1, #0]
    579a:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    579e:	bf4c      	ite	mi
    57a0:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    57a4:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    57a8:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    57ac:	782b      	ldrb	r3, [r5, #0]
    57ae:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    57b0:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    57b2:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    57b4:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    57b6:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    57b8:	f7fd fbc0 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    57bc:	8820      	ldrh	r0, [r4, #0]
    57be:	9901      	ldr	r1, [sp, #4]
    57c0:	f7fd fab4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    57c4:	8820      	ldrh	r0, [r4, #0]
    57c6:	9901      	ldr	r1, [sp, #4]
    57c8:	f7fd fab0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    57cc:	4a07      	ldr	r2, [pc, #28]	; (57ec <opcode_0x37()+0x64>)
    57ce:	4b08      	ldr	r3, [pc, #32]	; (57f0 <opcode_0x37()+0x68>)
    57d0:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    57d4:	881b      	ldrh	r3, [r3, #0]
    57d6:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    57d8:	b280      	uxth	r0, r0
    57da:	b003      	add	sp, #12
    57dc:	bd30      	pop	{r4, r5, pc}
    57de:	bf00      	nop
    57e0:	200188a8 	.word	0x200188a8
    57e4:	20004a20 	.word	0x20004a20
    57e8:	2001888a 	.word	0x2001888a
    57ec:	20015418 	.word	0x20015418
    57f0:	2001888c 	.word	0x2001888c

000057f4 <opcode_0x23()>:
uint16_t opcode_0x23() {
    57f4:	b530      	push	{r4, r5, lr}
    57f6:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    57f8:	4d14      	ldr	r5, [pc, #80]	; (584c <opcode_0x23()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    57fa:	f7fd fc8f 	bl	311c <Fetch_Indexed_Indirect_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    57fe:	4914      	ldr	r1, [pc, #80]	; (5850 <opcode_0x23()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5800:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5802:	4c14      	ldr	r4, [pc, #80]	; (5854 <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5804:	780a      	ldrb	r2, [r1, #0]
    5806:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    580a:	bf4c      	ite	mi
    580c:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5810:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5814:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5818:	782b      	ldrb	r3, [r5, #0]
    581a:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    581c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    581e:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5820:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5822:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5824:	f7fd fb8a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5828:	8820      	ldrh	r0, [r4, #0]
    582a:	9901      	ldr	r1, [sp, #4]
    582c:	f7fd fa7e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5830:	8820      	ldrh	r0, [r4, #0]
    5832:	9901      	ldr	r1, [sp, #4]
    5834:	f7fd fa7a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    5838:	4a07      	ldr	r2, [pc, #28]	; (5858 <opcode_0x23()+0x64>)
    583a:	4b08      	ldr	r3, [pc, #32]	; (585c <opcode_0x23()+0x68>)
    583c:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    5840:	881b      	ldrh	r3, [r3, #0]
    5842:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    5844:	b280      	uxth	r0, r0
    5846:	b003      	add	sp, #12
    5848:	bd30      	pop	{r4, r5, pc}
    584a:	bf00      	nop
    584c:	200188a8 	.word	0x200188a8
    5850:	20004a20 	.word	0x20004a20
    5854:	2001888a 	.word	0x2001888a
    5858:	20015418 	.word	0x20015418
    585c:	2001888c 	.word	0x2001888c

00005860 <opcode_0x33()>:
uint16_t opcode_0x33() {
    5860:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5862:	2001      	movs	r0, #1
uint16_t opcode_0x33() {
    5864:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5866:	f7fd fc83 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    586a:	4913      	ldr	r1, [pc, #76]	; (58b8 <opcode_0x33()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    586c:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    586e:	4d13      	ldr	r5, [pc, #76]	; (58bc <opcode_0x33()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5870:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5872:	4c13      	ldr	r4, [pc, #76]	; (58c0 <opcode_0x33()+0x60>)
    5874:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5878:	bf4c      	ite	mi
    587a:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    587e:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5882:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5886:	782b      	ldrb	r3, [r5, #0]
    5888:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    588a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    588c:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    588e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5890:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5892:	f7fd fb53 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5896:	8820      	ldrh	r0, [r4, #0]
    5898:	9901      	ldr	r1, [sp, #4]
    589a:	f7fd fa47 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    589e:	8820      	ldrh	r0, [r4, #0]
    58a0:	9901      	ldr	r1, [sp, #4]
    58a2:	f7fd fa43 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    58a6:	4a07      	ldr	r2, [pc, #28]	; (58c4 <opcode_0x33()+0x64>)
    58a8:	4b07      	ldr	r3, [pc, #28]	; (58c8 <opcode_0x33()+0x68>)
    58aa:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    58ae:	881b      	ldrh	r3, [r3, #0]
    58b0:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    58b2:	b280      	uxth	r0, r0
    58b4:	b003      	add	sp, #12
    58b6:	bd30      	pop	{r4, r5, pc}
    58b8:	20004a20 	.word	0x20004a20
    58bc:	200188a8 	.word	0x200188a8
    58c0:	2001888a 	.word	0x2001888a
    58c4:	20015418 	.word	0x20015418
    58c8:	2001888c 	.word	0x2001888c

000058cc <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    58cc:	b530      	push	{r4, r5, lr}
    58ce:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    58d0:	4d14      	ldr	r5, [pc, #80]	; (5924 <opcode_0x2F()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    58d2:	f7fd fba7 	bl	3024 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    58d6:	4914      	ldr	r1, [pc, #80]	; (5928 <opcode_0x2F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    58d8:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    58da:	4c14      	ldr	r4, [pc, #80]	; (592c <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    58dc:	780a      	ldrb	r2, [r1, #0]
    58de:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    58e2:	bf4c      	ite	mi
    58e4:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58e8:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    58ec:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    58f0:	782b      	ldrb	r3, [r5, #0]
    58f2:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    58f4:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    58f6:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    58f8:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    58fa:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    58fc:	f7fd fb1e 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5900:	8820      	ldrh	r0, [r4, #0]
    5902:	9901      	ldr	r1, [sp, #4]
    5904:	f7fd fa12 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5908:	8820      	ldrh	r0, [r4, #0]
    590a:	9901      	ldr	r1, [sp, #4]
    590c:	f7fd fa0e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    5910:	4a07      	ldr	r2, [pc, #28]	; (5930 <opcode_0x2F()+0x64>)
    5912:	4b08      	ldr	r3, [pc, #32]	; (5934 <opcode_0x2F()+0x68>)
    5914:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    5918:	881b      	ldrh	r3, [r3, #0]
    591a:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    591c:	b280      	uxth	r0, r0
    591e:	b003      	add	sp, #12
    5920:	bd30      	pop	{r4, r5, pc}
    5922:	bf00      	nop
    5924:	200188a8 	.word	0x200188a8
    5928:	20004a20 	.word	0x20004a20
    592c:	2001888a 	.word	0x2001888a
    5930:	20015418 	.word	0x20015418
    5934:	2001888c 	.word	0x2001888c

00005938 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    5938:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    593a:	2001      	movs	r0, #1
uint16_t opcode_0x3F() {
    593c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    593e:	f7fd fb8d 	bl	305c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5942:	4913      	ldr	r1, [pc, #76]	; (5990 <opcode_0x3F()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5944:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    5946:	4d13      	ldr	r5, [pc, #76]	; (5994 <opcode_0x3F()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5948:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    594a:	4c13      	ldr	r4, [pc, #76]	; (5998 <opcode_0x3F()+0x60>)
    594c:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5950:	bf4c      	ite	mi
    5952:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5956:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    595a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    595e:	782b      	ldrb	r3, [r5, #0]
    5960:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5962:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5964:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5966:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5968:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    596a:	f7fd fae7 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    596e:	8820      	ldrh	r0, [r4, #0]
    5970:	9901      	ldr	r1, [sp, #4]
    5972:	f7fd f9db 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5976:	8820      	ldrh	r0, [r4, #0]
    5978:	9901      	ldr	r1, [sp, #4]
    597a:	f7fd f9d7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    597e:	4a07      	ldr	r2, [pc, #28]	; (599c <opcode_0x3F()+0x64>)
    5980:	4b07      	ldr	r3, [pc, #28]	; (59a0 <opcode_0x3F()+0x68>)
    5982:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    5986:	881b      	ldrh	r3, [r3, #0]
    5988:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    598a:	b280      	uxth	r0, r0
    598c:	b003      	add	sp, #12
    598e:	bd30      	pop	{r4, r5, pc}
    5990:	20004a20 	.word	0x20004a20
    5994:	200188a8 	.word	0x200188a8
    5998:	2001888a 	.word	0x2001888a
    599c:	20015418 	.word	0x20015418
    59a0:	2001888c 	.word	0x2001888c

000059a4 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    59a4:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    59a6:	2001      	movs	r0, #1
uint16_t opcode_0x3B() {
    59a8:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    59aa:	f7fd fb87 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59ae:	4913      	ldr	r1, [pc, #76]	; (59fc <opcode_0x3B()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59b0:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    59b2:	4d13      	ldr	r5, [pc, #76]	; (5a00 <opcode_0x3B()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59b4:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    59b6:	4c13      	ldr	r4, [pc, #76]	; (5a04 <opcode_0x3B()+0x60>)
    59b8:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59bc:	bf4c      	ite	mi
    59be:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59c2:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    59c6:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    59ca:	782b      	ldrb	r3, [r5, #0]
    59cc:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    59ce:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    59d0:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    59d2:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    59d4:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    59d6:	f7fd fab1 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    59da:	8820      	ldrh	r0, [r4, #0]
    59dc:	9901      	ldr	r1, [sp, #4]
    59de:	f7fd f9a5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59e2:	8820      	ldrh	r0, [r4, #0]
    59e4:	9901      	ldr	r1, [sp, #4]
    59e6:	f7fd f9a1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    59ea:	4a07      	ldr	r2, [pc, #28]	; (5a08 <opcode_0x3B()+0x64>)
    59ec:	4b07      	ldr	r3, [pc, #28]	; (5a0c <opcode_0x3B()+0x68>)
    59ee:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    59f2:	881b      	ldrh	r3, [r3, #0]
    59f4:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    59f6:	b280      	uxth	r0, r0
    59f8:	b003      	add	sp, #12
    59fa:	bd30      	pop	{r4, r5, pc}
    59fc:	20004a20 	.word	0x20004a20
    5a00:	200188a8 	.word	0x200188a8
    5a04:	2001888a 	.word	0x2001888a
    5a08:	20015418 	.word	0x20015418
    5a0c:	2001888c 	.word	0x2001888c

00005a10 <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    5a10:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5a12:	4d18      	ldr	r5, [pc, #96]	; (5a74 <opcode_0x47()+0x64>)
    5a14:	b083      	sub	sp, #12
    5a16:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a18:	4c17      	ldr	r4, [pc, #92]	; (5a78 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    5a1a:	8828      	ldrh	r0, [r5, #0]
    5a1c:	3001      	adds	r0, #1
    5a1e:	b280      	uxth	r0, r0
    5a20:	f7fc ffc8 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5a24:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a26:	b280      	uxth	r0, r0
    5a28:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5a2a:	f7fc ffc3 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a2e:	4a13      	ldr	r2, [pc, #76]	; (5a7c <opcode_0x47()+0x6c>)
    5a30:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5a32:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a36:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5a38:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a3a:	bf4c      	ite	mi
    5a3c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a40:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5a44:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5a46:	4b0e      	ldr	r3, [pc, #56]	; (5a80 <opcode_0x47()+0x70>)
    5a48:	7818      	ldrb	r0, [r3, #0]
    5a4a:	4048      	eors	r0, r1
    5a4c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5a4e:	f7fd fa75 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5a52:	9901      	ldr	r1, [sp, #4]
    5a54:	8820      	ldrh	r0, [r4, #0]
    5a56:	f7fd f969 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a5a:	8820      	ldrh	r0, [r4, #0]
    5a5c:	9901      	ldr	r1, [sp, #4]
    5a5e:	f7fd f965 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    5a62:	4a08      	ldr	r2, [pc, #32]	; (5a84 <opcode_0x47()+0x74>)
    5a64:	882b      	ldrh	r3, [r5, #0]
    5a66:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    5a6a:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    5a6c:	b280      	uxth	r0, r0
    5a6e:	b003      	add	sp, #12
    5a70:	bd30      	pop	{r4, r5, pc}
    5a72:	bf00      	nop
    5a74:	2001888c 	.word	0x2001888c
    5a78:	2001888a 	.word	0x2001888a
    5a7c:	20004a20 	.word	0x20004a20
    5a80:	200188a8 	.word	0x200188a8
    5a84:	20015418 	.word	0x20015418

00005a88 <opcode_0x57()>:
uint16_t opcode_0x57() {
    5a88:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a8a:	4c13      	ldr	r4, [pc, #76]	; (5ad8 <opcode_0x57()+0x50>)
uint16_t opcode_0x57() {
    5a8c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    5a8e:	f7fd fa89 	bl	2fa4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a92:	07c2      	lsls	r2, r0, #31
    5a94:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5a96:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5a9a:	4a10      	ldr	r2, [pc, #64]	; (5adc <opcode_0x57()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a9c:	bf4c      	ite	mi
    5a9e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5aa2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5aa6:	7810      	ldrb	r0, [r2, #0]
    5aa8:	7023      	strb	r3, [r4, #0]
    5aaa:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5aac:	4c0c      	ldr	r4, [pc, #48]	; (5ae0 <opcode_0x57()+0x58>)
    5aae:	9101      	str	r1, [sp, #4]
    5ab0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5ab2:	f7fd fa43 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5ab6:	8820      	ldrh	r0, [r4, #0]
    5ab8:	9901      	ldr	r1, [sp, #4]
    5aba:	f7fd f937 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5abe:	8820      	ldrh	r0, [r4, #0]
    5ac0:	9901      	ldr	r1, [sp, #4]
    5ac2:	f7fd f933 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    5ac6:	4a07      	ldr	r2, [pc, #28]	; (5ae4 <opcode_0x57()+0x5c>)
    5ac8:	4b07      	ldr	r3, [pc, #28]	; (5ae8 <opcode_0x57()+0x60>)
    5aca:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    5ace:	881b      	ldrh	r3, [r3, #0]
    5ad0:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    5ad2:	b280      	uxth	r0, r0
    5ad4:	b002      	add	sp, #8
    5ad6:	bd10      	pop	{r4, pc}
    5ad8:	20004a20 	.word	0x20004a20
    5adc:	200188a8 	.word	0x200188a8
    5ae0:	2001888a 	.word	0x2001888a
    5ae4:	20016418 	.word	0x20016418
    5ae8:	2001888c 	.word	0x2001888c

00005aec <opcode_0x43()>:
uint16_t opcode_0x43() {
    5aec:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5aee:	4c13      	ldr	r4, [pc, #76]	; (5b3c <opcode_0x43()+0x50>)
uint16_t opcode_0x43() {
    5af0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    5af2:	f7fd fb13 	bl	311c <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5af6:	07c2      	lsls	r2, r0, #31
    5af8:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5afa:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5afe:	4a10      	ldr	r2, [pc, #64]	; (5b40 <opcode_0x43()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b00:	bf4c      	ite	mi
    5b02:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b06:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5b0a:	7810      	ldrb	r0, [r2, #0]
    5b0c:	7023      	strb	r3, [r4, #0]
    5b0e:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5b10:	4c0c      	ldr	r4, [pc, #48]	; (5b44 <opcode_0x43()+0x58>)
    5b12:	9101      	str	r1, [sp, #4]
    5b14:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5b16:	f7fd fa11 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b1a:	8820      	ldrh	r0, [r4, #0]
    5b1c:	9901      	ldr	r1, [sp, #4]
    5b1e:	f7fd f905 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b22:	8820      	ldrh	r0, [r4, #0]
    5b24:	9901      	ldr	r1, [sp, #4]
    5b26:	f7fd f901 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    5b2a:	4a07      	ldr	r2, [pc, #28]	; (5b48 <opcode_0x43()+0x5c>)
    5b2c:	4b07      	ldr	r3, [pc, #28]	; (5b4c <opcode_0x43()+0x60>)
    5b2e:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    5b32:	881b      	ldrh	r3, [r3, #0]
    5b34:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    5b36:	b280      	uxth	r0, r0
    5b38:	b002      	add	sp, #8
    5b3a:	bd10      	pop	{r4, pc}
    5b3c:	20004a20 	.word	0x20004a20
    5b40:	200188a8 	.word	0x200188a8
    5b44:	2001888a 	.word	0x2001888a
    5b48:	20015418 	.word	0x20015418
    5b4c:	2001888c 	.word	0x2001888c

00005b50 <opcode_0x53()>:
uint16_t opcode_0x53() {
    5b50:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b52:	4c14      	ldr	r4, [pc, #80]	; (5ba4 <opcode_0x53()+0x54>)
uint16_t opcode_0x53() {
    5b54:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    5b56:	2001      	movs	r0, #1
    5b58:	f7fd fb0a 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b5c:	7823      	ldrb	r3, [r4, #0]
    5b5e:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5b60:	4a11      	ldr	r2, [pc, #68]	; (5ba8 <opcode_0x53()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5b62:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b66:	bf4c      	ite	mi
    5b68:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b6c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5b70:	7810      	ldrb	r0, [r2, #0]
    5b72:	7023      	strb	r3, [r4, #0]
    5b74:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5b76:	4c0d      	ldr	r4, [pc, #52]	; (5bac <opcode_0x53()+0x5c>)
    5b78:	9101      	str	r1, [sp, #4]
    5b7a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5b7c:	f7fd f9de 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b80:	8820      	ldrh	r0, [r4, #0]
    5b82:	9901      	ldr	r1, [sp, #4]
    5b84:	f7fd f8d2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b88:	8820      	ldrh	r0, [r4, #0]
    5b8a:	9901      	ldr	r1, [sp, #4]
    5b8c:	f7fd f8ce 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    5b90:	4a07      	ldr	r2, [pc, #28]	; (5bb0 <opcode_0x53()+0x60>)
    5b92:	4b08      	ldr	r3, [pc, #32]	; (5bb4 <opcode_0x53()+0x64>)
    5b94:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    5b98:	881b      	ldrh	r3, [r3, #0]
    5b9a:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    5b9c:	b280      	uxth	r0, r0
    5b9e:	b002      	add	sp, #8
    5ba0:	bd10      	pop	{r4, pc}
    5ba2:	bf00      	nop
    5ba4:	20004a20 	.word	0x20004a20
    5ba8:	200188a8 	.word	0x200188a8
    5bac:	2001888a 	.word	0x2001888a
    5bb0:	20016418 	.word	0x20016418
    5bb4:	2001888c 	.word	0x2001888c

00005bb8 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    5bb8:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bba:	4c13      	ldr	r4, [pc, #76]	; (5c08 <opcode_0x4F()+0x50>)
uint16_t opcode_0x4F() {
    5bbc:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    5bbe:	f7fd fa31 	bl	3024 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bc2:	07c2      	lsls	r2, r0, #31
    5bc4:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5bc6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5bca:	4a10      	ldr	r2, [pc, #64]	; (5c0c <opcode_0x4F()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bcc:	bf4c      	ite	mi
    5bce:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5bd2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5bd6:	7810      	ldrb	r0, [r2, #0]
    5bd8:	7023      	strb	r3, [r4, #0]
    5bda:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5bdc:	4c0c      	ldr	r4, [pc, #48]	; (5c10 <opcode_0x4F()+0x58>)
    5bde:	9101      	str	r1, [sp, #4]
    5be0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5be2:	f7fd f9ab 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5be6:	8820      	ldrh	r0, [r4, #0]
    5be8:	9901      	ldr	r1, [sp, #4]
    5bea:	f7fd f89f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bee:	8820      	ldrh	r0, [r4, #0]
    5bf0:	9901      	ldr	r1, [sp, #4]
    5bf2:	f7fd f89b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    5bf6:	4a07      	ldr	r2, [pc, #28]	; (5c14 <opcode_0x4F()+0x5c>)
    5bf8:	4b07      	ldr	r3, [pc, #28]	; (5c18 <opcode_0x4F()+0x60>)
    5bfa:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    5bfe:	881b      	ldrh	r3, [r3, #0]
    5c00:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    5c02:	b280      	uxth	r0, r0
    5c04:	b002      	add	sp, #8
    5c06:	bd10      	pop	{r4, pc}
    5c08:	20004a20 	.word	0x20004a20
    5c0c:	200188a8 	.word	0x200188a8
    5c10:	2001888a 	.word	0x2001888a
    5c14:	20016418 	.word	0x20016418
    5c18:	2001888c 	.word	0x2001888c

00005c1c <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    5c1c:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c1e:	4c14      	ldr	r4, [pc, #80]	; (5c70 <opcode_0x5F()+0x54>)
uint16_t opcode_0x5F() {
    5c20:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    5c22:	2001      	movs	r0, #1
    5c24:	f7fd fa1a 	bl	305c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c28:	7823      	ldrb	r3, [r4, #0]
    5c2a:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5c2c:	4a11      	ldr	r2, [pc, #68]	; (5c74 <opcode_0x5F()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5c2e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c32:	bf4c      	ite	mi
    5c34:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c38:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5c3c:	7810      	ldrb	r0, [r2, #0]
    5c3e:	7023      	strb	r3, [r4, #0]
    5c40:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5c42:	4c0d      	ldr	r4, [pc, #52]	; (5c78 <opcode_0x5F()+0x5c>)
    5c44:	9101      	str	r1, [sp, #4]
    5c46:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5c48:	f7fd f978 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5c4c:	8820      	ldrh	r0, [r4, #0]
    5c4e:	9901      	ldr	r1, [sp, #4]
    5c50:	f7fd f86c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c54:	8820      	ldrh	r0, [r4, #0]
    5c56:	9901      	ldr	r1, [sp, #4]
    5c58:	f7fd f868 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    5c5c:	4a07      	ldr	r2, [pc, #28]	; (5c7c <opcode_0x5F()+0x60>)
    5c5e:	4b08      	ldr	r3, [pc, #32]	; (5c80 <opcode_0x5F()+0x64>)
    5c60:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    5c64:	881b      	ldrh	r3, [r3, #0]
    5c66:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    5c68:	b280      	uxth	r0, r0
    5c6a:	b002      	add	sp, #8
    5c6c:	bd10      	pop	{r4, pc}
    5c6e:	bf00      	nop
    5c70:	20004a20 	.word	0x20004a20
    5c74:	200188a8 	.word	0x200188a8
    5c78:	2001888a 	.word	0x2001888a
    5c7c:	20016418 	.word	0x20016418
    5c80:	2001888c 	.word	0x2001888c

00005c84 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    5c84:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c86:	4c14      	ldr	r4, [pc, #80]	; (5cd8 <opcode_0x5B()+0x54>)
uint16_t opcode_0x5B() {
    5c88:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    5c8a:	2001      	movs	r0, #1
    5c8c:	f7fd fa16 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c90:	7823      	ldrb	r3, [r4, #0]
    5c92:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5c94:	4a11      	ldr	r2, [pc, #68]	; (5cdc <opcode_0x5B()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5c96:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c9a:	bf4c      	ite	mi
    5c9c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ca0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5ca4:	7810      	ldrb	r0, [r2, #0]
    5ca6:	7023      	strb	r3, [r4, #0]
    5ca8:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5caa:	4c0d      	ldr	r4, [pc, #52]	; (5ce0 <opcode_0x5B()+0x5c>)
    5cac:	9101      	str	r1, [sp, #4]
    5cae:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5cb0:	f7fd f944 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5cb4:	8820      	ldrh	r0, [r4, #0]
    5cb6:	9901      	ldr	r1, [sp, #4]
    5cb8:	f7fd f838 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5cbc:	8820      	ldrh	r0, [r4, #0]
    5cbe:	9901      	ldr	r1, [sp, #4]
    5cc0:	f7fd f834 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    5cc4:	4a07      	ldr	r2, [pc, #28]	; (5ce4 <opcode_0x5B()+0x60>)
    5cc6:	4b08      	ldr	r3, [pc, #32]	; (5ce8 <opcode_0x5B()+0x64>)
    5cc8:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    5ccc:	881b      	ldrh	r3, [r3, #0]
    5cce:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    5cd0:	b280      	uxth	r0, r0
    5cd2:	b002      	add	sp, #8
    5cd4:	bd10      	pop	{r4, pc}
    5cd6:	bf00      	nop
    5cd8:	20004a20 	.word	0x20004a20
    5cdc:	200188a8 	.word	0x200188a8
    5ce0:	2001888a 	.word	0x2001888a
    5ce4:	20016418 	.word	0x20016418
    5ce8:	2001888c 	.word	0x2001888c

00005cec <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    5cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5cee:	4e16      	ldr	r6, [pc, #88]	; (5d48 <opcode_0x67()+0x5c>)
    5cf0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5cf2:	4d16      	ldr	r5, [pc, #88]	; (5d4c <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    5cf4:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    5cf6:	4f16      	ldr	r7, [pc, #88]	; (5d50 <opcode_0x67()+0x64>)
    5cf8:	3001      	adds	r0, #1
    5cfa:	b280      	uxth	r0, r0
    5cfc:	f7fc fe5a 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5d00:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d02:	b280      	uxth	r0, r0
    5d04:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5d06:	f7fc fe55 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d0a:	4a12      	ldr	r2, [pc, #72]	; (5d54 <opcode_0x67()+0x68>)
    5d0c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d0e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    5d12:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d14:	7813      	ldrb	r3, [r2, #0]
    5d16:	4621      	mov	r1, r4
    global_temp = local_data;
    5d18:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d1a:	bf4c      	ite	mi
    5d1c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d20:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5d24:	7013      	strb	r3, [r2, #0]
    5d26:	f7fd f801 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d2a:	4621      	mov	r1, r4
    5d2c:	8828      	ldrh	r0, [r5, #0]
    5d2e:	f7fc fffd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    5d32:	7838      	ldrb	r0, [r7, #0]
    5d34:	f7fd fed2 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    5d38:	4a07      	ldr	r2, [pc, #28]	; (5d58 <opcode_0x67()+0x6c>)
    5d3a:	8833      	ldrh	r3, [r6, #0]
    5d3c:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    5d40:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    5d42:	b280      	uxth	r0, r0
    5d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d46:	bf00      	nop
    5d48:	2001888c 	.word	0x2001888c
    5d4c:	2001888a 	.word	0x2001888a
    5d50:	200188a4 	.word	0x200188a4
    5d54:	20004a20 	.word	0x20004a20
    5d58:	20016418 	.word	0x20016418

00005d5c <opcode_0x77()>:
uint16_t opcode_0x77() {
    5d5c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    5d5e:	f7fd f921 	bl	2fa4 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d62:	4a10      	ldr	r2, [pc, #64]	; (5da4 <opcode_0x77()+0x48>)
    5d64:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d66:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d6a:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5d6c:	4e0e      	ldr	r6, [pc, #56]	; (5da8 <opcode_0x77()+0x4c>)
    5d6e:	4621      	mov	r1, r4
    5d70:	bf4c      	ite	mi
    5d72:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d76:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5d7a:	4d0c      	ldr	r5, [pc, #48]	; (5dac <opcode_0x77()+0x50>)
    5d7c:	8830      	ldrh	r0, [r6, #0]
    5d7e:	7013      	strb	r3, [r2, #0]
    5d80:	702c      	strb	r4, [r5, #0]
    5d82:	f7fc ffd3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d86:	4621      	mov	r1, r4
    5d88:	8830      	ldrh	r0, [r6, #0]
    5d8a:	f7fc ffcf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5d8e:	7828      	ldrb	r0, [r5, #0]
    5d90:	f7fd fea4 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    5d94:	4a06      	ldr	r2, [pc, #24]	; (5db0 <opcode_0x77()+0x54>)
    5d96:	4b07      	ldr	r3, [pc, #28]	; (5db4 <opcode_0x77()+0x58>)
    5d98:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    5d9c:	881b      	ldrh	r3, [r3, #0]
    5d9e:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    5da0:	b280      	uxth	r0, r0
    5da2:	bd70      	pop	{r4, r5, r6, pc}
    5da4:	20004a20 	.word	0x20004a20
    5da8:	2001888a 	.word	0x2001888a
    5dac:	200188a4 	.word	0x200188a4
    5db0:	20016418 	.word	0x20016418
    5db4:	2001888c 	.word	0x2001888c

00005db8 <opcode_0x63()>:
uint16_t opcode_0x63() {
    5db8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    5dba:	f7fd f9af 	bl	311c <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dbe:	4a10      	ldr	r2, [pc, #64]	; (5e00 <opcode_0x63()+0x48>)
    5dc0:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5dc2:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dc6:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5dc8:	4e0e      	ldr	r6, [pc, #56]	; (5e04 <opcode_0x63()+0x4c>)
    5dca:	4621      	mov	r1, r4
    5dcc:	bf4c      	ite	mi
    5dce:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5dd2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5dd6:	4d0c      	ldr	r5, [pc, #48]	; (5e08 <opcode_0x63()+0x50>)
    5dd8:	8830      	ldrh	r0, [r6, #0]
    5dda:	7013      	strb	r3, [r2, #0]
    5ddc:	702c      	strb	r4, [r5, #0]
    5dde:	f7fc ffa5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5de2:	4621      	mov	r1, r4
    5de4:	8830      	ldrh	r0, [r6, #0]
    5de6:	f7fc ffa1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5dea:	7828      	ldrb	r0, [r5, #0]
    5dec:	f7fd fe76 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    5df0:	4a06      	ldr	r2, [pc, #24]	; (5e0c <opcode_0x63()+0x54>)
    5df2:	4b07      	ldr	r3, [pc, #28]	; (5e10 <opcode_0x63()+0x58>)
    5df4:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    5df8:	881b      	ldrh	r3, [r3, #0]
    5dfa:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    5dfc:	b280      	uxth	r0, r0
    5dfe:	bd70      	pop	{r4, r5, r6, pc}
    5e00:	20004a20 	.word	0x20004a20
    5e04:	2001888a 	.word	0x2001888a
    5e08:	200188a4 	.word	0x200188a4
    5e0c:	20016418 	.word	0x20016418
    5e10:	2001888c 	.word	0x2001888c

00005e14 <opcode_0x73()>:
uint16_t opcode_0x73() {
    5e14:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    5e16:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5e18:	4e11      	ldr	r6, [pc, #68]	; (5e60 <opcode_0x73()+0x4c>)
    5e1a:	f7fd f9a9 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e1e:	4a11      	ldr	r2, [pc, #68]	; (5e64 <opcode_0x73()+0x50>)
    5e20:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e22:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e26:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5e28:	4d0f      	ldr	r5, [pc, #60]	; (5e68 <opcode_0x73()+0x54>)
    5e2a:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e2c:	bf4c      	ite	mi
    5e2e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e32:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5e36:	8830      	ldrh	r0, [r6, #0]
    5e38:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5e3a:	702c      	strb	r4, [r5, #0]
    5e3c:	f7fc ff76 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e40:	4621      	mov	r1, r4
    5e42:	8830      	ldrh	r0, [r6, #0]
    5e44:	f7fc ff72 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5e48:	7828      	ldrb	r0, [r5, #0]
    5e4a:	f7fd fe47 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    5e4e:	4a07      	ldr	r2, [pc, #28]	; (5e6c <opcode_0x73()+0x58>)
    5e50:	4b07      	ldr	r3, [pc, #28]	; (5e70 <opcode_0x73()+0x5c>)
    5e52:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    5e56:	881b      	ldrh	r3, [r3, #0]
    5e58:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    5e5a:	b280      	uxth	r0, r0
    5e5c:	bd70      	pop	{r4, r5, r6, pc}
    5e5e:	bf00      	nop
    5e60:	2001888a 	.word	0x2001888a
    5e64:	20004a20 	.word	0x20004a20
    5e68:	200188a4 	.word	0x200188a4
    5e6c:	20016418 	.word	0x20016418
    5e70:	2001888c 	.word	0x2001888c

00005e74 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    5e74:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    5e76:	f7fd f8d5 	bl	3024 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e7a:	4a10      	ldr	r2, [pc, #64]	; (5ebc <opcode_0x6F()+0x48>)
    5e7c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e7e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e82:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5e84:	4e0e      	ldr	r6, [pc, #56]	; (5ec0 <opcode_0x6F()+0x4c>)
    5e86:	4621      	mov	r1, r4
    5e88:	bf4c      	ite	mi
    5e8a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e8e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5e92:	4d0c      	ldr	r5, [pc, #48]	; (5ec4 <opcode_0x6F()+0x50>)
    5e94:	8830      	ldrh	r0, [r6, #0]
    5e96:	7013      	strb	r3, [r2, #0]
    5e98:	702c      	strb	r4, [r5, #0]
    5e9a:	f7fc ff47 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e9e:	4621      	mov	r1, r4
    5ea0:	8830      	ldrh	r0, [r6, #0]
    5ea2:	f7fc ff43 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5ea6:	7828      	ldrb	r0, [r5, #0]
    5ea8:	f7fd fe18 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    5eac:	4a06      	ldr	r2, [pc, #24]	; (5ec8 <opcode_0x6F()+0x54>)
    5eae:	4b07      	ldr	r3, [pc, #28]	; (5ecc <opcode_0x6F()+0x58>)
    5eb0:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    5eb4:	881b      	ldrh	r3, [r3, #0]
    5eb6:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    5eb8:	b280      	uxth	r0, r0
    5eba:	bd70      	pop	{r4, r5, r6, pc}
    5ebc:	20004a20 	.word	0x20004a20
    5ec0:	2001888a 	.word	0x2001888a
    5ec4:	200188a4 	.word	0x200188a4
    5ec8:	20016418 	.word	0x20016418
    5ecc:	2001888c 	.word	0x2001888c

00005ed0 <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    5ed0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    5ed2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5ed4:	4e11      	ldr	r6, [pc, #68]	; (5f1c <opcode_0x7F()+0x4c>)
    5ed6:	f7fd f8c1 	bl	305c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5eda:	4a11      	ldr	r2, [pc, #68]	; (5f20 <opcode_0x7F()+0x50>)
    5edc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5ede:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ee2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5ee4:	4d0f      	ldr	r5, [pc, #60]	; (5f24 <opcode_0x7F()+0x54>)
    5ee6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ee8:	bf4c      	ite	mi
    5eea:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5eee:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5ef2:	8830      	ldrh	r0, [r6, #0]
    5ef4:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5ef6:	702c      	strb	r4, [r5, #0]
    5ef8:	f7fc ff18 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5efc:	4621      	mov	r1, r4
    5efe:	8830      	ldrh	r0, [r6, #0]
    5f00:	f7fc ff14 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5f04:	7828      	ldrb	r0, [r5, #0]
    5f06:	f7fd fde9 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    5f0a:	4a07      	ldr	r2, [pc, #28]	; (5f28 <opcode_0x7F()+0x58>)
    5f0c:	4b07      	ldr	r3, [pc, #28]	; (5f2c <opcode_0x7F()+0x5c>)
    5f0e:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    5f12:	881b      	ldrh	r3, [r3, #0]
    5f14:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    5f16:	b280      	uxth	r0, r0
    5f18:	bd70      	pop	{r4, r5, r6, pc}
    5f1a:	bf00      	nop
    5f1c:	2001888a 	.word	0x2001888a
    5f20:	20004a20 	.word	0x20004a20
    5f24:	200188a4 	.word	0x200188a4
    5f28:	20016418 	.word	0x20016418
    5f2c:	2001888c 	.word	0x2001888c

00005f30 <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    5f30:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    5f32:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5f34:	4e11      	ldr	r6, [pc, #68]	; (5f7c <opcode_0x7B()+0x4c>)
    5f36:	f7fd f8c1 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f3a:	4a11      	ldr	r2, [pc, #68]	; (5f80 <opcode_0x7B()+0x50>)
    5f3c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5f3e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f42:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5f44:	4d0f      	ldr	r5, [pc, #60]	; (5f84 <opcode_0x7B()+0x54>)
    5f46:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f48:	bf4c      	ite	mi
    5f4a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f4e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5f52:	8830      	ldrh	r0, [r6, #0]
    5f54:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5f56:	702c      	strb	r4, [r5, #0]
    5f58:	f7fc fee8 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f5c:	4621      	mov	r1, r4
    5f5e:	8830      	ldrh	r0, [r6, #0]
    5f60:	f7fc fee4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5f64:	7828      	ldrb	r0, [r5, #0]
    5f66:	f7fd fdb9 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    5f6a:	4a07      	ldr	r2, [pc, #28]	; (5f88 <opcode_0x7B()+0x58>)
    5f6c:	4b07      	ldr	r3, [pc, #28]	; (5f8c <opcode_0x7B()+0x5c>)
    5f6e:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    5f72:	881b      	ldrh	r3, [r3, #0]
    5f74:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    5f76:	b280      	uxth	r0, r0
    5f78:	bd70      	pop	{r4, r5, r6, pc}
    5f7a:	bf00      	nop
    5f7c:	2001888a 	.word	0x2001888a
    5f80:	20004a20 	.word	0x20004a20
    5f84:	200188a4 	.word	0x200188a4
    5f88:	20016418 	.word	0x20016418
    5f8c:	2001888c 	.word	0x2001888c

00005f90 <opcode_0xC7()>:
} // 0xBF - LAX - Absolute , Y

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    5f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5f92:	4d1a      	ldr	r5, [pc, #104]	; (5ffc <opcode_0xC7()+0x6c>)
    5f94:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5f96:	4e1a      	ldr	r6, [pc, #104]	; (6000 <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    5f98:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    5f9a:	4f1a      	ldr	r7, [pc, #104]	; (6004 <opcode_0xC7()+0x74>)
    5f9c:	3001      	adds	r0, #1
    5f9e:	b280      	uxth	r0, r0
    5fa0:	f7fc fd08 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5fa4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5fa6:	b280      	uxth	r0, r0
    5fa8:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    5faa:	f7fc fd03 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5fae:	3801      	subs	r0, #1
    5fb0:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fb2:	4620      	mov	r0, r4
    global_temp = local_data;
    5fb4:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fb6:	f7fc ffc1 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5fba:	4621      	mov	r1, r4
    5fbc:	8830      	ldrh	r0, [r6, #0]
    5fbe:	f7fc feb5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5fc2:	4621      	mov	r1, r4
    5fc4:	8830      	ldrh	r0, [r6, #0]
    5fc6:	f7fc feb1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5fca:	4b0f      	ldr	r3, [pc, #60]	; (6008 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    5fcc:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    5fce:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fd0:	4a0e      	ldr	r2, [pc, #56]	; (600c <opcode_0xC7()+0x7c>)
    5fd2:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5fd4:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fd8:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5fda:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fdc:	bf94      	ite	ls
    5fde:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5fe2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5fe6:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5fe8:	f7fc ffa8 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    5fec:	4a08      	ldr	r2, [pc, #32]	; (6010 <opcode_0xC7()+0x80>)
    5fee:	882b      	ldrh	r3, [r5, #0]
    5ff0:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    5ff4:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    5ff6:	b280      	uxth	r0, r0
    5ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ffa:	bf00      	nop
    5ffc:	2001888c 	.word	0x2001888c
    6000:	2001888a 	.word	0x2001888a
    6004:	200188a4 	.word	0x200188a4
    6008:	200188a8 	.word	0x200188a8
    600c:	20004a20 	.word	0x20004a20
    6010:	20017418 	.word	0x20017418

00006014 <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    6014:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    6016:	f7fc ffc5 	bl	2fa4 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    601a:	3801      	subs	r0, #1
    global_temp = local_data;
    601c:	4d13      	ldr	r5, [pc, #76]	; (606c <opcode_0xD7()+0x58>)
    local_data = local_data - 1;
    601e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6020:	4e13      	ldr	r6, [pc, #76]	; (6070 <opcode_0xD7()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6022:	4620      	mov	r0, r4
    global_temp = local_data;
    6024:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6026:	f7fc ff89 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    602a:	8830      	ldrh	r0, [r6, #0]
    602c:	4621      	mov	r1, r4
    602e:	f7fc fe7d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6032:	4621      	mov	r1, r4
    6034:	8830      	ldrh	r0, [r6, #0]
    6036:	f7fc fe79 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    603a:	4b0e      	ldr	r3, [pc, #56]	; (6074 <opcode_0xD7()+0x60>)
    Calculate_CMP(global_temp);
    603c:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    603e:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6040:	4a0d      	ldr	r2, [pc, #52]	; (6078 <opcode_0xD7()+0x64>)
    6042:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6044:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6048:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    604a:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    604c:	bf94      	ite	ls
    604e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6052:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6056:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6058:	f7fc ff70 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    605c:	4a07      	ldr	r2, [pc, #28]	; (607c <opcode_0xD7()+0x68>)
    605e:	4b08      	ldr	r3, [pc, #32]	; (6080 <opcode_0xD7()+0x6c>)
    6060:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    6064:	881b      	ldrh	r3, [r3, #0]
    6066:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    6068:	b280      	uxth	r0, r0
    606a:	bd70      	pop	{r4, r5, r6, pc}
    606c:	200188a4 	.word	0x200188a4
    6070:	2001888a 	.word	0x2001888a
    6074:	200188a8 	.word	0x200188a8
    6078:	20004a20 	.word	0x20004a20
    607c:	20017418 	.word	0x20017418
    6080:	2001888c 	.word	0x2001888c

00006084 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    6084:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    6086:	f7fd f849 	bl	311c <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    608a:	3801      	subs	r0, #1
    global_temp = local_data;
    608c:	4d13      	ldr	r5, [pc, #76]	; (60dc <opcode_0xC3()+0x58>)
    local_data = local_data - 1;
    608e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6090:	4e13      	ldr	r6, [pc, #76]	; (60e0 <opcode_0xC3()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6092:	4620      	mov	r0, r4
    global_temp = local_data;
    6094:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6096:	f7fc ff51 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    609a:	8830      	ldrh	r0, [r6, #0]
    609c:	4621      	mov	r1, r4
    609e:	f7fc fe45 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60a2:	4621      	mov	r1, r4
    60a4:	8830      	ldrh	r0, [r6, #0]
    60a6:	f7fc fe41 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    60aa:	4b0e      	ldr	r3, [pc, #56]	; (60e4 <opcode_0xC3()+0x60>)
    Calculate_CMP(global_temp);
    60ac:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    60ae:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60b0:	4a0d      	ldr	r2, [pc, #52]	; (60e8 <opcode_0xC3()+0x64>)
    60b2:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    60b4:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60b8:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60ba:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60bc:	bf94      	ite	ls
    60be:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    60c2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    60c6:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60c8:	f7fc ff38 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    60cc:	4a07      	ldr	r2, [pc, #28]	; (60ec <opcode_0xC3()+0x68>)
    60ce:	4b08      	ldr	r3, [pc, #32]	; (60f0 <opcode_0xC3()+0x6c>)
    60d0:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    60d4:	881b      	ldrh	r3, [r3, #0]
    60d6:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    60d8:	b280      	uxth	r0, r0
    60da:	bd70      	pop	{r4, r5, r6, pc}
    60dc:	200188a4 	.word	0x200188a4
    60e0:	2001888a 	.word	0x2001888a
    60e4:	200188a8 	.word	0x200188a8
    60e8:	20004a20 	.word	0x20004a20
    60ec:	20017418 	.word	0x20017418
    60f0:	2001888c 	.word	0x2001888c

000060f4 <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    60f4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    60f6:	2000      	movs	r0, #0
    global_temp = local_data;
    60f8:	4d15      	ldr	r5, [pc, #84]	; (6150 <opcode_0xD3()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    60fa:	f7fd f839 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    60fe:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    6100:	4e14      	ldr	r6, [pc, #80]	; (6154 <opcode_0xD3()+0x60>)
    6102:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6104:	4620      	mov	r0, r4
    global_temp = local_data;
    6106:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6108:	f7fc ff18 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    610c:	8830      	ldrh	r0, [r6, #0]
    610e:	4621      	mov	r1, r4
    6110:	f7fc fe0c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6114:	4621      	mov	r1, r4
    6116:	8830      	ldrh	r0, [r6, #0]
    6118:	f7fc fe08 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    611c:	4b0e      	ldr	r3, [pc, #56]	; (6158 <opcode_0xD3()+0x64>)
    Calculate_CMP(global_temp);
    611e:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6120:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6122:	4a0e      	ldr	r2, [pc, #56]	; (615c <opcode_0xD3()+0x68>)
    6124:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6126:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    612a:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    612c:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    612e:	bf94      	ite	ls
    6130:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6134:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6138:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    613a:	f7fc feff 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD3].length);
    613e:	4a08      	ldr	r2, [pc, #32]	; (6160 <opcode_0xD3()+0x6c>)
    6140:	4b08      	ldr	r3, [pc, #32]	; (6164 <opcode_0xD3()+0x70>)
    6142:	f892 0b0d 	ldrb.w	r0, [r2, #2829]	; 0xb0d
    6146:	881b      	ldrh	r3, [r3, #0]
    6148:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    614a:	b280      	uxth	r0, r0
    614c:	bd70      	pop	{r4, r5, r6, pc}
    614e:	bf00      	nop
    6150:	200188a4 	.word	0x200188a4
    6154:	2001888a 	.word	0x2001888a
    6158:	200188a8 	.word	0x200188a8
    615c:	20004a20 	.word	0x20004a20
    6160:	20017418 	.word	0x20017418
    6164:	2001888c 	.word	0x2001888c

00006168 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    6168:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    616a:	f7fc ff5b 	bl	3024 <Fetch_Absolute()>
    local_data = local_data - 1;
    616e:	3801      	subs	r0, #1
    global_temp = local_data;
    6170:	4d13      	ldr	r5, [pc, #76]	; (61c0 <opcode_0xCF()+0x58>)
    local_data = local_data - 1;
    6172:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6174:	4e13      	ldr	r6, [pc, #76]	; (61c4 <opcode_0xCF()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6176:	4620      	mov	r0, r4
    global_temp = local_data;
    6178:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    617a:	f7fc fedf 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    617e:	8830      	ldrh	r0, [r6, #0]
    6180:	4621      	mov	r1, r4
    6182:	f7fc fdd3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6186:	4621      	mov	r1, r4
    6188:	8830      	ldrh	r0, [r6, #0]
    618a:	f7fc fdcf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    618e:	4b0e      	ldr	r3, [pc, #56]	; (61c8 <opcode_0xCF()+0x60>)
    Calculate_CMP(global_temp);
    6190:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6192:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6194:	4a0d      	ldr	r2, [pc, #52]	; (61cc <opcode_0xCF()+0x64>)
    6196:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6198:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    619c:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    619e:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61a0:	bf94      	ite	ls
    61a2:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    61a6:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    61aa:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    61ac:	f7fc fec6 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCF].length);
    61b0:	4a07      	ldr	r2, [pc, #28]	; (61d0 <opcode_0xCF()+0x68>)
    61b2:	4b08      	ldr	r3, [pc, #32]	; (61d4 <opcode_0xCF()+0x6c>)
    61b4:	f892 0a3d 	ldrb.w	r0, [r2, #2621]	; 0xa3d
    61b8:	881b      	ldrh	r3, [r3, #0]
    61ba:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    61bc:	b280      	uxth	r0, r0
    61be:	bd70      	pop	{r4, r5, r6, pc}
    61c0:	200188a4 	.word	0x200188a4
    61c4:	2001888a 	.word	0x2001888a
    61c8:	200188a8 	.word	0x200188a8
    61cc:	20004a20 	.word	0x20004a20
    61d0:	20017418 	.word	0x20017418
    61d4:	2001888c 	.word	0x2001888c

000061d8 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    61d8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    61da:	2000      	movs	r0, #0
    global_temp = local_data;
    61dc:	4d15      	ldr	r5, [pc, #84]	; (6234 <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    61de:	f7fc ff3d 	bl	305c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    61e2:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    61e4:	4e14      	ldr	r6, [pc, #80]	; (6238 <opcode_0xDF()+0x60>)
    61e6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61e8:	4620      	mov	r0, r4
    global_temp = local_data;
    61ea:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61ec:	f7fc fea6 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    61f0:	8830      	ldrh	r0, [r6, #0]
    61f2:	4621      	mov	r1, r4
    61f4:	f7fc fd9a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    61f8:	4621      	mov	r1, r4
    61fa:	8830      	ldrh	r0, [r6, #0]
    61fc:	f7fc fd96 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6200:	4b0e      	ldr	r3, [pc, #56]	; (623c <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    6202:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6204:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6206:	4a0e      	ldr	r2, [pc, #56]	; (6240 <opcode_0xDF()+0x68>)
    6208:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    620a:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    620e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6210:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6212:	bf94      	ite	ls
    6214:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6218:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    621c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    621e:	f7fc fe8d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    6222:	4a08      	ldr	r2, [pc, #32]	; (6244 <opcode_0xDF()+0x6c>)
    6224:	4b08      	ldr	r3, [pc, #32]	; (6248 <opcode_0xDF()+0x70>)
    6226:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    622a:	881b      	ldrh	r3, [r3, #0]
    622c:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    622e:	b280      	uxth	r0, r0
    6230:	bd70      	pop	{r4, r5, r6, pc}
    6232:	bf00      	nop
    6234:	200188a4 	.word	0x200188a4
    6238:	2001888a 	.word	0x2001888a
    623c:	200188a8 	.word	0x200188a8
    6240:	20004a20 	.word	0x20004a20
    6244:	20017418 	.word	0x20017418
    6248:	2001888c 	.word	0x2001888c

0000624c <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    624c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    624e:	2000      	movs	r0, #0
    global_temp = local_data;
    6250:	4d15      	ldr	r5, [pc, #84]	; (62a8 <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    6252:	f7fc ff33 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    6256:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    6258:	4e14      	ldr	r6, [pc, #80]	; (62ac <opcode_0xDB()+0x60>)
    625a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    625c:	4620      	mov	r0, r4
    global_temp = local_data;
    625e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6260:	f7fc fe6c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6264:	8830      	ldrh	r0, [r6, #0]
    6266:	4621      	mov	r1, r4
    6268:	f7fc fd60 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    626c:	4621      	mov	r1, r4
    626e:	8830      	ldrh	r0, [r6, #0]
    6270:	f7fc fd5c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6274:	4b0e      	ldr	r3, [pc, #56]	; (62b0 <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    6276:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6278:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    627a:	4a0e      	ldr	r2, [pc, #56]	; (62b4 <opcode_0xDB()+0x68>)
    627c:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    627e:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6282:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6284:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6286:	bf94      	ite	ls
    6288:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    628c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6290:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6292:	f7fc fe53 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    6296:	4a08      	ldr	r2, [pc, #32]	; (62b8 <opcode_0xDB()+0x6c>)
    6298:	4b08      	ldr	r3, [pc, #32]	; (62bc <opcode_0xDB()+0x70>)
    629a:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    629e:	881b      	ldrh	r3, [r3, #0]
    62a0:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    62a2:	b280      	uxth	r0, r0
    62a4:	bd70      	pop	{r4, r5, r6, pc}
    62a6:	bf00      	nop
    62a8:	200188a4 	.word	0x200188a4
    62ac:	2001888a 	.word	0x2001888a
    62b0:	200188a8 	.word	0x200188a8
    62b4:	20004a20 	.word	0x20004a20
    62b8:	20017418 	.word	0x20017418
    62bc:	2001888c 	.word	0x2001888c

000062c0 <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    62c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    62c2:	4e13      	ldr	r6, [pc, #76]	; (6310 <opcode_0xE7()+0x50>)
    62c4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    62c6:	4d13      	ldr	r5, [pc, #76]	; (6314 <opcode_0xE7()+0x54>)
    return read_byte(register_pc+offset, false);
    62c8:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    62ca:	4f13      	ldr	r7, [pc, #76]	; (6318 <opcode_0xE7()+0x58>)
    62cc:	3001      	adds	r0, #1
    62ce:	b280      	uxth	r0, r0
    62d0:	f7fc fb70 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    62d4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    62d6:	b280      	uxth	r0, r0
    62d8:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    62da:	f7fc fb6b 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    62de:	3001      	adds	r0, #1
    62e0:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62e2:	4620      	mov	r0, r4
    global_temp = local_data;
    62e4:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62e6:	f7fc fe29 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    62ea:	4621      	mov	r1, r4
    62ec:	8828      	ldrh	r0, [r5, #0]
    62ee:	f7fc fd1d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    62f2:	4621      	mov	r1, r4
    62f4:	8828      	ldrh	r0, [r5, #0]
    62f6:	f7fc fd19 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    62fa:	7838      	ldrb	r0, [r7, #0]
    62fc:	f7fd fc52 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    6300:	4a06      	ldr	r2, [pc, #24]	; (631c <opcode_0xE7()+0x5c>)
    6302:	8833      	ldrh	r3, [r6, #0]
    6304:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    6308:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    630a:	b280      	uxth	r0, r0
    630c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    630e:	bf00      	nop
    6310:	2001888c 	.word	0x2001888c
    6314:	2001888a 	.word	0x2001888a
    6318:	200188a4 	.word	0x200188a4
    631c:	20017418 	.word	0x20017418

00006320 <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    6320:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    6322:	f7fc fe3f 	bl	2fa4 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    6326:	3001      	adds	r0, #1
    global_temp = local_data;
    6328:	4d0c      	ldr	r5, [pc, #48]	; (635c <opcode_0xF7()+0x3c>)
    local_data = local_data + 1;
    632a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    632c:	4e0c      	ldr	r6, [pc, #48]	; (6360 <opcode_0xF7()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    632e:	4620      	mov	r0, r4
    global_temp = local_data;
    6330:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6332:	f7fc fe03 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6336:	8830      	ldrh	r0, [r6, #0]
    6338:	4621      	mov	r1, r4
    633a:	f7fc fcf7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    633e:	4621      	mov	r1, r4
    6340:	8830      	ldrh	r0, [r6, #0]
    6342:	f7fc fcf3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6346:	7828      	ldrb	r0, [r5, #0]
    6348:	f7fd fc2c 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    634c:	4a05      	ldr	r2, [pc, #20]	; (6364 <opcode_0xF7()+0x44>)
    634e:	4b06      	ldr	r3, [pc, #24]	; (6368 <opcode_0xF7()+0x48>)
    6350:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    6354:	881b      	ldrh	r3, [r3, #0]
    6356:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    6358:	b280      	uxth	r0, r0
    635a:	bd70      	pop	{r4, r5, r6, pc}
    635c:	200188a4 	.word	0x200188a4
    6360:	2001888a 	.word	0x2001888a
    6364:	20018418 	.word	0x20018418
    6368:	2001888c 	.word	0x2001888c

0000636c <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    636c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    636e:	f7fc fed5 	bl	311c <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    6372:	3001      	adds	r0, #1
    global_temp = local_data;
    6374:	4d0c      	ldr	r5, [pc, #48]	; (63a8 <opcode_0xE3()+0x3c>)
    local_data = local_data + 1;
    6376:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6378:	4e0c      	ldr	r6, [pc, #48]	; (63ac <opcode_0xE3()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    637a:	4620      	mov	r0, r4
    global_temp = local_data;
    637c:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    637e:	f7fc fddd 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6382:	8830      	ldrh	r0, [r6, #0]
    6384:	4621      	mov	r1, r4
    6386:	f7fc fcd1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    638a:	4621      	mov	r1, r4
    638c:	8830      	ldrh	r0, [r6, #0]
    638e:	f7fc fccd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6392:	7828      	ldrb	r0, [r5, #0]
    6394:	f7fd fc06 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    6398:	4a05      	ldr	r2, [pc, #20]	; (63b0 <opcode_0xE3()+0x44>)
    639a:	4b06      	ldr	r3, [pc, #24]	; (63b4 <opcode_0xE3()+0x48>)
    639c:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    63a0:	881b      	ldrh	r3, [r3, #0]
    63a2:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    63a4:	b280      	uxth	r0, r0
    63a6:	bd70      	pop	{r4, r5, r6, pc}
    63a8:	200188a4 	.word	0x200188a4
    63ac:	2001888a 	.word	0x2001888a
    63b0:	20017418 	.word	0x20017418
    63b4:	2001888c 	.word	0x2001888c

000063b8 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    63b8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    63ba:	2000      	movs	r0, #0
    global_temp = local_data;
    63bc:	4d0e      	ldr	r5, [pc, #56]	; (63f8 <opcode_0xF3()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    63be:	f7fc fed7 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    63c2:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    63c4:	4e0d      	ldr	r6, [pc, #52]	; (63fc <opcode_0xF3()+0x44>)
    63c6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63c8:	4620      	mov	r0, r4
    global_temp = local_data;
    63ca:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63cc:	f7fc fdb6 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    63d0:	8830      	ldrh	r0, [r6, #0]
    63d2:	4621      	mov	r1, r4
    63d4:	f7fc fcaa 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    63d8:	4621      	mov	r1, r4
    63da:	8830      	ldrh	r0, [r6, #0]
    63dc:	f7fc fca6 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    63e0:	7828      	ldrb	r0, [r5, #0]
    63e2:	f7fd fbdf 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    63e6:	4a06      	ldr	r2, [pc, #24]	; (6400 <opcode_0xF3()+0x48>)
    63e8:	4b06      	ldr	r3, [pc, #24]	; (6404 <opcode_0xF3()+0x4c>)
    63ea:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    63ee:	881b      	ldrh	r3, [r3, #0]
    63f0:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    63f2:	b280      	uxth	r0, r0
    63f4:	bd70      	pop	{r4, r5, r6, pc}
    63f6:	bf00      	nop
    63f8:	200188a4 	.word	0x200188a4
    63fc:	2001888a 	.word	0x2001888a
    6400:	20018418 	.word	0x20018418
    6404:	2001888c 	.word	0x2001888c

00006408 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    6408:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    640a:	f7fc fe0b 	bl	3024 <Fetch_Absolute()>
    local_data = local_data + 1;
    640e:	3001      	adds	r0, #1
    global_temp = local_data;
    6410:	4d0c      	ldr	r5, [pc, #48]	; (6444 <opcode_0xEF()+0x3c>)
    local_data = local_data + 1;
    6412:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6414:	4e0c      	ldr	r6, [pc, #48]	; (6448 <opcode_0xEF()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6416:	4620      	mov	r0, r4
    global_temp = local_data;
    6418:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    641a:	f7fc fd8f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    641e:	8830      	ldrh	r0, [r6, #0]
    6420:	4621      	mov	r1, r4
    6422:	f7fc fc83 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6426:	4621      	mov	r1, r4
    6428:	8830      	ldrh	r0, [r6, #0]
    642a:	f7fc fc7f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    642e:	7828      	ldrb	r0, [r5, #0]
    6430:	f7fd fbb8 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    6434:	4a05      	ldr	r2, [pc, #20]	; (644c <opcode_0xEF()+0x44>)
    6436:	4b06      	ldr	r3, [pc, #24]	; (6450 <opcode_0xEF()+0x48>)
    6438:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    643c:	881b      	ldrh	r3, [r3, #0]
    643e:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    6440:	b280      	uxth	r0, r0
    6442:	bd70      	pop	{r4, r5, r6, pc}
    6444:	200188a4 	.word	0x200188a4
    6448:	2001888a 	.word	0x2001888a
    644c:	20018418 	.word	0x20018418
    6450:	2001888c 	.word	0x2001888c

00006454 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    6454:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    6456:	2000      	movs	r0, #0
    global_temp = local_data;
    6458:	4d0e      	ldr	r5, [pc, #56]	; (6494 <opcode_0xFF()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    645a:	f7fc fdff 	bl	305c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    645e:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    6460:	4e0d      	ldr	r6, [pc, #52]	; (6498 <opcode_0xFF()+0x44>)
    6462:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6464:	4620      	mov	r0, r4
    global_temp = local_data;
    6466:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6468:	f7fc fd68 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    646c:	8830      	ldrh	r0, [r6, #0]
    646e:	4621      	mov	r1, r4
    6470:	f7fc fc5c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6474:	4621      	mov	r1, r4
    6476:	8830      	ldrh	r0, [r6, #0]
    6478:	f7fc fc58 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    647c:	7828      	ldrb	r0, [r5, #0]
    647e:	f7fd fb91 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    6482:	4a06      	ldr	r2, [pc, #24]	; (649c <opcode_0xFF()+0x48>)
    6484:	4b06      	ldr	r3, [pc, #24]	; (64a0 <opcode_0xFF()+0x4c>)
    6486:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    648a:	881b      	ldrh	r3, [r3, #0]
    648c:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    648e:	b280      	uxth	r0, r0
    6490:	bd70      	pop	{r4, r5, r6, pc}
    6492:	bf00      	nop
    6494:	200188a4 	.word	0x200188a4
    6498:	2001888a 	.word	0x2001888a
    649c:	20018418 	.word	0x20018418
    64a0:	2001888c 	.word	0x2001888c

000064a4 <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    64a4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    64a6:	2000      	movs	r0, #0
    global_temp = local_data;
    64a8:	4d0e      	ldr	r5, [pc, #56]	; (64e4 <opcode_0xFB()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    64aa:	f7fc fe07 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    64ae:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    64b0:	4e0d      	ldr	r6, [pc, #52]	; (64e8 <opcode_0xFB()+0x44>)
    64b2:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64b4:	4620      	mov	r0, r4
    global_temp = local_data;
    64b6:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64b8:	f7fc fd40 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    64bc:	8830      	ldrh	r0, [r6, #0]
    64be:	4621      	mov	r1, r4
    64c0:	f7fc fc34 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    64c4:	4621      	mov	r1, r4
    64c6:	8830      	ldrh	r0, [r6, #0]
    64c8:	f7fc fc30 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    64cc:	7828      	ldrb	r0, [r5, #0]
    64ce:	f7fd fb69 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    64d2:	4a06      	ldr	r2, [pc, #24]	; (64ec <opcode_0xFB()+0x48>)
    64d4:	4b06      	ldr	r3, [pc, #24]	; (64f0 <opcode_0xFB()+0x4c>)
    64d6:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    64da:	881b      	ldrh	r3, [r3, #0]
    64dc:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    64de:	b280      	uxth	r0, r0
    64e0:	bd70      	pop	{r4, r5, r6, pc}
    64e2:	bf00      	nop
    64e4:	200188a4 	.word	0x200188a4
    64e8:	2001888a 	.word	0x2001888a
    64ec:	20018418 	.word	0x20018418
    64f0:	2001888c 	.word	0x2001888c

000064f4 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    64f4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    64f6:	4c0e      	ldr	r4, [pc, #56]	; (6530 <opcode_0x0B()+0x3c>)
    64f8:	2100      	movs	r1, #0
    64fa:	8820      	ldrh	r0, [r4, #0]
    64fc:	3001      	adds	r0, #1
    64fe:	b280      	uxth	r0, r0
    6500:	f7fc fa58 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6504:	4b0b      	ldr	r3, [pc, #44]	; (6534 <opcode_0x0B()+0x40>)
    6506:	781a      	ldrb	r2, [r3, #0]
    6508:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    650a:	4a0b      	ldr	r2, [pc, #44]	; (6538 <opcode_0x0B()+0x44>)
    650c:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    650e:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6510:	7813      	ldrb	r3, [r2, #0]
    6512:	bf4c      	ite	mi
    6514:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6518:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    651c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    651e:	f7fc fd0d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    6522:	4a06      	ldr	r2, [pc, #24]	; (653c <opcode_0x0B()+0x48>)
    6524:	8823      	ldrh	r3, [r4, #0]
    6526:	f892 026d 	ldrb.w	r0, [r2, #621]	; 0x26d
    652a:	4418      	add	r0, r3
} // 0x0B - ANC - Immediate
    652c:	b280      	uxth	r0, r0
    652e:	bd10      	pop	{r4, pc}
    6530:	2001888c 	.word	0x2001888c
    6534:	200188a8 	.word	0x200188a8
    6538:	20004a20 	.word	0x20004a20
    653c:	20015418 	.word	0x20015418

00006540 <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    6540:	b510      	push	{r4, lr}
    6542:	4c0e      	ldr	r4, [pc, #56]	; (657c <opcode_0x2B()+0x3c>)
    6544:	2100      	movs	r1, #0
    6546:	8820      	ldrh	r0, [r4, #0]
    6548:	3001      	adds	r0, #1
    654a:	b280      	uxth	r0, r0
    654c:	f7fc fa32 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6550:	4b0b      	ldr	r3, [pc, #44]	; (6580 <opcode_0x2B()+0x40>)
    6552:	781a      	ldrb	r2, [r3, #0]
    6554:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6556:	4a0b      	ldr	r2, [pc, #44]	; (6584 <opcode_0x2B()+0x44>)
    6558:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    655a:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    655c:	7813      	ldrb	r3, [r2, #0]
    655e:	bf4c      	ite	mi
    6560:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6564:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6568:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    656a:	f7fc fce7 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    656e:	4a06      	ldr	r2, [pc, #24]	; (6588 <opcode_0x2B()+0x48>)
    6570:	8823      	ldrh	r3, [r4, #0]
    6572:	f892 08ed 	ldrb.w	r0, [r2, #2285]	; 0x8ed
    6576:	4418      	add	r0, r3
} // 0x2B - ANC - Immediate
    6578:	b280      	uxth	r0, r0
    657a:	bd10      	pop	{r4, pc}
    657c:	2001888c 	.word	0x2001888c
    6580:	200188a8 	.word	0x200188a8
    6584:	20004a20 	.word	0x20004a20
    6588:	20015418 	.word	0x20015418

0000658c <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    658c:	b510      	push	{r4, lr}
    658e:	4c10      	ldr	r4, [pc, #64]	; (65d0 <opcode_0x4B()+0x44>)
    6590:	2100      	movs	r1, #0
    6592:	8820      	ldrh	r0, [r4, #0]
    6594:	3001      	adds	r0, #1
    6596:	b280      	uxth	r0, r0
    6598:	f7fc fa0c 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    659c:	4a0d      	ldr	r2, [pc, #52]	; (65d4 <opcode_0x4B()+0x48>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    659e:	490e      	ldr	r1, [pc, #56]	; (65d8 <opcode_0x4B()+0x4c>)
    register_a = register_a & local_data;
    65a0:	7813      	ldrb	r3, [r2, #0]
    65a2:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    65a4:	780b      	ldrb	r3, [r1, #0]
    65a6:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    65aa:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    65ae:	bf14      	ite	ne
    65b0:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    65b4:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    65b8:	7010      	strb	r0, [r2, #0]
    65ba:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    65bc:	f7fc fcbe 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    65c0:	4a06      	ldr	r2, [pc, #24]	; (65dc <opcode_0x4B()+0x50>)
    65c2:	8823      	ldrh	r3, [r4, #0]
    65c4:	f892 0f6d 	ldrb.w	r0, [r2, #3949]	; 0xf6d
    65c8:	4418      	add	r0, r3
} // 0x4B - ALR - Immediate
    65ca:	b280      	uxth	r0, r0
    65cc:	bd10      	pop	{r4, pc}
    65ce:	bf00      	nop
    65d0:	2001888c 	.word	0x2001888c
    65d4:	200188a8 	.word	0x200188a8
    65d8:	20004a20 	.word	0x20004a20
    65dc:	20015418 	.word	0x20015418

000065e0 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    65e0:	b510      	push	{r4, lr}
    65e2:	4c0f      	ldr	r4, [pc, #60]	; (6620 <opcode_0x6B()+0x40>)
    65e4:	2100      	movs	r1, #0
    65e6:	8820      	ldrh	r0, [r4, #0]
    65e8:	3001      	adds	r0, #1
    65ea:	b280      	uxth	r0, r0
    65ec:	f7fc f9e2 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    65f0:	490c      	ldr	r1, [pc, #48]	; (6624 <opcode_0x6B()+0x44>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    65f2:	4a0d      	ldr	r2, [pc, #52]	; (6628 <opcode_0x6B()+0x48>)
    register_a = register_a & local_data;
    65f4:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    65f6:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    65f8:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    65fa:	0840      	lsrs	r0, r0, #1
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    65fc:	f003 03be 	and.w	r3, r3, #190	; 0xbe
    register_a = (0x7F & (register_a >> 1));
    6600:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    6602:	f000 0140 	and.w	r1, r0, #64	; 0x40
    6606:	b109      	cbz	r1, 660c <opcode_0x6B()+0x2c>
        register_flags = register_flags | 0x40;
    6608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    660c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    660e:	f7fc fc95 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    6612:	4a06      	ldr	r2, [pc, #24]	; (662c <opcode_0x6B()+0x4c>)
    6614:	8823      	ldrh	r3, [r4, #0]
    6616:	f892 05ed 	ldrb.w	r0, [r2, #1517]	; 0x5ed
    661a:	4418      	add	r0, r3
} // 0x6B - ARR - Immediate
    661c:	b280      	uxth	r0, r0
    661e:	bd10      	pop	{r4, pc}
    6620:	2001888c 	.word	0x2001888c
    6624:	200188a8 	.word	0x200188a8
    6628:	20004a20 	.word	0x20004a20
    662c:	20016418 	.word	0x20016418

00006630 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    6630:	b510      	push	{r4, lr}
    6632:	4c11      	ldr	r4, [pc, #68]	; (6678 <opcode_0xCB()+0x48>)
    6634:	2100      	movs	r1, #0
    6636:	8820      	ldrh	r0, [r4, #0]
    6638:	3001      	adds	r0, #1
    663a:	b280      	uxth	r0, r0
    663c:	f7fc f9ba 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    6640:	4a0e      	ldr	r2, [pc, #56]	; (667c <opcode_0xCB()+0x4c>)
    6642:	4b0f      	ldr	r3, [pc, #60]	; (6680 <opcode_0xCB()+0x50>)
    6644:	7811      	ldrb	r1, [r2, #0]
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    664a:	490e      	ldr	r1, [pc, #56]	; (6684 <opcode_0xCB()+0x54>)
    register_x = register_x - local_data;
    664c:	1a1b      	subs	r3, r3, r0
    664e:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    6650:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    6652:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6654:	780a      	ldrb	r2, [r1, #0]
    6656:	0400      	lsls	r0, r0, #16
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6658:	4618      	mov	r0, r3
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    665a:	bf54      	ite	pl
    665c:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6660:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    6664:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6666:	f7fc fc69 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    666a:	4a07      	ldr	r2, [pc, #28]	; (6688 <opcode_0xCB()+0x58>)
    666c:	8823      	ldrh	r3, [r4, #0]
    666e:	f892 096d 	ldrb.w	r0, [r2, #2413]	; 0x96d
    6672:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    6674:	b280      	uxth	r0, r0
    6676:	bd10      	pop	{r4, pc}
    6678:	2001888c 	.word	0x2001888c
    667c:	200188a9 	.word	0x200188a9
    6680:	200188a8 	.word	0x200188a8
    6684:	20004a20 	.word	0x20004a20
    6688:	20017418 	.word	0x20017418

0000668c <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    668c:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    668e:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    6690:	f7fc fc68 	bl	2f64 <Fetch_Immediate(unsigned char)>
    while (1) {}
    6694:	e7fe      	b.n	6694 <opcode_0x02()+0x8>
    6696:	bf00      	nop

00006698 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6698:	b570      	push	{r4, r5, r6, lr}
    669a:	4604      	mov	r4, r0
	uint8_t op1 = read_byte(pc+1, false);
    669c:	3001      	adds	r0, #1
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    669e:	b08e      	sub	sp, #56	; 0x38
    66a0:	460d      	mov	r5, r1
	uint8_t op1 = read_byte(pc+1, false);
    66a2:	b280      	uxth	r0, r0
    66a4:	2100      	movs	r1, #0
    66a6:	f7fc f985 	bl	29b4 <read_byte(unsigned short, bool)>
	uint8_t op2 = read_byte(pc+2, false);
    66aa:	1ca3      	adds	r3, r4, #2
	uint8_t op1 = read_byte(pc+1, false);
    66ac:	4606      	mov	r6, r0
	uint8_t op2 = read_byte(pc+2, false);
    66ae:	2100      	movs	r1, #0
    66b0:	b298      	uxth	r0, r3
    66b2:	f7fc f97f 	bl	29b4 <read_byte(unsigned short, bool)>
	Serial.println(String(pc,HEX) + ": " + decode_opcode(opcode, op1, op2));
    66b6:	2210      	movs	r2, #16
    66b8:	4621      	mov	r1, r4
	uint8_t op2 = read_byte(pc+2, false);
    66ba:	9001      	str	r0, [sp, #4]
	Serial.println(String(pc,HEX) + ": " + decode_opcode(opcode, op1, op2));
    66bc:	a802      	add	r0, sp, #8
    66be:	f002 fa0d 	bl	8adc <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    66c2:	a902      	add	r1, sp, #8
    66c4:	a806      	add	r0, sp, #24
    66c6:	f002 f985 	bl	89d4 <String::String(String const&)>
    66ca:	4911      	ldr	r1, [pc, #68]	; (6710 <display_next_instruction(unsigned short, unsigned char)+0x78>)
    66cc:	a806      	add	r0, sp, #24
    66ce:	f002 fabd 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    66d2:	4604      	mov	r4, r0
    66d4:	9b01      	ldr	r3, [sp, #4]
    66d6:	4632      	mov	r2, r6
    66d8:	4629      	mov	r1, r5
    66da:	a80a      	add	r0, sp, #40	; 0x28
	size_t println(const String &s)			{ return print(s) + println(); }
    66dc:	4d0d      	ldr	r5, [pc, #52]	; (6714 <display_next_instruction(unsigned short, unsigned char)+0x7c>)
    66de:	f7f9 fd07 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
    66e2:	a90a      	add	r1, sp, #40	; 0x28
    66e4:	4620      	mov	r0, r4
    66e6:	f002 faa9 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    66ea:	4601      	mov	r1, r0
    66ec:	4628      	mov	r0, r5
    66ee:	f002 f929 	bl	8944 <Print::print(String const&)>
    66f2:	4628      	mov	r0, r5
    66f4:	f002 f94c 	bl	8990 <Print::println()>
    66f8:	a80a      	add	r0, sp, #40	; 0x28
    66fa:	f002 f99f 	bl	8a3c <String::~String()>
class StringSumHelper : public String
    66fe:	a806      	add	r0, sp, #24
    6700:	f002 f99c 	bl	8a3c <String::~String()>
    6704:	a802      	add	r0, sp, #8
    6706:	f002 f999 	bl	8a3c <String::~String()>
}
    670a:	b00e      	add	sp, #56	; 0x38
    670c:	bd70      	pop	{r4, r5, r6, pc}
    670e:	bf00      	nop
    6710:	20000a8c 	.word	0x20000a8c
    6714:	20004410 	.word	0x20004410

00006718 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6718:	4922      	ldr	r1, [pc, #136]	; (67a4 <display_registers()+0x8c>)
    671a:	4b23      	ldr	r3, [pc, #140]	; (67a8 <display_registers()+0x90>)
    671c:	4a23      	ldr	r2, [pc, #140]	; (67ac <display_registers()+0x94>)
void display_registers() {
    671e:	b500      	push	{lr}
    6720:	b08f      	sub	sp, #60	; 0x3c
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6722:	7808      	ldrb	r0, [r1, #0]
    6724:	781b      	ldrb	r3, [r3, #0]
    6726:	7812      	ldrb	r2, [r2, #0]
    6728:	4921      	ldr	r1, [pc, #132]	; (67b0 <display_registers()+0x98>)
    672a:	9000      	str	r0, [sp, #0]
    672c:	a806      	add	r0, sp, #24
    672e:	f005 f965 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6732:	a806      	add	r0, sp, #24
    6734:	f005 fda4 	bl	c280 <strlen>
    6738:	4601      	mov	r1, r0
    673a:	a806      	add	r0, sp, #24
    673c:	f003 fdf2 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6740:	481c      	ldr	r0, [pc, #112]	; (67b4 <display_registers()+0x9c>)
    6742:	f002 f925 	bl	8990 <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    6746:	4b1c      	ldr	r3, [pc, #112]	; (67b8 <display_registers()+0xa0>)
    6748:	4a1c      	ldr	r2, [pc, #112]	; (67bc <display_registers()+0xa4>)
    674a:	a806      	add	r0, sp, #24
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	8812      	ldrh	r2, [r2, #0]
    6750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6754:	491a      	ldr	r1, [pc, #104]	; (67c0 <display_registers()+0xa8>)
    6756:	f005 f951 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    675a:	a806      	add	r0, sp, #24
    675c:	f005 fd90 	bl	c280 <strlen>
    6760:	4601      	mov	r1, r0
    6762:	a806      	add	r0, sp, #24
    6764:	f003 fdde 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6768:	4812      	ldr	r0, [pc, #72]	; (67b4 <display_registers()+0x9c>)
    676a:	f002 f911 	bl	8990 <Print::println()>
    sprintf(buf, "            Flags: %s", flag_status().c_str());
    676e:	a802      	add	r0, sp, #8
    6770:	f7fc f81e 	bl	27b0 <flag_status()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6774:	9a02      	ldr	r2, [sp, #8]
    6776:	b19a      	cbz	r2, 67a0 <display_registers()+0x88>
    6778:	4912      	ldr	r1, [pc, #72]	; (67c4 <display_registers()+0xac>)
    677a:	a806      	add	r0, sp, #24
    677c:	f005 f93e 	bl	b9fc <sprintf>
    6780:	a802      	add	r0, sp, #8
    6782:	f002 f95b 	bl	8a3c <String::~String()>
							  return write((const uint8_t *)str, strlen(str)); }
    6786:	a806      	add	r0, sp, #24
    6788:	f005 fd7a 	bl	c280 <strlen>
    678c:	4601      	mov	r1, r0
    678e:	a806      	add	r0, sp, #24
    6790:	f003 fdc8 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6794:	4807      	ldr	r0, [pc, #28]	; (67b4 <display_registers()+0x9c>)
    6796:	f002 f8fb 	bl	8990 <Print::println()>
}
    679a:	b00f      	add	sp, #60	; 0x3c
    679c:	f85d fb04 	ldr.w	pc, [sp], #4
    67a0:	4a09      	ldr	r2, [pc, #36]	; (67c8 <display_registers()+0xb0>)
    67a2:	e7e9      	b.n	6778 <display_registers()+0x60>
    67a4:	200188aa 	.word	0x200188aa
    67a8:	200188a9 	.word	0x200188a9
    67ac:	200188a8 	.word	0x200188a8
    67b0:	20000908 	.word	0x20000908
    67b4:	20004410 	.word	0x20004410
    67b8:	20004a21 	.word	0x20004a21
    67bc:	2001888c 	.word	0x2001888c
    67c0:	2000092c 	.word	0x2000092c
    67c4:	2000094c 	.word	0x2000094c
    67c8:	200012e4 	.word	0x200012e4

000067cc <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    67cc:	490c      	ldr	r1, [pc, #48]	; (6800 <display_info()+0x34>)
    67ce:	4b0d      	ldr	r3, [pc, #52]	; (6804 <display_info()+0x38>)
    67d0:	6808      	ldr	r0, [r1, #0]
    67d2:	4a0d      	ldr	r2, [pc, #52]	; (6808 <display_info()+0x3c>)
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	7812      	ldrb	r2, [r2, #0]
    67d8:	490c      	ldr	r1, [pc, #48]	; (680c <display_info()+0x40>)
void display_info() {
    67da:	b500      	push	{lr}
    67dc:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    67de:	9000      	str	r0, [sp, #0]
    67e0:	a802      	add	r0, sp, #8
    67e2:	f005 f90b 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    67e6:	a802      	add	r0, sp, #8
    67e8:	f005 fd4a 	bl	c280 <strlen>
    67ec:	4601      	mov	r1, r0
    67ee:	a802      	add	r0, sp, #8
    67f0:	f003 fd98 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    67f4:	4806      	ldr	r0, [pc, #24]	; (6810 <display_info()+0x44>)
    67f6:	f002 f8cb 	bl	8990 <Print::println()>
}
    67fa:	b013      	add	sp, #76	; 0x4c
    67fc:	f85d fb04 	ldr.w	pc, [sp], #4
    6800:	200053c8 	.word	0x200053c8
    6804:	2001889c 	.word	0x2001889c
    6808:	200188ac 	.word	0x200188ac
    680c:	200003a4 	.word	0x200003a4
    6810:	20004410 	.word	0x20004410

00006814 <get_command()>:
String get_command() {
    6814:	b570      	push	{r4, r5, r6, lr}
    6816:	b084      	sub	sp, #16
    String s = "";
    6818:	491c      	ldr	r1, [pc, #112]	; (688c <get_command()+0x78>)
String get_command() {
    681a:	4605      	mov	r5, r0
    681c:	4e1c      	ldr	r6, [pc, #112]	; (6890 <get_command()+0x7c>)
    String s = "";
    681e:	4668      	mov	r0, sp
    6820:	f002 f948 	bl	8ab4 <String::String(char const*)>
    6824:	2103      	movs	r1, #3
    6826:	481b      	ldr	r0, [pc, #108]	; (6894 <get_command()+0x80>)
    6828:	f003 fd7c 	bl	a324 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    682c:	f003 fd10 	bl	a250 <usb_serial_available>
        if (Serial.available()) {
    6830:	2800      	cmp	r0, #0
    6832:	d0fb      	beq.n	682c <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    6834:	f003 fd50 	bl	a2d8 <usb_serial_getchar>
            switch(c) {
    6838:	b2c4      	uxtb	r4, r0
    683a:	2c08      	cmp	r4, #8
    683c:	d00e      	beq.n	685c <get_command()+0x48>
    683e:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    6840:	4620      	mov	r0, r4
            switch(c) {
    6842:	d016      	beq.n	6872 <get_command()+0x5e>
                    if (isprint(c)) {
    6844:	f004 ffdc 	bl	b800 <isprint>
    6848:	2800      	cmp	r0, #0
    684a:	d0ef      	beq.n	682c <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    684c:	4621      	mov	r1, r4
    684e:	4668      	mov	r0, sp
    6850:	f002 f9e4 	bl	8c1c <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6854:	4620      	mov	r0, r4
    6856:	f003 fd4f 	bl	a2f8 <usb_serial_putchar>
    685a:	e7e7      	b.n	682c <get_command()+0x18>
                    s.remove(s.length()-1,1);
    685c:	9902      	ldr	r1, [sp, #8]
    685e:	2201      	movs	r2, #1
    6860:	4668      	mov	r0, sp
    6862:	3901      	subs	r1, #1
    6864:	f002 faa8 	bl	8db8 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6868:	2103      	movs	r1, #3
    686a:	4630      	mov	r0, r6
    686c:	f003 fd5a 	bl	a324 <usb_serial_write>
    6870:	e7dc      	b.n	682c <get_command()+0x18>
                    return(s.toLowerCase());
    6872:	4668      	mov	r0, sp
    6874:	f002 fac0 	bl	8df8 <String::toLowerCase()>
    6878:	4601      	mov	r1, r0
    687a:	4628      	mov	r0, r5
    687c:	f002 f8aa 	bl	89d4 <String::String(String const&)>
}
    6880:	4668      	mov	r0, sp
    6882:	f002 f8db 	bl	8a3c <String::~String()>
    6886:	4628      	mov	r0, r5
    6888:	b004      	add	sp, #16
    688a:	bd70      	pop	{r4, r5, r6, pc}
    688c:	200004f8 	.word	0x200004f8
    6890:	20000380 	.word	0x20000380
    6894:	2000037c 	.word	0x2000037c

00006898 <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    6898:	b570      	push	{r4, r5, r6, lr}
    689a:	460d      	mov	r5, r1
    689c:	b088      	sub	sp, #32
    String arg = "";
    689e:	4923      	ldr	r1, [pc, #140]	; (692c <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    68a0:	4616      	mov	r6, r2
    68a2:	4604      	mov	r4, r0
    String arg = "";
    68a4:	f002 f906 	bl	8ab4 <String::String(char const*)>

    String src = _src.trim();
    68a8:	4628      	mov	r0, r5
    68aa:	f002 fab5 	bl	8e18 <String::trim()>
    68ae:	4601      	mov	r1, r0
    68b0:	4668      	mov	r0, sp
    68b2:	f002 f88f 	bl	89d4 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    68b6:	9b02      	ldr	r3, [sp, #8]
    68b8:	b92b      	cbnz	r3, 68c6 <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    68ba:	4668      	mov	r0, sp
    68bc:	f002 f8be 	bl	8a3c <String::~String()>
    68c0:	4620      	mov	r0, r4
    68c2:	b008      	add	sp, #32
    68c4:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    68c6:	2120      	movs	r1, #32
    68c8:	4668      	mov	r0, sp
    68ca:	f002 fa0d 	bl	8ce8 <String::indexOf(char) const>
        if (idx>0) {
    68ce:	1e05      	subs	r5, r0, #0
    68d0:	dd1e      	ble.n	6910 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    68d2:	462b      	mov	r3, r5
    68d4:	2200      	movs	r2, #0
    68d6:	4669      	mov	r1, sp
    68d8:	a804      	add	r0, sp, #16
    68da:	f002 fa41 	bl	8d60 <String::substring(unsigned int, unsigned int) const>
    68de:	a904      	add	r1, sp, #16
    68e0:	4620      	mov	r0, r4
    68e2:	f002 f933 	bl	8b4c <String::operator=(String&&)>
    68e6:	a804      	add	r0, sp, #16
    68e8:	f002 f8a8 	bl	8a3c <String::~String()>
            remainder = src.substring(idx+1);
    68ec:	1c6a      	adds	r2, r5, #1
    68ee:	4669      	mov	r1, sp
    68f0:	a804      	add	r0, sp, #16
    68f2:	f002 fa09 	bl	8d08 <String::substring(unsigned int) const>
    68f6:	a904      	add	r1, sp, #16
    68f8:	4630      	mov	r0, r6
    68fa:	f002 f927 	bl	8b4c <String::operator=(String&&)>
    68fe:	a804      	add	r0, sp, #16
    6900:	f002 f89c 	bl	8a3c <String::~String()>
}
    6904:	4668      	mov	r0, sp
    6906:	f002 f899 	bl	8a3c <String::~String()>
    690a:	4620      	mov	r0, r4
    690c:	b008      	add	sp, #32
    690e:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    6910:	4669      	mov	r1, sp
    6912:	4620      	mov	r0, r4
    6914:	f002 f912 	bl	8b3c <String::operator=(String const&)>
            remainder = "";
    6918:	4904      	ldr	r1, [pc, #16]	; (692c <parse_next_arg(String&, String&)+0x94>)
    691a:	4630      	mov	r0, r6
    691c:	f002 f92c 	bl	8b78 <String::operator=(char const*)>
}
    6920:	4668      	mov	r0, sp
    6922:	f002 f88b 	bl	8a3c <String::~String()>
    6926:	4620      	mov	r0, r4
    6928:	b008      	add	sp, #32
    692a:	bd70      	pop	{r4, r5, r6, pc}
    692c:	200004f8 	.word	0x200004f8

00006930 <print_instruction(unsigned short)>:

uint16_t print_instruction(uint16_t address) {
    6930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t opcode = read_byte(address, false);
    6934:	2100      	movs	r1, #0
uint16_t print_instruction(uint16_t address) {
    6936:	b08e      	sub	sp, #56	; 0x38
    6938:	4606      	mov	r6, r0
    uint8_t opcode = read_byte(address, false);
    693a:	f7fc f83b 	bl	29b4 <read_byte(unsigned short, bool)>
    uint8_t instr_length = opcode_info[opcode].length;
    693e:	4b2a      	ldr	r3, [pc, #168]	; (69e8 <print_instruction(unsigned short)+0xb8>)
    6940:	2234      	movs	r2, #52	; 0x34

    uint8_t operands[2] = {0, 0};
    6942:	2400      	movs	r4, #0
    uint8_t opcode = read_byte(address, false);
    6944:	4607      	mov	r7, r0
    uint8_t instr_length = opcode_info[opcode].length;
    6946:	fb02 3300 	mla	r3, r2, r0, r3
    uint8_t operands[2] = {0, 0};
    694a:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t instr_length = opcode_info[opcode].length;
    694e:	f893 8031 	ldrb.w	r8, [r3, #49]	; 0x31
    for (uint8_t i=0; i<instr_length-1; i++)
    6952:	f108 39ff 	add.w	r9, r8, #4294967295
    6956:	45a1      	cmp	r9, r4
    6958:	dd43      	ble.n	69e2 <print_instruction(unsigned short)+0xb2>
    695a:	f106 0a01 	add.w	sl, r6, #1
    695e:	4625      	mov	r5, r4
    6960:	fa1f fa8a 	uxth.w	sl, sl
        operands[i] = read_byte(address + 1 + i, false);
    6964:	eb0a 0004 	add.w	r0, sl, r4
    for (uint8_t i=0; i<instr_length-1; i++)
    6968:	3401      	adds	r4, #1
        operands[i] = read_byte(address + 1 + i, false);
    696a:	2100      	movs	r1, #0
    696c:	b280      	uxth	r0, r0
    696e:	f7fc f821 	bl	29b4 <read_byte(unsigned short, bool)>
    6972:	f105 0338 	add.w	r3, r5, #56	; 0x38
    for (uint8_t i=0; i<instr_length-1; i++)
    6976:	b2e4      	uxtb	r4, r4
        operands[i] = read_byte(address + 1 + i, false);
    6978:	eb0d 0503 	add.w	r5, sp, r3
    for (uint8_t i=0; i<instr_length-1; i++)
    697c:	454c      	cmp	r4, r9
        operands[i] = read_byte(address + 1 + i, false);
    697e:	f805 0c34 	strb.w	r0, [r5, #-52]
    for (uint8_t i=0; i<instr_length-1; i++)
    6982:	4625      	mov	r5, r4
    6984:	dbee      	blt.n	6964 <print_instruction(unsigned short)+0x34>

    String s = decode_opcode(opcode, operands[0], operands[1]);
    6986:	f89d 2004 	ldrb.w	r2, [sp, #4]
    698a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    698e:	4639      	mov	r1, r7
    6990:	a802      	add	r0, sp, #8
    6992:	f7f9 fbad 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
    Serial.println(String(address,HEX) + ": " + s);
    6996:	2210      	movs	r2, #16
    6998:	4631      	mov	r1, r6
    699a:	a806      	add	r0, sp, #24
    699c:	f002 f89e 	bl	8adc <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    69a0:	a906      	add	r1, sp, #24
    69a2:	a80a      	add	r0, sp, #40	; 0x28

    return(address + instr_length);
    69a4:	4446      	add	r6, r8
    69a6:	f002 f815 	bl	89d4 <String::String(String const&)>
    Serial.println(String(address,HEX) + ": " + s);
    69aa:	4910      	ldr	r1, [pc, #64]	; (69ec <print_instruction(unsigned short)+0xbc>)
    69ac:	a80a      	add	r0, sp, #40	; 0x28
    return(address + instr_length);
    69ae:	b2b6      	uxth	r6, r6
    Serial.println(String(address,HEX) + ": " + s);
    69b0:	f002 f94c 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    69b4:	a902      	add	r1, sp, #8
    69b6:	f002 f941 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    69ba:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    69bc:	480c      	ldr	r0, [pc, #48]	; (69f0 <print_instruction(unsigned short)+0xc0>)
    69be:	f001 ffc1 	bl	8944 <Print::print(String const&)>
    69c2:	480b      	ldr	r0, [pc, #44]	; (69f0 <print_instruction(unsigned short)+0xc0>)
    69c4:	f001 ffe4 	bl	8990 <Print::println()>
class StringSumHelper : public String
    69c8:	a80a      	add	r0, sp, #40	; 0x28
    69ca:	f002 f837 	bl	8a3c <String::~String()>
    69ce:	a806      	add	r0, sp, #24
    69d0:	f002 f834 	bl	8a3c <String::~String()>
}
    69d4:	a802      	add	r0, sp, #8
    69d6:	f002 f831 	bl	8a3c <String::~String()>
    69da:	4630      	mov	r0, r6
    69dc:	b00e      	add	sp, #56	; 0x38
    69de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (uint8_t i=0; i<instr_length-1; i++)
    69e2:	4623      	mov	r3, r4
    69e4:	4622      	mov	r2, r4
    69e6:	e7d2      	b.n	698e <print_instruction(unsigned short)+0x5e>
    69e8:	20015418 	.word	0x20015418
    69ec:	20000a8c 	.word	0x20000a8c
    69f0:	20004410 	.word	0x20004410

000069f4 <process_command(String)>:
        // of the following instruction
        next_pc = print_instruction(next_pc);
    }
}

ENUM_RUN_MODE process_command(String input) {
    69f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69f8:	b0a5      	sub	sp, #148	; 0x94
    69fa:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    69fc:	49b2      	ldr	r1, [pc, #712]	; (6cc8 <process_command(String)+0x2d4>)
    69fe:	4668      	mov	r0, sp
    6a00:	f002 f858 	bl	8ab4 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    6a04:	466a      	mov	r2, sp
    6a06:	4621      	mov	r1, r4
    6a08:	a804      	add	r0, sp, #16
    6a0a:	f7ff ff45 	bl	6898 <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    6a0e:	466a      	mov	r2, sp
    6a10:	4669      	mov	r1, sp
    6a12:	a808      	add	r0, sp, #32
    6a14:	f7ff ff40 	bl	6898 <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    6a18:	466a      	mov	r2, sp
    6a1a:	4669      	mov	r1, sp
    6a1c:	a80c      	add	r0, sp, #48	; 0x30
    6a1e:	f7ff ff3b 	bl	6898 <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    6a22:	2100      	movs	r1, #0
    6a24:	a804      	add	r0, sp, #16
    6a26:	f002 f935 	bl	8c94 <String::operator[](unsigned int)>
    6a2a:	7805      	ldrb	r5, [r0, #0]
    6a2c:	2101      	movs	r1, #1
    6a2e:	a804      	add	r0, sp, #16
    6a30:	f002 f930 	bl	8c94 <String::operator[](unsigned int)>
    6a34:	7803      	ldrb	r3, [r0, #0]
    6a36:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    6a38:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    6a3c:	442b      	add	r3, r5
    switch (cmd_int) {
    6a3e:	4293      	cmp	r3, r2
    6a40:	f000 8265 	beq.w	6f0e <process_command(String)+0x51a>
    6a44:	d83f      	bhi.n	6ac6 <process_command(String)+0xd2>
    6a46:	f246 6265 	movw	r2, #26213	; 0x6665
    6a4a:	4293      	cmp	r3, r2
    6a4c:	f000 822a 	beq.w	6ea4 <process_command(String)+0x4b0>
    6a50:	f240 8118 	bls.w	6c84 <process_command(String)+0x290>
    6a54:	f646 126e 	movw	r2, #26990	; 0x696e
    6a58:	4293      	cmp	r3, r2
    6a5a:	f000 8250 	beq.w	6efe <process_command(String)+0x50a>
    6a5e:	f240 8096 	bls.w	6b8e <process_command(String)+0x19a>
    6a62:	f646 4269 	movw	r2, #27753	; 0x6c69
    6a66:	4293      	cmp	r3, r2
    6a68:	f040 81cf 	bne.w	6e0a <process_command(String)+0x416>
            if (pc_trace)
                pc_trace_index = 0;
			break;

        case CMD_LI:
            switch ((arg1.length()>0) + (arg2.length()>0)) {
    6a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a70:	3b00      	subs	r3, #0
    6a72:	bf18      	it	ne
    6a74:	2301      	movne	r3, #1
    6a76:	2a00      	cmp	r2, #0
    6a78:	bf18      	it	ne
    6a7a:	3301      	addne	r3, #1
    6a7c:	2b01      	cmp	r3, #1
    6a7e:	f000 825d 	beq.w	6f3c <process_command(String)+0x548>
    6a82:	2b02      	cmp	r3, #2
    6a84:	f040 8250 	bne.w	6f28 <process_command(String)+0x534>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6a88:	9808      	ldr	r0, [sp, #32]
    6a8a:	2800      	cmp	r0, #0
    6a8c:	f000 82fe 	beq.w	708c <process_command(String)+0x698>
                        list_instructions(start_address, 16);
                    }
                    break;
                case 2:  // Two arguments - Print instructions starting at address, count
                    {
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6a90:	2210      	movs	r2, #16
    6a92:	2100      	movs	r1, #0
    6a94:	f004 fda2 	bl	b5dc <strtol>
    6a98:	b284      	uxth	r4, r0
    6a9a:	980c      	ldr	r0, [sp, #48]	; 0x30
    6a9c:	2800      	cmp	r0, #0
    6a9e:	f000 82f3 	beq.w	7088 <process_command(String)+0x694>
                        uint8_t count = strtol(arg2.c_str(), 0, 8);
    6aa2:	2208      	movs	r2, #8
    6aa4:	2100      	movs	r1, #0
    6aa6:	f004 fd99 	bl	b5dc <strtol>
    for (uint8_t i=0; i<count; i++) {
    6aaa:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    6aae:	f000 815b 	beq.w	6d68 <process_command(String)+0x374>
    6ab2:	2500      	movs	r5, #0
    6ab4:	3501      	adds	r5, #1
        next_pc = print_instruction(next_pc);
    6ab6:	4620      	mov	r0, r4
    6ab8:	f7ff ff3a 	bl	6930 <print_instruction(unsigned short)>
    6abc:	4604      	mov	r4, r0
    for (uint8_t i=0; i<count; i++) {
    6abe:	b2eb      	uxtb	r3, r5
    6ac0:	429e      	cmp	r6, r3
    6ac2:	d8f7      	bhi.n	6ab4 <process_command(String)+0xc0>
    6ac4:	e150      	b.n	6d68 <process_command(String)+0x374>
    switch (cmd_int) {
    6ac6:	f247 3273 	movw	r2, #29555	; 0x7373
    6aca:	4293      	cmp	r3, r2
    6acc:	f000 81d7 	beq.w	6e7e <process_command(String)+0x48a>
    6ad0:	f240 812c 	bls.w	6d2c <process_command(String)+0x338>
    6ad4:	f247 4274 	movw	r2, #29812	; 0x7474
    6ad8:	4293      	cmp	r3, r2
    6ada:	f000 81c1 	beq.w	6e60 <process_command(String)+0x46c>
    6ade:	f247 7272 	movw	r2, #30578	; 0x7772
    6ae2:	4293      	cmp	r3, r2
    6ae4:	f040 80df 	bne.w	6ca6 <process_command(String)+0x2b2>
    6ae8:	9808      	ldr	r0, [sp, #32]
    6aea:	2800      	cmp	r0, #0
    6aec:	f000 8279 	beq.w	6fe2 <process_command(String)+0x5ee>
        //
        //      Write one or more bytes to <address>.
        //
        case CMD_WR:
            {
                word addr = strtoul(arg1.c_str(), 0, 16);
    6af0:	2210      	movs	r2, #16
    6af2:	2100      	movs	r1, #0
    6af4:	f004 fe20 	bl	b738 <strtoul>
    6af8:	4605      	mov	r5, r0
    6afa:	980c      	ldr	r0, [sp, #48]	; 0x30
    6afc:	2800      	cmp	r0, #0
    6afe:	f000 8268 	beq.w	6fd2 <process_command(String)+0x5de>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6b02:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6b06:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    6b0a:	2210      	movs	r2, #16
    6b0c:	2100      	movs	r1, #0
    6b0e:	f004 fe13 	bl	b738 <strtoul>
    6b12:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84

                digitalWriteFast(PIN_SYNC, 0x1);  //Special for manual writes
                write_byte(addr, data);
    6b16:	b2c1      	uxtb	r1, r0
    6b18:	b2a8      	uxth	r0, r5
    6b1a:	f7fc f907 	bl	2d2c <write_byte(unsigned short, unsigned char)>
                digitalWriteFast(PIN_SYNC, 0x0);

                while (remainder.length()) {
    6b1e:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6b20:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    6b24:	b1cb      	cbz	r3, 6b5a <process_command(String)+0x166>
    6b26:	ac14      	add	r4, sp, #80	; 0x50
    6b28:	4e68      	ldr	r6, [pc, #416]	; (6ccc <process_command(String)+0x2d8>)
                    String d = parse_next_arg(remainder, remainder);
    6b2a:	466a      	mov	r2, sp
    6b2c:	4669      	mov	r1, sp
    6b2e:	4620      	mov	r0, r4
                    data = strtoul(d.c_str(), 0, 16);
                    write_byte(++addr, data);
    6b30:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    6b32:	f7ff feb1 	bl	6898 <parse_next_arg(String&, String&)>
    6b36:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    6b38:	2210      	movs	r2, #16
    6b3a:	2100      	movs	r1, #0
    6b3c:	2800      	cmp	r0, #0
    6b3e:	bf08      	it	eq
    6b40:	4630      	moveq	r0, r6
    6b42:	f004 fdf9 	bl	b738 <strtoul>
                    write_byte(++addr, data);
    6b46:	b2c1      	uxtb	r1, r0
    6b48:	b2a8      	uxth	r0, r5
    6b4a:	f7fc f8ef 	bl	2d2c <write_byte(unsigned short, unsigned char)>
                }
    6b4e:	4620      	mov	r0, r4
    6b50:	f001 ff74 	bl	8a3c <String::~String()>
                while (remainder.length()) {
    6b54:	9b02      	ldr	r3, [sp, #8]
    6b56:	2b00      	cmp	r3, #0
    6b58:	d1e7      	bne.n	6b2a <process_command(String)+0x136>
    6b5a:	2102      	movs	r1, #2
    6b5c:	485c      	ldr	r0, [pc, #368]	; (6cd0 <process_command(String)+0x2dc>)
    6b5e:	f003 fbe1 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6b62:	485c      	ldr	r0, [pc, #368]	; (6cd4 <process_command(String)+0x2e0>)
    6b64:	f001 ff14 	bl	8990 <Print::println()>
                Serial.println("OK");
            }
            run_mode = WAITING;
    6b68:	4b5b      	ldr	r3, [pc, #364]	; (6cd8 <process_command(String)+0x2e4>)
    6b6a:	2400      	movs	r4, #0
    6b6c:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    6b6e:	a80c      	add	r0, sp, #48	; 0x30
    6b70:	f001 ff64 	bl	8a3c <String::~String()>
    6b74:	a808      	add	r0, sp, #32
    6b76:	f001 ff61 	bl	8a3c <String::~String()>
    6b7a:	a804      	add	r0, sp, #16
    6b7c:	f001 ff5e 	bl	8a3c <String::~String()>
    6b80:	4668      	mov	r0, sp
    6b82:	f001 ff5b 	bl	8a3c <String::~String()>
    6b86:	4620      	mov	r0, r4
    6b88:	b025      	add	sp, #148	; 0x94
    6b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    6b8e:	f246 726f 	movw	r2, #26479	; 0x676f
    6b92:	4293      	cmp	r3, r2
    6b94:	d12b      	bne.n	6bee <process_command(String)+0x1fa>
            run_mode = RUNNING;
    6b96:	4d50      	ldr	r5, [pc, #320]	; (6cd8 <process_command(String)+0x2e4>)
    6b98:	2402      	movs	r4, #2
            if (arg1.length()) {
    6b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    6b9c:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d0e5      	beq.n	6b6e <process_command(String)+0x17a>
    6ba2:	9808      	ldr	r0, [sp, #32]
    6ba4:	2800      	cmp	r0, #0
    6ba6:	f000 826d 	beq.w	7084 <process_command(String)+0x690>
                breakpoint = strtoul(arg1.c_str(), 0, 16);
    6baa:	4c4c      	ldr	r4, [pc, #304]	; (6cdc <process_command(String)+0x2e8>)
    6bac:	2210      	movs	r2, #16
    6bae:	2100      	movs	r1, #0
    6bb0:	f004 fdc2 	bl	b738 <strtoul>
	StringSumHelper(const char *p) : String(p) {}
    6bb4:	494a      	ldr	r1, [pc, #296]	; (6ce0 <process_command(String)+0x2ec>)
    6bb6:	6020      	str	r0, [r4, #0]
    6bb8:	a814      	add	r0, sp, #80	; 0x50
    6bba:	f001 ff7b 	bl	8ab4 <String::String(char const*)>
                Serial.println("Breakpoint set to $" + String(breakpoint, HEX));
    6bbe:	2210      	movs	r2, #16
    6bc0:	6821      	ldr	r1, [r4, #0]
    6bc2:	a810      	add	r0, sp, #64	; 0x40
    6bc4:	f001 ffa2 	bl	8b0c <String::String(unsigned int, unsigned char)>
    6bc8:	a910      	add	r1, sp, #64	; 0x40
    6bca:	a814      	add	r0, sp, #80	; 0x50
    6bcc:	f002 f836 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6bd0:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6bd2:	4840      	ldr	r0, [pc, #256]	; (6cd4 <process_command(String)+0x2e0>)
    6bd4:	f001 feb6 	bl	8944 <Print::print(String const&)>
    6bd8:	483e      	ldr	r0, [pc, #248]	; (6cd4 <process_command(String)+0x2e0>)
    6bda:	f001 fed9 	bl	8990 <Print::println()>
    6bde:	a810      	add	r0, sp, #64	; 0x40
    6be0:	f001 ff2c 	bl	8a3c <String::~String()>
class StringSumHelper : public String
    6be4:	a814      	add	r0, sp, #80	; 0x50
    6be6:	f001 ff29 	bl	8a3c <String::~String()>
    return(run_mode);
    6bea:	782c      	ldrb	r4, [r5, #0]
    6bec:	e7bf      	b.n	6b6e <process_command(String)+0x17a>
    switch (cmd_int) {
    6bee:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    6bf2:	f040 810a 	bne.w	6e0a <process_command(String)+0x416>
            Serial.println(String("Available Commands:\n\r")+
    6bf6:	493b      	ldr	r1, [pc, #236]	; (6ce4 <process_command(String)+0x2f0>)
    6bf8:	a810      	add	r0, sp, #64	; 0x40
    6bfa:	f001 ff5b 	bl	8ab4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    6bfe:	a910      	add	r1, sp, #64	; 0x40
    6c00:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6c02:	2400      	movs	r4, #0
    6c04:	f001 fee6 	bl	89d4 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    6c08:	4937      	ldr	r1, [pc, #220]	; (6ce8 <process_command(String)+0x2f4>)
    6c0a:	a814      	add	r0, sp, #80	; 0x50
    6c0c:	f002 f81e 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    6c10:	4936      	ldr	r1, [pc, #216]	; (6cec <process_command(String)+0x2f8>)
    6c12:	f002 f81b 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    6c16:	4936      	ldr	r1, [pc, #216]	; (6cf0 <process_command(String)+0x2fc>)
    6c18:	f002 f818 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    6c1c:	4935      	ldr	r1, [pc, #212]	; (6cf4 <process_command(String)+0x300>)
    6c1e:	f002 f815 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    6c22:	4935      	ldr	r1, [pc, #212]	; (6cf8 <process_command(String)+0x304>)
    6c24:	f002 f812 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    6c28:	4934      	ldr	r1, [pc, #208]	; (6cfc <process_command(String)+0x308>)
    6c2a:	f002 f80f 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    6c2e:	4934      	ldr	r1, [pc, #208]	; (6d00 <process_command(String)+0x30c>)
    6c30:	f002 f80c 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    6c34:	4933      	ldr	r1, [pc, #204]	; (6d04 <process_command(String)+0x310>)
    6c36:	f002 f809 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    6c3a:	4933      	ldr	r1, [pc, #204]	; (6d08 <process_command(String)+0x314>)
    6c3c:	f002 f806 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    6c40:	4932      	ldr	r1, [pc, #200]	; (6d0c <process_command(String)+0x318>)
    6c42:	f002 f803 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    6c46:	4932      	ldr	r1, [pc, #200]	; (6d10 <process_command(String)+0x31c>)
    6c48:	f002 f800 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    6c4c:	4931      	ldr	r1, [pc, #196]	; (6d14 <process_command(String)+0x320>)
    6c4e:	f001 fffd 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    6c52:	4931      	ldr	r1, [pc, #196]	; (6d18 <process_command(String)+0x324>)
    6c54:	f001 fffa 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    6c58:	4930      	ldr	r1, [pc, #192]	; (6d1c <process_command(String)+0x328>)
    6c5a:	f001 fff7 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    6c5e:	4930      	ldr	r1, [pc, #192]	; (6d20 <process_command(String)+0x32c>)
    6c60:	f001 fff4 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    6c64:	4601      	mov	r1, r0
    6c66:	481b      	ldr	r0, [pc, #108]	; (6cd4 <process_command(String)+0x2e0>)
    6c68:	f001 fe6c 	bl	8944 <Print::print(String const&)>
    6c6c:	4819      	ldr	r0, [pc, #100]	; (6cd4 <process_command(String)+0x2e0>)
    6c6e:	f001 fe8f 	bl	8990 <Print::println()>
class StringSumHelper : public String
    6c72:	a814      	add	r0, sp, #80	; 0x50
    6c74:	f001 fee2 	bl	8a3c <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    6c78:	a810      	add	r0, sp, #64	; 0x40
    6c7a:	f001 fedf 	bl	8a3c <String::~String()>
            run_mode = WAITING;
    6c7e:	4b16      	ldr	r3, [pc, #88]	; (6cd8 <process_command(String)+0x2e4>)
    6c80:	701c      	strb	r4, [r3, #0]
            break;
    6c82:	e774      	b.n	6b6e <process_command(String)+0x17a>
    switch (cmd_int) {
    6c84:	f246 226b 	movw	r2, #25195	; 0x626b
    6c88:	4293      	cmp	r3, r2
    6c8a:	f000 8100 	beq.w	6e8e <process_command(String)+0x49a>
    6c8e:	d969      	bls.n	6d64 <process_command(String)+0x370>
    6c90:	f246 4272 	movw	r2, #25714	; 0x6472
    6c94:	4293      	cmp	r3, r2
    6c96:	f040 80b8 	bne.w	6e0a <process_command(String)+0x416>
            display_registers();
    6c9a:	f7ff fd3d 	bl	6718 <display_registers()>
            run_mode = WAITING;          
    6c9e:	2400      	movs	r4, #0
    6ca0:	4b0d      	ldr	r3, [pc, #52]	; (6cd8 <process_command(String)+0x2e4>)
    6ca2:	701c      	strb	r4, [r3, #0]
            break;
    6ca4:	e763      	b.n	6b6e <process_command(String)+0x17a>
    switch (cmd_int) {
    6ca6:	f247 4272 	movw	r2, #29810	; 0x7472
    6caa:	4293      	cmp	r3, r2
    6cac:	f040 80ad 	bne.w	6e0a <process_command(String)+0x416>
			pc_trace = !pc_trace;
    6cb0:	4a1c      	ldr	r2, [pc, #112]	; (6d24 <process_command(String)+0x330>)
    6cb2:	7813      	ldrb	r3, [r2, #0]
    6cb4:	f083 0301 	eor.w	r3, r3, #1
    6cb8:	7013      	strb	r3, [r2, #0]
            if (pc_trace)
    6cba:	2b00      	cmp	r3, #0
    6cbc:	d054      	beq.n	6d68 <process_command(String)+0x374>
                pc_trace_index = 0;
    6cbe:	4b1a      	ldr	r3, [pc, #104]	; (6d28 <process_command(String)+0x334>)
    6cc0:	2200      	movs	r2, #0
    6cc2:	601a      	str	r2, [r3, #0]
    6cc4:	e050      	b.n	6d68 <process_command(String)+0x374>
    6cc6:	bf00      	nop
    6cc8:	200004f8 	.word	0x200004f8
    6ccc:	200012e4 	.word	0x200012e4
    6cd0:	2000087c 	.word	0x2000087c
    6cd4:	20004410 	.word	0x20004410
    6cd8:	200188ac 	.word	0x200188ac
    6cdc:	200053c8 	.word	0x200053c8
    6ce0:	20000868 	.word	0x20000868
    6ce4:	2000045c 	.word	0x2000045c
    6ce8:	20000474 	.word	0x20000474
    6cec:	200004b0 	.word	0x200004b0
    6cf0:	200004fc 	.word	0x200004fc
    6cf4:	2000052c 	.word	0x2000052c
    6cf8:	20000560 	.word	0x20000560
    6cfc:	200005a4 	.word	0x200005a4
    6d00:	200005dc 	.word	0x200005dc
    6d04:	20000620 	.word	0x20000620
    6d08:	20000670 	.word	0x20000670
    6d0c:	200006ac 	.word	0x200006ac
    6d10:	200006b0 	.word	0x200006b0
    6d14:	200006c8 	.word	0x200006c8
    6d18:	200006f4 	.word	0x200006f4
    6d1c:	20000754 	.word	0x20000754
    6d20:	200007b0 	.word	0x200007b0
    6d24:	200188a7 	.word	0x200188a7
    6d28:	20018818 	.word	0x20018818
    switch (cmd_int) {
    6d2c:	f247 2273 	movw	r2, #29299	; 0x7273
    6d30:	4293      	cmp	r3, r2
    6d32:	f000 80a8 	beq.w	6e86 <process_command(String)+0x492>
    6d36:	f247 3272 	movw	r2, #29554	; 0x7372
    6d3a:	4293      	cmp	r3, r2
    6d3c:	d117      	bne.n	6d6e <process_command(String)+0x37a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6d3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6d40:	2800      	cmp	r0, #0
    6d42:	f000 814c 	beq.w	6fde <process_command(String)+0x5ea>
                word value = strtoul(arg2.c_str(), 0, 16);
    6d46:	2100      	movs	r1, #0
    6d48:	2210      	movs	r2, #16
    6d4a:	f004 fcf5 	bl	b738 <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6d4e:	49b4      	ldr	r1, [pc, #720]	; (7020 <process_command(String)+0x62c>)
    6d50:	4604      	mov	r4, r0
    6d52:	a808      	add	r0, sp, #32
    6d54:	f001 ff88 	bl	8c68 <String::equals(char const*) const>
                if (arg1=="pc") {
    6d58:	2800      	cmp	r0, #0
    6d5a:	f000 8132 	beq.w	6fc2 <process_command(String)+0x5ce>
                    register_pc = value & 0xFFFF;
    6d5e:	4bb1      	ldr	r3, [pc, #708]	; (7024 <process_command(String)+0x630>)
    6d60:	801c      	strh	r4, [r3, #0]
    6d62:	e79a      	b.n	6c9a <process_command(String)+0x2a6>
    switch (cmd_int) {
    6d64:	2b00      	cmp	r3, #0
    6d66:	d14c      	bne.n	6e02 <process_command(String)+0x40e>
    return(run_mode);
    6d68:	4baf      	ldr	r3, [pc, #700]	; (7028 <process_command(String)+0x634>)
    6d6a:	781c      	ldrb	r4, [r3, #0]
    6d6c:	e6ff      	b.n	6b6e <process_command(String)+0x17a>
    switch (cmd_int) {
    6d6e:	f247 2264 	movw	r2, #29284	; 0x7264
    6d72:	4293      	cmp	r3, r2
    6d74:	d149      	bne.n	6e0a <process_command(String)+0x416>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6d76:	9808      	ldr	r0, [sp, #32]
    6d78:	2800      	cmp	r0, #0
    6d7a:	f000 812c 	beq.w	6fd6 <process_command(String)+0x5e2>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d7e:	2210      	movs	r2, #16
    6d80:	2100      	movs	r1, #0
    6d82:	f004 fcd9 	bl	b738 <strtoul>
                if (arg2.length()) {
    6d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d88:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    6d8a:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	f040 80ef 	bne.w	6f70 <process_command(String)+0x57c>
                sprintf(s,"[%04X] = ", addr);
    6d92:	4602      	mov	r2, r0
    6d94:	49a5      	ldr	r1, [pc, #660]	; (702c <process_command(String)+0x638>)
    6d96:	4620      	mov	r0, r4
                byte count = 1;
    6d98:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    6d9c:	f004 fe2e 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6da0:	4620      	mov	r0, r4
    6da2:	f005 fa6d 	bl	c280 <strlen>
    6da6:	4601      	mov	r1, r0
    6da8:	4620      	mov	r0, r4
    6daa:	f003 fabb 	bl	a324 <usb_serial_write>
                byte count = 1;
    6dae:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    6db0:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 707c <process_command(String)+0x688>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6db4:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    6db8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 7080 <process_command(String)+0x68c>
    6dbc:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    6dbe:	b115      	cbz	r5, 6dc6 <process_command(String)+0x3d2>
    6dc0:	075b      	lsls	r3, r3, #29
    6dc2:	f000 8112 	beq.w	6fea <process_command(String)+0x5f6>
    6dc6:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    6dca:	2100      	movs	r1, #0
    6dcc:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    6dce:	3501      	adds	r5, #1
    6dd0:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    6dd4:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    6dd6:	f7fb fded 	bl	29b4 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    6dda:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    6ddc:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6dde:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    6de2:	4620      	mov	r0, r4
    6de4:	f004 fe0a 	bl	b9fc <sprintf>
    6de8:	4620      	mov	r0, r4
    6dea:	f005 fa49 	bl	c280 <strlen>
    6dee:	4601      	mov	r1, r0
    6df0:	4620      	mov	r0, r4
    6df2:	f003 fa97 	bl	a324 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6df6:	b2eb      	uxtb	r3, r5
    6df8:	4599      	cmp	r9, r3
    6dfa:	d8e0      	bhi.n	6dbe <process_command(String)+0x3ca>
    6dfc:	2100      	movs	r1, #0
    6dfe:	488c      	ldr	r0, [pc, #560]	; (7030 <process_command(String)+0x63c>)
    6e00:	e6ad      	b.n	6b5e <process_command(String)+0x16a>
    switch (cmd_int) {
    6e02:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    6e06:	f43f aef6 	beq.w	6bf6 <process_command(String)+0x202>
	StringSumHelper(const char *p) : String(p) {}
    6e0a:	498a      	ldr	r1, [pc, #552]	; (7034 <process_command(String)+0x640>)
    6e0c:	a814      	add	r0, sp, #80	; 0x50
    6e0e:	f001 fe51 	bl	8ab4 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e12:	4621      	mov	r1, r4
    6e14:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6e16:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e18:	f001 ff10 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6e1c:	4986      	ldr	r1, [pc, #536]	; (7038 <process_command(String)+0x644>)
    6e1e:	f001 ff15 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    6e22:	a904      	add	r1, sp, #16
    6e24:	f001 ff0a 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6e28:	4984      	ldr	r1, [pc, #528]	; (703c <process_command(String)+0x648>)
    6e2a:	f001 ff0f 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    6e2e:	a908      	add	r1, sp, #32
    6e30:	f001 ff04 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6e34:	4981      	ldr	r1, [pc, #516]	; (703c <process_command(String)+0x648>)
    6e36:	f001 ff09 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    6e3a:	a90c      	add	r1, sp, #48	; 0x30
    6e3c:	f001 fefe 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6e40:	497f      	ldr	r1, [pc, #508]	; (7040 <process_command(String)+0x64c>)
    6e42:	f001 ff03 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    6e46:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6e48:	487e      	ldr	r0, [pc, #504]	; (7044 <process_command(String)+0x650>)
    6e4a:	f001 fd7b 	bl	8944 <Print::print(String const&)>
    6e4e:	487d      	ldr	r0, [pc, #500]	; (7044 <process_command(String)+0x650>)
    6e50:	f001 fd9e 	bl	8990 <Print::println()>
class StringSumHelper : public String
    6e54:	a814      	add	r0, sp, #80	; 0x50
    6e56:	f001 fdf1 	bl	8a3c <String::~String()>
            run_mode = WAITING;
    6e5a:	4b73      	ldr	r3, [pc, #460]	; (7028 <process_command(String)+0x634>)
    6e5c:	701c      	strb	r4, [r3, #0]
            break;
    6e5e:	e686      	b.n	6b6e <process_command(String)+0x17a>
    6e60:	4d71      	ldr	r5, [pc, #452]	; (7028 <process_command(String)+0x634>)
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6e62:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6e66:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    6e6a:	f7fb fd53 	bl	2914 <sample_at_CLK_rising_edge()>
    6e6e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    6e72:	f7fb fd4f 	bl	2914 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6e76:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    return(run_mode);
    6e7a:	782c      	ldrb	r4, [r5, #0]
}
    6e7c:	e677      	b.n	6b6e <process_command(String)+0x17a>
            run_mode = SINGLE_STEP;
    6e7e:	4b6a      	ldr	r3, [pc, #424]	; (7028 <process_command(String)+0x634>)
    6e80:	2401      	movs	r4, #1
    6e82:	701c      	strb	r4, [r3, #0]
            break;
    6e84:	e673      	b.n	6b6e <process_command(String)+0x17a>
            run_mode = RESETTING;
    6e86:	4d68      	ldr	r5, [pc, #416]	; (7028 <process_command(String)+0x634>)
    6e88:	2303      	movs	r3, #3
    6e8a:	702b      	strb	r3, [r5, #0]
    6e8c:	e7e9      	b.n	6e62 <process_command(String)+0x46e>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6e8e:	9808      	ldr	r0, [sp, #32]
    6e90:	2800      	cmp	r0, #0
    6e92:	f000 80a8 	beq.w	6fe6 <process_command(String)+0x5f2>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6e96:	2210      	movs	r2, #16
    6e98:	2100      	movs	r1, #0
    6e9a:	f004 fc4d 	bl	b738 <strtoul>
                breakpoint = addr;
    6e9e:	4b6a      	ldr	r3, [pc, #424]	; (7048 <process_command(String)+0x654>)
    6ea0:	6018      	str	r0, [r3, #0]
    6ea2:	e65a      	b.n	6b5a <process_command(String)+0x166>
				if (run_fence) {
    6ea4:	4b69      	ldr	r3, [pc, #420]	; (704c <process_command(String)+0x658>)
    6ea6:	781a      	ldrb	r2, [r3, #0]
    6ea8:	2a00      	cmp	r2, #0
    6eaa:	d158      	bne.n	6f5e <process_command(String)+0x56a>
					run_fence = true;
    6eac:	2201      	movs	r2, #1
    6eae:	9808      	ldr	r0, [sp, #32]
    6eb0:	701a      	strb	r2, [r3, #0]
    6eb2:	2800      	cmp	r0, #0
    6eb4:	f000 80a8 	beq.w	7008 <process_command(String)+0x614>
					run_fence_low  = strtoul(arg1.c_str(), 0, 16);
    6eb8:	4c65      	ldr	r4, [pc, #404]	; (7050 <process_command(String)+0x65c>)
    6eba:	2210      	movs	r2, #16
    6ebc:	2100      	movs	r1, #0
    6ebe:	f004 fc3b 	bl	b738 <strtoul>
    6ec2:	8020      	strh	r0, [r4, #0]
    6ec4:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ec6:	2800      	cmp	r0, #0
    6ec8:	f000 809c 	beq.w	7004 <process_command(String)+0x610>
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6ecc:	2210      	movs	r2, #16
    6ece:	2100      	movs	r1, #0
    6ed0:	f004 fc32 	bl	b738 <strtoul>
    6ed4:	4b5f      	ldr	r3, [pc, #380]	; (7054 <process_command(String)+0x660>)
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6ed6:	8822      	ldrh	r2, [r4, #0]
    6ed8:	495f      	ldr	r1, [pc, #380]	; (7058 <process_command(String)+0x664>)
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6eda:	8018      	strh	r0, [r3, #0]
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6edc:	b283      	uxth	r3, r0
    6ede:	a814      	add	r0, sp, #80	; 0x50
    6ee0:	f004 fd8c 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ee4:	a814      	add	r0, sp, #80	; 0x50
    6ee6:	f005 f9cb 	bl	c280 <strlen>
    6eea:	4601      	mov	r1, r0
    6eec:	a814      	add	r0, sp, #80	; 0x50
    6eee:	f003 fa19 	bl	a324 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6ef2:	4854      	ldr	r0, [pc, #336]	; (7044 <process_command(String)+0x650>)
    6ef4:	f001 fd4c 	bl	8990 <Print::println()>
    return(run_mode);
    6ef8:	4b4b      	ldr	r3, [pc, #300]	; (7028 <process_command(String)+0x634>)
    6efa:	781c      	ldrb	r4, [r3, #0]
    6efc:	e637      	b.n	6b6e <process_command(String)+0x17a>
            display_registers();
    6efe:	f7ff fc0b 	bl	6718 <display_registers()>
            run_mode = WAITING;
    6f02:	2400      	movs	r4, #0
            display_info();
    6f04:	f7ff fc62 	bl	67cc <display_info()>
            run_mode = WAITING;
    6f08:	4b47      	ldr	r3, [pc, #284]	; (7028 <process_command(String)+0x634>)
    6f0a:	701c      	strb	r4, [r3, #0]
            break;
    6f0c:	e62f      	b.n	6b6e <process_command(String)+0x17a>
    6f0e:	9808      	ldr	r0, [sp, #32]
    6f10:	2800      	cmp	r0, #0
    6f12:	d062      	beq.n	6fda <process_command(String)+0x5e6>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    6f14:	220a      	movs	r2, #10
    6f16:	2100      	movs	r1, #0
    6f18:	f004 fc0e 	bl	b738 <strtoul>
    6f1c:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    6f1e:	2803      	cmp	r0, #3
    6f20:	d83c      	bhi.n	6f9c <process_command(String)+0x5a8>
                    addr_mode = (ADDR_MODE)a_mode;
    6f22:	4b4e      	ldr	r3, [pc, #312]	; (705c <process_command(String)+0x668>)
    6f24:	7018      	strb	r0, [r3, #0]
    6f26:	e61f      	b.n	6b68 <process_command(String)+0x174>
                        list_instructions(register_pc, 16);
    6f28:	4b3e      	ldr	r3, [pc, #248]	; (7024 <process_command(String)+0x630>)
    6f2a:	2410      	movs	r4, #16
    6f2c:	8818      	ldrh	r0, [r3, #0]
        next_pc = print_instruction(next_pc);
    6f2e:	f7ff fcff 	bl	6930 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f32:	1e63      	subs	r3, r4, #1
    6f34:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f38:	d1f9      	bne.n	6f2e <process_command(String)+0x53a>
    6f3a:	e715      	b.n	6d68 <process_command(String)+0x374>
    6f3c:	9808      	ldr	r0, [sp, #32]
    6f3e:	2800      	cmp	r0, #0
    6f40:	f000 80a6 	beq.w	7090 <process_command(String)+0x69c>
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6f44:	2210      	movs	r2, #16
    6f46:	2100      	movs	r1, #0
    6f48:	f004 fb48 	bl	b5dc <strtol>
    6f4c:	2410      	movs	r4, #16
    6f4e:	b280      	uxth	r0, r0
        next_pc = print_instruction(next_pc);
    6f50:	f7ff fcee 	bl	6930 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f54:	1e63      	subs	r3, r4, #1
    6f56:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f5a:	d1f9      	bne.n	6f50 <process_command(String)+0x55c>
    6f5c:	e704      	b.n	6d68 <process_command(String)+0x374>
					run_fence = false;
    6f5e:	2200      	movs	r2, #0
					Serial.println("Run fence disabled");
    6f60:	493f      	ldr	r1, [pc, #252]	; (7060 <process_command(String)+0x66c>)
    6f62:	4838      	ldr	r0, [pc, #224]	; (7044 <process_command(String)+0x650>)
					run_fence = false;
    6f64:	701a      	strb	r2, [r3, #0]
					Serial.println("Run fence disabled");
    6f66:	f7f9 f8b1 	bl	cc <Print::println(char const*) [clone .isra.0]>
    return(run_mode);
    6f6a:	4b2f      	ldr	r3, [pc, #188]	; (7028 <process_command(String)+0x634>)
    6f6c:	781c      	ldrb	r4, [r3, #0]
    6f6e:	e5fe      	b.n	6b6e <process_command(String)+0x17a>
                    count = arg2.toInt() & 0xFF;
    6f70:	a80c      	add	r0, sp, #48	; 0x30
    6f72:	f001 ff7d 	bl	8e70 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    6f76:	492d      	ldr	r1, [pc, #180]	; (702c <process_command(String)+0x638>)
                    count = arg2.toInt() & 0xFF;
    6f78:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    6f7c:	4632      	mov	r2, r6
    6f7e:	4620      	mov	r0, r4
    6f80:	f004 fd3c 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6f84:	4620      	mov	r0, r4
    6f86:	f005 f97b 	bl	c280 <strlen>
    6f8a:	4601      	mov	r1, r0
    6f8c:	4620      	mov	r0, r4
    6f8e:	f003 f9c9 	bl	a324 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6f92:	f1b9 0f00 	cmp.w	r9, #0
    6f96:	f47f af0a 	bne.w	6dae <process_command(String)+0x3ba>
    6f9a:	e72f      	b.n	6dfc <process_command(String)+0x408>
	StringSumHelper(const char *p) : String(p) {}
    6f9c:	4931      	ldr	r1, [pc, #196]	; (7064 <process_command(String)+0x670>)
    6f9e:	a814      	add	r0, sp, #80	; 0x50
    6fa0:	f001 fd88 	bl	8ab4 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    6fa4:	a908      	add	r1, sp, #32
    6fa6:	a814      	add	r0, sp, #80	; 0x50
    6fa8:	f001 fe48 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    6fac:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6fae:	4825      	ldr	r0, [pc, #148]	; (7044 <process_command(String)+0x650>)
    6fb0:	f001 fcc8 	bl	8944 <Print::print(String const&)>
    6fb4:	4823      	ldr	r0, [pc, #140]	; (7044 <process_command(String)+0x650>)
    6fb6:	f001 fceb 	bl	8990 <Print::println()>
class StringSumHelper : public String
    6fba:	a814      	add	r0, sp, #80	; 0x50
    6fbc:	f001 fd3e 	bl	8a3c <String::~String()>
            run_mode = WAITING;
    6fc0:	e5d2      	b.n	6b68 <process_command(String)+0x174>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6fc2:	4929      	ldr	r1, [pc, #164]	; (7068 <process_command(String)+0x674>)
    6fc4:	a808      	add	r0, sp, #32
    6fc6:	f001 fe4f 	bl	8c68 <String::equals(char const*) const>
                else if (arg1=="a") {
    6fca:	b1f8      	cbz	r0, 700c <process_command(String)+0x618>
                    register_a = value & 0xFF;
    6fcc:	4b27      	ldr	r3, [pc, #156]	; (706c <process_command(String)+0x678>)
    6fce:	701c      	strb	r4, [r3, #0]
    6fd0:	e663      	b.n	6c9a <process_command(String)+0x2a6>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6fd2:	4827      	ldr	r0, [pc, #156]	; (7070 <process_command(String)+0x67c>)
    6fd4:	e595      	b.n	6b02 <process_command(String)+0x10e>
    6fd6:	4826      	ldr	r0, [pc, #152]	; (7070 <process_command(String)+0x67c>)
    6fd8:	e6d1      	b.n	6d7e <process_command(String)+0x38a>
    6fda:	4825      	ldr	r0, [pc, #148]	; (7070 <process_command(String)+0x67c>)
    6fdc:	e79a      	b.n	6f14 <process_command(String)+0x520>
    6fde:	4824      	ldr	r0, [pc, #144]	; (7070 <process_command(String)+0x67c>)
    6fe0:	e6b1      	b.n	6d46 <process_command(String)+0x352>
    6fe2:	4823      	ldr	r0, [pc, #140]	; (7070 <process_command(String)+0x67c>)
    6fe4:	e584      	b.n	6af0 <process_command(String)+0xfc>
    6fe6:	4822      	ldr	r0, [pc, #136]	; (7070 <process_command(String)+0x67c>)
    6fe8:	e755      	b.n	6e96 <process_command(String)+0x4a2>
                        sprintf(s,"\n\r[%04X] = ", addr);
    6fea:	4659      	mov	r1, fp
    6fec:	4632      	mov	r2, r6
    6fee:	4620      	mov	r0, r4
    6ff0:	f004 fd04 	bl	b9fc <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ff4:	4620      	mov	r0, r4
    6ff6:	f005 f943 	bl	c280 <strlen>
    6ffa:	4601      	mov	r1, r0
    6ffc:	4620      	mov	r0, r4
    6ffe:	f003 f991 	bl	a324 <usb_serial_write>
    7002:	e6e0      	b.n	6dc6 <process_command(String)+0x3d2>
    7004:	481a      	ldr	r0, [pc, #104]	; (7070 <process_command(String)+0x67c>)
    7006:	e761      	b.n	6ecc <process_command(String)+0x4d8>
    7008:	4819      	ldr	r0, [pc, #100]	; (7070 <process_command(String)+0x67c>)
    700a:	e755      	b.n	6eb8 <process_command(String)+0x4c4>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    700c:	4919      	ldr	r1, [pc, #100]	; (7074 <process_command(String)+0x680>)
    700e:	a808      	add	r0, sp, #32
    7010:	f001 fe2a 	bl	8c68 <String::equals(char const*) const>
                else if (arg1=="x") {
    7014:	2800      	cmp	r0, #0
    7016:	d03d      	beq.n	7094 <process_command(String)+0x6a0>
                    register_x = value & 0xFF;
    7018:	4b17      	ldr	r3, [pc, #92]	; (7078 <process_command(String)+0x684>)
    701a:	701c      	strb	r4, [r3, #0]
    701c:	e63d      	b.n	6c9a <process_command(String)+0x2a6>
    701e:	bf00      	nop
    7020:	2000081c 	.word	0x2000081c
    7024:	2001888c 	.word	0x2001888c
    7028:	200188ac 	.word	0x200188ac
    702c:	20000880 	.word	0x20000880
    7030:	200004f8 	.word	0x200004f8
    7034:	200008e0 	.word	0x200008e0
    7038:	20000900 	.word	0x20000900
    703c:	20000904 	.word	0x20000904
    7040:	20000444 	.word	0x20000444
    7044:	20004410 	.word	0x20004410
    7048:	200053c8 	.word	0x200053c8
    704c:	200188ab 	.word	0x200188ab
    7050:	20018890 	.word	0x20018890
    7054:	2001888e 	.word	0x2001888e
    7058:	200008b4 	.word	0x200008b4
    705c:	2001889c 	.word	0x2001889c
    7060:	200008a0 	.word	0x200008a0
    7064:	200007fc 	.word	0x200007fc
    7068:	20000820 	.word	0x20000820
    706c:	200188a8 	.word	0x200188a8
    7070:	200012e4 	.word	0x200012e4
    7074:	20000824 	.word	0x20000824
    7078:	200188a9 	.word	0x200188a9
    707c:	2000088c 	.word	0x2000088c
    7080:	20000898 	.word	0x20000898
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    7084:	480a      	ldr	r0, [pc, #40]	; (70b0 <process_command(String)+0x6bc>)
    7086:	e590      	b.n	6baa <process_command(String)+0x1b6>
    7088:	4809      	ldr	r0, [pc, #36]	; (70b0 <process_command(String)+0x6bc>)
    708a:	e50a      	b.n	6aa2 <process_command(String)+0xae>
    708c:	4808      	ldr	r0, [pc, #32]	; (70b0 <process_command(String)+0x6bc>)
    708e:	e4ff      	b.n	6a90 <process_command(String)+0x9c>
    7090:	4807      	ldr	r0, [pc, #28]	; (70b0 <process_command(String)+0x6bc>)
    7092:	e757      	b.n	6f44 <process_command(String)+0x550>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    7094:	4907      	ldr	r1, [pc, #28]	; (70b4 <process_command(String)+0x6c0>)
    7096:	a808      	add	r0, sp, #32
    7098:	f001 fde6 	bl	8c68 <String::equals(char const*) const>
                else if (arg1=="y") {
    709c:	b110      	cbz	r0, 70a4 <process_command(String)+0x6b0>
                    register_y = value & 0xFF;
    709e:	4b06      	ldr	r3, [pc, #24]	; (70b8 <process_command(String)+0x6c4>)
    70a0:	701c      	strb	r4, [r3, #0]
    70a2:	e5fa      	b.n	6c9a <process_command(String)+0x2a6>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    70a4:	4905      	ldr	r1, [pc, #20]	; (70bc <process_command(String)+0x6c8>)
    70a6:	4806      	ldr	r0, [pc, #24]	; (70c0 <process_command(String)+0x6cc>)
    70a8:	f7f9 f810 	bl	cc <Print::println(char const*) [clone .isra.0]>
    70ac:	e5f5      	b.n	6c9a <process_command(String)+0x2a6>
    70ae:	bf00      	nop
    70b0:	200012e4 	.word	0x200012e4
    70b4:	20000828 	.word	0x20000828
    70b8:	200188aa 	.word	0x200188aa
    70bc:	2000082c 	.word	0x2000082c
    70c0:	20004410 	.word	0x20004410

000070c4 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    70c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c8:	4f48      	ldr	r7, [pc, #288]	; (71ec <loop+0x128>)
    70ca:	b091      	sub	sp, #68	; 0x44
    70cc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 720c <loop+0x148>

    // Give Teensy 4.1 a moment
    delay(50);
    70d0:	2032      	movs	r0, #50	; 0x32
    70d2:	4d47      	ldr	r5, [pc, #284]	; (71f0 <loop+0x12c>)
    70d4:	f001 fed2 	bl	8e7c <delay>
    sample_at_CLK_rising_edge();
    70d8:	f7fb fc1c 	bl	2914 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70dc:	f7fb fc1a 	bl	2914 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70e0:	f7fb fc18 	bl	2914 <sample_at_CLK_rising_edge()>

    reset_sequence();
    70e4:	f7fc f984 	bl	33f0 <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    70e8:	4b42      	ldr	r3, [pc, #264]	; (71f4 <loop+0x130>)
    70ea:	781b      	ldrb	r3, [r3, #0]
    70ec:	2b01      	cmp	r3, #1
    70ee:	f000 81e1 	beq.w	74b4 <loop+0x3f0>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    70f2:	4b41      	ldr	r3, [pc, #260]	; (71f8 <loop+0x134>)
    70f4:	781b      	ldrb	r3, [r3, #0]
    70f6:	2b00      	cmp	r3, #0
    70f8:	f040 81e3 	bne.w	74c2 <loop+0x3fe>
    70fc:	4b3f      	ldr	r3, [pc, #252]	; (71fc <loop+0x138>)
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	2b01      	cmp	r3, #1
    7102:	f000 825f 	beq.w	75c4 <loop+0x500>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    7106:	4a3e      	ldr	r2, [pc, #248]	; (7200 <loop+0x13c>)
        nmi_n_old = direct_nmi;
    7108:	493b      	ldr	r1, [pc, #236]	; (71f8 <loop+0x134>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    710a:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    710c:	700b      	strb	r3, [r1, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    710e:	2a01      	cmp	r2, #1
    7110:	f000 81e1 	beq.w	74d6 <loop+0x412>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    7114:	2100      	movs	r1, #0
    7116:	8838      	ldrh	r0, [r7, #0]
    7118:	f7fb fc4c 	bl	29b4 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    711c:	4b39      	ldr	r3, [pc, #228]	; (7204 <loop+0x140>)
        next_instruction = read_byte(register_pc, false);
    711e:	4601      	mov	r1, r0
    7120:	f88a 0000 	strb.w	r0, [sl]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7124:	681b      	ldr	r3, [r3, #0]
    7126:	2b00      	cmp	r3, #0
    7128:	f000 81ce 	beq.w	74c8 <loop+0x404>
    712c:	782a      	ldrb	r2, [r5, #0]
    712e:	f8b7 b000 	ldrh.w	fp, [r7]
    7132:	2a02      	cmp	r2, #2
    7134:	f000 81dc 	beq.w	74f0 <loop+0x42c>
void loop() {
    7138:	4658      	mov	r0, fp
    713a:	ac08      	add	r4, sp, #32
    713c:	ae0c      	add	r6, sp, #48	; 0x30
    713e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 7210 <loop+0x14c>
	size_t println(const char s[])			{ return print(s) + println(); }
    7142:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 7214 <loop+0x150>
    7146:	e032      	b.n	71ae <loop+0xea>
    7148:	2101      	movs	r1, #1
    714a:	4648      	mov	r0, r9
    714c:	f003 f8ea 	bl	a324 <usb_serial_write>
    7150:	4640      	mov	r0, r8
    7152:	f001 fc1d 	bl	8990 <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    7156:	4621      	mov	r1, r4
    7158:	4630      	mov	r0, r6
    715a:	f001 fc3b 	bl	89d4 <String::String(String const&)>
    715e:	4630      	mov	r0, r6
    7160:	f7ff fc48 	bl	69f4 <process_command(String)>
    7164:	7028      	strb	r0, [r5, #0]
    7166:	4630      	mov	r0, r6
    7168:	f001 fc68 	bl	8a3c <String::~String()>
                    last_command = c;
    716c:	4621      	mov	r1, r4
    716e:	4826      	ldr	r0, [pc, #152]	; (7208 <loop+0x144>)
    7170:	f001 fce4 	bl	8b3c <String::operator=(String const&)>
    7174:	2101      	movs	r1, #1
    7176:	4648      	mov	r0, r9
    7178:	f003 f8d4 	bl	a324 <usb_serial_write>
    717c:	4640      	mov	r0, r8
    717e:	f001 fc07 	bl	8990 <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    7182:	782b      	ldrb	r3, [r5, #0]
    7184:	2b02      	cmp	r3, #2
    7186:	d009      	beq.n	719c <loop+0xd8>
    7188:	8838      	ldrh	r0, [r7, #0]
    718a:	4558      	cmp	r0, fp
    718c:	d006      	beq.n	719c <loop+0xd8>
                    next_instruction = read_byte(register_pc, false);
    718e:	2100      	movs	r1, #0
    7190:	f7fb fc10 	bl	29b4 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    7194:	f8b7 b000 	ldrh.w	fp, [r7]
                    next_instruction = read_byte(register_pc, false);
    7198:	f88a 0000 	strb.w	r0, [sl]
                }
            } while (run_mode == WAITING);
    719c:	4620      	mov	r0, r4
    719e:	f001 fc4d 	bl	8a3c <String::~String()>
    71a2:	782b      	ldrb	r3, [r5, #0]
    71a4:	2b00      	cmp	r3, #0
    71a6:	d145      	bne.n	7234 <loop+0x170>
                display_next_instruction(register_pc, next_instruction);
    71a8:	8838      	ldrh	r0, [r7, #0]
    71aa:	f89a 1000 	ldrb.w	r1, [sl]
    71ae:	f7ff fa73 	bl	6698 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    71b2:	4620      	mov	r0, r4
    71b4:	f7ff fb2e 	bl	6814 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    71b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71ba:	2b00      	cmp	r3, #0
    71bc:	d1c4      	bne.n	7148 <loop+0x84>
	inline unsigned int length(void) const {return len;}
    71be:	4912      	ldr	r1, [pc, #72]	; (7208 <loop+0x144>)
    71c0:	688b      	ldr	r3, [r1, #8]
    71c2:	2b00      	cmp	r3, #0
    71c4:	d0c0      	beq.n	7148 <loop+0x84>
	size_t println(const String &s)			{ return print(s) + println(); }
    71c6:	4640      	mov	r0, r8
    71c8:	f001 fbbc 	bl	8944 <Print::print(String const&)>
    71cc:	4640      	mov	r0, r8
    71ce:	f001 fbdf 	bl	8990 <Print::println()>
                    run_mode = process_command(last_command);
    71d2:	490d      	ldr	r1, [pc, #52]	; (7208 <loop+0x144>)
    71d4:	4630      	mov	r0, r6
    71d6:	f001 fbfd 	bl	89d4 <String::String(String const&)>
    71da:	4630      	mov	r0, r6
    71dc:	f7ff fc0a 	bl	69f4 <process_command(String)>
    71e0:	7028      	strb	r0, [r5, #0]
    71e2:	4630      	mov	r0, r6
    71e4:	f001 fc2a 	bl	8a3c <String::~String()>
    71e8:	e7c4      	b.n	7174 <loop+0xb0>
    71ea:	bf00      	nop
    71ec:	2001888c 	.word	0x2001888c
    71f0:	200188ac 	.word	0x200188ac
    71f4:	200188a2 	.word	0x200188a2
    71f8:	20004a1f 	.word	0x20004a1f
    71fc:	200188a0 	.word	0x200188a0
    7200:	2001889f 	.word	0x2001889f
    7204:	200053c8 	.word	0x200053c8
    7208:	200153f0 	.word	0x200153f0
    720c:	200188a6 	.word	0x200188a6
    7210:	20000420 	.word	0x20000420
    7214:	20004410 	.word	0x20004410
        virtual int read() { return usb_serial_getchar(); }
    7218:	f003 f85e 	bl	a2d8 <usb_serial_getchar>
        else {
            while (Serial.available() > 0) {
                // read the incoming byte:
                char b = Serial.read();

                switch(b) {
    721c:	b2c0      	uxtb	r0, r0
    721e:	281b      	cmp	r0, #27
    7220:	f000 8162 	beq.w	74e8 <loop+0x424>
        virtual int available() { return usb_serial_available(); }
    7224:	f003 f814 	bl	a250 <usb_serial_available>
            while (Serial.available() > 0) {
    7228:	2800      	cmp	r0, #0
    722a:	dcf5      	bgt.n	7218 <loop+0x154>
                        run_mode = WAITING;
                }
            }
        }

        if (run_mode == WAITING) {
    722c:	782b      	ldrb	r3, [r5, #0]
    722e:	2b00      	cmp	r3, #0
    7230:	f43f af5a 	beq.w	70e8 <loop+0x24>
            // just transitioned to WAITING while running...
            // skip the rest of this loop
            continue;
        }

        if (run_mode == RESETTING) {
    7234:	2b03      	cmp	r3, #3
    7236:	f000 81ca 	beq.w	75ce <loop+0x50a>
            // Break out of the internal while loop, causing the main loop() 
            // to be called again, which executes the reset sequence
            break;
        }

		if (run_fence) {
    723a:	4a0e      	ldr	r2, [pc, #56]	; (7274 <loop+0x1b0>)
    723c:	7812      	ldrb	r2, [r2, #0]
    723e:	b152      	cbz	r2, 7256 <loop+0x192>
			if (register_pc < run_fence_low || register_pc > run_fence_high) {
    7240:	490d      	ldr	r1, [pc, #52]	; (7278 <loop+0x1b4>)
    7242:	883a      	ldrh	r2, [r7, #0]
    7244:	8809      	ldrh	r1, [r1, #0]
    7246:	4291      	cmp	r1, r2
    7248:	f200 8192 	bhi.w	7570 <loop+0x4ac>
    724c:	490b      	ldr	r1, [pc, #44]	; (727c <loop+0x1b8>)
    724e:	8809      	ldrh	r1, [r1, #0]
    7250:	4291      	cmp	r1, r2
    7252:	f0c0 818d 	bcc.w	7570 <loop+0x4ac>
				continue;
			}
		}

        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    7256:	2b01      	cmp	r3, #1
    7258:	d105      	bne.n	7266 <loop+0x1a2>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    725a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    725e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            digitalWriteFast(PIN_SYNC, 0x1);

        if (pc_trace) {
    7266:	4b06      	ldr	r3, [pc, #24]	; (7280 <loop+0x1bc>)
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	f040 8147 	bne.w	74fe <loop+0x43a>
    7270:	e008      	b.n	7284 <loop+0x1c0>
    7272:	bf00      	nop
    7274:	200188ab 	.word	0x200188ab
    7278:	20018890 	.word	0x20018890
    727c:	2001888e 	.word	0x2001888e
    7280:	200188a7 	.word	0x200188a7

            pc_trace_index++;
        }

		uint16_t next_pc = 0;
        switch (next_instruction) {
    7284:	f89a 3000 	ldrb.w	r3, [sl]
    7288:	2bff      	cmp	r3, #255	; 0xff
    728a:	f201 82dc 	bhi.w	8846 <loop+0x1782>
    728e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7292:	0a53      	.short	0x0a53
    7294:	01a40a59 	.word	0x01a40a59
    7298:	01a901a6 	.word	0x01a901a6
    729c:	01c201b2 	.word	0x01c201b2
    72a0:	01c801c5 	.word	0x01c801c5
    72a4:	01ce01cb 	.word	0x01ce01cb
    72a8:	01d401d1 	.word	0x01d401d1
    72ac:	01ed01dd 	.word	0x01ed01dd
    72b0:	01f301f0 	.word	0x01f301f0
    72b4:	01a401fd 	.word	0x01a401fd
    72b8:	020e0227 	.word	0x020e0227
    72bc:	022a0217 	.word	0x022a0217
    72c0:	0230022d 	.word	0x0230022d
    72c4:	01000242 	.word	0x01000242
    72c8:	02560253 	.word	0x02560253
    72cc:	02710260 	.word	0x02710260
    72d0:	02770274 	.word	0x02770274
    72d4:	01a40291 	.word	0x01a40291
    72d8:	02a302a0 	.word	0x02a302a0
    72dc:	02b502a6 	.word	0x02b502a6
    72e0:	02bb02b8 	.word	0x02bb02b8
    72e4:	02c102be 	.word	0x02c102be
    72e8:	02c702c4 	.word	0x02c702c4
    72ec:	02d902ca 	.word	0x02d902ca
    72f0:	02df02dc 	.word	0x02df02dc
    72f4:	01a402f2 	.word	0x01a402f2
    72f8:	03050302 	.word	0x03050302
    72fc:	031d030e 	.word	0x031d030e
    7300:	03230320 	.word	0x03230320
    7304:	01000335 	.word	0x01000335
    7308:	03480345 	.word	0x03480345
    730c:	03620352 	.word	0x03620352
    7310:	03680365 	.word	0x03680365
    7314:	01a4036b 	.word	0x01a4036b
    7318:	037e037b 	.word	0x037e037b
    731c:	03970387 	.word	0x03970387
    7320:	039d039a 	.word	0x039d039a
    7324:	03a303a0 	.word	0x03a303a0
    7328:	03a903a6 	.word	0x03a903a6
    732c:	03bc03ac 	.word	0x03bc03ac
    7330:	03c203bf 	.word	0x03c203bf
    7334:	01a403c5 	.word	0x01a403c5
    7338:	03d903d6 	.word	0x03d903d6
    733c:	03f203e2 	.word	0x03f203e2
    7340:	040103f5 	.word	0x040103f5
    7344:	01000413 	.word	0x01000413
    7348:	04270424 	.word	0x04270424
    734c:	04420431 	.word	0x04420431
    7350:	04480445 	.word	0x04480445
    7354:	01a4044b 	.word	0x01a4044b
    7358:	045a0457 	.word	0x045a0457
    735c:	046f0463 	.word	0x046f0463
    7360:	04750472 	.word	0x04750472
    7364:	04880478 	.word	0x04880478
    7368:	048e048b 	.word	0x048e048b
    736c:	049d0491 	.word	0x049d0491
    7370:	04a304a0 	.word	0x04a304a0
    7374:	01a404a6 	.word	0x01a404a6
    7378:	04b604b3 	.word	0x04b604b3
    737c:	04cb04bf 	.word	0x04cb04bf
    7380:	04d104ce 	.word	0x04d104ce
    7384:	010004e3 	.word	0x010004e3
    7388:	04f304f0 	.word	0x04f304f0
    738c:	050b04fd 	.word	0x050b04fd
    7390:	0513050f 	.word	0x0513050f
    7394:	052a051e 	.word	0x052a051e
    7398:	05440535 	.word	0x05440535
    739c:	057d055a 	.word	0x057d055a
    73a0:	05ac0593 	.word	0x05ac0593
    73a4:	05cc05c1 	.word	0x05cc05c1
    73a8:	05eb05e0 	.word	0x05eb05e0
    73ac:	060305f7 	.word	0x060305f7
    73b0:	061e060f 	.word	0x061e060f
    73b4:	01a40628 	.word	0x01a40628
    73b8:	063e0634 	.word	0x063e0634
    73bc:	0656064a 	.word	0x0656064a
    73c0:	06710662 	.word	0x06710662
    73c4:	06910685 	.word	0x06910685
    73c8:	06ae06a3 	.word	0x06ae06a3
    73cc:	06c406b9 	.word	0x06c406b9
    73d0:	06eb06cf 	.word	0x06eb06cf
    73d4:	070b06fd 	.word	0x070b06fd
    73d8:	072d071d 	.word	0x072d071d
    73dc:	0749073b 	.word	0x0749073b
    73e0:	07670757 	.word	0x07670757
    73e4:	078d077b 	.word	0x078d077b
    73e8:	07ac07a1 	.word	0x07ac07a1
    73ec:	07c807ba 	.word	0x07c807ba
    73f0:	07e607d6 	.word	0x07e607d6
    73f4:	01a407f1 	.word	0x01a407f1
    73f8:	0840085c 	.word	0x0840085c
    73fc:	0800084e 	.word	0x0800084e
    7400:	081e080e 	.word	0x081e080e
    7404:	08770831 	.word	0x08770831
    7408:	08a0088b 	.word	0x08a0088b
    740c:	08be08af 	.word	0x08be08af
    7410:	08de08cd 	.word	0x08de08cd
    7414:	08ee08e2 	.word	0x08ee08e2
    7418:	08fd08f9 	.word	0x08fd08f9
    741c:	090d0901 	.word	0x090d0901
    7420:	09150911 	.word	0x09150911
    7424:	092e092a 	.word	0x092e092a
    7428:	09470943 	.word	0x09470943
    742c:	0957094b 	.word	0x0957094b
    7430:	095f095b 	.word	0x095f095b
    7434:	01a40963 	.word	0x01a40963
    7438:	09740970 	.word	0x09740970
    743c:	098a097e 	.word	0x098a097e
    7440:	0992098e 	.word	0x0992098e
    7444:	010009a5 	.word	0x010009a5
    7448:	09b609b2 	.word	0x09b609b2
    744c:	09ce09c1 	.word	0x09ce09c1
    7450:	09d609d2 	.word	0x09d609d2
    7454:	0a2f09da 	.word	0x0a2f09da
    7458:	0a3e0a3a 	.word	0x0a3e0a3a
    745c:	0abd0a42 	.word	0x0abd0a42
    7460:	0ac50ac1 	.word	0x0ac50ac1
    7464:	010001a1 	.word	0x010001a1
    7468:	09e701a1 	.word	0x09e701a1
    746c:	09f809eb 	.word	0x09f809eb
    7470:	0a0009fc 	.word	0x0a0009fc
    7474:	01a40a04 	.word	0x01a40a04
    7478:	0a250a12 	.word	0x0a250a12
    747c:	0a770a6a 	.word	0x0a770a6a
    7480:	0a7f0a7b 	.word	0x0a7f0a7b
    7484:	01000a92 	.word	0x01000a92
    7488:	0aa40aa0 	.word	0x0aa40aa0
    748c:	0ada0aaf 	.word	0x0ada0aaf
    7490:	0a4f      	.short	0x0a4f
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    7492:	f7fc fc07 	bl	3ca4 <opcode_0xEA()>
				run_mode = WAITING;
				break;
        }

        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    7496:	782b      	ldrb	r3, [r5, #0]
    7498:	2b01      	cmp	r3, #1
    749a:	d105      	bne.n	74a8 <loop+0x3e4>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    749c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    74a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    74a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (direct_reset == 1) reset_sequence();
    74a8:	4bb7      	ldr	r3, [pc, #732]	; (7788 <loop+0x6c4>)
            digitalWriteFast(PIN_SYNC, 0);

        // Move to next instruction
        register_pc = next_pc;
    74aa:	8038      	strh	r0, [r7, #0]
        if (direct_reset == 1) reset_sequence();
    74ac:	781b      	ldrb	r3, [r3, #0]
    74ae:	2b01      	cmp	r3, #1
    74b0:	f47f ae1f 	bne.w	70f2 <loop+0x2e>
    74b4:	f7fb ff9c 	bl	33f0 <reset_sequence()>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    74b8:	4bb4      	ldr	r3, [pc, #720]	; (778c <loop+0x6c8>)
    74ba:	781b      	ldrb	r3, [r3, #0]
    74bc:	2b00      	cmp	r3, #0
    74be:	f43f ae1d 	beq.w	70fc <loop+0x38>
        nmi_n_old = direct_nmi;
    74c2:	4bb3      	ldr	r3, [pc, #716]	; (7790 <loop+0x6cc>)
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	e61e      	b.n	7106 <loop+0x42>
        if (run_mode != RUNNING) {
    74c8:	782b      	ldrb	r3, [r5, #0]
    74ca:	2b02      	cmp	r3, #2
    74cc:	f43f aeaa 	beq.w	7224 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    74d0:	f8b7 b000 	ldrh.w	fp, [r7]
    74d4:	e630      	b.n	7138 <loop+0x74>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    74d6:	4baf      	ldr	r3, [pc, #700]	; (7794 <loop+0x6d0>)
    74d8:	7818      	ldrb	r0, [r3, #0]
    74da:	f010 0004 	ands.w	r0, r0, #4
    74de:	f47f ae19 	bne.w	7114 <loop+0x50>
    74e2:	f7fc f961 	bl	37a8 <irq_handler(unsigned char)>
    74e6:	e615      	b.n	7114 <loop+0x50>
                        run_mode = WAITING;
    74e8:	f04f 0300 	mov.w	r3, #0
    74ec:	702b      	strb	r3, [r5, #0]
    74ee:	e699      	b.n	7224 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    74f0:	455b      	cmp	r3, fp
    74f2:	f47f ae97 	bne.w	7224 <loop+0x160>
            run_mode = WAITING;
    74f6:	f04f 0300 	mov.w	r3, #0
    74fa:	702b      	strb	r3, [r5, #0]
    74fc:	e61c      	b.n	7138 <loop+0x74>
            String s = String(pc_trace_index) + ": " + String(register_pc, HEX);
    74fe:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 77b0 <loop+0x6ec>
	StringSumHelper(const String &s) : String(s) {}
    7502:	ac08      	add	r4, sp, #32
    7504:	220a      	movs	r2, #10
    7506:	a804      	add	r0, sp, #16
    7508:	f8d8 1000 	ldr.w	r1, [r8]
    750c:	ae0c      	add	r6, sp, #48	; 0x30
    750e:	f001 fafd 	bl	8b0c <String::String(unsigned int, unsigned char)>
    7512:	a904      	add	r1, sp, #16
    7514:	4620      	mov	r0, r4
    7516:	f001 fa5d 	bl	89d4 <String::String(String const&)>
    751a:	499f      	ldr	r1, [pc, #636]	; (7798 <loop+0x6d4>)
    751c:	4620      	mov	r0, r4
    751e:	f001 fb95 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    7522:	4681      	mov	r9, r0
    7524:	2210      	movs	r2, #16
    7526:	8839      	ldrh	r1, [r7, #0]
    7528:	4630      	mov	r0, r6
    752a:	f001 fad7 	bl	8adc <String::String(int, unsigned char)>
    752e:	4631      	mov	r1, r6
    7530:	4648      	mov	r0, r9
    7532:	f001 fb83 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    7536:	4601      	mov	r1, r0
    7538:	4668      	mov	r0, sp
    753a:	f001 fa4b 	bl	89d4 <String::String(String const&)>
    753e:	4630      	mov	r0, r6
    7540:	f001 fa7c 	bl	8a3c <String::~String()>
class StringSumHelper : public String
    7544:	4620      	mov	r0, r4
    7546:	f001 fa79 	bl	8a3c <String::~String()>
    754a:	a804      	add	r0, sp, #16
    754c:	f001 fa76 	bl	8a3c <String::~String()>
    7550:	4669      	mov	r1, sp
    7552:	4892      	ldr	r0, [pc, #584]	; (779c <loop+0x6d8>)
    7554:	f001 f9f6 	bl	8944 <Print::print(String const&)>
    7558:	4890      	ldr	r0, [pc, #576]	; (779c <loop+0x6d8>)
    755a:	f001 fa19 	bl	8990 <Print::println()>
            pc_trace_index++;
    755e:	f8d8 3000 	ldr.w	r3, [r8]
        }
    7562:	4668      	mov	r0, sp
            pc_trace_index++;
    7564:	3301      	adds	r3, #1
    7566:	f8c8 3000 	str.w	r3, [r8]
        }
    756a:	f001 fa67 	bl	8a3c <String::~String()>
    756e:	e689      	b.n	7284 <loop+0x1c0>
	StringSumHelper(const char *p) : String(p) {}
    7570:	ae0c      	add	r6, sp, #48	; 0x30
				String s = "EXECPTION: Attempt to execute outside of the run-fence (PC=" + String(register_pc, HEX) + ")";
    7572:	ac08      	add	r4, sp, #32
    7574:	498a      	ldr	r1, [pc, #552]	; (77a0 <loop+0x6dc>)
    7576:	4630      	mov	r0, r6
    7578:	f001 fa9c 	bl	8ab4 <String::String(char const*)>
    757c:	2210      	movs	r2, #16
    757e:	8839      	ldrh	r1, [r7, #0]
    7580:	4620      	mov	r0, r4
    7582:	f001 faab 	bl	8adc <String::String(int, unsigned char)>
    7586:	4621      	mov	r1, r4
    7588:	4630      	mov	r0, r6
    758a:	f001 fb57 	bl	8c3c <operator+(StringSumHelper const&, String const&)>
    758e:	4985      	ldr	r1, [pc, #532]	; (77a4 <loop+0x6e0>)
    7590:	f001 fb5c 	bl	8c4c <operator+(StringSumHelper const&, char const*)>
    7594:	4601      	mov	r1, r0
    7596:	a804      	add	r0, sp, #16
    7598:	f001 fa1c 	bl	89d4 <String::String(String const&)>
    759c:	4620      	mov	r0, r4
    759e:	f001 fa4d 	bl	8a3c <String::~String()>
class StringSumHelper : public String
    75a2:	4630      	mov	r0, r6
    75a4:	f001 fa4a 	bl	8a3c <String::~String()>
    75a8:	a904      	add	r1, sp, #16
    75aa:	487c      	ldr	r0, [pc, #496]	; (779c <loop+0x6d8>)
    75ac:	f001 f9ca 	bl	8944 <Print::print(String const&)>
    75b0:	487a      	ldr	r0, [pc, #488]	; (779c <loop+0x6d8>)
    75b2:	f001 f9ed 	bl	8990 <Print::println()>
				run_mode = WAITING;
    75b6:	f04f 0300 	mov.w	r3, #0
			}
    75ba:	a804      	add	r0, sp, #16
				run_mode = WAITING;
    75bc:	702b      	strb	r3, [r5, #0]
			}
    75be:	f001 fa3d 	bl	8a3c <String::~String()>
    75c2:	e591      	b.n	70e8 <loop+0x24>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    75c4:	f7fc f800 	bl	35c8 <nmi_handler()>
        nmi_n_old = direct_nmi;
    75c8:	4b71      	ldr	r3, [pc, #452]	; (7790 <loop+0x6cc>)
    75ca:	781b      	ldrb	r3, [r3, #0]
    75cc:	e59b      	b.n	7106 <loop+0x42>
    }
}
    75ce:	b011      	add	sp, #68	; 0x44
    75d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next_pc = opcode_0xE9();
    75d4:	f7fc fb50 	bl	3c78 <opcode_0xE9()>
				break; // SBC - Immediate
    75d8:	e75d      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x02();
    75da:	f7ff f857 	bl	668c <opcode_0x02()>
				next_pc = opcode_0x03();
    75de:	f7fd ff8f 	bl	5500 <opcode_0x03()>
				break; // SLO - Indexed Indirect X
    75e2:	e758      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage();
    75e4:	f7fb fcca 	bl	2f7c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    75e8:	4b6f      	ldr	r3, [pc, #444]	; (77a8 <loop+0x6e4>)
    75ea:	f893 0101 	ldrb.w	r0, [r3, #257]	; 0x101
    75ee:	883b      	ldrh	r3, [r7, #0]
    75f0:	4418      	add	r0, r3
    75f2:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    75f4:	e74f      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_ZeroPage());
    75f6:	f7fb fcc1 	bl	2f7c <Fetch_ZeroPage()>
    75fa:	4b6c      	ldr	r3, [pc, #432]	; (77ac <loop+0x6e8>)
    75fc:	781a      	ldrb	r2, [r3, #0]
    75fe:	4310      	orrs	r0, r2
    7600:	b2c0      	uxtb	r0, r0
    7602:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7604:	f7fb fc9a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x05].length);
    7608:	4b67      	ldr	r3, [pc, #412]	; (77a8 <loop+0x6e4>)
    760a:	f893 0135 	ldrb.w	r0, [r3, #309]	; 0x135
    760e:	883b      	ldrh	r3, [r7, #0]
    7610:	4418      	add	r0, r3
    7612:	b280      	uxth	r0, r0
				break; // OR ZeroPage
    7614:	e73f      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x06();
    7616:	f7fc fdd5 	bl	41c4 <opcode_0x06()>
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    761a:	e73c      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x07();
    761c:	f7fd ff00 	bl	5420 <opcode_0x07()>
				break; // SLO - ZeroPage
    7620:	e739      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x08();
    7622:	f7fc fb53 	bl	3ccc <opcode_0x08()>
				break; // PHP - Push processor status to the stack
    7626:	e736      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x09();
    7628:	f7fc fc0a 	bl	3e40 <opcode_0x09()>
				break; // OR - Immediate
    762c:	e733      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x0A();
    762e:	f7fc f9b1 	bl	3994 <opcode_0x0A()>
				break; // ASL A
    7632:	e730      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x0B();
    7634:	f7fe ff5e 	bl	64f4 <opcode_0x0B()>
				break; // ANC - Immediate
    7638:	e72d      	b.n	7496 <loop+0x3d2>
    Fetch_Absolute();
    763a:	f7fb fcf3 	bl	3024 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    763e:	4b5a      	ldr	r3, [pc, #360]	; (77a8 <loop+0x6e4>)
    7640:	f893 02a1 	ldrb.w	r0, [r3, #673]	; 0x2a1
    7644:	883b      	ldrh	r3, [r7, #0]
    7646:	4418      	add	r0, r3
    7648:	b280      	uxth	r0, r0
				break; // NOP - Absolute
    764a:	e724      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_Absolute());
    764c:	f7fb fcea 	bl	3024 <Fetch_Absolute()>
    7650:	4b56      	ldr	r3, [pc, #344]	; (77ac <loop+0x6e8>)
    7652:	781a      	ldrb	r2, [r3, #0]
    7654:	4310      	orrs	r0, r2
    7656:	b2c0      	uxtb	r0, r0
    7658:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    765a:	f7fb fc6f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0D].length);
    765e:	4b52      	ldr	r3, [pc, #328]	; (77a8 <loop+0x6e4>)
    7660:	f893 02d5 	ldrb.w	r0, [r3, #725]	; 0x2d5
    7664:	883b      	ldrh	r3, [r7, #0]
    7666:	4418      	add	r0, r3
    7668:	b280      	uxth	r0, r0
				break; // OR - Absolute
    766a:	e714      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x0E();
    766c:	f7fc fe10 	bl	4290 <opcode_0x0E()>
				break; // ASL A - Arithmetic Shift Left - Absolute
    7670:	e711      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x0F();
    7672:	f7fd ffad 	bl	55d0 <opcode_0x0F()>
				break; // SLO - Absolute
    7676:	e70e      	b.n	7496 <loop+0x3d2>
    if ((flag_n) == 0) Branch_Taken();
    7678:	4b46      	ldr	r3, [pc, #280]	; (7794 <loop+0x6d0>)
    767a:	f993 3000 	ldrsb.w	r3, [r3]
    767e:	2b00      	cmp	r3, #0
    7680:	f2c1 8105 	blt.w	888e <loop+0x17ca>
    7684:	f7fd f9ca 	bl	4a1c <Branch_Taken()>
    return(register_pc);
    7688:	8838      	ldrh	r0, [r7, #0]
				break; // BNE - Branch on Zero Clear
    768a:	e704      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    768c:	2001      	movs	r0, #1
    768e:	f7fb fd6f 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7692:	4b46      	ldr	r3, [pc, #280]	; (77ac <loop+0x6e8>)
    7694:	781a      	ldrb	r2, [r3, #0]
    7696:	4310      	orrs	r0, r2
    7698:	b2c0      	uxtb	r0, r0
    769a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    769c:	f7fb fc4e 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x11].length);
    76a0:	4b41      	ldr	r3, [pc, #260]	; (77a8 <loop+0x6e4>)
    76a2:	f893 03a5 	ldrb.w	r0, [r3, #933]	; 0x3a5
    76a6:	883b      	ldrh	r3, [r7, #0]
    76a8:	4418      	add	r0, r3
    76aa:	b280      	uxth	r0, r0
				break; // OR Indirect Indexed  Y
    76ac:	e6f3      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage_X();
    76ae:	f7fb fc79 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    76b2:	4b3d      	ldr	r3, [pc, #244]	; (77a8 <loop+0x6e4>)
    76b4:	f893 0441 	ldrb.w	r0, [r3, #1089]	; 0x441
    76b8:	883b      	ldrh	r3, [r7, #0]
    76ba:	4418      	add	r0, r3
    76bc:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    76be:	e6ea      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_ZeroPage_X());
    76c0:	f7fb fc70 	bl	2fa4 <Fetch_ZeroPage_X()>
    76c4:	4b39      	ldr	r3, [pc, #228]	; (77ac <loop+0x6e8>)
    76c6:	781a      	ldrb	r2, [r3, #0]
    76c8:	4310      	orrs	r0, r2
    76ca:	b2c0      	uxtb	r0, r0
    76cc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    76ce:	f7fb fc35 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x15].length);
    76d2:	4b35      	ldr	r3, [pc, #212]	; (77a8 <loop+0x6e4>)
    76d4:	f893 0475 	ldrb.w	r0, [r3, #1141]	; 0x475
    76d8:	883b      	ldrh	r3, [r7, #0]
    76da:	4418      	add	r0, r3
    76dc:	b280      	uxth	r0, r0
				break; // OR - ZeroPage,X
    76de:	e6da      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x13();
    76e0:	f7fd ff42 	bl	5568 <opcode_0x13()>
				break; // Indirect Indexed  Y
    76e4:	e6d7      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x16();
    76e6:	f7fc fda5 	bl	4234 <opcode_0x16()>
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    76ea:	e6d4      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x17();
    76ec:	f7fd fed4 	bl	5498 <opcode_0x17()>
				break; // SLO - ZeroPage , X
    76f0:	e6d1      	b.n	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    76f2:	8838      	ldrh	r0, [r7, #0]
    76f4:	2100      	movs	r1, #0
    76f6:	3001      	adds	r0, #1
    76f8:	b280      	uxth	r0, r0
    76fa:	f7fb f95b 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x18].length);
    76fe:	4b2a      	ldr	r3, [pc, #168]	; (77a8 <loop+0x6e4>)
    register_flags = register_flags & 0xFE;
    7700:	4a24      	ldr	r2, [pc, #144]	; (7794 <loop+0x6d0>)
    return(register_pc + opcode_info[0x18].length);
    7702:	f893 0511 	ldrb.w	r0, [r3, #1297]	; 0x511
    register_flags = register_flags & 0xFE;
    7706:	7813      	ldrb	r3, [r2, #0]
    7708:	f023 0301 	bic.w	r3, r3, #1
    770c:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    770e:	883b      	ldrh	r3, [r7, #0]
    7710:	4418      	add	r0, r3
    7712:	b280      	uxth	r0, r0
				break; // CLC
    7714:	e6bf      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_Absolute_Y(1));
    7716:	2001      	movs	r0, #1
    7718:	f7fb fcd0 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    771c:	4b23      	ldr	r3, [pc, #140]	; (77ac <loop+0x6e8>)
    771e:	781a      	ldrb	r2, [r3, #0]
    7720:	4310      	orrs	r0, r2
    7722:	b2c0      	uxtb	r0, r0
    7724:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7726:	f7fb fc09 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x19].length);
    772a:	4b1f      	ldr	r3, [pc, #124]	; (77a8 <loop+0x6e4>)
    772c:	f893 0545 	ldrb.w	r0, [r3, #1349]	; 0x545
    7730:	883b      	ldrh	r3, [r7, #0]
    7732:	4418      	add	r0, r3
    7734:	b280      	uxth	r0, r0
				break; // OR - Absolute,Y
    7736:	e6ae      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x1B();
    7738:	f7fd ffb2 	bl	56a0 <opcode_0x1B()>
				break; // SLO - Absolute , Y
    773c:	e6ab      	b.n	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    773e:	2001      	movs	r0, #1
    7740:	f7fb fc8c 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    7744:	4b18      	ldr	r3, [pc, #96]	; (77a8 <loop+0x6e4>)
    7746:	f893 05e1 	ldrb.w	r0, [r3, #1505]	; 0x5e1
    774a:	883b      	ldrh	r3, [r7, #0]
    774c:	4418      	add	r0, r3
    774e:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7750:	e6a1      	b.n	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_Absolute_X(1));
    7752:	2001      	movs	r0, #1
    7754:	f7fb fc82 	bl	305c <Fetch_Absolute_X(unsigned char)>
    7758:	4b14      	ldr	r3, [pc, #80]	; (77ac <loop+0x6e8>)
    775a:	781a      	ldrb	r2, [r3, #0]
    775c:	4310      	orrs	r0, r2
    775e:	b2c0      	uxtb	r0, r0
    7760:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7762:	f7fb fbeb 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x1D].length);
    7766:	4b10      	ldr	r3, [pc, #64]	; (77a8 <loop+0x6e4>)
    7768:	f893 0615 	ldrb.w	r0, [r3, #1557]	; 0x615
    776c:	883b      	ldrh	r3, [r7, #0]
    776e:	4418      	add	r0, r3
    7770:	b280      	uxth	r0, r0
				break; // OR - Absolute,X
    7772:	e690      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x1E();
    7774:	f7fc fdba 	bl	42ec <opcode_0x1E()>
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    7778:	e68d      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x1F();
    777a:	f7fd ff5d 	bl	5638 <opcode_0x1F()>
				break; // SLO - Absolute , X
    777e:	e68a      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x20();
    7780:	f7fd fbf6 	bl	4f70 <opcode_0x20()>
				break; // JSR - Jump to Subroutine
    7784:	e687      	b.n	7496 <loop+0x3d2>
    7786:	bf00      	nop
    7788:	200188a2 	.word	0x200188a2
    778c:	20004a1f 	.word	0x20004a1f
    7790:	200188a0 	.word	0x200188a0
    7794:	20004a20 	.word	0x20004a20
    7798:	20000a8c 	.word	0x20000a8c
    779c:	20004410 	.word	0x20004410
    77a0:	200010d4 	.word	0x200010d4
    77a4:	20000444 	.word	0x20000444
    77a8:	20015418 	.word	0x20015418
    77ac:	200188a8 	.word	0x200188a8
    77b0:	20018818 	.word	0x20018818
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    77b4:	f7fb fcb2 	bl	311c <Fetch_Indexed_Indirect_X()>
    77b8:	4bb2      	ldr	r3, [pc, #712]	; (7a84 <loop+0x9c0>)
    77ba:	781a      	ldrb	r2, [r3, #0]
    77bc:	4010      	ands	r0, r2
    77be:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    77c0:	f7fb fbbc 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x21].length);
    77c4:	4bb0      	ldr	r3, [pc, #704]	; (7a88 <loop+0x9c4>)
    77c6:	f893 06e5 	ldrb.w	r0, [r3, #1765]	; 0x6e5
    77ca:	883b      	ldrh	r3, [r7, #0]
    77cc:	4418      	add	r0, r3
    77ce:	b280      	uxth	r0, r0
				break; // AND - Indexed Indirect
    77d0:	e661      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x23();
    77d2:	f7fe f80f 	bl	57f4 <opcode_0x23()>
				break; // RLA - Indexed Indirect X
    77d6:	e65e      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x24();
    77d8:	f7fc fb6a 	bl	3eb0 <opcode_0x24()>
				break; // BIT - ZeroPage
    77dc:	e65b      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_ZeroPage());
    77de:	f7fb fbcd 	bl	2f7c <Fetch_ZeroPage()>
    77e2:	4ba8      	ldr	r3, [pc, #672]	; (7a84 <loop+0x9c0>)
    77e4:	781a      	ldrb	r2, [r3, #0]
    77e6:	4010      	ands	r0, r2
    77e8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    77ea:	f7fb fba7 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x25].length);
    77ee:	4ba6      	ldr	r3, [pc, #664]	; (7a88 <loop+0x9c4>)
    77f0:	f893 07b5 	ldrb.w	r0, [r3, #1973]	; 0x7b5
    77f4:	883b      	ldrh	r3, [r7, #0]
    77f6:	4418      	add	r0, r3
    77f8:	b280      	uxth	r0, r0
				break; // AND - ZeroPage
    77fa:	e64c      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x26();
    77fc:	f7fd f842 	bl	4884 <opcode_0x26()>
				break; // ROL - Rotate Left - ZeroPage
    7800:	e649      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x27();
    7802:	f7fd ff81 	bl	5708 <opcode_0x27()>
				break; // RLA - ZeroPage
    7806:	e646      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x28();
    7808:	f7fc faa6 	bl	3d58 <opcode_0x28()>
				break; // PLP - Pop processor status from the stack
    780c:	e643      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x29();
    780e:	f7fc fafb 	bl	3e08 <opcode_0x29()>
				break; // AND - Immediate
    7812:	e640      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x2A();
    7814:	f7fc f936 	bl	3a84 <opcode_0x2A()>
				break; // ROL A
    7818:	e63d      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x2B();
    781a:	f7fe fe91 	bl	6540 <opcode_0x2B()>
				break; // ANC - Immediate
    781e:	e63a      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x2C();
    7820:	f7fc fb76 	bl	3f10 <opcode_0x2C()>
				break; // BIT - Absolute
    7824:	e637      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_Absolute());
    7826:	f7fb fbfd 	bl	3024 <Fetch_Absolute()>
    782a:	4b96      	ldr	r3, [pc, #600]	; (7a84 <loop+0x9c0>)
    782c:	781a      	ldrb	r2, [r3, #0]
    782e:	4010      	ands	r0, r2
    7830:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7832:	f7fb fb83 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2D].length);
    7836:	4b94      	ldr	r3, [pc, #592]	; (7a88 <loop+0x9c4>)
    7838:	f893 0955 	ldrb.w	r0, [r3, #2389]	; 0x955
    783c:	883b      	ldrh	r3, [r7, #0]
    783e:	4418      	add	r0, r3
    7840:	b280      	uxth	r0, r0
				break; // AND - Absolute
    7842:	e628      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x2E();
    7844:	f7fd f888 	bl	4958 <opcode_0x2E()>
				break; // ROL - Rotate Left - Absolute
    7848:	e625      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x2F();
    784a:	f7fe f83f 	bl	58cc <opcode_0x2F()>
				break; // RLA - Absolute
    784e:	e622      	b.n	7496 <loop+0x3d2>
    if ((flag_n) == 1) Branch_Taken();
    7850:	4b8e      	ldr	r3, [pc, #568]	; (7a8c <loop+0x9c8>)
    7852:	781b      	ldrb	r3, [r3, #0]
    7854:	09db      	lsrs	r3, r3, #7
    7856:	f041 8028 	bne.w	88aa <loop+0x17e6>
        register_pc = register_pc + opcode_info[0x30].length;
    785a:	4b8b      	ldr	r3, [pc, #556]	; (7a88 <loop+0x9c4>)
    return read_byte(register_pc+offset, false);
    785c:	2100      	movs	r1, #0
    785e:	883a      	ldrh	r2, [r7, #0]
    7860:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
    7864:	4413      	add	r3, r2
    7866:	b29b      	uxth	r3, r3
    7868:	803b      	strh	r3, [r7, #0]
    786a:	3301      	adds	r3, #1
    786c:	b298      	uxth	r0, r3
    786e:	f7fb f8a1 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc);
    7872:	8838      	ldrh	r0, [r7, #0]
				break; // BMI - Branch on Minus (N Flag Set)
    7874:	e60f      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    7876:	2001      	movs	r0, #1
    7878:	f7fb fc7a 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    787c:	4b81      	ldr	r3, [pc, #516]	; (7a84 <loop+0x9c0>)
    787e:	781a      	ldrb	r2, [r3, #0]
    7880:	4010      	ands	r0, r2
    7882:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7884:	f7fb fb5a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x31].length);
    7888:	4b7f      	ldr	r3, [pc, #508]	; (7a88 <loop+0x9c4>)
    788a:	f893 0a25 	ldrb.w	r0, [r3, #2597]	; 0xa25
    788e:	883b      	ldrh	r3, [r7, #0]
    7890:	4418      	add	r0, r3
    7892:	b280      	uxth	r0, r0
				break; // AND - Indirect Indexed
    7894:	e5ff      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x33();
    7896:	f7fd ffe3 	bl	5860 <opcode_0x33()>
				break; // RLA - Indirect Indexed  Y
    789a:	e5fc      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage_X();
    789c:	f7fb fb82 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    78a0:	4b79      	ldr	r3, [pc, #484]	; (7a88 <loop+0x9c4>)
    78a2:	f893 0ac1 	ldrb.w	r0, [r3, #2753]	; 0xac1
    78a6:	883b      	ldrh	r3, [r7, #0]
    78a8:	4418      	add	r0, r3
    78aa:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    78ac:	e5f3      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_ZeroPage_X());
    78ae:	f7fb fb79 	bl	2fa4 <Fetch_ZeroPage_X()>
    78b2:	4b74      	ldr	r3, [pc, #464]	; (7a84 <loop+0x9c0>)
    78b4:	781a      	ldrb	r2, [r3, #0]
    78b6:	4010      	ands	r0, r2
    78b8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    78ba:	f7fb fb3f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x35].length);
    78be:	4b72      	ldr	r3, [pc, #456]	; (7a88 <loop+0x9c4>)
    78c0:	f893 0af5 	ldrb.w	r0, [r3, #2805]	; 0xaf5
    78c4:	883b      	ldrh	r3, [r7, #0]
    78c6:	4418      	add	r0, r3
    78c8:	b280      	uxth	r0, r0
				break; // AND - ZeroPage,X
    78ca:	e5e4      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x36();
    78cc:	f7fd f814 	bl	48f8 <opcode_0x36()>
				break; // ROL - Rotate Left - ZeroPage , X
    78d0:	e5e1      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x37();
    78d2:	f7fd ff59 	bl	5788 <opcode_0x37()>
				break; // RLA - ZeroPage , X
    78d6:	e5de      	b.n	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    78d8:	8838      	ldrh	r0, [r7, #0]
    78da:	2100      	movs	r1, #0
    78dc:	3001      	adds	r0, #1
    78de:	b280      	uxth	r0, r0
    78e0:	f7fb f868 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x38].length);
    78e4:	4b68      	ldr	r3, [pc, #416]	; (7a88 <loop+0x9c4>)
    register_flags = register_flags | 0x01;
    78e6:	4a69      	ldr	r2, [pc, #420]	; (7a8c <loop+0x9c8>)
    return(register_pc + opcode_info[0x38].length);
    78e8:	f893 0b91 	ldrb.w	r0, [r3, #2961]	; 0xb91
    register_flags = register_flags | 0x01;
    78ec:	7813      	ldrb	r3, [r2, #0]
    78ee:	f043 0301 	orr.w	r3, r3, #1
    78f2:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    78f4:	883b      	ldrh	r3, [r7, #0]
    78f6:	4418      	add	r0, r3
    78f8:	b280      	uxth	r0, r0
				break; // SEC
    78fa:	e5cc      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_Absolute_Y(1));
    78fc:	2001      	movs	r0, #1
    78fe:	f7fb fbdd 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    7902:	4b60      	ldr	r3, [pc, #384]	; (7a84 <loop+0x9c0>)
    7904:	781a      	ldrb	r2, [r3, #0]
    7906:	4010      	ands	r0, r2
    7908:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    790a:	f7fb fb17 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x39].length);
    790e:	4b5e      	ldr	r3, [pc, #376]	; (7a88 <loop+0x9c4>)
    7910:	f893 0bc5 	ldrb.w	r0, [r3, #3013]	; 0xbc5
    7914:	883b      	ldrh	r3, [r7, #0]
    7916:	4418      	add	r0, r3
    7918:	b280      	uxth	r0, r0
				break; // AND - Absolute,Y
    791a:	e5bc      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x3B();
    791c:	f7fe f842 	bl	59a4 <opcode_0x3B()>
				break; // RLA - Absolute , Y
    7920:	e5b9      	b.n	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    7922:	2001      	movs	r0, #1
    7924:	f7fb fb9a 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    7928:	4b57      	ldr	r3, [pc, #348]	; (7a88 <loop+0x9c4>)
    792a:	f893 0c61 	ldrb.w	r0, [r3, #3169]	; 0xc61
    792e:	883b      	ldrh	r3, [r7, #0]
    7930:	4418      	add	r0, r3
    7932:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7934:	e5af      	b.n	7496 <loop+0x3d2>
    register_a = register_a & (Fetch_Absolute_X(1));
    7936:	2001      	movs	r0, #1
    7938:	f7fb fb90 	bl	305c <Fetch_Absolute_X(unsigned char)>
    793c:	4b51      	ldr	r3, [pc, #324]	; (7a84 <loop+0x9c0>)
    793e:	781a      	ldrb	r2, [r3, #0]
    7940:	4010      	ands	r0, r2
    7942:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7944:	f7fb fafa 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x3D].length);
    7948:	4b4f      	ldr	r3, [pc, #316]	; (7a88 <loop+0x9c4>)
    794a:	f893 0c95 	ldrb.w	r0, [r3, #3221]	; 0xc95
    794e:	883b      	ldrh	r3, [r7, #0]
    7950:	4418      	add	r0, r3
    7952:	b280      	uxth	r0, r0
				break; // AND - Absolute,X
    7954:	e59f      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x3E();
    7956:	f7fd f82f 	bl	49b8 <opcode_0x3E()>
				break; // ROL - Rotate Left - Absolute , X
    795a:	e59c      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x3F();
    795c:	f7fd ffec 	bl	5938 <opcode_0x3F()>
				break; // RLA - Absolute , X
    7960:	e599      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x40();
    7962:	f7fd fbcd 	bl	5100 <opcode_0x40()>
				break; // RTI - Return from Interrupt
    7966:	e596      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    7968:	f7fb fbd8 	bl	311c <Fetch_Indexed_Indirect_X()>
    796c:	4b45      	ldr	r3, [pc, #276]	; (7a84 <loop+0x9c0>)
    796e:	781a      	ldrb	r2, [r3, #0]
    7970:	4050      	eors	r0, r2
    7972:	b2c0      	uxtb	r0, r0
    7974:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7976:	f7fb fae1 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x41].length);
    797a:	4b43      	ldr	r3, [pc, #268]	; (7a88 <loop+0x9c4>)
    797c:	f893 0d65 	ldrb.w	r0, [r3, #3429]	; 0xd65
    7980:	883b      	ldrh	r3, [r7, #0]
    7982:	4418      	add	r0, r3
    7984:	b280      	uxth	r0, r0
				break; // EOR - Indexed Indirect X
    7986:	e586      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x43();
    7988:	f7fe f8b0 	bl	5aec <opcode_0x43()>
				break; // SRE - Indexed Indirect X
    798c:	e583      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage();
    798e:	f7fb faf5 	bl	2f7c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    7992:	4b3d      	ldr	r3, [pc, #244]	; (7a88 <loop+0x9c4>)
    7994:	f893 0e01 	ldrb.w	r0, [r3, #3585]	; 0xe01
    7998:	883b      	ldrh	r3, [r7, #0]
    799a:	4418      	add	r0, r3
    799c:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    799e:	e57a      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_ZeroPage());
    79a0:	f7fb faec 	bl	2f7c <Fetch_ZeroPage()>
    79a4:	4b37      	ldr	r3, [pc, #220]	; (7a84 <loop+0x9c0>)
    79a6:	781a      	ldrb	r2, [r3, #0]
    79a8:	4050      	eors	r0, r2
    79aa:	b2c0      	uxtb	r0, r0
    79ac:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79ae:	f7fb fac5 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x45].length);
    79b2:	4b35      	ldr	r3, [pc, #212]	; (7a88 <loop+0x9c4>)
    79b4:	f893 0e35 	ldrb.w	r0, [r3, #3637]	; 0xe35
    79b8:	883b      	ldrh	r3, [r7, #0]
    79ba:	4418      	add	r0, r3
    79bc:	b280      	uxth	r0, r0
				break; // EOR - ZeroPage
    79be:	e56a      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x46();
    79c0:	f7fc fdd0 	bl	4564 <opcode_0x46()>
				break; // LSR - Logical Shift Right - ZeroPage
    79c4:	e567      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x47();
    79c6:	f7fe f823 	bl	5a10 <opcode_0x47()>
				break; // SRE - ZeroPage
    79ca:	e564      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x48();
    79cc:	f7fc f9a2 	bl	3d14 <opcode_0x48()>
				break; // PHA - Push Accumulator to the stack
    79d0:	e561      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x49();
    79d2:	f7fc fa51 	bl	3e78 <opcode_0x49()>
				break; // EOR - Immediate
    79d6:	e55e      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x4A();
    79d8:	f7fc f804 	bl	39e4 <opcode_0x4A()>
				break; // LSR A
    79dc:	e55b      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x4B();
    79de:	f7fe fdd5 	bl	658c <opcode_0x4B()>
				break; // ALR - Immediate
    79e2:	e558      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x4C();
    79e4:	f7fd f956 	bl	4c94 <opcode_0x4C()>
				break; // JMP - Jump Absolute
    79e8:	e555      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_Absolute());
    79ea:	f7fb fb1b 	bl	3024 <Fetch_Absolute()>
    79ee:	4b25      	ldr	r3, [pc, #148]	; (7a84 <loop+0x9c0>)
    79f0:	781a      	ldrb	r2, [r3, #0]
    79f2:	4050      	eors	r0, r2
    79f4:	b2c0      	uxtb	r0, r0
    79f6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79f8:	f7fb faa0 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4D].length);
    79fc:	4b22      	ldr	r3, [pc, #136]	; (7a88 <loop+0x9c4>)
    79fe:	f893 0fd5 	ldrb.w	r0, [r3, #4053]	; 0xfd5
    7a02:	883b      	ldrh	r3, [r7, #0]
    7a04:	4418      	add	r0, r3
    7a06:	b280      	uxth	r0, r0
				break; // EOR - Absolute
    7a08:	e545      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x4E();
    7a0a:	f7fc fe0f 	bl	462c <opcode_0x4E()>
				break; // LSR - Logical Shift Right - Absolute
    7a0e:	e542      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x4F();
    7a10:	f7fe f8d2 	bl	5bb8 <opcode_0x4F()>
				break; // SRE - Absolute
    7a14:	e53f      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x50();
    7a16:	f7fd f91f 	bl	4c58 <opcode_0x50()>
				break; // BVC - Branch on Overflow Clear
    7a1a:	e53c      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    7a1c:	2001      	movs	r0, #1
    7a1e:	f7fb fba7 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7a22:	4b18      	ldr	r3, [pc, #96]	; (7a84 <loop+0x9c0>)
    7a24:	781a      	ldrb	r2, [r3, #0]
    7a26:	4050      	eors	r0, r2
    7a28:	b2c0      	uxtb	r0, r0
    7a2a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a2c:	f7fb fa86 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x51].length);
    7a30:	4b17      	ldr	r3, [pc, #92]	; (7a90 <loop+0x9cc>)
    7a32:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
    7a36:	883b      	ldrh	r3, [r7, #0]
    7a38:	4418      	add	r0, r3
    7a3a:	b280      	uxth	r0, r0
				break; // EOR - Indirect Indexed  Y
    7a3c:	e52b      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x53();
    7a3e:	f7fe f887 	bl	5b50 <opcode_0x53()>
				break; // SRE - Indirect Indexed  Y
    7a42:	e528      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage_X();
    7a44:	f7fb faae 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    7a48:	4b11      	ldr	r3, [pc, #68]	; (7a90 <loop+0x9cc>)
    7a4a:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
    7a4e:	883b      	ldrh	r3, [r7, #0]
    7a50:	4418      	add	r0, r3
    7a52:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    7a54:	e51f      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_ZeroPage_X());
    7a56:	f7fb faa5 	bl	2fa4 <Fetch_ZeroPage_X()>
    7a5a:	4b0a      	ldr	r3, [pc, #40]	; (7a84 <loop+0x9c0>)
    7a5c:	781a      	ldrb	r2, [r3, #0]
    7a5e:	4050      	eors	r0, r2
    7a60:	b2c0      	uxtb	r0, r0
    7a62:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a64:	f7fb fa6a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x55].length);
    7a68:	4b09      	ldr	r3, [pc, #36]	; (7a90 <loop+0x9cc>)
    7a6a:	f893 0175 	ldrb.w	r0, [r3, #373]	; 0x175
    7a6e:	883b      	ldrh	r3, [r7, #0]
    7a70:	4418      	add	r0, r3
    7a72:	b280      	uxth	r0, r0
				break; // EOR - ZeroPage,X
    7a74:	e50f      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x56();
    7a76:	f7fc fdab 	bl	45d0 <opcode_0x56()>
				break; // LSR - Logical Shift Right - ZeroPage , X
    7a7a:	e50c      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x57();
    7a7c:	f7fe f804 	bl	5a88 <opcode_0x57()>
				break; // SRE - ZeroPage , X
    7a80:	e509      	b.n	7496 <loop+0x3d2>
    7a82:	bf00      	nop
    7a84:	200188a8 	.word	0x200188a8
    7a88:	20015418 	.word	0x20015418
    7a8c:	20004a20 	.word	0x20004a20
    7a90:	20016418 	.word	0x20016418
    read_byte(register_pc+1, false);
    7a94:	8838      	ldrh	r0, [r7, #0]
    7a96:	2100      	movs	r1, #0
    7a98:	3001      	adds	r0, #1
    7a9a:	b280      	uxth	r0, r0
    7a9c:	f7fa ff8a 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x58].length);
    7aa0:	4bb4      	ldr	r3, [pc, #720]	; (7d74 <loop+0xcb0>)
    register_flags = register_flags & 0xFB;
    7aa2:	4ab5      	ldr	r2, [pc, #724]	; (7d78 <loop+0xcb4>)
    return(register_pc + opcode_info[0x58].length);
    7aa4:	f893 0211 	ldrb.w	r0, [r3, #529]	; 0x211
    register_flags = register_flags & 0xFB;
    7aa8:	7813      	ldrb	r3, [r2, #0]
    7aaa:	f023 0304 	bic.w	r3, r3, #4
    7aae:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    7ab0:	883b      	ldrh	r3, [r7, #0]
    7ab2:	4418      	add	r0, r3
    7ab4:	b280      	uxth	r0, r0
				break; // CLI
    7ab6:	e4ee      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    7ab8:	2001      	movs	r0, #1
    7aba:	f7fb faff 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    7abe:	4baf      	ldr	r3, [pc, #700]	; (7d7c <loop+0xcb8>)
    7ac0:	781a      	ldrb	r2, [r3, #0]
    7ac2:	4050      	eors	r0, r2
    7ac4:	b2c0      	uxtb	r0, r0
    7ac6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7ac8:	f7fb fa38 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x59].length);
    7acc:	4ba9      	ldr	r3, [pc, #676]	; (7d74 <loop+0xcb0>)
    7ace:	f893 0245 	ldrb.w	r0, [r3, #581]	; 0x245
    7ad2:	883b      	ldrh	r3, [r7, #0]
    7ad4:	4418      	add	r0, r3
    7ad6:	b280      	uxth	r0, r0
				break; // EOR - Absolute,Y
    7ad8:	e4dd      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x5B();
    7ada:	f7fe f8d3 	bl	5c84 <opcode_0x5B()>
				break; // RE - Absolute , Y
    7ade:	e4da      	b.n	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    7ae0:	2001      	movs	r0, #1
    7ae2:	f7fb fabb 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    7ae6:	4ba3      	ldr	r3, [pc, #652]	; (7d74 <loop+0xcb0>)
    7ae8:	f893 02e1 	ldrb.w	r0, [r3, #737]	; 0x2e1
    7aec:	883b      	ldrh	r3, [r7, #0]
    7aee:	4418      	add	r0, r3
    7af0:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7af2:	e4d0      	b.n	7496 <loop+0x3d2>
    register_a = register_a ^ (Fetch_Absolute_X(1));
    7af4:	2001      	movs	r0, #1
    7af6:	f7fb fab1 	bl	305c <Fetch_Absolute_X(unsigned char)>
    7afa:	4ba0      	ldr	r3, [pc, #640]	; (7d7c <loop+0xcb8>)
    7afc:	781a      	ldrb	r2, [r3, #0]
    7afe:	4050      	eors	r0, r2
    7b00:	b2c0      	uxtb	r0, r0
    7b02:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b04:	f7fb fa1a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x5D].length);
    7b08:	4b9a      	ldr	r3, [pc, #616]	; (7d74 <loop+0xcb0>)
    7b0a:	f893 0315 	ldrb.w	r0, [r3, #789]	; 0x315
    7b0e:	883b      	ldrh	r3, [r7, #0]
    7b10:	4418      	add	r0, r3
    7b12:	b280      	uxth	r0, r0
				break; // EOR - Absolute,X
    7b14:	e4bf      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x5E();
    7b16:	f7fc fdb5 	bl	4684 <opcode_0x5E()>
				break; // LSR - Logical Shift Right - Absolute , X
    7b1a:	e4bc      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x5F();
    7b1c:	f7fe f87e 	bl	5c1c <opcode_0x5F()>
				break; // SRE - Absolute , X
    7b20:	e4b9      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x60();
    7b22:	f7fd fbb9 	bl	5298 <opcode_0x60()>
				break; // RTS - Return from Subroutine
    7b26:	e4b6      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    7b28:	f7fb faf8 	bl	311c <Fetch_Indexed_Indirect_X()>
    7b2c:	b280      	uxth	r0, r0
    7b2e:	f7fb ffd5 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    7b32:	4b90      	ldr	r3, [pc, #576]	; (7d74 <loop+0xcb0>)
    7b34:	f893 03e5 	ldrb.w	r0, [r3, #997]	; 0x3e5
    7b38:	883b      	ldrh	r3, [r7, #0]
    7b3a:	4418      	add	r0, r3
    7b3c:	b280      	uxth	r0, r0
				break; // ADC - Indexed Indirect X
    7b3e:	e4aa      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x63();
    7b40:	f7fe f93a 	bl	5db8 <opcode_0x63()>
				break; // RRA - Indexed Indirect X
    7b44:	e4a7      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage();
    7b46:	f7fb fa19 	bl	2f7c <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    7b4a:	4b8a      	ldr	r3, [pc, #552]	; (7d74 <loop+0xcb0>)
    7b4c:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    7b50:	883b      	ldrh	r3, [r7, #0]
    7b52:	4418      	add	r0, r3
    7b54:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    7b56:	e49e      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_ZeroPage());
    7b58:	f7fb fa10 	bl	2f7c <Fetch_ZeroPage()>
    7b5c:	b280      	uxth	r0, r0
    7b5e:	f7fb ffbd 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    7b62:	4b84      	ldr	r3, [pc, #528]	; (7d74 <loop+0xcb0>)
    7b64:	f893 04b5 	ldrb.w	r0, [r3, #1205]	; 0x4b5
    7b68:	883b      	ldrh	r3, [r7, #0]
    7b6a:	4418      	add	r0, r3
    7b6c:	b280      	uxth	r0, r0
				break; // ADC - ZeroPage
    7b6e:	e492      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x66();
    7b70:	f7fc fdb6 	bl	46e0 <opcode_0x66()>
				break; // ROR - Rotate Right - ZeroPage
    7b74:	e48f      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x67();
    7b76:	f7fe f8b9 	bl	5cec <opcode_0x67()>
				break; // RRA - ZeroPage
    7b7a:	e48c      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x68();
    7b7c:	f7fc f918 	bl	3db0 <opcode_0x68()>
				break; // PLA - Pop Accumulator from the stack
    7b80:	e489      	b.n	7496 <loop+0x3d2>
    return read_byte(register_pc+offset, false);
    7b82:	8838      	ldrh	r0, [r7, #0]
    7b84:	2100      	movs	r1, #0
    7b86:	3001      	adds	r0, #1
    7b88:	b280      	uxth	r0, r0
    7b8a:	f7fa ff13 	bl	29b4 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    7b8e:	b280      	uxth	r0, r0
    7b90:	f7fb ffa4 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    7b94:	4b77      	ldr	r3, [pc, #476]	; (7d74 <loop+0xcb0>)
    7b96:	f893 0585 	ldrb.w	r0, [r3, #1413]	; 0x585
    7b9a:	883b      	ldrh	r3, [r7, #0]
    7b9c:	4418      	add	r0, r3
    7b9e:	b280      	uxth	r0, r0
				break; // ADC - Immediate
    7ba0:	e479      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x6A();
    7ba2:	f7fb ff45 	bl	3a30 <opcode_0x6A()>
				break; // ROR A
    7ba6:	e476      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x6B();
    7ba8:	f7fe fd1a 	bl	65e0 <opcode_0x6B()>
				break; // ARR - Immediate
    7bac:	e473      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x6C();
    7bae:	f7fd f921 	bl	4df4 <opcode_0x6C()>
				break; // JMP - Jump Indirect
    7bb2:	e470      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_Absolute());
    7bb4:	f7fb fa36 	bl	3024 <Fetch_Absolute()>
    7bb8:	b280      	uxth	r0, r0
    7bba:	f7fb ff8f 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    7bbe:	4b6d      	ldr	r3, [pc, #436]	; (7d74 <loop+0xcb0>)
    7bc0:	f893 0655 	ldrb.w	r0, [r3, #1621]	; 0x655
    7bc4:	883b      	ldrh	r3, [r7, #0]
    7bc6:	4418      	add	r0, r3
    7bc8:	b280      	uxth	r0, r0
				break; // ADC - Absolute
    7bca:	e464      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x6E();
    7bcc:	f7fc fdf6 	bl	47bc <opcode_0x6E()>
				break; // ROR - Rotate Right - Absolute
    7bd0:	e461      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x6F();
    7bd2:	f7fe f94f 	bl	5e74 <opcode_0x6F()>
				break; // RRA - Absolute
    7bd6:	e45e      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x70();
    7bd8:	f7fd f81e 	bl	4c18 <opcode_0x70()>
				break; // BVS - Branch on Overflow Set
    7bdc:	e45b      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    7bde:	2001      	movs	r0, #1
    7be0:	f7fb fac6 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7be4:	b280      	uxth	r0, r0
    7be6:	f7fb ff79 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    7bea:	4b62      	ldr	r3, [pc, #392]	; (7d74 <loop+0xcb0>)
    7bec:	f893 0725 	ldrb.w	r0, [r3, #1829]	; 0x725
    7bf0:	883b      	ldrh	r3, [r7, #0]
    7bf2:	4418      	add	r0, r3
    7bf4:	b280      	uxth	r0, r0
				break; // ADC - Indirect Indexed  Y
    7bf6:	e44e      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x73();
    7bf8:	f7fe f90c 	bl	5e14 <opcode_0x73()>
				break; // RRA - Indirect Indexed  Y
    7bfc:	e44b      	b.n	7496 <loop+0x3d2>
    Fetch_ZeroPage_X();
    7bfe:	f7fb f9d1 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    7c02:	4b5c      	ldr	r3, [pc, #368]	; (7d74 <loop+0xcb0>)
    7c04:	f893 07c1 	ldrb.w	r0, [r3, #1985]	; 0x7c1
    7c08:	883b      	ldrh	r3, [r7, #0]
    7c0a:	4418      	add	r0, r3
    7c0c:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    7c0e:	e442      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_ZeroPage_X());
    7c10:	f7fb f9c8 	bl	2fa4 <Fetch_ZeroPage_X()>
    7c14:	b280      	uxth	r0, r0
    7c16:	f7fb ff61 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    7c1a:	4b56      	ldr	r3, [pc, #344]	; (7d74 <loop+0xcb0>)
    7c1c:	f893 07f5 	ldrb.w	r0, [r3, #2037]	; 0x7f5
    7c20:	883b      	ldrh	r3, [r7, #0]
    7c22:	4418      	add	r0, r3
    7c24:	b280      	uxth	r0, r0
				break; // ADC - ZeroPage , X
    7c26:	e436      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x76();
    7c28:	f7fc fd96 	bl	4758 <opcode_0x76()>
				break; // ROR - Rotate Right - ZeroPage , X
    7c2c:	e433      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x77();
    7c2e:	f7fe f895 	bl	5d5c <opcode_0x77()>
				break; // RRA - ZeroPage , X
    7c32:	e430      	b.n	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    7c34:	8838      	ldrh	r0, [r7, #0]
    7c36:	2100      	movs	r1, #0
    7c38:	3001      	adds	r0, #1
    7c3a:	b280      	uxth	r0, r0
    7c3c:	f7fa feba 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x78].length);
    7c40:	4b4c      	ldr	r3, [pc, #304]	; (7d74 <loop+0xcb0>)
    register_flags = register_flags | 0x04;
    7c42:	4a4d      	ldr	r2, [pc, #308]	; (7d78 <loop+0xcb4>)
    return(register_pc + opcode_info[0x78].length);
    7c44:	f893 0891 	ldrb.w	r0, [r3, #2193]	; 0x891
    register_flags = register_flags | 0x04;
    7c48:	7813      	ldrb	r3, [r2, #0]
    7c4a:	f043 0304 	orr.w	r3, r3, #4
    7c4e:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    7c50:	883b      	ldrh	r3, [r7, #0]
    7c52:	4418      	add	r0, r3
    7c54:	b280      	uxth	r0, r0
				break; // SEI
    7c56:	e41e      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_Absolute_Y(1));
    7c58:	2001      	movs	r0, #1
    7c5a:	f7fb fa2f 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    7c5e:	b280      	uxth	r0, r0
    7c60:	f7fb ff3c 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    7c64:	4b43      	ldr	r3, [pc, #268]	; (7d74 <loop+0xcb0>)
    7c66:	f893 08c5 	ldrb.w	r0, [r3, #2245]	; 0x8c5
    7c6a:	883b      	ldrh	r3, [r7, #0]
    7c6c:	4418      	add	r0, r3
    7c6e:	b280      	uxth	r0, r0
				break; // ADC - Absolute , Y
    7c70:	e411      	b.n	7496 <loop+0x3d2>
				next_pc = opcode_0x7B();
    7c72:	f7fe f95d 	bl	5f30 <opcode_0x7B()>
				break; // RRA - Absolute , Y
    7c76:	e40e      	b.n	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    7c78:	2001      	movs	r0, #1
    7c7a:	f7fb f9ef 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    7c7e:	4b3d      	ldr	r3, [pc, #244]	; (7d74 <loop+0xcb0>)
    7c80:	f893 0961 	ldrb.w	r0, [r3, #2401]	; 0x961
    7c84:	883b      	ldrh	r3, [r7, #0]
    7c86:	4418      	add	r0, r3
    7c88:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7c8a:	e404      	b.n	7496 <loop+0x3d2>
    Calculate_ADC(Fetch_Absolute_X(1));
    7c8c:	2001      	movs	r0, #1
    7c8e:	f7fb f9e5 	bl	305c <Fetch_Absolute_X(unsigned char)>
    7c92:	b280      	uxth	r0, r0
    7c94:	f7fb ff22 	bl	3adc <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    7c98:	4b36      	ldr	r3, [pc, #216]	; (7d74 <loop+0xcb0>)
    7c9a:	f893 0995 	ldrb.w	r0, [r3, #2453]	; 0x995
    7c9e:	883b      	ldrh	r3, [r7, #0]
    7ca0:	4418      	add	r0, r3
    7ca2:	b280      	uxth	r0, r0
				break; // ADC - Absolute , X
    7ca4:	f7ff bbf7 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0x7E();
    7ca8:	f7fc fdba 	bl	4820 <opcode_0x7E()>
				break; // ROR - Rotate Right - Absolute , X
    7cac:	f7ff bbf3 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0x7F();
    7cb0:	f7fe f90e 	bl	5ed0 <opcode_0x7F()>
				break; // RRA - Absolute , X
    7cb4:	f7ff bbef 	b.w	7496 <loop+0x3d2>
    Fetch_Immediate(1);
    7cb8:	2001      	movs	r0, #1
    7cba:	f7fb f953 	bl	2f64 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    7cbe:	4b2d      	ldr	r3, [pc, #180]	; (7d74 <loop+0xcb0>)
    7cc0:	f893 0a31 	ldrb.w	r0, [r3, #2609]	; 0xa31
    7cc4:	883b      	ldrh	r3, [r7, #0]
    7cc6:	4418      	add	r0, r3
    7cc8:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7cca:	f7ff bbe4 	b.w	7496 <loop+0x3d2>
    Write_Indexed_Indirect_X(register_a);
    7cce:	4b2b      	ldr	r3, [pc, #172]	; (7d7c <loop+0xcb8>)
    7cd0:	7818      	ldrb	r0, [r3, #0]
    7cd2:	f7fb fb35 	bl	3340 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x81].length);
    7cd6:	4b27      	ldr	r3, [pc, #156]	; (7d74 <loop+0xcb0>)
    7cd8:	f893 0a65 	ldrb.w	r0, [r3, #2661]	; 0xa65
    7cdc:	883b      	ldrh	r3, [r7, #0]
    7cde:	4418      	add	r0, r3
    7ce0:	b280      	uxth	r0, r0
				break; // STA - Indexed Indirect X
    7ce2:	f7ff bbd8 	b.w	7496 <loop+0x3d2>
    Fetch_Immediate(1);
    7ce6:	2001      	movs	r0, #1
    7ce8:	f7fb f93c 	bl	2f64 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    7cec:	4b21      	ldr	r3, [pc, #132]	; (7d74 <loop+0xcb0>)
    7cee:	f893 0a99 	ldrb.w	r0, [r3, #2713]	; 0xa99
    7cf2:	883b      	ldrh	r3, [r7, #0]
    7cf4:	4418      	add	r0, r3
    7cf6:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7cf8:	f7ff bbcd 	b.w	7496 <loop+0x3d2>
    Write_Indexed_Indirect_X(register_a & register_x);
    7cfc:	4b1f      	ldr	r3, [pc, #124]	; (7d7c <loop+0xcb8>)
    7cfe:	7818      	ldrb	r0, [r3, #0]
    7d00:	4b1f      	ldr	r3, [pc, #124]	; (7d80 <loop+0xcbc>)
    7d02:	781b      	ldrb	r3, [r3, #0]
    7d04:	4018      	ands	r0, r3
    7d06:	f7fb fb1b 	bl	3340 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x83].length);
    7d0a:	4b1a      	ldr	r3, [pc, #104]	; (7d74 <loop+0xcb0>)
    7d0c:	f893 0acd 	ldrb.w	r0, [r3, #2765]	; 0xacd
    7d10:	883b      	ldrh	r3, [r7, #0]
    7d12:	4418      	add	r0, r3
    7d14:	b280      	uxth	r0, r0
				break; // SAX - Indexed Indirect X
    7d16:	f7ff bbbe 	b.w	7496 <loop+0x3d2>
    return read_byte(register_pc+offset, false);
    7d1a:	8838      	ldrh	r0, [r7, #0]
    7d1c:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    7d1e:	4b19      	ldr	r3, [pc, #100]	; (7d84 <loop+0xcc0>)
    7d20:	3001      	adds	r0, #1
    7d22:	781c      	ldrb	r4, [r3, #0]
    7d24:	b280      	uxth	r0, r0
    7d26:	f7fa fe45 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7d2a:	4b17      	ldr	r3, [pc, #92]	; (7d88 <loop+0xcc4>)
    7d2c:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7d2e:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7d30:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7d32:	f7fa fffb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x84].length);
    7d36:	4b0f      	ldr	r3, [pc, #60]	; (7d74 <loop+0xcb0>)
    7d38:	f893 0b01 	ldrb.w	r0, [r3, #2817]	; 0xb01
    7d3c:	883b      	ldrh	r3, [r7, #0]
    7d3e:	4418      	add	r0, r3
    7d40:	b280      	uxth	r0, r0
				break; // STY - ZeroPage
    7d42:	f7ff bba8 	b.w	7496 <loop+0x3d2>
    return read_byte(register_pc+offset, false);
    7d46:	8838      	ldrh	r0, [r7, #0]
    7d48:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    7d4a:	4b0c      	ldr	r3, [pc, #48]	; (7d7c <loop+0xcb8>)
    7d4c:	3001      	adds	r0, #1
    7d4e:	781c      	ldrb	r4, [r3, #0]
    7d50:	b280      	uxth	r0, r0
    7d52:	f7fa fe2f 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7d56:	4b0c      	ldr	r3, [pc, #48]	; (7d88 <loop+0xcc4>)
    7d58:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7d5a:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7d5c:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7d5e:	f7fa ffe5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x85].length);
    7d62:	4b04      	ldr	r3, [pc, #16]	; (7d74 <loop+0xcb0>)
    7d64:	f893 0b35 	ldrb.w	r0, [r3, #2869]	; 0xb35
    7d68:	883b      	ldrh	r3, [r7, #0]
    7d6a:	4418      	add	r0, r3
    7d6c:	b280      	uxth	r0, r0
				break; // STA - ZeroPage
    7d6e:	f7ff bb92 	b.w	7496 <loop+0x3d2>
    7d72:	bf00      	nop
    7d74:	20016418 	.word	0x20016418
    7d78:	20004a20 	.word	0x20004a20
    7d7c:	200188a8 	.word	0x200188a8
    7d80:	200188a9 	.word	0x200188a9
    7d84:	200188aa 	.word	0x200188aa
    7d88:	2001888a 	.word	0x2001888a
    return read_byte(register_pc+offset, false);
    7d8c:	8838      	ldrh	r0, [r7, #0]
    7d8e:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    7d90:	4bad      	ldr	r3, [pc, #692]	; (8048 <loop+0xf84>)
    7d92:	3001      	adds	r0, #1
    7d94:	781c      	ldrb	r4, [r3, #0]
    7d96:	b280      	uxth	r0, r0
    7d98:	f7fa fe0c 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7d9c:	4bab      	ldr	r3, [pc, #684]	; (804c <loop+0xf88>)
    7d9e:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7da0:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7da2:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7da4:	f7fa ffc2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x86].length);
    7da8:	4ba9      	ldr	r3, [pc, #676]	; (8050 <loop+0xf8c>)
    7daa:	f893 0b69 	ldrb.w	r0, [r3, #2921]	; 0xb69
    7dae:	883b      	ldrh	r3, [r7, #0]
    7db0:	4418      	add	r0, r3
    7db2:	b280      	uxth	r0, r0
				break; // STX - ZeroPage
    7db4:	f7ff bb6f 	b.w	7496 <loop+0x3d2>
    Write_ZeroPage(register_a & register_x);
    7db8:	4ba6      	ldr	r3, [pc, #664]	; (8054 <loop+0xf90>)
    return read_byte(register_pc+offset, false);
    7dba:	2100      	movs	r1, #0
    7dbc:	8838      	ldrh	r0, [r7, #0]
    7dbe:	781c      	ldrb	r4, [r3, #0]
    7dc0:	4ba1      	ldr	r3, [pc, #644]	; (8048 <loop+0xf84>)
    7dc2:	3001      	adds	r0, #1
    7dc4:	781b      	ldrb	r3, [r3, #0]
    7dc6:	b280      	uxth	r0, r0
    7dc8:	401c      	ands	r4, r3
    7dca:	f7fa fdf3 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7dce:	4b9f      	ldr	r3, [pc, #636]	; (804c <loop+0xf88>)
    7dd0:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7dd2:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7dd4:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7dd6:	f7fa ffa9 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x87].length);
    7dda:	4b9d      	ldr	r3, [pc, #628]	; (8050 <loop+0xf8c>)
    7ddc:	f893 0b9d 	ldrb.w	r0, [r3, #2973]	; 0xb9d
    7de0:	883b      	ldrh	r3, [r7, #0]
    7de2:	4418      	add	r0, r3
    7de4:	b280      	uxth	r0, r0
				break; // SAX - ZeroPage
    7de6:	f7ff bb56 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    7dea:	8838      	ldrh	r0, [r7, #0]
    7dec:	2100      	movs	r1, #0
    7dee:	3001      	adds	r0, #1
    7df0:	b280      	uxth	r0, r0
    7df2:	f7fa fddf 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_y - 1;
    7df6:	4b98      	ldr	r3, [pc, #608]	; (8058 <loop+0xf94>)
    7df8:	7818      	ldrb	r0, [r3, #0]
    7dfa:	3801      	subs	r0, #1
    7dfc:	b2c0      	uxtb	r0, r0
    7dfe:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7e00:	f7fb f89c 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x88].length);
    7e04:	4b92      	ldr	r3, [pc, #584]	; (8050 <loop+0xf8c>)
    7e06:	f893 0bd1 	ldrb.w	r0, [r3, #3025]	; 0xbd1
    7e0a:	883b      	ldrh	r3, [r7, #0]
    7e0c:	4418      	add	r0, r3
    7e0e:	b280      	uxth	r0, r0
				break; // DEY
    7e10:	f7ff bb41 	b.w	7496 <loop+0x3d2>
    Fetch_Immediate(1);
    7e14:	2001      	movs	r0, #1
    7e16:	f7fb f8a5 	bl	2f64 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    7e1a:	4b8d      	ldr	r3, [pc, #564]	; (8050 <loop+0xf8c>)
    7e1c:	f893 0c05 	ldrb.w	r0, [r3, #3077]	; 0xc05
    7e20:	883b      	ldrh	r3, [r7, #0]
    7e22:	4418      	add	r0, r3
    7e24:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7e26:	f7ff bb36 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    7e2a:	8838      	ldrh	r0, [r7, #0]
    7e2c:	2100      	movs	r1, #0
    7e2e:	3001      	adds	r0, #1
    7e30:	b280      	uxth	r0, r0
    7e32:	f7fa fdbf 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_x;
    7e36:	4b84      	ldr	r3, [pc, #528]	; (8048 <loop+0xf84>)
    7e38:	7818      	ldrb	r0, [r3, #0]
    7e3a:	4b86      	ldr	r3, [pc, #536]	; (8054 <loop+0xf90>)
    7e3c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e3e:	f7fb f87d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x8A].length);
    7e42:	4b83      	ldr	r3, [pc, #524]	; (8050 <loop+0xf8c>)
    7e44:	f893 0c39 	ldrb.w	r0, [r3, #3129]	; 0xc39
    7e48:	883b      	ldrh	r3, [r7, #0]
    7e4a:	4418      	add	r0, r3
    7e4c:	b280      	uxth	r0, r0
				break; // TXA
    7e4e:	f7ff bb22 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    7e52:	2001      	movs	r0, #1
    7e54:	f7fb f886 	bl	2f64 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    7e58:	4b7d      	ldr	r3, [pc, #500]	; (8050 <loop+0xf8c>)
    7e5a:	f893 0c6d 	ldrb.w	r0, [r3, #3181]	; 0xc6d
    7e5e:	883b      	ldrh	r3, [r7, #0]
    7e60:	4418      	add	r0, r3
    7e62:	b280      	uxth	r0, r0
				break; // ANE - Immediate
    7e64:	f7ff bb17 	b.w	7496 <loop+0x3d2>
    Write_Absolute(register_y);
    7e68:	4b7b      	ldr	r3, [pc, #492]	; (8058 <loop+0xf94>)
    7e6a:	7818      	ldrb	r0, [r3, #0]
    7e6c:	f7fb f9b4 	bl	31d8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8C].length);
    7e70:	4b77      	ldr	r3, [pc, #476]	; (8050 <loop+0xf8c>)
    7e72:	f893 0ca1 	ldrb.w	r0, [r3, #3233]	; 0xca1
    7e76:	883b      	ldrh	r3, [r7, #0]
    7e78:	4418      	add	r0, r3
    7e7a:	b280      	uxth	r0, r0
				break; // STY - Absolute
    7e7c:	f7ff bb0b 	b.w	7496 <loop+0x3d2>
    Write_Absolute(register_a);
    7e80:	4b74      	ldr	r3, [pc, #464]	; (8054 <loop+0xf90>)
    7e82:	7818      	ldrb	r0, [r3, #0]
    7e84:	f7fb f9a8 	bl	31d8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8D].length);
    7e88:	4b71      	ldr	r3, [pc, #452]	; (8050 <loop+0xf8c>)
    7e8a:	f893 0cd5 	ldrb.w	r0, [r3, #3285]	; 0xcd5
    7e8e:	883b      	ldrh	r3, [r7, #0]
    7e90:	4418      	add	r0, r3
    7e92:	b280      	uxth	r0, r0
				break; // STA - Absolute
    7e94:	f7ff baff 	b.w	7496 <loop+0x3d2>
    Write_Absolute(register_x);
    7e98:	4b6b      	ldr	r3, [pc, #428]	; (8048 <loop+0xf84>)
    7e9a:	7818      	ldrb	r0, [r3, #0]
    7e9c:	f7fb f99c 	bl	31d8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8E].length);
    7ea0:	4b6b      	ldr	r3, [pc, #428]	; (8050 <loop+0xf8c>)
    7ea2:	f893 0d09 	ldrb.w	r0, [r3, #3337]	; 0xd09
    7ea6:	883b      	ldrh	r3, [r7, #0]
    7ea8:	4418      	add	r0, r3
    7eaa:	b280      	uxth	r0, r0
				break; // STX - Absolute
    7eac:	f7ff baf3 	b.w	7496 <loop+0x3d2>
    Write_Absolute(register_a & register_x);
    7eb0:	4b68      	ldr	r3, [pc, #416]	; (8054 <loop+0xf90>)
    7eb2:	7818      	ldrb	r0, [r3, #0]
    7eb4:	4b64      	ldr	r3, [pc, #400]	; (8048 <loop+0xf84>)
    7eb6:	781b      	ldrb	r3, [r3, #0]
    7eb8:	4018      	ands	r0, r3
    7eba:	f7fb f98d 	bl	31d8 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8F].length);
    7ebe:	4b64      	ldr	r3, [pc, #400]	; (8050 <loop+0xf8c>)
    7ec0:	f893 0d3d 	ldrb.w	r0, [r3, #3389]	; 0xd3d
    7ec4:	883b      	ldrh	r3, [r7, #0]
    7ec6:	4418      	add	r0, r3
    7ec8:	b280      	uxth	r0, r0
				break; // SAX - Absolute
    7eca:	f7ff bae4 	b.w	7496 <loop+0x3d2>
    if ((flag_c) == 0) Branch_Taken();
    7ece:	4b63      	ldr	r3, [pc, #396]	; (805c <loop+0xf98>)
    7ed0:	781b      	ldrb	r3, [r3, #0]
    7ed2:	07db      	lsls	r3, r3, #31
    7ed4:	f100 84c1 	bmi.w	885a <loop+0x1796>
    7ed8:	f7fc fda0 	bl	4a1c <Branch_Taken()>
    return(register_pc);
    7edc:	8838      	ldrh	r0, [r7, #0]
				break; // BCC - Branch on Carry Clear
    7ede:	f7ff bada 	b.w	7496 <loop+0x3d2>
    Write_Indexed_Indirect_Y(register_a);
    7ee2:	4b5c      	ldr	r3, [pc, #368]	; (8054 <loop+0xf90>)
    7ee4:	7818      	ldrb	r0, [r3, #0]
    7ee6:	f7fb fa59 	bl	339c <Write_Indexed_Indirect_Y(unsigned char)>
    return(register_pc + opcode_info[0x91].length);
    7eea:	4b59      	ldr	r3, [pc, #356]	; (8050 <loop+0xf8c>)
    7eec:	f893 0da5 	ldrb.w	r0, [r3, #3493]	; 0xda5
    7ef0:	883b      	ldrh	r3, [r7, #0]
    7ef2:	4418      	add	r0, r3
    7ef4:	b280      	uxth	r0, r0
				break; // STA - Indirect Indexed  Y
    7ef6:	f7ff bace 	b.w	7496 <loop+0x3d2>
    Fetch_ZeroPage_Y();
    7efa:	f7fb f873 	bl	2fe4 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    7efe:	4b54      	ldr	r3, [pc, #336]	; (8050 <loop+0xf8c>)
    7f00:	f893 0e0d 	ldrb.w	r0, [r3, #3597]	; 0xe0d
    7f04:	883b      	ldrh	r3, [r7, #0]
    7f06:	4418      	add	r0, r3
    7f08:	b280      	uxth	r0, r0
				break; // SHA - ZeroPage , Y
    7f0a:	f7ff bac4 	b.w	7496 <loop+0x3d2>
    Write_ZeroPage_X(register_y);
    7f0e:	4b52      	ldr	r3, [pc, #328]	; (8058 <loop+0xf94>)
    7f10:	7818      	ldrb	r0, [r3, #0]
    7f12:	f7fb f97f 	bl	3214 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x94].length);
    7f16:	4b4e      	ldr	r3, [pc, #312]	; (8050 <loop+0xf8c>)
    7f18:	f893 0e41 	ldrb.w	r0, [r3, #3649]	; 0xe41
    7f1c:	883b      	ldrh	r3, [r7, #0]
    7f1e:	4418      	add	r0, r3
    7f20:	b280      	uxth	r0, r0
				break; // STY - ZeroPage , X
    7f22:	f7ff bab8 	b.w	7496 <loop+0x3d2>
    Write_ZeroPage_X(register_a);
    7f26:	4b4b      	ldr	r3, [pc, #300]	; (8054 <loop+0xf90>)
    7f28:	7818      	ldrb	r0, [r3, #0]
    7f2a:	f7fb f973 	bl	3214 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x95].length);
    7f2e:	4b48      	ldr	r3, [pc, #288]	; (8050 <loop+0xf8c>)
    7f30:	f893 0e75 	ldrb.w	r0, [r3, #3701]	; 0xe75
    7f34:	883b      	ldrh	r3, [r7, #0]
    7f36:	4418      	add	r0, r3
    7f38:	b280      	uxth	r0, r0
				break; // STA - ZeroPage , X
    7f3a:	f7ff baac 	b.w	7496 <loop+0x3d2>
    Write_ZeroPage_Y(register_x);
    7f3e:	4b42      	ldr	r3, [pc, #264]	; (8048 <loop+0xf84>)
    7f40:	7818      	ldrb	r0, [r3, #0]
    7f42:	f7fb f985 	bl	3250 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x96].length);
    7f46:	4b42      	ldr	r3, [pc, #264]	; (8050 <loop+0xf8c>)
    7f48:	f893 0ea9 	ldrb.w	r0, [r3, #3753]	; 0xea9
    7f4c:	883b      	ldrh	r3, [r7, #0]
    7f4e:	4418      	add	r0, r3
    7f50:	b280      	uxth	r0, r0
				break; // STX - ZeroPage , Y
    7f52:	f7ff baa0 	b.w	7496 <loop+0x3d2>
    Write_ZeroPage_Y(register_a & register_x);
    7f56:	4b3f      	ldr	r3, [pc, #252]	; (8054 <loop+0xf90>)
    7f58:	7818      	ldrb	r0, [r3, #0]
    7f5a:	4b3b      	ldr	r3, [pc, #236]	; (8048 <loop+0xf84>)
    7f5c:	781b      	ldrb	r3, [r3, #0]
    7f5e:	4018      	ands	r0, r3
    7f60:	f7fb f976 	bl	3250 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x97].length);
    7f64:	4b3a      	ldr	r3, [pc, #232]	; (8050 <loop+0xf8c>)
    7f66:	f893 0edd 	ldrb.w	r0, [r3, #3805]	; 0xedd
    7f6a:	883b      	ldrh	r3, [r7, #0]
    7f6c:	4418      	add	r0, r3
    7f6e:	b280      	uxth	r0, r0
				break; // SAX - ZeroPage , Y
    7f70:	f7ff ba91 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    7f74:	8838      	ldrh	r0, [r7, #0]
    7f76:	2100      	movs	r1, #0
    7f78:	3001      	adds	r0, #1
    7f7a:	b280      	uxth	r0, r0
    7f7c:	f7fa fd1a 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_y;
    7f80:	4b35      	ldr	r3, [pc, #212]	; (8058 <loop+0xf94>)
    7f82:	7818      	ldrb	r0, [r3, #0]
    7f84:	4b33      	ldr	r3, [pc, #204]	; (8054 <loop+0xf90>)
    7f86:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7f88:	f7fa ffd8 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x98].length);
    7f8c:	4b30      	ldr	r3, [pc, #192]	; (8050 <loop+0xf8c>)
    7f8e:	f893 0f11 	ldrb.w	r0, [r3, #3857]	; 0xf11
    7f92:	883b      	ldrh	r3, [r7, #0]
    7f94:	4418      	add	r0, r3
    7f96:	b280      	uxth	r0, r0
				break; // TYA
    7f98:	f7ff ba7d 	b.w	7496 <loop+0x3d2>
    Write_Absolute_Y(register_a);
    7f9c:	4b2d      	ldr	r3, [pc, #180]	; (8054 <loop+0xf90>)
    7f9e:	7818      	ldrb	r0, [r3, #0]
    7fa0:	f7fb f99a 	bl	32d8 <Write_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x99].length);
    7fa4:	4b2a      	ldr	r3, [pc, #168]	; (8050 <loop+0xf8c>)
    7fa6:	f893 0f45 	ldrb.w	r0, [r3, #3909]	; 0xf45
    7faa:	883b      	ldrh	r3, [r7, #0]
    7fac:	4418      	add	r0, r3
    7fae:	b280      	uxth	r0, r0
				break; // STA - Absolute , Y
    7fb0:	f7ff ba71 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    7fb4:	8838      	ldrh	r0, [r7, #0]
    7fb6:	2100      	movs	r1, #0
    7fb8:	3001      	adds	r0, #1
    7fba:	b280      	uxth	r0, r0
    7fbc:	f7fa fcfa 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x9A].length);
    7fc0:	4b23      	ldr	r3, [pc, #140]	; (8050 <loop+0xf8c>)
    7fc2:	f893 0f79 	ldrb.w	r0, [r3, #3961]	; 0xf79
    register_sp = register_x;
    7fc6:	4b20      	ldr	r3, [pc, #128]	; (8048 <loop+0xf84>)
    7fc8:	781a      	ldrb	r2, [r3, #0]
    return(register_pc + opcode_info[0x9A].length);
    7fca:	883b      	ldrh	r3, [r7, #0]
    7fcc:	4418      	add	r0, r3
    register_sp = register_x;
    7fce:	4b24      	ldr	r3, [pc, #144]	; (8060 <loop+0xf9c>)
    return(register_pc + opcode_info[0x9A].length);
    7fd0:	b280      	uxth	r0, r0
    register_sp = register_x;
    7fd2:	701a      	strb	r2, [r3, #0]
				break; // TXS
    7fd4:	f7ff ba5f 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_Y(0);
    7fd8:	2000      	movs	r0, #0
    7fda:	f7fb f86f 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    7fde:	4b1c      	ldr	r3, [pc, #112]	; (8050 <loop+0xf8c>)
    7fe0:	f893 0fad 	ldrb.w	r0, [r3, #4013]	; 0xfad
    7fe4:	883b      	ldrh	r3, [r7, #0]
    7fe6:	4418      	add	r0, r3
    7fe8:	b280      	uxth	r0, r0
				break; // TAS - Absolute , Y 
    7fea:	f7ff ba54 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_X(0);
    7fee:	2000      	movs	r0, #0
    7ff0:	f7fb f834 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    7ff4:	4b16      	ldr	r3, [pc, #88]	; (8050 <loop+0xf8c>)
    7ff6:	f893 0fe1 	ldrb.w	r0, [r3, #4065]	; 0xfe1
    7ffa:	883b      	ldrh	r3, [r7, #0]
    7ffc:	4418      	add	r0, r3
    7ffe:	b280      	uxth	r0, r0
				break; // SHY - Absolute , X
    8000:	f7ff ba49 	b.w	7496 <loop+0x3d2>
    Write_Absolute_X(register_a);
    8004:	4b13      	ldr	r3, [pc, #76]	; (8054 <loop+0xf90>)
    8006:	7818      	ldrb	r0, [r3, #0]
    8008:	f7fb f940 	bl	328c <Write_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9D].length);
    800c:	4b15      	ldr	r3, [pc, #84]	; (8064 <loop+0xfa0>)
    800e:	7d58      	ldrb	r0, [r3, #21]
    8010:	883b      	ldrh	r3, [r7, #0]
    8012:	4418      	add	r0, r3
    8014:	b280      	uxth	r0, r0
				break; // STA - Absolute , X
    8016:	f7ff ba3e 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_Y(0);
    801a:	2000      	movs	r0, #0
    801c:	f7fb f84e 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    8020:	4b10      	ldr	r3, [pc, #64]	; (8064 <loop+0xfa0>)
    8022:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    8026:	883b      	ldrh	r3, [r7, #0]
    8028:	4418      	add	r0, r3
    802a:	b280      	uxth	r0, r0
				break; // SHX - Absolute , Y
    802c:	f7ff ba33 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_Y(0);
    8030:	2000      	movs	r0, #0
    8032:	f7fb f843 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    8036:	4b0b      	ldr	r3, [pc, #44]	; (8064 <loop+0xfa0>)
    8038:	f893 007d 	ldrb.w	r0, [r3, #125]	; 0x7d
    803c:	883b      	ldrh	r3, [r7, #0]
    803e:	4418      	add	r0, r3
    8040:	b280      	uxth	r0, r0
				break; // SHA - Absolute , Y
    8042:	f7ff ba28 	b.w	7496 <loop+0x3d2>
    8046:	bf00      	nop
    8048:	200188a9 	.word	0x200188a9
    804c:	2001888a 	.word	0x2001888a
    8050:	20016418 	.word	0x20016418
    8054:	200188a8 	.word	0x200188a8
    8058:	200188aa 	.word	0x200188aa
    805c:	20004a20 	.word	0x20004a20
    8060:	20004a21 	.word	0x20004a21
    8064:	20017418 	.word	0x20017418
    return read_byte(register_pc+offset, false);
    8068:	8838      	ldrh	r0, [r7, #0]
    806a:	2100      	movs	r1, #0
    806c:	3001      	adds	r0, #1
    806e:	b280      	uxth	r0, r0
    8070:	f7fa fca0 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    8074:	4bbd      	ldr	r3, [pc, #756]	; (836c <loop+0x12a8>)
    8076:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8078:	f7fa ff60 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA0].length);
    807c:	4bbc      	ldr	r3, [pc, #752]	; (8370 <loop+0x12ac>)
    807e:	f893 00b1 	ldrb.w	r0, [r3, #177]	; 0xb1
    8082:	883b      	ldrh	r3, [r7, #0]
    8084:	4418      	add	r0, r3
    8086:	b280      	uxth	r0, r0
				break; // LDY - Immediate
    8088:	f7ff ba05 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Indexed_Indirect_X();
    808c:	f7fb f846 	bl	311c <Fetch_Indexed_Indirect_X()>
    8090:	4bb8      	ldr	r3, [pc, #736]	; (8374 <loop+0x12b0>)
    8092:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8094:	f7fa ff52 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA1].length);
    8098:	4bb5      	ldr	r3, [pc, #724]	; (8370 <loop+0x12ac>)
    809a:	f893 00e5 	ldrb.w	r0, [r3, #229]	; 0xe5
    809e:	883b      	ldrh	r3, [r7, #0]
    80a0:	4418      	add	r0, r3
    80a2:	b280      	uxth	r0, r0
				break; // LDA - Indexed Indirect X
    80a4:	f7ff b9f7 	b.w	7496 <loop+0x3d2>
    return read_byte(register_pc+offset, false);
    80a8:	8838      	ldrh	r0, [r7, #0]
    80aa:	2100      	movs	r1, #0
    80ac:	3001      	adds	r0, #1
    80ae:	b280      	uxth	r0, r0
    80b0:	f7fa fc80 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    80b4:	4bb0      	ldr	r3, [pc, #704]	; (8378 <loop+0x12b4>)
    80b6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    80b8:	f7fa ff40 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA2].length);
    80bc:	4bac      	ldr	r3, [pc, #688]	; (8370 <loop+0x12ac>)
    80be:	f893 0119 	ldrb.w	r0, [r3, #281]	; 0x119
    80c2:	883b      	ldrh	r3, [r7, #0]
    80c4:	4418      	add	r0, r3
    80c6:	b280      	uxth	r0, r0
				break; // LDX - Immediate
    80c8:	f7ff b9e5 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Indexed_Indirect_X();
    80cc:	f7fb f826 	bl	311c <Fetch_Indexed_Indirect_X()>
    80d0:	4aa8      	ldr	r2, [pc, #672]	; (8374 <loop+0x12b0>)
    80d2:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    80d4:	4aa8      	ldr	r2, [pc, #672]	; (8378 <loop+0x12b4>)
    80d6:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    80d8:	f7fa ff30 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA3].length);
    80dc:	4ba4      	ldr	r3, [pc, #656]	; (8370 <loop+0x12ac>)
    80de:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
    80e2:	883b      	ldrh	r3, [r7, #0]
    80e4:	4418      	add	r0, r3
    80e6:	b280      	uxth	r0, r0
				break; // LAX - Indexed Indirect X
    80e8:	f7ff b9d5 	b.w	7496 <loop+0x3d2>
    register_y = Fetch_ZeroPage();
    80ec:	f7fa ff46 	bl	2f7c <Fetch_ZeroPage()>
    80f0:	4b9e      	ldr	r3, [pc, #632]	; (836c <loop+0x12a8>)
    80f2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    80f4:	f7fa ff22 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA4].length);
    80f8:	4b9d      	ldr	r3, [pc, #628]	; (8370 <loop+0x12ac>)
    80fa:	f893 0181 	ldrb.w	r0, [r3, #385]	; 0x181
    80fe:	883b      	ldrh	r3, [r7, #0]
    8100:	4418      	add	r0, r3
    8102:	b280      	uxth	r0, r0
				break; // LDY - ZeroPage
    8104:	f7ff b9c7 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_ZeroPage();
    8108:	f7fa ff38 	bl	2f7c <Fetch_ZeroPage()>
    810c:	4b99      	ldr	r3, [pc, #612]	; (8374 <loop+0x12b0>)
    810e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8110:	f7fa ff14 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA5].length);
    8114:	4b96      	ldr	r3, [pc, #600]	; (8370 <loop+0x12ac>)
    8116:	f893 01b5 	ldrb.w	r0, [r3, #437]	; 0x1b5
    811a:	883b      	ldrh	r3, [r7, #0]
    811c:	4418      	add	r0, r3
    811e:	b280      	uxth	r0, r0
				break; // LDA - ZeroPage
    8120:	f7ff b9b9 	b.w	7496 <loop+0x3d2>
    register_x = Fetch_ZeroPage();
    8124:	f7fa ff2a 	bl	2f7c <Fetch_ZeroPage()>
    8128:	4b93      	ldr	r3, [pc, #588]	; (8378 <loop+0x12b4>)
    812a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    812c:	f7fa ff06 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA6].length);
    8130:	4b8f      	ldr	r3, [pc, #572]	; (8370 <loop+0x12ac>)
    8132:	f893 01e9 	ldrb.w	r0, [r3, #489]	; 0x1e9
    8136:	883b      	ldrh	r3, [r7, #0]
    8138:	4418      	add	r0, r3
    813a:	b280      	uxth	r0, r0
				break; // LDX - ZeroPage
    813c:	f7ff b9ab 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_ZeroPage();
    8140:	f7fa ff1c 	bl	2f7c <Fetch_ZeroPage()>
    8144:	4a8b      	ldr	r2, [pc, #556]	; (8374 <loop+0x12b0>)
    8146:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8148:	4a8b      	ldr	r2, [pc, #556]	; (8378 <loop+0x12b4>)
    814a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    814c:	f7fa fef6 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA7].length);
    8150:	4b87      	ldr	r3, [pc, #540]	; (8370 <loop+0x12ac>)
    8152:	f893 021d 	ldrb.w	r0, [r3, #541]	; 0x21d
    8156:	883b      	ldrh	r3, [r7, #0]
    8158:	4418      	add	r0, r3
    815a:	b280      	uxth	r0, r0
				break; // LAX - ZeroPage
    815c:	f7ff b99b 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    8160:	8838      	ldrh	r0, [r7, #0]
    8162:	2100      	movs	r1, #0
    8164:	3001      	adds	r0, #1
    8166:	b280      	uxth	r0, r0
    8168:	f7fa fc24 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_a;
    816c:	4b81      	ldr	r3, [pc, #516]	; (8374 <loop+0x12b0>)
    816e:	7818      	ldrb	r0, [r3, #0]
    8170:	4b7e      	ldr	r3, [pc, #504]	; (836c <loop+0x12a8>)
    8172:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8174:	f7fa fee2 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA8].length);
    8178:	4b7d      	ldr	r3, [pc, #500]	; (8370 <loop+0x12ac>)
    817a:	f893 0251 	ldrb.w	r0, [r3, #593]	; 0x251
    817e:	883b      	ldrh	r3, [r7, #0]
    8180:	4418      	add	r0, r3
    8182:	b280      	uxth	r0, r0
				break; // TAY
    8184:	f7ff b987 	b.w	7496 <loop+0x3d2>
    return read_byte(register_pc+offset, false);
    8188:	8838      	ldrh	r0, [r7, #0]
    818a:	2100      	movs	r1, #0
    818c:	3001      	adds	r0, #1
    818e:	b280      	uxth	r0, r0
    8190:	f7fa fc10 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    8194:	4b77      	ldr	r3, [pc, #476]	; (8374 <loop+0x12b0>)
    8196:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8198:	f7fa fed0 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA9].length);
    819c:	4b74      	ldr	r3, [pc, #464]	; (8370 <loop+0x12ac>)
    819e:	f893 0285 	ldrb.w	r0, [r3, #645]	; 0x285
    81a2:	883b      	ldrh	r3, [r7, #0]
    81a4:	4418      	add	r0, r3
    81a6:	b280      	uxth	r0, r0
				break; // LDA - Immediate
    81a8:	f7ff b975 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    81ac:	8838      	ldrh	r0, [r7, #0]
    81ae:	2100      	movs	r1, #0
    81b0:	3001      	adds	r0, #1
    81b2:	b280      	uxth	r0, r0
    81b4:	f7fa fbfe 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_a;
    81b8:	4b6e      	ldr	r3, [pc, #440]	; (8374 <loop+0x12b0>)
    81ba:	7818      	ldrb	r0, [r3, #0]
    81bc:	4b6e      	ldr	r3, [pc, #440]	; (8378 <loop+0x12b4>)
    81be:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    81c0:	f7fa febc 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAA].length);
    81c4:	4b6a      	ldr	r3, [pc, #424]	; (8370 <loop+0x12ac>)
    81c6:	f893 02b9 	ldrb.w	r0, [r3, #697]	; 0x2b9
    81ca:	883b      	ldrh	r3, [r7, #0]
    81cc:	4418      	add	r0, r3
    81ce:	b280      	uxth	r0, r0
				break; // TAX
    81d0:	f7ff b961 	b.w	7496 <loop+0x3d2>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    81d4:	2001      	movs	r0, #1
    81d6:	f7fa fec5 	bl	2f64 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    81da:	4b65      	ldr	r3, [pc, #404]	; (8370 <loop+0x12ac>)
    81dc:	f893 02ed 	ldrb.w	r0, [r3, #749]	; 0x2ed
    81e0:	883b      	ldrh	r3, [r7, #0]
    81e2:	4418      	add	r0, r3
    81e4:	b280      	uxth	r0, r0
				break; // LAX - Immediate
    81e6:	f7ff b956 	b.w	7496 <loop+0x3d2>
    register_y = Fetch_Absolute();
    81ea:	f7fa ff1b 	bl	3024 <Fetch_Absolute()>
    81ee:	4b5f      	ldr	r3, [pc, #380]	; (836c <loop+0x12a8>)
    81f0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    81f2:	f7fa fea3 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAC].length);
    81f6:	4b5e      	ldr	r3, [pc, #376]	; (8370 <loop+0x12ac>)
    81f8:	f893 0321 	ldrb.w	r0, [r3, #801]	; 0x321
    81fc:	883b      	ldrh	r3, [r7, #0]
    81fe:	4418      	add	r0, r3
    8200:	b280      	uxth	r0, r0
				break; // LDY - Absolute
    8202:	f7ff b948 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Absolute();
    8206:	f7fa ff0d 	bl	3024 <Fetch_Absolute()>
    820a:	4b5a      	ldr	r3, [pc, #360]	; (8374 <loop+0x12b0>)
    820c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    820e:	f7fa fe95 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAD].length);
    8212:	4b57      	ldr	r3, [pc, #348]	; (8370 <loop+0x12ac>)
    8214:	f893 0355 	ldrb.w	r0, [r3, #853]	; 0x355
    8218:	883b      	ldrh	r3, [r7, #0]
    821a:	4418      	add	r0, r3
    821c:	b280      	uxth	r0, r0
				break; // LDA - Absolute
    821e:	f7ff b93a 	b.w	7496 <loop+0x3d2>
    register_x = Fetch_Absolute();
    8222:	f7fa feff 	bl	3024 <Fetch_Absolute()>
    8226:	4b54      	ldr	r3, [pc, #336]	; (8378 <loop+0x12b4>)
    8228:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    822a:	f7fa fe87 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAE].length);
    822e:	4b50      	ldr	r3, [pc, #320]	; (8370 <loop+0x12ac>)
    8230:	f893 0389 	ldrb.w	r0, [r3, #905]	; 0x389
    8234:	883b      	ldrh	r3, [r7, #0]
    8236:	4418      	add	r0, r3
    8238:	b280      	uxth	r0, r0
				break; // LDX - Absolute
    823a:	f7ff b92c 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Absolute();
    823e:	f7fa fef1 	bl	3024 <Fetch_Absolute()>
    8242:	4a4c      	ldr	r2, [pc, #304]	; (8374 <loop+0x12b0>)
    8244:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8246:	4a4c      	ldr	r2, [pc, #304]	; (8378 <loop+0x12b4>)
    8248:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    824a:	f7fa fe77 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAF].length);
    824e:	4b48      	ldr	r3, [pc, #288]	; (8370 <loop+0x12ac>)
    8250:	f893 03bd 	ldrb.w	r0, [r3, #957]	; 0x3bd
    8254:	883b      	ldrh	r3, [r7, #0]
    8256:	4418      	add	r0, r3
    8258:	b280      	uxth	r0, r0
				break; // LAX - Absolute
    825a:	f7ff b91c 	b.w	7496 <loop+0x3d2>
    if ((flag_c) == 1) Branch_Taken();
    825e:	4b47      	ldr	r3, [pc, #284]	; (837c <loop+0x12b8>)
    8260:	7819      	ldrb	r1, [r3, #0]
    8262:	f011 0101 	ands.w	r1, r1, #1
    8266:	f000 8306 	beq.w	8876 <loop+0x17b2>
    826a:	f7fc fbd7 	bl	4a1c <Branch_Taken()>
    return(register_pc);
    826e:	8838      	ldrh	r0, [r7, #0]
				break; // BCS - Branch on Carry Set
    8270:	f7ff b911 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Indexed_Indirect_Y(1);
    8274:	2001      	movs	r0, #1
    8276:	f7fa ff7b 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    827a:	4b3e      	ldr	r3, [pc, #248]	; (8374 <loop+0x12b0>)
    827c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    827e:	f7fa fe5d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB1].length);
    8282:	4b3b      	ldr	r3, [pc, #236]	; (8370 <loop+0x12ac>)
    8284:	f893 0425 	ldrb.w	r0, [r3, #1061]	; 0x425
    8288:	883b      	ldrh	r3, [r7, #0]
    828a:	4418      	add	r0, r3
    828c:	b280      	uxth	r0, r0
				break; // LDA - Indirect Indexed  Y
    828e:	f7ff b902 	b.w	7496 <loop+0x3d2>
    register_x = Fetch_ZeroPage_Y();
    8292:	f7fa fea7 	bl	2fe4 <Fetch_ZeroPage_Y()>
    8296:	4b38      	ldr	r3, [pc, #224]	; (8378 <loop+0x12b4>)
    8298:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    829a:	f7fa fe4f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB6].length);
    829e:	4b34      	ldr	r3, [pc, #208]	; (8370 <loop+0x12ac>)
    82a0:	f893 0529 	ldrb.w	r0, [r3, #1321]	; 0x529
    82a4:	883b      	ldrh	r3, [r7, #0]
    82a6:	4418      	add	r0, r3
    82a8:	b280      	uxth	r0, r0
				break; // LDX - ZeroPage , Y
    82aa:	f7ff b8f4 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_ZeroPage_Y();
    82ae:	f7fa fe99 	bl	2fe4 <Fetch_ZeroPage_Y()>
    82b2:	4a30      	ldr	r2, [pc, #192]	; (8374 <loop+0x12b0>)
    82b4:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    82b6:	4a30      	ldr	r2, [pc, #192]	; (8378 <loop+0x12b4>)
    82b8:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82ba:	f7fa fe3f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB7].length);
    82be:	4b2c      	ldr	r3, [pc, #176]	; (8370 <loop+0x12ac>)
    82c0:	f893 055d 	ldrb.w	r0, [r3, #1373]	; 0x55d
    82c4:	883b      	ldrh	r3, [r7, #0]
    82c6:	4418      	add	r0, r3
    82c8:	b280      	uxth	r0, r0
				break; // LAX - ZeroPage , Y
    82ca:	f7ff b8e4 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    82ce:	8838      	ldrh	r0, [r7, #0]
    82d0:	2100      	movs	r1, #0
    82d2:	3001      	adds	r0, #1
    82d4:	b280      	uxth	r0, r0
    82d6:	f7fa fb6d 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xB8].length);
    82da:	4b25      	ldr	r3, [pc, #148]	; (8370 <loop+0x12ac>)
    register_flags = register_flags & 0xBF;
    82dc:	4a27      	ldr	r2, [pc, #156]	; (837c <loop+0x12b8>)
    return(register_pc + opcode_info[0xB8].length);
    82de:	f893 0591 	ldrb.w	r0, [r3, #1425]	; 0x591
    register_flags = register_flags & 0xBF;
    82e2:	7813      	ldrb	r3, [r2, #0]
    82e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    82e8:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    82ea:	883b      	ldrh	r3, [r7, #0]
    82ec:	4418      	add	r0, r3
    82ee:	b280      	uxth	r0, r0
				break; // CLV
    82f0:	f7ff b8d1 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Absolute_Y(1);
    82f4:	2001      	movs	r0, #1
    82f6:	f7fa fee1 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    82fa:	4b1e      	ldr	r3, [pc, #120]	; (8374 <loop+0x12b0>)
    82fc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82fe:	f7fa fe1d 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB9].length);
    8302:	4b1b      	ldr	r3, [pc, #108]	; (8370 <loop+0x12ac>)
    8304:	f893 05c5 	ldrb.w	r0, [r3, #1477]	; 0x5c5
    8308:	883b      	ldrh	r3, [r7, #0]
    830a:	4418      	add	r0, r3
    830c:	b280      	uxth	r0, r0
				break; // LDA - Absolute , Y
    830e:	f7ff b8c2 	b.w	7496 <loop+0x3d2>
    register_y = Fetch_ZeroPage_X();
    8312:	f7fa fe47 	bl	2fa4 <Fetch_ZeroPage_X()>
    8316:	4b15      	ldr	r3, [pc, #84]	; (836c <loop+0x12a8>)
    8318:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    831a:	f7fa fe0f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB4].length);
    831e:	4b14      	ldr	r3, [pc, #80]	; (8370 <loop+0x12ac>)
    8320:	f893 04c1 	ldrb.w	r0, [r3, #1217]	; 0x4c1
    8324:	883b      	ldrh	r3, [r7, #0]
    8326:	4418      	add	r0, r3
    8328:	b280      	uxth	r0, r0
				break; // LDY - ZeroPage , X
    832a:	f7ff b8b4 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_ZeroPage_X();
    832e:	f7fa fe39 	bl	2fa4 <Fetch_ZeroPage_X()>
    8332:	4b10      	ldr	r3, [pc, #64]	; (8374 <loop+0x12b0>)
    8334:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8336:	f7fa fe01 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB5].length);
    833a:	4b0d      	ldr	r3, [pc, #52]	; (8370 <loop+0x12ac>)
    833c:	f893 04f5 	ldrb.w	r0, [r3, #1269]	; 0x4f5
    8340:	883b      	ldrh	r3, [r7, #0]
    8342:	4418      	add	r0, r3
    8344:	b280      	uxth	r0, r0
				break; // LDA - ZeroPage , X
    8346:	f7ff b8a6 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Indexed_Indirect_Y(1);
    834a:	2001      	movs	r0, #1
    834c:	f7fa ff10 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    8350:	4a08      	ldr	r2, [pc, #32]	; (8374 <loop+0x12b0>)
    8352:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8354:	4a08      	ldr	r2, [pc, #32]	; (8378 <loop+0x12b4>)
    8356:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8358:	f7fa fdf0 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB3].length);
    835c:	4b04      	ldr	r3, [pc, #16]	; (8370 <loop+0x12ac>)
    835e:	f893 048d 	ldrb.w	r0, [r3, #1165]	; 0x48d
    8362:	883b      	ldrh	r3, [r7, #0]
    8364:	4418      	add	r0, r3
    8366:	b280      	uxth	r0, r0
				break; // LAX - Indirect Indexed  Y
    8368:	f7ff b895 	b.w	7496 <loop+0x3d2>
    836c:	200188aa 	.word	0x200188aa
    8370:	20017418 	.word	0x20017418
    8374:	200188a8 	.word	0x200188a8
    8378:	200188a9 	.word	0x200188a9
    837c:	20004a20 	.word	0x20004a20
    read_byte(register_pc+1, false);
    8380:	8838      	ldrh	r0, [r7, #0]
    8382:	2100      	movs	r1, #0
    8384:	3001      	adds	r0, #1
    8386:	b280      	uxth	r0, r0
    8388:	f7fa fb14 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_sp;
    838c:	4bcc      	ldr	r3, [pc, #816]	; (86c0 <loop+0x15fc>)
    838e:	7818      	ldrb	r0, [r3, #0]
    8390:	4bcc      	ldr	r3, [pc, #816]	; (86c4 <loop+0x1600>)
    8392:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8394:	f7fa fdd2 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBA].length);
    8398:	4bcb      	ldr	r3, [pc, #812]	; (86c8 <loop+0x1604>)
    839a:	f893 05f9 	ldrb.w	r0, [r3, #1529]	; 0x5f9
    839e:	883b      	ldrh	r3, [r7, #0]
    83a0:	4418      	add	r0, r3
    83a2:	b280      	uxth	r0, r0
				break; // TSX
    83a4:	f7ff b877 	b.w	7496 <loop+0x3d2>
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83a8:	2001      	movs	r0, #1
    83aa:	f7fa fe87 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    83ae:	4bc4      	ldr	r3, [pc, #784]	; (86c0 <loop+0x15fc>)
    register_a = register_sp;
    83b0:	49c6      	ldr	r1, [pc, #792]	; (86cc <loop+0x1608>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83b2:	781c      	ldrb	r4, [r3, #0]
    register_x = register_sp;
    83b4:	4ac3      	ldr	r2, [pc, #780]	; (86c4 <loop+0x1600>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83b6:	4020      	ands	r0, r4
    83b8:	7018      	strb	r0, [r3, #0]
    register_a = register_sp;
    83ba:	7008      	strb	r0, [r1, #0]
    register_x = register_sp;
    83bc:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    83be:	f7fa fdbd 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBB].length);
    83c2:	4bc1      	ldr	r3, [pc, #772]	; (86c8 <loop+0x1604>)
    83c4:	f893 062d 	ldrb.w	r0, [r3, #1581]	; 0x62d
    83c8:	883b      	ldrh	r3, [r7, #0]
    83ca:	4418      	add	r0, r3
    83cc:	b280      	uxth	r0, r0
				break; // LAS - Absolute , Y
    83ce:	f7ff b862 	b.w	7496 <loop+0x3d2>
    register_y = Fetch_Absolute_X(1);
    83d2:	2001      	movs	r0, #1
    83d4:	f7fa fe42 	bl	305c <Fetch_Absolute_X(unsigned char)>
    83d8:	4bbd      	ldr	r3, [pc, #756]	; (86d0 <loop+0x160c>)
    83da:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    83dc:	f7fa fdae 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBC].length);
    83e0:	4bb9      	ldr	r3, [pc, #740]	; (86c8 <loop+0x1604>)
    83e2:	f893 0661 	ldrb.w	r0, [r3, #1633]	; 0x661
    83e6:	883b      	ldrh	r3, [r7, #0]
    83e8:	4418      	add	r0, r3
    83ea:	b280      	uxth	r0, r0
				break; // LDY - Absolute , X
    83ec:	f7ff b853 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Absolute_X(1);
    83f0:	2001      	movs	r0, #1
    83f2:	f7fa fe33 	bl	305c <Fetch_Absolute_X(unsigned char)>
    83f6:	4bb5      	ldr	r3, [pc, #724]	; (86cc <loop+0x1608>)
    83f8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    83fa:	f7fa fd9f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBD].length);
    83fe:	4bb2      	ldr	r3, [pc, #712]	; (86c8 <loop+0x1604>)
    8400:	f893 0695 	ldrb.w	r0, [r3, #1685]	; 0x695
    8404:	883b      	ldrh	r3, [r7, #0]
    8406:	4418      	add	r0, r3
    8408:	b280      	uxth	r0, r0
				break; // LDA - Absolute , X
    840a:	f7ff b844 	b.w	7496 <loop+0x3d2>
    register_x = Fetch_Absolute_Y(1);
    840e:	2001      	movs	r0, #1
    8410:	f7fa fe54 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    8414:	4bab      	ldr	r3, [pc, #684]	; (86c4 <loop+0x1600>)
    8416:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8418:	f7fa fd90 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBE].length);
    841c:	4baa      	ldr	r3, [pc, #680]	; (86c8 <loop+0x1604>)
    841e:	f893 06c9 	ldrb.w	r0, [r3, #1737]	; 0x6c9
    8422:	883b      	ldrh	r3, [r7, #0]
    8424:	4418      	add	r0, r3
    8426:	b280      	uxth	r0, r0
				break; // LDX - Absolute , Y
    8428:	f7ff b835 	b.w	7496 <loop+0x3d2>
    register_a = Fetch_Absolute_Y(1);
    842c:	2001      	movs	r0, #1
    842e:	f7fa fe45 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    8432:	4aa6      	ldr	r2, [pc, #664]	; (86cc <loop+0x1608>)
    8434:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8436:	4aa3      	ldr	r2, [pc, #652]	; (86c4 <loop+0x1600>)
    8438:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    843a:	f7fa fd7f 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBF].length);
    843e:	4ba2      	ldr	r3, [pc, #648]	; (86c8 <loop+0x1604>)
    8440:	f893 06fd 	ldrb.w	r0, [r3, #1789]	; 0x6fd
    8444:	883b      	ldrh	r3, [r7, #0]
    8446:	4418      	add	r0, r3
    8448:	b280      	uxth	r0, r0
				break; // LAX - Absolute , Y
    844a:	f7ff b824 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC0();
    844e:	f7fb fe3d 	bl	40cc <opcode_0xC0()>
				break; // CPY - Immediate
    8452:	f7ff b820 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    8456:	f7fa fe61 	bl	311c <Fetch_Indexed_Indirect_X()>
    845a:	f7fb fd7f 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC1].length);
    845e:	4b9a      	ldr	r3, [pc, #616]	; (86c8 <loop+0x1604>)
    8460:	f893 0765 	ldrb.w	r0, [r3, #1893]	; 0x765
    8464:	883b      	ldrh	r3, [r7, #0]
    8466:	4418      	add	r0, r3
    8468:	b280      	uxth	r0, r0
				break; // CMP - Indexed Indirect X
    846a:	f7ff b814 	b.w	7496 <loop+0x3d2>
    Fetch_Immediate(1);
    846e:	2001      	movs	r0, #1
    8470:	f7fa fd78 	bl	2f64 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    8474:	4b94      	ldr	r3, [pc, #592]	; (86c8 <loop+0x1604>)
    8476:	f893 0799 	ldrb.w	r0, [r3, #1945]	; 0x799
    847a:	883b      	ldrh	r3, [r7, #0]
    847c:	4418      	add	r0, r3
    847e:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    8480:	f7ff b809 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC3();
    8484:	f7fd fdfe 	bl	6084 <opcode_0xC3()>
				break; // DCP - Indexed Indirect X
    8488:	f7ff b805 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC4();
    848c:	f7fb fe46 	bl	411c <opcode_0xC4()>
				break; // CPY - ZeroPage
    8490:	f7ff b801 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_ZeroPage());
    8494:	f7fa fd72 	bl	2f7c <Fetch_ZeroPage()>
    8498:	f7fb fd60 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC5].length);
    849c:	4b8a      	ldr	r3, [pc, #552]	; (86c8 <loop+0x1604>)
    849e:	f893 0835 	ldrb.w	r0, [r3, #2101]	; 0x835
    84a2:	883b      	ldrh	r3, [r7, #0]
    84a4:	4418      	add	r0, r3
    84a6:	b280      	uxth	r0, r0
				break; // CMP - ZeroPage
    84a8:	f7fe bff5 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC6();
    84ac:	f7fb ffc2 	bl	4434 <opcode_0xC6()>
				break; // DEC - ZeroPage
    84b0:	f7fe bff1 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC7();
    84b4:	f7fd fd6c 	bl	5f90 <opcode_0xC7()>
				break; // DCP - ZeroPage
    84b8:	f7fe bfed 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    84bc:	8838      	ldrh	r0, [r7, #0]
    84be:	2100      	movs	r1, #0
    84c0:	3001      	adds	r0, #1
    84c2:	b280      	uxth	r0, r0
    84c4:	f7fa fa76 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_y + 1;
    84c8:	4b81      	ldr	r3, [pc, #516]	; (86d0 <loop+0x160c>)
    84ca:	7818      	ldrb	r0, [r3, #0]
    84cc:	3001      	adds	r0, #1
    84ce:	b2c0      	uxtb	r0, r0
    84d0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    84d2:	f7fa fd33 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC8].length);
    84d6:	4b7c      	ldr	r3, [pc, #496]	; (86c8 <loop+0x1604>)
    84d8:	f893 08d1 	ldrb.w	r0, [r3, #2257]	; 0x8d1
    84dc:	883b      	ldrh	r3, [r7, #0]
    84de:	4418      	add	r0, r3
    84e0:	b280      	uxth	r0, r0
				break; // INY
    84e2:	f7fe bfd8 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xC9();
    84e6:	f7fb fd4d 	bl	3f84 <opcode_0xC9()>
				break; // CMP - Immediate
    84ea:	f7fe bfd4 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    84ee:	8838      	ldrh	r0, [r7, #0]
    84f0:	2100      	movs	r1, #0
    84f2:	3001      	adds	r0, #1
    84f4:	b280      	uxth	r0, r0
    84f6:	f7fa fa5d 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_x - 1;
    84fa:	4b72      	ldr	r3, [pc, #456]	; (86c4 <loop+0x1600>)
    84fc:	7818      	ldrb	r0, [r3, #0]
    84fe:	3801      	subs	r0, #1
    8500:	b2c0      	uxtb	r0, r0
    8502:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8504:	f7fa fd1a 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCA].length);
    8508:	4b6f      	ldr	r3, [pc, #444]	; (86c8 <loop+0x1604>)
    850a:	f893 0939 	ldrb.w	r0, [r3, #2361]	; 0x939
    850e:	883b      	ldrh	r3, [r7, #0]
    8510:	4418      	add	r0, r3
    8512:	b280      	uxth	r0, r0
				break; // DEX
    8514:	f7fe bfbf 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xCB();
    8518:	f7fe f88a 	bl	6630 <opcode_0xCB()>
				break; // SBX - Immediate
    851c:	f7fe bfbb 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xCC();
    8520:	f7fb fe2c 	bl	417c <opcode_0xCC()>
				break; // CPY - Absolute
    8524:	f7fe bfb7 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_Absolute());
    8528:	f7fa fd7c 	bl	3024 <Fetch_Absolute()>
    852c:	f7fb fd16 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xCD].length);
    8530:	4b65      	ldr	r3, [pc, #404]	; (86c8 <loop+0x1604>)
    8532:	f893 09d5 	ldrb.w	r0, [r3, #2517]	; 0x9d5
    8536:	883b      	ldrh	r3, [r7, #0]
    8538:	4418      	add	r0, r3
    853a:	b280      	uxth	r0, r0
				break; // CMP - Absolute
    853c:	f7fe bfab 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xCE();
    8540:	f7fb ffc8 	bl	44d4 <opcode_0xCE()>
				break; // DEC - Absolute
    8544:	f7fe bfa7 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xCF();
    8548:	f7fd fe0e 	bl	6168 <opcode_0xCF()>
				break; // DCP - Absolute
    854c:	f7fe bfa3 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xD0();
    8550:	f7fc fb44 	bl	4bdc <opcode_0xD0()>
				break; // BNE - Branch on Zero Clear
    8554:	f7fe bf9f 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    8558:	2001      	movs	r0, #1
    855a:	f7fa fe09 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    855e:	f7fb fcfd 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD1].length);
    8562:	4b59      	ldr	r3, [pc, #356]	; (86c8 <loop+0x1604>)
    8564:	f893 0aa5 	ldrb.w	r0, [r3, #2725]	; 0xaa5
    8568:	883b      	ldrh	r3, [r7, #0]
    856a:	4418      	add	r0, r3
    856c:	b280      	uxth	r0, r0
				break; // CMP - Indirect Indexed  Y
    856e:	f7fe bf92 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xD3();
    8572:	f7fd fdbf 	bl	60f4 <opcode_0xD3()>
				break; // DCP - Indirect Indexed  Y
    8576:	f7fe bf8e 	b.w	7496 <loop+0x3d2>
    Fetch_ZeroPage_X();
    857a:	f7fa fd13 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    857e:	4b52      	ldr	r3, [pc, #328]	; (86c8 <loop+0x1604>)
    8580:	f893 0b41 	ldrb.w	r0, [r3, #2881]	; 0xb41
    8584:	883b      	ldrh	r3, [r7, #0]
    8586:	4418      	add	r0, r3
    8588:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    858a:	f7fe bf84 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_ZeroPage_X());
    858e:	f7fa fd09 	bl	2fa4 <Fetch_ZeroPage_X()>
    8592:	f7fb fce3 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD5].length);
    8596:	4b4c      	ldr	r3, [pc, #304]	; (86c8 <loop+0x1604>)
    8598:	f893 0b75 	ldrb.w	r0, [r3, #2933]	; 0xb75
    859c:	883b      	ldrh	r3, [r7, #0]
    859e:	4418      	add	r0, r3
    85a0:	b280      	uxth	r0, r0
				break; // CMP - ZeroPage , X
    85a2:	f7fe bf78 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xD6();
    85a6:	f7fb ff71 	bl	448c <opcode_0xD6()>
				break; // DEC - ZeroPage , X
    85aa:	f7fe bf74 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xD7();
    85ae:	f7fd fd31 	bl	6014 <opcode_0xD7()>
				break; // DCP - ZeroPage , X
    85b2:	f7fe bf70 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    85b6:	8838      	ldrh	r0, [r7, #0]
    85b8:	2100      	movs	r1, #0
    85ba:	3001      	adds	r0, #1
    85bc:	b280      	uxth	r0, r0
    85be:	f7fa f9f9 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xD8].length);
    85c2:	4b41      	ldr	r3, [pc, #260]	; (86c8 <loop+0x1604>)
    register_flags = register_flags & 0xF7;
    85c4:	4a43      	ldr	r2, [pc, #268]	; (86d4 <loop+0x1610>)
    return(register_pc + opcode_info[0xD8].length);
    85c6:	f893 0c11 	ldrb.w	r0, [r3, #3089]	; 0xc11
    register_flags = register_flags & 0xF7;
    85ca:	7813      	ldrb	r3, [r2, #0]
    85cc:	f023 0308 	bic.w	r3, r3, #8
    85d0:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    85d2:	883b      	ldrh	r3, [r7, #0]
    85d4:	4418      	add	r0, r3
    85d6:	b280      	uxth	r0, r0
				break; // CLD
    85d8:	f7fe bf5d 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_Absolute_Y(1));
    85dc:	2001      	movs	r0, #1
    85de:	f7fa fd6d 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    85e2:	f7fb fcbb 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD9].length);
    85e6:	4b38      	ldr	r3, [pc, #224]	; (86c8 <loop+0x1604>)
    85e8:	f893 0c45 	ldrb.w	r0, [r3, #3141]	; 0xc45
    85ec:	883b      	ldrh	r3, [r7, #0]
    85ee:	4418      	add	r0, r3
    85f0:	b280      	uxth	r0, r0
				break; // CMP - Absolute , Y
    85f2:	f7fe bf50 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xDB();
    85f6:	f7fd fe29 	bl	624c <opcode_0xDB()>
				break; // DCP - Absolute , Y
    85fa:	f7fe bf4c 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    85fe:	2001      	movs	r0, #1
    8600:	f7fa fd2c 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    8604:	4b30      	ldr	r3, [pc, #192]	; (86c8 <loop+0x1604>)
    8606:	f893 0ce1 	ldrb.w	r0, [r3, #3297]	; 0xce1
    860a:	883b      	ldrh	r3, [r7, #0]
    860c:	4418      	add	r0, r3
    860e:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    8610:	f7fe bf41 	b.w	7496 <loop+0x3d2>
    Calculate_CMP(Fetch_Absolute_X(1));
    8614:	2001      	movs	r0, #1
    8616:	f7fa fd21 	bl	305c <Fetch_Absolute_X(unsigned char)>
    861a:	f7fb fc9f 	bl	3f5c <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xDD].length);
    861e:	4b2a      	ldr	r3, [pc, #168]	; (86c8 <loop+0x1604>)
    8620:	f893 0d15 	ldrb.w	r0, [r3, #3349]	; 0xd15
    8624:	883b      	ldrh	r3, [r7, #0]
    8626:	4418      	add	r0, r3
    8628:	b280      	uxth	r0, r0
				break; // CMP - Absolute , X
    862a:	f7fe bf34 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xDE();
    862e:	f7fb ff75 	bl	451c <opcode_0xDE()>
				break; // DEC - Absolute , X
    8632:	f7fe bf30 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xDF();
    8636:	f7fd fdcf 	bl	61d8 <opcode_0xDF()>
				break; // DCP - Absolute , X
    863a:	f7fe bf2c 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xE0();
    863e:	f7fb fcc9 	bl	3fd4 <opcode_0xE0()>
				break; // CPX - Immediate
    8642:	f7fe bf28 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    8646:	f7fa fd69 	bl	311c <Fetch_Indexed_Indirect_X()>
    864a:	b280      	uxth	r0, r0
    864c:	f7fb faaa 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    8650:	4b1d      	ldr	r3, [pc, #116]	; (86c8 <loop+0x1604>)
    8652:	f893 0de5 	ldrb.w	r0, [r3, #3557]	; 0xde5
    8656:	883b      	ldrh	r3, [r7, #0]
    8658:	4418      	add	r0, r3
    865a:	b280      	uxth	r0, r0
				break; // SBC - Indexed Indirect X
    865c:	f7fe bf1b 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xEC();
    8660:	f7fb fd10 	bl	4084 <opcode_0xEC()>
				break; // CPX - Absolute
    8664:	f7fe bf17 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_Absolute());
    8668:	f7fa fcdc 	bl	3024 <Fetch_Absolute()>
    866c:	b280      	uxth	r0, r0
    866e:	f7fb fa99 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    8672:	4b19      	ldr	r3, [pc, #100]	; (86d8 <loop+0x1614>)
    8674:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
    8678:	883b      	ldrh	r3, [r7, #0]
    867a:	4418      	add	r0, r3
    867c:	b280      	uxth	r0, r0
				break; // SBC - Absolute
    867e:	f7fe bf0a 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xEE();
    8682:	f7fb feb3 	bl	43ec <opcode_0xEE()>
				break; // INC - Absolute
    8686:	f7fe bf06 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xEF();
    868a:	f7fd febd 	bl	6408 <opcode_0xEF()>
				break; // ISC - Absolute
    868e:	f7fe bf02 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xF0();
    8692:	f7fc fa83 	bl	4b9c <opcode_0xF0()>
				break; // BEQ - Branch on Zero Set
    8696:	f7fe befe 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    869a:	2001      	movs	r0, #1
    869c:	f7fa fd68 	bl	3170 <Fetch_Indexed_Indirect_Y(unsigned char)>
    86a0:	b280      	uxth	r0, r0
    86a2:	f7fb fa7f 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    86a6:	4b0c      	ldr	r3, [pc, #48]	; (86d8 <loop+0x1614>)
    86a8:	f893 0125 	ldrb.w	r0, [r3, #293]	; 0x125
    86ac:	883b      	ldrh	r3, [r7, #0]
    86ae:	4418      	add	r0, r3
    86b0:	b280      	uxth	r0, r0
				break; // SBC - Indirect Indexed  Y
    86b2:	f7fe bef0 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xF3();
    86b6:	f7fd fe7f 	bl	63b8 <opcode_0xF3()>
				break; // ISC - Indirect Indexed  Y
    86ba:	f7fe beec 	b.w	7496 <loop+0x3d2>
    86be:	bf00      	nop
    86c0:	20004a21 	.word	0x20004a21
    86c4:	200188a9 	.word	0x200188a9
    86c8:	20017418 	.word	0x20017418
    86cc:	200188a8 	.word	0x200188a8
    86d0:	200188aa 	.word	0x200188aa
    86d4:	20004a20 	.word	0x20004a20
    86d8:	20018418 	.word	0x20018418
    Fetch_ZeroPage_X();
    86dc:	f7fa fc62 	bl	2fa4 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    86e0:	4b74      	ldr	r3, [pc, #464]	; (88b4 <loop+0x17f0>)
    86e2:	f893 01c1 	ldrb.w	r0, [r3, #449]	; 0x1c1
    86e6:	883b      	ldrh	r3, [r7, #0]
    86e8:	4418      	add	r0, r3
    86ea:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    86ec:	f7fe bed3 	b.w	7496 <loop+0x3d2>
    Fetch_Immediate(1);
    86f0:	2001      	movs	r0, #1
    86f2:	f7fa fc37 	bl	2f64 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    86f6:	4b70      	ldr	r3, [pc, #448]	; (88b8 <loop+0x17f4>)
    86f8:	f893 0e19 	ldrb.w	r0, [r3, #3609]	; 0xe19
    86fc:	883b      	ldrh	r3, [r7, #0]
    86fe:	4418      	add	r0, r3
    8700:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    8702:	f7fe bec8 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xE3();
    8706:	f7fd fe31 	bl	636c <opcode_0xE3()>
				break; // ISC - Indexed Indirect X
    870a:	f7fe bec4 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xE4();
    870e:	f7fb fc89 	bl	4024 <opcode_0xE4()>
				break; // CPX - ZeroPage
    8712:	f7fe bec0 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_ZeroPage());
    8716:	f7fa fc31 	bl	2f7c <Fetch_ZeroPage()>
    871a:	b280      	uxth	r0, r0
    871c:	f7fb fa42 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    8720:	4b65      	ldr	r3, [pc, #404]	; (88b8 <loop+0x17f4>)
    8722:	f893 0eb5 	ldrb.w	r0, [r3, #3765]	; 0xeb5
    8726:	883b      	ldrh	r3, [r7, #0]
    8728:	4418      	add	r0, r3
    872a:	b280      	uxth	r0, r0
				break; // SBC - ZeroPage
    872c:	f7fe beb3 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xFF();
    8730:	f7fd fe90 	bl	6454 <opcode_0xFF()>
				break; // 
    8734:	f7fe beaf 	b.w	7496 <loop+0x3d2>
				irq_handler(0x1);
    8738:	2001      	movs	r0, #1
    873a:	f7fb f835 	bl	37a8 <irq_handler(unsigned char)>
		uint16_t next_pc = 0;
    873e:	2000      	movs	r0, #0
				break; // BRK - Break
    8740:	f7fe bea9 	b.w	7496 <loop+0x3d2>
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    8744:	f7fa fcea 	bl	311c <Fetch_Indexed_Indirect_X()>
    8748:	4b5c      	ldr	r3, [pc, #368]	; (88bc <loop+0x17f8>)
    874a:	781a      	ldrb	r2, [r3, #0]
    874c:	4310      	orrs	r0, r2
    874e:	b2c0      	uxtb	r0, r0
    8750:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8752:	f7fa fbf3 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x01].length);
    8756:	4b5a      	ldr	r3, [pc, #360]	; (88c0 <loop+0x17fc>)
    8758:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
    875c:	883b      	ldrh	r3, [r7, #0]
    875e:	4418      	add	r0, r3
    8760:	b280      	uxth	r0, r0
				break; // OR - Indexed Indirect X
    8762:	f7fe be98 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_ZeroPage_X());
    8766:	f7fa fc1d 	bl	2fa4 <Fetch_ZeroPage_X()>
    876a:	b280      	uxth	r0, r0
    876c:	f7fb fa1a 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    8770:	4b50      	ldr	r3, [pc, #320]	; (88b4 <loop+0x17f0>)
    8772:	f893 01f5 	ldrb.w	r0, [r3, #501]	; 0x1f5
    8776:	883b      	ldrh	r3, [r7, #0]
    8778:	4418      	add	r0, r3
    877a:	b280      	uxth	r0, r0
				break; // SBC - ZeroPage , X
    877c:	f7fe be8b 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xF6();
    8780:	f7fb fe10 	bl	43a4 <opcode_0xF6()>
				break; // INC - ZeroPage , X
    8784:	f7fe be87 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xF7();
    8788:	f7fd fdca 	bl	6320 <opcode_0xF7()>
				break; // ISC - ZeroPage , X
    878c:	f7fe be83 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    8790:	8838      	ldrh	r0, [r7, #0]
    8792:	2100      	movs	r1, #0
    8794:	3001      	adds	r0, #1
    8796:	b280      	uxth	r0, r0
    8798:	f7fa f90c 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xF8].length);
    879c:	4b45      	ldr	r3, [pc, #276]	; (88b4 <loop+0x17f0>)
    register_flags = register_flags | 0x08;
    879e:	4a49      	ldr	r2, [pc, #292]	; (88c4 <loop+0x1800>)
    return(register_pc + opcode_info[0xF8].length);
    87a0:	f893 0291 	ldrb.w	r0, [r3, #657]	; 0x291
    register_flags = register_flags | 0x08;
    87a4:	7813      	ldrb	r3, [r2, #0]
    87a6:	f043 0308 	orr.w	r3, r3, #8
    87aa:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    87ac:	883b      	ldrh	r3, [r7, #0]
    87ae:	4418      	add	r0, r3
    87b0:	b280      	uxth	r0, r0
				break; // SED
    87b2:	f7fe be70 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_Absolute_Y(1));
    87b6:	2001      	movs	r0, #1
    87b8:	f7fa fc80 	bl	30bc <Fetch_Absolute_Y(unsigned char)>
    87bc:	b280      	uxth	r0, r0
    87be:	f7fb f9f1 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    87c2:	4b3c      	ldr	r3, [pc, #240]	; (88b4 <loop+0x17f0>)
    87c4:	f893 02c5 	ldrb.w	r0, [r3, #709]	; 0x2c5
    87c8:	883b      	ldrh	r3, [r7, #0]
    87ca:	4418      	add	r0, r3
    87cc:	b280      	uxth	r0, r0
				break; // SBC - Absolute , Y
    87ce:	f7fe be62 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xFB();
    87d2:	f7fd fe67 	bl	64a4 <opcode_0xFB()>
				break; // ISC - Absolute , Y
    87d6:	f7fe be5e 	b.w	7496 <loop+0x3d2>
    Fetch_Absolute_X(1);
    87da:	2001      	movs	r0, #1
    87dc:	f7fa fc3e 	bl	305c <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    87e0:	4b34      	ldr	r3, [pc, #208]	; (88b4 <loop+0x17f0>)
    87e2:	f893 0361 	ldrb.w	r0, [r3, #865]	; 0x361
    87e6:	883b      	ldrh	r3, [r7, #0]
    87e8:	4418      	add	r0, r3
    87ea:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    87ec:	f7fe be53 	b.w	7496 <loop+0x3d2>
    Calculate_SBC(Fetch_Absolute_X(1));
    87f0:	2001      	movs	r0, #1
    87f2:	f7fa fc33 	bl	305c <Fetch_Absolute_X(unsigned char)>
    87f6:	b280      	uxth	r0, r0
    87f8:	f7fb f9d4 	bl	3ba4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    87fc:	4b2d      	ldr	r3, [pc, #180]	; (88b4 <loop+0x17f0>)
    87fe:	f893 0395 	ldrb.w	r0, [r3, #917]	; 0x395
    8802:	883b      	ldrh	r3, [r7, #0]
    8804:	4418      	add	r0, r3
    8806:	b280      	uxth	r0, r0
				break; // SBC - Absolute , X
    8808:	f7fe be45 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xE6();
    880c:	f7fb fd9e 	bl	434c <opcode_0xE6()>
				break; // INC - ZeroPage
    8810:	f7fe be41 	b.w	7496 <loop+0x3d2>
				next_pc = opcode_0xE7();
    8814:	f7fd fd54 	bl	62c0 <opcode_0xE7()>
				break; // ISC - ZeroPage
    8818:	f7fe be3d 	b.w	7496 <loop+0x3d2>
    read_byte(register_pc+1, false);
    881c:	8838      	ldrh	r0, [r7, #0]
    881e:	2100      	movs	r1, #0
    8820:	3001      	adds	r0, #1
    8822:	b280      	uxth	r0, r0
    8824:	f7fa f8c6 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_x + 1;
    8828:	4b27      	ldr	r3, [pc, #156]	; (88c8 <loop+0x1804>)
    882a:	7818      	ldrb	r0, [r3, #0]
    882c:	3001      	adds	r0, #1
    882e:	b2c0      	uxtb	r0, r0
    8830:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8832:	f7fa fb83 	bl	2f3c <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xE8].length);
    8836:	4b20      	ldr	r3, [pc, #128]	; (88b8 <loop+0x17f4>)
    8838:	f893 0f51 	ldrb.w	r0, [r3, #3921]	; 0xf51
    883c:	883b      	ldrh	r3, [r7, #0]
    883e:	4418      	add	r0, r3
    8840:	b280      	uxth	r0, r0
				break; // INX
    8842:	f7fe be28 	b.w	7496 <loop+0x3d2>
				Serial.println("ERROR: Illegal instruction");
    8846:	4821      	ldr	r0, [pc, #132]	; (88cc <loop+0x1808>)
    8848:	4921      	ldr	r1, [pc, #132]	; (88d0 <loop+0x180c>)
    884a:	f7f7 fc3f 	bl	cc <Print::println(char const*) [clone .isra.0]>
				run_mode = WAITING;
    884e:	f04f 0300 	mov.w	r3, #0
		uint16_t next_pc = 0;
    8852:	2000      	movs	r0, #0
				run_mode = WAITING;
    8854:	702b      	strb	r3, [r5, #0]
        if (run_mode == SINGLE_STEP)
    8856:	f7fe be27 	b.w	74a8 <loop+0x3e4>
        register_pc = register_pc + opcode_info[0x90].length;
    885a:	4b1e      	ldr	r3, [pc, #120]	; (88d4 <loop+0x1810>)
    return read_byte(register_pc+offset, false);
    885c:	2100      	movs	r1, #0
    885e:	883a      	ldrh	r2, [r7, #0]
    8860:	f893 3d71 	ldrb.w	r3, [r3, #3441]	; 0xd71
    8864:	4413      	add	r3, r2
    8866:	b29b      	uxth	r3, r3
    8868:	803b      	strh	r3, [r7, #0]
    886a:	3301      	adds	r3, #1
    886c:	b298      	uxth	r0, r3
    886e:	f7fa f8a1 	bl	29b4 <read_byte(unsigned short, bool)>
    8872:	f7ff bb33 	b.w	7edc <loop+0xe18>
        register_pc = register_pc + opcode_info[0xB0].length;
    8876:	4b10      	ldr	r3, [pc, #64]	; (88b8 <loop+0x17f4>)
    8878:	883a      	ldrh	r2, [r7, #0]
    887a:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
    887e:	4413      	add	r3, r2
    8880:	b29b      	uxth	r3, r3
    8882:	803b      	strh	r3, [r7, #0]
    8884:	3301      	adds	r3, #1
    8886:	b298      	uxth	r0, r3
    8888:	f7fa f894 	bl	29b4 <read_byte(unsigned short, bool)>
    888c:	e4ef      	b.n	826e <loop+0x11aa>
        register_pc = register_pc + opcode_info[0x10].length;
    888e:	4b0c      	ldr	r3, [pc, #48]	; (88c0 <loop+0x17fc>)
    8890:	2100      	movs	r1, #0
    8892:	883a      	ldrh	r2, [r7, #0]
    8894:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
    8898:	4413      	add	r3, r2
    889a:	b29b      	uxth	r3, r3
    889c:	803b      	strh	r3, [r7, #0]
    889e:	3301      	adds	r3, #1
    88a0:	b298      	uxth	r0, r3
    88a2:	f7fa f887 	bl	29b4 <read_byte(unsigned short, bool)>
    88a6:	f7fe beef 	b.w	7688 <loop+0x5c4>
    if ((flag_n) == 1) Branch_Taken();
    88aa:	f7fc f8b7 	bl	4a1c <Branch_Taken()>
    88ae:	f7fe bfe0 	b.w	7872 <loop+0x7ae>
    88b2:	bf00      	nop
    88b4:	20018418 	.word	0x20018418
    88b8:	20017418 	.word	0x20017418
    88bc:	200188a8 	.word	0x200188a8
    88c0:	20015418 	.word	0x20015418
    88c4:	20004a20 	.word	0x20004a20
    88c8:	200188a9 	.word	0x200188a9
    88cc:	20004410 	.word	0x20004410
    88d0:	20001110 	.word	0x20001110
    88d4:	20016418 	.word	0x20016418

000088d8 <_GLOBAL__sub_I_opcode_info>:
}
    88d8:	b538      	push	{r3, r4, r5, lr}
    88da:	4c12      	ldr	r4, [pc, #72]	; (8924 <_GLOBAL__sub_I_opcode_info+0x4c>)
    88dc:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    88e0:	2100      	movs	r1, #0
    88e2:	4620      	mov	r0, r4
    88e4:	f000 f8e6 	bl	8ab4 <String::String(char const*)>
    88e8:	2100      	movs	r1, #0
    88ea:	f104 0010 	add.w	r0, r4, #16
    88ee:	f000 f8e1 	bl	8ab4 <String::String(char const*)>
    88f2:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    88f6:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    88f8:	2100      	movs	r1, #0
    88fa:	f000 f8db 	bl	8ab4 <String::String(char const*)>
OpDecoder opcode_info[256];
    88fe:	42ac      	cmp	r4, r5
    8900:	d1ee      	bne.n	88e0 <_GLOBAL__sub_I_opcode_info+0x8>
    8902:	4a09      	ldr	r2, [pc, #36]	; (8928 <_GLOBAL__sub_I_opcode_info+0x50>)
    8904:	2000      	movs	r0, #0
    8906:	4909      	ldr	r1, [pc, #36]	; (892c <_GLOBAL__sub_I_opcode_info+0x54>)
    8908:	f002 f8e2 	bl	aad0 <__aeabi_atexit>
String last_command = "";
    890c:	4908      	ldr	r1, [pc, #32]	; (8930 <_GLOBAL__sub_I_opcode_info+0x58>)
    890e:	4809      	ldr	r0, [pc, #36]	; (8934 <_GLOBAL__sub_I_opcode_info+0x5c>)
    8910:	f000 f8d0 	bl	8ab4 <String::String(char const*)>
    8914:	4a04      	ldr	r2, [pc, #16]	; (8928 <_GLOBAL__sub_I_opcode_info+0x50>)
    8916:	4908      	ldr	r1, [pc, #32]	; (8938 <_GLOBAL__sub_I_opcode_info+0x60>)
    8918:	4806      	ldr	r0, [pc, #24]	; (8934 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    891a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    891e:	f002 b8d7 	b.w	aad0 <__aeabi_atexit>
    8922:	bf00      	nop
    8924:	20015418 	.word	0x20015418
    8928:	20004428 	.word	0x20004428
    892c:	0000009d 	.word	0x0000009d
    8930:	200004f8 	.word	0x200004f8
    8934:	200153f0 	.word	0x200153f0
    8938:	00008a3d 	.word	0x00008a3d

0000893c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    893c:	4608      	mov	r0, r1
    893e:	f001 bcdb 	b.w	a2f8 <usb_serial_putchar>
    8942:	bf00      	nop

00008944 <Print::print(String const&)>:
{
    8944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    8948:	688c      	ldr	r4, [r1, #8]
    894a:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    894c:	b1dc      	cbz	r4, 8986 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    894e:	2500      	movs	r5, #0
    8950:	4688      	mov	r8, r1
    8952:	4606      	mov	r6, r0
	size_t count = 0;
    8954:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8956:	462b      	mov	r3, r5
    8958:	2221      	movs	r2, #33	; 0x21
    895a:	a901      	add	r1, sp, #4
    895c:	4640      	mov	r0, r8
    895e:	f000 f9a7 	bl	8cb0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    8962:	2c20      	cmp	r4, #32
    8964:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    8966:	6833      	ldr	r3, [r6, #0]
    8968:	bf28      	it	cs
    896a:	2220      	movcs	r2, #32
    896c:	a901      	add	r1, sp, #4
    896e:	4630      	mov	r0, r6
    8970:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    8972:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    8974:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    8976:	4798      	blx	r3
    8978:	4407      	add	r7, r0
	while (len > 0) {
    897a:	2c00      	cmp	r4, #0
    897c:	d1eb      	bne.n	8956 <Print::print(String const&)+0x12>
}
    897e:	4638      	mov	r0, r7
    8980:	b00a      	add	sp, #40	; 0x28
    8982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    8986:	4627      	mov	r7, r4
}
    8988:	4638      	mov	r0, r7
    898a:	b00a      	add	sp, #40	; 0x28
    898c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008990 <Print::println()>:
{
    8990:	b500      	push	{lr}
	return write(buf, 2);
    8992:	6803      	ldr	r3, [r0, #0]
{
    8994:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    8996:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    899a:	2202      	movs	r2, #2
    899c:	a901      	add	r1, sp, #4
    899e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    89a0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    89a4:	4798      	blx	r3
}
    89a6:	b003      	add	sp, #12
    89a8:	f85d fb04 	ldr.w	pc, [sp], #4

000089ac <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    89ac:	4b05      	ldr	r3, [pc, #20]	; (89c4 <_write+0x18>)
    89ae:	2802      	cmp	r0, #2
    89b0:	bf88      	it	hi
    89b2:	4603      	movhi	r3, r0
{
    89b4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    89b6:	681c      	ldr	r4, [r3, #0]
    89b8:	4618      	mov	r0, r3
    89ba:	6863      	ldr	r3, [r4, #4]
}
    89bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    89c0:	4718      	bx	r3
    89c2:	bf00      	nop
    89c4:	20004410 	.word	0x20004410

000089c8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    89c8:	f001 bc86 	b.w	a2d8 <usb_serial_getchar>

000089cc <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    89cc:	f001 bc1e 	b.w	a20c <usb_serial_peekchar>

000089d0 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    89d0:	6081      	str	r1, [r0, #8]
}
    89d2:	4770      	bx	lr

000089d4 <String::String(String const&)>:
String::String(const String &value)
    89d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    89d6:	4288      	cmp	r0, r1
	buffer = NULL;
    89d8:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    89dc:	4604      	mov	r4, r0
	len = 0;
    89de:	6085      	str	r5, [r0, #8]
	flags = 0;
    89e0:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    89e2:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    89e6:	d002      	beq.n	89ee <String::String(String const&)+0x1a>
    89e8:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    89ea:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    89ec:	b90e      	cbnz	r6, 89f2 <String::String(String const&)+0x1e>
}
    89ee:	4620      	mov	r0, r4
    89f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    89f2:	1c70      	adds	r0, r6, #1
    89f4:	f002 f88c 	bl	ab10 <malloc>
	if (newbuffer) {
    89f8:	2800      	cmp	r0, #0
    89fa:	d0f8      	beq.n	89ee <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    89fc:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    89fe:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    8a00:	6020      	str	r0, [r4, #0]
	len = length;
    8a02:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    8a06:	f003 fbd9 	bl	c1bc <strcpy>
}
    8a0a:	4620      	mov	r0, r4
    8a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a0e:	bf00      	nop

00008a10 <String::String(String&&)>:
	buffer = NULL;
    8a10:	2300      	movs	r3, #0
	if (&rhs == this) return;
    8a12:	4288      	cmp	r0, r1
	capacity = 0;
    8a14:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8a18:	6083      	str	r3, [r0, #8]
	flags = 0;
    8a1a:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    8a1c:	d00c      	beq.n	8a38 <String::String(String&&)+0x28>
String::String(String &&rval)
    8a1e:	b410      	push	{r4}
	capacity = rhs.capacity;
    8a20:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    8a24:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    8a28:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    8a2c:	688a      	ldr	r2, [r1, #8]
}
    8a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    8a32:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    8a34:	6082      	str	r2, [r0, #8]
}
    8a36:	4770      	bx	lr
    8a38:	4770      	bx	lr
    8a3a:	bf00      	nop

00008a3c <String::~String()>:
String::~String()
    8a3c:	b510      	push	{r4, lr}
    8a3e:	4604      	mov	r4, r0
	free(buffer);
    8a40:	6800      	ldr	r0, [r0, #0]
    8a42:	f002 f86d 	bl	ab20 <free>
}
    8a46:	4620      	mov	r0, r4
    8a48:	bd10      	pop	{r4, pc}
    8a4a:	bf00      	nop

00008a4c <String::copy(char const*, unsigned int)>:
{
    8a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a4e:	4604      	mov	r4, r0
	if (length == 0) {
    8a50:	4615      	mov	r5, r2
    8a52:	b932      	cbnz	r2, 8a62 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8a54:	6803      	ldr	r3, [r0, #0]
    8a56:	b103      	cbz	r3, 8a5a <String::copy(char const*, unsigned int)+0xe>
    8a58:	701a      	strb	r2, [r3, #0]
		len = 0;
    8a5a:	2300      	movs	r3, #0
}
    8a5c:	4620      	mov	r0, r4
		len = 0;
    8a5e:	60a3      	str	r3, [r4, #8]
}
    8a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8a62:	6843      	ldr	r3, [r0, #4]
    8a64:	460e      	mov	r6, r1
    8a66:	429a      	cmp	r2, r3
    8a68:	d91c      	bls.n	8aa4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8a6a:	1c51      	adds	r1, r2, #1
    8a6c:	6800      	ldr	r0, [r0, #0]
    8a6e:	f002 fb1b 	bl	b0a8 <realloc>
	if (newbuffer) {
    8a72:	4607      	mov	r7, r0
    8a74:	b160      	cbz	r0, 8a90 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8a76:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8a78:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    8a7c:	b90b      	cbnz	r3, 8a82 <String::copy(char const*, unsigned int)+0x36>
    8a7e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    8a80:	6827      	ldr	r7, [r4, #0]
    8a82:	4631      	mov	r1, r6
    8a84:	4638      	mov	r0, r7
	len = length;
    8a86:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8a88:	f003 fb98 	bl	c1bc <strcpy>
}
    8a8c:	4620      	mov	r0, r4
    8a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    8a90:	6820      	ldr	r0, [r4, #0]
    8a92:	b110      	cbz	r0, 8a9a <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    8a94:	f002 f844 	bl	ab20 <free>
			buffer = NULL;
    8a98:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    8a9a:	2300      	movs	r3, #0
}
    8a9c:	4620      	mov	r0, r4
		len = capacity = 0;
    8a9e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    8aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    8aa4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    8aa6:	4631      	mov	r1, r6
	len = length;
    8aa8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8aaa:	4638      	mov	r0, r7
    8aac:	f003 fb86 	bl	c1bc <strcpy>
	return *this;
    8ab0:	e7ec      	b.n	8a8c <String::copy(char const*, unsigned int)+0x40>
    8ab2:	bf00      	nop

00008ab4 <String::String(char const*)>:
String::String(const char *cstr)
    8ab4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    8ab6:	2300      	movs	r3, #0
String::String(const char *cstr)
    8ab8:	4604      	mov	r4, r0
	capacity = 0;
    8aba:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8abe:	6083      	str	r3, [r0, #8]
	flags = 0;
    8ac0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    8ac2:	b141      	cbz	r1, 8ad6 <String::String(char const*)+0x22>
    8ac4:	460d      	mov	r5, r1
    8ac6:	4608      	mov	r0, r1
    8ac8:	f003 fbda 	bl	c280 <strlen>
    8acc:	4602      	mov	r2, r0
    8ace:	4629      	mov	r1, r5
    8ad0:	4620      	mov	r0, r4
    8ad2:	f7ff ffbb 	bl	8a4c <String::copy(char const*, unsigned int)>
}
    8ad6:	4620      	mov	r0, r4
    8ad8:	bd38      	pop	{r3, r4, r5, pc}
    8ada:	bf00      	nop

00008adc <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    8adc:	b510      	push	{r4, lr}
	buffer = NULL;
    8ade:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    8ae0:	b08a      	sub	sp, #40	; 0x28
    8ae2:	4604      	mov	r4, r0
	itoa(value, buf, base);
    8ae4:	4608      	mov	r0, r1
    8ae6:	a901      	add	r1, sp, #4
	len = 0;
    8ae8:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8aea:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8aec:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    8af0:	f001 fff8 	bl	aae4 <itoa>
		copy(cstr, strlen(cstr));
    8af4:	a801      	add	r0, sp, #4
    8af6:	f003 fbc3 	bl	c280 <strlen>
    8afa:	a901      	add	r1, sp, #4
    8afc:	4602      	mov	r2, r0
    8afe:	4620      	mov	r0, r4
    8b00:	f7ff ffa4 	bl	8a4c <String::copy(char const*, unsigned int)>
}
    8b04:	4620      	mov	r0, r4
    8b06:	b00a      	add	sp, #40	; 0x28
    8b08:	bd10      	pop	{r4, pc}
    8b0a:	bf00      	nop

00008b0c <String::String(unsigned int, unsigned char)>:
String::String(unsigned int value, unsigned char base)
    8b0c:	b510      	push	{r4, lr}
	buffer = NULL;
    8b0e:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
    8b10:	b08a      	sub	sp, #40	; 0x28
    8b12:	4604      	mov	r4, r0
  	utoa(value, buf, base);
    8b14:	4608      	mov	r0, r1
    8b16:	a901      	add	r1, sp, #4
	len = 0;
    8b18:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8b1a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8b1c:	e9c4 3300 	strd	r3, r3, [r4]
  	utoa(value, buf, base);
    8b20:	f002 fe66 	bl	b7f0 <utoa>
		copy(cstr, strlen(cstr));
    8b24:	a801      	add	r0, sp, #4
    8b26:	f003 fbab 	bl	c280 <strlen>
    8b2a:	a901      	add	r1, sp, #4
    8b2c:	4602      	mov	r2, r0
    8b2e:	4620      	mov	r0, r4
    8b30:	f7ff ff8c 	bl	8a4c <String::copy(char const*, unsigned int)>
}
    8b34:	4620      	mov	r0, r4
    8b36:	b00a      	add	sp, #40	; 0x28
    8b38:	bd10      	pop	{r4, pc}
    8b3a:	bf00      	nop

00008b3c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    8b3c:	4281      	cmp	r1, r0
    8b3e:	d003      	beq.n	8b48 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    8b40:	688a      	ldr	r2, [r1, #8]
    8b42:	6809      	ldr	r1, [r1, #0]
    8b44:	f7ff bf82 	b.w	8a4c <String::copy(char const*, unsigned int)>
}
    8b48:	4770      	bx	lr
    8b4a:	bf00      	nop

00008b4c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    8b4c:	4288      	cmp	r0, r1
{
    8b4e:	b538      	push	{r3, r4, r5, lr}
    8b50:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    8b52:	d00e      	beq.n	8b72 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    8b54:	6800      	ldr	r0, [r0, #0]
    8b56:	460c      	mov	r4, r1
    8b58:	b108      	cbz	r0, 8b5e <String::operator=(String&&)+0x12>
    8b5a:	f001 ffe1 	bl	ab20 <free>
	len = rhs.len;
    8b5e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    8b60:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    8b62:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    8b66:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    8b68:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    8b6c:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    8b70:	60a3      	str	r3, [r4, #8]
}
    8b72:	4628      	mov	r0, r5
    8b74:	bd38      	pop	{r3, r4, r5, pc}
    8b76:	bf00      	nop

00008b78 <String::operator=(char const*)>:
{
    8b78:	b538      	push	{r3, r4, r5, lr}
    8b7a:	4605      	mov	r5, r0
	if (cstr) {
    8b7c:	460c      	mov	r4, r1
    8b7e:	b149      	cbz	r1, 8b94 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    8b80:	4608      	mov	r0, r1
    8b82:	f003 fb7d 	bl	c280 <strlen>
    8b86:	4621      	mov	r1, r4
    8b88:	4602      	mov	r2, r0
    8b8a:	4628      	mov	r0, r5
    8b8c:	f7ff ff5e 	bl	8a4c <String::copy(char const*, unsigned int)>
}
    8b90:	4628      	mov	r0, r5
    8b92:	bd38      	pop	{r3, r4, r5, pc}
    8b94:	4628      	mov	r0, r5
		len = 0;
    8b96:	60a9      	str	r1, [r5, #8]
}
    8b98:	bd38      	pop	{r3, r4, r5, pc}
    8b9a:	bf00      	nop

00008b9c <String::append(char const*, unsigned int)>:
{
    8b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ba0:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8ba2:	6800      	ldr	r0, [r0, #0]
{
    8ba4:	460d      	mov	r5, r1
    8ba6:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8ba8:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    8baa:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8bac:	d809      	bhi.n	8bc2 <String::append(char const*, unsigned int)+0x26>
    8bae:	18c2      	adds	r2, r0, r3
    8bb0:	4291      	cmp	r1, r2
    8bb2:	d206      	bcs.n	8bc2 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    8bb4:	1a0f      	subs	r7, r1, r0
		self = true;
    8bb6:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    8bba:	b936      	cbnz	r6, 8bca <String::append(char const*, unsigned int)+0x2e>
}
    8bbc:	4620      	mov	r0, r4
    8bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    8bc2:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    8bc6:	2e00      	cmp	r6, #0
    8bc8:	d0f8      	beq.n	8bbc <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    8bca:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    8bce:	6862      	ldr	r2, [r4, #4]
    8bd0:	4590      	cmp	r8, r2
    8bd2:	d90c      	bls.n	8bee <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8bd4:	f108 0101 	add.w	r1, r8, #1
    8bd8:	f002 fa66 	bl	b0a8 <realloc>
	if (newbuffer) {
    8bdc:	2800      	cmp	r0, #0
    8bde:	d0ed      	beq.n	8bbc <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    8be0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8be2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    8be6:	b913      	cbnz	r3, 8bee <String::append(char const*, unsigned int)+0x52>
    8be8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    8bea:	6820      	ldr	r0, [r4, #0]
    8bec:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    8bee:	f1b9 0f00 	cmp.w	r9, #0
    8bf2:	d108      	bne.n	8c06 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    8bf4:	4629      	mov	r1, r5
    8bf6:	4418      	add	r0, r3
    8bf8:	f003 fae0 	bl	c1bc <strcpy>
}
    8bfc:	4620      	mov	r0, r4
	len = newlen;
    8bfe:	f8c4 8008 	str.w	r8, [r4, #8]
}
    8c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    8c06:	4632      	mov	r2, r6
    8c08:	19c1      	adds	r1, r0, r7
    8c0a:	4418      	add	r0, r3
    8c0c:	f000 f9ca 	bl	8fa4 <memcpy>
		buffer[newlen] = 0;
    8c10:	6823      	ldr	r3, [r4, #0]
    8c12:	2200      	movs	r2, #0
    8c14:	f803 2008 	strb.w	r2, [r3, r8]
    8c18:	e7f0      	b.n	8bfc <String::append(char const*, unsigned int)+0x60>
    8c1a:	bf00      	nop

00008c1c <String::append(char)>:
{
    8c1c:	b510      	push	{r4, lr}
    8c1e:	b082      	sub	sp, #8
	buf[1] = 0;
    8c20:	2300      	movs	r3, #0
{
    8c22:	4604      	mov	r4, r0
	append(buf, 1);
    8c24:	2201      	movs	r2, #1
	buf[0] = c;
    8c26:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    8c2a:	a901      	add	r1, sp, #4
	buf[1] = 0;
    8c2c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    8c30:	f7ff ffb4 	bl	8b9c <String::append(char const*, unsigned int)>
}
    8c34:	4620      	mov	r0, r4
    8c36:	b002      	add	sp, #8
    8c38:	bd10      	pop	{r4, pc}
    8c3a:	bf00      	nop

00008c3c <operator+(StringSumHelper const&, String const&)>:
{
    8c3c:	b510      	push	{r4, lr}
    8c3e:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    8c40:	688a      	ldr	r2, [r1, #8]
    8c42:	6809      	ldr	r1, [r1, #0]
    8c44:	f7ff ffaa 	bl	8b9c <String::append(char const*, unsigned int)>
}
    8c48:	4620      	mov	r0, r4
    8c4a:	bd10      	pop	{r4, pc}

00008c4c <operator+(StringSumHelper const&, char const*)>:
{
    8c4c:	b538      	push	{r3, r4, r5, lr}
    8c4e:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    8c50:	b141      	cbz	r1, 8c64 <operator+(StringSumHelper const&, char const*)+0x18>
    8c52:	460c      	mov	r4, r1
    8c54:	4608      	mov	r0, r1
    8c56:	f003 fb13 	bl	c280 <strlen>
    8c5a:	4602      	mov	r2, r0
    8c5c:	4621      	mov	r1, r4
    8c5e:	4628      	mov	r0, r5
    8c60:	f7ff ff9c 	bl	8b9c <String::append(char const*, unsigned int)>
}
    8c64:	4628      	mov	r0, r5
    8c66:	bd38      	pop	{r3, r4, r5, pc}

00008c68 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8c68:	6882      	ldr	r2, [r0, #8]
{
    8c6a:	b508      	push	{r3, lr}
    8c6c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8c6e:	b13a      	cbz	r2, 8c80 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    8c70:	b161      	cbz	r1, 8c8c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    8c72:	6800      	ldr	r0, [r0, #0]
    8c74:	f003 f938 	bl	bee8 <strcmp>
    8c78:	fab0 f080 	clz	r0, r0
    8c7c:	0940      	lsrs	r0, r0, #5
}
    8c7e:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8c80:	b131      	cbz	r1, 8c90 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    8c82:	7818      	ldrb	r0, [r3, #0]
    8c84:	fab0 f080 	clz	r0, r0
    8c88:	0940      	lsrs	r0, r0, #5
}
    8c8a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    8c8c:	6803      	ldr	r3, [r0, #0]
    8c8e:	e7f8      	b.n	8c82 <String::equals(char const*) const+0x1a>
    8c90:	2001      	movs	r0, #1
}
    8c92:	bd08      	pop	{r3, pc}

00008c94 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    8c94:	6883      	ldr	r3, [r0, #8]
    8c96:	428b      	cmp	r3, r1
    8c98:	d903      	bls.n	8ca2 <String::operator[](unsigned int)+0xe>
    8c9a:	6800      	ldr	r0, [r0, #0]
    8c9c:	b108      	cbz	r0, 8ca2 <String::operator[](unsigned int)+0xe>
	return buffer[index];
    8c9e:	4408      	add	r0, r1
}
    8ca0:	4770      	bx	lr
		dummy_writable_char = 0;
    8ca2:	4b02      	ldr	r3, [pc, #8]	; (8cac <String::operator[](unsigned int)+0x18>)
    8ca4:	2200      	movs	r2, #0
		return dummy_writable_char;
    8ca6:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    8ca8:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    8caa:	4770      	bx	lr
    8cac:	2001889b 	.word	0x2001889b

00008cb0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    8cb0:	b1c2      	cbz	r2, 8ce4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    8cb2:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    8cb4:	fab1 f681 	clz	r6, r1
    8cb8:	460c      	mov	r4, r1
    8cba:	0976      	lsrs	r6, r6, #5
    8cbc:	b119      	cbz	r1, 8cc6 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    8cbe:	6885      	ldr	r5, [r0, #8]
    8cc0:	429d      	cmp	r5, r3
    8cc2:	d801      	bhi.n	8cc8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    8cc4:	700e      	strb	r6, [r1, #0]
}
    8cc6:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    8cc8:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    8cca:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    8cce:	6801      	ldr	r1, [r0, #0]
    8cd0:	4620      	mov	r0, r4
    8cd2:	4565      	cmp	r5, ip
    8cd4:	4419      	add	r1, r3
    8cd6:	bf28      	it	cs
    8cd8:	4665      	movcs	r5, ip
    8cda:	462a      	mov	r2, r5
    8cdc:	f003 f828 	bl	bd30 <strncpy>
	buf[n] = 0;
    8ce0:	5566      	strb	r6, [r4, r5]
}
    8ce2:	bd70      	pop	{r4, r5, r6, pc}
    8ce4:	4770      	bx	lr
    8ce6:	bf00      	nop

00008ce8 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    8ce8:	6883      	ldr	r3, [r0, #8]
    8cea:	b13b      	cbz	r3, 8cfc <String::indexOf(char) const+0x14>
{
    8cec:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    8cee:	6804      	ldr	r4, [r0, #0]
    8cf0:	4620      	mov	r0, r4
    8cf2:	f002 ffb7 	bl	bc64 <strchr>
	if (temp == NULL) return -1;
    8cf6:	b120      	cbz	r0, 8d02 <String::indexOf(char) const+0x1a>
	return temp - buffer;
    8cf8:	1b00      	subs	r0, r0, r4
}
    8cfa:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    8cfc:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d00:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    8d02:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d06:	bd10      	pop	{r4, pc}

00008d08 <String::substring(unsigned int) const>:
{
    8d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    8d0c:	688f      	ldr	r7, [r1, #8]
{
    8d0e:	460e      	mov	r6, r1
    8d10:	4604      	mov	r4, r0
	if (left > right) {
    8d12:	4297      	cmp	r7, r2
    8d14:	d202      	bcs.n	8d1c <String::substring(unsigned int) const+0x14>
    8d16:	4613      	mov	r3, r2
    8d18:	463a      	mov	r2, r7
    8d1a:	461f      	mov	r7, r3
	buffer = NULL;
    8d1c:	2300      	movs	r3, #0
	len = 0;
    8d1e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8d20:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    8d22:	68b0      	ldr	r0, [r6, #8]
    8d24:	4290      	cmp	r0, r2
	capacity = 0;
    8d26:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    8d2a:	d314      	bcc.n	8d56 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    8d2c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    8d2e:	6831      	ldr	r1, [r6, #0]
    8d30:	bf28      	it	cs
    8d32:	4607      	movcs	r7, r0
    8d34:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    8d38:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    8d3a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    8d3c:	189d      	adds	r5, r3, r2
    8d3e:	d00d      	beq.n	8d5c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    8d40:	4628      	mov	r0, r5
    8d42:	f003 fa9d 	bl	c280 <strlen>
    8d46:	4629      	mov	r1, r5
    8d48:	4602      	mov	r2, r0
    8d4a:	4620      	mov	r0, r4
    8d4c:	f7ff fe7e 	bl	8a4c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8d50:	6833      	ldr	r3, [r6, #0]
    8d52:	f803 8007 	strb.w	r8, [r3, r7]
}
    8d56:	4620      	mov	r0, r4
    8d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8d5c:	60a5      	str	r5, [r4, #8]
    8d5e:	e7f8      	b.n	8d52 <String::substring(unsigned int) const+0x4a>

00008d60 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    8d60:	429a      	cmp	r2, r3
{
    8d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d66:	4604      	mov	r4, r0
    8d68:	460e      	mov	r6, r1
	if (left > right) {
    8d6a:	d902      	bls.n	8d72 <String::substring(unsigned int, unsigned int) const+0x12>
    8d6c:	4611      	mov	r1, r2
    8d6e:	461a      	mov	r2, r3
    8d70:	460b      	mov	r3, r1
	buffer = NULL;
    8d72:	2000      	movs	r0, #0
	len = 0;
    8d74:	60a0      	str	r0, [r4, #8]
	flags = 0;
    8d76:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    8d78:	68b7      	ldr	r7, [r6, #8]
    8d7a:	4297      	cmp	r7, r2
	capacity = 0;
    8d7c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    8d80:	d314      	bcc.n	8dac <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    8d82:	429f      	cmp	r7, r3
    8d84:	bf28      	it	cs
    8d86:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    8d88:	6833      	ldr	r3, [r6, #0]
    8d8a:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    8d8e:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    8d90:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    8d92:	189d      	adds	r5, r3, r2
    8d94:	d00d      	beq.n	8db2 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    8d96:	4628      	mov	r0, r5
    8d98:	f003 fa72 	bl	c280 <strlen>
    8d9c:	4629      	mov	r1, r5
    8d9e:	4602      	mov	r2, r0
    8da0:	4620      	mov	r0, r4
    8da2:	f7ff fe53 	bl	8a4c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8da6:	6833      	ldr	r3, [r6, #0]
    8da8:	f803 8007 	strb.w	r8, [r3, r7]
}
    8dac:	4620      	mov	r0, r4
    8dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8db2:	60a5      	str	r5, [r4, #8]
    8db4:	e7f8      	b.n	8da8 <String::substring(unsigned int, unsigned int) const+0x48>
    8db6:	bf00      	nop

00008db8 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    8db8:	b510      	push	{r4, lr}
    8dba:	4604      	mov	r4, r0
    8dbc:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    8dbe:	68a1      	ldr	r1, [r4, #8]
    8dc0:	b10a      	cbz	r2, 8dc6 <String::remove(unsigned int, unsigned int)+0xe>
    8dc2:	4281      	cmp	r1, r0
    8dc4:	d801      	bhi.n	8dca <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    8dc6:	4620      	mov	r0, r4
    8dc8:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    8dca:	eb00 0c02 	add.w	ip, r0, r2
    8dce:	4561      	cmp	r1, ip
    8dd0:	d30e      	bcc.n	8df0 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    8dd2:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    8dd4:	4661      	mov	r1, ip
    8dd6:	1a1a      	subs	r2, r3, r0
		len = len - count;
    8dd8:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    8dda:	6823      	ldr	r3, [r4, #0]
    8ddc:	4419      	add	r1, r3
    8dde:	4418      	add	r0, r3
    8de0:	f002 fe72 	bl	bac8 <memmove>
		buffer[len] = 0;
    8de4:	6822      	ldr	r2, [r4, #0]
    8de6:	68a3      	ldr	r3, [r4, #8]
    8de8:	2100      	movs	r1, #0
}
    8dea:	4620      	mov	r0, r4
		buffer[len] = 0;
    8dec:	54d1      	strb	r1, [r2, r3]
}
    8dee:	bd10      	pop	{r4, pc}
    8df0:	4603      	mov	r3, r0
    8df2:	2200      	movs	r2, #0
    8df4:	e7f0      	b.n	8dd8 <String::remove(unsigned int, unsigned int)+0x20>
    8df6:	bf00      	nop

00008df8 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    8df8:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    8dfa:	6804      	ldr	r4, [r0, #0]
{
    8dfc:	4605      	mov	r5, r0
	if (!buffer) return *this;
    8dfe:	b144      	cbz	r4, 8e12 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    8e00:	7820      	ldrb	r0, [r4, #0]
    8e02:	b130      	cbz	r0, 8e12 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    8e04:	f002 fd0c 	bl	b820 <tolower>
    8e08:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    8e0a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    8e0e:	2800      	cmp	r0, #0
    8e10:	d1f8      	bne.n	8e04 <String::toLowerCase()+0xc>
	}
	return *this;
}
    8e12:	4628      	mov	r0, r5
    8e14:	bd38      	pop	{r3, r4, r5, pc}
    8e16:	bf00      	nop

00008e18 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    8e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    8e1c:	6807      	ldr	r7, [r0, #0]
{
    8e1e:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    8e20:	b1e7      	cbz	r7, 8e5c <String::trim()+0x44>
    8e22:	6884      	ldr	r4, [r0, #8]
    8e24:	b1d4      	cbz	r4, 8e5c <String::trim()+0x44>
    8e26:	46b8      	mov	r8, r7
    8e28:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    8e2a:	f818 0b01 	ldrb.w	r0, [r8], #1
    8e2e:	f002 fcef 	bl	b810 <isspace>
    8e32:	2800      	cmp	r0, #0
    8e34:	d1f8      	bne.n	8e28 <String::trim()+0x10>
	char *end = buffer + len - 1;
    8e36:	3c01      	subs	r4, #1
    8e38:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    8e3a:	e002      	b.n	8e42 <String::trim()+0x2a>
    8e3c:	42a5      	cmp	r5, r4
    8e3e:	d805      	bhi.n	8e4c <String::trim()+0x34>
    8e40:	3c01      	subs	r4, #1
    8e42:	7820      	ldrb	r0, [r4, #0]
    8e44:	f002 fce4 	bl	b810 <isspace>
    8e48:	2800      	cmp	r0, #0
    8e4a:	d1f7      	bne.n	8e3c <String::trim()+0x24>
	len = end + 1 - begin;
    8e4c:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    8e4e:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    8e50:	eba2 0205 	sub.w	r2, r2, r5
    8e54:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    8e56:	d304      	bcc.n	8e62 <String::trim()+0x4a>
	buffer[len] = 0;
    8e58:	2300      	movs	r3, #0
    8e5a:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    8e5c:	4630      	mov	r0, r6
    8e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    8e62:	4638      	mov	r0, r7
    8e64:	4629      	mov	r1, r5
    8e66:	f000 f89d 	bl	8fa4 <memcpy>
	buffer[len] = 0;
    8e6a:	6837      	ldr	r7, [r6, #0]
    8e6c:	68b2      	ldr	r2, [r6, #8]
    8e6e:	e7f3      	b.n	8e58 <String::trim()+0x40>

00008e70 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    8e70:	6800      	ldr	r0, [r0, #0]
    8e72:	b108      	cbz	r0, 8e78 <String::toInt() const+0x8>
    8e74:	f001 be32 	b.w	aadc <atol>
	return 0;
}
    8e78:	4770      	bx	lr
    8e7a:	bf00      	nop

00008e7c <delay>:
	if (msec == 0) return;
    8e7c:	b900      	cbnz	r0, 8e80 <delay+0x4>
    8e7e:	4770      	bx	lr
{
    8e80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8e84:	2101      	movs	r1, #1
    8e86:	4681      	mov	r9, r0
    8e88:	4c21      	ldr	r4, [pc, #132]	; (8f10 <delay+0x94>)
    8e8a:	4d22      	ldr	r5, [pc, #136]	; (8f14 <delay+0x98>)
    8e8c:	4e22      	ldr	r6, [pc, #136]	; (8f18 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8e8e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8e92:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8e94:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8e96:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d1f7      	bne.n	8e8e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8e9e:	491f      	ldr	r1, [pc, #124]	; (8f1c <delay+0xa0>)
    8ea0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    8ea2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ea6:	f8df a078 	ldr.w	sl, [pc, #120]	; 8f20 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    8eaa:	1a1b      	subs	r3, r3, r0
    8eac:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    8eae:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8eb2:	f8da 2000 	ldr.w	r2, [sl]
    8eb6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    8eba:	455a      	cmp	r2, fp
    8ebc:	bf94      	ite	ls
    8ebe:	4490      	addls	r8, r2
    8ec0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8ec2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8ec6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8ec8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8eca:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d1f7      	bne.n	8ec2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8ed2:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ed4:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8ed8:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    8eda:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ede:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    8ee2:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    8ee6:	bf94      	ite	ls
    8ee8:	4462      	addls	r2, ip
    8eea:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    8eee:	eba2 0208 	sub.w	r2, r2, r8
    8ef2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    8ef6:	d306      	bcc.n	8f06 <delay+0x8a>
			if (--msec == 0) return;
    8ef8:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    8efc:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8f00:	d1df      	bne.n	8ec2 <delay+0x46>
}
    8f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    8f06:	f001 fa8b 	bl	a420 <yield>
		while ((micros() - start) >= 1000) {
    8f0a:	4904      	ldr	r1, [pc, #16]	; (8f1c <delay+0xa0>)
    8f0c:	e7d9      	b.n	8ec2 <delay+0x46>
    8f0e:	bf00      	nop
    8f10:	20018870 	.word	0x20018870
    8f14:	2001886c 	.word	0x2001886c
    8f18:	20018868 	.word	0x20018868
    8f1c:	e0001000 	.word	0xe0001000
    8f20:	20018864 	.word	0x20018864

00008f24 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8f24:	2836      	cmp	r0, #54	; 0x36
    8f26:	d829      	bhi.n	8f7c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8f28:	4b16      	ldr	r3, [pc, #88]	; (8f84 <pinMode+0x60>)
    8f2a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8f2c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    8f2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f32:	589a      	ldr	r2, [r3, r2]
{
    8f34:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f36:	6853      	ldr	r3, [r2, #4]
    8f38:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8f3a:	d00e      	beq.n	8f5a <pinMode+0x36>
    8f3c:	2904      	cmp	r1, #4
    8f3e:	d00c      	beq.n	8f5a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f40:	ea23 0304 	bic.w	r3, r3, r4
    8f44:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8f46:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8f48:	b1a9      	cbz	r1, 8f76 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    8f4a:	2902      	cmp	r1, #2
    8f4c:	d017      	beq.n	8f7e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    8f4e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8f50:	bf0c      	ite	eq
    8f52:	4a0d      	ldreq	r2, [pc, #52]	; (8f88 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8f54:	4a0d      	ldrne	r2, [pc, #52]	; (8f8c <pinMode+0x68>)
    8f56:	601a      	str	r2, [r3, #0]
    8f58:	e007      	b.n	8f6a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8f5a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    8f5c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8f5e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8f60:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8f62:	d008      	beq.n	8f76 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8f64:	f640 0238 	movw	r2, #2104	; 0x838
    8f68:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8f6a:	6843      	ldr	r3, [r0, #4]
    8f6c:	2215      	movs	r2, #21
}
    8f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    8f72:	601a      	str	r2, [r3, #0]
}
    8f74:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8f76:	2238      	movs	r2, #56	; 0x38
    8f78:	601a      	str	r2, [r3, #0]
    8f7a:	e7f6      	b.n	8f6a <pinMode+0x46>
    8f7c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8f7e:	4a04      	ldr	r2, [pc, #16]	; (8f90 <pinMode+0x6c>)
    8f80:	601a      	str	r2, [r3, #0]
    8f82:	e7f2      	b.n	8f6a <pinMode+0x46>
    8f84:	20000d64 	.word	0x20000d64
    8f88:	00013038 	.word	0x00013038
    8f8c:	00010038 	.word	0x00010038
    8f90:	0001f038 	.word	0x0001f038

00008f94 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8f94:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8f96:	f7f9 faad 	bl	24f4 <setup>
	while (1) {
		loop();
    8f9a:	f7fe f893 	bl	70c4 <loop>
		yield();
    8f9e:	f001 fa3f 	bl	a420 <yield>
	while (1) {
    8fa2:	e7fa      	b.n	8f9a <main+0x6>

00008fa4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8fa4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8fa6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8faa:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8fae:	d16d      	bne.n	908c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8fb0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8fb2:	d341      	bcc.n	9038 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8fb4:	f851 3b04 	ldr.w	r3, [r1], #4
    8fb8:	f840 3b04 	str.w	r3, [r0], #4
    8fbc:	f851 3b04 	ldr.w	r3, [r1], #4
    8fc0:	f840 3b04 	str.w	r3, [r0], #4
    8fc4:	f851 3b04 	ldr.w	r3, [r1], #4
    8fc8:	f840 3b04 	str.w	r3, [r0], #4
    8fcc:	f851 3b04 	ldr.w	r3, [r1], #4
    8fd0:	f840 3b04 	str.w	r3, [r0], #4
    8fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    8fd8:	f840 3b04 	str.w	r3, [r0], #4
    8fdc:	f851 3b04 	ldr.w	r3, [r1], #4
    8fe0:	f840 3b04 	str.w	r3, [r0], #4
    8fe4:	f851 3b04 	ldr.w	r3, [r1], #4
    8fe8:	f840 3b04 	str.w	r3, [r0], #4
    8fec:	f851 3b04 	ldr.w	r3, [r1], #4
    8ff0:	f840 3b04 	str.w	r3, [r0], #4
    8ff4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ff8:	f840 3b04 	str.w	r3, [r0], #4
    8ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    9000:	f840 3b04 	str.w	r3, [r0], #4
    9004:	f851 3b04 	ldr.w	r3, [r1], #4
    9008:	f840 3b04 	str.w	r3, [r0], #4
    900c:	f851 3b04 	ldr.w	r3, [r1], #4
    9010:	f840 3b04 	str.w	r3, [r0], #4
    9014:	f851 3b04 	ldr.w	r3, [r1], #4
    9018:	f840 3b04 	str.w	r3, [r0], #4
    901c:	f851 3b04 	ldr.w	r3, [r1], #4
    9020:	f840 3b04 	str.w	r3, [r0], #4
    9024:	f851 3b04 	ldr.w	r3, [r1], #4
    9028:	f840 3b04 	str.w	r3, [r0], #4
    902c:	f851 3b04 	ldr.w	r3, [r1], #4
    9030:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9034:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9036:	d2bd      	bcs.n	8fb4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9038:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    903a:	d311      	bcc.n	9060 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    903c:	f851 3b04 	ldr.w	r3, [r1], #4
    9040:	f840 3b04 	str.w	r3, [r0], #4
    9044:	f851 3b04 	ldr.w	r3, [r1], #4
    9048:	f840 3b04 	str.w	r3, [r0], #4
    904c:	f851 3b04 	ldr.w	r3, [r1], #4
    9050:	f840 3b04 	str.w	r3, [r0], #4
    9054:	f851 3b04 	ldr.w	r3, [r1], #4
    9058:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    905c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    905e:	d2ed      	bcs.n	903c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9060:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9062:	d305      	bcc.n	9070 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9064:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9068:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    906c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    906e:	d2f9      	bcs.n	9064 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9070:	3204      	adds	r2, #4
	beq	.Ldone
    9072:	d008      	beq.n	9086 <memcpy+0xe2>

	lsls	r2, r2, #31
    9074:	07d2      	lsls	r2, r2, #31
	itt ne
    9076:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9078:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    907c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9080:	d301      	bcc.n	9086 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9082:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9084:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9086:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9088:	4770      	bx	lr
    908a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    908c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    908e:	d313      	bcc.n	90b8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9090:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9092:	d08d      	beq.n	8fb0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9094:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9098:	d08a      	beq.n	8fb0 <memcpy+0xc>

	rsb	r3, #4
    909a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    909e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    90a0:	07db      	lsls	r3, r3, #31
	itt ne
    90a2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    90a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    90a8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    90ac:	d380      	bcc.n	8fb0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    90ae:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    90b2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    90b6:	e77b      	b.n	8fb0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    90b8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    90ba:	d3d9      	bcc.n	9070 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    90bc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    90be:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    90c2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    90c6:	d2f9      	bcs.n	90bc <memcpy+0x118>

	ldrb	r3, [r1]
    90c8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    90ca:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    90cc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    90ce:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    90d0:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    90d2:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    90d4:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    90d6:	4770      	bx	lr

000090d8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    90d8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    90dc:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    90de:	4666      	mov	r6, ip
	int i=0, j;
    90e0:	2400      	movs	r4, #0
    90e2:	e000      	b.n	90e6 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    90e4:	3401      	adds	r4, #1
		digit = val % radix;
    90e6:	fbb0 f5f2 	udiv	r5, r0, r2
    90ea:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    90ee:	2b09      	cmp	r3, #9
    90f0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    90f4:	f103 0330 	add.w	r3, r3, #48	; 0x30
    90f8:	fa5f fe8e 	uxtb.w	lr, lr
    90fc:	bf98      	it	ls
    90fe:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    9102:	4290      	cmp	r0, r2
		val /= radix;
    9104:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9106:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    910a:	d2eb      	bcs.n	90e4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    910c:	1c63      	adds	r3, r4, #1
    910e:	2200      	movs	r2, #0
    9110:	18c8      	adds	r0, r1, r3
    9112:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    9114:	b17c      	cbz	r4, 9136 <ultoa+0x5e>
		t = buf[j];
    9116:	4662      	mov	r2, ip
    9118:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    911c:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    9120:	eba1 030c 	sub.w	r3, r1, ip
    9124:	3202      	adds	r2, #2
		buf[j] = buf[i];
    9126:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    912a:	3b01      	subs	r3, #1
    912c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    912e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9130:	4423      	add	r3, r4
    9132:	429a      	cmp	r2, r3
    9134:	dbef      	blt.n	9116 <ultoa+0x3e>
	}
	return buf;
}
    9136:	4608      	mov	r0, r1
    9138:	bd70      	pop	{r4, r5, r6, pc}
    913a:	bf00      	nop

0000913c <unused_interrupt_vector>:
	__disable_irq();
    913c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    913e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    9142:	4c4f      	ldr	r4, [pc, #316]	; (9280 <unused_interrupt_vector+0x144>)
    9144:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    9148:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    914c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    9150:	4e4c      	ldr	r6, [pc, #304]	; (9284 <unused_interrupt_vector+0x148>)
	while (p < end) {
    9152:	4d4d      	ldr	r5, [pc, #308]	; (9288 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    9154:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    9158:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    915c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    9160:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    9164:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    9168:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    916c:	6993      	ldr	r3, [r2, #24]
    916e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    9172:	69d3      	ldr	r3, [r2, #28]
    9174:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    9178:	f000 f8d0 	bl	931c <tempmonGetTemp>
    917c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    9180:	f001 fc2a 	bl	a9d8 <rtc_get>
	info->len = sizeof(*info) / 4;
    9184:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    9186:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    918a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    918e:	460b      	mov	r3, r1
    9190:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9194:	493d      	ldr	r1, [pc, #244]	; (928c <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    9196:	1d30      	adds	r0, r6, #4
    9198:	405a      	eors	r2, r3
    919a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    919c:	f002 0301 	and.w	r3, r2, #1
    91a0:	3c01      	subs	r4, #1
    91a2:	fb01 f303 	mul.w	r3, r1, r3
    91a6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    91aa:	d1f7      	bne.n	919c <unused_interrupt_vector+0x60>
	while (p < end) {
    91ac:	42a8      	cmp	r0, r5
    91ae:	d002      	beq.n	91b6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    91b0:	6873      	ldr	r3, [r6, #4]
    91b2:	4606      	mov	r6, r0
    91b4:	e7ef      	b.n	9196 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    91b6:	4b32      	ldr	r3, [pc, #200]	; (9280 <unused_interrupt_vector+0x144>)
    91b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    91bc:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    91c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    91c4:	492f      	ldr	r1, [pc, #188]	; (9284 <unused_interrupt_vector+0x148>)
    91c6:	4a32      	ldr	r2, [pc, #200]	; (9290 <unused_interrupt_vector+0x154>)
    91c8:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    91cc:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    91d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    91d4:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    91d8:	4a2e      	ldr	r2, [pc, #184]	; (9294 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    91da:	2502      	movs	r5, #2
    91dc:	482e      	ldr	r0, [pc, #184]	; (9298 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    91de:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    91e0:	492e      	ldr	r1, [pc, #184]	; (929c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    91e2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    91e6:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    91e8:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    91ea:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    91ec:	482c      	ldr	r0, [pc, #176]	; (92a0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    91ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    91f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    91f6:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    91f8:	680b      	ldr	r3, [r1, #0]
    91fa:	4283      	cmp	r3, r0
    91fc:	d83d      	bhi.n	927a <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    91fe:	4d26      	ldr	r5, [pc, #152]	; (9298 <unused_interrupt_vector+0x15c>)
    9200:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    9202:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9206:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    920a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    920c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    920e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9212:	4924      	ldr	r1, [pc, #144]	; (92a4 <unused_interrupt_vector+0x168>)
    9214:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9218:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    921c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    9220:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    9224:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    9228:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    922c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    9230:	e001      	b.n	9236 <unused_interrupt_vector+0xfa>
		usb_isr();
    9232:	f000 f965 	bl	9500 <usb_isr>
		if (PIT_TFLG0) {
    9236:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    923a:	2b00      	cmp	r3, #0
    923c:	d0f9      	beq.n	9232 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    923e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    9240:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    9244:	2c4f      	cmp	r4, #79	; 0x4f
    9246:	d9f4      	bls.n	9232 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9248:	4b17      	ldr	r3, [pc, #92]	; (92a8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    924a:	2002      	movs	r0, #2
    924c:	4917      	ldr	r1, [pc, #92]	; (92ac <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    924e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    9252:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9256:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9258:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    925c:	b93b      	cbnz	r3, 926e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    925e:	4814      	ldr	r0, [pc, #80]	; (92b0 <unused_interrupt_vector+0x174>)
    9260:	4914      	ldr	r1, [pc, #80]	; (92b4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9262:	4a0d      	ldr	r2, [pc, #52]	; (9298 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    9264:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9266:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    926a:	2b00      	cmp	r3, #0
    926c:	d0fa      	beq.n	9264 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    926e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9272:	4a11      	ldr	r2, [pc, #68]	; (92b8 <unused_interrupt_vector+0x17c>)
    9274:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    9278:	e7fe      	b.n	9278 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    927a:	f001 f97d 	bl	a578 <set_arm_clock>
    927e:	e7be      	b.n	91fe <unused_interrupt_vector+0xc2>
    9280:	2027ff00 	.word	0x2027ff00
    9284:	2027ff80 	.word	0x2027ff80
    9288:	2027ffa8 	.word	0x2027ffa8
    928c:	edb88320 	.word	0xedb88320
    9290:	2027ffa0 	.word	0x2027ffa0
    9294:	400fc000 	.word	0x400fc000
    9298:	40084000 	.word	0x40084000
    929c:	2000440c 	.word	0x2000440c
    92a0:	0bcd3d80 	.word	0x0bcd3d80
    92a4:	00249f00 	.word	0x00249f00
    92a8:	400d9000 	.word	0x400d9000
    92ac:	402e0000 	.word	0x402e0000
    92b0:	400f8000 	.word	0x400f8000
    92b4:	0bad00f1 	.word	0x0bad00f1
    92b8:	05fa0004 	.word	0x05fa0004

000092bc <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    92bc:	490a      	ldr	r1, [pc, #40]	; (92e8 <_sbrk+0x2c>)
    92be:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    92c0:	b138      	cbz	r0, 92d2 <_sbrk+0x16>
{
    92c2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    92c4:	1813      	adds	r3, r2, r0
    92c6:	4809      	ldr	r0, [pc, #36]	; (92ec <_sbrk+0x30>)
    92c8:	4283      	cmp	r3, r0
    92ca:	d804      	bhi.n	92d6 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    92cc:	4610      	mov	r0, r2
                __brkval = prev + incr;
    92ce:	600b      	str	r3, [r1, #0]
}
    92d0:	bd08      	pop	{r3, pc}
    92d2:	4610      	mov	r0, r2
    92d4:	4770      	bx	lr
                        errno = ENOMEM;
    92d6:	f002 fdc9 	bl	be6c <__errno>
    92da:	230c      	movs	r3, #12
                        return (void *)-1;
    92dc:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    92e0:	6003      	str	r3, [r0, #0]
}
    92e2:	4610      	mov	r0, r2
    92e4:	bd08      	pop	{r3, pc}
    92e6:	bf00      	nop
    92e8:	20004424 	.word	0x20004424
    92ec:	20280000 	.word	0x20280000

000092f0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    92f0:	2000      	movs	r0, #0
    92f2:	4770      	bx	lr

000092f4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    92f4:	f04f 30ff 	mov.w	r0, #4294967295
    92f8:	4770      	bx	lr
    92fa:	bf00      	nop

000092fc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    92fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    9300:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    9302:	604b      	str	r3, [r1, #4]
}
    9304:	4770      	bx	lr
    9306:	bf00      	nop

00009308 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    9308:	2001      	movs	r0, #1
    930a:	4770      	bx	lr

0000930c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    930c:	f04f 30ff 	mov.w	r0, #4294967295
    9310:	4770      	bx	lr
    9312:	bf00      	nop

00009314 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    9314:	bf30      	wfi
    9316:	e7fd      	b.n	9314 <abort>

00009318 <Panic_Temp_isr>:
  unused_interrupt_vector();
    9318:	f7ff bf10 	b.w	913c <unused_interrupt_vector>

0000931c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    931c:	4a12      	ldr	r2, [pc, #72]	; (9368 <tempmonGetTemp+0x4c>)
    931e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9322:	075b      	lsls	r3, r3, #29
    9324:	d5fb      	bpl.n	931e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9326:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    932a:	4810      	ldr	r0, [pc, #64]	; (936c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    932c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9330:	490f      	ldr	r1, [pc, #60]	; (9370 <tempmonGetTemp+0x54>)
    9332:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9336:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    933a:	ed91 6a00 	vldr	s12, [r1]
    933e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9342:	4a0c      	ldr	r2, [pc, #48]	; (9374 <tempmonGetTemp+0x58>)
    9344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9348:	4b0b      	ldr	r3, [pc, #44]	; (9378 <tempmonGetTemp+0x5c>)
    934a:	edd2 6a00 	vldr	s13, [r2]
    934e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9352:	ed93 7a00 	vldr	s14, [r3]
    9356:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    935a:	ee67 7a86 	vmul.f32	s15, s15, s12
    935e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    9362:	ee37 0a40 	vsub.f32	s0, s14, s0
    9366:	4770      	bx	lr
    9368:	400d8100 	.word	0x400d8100
    936c:	20018854 	.word	0x20018854
    9370:	2001885c 	.word	0x2001885c
    9374:	20018860 	.word	0x20018860
    9378:	20018858 	.word	0x20018858

0000937c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    937c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    937e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    9380:	b11b      	cbz	r3, 938a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9382:	6853      	ldr	r3, [r2, #4]
    9384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9388:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    938a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    938c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    938e:	b33c      	cbz	r4, 93e0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    9390:	4b1a      	ldr	r3, [pc, #104]	; (93fc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    9392:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9394:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9398:	420c      	tst	r4, r1
    939a:	d11d      	bne.n	93d8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    939c:	4e18      	ldr	r6, [pc, #96]	; (9400 <schedule_transfer+0x84>)
    939e:	6877      	ldr	r7, [r6, #4]
    93a0:	e004      	b.n	93ac <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    93a2:	6874      	ldr	r4, [r6, #4]
    93a4:	1be4      	subs	r4, r4, r7
    93a6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    93aa:	d20b      	bcs.n	93c4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    93ac:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    93b0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    93b4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    93b8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    93bc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    93c0:	0464      	lsls	r4, r4, #17
    93c2:	d5ee      	bpl.n	93a2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    93c4:	400d      	ands	r5, r1
    93c6:	d107      	bne.n	93d8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    93c8:	4c0c      	ldr	r4, [pc, #48]	; (93fc <schedule_transfer+0x80>)
		endpoint->status = 0;
    93ca:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    93ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    93d2:	430b      	orrs	r3, r1
    93d4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    93d8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    93da:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    93dc:	bcf0      	pop	{r4, r5, r6, r7}
    93de:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    93e0:	4d06      	ldr	r5, [pc, #24]	; (93fc <schedule_transfer+0x80>)
	endpoint->status = 0;
    93e2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    93e6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    93ea:	430b      	orrs	r3, r1
    93ec:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    93f0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    93f2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    93f4:	b662      	cpsie	i
}
    93f6:	bcf0      	pop	{r4, r5, r6, r7}
    93f8:	4770      	bx	lr
    93fa:	bf00      	nop
    93fc:	402e0000 	.word	0x402e0000
    9400:	e0001000 	.word	0xe0001000

00009404 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9404:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9406:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    9408:	b19d      	cbz	r5, 9432 <run_callbacks+0x2e>
    940a:	4606      	mov	r6, r0
    940c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    940e:	2400      	movs	r4, #0
    9410:	e003      	b.n	941a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    9412:	6812      	ldr	r2, [r2, #0]
		count++;
    9414:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    9416:	2a01      	cmp	r2, #1
    9418:	d00c      	beq.n	9434 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    941a:	6853      	ldr	r3, [r2, #4]
    941c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    9420:	d0f7      	beq.n	9412 <run_callbacks+0xe>
			ep->first_transfer = t;
    9422:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9424:	b12c      	cbz	r4, 9432 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    9426:	4628      	mov	r0, r5
		ep->callback_function(first);
    9428:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    942a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    942c:	4798      	blx	r3
	while (count) {
    942e:	3c01      	subs	r4, #1
    9430:	d1f9      	bne.n	9426 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    9432:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    9434:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    9438:	e7f4      	b.n	9424 <run_callbacks+0x20>
    943a:	bf00      	nop

0000943c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    943c:	b430      	push	{r4, r5}
	if (len > 0) {
    943e:	b9d9      	cbnz	r1, 9478 <endpoint0_transmit.constprop.0+0x3c>
    9440:	4c1f      	ldr	r4, [pc, #124]	; (94c0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    9442:	4b20      	ldr	r3, [pc, #128]	; (94c4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    9444:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9446:	4a20      	ldr	r2, [pc, #128]	; (94c8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    9448:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    944a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    944e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9450:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    9452:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9456:	2480      	movs	r4, #128	; 0x80
    9458:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    945a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    945e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9462:	481a      	ldr	r0, [pc, #104]	; (94cc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    9464:	432b      	orrs	r3, r5
    9466:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    946a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    946c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9470:	2b00      	cmp	r3, #0
    9472:	d1fb      	bne.n	946c <endpoint0_transmit.constprop.0+0x30>
}
    9474:	bc30      	pop	{r4, r5}
    9476:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9478:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    947a:	4b15      	ldr	r3, [pc, #84]	; (94d0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    947c:	4c10      	ldr	r4, [pc, #64]	; (94c0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    947e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9480:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9484:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    9486:	4a10      	ldr	r2, [pc, #64]	; (94c8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9488:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    948a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    948e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9490:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9492:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9496:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9498:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    949a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    949e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    94a2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    94a4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    94a6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    94a8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    94aa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    94ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    94b2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    94b6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    94ba:	2b00      	cmp	r3, #0
    94bc:	d1fb      	bne.n	94b6 <endpoint0_transmit.constprop.0+0x7a>
    94be:	e7c0      	b.n	9442 <endpoint0_transmit.constprop.0+0x6>
    94c0:	20000000 	.word	0x20000000
    94c4:	20004ec0 	.word	0x20004ec0
    94c8:	402e0000 	.word	0x402e0000
    94cc:	200053d4 	.word	0x200053d4
    94d0:	20004ee0 	.word	0x20004ee0

000094d4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    94d4:	4908      	ldr	r1, [pc, #32]	; (94f8 <usb_stop_sof_interrupts+0x24>)
    94d6:	2201      	movs	r2, #1
    94d8:	780b      	ldrb	r3, [r1, #0]
    94da:	fa02 f000 	lsl.w	r0, r2, r0
    94de:	ea23 0000 	bic.w	r0, r3, r0
    94e2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    94e4:	b930      	cbnz	r0, 94f4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    94e6:	4a05      	ldr	r2, [pc, #20]	; (94fc <usb_stop_sof_interrupts+0x28>)
    94e8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    94ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    94f0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    94f4:	4770      	bx	lr
    94f6:	bf00      	nop
    94f8:	200188b0 	.word	0x200188b0
    94fc:	402e0000 	.word	0x402e0000

00009500 <usb_isr>:
{
    9500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    9504:	4c97      	ldr	r4, [pc, #604]	; (9764 <usb_isr+0x264>)
{
    9506:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    9508:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    950c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    950e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    9512:	d553      	bpl.n	95bc <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    9514:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    9518:	2a00      	cmp	r2, #0
    951a:	d04a      	beq.n	95b2 <usb_isr+0xb2>
    951c:	4e92      	ldr	r6, [pc, #584]	; (9768 <usb_isr+0x268>)
    951e:	f8df a260 	ldr.w	sl, [pc, #608]	; 9780 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    9522:	f8df 9274 	ldr.w	r9, [pc, #628]	; 9798 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    9526:	f8df b274 	ldr.w	fp, [pc, #628]	; 979c <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    952a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 97a0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    952e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    9532:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9536:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    953a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    953e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9542:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9546:	049d      	lsls	r5, r3, #18
    9548:	d5f5      	bpl.n	9536 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    954a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    954e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9552:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9556:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    955a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    955e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    9562:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    9566:	d1fa      	bne.n	955e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    9568:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    956a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    956c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    9570:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    9574:	f000 81cf 	beq.w	9916 <usb_isr+0x416>
    9578:	f200 80db 	bhi.w	9732 <usb_isr+0x232>
    957c:	f240 3102 	movw	r1, #770	; 0x302
    9580:	428b      	cmp	r3, r1
    9582:	f000 81e7 	beq.w	9954 <usb_isr+0x454>
    9586:	f200 809a 	bhi.w	96be <usb_isr+0x1be>
    958a:	2b82      	cmp	r3, #130	; 0x82
    958c:	f000 81cb 	beq.w	9926 <usb_isr+0x426>
    9590:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9594:	f040 808a 	bne.w	96ac <usb_isr+0x1ac>
		if (endpoint > 7) break;
    9598:	f010 0f78 	tst.w	r0, #120	; 0x78
    959c:	b283      	uxth	r3, r0
    959e:	f000 8203 	beq.w	99a8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    95a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    95a6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    95aa:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    95ae:	2a00      	cmp	r2, #0
    95b0:	d1bd      	bne.n	952e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    95b2:	4a6c      	ldr	r2, [pc, #432]	; (9764 <usb_isr+0x264>)
    95b4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    95b8:	2b00      	cmp	r3, #0
    95ba:	d142      	bne.n	9642 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    95bc:	067e      	lsls	r6, r7, #25
    95be:	d516      	bpl.n	95ee <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    95c0:	4b68      	ldr	r3, [pc, #416]	; (9764 <usb_isr+0x264>)
    95c2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    95c6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    95ca:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    95ce:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    95d2:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    95d6:	2c00      	cmp	r4, #0
    95d8:	d1fb      	bne.n	95d2 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    95da:	f04f 32ff 	mov.w	r2, #4294967295
    95de:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    95e2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    95e6:	f000 fd29 	bl	a03c <usb_serial_reset>
		endpointN_notify_mask = 0;
    95ea:	4b60      	ldr	r3, [pc, #384]	; (976c <usb_isr+0x26c>)
    95ec:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    95ee:	01fc      	lsls	r4, r7, #7
    95f0:	d503      	bpl.n	95fa <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    95f2:	4b5f      	ldr	r3, [pc, #380]	; (9770 <usb_isr+0x270>)
    95f4:	681b      	ldr	r3, [r3, #0]
    95f6:	b103      	cbz	r3, 95fa <usb_isr+0xfa>
    95f8:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    95fa:	01b8      	lsls	r0, r7, #6
    95fc:	d503      	bpl.n	9606 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    95fe:	4b5d      	ldr	r3, [pc, #372]	; (9774 <usb_isr+0x274>)
    9600:	681b      	ldr	r3, [r3, #0]
    9602:	b103      	cbz	r3, 9606 <usb_isr+0x106>
    9604:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    9606:	0779      	lsls	r1, r7, #29
    9608:	d508      	bpl.n	961c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    960a:	4b56      	ldr	r3, [pc, #344]	; (9764 <usb_isr+0x264>)
    960c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    9610:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    9614:	d047      	beq.n	96a6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    9616:	4b58      	ldr	r3, [pc, #352]	; (9778 <usb_isr+0x278>)
    9618:	2201      	movs	r2, #1
    961a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    961c:	4b51      	ldr	r3, [pc, #324]	; (9764 <usb_isr+0x264>)
    961e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    9622:	061a      	lsls	r2, r3, #24
    9624:	d50a      	bpl.n	963c <usb_isr+0x13c>
    9626:	063b      	lsls	r3, r7, #24
    9628:	d508      	bpl.n	963c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    962a:	4a54      	ldr	r2, [pc, #336]	; (977c <usb_isr+0x27c>)
    962c:	7813      	ldrb	r3, [r2, #0]
    962e:	b12b      	cbz	r3, 963c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    9630:	3b01      	subs	r3, #1
    9632:	b2db      	uxtb	r3, r3
    9634:	7013      	strb	r3, [r2, #0]
    9636:	2b00      	cmp	r3, #0
    9638:	f000 8272 	beq.w	9b20 <usb_isr+0x620>
}
    963c:	b003      	add	sp, #12
    963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    9642:	494f      	ldr	r1, [pc, #316]	; (9780 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    9644:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    9648:	6808      	ldr	r0, [r1, #0]
    964a:	4203      	tst	r3, r0
    964c:	f040 81d1 	bne.w	99f2 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    9650:	4a46      	ldr	r2, [pc, #280]	; (976c <usb_isr+0x26c>)
    9652:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    9654:	401c      	ands	r4, r3
    9656:	d0b1      	beq.n	95bc <usb_isr+0xbc>
				while (tx) {
    9658:	ea5f 4814 	movs.w	r8, r4, lsr #16
    965c:	d010      	beq.n	9680 <usb_isr+0x180>
    965e:	4e42      	ldr	r6, [pc, #264]	; (9768 <usb_isr+0x268>)
					tx &= ~(1<<p);
    9660:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    9664:	fa98 f5a8 	rbit	r5, r8
    9668:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    966c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    9670:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9674:	3040      	adds	r0, #64	; 0x40
    9676:	f7ff fec5 	bl	9404 <run_callbacks>
				while (tx) {
    967a:	ea38 0805 	bics.w	r8, r8, r5
    967e:	d1f1      	bne.n	9664 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    9680:	b2a4      	uxth	r4, r4
				while(rx) {
    9682:	2c00      	cmp	r4, #0
    9684:	d09a      	beq.n	95bc <usb_isr+0xbc>
    9686:	4e38      	ldr	r6, [pc, #224]	; (9768 <usb_isr+0x268>)
					rx &= ~(1<<p);
    9688:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    968c:	fa94 f5a4 	rbit	r5, r4
    9690:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    9694:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    9698:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    969c:	f7ff feb2 	bl	9404 <run_callbacks>
				while(rx) {
    96a0:	43ac      	bics	r4, r5
    96a2:	d1f3      	bne.n	968c <usb_isr+0x18c>
    96a4:	e78a      	b.n	95bc <usb_isr+0xbc>
			usb_high_speed = 0;
    96a6:	4a34      	ldr	r2, [pc, #208]	; (9778 <usb_isr+0x278>)
    96a8:	7013      	strb	r3, [r2, #0]
    96aa:	e7b7      	b.n	961c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    96ac:	2b80      	cmp	r3, #128	; 0x80
    96ae:	f47f af78 	bne.w	95a2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    96b2:	4834      	ldr	r0, [pc, #208]	; (9784 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    96b4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    96b6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    96b8:	f7ff fec0 	bl	943c <endpoint0_transmit.constprop.0>
		return;
    96bc:	e775      	b.n	95aa <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    96be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    96c2:	f000 810b 	beq.w	98dc <usb_isr+0x3dc>
    96c6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    96ca:	2b01      	cmp	r3, #1
    96cc:	f63f af69 	bhi.w	95a2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    96d0:	4b2d      	ldr	r3, [pc, #180]	; (9788 <usb_isr+0x288>)
    96d2:	685d      	ldr	r5, [r3, #4]
    96d4:	2d00      	cmp	r5, #0
    96d6:	f43f af64 	beq.w	95a2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    96da:	fa1f fc8c 	uxth.w	ip, ip
    96de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    96e2:	e004      	b.n	96ee <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    96e4:	691d      	ldr	r5, [r3, #16]
    96e6:	330c      	adds	r3, #12
    96e8:	2d00      	cmp	r5, #0
    96ea:	f43f af5a 	beq.w	95a2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    96ee:	881a      	ldrh	r2, [r3, #0]
    96f0:	4572      	cmp	r2, lr
    96f2:	d1f7      	bne.n	96e4 <usb_isr+0x1e4>
    96f4:	885a      	ldrh	r2, [r3, #2]
    96f6:	4562      	cmp	r2, ip
    96f8:	d1f4      	bne.n	96e4 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    96fa:	ea4f 221e 	mov.w	r2, lr, lsr #8
    96fe:	2a03      	cmp	r2, #3
    9700:	f000 81a5 	beq.w	9a4e <usb_isr+0x54e>
					datalen = list->length;
    9704:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    9706:	0c00      	lsrs	r0, r0, #16
    9708:	4282      	cmp	r2, r0
    970a:	bf28      	it	cs
    970c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    970e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    9712:	f040 81a1 	bne.w	9a58 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    9716:	4b18      	ldr	r3, [pc, #96]	; (9778 <usb_isr+0x278>)
    9718:	491c      	ldr	r1, [pc, #112]	; (978c <usb_isr+0x28c>)
    971a:	7818      	ldrb	r0, [r3, #0]
    971c:	4b1c      	ldr	r3, [pc, #112]	; (9790 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    971e:	9201      	str	r2, [sp, #4]
    9720:	2800      	cmp	r0, #0
    9722:	bf18      	it	ne
    9724:	4619      	movne	r1, r3
    9726:	481b      	ldr	r0, [pc, #108]	; (9794 <usb_isr+0x294>)
    9728:	f7ff fc3c 	bl	8fa4 <memcpy>
    972c:	4d19      	ldr	r5, [pc, #100]	; (9794 <usb_isr+0x294>)
    972e:	9a01      	ldr	r2, [sp, #4]
    9730:	e1e1      	b.n	9af6 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    9732:	f242 2121 	movw	r1, #8737	; 0x2221
    9736:	428b      	cmp	r3, r1
    9738:	d07c      	beq.n	9834 <usb_isr+0x334>
    973a:	d933      	bls.n	97a4 <usb_isr+0x2a4>
    973c:	f242 3121 	movw	r1, #8993	; 0x2321
    9740:	428b      	cmp	r3, r1
    9742:	f000 8081 	beq.w	9848 <usb_isr+0x348>
    9746:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    974a:	428b      	cmp	r3, r1
    974c:	f47f af29 	bne.w	95a2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    9750:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    9754:	b283      	uxth	r3, r0
    9756:	f47f af24 	bne.w	95a2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    975a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    975e:	f363 0c0f 	bfi	ip, r3, #0, #16
    9762:	e7b5      	b.n	96d0 <usb_isr+0x1d0>
    9764:	402e0000 	.word	0x402e0000
    9768:	20000000 	.word	0x20000000
    976c:	200053d8 	.word	0x200053d8
    9770:	20018880 	.word	0x20018880
    9774:	20018884 	.word	0x20018884
    9778:	200188b6 	.word	0x200188b6
    977c:	200188b7 	.word	0x200188b7
    9780:	200053d4 	.word	0x200053d4
    9784:	2001881c 	.word	0x2001881c
    9788:	20001240 	.word	0x20001240
    978c:	60001e84 	.word	0x60001e84
    9790:	60001ee8 	.word	0x60001ee8
    9794:	20200000 	.word	0x20200000
    9798:	200053cc 	.word	0x200053cc
    979c:	b8c6cf5d 	.word	0xb8c6cf5d
    97a0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    97a4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    97a8:	d066      	beq.n	9878 <usb_isr+0x378>
    97aa:	f242 0121 	movw	r1, #8225	; 0x2021
    97ae:	428b      	cmp	r3, r1
    97b0:	f47f aef7 	bne.w	95a2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    97b4:	0c03      	lsrs	r3, r0, #16
    97b6:	2b07      	cmp	r3, #7
    97b8:	f47f aef3 	bne.w	95a2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    97bc:	4bb2      	ldr	r3, [pc, #712]	; (9a88 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97be:	49b3      	ldr	r1, [pc, #716]	; (9a8c <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    97c0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97c2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    97c4:	49b2      	ldr	r1, [pc, #712]	; (9a90 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    97c6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    97c8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    97cc:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    97d0:	2201      	movs	r2, #1
    97d2:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    97d4:	4aaf      	ldr	r2, [pc, #700]	; (9a94 <usb_isr+0x594>)
    97d6:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    97d8:	4aaf      	ldr	r2, [pc, #700]	; (9a98 <usb_isr+0x598>)
    97da:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    97dc:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    97e0:	f041 0101 	orr.w	r1, r1, #1
    97e4:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    97e8:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    97ec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    97f0:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    97f2:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    97f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    97f8:	2b00      	cmp	r3, #0
    97fa:	d1fb      	bne.n	97f4 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    97fc:	4aa7      	ldr	r2, [pc, #668]	; (9a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    97fe:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9800:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    9802:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9804:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9806:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9808:	f248 0380 	movw	r3, #32896	; 0x8080
    980c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    980e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9812:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9816:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    981a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    981e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9826:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    982a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    982e:	2b00      	cmp	r3, #0
    9830:	d1fb      	bne.n	982a <usb_isr+0x32a>
    9832:	e6ba      	b.n	95aa <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9834:	b280      	uxth	r0, r0
    9836:	b938      	cbnz	r0, 9848 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9838:	4b99      	ldr	r3, [pc, #612]	; (9aa0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    983a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    983e:	6819      	ldr	r1, [r3, #0]
    9840:	4b98      	ldr	r3, [pc, #608]	; (9aa4 <usb_isr+0x5a4>)
    9842:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9844:	4b98      	ldr	r3, [pc, #608]	; (9aa8 <usb_isr+0x5a8>)
    9846:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    9848:	4b94      	ldr	r3, [pc, #592]	; (9a9c <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    984a:	2200      	movs	r2, #0
    984c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    984e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9850:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9852:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9854:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9856:	2280      	movs	r2, #128	; 0x80
    9858:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    985a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    985e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9862:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    986a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    986e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9872:	2b00      	cmp	r3, #0
    9874:	d1fb      	bne.n	986e <usb_isr+0x36e>
    9876:	e698      	b.n	95aa <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    9878:	f3c2 4207 	ubfx	r2, r2, #16, #8
    987c:	4b8b      	ldr	r3, [pc, #556]	; (9aac <usb_isr+0x5ac>)
    987e:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9880:	4b8b      	ldr	r3, [pc, #556]	; (9ab0 <usb_isr+0x5b0>)
    9882:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9886:	4b8b      	ldr	r3, [pc, #556]	; (9ab4 <usb_isr+0x5b4>)
    9888:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    988c:	4b8a      	ldr	r3, [pc, #552]	; (9ab8 <usb_isr+0x5b8>)
    988e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    9892:	f000 fbd5 	bl	a040 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    9896:	2280      	movs	r2, #128	; 0x80
    9898:	4629      	mov	r1, r5
    989a:	4888      	ldr	r0, [pc, #544]	; (9abc <usb_isr+0x5bc>)
    989c:	f002 f990 	bl	bbc0 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    98a0:	4b87      	ldr	r3, [pc, #540]	; (9ac0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98a2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    98a4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    98a8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    98ac:	4b7b      	ldr	r3, [pc, #492]	; (9a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    98ae:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98b0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    98b2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    98b4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    98b6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    98b8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    98ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    98be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    98c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    98c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    98ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    98ce:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    98d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    98d6:	2b00      	cmp	r3, #0
    98d8:	d1fb      	bne.n	98d2 <usb_isr+0x3d2>
    98da:	e666      	b.n	95aa <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    98dc:	4b6f      	ldr	r3, [pc, #444]	; (9a9c <usb_isr+0x59c>)
    98de:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    98e0:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    98e2:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98e4:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    98e6:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    98e8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98ea:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    98ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    98f0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    98f4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    98f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    98fc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9900:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9904:	2b00      	cmp	r3, #0
    9906:	d1fb      	bne.n	9900 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9908:	0c13      	lsrs	r3, r2, #16
    990a:	065b      	lsls	r3, r3, #25
    990c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9910:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    9914:	e649      	b.n	95aa <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    9916:	4b65      	ldr	r3, [pc, #404]	; (9aac <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9918:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    991a:	486a      	ldr	r0, [pc, #424]	; (9ac4 <usb_isr+0x5c4>)
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9920:	f7ff fd8c 	bl	943c <endpoint0_transmit.constprop.0>
		return;
    9924:	e641      	b.n	95aa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9926:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    9928:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    992c:	f47f ae39 	bne.w	95a2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    9930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9934:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    9938:	4a62      	ldr	r2, [pc, #392]	; (9ac4 <usb_isr+0x5c4>)
    993a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    993c:	0618      	lsls	r0, r3, #24
    993e:	f100 809e 	bmi.w	9a7e <usb_isr+0x57e>
    9942:	07cb      	lsls	r3, r1, #31
    9944:	d501      	bpl.n	994a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    9946:	2301      	movs	r3, #1
    9948:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    994a:	2102      	movs	r1, #2
    994c:	485d      	ldr	r0, [pc, #372]	; (9ac4 <usb_isr+0x5c4>)
    994e:	f7ff fd75 	bl	943c <endpoint0_transmit.constprop.0>
		return;
    9952:	e62a      	b.n	95aa <usb_isr+0xaa>
		if (endpoint > 7) break;
    9954:	f010 0f78 	tst.w	r0, #120	; 0x78
    9958:	b283      	uxth	r3, r0
    995a:	f47f ae22 	bne.w	95a2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    995e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    9962:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9966:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    996a:	bf14      	ite	ne
    996c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9970:	f043 0301 	orreq.w	r3, r3, #1
    9974:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9978:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    997a:	4b48      	ldr	r3, [pc, #288]	; (9a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    997c:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    997e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9980:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9982:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9984:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9986:	2280      	movs	r2, #128	; 0x80
    9988:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    998a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    998e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9992:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    999a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    999e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    99a2:	2b00      	cmp	r3, #0
    99a4:	d1fb      	bne.n	999e <usb_isr+0x49e>
    99a6:	e600      	b.n	95aa <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    99a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    99ac:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    99b0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    99b4:	bf14      	ite	ne
    99b6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    99ba:	f023 0301 	biceq.w	r3, r3, #1
    99be:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    99c2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    99c4:	4b35      	ldr	r3, [pc, #212]	; (9a9c <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    99c6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    99c8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    99ca:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    99cc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    99ce:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    99d0:	2280      	movs	r2, #128	; 0x80
    99d2:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    99d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    99d8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    99dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    99e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    99e4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    99e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    99ec:	2b00      	cmp	r3, #0
    99ee:	d1fb      	bne.n	99e8 <usb_isr+0x4e8>
    99f0:	e5db      	b.n	95aa <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    99f2:	2000      	movs	r0, #0
    99f4:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    99f6:	4926      	ldr	r1, [pc, #152]	; (9a90 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    99f8:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    99fa:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    99fc:	f242 0121 	movw	r1, #8225	; 0x2021
    9a00:	428c      	cmp	r4, r1
    9a02:	f47f ae25 	bne.w	9650 <usb_isr+0x150>
    9a06:	b280      	uxth	r0, r0
    9a08:	2800      	cmp	r0, #0
    9a0a:	f47f ae21 	bne.w	9650 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9a0e:	492e      	ldr	r1, [pc, #184]	; (9ac8 <usb_isr+0x5c8>)
    9a10:	4c2e      	ldr	r4, [pc, #184]	; (9acc <usb_isr+0x5cc>)
    9a12:	c903      	ldmia	r1, {r0, r1}
    9a14:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    9a16:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9a18:	ea4f 4111 	mov.w	r1, r1, lsr #16
    9a1c:	6020      	str	r0, [r4, #0]
    9a1e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    9a20:	f47f ae16 	bne.w	9650 <usb_isr+0x150>
	__disable_irq();
    9a24:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    9a26:	482a      	ldr	r0, [pc, #168]	; (9ad0 <usb_isr+0x5d0>)
    9a28:	7801      	ldrb	r1, [r0, #0]
    9a2a:	f041 0108 	orr.w	r1, r1, #8
    9a2e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9a30:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9a34:	060d      	lsls	r5, r1, #24
    9a36:	d405      	bmi.n	9a44 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9a38:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9a3a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9a3c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9a40:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    9a44:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9a46:	4a23      	ldr	r2, [pc, #140]	; (9ad4 <usb_isr+0x5d4>)
    9a48:	2150      	movs	r1, #80	; 0x50
    9a4a:	7011      	strb	r1, [r2, #0]
    9a4c:	e600      	b.n	9650 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    9a4e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    9a50:	782a      	ldrb	r2, [r5, #0]
    9a52:	4282      	cmp	r2, r0
    9a54:	bf28      	it	cs
    9a56:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    9a58:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    9a5c:	d144      	bne.n	9ae8 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9a5e:	4b1e      	ldr	r3, [pc, #120]	; (9ad8 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9a60:	4d1e      	ldr	r5, [pc, #120]	; (9adc <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    9a62:	7818      	ldrb	r0, [r3, #0]
    9a64:	491e      	ldr	r1, [pc, #120]	; (9ae0 <usb_isr+0x5e0>)
    9a66:	4b1f      	ldr	r3, [pc, #124]	; (9ae4 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9a68:	9201      	str	r2, [sp, #4]
    9a6a:	2800      	cmp	r0, #0
    9a6c:	bf18      	it	ne
    9a6e:	4619      	movne	r1, r3
    9a70:	4628      	mov	r0, r5
    9a72:	f7ff fa97 	bl	8fa4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9a76:	2307      	movs	r3, #7
    9a78:	706b      	strb	r3, [r5, #1]
    9a7a:	9a01      	ldr	r2, [sp, #4]
    9a7c:	e03b      	b.n	9af6 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9a7e:	03c9      	lsls	r1, r1, #15
    9a80:	f53f af61 	bmi.w	9946 <usb_isr+0x446>
    9a84:	e761      	b.n	994a <usb_isr+0x44a>
    9a86:	bf00      	nop
    9a88:	20004ee0 	.word	0x20004ee0
    9a8c:	200063cc 	.word	0x200063cc
    9a90:	20005080 	.word	0x20005080
    9a94:	00070080 	.word	0x00070080
    9a98:	200073cc 	.word	0x200073cc
    9a9c:	20004ec0 	.word	0x20004ec0
    9aa0:	2001886c 	.word	0x2001886c
    9aa4:	2001887c 	.word	0x2001887c
    9aa8:	200188b4 	.word	0x200188b4
    9aac:	200188b5 	.word	0x200188b5
    9ab0:	00cc0002 	.word	0x00cc0002
    9ab4:	000200c8 	.word	0x000200c8
    9ab8:	00c80002 	.word	0x00c80002
    9abc:	20000080 	.word	0x20000080
    9ac0:	74d59319 	.word	0x74d59319
    9ac4:	2001881c 	.word	0x2001881c
    9ac8:	200053cc 	.word	0x200053cc
    9acc:	20018874 	.word	0x20018874
    9ad0:	200188b0 	.word	0x200188b0
    9ad4:	200188b7 	.word	0x200188b7
    9ad8:	200188b6 	.word	0x200188b6
    9adc:	20200000 	.word	0x20200000
    9ae0:	60001ee8 	.word	0x60001ee8
    9ae4:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9ae8:	4629      	mov	r1, r5
    9aea:	4d10      	ldr	r5, [pc, #64]	; (9b2c <usb_isr+0x62c>)
    9aec:	9201      	str	r2, [sp, #4]
    9aee:	4628      	mov	r0, r5
    9af0:	f7ff fa58 	bl	8fa4 <memcpy>
    9af4:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9af6:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9afa:	4415      	add	r5, r2
	asm("dsb");
    9afc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9b00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9b04:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    9b08:	3320      	adds	r3, #32
	} while (location < end_addr);
    9b0a:	429d      	cmp	r5, r3
    9b0c:	d8fa      	bhi.n	9b04 <usb_isr+0x604>
	asm("dsb");
    9b0e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9b12:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    9b16:	4805      	ldr	r0, [pc, #20]	; (9b2c <usb_isr+0x62c>)
    9b18:	4611      	mov	r1, r2
    9b1a:	f7ff fc8f 	bl	943c <endpoint0_transmit.constprop.0>
				return;
    9b1e:	e544      	b.n	95aa <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    9b20:	2003      	movs	r0, #3
    9b22:	f7ff fcd7 	bl	94d4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9b26:	f007 fd4f 	bl	115c8 <___reboot_Teensyduino__veneer>
    9b2a:	bf00      	nop
    9b2c:	20200000 	.word	0x20200000

00009b30 <usb_config_rx>:
{
    9b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b34:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9b36:	1e83      	subs	r3, r0, #2
    9b38:	2b02      	cmp	r3, #2
    9b3a:	d901      	bls.n	9b40 <usb_config_rx+0x10>
}
    9b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b40:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9b90 <usb_config_rx+0x60>
    9b44:	4615      	mov	r5, r2
    9b46:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9b48:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b4a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9b4e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b50:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9b54:	2100      	movs	r1, #0
    9b56:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9b5a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    9b5c:	f002 f830 	bl	bbc0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9b60:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    9b64:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9b66:	0952      	lsrs	r2, r2, #5
    9b68:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    9b6c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9b70:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9b74:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9b78:	2f00      	cmp	r7, #0
    9b7a:	d0df      	beq.n	9b3c <usb_config_rx+0xc>
    9b7c:	4a03      	ldr	r2, [pc, #12]	; (9b8c <usb_config_rx+0x5c>)
    9b7e:	40b3      	lsls	r3, r6
    9b80:	6811      	ldr	r1, [r2, #0]
    9b82:	430b      	orrs	r3, r1
    9b84:	6013      	str	r3, [r2, #0]
}
    9b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9b8a:	bf00      	nop
    9b8c:	200053d8 	.word	0x200053d8
    9b90:	20000000 	.word	0x20000000

00009b94 <usb_config_tx>:
{
    9b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b98:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9b9a:	1e81      	subs	r1, r0, #2
    9b9c:	2902      	cmp	r1, #2
    9b9e:	d901      	bls.n	9ba4 <usb_config_tx+0x10>
}
    9ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9ba4:	01c7      	lsls	r7, r0, #7
    9ba6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9bf4 <usb_config_tx+0x60>
    9baa:	4692      	mov	sl, r2
    9bac:	4604      	mov	r4, r0
    9bae:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9bb0:	223c      	movs	r2, #60	; 0x3c
    9bb2:	2100      	movs	r1, #0
    9bb4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9bb6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9bba:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    9bbc:	f108 0004 	add.w	r0, r8, #4
    9bc0:	f001 fffe 	bl	bbc0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9bc4:	faba f28a 	clz	r2, sl
    9bc8:	0952      	lsrs	r2, r2, #5
    9bca:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    9bce:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9bd2:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9bd4:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9bd8:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9bdc:	2e00      	cmp	r6, #0
    9bde:	d0df      	beq.n	9ba0 <usb_config_tx+0xc>
    9be0:	4b03      	ldr	r3, [pc, #12]	; (9bf0 <usb_config_tx+0x5c>)
    9be2:	3410      	adds	r4, #16
    9be4:	6819      	ldr	r1, [r3, #0]
    9be6:	40a2      	lsls	r2, r4
    9be8:	430a      	orrs	r2, r1
    9bea:	601a      	str	r2, [r3, #0]
}
    9bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9bf0:	200053d8 	.word	0x200053d8
    9bf4:	20000000 	.word	0x20000000

00009bf8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9bf8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    9bfa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    9bfc:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    9bfe:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    9c02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    9c06:	b410      	push	{r4}
	transfer->next = 1;
    9c08:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    9c0a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    9c0c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9c10:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    9c12:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    9c16:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    9c1a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    9c1c:	6181      	str	r1, [r0, #24]
}
    9c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    9c22:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    9c26:	4770      	bx	lr

00009c28 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c28:	1e83      	subs	r3, r0, #2
{
    9c2a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c2c:	2b02      	cmp	r3, #2
    9c2e:	d900      	bls.n	9c32 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9c30:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9c32:	4b06      	ldr	r3, [pc, #24]	; (9c4c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    9c34:	f100 0110 	add.w	r1, r0, #16
    9c38:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9c3c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9c40:	fa0c f101 	lsl.w	r1, ip, r1
    9c44:	3040      	adds	r0, #64	; 0x40
    9c46:	f7ff bb99 	b.w	937c <schedule_transfer>
    9c4a:	bf00      	nop
    9c4c:	20000000 	.word	0x20000000

00009c50 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c50:	1e83      	subs	r3, r0, #2
{
    9c52:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c54:	2b02      	cmp	r3, #2
    9c56:	d900      	bls.n	9c5a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    9c58:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    9c5a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    9c5c:	4b02      	ldr	r3, [pc, #8]	; (9c68 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    9c5e:	4081      	lsls	r1, r0
    9c60:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9c64:	f7ff bb8a 	b.w	937c <schedule_transfer>
    9c68:	20000000 	.word	0x20000000

00009c6c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9c6c:	6840      	ldr	r0, [r0, #4]
#endif
}
    9c6e:	4770      	bx	lr

00009c70 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9c70:	4a12      	ldr	r2, [pc, #72]	; (9cbc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9c72:	4b13      	ldr	r3, [pc, #76]	; (9cc0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9c74:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9c78:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9c7c:	4298      	cmp	r0, r3
{
    9c7e:	b510      	push	{r4, lr}
    9c80:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9c82:	d202      	bcs.n	9c8a <usb_init_serialnumber+0x1a>
    9c84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9c88:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    9c8a:	4c0e      	ldr	r4, [pc, #56]	; (9cc4 <usb_init_serialnumber+0x54>)
    9c8c:	a901      	add	r1, sp, #4
    9c8e:	220a      	movs	r2, #10
    9c90:	f7ff fa22 	bl	90d8 <ultoa>
	for (i=0; i<10; i++) {
    9c94:	a901      	add	r1, sp, #4
    9c96:	2300      	movs	r3, #0
    9c98:	4620      	mov	r0, r4
		char c = buf[i];
    9c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    9c9e:	3301      	adds	r3, #1
		if (!c) break;
    9ca0:	b13a      	cbz	r2, 9cb2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    9ca2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    9ca4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    9ca8:	d1f7      	bne.n	9c9a <usb_init_serialnumber+0x2a>
    9caa:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9cac:	7023      	strb	r3, [r4, #0]
}
    9cae:	b004      	add	sp, #16
    9cb0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9cb2:	005b      	lsls	r3, r3, #1
    9cb4:	b2db      	uxtb	r3, r3
    9cb6:	7023      	strb	r3, [r4, #0]
}
    9cb8:	b004      	add	sp, #16
    9cba:	bd10      	pop	{r4, pc}
    9cbc:	401f4400 	.word	0x401f4400
    9cc0:	00989680 	.word	0x00989680
    9cc4:	20004a08 	.word	0x20004a08

00009cc8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9cc8:	f000 bace 	b.w	a268 <usb_serial_flush_input>

00009ccc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9ccc:	f000 bac0 	b.w	a250 <usb_serial_available>

00009cd0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9cd0:	f000 bb5c 	b.w	a38c <usb_serial_flush_output>

00009cd4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9cd4:	f000 bb32 	b.w	a33c <usb_serial_write_buffer_free>

00009cd8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9cd8:	4608      	mov	r0, r1
    9cda:	4611      	mov	r1, r2
    9cdc:	f000 bb22 	b.w	a324 <usb_serial_write>

00009ce0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9ce2:	4c14      	ldr	r4, [pc, #80]	; (9d34 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9ce4:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9ce8:	4e13      	ldr	r6, [pc, #76]	; (9d38 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9cea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9cee:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9cf2:	4f12      	ldr	r7, [pc, #72]	; (9d3c <rx_queue_transfer+0x5c>)
    9cf4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9cf8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9cfa:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9cfe:	4621      	mov	r1, r4
    9d00:	883a      	ldrh	r2, [r7, #0]
    9d02:	4630      	mov	r0, r6
    9d04:	f7ff ff78 	bl	9bf8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9d08:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9d0a:	4423      	add	r3, r4
	asm("dsb");
    9d0c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9d10:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9d14:	3420      	adds	r4, #32
	} while (location < end_addr);
    9d16:	42a3      	cmp	r3, r4
    9d18:	d8fa      	bhi.n	9d10 <rx_queue_transfer+0x30>
	asm("dsb");
    9d1a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9d1e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9d22:	2003      	movs	r0, #3
    9d24:	4631      	mov	r1, r6
    9d26:	f7ff ff93 	bl	9c50 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9d2e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d34:	20200080 	.word	0x20200080
    9d38:	20004f00 	.word	0x20004f00
    9d3c:	20018892 	.word	0x20018892

00009d40 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d40:	4b24      	ldr	r3, [pc, #144]	; (9dd4 <rx_event+0x94>)
{
    9d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d46:	881c      	ldrh	r4, [r3, #0]
    9d48:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9d4a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d4c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9d50:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9d52:	2c00      	cmp	r4, #0
    9d54:	dd24      	ble.n	9da0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9d56:	4920      	ldr	r1, [pc, #128]	; (9dd8 <rx_event+0x98>)
		if (head != rx_tail) {
    9d58:	4820      	ldr	r0, [pc, #128]	; (9ddc <rx_event+0x9c>)
		uint32_t head = rx_head;
    9d5a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9d5c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9d5e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9d60:	4e1f      	ldr	r6, [pc, #124]	; (9de0 <rx_event+0xa0>)
		if (head != rx_tail) {
    9d62:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9d64:	481f      	ldr	r0, [pc, #124]	; (9de4 <rx_event+0xa4>)
		if (head != rx_tail) {
    9d66:	d007      	beq.n	9d78 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9d68:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9d6c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9d70:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9d74:	4294      	cmp	r4, r2
    9d76:	d918      	bls.n	9daa <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9d78:	3301      	adds	r3, #1
		rx_index[i] = 0;
    9d7a:	2200      	movs	r2, #0
		rx_count[i] = len;
    9d7c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9d80:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    9d82:	4e19      	ldr	r6, [pc, #100]	; (9de8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9d84:	bf88      	it	hi
    9d86:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    9d88:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9d8c:	bf98      	it	ls
    9d8e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    9d90:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    9d92:	4b16      	ldr	r3, [pc, #88]	; (9dec <rx_event+0xac>)
		rx_head = head;
    9d94:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9d96:	681a      	ldr	r2, [r3, #0]
    9d98:	4414      	add	r4, r2
    9d9a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9da0:	4628      	mov	r0, r5
}
    9da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9da6:	f7ff bf9b 	b.w	9ce0 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9daa:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9dae:	4910      	ldr	r1, [pc, #64]	; (9df0 <rx_event+0xb0>)
    9db0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9db2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9db4:	4408      	add	r0, r1
    9db6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    9dba:	f7ff f8f3 	bl	8fa4 <memcpy>
				rx_available += len;
    9dbe:	4a0b      	ldr	r2, [pc, #44]	; (9dec <rx_event+0xac>)
				rx_queue_transfer(i);
    9dc0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9dc2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9dc6:	6813      	ldr	r3, [r2, #0]
    9dc8:	4423      	add	r3, r4
}
    9dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9dce:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9dd0:	f7ff bf86 	b.w	9ce0 <rx_queue_transfer>
    9dd4:	20018892 	.word	0x20018892
    9dd8:	200188ae 	.word	0x200188ae
    9ddc:	200188af 	.word	0x200188af
    9de0:	20018828 	.word	0x20018828
    9de4:	20018848 	.word	0x20018848
    9de8:	20018838 	.word	0x20018838
    9dec:	20018824 	.word	0x20018824
    9df0:	20200080 	.word	0x20200080

00009df4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9df4:	4b1d      	ldr	r3, [pc, #116]	; (9e6c <usb_serial_flush_callback+0x78>)
    9df6:	781a      	ldrb	r2, [r3, #0]
    9df8:	2a00      	cmp	r2, #0
    9dfa:	d136      	bne.n	9e6a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9dfc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9e00:	4a1b      	ldr	r2, [pc, #108]	; (9e70 <usb_serial_flush_callback+0x7c>)
    9e02:	7812      	ldrb	r2, [r2, #0]
    9e04:	b38a      	cbz	r2, 9e6a <usb_serial_flush_callback+0x76>
{
    9e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9e0a:	4d1a      	ldr	r5, [pc, #104]	; (9e74 <usb_serial_flush_callback+0x80>)
    9e0c:	882a      	ldrh	r2, [r5, #0]
    9e0e:	b352      	cbz	r2, 9e66 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e10:	4e19      	ldr	r6, [pc, #100]	; (9e78 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9e12:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9e16:	4f19      	ldr	r7, [pc, #100]	; (9e7c <usb_serial_flush_callback+0x88>)
    9e18:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e1a:	4c19      	ldr	r4, [pc, #100]	; (9e80 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9e1c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e20:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9e24:	4642      	mov	r2, r8
    9e26:	4638      	mov	r0, r7
    9e28:	4621      	mov	r1, r4
    9e2a:	f7ff fee5 	bl	9bf8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9e2e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9e32:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9e36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9e3a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9e3e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9e40:	42a2      	cmp	r2, r4
    9e42:	d8fa      	bhi.n	9e3a <usb_serial_flush_callback+0x46>
	asm("dsb");
    9e44:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9e48:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9e4c:	2004      	movs	r0, #4
    9e4e:	4639      	mov	r1, r7
    9e50:	f7ff feea 	bl	9c28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9e54:	7833      	ldrb	r3, [r6, #0]
    9e56:	3301      	adds	r3, #1
    9e58:	b2db      	uxtb	r3, r3
    9e5a:	2b03      	cmp	r3, #3
    9e5c:	bf88      	it	hi
    9e5e:	2300      	movhi	r3, #0
    9e60:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9e62:	2300      	movs	r3, #0
    9e64:	802b      	strh	r3, [r5, #0]
}
    9e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e6a:	4770      	bx	lr
    9e6c:	200188b3 	.word	0x200188b3
    9e70:	200188b5 	.word	0x200188b5
    9e74:	20018894 	.word	0x20018894
    9e78:	200188b2 	.word	0x200188b2
    9e7c:	20005000 	.word	0x20005000
    9e80:	20201080 	.word	0x20201080

00009e84 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e88:	b085      	sub	sp, #20
	while (size > 0) {
    9e8a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9e8e:	2900      	cmp	r1, #0
    9e90:	f000 80bf 	beq.w	a012 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9e94:	2300      	movs	r3, #0
    9e96:	4c60      	ldr	r4, [pc, #384]	; (a018 <usb_serial_write.part.0+0x194>)
    9e98:	f8df 8198 	ldr.w	r8, [pc, #408]	; a034 <usb_serial_write.part.0+0x1b0>
    9e9c:	f8df a198 	ldr.w	sl, [pc, #408]	; a038 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9ea0:	4f5e      	ldr	r7, [pc, #376]	; (a01c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9ea2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9ea4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9ea6:	4a5e      	ldr	r2, [pc, #376]	; (a020 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9ea8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9eaa:	4b5e      	ldr	r3, [pc, #376]	; (a024 <usb_serial_write.part.0+0x1a0>)
    9eac:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    9eae:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9eb2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9eb6:	2b00      	cmp	r3, #0
    9eb8:	f040 80a7 	bne.w	a00a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    9ebc:	461e      	mov	r6, r3
		int waiting=0;
    9ebe:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9ec0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9ec2:	4648      	mov	r0, r9
    9ec4:	f7ff fed2 	bl	9c6c <usb_transfer_status>
			if (!(status & 0x80)) {
    9ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    9ecc:	f000 808c 	beq.w	9fe8 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9ed0:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9ed4:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9ed8:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    9edc:	b905      	cbnz	r5, 9ee0 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    9ede:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d17d      	bne.n	9fe0 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9ee4:	683b      	ldr	r3, [r7, #0]
    9ee6:	1b9b      	subs	r3, r3, r6
    9ee8:	2b78      	cmp	r3, #120	; 0x78
    9eea:	f200 8087 	bhi.w	9ffc <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    9eee:	4b4e      	ldr	r3, [pc, #312]	; (a028 <usb_serial_write.part.0+0x1a4>)
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d074      	beq.n	9fe0 <usb_serial_write.part.0+0x15c>
			yield();
    9ef6:	f000 fa93 	bl	a420 <yield>
			tx_noautoflush = 1;
    9efa:	2201      	movs	r2, #1
		while (!tx_available) {
    9efc:	f8b8 3000 	ldrh.w	r3, [r8]
    9f00:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9f02:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9f04:	2b00      	cmp	r3, #0
    9f06:	d0dc      	beq.n	9ec2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f08:	4a46      	ldr	r2, [pc, #280]	; (a024 <usb_serial_write.part.0+0x1a0>)
    9f0a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9f0e:	7811      	ldrb	r1, [r2, #0]
    9f10:	461a      	mov	r2, r3
    9f12:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9f16:	4d45      	ldr	r5, [pc, #276]	; (a02c <usb_serial_write.part.0+0x1a8>)
    9f18:	02c9      	lsls	r1, r1, #11
    9f1a:	4428      	add	r0, r5
		if (size >= tx_available) {
    9f1c:	9d01      	ldr	r5, [sp, #4]
    9f1e:	4295      	cmp	r5, r2
    9f20:	d217      	bcs.n	9f52 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9f22:	9303      	str	r3, [sp, #12]
    9f24:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9f28:	462a      	mov	r2, r5
    9f2a:	f7ff f83b 	bl	8fa4 <memcpy>
			tx_available -= size;
    9f2e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f30:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9f34:	1b5b      	subs	r3, r3, r5
    9f36:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f3a:	4b3d      	ldr	r3, [pc, #244]	; (a030 <usb_serial_write.part.0+0x1ac>)
    9f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9f40:	f3bf 8f4f 	dsb	sy
			sent += size;
    9f44:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9f46:	2300      	movs	r3, #0
			sent += size;
    9f48:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9f4a:	7023      	strb	r3, [r4, #0]
}
    9f4c:	b005      	add	sp, #20
    9f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9f52:	4b36      	ldr	r3, [pc, #216]	; (a02c <usb_serial_write.part.0+0x1a8>)
    9f54:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9f56:	9902      	ldr	r1, [sp, #8]
    9f58:	f7ff f824 	bl	8fa4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9f5c:	2300      	movs	r3, #0
    9f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9f62:	4629      	mov	r1, r5
    9f64:	4648      	mov	r0, r9
    9f66:	f7ff fe47 	bl	9bf8 <usb_prepare_transfer>
	asm("dsb");
    9f6a:	f3bf 8f4f 	dsb	sy
    9f6e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9f72:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9f76:	4293      	cmp	r3, r2
    9f78:	bf34      	ite	cc
    9f7a:	2301      	movcc	r3, #1
    9f7c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9f7e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9f82:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9f86:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9f8a:	3520      	adds	r5, #32
	} while (location < end_addr);
    9f8c:	42ab      	cmp	r3, r5
    9f8e:	d1fa      	bne.n	9f86 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9f90:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9f94:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9f98:	2004      	movs	r0, #4
    9f9a:	4649      	mov	r1, r9
    9f9c:	f7ff fe44 	bl	9c28 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9fa0:	4a20      	ldr	r2, [pc, #128]	; (a024 <usb_serial_write.part.0+0x1a0>)
    9fa2:	7813      	ldrb	r3, [r2, #0]
    9fa4:	3301      	adds	r3, #1
    9fa6:	b2db      	uxtb	r3, r3
    9fa8:	2b03      	cmp	r3, #3
    9faa:	bf84      	itt	hi
    9fac:	2300      	movhi	r3, #0
    9fae:	4a1d      	ldrhi	r2, [pc, #116]	; (a024 <usb_serial_write.part.0+0x1a0>)
    9fb0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9fb2:	f8b8 3000 	ldrh.w	r3, [r8]
    9fb6:	9a01      	ldr	r2, [sp, #4]
    9fb8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9fba:	9a00      	ldr	r2, [sp, #0]
    9fbc:	441a      	add	r2, r3
			size -= tx_available;
    9fbe:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    9fc0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    9fc2:	9a02      	ldr	r2, [sp, #8]
    9fc4:	441a      	add	r2, r3
			tx_available = 0;
    9fc6:	2300      	movs	r3, #0
			data += tx_available;
    9fc8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    9fca:	4a19      	ldr	r2, [pc, #100]	; (a030 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    9fcc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    9fd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9fd4:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    9fd8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    9fda:	2900      	cmp	r1, #0
    9fdc:	f47f af62 	bne.w	9ea4 <usb_serial_write.part.0+0x20>
	return sent;
    9fe0:	9800      	ldr	r0, [sp, #0]
}
    9fe2:	b005      	add	sp, #20
    9fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    9fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9fec:	4b0d      	ldr	r3, [pc, #52]	; (a024 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    9fee:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9ff2:	7819      	ldrb	r1, [r3, #0]
				break;
    9ff4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    9ff6:	f8a8 2000 	strh.w	r2, [r8]
				break;
    9ffa:	e78a      	b.n	9f12 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    9ffc:	2301      	movs	r3, #1
				return sent;
    9ffe:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a000:	f88a 3000 	strb.w	r3, [sl]
}
    a004:	b005      	add	sp, #20
    a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a00a:	461a      	mov	r2, r3
    a00c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a010:	e77f      	b.n	9f12 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a012:	9801      	ldr	r0, [sp, #4]
	return sent;
    a014:	e7e5      	b.n	9fe2 <usb_serial_write.part.0+0x15e>
    a016:	bf00      	nop
    a018:	200188b3 	.word	0x200188b3
    a01c:	2001886c 	.word	0x2001886c
    a020:	20005000 	.word	0x20005000
    a024:	200188b2 	.word	0x200188b2
    a028:	200188b5 	.word	0x200188b5
    a02c:	20201080 	.word	0x20201080
    a030:	402e0000 	.word	0x402e0000
    a034:	20018894 	.word	0x20018894
    a038:	200188b1 	.word	0x200188b1

0000a03c <usb_serial_reset>:
}
    a03c:	4770      	bx	lr
    a03e:	bf00      	nop

0000a040 <usb_serial_configure>:
	if (usb_high_speed) {
    a040:	4b2a      	ldr	r3, [pc, #168]	; (a0ec <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a042:	2100      	movs	r1, #0
    a044:	2280      	movs	r2, #128	; 0x80
    a046:	482a      	ldr	r0, [pc, #168]	; (a0f0 <usb_serial_configure+0xb0>)
{
    a048:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a04a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    a04c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a04e:	4d29      	ldr	r5, [pc, #164]	; (a0f4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a050:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a052:	4e29      	ldr	r6, [pc, #164]	; (a0f8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a054:	bf0c      	ite	eq
    a056:	2340      	moveq	r3, #64	; 0x40
    a058:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a05c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a05e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a060:	f001 fdae 	bl	bbc0 <memset>
	tx_head = 0;
    a064:	4a25      	ldr	r2, [pc, #148]	; (a0fc <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a066:	4621      	mov	r1, r4
	tx_available = 0;
    a068:	4b25      	ldr	r3, [pc, #148]	; (a100 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a06a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a06c:	f44f 7280 	mov.w	r2, #256	; 0x100
    a070:	4824      	ldr	r0, [pc, #144]	; (a104 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a072:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a074:	f001 fda4 	bl	bbc0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a078:	4a23      	ldr	r2, [pc, #140]	; (a108 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a07a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a07c:	4b23      	ldr	r3, [pc, #140]	; (a10c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a07e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a080:	e9c2 4400 	strd	r4, r4, [r2]
    a084:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a088:	4a21      	ldr	r2, [pc, #132]	; (a110 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a08a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    a08e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    a090:	4a20      	ldr	r2, [pc, #128]	; (a114 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a092:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a096:	4b20      	ldr	r3, [pc, #128]	; (a118 <usb_serial_configure+0xd8>)
    a098:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a09a:	4623      	mov	r3, r4
	rx_available = 0;
    a09c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a09e:	4622      	mov	r2, r4
    a0a0:	f7ff fd78 	bl	9b94 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a0a4:	4622      	mov	r2, r4
    a0a6:	8831      	ldrh	r1, [r6, #0]
    a0a8:	2003      	movs	r0, #3
    a0aa:	4b1c      	ldr	r3, [pc, #112]	; (a11c <usb_serial_configure+0xdc>)
    a0ac:	f7ff fd40 	bl	9b30 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a0b0:	4623      	mov	r3, r4
    a0b2:	2201      	movs	r2, #1
    a0b4:	8829      	ldrh	r1, [r5, #0]
    a0b6:	2004      	movs	r0, #4
    a0b8:	f7ff fd6c 	bl	9b94 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a0bc:	4620      	mov	r0, r4
    a0be:	3401      	adds	r4, #1
    a0c0:	f7ff fe0e 	bl	9ce0 <rx_queue_transfer>
    a0c4:	2c08      	cmp	r4, #8
    a0c6:	d1f9      	bne.n	a0bc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a0c8:	4b15      	ldr	r3, [pc, #84]	; (a120 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a0ca:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a0cc:	4815      	ldr	r0, [pc, #84]	; (a124 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a0ce:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a0d0:	4c15      	ldr	r4, [pc, #84]	; (a128 <usb_serial_configure+0xe8>)
    a0d2:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a0d4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a0d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a0dc:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a0e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a0e4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a0e8:	bd70      	pop	{r4, r5, r6, pc}
    a0ea:	bf00      	nop
    a0ec:	200188b6 	.word	0x200188b6
    a0f0:	20005000 	.word	0x20005000
    a0f4:	20018896 	.word	0x20018896
    a0f8:	20018892 	.word	0x20018892
    a0fc:	200188b2 	.word	0x200188b2
    a100:	20018894 	.word	0x20018894
    a104:	20004f00 	.word	0x20004f00
    a108:	20018828 	.word	0x20018828
    a10c:	20018838 	.word	0x20018838
    a110:	200188ae 	.word	0x200188ae
    a114:	20018824 	.word	0x20018824
    a118:	200188af 	.word	0x200188af
    a11c:	00009d41 	.word	0x00009d41
    a120:	402e0000 	.word	0x402e0000
    a124:	20018880 	.word	0x20018880
    a128:	00009df5 	.word	0x00009df5

0000a12c <usb_serial_read>:
{
    a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a130:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a138:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a204 <usb_serial_read+0xd8>
{
    a13c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a13e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a142:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a144:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a148:	2900      	cmp	r1, #0
    a14a:	d04f      	beq.n	a1ec <usb_serial_read+0xc0>
    a14c:	4680      	mov	r8, r0
    a14e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a150:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a152:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a208 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a156:	4b26      	ldr	r3, [pc, #152]	; (a1f0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a158:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a15c:	4925      	ldr	r1, [pc, #148]	; (a1f4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a15e:	781b      	ldrb	r3, [r3, #0]
    a160:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a162:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a166:	d03f      	beq.n	a1e8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a168:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a16a:	4b23      	ldr	r3, [pc, #140]	; (a1f8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a16c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a16e:	bf28      	it	cs
    a170:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a172:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a174:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a178:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a17c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a17e:	4b1f      	ldr	r3, [pc, #124]	; (a1fc <usb_serial_read+0xd0>)
    a180:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a184:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a188:	42aa      	cmp	r2, r5
    a18a:	d21c      	bcs.n	a1c6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a18c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a190:	4918      	ldr	r1, [pc, #96]	; (a1f4 <usb_serial_read+0xc8>)
			rx_available -= len;
    a192:	4c1b      	ldr	r4, [pc, #108]	; (a200 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a194:	4461      	add	r1, ip
    a196:	9201      	str	r2, [sp, #4]
    a198:	f7fe ff04 	bl	8fa4 <memcpy>
			rx_available -= len;
    a19c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a19e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a1a2:	4658      	mov	r0, fp
			rx_index[i] += len;
    a1a4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a1a6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a1aa:	442a      	add	r2, r5
			rx_available -= len;
    a1ac:	4439      	add	r1, r7
			rx_index[i] += len;
    a1ae:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a1b2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a1b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a1b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a1bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a1c0:	b003      	add	sp, #12
    a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a1c6:	462a      	mov	r2, r5
			count += avail;
    a1c8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a1ca:	f7fe feeb 	bl	8fa4 <memcpy>
			rx_available -= avail;
    a1ce:	490c      	ldr	r1, [pc, #48]	; (a200 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a1d0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a1d2:	4630      	mov	r0, r6
			rx_available -= avail;
    a1d4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a1d6:	44a8      	add	r8, r5
			rx_available -= avail;
    a1d8:	1b52      	subs	r2, r2, r5
    a1da:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a1dc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a1e0:	f7ff fd7e 	bl	9ce0 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a1e4:	45bb      	cmp	fp, r7
    a1e6:	d8b6      	bhi.n	a156 <usb_serial_read+0x2a>
	return count;
    a1e8:	4638      	mov	r0, r7
    a1ea:	e7e3      	b.n	a1b4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a1ec:	4608      	mov	r0, r1
    a1ee:	e7e1      	b.n	a1b4 <usb_serial_read+0x88>
    a1f0:	200188ae 	.word	0x200188ae
    a1f4:	20200080 	.word	0x20200080
    a1f8:	20018848 	.word	0x20018848
    a1fc:	20018828 	.word	0x20018828
    a200:	20018824 	.word	0x20018824
    a204:	200188af 	.word	0x200188af
    a208:	20018838 	.word	0x20018838

0000a20c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a20c:	4b0b      	ldr	r3, [pc, #44]	; (a23c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a20e:	4a0c      	ldr	r2, [pc, #48]	; (a240 <usb_serial_peekchar+0x34>)
    a210:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a212:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a214:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a216:	428a      	cmp	r2, r1
    a218:	d00d      	beq.n	a236 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a21a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a21c:	4809      	ldr	r0, [pc, #36]	; (a244 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a21e:	4a0a      	ldr	r2, [pc, #40]	; (a248 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a220:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a222:	490a      	ldr	r1, [pc, #40]	; (a24c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a224:	bf28      	it	cs
    a226:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a228:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a22a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a22e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a232:	5c58      	ldrb	r0, [r3, r1]
    a234:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a236:	f04f 30ff 	mov.w	r0, #4294967295
}
    a23a:	4770      	bx	lr
    a23c:	200188ae 	.word	0x200188ae
    a240:	200188af 	.word	0x200188af
    a244:	20018848 	.word	0x20018848
    a248:	20200080 	.word	0x20200080
    a24c:	20018838 	.word	0x20018838

0000a250 <usb_serial_available>:
	uint32_t n = rx_available;
    a250:	4b04      	ldr	r3, [pc, #16]	; (a264 <usb_serial_available+0x14>)
{
    a252:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a254:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a256:	b10c      	cbz	r4, a25c <usb_serial_available+0xc>
}
    a258:	4620      	mov	r0, r4
    a25a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a25c:	f000 f8e0 	bl	a420 <yield>
}
    a260:	4620      	mov	r0, r4
    a262:	bd10      	pop	{r4, pc}
    a264:	20018824 	.word	0x20018824

0000a268 <usb_serial_flush_input>:
{
    a268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a26c:	4e14      	ldr	r6, [pc, #80]	; (a2c0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a26e:	4d15      	ldr	r5, [pc, #84]	; (a2c4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a270:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a272:	782a      	ldrb	r2, [r5, #0]
    a274:	4293      	cmp	r3, r2
    a276:	d021      	beq.n	a2bc <usb_serial_flush_input+0x54>
    a278:	b2dc      	uxtb	r4, r3
    a27a:	f8df 9050 	ldr.w	r9, [pc, #80]	; a2cc <usb_serial_flush_input+0x64>
    a27e:	f8df b050 	ldr.w	fp, [pc, #80]	; a2d0 <usb_serial_flush_input+0x68>
    a282:	f8df 8050 	ldr.w	r8, [pc, #80]	; a2d4 <usb_serial_flush_input+0x6c>
    a286:	4f10      	ldr	r7, [pc, #64]	; (a2c8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a288:	3401      	adds	r4, #1
    a28a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a28c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a290:	d901      	bls.n	a296 <usb_serial_flush_input+0x2e>
    a292:	2400      	movs	r4, #0
    a294:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a296:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a29a:	f8db 3000 	ldr.w	r3, [fp]
    a29e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a2a2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a2a6:	1a52      	subs	r2, r2, r1
    a2a8:	1a9b      	subs	r3, r3, r2
    a2aa:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a2ae:	f7ff fd17 	bl	9ce0 <rx_queue_transfer>
		rx_tail = tail;
    a2b2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a2b6:	782b      	ldrb	r3, [r5, #0]
    a2b8:	42a3      	cmp	r3, r4
    a2ba:	d1e5      	bne.n	a288 <usb_serial_flush_input+0x20>
}
    a2bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2c0:	200188af 	.word	0x200188af
    a2c4:	200188ae 	.word	0x200188ae
    a2c8:	20018838 	.word	0x20018838
    a2cc:	20018848 	.word	0x20018848
    a2d0:	20018824 	.word	0x20018824
    a2d4:	20018828 	.word	0x20018828

0000a2d8 <usb_serial_getchar>:
{
    a2d8:	b500      	push	{lr}
    a2da:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a2dc:	2101      	movs	r1, #1
    a2de:	f10d 0007 	add.w	r0, sp, #7
    a2e2:	f7ff ff23 	bl	a12c <usb_serial_read>
    a2e6:	b120      	cbz	r0, a2f2 <usb_serial_getchar+0x1a>
    a2e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a2ec:	b003      	add	sp, #12
    a2ee:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a2f2:	f04f 30ff 	mov.w	r0, #4294967295
    a2f6:	e7f9      	b.n	a2ec <usb_serial_getchar+0x14>

0000a2f8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a2f8:	4b09      	ldr	r3, [pc, #36]	; (a320 <usb_serial_putchar+0x28>)
{
    a2fa:	b500      	push	{lr}
    a2fc:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a2fe:	781b      	ldrb	r3, [r3, #0]
{
    a300:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a304:	b13b      	cbz	r3, a316 <usb_serial_putchar+0x1e>
    a306:	2101      	movs	r1, #1
    a308:	f10d 0007 	add.w	r0, sp, #7
    a30c:	f7ff fdba 	bl	9e84 <usb_serial_write.part.0>
}
    a310:	b003      	add	sp, #12
    a312:	f85d fb04 	ldr.w	pc, [sp], #4
    a316:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a31a:	b003      	add	sp, #12
    a31c:	f85d fb04 	ldr.w	pc, [sp], #4
    a320:	200188b5 	.word	0x200188b5

0000a324 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a324:	4b04      	ldr	r3, [pc, #16]	; (a338 <usb_serial_write+0x14>)
    a326:	781b      	ldrb	r3, [r3, #0]
    a328:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a32c:	b10b      	cbz	r3, a332 <usb_serial_write+0xe>
    a32e:	f7ff bda9 	b.w	9e84 <usb_serial_write.part.0>
}
    a332:	4610      	mov	r0, r2
    a334:	4770      	bx	lr
    a336:	bf00      	nop
    a338:	200188b5 	.word	0x200188b5

0000a33c <usb_serial_write_buffer_free>:
{
    a33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a340:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a342:	f8df 8044 	ldr.w	r8, [pc, #68]	; a388 <usb_serial_write_buffer_free+0x4c>
    a346:	2301      	movs	r3, #1
    a348:	4d0d      	ldr	r5, [pc, #52]	; (a380 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a34a:	4627      	mov	r7, r4
    a34c:	4e0d      	ldr	r6, [pc, #52]	; (a384 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a34e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a352:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a354:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a356:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a358:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a35a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a35e:	d005      	beq.n	a36c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a360:	f7ff fc84 	bl	9c6c <usb_transfer_status>
    a364:	0603      	lsls	r3, r0, #24
    a366:	bf58      	it	pl
    a368:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a36c:	2c04      	cmp	r4, #4
    a36e:	d1f0      	bne.n	a352 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a370:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a374:	2300      	movs	r3, #0
}
    a376:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a378:	f888 3000 	strb.w	r3, [r8]
}
    a37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a380:	20005000 	.word	0x20005000
    a384:	200188b2 	.word	0x200188b2
    a388:	200188b3 	.word	0x200188b3

0000a38c <usb_serial_flush_output>:
{
    a38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a390:	4b1d      	ldr	r3, [pc, #116]	; (a408 <usb_serial_flush_output+0x7c>)
    a392:	781b      	ldrb	r3, [r3, #0]
    a394:	b113      	cbz	r3, a39c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a396:	4d1d      	ldr	r5, [pc, #116]	; (a40c <usb_serial_flush_output+0x80>)
    a398:	882a      	ldrh	r2, [r5, #0]
    a39a:	b90a      	cbnz	r2, a3a0 <usb_serial_flush_output+0x14>
}
    a39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a3a0:	4e1b      	ldr	r6, [pc, #108]	; (a410 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a3a2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a3a6:	491b      	ldr	r1, [pc, #108]	; (a414 <usb_serial_flush_output+0x88>)
    a3a8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3aa:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3ac:	4c1a      	ldr	r4, [pc, #104]	; (a418 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a3ae:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a3b2:	4f1a      	ldr	r7, [pc, #104]	; (a41c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3b4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a3b8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3ba:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a3bc:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3be:	4621      	mov	r1, r4
    a3c0:	2300      	movs	r3, #0
    a3c2:	f7ff fc19 	bl	9bf8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a3c6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a3ca:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a3ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a3d2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a3d6:	3420      	adds	r4, #32
	} while (location < end_addr);
    a3d8:	42a2      	cmp	r2, r4
    a3da:	d8fa      	bhi.n	a3d2 <usb_serial_flush_output+0x46>
	asm("dsb");
    a3dc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a3e0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a3e4:	2004      	movs	r0, #4
    a3e6:	4641      	mov	r1, r8
    a3e8:	f7ff fc1e 	bl	9c28 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a3ec:	7833      	ldrb	r3, [r6, #0]
    a3ee:	3301      	adds	r3, #1
    a3f0:	b2db      	uxtb	r3, r3
    a3f2:	2b03      	cmp	r3, #3
    a3f4:	bf88      	it	hi
    a3f6:	2300      	movhi	r3, #0
    a3f8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a3fa:	2300      	movs	r3, #0
    a3fc:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a3fe:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a402:	703b      	strb	r3, [r7, #0]
}
    a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a408:	200188b5 	.word	0x200188b5
    a40c:	20018894 	.word	0x20018894
    a410:	200188b2 	.word	0x200188b2
    a414:	20005000 	.word	0x20005000
    a418:	20201080 	.word	0x20201080
    a41c:	200188b3 	.word	0x200188b3

0000a420 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a424:	4e32      	ldr	r6, [pc, #200]	; (a4f0 <yield+0xd0>)
    a426:	7833      	ldrb	r3, [r6, #0]
    a428:	b163      	cbz	r3, a444 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a42a:	4f32      	ldr	r7, [pc, #200]	; (a4f4 <yield+0xd4>)
    a42c:	783a      	ldrb	r2, [r7, #0]
    a42e:	b94a      	cbnz	r2, a444 <yield+0x24>
	running = 1;
    a430:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a432:	07d9      	lsls	r1, r3, #31
	running = 1;
    a434:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a436:	d444      	bmi.n	a4c2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a438:	079a      	lsls	r2, r3, #30
    a43a:	d426      	bmi.n	a48a <yield+0x6a>

	running = 0;
    a43c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a43e:	075b      	lsls	r3, r3, #29
	running = 0;
    a440:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a442:	d401      	bmi.n	a448 <yield+0x28>
	
};
    a444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a448:	4b2b      	ldr	r3, [pc, #172]	; (a4f8 <yield+0xd8>)
    a44a:	681a      	ldr	r2, [r3, #0]
    a44c:	2a00      	cmp	r2, #0
    a44e:	d0f9      	beq.n	a444 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a450:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a454:	2a00      	cmp	r2, #0
    a456:	d1f5      	bne.n	a444 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a458:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a45c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a45e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a460:	2800      	cmp	r0, #0
    a462:	d03b      	beq.n	a4dc <yield+0xbc>
		if (runningFromYield) {
    a464:	4c25      	ldr	r4, [pc, #148]	; (a4fc <yield+0xdc>)
    a466:	7821      	ldrb	r1, [r4, #0]
    a468:	2900      	cmp	r1, #0
    a46a:	d137      	bne.n	a4dc <yield+0xbc>
		runningFromYield = true;
    a46c:	2201      	movs	r2, #1
    a46e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a470:	6942      	ldr	r2, [r0, #20]
    a472:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a474:	2a00      	cmp	r2, #0
    a476:	d038      	beq.n	a4ea <yield+0xca>
			firstYield->_prev = nullptr;
    a478:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a47a:	b905      	cbnz	r5, a47e <yield+0x5e>
    a47c:	b662      	cpsie	i
		first->_triggered = false;
    a47e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a480:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a482:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a484:	4798      	blx	r3
		runningFromYield = false;
    a486:	7025      	strb	r5, [r4, #0]
    a488:	e7dc      	b.n	a444 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a48a:	f8df 807c 	ldr.w	r8, [pc, #124]	; a508 <yield+0xe8>
    a48e:	f898 2000 	ldrb.w	r2, [r8]
    a492:	2a00      	cmp	r2, #0
    a494:	d0d2      	beq.n	a43c <yield+0x1c>
    a496:	2500      	movs	r5, #0
    a498:	f8df 9070 	ldr.w	r9, [pc, #112]	; a50c <yield+0xec>
    a49c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a49e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a4a2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a4a4:	6823      	ldr	r3, [r4, #0]
    a4a6:	4620      	mov	r0, r4
    a4a8:	691b      	ldr	r3, [r3, #16]
    a4aa:	4798      	blx	r3
    a4ac:	b110      	cbz	r0, a4b4 <yield+0x94>
    a4ae:	6963      	ldr	r3, [r4, #20]
    a4b0:	689b      	ldr	r3, [r3, #8]
    a4b2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a4b4:	f898 2000 	ldrb.w	r2, [r8]
    a4b8:	b2eb      	uxtb	r3, r5
    a4ba:	429a      	cmp	r2, r3
    a4bc:	d8ef      	bhi.n	a49e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a4be:	7833      	ldrb	r3, [r6, #0]
    a4c0:	e7bc      	b.n	a43c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a4c2:	f7ff fec5 	bl	a250 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a4c6:	b968      	cbnz	r0, a4e4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a4c8:	4b0d      	ldr	r3, [pc, #52]	; (a500 <yield+0xe0>)
    a4ca:	781b      	ldrb	r3, [r3, #0]
    a4cc:	b90b      	cbnz	r3, a4d2 <yield+0xb2>
    a4ce:	7833      	ldrb	r3, [r6, #0]
    a4d0:	e7b2      	b.n	a438 <yield+0x18>
    a4d2:	7833      	ldrb	r3, [r6, #0]
    a4d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a4d8:	7033      	strb	r3, [r6, #0]
    a4da:	e7ad      	b.n	a438 <yield+0x18>
		if (doit) __enable_irq();
    a4dc:	2d00      	cmp	r5, #0
    a4de:	d1b1      	bne.n	a444 <yield+0x24>
    a4e0:	b662      	cpsie	i
    a4e2:	e7af      	b.n	a444 <yield+0x24>
		if (Serial.available()) serialEvent();
    a4e4:	f000 fa8a 	bl	a9fc <serialEvent()>
    a4e8:	e7ee      	b.n	a4c8 <yield+0xa8>
			lastYield = nullptr;
    a4ea:	4b06      	ldr	r3, [pc, #24]	; (a504 <yield+0xe4>)
    a4ec:	601a      	str	r2, [r3, #0]
    a4ee:	e7c4      	b.n	a47a <yield+0x5a>
    a4f0:	20004a22 	.word	0x20004a22
    a4f4:	2001889a 	.word	0x2001889a
    a4f8:	20005088 	.word	0x20005088
    a4fc:	20018898 	.word	0x20018898
    a500:	60001f58 	.word	0x60001f58
    a504:	20005094 	.word	0x20005094
    a508:	20018899 	.word	0x20018899
    a50c:	20005098 	.word	0x20005098

0000a510 <EventResponder::runFromInterrupt()>:
{
    a510:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a512:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a516:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a518:	4c0c      	ldr	r4, [pc, #48]	; (a54c <EventResponder::runFromInterrupt()+0x3c>)
    a51a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a51c:	b180      	cbz	r0, a540 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    a51e:	4e0c      	ldr	r6, [pc, #48]	; (a550 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    a520:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    a522:	6943      	ldr	r3, [r0, #20]
    a524:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    a526:	b173      	cbz	r3, a546 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a528:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    a52a:	b902      	cbnz	r2, a52e <EventResponder::runFromInterrupt()+0x1e>
    a52c:	b662      	cpsie	i
			(*(first->_function))(*first);
    a52e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    a530:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a532:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a534:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a538:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a53a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a53c:	2800      	cmp	r0, #0
    a53e:	d1f0      	bne.n	a522 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    a540:	b902      	cbnz	r2, a544 <EventResponder::runFromInterrupt()+0x34>
    a542:	b662      	cpsie	i
}
    a544:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    a546:	6033      	str	r3, [r6, #0]
    a548:	e7ef      	b.n	a52a <EventResponder::runFromInterrupt()+0x1a>
    a54a:	bf00      	nop
    a54c:	20005090 	.word	0x20005090
    a550:	2000508c 	.word	0x2000508c

0000a554 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    a554:	f7ff bfdc 	b.w	a510 <EventResponder::runFromInterrupt()>

0000a558 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a558:	4904      	ldr	r1, [pc, #16]	; (a56c <systick_isr+0x14>)
	systick_millis_count++;
    a55a:	4a05      	ldr	r2, [pc, #20]	; (a570 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    a55c:	6849      	ldr	r1, [r1, #4]
    a55e:	4b05      	ldr	r3, [pc, #20]	; (a574 <systick_isr+0x1c>)
    a560:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    a562:	6813      	ldr	r3, [r2, #0]
    a564:	3301      	adds	r3, #1
    a566:	6013      	str	r3, [r2, #0]
}
    a568:	4770      	bx	lr
    a56a:	bf00      	nop
    a56c:	e0001000 	.word	0xe0001000
    a570:	2001886c 	.word	0x2001886c
    a574:	20018868 	.word	0x20018868

0000a578 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a578:	49a2      	ldr	r1, [pc, #648]	; (a804 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a57a:	4ba3      	ldr	r3, [pc, #652]	; (a808 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a57c:	4288      	cmp	r0, r1
{
    a57e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a582:	4ca2      	ldr	r4, [pc, #648]	; (a80c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a584:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a586:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a588:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a58c:	d91b      	bls.n	a5c6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a58e:	4ba0      	ldr	r3, [pc, #640]	; (a810 <set_arm_clock+0x298>)
    a590:	4298      	cmp	r0, r3
    a592:	f240 8102 	bls.w	a79a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a596:	1ac3      	subs	r3, r0, r3
    a598:	499e      	ldr	r1, [pc, #632]	; (a814 <set_arm_clock+0x29c>)
    a59a:	0a1b      	lsrs	r3, r3, #8
    a59c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5a0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5a4:	09db      	lsrs	r3, r3, #7
    a5a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a5aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a5ae:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5b2:	428b      	cmp	r3, r1
    a5b4:	bf28      	it	cs
    a5b6:	460b      	movcs	r3, r1
    a5b8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a5bc:	4b96      	ldr	r3, [pc, #600]	; (a818 <set_arm_clock+0x2a0>)
    a5be:	fba3 3707 	umull	r3, r7, r3, r7
    a5c2:	08ff      	lsrs	r7, r7, #3
    a5c4:	e004      	b.n	a5d0 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a5c6:	4f95      	ldr	r7, [pc, #596]	; (a81c <set_arm_clock+0x2a4>)
    a5c8:	42b8      	cmp	r0, r7
    a5ca:	bf8c      	ite	hi
    a5cc:	270e      	movhi	r7, #14
    a5ce:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5d0:	498d      	ldr	r1, [pc, #564]	; (a808 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5d2:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5d6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5da:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a5dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a5e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5e4:	d20c      	bcs.n	a600 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a5e6:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a5ea:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a5ee:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a5f2:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a5f6:	680b      	ldr	r3, [r1, #0]
    a5f8:	2b00      	cmp	r3, #0
    a5fa:	dafc      	bge.n	a5f6 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5fc:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a600:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a604:	d124      	bne.n	a650 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a606:	4986      	ldr	r1, [pc, #536]	; (a820 <set_arm_clock+0x2a8>)
    a608:	690c      	ldr	r4, [r1, #16]
    a60a:	4986      	ldr	r1, [pc, #536]	; (a824 <set_arm_clock+0x2ac>)
    a60c:	43a1      	bics	r1, r4
    a60e:	f000 80ea 	beq.w	a7e6 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a612:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a616:	4634      	mov	r4, r6
    a618:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a61c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a620:	d004      	beq.n	a62c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a622:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a626:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a628:	4b77      	ldr	r3, [pc, #476]	; (a808 <set_arm_clock+0x290>)
    a62a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a62c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a630:	d007      	beq.n	a642 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a632:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a636:	4974      	ldr	r1, [pc, #464]	; (a808 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a638:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a63a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a63c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a63e:	071a      	lsls	r2, r3, #28
    a640:	d4fc      	bmi.n	a63c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a642:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a646:	4a70      	ldr	r2, [pc, #448]	; (a808 <set_arm_clock+0x290>)
    a648:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a64a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a64c:	069b      	lsls	r3, r3, #26
    a64e:	d4fc      	bmi.n	a64a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a650:	4c75      	ldr	r4, [pc, #468]	; (a828 <set_arm_clock+0x2b0>)
    a652:	42a0      	cmp	r0, r4
    a654:	f200 80ce 	bhi.w	a7f4 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a658:	f04f 0c01 	mov.w	ip, #1
    a65c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a65e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a660:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a664:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a668:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a66c:	42a2      	cmp	r2, r4
    a66e:	d818      	bhi.n	a6a2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a670:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a674:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a678:	f040 808d 	bne.w	a796 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a67c:	f1bc 0f04 	cmp.w	ip, #4
    a680:	f200 8091 	bhi.w	a7a6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a684:	180a      	adds	r2, r1, r0
    a686:	42a2      	cmp	r2, r4
    a688:	f200 80a4 	bhi.w	a7d4 <set_arm_clock+0x25c>
    a68c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a690:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a692:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a696:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a69a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a69e:	42a2      	cmp	r2, r4
    a6a0:	d9e6      	bls.n	a670 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a6a2:	f10c 31ff 	add.w	r1, ip, #4294967295
    a6a6:	028c      	lsls	r4, r1, #10
    a6a8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6ac:	485f      	ldr	r0, [pc, #380]	; (a82c <set_arm_clock+0x2b4>)
    a6ae:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a6b0:	4a5f      	ldr	r2, [pc, #380]	; (a830 <set_arm_clock+0x2b8>)
    a6b2:	4290      	cmp	r0, r2
    a6b4:	d97f      	bls.n	a7b6 <set_arm_clock+0x23e>
    a6b6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; a85c <set_arm_clock+0x2e4>
    a6ba:	226c      	movs	r2, #108	; 0x6c
    a6bc:	485d      	ldr	r0, [pc, #372]	; (a834 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6be:	4d58      	ldr	r5, [pc, #352]	; (a820 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6c0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6c4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6c8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6cc:	f8df c190 	ldr.w	ip, [pc, #400]	; a860 <set_arm_clock+0x2e8>
    a6d0:	ea0e 0c0c 	and.w	ip, lr, ip
    a6d4:	45d4      	cmp	ip, sl
    a6d6:	d009      	beq.n	a6ec <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a6d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a6dc:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a6e0:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a6e4:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a6e6:	682a      	ldr	r2, [r5, #0]
    a6e8:	2a00      	cmp	r2, #0
    a6ea:	dafc      	bge.n	a6e6 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a6ec:	4a46      	ldr	r2, [pc, #280]	; (a808 <set_arm_clock+0x290>)
    a6ee:	6915      	ldr	r5, [r2, #16]
    a6f0:	f005 0507 	and.w	r5, r5, #7
    a6f4:	429d      	cmp	r5, r3
    a6f6:	d003      	beq.n	a700 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a6f8:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a6fa:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a6fc:	03dd      	lsls	r5, r3, #15
    a6fe:	d4fc      	bmi.n	a6fa <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a700:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a704:	d009      	beq.n	a71a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a706:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a70a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a70e:	4a3e      	ldr	r2, [pc, #248]	; (a808 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a710:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a712:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a714:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a716:	0799      	lsls	r1, r3, #30
    a718:	d4fc      	bmi.n	a714 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a71a:	4947      	ldr	r1, [pc, #284]	; (a838 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a71c:	4a47      	ldr	r2, [pc, #284]	; (a83c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a71e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a720:	4291      	cmp	r1, r2
    a722:	d83c      	bhi.n	a79e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a724:	4b46      	ldr	r3, [pc, #280]	; (a840 <set_arm_clock+0x2c8>)
    a726:	09c9      	lsrs	r1, r1, #7
    a728:	fba3 3101 	umull	r3, r1, r3, r1
    a72c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a72e:	1e4b      	subs	r3, r1, #1
    a730:	021b      	lsls	r3, r3, #8
    a732:	ea86 0203 	eor.w	r2, r6, r3
    a736:	f412 7f40 	tst.w	r2, #768	; 0x300
    a73a:	d006      	beq.n	a74a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a73c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a740:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a744:	4a30      	ldr	r2, [pc, #192]	; (a808 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a746:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a748:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a74a:	4a2f      	ldr	r2, [pc, #188]	; (a808 <set_arm_clock+0x290>)
    a74c:	6953      	ldr	r3, [r2, #20]
    a74e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    a752:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a754:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a756:	069b      	lsls	r3, r3, #26
    a758:	d4fc      	bmi.n	a754 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a75a:	4b3a      	ldr	r3, [pc, #232]	; (a844 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a75c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a75e:	fba3 2300 	umull	r2, r3, r3, r0
    a762:	f04f 32ff 	mov.w	r2, #4294967295
    a766:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a76a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a76e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a772:	4a35      	ldr	r2, [pc, #212]	; (a848 <set_arm_clock+0x2d0>)
    a774:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a776:	4a35      	ldr	r2, [pc, #212]	; (a84c <set_arm_clock+0x2d4>)
    a778:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a77a:	4a35      	ldr	r2, [pc, #212]	; (a850 <set_arm_clock+0x2d8>)
    a77c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a77e:	d208      	bcs.n	a792 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a780:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a784:	4a21      	ldr	r2, [pc, #132]	; (a80c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a786:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a78a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a78c:	6813      	ldr	r3, [r2, #0]
    a78e:	2b00      	cmp	r3, #0
    a790:	dafc      	bge.n	a78c <set_arm_clock+0x214>
	}

	return frequency;
}
    a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a796:	4673      	mov	r3, lr
    a798:	e762      	b.n	a660 <set_arm_clock+0xe8>
    a79a:	2712      	movs	r7, #18
    a79c:	e718      	b.n	a5d0 <set_arm_clock+0x58>
    a79e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a7a2:	2104      	movs	r1, #4
    a7a4:	e7c5      	b.n	a732 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7a6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7aa:	4820      	ldr	r0, [pc, #128]	; (a82c <set_arm_clock+0x2b4>)
    a7ac:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7ae:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7b0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7b2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7b6:	4a27      	ldr	r2, [pc, #156]	; (a854 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a7b8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; a864 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7bc:	fba2 2000 	umull	r2, r0, r2, r0
    a7c0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7c2:	4825      	ldr	r0, [pc, #148]	; (a858 <set_arm_clock+0x2e0>)
    a7c4:	2a36      	cmp	r2, #54	; 0x36
    a7c6:	bf38      	it	cc
    a7c8:	2236      	movcc	r2, #54	; 0x36
    a7ca:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a7ce:	ea42 0a0a 	orr.w	sl, r2, sl
    a7d2:	e774      	b.n	a6be <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7d4:	ea4f 248c 	mov.w	r4, ip, lsl #10
    a7d8:	2300      	movs	r3, #0
    a7da:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a7de:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a7e2:	46ac      	mov	ip, r5
    a7e4:	e762      	b.n	a6ac <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a7e6:	461d      	mov	r5, r3
    a7e8:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    a7ec:	4611      	mov	r1, r2
    a7ee:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    a7f2:	e713      	b.n	a61c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a7f4:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    a7f6:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a7fa:	4602      	mov	r2, r0
    a7fc:	4631      	mov	r1, r6
    a7fe:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    a800:	46e6      	mov	lr, ip
    a802:	e753      	b.n	a6ac <set_arm_clock+0x134>
    a804:	1f78a400 	.word	0x1f78a400
    a808:	400fc000 	.word	0x400fc000
    a80c:	40080000 	.word	0x40080000
    a810:	23c34600 	.word	0x23c34600
    a814:	004cb223 	.word	0x004cb223
    a818:	51eb851f 	.word	0x51eb851f
    a81c:	016e3600 	.word	0x016e3600
    a820:	400d8000 	.word	0x400d8000
    a824:	80003040 	.word	0x80003040
    a828:	269fb1ff 	.word	0x269fb1ff
    a82c:	005b8d80 	.word	0x005b8d80
    a830:	4df67eff 	.word	0x4df67eff
    a834:	4d3f6400 	.word	0x4d3f6400
    a838:	08f0d17f 	.word	0x08f0d17f
    a83c:	2cb4177f 	.word	0x2cb4177f
    a840:	00e5109f 	.word	0x00e5109f
    a844:	431bde83 	.word	0x431bde83
    a848:	2000440c 	.word	0x2000440c
    a84c:	20004408 	.word	0x20004408
    a850:	20018864 	.word	0x20018864
    a854:	165e9f81 	.word	0x165e9f81
    a858:	00b71b00 	.word	0x00b71b00
    a85c:	8000206c 	.word	0x8000206c
    a860:	8001307f 	.word	0x8001307f
    a864:	80002000 	.word	0x80002000

0000a868 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a868:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a86a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a86c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a870:	4619      	mov	r1, r3
{
    a872:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a874:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a878:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a87c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a880:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a884:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a888:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a88a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a88e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a892:	b29b      	uxth	r3, r3
    a894:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a898:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a89c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a8a0:	3101      	adds	r1, #1
    a8a2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a8a6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a8a8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a8aa:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a8ae:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a8b0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a8b2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a8b4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a8b6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a8ba:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a8bc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a8be:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a8c0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a8c2:	d1eb      	bne.n	a89c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a8c4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a8c8:	b29b      	uxth	r3, r3
    a8ca:	f043 030f 	orr.w	r3, r3, #15
    a8ce:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a8d2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a8d6:	b29b      	uxth	r3, r3
    a8d8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a8dc:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a8e0:	bd10      	pop	{r4, pc}
    a8e2:	bf00      	nop

0000a8e4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a8e4:	4b37      	ldr	r3, [pc, #220]	; (a9c4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a8e6:	4a38      	ldr	r2, [pc, #224]	; (a9c8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a8e8:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a8ea:	4838      	ldr	r0, [pc, #224]	; (a9cc <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a8ec:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a8f0:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a8f2:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8f4:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a8f8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8fc:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a900:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a904:	430a      	orrs	r2, r1
    a906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a90a:	f7ff ffad 	bl	a868 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a90e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a912:	f7ff ffa9 	bl	a868 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a916:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a91a:	f7ff ffa5 	bl	a868 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a91e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a922:	f7ff ffa1 	bl	a868 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a926:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a928:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a92c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a930:	4611      	mov	r1, r2
    a932:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a936:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a93a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a93c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a93e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a940:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a942:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a946:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a948:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a94a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a94e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a950:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a952:	d1ee      	bne.n	a932 <pwm_init+0x4e>
    a954:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a956:	481e      	ldr	r0, [pc, #120]	; (a9d0 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a958:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a95c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a960:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a962:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a966:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a96a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a96e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a972:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a974:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a976:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a978:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a97a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a97e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a980:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a982:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a986:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a988:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a98a:	d1ee      	bne.n	a96a <pwm_init+0x86>
    a98c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a98e:	4811      	ldr	r0, [pc, #68]	; (a9d4 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a990:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a992:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a996:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a998:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a99c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a9a0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a9a4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a9a8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a9aa:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a9ac:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a9ae:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a9b0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a9b2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a9b4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a9b6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a9ba:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a9bc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    a9c0:	d1ee      	bne.n	a9a0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a9c2:	bd70      	pop	{r4, r5, r6, pc}
    a9c4:	400fc000 	.word	0x400fc000
    a9c8:	fc030000 	.word	0xfc030000
    a9cc:	403dc000 	.word	0x403dc000
    a9d0:	401e0000 	.word	0x401e0000
    a9d4:	401e4000 	.word	0x401e4000

0000a9d8 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    a9d8:	4a07      	ldr	r2, [pc, #28]	; (a9f8 <rtc_get+0x20>)
    a9da:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    a9dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    a9de:	4619      	mov	r1, r3
    a9e0:	4684      	mov	ip, r0
    a9e2:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    a9e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    a9e6:	4299      	cmp	r1, r3
    a9e8:	d1f9      	bne.n	a9de <rtc_get+0x6>
    a9ea:	4584      	cmp	ip, r0
    a9ec:	d1f7      	bne.n	a9de <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    a9ee:	0bdb      	lsrs	r3, r3, #15
}
    a9f0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    a9f4:	4770      	bx	lr
    a9f6:	bf00      	nop
    a9f8:	400d4000 	.word	0x400d4000

0000a9fc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a9fc:	4770      	bx	lr
    a9fe:	bf00      	nop

0000aa00 <sm_align_pool>:
{
    aa00:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    aa02:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    aa06:	b15b      	cbz	r3, aa20 <sm_align_pool+0x20>
    aa08:	b1ba      	cbz	r2, aa3a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    aa0a:	4b0f      	ldr	r3, [pc, #60]	; (aa48 <sm_align_pool+0x48>)
    aa0c:	fba3 1302 	umull	r1, r3, r3, r2
    aa10:	08db      	lsrs	r3, r3, #3
    aa12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aa16:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    aa1a:	d10a      	bne.n	aa32 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    aa1c:	2001      	movs	r0, #1
}
    aa1e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    aa20:	4b09      	ldr	r3, [pc, #36]	; (aa48 <sm_align_pool+0x48>)
    aa22:	fba3 1302 	umull	r1, r3, r3, r2
    aa26:	08db      	lsrs	r3, r3, #3
    aa28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    aa2c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    aa30:	d001      	beq.n	aa36 <sm_align_pool+0x36>
    aa32:	1ad2      	subs	r2, r2, r3
    aa34:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    aa36:	2af0      	cmp	r2, #240	; 0xf0
    aa38:	d8f0      	bhi.n	aa1c <sm_align_pool+0x1c>
		errno = ENOSPC;
    aa3a:	f001 fa17 	bl	be6c <__errno>
    aa3e:	221c      	movs	r2, #28
    aa40:	4603      	mov	r3, r0
    aa42:	2000      	movs	r0, #0
    aa44:	601a      	str	r2, [r3, #0]
}
    aa46:	bd08      	pop	{r3, pc}
    aa48:	aaaaaaab 	.word	0xaaaaaaab

0000aa4c <sm_set_pool>:
{
    aa4c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    aa4e:	4604      	mov	r4, r0
    aa50:	b338      	cbz	r0, aaa2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    aa52:	b119      	cbz	r1, aa5c <sm_set_pool+0x10>
    aa54:	fab2 f682 	clz	r6, r2
    aa58:	0976      	lsrs	r6, r6, #5
    aa5a:	b9a2      	cbnz	r2, aa86 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    aa5c:	6820      	ldr	r0, [r4, #0]
    aa5e:	b300      	cbz	r0, aaa2 <sm_set_pool+0x56>
    aa60:	6862      	ldr	r2, [r4, #4]
    aa62:	b1f2      	cbz	r2, aaa2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    aa64:	4b18      	ldr	r3, [pc, #96]	; (aac8 <sm_set_pool+0x7c>)
    aa66:	4919      	ldr	r1, [pc, #100]	; (aacc <sm_set_pool+0x80>)
    aa68:	fb02 f303 	mul.w	r3, r2, r3
    aa6c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    aa70:	d317      	bcc.n	aaa2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    aa72:	68a3      	ldr	r3, [r4, #8]
    aa74:	b9e3      	cbnz	r3, aab0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    aa76:	2200      	movs	r2, #0
			return 1;
    aa78:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    aa7a:	6022      	str	r2, [r4, #0]
    aa7c:	6062      	str	r2, [r4, #4]
    aa7e:	60a2      	str	r2, [r4, #8]
    aa80:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    aa82:	4618      	mov	r0, r3
    aa84:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    aa86:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    aa88:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    aa8a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    aa8e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    aa90:	f7ff ffb6 	bl	aa00 <sm_align_pool>
    aa94:	4603      	mov	r3, r0
    aa96:	2800      	cmp	r0, #0
    aa98:	d0f3      	beq.n	aa82 <sm_set_pool+0x36>
	if (do_zero) {
    aa9a:	b96d      	cbnz	r5, aab8 <sm_set_pool+0x6c>
	return 1;
    aa9c:	2301      	movs	r3, #1
}
    aa9e:	4618      	mov	r0, r3
    aaa0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    aaa2:	f001 f9e3 	bl	be6c <__errno>
    aaa6:	2216      	movs	r2, #22
		return 0;
    aaa8:	2300      	movs	r3, #0
		errno = EINVAL;
    aaaa:	6002      	str	r2, [r0, #0]
}
    aaac:	4618      	mov	r0, r3
    aaae:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    aab0:	2100      	movs	r1, #0
    aab2:	f001 f885 	bl	bbc0 <memset>
    aab6:	e7de      	b.n	aa76 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    aab8:	6862      	ldr	r2, [r4, #4]
    aaba:	4631      	mov	r1, r6
    aabc:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    aabe:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    aac0:	f001 f87e 	bl	bbc0 <memset>
	return 1;
    aac4:	2301      	movs	r3, #1
    aac6:	e7dc      	b.n	aa82 <sm_set_pool+0x36>
    aac8:	aaaaaaab 	.word	0xaaaaaaab
    aacc:	15555555 	.word	0x15555555

0000aad0 <__aeabi_atexit>:
    aad0:	4603      	mov	r3, r0
    aad2:	4608      	mov	r0, r1
    aad4:	4619      	mov	r1, r3
    aad6:	f000 be8d 	b.w	b7f4 <__cxa_atexit>
    aada:	bf00      	nop

0000aadc <atol>:
    aadc:	220a      	movs	r2, #10
    aade:	2100      	movs	r1, #0
    aae0:	f000 bd7c 	b.w	b5dc <strtol>

0000aae4 <itoa>:
    aae4:	1e93      	subs	r3, r2, #2
    aae6:	2b22      	cmp	r3, #34	; 0x22
    aae8:	b510      	push	{r4, lr}
    aaea:	460c      	mov	r4, r1
    aaec:	d80c      	bhi.n	ab08 <itoa+0x24>
    aaee:	2a0a      	cmp	r2, #10
    aaf0:	d003      	beq.n	aafa <itoa+0x16>
    aaf2:	f000 fe2f 	bl	b754 <__utoa>
    aaf6:	4620      	mov	r0, r4
    aaf8:	bd10      	pop	{r4, pc}
    aafa:	2800      	cmp	r0, #0
    aafc:	daf9      	bge.n	aaf2 <itoa+0xe>
    aafe:	232d      	movs	r3, #45	; 0x2d
    ab00:	f801 3b01 	strb.w	r3, [r1], #1
    ab04:	4240      	negs	r0, r0
    ab06:	e7f4      	b.n	aaf2 <itoa+0xe>
    ab08:	2300      	movs	r3, #0
    ab0a:	700b      	strb	r3, [r1, #0]
    ab0c:	4618      	mov	r0, r3
    ab0e:	bd10      	pop	{r4, pc}

0000ab10 <malloc>:
    ab10:	4b02      	ldr	r3, [pc, #8]	; (ab1c <malloc+0xc>)
    ab12:	4601      	mov	r1, r0
    ab14:	6818      	ldr	r0, [r3, #0]
    ab16:	f000 b80b 	b.w	ab30 <_malloc_r>
    ab1a:	bf00      	nop
    ab1c:	200049b4 	.word	0x200049b4

0000ab20 <free>:
    ab20:	4b02      	ldr	r3, [pc, #8]	; (ab2c <free+0xc>)
    ab22:	4601      	mov	r1, r0
    ab24:	6818      	ldr	r0, [r3, #0]
    ab26:	f001 bcad 	b.w	c484 <_free_r>
    ab2a:	bf00      	nop
    ab2c:	200049b4 	.word	0x200049b4

0000ab30 <_malloc_r>:
    ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab34:	f101 060b 	add.w	r6, r1, #11
    ab38:	2e16      	cmp	r6, #22
    ab3a:	b083      	sub	sp, #12
    ab3c:	4604      	mov	r4, r0
    ab3e:	d824      	bhi.n	ab8a <_malloc_r+0x5a>
    ab40:	2910      	cmp	r1, #16
    ab42:	f200 80ba 	bhi.w	acba <_malloc_r+0x18a>
    ab46:	f000 faa3 	bl	b090 <__malloc_lock>
    ab4a:	2610      	movs	r6, #16
    ab4c:	2218      	movs	r2, #24
    ab4e:	2002      	movs	r0, #2
    ab50:	4fb5      	ldr	r7, [pc, #724]	; (ae28 <_malloc_r+0x2f8>)
    ab52:	443a      	add	r2, r7
    ab54:	f1a2 0108 	sub.w	r1, r2, #8
    ab58:	6853      	ldr	r3, [r2, #4]
    ab5a:	428b      	cmp	r3, r1
    ab5c:	f000 80ba 	beq.w	acd4 <_malloc_r+0x1a4>
    ab60:	685a      	ldr	r2, [r3, #4]
    ab62:	68d9      	ldr	r1, [r3, #12]
    ab64:	f022 0203 	bic.w	r2, r2, #3
    ab68:	441a      	add	r2, r3
    ab6a:	689d      	ldr	r5, [r3, #8]
    ab6c:	60e9      	str	r1, [r5, #12]
    ab6e:	608d      	str	r5, [r1, #8]
    ab70:	6851      	ldr	r1, [r2, #4]
    ab72:	f041 0101 	orr.w	r1, r1, #1
    ab76:	4620      	mov	r0, r4
    ab78:	6051      	str	r1, [r2, #4]
    ab7a:	f103 0508 	add.w	r5, r3, #8
    ab7e:	f000 fa8d 	bl	b09c <__malloc_unlock>
    ab82:	4628      	mov	r0, r5
    ab84:	b003      	add	sp, #12
    ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab8a:	f036 0607 	bics.w	r6, r6, #7
    ab8e:	f100 8094 	bmi.w	acba <_malloc_r+0x18a>
    ab92:	42b1      	cmp	r1, r6
    ab94:	f200 8091 	bhi.w	acba <_malloc_r+0x18a>
    ab98:	f000 fa7a 	bl	b090 <__malloc_lock>
    ab9c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    aba0:	f0c0 819a 	bcc.w	aed8 <_malloc_r+0x3a8>
    aba4:	0a73      	lsrs	r3, r6, #9
    aba6:	f000 808f 	beq.w	acc8 <_malloc_r+0x198>
    abaa:	2b04      	cmp	r3, #4
    abac:	f200 816f 	bhi.w	ae8e <_malloc_r+0x35e>
    abb0:	09b3      	lsrs	r3, r6, #6
    abb2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    abb6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    abba:	00c3      	lsls	r3, r0, #3
    abbc:	4f9a      	ldr	r7, [pc, #616]	; (ae28 <_malloc_r+0x2f8>)
    abbe:	443b      	add	r3, r7
    abc0:	f1a3 0508 	sub.w	r5, r3, #8
    abc4:	685b      	ldr	r3, [r3, #4]
    abc6:	429d      	cmp	r5, r3
    abc8:	d106      	bne.n	abd8 <_malloc_r+0xa8>
    abca:	e00c      	b.n	abe6 <_malloc_r+0xb6>
    abcc:	2900      	cmp	r1, #0
    abce:	f280 8127 	bge.w	ae20 <_malloc_r+0x2f0>
    abd2:	68db      	ldr	r3, [r3, #12]
    abd4:	429d      	cmp	r5, r3
    abd6:	d006      	beq.n	abe6 <_malloc_r+0xb6>
    abd8:	685a      	ldr	r2, [r3, #4]
    abda:	f022 0203 	bic.w	r2, r2, #3
    abde:	1b91      	subs	r1, r2, r6
    abe0:	290f      	cmp	r1, #15
    abe2:	ddf3      	ble.n	abcc <_malloc_r+0x9c>
    abe4:	4660      	mov	r0, ip
    abe6:	693d      	ldr	r5, [r7, #16]
    abe8:	f8df c250 	ldr.w	ip, [pc, #592]	; ae3c <_malloc_r+0x30c>
    abec:	4565      	cmp	r5, ip
    abee:	d07c      	beq.n	acea <_malloc_r+0x1ba>
    abf0:	686a      	ldr	r2, [r5, #4]
    abf2:	f022 0203 	bic.w	r2, r2, #3
    abf6:	1b93      	subs	r3, r2, r6
    abf8:	2b0f      	cmp	r3, #15
    abfa:	f300 817b 	bgt.w	aef4 <_malloc_r+0x3c4>
    abfe:	2b00      	cmp	r3, #0
    ac00:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ac04:	f280 816c 	bge.w	aee0 <_malloc_r+0x3b0>
    ac08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ac0c:	f080 811a 	bcs.w	ae44 <_malloc_r+0x314>
    ac10:	08d3      	lsrs	r3, r2, #3
    ac12:	6879      	ldr	r1, [r7, #4]
    ac14:	3301      	adds	r3, #1
    ac16:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ac1a:	2201      	movs	r2, #1
    ac1c:	fa02 f20e 	lsl.w	r2, r2, lr
    ac20:	430a      	orrs	r2, r1
    ac22:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ac26:	f8c5 e008 	str.w	lr, [r5, #8]
    ac2a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ac2e:	3908      	subs	r1, #8
    ac30:	60e9      	str	r1, [r5, #12]
    ac32:	607a      	str	r2, [r7, #4]
    ac34:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ac38:	f8ce 500c 	str.w	r5, [lr, #12]
    ac3c:	1083      	asrs	r3, r0, #2
    ac3e:	2101      	movs	r1, #1
    ac40:	4099      	lsls	r1, r3
    ac42:	4291      	cmp	r1, r2
    ac44:	d857      	bhi.n	acf6 <_malloc_r+0x1c6>
    ac46:	4211      	tst	r1, r2
    ac48:	d106      	bne.n	ac58 <_malloc_r+0x128>
    ac4a:	f020 0003 	bic.w	r0, r0, #3
    ac4e:	0049      	lsls	r1, r1, #1
    ac50:	4211      	tst	r1, r2
    ac52:	f100 0004 	add.w	r0, r0, #4
    ac56:	d0fa      	beq.n	ac4e <_malloc_r+0x11e>
    ac58:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ac5c:	464d      	mov	r5, r9
    ac5e:	4686      	mov	lr, r0
    ac60:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ac64:	4545      	cmp	r5, r8
    ac66:	d108      	bne.n	ac7a <_malloc_r+0x14a>
    ac68:	e11d      	b.n	aea6 <_malloc_r+0x376>
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	f280 8124 	bge.w	aeb8 <_malloc_r+0x388>
    ac70:	f8d8 800c 	ldr.w	r8, [r8, #12]
    ac74:	4545      	cmp	r5, r8
    ac76:	f000 8116 	beq.w	aea6 <_malloc_r+0x376>
    ac7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ac7e:	f022 0203 	bic.w	r2, r2, #3
    ac82:	1b93      	subs	r3, r2, r6
    ac84:	2b0f      	cmp	r3, #15
    ac86:	ddf0      	ble.n	ac6a <_malloc_r+0x13a>
    ac88:	4620      	mov	r0, r4
    ac8a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    ac8e:	eb08 0106 	add.w	r1, r8, r6
    ac92:	f046 0601 	orr.w	r6, r6, #1
    ac96:	f8c8 6004 	str.w	r6, [r8, #4]
    ac9a:	60ec      	str	r4, [r5, #12]
    ac9c:	60a5      	str	r5, [r4, #8]
    ac9e:	f043 0401 	orr.w	r4, r3, #1
    aca2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    aca6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    acaa:	604c      	str	r4, [r1, #4]
    acac:	f848 3002 	str.w	r3, [r8, r2]
    acb0:	f000 f9f4 	bl	b09c <__malloc_unlock>
    acb4:	f108 0508 	add.w	r5, r8, #8
    acb8:	e002      	b.n	acc0 <_malloc_r+0x190>
    acba:	230c      	movs	r3, #12
    acbc:	6023      	str	r3, [r4, #0]
    acbe:	2500      	movs	r5, #0
    acc0:	4628      	mov	r0, r5
    acc2:	b003      	add	sp, #12
    acc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acc8:	f44f 7300 	mov.w	r3, #512	; 0x200
    accc:	2040      	movs	r0, #64	; 0x40
    acce:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    acd2:	e773      	b.n	abbc <_malloc_r+0x8c>
    acd4:	68d3      	ldr	r3, [r2, #12]
    acd6:	429a      	cmp	r2, r3
    acd8:	bf08      	it	eq
    acda:	3002      	addeq	r0, #2
    acdc:	f47f af40 	bne.w	ab60 <_malloc_r+0x30>
    ace0:	693d      	ldr	r5, [r7, #16]
    ace2:	f8df c158 	ldr.w	ip, [pc, #344]	; ae3c <_malloc_r+0x30c>
    ace6:	4565      	cmp	r5, ip
    ace8:	d182      	bne.n	abf0 <_malloc_r+0xc0>
    acea:	687a      	ldr	r2, [r7, #4]
    acec:	1083      	asrs	r3, r0, #2
    acee:	2101      	movs	r1, #1
    acf0:	4099      	lsls	r1, r3
    acf2:	4291      	cmp	r1, r2
    acf4:	d9a7      	bls.n	ac46 <_malloc_r+0x116>
    acf6:	68bd      	ldr	r5, [r7, #8]
    acf8:	686b      	ldr	r3, [r5, #4]
    acfa:	f023 0903 	bic.w	r9, r3, #3
    acfe:	454e      	cmp	r6, r9
    ad00:	d803      	bhi.n	ad0a <_malloc_r+0x1da>
    ad02:	eba9 0306 	sub.w	r3, r9, r6
    ad06:	2b0f      	cmp	r3, #15
    ad08:	dc7a      	bgt.n	ae00 <_malloc_r+0x2d0>
    ad0a:	f8df b134 	ldr.w	fp, [pc, #308]	; ae40 <_malloc_r+0x310>
    ad0e:	4b47      	ldr	r3, [pc, #284]	; (ae2c <_malloc_r+0x2fc>)
    ad10:	f8db 2000 	ldr.w	r2, [fp]
    ad14:	681b      	ldr	r3, [r3, #0]
    ad16:	3201      	adds	r2, #1
    ad18:	4433      	add	r3, r6
    ad1a:	eb05 0a09 	add.w	sl, r5, r9
    ad1e:	f000 8133 	beq.w	af88 <_malloc_r+0x458>
    ad22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ad26:	330f      	adds	r3, #15
    ad28:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    ad2c:	f028 080f 	bic.w	r8, r8, #15
    ad30:	4641      	mov	r1, r8
    ad32:	4620      	mov	r0, r4
    ad34:	f001 f872 	bl	be1c <_sbrk_r>
    ad38:	1c41      	adds	r1, r0, #1
    ad3a:	4602      	mov	r2, r0
    ad3c:	f000 80f3 	beq.w	af26 <_malloc_r+0x3f6>
    ad40:	4582      	cmp	sl, r0
    ad42:	f200 80ee 	bhi.w	af22 <_malloc_r+0x3f2>
    ad46:	4b3a      	ldr	r3, [pc, #232]	; (ae30 <_malloc_r+0x300>)
    ad48:	6819      	ldr	r1, [r3, #0]
    ad4a:	4441      	add	r1, r8
    ad4c:	6019      	str	r1, [r3, #0]
    ad4e:	4608      	mov	r0, r1
    ad50:	f000 814e 	beq.w	aff0 <_malloc_r+0x4c0>
    ad54:	f8db 1000 	ldr.w	r1, [fp]
    ad58:	9301      	str	r3, [sp, #4]
    ad5a:	3101      	adds	r1, #1
    ad5c:	bf1b      	ittet	ne
    ad5e:	eba2 010a 	subne.w	r1, r2, sl
    ad62:	1809      	addne	r1, r1, r0
    ad64:	f8cb 2000 	streq.w	r2, [fp]
    ad68:	6019      	strne	r1, [r3, #0]
    ad6a:	f012 0b07 	ands.w	fp, r2, #7
    ad6e:	f000 8117 	beq.w	afa0 <_malloc_r+0x470>
    ad72:	f1cb 0108 	rsb	r1, fp, #8
    ad76:	440a      	add	r2, r1
    ad78:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    ad7c:	4490      	add	r8, r2
    ad7e:	3108      	adds	r1, #8
    ad80:	eba1 0108 	sub.w	r1, r1, r8
    ad84:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ad88:	4651      	mov	r1, sl
    ad8a:	4620      	mov	r0, r4
    ad8c:	9200      	str	r2, [sp, #0]
    ad8e:	f001 f845 	bl	be1c <_sbrk_r>
    ad92:	1c42      	adds	r2, r0, #1
    ad94:	e9dd 2300 	ldrd	r2, r3, [sp]
    ad98:	f000 814f 	beq.w	b03a <_malloc_r+0x50a>
    ad9c:	1a80      	subs	r0, r0, r2
    ad9e:	eb00 080a 	add.w	r8, r0, sl
    ada2:	6819      	ldr	r1, [r3, #0]
    ada4:	60ba      	str	r2, [r7, #8]
    ada6:	f048 0001 	orr.w	r0, r8, #1
    adaa:	4451      	add	r1, sl
    adac:	42bd      	cmp	r5, r7
    adae:	6050      	str	r0, [r2, #4]
    adb0:	6019      	str	r1, [r3, #0]
    adb2:	f000 8129 	beq.w	b008 <_malloc_r+0x4d8>
    adb6:	f1b9 0f0f 	cmp.w	r9, #15
    adba:	f240 8127 	bls.w	b00c <_malloc_r+0x4dc>
    adbe:	6868      	ldr	r0, [r5, #4]
    adc0:	f1a9 0c0c 	sub.w	ip, r9, #12
    adc4:	f02c 0c07 	bic.w	ip, ip, #7
    adc8:	f000 0001 	and.w	r0, r0, #1
    adcc:	ea40 000c 	orr.w	r0, r0, ip
    add0:	6068      	str	r0, [r5, #4]
    add2:	f04f 0e05 	mov.w	lr, #5
    add6:	eb05 000c 	add.w	r0, r5, ip
    adda:	f1bc 0f0f 	cmp.w	ip, #15
    adde:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    ade2:	f200 8132 	bhi.w	b04a <_malloc_r+0x51a>
    ade6:	6850      	ldr	r0, [r2, #4]
    ade8:	4615      	mov	r5, r2
    adea:	4b12      	ldr	r3, [pc, #72]	; (ae34 <_malloc_r+0x304>)
    adec:	681a      	ldr	r2, [r3, #0]
    adee:	428a      	cmp	r2, r1
    adf0:	bf38      	it	cc
    adf2:	6019      	strcc	r1, [r3, #0]
    adf4:	4b10      	ldr	r3, [pc, #64]	; (ae38 <_malloc_r+0x308>)
    adf6:	681a      	ldr	r2, [r3, #0]
    adf8:	428a      	cmp	r2, r1
    adfa:	bf38      	it	cc
    adfc:	6019      	strcc	r1, [r3, #0]
    adfe:	e094      	b.n	af2a <_malloc_r+0x3fa>
    ae00:	19aa      	adds	r2, r5, r6
    ae02:	f043 0301 	orr.w	r3, r3, #1
    ae06:	f046 0601 	orr.w	r6, r6, #1
    ae0a:	606e      	str	r6, [r5, #4]
    ae0c:	4620      	mov	r0, r4
    ae0e:	60ba      	str	r2, [r7, #8]
    ae10:	6053      	str	r3, [r2, #4]
    ae12:	f000 f943 	bl	b09c <__malloc_unlock>
    ae16:	3508      	adds	r5, #8
    ae18:	4628      	mov	r0, r5
    ae1a:	b003      	add	sp, #12
    ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae20:	68d9      	ldr	r1, [r3, #12]
    ae22:	441a      	add	r2, r3
    ae24:	e6a1      	b.n	ab6a <_malloc_r+0x3a>
    ae26:	bf00      	nop
    ae28:	20004598 	.word	0x20004598
    ae2c:	20005288 	.word	0x20005288
    ae30:	20005258 	.word	0x20005258
    ae34:	20005280 	.word	0x20005280
    ae38:	20005284 	.word	0x20005284
    ae3c:	200045a0 	.word	0x200045a0
    ae40:	200049a0 	.word	0x200049a0
    ae44:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    ae48:	ea4f 2352 	mov.w	r3, r2, lsr #9
    ae4c:	d363      	bcc.n	af16 <_malloc_r+0x3e6>
    ae4e:	2b14      	cmp	r3, #20
    ae50:	f200 80b7 	bhi.w	afc2 <_malloc_r+0x492>
    ae54:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    ae58:	00c9      	lsls	r1, r1, #3
    ae5a:	335b      	adds	r3, #91	; 0x5b
    ae5c:	eb07 0e01 	add.w	lr, r7, r1
    ae60:	5879      	ldr	r1, [r7, r1]
    ae62:	f1ae 0e08 	sub.w	lr, lr, #8
    ae66:	458e      	cmp	lr, r1
    ae68:	f000 8091 	beq.w	af8e <_malloc_r+0x45e>
    ae6c:	684b      	ldr	r3, [r1, #4]
    ae6e:	f023 0303 	bic.w	r3, r3, #3
    ae72:	4293      	cmp	r3, r2
    ae74:	d902      	bls.n	ae7c <_malloc_r+0x34c>
    ae76:	6889      	ldr	r1, [r1, #8]
    ae78:	458e      	cmp	lr, r1
    ae7a:	d1f7      	bne.n	ae6c <_malloc_r+0x33c>
    ae7c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    ae80:	687a      	ldr	r2, [r7, #4]
    ae82:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    ae86:	f8ce 5008 	str.w	r5, [lr, #8]
    ae8a:	60cd      	str	r5, [r1, #12]
    ae8c:	e6d6      	b.n	ac3c <_malloc_r+0x10c>
    ae8e:	2b14      	cmp	r3, #20
    ae90:	d959      	bls.n	af46 <_malloc_r+0x416>
    ae92:	2b54      	cmp	r3, #84	; 0x54
    ae94:	f200 809d 	bhi.w	afd2 <_malloc_r+0x4a2>
    ae98:	0b33      	lsrs	r3, r6, #12
    ae9a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    ae9e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    aea2:	00c3      	lsls	r3, r0, #3
    aea4:	e68a      	b.n	abbc <_malloc_r+0x8c>
    aea6:	f10e 0e01 	add.w	lr, lr, #1
    aeaa:	f01e 0f03 	tst.w	lr, #3
    aeae:	f105 0508 	add.w	r5, r5, #8
    aeb2:	f47f aed5 	bne.w	ac60 <_malloc_r+0x130>
    aeb6:	e051      	b.n	af5c <_malloc_r+0x42c>
    aeb8:	4442      	add	r2, r8
    aeba:	4645      	mov	r5, r8
    aebc:	6853      	ldr	r3, [r2, #4]
    aebe:	f8d8 100c 	ldr.w	r1, [r8, #12]
    aec2:	f043 0301 	orr.w	r3, r3, #1
    aec6:	6053      	str	r3, [r2, #4]
    aec8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    aecc:	4620      	mov	r0, r4
    aece:	60d9      	str	r1, [r3, #12]
    aed0:	608b      	str	r3, [r1, #8]
    aed2:	f000 f8e3 	bl	b09c <__malloc_unlock>
    aed6:	e6f3      	b.n	acc0 <_malloc_r+0x190>
    aed8:	08f0      	lsrs	r0, r6, #3
    aeda:	f106 0208 	add.w	r2, r6, #8
    aede:	e637      	b.n	ab50 <_malloc_r+0x20>
    aee0:	442a      	add	r2, r5
    aee2:	4620      	mov	r0, r4
    aee4:	6853      	ldr	r3, [r2, #4]
    aee6:	f043 0301 	orr.w	r3, r3, #1
    aeea:	6053      	str	r3, [r2, #4]
    aeec:	3508      	adds	r5, #8
    aeee:	f000 f8d5 	bl	b09c <__malloc_unlock>
    aef2:	e6e5      	b.n	acc0 <_malloc_r+0x190>
    aef4:	19a9      	adds	r1, r5, r6
    aef6:	4620      	mov	r0, r4
    aef8:	f046 0601 	orr.w	r6, r6, #1
    aefc:	f043 0401 	orr.w	r4, r3, #1
    af00:	606e      	str	r6, [r5, #4]
    af02:	e9c7 1104 	strd	r1, r1, [r7, #16]
    af06:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    af0a:	604c      	str	r4, [r1, #4]
    af0c:	50ab      	str	r3, [r5, r2]
    af0e:	f000 f8c5 	bl	b09c <__malloc_unlock>
    af12:	3508      	adds	r5, #8
    af14:	e6d4      	b.n	acc0 <_malloc_r+0x190>
    af16:	0993      	lsrs	r3, r2, #6
    af18:	f103 0139 	add.w	r1, r3, #57	; 0x39
    af1c:	00c9      	lsls	r1, r1, #3
    af1e:	3338      	adds	r3, #56	; 0x38
    af20:	e79c      	b.n	ae5c <_malloc_r+0x32c>
    af22:	42bd      	cmp	r5, r7
    af24:	d05f      	beq.n	afe6 <_malloc_r+0x4b6>
    af26:	68bd      	ldr	r5, [r7, #8]
    af28:	6868      	ldr	r0, [r5, #4]
    af2a:	f020 0803 	bic.w	r8, r0, #3
    af2e:	4546      	cmp	r6, r8
    af30:	eba8 0306 	sub.w	r3, r8, r6
    af34:	d802      	bhi.n	af3c <_malloc_r+0x40c>
    af36:	2b0f      	cmp	r3, #15
    af38:	f73f af62 	bgt.w	ae00 <_malloc_r+0x2d0>
    af3c:	4620      	mov	r0, r4
    af3e:	f000 f8ad 	bl	b09c <__malloc_unlock>
    af42:	2500      	movs	r5, #0
    af44:	e6bc      	b.n	acc0 <_malloc_r+0x190>
    af46:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    af4a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    af4e:	00c3      	lsls	r3, r0, #3
    af50:	e634      	b.n	abbc <_malloc_r+0x8c>
    af52:	f859 3908 	ldr.w	r3, [r9], #-8
    af56:	454b      	cmp	r3, r9
    af58:	f040 8096 	bne.w	b088 <_malloc_r+0x558>
    af5c:	f010 0f03 	tst.w	r0, #3
    af60:	f100 30ff 	add.w	r0, r0, #4294967295
    af64:	d1f5      	bne.n	af52 <_malloc_r+0x422>
    af66:	687b      	ldr	r3, [r7, #4]
    af68:	ea23 0301 	bic.w	r3, r3, r1
    af6c:	607b      	str	r3, [r7, #4]
    af6e:	0049      	lsls	r1, r1, #1
    af70:	4299      	cmp	r1, r3
    af72:	f63f aec0 	bhi.w	acf6 <_malloc_r+0x1c6>
    af76:	b919      	cbnz	r1, af80 <_malloc_r+0x450>
    af78:	e6bd      	b.n	acf6 <_malloc_r+0x1c6>
    af7a:	0049      	lsls	r1, r1, #1
    af7c:	f10e 0e04 	add.w	lr, lr, #4
    af80:	4219      	tst	r1, r3
    af82:	d0fa      	beq.n	af7a <_malloc_r+0x44a>
    af84:	4670      	mov	r0, lr
    af86:	e667      	b.n	ac58 <_malloc_r+0x128>
    af88:	f103 0810 	add.w	r8, r3, #16
    af8c:	e6d0      	b.n	ad30 <_malloc_r+0x200>
    af8e:	109a      	asrs	r2, r3, #2
    af90:	f04f 0801 	mov.w	r8, #1
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	fa08 f202 	lsl.w	r2, r8, r2
    af9a:	431a      	orrs	r2, r3
    af9c:	607a      	str	r2, [r7, #4]
    af9e:	e770      	b.n	ae82 <_malloc_r+0x352>
    afa0:	eb02 0108 	add.w	r1, r2, r8
    afa4:	4249      	negs	r1, r1
    afa6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    afaa:	4651      	mov	r1, sl
    afac:	4620      	mov	r0, r4
    afae:	9200      	str	r2, [sp, #0]
    afb0:	f000 ff34 	bl	be1c <_sbrk_r>
    afb4:	1c43      	adds	r3, r0, #1
    afb6:	e9dd 2300 	ldrd	r2, r3, [sp]
    afba:	f47f aeef 	bne.w	ad9c <_malloc_r+0x26c>
    afbe:	46da      	mov	sl, fp
    afc0:	e6ef      	b.n	ada2 <_malloc_r+0x272>
    afc2:	2b54      	cmp	r3, #84	; 0x54
    afc4:	d825      	bhi.n	b012 <_malloc_r+0x4e2>
    afc6:	0b13      	lsrs	r3, r2, #12
    afc8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    afcc:	00c9      	lsls	r1, r1, #3
    afce:	336e      	adds	r3, #110	; 0x6e
    afd0:	e744      	b.n	ae5c <_malloc_r+0x32c>
    afd2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    afd6:	d825      	bhi.n	b024 <_malloc_r+0x4f4>
    afd8:	0bf3      	lsrs	r3, r6, #15
    afda:	f103 0078 	add.w	r0, r3, #120	; 0x78
    afde:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    afe2:	00c3      	lsls	r3, r0, #3
    afe4:	e5ea      	b.n	abbc <_malloc_r+0x8c>
    afe6:	4b29      	ldr	r3, [pc, #164]	; (b08c <_malloc_r+0x55c>)
    afe8:	6818      	ldr	r0, [r3, #0]
    afea:	4440      	add	r0, r8
    afec:	6018      	str	r0, [r3, #0]
    afee:	e6b1      	b.n	ad54 <_malloc_r+0x224>
    aff0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    aff4:	f1bc 0f00 	cmp.w	ip, #0
    aff8:	f47f aeac 	bne.w	ad54 <_malloc_r+0x224>
    affc:	68bd      	ldr	r5, [r7, #8]
    affe:	44c8      	add	r8, r9
    b000:	f048 0001 	orr.w	r0, r8, #1
    b004:	6068      	str	r0, [r5, #4]
    b006:	e6f0      	b.n	adea <_malloc_r+0x2ba>
    b008:	4615      	mov	r5, r2
    b00a:	e6ee      	b.n	adea <_malloc_r+0x2ba>
    b00c:	2301      	movs	r3, #1
    b00e:	6053      	str	r3, [r2, #4]
    b010:	e794      	b.n	af3c <_malloc_r+0x40c>
    b012:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b016:	d823      	bhi.n	b060 <_malloc_r+0x530>
    b018:	0bd3      	lsrs	r3, r2, #15
    b01a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    b01e:	00c9      	lsls	r1, r1, #3
    b020:	3377      	adds	r3, #119	; 0x77
    b022:	e71b      	b.n	ae5c <_malloc_r+0x32c>
    b024:	f240 5254 	movw	r2, #1364	; 0x554
    b028:	4293      	cmp	r3, r2
    b02a:	d823      	bhi.n	b074 <_malloc_r+0x544>
    b02c:	0cb3      	lsrs	r3, r6, #18
    b02e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    b032:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    b036:	00c3      	lsls	r3, r0, #3
    b038:	e5c0      	b.n	abbc <_malloc_r+0x8c>
    b03a:	f1ab 0b08 	sub.w	fp, fp, #8
    b03e:	44d8      	add	r8, fp
    b040:	eba8 0802 	sub.w	r8, r8, r2
    b044:	f04f 0a00 	mov.w	sl, #0
    b048:	e6ab      	b.n	ada2 <_malloc_r+0x272>
    b04a:	f105 0108 	add.w	r1, r5, #8
    b04e:	4620      	mov	r0, r4
    b050:	9300      	str	r3, [sp, #0]
    b052:	f001 fa17 	bl	c484 <_free_r>
    b056:	68bd      	ldr	r5, [r7, #8]
    b058:	9b00      	ldr	r3, [sp, #0]
    b05a:	6868      	ldr	r0, [r5, #4]
    b05c:	6819      	ldr	r1, [r3, #0]
    b05e:	e6c4      	b.n	adea <_malloc_r+0x2ba>
    b060:	f240 5154 	movw	r1, #1364	; 0x554
    b064:	428b      	cmp	r3, r1
    b066:	d80b      	bhi.n	b080 <_malloc_r+0x550>
    b068:	0c93      	lsrs	r3, r2, #18
    b06a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    b06e:	00c9      	lsls	r1, r1, #3
    b070:	337c      	adds	r3, #124	; 0x7c
    b072:	e6f3      	b.n	ae5c <_malloc_r+0x32c>
    b074:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    b078:	207f      	movs	r0, #127	; 0x7f
    b07a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    b07e:	e59d      	b.n	abbc <_malloc_r+0x8c>
    b080:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b084:	237e      	movs	r3, #126	; 0x7e
    b086:	e6e9      	b.n	ae5c <_malloc_r+0x32c>
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	e770      	b.n	af6e <_malloc_r+0x43e>
    b08c:	20005258 	.word	0x20005258

0000b090 <__malloc_lock>:
    b090:	4801      	ldr	r0, [pc, #4]	; (b098 <__malloc_lock+0x8>)
    b092:	f000 bf19 	b.w	bec8 <__retarget_lock_acquire_recursive>
    b096:	bf00      	nop
    b098:	20005250 	.word	0x20005250

0000b09c <__malloc_unlock>:
    b09c:	4801      	ldr	r0, [pc, #4]	; (b0a4 <__malloc_unlock+0x8>)
    b09e:	f000 bf15 	b.w	becc <__retarget_lock_release_recursive>
    b0a2:	bf00      	nop
    b0a4:	20005250 	.word	0x20005250

0000b0a8 <realloc>:
    b0a8:	b410      	push	{r4}
    b0aa:	4c04      	ldr	r4, [pc, #16]	; (b0bc <realloc+0x14>)
    b0ac:	4603      	mov	r3, r0
    b0ae:	460a      	mov	r2, r1
    b0b0:	6820      	ldr	r0, [r4, #0]
    b0b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b0b6:	4619      	mov	r1, r3
    b0b8:	f000 b802 	b.w	b0c0 <_realloc_r>
    b0bc:	200049b4 	.word	0x200049b4

0000b0c0 <_realloc_r>:
    b0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0c4:	4617      	mov	r7, r2
    b0c6:	2900      	cmp	r1, #0
    b0c8:	f000 8098 	beq.w	b1fc <_realloc_r+0x13c>
    b0cc:	460c      	mov	r4, r1
    b0ce:	f107 050b 	add.w	r5, r7, #11
    b0d2:	4680      	mov	r8, r0
    b0d4:	f7ff ffdc 	bl	b090 <__malloc_lock>
    b0d8:	2d16      	cmp	r5, #22
    b0da:	f854 1c04 	ldr.w	r1, [r4, #-4]
    b0de:	d85b      	bhi.n	b198 <_realloc_r+0xd8>
    b0e0:	2510      	movs	r5, #16
    b0e2:	462a      	mov	r2, r5
    b0e4:	42af      	cmp	r7, r5
    b0e6:	d85c      	bhi.n	b1a2 <_realloc_r+0xe2>
    b0e8:	f021 0603 	bic.w	r6, r1, #3
    b0ec:	4296      	cmp	r6, r2
    b0ee:	f1a4 0908 	sub.w	r9, r4, #8
    b0f2:	da62      	bge.n	b1ba <_realloc_r+0xfa>
    b0f4:	4bbc      	ldr	r3, [pc, #752]	; (b3e8 <_realloc_r+0x328>)
    b0f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    b0fa:	eb09 0006 	add.w	r0, r9, r6
    b0fe:	4584      	cmp	ip, r0
    b100:	f000 8097 	beq.w	b232 <_realloc_r+0x172>
    b104:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b108:	f02c 0301 	bic.w	r3, ip, #1
    b10c:	4403      	add	r3, r0
    b10e:	685b      	ldr	r3, [r3, #4]
    b110:	07db      	lsls	r3, r3, #31
    b112:	d468      	bmi.n	b1e6 <_realloc_r+0x126>
    b114:	f02c 0c03 	bic.w	ip, ip, #3
    b118:	eb06 030c 	add.w	r3, r6, ip
    b11c:	4293      	cmp	r3, r2
    b11e:	da47      	bge.n	b1b0 <_realloc_r+0xf0>
    b120:	07cb      	lsls	r3, r1, #31
    b122:	d410      	bmi.n	b146 <_realloc_r+0x86>
    b124:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b128:	eba9 0a03 	sub.w	sl, r9, r3
    b12c:	f8da 3004 	ldr.w	r3, [sl, #4]
    b130:	f023 0103 	bic.w	r1, r3, #3
    b134:	448c      	add	ip, r1
    b136:	44b4      	add	ip, r6
    b138:	4594      	cmp	ip, r2
    b13a:	f280 8111 	bge.w	b360 <_realloc_r+0x2a0>
    b13e:	1873      	adds	r3, r6, r1
    b140:	4293      	cmp	r3, r2
    b142:	f280 80e8 	bge.w	b316 <_realloc_r+0x256>
    b146:	4639      	mov	r1, r7
    b148:	4640      	mov	r0, r8
    b14a:	f7ff fcf1 	bl	ab30 <_malloc_r>
    b14e:	4607      	mov	r7, r0
    b150:	b1e0      	cbz	r0, b18c <_realloc_r+0xcc>
    b152:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b156:	f023 0301 	bic.w	r3, r3, #1
    b15a:	444b      	add	r3, r9
    b15c:	f1a0 0208 	sub.w	r2, r0, #8
    b160:	4293      	cmp	r3, r2
    b162:	f000 80d2 	beq.w	b30a <_realloc_r+0x24a>
    b166:	1f32      	subs	r2, r6, #4
    b168:	2a24      	cmp	r2, #36	; 0x24
    b16a:	f200 80f5 	bhi.w	b358 <_realloc_r+0x298>
    b16e:	2a13      	cmp	r2, #19
    b170:	f200 80ac 	bhi.w	b2cc <_realloc_r+0x20c>
    b174:	4603      	mov	r3, r0
    b176:	4622      	mov	r2, r4
    b178:	6811      	ldr	r1, [r2, #0]
    b17a:	6019      	str	r1, [r3, #0]
    b17c:	6851      	ldr	r1, [r2, #4]
    b17e:	6059      	str	r1, [r3, #4]
    b180:	6892      	ldr	r2, [r2, #8]
    b182:	609a      	str	r2, [r3, #8]
    b184:	4621      	mov	r1, r4
    b186:	4640      	mov	r0, r8
    b188:	f001 f97c 	bl	c484 <_free_r>
    b18c:	4640      	mov	r0, r8
    b18e:	f7ff ff85 	bl	b09c <__malloc_unlock>
    b192:	4638      	mov	r0, r7
    b194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b198:	f025 0507 	bic.w	r5, r5, #7
    b19c:	2d00      	cmp	r5, #0
    b19e:	462a      	mov	r2, r5
    b1a0:	daa0      	bge.n	b0e4 <_realloc_r+0x24>
    b1a2:	230c      	movs	r3, #12
    b1a4:	f8c8 3000 	str.w	r3, [r8]
    b1a8:	2700      	movs	r7, #0
    b1aa:	4638      	mov	r0, r7
    b1ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1b0:	461e      	mov	r6, r3
    b1b2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b1b6:	60d3      	str	r3, [r2, #12]
    b1b8:	609a      	str	r2, [r3, #8]
    b1ba:	1b73      	subs	r3, r6, r5
    b1bc:	2b0f      	cmp	r3, #15
    b1be:	d822      	bhi.n	b206 <_realloc_r+0x146>
    b1c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b1c4:	f003 0301 	and.w	r3, r3, #1
    b1c8:	4333      	orrs	r3, r6
    b1ca:	444e      	add	r6, r9
    b1cc:	f8c9 3004 	str.w	r3, [r9, #4]
    b1d0:	6873      	ldr	r3, [r6, #4]
    b1d2:	f043 0301 	orr.w	r3, r3, #1
    b1d6:	6073      	str	r3, [r6, #4]
    b1d8:	4640      	mov	r0, r8
    b1da:	4627      	mov	r7, r4
    b1dc:	f7ff ff5e 	bl	b09c <__malloc_unlock>
    b1e0:	4638      	mov	r0, r7
    b1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1e6:	07c9      	lsls	r1, r1, #31
    b1e8:	d4ad      	bmi.n	b146 <_realloc_r+0x86>
    b1ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b1ee:	eba9 0a03 	sub.w	sl, r9, r3
    b1f2:	f8da 1004 	ldr.w	r1, [sl, #4]
    b1f6:	f021 0103 	bic.w	r1, r1, #3
    b1fa:	e7a0      	b.n	b13e <_realloc_r+0x7e>
    b1fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b200:	4611      	mov	r1, r2
    b202:	f7ff bc95 	b.w	ab30 <_malloc_r>
    b206:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b20a:	eb09 0105 	add.w	r1, r9, r5
    b20e:	f002 0201 	and.w	r2, r2, #1
    b212:	444e      	add	r6, r9
    b214:	f043 0301 	orr.w	r3, r3, #1
    b218:	432a      	orrs	r2, r5
    b21a:	f8c9 2004 	str.w	r2, [r9, #4]
    b21e:	604b      	str	r3, [r1, #4]
    b220:	6873      	ldr	r3, [r6, #4]
    b222:	f043 0301 	orr.w	r3, r3, #1
    b226:	3108      	adds	r1, #8
    b228:	6073      	str	r3, [r6, #4]
    b22a:	4640      	mov	r0, r8
    b22c:	f001 f92a 	bl	c484 <_free_r>
    b230:	e7d2      	b.n	b1d8 <_realloc_r+0x118>
    b232:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b236:	f020 0b03 	bic.w	fp, r0, #3
    b23a:	eb06 0c0b 	add.w	ip, r6, fp
    b23e:	f105 0010 	add.w	r0, r5, #16
    b242:	4584      	cmp	ip, r0
    b244:	da4d      	bge.n	b2e2 <_realloc_r+0x222>
    b246:	07c9      	lsls	r1, r1, #31
    b248:	f53f af7d 	bmi.w	b146 <_realloc_r+0x86>
    b24c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b250:	eba9 0a01 	sub.w	sl, r9, r1
    b254:	f8da 1004 	ldr.w	r1, [sl, #4]
    b258:	f021 0103 	bic.w	r1, r1, #3
    b25c:	448b      	add	fp, r1
    b25e:	44b3      	add	fp, r6
    b260:	4558      	cmp	r0, fp
    b262:	f73f af6c 	bgt.w	b13e <_realloc_r+0x7e>
    b266:	4657      	mov	r7, sl
    b268:	f8da 100c 	ldr.w	r1, [sl, #12]
    b26c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b270:	1f32      	subs	r2, r6, #4
    b272:	2a24      	cmp	r2, #36	; 0x24
    b274:	60c1      	str	r1, [r0, #12]
    b276:	6088      	str	r0, [r1, #8]
    b278:	f200 80db 	bhi.w	b432 <_realloc_r+0x372>
    b27c:	2a13      	cmp	r2, #19
    b27e:	f240 80d6 	bls.w	b42e <_realloc_r+0x36e>
    b282:	6821      	ldr	r1, [r4, #0]
    b284:	f8ca 1008 	str.w	r1, [sl, #8]
    b288:	6861      	ldr	r1, [r4, #4]
    b28a:	f8ca 100c 	str.w	r1, [sl, #12]
    b28e:	2a1b      	cmp	r2, #27
    b290:	f200 80df 	bhi.w	b452 <_realloc_r+0x392>
    b294:	3408      	adds	r4, #8
    b296:	f10a 0210 	add.w	r2, sl, #16
    b29a:	6821      	ldr	r1, [r4, #0]
    b29c:	6011      	str	r1, [r2, #0]
    b29e:	6861      	ldr	r1, [r4, #4]
    b2a0:	6051      	str	r1, [r2, #4]
    b2a2:	68a1      	ldr	r1, [r4, #8]
    b2a4:	6091      	str	r1, [r2, #8]
    b2a6:	eb0a 0105 	add.w	r1, sl, r5
    b2aa:	ebab 0205 	sub.w	r2, fp, r5
    b2ae:	f042 0201 	orr.w	r2, r2, #1
    b2b2:	6099      	str	r1, [r3, #8]
    b2b4:	604a      	str	r2, [r1, #4]
    b2b6:	f8da 3004 	ldr.w	r3, [sl, #4]
    b2ba:	f003 0301 	and.w	r3, r3, #1
    b2be:	432b      	orrs	r3, r5
    b2c0:	4640      	mov	r0, r8
    b2c2:	f8ca 3004 	str.w	r3, [sl, #4]
    b2c6:	f7ff fee9 	bl	b09c <__malloc_unlock>
    b2ca:	e76e      	b.n	b1aa <_realloc_r+0xea>
    b2cc:	6823      	ldr	r3, [r4, #0]
    b2ce:	6003      	str	r3, [r0, #0]
    b2d0:	6863      	ldr	r3, [r4, #4]
    b2d2:	6043      	str	r3, [r0, #4]
    b2d4:	2a1b      	cmp	r2, #27
    b2d6:	d868      	bhi.n	b3aa <_realloc_r+0x2ea>
    b2d8:	f104 0208 	add.w	r2, r4, #8
    b2dc:	f100 0308 	add.w	r3, r0, #8
    b2e0:	e74a      	b.n	b178 <_realloc_r+0xb8>
    b2e2:	eb09 0205 	add.w	r2, r9, r5
    b2e6:	609a      	str	r2, [r3, #8]
    b2e8:	ebac 0305 	sub.w	r3, ip, r5
    b2ec:	f043 0301 	orr.w	r3, r3, #1
    b2f0:	6053      	str	r3, [r2, #4]
    b2f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b2f6:	f003 0301 	and.w	r3, r3, #1
    b2fa:	432b      	orrs	r3, r5
    b2fc:	4640      	mov	r0, r8
    b2fe:	f844 3c04 	str.w	r3, [r4, #-4]
    b302:	f7ff fecb 	bl	b09c <__malloc_unlock>
    b306:	4627      	mov	r7, r4
    b308:	e74f      	b.n	b1aa <_realloc_r+0xea>
    b30a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b30e:	f023 0303 	bic.w	r3, r3, #3
    b312:	441e      	add	r6, r3
    b314:	e751      	b.n	b1ba <_realloc_r+0xfa>
    b316:	4657      	mov	r7, sl
    b318:	f8da 100c 	ldr.w	r1, [sl, #12]
    b31c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b320:	1f32      	subs	r2, r6, #4
    b322:	2a24      	cmp	r2, #36	; 0x24
    b324:	60c1      	str	r1, [r0, #12]
    b326:	6088      	str	r0, [r1, #8]
    b328:	d84c      	bhi.n	b3c4 <_realloc_r+0x304>
    b32a:	2a13      	cmp	r2, #19
    b32c:	d948      	bls.n	b3c0 <_realloc_r+0x300>
    b32e:	6821      	ldr	r1, [r4, #0]
    b330:	f8ca 1008 	str.w	r1, [sl, #8]
    b334:	6861      	ldr	r1, [r4, #4]
    b336:	f8ca 100c 	str.w	r1, [sl, #12]
    b33a:	2a1b      	cmp	r2, #27
    b33c:	d856      	bhi.n	b3ec <_realloc_r+0x32c>
    b33e:	3408      	adds	r4, #8
    b340:	f10a 0210 	add.w	r2, sl, #16
    b344:	461e      	mov	r6, r3
    b346:	6823      	ldr	r3, [r4, #0]
    b348:	6013      	str	r3, [r2, #0]
    b34a:	6863      	ldr	r3, [r4, #4]
    b34c:	6053      	str	r3, [r2, #4]
    b34e:	68a3      	ldr	r3, [r4, #8]
    b350:	6093      	str	r3, [r2, #8]
    b352:	46d1      	mov	r9, sl
    b354:	463c      	mov	r4, r7
    b356:	e730      	b.n	b1ba <_realloc_r+0xfa>
    b358:	4621      	mov	r1, r4
    b35a:	f000 fbb5 	bl	bac8 <memmove>
    b35e:	e711      	b.n	b184 <_realloc_r+0xc4>
    b360:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b364:	4657      	mov	r7, sl
    b366:	60cb      	str	r3, [r1, #12]
    b368:	6099      	str	r1, [r3, #8]
    b36a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b36e:	f8da 300c 	ldr.w	r3, [sl, #12]
    b372:	60cb      	str	r3, [r1, #12]
    b374:	1f32      	subs	r2, r6, #4
    b376:	2a24      	cmp	r2, #36	; 0x24
    b378:	6099      	str	r1, [r3, #8]
    b37a:	d82d      	bhi.n	b3d8 <_realloc_r+0x318>
    b37c:	2a13      	cmp	r2, #19
    b37e:	d929      	bls.n	b3d4 <_realloc_r+0x314>
    b380:	6823      	ldr	r3, [r4, #0]
    b382:	f8ca 3008 	str.w	r3, [sl, #8]
    b386:	6863      	ldr	r3, [r4, #4]
    b388:	f8ca 300c 	str.w	r3, [sl, #12]
    b38c:	2a1b      	cmp	r2, #27
    b38e:	d842      	bhi.n	b416 <_realloc_r+0x356>
    b390:	3408      	adds	r4, #8
    b392:	f10a 0310 	add.w	r3, sl, #16
    b396:	6822      	ldr	r2, [r4, #0]
    b398:	601a      	str	r2, [r3, #0]
    b39a:	6862      	ldr	r2, [r4, #4]
    b39c:	605a      	str	r2, [r3, #4]
    b39e:	68a2      	ldr	r2, [r4, #8]
    b3a0:	609a      	str	r2, [r3, #8]
    b3a2:	4666      	mov	r6, ip
    b3a4:	46d1      	mov	r9, sl
    b3a6:	463c      	mov	r4, r7
    b3a8:	e707      	b.n	b1ba <_realloc_r+0xfa>
    b3aa:	68a3      	ldr	r3, [r4, #8]
    b3ac:	6083      	str	r3, [r0, #8]
    b3ae:	68e3      	ldr	r3, [r4, #12]
    b3b0:	60c3      	str	r3, [r0, #12]
    b3b2:	2a24      	cmp	r2, #36	; 0x24
    b3b4:	d026      	beq.n	b404 <_realloc_r+0x344>
    b3b6:	f104 0210 	add.w	r2, r4, #16
    b3ba:	f100 0310 	add.w	r3, r0, #16
    b3be:	e6db      	b.n	b178 <_realloc_r+0xb8>
    b3c0:	463a      	mov	r2, r7
    b3c2:	e7bf      	b.n	b344 <_realloc_r+0x284>
    b3c4:	4621      	mov	r1, r4
    b3c6:	4638      	mov	r0, r7
    b3c8:	461e      	mov	r6, r3
    b3ca:	46d1      	mov	r9, sl
    b3cc:	f000 fb7c 	bl	bac8 <memmove>
    b3d0:	463c      	mov	r4, r7
    b3d2:	e6f2      	b.n	b1ba <_realloc_r+0xfa>
    b3d4:	463b      	mov	r3, r7
    b3d6:	e7de      	b.n	b396 <_realloc_r+0x2d6>
    b3d8:	4621      	mov	r1, r4
    b3da:	4638      	mov	r0, r7
    b3dc:	4666      	mov	r6, ip
    b3de:	46d1      	mov	r9, sl
    b3e0:	f000 fb72 	bl	bac8 <memmove>
    b3e4:	463c      	mov	r4, r7
    b3e6:	e6e8      	b.n	b1ba <_realloc_r+0xfa>
    b3e8:	20004598 	.word	0x20004598
    b3ec:	68a1      	ldr	r1, [r4, #8]
    b3ee:	f8ca 1010 	str.w	r1, [sl, #16]
    b3f2:	68e1      	ldr	r1, [r4, #12]
    b3f4:	f8ca 1014 	str.w	r1, [sl, #20]
    b3f8:	2a24      	cmp	r2, #36	; 0x24
    b3fa:	d020      	beq.n	b43e <_realloc_r+0x37e>
    b3fc:	3410      	adds	r4, #16
    b3fe:	f10a 0218 	add.w	r2, sl, #24
    b402:	e79f      	b.n	b344 <_realloc_r+0x284>
    b404:	6923      	ldr	r3, [r4, #16]
    b406:	6103      	str	r3, [r0, #16]
    b408:	6961      	ldr	r1, [r4, #20]
    b40a:	6141      	str	r1, [r0, #20]
    b40c:	f104 0218 	add.w	r2, r4, #24
    b410:	f100 0318 	add.w	r3, r0, #24
    b414:	e6b0      	b.n	b178 <_realloc_r+0xb8>
    b416:	68a3      	ldr	r3, [r4, #8]
    b418:	f8ca 3010 	str.w	r3, [sl, #16]
    b41c:	68e3      	ldr	r3, [r4, #12]
    b41e:	f8ca 3014 	str.w	r3, [sl, #20]
    b422:	2a24      	cmp	r2, #36	; 0x24
    b424:	d021      	beq.n	b46a <_realloc_r+0x3aa>
    b426:	3410      	adds	r4, #16
    b428:	f10a 0318 	add.w	r3, sl, #24
    b42c:	e7b3      	b.n	b396 <_realloc_r+0x2d6>
    b42e:	463a      	mov	r2, r7
    b430:	e733      	b.n	b29a <_realloc_r+0x1da>
    b432:	4621      	mov	r1, r4
    b434:	4638      	mov	r0, r7
    b436:	f000 fb47 	bl	bac8 <memmove>
    b43a:	4b16      	ldr	r3, [pc, #88]	; (b494 <_realloc_r+0x3d4>)
    b43c:	e733      	b.n	b2a6 <_realloc_r+0x1e6>
    b43e:	6922      	ldr	r2, [r4, #16]
    b440:	f8ca 2018 	str.w	r2, [sl, #24]
    b444:	6962      	ldr	r2, [r4, #20]
    b446:	f8ca 201c 	str.w	r2, [sl, #28]
    b44a:	3418      	adds	r4, #24
    b44c:	f10a 0220 	add.w	r2, sl, #32
    b450:	e778      	b.n	b344 <_realloc_r+0x284>
    b452:	68a1      	ldr	r1, [r4, #8]
    b454:	f8ca 1010 	str.w	r1, [sl, #16]
    b458:	68e1      	ldr	r1, [r4, #12]
    b45a:	f8ca 1014 	str.w	r1, [sl, #20]
    b45e:	2a24      	cmp	r2, #36	; 0x24
    b460:	d00d      	beq.n	b47e <_realloc_r+0x3be>
    b462:	3410      	adds	r4, #16
    b464:	f10a 0218 	add.w	r2, sl, #24
    b468:	e717      	b.n	b29a <_realloc_r+0x1da>
    b46a:	6923      	ldr	r3, [r4, #16]
    b46c:	f8ca 3018 	str.w	r3, [sl, #24]
    b470:	6963      	ldr	r3, [r4, #20]
    b472:	f8ca 301c 	str.w	r3, [sl, #28]
    b476:	3418      	adds	r4, #24
    b478:	f10a 0320 	add.w	r3, sl, #32
    b47c:	e78b      	b.n	b396 <_realloc_r+0x2d6>
    b47e:	6922      	ldr	r2, [r4, #16]
    b480:	f8ca 2018 	str.w	r2, [sl, #24]
    b484:	6962      	ldr	r2, [r4, #20]
    b486:	f8ca 201c 	str.w	r2, [sl, #28]
    b48a:	3418      	adds	r4, #24
    b48c:	f10a 0220 	add.w	r2, sl, #32
    b490:	e703      	b.n	b29a <_realloc_r+0x1da>
    b492:	bf00      	nop
    b494:	20004598 	.word	0x20004598

0000b498 <_strtol_l.constprop.0>:
    b498:	2b01      	cmp	r3, #1
    b49a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b49e:	d040      	beq.n	b522 <_strtol_l.constprop.0+0x8a>
    b4a0:	2b24      	cmp	r3, #36	; 0x24
    b4a2:	4698      	mov	r8, r3
    b4a4:	d83d      	bhi.n	b522 <_strtol_l.constprop.0+0x8a>
    b4a6:	4d4c      	ldr	r5, [pc, #304]	; (b5d8 <_strtol_l.constprop.0+0x140>)
    b4a8:	468e      	mov	lr, r1
    b4aa:	4676      	mov	r6, lr
    b4ac:	f81e bb01 	ldrb.w	fp, [lr], #1
    b4b0:	f815 400b 	ldrb.w	r4, [r5, fp]
    b4b4:	f014 0408 	ands.w	r4, r4, #8
    b4b8:	d1f7      	bne.n	b4aa <_strtol_l.constprop.0+0x12>
    b4ba:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b4be:	d072      	beq.n	b5a6 <_strtol_l.constprop.0+0x10e>
    b4c0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b4c4:	bf08      	it	eq
    b4c6:	f89e b000 	ldrbeq.w	fp, [lr]
    b4ca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b4ce:	bf08      	it	eq
    b4d0:	f106 0e02 	addeq.w	lr, r6, #2
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	d042      	beq.n	b55e <_strtol_l.constprop.0+0xc6>
    b4d8:	2b10      	cmp	r3, #16
    b4da:	d057      	beq.n	b58c <_strtol_l.constprop.0+0xf4>
    b4dc:	fbb9 f7f8 	udiv	r7, r9, r8
    b4e0:	2500      	movs	r5, #0
    b4e2:	462e      	mov	r6, r5
    b4e4:	fb08 9a17 	mls	sl, r8, r7, r9
    b4e8:	e005      	b.n	b4f6 <_strtol_l.constprop.0+0x5e>
    b4ea:	d033      	beq.n	b554 <_strtol_l.constprop.0+0xbc>
    b4ec:	fb08 c606 	mla	r6, r8, r6, ip
    b4f0:	2501      	movs	r5, #1
    b4f2:	f81e bb01 	ldrb.w	fp, [lr], #1
    b4f6:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b4fa:	f1bc 0f09 	cmp.w	ip, #9
    b4fe:	d906      	bls.n	b50e <_strtol_l.constprop.0+0x76>
    b500:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b504:	f1bc 0f19 	cmp.w	ip, #25
    b508:	d812      	bhi.n	b530 <_strtol_l.constprop.0+0x98>
    b50a:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b50e:	4563      	cmp	r3, ip
    b510:	dd17      	ble.n	b542 <_strtol_l.constprop.0+0xaa>
    b512:	f1b5 3fff 	cmp.w	r5, #4294967295
    b516:	d0ec      	beq.n	b4f2 <_strtol_l.constprop.0+0x5a>
    b518:	42b7      	cmp	r7, r6
    b51a:	d2e6      	bcs.n	b4ea <_strtol_l.constprop.0+0x52>
    b51c:	f04f 35ff 	mov.w	r5, #4294967295
    b520:	e7e7      	b.n	b4f2 <_strtol_l.constprop.0+0x5a>
    b522:	f000 fca3 	bl	be6c <__errno>
    b526:	2316      	movs	r3, #22
    b528:	6003      	str	r3, [r0, #0]
    b52a:	2000      	movs	r0, #0
    b52c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b530:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b534:	f1bc 0f19 	cmp.w	ip, #25
    b538:	d803      	bhi.n	b542 <_strtol_l.constprop.0+0xaa>
    b53a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b53e:	4563      	cmp	r3, ip
    b540:	dce7      	bgt.n	b512 <_strtol_l.constprop.0+0x7a>
    b542:	1c6b      	adds	r3, r5, #1
    b544:	d027      	beq.n	b596 <_strtol_l.constprop.0+0xfe>
    b546:	b98c      	cbnz	r4, b56c <_strtol_l.constprop.0+0xd4>
    b548:	b10a      	cbz	r2, b54e <_strtol_l.constprop.0+0xb6>
    b54a:	bba5      	cbnz	r5, b5b6 <_strtol_l.constprop.0+0x11e>
    b54c:	6011      	str	r1, [r2, #0]
    b54e:	4630      	mov	r0, r6
    b550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b554:	45e2      	cmp	sl, ip
    b556:	dac9      	bge.n	b4ec <_strtol_l.constprop.0+0x54>
    b558:	f04f 35ff 	mov.w	r5, #4294967295
    b55c:	e7c9      	b.n	b4f2 <_strtol_l.constprop.0+0x5a>
    b55e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b562:	d005      	beq.n	b570 <_strtol_l.constprop.0+0xd8>
    b564:	f04f 080a 	mov.w	r8, #10
    b568:	4643      	mov	r3, r8
    b56a:	e7b7      	b.n	b4dc <_strtol_l.constprop.0+0x44>
    b56c:	4276      	negs	r6, r6
    b56e:	e7eb      	b.n	b548 <_strtol_l.constprop.0+0xb0>
    b570:	f89e 3000 	ldrb.w	r3, [lr]
    b574:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b578:	2b58      	cmp	r3, #88	; 0x58
    b57a:	d121      	bne.n	b5c0 <_strtol_l.constprop.0+0x128>
    b57c:	f04f 0810 	mov.w	r8, #16
    b580:	f89e b001 	ldrb.w	fp, [lr, #1]
    b584:	4643      	mov	r3, r8
    b586:	f10e 0e02 	add.w	lr, lr, #2
    b58a:	e7a7      	b.n	b4dc <_strtol_l.constprop.0+0x44>
    b58c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b590:	d01a      	beq.n	b5c8 <_strtol_l.constprop.0+0x130>
    b592:	4698      	mov	r8, r3
    b594:	e7a2      	b.n	b4dc <_strtol_l.constprop.0+0x44>
    b596:	2322      	movs	r3, #34	; 0x22
    b598:	6003      	str	r3, [r0, #0]
    b59a:	b172      	cbz	r2, b5ba <_strtol_l.constprop.0+0x122>
    b59c:	f10e 31ff 	add.w	r1, lr, #4294967295
    b5a0:	464e      	mov	r6, r9
    b5a2:	6011      	str	r1, [r2, #0]
    b5a4:	e7d3      	b.n	b54e <_strtol_l.constprop.0+0xb6>
    b5a6:	f89e b000 	ldrb.w	fp, [lr]
    b5aa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b5ae:	f106 0e02 	add.w	lr, r6, #2
    b5b2:	2401      	movs	r4, #1
    b5b4:	e78e      	b.n	b4d4 <_strtol_l.constprop.0+0x3c>
    b5b6:	46b1      	mov	r9, r6
    b5b8:	e7f0      	b.n	b59c <_strtol_l.constprop.0+0x104>
    b5ba:	464e      	mov	r6, r9
    b5bc:	4630      	mov	r0, r6
    b5be:	e7c7      	b.n	b550 <_strtol_l.constprop.0+0xb8>
    b5c0:	f04f 0808 	mov.w	r8, #8
    b5c4:	4643      	mov	r3, r8
    b5c6:	e789      	b.n	b4dc <_strtol_l.constprop.0+0x44>
    b5c8:	f89e 5000 	ldrb.w	r5, [lr]
    b5cc:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b5d0:	2d58      	cmp	r5, #88	; 0x58
    b5d2:	d0d3      	beq.n	b57c <_strtol_l.constprop.0+0xe4>
    b5d4:	4698      	mov	r8, r3
    b5d6:	e781      	b.n	b4dc <_strtol_l.constprop.0+0x44>
    b5d8:	20000b91 	.word	0x20000b91

0000b5dc <strtol>:
    b5dc:	b410      	push	{r4}
    b5de:	4c05      	ldr	r4, [pc, #20]	; (b5f4 <strtol+0x18>)
    b5e0:	4684      	mov	ip, r0
    b5e2:	4613      	mov	r3, r2
    b5e4:	6820      	ldr	r0, [r4, #0]
    b5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b5ea:	460a      	mov	r2, r1
    b5ec:	4661      	mov	r1, ip
    b5ee:	f7ff bf53 	b.w	b498 <_strtol_l.constprop.0>
    b5f2:	bf00      	nop
    b5f4:	200049b4 	.word	0x200049b4

0000b5f8 <_strtoul_l.constprop.0>:
    b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5fc:	4607      	mov	r7, r0
    b5fe:	484c      	ldr	r0, [pc, #304]	; (b730 <_strtoul_l.constprop.0+0x138>)
    b600:	460e      	mov	r6, r1
    b602:	4635      	mov	r5, r6
    b604:	f816 eb01 	ldrb.w	lr, [r6], #1
    b608:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b60c:	f01c 0c08 	ands.w	ip, ip, #8
    b610:	d1f7      	bne.n	b602 <_strtoul_l.constprop.0+0xa>
    b612:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b616:	d05a      	beq.n	b6ce <_strtoul_l.constprop.0+0xd6>
    b618:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b61c:	bf03      	ittte	eq
    b61e:	f896 e000 	ldrbeq.w	lr, [r6]
    b622:	4664      	moveq	r4, ip
    b624:	1cae      	addeq	r6, r5, #2
    b626:	4664      	movne	r4, ip
    b628:	b15b      	cbz	r3, b642 <_strtoul_l.constprop.0+0x4a>
    b62a:	2b10      	cmp	r3, #16
    b62c:	d054      	beq.n	b6d8 <_strtoul_l.constprop.0+0xe0>
    b62e:	f04f 38ff 	mov.w	r8, #4294967295
    b632:	fbb8 f8f3 	udiv	r8, r8, r3
    b636:	fb03 fa08 	mul.w	sl, r3, r8
    b63a:	ea6f 0a0a 	mvn.w	sl, sl
    b63e:	4699      	mov	r9, r3
    b640:	e008      	b.n	b654 <_strtoul_l.constprop.0+0x5c>
    b642:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b646:	d05a      	beq.n	b6fe <_strtoul_l.constprop.0+0x106>
    b648:	230a      	movs	r3, #10
    b64a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b734 <_strtoul_l.constprop.0+0x13c>
    b64e:	f04f 0a05 	mov.w	sl, #5
    b652:	4699      	mov	r9, r3
    b654:	2500      	movs	r5, #0
    b656:	4628      	mov	r0, r5
    b658:	e005      	b.n	b666 <_strtoul_l.constprop.0+0x6e>
    b65a:	d02c      	beq.n	b6b6 <_strtoul_l.constprop.0+0xbe>
    b65c:	fb09 c000 	mla	r0, r9, r0, ip
    b660:	2501      	movs	r5, #1
    b662:	f816 eb01 	ldrb.w	lr, [r6], #1
    b666:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b66a:	f1bc 0f09 	cmp.w	ip, #9
    b66e:	d906      	bls.n	b67e <_strtoul_l.constprop.0+0x86>
    b670:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b674:	f1bc 0f19 	cmp.w	ip, #25
    b678:	d80b      	bhi.n	b692 <_strtoul_l.constprop.0+0x9a>
    b67a:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b67e:	4563      	cmp	r3, ip
    b680:	dd10      	ble.n	b6a4 <_strtoul_l.constprop.0+0xac>
    b682:	f1b5 3fff 	cmp.w	r5, #4294967295
    b686:	d0ec      	beq.n	b662 <_strtoul_l.constprop.0+0x6a>
    b688:	4540      	cmp	r0, r8
    b68a:	d9e6      	bls.n	b65a <_strtoul_l.constprop.0+0x62>
    b68c:	f04f 35ff 	mov.w	r5, #4294967295
    b690:	e7e7      	b.n	b662 <_strtoul_l.constprop.0+0x6a>
    b692:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b696:	f1bc 0f19 	cmp.w	ip, #25
    b69a:	d803      	bhi.n	b6a4 <_strtoul_l.constprop.0+0xac>
    b69c:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b6a0:	4563      	cmp	r3, ip
    b6a2:	dcee      	bgt.n	b682 <_strtoul_l.constprop.0+0x8a>
    b6a4:	1c6b      	adds	r3, r5, #1
    b6a6:	d00b      	beq.n	b6c0 <_strtoul_l.constprop.0+0xc8>
    b6a8:	b104      	cbz	r4, b6ac <_strtoul_l.constprop.0+0xb4>
    b6aa:	4240      	negs	r0, r0
    b6ac:	b10a      	cbz	r2, b6b2 <_strtoul_l.constprop.0+0xba>
    b6ae:	b965      	cbnz	r5, b6ca <_strtoul_l.constprop.0+0xd2>
    b6b0:	6011      	str	r1, [r2, #0]
    b6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6b6:	45d4      	cmp	ip, sl
    b6b8:	ddd0      	ble.n	b65c <_strtoul_l.constprop.0+0x64>
    b6ba:	f04f 35ff 	mov.w	r5, #4294967295
    b6be:	e7d0      	b.n	b662 <_strtoul_l.constprop.0+0x6a>
    b6c0:	2322      	movs	r3, #34	; 0x22
    b6c2:	603b      	str	r3, [r7, #0]
    b6c4:	4628      	mov	r0, r5
    b6c6:	2a00      	cmp	r2, #0
    b6c8:	d0f3      	beq.n	b6b2 <_strtoul_l.constprop.0+0xba>
    b6ca:	1e71      	subs	r1, r6, #1
    b6cc:	e7f0      	b.n	b6b0 <_strtoul_l.constprop.0+0xb8>
    b6ce:	f896 e000 	ldrb.w	lr, [r6]
    b6d2:	2401      	movs	r4, #1
    b6d4:	1cae      	adds	r6, r5, #2
    b6d6:	e7a7      	b.n	b628 <_strtoul_l.constprop.0+0x30>
    b6d8:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b6dc:	d121      	bne.n	b722 <_strtoul_l.constprop.0+0x12a>
    b6de:	7830      	ldrb	r0, [r6, #0]
    b6e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b6e4:	2858      	cmp	r0, #88	; 0x58
    b6e6:	d116      	bne.n	b716 <_strtoul_l.constprop.0+0x11e>
    b6e8:	f04f 0910 	mov.w	r9, #16
    b6ec:	f896 e001 	ldrb.w	lr, [r6, #1]
    b6f0:	f04f 0a0f 	mov.w	sl, #15
    b6f4:	3602      	adds	r6, #2
    b6f6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b6fa:	464b      	mov	r3, r9
    b6fc:	e7aa      	b.n	b654 <_strtoul_l.constprop.0+0x5c>
    b6fe:	7833      	ldrb	r3, [r6, #0]
    b700:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b704:	2b58      	cmp	r3, #88	; 0x58
    b706:	d0ef      	beq.n	b6e8 <_strtoul_l.constprop.0+0xf0>
    b708:	2308      	movs	r3, #8
    b70a:	f04f 0a07 	mov.w	sl, #7
    b70e:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b712:	4699      	mov	r9, r3
    b714:	e79e      	b.n	b654 <_strtoul_l.constprop.0+0x5c>
    b716:	4699      	mov	r9, r3
    b718:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b71c:	f04f 0a0f 	mov.w	sl, #15
    b720:	e798      	b.n	b654 <_strtoul_l.constprop.0+0x5c>
    b722:	f04f 0a0f 	mov.w	sl, #15
    b726:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b72a:	4699      	mov	r9, r3
    b72c:	e792      	b.n	b654 <_strtoul_l.constprop.0+0x5c>
    b72e:	bf00      	nop
    b730:	20000b91 	.word	0x20000b91
    b734:	19999999 	.word	0x19999999

0000b738 <strtoul>:
    b738:	b410      	push	{r4}
    b73a:	4c05      	ldr	r4, [pc, #20]	; (b750 <strtoul+0x18>)
    b73c:	4684      	mov	ip, r0
    b73e:	4613      	mov	r3, r2
    b740:	6820      	ldr	r0, [r4, #0]
    b742:	f85d 4b04 	ldr.w	r4, [sp], #4
    b746:	460a      	mov	r2, r1
    b748:	4661      	mov	r1, ip
    b74a:	f7ff bf55 	b.w	b5f8 <_strtoul_l.constprop.0>
    b74e:	bf00      	nop
    b750:	200049b4 	.word	0x200049b4

0000b754 <__utoa>:
    b754:	b5f0      	push	{r4, r5, r6, r7, lr}
    b756:	4f25      	ldr	r7, [pc, #148]	; (b7ec <__utoa+0x98>)
    b758:	f1a2 0e02 	sub.w	lr, r2, #2
    b75c:	4616      	mov	r6, r2
    b75e:	4605      	mov	r5, r0
    b760:	460c      	mov	r4, r1
    b762:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    b764:	b08b      	sub	sp, #44	; 0x2c
    b766:	46ec      	mov	ip, sp
    b768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b76c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    b76e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b772:	e897 0003 	ldmia.w	r7, {r0, r1}
    b776:	f84c 0b04 	str.w	r0, [ip], #4
    b77a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    b77e:	f88c 1000 	strb.w	r1, [ip]
    b782:	d82e      	bhi.n	b7e2 <__utoa+0x8e>
    b784:	f104 3eff 	add.w	lr, r4, #4294967295
    b788:	4670      	mov	r0, lr
    b78a:	f04f 0c00 	mov.w	ip, #0
    b78e:	fbb5 f2f6 	udiv	r2, r5, r6
    b792:	fb06 5312 	mls	r3, r6, r2, r5
    b796:	3328      	adds	r3, #40	; 0x28
    b798:	446b      	add	r3, sp
    b79a:	4661      	mov	r1, ip
    b79c:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    b7a0:	f800 cf01 	strb.w	ip, [r0, #1]!
    b7a4:	462b      	mov	r3, r5
    b7a6:	429e      	cmp	r6, r3
    b7a8:	f101 0c01 	add.w	ip, r1, #1
    b7ac:	4615      	mov	r5, r2
    b7ae:	d9ee      	bls.n	b78e <__utoa+0x3a>
    b7b0:	2300      	movs	r3, #0
    b7b2:	f804 300c 	strb.w	r3, [r4, ip]
    b7b6:	b189      	cbz	r1, b7dc <__utoa+0x88>
    b7b8:	44a4      	add	ip, r4
    b7ba:	4672      	mov	r2, lr
    b7bc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    b7c0:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    b7c4:	f88e 5000 	strb.w	r5, [lr]
    b7c8:	eba4 030e 	sub.w	r3, r4, lr
    b7cc:	3202      	adds	r2, #2
    b7ce:	3b01      	subs	r3, #1
    b7d0:	1b12      	subs	r2, r2, r4
    b7d2:	440b      	add	r3, r1
    b7d4:	429a      	cmp	r2, r3
    b7d6:	f88c 0000 	strb.w	r0, [ip]
    b7da:	dbee      	blt.n	b7ba <__utoa+0x66>
    b7dc:	4620      	mov	r0, r4
    b7de:	b00b      	add	sp, #44	; 0x2c
    b7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7e2:	2300      	movs	r3, #0
    b7e4:	4618      	mov	r0, r3
    b7e6:	7023      	strb	r3, [r4, #0]
    b7e8:	b00b      	add	sp, #44	; 0x2c
    b7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7ec:	20000b68 	.word	0x20000b68

0000b7f0 <utoa>:
    b7f0:	f7ff bfb0 	b.w	b754 <__utoa>

0000b7f4 <__cxa_atexit>:
    b7f4:	4613      	mov	r3, r2
    b7f6:	460a      	mov	r2, r1
    b7f8:	4601      	mov	r1, r0
    b7fa:	2002      	movs	r0, #2
    b7fc:	f000 bdae 	b.w	c35c <__register_exitproc>

0000b800 <isprint>:
    b800:	4b02      	ldr	r3, [pc, #8]	; (b80c <isprint+0xc>)
    b802:	4418      	add	r0, r3
    b804:	7840      	ldrb	r0, [r0, #1]
    b806:	f000 0097 	and.w	r0, r0, #151	; 0x97
    b80a:	4770      	bx	lr
    b80c:	20000b90 	.word	0x20000b90

0000b810 <isspace>:
    b810:	4b02      	ldr	r3, [pc, #8]	; (b81c <isspace+0xc>)
    b812:	4418      	add	r0, r3
    b814:	7840      	ldrb	r0, [r0, #1]
    b816:	f000 0008 	and.w	r0, r0, #8
    b81a:	4770      	bx	lr
    b81c:	20000b90 	.word	0x20000b90

0000b820 <tolower>:
    b820:	4b03      	ldr	r3, [pc, #12]	; (b830 <tolower+0x10>)
    b822:	5c1b      	ldrb	r3, [r3, r0]
    b824:	f003 0303 	and.w	r3, r3, #3
    b828:	2b01      	cmp	r3, #1
    b82a:	bf08      	it	eq
    b82c:	3020      	addeq	r0, #32
    b82e:	4770      	bx	lr
    b830:	20000b91 	.word	0x20000b91

0000b834 <stdio_exit_handler>:
    b834:	4a02      	ldr	r2, [pc, #8]	; (b840 <stdio_exit_handler+0xc>)
    b836:	4903      	ldr	r1, [pc, #12]	; (b844 <stdio_exit_handler+0x10>)
    b838:	4803      	ldr	r0, [pc, #12]	; (b848 <stdio_exit_handler+0x14>)
    b83a:	f000 b8bb 	b.w	b9b4 <_fwalk_sglue>
    b83e:	bf00      	nop
    b840:	200049a8 	.word	0x200049a8
    b844:	0000e995 	.word	0x0000e995
    b848:	200012e8 	.word	0x200012e8

0000b84c <cleanup_stdio>:
    b84c:	4b0c      	ldr	r3, [pc, #48]	; (b880 <cleanup_stdio+0x34>)
    b84e:	6841      	ldr	r1, [r0, #4]
    b850:	4299      	cmp	r1, r3
    b852:	b510      	push	{r4, lr}
    b854:	4604      	mov	r4, r0
    b856:	d001      	beq.n	b85c <cleanup_stdio+0x10>
    b858:	f003 f89c 	bl	e994 <_fclose_r>
    b85c:	68a1      	ldr	r1, [r4, #8]
    b85e:	4b09      	ldr	r3, [pc, #36]	; (b884 <cleanup_stdio+0x38>)
    b860:	4299      	cmp	r1, r3
    b862:	d002      	beq.n	b86a <cleanup_stdio+0x1e>
    b864:	4620      	mov	r0, r4
    b866:	f003 f895 	bl	e994 <_fclose_r>
    b86a:	68e1      	ldr	r1, [r4, #12]
    b86c:	4b06      	ldr	r3, [pc, #24]	; (b888 <cleanup_stdio+0x3c>)
    b86e:	4299      	cmp	r1, r3
    b870:	d004      	beq.n	b87c <cleanup_stdio+0x30>
    b872:	4620      	mov	r0, r4
    b874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b878:	f003 b88c 	b.w	e994 <_fclose_r>
    b87c:	bd10      	pop	{r4, pc}
    b87e:	bf00      	nop
    b880:	2000528c 	.word	0x2000528c
    b884:	200052f4 	.word	0x200052f4
    b888:	2000535c 	.word	0x2000535c

0000b88c <global_stdio_init.part.0>:
    b88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b890:	4c2a      	ldr	r4, [pc, #168]	; (b93c <global_stdio_init.part.0+0xb0>)
    b892:	4b2b      	ldr	r3, [pc, #172]	; (b940 <global_stdio_init.part.0+0xb4>)
    b894:	482b      	ldr	r0, [pc, #172]	; (b944 <global_stdio_init.part.0+0xb8>)
    b896:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b958 <global_stdio_init.part.0+0xcc>
    b89a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b95c <global_stdio_init.part.0+0xd0>
    b89e:	4f2a      	ldr	r7, [pc, #168]	; (b948 <global_stdio_init.part.0+0xbc>)
    b8a0:	6018      	str	r0, [r3, #0]
    b8a2:	2500      	movs	r5, #0
    b8a4:	2304      	movs	r3, #4
    b8a6:	2208      	movs	r2, #8
    b8a8:	4629      	mov	r1, r5
    b8aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b8ae:	4e27      	ldr	r6, [pc, #156]	; (b94c <global_stdio_init.part.0+0xc0>)
    b8b0:	6665      	str	r5, [r4, #100]	; 0x64
    b8b2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b8b6:	e9c4 5500 	strd	r5, r5, [r4]
    b8ba:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b8be:	61a5      	str	r5, [r4, #24]
    b8c0:	f000 f97e 	bl	bbc0 <memset>
    b8c4:	4b22      	ldr	r3, [pc, #136]	; (b950 <global_stdio_init.part.0+0xc4>)
    b8c6:	6763      	str	r3, [r4, #116]	; 0x74
    b8c8:	2208      	movs	r2, #8
    b8ca:	4629      	mov	r1, r5
    b8cc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b8d0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b8d4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b8d8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b8dc:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b8e0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b8e4:	6725      	str	r5, [r4, #112]	; 0x70
    b8e6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b8ea:	62e6      	str	r6, [r4, #44]	; 0x2c
    b8ec:	f000 f968 	bl	bbc0 <memset>
    b8f0:	4b18      	ldr	r3, [pc, #96]	; (b954 <global_stdio_init.part.0+0xc8>)
    b8f2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b8f6:	4629      	mov	r1, r5
    b8f8:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b8fc:	2208      	movs	r2, #8
    b8fe:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b902:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b906:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b90a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b90e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b912:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b916:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b91a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b91e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b922:	f000 f94d 	bl	bbc0 <memset>
    b926:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b92a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b92e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b932:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b93a:	bf00      	nop
    b93c:	2000528c 	.word	0x2000528c
    b940:	200053c4 	.word	0x200053c4
    b944:	0000b835 	.word	0x0000b835
    b948:	0000baa1 	.word	0x0000baa1
    b94c:	0000bac1 	.word	0x0000bac1
    b950:	00010009 	.word	0x00010009
    b954:	00020012 	.word	0x00020012
    b958:	0000ba3d 	.word	0x0000ba3d
    b95c:	0000ba61 	.word	0x0000ba61

0000b960 <__sinit>:
    b960:	b510      	push	{r4, lr}
    b962:	4604      	mov	r4, r0
    b964:	480a      	ldr	r0, [pc, #40]	; (b990 <__sinit+0x30>)
    b966:	f000 faaf 	bl	bec8 <__retarget_lock_acquire_recursive>
    b96a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b96c:	b923      	cbnz	r3, b978 <__sinit+0x18>
    b96e:	4b09      	ldr	r3, [pc, #36]	; (b994 <__sinit+0x34>)
    b970:	4a09      	ldr	r2, [pc, #36]	; (b998 <__sinit+0x38>)
    b972:	681b      	ldr	r3, [r3, #0]
    b974:	6362      	str	r2, [r4, #52]	; 0x34
    b976:	b123      	cbz	r3, b982 <__sinit+0x22>
    b978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b97c:	4804      	ldr	r0, [pc, #16]	; (b990 <__sinit+0x30>)
    b97e:	f000 baa5 	b.w	becc <__retarget_lock_release_recursive>
    b982:	f7ff ff83 	bl	b88c <global_stdio_init.part.0>
    b986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b98a:	4801      	ldr	r0, [pc, #4]	; (b990 <__sinit+0x30>)
    b98c:	f000 ba9e 	b.w	becc <__retarget_lock_release_recursive>
    b990:	20005254 	.word	0x20005254
    b994:	200053c4 	.word	0x200053c4
    b998:	0000b84d 	.word	0x0000b84d

0000b99c <__sfp_lock_acquire>:
    b99c:	4801      	ldr	r0, [pc, #4]	; (b9a4 <__sfp_lock_acquire+0x8>)
    b99e:	f000 ba93 	b.w	bec8 <__retarget_lock_acquire_recursive>
    b9a2:	bf00      	nop
    b9a4:	20005254 	.word	0x20005254

0000b9a8 <__sfp_lock_release>:
    b9a8:	4801      	ldr	r0, [pc, #4]	; (b9b0 <__sfp_lock_release+0x8>)
    b9aa:	f000 ba8f 	b.w	becc <__retarget_lock_release_recursive>
    b9ae:	bf00      	nop
    b9b0:	20005254 	.word	0x20005254

0000b9b4 <_fwalk_sglue>:
    b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b8:	4680      	mov	r8, r0
    b9ba:	460f      	mov	r7, r1
    b9bc:	4616      	mov	r6, r2
    b9be:	f04f 0900 	mov.w	r9, #0
    b9c2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b9c6:	3d01      	subs	r5, #1
    b9c8:	d411      	bmi.n	b9ee <_fwalk_sglue+0x3a>
    b9ca:	89a3      	ldrh	r3, [r4, #12]
    b9cc:	2b01      	cmp	r3, #1
    b9ce:	f105 35ff 	add.w	r5, r5, #4294967295
    b9d2:	d908      	bls.n	b9e6 <_fwalk_sglue+0x32>
    b9d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b9d8:	3301      	adds	r3, #1
    b9da:	4621      	mov	r1, r4
    b9dc:	d003      	beq.n	b9e6 <_fwalk_sglue+0x32>
    b9de:	4640      	mov	r0, r8
    b9e0:	47b8      	blx	r7
    b9e2:	ea49 0900 	orr.w	r9, r9, r0
    b9e6:	1c6b      	adds	r3, r5, #1
    b9e8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b9ec:	d1ed      	bne.n	b9ca <_fwalk_sglue+0x16>
    b9ee:	6836      	ldr	r6, [r6, #0]
    b9f0:	2e00      	cmp	r6, #0
    b9f2:	d1e6      	bne.n	b9c2 <_fwalk_sglue+0xe>
    b9f4:	4648      	mov	r0, r9
    b9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9fa:	bf00      	nop

0000b9fc <sprintf>:
    b9fc:	b40e      	push	{r1, r2, r3}
    b9fe:	b510      	push	{r4, lr}
    ba00:	b09d      	sub	sp, #116	; 0x74
    ba02:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ba06:	ab1f      	add	r3, sp, #124	; 0x7c
    ba08:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ba0c:	9104      	str	r1, [sp, #16]
    ba0e:	4909      	ldr	r1, [pc, #36]	; (ba34 <sprintf+0x38>)
    ba10:	f853 2b04 	ldr.w	r2, [r3], #4
    ba14:	9002      	str	r0, [sp, #8]
    ba16:	4c08      	ldr	r4, [pc, #32]	; (ba38 <sprintf+0x3c>)
    ba18:	6808      	ldr	r0, [r1, #0]
    ba1a:	9301      	str	r3, [sp, #4]
    ba1c:	a902      	add	r1, sp, #8
    ba1e:	9405      	str	r4, [sp, #20]
    ba20:	f001 fa16 	bl	ce50 <_svfprintf_r>
    ba24:	9b02      	ldr	r3, [sp, #8]
    ba26:	2200      	movs	r2, #0
    ba28:	701a      	strb	r2, [r3, #0]
    ba2a:	b01d      	add	sp, #116	; 0x74
    ba2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba30:	b003      	add	sp, #12
    ba32:	4770      	bx	lr
    ba34:	200049b4 	.word	0x200049b4
    ba38:	ffff0208 	.word	0xffff0208

0000ba3c <__sread>:
    ba3c:	b510      	push	{r4, lr}
    ba3e:	460c      	mov	r4, r1
    ba40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ba44:	f000 f9d4 	bl	bdf0 <_read_r>
    ba48:	2800      	cmp	r0, #0
    ba4a:	db03      	blt.n	ba54 <__sread+0x18>
    ba4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ba4e:	4403      	add	r3, r0
    ba50:	6523      	str	r3, [r4, #80]	; 0x50
    ba52:	bd10      	pop	{r4, pc}
    ba54:	89a3      	ldrh	r3, [r4, #12]
    ba56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ba5a:	81a3      	strh	r3, [r4, #12]
    ba5c:	bd10      	pop	{r4, pc}
    ba5e:	bf00      	nop

0000ba60 <__swrite>:
    ba60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba64:	460c      	mov	r4, r1
    ba66:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ba6a:	461f      	mov	r7, r3
    ba6c:	05cb      	lsls	r3, r1, #23
    ba6e:	4605      	mov	r5, r0
    ba70:	4616      	mov	r6, r2
    ba72:	d40b      	bmi.n	ba8c <__swrite+0x2c>
    ba74:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    ba78:	81a1      	strh	r1, [r4, #12]
    ba7a:	463b      	mov	r3, r7
    ba7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ba80:	4632      	mov	r2, r6
    ba82:	4628      	mov	r0, r5
    ba84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba88:	f000 b9da 	b.w	be40 <_write_r>
    ba8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ba90:	2302      	movs	r3, #2
    ba92:	2200      	movs	r2, #0
    ba94:	f000 f996 	bl	bdc4 <_lseek_r>
    ba98:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    ba9c:	e7ea      	b.n	ba74 <__swrite+0x14>
    ba9e:	bf00      	nop

0000baa0 <__sseek>:
    baa0:	b510      	push	{r4, lr}
    baa2:	460c      	mov	r4, r1
    baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    baa8:	f000 f98c 	bl	bdc4 <_lseek_r>
    baac:	89a3      	ldrh	r3, [r4, #12]
    baae:	1c42      	adds	r2, r0, #1
    bab0:	bf0e      	itee	eq
    bab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    bab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    baba:	6520      	strne	r0, [r4, #80]	; 0x50
    babc:	81a3      	strh	r3, [r4, #12]
    babe:	bd10      	pop	{r4, pc}

0000bac0 <__sclose>:
    bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bac4:	f000 b96c 	b.w	bda0 <_close_r>

0000bac8 <memmove>:
    bac8:	4288      	cmp	r0, r1
    baca:	d90d      	bls.n	bae8 <memmove+0x20>
    bacc:	188b      	adds	r3, r1, r2
    bace:	4283      	cmp	r3, r0
    bad0:	d90a      	bls.n	bae8 <memmove+0x20>
    bad2:	eb00 0c02 	add.w	ip, r0, r2
    bad6:	b1ba      	cbz	r2, bb08 <memmove+0x40>
    bad8:	4662      	mov	r2, ip
    bada:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    bade:	f802 cd01 	strb.w	ip, [r2, #-1]!
    bae2:	4299      	cmp	r1, r3
    bae4:	d1f9      	bne.n	bada <memmove+0x12>
    bae6:	4770      	bx	lr
    bae8:	2a0f      	cmp	r2, #15
    baea:	d80e      	bhi.n	bb0a <memmove+0x42>
    baec:	4603      	mov	r3, r0
    baee:	f102 3cff 	add.w	ip, r2, #4294967295
    baf2:	b14a      	cbz	r2, bb08 <memmove+0x40>
    baf4:	f10c 0c01 	add.w	ip, ip, #1
    baf8:	3b01      	subs	r3, #1
    bafa:	448c      	add	ip, r1
    bafc:	f811 2b01 	ldrb.w	r2, [r1], #1
    bb00:	f803 2f01 	strb.w	r2, [r3, #1]!
    bb04:	4561      	cmp	r1, ip
    bb06:	d1f9      	bne.n	bafc <memmove+0x34>
    bb08:	4770      	bx	lr
    bb0a:	ea40 0301 	orr.w	r3, r0, r1
    bb0e:	079b      	lsls	r3, r3, #30
    bb10:	d150      	bne.n	bbb4 <memmove+0xec>
    bb12:	f1a2 0310 	sub.w	r3, r2, #16
    bb16:	b570      	push	{r4, r5, r6, lr}
    bb18:	f101 0c20 	add.w	ip, r1, #32
    bb1c:	f023 050f 	bic.w	r5, r3, #15
    bb20:	f101 0e10 	add.w	lr, r1, #16
    bb24:	f100 0410 	add.w	r4, r0, #16
    bb28:	44ac      	add	ip, r5
    bb2a:	091b      	lsrs	r3, r3, #4
    bb2c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    bb30:	f844 5c10 	str.w	r5, [r4, #-16]
    bb34:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    bb38:	f844 5c0c 	str.w	r5, [r4, #-12]
    bb3c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    bb40:	f844 5c08 	str.w	r5, [r4, #-8]
    bb44:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    bb48:	f844 5c04 	str.w	r5, [r4, #-4]
    bb4c:	f10e 0e10 	add.w	lr, lr, #16
    bb50:	45e6      	cmp	lr, ip
    bb52:	f104 0410 	add.w	r4, r4, #16
    bb56:	d1e9      	bne.n	bb2c <memmove+0x64>
    bb58:	3301      	adds	r3, #1
    bb5a:	f012 0f0c 	tst.w	r2, #12
    bb5e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    bb62:	f002 040f 	and.w	r4, r2, #15
    bb66:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    bb6a:	d027      	beq.n	bbbc <memmove+0xf4>
    bb6c:	3c04      	subs	r4, #4
    bb6e:	f024 0603 	bic.w	r6, r4, #3
    bb72:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    bb76:	441e      	add	r6, r3
    bb78:	1f1c      	subs	r4, r3, #4
    bb7a:	468e      	mov	lr, r1
    bb7c:	f85e 5b04 	ldr.w	r5, [lr], #4
    bb80:	f844 5f04 	str.w	r5, [r4, #4]!
    bb84:	42b4      	cmp	r4, r6
    bb86:	d1f9      	bne.n	bb7c <memmove+0xb4>
    bb88:	f10c 0401 	add.w	r4, ip, #1
    bb8c:	f002 0203 	and.w	r2, r2, #3
    bb90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    bb94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bb98:	f102 3cff 	add.w	ip, r2, #4294967295
    bb9c:	b14a      	cbz	r2, bbb2 <memmove+0xea>
    bb9e:	f10c 0c01 	add.w	ip, ip, #1
    bba2:	3b01      	subs	r3, #1
    bba4:	448c      	add	ip, r1
    bba6:	f811 2b01 	ldrb.w	r2, [r1], #1
    bbaa:	f803 2f01 	strb.w	r2, [r3, #1]!
    bbae:	4561      	cmp	r1, ip
    bbb0:	d1f9      	bne.n	bba6 <memmove+0xde>
    bbb2:	bd70      	pop	{r4, r5, r6, pc}
    bbb4:	f102 3cff 	add.w	ip, r2, #4294967295
    bbb8:	4603      	mov	r3, r0
    bbba:	e79b      	b.n	baf4 <memmove+0x2c>
    bbbc:	4622      	mov	r2, r4
    bbbe:	e7eb      	b.n	bb98 <memmove+0xd0>

0000bbc0 <memset>:
    bbc0:	0783      	lsls	r3, r0, #30
    bbc2:	b530      	push	{r4, r5, lr}
    bbc4:	d048      	beq.n	bc58 <memset+0x98>
    bbc6:	1e54      	subs	r4, r2, #1
    bbc8:	2a00      	cmp	r2, #0
    bbca:	d03f      	beq.n	bc4c <memset+0x8c>
    bbcc:	b2ca      	uxtb	r2, r1
    bbce:	4603      	mov	r3, r0
    bbd0:	e001      	b.n	bbd6 <memset+0x16>
    bbd2:	3c01      	subs	r4, #1
    bbd4:	d33a      	bcc.n	bc4c <memset+0x8c>
    bbd6:	f803 2b01 	strb.w	r2, [r3], #1
    bbda:	079d      	lsls	r5, r3, #30
    bbdc:	d1f9      	bne.n	bbd2 <memset+0x12>
    bbde:	2c03      	cmp	r4, #3
    bbe0:	d92d      	bls.n	bc3e <memset+0x7e>
    bbe2:	b2cd      	uxtb	r5, r1
    bbe4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    bbe8:	2c0f      	cmp	r4, #15
    bbea:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    bbee:	d936      	bls.n	bc5e <memset+0x9e>
    bbf0:	f1a4 0210 	sub.w	r2, r4, #16
    bbf4:	f022 0c0f 	bic.w	ip, r2, #15
    bbf8:	f103 0e20 	add.w	lr, r3, #32
    bbfc:	44e6      	add	lr, ip
    bbfe:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    bc02:	f103 0210 	add.w	r2, r3, #16
    bc06:	e942 5504 	strd	r5, r5, [r2, #-16]
    bc0a:	e942 5502 	strd	r5, r5, [r2, #-8]
    bc0e:	3210      	adds	r2, #16
    bc10:	4572      	cmp	r2, lr
    bc12:	d1f8      	bne.n	bc06 <memset+0x46>
    bc14:	f10c 0201 	add.w	r2, ip, #1
    bc18:	f014 0f0c 	tst.w	r4, #12
    bc1c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    bc20:	f004 0c0f 	and.w	ip, r4, #15
    bc24:	d013      	beq.n	bc4e <memset+0x8e>
    bc26:	f1ac 0304 	sub.w	r3, ip, #4
    bc2a:	f023 0303 	bic.w	r3, r3, #3
    bc2e:	3304      	adds	r3, #4
    bc30:	4413      	add	r3, r2
    bc32:	f842 5b04 	str.w	r5, [r2], #4
    bc36:	4293      	cmp	r3, r2
    bc38:	d1fb      	bne.n	bc32 <memset+0x72>
    bc3a:	f00c 0403 	and.w	r4, ip, #3
    bc3e:	b12c      	cbz	r4, bc4c <memset+0x8c>
    bc40:	b2c9      	uxtb	r1, r1
    bc42:	441c      	add	r4, r3
    bc44:	f803 1b01 	strb.w	r1, [r3], #1
    bc48:	429c      	cmp	r4, r3
    bc4a:	d1fb      	bne.n	bc44 <memset+0x84>
    bc4c:	bd30      	pop	{r4, r5, pc}
    bc4e:	4664      	mov	r4, ip
    bc50:	4613      	mov	r3, r2
    bc52:	2c00      	cmp	r4, #0
    bc54:	d1f4      	bne.n	bc40 <memset+0x80>
    bc56:	e7f9      	b.n	bc4c <memset+0x8c>
    bc58:	4603      	mov	r3, r0
    bc5a:	4614      	mov	r4, r2
    bc5c:	e7bf      	b.n	bbde <memset+0x1e>
    bc5e:	461a      	mov	r2, r3
    bc60:	46a4      	mov	ip, r4
    bc62:	e7e0      	b.n	bc26 <memset+0x66>

0000bc64 <strchr>:
    bc64:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    bc68:	4603      	mov	r3, r0
    bc6a:	d044      	beq.n	bcf6 <strchr+0x92>
    bc6c:	0782      	lsls	r2, r0, #30
    bc6e:	d132      	bne.n	bcd6 <strchr+0x72>
    bc70:	b510      	push	{r4, lr}
    bc72:	6804      	ldr	r4, [r0, #0]
    bc74:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    bc78:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    bc7c:	ea8e 0204 	eor.w	r2, lr, r4
    bc80:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bc84:	ea23 0302 	bic.w	r3, r3, r2
    bc88:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bc8c:	ea22 0204 	bic.w	r2, r2, r4
    bc90:	4313      	orrs	r3, r2
    bc92:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bc96:	d10f      	bne.n	bcb8 <strchr+0x54>
    bc98:	f850 4f04 	ldr.w	r4, [r0, #4]!
    bc9c:	ea84 0c0e 	eor.w	ip, r4, lr
    bca0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    bca4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    bca8:	ea23 0304 	bic.w	r3, r3, r4
    bcac:	ea22 020c 	bic.w	r2, r2, ip
    bcb0:	4313      	orrs	r3, r2
    bcb2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bcb6:	d0ef      	beq.n	bc98 <strchr+0x34>
    bcb8:	7803      	ldrb	r3, [r0, #0]
    bcba:	b923      	cbnz	r3, bcc6 <strchr+0x62>
    bcbc:	e036      	b.n	bd2c <strchr+0xc8>
    bcbe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d032      	beq.n	bd2c <strchr+0xc8>
    bcc6:	4299      	cmp	r1, r3
    bcc8:	d1f9      	bne.n	bcbe <strchr+0x5a>
    bcca:	bd10      	pop	{r4, pc}
    bccc:	428a      	cmp	r2, r1
    bcce:	d011      	beq.n	bcf4 <strchr+0x90>
    bcd0:	079a      	lsls	r2, r3, #30
    bcd2:	4618      	mov	r0, r3
    bcd4:	d0cc      	beq.n	bc70 <strchr+0xc>
    bcd6:	4618      	mov	r0, r3
    bcd8:	f813 2b01 	ldrb.w	r2, [r3], #1
    bcdc:	2a00      	cmp	r2, #0
    bcde:	d1f5      	bne.n	bccc <strchr+0x68>
    bce0:	4610      	mov	r0, r2
    bce2:	4770      	bx	lr
    bce4:	0799      	lsls	r1, r3, #30
    bce6:	4618      	mov	r0, r3
    bce8:	d007      	beq.n	bcfa <strchr+0x96>
    bcea:	4618      	mov	r0, r3
    bcec:	3301      	adds	r3, #1
    bcee:	7802      	ldrb	r2, [r0, #0]
    bcf0:	2a00      	cmp	r2, #0
    bcf2:	d1f7      	bne.n	bce4 <strchr+0x80>
    bcf4:	4770      	bx	lr
    bcf6:	0782      	lsls	r2, r0, #30
    bcf8:	d1f7      	bne.n	bcea <strchr+0x86>
    bcfa:	6802      	ldr	r2, [r0, #0]
    bcfc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bd00:	ea23 0302 	bic.w	r3, r3, r2
    bd04:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bd08:	d108      	bne.n	bd1c <strchr+0xb8>
    bd0a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    bd0e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bd12:	ea23 0302 	bic.w	r3, r3, r2
    bd16:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bd1a:	d0f6      	beq.n	bd0a <strchr+0xa6>
    bd1c:	7803      	ldrb	r3, [r0, #0]
    bd1e:	2b00      	cmp	r3, #0
    bd20:	d0e8      	beq.n	bcf4 <strchr+0x90>
    bd22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bd26:	2b00      	cmp	r3, #0
    bd28:	d1fb      	bne.n	bd22 <strchr+0xbe>
    bd2a:	4770      	bx	lr
    bd2c:	4618      	mov	r0, r3
    bd2e:	bd10      	pop	{r4, pc}

0000bd30 <strncpy>:
    bd30:	ea40 0301 	orr.w	r3, r0, r1
    bd34:	079b      	lsls	r3, r3, #30
    bd36:	b530      	push	{r4, r5, lr}
    bd38:	d101      	bne.n	bd3e <strncpy+0xe>
    bd3a:	2a03      	cmp	r2, #3
    bd3c:	d80f      	bhi.n	bd5e <strncpy+0x2e>
    bd3e:	4684      	mov	ip, r0
    bd40:	f101 3eff 	add.w	lr, r1, #4294967295
    bd44:	e007      	b.n	bd56 <strncpy+0x26>
    bd46:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bd4a:	f803 1b01 	strb.w	r1, [r3], #1
    bd4e:	1e54      	subs	r4, r2, #1
    bd50:	b1c1      	cbz	r1, bd84 <strncpy+0x54>
    bd52:	469c      	mov	ip, r3
    bd54:	4622      	mov	r2, r4
    bd56:	4663      	mov	r3, ip
    bd58:	2a00      	cmp	r2, #0
    bd5a:	d1f4      	bne.n	bd46 <strncpy+0x16>
    bd5c:	bd30      	pop	{r4, r5, pc}
    bd5e:	460b      	mov	r3, r1
    bd60:	4684      	mov	ip, r0
    bd62:	4619      	mov	r1, r3
    bd64:	f853 5b04 	ldr.w	r5, [r3], #4
    bd68:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bd6c:	ea24 0405 	bic.w	r4, r4, r5
    bd70:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bd74:	d1e4      	bne.n	bd40 <strncpy+0x10>
    bd76:	3a04      	subs	r2, #4
    bd78:	2a03      	cmp	r2, #3
    bd7a:	f84c 5b04 	str.w	r5, [ip], #4
    bd7e:	4619      	mov	r1, r3
    bd80:	d8ef      	bhi.n	bd62 <strncpy+0x32>
    bd82:	e7dd      	b.n	bd40 <strncpy+0x10>
    bd84:	4494      	add	ip, r2
    bd86:	2c00      	cmp	r4, #0
    bd88:	d0e8      	beq.n	bd5c <strncpy+0x2c>
    bd8a:	f803 1b01 	strb.w	r1, [r3], #1
    bd8e:	4563      	cmp	r3, ip
    bd90:	d1fb      	bne.n	bd8a <strncpy+0x5a>
    bd92:	bd30      	pop	{r4, r5, pc}

0000bd94 <__locale_mb_cur_max>:
    bd94:	4b01      	ldr	r3, [pc, #4]	; (bd9c <__locale_mb_cur_max+0x8>)
    bd96:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bd9a:	4770      	bx	lr
    bd9c:	2000442c 	.word	0x2000442c

0000bda0 <_close_r>:
    bda0:	b538      	push	{r3, r4, r5, lr}
    bda2:	4d07      	ldr	r5, [pc, #28]	; (bdc0 <_close_r+0x20>)
    bda4:	2200      	movs	r2, #0
    bda6:	4604      	mov	r4, r0
    bda8:	4608      	mov	r0, r1
    bdaa:	602a      	str	r2, [r5, #0]
    bdac:	f7fd faa2 	bl	92f4 <_close>
    bdb0:	1c43      	adds	r3, r0, #1
    bdb2:	d000      	beq.n	bdb6 <_close_r+0x16>
    bdb4:	bd38      	pop	{r3, r4, r5, pc}
    bdb6:	682b      	ldr	r3, [r5, #0]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d0fb      	beq.n	bdb4 <_close_r+0x14>
    bdbc:	6023      	str	r3, [r4, #0]
    bdbe:	bd38      	pop	{r3, r4, r5, pc}
    bdc0:	200053dc 	.word	0x200053dc

0000bdc4 <_lseek_r>:
    bdc4:	b538      	push	{r3, r4, r5, lr}
    bdc6:	460c      	mov	r4, r1
    bdc8:	4d08      	ldr	r5, [pc, #32]	; (bdec <_lseek_r+0x28>)
    bdca:	4684      	mov	ip, r0
    bdcc:	4611      	mov	r1, r2
    bdce:	4620      	mov	r0, r4
    bdd0:	461a      	mov	r2, r3
    bdd2:	2300      	movs	r3, #0
    bdd4:	602b      	str	r3, [r5, #0]
    bdd6:	4664      	mov	r4, ip
    bdd8:	f7fd fa98 	bl	930c <_lseek>
    bddc:	1c43      	adds	r3, r0, #1
    bdde:	d000      	beq.n	bde2 <_lseek_r+0x1e>
    bde0:	bd38      	pop	{r3, r4, r5, pc}
    bde2:	682b      	ldr	r3, [r5, #0]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d0fb      	beq.n	bde0 <_lseek_r+0x1c>
    bde8:	6023      	str	r3, [r4, #0]
    bdea:	bd38      	pop	{r3, r4, r5, pc}
    bdec:	200053dc 	.word	0x200053dc

0000bdf0 <_read_r>:
    bdf0:	b538      	push	{r3, r4, r5, lr}
    bdf2:	460c      	mov	r4, r1
    bdf4:	4d08      	ldr	r5, [pc, #32]	; (be18 <_read_r+0x28>)
    bdf6:	4684      	mov	ip, r0
    bdf8:	4611      	mov	r1, r2
    bdfa:	4620      	mov	r0, r4
    bdfc:	461a      	mov	r2, r3
    bdfe:	2300      	movs	r3, #0
    be00:	602b      	str	r3, [r5, #0]
    be02:	4664      	mov	r4, ip
    be04:	f7fd fa74 	bl	92f0 <_read>
    be08:	1c43      	adds	r3, r0, #1
    be0a:	d000      	beq.n	be0e <_read_r+0x1e>
    be0c:	bd38      	pop	{r3, r4, r5, pc}
    be0e:	682b      	ldr	r3, [r5, #0]
    be10:	2b00      	cmp	r3, #0
    be12:	d0fb      	beq.n	be0c <_read_r+0x1c>
    be14:	6023      	str	r3, [r4, #0]
    be16:	bd38      	pop	{r3, r4, r5, pc}
    be18:	200053dc 	.word	0x200053dc

0000be1c <_sbrk_r>:
    be1c:	b538      	push	{r3, r4, r5, lr}
    be1e:	4d07      	ldr	r5, [pc, #28]	; (be3c <_sbrk_r+0x20>)
    be20:	2200      	movs	r2, #0
    be22:	4604      	mov	r4, r0
    be24:	4608      	mov	r0, r1
    be26:	602a      	str	r2, [r5, #0]
    be28:	f7fd fa48 	bl	92bc <_sbrk>
    be2c:	1c43      	adds	r3, r0, #1
    be2e:	d000      	beq.n	be32 <_sbrk_r+0x16>
    be30:	bd38      	pop	{r3, r4, r5, pc}
    be32:	682b      	ldr	r3, [r5, #0]
    be34:	2b00      	cmp	r3, #0
    be36:	d0fb      	beq.n	be30 <_sbrk_r+0x14>
    be38:	6023      	str	r3, [r4, #0]
    be3a:	bd38      	pop	{r3, r4, r5, pc}
    be3c:	200053dc 	.word	0x200053dc

0000be40 <_write_r>:
    be40:	b538      	push	{r3, r4, r5, lr}
    be42:	460c      	mov	r4, r1
    be44:	4d08      	ldr	r5, [pc, #32]	; (be68 <_write_r+0x28>)
    be46:	4684      	mov	ip, r0
    be48:	4611      	mov	r1, r2
    be4a:	4620      	mov	r0, r4
    be4c:	461a      	mov	r2, r3
    be4e:	2300      	movs	r3, #0
    be50:	602b      	str	r3, [r5, #0]
    be52:	4664      	mov	r4, ip
    be54:	f7fc fdaa 	bl	89ac <_write>
    be58:	1c43      	adds	r3, r0, #1
    be5a:	d000      	beq.n	be5e <_write_r+0x1e>
    be5c:	bd38      	pop	{r3, r4, r5, pc}
    be5e:	682b      	ldr	r3, [r5, #0]
    be60:	2b00      	cmp	r3, #0
    be62:	d0fb      	beq.n	be5c <_write_r+0x1c>
    be64:	6023      	str	r3, [r4, #0]
    be66:	bd38      	pop	{r3, r4, r5, pc}
    be68:	200053dc 	.word	0x200053dc

0000be6c <__errno>:
    be6c:	4b01      	ldr	r3, [pc, #4]	; (be74 <__errno+0x8>)
    be6e:	6818      	ldr	r0, [r3, #0]
    be70:	4770      	bx	lr
    be72:	bf00      	nop
    be74:	200049b4 	.word	0x200049b4

0000be78 <__libc_init_array>:
    be78:	b570      	push	{r4, r5, r6, lr}
    be7a:	4e0d      	ldr	r6, [pc, #52]	; (beb0 <__libc_init_array+0x38>)
    be7c:	4d0d      	ldr	r5, [pc, #52]	; (beb4 <__libc_init_array+0x3c>)
    be7e:	1b76      	subs	r6, r6, r5
    be80:	10b6      	asrs	r6, r6, #2
    be82:	d006      	beq.n	be92 <__libc_init_array+0x1a>
    be84:	2400      	movs	r4, #0
    be86:	f855 3b04 	ldr.w	r3, [r5], #4
    be8a:	3401      	adds	r4, #1
    be8c:	4798      	blx	r3
    be8e:	42a6      	cmp	r6, r4
    be90:	d1f9      	bne.n	be86 <__libc_init_array+0xe>
    be92:	4e09      	ldr	r6, [pc, #36]	; (beb8 <__libc_init_array+0x40>)
    be94:	4d09      	ldr	r5, [pc, #36]	; (bebc <__libc_init_array+0x44>)
    be96:	1b76      	subs	r6, r6, r5
    be98:	f005 fb92 	bl	115c0 <___init_veneer>
    be9c:	10b6      	asrs	r6, r6, #2
    be9e:	d006      	beq.n	beae <__libc_init_array+0x36>
    bea0:	2400      	movs	r4, #0
    bea2:	f855 3b04 	ldr.w	r3, [r5], #4
    bea6:	3401      	adds	r4, #1
    bea8:	4798      	blx	r3
    beaa:	42a6      	cmp	r6, r4
    beac:	d1f9      	bne.n	bea2 <__libc_init_array+0x2a>
    beae:	bd70      	pop	{r4, r5, r6, pc}
    beb0:	60001e48 	.word	0x60001e48
    beb4:	60001e48 	.word	0x60001e48
    beb8:	60001e50 	.word	0x60001e50
    bebc:	60001e48 	.word	0x60001e48

0000bec0 <__retarget_lock_init_recursive>:
    bec0:	4770      	bx	lr
    bec2:	bf00      	nop

0000bec4 <__retarget_lock_close_recursive>:
    bec4:	4770      	bx	lr
    bec6:	bf00      	nop

0000bec8 <__retarget_lock_acquire_recursive>:
    bec8:	4770      	bx	lr
    beca:	bf00      	nop

0000becc <__retarget_lock_release_recursive>:
    becc:	4770      	bx	lr
    bece:	bf00      	nop
	...
    bee0:	eba2 0003 	sub.w	r0, r2, r3
    bee4:	4770      	bx	lr
    bee6:	bf00      	nop

0000bee8 <strcmp>:
    bee8:	7802      	ldrb	r2, [r0, #0]
    beea:	780b      	ldrb	r3, [r1, #0]
    beec:	2a01      	cmp	r2, #1
    beee:	bf28      	it	cs
    bef0:	429a      	cmpcs	r2, r3
    bef2:	d1f5      	bne.n	bee0 <__retarget_lock_release_recursive+0x14>
    bef4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bef8:	ea40 0401 	orr.w	r4, r0, r1
    befc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bf00:	f06f 0c00 	mvn.w	ip, #0
    bf04:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bf08:	b312      	cbz	r2, bf50 <strcmp+0x68>
    bf0a:	ea80 0401 	eor.w	r4, r0, r1
    bf0e:	f014 0f07 	tst.w	r4, #7
    bf12:	d16a      	bne.n	bfea <strcmp+0x102>
    bf14:	f000 0407 	and.w	r4, r0, #7
    bf18:	f020 0007 	bic.w	r0, r0, #7
    bf1c:	f004 0503 	and.w	r5, r4, #3
    bf20:	f021 0107 	bic.w	r1, r1, #7
    bf24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bf28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bf2c:	f014 0f04 	tst.w	r4, #4
    bf30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bf34:	fa0c f405 	lsl.w	r4, ip, r5
    bf38:	ea62 0204 	orn	r2, r2, r4
    bf3c:	ea66 0604 	orn	r6, r6, r4
    bf40:	d00a      	beq.n	bf58 <strcmp+0x70>
    bf42:	ea63 0304 	orn	r3, r3, r4
    bf46:	4662      	mov	r2, ip
    bf48:	ea67 0704 	orn	r7, r7, r4
    bf4c:	4666      	mov	r6, ip
    bf4e:	e003      	b.n	bf58 <strcmp+0x70>
    bf50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bf54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bf58:	fa82 f54c 	uadd8	r5, r2, ip
    bf5c:	ea82 0406 	eor.w	r4, r2, r6
    bf60:	faa4 f48c 	sel	r4, r4, ip
    bf64:	bb6c      	cbnz	r4, bfc2 <strcmp+0xda>
    bf66:	fa83 f54c 	uadd8	r5, r3, ip
    bf6a:	ea83 0507 	eor.w	r5, r3, r7
    bf6e:	faa5 f58c 	sel	r5, r5, ip
    bf72:	b995      	cbnz	r5, bf9a <strcmp+0xb2>
    bf74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bf78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bf7c:	fa82 f54c 	uadd8	r5, r2, ip
    bf80:	ea82 0406 	eor.w	r4, r2, r6
    bf84:	faa4 f48c 	sel	r4, r4, ip
    bf88:	fa83 f54c 	uadd8	r5, r3, ip
    bf8c:	ea83 0507 	eor.w	r5, r3, r7
    bf90:	faa5 f58c 	sel	r5, r5, ip
    bf94:	4325      	orrs	r5, r4
    bf96:	d0db      	beq.n	bf50 <strcmp+0x68>
    bf98:	b99c      	cbnz	r4, bfc2 <strcmp+0xda>
    bf9a:	ba2d      	rev	r5, r5
    bf9c:	fab5 f485 	clz	r4, r5
    bfa0:	f024 0407 	bic.w	r4, r4, #7
    bfa4:	fa27 f104 	lsr.w	r1, r7, r4
    bfa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bfac:	fa23 f304 	lsr.w	r3, r3, r4
    bfb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bfb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bfb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bfbc:	eba0 0001 	sub.w	r0, r0, r1
    bfc0:	4770      	bx	lr
    bfc2:	ba24      	rev	r4, r4
    bfc4:	fab4 f484 	clz	r4, r4
    bfc8:	f024 0407 	bic.w	r4, r4, #7
    bfcc:	fa26 f104 	lsr.w	r1, r6, r4
    bfd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bfd4:	fa22 f204 	lsr.w	r2, r2, r4
    bfd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    bfdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bfe0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bfe4:	eba0 0001 	sub.w	r0, r0, r1
    bfe8:	4770      	bx	lr
    bfea:	f014 0f03 	tst.w	r4, #3
    bfee:	d13c      	bne.n	c06a <strcmp+0x182>
    bff0:	f010 0403 	ands.w	r4, r0, #3
    bff4:	d128      	bne.n	c048 <strcmp+0x160>
    bff6:	f850 2b08 	ldr.w	r2, [r0], #8
    bffa:	f851 3b08 	ldr.w	r3, [r1], #8
    bffe:	fa82 f54c 	uadd8	r5, r2, ip
    c002:	ea82 0503 	eor.w	r5, r2, r3
    c006:	faa5 f58c 	sel	r5, r5, ip
    c00a:	b95d      	cbnz	r5, c024 <strcmp+0x13c>
    c00c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    c010:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c014:	fa82 f54c 	uadd8	r5, r2, ip
    c018:	ea82 0503 	eor.w	r5, r2, r3
    c01c:	faa5 f58c 	sel	r5, r5, ip
    c020:	2d00      	cmp	r5, #0
    c022:	d0e8      	beq.n	bff6 <strcmp+0x10e>
    c024:	ba2d      	rev	r5, r5
    c026:	fab5 f485 	clz	r4, r5
    c02a:	f024 0407 	bic.w	r4, r4, #7
    c02e:	fa23 f104 	lsr.w	r1, r3, r4
    c032:	fa22 f204 	lsr.w	r2, r2, r4
    c036:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    c03a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c03e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c042:	eba0 0001 	sub.w	r0, r0, r1
    c046:	4770      	bx	lr
    c048:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    c04c:	f020 0003 	bic.w	r0, r0, #3
    c050:	f850 2b08 	ldr.w	r2, [r0], #8
    c054:	f021 0103 	bic.w	r1, r1, #3
    c058:	f851 3b08 	ldr.w	r3, [r1], #8
    c05c:	fa0c f404 	lsl.w	r4, ip, r4
    c060:	ea62 0204 	orn	r2, r2, r4
    c064:	ea63 0304 	orn	r3, r3, r4
    c068:	e7c9      	b.n	bffe <strcmp+0x116>
    c06a:	f010 0403 	ands.w	r4, r0, #3
    c06e:	d01a      	beq.n	c0a6 <strcmp+0x1be>
    c070:	eba1 0104 	sub.w	r1, r1, r4
    c074:	f020 0003 	bic.w	r0, r0, #3
    c078:	07e4      	lsls	r4, r4, #31
    c07a:	f850 2b04 	ldr.w	r2, [r0], #4
    c07e:	d006      	beq.n	c08e <strcmp+0x1a6>
    c080:	d20f      	bcs.n	c0a2 <strcmp+0x1ba>
    c082:	788b      	ldrb	r3, [r1, #2]
    c084:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    c088:	1ae4      	subs	r4, r4, r3
    c08a:	d106      	bne.n	c09a <strcmp+0x1b2>
    c08c:	b12b      	cbz	r3, c09a <strcmp+0x1b2>
    c08e:	78cb      	ldrb	r3, [r1, #3]
    c090:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    c094:	1ae4      	subs	r4, r4, r3
    c096:	d100      	bne.n	c09a <strcmp+0x1b2>
    c098:	b91b      	cbnz	r3, c0a2 <strcmp+0x1ba>
    c09a:	4620      	mov	r0, r4
    c09c:	f85d 4b10 	ldr.w	r4, [sp], #16
    c0a0:	4770      	bx	lr
    c0a2:	f101 0104 	add.w	r1, r1, #4
    c0a6:	f850 2b04 	ldr.w	r2, [r0], #4
    c0aa:	07cc      	lsls	r4, r1, #31
    c0ac:	f021 0103 	bic.w	r1, r1, #3
    c0b0:	f851 3b04 	ldr.w	r3, [r1], #4
    c0b4:	d848      	bhi.n	c148 <strcmp+0x260>
    c0b6:	d224      	bcs.n	c102 <strcmp+0x21a>
    c0b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    c0bc:	fa82 f54c 	uadd8	r5, r2, ip
    c0c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    c0c4:	faa5 f58c 	sel	r5, r5, ip
    c0c8:	d10a      	bne.n	c0e0 <strcmp+0x1f8>
    c0ca:	b965      	cbnz	r5, c0e6 <strcmp+0x1fe>
    c0cc:	f851 3b04 	ldr.w	r3, [r1], #4
    c0d0:	ea84 0402 	eor.w	r4, r4, r2
    c0d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    c0d8:	d10e      	bne.n	c0f8 <strcmp+0x210>
    c0da:	f850 2b04 	ldr.w	r2, [r0], #4
    c0de:	e7eb      	b.n	c0b8 <strcmp+0x1d0>
    c0e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    c0e4:	e055      	b.n	c192 <strcmp+0x2aa>
    c0e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    c0ea:	d14d      	bne.n	c188 <strcmp+0x2a0>
    c0ec:	7808      	ldrb	r0, [r1, #0]
    c0ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c0f2:	f1c0 0000 	rsb	r0, r0, #0
    c0f6:	4770      	bx	lr
    c0f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    c0fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c100:	e047      	b.n	c192 <strcmp+0x2aa>
    c102:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    c106:	fa82 f54c 	uadd8	r5, r2, ip
    c10a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    c10e:	faa5 f58c 	sel	r5, r5, ip
    c112:	d10a      	bne.n	c12a <strcmp+0x242>
    c114:	b965      	cbnz	r5, c130 <strcmp+0x248>
    c116:	f851 3b04 	ldr.w	r3, [r1], #4
    c11a:	ea84 0402 	eor.w	r4, r4, r2
    c11e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    c122:	d10c      	bne.n	c13e <strcmp+0x256>
    c124:	f850 2b04 	ldr.w	r2, [r0], #4
    c128:	e7eb      	b.n	c102 <strcmp+0x21a>
    c12a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    c12e:	e030      	b.n	c192 <strcmp+0x2aa>
    c130:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    c134:	d128      	bne.n	c188 <strcmp+0x2a0>
    c136:	880b      	ldrh	r3, [r1, #0]
    c138:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c13c:	e029      	b.n	c192 <strcmp+0x2aa>
    c13e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c142:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    c146:	e024      	b.n	c192 <strcmp+0x2aa>
    c148:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    c14c:	fa82 f54c 	uadd8	r5, r2, ip
    c150:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    c154:	faa5 f58c 	sel	r5, r5, ip
    c158:	d10a      	bne.n	c170 <strcmp+0x288>
    c15a:	b965      	cbnz	r5, c176 <strcmp+0x28e>
    c15c:	f851 3b04 	ldr.w	r3, [r1], #4
    c160:	ea84 0402 	eor.w	r4, r4, r2
    c164:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    c168:	d109      	bne.n	c17e <strcmp+0x296>
    c16a:	f850 2b04 	ldr.w	r2, [r0], #4
    c16e:	e7eb      	b.n	c148 <strcmp+0x260>
    c170:	ea4f 6313 	mov.w	r3, r3, lsr #24
    c174:	e00d      	b.n	c192 <strcmp+0x2aa>
    c176:	f015 0fff 	tst.w	r5, #255	; 0xff
    c17a:	d105      	bne.n	c188 <strcmp+0x2a0>
    c17c:	680b      	ldr	r3, [r1, #0]
    c17e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    c182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c186:	e004      	b.n	c192 <strcmp+0x2aa>
    c188:	f04f 0000 	mov.w	r0, #0
    c18c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c190:	4770      	bx	lr
    c192:	ba12      	rev	r2, r2
    c194:	ba1b      	rev	r3, r3
    c196:	fa82 f44c 	uadd8	r4, r2, ip
    c19a:	ea82 0403 	eor.w	r4, r2, r3
    c19e:	faa4 f58c 	sel	r5, r4, ip
    c1a2:	fab5 f485 	clz	r4, r5
    c1a6:	fa02 f204 	lsl.w	r2, r2, r4
    c1aa:	fa03 f304 	lsl.w	r3, r3, r4
    c1ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
    c1b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c1b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    c1ba:	4770      	bx	lr

0000c1bc <strcpy>:
    c1bc:	ea80 0201 	eor.w	r2, r0, r1
    c1c0:	4684      	mov	ip, r0
    c1c2:	f012 0f03 	tst.w	r2, #3
    c1c6:	d14f      	bne.n	c268 <strcpy+0xac>
    c1c8:	f011 0f03 	tst.w	r1, #3
    c1cc:	d132      	bne.n	c234 <strcpy+0x78>
    c1ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c1d2:	f011 0f04 	tst.w	r1, #4
    c1d6:	f851 3b04 	ldr.w	r3, [r1], #4
    c1da:	d00b      	beq.n	c1f4 <strcpy+0x38>
    c1dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c1e0:	439a      	bics	r2, r3
    c1e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c1e6:	bf04      	itt	eq
    c1e8:	f84c 3b04 	streq.w	r3, [ip], #4
    c1ec:	f851 3b04 	ldreq.w	r3, [r1], #4
    c1f0:	d116      	bne.n	c220 <strcpy+0x64>
    c1f2:	bf00      	nop
    c1f4:	f851 4b04 	ldr.w	r4, [r1], #4
    c1f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c1fc:	439a      	bics	r2, r3
    c1fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c202:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c206:	d10b      	bne.n	c220 <strcpy+0x64>
    c208:	f84c 3b04 	str.w	r3, [ip], #4
    c20c:	43a2      	bics	r2, r4
    c20e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c212:	bf04      	itt	eq
    c214:	f851 3b04 	ldreq.w	r3, [r1], #4
    c218:	f84c 4b04 	streq.w	r4, [ip], #4
    c21c:	d0ea      	beq.n	c1f4 <strcpy+0x38>
    c21e:	4623      	mov	r3, r4
    c220:	f80c 3b01 	strb.w	r3, [ip], #1
    c224:	f013 0fff 	tst.w	r3, #255	; 0xff
    c228:	ea4f 2333 	mov.w	r3, r3, ror #8
    c22c:	d1f8      	bne.n	c220 <strcpy+0x64>
    c22e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c232:	4770      	bx	lr
    c234:	f011 0f01 	tst.w	r1, #1
    c238:	d006      	beq.n	c248 <strcpy+0x8c>
    c23a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c23e:	f80c 2b01 	strb.w	r2, [ip], #1
    c242:	2a00      	cmp	r2, #0
    c244:	bf08      	it	eq
    c246:	4770      	bxeq	lr
    c248:	f011 0f02 	tst.w	r1, #2
    c24c:	d0bf      	beq.n	c1ce <strcpy+0x12>
    c24e:	f831 2b02 	ldrh.w	r2, [r1], #2
    c252:	f012 0fff 	tst.w	r2, #255	; 0xff
    c256:	bf16      	itet	ne
    c258:	f82c 2b02 	strhne.w	r2, [ip], #2
    c25c:	f88c 2000 	strbeq.w	r2, [ip]
    c260:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c264:	d1b3      	bne.n	c1ce <strcpy+0x12>
    c266:	4770      	bx	lr
    c268:	f811 2b01 	ldrb.w	r2, [r1], #1
    c26c:	f80c 2b01 	strb.w	r2, [ip], #1
    c270:	2a00      	cmp	r2, #0
    c272:	d1f9      	bne.n	c268 <strcpy+0xac>
    c274:	4770      	bx	lr
    c276:	bf00      	nop
	...

0000c280 <strlen>:
    c280:	f890 f000 	pld	[r0]
    c284:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c288:	f020 0107 	bic.w	r1, r0, #7
    c28c:	f06f 0c00 	mvn.w	ip, #0
    c290:	f010 0407 	ands.w	r4, r0, #7
    c294:	f891 f020 	pld	[r1, #32]
    c298:	f040 8049 	bne.w	c32e <strlen+0xae>
    c29c:	f04f 0400 	mov.w	r4, #0
    c2a0:	f06f 0007 	mvn.w	r0, #7
    c2a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c2a8:	f891 f040 	pld	[r1, #64]	; 0x40
    c2ac:	f100 0008 	add.w	r0, r0, #8
    c2b0:	fa82 f24c 	uadd8	r2, r2, ip
    c2b4:	faa4 f28c 	sel	r2, r4, ip
    c2b8:	fa83 f34c 	uadd8	r3, r3, ip
    c2bc:	faa2 f38c 	sel	r3, r2, ip
    c2c0:	bb4b      	cbnz	r3, c316 <strlen+0x96>
    c2c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c2c6:	fa82 f24c 	uadd8	r2, r2, ip
    c2ca:	f100 0008 	add.w	r0, r0, #8
    c2ce:	faa4 f28c 	sel	r2, r4, ip
    c2d2:	fa83 f34c 	uadd8	r3, r3, ip
    c2d6:	faa2 f38c 	sel	r3, r2, ip
    c2da:	b9e3      	cbnz	r3, c316 <strlen+0x96>
    c2dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c2e0:	fa82 f24c 	uadd8	r2, r2, ip
    c2e4:	f100 0008 	add.w	r0, r0, #8
    c2e8:	faa4 f28c 	sel	r2, r4, ip
    c2ec:	fa83 f34c 	uadd8	r3, r3, ip
    c2f0:	faa2 f38c 	sel	r3, r2, ip
    c2f4:	b97b      	cbnz	r3, c316 <strlen+0x96>
    c2f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c2fa:	f101 0120 	add.w	r1, r1, #32
    c2fe:	fa82 f24c 	uadd8	r2, r2, ip
    c302:	f100 0008 	add.w	r0, r0, #8
    c306:	faa4 f28c 	sel	r2, r4, ip
    c30a:	fa83 f34c 	uadd8	r3, r3, ip
    c30e:	faa2 f38c 	sel	r3, r2, ip
    c312:	2b00      	cmp	r3, #0
    c314:	d0c6      	beq.n	c2a4 <strlen+0x24>
    c316:	2a00      	cmp	r2, #0
    c318:	bf04      	itt	eq
    c31a:	3004      	addeq	r0, #4
    c31c:	461a      	moveq	r2, r3
    c31e:	ba12      	rev	r2, r2
    c320:	fab2 f282 	clz	r2, r2
    c324:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c328:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c32c:	4770      	bx	lr
    c32e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c332:	f004 0503 	and.w	r5, r4, #3
    c336:	f1c4 0000 	rsb	r0, r4, #0
    c33a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c33e:	f014 0f04 	tst.w	r4, #4
    c342:	f891 f040 	pld	[r1, #64]	; 0x40
    c346:	fa0c f505 	lsl.w	r5, ip, r5
    c34a:	ea62 0205 	orn	r2, r2, r5
    c34e:	bf1c      	itt	ne
    c350:	ea63 0305 	ornne	r3, r3, r5
    c354:	4662      	movne	r2, ip
    c356:	f04f 0400 	mov.w	r4, #0
    c35a:	e7a9      	b.n	c2b0 <strlen+0x30>

0000c35c <__register_exitproc>:
    c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c360:	f8df a07c 	ldr.w	sl, [pc, #124]	; c3e0 <__register_exitproc+0x84>
    c364:	4606      	mov	r6, r0
    c366:	f8da 0000 	ldr.w	r0, [sl]
    c36a:	4698      	mov	r8, r3
    c36c:	460f      	mov	r7, r1
    c36e:	4691      	mov	r9, r2
    c370:	f7ff fdaa 	bl	bec8 <__retarget_lock_acquire_recursive>
    c374:	4b18      	ldr	r3, [pc, #96]	; (c3d8 <__register_exitproc+0x7c>)
    c376:	681c      	ldr	r4, [r3, #0]
    c378:	b324      	cbz	r4, c3c4 <__register_exitproc+0x68>
    c37a:	6865      	ldr	r5, [r4, #4]
    c37c:	2d1f      	cmp	r5, #31
    c37e:	dc24      	bgt.n	c3ca <__register_exitproc+0x6e>
    c380:	b95e      	cbnz	r6, c39a <__register_exitproc+0x3e>
    c382:	1c6b      	adds	r3, r5, #1
    c384:	3502      	adds	r5, #2
    c386:	f8da 0000 	ldr.w	r0, [sl]
    c38a:	6063      	str	r3, [r4, #4]
    c38c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c390:	f7ff fd9c 	bl	becc <__retarget_lock_release_recursive>
    c394:	2000      	movs	r0, #0
    c396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c39a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c39e:	2301      	movs	r3, #1
    c3a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c3a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c3a8:	40ab      	lsls	r3, r5
    c3aa:	431a      	orrs	r2, r3
    c3ac:	2e02      	cmp	r6, #2
    c3ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c3b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c3b6:	d1e4      	bne.n	c382 <__register_exitproc+0x26>
    c3b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c3bc:	431a      	orrs	r2, r3
    c3be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c3c2:	e7de      	b.n	c382 <__register_exitproc+0x26>
    c3c4:	4c05      	ldr	r4, [pc, #20]	; (c3dc <__register_exitproc+0x80>)
    c3c6:	601c      	str	r4, [r3, #0]
    c3c8:	e7d7      	b.n	c37a <__register_exitproc+0x1e>
    c3ca:	f8da 0000 	ldr.w	r0, [sl]
    c3ce:	f7ff fd7d 	bl	becc <__retarget_lock_release_recursive>
    c3d2:	f04f 30ff 	mov.w	r0, #4294967295
    c3d6:	e7de      	b.n	c396 <__register_exitproc+0x3a>
    c3d8:	200050b8 	.word	0x200050b8
    c3dc:	200050bc 	.word	0x200050bc
    c3e0:	20004420 	.word	0x20004420

0000c3e4 <_malloc_trim_r>:
    c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3e6:	4f24      	ldr	r7, [pc, #144]	; (c478 <_malloc_trim_r+0x94>)
    c3e8:	460c      	mov	r4, r1
    c3ea:	4606      	mov	r6, r0
    c3ec:	f7fe fe50 	bl	b090 <__malloc_lock>
    c3f0:	68bb      	ldr	r3, [r7, #8]
    c3f2:	685d      	ldr	r5, [r3, #4]
    c3f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c3f8:	310f      	adds	r1, #15
    c3fa:	f025 0503 	bic.w	r5, r5, #3
    c3fe:	194b      	adds	r3, r1, r5
    c400:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c404:	f023 030f 	bic.w	r3, r3, #15
    c408:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c40c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c410:	db07      	blt.n	c422 <_malloc_trim_r+0x3e>
    c412:	2100      	movs	r1, #0
    c414:	4630      	mov	r0, r6
    c416:	f7ff fd01 	bl	be1c <_sbrk_r>
    c41a:	68bb      	ldr	r3, [r7, #8]
    c41c:	442b      	add	r3, r5
    c41e:	4298      	cmp	r0, r3
    c420:	d004      	beq.n	c42c <_malloc_trim_r+0x48>
    c422:	4630      	mov	r0, r6
    c424:	f7fe fe3a 	bl	b09c <__malloc_unlock>
    c428:	2000      	movs	r0, #0
    c42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c42c:	4261      	negs	r1, r4
    c42e:	4630      	mov	r0, r6
    c430:	f7ff fcf4 	bl	be1c <_sbrk_r>
    c434:	3001      	adds	r0, #1
    c436:	d00d      	beq.n	c454 <_malloc_trim_r+0x70>
    c438:	4a10      	ldr	r2, [pc, #64]	; (c47c <_malloc_trim_r+0x98>)
    c43a:	68bb      	ldr	r3, [r7, #8]
    c43c:	1b2d      	subs	r5, r5, r4
    c43e:	f045 0501 	orr.w	r5, r5, #1
    c442:	605d      	str	r5, [r3, #4]
    c444:	6813      	ldr	r3, [r2, #0]
    c446:	4630      	mov	r0, r6
    c448:	1b1b      	subs	r3, r3, r4
    c44a:	6013      	str	r3, [r2, #0]
    c44c:	f7fe fe26 	bl	b09c <__malloc_unlock>
    c450:	2001      	movs	r0, #1
    c452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c454:	2100      	movs	r1, #0
    c456:	4630      	mov	r0, r6
    c458:	f7ff fce0 	bl	be1c <_sbrk_r>
    c45c:	68ba      	ldr	r2, [r7, #8]
    c45e:	1a83      	subs	r3, r0, r2
    c460:	2b0f      	cmp	r3, #15
    c462:	ddde      	ble.n	c422 <_malloc_trim_r+0x3e>
    c464:	f043 0301 	orr.w	r3, r3, #1
    c468:	6053      	str	r3, [r2, #4]
    c46a:	4b05      	ldr	r3, [pc, #20]	; (c480 <_malloc_trim_r+0x9c>)
    c46c:	4903      	ldr	r1, [pc, #12]	; (c47c <_malloc_trim_r+0x98>)
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	1ac0      	subs	r0, r0, r3
    c472:	6008      	str	r0, [r1, #0]
    c474:	e7d5      	b.n	c422 <_malloc_trim_r+0x3e>
    c476:	bf00      	nop
    c478:	20004598 	.word	0x20004598
    c47c:	20005258 	.word	0x20005258
    c480:	200049a0 	.word	0x200049a0

0000c484 <_free_r>:
    c484:	2900      	cmp	r1, #0
    c486:	d061      	beq.n	c54c <_free_r+0xc8>
    c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c48a:	460c      	mov	r4, r1
    c48c:	4606      	mov	r6, r0
    c48e:	f7fe fdff 	bl	b090 <__malloc_lock>
    c492:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c496:	4f7b      	ldr	r7, [pc, #492]	; (c684 <_free_r+0x200>)
    c498:	f1a4 0508 	sub.w	r5, r4, #8
    c49c:	f022 0101 	bic.w	r1, r2, #1
    c4a0:	eb05 0c01 	add.w	ip, r5, r1
    c4a4:	68b8      	ldr	r0, [r7, #8]
    c4a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c4aa:	4560      	cmp	r0, ip
    c4ac:	f023 0303 	bic.w	r3, r3, #3
    c4b0:	f000 808b 	beq.w	c5ca <_free_r+0x146>
    c4b4:	07d2      	lsls	r2, r2, #31
    c4b6:	f8cc 3004 	str.w	r3, [ip, #4]
    c4ba:	d432      	bmi.n	c522 <_free_r+0x9e>
    c4bc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c4c0:	1aad      	subs	r5, r5, r2
    c4c2:	4411      	add	r1, r2
    c4c4:	68aa      	ldr	r2, [r5, #8]
    c4c6:	f107 0008 	add.w	r0, r7, #8
    c4ca:	4282      	cmp	r2, r0
    c4cc:	d06a      	beq.n	c5a4 <_free_r+0x120>
    c4ce:	eb0c 0403 	add.w	r4, ip, r3
    c4d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c4d6:	68ec      	ldr	r4, [r5, #12]
    c4d8:	60d4      	str	r4, [r2, #12]
    c4da:	f01e 0f01 	tst.w	lr, #1
    c4de:	60a2      	str	r2, [r4, #8]
    c4e0:	f000 8097 	beq.w	c612 <_free_r+0x18e>
    c4e4:	f041 0301 	orr.w	r3, r1, #1
    c4e8:	606b      	str	r3, [r5, #4]
    c4ea:	f8cc 1000 	str.w	r1, [ip]
    c4ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c4f2:	d235      	bcs.n	c560 <_free_r+0xdc>
    c4f4:	6878      	ldr	r0, [r7, #4]
    c4f6:	08cb      	lsrs	r3, r1, #3
    c4f8:	2201      	movs	r2, #1
    c4fa:	0949      	lsrs	r1, r1, #5
    c4fc:	3301      	adds	r3, #1
    c4fe:	408a      	lsls	r2, r1
    c500:	4302      	orrs	r2, r0
    c502:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c506:	607a      	str	r2, [r7, #4]
    c508:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c50c:	3a08      	subs	r2, #8
    c50e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c512:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c516:	60cd      	str	r5, [r1, #12]
    c518:	4630      	mov	r0, r6
    c51a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c51e:	f7fe bdbd 	b.w	b09c <__malloc_unlock>
    c522:	eb0c 0203 	add.w	r2, ip, r3
    c526:	6852      	ldr	r2, [r2, #4]
    c528:	07d0      	lsls	r0, r2, #31
    c52a:	d410      	bmi.n	c54e <_free_r+0xca>
    c52c:	4419      	add	r1, r3
    c52e:	f107 0008 	add.w	r0, r7, #8
    c532:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c536:	4283      	cmp	r3, r0
    c538:	d073      	beq.n	c622 <_free_r+0x19e>
    c53a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c53e:	60da      	str	r2, [r3, #12]
    c540:	6093      	str	r3, [r2, #8]
    c542:	f041 0301 	orr.w	r3, r1, #1
    c546:	606b      	str	r3, [r5, #4]
    c548:	5069      	str	r1, [r5, r1]
    c54a:	e7d0      	b.n	c4ee <_free_r+0x6a>
    c54c:	4770      	bx	lr
    c54e:	f041 0301 	orr.w	r3, r1, #1
    c552:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c556:	f844 3c04 	str.w	r3, [r4, #-4]
    c55a:	f8cc 1000 	str.w	r1, [ip]
    c55e:	d3c9      	bcc.n	c4f4 <_free_r+0x70>
    c560:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c564:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c568:	d248      	bcs.n	c5fc <_free_r+0x178>
    c56a:	098b      	lsrs	r3, r1, #6
    c56c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c570:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c574:	00c3      	lsls	r3, r0, #3
    c576:	18f8      	adds	r0, r7, r3
    c578:	58fb      	ldr	r3, [r7, r3]
    c57a:	3808      	subs	r0, #8
    c57c:	4298      	cmp	r0, r3
    c57e:	d059      	beq.n	c634 <_free_r+0x1b0>
    c580:	685a      	ldr	r2, [r3, #4]
    c582:	f022 0203 	bic.w	r2, r2, #3
    c586:	428a      	cmp	r2, r1
    c588:	d902      	bls.n	c590 <_free_r+0x10c>
    c58a:	689b      	ldr	r3, [r3, #8]
    c58c:	4298      	cmp	r0, r3
    c58e:	d1f7      	bne.n	c580 <_free_r+0xfc>
    c590:	68d8      	ldr	r0, [r3, #12]
    c592:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c596:	6085      	str	r5, [r0, #8]
    c598:	60dd      	str	r5, [r3, #12]
    c59a:	4630      	mov	r0, r6
    c59c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c5a0:	f7fe bd7c 	b.w	b09c <__malloc_unlock>
    c5a4:	eb0c 0203 	add.w	r2, ip, r3
    c5a8:	6852      	ldr	r2, [r2, #4]
    c5aa:	07d2      	lsls	r2, r2, #31
    c5ac:	d463      	bmi.n	c676 <_free_r+0x1f2>
    c5ae:	440b      	add	r3, r1
    c5b0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c5b4:	60ca      	str	r2, [r1, #12]
    c5b6:	6091      	str	r1, [r2, #8]
    c5b8:	f043 0201 	orr.w	r2, r3, #1
    c5bc:	606a      	str	r2, [r5, #4]
    c5be:	4630      	mov	r0, r6
    c5c0:	50eb      	str	r3, [r5, r3]
    c5c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c5c6:	f7fe bd69 	b.w	b09c <__malloc_unlock>
    c5ca:	440b      	add	r3, r1
    c5cc:	07d1      	lsls	r1, r2, #31
    c5ce:	d407      	bmi.n	c5e0 <_free_r+0x15c>
    c5d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c5d4:	1aad      	subs	r5, r5, r2
    c5d6:	4413      	add	r3, r2
    c5d8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c5dc:	60ca      	str	r2, [r1, #12]
    c5de:	6091      	str	r1, [r2, #8]
    c5e0:	f043 0201 	orr.w	r2, r3, #1
    c5e4:	606a      	str	r2, [r5, #4]
    c5e6:	4a28      	ldr	r2, [pc, #160]	; (c688 <_free_r+0x204>)
    c5e8:	60bd      	str	r5, [r7, #8]
    c5ea:	6812      	ldr	r2, [r2, #0]
    c5ec:	429a      	cmp	r2, r3
    c5ee:	d893      	bhi.n	c518 <_free_r+0x94>
    c5f0:	4b26      	ldr	r3, [pc, #152]	; (c68c <_free_r+0x208>)
    c5f2:	4630      	mov	r0, r6
    c5f4:	6819      	ldr	r1, [r3, #0]
    c5f6:	f7ff fef5 	bl	c3e4 <_malloc_trim_r>
    c5fa:	e78d      	b.n	c518 <_free_r+0x94>
    c5fc:	2b14      	cmp	r3, #20
    c5fe:	d90a      	bls.n	c616 <_free_r+0x192>
    c600:	2b54      	cmp	r3, #84	; 0x54
    c602:	d81f      	bhi.n	c644 <_free_r+0x1c0>
    c604:	0b0b      	lsrs	r3, r1, #12
    c606:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c60a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c60e:	00c3      	lsls	r3, r0, #3
    c610:	e7b1      	b.n	c576 <_free_r+0xf2>
    c612:	4419      	add	r1, r3
    c614:	e78d      	b.n	c532 <_free_r+0xae>
    c616:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c61a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c61e:	00c3      	lsls	r3, r0, #3
    c620:	e7a9      	b.n	c576 <_free_r+0xf2>
    c622:	f041 0301 	orr.w	r3, r1, #1
    c626:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c62a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c62e:	606b      	str	r3, [r5, #4]
    c630:	5069      	str	r1, [r5, r1]
    c632:	e771      	b.n	c518 <_free_r+0x94>
    c634:	6879      	ldr	r1, [r7, #4]
    c636:	1092      	asrs	r2, r2, #2
    c638:	2401      	movs	r4, #1
    c63a:	fa04 f202 	lsl.w	r2, r4, r2
    c63e:	430a      	orrs	r2, r1
    c640:	607a      	str	r2, [r7, #4]
    c642:	e7a6      	b.n	c592 <_free_r+0x10e>
    c644:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c648:	d806      	bhi.n	c658 <_free_r+0x1d4>
    c64a:	0bcb      	lsrs	r3, r1, #15
    c64c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c650:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c654:	00c3      	lsls	r3, r0, #3
    c656:	e78e      	b.n	c576 <_free_r+0xf2>
    c658:	f240 5254 	movw	r2, #1364	; 0x554
    c65c:	4293      	cmp	r3, r2
    c65e:	d806      	bhi.n	c66e <_free_r+0x1ea>
    c660:	0c8b      	lsrs	r3, r1, #18
    c662:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c666:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c66a:	00c3      	lsls	r3, r0, #3
    c66c:	e783      	b.n	c576 <_free_r+0xf2>
    c66e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c672:	227e      	movs	r2, #126	; 0x7e
    c674:	e77f      	b.n	c576 <_free_r+0xf2>
    c676:	f041 0301 	orr.w	r3, r1, #1
    c67a:	606b      	str	r3, [r5, #4]
    c67c:	f8cc 1000 	str.w	r1, [ip]
    c680:	e74a      	b.n	c518 <_free_r+0x94>
    c682:	bf00      	nop
    c684:	20004598 	.word	0x20004598
    c688:	200049a4 	.word	0x200049a4
    c68c:	20005288 	.word	0x20005288

0000c690 <__ascii_mbtowc>:
    c690:	b082      	sub	sp, #8
    c692:	b149      	cbz	r1, c6a8 <__ascii_mbtowc+0x18>
    c694:	b15a      	cbz	r2, c6ae <__ascii_mbtowc+0x1e>
    c696:	b16b      	cbz	r3, c6b4 <__ascii_mbtowc+0x24>
    c698:	7813      	ldrb	r3, [r2, #0]
    c69a:	600b      	str	r3, [r1, #0]
    c69c:	7812      	ldrb	r2, [r2, #0]
    c69e:	1e10      	subs	r0, r2, #0
    c6a0:	bf18      	it	ne
    c6a2:	2001      	movne	r0, #1
    c6a4:	b002      	add	sp, #8
    c6a6:	4770      	bx	lr
    c6a8:	a901      	add	r1, sp, #4
    c6aa:	2a00      	cmp	r2, #0
    c6ac:	d1f3      	bne.n	c696 <__ascii_mbtowc+0x6>
    c6ae:	4610      	mov	r0, r2
    c6b0:	b002      	add	sp, #8
    c6b2:	4770      	bx	lr
    c6b4:	f06f 0001 	mvn.w	r0, #1
    c6b8:	e7f4      	b.n	c6a4 <__ascii_mbtowc+0x14>
    c6ba:	bf00      	nop

0000c6bc <_Balloc>:
    c6bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c6be:	b570      	push	{r4, r5, r6, lr}
    c6c0:	4605      	mov	r5, r0
    c6c2:	460c      	mov	r4, r1
    c6c4:	b14b      	cbz	r3, c6da <_Balloc+0x1e>
    c6c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c6ca:	b180      	cbz	r0, c6ee <_Balloc+0x32>
    c6cc:	6802      	ldr	r2, [r0, #0]
    c6ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c6d2:	2300      	movs	r3, #0
    c6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c6d8:	bd70      	pop	{r4, r5, r6, pc}
    c6da:	2221      	movs	r2, #33	; 0x21
    c6dc:	2104      	movs	r1, #4
    c6de:	f002 fb33 	bl	ed48 <_calloc_r>
    c6e2:	4603      	mov	r3, r0
    c6e4:	6468      	str	r0, [r5, #68]	; 0x44
    c6e6:	2800      	cmp	r0, #0
    c6e8:	d1ed      	bne.n	c6c6 <_Balloc+0xa>
    c6ea:	2000      	movs	r0, #0
    c6ec:	bd70      	pop	{r4, r5, r6, pc}
    c6ee:	2101      	movs	r1, #1
    c6f0:	fa01 f604 	lsl.w	r6, r1, r4
    c6f4:	1d72      	adds	r2, r6, #5
    c6f6:	0092      	lsls	r2, r2, #2
    c6f8:	4628      	mov	r0, r5
    c6fa:	f002 fb25 	bl	ed48 <_calloc_r>
    c6fe:	2800      	cmp	r0, #0
    c700:	d0f3      	beq.n	c6ea <_Balloc+0x2e>
    c702:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c706:	e7e4      	b.n	c6d2 <_Balloc+0x16>

0000c708 <_Bfree>:
    c708:	b131      	cbz	r1, c718 <_Bfree+0x10>
    c70a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c70c:	684a      	ldr	r2, [r1, #4]
    c70e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c712:	6008      	str	r0, [r1, #0]
    c714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c718:	4770      	bx	lr
    c71a:	bf00      	nop

0000c71c <__multadd>:
    c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c720:	690e      	ldr	r6, [r1, #16]
    c722:	4680      	mov	r8, r0
    c724:	460f      	mov	r7, r1
    c726:	461d      	mov	r5, r3
    c728:	f101 0e14 	add.w	lr, r1, #20
    c72c:	2000      	movs	r0, #0
    c72e:	f8de 1000 	ldr.w	r1, [lr]
    c732:	b28c      	uxth	r4, r1
    c734:	fb02 5304 	mla	r3, r2, r4, r5
    c738:	0c09      	lsrs	r1, r1, #16
    c73a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c73e:	fb02 cc01 	mla	ip, r2, r1, ip
    c742:	3001      	adds	r0, #1
    c744:	b29c      	uxth	r4, r3
    c746:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c74a:	4286      	cmp	r6, r0
    c74c:	f84e 4b04 	str.w	r4, [lr], #4
    c750:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c754:	dceb      	bgt.n	c72e <__multadd+0x12>
    c756:	b13d      	cbz	r5, c768 <__multadd+0x4c>
    c758:	68bb      	ldr	r3, [r7, #8]
    c75a:	42b3      	cmp	r3, r6
    c75c:	dd07      	ble.n	c76e <__multadd+0x52>
    c75e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c762:	3601      	adds	r6, #1
    c764:	615d      	str	r5, [r3, #20]
    c766:	613e      	str	r6, [r7, #16]
    c768:	4638      	mov	r0, r7
    c76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c76e:	6879      	ldr	r1, [r7, #4]
    c770:	4640      	mov	r0, r8
    c772:	3101      	adds	r1, #1
    c774:	f7ff ffa2 	bl	c6bc <_Balloc>
    c778:	4604      	mov	r4, r0
    c77a:	b1b0      	cbz	r0, c7aa <__multadd+0x8e>
    c77c:	693a      	ldr	r2, [r7, #16]
    c77e:	3202      	adds	r2, #2
    c780:	f107 010c 	add.w	r1, r7, #12
    c784:	0092      	lsls	r2, r2, #2
    c786:	300c      	adds	r0, #12
    c788:	f7fc fc0c 	bl	8fa4 <memcpy>
    c78c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c790:	687a      	ldr	r2, [r7, #4]
    c792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c796:	6039      	str	r1, [r7, #0]
    c798:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c79c:	4627      	mov	r7, r4
    c79e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c7a2:	3601      	adds	r6, #1
    c7a4:	615d      	str	r5, [r3, #20]
    c7a6:	613e      	str	r6, [r7, #16]
    c7a8:	e7de      	b.n	c768 <__multadd+0x4c>
    c7aa:	4b03      	ldr	r3, [pc, #12]	; (c7b8 <__multadd+0x9c>)
    c7ac:	4803      	ldr	r0, [pc, #12]	; (c7bc <__multadd+0xa0>)
    c7ae:	4622      	mov	r2, r4
    c7b0:	21ba      	movs	r1, #186	; 0xba
    c7b2:	f002 faa9 	bl	ed08 <__assert_func>
    c7b6:	bf00      	nop
    c7b8:	20000af8 	.word	0x20000af8
    c7bc:	20000b0c 	.word	0x20000b0c

0000c7c0 <__hi0bits>:
    c7c0:	0c03      	lsrs	r3, r0, #16
    c7c2:	041b      	lsls	r3, r3, #16
    c7c4:	b9d3      	cbnz	r3, c7fc <__hi0bits+0x3c>
    c7c6:	0400      	lsls	r0, r0, #16
    c7c8:	2310      	movs	r3, #16
    c7ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c7ce:	bf04      	itt	eq
    c7d0:	0200      	lsleq	r0, r0, #8
    c7d2:	3308      	addeq	r3, #8
    c7d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c7d8:	bf04      	itt	eq
    c7da:	0100      	lsleq	r0, r0, #4
    c7dc:	3304      	addeq	r3, #4
    c7de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c7e2:	bf04      	itt	eq
    c7e4:	0080      	lsleq	r0, r0, #2
    c7e6:	3302      	addeq	r3, #2
    c7e8:	2800      	cmp	r0, #0
    c7ea:	db05      	blt.n	c7f8 <__hi0bits+0x38>
    c7ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c7f0:	f103 0301 	add.w	r3, r3, #1
    c7f4:	bf08      	it	eq
    c7f6:	2320      	moveq	r3, #32
    c7f8:	4618      	mov	r0, r3
    c7fa:	4770      	bx	lr
    c7fc:	2300      	movs	r3, #0
    c7fe:	e7e4      	b.n	c7ca <__hi0bits+0xa>

0000c800 <__lo0bits>:
    c800:	6803      	ldr	r3, [r0, #0]
    c802:	f013 0207 	ands.w	r2, r3, #7
    c806:	d008      	beq.n	c81a <__lo0bits+0x1a>
    c808:	07d9      	lsls	r1, r3, #31
    c80a:	d41f      	bmi.n	c84c <__lo0bits+0x4c>
    c80c:	079a      	lsls	r2, r3, #30
    c80e:	d522      	bpl.n	c856 <__lo0bits+0x56>
    c810:	085b      	lsrs	r3, r3, #1
    c812:	6003      	str	r3, [r0, #0]
    c814:	2201      	movs	r2, #1
    c816:	4610      	mov	r0, r2
    c818:	4770      	bx	lr
    c81a:	b299      	uxth	r1, r3
    c81c:	b909      	cbnz	r1, c822 <__lo0bits+0x22>
    c81e:	0c1b      	lsrs	r3, r3, #16
    c820:	2210      	movs	r2, #16
    c822:	b2d9      	uxtb	r1, r3
    c824:	b909      	cbnz	r1, c82a <__lo0bits+0x2a>
    c826:	3208      	adds	r2, #8
    c828:	0a1b      	lsrs	r3, r3, #8
    c82a:	0719      	lsls	r1, r3, #28
    c82c:	bf04      	itt	eq
    c82e:	091b      	lsreq	r3, r3, #4
    c830:	3204      	addeq	r2, #4
    c832:	0799      	lsls	r1, r3, #30
    c834:	bf04      	itt	eq
    c836:	089b      	lsreq	r3, r3, #2
    c838:	3202      	addeq	r2, #2
    c83a:	07d9      	lsls	r1, r3, #31
    c83c:	d403      	bmi.n	c846 <__lo0bits+0x46>
    c83e:	085b      	lsrs	r3, r3, #1
    c840:	f102 0201 	add.w	r2, r2, #1
    c844:	d005      	beq.n	c852 <__lo0bits+0x52>
    c846:	6003      	str	r3, [r0, #0]
    c848:	4610      	mov	r0, r2
    c84a:	4770      	bx	lr
    c84c:	2200      	movs	r2, #0
    c84e:	4610      	mov	r0, r2
    c850:	4770      	bx	lr
    c852:	2220      	movs	r2, #32
    c854:	e7df      	b.n	c816 <__lo0bits+0x16>
    c856:	089b      	lsrs	r3, r3, #2
    c858:	2202      	movs	r2, #2
    c85a:	6003      	str	r3, [r0, #0]
    c85c:	4610      	mov	r0, r2
    c85e:	4770      	bx	lr

0000c860 <__i2b>:
    c860:	b538      	push	{r3, r4, r5, lr}
    c862:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c864:	4604      	mov	r4, r0
    c866:	460d      	mov	r5, r1
    c868:	b14b      	cbz	r3, c87e <__i2b+0x1e>
    c86a:	6858      	ldr	r0, [r3, #4]
    c86c:	b1b0      	cbz	r0, c89c <__i2b+0x3c>
    c86e:	6802      	ldr	r2, [r0, #0]
    c870:	605a      	str	r2, [r3, #4]
    c872:	2200      	movs	r2, #0
    c874:	2301      	movs	r3, #1
    c876:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c87a:	60c2      	str	r2, [r0, #12]
    c87c:	bd38      	pop	{r3, r4, r5, pc}
    c87e:	2221      	movs	r2, #33	; 0x21
    c880:	2104      	movs	r1, #4
    c882:	f002 fa61 	bl	ed48 <_calloc_r>
    c886:	4603      	mov	r3, r0
    c888:	6460      	str	r0, [r4, #68]	; 0x44
    c88a:	2800      	cmp	r0, #0
    c88c:	d1ed      	bne.n	c86a <__i2b+0xa>
    c88e:	4b09      	ldr	r3, [pc, #36]	; (c8b4 <__i2b+0x54>)
    c890:	4809      	ldr	r0, [pc, #36]	; (c8b8 <__i2b+0x58>)
    c892:	2200      	movs	r2, #0
    c894:	f240 1145 	movw	r1, #325	; 0x145
    c898:	f002 fa36 	bl	ed08 <__assert_func>
    c89c:	221c      	movs	r2, #28
    c89e:	2101      	movs	r1, #1
    c8a0:	4620      	mov	r0, r4
    c8a2:	f002 fa51 	bl	ed48 <_calloc_r>
    c8a6:	2800      	cmp	r0, #0
    c8a8:	d0f1      	beq.n	c88e <__i2b+0x2e>
    c8aa:	2201      	movs	r2, #1
    c8ac:	2302      	movs	r3, #2
    c8ae:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c8b2:	e7de      	b.n	c872 <__i2b+0x12>
    c8b4:	20000af8 	.word	0x20000af8
    c8b8:	20000b0c 	.word	0x20000b0c

0000c8bc <__multiply>:
    c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8c0:	690e      	ldr	r6, [r1, #16]
    c8c2:	6915      	ldr	r5, [r2, #16]
    c8c4:	42ae      	cmp	r6, r5
    c8c6:	b085      	sub	sp, #20
    c8c8:	4688      	mov	r8, r1
    c8ca:	4614      	mov	r4, r2
    c8cc:	db05      	blt.n	c8da <__multiply+0x1e>
    c8ce:	462a      	mov	r2, r5
    c8d0:	4623      	mov	r3, r4
    c8d2:	4635      	mov	r5, r6
    c8d4:	460c      	mov	r4, r1
    c8d6:	4616      	mov	r6, r2
    c8d8:	4698      	mov	r8, r3
    c8da:	68a3      	ldr	r3, [r4, #8]
    c8dc:	6861      	ldr	r1, [r4, #4]
    c8de:	19af      	adds	r7, r5, r6
    c8e0:	42bb      	cmp	r3, r7
    c8e2:	bfb8      	it	lt
    c8e4:	3101      	addlt	r1, #1
    c8e6:	f7ff fee9 	bl	c6bc <_Balloc>
    c8ea:	9001      	str	r0, [sp, #4]
    c8ec:	2800      	cmp	r0, #0
    c8ee:	f000 8087 	beq.w	ca00 <__multiply+0x144>
    c8f2:	9b01      	ldr	r3, [sp, #4]
    c8f4:	f103 0914 	add.w	r9, r3, #20
    c8f8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c8fc:	45d1      	cmp	r9, sl
    c8fe:	d205      	bcs.n	c90c <__multiply+0x50>
    c900:	464b      	mov	r3, r9
    c902:	2200      	movs	r2, #0
    c904:	f843 2b04 	str.w	r2, [r3], #4
    c908:	459a      	cmp	sl, r3
    c90a:	d8fb      	bhi.n	c904 <__multiply+0x48>
    c90c:	f108 0814 	add.w	r8, r8, #20
    c910:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    c914:	f104 0314 	add.w	r3, r4, #20
    c918:	45d8      	cmp	r8, fp
    c91a:	461a      	mov	r2, r3
    c91c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    c920:	d25f      	bcs.n	c9e2 <__multiply+0x126>
    c922:	1b2b      	subs	r3, r5, r4
    c924:	3b15      	subs	r3, #21
    c926:	f023 0303 	bic.w	r3, r3, #3
    c92a:	3304      	adds	r3, #4
    c92c:	3415      	adds	r4, #21
    c92e:	42a5      	cmp	r5, r4
    c930:	bf38      	it	cc
    c932:	2304      	movcc	r3, #4
    c934:	e9cd a702 	strd	sl, r7, [sp, #8]
    c938:	46ac      	mov	ip, r5
    c93a:	461f      	mov	r7, r3
    c93c:	4692      	mov	sl, r2
    c93e:	e005      	b.n	c94c <__multiply+0x90>
    c940:	0c09      	lsrs	r1, r1, #16
    c942:	d129      	bne.n	c998 <__multiply+0xdc>
    c944:	45c3      	cmp	fp, r8
    c946:	f109 0904 	add.w	r9, r9, #4
    c94a:	d948      	bls.n	c9de <__multiply+0x122>
    c94c:	f858 1b04 	ldr.w	r1, [r8], #4
    c950:	b28d      	uxth	r5, r1
    c952:	2d00      	cmp	r5, #0
    c954:	d0f4      	beq.n	c940 <__multiply+0x84>
    c956:	4656      	mov	r6, sl
    c958:	464c      	mov	r4, r9
    c95a:	2300      	movs	r3, #0
    c95c:	f856 1b04 	ldr.w	r1, [r6], #4
    c960:	6822      	ldr	r2, [r4, #0]
    c962:	fa1f fe81 	uxth.w	lr, r1
    c966:	b290      	uxth	r0, r2
    c968:	0c09      	lsrs	r1, r1, #16
    c96a:	fb05 000e 	mla	r0, r5, lr, r0
    c96e:	0c12      	lsrs	r2, r2, #16
    c970:	4403      	add	r3, r0
    c972:	fb05 2201 	mla	r2, r5, r1, r2
    c976:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c97a:	b29b      	uxth	r3, r3
    c97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c980:	45b4      	cmp	ip, r6
    c982:	f844 3b04 	str.w	r3, [r4], #4
    c986:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c98a:	d8e7      	bhi.n	c95c <__multiply+0xa0>
    c98c:	f849 3007 	str.w	r3, [r9, r7]
    c990:	f858 1c04 	ldr.w	r1, [r8, #-4]
    c994:	0c09      	lsrs	r1, r1, #16
    c996:	d0d5      	beq.n	c944 <__multiply+0x88>
    c998:	f8d9 3000 	ldr.w	r3, [r9]
    c99c:	4650      	mov	r0, sl
    c99e:	461a      	mov	r2, r3
    c9a0:	464c      	mov	r4, r9
    c9a2:	2600      	movs	r6, #0
    c9a4:	8805      	ldrh	r5, [r0, #0]
    c9a6:	0c12      	lsrs	r2, r2, #16
    c9a8:	fb01 2205 	mla	r2, r1, r5, r2
    c9ac:	4416      	add	r6, r2
    c9ae:	b29b      	uxth	r3, r3
    c9b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    c9b4:	f844 3b04 	str.w	r3, [r4], #4
    c9b8:	f850 5b04 	ldr.w	r5, [r0], #4
    c9bc:	6822      	ldr	r2, [r4, #0]
    c9be:	0c2d      	lsrs	r5, r5, #16
    c9c0:	b293      	uxth	r3, r2
    c9c2:	fb01 3305 	mla	r3, r1, r5, r3
    c9c6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    c9ca:	4584      	cmp	ip, r0
    c9cc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    c9d0:	d8e8      	bhi.n	c9a4 <__multiply+0xe8>
    c9d2:	45c3      	cmp	fp, r8
    c9d4:	f849 3007 	str.w	r3, [r9, r7]
    c9d8:	f109 0904 	add.w	r9, r9, #4
    c9dc:	d8b6      	bhi.n	c94c <__multiply+0x90>
    c9de:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    c9e2:	2f00      	cmp	r7, #0
    c9e4:	dc02      	bgt.n	c9ec <__multiply+0x130>
    c9e6:	e005      	b.n	c9f4 <__multiply+0x138>
    c9e8:	3f01      	subs	r7, #1
    c9ea:	d003      	beq.n	c9f4 <__multiply+0x138>
    c9ec:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d0f9      	beq.n	c9e8 <__multiply+0x12c>
    c9f4:	9b01      	ldr	r3, [sp, #4]
    c9f6:	4618      	mov	r0, r3
    c9f8:	611f      	str	r7, [r3, #16]
    c9fa:	b005      	add	sp, #20
    c9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca00:	4b03      	ldr	r3, [pc, #12]	; (ca10 <__multiply+0x154>)
    ca02:	4804      	ldr	r0, [pc, #16]	; (ca14 <__multiply+0x158>)
    ca04:	9a01      	ldr	r2, [sp, #4]
    ca06:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ca0a:	f002 f97d 	bl	ed08 <__assert_func>
    ca0e:	bf00      	nop
    ca10:	20000af8 	.word	0x20000af8
    ca14:	20000b0c 	.word	0x20000b0c

0000ca18 <__pow5mult>:
    ca18:	f012 0303 	ands.w	r3, r2, #3
    ca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca20:	4614      	mov	r4, r2
    ca22:	4606      	mov	r6, r0
    ca24:	d132      	bne.n	ca8c <__pow5mult+0x74>
    ca26:	460d      	mov	r5, r1
    ca28:	10a4      	asrs	r4, r4, #2
    ca2a:	d020      	beq.n	ca6e <__pow5mult+0x56>
    ca2c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ca30:	f1b8 0f00 	cmp.w	r8, #0
    ca34:	d033      	beq.n	ca9e <__pow5mult+0x86>
    ca36:	07e3      	lsls	r3, r4, #31
    ca38:	f04f 0700 	mov.w	r7, #0
    ca3c:	d407      	bmi.n	ca4e <__pow5mult+0x36>
    ca3e:	1064      	asrs	r4, r4, #1
    ca40:	d015      	beq.n	ca6e <__pow5mult+0x56>
    ca42:	f8d8 0000 	ldr.w	r0, [r8]
    ca46:	b1a8      	cbz	r0, ca74 <__pow5mult+0x5c>
    ca48:	4680      	mov	r8, r0
    ca4a:	07e3      	lsls	r3, r4, #31
    ca4c:	d5f7      	bpl.n	ca3e <__pow5mult+0x26>
    ca4e:	4642      	mov	r2, r8
    ca50:	4629      	mov	r1, r5
    ca52:	4630      	mov	r0, r6
    ca54:	f7ff ff32 	bl	c8bc <__multiply>
    ca58:	b1b5      	cbz	r5, ca88 <__pow5mult+0x70>
    ca5a:	6869      	ldr	r1, [r5, #4]
    ca5c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ca5e:	1064      	asrs	r4, r4, #1
    ca60:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    ca64:	602a      	str	r2, [r5, #0]
    ca66:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    ca6a:	4605      	mov	r5, r0
    ca6c:	d1e9      	bne.n	ca42 <__pow5mult+0x2a>
    ca6e:	4628      	mov	r0, r5
    ca70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca74:	4642      	mov	r2, r8
    ca76:	4641      	mov	r1, r8
    ca78:	4630      	mov	r0, r6
    ca7a:	f7ff ff1f 	bl	c8bc <__multiply>
    ca7e:	f8c8 0000 	str.w	r0, [r8]
    ca82:	6007      	str	r7, [r0, #0]
    ca84:	4680      	mov	r8, r0
    ca86:	e7e0      	b.n	ca4a <__pow5mult+0x32>
    ca88:	4605      	mov	r5, r0
    ca8a:	e7d8      	b.n	ca3e <__pow5mult+0x26>
    ca8c:	3b01      	subs	r3, #1
    ca8e:	4a0f      	ldr	r2, [pc, #60]	; (cacc <__pow5mult+0xb4>)
    ca90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ca94:	2300      	movs	r3, #0
    ca96:	f7ff fe41 	bl	c71c <__multadd>
    ca9a:	4605      	mov	r5, r0
    ca9c:	e7c4      	b.n	ca28 <__pow5mult+0x10>
    ca9e:	2101      	movs	r1, #1
    caa0:	4630      	mov	r0, r6
    caa2:	f7ff fe0b 	bl	c6bc <_Balloc>
    caa6:	4680      	mov	r8, r0
    caa8:	b140      	cbz	r0, cabc <__pow5mult+0xa4>
    caaa:	2301      	movs	r3, #1
    caac:	f240 2271 	movw	r2, #625	; 0x271
    cab0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    cab4:	2300      	movs	r3, #0
    cab6:	6430      	str	r0, [r6, #64]	; 0x40
    cab8:	6003      	str	r3, [r0, #0]
    caba:	e7bc      	b.n	ca36 <__pow5mult+0x1e>
    cabc:	4b04      	ldr	r3, [pc, #16]	; (cad0 <__pow5mult+0xb8>)
    cabe:	4805      	ldr	r0, [pc, #20]	; (cad4 <__pow5mult+0xbc>)
    cac0:	4642      	mov	r2, r8
    cac2:	f240 1145 	movw	r1, #325	; 0x145
    cac6:	f002 f91f 	bl	ed08 <__assert_func>
    caca:	bf00      	nop
    cacc:	2000112c 	.word	0x2000112c
    cad0:	20000af8 	.word	0x20000af8
    cad4:	20000b0c 	.word	0x20000b0c

0000cad8 <__lshift>:
    cad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cadc:	460d      	mov	r5, r1
    cade:	4614      	mov	r4, r2
    cae0:	692f      	ldr	r7, [r5, #16]
    cae2:	68ab      	ldr	r3, [r5, #8]
    cae4:	6849      	ldr	r1, [r1, #4]
    cae6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    caea:	1c7e      	adds	r6, r7, #1
    caec:	429e      	cmp	r6, r3
    caee:	4680      	mov	r8, r0
    caf0:	ea4f 1962 	mov.w	r9, r2, asr #5
    caf4:	dd04      	ble.n	cb00 <__lshift+0x28>
    caf6:	005b      	lsls	r3, r3, #1
    caf8:	429e      	cmp	r6, r3
    cafa:	f101 0101 	add.w	r1, r1, #1
    cafe:	dcfa      	bgt.n	caf6 <__lshift+0x1e>
    cb00:	4640      	mov	r0, r8
    cb02:	f7ff fddb 	bl	c6bc <_Balloc>
    cb06:	4684      	mov	ip, r0
    cb08:	2800      	cmp	r0, #0
    cb0a:	d052      	beq.n	cbb2 <__lshift+0xda>
    cb0c:	f1b9 0f00 	cmp.w	r9, #0
    cb10:	f100 0214 	add.w	r2, r0, #20
    cb14:	dd0e      	ble.n	cb34 <__lshift+0x5c>
    cb16:	f109 0105 	add.w	r1, r9, #5
    cb1a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    cb1e:	4613      	mov	r3, r2
    cb20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cb24:	2000      	movs	r0, #0
    cb26:	f843 0b04 	str.w	r0, [r3], #4
    cb2a:	428b      	cmp	r3, r1
    cb2c:	d1fb      	bne.n	cb26 <__lshift+0x4e>
    cb2e:	f1ae 0314 	sub.w	r3, lr, #20
    cb32:	441a      	add	r2, r3
    cb34:	6929      	ldr	r1, [r5, #16]
    cb36:	f105 0314 	add.w	r3, r5, #20
    cb3a:	f014 0e1f 	ands.w	lr, r4, #31
    cb3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cb42:	d02e      	beq.n	cba2 <__lshift+0xca>
    cb44:	f1ce 0920 	rsb	r9, lr, #32
    cb48:	4610      	mov	r0, r2
    cb4a:	f04f 0a00 	mov.w	sl, #0
    cb4e:	681c      	ldr	r4, [r3, #0]
    cb50:	fa04 f40e 	lsl.w	r4, r4, lr
    cb54:	ea44 040a 	orr.w	r4, r4, sl
    cb58:	f840 4b04 	str.w	r4, [r0], #4
    cb5c:	f853 4b04 	ldr.w	r4, [r3], #4
    cb60:	4299      	cmp	r1, r3
    cb62:	fa24 fa09 	lsr.w	sl, r4, r9
    cb66:	d8f2      	bhi.n	cb4e <__lshift+0x76>
    cb68:	1b4b      	subs	r3, r1, r5
    cb6a:	3b15      	subs	r3, #21
    cb6c:	f023 0303 	bic.w	r3, r3, #3
    cb70:	3304      	adds	r3, #4
    cb72:	f105 0015 	add.w	r0, r5, #21
    cb76:	4281      	cmp	r1, r0
    cb78:	bf38      	it	cc
    cb7a:	2304      	movcc	r3, #4
    cb7c:	f1ba 0f00 	cmp.w	sl, #0
    cb80:	bf18      	it	ne
    cb82:	4637      	movne	r7, r6
    cb84:	f842 a003 	str.w	sl, [r2, r3]
    cb88:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cb8c:	686a      	ldr	r2, [r5, #4]
    cb8e:	f8cc 7010 	str.w	r7, [ip, #16]
    cb92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cb96:	6029      	str	r1, [r5, #0]
    cb98:	4660      	mov	r0, ip
    cb9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    cb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cba2:	3a04      	subs	r2, #4
    cba4:	f853 0b04 	ldr.w	r0, [r3], #4
    cba8:	f842 0f04 	str.w	r0, [r2, #4]!
    cbac:	4299      	cmp	r1, r3
    cbae:	d8f9      	bhi.n	cba4 <__lshift+0xcc>
    cbb0:	e7ea      	b.n	cb88 <__lshift+0xb0>
    cbb2:	4b03      	ldr	r3, [pc, #12]	; (cbc0 <__lshift+0xe8>)
    cbb4:	4803      	ldr	r0, [pc, #12]	; (cbc4 <__lshift+0xec>)
    cbb6:	4662      	mov	r2, ip
    cbb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    cbbc:	f002 f8a4 	bl	ed08 <__assert_func>
    cbc0:	20000af8 	.word	0x20000af8
    cbc4:	20000b0c 	.word	0x20000b0c

0000cbc8 <__mcmp>:
    cbc8:	690b      	ldr	r3, [r1, #16]
    cbca:	4684      	mov	ip, r0
    cbcc:	6900      	ldr	r0, [r0, #16]
    cbce:	1ac0      	subs	r0, r0, r3
    cbd0:	d116      	bne.n	cc00 <__mcmp+0x38>
    cbd2:	f10c 0c14 	add.w	ip, ip, #20
    cbd6:	3114      	adds	r1, #20
    cbd8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    cbdc:	b410      	push	{r4}
    cbde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    cbe2:	e001      	b.n	cbe8 <__mcmp+0x20>
    cbe4:	4594      	cmp	ip, r2
    cbe6:	d208      	bcs.n	cbfa <__mcmp+0x32>
    cbe8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cbec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cbf0:	428c      	cmp	r4, r1
    cbf2:	d0f7      	beq.n	cbe4 <__mcmp+0x1c>
    cbf4:	d205      	bcs.n	cc02 <__mcmp+0x3a>
    cbf6:	f04f 30ff 	mov.w	r0, #4294967295
    cbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    cbfe:	4770      	bx	lr
    cc00:	4770      	bx	lr
    cc02:	2001      	movs	r0, #1
    cc04:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc08:	4770      	bx	lr
    cc0a:	bf00      	nop

0000cc0c <__mdiff>:
    cc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc10:	690f      	ldr	r7, [r1, #16]
    cc12:	6913      	ldr	r3, [r2, #16]
    cc14:	1aff      	subs	r7, r7, r3
    cc16:	2f00      	cmp	r7, #0
    cc18:	460e      	mov	r6, r1
    cc1a:	4690      	mov	r8, r2
    cc1c:	d17f      	bne.n	cd1e <__mdiff+0x112>
    cc1e:	f101 0514 	add.w	r5, r1, #20
    cc22:	3214      	adds	r2, #20
    cc24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    cc28:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cc2c:	e001      	b.n	cc32 <__mdiff+0x26>
    cc2e:	429d      	cmp	r5, r3
    cc30:	d278      	bcs.n	cd24 <__mdiff+0x118>
    cc32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cc36:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cc3a:	42a1      	cmp	r1, r4
    cc3c:	d0f7      	beq.n	cc2e <__mdiff+0x22>
    cc3e:	d369      	bcc.n	cd14 <__mdiff+0x108>
    cc40:	6871      	ldr	r1, [r6, #4]
    cc42:	f7ff fd3b 	bl	c6bc <_Balloc>
    cc46:	4681      	mov	r9, r0
    cc48:	2800      	cmp	r0, #0
    cc4a:	d077      	beq.n	cd3c <__mdiff+0x130>
    cc4c:	6935      	ldr	r5, [r6, #16]
    cc4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    cc52:	60c7      	str	r7, [r0, #12]
    cc54:	f108 0e14 	add.w	lr, r8, #20
    cc58:	f106 0014 	add.w	r0, r6, #20
    cc5c:	f109 0a14 	add.w	sl, r9, #20
    cc60:	f106 0110 	add.w	r1, r6, #16
    cc64:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    cc68:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    cc6c:	4656      	mov	r6, sl
    cc6e:	f04f 0c00 	mov.w	ip, #0
    cc72:	f85e 4b04 	ldr.w	r4, [lr], #4
    cc76:	f851 bf04 	ldr.w	fp, [r1, #4]!
    cc7a:	b2a3      	uxth	r3, r4
    cc7c:	fa1c fc8b 	uxtah	ip, ip, fp
    cc80:	ebac 0303 	sub.w	r3, ip, r3
    cc84:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    cc88:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    cc8c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    cc90:	b29b      	uxth	r3, r3
    cc92:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cc96:	4572      	cmp	r2, lr
    cc98:	f846 3b04 	str.w	r3, [r6], #4
    cc9c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    cca0:	d8e7      	bhi.n	cc72 <__mdiff+0x66>
    cca2:	eba2 0108 	sub.w	r1, r2, r8
    cca6:	3915      	subs	r1, #21
    cca8:	f108 0815 	add.w	r8, r8, #21
    ccac:	4542      	cmp	r2, r8
    ccae:	f021 0403 	bic.w	r4, r1, #3
    ccb2:	f104 0404 	add.w	r4, r4, #4
    ccb6:	bf38      	it	cc
    ccb8:	2404      	movcc	r4, #4
    ccba:	4420      	add	r0, r4
    ccbc:	f021 0203 	bic.w	r2, r1, #3
    ccc0:	bf38      	it	cc
    ccc2:	2200      	movcc	r2, #0
    ccc4:	4287      	cmp	r7, r0
    ccc6:	4452      	add	r2, sl
    ccc8:	4454      	add	r4, sl
    ccca:	d918      	bls.n	ccfe <__mdiff+0xf2>
    cccc:	4626      	mov	r6, r4
    ccce:	4601      	mov	r1, r0
    ccd0:	f851 3b04 	ldr.w	r3, [r1], #4
    ccd4:	fa1c fc83 	uxtah	ip, ip, r3
    ccd8:	ea4f 422c 	mov.w	r2, ip, asr #16
    ccdc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cce0:	fa1f fc8c 	uxth.w	ip, ip
    cce4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    cce8:	428f      	cmp	r7, r1
    ccea:	f846 3b04 	str.w	r3, [r6], #4
    ccee:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ccf2:	d8ed      	bhi.n	ccd0 <__mdiff+0xc4>
    ccf4:	3f01      	subs	r7, #1
    ccf6:	1a3f      	subs	r7, r7, r0
    ccf8:	f027 0703 	bic.w	r7, r7, #3
    ccfc:	19e2      	adds	r2, r4, r7
    ccfe:	b923      	cbnz	r3, cd0a <__mdiff+0xfe>
    cd00:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    cd04:	3d01      	subs	r5, #1
    cd06:	2b00      	cmp	r3, #0
    cd08:	d0fa      	beq.n	cd00 <__mdiff+0xf4>
    cd0a:	f8c9 5010 	str.w	r5, [r9, #16]
    cd0e:	4648      	mov	r0, r9
    cd10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd14:	4633      	mov	r3, r6
    cd16:	2701      	movs	r7, #1
    cd18:	4646      	mov	r6, r8
    cd1a:	4698      	mov	r8, r3
    cd1c:	e790      	b.n	cc40 <__mdiff+0x34>
    cd1e:	dbf9      	blt.n	cd14 <__mdiff+0x108>
    cd20:	2700      	movs	r7, #0
    cd22:	e78d      	b.n	cc40 <__mdiff+0x34>
    cd24:	2100      	movs	r1, #0
    cd26:	f7ff fcc9 	bl	c6bc <_Balloc>
    cd2a:	4681      	mov	r9, r0
    cd2c:	b168      	cbz	r0, cd4a <__mdiff+0x13e>
    cd2e:	2201      	movs	r2, #1
    cd30:	2300      	movs	r3, #0
    cd32:	e9c9 2304 	strd	r2, r3, [r9, #16]
    cd36:	4648      	mov	r0, r9
    cd38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd3c:	4b06      	ldr	r3, [pc, #24]	; (cd58 <__mdiff+0x14c>)
    cd3e:	4807      	ldr	r0, [pc, #28]	; (cd5c <__mdiff+0x150>)
    cd40:	464a      	mov	r2, r9
    cd42:	f240 2145 	movw	r1, #581	; 0x245
    cd46:	f001 ffdf 	bl	ed08 <__assert_func>
    cd4a:	4b03      	ldr	r3, [pc, #12]	; (cd58 <__mdiff+0x14c>)
    cd4c:	4803      	ldr	r0, [pc, #12]	; (cd5c <__mdiff+0x150>)
    cd4e:	464a      	mov	r2, r9
    cd50:	f240 2137 	movw	r1, #567	; 0x237
    cd54:	f001 ffd8 	bl	ed08 <__assert_func>
    cd58:	20000af8 	.word	0x20000af8
    cd5c:	20000b0c 	.word	0x20000b0c

0000cd60 <__d2b>:
    cd60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cd64:	4688      	mov	r8, r1
    cd66:	b083      	sub	sp, #12
    cd68:	2101      	movs	r1, #1
    cd6a:	ec57 6b10 	vmov	r6, r7, d0
    cd6e:	4615      	mov	r5, r2
    cd70:	f7ff fca4 	bl	c6bc <_Balloc>
    cd74:	4604      	mov	r4, r0
    cd76:	2800      	cmp	r0, #0
    cd78:	d051      	beq.n	ce1e <__d2b+0xbe>
    cd7a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    cd7e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    cd82:	f1b9 0f00 	cmp.w	r9, #0
    cd86:	d001      	beq.n	cd8c <__d2b+0x2c>
    cd88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cd8c:	2e00      	cmp	r6, #0
    cd8e:	9301      	str	r3, [sp, #4]
    cd90:	d118      	bne.n	cdc4 <__d2b+0x64>
    cd92:	a801      	add	r0, sp, #4
    cd94:	f7ff fd34 	bl	c800 <__lo0bits>
    cd98:	9a01      	ldr	r2, [sp, #4]
    cd9a:	6162      	str	r2, [r4, #20]
    cd9c:	2201      	movs	r2, #1
    cd9e:	f100 0320 	add.w	r3, r0, #32
    cda2:	6122      	str	r2, [r4, #16]
    cda4:	f1b9 0f00 	cmp.w	r9, #0
    cda8:	d025      	beq.n	cdf6 <__d2b+0x96>
    cdaa:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    cdae:	eb09 0203 	add.w	r2, r9, r3
    cdb2:	4620      	mov	r0, r4
    cdb4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    cdb8:	f8c8 2000 	str.w	r2, [r8]
    cdbc:	602b      	str	r3, [r5, #0]
    cdbe:	b003      	add	sp, #12
    cdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cdc4:	4668      	mov	r0, sp
    cdc6:	9600      	str	r6, [sp, #0]
    cdc8:	f7ff fd1a 	bl	c800 <__lo0bits>
    cdcc:	4603      	mov	r3, r0
    cdce:	b310      	cbz	r0, ce16 <__d2b+0xb6>
    cdd0:	e9dd 0200 	ldrd	r0, r2, [sp]
    cdd4:	f1c3 0120 	rsb	r1, r3, #32
    cdd8:	fa02 f101 	lsl.w	r1, r2, r1
    cddc:	4301      	orrs	r1, r0
    cdde:	40da      	lsrs	r2, r3
    cde0:	6161      	str	r1, [r4, #20]
    cde2:	9201      	str	r2, [sp, #4]
    cde4:	2a00      	cmp	r2, #0
    cde6:	61a2      	str	r2, [r4, #24]
    cde8:	bf14      	ite	ne
    cdea:	2202      	movne	r2, #2
    cdec:	2201      	moveq	r2, #1
    cdee:	6122      	str	r2, [r4, #16]
    cdf0:	f1b9 0f00 	cmp.w	r9, #0
    cdf4:	d1d9      	bne.n	cdaa <__d2b+0x4a>
    cdf6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    cdfa:	f8c8 3000 	str.w	r3, [r8]
    cdfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    ce02:	6918      	ldr	r0, [r3, #16]
    ce04:	f7ff fcdc 	bl	c7c0 <__hi0bits>
    ce08:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    ce0c:	4620      	mov	r0, r4
    ce0e:	602b      	str	r3, [r5, #0]
    ce10:	b003      	add	sp, #12
    ce12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce16:	9a00      	ldr	r2, [sp, #0]
    ce18:	6162      	str	r2, [r4, #20]
    ce1a:	9a01      	ldr	r2, [sp, #4]
    ce1c:	e7e2      	b.n	cde4 <__d2b+0x84>
    ce1e:	4b03      	ldr	r3, [pc, #12]	; (ce2c <__d2b+0xcc>)
    ce20:	4803      	ldr	r0, [pc, #12]	; (ce30 <__d2b+0xd0>)
    ce22:	4622      	mov	r2, r4
    ce24:	f240 310f 	movw	r1, #783	; 0x30f
    ce28:	f001 ff6e 	bl	ed08 <__assert_func>
    ce2c:	20000af8 	.word	0x20000af8
    ce30:	20000b0c 	.word	0x20000b0c

0000ce34 <__ascii_wctomb>:
    ce34:	b149      	cbz	r1, ce4a <__ascii_wctomb+0x16>
    ce36:	2aff      	cmp	r2, #255	; 0xff
    ce38:	d802      	bhi.n	ce40 <__ascii_wctomb+0xc>
    ce3a:	700a      	strb	r2, [r1, #0]
    ce3c:	2001      	movs	r0, #1
    ce3e:	4770      	bx	lr
    ce40:	238a      	movs	r3, #138	; 0x8a
    ce42:	6003      	str	r3, [r0, #0]
    ce44:	f04f 30ff 	mov.w	r0, #4294967295
    ce48:	4770      	bx	lr
    ce4a:	4608      	mov	r0, r1
    ce4c:	4770      	bx	lr
    ce4e:	bf00      	nop

0000ce50 <_svfprintf_r>:
    ce50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce54:	ed2d 8b08 	vpush	{d8-d11}
    ce58:	b0d1      	sub	sp, #324	; 0x144
    ce5a:	460c      	mov	r4, r1
    ce5c:	ee0b 1a10 	vmov	s22, r1
    ce60:	4690      	mov	r8, r2
    ce62:	9308      	str	r3, [sp, #32]
    ce64:	4683      	mov	fp, r0
    ce66:	f001 febb 	bl	ebe0 <_localeconv_r>
    ce6a:	6803      	ldr	r3, [r0, #0]
    ce6c:	9312      	str	r3, [sp, #72]	; 0x48
    ce6e:	4618      	mov	r0, r3
    ce70:	f7ff fa06 	bl	c280 <strlen>
    ce74:	af20      	add	r7, sp, #128	; 0x80
    ce76:	9010      	str	r0, [sp, #64]	; 0x40
    ce78:	2208      	movs	r2, #8
    ce7a:	2100      	movs	r1, #0
    ce7c:	4638      	mov	r0, r7
    ce7e:	f7fe fe9f 	bl	bbc0 <memset>
    ce82:	89a3      	ldrh	r3, [r4, #12]
    ce84:	061b      	lsls	r3, r3, #24
    ce86:	d503      	bpl.n	ce90 <_svfprintf_r+0x40>
    ce88:	6923      	ldr	r3, [r4, #16]
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	f000 8755 	beq.w	dd3a <_svfprintf_r+0xeea>
    ce90:	2300      	movs	r3, #0
    ce92:	ed9f 8b83 	vldr	d8, [pc, #524]	; d0a0 <_svfprintf_r+0x250>
    ce96:	ed9f 9b84 	vldr	d9, [pc, #528]	; d0a8 <_svfprintf_r+0x258>
    ce9a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    ce9e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    cea2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    cea6:	aa27      	add	r2, sp, #156	; 0x9c
    cea8:	930e      	str	r3, [sp, #56]	; 0x38
    ceaa:	9224      	str	r2, [sp, #144]	; 0x90
    ceac:	4692      	mov	sl, r2
    ceae:	9311      	str	r3, [sp, #68]	; 0x44
    ceb0:	9304      	str	r3, [sp, #16]
    ceb2:	4644      	mov	r4, r8
    ceb4:	46a1      	mov	r9, r4
    ceb6:	4b7e      	ldr	r3, [pc, #504]	; (d0b0 <_svfprintf_r+0x260>)
    ceb8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cebc:	f7fe ff6a 	bl	bd94 <__locale_mb_cur_max>
    cec0:	464a      	mov	r2, r9
    cec2:	4603      	mov	r3, r0
    cec4:	a91c      	add	r1, sp, #112	; 0x70
    cec6:	9700      	str	r7, [sp, #0]
    cec8:	4658      	mov	r0, fp
    ceca:	47a8      	blx	r5
    cecc:	2800      	cmp	r0, #0
    cece:	f000 80b0 	beq.w	d032 <_svfprintf_r+0x1e2>
    ced2:	f2c0 80a6 	blt.w	d022 <_svfprintf_r+0x1d2>
    ced6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ced8:	2a25      	cmp	r2, #37	; 0x25
    ceda:	4603      	mov	r3, r0
    cedc:	d001      	beq.n	cee2 <_svfprintf_r+0x92>
    cede:	4499      	add	r9, r3
    cee0:	e7e9      	b.n	ceb6 <_svfprintf_r+0x66>
    cee2:	ebb9 0504 	subs.w	r5, r9, r4
    cee6:	4606      	mov	r6, r0
    cee8:	f040 80a7 	bne.w	d03a <_svfprintf_r+0x1ea>
    ceec:	2300      	movs	r3, #0
    ceee:	f04f 32ff 	mov.w	r2, #4294967295
    cef2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    cef6:	4698      	mov	r8, r3
    cef8:	9306      	str	r3, [sp, #24]
    cefa:	f109 0901 	add.w	r9, r9, #1
    cefe:	f899 3000 	ldrb.w	r3, [r9]
    cf02:	9203      	str	r2, [sp, #12]
    cf04:	252b      	movs	r5, #43	; 0x2b
    cf06:	2620      	movs	r6, #32
    cf08:	f109 0901 	add.w	r9, r9, #1
    cf0c:	f1a3 0220 	sub.w	r2, r3, #32
    cf10:	2a5a      	cmp	r2, #90	; 0x5a
    cf12:	f200 80cf 	bhi.w	d0b4 <_svfprintf_r+0x264>
    cf16:	e8df f012 	tbh	[pc, r2, lsl #1]
    cf1a:	02e8      	.short	0x02e8
    cf1c:	00cd00cd 	.word	0x00cd00cd
    cf20:	00cd02e3 	.word	0x00cd02e3
    cf24:	00cd00cd 	.word	0x00cd00cd
    cf28:	00cd006a 	.word	0x00cd006a
    cf2c:	020500cd 	.word	0x020500cd
    cf30:	00cd0284 	.word	0x00cd0284
    cf34:	02c90210 	.word	0x02c90210
    cf38:	02bd00cd 	.word	0x02bd00cd
    cf3c:	005b005b 	.word	0x005b005b
    cf40:	005b005b 	.word	0x005b005b
    cf44:	005b005b 	.word	0x005b005b
    cf48:	005b005b 	.word	0x005b005b
    cf4c:	00cd005b 	.word	0x00cd005b
    cf50:	00cd00cd 	.word	0x00cd00cd
    cf54:	00cd00cd 	.word	0x00cd00cd
    cf58:	00cd00cd 	.word	0x00cd00cd
    cf5c:	00cd0153 	.word	0x00cd0153
    cf60:	021a0183 	.word	0x021a0183
    cf64:	01530153 	.word	0x01530153
    cf68:	00cd0153 	.word	0x00cd0153
    cf6c:	00cd00cd 	.word	0x00cd00cd
    cf70:	021500cd 	.word	0x021500cd
    cf74:	00cd00cd 	.word	0x00cd00cd
    cf78:	00cd0296 	.word	0x00cd0296
    cf7c:	00cd00cd 	.word	0x00cd00cd
    cf80:	00cd01ab 	.word	0x00cd01ab
    cf84:	00cd02aa 	.word	0x00cd02aa
    cf88:	06e300cd 	.word	0x06e300cd
    cf8c:	00cd00cd 	.word	0x00cd00cd
    cf90:	00cd00cd 	.word	0x00cd00cd
    cf94:	00cd00cd 	.word	0x00cd00cd
    cf98:	00cd00cd 	.word	0x00cd00cd
    cf9c:	00cd0153 	.word	0x00cd0153
    cfa0:	01de0183 	.word	0x01de0183
    cfa4:	01530153 	.word	0x01530153
    cfa8:	02770153 	.word	0x02770153
    cfac:	007f01de 	.word	0x007f01de
    cfb0:	028900cd 	.word	0x028900cd
    cfb4:	025f00cd 	.word	0x025f00cd
    cfb8:	022f06e0 	.word	0x022f06e0
    cfbc:	00cd007f 	.word	0x00cd007f
    cfc0:	007c01ab 	.word	0x007c01ab
    cfc4:	00cd06b8 	.word	0x00cd06b8
    cfc8:	06bd00cd 	.word	0x06bd00cd
    cfcc:	007c00cd 	.word	0x007c00cd
    cfd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cfd4:	2100      	movs	r1, #0
    cfd6:	f819 3b01 	ldrb.w	r3, [r9], #1
    cfda:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    cfde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    cfe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cfe6:	2a09      	cmp	r2, #9
    cfe8:	d9f5      	bls.n	cfd6 <_svfprintf_r+0x186>
    cfea:	9106      	str	r1, [sp, #24]
    cfec:	e78e      	b.n	cf0c <_svfprintf_r+0xbc>
    cfee:	4658      	mov	r0, fp
    cff0:	f001 fdf6 	bl	ebe0 <_localeconv_r>
    cff4:	6843      	ldr	r3, [r0, #4]
    cff6:	9315      	str	r3, [sp, #84]	; 0x54
    cff8:	4618      	mov	r0, r3
    cffa:	f7ff f941 	bl	c280 <strlen>
    cffe:	9016      	str	r0, [sp, #88]	; 0x58
    d000:	4658      	mov	r0, fp
    d002:	f001 fded 	bl	ebe0 <_localeconv_r>
    d006:	6883      	ldr	r3, [r0, #8]
    d008:	9313      	str	r3, [sp, #76]	; 0x4c
    d00a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d00c:	2b00      	cmp	r3, #0
    d00e:	f040 862d 	bne.w	dc6c <_svfprintf_r+0xe1c>
    d012:	f899 3000 	ldrb.w	r3, [r9]
    d016:	e777      	b.n	cf08 <_svfprintf_r+0xb8>
    d018:	f899 3000 	ldrb.w	r3, [r9]
    d01c:	f048 0820 	orr.w	r8, r8, #32
    d020:	e772      	b.n	cf08 <_svfprintf_r+0xb8>
    d022:	2208      	movs	r2, #8
    d024:	2100      	movs	r1, #0
    d026:	4638      	mov	r0, r7
    d028:	f7fe fdca 	bl	bbc0 <memset>
    d02c:	2301      	movs	r3, #1
    d02e:	4499      	add	r9, r3
    d030:	e741      	b.n	ceb6 <_svfprintf_r+0x66>
    d032:	ebb9 0504 	subs.w	r5, r9, r4
    d036:	4606      	mov	r6, r0
    d038:	d011      	beq.n	d05e <_svfprintf_r+0x20e>
    d03a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d03c:	442b      	add	r3, r5
    d03e:	9326      	str	r3, [sp, #152]	; 0x98
    d040:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d042:	3301      	adds	r3, #1
    d044:	2b07      	cmp	r3, #7
    d046:	e9ca 4500 	strd	r4, r5, [sl]
    d04a:	9325      	str	r3, [sp, #148]	; 0x94
    d04c:	dc1c      	bgt.n	d088 <_svfprintf_r+0x238>
    d04e:	f10a 0a08 	add.w	sl, sl, #8
    d052:	9b04      	ldr	r3, [sp, #16]
    d054:	442b      	add	r3, r5
    d056:	9304      	str	r3, [sp, #16]
    d058:	2e00      	cmp	r6, #0
    d05a:	f47f af47 	bne.w	ceec <_svfprintf_r+0x9c>
    d05e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d060:	2b00      	cmp	r3, #0
    d062:	f041 820b 	bne.w	e47c <_svfprintf_r+0x162c>
    d066:	ee1b 3a10 	vmov	r3, s22
    d06a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d06e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d072:	9b04      	ldr	r3, [sp, #16]
    d074:	bf18      	it	ne
    d076:	f04f 33ff 	movne.w	r3, #4294967295
    d07a:	9304      	str	r3, [sp, #16]
    d07c:	9804      	ldr	r0, [sp, #16]
    d07e:	b051      	add	sp, #324	; 0x144
    d080:	ecbd 8b08 	vpop	{d8-d11}
    d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d088:	ee1b 1a10 	vmov	r1, s22
    d08c:	aa24      	add	r2, sp, #144	; 0x90
    d08e:	4658      	mov	r0, fp
    d090:	f002 fde6 	bl	fc60 <__ssprint_r>
    d094:	2800      	cmp	r0, #0
    d096:	d1e6      	bne.n	d066 <_svfprintf_r+0x216>
    d098:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d09c:	e7d9      	b.n	d052 <_svfprintf_r+0x202>
    d09e:	bf00      	nop
	...
    d0a8:	ffffffff 	.word	0xffffffff
    d0ac:	7fefffff 	.word	0x7fefffff
    d0b0:	2000442c 	.word	0x2000442c
    d0b4:	930b      	str	r3, [sp, #44]	; 0x2c
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	d0d1      	beq.n	d05e <_svfprintf_r+0x20e>
    d0ba:	2100      	movs	r1, #0
    d0bc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d0c0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d0c4:	2301      	movs	r3, #1
    d0c6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d0ca:	9302      	str	r3, [sp, #8]
    d0cc:	9107      	str	r1, [sp, #28]
    d0ce:	9305      	str	r3, [sp, #20]
    d0d0:	9103      	str	r1, [sp, #12]
    d0d2:	910f      	str	r1, [sp, #60]	; 0x3c
    d0d4:	ac37      	add	r4, sp, #220	; 0xdc
    d0d6:	f018 0302 	ands.w	r3, r8, #2
    d0da:	9309      	str	r3, [sp, #36]	; 0x24
    d0dc:	d002      	beq.n	d0e4 <_svfprintf_r+0x294>
    d0de:	9b02      	ldr	r3, [sp, #8]
    d0e0:	3302      	adds	r3, #2
    d0e2:	9302      	str	r3, [sp, #8]
    d0e4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d0e8:	930a      	str	r3, [sp, #40]	; 0x28
    d0ea:	d105      	bne.n	d0f8 <_svfprintf_r+0x2a8>
    d0ec:	9b06      	ldr	r3, [sp, #24]
    d0ee:	9a02      	ldr	r2, [sp, #8]
    d0f0:	1a9d      	subs	r5, r3, r2
    d0f2:	2d00      	cmp	r5, #0
    d0f4:	f300 8369 	bgt.w	d7ca <_svfprintf_r+0x97a>
    d0f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d0fa:	b189      	cbz	r1, d120 <_svfprintf_r+0x2d0>
    d0fc:	9925      	ldr	r1, [sp, #148]	; 0x94
    d0fe:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d102:	3101      	adds	r1, #1
    d104:	3201      	adds	r2, #1
    d106:	f8ca 0000 	str.w	r0, [sl]
    d10a:	2907      	cmp	r1, #7
    d10c:	f04f 0001 	mov.w	r0, #1
    d110:	9226      	str	r2, [sp, #152]	; 0x98
    d112:	9125      	str	r1, [sp, #148]	; 0x94
    d114:	f8ca 0004 	str.w	r0, [sl, #4]
    d118:	f300 83a2 	bgt.w	d860 <_svfprintf_r+0xa10>
    d11c:	f10a 0a08 	add.w	sl, sl, #8
    d120:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d122:	b183      	cbz	r3, d146 <_svfprintf_r+0x2f6>
    d124:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d126:	a91a      	add	r1, sp, #104	; 0x68
    d128:	3301      	adds	r3, #1
    d12a:	3202      	adds	r2, #2
    d12c:	f8ca 1000 	str.w	r1, [sl]
    d130:	2b07      	cmp	r3, #7
    d132:	f04f 0102 	mov.w	r1, #2
    d136:	9226      	str	r2, [sp, #152]	; 0x98
    d138:	9325      	str	r3, [sp, #148]	; 0x94
    d13a:	f8ca 1004 	str.w	r1, [sl, #4]
    d13e:	f300 83a3 	bgt.w	d888 <_svfprintf_r+0xa38>
    d142:	f10a 0a08 	add.w	sl, sl, #8
    d146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d148:	2b80      	cmp	r3, #128	; 0x80
    d14a:	f000 826c 	beq.w	d626 <_svfprintf_r+0x7d6>
    d14e:	9b03      	ldr	r3, [sp, #12]
    d150:	9905      	ldr	r1, [sp, #20]
    d152:	1a5d      	subs	r5, r3, r1
    d154:	2d00      	cmp	r5, #0
    d156:	f300 82a5 	bgt.w	d6a4 <_svfprintf_r+0x854>
    d15a:	f418 7f80 	tst.w	r8, #256	; 0x100
    d15e:	f040 820d 	bne.w	d57c <_svfprintf_r+0x72c>
    d162:	9b05      	ldr	r3, [sp, #20]
    d164:	f8ca 3004 	str.w	r3, [sl, #4]
    d168:	441a      	add	r2, r3
    d16a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d16c:	f8ca 4000 	str.w	r4, [sl]
    d170:	3301      	adds	r3, #1
    d172:	2b07      	cmp	r3, #7
    d174:	9226      	str	r2, [sp, #152]	; 0x98
    d176:	9325      	str	r3, [sp, #148]	; 0x94
    d178:	f300 831b 	bgt.w	d7b2 <_svfprintf_r+0x962>
    d17c:	f10a 0a08 	add.w	sl, sl, #8
    d180:	f018 0f04 	tst.w	r8, #4
    d184:	d005      	beq.n	d192 <_svfprintf_r+0x342>
    d186:	9b06      	ldr	r3, [sp, #24]
    d188:	9902      	ldr	r1, [sp, #8]
    d18a:	1a5c      	subs	r4, r3, r1
    d18c:	2c00      	cmp	r4, #0
    d18e:	f300 8388 	bgt.w	d8a2 <_svfprintf_r+0xa52>
    d192:	9b04      	ldr	r3, [sp, #16]
    d194:	9906      	ldr	r1, [sp, #24]
    d196:	9802      	ldr	r0, [sp, #8]
    d198:	4281      	cmp	r1, r0
    d19a:	bfac      	ite	ge
    d19c:	185b      	addge	r3, r3, r1
    d19e:	181b      	addlt	r3, r3, r0
    d1a0:	9304      	str	r3, [sp, #16]
    d1a2:	2a00      	cmp	r2, #0
    d1a4:	f040 82b0 	bne.w	d708 <_svfprintf_r+0x8b8>
    d1a8:	2300      	movs	r3, #0
    d1aa:	9325      	str	r3, [sp, #148]	; 0x94
    d1ac:	9b07      	ldr	r3, [sp, #28]
    d1ae:	b11b      	cbz	r3, d1b8 <_svfprintf_r+0x368>
    d1b0:	9907      	ldr	r1, [sp, #28]
    d1b2:	4658      	mov	r0, fp
    d1b4:	f7ff f966 	bl	c484 <_free_r>
    d1b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d1bc:	464c      	mov	r4, r9
    d1be:	e679      	b.n	ceb4 <_svfprintf_r+0x64>
    d1c0:	930b      	str	r3, [sp, #44]	; 0x2c
    d1c2:	9b08      	ldr	r3, [sp, #32]
    d1c4:	3307      	adds	r3, #7
    d1c6:	f023 0307 	bic.w	r3, r3, #7
    d1ca:	ecb3 8b02 	vldmia	r3!, {d8}
    d1ce:	eeb0 7bc8 	vabs.f64	d7, d8
    d1d2:	eeb4 7b49 	vcmp.f64	d7, d9
    d1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1da:	9308      	str	r3, [sp, #32]
    d1dc:	f340 84e9 	ble.w	dbb2 <_svfprintf_r+0xd62>
    d1e0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1e8:	f101 8059 	bmi.w	e29e <_svfprintf_r+0x144e>
    d1ec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d1f0:	4cab      	ldr	r4, [pc, #684]	; (d4a0 <_svfprintf_r+0x650>)
    d1f2:	4bac      	ldr	r3, [pc, #688]	; (d4a4 <_svfprintf_r+0x654>)
    d1f4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    d1f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1fa:	2a47      	cmp	r2, #71	; 0x47
    d1fc:	bfc8      	it	gt
    d1fe:	461c      	movgt	r4, r3
    d200:	2300      	movs	r3, #0
    d202:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d206:	2203      	movs	r2, #3
    d208:	9307      	str	r3, [sp, #28]
    d20a:	9202      	str	r2, [sp, #8]
    d20c:	9205      	str	r2, [sp, #20]
    d20e:	9303      	str	r3, [sp, #12]
    d210:	930f      	str	r3, [sp, #60]	; 0x3c
    d212:	2900      	cmp	r1, #0
    d214:	f43f af5f 	beq.w	d0d6 <_svfprintf_r+0x286>
    d218:	9b02      	ldr	r3, [sp, #8]
    d21a:	3301      	adds	r3, #1
    d21c:	9302      	str	r3, [sp, #8]
    d21e:	e75a      	b.n	d0d6 <_svfprintf_r+0x286>
    d220:	2b43      	cmp	r3, #67	; 0x43
    d222:	930b      	str	r3, [sp, #44]	; 0x2c
    d224:	d003      	beq.n	d22e <_svfprintf_r+0x3de>
    d226:	f018 0f10 	tst.w	r8, #16
    d22a:	f000 855d 	beq.w	dce8 <_svfprintf_r+0xe98>
    d22e:	9d08      	ldr	r5, [sp, #32]
    d230:	2208      	movs	r2, #8
    d232:	2100      	movs	r1, #0
    d234:	a822      	add	r0, sp, #136	; 0x88
    d236:	ac37      	add	r4, sp, #220	; 0xdc
    d238:	f7fe fcc2 	bl	bbc0 <memset>
    d23c:	ab22      	add	r3, sp, #136	; 0x88
    d23e:	f855 2b04 	ldr.w	r2, [r5], #4
    d242:	4621      	mov	r1, r4
    d244:	4658      	mov	r0, fp
    d246:	f002 fcc5 	bl	fbd4 <_wcrtomb_r>
    d24a:	4603      	mov	r3, r0
    d24c:	3301      	adds	r3, #1
    d24e:	9005      	str	r0, [sp, #20]
    d250:	f001 82ee 	beq.w	e830 <_svfprintf_r+0x19e0>
    d254:	9b05      	ldr	r3, [sp, #20]
    d256:	9508      	str	r5, [sp, #32]
    d258:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d25c:	9302      	str	r3, [sp, #8]
    d25e:	2100      	movs	r1, #0
    d260:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d264:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d268:	9107      	str	r1, [sp, #28]
    d26a:	9103      	str	r1, [sp, #12]
    d26c:	910f      	str	r1, [sp, #60]	; 0x3c
    d26e:	e732      	b.n	d0d6 <_svfprintf_r+0x286>
    d270:	930b      	str	r3, [sp, #44]	; 0x2c
    d272:	9b08      	ldr	r3, [sp, #32]
    d274:	461a      	mov	r2, r3
    d276:	2300      	movs	r3, #0
    d278:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d27c:	4613      	mov	r3, r2
    d27e:	f853 4b04 	ldr.w	r4, [r3], #4
    d282:	9308      	str	r3, [sp, #32]
    d284:	2c00      	cmp	r4, #0
    d286:	f000 8548 	beq.w	dd1a <_svfprintf_r+0xeca>
    d28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d28c:	2b53      	cmp	r3, #83	; 0x53
    d28e:	f000 86ec 	beq.w	e06a <_svfprintf_r+0x121a>
    d292:	f018 0310 	ands.w	r3, r8, #16
    d296:	930c      	str	r3, [sp, #48]	; 0x30
    d298:	f040 86e7 	bne.w	e06a <_svfprintf_r+0x121a>
    d29c:	9b03      	ldr	r3, [sp, #12]
    d29e:	1c5d      	adds	r5, r3, #1
    d2a0:	f001 80e5 	beq.w	e46e <_svfprintf_r+0x161e>
    d2a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    d2a6:	461a      	mov	r2, r3
    d2a8:	4620      	mov	r0, r4
    d2aa:	f001 fca1 	bl	ebf0 <memchr>
    d2ae:	9007      	str	r0, [sp, #28]
    d2b0:	2800      	cmp	r0, #0
    d2b2:	f001 8328 	beq.w	e906 <_svfprintf_r+0x1ab6>
    d2b6:	9b07      	ldr	r3, [sp, #28]
    d2b8:	1b1a      	subs	r2, r3, r4
    d2ba:	9205      	str	r2, [sp, #20]
    d2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2be:	9303      	str	r3, [sp, #12]
    d2c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d2c4:	930f      	str	r3, [sp, #60]	; 0x3c
    d2c6:	930d      	str	r3, [sp, #52]	; 0x34
    d2c8:	9307      	str	r3, [sp, #28]
    d2ca:	2373      	movs	r3, #115	; 0x73
    d2cc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d2d0:	9202      	str	r2, [sp, #8]
    d2d2:	930b      	str	r3, [sp, #44]	; 0x2c
    d2d4:	e79d      	b.n	d212 <_svfprintf_r+0x3c2>
    d2d6:	f018 0f20 	tst.w	r8, #32
    d2da:	930b      	str	r3, [sp, #44]	; 0x2c
    d2dc:	9b08      	ldr	r3, [sp, #32]
    d2de:	d03d      	beq.n	d35c <_svfprintf_r+0x50c>
    d2e0:	3307      	adds	r3, #7
    d2e2:	f023 0307 	bic.w	r3, r3, #7
    d2e6:	461a      	mov	r2, r3
    d2e8:	4611      	mov	r1, r2
    d2ea:	685b      	ldr	r3, [r3, #4]
    d2ec:	f851 2b08 	ldr.w	r2, [r1], #8
    d2f0:	9108      	str	r1, [sp, #32]
    d2f2:	4619      	mov	r1, r3
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	f2c0 840c 	blt.w	db12 <_svfprintf_r+0xcc2>
    d2fa:	9b03      	ldr	r3, [sp, #12]
    d2fc:	3301      	adds	r3, #1
    d2fe:	f000 829e 	beq.w	d83e <_svfprintf_r+0x9ee>
    d302:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    d306:	ea52 0301 	orrs.w	r3, r2, r1
    d30a:	9002      	str	r0, [sp, #8]
    d30c:	f040 8299 	bne.w	d842 <_svfprintf_r+0x9f2>
    d310:	9b03      	ldr	r3, [sp, #12]
    d312:	2b00      	cmp	r3, #0
    d314:	f040 829a 	bne.w	d84c <_svfprintf_r+0x9fc>
    d318:	4680      	mov	r8, r0
    d31a:	2300      	movs	r3, #0
    d31c:	9303      	str	r3, [sp, #12]
    d31e:	9305      	str	r3, [sp, #20]
    d320:	ac50      	add	r4, sp, #320	; 0x140
    d322:	e106      	b.n	d532 <_svfprintf_r+0x6e2>
    d324:	9b08      	ldr	r3, [sp, #32]
    d326:	f853 2b04 	ldr.w	r2, [r3], #4
    d32a:	9206      	str	r2, [sp, #24]
    d32c:	2a00      	cmp	r2, #0
    d32e:	f280 8419 	bge.w	db64 <_svfprintf_r+0xd14>
    d332:	9a06      	ldr	r2, [sp, #24]
    d334:	9308      	str	r3, [sp, #32]
    d336:	4252      	negs	r2, r2
    d338:	9206      	str	r2, [sp, #24]
    d33a:	f899 3000 	ldrb.w	r3, [r9]
    d33e:	f048 0804 	orr.w	r8, r8, #4
    d342:	e5e1      	b.n	cf08 <_svfprintf_r+0xb8>
    d344:	f899 3000 	ldrb.w	r3, [r9]
    d348:	f048 0808 	orr.w	r8, r8, #8
    d34c:	e5dc      	b.n	cf08 <_svfprintf_r+0xb8>
    d34e:	f048 0810 	orr.w	r8, r8, #16
    d352:	f018 0f20 	tst.w	r8, #32
    d356:	930b      	str	r3, [sp, #44]	; 0x2c
    d358:	9b08      	ldr	r3, [sp, #32]
    d35a:	d1c1      	bne.n	d2e0 <_svfprintf_r+0x490>
    d35c:	f018 0f10 	tst.w	r8, #16
    d360:	f040 840b 	bne.w	db7a <_svfprintf_r+0xd2a>
    d364:	f018 0f40 	tst.w	r8, #64	; 0x40
    d368:	f000 8403 	beq.w	db72 <_svfprintf_r+0xd22>
    d36c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d370:	9308      	str	r3, [sp, #32]
    d372:	17d1      	asrs	r1, r2, #31
    d374:	460b      	mov	r3, r1
    d376:	e7bd      	b.n	d2f4 <_svfprintf_r+0x4a4>
    d378:	9b08      	ldr	r3, [sp, #32]
    d37a:	f048 0202 	orr.w	r2, r8, #2
    d37e:	9202      	str	r2, [sp, #8]
    d380:	f853 2b04 	ldr.w	r2, [r3], #4
    d384:	9308      	str	r3, [sp, #32]
    d386:	f647 0330 	movw	r3, #30768	; 0x7830
    d38a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    d38e:	2078      	movs	r0, #120	; 0x78
    d390:	4b45      	ldr	r3, [pc, #276]	; (d4a8 <_svfprintf_r+0x658>)
    d392:	9311      	str	r3, [sp, #68]	; 0x44
    d394:	2100      	movs	r1, #0
    d396:	2302      	movs	r3, #2
    d398:	900b      	str	r0, [sp, #44]	; 0x2c
    d39a:	2000      	movs	r0, #0
    d39c:	9c03      	ldr	r4, [sp, #12]
    d39e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    d3a2:	1c60      	adds	r0, r4, #1
    d3a4:	f000 80ad 	beq.w	d502 <_svfprintf_r+0x6b2>
    d3a8:	9802      	ldr	r0, [sp, #8]
    d3aa:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    d3ae:	ea52 0001 	orrs.w	r0, r2, r1
    d3b2:	f040 80a4 	bne.w	d4fe <_svfprintf_r+0x6ae>
    d3b6:	2c00      	cmp	r4, #0
    d3b8:	f040 86ae 	bne.w	e118 <_svfprintf_r+0x12c8>
    d3bc:	2b00      	cmp	r3, #0
    d3be:	d1ac      	bne.n	d31a <_svfprintf_r+0x4ca>
    d3c0:	9b02      	ldr	r3, [sp, #8]
    d3c2:	f013 0301 	ands.w	r3, r3, #1
    d3c6:	9305      	str	r3, [sp, #20]
    d3c8:	f000 83d1 	beq.w	db6e <_svfprintf_r+0xd1e>
    d3cc:	2330      	movs	r3, #48	; 0x30
    d3ce:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    d3d2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d3d6:	e0ac      	b.n	d532 <_svfprintf_r+0x6e2>
    d3d8:	f018 0f20 	tst.w	r8, #32
    d3dc:	f040 83d4 	bne.w	db88 <_svfprintf_r+0xd38>
    d3e0:	f018 0f10 	tst.w	r8, #16
    d3e4:	f040 869f 	bne.w	e126 <_svfprintf_r+0x12d6>
    d3e8:	f018 0f40 	tst.w	r8, #64	; 0x40
    d3ec:	f040 8797 	bne.w	e31e <_svfprintf_r+0x14ce>
    d3f0:	f418 7f00 	tst.w	r8, #512	; 0x200
    d3f4:	f000 8697 	beq.w	e126 <_svfprintf_r+0x12d6>
    d3f8:	9b08      	ldr	r3, [sp, #32]
    d3fa:	9904      	ldr	r1, [sp, #16]
    d3fc:	f853 2b04 	ldr.w	r2, [r3], #4
    d400:	9308      	str	r3, [sp, #32]
    d402:	7011      	strb	r1, [r2, #0]
    d404:	464c      	mov	r4, r9
    d406:	e555      	b.n	ceb4 <_svfprintf_r+0x64>
    d408:	f899 3000 	ldrb.w	r3, [r9]
    d40c:	2b68      	cmp	r3, #104	; 0x68
    d40e:	bf03      	ittte	eq
    d410:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d414:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    d418:	f109 0901 	addeq.w	r9, r9, #1
    d41c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    d420:	e572      	b.n	cf08 <_svfprintf_r+0xb8>
    d422:	f899 3000 	ldrb.w	r3, [r9]
    d426:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    d42a:	e56d      	b.n	cf08 <_svfprintf_r+0xb8>
    d42c:	f899 3000 	ldrb.w	r3, [r9]
    d430:	2b6c      	cmp	r3, #108	; 0x6c
    d432:	bf03      	ittte	eq
    d434:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d438:	f048 0820 	orreq.w	r8, r8, #32
    d43c:	f109 0901 	addeq.w	r9, r9, #1
    d440:	f048 0810 	orrne.w	r8, r8, #16
    d444:	e560      	b.n	cf08 <_svfprintf_r+0xb8>
    d446:	930b      	str	r3, [sp, #44]	; 0x2c
    d448:	f048 0810 	orr.w	r8, r8, #16
    d44c:	f018 0120 	ands.w	r1, r8, #32
    d450:	f000 8351 	beq.w	daf6 <_svfprintf_r+0xca6>
    d454:	9b08      	ldr	r3, [sp, #32]
    d456:	3307      	adds	r3, #7
    d458:	f023 0307 	bic.w	r3, r3, #7
    d45c:	6859      	ldr	r1, [r3, #4]
    d45e:	f853 2b08 	ldr.w	r2, [r3], #8
    d462:	9308      	str	r3, [sp, #32]
    d464:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d468:	9302      	str	r3, [sp, #8]
    d46a:	2300      	movs	r3, #0
    d46c:	e795      	b.n	d39a <_svfprintf_r+0x54a>
    d46e:	930b      	str	r3, [sp, #44]	; 0x2c
    d470:	f048 0310 	orr.w	r3, r8, #16
    d474:	9302      	str	r3, [sp, #8]
    d476:	9b02      	ldr	r3, [sp, #8]
    d478:	f013 0120 	ands.w	r1, r3, #32
    d47c:	f000 8329 	beq.w	dad2 <_svfprintf_r+0xc82>
    d480:	9b08      	ldr	r3, [sp, #32]
    d482:	3307      	adds	r3, #7
    d484:	f023 0307 	bic.w	r3, r3, #7
    d488:	6859      	ldr	r1, [r3, #4]
    d48a:	f853 2b08 	ldr.w	r2, [r3], #8
    d48e:	9308      	str	r3, [sp, #32]
    d490:	2301      	movs	r3, #1
    d492:	e782      	b.n	d39a <_svfprintf_r+0x54a>
    d494:	f899 3000 	ldrb.w	r3, [r9]
    d498:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    d49c:	e534      	b.n	cf08 <_svfprintf_r+0xb8>
    d49e:	bf00      	nop
    d4a0:	20000d00 	.word	0x20000d00
    d4a4:	20000d04 	.word	0x20000d04
    d4a8:	20000d10 	.word	0x20000d10
    d4ac:	4649      	mov	r1, r9
    d4ae:	f811 3b01 	ldrb.w	r3, [r1], #1
    d4b2:	2b2a      	cmp	r3, #42	; 0x2a
    d4b4:	f001 8249 	beq.w	e94a <_svfprintf_r+0x1afa>
    d4b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4bc:	2a09      	cmp	r2, #9
    d4be:	4689      	mov	r9, r1
    d4c0:	bf98      	it	ls
    d4c2:	2100      	movls	r1, #0
    d4c4:	f201 8144 	bhi.w	e750 <_svfprintf_r+0x1900>
    d4c8:	f819 3b01 	ldrb.w	r3, [r9], #1
    d4cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d4d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d4d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4d8:	2a09      	cmp	r2, #9
    d4da:	d9f5      	bls.n	d4c8 <_svfprintf_r+0x678>
    d4dc:	9103      	str	r1, [sp, #12]
    d4de:	e515      	b.n	cf0c <_svfprintf_r+0xbc>
    d4e0:	f899 3000 	ldrb.w	r3, [r9]
    d4e4:	f048 0801 	orr.w	r8, r8, #1
    d4e8:	e50e      	b.n	cf08 <_svfprintf_r+0xb8>
    d4ea:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    d4ee:	2b00      	cmp	r3, #0
    d4f0:	f47f ad8f 	bne.w	d012 <_svfprintf_r+0x1c2>
    d4f4:	f899 3000 	ldrb.w	r3, [r9]
    d4f8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    d4fc:	e504      	b.n	cf08 <_svfprintf_r+0xb8>
    d4fe:	f8cd 8008 	str.w	r8, [sp, #8]
    d502:	2b01      	cmp	r3, #1
    d504:	f000 819d 	beq.w	d842 <_svfprintf_r+0x9f2>
    d508:	2b02      	cmp	r3, #2
    d50a:	ac50      	add	r4, sp, #320	; 0x140
    d50c:	d120      	bne.n	d550 <_svfprintf_r+0x700>
    d50e:	9811      	ldr	r0, [sp, #68]	; 0x44
    d510:	f002 030f 	and.w	r3, r2, #15
    d514:	0912      	lsrs	r2, r2, #4
    d516:	5cc3      	ldrb	r3, [r0, r3]
    d518:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d51c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d520:	0909      	lsrs	r1, r1, #4
    d522:	ea52 0301 	orrs.w	r3, r2, r1
    d526:	d1f3      	bne.n	d510 <_svfprintf_r+0x6c0>
    d528:	ab50      	add	r3, sp, #320	; 0x140
    d52a:	1b1b      	subs	r3, r3, r4
    d52c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d530:	9305      	str	r3, [sp, #20]
    d532:	9a05      	ldr	r2, [sp, #20]
    d534:	9803      	ldr	r0, [sp, #12]
    d536:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d53a:	4282      	cmp	r2, r0
    d53c:	f04f 0300 	mov.w	r3, #0
    d540:	bfb8      	it	lt
    d542:	4602      	movlt	r2, r0
    d544:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d548:	9307      	str	r3, [sp, #28]
    d54a:	9202      	str	r2, [sp, #8]
    d54c:	930f      	str	r3, [sp, #60]	; 0x3c
    d54e:	e660      	b.n	d212 <_svfprintf_r+0x3c2>
    d550:	f002 0307 	and.w	r3, r2, #7
    d554:	08d2      	lsrs	r2, r2, #3
    d556:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d55a:	08c9      	lsrs	r1, r1, #3
    d55c:	3330      	adds	r3, #48	; 0x30
    d55e:	ea52 0501 	orrs.w	r5, r2, r1
    d562:	4620      	mov	r0, r4
    d564:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d568:	d1f2      	bne.n	d550 <_svfprintf_r+0x700>
    d56a:	9a02      	ldr	r2, [sp, #8]
    d56c:	07d1      	lsls	r1, r2, #31
    d56e:	f100 824d 	bmi.w	da0c <_svfprintf_r+0xbbc>
    d572:	ab50      	add	r3, sp, #320	; 0x140
    d574:	1b1b      	subs	r3, r3, r4
    d576:	4690      	mov	r8, r2
    d578:	9305      	str	r3, [sp, #20]
    d57a:	e7da      	b.n	d532 <_svfprintf_r+0x6e2>
    d57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d57e:	2b65      	cmp	r3, #101	; 0x65
    d580:	f340 80d4 	ble.w	d72c <_svfprintf_r+0x8dc>
    d584:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d58c:	f040 81c1 	bne.w	d912 <_svfprintf_r+0xac2>
    d590:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d592:	49ba      	ldr	r1, [pc, #744]	; (d87c <_svfprintf_r+0xa2c>)
    d594:	f8ca 1000 	str.w	r1, [sl]
    d598:	3301      	adds	r3, #1
    d59a:	3201      	adds	r2, #1
    d59c:	2101      	movs	r1, #1
    d59e:	2b07      	cmp	r3, #7
    d5a0:	9226      	str	r2, [sp, #152]	; 0x98
    d5a2:	9325      	str	r3, [sp, #148]	; 0x94
    d5a4:	f8ca 1004 	str.w	r1, [sl, #4]
    d5a8:	f300 8551 	bgt.w	e04e <_svfprintf_r+0x11fe>
    d5ac:	f10a 0a08 	add.w	sl, sl, #8
    d5b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d5b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    d5b4:	428b      	cmp	r3, r1
    d5b6:	f280 82d0 	bge.w	db5a <_svfprintf_r+0xd0a>
    d5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5bc:	9912      	ldr	r1, [sp, #72]	; 0x48
    d5be:	441a      	add	r2, r3
    d5c0:	e9ca 1300 	strd	r1, r3, [sl]
    d5c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d5c6:	9226      	str	r2, [sp, #152]	; 0x98
    d5c8:	3301      	adds	r3, #1
    d5ca:	2b07      	cmp	r3, #7
    d5cc:	9325      	str	r3, [sp, #148]	; 0x94
    d5ce:	f300 8397 	bgt.w	dd00 <_svfprintf_r+0xeb0>
    d5d2:	f10a 0a08 	add.w	sl, sl, #8
    d5d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d5d8:	1e5c      	subs	r4, r3, #1
    d5da:	2c00      	cmp	r4, #0
    d5dc:	f77f add0 	ble.w	d180 <_svfprintf_r+0x330>
    d5e0:	2c10      	cmp	r4, #16
    d5e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d5e4:	f340 856e 	ble.w	e0c4 <_svfprintf_r+0x1274>
    d5e8:	ee1b 6a10 	vmov	r6, s22
    d5ec:	2510      	movs	r5, #16
    d5ee:	e005      	b.n	d5fc <_svfprintf_r+0x7ac>
    d5f0:	f10a 0a08 	add.w	sl, sl, #8
    d5f4:	3c10      	subs	r4, #16
    d5f6:	2c10      	cmp	r4, #16
    d5f8:	f340 8564 	ble.w	e0c4 <_svfprintf_r+0x1274>
    d5fc:	3301      	adds	r3, #1
    d5fe:	49a0      	ldr	r1, [pc, #640]	; (d880 <_svfprintf_r+0xa30>)
    d600:	3210      	adds	r2, #16
    d602:	2b07      	cmp	r3, #7
    d604:	e9ca 1500 	strd	r1, r5, [sl]
    d608:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d60c:	ddf0      	ble.n	d5f0 <_svfprintf_r+0x7a0>
    d60e:	aa24      	add	r2, sp, #144	; 0x90
    d610:	4631      	mov	r1, r6
    d612:	4658      	mov	r0, fp
    d614:	f002 fb24 	bl	fc60 <__ssprint_r>
    d618:	2800      	cmp	r0, #0
    d61a:	d17e      	bne.n	d71a <_svfprintf_r+0x8ca>
    d61c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d620:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d624:	e7e6      	b.n	d5f4 <_svfprintf_r+0x7a4>
    d626:	9b06      	ldr	r3, [sp, #24]
    d628:	9902      	ldr	r1, [sp, #8]
    d62a:	1a5d      	subs	r5, r3, r1
    d62c:	2d00      	cmp	r5, #0
    d62e:	f77f ad8e 	ble.w	d14e <_svfprintf_r+0x2fe>
    d632:	2d10      	cmp	r5, #16
    d634:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d636:	dd21      	ble.n	d67c <_svfprintf_r+0x82c>
    d638:	9409      	str	r4, [sp, #36]	; 0x24
    d63a:	2610      	movs	r6, #16
    d63c:	ee1b 4a10 	vmov	r4, s22
    d640:	e004      	b.n	d64c <_svfprintf_r+0x7fc>
    d642:	3d10      	subs	r5, #16
    d644:	2d10      	cmp	r5, #16
    d646:	f10a 0a08 	add.w	sl, sl, #8
    d64a:	dd16      	ble.n	d67a <_svfprintf_r+0x82a>
    d64c:	3301      	adds	r3, #1
    d64e:	498c      	ldr	r1, [pc, #560]	; (d880 <_svfprintf_r+0xa30>)
    d650:	3210      	adds	r2, #16
    d652:	2b07      	cmp	r3, #7
    d654:	e9ca 1600 	strd	r1, r6, [sl]
    d658:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d65c:	ddf1      	ble.n	d642 <_svfprintf_r+0x7f2>
    d65e:	aa24      	add	r2, sp, #144	; 0x90
    d660:	4621      	mov	r1, r4
    d662:	4658      	mov	r0, fp
    d664:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d668:	f002 fafa 	bl	fc60 <__ssprint_r>
    d66c:	2800      	cmp	r0, #0
    d66e:	d154      	bne.n	d71a <_svfprintf_r+0x8ca>
    d670:	3d10      	subs	r5, #16
    d672:	2d10      	cmp	r5, #16
    d674:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d678:	dce8      	bgt.n	d64c <_svfprintf_r+0x7fc>
    d67a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d67c:	4980      	ldr	r1, [pc, #512]	; (d880 <_svfprintf_r+0xa30>)
    d67e:	f8ca 5004 	str.w	r5, [sl, #4]
    d682:	3301      	adds	r3, #1
    d684:	442a      	add	r2, r5
    d686:	2b07      	cmp	r3, #7
    d688:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d68c:	f8ca 1000 	str.w	r1, [sl]
    d690:	f300 8526 	bgt.w	e0e0 <_svfprintf_r+0x1290>
    d694:	9b03      	ldr	r3, [sp, #12]
    d696:	9905      	ldr	r1, [sp, #20]
    d698:	1a5d      	subs	r5, r3, r1
    d69a:	2d00      	cmp	r5, #0
    d69c:	f10a 0a08 	add.w	sl, sl, #8
    d6a0:	f77f ad5b 	ble.w	d15a <_svfprintf_r+0x30a>
    d6a4:	2d10      	cmp	r5, #16
    d6a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d6a8:	dd1f      	ble.n	d6ea <_svfprintf_r+0x89a>
    d6aa:	4651      	mov	r1, sl
    d6ac:	2610      	movs	r6, #16
    d6ae:	ee1b aa10 	vmov	sl, s22
    d6b2:	e004      	b.n	d6be <_svfprintf_r+0x86e>
    d6b4:	3d10      	subs	r5, #16
    d6b6:	2d10      	cmp	r5, #16
    d6b8:	f101 0108 	add.w	r1, r1, #8
    d6bc:	dd14      	ble.n	d6e8 <_svfprintf_r+0x898>
    d6be:	3301      	adds	r3, #1
    d6c0:	486f      	ldr	r0, [pc, #444]	; (d880 <_svfprintf_r+0xa30>)
    d6c2:	3210      	adds	r2, #16
    d6c4:	2b07      	cmp	r3, #7
    d6c6:	e9c1 0600 	strd	r0, r6, [r1]
    d6ca:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d6ce:	ddf1      	ble.n	d6b4 <_svfprintf_r+0x864>
    d6d0:	aa24      	add	r2, sp, #144	; 0x90
    d6d2:	4651      	mov	r1, sl
    d6d4:	4658      	mov	r0, fp
    d6d6:	f002 fac3 	bl	fc60 <__ssprint_r>
    d6da:	b9f0      	cbnz	r0, d71a <_svfprintf_r+0x8ca>
    d6dc:	3d10      	subs	r5, #16
    d6de:	2d10      	cmp	r5, #16
    d6e0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d6e4:	a927      	add	r1, sp, #156	; 0x9c
    d6e6:	dcea      	bgt.n	d6be <_svfprintf_r+0x86e>
    d6e8:	468a      	mov	sl, r1
    d6ea:	3301      	adds	r3, #1
    d6ec:	4964      	ldr	r1, [pc, #400]	; (d880 <_svfprintf_r+0xa30>)
    d6ee:	f8ca 5004 	str.w	r5, [sl, #4]
    d6f2:	442a      	add	r2, r5
    d6f4:	2b07      	cmp	r3, #7
    d6f6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d6fa:	f8ca 1000 	str.w	r1, [sl]
    d6fe:	f300 81da 	bgt.w	dab6 <_svfprintf_r+0xc66>
    d702:	f10a 0a08 	add.w	sl, sl, #8
    d706:	e528      	b.n	d15a <_svfprintf_r+0x30a>
    d708:	ee1b 1a10 	vmov	r1, s22
    d70c:	aa24      	add	r2, sp, #144	; 0x90
    d70e:	4658      	mov	r0, fp
    d710:	f002 faa6 	bl	fc60 <__ssprint_r>
    d714:	2800      	cmp	r0, #0
    d716:	f43f ad47 	beq.w	d1a8 <_svfprintf_r+0x358>
    d71a:	9b07      	ldr	r3, [sp, #28]
    d71c:	2b00      	cmp	r3, #0
    d71e:	f43f aca2 	beq.w	d066 <_svfprintf_r+0x216>
    d722:	9907      	ldr	r1, [sp, #28]
    d724:	4658      	mov	r0, fp
    d726:	f7fe fead 	bl	c484 <_free_r>
    d72a:	e49c      	b.n	d066 <_svfprintf_r+0x216>
    d72c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d72e:	2b01      	cmp	r3, #1
    d730:	f340 817a 	ble.w	da28 <_svfprintf_r+0xbd8>
    d734:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d736:	f8ca 4000 	str.w	r4, [sl]
    d73a:	3301      	adds	r3, #1
    d73c:	3201      	adds	r2, #1
    d73e:	2101      	movs	r1, #1
    d740:	2b07      	cmp	r3, #7
    d742:	9226      	str	r2, [sp, #152]	; 0x98
    d744:	9325      	str	r3, [sp, #148]	; 0x94
    d746:	f8ca 1004 	str.w	r1, [sl, #4]
    d74a:	f300 81f8 	bgt.w	db3e <_svfprintf_r+0xcee>
    d74e:	f10a 0a08 	add.w	sl, sl, #8
    d752:	9910      	ldr	r1, [sp, #64]	; 0x40
    d754:	9812      	ldr	r0, [sp, #72]	; 0x48
    d756:	3301      	adds	r3, #1
    d758:	440a      	add	r2, r1
    d75a:	2b07      	cmp	r3, #7
    d75c:	e9ca 0100 	strd	r0, r1, [sl]
    d760:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d764:	f300 81dd 	bgt.w	db22 <_svfprintf_r+0xcd2>
    d768:	f10a 0a08 	add.w	sl, sl, #8
    d76c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d774:	f000 8177 	beq.w	da66 <_svfprintf_r+0xc16>
    d778:	990e      	ldr	r1, [sp, #56]	; 0x38
    d77a:	3301      	adds	r3, #1
    d77c:	3901      	subs	r1, #1
    d77e:	3401      	adds	r4, #1
    d780:	440a      	add	r2, r1
    d782:	2b07      	cmp	r3, #7
    d784:	f8ca 4000 	str.w	r4, [sl]
    d788:	9325      	str	r3, [sp, #148]	; 0x94
    d78a:	f8ca 1004 	str.w	r1, [sl, #4]
    d78e:	9226      	str	r2, [sp, #152]	; 0x98
    d790:	f300 815b 	bgt.w	da4a <_svfprintf_r+0xbfa>
    d794:	f10a 0a08 	add.w	sl, sl, #8
    d798:	9914      	ldr	r1, [sp, #80]	; 0x50
    d79a:	f8ca 1004 	str.w	r1, [sl, #4]
    d79e:	3301      	adds	r3, #1
    d7a0:	440a      	add	r2, r1
    d7a2:	2b07      	cmp	r3, #7
    d7a4:	a91e      	add	r1, sp, #120	; 0x78
    d7a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d7aa:	f8ca 1000 	str.w	r1, [sl]
    d7ae:	f77f ace5 	ble.w	d17c <_svfprintf_r+0x32c>
    d7b2:	ee1b 1a10 	vmov	r1, s22
    d7b6:	aa24      	add	r2, sp, #144	; 0x90
    d7b8:	4658      	mov	r0, fp
    d7ba:	f002 fa51 	bl	fc60 <__ssprint_r>
    d7be:	2800      	cmp	r0, #0
    d7c0:	d1ab      	bne.n	d71a <_svfprintf_r+0x8ca>
    d7c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d7c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d7c8:	e4da      	b.n	d180 <_svfprintf_r+0x330>
    d7ca:	2d10      	cmp	r5, #16
    d7cc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    d7d0:	4e2c      	ldr	r6, [pc, #176]	; (d884 <_svfprintf_r+0xa34>)
    d7d2:	dd24      	ble.n	d81e <_svfprintf_r+0x9ce>
    d7d4:	9417      	str	r4, [sp, #92]	; 0x5c
    d7d6:	2310      	movs	r3, #16
    d7d8:	ee1b 4a10 	vmov	r4, s22
    d7dc:	4608      	mov	r0, r1
    d7de:	e004      	b.n	d7ea <_svfprintf_r+0x99a>
    d7e0:	3d10      	subs	r5, #16
    d7e2:	2d10      	cmp	r5, #16
    d7e4:	f10a 0a08 	add.w	sl, sl, #8
    d7e8:	dd17      	ble.n	d81a <_svfprintf_r+0x9ca>
    d7ea:	3001      	adds	r0, #1
    d7ec:	3210      	adds	r2, #16
    d7ee:	2807      	cmp	r0, #7
    d7f0:	e9ca 6300 	strd	r6, r3, [sl]
    d7f4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    d7f8:	ddf2      	ble.n	d7e0 <_svfprintf_r+0x990>
    d7fa:	aa24      	add	r2, sp, #144	; 0x90
    d7fc:	4621      	mov	r1, r4
    d7fe:	4658      	mov	r0, fp
    d800:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d804:	f002 fa2c 	bl	fc60 <__ssprint_r>
    d808:	2800      	cmp	r0, #0
    d80a:	d186      	bne.n	d71a <_svfprintf_r+0x8ca>
    d80c:	3d10      	subs	r5, #16
    d80e:	2d10      	cmp	r5, #16
    d810:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    d814:	f04f 0310 	mov.w	r3, #16
    d818:	dce7      	bgt.n	d7ea <_svfprintf_r+0x99a>
    d81a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d81c:	4601      	mov	r1, r0
    d81e:	3101      	adds	r1, #1
    d820:	442a      	add	r2, r5
    d822:	2907      	cmp	r1, #7
    d824:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    d828:	f8ca 6000 	str.w	r6, [sl]
    d82c:	f8ca 5004 	str.w	r5, [sl, #4]
    d830:	f300 83bd 	bgt.w	dfae <_svfprintf_r+0x115e>
    d834:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d838:	f10a 0a08 	add.w	sl, sl, #8
    d83c:	e45d      	b.n	d0fa <_svfprintf_r+0x2aa>
    d83e:	f8cd 8008 	str.w	r8, [sp, #8]
    d842:	2a0a      	cmp	r2, #10
    d844:	f171 0300 	sbcs.w	r3, r1, #0
    d848:	f080 8345 	bcs.w	ded6 <_svfprintf_r+0x1086>
    d84c:	3230      	adds	r2, #48	; 0x30
    d84e:	2301      	movs	r3, #1
    d850:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d854:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    d858:	9305      	str	r3, [sp, #20]
    d85a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d85e:	e668      	b.n	d532 <_svfprintf_r+0x6e2>
    d860:	ee1b 1a10 	vmov	r1, s22
    d864:	aa24      	add	r2, sp, #144	; 0x90
    d866:	4658      	mov	r0, fp
    d868:	f002 f9fa 	bl	fc60 <__ssprint_r>
    d86c:	2800      	cmp	r0, #0
    d86e:	f47f af54 	bne.w	d71a <_svfprintf_r+0x8ca>
    d872:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d874:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d878:	e452      	b.n	d120 <_svfprintf_r+0x2d0>
    d87a:	bf00      	nop
    d87c:	20000d40 	.word	0x20000d40
    d880:	200012c4 	.word	0x200012c4
    d884:	20000d44 	.word	0x20000d44
    d888:	ee1b 1a10 	vmov	r1, s22
    d88c:	aa24      	add	r2, sp, #144	; 0x90
    d88e:	4658      	mov	r0, fp
    d890:	f002 f9e6 	bl	fc60 <__ssprint_r>
    d894:	2800      	cmp	r0, #0
    d896:	f47f af40 	bne.w	d71a <_svfprintf_r+0x8ca>
    d89a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d89c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d8a0:	e451      	b.n	d146 <_svfprintf_r+0x2f6>
    d8a2:	2c10      	cmp	r4, #16
    d8a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d8a6:	4ebe      	ldr	r6, [pc, #760]	; (dba0 <_svfprintf_r+0xd50>)
    d8a8:	dd1f      	ble.n	d8ea <_svfprintf_r+0xa9a>
    d8aa:	ee1b 8a10 	vmov	r8, s22
    d8ae:	2510      	movs	r5, #16
    d8b0:	e004      	b.n	d8bc <_svfprintf_r+0xa6c>
    d8b2:	3c10      	subs	r4, #16
    d8b4:	2c10      	cmp	r4, #16
    d8b6:	f10a 0a08 	add.w	sl, sl, #8
    d8ba:	dd16      	ble.n	d8ea <_svfprintf_r+0xa9a>
    d8bc:	3301      	adds	r3, #1
    d8be:	3210      	adds	r2, #16
    d8c0:	2b07      	cmp	r3, #7
    d8c2:	e9ca 6500 	strd	r6, r5, [sl]
    d8c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d8ca:	ddf2      	ble.n	d8b2 <_svfprintf_r+0xa62>
    d8cc:	aa24      	add	r2, sp, #144	; 0x90
    d8ce:	4641      	mov	r1, r8
    d8d0:	4658      	mov	r0, fp
    d8d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d8d6:	f002 f9c3 	bl	fc60 <__ssprint_r>
    d8da:	2800      	cmp	r0, #0
    d8dc:	f47f af1d 	bne.w	d71a <_svfprintf_r+0x8ca>
    d8e0:	3c10      	subs	r4, #16
    d8e2:	2c10      	cmp	r4, #16
    d8e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d8e8:	dce8      	bgt.n	d8bc <_svfprintf_r+0xa6c>
    d8ea:	3301      	adds	r3, #1
    d8ec:	4422      	add	r2, r4
    d8ee:	2b07      	cmp	r3, #7
    d8f0:	e9ca 6400 	strd	r6, r4, [sl]
    d8f4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d8f8:	f77f ac4b 	ble.w	d192 <_svfprintf_r+0x342>
    d8fc:	ee1b 1a10 	vmov	r1, s22
    d900:	aa24      	add	r2, sp, #144	; 0x90
    d902:	4658      	mov	r0, fp
    d904:	f002 f9ac 	bl	fc60 <__ssprint_r>
    d908:	2800      	cmp	r0, #0
    d90a:	f47f af06 	bne.w	d71a <_svfprintf_r+0x8ca>
    d90e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d910:	e43f      	b.n	d192 <_svfprintf_r+0x342>
    d912:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d914:	2900      	cmp	r1, #0
    d916:	f340 835a 	ble.w	dfce <_svfprintf_r+0x117e>
    d91a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d91e:	429e      	cmp	r6, r3
    d920:	bfa8      	it	ge
    d922:	461e      	movge	r6, r3
    d924:	2e00      	cmp	r6, #0
    d926:	dd0b      	ble.n	d940 <_svfprintf_r+0xaf0>
    d928:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d92a:	3301      	adds	r3, #1
    d92c:	4432      	add	r2, r6
    d92e:	2b07      	cmp	r3, #7
    d930:	e9ca 4600 	strd	r4, r6, [sl]
    d934:	9226      	str	r2, [sp, #152]	; 0x98
    d936:	9325      	str	r3, [sp, #148]	; 0x94
    d938:	f300 8689 	bgt.w	e64e <_svfprintf_r+0x17fe>
    d93c:	f10a 0a08 	add.w	sl, sl, #8
    d940:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d942:	2e00      	cmp	r6, #0
    d944:	bfa8      	it	ge
    d946:	1bad      	subge	r5, r5, r6
    d948:	2d00      	cmp	r5, #0
    d94a:	f300 8203 	bgt.w	dd54 <_svfprintf_r+0xf04>
    d94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d950:	f418 6f80 	tst.w	r8, #1024	; 0x400
    d954:	4423      	add	r3, r4
    d956:	9305      	str	r3, [sp, #20]
    d958:	f040 821f 	bne.w	dd9a <_svfprintf_r+0xf4a>
    d95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d95e:	990e      	ldr	r1, [sp, #56]	; 0x38
    d960:	428b      	cmp	r3, r1
    d962:	db03      	blt.n	d96c <_svfprintf_r+0xb1c>
    d964:	f018 0f01 	tst.w	r8, #1
    d968:	f000 84cf 	beq.w	e30a <_svfprintf_r+0x14ba>
    d96c:	9910      	ldr	r1, [sp, #64]	; 0x40
    d96e:	9812      	ldr	r0, [sp, #72]	; 0x48
    d970:	440a      	add	r2, r1
    d972:	e9ca 0100 	strd	r0, r1, [sl]
    d976:	9925      	ldr	r1, [sp, #148]	; 0x94
    d978:	9226      	str	r2, [sp, #152]	; 0x98
    d97a:	3101      	adds	r1, #1
    d97c:	2907      	cmp	r1, #7
    d97e:	9125      	str	r1, [sp, #148]	; 0x94
    d980:	f300 86a5 	bgt.w	e6ce <_svfprintf_r+0x187e>
    d984:	f10a 0a08 	add.w	sl, sl, #8
    d988:	990e      	ldr	r1, [sp, #56]	; 0x38
    d98a:	1865      	adds	r5, r4, r1
    d98c:	1acc      	subs	r4, r1, r3
    d98e:	9b05      	ldr	r3, [sp, #20]
    d990:	1aed      	subs	r5, r5, r3
    d992:	42a5      	cmp	r5, r4
    d994:	bfa8      	it	ge
    d996:	4625      	movge	r5, r4
    d998:	2d00      	cmp	r5, #0
    d99a:	dd0d      	ble.n	d9b8 <_svfprintf_r+0xb68>
    d99c:	f8ca 3000 	str.w	r3, [sl]
    d9a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9a2:	f8ca 5004 	str.w	r5, [sl, #4]
    d9a6:	3301      	adds	r3, #1
    d9a8:	442a      	add	r2, r5
    d9aa:	2b07      	cmp	r3, #7
    d9ac:	9226      	str	r2, [sp, #152]	; 0x98
    d9ae:	9325      	str	r3, [sp, #148]	; 0x94
    d9b0:	f300 86bb 	bgt.w	e72a <_svfprintf_r+0x18da>
    d9b4:	f10a 0a08 	add.w	sl, sl, #8
    d9b8:	2d00      	cmp	r5, #0
    d9ba:	bfa8      	it	ge
    d9bc:	1b64      	subge	r4, r4, r5
    d9be:	2c00      	cmp	r4, #0
    d9c0:	f77f abde 	ble.w	d180 <_svfprintf_r+0x330>
    d9c4:	2c10      	cmp	r4, #16
    d9c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9c8:	f340 837c 	ble.w	e0c4 <_svfprintf_r+0x1274>
    d9cc:	ee1b 6a10 	vmov	r6, s22
    d9d0:	2510      	movs	r5, #16
    d9d2:	e005      	b.n	d9e0 <_svfprintf_r+0xb90>
    d9d4:	f10a 0a08 	add.w	sl, sl, #8
    d9d8:	3c10      	subs	r4, #16
    d9da:	2c10      	cmp	r4, #16
    d9dc:	f340 8372 	ble.w	e0c4 <_svfprintf_r+0x1274>
    d9e0:	3301      	adds	r3, #1
    d9e2:	4970      	ldr	r1, [pc, #448]	; (dba4 <_svfprintf_r+0xd54>)
    d9e4:	3210      	adds	r2, #16
    d9e6:	2b07      	cmp	r3, #7
    d9e8:	e9ca 1500 	strd	r1, r5, [sl]
    d9ec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d9f0:	ddf0      	ble.n	d9d4 <_svfprintf_r+0xb84>
    d9f2:	aa24      	add	r2, sp, #144	; 0x90
    d9f4:	4631      	mov	r1, r6
    d9f6:	4658      	mov	r0, fp
    d9f8:	f002 f932 	bl	fc60 <__ssprint_r>
    d9fc:	2800      	cmp	r0, #0
    d9fe:	f47f ae8c 	bne.w	d71a <_svfprintf_r+0x8ca>
    da02:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    da06:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da0a:	e7e5      	b.n	d9d8 <_svfprintf_r+0xb88>
    da0c:	2b30      	cmp	r3, #48	; 0x30
    da0e:	f43f ad8b 	beq.w	d528 <_svfprintf_r+0x6d8>
    da12:	2330      	movs	r3, #48	; 0x30
    da14:	3802      	subs	r0, #2
    da16:	f804 3c01 	strb.w	r3, [r4, #-1]
    da1a:	ab50      	add	r3, sp, #320	; 0x140
    da1c:	1a1b      	subs	r3, r3, r0
    da1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    da22:	9305      	str	r3, [sp, #20]
    da24:	4604      	mov	r4, r0
    da26:	e584      	b.n	d532 <_svfprintf_r+0x6e2>
    da28:	f018 0f01 	tst.w	r8, #1
    da2c:	f47f ae82 	bne.w	d734 <_svfprintf_r+0x8e4>
    da30:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da32:	f8ca 4000 	str.w	r4, [sl]
    da36:	3301      	adds	r3, #1
    da38:	3201      	adds	r2, #1
    da3a:	2101      	movs	r1, #1
    da3c:	2b07      	cmp	r3, #7
    da3e:	9226      	str	r2, [sp, #152]	; 0x98
    da40:	9325      	str	r3, [sp, #148]	; 0x94
    da42:	f8ca 1004 	str.w	r1, [sl, #4]
    da46:	f77f aea5 	ble.w	d794 <_svfprintf_r+0x944>
    da4a:	ee1b 1a10 	vmov	r1, s22
    da4e:	aa24      	add	r2, sp, #144	; 0x90
    da50:	4658      	mov	r0, fp
    da52:	f002 f905 	bl	fc60 <__ssprint_r>
    da56:	2800      	cmp	r0, #0
    da58:	f47f ae5f 	bne.w	d71a <_svfprintf_r+0x8ca>
    da5c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    da60:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da64:	e698      	b.n	d798 <_svfprintf_r+0x948>
    da66:	990e      	ldr	r1, [sp, #56]	; 0x38
    da68:	1e4c      	subs	r4, r1, #1
    da6a:	2c00      	cmp	r4, #0
    da6c:	f77f ae94 	ble.w	d798 <_svfprintf_r+0x948>
    da70:	2c10      	cmp	r4, #16
    da72:	f340 8361 	ble.w	e138 <_svfprintf_r+0x12e8>
    da76:	ee1b 6a10 	vmov	r6, s22
    da7a:	2510      	movs	r5, #16
    da7c:	e005      	b.n	da8a <_svfprintf_r+0xc3a>
    da7e:	f10a 0a08 	add.w	sl, sl, #8
    da82:	3c10      	subs	r4, #16
    da84:	2c10      	cmp	r4, #16
    da86:	f340 8357 	ble.w	e138 <_svfprintf_r+0x12e8>
    da8a:	3301      	adds	r3, #1
    da8c:	4945      	ldr	r1, [pc, #276]	; (dba4 <_svfprintf_r+0xd54>)
    da8e:	3210      	adds	r2, #16
    da90:	2b07      	cmp	r3, #7
    da92:	e9ca 1500 	strd	r1, r5, [sl]
    da96:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da9a:	ddf0      	ble.n	da7e <_svfprintf_r+0xc2e>
    da9c:	aa24      	add	r2, sp, #144	; 0x90
    da9e:	4631      	mov	r1, r6
    daa0:	4658      	mov	r0, fp
    daa2:	f002 f8dd 	bl	fc60 <__ssprint_r>
    daa6:	2800      	cmp	r0, #0
    daa8:	f47f ae37 	bne.w	d71a <_svfprintf_r+0x8ca>
    daac:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dab0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dab4:	e7e5      	b.n	da82 <_svfprintf_r+0xc32>
    dab6:	ee1b 1a10 	vmov	r1, s22
    daba:	aa24      	add	r2, sp, #144	; 0x90
    dabc:	4658      	mov	r0, fp
    dabe:	f002 f8cf 	bl	fc60 <__ssprint_r>
    dac2:	2800      	cmp	r0, #0
    dac4:	f47f ae29 	bne.w	d71a <_svfprintf_r+0x8ca>
    dac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    daca:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dace:	f7ff bb44 	b.w	d15a <_svfprintf_r+0x30a>
    dad2:	9b02      	ldr	r3, [sp, #8]
    dad4:	f013 0310 	ands.w	r3, r3, #16
    dad8:	f040 80c1 	bne.w	dc5e <_svfprintf_r+0xe0e>
    dadc:	9a02      	ldr	r2, [sp, #8]
    dade:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    dae2:	f000 837a 	beq.w	e1da <_svfprintf_r+0x138a>
    dae6:	9808      	ldr	r0, [sp, #32]
    dae8:	f850 2b04 	ldr.w	r2, [r0], #4
    daec:	9008      	str	r0, [sp, #32]
    daee:	4619      	mov	r1, r3
    daf0:	b292      	uxth	r2, r2
    daf2:	2301      	movs	r3, #1
    daf4:	e451      	b.n	d39a <_svfprintf_r+0x54a>
    daf6:	f018 0310 	ands.w	r3, r8, #16
    dafa:	d155      	bne.n	dba8 <_svfprintf_r+0xd58>
    dafc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    db00:	f000 835d 	beq.w	e1be <_svfprintf_r+0x136e>
    db04:	9808      	ldr	r0, [sp, #32]
    db06:	f850 2b04 	ldr.w	r2, [r0], #4
    db0a:	9008      	str	r0, [sp, #32]
    db0c:	4619      	mov	r1, r3
    db0e:	b292      	uxth	r2, r2
    db10:	e4a8      	b.n	d464 <_svfprintf_r+0x614>
    db12:	4252      	negs	r2, r2
    db14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    db18:	f8cd 8008 	str.w	r8, [sp, #8]
    db1c:	202d      	movs	r0, #45	; 0x2d
    db1e:	2301      	movs	r3, #1
    db20:	e43c      	b.n	d39c <_svfprintf_r+0x54c>
    db22:	ee1b 1a10 	vmov	r1, s22
    db26:	aa24      	add	r2, sp, #144	; 0x90
    db28:	4658      	mov	r0, fp
    db2a:	f002 f899 	bl	fc60 <__ssprint_r>
    db2e:	2800      	cmp	r0, #0
    db30:	f47f adf3 	bne.w	d71a <_svfprintf_r+0x8ca>
    db34:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    db38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db3c:	e616      	b.n	d76c <_svfprintf_r+0x91c>
    db3e:	ee1b 1a10 	vmov	r1, s22
    db42:	aa24      	add	r2, sp, #144	; 0x90
    db44:	4658      	mov	r0, fp
    db46:	f002 f88b 	bl	fc60 <__ssprint_r>
    db4a:	2800      	cmp	r0, #0
    db4c:	f47f ade5 	bne.w	d71a <_svfprintf_r+0x8ca>
    db50:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    db54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db58:	e5fb      	b.n	d752 <_svfprintf_r+0x902>
    db5a:	f018 0f01 	tst.w	r8, #1
    db5e:	f43f ab0f 	beq.w	d180 <_svfprintf_r+0x330>
    db62:	e52a      	b.n	d5ba <_svfprintf_r+0x76a>
    db64:	9308      	str	r3, [sp, #32]
    db66:	f899 3000 	ldrb.w	r3, [r9]
    db6a:	f7ff b9cd 	b.w	cf08 <_svfprintf_r+0xb8>
    db6e:	ac50      	add	r4, sp, #320	; 0x140
    db70:	e4df      	b.n	d532 <_svfprintf_r+0x6e2>
    db72:	f418 7f00 	tst.w	r8, #512	; 0x200
    db76:	f040 83db 	bne.w	e330 <_svfprintf_r+0x14e0>
    db7a:	f853 2b04 	ldr.w	r2, [r3], #4
    db7e:	9308      	str	r3, [sp, #32]
    db80:	17d1      	asrs	r1, r2, #31
    db82:	460b      	mov	r3, r1
    db84:	f7ff bbb6 	b.w	d2f4 <_svfprintf_r+0x4a4>
    db88:	9b08      	ldr	r3, [sp, #32]
    db8a:	9804      	ldr	r0, [sp, #16]
    db8c:	f853 1b04 	ldr.w	r1, [r3], #4
    db90:	9308      	str	r3, [sp, #32]
    db92:	17c2      	asrs	r2, r0, #31
    db94:	e9c1 0200 	strd	r0, r2, [r1]
    db98:	464c      	mov	r4, r9
    db9a:	f7ff b98b 	b.w	ceb4 <_svfprintf_r+0x64>
    db9e:	bf00      	nop
    dba0:	20000d44 	.word	0x20000d44
    dba4:	200012c4 	.word	0x200012c4
    dba8:	9b08      	ldr	r3, [sp, #32]
    dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
    dbae:	9308      	str	r3, [sp, #32]
    dbb0:	e458      	b.n	d464 <_svfprintf_r+0x614>
    dbb2:	eeb4 8b48 	vcmp.f64	d8, d8
    dbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dbba:	f180 8694 	bvs.w	e8e6 <_svfprintf_r+0x1a96>
    dbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbc0:	2b61      	cmp	r3, #97	; 0x61
    dbc2:	f000 8552 	beq.w	e66a <_svfprintf_r+0x181a>
    dbc6:	2b41      	cmp	r3, #65	; 0x41
    dbc8:	f000 85c0 	beq.w	e74c <_svfprintf_r+0x18fc>
    dbcc:	9b03      	ldr	r3, [sp, #12]
    dbce:	3301      	adds	r3, #1
    dbd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbd2:	f023 0520 	bic.w	r5, r3, #32
    dbd6:	f000 8480 	beq.w	e4da <_svfprintf_r+0x168a>
    dbda:	2d47      	cmp	r5, #71	; 0x47
    dbdc:	d104      	bne.n	dbe8 <_svfprintf_r+0xd98>
    dbde:	9b03      	ldr	r3, [sp, #12]
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	bf08      	it	eq
    dbe4:	2301      	moveq	r3, #1
    dbe6:	9303      	str	r3, [sp, #12]
    dbe8:	ee18 3a90 	vmov	r3, s17
    dbec:	2b00      	cmp	r3, #0
    dbee:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    dbf2:	4646      	mov	r6, r8
    dbf4:	f2c0 8618 	blt.w	e828 <_svfprintf_r+0x19d8>
    dbf8:	eeb0 ab48 	vmov.f64	d10, d8
    dbfc:	2300      	movs	r3, #0
    dbfe:	4690      	mov	r8, r2
    dc00:	9309      	str	r3, [sp, #36]	; 0x24
    dc02:	9307      	str	r3, [sp, #28]
    dc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc06:	3b41      	subs	r3, #65	; 0x41
    dc08:	2b25      	cmp	r3, #37	; 0x25
    dc0a:	f200 8398 	bhi.w	e33e <_svfprintf_r+0x14ee>
    dc0e:	e8df f013 	tbh	[pc, r3, lsl #1]
    dc12:	046f      	.short	0x046f
    dc14:	03960396 	.word	0x03960396
    dc18:	04680396 	.word	0x04680396
    dc1c:	0396046c 	.word	0x0396046c
    dc20:	03960396 	.word	0x03960396
    dc24:	03960396 	.word	0x03960396
    dc28:	03960396 	.word	0x03960396
    dc2c:	03960396 	.word	0x03960396
    dc30:	03960396 	.word	0x03960396
    dc34:	03960396 	.word	0x03960396
    dc38:	03960396 	.word	0x03960396
    dc3c:	03960396 	.word	0x03960396
    dc40:	03960396 	.word	0x03960396
    dc44:	03960396 	.word	0x03960396
    dc48:	03960396 	.word	0x03960396
    dc4c:	03960396 	.word	0x03960396
    dc50:	03960396 	.word	0x03960396
    dc54:	03960396 	.word	0x03960396
    dc58:	04680396 	.word	0x04680396
    dc5c:	046c      	.short	0x046c
    dc5e:	9b08      	ldr	r3, [sp, #32]
    dc60:	f853 2b04 	ldr.w	r2, [r3], #4
    dc64:	9308      	str	r3, [sp, #32]
    dc66:	2301      	movs	r3, #1
    dc68:	f7ff bb97 	b.w	d39a <_svfprintf_r+0x54a>
    dc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dc6e:	2b00      	cmp	r3, #0
    dc70:	f43f a9cf 	beq.w	d012 <_svfprintf_r+0x1c2>
    dc74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	2b00      	cmp	r3, #0
    dc7a:	f43f a9ca 	beq.w	d012 <_svfprintf_r+0x1c2>
    dc7e:	f899 3000 	ldrb.w	r3, [r9]
    dc82:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    dc86:	f7ff b93f 	b.w	cf08 <_svfprintf_r+0xb8>
    dc8a:	930b      	str	r3, [sp, #44]	; 0x2c
    dc8c:	f8cd 8008 	str.w	r8, [sp, #8]
    dc90:	f7ff bbf1 	b.w	d476 <_svfprintf_r+0x626>
    dc94:	930b      	str	r3, [sp, #44]	; 0x2c
    dc96:	4b9a      	ldr	r3, [pc, #616]	; (df00 <_svfprintf_r+0x10b0>)
    dc98:	9311      	str	r3, [sp, #68]	; 0x44
    dc9a:	f018 0120 	ands.w	r1, r8, #32
    dc9e:	f000 8105 	beq.w	deac <_svfprintf_r+0x105c>
    dca2:	9b08      	ldr	r3, [sp, #32]
    dca4:	3307      	adds	r3, #7
    dca6:	f023 0307 	bic.w	r3, r3, #7
    dcaa:	6859      	ldr	r1, [r3, #4]
    dcac:	f853 2b08 	ldr.w	r2, [r3], #8
    dcb0:	9308      	str	r3, [sp, #32]
    dcb2:	f018 0f01 	tst.w	r8, #1
    dcb6:	d00a      	beq.n	dcce <_svfprintf_r+0xe7e>
    dcb8:	ea52 0301 	orrs.w	r3, r2, r1
    dcbc:	d007      	beq.n	dcce <_svfprintf_r+0xe7e>
    dcbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcc0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    dcc4:	2330      	movs	r3, #48	; 0x30
    dcc6:	f048 0802 	orr.w	r8, r8, #2
    dcca:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    dcce:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dcd2:	9302      	str	r3, [sp, #8]
    dcd4:	2302      	movs	r3, #2
    dcd6:	f7ff bb60 	b.w	d39a <_svfprintf_r+0x54a>
    dcda:	930b      	str	r3, [sp, #44]	; 0x2c
    dcdc:	f7ff bbb6 	b.w	d44c <_svfprintf_r+0x5fc>
    dce0:	930b      	str	r3, [sp, #44]	; 0x2c
    dce2:	4b88      	ldr	r3, [pc, #544]	; (df04 <_svfprintf_r+0x10b4>)
    dce4:	9311      	str	r3, [sp, #68]	; 0x44
    dce6:	e7d8      	b.n	dc9a <_svfprintf_r+0xe4a>
    dce8:	9b08      	ldr	r3, [sp, #32]
    dcea:	2101      	movs	r1, #1
    dcec:	f853 2b04 	ldr.w	r2, [r3], #4
    dcf0:	9102      	str	r1, [sp, #8]
    dcf2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    dcf6:	9308      	str	r3, [sp, #32]
    dcf8:	9105      	str	r1, [sp, #20]
    dcfa:	ac37      	add	r4, sp, #220	; 0xdc
    dcfc:	f7ff baaf 	b.w	d25e <_svfprintf_r+0x40e>
    dd00:	ee1b 1a10 	vmov	r1, s22
    dd04:	aa24      	add	r2, sp, #144	; 0x90
    dd06:	4658      	mov	r0, fp
    dd08:	f001 ffaa 	bl	fc60 <__ssprint_r>
    dd0c:	2800      	cmp	r0, #0
    dd0e:	f47f ad04 	bne.w	d71a <_svfprintf_r+0x8ca>
    dd12:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dd14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd18:	e45d      	b.n	d5d6 <_svfprintf_r+0x786>
    dd1a:	9b03      	ldr	r3, [sp, #12]
    dd1c:	9407      	str	r4, [sp, #28]
    dd1e:	2b06      	cmp	r3, #6
    dd20:	4622      	mov	r2, r4
    dd22:	bf28      	it	cs
    dd24:	2306      	movcs	r3, #6
    dd26:	9403      	str	r4, [sp, #12]
    dd28:	4621      	mov	r1, r4
    dd2a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    dd2e:	4c76      	ldr	r4, [pc, #472]	; (df08 <_svfprintf_r+0x10b8>)
    dd30:	9302      	str	r3, [sp, #8]
    dd32:	9305      	str	r3, [sp, #20]
    dd34:	920f      	str	r2, [sp, #60]	; 0x3c
    dd36:	f7ff ba6c 	b.w	d212 <_svfprintf_r+0x3c2>
    dd3a:	2140      	movs	r1, #64	; 0x40
    dd3c:	4658      	mov	r0, fp
    dd3e:	f7fc fef7 	bl	ab30 <_malloc_r>
    dd42:	6020      	str	r0, [r4, #0]
    dd44:	6120      	str	r0, [r4, #16]
    dd46:	2800      	cmp	r0, #0
    dd48:	f000 860f 	beq.w	e96a <_svfprintf_r+0x1b1a>
    dd4c:	2340      	movs	r3, #64	; 0x40
    dd4e:	6163      	str	r3, [r4, #20]
    dd50:	f7ff b89e 	b.w	ce90 <_svfprintf_r+0x40>
    dd54:	2d10      	cmp	r5, #16
    dd56:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd58:	f340 825d 	ble.w	e216 <_svfprintf_r+0x13c6>
    dd5c:	4651      	mov	r1, sl
    dd5e:	2610      	movs	r6, #16
    dd60:	ee1b aa10 	vmov	sl, s22
    dd64:	e004      	b.n	dd70 <_svfprintf_r+0xf20>
    dd66:	3108      	adds	r1, #8
    dd68:	3d10      	subs	r5, #16
    dd6a:	2d10      	cmp	r5, #16
    dd6c:	f340 8252 	ble.w	e214 <_svfprintf_r+0x13c4>
    dd70:	3301      	adds	r3, #1
    dd72:	4866      	ldr	r0, [pc, #408]	; (df0c <_svfprintf_r+0x10bc>)
    dd74:	3210      	adds	r2, #16
    dd76:	2b07      	cmp	r3, #7
    dd78:	e9c1 0600 	strd	r0, r6, [r1]
    dd7c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dd80:	ddf1      	ble.n	dd66 <_svfprintf_r+0xf16>
    dd82:	aa24      	add	r2, sp, #144	; 0x90
    dd84:	4651      	mov	r1, sl
    dd86:	4658      	mov	r0, fp
    dd88:	f001 ff6a 	bl	fc60 <__ssprint_r>
    dd8c:	2800      	cmp	r0, #0
    dd8e:	f47f acc4 	bne.w	d71a <_svfprintf_r+0x8ca>
    dd92:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dd96:	a927      	add	r1, sp, #156	; 0x9c
    dd98:	e7e6      	b.n	dd68 <_svfprintf_r+0xf18>
    dd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    dda0:	18e3      	adds	r3, r4, r3
    dda2:	9303      	str	r3, [sp, #12]
    dda4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dda6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ddaa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    ddac:	9d05      	ldr	r5, [sp, #20]
    ddae:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    ddb2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    ddb6:	940b      	str	r4, [sp, #44]	; 0x2c
    ddb8:	ee1b 1a10 	vmov	r1, s22
    ddbc:	4650      	mov	r0, sl
    ddbe:	2b00      	cmp	r3, #0
    ddc0:	d034      	beq.n	de2c <_svfprintf_r+0xfdc>
    ddc2:	f1b8 0f00 	cmp.w	r8, #0
    ddc6:	d135      	bne.n	de34 <_svfprintf_r+0xfe4>
    ddc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ddca:	3b01      	subs	r3, #1
    ddcc:	3e01      	subs	r6, #1
    ddce:	930d      	str	r3, [sp, #52]	; 0x34
    ddd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ddd2:	e9c0 3900 	strd	r3, r9, [r0]
    ddd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ddd8:	3301      	adds	r3, #1
    ddda:	444a      	add	r2, r9
    dddc:	2b07      	cmp	r3, #7
    ddde:	9226      	str	r2, [sp, #152]	; 0x98
    dde0:	9325      	str	r3, [sp, #148]	; 0x94
    dde2:	dc6c      	bgt.n	debe <_svfprintf_r+0x106e>
    dde4:	3008      	adds	r0, #8
    dde6:	9b03      	ldr	r3, [sp, #12]
    dde8:	f896 c000 	ldrb.w	ip, [r6]
    ddec:	1b5b      	subs	r3, r3, r5
    ddee:	4563      	cmp	r3, ip
    ddf0:	bfa8      	it	ge
    ddf2:	4663      	movge	r3, ip
    ddf4:	2b00      	cmp	r3, #0
    ddf6:	469a      	mov	sl, r3
    ddf8:	dd0c      	ble.n	de14 <_svfprintf_r+0xfc4>
    ddfa:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ddfc:	3401      	adds	r4, #1
    ddfe:	441a      	add	r2, r3
    de00:	2c07      	cmp	r4, #7
    de02:	e9c0 5300 	strd	r5, r3, [r0]
    de06:	9226      	str	r2, [sp, #152]	; 0x98
    de08:	9425      	str	r4, [sp, #148]	; 0x94
    de0a:	f300 8177 	bgt.w	e0fc <_svfprintf_r+0x12ac>
    de0e:	f896 c000 	ldrb.w	ip, [r6]
    de12:	3008      	adds	r0, #8
    de14:	f1ba 0f00 	cmp.w	sl, #0
    de18:	bfac      	ite	ge
    de1a:	ebac 040a 	subge.w	r4, ip, sl
    de1e:	4664      	movlt	r4, ip
    de20:	2c00      	cmp	r4, #0
    de22:	dc0a      	bgt.n	de3a <_svfprintf_r+0xfea>
    de24:	4465      	add	r5, ip
    de26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de28:	2b00      	cmp	r3, #0
    de2a:	d1ca      	bne.n	ddc2 <_svfprintf_r+0xf72>
    de2c:	f1b8 0f00 	cmp.w	r8, #0
    de30:	f000 83ac 	beq.w	e58c <_svfprintf_r+0x173c>
    de34:	f108 38ff 	add.w	r8, r8, #4294967295
    de38:	e7ca      	b.n	ddd0 <_svfprintf_r+0xf80>
    de3a:	2c10      	cmp	r4, #16
    de3c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    de40:	dd24      	ble.n	de8c <_svfprintf_r+0x103c>
    de42:	9505      	str	r5, [sp, #20]
    de44:	f04f 0a10 	mov.w	sl, #16
    de48:	4663      	mov	r3, ip
    de4a:	460d      	mov	r5, r1
    de4c:	e004      	b.n	de58 <_svfprintf_r+0x1008>
    de4e:	3c10      	subs	r4, #16
    de50:	2c10      	cmp	r4, #16
    de52:	f100 0008 	add.w	r0, r0, #8
    de56:	dd16      	ble.n	de86 <_svfprintf_r+0x1036>
    de58:	3301      	adds	r3, #1
    de5a:	492c      	ldr	r1, [pc, #176]	; (df0c <_svfprintf_r+0x10bc>)
    de5c:	3210      	adds	r2, #16
    de5e:	2b07      	cmp	r3, #7
    de60:	e9c0 1a00 	strd	r1, sl, [r0]
    de64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    de68:	ddf1      	ble.n	de4e <_svfprintf_r+0xffe>
    de6a:	aa24      	add	r2, sp, #144	; 0x90
    de6c:	4629      	mov	r1, r5
    de6e:	4658      	mov	r0, fp
    de70:	f001 fef6 	bl	fc60 <__ssprint_r>
    de74:	2800      	cmp	r0, #0
    de76:	f47f ac50 	bne.w	d71a <_svfprintf_r+0x8ca>
    de7a:	3c10      	subs	r4, #16
    de7c:	2c10      	cmp	r4, #16
    de7e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    de82:	a827      	add	r0, sp, #156	; 0x9c
    de84:	dce8      	bgt.n	de58 <_svfprintf_r+0x1008>
    de86:	4629      	mov	r1, r5
    de88:	9d05      	ldr	r5, [sp, #20]
    de8a:	469c      	mov	ip, r3
    de8c:	f10c 0301 	add.w	r3, ip, #1
    de90:	4422      	add	r2, r4
    de92:	6044      	str	r4, [r0, #4]
    de94:	2b07      	cmp	r3, #7
    de96:	4c1d      	ldr	r4, [pc, #116]	; (df0c <_svfprintf_r+0x10bc>)
    de98:	6004      	str	r4, [r0, #0]
    de9a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    de9e:	f300 83c6 	bgt.w	e62e <_svfprintf_r+0x17de>
    dea2:	f896 c000 	ldrb.w	ip, [r6]
    dea6:	3008      	adds	r0, #8
    dea8:	4465      	add	r5, ip
    deaa:	e7bc      	b.n	de26 <_svfprintf_r+0xfd6>
    deac:	f018 0310 	ands.w	r3, r8, #16
    deb0:	f000 80c2 	beq.w	e038 <_svfprintf_r+0x11e8>
    deb4:	9b08      	ldr	r3, [sp, #32]
    deb6:	f853 2b04 	ldr.w	r2, [r3], #4
    deba:	9308      	str	r3, [sp, #32]
    debc:	e6f9      	b.n	dcb2 <_svfprintf_r+0xe62>
    debe:	aa24      	add	r2, sp, #144	; 0x90
    dec0:	4658      	mov	r0, fp
    dec2:	9105      	str	r1, [sp, #20]
    dec4:	f001 fecc 	bl	fc60 <__ssprint_r>
    dec8:	2800      	cmp	r0, #0
    deca:	f47f ac26 	bne.w	d71a <_svfprintf_r+0x8ca>
    dece:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ded0:	9905      	ldr	r1, [sp, #20]
    ded2:	a827      	add	r0, sp, #156	; 0x9c
    ded4:	e787      	b.n	dde6 <_svfprintf_r+0xf96>
    ded6:	9802      	ldr	r0, [sp, #8]
    ded8:	f8cd a01c 	str.w	sl, [sp, #28]
    dedc:	ac50      	add	r4, sp, #320	; 0x140
    dede:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    dee2:	2500      	movs	r5, #0
    dee4:	ee0a ba10 	vmov	s20, fp
    dee8:	4b09      	ldr	r3, [pc, #36]	; (df10 <_svfprintf_r+0x10c0>)
    deea:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    deee:	f8cd 9014 	str.w	r9, [sp, #20]
    def2:	46a3      	mov	fp, r4
    def4:	f04f 0805 	mov.w	r8, #5
    def8:	46ac      	mov	ip, r5
    defa:	4604      	mov	r4, r0
    defc:	e010      	b.n	df20 <_svfprintf_r+0x10d0>
    defe:	bf00      	nop
    df00:	20000d10 	.word	0x20000d10
    df04:	20000d24 	.word	0x20000d24
    df08:	20000d38 	.word	0x20000d38
    df0c:	200012c4 	.word	0x200012c4
    df10:	cccccccd 	.word	0xcccccccd
    df14:	2a0a      	cmp	r2, #10
    df16:	f171 0100 	sbcs.w	r1, r1, #0
    df1a:	d336      	bcc.n	df8a <_svfprintf_r+0x113a>
    df1c:	464a      	mov	r2, r9
    df1e:	4631      	mov	r1, r6
    df20:	1850      	adds	r0, r2, r1
    df22:	f140 0000 	adc.w	r0, r0, #0
    df26:	fba3 5600 	umull	r5, r6, r3, r0
    df2a:	f026 0503 	bic.w	r5, r6, #3
    df2e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    df32:	1b40      	subs	r0, r0, r5
    df34:	1a15      	subs	r5, r2, r0
    df36:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    df3a:	f161 0e00 	sbc.w	lr, r1, #0
    df3e:	fb06 f605 	mul.w	r6, r6, r5
    df42:	fba5 9503 	umull	r9, r5, r5, r3
    df46:	fb03 660e 	mla	r6, r3, lr, r6
    df4a:	f009 0e01 	and.w	lr, r9, #1
    df4e:	442e      	add	r6, r5
    df50:	fbae 5e08 	umull	r5, lr, lr, r8
    df54:	182d      	adds	r5, r5, r0
    df56:	ea4f 0959 	mov.w	r9, r9, lsr #1
    df5a:	3530      	adds	r5, #48	; 0x30
    df5c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    df60:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    df64:	f10c 0c01 	add.w	ip, ip, #1
    df68:	f10b 3bff 	add.w	fp, fp, #4294967295
    df6c:	0876      	lsrs	r6, r6, #1
    df6e:	2c00      	cmp	r4, #0
    df70:	d0d0      	beq.n	df14 <_svfprintf_r+0x10c4>
    df72:	f89a 0000 	ldrb.w	r0, [sl]
    df76:	4584      	cmp	ip, r0
    df78:	d1cc      	bne.n	df14 <_svfprintf_r+0x10c4>
    df7a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    df7e:	d0c9      	beq.n	df14 <_svfprintf_r+0x10c4>
    df80:	2a0a      	cmp	r2, #10
    df82:	f171 0100 	sbcs.w	r1, r1, #0
    df86:	f080 818f 	bcs.w	e2a8 <_svfprintf_r+0x1458>
    df8a:	465c      	mov	r4, fp
    df8c:	ab50      	add	r3, sp, #320	; 0x140
    df8e:	1b1b      	subs	r3, r3, r4
    df90:	f8dd 9014 	ldr.w	r9, [sp, #20]
    df94:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    df98:	ee1a ba10 	vmov	fp, s20
    df9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    dfa0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dfa4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    dfa8:	9305      	str	r3, [sp, #20]
    dfaa:	f7ff bac2 	b.w	d532 <_svfprintf_r+0x6e2>
    dfae:	ee1b 1a10 	vmov	r1, s22
    dfb2:	aa24      	add	r2, sp, #144	; 0x90
    dfb4:	4658      	mov	r0, fp
    dfb6:	f001 fe53 	bl	fc60 <__ssprint_r>
    dfba:	2800      	cmp	r0, #0
    dfbc:	f47f abad 	bne.w	d71a <_svfprintf_r+0x8ca>
    dfc0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    dfc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dfc6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfca:	f7ff b896 	b.w	d0fa <_svfprintf_r+0x2aa>
    dfce:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dfd0:	48be      	ldr	r0, [pc, #760]	; (e2cc <_svfprintf_r+0x147c>)
    dfd2:	f8ca 0000 	str.w	r0, [sl]
    dfd6:	3301      	adds	r3, #1
    dfd8:	3201      	adds	r2, #1
    dfda:	2001      	movs	r0, #1
    dfdc:	2b07      	cmp	r3, #7
    dfde:	9226      	str	r2, [sp, #152]	; 0x98
    dfe0:	9325      	str	r3, [sp, #148]	; 0x94
    dfe2:	f8ca 0004 	str.w	r0, [sl, #4]
    dfe6:	f300 8177 	bgt.w	e2d8 <_svfprintf_r+0x1488>
    dfea:	f10a 0a08 	add.w	sl, sl, #8
    dfee:	2900      	cmp	r1, #0
    dff0:	f040 80af 	bne.w	e152 <_svfprintf_r+0x1302>
    dff4:	990e      	ldr	r1, [sp, #56]	; 0x38
    dff6:	f008 0301 	and.w	r3, r8, #1
    dffa:	430b      	orrs	r3, r1
    dffc:	f43f a8c0 	beq.w	d180 <_svfprintf_r+0x330>
    e000:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e002:	9912      	ldr	r1, [sp, #72]	; 0x48
    e004:	441a      	add	r2, r3
    e006:	e9ca 1300 	strd	r1, r3, [sl]
    e00a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e00c:	9226      	str	r2, [sp, #152]	; 0x98
    e00e:	3301      	adds	r3, #1
    e010:	2b07      	cmp	r3, #7
    e012:	9325      	str	r3, [sp, #148]	; 0x94
    e014:	f300 8252 	bgt.w	e4bc <_svfprintf_r+0x166c>
    e018:	f10a 0a08 	add.w	sl, sl, #8
    e01c:	990e      	ldr	r1, [sp, #56]	; 0x38
    e01e:	f8ca 4000 	str.w	r4, [sl]
    e022:	3301      	adds	r3, #1
    e024:	440a      	add	r2, r1
    e026:	2b07      	cmp	r3, #7
    e028:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e02c:	f8ca 1004 	str.w	r1, [sl, #4]
    e030:	f77f a8a4 	ble.w	d17c <_svfprintf_r+0x32c>
    e034:	f7ff bbbd 	b.w	d7b2 <_svfprintf_r+0x962>
    e038:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e03c:	f000 80dd 	beq.w	e1fa <_svfprintf_r+0x13aa>
    e040:	9808      	ldr	r0, [sp, #32]
    e042:	f850 2b04 	ldr.w	r2, [r0], #4
    e046:	9008      	str	r0, [sp, #32]
    e048:	4619      	mov	r1, r3
    e04a:	b292      	uxth	r2, r2
    e04c:	e631      	b.n	dcb2 <_svfprintf_r+0xe62>
    e04e:	ee1b 1a10 	vmov	r1, s22
    e052:	aa24      	add	r2, sp, #144	; 0x90
    e054:	4658      	mov	r0, fp
    e056:	f001 fe03 	bl	fc60 <__ssprint_r>
    e05a:	2800      	cmp	r0, #0
    e05c:	f47f ab5d 	bne.w	d71a <_svfprintf_r+0x8ca>
    e060:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e062:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e066:	f7ff baa3 	b.w	d5b0 <_svfprintf_r+0x760>
    e06a:	ae22      	add	r6, sp, #136	; 0x88
    e06c:	2208      	movs	r2, #8
    e06e:	2100      	movs	r1, #0
    e070:	4630      	mov	r0, r6
    e072:	941d      	str	r4, [sp, #116]	; 0x74
    e074:	f7fd fda4 	bl	bbc0 <memset>
    e078:	9b03      	ldr	r3, [sp, #12]
    e07a:	1c5a      	adds	r2, r3, #1
    e07c:	f000 80db 	beq.w	e236 <_svfprintf_r+0x13e6>
    e080:	2500      	movs	r5, #0
    e082:	f8cd 9008 	str.w	r9, [sp, #8]
    e086:	f8cd 801c 	str.w	r8, [sp, #28]
    e08a:	4699      	mov	r9, r3
    e08c:	46a8      	mov	r8, r5
    e08e:	e00c      	b.n	e0aa <_svfprintf_r+0x125a>
    e090:	a937      	add	r1, sp, #220	; 0xdc
    e092:	4658      	mov	r0, fp
    e094:	f001 fd9e 	bl	fbd4 <_wcrtomb_r>
    e098:	1c43      	adds	r3, r0, #1
    e09a:	4440      	add	r0, r8
    e09c:	f000 83c8 	beq.w	e830 <_svfprintf_r+0x19e0>
    e0a0:	4548      	cmp	r0, r9
    e0a2:	dc08      	bgt.n	e0b6 <_svfprintf_r+0x1266>
    e0a4:	f000 8418 	beq.w	e8d8 <_svfprintf_r+0x1a88>
    e0a8:	4680      	mov	r8, r0
    e0aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e0ac:	5952      	ldr	r2, [r2, r5]
    e0ae:	4633      	mov	r3, r6
    e0b0:	3504      	adds	r5, #4
    e0b2:	2a00      	cmp	r2, #0
    e0b4:	d1ec      	bne.n	e090 <_svfprintf_r+0x1240>
    e0b6:	f8cd 8014 	str.w	r8, [sp, #20]
    e0ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e0be:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e0c2:	e0c5      	b.n	e250 <_svfprintf_r+0x1400>
    e0c4:	3301      	adds	r3, #1
    e0c6:	4982      	ldr	r1, [pc, #520]	; (e2d0 <_svfprintf_r+0x1480>)
    e0c8:	f8ca 4004 	str.w	r4, [sl, #4]
    e0cc:	4422      	add	r2, r4
    e0ce:	2b07      	cmp	r3, #7
    e0d0:	f8ca 1000 	str.w	r1, [sl]
    e0d4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e0d8:	f77f a850 	ble.w	d17c <_svfprintf_r+0x32c>
    e0dc:	f7ff bb69 	b.w	d7b2 <_svfprintf_r+0x962>
    e0e0:	ee1b 1a10 	vmov	r1, s22
    e0e4:	aa24      	add	r2, sp, #144	; 0x90
    e0e6:	4658      	mov	r0, fp
    e0e8:	f001 fdba 	bl	fc60 <__ssprint_r>
    e0ec:	2800      	cmp	r0, #0
    e0ee:	f47f ab14 	bne.w	d71a <_svfprintf_r+0x8ca>
    e0f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e0f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0f8:	f7ff b829 	b.w	d14e <_svfprintf_r+0x2fe>
    e0fc:	aa24      	add	r2, sp, #144	; 0x90
    e0fe:	4658      	mov	r0, fp
    e100:	9105      	str	r1, [sp, #20]
    e102:	f001 fdad 	bl	fc60 <__ssprint_r>
    e106:	2800      	cmp	r0, #0
    e108:	f47f ab07 	bne.w	d71a <_svfprintf_r+0x8ca>
    e10c:	f896 c000 	ldrb.w	ip, [r6]
    e110:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e112:	9905      	ldr	r1, [sp, #20]
    e114:	a827      	add	r0, sp, #156	; 0x9c
    e116:	e67d      	b.n	de14 <_svfprintf_r+0xfc4>
    e118:	2b01      	cmp	r3, #1
    e11a:	f8cd 8008 	str.w	r8, [sp, #8]
    e11e:	f47f a9f3 	bne.w	d508 <_svfprintf_r+0x6b8>
    e122:	f7ff bb93 	b.w	d84c <_svfprintf_r+0x9fc>
    e126:	9b08      	ldr	r3, [sp, #32]
    e128:	9904      	ldr	r1, [sp, #16]
    e12a:	f853 2b04 	ldr.w	r2, [r3], #4
    e12e:	464c      	mov	r4, r9
    e130:	6011      	str	r1, [r2, #0]
    e132:	9308      	str	r3, [sp, #32]
    e134:	f7fe bebe 	b.w	ceb4 <_svfprintf_r+0x64>
    e138:	3301      	adds	r3, #1
    e13a:	4965      	ldr	r1, [pc, #404]	; (e2d0 <_svfprintf_r+0x1480>)
    e13c:	f8ca 4004 	str.w	r4, [sl, #4]
    e140:	4422      	add	r2, r4
    e142:	2b07      	cmp	r3, #7
    e144:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e148:	f8ca 1000 	str.w	r1, [sl]
    e14c:	f77f ab22 	ble.w	d794 <_svfprintf_r+0x944>
    e150:	e47b      	b.n	da4a <_svfprintf_r+0xbfa>
    e152:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e154:	9812      	ldr	r0, [sp, #72]	; 0x48
    e156:	441a      	add	r2, r3
    e158:	e9ca 0300 	strd	r0, r3, [sl]
    e15c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e15e:	9226      	str	r2, [sp, #152]	; 0x98
    e160:	3301      	adds	r3, #1
    e162:	2b07      	cmp	r3, #7
    e164:	9325      	str	r3, [sp, #148]	; 0x94
    e166:	f300 81a9 	bgt.w	e4bc <_svfprintf_r+0x166c>
    e16a:	f10a 0a08 	add.w	sl, sl, #8
    e16e:	2900      	cmp	r1, #0
    e170:	f6bf af54 	bge.w	e01c <_svfprintf_r+0x11cc>
    e174:	424d      	negs	r5, r1
    e176:	3110      	adds	r1, #16
    e178:	f280 830f 	bge.w	e79a <_svfprintf_r+0x194a>
    e17c:	ee1b 1a10 	vmov	r1, s22
    e180:	2610      	movs	r6, #16
    e182:	e005      	b.n	e190 <_svfprintf_r+0x1340>
    e184:	f10a 0a08 	add.w	sl, sl, #8
    e188:	3d10      	subs	r5, #16
    e18a:	2d10      	cmp	r5, #16
    e18c:	f340 8305 	ble.w	e79a <_svfprintf_r+0x194a>
    e190:	3301      	adds	r3, #1
    e192:	484f      	ldr	r0, [pc, #316]	; (e2d0 <_svfprintf_r+0x1480>)
    e194:	3210      	adds	r2, #16
    e196:	2b07      	cmp	r3, #7
    e198:	e9ca 0600 	strd	r0, r6, [sl]
    e19c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1a0:	ddf0      	ble.n	e184 <_svfprintf_r+0x1334>
    e1a2:	aa24      	add	r2, sp, #144	; 0x90
    e1a4:	4658      	mov	r0, fp
    e1a6:	9103      	str	r1, [sp, #12]
    e1a8:	f001 fd5a 	bl	fc60 <__ssprint_r>
    e1ac:	2800      	cmp	r0, #0
    e1ae:	f47f aab4 	bne.w	d71a <_svfprintf_r+0x8ca>
    e1b2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e1b6:	9903      	ldr	r1, [sp, #12]
    e1b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e1bc:	e7e4      	b.n	e188 <_svfprintf_r+0x1338>
    e1be:	9b08      	ldr	r3, [sp, #32]
    e1c0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e1c4:	bf1a      	itte	ne
    e1c6:	4611      	movne	r1, r2
    e1c8:	f853 2b04 	ldrne.w	r2, [r3], #4
    e1cc:	f853 2b04 	ldreq.w	r2, [r3], #4
    e1d0:	9308      	str	r3, [sp, #32]
    e1d2:	bf18      	it	ne
    e1d4:	b2d2      	uxtbne	r2, r2
    e1d6:	f7ff b945 	b.w	d464 <_svfprintf_r+0x614>
    e1da:	9b02      	ldr	r3, [sp, #8]
    e1dc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    e1e0:	9b08      	ldr	r3, [sp, #32]
    e1e2:	bf1a      	itte	ne
    e1e4:	4611      	movne	r1, r2
    e1e6:	f853 2b04 	ldrne.w	r2, [r3], #4
    e1ea:	f853 2b04 	ldreq.w	r2, [r3], #4
    e1ee:	9308      	str	r3, [sp, #32]
    e1f0:	bf18      	it	ne
    e1f2:	b2d2      	uxtbne	r2, r2
    e1f4:	2301      	movs	r3, #1
    e1f6:	f7ff b8d0 	b.w	d39a <_svfprintf_r+0x54a>
    e1fa:	9b08      	ldr	r3, [sp, #32]
    e1fc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e200:	bf1a      	itte	ne
    e202:	4611      	movne	r1, r2
    e204:	f853 2b04 	ldrne.w	r2, [r3], #4
    e208:	f853 2b04 	ldreq.w	r2, [r3], #4
    e20c:	9308      	str	r3, [sp, #32]
    e20e:	bf18      	it	ne
    e210:	b2d2      	uxtbne	r2, r2
    e212:	e54e      	b.n	dcb2 <_svfprintf_r+0xe62>
    e214:	468a      	mov	sl, r1
    e216:	3301      	adds	r3, #1
    e218:	492d      	ldr	r1, [pc, #180]	; (e2d0 <_svfprintf_r+0x1480>)
    e21a:	f8ca 5004 	str.w	r5, [sl, #4]
    e21e:	442a      	add	r2, r5
    e220:	2b07      	cmp	r3, #7
    e222:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e226:	f8ca 1000 	str.w	r1, [sl]
    e22a:	f300 8139 	bgt.w	e4a0 <_svfprintf_r+0x1650>
    e22e:	f10a 0a08 	add.w	sl, sl, #8
    e232:	f7ff bb8c 	b.w	d94e <_svfprintf_r+0xafe>
    e236:	2300      	movs	r3, #0
    e238:	4619      	mov	r1, r3
    e23a:	9600      	str	r6, [sp, #0]
    e23c:	aa1d      	add	r2, sp, #116	; 0x74
    e23e:	4658      	mov	r0, fp
    e240:	f001 fcee 	bl	fc20 <_wcsrtombs_r>
    e244:	4603      	mov	r3, r0
    e246:	3301      	adds	r3, #1
    e248:	9005      	str	r0, [sp, #20]
    e24a:	f000 82f1 	beq.w	e830 <_svfprintf_r+0x19e0>
    e24e:	941d      	str	r4, [sp, #116]	; 0x74
    e250:	9b05      	ldr	r3, [sp, #20]
    e252:	2b00      	cmp	r3, #0
    e254:	d04e      	beq.n	e2f4 <_svfprintf_r+0x14a4>
    e256:	2b63      	cmp	r3, #99	; 0x63
    e258:	f300 8118 	bgt.w	e48c <_svfprintf_r+0x163c>
    e25c:	2300      	movs	r3, #0
    e25e:	9307      	str	r3, [sp, #28]
    e260:	ac37      	add	r4, sp, #220	; 0xdc
    e262:	2208      	movs	r2, #8
    e264:	2100      	movs	r1, #0
    e266:	4630      	mov	r0, r6
    e268:	f7fd fcaa 	bl	bbc0 <memset>
    e26c:	9d05      	ldr	r5, [sp, #20]
    e26e:	9600      	str	r6, [sp, #0]
    e270:	462b      	mov	r3, r5
    e272:	aa1d      	add	r2, sp, #116	; 0x74
    e274:	4621      	mov	r1, r4
    e276:	4658      	mov	r0, fp
    e278:	f001 fcd2 	bl	fc20 <_wcsrtombs_r>
    e27c:	4285      	cmp	r5, r0
    e27e:	f040 837c 	bne.w	e97a <_svfprintf_r+0x1b2a>
    e282:	9a05      	ldr	r2, [sp, #20]
    e284:	2300      	movs	r3, #0
    e286:	54a3      	strb	r3, [r4, r2]
    e288:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e28c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e290:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e294:	9303      	str	r3, [sp, #12]
    e296:	9202      	str	r2, [sp, #8]
    e298:	930f      	str	r3, [sp, #60]	; 0x3c
    e29a:	f7fe bfba 	b.w	d212 <_svfprintf_r+0x3c2>
    e29e:	212d      	movs	r1, #45	; 0x2d
    e2a0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e2a4:	f7fe bfa4 	b.w	d1f0 <_svfprintf_r+0x3a0>
    e2a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e2aa:	9915      	ldr	r1, [sp, #84]	; 0x54
    e2ac:	ebab 0b03 	sub.w	fp, fp, r3
    e2b0:	461a      	mov	r2, r3
    e2b2:	4658      	mov	r0, fp
    e2b4:	f7fd fd3c 	bl	bd30 <strncpy>
    e2b8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e2bc:	4b05      	ldr	r3, [pc, #20]	; (e2d4 <_svfprintf_r+0x1484>)
    e2be:	b10a      	cbz	r2, e2c4 <_svfprintf_r+0x1474>
    e2c0:	f10a 0a01 	add.w	sl, sl, #1
    e2c4:	f04f 0c00 	mov.w	ip, #0
    e2c8:	e628      	b.n	df1c <_svfprintf_r+0x10cc>
    e2ca:	bf00      	nop
    e2cc:	20000d40 	.word	0x20000d40
    e2d0:	200012c4 	.word	0x200012c4
    e2d4:	cccccccd 	.word	0xcccccccd
    e2d8:	ee1b 1a10 	vmov	r1, s22
    e2dc:	aa24      	add	r2, sp, #144	; 0x90
    e2de:	4658      	mov	r0, fp
    e2e0:	f001 fcbe 	bl	fc60 <__ssprint_r>
    e2e4:	2800      	cmp	r0, #0
    e2e6:	f47f aa18 	bne.w	d71a <_svfprintf_r+0x8ca>
    e2ea:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e2ec:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e2ee:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e2f2:	e67c      	b.n	dfee <_svfprintf_r+0x119e>
    e2f4:	9b05      	ldr	r3, [sp, #20]
    e2f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e2fa:	930f      	str	r3, [sp, #60]	; 0x3c
    e2fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e300:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e304:	9307      	str	r3, [sp, #28]
    e306:	f7fe bf84 	b.w	d212 <_svfprintf_r+0x3c2>
    e30a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e30c:	9805      	ldr	r0, [sp, #20]
    e30e:	1865      	adds	r5, r4, r1
    e310:	1a2d      	subs	r5, r5, r0
    e312:	1acc      	subs	r4, r1, r3
    e314:	42a5      	cmp	r5, r4
    e316:	bfa8      	it	ge
    e318:	4625      	movge	r5, r4
    e31a:	f7ff bb4d 	b.w	d9b8 <_svfprintf_r+0xb68>
    e31e:	9b08      	ldr	r3, [sp, #32]
    e320:	9904      	ldr	r1, [sp, #16]
    e322:	f853 2b04 	ldr.w	r2, [r3], #4
    e326:	9308      	str	r3, [sp, #32]
    e328:	8011      	strh	r1, [r2, #0]
    e32a:	464c      	mov	r4, r9
    e32c:	f7fe bdc2 	b.w	ceb4 <_svfprintf_r+0x64>
    e330:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e334:	9308      	str	r3, [sp, #32]
    e336:	17d1      	asrs	r1, r2, #31
    e338:	460b      	mov	r3, r1
    e33a:	f7fe bfdb 	b.w	d2f4 <_svfprintf_r+0x4a4>
    e33e:	9a03      	ldr	r2, [sp, #12]
    e340:	2102      	movs	r1, #2
    e342:	ab22      	add	r3, sp, #136	; 0x88
    e344:	9301      	str	r3, [sp, #4]
    e346:	ab1d      	add	r3, sp, #116	; 0x74
    e348:	9300      	str	r3, [sp, #0]
    e34a:	4658      	mov	r0, fp
    e34c:	ab1b      	add	r3, sp, #108	; 0x6c
    e34e:	eeb0 0b4a 	vmov.f64	d0, d10
    e352:	9202      	str	r2, [sp, #8]
    e354:	f000 fdc8 	bl	eee8 <_dtoa_r>
    e358:	2d47      	cmp	r5, #71	; 0x47
    e35a:	9a02      	ldr	r2, [sp, #8]
    e35c:	4604      	mov	r4, r0
    e35e:	f000 8161 	beq.w	e624 <_svfprintf_r+0x17d4>
    e362:	2d46      	cmp	r5, #70	; 0x46
    e364:	4410      	add	r0, r2
    e366:	d105      	bne.n	e374 <_svfprintf_r+0x1524>
    e368:	7823      	ldrb	r3, [r4, #0]
    e36a:	2b30      	cmp	r3, #48	; 0x30
    e36c:	f000 826f 	beq.w	e84e <_svfprintf_r+0x19fe>
    e370:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e372:	4410      	add	r0, r2
    e374:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e37c:	f040 8146 	bne.w	e60c <_svfprintf_r+0x17bc>
    e380:	4603      	mov	r3, r0
    e382:	1b1b      	subs	r3, r3, r4
    e384:	930e      	str	r3, [sp, #56]	; 0x38
    e386:	2d47      	cmp	r5, #71	; 0x47
    e388:	f000 8110 	beq.w	e5ac <_svfprintf_r+0x175c>
    e38c:	2d46      	cmp	r5, #70	; 0x46
    e38e:	f000 81b5 	beq.w	e6fc <_svfprintf_r+0x18ac>
    e392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e394:	930c      	str	r3, [sp, #48]	; 0x30
    e396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e398:	2d41      	cmp	r5, #65	; 0x41
    e39a:	f103 33ff 	add.w	r3, r3, #4294967295
    e39e:	931b      	str	r3, [sp, #108]	; 0x6c
    e3a0:	f000 81e5 	beq.w	e76e <_svfprintf_r+0x191e>
    e3a4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    e3a8:	2100      	movs	r1, #0
    e3aa:	2b00      	cmp	r3, #0
    e3ac:	bfb8      	it	lt
    e3ae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    e3b0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    e3b4:	bfba      	itte	lt
    e3b6:	f1c3 0301 	rsblt	r3, r3, #1
    e3ba:	222d      	movlt	r2, #45	; 0x2d
    e3bc:	222b      	movge	r2, #43	; 0x2b
    e3be:	2b09      	cmp	r3, #9
    e3c0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e3c4:	f340 81da 	ble.w	e77c <_svfprintf_r+0x192c>
    e3c8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    e3cc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; e7ec <_svfprintf_r+0x199c>
    e3d0:	462a      	mov	r2, r5
    e3d2:	4610      	mov	r0, r2
    e3d4:	fb8c 2103 	smull	r2, r1, ip, r3
    e3d8:	17da      	asrs	r2, r3, #31
    e3da:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e3de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e3e2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e3e6:	3130      	adds	r1, #48	; 0x30
    e3e8:	f800 1c01 	strb.w	r1, [r0, #-1]
    e3ec:	4619      	mov	r1, r3
    e3ee:	2963      	cmp	r1, #99	; 0x63
    e3f0:	4613      	mov	r3, r2
    e3f2:	f100 32ff 	add.w	r2, r0, #4294967295
    e3f6:	dcec      	bgt.n	e3d2 <_svfprintf_r+0x1582>
    e3f8:	3330      	adds	r3, #48	; 0x30
    e3fa:	b2d9      	uxtb	r1, r3
    e3fc:	1e83      	subs	r3, r0, #2
    e3fe:	429d      	cmp	r5, r3
    e400:	f802 1c01 	strb.w	r1, [r2, #-1]
    e404:	f240 828b 	bls.w	e91e <_svfprintf_r+0x1ace>
    e408:	4613      	mov	r3, r2
    e40a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e40e:	e001      	b.n	e414 <_svfprintf_r+0x15c4>
    e410:	f813 1b01 	ldrb.w	r1, [r3], #1
    e414:	f802 1b01 	strb.w	r1, [r2], #1
    e418:	429d      	cmp	r5, r3
    e41a:	d1f9      	bne.n	e410 <_svfprintf_r+0x15c0>
    e41c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    e420:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e424:	1a1b      	subs	r3, r3, r0
    e426:	4413      	add	r3, r2
    e428:	aa1e      	add	r2, sp, #120	; 0x78
    e42a:	1a9b      	subs	r3, r3, r2
    e42c:	9314      	str	r3, [sp, #80]	; 0x50
    e42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e430:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e432:	2b01      	cmp	r3, #1
    e434:	441a      	add	r2, r3
    e436:	9205      	str	r2, [sp, #20]
    e438:	f340 8203 	ble.w	e842 <_svfprintf_r+0x19f2>
    e43c:	9b05      	ldr	r3, [sp, #20]
    e43e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e440:	4413      	add	r3, r2
    e442:	9305      	str	r3, [sp, #20]
    e444:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    e448:	9a05      	ldr	r2, [sp, #20]
    e44a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    e44e:	2300      	movs	r3, #0
    e450:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e454:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e458:	930f      	str	r3, [sp, #60]	; 0x3c
    e45a:	9202      	str	r2, [sp, #8]
    e45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e45e:	2b00      	cmp	r3, #0
    e460:	f040 80b1 	bne.w	e5c6 <_svfprintf_r+0x1776>
    e464:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e468:	9303      	str	r3, [sp, #12]
    e46a:	f7fe bed2 	b.w	d212 <_svfprintf_r+0x3c2>
    e46e:	4620      	mov	r0, r4
    e470:	f7fd ff06 	bl	c280 <strlen>
    e474:	4602      	mov	r2, r0
    e476:	9005      	str	r0, [sp, #20]
    e478:	f7fe bf20 	b.w	d2bc <_svfprintf_r+0x46c>
    e47c:	ee1b 1a10 	vmov	r1, s22
    e480:	aa24      	add	r2, sp, #144	; 0x90
    e482:	4658      	mov	r0, fp
    e484:	f001 fbec 	bl	fc60 <__ssprint_r>
    e488:	f7fe bded 	b.w	d066 <_svfprintf_r+0x216>
    e48c:	1c59      	adds	r1, r3, #1
    e48e:	4658      	mov	r0, fp
    e490:	f7fc fb4e 	bl	ab30 <_malloc_r>
    e494:	4604      	mov	r4, r0
    e496:	2800      	cmp	r0, #0
    e498:	f000 81ca 	beq.w	e830 <_svfprintf_r+0x19e0>
    e49c:	9007      	str	r0, [sp, #28]
    e49e:	e6e0      	b.n	e262 <_svfprintf_r+0x1412>
    e4a0:	ee1b 1a10 	vmov	r1, s22
    e4a4:	aa24      	add	r2, sp, #144	; 0x90
    e4a6:	4658      	mov	r0, fp
    e4a8:	f001 fbda 	bl	fc60 <__ssprint_r>
    e4ac:	2800      	cmp	r0, #0
    e4ae:	f47f a934 	bne.w	d71a <_svfprintf_r+0x8ca>
    e4b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e4b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4b8:	f7ff ba49 	b.w	d94e <_svfprintf_r+0xafe>
    e4bc:	ee1b 1a10 	vmov	r1, s22
    e4c0:	aa24      	add	r2, sp, #144	; 0x90
    e4c2:	4658      	mov	r0, fp
    e4c4:	f001 fbcc 	bl	fc60 <__ssprint_r>
    e4c8:	2800      	cmp	r0, #0
    e4ca:	f47f a926 	bne.w	d71a <_svfprintf_r+0x8ca>
    e4ce:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e4d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e4d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4d8:	e649      	b.n	e16e <_svfprintf_r+0x131e>
    e4da:	2306      	movs	r3, #6
    e4dc:	9303      	str	r3, [sp, #12]
    e4de:	f7ff bb83 	b.w	dbe8 <_svfprintf_r+0xd98>
    e4e2:	9b03      	ldr	r3, [sp, #12]
    e4e4:	2102      	movs	r1, #2
    e4e6:	1c5a      	adds	r2, r3, #1
    e4e8:	e72b      	b.n	e342 <_svfprintf_r+0x14f2>
    e4ea:	9a03      	ldr	r2, [sp, #12]
    e4ec:	2103      	movs	r1, #3
    e4ee:	e728      	b.n	e342 <_svfprintf_r+0x14f2>
    e4f0:	a81b      	add	r0, sp, #108	; 0x6c
    e4f2:	eeb0 0b4a 	vmov.f64	d0, d10
    e4f6:	f000 fbcb 	bl	ec90 <frexp>
    e4fa:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e4fe:	ee20 0b07 	vmul.f64	d0, d0, d7
    e502:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e50a:	d101      	bne.n	e510 <_svfprintf_r+0x16c0>
    e50c:	2301      	movs	r3, #1
    e50e:	931b      	str	r3, [sp, #108]	; 0x6c
    e510:	48b3      	ldr	r0, [pc, #716]	; (e7e0 <_svfprintf_r+0x1990>)
    e512:	9b03      	ldr	r3, [sp, #12]
    e514:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    e518:	3b01      	subs	r3, #1
    e51a:	4622      	mov	r2, r4
    e51c:	e004      	b.n	e528 <_svfprintf_r+0x16d8>
    e51e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e526:	d013      	beq.n	e550 <_svfprintf_r+0x1700>
    e528:	ee20 0b05 	vmul.f64	d0, d0, d5
    e52c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    e530:	f1b3 3fff 	cmp.w	r3, #4294967295
    e534:	ee17 1a90 	vmov	r1, s15
    e538:	5c41      	ldrb	r1, [r0, r1]
    e53a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    e53e:	4694      	mov	ip, r2
    e540:	ee30 0b46 	vsub.f64	d0, d0, d6
    e544:	f802 1b01 	strb.w	r1, [r2], #1
    e548:	4619      	mov	r1, r3
    e54a:	f103 33ff 	add.w	r3, r3, #4294967295
    e54e:	d1e6      	bne.n	e51e <_svfprintf_r+0x16ce>
    e550:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    e554:	eeb4 0bc6 	vcmpe.f64	d0, d6
    e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e55c:	f300 8148 	bgt.w	e7f0 <_svfprintf_r+0x19a0>
    e560:	eeb4 0b46 	vcmp.f64	d0, d6
    e564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e568:	d104      	bne.n	e574 <_svfprintf_r+0x1724>
    e56a:	ee17 3a90 	vmov	r3, s15
    e56e:	07db      	lsls	r3, r3, #31
    e570:	f100 813e 	bmi.w	e7f0 <_svfprintf_r+0x19a0>
    e574:	2900      	cmp	r1, #0
    e576:	db06      	blt.n	e586 <_svfprintf_r+0x1736>
    e578:	1c4b      	adds	r3, r1, #1
    e57a:	4413      	add	r3, r2
    e57c:	2130      	movs	r1, #48	; 0x30
    e57e:	f802 1b01 	strb.w	r1, [r2], #1
    e582:	4293      	cmp	r3, r2
    e584:	d1fb      	bne.n	e57e <_svfprintf_r+0x172e>
    e586:	1b13      	subs	r3, r2, r4
    e588:	930e      	str	r3, [sp, #56]	; 0x38
    e58a:	e6fc      	b.n	e386 <_svfprintf_r+0x1536>
    e58c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e590:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    e594:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    e598:	9613      	str	r6, [sp, #76]	; 0x4c
    e59a:	18e3      	adds	r3, r4, r3
    e59c:	429d      	cmp	r5, r3
    e59e:	4629      	mov	r1, r5
    e5a0:	bf28      	it	cs
    e5a2:	4619      	movcs	r1, r3
    e5a4:	4682      	mov	sl, r0
    e5a6:	9105      	str	r1, [sp, #20]
    e5a8:	f7ff b9d8 	b.w	d95c <_svfprintf_r+0xb0c>
    e5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e5ae:	930c      	str	r3, [sp, #48]	; 0x30
    e5b0:	1cda      	adds	r2, r3, #3
    e5b2:	db02      	blt.n	e5ba <_svfprintf_r+0x176a>
    e5b4:	9a03      	ldr	r2, [sp, #12]
    e5b6:	4293      	cmp	r3, r2
    e5b8:	dd0c      	ble.n	e5d4 <_svfprintf_r+0x1784>
    e5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5bc:	3b02      	subs	r3, #2
    e5be:	930b      	str	r3, [sp, #44]	; 0x2c
    e5c0:	f023 0520 	bic.w	r5, r3, #32
    e5c4:	e6e7      	b.n	e396 <_svfprintf_r+0x1546>
    e5c6:	212d      	movs	r1, #45	; 0x2d
    e5c8:	2300      	movs	r3, #0
    e5ca:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e5ce:	9303      	str	r3, [sp, #12]
    e5d0:	f7fe be22 	b.w	d218 <_svfprintf_r+0x3c8>
    e5d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e5d8:	4293      	cmp	r3, r2
    e5da:	f2c0 80bd 	blt.w	e758 <_svfprintf_r+0x1908>
    e5de:	07f0      	lsls	r0, r6, #31
    e5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5e2:	f140 8132 	bpl.w	e84a <_svfprintf_r+0x19fa>
    e5e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e5e8:	4413      	add	r3, r2
    e5ea:	9305      	str	r3, [sp, #20]
    e5ec:	0571      	lsls	r1, r6, #21
    e5ee:	d503      	bpl.n	e5f8 <_svfprintf_r+0x17a8>
    e5f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	f300 8135 	bgt.w	e862 <_svfprintf_r+0x1a12>
    e5f8:	9b05      	ldr	r3, [sp, #20]
    e5fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e5fe:	9302      	str	r3, [sp, #8]
    e600:	2367      	movs	r3, #103	; 0x67
    e602:	930b      	str	r3, [sp, #44]	; 0x2c
    e604:	2300      	movs	r3, #0
    e606:	930f      	str	r3, [sp, #60]	; 0x3c
    e608:	930d      	str	r3, [sp, #52]	; 0x34
    e60a:	e727      	b.n	e45c <_svfprintf_r+0x160c>
    e60c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e60e:	4283      	cmp	r3, r0
    e610:	f4bf aeb7 	bcs.w	e382 <_svfprintf_r+0x1532>
    e614:	2130      	movs	r1, #48	; 0x30
    e616:	1c5a      	adds	r2, r3, #1
    e618:	9222      	str	r2, [sp, #136]	; 0x88
    e61a:	7019      	strb	r1, [r3, #0]
    e61c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e61e:	4298      	cmp	r0, r3
    e620:	d8f9      	bhi.n	e616 <_svfprintf_r+0x17c6>
    e622:	e6ae      	b.n	e382 <_svfprintf_r+0x1532>
    e624:	07f3      	lsls	r3, r6, #31
    e626:	f100 80a7 	bmi.w	e778 <_svfprintf_r+0x1928>
    e62a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e62c:	e6a9      	b.n	e382 <_svfprintf_r+0x1532>
    e62e:	aa24      	add	r2, sp, #144	; 0x90
    e630:	4658      	mov	r0, fp
    e632:	9105      	str	r1, [sp, #20]
    e634:	f001 fb14 	bl	fc60 <__ssprint_r>
    e638:	2800      	cmp	r0, #0
    e63a:	f47f a86e 	bne.w	d71a <_svfprintf_r+0x8ca>
    e63e:	f896 c000 	ldrb.w	ip, [r6]
    e642:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e644:	9905      	ldr	r1, [sp, #20]
    e646:	a827      	add	r0, sp, #156	; 0x9c
    e648:	4465      	add	r5, ip
    e64a:	f7ff bbec 	b.w	de26 <_svfprintf_r+0xfd6>
    e64e:	ee1b 1a10 	vmov	r1, s22
    e652:	aa24      	add	r2, sp, #144	; 0x90
    e654:	4658      	mov	r0, fp
    e656:	f001 fb03 	bl	fc60 <__ssprint_r>
    e65a:	2800      	cmp	r0, #0
    e65c:	f47f a85d 	bne.w	d71a <_svfprintf_r+0x8ca>
    e660:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e662:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e666:	f7ff b96b 	b.w	d940 <_svfprintf_r+0xaf0>
    e66a:	2378      	movs	r3, #120	; 0x78
    e66c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e670:	2330      	movs	r3, #48	; 0x30
    e672:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e676:	9b03      	ldr	r3, [sp, #12]
    e678:	2b63      	cmp	r3, #99	; 0x63
    e67a:	f048 0602 	orr.w	r6, r8, #2
    e67e:	f300 80a6 	bgt.w	e7ce <_svfprintf_r+0x197e>
    e682:	2300      	movs	r3, #0
    e684:	9307      	str	r3, [sp, #28]
    e686:	ac37      	add	r4, sp, #220	; 0xdc
    e688:	ee18 3a90 	vmov	r3, s17
    e68c:	2b00      	cmp	r3, #0
    e68e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e692:	db2b      	blt.n	e6ec <_svfprintf_r+0x189c>
    e694:	eeb0 ab48 	vmov.f64	d10, d8
    e698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e69a:	f023 0520 	bic.w	r5, r3, #32
    e69e:	2300      	movs	r3, #0
    e6a0:	9309      	str	r3, [sp, #36]	; 0x24
    e6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6a4:	2b61      	cmp	r3, #97	; 0x61
    e6a6:	f47f aaad 	bne.w	dc04 <_svfprintf_r+0xdb4>
    e6aa:	eeb0 0b4a 	vmov.f64	d0, d10
    e6ae:	a81b      	add	r0, sp, #108	; 0x6c
    e6b0:	f000 faee 	bl	ec90 <frexp>
    e6b4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e6b8:	ee20 0b07 	vmul.f64	d0, d0, d7
    e6bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e6c4:	d101      	bne.n	e6ca <_svfprintf_r+0x187a>
    e6c6:	2301      	movs	r3, #1
    e6c8:	931b      	str	r3, [sp, #108]	; 0x6c
    e6ca:	4846      	ldr	r0, [pc, #280]	; (e7e4 <_svfprintf_r+0x1994>)
    e6cc:	e721      	b.n	e512 <_svfprintf_r+0x16c2>
    e6ce:	ee1b 1a10 	vmov	r1, s22
    e6d2:	aa24      	add	r2, sp, #144	; 0x90
    e6d4:	4658      	mov	r0, fp
    e6d6:	f001 fac3 	bl	fc60 <__ssprint_r>
    e6da:	2800      	cmp	r0, #0
    e6dc:	f47f a81d 	bne.w	d71a <_svfprintf_r+0x8ca>
    e6e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e6e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e6e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e6e8:	f7ff b94e 	b.w	d988 <_svfprintf_r+0xb38>
    e6ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6ee:	f023 0520 	bic.w	r5, r3, #32
    e6f2:	232d      	movs	r3, #45	; 0x2d
    e6f4:	9309      	str	r3, [sp, #36]	; 0x24
    e6f6:	eeb1 ab48 	vneg.f64	d10, d8
    e6fa:	e7d2      	b.n	e6a2 <_svfprintf_r+0x1852>
    e6fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e6fe:	920c      	str	r2, [sp, #48]	; 0x30
    e700:	2a00      	cmp	r2, #0
    e702:	f006 0301 	and.w	r3, r6, #1
    e706:	f340 810d 	ble.w	e924 <_svfprintf_r+0x1ad4>
    e70a:	9903      	ldr	r1, [sp, #12]
    e70c:	430b      	orrs	r3, r1
    e70e:	f040 80cf 	bne.w	e8b0 <_svfprintf_r+0x1a60>
    e712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e714:	9305      	str	r3, [sp, #20]
    e716:	2366      	movs	r3, #102	; 0x66
    e718:	930b      	str	r3, [sp, #44]	; 0x2c
    e71a:	0572      	lsls	r2, r6, #21
    e71c:	f100 80a3 	bmi.w	e866 <_svfprintf_r+0x1a16>
    e720:	9b05      	ldr	r3, [sp, #20]
    e722:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e726:	9302      	str	r3, [sp, #8]
    e728:	e76c      	b.n	e604 <_svfprintf_r+0x17b4>
    e72a:	ee1b 1a10 	vmov	r1, s22
    e72e:	aa24      	add	r2, sp, #144	; 0x90
    e730:	4658      	mov	r0, fp
    e732:	f001 fa95 	bl	fc60 <__ssprint_r>
    e736:	2800      	cmp	r0, #0
    e738:	f47e afef 	bne.w	d71a <_svfprintf_r+0x8ca>
    e73c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e740:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e742:	1b1c      	subs	r4, r3, r4
    e744:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e748:	f7ff b936 	b.w	d9b8 <_svfprintf_r+0xb68>
    e74c:	2358      	movs	r3, #88	; 0x58
    e74e:	e78d      	b.n	e66c <_svfprintf_r+0x181c>
    e750:	2200      	movs	r2, #0
    e752:	9203      	str	r2, [sp, #12]
    e754:	f7fe bbda 	b.w	cf0c <_svfprintf_r+0xbc>
    e758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e75a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e75c:	189a      	adds	r2, r3, r2
    e75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e760:	9205      	str	r2, [sp, #20]
    e762:	2b00      	cmp	r3, #0
    e764:	f340 80ab 	ble.w	e8be <_svfprintf_r+0x1a6e>
    e768:	2367      	movs	r3, #103	; 0x67
    e76a:	930b      	str	r3, [sp, #44]	; 0x2c
    e76c:	e7d5      	b.n	e71a <_svfprintf_r+0x18ca>
    e76e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e770:	320f      	adds	r2, #15
    e772:	b2d2      	uxtb	r2, r2
    e774:	2101      	movs	r1, #1
    e776:	e618      	b.n	e3aa <_svfprintf_r+0x155a>
    e778:	18a0      	adds	r0, r4, r2
    e77a:	e5fb      	b.n	e374 <_svfprintf_r+0x1524>
    e77c:	2900      	cmp	r1, #0
    e77e:	f040 80a8 	bne.w	e8d2 <_svfprintf_r+0x1a82>
    e782:	2230      	movs	r2, #48	; 0x30
    e784:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    e788:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    e78c:	3330      	adds	r3, #48	; 0x30
    e78e:	f802 3b01 	strb.w	r3, [r2], #1
    e792:	ab1e      	add	r3, sp, #120	; 0x78
    e794:	1ad3      	subs	r3, r2, r3
    e796:	9314      	str	r3, [sp, #80]	; 0x50
    e798:	e649      	b.n	e42e <_svfprintf_r+0x15de>
    e79a:	3301      	adds	r3, #1
    e79c:	4912      	ldr	r1, [pc, #72]	; (e7e8 <_svfprintf_r+0x1998>)
    e79e:	f8ca 5004 	str.w	r5, [sl, #4]
    e7a2:	442a      	add	r2, r5
    e7a4:	2b07      	cmp	r3, #7
    e7a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7aa:	f8ca 1000 	str.w	r1, [sl]
    e7ae:	f77f ac33 	ble.w	e018 <_svfprintf_r+0x11c8>
    e7b2:	ee1b 1a10 	vmov	r1, s22
    e7b6:	aa24      	add	r2, sp, #144	; 0x90
    e7b8:	4658      	mov	r0, fp
    e7ba:	f001 fa51 	bl	fc60 <__ssprint_r>
    e7be:	2800      	cmp	r0, #0
    e7c0:	f47e afab 	bne.w	d71a <_svfprintf_r+0x8ca>
    e7c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e7c8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e7cc:	e426      	b.n	e01c <_svfprintf_r+0x11cc>
    e7ce:	1c59      	adds	r1, r3, #1
    e7d0:	4658      	mov	r0, fp
    e7d2:	f7fc f9ad 	bl	ab30 <_malloc_r>
    e7d6:	4604      	mov	r4, r0
    e7d8:	b350      	cbz	r0, e830 <_svfprintf_r+0x19e0>
    e7da:	9007      	str	r0, [sp, #28]
    e7dc:	e754      	b.n	e688 <_svfprintf_r+0x1838>
    e7de:	bf00      	nop
    e7e0:	20000d24 	.word	0x20000d24
    e7e4:	20000d10 	.word	0x20000d10
    e7e8:	200012c4 	.word	0x200012c4
    e7ec:	66666667 	.word	0x66666667
    e7f0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    e7f4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    e7f8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    e7fc:	4561      	cmp	r1, ip
    e7fe:	4613      	mov	r3, r2
    e800:	d10a      	bne.n	e818 <_svfprintf_r+0x19c8>
    e802:	f04f 0e30 	mov.w	lr, #48	; 0x30
    e806:	f803 ec01 	strb.w	lr, [r3, #-1]
    e80a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e80c:	1e59      	subs	r1, r3, #1
    e80e:	9122      	str	r1, [sp, #136]	; 0x88
    e810:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    e814:	458c      	cmp	ip, r1
    e816:	d0f6      	beq.n	e806 <_svfprintf_r+0x19b6>
    e818:	2939      	cmp	r1, #57	; 0x39
    e81a:	bf16      	itet	ne
    e81c:	3101      	addne	r1, #1
    e81e:	7a81      	ldrbeq	r1, [r0, #10]
    e820:	b2c9      	uxtbne	r1, r1
    e822:	f803 1c01 	strb.w	r1, [r3, #-1]
    e826:	e6ae      	b.n	e586 <_svfprintf_r+0x1736>
    e828:	2300      	movs	r3, #0
    e82a:	4690      	mov	r8, r2
    e82c:	9307      	str	r3, [sp, #28]
    e82e:	e760      	b.n	e6f2 <_svfprintf_r+0x18a2>
    e830:	ee1b 2a10 	vmov	r2, s22
    e834:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e83c:	8193      	strh	r3, [r2, #12]
    e83e:	f7fe bc16 	b.w	d06e <_svfprintf_r+0x21e>
    e842:	07f5      	lsls	r5, r6, #31
    e844:	f57f adfe 	bpl.w	e444 <_svfprintf_r+0x15f4>
    e848:	e5f8      	b.n	e43c <_svfprintf_r+0x15ec>
    e84a:	9305      	str	r3, [sp, #20]
    e84c:	e6ce      	b.n	e5ec <_svfprintf_r+0x179c>
    e84e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e856:	f43f ad8b 	beq.w	e370 <_svfprintf_r+0x1520>
    e85a:	f1c2 0201 	rsb	r2, r2, #1
    e85e:	921b      	str	r2, [sp, #108]	; 0x6c
    e860:	e587      	b.n	e372 <_svfprintf_r+0x1522>
    e862:	2367      	movs	r3, #103	; 0x67
    e864:	930b      	str	r3, [sp, #44]	; 0x2c
    e866:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e868:	780b      	ldrb	r3, [r1, #0]
    e86a:	2bff      	cmp	r3, #255	; 0xff
    e86c:	d079      	beq.n	e962 <_svfprintf_r+0x1b12>
    e86e:	2500      	movs	r5, #0
    e870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e872:	4628      	mov	r0, r5
    e874:	e003      	b.n	e87e <_svfprintf_r+0x1a2e>
    e876:	3001      	adds	r0, #1
    e878:	3101      	adds	r1, #1
    e87a:	2bff      	cmp	r3, #255	; 0xff
    e87c:	d008      	beq.n	e890 <_svfprintf_r+0x1a40>
    e87e:	4293      	cmp	r3, r2
    e880:	da06      	bge.n	e890 <_svfprintf_r+0x1a40>
    e882:	1ad2      	subs	r2, r2, r3
    e884:	784b      	ldrb	r3, [r1, #1]
    e886:	2b00      	cmp	r3, #0
    e888:	d1f5      	bne.n	e876 <_svfprintf_r+0x1a26>
    e88a:	780b      	ldrb	r3, [r1, #0]
    e88c:	3501      	adds	r5, #1
    e88e:	e7f4      	b.n	e87a <_svfprintf_r+0x1a2a>
    e890:	920c      	str	r2, [sp, #48]	; 0x30
    e892:	9113      	str	r1, [sp, #76]	; 0x4c
    e894:	900d      	str	r0, [sp, #52]	; 0x34
    e896:	950f      	str	r5, [sp, #60]	; 0x3c
    e898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e89c:	9916      	ldr	r1, [sp, #88]	; 0x58
    e89e:	4413      	add	r3, r2
    e8a0:	9a05      	ldr	r2, [sp, #20]
    e8a2:	fb01 2303 	mla	r3, r1, r3, r2
    e8a6:	9305      	str	r3, [sp, #20]
    e8a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e8ac:	9302      	str	r3, [sp, #8]
    e8ae:	e5d5      	b.n	e45c <_svfprintf_r+0x160c>
    e8b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e8b2:	18d3      	adds	r3, r2, r3
    e8b4:	4419      	add	r1, r3
    e8b6:	2366      	movs	r3, #102	; 0x66
    e8b8:	9105      	str	r1, [sp, #20]
    e8ba:	930b      	str	r3, [sp, #44]	; 0x2c
    e8bc:	e72d      	b.n	e71a <_svfprintf_r+0x18ca>
    e8be:	f1c3 0301 	rsb	r3, r3, #1
    e8c2:	441a      	add	r2, r3
    e8c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e8c8:	9302      	str	r3, [sp, #8]
    e8ca:	2367      	movs	r3, #103	; 0x67
    e8cc:	9205      	str	r2, [sp, #20]
    e8ce:	930b      	str	r3, [sp, #44]	; 0x2c
    e8d0:	e698      	b.n	e604 <_svfprintf_r+0x17b4>
    e8d2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e8d6:	e759      	b.n	e78c <_svfprintf_r+0x193c>
    e8d8:	9b03      	ldr	r3, [sp, #12]
    e8da:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e8de:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e8e2:	9305      	str	r3, [sp, #20]
    e8e4:	e4b4      	b.n	e250 <_svfprintf_r+0x1400>
    e8e6:	ee18 3a90 	vmov	r3, s17
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	bfb4      	ite	lt
    e8ee:	212d      	movlt	r1, #45	; 0x2d
    e8f0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    e8f4:	4c25      	ldr	r4, [pc, #148]	; (e98c <_svfprintf_r+0x1b3c>)
    e8f6:	4b26      	ldr	r3, [pc, #152]	; (e990 <_svfprintf_r+0x1b40>)
    e8f8:	bfb8      	it	lt
    e8fa:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    e8fe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e902:	f7fe bc79 	b.w	d1f8 <_svfprintf_r+0x3a8>
    e906:	9b03      	ldr	r3, [sp, #12]
    e908:	9302      	str	r3, [sp, #8]
    e90a:	9305      	str	r3, [sp, #20]
    e90c:	2373      	movs	r3, #115	; 0x73
    e90e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e912:	9003      	str	r0, [sp, #12]
    e914:	900f      	str	r0, [sp, #60]	; 0x3c
    e916:	900d      	str	r0, [sp, #52]	; 0x34
    e918:	930b      	str	r3, [sp, #44]	; 0x2c
    e91a:	f7fe bc7a 	b.w	d212 <_svfprintf_r+0x3c2>
    e91e:	2302      	movs	r3, #2
    e920:	9314      	str	r3, [sp, #80]	; 0x50
    e922:	e584      	b.n	e42e <_svfprintf_r+0x15de>
    e924:	9a03      	ldr	r2, [sp, #12]
    e926:	4313      	orrs	r3, r2
    e928:	d105      	bne.n	e936 <_svfprintf_r+0x1ae6>
    e92a:	2301      	movs	r3, #1
    e92c:	2266      	movs	r2, #102	; 0x66
    e92e:	9302      	str	r3, [sp, #8]
    e930:	920b      	str	r2, [sp, #44]	; 0x2c
    e932:	9305      	str	r3, [sp, #20]
    e934:	e666      	b.n	e604 <_svfprintf_r+0x17b4>
    e936:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e938:	3301      	adds	r3, #1
    e93a:	441a      	add	r2, r3
    e93c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e940:	9302      	str	r3, [sp, #8]
    e942:	2366      	movs	r3, #102	; 0x66
    e944:	9205      	str	r2, [sp, #20]
    e946:	930b      	str	r3, [sp, #44]	; 0x2c
    e948:	e65c      	b.n	e604 <_svfprintf_r+0x17b4>
    e94a:	9a08      	ldr	r2, [sp, #32]
    e94c:	f899 3001 	ldrb.w	r3, [r9, #1]
    e950:	4689      	mov	r9, r1
    e952:	f852 1b04 	ldr.w	r1, [r2], #4
    e956:	9208      	str	r2, [sp, #32]
    e958:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    e95c:	9103      	str	r1, [sp, #12]
    e95e:	f7fe bad3 	b.w	cf08 <_svfprintf_r+0xb8>
    e962:	2300      	movs	r3, #0
    e964:	930f      	str	r3, [sp, #60]	; 0x3c
    e966:	930d      	str	r3, [sp, #52]	; 0x34
    e968:	e796      	b.n	e898 <_svfprintf_r+0x1a48>
    e96a:	230c      	movs	r3, #12
    e96c:	f8cb 3000 	str.w	r3, [fp]
    e970:	f04f 33ff 	mov.w	r3, #4294967295
    e974:	9304      	str	r3, [sp, #16]
    e976:	f7fe bb81 	b.w	d07c <_svfprintf_r+0x22c>
    e97a:	ee1b 2a10 	vmov	r2, s22
    e97e:	8993      	ldrh	r3, [r2, #12]
    e980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e984:	8193      	strh	r3, [r2, #12]
    e986:	f7fe bec8 	b.w	d71a <_svfprintf_r+0x8ca>
    e98a:	bf00      	nop
    e98c:	20000d08 	.word	0x20000d08
    e990:	20000d0c 	.word	0x20000d0c

0000e994 <_fclose_r>:
    e994:	b570      	push	{r4, r5, r6, lr}
    e996:	2900      	cmp	r1, #0
    e998:	d04b      	beq.n	ea32 <_fclose_r+0x9e>
    e99a:	4606      	mov	r6, r0
    e99c:	460c      	mov	r4, r1
    e99e:	b110      	cbz	r0, e9a6 <_fclose_r+0x12>
    e9a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d048      	beq.n	ea38 <_fclose_r+0xa4>
    e9a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e9a8:	07d8      	lsls	r0, r3, #31
    e9aa:	d534      	bpl.n	ea16 <_fclose_r+0x82>
    e9ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	d03e      	beq.n	ea32 <_fclose_r+0x9e>
    e9b4:	4621      	mov	r1, r4
    e9b6:	4630      	mov	r0, r6
    e9b8:	f000 f850 	bl	ea5c <__sflush_r>
    e9bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e9be:	4605      	mov	r5, r0
    e9c0:	b133      	cbz	r3, e9d0 <_fclose_r+0x3c>
    e9c2:	69e1      	ldr	r1, [r4, #28]
    e9c4:	4630      	mov	r0, r6
    e9c6:	4798      	blx	r3
    e9c8:	2800      	cmp	r0, #0
    e9ca:	bfb8      	it	lt
    e9cc:	f04f 35ff 	movlt.w	r5, #4294967295
    e9d0:	89a3      	ldrh	r3, [r4, #12]
    e9d2:	061a      	lsls	r2, r3, #24
    e9d4:	d43c      	bmi.n	ea50 <_fclose_r+0xbc>
    e9d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e9d8:	b141      	cbz	r1, e9ec <_fclose_r+0x58>
    e9da:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e9de:	4299      	cmp	r1, r3
    e9e0:	d002      	beq.n	e9e8 <_fclose_r+0x54>
    e9e2:	4630      	mov	r0, r6
    e9e4:	f7fd fd4e 	bl	c484 <_free_r>
    e9e8:	2300      	movs	r3, #0
    e9ea:	6323      	str	r3, [r4, #48]	; 0x30
    e9ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e9ee:	b121      	cbz	r1, e9fa <_fclose_r+0x66>
    e9f0:	4630      	mov	r0, r6
    e9f2:	f7fd fd47 	bl	c484 <_free_r>
    e9f6:	2300      	movs	r3, #0
    e9f8:	6463      	str	r3, [r4, #68]	; 0x44
    e9fa:	f7fc ffcf 	bl	b99c <__sfp_lock_acquire>
    e9fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ea00:	2200      	movs	r2, #0
    ea02:	07db      	lsls	r3, r3, #31
    ea04:	81a2      	strh	r2, [r4, #12]
    ea06:	d51f      	bpl.n	ea48 <_fclose_r+0xb4>
    ea08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea0a:	f7fd fa5b 	bl	bec4 <__retarget_lock_close_recursive>
    ea0e:	f7fc ffcb 	bl	b9a8 <__sfp_lock_release>
    ea12:	4628      	mov	r0, r5
    ea14:	bd70      	pop	{r4, r5, r6, pc}
    ea16:	89a3      	ldrh	r3, [r4, #12]
    ea18:	0599      	lsls	r1, r3, #22
    ea1a:	d4cb      	bmi.n	e9b4 <_fclose_r+0x20>
    ea1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea1e:	f7fd fa53 	bl	bec8 <__retarget_lock_acquire_recursive>
    ea22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ea26:	2b00      	cmp	r3, #0
    ea28:	d1c4      	bne.n	e9b4 <_fclose_r+0x20>
    ea2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    ea2c:	f015 0501 	ands.w	r5, r5, #1
    ea30:	d005      	beq.n	ea3e <_fclose_r+0xaa>
    ea32:	2500      	movs	r5, #0
    ea34:	4628      	mov	r0, r5
    ea36:	bd70      	pop	{r4, r5, r6, pc}
    ea38:	f7fc ff92 	bl	b960 <__sinit>
    ea3c:	e7b3      	b.n	e9a6 <_fclose_r+0x12>
    ea3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea40:	f7fd fa44 	bl	becc <__retarget_lock_release_recursive>
    ea44:	4628      	mov	r0, r5
    ea46:	bd70      	pop	{r4, r5, r6, pc}
    ea48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea4a:	f7fd fa3f 	bl	becc <__retarget_lock_release_recursive>
    ea4e:	e7db      	b.n	ea08 <_fclose_r+0x74>
    ea50:	6921      	ldr	r1, [r4, #16]
    ea52:	4630      	mov	r0, r6
    ea54:	f7fd fd16 	bl	c484 <_free_r>
    ea58:	e7bd      	b.n	e9d6 <_fclose_r+0x42>
    ea5a:	bf00      	nop

0000ea5c <__sflush_r>:
    ea5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    ea60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea64:	460c      	mov	r4, r1
    ea66:	0711      	lsls	r1, r2, #28
    ea68:	4680      	mov	r8, r0
    ea6a:	d447      	bmi.n	eafc <__sflush_r+0xa0>
    ea6c:	6863      	ldr	r3, [r4, #4]
    ea6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    ea72:	2b00      	cmp	r3, #0
    ea74:	81a2      	strh	r2, [r4, #12]
    ea76:	dd5e      	ble.n	eb36 <__sflush_r+0xda>
    ea78:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    ea7a:	2d00      	cmp	r5, #0
    ea7c:	d058      	beq.n	eb30 <__sflush_r+0xd4>
    ea7e:	2300      	movs	r3, #0
    ea80:	f8d8 6000 	ldr.w	r6, [r8]
    ea84:	f8c8 3000 	str.w	r3, [r8]
    ea88:	b293      	uxth	r3, r2
    ea8a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    ea8e:	d156      	bne.n	eb3e <__sflush_r+0xe2>
    ea90:	2301      	movs	r3, #1
    ea92:	69e1      	ldr	r1, [r4, #28]
    ea94:	4640      	mov	r0, r8
    ea96:	47a8      	blx	r5
    ea98:	1c43      	adds	r3, r0, #1
    ea9a:	d067      	beq.n	eb6c <__sflush_r+0x110>
    ea9c:	89a3      	ldrh	r3, [r4, #12]
    ea9e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    eaa0:	075f      	lsls	r7, r3, #29
    eaa2:	d505      	bpl.n	eab0 <__sflush_r+0x54>
    eaa4:	6863      	ldr	r3, [r4, #4]
    eaa6:	1ac0      	subs	r0, r0, r3
    eaa8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eaaa:	b10b      	cbz	r3, eab0 <__sflush_r+0x54>
    eaac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    eaae:	1ac0      	subs	r0, r0, r3
    eab0:	69e1      	ldr	r1, [r4, #28]
    eab2:	4602      	mov	r2, r0
    eab4:	2300      	movs	r3, #0
    eab6:	4640      	mov	r0, r8
    eab8:	47a8      	blx	r5
    eaba:	1c41      	adds	r1, r0, #1
    eabc:	d141      	bne.n	eb42 <__sflush_r+0xe6>
    eabe:	f8d8 3000 	ldr.w	r3, [r8]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d03d      	beq.n	eb42 <__sflush_r+0xe6>
    eac6:	2b1d      	cmp	r3, #29
    eac8:	d001      	beq.n	eace <__sflush_r+0x72>
    eaca:	2b16      	cmp	r3, #22
    eacc:	d156      	bne.n	eb7c <__sflush_r+0x120>
    eace:	89a3      	ldrh	r3, [r4, #12]
    ead0:	6922      	ldr	r2, [r4, #16]
    ead2:	6022      	str	r2, [r4, #0]
    ead4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ead8:	2100      	movs	r1, #0
    eada:	6061      	str	r1, [r4, #4]
    eadc:	81a3      	strh	r3, [r4, #12]
    eade:	6b21      	ldr	r1, [r4, #48]	; 0x30
    eae0:	f8c8 6000 	str.w	r6, [r8]
    eae4:	b321      	cbz	r1, eb30 <__sflush_r+0xd4>
    eae6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    eaea:	4299      	cmp	r1, r3
    eaec:	d002      	beq.n	eaf4 <__sflush_r+0x98>
    eaee:	4640      	mov	r0, r8
    eaf0:	f7fd fcc8 	bl	c484 <_free_r>
    eaf4:	2000      	movs	r0, #0
    eaf6:	6320      	str	r0, [r4, #48]	; 0x30
    eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eafc:	6926      	ldr	r6, [r4, #16]
    eafe:	b1be      	cbz	r6, eb30 <__sflush_r+0xd4>
    eb00:	b293      	uxth	r3, r2
    eb02:	6825      	ldr	r5, [r4, #0]
    eb04:	6026      	str	r6, [r4, #0]
    eb06:	079a      	lsls	r2, r3, #30
    eb08:	bf0c      	ite	eq
    eb0a:	6963      	ldreq	r3, [r4, #20]
    eb0c:	2300      	movne	r3, #0
    eb0e:	1bad      	subs	r5, r5, r6
    eb10:	60a3      	str	r3, [r4, #8]
    eb12:	e00b      	b.n	eb2c <__sflush_r+0xd0>
    eb14:	462b      	mov	r3, r5
    eb16:	4632      	mov	r2, r6
    eb18:	69e1      	ldr	r1, [r4, #28]
    eb1a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    eb1c:	4640      	mov	r0, r8
    eb1e:	47b8      	blx	r7
    eb20:	f1b0 0c00 	subs.w	ip, r0, #0
    eb24:	eba5 050c 	sub.w	r5, r5, ip
    eb28:	4466      	add	r6, ip
    eb2a:	dd17      	ble.n	eb5c <__sflush_r+0x100>
    eb2c:	2d00      	cmp	r5, #0
    eb2e:	dcf1      	bgt.n	eb14 <__sflush_r+0xb8>
    eb30:	2000      	movs	r0, #0
    eb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    eb38:	2b00      	cmp	r3, #0
    eb3a:	dc9d      	bgt.n	ea78 <__sflush_r+0x1c>
    eb3c:	e7f8      	b.n	eb30 <__sflush_r+0xd4>
    eb3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    eb40:	e7ae      	b.n	eaa0 <__sflush_r+0x44>
    eb42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    eb46:	6922      	ldr	r2, [r4, #16]
    eb48:	6022      	str	r2, [r4, #0]
    eb4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    eb4e:	81a3      	strh	r3, [r4, #12]
    eb50:	2200      	movs	r2, #0
    eb52:	04db      	lsls	r3, r3, #19
    eb54:	6062      	str	r2, [r4, #4]
    eb56:	d5c2      	bpl.n	eade <__sflush_r+0x82>
    eb58:	6520      	str	r0, [r4, #80]	; 0x50
    eb5a:	e7c0      	b.n	eade <__sflush_r+0x82>
    eb5c:	89a3      	ldrh	r3, [r4, #12]
    eb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb62:	f04f 30ff 	mov.w	r0, #4294967295
    eb66:	81a3      	strh	r3, [r4, #12]
    eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb6c:	f8d8 3000 	ldr.w	r3, [r8]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d093      	beq.n	ea9c <__sflush_r+0x40>
    eb74:	2b1d      	cmp	r3, #29
    eb76:	d006      	beq.n	eb86 <__sflush_r+0x12a>
    eb78:	2b16      	cmp	r3, #22
    eb7a:	d004      	beq.n	eb86 <__sflush_r+0x12a>
    eb7c:	89a3      	ldrh	r3, [r4, #12]
    eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eb82:	81a3      	strh	r3, [r4, #12]
    eb84:	e7d5      	b.n	eb32 <__sflush_r+0xd6>
    eb86:	f8c8 6000 	str.w	r6, [r8]
    eb8a:	e7d1      	b.n	eb30 <__sflush_r+0xd4>

0000eb8c <_fflush_r>:
    eb8c:	b538      	push	{r3, r4, r5, lr}
    eb8e:	460c      	mov	r4, r1
    eb90:	4605      	mov	r5, r0
    eb92:	b108      	cbz	r0, eb98 <_fflush_r+0xc>
    eb94:	6b43      	ldr	r3, [r0, #52]	; 0x34
    eb96:	b303      	cbz	r3, ebda <_fflush_r+0x4e>
    eb98:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    eb9c:	b188      	cbz	r0, ebc2 <_fflush_r+0x36>
    eb9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    eba0:	07db      	lsls	r3, r3, #31
    eba2:	d401      	bmi.n	eba8 <_fflush_r+0x1c>
    eba4:	0581      	lsls	r1, r0, #22
    eba6:	d50f      	bpl.n	ebc8 <_fflush_r+0x3c>
    eba8:	4628      	mov	r0, r5
    ebaa:	4621      	mov	r1, r4
    ebac:	f7ff ff56 	bl	ea5c <__sflush_r>
    ebb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ebb2:	07da      	lsls	r2, r3, #31
    ebb4:	4605      	mov	r5, r0
    ebb6:	d402      	bmi.n	ebbe <_fflush_r+0x32>
    ebb8:	89a3      	ldrh	r3, [r4, #12]
    ebba:	059b      	lsls	r3, r3, #22
    ebbc:	d508      	bpl.n	ebd0 <_fflush_r+0x44>
    ebbe:	4628      	mov	r0, r5
    ebc0:	bd38      	pop	{r3, r4, r5, pc}
    ebc2:	4605      	mov	r5, r0
    ebc4:	4628      	mov	r0, r5
    ebc6:	bd38      	pop	{r3, r4, r5, pc}
    ebc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ebca:	f7fd f97d 	bl	bec8 <__retarget_lock_acquire_recursive>
    ebce:	e7eb      	b.n	eba8 <_fflush_r+0x1c>
    ebd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ebd2:	f7fd f97b 	bl	becc <__retarget_lock_release_recursive>
    ebd6:	4628      	mov	r0, r5
    ebd8:	bd38      	pop	{r3, r4, r5, pc}
    ebda:	f7fc fec1 	bl	b960 <__sinit>
    ebde:	e7db      	b.n	eb98 <_fflush_r+0xc>

0000ebe0 <_localeconv_r>:
    ebe0:	4800      	ldr	r0, [pc, #0]	; (ebe4 <_localeconv_r+0x4>)
    ebe2:	4770      	bx	lr
    ebe4:	2000451c 	.word	0x2000451c
	...

0000ebf0 <memchr>:
    ebf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ebf4:	2a10      	cmp	r2, #16
    ebf6:	db2b      	blt.n	ec50 <memchr+0x60>
    ebf8:	f010 0f07 	tst.w	r0, #7
    ebfc:	d008      	beq.n	ec10 <memchr+0x20>
    ebfe:	f810 3b01 	ldrb.w	r3, [r0], #1
    ec02:	3a01      	subs	r2, #1
    ec04:	428b      	cmp	r3, r1
    ec06:	d02d      	beq.n	ec64 <memchr+0x74>
    ec08:	f010 0f07 	tst.w	r0, #7
    ec0c:	b342      	cbz	r2, ec60 <memchr+0x70>
    ec0e:	d1f6      	bne.n	ebfe <memchr+0xe>
    ec10:	b4f0      	push	{r4, r5, r6, r7}
    ec12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ec16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ec1a:	f022 0407 	bic.w	r4, r2, #7
    ec1e:	f07f 0700 	mvns.w	r7, #0
    ec22:	2300      	movs	r3, #0
    ec24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ec28:	3c08      	subs	r4, #8
    ec2a:	ea85 0501 	eor.w	r5, r5, r1
    ec2e:	ea86 0601 	eor.w	r6, r6, r1
    ec32:	fa85 f547 	uadd8	r5, r5, r7
    ec36:	faa3 f587 	sel	r5, r3, r7
    ec3a:	fa86 f647 	uadd8	r6, r6, r7
    ec3e:	faa5 f687 	sel	r6, r5, r7
    ec42:	b98e      	cbnz	r6, ec68 <memchr+0x78>
    ec44:	d1ee      	bne.n	ec24 <memchr+0x34>
    ec46:	bcf0      	pop	{r4, r5, r6, r7}
    ec48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ec4c:	f002 0207 	and.w	r2, r2, #7
    ec50:	b132      	cbz	r2, ec60 <memchr+0x70>
    ec52:	f810 3b01 	ldrb.w	r3, [r0], #1
    ec56:	3a01      	subs	r2, #1
    ec58:	ea83 0301 	eor.w	r3, r3, r1
    ec5c:	b113      	cbz	r3, ec64 <memchr+0x74>
    ec5e:	d1f8      	bne.n	ec52 <memchr+0x62>
    ec60:	2000      	movs	r0, #0
    ec62:	4770      	bx	lr
    ec64:	3801      	subs	r0, #1
    ec66:	4770      	bx	lr
    ec68:	2d00      	cmp	r5, #0
    ec6a:	bf06      	itte	eq
    ec6c:	4635      	moveq	r5, r6
    ec6e:	3803      	subeq	r0, #3
    ec70:	3807      	subne	r0, #7
    ec72:	f015 0f01 	tst.w	r5, #1
    ec76:	d107      	bne.n	ec88 <memchr+0x98>
    ec78:	3001      	adds	r0, #1
    ec7a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ec7e:	bf02      	ittt	eq
    ec80:	3001      	addeq	r0, #1
    ec82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ec86:	3001      	addeq	r0, #1
    ec88:	bcf0      	pop	{r4, r5, r6, r7}
    ec8a:	3801      	subs	r0, #1
    ec8c:	4770      	bx	lr
    ec8e:	bf00      	nop

0000ec90 <frexp>:
    ec90:	b430      	push	{r4, r5}
    ec92:	b082      	sub	sp, #8
    ec94:	ed8d 0b00 	vstr	d0, [sp]
    ec98:	9a01      	ldr	r2, [sp, #4]
    ec9a:	4c19      	ldr	r4, [pc, #100]	; (ed00 <frexp+0x70>)
    ec9c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    eca0:	2100      	movs	r1, #0
    eca2:	42a3      	cmp	r3, r4
    eca4:	6001      	str	r1, [r0, #0]
    eca6:	dc21      	bgt.n	ecec <frexp+0x5c>
    eca8:	9c00      	ldr	r4, [sp, #0]
    ecaa:	431c      	orrs	r4, r3
    ecac:	d01e      	beq.n	ecec <frexp+0x5c>
    ecae:	4c15      	ldr	r4, [pc, #84]	; (ed04 <frexp+0x74>)
    ecb0:	4014      	ands	r4, r2
    ecb2:	b954      	cbnz	r4, ecca <frexp+0x3a>
    ecb4:	ed9f 7b10 	vldr	d7, [pc, #64]	; ecf8 <frexp+0x68>
    ecb8:	ee20 7b07 	vmul.f64	d7, d0, d7
    ecbc:	ed8d 7b00 	vstr	d7, [sp]
    ecc0:	9a01      	ldr	r2, [sp, #4]
    ecc2:	f06f 0135 	mvn.w	r1, #53	; 0x35
    ecc6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ecca:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    ecce:	e9dd 4500 	ldrd	r4, r5, [sp]
    ecd2:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    ecd6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    ecda:	151b      	asrs	r3, r3, #20
    ecdc:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    ece0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    ece4:	e9cd 4500 	strd	r4, r5, [sp]
    ece8:	440b      	add	r3, r1
    ecea:	6003      	str	r3, [r0, #0]
    ecec:	ed9d 0b00 	vldr	d0, [sp]
    ecf0:	b002      	add	sp, #8
    ecf2:	bc30      	pop	{r4, r5}
    ecf4:	4770      	bx	lr
    ecf6:	bf00      	nop
    ecf8:	00000000 	.word	0x00000000
    ecfc:	43500000 	.word	0x43500000
    ed00:	7fefffff 	.word	0x7fefffff
    ed04:	7ff00000 	.word	0x7ff00000

0000ed08 <__assert_func>:
    ed08:	b500      	push	{lr}
    ed0a:	4c0b      	ldr	r4, [pc, #44]	; (ed38 <__assert_func+0x30>)
    ed0c:	6825      	ldr	r5, [r4, #0]
    ed0e:	4614      	mov	r4, r2
    ed10:	68ee      	ldr	r6, [r5, #12]
    ed12:	461a      	mov	r2, r3
    ed14:	b085      	sub	sp, #20
    ed16:	4603      	mov	r3, r0
    ed18:	460d      	mov	r5, r1
    ed1a:	b14c      	cbz	r4, ed30 <__assert_func+0x28>
    ed1c:	4907      	ldr	r1, [pc, #28]	; (ed3c <__assert_func+0x34>)
    ed1e:	9500      	str	r5, [sp, #0]
    ed20:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ed24:	4630      	mov	r0, r6
    ed26:	4906      	ldr	r1, [pc, #24]	; (ed40 <__assert_func+0x38>)
    ed28:	f000 ff86 	bl	fc38 <fiprintf>
    ed2c:	f7fa faf2 	bl	9314 <abort>
    ed30:	4904      	ldr	r1, [pc, #16]	; (ed44 <__assert_func+0x3c>)
    ed32:	460c      	mov	r4, r1
    ed34:	e7f3      	b.n	ed1e <__assert_func+0x16>
    ed36:	bf00      	nop
    ed38:	200049b4 	.word	0x200049b4
    ed3c:	20000ab8 	.word	0x20000ab8
    ed40:	20000ac8 	.word	0x20000ac8
    ed44:	200004f8 	.word	0x200004f8

0000ed48 <_calloc_r>:
    ed48:	b538      	push	{r3, r4, r5, lr}
    ed4a:	fba1 1402 	umull	r1, r4, r1, r2
    ed4e:	bb8c      	cbnz	r4, edb4 <_calloc_r+0x6c>
    ed50:	f7fb feee 	bl	ab30 <_malloc_r>
    ed54:	4605      	mov	r5, r0
    ed56:	b1e0      	cbz	r0, ed92 <_calloc_r+0x4a>
    ed58:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ed5c:	f022 0203 	bic.w	r2, r2, #3
    ed60:	3a04      	subs	r2, #4
    ed62:	2a24      	cmp	r2, #36	; 0x24
    ed64:	d817      	bhi.n	ed96 <_calloc_r+0x4e>
    ed66:	2a13      	cmp	r2, #19
    ed68:	d91a      	bls.n	eda0 <_calloc_r+0x58>
    ed6a:	2a1b      	cmp	r2, #27
    ed6c:	e9c0 4400 	strd	r4, r4, [r0]
    ed70:	d91d      	bls.n	edae <_calloc_r+0x66>
    ed72:	2a24      	cmp	r2, #36	; 0x24
    ed74:	bf14      	ite	ne
    ed76:	f100 0210 	addne.w	r2, r0, #16
    ed7a:	f100 0218 	addeq.w	r2, r0, #24
    ed7e:	f04f 0300 	mov.w	r3, #0
    ed82:	e9c0 4402 	strd	r4, r4, [r0, #8]
    ed86:	bf04      	itt	eq
    ed88:	6104      	streq	r4, [r0, #16]
    ed8a:	6144      	streq	r4, [r0, #20]
    ed8c:	e9c2 3300 	strd	r3, r3, [r2]
    ed90:	6093      	str	r3, [r2, #8]
    ed92:	4628      	mov	r0, r5
    ed94:	bd38      	pop	{r3, r4, r5, pc}
    ed96:	4621      	mov	r1, r4
    ed98:	f7fc ff12 	bl	bbc0 <memset>
    ed9c:	4628      	mov	r0, r5
    ed9e:	bd38      	pop	{r3, r4, r5, pc}
    eda0:	4602      	mov	r2, r0
    eda2:	2300      	movs	r3, #0
    eda4:	e9c2 3300 	strd	r3, r3, [r2]
    eda8:	6093      	str	r3, [r2, #8]
    edaa:	4628      	mov	r0, r5
    edac:	bd38      	pop	{r3, r4, r5, pc}
    edae:	f100 0208 	add.w	r2, r0, #8
    edb2:	e7f6      	b.n	eda2 <_calloc_r+0x5a>
    edb4:	f7fd f85a 	bl	be6c <__errno>
    edb8:	230c      	movs	r3, #12
    edba:	2500      	movs	r5, #0
    edbc:	6003      	str	r3, [r0, #0]
    edbe:	e7e8      	b.n	ed92 <_calloc_r+0x4a>

0000edc0 <quorem>:
    edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edc4:	6903      	ldr	r3, [r0, #16]
    edc6:	690c      	ldr	r4, [r1, #16]
    edc8:	42a3      	cmp	r3, r4
    edca:	b083      	sub	sp, #12
    edcc:	f2c0 8087 	blt.w	eede <quorem+0x11e>
    edd0:	3c01      	subs	r4, #1
    edd2:	f101 0514 	add.w	r5, r1, #20
    edd6:	00a3      	lsls	r3, r4, #2
    edd8:	f100 0814 	add.w	r8, r0, #20
    eddc:	9300      	str	r3, [sp, #0]
    edde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    ede2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    ede6:	3301      	adds	r3, #1
    ede8:	4681      	mov	r9, r0
    edea:	429a      	cmp	r2, r3
    edec:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    edf0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    edf4:	9001      	str	r0, [sp, #4]
    edf6:	fbb2 f6f3 	udiv	r6, r2, r3
    edfa:	d33b      	bcc.n	ee74 <quorem+0xb4>
    edfc:	f04f 0c00 	mov.w	ip, #0
    ee00:	46ae      	mov	lr, r5
    ee02:	4640      	mov	r0, r8
    ee04:	46e2      	mov	sl, ip
    ee06:	4663      	mov	r3, ip
    ee08:	f85e bb04 	ldr.w	fp, [lr], #4
    ee0c:	6802      	ldr	r2, [r0, #0]
    ee0e:	fa1f fc8b 	uxth.w	ip, fp
    ee12:	fb06 330c 	mla	r3, r6, ip, r3
    ee16:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ee1a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    ee1e:	fb06 cc0b 	mla	ip, r6, fp, ip
    ee22:	b29b      	uxth	r3, r3
    ee24:	ebaa 0303 	sub.w	r3, sl, r3
    ee28:	fa1f fa8c 	uxth.w	sl, ip
    ee2c:	fa13 f382 	uxtah	r3, r3, r2
    ee30:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    ee34:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ee38:	b29b      	uxth	r3, r3
    ee3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ee3e:	4577      	cmp	r7, lr
    ee40:	f840 3b04 	str.w	r3, [r0], #4
    ee44:	ea4f 4a22 	mov.w	sl, r2, asr #16
    ee48:	ea4f 431c 	mov.w	r3, ip, lsr #16
    ee4c:	d2dc      	bcs.n	ee08 <quorem+0x48>
    ee4e:	9b00      	ldr	r3, [sp, #0]
    ee50:	f858 3003 	ldr.w	r3, [r8, r3]
    ee54:	b973      	cbnz	r3, ee74 <quorem+0xb4>
    ee56:	9b01      	ldr	r3, [sp, #4]
    ee58:	3b04      	subs	r3, #4
    ee5a:	4598      	cmp	r8, r3
    ee5c:	d304      	bcc.n	ee68 <quorem+0xa8>
    ee5e:	e007      	b.n	ee70 <quorem+0xb0>
    ee60:	4598      	cmp	r8, r3
    ee62:	f104 34ff 	add.w	r4, r4, #4294967295
    ee66:	d203      	bcs.n	ee70 <quorem+0xb0>
    ee68:	f853 2904 	ldr.w	r2, [r3], #-4
    ee6c:	2a00      	cmp	r2, #0
    ee6e:	d0f7      	beq.n	ee60 <quorem+0xa0>
    ee70:	f8c9 4010 	str.w	r4, [r9, #16]
    ee74:	4648      	mov	r0, r9
    ee76:	f7fd fea7 	bl	cbc8 <__mcmp>
    ee7a:	2800      	cmp	r0, #0
    ee7c:	db2b      	blt.n	eed6 <quorem+0x116>
    ee7e:	3601      	adds	r6, #1
    ee80:	4641      	mov	r1, r8
    ee82:	2300      	movs	r3, #0
    ee84:	f855 0b04 	ldr.w	r0, [r5], #4
    ee88:	f8d1 c000 	ldr.w	ip, [r1]
    ee8c:	b282      	uxth	r2, r0
    ee8e:	1a9a      	subs	r2, r3, r2
    ee90:	0c03      	lsrs	r3, r0, #16
    ee92:	fa12 f28c 	uxtah	r2, r2, ip
    ee96:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    ee9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ee9e:	b292      	uxth	r2, r2
    eea0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    eea4:	42af      	cmp	r7, r5
    eea6:	f841 2b04 	str.w	r2, [r1], #4
    eeaa:	ea4f 4323 	mov.w	r3, r3, asr #16
    eeae:	d2e9      	bcs.n	ee84 <quorem+0xc4>
    eeb0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    eeb4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    eeb8:	b96a      	cbnz	r2, eed6 <quorem+0x116>
    eeba:	3b04      	subs	r3, #4
    eebc:	4598      	cmp	r8, r3
    eebe:	d304      	bcc.n	eeca <quorem+0x10a>
    eec0:	e007      	b.n	eed2 <quorem+0x112>
    eec2:	4598      	cmp	r8, r3
    eec4:	f104 34ff 	add.w	r4, r4, #4294967295
    eec8:	d203      	bcs.n	eed2 <quorem+0x112>
    eeca:	f853 2904 	ldr.w	r2, [r3], #-4
    eece:	2a00      	cmp	r2, #0
    eed0:	d0f7      	beq.n	eec2 <quorem+0x102>
    eed2:	f8c9 4010 	str.w	r4, [r9, #16]
    eed6:	4630      	mov	r0, r6
    eed8:	b003      	add	sp, #12
    eeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eede:	2000      	movs	r0, #0
    eee0:	b003      	add	sp, #12
    eee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eee6:	bf00      	nop

0000eee8 <_dtoa_r>:
    eee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeec:	ed2d 8b02 	vpush	{d8}
    eef0:	b08f      	sub	sp, #60	; 0x3c
    eef2:	ed8d 0b02 	vstr	d0, [sp, #8]
    eef6:	9101      	str	r1, [sp, #4]
    eef8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    eefa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    eefc:	9305      	str	r3, [sp, #20]
    eefe:	ec57 6b10 	vmov	r6, r7, d0
    ef02:	4604      	mov	r4, r0
    ef04:	4693      	mov	fp, r2
    ef06:	b141      	cbz	r1, ef1a <_dtoa_r+0x32>
    ef08:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    ef0a:	604a      	str	r2, [r1, #4]
    ef0c:	2301      	movs	r3, #1
    ef0e:	4093      	lsls	r3, r2
    ef10:	608b      	str	r3, [r1, #8]
    ef12:	f7fd fbf9 	bl	c708 <_Bfree>
    ef16:	2300      	movs	r3, #0
    ef18:	63a3      	str	r3, [r4, #56]	; 0x38
    ef1a:	f1b7 0800 	subs.w	r8, r7, #0
    ef1e:	bfb4      	ite	lt
    ef20:	2301      	movlt	r3, #1
    ef22:	2300      	movge	r3, #0
    ef24:	602b      	str	r3, [r5, #0]
    ef26:	4bbe      	ldr	r3, [pc, #760]	; (f220 <_dtoa_r+0x338>)
    ef28:	bfbc      	itt	lt
    ef2a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    ef2e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    ef32:	ea33 0308 	bics.w	r3, r3, r8
    ef36:	f000 809f 	beq.w	f078 <_dtoa_r+0x190>
    ef3a:	ed9d 8b02 	vldr	d8, [sp, #8]
    ef3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef46:	d111      	bne.n	ef6c <_dtoa_r+0x84>
    ef48:	9a05      	ldr	r2, [sp, #20]
    ef4a:	2301      	movs	r3, #1
    ef4c:	6013      	str	r3, [r2, #0]
    ef4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ef50:	2b00      	cmp	r3, #0
    ef52:	f000 823f 	beq.w	f3d4 <_dtoa_r+0x4ec>
    ef56:	4bb3      	ldr	r3, [pc, #716]	; (f224 <_dtoa_r+0x33c>)
    ef58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ef5a:	6013      	str	r3, [r2, #0]
    ef5c:	3b01      	subs	r3, #1
    ef5e:	9300      	str	r3, [sp, #0]
    ef60:	9800      	ldr	r0, [sp, #0]
    ef62:	b00f      	add	sp, #60	; 0x3c
    ef64:	ecbd 8b02 	vpop	{d8}
    ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef6c:	aa0c      	add	r2, sp, #48	; 0x30
    ef6e:	a90d      	add	r1, sp, #52	; 0x34
    ef70:	4620      	mov	r0, r4
    ef72:	eeb0 0b48 	vmov.f64	d0, d8
    ef76:	f7fd fef3 	bl	cd60 <__d2b>
    ef7a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    ef7e:	4605      	mov	r5, r0
    ef80:	f040 8092 	bne.w	f0a8 <_dtoa_r+0x1c0>
    ef84:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    ef88:	440b      	add	r3, r1
    ef8a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    ef8e:	2a20      	cmp	r2, #32
    ef90:	f340 82fa 	ble.w	f588 <_dtoa_r+0x6a0>
    ef94:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    ef98:	fa08 f802 	lsl.w	r8, r8, r2
    ef9c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    efa0:	40d6      	lsrs	r6, r2
    efa2:	ea48 0206 	orr.w	r2, r8, r6
    efa6:	ee07 2a10 	vmov	s14, r2
    efaa:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    efae:	1e58      	subs	r0, r3, #1
    efb0:	ee17 6a90 	vmov	r6, s15
    efb4:	ec53 2b17 	vmov	r2, r3, d7
    efb8:	f04f 0a01 	mov.w	sl, #1
    efbc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    efc0:	ed9f 3b91 	vldr	d3, [pc, #580]	; f208 <_dtoa_r+0x320>
    efc4:	ed9f 7b92 	vldr	d7, [pc, #584]	; f210 <_dtoa_r+0x328>
    efc8:	ed9f 5b93 	vldr	d5, [pc, #588]	; f218 <_dtoa_r+0x330>
    efcc:	ee06 0a90 	vmov	s13, r0
    efd0:	ec43 2b12 	vmov	d2, r2, r3
    efd4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    efd8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    efdc:	ee32 6b46 	vsub.f64	d6, d2, d6
    efe0:	eea6 7b03 	vfma.f64	d7, d6, d3
    efe4:	eea4 7b05 	vfma.f64	d7, d4, d5
    efe8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    efec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    eff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eff4:	ee16 7a90 	vmov	r7, s13
    eff8:	d508      	bpl.n	f00c <_dtoa_r+0x124>
    effa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    effe:	eeb4 6b47 	vcmp.f64	d6, d7
    f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f006:	bf18      	it	ne
    f008:	f107 37ff 	addne.w	r7, r7, #4294967295
    f00c:	2f16      	cmp	r7, #22
    f00e:	f200 8145 	bhi.w	f29c <_dtoa_r+0x3b4>
    f012:	4b85      	ldr	r3, [pc, #532]	; (f228 <_dtoa_r+0x340>)
    f014:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    f018:	ed93 7b00 	vldr	d7, [r3]
    f01c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f024:	d557      	bpl.n	f0d6 <_dtoa_r+0x1ee>
    f026:	1a09      	subs	r1, r1, r0
    f028:	2300      	movs	r3, #0
    f02a:	f1b1 0801 	subs.w	r8, r1, #1
    f02e:	f107 37ff 	add.w	r7, r7, #4294967295
    f032:	930a      	str	r3, [sp, #40]	; 0x28
    f034:	f100 8139 	bmi.w	f2aa <_dtoa_r+0x3c2>
    f038:	2300      	movs	r3, #0
    f03a:	9306      	str	r3, [sp, #24]
    f03c:	2f00      	cmp	r7, #0
    f03e:	da52      	bge.n	f0e6 <_dtoa_r+0x1fe>
    f040:	9b06      	ldr	r3, [sp, #24]
    f042:	9704      	str	r7, [sp, #16]
    f044:	1bdb      	subs	r3, r3, r7
    f046:	9306      	str	r3, [sp, #24]
    f048:	427b      	negs	r3, r7
    f04a:	9308      	str	r3, [sp, #32]
    f04c:	9b01      	ldr	r3, [sp, #4]
    f04e:	2b09      	cmp	r3, #9
    f050:	f04f 0700 	mov.w	r7, #0
    f054:	d84e      	bhi.n	f0f4 <_dtoa_r+0x20c>
    f056:	2b05      	cmp	r3, #5
    f058:	f340 829d 	ble.w	f596 <_dtoa_r+0x6ae>
    f05c:	3b04      	subs	r3, #4
    f05e:	9301      	str	r3, [sp, #4]
    f060:	2600      	movs	r6, #0
    f062:	9b01      	ldr	r3, [sp, #4]
    f064:	1e9a      	subs	r2, r3, #2
    f066:	2a03      	cmp	r2, #3
    f068:	f200 8125 	bhi.w	f2b6 <_dtoa_r+0x3ce>
    f06c:	e8df f012 	tbh	[pc, r2, lsl #1]
    f070:	03a703aa 	.word	0x03a703aa
    f074:	037e039d 	.word	0x037e039d
    f078:	9a05      	ldr	r2, [sp, #20]
    f07a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    f07e:	f242 730f 	movw	r3, #9999	; 0x270f
    f082:	ea58 0806 	orrs.w	r8, r8, r6
    f086:	6013      	str	r3, [r2, #0]
    f088:	d11e      	bne.n	f0c8 <_dtoa_r+0x1e0>
    f08a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f08c:	2b00      	cmp	r3, #0
    f08e:	f000 8591 	beq.w	fbb4 <_dtoa_r+0xccc>
    f092:	4b66      	ldr	r3, [pc, #408]	; (f22c <_dtoa_r+0x344>)
    f094:	9300      	str	r3, [sp, #0]
    f096:	3308      	adds	r3, #8
    f098:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f09a:	9800      	ldr	r0, [sp, #0]
    f09c:	6013      	str	r3, [r2, #0]
    f09e:	b00f      	add	sp, #60	; 0x3c
    f0a0:	ecbd 8b02 	vpop	{d8}
    f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0a8:	ee18 6a90 	vmov	r6, s17
    f0ac:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f0b0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    f0b4:	ec53 2b18 	vmov	r2, r3, d8
    f0b8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    f0bc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f0be:	f04f 0a00 	mov.w	sl, #0
    f0c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    f0c6:	e77b      	b.n	efc0 <_dtoa_r+0xd8>
    f0c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f0ca:	2b00      	cmp	r3, #0
    f0cc:	f040 833b 	bne.w	f746 <_dtoa_r+0x85e>
    f0d0:	4b57      	ldr	r3, [pc, #348]	; (f230 <_dtoa_r+0x348>)
    f0d2:	9300      	str	r3, [sp, #0]
    f0d4:	e744      	b.n	ef60 <_dtoa_r+0x78>
    f0d6:	1a09      	subs	r1, r1, r0
    f0d8:	2300      	movs	r3, #0
    f0da:	f1b1 0801 	subs.w	r8, r1, #1
    f0de:	930a      	str	r3, [sp, #40]	; 0x28
    f0e0:	f100 80e3 	bmi.w	f2aa <_dtoa_r+0x3c2>
    f0e4:	9306      	str	r3, [sp, #24]
    f0e6:	2300      	movs	r3, #0
    f0e8:	9308      	str	r3, [sp, #32]
    f0ea:	9b01      	ldr	r3, [sp, #4]
    f0ec:	9704      	str	r7, [sp, #16]
    f0ee:	2b09      	cmp	r3, #9
    f0f0:	44b8      	add	r8, r7
    f0f2:	d9b0      	bls.n	f056 <_dtoa_r+0x16e>
    f0f4:	2300      	movs	r3, #0
    f0f6:	2601      	movs	r6, #1
    f0f8:	9301      	str	r3, [sp, #4]
    f0fa:	9607      	str	r6, [sp, #28]
    f0fc:	f04f 39ff 	mov.w	r9, #4294967295
    f100:	469b      	mov	fp, r3
    f102:	2100      	movs	r1, #0
    f104:	63e1      	str	r1, [r4, #60]	; 0x3c
    f106:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    f10a:	4620      	mov	r0, r4
    f10c:	f7fd fad6 	bl	c6bc <_Balloc>
    f110:	9000      	str	r0, [sp, #0]
    f112:	2800      	cmp	r0, #0
    f114:	f000 8540 	beq.w	fb98 <_dtoa_r+0xcb0>
    f118:	9b00      	ldr	r3, [sp, #0]
    f11a:	63a3      	str	r3, [r4, #56]	; 0x38
    f11c:	f1b9 0f0e 	cmp.w	r9, #14
    f120:	f200 80dc 	bhi.w	f2dc <_dtoa_r+0x3f4>
    f124:	2e00      	cmp	r6, #0
    f126:	f000 80d9 	beq.w	f2dc <_dtoa_r+0x3f4>
    f12a:	9b04      	ldr	r3, [sp, #16]
    f12c:	2b00      	cmp	r3, #0
    f12e:	f340 83de 	ble.w	f8ee <_dtoa_r+0xa06>
    f132:	4a3d      	ldr	r2, [pc, #244]	; (f228 <_dtoa_r+0x340>)
    f134:	f003 010f 	and.w	r1, r3, #15
    f138:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f13c:	ed92 7b00 	vldr	d7, [r2]
    f140:	111a      	asrs	r2, r3, #4
    f142:	05db      	lsls	r3, r3, #23
    f144:	f140 8382 	bpl.w	f84c <_dtoa_r+0x964>
    f148:	493a      	ldr	r1, [pc, #232]	; (f234 <_dtoa_r+0x34c>)
    f14a:	ed91 6b08 	vldr	d6, [r1, #32]
    f14e:	f002 020f 	and.w	r2, r2, #15
    f152:	2003      	movs	r0, #3
    f154:	ee88 5b06 	vdiv.f64	d5, d8, d6
    f158:	b15a      	cbz	r2, f172 <_dtoa_r+0x28a>
    f15a:	4936      	ldr	r1, [pc, #216]	; (f234 <_dtoa_r+0x34c>)
    f15c:	07d6      	lsls	r6, r2, #31
    f15e:	d504      	bpl.n	f16a <_dtoa_r+0x282>
    f160:	ed91 6b00 	vldr	d6, [r1]
    f164:	3001      	adds	r0, #1
    f166:	ee27 7b06 	vmul.f64	d7, d7, d6
    f16a:	1052      	asrs	r2, r2, #1
    f16c:	f101 0108 	add.w	r1, r1, #8
    f170:	d1f4      	bne.n	f15c <_dtoa_r+0x274>
    f172:	ee85 6b07 	vdiv.f64	d6, d5, d7
    f176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f178:	b13b      	cbz	r3, f18a <_dtoa_r+0x2a2>
    f17a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    f17e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f186:	f100 84ae 	bmi.w	fae6 <_dtoa_r+0xbfe>
    f18a:	ee07 0a90 	vmov	s15, r0
    f18e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f192:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f196:	eea5 7b06 	vfma.f64	d7, d5, d6
    f19a:	ee17 2a90 	vmov	r2, s15
    f19e:	ec51 0b17 	vmov	r0, r1, d7
    f1a2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f1a6:	f1b9 0f00 	cmp.w	r9, #0
    f1aa:	f000 8388 	beq.w	f8be <_dtoa_r+0x9d6>
    f1ae:	9e04      	ldr	r6, [sp, #16]
    f1b0:	464a      	mov	r2, r9
    f1b2:	9b07      	ldr	r3, [sp, #28]
    f1b4:	2b00      	cmp	r3, #0
    f1b6:	f000 8447 	beq.w	fa48 <_dtoa_r+0xb60>
    f1ba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f1be:	4b1a      	ldr	r3, [pc, #104]	; (f228 <_dtoa_r+0x340>)
    f1c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    f1c4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f1c8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    f1cc:	ee36 7b47 	vsub.f64	d7, d6, d7
    f1d0:	ed1c 6b02 	vldr	d6, [ip, #-8]
    f1d4:	ee83 5b06 	vdiv.f64	d5, d3, d6
    f1d8:	ec41 0b16 	vmov	d6, r0, r1
    f1dc:	ee14 0a90 	vmov	r0, s9
    f1e0:	ee35 5b46 	vsub.f64	d5, d5, d6
    f1e4:	9900      	ldr	r1, [sp, #0]
    f1e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f1ea:	3030      	adds	r0, #48	; 0x30
    f1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1f0:	f801 0b01 	strb.w	r0, [r1], #1
    f1f4:	f300 84ac 	bgt.w	fb50 <_dtoa_r+0xc68>
    f1f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    f1fc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f200:	f04f 0c00 	mov.w	ip, #0
    f204:	e031      	b.n	f26a <_dtoa_r+0x382>
    f206:	bf00      	nop
    f208:	636f4361 	.word	0x636f4361
    f20c:	3fd287a7 	.word	0x3fd287a7
    f210:	8b60c8b3 	.word	0x8b60c8b3
    f214:	3fc68a28 	.word	0x3fc68a28
    f218:	509f79fb 	.word	0x509f79fb
    f21c:	3fd34413 	.word	0x3fd34413
    f220:	7ff00000 	.word	0x7ff00000
    f224:	20000d41 	.word	0x20000d41
    f228:	200002a8 	.word	0x200002a8
    f22c:	20000c94 	.word	0x20000c94
    f230:	20000ca0 	.word	0x20000ca0
    f234:	20000280 	.word	0x20000280
    f238:	f10c 0c01 	add.w	ip, ip, #1
    f23c:	4594      	cmp	ip, r2
    f23e:	da4d      	bge.n	f2dc <_dtoa_r+0x3f4>
    f240:	ee27 7b04 	vmul.f64	d7, d7, d4
    f244:	ee25 5b04 	vmul.f64	d5, d5, d4
    f248:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f24c:	ee16 3a90 	vmov	r3, s13
    f250:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    f254:	3330      	adds	r3, #48	; 0x30
    f256:	ee37 7b43 	vsub.f64	d7, d7, d3
    f25a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f262:	f801 3b01 	strb.w	r3, [r1], #1
    f266:	f100 8473 	bmi.w	fb50 <_dtoa_r+0xc68>
    f26a:	ee32 6b47 	vsub.f64	d6, d2, d7
    f26e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    f272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f276:	d5df      	bpl.n	f238 <_dtoa_r+0x350>
    f278:	9a00      	ldr	r2, [sp, #0]
    f27a:	9604      	str	r6, [sp, #16]
    f27c:	e002      	b.n	f284 <_dtoa_r+0x39c>
    f27e:	428a      	cmp	r2, r1
    f280:	f000 8450 	beq.w	fb24 <_dtoa_r+0xc3c>
    f284:	4689      	mov	r9, r1
    f286:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f28a:	2b39      	cmp	r3, #57	; 0x39
    f28c:	d0f7      	beq.n	f27e <_dtoa_r+0x396>
    f28e:	3301      	adds	r3, #1
    f290:	b2db      	uxtb	r3, r3
    f292:	700b      	strb	r3, [r1, #0]
    f294:	9b04      	ldr	r3, [sp, #16]
    f296:	3301      	adds	r3, #1
    f298:	9304      	str	r3, [sp, #16]
    f29a:	e155      	b.n	f548 <_dtoa_r+0x660>
    f29c:	1a09      	subs	r1, r1, r0
    f29e:	2301      	movs	r3, #1
    f2a0:	f1b1 0801 	subs.w	r8, r1, #1
    f2a4:	930a      	str	r3, [sp, #40]	; 0x28
    f2a6:	f57f aec7 	bpl.w	f038 <_dtoa_r+0x150>
    f2aa:	f1c1 0301 	rsb	r3, r1, #1
    f2ae:	9306      	str	r3, [sp, #24]
    f2b0:	f04f 0800 	mov.w	r8, #0
    f2b4:	e6c2      	b.n	f03c <_dtoa_r+0x154>
    f2b6:	2600      	movs	r6, #0
    f2b8:	63e6      	str	r6, [r4, #60]	; 0x3c
    f2ba:	4631      	mov	r1, r6
    f2bc:	4620      	mov	r0, r4
    f2be:	f7fd f9fd 	bl	c6bc <_Balloc>
    f2c2:	9000      	str	r0, [sp, #0]
    f2c4:	2800      	cmp	r0, #0
    f2c6:	f000 8467 	beq.w	fb98 <_dtoa_r+0xcb0>
    f2ca:	9b00      	ldr	r3, [sp, #0]
    f2cc:	63a3      	str	r3, [r4, #56]	; 0x38
    f2ce:	f04f 33ff 	mov.w	r3, #4294967295
    f2d2:	930b      	str	r3, [sp, #44]	; 0x2c
    f2d4:	4699      	mov	r9, r3
    f2d6:	2301      	movs	r3, #1
    f2d8:	46b3      	mov	fp, r6
    f2da:	9307      	str	r3, [sp, #28]
    f2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f2de:	2a00      	cmp	r2, #0
    f2e0:	db55      	blt.n	f38e <_dtoa_r+0x4a6>
    f2e2:	9904      	ldr	r1, [sp, #16]
    f2e4:	290e      	cmp	r1, #14
    f2e6:	dc52      	bgt.n	f38e <_dtoa_r+0x4a6>
    f2e8:	4bb7      	ldr	r3, [pc, #732]	; (f5c8 <_dtoa_r+0x6e0>)
    f2ea:	f1bb 0f00 	cmp.w	fp, #0
    f2ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f2f2:	ed93 6b00 	vldr	d6, [r3]
    f2f6:	da15      	bge.n	f324 <_dtoa_r+0x43c>
    f2f8:	f1b9 0f00 	cmp.w	r9, #0
    f2fc:	dc12      	bgt.n	f324 <_dtoa_r+0x43c>
    f2fe:	f040 82f2 	bne.w	f8e6 <_dtoa_r+0x9fe>
    f302:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f306:	ee26 7b07 	vmul.f64	d7, d6, d7
    f30a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f312:	46ca      	mov	sl, r9
    f314:	464e      	mov	r6, r9
    f316:	f200 826d 	bhi.w	f7f4 <_dtoa_r+0x90c>
    f31a:	f8dd 8000 	ldr.w	r8, [sp]
    f31e:	ea6f 0b0b 	mvn.w	fp, fp
    f322:	e270      	b.n	f806 <_dtoa_r+0x91e>
    f324:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f328:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f32c:	9900      	ldr	r1, [sp, #0]
    f32e:	ee17 3a10 	vmov	r3, s14
    f332:	f1b9 0f01 	cmp.w	r9, #1
    f336:	f103 0330 	add.w	r3, r3, #48	; 0x30
    f33a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f33e:	f801 3b01 	strb.w	r3, [r1], #1
    f342:	eea5 8b46 	vfms.f64	d8, d5, d6
    f346:	f000 8334 	beq.w	f9b2 <_dtoa_r+0xaca>
    f34a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f34e:	2301      	movs	r3, #1
    f350:	e011      	b.n	f376 <_dtoa_r+0x48e>
    f352:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f356:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f35a:	3301      	adds	r3, #1
    f35c:	ee17 2a10 	vmov	r2, s14
    f360:	454b      	cmp	r3, r9
    f362:	f102 0230 	add.w	r2, r2, #48	; 0x30
    f366:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f36a:	f801 2b01 	strb.w	r2, [r1], #1
    f36e:	eea5 8b46 	vfms.f64	d8, d5, d6
    f372:	f000 831e 	beq.w	f9b2 <_dtoa_r+0xaca>
    f376:	ee28 8b04 	vmul.f64	d8, d8, d4
    f37a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f382:	d1e6      	bne.n	f352 <_dtoa_r+0x46a>
    f384:	9b04      	ldr	r3, [sp, #16]
    f386:	3301      	adds	r3, #1
    f388:	9304      	str	r3, [sp, #16]
    f38a:	4689      	mov	r9, r1
    f38c:	e0dc      	b.n	f548 <_dtoa_r+0x660>
    f38e:	9b07      	ldr	r3, [sp, #28]
    f390:	b343      	cbz	r3, f3e4 <_dtoa_r+0x4fc>
    f392:	9b01      	ldr	r3, [sp, #4]
    f394:	2b01      	cmp	r3, #1
    f396:	f340 8276 	ble.w	f886 <_dtoa_r+0x99e>
    f39a:	9b08      	ldr	r3, [sp, #32]
    f39c:	f109 3aff 	add.w	sl, r9, #4294967295
    f3a0:	4553      	cmp	r3, sl
    f3a2:	f280 823f 	bge.w	f824 <_dtoa_r+0x93c>
    f3a6:	9b08      	ldr	r3, [sp, #32]
    f3a8:	f8cd a020 	str.w	sl, [sp, #32]
    f3ac:	ebaa 0203 	sub.w	r2, sl, r3
    f3b0:	4417      	add	r7, r2
    f3b2:	f04f 0a00 	mov.w	sl, #0
    f3b6:	f1b9 0f00 	cmp.w	r9, #0
    f3ba:	f2c0 8325 	blt.w	fa08 <_dtoa_r+0xb20>
    f3be:	9b06      	ldr	r3, [sp, #24]
    f3c0:	9309      	str	r3, [sp, #36]	; 0x24
    f3c2:	444b      	add	r3, r9
    f3c4:	44c8      	add	r8, r9
    f3c6:	9306      	str	r3, [sp, #24]
    f3c8:	2101      	movs	r1, #1
    f3ca:	4620      	mov	r0, r4
    f3cc:	f7fd fa48 	bl	c860 <__i2b>
    f3d0:	4606      	mov	r6, r0
    f3d2:	e00c      	b.n	f3ee <_dtoa_r+0x506>
    f3d4:	4b7d      	ldr	r3, [pc, #500]	; (f5cc <_dtoa_r+0x6e4>)
    f3d6:	9300      	str	r3, [sp, #0]
    f3d8:	9800      	ldr	r0, [sp, #0]
    f3da:	b00f      	add	sp, #60	; 0x3c
    f3dc:	ecbd 8b02 	vpop	{d8}
    f3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3e4:	9b06      	ldr	r3, [sp, #24]
    f3e6:	f8dd a020 	ldr.w	sl, [sp, #32]
    f3ea:	9e07      	ldr	r6, [sp, #28]
    f3ec:	9309      	str	r3, [sp, #36]	; 0x24
    f3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f3f0:	b16b      	cbz	r3, f40e <_dtoa_r+0x526>
    f3f2:	f1b8 0f00 	cmp.w	r8, #0
    f3f6:	dd0a      	ble.n	f40e <_dtoa_r+0x526>
    f3f8:	4543      	cmp	r3, r8
    f3fa:	9906      	ldr	r1, [sp, #24]
    f3fc:	461a      	mov	r2, r3
    f3fe:	bfa8      	it	ge
    f400:	4642      	movge	r2, r8
    f402:	1a89      	subs	r1, r1, r2
    f404:	1a9b      	subs	r3, r3, r2
    f406:	9106      	str	r1, [sp, #24]
    f408:	9309      	str	r3, [sp, #36]	; 0x24
    f40a:	eba8 0802 	sub.w	r8, r8, r2
    f40e:	9b08      	ldr	r3, [sp, #32]
    f410:	b163      	cbz	r3, f42c <_dtoa_r+0x544>
    f412:	9b07      	ldr	r3, [sp, #28]
    f414:	2b00      	cmp	r3, #0
    f416:	f000 82a7 	beq.w	f968 <_dtoa_r+0xa80>
    f41a:	f1ba 0f00 	cmp.w	sl, #0
    f41e:	f300 8204 	bgt.w	f82a <_dtoa_r+0x942>
    f422:	9b08      	ldr	r3, [sp, #32]
    f424:	ebb3 020a 	subs.w	r2, r3, sl
    f428:	f040 82ff 	bne.w	fa2a <_dtoa_r+0xb42>
    f42c:	2101      	movs	r1, #1
    f42e:	4620      	mov	r0, r4
    f430:	f7fd fa16 	bl	c860 <__i2b>
    f434:	2f00      	cmp	r7, #0
    f436:	4682      	mov	sl, r0
    f438:	f300 80af 	bgt.w	f59a <_dtoa_r+0x6b2>
    f43c:	9b01      	ldr	r3, [sp, #4]
    f43e:	2b01      	cmp	r3, #1
    f440:	f340 8187 	ble.w	f752 <_dtoa_r+0x86a>
    f444:	2300      	movs	r3, #0
    f446:	9308      	str	r3, [sp, #32]
    f448:	2001      	movs	r0, #1
    f44a:	2f00      	cmp	r7, #0
    f44c:	f040 80b1 	bne.w	f5b2 <_dtoa_r+0x6ca>
    f450:	4440      	add	r0, r8
    f452:	f010 001f 	ands.w	r0, r0, #31
    f456:	f000 817a 	beq.w	f74e <_dtoa_r+0x866>
    f45a:	f1c0 0220 	rsb	r2, r0, #32
    f45e:	2a04      	cmp	r2, #4
    f460:	f300 8088 	bgt.w	f574 <_dtoa_r+0x68c>
    f464:	f040 81f6 	bne.w	f854 <_dtoa_r+0x96c>
    f468:	9b06      	ldr	r3, [sp, #24]
    f46a:	2b00      	cmp	r3, #0
    f46c:	dd05      	ble.n	f47a <_dtoa_r+0x592>
    f46e:	4629      	mov	r1, r5
    f470:	461a      	mov	r2, r3
    f472:	4620      	mov	r0, r4
    f474:	f7fd fb30 	bl	cad8 <__lshift>
    f478:	4605      	mov	r5, r0
    f47a:	f1b8 0f00 	cmp.w	r8, #0
    f47e:	dd05      	ble.n	f48c <_dtoa_r+0x5a4>
    f480:	4651      	mov	r1, sl
    f482:	4642      	mov	r2, r8
    f484:	4620      	mov	r0, r4
    f486:	f7fd fb27 	bl	cad8 <__lshift>
    f48a:	4682      	mov	sl, r0
    f48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f48e:	2b00      	cmp	r3, #0
    f490:	f040 813f 	bne.w	f712 <_dtoa_r+0x82a>
    f494:	f1b9 0f00 	cmp.w	r9, #0
    f498:	f340 8125 	ble.w	f6e6 <_dtoa_r+0x7fe>
    f49c:	9b07      	ldr	r3, [sp, #28]
    f49e:	2b00      	cmp	r3, #0
    f4a0:	f040 80a3 	bne.w	f5ea <_dtoa_r+0x702>
    f4a4:	9b04      	ldr	r3, [sp, #16]
    f4a6:	3301      	adds	r3, #1
    f4a8:	9304      	str	r3, [sp, #16]
    f4aa:	f8dd 8000 	ldr.w	r8, [sp]
    f4ae:	2701      	movs	r7, #1
    f4b0:	e007      	b.n	f4c2 <_dtoa_r+0x5da>
    f4b2:	4629      	mov	r1, r5
    f4b4:	2300      	movs	r3, #0
    f4b6:	220a      	movs	r2, #10
    f4b8:	4620      	mov	r0, r4
    f4ba:	f7fd f92f 	bl	c71c <__multadd>
    f4be:	3701      	adds	r7, #1
    f4c0:	4605      	mov	r5, r0
    f4c2:	4651      	mov	r1, sl
    f4c4:	4628      	mov	r0, r5
    f4c6:	f7ff fc7b 	bl	edc0 <quorem>
    f4ca:	45b9      	cmp	r9, r7
    f4cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f4d0:	f808 0b01 	strb.w	r0, [r8], #1
    f4d4:	dced      	bgt.n	f4b2 <_dtoa_r+0x5ca>
    f4d6:	f1b9 0f00 	cmp.w	r9, #0
    f4da:	9a00      	ldr	r2, [sp, #0]
    f4dc:	bfcc      	ite	gt
    f4de:	46cb      	movgt	fp, r9
    f4e0:	f04f 0b01 	movle.w	fp, #1
    f4e4:	4603      	mov	r3, r0
    f4e6:	4493      	add	fp, r2
    f4e8:	2700      	movs	r7, #0
    f4ea:	4629      	mov	r1, r5
    f4ec:	2201      	movs	r2, #1
    f4ee:	4620      	mov	r0, r4
    f4f0:	9301      	str	r3, [sp, #4]
    f4f2:	f7fd faf1 	bl	cad8 <__lshift>
    f4f6:	4651      	mov	r1, sl
    f4f8:	4605      	mov	r5, r0
    f4fa:	f7fd fb65 	bl	cbc8 <__mcmp>
    f4fe:	2800      	cmp	r0, #0
    f500:	f340 81af 	ble.w	f862 <_dtoa_r+0x97a>
    f504:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f508:	9a00      	ldr	r2, [sp, #0]
    f50a:	f10b 3bff 	add.w	fp, fp, #4294967295
    f50e:	e004      	b.n	f51a <_dtoa_r+0x632>
    f510:	455a      	cmp	r2, fp
    f512:	f000 81b1 	beq.w	f878 <_dtoa_r+0x990>
    f516:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f51a:	2b39      	cmp	r3, #57	; 0x39
    f51c:	f10b 0901 	add.w	r9, fp, #1
    f520:	d0f6      	beq.n	f510 <_dtoa_r+0x628>
    f522:	3301      	adds	r3, #1
    f524:	f88b 3000 	strb.w	r3, [fp]
    f528:	4651      	mov	r1, sl
    f52a:	4620      	mov	r0, r4
    f52c:	f7fd f8ec 	bl	c708 <_Bfree>
    f530:	b156      	cbz	r6, f548 <_dtoa_r+0x660>
    f532:	b12f      	cbz	r7, f540 <_dtoa_r+0x658>
    f534:	42b7      	cmp	r7, r6
    f536:	d003      	beq.n	f540 <_dtoa_r+0x658>
    f538:	4639      	mov	r1, r7
    f53a:	4620      	mov	r0, r4
    f53c:	f7fd f8e4 	bl	c708 <_Bfree>
    f540:	4631      	mov	r1, r6
    f542:	4620      	mov	r0, r4
    f544:	f7fd f8e0 	bl	c708 <_Bfree>
    f548:	4629      	mov	r1, r5
    f54a:	4620      	mov	r0, r4
    f54c:	f7fd f8dc 	bl	c708 <_Bfree>
    f550:	2300      	movs	r3, #0
    f552:	f889 3000 	strb.w	r3, [r9]
    f556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f55a:	601a      	str	r2, [r3, #0]
    f55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f55e:	2b00      	cmp	r3, #0
    f560:	f43f acfe 	beq.w	ef60 <_dtoa_r+0x78>
    f564:	9800      	ldr	r0, [sp, #0]
    f566:	f8c3 9000 	str.w	r9, [r3]
    f56a:	b00f      	add	sp, #60	; 0x3c
    f56c:	ecbd 8b02 	vpop	{d8}
    f570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f574:	f1c0 001c 	rsb	r0, r0, #28
    f578:	9b06      	ldr	r3, [sp, #24]
    f57a:	4403      	add	r3, r0
    f57c:	9306      	str	r3, [sp, #24]
    f57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f580:	4403      	add	r3, r0
    f582:	9309      	str	r3, [sp, #36]	; 0x24
    f584:	4480      	add	r8, r0
    f586:	e76f      	b.n	f468 <_dtoa_r+0x580>
    f588:	f1c2 0220 	rsb	r2, r2, #32
    f58c:	fa06 f202 	lsl.w	r2, r6, r2
    f590:	ee07 2a10 	vmov	s14, r2
    f594:	e509      	b.n	efaa <_dtoa_r+0xc2>
    f596:	2601      	movs	r6, #1
    f598:	e563      	b.n	f062 <_dtoa_r+0x17a>
    f59a:	4601      	mov	r1, r0
    f59c:	463a      	mov	r2, r7
    f59e:	4620      	mov	r0, r4
    f5a0:	f7fd fa3a 	bl	ca18 <__pow5mult>
    f5a4:	9b01      	ldr	r3, [sp, #4]
    f5a6:	2b01      	cmp	r3, #1
    f5a8:	4682      	mov	sl, r0
    f5aa:	f340 81c5 	ble.w	f938 <_dtoa_r+0xa50>
    f5ae:	2300      	movs	r3, #0
    f5b0:	9308      	str	r3, [sp, #32]
    f5b2:	f8da 2010 	ldr.w	r2, [sl, #16]
    f5b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    f5ba:	6910      	ldr	r0, [r2, #16]
    f5bc:	f7fd f900 	bl	c7c0 <__hi0bits>
    f5c0:	f1c0 0020 	rsb	r0, r0, #32
    f5c4:	e744      	b.n	f450 <_dtoa_r+0x568>
    f5c6:	bf00      	nop
    f5c8:	200002a8 	.word	0x200002a8
    f5cc:	20000d40 	.word	0x20000d40
    f5d0:	4631      	mov	r1, r6
    f5d2:	2300      	movs	r3, #0
    f5d4:	220a      	movs	r2, #10
    f5d6:	4620      	mov	r0, r4
    f5d8:	f7fd f8a0 	bl	c71c <__multadd>
    f5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5de:	2b00      	cmp	r3, #0
    f5e0:	4606      	mov	r6, r0
    f5e2:	f340 82ce 	ble.w	fb82 <_dtoa_r+0xc9a>
    f5e6:	9704      	str	r7, [sp, #16]
    f5e8:	4699      	mov	r9, r3
    f5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	dd05      	ble.n	f5fc <_dtoa_r+0x714>
    f5f0:	4631      	mov	r1, r6
    f5f2:	461a      	mov	r2, r3
    f5f4:	4620      	mov	r0, r4
    f5f6:	f7fd fa6f 	bl	cad8 <__lshift>
    f5fa:	4606      	mov	r6, r0
    f5fc:	9b08      	ldr	r3, [sp, #32]
    f5fe:	2b00      	cmp	r3, #0
    f600:	f040 81eb 	bne.w	f9da <_dtoa_r+0xaf2>
    f604:	46b0      	mov	r8, r6
    f606:	9b02      	ldr	r3, [sp, #8]
    f608:	9f00      	ldr	r7, [sp, #0]
    f60a:	f003 0201 	and.w	r2, r3, #1
    f60e:	1e7b      	subs	r3, r7, #1
    f610:	444b      	add	r3, r9
    f612:	9308      	str	r3, [sp, #32]
    f614:	9b01      	ldr	r3, [sp, #4]
    f616:	920a      	str	r2, [sp, #40]	; 0x28
    f618:	4313      	orrs	r3, r2
    f61a:	9309      	str	r3, [sp, #36]	; 0x24
    f61c:	4651      	mov	r1, sl
    f61e:	4628      	mov	r0, r5
    f620:	f7ff fbce 	bl	edc0 <quorem>
    f624:	4631      	mov	r1, r6
    f626:	4683      	mov	fp, r0
    f628:	4628      	mov	r0, r5
    f62a:	f7fd facd 	bl	cbc8 <__mcmp>
    f62e:	4642      	mov	r2, r8
    f630:	4651      	mov	r1, sl
    f632:	4681      	mov	r9, r0
    f634:	4620      	mov	r0, r4
    f636:	f7fd fae9 	bl	cc0c <__mdiff>
    f63a:	68c2      	ldr	r2, [r0, #12]
    f63c:	4601      	mov	r1, r0
    f63e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f642:	2a00      	cmp	r2, #0
    f644:	d142      	bne.n	f6cc <_dtoa_r+0x7e4>
    f646:	e9cd 0306 	strd	r0, r3, [sp, #24]
    f64a:	4628      	mov	r0, r5
    f64c:	f7fd fabc 	bl	cbc8 <__mcmp>
    f650:	9906      	ldr	r1, [sp, #24]
    f652:	9002      	str	r0, [sp, #8]
    f654:	4620      	mov	r0, r4
    f656:	f7fd f857 	bl	c708 <_Bfree>
    f65a:	9a02      	ldr	r2, [sp, #8]
    f65c:	9b07      	ldr	r3, [sp, #28]
    f65e:	b91a      	cbnz	r2, f668 <_dtoa_r+0x780>
    f660:	9909      	ldr	r1, [sp, #36]	; 0x24
    f662:	2900      	cmp	r1, #0
    f664:	f000 827e 	beq.w	fb64 <_dtoa_r+0xc7c>
    f668:	f1b9 0f00 	cmp.w	r9, #0
    f66c:	f2c0 8183 	blt.w	f976 <_dtoa_r+0xa8e>
    f670:	9901      	ldr	r1, [sp, #4]
    f672:	ea49 0901 	orr.w	r9, r9, r1
    f676:	990a      	ldr	r1, [sp, #40]	; 0x28
    f678:	ea51 0909 	orrs.w	r9, r1, r9
    f67c:	f000 817b 	beq.w	f976 <_dtoa_r+0xa8e>
    f680:	2a00      	cmp	r2, #0
    f682:	f300 81c6 	bgt.w	fa12 <_dtoa_r+0xb2a>
    f686:	9a08      	ldr	r2, [sp, #32]
    f688:	703b      	strb	r3, [r7, #0]
    f68a:	f107 0901 	add.w	r9, r7, #1
    f68e:	4297      	cmp	r7, r2
    f690:	46cb      	mov	fp, r9
    f692:	f000 81c4 	beq.w	fa1e <_dtoa_r+0xb36>
    f696:	4629      	mov	r1, r5
    f698:	2300      	movs	r3, #0
    f69a:	220a      	movs	r2, #10
    f69c:	4620      	mov	r0, r4
    f69e:	f7fd f83d 	bl	c71c <__multadd>
    f6a2:	4546      	cmp	r6, r8
    f6a4:	4605      	mov	r5, r0
    f6a6:	4631      	mov	r1, r6
    f6a8:	f04f 0300 	mov.w	r3, #0
    f6ac:	f04f 020a 	mov.w	r2, #10
    f6b0:	4620      	mov	r0, r4
    f6b2:	d012      	beq.n	f6da <_dtoa_r+0x7f2>
    f6b4:	f7fd f832 	bl	c71c <__multadd>
    f6b8:	4641      	mov	r1, r8
    f6ba:	4606      	mov	r6, r0
    f6bc:	2300      	movs	r3, #0
    f6be:	220a      	movs	r2, #10
    f6c0:	4620      	mov	r0, r4
    f6c2:	f7fd f82b 	bl	c71c <__multadd>
    f6c6:	464f      	mov	r7, r9
    f6c8:	4680      	mov	r8, r0
    f6ca:	e7a7      	b.n	f61c <_dtoa_r+0x734>
    f6cc:	4620      	mov	r0, r4
    f6ce:	9302      	str	r3, [sp, #8]
    f6d0:	f7fd f81a 	bl	c708 <_Bfree>
    f6d4:	9b02      	ldr	r3, [sp, #8]
    f6d6:	2201      	movs	r2, #1
    f6d8:	e7c6      	b.n	f668 <_dtoa_r+0x780>
    f6da:	f7fd f81f 	bl	c71c <__multadd>
    f6de:	464f      	mov	r7, r9
    f6e0:	4606      	mov	r6, r0
    f6e2:	4680      	mov	r8, r0
    f6e4:	e79a      	b.n	f61c <_dtoa_r+0x734>
    f6e6:	9b01      	ldr	r3, [sp, #4]
    f6e8:	2b02      	cmp	r3, #2
    f6ea:	dc71      	bgt.n	f7d0 <_dtoa_r+0x8e8>
    f6ec:	9b07      	ldr	r3, [sp, #28]
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	f47f af7b 	bne.w	f5ea <_dtoa_r+0x702>
    f6f4:	9b04      	ldr	r3, [sp, #16]
    f6f6:	4651      	mov	r1, sl
    f6f8:	3301      	adds	r3, #1
    f6fa:	4628      	mov	r0, r5
    f6fc:	9304      	str	r3, [sp, #16]
    f6fe:	f7ff fb5f 	bl	edc0 <quorem>
    f702:	f8dd b000 	ldr.w	fp, [sp]
    f706:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f70a:	f80b 3b01 	strb.w	r3, [fp], #1
    f70e:	2700      	movs	r7, #0
    f710:	e6eb      	b.n	f4ea <_dtoa_r+0x602>
    f712:	4651      	mov	r1, sl
    f714:	4628      	mov	r0, r5
    f716:	f7fd fa57 	bl	cbc8 <__mcmp>
    f71a:	2800      	cmp	r0, #0
    f71c:	f6bf aeba 	bge.w	f494 <_dtoa_r+0x5ac>
    f720:	4629      	mov	r1, r5
    f722:	2300      	movs	r3, #0
    f724:	220a      	movs	r2, #10
    f726:	4620      	mov	r0, r4
    f728:	f7fc fff8 	bl	c71c <__multadd>
    f72c:	9b04      	ldr	r3, [sp, #16]
    f72e:	1e5f      	subs	r7, r3, #1
    f730:	9b07      	ldr	r3, [sp, #28]
    f732:	4605      	mov	r5, r0
    f734:	2b00      	cmp	r3, #0
    f736:	f47f af4b 	bne.w	f5d0 <_dtoa_r+0x6e8>
    f73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f73c:	2b00      	cmp	r3, #0
    f73e:	f340 8218 	ble.w	fb72 <_dtoa_r+0xc8a>
    f742:	4699      	mov	r9, r3
    f744:	e6b1      	b.n	f4aa <_dtoa_r+0x5c2>
    f746:	4bbc      	ldr	r3, [pc, #752]	; (fa38 <_dtoa_r+0xb50>)
    f748:	9300      	str	r3, [sp, #0]
    f74a:	3303      	adds	r3, #3
    f74c:	e4a4      	b.n	f098 <_dtoa_r+0x1b0>
    f74e:	201c      	movs	r0, #28
    f750:	e712      	b.n	f578 <_dtoa_r+0x690>
    f752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f756:	2800      	cmp	r0, #0
    f758:	f47f ae74 	bne.w	f444 <_dtoa_r+0x55c>
    f75c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f760:	2a00      	cmp	r2, #0
    f762:	f000 80f4 	beq.w	f94e <_dtoa_r+0xa66>
    f766:	9b02      	ldr	r3, [sp, #8]
    f768:	9308      	str	r3, [sp, #32]
    f76a:	e66d      	b.n	f448 <_dtoa_r+0x560>
    f76c:	2301      	movs	r3, #1
    f76e:	9307      	str	r3, [sp, #28]
    f770:	9b04      	ldr	r3, [sp, #16]
    f772:	445b      	add	r3, fp
    f774:	f103 0901 	add.w	r9, r3, #1
    f778:	f1b9 0f01 	cmp.w	r9, #1
    f77c:	46cc      	mov	ip, r9
    f77e:	930b      	str	r3, [sp, #44]	; 0x2c
    f780:	bfb8      	it	lt
    f782:	f04f 0c01 	movlt.w	ip, #1
    f786:	2100      	movs	r1, #0
    f788:	f1bc 0f17 	cmp.w	ip, #23
    f78c:	63e1      	str	r1, [r4, #60]	; 0x3c
    f78e:	f77f acbc 	ble.w	f10a <_dtoa_r+0x222>
    f792:	2001      	movs	r0, #1
    f794:	2204      	movs	r2, #4
    f796:	0052      	lsls	r2, r2, #1
    f798:	f102 0314 	add.w	r3, r2, #20
    f79c:	4563      	cmp	r3, ip
    f79e:	4601      	mov	r1, r0
    f7a0:	f100 0001 	add.w	r0, r0, #1
    f7a4:	d9f7      	bls.n	f796 <_dtoa_r+0x8ae>
    f7a6:	63e1      	str	r1, [r4, #60]	; 0x3c
    f7a8:	e4af      	b.n	f10a <_dtoa_r+0x222>
    f7aa:	2301      	movs	r3, #1
    f7ac:	9307      	str	r3, [sp, #28]
    f7ae:	f1bb 0f00 	cmp.w	fp, #0
    f7b2:	dd52      	ble.n	f85a <_dtoa_r+0x972>
    f7b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    f7b8:	46d9      	mov	r9, fp
    f7ba:	46dc      	mov	ip, fp
    f7bc:	e7e3      	b.n	f786 <_dtoa_r+0x89e>
    f7be:	2300      	movs	r3, #0
    f7c0:	9307      	str	r3, [sp, #28]
    f7c2:	e7d5      	b.n	f770 <_dtoa_r+0x888>
    f7c4:	2300      	movs	r3, #0
    f7c6:	9307      	str	r3, [sp, #28]
    f7c8:	e7f1      	b.n	f7ae <_dtoa_r+0x8c6>
    f7ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f7ce:	9704      	str	r7, [sp, #16]
    f7d0:	f1b9 0f00 	cmp.w	r9, #0
    f7d4:	f47f ada1 	bne.w	f31a <_dtoa_r+0x432>
    f7d8:	4651      	mov	r1, sl
    f7da:	464b      	mov	r3, r9
    f7dc:	2205      	movs	r2, #5
    f7de:	4620      	mov	r0, r4
    f7e0:	f7fc ff9c 	bl	c71c <__multadd>
    f7e4:	4601      	mov	r1, r0
    f7e6:	4682      	mov	sl, r0
    f7e8:	4628      	mov	r0, r5
    f7ea:	f7fd f9ed 	bl	cbc8 <__mcmp>
    f7ee:	2800      	cmp	r0, #0
    f7f0:	f77f ad93 	ble.w	f31a <_dtoa_r+0x432>
    f7f4:	9b04      	ldr	r3, [sp, #16]
    f7f6:	f103 0b01 	add.w	fp, r3, #1
    f7fa:	9b00      	ldr	r3, [sp, #0]
    f7fc:	2231      	movs	r2, #49	; 0x31
    f7fe:	4698      	mov	r8, r3
    f800:	f803 2b01 	strb.w	r2, [r3], #1
    f804:	9300      	str	r3, [sp, #0]
    f806:	4651      	mov	r1, sl
    f808:	4620      	mov	r0, r4
    f80a:	f7fc ff7d 	bl	c708 <_Bfree>
    f80e:	f10b 0301 	add.w	r3, fp, #1
    f812:	f8dd 9000 	ldr.w	r9, [sp]
    f816:	9304      	str	r3, [sp, #16]
    f818:	f8cd 8000 	str.w	r8, [sp]
    f81c:	2e00      	cmp	r6, #0
    f81e:	f47f ae8f 	bne.w	f540 <_dtoa_r+0x658>
    f822:	e691      	b.n	f548 <_dtoa_r+0x660>
    f824:	eba3 0a0a 	sub.w	sl, r3, sl
    f828:	e5c5      	b.n	f3b6 <_dtoa_r+0x4ce>
    f82a:	4631      	mov	r1, r6
    f82c:	4652      	mov	r2, sl
    f82e:	4620      	mov	r0, r4
    f830:	f7fd f8f2 	bl	ca18 <__pow5mult>
    f834:	462a      	mov	r2, r5
    f836:	4601      	mov	r1, r0
    f838:	4606      	mov	r6, r0
    f83a:	4620      	mov	r0, r4
    f83c:	f7fd f83e 	bl	c8bc <__multiply>
    f840:	4629      	mov	r1, r5
    f842:	4605      	mov	r5, r0
    f844:	4620      	mov	r0, r4
    f846:	f7fc ff5f 	bl	c708 <_Bfree>
    f84a:	e5ea      	b.n	f422 <_dtoa_r+0x53a>
    f84c:	2002      	movs	r0, #2
    f84e:	eeb0 5b48 	vmov.f64	d5, d8
    f852:	e481      	b.n	f158 <_dtoa_r+0x270>
    f854:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f858:	e68e      	b.n	f578 <_dtoa_r+0x690>
    f85a:	f04f 0b01 	mov.w	fp, #1
    f85e:	46d9      	mov	r9, fp
    f860:	e44f      	b.n	f102 <_dtoa_r+0x21a>
    f862:	d103      	bne.n	f86c <_dtoa_r+0x984>
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	07db      	lsls	r3, r3, #31
    f868:	f53f ae4c 	bmi.w	f504 <_dtoa_r+0x61c>
    f86c:	46d9      	mov	r9, fp
    f86e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f872:	2b30      	cmp	r3, #48	; 0x30
    f874:	d0fa      	beq.n	f86c <_dtoa_r+0x984>
    f876:	e657      	b.n	f528 <_dtoa_r+0x640>
    f878:	9b04      	ldr	r3, [sp, #16]
    f87a:	9a00      	ldr	r2, [sp, #0]
    f87c:	3301      	adds	r3, #1
    f87e:	9304      	str	r3, [sp, #16]
    f880:	2331      	movs	r3, #49	; 0x31
    f882:	7013      	strb	r3, [r2, #0]
    f884:	e650      	b.n	f528 <_dtoa_r+0x640>
    f886:	f1ba 0f00 	cmp.w	sl, #0
    f88a:	f000 8123 	beq.w	fad4 <_dtoa_r+0xbec>
    f88e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    f892:	9b06      	ldr	r3, [sp, #24]
    f894:	9309      	str	r3, [sp, #36]	; 0x24
    f896:	4413      	add	r3, r2
    f898:	f8dd a020 	ldr.w	sl, [sp, #32]
    f89c:	9306      	str	r3, [sp, #24]
    f89e:	4490      	add	r8, r2
    f8a0:	e592      	b.n	f3c8 <_dtoa_r+0x4e0>
    f8a2:	ee07 0a90 	vmov	s15, r0
    f8a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    f8aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    f8ae:	eea6 5b07 	vfma.f64	d5, d6, d7
    f8b2:	ee15 2a90 	vmov	r2, s11
    f8b6:	ec51 0b15 	vmov	r0, r1, d5
    f8ba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f8be:	ec41 0b15 	vmov	d5, r0, r1
    f8c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f8c6:	ee36 7b47 	vsub.f64	d7, d6, d7
    f8ca:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8d2:	f300 8137 	bgt.w	fb44 <_dtoa_r+0xc5c>
    f8d6:	eeb1 5b45 	vneg.f64	d5, d5
    f8da:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8e2:	f57f acfb 	bpl.w	f2dc <_dtoa_r+0x3f4>
    f8e6:	f04f 0a00 	mov.w	sl, #0
    f8ea:	4656      	mov	r6, sl
    f8ec:	e515      	b.n	f31a <_dtoa_r+0x432>
    f8ee:	f000 80f5 	beq.w	fadc <_dtoa_r+0xbf4>
    f8f2:	9b04      	ldr	r3, [sp, #16]
    f8f4:	4951      	ldr	r1, [pc, #324]	; (fa3c <_dtoa_r+0xb54>)
    f8f6:	425a      	negs	r2, r3
    f8f8:	f002 000f 	and.w	r0, r2, #15
    f8fc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    f900:	ed91 6b00 	vldr	d6, [r1]
    f904:	1112      	asrs	r2, r2, #4
    f906:	ee28 6b06 	vmul.f64	d6, d8, d6
    f90a:	f000 8142 	beq.w	fb92 <_dtoa_r+0xcaa>
    f90e:	eeb0 7b46 	vmov.f64	d7, d6
    f912:	494b      	ldr	r1, [pc, #300]	; (fa40 <_dtoa_r+0xb58>)
    f914:	2600      	movs	r6, #0
    f916:	2002      	movs	r0, #2
    f918:	07d3      	lsls	r3, r2, #31
    f91a:	d505      	bpl.n	f928 <_dtoa_r+0xa40>
    f91c:	ed91 5b00 	vldr	d5, [r1]
    f920:	3001      	adds	r0, #1
    f922:	2601      	movs	r6, #1
    f924:	ee27 7b05 	vmul.f64	d7, d7, d5
    f928:	1052      	asrs	r2, r2, #1
    f92a:	f101 0108 	add.w	r1, r1, #8
    f92e:	d1f3      	bne.n	f918 <_dtoa_r+0xa30>
    f930:	2e00      	cmp	r6, #0
    f932:	fe06 6b07 	vseleq.f64	d6, d6, d7
    f936:	e41e      	b.n	f176 <_dtoa_r+0x28e>
    f938:	9b02      	ldr	r3, [sp, #8]
    f93a:	2b00      	cmp	r3, #0
    f93c:	f47f ae37 	bne.w	f5ae <_dtoa_r+0x6c6>
    f940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f944:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f948:	2a00      	cmp	r2, #0
    f94a:	f040 8137 	bne.w	fbbc <_dtoa_r+0xcd4>
    f94e:	4a3d      	ldr	r2, [pc, #244]	; (fa44 <_dtoa_r+0xb5c>)
    f950:	400a      	ands	r2, r1
    f952:	2a00      	cmp	r2, #0
    f954:	f000 80fa 	beq.w	fb4c <_dtoa_r+0xc64>
    f958:	9b06      	ldr	r3, [sp, #24]
    f95a:	3301      	adds	r3, #1
    f95c:	9306      	str	r3, [sp, #24]
    f95e:	2301      	movs	r3, #1
    f960:	f108 0801 	add.w	r8, r8, #1
    f964:	9308      	str	r3, [sp, #32]
    f966:	e56f      	b.n	f448 <_dtoa_r+0x560>
    f968:	4629      	mov	r1, r5
    f96a:	9a08      	ldr	r2, [sp, #32]
    f96c:	4620      	mov	r0, r4
    f96e:	f7fd f853 	bl	ca18 <__pow5mult>
    f972:	4605      	mov	r5, r0
    f974:	e55a      	b.n	f42c <_dtoa_r+0x544>
    f976:	2a00      	cmp	r2, #0
    f978:	dd12      	ble.n	f9a0 <_dtoa_r+0xab8>
    f97a:	4629      	mov	r1, r5
    f97c:	2201      	movs	r2, #1
    f97e:	4620      	mov	r0, r4
    f980:	9301      	str	r3, [sp, #4]
    f982:	f7fd f8a9 	bl	cad8 <__lshift>
    f986:	4651      	mov	r1, sl
    f988:	4605      	mov	r5, r0
    f98a:	f7fd f91d 	bl	cbc8 <__mcmp>
    f98e:	2800      	cmp	r0, #0
    f990:	9b01      	ldr	r3, [sp, #4]
    f992:	f340 80e1 	ble.w	fb58 <_dtoa_r+0xc70>
    f996:	2b39      	cmp	r3, #57	; 0x39
    f998:	f000 80ca 	beq.w	fb30 <_dtoa_r+0xc48>
    f99c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f9a0:	46b9      	mov	r9, r7
    f9a2:	f809 3b01 	strb.w	r3, [r9], #1
    f9a6:	9b04      	ldr	r3, [sp, #16]
    f9a8:	3301      	adds	r3, #1
    f9aa:	4637      	mov	r7, r6
    f9ac:	9304      	str	r3, [sp, #16]
    f9ae:	4646      	mov	r6, r8
    f9b0:	e5ba      	b.n	f528 <_dtoa_r+0x640>
    f9b2:	ee38 8b08 	vadd.f64	d8, d8, d8
    f9b6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    f9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9be:	dc0a      	bgt.n	f9d6 <_dtoa_r+0xaee>
    f9c0:	eeb4 8b46 	vcmp.f64	d8, d6
    f9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9c8:	f47f acdc 	bne.w	f384 <_dtoa_r+0x49c>
    f9cc:	ee17 3a10 	vmov	r3, s14
    f9d0:	07d8      	lsls	r0, r3, #31
    f9d2:	f57f acd7 	bpl.w	f384 <_dtoa_r+0x49c>
    f9d6:	9a00      	ldr	r2, [sp, #0]
    f9d8:	e454      	b.n	f284 <_dtoa_r+0x39c>
    f9da:	6871      	ldr	r1, [r6, #4]
    f9dc:	4620      	mov	r0, r4
    f9de:	f7fc fe6d 	bl	c6bc <_Balloc>
    f9e2:	4607      	mov	r7, r0
    f9e4:	2800      	cmp	r0, #0
    f9e6:	f000 80de 	beq.w	fba6 <_dtoa_r+0xcbe>
    f9ea:	6933      	ldr	r3, [r6, #16]
    f9ec:	3302      	adds	r3, #2
    f9ee:	009a      	lsls	r2, r3, #2
    f9f0:	f106 010c 	add.w	r1, r6, #12
    f9f4:	300c      	adds	r0, #12
    f9f6:	f7f9 fad5 	bl	8fa4 <memcpy>
    f9fa:	4639      	mov	r1, r7
    f9fc:	2201      	movs	r2, #1
    f9fe:	4620      	mov	r0, r4
    fa00:	f7fd f86a 	bl	cad8 <__lshift>
    fa04:	4680      	mov	r8, r0
    fa06:	e5fe      	b.n	f606 <_dtoa_r+0x71e>
    fa08:	9b06      	ldr	r3, [sp, #24]
    fa0a:	eba3 0309 	sub.w	r3, r3, r9
    fa0e:	9309      	str	r3, [sp, #36]	; 0x24
    fa10:	e4da      	b.n	f3c8 <_dtoa_r+0x4e0>
    fa12:	2b39      	cmp	r3, #57	; 0x39
    fa14:	f000 808c 	beq.w	fb30 <_dtoa_r+0xc48>
    fa18:	46b9      	mov	r9, r7
    fa1a:	3301      	adds	r3, #1
    fa1c:	e7c1      	b.n	f9a2 <_dtoa_r+0xaba>
    fa1e:	9a04      	ldr	r2, [sp, #16]
    fa20:	3201      	adds	r2, #1
    fa22:	4637      	mov	r7, r6
    fa24:	9204      	str	r2, [sp, #16]
    fa26:	4646      	mov	r6, r8
    fa28:	e55f      	b.n	f4ea <_dtoa_r+0x602>
    fa2a:	4629      	mov	r1, r5
    fa2c:	4620      	mov	r0, r4
    fa2e:	f7fc fff3 	bl	ca18 <__pow5mult>
    fa32:	4605      	mov	r5, r0
    fa34:	e4fa      	b.n	f42c <_dtoa_r+0x544>
    fa36:	bf00      	nop
    fa38:	20000ca0 	.word	0x20000ca0
    fa3c:	200002a8 	.word	0x200002a8
    fa40:	20000280 	.word	0x20000280
    fa44:	7ff00000 	.word	0x7ff00000
    fa48:	4b5e      	ldr	r3, [pc, #376]	; (fbc4 <_dtoa_r+0xcdc>)
    fa4a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    fa4e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    fa52:	ed1c 3b02 	vldr	d3, [ip, #-8]
    fa56:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    fa5a:	ee36 7b47 	vsub.f64	d7, d6, d7
    fa5e:	ec41 0b16 	vmov	d6, r0, r1
    fa62:	ee15 1a90 	vmov	r1, s11
    fa66:	ee23 3b06 	vmul.f64	d3, d3, d6
    fa6a:	9800      	ldr	r0, [sp, #0]
    fa6c:	3130      	adds	r1, #48	; 0x30
    fa6e:	2a01      	cmp	r2, #1
    fa70:	f800 1b01 	strb.w	r1, [r0], #1
    fa74:	f000 8083 	beq.w	fb7e <_dtoa_r+0xc96>
    fa78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fa7c:	9b00      	ldr	r3, [sp, #0]
    fa7e:	1899      	adds	r1, r3, r2
    fa80:	ee27 7b04 	vmul.f64	d7, d7, d4
    fa84:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    fa88:	ee16 3a90 	vmov	r3, s13
    fa8c:	3330      	adds	r3, #48	; 0x30
    fa8e:	f800 3b01 	strb.w	r3, [r0], #1
    fa92:	4281      	cmp	r1, r0
    fa94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    fa98:	ee37 7b45 	vsub.f64	d7, d7, d5
    fa9c:	d1f0      	bne.n	fa80 <_dtoa_r+0xb98>
    fa9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    faa2:	ee33 5b06 	vadd.f64	d5, d3, d6
    faa6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    faaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    faae:	f53f abe3 	bmi.w	f278 <_dtoa_r+0x390>
    fab2:	ee36 6b43 	vsub.f64	d6, d6, d3
    fab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    faba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fabe:	f77f ac0d 	ble.w	f2dc <_dtoa_r+0x3f4>
    fac2:	4689      	mov	r9, r1
    fac4:	3901      	subs	r1, #1
    fac6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    faca:	2b30      	cmp	r3, #48	; 0x30
    facc:	d0f9      	beq.n	fac2 <_dtoa_r+0xbda>
    face:	1c73      	adds	r3, r6, #1
    fad0:	9304      	str	r3, [sp, #16]
    fad2:	e539      	b.n	f548 <_dtoa_r+0x660>
    fad4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fad6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    fada:	e6da      	b.n	f892 <_dtoa_r+0x9aa>
    fadc:	2002      	movs	r0, #2
    fade:	eeb0 6b48 	vmov.f64	d6, d8
    fae2:	f7ff bb48 	b.w	f176 <_dtoa_r+0x28e>
    fae6:	f1b9 0f00 	cmp.w	r9, #0
    faea:	f43f aeda 	beq.w	f8a2 <_dtoa_r+0x9ba>
    faee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    faf0:	2a00      	cmp	r2, #0
    faf2:	f77f abf3 	ble.w	f2dc <_dtoa_r+0x3f4>
    faf6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fafa:	ee26 6b04 	vmul.f64	d6, d6, d4
    fafe:	3001      	adds	r0, #1
    fb00:	ee07 0a90 	vmov	s15, r0
    fb04:	9b04      	ldr	r3, [sp, #16]
    fb06:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    fb0a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    fb0e:	eea6 7b05 	vfma.f64	d7, d6, d5
    fb12:	ee17 ca90 	vmov	ip, s15
    fb16:	ec51 0b17 	vmov	r0, r1, d7
    fb1a:	1e5e      	subs	r6, r3, #1
    fb1c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    fb20:	f7ff bb47 	b.w	f1b2 <_dtoa_r+0x2ca>
    fb24:	9b04      	ldr	r3, [sp, #16]
    fb26:	3301      	adds	r3, #1
    fb28:	9304      	str	r3, [sp, #16]
    fb2a:	2331      	movs	r3, #49	; 0x31
    fb2c:	f7ff bbb1 	b.w	f292 <_dtoa_r+0x3aa>
    fb30:	9b04      	ldr	r3, [sp, #16]
    fb32:	46bb      	mov	fp, r7
    fb34:	3301      	adds	r3, #1
    fb36:	9304      	str	r3, [sp, #16]
    fb38:	2339      	movs	r3, #57	; 0x39
    fb3a:	4637      	mov	r7, r6
    fb3c:	f80b 3b01 	strb.w	r3, [fp], #1
    fb40:	4646      	mov	r6, r8
    fb42:	e4e1      	b.n	f508 <_dtoa_r+0x620>
    fb44:	f04f 0a00 	mov.w	sl, #0
    fb48:	4656      	mov	r6, sl
    fb4a:	e653      	b.n	f7f4 <_dtoa_r+0x90c>
    fb4c:	9208      	str	r2, [sp, #32]
    fb4e:	e47b      	b.n	f448 <_dtoa_r+0x560>
    fb50:	1c73      	adds	r3, r6, #1
    fb52:	9304      	str	r3, [sp, #16]
    fb54:	4689      	mov	r9, r1
    fb56:	e4f7      	b.n	f548 <_dtoa_r+0x660>
    fb58:	f47f af22 	bne.w	f9a0 <_dtoa_r+0xab8>
    fb5c:	07da      	lsls	r2, r3, #31
    fb5e:	f57f af1f 	bpl.w	f9a0 <_dtoa_r+0xab8>
    fb62:	e718      	b.n	f996 <_dtoa_r+0xaae>
    fb64:	2b39      	cmp	r3, #57	; 0x39
    fb66:	d0e3      	beq.n	fb30 <_dtoa_r+0xc48>
    fb68:	f1b9 0f00 	cmp.w	r9, #0
    fb6c:	f73f af16 	bgt.w	f99c <_dtoa_r+0xab4>
    fb70:	e716      	b.n	f9a0 <_dtoa_r+0xab8>
    fb72:	9b01      	ldr	r3, [sp, #4]
    fb74:	2b02      	cmp	r3, #2
    fb76:	f73f ae28 	bgt.w	f7ca <_dtoa_r+0x8e2>
    fb7a:	9704      	str	r7, [sp, #16]
    fb7c:	e5ba      	b.n	f6f4 <_dtoa_r+0x80c>
    fb7e:	4601      	mov	r1, r0
    fb80:	e78d      	b.n	fa9e <_dtoa_r+0xbb6>
    fb82:	9b01      	ldr	r3, [sp, #4]
    fb84:	2b02      	cmp	r3, #2
    fb86:	f73f ae20 	bgt.w	f7ca <_dtoa_r+0x8e2>
    fb8a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    fb8e:	9704      	str	r7, [sp, #16]
    fb90:	e52b      	b.n	f5ea <_dtoa_r+0x702>
    fb92:	2002      	movs	r0, #2
    fb94:	f7ff baef 	b.w	f176 <_dtoa_r+0x28e>
    fb98:	4b0b      	ldr	r3, [pc, #44]	; (fbc8 <_dtoa_r+0xce0>)
    fb9a:	480c      	ldr	r0, [pc, #48]	; (fbcc <_dtoa_r+0xce4>)
    fb9c:	2200      	movs	r2, #0
    fb9e:	f240 11af 	movw	r1, #431	; 0x1af
    fba2:	f7ff f8b1 	bl	ed08 <__assert_func>
    fba6:	4b08      	ldr	r3, [pc, #32]	; (fbc8 <_dtoa_r+0xce0>)
    fba8:	4808      	ldr	r0, [pc, #32]	; (fbcc <_dtoa_r+0xce4>)
    fbaa:	463a      	mov	r2, r7
    fbac:	f240 21ef 	movw	r1, #751	; 0x2ef
    fbb0:	f7ff f8aa 	bl	ed08 <__assert_func>
    fbb4:	4b06      	ldr	r3, [pc, #24]	; (fbd0 <_dtoa_r+0xce8>)
    fbb6:	9300      	str	r3, [sp, #0]
    fbb8:	f7ff b9d2 	b.w	ef60 <_dtoa_r+0x78>
    fbbc:	9b02      	ldr	r3, [sp, #8]
    fbbe:	9308      	str	r3, [sp, #32]
    fbc0:	e4f7      	b.n	f5b2 <_dtoa_r+0x6ca>
    fbc2:	bf00      	nop
    fbc4:	200002a8 	.word	0x200002a8
    fbc8:	20000af8 	.word	0x20000af8
    fbcc:	20000ca4 	.word	0x20000ca4
    fbd0:	20000c94 	.word	0x20000c94

0000fbd4 <_wcrtomb_r>:
    fbd4:	b570      	push	{r4, r5, r6, lr}
    fbd6:	4605      	mov	r5, r0
    fbd8:	b084      	sub	sp, #16
    fbda:	b15b      	cbz	r3, fbf4 <_wcrtomb_r+0x20>
    fbdc:	461c      	mov	r4, r3
    fbde:	b169      	cbz	r1, fbfc <_wcrtomb_r+0x28>
    fbe0:	4b0e      	ldr	r3, [pc, #56]	; (fc1c <_wcrtomb_r+0x48>)
    fbe2:	4628      	mov	r0, r5
    fbe4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    fbe8:	4623      	mov	r3, r4
    fbea:	47b0      	blx	r6
    fbec:	1c43      	adds	r3, r0, #1
    fbee:	d00f      	beq.n	fc10 <_wcrtomb_r+0x3c>
    fbf0:	b004      	add	sp, #16
    fbf2:	bd70      	pop	{r4, r5, r6, pc}
    fbf4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    fbf8:	2900      	cmp	r1, #0
    fbfa:	d1f1      	bne.n	fbe0 <_wcrtomb_r+0xc>
    fbfc:	4a07      	ldr	r2, [pc, #28]	; (fc1c <_wcrtomb_r+0x48>)
    fbfe:	4623      	mov	r3, r4
    fc00:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    fc04:	4628      	mov	r0, r5
    fc06:	460a      	mov	r2, r1
    fc08:	a901      	add	r1, sp, #4
    fc0a:	47b0      	blx	r6
    fc0c:	1c43      	adds	r3, r0, #1
    fc0e:	d1ef      	bne.n	fbf0 <_wcrtomb_r+0x1c>
    fc10:	2200      	movs	r2, #0
    fc12:	238a      	movs	r3, #138	; 0x8a
    fc14:	6022      	str	r2, [r4, #0]
    fc16:	602b      	str	r3, [r5, #0]
    fc18:	b004      	add	sp, #16
    fc1a:	bd70      	pop	{r4, r5, r6, pc}
    fc1c:	2000442c 	.word	0x2000442c

0000fc20 <_wcsrtombs_r>:
    fc20:	b510      	push	{r4, lr}
    fc22:	b082      	sub	sp, #8
    fc24:	9c04      	ldr	r4, [sp, #16]
    fc26:	e9cd 3400 	strd	r3, r4, [sp]
    fc2a:	f04f 33ff 	mov.w	r3, #4294967295
    fc2e:	f001 fbc7 	bl	113c0 <_wcsnrtombs_r>
    fc32:	b002      	add	sp, #8
    fc34:	bd10      	pop	{r4, pc}
    fc36:	bf00      	nop

0000fc38 <fiprintf>:
    fc38:	b40e      	push	{r1, r2, r3}
    fc3a:	b510      	push	{r4, lr}
    fc3c:	b083      	sub	sp, #12
    fc3e:	ab05      	add	r3, sp, #20
    fc40:	4c06      	ldr	r4, [pc, #24]	; (fc5c <fiprintf+0x24>)
    fc42:	f853 2b04 	ldr.w	r2, [r3], #4
    fc46:	9301      	str	r3, [sp, #4]
    fc48:	4601      	mov	r1, r0
    fc4a:	6820      	ldr	r0, [r4, #0]
    fc4c:	f000 f8c4 	bl	fdd8 <_vfiprintf_r>
    fc50:	b003      	add	sp, #12
    fc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc56:	b003      	add	sp, #12
    fc58:	4770      	bx	lr
    fc5a:	bf00      	nop
    fc5c:	200049b4 	.word	0x200049b4

0000fc60 <__ssprint_r>:
    fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc64:	6893      	ldr	r3, [r2, #8]
    fc66:	6817      	ldr	r7, [r2, #0]
    fc68:	b083      	sub	sp, #12
    fc6a:	4692      	mov	sl, r2
    fc6c:	2b00      	cmp	r3, #0
    fc6e:	d070      	beq.n	fd52 <__ssprint_r+0xf2>
    fc70:	4681      	mov	r9, r0
    fc72:	688a      	ldr	r2, [r1, #8]
    fc74:	6808      	ldr	r0, [r1, #0]
    fc76:	460c      	mov	r4, r1
    fc78:	3708      	adds	r7, #8
    fc7a:	e043      	b.n	fd04 <__ssprint_r+0xa4>
    fc7c:	89a3      	ldrh	r3, [r4, #12]
    fc7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    fc82:	d02e      	beq.n	fce2 <__ssprint_r+0x82>
    fc84:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    fc88:	eba0 0801 	sub.w	r8, r0, r1
    fc8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fc90:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    fc94:	f108 0001 	add.w	r0, r8, #1
    fc98:	1076      	asrs	r6, r6, #1
    fc9a:	4428      	add	r0, r5
    fc9c:	42b0      	cmp	r0, r6
    fc9e:	4632      	mov	r2, r6
    fca0:	bf84      	itt	hi
    fca2:	4606      	movhi	r6, r0
    fca4:	4632      	movhi	r2, r6
    fca6:	055b      	lsls	r3, r3, #21
    fca8:	d537      	bpl.n	fd1a <__ssprint_r+0xba>
    fcaa:	4611      	mov	r1, r2
    fcac:	4648      	mov	r0, r9
    fcae:	f7fa ff3f 	bl	ab30 <_malloc_r>
    fcb2:	9001      	str	r0, [sp, #4]
    fcb4:	2800      	cmp	r0, #0
    fcb6:	d03a      	beq.n	fd2e <__ssprint_r+0xce>
    fcb8:	4642      	mov	r2, r8
    fcba:	6921      	ldr	r1, [r4, #16]
    fcbc:	f7f9 f972 	bl	8fa4 <memcpy>
    fcc0:	89a2      	ldrh	r2, [r4, #12]
    fcc2:	9b01      	ldr	r3, [sp, #4]
    fcc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    fcc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    fccc:	81a2      	strh	r2, [r4, #12]
    fcce:	eba6 0208 	sub.w	r2, r6, r8
    fcd2:	eb03 0008 	add.w	r0, r3, r8
    fcd6:	6166      	str	r6, [r4, #20]
    fcd8:	60a2      	str	r2, [r4, #8]
    fcda:	6123      	str	r3, [r4, #16]
    fcdc:	6020      	str	r0, [r4, #0]
    fcde:	462e      	mov	r6, r5
    fce0:	46a8      	mov	r8, r5
    fce2:	4642      	mov	r2, r8
    fce4:	4659      	mov	r1, fp
    fce6:	f7fb feef 	bl	bac8 <memmove>
    fcea:	f8da 3008 	ldr.w	r3, [sl, #8]
    fcee:	68a2      	ldr	r2, [r4, #8]
    fcf0:	6820      	ldr	r0, [r4, #0]
    fcf2:	1b92      	subs	r2, r2, r6
    fcf4:	4440      	add	r0, r8
    fcf6:	1b5b      	subs	r3, r3, r5
    fcf8:	60a2      	str	r2, [r4, #8]
    fcfa:	6020      	str	r0, [r4, #0]
    fcfc:	f8ca 3008 	str.w	r3, [sl, #8]
    fd00:	b33b      	cbz	r3, fd52 <__ssprint_r+0xf2>
    fd02:	3708      	adds	r7, #8
    fd04:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    fd08:	2d00      	cmp	r5, #0
    fd0a:	d0fa      	beq.n	fd02 <__ssprint_r+0xa2>
    fd0c:	42aa      	cmp	r2, r5
    fd0e:	4616      	mov	r6, r2
    fd10:	4690      	mov	r8, r2
    fd12:	d9b3      	bls.n	fc7c <__ssprint_r+0x1c>
    fd14:	462e      	mov	r6, r5
    fd16:	46a8      	mov	r8, r5
    fd18:	e7e3      	b.n	fce2 <__ssprint_r+0x82>
    fd1a:	4648      	mov	r0, r9
    fd1c:	f7fb f9d0 	bl	b0c0 <_realloc_r>
    fd20:	4603      	mov	r3, r0
    fd22:	2800      	cmp	r0, #0
    fd24:	d1d3      	bne.n	fcce <__ssprint_r+0x6e>
    fd26:	6921      	ldr	r1, [r4, #16]
    fd28:	4648      	mov	r0, r9
    fd2a:	f7fc fbab 	bl	c484 <_free_r>
    fd2e:	89a3      	ldrh	r3, [r4, #12]
    fd30:	220c      	movs	r2, #12
    fd32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd36:	f8c9 2000 	str.w	r2, [r9]
    fd3a:	f04f 30ff 	mov.w	r0, #4294967295
    fd3e:	81a3      	strh	r3, [r4, #12]
    fd40:	2200      	movs	r2, #0
    fd42:	2300      	movs	r3, #0
    fd44:	f8ca 2008 	str.w	r2, [sl, #8]
    fd48:	f8ca 3004 	str.w	r3, [sl, #4]
    fd4c:	b003      	add	sp, #12
    fd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd52:	2000      	movs	r0, #0
    fd54:	2300      	movs	r3, #0
    fd56:	f8ca 3004 	str.w	r3, [sl, #4]
    fd5a:	b003      	add	sp, #12
    fd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd60 <__sprint_r.part.0>:
    fd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    fd66:	049c      	lsls	r4, r3, #18
    fd68:	4690      	mov	r8, r2
    fd6a:	d52d      	bpl.n	fdc8 <__sprint_r.part.0+0x68>
    fd6c:	6893      	ldr	r3, [r2, #8]
    fd6e:	6812      	ldr	r2, [r2, #0]
    fd70:	b343      	cbz	r3, fdc4 <__sprint_r.part.0+0x64>
    fd72:	468b      	mov	fp, r1
    fd74:	4606      	mov	r6, r0
    fd76:	f102 0908 	add.w	r9, r2, #8
    fd7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    fd7e:	ea5f 079a 	movs.w	r7, sl, lsr #2
    fd82:	d015      	beq.n	fdb0 <__sprint_r.part.0+0x50>
    fd84:	3d04      	subs	r5, #4
    fd86:	2400      	movs	r4, #0
    fd88:	e001      	b.n	fd8e <__sprint_r.part.0+0x2e>
    fd8a:	42a7      	cmp	r7, r4
    fd8c:	d00e      	beq.n	fdac <__sprint_r.part.0+0x4c>
    fd8e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    fd92:	465a      	mov	r2, fp
    fd94:	4630      	mov	r0, r6
    fd96:	f001 fa5b 	bl	11250 <_fputwc_r>
    fd9a:	1c43      	adds	r3, r0, #1
    fd9c:	f104 0401 	add.w	r4, r4, #1
    fda0:	d1f3      	bne.n	fd8a <__sprint_r.part.0+0x2a>
    fda2:	2300      	movs	r3, #0
    fda4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fda8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdac:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fdb0:	f02a 0a03 	bic.w	sl, sl, #3
    fdb4:	eba3 030a 	sub.w	r3, r3, sl
    fdb8:	f8c8 3008 	str.w	r3, [r8, #8]
    fdbc:	f109 0908 	add.w	r9, r9, #8
    fdc0:	2b00      	cmp	r3, #0
    fdc2:	d1da      	bne.n	fd7a <__sprint_r.part.0+0x1a>
    fdc4:	2000      	movs	r0, #0
    fdc6:	e7ec      	b.n	fda2 <__sprint_r.part.0+0x42>
    fdc8:	f001 f80c 	bl	10de4 <__sfvwrite_r>
    fdcc:	2300      	movs	r3, #0
    fdce:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fdd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdd6:	bf00      	nop

0000fdd8 <_vfiprintf_r>:
    fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fddc:	ed2d 8b02 	vpush	{d8}
    fde0:	b0c5      	sub	sp, #276	; 0x114
    fde2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    fde6:	4683      	mov	fp, r0
    fde8:	ee08 1a10 	vmov	s16, r1
    fdec:	4616      	mov	r6, r2
    fdee:	2100      	movs	r1, #0
    fdf0:	2208      	movs	r2, #8
    fdf2:	4650      	mov	r0, sl
    fdf4:	461c      	mov	r4, r3
    fdf6:	9307      	str	r3, [sp, #28]
    fdf8:	f7fb fee2 	bl	bbc0 <memset>
    fdfc:	f1bb 0f00 	cmp.w	fp, #0
    fe00:	d004      	beq.n	fe0c <_vfiprintf_r+0x34>
    fe02:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    fe06:	2b00      	cmp	r3, #0
    fe08:	f000 86a0 	beq.w	10b4c <_vfiprintf_r+0xd74>
    fe0c:	ee18 2a10 	vmov	r2, s16
    fe10:	6e53      	ldr	r3, [r2, #100]	; 0x64
    fe12:	07db      	lsls	r3, r3, #31
    fe14:	f140 8513 	bpl.w	1083e <_vfiprintf_r+0xa66>
    fe18:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    fe1c:	b28a      	uxth	r2, r1
    fe1e:	0495      	lsls	r5, r2, #18
    fe20:	d40b      	bmi.n	fe3a <_vfiprintf_r+0x62>
    fe22:	ee18 3a10 	vmov	r3, s16
    fe26:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    fe2a:	8199      	strh	r1, [r3, #12]
    fe2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fe2e:	b28a      	uxth	r2, r1
    fe30:	ee18 1a10 	vmov	r1, s16
    fe34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    fe38:	664b      	str	r3, [r1, #100]	; 0x64
    fe3a:	0710      	lsls	r0, r2, #28
    fe3c:	f140 8105 	bpl.w	1004a <_vfiprintf_r+0x272>
    fe40:	ee18 3a10 	vmov	r3, s16
    fe44:	691b      	ldr	r3, [r3, #16]
    fe46:	2b00      	cmp	r3, #0
    fe48:	f000 80ff 	beq.w	1004a <_vfiprintf_r+0x272>
    fe4c:	f002 031a 	and.w	r3, r2, #26
    fe50:	2b0a      	cmp	r3, #10
    fe52:	f000 810a 	beq.w	1006a <_vfiprintf_r+0x292>
    fe56:	2300      	movs	r3, #0
    fe58:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    fe5c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    fe60:	aa1b      	add	r2, sp, #108	; 0x6c
    fe62:	930c      	str	r3, [sp, #48]	; 0x30
    fe64:	9218      	str	r2, [sp, #96]	; 0x60
    fe66:	4691      	mov	r9, r2
    fe68:	930b      	str	r3, [sp, #44]	; 0x2c
    fe6a:	9305      	str	r3, [sp, #20]
    fe6c:	46b0      	mov	r8, r6
    fe6e:	4644      	mov	r4, r8
    fe70:	4ba8      	ldr	r3, [pc, #672]	; (10114 <_vfiprintf_r+0x33c>)
    fe72:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    fe76:	f7fb ff8d 	bl	bd94 <__locale_mb_cur_max>
    fe7a:	4622      	mov	r2, r4
    fe7c:	4603      	mov	r3, r0
    fe7e:	a912      	add	r1, sp, #72	; 0x48
    fe80:	f8cd a000 	str.w	sl, [sp]
    fe84:	4658      	mov	r0, fp
    fe86:	47a8      	blx	r5
    fe88:	2800      	cmp	r0, #0
    fe8a:	f000 8145 	beq.w	10118 <_vfiprintf_r+0x340>
    fe8e:	f2c0 8139 	blt.w	10104 <_vfiprintf_r+0x32c>
    fe92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fe94:	2a25      	cmp	r2, #37	; 0x25
    fe96:	4603      	mov	r3, r0
    fe98:	d001      	beq.n	fe9e <_vfiprintf_r+0xc6>
    fe9a:	441c      	add	r4, r3
    fe9c:	e7e8      	b.n	fe70 <_vfiprintf_r+0x98>
    fe9e:	ebb4 0608 	subs.w	r6, r4, r8
    fea2:	4605      	mov	r5, r0
    fea4:	f040 813c 	bne.w	10120 <_vfiprintf_r+0x348>
    fea8:	2300      	movs	r3, #0
    feaa:	7861      	ldrb	r1, [r4, #1]
    feac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    feb0:	f104 0801 	add.w	r8, r4, #1
    feb4:	9306      	str	r3, [sp, #24]
    feb6:	f04f 37ff 	mov.w	r7, #4294967295
    feba:	461e      	mov	r6, r3
    febc:	242b      	movs	r4, #43	; 0x2b
    febe:	f108 0801 	add.w	r8, r8, #1
    fec2:	f1a1 0320 	sub.w	r3, r1, #32
    fec6:	2b5a      	cmp	r3, #90	; 0x5a
    fec8:	f200 8178 	bhi.w	101bc <_vfiprintf_r+0x3e4>
    fecc:	e8df f013 	tbh	[pc, r3, lsl #1]
    fed0:	017602b5 	.word	0x017602b5
    fed4:	02b00176 	.word	0x02b00176
    fed8:	01760176 	.word	0x01760176
    fedc:	006a0176 	.word	0x006a0176
    fee0:	01760176 	.word	0x01760176
    fee4:	028d027d 	.word	0x028d027d
    fee8:	02880176 	.word	0x02880176
    feec:	01760297 	.word	0x01760297
    fef0:	005b0292 	.word	0x005b0292
    fef4:	005b005b 	.word	0x005b005b
    fef8:	005b005b 	.word	0x005b005b
    fefc:	005b005b 	.word	0x005b005b
    ff00:	005b005b 	.word	0x005b005b
    ff04:	01760176 	.word	0x01760176
    ff08:	01760176 	.word	0x01760176
    ff0c:	01760176 	.word	0x01760176
    ff10:	01760176 	.word	0x01760176
    ff14:	025c0176 	.word	0x025c0176
    ff18:	01760084 	.word	0x01760084
    ff1c:	01760176 	.word	0x01760176
    ff20:	01760176 	.word	0x01760176
    ff24:	01760176 	.word	0x01760176
    ff28:	01760176 	.word	0x01760176
    ff2c:	00e80176 	.word	0x00e80176
    ff30:	01760176 	.word	0x01760176
    ff34:	02330176 	.word	0x02330176
    ff38:	02da0176 	.word	0x02da0176
    ff3c:	01760176 	.word	0x01760176
    ff40:	0176058b 	.word	0x0176058b
    ff44:	01760176 	.word	0x01760176
    ff48:	01760176 	.word	0x01760176
    ff4c:	01760176 	.word	0x01760176
    ff50:	01760176 	.word	0x01760176
    ff54:	025c0176 	.word	0x025c0176
    ff58:	01760086 	.word	0x01760086
    ff5c:	01760176 	.word	0x01760176
    ff60:	008602cd 	.word	0x008602cd
    ff64:	0176007f 	.word	0x0176007f
    ff68:	017602c0 	.word	0x017602c0
    ff6c:	00ea02fd 	.word	0x00ea02fd
    ff70:	007f02ed 	.word	0x007f02ed
    ff74:	02330176 	.word	0x02330176
    ff78:	0569007c 	.word	0x0569007c
    ff7c:	01760176 	.word	0x01760176
    ff80:	0176056b 	.word	0x0176056b
    ff84:	007c      	.short	0x007c
    ff86:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ff8a:	2200      	movs	r2, #0
    ff8c:	f818 1b01 	ldrb.w	r1, [r8], #1
    ff90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ff94:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ff98:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ff9c:	2b09      	cmp	r3, #9
    ff9e:	d9f5      	bls.n	ff8c <_vfiprintf_r+0x1b4>
    ffa0:	9206      	str	r2, [sp, #24]
    ffa2:	e78e      	b.n	fec2 <_vfiprintf_r+0xea>
    ffa4:	4658      	mov	r0, fp
    ffa6:	f7fe fe1b 	bl	ebe0 <_localeconv_r>
    ffaa:	6843      	ldr	r3, [r0, #4]
    ffac:	930d      	str	r3, [sp, #52]	; 0x34
    ffae:	4618      	mov	r0, r3
    ffb0:	f7fc f966 	bl	c280 <strlen>
    ffb4:	900e      	str	r0, [sp, #56]	; 0x38
    ffb6:	4605      	mov	r5, r0
    ffb8:	4658      	mov	r0, fp
    ffba:	f7fe fe11 	bl	ebe0 <_localeconv_r>
    ffbe:	6883      	ldr	r3, [r0, #8]
    ffc0:	930b      	str	r3, [sp, #44]	; 0x2c
    ffc2:	2d00      	cmp	r5, #0
    ffc4:	f040 84d6 	bne.w	10974 <_vfiprintf_r+0xb9c>
    ffc8:	f898 1000 	ldrb.w	r1, [r8]
    ffcc:	e777      	b.n	febe <_vfiprintf_r+0xe6>
    ffce:	f898 1000 	ldrb.w	r1, [r8]
    ffd2:	f046 0620 	orr.w	r6, r6, #32
    ffd6:	e772      	b.n	febe <_vfiprintf_r+0xe6>
    ffd8:	f046 0610 	orr.w	r6, r6, #16
    ffdc:	06b4      	lsls	r4, r6, #26
    ffde:	f140 818e 	bpl.w	102fe <_vfiprintf_r+0x526>
    ffe2:	9b07      	ldr	r3, [sp, #28]
    ffe4:	3307      	adds	r3, #7
    ffe6:	f023 0307 	bic.w	r3, r3, #7
    ffea:	461a      	mov	r2, r3
    ffec:	6859      	ldr	r1, [r3, #4]
    ffee:	f852 3b08 	ldr.w	r3, [r2], #8
    fff2:	9207      	str	r2, [sp, #28]
    fff4:	460a      	mov	r2, r1
    fff6:	2900      	cmp	r1, #0
    fff8:	f2c0 8470 	blt.w	108dc <_vfiprintf_r+0xb04>
    fffc:	1c79      	adds	r1, r7, #1
    fffe:	f000 85a2 	beq.w	10b46 <_vfiprintf_r+0xd6e>
   10002:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   10006:	9103      	str	r1, [sp, #12]
   10008:	ea53 0102 	orrs.w	r1, r3, r2
   1000c:	f000 843f 	beq.w	1088e <_vfiprintf_r+0xab6>
   10010:	2b0a      	cmp	r3, #10
   10012:	f172 0100 	sbcs.w	r1, r2, #0
   10016:	f080 8541 	bcs.w	10a9c <_vfiprintf_r+0xcc4>
   1001a:	3330      	adds	r3, #48	; 0x30
   1001c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   10020:	9e03      	ldr	r6, [sp, #12]
   10022:	2301      	movs	r3, #1
   10024:	9304      	str	r3, [sp, #16]
   10026:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1002a:	9b04      	ldr	r3, [sp, #16]
   1002c:	42bb      	cmp	r3, r7
   1002e:	bfb8      	it	lt
   10030:	463b      	movlt	r3, r7
   10032:	9303      	str	r3, [sp, #12]
   10034:	2300      	movs	r3, #0
   10036:	9308      	str	r3, [sp, #32]
   10038:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1003c:	2b00      	cmp	r3, #0
   1003e:	f000 80cb 	beq.w	101d8 <_vfiprintf_r+0x400>
   10042:	9b03      	ldr	r3, [sp, #12]
   10044:	3301      	adds	r3, #1
   10046:	9303      	str	r3, [sp, #12]
   10048:	e0c6      	b.n	101d8 <_vfiprintf_r+0x400>
   1004a:	ee18 1a10 	vmov	r1, s16
   1004e:	4658      	mov	r0, fp
   10050:	ee18 5a10 	vmov	r5, s16
   10054:	f001 f840 	bl	110d8 <__swsetup_r>
   10058:	2800      	cmp	r0, #0
   1005a:	f040 8652 	bne.w	10d02 <_vfiprintf_r+0xf2a>
   1005e:	89aa      	ldrh	r2, [r5, #12]
   10060:	f002 031a 	and.w	r3, r2, #26
   10064:	2b0a      	cmp	r3, #10
   10066:	f47f aef6 	bne.w	fe56 <_vfiprintf_r+0x7e>
   1006a:	ee18 1a10 	vmov	r1, s16
   1006e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   10072:	2b00      	cmp	r3, #0
   10074:	f6ff aeef 	blt.w	fe56 <_vfiprintf_r+0x7e>
   10078:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1007a:	07db      	lsls	r3, r3, #31
   1007c:	d402      	bmi.n	10084 <_vfiprintf_r+0x2ac>
   1007e:	0597      	lsls	r7, r2, #22
   10080:	f140 8612 	bpl.w	10ca8 <_vfiprintf_r+0xed0>
   10084:	ee18 1a10 	vmov	r1, s16
   10088:	4623      	mov	r3, r4
   1008a:	4632      	mov	r2, r6
   1008c:	4658      	mov	r0, fp
   1008e:	f000 fe69 	bl	10d64 <__sbprintf>
   10092:	9005      	str	r0, [sp, #20]
   10094:	9805      	ldr	r0, [sp, #20]
   10096:	b045      	add	sp, #276	; 0x114
   10098:	ecbd 8b02 	vpop	{d8}
   1009c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100a0:	f046 0610 	orr.w	r6, r6, #16
   100a4:	f016 0220 	ands.w	r2, r6, #32
   100a8:	f000 8136 	beq.w	10318 <_vfiprintf_r+0x540>
   100ac:	9b07      	ldr	r3, [sp, #28]
   100ae:	3307      	adds	r3, #7
   100b0:	f023 0307 	bic.w	r3, r3, #7
   100b4:	4619      	mov	r1, r3
   100b6:	685a      	ldr	r2, [r3, #4]
   100b8:	f851 3b08 	ldr.w	r3, [r1], #8
   100bc:	9107      	str	r1, [sp, #28]
   100be:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   100c2:	9103      	str	r1, [sp, #12]
   100c4:	2100      	movs	r1, #0
   100c6:	2000      	movs	r0, #0
   100c8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   100cc:	1c78      	adds	r0, r7, #1
   100ce:	f000 8210 	beq.w	104f2 <_vfiprintf_r+0x71a>
   100d2:	9803      	ldr	r0, [sp, #12]
   100d4:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   100d8:	ea53 0002 	orrs.w	r0, r3, r2
   100dc:	f040 8208 	bne.w	104f0 <_vfiprintf_r+0x718>
   100e0:	2f00      	cmp	r7, #0
   100e2:	f040 8538 	bne.w	10b56 <_vfiprintf_r+0xd7e>
   100e6:	2900      	cmp	r1, #0
   100e8:	f040 83d5 	bne.w	10896 <_vfiprintf_r+0xabe>
   100ec:	9b03      	ldr	r3, [sp, #12]
   100ee:	f013 0301 	ands.w	r3, r3, #1
   100f2:	9304      	str	r3, [sp, #16]
   100f4:	f000 8411 	beq.w	1091a <_vfiprintf_r+0xb42>
   100f8:	2330      	movs	r3, #48	; 0x30
   100fa:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   100fe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   10102:	e792      	b.n	1002a <_vfiprintf_r+0x252>
   10104:	2208      	movs	r2, #8
   10106:	2100      	movs	r1, #0
   10108:	4650      	mov	r0, sl
   1010a:	f7fb fd59 	bl	bbc0 <memset>
   1010e:	2301      	movs	r3, #1
   10110:	441c      	add	r4, r3
   10112:	e6ad      	b.n	fe70 <_vfiprintf_r+0x98>
   10114:	2000442c 	.word	0x2000442c
   10118:	ebb4 0608 	subs.w	r6, r4, r8
   1011c:	4605      	mov	r5, r0
   1011e:	d01b      	beq.n	10158 <_vfiprintf_r+0x380>
   10120:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   10124:	3301      	adds	r3, #1
   10126:	4432      	add	r2, r6
   10128:	2b07      	cmp	r3, #7
   1012a:	e9c9 8600 	strd	r8, r6, [r9]
   1012e:	921a      	str	r2, [sp, #104]	; 0x68
   10130:	9319      	str	r3, [sp, #100]	; 0x64
   10132:	dd1c      	ble.n	1016e <_vfiprintf_r+0x396>
   10134:	2a00      	cmp	r2, #0
   10136:	f000 83a6 	beq.w	10886 <_vfiprintf_r+0xaae>
   1013a:	ee18 1a10 	vmov	r1, s16
   1013e:	aa18      	add	r2, sp, #96	; 0x60
   10140:	4658      	mov	r0, fp
   10142:	f7ff fe0d 	bl	fd60 <__sprint_r.part.0>
   10146:	bb20      	cbnz	r0, 10192 <_vfiprintf_r+0x3ba>
   10148:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1014c:	9b05      	ldr	r3, [sp, #20]
   1014e:	4433      	add	r3, r6
   10150:	9305      	str	r3, [sp, #20]
   10152:	2d00      	cmp	r5, #0
   10154:	f47f aea8 	bne.w	fea8 <_vfiprintf_r+0xd0>
   10158:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1015a:	2b00      	cmp	r3, #0
   1015c:	f040 85c1 	bne.w	10ce2 <_vfiprintf_r+0xf0a>
   10160:	ee18 3a10 	vmov	r3, s16
   10164:	2200      	movs	r2, #0
   10166:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1016a:	9219      	str	r2, [sp, #100]	; 0x64
   1016c:	e015      	b.n	1019a <_vfiprintf_r+0x3c2>
   1016e:	f109 0908 	add.w	r9, r9, #8
   10172:	e7eb      	b.n	1014c <_vfiprintf_r+0x374>
   10174:	ee18 1a10 	vmov	r1, s16
   10178:	aa18      	add	r2, sp, #96	; 0x60
   1017a:	4658      	mov	r0, fp
   1017c:	f7ff fdf0 	bl	fd60 <__sprint_r.part.0>
   10180:	2800      	cmp	r0, #0
   10182:	f000 80a6 	beq.w	102d2 <_vfiprintf_r+0x4fa>
   10186:	9b08      	ldr	r3, [sp, #32]
   10188:	b11b      	cbz	r3, 10192 <_vfiprintf_r+0x3ba>
   1018a:	9908      	ldr	r1, [sp, #32]
   1018c:	4658      	mov	r0, fp
   1018e:	f7fc f979 	bl	c484 <_free_r>
   10192:	ee18 3a10 	vmov	r3, s16
   10196:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1019a:	ee18 2a10 	vmov	r2, s16
   1019e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   101a0:	f012 0f01 	tst.w	r2, #1
   101a4:	b29a      	uxth	r2, r3
   101a6:	f000 80a0 	beq.w	102ea <_vfiprintf_r+0x512>
   101aa:	0650      	lsls	r0, r2, #25
   101ac:	f100 85b2 	bmi.w	10d14 <_vfiprintf_r+0xf3c>
   101b0:	9805      	ldr	r0, [sp, #20]
   101b2:	b045      	add	sp, #276	; 0x114
   101b4:	ecbd 8b02 	vpop	{d8}
   101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101bc:	2900      	cmp	r1, #0
   101be:	d0cb      	beq.n	10158 <_vfiprintf_r+0x380>
   101c0:	2300      	movs	r3, #0
   101c2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   101c6:	2301      	movs	r3, #1
   101c8:	e9cd 3303 	strd	r3, r3, [sp, #12]
   101cc:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   101d0:	ac2b      	add	r4, sp, #172	; 0xac
   101d2:	2300      	movs	r3, #0
   101d4:	9308      	str	r3, [sp, #32]
   101d6:	461f      	mov	r7, r3
   101d8:	f016 0302 	ands.w	r3, r6, #2
   101dc:	9309      	str	r3, [sp, #36]	; 0x24
   101de:	d002      	beq.n	101e6 <_vfiprintf_r+0x40e>
   101e0:	9b03      	ldr	r3, [sp, #12]
   101e2:	3302      	adds	r3, #2
   101e4:	9303      	str	r3, [sp, #12]
   101e6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   101ea:	930a      	str	r3, [sp, #40]	; 0x28
   101ec:	d105      	bne.n	101fa <_vfiprintf_r+0x422>
   101ee:	9b06      	ldr	r3, [sp, #24]
   101f0:	9a03      	ldr	r2, [sp, #12]
   101f2:	1a9d      	subs	r5, r3, r2
   101f4:	2d00      	cmp	r5, #0
   101f6:	f300 827b 	bgt.w	106f0 <_vfiprintf_r+0x918>
   101fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   101fe:	1c41      	adds	r1, r0, #1
   10200:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10204:	b182      	cbz	r2, 10228 <_vfiprintf_r+0x450>
   10206:	2201      	movs	r2, #1
   10208:	3301      	adds	r3, #1
   1020a:	f8c9 2004 	str.w	r2, [r9, #4]
   1020e:	2907      	cmp	r1, #7
   10210:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   10214:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10218:	f8c9 2000 	str.w	r2, [r9]
   1021c:	f300 824a 	bgt.w	106b4 <_vfiprintf_r+0x8dc>
   10220:	4608      	mov	r0, r1
   10222:	f109 0908 	add.w	r9, r9, #8
   10226:	3101      	adds	r1, #1
   10228:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1022a:	b1e2      	cbz	r2, 10266 <_vfiprintf_r+0x48e>
   1022c:	aa11      	add	r2, sp, #68	; 0x44
   1022e:	3302      	adds	r3, #2
   10230:	f8c9 2000 	str.w	r2, [r9]
   10234:	2907      	cmp	r1, #7
   10236:	f04f 0202 	mov.w	r2, #2
   1023a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1023e:	f8c9 2004 	str.w	r2, [r9, #4]
   10242:	f340 8250 	ble.w	106e6 <_vfiprintf_r+0x90e>
   10246:	2b00      	cmp	r3, #0
   10248:	f000 8343 	beq.w	108d2 <_vfiprintf_r+0xafa>
   1024c:	ee18 1a10 	vmov	r1, s16
   10250:	aa18      	add	r2, sp, #96	; 0x60
   10252:	4658      	mov	r0, fp
   10254:	f7ff fd84 	bl	fd60 <__sprint_r.part.0>
   10258:	2800      	cmp	r0, #0
   1025a:	d194      	bne.n	10186 <_vfiprintf_r+0x3ae>
   1025c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10260:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10264:	1c41      	adds	r1, r0, #1
   10266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10268:	2a80      	cmp	r2, #128	; 0x80
   1026a:	f000 8184 	beq.w	10576 <_vfiprintf_r+0x79e>
   1026e:	9a04      	ldr	r2, [sp, #16]
   10270:	1abd      	subs	r5, r7, r2
   10272:	2d00      	cmp	r5, #0
   10274:	f300 81d7 	bgt.w	10626 <_vfiprintf_r+0x84e>
   10278:	9a04      	ldr	r2, [sp, #16]
   1027a:	f8c9 4000 	str.w	r4, [r9]
   1027e:	4413      	add	r3, r2
   10280:	2907      	cmp	r1, #7
   10282:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10286:	f8c9 2004 	str.w	r2, [r9, #4]
   1028a:	f340 816e 	ble.w	1056a <_vfiprintf_r+0x792>
   1028e:	2b00      	cmp	r3, #0
   10290:	f000 8275 	beq.w	1077e <_vfiprintf_r+0x9a6>
   10294:	ee18 1a10 	vmov	r1, s16
   10298:	aa18      	add	r2, sp, #96	; 0x60
   1029a:	4658      	mov	r0, fp
   1029c:	f7ff fd60 	bl	fd60 <__sprint_r.part.0>
   102a0:	2800      	cmp	r0, #0
   102a2:	f47f af70 	bne.w	10186 <_vfiprintf_r+0x3ae>
   102a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   102a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102ac:	0775      	lsls	r5, r6, #29
   102ae:	d505      	bpl.n	102bc <_vfiprintf_r+0x4e4>
   102b0:	9a06      	ldr	r2, [sp, #24]
   102b2:	9903      	ldr	r1, [sp, #12]
   102b4:	1a54      	subs	r4, r2, r1
   102b6:	2c00      	cmp	r4, #0
   102b8:	f300 826b 	bgt.w	10792 <_vfiprintf_r+0x9ba>
   102bc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   102c0:	9803      	ldr	r0, [sp, #12]
   102c2:	4281      	cmp	r1, r0
   102c4:	bfac      	ite	ge
   102c6:	1852      	addge	r2, r2, r1
   102c8:	1812      	addlt	r2, r2, r0
   102ca:	9205      	str	r2, [sp, #20]
   102cc:	2b00      	cmp	r3, #0
   102ce:	f47f af51 	bne.w	10174 <_vfiprintf_r+0x39c>
   102d2:	9908      	ldr	r1, [sp, #32]
   102d4:	2300      	movs	r3, #0
   102d6:	9319      	str	r3, [sp, #100]	; 0x64
   102d8:	2900      	cmp	r1, #0
   102da:	f000 8149 	beq.w	10570 <_vfiprintf_r+0x798>
   102de:	4658      	mov	r0, fp
   102e0:	f7fc f8d0 	bl	c484 <_free_r>
   102e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102e8:	e5c1      	b.n	fe6e <_vfiprintf_r+0x96>
   102ea:	059c      	lsls	r4, r3, #22
   102ec:	f53f af5d 	bmi.w	101aa <_vfiprintf_r+0x3d2>
   102f0:	ee18 4a10 	vmov	r4, s16
   102f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   102f6:	f7fb fde9 	bl	becc <__retarget_lock_release_recursive>
   102fa:	89a2      	ldrh	r2, [r4, #12]
   102fc:	e755      	b.n	101aa <_vfiprintf_r+0x3d2>
   102fe:	06f0      	lsls	r0, r6, #27
   10300:	9a07      	ldr	r2, [sp, #28]
   10302:	f100 831f 	bmi.w	10944 <_vfiprintf_r+0xb6c>
   10306:	0671      	lsls	r1, r6, #25
   10308:	f140 8319 	bpl.w	1093e <_vfiprintf_r+0xb66>
   1030c:	f932 3b04 	ldrsh.w	r3, [r2], #4
   10310:	9207      	str	r2, [sp, #28]
   10312:	17da      	asrs	r2, r3, #31
   10314:	4611      	mov	r1, r2
   10316:	e66e      	b.n	fff6 <_vfiprintf_r+0x21e>
   10318:	f016 0310 	ands.w	r3, r6, #16
   1031c:	9907      	ldr	r1, [sp, #28]
   1031e:	f040 8309 	bne.w	10934 <_vfiprintf_r+0xb5c>
   10322:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   10326:	f000 8301 	beq.w	1092c <_vfiprintf_r+0xb54>
   1032a:	461a      	mov	r2, r3
   1032c:	f851 3b04 	ldr.w	r3, [r1], #4
   10330:	9107      	str	r1, [sp, #28]
   10332:	b29b      	uxth	r3, r3
   10334:	e6c3      	b.n	100be <_vfiprintf_r+0x2e6>
   10336:	9b07      	ldr	r3, [sp, #28]
   10338:	461a      	mov	r2, r3
   1033a:	2300      	movs	r3, #0
   1033c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10340:	4613      	mov	r3, r2
   10342:	f853 4b04 	ldr.w	r4, [r3], #4
   10346:	9303      	str	r3, [sp, #12]
   10348:	2c00      	cmp	r4, #0
   1034a:	f000 8412 	beq.w	10b72 <_vfiprintf_r+0xd9a>
   1034e:	2953      	cmp	r1, #83	; 0x53
   10350:	f000 8365 	beq.w	10a1e <_vfiprintf_r+0xc46>
   10354:	f016 0510 	ands.w	r5, r6, #16
   10358:	f040 8361 	bne.w	10a1e <_vfiprintf_r+0xc46>
   1035c:	1c7b      	adds	r3, r7, #1
   1035e:	f000 84b3 	beq.w	10cc8 <_vfiprintf_r+0xef0>
   10362:	463a      	mov	r2, r7
   10364:	4629      	mov	r1, r5
   10366:	4620      	mov	r0, r4
   10368:	f7fe fc42 	bl	ebf0 <memchr>
   1036c:	9008      	str	r0, [sp, #32]
   1036e:	2800      	cmp	r0, #0
   10370:	f000 849f 	beq.w	10cb2 <_vfiprintf_r+0xeda>
   10374:	1b03      	subs	r3, r0, r4
   10376:	9a03      	ldr	r2, [sp, #12]
   10378:	9304      	str	r3, [sp, #16]
   1037a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1037e:	462f      	mov	r7, r5
   10380:	9207      	str	r2, [sp, #28]
   10382:	9303      	str	r3, [sp, #12]
   10384:	9508      	str	r5, [sp, #32]
   10386:	e657      	b.n	10038 <_vfiprintf_r+0x260>
   10388:	2943      	cmp	r1, #67	; 0x43
   1038a:	d002      	beq.n	10392 <_vfiprintf_r+0x5ba>
   1038c:	06f5      	lsls	r5, r6, #27
   1038e:	f140 832d 	bpl.w	109ec <_vfiprintf_r+0xc14>
   10392:	9d07      	ldr	r5, [sp, #28]
   10394:	2208      	movs	r2, #8
   10396:	2100      	movs	r1, #0
   10398:	a816      	add	r0, sp, #88	; 0x58
   1039a:	ac2b      	add	r4, sp, #172	; 0xac
   1039c:	f7fb fc10 	bl	bbc0 <memset>
   103a0:	ab16      	add	r3, sp, #88	; 0x58
   103a2:	f855 2b04 	ldr.w	r2, [r5], #4
   103a6:	4621      	mov	r1, r4
   103a8:	4658      	mov	r0, fp
   103aa:	f7ff fc13 	bl	fbd4 <_wcrtomb_r>
   103ae:	4603      	mov	r3, r0
   103b0:	3301      	adds	r3, #1
   103b2:	9004      	str	r0, [sp, #16]
   103b4:	f000 84b3 	beq.w	10d1e <_vfiprintf_r+0xf46>
   103b8:	9b04      	ldr	r3, [sp, #16]
   103ba:	9507      	str	r5, [sp, #28]
   103bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103c0:	9303      	str	r3, [sp, #12]
   103c2:	2300      	movs	r3, #0
   103c4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   103c8:	e703      	b.n	101d2 <_vfiprintf_r+0x3fa>
   103ca:	9b07      	ldr	r3, [sp, #28]
   103cc:	f853 2b04 	ldr.w	r2, [r3], #4
   103d0:	9206      	str	r2, [sp, #24]
   103d2:	2a00      	cmp	r2, #0
   103d4:	f280 829c 	bge.w	10910 <_vfiprintf_r+0xb38>
   103d8:	9a06      	ldr	r2, [sp, #24]
   103da:	4252      	negs	r2, r2
   103dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   103e0:	f898 1000 	ldrb.w	r1, [r8]
   103e4:	f046 0604 	orr.w	r6, r6, #4
   103e8:	e569      	b.n	febe <_vfiprintf_r+0xe6>
   103ea:	f898 1000 	ldrb.w	r1, [r8]
   103ee:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   103f2:	e564      	b.n	febe <_vfiprintf_r+0xe6>
   103f4:	f898 1000 	ldrb.w	r1, [r8]
   103f8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   103fc:	e55f      	b.n	febe <_vfiprintf_r+0xe6>
   103fe:	4642      	mov	r2, r8
   10400:	f812 1b01 	ldrb.w	r1, [r2], #1
   10404:	292a      	cmp	r1, #42	; 0x2a
   10406:	f000 8496 	beq.w	10d36 <_vfiprintf_r+0xf5e>
   1040a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1040e:	2b09      	cmp	r3, #9
   10410:	4690      	mov	r8, r2
   10412:	f04f 0700 	mov.w	r7, #0
   10416:	f63f ad54 	bhi.w	fec2 <_vfiprintf_r+0xea>
   1041a:	f818 1b01 	ldrb.w	r1, [r8], #1
   1041e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   10422:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   10426:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1042a:	2b09      	cmp	r3, #9
   1042c:	d9f5      	bls.n	1041a <_vfiprintf_r+0x642>
   1042e:	e548      	b.n	fec2 <_vfiprintf_r+0xea>
   10430:	f898 1000 	ldrb.w	r1, [r8]
   10434:	f046 0601 	orr.w	r6, r6, #1
   10438:	e541      	b.n	febe <_vfiprintf_r+0xe6>
   1043a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1043e:	2b00      	cmp	r3, #0
   10440:	f47f adc2 	bne.w	ffc8 <_vfiprintf_r+0x1f0>
   10444:	2320      	movs	r3, #32
   10446:	f898 1000 	ldrb.w	r1, [r8]
   1044a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1044e:	e536      	b.n	febe <_vfiprintf_r+0xe6>
   10450:	f898 1000 	ldrb.w	r1, [r8]
   10454:	296c      	cmp	r1, #108	; 0x6c
   10456:	bf03      	ittte	eq
   10458:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1045c:	f046 0620 	orreq.w	r6, r6, #32
   10460:	f108 0801 	addeq.w	r8, r8, #1
   10464:	f046 0610 	orrne.w	r6, r6, #16
   10468:	e529      	b.n	febe <_vfiprintf_r+0xe6>
   1046a:	f898 1000 	ldrb.w	r1, [r8]
   1046e:	2968      	cmp	r1, #104	; 0x68
   10470:	bf03      	ittte	eq
   10472:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   10476:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   1047a:	f108 0801 	addeq.w	r8, r8, #1
   1047e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   10482:	e51c      	b.n	febe <_vfiprintf_r+0xe6>
   10484:	f046 0310 	orr.w	r3, r6, #16
   10488:	9303      	str	r3, [sp, #12]
   1048a:	9b03      	ldr	r3, [sp, #12]
   1048c:	f013 0220 	ands.w	r2, r3, #32
   10490:	f000 8206 	beq.w	108a0 <_vfiprintf_r+0xac8>
   10494:	9b07      	ldr	r3, [sp, #28]
   10496:	3307      	adds	r3, #7
   10498:	f023 0307 	bic.w	r3, r3, #7
   1049c:	4619      	mov	r1, r3
   1049e:	685a      	ldr	r2, [r3, #4]
   104a0:	f851 3b08 	ldr.w	r3, [r1], #8
   104a4:	9107      	str	r1, [sp, #28]
   104a6:	2101      	movs	r1, #1
   104a8:	e60d      	b.n	100c6 <_vfiprintf_r+0x2ee>
   104aa:	9a07      	ldr	r2, [sp, #28]
   104ac:	f046 0302 	orr.w	r3, r6, #2
   104b0:	9303      	str	r3, [sp, #12]
   104b2:	f852 3b04 	ldr.w	r3, [r2], #4
   104b6:	9207      	str	r2, [sp, #28]
   104b8:	f647 0230 	movw	r2, #30768	; 0x7830
   104bc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   104c0:	4ab8      	ldr	r2, [pc, #736]	; (107a4 <_vfiprintf_r+0x9cc>)
   104c2:	920c      	str	r2, [sp, #48]	; 0x30
   104c4:	2102      	movs	r1, #2
   104c6:	2200      	movs	r2, #0
   104c8:	e5fd      	b.n	100c6 <_vfiprintf_r+0x2ee>
   104ca:	06b7      	lsls	r7, r6, #26
   104cc:	f100 8248 	bmi.w	10960 <_vfiprintf_r+0xb88>
   104d0:	06f5      	lsls	r5, r6, #27
   104d2:	f100 8346 	bmi.w	10b62 <_vfiprintf_r+0xd8a>
   104d6:	0674      	lsls	r4, r6, #25
   104d8:	f100 83d5 	bmi.w	10c86 <_vfiprintf_r+0xeae>
   104dc:	05b0      	lsls	r0, r6, #22
   104de:	f140 8340 	bpl.w	10b62 <_vfiprintf_r+0xd8a>
   104e2:	9b07      	ldr	r3, [sp, #28]
   104e4:	9905      	ldr	r1, [sp, #20]
   104e6:	f853 2b04 	ldr.w	r2, [r3], #4
   104ea:	9307      	str	r3, [sp, #28]
   104ec:	7011      	strb	r1, [r2, #0]
   104ee:	e4be      	b.n	fe6e <_vfiprintf_r+0x96>
   104f0:	9603      	str	r6, [sp, #12]
   104f2:	2901      	cmp	r1, #1
   104f4:	f43f ad8c 	beq.w	10010 <_vfiprintf_r+0x238>
   104f8:	2902      	cmp	r1, #2
   104fa:	ac44      	add	r4, sp, #272	; 0x110
   104fc:	d111      	bne.n	10522 <_vfiprintf_r+0x74a>
   104fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   10500:	f003 010f 	and.w	r1, r3, #15
   10504:	091b      	lsrs	r3, r3, #4
   10506:	5c41      	ldrb	r1, [r0, r1]
   10508:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1050c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   10510:	0912      	lsrs	r2, r2, #4
   10512:	ea53 0102 	orrs.w	r1, r3, r2
   10516:	d1f3      	bne.n	10500 <_vfiprintf_r+0x728>
   10518:	9e03      	ldr	r6, [sp, #12]
   1051a:	ab44      	add	r3, sp, #272	; 0x110
   1051c:	1b1b      	subs	r3, r3, r4
   1051e:	9304      	str	r3, [sp, #16]
   10520:	e583      	b.n	1002a <_vfiprintf_r+0x252>
   10522:	f003 0107 	and.w	r1, r3, #7
   10526:	08db      	lsrs	r3, r3, #3
   10528:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1052c:	08d2      	lsrs	r2, r2, #3
   1052e:	3130      	adds	r1, #48	; 0x30
   10530:	ea53 0502 	orrs.w	r5, r3, r2
   10534:	4620      	mov	r0, r4
   10536:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1053a:	d1f2      	bne.n	10522 <_vfiprintf_r+0x74a>
   1053c:	9e03      	ldr	r6, [sp, #12]
   1053e:	07f3      	lsls	r3, r6, #31
   10540:	d5eb      	bpl.n	1051a <_vfiprintf_r+0x742>
   10542:	2930      	cmp	r1, #48	; 0x30
   10544:	d0e8      	beq.n	10518 <_vfiprintf_r+0x740>
   10546:	2330      	movs	r3, #48	; 0x30
   10548:	3802      	subs	r0, #2
   1054a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1054e:	ab44      	add	r3, sp, #272	; 0x110
   10550:	1a1b      	subs	r3, r3, r0
   10552:	9e03      	ldr	r6, [sp, #12]
   10554:	9304      	str	r3, [sp, #16]
   10556:	4604      	mov	r4, r0
   10558:	e567      	b.n	1002a <_vfiprintf_r+0x252>
   1055a:	9b04      	ldr	r3, [sp, #16]
   1055c:	941b      	str	r4, [sp, #108]	; 0x6c
   1055e:	2201      	movs	r2, #1
   10560:	931c      	str	r3, [sp, #112]	; 0x70
   10562:	931a      	str	r3, [sp, #104]	; 0x68
   10564:	9219      	str	r2, [sp, #100]	; 0x64
   10566:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1056a:	f109 0908 	add.w	r9, r9, #8
   1056e:	e69d      	b.n	102ac <_vfiprintf_r+0x4d4>
   10570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10574:	e47b      	b.n	fe6e <_vfiprintf_r+0x96>
   10576:	9a06      	ldr	r2, [sp, #24]
   10578:	9d03      	ldr	r5, [sp, #12]
   1057a:	1b55      	subs	r5, r2, r5
   1057c:	2d00      	cmp	r5, #0
   1057e:	f77f ae76 	ble.w	1026e <_vfiprintf_r+0x496>
   10582:	2d10      	cmp	r5, #16
   10584:	f340 83bb 	ble.w	10cfe <_vfiprintf_r+0xf26>
   10588:	9409      	str	r4, [sp, #36]	; 0x24
   1058a:	ee18 4a10 	vmov	r4, s16
   1058e:	e007      	b.n	105a0 <_vfiprintf_r+0x7c8>
   10590:	f100 0c02 	add.w	ip, r0, #2
   10594:	f109 0908 	add.w	r9, r9, #8
   10598:	4610      	mov	r0, r2
   1059a:	3d10      	subs	r5, #16
   1059c:	2d10      	cmp	r5, #16
   1059e:	dd1e      	ble.n	105de <_vfiprintf_r+0x806>
   105a0:	4981      	ldr	r1, [pc, #516]	; (107a8 <_vfiprintf_r+0x9d0>)
   105a2:	f8c9 1000 	str.w	r1, [r9]
   105a6:	1c42      	adds	r2, r0, #1
   105a8:	3310      	adds	r3, #16
   105aa:	2110      	movs	r1, #16
   105ac:	2a07      	cmp	r2, #7
   105ae:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   105b2:	f8c9 1004 	str.w	r1, [r9, #4]
   105b6:	ddeb      	ble.n	10590 <_vfiprintf_r+0x7b8>
   105b8:	aa18      	add	r2, sp, #96	; 0x60
   105ba:	2b00      	cmp	r3, #0
   105bc:	d074      	beq.n	106a8 <_vfiprintf_r+0x8d0>
   105be:	4621      	mov	r1, r4
   105c0:	4658      	mov	r0, fp
   105c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105c6:	f7ff fbcb 	bl	fd60 <__sprint_r.part.0>
   105ca:	2800      	cmp	r0, #0
   105cc:	f47f addb 	bne.w	10186 <_vfiprintf_r+0x3ae>
   105d0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   105d4:	3d10      	subs	r5, #16
   105d6:	2d10      	cmp	r5, #16
   105d8:	f100 0c01 	add.w	ip, r0, #1
   105dc:	dce0      	bgt.n	105a0 <_vfiprintf_r+0x7c8>
   105de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   105e0:	4a71      	ldr	r2, [pc, #452]	; (107a8 <_vfiprintf_r+0x9d0>)
   105e2:	f8c9 5004 	str.w	r5, [r9, #4]
   105e6:	442b      	add	r3, r5
   105e8:	f1bc 0f07 	cmp.w	ip, #7
   105ec:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   105f0:	f8c9 2000 	str.w	r2, [r9]
   105f4:	f340 8194 	ble.w	10920 <_vfiprintf_r+0xb48>
   105f8:	2b00      	cmp	r3, #0
   105fa:	f000 831f 	beq.w	10c3c <_vfiprintf_r+0xe64>
   105fe:	ee18 1a10 	vmov	r1, s16
   10602:	aa18      	add	r2, sp, #96	; 0x60
   10604:	4658      	mov	r0, fp
   10606:	f7ff fbab 	bl	fd60 <__sprint_r.part.0>
   1060a:	2800      	cmp	r0, #0
   1060c:	f47f adbb 	bne.w	10186 <_vfiprintf_r+0x3ae>
   10610:	9a04      	ldr	r2, [sp, #16]
   10612:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10616:	1abd      	subs	r5, r7, r2
   10618:	2d00      	cmp	r5, #0
   1061a:	f100 0101 	add.w	r1, r0, #1
   1061e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10622:	f77f ae29 	ble.w	10278 <_vfiprintf_r+0x4a0>
   10626:	2d10      	cmp	r5, #16
   10628:	dd29      	ble.n	1067e <_vfiprintf_r+0x8a6>
   1062a:	9409      	str	r4, [sp, #36]	; 0x24
   1062c:	2710      	movs	r7, #16
   1062e:	ee18 4a10 	vmov	r4, s16
   10632:	e007      	b.n	10644 <_vfiprintf_r+0x86c>
   10634:	f100 0c02 	add.w	ip, r0, #2
   10638:	f109 0908 	add.w	r9, r9, #8
   1063c:	4610      	mov	r0, r2
   1063e:	3d10      	subs	r5, #16
   10640:	2d10      	cmp	r5, #16
   10642:	dd1a      	ble.n	1067a <_vfiprintf_r+0x8a2>
   10644:	1c42      	adds	r2, r0, #1
   10646:	4958      	ldr	r1, [pc, #352]	; (107a8 <_vfiprintf_r+0x9d0>)
   10648:	3310      	adds	r3, #16
   1064a:	2a07      	cmp	r2, #7
   1064c:	e9c9 1700 	strd	r1, r7, [r9]
   10650:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10654:	ddee      	ble.n	10634 <_vfiprintf_r+0x85c>
   10656:	aa18      	add	r2, sp, #96	; 0x60
   10658:	b303      	cbz	r3, 1069c <_vfiprintf_r+0x8c4>
   1065a:	4621      	mov	r1, r4
   1065c:	4658      	mov	r0, fp
   1065e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10662:	f7ff fb7d 	bl	fd60 <__sprint_r.part.0>
   10666:	2800      	cmp	r0, #0
   10668:	f47f ad8d 	bne.w	10186 <_vfiprintf_r+0x3ae>
   1066c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10670:	3d10      	subs	r5, #16
   10672:	2d10      	cmp	r5, #16
   10674:	f100 0c01 	add.w	ip, r0, #1
   10678:	dce4      	bgt.n	10644 <_vfiprintf_r+0x86c>
   1067a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1067c:	4661      	mov	r1, ip
   1067e:	4a4a      	ldr	r2, [pc, #296]	; (107a8 <_vfiprintf_r+0x9d0>)
   10680:	f8c9 5004 	str.w	r5, [r9, #4]
   10684:	442b      	add	r3, r5
   10686:	2907      	cmp	r1, #7
   10688:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1068c:	f8c9 2000 	str.w	r2, [r9]
   10690:	f300 80e7 	bgt.w	10862 <_vfiprintf_r+0xa8a>
   10694:	f109 0908 	add.w	r9, r9, #8
   10698:	3101      	adds	r1, #1
   1069a:	e5ed      	b.n	10278 <_vfiprintf_r+0x4a0>
   1069c:	f04f 0c01 	mov.w	ip, #1
   106a0:	4618      	mov	r0, r3
   106a2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106a6:	e7ca      	b.n	1063e <_vfiprintf_r+0x866>
   106a8:	f04f 0c01 	mov.w	ip, #1
   106ac:	4618      	mov	r0, r3
   106ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106b2:	e772      	b.n	1059a <_vfiprintf_r+0x7c2>
   106b4:	2b00      	cmp	r3, #0
   106b6:	f000 8104 	beq.w	108c2 <_vfiprintf_r+0xaea>
   106ba:	ee18 1a10 	vmov	r1, s16
   106be:	aa18      	add	r2, sp, #96	; 0x60
   106c0:	4658      	mov	r0, fp
   106c2:	f7ff fb4d 	bl	fd60 <__sprint_r.part.0>
   106c6:	2800      	cmp	r0, #0
   106c8:	f47f ad5d 	bne.w	10186 <_vfiprintf_r+0x3ae>
   106cc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   106d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106d4:	1c41      	adds	r1, r0, #1
   106d6:	e5a7      	b.n	10228 <_vfiprintf_r+0x450>
   106d8:	2302      	movs	r3, #2
   106da:	aa11      	add	r2, sp, #68	; 0x44
   106dc:	931c      	str	r3, [sp, #112]	; 0x70
   106de:	921b      	str	r2, [sp, #108]	; 0x6c
   106e0:	2101      	movs	r1, #1
   106e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106e6:	4608      	mov	r0, r1
   106e8:	f109 0908 	add.w	r9, r9, #8
   106ec:	1c41      	adds	r1, r0, #1
   106ee:	e5ba      	b.n	10266 <_vfiprintf_r+0x48e>
   106f0:	2d10      	cmp	r5, #16
   106f2:	f340 82e5 	ble.w	10cc0 <_vfiprintf_r+0xee8>
   106f6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   106fa:	940f      	str	r4, [sp, #60]	; 0x3c
   106fc:	4608      	mov	r0, r1
   106fe:	ee18 4a10 	vmov	r4, s16
   10702:	e007      	b.n	10714 <_vfiprintf_r+0x93c>
   10704:	f100 0c02 	add.w	ip, r0, #2
   10708:	f109 0908 	add.w	r9, r9, #8
   1070c:	4610      	mov	r0, r2
   1070e:	3d10      	subs	r5, #16
   10710:	2d10      	cmp	r5, #16
   10712:	dd1d      	ble.n	10750 <_vfiprintf_r+0x978>
   10714:	4925      	ldr	r1, [pc, #148]	; (107ac <_vfiprintf_r+0x9d4>)
   10716:	f8c9 1000 	str.w	r1, [r9]
   1071a:	1c42      	adds	r2, r0, #1
   1071c:	3310      	adds	r3, #16
   1071e:	2110      	movs	r1, #16
   10720:	2a07      	cmp	r2, #7
   10722:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10726:	f8c9 1004 	str.w	r1, [r9, #4]
   1072a:	ddeb      	ble.n	10704 <_vfiprintf_r+0x92c>
   1072c:	aa18      	add	r2, sp, #96	; 0x60
   1072e:	b303      	cbz	r3, 10772 <_vfiprintf_r+0x99a>
   10730:	4621      	mov	r1, r4
   10732:	4658      	mov	r0, fp
   10734:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10738:	f7ff fb12 	bl	fd60 <__sprint_r.part.0>
   1073c:	2800      	cmp	r0, #0
   1073e:	f47f ad22 	bne.w	10186 <_vfiprintf_r+0x3ae>
   10742:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10746:	3d10      	subs	r5, #16
   10748:	2d10      	cmp	r5, #16
   1074a:	f100 0c01 	add.w	ip, r0, #1
   1074e:	dce1      	bgt.n	10714 <_vfiprintf_r+0x93c>
   10750:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10752:	4660      	mov	r0, ip
   10754:	4a15      	ldr	r2, [pc, #84]	; (107ac <_vfiprintf_r+0x9d4>)
   10756:	f8c9 5004 	str.w	r5, [r9, #4]
   1075a:	442b      	add	r3, r5
   1075c:	2807      	cmp	r0, #7
   1075e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10762:	f8c9 2000 	str.w	r2, [r9]
   10766:	f300 80c1 	bgt.w	108ec <_vfiprintf_r+0xb14>
   1076a:	f109 0908 	add.w	r9, r9, #8
   1076e:	1c41      	adds	r1, r0, #1
   10770:	e546      	b.n	10200 <_vfiprintf_r+0x428>
   10772:	4618      	mov	r0, r3
   10774:	f04f 0c01 	mov.w	ip, #1
   10778:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1077c:	e7c7      	b.n	1070e <_vfiprintf_r+0x936>
   1077e:	0776      	lsls	r6, r6, #29
   10780:	9319      	str	r3, [sp, #100]	; 0x64
   10782:	d553      	bpl.n	1082c <_vfiprintf_r+0xa54>
   10784:	9a06      	ldr	r2, [sp, #24]
   10786:	9903      	ldr	r1, [sp, #12]
   10788:	1a54      	subs	r4, r2, r1
   1078a:	2c00      	cmp	r4, #0
   1078c:	dd4e      	ble.n	1082c <_vfiprintf_r+0xa54>
   1078e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10792:	2c10      	cmp	r4, #16
   10794:	f340 82b0 	ble.w	10cf8 <_vfiprintf_r+0xf20>
   10798:	9919      	ldr	r1, [sp, #100]	; 0x64
   1079a:	ee18 6a10 	vmov	r6, s16
   1079e:	2510      	movs	r5, #16
   107a0:	e00d      	b.n	107be <_vfiprintf_r+0x9e6>
   107a2:	bf00      	nop
   107a4:	20000d10 	.word	0x20000d10
   107a8:	200012d4 	.word	0x200012d4
   107ac:	20000d54 	.word	0x20000d54
   107b0:	1c88      	adds	r0, r1, #2
   107b2:	f109 0908 	add.w	r9, r9, #8
   107b6:	4611      	mov	r1, r2
   107b8:	3c10      	subs	r4, #16
   107ba:	2c10      	cmp	r4, #16
   107bc:	dd1a      	ble.n	107f4 <_vfiprintf_r+0xa1c>
   107be:	1c4a      	adds	r2, r1, #1
   107c0:	48b3      	ldr	r0, [pc, #716]	; (10a90 <_vfiprintf_r+0xcb8>)
   107c2:	3310      	adds	r3, #16
   107c4:	2a07      	cmp	r2, #7
   107c6:	e9c9 0500 	strd	r0, r5, [r9]
   107ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   107ce:	ddef      	ble.n	107b0 <_vfiprintf_r+0x9d8>
   107d0:	aa18      	add	r2, sp, #96	; 0x60
   107d2:	b333      	cbz	r3, 10822 <_vfiprintf_r+0xa4a>
   107d4:	4631      	mov	r1, r6
   107d6:	4658      	mov	r0, fp
   107d8:	f7ff fac2 	bl	fd60 <__sprint_r.part.0>
   107dc:	2800      	cmp	r0, #0
   107de:	f47f acd2 	bne.w	10186 <_vfiprintf_r+0x3ae>
   107e2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   107e6:	3c10      	subs	r4, #16
   107e8:	2c10      	cmp	r4, #16
   107ea:	f101 0001 	add.w	r0, r1, #1
   107ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   107f2:	dce4      	bgt.n	107be <_vfiprintf_r+0x9e6>
   107f4:	4aa6      	ldr	r2, [pc, #664]	; (10a90 <_vfiprintf_r+0xcb8>)
   107f6:	f8c9 4004 	str.w	r4, [r9, #4]
   107fa:	4423      	add	r3, r4
   107fc:	2807      	cmp	r0, #7
   107fe:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10802:	f8c9 2000 	str.w	r2, [r9]
   10806:	f77f ad59 	ble.w	102bc <_vfiprintf_r+0x4e4>
   1080a:	b17b      	cbz	r3, 1082c <_vfiprintf_r+0xa54>
   1080c:	ee18 1a10 	vmov	r1, s16
   10810:	aa18      	add	r2, sp, #96	; 0x60
   10812:	4658      	mov	r0, fp
   10814:	f7ff faa4 	bl	fd60 <__sprint_r.part.0>
   10818:	2800      	cmp	r0, #0
   1081a:	f47f acb4 	bne.w	10186 <_vfiprintf_r+0x3ae>
   1081e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10820:	e54c      	b.n	102bc <_vfiprintf_r+0x4e4>
   10822:	2001      	movs	r0, #1
   10824:	4619      	mov	r1, r3
   10826:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1082a:	e7c5      	b.n	107b8 <_vfiprintf_r+0x9e0>
   1082c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10830:	9903      	ldr	r1, [sp, #12]
   10832:	428a      	cmp	r2, r1
   10834:	bfac      	ite	ge
   10836:	189b      	addge	r3, r3, r2
   10838:	185b      	addlt	r3, r3, r1
   1083a:	9305      	str	r3, [sp, #20]
   1083c:	e549      	b.n	102d2 <_vfiprintf_r+0x4fa>
   1083e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10842:	058f      	lsls	r7, r1, #22
   10844:	ee18 3a10 	vmov	r3, s16
   10848:	b28a      	uxth	r2, r1
   1084a:	f53f aae8 	bmi.w	fe1e <_vfiprintf_r+0x46>
   1084e:	ee18 5a10 	vmov	r5, s16
   10852:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10854:	f7fb fb38 	bl	bec8 <__retarget_lock_acquire_recursive>
   10858:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1085c:	b28a      	uxth	r2, r1
   1085e:	f7ff bade 	b.w	fe1e <_vfiprintf_r+0x46>
   10862:	2b00      	cmp	r3, #0
   10864:	f43f ae79 	beq.w	1055a <_vfiprintf_r+0x782>
   10868:	ee18 1a10 	vmov	r1, s16
   1086c:	aa18      	add	r2, sp, #96	; 0x60
   1086e:	4658      	mov	r0, fp
   10870:	f7ff fa76 	bl	fd60 <__sprint_r.part.0>
   10874:	2800      	cmp	r0, #0
   10876:	f47f ac86 	bne.w	10186 <_vfiprintf_r+0x3ae>
   1087a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1087c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1087e:	3101      	adds	r1, #1
   10880:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10884:	e4f8      	b.n	10278 <_vfiprintf_r+0x4a0>
   10886:	9219      	str	r2, [sp, #100]	; 0x64
   10888:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1088c:	e45e      	b.n	1014c <_vfiprintf_r+0x374>
   1088e:	2f00      	cmp	r7, #0
   10890:	f47f abc3 	bne.w	1001a <_vfiprintf_r+0x242>
   10894:	9e03      	ldr	r6, [sp, #12]
   10896:	2700      	movs	r7, #0
   10898:	9704      	str	r7, [sp, #16]
   1089a:	ac44      	add	r4, sp, #272	; 0x110
   1089c:	f7ff bbc5 	b.w	1002a <_vfiprintf_r+0x252>
   108a0:	9b03      	ldr	r3, [sp, #12]
   108a2:	f013 0310 	ands.w	r3, r3, #16
   108a6:	d154      	bne.n	10952 <_vfiprintf_r+0xb7a>
   108a8:	9a03      	ldr	r2, [sp, #12]
   108aa:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   108ae:	f000 816b 	beq.w	10b88 <_vfiprintf_r+0xdb0>
   108b2:	9907      	ldr	r1, [sp, #28]
   108b4:	461a      	mov	r2, r3
   108b6:	f851 3b04 	ldr.w	r3, [r1], #4
   108ba:	9107      	str	r1, [sp, #28]
   108bc:	b29b      	uxth	r3, r3
   108be:	2101      	movs	r1, #1
   108c0:	e401      	b.n	100c6 <_vfiprintf_r+0x2ee>
   108c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   108c4:	2a00      	cmp	r2, #0
   108c6:	d164      	bne.n	10992 <_vfiprintf_r+0xbba>
   108c8:	4618      	mov	r0, r3
   108ca:	2101      	movs	r1, #1
   108cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108d0:	e4c9      	b.n	10266 <_vfiprintf_r+0x48e>
   108d2:	2101      	movs	r1, #1
   108d4:	4618      	mov	r0, r3
   108d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108da:	e4c4      	b.n	10266 <_vfiprintf_r+0x48e>
   108dc:	425b      	negs	r3, r3
   108de:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   108e2:	9603      	str	r6, [sp, #12]
   108e4:	202d      	movs	r0, #45	; 0x2d
   108e6:	2101      	movs	r1, #1
   108e8:	f7ff bbee 	b.w	100c8 <_vfiprintf_r+0x2f0>
   108ec:	2b00      	cmp	r3, #0
   108ee:	f000 8088 	beq.w	10a02 <_vfiprintf_r+0xc2a>
   108f2:	ee18 1a10 	vmov	r1, s16
   108f6:	aa18      	add	r2, sp, #96	; 0x60
   108f8:	4658      	mov	r0, fp
   108fa:	f7ff fa31 	bl	fd60 <__sprint_r.part.0>
   108fe:	2800      	cmp	r0, #0
   10900:	f47f ac41 	bne.w	10186 <_vfiprintf_r+0x3ae>
   10904:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10908:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1090c:	1c41      	adds	r1, r0, #1
   1090e:	e477      	b.n	10200 <_vfiprintf_r+0x428>
   10910:	f898 1000 	ldrb.w	r1, [r8]
   10914:	9307      	str	r3, [sp, #28]
   10916:	f7ff bad2 	b.w	febe <_vfiprintf_r+0xe6>
   1091a:	ac44      	add	r4, sp, #272	; 0x110
   1091c:	f7ff bb85 	b.w	1002a <_vfiprintf_r+0x252>
   10920:	f109 0908 	add.w	r9, r9, #8
   10924:	f10c 0101 	add.w	r1, ip, #1
   10928:	4660      	mov	r0, ip
   1092a:	e4a0      	b.n	1026e <_vfiprintf_r+0x496>
   1092c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10930:	f040 8197 	bne.w	10c62 <_vfiprintf_r+0xe8a>
   10934:	f851 3b04 	ldr.w	r3, [r1], #4
   10938:	9107      	str	r1, [sp, #28]
   1093a:	f7ff bbc0 	b.w	100be <_vfiprintf_r+0x2e6>
   1093e:	05b3      	lsls	r3, r6, #22
   10940:	f100 8188 	bmi.w	10c54 <_vfiprintf_r+0xe7c>
   10944:	f852 3b04 	ldr.w	r3, [r2], #4
   10948:	9207      	str	r2, [sp, #28]
   1094a:	17da      	asrs	r2, r3, #31
   1094c:	4611      	mov	r1, r2
   1094e:	f7ff bb52 	b.w	fff6 <_vfiprintf_r+0x21e>
   10952:	9907      	ldr	r1, [sp, #28]
   10954:	f851 3b04 	ldr.w	r3, [r1], #4
   10958:	9107      	str	r1, [sp, #28]
   1095a:	2101      	movs	r1, #1
   1095c:	f7ff bbb3 	b.w	100c6 <_vfiprintf_r+0x2ee>
   10960:	9b07      	ldr	r3, [sp, #28]
   10962:	9805      	ldr	r0, [sp, #20]
   10964:	f853 1b04 	ldr.w	r1, [r3], #4
   10968:	9307      	str	r3, [sp, #28]
   1096a:	17c2      	asrs	r2, r0, #31
   1096c:	e9c1 0200 	strd	r0, r2, [r1]
   10970:	f7ff ba7d 	b.w	fe6e <_vfiprintf_r+0x96>
   10974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10976:	2b00      	cmp	r3, #0
   10978:	f43f ab26 	beq.w	ffc8 <_vfiprintf_r+0x1f0>
   1097c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	2b00      	cmp	r3, #0
   10982:	f43f ab21 	beq.w	ffc8 <_vfiprintf_r+0x1f0>
   10986:	f898 1000 	ldrb.w	r1, [r8]
   1098a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1098e:	f7ff ba96 	b.w	febe <_vfiprintf_r+0xe6>
   10992:	2302      	movs	r3, #2
   10994:	aa11      	add	r2, sp, #68	; 0x44
   10996:	931c      	str	r3, [sp, #112]	; 0x70
   10998:	921b      	str	r2, [sp, #108]	; 0x6c
   1099a:	2001      	movs	r0, #1
   1099c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109a0:	e6a2      	b.n	106e8 <_vfiprintf_r+0x910>
   109a2:	9603      	str	r6, [sp, #12]
   109a4:	e571      	b.n	1048a <_vfiprintf_r+0x6b2>
   109a6:	4b3b      	ldr	r3, [pc, #236]	; (10a94 <_vfiprintf_r+0xcbc>)
   109a8:	930c      	str	r3, [sp, #48]	; 0x30
   109aa:	f016 0220 	ands.w	r2, r6, #32
   109ae:	d059      	beq.n	10a64 <_vfiprintf_r+0xc8c>
   109b0:	9b07      	ldr	r3, [sp, #28]
   109b2:	3307      	adds	r3, #7
   109b4:	f023 0307 	bic.w	r3, r3, #7
   109b8:	4618      	mov	r0, r3
   109ba:	685a      	ldr	r2, [r3, #4]
   109bc:	f850 3b08 	ldr.w	r3, [r0], #8
   109c0:	9007      	str	r0, [sp, #28]
   109c2:	07f4      	lsls	r4, r6, #31
   109c4:	d509      	bpl.n	109da <_vfiprintf_r+0xc02>
   109c6:	ea53 0002 	orrs.w	r0, r3, r2
   109ca:	d006      	beq.n	109da <_vfiprintf_r+0xc02>
   109cc:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   109d0:	2130      	movs	r1, #48	; 0x30
   109d2:	f046 0602 	orr.w	r6, r6, #2
   109d6:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   109da:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   109de:	9103      	str	r1, [sp, #12]
   109e0:	2102      	movs	r1, #2
   109e2:	f7ff bb70 	b.w	100c6 <_vfiprintf_r+0x2ee>
   109e6:	4b2c      	ldr	r3, [pc, #176]	; (10a98 <_vfiprintf_r+0xcc0>)
   109e8:	930c      	str	r3, [sp, #48]	; 0x30
   109ea:	e7de      	b.n	109aa <_vfiprintf_r+0xbd2>
   109ec:	9b07      	ldr	r3, [sp, #28]
   109ee:	2101      	movs	r1, #1
   109f0:	f853 2b04 	ldr.w	r2, [r3], #4
   109f4:	9103      	str	r1, [sp, #12]
   109f6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   109fa:	9307      	str	r3, [sp, #28]
   109fc:	9104      	str	r1, [sp, #16]
   109fe:	ac2b      	add	r4, sp, #172	; 0xac
   10a00:	e4df      	b.n	103c2 <_vfiprintf_r+0x5ea>
   10a02:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10a06:	2a00      	cmp	r2, #0
   10a08:	f040 8132 	bne.w	10c70 <_vfiprintf_r+0xe98>
   10a0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a0e:	2a00      	cmp	r2, #0
   10a10:	f47f ae62 	bne.w	106d8 <_vfiprintf_r+0x900>
   10a14:	4618      	mov	r0, r3
   10a16:	2101      	movs	r1, #1
   10a18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a1c:	e427      	b.n	1026e <_vfiprintf_r+0x496>
   10a1e:	2100      	movs	r1, #0
   10a20:	2208      	movs	r2, #8
   10a22:	a816      	add	r0, sp, #88	; 0x58
   10a24:	9413      	str	r4, [sp, #76]	; 0x4c
   10a26:	f7fb f8cb 	bl	bbc0 <memset>
   10a2a:	1c79      	adds	r1, r7, #1
   10a2c:	f000 80bc 	beq.w	10ba8 <_vfiprintf_r+0xdd0>
   10a30:	2500      	movs	r5, #0
   10a32:	9407      	str	r4, [sp, #28]
   10a34:	462c      	mov	r4, r5
   10a36:	e00c      	b.n	10a52 <_vfiprintf_r+0xc7a>
   10a38:	a92b      	add	r1, sp, #172	; 0xac
   10a3a:	4658      	mov	r0, fp
   10a3c:	f7ff f8ca 	bl	fbd4 <_wcrtomb_r>
   10a40:	1c42      	adds	r2, r0, #1
   10a42:	4420      	add	r0, r4
   10a44:	f000 816b 	beq.w	10d1e <_vfiprintf_r+0xf46>
   10a48:	42b8      	cmp	r0, r7
   10a4a:	dc08      	bgt.n	10a5e <_vfiprintf_r+0xc86>
   10a4c:	f000 8170 	beq.w	10d30 <_vfiprintf_r+0xf58>
   10a50:	4604      	mov	r4, r0
   10a52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10a54:	5952      	ldr	r2, [r2, r5]
   10a56:	ab16      	add	r3, sp, #88	; 0x58
   10a58:	3504      	adds	r5, #4
   10a5a:	2a00      	cmp	r2, #0
   10a5c:	d1ec      	bne.n	10a38 <_vfiprintf_r+0xc60>
   10a5e:	9404      	str	r4, [sp, #16]
   10a60:	9c07      	ldr	r4, [sp, #28]
   10a62:	e0af      	b.n	10bc4 <_vfiprintf_r+0xdec>
   10a64:	f016 0310 	ands.w	r3, r6, #16
   10a68:	9807      	ldr	r0, [sp, #28]
   10a6a:	d10c      	bne.n	10a86 <_vfiprintf_r+0xcae>
   10a6c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10a70:	d005      	beq.n	10a7e <_vfiprintf_r+0xca6>
   10a72:	461a      	mov	r2, r3
   10a74:	f850 3b04 	ldr.w	r3, [r0], #4
   10a78:	9007      	str	r0, [sp, #28]
   10a7a:	b29b      	uxth	r3, r3
   10a7c:	e7a1      	b.n	109c2 <_vfiprintf_r+0xbea>
   10a7e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10a82:	f040 80e1 	bne.w	10c48 <_vfiprintf_r+0xe70>
   10a86:	f850 3b04 	ldr.w	r3, [r0], #4
   10a8a:	9007      	str	r0, [sp, #28]
   10a8c:	e799      	b.n	109c2 <_vfiprintf_r+0xbea>
   10a8e:	bf00      	nop
   10a90:	20000d54 	.word	0x20000d54
   10a94:	20000d10 	.word	0x20000d10
   10a98:	20000d24 	.word	0x20000d24
   10a9c:	9903      	ldr	r1, [sp, #12]
   10a9e:	9704      	str	r7, [sp, #16]
   10aa0:	ac44      	add	r4, sp, #272	; 0x110
   10aa2:	469e      	mov	lr, r3
   10aa4:	ee08 ba90 	vmov	s17, fp
   10aa8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   10aac:	f04f 0c00 	mov.w	ip, #0
   10ab0:	4623      	mov	r3, r4
   10ab2:	e006      	b.n	10ac2 <_vfiprintf_r+0xcea>
   10ab4:	f1be 0f0a 	cmp.w	lr, #10
   10ab8:	f172 0200 	sbcs.w	r2, r2, #0
   10abc:	d339      	bcc.n	10b32 <_vfiprintf_r+0xd5a>
   10abe:	46a6      	mov	lr, r4
   10ac0:	462a      	mov	r2, r5
   10ac2:	49a6      	ldr	r1, [pc, #664]	; (10d5c <_vfiprintf_r+0xf84>)
   10ac4:	eb1e 0002 	adds.w	r0, lr, r2
   10ac8:	f140 0000 	adc.w	r0, r0, #0
   10acc:	460f      	mov	r7, r1
   10ace:	fba1 1400 	umull	r1, r4, r1, r0
   10ad2:	f024 0103 	bic.w	r1, r4, #3
   10ad6:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   10ada:	1a40      	subs	r0, r0, r1
   10adc:	ebbe 0100 	subs.w	r1, lr, r0
   10ae0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10ae4:	f162 0400 	sbc.w	r4, r2, #0
   10ae8:	fb05 f501 	mul.w	r5, r5, r1
   10aec:	fb07 5504 	mla	r5, r7, r4, r5
   10af0:	fba1 4107 	umull	r4, r1, r1, r7
   10af4:	440d      	add	r5, r1
   10af6:	2705      	movs	r7, #5
   10af8:	f004 0101 	and.w	r1, r4, #1
   10afc:	fba1 1b07 	umull	r1, fp, r1, r7
   10b00:	1809      	adds	r1, r1, r0
   10b02:	0864      	lsrs	r4, r4, #1
   10b04:	3130      	adds	r1, #48	; 0x30
   10b06:	f803 1c01 	strb.w	r1, [r3, #-1]
   10b0a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   10b0e:	f10c 0c01 	add.w	ip, ip, #1
   10b12:	3b01      	subs	r3, #1
   10b14:	086d      	lsrs	r5, r5, #1
   10b16:	2e00      	cmp	r6, #0
   10b18:	d0cc      	beq.n	10ab4 <_vfiprintf_r+0xcdc>
   10b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10b1c:	7809      	ldrb	r1, [r1, #0]
   10b1e:	4561      	cmp	r1, ip
   10b20:	d1c8      	bne.n	10ab4 <_vfiprintf_r+0xcdc>
   10b22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10b26:	d0c5      	beq.n	10ab4 <_vfiprintf_r+0xcdc>
   10b28:	f1be 0f0a 	cmp.w	lr, #10
   10b2c:	f172 0200 	sbcs.w	r2, r2, #0
   10b30:	d26c      	bcs.n	10c0c <_vfiprintf_r+0xe34>
   10b32:	461c      	mov	r4, r3
   10b34:	ab44      	add	r3, sp, #272	; 0x110
   10b36:	1b1b      	subs	r3, r3, r4
   10b38:	9f04      	ldr	r7, [sp, #16]
   10b3a:	9e03      	ldr	r6, [sp, #12]
   10b3c:	9304      	str	r3, [sp, #16]
   10b3e:	ee18 ba90 	vmov	fp, s17
   10b42:	f7ff ba72 	b.w	1002a <_vfiprintf_r+0x252>
   10b46:	9603      	str	r6, [sp, #12]
   10b48:	f7ff ba62 	b.w	10010 <_vfiprintf_r+0x238>
   10b4c:	4658      	mov	r0, fp
   10b4e:	f7fa ff07 	bl	b960 <__sinit>
   10b52:	f7ff b95b 	b.w	fe0c <_vfiprintf_r+0x34>
   10b56:	2901      	cmp	r1, #1
   10b58:	9603      	str	r6, [sp, #12]
   10b5a:	f47f accd 	bne.w	104f8 <_vfiprintf_r+0x720>
   10b5e:	f7ff ba5c 	b.w	1001a <_vfiprintf_r+0x242>
   10b62:	9b07      	ldr	r3, [sp, #28]
   10b64:	9905      	ldr	r1, [sp, #20]
   10b66:	f853 2b04 	ldr.w	r2, [r3], #4
   10b6a:	6011      	str	r1, [r2, #0]
   10b6c:	9307      	str	r3, [sp, #28]
   10b6e:	f7ff b97e 	b.w	fe6e <_vfiprintf_r+0x96>
   10b72:	2f06      	cmp	r7, #6
   10b74:	463b      	mov	r3, r7
   10b76:	9a03      	ldr	r2, [sp, #12]
   10b78:	4c79      	ldr	r4, [pc, #484]	; (10d60 <_vfiprintf_r+0xf88>)
   10b7a:	9207      	str	r2, [sp, #28]
   10b7c:	bf28      	it	cs
   10b7e:	2306      	movcs	r3, #6
   10b80:	9304      	str	r3, [sp, #16]
   10b82:	9303      	str	r3, [sp, #12]
   10b84:	f7ff bb25 	b.w	101d2 <_vfiprintf_r+0x3fa>
   10b88:	9b03      	ldr	r3, [sp, #12]
   10b8a:	9907      	ldr	r1, [sp, #28]
   10b8c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10b90:	bf14      	ite	ne
   10b92:	f851 3b04 	ldrne.w	r3, [r1], #4
   10b96:	f851 3b04 	ldreq.w	r3, [r1], #4
   10b9a:	9107      	str	r1, [sp, #28]
   10b9c:	bf1c      	itt	ne
   10b9e:	4602      	movne	r2, r0
   10ba0:	b2db      	uxtbne	r3, r3
   10ba2:	2101      	movs	r1, #1
   10ba4:	f7ff ba8f 	b.w	100c6 <_vfiprintf_r+0x2ee>
   10ba8:	ab16      	add	r3, sp, #88	; 0x58
   10baa:	9300      	str	r3, [sp, #0]
   10bac:	2300      	movs	r3, #0
   10bae:	4619      	mov	r1, r3
   10bb0:	aa13      	add	r2, sp, #76	; 0x4c
   10bb2:	4658      	mov	r0, fp
   10bb4:	f7ff f834 	bl	fc20 <_wcsrtombs_r>
   10bb8:	4603      	mov	r3, r0
   10bba:	3301      	adds	r3, #1
   10bbc:	9004      	str	r0, [sp, #16]
   10bbe:	f000 80ae 	beq.w	10d1e <_vfiprintf_r+0xf46>
   10bc2:	9413      	str	r4, [sp, #76]	; 0x4c
   10bc4:	9b04      	ldr	r3, [sp, #16]
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d030      	beq.n	10c2c <_vfiprintf_r+0xe54>
   10bca:	2b63      	cmp	r3, #99	; 0x63
   10bcc:	dc63      	bgt.n	10c96 <_vfiprintf_r+0xebe>
   10bce:	2300      	movs	r3, #0
   10bd0:	9308      	str	r3, [sp, #32]
   10bd2:	ac2b      	add	r4, sp, #172	; 0xac
   10bd4:	2208      	movs	r2, #8
   10bd6:	2100      	movs	r1, #0
   10bd8:	a816      	add	r0, sp, #88	; 0x58
   10bda:	f7fa fff1 	bl	bbc0 <memset>
   10bde:	9d04      	ldr	r5, [sp, #16]
   10be0:	ab16      	add	r3, sp, #88	; 0x58
   10be2:	9300      	str	r3, [sp, #0]
   10be4:	aa13      	add	r2, sp, #76	; 0x4c
   10be6:	462b      	mov	r3, r5
   10be8:	4621      	mov	r1, r4
   10bea:	4658      	mov	r0, fp
   10bec:	f7ff f818 	bl	fc20 <_wcsrtombs_r>
   10bf0:	4285      	cmp	r5, r0
   10bf2:	f040 80ab 	bne.w	10d4c <_vfiprintf_r+0xf74>
   10bf6:	9b03      	ldr	r3, [sp, #12]
   10bf8:	9a04      	ldr	r2, [sp, #16]
   10bfa:	9307      	str	r3, [sp, #28]
   10bfc:	2300      	movs	r3, #0
   10bfe:	54a3      	strb	r3, [r4, r2]
   10c00:	461f      	mov	r7, r3
   10c02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10c06:	9303      	str	r3, [sp, #12]
   10c08:	f7ff ba16 	b.w	10038 <_vfiprintf_r+0x260>
   10c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10c0e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c10:	1a9b      	subs	r3, r3, r2
   10c12:	4618      	mov	r0, r3
   10c14:	9308      	str	r3, [sp, #32]
   10c16:	f7fb f88b 	bl	bd30 <strncpy>
   10c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c1c:	9b08      	ldr	r3, [sp, #32]
   10c1e:	784a      	ldrb	r2, [r1, #1]
   10c20:	b10a      	cbz	r2, 10c26 <_vfiprintf_r+0xe4e>
   10c22:	3101      	adds	r1, #1
   10c24:	910b      	str	r1, [sp, #44]	; 0x2c
   10c26:	f04f 0c00 	mov.w	ip, #0
   10c2a:	e748      	b.n	10abe <_vfiprintf_r+0xce6>
   10c2c:	9b03      	ldr	r3, [sp, #12]
   10c2e:	9307      	str	r3, [sp, #28]
   10c30:	9b04      	ldr	r3, [sp, #16]
   10c32:	9303      	str	r3, [sp, #12]
   10c34:	461f      	mov	r7, r3
   10c36:	9308      	str	r3, [sp, #32]
   10c38:	f7ff b9fe 	b.w	10038 <_vfiprintf_r+0x260>
   10c3c:	2101      	movs	r1, #1
   10c3e:	4618      	mov	r0, r3
   10c40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c44:	f7ff bb13 	b.w	1026e <_vfiprintf_r+0x496>
   10c48:	f850 3b04 	ldr.w	r3, [r0], #4
   10c4c:	9007      	str	r0, [sp, #28]
   10c4e:	4622      	mov	r2, r4
   10c50:	b2db      	uxtb	r3, r3
   10c52:	e6b6      	b.n	109c2 <_vfiprintf_r+0xbea>
   10c54:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10c58:	9207      	str	r2, [sp, #28]
   10c5a:	17da      	asrs	r2, r3, #31
   10c5c:	4611      	mov	r1, r2
   10c5e:	f7ff b9ca 	b.w	fff6 <_vfiprintf_r+0x21e>
   10c62:	f851 3b04 	ldr.w	r3, [r1], #4
   10c66:	9107      	str	r1, [sp, #28]
   10c68:	4602      	mov	r2, r0
   10c6a:	b2db      	uxtb	r3, r3
   10c6c:	f7ff ba27 	b.w	100be <_vfiprintf_r+0x2e6>
   10c70:	2301      	movs	r3, #1
   10c72:	931c      	str	r3, [sp, #112]	; 0x70
   10c74:	2101      	movs	r1, #1
   10c76:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   10c7a:	931b      	str	r3, [sp, #108]	; 0x6c
   10c7c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c80:	460b      	mov	r3, r1
   10c82:	f7ff bacd 	b.w	10220 <_vfiprintf_r+0x448>
   10c86:	9b07      	ldr	r3, [sp, #28]
   10c88:	9905      	ldr	r1, [sp, #20]
   10c8a:	f853 2b04 	ldr.w	r2, [r3], #4
   10c8e:	9307      	str	r3, [sp, #28]
   10c90:	8011      	strh	r1, [r2, #0]
   10c92:	f7ff b8ec 	b.w	fe6e <_vfiprintf_r+0x96>
   10c96:	1c59      	adds	r1, r3, #1
   10c98:	4658      	mov	r0, fp
   10c9a:	f7f9 ff49 	bl	ab30 <_malloc_r>
   10c9e:	4604      	mov	r4, r0
   10ca0:	2800      	cmp	r0, #0
   10ca2:	d03c      	beq.n	10d1e <_vfiprintf_r+0xf46>
   10ca4:	9008      	str	r0, [sp, #32]
   10ca6:	e795      	b.n	10bd4 <_vfiprintf_r+0xdfc>
   10ca8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   10caa:	f7fb f90f 	bl	becc <__retarget_lock_release_recursive>
   10cae:	f7ff b9e9 	b.w	10084 <_vfiprintf_r+0x2ac>
   10cb2:	9b03      	ldr	r3, [sp, #12]
   10cb4:	9307      	str	r3, [sp, #28]
   10cb6:	e9cd 7703 	strd	r7, r7, [sp, #12]
   10cba:	9f08      	ldr	r7, [sp, #32]
   10cbc:	f7ff b9bc 	b.w	10038 <_vfiprintf_r+0x260>
   10cc0:	9819      	ldr	r0, [sp, #100]	; 0x64
   10cc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10cc4:	3001      	adds	r0, #1
   10cc6:	e545      	b.n	10754 <_vfiprintf_r+0x97c>
   10cc8:	9b03      	ldr	r3, [sp, #12]
   10cca:	9307      	str	r3, [sp, #28]
   10ccc:	4620      	mov	r0, r4
   10cce:	f7fb fad7 	bl	c280 <strlen>
   10cd2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   10cd6:	462f      	mov	r7, r5
   10cd8:	9004      	str	r0, [sp, #16]
   10cda:	9303      	str	r3, [sp, #12]
   10cdc:	9508      	str	r5, [sp, #32]
   10cde:	f7ff b9ab 	b.w	10038 <_vfiprintf_r+0x260>
   10ce2:	ee18 1a10 	vmov	r1, s16
   10ce6:	aa18      	add	r2, sp, #96	; 0x60
   10ce8:	4658      	mov	r0, fp
   10cea:	f7ff f839 	bl	fd60 <__sprint_r.part.0>
   10cee:	2800      	cmp	r0, #0
   10cf0:	f43f aa36 	beq.w	10160 <_vfiprintf_r+0x388>
   10cf4:	f7ff ba4d 	b.w	10192 <_vfiprintf_r+0x3ba>
   10cf8:	9819      	ldr	r0, [sp, #100]	; 0x64
   10cfa:	3001      	adds	r0, #1
   10cfc:	e57a      	b.n	107f4 <_vfiprintf_r+0xa1c>
   10cfe:	468c      	mov	ip, r1
   10d00:	e46e      	b.n	105e0 <_vfiprintf_r+0x808>
   10d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10d04:	07d9      	lsls	r1, r3, #31
   10d06:	d405      	bmi.n	10d14 <_vfiprintf_r+0xf3c>
   10d08:	89ab      	ldrh	r3, [r5, #12]
   10d0a:	059a      	lsls	r2, r3, #22
   10d0c:	d402      	bmi.n	10d14 <_vfiprintf_r+0xf3c>
   10d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10d10:	f7fb f8dc 	bl	becc <__retarget_lock_release_recursive>
   10d14:	f04f 33ff 	mov.w	r3, #4294967295
   10d18:	9305      	str	r3, [sp, #20]
   10d1a:	f7ff ba49 	b.w	101b0 <_vfiprintf_r+0x3d8>
   10d1e:	ee18 2a10 	vmov	r2, s16
   10d22:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d2a:	8193      	strh	r3, [r2, #12]
   10d2c:	f7ff ba35 	b.w	1019a <_vfiprintf_r+0x3c2>
   10d30:	9c07      	ldr	r4, [sp, #28]
   10d32:	9704      	str	r7, [sp, #16]
   10d34:	e746      	b.n	10bc4 <_vfiprintf_r+0xdec>
   10d36:	9b07      	ldr	r3, [sp, #28]
   10d38:	f898 1001 	ldrb.w	r1, [r8, #1]
   10d3c:	f853 7b04 	ldr.w	r7, [r3], #4
   10d40:	9307      	str	r3, [sp, #28]
   10d42:	4690      	mov	r8, r2
   10d44:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   10d48:	f7ff b8b9 	b.w	febe <_vfiprintf_r+0xe6>
   10d4c:	ee18 2a10 	vmov	r2, s16
   10d50:	8993      	ldrh	r3, [r2, #12]
   10d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d56:	8193      	strh	r3, [r2, #12]
   10d58:	f7ff ba15 	b.w	10186 <_vfiprintf_r+0x3ae>
   10d5c:	cccccccd 	.word	0xcccccccd
   10d60:	20000d38 	.word	0x20000d38

00010d64 <__sbprintf>:
   10d64:	b570      	push	{r4, r5, r6, lr}
   10d66:	460c      	mov	r4, r1
   10d68:	8989      	ldrh	r1, [r1, #12]
   10d6a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   10d6e:	f021 0102 	bic.w	r1, r1, #2
   10d72:	f8ad 1014 	strh.w	r1, [sp, #20]
   10d76:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10d78:	911b      	str	r1, [sp, #108]	; 0x6c
   10d7a:	89e1      	ldrh	r1, [r4, #14]
   10d7c:	f8ad 1016 	strh.w	r1, [sp, #22]
   10d80:	69e1      	ldr	r1, [r4, #28]
   10d82:	9109      	str	r1, [sp, #36]	; 0x24
   10d84:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10d86:	910b      	str	r1, [sp, #44]	; 0x2c
   10d88:	a91c      	add	r1, sp, #112	; 0x70
   10d8a:	9102      	str	r1, [sp, #8]
   10d8c:	9106      	str	r1, [sp, #24]
   10d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10d92:	4606      	mov	r6, r0
   10d94:	9104      	str	r1, [sp, #16]
   10d96:	9107      	str	r1, [sp, #28]
   10d98:	a818      	add	r0, sp, #96	; 0x60
   10d9a:	2100      	movs	r1, #0
   10d9c:	e9cd 3200 	strd	r3, r2, [sp]
   10da0:	9108      	str	r1, [sp, #32]
   10da2:	f7fb f88d 	bl	bec0 <__retarget_lock_init_recursive>
   10da6:	e9dd 3200 	ldrd	r3, r2, [sp]
   10daa:	a902      	add	r1, sp, #8
   10dac:	4630      	mov	r0, r6
   10dae:	f7ff f813 	bl	fdd8 <_vfiprintf_r>
   10db2:	1e05      	subs	r5, r0, #0
   10db4:	db07      	blt.n	10dc6 <__sbprintf+0x62>
   10db6:	a902      	add	r1, sp, #8
   10db8:	4630      	mov	r0, r6
   10dba:	f7fd fee7 	bl	eb8c <_fflush_r>
   10dbe:	2800      	cmp	r0, #0
   10dc0:	bf18      	it	ne
   10dc2:	f04f 35ff 	movne.w	r5, #4294967295
   10dc6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10dca:	065b      	lsls	r3, r3, #25
   10dcc:	d503      	bpl.n	10dd6 <__sbprintf+0x72>
   10dce:	89a3      	ldrh	r3, [r4, #12]
   10dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dd4:	81a3      	strh	r3, [r4, #12]
   10dd6:	9818      	ldr	r0, [sp, #96]	; 0x60
   10dd8:	f7fb f874 	bl	bec4 <__retarget_lock_close_recursive>
   10ddc:	4628      	mov	r0, r5
   10dde:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   10de2:	bd70      	pop	{r4, r5, r6, pc}

00010de4 <__sfvwrite_r>:
   10de4:	6893      	ldr	r3, [r2, #8]
   10de6:	2b00      	cmp	r3, #0
   10de8:	f000 8085 	beq.w	10ef6 <__sfvwrite_r+0x112>
   10dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10df0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   10df4:	460c      	mov	r4, r1
   10df6:	0719      	lsls	r1, r3, #28
   10df8:	4680      	mov	r8, r0
   10dfa:	b083      	sub	sp, #12
   10dfc:	4617      	mov	r7, r2
   10dfe:	b298      	uxth	r0, r3
   10e00:	d525      	bpl.n	10e4e <__sfvwrite_r+0x6a>
   10e02:	6923      	ldr	r3, [r4, #16]
   10e04:	b31b      	cbz	r3, 10e4e <__sfvwrite_r+0x6a>
   10e06:	f010 0302 	ands.w	r3, r0, #2
   10e0a:	683d      	ldr	r5, [r7, #0]
   10e0c:	d02d      	beq.n	10e6a <__sfvwrite_r+0x86>
   10e0e:	f04f 0a00 	mov.w	sl, #0
   10e12:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 110d4 <__sfvwrite_r+0x2f0>
   10e16:	4656      	mov	r6, sl
   10e18:	46b9      	mov	r9, r7
   10e1a:	455e      	cmp	r6, fp
   10e1c:	4633      	mov	r3, r6
   10e1e:	4652      	mov	r2, sl
   10e20:	bf28      	it	cs
   10e22:	465b      	movcs	r3, fp
   10e24:	4640      	mov	r0, r8
   10e26:	2e00      	cmp	r6, #0
   10e28:	d052      	beq.n	10ed0 <__sfvwrite_r+0xec>
   10e2a:	69e1      	ldr	r1, [r4, #28]
   10e2c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10e2e:	47b8      	blx	r7
   10e30:	2800      	cmp	r0, #0
   10e32:	dd56      	ble.n	10ee2 <__sfvwrite_r+0xfe>
   10e34:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10e38:	1a1b      	subs	r3, r3, r0
   10e3a:	4482      	add	sl, r0
   10e3c:	1a36      	subs	r6, r6, r0
   10e3e:	f8c9 3008 	str.w	r3, [r9, #8]
   10e42:	2b00      	cmp	r3, #0
   10e44:	d1e9      	bne.n	10e1a <__sfvwrite_r+0x36>
   10e46:	2000      	movs	r0, #0
   10e48:	b003      	add	sp, #12
   10e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e4e:	4621      	mov	r1, r4
   10e50:	4640      	mov	r0, r8
   10e52:	f000 f941 	bl	110d8 <__swsetup_r>
   10e56:	2800      	cmp	r0, #0
   10e58:	f040 8138 	bne.w	110cc <__sfvwrite_r+0x2e8>
   10e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10e60:	683d      	ldr	r5, [r7, #0]
   10e62:	b298      	uxth	r0, r3
   10e64:	f010 0302 	ands.w	r3, r0, #2
   10e68:	d1d1      	bne.n	10e0e <__sfvwrite_r+0x2a>
   10e6a:	f010 0901 	ands.w	r9, r0, #1
   10e6e:	d144      	bne.n	10efa <__sfvwrite_r+0x116>
   10e70:	464e      	mov	r6, r9
   10e72:	9700      	str	r7, [sp, #0]
   10e74:	b346      	cbz	r6, 10ec8 <__sfvwrite_r+0xe4>
   10e76:	0582      	lsls	r2, r0, #22
   10e78:	f8d4 b008 	ldr.w	fp, [r4, #8]
   10e7c:	f140 8085 	bpl.w	10f8a <__sfvwrite_r+0x1a6>
   10e80:	45b3      	cmp	fp, r6
   10e82:	465a      	mov	r2, fp
   10e84:	f200 80b4 	bhi.w	10ff0 <__sfvwrite_r+0x20c>
   10e88:	f410 6f90 	tst.w	r0, #1152	; 0x480
   10e8c:	f040 80c1 	bne.w	11012 <__sfvwrite_r+0x22e>
   10e90:	6820      	ldr	r0, [r4, #0]
   10e92:	9201      	str	r2, [sp, #4]
   10e94:	4649      	mov	r1, r9
   10e96:	f7fa fe17 	bl	bac8 <memmove>
   10e9a:	68a3      	ldr	r3, [r4, #8]
   10e9c:	9a01      	ldr	r2, [sp, #4]
   10e9e:	eba3 010b 	sub.w	r1, r3, fp
   10ea2:	6823      	ldr	r3, [r4, #0]
   10ea4:	60a1      	str	r1, [r4, #8]
   10ea6:	4413      	add	r3, r2
   10ea8:	46b2      	mov	sl, r6
   10eaa:	6023      	str	r3, [r4, #0]
   10eac:	2600      	movs	r6, #0
   10eae:	9a00      	ldr	r2, [sp, #0]
   10eb0:	6893      	ldr	r3, [r2, #8]
   10eb2:	eba3 030a 	sub.w	r3, r3, sl
   10eb6:	44d1      	add	r9, sl
   10eb8:	6093      	str	r3, [r2, #8]
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d0c3      	beq.n	10e46 <__sfvwrite_r+0x62>
   10ebe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10ec2:	b280      	uxth	r0, r0
   10ec4:	2e00      	cmp	r6, #0
   10ec6:	d1d6      	bne.n	10e76 <__sfvwrite_r+0x92>
   10ec8:	e9d5 9600 	ldrd	r9, r6, [r5]
   10ecc:	3508      	adds	r5, #8
   10ece:	e7d1      	b.n	10e74 <__sfvwrite_r+0x90>
   10ed0:	e9d5 a600 	ldrd	sl, r6, [r5]
   10ed4:	3508      	adds	r5, #8
   10ed6:	e7a0      	b.n	10e1a <__sfvwrite_r+0x36>
   10ed8:	4621      	mov	r1, r4
   10eda:	4640      	mov	r0, r8
   10edc:	f7fd fe56 	bl	eb8c <_fflush_r>
   10ee0:	b388      	cbz	r0, 10f46 <__sfvwrite_r+0x162>
   10ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10eea:	f04f 30ff 	mov.w	r0, #4294967295
   10eee:	81a3      	strh	r3, [r4, #12]
   10ef0:	b003      	add	sp, #12
   10ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ef6:	2000      	movs	r0, #0
   10ef8:	4770      	bx	lr
   10efa:	461e      	mov	r6, r3
   10efc:	46ba      	mov	sl, r7
   10efe:	4699      	mov	r9, r3
   10f00:	4618      	mov	r0, r3
   10f02:	9500      	str	r5, [sp, #0]
   10f04:	461f      	mov	r7, r3
   10f06:	b366      	cbz	r6, 10f62 <__sfvwrite_r+0x17e>
   10f08:	2800      	cmp	r0, #0
   10f0a:	d032      	beq.n	10f72 <__sfvwrite_r+0x18e>
   10f0c:	464a      	mov	r2, r9
   10f0e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10f12:	6820      	ldr	r0, [r4, #0]
   10f14:	68a5      	ldr	r5, [r4, #8]
   10f16:	42b2      	cmp	r2, r6
   10f18:	bf28      	it	cs
   10f1a:	4632      	movcs	r2, r6
   10f1c:	4288      	cmp	r0, r1
   10f1e:	d904      	bls.n	10f2a <__sfvwrite_r+0x146>
   10f20:	eb05 0b03 	add.w	fp, r5, r3
   10f24:	455a      	cmp	r2, fp
   10f26:	f300 80a7 	bgt.w	11078 <__sfvwrite_r+0x294>
   10f2a:	4293      	cmp	r3, r2
   10f2c:	dc64      	bgt.n	10ff8 <__sfvwrite_r+0x214>
   10f2e:	69e1      	ldr	r1, [r4, #28]
   10f30:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10f32:	463a      	mov	r2, r7
   10f34:	4640      	mov	r0, r8
   10f36:	47a8      	blx	r5
   10f38:	f1b0 0b00 	subs.w	fp, r0, #0
   10f3c:	ddd1      	ble.n	10ee2 <__sfvwrite_r+0xfe>
   10f3e:	ebb9 090b 	subs.w	r9, r9, fp
   10f42:	d0c9      	beq.n	10ed8 <__sfvwrite_r+0xf4>
   10f44:	2001      	movs	r0, #1
   10f46:	f8da 3008 	ldr.w	r3, [sl, #8]
   10f4a:	eba3 030b 	sub.w	r3, r3, fp
   10f4e:	445f      	add	r7, fp
   10f50:	eba6 060b 	sub.w	r6, r6, fp
   10f54:	f8ca 3008 	str.w	r3, [sl, #8]
   10f58:	2b00      	cmp	r3, #0
   10f5a:	f43f af74 	beq.w	10e46 <__sfvwrite_r+0x62>
   10f5e:	2e00      	cmp	r6, #0
   10f60:	d1d2      	bne.n	10f08 <__sfvwrite_r+0x124>
   10f62:	9a00      	ldr	r2, [sp, #0]
   10f64:	6856      	ldr	r6, [r2, #4]
   10f66:	4613      	mov	r3, r2
   10f68:	3208      	adds	r2, #8
   10f6a:	9200      	str	r2, [sp, #0]
   10f6c:	2e00      	cmp	r6, #0
   10f6e:	d0f8      	beq.n	10f62 <__sfvwrite_r+0x17e>
   10f70:	681f      	ldr	r7, [r3, #0]
   10f72:	4632      	mov	r2, r6
   10f74:	210a      	movs	r1, #10
   10f76:	4638      	mov	r0, r7
   10f78:	f7fd fe3a 	bl	ebf0 <memchr>
   10f7c:	2800      	cmp	r0, #0
   10f7e:	f000 809c 	beq.w	110ba <__sfvwrite_r+0x2d6>
   10f82:	3001      	adds	r0, #1
   10f84:	eba0 0907 	sub.w	r9, r0, r7
   10f88:	e7c0      	b.n	10f0c <__sfvwrite_r+0x128>
   10f8a:	6820      	ldr	r0, [r4, #0]
   10f8c:	6923      	ldr	r3, [r4, #16]
   10f8e:	4298      	cmp	r0, r3
   10f90:	d816      	bhi.n	10fc0 <__sfvwrite_r+0x1dc>
   10f92:	6962      	ldr	r2, [r4, #20]
   10f94:	42b2      	cmp	r2, r6
   10f96:	d813      	bhi.n	10fc0 <__sfvwrite_r+0x1dc>
   10f98:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10f9c:	42b3      	cmp	r3, r6
   10f9e:	bf28      	it	cs
   10fa0:	4633      	movcs	r3, r6
   10fa2:	69e1      	ldr	r1, [r4, #28]
   10fa4:	fb93 f3f2 	sdiv	r3, r3, r2
   10fa8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10faa:	fb02 f303 	mul.w	r3, r2, r3
   10fae:	4640      	mov	r0, r8
   10fb0:	464a      	mov	r2, r9
   10fb2:	47b8      	blx	r7
   10fb4:	f1b0 0a00 	subs.w	sl, r0, #0
   10fb8:	dd93      	ble.n	10ee2 <__sfvwrite_r+0xfe>
   10fba:	eba6 060a 	sub.w	r6, r6, sl
   10fbe:	e776      	b.n	10eae <__sfvwrite_r+0xca>
   10fc0:	45b3      	cmp	fp, r6
   10fc2:	46da      	mov	sl, fp
   10fc4:	bf28      	it	cs
   10fc6:	46b2      	movcs	sl, r6
   10fc8:	4652      	mov	r2, sl
   10fca:	4649      	mov	r1, r9
   10fcc:	f7fa fd7c 	bl	bac8 <memmove>
   10fd0:	68a3      	ldr	r3, [r4, #8]
   10fd2:	6822      	ldr	r2, [r4, #0]
   10fd4:	eba3 030a 	sub.w	r3, r3, sl
   10fd8:	4452      	add	r2, sl
   10fda:	60a3      	str	r3, [r4, #8]
   10fdc:	6022      	str	r2, [r4, #0]
   10fde:	2b00      	cmp	r3, #0
   10fe0:	d1eb      	bne.n	10fba <__sfvwrite_r+0x1d6>
   10fe2:	4621      	mov	r1, r4
   10fe4:	4640      	mov	r0, r8
   10fe6:	f7fd fdd1 	bl	eb8c <_fflush_r>
   10fea:	2800      	cmp	r0, #0
   10fec:	d0e5      	beq.n	10fba <__sfvwrite_r+0x1d6>
   10fee:	e778      	b.n	10ee2 <__sfvwrite_r+0xfe>
   10ff0:	6820      	ldr	r0, [r4, #0]
   10ff2:	46b3      	mov	fp, r6
   10ff4:	4632      	mov	r2, r6
   10ff6:	e74c      	b.n	10e92 <__sfvwrite_r+0xae>
   10ff8:	4639      	mov	r1, r7
   10ffa:	9201      	str	r2, [sp, #4]
   10ffc:	f7fa fd64 	bl	bac8 <memmove>
   11000:	9a01      	ldr	r2, [sp, #4]
   11002:	68a3      	ldr	r3, [r4, #8]
   11004:	1a9b      	subs	r3, r3, r2
   11006:	60a3      	str	r3, [r4, #8]
   11008:	6823      	ldr	r3, [r4, #0]
   1100a:	4413      	add	r3, r2
   1100c:	6023      	str	r3, [r4, #0]
   1100e:	4693      	mov	fp, r2
   11010:	e795      	b.n	10f3e <__sfvwrite_r+0x15a>
   11012:	6823      	ldr	r3, [r4, #0]
   11014:	6921      	ldr	r1, [r4, #16]
   11016:	eba3 0b01 	sub.w	fp, r3, r1
   1101a:	6963      	ldr	r3, [r4, #20]
   1101c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   11020:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   11024:	f10b 0301 	add.w	r3, fp, #1
   11028:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1102c:	4433      	add	r3, r6
   1102e:	4553      	cmp	r3, sl
   11030:	4652      	mov	r2, sl
   11032:	bf84      	itt	hi
   11034:	469a      	movhi	sl, r3
   11036:	4652      	movhi	r2, sl
   11038:	0543      	lsls	r3, r0, #21
   1103a:	d52c      	bpl.n	11096 <__sfvwrite_r+0x2b2>
   1103c:	4611      	mov	r1, r2
   1103e:	4640      	mov	r0, r8
   11040:	f7f9 fd76 	bl	ab30 <_malloc_r>
   11044:	2800      	cmp	r0, #0
   11046:	d03b      	beq.n	110c0 <__sfvwrite_r+0x2dc>
   11048:	465a      	mov	r2, fp
   1104a:	6921      	ldr	r1, [r4, #16]
   1104c:	9001      	str	r0, [sp, #4]
   1104e:	f7f7 ffa9 	bl	8fa4 <memcpy>
   11052:	89a2      	ldrh	r2, [r4, #12]
   11054:	9b01      	ldr	r3, [sp, #4]
   11056:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1105a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1105e:	81a2      	strh	r2, [r4, #12]
   11060:	eb03 000b 	add.w	r0, r3, fp
   11064:	6123      	str	r3, [r4, #16]
   11066:	ebaa 030b 	sub.w	r3, sl, fp
   1106a:	f8c4 a014 	str.w	sl, [r4, #20]
   1106e:	60a3      	str	r3, [r4, #8]
   11070:	6020      	str	r0, [r4, #0]
   11072:	46b3      	mov	fp, r6
   11074:	4632      	mov	r2, r6
   11076:	e70c      	b.n	10e92 <__sfvwrite_r+0xae>
   11078:	4639      	mov	r1, r7
   1107a:	465a      	mov	r2, fp
   1107c:	f7fa fd24 	bl	bac8 <memmove>
   11080:	6823      	ldr	r3, [r4, #0]
   11082:	445b      	add	r3, fp
   11084:	6023      	str	r3, [r4, #0]
   11086:	4621      	mov	r1, r4
   11088:	4640      	mov	r0, r8
   1108a:	f7fd fd7f 	bl	eb8c <_fflush_r>
   1108e:	2800      	cmp	r0, #0
   11090:	f43f af55 	beq.w	10f3e <__sfvwrite_r+0x15a>
   11094:	e725      	b.n	10ee2 <__sfvwrite_r+0xfe>
   11096:	4640      	mov	r0, r8
   11098:	f7fa f812 	bl	b0c0 <_realloc_r>
   1109c:	4603      	mov	r3, r0
   1109e:	2800      	cmp	r0, #0
   110a0:	d1de      	bne.n	11060 <__sfvwrite_r+0x27c>
   110a2:	6921      	ldr	r1, [r4, #16]
   110a4:	4640      	mov	r0, r8
   110a6:	f7fb f9ed 	bl	c484 <_free_r>
   110aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   110ae:	220c      	movs	r2, #12
   110b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   110b4:	f8c8 2000 	str.w	r2, [r8]
   110b8:	e715      	b.n	10ee6 <__sfvwrite_r+0x102>
   110ba:	1c72      	adds	r2, r6, #1
   110bc:	4691      	mov	r9, r2
   110be:	e726      	b.n	10f0e <__sfvwrite_r+0x12a>
   110c0:	220c      	movs	r2, #12
   110c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   110c6:	f8c8 2000 	str.w	r2, [r8]
   110ca:	e70c      	b.n	10ee6 <__sfvwrite_r+0x102>
   110cc:	f04f 30ff 	mov.w	r0, #4294967295
   110d0:	e6ba      	b.n	10e48 <__sfvwrite_r+0x64>
   110d2:	bf00      	nop
   110d4:	7ffffc00 	.word	0x7ffffc00

000110d8 <__swsetup_r>:
   110d8:	b538      	push	{r3, r4, r5, lr}
   110da:	4b31      	ldr	r3, [pc, #196]	; (111a0 <__swsetup_r+0xc8>)
   110dc:	681b      	ldr	r3, [r3, #0]
   110de:	4605      	mov	r5, r0
   110e0:	460c      	mov	r4, r1
   110e2:	b113      	cbz	r3, 110ea <__swsetup_r+0x12>
   110e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   110e6:	2a00      	cmp	r2, #0
   110e8:	d04e      	beq.n	11188 <__swsetup_r+0xb0>
   110ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   110ee:	0718      	lsls	r0, r3, #28
   110f0:	b29a      	uxth	r2, r3
   110f2:	d51c      	bpl.n	1112e <__swsetup_r+0x56>
   110f4:	6921      	ldr	r1, [r4, #16]
   110f6:	b329      	cbz	r1, 11144 <__swsetup_r+0x6c>
   110f8:	f012 0001 	ands.w	r0, r2, #1
   110fc:	d007      	beq.n	1110e <__swsetup_r+0x36>
   110fe:	2000      	movs	r0, #0
   11100:	60a0      	str	r0, [r4, #8]
   11102:	6960      	ldr	r0, [r4, #20]
   11104:	4240      	negs	r0, r0
   11106:	61a0      	str	r0, [r4, #24]
   11108:	b139      	cbz	r1, 1111a <__swsetup_r+0x42>
   1110a:	2000      	movs	r0, #0
   1110c:	bd38      	pop	{r3, r4, r5, pc}
   1110e:	0795      	lsls	r5, r2, #30
   11110:	bf58      	it	pl
   11112:	6960      	ldrpl	r0, [r4, #20]
   11114:	60a0      	str	r0, [r4, #8]
   11116:	2900      	cmp	r1, #0
   11118:	d1f7      	bne.n	1110a <__swsetup_r+0x32>
   1111a:	0612      	lsls	r2, r2, #24
   1111c:	bf58      	it	pl
   1111e:	4608      	movpl	r0, r1
   11120:	d5f4      	bpl.n	1110c <__swsetup_r+0x34>
   11122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11126:	81a3      	strh	r3, [r4, #12]
   11128:	f04f 30ff 	mov.w	r0, #4294967295
   1112c:	bd38      	pop	{r3, r4, r5, pc}
   1112e:	06d1      	lsls	r1, r2, #27
   11130:	d52e      	bpl.n	11190 <__swsetup_r+0xb8>
   11132:	0752      	lsls	r2, r2, #29
   11134:	d414      	bmi.n	11160 <__swsetup_r+0x88>
   11136:	6921      	ldr	r1, [r4, #16]
   11138:	f043 0308 	orr.w	r3, r3, #8
   1113c:	81a3      	strh	r3, [r4, #12]
   1113e:	b29a      	uxth	r2, r3
   11140:	2900      	cmp	r1, #0
   11142:	d1d9      	bne.n	110f8 <__swsetup_r+0x20>
   11144:	f402 7020 	and.w	r0, r2, #640	; 0x280
   11148:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1114c:	d0d4      	beq.n	110f8 <__swsetup_r+0x20>
   1114e:	4621      	mov	r1, r4
   11150:	4628      	mov	r0, r5
   11152:	f000 f947 	bl	113e4 <__smakebuf_r>
   11156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1115a:	6921      	ldr	r1, [r4, #16]
   1115c:	b29a      	uxth	r2, r3
   1115e:	e7cb      	b.n	110f8 <__swsetup_r+0x20>
   11160:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11162:	b151      	cbz	r1, 1117a <__swsetup_r+0xa2>
   11164:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11168:	4291      	cmp	r1, r2
   1116a:	d004      	beq.n	11176 <__swsetup_r+0x9e>
   1116c:	4628      	mov	r0, r5
   1116e:	f7fb f989 	bl	c484 <_free_r>
   11172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11176:	2200      	movs	r2, #0
   11178:	6322      	str	r2, [r4, #48]	; 0x30
   1117a:	6921      	ldr	r1, [r4, #16]
   1117c:	2200      	movs	r2, #0
   1117e:	e9c4 1200 	strd	r1, r2, [r4]
   11182:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   11186:	e7d7      	b.n	11138 <__swsetup_r+0x60>
   11188:	4618      	mov	r0, r3
   1118a:	f7fa fbe9 	bl	b960 <__sinit>
   1118e:	e7ac      	b.n	110ea <__swsetup_r+0x12>
   11190:	2209      	movs	r2, #9
   11192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11196:	602a      	str	r2, [r5, #0]
   11198:	f04f 30ff 	mov.w	r0, #4294967295
   1119c:	81a3      	strh	r3, [r4, #12]
   1119e:	bd38      	pop	{r3, r4, r5, pc}
   111a0:	200049b4 	.word	0x200049b4

000111a4 <__fputwc>:
   111a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111a8:	b082      	sub	sp, #8
   111aa:	4682      	mov	sl, r0
   111ac:	4688      	mov	r8, r1
   111ae:	4614      	mov	r4, r2
   111b0:	f7fa fdf0 	bl	bd94 <__locale_mb_cur_max>
   111b4:	2801      	cmp	r0, #1
   111b6:	d103      	bne.n	111c0 <__fputwc+0x1c>
   111b8:	f108 33ff 	add.w	r3, r8, #4294967295
   111bc:	2bfe      	cmp	r3, #254	; 0xfe
   111be:	d936      	bls.n	1122e <__fputwc+0x8a>
   111c0:	f10d 0904 	add.w	r9, sp, #4
   111c4:	4642      	mov	r2, r8
   111c6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   111ca:	4649      	mov	r1, r9
   111cc:	4650      	mov	r0, sl
   111ce:	f7fe fd01 	bl	fbd4 <_wcrtomb_r>
   111d2:	1c42      	adds	r2, r0, #1
   111d4:	4606      	mov	r6, r0
   111d6:	d032      	beq.n	1123e <__fputwc+0x9a>
   111d8:	b320      	cbz	r0, 11224 <__fputwc+0x80>
   111da:	f89d c004 	ldrb.w	ip, [sp, #4]
   111de:	2500      	movs	r5, #0
   111e0:	e009      	b.n	111f6 <__fputwc+0x52>
   111e2:	6823      	ldr	r3, [r4, #0]
   111e4:	1c5a      	adds	r2, r3, #1
   111e6:	6022      	str	r2, [r4, #0]
   111e8:	f883 c000 	strb.w	ip, [r3]
   111ec:	3501      	adds	r5, #1
   111ee:	42b5      	cmp	r5, r6
   111f0:	d218      	bcs.n	11224 <__fputwc+0x80>
   111f2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   111f6:	68a3      	ldr	r3, [r4, #8]
   111f8:	3b01      	subs	r3, #1
   111fa:	2b00      	cmp	r3, #0
   111fc:	60a3      	str	r3, [r4, #8]
   111fe:	daf0      	bge.n	111e2 <__fputwc+0x3e>
   11200:	69a7      	ldr	r7, [r4, #24]
   11202:	42bb      	cmp	r3, r7
   11204:	4661      	mov	r1, ip
   11206:	4622      	mov	r2, r4
   11208:	4650      	mov	r0, sl
   1120a:	db02      	blt.n	11212 <__fputwc+0x6e>
   1120c:	f1bc 0f0a 	cmp.w	ip, #10
   11210:	d1e7      	bne.n	111e2 <__fputwc+0x3e>
   11212:	f000 f953 	bl	114bc <__swbuf_r>
   11216:	1c43      	adds	r3, r0, #1
   11218:	d1e8      	bne.n	111ec <__fputwc+0x48>
   1121a:	4606      	mov	r6, r0
   1121c:	4630      	mov	r0, r6
   1121e:	b002      	add	sp, #8
   11220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11224:	4646      	mov	r6, r8
   11226:	4630      	mov	r0, r6
   11228:	b002      	add	sp, #8
   1122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1122e:	fa5f fc88 	uxtb.w	ip, r8
   11232:	f88d c004 	strb.w	ip, [sp, #4]
   11236:	4606      	mov	r6, r0
   11238:	f10d 0904 	add.w	r9, sp, #4
   1123c:	e7cf      	b.n	111de <__fputwc+0x3a>
   1123e:	89a3      	ldrh	r3, [r4, #12]
   11240:	4630      	mov	r0, r6
   11242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11246:	81a3      	strh	r3, [r4, #12]
   11248:	b002      	add	sp, #8
   1124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1124e:	bf00      	nop

00011250 <_fputwc_r>:
   11250:	b530      	push	{r4, r5, lr}
   11252:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11254:	f013 0f01 	tst.w	r3, #1
   11258:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1125c:	4614      	mov	r4, r2
   1125e:	b083      	sub	sp, #12
   11260:	4605      	mov	r5, r0
   11262:	b29a      	uxth	r2, r3
   11264:	d101      	bne.n	1126a <_fputwc_r+0x1a>
   11266:	0598      	lsls	r0, r3, #22
   11268:	d51c      	bpl.n	112a4 <_fputwc_r+0x54>
   1126a:	0490      	lsls	r0, r2, #18
   1126c:	d406      	bmi.n	1127c <_fputwc_r+0x2c>
   1126e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   11274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11278:	81a3      	strh	r3, [r4, #12]
   1127a:	6662      	str	r2, [r4, #100]	; 0x64
   1127c:	4622      	mov	r2, r4
   1127e:	4628      	mov	r0, r5
   11280:	f7ff ff90 	bl	111a4 <__fputwc>
   11284:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11286:	07da      	lsls	r2, r3, #31
   11288:	4605      	mov	r5, r0
   1128a:	d402      	bmi.n	11292 <_fputwc_r+0x42>
   1128c:	89a3      	ldrh	r3, [r4, #12]
   1128e:	059b      	lsls	r3, r3, #22
   11290:	d502      	bpl.n	11298 <_fputwc_r+0x48>
   11292:	4628      	mov	r0, r5
   11294:	b003      	add	sp, #12
   11296:	bd30      	pop	{r4, r5, pc}
   11298:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1129a:	f7fa fe17 	bl	becc <__retarget_lock_release_recursive>
   1129e:	4628      	mov	r0, r5
   112a0:	b003      	add	sp, #12
   112a2:	bd30      	pop	{r4, r5, pc}
   112a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   112a6:	9101      	str	r1, [sp, #4]
   112a8:	f7fa fe0e 	bl	bec8 <__retarget_lock_acquire_recursive>
   112ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   112b0:	9901      	ldr	r1, [sp, #4]
   112b2:	b29a      	uxth	r2, r3
   112b4:	e7d9      	b.n	1126a <_fputwc_r+0x1a>
   112b6:	bf00      	nop

000112b8 <_wcsnrtombs_l>:
   112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112bc:	b08b      	sub	sp, #44	; 0x2c
   112be:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   112c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   112c4:	9103      	str	r1, [sp, #12]
   112c6:	4681      	mov	r9, r0
   112c8:	9205      	str	r2, [sp, #20]
   112ca:	461e      	mov	r6, r3
   112cc:	f1b8 0f00 	cmp.w	r8, #0
   112d0:	d05c      	beq.n	1138c <_wcsnrtombs_l+0xd4>
   112d2:	9b03      	ldr	r3, [sp, #12]
   112d4:	2b00      	cmp	r3, #0
   112d6:	d05e      	beq.n	11396 <_wcsnrtombs_l+0xde>
   112d8:	9b05      	ldr	r3, [sp, #20]
   112da:	681d      	ldr	r5, [r3, #0]
   112dc:	2f00      	cmp	r7, #0
   112de:	d06a      	beq.n	113b6 <_wcsnrtombs_l+0xfe>
   112e0:	1e74      	subs	r4, r6, #1
   112e2:	b34e      	cbz	r6, 11338 <_wcsnrtombs_l+0x80>
   112e4:	9b03      	ldr	r3, [sp, #12]
   112e6:	9304      	str	r3, [sp, #16]
   112e8:	3d04      	subs	r5, #4
   112ea:	2600      	movs	r6, #0
   112ec:	9501      	str	r5, [sp, #4]
   112ee:	e00b      	b.n	11308 <_wcsnrtombs_l+0x50>
   112f0:	9b03      	ldr	r3, [sp, #12]
   112f2:	bb2b      	cbnz	r3, 11340 <_wcsnrtombs_l+0x88>
   112f4:	9b01      	ldr	r3, [sp, #4]
   112f6:	681a      	ldr	r2, [r3, #0]
   112f8:	2a00      	cmp	r2, #0
   112fa:	d03a      	beq.n	11372 <_wcsnrtombs_l+0xba>
   112fc:	45bc      	cmp	ip, r7
   112fe:	d25c      	bcs.n	113ba <_wcsnrtombs_l+0x102>
   11300:	3c01      	subs	r4, #1
   11302:	1c63      	adds	r3, r4, #1
   11304:	4666      	mov	r6, ip
   11306:	d017      	beq.n	11338 <_wcsnrtombs_l+0x80>
   11308:	f8d8 3000 	ldr.w	r3, [r8]
   1130c:	9302      	str	r3, [sp, #8]
   1130e:	9b01      	ldr	r3, [sp, #4]
   11310:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   11314:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11318:	9301      	str	r3, [sp, #4]
   1131a:	a907      	add	r1, sp, #28
   1131c:	4643      	mov	r3, r8
   1131e:	4648      	mov	r0, r9
   11320:	f8d8 b004 	ldr.w	fp, [r8, #4]
   11324:	47a8      	blx	r5
   11326:	1c42      	adds	r2, r0, #1
   11328:	d03a      	beq.n	113a0 <_wcsnrtombs_l+0xe8>
   1132a:	eb00 0c06 	add.w	ip, r0, r6
   1132e:	45bc      	cmp	ip, r7
   11330:	d9de      	bls.n	112f0 <_wcsnrtombs_l+0x38>
   11332:	9b02      	ldr	r3, [sp, #8]
   11334:	e9c8 3b00 	strd	r3, fp, [r8]
   11338:	4630      	mov	r0, r6
   1133a:	b00b      	add	sp, #44	; 0x2c
   1133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11340:	2800      	cmp	r0, #0
   11342:	dd0e      	ble.n	11362 <_wcsnrtombs_l+0xaa>
   11344:	9b04      	ldr	r3, [sp, #16]
   11346:	9d01      	ldr	r5, [sp, #4]
   11348:	4418      	add	r0, r3
   1134a:	1e5a      	subs	r2, r3, #1
   1134c:	a907      	add	r1, sp, #28
   1134e:	f100 3eff 	add.w	lr, r0, #4294967295
   11352:	f811 3b01 	ldrb.w	r3, [r1], #1
   11356:	f802 3f01 	strb.w	r3, [r2, #1]!
   1135a:	4572      	cmp	r2, lr
   1135c:	d1f9      	bne.n	11352 <_wcsnrtombs_l+0x9a>
   1135e:	9501      	str	r5, [sp, #4]
   11360:	9004      	str	r0, [sp, #16]
   11362:	9b05      	ldr	r3, [sp, #20]
   11364:	681a      	ldr	r2, [r3, #0]
   11366:	3204      	adds	r2, #4
   11368:	601a      	str	r2, [r3, #0]
   1136a:	9b01      	ldr	r3, [sp, #4]
   1136c:	681a      	ldr	r2, [r3, #0]
   1136e:	2a00      	cmp	r2, #0
   11370:	d1c4      	bne.n	112fc <_wcsnrtombs_l+0x44>
   11372:	9b03      	ldr	r3, [sp, #12]
   11374:	b10b      	cbz	r3, 1137a <_wcsnrtombs_l+0xc2>
   11376:	9b05      	ldr	r3, [sp, #20]
   11378:	601a      	str	r2, [r3, #0]
   1137a:	f10c 36ff 	add.w	r6, ip, #4294967295
   1137e:	2200      	movs	r2, #0
   11380:	4630      	mov	r0, r6
   11382:	f8c8 2000 	str.w	r2, [r8]
   11386:	b00b      	add	sp, #44	; 0x2c
   11388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1138c:	9b03      	ldr	r3, [sp, #12]
   1138e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   11392:	2b00      	cmp	r3, #0
   11394:	d1a0      	bne.n	112d8 <_wcsnrtombs_l+0x20>
   11396:	9b05      	ldr	r3, [sp, #20]
   11398:	f04f 37ff 	mov.w	r7, #4294967295
   1139c:	681d      	ldr	r5, [r3, #0]
   1139e:	e79f      	b.n	112e0 <_wcsnrtombs_l+0x28>
   113a0:	4606      	mov	r6, r0
   113a2:	218a      	movs	r1, #138	; 0x8a
   113a4:	2200      	movs	r2, #0
   113a6:	4630      	mov	r0, r6
   113a8:	f8c9 1000 	str.w	r1, [r9]
   113ac:	f8c8 2000 	str.w	r2, [r8]
   113b0:	b00b      	add	sp, #44	; 0x2c
   113b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113b6:	463e      	mov	r6, r7
   113b8:	e7be      	b.n	11338 <_wcsnrtombs_l+0x80>
   113ba:	4666      	mov	r6, ip
   113bc:	e7bc      	b.n	11338 <_wcsnrtombs_l+0x80>
   113be:	bf00      	nop

000113c0 <_wcsnrtombs_r>:
   113c0:	b510      	push	{r4, lr}
   113c2:	b084      	sub	sp, #16
   113c4:	4c05      	ldr	r4, [pc, #20]	; (113dc <_wcsnrtombs_r+0x1c>)
   113c6:	9806      	ldr	r0, [sp, #24]
   113c8:	9000      	str	r0, [sp, #0]
   113ca:	9807      	ldr	r0, [sp, #28]
   113cc:	9001      	str	r0, [sp, #4]
   113ce:	4804      	ldr	r0, [pc, #16]	; (113e0 <_wcsnrtombs_r+0x20>)
   113d0:	6800      	ldr	r0, [r0, #0]
   113d2:	9402      	str	r4, [sp, #8]
   113d4:	f7ff ff70 	bl	112b8 <_wcsnrtombs_l>
   113d8:	b004      	add	sp, #16
   113da:	bd10      	pop	{r4, pc}
   113dc:	2000442c 	.word	0x2000442c
   113e0:	200049b4 	.word	0x200049b4

000113e4 <__smakebuf_r>:
   113e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113e8:	898b      	ldrh	r3, [r1, #12]
   113ea:	460c      	mov	r4, r1
   113ec:	0799      	lsls	r1, r3, #30
   113ee:	b096      	sub	sp, #88	; 0x58
   113f0:	d508      	bpl.n	11404 <__smakebuf_r+0x20>
   113f2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   113f6:	2201      	movs	r2, #1
   113f8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   113fc:	6023      	str	r3, [r4, #0]
   113fe:	b016      	add	sp, #88	; 0x58
   11400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11408:	2900      	cmp	r1, #0
   1140a:	4606      	mov	r6, r0
   1140c:	db25      	blt.n	1145a <__smakebuf_r+0x76>
   1140e:	466a      	mov	r2, sp
   11410:	f000 f8ac 	bl	1156c <_fstat_r>
   11414:	2800      	cmp	r0, #0
   11416:	db1f      	blt.n	11458 <__smakebuf_r+0x74>
   11418:	9d01      	ldr	r5, [sp, #4]
   1141a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1141e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   11422:	fab5 f585 	clz	r5, r5
   11426:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1142a:	096d      	lsrs	r5, r5, #5
   1142c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   11430:	4641      	mov	r1, r8
   11432:	4630      	mov	r0, r6
   11434:	f7f9 fb7c 	bl	ab30 <_malloc_r>
   11438:	b1e0      	cbz	r0, 11474 <__smakebuf_r+0x90>
   1143a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1143e:	f8c4 8014 	str.w	r8, [r4, #20]
   11442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11446:	6020      	str	r0, [r4, #0]
   11448:	6120      	str	r0, [r4, #16]
   1144a:	81a3      	strh	r3, [r4, #12]
   1144c:	bb35      	cbnz	r5, 1149c <__smakebuf_r+0xb8>
   1144e:	433b      	orrs	r3, r7
   11450:	81a3      	strh	r3, [r4, #12]
   11452:	b016      	add	sp, #88	; 0x58
   11454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11458:	89a3      	ldrh	r3, [r4, #12]
   1145a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1145e:	d019      	beq.n	11494 <__smakebuf_r+0xb0>
   11460:	f04f 0840 	mov.w	r8, #64	; 0x40
   11464:	2500      	movs	r5, #0
   11466:	4641      	mov	r1, r8
   11468:	4630      	mov	r0, r6
   1146a:	462f      	mov	r7, r5
   1146c:	f7f9 fb60 	bl	ab30 <_malloc_r>
   11470:	2800      	cmp	r0, #0
   11472:	d1e2      	bne.n	1143a <__smakebuf_r+0x56>
   11474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11478:	059a      	lsls	r2, r3, #22
   1147a:	d4c0      	bmi.n	113fe <__smakebuf_r+0x1a>
   1147c:	f023 0303 	bic.w	r3, r3, #3
   11480:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11484:	f043 0302 	orr.w	r3, r3, #2
   11488:	2101      	movs	r1, #1
   1148a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1148e:	81a3      	strh	r3, [r4, #12]
   11490:	6022      	str	r2, [r4, #0]
   11492:	e7b4      	b.n	113fe <__smakebuf_r+0x1a>
   11494:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11498:	462f      	mov	r7, r5
   1149a:	e7c9      	b.n	11430 <__smakebuf_r+0x4c>
   1149c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   114a0:	4630      	mov	r0, r6
   114a2:	f000 f879 	bl	11598 <_isatty_r>
   114a6:	b910      	cbnz	r0, 114ae <__smakebuf_r+0xca>
   114a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114ac:	e7cf      	b.n	1144e <__smakebuf_r+0x6a>
   114ae:	89a3      	ldrh	r3, [r4, #12]
   114b0:	f023 0303 	bic.w	r3, r3, #3
   114b4:	f043 0301 	orr.w	r3, r3, #1
   114b8:	b21b      	sxth	r3, r3
   114ba:	e7c8      	b.n	1144e <__smakebuf_r+0x6a>

000114bc <__swbuf_r>:
   114bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114be:	460d      	mov	r5, r1
   114c0:	4614      	mov	r4, r2
   114c2:	4606      	mov	r6, r0
   114c4:	b110      	cbz	r0, 114cc <__swbuf_r+0x10>
   114c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   114c8:	2b00      	cmp	r3, #0
   114ca:	d04c      	beq.n	11566 <__swbuf_r+0xaa>
   114cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   114d0:	69a3      	ldr	r3, [r4, #24]
   114d2:	60a3      	str	r3, [r4, #8]
   114d4:	0717      	lsls	r7, r2, #28
   114d6:	b290      	uxth	r0, r2
   114d8:	d51b      	bpl.n	11512 <__swbuf_r+0x56>
   114da:	6923      	ldr	r3, [r4, #16]
   114dc:	b1cb      	cbz	r3, 11512 <__swbuf_r+0x56>
   114de:	b2ed      	uxtb	r5, r5
   114e0:	0481      	lsls	r1, r0, #18
   114e2:	462f      	mov	r7, r5
   114e4:	d522      	bpl.n	1152c <__swbuf_r+0x70>
   114e6:	6822      	ldr	r2, [r4, #0]
   114e8:	6961      	ldr	r1, [r4, #20]
   114ea:	1ad3      	subs	r3, r2, r3
   114ec:	4299      	cmp	r1, r3
   114ee:	dd29      	ble.n	11544 <__swbuf_r+0x88>
   114f0:	3301      	adds	r3, #1
   114f2:	68a1      	ldr	r1, [r4, #8]
   114f4:	3901      	subs	r1, #1
   114f6:	60a1      	str	r1, [r4, #8]
   114f8:	1c51      	adds	r1, r2, #1
   114fa:	6021      	str	r1, [r4, #0]
   114fc:	7015      	strb	r5, [r2, #0]
   114fe:	6962      	ldr	r2, [r4, #20]
   11500:	429a      	cmp	r2, r3
   11502:	d027      	beq.n	11554 <__swbuf_r+0x98>
   11504:	89a3      	ldrh	r3, [r4, #12]
   11506:	07db      	lsls	r3, r3, #31
   11508:	d501      	bpl.n	1150e <__swbuf_r+0x52>
   1150a:	2d0a      	cmp	r5, #10
   1150c:	d022      	beq.n	11554 <__swbuf_r+0x98>
   1150e:	4638      	mov	r0, r7
   11510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11512:	4621      	mov	r1, r4
   11514:	4630      	mov	r0, r6
   11516:	f7ff fddf 	bl	110d8 <__swsetup_r>
   1151a:	bb08      	cbnz	r0, 11560 <__swbuf_r+0xa4>
   1151c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11520:	6923      	ldr	r3, [r4, #16]
   11522:	b290      	uxth	r0, r2
   11524:	b2ed      	uxtb	r5, r5
   11526:	0481      	lsls	r1, r0, #18
   11528:	462f      	mov	r7, r5
   1152a:	d4dc      	bmi.n	114e6 <__swbuf_r+0x2a>
   1152c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11530:	81a2      	strh	r2, [r4, #12]
   11532:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11534:	6961      	ldr	r1, [r4, #20]
   11536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1153a:	6662      	str	r2, [r4, #100]	; 0x64
   1153c:	6822      	ldr	r2, [r4, #0]
   1153e:	1ad3      	subs	r3, r2, r3
   11540:	4299      	cmp	r1, r3
   11542:	dcd5      	bgt.n	114f0 <__swbuf_r+0x34>
   11544:	4621      	mov	r1, r4
   11546:	4630      	mov	r0, r6
   11548:	f7fd fb20 	bl	eb8c <_fflush_r>
   1154c:	b940      	cbnz	r0, 11560 <__swbuf_r+0xa4>
   1154e:	6822      	ldr	r2, [r4, #0]
   11550:	2301      	movs	r3, #1
   11552:	e7ce      	b.n	114f2 <__swbuf_r+0x36>
   11554:	4621      	mov	r1, r4
   11556:	4630      	mov	r0, r6
   11558:	f7fd fb18 	bl	eb8c <_fflush_r>
   1155c:	2800      	cmp	r0, #0
   1155e:	d0d6      	beq.n	1150e <__swbuf_r+0x52>
   11560:	f04f 37ff 	mov.w	r7, #4294967295
   11564:	e7d3      	b.n	1150e <__swbuf_r+0x52>
   11566:	f7fa f9fb 	bl	b960 <__sinit>
   1156a:	e7af      	b.n	114cc <__swbuf_r+0x10>

0001156c <_fstat_r>:
   1156c:	b570      	push	{r4, r5, r6, lr}
   1156e:	460c      	mov	r4, r1
   11570:	4d08      	ldr	r5, [pc, #32]	; (11594 <_fstat_r+0x28>)
   11572:	4603      	mov	r3, r0
   11574:	2600      	movs	r6, #0
   11576:	4620      	mov	r0, r4
   11578:	4611      	mov	r1, r2
   1157a:	461c      	mov	r4, r3
   1157c:	602e      	str	r6, [r5, #0]
   1157e:	f7f7 febd 	bl	92fc <_fstat>
   11582:	1c43      	adds	r3, r0, #1
   11584:	d000      	beq.n	11588 <_fstat_r+0x1c>
   11586:	bd70      	pop	{r4, r5, r6, pc}
   11588:	682b      	ldr	r3, [r5, #0]
   1158a:	2b00      	cmp	r3, #0
   1158c:	d0fb      	beq.n	11586 <_fstat_r+0x1a>
   1158e:	6023      	str	r3, [r4, #0]
   11590:	bd70      	pop	{r4, r5, r6, pc}
   11592:	bf00      	nop
   11594:	200053dc 	.word	0x200053dc

00011598 <_isatty_r>:
   11598:	b538      	push	{r3, r4, r5, lr}
   1159a:	4d07      	ldr	r5, [pc, #28]	; (115b8 <_isatty_r+0x20>)
   1159c:	2200      	movs	r2, #0
   1159e:	4604      	mov	r4, r0
   115a0:	4608      	mov	r0, r1
   115a2:	602a      	str	r2, [r5, #0]
   115a4:	f7f7 feb0 	bl	9308 <_isatty>
   115a8:	1c43      	adds	r3, r0, #1
   115aa:	d000      	beq.n	115ae <_isatty_r+0x16>
   115ac:	bd38      	pop	{r3, r4, r5, pc}
   115ae:	682b      	ldr	r3, [r5, #0]
   115b0:	2b00      	cmp	r3, #0
   115b2:	d0fb      	beq.n	115ac <_isatty_r+0x14>
   115b4:	6023      	str	r3, [r4, #0]
   115b6:	bd38      	pop	{r3, r4, r5, pc}
   115b8:	200053dc 	.word	0x200053dc
   115bc:	00000000 	.word	0x00000000

000115c0 <___init_veneer>:
   115c0:	f85f f000 	ldr.w	pc, [pc]	; 115c4 <___init_veneer+0x4>
   115c4:	60001dfd 	.word	0x60001dfd

000115c8 <___reboot_Teensyduino__veneer>:
   115c8:	f85f f000 	ldr.w	pc, [pc]	; 115cc <___reboot_Teensyduino__veneer+0x4>
   115cc:	60001d55 	.word	0x60001d55

Disassembly of section .fini:

000115d0 <_fini>:
   115d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115d2:	bf00      	nop
