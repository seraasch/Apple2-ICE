
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc85 	bl	60001e40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc4c 	bl	60001e20 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc41 	bl	60001e30 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc33 	bl	60001e18 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00011618 	.word	0x00011618
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60013578 	.word	0x60013578
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	0000917d 	.word	0x0000917d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000a595 	.word	0x0000a595
600015f4:	2001886c 	.word	0x2001886c
600015f8:	0000a599 	.word	0x0000a599
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20018870 	.word	0x20018870
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9f2 	bl	60001e10 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	200188a7 	.word	0x200188a7
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	2001885c 	.word	0x2001885c
60001c50:	20018858 	.word	0x20018858
60001c54:	20018860 	.word	0x20018860
60001c58:	20018864 	.word	0x20018864
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	00009359 	.word	0x00009359

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8d4 	bl	60001e28 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f895 	bl	60001e08 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f89d 	bl	60001e38 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	00009541 	.word	0x00009541

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	200188a1 	.word	0x200188a1

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__delay_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__delay_veneer+0x4>
60001e0c:	00008ebd 	.word	0x00008ebd

60001e10 <__sm_set_pool_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__sm_set_pool_veneer+0x4>
60001e14:	0000aa8d 	.word	0x0000aa8d

60001e18 <__main_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__main_veneer+0x4>
60001e1c:	00008fd5 	.word	0x00008fd5

60001e20 <__pwm_init_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__pwm_init_veneer+0x4>
60001e24:	0000a925 	.word	0x0000a925

60001e28 <__usb_init_serialnumber_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__usb_init_serialnumber_veneer+0x4>
60001e2c:	00009cb1 	.word	0x00009cb1

60001e30 <____libc_init_array_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <____libc_init_array_veneer+0x4>
60001e34:	0000beb9 	.word	0x0000beb9

60001e38 <__memset_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__memset_veneer+0x4>
60001e3c:	0000bc01 	.word	0x0000bc01

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	0000a5b9 	.word	0x0000a5b9

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 00008919                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	60019400 	.word	0x60019400

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f008 fd8d 	bl	8b8c <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f008 fd87 	bl	8b8c <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f008 fd81 	bl	8b8c <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f008 fce9 	bl	8a7c <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f008 fce5 	bl	8a7c <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f008 fce2 	bl	8a7c <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <Print::println(char const*) [clone .isra.0]>:
      cc:	b538      	push	{r3, r4, r5, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	b149      	cbz	r1, e6 <Print::println(char const*) [clone .isra.0]+0x1a>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4608      	mov	r0, r1
      d4:	460d      	mov	r5, r1
      d6:	f00c f8f3 	bl	c2c0 <strlen>
      da:	6823      	ldr	r3, [r4, #0]
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	4602      	mov	r2, r0
      de:	4629      	mov	r1, r5
      e0:	685b      	ldr	r3, [r3, #4]
        return("");
      e2:	4620      	mov	r0, r4
      e4:	4798      	blx	r3
      e6:	4620      	mov	r0, r4
      e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}
      ec:	f008 bc70 	b.w	89d0 <Print::println()>

000000f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>:
      f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      f4:	b093      	sub	sp, #76	; 0x4c
      f6:	460c      	mov	r4, r1
      f8:	4607      	mov	r7, r0
      fa:	2100      	movs	r1, #0
      fc:	a802      	add	r0, sp, #8
      fe:	9301      	str	r3, [sp, #4]
     100:	4691      	mov	r9, r2
     102:	f8df 8340 	ldr.w	r8, [pc, #832]	; 444 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x354>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f008 fcf5 	bl	8af4 <String::String(char const*)>
     10a:	2334      	movs	r3, #52	; 0x34
     10c:	fb03 8304 	mla	r3, r3, r4, r8
	if (newbuffer) {
     110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	2b02      	cmp	r3, #2
		capacity = maxStrLen;
     116:	d022      	beq.n	15e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x6e>
     118:	eb04 0644 	add.w	r6, r4, r4, lsl #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	2b03      	cmp	r3, #3
     11e:	ad0e      	add	r5, sp, #56	; 0x38
     120:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	ea4f 0686 	mov.w	r6, r6, lsl #2
     128:	d068      	beq.n	1fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x10c>
	mask = p->mask;
	if (pinmode & mask) {
     12a:	eb08 0106 	add.w	r1, r8, r6
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4628      	mov	r0, r5
     130:	f008 fc70 	bl	8a14 <String::String(String const&)>
	mask = p->mask;
     134:	49ae      	ldr	r1, [pc, #696]	; (3f0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x300>)
	if (pinmode & mask) {
     136:	4628      	mov	r0, r5
     138:	f008 fda8 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	a902      	add	r1, sp, #8
     13e:	f008 fd9d 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     142:	4601      	mov	r1, r0
     144:	4638      	mov	r0, r7
     146:	f008 fc65 	bl	8a14 <String::String(String const&)>
     14a:	4628      	mov	r0, r5
     14c:	f008 fc96 	bl	8a7c <String::~String()>
     150:	a802      	add	r0, sp, #8
     152:	f008 fc93 	bl	8a7c <String::~String()>
     156:	4638      	mov	r0, r7
     158:	b013      	add	sp, #76	; 0x4c
     15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
     162:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	2210      	movs	r2, #16
     168:	4649      	mov	r1, r9
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
     16e:	4650      	mov	r0, sl
     170:	f008 fcd4 	bl	8b1c <String::String(int, unsigned char)>
     174:	499f      	ldr	r1, [pc, #636]	; (3f4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x304>)
     176:	00b6      	lsls	r6, r6, #2
     178:	ad0e      	add	r5, sp, #56	; 0x38
     17a:	f106 0b10 	add.w	fp, r6, #16
     17e:	44c3      	add	fp, r8
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	4658      	mov	r0, fp
     182:	f008 fd91 	bl	8ca8 <String::equals(char const*) const>
     186:	2800      	cmp	r0, #0
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     188:	f040 8097 	bne.w	2ba <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ca>
     18c:	499a      	ldr	r1, [pc, #616]	; (3f8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x308>)
     18e:	4658      	mov	r0, fp
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	f008 fd8a 	bl	8ca8 <String::equals(char const*) const>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	2800      	cmp	r0, #0
     196:	d060      	beq.n	25a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x16a>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4998      	ldr	r1, [pc, #608]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     19a:	4628      	mov	r0, r5
     19c:	f008 fcaa 	bl	8af4 <String::String(char const*)>
     1a0:	4651      	mov	r1, sl
     1a2:	4628      	mov	r0, r5
     1a4:	f008 fd6a 	bl	8c7c <operator+(StringSumHelper const&, String const&)>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	4601      	mov	r1, r0
     1aa:	a802      	add	r0, sp, #8
     1ac:	f008 fce6 	bl	8b7c <String::operator=(String const&)>

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1b0:	4628      	mov	r0, r5
     1b2:	f008 fc63 	bl	8a7c <String::~String()>

	// write out computed CTRL
	port->CTRL = ctrl;
     1b6:	4992      	ldr	r1, [pc, #584]	; (400 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x310>)

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	4658      	mov	r0, fp
     1ba:	f008 fd75 	bl	8ca8 <String::equals(char const*) const>
     1be:	2800      	cmp	r0, #0
     1c0:	f040 8103 	bne.w	3ca <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2da>

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	498f      	ldr	r1, [pc, #572]	; (404 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x314>)
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c6:	4658      	mov	r0, fp
     1c8:	f008 fd6e 	bl	8ca8 <String::equals(char const*) const>
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1cc:	2800      	cmp	r0, #0
     1ce:	f040 80e9 	bne.w	3a4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2b4>
	port->STAT = c;
     1d2:	498d      	ldr	r1, [pc, #564]	; (408 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x318>)

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d4:	4658      	mov	r0, fp
     1d6:	f008 fd67 	bl	8ca8 <String::equals(char const*) const>
     1da:	2800      	cmp	r0, #0
     1dc:	f040 80cf 	bne.w	37e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x28e>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	9b04      	ldr	r3, [sp, #16]
     1e2:	2b00      	cmp	r3, #0
};
     1e4:	f000 80b8 	beq.w	358 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x268>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	4650      	mov	r0, sl
     1ea:	f008 fc47 	bl	8a7c <String::~String()>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	2334      	movs	r3, #52	; 0x34
     1f0:	fb03 8404 	mla	r4, r3, r4, r8
     1f4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
     1f8:	2b03      	cmp	r3, #3
     1fa:	d196      	bne.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     1fc:	f106 0410 	add.w	r4, r6, #16
     200:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	4649      	mov	r1, r9
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     206:	2210      	movs	r2, #16
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     208:	a806      	add	r0, sp, #24
     20a:	4444      	add	r4, r8
     20c:	f008 fc86 	bl	8b1c <String::String(int, unsigned char)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	9901      	ldr	r1, [sp, #4]
     212:	2210      	movs	r2, #16
     214:	4650      	mov	r0, sl
     216:	f008 fc81 	bl	8b1c <String::String(int, unsigned char)>
     21a:	497c      	ldr	r1, [pc, #496]	; (40c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x31c>)
     21c:	4620      	mov	r0, r4
     21e:	f008 fd43 	bl	8ca8 <String::equals(char const*) const>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	2800      	cmp	r0, #0
     224:	d159      	bne.n	2da <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ea>
     226:	497a      	ldr	r1, [pc, #488]	; (410 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x320>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	4620      	mov	r0, r4
     22a:	f008 fd3d 	bl	8ca8 <String::equals(char const*) const>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22e:	2800      	cmp	r0, #0
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	d17c      	bne.n	32c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x23c>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	4978      	ldr	r1, [pc, #480]	; (414 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x324>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	4620      	mov	r0, r4
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	f008 fd37 	bl	8ca8 <String::equals(char const*) const>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	2800      	cmp	r0, #0
     23c:	d160      	bne.n	300 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x210>
     23e:	4976      	ldr	r1, [pc, #472]	; (418 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x328>)
};
     240:	4620      	mov	r0, r4
     242:	f008 fd31 	bl	8ca8 <String::equals(char const*) const>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     246:	bb10      	cbnz	r0, 28e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x19e>
     248:	9b04      	ldr	r3, [sp, #16]
     24a:	b16b      	cbz	r3, 268 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x178>
     24c:	4650      	mov	r0, sl
     24e:	f008 fc15 	bl	8a7c <String::~String()>
     252:	a806      	add	r0, sp, #24
     254:	f008 fc12 	bl	8a7c <String::~String()>
     258:	e767      	b.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     25a:	4970      	ldr	r1, [pc, #448]	; (41c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x32c>)
     25c:	4658      	mov	r0, fp
     25e:	f008 fd23 	bl	8ca8 <String::equals(char const*) const>
     262:	2800      	cmp	r0, #0
     264:	d198      	bne.n	198 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xa8>
     266:	e7a6      	b.n	1b6 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xc6>
     268:	496d      	ldr	r1, [pc, #436]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     26a:	4628      	mov	r0, r5
     26c:	f008 fc42 	bl	8af4 <String::String(char const*)>
     270:	4621      	mov	r1, r4
     272:	4628      	mov	r0, r5
     274:	f008 fd02 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
		}
		if (instr->operands == "(ind)") {
			s = "($" + operand2 + operand1 + ")"; 
		}
		if (s.length() == 0) {
			s = "<unknown_format: " + instr->operands + ">";
     278:	496a      	ldr	r1, [pc, #424]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     27a:	f008 fd07 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     27e:	4601      	mov	r1, r0
     280:	a802      	add	r0, sp, #8
     282:	f008 fc7b 	bl	8b7c <String::operator=(String const&)>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     286:	4628      	mov	r0, r5
     288:	f008 fbf8 	bl	8a7c <String::~String()>
     28c:	e7de      	b.n	24c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x15c>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     28e:	4966      	ldr	r1, [pc, #408]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     290:	4628      	mov	r0, r5
     292:	f008 fc2f 	bl	8af4 <String::String(char const*)>
			s = "($" + operand2 + operand1 + ")"; 
     296:	4651      	mov	r1, sl
     298:	4628      	mov	r0, r5
     29a:	f008 fcef 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     29e:	a906      	add	r1, sp, #24
     2a0:	f008 fcec 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     2a4:	4961      	ldr	r1, [pc, #388]	; (42c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x33c>)
     2a6:	f008 fcf1 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     2aa:	4601      	mov	r1, r0
     2ac:	a802      	add	r0, sp, #8
     2ae:	f008 fc65 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     2b2:	4628      	mov	r0, r5
     2b4:	f008 fbe2 	bl	8a7c <String::~String()>
     2b8:	e7c6      	b.n	248 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x158>
	StringSumHelper(const char *p) : String(p) {}
     2ba:	495d      	ldr	r1, [pc, #372]	; (430 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x340>)
     2bc:	4628      	mov	r0, r5
     2be:	f008 fc19 	bl	8af4 <String::String(char const*)>
			s = "#$" + operand;
     2c2:	4651      	mov	r1, sl
     2c4:	4628      	mov	r0, r5
     2c6:	f008 fcd9 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     2ca:	4601      	mov	r1, r0
     2cc:	a802      	add	r0, sp, #8
     2ce:	f008 fc55 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     2d2:	4628      	mov	r0, r5
     2d4:	f008 fbd2 	bl	8a7c <String::~String()>
     2d8:	e758      	b.n	18c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x9c>
	StringSumHelper(const char *p) : String(p) {}
     2da:	4948      	ldr	r1, [pc, #288]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     2dc:	4628      	mov	r0, r5
     2de:	f008 fc09 	bl	8af4 <String::String(char const*)>
			s = "$" + operand2 + operand1; 
     2e2:	4651      	mov	r1, sl
     2e4:	4628      	mov	r0, r5
     2e6:	f008 fcc9 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     2ea:	a906      	add	r1, sp, #24
     2ec:	f008 fcc6 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     2f0:	4601      	mov	r1, r0
     2f2:	a802      	add	r0, sp, #8
     2f4:	f008 fc42 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     2f8:	4628      	mov	r0, r5
     2fa:	f008 fbbf 	bl	8a7c <String::~String()>
     2fe:	e792      	b.n	226 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x136>
	StringSumHelper(const char *p) : String(p) {}
     300:	493e      	ldr	r1, [pc, #248]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     302:	4628      	mov	r0, r5
     304:	f008 fbf6 	bl	8af4 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",Y"; 
     308:	4651      	mov	r1, sl
     30a:	4628      	mov	r0, r5
     30c:	f008 fcb6 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     310:	a906      	add	r1, sp, #24
     312:	f008 fcb3 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     316:	4947      	ldr	r1, [pc, #284]	; (434 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x344>)
     318:	f008 fcb8 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     31c:	4601      	mov	r1, r0
     31e:	a802      	add	r0, sp, #8
     320:	f008 fc2c 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     324:	4628      	mov	r0, r5
     326:	f008 fba9 	bl	8a7c <String::~String()>
     32a:	e788      	b.n	23e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x14e>
	StringSumHelper(const char *p) : String(p) {}
     32c:	4933      	ldr	r1, [pc, #204]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     32e:	4628      	mov	r0, r5
     330:	f008 fbe0 	bl	8af4 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",X"; 
     334:	4651      	mov	r1, sl
     336:	4628      	mov	r0, r5
     338:	f008 fca0 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     33c:	a906      	add	r1, sp, #24
     33e:	f008 fc9d 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     342:	493d      	ldr	r1, [pc, #244]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     344:	f008 fca2 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     348:	4601      	mov	r1, r0
     34a:	a802      	add	r0, sp, #8
     34c:	f008 fc16 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     350:	4628      	mov	r0, r5
     352:	f008 fb93 	bl	8a7c <String::~String()>
     356:	e76c      	b.n	232 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x142>
	StringSumHelper(const char *p) : String(p) {}
     358:	4931      	ldr	r1, [pc, #196]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     35a:	4628      	mov	r0, r5
     35c:	f008 fbca 	bl	8af4 <String::String(char const*)>
			s = "<unknown_format: " + instr->operands + ">";
     360:	4659      	mov	r1, fp
     362:	4628      	mov	r0, r5
     364:	f008 fc8a 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     368:	492e      	ldr	r1, [pc, #184]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     36a:	f008 fc8f 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     36e:	4601      	mov	r1, r0
     370:	a802      	add	r0, sp, #8
     372:	f008 fc03 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     376:	4628      	mov	r0, r5
     378:	f008 fb80 	bl	8a7c <String::~String()>
     37c:	e734      	b.n	1e8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf8>
	StringSumHelper(const char *p) : String(p) {}
     37e:	491f      	ldr	r1, [pc, #124]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     380:	4628      	mov	r0, r5
     382:	f008 fbb7 	bl	8af4 <String::String(char const*)>
			s = "$" + operand + ",X"; 
     386:	4651      	mov	r1, sl
     388:	4628      	mov	r0, r5
     38a:	f008 fc77 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     38e:	492a      	ldr	r1, [pc, #168]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     390:	f008 fc7c 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     394:	4601      	mov	r1, r0
     396:	a802      	add	r0, sp, #8
     398:	f008 fbf0 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     39c:	4628      	mov	r0, r5
     39e:	f008 fb6d 	bl	8a7c <String::~String()>
     3a2:	e71d      	b.n	1e0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf0>
	StringSumHelper(const char *p) : String(p) {}
     3a4:	4920      	ldr	r1, [pc, #128]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3a6:	4628      	mov	r0, r5
     3a8:	f008 fba4 	bl	8af4 <String::String(char const*)>
			s = "($" + operand + "),Y"; 
     3ac:	4651      	mov	r1, sl
     3ae:	4628      	mov	r0, r5
     3b0:	f008 fc64 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     3b4:	4921      	ldr	r1, [pc, #132]	; (43c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x34c>)
     3b6:	f008 fc69 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     3ba:	4601      	mov	r1, r0
     3bc:	a802      	add	r0, sp, #8
     3be:	f008 fbdd 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     3c2:	4628      	mov	r0, r5
     3c4:	f008 fb5a 	bl	8a7c <String::~String()>
     3c8:	e703      	b.n	1d2 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xe2>
	StringSumHelper(const char *p) : String(p) {}
     3ca:	4917      	ldr	r1, [pc, #92]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3cc:	4628      	mov	r0, r5
     3ce:	f008 fb91 	bl	8af4 <String::String(char const*)>
			s = "($" + operand + ",X)"; 
     3d2:	4651      	mov	r1, sl
     3d4:	4628      	mov	r0, r5
     3d6:	f008 fc51 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
     3da:	4919      	ldr	r1, [pc, #100]	; (440 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x350>)
     3dc:	f008 fc56 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
     3e0:	4601      	mov	r1, r0
     3e2:	a802      	add	r0, sp, #8
     3e4:	f008 fbca 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
     3e8:	4628      	mov	r0, r5
     3ea:	f008 fb47 	bl	8a7c <String::~String()>
     3ee:	e6e9      	b.n	1c4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xd4>
     3f0:	2000041c 	.word	0x2000041c
     3f4:	200003d8 	.word	0x200003d8
     3f8:	200003e0 	.word	0x200003e0
     3fc:	200003e4 	.word	0x200003e4
     400:	200003ec 	.word	0x200003ec
     404:	200003f8 	.word	0x200003f8
     408:	20000400 	.word	0x20000400
     40c:	20000424 	.word	0x20000424
     410:	20000428 	.word	0x20000428
     414:	20000430 	.word	0x20000430
     418:	2000043c 	.word	0x2000043c
     41c:	200003e8 	.word	0x200003e8
     420:	2000040c 	.word	0x2000040c
     424:	20000420 	.word	0x20000420
     428:	200003f4 	.word	0x200003f4
     42c:	20000440 	.word	0x20000440
     430:	200003dc 	.word	0x200003dc
     434:	20000438 	.word	0x20000438
     438:	20000408 	.word	0x20000408
     43c:	200003fc 	.word	0x200003fc
     440:	200003f0 	.word	0x200003f0
     444:	20015418 	.word	0x20015418

00000448 <OpDecoder::~OpDecoder()>:
struct OpDecoder {
     448:	b510      	push	{r4, lr}
     44a:	4604      	mov	r4, r0
     44c:	3020      	adds	r0, #32
     44e:	f008 fb15 	bl	8a7c <String::~String()>
     452:	f104 0010 	add.w	r0, r4, #16
     456:	f008 fb11 	bl	8a7c <String::~String()>
     45a:	4620      	mov	r0, r4
     45c:	f008 fb0e 	bl	8a7c <String::~String()>
     460:	4620      	mov	r0, r4
     462:	bd10      	pop	{r4, pc}

00000464 <initialize_opcode_info()>:
	}
	
	return(instr->opcode + " " + s);
}

void initialize_opcode_info() {
     464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     468:	4cb7      	ldr	r4, [pc, #732]	; (748 <initialize_opcode_info()+0x2e4>)
     46a:	b08f      	sub	sp, #60	; 0x3c

	for (int i=0; i<=255; i++)
		opcode_info[i] = {"---","",0,1};
     46c:	4eb7      	ldr	r6, [pc, #732]	; (74c <initialize_opcode_info()+0x2e8>)
     46e:	f504 5750 	add.w	r7, r4, #13312	; 0x3400
     472:	4db7      	ldr	r5, [pc, #732]	; (750 <initialize_opcode_info()+0x2ec>)
     474:	2234      	movs	r2, #52	; 0x34
     476:	2100      	movs	r1, #0
     478:	a801      	add	r0, sp, #4
     47a:	f00b fbc1 	bl	bc00 <memset>
     47e:	4631      	mov	r1, r6
     480:	a801      	add	r0, sp, #4
     482:	f008 fb37 	bl	8af4 <String::String(char const*)>
     486:	4629      	mov	r1, r5
     488:	a805      	add	r0, sp, #20
     48a:	f008 fb33 	bl	8af4 <String::String(char const*)>
     48e:	220a      	movs	r2, #10
     490:	2100      	movs	r1, #0
     492:	a809      	add	r0, sp, #36	; 0x24
     494:	f008 fb42 	bl	8b1c <String::String(int, unsigned char)>
     498:	2301      	movs	r3, #1
struct OpDecoder {
     49a:	4620      	mov	r0, r4
     49c:	a901      	add	r1, sp, #4
		opcode_info[i] = {"---","",0,1};
     49e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
struct OpDecoder {
     4a2:	f008 fb73 	bl	8b8c <String::operator=(String&&)>
     4a6:	f104 0010 	add.w	r0, r4, #16
     4aa:	a905      	add	r1, sp, #20
     4ac:	f008 fb6e 	bl	8b8c <String::operator=(String&&)>
     4b0:	a909      	add	r1, sp, #36	; 0x24
     4b2:	f104 0020 	add.w	r0, r4, #32
	for (int i=0; i<=255; i++)
     4b6:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
     4b8:	f008 fb68 	bl	8b8c <String::operator=(String&&)>
     4bc:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
     4c0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
     4c4:	a809      	add	r0, sp, #36	; 0x24
     4c6:	f804 2c04 	strb.w	r2, [r4, #-4]
     4ca:	f804 3c03 	strb.w	r3, [r4, #-3]
     4ce:	f008 fad5 	bl	8a7c <String::~String()>
     4d2:	a805      	add	r0, sp, #20
     4d4:	f008 fad2 	bl	8a7c <String::~String()>
     4d8:	a801      	add	r0, sp, #4
     4da:	f008 facf 	bl	8a7c <String::~String()>
	for (int i=0; i<=255; i++)
     4de:	42bc      	cmp	r4, r7
     4e0:	d1c8      	bne.n	474 <initialize_opcode_info()+0x10>

	opcode_info[0x00] = {"BRK","","B",7,1};
     4e2:	499c      	ldr	r1, [pc, #624]	; (754 <initialize_opcode_info()+0x2f0>)
     4e4:	a801      	add	r0, sp, #4
     4e6:	f008 fb05 	bl	8af4 <String::String(char const*)>
     4ea:	4999      	ldr	r1, [pc, #612]	; (750 <initialize_opcode_info()+0x2ec>)
     4ec:	a805      	add	r0, sp, #20
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     4ee:	f240 2706 	movw	r7, #518	; 0x206
	opcode_info[0x00] = {"BRK","","B",7,1};
     4f2:	f008 faff 	bl	8af4 <String::String(char const*)>
     4f6:	4998      	ldr	r1, [pc, #608]	; (758 <initialize_opcode_info()+0x2f4>)
     4f8:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     4fa:	f240 2803 	movw	r8, #515	; 0x203
	opcode_info[0x00] = {"BRK","","B",7,1};
     4fe:	f008 faf9 	bl	8af4 <String::String(char const*)>
     502:	f240 1307 	movw	r3, #263	; 0x107
     506:	a901      	add	r1, sp, #4
     508:	488f      	ldr	r0, [pc, #572]	; (748 <initialize_opcode_info()+0x2e4>)
     50a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     50e:	f7ff fdab 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     512:	a801      	add	r0, sp, #4
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     514:	f240 2a05 	movw	sl, #517	; 0x205
	opcode_info[0x00] = {"BRK","","B",7,1};
     518:	f7ff ff96 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     51c:	498f      	ldr	r1, [pc, #572]	; (75c <initialize_opcode_info()+0x2f8>)
     51e:	a801      	add	r0, sp, #4
	opcode_info[0x08] = {"PHP","","",3,1};
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
     520:	f240 2602 	movw	r6, #514	; 0x202
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     524:	f008 fae6 	bl	8af4 <String::String(char const*)>
     528:	498d      	ldr	r1, [pc, #564]	; (760 <initialize_opcode_info()+0x2fc>)
     52a:	a805      	add	r0, sp, #20
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
     52c:	f44f 7581 	mov.w	r5, #258	; 0x102
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     530:	f008 fae0 	bl	8af4 <String::String(char const*)>
     534:	498b      	ldr	r1, [pc, #556]	; (764 <initialize_opcode_info()+0x300>)
     536:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     538:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     53c:	f008 fada 	bl	8af4 <String::String(char const*)>
     540:	a901      	add	r1, sp, #4
     542:	4889      	ldr	r0, [pc, #548]	; (768 <initialize_opcode_info()+0x304>)
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
     544:	f240 3b06 	movw	fp, #774	; 0x306
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     548:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     54c:	f7ff fd8c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     550:	a801      	add	r0, sp, #4
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     552:	f44f 7901 	mov.w	r9, #516	; 0x204
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     556:	f7ff ff77 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     55a:	4980      	ldr	r1, [pc, #512]	; (75c <initialize_opcode_info()+0x2f8>)
     55c:	a801      	add	r0, sp, #4
     55e:	f008 fac9 	bl	8af4 <String::String(char const*)>
     562:	4982      	ldr	r1, [pc, #520]	; (76c <initialize_opcode_info()+0x308>)
     564:	a805      	add	r0, sp, #20
     566:	f008 fac5 	bl	8af4 <String::String(char const*)>
     56a:	497e      	ldr	r1, [pc, #504]	; (764 <initialize_opcode_info()+0x300>)
     56c:	a809      	add	r0, sp, #36	; 0x24
     56e:	f008 fac1 	bl	8af4 <String::String(char const*)>
     572:	a901      	add	r1, sp, #4
     574:	487e      	ldr	r0, [pc, #504]	; (770 <initialize_opcode_info()+0x30c>)
     576:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     57a:	f7ff fd75 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     57e:	a801      	add	r0, sp, #4
     580:	f7ff ff62 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     584:	497b      	ldr	r1, [pc, #492]	; (774 <initialize_opcode_info()+0x310>)
     586:	a801      	add	r0, sp, #4
     588:	f008 fab4 	bl	8af4 <String::String(char const*)>
     58c:	4977      	ldr	r1, [pc, #476]	; (76c <initialize_opcode_info()+0x308>)
     58e:	a805      	add	r0, sp, #20
     590:	f008 fab0 	bl	8af4 <String::String(char const*)>
     594:	4978      	ldr	r1, [pc, #480]	; (778 <initialize_opcode_info()+0x314>)
     596:	a809      	add	r0, sp, #36	; 0x24
     598:	f008 faac 	bl	8af4 <String::String(char const*)>
     59c:	a901      	add	r1, sp, #4
     59e:	4877      	ldr	r0, [pc, #476]	; (77c <initialize_opcode_info()+0x318>)
     5a0:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     5a4:	f7ff fd60 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5a8:	a801      	add	r0, sp, #4
     5aa:	f7ff ff4d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x08] = {"PHP","","",3,1};
     5ae:	4974      	ldr	r1, [pc, #464]	; (780 <initialize_opcode_info()+0x31c>)
     5b0:	a801      	add	r0, sp, #4
     5b2:	f008 fa9f 	bl	8af4 <String::String(char const*)>
     5b6:	4966      	ldr	r1, [pc, #408]	; (750 <initialize_opcode_info()+0x2ec>)
     5b8:	a805      	add	r0, sp, #20
     5ba:	f008 fa9b 	bl	8af4 <String::String(char const*)>
     5be:	4964      	ldr	r1, [pc, #400]	; (750 <initialize_opcode_info()+0x2ec>)
     5c0:	a809      	add	r0, sp, #36	; 0x24
     5c2:	f008 fa97 	bl	8af4 <String::String(char const*)>
     5c6:	f240 1303 	movw	r3, #259	; 0x103
     5ca:	a901      	add	r1, sp, #4
     5cc:	486d      	ldr	r0, [pc, #436]	; (784 <initialize_opcode_info()+0x320>)
     5ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     5d2:	f7ff fd49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5d6:	a801      	add	r0, sp, #4
     5d8:	f7ff ff36 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
     5dc:	495f      	ldr	r1, [pc, #380]	; (75c <initialize_opcode_info()+0x2f8>)
     5de:	a801      	add	r0, sp, #4
     5e0:	f008 fa88 	bl	8af4 <String::String(char const*)>
     5e4:	4968      	ldr	r1, [pc, #416]	; (788 <initialize_opcode_info()+0x324>)
     5e6:	a805      	add	r0, sp, #20
     5e8:	f008 fa84 	bl	8af4 <String::String(char const*)>
     5ec:	495d      	ldr	r1, [pc, #372]	; (764 <initialize_opcode_info()+0x300>)
     5ee:	a809      	add	r0, sp, #36	; 0x24
     5f0:	f008 fa80 	bl	8af4 <String::String(char const*)>
     5f4:	a901      	add	r1, sp, #4
     5f6:	4865      	ldr	r0, [pc, #404]	; (78c <initialize_opcode_info()+0x328>)
     5f8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     5fc:	f7ff fd34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     600:	a801      	add	r0, sp, #4
     602:	f7ff ff21 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
     606:	495b      	ldr	r1, [pc, #364]	; (774 <initialize_opcode_info()+0x310>)
     608:	a801      	add	r0, sp, #4
     60a:	f008 fa73 	bl	8af4 <String::String(char const*)>
     60e:	4960      	ldr	r1, [pc, #384]	; (790 <initialize_opcode_info()+0x32c>)
     610:	a805      	add	r0, sp, #20
     612:	f008 fa6f 	bl	8af4 <String::String(char const*)>
     616:	4958      	ldr	r1, [pc, #352]	; (778 <initialize_opcode_info()+0x314>)
     618:	a809      	add	r0, sp, #36	; 0x24
     61a:	f008 fa6b 	bl	8af4 <String::String(char const*)>
     61e:	a901      	add	r1, sp, #4
     620:	485c      	ldr	r0, [pc, #368]	; (794 <initialize_opcode_info()+0x330>)
     622:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     626:	f7ff fd1f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     62a:	a801      	add	r0, sp, #4
     62c:	f7ff ff0c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     630:	494a      	ldr	r1, [pc, #296]	; (75c <initialize_opcode_info()+0x2f8>)
     632:	a801      	add	r0, sp, #4
     634:	f008 fa5e 	bl	8af4 <String::String(char const*)>
     638:	4957      	ldr	r1, [pc, #348]	; (798 <initialize_opcode_info()+0x334>)
     63a:	a805      	add	r0, sp, #20
     63c:	f008 fa5a 	bl	8af4 <String::String(char const*)>
     640:	4948      	ldr	r1, [pc, #288]	; (764 <initialize_opcode_info()+0x300>)
     642:	a809      	add	r0, sp, #36	; 0x24
     644:	f008 fa56 	bl	8af4 <String::String(char const*)>
     648:	a901      	add	r1, sp, #4
     64a:	4854      	ldr	r0, [pc, #336]	; (79c <initialize_opcode_info()+0x338>)
     64c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     650:	f7ff fd0a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     654:	a801      	add	r0, sp, #4
     656:	f7ff fef7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
     65a:	4946      	ldr	r1, [pc, #280]	; (774 <initialize_opcode_info()+0x310>)
     65c:	a801      	add	r0, sp, #4
     65e:	f008 fa49 	bl	8af4 <String::String(char const*)>
     662:	494d      	ldr	r1, [pc, #308]	; (798 <initialize_opcode_info()+0x334>)
     664:	a805      	add	r0, sp, #20
     666:	f008 fa45 	bl	8af4 <String::String(char const*)>
     66a:	4943      	ldr	r1, [pc, #268]	; (778 <initialize_opcode_info()+0x314>)
     66c:	a809      	add	r0, sp, #36	; 0x24
     66e:	f008 fa41 	bl	8af4 <String::String(char const*)>
     672:	a901      	add	r1, sp, #4
     674:	484a      	ldr	r0, [pc, #296]	; (7a0 <initialize_opcode_info()+0x33c>)
     676:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     67a:	f7ff fcf5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     67e:	a801      	add	r0, sp, #4
     680:	f7ff fee2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x10] = {"BPL","rel","",2,2};
     684:	4947      	ldr	r1, [pc, #284]	; (7a4 <initialize_opcode_info()+0x340>)
     686:	a801      	add	r0, sp, #4
     688:	f008 fa34 	bl	8af4 <String::String(char const*)>
     68c:	4946      	ldr	r1, [pc, #280]	; (7a8 <initialize_opcode_info()+0x344>)
     68e:	a805      	add	r0, sp, #20
     690:	f008 fa30 	bl	8af4 <String::String(char const*)>
     694:	492e      	ldr	r1, [pc, #184]	; (750 <initialize_opcode_info()+0x2ec>)
     696:	a809      	add	r0, sp, #36	; 0x24
     698:	f008 fa2c 	bl	8af4 <String::String(char const*)>
     69c:	a901      	add	r1, sp, #4
     69e:	4843      	ldr	r0, [pc, #268]	; (7ac <initialize_opcode_info()+0x348>)
     6a0:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     6a4:	f7ff fce0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6a8:	a801      	add	r0, sp, #4
     6aa:	f7ff fecd 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
     6ae:	492b      	ldr	r1, [pc, #172]	; (75c <initialize_opcode_info()+0x2f8>)
     6b0:	a801      	add	r0, sp, #4
     6b2:	f008 fa1f 	bl	8af4 <String::String(char const*)>
     6b6:	493e      	ldr	r1, [pc, #248]	; (7b0 <initialize_opcode_info()+0x34c>)
     6b8:	a805      	add	r0, sp, #20
     6ba:	f008 fa1b 	bl	8af4 <String::String(char const*)>
     6be:	4929      	ldr	r1, [pc, #164]	; (764 <initialize_opcode_info()+0x300>)
     6c0:	a809      	add	r0, sp, #36	; 0x24
     6c2:	f008 fa17 	bl	8af4 <String::String(char const*)>
     6c6:	a901      	add	r1, sp, #4
     6c8:	483a      	ldr	r0, [pc, #232]	; (7b4 <initialize_opcode_info()+0x350>)
     6ca:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     6ce:	f7ff fccb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6d2:	a801      	add	r0, sp, #4
     6d4:	f7ff feb8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     6d8:	4920      	ldr	r1, [pc, #128]	; (75c <initialize_opcode_info()+0x2f8>)
     6da:	a801      	add	r0, sp, #4
     6dc:	f008 fa0a 	bl	8af4 <String::String(char const*)>
     6e0:	4935      	ldr	r1, [pc, #212]	; (7b8 <initialize_opcode_info()+0x354>)
     6e2:	a805      	add	r0, sp, #20
     6e4:	f008 fa06 	bl	8af4 <String::String(char const*)>
     6e8:	491e      	ldr	r1, [pc, #120]	; (764 <initialize_opcode_info()+0x300>)
     6ea:	a809      	add	r0, sp, #36	; 0x24
     6ec:	f008 fa02 	bl	8af4 <String::String(char const*)>
     6f0:	a901      	add	r1, sp, #4
     6f2:	4832      	ldr	r0, [pc, #200]	; (7bc <initialize_opcode_info()+0x358>)
     6f4:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     6f8:	f7ff fcb6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6fc:	a801      	add	r0, sp, #4
     6fe:	f7ff fea3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     702:	491c      	ldr	r1, [pc, #112]	; (774 <initialize_opcode_info()+0x310>)
     704:	a801      	add	r0, sp, #4
     706:	f008 f9f5 	bl	8af4 <String::String(char const*)>
     70a:	492b      	ldr	r1, [pc, #172]	; (7b8 <initialize_opcode_info()+0x354>)
     70c:	a805      	add	r0, sp, #20
     70e:	f008 f9f1 	bl	8af4 <String::String(char const*)>
     712:	4919      	ldr	r1, [pc, #100]	; (778 <initialize_opcode_info()+0x314>)
     714:	a809      	add	r0, sp, #36	; 0x24
     716:	f008 f9ed 	bl	8af4 <String::String(char const*)>
     71a:	a901      	add	r1, sp, #4
     71c:	4828      	ldr	r0, [pc, #160]	; (7c0 <initialize_opcode_info()+0x35c>)
     71e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     722:	f7ff fca1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     726:	a801      	add	r0, sp, #4
     728:	f7ff fe8e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     72c:	4925      	ldr	r1, [pc, #148]	; (7c4 <initialize_opcode_info()+0x360>)
     72e:	a801      	add	r0, sp, #4
     730:	f008 f9e0 	bl	8af4 <String::String(char const*)>
     734:	4906      	ldr	r1, [pc, #24]	; (750 <initialize_opcode_info()+0x2ec>)
     736:	a805      	add	r0, sp, #20
     738:	f008 f9dc 	bl	8af4 <String::String(char const*)>
     73c:	4922      	ldr	r1, [pc, #136]	; (7c8 <initialize_opcode_info()+0x364>)
     73e:	a809      	add	r0, sp, #36	; 0x24
     740:	f008 f9d8 	bl	8af4 <String::String(char const*)>
     744:	a901      	add	r1, sp, #4
     746:	e041      	b.n	7cc <initialize_opcode_info()+0x368>
     748:	20015418 	.word	0x20015418
     74c:	200009e8 	.word	0x200009e8
     750:	200007d4 	.word	0x200007d4
     754:	200009ec 	.word	0x200009ec
     758:	200009f0 	.word	0x200009f0
     75c:	200009f4 	.word	0x200009f4
     760:	200003ec 	.word	0x200003ec
     764:	200009f8 	.word	0x200009f8
     768:	2001544c 	.word	0x2001544c
     76c:	200003e0 	.word	0x200003e0
     770:	2001551c 	.word	0x2001551c
     774:	200009fc 	.word	0x200009fc
     778:	20000a00 	.word	0x20000a00
     77c:	20015550 	.word	0x20015550
     780:	20000a04 	.word	0x20000a04
     784:	200155b8 	.word	0x200155b8
     788:	200003d8 	.word	0x200003d8
     78c:	200155ec 	.word	0x200155ec
     790:	20000a08 	.word	0x20000a08
     794:	20015620 	.word	0x20015620
     798:	20000424 	.word	0x20000424
     79c:	200156bc 	.word	0x200156bc
     7a0:	200156f0 	.word	0x200156f0
     7a4:	20000a0c 	.word	0x20000a0c
     7a8:	200003e8 	.word	0x200003e8
     7ac:	20015758 	.word	0x20015758
     7b0:	200003f8 	.word	0x200003f8
     7b4:	2001578c 	.word	0x2001578c
     7b8:	20000400 	.word	0x20000400
     7bc:	2001585c 	.word	0x2001585c
     7c0:	20015890 	.word	0x20015890
     7c4:	20000a10 	.word	0x20000a10
     7c8:	20000a14 	.word	0x20000a14
     7cc:	48b4      	ldr	r0, [pc, #720]	; (aa0 <initialize_opcode_info()+0x63c>)
     7ce:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     7d2:	f7ff fc49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7d6:	a801      	add	r0, sp, #4
     7d8:	f7ff fe36 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     7dc:	49b1      	ldr	r1, [pc, #708]	; (aa4 <initialize_opcode_info()+0x640>)
     7de:	a801      	add	r0, sp, #4
     7e0:	f008 f988 	bl	8af4 <String::String(char const*)>
     7e4:	49b0      	ldr	r1, [pc, #704]	; (aa8 <initialize_opcode_info()+0x644>)
     7e6:	a805      	add	r0, sp, #20
     7e8:	f008 f984 	bl	8af4 <String::String(char const*)>
     7ec:	49af      	ldr	r1, [pc, #700]	; (aac <initialize_opcode_info()+0x648>)
     7ee:	a809      	add	r0, sp, #36	; 0x24
     7f0:	f008 f980 	bl	8af4 <String::String(char const*)>
     7f4:	a901      	add	r1, sp, #4
     7f6:	48ae      	ldr	r0, [pc, #696]	; (ab0 <initialize_opcode_info()+0x64c>)
     7f8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     7fc:	f7ff fc34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     800:	a801      	add	r0, sp, #4
     802:	f7ff fe21 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     806:	49a7      	ldr	r1, [pc, #668]	; (aa4 <initialize_opcode_info()+0x640>)
     808:	a801      	add	r0, sp, #4
     80a:	f008 f973 	bl	8af4 <String::String(char const*)>
     80e:	49a9      	ldr	r1, [pc, #676]	; (ab4 <initialize_opcode_info()+0x650>)
     810:	a805      	add	r0, sp, #20
     812:	f008 f96f 	bl	8af4 <String::String(char const*)>
     816:	49a5      	ldr	r1, [pc, #660]	; (aac <initialize_opcode_info()+0x648>)
     818:	a809      	add	r0, sp, #36	; 0x24
     81a:	f008 f96b 	bl	8af4 <String::String(char const*)>
     81e:	a901      	add	r1, sp, #4
     820:	48a5      	ldr	r0, [pc, #660]	; (ab8 <initialize_opcode_info()+0x654>)
     822:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     826:	f7ff fc1f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     82a:	a801      	add	r0, sp, #4
     82c:	f7ff fe0c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     830:	49a2      	ldr	r1, [pc, #648]	; (abc <initialize_opcode_info()+0x658>)
     832:	a801      	add	r0, sp, #4
     834:	f008 f95e 	bl	8af4 <String::String(char const*)>
     838:	499e      	ldr	r1, [pc, #632]	; (ab4 <initialize_opcode_info()+0x650>)
     83a:	a805      	add	r0, sp, #20
     83c:	f008 f95a 	bl	8af4 <String::String(char const*)>
     840:	499f      	ldr	r1, [pc, #636]	; (ac0 <initialize_opcode_info()+0x65c>)
     842:	a809      	add	r0, sp, #36	; 0x24
     844:	f008 f956 	bl	8af4 <String::String(char const*)>
     848:	f240 3307 	movw	r3, #775	; 0x307
     84c:	a901      	add	r1, sp, #4
     84e:	489d      	ldr	r0, [pc, #628]	; (ac4 <initialize_opcode_info()+0x660>)
     850:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     854:	f7ff fc08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     858:	a801      	add	r0, sp, #4
     85a:	f7ff fdf5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     85e:	499a      	ldr	r1, [pc, #616]	; (ac8 <initialize_opcode_info()+0x664>)
     860:	a801      	add	r0, sp, #4
     862:	f008 f947 	bl	8af4 <String::String(char const*)>
     866:	4999      	ldr	r1, [pc, #612]	; (acc <initialize_opcode_info()+0x668>)
     868:	a805      	add	r0, sp, #20
     86a:	f008 f943 	bl	8af4 <String::String(char const*)>
     86e:	4998      	ldr	r1, [pc, #608]	; (ad0 <initialize_opcode_info()+0x66c>)
     870:	a809      	add	r0, sp, #36	; 0x24
     872:	f008 f93f 	bl	8af4 <String::String(char const*)>
     876:	a901      	add	r1, sp, #4
     878:	4896      	ldr	r0, [pc, #600]	; (ad4 <initialize_opcode_info()+0x670>)
     87a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     87e:	f7ff fbf3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     882:	a801      	add	r0, sp, #4
     884:	f7ff fde0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     888:	4993      	ldr	r1, [pc, #588]	; (ad8 <initialize_opcode_info()+0x674>)
     88a:	a801      	add	r0, sp, #4
     88c:	f008 f932 	bl	8af4 <String::String(char const*)>
     890:	4992      	ldr	r1, [pc, #584]	; (adc <initialize_opcode_info()+0x678>)
     892:	a805      	add	r0, sp, #20
     894:	f008 f92e 	bl	8af4 <String::String(char const*)>
     898:	4984      	ldr	r1, [pc, #528]	; (aac <initialize_opcode_info()+0x648>)
     89a:	a809      	add	r0, sp, #36	; 0x24
     89c:	f008 f92a 	bl	8af4 <String::String(char const*)>
     8a0:	a901      	add	r1, sp, #4
     8a2:	488f      	ldr	r0, [pc, #572]	; (ae0 <initialize_opcode_info()+0x67c>)
     8a4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     8a8:	f7ff fbde 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8ac:	a801      	add	r0, sp, #4
     8ae:	f7ff fdcb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     8b2:	498c      	ldr	r1, [pc, #560]	; (ae4 <initialize_opcode_info()+0x680>)
     8b4:	a801      	add	r0, sp, #4
     8b6:	f008 f91d 	bl	8af4 <String::String(char const*)>
     8ba:	498b      	ldr	r1, [pc, #556]	; (ae8 <initialize_opcode_info()+0x684>)
     8bc:	a805      	add	r0, sp, #20
     8be:	f008 f919 	bl	8af4 <String::String(char const*)>
     8c2:	498a      	ldr	r1, [pc, #552]	; (aec <initialize_opcode_info()+0x688>)
     8c4:	a809      	add	r0, sp, #36	; 0x24
     8c6:	f008 f915 	bl	8af4 <String::String(char const*)>
     8ca:	a901      	add	r1, sp, #4
     8cc:	4888      	ldr	r0, [pc, #544]	; (af0 <initialize_opcode_info()+0x68c>)
     8ce:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     8d2:	f7ff fbc9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8d6:	a801      	add	r0, sp, #4
     8d8:	f7ff fdb6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     8dc:	497e      	ldr	r1, [pc, #504]	; (ad8 <initialize_opcode_info()+0x674>)
     8de:	a801      	add	r0, sp, #4
     8e0:	f008 f908 	bl	8af4 <String::String(char const*)>
     8e4:	4980      	ldr	r1, [pc, #512]	; (ae8 <initialize_opcode_info()+0x684>)
     8e6:	a805      	add	r0, sp, #20
     8e8:	f008 f904 	bl	8af4 <String::String(char const*)>
     8ec:	496f      	ldr	r1, [pc, #444]	; (aac <initialize_opcode_info()+0x648>)
     8ee:	a809      	add	r0, sp, #36	; 0x24
     8f0:	f008 f900 	bl	8af4 <String::String(char const*)>
     8f4:	a901      	add	r1, sp, #4
     8f6:	487f      	ldr	r0, [pc, #508]	; (af4 <initialize_opcode_info()+0x690>)
     8f8:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     8fc:	f7ff fbb4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     900:	a801      	add	r0, sp, #4
     902:	f7ff fda1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     906:	497c      	ldr	r1, [pc, #496]	; (af8 <initialize_opcode_info()+0x694>)
     908:	a801      	add	r0, sp, #4
     90a:	f008 f8f3 	bl	8af4 <String::String(char const*)>
     90e:	4976      	ldr	r1, [pc, #472]	; (ae8 <initialize_opcode_info()+0x684>)
     910:	a805      	add	r0, sp, #20
     912:	f008 f8ef 	bl	8af4 <String::String(char const*)>
     916:	496a      	ldr	r1, [pc, #424]	; (ac0 <initialize_opcode_info()+0x65c>)
     918:	a809      	add	r0, sp, #36	; 0x24
     91a:	f008 f8eb 	bl	8af4 <String::String(char const*)>
     91e:	a901      	add	r1, sp, #4
     920:	4876      	ldr	r0, [pc, #472]	; (afc <initialize_opcode_info()+0x698>)
     922:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     926:	f7ff fb9f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     92a:	a801      	add	r0, sp, #4
     92c:	f7ff fd8c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     930:	4973      	ldr	r1, [pc, #460]	; (b00 <initialize_opcode_info()+0x69c>)
     932:	a801      	add	r0, sp, #4
     934:	f008 f8de 	bl	8af4 <String::String(char const*)>
     938:	4965      	ldr	r1, [pc, #404]	; (ad0 <initialize_opcode_info()+0x66c>)
     93a:	a805      	add	r0, sp, #20
     93c:	f008 f8da 	bl	8af4 <String::String(char const*)>
     940:	4963      	ldr	r1, [pc, #396]	; (ad0 <initialize_opcode_info()+0x66c>)
     942:	a809      	add	r0, sp, #36	; 0x24
     944:	f008 f8d6 	bl	8af4 <String::String(char const*)>
     948:	a801      	add	r0, sp, #4
     94a:	f44f 7182 	mov.w	r1, #260	; 0x104
     94e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     952:	4601      	mov	r1, r0
     954:	486b      	ldr	r0, [pc, #428]	; (b04 <initialize_opcode_info()+0x6a0>)
     956:	f7ff fb87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     95a:	a801      	add	r0, sp, #4
     95c:	f7ff fd74 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     960:	495d      	ldr	r1, [pc, #372]	; (ad8 <initialize_opcode_info()+0x674>)
     962:	a801      	add	r0, sp, #4
     964:	f008 f8c6 	bl	8af4 <String::String(char const*)>
     968:	4967      	ldr	r1, [pc, #412]	; (b08 <initialize_opcode_info()+0x6a4>)
     96a:	a805      	add	r0, sp, #20
     96c:	f008 f8c2 	bl	8af4 <String::String(char const*)>
     970:	494e      	ldr	r1, [pc, #312]	; (aac <initialize_opcode_info()+0x648>)
     972:	a809      	add	r0, sp, #36	; 0x24
     974:	f008 f8be 	bl	8af4 <String::String(char const*)>
     978:	a801      	add	r0, sp, #4
     97a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     97e:	4601      	mov	r1, r0
     980:	4862      	ldr	r0, [pc, #392]	; (b0c <initialize_opcode_info()+0x6a8>)
     982:	f7ff fb71 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     986:	a801      	add	r0, sp, #4
     988:	f7ff fd5e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     98c:	495a      	ldr	r1, [pc, #360]	; (af8 <initialize_opcode_info()+0x694>)
     98e:	a801      	add	r0, sp, #4
     990:	f008 f8b0 	bl	8af4 <String::String(char const*)>
     994:	495e      	ldr	r1, [pc, #376]	; (b10 <initialize_opcode_info()+0x6ac>)
     996:	a805      	add	r0, sp, #20
     998:	f008 f8ac 	bl	8af4 <String::String(char const*)>
     99c:	4948      	ldr	r1, [pc, #288]	; (ac0 <initialize_opcode_info()+0x65c>)
     99e:	a809      	add	r0, sp, #36	; 0x24
     9a0:	f008 f8a8 	bl	8af4 <String::String(char const*)>
     9a4:	a801      	add	r0, sp, #4
     9a6:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     9aa:	4601      	mov	r1, r0
     9ac:	4859      	ldr	r0, [pc, #356]	; (b14 <initialize_opcode_info()+0x6b0>)
     9ae:	f7ff fb5b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9b2:	a801      	add	r0, sp, #4
     9b4:	f7ff fd48 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     9b8:	494a      	ldr	r1, [pc, #296]	; (ae4 <initialize_opcode_info()+0x680>)
     9ba:	a801      	add	r0, sp, #4
     9bc:	f008 f89a 	bl	8af4 <String::String(char const*)>
     9c0:	4942      	ldr	r1, [pc, #264]	; (acc <initialize_opcode_info()+0x668>)
     9c2:	a805      	add	r0, sp, #20
     9c4:	f008 f896 	bl	8af4 <String::String(char const*)>
     9c8:	4948      	ldr	r1, [pc, #288]	; (aec <initialize_opcode_info()+0x688>)
     9ca:	a809      	add	r0, sp, #36	; 0x24
     9cc:	f008 f892 	bl	8af4 <String::String(char const*)>
     9d0:	a801      	add	r0, sp, #4
     9d2:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     9d6:	4601      	mov	r1, r0
     9d8:	484f      	ldr	r0, [pc, #316]	; (b18 <initialize_opcode_info()+0x6b4>)
     9da:	f7ff fb45 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9de:	a801      	add	r0, sp, #4
     9e0:	f7ff fd32 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     9e4:	493c      	ldr	r1, [pc, #240]	; (ad8 <initialize_opcode_info()+0x674>)
     9e6:	a801      	add	r0, sp, #4
     9e8:	f008 f884 	bl	8af4 <String::String(char const*)>
     9ec:	4937      	ldr	r1, [pc, #220]	; (acc <initialize_opcode_info()+0x668>)
     9ee:	a805      	add	r0, sp, #20
     9f0:	f008 f880 	bl	8af4 <String::String(char const*)>
     9f4:	492d      	ldr	r1, [pc, #180]	; (aac <initialize_opcode_info()+0x648>)
     9f6:	a809      	add	r0, sp, #36	; 0x24
     9f8:	f008 f87c 	bl	8af4 <String::String(char const*)>
     9fc:	a801      	add	r0, sp, #4
     9fe:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     a02:	4601      	mov	r1, r0
     a04:	4845      	ldr	r0, [pc, #276]	; (b1c <initialize_opcode_info()+0x6b8>)
     a06:	f7ff fb2f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a0a:	a801      	add	r0, sp, #4
     a0c:	f7ff fd1c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     a10:	4939      	ldr	r1, [pc, #228]	; (af8 <initialize_opcode_info()+0x694>)
     a12:	a801      	add	r0, sp, #4
     a14:	f008 f86e 	bl	8af4 <String::String(char const*)>
     a18:	492c      	ldr	r1, [pc, #176]	; (acc <initialize_opcode_info()+0x668>)
     a1a:	a805      	add	r0, sp, #20
     a1c:	f008 f86a 	bl	8af4 <String::String(char const*)>
     a20:	4927      	ldr	r1, [pc, #156]	; (ac0 <initialize_opcode_info()+0x65c>)
     a22:	a809      	add	r0, sp, #36	; 0x24
     a24:	f008 f866 	bl	8af4 <String::String(char const*)>
     a28:	a801      	add	r0, sp, #4
     a2a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     a2e:	4601      	mov	r1, r0
     a30:	483b      	ldr	r0, [pc, #236]	; (b20 <initialize_opcode_info()+0x6bc>)
     a32:	f7ff fb19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a36:	a801      	add	r0, sp, #4
     a38:	f7ff fd06 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     a3c:	4939      	ldr	r1, [pc, #228]	; (b24 <initialize_opcode_info()+0x6c0>)
     a3e:	a801      	add	r0, sp, #4
     a40:	f008 f858 	bl	8af4 <String::String(char const*)>
     a44:	4938      	ldr	r1, [pc, #224]	; (b28 <initialize_opcode_info()+0x6c4>)
     a46:	a805      	add	r0, sp, #20
     a48:	f008 f854 	bl	8af4 <String::String(char const*)>
     a4c:	4920      	ldr	r1, [pc, #128]	; (ad0 <initialize_opcode_info()+0x66c>)
     a4e:	a809      	add	r0, sp, #36	; 0x24
     a50:	f008 f850 	bl	8af4 <String::String(char const*)>
     a54:	a801      	add	r0, sp, #4
     a56:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     a5a:	4601      	mov	r1, r0
     a5c:	4833      	ldr	r0, [pc, #204]	; (b2c <initialize_opcode_info()+0x6c8>)
     a5e:	f7ff fb03 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a62:	a801      	add	r0, sp, #4
     a64:	f7ff fcf0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     a68:	491b      	ldr	r1, [pc, #108]	; (ad8 <initialize_opcode_info()+0x674>)
     a6a:	a801      	add	r0, sp, #4
     a6c:	f008 f842 	bl	8af4 <String::String(char const*)>
     a70:	492f      	ldr	r1, [pc, #188]	; (b30 <initialize_opcode_info()+0x6cc>)
     a72:	a805      	add	r0, sp, #20
     a74:	f008 f83e 	bl	8af4 <String::String(char const*)>
     a78:	490c      	ldr	r1, [pc, #48]	; (aac <initialize_opcode_info()+0x648>)
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f008 f83a 	bl	8af4 <String::String(char const*)>
     a80:	a801      	add	r0, sp, #4
     a82:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     a86:	4601      	mov	r1, r0
     a88:	482a      	ldr	r0, [pc, #168]	; (b34 <initialize_opcode_info()+0x6d0>)
     a8a:	f7ff faed 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a8e:	a801      	add	r0, sp, #4
     a90:	f7ff fcda 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     a94:	4910      	ldr	r1, [pc, #64]	; (ad8 <initialize_opcode_info()+0x674>)
     a96:	a801      	add	r0, sp, #4
     a98:	f008 f82c 	bl	8af4 <String::String(char const*)>
     a9c:	e04c      	b.n	b38 <initialize_opcode_info()+0x6d4>
     a9e:	bf00      	nop
     aa0:	200158f8 	.word	0x200158f8
     aa4:	200009f4 	.word	0x200009f4
     aa8:	20000430 	.word	0x20000430
     aac:	200009f8 	.word	0x200009f8
     ab0:	2001592c 	.word	0x2001592c
     ab4:	20000428 	.word	0x20000428
     ab8:	200159fc 	.word	0x200159fc
     abc:	200009fc 	.word	0x200009fc
     ac0:	20000a00 	.word	0x20000a00
     ac4:	20015a30 	.word	0x20015a30
     ac8:	20000a18 	.word	0x20000a18
     acc:	20000424 	.word	0x20000424
     ad0:	200007d4 	.word	0x200007d4
     ad4:	20015a98 	.word	0x20015a98
     ad8:	20000a1c 	.word	0x20000a1c
     adc:	200003ec 	.word	0x200003ec
     ae0:	20015acc 	.word	0x20015acc
     ae4:	20000a20 	.word	0x20000a20
     ae8:	200003e0 	.word	0x200003e0
     aec:	20000a24 	.word	0x20000a24
     af0:	20015b68 	.word	0x20015b68
     af4:	20015b9c 	.word	0x20015b9c
     af8:	20000a28 	.word	0x20000a28
     afc:	20015bd0 	.word	0x20015bd0
     b00:	20000a2c 	.word	0x20000a2c
     b04:	20015c38 	.word	0x20015c38
     b08:	200003d8 	.word	0x200003d8
     b0c:	20015c6c 	.word	0x20015c6c
     b10:	20000a08 	.word	0x20000a08
     b14:	20015ca0 	.word	0x20015ca0
     b18:	20015d08 	.word	0x20015d08
     b1c:	20015d3c 	.word	0x20015d3c
     b20:	20015d70 	.word	0x20015d70
     b24:	20000a30 	.word	0x20000a30
     b28:	200003e8 	.word	0x200003e8
     b2c:	20015dd8 	.word	0x20015dd8
     b30:	200003f8 	.word	0x200003f8
     b34:	20015e0c 	.word	0x20015e0c
     b38:	49c4      	ldr	r1, [pc, #784]	; (e4c <initialize_opcode_info()+0x9e8>)
     b3a:	a805      	add	r0, sp, #20
     b3c:	f007 ffda 	bl	8af4 <String::String(char const*)>
     b40:	49c3      	ldr	r1, [pc, #780]	; (e50 <initialize_opcode_info()+0x9ec>)
     b42:	a809      	add	r0, sp, #36	; 0x24
     b44:	f007 ffd6 	bl	8af4 <String::String(char const*)>
     b48:	a801      	add	r0, sp, #4
     b4a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     b4e:	4601      	mov	r1, r0
     b50:	48c0      	ldr	r0, [pc, #768]	; (e54 <initialize_opcode_info()+0x9f0>)
     b52:	f7ff fa89 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b56:	a801      	add	r0, sp, #4
     b58:	f7ff fc76 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     b5c:	49be      	ldr	r1, [pc, #760]	; (e58 <initialize_opcode_info()+0x9f4>)
     b5e:	a801      	add	r0, sp, #4
     b60:	f007 ffc8 	bl	8af4 <String::String(char const*)>
     b64:	49b9      	ldr	r1, [pc, #740]	; (e4c <initialize_opcode_info()+0x9e8>)
     b66:	a805      	add	r0, sp, #20
     b68:	f007 ffc4 	bl	8af4 <String::String(char const*)>
     b6c:	49bb      	ldr	r1, [pc, #748]	; (e5c <initialize_opcode_info()+0x9f8>)
     b6e:	a809      	add	r0, sp, #36	; 0x24
     b70:	f007 ffc0 	bl	8af4 <String::String(char const*)>
     b74:	a801      	add	r0, sp, #4
     b76:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     b7a:	4601      	mov	r1, r0
     b7c:	48b8      	ldr	r0, [pc, #736]	; (e60 <initialize_opcode_info()+0x9fc>)
     b7e:	f7ff fa73 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b82:	a801      	add	r0, sp, #4
     b84:	f7ff fc60 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     b88:	49b6      	ldr	r1, [pc, #728]	; (e64 <initialize_opcode_info()+0xa00>)
     b8a:	a801      	add	r0, sp, #4
     b8c:	f007 ffb2 	bl	8af4 <String::String(char const*)>
     b90:	49b5      	ldr	r1, [pc, #724]	; (e68 <initialize_opcode_info()+0xa04>)
     b92:	a805      	add	r0, sp, #20
     b94:	f007 ffae 	bl	8af4 <String::String(char const*)>
     b98:	49b4      	ldr	r1, [pc, #720]	; (e6c <initialize_opcode_info()+0xa08>)
     b9a:	a809      	add	r0, sp, #36	; 0x24
     b9c:	f007 ffaa 	bl	8af4 <String::String(char const*)>
     ba0:	a801      	add	r0, sp, #4
     ba2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     ba6:	4601      	mov	r1, r0
     ba8:	48b1      	ldr	r0, [pc, #708]	; (e70 <initialize_opcode_info()+0xa0c>)
     baa:	f7ff fa5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bae:	a801      	add	r0, sp, #4
     bb0:	f7ff fc4a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     bb4:	49af      	ldr	r1, [pc, #700]	; (e74 <initialize_opcode_info()+0xa10>)
     bb6:	a801      	add	r0, sp, #4
     bb8:	f007 ff9c 	bl	8af4 <String::String(char const*)>
     bbc:	49ae      	ldr	r1, [pc, #696]	; (e78 <initialize_opcode_info()+0xa14>)
     bbe:	a805      	add	r0, sp, #20
     bc0:	f007 ff98 	bl	8af4 <String::String(char const*)>
     bc4:	49a2      	ldr	r1, [pc, #648]	; (e50 <initialize_opcode_info()+0x9ec>)
     bc6:	a809      	add	r0, sp, #36	; 0x24
     bc8:	f007 ff94 	bl	8af4 <String::String(char const*)>
     bcc:	a801      	add	r0, sp, #4
     bce:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     bd2:	4601      	mov	r1, r0
     bd4:	48a9      	ldr	r0, [pc, #676]	; (e7c <initialize_opcode_info()+0xa18>)
     bd6:	f7ff fa47 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bda:	a801      	add	r0, sp, #4
     bdc:	f7ff fc34 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     be0:	49a4      	ldr	r1, [pc, #656]	; (e74 <initialize_opcode_info()+0xa10>)
     be2:	a801      	add	r0, sp, #4
     be4:	f007 ff86 	bl	8af4 <String::String(char const*)>
     be8:	49a5      	ldr	r1, [pc, #660]	; (e80 <initialize_opcode_info()+0xa1c>)
     bea:	a805      	add	r0, sp, #20
     bec:	f007 ff82 	bl	8af4 <String::String(char const*)>
     bf0:	4997      	ldr	r1, [pc, #604]	; (e50 <initialize_opcode_info()+0x9ec>)
     bf2:	a809      	add	r0, sp, #36	; 0x24
     bf4:	f007 ff7e 	bl	8af4 <String::String(char const*)>
     bf8:	a801      	add	r0, sp, #4
     bfa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     bfe:	4601      	mov	r1, r0
     c00:	48a0      	ldr	r0, [pc, #640]	; (e84 <initialize_opcode_info()+0xa20>)
     c02:	f7ff fa31 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c06:	a801      	add	r0, sp, #4
     c08:	f7ff fc1e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     c0c:	4992      	ldr	r1, [pc, #584]	; (e58 <initialize_opcode_info()+0x9f4>)
     c0e:	a801      	add	r0, sp, #4
     c10:	f007 ff70 	bl	8af4 <String::String(char const*)>
     c14:	499a      	ldr	r1, [pc, #616]	; (e80 <initialize_opcode_info()+0xa1c>)
     c16:	a805      	add	r0, sp, #20
     c18:	f007 ff6c 	bl	8af4 <String::String(char const*)>
     c1c:	498f      	ldr	r1, [pc, #572]	; (e5c <initialize_opcode_info()+0x9f8>)
     c1e:	a809      	add	r0, sp, #36	; 0x24
     c20:	f007 ff68 	bl	8af4 <String::String(char const*)>
     c24:	a801      	add	r0, sp, #4
     c26:	f240 3307 	movw	r3, #775	; 0x307
     c2a:	4601      	mov	r1, r0
     c2c:	4896      	ldr	r0, [pc, #600]	; (e88 <initialize_opcode_info()+0xa24>)
     c2e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c32:	f7ff fa19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c36:	a801      	add	r0, sp, #4
     c38:	f7ff fc06 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     c3c:	4993      	ldr	r1, [pc, #588]	; (e8c <initialize_opcode_info()+0xa28>)
     c3e:	a801      	add	r0, sp, #4
     c40:	f007 ff58 	bl	8af4 <String::String(char const*)>
     c44:	4988      	ldr	r1, [pc, #544]	; (e68 <initialize_opcode_info()+0xa04>)
     c46:	a805      	add	r0, sp, #20
     c48:	f007 ff54 	bl	8af4 <String::String(char const*)>
     c4c:	4990      	ldr	r1, [pc, #576]	; (e90 <initialize_opcode_info()+0xa2c>)
     c4e:	a809      	add	r0, sp, #36	; 0x24
     c50:	f007 ff50 	bl	8af4 <String::String(char const*)>
     c54:	f10d 0c04 	add.w	ip, sp, #4
     c58:	f44f 7083 	mov.w	r0, #262	; 0x106
     c5c:	4661      	mov	r1, ip
     c5e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     c62:	488c      	ldr	r0, [pc, #560]	; (e94 <initialize_opcode_info()+0xa30>)
     c64:	f7ff fa00 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c68:	f10d 0c04 	add.w	ip, sp, #4
     c6c:	4660      	mov	r0, ip
     c6e:	f7ff fbeb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     c72:	f10d 0c04 	add.w	ip, sp, #4
     c76:	4988      	ldr	r1, [pc, #544]	; (e98 <initialize_opcode_info()+0xa34>)
     c78:	4660      	mov	r0, ip
     c7a:	f007 ff3b 	bl	8af4 <String::String(char const*)>
     c7e:	f10d 0c14 	add.w	ip, sp, #20
     c82:	4986      	ldr	r1, [pc, #536]	; (e9c <initialize_opcode_info()+0xa38>)
     c84:	4660      	mov	r0, ip
     c86:	f007 ff35 	bl	8af4 <String::String(char const*)>
     c8a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     c8e:	4970      	ldr	r1, [pc, #448]	; (e50 <initialize_opcode_info()+0x9ec>)
     c90:	4660      	mov	r0, ip
     c92:	f007 ff2f 	bl	8af4 <String::String(char const*)>
     c96:	f10d 0c04 	add.w	ip, sp, #4
     c9a:	4881      	ldr	r0, [pc, #516]	; (ea0 <initialize_opcode_info()+0xa3c>)
     c9c:	4661      	mov	r1, ip
     c9e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     ca2:	f7ff f9e1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ca6:	f10d 0c04 	add.w	ip, sp, #4
     caa:	4660      	mov	r0, ip
     cac:	f7ff fbcc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     cb0:	f10d 0c04 	add.w	ip, sp, #4
     cb4:	4978      	ldr	r1, [pc, #480]	; (e98 <initialize_opcode_info()+0xa34>)
     cb6:	4660      	mov	r0, ip
     cb8:	f007 ff1c 	bl	8af4 <String::String(char const*)>
     cbc:	f10d 0c14 	add.w	ip, sp, #20
     cc0:	4978      	ldr	r1, [pc, #480]	; (ea4 <initialize_opcode_info()+0xa40>)
     cc2:	4660      	mov	r0, ip
     cc4:	f007 ff16 	bl	8af4 <String::String(char const*)>
     cc8:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     ccc:	4960      	ldr	r1, [pc, #384]	; (e50 <initialize_opcode_info()+0x9ec>)
     cce:	4660      	mov	r0, ip
     cd0:	f007 ff10 	bl	8af4 <String::String(char const*)>
     cd4:	f10d 0c04 	add.w	ip, sp, #4
     cd8:	4873      	ldr	r0, [pc, #460]	; (ea8 <initialize_opcode_info()+0xa44>)
     cda:	4661      	mov	r1, ip
     cdc:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
     ce0:	f7ff f9c2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ce4:	f10d 0c04 	add.w	ip, sp, #4
     ce8:	4660      	mov	r0, ip
     cea:	f7ff fbad 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     cee:	f10d 0c04 	add.w	ip, sp, #4
     cf2:	496e      	ldr	r1, [pc, #440]	; (eac <initialize_opcode_info()+0xa48>)
     cf4:	4660      	mov	r0, ip
     cf6:	f007 fefd 	bl	8af4 <String::String(char const*)>
     cfa:	f10d 0c14 	add.w	ip, sp, #20
     cfe:	4969      	ldr	r1, [pc, #420]	; (ea4 <initialize_opcode_info()+0xa40>)
     d00:	4660      	mov	r0, ip
     d02:	f007 fef7 	bl	8af4 <String::String(char const*)>
     d06:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     d0a:	4954      	ldr	r1, [pc, #336]	; (e5c <initialize_opcode_info()+0x9f8>)
     d0c:	4660      	mov	r0, ip
     d0e:	f007 fef1 	bl	8af4 <String::String(char const*)>
     d12:	f10d 0c04 	add.w	ip, sp, #4
     d16:	4866      	ldr	r0, [pc, #408]	; (eb0 <initialize_opcode_info()+0xa4c>)
     d18:	4661      	mov	r1, ip
     d1a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     d1e:	f7ff f9a3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d22:	f10d 0c04 	add.w	ip, sp, #4
     d26:	4660      	mov	r0, ip
     d28:	f7ff fb8e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     d2c:	f10d 0c04 	add.w	ip, sp, #4
     d30:	4960      	ldr	r1, [pc, #384]	; (eb4 <initialize_opcode_info()+0xa50>)
     d32:	4660      	mov	r0, ip
     d34:	f007 fede 	bl	8af4 <String::String(char const*)>
     d38:	f10d 0c14 	add.w	ip, sp, #20
     d3c:	494a      	ldr	r1, [pc, #296]	; (e68 <initialize_opcode_info()+0xa04>)
     d3e:	4660      	mov	r0, ip
     d40:	f007 fed8 	bl	8af4 <String::String(char const*)>
     d44:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
     d48:	4947      	ldr	r1, [pc, #284]	; (e68 <initialize_opcode_info()+0xa04>)
     d4a:	4660      	mov	r0, ip
     d4c:	f007 fed2 	bl	8af4 <String::String(char const*)>
     d50:	f240 1203 	movw	r2, #259	; 0x103
     d54:	4858      	ldr	r0, [pc, #352]	; (eb8 <initialize_opcode_info()+0xa54>)
     d56:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     d5a:	aa01      	add	r2, sp, #4
     d5c:	4611      	mov	r1, r2
     d5e:	f7ff f983 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d62:	aa01      	add	r2, sp, #4
     d64:	4610      	mov	r0, r2
     d66:	f7ff fb6f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     d6a:	aa01      	add	r2, sp, #4
     d6c:	494a      	ldr	r1, [pc, #296]	; (e98 <initialize_opcode_info()+0xa34>)
     d6e:	4610      	mov	r0, r2
     d70:	f007 fec0 	bl	8af4 <String::String(char const*)>
     d74:	aa05      	add	r2, sp, #20
     d76:	4951      	ldr	r1, [pc, #324]	; (ebc <initialize_opcode_info()+0xa58>)
     d78:	4610      	mov	r0, r2
     d7a:	f007 febb 	bl	8af4 <String::String(char const*)>
     d7e:	aa09      	add	r2, sp, #36	; 0x24
     d80:	4933      	ldr	r1, [pc, #204]	; (e50 <initialize_opcode_info()+0x9ec>)
     d82:	4610      	mov	r0, r2
     d84:	f007 feb6 	bl	8af4 <String::String(char const*)>
     d88:	aa01      	add	r2, sp, #4
     d8a:	484d      	ldr	r0, [pc, #308]	; (ec0 <initialize_opcode_info()+0xa5c>)
     d8c:	4611      	mov	r1, r2
     d8e:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     d92:	f7ff f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d96:	aa01      	add	r2, sp, #4
     d98:	4610      	mov	r0, r2
     d9a:	f7ff fb55 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     d9e:	aa01      	add	r2, sp, #4
     da0:	4942      	ldr	r1, [pc, #264]	; (eac <initialize_opcode_info()+0xa48>)
     da2:	4610      	mov	r0, r2
     da4:	f007 fea6 	bl	8af4 <String::String(char const*)>
     da8:	aa05      	add	r2, sp, #20
     daa:	4946      	ldr	r1, [pc, #280]	; (ec4 <initialize_opcode_info()+0xa60>)
     dac:	4610      	mov	r0, r2
     dae:	f007 fea1 	bl	8af4 <String::String(char const*)>
     db2:	aa09      	add	r2, sp, #36	; 0x24
     db4:	4929      	ldr	r1, [pc, #164]	; (e5c <initialize_opcode_info()+0x9f8>)
     db6:	4610      	mov	r0, r2
     db8:	f007 fe9c 	bl	8af4 <String::String(char const*)>
     dbc:	aa01      	add	r2, sp, #4
     dbe:	4842      	ldr	r0, [pc, #264]	; (ec8 <initialize_opcode_info()+0xa64>)
     dc0:	4611      	mov	r1, r2
     dc2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     dc6:	f7ff f94f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dca:	aa01      	add	r2, sp, #4
     dcc:	4610      	mov	r0, r2
     dce:	f7ff fb3b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     dd2:	aa01      	add	r2, sp, #4
     dd4:	493d      	ldr	r1, [pc, #244]	; (ecc <initialize_opcode_info()+0xa68>)
     dd6:	4610      	mov	r0, r2
     dd8:	f007 fe8c 	bl	8af4 <String::String(char const*)>
     ddc:	aa05      	add	r2, sp, #20
     dde:	493c      	ldr	r1, [pc, #240]	; (ed0 <initialize_opcode_info()+0xa6c>)
     de0:	4610      	mov	r0, r2
     de2:	f007 fe87 	bl	8af4 <String::String(char const*)>
     de6:	aa09      	add	r2, sp, #36	; 0x24
     de8:	491f      	ldr	r1, [pc, #124]	; (e68 <initialize_opcode_info()+0xa04>)
     dea:	4610      	mov	r0, r2
     dec:	f007 fe82 	bl	8af4 <String::String(char const*)>
     df0:	aa01      	add	r2, sp, #4
     df2:	f240 3303 	movw	r3, #771	; 0x303
     df6:	4837      	ldr	r0, [pc, #220]	; (ed4 <initialize_opcode_info()+0xa70>)
     df8:	4611      	mov	r1, r2
     dfa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     dfe:	f7ff f933 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e02:	aa01      	add	r2, sp, #4
     e04:	4610      	mov	r0, r2
     e06:	f7ff fb1f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     e0a:	aa01      	add	r2, sp, #4
     e0c:	4922      	ldr	r1, [pc, #136]	; (e98 <initialize_opcode_info()+0xa34>)
     e0e:	4610      	mov	r0, r2
     e10:	f007 fe70 	bl	8af4 <String::String(char const*)>
     e14:	aa05      	add	r2, sp, #20
     e16:	492e      	ldr	r1, [pc, #184]	; (ed0 <initialize_opcode_info()+0xa6c>)
     e18:	4610      	mov	r0, r2
     e1a:	f007 fe6b 	bl	8af4 <String::String(char const*)>
     e1e:	aa09      	add	r2, sp, #36	; 0x24
     e20:	490b      	ldr	r1, [pc, #44]	; (e50 <initialize_opcode_info()+0x9ec>)
     e22:	4610      	mov	r0, r2
     e24:	f007 fe66 	bl	8af4 <String::String(char const*)>
     e28:	aa01      	add	r2, sp, #4
     e2a:	482b      	ldr	r0, [pc, #172]	; (ed8 <initialize_opcode_info()+0xa74>)
     e2c:	4611      	mov	r1, r2
     e2e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
     e32:	f7ff f919 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e36:	aa01      	add	r2, sp, #4
     e38:	4610      	mov	r0, r2
     e3a:	f7ff fb05 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     e3e:	aa01      	add	r2, sp, #4
     e40:	491a      	ldr	r1, [pc, #104]	; (eac <initialize_opcode_info()+0xa48>)
     e42:	4610      	mov	r0, r2
     e44:	f007 fe56 	bl	8af4 <String::String(char const*)>
     e48:	e048      	b.n	edc <initialize_opcode_info()+0xa78>
     e4a:	bf00      	nop
     e4c:	20000400 	.word	0x20000400
     e50:	200009f8 	.word	0x200009f8
     e54:	20015edc 	.word	0x20015edc
     e58:	20000a28 	.word	0x20000a28
     e5c:	20000a00 	.word	0x20000a00
     e60:	20015f10 	.word	0x20015f10
     e64:	20000a34 	.word	0x20000a34
     e68:	200007d4 	.word	0x200007d4
     e6c:	20000a14 	.word	0x20000a14
     e70:	20015f78 	.word	0x20015f78
     e74:	20000a1c 	.word	0x20000a1c
     e78:	20000430 	.word	0x20000430
     e7c:	20015fac 	.word	0x20015fac
     e80:	20000428 	.word	0x20000428
     e84:	2001607c 	.word	0x2001607c
     e88:	200160b0 	.word	0x200160b0
     e8c:	20000a38 	.word	0x20000a38
     e90:	20000a3c 	.word	0x20000a3c
     e94:	20016118 	.word	0x20016118
     e98:	20000a44 	.word	0x20000a44
     e9c:	200003ec 	.word	0x200003ec
     ea0:	2001614c 	.word	0x2001614c
     ea4:	200003e0 	.word	0x200003e0
     ea8:	2001621c 	.word	0x2001621c
     eac:	20000a48 	.word	0x20000a48
     eb0:	20016250 	.word	0x20016250
     eb4:	20000a4c 	.word	0x20000a4c
     eb8:	200162b8 	.word	0x200162b8
     ebc:	200003d8 	.word	0x200003d8
     ec0:	200162ec 	.word	0x200162ec
     ec4:	20000a08 	.word	0x20000a08
     ec8:	20016320 	.word	0x20016320
     ecc:	20000a50 	.word	0x20000a50
     ed0:	20000424 	.word	0x20000424
     ed4:	20016388 	.word	0x20016388
     ed8:	200163bc 	.word	0x200163bc
     edc:	aa05      	add	r2, sp, #20
     ede:	49ba      	ldr	r1, [pc, #744]	; (11c8 <initialize_opcode_info()+0xd64>)
     ee0:	4610      	mov	r0, r2
     ee2:	f007 fe07 	bl	8af4 <String::String(char const*)>
     ee6:	aa09      	add	r2, sp, #36	; 0x24
     ee8:	49b8      	ldr	r1, [pc, #736]	; (11cc <initialize_opcode_info()+0xd68>)
     eea:	4610      	mov	r0, r2
     eec:	f007 fe02 	bl	8af4 <String::String(char const*)>
     ef0:	aa01      	add	r2, sp, #4
     ef2:	48b7      	ldr	r0, [pc, #732]	; (11d0 <initialize_opcode_info()+0xd6c>)
     ef4:	4611      	mov	r1, r2
     ef6:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     efa:	f7ff f8b5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     efe:	aa01      	add	r2, sp, #4
     f00:	4610      	mov	r0, r2
     f02:	f7ff faa1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     f06:	aa01      	add	r2, sp, #4
     f08:	49b2      	ldr	r1, [pc, #712]	; (11d4 <initialize_opcode_info()+0xd70>)
     f0a:	4610      	mov	r0, r2
     f0c:	f007 fdf2 	bl	8af4 <String::String(char const*)>
     f10:	aa05      	add	r2, sp, #20
     f12:	49b1      	ldr	r1, [pc, #708]	; (11d8 <initialize_opcode_info()+0xd74>)
     f14:	4610      	mov	r0, r2
     f16:	f007 fded 	bl	8af4 <String::String(char const*)>
     f1a:	aa09      	add	r2, sp, #36	; 0x24
     f1c:	49af      	ldr	r1, [pc, #700]	; (11dc <initialize_opcode_info()+0xd78>)
     f1e:	4610      	mov	r0, r2
     f20:	f007 fde8 	bl	8af4 <String::String(char const*)>
     f24:	aa01      	add	r2, sp, #4
     f26:	48ae      	ldr	r0, [pc, #696]	; (11e0 <initialize_opcode_info()+0xd7c>)
     f28:	4611      	mov	r1, r2
     f2a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
     f2e:	f7ff f89b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f32:	aa01      	add	r2, sp, #4
     f34:	4610      	mov	r0, r2
     f36:	f7ff fa87 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     f3a:	aa01      	add	r2, sp, #4
     f3c:	49a9      	ldr	r1, [pc, #676]	; (11e4 <initialize_opcode_info()+0xd80>)
     f3e:	4610      	mov	r0, r2
     f40:	f007 fdd8 	bl	8af4 <String::String(char const*)>
     f44:	aa05      	add	r2, sp, #20
     f46:	49a8      	ldr	r1, [pc, #672]	; (11e8 <initialize_opcode_info()+0xd84>)
     f48:	4610      	mov	r0, r2
     f4a:	f007 fdd3 	bl	8af4 <String::String(char const*)>
     f4e:	aa09      	add	r2, sp, #36	; 0x24
     f50:	49a6      	ldr	r1, [pc, #664]	; (11ec <initialize_opcode_info()+0xd88>)
     f52:	4610      	mov	r0, r2
     f54:	f007 fdce 	bl	8af4 <String::String(char const*)>
     f58:	aa01      	add	r2, sp, #4
     f5a:	48a5      	ldr	r0, [pc, #660]	; (11f0 <initialize_opcode_info()+0xd8c>)
     f5c:	4611      	mov	r1, r2
     f5e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     f62:	f7ff f881 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f66:	aa01      	add	r2, sp, #4
     f68:	4610      	mov	r0, r2
     f6a:	f7ff fa6d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     f6e:	aa01      	add	r2, sp, #4
     f70:	499c      	ldr	r1, [pc, #624]	; (11e4 <initialize_opcode_info()+0xd80>)
     f72:	4610      	mov	r0, r2
     f74:	f007 fdbe 	bl	8af4 <String::String(char const*)>
     f78:	aa05      	add	r2, sp, #20
     f7a:	499e      	ldr	r1, [pc, #632]	; (11f4 <initialize_opcode_info()+0xd90>)
     f7c:	4610      	mov	r0, r2
     f7e:	f007 fdb9 	bl	8af4 <String::String(char const*)>
     f82:	aa09      	add	r2, sp, #36	; 0x24
     f84:	4999      	ldr	r1, [pc, #612]	; (11ec <initialize_opcode_info()+0xd88>)
     f86:	4610      	mov	r0, r2
     f88:	f007 fdb4 	bl	8af4 <String::String(char const*)>
     f8c:	aa01      	add	r2, sp, #4
     f8e:	489a      	ldr	r0, [pc, #616]	; (11f8 <initialize_opcode_info()+0xd94>)
     f90:	4611      	mov	r1, r2
     f92:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     f96:	f7ff f867 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f9a:	aa01      	add	r2, sp, #4
     f9c:	4610      	mov	r0, r2
     f9e:	f7ff fa53 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     fa2:	aa01      	add	r2, sp, #4
     fa4:	4995      	ldr	r1, [pc, #596]	; (11fc <initialize_opcode_info()+0xd98>)
     fa6:	4610      	mov	r0, r2
     fa8:	f007 fda4 	bl	8af4 <String::String(char const*)>
     fac:	aa05      	add	r2, sp, #20
     fae:	4991      	ldr	r1, [pc, #580]	; (11f4 <initialize_opcode_info()+0xd90>)
     fb0:	4610      	mov	r0, r2
     fb2:	f007 fd9f 	bl	8af4 <String::String(char const*)>
     fb6:	aa09      	add	r2, sp, #36	; 0x24
     fb8:	4984      	ldr	r1, [pc, #528]	; (11cc <initialize_opcode_info()+0xd68>)
     fba:	4610      	mov	r0, r2
     fbc:	f007 fd9a 	bl	8af4 <String::String(char const*)>
     fc0:	aa01      	add	r2, sp, #4
     fc2:	488f      	ldr	r0, [pc, #572]	; (1200 <initialize_opcode_info()+0xd9c>)
     fc4:	4611      	mov	r1, r2
     fc6:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     fca:	f7ff f84d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fce:	aa01      	add	r2, sp, #4
     fd0:	4610      	mov	r0, r2
     fd2:	f7ff fa39 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     fd6:	aa01      	add	r2, sp, #4
     fd8:	498a      	ldr	r1, [pc, #552]	; (1204 <initialize_opcode_info()+0xda0>)
     fda:	4610      	mov	r0, r2
     fdc:	f007 fd8a 	bl	8af4 <String::String(char const*)>
     fe0:	aa05      	add	r2, sp, #20
     fe2:	497e      	ldr	r1, [pc, #504]	; (11dc <initialize_opcode_info()+0xd78>)
     fe4:	4610      	mov	r0, r2
     fe6:	f007 fd85 	bl	8af4 <String::String(char const*)>
     fea:	aa09      	add	r2, sp, #36	; 0x24
     fec:	4986      	ldr	r1, [pc, #536]	; (1208 <initialize_opcode_info()+0xda4>)
     fee:	4610      	mov	r0, r2
     ff0:	f007 fd80 	bl	8af4 <String::String(char const*)>
     ff4:	aa01      	add	r2, sp, #4
     ff6:	4885      	ldr	r0, [pc, #532]	; (120c <initialize_opcode_info()+0xda8>)
     ff8:	4611      	mov	r1, r2
     ffa:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     ffe:	f7ff f833 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1002:	aa01      	add	r2, sp, #4
    1004:	4610      	mov	r0, r2
    1006:	f7ff fa1f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
    100a:	aa01      	add	r2, sp, #4
    100c:	4975      	ldr	r1, [pc, #468]	; (11e4 <initialize_opcode_info()+0xd80>)
    100e:	4610      	mov	r0, r2
    1010:	f007 fd70 	bl	8af4 <String::String(char const*)>
    1014:	aa05      	add	r2, sp, #20
    1016:	497e      	ldr	r1, [pc, #504]	; (1210 <initialize_opcode_info()+0xdac>)
    1018:	4610      	mov	r0, r2
    101a:	f007 fd6b 	bl	8af4 <String::String(char const*)>
    101e:	aa09      	add	r2, sp, #36	; 0x24
    1020:	4972      	ldr	r1, [pc, #456]	; (11ec <initialize_opcode_info()+0xd88>)
    1022:	4610      	mov	r0, r2
    1024:	f007 fd66 	bl	8af4 <String::String(char const*)>
    1028:	aa01      	add	r2, sp, #4
    102a:	487a      	ldr	r0, [pc, #488]	; (1214 <initialize_opcode_info()+0xdb0>)
    102c:	4611      	mov	r1, r2
    102e:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1032:	f7ff f819 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1036:	aa01      	add	r2, sp, #4
    1038:	4610      	mov	r0, r2
    103a:	f7ff fa05 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
    103e:	aa01      	add	r2, sp, #4
    1040:	4968      	ldr	r1, [pc, #416]	; (11e4 <initialize_opcode_info()+0xd80>)
    1042:	4610      	mov	r0, r2
    1044:	f007 fd56 	bl	8af4 <String::String(char const*)>
    1048:	aa05      	add	r2, sp, #20
    104a:	4973      	ldr	r1, [pc, #460]	; (1218 <initialize_opcode_info()+0xdb4>)
    104c:	4610      	mov	r0, r2
    104e:	f007 fd51 	bl	8af4 <String::String(char const*)>
    1052:	aa09      	add	r2, sp, #36	; 0x24
    1054:	4965      	ldr	r1, [pc, #404]	; (11ec <initialize_opcode_info()+0xd88>)
    1056:	4610      	mov	r0, r2
    1058:	f007 fd4c 	bl	8af4 <String::String(char const*)>
    105c:	aa01      	add	r2, sp, #4
    105e:	486f      	ldr	r0, [pc, #444]	; (121c <initialize_opcode_info()+0xdb8>)
    1060:	4611      	mov	r1, r2
    1062:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1066:	f7fe ffff 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    106a:	aa01      	add	r2, sp, #4
    106c:	4610      	mov	r0, r2
    106e:	f7ff f9eb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
    1072:	aa01      	add	r2, sp, #4
    1074:	4961      	ldr	r1, [pc, #388]	; (11fc <initialize_opcode_info()+0xd98>)
    1076:	4610      	mov	r0, r2
    1078:	f007 fd3c 	bl	8af4 <String::String(char const*)>
    107c:	aa05      	add	r2, sp, #20
    107e:	4966      	ldr	r1, [pc, #408]	; (1218 <initialize_opcode_info()+0xdb4>)
    1080:	4610      	mov	r0, r2
    1082:	f007 fd37 	bl	8af4 <String::String(char const*)>
    1086:	aa09      	add	r2, sp, #36	; 0x24
    1088:	4950      	ldr	r1, [pc, #320]	; (11cc <initialize_opcode_info()+0xd68>)
    108a:	4610      	mov	r0, r2
    108c:	f007 fd32 	bl	8af4 <String::String(char const*)>
    1090:	aa01      	add	r2, sp, #4
    1092:	f240 3307 	movw	r3, #775	; 0x307
    1096:	4862      	ldr	r0, [pc, #392]	; (1220 <initialize_opcode_info()+0xdbc>)
    1098:	4611      	mov	r1, r2
    109a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    109e:	f7fe ffe3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10a2:	aa01      	add	r2, sp, #4
    10a4:	4610      	mov	r0, r2
    10a6:	f7ff f9cf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
    10aa:	aa01      	add	r2, sp, #4
    10ac:	495d      	ldr	r1, [pc, #372]	; (1224 <initialize_opcode_info()+0xdc0>)
    10ae:	4610      	mov	r0, r2
    10b0:	f007 fd20 	bl	8af4 <String::String(char const*)>
    10b4:	aa05      	add	r2, sp, #20
    10b6:	4949      	ldr	r1, [pc, #292]	; (11dc <initialize_opcode_info()+0xd78>)
    10b8:	4610      	mov	r0, r2
    10ba:	f007 fd1b 	bl	8af4 <String::String(char const*)>
    10be:	aa09      	add	r2, sp, #36	; 0x24
    10c0:	4946      	ldr	r1, [pc, #280]	; (11dc <initialize_opcode_info()+0xd78>)
    10c2:	4610      	mov	r0, r2
    10c4:	f007 fd16 	bl	8af4 <String::String(char const*)>
    10c8:	aa01      	add	r2, sp, #4
    10ca:	f44f 7083 	mov.w	r0, #262	; 0x106
    10ce:	4611      	mov	r1, r2
    10d0:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    10d4:	4854      	ldr	r0, [pc, #336]	; (1228 <initialize_opcode_info()+0xdc4>)
    10d6:	f7fe ffc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10da:	a801      	add	r0, sp, #4
    10dc:	f7ff f9b4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
    10e0:	4952      	ldr	r1, [pc, #328]	; (122c <initialize_opcode_info()+0xdc8>)
    10e2:	a801      	add	r0, sp, #4
    10e4:	f007 fd06 	bl	8af4 <String::String(char const*)>
    10e8:	4951      	ldr	r1, [pc, #324]	; (1230 <initialize_opcode_info()+0xdcc>)
    10ea:	a805      	add	r0, sp, #20
    10ec:	f007 fd02 	bl	8af4 <String::String(char const*)>
    10f0:	4950      	ldr	r1, [pc, #320]	; (1234 <initialize_opcode_info()+0xdd0>)
    10f2:	a809      	add	r0, sp, #36	; 0x24
    10f4:	f007 fcfe 	bl	8af4 <String::String(char const*)>
    10f8:	aa01      	add	r2, sp, #4
    10fa:	484f      	ldr	r0, [pc, #316]	; (1238 <initialize_opcode_info()+0xdd4>)
    10fc:	4611      	mov	r1, r2
    10fe:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1102:	f7fe ffb1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1106:	a801      	add	r0, sp, #4
    1108:	f7ff f99e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
    110c:	4947      	ldr	r1, [pc, #284]	; (122c <initialize_opcode_info()+0xdc8>)
    110e:	a801      	add	r0, sp, #4
    1110:	f007 fcf0 	bl	8af4 <String::String(char const*)>
    1114:	4949      	ldr	r1, [pc, #292]	; (123c <initialize_opcode_info()+0xdd8>)
    1116:	a805      	add	r0, sp, #20
    1118:	f007 fcec 	bl	8af4 <String::String(char const*)>
    111c:	4945      	ldr	r1, [pc, #276]	; (1234 <initialize_opcode_info()+0xdd0>)
    111e:	a809      	add	r0, sp, #36	; 0x24
    1120:	f007 fce8 	bl	8af4 <String::String(char const*)>
    1124:	aa01      	add	r2, sp, #4
    1126:	4846      	ldr	r0, [pc, #280]	; (1240 <initialize_opcode_info()+0xddc>)
    1128:	4611      	mov	r1, r2
    112a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    112e:	f7fe ff9b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1132:	a801      	add	r0, sp, #4
    1134:	f7ff f988 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
    1138:	4942      	ldr	r1, [pc, #264]	; (1244 <initialize_opcode_info()+0xde0>)
    113a:	a801      	add	r0, sp, #4
    113c:	f007 fcda 	bl	8af4 <String::String(char const*)>
    1140:	493e      	ldr	r1, [pc, #248]	; (123c <initialize_opcode_info()+0xdd8>)
    1142:	a805      	add	r0, sp, #20
    1144:	f007 fcd6 	bl	8af4 <String::String(char const*)>
    1148:	4920      	ldr	r1, [pc, #128]	; (11cc <initialize_opcode_info()+0xd68>)
    114a:	a809      	add	r0, sp, #36	; 0x24
    114c:	f007 fcd2 	bl	8af4 <String::String(char const*)>
    1150:	aa01      	add	r2, sp, #4
    1152:	483d      	ldr	r0, [pc, #244]	; (1248 <initialize_opcode_info()+0xde4>)
    1154:	4611      	mov	r1, r2
    1156:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    115a:	f7fe ff85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    115e:	a801      	add	r0, sp, #4
    1160:	f7ff f972 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
    1164:	4939      	ldr	r1, [pc, #228]	; (124c <initialize_opcode_info()+0xde8>)
    1166:	a801      	add	r0, sp, #4
    1168:	f007 fcc4 	bl	8af4 <String::String(char const*)>
    116c:	491b      	ldr	r1, [pc, #108]	; (11dc <initialize_opcode_info()+0xd78>)
    116e:	a805      	add	r0, sp, #20
    1170:	f007 fcc0 	bl	8af4 <String::String(char const*)>
    1174:	4919      	ldr	r1, [pc, #100]	; (11dc <initialize_opcode_info()+0xd78>)
    1176:	a809      	add	r0, sp, #36	; 0x24
    1178:	f007 fcbc 	bl	8af4 <String::String(char const*)>
    117c:	f44f 7182 	mov.w	r1, #260	; 0x104
    1180:	4833      	ldr	r0, [pc, #204]	; (1250 <initialize_opcode_info()+0xdec>)
    1182:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1186:	a901      	add	r1, sp, #4
    1188:	f7fe ff6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    118c:	a801      	add	r0, sp, #4
    118e:	f7ff f95b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
    1192:	4926      	ldr	r1, [pc, #152]	; (122c <initialize_opcode_info()+0xdc8>)
    1194:	a801      	add	r0, sp, #4
    1196:	f007 fcad 	bl	8af4 <String::String(char const*)>
    119a:	492e      	ldr	r1, [pc, #184]	; (1254 <initialize_opcode_info()+0xdf0>)
    119c:	a805      	add	r0, sp, #20
    119e:	f007 fca9 	bl	8af4 <String::String(char const*)>
    11a2:	4924      	ldr	r1, [pc, #144]	; (1234 <initialize_opcode_info()+0xdd0>)
    11a4:	a809      	add	r0, sp, #36	; 0x24
    11a6:	f007 fca5 	bl	8af4 <String::String(char const*)>
    11aa:	a901      	add	r1, sp, #4
    11ac:	482a      	ldr	r0, [pc, #168]	; (1258 <initialize_opcode_info()+0xdf4>)
    11ae:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    11b2:	f7fe ff59 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11b6:	a801      	add	r0, sp, #4
    11b8:	f7ff f946 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
    11bc:	4921      	ldr	r1, [pc, #132]	; (1244 <initialize_opcode_info()+0xde0>)
    11be:	a801      	add	r0, sp, #4
    11c0:	f007 fc98 	bl	8af4 <String::String(char const*)>
    11c4:	e04a      	b.n	125c <initialize_opcode_info()+0xdf8>
    11c6:	bf00      	nop
    11c8:	20000424 	.word	0x20000424
    11cc:	20000a00 	.word	0x20000a00
    11d0:	200163f0 	.word	0x200163f0
    11d4:	20000a54 	.word	0x20000a54
    11d8:	200003e8 	.word	0x200003e8
    11dc:	200007d4 	.word	0x200007d4
    11e0:	20016458 	.word	0x20016458
    11e4:	20000a44 	.word	0x20000a44
    11e8:	200003f8 	.word	0x200003f8
    11ec:	200009f8 	.word	0x200009f8
    11f0:	2001648c 	.word	0x2001648c
    11f4:	20000400 	.word	0x20000400
    11f8:	2001655c 	.word	0x2001655c
    11fc:	20000a48 	.word	0x20000a48
    1200:	20016590 	.word	0x20016590
    1204:	20000a58 	.word	0x20000a58
    1208:	20000a5c 	.word	0x20000a5c
    120c:	200165f8 	.word	0x200165f8
    1210:	20000430 	.word	0x20000430
    1214:	2001662c 	.word	0x2001662c
    1218:	20000428 	.word	0x20000428
    121c:	200166fc 	.word	0x200166fc
    1220:	20016730 	.word	0x20016730
    1224:	20000a60 	.word	0x20000a60
    1228:	20016798 	.word	0x20016798
    122c:	20000a64 	.word	0x20000a64
    1230:	200003ec 	.word	0x200003ec
    1234:	20000a68 	.word	0x20000a68
    1238:	200167cc 	.word	0x200167cc
    123c:	200003e0 	.word	0x200003e0
    1240:	2001689c 	.word	0x2001689c
    1244:	20000a70 	.word	0x20000a70
    1248:	200168d0 	.word	0x200168d0
    124c:	20000a74 	.word	0x20000a74
    1250:	20016938 	.word	0x20016938
    1254:	200003d8 	.word	0x200003d8
    1258:	2001696c 	.word	0x2001696c
    125c:	49b2      	ldr	r1, [pc, #712]	; (1528 <initialize_opcode_info()+0x10c4>)
    125e:	a805      	add	r0, sp, #20
    1260:	f007 fc48 	bl	8af4 <String::String(char const*)>
    1264:	49b1      	ldr	r1, [pc, #708]	; (152c <initialize_opcode_info()+0x10c8>)
    1266:	a809      	add	r0, sp, #36	; 0x24
    1268:	f007 fc44 	bl	8af4 <String::String(char const*)>
    126c:	a901      	add	r1, sp, #4
    126e:	48b0      	ldr	r0, [pc, #704]	; (1530 <initialize_opcode_info()+0x10cc>)
    1270:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1274:	f7fe fef8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1278:	a801      	add	r0, sp, #4
    127a:	f7ff f8e5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
    127e:	49ad      	ldr	r1, [pc, #692]	; (1534 <initialize_opcode_info()+0x10d0>)
    1280:	a801      	add	r0, sp, #4
    1282:	f007 fc37 	bl	8af4 <String::String(char const*)>
    1286:	49ac      	ldr	r1, [pc, #688]	; (1538 <initialize_opcode_info()+0x10d4>)
    1288:	a805      	add	r0, sp, #20
    128a:	f007 fc33 	bl	8af4 <String::String(char const*)>
    128e:	49ab      	ldr	r1, [pc, #684]	; (153c <initialize_opcode_info()+0x10d8>)
    1290:	a809      	add	r0, sp, #36	; 0x24
    1292:	f007 fc2f 	bl	8af4 <String::String(char const*)>
    1296:	f240 3205 	movw	r2, #773	; 0x305
    129a:	a901      	add	r1, sp, #4
    129c:	48a8      	ldr	r0, [pc, #672]	; (1540 <initialize_opcode_info()+0x10dc>)
    129e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    12a2:	f7fe fee1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12a6:	a801      	add	r0, sp, #4
    12a8:	f7ff f8ce 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
    12ac:	49a5      	ldr	r1, [pc, #660]	; (1544 <initialize_opcode_info()+0x10e0>)
    12ae:	a801      	add	r0, sp, #4
    12b0:	f007 fc20 	bl	8af4 <String::String(char const*)>
    12b4:	49a4      	ldr	r1, [pc, #656]	; (1548 <initialize_opcode_info()+0x10e4>)
    12b6:	a805      	add	r0, sp, #20
    12b8:	f007 fc1c 	bl	8af4 <String::String(char const*)>
    12bc:	49a3      	ldr	r1, [pc, #652]	; (154c <initialize_opcode_info()+0x10e8>)
    12be:	a809      	add	r0, sp, #36	; 0x24
    12c0:	f007 fc18 	bl	8af4 <String::String(char const*)>
    12c4:	a901      	add	r1, sp, #4
    12c6:	48a2      	ldr	r0, [pc, #648]	; (1550 <initialize_opcode_info()+0x10ec>)
    12c8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    12cc:	f7fe fecc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12d0:	a801      	add	r0, sp, #4
    12d2:	f7ff f8b9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
    12d6:	499f      	ldr	r1, [pc, #636]	; (1554 <initialize_opcode_info()+0x10f0>)
    12d8:	a801      	add	r0, sp, #4
    12da:	f007 fc0b 	bl	8af4 <String::String(char const*)>
    12de:	499a      	ldr	r1, [pc, #616]	; (1548 <initialize_opcode_info()+0x10e4>)
    12e0:	a805      	add	r0, sp, #20
    12e2:	f007 fc07 	bl	8af4 <String::String(char const*)>
    12e6:	4991      	ldr	r1, [pc, #580]	; (152c <initialize_opcode_info()+0x10c8>)
    12e8:	a809      	add	r0, sp, #36	; 0x24
    12ea:	f007 fc03 	bl	8af4 <String::String(char const*)>
    12ee:	a901      	add	r1, sp, #4
    12f0:	4899      	ldr	r0, [pc, #612]	; (1558 <initialize_opcode_info()+0x10f4>)
    12f2:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    12f6:	f7fe feb7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12fa:	a801      	add	r0, sp, #4
    12fc:	f7ff f8a4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
    1300:	4996      	ldr	r1, [pc, #600]	; (155c <initialize_opcode_info()+0x10f8>)
    1302:	a801      	add	r0, sp, #4
    1304:	f007 fbf6 	bl	8af4 <String::String(char const*)>
    1308:	4995      	ldr	r1, [pc, #596]	; (1560 <initialize_opcode_info()+0x10fc>)
    130a:	a805      	add	r0, sp, #20
    130c:	f007 fbf2 	bl	8af4 <String::String(char const*)>
    1310:	498a      	ldr	r1, [pc, #552]	; (153c <initialize_opcode_info()+0x10d8>)
    1312:	a809      	add	r0, sp, #36	; 0x24
    1314:	f007 fbee 	bl	8af4 <String::String(char const*)>
    1318:	a901      	add	r1, sp, #4
    131a:	4892      	ldr	r0, [pc, #584]	; (1564 <initialize_opcode_info()+0x1100>)
    131c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1320:	f7fe fea2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1324:	a801      	add	r0, sp, #4
    1326:	f7ff f88f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
    132a:	4986      	ldr	r1, [pc, #536]	; (1544 <initialize_opcode_info()+0x10e0>)
    132c:	a801      	add	r0, sp, #4
    132e:	f007 fbe1 	bl	8af4 <String::String(char const*)>
    1332:	498d      	ldr	r1, [pc, #564]	; (1568 <initialize_opcode_info()+0x1104>)
    1334:	a805      	add	r0, sp, #20
    1336:	f007 fbdd 	bl	8af4 <String::String(char const*)>
    133a:	4984      	ldr	r1, [pc, #528]	; (154c <initialize_opcode_info()+0x10e8>)
    133c:	a809      	add	r0, sp, #36	; 0x24
    133e:	f007 fbd9 	bl	8af4 <String::String(char const*)>
    1342:	a901      	add	r1, sp, #4
    1344:	4889      	ldr	r0, [pc, #548]	; (156c <initialize_opcode_info()+0x1108>)
    1346:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    134a:	f7fe fe8d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    134e:	a801      	add	r0, sp, #4
    1350:	f7ff f87a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
    1354:	497b      	ldr	r1, [pc, #492]	; (1544 <initialize_opcode_info()+0x10e0>)
    1356:	a801      	add	r0, sp, #4
    1358:	f007 fbcc 	bl	8af4 <String::String(char const*)>
    135c:	4984      	ldr	r1, [pc, #528]	; (1570 <initialize_opcode_info()+0x110c>)
    135e:	a805      	add	r0, sp, #20
    1360:	f007 fbc8 	bl	8af4 <String::String(char const*)>
    1364:	4979      	ldr	r1, [pc, #484]	; (154c <initialize_opcode_info()+0x10e8>)
    1366:	a809      	add	r0, sp, #36	; 0x24
    1368:	f007 fbc4 	bl	8af4 <String::String(char const*)>
    136c:	a901      	add	r1, sp, #4
    136e:	4881      	ldr	r0, [pc, #516]	; (1574 <initialize_opcode_info()+0x1110>)
    1370:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1374:	f7fe fe78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1378:	a801      	add	r0, sp, #4
    137a:	f7ff f865 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
    137e:	4975      	ldr	r1, [pc, #468]	; (1554 <initialize_opcode_info()+0x10f0>)
    1380:	a801      	add	r0, sp, #4
    1382:	f007 fbb7 	bl	8af4 <String::String(char const*)>
    1386:	497a      	ldr	r1, [pc, #488]	; (1570 <initialize_opcode_info()+0x110c>)
    1388:	a805      	add	r0, sp, #20
    138a:	f007 fbb3 	bl	8af4 <String::String(char const*)>
    138e:	4967      	ldr	r1, [pc, #412]	; (152c <initialize_opcode_info()+0x10c8>)
    1390:	a809      	add	r0, sp, #36	; 0x24
    1392:	f007 fbaf 	bl	8af4 <String::String(char const*)>
    1396:	a901      	add	r1, sp, #4
    1398:	4877      	ldr	r0, [pc, #476]	; (1578 <initialize_opcode_info()+0x1114>)
    139a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    139e:	f7fe fe63 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13a2:	a801      	add	r0, sp, #4
    13a4:	f7ff f850 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
    13a8:	4974      	ldr	r1, [pc, #464]	; (157c <initialize_opcode_info()+0x1118>)
    13aa:	a801      	add	r0, sp, #4
    13ac:	f007 fba2 	bl	8af4 <String::String(char const*)>
    13b0:	4962      	ldr	r1, [pc, #392]	; (153c <initialize_opcode_info()+0x10d8>)
    13b2:	a805      	add	r0, sp, #20
    13b4:	f007 fb9e 	bl	8af4 <String::String(char const*)>
    13b8:	4971      	ldr	r1, [pc, #452]	; (1580 <initialize_opcode_info()+0x111c>)
    13ba:	a809      	add	r0, sp, #36	; 0x24
    13bc:	f007 fb9a 	bl	8af4 <String::String(char const*)>
    13c0:	a901      	add	r1, sp, #4
    13c2:	4870      	ldr	r0, [pc, #448]	; (1584 <initialize_opcode_info()+0x1120>)
    13c4:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    13c8:	f7fe fe4e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13cc:	a801      	add	r0, sp, #4
    13ce:	f7ff f83b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
    13d2:	495c      	ldr	r1, [pc, #368]	; (1544 <initialize_opcode_info()+0x10e0>)
    13d4:	a801      	add	r0, sp, #4
    13d6:	f007 fb8d 	bl	8af4 <String::String(char const*)>
    13da:	496b      	ldr	r1, [pc, #428]	; (1588 <initialize_opcode_info()+0x1124>)
    13dc:	a805      	add	r0, sp, #20
    13de:	f007 fb89 	bl	8af4 <String::String(char const*)>
    13e2:	495a      	ldr	r1, [pc, #360]	; (154c <initialize_opcode_info()+0x10e8>)
    13e4:	a809      	add	r0, sp, #36	; 0x24
    13e6:	f007 fb85 	bl	8af4 <String::String(char const*)>
    13ea:	a901      	add	r1, sp, #4
    13ec:	4867      	ldr	r0, [pc, #412]	; (158c <initialize_opcode_info()+0x1128>)
    13ee:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    13f2:	f7fe fe39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13f6:	a801      	add	r0, sp, #4
    13f8:	f7ff f826 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    13fc:	4951      	ldr	r1, [pc, #324]	; (1544 <initialize_opcode_info()+0x10e0>)
    13fe:	a801      	add	r0, sp, #4
    1400:	f007 fb78 	bl	8af4 <String::String(char const*)>
    1404:	4962      	ldr	r1, [pc, #392]	; (1590 <initialize_opcode_info()+0x112c>)
    1406:	a805      	add	r0, sp, #20
    1408:	f007 fb74 	bl	8af4 <String::String(char const*)>
    140c:	494f      	ldr	r1, [pc, #316]	; (154c <initialize_opcode_info()+0x10e8>)
    140e:	a809      	add	r0, sp, #36	; 0x24
    1410:	f007 fb70 	bl	8af4 <String::String(char const*)>
    1414:	a901      	add	r1, sp, #4
    1416:	485f      	ldr	r0, [pc, #380]	; (1594 <initialize_opcode_info()+0x1130>)
    1418:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    141c:	f7fe fe24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1420:	a801      	add	r0, sp, #4
    1422:	f7ff f811 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    1426:	494b      	ldr	r1, [pc, #300]	; (1554 <initialize_opcode_info()+0x10f0>)
    1428:	a801      	add	r0, sp, #4
    142a:	f007 fb63 	bl	8af4 <String::String(char const*)>
    142e:	4958      	ldr	r1, [pc, #352]	; (1590 <initialize_opcode_info()+0x112c>)
    1430:	a805      	add	r0, sp, #20
    1432:	f007 fb5f 	bl	8af4 <String::String(char const*)>
    1436:	493d      	ldr	r1, [pc, #244]	; (152c <initialize_opcode_info()+0x10c8>)
    1438:	a809      	add	r0, sp, #36	; 0x24
    143a:	f007 fb5b 	bl	8af4 <String::String(char const*)>
    143e:	f240 3307 	movw	r3, #775	; 0x307
    1442:	a901      	add	r1, sp, #4
    1444:	4854      	ldr	r0, [pc, #336]	; (1598 <initialize_opcode_info()+0x1134>)
    1446:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    144a:	f7fe fe0d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    144e:	a801      	add	r0, sp, #4
    1450:	f7fe fffa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    1454:	4951      	ldr	r1, [pc, #324]	; (159c <initialize_opcode_info()+0x1138>)
    1456:	a801      	add	r0, sp, #4
    1458:	f007 fb4c 	bl	8af4 <String::String(char const*)>
    145c:	4950      	ldr	r1, [pc, #320]	; (15a0 <initialize_opcode_info()+0x113c>)
    145e:	a805      	add	r0, sp, #20
    1460:	f007 fb48 	bl	8af4 <String::String(char const*)>
    1464:	4935      	ldr	r1, [pc, #212]	; (153c <initialize_opcode_info()+0x10d8>)
    1466:	a809      	add	r0, sp, #36	; 0x24
    1468:	f007 fb44 	bl	8af4 <String::String(char const*)>
    146c:	a901      	add	r1, sp, #4
    146e:	484d      	ldr	r0, [pc, #308]	; (15a4 <initialize_opcode_info()+0x1140>)
    1470:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1474:	f7fe fdf8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1478:	a801      	add	r0, sp, #4
    147a:	f7fe ffe5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    147e:	494a      	ldr	r1, [pc, #296]	; (15a8 <initialize_opcode_info()+0x1144>)
    1480:	a801      	add	r0, sp, #4
    1482:	f007 fb37 	bl	8af4 <String::String(char const*)>
    1486:	4949      	ldr	r1, [pc, #292]	; (15ac <initialize_opcode_info()+0x1148>)
    1488:	a805      	add	r0, sp, #20
    148a:	f007 fb33 	bl	8af4 <String::String(char const*)>
    148e:	492b      	ldr	r1, [pc, #172]	; (153c <initialize_opcode_info()+0x10d8>)
    1490:	a809      	add	r0, sp, #36	; 0x24
    1492:	f007 fb2f 	bl	8af4 <String::String(char const*)>
    1496:	a901      	add	r1, sp, #4
    1498:	4845      	ldr	r0, [pc, #276]	; (15b0 <initialize_opcode_info()+0x114c>)
    149a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    149e:	f7fe fde3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14a2:	a801      	add	r0, sp, #4
    14a4:	f7fe ffd0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    14a8:	493c      	ldr	r1, [pc, #240]	; (159c <initialize_opcode_info()+0x1138>)
    14aa:	a801      	add	r0, sp, #4
    14ac:	f007 fb22 	bl	8af4 <String::String(char const*)>
    14b0:	493e      	ldr	r1, [pc, #248]	; (15ac <initialize_opcode_info()+0x1148>)
    14b2:	a805      	add	r0, sp, #20
    14b4:	f007 fb1e 	bl	8af4 <String::String(char const*)>
    14b8:	4920      	ldr	r1, [pc, #128]	; (153c <initialize_opcode_info()+0x10d8>)
    14ba:	a809      	add	r0, sp, #36	; 0x24
    14bc:	f007 fb1a 	bl	8af4 <String::String(char const*)>
    14c0:	a901      	add	r1, sp, #4
    14c2:	483c      	ldr	r0, [pc, #240]	; (15b4 <initialize_opcode_info()+0x1150>)
    14c4:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    14c8:	f7fe fdce 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14cc:	a801      	add	r0, sp, #4
    14ce:	f7fe ffbb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    14d2:	4939      	ldr	r1, [pc, #228]	; (15b8 <initialize_opcode_info()+0x1154>)
    14d4:	a801      	add	r0, sp, #4
    14d6:	f007 fb0d 	bl	8af4 <String::String(char const*)>
    14da:	4934      	ldr	r1, [pc, #208]	; (15ac <initialize_opcode_info()+0x1148>)
    14dc:	a805      	add	r0, sp, #20
    14de:	f007 fb09 	bl	8af4 <String::String(char const*)>
    14e2:	4916      	ldr	r1, [pc, #88]	; (153c <initialize_opcode_info()+0x10d8>)
    14e4:	a809      	add	r0, sp, #36	; 0x24
    14e6:	f007 fb05 	bl	8af4 <String::String(char const*)>
    14ea:	a901      	add	r1, sp, #4
    14ec:	4833      	ldr	r0, [pc, #204]	; (15bc <initialize_opcode_info()+0x1158>)
    14ee:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    14f2:	f7fe fdb9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14f6:	a801      	add	r0, sp, #4
    14f8:	f7fe ffa6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    14fc:	4930      	ldr	r1, [pc, #192]	; (15c0 <initialize_opcode_info()+0x115c>)
    14fe:	a801      	add	r0, sp, #4
    1500:	f007 faf8 	bl	8af4 <String::String(char const*)>
    1504:	490d      	ldr	r1, [pc, #52]	; (153c <initialize_opcode_info()+0x10d8>)
    1506:	a805      	add	r0, sp, #20
    1508:	f007 faf4 	bl	8af4 <String::String(char const*)>
    150c:	492d      	ldr	r1, [pc, #180]	; (15c4 <initialize_opcode_info()+0x1160>)
    150e:	a809      	add	r0, sp, #36	; 0x24
    1510:	f007 faf0 	bl	8af4 <String::String(char const*)>
    1514:	a901      	add	r1, sp, #4
    1516:	482c      	ldr	r0, [pc, #176]	; (15c8 <initialize_opcode_info()+0x1164>)
    1518:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    151c:	f7fe fda4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1520:	a801      	add	r0, sp, #4
    1522:	f7fe ff91 	bl	448 <OpDecoder::~OpDecoder()>
    1526:	e051      	b.n	15cc <initialize_opcode_info()+0x1168>
    1528:	20000a08 	.word	0x20000a08
    152c:	20000a00 	.word	0x20000a00
    1530:	200169a0 	.word	0x200169a0
    1534:	20000a50 	.word	0x20000a50
    1538:	2000043c 	.word	0x2000043c
    153c:	200007d4 	.word	0x200007d4
    1540:	20016a08 	.word	0x20016a08
    1544:	20000a64 	.word	0x20000a64
    1548:	20000424 	.word	0x20000424
    154c:	20000a68 	.word	0x20000a68
    1550:	20016a3c 	.word	0x20016a3c
    1554:	20000a70 	.word	0x20000a70
    1558:	20016a70 	.word	0x20016a70
    155c:	20000a78 	.word	0x20000a78
    1560:	200003e8 	.word	0x200003e8
    1564:	20016ad8 	.word	0x20016ad8
    1568:	200003f8 	.word	0x200003f8
    156c:	20016b0c 	.word	0x20016b0c
    1570:	20000400 	.word	0x20000400
    1574:	20016bdc 	.word	0x20016bdc
    1578:	20016c10 	.word	0x20016c10
    157c:	20000a7c 	.word	0x20000a7c
    1580:	20000a5c 	.word	0x20000a5c
    1584:	20016c78 	.word	0x20016c78
    1588:	20000430 	.word	0x20000430
    158c:	20016cac 	.word	0x20016cac
    1590:	20000428 	.word	0x20000428
    1594:	20016d7c 	.word	0x20016d7c
    1598:	20016db0 	.word	0x20016db0
    159c:	20000a80 	.word	0x20000a80
    15a0:	200003ec 	.word	0x200003ec
    15a4:	20016e4c 	.word	0x20016e4c
    15a8:	20000a84 	.word	0x20000a84
    15ac:	200003e0 	.word	0x200003e0
    15b0:	20016ee8 	.word	0x20016ee8
    15b4:	20016f1c 	.word	0x20016f1c
    15b8:	20000a88 	.word	0x20000a88
    15bc:	20016f50 	.word	0x20016f50
    15c0:	20000a8c 	.word	0x20000a8c
    15c4:	200009f8 	.word	0x200009f8
    15c8:	20016fb8 	.word	0x20016fb8
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    15cc:	49b2      	ldr	r1, [pc, #712]	; (1898 <initialize_opcode_info()+0x1434>)
    15ce:	a801      	add	r0, sp, #4
    15d0:	f007 fa90 	bl	8af4 <String::String(char const*)>
    15d4:	49b1      	ldr	r1, [pc, #708]	; (189c <initialize_opcode_info()+0x1438>)
    15d6:	a805      	add	r0, sp, #20
    15d8:	f007 fa8c 	bl	8af4 <String::String(char const*)>
    15dc:	49b0      	ldr	r1, [pc, #704]	; (18a0 <initialize_opcode_info()+0x143c>)
    15de:	a809      	add	r0, sp, #36	; 0x24
    15e0:	f007 fa88 	bl	8af4 <String::String(char const*)>
    15e4:	a901      	add	r1, sp, #4
    15e6:	48af      	ldr	r0, [pc, #700]	; (18a4 <initialize_opcode_info()+0x1440>)
    15e8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    15ec:	f7fe fd3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15f0:	a801      	add	r0, sp, #4
    15f2:	f7fe ff29 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    15f6:	49ac      	ldr	r1, [pc, #688]	; (18a8 <initialize_opcode_info()+0x1444>)
    15f8:	a801      	add	r0, sp, #4
    15fa:	f007 fa7b 	bl	8af4 <String::String(char const*)>
    15fe:	49ab      	ldr	r1, [pc, #684]	; (18ac <initialize_opcode_info()+0x1448>)
    1600:	a805      	add	r0, sp, #20
    1602:	f007 fa77 	bl	8af4 <String::String(char const*)>
    1606:	49a5      	ldr	r1, [pc, #660]	; (189c <initialize_opcode_info()+0x1438>)
    1608:	a809      	add	r0, sp, #36	; 0x24
    160a:	f007 fa73 	bl	8af4 <String::String(char const*)>
    160e:	a901      	add	r1, sp, #4
    1610:	48a7      	ldr	r0, [pc, #668]	; (18b0 <initialize_opcode_info()+0x144c>)
    1612:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1616:	f7fe fd27 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    161a:	a801      	add	r0, sp, #4
    161c:	f7fe ff14 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1620:	49a4      	ldr	r1, [pc, #656]	; (18b4 <initialize_opcode_info()+0x1450>)
    1622:	a801      	add	r0, sp, #4
    1624:	f007 fa66 	bl	8af4 <String::String(char const*)>
    1628:	49a0      	ldr	r1, [pc, #640]	; (18ac <initialize_opcode_info()+0x1448>)
    162a:	a805      	add	r0, sp, #20
    162c:	f007 fa62 	bl	8af4 <String::String(char const*)>
    1630:	499a      	ldr	r1, [pc, #616]	; (189c <initialize_opcode_info()+0x1438>)
    1632:	a809      	add	r0, sp, #36	; 0x24
    1634:	f007 fa5e 	bl	8af4 <String::String(char const*)>
    1638:	a901      	add	r1, sp, #4
    163a:	489f      	ldr	r0, [pc, #636]	; (18b8 <initialize_opcode_info()+0x1454>)
    163c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1640:	f7fe fd12 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1644:	a801      	add	r0, sp, #4
    1646:	f7fe feff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    164a:	499c      	ldr	r1, [pc, #624]	; (18bc <initialize_opcode_info()+0x1458>)
    164c:	a801      	add	r0, sp, #4
    164e:	f007 fa51 	bl	8af4 <String::String(char const*)>
    1652:	4996      	ldr	r1, [pc, #600]	; (18ac <initialize_opcode_info()+0x1448>)
    1654:	a805      	add	r0, sp, #20
    1656:	f007 fa4d 	bl	8af4 <String::String(char const*)>
    165a:	4990      	ldr	r1, [pc, #576]	; (189c <initialize_opcode_info()+0x1438>)
    165c:	a809      	add	r0, sp, #36	; 0x24
    165e:	f007 fa49 	bl	8af4 <String::String(char const*)>
    1662:	a901      	add	r1, sp, #4
    1664:	4896      	ldr	r0, [pc, #600]	; (18c0 <initialize_opcode_info()+0x145c>)
    1666:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    166a:	f7fe fcfd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    166e:	a801      	add	r0, sp, #4
    1670:	f7fe feea 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    1674:	4993      	ldr	r1, [pc, #588]	; (18c4 <initialize_opcode_info()+0x1460>)
    1676:	a801      	add	r0, sp, #4
    1678:	f007 fa3c 	bl	8af4 <String::String(char const*)>
    167c:	4992      	ldr	r1, [pc, #584]	; (18c8 <initialize_opcode_info()+0x1464>)
    167e:	a805      	add	r0, sp, #20
    1680:	f007 fa38 	bl	8af4 <String::String(char const*)>
    1684:	4985      	ldr	r1, [pc, #532]	; (189c <initialize_opcode_info()+0x1438>)
    1686:	a809      	add	r0, sp, #36	; 0x24
    1688:	f007 fa34 	bl	8af4 <String::String(char const*)>
    168c:	a901      	add	r1, sp, #4
    168e:	488f      	ldr	r0, [pc, #572]	; (18cc <initialize_opcode_info()+0x1468>)
    1690:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1694:	f7fe fce8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1698:	a801      	add	r0, sp, #4
    169a:	f7fe fed5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    169e:	4985      	ldr	r1, [pc, #532]	; (18b4 <initialize_opcode_info()+0x1450>)
    16a0:	a801      	add	r0, sp, #4
    16a2:	f007 fa27 	bl	8af4 <String::String(char const*)>
    16a6:	498a      	ldr	r1, [pc, #552]	; (18d0 <initialize_opcode_info()+0x146c>)
    16a8:	a805      	add	r0, sp, #20
    16aa:	f007 fa23 	bl	8af4 <String::String(char const*)>
    16ae:	497b      	ldr	r1, [pc, #492]	; (189c <initialize_opcode_info()+0x1438>)
    16b0:	a809      	add	r0, sp, #36	; 0x24
    16b2:	f007 fa1f 	bl	8af4 <String::String(char const*)>
    16b6:	a901      	add	r1, sp, #4
    16b8:	4886      	ldr	r0, [pc, #536]	; (18d4 <initialize_opcode_info()+0x1470>)
    16ba:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    16be:	f7fe fcd3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16c2:	a801      	add	r0, sp, #4
    16c4:	f7fe fec0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    16c8:	4977      	ldr	r1, [pc, #476]	; (18a8 <initialize_opcode_info()+0x1444>)
    16ca:	a801      	add	r0, sp, #4
    16cc:	f007 fa12 	bl	8af4 <String::String(char const*)>
    16d0:	4981      	ldr	r1, [pc, #516]	; (18d8 <initialize_opcode_info()+0x1474>)
    16d2:	a805      	add	r0, sp, #20
    16d4:	f007 fa0e 	bl	8af4 <String::String(char const*)>
    16d8:	4970      	ldr	r1, [pc, #448]	; (189c <initialize_opcode_info()+0x1438>)
    16da:	a809      	add	r0, sp, #36	; 0x24
    16dc:	f007 fa0a 	bl	8af4 <String::String(char const*)>
    16e0:	a901      	add	r1, sp, #4
    16e2:	487e      	ldr	r0, [pc, #504]	; (18dc <initialize_opcode_info()+0x1478>)
    16e4:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    16e8:	f7fe fcbe 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16ec:	a801      	add	r0, sp, #4
    16ee:	f7fe feab 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    16f2:	4970      	ldr	r1, [pc, #448]	; (18b4 <initialize_opcode_info()+0x1450>)
    16f4:	a801      	add	r0, sp, #4
    16f6:	f007 f9fd 	bl	8af4 <String::String(char const*)>
    16fa:	4977      	ldr	r1, [pc, #476]	; (18d8 <initialize_opcode_info()+0x1474>)
    16fc:	a805      	add	r0, sp, #20
    16fe:	f007 f9f9 	bl	8af4 <String::String(char const*)>
    1702:	4966      	ldr	r1, [pc, #408]	; (189c <initialize_opcode_info()+0x1438>)
    1704:	a809      	add	r0, sp, #36	; 0x24
    1706:	f007 f9f5 	bl	8af4 <String::String(char const*)>
    170a:	a901      	add	r1, sp, #4
    170c:	4874      	ldr	r0, [pc, #464]	; (18e0 <initialize_opcode_info()+0x147c>)
    170e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1712:	f7fe fca9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1716:	a801      	add	r0, sp, #4
    1718:	f7fe fe96 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    171c:	4967      	ldr	r1, [pc, #412]	; (18bc <initialize_opcode_info()+0x1458>)
    171e:	a801      	add	r0, sp, #4
    1720:	f007 f9e8 	bl	8af4 <String::String(char const*)>
    1724:	496f      	ldr	r1, [pc, #444]	; (18e4 <initialize_opcode_info()+0x1480>)
    1726:	a805      	add	r0, sp, #20
    1728:	f007 f9e4 	bl	8af4 <String::String(char const*)>
    172c:	495b      	ldr	r1, [pc, #364]	; (189c <initialize_opcode_info()+0x1438>)
    172e:	a809      	add	r0, sp, #36	; 0x24
    1730:	f007 f9e0 	bl	8af4 <String::String(char const*)>
    1734:	a901      	add	r1, sp, #4
    1736:	486c      	ldr	r0, [pc, #432]	; (18e8 <initialize_opcode_info()+0x1484>)
    1738:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    173c:	f7fe fc94 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1740:	a801      	add	r0, sp, #4
    1742:	f7fe fe81 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    1746:	4969      	ldr	r1, [pc, #420]	; (18ec <initialize_opcode_info()+0x1488>)
    1748:	a801      	add	r0, sp, #4
    174a:	f007 f9d3 	bl	8af4 <String::String(char const*)>
    174e:	4953      	ldr	r1, [pc, #332]	; (189c <initialize_opcode_info()+0x1438>)
    1750:	a805      	add	r0, sp, #20
    1752:	f007 f9cf 	bl	8af4 <String::String(char const*)>
    1756:	4952      	ldr	r1, [pc, #328]	; (18a0 <initialize_opcode_info()+0x143c>)
    1758:	a809      	add	r0, sp, #36	; 0x24
    175a:	f007 f9cb 	bl	8af4 <String::String(char const*)>
    175e:	a901      	add	r1, sp, #4
    1760:	4863      	ldr	r0, [pc, #396]	; (18f0 <initialize_opcode_info()+0x148c>)
    1762:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1766:	f7fe fc7f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    176a:	a801      	add	r0, sp, #4
    176c:	f7fe fe6c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    1770:	4950      	ldr	r1, [pc, #320]	; (18b4 <initialize_opcode_info()+0x1450>)
    1772:	a801      	add	r0, sp, #4
    1774:	f007 f9be 	bl	8af4 <String::String(char const*)>
    1778:	495e      	ldr	r1, [pc, #376]	; (18f4 <initialize_opcode_info()+0x1490>)
    177a:	a805      	add	r0, sp, #20
    177c:	f007 f9ba 	bl	8af4 <String::String(char const*)>
    1780:	4946      	ldr	r1, [pc, #280]	; (189c <initialize_opcode_info()+0x1438>)
    1782:	a809      	add	r0, sp, #36	; 0x24
    1784:	f007 f9b6 	bl	8af4 <String::String(char const*)>
    1788:	f240 3205 	movw	r2, #773	; 0x305
    178c:	a901      	add	r1, sp, #4
    178e:	485a      	ldr	r0, [pc, #360]	; (18f8 <initialize_opcode_info()+0x1494>)
    1790:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1794:	f7fe fc68 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1798:	a801      	add	r0, sp, #4
    179a:	f7fe fe55 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    179e:	4957      	ldr	r1, [pc, #348]	; (18fc <initialize_opcode_info()+0x1498>)
    17a0:	a801      	add	r0, sp, #4
    17a2:	f007 f9a7 	bl	8af4 <String::String(char const*)>
    17a6:	493d      	ldr	r1, [pc, #244]	; (189c <initialize_opcode_info()+0x1438>)
    17a8:	a805      	add	r0, sp, #20
    17aa:	f007 f9a3 	bl	8af4 <String::String(char const*)>
    17ae:	493b      	ldr	r1, [pc, #236]	; (189c <initialize_opcode_info()+0x1438>)
    17b0:	a809      	add	r0, sp, #36	; 0x24
    17b2:	f007 f99f 	bl	8af4 <String::String(char const*)>
    17b6:	a901      	add	r1, sp, #4
    17b8:	4851      	ldr	r0, [pc, #324]	; (1900 <initialize_opcode_info()+0x149c>)
    17ba:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    17be:	f7fe fc53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17c2:	a801      	add	r0, sp, #4
    17c4:	f7fe fe40 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    17c8:	493a      	ldr	r1, [pc, #232]	; (18b4 <initialize_opcode_info()+0x1450>)
    17ca:	a801      	add	r0, sp, #4
    17cc:	f007 f992 	bl	8af4 <String::String(char const*)>
    17d0:	494c      	ldr	r1, [pc, #304]	; (1904 <initialize_opcode_info()+0x14a0>)
    17d2:	a805      	add	r0, sp, #20
    17d4:	f007 f98e 	bl	8af4 <String::String(char const*)>
    17d8:	4930      	ldr	r1, [pc, #192]	; (189c <initialize_opcode_info()+0x1438>)
    17da:	a809      	add	r0, sp, #36	; 0x24
    17dc:	f007 f98a 	bl	8af4 <String::String(char const*)>
    17e0:	f240 3205 	movw	r2, #773	; 0x305
    17e4:	a901      	add	r1, sp, #4
    17e6:	4848      	ldr	r0, [pc, #288]	; (1908 <initialize_opcode_info()+0x14a4>)
    17e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    17ec:	f7fe fc3c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17f0:	a801      	add	r0, sp, #4
    17f2:	f7fe fe29 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    17f6:	4945      	ldr	r1, [pc, #276]	; (190c <initialize_opcode_info()+0x14a8>)
    17f8:	a801      	add	r0, sp, #4
    17fa:	f007 f97b 	bl	8af4 <String::String(char const*)>
    17fe:	4944      	ldr	r1, [pc, #272]	; (1910 <initialize_opcode_info()+0x14ac>)
    1800:	a805      	add	r0, sp, #20
    1802:	f007 f977 	bl	8af4 <String::String(char const*)>
    1806:	4926      	ldr	r1, [pc, #152]	; (18a0 <initialize_opcode_info()+0x143c>)
    1808:	a809      	add	r0, sp, #36	; 0x24
    180a:	f007 f973 	bl	8af4 <String::String(char const*)>
    180e:	a901      	add	r1, sp, #4
    1810:	4840      	ldr	r0, [pc, #256]	; (1914 <initialize_opcode_info()+0x14b0>)
    1812:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1816:	f7fe fc27 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    181a:	a801      	add	r0, sp, #4
    181c:	f7fe fe14 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    1820:	493d      	ldr	r1, [pc, #244]	; (1918 <initialize_opcode_info()+0x14b4>)
    1822:	a801      	add	r0, sp, #4
    1824:	f007 f966 	bl	8af4 <String::String(char const*)>
    1828:	493c      	ldr	r1, [pc, #240]	; (191c <initialize_opcode_info()+0x14b8>)
    182a:	a805      	add	r0, sp, #20
    182c:	f007 f962 	bl	8af4 <String::String(char const*)>
    1830:	491b      	ldr	r1, [pc, #108]	; (18a0 <initialize_opcode_info()+0x143c>)
    1832:	a809      	add	r0, sp, #36	; 0x24
    1834:	f007 f95e 	bl	8af4 <String::String(char const*)>
    1838:	a901      	add	r1, sp, #4
    183a:	4839      	ldr	r0, [pc, #228]	; (1920 <initialize_opcode_info()+0x14bc>)
    183c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1840:	f7fe fc12 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1844:	a801      	add	r0, sp, #4
    1846:	f7fe fdff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    184a:	4936      	ldr	r1, [pc, #216]	; (1924 <initialize_opcode_info()+0x14c0>)
    184c:	a801      	add	r0, sp, #4
    184e:	f007 f951 	bl	8af4 <String::String(char const*)>
    1852:	492f      	ldr	r1, [pc, #188]	; (1910 <initialize_opcode_info()+0x14ac>)
    1854:	a805      	add	r0, sp, #20
    1856:	f007 f94d 	bl	8af4 <String::String(char const*)>
    185a:	4911      	ldr	r1, [pc, #68]	; (18a0 <initialize_opcode_info()+0x143c>)
    185c:	a809      	add	r0, sp, #36	; 0x24
    185e:	f007 f949 	bl	8af4 <String::String(char const*)>
    1862:	a901      	add	r1, sp, #4
    1864:	4830      	ldr	r0, [pc, #192]	; (1928 <initialize_opcode_info()+0x14c4>)
    1866:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    186a:	f7fe fbfd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    186e:	a801      	add	r0, sp, #4
    1870:	f7fe fdea 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    1874:	4925      	ldr	r1, [pc, #148]	; (190c <initialize_opcode_info()+0x14a8>)
    1876:	a801      	add	r0, sp, #4
    1878:	f007 f93c 	bl	8af4 <String::String(char const*)>
    187c:	492b      	ldr	r1, [pc, #172]	; (192c <initialize_opcode_info()+0x14c8>)
    187e:	a805      	add	r0, sp, #20
    1880:	f007 f938 	bl	8af4 <String::String(char const*)>
    1884:	4906      	ldr	r1, [pc, #24]	; (18a0 <initialize_opcode_info()+0x143c>)
    1886:	a809      	add	r0, sp, #36	; 0x24
    1888:	f007 f934 	bl	8af4 <String::String(char const*)>
    188c:	a901      	add	r1, sp, #4
    188e:	4828      	ldr	r0, [pc, #160]	; (1930 <initialize_opcode_info()+0x14cc>)
    1890:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1894:	e04e      	b.n	1934 <initialize_opcode_info()+0x14d0>
    1896:	bf00      	nop
    1898:	20000a90 	.word	0x20000a90
    189c:	200007d4 	.word	0x200007d4
    18a0:	200009f8 	.word	0x200009f8
    18a4:	20017020 	.word	0x20017020
    18a8:	20000a84 	.word	0x20000a84
    18ac:	20000424 	.word	0x20000424
    18b0:	20017088 	.word	0x20017088
    18b4:	20000a80 	.word	0x20000a80
    18b8:	200170bc 	.word	0x200170bc
    18bc:	20000a88 	.word	0x20000a88
    18c0:	200170f0 	.word	0x200170f0
    18c4:	20000a94 	.word	0x20000a94
    18c8:	200003e8 	.word	0x200003e8
    18cc:	20017158 	.word	0x20017158
    18d0:	200003f8 	.word	0x200003f8
    18d4:	2001718c 	.word	0x2001718c
    18d8:	20000400 	.word	0x20000400
    18dc:	20017228 	.word	0x20017228
    18e0:	2001725c 	.word	0x2001725c
    18e4:	20000a98 	.word	0x20000a98
    18e8:	20017290 	.word	0x20017290
    18ec:	20000aa0 	.word	0x20000aa0
    18f0:	200172f8 	.word	0x200172f8
    18f4:	20000430 	.word	0x20000430
    18f8:	2001732c 	.word	0x2001732c
    18fc:	20000aa4 	.word	0x20000aa4
    1900:	20017360 	.word	0x20017360
    1904:	20000428 	.word	0x20000428
    1908:	200173fc 	.word	0x200173fc
    190c:	20000aa8 	.word	0x20000aa8
    1910:	200003d8 	.word	0x200003d8
    1914:	20017498 	.word	0x20017498
    1918:	20000aac 	.word	0x20000aac
    191c:	200003ec 	.word	0x200003ec
    1920:	200174cc 	.word	0x200174cc
    1924:	20000ab0 	.word	0x20000ab0
    1928:	20017500 	.word	0x20017500
    192c:	200003e0 	.word	0x200003e0
    1930:	20017568 	.word	0x20017568
    1934:	f7fe fb98 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1938:	a801      	add	r0, sp, #4
    193a:	f7fe fd85 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    193e:	49b2      	ldr	r1, [pc, #712]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1940:	a801      	add	r0, sp, #4
    1942:	f007 f8d7 	bl	8af4 <String::String(char const*)>
    1946:	49b1      	ldr	r1, [pc, #708]	; (1c0c <initialize_opcode_info()+0x17a8>)
    1948:	a805      	add	r0, sp, #20
    194a:	f007 f8d3 	bl	8af4 <String::String(char const*)>
    194e:	49b0      	ldr	r1, [pc, #704]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1950:	a809      	add	r0, sp, #36	; 0x24
    1952:	f007 f8cf 	bl	8af4 <String::String(char const*)>
    1956:	a901      	add	r1, sp, #4
    1958:	48ae      	ldr	r0, [pc, #696]	; (1c14 <initialize_opcode_info()+0x17b0>)
    195a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    195e:	f7fe fb83 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1962:	a801      	add	r0, sp, #4
    1964:	f7fe fd70 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    1968:	49ab      	ldr	r1, [pc, #684]	; (1c18 <initialize_opcode_info()+0x17b4>)
    196a:	a801      	add	r0, sp, #4
    196c:	f007 f8c2 	bl	8af4 <String::String(char const*)>
    1970:	49a6      	ldr	r1, [pc, #664]	; (1c0c <initialize_opcode_info()+0x17a8>)
    1972:	a805      	add	r0, sp, #20
    1974:	f007 f8be 	bl	8af4 <String::String(char const*)>
    1978:	49a5      	ldr	r1, [pc, #660]	; (1c10 <initialize_opcode_info()+0x17ac>)
    197a:	a809      	add	r0, sp, #36	; 0x24
    197c:	f007 f8ba 	bl	8af4 <String::String(char const*)>
    1980:	a901      	add	r1, sp, #4
    1982:	48a6      	ldr	r0, [pc, #664]	; (1c1c <initialize_opcode_info()+0x17b8>)
    1984:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1988:	f7fe fb6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    198c:	a801      	add	r0, sp, #4
    198e:	f7fe fd5b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    1992:	49a3      	ldr	r1, [pc, #652]	; (1c20 <initialize_opcode_info()+0x17bc>)
    1994:	a801      	add	r0, sp, #4
    1996:	f007 f8ad 	bl	8af4 <String::String(char const*)>
    199a:	49a2      	ldr	r1, [pc, #648]	; (1c24 <initialize_opcode_info()+0x17c0>)
    199c:	a805      	add	r0, sp, #20
    199e:	f007 f8a9 	bl	8af4 <String::String(char const*)>
    19a2:	499b      	ldr	r1, [pc, #620]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19a4:	a809      	add	r0, sp, #36	; 0x24
    19a6:	f007 f8a5 	bl	8af4 <String::String(char const*)>
    19aa:	a901      	add	r1, sp, #4
    19ac:	489e      	ldr	r0, [pc, #632]	; (1c28 <initialize_opcode_info()+0x17c4>)
    19ae:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    19b2:	f7fe fb59 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19b6:	a801      	add	r0, sp, #4
    19b8:	f7fe fd46 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    19bc:	4992      	ldr	r1, [pc, #584]	; (1c08 <initialize_opcode_info()+0x17a4>)
    19be:	a801      	add	r0, sp, #4
    19c0:	f007 f898 	bl	8af4 <String::String(char const*)>
    19c4:	4999      	ldr	r1, [pc, #612]	; (1c2c <initialize_opcode_info()+0x17c8>)
    19c6:	a805      	add	r0, sp, #20
    19c8:	f007 f894 	bl	8af4 <String::String(char const*)>
    19cc:	4990      	ldr	r1, [pc, #576]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19ce:	a809      	add	r0, sp, #36	; 0x24
    19d0:	f007 f890 	bl	8af4 <String::String(char const*)>
    19d4:	a901      	add	r1, sp, #4
    19d6:	4896      	ldr	r0, [pc, #600]	; (1c30 <initialize_opcode_info()+0x17cc>)
    19d8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    19dc:	f7fe fb44 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19e0:	a801      	add	r0, sp, #4
    19e2:	f7fe fd31 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    19e6:	4993      	ldr	r1, [pc, #588]	; (1c34 <initialize_opcode_info()+0x17d0>)
    19e8:	a801      	add	r0, sp, #4
    19ea:	f007 f883 	bl	8af4 <String::String(char const*)>
    19ee:	498d      	ldr	r1, [pc, #564]	; (1c24 <initialize_opcode_info()+0x17c0>)
    19f0:	a805      	add	r0, sp, #20
    19f2:	f007 f87f 	bl	8af4 <String::String(char const*)>
    19f6:	4986      	ldr	r1, [pc, #536]	; (1c10 <initialize_opcode_info()+0x17ac>)
    19f8:	a809      	add	r0, sp, #36	; 0x24
    19fa:	f007 f87b 	bl	8af4 <String::String(char const*)>
    19fe:	a901      	add	r1, sp, #4
    1a00:	488d      	ldr	r0, [pc, #564]	; (1c38 <initialize_opcode_info()+0x17d4>)
    1a02:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1a06:	f7fe fb2f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a0a:	a801      	add	r0, sp, #4
    1a0c:	f7fe fd1c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    1a10:	498a      	ldr	r1, [pc, #552]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1a12:	a801      	add	r0, sp, #4
    1a14:	f007 f86e 	bl	8af4 <String::String(char const*)>
    1a18:	4989      	ldr	r1, [pc, #548]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a1a:	a805      	add	r0, sp, #20
    1a1c:	f007 f86a 	bl	8af4 <String::String(char const*)>
    1a20:	497b      	ldr	r1, [pc, #492]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a22:	a809      	add	r0, sp, #36	; 0x24
    1a24:	f007 f866 	bl	8af4 <String::String(char const*)>
    1a28:	a901      	add	r1, sp, #4
    1a2a:	4886      	ldr	r0, [pc, #536]	; (1c44 <initialize_opcode_info()+0x17e0>)
    1a2c:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a30:	f7fe fb1a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a34:	a801      	add	r0, sp, #4
    1a36:	f7fe fd07 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    1a3a:	4973      	ldr	r1, [pc, #460]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1a3c:	a801      	add	r0, sp, #4
    1a3e:	f007 f859 	bl	8af4 <String::String(char const*)>
    1a42:	497f      	ldr	r1, [pc, #508]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a44:	a805      	add	r0, sp, #20
    1a46:	f007 f855 	bl	8af4 <String::String(char const*)>
    1a4a:	4971      	ldr	r1, [pc, #452]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a4c:	a809      	add	r0, sp, #36	; 0x24
    1a4e:	f007 f851 	bl	8af4 <String::String(char const*)>
    1a52:	a901      	add	r1, sp, #4
    1a54:	487c      	ldr	r0, [pc, #496]	; (1c48 <initialize_opcode_info()+0x17e4>)
    1a56:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a5a:	f7fe fb05 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a5e:	a801      	add	r0, sp, #4
    1a60:	f7fe fcf2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1a64:	496c      	ldr	r1, [pc, #432]	; (1c18 <initialize_opcode_info()+0x17b4>)
    1a66:	a801      	add	r0, sp, #4
    1a68:	f007 f844 	bl	8af4 <String::String(char const*)>
    1a6c:	4974      	ldr	r1, [pc, #464]	; (1c40 <initialize_opcode_info()+0x17dc>)
    1a6e:	a805      	add	r0, sp, #20
    1a70:	f007 f840 	bl	8af4 <String::String(char const*)>
    1a74:	4966      	ldr	r1, [pc, #408]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1a76:	a809      	add	r0, sp, #36	; 0x24
    1a78:	f007 f83c 	bl	8af4 <String::String(char const*)>
    1a7c:	a901      	add	r1, sp, #4
    1a7e:	4873      	ldr	r0, [pc, #460]	; (1c4c <initialize_opcode_info()+0x17e8>)
    1a80:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1a84:	f7fe faf0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a88:	a801      	add	r0, sp, #4
    1a8a:	f7fe fcdd 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    1a8e:	4970      	ldr	r1, [pc, #448]	; (1c50 <initialize_opcode_info()+0x17ec>)
    1a90:	a801      	add	r0, sp, #4
    1a92:	f007 f82f 	bl	8af4 <String::String(char const*)>
    1a96:	496f      	ldr	r1, [pc, #444]	; (1c54 <initialize_opcode_info()+0x17f0>)
    1a98:	a805      	add	r0, sp, #20
    1a9a:	f007 f82b 	bl	8af4 <String::String(char const*)>
    1a9e:	4961      	ldr	r1, [pc, #388]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1aa0:	a809      	add	r0, sp, #36	; 0x24
    1aa2:	f007 f827 	bl	8af4 <String::String(char const*)>
    1aa6:	a901      	add	r1, sp, #4
    1aa8:	486b      	ldr	r0, [pc, #428]	; (1c58 <initialize_opcode_info()+0x17f4>)
    1aaa:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1aae:	f7fe fadb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ab2:	a801      	add	r0, sp, #4
    1ab4:	f7fe fcc8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    1ab8:	4953      	ldr	r1, [pc, #332]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1aba:	a801      	add	r0, sp, #4
    1abc:	f007 f81a 	bl	8af4 <String::String(char const*)>
    1ac0:	4966      	ldr	r1, [pc, #408]	; (1c5c <initialize_opcode_info()+0x17f8>)
    1ac2:	a805      	add	r0, sp, #20
    1ac4:	f007 f816 	bl	8af4 <String::String(char const*)>
    1ac8:	4951      	ldr	r1, [pc, #324]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1aca:	a809      	add	r0, sp, #36	; 0x24
    1acc:	f007 f812 	bl	8af4 <String::String(char const*)>
    1ad0:	a901      	add	r1, sp, #4
    1ad2:	4863      	ldr	r0, [pc, #396]	; (1c60 <initialize_opcode_info()+0x17fc>)
    1ad4:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1ad8:	f7fe fac6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1adc:	a801      	add	r0, sp, #4
    1ade:	f7fe fcb3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1ae2:	4956      	ldr	r1, [pc, #344]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1ae4:	a801      	add	r0, sp, #4
    1ae6:	f007 f805 	bl	8af4 <String::String(char const*)>
    1aea:	495e      	ldr	r1, [pc, #376]	; (1c64 <initialize_opcode_info()+0x1800>)
    1aec:	a805      	add	r0, sp, #20
    1aee:	f007 f801 	bl	8af4 <String::String(char const*)>
    1af2:	4947      	ldr	r1, [pc, #284]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1af4:	a809      	add	r0, sp, #36	; 0x24
    1af6:	f006 fffd 	bl	8af4 <String::String(char const*)>
    1afa:	a901      	add	r1, sp, #4
    1afc:	485a      	ldr	r0, [pc, #360]	; (1c68 <initialize_opcode_info()+0x1804>)
    1afe:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b02:	f7fe fab1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b06:	a801      	add	r0, sp, #4
    1b08:	f7fe fc9e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1b0c:	493e      	ldr	r1, [pc, #248]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1b0e:	a801      	add	r0, sp, #4
    1b10:	f006 fff0 	bl	8af4 <String::String(char const*)>
    1b14:	4953      	ldr	r1, [pc, #332]	; (1c64 <initialize_opcode_info()+0x1800>)
    1b16:	a805      	add	r0, sp, #20
    1b18:	f006 ffec 	bl	8af4 <String::String(char const*)>
    1b1c:	493c      	ldr	r1, [pc, #240]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b1e:	a809      	add	r0, sp, #36	; 0x24
    1b20:	f006 ffe8 	bl	8af4 <String::String(char const*)>
    1b24:	a901      	add	r1, sp, #4
    1b26:	4851      	ldr	r0, [pc, #324]	; (1c6c <initialize_opcode_info()+0x1808>)
    1b28:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b2c:	f7fe fa9c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b30:	a801      	add	r0, sp, #4
    1b32:	f7fe fc89 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    1b36:	4938      	ldr	r1, [pc, #224]	; (1c18 <initialize_opcode_info()+0x17b4>)
    1b38:	a801      	add	r0, sp, #4
    1b3a:	f006 ffdb 	bl	8af4 <String::String(char const*)>
    1b3e:	494c      	ldr	r1, [pc, #304]	; (1c70 <initialize_opcode_info()+0x180c>)
    1b40:	a805      	add	r0, sp, #20
    1b42:	f006 ffd7 	bl	8af4 <String::String(char const*)>
    1b46:	4932      	ldr	r1, [pc, #200]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b48:	a809      	add	r0, sp, #36	; 0x24
    1b4a:	f006 ffd3 	bl	8af4 <String::String(char const*)>
    1b4e:	a901      	add	r1, sp, #4
    1b50:	4848      	ldr	r0, [pc, #288]	; (1c74 <initialize_opcode_info()+0x1810>)
    1b52:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1b56:	f7fe fa87 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b5a:	a801      	add	r0, sp, #4
    1b5c:	f7fe fc74 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    1b60:	4945      	ldr	r1, [pc, #276]	; (1c78 <initialize_opcode_info()+0x1814>)
    1b62:	a801      	add	r0, sp, #4
    1b64:	f006 ffc6 	bl	8af4 <String::String(char const*)>
    1b68:	492e      	ldr	r1, [pc, #184]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1b6a:	a805      	add	r0, sp, #20
    1b6c:	f006 ffc2 	bl	8af4 <String::String(char const*)>
    1b70:	4942      	ldr	r1, [pc, #264]	; (1c7c <initialize_opcode_info()+0x1818>)
    1b72:	a809      	add	r0, sp, #36	; 0x24
    1b74:	f006 ffbe 	bl	8af4 <String::String(char const*)>
    1b78:	a901      	add	r1, sp, #4
    1b7a:	4841      	ldr	r0, [pc, #260]	; (1c80 <initialize_opcode_info()+0x181c>)
    1b7c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1b80:	f7fe fa72 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b84:	a801      	add	r0, sp, #4
    1b86:	f7fe fc5f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1b8a:	491f      	ldr	r1, [pc, #124]	; (1c08 <initialize_opcode_info()+0x17a4>)
    1b8c:	a801      	add	r0, sp, #4
    1b8e:	f006 ffb1 	bl	8af4 <String::String(char const*)>
    1b92:	493c      	ldr	r1, [pc, #240]	; (1c84 <initialize_opcode_info()+0x1820>)
    1b94:	a805      	add	r0, sp, #20
    1b96:	f006 ffad 	bl	8af4 <String::String(char const*)>
    1b9a:	491d      	ldr	r1, [pc, #116]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1b9c:	a809      	add	r0, sp, #36	; 0x24
    1b9e:	f006 ffa9 	bl	8af4 <String::String(char const*)>
    1ba2:	a901      	add	r1, sp, #4
    1ba4:	4838      	ldr	r0, [pc, #224]	; (1c88 <initialize_opcode_info()+0x1824>)
    1ba6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1baa:	f7fe fa5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bae:	a801      	add	r0, sp, #4
    1bb0:	f7fe fc4a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    1bb4:	4935      	ldr	r1, [pc, #212]	; (1c8c <initialize_opcode_info()+0x1828>)
    1bb6:	a801      	add	r0, sp, #4
    1bb8:	f006 ff9c 	bl	8af4 <String::String(char const*)>
    1bbc:	4919      	ldr	r1, [pc, #100]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1bbe:	a805      	add	r0, sp, #20
    1bc0:	f006 ff98 	bl	8af4 <String::String(char const*)>
    1bc4:	4917      	ldr	r1, [pc, #92]	; (1c24 <initialize_opcode_info()+0x17c0>)
    1bc6:	a809      	add	r0, sp, #36	; 0x24
    1bc8:	f006 ff94 	bl	8af4 <String::String(char const*)>
    1bcc:	a901      	add	r1, sp, #4
    1bce:	4830      	ldr	r0, [pc, #192]	; (1c90 <initialize_opcode_info()+0x182c>)
    1bd0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1bd4:	f7fe fa48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bd8:	a801      	add	r0, sp, #4
    1bda:	f7fe fc35 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1bde:	4917      	ldr	r1, [pc, #92]	; (1c3c <initialize_opcode_info()+0x17d8>)
    1be0:	a801      	add	r0, sp, #4
    1be2:	f006 ff87 	bl	8af4 <String::String(char const*)>
    1be6:	492b      	ldr	r1, [pc, #172]	; (1c94 <initialize_opcode_info()+0x1830>)
    1be8:	a805      	add	r0, sp, #20
    1bea:	f006 ff83 	bl	8af4 <String::String(char const*)>
    1bee:	4908      	ldr	r1, [pc, #32]	; (1c10 <initialize_opcode_info()+0x17ac>)
    1bf0:	a809      	add	r0, sp, #36	; 0x24
    1bf2:	f006 ff7f 	bl	8af4 <String::String(char const*)>
    1bf6:	a901      	add	r1, sp, #4
    1bf8:	4827      	ldr	r0, [pc, #156]	; (1c98 <initialize_opcode_info()+0x1834>)
    1bfa:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1bfe:	f7fe fa33 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c02:	a801      	add	r0, sp, #4
    1c04:	e04a      	b.n	1c9c <initialize_opcode_info()+0x1838>
    1c06:	bf00      	nop
    1c08:	20000aac 	.word	0x20000aac
    1c0c:	200003e0 	.word	0x200003e0
    1c10:	200009f8 	.word	0x200009f8
    1c14:	2001759c 	.word	0x2001759c
    1c18:	20000ab0 	.word	0x20000ab0
    1c1c:	200175d0 	.word	0x200175d0
    1c20:	20000ab4 	.word	0x20000ab4
    1c24:	200007d4 	.word	0x200007d4
    1c28:	20017638 	.word	0x20017638
    1c2c:	200003d8 	.word	0x200003d8
    1c30:	2001766c 	.word	0x2001766c
    1c34:	20000ab8 	.word	0x20000ab8
    1c38:	200176a0 	.word	0x200176a0
    1c3c:	20000aa8 	.word	0x20000aa8
    1c40:	20000424 	.word	0x20000424
    1c44:	20017708 	.word	0x20017708
    1c48:	2001773c 	.word	0x2001773c
    1c4c:	20017770 	.word	0x20017770
    1c50:	20000abc 	.word	0x20000abc
    1c54:	200003e8 	.word	0x200003e8
    1c58:	200177d8 	.word	0x200177d8
    1c5c:	200003f8 	.word	0x200003f8
    1c60:	2001780c 	.word	0x2001780c
    1c64:	20000400 	.word	0x20000400
    1c68:	200178a8 	.word	0x200178a8
    1c6c:	200178dc 	.word	0x200178dc
    1c70:	20000a98 	.word	0x20000a98
    1c74:	20017910 	.word	0x20017910
    1c78:	20000ac0 	.word	0x20000ac0
    1c7c:	20000ac4 	.word	0x20000ac4
    1c80:	20017978 	.word	0x20017978
    1c84:	20000430 	.word	0x20000430
    1c88:	200179ac 	.word	0x200179ac
    1c8c:	20000ac8 	.word	0x20000ac8
    1c90:	200179e0 	.word	0x200179e0
    1c94:	20000428 	.word	0x20000428
    1c98:	20017a48 	.word	0x20017a48
    1c9c:	f7fe fbd4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    1ca0:	49b1      	ldr	r1, [pc, #708]	; (1f68 <initialize_opcode_info()+0x1b04>)
    1ca2:	a801      	add	r0, sp, #4
    1ca4:	f006 ff26 	bl	8af4 <String::String(char const*)>
    1ca8:	49b0      	ldr	r1, [pc, #704]	; (1f6c <initialize_opcode_info()+0x1b08>)
    1caa:	a805      	add	r0, sp, #20
    1cac:	f006 ff22 	bl	8af4 <String::String(char const*)>
    1cb0:	49af      	ldr	r1, [pc, #700]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1cb2:	a809      	add	r0, sp, #36	; 0x24
    1cb4:	f006 ff1e 	bl	8af4 <String::String(char const*)>
    1cb8:	a901      	add	r1, sp, #4
    1cba:	48ae      	ldr	r0, [pc, #696]	; (1f74 <initialize_opcode_info()+0x1b10>)
    1cbc:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1cc0:	f7fe f9d2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cc4:	a801      	add	r0, sp, #4
    1cc6:	f7fe fbbf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1cca:	49ab      	ldr	r1, [pc, #684]	; (1f78 <initialize_opcode_info()+0x1b14>)
    1ccc:	a801      	add	r0, sp, #4
    1cce:	f006 ff11 	bl	8af4 <String::String(char const*)>
    1cd2:	49aa      	ldr	r1, [pc, #680]	; (1f7c <initialize_opcode_info()+0x1b18>)
    1cd4:	a805      	add	r0, sp, #20
    1cd6:	f006 ff0d 	bl	8af4 <String::String(char const*)>
    1cda:	49a5      	ldr	r1, [pc, #660]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1cdc:	a809      	add	r0, sp, #36	; 0x24
    1cde:	f006 ff09 	bl	8af4 <String::String(char const*)>
    1ce2:	a901      	add	r1, sp, #4
    1ce4:	48a6      	ldr	r0, [pc, #664]	; (1f80 <initialize_opcode_info()+0x1b1c>)
    1ce6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1cea:	f7fe f9bd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cee:	a801      	add	r0, sp, #4
    1cf0:	f7fe fbaa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1cf4:	49a3      	ldr	r1, [pc, #652]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1cf6:	a801      	add	r0, sp, #4
    1cf8:	f006 fefc 	bl	8af4 <String::String(char const*)>
    1cfc:	49a2      	ldr	r1, [pc, #648]	; (1f88 <initialize_opcode_info()+0x1b24>)
    1cfe:	a805      	add	r0, sp, #20
    1d00:	f006 fef8 	bl	8af4 <String::String(char const*)>
    1d04:	49a1      	ldr	r1, [pc, #644]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d06:	a809      	add	r0, sp, #36	; 0x24
    1d08:	f006 fef4 	bl	8af4 <String::String(char const*)>
    1d0c:	a901      	add	r1, sp, #4
    1d0e:	48a0      	ldr	r0, [pc, #640]	; (1f90 <initialize_opcode_info()+0x1b2c>)
    1d10:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1d14:	f7fe f9a8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d18:	a801      	add	r0, sp, #4
    1d1a:	f7fe fb95 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1d1e:	499d      	ldr	r1, [pc, #628]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1d20:	a801      	add	r0, sp, #4
    1d22:	f006 fee7 	bl	8af4 <String::String(char const*)>
    1d26:	499c      	ldr	r1, [pc, #624]	; (1f98 <initialize_opcode_info()+0x1b34>)
    1d28:	a805      	add	r0, sp, #20
    1d2a:	f006 fee3 	bl	8af4 <String::String(char const*)>
    1d2e:	4997      	ldr	r1, [pc, #604]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d30:	a809      	add	r0, sp, #36	; 0x24
    1d32:	f006 fedf 	bl	8af4 <String::String(char const*)>
    1d36:	a901      	add	r1, sp, #4
    1d38:	4898      	ldr	r0, [pc, #608]	; (1f9c <initialize_opcode_info()+0x1b38>)
    1d3a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1d3e:	f7fe f993 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d42:	a801      	add	r0, sp, #4
    1d44:	f7fe fb80 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    1d48:	498e      	ldr	r1, [pc, #568]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1d4a:	a801      	add	r0, sp, #4
    1d4c:	f006 fed2 	bl	8af4 <String::String(char const*)>
    1d50:	4993      	ldr	r1, [pc, #588]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1d52:	a805      	add	r0, sp, #20
    1d54:	f006 fece 	bl	8af4 <String::String(char const*)>
    1d58:	498c      	ldr	r1, [pc, #560]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d5a:	a809      	add	r0, sp, #36	; 0x24
    1d5c:	f006 feca 	bl	8af4 <String::String(char const*)>
    1d60:	a901      	add	r1, sp, #4
    1d62:	4890      	ldr	r0, [pc, #576]	; (1fa4 <initialize_opcode_info()+0x1b40>)
    1d64:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1d68:	f7fe f97e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d6c:	a801      	add	r0, sp, #4
    1d6e:	f7fe fb6b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    1d72:	4988      	ldr	r1, [pc, #544]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1d74:	a801      	add	r0, sp, #4
    1d76:	f006 febd 	bl	8af4 <String::String(char const*)>
    1d7a:	4989      	ldr	r1, [pc, #548]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1d7c:	a805      	add	r0, sp, #20
    1d7e:	f006 feb9 	bl	8af4 <String::String(char const*)>
    1d82:	4982      	ldr	r1, [pc, #520]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1d84:	a809      	add	r0, sp, #36	; 0x24
    1d86:	f006 feb5 	bl	8af4 <String::String(char const*)>
    1d8a:	a901      	add	r1, sp, #4
    1d8c:	4886      	ldr	r0, [pc, #536]	; (1fa8 <initialize_opcode_info()+0x1b44>)
    1d8e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1d92:	f7fe f969 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d96:	a801      	add	r0, sp, #4
    1d98:	f7fe fb56 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1d9c:	4983      	ldr	r1, [pc, #524]	; (1fac <initialize_opcode_info()+0x1b48>)
    1d9e:	a801      	add	r0, sp, #4
    1da0:	f006 fea8 	bl	8af4 <String::String(char const*)>
    1da4:	497e      	ldr	r1, [pc, #504]	; (1fa0 <initialize_opcode_info()+0x1b3c>)
    1da6:	a805      	add	r0, sp, #20
    1da8:	f006 fea4 	bl	8af4 <String::String(char const*)>
    1dac:	4970      	ldr	r1, [pc, #448]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1dae:	a809      	add	r0, sp, #36	; 0x24
    1db0:	f006 fea0 	bl	8af4 <String::String(char const*)>
    1db4:	a901      	add	r1, sp, #4
    1db6:	487e      	ldr	r0, [pc, #504]	; (1fb0 <initialize_opcode_info()+0x1b4c>)
    1db8:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1dbc:	f7fe f954 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dc0:	a801      	add	r0, sp, #4
    1dc2:	f7fe fb41 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1dc6:	497b      	ldr	r1, [pc, #492]	; (1fb4 <initialize_opcode_info()+0x1b50>)
    1dc8:	a801      	add	r0, sp, #4
    1dca:	f006 fe93 	bl	8af4 <String::String(char const*)>
    1dce:	497a      	ldr	r1, [pc, #488]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1dd0:	a805      	add	r0, sp, #20
    1dd2:	f006 fe8f 	bl	8af4 <String::String(char const*)>
    1dd6:	4978      	ldr	r1, [pc, #480]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1dd8:	a809      	add	r0, sp, #36	; 0x24
    1dda:	f006 fe8b 	bl	8af4 <String::String(char const*)>
    1dde:	a901      	add	r1, sp, #4
    1de0:	4876      	ldr	r0, [pc, #472]	; (1fbc <initialize_opcode_info()+0x1b58>)
    1de2:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1de6:	f7fe f93f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dea:	a801      	add	r0, sp, #4
    1dec:	f7fe fb2c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1df0:	4968      	ldr	r1, [pc, #416]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1df2:	a801      	add	r0, sp, #4
    1df4:	f006 fe7e 	bl	8af4 <String::String(char const*)>
    1df8:	4963      	ldr	r1, [pc, #396]	; (1f88 <initialize_opcode_info()+0x1b24>)
    1dfa:	a805      	add	r0, sp, #20
    1dfc:	f006 fe7a 	bl	8af4 <String::String(char const*)>
    1e00:	4962      	ldr	r1, [pc, #392]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e02:	a809      	add	r0, sp, #36	; 0x24
    1e04:	f006 fe76 	bl	8af4 <String::String(char const*)>
    1e08:	a901      	add	r1, sp, #4
    1e0a:	486d      	ldr	r0, [pc, #436]	; (1fc0 <initialize_opcode_info()+0x1b5c>)
    1e0c:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1e10:	f7fe f92a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e14:	a801      	add	r0, sp, #4
    1e16:	f7fe fb17 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1e1a:	496a      	ldr	r1, [pc, #424]	; (1fc4 <initialize_opcode_info()+0x1b60>)
    1e1c:	a801      	add	r0, sp, #4
    1e1e:	f006 fe69 	bl	8af4 <String::String(char const*)>
    1e22:	4965      	ldr	r1, [pc, #404]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1e24:	a805      	add	r0, sp, #20
    1e26:	f006 fe65 	bl	8af4 <String::String(char const*)>
    1e2a:	4951      	ldr	r1, [pc, #324]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1e2c:	a809      	add	r0, sp, #36	; 0x24
    1e2e:	f006 fe61 	bl	8af4 <String::String(char const*)>
    1e32:	a901      	add	r1, sp, #4
    1e34:	4864      	ldr	r0, [pc, #400]	; (1fc8 <initialize_opcode_info()+0x1b64>)
    1e36:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    1e3a:	f7fe f915 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e3e:	a801      	add	r0, sp, #4
    1e40:	f7fe fb02 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1e44:	494f      	ldr	r1, [pc, #316]	; (1f84 <initialize_opcode_info()+0x1b20>)
    1e46:	a801      	add	r0, sp, #4
    1e48:	f006 fe54 	bl	8af4 <String::String(char const*)>
    1e4c:	495f      	ldr	r1, [pc, #380]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1e4e:	a805      	add	r0, sp, #20
    1e50:	f006 fe50 	bl	8af4 <String::String(char const*)>
    1e54:	494d      	ldr	r1, [pc, #308]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e56:	a809      	add	r0, sp, #36	; 0x24
    1e58:	f006 fe4c 	bl	8af4 <String::String(char const*)>
    1e5c:	a901      	add	r1, sp, #4
    1e5e:	485c      	ldr	r0, [pc, #368]	; (1fd0 <initialize_opcode_info()+0x1b6c>)
    1e60:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1e64:	f7fe f900 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e68:	a801      	add	r0, sp, #4
    1e6a:	f7fe faed 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1e6e:	4949      	ldr	r1, [pc, #292]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1e70:	a801      	add	r0, sp, #4
    1e72:	f006 fe3f 	bl	8af4 <String::String(char const*)>
    1e76:	4955      	ldr	r1, [pc, #340]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1e78:	a805      	add	r0, sp, #20
    1e7a:	f006 fe3b 	bl	8af4 <String::String(char const*)>
    1e7e:	4943      	ldr	r1, [pc, #268]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1e80:	a809      	add	r0, sp, #36	; 0x24
    1e82:	f006 fe37 	bl	8af4 <String::String(char const*)>
    1e86:	a901      	add	r1, sp, #4
    1e88:	4852      	ldr	r0, [pc, #328]	; (1fd4 <initialize_opcode_info()+0x1b70>)
    1e8a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    1e8e:	f7fe f8eb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e92:	a801      	add	r0, sp, #4
    1e94:	f7fe fad8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1e98:	4944      	ldr	r1, [pc, #272]	; (1fac <initialize_opcode_info()+0x1b48>)
    1e9a:	a801      	add	r0, sp, #4
    1e9c:	f006 fe2a 	bl	8af4 <String::String(char const*)>
    1ea0:	494a      	ldr	r1, [pc, #296]	; (1fcc <initialize_opcode_info()+0x1b68>)
    1ea2:	a805      	add	r0, sp, #20
    1ea4:	f006 fe26 	bl	8af4 <String::String(char const*)>
    1ea8:	4931      	ldr	r1, [pc, #196]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1eaa:	a809      	add	r0, sp, #36	; 0x24
    1eac:	f006 fe22 	bl	8af4 <String::String(char const*)>
    1eb0:	a901      	add	r1, sp, #4
    1eb2:	4849      	ldr	r0, [pc, #292]	; (1fd8 <initialize_opcode_info()+0x1b74>)
    1eb4:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1eb8:	f7fe f8d6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ebc:	a801      	add	r0, sp, #4
    1ebe:	f7fe fac3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1ec2:	4946      	ldr	r1, [pc, #280]	; (1fdc <initialize_opcode_info()+0x1b78>)
    1ec4:	a801      	add	r0, sp, #4
    1ec6:	f006 fe15 	bl	8af4 <String::String(char const*)>
    1eca:	4945      	ldr	r1, [pc, #276]	; (1fe0 <initialize_opcode_info()+0x1b7c>)
    1ecc:	a805      	add	r0, sp, #20
    1ece:	f006 fe11 	bl	8af4 <String::String(char const*)>
    1ed2:	4939      	ldr	r1, [pc, #228]	; (1fb8 <initialize_opcode_info()+0x1b54>)
    1ed4:	a809      	add	r0, sp, #36	; 0x24
    1ed6:	f006 fe0d 	bl	8af4 <String::String(char const*)>
    1eda:	a901      	add	r1, sp, #4
    1edc:	4841      	ldr	r0, [pc, #260]	; (1fe4 <initialize_opcode_info()+0x1b80>)
    1ede:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    1ee2:	f7fe f8c1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ee6:	a801      	add	r0, sp, #4
    1ee8:	f7fe faae 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1eec:	4929      	ldr	r1, [pc, #164]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1eee:	a801      	add	r0, sp, #4
    1ef0:	f006 fe00 	bl	8af4 <String::String(char const*)>
    1ef4:	493c      	ldr	r1, [pc, #240]	; (1fe8 <initialize_opcode_info()+0x1b84>)
    1ef6:	a805      	add	r0, sp, #20
    1ef8:	f006 fdfc 	bl	8af4 <String::String(char const*)>
    1efc:	4923      	ldr	r1, [pc, #140]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1efe:	a809      	add	r0, sp, #36	; 0x24
    1f00:	f006 fdf8 	bl	8af4 <String::String(char const*)>
    1f04:	a901      	add	r1, sp, #4
    1f06:	4839      	ldr	r0, [pc, #228]	; (1fec <initialize_opcode_info()+0x1b88>)
    1f08:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    1f0c:	f7fe f8ac 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f10:	a801      	add	r0, sp, #4
    1f12:	f7fe fa99 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1f16:	491f      	ldr	r1, [pc, #124]	; (1f94 <initialize_opcode_info()+0x1b30>)
    1f18:	a801      	add	r0, sp, #4
    1f1a:	f006 fdeb 	bl	8af4 <String::String(char const*)>
    1f1e:	4934      	ldr	r1, [pc, #208]	; (1ff0 <initialize_opcode_info()+0x1b8c>)
    1f20:	a805      	add	r0, sp, #20
    1f22:	f006 fde7 	bl	8af4 <String::String(char const*)>
    1f26:	4919      	ldr	r1, [pc, #100]	; (1f8c <initialize_opcode_info()+0x1b28>)
    1f28:	a809      	add	r0, sp, #36	; 0x24
    1f2a:	f006 fde3 	bl	8af4 <String::String(char const*)>
    1f2e:	a901      	add	r1, sp, #4
    1f30:	4830      	ldr	r0, [pc, #192]	; (1ff4 <initialize_opcode_info()+0x1b90>)
    1f32:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1f36:	f7fe f897 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f3a:	a801      	add	r0, sp, #4
    1f3c:	f7fe fa84 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1f40:	491a      	ldr	r1, [pc, #104]	; (1fac <initialize_opcode_info()+0x1b48>)
    1f42:	a801      	add	r0, sp, #4
    1f44:	f006 fdd6 	bl	8af4 <String::String(char const*)>
    1f48:	4929      	ldr	r1, [pc, #164]	; (1ff0 <initialize_opcode_info()+0x1b8c>)
    1f4a:	a805      	add	r0, sp, #20
    1f4c:	f006 fdd2 	bl	8af4 <String::String(char const*)>
    1f50:	4907      	ldr	r1, [pc, #28]	; (1f70 <initialize_opcode_info()+0x1b0c>)
    1f52:	a809      	add	r0, sp, #36	; 0x24
    1f54:	f006 fdce 	bl	8af4 <String::String(char const*)>
    1f58:	a901      	add	r1, sp, #4
    1f5a:	4827      	ldr	r0, [pc, #156]	; (1ff8 <initialize_opcode_info()+0x1b94>)
    1f5c:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1f60:	f7fe f882 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f64:	a801      	add	r0, sp, #4
    1f66:	e049      	b.n	1ffc <initialize_opcode_info()+0x1b98>
    1f68:	20000aac 	.word	0x20000aac
    1f6c:	20000428 	.word	0x20000428
    1f70:	200009f8 	.word	0x200009f8
    1f74:	20017a7c 	.word	0x20017a7c
    1f78:	20000ab0 	.word	0x20000ab0
    1f7c:	20000430 	.word	0x20000430
    1f80:	20017ab0 	.word	0x20017ab0
    1f84:	20000acc 	.word	0x20000acc
    1f88:	200003d8 	.word	0x200003d8
    1f8c:	20000a00 	.word	0x20000a00
    1f90:	20017b18 	.word	0x20017b18
    1f94:	20000ad0 	.word	0x20000ad0
    1f98:	200003ec 	.word	0x200003ec
    1f9c:	20017b4c 	.word	0x20017b4c
    1fa0:	200003e0 	.word	0x200003e0
    1fa4:	20017be8 	.word	0x20017be8
    1fa8:	20017c1c 	.word	0x20017c1c
    1fac:	20000ad4 	.word	0x20000ad4
    1fb0:	20017c50 	.word	0x20017c50
    1fb4:	20000ad8 	.word	0x20000ad8
    1fb8:	200007d4 	.word	0x200007d4
    1fbc:	20017cb8 	.word	0x20017cb8
    1fc0:	20017cec 	.word	0x20017cec
    1fc4:	20000adc 	.word	0x20000adc
    1fc8:	20017d20 	.word	0x20017d20
    1fcc:	20000424 	.word	0x20000424
    1fd0:	20017d88 	.word	0x20017d88
    1fd4:	20017dbc 	.word	0x20017dbc
    1fd8:	20017df0 	.word	0x20017df0
    1fdc:	20000ae0 	.word	0x20000ae0
    1fe0:	200003e8 	.word	0x200003e8
    1fe4:	20017e58 	.word	0x20017e58
    1fe8:	200003f8 	.word	0x200003f8
    1fec:	20017e8c 	.word	0x20017e8c
    1ff0:	20000400 	.word	0x20000400
    1ff4:	20017f5c 	.word	0x20017f5c
    1ff8:	20017f90 	.word	0x20017f90
    1ffc:	f7fe fa24 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    2000:	49b2      	ldr	r1, [pc, #712]	; (22cc <initialize_opcode_info()+0x1e68>)
    2002:	a801      	add	r0, sp, #4
    2004:	f006 fd76 	bl	8af4 <String::String(char const*)>
    2008:	49b1      	ldr	r1, [pc, #708]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    200a:	a805      	add	r0, sp, #20
    200c:	f006 fd72 	bl	8af4 <String::String(char const*)>
    2010:	49b0      	ldr	r1, [pc, #704]	; (22d4 <initialize_opcode_info()+0x1e70>)
    2012:	a809      	add	r0, sp, #36	; 0x24
    2014:	f006 fd6e 	bl	8af4 <String::String(char const*)>
    2018:	a901      	add	r1, sp, #4
    201a:	48af      	ldr	r0, [pc, #700]	; (22d8 <initialize_opcode_info()+0x1e74>)
    201c:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    2020:	f7fe f822 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2024:	a801      	add	r0, sp, #4
    2026:	f7fe fa0f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    202a:	49ac      	ldr	r1, [pc, #688]	; (22dc <initialize_opcode_info()+0x1e78>)
    202c:	a801      	add	r0, sp, #4
    202e:	f006 fd61 	bl	8af4 <String::String(char const*)>
    2032:	49ab      	ldr	r1, [pc, #684]	; (22e0 <initialize_opcode_info()+0x1e7c>)
    2034:	a805      	add	r0, sp, #20
    2036:	f006 fd5d 	bl	8af4 <String::String(char const*)>
    203a:	49aa      	ldr	r1, [pc, #680]	; (22e4 <initialize_opcode_info()+0x1e80>)
    203c:	a809      	add	r0, sp, #36	; 0x24
    203e:	f006 fd59 	bl	8af4 <String::String(char const*)>
    2042:	a901      	add	r1, sp, #4
    2044:	48a8      	ldr	r0, [pc, #672]	; (22e8 <initialize_opcode_info()+0x1e84>)
    2046:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    204a:	f7fe f80d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    204e:	a801      	add	r0, sp, #4
    2050:	f7fe f9fa 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    2054:	49a1      	ldr	r1, [pc, #644]	; (22dc <initialize_opcode_info()+0x1e78>)
    2056:	a801      	add	r0, sp, #4
    2058:	f006 fd4c 	bl	8af4 <String::String(char const*)>
    205c:	49a3      	ldr	r1, [pc, #652]	; (22ec <initialize_opcode_info()+0x1e88>)
    205e:	a805      	add	r0, sp, #20
    2060:	f006 fd48 	bl	8af4 <String::String(char const*)>
    2064:	499f      	ldr	r1, [pc, #636]	; (22e4 <initialize_opcode_info()+0x1e80>)
    2066:	a809      	add	r0, sp, #36	; 0x24
    2068:	f006 fd44 	bl	8af4 <String::String(char const*)>
    206c:	a901      	add	r1, sp, #4
    206e:	48a0      	ldr	r0, [pc, #640]	; (22f0 <initialize_opcode_info()+0x1e8c>)
    2070:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2074:	f7fd fff8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2078:	a801      	add	r0, sp, #4
    207a:	f7fe f9e5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    207e:	499d      	ldr	r1, [pc, #628]	; (22f4 <initialize_opcode_info()+0x1e90>)
    2080:	a801      	add	r0, sp, #4
    2082:	f006 fd37 	bl	8af4 <String::String(char const*)>
    2086:	4999      	ldr	r1, [pc, #612]	; (22ec <initialize_opcode_info()+0x1e88>)
    2088:	a805      	add	r0, sp, #20
    208a:	f006 fd33 	bl	8af4 <String::String(char const*)>
    208e:	499a      	ldr	r1, [pc, #616]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2090:	a809      	add	r0, sp, #36	; 0x24
    2092:	f006 fd2f 	bl	8af4 <String::String(char const*)>
    2096:	f240 3307 	movw	r3, #775	; 0x307
    209a:	a901      	add	r1, sp, #4
    209c:	4897      	ldr	r0, [pc, #604]	; (22fc <initialize_opcode_info()+0x1e98>)
    209e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20a2:	f7fd ffe1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20a6:	a801      	add	r0, sp, #4
    20a8:	f7fe f9ce 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    20ac:	4994      	ldr	r1, [pc, #592]	; (2300 <initialize_opcode_info()+0x1e9c>)
    20ae:	a801      	add	r0, sp, #4
    20b0:	f006 fd20 	bl	8af4 <String::String(char const*)>
    20b4:	4993      	ldr	r1, [pc, #588]	; (2304 <initialize_opcode_info()+0x1ea0>)
    20b6:	a805      	add	r0, sp, #20
    20b8:	f006 fd1c 	bl	8af4 <String::String(char const*)>
    20bc:	4989      	ldr	r1, [pc, #548]	; (22e4 <initialize_opcode_info()+0x1e80>)
    20be:	a809      	add	r0, sp, #36	; 0x24
    20c0:	f006 fd18 	bl	8af4 <String::String(char const*)>
    20c4:	a901      	add	r1, sp, #4
    20c6:	4890      	ldr	r0, [pc, #576]	; (2308 <initialize_opcode_info()+0x1ea4>)
    20c8:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    20cc:	f7fd ffcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20d0:	a801      	add	r0, sp, #4
    20d2:	f7fe f9b9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    20d6:	498d      	ldr	r1, [pc, #564]	; (230c <initialize_opcode_info()+0x1ea8>)
    20d8:	a801      	add	r0, sp, #4
    20da:	f006 fd0b 	bl	8af4 <String::String(char const*)>
    20de:	498c      	ldr	r1, [pc, #560]	; (2310 <initialize_opcode_info()+0x1eac>)
    20e0:	a805      	add	r0, sp, #20
    20e2:	f006 fd07 	bl	8af4 <String::String(char const*)>
    20e6:	498b      	ldr	r1, [pc, #556]	; (2314 <initialize_opcode_info()+0x1eb0>)
    20e8:	a809      	add	r0, sp, #36	; 0x24
    20ea:	f006 fd03 	bl	8af4 <String::String(char const*)>
    20ee:	a901      	add	r1, sp, #4
    20f0:	4889      	ldr	r0, [pc, #548]	; (2318 <initialize_opcode_info()+0x1eb4>)
    20f2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    20f6:	f7fd ffb7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20fa:	a801      	add	r0, sp, #4
    20fc:	f7fe f9a4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    2100:	497f      	ldr	r1, [pc, #508]	; (2300 <initialize_opcode_info()+0x1e9c>)
    2102:	a801      	add	r0, sp, #4
    2104:	f006 fcf6 	bl	8af4 <String::String(char const*)>
    2108:	4984      	ldr	r1, [pc, #528]	; (231c <initialize_opcode_info()+0x1eb8>)
    210a:	a805      	add	r0, sp, #20
    210c:	f006 fcf2 	bl	8af4 <String::String(char const*)>
    2110:	4974      	ldr	r1, [pc, #464]	; (22e4 <initialize_opcode_info()+0x1e80>)
    2112:	a809      	add	r0, sp, #36	; 0x24
    2114:	f006 fcee 	bl	8af4 <String::String(char const*)>
    2118:	a901      	add	r1, sp, #4
    211a:	4881      	ldr	r0, [pc, #516]	; (2320 <initialize_opcode_info()+0x1ebc>)
    211c:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    2120:	f7fd ffa2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2124:	a801      	add	r0, sp, #4
    2126:	f7fe f98f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    212a:	4978      	ldr	r1, [pc, #480]	; (230c <initialize_opcode_info()+0x1ea8>)
    212c:	a801      	add	r0, sp, #4
    212e:	f006 fce1 	bl	8af4 <String::String(char const*)>
    2132:	497a      	ldr	r1, [pc, #488]	; (231c <initialize_opcode_info()+0x1eb8>)
    2134:	a805      	add	r0, sp, #20
    2136:	f006 fcdd 	bl	8af4 <String::String(char const*)>
    213a:	4976      	ldr	r1, [pc, #472]	; (2314 <initialize_opcode_info()+0x1eb0>)
    213c:	a809      	add	r0, sp, #36	; 0x24
    213e:	f006 fcd9 	bl	8af4 <String::String(char const*)>
    2142:	a901      	add	r1, sp, #4
    2144:	4877      	ldr	r0, [pc, #476]	; (2324 <initialize_opcode_info()+0x1ec0>)
    2146:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    214a:	f7fd ff8d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    214e:	a801      	add	r0, sp, #4
    2150:	f7fe f97a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    2154:	4974      	ldr	r1, [pc, #464]	; (2328 <initialize_opcode_info()+0x1ec4>)
    2156:	a801      	add	r0, sp, #4
    2158:	f006 fccc 	bl	8af4 <String::String(char const*)>
    215c:	496f      	ldr	r1, [pc, #444]	; (231c <initialize_opcode_info()+0x1eb8>)
    215e:	a805      	add	r0, sp, #20
    2160:	f006 fcc8 	bl	8af4 <String::String(char const*)>
    2164:	4964      	ldr	r1, [pc, #400]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2166:	a809      	add	r0, sp, #36	; 0x24
    2168:	f006 fcc4 	bl	8af4 <String::String(char const*)>
    216c:	a901      	add	r1, sp, #4
    216e:	486f      	ldr	r0, [pc, #444]	; (232c <initialize_opcode_info()+0x1ec8>)
    2170:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    2174:	f7fd ff78 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2178:	a801      	add	r0, sp, #4
    217a:	f7fe f965 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    217e:	496c      	ldr	r1, [pc, #432]	; (2330 <initialize_opcode_info()+0x1ecc>)
    2180:	a801      	add	r0, sp, #4
    2182:	f006 fcb7 	bl	8af4 <String::String(char const*)>
    2186:	4952      	ldr	r1, [pc, #328]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    2188:	a805      	add	r0, sp, #20
    218a:	f006 fcb3 	bl	8af4 <String::String(char const*)>
    218e:	495a      	ldr	r1, [pc, #360]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2190:	a809      	add	r0, sp, #36	; 0x24
    2192:	f006 fcaf 	bl	8af4 <String::String(char const*)>
    2196:	a901      	add	r1, sp, #4
    2198:	4866      	ldr	r0, [pc, #408]	; (2334 <initialize_opcode_info()+0x1ed0>)
    219a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    219e:	f7fd ff63 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21a2:	a801      	add	r0, sp, #4
    21a4:	f7fe f950 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    21a8:	4958      	ldr	r1, [pc, #352]	; (230c <initialize_opcode_info()+0x1ea8>)
    21aa:	a801      	add	r0, sp, #4
    21ac:	f006 fca2 	bl	8af4 <String::String(char const*)>
    21b0:	4954      	ldr	r1, [pc, #336]	; (2304 <initialize_opcode_info()+0x1ea0>)
    21b2:	a805      	add	r0, sp, #20
    21b4:	f006 fc9e 	bl	8af4 <String::String(char const*)>
    21b8:	4956      	ldr	r1, [pc, #344]	; (2314 <initialize_opcode_info()+0x1eb0>)
    21ba:	a809      	add	r0, sp, #36	; 0x24
    21bc:	f006 fc9a 	bl	8af4 <String::String(char const*)>
    21c0:	a901      	add	r1, sp, #4
    21c2:	485d      	ldr	r0, [pc, #372]	; (2338 <initialize_opcode_info()+0x1ed4>)
    21c4:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    21c8:	f7fd ff4e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21cc:	a801      	add	r0, sp, #4
    21ce:	f7fe f93b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    21d2:	495a      	ldr	r1, [pc, #360]	; (233c <initialize_opcode_info()+0x1ed8>)
    21d4:	a801      	add	r0, sp, #4
    21d6:	f006 fc8d 	bl	8af4 <String::String(char const*)>
    21da:	493d      	ldr	r1, [pc, #244]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    21dc:	a805      	add	r0, sp, #20
    21de:	f006 fc89 	bl	8af4 <String::String(char const*)>
    21e2:	493b      	ldr	r1, [pc, #236]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    21e4:	a809      	add	r0, sp, #36	; 0x24
    21e6:	f006 fc85 	bl	8af4 <String::String(char const*)>
    21ea:	a901      	add	r1, sp, #4
    21ec:	4854      	ldr	r0, [pc, #336]	; (2340 <initialize_opcode_info()+0x1edc>)
    21ee:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    21f2:	f7fd ff39 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21f6:	a801      	add	r0, sp, #4
    21f8:	f7fe f926 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    21fc:	4940      	ldr	r1, [pc, #256]	; (2300 <initialize_opcode_info()+0x1e9c>)
    21fe:	a801      	add	r0, sp, #4
    2200:	f006 fc78 	bl	8af4 <String::String(char const*)>
    2204:	494f      	ldr	r1, [pc, #316]	; (2344 <initialize_opcode_info()+0x1ee0>)
    2206:	a805      	add	r0, sp, #20
    2208:	f006 fc74 	bl	8af4 <String::String(char const*)>
    220c:	4935      	ldr	r1, [pc, #212]	; (22e4 <initialize_opcode_info()+0x1e80>)
    220e:	a809      	add	r0, sp, #36	; 0x24
    2210:	f006 fc70 	bl	8af4 <String::String(char const*)>
    2214:	a901      	add	r1, sp, #4
    2216:	484c      	ldr	r0, [pc, #304]	; (2348 <initialize_opcode_info()+0x1ee4>)
    2218:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    221c:	f7fd ff24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2220:	a801      	add	r0, sp, #4
    2222:	f7fe f911 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    2226:	4939      	ldr	r1, [pc, #228]	; (230c <initialize_opcode_info()+0x1ea8>)
    2228:	a801      	add	r0, sp, #4
    222a:	f006 fc63 	bl	8af4 <String::String(char const*)>
    222e:	4945      	ldr	r1, [pc, #276]	; (2344 <initialize_opcode_info()+0x1ee0>)
    2230:	a805      	add	r0, sp, #20
    2232:	f006 fc5f 	bl	8af4 <String::String(char const*)>
    2236:	4937      	ldr	r1, [pc, #220]	; (2314 <initialize_opcode_info()+0x1eb0>)
    2238:	a809      	add	r0, sp, #36	; 0x24
    223a:	f006 fc5b 	bl	8af4 <String::String(char const*)>
    223e:	a901      	add	r1, sp, #4
    2240:	4842      	ldr	r0, [pc, #264]	; (234c <initialize_opcode_info()+0x1ee8>)
    2242:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2246:	f7fd ff0f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    224a:	a801      	add	r0, sp, #4
    224c:	f7fe f8fc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    2250:	4935      	ldr	r1, [pc, #212]	; (2328 <initialize_opcode_info()+0x1ec4>)
    2252:	a801      	add	r0, sp, #4
    2254:	f006 fc4e 	bl	8af4 <String::String(char const*)>
    2258:	493a      	ldr	r1, [pc, #232]	; (2344 <initialize_opcode_info()+0x1ee0>)
    225a:	a805      	add	r0, sp, #20
    225c:	f006 fc4a 	bl	8af4 <String::String(char const*)>
    2260:	4925      	ldr	r1, [pc, #148]	; (22f8 <initialize_opcode_info()+0x1e94>)
    2262:	a809      	add	r0, sp, #36	; 0x24
    2264:	f006 fc46 	bl	8af4 <String::String(char const*)>
    2268:	a901      	add	r1, sp, #4
    226a:	4839      	ldr	r0, [pc, #228]	; (2350 <initialize_opcode_info()+0x1eec>)
    226c:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    2270:	f7fd fefa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2274:	a801      	add	r0, sp, #4
    2276:	f7fe f8e7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    227a:	4936      	ldr	r1, [pc, #216]	; (2354 <initialize_opcode_info()+0x1ef0>)
    227c:	a801      	add	r0, sp, #4
    227e:	f006 fc39 	bl	8af4 <String::String(char const*)>
    2282:	4935      	ldr	r1, [pc, #212]	; (2358 <initialize_opcode_info()+0x1ef4>)
    2284:	a805      	add	r0, sp, #20
    2286:	f006 fc35 	bl	8af4 <String::String(char const*)>
    228a:	4911      	ldr	r1, [pc, #68]	; (22d0 <initialize_opcode_info()+0x1e6c>)
    228c:	a809      	add	r0, sp, #36	; 0x24
    228e:	f006 fc31 	bl	8af4 <String::String(char const*)>
    2292:	a901      	add	r1, sp, #4
    2294:	4831      	ldr	r0, [pc, #196]	; (235c <initialize_opcode_info()+0x1ef8>)
    2296:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    229a:	f7fd fee5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    229e:	a801      	add	r0, sp, #4
    22a0:	f7fe f8d2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    22a4:	4919      	ldr	r1, [pc, #100]	; (230c <initialize_opcode_info()+0x1ea8>)
    22a6:	a801      	add	r0, sp, #4
    22a8:	f006 fc24 	bl	8af4 <String::String(char const*)>
    22ac:	492c      	ldr	r1, [pc, #176]	; (2360 <initialize_opcode_info()+0x1efc>)
    22ae:	a805      	add	r0, sp, #20
    22b0:	f006 fc20 	bl	8af4 <String::String(char const*)>
    22b4:	4917      	ldr	r1, [pc, #92]	; (2314 <initialize_opcode_info()+0x1eb0>)
    22b6:	a809      	add	r0, sp, #36	; 0x24
    22b8:	f006 fc1c 	bl	8af4 <String::String(char const*)>
    22bc:	a901      	add	r1, sp, #4
    22be:	4829      	ldr	r0, [pc, #164]	; (2364 <initialize_opcode_info()+0x1f00>)
    22c0:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    22c4:	f7fd fed0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    22c8:	e04e      	b.n	2368 <initialize_opcode_info()+0x1f04>
    22ca:	bf00      	nop
    22cc:	20000ae4 	.word	0x20000ae4
    22d0:	200007d4 	.word	0x200007d4
    22d4:	20000ae8 	.word	0x20000ae8
    22d8:	20017ff8 	.word	0x20017ff8
    22dc:	20000ad0 	.word	0x20000ad0
    22e0:	20000430 	.word	0x20000430
    22e4:	20000a00 	.word	0x20000a00
    22e8:	2001802c 	.word	0x2001802c
    22ec:	20000428 	.word	0x20000428
    22f0:	200180fc 	.word	0x200180fc
    22f4:	20000ad4 	.word	0x20000ad4
    22f8:	200009f8 	.word	0x200009f8
    22fc:	20018130 	.word	0x20018130
    2300:	20000aec 	.word	0x20000aec
    2304:	200003d8 	.word	0x200003d8
    2308:	20018198 	.word	0x20018198
    230c:	20000af0 	.word	0x20000af0
    2310:	200003ec 	.word	0x200003ec
    2314:	20000a68 	.word	0x20000a68
    2318:	200181cc 	.word	0x200181cc
    231c:	200003e0 	.word	0x200003e0
    2320:	20018268 	.word	0x20018268
    2324:	2001829c 	.word	0x2001829c
    2328:	20000af4 	.word	0x20000af4
    232c:	200182d0 	.word	0x200182d0
    2330:	20000af8 	.word	0x20000af8
    2334:	20018338 	.word	0x20018338
    2338:	2001836c 	.word	0x2001836c
    233c:	20000afc 	.word	0x20000afc
    2340:	200183a0 	.word	0x200183a0
    2344:	20000424 	.word	0x20000424
    2348:	20018408 	.word	0x20018408
    234c:	2001843c 	.word	0x2001843c
    2350:	20018470 	.word	0x20018470
    2354:	20000b00 	.word	0x20000b00
    2358:	200003e8 	.word	0x200003e8
    235c:	200184d8 	.word	0x200184d8
    2360:	200003f8 	.word	0x200003f8
    2364:	2001850c 	.word	0x2001850c
    2368:	a801      	add	r0, sp, #4
    236a:	f7fe f86d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    236e:	4941      	ldr	r1, [pc, #260]	; (2474 <initialize_opcode_info()+0x2010>)
    2370:	a801      	add	r0, sp, #4
    2372:	f006 fbbf 	bl	8af4 <String::String(char const*)>
    2376:	4940      	ldr	r1, [pc, #256]	; (2478 <initialize_opcode_info()+0x2014>)
    2378:	a805      	add	r0, sp, #20
    237a:	f006 fbbb 	bl	8af4 <String::String(char const*)>
    237e:	493f      	ldr	r1, [pc, #252]	; (247c <initialize_opcode_info()+0x2018>)
    2380:	a809      	add	r0, sp, #36	; 0x24
    2382:	f006 fbb7 	bl	8af4 <String::String(char const*)>
    2386:	a901      	add	r1, sp, #4
    2388:	483d      	ldr	r0, [pc, #244]	; (2480 <initialize_opcode_info()+0x201c>)
    238a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    238e:	f7fd fe6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2392:	a801      	add	r0, sp, #4
    2394:	f7fe f858 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    2398:	493a      	ldr	r1, [pc, #232]	; (2484 <initialize_opcode_info()+0x2020>)
    239a:	a801      	add	r0, sp, #4
    239c:	f006 fbaa 	bl	8af4 <String::String(char const*)>
    23a0:	4935      	ldr	r1, [pc, #212]	; (2478 <initialize_opcode_info()+0x2014>)
    23a2:	a805      	add	r0, sp, #20
    23a4:	f006 fba6 	bl	8af4 <String::String(char const*)>
    23a8:	4937      	ldr	r1, [pc, #220]	; (2488 <initialize_opcode_info()+0x2024>)
    23aa:	a809      	add	r0, sp, #36	; 0x24
    23ac:	f006 fba2 	bl	8af4 <String::String(char const*)>
    23b0:	a901      	add	r1, sp, #4
    23b2:	4836      	ldr	r0, [pc, #216]	; (248c <initialize_opcode_info()+0x2028>)
    23b4:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    23b8:	f7fd fe56 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23bc:	a801      	add	r0, sp, #4
    23be:	f7fe f843 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    23c2:	4933      	ldr	r1, [pc, #204]	; (2490 <initialize_opcode_info()+0x202c>)
    23c4:	a801      	add	r0, sp, #4
    23c6:	f006 fb95 	bl	8af4 <String::String(char const*)>
    23ca:	4932      	ldr	r1, [pc, #200]	; (2494 <initialize_opcode_info()+0x2030>)
    23cc:	a805      	add	r0, sp, #20
    23ce:	f006 fb91 	bl	8af4 <String::String(char const*)>
    23d2:	4931      	ldr	r1, [pc, #196]	; (2498 <initialize_opcode_info()+0x2034>)
    23d4:	a809      	add	r0, sp, #36	; 0x24
    23d6:	f006 fb8d 	bl	8af4 <String::String(char const*)>
    23da:	a901      	add	r1, sp, #4
    23dc:	482f      	ldr	r0, [pc, #188]	; (249c <initialize_opcode_info()+0x2038>)
    23de:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    23e2:	f7fd fe41 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23e6:	a801      	add	r0, sp, #4
    23e8:	f7fe f82e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    23ec:	4921      	ldr	r1, [pc, #132]	; (2474 <initialize_opcode_info()+0x2010>)
    23ee:	a801      	add	r0, sp, #4
    23f0:	f006 fb80 	bl	8af4 <String::String(char const*)>
    23f4:	492a      	ldr	r1, [pc, #168]	; (24a0 <initialize_opcode_info()+0x203c>)
    23f6:	a805      	add	r0, sp, #20
    23f8:	f006 fb7c 	bl	8af4 <String::String(char const*)>
    23fc:	491f      	ldr	r1, [pc, #124]	; (247c <initialize_opcode_info()+0x2018>)
    23fe:	a809      	add	r0, sp, #36	; 0x24
    2400:	f006 fb78 	bl	8af4 <String::String(char const*)>
    2404:	a901      	add	r1, sp, #4
    2406:	4827      	ldr	r0, [pc, #156]	; (24a4 <initialize_opcode_info()+0x2040>)
    2408:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    240c:	f7fd fe2c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2410:	a801      	add	r0, sp, #4
    2412:	f7fe f819 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2416:	4917      	ldr	r1, [pc, #92]	; (2474 <initialize_opcode_info()+0x2010>)
    2418:	a801      	add	r0, sp, #4
    241a:	f006 fb6b 	bl	8af4 <String::String(char const*)>
    241e:	4922      	ldr	r1, [pc, #136]	; (24a8 <initialize_opcode_info()+0x2044>)
    2420:	a805      	add	r0, sp, #20
    2422:	f006 fb67 	bl	8af4 <String::String(char const*)>
    2426:	4915      	ldr	r1, [pc, #84]	; (247c <initialize_opcode_info()+0x2018>)
    2428:	a809      	add	r0, sp, #36	; 0x24
    242a:	f006 fb63 	bl	8af4 <String::String(char const*)>
    242e:	a901      	add	r1, sp, #4
    2430:	481e      	ldr	r0, [pc, #120]	; (24ac <initialize_opcode_info()+0x2048>)
    2432:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2436:	f7fd fe17 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    243a:	a801      	add	r0, sp, #4
    243c:	f7fe f804 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    2440:	4910      	ldr	r1, [pc, #64]	; (2484 <initialize_opcode_info()+0x2020>)
    2442:	a801      	add	r0, sp, #4
    2444:	f006 fb56 	bl	8af4 <String::String(char const*)>
    2448:	4917      	ldr	r1, [pc, #92]	; (24a8 <initialize_opcode_info()+0x2044>)
    244a:	a805      	add	r0, sp, #20
    244c:	f006 fb52 	bl	8af4 <String::String(char const*)>
    2450:	490d      	ldr	r1, [pc, #52]	; (2488 <initialize_opcode_info()+0x2024>)
    2452:	a809      	add	r0, sp, #36	; 0x24
    2454:	f006 fb4e 	bl	8af4 <String::String(char const*)>
    2458:	f240 3307 	movw	r3, #775	; 0x307
    245c:	a901      	add	r1, sp, #4
    245e:	4814      	ldr	r0, [pc, #80]	; (24b0 <initialize_opcode_info()+0x204c>)
    2460:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2464:	f7fd fe00 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2468:	a801      	add	r0, sp, #4
    246a:	f7fd ffed 	bl	448 <OpDecoder::~OpDecoder()>
    246e:	b00f      	add	sp, #60	; 0x3c
    2470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2474:	20000af0 	.word	0x20000af0
    2478:	20000400 	.word	0x20000400
    247c:	20000a68 	.word	0x20000a68
    2480:	200185dc 	.word	0x200185dc
    2484:	20000af4 	.word	0x20000af4
    2488:	200009f8 	.word	0x200009f8
    248c:	20018610 	.word	0x20018610
    2490:	20000b04 	.word	0x20000b04
    2494:	200007d4 	.word	0x200007d4
    2498:	20000ae8 	.word	0x20000ae8
    249c:	20018678 	.word	0x20018678
    24a0:	20000430 	.word	0x20000430
    24a4:	200186ac 	.word	0x200186ac
    24a8:	20000428 	.word	0x20000428
    24ac:	2001877c 	.word	0x2001877c
    24b0:	200187b0 	.word	0x200187b0

000024b4 <check_for_CLK_activity()>:
    24b4:	4a0e      	ldr	r2, [pc, #56]	; (24f0 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    24b6:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    24ba:	6811      	ldr	r1, [r2, #0]
    24bc:	e004      	b.n	24c8 <check_for_CLK_activity()+0x14>
    24be:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    24c0:	1a5b      	subs	r3, r3, r1
    24c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    24c6:	d812      	bhi.n	24ee <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    24c8:	f8dc 0000 	ldr.w	r0, [ip]
    24cc:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    24d0:	d0f5      	beq.n	24be <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    24d2:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    24d6:	e004      	b.n	24e2 <check_for_CLK_activity()+0x2e>
    24d8:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    24da:	1a5b      	subs	r3, r3, r1
    24dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    24e0:	d804      	bhi.n	24ec <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    24e2:	6803      	ldr	r3, [r0, #0]
    24e4:	04db      	lsls	r3, r3, #19
    24e6:	d4f7      	bmi.n	24d8 <check_for_CLK_activity()+0x24>
    return(true);
    24e8:	2001      	movs	r0, #1
    24ea:	4770      	bx	lr
            return(false);
    24ec:	2000      	movs	r0, #0
}
    24ee:	4770      	bx	lr
    24f0:	20018870 	.word	0x20018870

000024f4 <setup>:
void setup() {
    24f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    24f8:	2100      	movs	r1, #0
void setup() {
    24fa:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    24fc:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    24fe:	4d94      	ldr	r5, [pc, #592]	; (2750 <setup+0x25c>)
    2500:	f006 fd30 	bl	8f64 <pinMode>
    pinMode(PIN_RESET, INPUT);
    2504:	2100      	movs	r1, #0
    2506:	2028      	movs	r0, #40	; 0x28
    2508:	4c92      	ldr	r4, [pc, #584]	; (2754 <setup+0x260>)
    250a:	f006 fd2b 	bl	8f64 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    250e:	2100      	movs	r1, #0
    2510:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2512:	4f91      	ldr	r7, [pc, #580]	; (2758 <setup+0x264>)
    2514:	f006 fd26 	bl	8f64 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    2518:	2100      	movs	r1, #0
    251a:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    251c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 27ac <setup+0x2b8>
    2520:	f006 fd20 	bl	8f64 <pinMode>
    pinMode(PIN_NMI, INPUT);
    2524:	2100      	movs	r1, #0
    2526:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    2528:	f240 28ee 	movw	r8, #750	; 0x2ee
    252c:	f006 fd1a 	bl	8f64 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2530:	2101      	movs	r1, #1
    2532:	200c      	movs	r0, #12
    2534:	f006 fd16 	bl	8f64 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    2538:	2101      	movs	r1, #1
    253a:	2027      	movs	r0, #39	; 0x27
    253c:	f006 fd12 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2540:	2101      	movs	r1, #1
    2542:	201b      	movs	r0, #27
    2544:	f006 fd0e 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    2548:	2101      	movs	r1, #1
    254a:	2026      	movs	r0, #38	; 0x26
    254c:	f006 fd0a 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2550:	2101      	movs	r1, #1
    2552:	201c      	movs	r0, #28
    2554:	f006 fd06 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    2558:	2101      	movs	r1, #1
    255a:	2025      	movs	r0, #37	; 0x25
    255c:	f006 fd02 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    2560:	2101      	movs	r1, #1
    2562:	201d      	movs	r0, #29
    2564:	f006 fcfe 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2568:	2101      	movs	r1, #1
    256a:	2024      	movs	r0, #36	; 0x24
    256c:	f006 fcfa 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    2570:	2101      	movs	r1, #1
    2572:	201e      	movs	r0, #30
    2574:	f006 fcf6 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2578:	2101      	movs	r1, #1
    257a:	2023      	movs	r0, #35	; 0x23
    257c:	f006 fcf2 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    2580:	2101      	movs	r1, #1
    2582:	201f      	movs	r0, #31
    2584:	f006 fcee 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    2588:	2101      	movs	r1, #1
    258a:	2022      	movs	r0, #34	; 0x22
    258c:	f006 fcea 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    2590:	2101      	movs	r1, #1
    2592:	2020      	movs	r0, #32
    2594:	f006 fce6 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    2598:	2101      	movs	r1, #1
    259a:	2021      	movs	r0, #33	; 0x21
    259c:	f006 fce2 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    25a0:	2101      	movs	r1, #1
    25a2:	4608      	mov	r0, r1
    25a4:	f006 fcde 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    25a8:	2101      	movs	r1, #1
    25aa:	2000      	movs	r0, #0
    25ac:	f006 fcda 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    25b0:	2101      	movs	r1, #1
    25b2:	2002      	movs	r0, #2
    25b4:	f006 fcd6 	bl	8f64 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    25b8:	2101      	movs	r1, #1
    25ba:	2017      	movs	r0, #23
    25bc:	f006 fcd2 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    25c0:	2100      	movs	r1, #0
    25c2:	200e      	movs	r0, #14
    25c4:	f006 fcce 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    25c8:	2100      	movs	r1, #0
    25ca:	200f      	movs	r0, #15
    25cc:	f006 fcca 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    25d0:	2100      	movs	r1, #0
    25d2:	2010      	movs	r0, #16
    25d4:	f006 fcc6 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    25d8:	2100      	movs	r1, #0
    25da:	2011      	movs	r0, #17
    25dc:	f006 fcc2 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    25e0:	2100      	movs	r1, #0
    25e2:	2012      	movs	r0, #18
    25e4:	f006 fcbe 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    25e8:	2100      	movs	r1, #0
    25ea:	2013      	movs	r0, #19
    25ec:	f006 fcba 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    25f0:	2100      	movs	r1, #0
    25f2:	2014      	movs	r0, #20
    25f4:	f006 fcb6 	bl	8f64 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    25f8:	2100      	movs	r1, #0
    25fa:	2015      	movs	r0, #21
    25fc:	f006 fcb2 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2600:	2101      	movs	r1, #1
    2602:	200b      	movs	r0, #11
    2604:	f006 fcae 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    2608:	2101      	movs	r1, #1
    260a:	200a      	movs	r0, #10
    260c:	f006 fcaa 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2610:	2101      	movs	r1, #1
    2612:	2009      	movs	r0, #9
    2614:	f006 fca6 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    2618:	2101      	movs	r1, #1
    261a:	2008      	movs	r0, #8
    261c:	f006 fca2 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2620:	2101      	movs	r1, #1
    2622:	2007      	movs	r0, #7
    2624:	f006 fc9e 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    2628:	2101      	movs	r1, #1
    262a:	2006      	movs	r0, #6
    262c:	f006 fc9a 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2630:	2101      	movs	r1, #1
    2632:	2005      	movs	r0, #5
    2634:	f006 fc96 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    2638:	2101      	movs	r1, #1
    263a:	2004      	movs	r0, #4
    263c:	f006 fc92 	bl	8f64 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2640:	2101      	movs	r1, #1
    2642:	2003      	movs	r0, #3
    2644:	f006 fc8e 	bl	8f64 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    2648:	f44f 6200 	mov.w	r2, #2048	; 0x800
    264c:	4943      	ldr	r1, [pc, #268]	; (275c <setup+0x268>)
    264e:	4844      	ldr	r0, [pc, #272]	; (2760 <setup+0x26c>)
    2650:	f006 fcc8 	bl	8fe4 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2654:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2658:	4942      	ldr	r1, [pc, #264]	; (2764 <setup+0x270>)
    265a:	4843      	ldr	r0, [pc, #268]	; (2768 <setup+0x274>)
    265c:	f006 fcc2 	bl	8fe4 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    2660:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2664:	4941      	ldr	r1, [pc, #260]	; (276c <setup+0x278>)
    2666:	4842      	ldr	r0, [pc, #264]	; (2770 <setup+0x27c>)
    2668:	f006 fcbc 	bl	8fe4 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    266c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2670:	4940      	ldr	r1, [pc, #256]	; (2774 <setup+0x280>)
    2672:	4841      	ldr	r0, [pc, #260]	; (2778 <setup+0x284>)
    2674:	f006 fcb6 	bl	8fe4 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2678:	f44f 6200 	mov.w	r2, #2048	; 0x800
    267c:	493f      	ldr	r1, [pc, #252]	; (277c <setup+0x288>)
    267e:	4840      	ldr	r0, [pc, #256]	; (2780 <setup+0x28c>)
    2680:	f006 fcb0 	bl	8fe4 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    2684:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2688:	493e      	ldr	r1, [pc, #248]	; (2784 <setup+0x290>)
    268a:	483f      	ldr	r0, [pc, #252]	; (2788 <setup+0x294>)
    268c:	f006 fcaa 	bl	8fe4 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    2690:	682e      	ldr	r6, [r5, #0]
		yield();
    2692:	f007 fee5 	bl	a460 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2696:	7823      	ldrb	r3, [r4, #0]
    2698:	2b00      	cmp	r3, #0
    269a:	d03e      	beq.n	271a <setup+0x226>
    269c:	783b      	ldrb	r3, [r7, #0]
    269e:	07db      	lsls	r3, r3, #31
    26a0:	d53b      	bpl.n	271a <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    26a2:	682b      	ldr	r3, [r5, #0]
    26a4:	f8d9 2000 	ldr.w	r2, [r9]
    26a8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    26aa:	2b0e      	cmp	r3, #14
    26ac:	d935      	bls.n	271a <setup+0x226>
    Serial.setTimeout(5000);
    26ae:	f241 3188 	movw	r1, #5000	; 0x1388
    26b2:	4836      	ldr	r0, [pc, #216]	; (278c <setup+0x298>)
    26b4:	f006 f9ac 	bl	8a10 <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    26b8:	4935      	ldr	r1, [pc, #212]	; (2790 <setup+0x29c>)
    26ba:	4668      	mov	r0, sp
    26bc:	f006 fa1a 	bl	8af4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    26c0:	4669      	mov	r1, sp
    26c2:	a804      	add	r0, sp, #16
    26c4:	f006 f9a6 	bl	8a14 <String::String(String const&)>
    26c8:	4932      	ldr	r1, [pc, #200]	; (2794 <setup+0x2a0>)
    26ca:	a804      	add	r0, sp, #16
    26cc:	f006 fade 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    26d0:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    26d2:	482e      	ldr	r0, [pc, #184]	; (278c <setup+0x298>)
    26d4:	f006 f956 	bl	8984 <Print::print(String const&)>
    26d8:	482c      	ldr	r0, [pc, #176]	; (278c <setup+0x298>)
    26da:	f006 f979 	bl	89d0 <Print::println()>
class StringSumHelper : public String
    26de:	a804      	add	r0, sp, #16
    26e0:	f006 f9cc 	bl	8a7c <String::~String()>
    26e4:	4668      	mov	r0, sp
    26e6:	f006 f9c9 	bl	8a7c <String::~String()>
    if ( !check_for_CLK_activity() ) {
    26ea:	f7ff fee3 	bl	24b4 <check_for_CLK_activity()>
    26ee:	bb08      	cbnz	r0, 2734 <setup+0x240>
        debug_mode = true;
    26f0:	4829      	ldr	r0, [pc, #164]	; (2798 <setup+0x2a4>)
    26f2:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    26f4:	4b29      	ldr	r3, [pc, #164]	; (279c <setup+0x2a8>)
    26f6:	2203      	movs	r2, #3
        debug_mode = true;
    26f8:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    26fa:	2146      	movs	r1, #70	; 0x46
    26fc:	4828      	ldr	r0, [pc, #160]	; (27a0 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    26fe:	701a      	strb	r2, [r3, #0]
    2700:	f007 fe30 	bl	a364 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2704:	4821      	ldr	r0, [pc, #132]	; (278c <setup+0x298>)
    2706:	f006 f963 	bl	89d0 <Print::println()>
    run_mode = WAITING;
    270a:	4b26      	ldr	r3, [pc, #152]	; (27a4 <setup+0x2b0>)
    270c:	2200      	movs	r2, #0
    270e:	701a      	strb	r2, [r3, #0]
}
    2710:	b009      	add	sp, #36	; 0x24
    2712:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    2716:	f7fd bea5 	b.w	464 <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    271a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    271c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    271e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2720:	b12a      	cbz	r2, 272e <setup+0x23a>
				if (elapsed > 2000) break;
    2722:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2726:	d8c2      	bhi.n	26ae <setup+0x1ba>
			yield();
    2728:	f007 fe9a 	bl	a460 <yield>
    272c:	e7b1      	b.n	2692 <setup+0x19e>
				if (elapsed > 750) break;
    272e:	4543      	cmp	r3, r8
    2730:	d9fa      	bls.n	2728 <setup+0x234>
    2732:	e7bc      	b.n	26ae <setup+0x1ba>
        debug_mode = false;
    2734:	2300      	movs	r3, #0
        addr_mode = All_External;
    2736:	4a19      	ldr	r2, [pc, #100]	; (279c <setup+0x2a8>)
        debug_mode = false;
    2738:	4c17      	ldr	r4, [pc, #92]	; (2798 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    273a:	2146      	movs	r1, #70	; 0x46
    273c:	481a      	ldr	r0, [pc, #104]	; (27a8 <setup+0x2b4>)
    273e:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2740:	7013      	strb	r3, [r2, #0]
    2742:	f007 fe0f 	bl	a364 <usb_serial_write>
    2746:	4811      	ldr	r0, [pc, #68]	; (278c <setup+0x298>)
    2748:	f006 f942 	bl	89d0 <Print::println()>
    274c:	e7dd      	b.n	270a <setup+0x216>
    274e:	bf00      	nop
    2750:	20018870 	.word	0x20018870
    2754:	200188b9 	.word	0x200188b9
    2758:	200188b8 	.word	0x200188b8
    275c:	20001488 	.word	0x20001488
    2760:	200123f0 	.word	0x200123f0
    2764:	20001c88 	.word	0x20001c88
    2768:	20012bf0 	.word	0x20012bf0
    276c:	20002488 	.word	0x20002488
    2770:	200133f0 	.word	0x200133f0
    2774:	20002c88 	.word	0x20002c88
    2778:	20013bf0 	.word	0x20013bf0
    277c:	20003488 	.word	0x20003488
    2780:	200143f0 	.word	0x200143f0
    2784:	20003c88 	.word	0x20003c88
    2788:	20014bf0 	.word	0x20014bf0
    278c:	20004490 	.word	0x20004490
    2790:	200011b4 	.word	0x200011b4
    2794:	200011dc 	.word	0x200011dc
    2798:	20004a9e 	.word	0x20004a9e
    279c:	200188a0 	.word	0x200188a0
    27a0:	200011e4 	.word	0x200011e4
    27a4:	200188b0 	.word	0x200188b0
    27a8:	2000122c 	.word	0x2000122c
    27ac:	20018880 	.word	0x20018880

000027b0 <flag_status()>:
String flag_status(void) {
    27b0:	b570      	push	{r4, r5, r6, lr}
    27b2:	b088      	sub	sp, #32
    s = s + (flag_c ? "C" : "-");
    27b4:	4d4e      	ldr	r5, [pc, #312]	; (28f0 <flag_status()+0x140>)
String flag_status(void) {
    27b6:	4606      	mov	r6, r0
    String s;
    27b8:	2100      	movs	r1, #0
    27ba:	4668      	mov	r0, sp
    s = s + (flag_c ? "C" : "-");
    27bc:	4c4d      	ldr	r4, [pc, #308]	; (28f4 <flag_status()+0x144>)
    String s;
    27be:	f006 f999 	bl	8af4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    27c2:	4669      	mov	r1, sp
    27c4:	a804      	add	r0, sp, #16
    27c6:	f006 f925 	bl	8a14 <String::String(String const&)>
    s = s + (flag_c ? "C" : "-");
    27ca:	782b      	ldrb	r3, [r5, #0]
    27cc:	494a      	ldr	r1, [pc, #296]	; (28f8 <flag_status()+0x148>)
    27ce:	a804      	add	r0, sp, #16
    27d0:	f013 0f01 	tst.w	r3, #1
    27d4:	bf08      	it	eq
    27d6:	4621      	moveq	r1, r4
    27d8:	f006 fa58 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    27dc:	4601      	mov	r1, r0
    27de:	4668      	mov	r0, sp
    27e0:	f006 f9cc 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    27e4:	a804      	add	r0, sp, #16
    27e6:	f006 f949 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    27ea:	4669      	mov	r1, sp
    27ec:	a804      	add	r0, sp, #16
    27ee:	f006 f911 	bl	8a14 <String::String(String const&)>
    s = s + (flag_z ? "Z" : "-");
    27f2:	782b      	ldrb	r3, [r5, #0]
    27f4:	4941      	ldr	r1, [pc, #260]	; (28fc <flag_status()+0x14c>)
    27f6:	a804      	add	r0, sp, #16
    27f8:	f013 0f02 	tst.w	r3, #2
    27fc:	bf08      	it	eq
    27fe:	4621      	moveq	r1, r4
    2800:	f006 fa44 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    2804:	4601      	mov	r1, r0
    2806:	4668      	mov	r0, sp
    2808:	f006 f9b8 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    280c:	a804      	add	r0, sp, #16
    280e:	f006 f935 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2812:	4669      	mov	r1, sp
    2814:	a804      	add	r0, sp, #16
    2816:	f006 f8fd 	bl	8a14 <String::String(String const&)>
    s = s + (flag_i ? "I" : "-");
    281a:	782b      	ldrb	r3, [r5, #0]
    281c:	4938      	ldr	r1, [pc, #224]	; (2900 <flag_status()+0x150>)
    281e:	a804      	add	r0, sp, #16
    2820:	f013 0f04 	tst.w	r3, #4
    2824:	bf08      	it	eq
    2826:	4621      	moveq	r1, r4
    2828:	f006 fa30 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    282c:	4601      	mov	r1, r0
    282e:	4668      	mov	r0, sp
    2830:	f006 f9a4 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    2834:	a804      	add	r0, sp, #16
    2836:	f006 f921 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    283a:	4669      	mov	r1, sp
    283c:	a804      	add	r0, sp, #16
    283e:	f006 f8e9 	bl	8a14 <String::String(String const&)>
    s = s + (flag_d ? "D" : "-");
    2842:	782b      	ldrb	r3, [r5, #0]
    2844:	492f      	ldr	r1, [pc, #188]	; (2904 <flag_status()+0x154>)
    2846:	a804      	add	r0, sp, #16
    2848:	f013 0f08 	tst.w	r3, #8
    284c:	bf08      	it	eq
    284e:	4621      	moveq	r1, r4
    2850:	f006 fa1c 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    2854:	4601      	mov	r1, r0
    2856:	4668      	mov	r0, sp
    2858:	f006 f990 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    285c:	a804      	add	r0, sp, #16
    285e:	f006 f90d 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2862:	4669      	mov	r1, sp
    2864:	a804      	add	r0, sp, #16
    2866:	f006 f8d5 	bl	8a14 <String::String(String const&)>
    s = s + (flag_b ? "B" : "-");
    286a:	782b      	ldrb	r3, [r5, #0]
    286c:	4926      	ldr	r1, [pc, #152]	; (2908 <flag_status()+0x158>)
    286e:	a804      	add	r0, sp, #16
    2870:	f013 0f10 	tst.w	r3, #16
    2874:	bf08      	it	eq
    2876:	4621      	moveq	r1, r4
    2878:	f006 fa08 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    287c:	4601      	mov	r1, r0
    287e:	4668      	mov	r0, sp
    2880:	f006 f97c 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    2884:	a804      	add	r0, sp, #16
    2886:	f006 f8f9 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    288a:	4669      	mov	r1, sp
    288c:	a804      	add	r0, sp, #16
    288e:	f006 f8c1 	bl	8a14 <String::String(String const&)>
    s = s + (flag_v ? "V" : "-");
    2892:	782b      	ldrb	r3, [r5, #0]
    2894:	491d      	ldr	r1, [pc, #116]	; (290c <flag_status()+0x15c>)
    2896:	a804      	add	r0, sp, #16
    2898:	f013 0f40 	tst.w	r3, #64	; 0x40
    289c:	bf08      	it	eq
    289e:	4621      	moveq	r1, r4
    28a0:	f006 f9f4 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    28a4:	4601      	mov	r1, r0
    28a6:	4668      	mov	r0, sp
    28a8:	f006 f968 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    28ac:	a804      	add	r0, sp, #16
    28ae:	f006 f8e5 	bl	8a7c <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    28b2:	4669      	mov	r1, sp
    28b4:	a804      	add	r0, sp, #16
    28b6:	f006 f8ad 	bl	8a14 <String::String(String const&)>
    s = s + (flag_n ? "N" : "-");
    28ba:	4b15      	ldr	r3, [pc, #84]	; (2910 <flag_status()+0x160>)
    28bc:	f995 1000 	ldrsb.w	r1, [r5]
    28c0:	a804      	add	r0, sp, #16
    28c2:	ea13 0121 	ands.w	r1, r3, r1, asr #32
    28c6:	bf38      	it	cc
    28c8:	4621      	movcc	r1, r4
    28ca:	f006 f9df 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    28ce:	4601      	mov	r1, r0
    28d0:	4668      	mov	r0, sp
    28d2:	f006 f953 	bl	8b7c <String::operator=(String const&)>
class StringSumHelper : public String
    28d6:	a804      	add	r0, sp, #16
    28d8:	f006 f8d0 	bl	8a7c <String::~String()>
    return(s);
    28dc:	4669      	mov	r1, sp
    28de:	4630      	mov	r0, r6
    28e0:	f006 f8b6 	bl	8a50 <String::String(String&&)>
}
    28e4:	4668      	mov	r0, sp
    28e6:	f006 f8c9 	bl	8a7c <String::~String()>
    28ea:	4630      	mov	r0, r6
    28ec:	b008      	add	sp, #32
    28ee:	bd70      	pop	{r4, r5, r6, pc}
    28f0:	20004aa0 	.word	0x20004aa0
    28f4:	20000370 	.word	0x20000370
    28f8:	20000a14 	.word	0x20000a14
    28fc:	20000374 	.word	0x20000374
    2900:	20000a5c 	.word	0x20000a5c
    2904:	20000ae8 	.word	0x20000ae8
    2908:	200009f0 	.word	0x200009f0
    290c:	20000ac4 	.word	0x20000ac4
    2910:	20000378 	.word	0x20000378

00002914 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    2914:	4b21      	ldr	r3, [pc, #132]	; (299c <sample_at_CLK_rising_edge()+0x88>)
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	b103      	cbz	r3, 291c <sample_at_CLK_rising_edge()+0x8>
    291a:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    291c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    2920:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2922:	6813      	ldr	r3, [r2, #0]
    2924:	04db      	lsls	r3, r3, #19
    2926:	d4fc      	bmi.n	2922 <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    2928:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    292c:	6813      	ldr	r3, [r2, #0]
    292e:	04d8      	lsls	r0, r3, #19
    2930:	d5fc      	bpl.n	292c <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    2932:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2936:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2938:	04d9      	lsls	r1, r3, #19
    293a:	d5fc      	bpl.n	2936 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    293c:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2940:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2942:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2944:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2948:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    294c:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    294e:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2952:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2956:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    295a:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    295e:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2962:	0cd8      	lsrs	r0, r3, #19
    2964:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2968:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    296a:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    296e:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2972:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2974:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2978:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    297c:	4302      	orrs	r2, r0
    297e:	4808      	ldr	r0, [pc, #32]	; (29a0 <sample_at_CLK_rising_edge()+0x8c>)
    2980:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2982:	4a08      	ldr	r2, [pc, #32]	; (29a4 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2984:	4808      	ldr	r0, [pc, #32]	; (29a8 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2986:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    298a:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    298c:	4a07      	ldr	r2, [pc, #28]	; (29ac <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    298e:	4b08      	ldr	r3, [pc, #32]	; (29b0 <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2990:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2994:	7019      	strb	r1, [r3, #0]
}
    2996:	f85d fb04 	ldr.w	pc, [sp], #4
    299a:	bf00      	nop
    299c:	20004a9e 	.word	0x20004a9e
    29a0:	200188a2 	.word	0x200188a2
    29a4:	200188a3 	.word	0x200188a3
    29a8:	200188a5 	.word	0x200188a5
    29ac:	200188a6 	.word	0x200188a6
    29b0:	200188a4 	.word	0x200188a4

000029b4 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    29b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    29b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    29bc:	d33c      	bcc.n	2a38 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29be:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    29c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    29c6:	d355      	bcc.n	2a74 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    29c8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    29cc:	b294      	uxth	r4, r2
    29ce:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    29d2:	d331      	bcc.n	2a38 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    29d4:	2900      	cmp	r1, #0
    29d6:	f000 8118 	beq.w	2c0a <read_byte(unsigned short, bool)+0x256>
    29da:	4cb3      	ldr	r4, [pc, #716]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    29dc:	f894 8000 	ldrb.w	r8, [r4]
    29e0:	f1b8 0f01 	cmp.w	r8, #1
    29e4:	f040 814f 	bne.w	2c86 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    29e8:	4ab0      	ldr	r2, [pc, #704]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    29ea:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    29ee:	2100      	movs	r1, #0
    current_address = local_address;
    29f0:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    29f6:	d311      	bcc.n	2a1c <read_byte(unsigned short, bool)+0x68>
    29f8:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    29fc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    2a00:	f0c0 8135 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    2a04:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    2a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2a0c:	f0c0 812f 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2a10:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    2a14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    2a18:	f0c0 8129 	bcc.w	2c6e <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    2a1c:	4ba4      	ldr	r3, [pc, #656]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
    2a1e:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2a20:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    2a24:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2a26:	d02f      	beq.n	2a88 <read_byte(unsigned short, bool)+0xd4>
    2a28:	b371      	cbz	r1, 2a88 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    2a2a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2a2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2a36:	e027      	b.n	2a88 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a38:	4b9e      	ldr	r3, [pc, #632]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    2a3a:	781a      	ldrb	r2, [r3, #0]
    2a3c:	2a01      	cmp	r2, #1
    2a3e:	d906      	bls.n	2a4e <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    2a40:	4a9b      	ldr	r2, [pc, #620]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
    2a42:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2a44:	4b9c      	ldr	r3, [pc, #624]	; (2cb8 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2a46:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2a48:	5c18      	ldrb	r0, [r3, r0]
}
    2a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a4e:	4a96      	ldr	r2, [pc, #600]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    2a50:	f892 8000 	ldrb.w	r8, [r2]
    2a54:	2900      	cmp	r1, #0
    2a56:	f040 80de 	bne.w	2c16 <read_byte(unsigned short, bool)+0x262>
    2a5a:	2100      	movs	r1, #0
    current_address = local_address;
    2a5c:	4a93      	ldr	r2, [pc, #588]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a5e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    2a62:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a64:	f080 811d 	bcs.w	2ca2 <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2a68:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    2a6a:	2b01      	cmp	r3, #1
    2a6c:	d9d6      	bls.n	2a1c <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    2a6e:	4b93      	ldr	r3, [pc, #588]	; (2cbc <read_byte(unsigned short, bool)+0x308>)
    2a70:	781c      	ldrb	r4, [r3, #0]
    2a72:	e06c      	b.n	2b4e <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a74:	2900      	cmp	r1, #0
    2a76:	f040 813d 	bne.w	2cf4 <read_byte(unsigned short, bool)+0x340>
    2a7a:	4b8b      	ldr	r3, [pc, #556]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2a7c:	4c8b      	ldr	r4, [pc, #556]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    2a7e:	4a8c      	ldr	r2, [pc, #560]	; (2cb0 <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a80:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2a84:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2a86:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2a88:	4b8c      	ldr	r3, [pc, #560]	; (2cbc <read_byte(unsigned short, bool)+0x308>)
    2a8a:	781c      	ldrb	r4, [r3, #0]
    2a8c:	b94c      	cbnz	r4, 2aa2 <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2a8e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a92:	6813      	ldr	r3, [r2, #0]
    2a94:	04de      	lsls	r6, r3, #19
    2a96:	d4fc      	bmi.n	2a92 <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2a98:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a9c:	6813      	ldr	r3, [r2, #0]
    2a9e:	04dd      	lsls	r5, r3, #19
    2aa0:	d5fc      	bpl.n	2a9c <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2aa2:	4e87      	ldr	r6, [pc, #540]	; (2cc0 <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2aa4:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2aa8:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2aaa:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2aac:	0a85      	lsrs	r5, r0, #10
    2aae:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2ab2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ab6:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2aba:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2abe:	4b81      	ldr	r3, [pc, #516]	; (2cc4 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2ac0:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ac4:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2ac6:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ac8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2acc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ace:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ad0:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2ad2:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2ad6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2ada:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2ade:	433b      	orrs	r3, r7
    2ae0:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2ae4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ae6:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ae8:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    2af0:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2af2:	4b75      	ldr	r3, [pc, #468]	; (2cc8 <read_byte(unsigned short, bool)+0x314>)
    2af4:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2af6:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2af8:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2afa:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2afc:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b00:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    2b08:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2b0a:	0342      	lsls	r2, r0, #13
    2b0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    2b10:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b12:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b14:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b1c:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b1e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b20:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b24:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    2b28:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b2a:	f8dc 2000 	ldr.w	r2, [ip]
    2b2e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2b32:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b34:	4a65      	ldr	r2, [pc, #404]	; (2ccc <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b36:	433b      	orrs	r3, r7
    2b38:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b3c:	0903      	lsrs	r3, r0, #4
    2b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2b42:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b44:	6835      	ldr	r5, [r6, #0]
    2b46:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2b48:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2b4a:	430b      	orrs	r3, r1
    2b4c:	6033      	str	r3, [r6, #0]
    return;
    2b4e:	4d60      	ldr	r5, [pc, #384]	; (2cd0 <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2b50:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2b54:	f8df e184 	ldr.w	lr, [pc, #388]	; 2cdc <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2b58:	f8df c188 	ldr.w	ip, [pc, #392]	; 2ce4 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2b5c:	4f5d      	ldr	r7, [pc, #372]	; (2cd4 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2b5e:	4e5e      	ldr	r6, [pc, #376]	; (2cd8 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    2b60:	b1d4      	cbz	r4, 2b98 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    2b62:	782b      	ldrb	r3, [r5, #0]
    2b64:	2b01      	cmp	r3, #1
    2b66:	d0fb      	beq.n	2b60 <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2b68:	f1b8 0f01 	cmp.w	r8, #1
    2b6c:	d005      	beq.n	2b7a <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    2b6e:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2b72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    2b7a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2b7e:	d05d      	beq.n	2c3c <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2b80:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2b84:	d352      	bcc.n	2c2c <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2b86:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2b8e:	d247      	bcs.n	2c20 <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    2b90:	4b49      	ldr	r3, [pc, #292]	; (2cb8 <read_byte(unsigned short, bool)+0x304>)
    2b92:	5c18      	ldrb	r0, [r3, r0]
}
    2b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2b98:	6813      	ldr	r3, [r2, #0]
    2b9a:	04d9      	lsls	r1, r3, #19
    2b9c:	d4fc      	bmi.n	2b98 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    2b9e:	6813      	ldr	r3, [r2, #0]
    2ba0:	04db      	lsls	r3, r3, #19
    2ba2:	d5fc      	bpl.n	2b9e <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2ba4:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2ba6:	04d9      	lsls	r1, r3, #19
    2ba8:	d5fc      	bpl.n	2ba4 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2baa:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2bae:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2bb0:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2bb4:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2bb8:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2bbc:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bc0:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2bc4:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2bc8:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2bcc:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bd0:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2bd4:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2bd6:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2bda:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2bde:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2be2:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2be6:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bea:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2bee:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2bf2:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2bf6:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bfa:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2bfe:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c00:	ea41 010a 	orr.w	r1, r1, sl
    2c04:	f88e 1000 	strb.w	r1, [lr]
    return;
    2c08:	e7ac      	b.n	2b64 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    2c0a:	4c28      	ldr	r4, [pc, #160]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2c0c:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2c0e:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2c10:	f893 8000 	ldrb.w	r8, [r3]
    2c14:	e6f2      	b.n	29fc <read_byte(unsigned short, bool)+0x48>
    2c16:	f1b8 0f01 	cmp.w	r8, #1
    2c1a:	f47f af1f 	bne.w	2a5c <read_byte(unsigned short, bool)+0xa8>
    2c1e:	e71c      	b.n	2a5a <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2c20:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2c24:	b29b      	uxth	r3, r3
    2c26:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2c2a:	d203      	bcs.n	2c34 <read_byte(unsigned short, bool)+0x280>
    2c2c:	4b21      	ldr	r3, [pc, #132]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c2e:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    2c30:	2b00      	cmp	r3, #0
    2c32:	d1ad      	bne.n	2b90 <read_byte(unsigned short, bool)+0x1dc>
    2c34:	4b29      	ldr	r3, [pc, #164]	; (2cdc <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    2c36:	7818      	ldrb	r0, [r3, #0]
}
    2c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2c3c:	4928      	ldr	r1, [pc, #160]	; (2ce0 <read_byte(unsigned short, bool)+0x32c>)
    2c3e:	4b27      	ldr	r3, [pc, #156]	; (2cdc <read_byte(unsigned short, bool)+0x328>)
    2c40:	780a      	ldrb	r2, [r1, #0]
    2c42:	b9b2      	cbnz	r2, 2c72 <read_byte(unsigned short, bool)+0x2be>
    2c44:	781a      	ldrb	r2, [r3, #0]
    2c46:	2a88      	cmp	r2, #136	; 0x88
    2c48:	d1f5      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2c4a:	2201      	movs	r2, #1
    2c4c:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    2c4e:	780a      	ldrb	r2, [r1, #0]
    2c50:	2a03      	cmp	r2, #3
    2c52:	d1f0      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2c54:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2c56:	28b0      	cmp	r0, #176	; 0xb0
    2c58:	d018      	beq.n	2c8c <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    2c5a:	28b1      	cmp	r0, #177	; 0xb1
    2c5c:	d044      	beq.n	2ce8 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    2c5e:	28b2      	cmp	r0, #178	; 0xb2
    2c60:	d155      	bne.n	2d0e <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    2c62:	4814      	ldr	r0, [pc, #80]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c64:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2c66:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2c68:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2c6a:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2c6c:	e7e3      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2c6e:	4b11      	ldr	r3, [pc, #68]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
    2c70:	e6fa      	b.n	2a68 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2c72:	2a01      	cmp	r2, #1
    2c74:	d00f      	beq.n	2c96 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2c76:	2a02      	cmp	r2, #2
    2c78:	d1ea      	bne.n	2c50 <read_byte(unsigned short, bool)+0x29c>
    2c7a:	781a      	ldrb	r2, [r3, #0]
    2c7c:	2a88      	cmp	r2, #136	; 0x88
    2c7e:	d1da      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2c80:	2203      	movs	r2, #3
    2c82:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2c84:	e7d7      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2c86:	4b09      	ldr	r3, [pc, #36]	; (2cac <read_byte(unsigned short, bool)+0x2f8>)
    2c88:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2c8a:	e6b7      	b.n	29fc <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    2c8c:	2200      	movs	r2, #0
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    2c90:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    2c92:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2c94:	e7cf      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2c96:	781a      	ldrb	r2, [r3, #0]
    2c98:	2a95      	cmp	r2, #149	; 0x95
    2c9a:	d1d8      	bne.n	2c4e <read_byte(unsigned short, bool)+0x29a>
    2c9c:	2202      	movs	r2, #2
    2c9e:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2ca0:	e7c9      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2ca2:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2ca6:	e6a4      	b.n	29f2 <read_byte(unsigned short, bool)+0x3e>
    2ca8:	200188b0 	.word	0x200188b0
    2cac:	2001888c 	.word	0x2001888c
    2cb0:	200188a9 	.word	0x200188a9
    2cb4:	200188a0 	.word	0x200188a0
    2cb8:	200053f0 	.word	0x200053f0
    2cbc:	20004a9e 	.word	0x20004a9e
    2cc0:	42004000 	.word	0x42004000
    2cc4:	6dfffff3 	.word	0x6dfffff3
    2cc8:	cff3efff 	.word	0xcff3efff
    2ccc:	7fffff6f 	.word	0x7fffff6f
    2cd0:	200188a5 	.word	0x200188a5
    2cd4:	200188a6 	.word	0x200188a6
    2cd8:	200188a4 	.word	0x200188a4
    2cdc:	200188a2 	.word	0x200188a2
    2ce0:	200188b1 	.word	0x200188b1
    2ce4:	200188a3 	.word	0x200188a3
                    addr_mode = Read_Internal_Write_External;
    2ce8:	480c      	ldr	r0, [pc, #48]	; (2d1c <read_byte(unsigned short, bool)+0x368>)
    2cea:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    2cec:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    2cee:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2cf0:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2cf2:	e7a0      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2cf4:	4a0a      	ldr	r2, [pc, #40]	; (2d20 <read_byte(unsigned short, bool)+0x36c>)
    2cf6:	f892 8000 	ldrb.w	r8, [r2]
    2cfa:	f1b8 0f01 	cmp.w	r8, #1
    2cfe:	f43f ae73 	beq.w	29e8 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    2d02:	4908      	ldr	r1, [pc, #32]	; (2d24 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    2d04:	2200      	movs	r2, #0
    2d06:	4b08      	ldr	r3, [pc, #32]	; (2d28 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    2d08:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    2d0a:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2d0c:	e68d      	b.n	2a2a <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    2d0e:	28b3      	cmp	r0, #179	; 0xb3
    2d10:	d191      	bne.n	2c36 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    2d12:	4c02      	ldr	r4, [pc, #8]	; (2d1c <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    2d14:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    2d16:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    2d18:	7008      	strb	r0, [r1, #0]
    2d1a:	e78c      	b.n	2c36 <read_byte(unsigned short, bool)+0x282>
    2d1c:	200188a0 	.word	0x200188a0
    2d20:	200188b0 	.word	0x200188b0
    2d24:	2001888c 	.word	0x2001888c
    2d28:	200188a9 	.word	0x200188a9

00002d2c <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2d2c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    2d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2d32:	d201      	bcs.n	2d38 <write_byte(unsigned short, unsigned char)+0xc>
    2d34:	4b79      	ldr	r3, [pc, #484]	; (2f1c <write_byte(unsigned short, unsigned char)+0x1f0>)
    2d36:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2d38:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2d3c:	f0c0 80b1 	bcc.w	2ea2 <write_byte(unsigned short, unsigned char)+0x176>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2d40:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2d48:	d306      	bcc.n	2d58 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2d4a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2d4e:	b29b      	uxth	r3, r3
    2d50:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2d54:	f0c0 80a5 	bcc.w	2ea2 <write_byte(unsigned short, unsigned char)+0x176>
    if (debug_mode) return;
    2d58:	4b71      	ldr	r3, [pc, #452]	; (2f20 <write_byte(unsigned short, unsigned char)+0x1f4>)
    2d5a:	781b      	ldrb	r3, [r3, #0]
    2d5c:	b94b      	cbnz	r3, 2d72 <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2d5e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2d62:	6813      	ldr	r3, [r2, #0]
    2d64:	04df      	lsls	r7, r3, #19
    2d66:	d4fc      	bmi.n	2d62 <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2d68:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2d6c:	6813      	ldr	r3, [r2, #0]
    2d6e:	04de      	lsls	r6, r3, #19
    2d70:	d5fc      	bpl.n	2d6c <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2d72:	4c6c      	ldr	r4, [pc, #432]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d74:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2d78:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2d7a:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2d7e:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2d82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2d86:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d8a:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2d8c:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2d90:	4b65      	ldr	r3, [pc, #404]	; (2f28 <write_byte(unsigned short, unsigned char)+0x1fc>)
    2d92:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2d94:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2d96:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2d9a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2d9e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2da0:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2da2:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2da4:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2da8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2dac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2db0:	432b      	orrs	r3, r5
    2db2:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2db4:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2db6:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2db8:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2dbe:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2dc2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dc6:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dc8:	4a58      	ldr	r2, [pc, #352]	; (2f2c <write_byte(unsigned short, unsigned char)+0x200>)
    2dca:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dcc:	4d58      	ldr	r5, [pc, #352]	; (2f30 <write_byte(unsigned short, unsigned char)+0x204>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2dce:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2dd0:	0542      	lsls	r2, r0, #21
    2dd2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2dd6:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2dd8:	0343      	lsls	r3, r0, #13
    2dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2dde:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2de0:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2de2:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2de4:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2de6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2dea:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2dec:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2dee:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2df6:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2df8:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2dfa:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2dfe:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e02:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e04:	484b      	ldr	r0, [pc, #300]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2e06:	4332      	orrs	r2, r6
    2e08:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e0a:	4a4b      	ldr	r2, [pc, #300]	; (2f38 <write_byte(unsigned short, unsigned char)+0x20c>)
    2e0c:	6805      	ldr	r5, [r0, #0]
    2e0e:	402a      	ands	r2, r5
		if (val) {
    2e10:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2e12:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2e16:	ea43 030c 	orr.w	r3, r3, ip
    2e1a:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2e1c:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2e20:	d448      	bmi.n	2eb4 <write_byte(unsigned short, unsigned char)+0x188>
    2e22:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2e24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2e28:	f04f 0201 	mov.w	r2, #1
    2e2c:	4b3d      	ldr	r3, [pc, #244]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
		if (val) {
    2e2e:	d548      	bpl.n	2ec2 <write_byte(unsigned short, unsigned char)+0x196>
    2e30:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2e36:	4b3b      	ldr	r3, [pc, #236]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2e3c:	d548      	bpl.n	2ed0 <write_byte(unsigned short, unsigned char)+0x1a4>
    2e3e:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2e44:	4b37      	ldr	r3, [pc, #220]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2e4a:	d548      	bpl.n	2ede <write_byte(unsigned short, unsigned char)+0x1b2>
    2e4c:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2e52:	4b34      	ldr	r3, [pc, #208]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2e58:	d548      	bpl.n	2eec <write_byte(unsigned short, unsigned char)+0x1c0>
    2e5a:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2e60:	4b30      	ldr	r3, [pc, #192]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2e66:	d548      	bpl.n	2efa <write_byte(unsigned short, unsigned char)+0x1ce>
    2e68:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2e6e:	4b31      	ldr	r3, [pc, #196]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    2e70:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2e74:	d548      	bpl.n	2f08 <write_byte(unsigned short, unsigned char)+0x1dc>
    2e76:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2e7c:	4b2d      	ldr	r3, [pc, #180]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    2e7e:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2e82:	d048      	beq.n	2f16 <write_byte(unsigned short, unsigned char)+0x1ea>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2e88:	4c2a      	ldr	r4, [pc, #168]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    2e8a:	2520      	movs	r5, #32
    2e8c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2e90:	f7ff fd40 	bl	2914 <sample_at_CLK_rising_edge()>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2e94:	4b23      	ldr	r3, [pc, #140]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e96:	2202      	movs	r2, #2
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2e98:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2ea2:	4b26      	ldr	r3, [pc, #152]	; (2f3c <write_byte(unsigned short, unsigned char)+0x210>)
    if (internal_address_check(local_address) > 0x2) {
    2ea4:	781b      	ldrb	r3, [r3, #0]
    2ea6:	2b02      	cmp	r3, #2
    2ea8:	f67f af56 	bls.w	2d58 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2eac:	4b24      	ldr	r3, [pc, #144]	; (2f40 <write_byte(unsigned short, unsigned char)+0x214>)
    2eae:	2201      	movs	r2, #1
    2eb0:	701a      	strb	r2, [r3, #0]
}
    2eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2eb4:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2eb6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2eba:	f04f 0201 	mov.w	r2, #1
    2ebe:	4b19      	ldr	r3, [pc, #100]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
		if (val) {
    2ec0:	d4b6      	bmi.n	2e30 <write_byte(unsigned short, unsigned char)+0x104>
    2ec2:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2ec8:	4b16      	ldr	r3, [pc, #88]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2ece:	d4b6      	bmi.n	2e3e <write_byte(unsigned short, unsigned char)+0x112>
    2ed0:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2ed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2ed6:	4b13      	ldr	r3, [pc, #76]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2edc:	d4b6      	bmi.n	2e4c <write_byte(unsigned short, unsigned char)+0x120>
    2ede:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2ee4:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2eea:	d4b6      	bmi.n	2e5a <write_byte(unsigned short, unsigned char)+0x12e>
    2eec:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2ef2:	4b0c      	ldr	r3, [pc, #48]	; (2f24 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2ef8:	d4b6      	bmi.n	2e68 <write_byte(unsigned short, unsigned char)+0x13c>
    2efa:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2efc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2f00:	4b0c      	ldr	r3, [pc, #48]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    2f02:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2f06:	d4b6      	bmi.n	2e76 <write_byte(unsigned short, unsigned char)+0x14a>
    2f08:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2f0e:	4b09      	ldr	r3, [pc, #36]	; (2f34 <write_byte(unsigned short, unsigned char)+0x208>)
    2f10:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2f14:	d1b6      	bne.n	2e84 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2f1a:	e7b5      	b.n	2e88 <write_byte(unsigned short, unsigned char)+0x15c>
    2f1c:	200053f0 	.word	0x200053f0
    2f20:	20004a9e 	.word	0x20004a9e
    2f24:	42004000 	.word	0x42004000
    2f28:	6dfffff3 	.word	0x6dfffff3
    2f2c:	cff3efff 	.word	0xcff3efff
    2f30:	42008000 	.word	0x42008000
    2f34:	4200c000 	.word	0x4200c000
    2f38:	7fffff6f 	.word	0x7fffff6f
    2f3c:	200188a0 	.word	0x200188a0
    2f40:	200188a9 	.word	0x200188a9

00002f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f44:	4a08      	ldr	r2, [pc, #32]	; (2f68 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2f46:	0601      	lsls	r1, r0, #24
    2f48:	7813      	ldrb	r3, [r2, #0]
    2f4a:	d407      	bmi.n	2f5c <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f50:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2f52:	b928      	cbnz	r0, 2f60 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2f54:	f043 0302 	orr.w	r3, r3, #2
    return;
    2f58:	7013      	strb	r3, [r2, #0]
}
    2f5a:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2f60:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f64:	7013      	strb	r3, [r2, #0]
}
    2f66:	4770      	bx	lr
    2f68:	20004aa0 	.word	0x20004aa0

00002f6c <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2f6c:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2f6e:	4b04      	ldr	r3, [pc, #16]	; (2f80 <Fetch_Immediate(unsigned char)+0x14>)
    2f70:	2100      	movs	r1, #0
    2f72:	881b      	ldrh	r3, [r3, #0]
    2f74:	4418      	add	r0, r3
    2f76:	b280      	uxth	r0, r0
    2f78:	f7ff fd1c 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2f7c:	bd08      	pop	{r3, pc}
    2f7e:	bf00      	nop
    2f80:	20018890 	.word	0x20018890

00002f84 <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2f84:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2f86:	4b07      	ldr	r3, [pc, #28]	; (2fa4 <Fetch_ZeroPage()+0x20>)
    2f88:	2100      	movs	r1, #0
    2f8a:	8818      	ldrh	r0, [r3, #0]
    2f8c:	3001      	adds	r0, #1
    2f8e:	b280      	uxth	r0, r0
    2f90:	f7ff fd10 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2f94:	4b04      	ldr	r3, [pc, #16]	; (2fa8 <Fetch_ZeroPage()+0x24>)
    2f96:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2f98:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f9a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2f9c:	f7ff fd0a 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2fa0:	bd08      	pop	{r3, pc}
    2fa2:	bf00      	nop
    2fa4:	20018890 	.word	0x20018890
    2fa8:	2001888e 	.word	0x2001888e

00002fac <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2fac:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2fae:	4c0c      	ldr	r4, [pc, #48]	; (2fe0 <Fetch_ZeroPage_X()+0x34>)
    2fb0:	2100      	movs	r1, #0
    2fb2:	8820      	ldrh	r0, [r4, #0]
    2fb4:	3001      	adds	r0, #1
    2fb6:	b280      	uxth	r0, r0
    2fb8:	f7ff fcfc 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2fbc:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2fbe:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2fc0:	2100      	movs	r1, #0
    2fc2:	1c58      	adds	r0, r3, #1
    2fc4:	b280      	uxth	r0, r0
    2fc6:	f7ff fcf5 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2fca:	4a06      	ldr	r2, [pc, #24]	; (2fe4 <Fetch_ZeroPage_X()+0x38>)
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2fce:	2100      	movs	r1, #0
    2fd0:	7812      	ldrb	r2, [r2, #0]
    2fd2:	18a0      	adds	r0, r4, r2
    2fd4:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2fd6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2fd8:	f7ff fcec 	bl	29b4 <read_byte(unsigned short, bool)>
}
    2fdc:	bd10      	pop	{r4, pc}
    2fde:	bf00      	nop
    2fe0:	20018890 	.word	0x20018890
    2fe4:	200188ad 	.word	0x200188ad
    2fe8:	2001888e 	.word	0x2001888e

00002fec <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2fec:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2fee:	4c0c      	ldr	r4, [pc, #48]	; (3020 <Fetch_ZeroPage_Y()+0x34>)
    2ff0:	2100      	movs	r1, #0
    2ff2:	8820      	ldrh	r0, [r4, #0]
    2ff4:	3001      	adds	r0, #1
    2ff6:	b280      	uxth	r0, r0
    2ff8:	f7ff fcdc 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2ffc:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2ffe:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    3000:	2100      	movs	r1, #0
    3002:	1c58      	adds	r0, r3, #1
    3004:	b280      	uxth	r0, r0
    3006:	f7ff fcd5 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    300a:	4a06      	ldr	r2, [pc, #24]	; (3024 <Fetch_ZeroPage_Y()+0x38>)
    300c:	4b06      	ldr	r3, [pc, #24]	; (3028 <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    300e:	2100      	movs	r1, #0
    3010:	7812      	ldrb	r2, [r2, #0]
    3012:	18a0      	adds	r0, r4, r2
    3014:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    3016:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3018:	f7ff fccc 	bl	29b4 <read_byte(unsigned short, bool)>
}
    301c:	bd10      	pop	{r4, pc}
    301e:	bf00      	nop
    3020:	20018890 	.word	0x20018890
    3024:	200188ae 	.word	0x200188ae
    3028:	2001888e 	.word	0x2001888e

0000302c <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    302c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    302e:	4c0b      	ldr	r4, [pc, #44]	; (305c <Fetch_Absolute()+0x30>)
    3030:	2100      	movs	r1, #0
    3032:	8820      	ldrh	r0, [r4, #0]
    3034:	3001      	adds	r0, #1
    3036:	b280      	uxth	r0, r0
    3038:	f7ff fcbc 	bl	29b4 <read_byte(unsigned short, bool)>
    303c:	8823      	ldrh	r3, [r4, #0]
    303e:	4604      	mov	r4, r0
    3040:	2100      	movs	r1, #0
    3042:	1c98      	adds	r0, r3, #2
    3044:	b280      	uxth	r0, r0
    3046:	f7ff fcb5 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <Fetch_Absolute()+0x34>)
    304c:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    3050:	2100      	movs	r1, #0
    effective_address = adl + adh;
    3052:	b280      	uxth	r0, r0
    3054:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3056:	f7ff fcad 	bl	29b4 <read_byte(unsigned short, bool)>
}
    305a:	bd10      	pop	{r4, pc}
    305c:	20018890 	.word	0x20018890
    3060:	2001888e 	.word	0x2001888e

00003064 <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    3064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    3066:	4c14      	ldr	r4, [pc, #80]	; (30b8 <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    3068:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    306a:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    306c:	4d13      	ldr	r5, [pc, #76]	; (30bc <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    306e:	8823      	ldrh	r3, [r4, #0]
    3070:	1c58      	adds	r0, r3, #1
    3072:	b280      	uxth	r0, r0
    3074:	f7ff fc9e 	bl	29b4 <read_byte(unsigned short, bool)>
    3078:	8823      	ldrh	r3, [r4, #0]
    307a:	4607      	mov	r7, r0
    307c:	2100      	movs	r1, #0
    307e:	1c98      	adds	r0, r3, #2
    3080:	b280      	uxth	r0, r0
    3082:	f7ff fc97 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    3086:	4b0e      	ldr	r3, [pc, #56]	; (30c0 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    3088:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    308a:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    308c:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    308e:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    3090:	443b      	add	r3, r7
    3092:	4423      	add	r3, r4
    3094:	b298      	uxth	r0, r3
    3096:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    3098:	f7ff fc8c 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    309c:	2e01      	cmp	r6, #1
    309e:	d000      	beq.n	30a2 <Fetch_Absolute_X(unsigned char)+0x3e>
}
    30a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    30a2:	882b      	ldrh	r3, [r5, #0]
    30a4:	405c      	eors	r4, r3
    30a6:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    30aa:	d0f9      	beq.n	30a0 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    30ac:	2100      	movs	r1, #0
    30ae:	4618      	mov	r0, r3
    30b0:	f7ff fc80 	bl	29b4 <read_byte(unsigned short, bool)>
}
    30b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30b6:	bf00      	nop
    30b8:	20018890 	.word	0x20018890
    30bc:	2001888e 	.word	0x2001888e
    30c0:	200188ad 	.word	0x200188ad

000030c4 <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    30c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    30c6:	4c14      	ldr	r4, [pc, #80]	; (3118 <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    30c8:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    30ca:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30cc:	4d13      	ldr	r5, [pc, #76]	; (311c <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    30ce:	8823      	ldrh	r3, [r4, #0]
    30d0:	1c58      	adds	r0, r3, #1
    30d2:	b280      	uxth	r0, r0
    30d4:	f7ff fc6e 	bl	29b4 <read_byte(unsigned short, bool)>
    30d8:	8823      	ldrh	r3, [r4, #0]
    30da:	4607      	mov	r7, r0
    30dc:	2100      	movs	r1, #0
    30de:	1c98      	adds	r0, r3, #2
    30e0:	b280      	uxth	r0, r0
    30e2:	f7ff fc67 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    30e6:	4b0e      	ldr	r3, [pc, #56]	; (3120 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    30e8:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    30ea:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    30ec:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    30ee:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    30f0:	443b      	add	r3, r7
    30f2:	4423      	add	r3, r4
    30f4:	b298      	uxth	r0, r3
    30f6:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    30f8:	f7ff fc5c 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    30fc:	2e01      	cmp	r6, #1
    30fe:	d000      	beq.n	3102 <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    3100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3102:	882b      	ldrh	r3, [r5, #0]
    3104:	405c      	eors	r4, r3
    3106:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    310a:	d0f9      	beq.n	3100 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    310c:	2100      	movs	r1, #0
    310e:	4618      	mov	r0, r3
    3110:	f7ff fc50 	bl	29b4 <read_byte(unsigned short, bool)>
}
    3114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3116:	bf00      	nop
    3118:	20018890 	.word	0x20018890
    311c:	2001888e 	.word	0x2001888e
    3120:	200188ae 	.word	0x200188ae

00003124 <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    3124:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    3126:	4b11      	ldr	r3, [pc, #68]	; (316c <Fetch_Indexed_Indirect_X()+0x48>)
    3128:	2100      	movs	r1, #0
    312a:	8818      	ldrh	r0, [r3, #0]
    312c:	3001      	adds	r0, #1
    312e:	b280      	uxth	r0, r0
    3130:	f7ff fc40 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    3134:	4b0e      	ldr	r3, [pc, #56]	; (3170 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    3136:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    3138:	781c      	ldrb	r4, [r3, #0]
    313a:	4404      	add	r4, r0
    313c:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    313e:	4620      	mov	r0, r4
    3140:	f7ff fc38 	bl	29b4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    3144:	2100      	movs	r1, #0
    3146:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    3148:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    314a:	f7ff fc33 	bl	29b4 <read_byte(unsigned short, bool)>
    314e:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    3150:	2100      	movs	r1, #0
    3152:	b2e0      	uxtb	r0, r4
    3154:	f7ff fc2e 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3158:	4b06      	ldr	r3, [pc, #24]	; (3174 <Fetch_Indexed_Indirect_X()+0x50>)
    315a:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    315e:	2100      	movs	r1, #0
    effective_address = adh + adl;
    3160:	b280      	uxth	r0, r0
    3162:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    3164:	f7ff fc26 	bl	29b4 <read_byte(unsigned short, bool)>
}
    3168:	bd38      	pop	{r3, r4, r5, pc}
    316a:	bf00      	nop
    316c:	20018890 	.word	0x20018890
    3170:	200188ad 	.word	0x200188ad
    3174:	2001888e 	.word	0x2001888e

00003178 <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    3178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    317a:	4b16      	ldr	r3, [pc, #88]	; (31d4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    317c:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    317e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3180:	4e15      	ldr	r6, [pc, #84]	; (31d8 <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    3182:	881b      	ldrh	r3, [r3, #0]
    3184:	1c58      	adds	r0, r3, #1
    3186:	b280      	uxth	r0, r0
    3188:	f7ff fc14 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    318c:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    318e:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    3190:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3192:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    3194:	f7ff fc0e 	bl	29b4 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3198:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    319a:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    319c:	b2e0      	uxtb	r0, r4
    319e:	f7ff fc09 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    31a2:	4b0e      	ldr	r3, [pc, #56]	; (31dc <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    31a4:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    31a6:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    31a8:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    31aa:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    31ac:	443b      	add	r3, r7
    31ae:	4423      	add	r3, r4
    31b0:	b298      	uxth	r0, r3
    31b2:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    31b4:	f7ff fbfe 	bl	29b4 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    31b8:	2d01      	cmp	r5, #1
    31ba:	d000      	beq.n	31be <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    31bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    31be:	8833      	ldrh	r3, [r6, #0]
    31c0:	405c      	eors	r4, r3
    31c2:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    31c6:	d0f9      	beq.n	31bc <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    31c8:	2100      	movs	r1, #0
    31ca:	4618      	mov	r0, r3
    31cc:	f7ff fbf2 	bl	29b4 <read_byte(unsigned short, bool)>
}
    31d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31d2:	bf00      	nop
    31d4:	20018890 	.word	0x20018890
    31d8:	2001888e 	.word	0x2001888e
    31dc:	200188ae 	.word	0x200188ae

000031e0 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    31e0:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    31e2:	4e0c      	ldr	r6, [pc, #48]	; (3214 <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    31e4:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    31e6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    31e8:	4c0b      	ldr	r4, [pc, #44]	; (3218 <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    31ea:	8833      	ldrh	r3, [r6, #0]
    31ec:	1c58      	adds	r0, r3, #1
    31ee:	b280      	uxth	r0, r0
    31f0:	f7ff fbe0 	bl	29b4 <read_byte(unsigned short, bool)>
    31f4:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    31f6:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    31f8:	2100      	movs	r1, #0
    31fa:	1c98      	adds	r0, r3, #2
    31fc:	b280      	uxth	r0, r0
    31fe:	f7ff fbd9 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    3202:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    3204:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    3206:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    320a:	b280      	uxth	r0, r0
    320c:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    320e:	f7ff fd8d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3212:	bd70      	pop	{r4, r5, r6, pc}
    3214:	20018890 	.word	0x20018890
    3218:	2001888e 	.word	0x2001888e

0000321c <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    321c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    321e:	4b0b      	ldr	r3, [pc, #44]	; (324c <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    3220:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    3222:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3224:	4d0a      	ldr	r5, [pc, #40]	; (3250 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    3226:	881b      	ldrh	r3, [r3, #0]
    3228:	1c58      	adds	r0, r3, #1
    322a:	b280      	uxth	r0, r0
    322c:	f7ff fbc2 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    3230:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3232:	b280      	uxth	r0, r0
    3234:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    3236:	f7ff fbbd 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    323a:	4a06      	ldr	r2, [pc, #24]	; (3254 <Write_ZeroPage_X(unsigned char)+0x38>)
    323c:	4621      	mov	r1, r4
    323e:	882b      	ldrh	r3, [r5, #0]
    3240:	7810      	ldrb	r0, [r2, #0]
    3242:	4418      	add	r0, r3
    3244:	b2c0      	uxtb	r0, r0
    3246:	f7ff fd71 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    324a:	bd38      	pop	{r3, r4, r5, pc}
    324c:	20018890 	.word	0x20018890
    3250:	2001888e 	.word	0x2001888e
    3254:	200188ad 	.word	0x200188ad

00003258 <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    3258:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    325a:	4b0b      	ldr	r3, [pc, #44]	; (3288 <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    325c:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    325e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3260:	4d0a      	ldr	r5, [pc, #40]	; (328c <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    3262:	881b      	ldrh	r3, [r3, #0]
    3264:	1c58      	adds	r0, r3, #1
    3266:	b280      	uxth	r0, r0
    3268:	f7ff fba4 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    326c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    326e:	b280      	uxth	r0, r0
    3270:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    3272:	f7ff fb9f 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    3276:	4a06      	ldr	r2, [pc, #24]	; (3290 <Write_ZeroPage_Y(unsigned char)+0x38>)
    3278:	4621      	mov	r1, r4
    327a:	882b      	ldrh	r3, [r5, #0]
    327c:	7810      	ldrb	r0, [r2, #0]
    327e:	4418      	add	r0, r3
    3280:	b2c0      	uxtb	r0, r0
    3282:	f7ff fd53 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3286:	bd38      	pop	{r3, r4, r5, pc}
    3288:	20018890 	.word	0x20018890
    328c:	2001888e 	.word	0x2001888e
    3290:	200188ae 	.word	0x200188ae

00003294 <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    3294:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    3296:	4d0f      	ldr	r5, [pc, #60]	; (32d4 <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    3298:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    329a:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    329c:	4e0e      	ldr	r6, [pc, #56]	; (32d8 <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    329e:	882b      	ldrh	r3, [r5, #0]
    32a0:	1c58      	adds	r0, r3, #1
    32a2:	b280      	uxth	r0, r0
    32a4:	f7ff fb86 	bl	29b4 <read_byte(unsigned short, bool)>
    32a8:	882b      	ldrh	r3, [r5, #0]
    32aa:	4605      	mov	r5, r0
    32ac:	2100      	movs	r1, #0
    32ae:	1c98      	adds	r0, r3, #2
    32b0:	b280      	uxth	r0, r0
    32b2:	f7ff fb7f 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    32b6:	4b09      	ldr	r3, [pc, #36]	; (32dc <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    32b8:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	442b      	add	r3, r5
    32be:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    32c2:	b298      	uxth	r0, r3
    32c4:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    32c6:	f7ff fb75 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    32ca:	4621      	mov	r1, r4
    32cc:	8830      	ldrh	r0, [r6, #0]
    32ce:	f7ff fd2d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    32d2:	bd70      	pop	{r4, r5, r6, pc}
    32d4:	20018890 	.word	0x20018890
    32d8:	2001888e 	.word	0x2001888e
    32dc:	200188ad 	.word	0x200188ad

000032e0 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    32e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    32e2:	4c16      	ldr	r4, [pc, #88]	; (333c <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    32e4:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    32e6:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    32e8:	4d15      	ldr	r5, [pc, #84]	; (3340 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    32ea:	8823      	ldrh	r3, [r4, #0]
    32ec:	1c58      	adds	r0, r3, #1
    32ee:	b280      	uxth	r0, r0
    32f0:	f7ff fb60 	bl	29b4 <read_byte(unsigned short, bool)>
    32f4:	8823      	ldrh	r3, [r4, #0]
    32f6:	4607      	mov	r7, r0
    32f8:	2100      	movs	r1, #0
    32fa:	1c98      	adds	r0, r3, #2
    32fc:	b280      	uxth	r0, r0
    32fe:	f7ff fb59 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    3302:	4b10      	ldr	r3, [pc, #64]	; (3344 <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    3304:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    3306:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    3308:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    330a:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    330c:	443b      	add	r3, r7
    330e:	4423      	add	r3, r4
    3310:	b298      	uxth	r0, r3
    3312:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    3314:	f7ff fb4e 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    3318:	8828      	ldrh	r0, [r5, #0]
    331a:	4044      	eors	r4, r0
    331c:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    3320:	d103      	bne.n	332a <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    3322:	4631      	mov	r1, r6
    3324:	f7ff fd02 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    332a:	2100      	movs	r1, #0
    332c:	f7ff fb42 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    3330:	8828      	ldrh	r0, [r5, #0]
    3332:	4631      	mov	r1, r6
    3334:	f7ff fcfa 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    333a:	bf00      	nop
    333c:	20018890 	.word	0x20018890
    3340:	2001888e 	.word	0x2001888e
    3344:	200188ae 	.word	0x200188ae

00003348 <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    334a:	4b13      	ldr	r3, [pc, #76]	; (3398 <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    334c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    334e:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    3350:	4f12      	ldr	r7, [pc, #72]	; (339c <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    3352:	881b      	ldrh	r3, [r3, #0]
    3354:	1c58      	adds	r0, r3, #1
    3356:	b280      	uxth	r0, r0
    3358:	f7ff fb2c 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    335c:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    335e:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    3360:	4604      	mov	r4, r0
    read_byte(bal, false);
    3362:	4628      	mov	r0, r5
    3364:	f7ff fb26 	bl	29b4 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    3368:	783b      	ldrb	r3, [r7, #0]
    336a:	2100      	movs	r1, #0
    336c:	441c      	add	r4, r3
    336e:	b2e0      	uxtb	r0, r4
    3370:	f7ff fb20 	bl	29b4 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3374:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    3376:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3378:	2100      	movs	r1, #0
    337a:	3301      	adds	r3, #1
    337c:	441d      	add	r5, r3
    337e:	b2e8      	uxtb	r0, r5
    3380:	f7ff fb18 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3384:	4b06      	ldr	r3, [pc, #24]	; (33a0 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    3386:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    338a:	4631      	mov	r1, r6
    effective_address = adh + adl;
    338c:	b280      	uxth	r0, r0
    338e:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    3390:	f7ff fccc 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    3394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3396:	bf00      	nop
    3398:	20018890 	.word	0x20018890
    339c:	200188ad 	.word	0x200188ad
    33a0:	2001888e 	.word	0x2001888e

000033a4 <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    33a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    33a6:	4b11      	ldr	r3, [pc, #68]	; (33ec <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    33a8:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    33aa:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    33ac:	4f10      	ldr	r7, [pc, #64]	; (33f0 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    33ae:	881b      	ldrh	r3, [r3, #0]
    33b0:	1c58      	adds	r0, r3, #1
    33b2:	b280      	uxth	r0, r0
    33b4:	f7ff fafe 	bl	29b4 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    33b8:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    33ba:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    33bc:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    33be:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    33c0:	f7ff faf8 	bl	29b4 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    33c4:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    33c6:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    33c8:	b2a0      	uxth	r0, r4
    33ca:	f7ff faf3 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    33ce:	4b09      	ldr	r3, [pc, #36]	; (33f4 <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    33d0:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	4433      	add	r3, r6
    33d6:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    33da:	b298      	uxth	r0, r3
    33dc:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    33de:	f7ff fae9 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    33e2:	4629      	mov	r1, r5
    33e4:	8838      	ldrh	r0, [r7, #0]
    33e6:	f7ff fca1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
}
    33ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ec:	20018890 	.word	0x20018890
    33f0:	2001888e 	.word	0x2001888e
    33f4:	200188ae 	.word	0x200188ae

000033f8 <reset_sequence()>:
void reset_sequence() {
    33f8:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    33fa:	4b65      	ldr	r3, [pc, #404]	; (3590 <reset_sequence()+0x198>)
    33fc:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    33fe:	4d65      	ldr	r5, [pc, #404]	; (3594 <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3400:	2002      	movs	r0, #2
    3402:	4965      	ldr	r1, [pc, #404]	; (3598 <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    3404:	4c65      	ldr	r4, [pc, #404]	; (359c <reset_sequence()+0x1a4>)
    3406:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    340a:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    340c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3410:	8828      	ldrh	r0, [r5, #0]
    3412:	f7ff facf 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    3416:	8828      	ldrh	r0, [r5, #0]
    3418:	2100      	movs	r1, #0
    341a:	3001      	adds	r0, #1
    341c:	b280      	uxth	r0, r0
    341e:	f7ff fac9 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    3422:	7820      	ldrb	r0, [r4, #0]
    3424:	2100      	movs	r1, #0
    3426:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    342a:	f7ff fac3 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    342e:	7820      	ldrb	r0, [r4, #0]
    3430:	2100      	movs	r1, #0
    3432:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3436:	3801      	subs	r0, #1
    3438:	b280      	uxth	r0, r0
    343a:	f7ff fabb 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    343e:	7820      	ldrb	r0, [r4, #0]
    3440:	2100      	movs	r1, #0
    3442:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3446:	3802      	subs	r0, #2
    3448:	b280      	uxth	r0, r0
    344a:	f7ff fab3 	bl	29b4 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    344e:	2100      	movs	r1, #0
    3450:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    3454:	f7ff faae 	bl	29b4 <read_byte(unsigned short, bool)>
    3458:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    345a:	2100      	movs	r1, #0
    345c:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3460:	f7ff faa8 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    3464:	4a4e      	ldr	r2, [pc, #312]	; (35a0 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    3466:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    346a:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    346c:	4b4d      	ldr	r3, [pc, #308]	; (35a4 <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    346e:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3470:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3472:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    3476:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    3478:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    347a:	d37b      	bcc.n	3574 <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    347c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3484:	d309      	bcc.n	349a <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3486:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    348a:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    348e:	d371      	bcc.n	3574 <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3490:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3498:	d36c      	bcc.n	3574 <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    349a:	4b43      	ldr	r3, [pc, #268]	; (35a8 <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    349c:	2100      	movs	r1, #0
    349e:	4a43      	ldr	r2, [pc, #268]	; (35ac <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    34a0:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    34a2:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    34a4:	2b01      	cmp	r3, #1
    34a6:	d005      	beq.n	34b4 <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    34a8:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    34ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    34b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    34b4:	4b3e      	ldr	r3, [pc, #248]	; (35b0 <reset_sequence()+0x1b8>)
    34b6:	781b      	ldrb	r3, [r3, #0]
    34b8:	b94b      	cbnz	r3, 34ce <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    34ba:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    34be:	6813      	ldr	r3, [r2, #0]
    34c0:	04d9      	lsls	r1, r3, #19
    34c2:	d4fc      	bmi.n	34be <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    34c4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    34c8:	6813      	ldr	r3, [r2, #0]
    34ca:	04db      	lsls	r3, r3, #19
    34cc:	d5fc      	bpl.n	34c8 <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    34ce:	4e32      	ldr	r6, [pc, #200]	; (3598 <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34d0:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    34d4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    34d6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    34d8:	06c1      	lsls	r1, r0, #27
    34da:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34de:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34e2:	682a      	ldr	r2, [r5, #0]
    34e4:	4b33      	ldr	r3, [pc, #204]	; (35b4 <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    34e6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    34ea:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    34ec:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34ee:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    34f2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    34f6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    34f8:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    34fc:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3500:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3502:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3506:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    350a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    350c:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    350e:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3510:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3512:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3516:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    351c:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    351e:	4a26      	ldr	r2, [pc, #152]	; (35b8 <reset_sequence()+0x1c0>)
    3520:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3522:	4d26      	ldr	r5, [pc, #152]	; (35bc <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3524:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3526:	0542      	lsls	r2, r0, #21
    3528:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    352c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    352e:	0343      	lsls	r3, r0, #13
    3530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    3534:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3536:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3538:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    353c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3540:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3542:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3546:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    354a:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    354c:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3550:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3554:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3556:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3558:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    355a:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    355e:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3560:	480b      	ldr	r0, [pc, #44]	; (3590 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3562:	4332      	orrs	r2, r6
    3564:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3566:	4a16      	ldr	r2, [pc, #88]	; (35c0 <reset_sequence()+0x1c8>)
    3568:	6804      	ldr	r4, [r0, #0]
    356a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    356c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    356e:	430b      	orrs	r3, r1
    3570:	6003      	str	r3, [r0, #0]
    return;
    3572:	e003      	b.n	357c <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3574:	4b13      	ldr	r3, [pc, #76]	; (35c4 <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	2b01      	cmp	r3, #1
    357a:	d98e      	bls.n	349a <reset_sequence()+0xa2>
    357c:	2110      	movs	r1, #16
    357e:	4812      	ldr	r0, [pc, #72]	; (35c8 <reset_sequence()+0x1d0>)
    3580:	f006 fef0 	bl	a364 <usb_serial_write>
    3584:	4811      	ldr	r0, [pc, #68]	; (35cc <reset_sequence()+0x1d4>)
}
    3586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    358a:	f005 ba21 	b.w	89d0 <Print::println()>
    358e:	bf00      	nop
    3590:	4200c000 	.word	0x4200c000
    3594:	20018890 	.word	0x20018890
    3598:	42004000 	.word	0x42004000
    359c:	20004aa1 	.word	0x20004aa1
    35a0:	20004aa0 	.word	0x20004aa0
    35a4:	2001888c 	.word	0x2001888c
    35a8:	200188b0 	.word	0x200188b0
    35ac:	200188a9 	.word	0x200188a9
    35b0:	20004a9e 	.word	0x20004a9e
    35b4:	6dfffff3 	.word	0x6dfffff3
    35b8:	cff3efff 	.word	0xcff3efff
    35bc:	42008000 	.word	0x42008000
    35c0:	7fffff6f 	.word	0x7fffff6f
    35c4:	200188a0 	.word	0x200188a0
    35c8:	20000444 	.word	0x20000444
    35cc:	20004490 	.word	0x20004490

000035d0 <nmi_handler()>:
void nmi_handler() {
    35d0:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35d2:	4e67      	ldr	r6, [pc, #412]	; (3770 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    35d4:	f7ff f99e 	bl	2914 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35d8:	4c66      	ldr	r4, [pc, #408]	; (3774 <nmi_handler()+0x1a4>)
    35da:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35dc:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35de:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35e0:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    35e4:	4d64      	ldr	r5, [pc, #400]	; (3778 <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35e6:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35e8:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35ec:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    35ee:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    35f0:	f7ff f9e0 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    35f4:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    35f6:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    35f8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    35fc:	0a09      	lsrs	r1, r1, #8
    35fe:	f7ff fb95 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3602:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3604:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    3606:	3801      	subs	r0, #1
    3608:	b2c0      	uxtb	r0, r0
    360a:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    360c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3610:	f7ff fb8c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3614:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3616:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3618:	3801      	subs	r0, #1
    361a:	b2c0      	uxtb	r0, r0
    361c:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    361e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3622:	f7ff fb83 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3626:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    3628:	2100      	movs	r1, #0
    362a:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    362e:	3b01      	subs	r3, #1
    3630:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    3632:	f7ff f9bf 	bl	29b4 <read_byte(unsigned short, bool)>
    3636:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    3638:	2100      	movs	r1, #0
    363a:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    363e:	f7ff f9b9 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3642:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    3644:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3648:	4a4c      	ldr	r2, [pc, #304]	; (377c <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    364a:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    364e:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3650:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3652:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    3656:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3658:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    365a:	d37b      	bcc.n	3754 <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    365c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3664:	d309      	bcc.n	367a <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3666:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    366a:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    366e:	d371      	bcc.n	3754 <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3670:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3674:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3678:	d36c      	bcc.n	3754 <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    367a:	4b41      	ldr	r3, [pc, #260]	; (3780 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    367c:	2100      	movs	r1, #0
    367e:	4a41      	ldr	r2, [pc, #260]	; (3784 <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3680:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3682:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3684:	2b01      	cmp	r3, #1
    3686:	d005      	beq.n	3694 <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3688:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    368c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3694:	4b3c      	ldr	r3, [pc, #240]	; (3788 <nmi_handler()+0x1b8>)
    3696:	781b      	ldrb	r3, [r3, #0]
    3698:	b94b      	cbnz	r3, 36ae <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    369a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    369e:	6813      	ldr	r3, [r2, #0]
    36a0:	04d9      	lsls	r1, r3, #19
    36a2:	d4fc      	bmi.n	369e <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    36a4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    36a8:	6813      	ldr	r3, [r2, #0]
    36aa:	04db      	lsls	r3, r3, #19
    36ac:	d5fc      	bpl.n	36a8 <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    36ae:	4e37      	ldr	r6, [pc, #220]	; (378c <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36b0:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    36b4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    36b6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    36b8:	06c1      	lsls	r1, r0, #27
    36ba:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    36be:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36c2:	682a      	ldr	r2, [r5, #0]
    36c4:	4b32      	ldr	r3, [pc, #200]	; (3790 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    36c6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36ca:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    36cc:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36ce:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    36d2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36d6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    36d8:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    36dc:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36e0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    36e2:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    36e6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36ea:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36ec:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    36ee:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    36f0:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36f2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36f6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    36f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    36fc:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    36fe:	4a25      	ldr	r2, [pc, #148]	; (3794 <nmi_handler()+0x1c4>)
    3700:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3702:	4d25      	ldr	r5, [pc, #148]	; (3798 <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3704:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3706:	0542      	lsls	r2, r0, #21
    3708:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    370c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    370e:	0343      	lsls	r3, r0, #13
    3710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    3714:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3716:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3718:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    371c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3720:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3722:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3726:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    372a:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    372c:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3730:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3734:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3736:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3738:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    373a:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    373e:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3740:	4816      	ldr	r0, [pc, #88]	; (379c <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3742:	4332      	orrs	r2, r6
    3744:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3746:	4a16      	ldr	r2, [pc, #88]	; (37a0 <nmi_handler()+0x1d0>)
    3748:	6804      	ldr	r4, [r0, #0]
    374a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    374c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    374e:	430b      	orrs	r3, r1
    3750:	6003      	str	r3, [r0, #0]
    return;
    3752:	e003      	b.n	375c <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3754:	4b13      	ldr	r3, [pc, #76]	; (37a4 <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3756:	781b      	ldrb	r3, [r3, #0]
    3758:	2b01      	cmp	r3, #1
    375a:	d98e      	bls.n	367a <nmi_handler()+0xaa>
    375c:	210e      	movs	r1, #14
    375e:	4812      	ldr	r0, [pc, #72]	; (37a8 <nmi_handler()+0x1d8>)
    3760:	f006 fe00 	bl	a364 <usb_serial_write>
    3764:	4811      	ldr	r0, [pc, #68]	; (37ac <nmi_handler()+0x1dc>)
}
    3766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    376a:	f005 b931 	b.w	89d0 <Print::println()>
    376e:	bf00      	nop
    3770:	20004aa0 	.word	0x20004aa0
    3774:	20018890 	.word	0x20018890
    3778:	20004aa1 	.word	0x20004aa1
    377c:	2001888c 	.word	0x2001888c
    3780:	200188b0 	.word	0x200188b0
    3784:	200188a9 	.word	0x200188a9
    3788:	20004a9e 	.word	0x20004a9e
    378c:	42004000 	.word	0x42004000
    3790:	6dfffff3 	.word	0x6dfffff3
    3794:	cff3efff 	.word	0xcff3efff
    3798:	42008000 	.word	0x42008000
    379c:	4200c000 	.word	0x4200c000
    37a0:	7fffff6f 	.word	0x7fffff6f
    37a4:	200188a0 	.word	0x200188a0
    37a8:	20000394 	.word	0x20000394
    37ac:	20004490 	.word	0x20004490

000037b0 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    37b0:	b570      	push	{r4, r5, r6, lr}
    37b2:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    37b4:	4e69      	ldr	r6, [pc, #420]	; (395c <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    37b6:	f7ff f8ad 	bl	2914 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    37ba:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    37bc:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    37be:	f000 80ca 	beq.w	3956 <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    37c2:	f023 0310 	bic.w	r3, r3, #16
    37c6:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    37ca:	4c65      	ldr	r4, [pc, #404]	; (3960 <irq_handler(unsigned char)+0x1b0>)
    37cc:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    37ce:	4d65      	ldr	r5, [pc, #404]	; (3964 <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    37d0:	8820      	ldrh	r0, [r4, #0]
    37d2:	7033      	strb	r3, [r6, #0]
    37d4:	3001      	adds	r0, #1
    37d6:	b280      	uxth	r0, r0
    37d8:	f7ff f8ec 	bl	29b4 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    37dc:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    37de:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    37e0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    37e4:	0a09      	lsrs	r1, r1, #8
    37e6:	f7ff faa1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    37ea:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37ec:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    37ee:	3801      	subs	r0, #1
    37f0:	b2c0      	uxtb	r0, r0
    37f2:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37f4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    37f8:	f7ff fa98 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    37fc:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    37fe:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3800:	3801      	subs	r0, #1
    3802:	b2c0      	uxtb	r0, r0
    3804:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3806:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    380a:	f7ff fa8f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    380e:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    3810:	2100      	movs	r1, #0
    3812:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    3816:	3b01      	subs	r3, #1
    3818:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    381a:	f7ff f8cb 	bl	29b4 <read_byte(unsigned short, bool)>
    381e:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    3820:	2100      	movs	r1, #0
    3822:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3826:	f7ff f8c5 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    382a:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    382c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    3830:	4a4d      	ldr	r2, [pc, #308]	; (3968 <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3832:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3836:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3838:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    383a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    383e:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    3840:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3842:	d37b      	bcc.n	393c <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3844:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    384c:	d309      	bcc.n	3862 <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    384e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3852:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3856:	d371      	bcc.n	393c <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3858:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    385c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3860:	d36c      	bcc.n	393c <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3862:	4b42      	ldr	r3, [pc, #264]	; (396c <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    3864:	2100      	movs	r1, #0
    3866:	4a42      	ldr	r2, [pc, #264]	; (3970 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3868:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    386a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    386c:	2b01      	cmp	r3, #1
    386e:	d005      	beq.n	387c <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3870:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3874:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    387c:	4b3d      	ldr	r3, [pc, #244]	; (3974 <irq_handler(unsigned char)+0x1c4>)
    387e:	781b      	ldrb	r3, [r3, #0]
    3880:	b94b      	cbnz	r3, 3896 <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3882:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3886:	6813      	ldr	r3, [r2, #0]
    3888:	04d9      	lsls	r1, r3, #19
    388a:	d4fc      	bmi.n	3886 <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    388c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3890:	6813      	ldr	r3, [r2, #0]
    3892:	04db      	lsls	r3, r3, #19
    3894:	d5fc      	bpl.n	3890 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3896:	4e38      	ldr	r6, [pc, #224]	; (3978 <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3898:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    389c:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    389e:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    38a0:	06c1      	lsls	r1, r0, #27
    38a2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38a6:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38aa:	682a      	ldr	r2, [r5, #0]
    38ac:	4b33      	ldr	r3, [pc, #204]	; (397c <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38ae:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38b2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38b4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38b6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38ba:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38be:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    38c0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    38c4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38c8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    38ca:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    38ce:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38d2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38d4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38d6:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38d8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38da:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38de:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38e4:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38e6:	4a26      	ldr	r2, [pc, #152]	; (3980 <irq_handler(unsigned char)+0x1d0>)
    38e8:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38ea:	4d26      	ldr	r5, [pc, #152]	; (3984 <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38ec:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    38ee:	0542      	lsls	r2, r0, #21
    38f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    38f4:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    38f6:	0343      	lsls	r3, r0, #13
    38f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    38fc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    38fe:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3900:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3904:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3908:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    390a:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    390e:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3912:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3914:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3918:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    391c:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    391e:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3920:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3922:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3926:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3928:	4817      	ldr	r0, [pc, #92]	; (3988 <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    392a:	4332      	orrs	r2, r6
    392c:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    392e:	4a17      	ldr	r2, [pc, #92]	; (398c <irq_handler(unsigned char)+0x1dc>)
    3930:	6804      	ldr	r4, [r0, #0]
    3932:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3934:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3936:	430b      	orrs	r3, r1
    3938:	6003      	str	r3, [r0, #0]
    return;
    393a:	e003      	b.n	3944 <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    393c:	4b14      	ldr	r3, [pc, #80]	; (3990 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    393e:	781b      	ldrb	r3, [r3, #0]
    3940:	2b01      	cmp	r3, #1
    3942:	d98e      	bls.n	3862 <irq_handler(unsigned char)+0xb2>
    3944:	210e      	movs	r1, #14
    3946:	4813      	ldr	r0, [pc, #76]	; (3994 <irq_handler(unsigned char)+0x1e4>)
    3948:	f006 fd0c 	bl	a364 <usb_serial_write>
    394c:	4812      	ldr	r0, [pc, #72]	; (3998 <irq_handler(unsigned char)+0x1e8>)
}
    394e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3952:	f005 b83d 	b.w	89d0 <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3956:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    395a:	e736      	b.n	37ca <irq_handler(unsigned char)+0x1a>
    395c:	20004aa0 	.word	0x20004aa0
    3960:	20018890 	.word	0x20018890
    3964:	20004aa1 	.word	0x20004aa1
    3968:	2001888c 	.word	0x2001888c
    396c:	200188b0 	.word	0x200188b0
    3970:	200188a9 	.word	0x200188a9
    3974:	20004a9e 	.word	0x20004a9e
    3978:	42004000 	.word	0x42004000
    397c:	6dfffff3 	.word	0x6dfffff3
    3980:	cff3efff 	.word	0xcff3efff
    3984:	42008000 	.word	0x42008000
    3988:	4200c000 	.word	0x4200c000
    398c:	7fffff6f 	.word	0x7fffff6f
    3990:	200188a0 	.word	0x200188a0
    3994:	20000384 	.word	0x20000384
    3998:	20004490 	.word	0x20004490

0000399c <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    399c:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    399e:	4c0f      	ldr	r4, [pc, #60]	; (39dc <opcode_0x0A()+0x40>)
    39a0:	2100      	movs	r1, #0
    39a2:	8820      	ldrh	r0, [r4, #0]
    39a4:	f7ff f806 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39a8:	4b0d      	ldr	r3, [pc, #52]	; (39e0 <opcode_0x0A()+0x44>)
    39aa:	490e      	ldr	r1, [pc, #56]	; (39e4 <opcode_0x0A()+0x48>)
    39ac:	f993 2000 	ldrsb.w	r2, [r3]
    39b0:	7818      	ldrb	r0, [r3, #0]
    39b2:	2a00      	cmp	r2, #0
    39b4:	780a      	ldrb	r2, [r1, #0]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    39b6:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39ba:	bfb4      	ite	lt
    39bc:	f042 0201 	orrlt.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    39c0:	f002 02fe 	andge.w	r2, r2, #254	; 0xfe
    register_a = register_a << 1;
    39c4:	b2c0      	uxtb	r0, r0
    39c6:	700a      	strb	r2, [r1, #0]
    39c8:	7018      	strb	r0, [r3, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    39ca:	f7ff fabb 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0A].length);
    39ce:	4a06      	ldr	r2, [pc, #24]	; (39e8 <opcode_0x0A()+0x4c>)
    39d0:	8823      	ldrh	r3, [r4, #0]
    39d2:	f892 0239 	ldrb.w	r0, [r2, #569]	; 0x239
    39d6:	4418      	add	r0, r3
}
    39d8:	b280      	uxth	r0, r0
    39da:	bd10      	pop	{r4, pc}
    39dc:	20018890 	.word	0x20018890
    39e0:	200188ac 	.word	0x200188ac
    39e4:	20004aa0 	.word	0x20004aa0
    39e8:	20015418 	.word	0x20015418

000039ec <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    39ec:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    39ee:	4c0e      	ldr	r4, [pc, #56]	; (3a28 <opcode_0x4A()+0x3c>)
    39f0:	2100      	movs	r1, #0
    39f2:	8820      	ldrh	r0, [r4, #0]
    39f4:	f7fe ffde 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    39f8:	4a0c      	ldr	r2, [pc, #48]	; (3a2c <opcode_0x4A()+0x40>)
    39fa:	490d      	ldr	r1, [pc, #52]	; (3a30 <opcode_0x4A()+0x44>)
    39fc:	7810      	ldrb	r0, [r2, #0]
    39fe:	780b      	ldrb	r3, [r1, #0]
    3a00:	f010 0f01 	tst.w	r0, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    3a04:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a08:	bf14      	ite	ne
    3a0a:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3a0e:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    3a12:	7010      	strb	r0, [r2, #0]
    3a14:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a16:	f7ff fa95 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4A].length);
    3a1a:	4a06      	ldr	r2, [pc, #24]	; (3a34 <opcode_0x4A()+0x48>)
    3a1c:	8823      	ldrh	r3, [r4, #0]
    3a1e:	f892 0f39 	ldrb.w	r0, [r2, #3897]	; 0xf39
    3a22:	4418      	add	r0, r3
}
    3a24:	b280      	uxth	r0, r0
    3a26:	bd10      	pop	{r4, pc}
    3a28:	20018890 	.word	0x20018890
    3a2c:	200188ac 	.word	0x200188ac
    3a30:	20004aa0 	.word	0x20004aa0
    3a34:	20015418 	.word	0x20015418

00003a38 <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    3a38:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3a3a:	4c10      	ldr	r4, [pc, #64]	; (3a7c <opcode_0x6A()+0x44>)
    3a3c:	2100      	movs	r1, #0
    3a3e:	8820      	ldrh	r0, [r4, #0]
    3a40:	f7fe ffb8 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a44:	490e      	ldr	r1, [pc, #56]	; (3a80 <opcode_0x6A()+0x48>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a46:	4a0f      	ldr	r2, [pc, #60]	; (3a84 <opcode_0x6A()+0x4c>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a48:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a4a:	f892 c000 	ldrb.w	ip, [r2]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a4e:	01d8      	lsls	r0, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a50:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3a54:	b2c0      	uxtb	r0, r0
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a56:	bf14      	ite	ne
    3a58:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3a5c:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3a60:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    3a64:	700b      	strb	r3, [r1, #0]
    3a66:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a68:	f7ff fa6c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x6A].length);
    3a6c:	4a06      	ldr	r2, [pc, #24]	; (3a88 <opcode_0x6A()+0x50>)
    3a6e:	8823      	ldrh	r3, [r4, #0]
    3a70:	f892 05b9 	ldrb.w	r0, [r2, #1465]	; 0x5b9
    3a74:	4418      	add	r0, r3
}
    3a76:	b280      	uxth	r0, r0
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	bf00      	nop
    3a7c:	20018890 	.word	0x20018890
    3a80:	20004aa0 	.word	0x20004aa0
    3a84:	200188ac 	.word	0x200188ac
    3a88:	20016418 	.word	0x20016418

00003a8c <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3a8c:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3a8e:	4c11      	ldr	r4, [pc, #68]	; (3ad4 <opcode_0x2A()+0x48>)
    3a90:	2100      	movs	r1, #0
    3a92:	8820      	ldrh	r0, [r4, #0]
    3a94:	f7fe ff8e 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3a98:	490f      	ldr	r1, [pc, #60]	; (3ad8 <opcode_0x2A()+0x4c>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a9a:	4a10      	ldr	r2, [pc, #64]	; (3adc <opcode_0x2A()+0x50>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3a9c:	780b      	ldrb	r3, [r1, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a9e:	f992 e000 	ldrsb.w	lr, [r2]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3aa2:	f003 0001 	and.w	r0, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3aa6:	f892 c000 	ldrb.w	ip, [r2]
    3aaa:	f1be 0f00 	cmp.w	lr, #0
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    3aae:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3ab2:	bfb4      	ite	lt
    3ab4:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3ab8:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    3abc:	b2c0      	uxtb	r0, r0
    3abe:	700b      	strb	r3, [r1, #0]
    3ac0:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3ac2:	f7ff fa3f 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2A].length);
    3ac6:	4a06      	ldr	r2, [pc, #24]	; (3ae0 <opcode_0x2A()+0x54>)
    3ac8:	8823      	ldrh	r3, [r4, #0]
    3aca:	f892 08b9 	ldrb.w	r0, [r2, #2233]	; 0x8b9
    3ace:	4418      	add	r0, r3
}
    3ad0:	b280      	uxth	r0, r0
    3ad2:	bd10      	pop	{r4, pc}
    3ad4:	20018890 	.word	0x20018890
    3ad8:	20004aa0 	.word	0x20004aa0
    3adc:	200188ac 	.word	0x200188ac
    3ae0:	20015418 	.word	0x20015418

00003ae4 <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    3ae4:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    3ae6:	4c2f      	ldr	r4, [pc, #188]	; (3ba4 <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3ae8:	492f      	ldr	r1, [pc, #188]	; (3ba8 <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    3aea:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3aec:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    3af0:	0716      	lsls	r6, r2, #28
    3af2:	d532      	bpl.n	3b5a <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3af4:	f002 0e01 	and.w	lr, r2, #1
    3af8:	f00c 030f 	and.w	r3, ip, #15
    3afc:	f000 050f 	and.w	r5, r0, #15
    3b00:	4473      	add	r3, lr
    3b02:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    3b04:	2b09      	cmp	r3, #9
    3b06:	d823      	bhi.n	3b50 <Calculate_ADC(unsigned short)+0x6c>
    3b08:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    3b0c:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    3b10:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3b14:	4435      	add	r5, r6
    3b16:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3b18:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    3b1c:	d838      	bhi.n	3b90 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3b1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3b22:	4473      	add	r3, lr
    3b24:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3b26:	fa4f fc8c 	sxtb.w	ip, ip
    3b2a:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b2e:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    3b32:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b34:	db20      	blt.n	3b78 <Calculate_ADC(unsigned short)+0x94>
    3b36:	f1be 0f00 	cmp.w	lr, #0
    3b3a:	db1a      	blt.n	3b72 <Calculate_ADC(unsigned short)+0x8e>
    3b3c:	061d      	lsls	r5, r3, #24
    3b3e:	d41f      	bmi.n	3b80 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3b40:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    3b44:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b46:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b4c:	f7ff b9fa 	b.w	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3b50:	3b0a      	subs	r3, #10
    3b52:	f04f 0e10 	mov.w	lr, #16
    3b56:	b29b      	uxth	r3, r3
    3b58:	e7d8      	b.n	3b0c <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    3b5a:	f002 0301 	and.w	r3, r2, #1
    3b5e:	4403      	add	r3, r0
    3b60:	4463      	add	r3, ip
    3b62:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3b64:	2bff      	cmp	r3, #255	; 0xff
    3b66:	bf8c      	ite	hi
    3b68:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3b6c:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3b70:	e7d9      	b.n	3b26 <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    3b72:	f1bc 0f00 	cmp.w	ip, #0
    3b76:	dae3      	bge.n	3b40 <Calculate_ADC(unsigned short)+0x5c>
    3b78:	ea63 030e 	orn	r3, r3, lr
    3b7c:	061b      	lsls	r3, r3, #24
    3b7e:	d4df      	bmi.n	3b40 <Calculate_ADC(unsigned short)+0x5c>
    3b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    3b84:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3b86:	7022      	strb	r2, [r4, #0]
}
    3b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b8c:	f7ff b9da 	b.w	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    3b90:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3b94:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    3b98:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    3b9c:	f042 0201 	orr.w	r2, r2, #1
    3ba0:	e7bf      	b.n	3b22 <Calculate_ADC(unsigned short)+0x3e>
    3ba2:	bf00      	nop
    3ba4:	20004aa0 	.word	0x20004aa0
    3ba8:	200188ac 	.word	0x200188ac

00003bac <Calculate_SBC(unsigned short)>:
} // 0x71 - ADC - Indirect Indexed  Y

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    3bac:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    3bae:	4c32      	ldr	r4, [pc, #200]	; (3c78 <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3bb0:	4932      	ldr	r1, [pc, #200]	; (3c7c <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    3bb2:	7823      	ldrb	r3, [r4, #0]
    3bb4:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    3bb6:	071e      	lsls	r6, r3, #28
    3bb8:	f002 0201 	and.w	r2, r2, #1
    3bbc:	d539      	bpl.n	3c32 <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3bbe:	f000 0c0f 	and.w	ip, r0, #15
    3bc2:	f891 e000 	ldrb.w	lr, [r1]
    3bc6:	4462      	add	r2, ip
    3bc8:	f00e 0c0f 	and.w	ip, lr, #15
    3bcc:	ebac 0c02 	sub.w	ip, ip, r2
    3bd0:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3bd4:	f1bc 0f09 	cmp.w	ip, #9
    3bd8:	d825      	bhi.n	3c26 <Calculate_SBC(unsigned short)+0x7a>
    3bda:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3bdc:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    3be0:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3be4:	1b92      	subs	r2, r2, r6
    3be6:	1b52      	subs	r2, r2, r5
    3be8:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3bea:	2a90      	cmp	r2, #144	; 0x90
    3bec:	d83f      	bhi.n	3c6e <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3bee:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    3bf2:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3bf6:	4494      	add	ip, r2
    3bf8:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3bfc:	fa4f fe8e 	sxtb.w	lr, lr
    3c00:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c02:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    3c06:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c0a:	db24      	blt.n	3c56 <Calculate_SBC(unsigned short)+0xaa>
    3c0c:	2a00      	cmp	r2, #0
    3c0e:	da1f      	bge.n	3c50 <Calculate_SBC(unsigned short)+0xa4>
    3c10:	f01c 0f80 	tst.w	ip, #128	; 0x80
    3c14:	d123      	bne.n	3c5e <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3c16:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3c1a:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c1c:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3c22:	f7ff b98f 	b.w	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    3c26:	f10c 0c0a 	add.w	ip, ip, #10
    3c2a:	2510      	movs	r5, #16
    3c2c:	fa1f fc8c 	uxth.w	ip, ip
    3c30:	e7d4      	b.n	3bdc <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    3c32:	f891 e000 	ldrb.w	lr, [r1]
    3c36:	ebae 0c00 	sub.w	ip, lr, r0
    3c3a:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3c3e:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    3c40:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3c44:	bf54      	ite	pl
    3c46:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    3c4a:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3c4e:	e7d5      	b.n	3bfc <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3c50:	f1be 0f00 	cmp.w	lr, #0
    3c54:	dadf      	bge.n	3c16 <Calculate_SBC(unsigned short)+0x6a>
    3c56:	ea42 020c 	orr.w	r2, r2, ip
    3c5a:	0612      	lsls	r2, r2, #24
    3c5c:	d4db      	bmi.n	3c16 <Calculate_SBC(unsigned short)+0x6a>
    3c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    3c62:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c64:	7023      	strb	r3, [r4, #0]
}
    3c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3c6a:	f7ff b96b 	b.w	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3c6e:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3c70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    3c74:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    3c76:	e7be      	b.n	3bf6 <Calculate_SBC(unsigned short)+0x4a>
    3c78:	20004aa0 	.word	0x20004aa0
    3c7c:	200188ac 	.word	0x200188ac

00003c80 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3c80:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3c82:	4c08      	ldr	r4, [pc, #32]	; (3ca4 <opcode_0xE9()+0x24>)
    3c84:	2100      	movs	r1, #0
    3c86:	8820      	ldrh	r0, [r4, #0]
    3c88:	3001      	adds	r0, #1
    3c8a:	b280      	uxth	r0, r0
    3c8c:	f7fe fe92 	bl	29b4 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    3c90:	b280      	uxth	r0, r0
    3c92:	f7ff ff8b 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    3c96:	4a04      	ldr	r2, [pc, #16]	; (3ca8 <opcode_0xE9()+0x28>)
    3c98:	8823      	ldrh	r3, [r4, #0]
    3c9a:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3c9e:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3ca0:	b280      	uxth	r0, r0
    3ca2:	bd10      	pop	{r4, pc}
    3ca4:	20018890 	.word	0x20018890
    3ca8:	20017418 	.word	0x20017418

00003cac <opcode_0xEA()>:
} // 0xF1 - SBC - Indirect Indexed  Y

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3cac:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3cae:	4c07      	ldr	r4, [pc, #28]	; (3ccc <opcode_0xEA()+0x20>)
    3cb0:	2100      	movs	r1, #0
    3cb2:	8820      	ldrh	r0, [r4, #0]
    3cb4:	3001      	adds	r0, #1
    3cb6:	b280      	uxth	r0, r0
    3cb8:	f7fe fe7c 	bl	29b4 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3cbc:	4a04      	ldr	r2, [pc, #16]	; (3cd0 <opcode_0xEA()+0x24>)
    3cbe:	8823      	ldrh	r3, [r4, #0]
    3cc0:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3cc4:	4418      	add	r0, r3
} // 0xEA - NOP   
    3cc6:	b280      	uxth	r0, r0
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	bf00      	nop
    3ccc:	20018890 	.word	0x20018890
    3cd0:	20017418 	.word	0x20017418

00003cd4 <opcode_0x08()>:
} // 0x98 - TYA - Transfer Y to Accumulator

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    3cd4:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3cd6:	4d0d      	ldr	r5, [pc, #52]	; (3d0c <opcode_0x08()+0x38>)
    3cd8:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3cda:	4c0d      	ldr	r4, [pc, #52]	; (3d10 <opcode_0x08()+0x3c>)
    3cdc:	8828      	ldrh	r0, [r5, #0]
    3cde:	3001      	adds	r0, #1
    3ce0:	b280      	uxth	r0, r0
    3ce2:	f7fe fe67 	bl	29b4 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    3ce6:	4b0b      	ldr	r3, [pc, #44]	; (3d14 <opcode_0x08()+0x40>)
    3ce8:	7820      	ldrb	r0, [r4, #0]
    3cea:	7819      	ldrb	r1, [r3, #0]
    3cec:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3cf0:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    3cf4:	f7ff f81a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    3cf8:	4907      	ldr	r1, [pc, #28]	; (3d18 <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    3cfa:	7823      	ldrb	r3, [r4, #0]
    3cfc:	882a      	ldrh	r2, [r5, #0]
    3cfe:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    3d02:	3b01      	subs	r3, #1
    3d04:	4410      	add	r0, r2
    3d06:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    3d08:	b280      	uxth	r0, r0
    3d0a:	bd38      	pop	{r3, r4, r5, pc}
    3d0c:	20018890 	.word	0x20018890
    3d10:	20004aa1 	.word	0x20004aa1
    3d14:	20004aa0 	.word	0x20004aa0
    3d18:	20015418 	.word	0x20015418

00003d1c <opcode_0x48()>:
uint16_t opcode_0x48() {
    3d1c:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3d1e:	4d0c      	ldr	r5, [pc, #48]	; (3d50 <opcode_0x48()+0x34>)
    3d20:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3d22:	4c0c      	ldr	r4, [pc, #48]	; (3d54 <opcode_0x48()+0x38>)
    3d24:	8828      	ldrh	r0, [r5, #0]
    3d26:	3001      	adds	r0, #1
    3d28:	b280      	uxth	r0, r0
    3d2a:	f7fe fe43 	bl	29b4 <read_byte(unsigned short, bool)>
    3d2e:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    3d30:	4b09      	ldr	r3, [pc, #36]	; (3d58 <opcode_0x48()+0x3c>)
    3d32:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3d36:	7819      	ldrb	r1, [r3, #0]
    3d38:	f7fe fff8 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    3d3c:	4907      	ldr	r1, [pc, #28]	; (3d5c <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    3d3e:	7823      	ldrb	r3, [r4, #0]
    3d40:	882a      	ldrh	r2, [r5, #0]
    3d42:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    3d46:	3b01      	subs	r3, #1
    3d48:	4410      	add	r0, r2
    3d4a:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    3d4c:	b280      	uxth	r0, r0
    3d4e:	bd38      	pop	{r3, r4, r5, pc}
    3d50:	20018890 	.word	0x20018890
    3d54:	20004aa1 	.word	0x20004aa1
    3d58:	200188ac 	.word	0x200188ac
    3d5c:	20015418 	.word	0x20015418

00003d60 <opcode_0x28()>:
uint16_t opcode_0x28() {
    3d60:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3d62:	4d11      	ldr	r5, [pc, #68]	; (3da8 <opcode_0x28()+0x48>)
    3d64:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3d66:	4c11      	ldr	r4, [pc, #68]	; (3dac <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    3d68:	8828      	ldrh	r0, [r5, #0]
    3d6a:	3001      	adds	r0, #1
    3d6c:	b280      	uxth	r0, r0
    3d6e:	f7fe fe21 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3d72:	7820      	ldrb	r0, [r4, #0]
    3d74:	2100      	movs	r1, #0
    3d76:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3d7a:	f7fe fe1b 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3d7e:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3d80:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3d82:	3301      	adds	r3, #1
    3d84:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3d86:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3d8a:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3d8c:	f7fe fe12 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    3d90:	4b07      	ldr	r3, [pc, #28]	; (3db0 <opcode_0x28()+0x50>)
    3d92:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    3d94:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3d98:	4906      	ldr	r1, [pc, #24]	; (3db4 <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    3d9a:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    3d9e:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    3da0:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    3da2:	b280      	uxth	r0, r0
    3da4:	bd38      	pop	{r3, r4, r5, pc}
    3da6:	bf00      	nop
    3da8:	20018890 	.word	0x20018890
    3dac:	20004aa1 	.word	0x20004aa1
    3db0:	20015418 	.word	0x20015418
    3db4:	20004aa0 	.word	0x20004aa0

00003db8 <opcode_0x68()>:
uint16_t opcode_0x68() {
    3db8:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3dba:	4d11      	ldr	r5, [pc, #68]	; (3e00 <opcode_0x68()+0x48>)
    3dbc:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3dbe:	4c11      	ldr	r4, [pc, #68]	; (3e04 <opcode_0x68()+0x4c>)
    read_byte(register_pc+1, false);
    3dc0:	8828      	ldrh	r0, [r5, #0]
    3dc2:	3001      	adds	r0, #1
    3dc4:	b280      	uxth	r0, r0
    3dc6:	f7fe fdf5 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3dca:	7820      	ldrb	r0, [r4, #0]
    3dcc:	2100      	movs	r1, #0
    3dce:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3dd2:	f7fe fdef 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3dd6:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3dd8:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3dda:	3301      	adds	r3, #1
    3ddc:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3dde:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3de2:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3de4:	f7fe fde6 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = pop();
    3de8:	4b07      	ldr	r3, [pc, #28]	; (3e08 <opcode_0x68()+0x50>)
    3dea:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3dec:	f7ff f8aa 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    3df0:	4a06      	ldr	r2, [pc, #24]	; (3e0c <opcode_0x68()+0x54>)
    3df2:	882b      	ldrh	r3, [r5, #0]
    3df4:	f892 0551 	ldrb.w	r0, [r2, #1361]	; 0x551
    3df8:	4418      	add	r0, r3
} // 0x68 - PLA - Pop Accumulator from Stack
    3dfa:	b280      	uxth	r0, r0
    3dfc:	bd38      	pop	{r3, r4, r5, pc}
    3dfe:	bf00      	nop
    3e00:	20018890 	.word	0x20018890
    3e04:	20004aa1 	.word	0x20004aa1
    3e08:	200188ac 	.word	0x200188ac
    3e0c:	20016418 	.word	0x20016418

00003e10 <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
uint16_t opcode_0x29() {
    3e10:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3e12:	4c0a      	ldr	r4, [pc, #40]	; (3e3c <opcode_0x29()+0x2c>)
    3e14:	2100      	movs	r1, #0
    3e16:	8820      	ldrh	r0, [r4, #0]
    3e18:	3001      	adds	r0, #1
    3e1a:	b280      	uxth	r0, r0
    3e1c:	f7fe fdca 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    3e20:	4b07      	ldr	r3, [pc, #28]	; (3e40 <opcode_0x29()+0x30>)
    3e22:	781a      	ldrb	r2, [r3, #0]
    3e24:	4010      	ands	r0, r2
    3e26:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e28:	f7ff f88c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x29].length);
    3e2c:	4a05      	ldr	r2, [pc, #20]	; (3e44 <opcode_0x29()+0x34>)
    3e2e:	8823      	ldrh	r3, [r4, #0]
    3e30:	f892 0885 	ldrb.w	r0, [r2, #2181]	; 0x885
    3e34:	4418      	add	r0, r3
} // 0x29 - AND - Immediate
    3e36:	b280      	uxth	r0, r0
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	bf00      	nop
    3e3c:	20018890 	.word	0x20018890
    3e40:	200188ac 	.word	0x200188ac
    3e44:	20015418 	.word	0x20015418

00003e48 <opcode_0x09()>:
} // 0x31 - AND - Indirect Indexed  Y

// -------------------------------------------------
// ORA
// -------------------------------------------------
uint16_t opcode_0x09() {
    3e48:	b510      	push	{r4, lr}
    3e4a:	4c0a      	ldr	r4, [pc, #40]	; (3e74 <opcode_0x09()+0x2c>)
    3e4c:	2100      	movs	r1, #0
    3e4e:	8820      	ldrh	r0, [r4, #0]
    3e50:	3001      	adds	r0, #1
    3e52:	b280      	uxth	r0, r0
    3e54:	f7fe fdae 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    3e58:	4b07      	ldr	r3, [pc, #28]	; (3e78 <opcode_0x09()+0x30>)
    3e5a:	781a      	ldrb	r2, [r3, #0]
    3e5c:	4310      	orrs	r0, r2
    3e5e:	b2c0      	uxtb	r0, r0
    3e60:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e62:	f7ff f86f 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x09].length);
    3e66:	4a05      	ldr	r2, [pc, #20]	; (3e7c <opcode_0x09()+0x34>)
    3e68:	8823      	ldrh	r3, [r4, #0]
    3e6a:	f892 0205 	ldrb.w	r0, [r2, #517]	; 0x205
    3e6e:	4418      	add	r0, r3
} // 0x09 - OR - Immediate
    3e70:	b280      	uxth	r0, r0
    3e72:	bd10      	pop	{r4, pc}
    3e74:	20018890 	.word	0x20018890
    3e78:	200188ac 	.word	0x200188ac
    3e7c:	20015418 	.word	0x20015418

00003e80 <opcode_0x49()>:
} // 0x11 - OR - Indirect Indexed  Y

// -------------------------------------------------
// EOR
// -------------------------------------------------
uint16_t opcode_0x49() {
    3e80:	b510      	push	{r4, lr}
    3e82:	4c0a      	ldr	r4, [pc, #40]	; (3eac <opcode_0x49()+0x2c>)
    3e84:	2100      	movs	r1, #0
    3e86:	8820      	ldrh	r0, [r4, #0]
    3e88:	3001      	adds	r0, #1
    3e8a:	b280      	uxth	r0, r0
    3e8c:	f7fe fd92 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    3e90:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <opcode_0x49()+0x30>)
    3e92:	781a      	ldrb	r2, [r3, #0]
    3e94:	4050      	eors	r0, r2
    3e96:	b2c0      	uxtb	r0, r0
    3e98:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e9a:	f7ff f853 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x49].length);
    3e9e:	4a05      	ldr	r2, [pc, #20]	; (3eb4 <opcode_0x49()+0x34>)
    3ea0:	8823      	ldrh	r3, [r4, #0]
    3ea2:	f892 0f05 	ldrb.w	r0, [r2, #3845]	; 0xf05
    3ea6:	4418      	add	r0, r3
} // 0x49 - EOR - Immediate
    3ea8:	b280      	uxth	r0, r0
    3eaa:	bd10      	pop	{r4, pc}
    3eac:	20018890 	.word	0x20018890
    3eb0:	200188ac 	.word	0x200188ac
    3eb4:	20015418 	.word	0x20015418

00003eb8 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    3eb8:	b510      	push	{r4, lr}
    3eba:	4c12      	ldr	r4, [pc, #72]	; (3f04 <opcode_0x24()+0x4c>)
    3ebc:	2100      	movs	r1, #0
    3ebe:	8820      	ldrh	r0, [r4, #0]
    3ec0:	3001      	adds	r0, #1
    3ec2:	b280      	uxth	r0, r0
    3ec4:	f7fe fd76 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3ec8:	4b0f      	ldr	r3, [pc, #60]	; (3f08 <opcode_0x24()+0x50>)
    3eca:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3ecc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3ece:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3ed0:	f7fe fd70 	bl	29b4 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3ed4:	490d      	ldr	r1, [pc, #52]	; (3f0c <opcode_0x24()+0x54>)
    3ed6:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3eda:	780a      	ldrb	r2, [r1, #0]
    3edc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3ee0:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    3ee2:	4a0b      	ldr	r2, [pc, #44]	; (3f10 <opcode_0x24()+0x58>)
    3ee4:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ee6:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    3ee8:	480a      	ldr	r0, [pc, #40]	; (3f14 <opcode_0x24()+0x5c>)
    3eea:	8822      	ldrh	r2, [r4, #0]
    3eec:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ef0:	bf0c      	ite	eq
    3ef2:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3ef6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    3efa:	4410      	add	r0, r2
    3efc:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    3efe:	b280      	uxth	r0, r0
    3f00:	bd10      	pop	{r4, pc}
    3f02:	bf00      	nop
    3f04:	20018890 	.word	0x20018890
    3f08:	2001888e 	.word	0x2001888e
    3f0c:	20004aa0 	.word	0x20004aa0
    3f10:	200188ac 	.word	0x200188ac
    3f14:	20015418 	.word	0x20015418

00003f18 <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    3f18:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    3f1a:	f7ff f887 	bl	302c <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f1e:	490d      	ldr	r1, [pc, #52]	; (3f54 <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    3f20:	4b0d      	ldr	r3, [pc, #52]	; (3f58 <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f22:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    3f24:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f28:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3f2c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f30:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    3f34:	4809      	ldr	r0, [pc, #36]	; (3f5c <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f36:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    3f3a:	4a09      	ldr	r2, [pc, #36]	; (3f60 <opcode_0x2C()+0x48>)
    3f3c:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f40:	bf0c      	ite	eq
    3f42:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f46:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    3f4a:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    3f4c:	8813      	ldrh	r3, [r2, #0]
    3f4e:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    3f50:	b280      	uxth	r0, r0
    3f52:	bd08      	pop	{r3, pc}
    3f54:	20004aa0 	.word	0x20004aa0
    3f58:	200188ac 	.word	0x200188ac
    3f5c:	20015418 	.word	0x20015418
    3f60:	20018890 	.word	0x20018890

00003f64 <Calculate_CMP(unsigned char)>:
void Calculate_CMP(uint8_t local_data) {
    int16_t temp = 0;

    Begin_Fetch_Next_Opcode();

    temp = register_a - local_data;
    3f64:	4b07      	ldr	r3, [pc, #28]	; (3f84 <Calculate_CMP(unsigned char)+0x20>)

    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f66:	4908      	ldr	r1, [pc, #32]	; (3f88 <Calculate_CMP(unsigned char)+0x24>)
    temp = register_a - local_data;
    3f68:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f6a:	780a      	ldrb	r2, [r1, #0]
    3f6c:	4283      	cmp	r3, r0
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    3f6e:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f72:	bf2c      	ite	cs
    3f74:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3f78:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3f7c:	b2c0      	uxtb	r0, r0
    3f7e:	700a      	strb	r2, [r1, #0]
    3f80:	f7fe bfe0 	b.w	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    3f84:	200188ac 	.word	0x200188ac
    3f88:	20004aa0 	.word	0x20004aa0

00003f8c <opcode_0xC9()>:
    return;
}
uint16_t opcode_0xC9() {
    3f8c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3f8e:	4c0f      	ldr	r4, [pc, #60]	; (3fcc <opcode_0xC9()+0x40>)
    3f90:	2100      	movs	r1, #0
    3f92:	8820      	ldrh	r0, [r4, #0]
    3f94:	3001      	adds	r0, #1
    3f96:	b280      	uxth	r0, r0
    3f98:	f7fe fd0c 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    3f9c:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <opcode_0xC9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3f9e:	490d      	ldr	r1, [pc, #52]	; (3fd4 <opcode_0xC9()+0x48>)
    temp = register_a - local_data;
    3fa0:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3fa2:	780a      	ldrb	r2, [r1, #0]
    3fa4:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3fa6:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3faa:	bf94      	ite	ls
    3fac:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    3fb0:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    3fb4:	b2c0      	uxtb	r0, r0
    3fb6:	700a      	strb	r2, [r1, #0]
    3fb8:	f7fe ffc4 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    3fbc:	4a06      	ldr	r2, [pc, #24]	; (3fd8 <opcode_0xC9()+0x4c>)
    3fbe:	8823      	ldrh	r3, [r4, #0]
    3fc0:	f892 0905 	ldrb.w	r0, [r2, #2309]	; 0x905
    3fc4:	4418      	add	r0, r3
} // 0xC9 - CMP - Immediate
    3fc6:	b280      	uxth	r0, r0
    3fc8:	bd10      	pop	{r4, pc}
    3fca:	bf00      	nop
    3fcc:	20018890 	.word	0x20018890
    3fd0:	200188ac 	.word	0x200188ac
    3fd4:	20004aa0 	.word	0x20004aa0
    3fd8:	20017418 	.word	0x20017418

00003fdc <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    3fdc:	b510      	push	{r4, lr}
    3fde:	4c0f      	ldr	r4, [pc, #60]	; (401c <opcode_0xE0()+0x40>)
    3fe0:	2100      	movs	r1, #0
    3fe2:	8820      	ldrh	r0, [r4, #0]
    3fe4:	3001      	adds	r0, #1
    3fe6:	b280      	uxth	r0, r0
    3fe8:	f7fe fce4 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    3fec:	4b0c      	ldr	r3, [pc, #48]	; (4020 <opcode_0xE0()+0x44>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3fee:	490d      	ldr	r1, [pc, #52]	; (4024 <opcode_0xE0()+0x48>)
    temp = register_x - local_data;
    3ff0:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ff2:	780a      	ldrb	r2, [r1, #0]
    3ff4:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    3ff6:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ffa:	bf94      	ite	ls
    3ffc:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4000:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4004:	b2c0      	uxtb	r0, r0
    4006:	700a      	strb	r2, [r1, #0]
    4008:	f7fe ff9c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    400c:	4a06      	ldr	r2, [pc, #24]	; (4028 <opcode_0xE0()+0x4c>)
    400e:	8823      	ldrh	r3, [r4, #0]
    4010:	f892 0db1 	ldrb.w	r0, [r2, #3505]	; 0xdb1
    4014:	4418      	add	r0, r3
} // 0xE0 - CPX - Immediate
    4016:	b280      	uxth	r0, r0
    4018:	bd10      	pop	{r4, pc}
    401a:	bf00      	nop
    401c:	20018890 	.word	0x20018890
    4020:	200188ad 	.word	0x200188ad
    4024:	20004aa0 	.word	0x20004aa0
    4028:	20017418 	.word	0x20017418

0000402c <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    402c:	b510      	push	{r4, lr}
    402e:	4c12      	ldr	r4, [pc, #72]	; (4078 <opcode_0xE4()+0x4c>)
    4030:	2100      	movs	r1, #0
    4032:	8820      	ldrh	r0, [r4, #0]
    4034:	3001      	adds	r0, #1
    4036:	b280      	uxth	r0, r0
    4038:	f7fe fcbc 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    403c:	4b0f      	ldr	r3, [pc, #60]	; (407c <opcode_0xE4()+0x50>)
    403e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4040:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4042:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4044:	f7fe fcb6 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    4048:	4b0d      	ldr	r3, [pc, #52]	; (4080 <opcode_0xE4()+0x54>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    404a:	490e      	ldr	r1, [pc, #56]	; (4084 <opcode_0xE4()+0x58>)
    temp = register_x - local_data;
    404c:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    404e:	780a      	ldrb	r2, [r1, #0]
    4050:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    4052:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4056:	bf2c      	ite	cs
    4058:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    405c:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4060:	b2c0      	uxtb	r0, r0
    4062:	700a      	strb	r2, [r1, #0]
    4064:	f7fe ff6e 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    4068:	4a07      	ldr	r2, [pc, #28]	; (4088 <opcode_0xE4()+0x5c>)
    406a:	8823      	ldrh	r3, [r4, #0]
    406c:	f892 0e81 	ldrb.w	r0, [r2, #3713]	; 0xe81
    4070:	4418      	add	r0, r3
} // 0xE4 - CPX - ZeroPage
    4072:	b280      	uxth	r0, r0
    4074:	bd10      	pop	{r4, pc}
    4076:	bf00      	nop
    4078:	20018890 	.word	0x20018890
    407c:	2001888e 	.word	0x2001888e
    4080:	200188ad 	.word	0x200188ad
    4084:	20004aa0 	.word	0x20004aa0
    4088:	20017418 	.word	0x20017418

0000408c <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    408c:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    408e:	f7fe ffcd 	bl	302c <Fetch_Absolute()>
    temp = register_x - local_data;
    4092:	4b0c      	ldr	r3, [pc, #48]	; (40c4 <opcode_0xEC()+0x38>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4094:	490c      	ldr	r1, [pc, #48]	; (40c8 <opcode_0xEC()+0x3c>)
    temp = register_x - local_data;
    4096:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4098:	780a      	ldrb	r2, [r1, #0]
    409a:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    409c:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40a0:	bf94      	ite	ls
    40a2:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    40a6:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    40aa:	b2c0      	uxtb	r0, r0
    40ac:	700a      	strb	r2, [r1, #0]
    40ae:	f7fe ff49 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xEC].length);
    40b2:	4a06      	ldr	r2, [pc, #24]	; (40cc <opcode_0xEC()+0x40>)
    40b4:	4b06      	ldr	r3, [pc, #24]	; (40d0 <opcode_0xEC()+0x44>)
    40b6:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
    40ba:	881b      	ldrh	r3, [r3, #0]
    40bc:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    40be:	b280      	uxth	r0, r0
    40c0:	bd08      	pop	{r3, pc}
    40c2:	bf00      	nop
    40c4:	200188ad 	.word	0x200188ad
    40c8:	20004aa0 	.word	0x20004aa0
    40cc:	20018418 	.word	0x20018418
    40d0:	20018890 	.word	0x20018890

000040d4 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    40d4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    40d6:	4c0f      	ldr	r4, [pc, #60]	; (4114 <opcode_0xC0()+0x40>)
    40d8:	2100      	movs	r1, #0
    40da:	8820      	ldrh	r0, [r4, #0]
    40dc:	3001      	adds	r0, #1
    40de:	b280      	uxth	r0, r0
    40e0:	f7fe fc68 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    40e4:	4b0c      	ldr	r3, [pc, #48]	; (4118 <opcode_0xC0()+0x44>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40e6:	490d      	ldr	r1, [pc, #52]	; (411c <opcode_0xC0()+0x48>)
    temp = register_y - local_data;
    40e8:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40ea:	780a      	ldrb	r2, [r1, #0]
    40ec:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    40ee:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40f2:	bf94      	ite	ls
    40f4:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    40f8:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    40fc:	b2c0      	uxtb	r0, r0
    40fe:	700a      	strb	r2, [r1, #0]
    4100:	f7fe ff20 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    4104:	4a06      	ldr	r2, [pc, #24]	; (4120 <opcode_0xC0()+0x4c>)
    4106:	8823      	ldrh	r3, [r4, #0]
    4108:	f892 0731 	ldrb.w	r0, [r2, #1841]	; 0x731
    410c:	4418      	add	r0, r3
} // 0xC0 - CPY - Immediate
    410e:	b280      	uxth	r0, r0
    4110:	bd10      	pop	{r4, pc}
    4112:	bf00      	nop
    4114:	20018890 	.word	0x20018890
    4118:	200188ae 	.word	0x200188ae
    411c:	20004aa0 	.word	0x20004aa0
    4120:	20017418 	.word	0x20017418

00004124 <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    4124:	b510      	push	{r4, lr}
    4126:	4c12      	ldr	r4, [pc, #72]	; (4170 <opcode_0xC4()+0x4c>)
    4128:	2100      	movs	r1, #0
    412a:	8820      	ldrh	r0, [r4, #0]
    412c:	3001      	adds	r0, #1
    412e:	b280      	uxth	r0, r0
    4130:	f7fe fc40 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4134:	4b0f      	ldr	r3, [pc, #60]	; (4174 <opcode_0xC4()+0x50>)
    4136:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4138:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    413a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    413c:	f7fe fc3a 	bl	29b4 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    4140:	4b0d      	ldr	r3, [pc, #52]	; (4178 <opcode_0xC4()+0x54>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4142:	490e      	ldr	r1, [pc, #56]	; (417c <opcode_0xC4()+0x58>)
    temp = register_y - local_data;
    4144:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4146:	780a      	ldrb	r2, [r1, #0]
    4148:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    414a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    414e:	bf2c      	ite	cs
    4150:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4154:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4158:	b2c0      	uxtb	r0, r0
    415a:	700a      	strb	r2, [r1, #0]
    415c:	f7fe fef2 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    4160:	4a07      	ldr	r2, [pc, #28]	; (4180 <opcode_0xC4()+0x5c>)
    4162:	8823      	ldrh	r3, [r4, #0]
    4164:	f892 0801 	ldrb.w	r0, [r2, #2049]	; 0x801
    4168:	4418      	add	r0, r3
} // 0xC4 - CPY - ZeroPage
    416a:	b280      	uxth	r0, r0
    416c:	bd10      	pop	{r4, pc}
    416e:	bf00      	nop
    4170:	20018890 	.word	0x20018890
    4174:	2001888e 	.word	0x2001888e
    4178:	200188ae 	.word	0x200188ae
    417c:	20004aa0 	.word	0x20004aa0
    4180:	20017418 	.word	0x20017418

00004184 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    4184:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    4186:	f7fe ff51 	bl	302c <Fetch_Absolute()>
    temp = register_y - local_data;
    418a:	4b0c      	ldr	r3, [pc, #48]	; (41bc <opcode_0xCC()+0x38>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    418c:	490c      	ldr	r1, [pc, #48]	; (41c0 <opcode_0xCC()+0x3c>)
    temp = register_y - local_data;
    418e:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4190:	780a      	ldrb	r2, [r1, #0]
    4192:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    4194:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4198:	bf94      	ite	ls
    419a:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    419e:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    41a2:	b2c0      	uxtb	r0, r0
    41a4:	700a      	strb	r2, [r1, #0]
    41a6:	f7fe fecd 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCC].length);
    41aa:	4a06      	ldr	r2, [pc, #24]	; (41c4 <opcode_0xCC()+0x40>)
    41ac:	4b06      	ldr	r3, [pc, #24]	; (41c8 <opcode_0xCC()+0x44>)
    41ae:	f892 09a1 	ldrb.w	r0, [r2, #2465]	; 0x9a1
    41b2:	881b      	ldrh	r3, [r3, #0]
    41b4:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    41b6:	b280      	uxth	r0, r0
    41b8:	bd08      	pop	{r3, pc}
    41ba:	bf00      	nop
    41bc:	200188ae 	.word	0x200188ae
    41c0:	20004aa0 	.word	0x20004aa0
    41c4:	20017418 	.word	0x20017418
    41c8:	20018890 	.word	0x20018890

000041cc <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    41cc:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    41ce:	4d17      	ldr	r5, [pc, #92]	; (422c <opcode_0x06()+0x60>)
    41d0:	b083      	sub	sp, #12
    41d2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41d4:	4c16      	ldr	r4, [pc, #88]	; (4230 <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    41d6:	8828      	ldrh	r0, [r5, #0]
    41d8:	3001      	adds	r0, #1
    41da:	b280      	uxth	r0, r0
    41dc:	f7fe fbea 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    41e0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41e2:	b280      	uxth	r0, r0
    41e4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    41e6:	f7fe fbe5 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41ea:	4a12      	ldr	r2, [pc, #72]	; (4234 <opcode_0x06()+0x68>)
    41ec:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    41ee:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41f2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    41f4:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    41f6:	bf4c      	ite	mi
    41f8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    41fc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4200:	4608      	mov	r0, r1
    4202:	9101      	str	r1, [sp, #4]
    4204:	7013      	strb	r3, [r2, #0]
    4206:	f7fe fe9d 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    420a:	9901      	ldr	r1, [sp, #4]
    420c:	8820      	ldrh	r0, [r4, #0]
    420e:	f7fe fd8d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4212:	8820      	ldrh	r0, [r4, #0]
    4214:	9901      	ldr	r1, [sp, #4]
    4216:	f7fe fd89 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    421a:	4a07      	ldr	r2, [pc, #28]	; (4238 <opcode_0x06()+0x6c>)
    421c:	882b      	ldrh	r3, [r5, #0]
    421e:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    4222:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    4224:	b280      	uxth	r0, r0
    4226:	b003      	add	sp, #12
    4228:	bd30      	pop	{r4, r5, pc}
    422a:	bf00      	nop
    422c:	20018890 	.word	0x20018890
    4230:	2001888e 	.word	0x2001888e
    4234:	20004aa0 	.word	0x20004aa0
    4238:	20015418 	.word	0x20015418

0000423c <opcode_0x16()>:
uint16_t opcode_0x16() {
    423c:	b510      	push	{r4, lr}
    423e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4240:	4c11      	ldr	r4, [pc, #68]	; (4288 <opcode_0x16()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    4242:	f7fe feb3 	bl	2fac <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4246:	4a11      	ldr	r2, [pc, #68]	; (428c <opcode_0x16()+0x50>)
    4248:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    424a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    424e:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4250:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4252:	bf4c      	ite	mi
    4254:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4258:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    425c:	4608      	mov	r0, r1
    425e:	9101      	str	r1, [sp, #4]
    4260:	7013      	strb	r3, [r2, #0]
    4262:	f7fe fe6f 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4266:	8820      	ldrh	r0, [r4, #0]
    4268:	9901      	ldr	r1, [sp, #4]
    426a:	f7fe fd5f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    426e:	8820      	ldrh	r0, [r4, #0]
    4270:	9901      	ldr	r1, [sp, #4]
    4272:	f7fe fd5b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    4276:	4a06      	ldr	r2, [pc, #24]	; (4290 <opcode_0x16()+0x54>)
    4278:	4b06      	ldr	r3, [pc, #24]	; (4294 <opcode_0x16()+0x58>)
    427a:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    427e:	881b      	ldrh	r3, [r3, #0]
    4280:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    4282:	b280      	uxth	r0, r0
    4284:	b002      	add	sp, #8
    4286:	bd10      	pop	{r4, pc}
    4288:	2001888e 	.word	0x2001888e
    428c:	20004aa0 	.word	0x20004aa0
    4290:	20015418 	.word	0x20015418
    4294:	20018890 	.word	0x20018890

00004298 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    4298:	b510      	push	{r4, lr}
    429a:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    429c:	4c11      	ldr	r4, [pc, #68]	; (42e4 <opcode_0x0E()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    429e:	f7fe fec5 	bl	302c <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42a2:	4a11      	ldr	r2, [pc, #68]	; (42e8 <opcode_0x0E()+0x50>)
    42a4:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    42a6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42aa:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    42ac:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42ae:	bf4c      	ite	mi
    42b0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42b4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    42b8:	4608      	mov	r0, r1
    42ba:	9101      	str	r1, [sp, #4]
    42bc:	7013      	strb	r3, [r2, #0]
    42be:	f7fe fe41 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    42c2:	8820      	ldrh	r0, [r4, #0]
    42c4:	9901      	ldr	r1, [sp, #4]
    42c6:	f7fe fd31 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    42ca:	8820      	ldrh	r0, [r4, #0]
    42cc:	9901      	ldr	r1, [sp, #4]
    42ce:	f7fe fd2d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    42d2:	4a06      	ldr	r2, [pc, #24]	; (42ec <opcode_0x0E()+0x54>)
    42d4:	4b06      	ldr	r3, [pc, #24]	; (42f0 <opcode_0x0E()+0x58>)
    42d6:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    42da:	881b      	ldrh	r3, [r3, #0]
    42dc:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    42de:	b280      	uxth	r0, r0
    42e0:	b002      	add	sp, #8
    42e2:	bd10      	pop	{r4, pc}
    42e4:	2001888e 	.word	0x2001888e
    42e8:	20004aa0 	.word	0x20004aa0
    42ec:	20015418 	.word	0x20015418
    42f0:	20018890 	.word	0x20018890

000042f4 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    42f4:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    42f6:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    42f8:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    42fa:	f7fe feb3 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42fe:	4a11      	ldr	r2, [pc, #68]	; (4344 <opcode_0x1E()+0x50>)
    4300:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4302:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4306:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4308:	b2c9      	uxtb	r1, r1
    write_byte(effective_address, local_data);
    430a:	4c0f      	ldr	r4, [pc, #60]	; (4348 <opcode_0x1E()+0x54>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    430c:	bf4c      	ite	mi
    430e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4312:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4316:	4608      	mov	r0, r1
    4318:	9101      	str	r1, [sp, #4]
    431a:	7013      	strb	r3, [r2, #0]
    431c:	f7fe fe12 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4320:	8820      	ldrh	r0, [r4, #0]
    4322:	9901      	ldr	r1, [sp, #4]
    4324:	f7fe fd02 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4328:	8820      	ldrh	r0, [r4, #0]
    432a:	9901      	ldr	r1, [sp, #4]
    432c:	f7fe fcfe 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    4330:	4a06      	ldr	r2, [pc, #24]	; (434c <opcode_0x1E()+0x58>)
    4332:	4b07      	ldr	r3, [pc, #28]	; (4350 <opcode_0x1E()+0x5c>)
    4334:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    4338:	881b      	ldrh	r3, [r3, #0]
    433a:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    433c:	b280      	uxth	r0, r0
    433e:	b002      	add	sp, #8
    4340:	bd10      	pop	{r4, pc}
    4342:	bf00      	nop
    4344:	20004aa0 	.word	0x20004aa0
    4348:	2001888e 	.word	0x2001888e
    434c:	20015418 	.word	0x20015418
    4350:	20018890 	.word	0x20018890

00004354 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    4354:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4356:	4e11      	ldr	r6, [pc, #68]	; (439c <opcode_0xE6()+0x48>)
    4358:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    435a:	4d11      	ldr	r5, [pc, #68]	; (43a0 <opcode_0xE6()+0x4c>)
    return read_byte(register_pc+offset, false);
    435c:	8830      	ldrh	r0, [r6, #0]
    435e:	3001      	adds	r0, #1
    4360:	b280      	uxth	r0, r0
    4362:	f7fe fb27 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4366:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4368:	b280      	uxth	r0, r0
    436a:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    436c:	f7fe fb22 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    4370:	3001      	adds	r0, #1
    global_temp = local_data;
    4372:	4b0c      	ldr	r3, [pc, #48]	; (43a4 <opcode_0xE6()+0x50>)
    local_data = local_data + 1;
    4374:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4376:	4620      	mov	r0, r4
    global_temp = local_data;
    4378:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    437a:	f7fe fde3 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    437e:	4621      	mov	r1, r4
    4380:	8828      	ldrh	r0, [r5, #0]
    4382:	f7fe fcd3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4386:	8828      	ldrh	r0, [r5, #0]
    4388:	4621      	mov	r1, r4
    438a:	f7fe fccf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    438e:	4a06      	ldr	r2, [pc, #24]	; (43a8 <opcode_0xE6()+0x54>)
    4390:	8833      	ldrh	r3, [r6, #0]
    4392:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    4396:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    4398:	b280      	uxth	r0, r0
    439a:	bd70      	pop	{r4, r5, r6, pc}
    439c:	20018890 	.word	0x20018890
    43a0:	2001888e 	.word	0x2001888e
    43a4:	200188a8 	.word	0x200188a8
    43a8:	20017418 	.word	0x20017418

000043ac <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    43ac:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    43ae:	f7fe fdfd 	bl	2fac <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    43b2:	3001      	adds	r0, #1
    global_temp = local_data;
    43b4:	4b0b      	ldr	r3, [pc, #44]	; (43e4 <opcode_0xF6()+0x38>)
    local_data = local_data + 1;
    43b6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    43b8:	4d0b      	ldr	r5, [pc, #44]	; (43e8 <opcode_0xF6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43ba:	4620      	mov	r0, r4
    global_temp = local_data;
    43bc:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43be:	f7fe fdc1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    43c2:	8828      	ldrh	r0, [r5, #0]
    43c4:	4621      	mov	r1, r4
    43c6:	f7fe fcb1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43ca:	8828      	ldrh	r0, [r5, #0]
    43cc:	4621      	mov	r1, r4
    43ce:	f7fe fcad 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    43d2:	4a06      	ldr	r2, [pc, #24]	; (43ec <opcode_0xF6()+0x40>)
    43d4:	4b06      	ldr	r3, [pc, #24]	; (43f0 <opcode_0xF6()+0x44>)
    43d6:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    43da:	881b      	ldrh	r3, [r3, #0]
    43dc:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    43de:	b280      	uxth	r0, r0
    43e0:	bd38      	pop	{r3, r4, r5, pc}
    43e2:	bf00      	nop
    43e4:	200188a8 	.word	0x200188a8
    43e8:	2001888e 	.word	0x2001888e
    43ec:	20018418 	.word	0x20018418
    43f0:	20018890 	.word	0x20018890

000043f4 <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    43f4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    43f6:	f7fe fe19 	bl	302c <Fetch_Absolute()>
    local_data = local_data + 1;
    43fa:	3001      	adds	r0, #1
    global_temp = local_data;
    43fc:	4b0b      	ldr	r3, [pc, #44]	; (442c <opcode_0xEE()+0x38>)
    local_data = local_data + 1;
    43fe:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    4400:	4d0b      	ldr	r5, [pc, #44]	; (4430 <opcode_0xEE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4402:	4620      	mov	r0, r4
    global_temp = local_data;
    4404:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4406:	f7fe fd9d 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    440a:	8828      	ldrh	r0, [r5, #0]
    440c:	4621      	mov	r1, r4
    440e:	f7fe fc8d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4412:	8828      	ldrh	r0, [r5, #0]
    4414:	4621      	mov	r1, r4
    4416:	f7fe fc89 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    441a:	4a06      	ldr	r2, [pc, #24]	; (4434 <opcode_0xEE()+0x40>)
    441c:	4b06      	ldr	r3, [pc, #24]	; (4438 <opcode_0xEE()+0x44>)
    441e:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    4422:	881b      	ldrh	r3, [r3, #0]
    4424:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    4426:	b280      	uxth	r0, r0
    4428:	bd38      	pop	{r3, r4, r5, pc}
    442a:	bf00      	nop
    442c:	200188a8 	.word	0x200188a8
    4430:	2001888e 	.word	0x2001888e
    4434:	20018418 	.word	0x20018418
    4438:	20018890 	.word	0x20018890

0000443c <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    443c:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    443e:	4e11      	ldr	r6, [pc, #68]	; (4484 <opcode_0xC6()+0x48>)
    4440:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4442:	4d11      	ldr	r5, [pc, #68]	; (4488 <opcode_0xC6()+0x4c>)
    return read_byte(register_pc+offset, false);
    4444:	8830      	ldrh	r0, [r6, #0]
    4446:	3001      	adds	r0, #1
    4448:	b280      	uxth	r0, r0
    444a:	f7fe fab3 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    444e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4450:	b280      	uxth	r0, r0
    4452:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    4454:	f7fe faae 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    4458:	3801      	subs	r0, #1
    global_temp = local_data;
    445a:	4b0c      	ldr	r3, [pc, #48]	; (448c <opcode_0xC6()+0x50>)
    local_data = local_data - 1;
    445c:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    445e:	4620      	mov	r0, r4
    global_temp = local_data;
    4460:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4462:	f7fe fd6f 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4466:	4621      	mov	r1, r4
    4468:	8828      	ldrh	r0, [r5, #0]
    446a:	f7fe fc5f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    446e:	8828      	ldrh	r0, [r5, #0]
    4470:	4621      	mov	r1, r4
    4472:	f7fe fc5b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    4476:	4a06      	ldr	r2, [pc, #24]	; (4490 <opcode_0xC6()+0x54>)
    4478:	8833      	ldrh	r3, [r6, #0]
    447a:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    447e:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    4480:	b280      	uxth	r0, r0
    4482:	bd70      	pop	{r4, r5, r6, pc}
    4484:	20018890 	.word	0x20018890
    4488:	2001888e 	.word	0x2001888e
    448c:	200188a8 	.word	0x200188a8
    4490:	20017418 	.word	0x20017418

00004494 <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    4494:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    4496:	f7fe fd89 	bl	2fac <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    449a:	3801      	subs	r0, #1
    global_temp = local_data;
    449c:	4b0b      	ldr	r3, [pc, #44]	; (44cc <opcode_0xD6()+0x38>)
    local_data = local_data - 1;
    449e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    44a0:	4d0b      	ldr	r5, [pc, #44]	; (44d0 <opcode_0xD6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44a2:	4620      	mov	r0, r4
    global_temp = local_data;
    44a4:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44a6:	f7fe fd4d 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    44aa:	8828      	ldrh	r0, [r5, #0]
    44ac:	4621      	mov	r1, r4
    44ae:	f7fe fc3d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44b2:	8828      	ldrh	r0, [r5, #0]
    44b4:	4621      	mov	r1, r4
    44b6:	f7fe fc39 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    44ba:	4a06      	ldr	r2, [pc, #24]	; (44d4 <opcode_0xD6()+0x40>)
    44bc:	4b06      	ldr	r3, [pc, #24]	; (44d8 <opcode_0xD6()+0x44>)
    44be:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    44c2:	881b      	ldrh	r3, [r3, #0]
    44c4:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    44c6:	b280      	uxth	r0, r0
    44c8:	bd38      	pop	{r3, r4, r5, pc}
    44ca:	bf00      	nop
    44cc:	200188a8 	.word	0x200188a8
    44d0:	2001888e 	.word	0x2001888e
    44d4:	20017418 	.word	0x20017418
    44d8:	20018890 	.word	0x20018890

000044dc <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    44dc:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    44de:	f7fe fda5 	bl	302c <Fetch_Absolute()>
    local_data = local_data - 1;
    44e2:	3801      	subs	r0, #1
    global_temp = local_data;
    44e4:	4b0b      	ldr	r3, [pc, #44]	; (4514 <opcode_0xCE()+0x38>)
    local_data = local_data - 1;
    44e6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    44e8:	4d0b      	ldr	r5, [pc, #44]	; (4518 <opcode_0xCE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44ea:	4620      	mov	r0, r4
    global_temp = local_data;
    44ec:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44ee:	f7fe fd29 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    44f2:	8828      	ldrh	r0, [r5, #0]
    44f4:	4621      	mov	r1, r4
    44f6:	f7fe fc19 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44fa:	8828      	ldrh	r0, [r5, #0]
    44fc:	4621      	mov	r1, r4
    44fe:	f7fe fc15 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    4502:	4a06      	ldr	r2, [pc, #24]	; (451c <opcode_0xCE()+0x40>)
    4504:	4b06      	ldr	r3, [pc, #24]	; (4520 <opcode_0xCE()+0x44>)
    4506:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    450a:	881b      	ldrh	r3, [r3, #0]
    450c:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    450e:	b280      	uxth	r0, r0
    4510:	bd38      	pop	{r3, r4, r5, pc}
    4512:	bf00      	nop
    4514:	200188a8 	.word	0x200188a8
    4518:	2001888e 	.word	0x2001888e
    451c:	20017418 	.word	0x20017418
    4520:	20018890 	.word	0x20018890

00004524 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    4524:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    4526:	2000      	movs	r0, #0
    write_byte(effective_address, local_data);
    4528:	4d0c      	ldr	r5, [pc, #48]	; (455c <opcode_0xDE()+0x38>)
    452a:	f7fe fd9b 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    452e:	3801      	subs	r0, #1
    global_temp = local_data;
    4530:	4b0b      	ldr	r3, [pc, #44]	; (4560 <opcode_0xDE()+0x3c>)
    local_data = local_data - 1;
    4532:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4534:	4620      	mov	r0, r4
    global_temp = local_data;
    4536:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4538:	f7fe fd04 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    453c:	8828      	ldrh	r0, [r5, #0]
    453e:	4621      	mov	r1, r4
    4540:	f7fe fbf4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4544:	8828      	ldrh	r0, [r5, #0]
    4546:	4621      	mov	r1, r4
    4548:	f7fe fbf0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    454c:	4a05      	ldr	r2, [pc, #20]	; (4564 <opcode_0xDE()+0x40>)
    454e:	4b06      	ldr	r3, [pc, #24]	; (4568 <opcode_0xDE()+0x44>)
    4550:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    4554:	881b      	ldrh	r3, [r3, #0]
    4556:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    4558:	b280      	uxth	r0, r0
    455a:	bd38      	pop	{r3, r4, r5, pc}
    455c:	2001888e 	.word	0x2001888e
    4560:	200188a8 	.word	0x200188a8
    4564:	20017418 	.word	0x20017418
    4568:	20018890 	.word	0x20018890

0000456c <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    456c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    456e:	4d16      	ldr	r5, [pc, #88]	; (45c8 <opcode_0x46()+0x5c>)
    4570:	b083      	sub	sp, #12
    4572:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4574:	4c15      	ldr	r4, [pc, #84]	; (45cc <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    4576:	8828      	ldrh	r0, [r5, #0]
    4578:	3001      	adds	r0, #1
    457a:	b280      	uxth	r0, r0
    457c:	f7fe fa1a 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4580:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4582:	b280      	uxth	r0, r0
    4584:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4586:	f7fe fa15 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    458a:	4a11      	ldr	r2, [pc, #68]	; (45d0 <opcode_0x46()+0x64>)
    458c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    458e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4592:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4594:	4608      	mov	r0, r1
    4596:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4598:	bf4c      	ite	mi
    459a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    459e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    45a2:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45a4:	f7fe fcce 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    45a8:	9901      	ldr	r1, [sp, #4]
    45aa:	8820      	ldrh	r0, [r4, #0]
    45ac:	f7fe fbbe 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45b0:	8820      	ldrh	r0, [r4, #0]
    45b2:	9901      	ldr	r1, [sp, #4]
    45b4:	f7fe fbba 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    45b8:	4a06      	ldr	r2, [pc, #24]	; (45d4 <opcode_0x46()+0x68>)
    45ba:	882b      	ldrh	r3, [r5, #0]
    45bc:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    45c0:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    45c2:	b280      	uxth	r0, r0
    45c4:	b003      	add	sp, #12
    45c6:	bd30      	pop	{r4, r5, pc}
    45c8:	20018890 	.word	0x20018890
    45cc:	2001888e 	.word	0x2001888e
    45d0:	20004aa0 	.word	0x20004aa0
    45d4:	20015418 	.word	0x20015418

000045d8 <opcode_0x56()>:
uint16_t opcode_0x56() {
    45d8:	b510      	push	{r4, lr}
    45da:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    45dc:	4c11      	ldr	r4, [pc, #68]	; (4624 <opcode_0x56()+0x4c>)
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    45de:	f7fe fce5 	bl	2fac <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45e2:	4a11      	ldr	r2, [pc, #68]	; (4628 <opcode_0x56()+0x50>)
    45e4:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    45e6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45ea:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45ec:	4608      	mov	r0, r1
    45ee:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    45f0:	bf4c      	ite	mi
    45f2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    45f6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    45fa:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45fc:	f7fe fca2 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4600:	8820      	ldrh	r0, [r4, #0]
    4602:	9901      	ldr	r1, [sp, #4]
    4604:	f7fe fb92 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4608:	8820      	ldrh	r0, [r4, #0]
    460a:	9901      	ldr	r1, [sp, #4]
    460c:	f7fe fb8e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    4610:	4a06      	ldr	r2, [pc, #24]	; (462c <opcode_0x56()+0x54>)
    4612:	4b07      	ldr	r3, [pc, #28]	; (4630 <opcode_0x56()+0x58>)
    4614:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    4618:	881b      	ldrh	r3, [r3, #0]
    461a:	4418      	add	r0, r3
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    461c:	b280      	uxth	r0, r0
    461e:	b002      	add	sp, #8
    4620:	bd10      	pop	{r4, pc}
    4622:	bf00      	nop
    4624:	2001888e 	.word	0x2001888e
    4628:	20004aa0 	.word	0x20004aa0
    462c:	20016418 	.word	0x20016418
    4630:	20018890 	.word	0x20018890

00004634 <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    4634:	b510      	push	{r4, lr}
    4636:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4638:	4c10      	ldr	r4, [pc, #64]	; (467c <opcode_0x4E()+0x48>)
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    463a:	f7fe fcf7 	bl	302c <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    463e:	4a10      	ldr	r2, [pc, #64]	; (4680 <opcode_0x4E()+0x4c>)
    4640:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4642:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4646:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4648:	4608      	mov	r0, r1
    464a:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    464c:	bf4c      	ite	mi
    464e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4652:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4656:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4658:	f7fe fc74 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    465c:	8820      	ldrh	r0, [r4, #0]
    465e:	9901      	ldr	r1, [sp, #4]
    4660:	f7fe fb64 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4664:	8820      	ldrh	r0, [r4, #0]
    4666:	9901      	ldr	r1, [sp, #4]
    4668:	f7fe fb60 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    466c:	4a05      	ldr	r2, [pc, #20]	; (4684 <opcode_0x4E()+0x50>)
    466e:	4b06      	ldr	r3, [pc, #24]	; (4688 <opcode_0x4E()+0x54>)
    4670:	7a50      	ldrb	r0, [r2, #9]
    4672:	881b      	ldrh	r3, [r3, #0]
    4674:	4418      	add	r0, r3
} // 0x4E - LSR - Logical Shift Right - Absolute
    4676:	b280      	uxth	r0, r0
    4678:	b002      	add	sp, #8
    467a:	bd10      	pop	{r4, pc}
    467c:	2001888e 	.word	0x2001888e
    4680:	20004aa0 	.word	0x20004aa0
    4684:	20016418 	.word	0x20016418
    4688:	20018890 	.word	0x20018890

0000468c <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    468c:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    468e:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    4690:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4692:	f7fe fce7 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4696:	4a10      	ldr	r2, [pc, #64]	; (46d8 <opcode_0x5E()+0x4c>)
    4698:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    469a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    469e:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    46a0:	4c0e      	ldr	r4, [pc, #56]	; (46dc <opcode_0x5E()+0x50>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46a2:	4608      	mov	r0, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    46a4:	bf4c      	ite	mi
    46a6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    46aa:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46ae:	9101      	str	r1, [sp, #4]
    46b0:	7013      	strb	r3, [r2, #0]
    46b2:	f7fe fc47 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    46b6:	8820      	ldrh	r0, [r4, #0]
    46b8:	9901      	ldr	r1, [sp, #4]
    46ba:	f7fe fb37 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    46be:	8820      	ldrh	r0, [r4, #0]
    46c0:	9901      	ldr	r1, [sp, #4]
    46c2:	f7fe fb33 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    46c6:	4a06      	ldr	r2, [pc, #24]	; (46e0 <opcode_0x5E()+0x54>)
    46c8:	4b06      	ldr	r3, [pc, #24]	; (46e4 <opcode_0x5E()+0x58>)
    46ca:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    46ce:	881b      	ldrh	r3, [r3, #0]
    46d0:	4418      	add	r0, r3
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    46d2:	b280      	uxth	r0, r0
    46d4:	b002      	add	sp, #8
    46d6:	bd10      	pop	{r4, pc}
    46d8:	20004aa0 	.word	0x20004aa0
    46dc:	2001888e 	.word	0x2001888e
    46e0:	20016418 	.word	0x20016418
    46e4:	20018890 	.word	0x20018890

000046e8 <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    46e8:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    46ea:	4d19      	ldr	r5, [pc, #100]	; (4750 <opcode_0x66()+0x68>)
    46ec:	b083      	sub	sp, #12
    46ee:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    46f0:	4c18      	ldr	r4, [pc, #96]	; (4754 <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    46f2:	8828      	ldrh	r0, [r5, #0]
    46f4:	3001      	adds	r0, #1
    46f6:	b280      	uxth	r0, r0
    46f8:	f7fe f95c 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    46fc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    46fe:	b280      	uxth	r0, r0
    4700:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4702:	f7fe f957 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4706:	4a14      	ldr	r2, [pc, #80]	; (4758 <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4708:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    470c:	7813      	ldrb	r3, [r2, #0]
    470e:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4712:	bf14      	ite	ne
    4714:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4718:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    471c:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    471e:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4720:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4724:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4726:	4608      	mov	r0, r1
    4728:	9101      	str	r1, [sp, #4]
    472a:	f7fe fc0b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    472e:	9901      	ldr	r1, [sp, #4]
    4730:	8820      	ldrh	r0, [r4, #0]
    4732:	f7fe fafb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4736:	8820      	ldrh	r0, [r4, #0]
    4738:	9901      	ldr	r1, [sp, #4]
    473a:	f7fe faf7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    473e:	4a07      	ldr	r2, [pc, #28]	; (475c <opcode_0x66()+0x74>)
    4740:	882b      	ldrh	r3, [r5, #0]
    4742:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    4746:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    4748:	b280      	uxth	r0, r0
    474a:	b003      	add	sp, #12
    474c:	bd30      	pop	{r4, r5, pc}
    474e:	bf00      	nop
    4750:	20018890 	.word	0x20018890
    4754:	2001888e 	.word	0x2001888e
    4758:	20004aa0 	.word	0x20004aa0
    475c:	20016418 	.word	0x20016418

00004760 <opcode_0x76()>:
uint16_t opcode_0x76() {
    4760:	b510      	push	{r4, lr}
    4762:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    4764:	f7fe fc22 	bl	2fac <Fetch_ZeroPage_X()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4768:	4a12      	ldr	r2, [pc, #72]	; (47b4 <opcode_0x76()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    476a:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    476c:	4c12      	ldr	r4, [pc, #72]	; (47b8 <opcode_0x76()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    476e:	7813      	ldrb	r3, [r2, #0]
    4770:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4774:	bf4c      	ite	mi
    4776:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    477a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    477e:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4780:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4782:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4786:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4788:	4608      	mov	r0, r1
    478a:	9101      	str	r1, [sp, #4]
    478c:	f7fe fbda 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4790:	8820      	ldrh	r0, [r4, #0]
    4792:	9901      	ldr	r1, [sp, #4]
    4794:	f7fe faca 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4798:	8820      	ldrh	r0, [r4, #0]
    479a:	9901      	ldr	r1, [sp, #4]
    479c:	f7fe fac6 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    47a0:	4a06      	ldr	r2, [pc, #24]	; (47bc <opcode_0x76()+0x5c>)
    47a2:	4b07      	ldr	r3, [pc, #28]	; (47c0 <opcode_0x76()+0x60>)
    47a4:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    47a8:	881b      	ldrh	r3, [r3, #0]
    47aa:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    47ac:	b280      	uxth	r0, r0
    47ae:	b002      	add	sp, #8
    47b0:	bd10      	pop	{r4, pc}
    47b2:	bf00      	nop
    47b4:	20004aa0 	.word	0x20004aa0
    47b8:	2001888e 	.word	0x2001888e
    47bc:	20016418 	.word	0x20016418
    47c0:	20018890 	.word	0x20018890

000047c4 <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    47c4:	b510      	push	{r4, lr}
    47c6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    47c8:	f7fe fc30 	bl	302c <Fetch_Absolute()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47cc:	4a12      	ldr	r2, [pc, #72]	; (4818 <opcode_0x6E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47ce:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    47d0:	4c12      	ldr	r4, [pc, #72]	; (481c <opcode_0x6E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47d2:	7813      	ldrb	r3, [r2, #0]
    47d4:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47d8:	bf4c      	ite	mi
    47da:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47de:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47e2:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47e4:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    47e6:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    47ea:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    47ec:	4608      	mov	r0, r1
    47ee:	9101      	str	r1, [sp, #4]
    47f0:	f7fe fba8 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    47f4:	8820      	ldrh	r0, [r4, #0]
    47f6:	9901      	ldr	r1, [sp, #4]
    47f8:	f7fe fa98 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    47fc:	8820      	ldrh	r0, [r4, #0]
    47fe:	9901      	ldr	r1, [sp, #4]
    4800:	f7fe fa94 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    4804:	4a06      	ldr	r2, [pc, #24]	; (4820 <opcode_0x6E()+0x5c>)
    4806:	4b07      	ldr	r3, [pc, #28]	; (4824 <opcode_0x6E()+0x60>)
    4808:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    480c:	881b      	ldrh	r3, [r3, #0]
    480e:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    4810:	b280      	uxth	r0, r0
    4812:	b002      	add	sp, #8
    4814:	bd10      	pop	{r4, pc}
    4816:	bf00      	nop
    4818:	20004aa0 	.word	0x20004aa0
    481c:	2001888e 	.word	0x2001888e
    4820:	20016418 	.word	0x20016418
    4824:	20018890 	.word	0x20018890

00004828 <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    4828:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    482a:	2000      	movs	r0, #0
uint16_t opcode_0x7E() {
    482c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    482e:	f7fe fc19 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4832:	4a12      	ldr	r2, [pc, #72]	; (487c <opcode_0x7E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4834:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4836:	4c12      	ldr	r4, [pc, #72]	; (4880 <opcode_0x7E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4838:	7813      	ldrb	r3, [r2, #0]
    483a:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    483e:	bf4c      	ite	mi
    4840:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4844:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4848:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    484a:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    484c:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    4850:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4852:	4608      	mov	r0, r1
    4854:	9101      	str	r1, [sp, #4]
    4856:	f7fe fb75 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    485a:	8820      	ldrh	r0, [r4, #0]
    485c:	9901      	ldr	r1, [sp, #4]
    485e:	f7fe fa65 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4862:	8820      	ldrh	r0, [r4, #0]
    4864:	9901      	ldr	r1, [sp, #4]
    4866:	f7fe fa61 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    486a:	4a06      	ldr	r2, [pc, #24]	; (4884 <opcode_0x7E()+0x5c>)
    486c:	4b06      	ldr	r3, [pc, #24]	; (4888 <opcode_0x7E()+0x60>)
    486e:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    4872:	881b      	ldrh	r3, [r3, #0]
    4874:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    4876:	b280      	uxth	r0, r0
    4878:	b002      	add	sp, #8
    487a:	bd10      	pop	{r4, pc}
    487c:	20004aa0 	.word	0x20004aa0
    4880:	2001888e 	.word	0x2001888e
    4884:	20016418 	.word	0x20016418
    4888:	20018890 	.word	0x20018890

0000488c <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    488c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    488e:	4d18      	ldr	r5, [pc, #96]	; (48f0 <opcode_0x26()+0x64>)
    4890:	b083      	sub	sp, #12
    4892:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4894:	4c17      	ldr	r4, [pc, #92]	; (48f4 <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    4896:	8828      	ldrh	r0, [r5, #0]
    4898:	3001      	adds	r0, #1
    489a:	b280      	uxth	r0, r0
    489c:	f7fe f88a 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    48a0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    48a2:	b280      	uxth	r0, r0
    48a4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    48a6:	f7fe f885 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    48aa:	4a13      	ldr	r2, [pc, #76]	; (48f8 <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    48ac:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    48b0:	7813      	ldrb	r3, [r2, #0]
    48b2:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    48b6:	bf14      	ite	ne
    48b8:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    48bc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    48c0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    48c4:	7013      	strb	r3, [r2, #0]
    48c6:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    48c8:	4608      	mov	r0, r1
    48ca:	9101      	str	r1, [sp, #4]
    48cc:	f7fe fb3a 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    48d0:	9901      	ldr	r1, [sp, #4]
    48d2:	8820      	ldrh	r0, [r4, #0]
    48d4:	f7fe fa2a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    48d8:	8820      	ldrh	r0, [r4, #0]
    48da:	9901      	ldr	r1, [sp, #4]
    48dc:	f7fe fa26 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    48e0:	4a06      	ldr	r2, [pc, #24]	; (48fc <opcode_0x26()+0x70>)
    48e2:	882b      	ldrh	r3, [r5, #0]
    48e4:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    48e8:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    48ea:	b280      	uxth	r0, r0
    48ec:	b003      	add	sp, #12
    48ee:	bd30      	pop	{r4, r5, pc}
    48f0:	20018890 	.word	0x20018890
    48f4:	2001888e 	.word	0x2001888e
    48f8:	20004aa0 	.word	0x20004aa0
    48fc:	20015418 	.word	0x20015418

00004900 <opcode_0x36()>:
uint16_t opcode_0x36() {
    4900:	b510      	push	{r4, lr}
    4902:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    4904:	f7fe fb52 	bl	2fac <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4908:	4a11      	ldr	r2, [pc, #68]	; (4950 <opcode_0x36()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    490a:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    490c:	4c11      	ldr	r4, [pc, #68]	; (4954 <opcode_0x36()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    490e:	7813      	ldrb	r3, [r2, #0]
    4910:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4914:	bf4c      	ite	mi
    4916:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    491a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    491e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4922:	7013      	strb	r3, [r2, #0]
    4924:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4926:	4608      	mov	r0, r1
    4928:	9101      	str	r1, [sp, #4]
    492a:	f7fe fb0b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    492e:	8820      	ldrh	r0, [r4, #0]
    4930:	9901      	ldr	r1, [sp, #4]
    4932:	f7fe f9fb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4936:	8820      	ldrh	r0, [r4, #0]
    4938:	9901      	ldr	r1, [sp, #4]
    493a:	f7fe f9f7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    493e:	4a06      	ldr	r2, [pc, #24]	; (4958 <opcode_0x36()+0x58>)
    4940:	4b06      	ldr	r3, [pc, #24]	; (495c <opcode_0x36()+0x5c>)
    4942:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    4946:	881b      	ldrh	r3, [r3, #0]
    4948:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    494a:	b280      	uxth	r0, r0
    494c:	b002      	add	sp, #8
    494e:	bd10      	pop	{r4, pc}
    4950:	20004aa0 	.word	0x20004aa0
    4954:	2001888e 	.word	0x2001888e
    4958:	20015418 	.word	0x20015418
    495c:	20018890 	.word	0x20018890

00004960 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    4960:	b510      	push	{r4, lr}
    4962:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    4964:	f7fe fb62 	bl	302c <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4968:	4a11      	ldr	r2, [pc, #68]	; (49b0 <opcode_0x2E()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    496a:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    496c:	4c11      	ldr	r4, [pc, #68]	; (49b4 <opcode_0x2E()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    496e:	7813      	ldrb	r3, [r2, #0]
    4970:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4974:	bf4c      	ite	mi
    4976:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    497a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    497e:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4982:	7013      	strb	r3, [r2, #0]
    4984:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4986:	4608      	mov	r0, r1
    4988:	9101      	str	r1, [sp, #4]
    498a:	f7fe fadb 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    498e:	8820      	ldrh	r0, [r4, #0]
    4990:	9901      	ldr	r1, [sp, #4]
    4992:	f7fe f9cb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4996:	8820      	ldrh	r0, [r4, #0]
    4998:	9901      	ldr	r1, [sp, #4]
    499a:	f7fe f9c7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    499e:	4a06      	ldr	r2, [pc, #24]	; (49b8 <opcode_0x2E()+0x58>)
    49a0:	4b06      	ldr	r3, [pc, #24]	; (49bc <opcode_0x2E()+0x5c>)
    49a2:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    49a6:	881b      	ldrh	r3, [r3, #0]
    49a8:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    49aa:	b280      	uxth	r0, r0
    49ac:	b002      	add	sp, #8
    49ae:	bd10      	pop	{r4, pc}
    49b0:	20004aa0 	.word	0x20004aa0
    49b4:	2001888e 	.word	0x2001888e
    49b8:	20015418 	.word	0x20015418
    49bc:	20018890 	.word	0x20018890

000049c0 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    49c0:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    49c2:	2000      	movs	r0, #0
uint16_t opcode_0x3E() {
    49c4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    49c6:	f7fe fb4d 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49ca:	4a12      	ldr	r2, [pc, #72]	; (4a14 <opcode_0x3E()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49cc:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    49ce:	4c12      	ldr	r4, [pc, #72]	; (4a18 <opcode_0x3E()+0x58>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49d0:	7813      	ldrb	r3, [r2, #0]
    49d2:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49d6:	bf4c      	ite	mi
    49d8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    49dc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    49e0:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    49e4:	7013      	strb	r3, [r2, #0]
    49e6:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    49e8:	4608      	mov	r0, r1
    49ea:	9101      	str	r1, [sp, #4]
    49ec:	f7fe faaa 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    49f0:	8820      	ldrh	r0, [r4, #0]
    49f2:	9901      	ldr	r1, [sp, #4]
    49f4:	f7fe f99a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    49f8:	8820      	ldrh	r0, [r4, #0]
    49fa:	9901      	ldr	r1, [sp, #4]
    49fc:	f7fe f996 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    4a00:	4a06      	ldr	r2, [pc, #24]	; (4a1c <opcode_0x3E()+0x5c>)
    4a02:	4b07      	ldr	r3, [pc, #28]	; (4a20 <opcode_0x3E()+0x60>)
    4a04:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    4a08:	881b      	ldrh	r3, [r3, #0]
    4a0a:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    4a0c:	b280      	uxth	r0, r0
    4a0e:	b002      	add	sp, #8
    4a10:	bd10      	pop	{r4, pc}
    4a12:	bf00      	nop
    4a14:	20004aa0 	.word	0x20004aa0
    4a18:	2001888e 	.word	0x2001888e
    4a1c:	20015418 	.word	0x20015418
    4a20:	20018890 	.word	0x20018890

00004a24 <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    4a24:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4a26:	4c52      	ldr	r4, [pc, #328]	; (4b70 <Branch_Taken()+0x14c>)
    4a28:	2100      	movs	r1, #0
    4a2a:	8820      	ldrh	r0, [r4, #0]
    4a2c:	3001      	adds	r0, #1
    4a2e:	b280      	uxth	r0, r0
    4a30:	f7fd ffc0 	bl	29b4 <read_byte(unsigned short, bool)>

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    effective_address = (register_pc + 2) + effective_address;
    4a34:	8821      	ldrh	r1, [r4, #0]
    if ((reg_data & 0x0080) == 0x0080) {
    4a36:	0605      	lsls	r5, r0, #24
    effective_address = Sign_Extend16(Fetch_Immediate(1));
    4a38:	b283      	uxth	r3, r0
    effective_address = (register_pc + 2) + effective_address;
    4a3a:	f101 0002 	add.w	r0, r1, #2
    4a3e:	4d4d      	ldr	r5, [pc, #308]	; (4b74 <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    4a40:	bf48      	it	mi
    4a42:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    4a46:	b280      	uxth	r0, r0
    4a48:	4403      	add	r3, r0
    4a4a:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4a4c:	4059      	eors	r1, r3
    effective_address = (register_pc + 2) + effective_address;
    4a4e:	802b      	strh	r3, [r5, #0]
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4a50:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    4a54:	d006      	beq.n	4a64 <Branch_Taken()+0x40>
    return read_byte(register_pc+offset, false);
    4a56:	2100      	movs	r1, #0
    4a58:	f7fd ffac 	bl	29b4 <read_byte(unsigned short, bool)>
    4a5c:	8820      	ldrh	r0, [r4, #0]
    4a5e:	2100      	movs	r1, #0
    4a60:	3003      	adds	r0, #3
    4a62:	b280      	uxth	r0, r0
    4a64:	f7fd ffa6 	bl	29b4 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    4a68:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    4a6a:	4a43      	ldr	r2, [pc, #268]	; (4b78 <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a70:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    4a72:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4a74:	d376      	bcc.n	4b64 <Branch_Taken()+0x140>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4a76:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    4a7a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4a7e:	d305      	bcc.n	4a8c <Branch_Taken()+0x68>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4a80:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4a84:	b292      	uxth	r2, r2
    4a86:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    4a8a:	d36b      	bcc.n	4b64 <Branch_Taken()+0x140>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a8c:	4a3b      	ldr	r2, [pc, #236]	; (4b7c <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    4a8e:	2000      	movs	r0, #0
    4a90:	493b      	ldr	r1, [pc, #236]	; (4b80 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a92:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4a94:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4a96:	2a01      	cmp	r2, #1
    4a98:	d005      	beq.n	4aa6 <Branch_Taken()+0x82>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4a9a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4a9e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4aa2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    4aa6:	4a37      	ldr	r2, [pc, #220]	; (4b84 <Branch_Taken()+0x160>)
    4aa8:	7812      	ldrb	r2, [r2, #0]
    4aaa:	b94a      	cbnz	r2, 4ac0 <Branch_Taken()+0x9c>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4aac:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4ab0:	680a      	ldr	r2, [r1, #0]
    4ab2:	04d0      	lsls	r0, r2, #19
    4ab4:	d4fc      	bmi.n	4ab0 <Branch_Taken()+0x8c>
    while (CLK0) {}      // Wait for CLK0 to become low
    4ab6:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4aba:	680a      	ldr	r2, [r1, #0]
    4abc:	04d2      	lsls	r2, r2, #19
    4abe:	d5fc      	bpl.n	4aba <Branch_Taken()+0x96>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4ac0:	4e31      	ldr	r6, [pc, #196]	; (4b88 <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ac2:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    4ac6:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4ac8:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4aca:	06d8      	lsls	r0, r3, #27
    4acc:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ad0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ad4:	6829      	ldr	r1, [r5, #0]
    4ad6:	4a2d      	ldr	r2, [pc, #180]	; (4b8c <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ad8:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4adc:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4ade:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ae0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4ae4:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ae8:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4aea:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4aee:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4af2:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4af4:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4af8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4afc:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4afe:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b00:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b02:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b04:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b08:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b0a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b0e:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b10:	491f      	ldr	r1, [pc, #124]	; (4b90 <Branch_Taken()+0x16c>)
    4b12:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b14:	4d1f      	ldr	r5, [pc, #124]	; (4b94 <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b16:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4b18:	0559      	lsls	r1, r3, #21
    4b1a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    4b1e:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4b20:	0359      	lsls	r1, r3, #13
    4b22:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    4b26:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b28:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b2a:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4b2e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b32:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b34:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b36:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b38:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b3c:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b44:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b46:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b48:	682c      	ldr	r4, [r5, #0]
    4b4a:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4b4e:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b50:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b52:	4911      	ldr	r1, [pc, #68]	; (4b98 <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4b54:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b56:	4a11      	ldr	r2, [pc, #68]	; (4b9c <Branch_Taken()+0x178>)
    4b58:	680c      	ldr	r4, [r1, #0]
    4b5a:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4b5c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4b5e:	4303      	orrs	r3, r0
    4b60:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    4b62:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b64:	4a0e      	ldr	r2, [pc, #56]	; (4ba0 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4b66:	7812      	ldrb	r2, [r2, #0]
    4b68:	2a01      	cmp	r2, #1
    4b6a:	d98f      	bls.n	4a8c <Branch_Taken()+0x68>
    4b6c:	bd70      	pop	{r4, r5, r6, pc}
    4b6e:	bf00      	nop
    4b70:	20018890 	.word	0x20018890
    4b74:	2001888e 	.word	0x2001888e
    4b78:	2001888c 	.word	0x2001888c
    4b7c:	200188b0 	.word	0x200188b0
    4b80:	200188a9 	.word	0x200188a9
    4b84:	20004a9e 	.word	0x20004a9e
    4b88:	42004000 	.word	0x42004000
    4b8c:	6dfffff3 	.word	0x6dfffff3
    4b90:	cff3efff 	.word	0xcff3efff
    4b94:	42008000 	.word	0x42008000
    4b98:	4200c000 	.word	0x4200c000
    4b9c:	7fffff6f 	.word	0x7fffff6f
    4ba0:	200188a0 	.word	0x200188a0

00004ba4 <opcode_0xF0()>:
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    4ba4:	4b0c      	ldr	r3, [pc, #48]	; (4bd8 <opcode_0xF0()+0x34>)
uint16_t opcode_0xF0() {
    4ba6:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	4c0c      	ldr	r4, [pc, #48]	; (4bdc <opcode_0xF0()+0x38>)
    4bac:	f3c3 0140 	ubfx	r1, r3, #1, #1
    4bb0:	079b      	lsls	r3, r3, #30
    4bb2:	d503      	bpl.n	4bbc <opcode_0xF0()+0x18>
    4bb4:	f7ff ff36 	bl	4a24 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xF0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    4bb8:	8820      	ldrh	r0, [r4, #0]
    4bba:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xF0].length;
    4bbc:	4b08      	ldr	r3, [pc, #32]	; (4be0 <opcode_0xF0()+0x3c>)
    4bbe:	8822      	ldrh	r2, [r4, #0]
    4bc0:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    4bc4:	4413      	add	r3, r2
    4bc6:	b29b      	uxth	r3, r3
    return read_byte(register_pc+offset, false);
    4bc8:	1c58      	adds	r0, r3, #1
    4bca:	8023      	strh	r3, [r4, #0]
    4bcc:	b280      	uxth	r0, r0
    4bce:	f7fd fef1 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0xF0 - BEQ - Branch on Zero Set
    4bd2:	8820      	ldrh	r0, [r4, #0]
    4bd4:	bd10      	pop	{r4, pc}
    4bd6:	bf00      	nop
    4bd8:	20004aa0 	.word	0x20004aa0
    4bdc:	20018890 	.word	0x20018890
    4be0:	20018418 	.word	0x20018418

00004be4 <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    4be4:	4b0b      	ldr	r3, [pc, #44]	; (4c14 <opcode_0xD0()+0x30>)
uint16_t opcode_0xD0() {
    4be6:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	4c0b      	ldr	r4, [pc, #44]	; (4c18 <opcode_0xD0()+0x34>)
    4bec:	079b      	lsls	r3, r3, #30
    4bee:	d403      	bmi.n	4bf8 <opcode_0xD0()+0x14>
    4bf0:	f7ff ff18 	bl	4a24 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xD0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    4bf4:	8820      	ldrh	r0, [r4, #0]
    4bf6:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xD0].length;
    4bf8:	4b08      	ldr	r3, [pc, #32]	; (4c1c <opcode_0xD0()+0x38>)
    4bfa:	2100      	movs	r1, #0
    4bfc:	8822      	ldrh	r2, [r4, #0]
    4bfe:	f893 3a71 	ldrb.w	r3, [r3, #2673]	; 0xa71
    4c02:	4413      	add	r3, r2
    4c04:	b29b      	uxth	r3, r3
    4c06:	1c58      	adds	r0, r3, #1
    4c08:	8023      	strh	r3, [r4, #0]
    4c0a:	b280      	uxth	r0, r0
    4c0c:	f7fd fed2 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0xD0 - BNE - Branch on Zero Clear
    4c10:	8820      	ldrh	r0, [r4, #0]
    4c12:	bd10      	pop	{r4, pc}
    4c14:	20004aa0 	.word	0x20004aa0
    4c18:	20018890 	.word	0x20018890
    4c1c:	20017418 	.word	0x20017418

00004c20 <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    4c20:	4b0c      	ldr	r3, [pc, #48]	; (4c54 <opcode_0x70()+0x34>)
uint16_t opcode_0x70() {
    4c22:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	4c0c      	ldr	r4, [pc, #48]	; (4c58 <opcode_0x70()+0x38>)
    4c28:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4c2c:	065b      	lsls	r3, r3, #25
    4c2e:	d503      	bpl.n	4c38 <opcode_0x70()+0x18>
    4c30:	f7ff fef8 	bl	4a24 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x70].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    4c34:	8820      	ldrh	r0, [r4, #0]
    4c36:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x70].length;
    4c38:	4b08      	ldr	r3, [pc, #32]	; (4c5c <opcode_0x70()+0x3c>)
    4c3a:	8822      	ldrh	r2, [r4, #0]
    4c3c:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
    4c40:	4413      	add	r3, r2
    4c42:	b29b      	uxth	r3, r3
    4c44:	1c58      	adds	r0, r3, #1
    4c46:	8023      	strh	r3, [r4, #0]
    4c48:	b280      	uxth	r0, r0
    4c4a:	f7fd feb3 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0x70 - BVS - Branch on Overflow Set
    4c4e:	8820      	ldrh	r0, [r4, #0]
    4c50:	bd10      	pop	{r4, pc}
    4c52:	bf00      	nop
    4c54:	20004aa0 	.word	0x20004aa0
    4c58:	20018890 	.word	0x20018890
    4c5c:	20016418 	.word	0x20016418

00004c60 <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    4c60:	4b0b      	ldr	r3, [pc, #44]	; (4c90 <opcode_0x50()+0x30>)
uint16_t opcode_0x50() {
    4c62:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    4c64:	781b      	ldrb	r3, [r3, #0]
    4c66:	4c0b      	ldr	r4, [pc, #44]	; (4c94 <opcode_0x50()+0x34>)
    4c68:	065b      	lsls	r3, r3, #25
    4c6a:	d403      	bmi.n	4c74 <opcode_0x50()+0x14>
    4c6c:	f7ff feda 	bl	4a24 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x50].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    4c70:	8820      	ldrh	r0, [r4, #0]
    4c72:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x50].length;
    4c74:	4b08      	ldr	r3, [pc, #32]	; (4c98 <opcode_0x50()+0x38>)
    4c76:	2100      	movs	r1, #0
    4c78:	8822      	ldrh	r2, [r4, #0]
    4c7a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    4c7e:	4413      	add	r3, r2
    4c80:	b29b      	uxth	r3, r3
    4c82:	1c58      	adds	r0, r3, #1
    4c84:	8023      	strh	r3, [r4, #0]
    4c86:	b280      	uxth	r0, r0
    4c88:	f7fd fe94 	bl	29b4 <read_byte(unsigned short, bool)>
} // 0x50 - BVC - Branch on Overflow Clear
    4c8c:	8820      	ldrh	r0, [r4, #0]
    4c8e:	bd10      	pop	{r4, pc}
    4c90:	20004aa0 	.word	0x20004aa0
    4c94:	20018890 	.word	0x20018890
    4c98:	20016418 	.word	0x20016418

00004c9c <opcode_0x4C()>:
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    4c9c:	b570      	push	{r4, r5, r6, lr}
    4c9e:	4d4b      	ldr	r5, [pc, #300]	; (4dcc <opcode_0x4C()+0x130>)
    4ca0:	2100      	movs	r1, #0
    4ca2:	8828      	ldrh	r0, [r5, #0]
    4ca4:	3001      	adds	r0, #1
    4ca6:	b280      	uxth	r0, r0
    4ca8:	f7fd fe84 	bl	29b4 <read_byte(unsigned short, bool)>
    4cac:	882b      	ldrh	r3, [r5, #0]
    4cae:	4604      	mov	r4, r0
    4cb0:	2100      	movs	r1, #0
    4cb2:	1c98      	adds	r0, r3, #2
    4cb4:	b280      	uxth	r0, r0
    4cb6:	f7fd fe7d 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    4cba:	4a45      	ldr	r2, [pc, #276]	; (4dd0 <opcode_0x4C()+0x134>)
    4cbc:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    4cc0:	4b44      	ldr	r3, [pc, #272]	; (4dd4 <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    4cc2:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4cc4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    4cc8:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    4cca:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4ccc:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4cce:	d378      	bcc.n	4dc2 <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4cd0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4cd8:	d305      	bcc.n	4ce6 <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4cda:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4cde:	b29b      	uxth	r3, r3
    4ce0:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4ce4:	d36d      	bcc.n	4dc2 <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ce6:	4b3c      	ldr	r3, [pc, #240]	; (4dd8 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    4ce8:	2100      	movs	r1, #0
    4cea:	4a3c      	ldr	r2, [pc, #240]	; (4ddc <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cec:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4cee:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4cf0:	2b01      	cmp	r3, #1
    4cf2:	d005      	beq.n	4d00 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4cf4:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4cf8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4d00:	4b37      	ldr	r3, [pc, #220]	; (4de0 <opcode_0x4C()+0x144>)
    4d02:	781b      	ldrb	r3, [r3, #0]
    4d04:	b94b      	cbnz	r3, 4d1a <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4d06:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4d0a:	6813      	ldr	r3, [r2, #0]
    4d0c:	04d9      	lsls	r1, r3, #19
    4d0e:	d4fc      	bmi.n	4d0a <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4d10:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4d14:	6813      	ldr	r3, [r2, #0]
    4d16:	04db      	lsls	r3, r3, #19
    4d18:	d5fc      	bpl.n	4d14 <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4d1a:	4d32      	ldr	r5, [pc, #200]	; (4de4 <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d1c:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4d20:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4d22:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4d24:	06c1      	lsls	r1, r0, #27
    4d26:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d2a:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d2e:	6832      	ldr	r2, [r6, #0]
    4d30:	4b2d      	ldr	r3, [pc, #180]	; (4de8 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d32:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4d36:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d3a:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d3c:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d3e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4d42:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d46:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4d48:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4d4c:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d50:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4d52:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4d56:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d5a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d5c:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4d5e:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d60:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d62:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d66:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d6c:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d6e:	4a1f      	ldr	r2, [pc, #124]	; (4dec <opcode_0x4C()+0x150>)
    4d70:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d72:	4e1f      	ldr	r6, [pc, #124]	; (4df0 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4d74:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4d76:	0542      	lsls	r2, r0, #21
    4d78:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4d7c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4d7e:	0342      	lsls	r2, r0, #13
    4d80:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4d84:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d86:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d88:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4d90:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d92:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d94:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4d98:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4d9c:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4d9e:	6832      	ldr	r2, [r6, #0]
    4da0:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4da4:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4da6:	4a13      	ldr	r2, [pc, #76]	; (4df4 <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4da8:	ea43 030c 	orr.w	r3, r3, ip
    4dac:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4dae:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4db0:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4db6:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4db8:	4323      	orrs	r3, r4
    4dba:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4dbc:	430b      	orrs	r3, r1
    4dbe:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4dc2:	4b0d      	ldr	r3, [pc, #52]	; (4df8 <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4dc4:	781b      	ldrb	r3, [r3, #0]
    4dc6:	2b01      	cmp	r3, #1
    4dc8:	d98d      	bls.n	4ce6 <opcode_0x4C()+0x4a>
    4dca:	bd70      	pop	{r4, r5, r6, pc}
    4dcc:	20018890 	.word	0x20018890
    4dd0:	2001888e 	.word	0x2001888e
    4dd4:	2001888c 	.word	0x2001888c
    4dd8:	200188b0 	.word	0x200188b0
    4ddc:	200188a9 	.word	0x200188a9
    4de0:	20004a9e 	.word	0x20004a9e
    4de4:	42004000 	.word	0x42004000
    4de8:	6dfffff3 	.word	0x6dfffff3
    4dec:	cff3efff 	.word	0xcff3efff
    4df0:	42008000 	.word	0x42008000
    4df4:	7fffff6f 	.word	0x7fffff6f
    4df8:	200188a0 	.word	0x200188a0

00004dfc <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    4dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4dfe:	4e52      	ldr	r6, [pc, #328]	; (4f48 <opcode_0x6C()+0x14c>)
    4e00:	2100      	movs	r1, #0
    4e02:	8830      	ldrh	r0, [r6, #0]
    4e04:	3001      	adds	r0, #1
    4e06:	b280      	uxth	r0, r0
    4e08:	f7fd fdd4 	bl	29b4 <read_byte(unsigned short, bool)>
    4e0c:	8833      	ldrh	r3, [r6, #0]
    4e0e:	4604      	mov	r4, r0
    4e10:	2100      	movs	r1, #0
    4e12:	1c98      	adds	r0, r3, #2
    4e14:	b280      	uxth	r0, r0
    4e16:	f7fd fdcd 	bl	29b4 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    4e1a:	2100      	movs	r1, #0
    4e1c:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4e20:	b284      	uxth	r4, r0
    4e22:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    4e24:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    4e26:	f7fd fdc5 	bl	29b4 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    4e2a:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    4e2c:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    4e2e:	b2a0      	uxth	r0, r4
    4e30:	f7fd fdc0 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    4e34:	4945      	ldr	r1, [pc, #276]	; (4f4c <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    4e36:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    4e38:	4a45      	ldr	r2, [pc, #276]	; (4f50 <opcode_0x6C()+0x154>)
    4e3a:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    4e3c:	1943      	adds	r3, r0, r5
    4e3e:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4e40:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    4e42:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4e44:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e46:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4e4a:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    4e4c:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e4e:	d376      	bcc.n	4f3e <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4e50:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e58:	d305      	bcc.n	4e66 <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4e5a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4e5e:	b29b      	uxth	r3, r3
    4e60:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4e64:	d36b      	bcc.n	4f3e <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e66:	4b3b      	ldr	r3, [pc, #236]	; (4f54 <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    4e68:	2100      	movs	r1, #0
    4e6a:	4a3b      	ldr	r2, [pc, #236]	; (4f58 <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e6c:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4e6e:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4e70:	2b01      	cmp	r3, #1
    4e72:	d005      	beq.n	4e80 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4e74:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4e78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4e80:	4b36      	ldr	r3, [pc, #216]	; (4f5c <opcode_0x6C()+0x160>)
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	b94b      	cbnz	r3, 4e9a <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4e86:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e8a:	6813      	ldr	r3, [r2, #0]
    4e8c:	04d9      	lsls	r1, r3, #19
    4e8e:	d4fc      	bmi.n	4e8a <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4e90:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4e94:	6813      	ldr	r3, [r2, #0]
    4e96:	04db      	lsls	r3, r3, #19
    4e98:	d5fc      	bpl.n	4e94 <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4e9a:	4d31      	ldr	r5, [pc, #196]	; (4f60 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e9c:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4ea0:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4ea2:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4ea4:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ea6:	4f2f      	ldr	r7, [pc, #188]	; (4f64 <opcode_0x6C()+0x168>)
    4ea8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4eac:	4b2e      	ldr	r3, [pc, #184]	; (4f68 <opcode_0x6C()+0x16c>)
    4eae:	6832      	ldr	r2, [r6, #0]
    4eb0:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4eb2:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4eb4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4eb8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ebc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4ebe:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4ec2:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ec6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4ec8:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4ecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ed0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ed2:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4ed4:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ed6:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ed8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4edc:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ee2:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ee4:	4a21      	ldr	r2, [pc, #132]	; (4f6c <opcode_0x6C()+0x170>)
    4ee6:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4ee8:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4eea:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4eec:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4eee:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4ef2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4ef6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4efa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4efc:	0342      	lsls	r2, r0, #13
    4efe:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4f02:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4f04:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f06:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f0e:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f10:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f12:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4f1a:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f1c:	683a      	ldr	r2, [r7, #0]
    4f1e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4f22:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f24:	4a12      	ldr	r2, [pc, #72]	; (4f70 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4f26:	4333      	orrs	r3, r6
    4f28:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f2a:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f2c:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f32:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4f34:	4323      	orrs	r3, r4
    4f36:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4f38:	430b      	orrs	r3, r1
    4f3a:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4f3e:	4b0d      	ldr	r3, [pc, #52]	; (4f74 <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4f40:	781b      	ldrb	r3, [r3, #0]
    4f42:	2b01      	cmp	r3, #1
    4f44:	d98f      	bls.n	4e66 <opcode_0x6C()+0x6a>
    4f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f48:	20018890 	.word	0x20018890
    4f4c:	2001888e 	.word	0x2001888e
    4f50:	2001888c 	.word	0x2001888c
    4f54:	200188b0 	.word	0x200188b0
    4f58:	200188a9 	.word	0x200188a9
    4f5c:	20004a9e 	.word	0x20004a9e
    4f60:	42004000 	.word	0x42004000
    4f64:	42008000 	.word	0x42008000
    4f68:	6dfffff3 	.word	0x6dfffff3
    4f6c:	cff3efff 	.word	0xcff3efff
    4f70:	7fffff6f 	.word	0x7fffff6f
    4f74:	200188a0 	.word	0x200188a0

00004f78 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    4f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4f7a:	4d57      	ldr	r5, [pc, #348]	; (50d8 <opcode_0x20()+0x160>)
    4f7c:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    4f7e:	4c57      	ldr	r4, [pc, #348]	; (50dc <opcode_0x20()+0x164>)
    4f80:	8828      	ldrh	r0, [r5, #0]
    4f82:	3001      	adds	r0, #1
    4f84:	b280      	uxth	r0, r0
    4f86:	f7fd fd15 	bl	29b4 <read_byte(unsigned short, bool)>
    4f8a:	882b      	ldrh	r3, [r5, #0]
    4f8c:	4606      	mov	r6, r0
    4f8e:	2100      	movs	r1, #0
    4f90:	1c98      	adds	r0, r3, #2
    4f92:	b280      	uxth	r0, r0
    4f94:	f7fd fd0e 	bl	29b4 <read_byte(unsigned short, bool)>
    4f98:	7823      	ldrb	r3, [r4, #0]
    4f9a:	4607      	mov	r7, r0
    4f9c:	2100      	movs	r1, #0
    4f9e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    4fa2:	f7fd fd07 	bl	29b4 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    4fa6:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    4fa8:	7820      	ldrb	r0, [r4, #0]
    4faa:	0a09      	lsrs	r1, r1, #8
    4fac:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4fb0:	f7fd febc 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4fb4:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4fb6:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    4fb8:	3b01      	subs	r3, #1
    4fba:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    4fbc:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    4fc0:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    4fc2:	f7fd feb3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    4fc6:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    4fc8:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    4fcc:	4a44      	ldr	r2, [pc, #272]	; (50e0 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    4fce:	3b01      	subs	r3, #1
    4fd0:	b280      	uxth	r0, r0
    4fd2:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4fd8:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4fda:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fdc:	d376      	bcc.n	50cc <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4fde:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4fe6:	d305      	bcc.n	4ff4 <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4fe8:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4fec:	b29b      	uxth	r3, r3
    4fee:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4ff2:	d36b      	bcc.n	50cc <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ff4:	4b3b      	ldr	r3, [pc, #236]	; (50e4 <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    4ff6:	2100      	movs	r1, #0
    4ff8:	4a3b      	ldr	r2, [pc, #236]	; (50e8 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ffa:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4ffc:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4ffe:	2b01      	cmp	r3, #1
    5000:	d005      	beq.n	500e <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5002:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5006:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    500a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    500e:	4b37      	ldr	r3, [pc, #220]	; (50ec <opcode_0x20()+0x174>)
    5010:	781b      	ldrb	r3, [r3, #0]
    5012:	b94b      	cbnz	r3, 5028 <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    5014:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5018:	6813      	ldr	r3, [r2, #0]
    501a:	04d9      	lsls	r1, r3, #19
    501c:	d4fc      	bmi.n	5018 <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    501e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5022:	6813      	ldr	r3, [r2, #0]
    5024:	04db      	lsls	r3, r3, #19
    5026:	d5fc      	bpl.n	5022 <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    5028:	4d31      	ldr	r5, [pc, #196]	; (50f0 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    502a:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    502e:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    5030:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5032:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5034:	4f2f      	ldr	r7, [pc, #188]	; (50f4 <opcode_0x20()+0x17c>)
    5036:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    503a:	4b2f      	ldr	r3, [pc, #188]	; (50f8 <opcode_0x20()+0x180>)
    503c:	6832      	ldr	r2, [r6, #0]
    503e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5040:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5042:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5046:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    504a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    504c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    5050:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5054:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5056:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    505a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    505e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5060:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5062:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5064:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5066:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    506a:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    506c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5070:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5072:	4a22      	ldr	r2, [pc, #136]	; (50fc <opcode_0x20()+0x184>)
    5074:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5076:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5078:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    507a:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    507c:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5080:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5084:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    5088:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    508a:	0342      	lsls	r2, r0, #13
    508c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5090:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5092:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5094:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    509c:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    509e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50a0:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    50a4:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    50a8:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50aa:	683a      	ldr	r2, [r7, #0]
    50ac:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    50b0:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50b2:	4a13      	ldr	r2, [pc, #76]	; (5100 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    50b4:	4333      	orrs	r3, r6
    50b6:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50b8:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50ba:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50c0:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    50c2:	4323      	orrs	r3, r4
    50c4:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    50c6:	430b      	orrs	r3, r1
    50c8:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    50ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    50cc:	4b0d      	ldr	r3, [pc, #52]	; (5104 <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	2b01      	cmp	r3, #1
    50d2:	d98f      	bls.n	4ff4 <opcode_0x20()+0x7c>
    50d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50d6:	bf00      	nop
    50d8:	20018890 	.word	0x20018890
    50dc:	20004aa1 	.word	0x20004aa1
    50e0:	2001888c 	.word	0x2001888c
    50e4:	200188b0 	.word	0x200188b0
    50e8:	200188a9 	.word	0x200188a9
    50ec:	20004a9e 	.word	0x20004a9e
    50f0:	42004000 	.word	0x42004000
    50f4:	42008000 	.word	0x42008000
    50f8:	6dfffff3 	.word	0x6dfffff3
    50fc:	cff3efff 	.word	0xcff3efff
    5100:	7fffff6f 	.word	0x7fffff6f
    5104:	200188a0 	.word	0x200188a0

00005108 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    5108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    510a:	4d58      	ldr	r5, [pc, #352]	; (526c <opcode_0x40()+0x164>)
    510c:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    510e:	4c58      	ldr	r4, [pc, #352]	; (5270 <opcode_0x40()+0x168>)
    5110:	8828      	ldrh	r0, [r5, #0]
    5112:	3001      	adds	r0, #1
    5114:	b280      	uxth	r0, r0
    5116:	f7fd fc4d 	bl	29b4 <read_byte(unsigned short, bool)>
    511a:	7820      	ldrb	r0, [r4, #0]
    511c:	2100      	movs	r1, #0
    511e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5122:	f7fd fc47 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5126:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5128:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    512a:	3301      	adds	r3, #1
    512c:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    512e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    5132:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5134:	f7fd fc3e 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5138:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    513a:	4a4e      	ldr	r2, [pc, #312]	; (5274 <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    513c:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    513e:	3301      	adds	r3, #1
    5140:	7010      	strb	r0, [r2, #0]
    5142:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    5144:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    5148:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    514a:	f7fd fc33 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    514e:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    5150:	4606      	mov	r6, r0
    5152:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    5154:	3301      	adds	r3, #1
    5156:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    5158:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    515c:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    515e:	f7fd fc29 	bl	29b4 <read_byte(unsigned short, bool)>
    current_address = local_address;
    5162:	4b45      	ldr	r3, [pc, #276]	; (5278 <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    5164:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    5168:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    516a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    516e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    5170:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5172:	d376      	bcc.n	5262 <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    5174:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    5178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    517c:	d305      	bcc.n	518a <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    517e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    5182:	b29b      	uxth	r3, r3
    5184:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    5188:	d36b      	bcc.n	5262 <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    518a:	4b3c      	ldr	r3, [pc, #240]	; (527c <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    518c:	2100      	movs	r1, #0
    518e:	4a3c      	ldr	r2, [pc, #240]	; (5280 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5190:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    5192:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5194:	2b01      	cmp	r3, #1
    5196:	d005      	beq.n	51a4 <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5198:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    519c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    51a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    51a4:	4b37      	ldr	r3, [pc, #220]	; (5284 <opcode_0x40()+0x17c>)
    51a6:	781b      	ldrb	r3, [r3, #0]
    51a8:	b94b      	cbnz	r3, 51be <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    51aa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    51ae:	6813      	ldr	r3, [r2, #0]
    51b0:	04d9      	lsls	r1, r3, #19
    51b2:	d4fc      	bmi.n	51ae <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    51b4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    51b8:	6813      	ldr	r3, [r2, #0]
    51ba:	04db      	lsls	r3, r3, #19
    51bc:	d5fc      	bpl.n	51b8 <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    51be:	4d32      	ldr	r5, [pc, #200]	; (5288 <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51c0:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    51c4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    51c6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    51c8:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51ca:	4f30      	ldr	r7, [pc, #192]	; (528c <opcode_0x40()+0x184>)
    51cc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    51d0:	4b2f      	ldr	r3, [pc, #188]	; (5290 <opcode_0x40()+0x188>)
    51d2:	6832      	ldr	r2, [r6, #0]
    51d4:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    51d6:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51d8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    51dc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51e0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    51e2:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    51e6:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51ea:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    51ec:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    51f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51f4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    51f6:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    51f8:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    51fa:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    51fc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5200:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5206:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5208:	4a22      	ldr	r2, [pc, #136]	; (5294 <opcode_0x40()+0x18c>)
    520a:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    520c:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    520e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5210:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5212:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5216:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    521a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    521e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    5220:	0342      	lsls	r2, r0, #13
    5222:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5226:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5228:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    522a:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5232:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5234:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5236:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    523a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    523e:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5240:	683a      	ldr	r2, [r7, #0]
    5242:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5246:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5248:	4a13      	ldr	r2, [pc, #76]	; (5298 <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    524a:	4333      	orrs	r3, r6
    524c:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    524e:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5250:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5252:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5256:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5258:	4323      	orrs	r3, r4
    525a:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    525c:	430b      	orrs	r3, r1
    525e:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    5260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5262:	4b0e      	ldr	r3, [pc, #56]	; (529c <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    5264:	781b      	ldrb	r3, [r3, #0]
    5266:	2b01      	cmp	r3, #1
    5268:	d98f      	bls.n	518a <opcode_0x40()+0x82>
    526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    526c:	20018890 	.word	0x20018890
    5270:	20004aa1 	.word	0x20004aa1
    5274:	20004aa0 	.word	0x20004aa0
    5278:	2001888c 	.word	0x2001888c
    527c:	200188b0 	.word	0x200188b0
    5280:	200188a9 	.word	0x200188a9
    5284:	20004a9e 	.word	0x20004a9e
    5288:	42004000 	.word	0x42004000
    528c:	42008000 	.word	0x42008000
    5290:	6dfffff3 	.word	0x6dfffff3
    5294:	cff3efff 	.word	0xcff3efff
    5298:	7fffff6f 	.word	0x7fffff6f
    529c:	200188a0 	.word	0x200188a0

000052a0 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    52a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    52a2:	4d55      	ldr	r5, [pc, #340]	; (53f8 <opcode_0x60()+0x158>)
    52a4:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    52a6:	4e55      	ldr	r6, [pc, #340]	; (53fc <opcode_0x60()+0x15c>)
    52a8:	8828      	ldrh	r0, [r5, #0]
    52aa:	3001      	adds	r0, #1
    52ac:	b280      	uxth	r0, r0
    52ae:	f7fd fb81 	bl	29b4 <read_byte(unsigned short, bool)>
    52b2:	7830      	ldrb	r0, [r6, #0]
    52b4:	2100      	movs	r1, #0
    52b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    52ba:	f7fd fb7b 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    52be:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52c0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    52c2:	3301      	adds	r3, #1
    52c4:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    52c6:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    52ca:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52cc:	f7fd fb72 	bl	29b4 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    52d0:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52d2:	4604      	mov	r4, r0
    52d4:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    52d6:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 3;
    52d8:	3403      	adds	r4, #3
    52da:	b2c0      	uxtb	r0, r0
    52dc:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    52de:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    52e2:	f7fd fb67 	bl	29b4 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    52e6:	2100      	movs	r1, #0
    register_pc = pch + pcl + 3;
    52e8:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    52ec:	b280      	uxth	r0, r0
    52ee:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    52f0:	f7fd fb60 	bl	29b4 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    52f4:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    52f6:	4b42      	ldr	r3, [pc, #264]	; (5400 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    52f8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    52fc:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    52fe:	d376      	bcc.n	53ee <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    5300:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    5304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5308:	d305      	bcc.n	5316 <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    530a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    530e:	b29b      	uxth	r3, r3
    5310:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    5314:	d36b      	bcc.n	53ee <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5316:	4b3b      	ldr	r3, [pc, #236]	; (5404 <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    5318:	2100      	movs	r1, #0
    531a:	4a3b      	ldr	r2, [pc, #236]	; (5408 <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    531c:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    531e:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5320:	2b01      	cmp	r3, #1
    5322:	d005      	beq.n	5330 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5324:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5328:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    532c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    5330:	4b36      	ldr	r3, [pc, #216]	; (540c <opcode_0x60()+0x16c>)
    5332:	781b      	ldrb	r3, [r3, #0]
    5334:	b94b      	cbnz	r3, 534a <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    5336:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    533a:	6813      	ldr	r3, [r2, #0]
    533c:	04d9      	lsls	r1, r3, #19
    533e:	d4fc      	bmi.n	533a <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    5340:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5344:	6813      	ldr	r3, [r2, #0]
    5346:	04db      	lsls	r3, r3, #19
    5348:	d5fc      	bpl.n	5344 <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    534a:	4d31      	ldr	r5, [pc, #196]	; (5410 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    534c:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    5350:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    5352:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5354:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5356:	4f2f      	ldr	r7, [pc, #188]	; (5414 <opcode_0x60()+0x174>)
    5358:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    535c:	4b2e      	ldr	r3, [pc, #184]	; (5418 <opcode_0x60()+0x178>)
    535e:	6832      	ldr	r2, [r6, #0]
    5360:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5362:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5364:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5368:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    536c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    536e:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    5372:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5376:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5378:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    537c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5380:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5382:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5384:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5386:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5388:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    538c:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    538e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5392:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5394:	4a21      	ldr	r2, [pc, #132]	; (541c <opcode_0x60()+0x17c>)
    5396:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5398:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    539a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    539c:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    539e:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    53a2:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    53a6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    53aa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    53ac:	0342      	lsls	r2, r0, #13
    53ae:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    53b2:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    53b4:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    53b6:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    53ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    53be:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53c0:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53c2:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53c6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    53ca:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53cc:	683a      	ldr	r2, [r7, #0]
    53ce:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    53d2:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53d4:	4a12      	ldr	r2, [pc, #72]	; (5420 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    53d6:	4333      	orrs	r3, r6
    53d8:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53da:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53dc:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53de:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53e2:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    53e4:	4323      	orrs	r3, r4
    53e6:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    53e8:	430b      	orrs	r3, r1
    53ea:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    53ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    53ee:	4b0d      	ldr	r3, [pc, #52]	; (5424 <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b01      	cmp	r3, #1
    53f4:	d98f      	bls.n	5316 <opcode_0x60()+0x76>
    53f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f8:	20018890 	.word	0x20018890
    53fc:	20004aa1 	.word	0x20004aa1
    5400:	2001888c 	.word	0x2001888c
    5404:	200188b0 	.word	0x200188b0
    5408:	200188a9 	.word	0x200188a9
    540c:	20004a9e 	.word	0x20004a9e
    5410:	42004000 	.word	0x42004000
    5414:	42008000 	.word	0x42008000
    5418:	6dfffff3 	.word	0x6dfffff3
    541c:	cff3efff 	.word	0xcff3efff
    5420:	7fffff6f 	.word	0x7fffff6f
    5424:	200188a0 	.word	0x200188a0

00005428 <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    5428:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    542a:	4d18      	ldr	r5, [pc, #96]	; (548c <opcode_0x07()+0x64>)
    542c:	b083      	sub	sp, #12
    542e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5430:	4c17      	ldr	r4, [pc, #92]	; (5490 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    5432:	8828      	ldrh	r0, [r5, #0]
    5434:	3001      	adds	r0, #1
    5436:	b280      	uxth	r0, r0
    5438:	f7fd fabc 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    543c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    543e:	b280      	uxth	r0, r0
    5440:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5442:	f7fd fab7 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5446:	4a13      	ldr	r2, [pc, #76]	; (5494 <opcode_0x07()+0x6c>)
    5448:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    544a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    544e:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5450:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5452:	bf4c      	ite	mi
    5454:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5458:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    545c:	9101      	str	r1, [sp, #4]
    545e:	7013      	strb	r3, [r2, #0]
    5460:	4b0d      	ldr	r3, [pc, #52]	; (5498 <opcode_0x07()+0x70>)
    5462:	7818      	ldrb	r0, [r3, #0]
    5464:	4308      	orrs	r0, r1
    5466:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5468:	f7fd fd6c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    546c:	9901      	ldr	r1, [sp, #4]
    546e:	8820      	ldrh	r0, [r4, #0]
    5470:	f7fd fc5c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5474:	8820      	ldrh	r0, [r4, #0]
    5476:	9901      	ldr	r1, [sp, #4]
    5478:	f7fd fc58 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    547c:	4a07      	ldr	r2, [pc, #28]	; (549c <opcode_0x07()+0x74>)
    547e:	882b      	ldrh	r3, [r5, #0]
    5480:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    5484:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    5486:	b280      	uxth	r0, r0
    5488:	b003      	add	sp, #12
    548a:	bd30      	pop	{r4, r5, pc}
    548c:	20018890 	.word	0x20018890
    5490:	2001888e 	.word	0x2001888e
    5494:	20004aa0 	.word	0x20004aa0
    5498:	200188ac 	.word	0x200188ac
    549c:	20015418 	.word	0x20015418

000054a0 <opcode_0x17()>:
uint16_t opcode_0x17() {
    54a0:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54a2:	4c14      	ldr	r4, [pc, #80]	; (54f4 <opcode_0x17()+0x54>)
uint16_t opcode_0x17() {
    54a4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    54a6:	f7fd fd81 	bl	2fac <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54aa:	0602      	lsls	r2, r0, #24
    54ac:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    54ae:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    54b2:	4a11      	ldr	r2, [pc, #68]	; (54f8 <opcode_0x17()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54b4:	bf4c      	ite	mi
    54b6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    54ba:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    54be:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    54c0:	b2c9      	uxtb	r1, r1
    54c2:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    54c4:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    54c6:	4c0d      	ldr	r4, [pc, #52]	; (54fc <opcode_0x17()+0x5c>)
    54c8:	9101      	str	r1, [sp, #4]
    54ca:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    54cc:	f7fd fd3a 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    54d0:	8820      	ldrh	r0, [r4, #0]
    54d2:	9901      	ldr	r1, [sp, #4]
    54d4:	f7fd fc2a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    54d8:	8820      	ldrh	r0, [r4, #0]
    54da:	9901      	ldr	r1, [sp, #4]
    54dc:	f7fd fc26 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    54e0:	4a07      	ldr	r2, [pc, #28]	; (5500 <opcode_0x17()+0x60>)
    54e2:	4b08      	ldr	r3, [pc, #32]	; (5504 <opcode_0x17()+0x64>)
    54e4:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    54e8:	881b      	ldrh	r3, [r3, #0]
    54ea:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    54ec:	b280      	uxth	r0, r0
    54ee:	b002      	add	sp, #8
    54f0:	bd10      	pop	{r4, pc}
    54f2:	bf00      	nop
    54f4:	20004aa0 	.word	0x20004aa0
    54f8:	200188ac 	.word	0x200188ac
    54fc:	2001888e 	.word	0x2001888e
    5500:	20015418 	.word	0x20015418
    5504:	20018890 	.word	0x20018890

00005508 <opcode_0x03()>:
uint16_t opcode_0x03() {
    5508:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    550a:	4c14      	ldr	r4, [pc, #80]	; (555c <opcode_0x03()+0x54>)
uint16_t opcode_0x03() {
    550c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    550e:	f7fd fe09 	bl	3124 <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5512:	0602      	lsls	r2, r0, #24
    5514:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    5516:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    551a:	4a11      	ldr	r2, [pc, #68]	; (5560 <opcode_0x03()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    551c:	bf4c      	ite	mi
    551e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5522:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5526:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5528:	b2c9      	uxtb	r1, r1
    552a:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    552c:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    552e:	4c0d      	ldr	r4, [pc, #52]	; (5564 <opcode_0x03()+0x5c>)
    5530:	9101      	str	r1, [sp, #4]
    5532:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5534:	f7fd fd06 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5538:	8820      	ldrh	r0, [r4, #0]
    553a:	9901      	ldr	r1, [sp, #4]
    553c:	f7fd fbf6 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5540:	8820      	ldrh	r0, [r4, #0]
    5542:	9901      	ldr	r1, [sp, #4]
    5544:	f7fd fbf2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    5548:	4a07      	ldr	r2, [pc, #28]	; (5568 <opcode_0x03()+0x60>)
    554a:	4b08      	ldr	r3, [pc, #32]	; (556c <opcode_0x03()+0x64>)
    554c:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    5550:	881b      	ldrh	r3, [r3, #0]
    5552:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    5554:	b280      	uxth	r0, r0
    5556:	b002      	add	sp, #8
    5558:	bd10      	pop	{r4, pc}
    555a:	bf00      	nop
    555c:	20004aa0 	.word	0x20004aa0
    5560:	200188ac 	.word	0x200188ac
    5564:	2001888e 	.word	0x2001888e
    5568:	20015418 	.word	0x20015418
    556c:	20018890 	.word	0x20018890

00005570 <opcode_0x13()>:
uint16_t opcode_0x13() {
    5570:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5572:	4c14      	ldr	r4, [pc, #80]	; (55c4 <opcode_0x13()+0x54>)
uint16_t opcode_0x13() {
    5574:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    5576:	2001      	movs	r0, #1
    5578:	f7fd fdfe 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    557c:	7823      	ldrb	r3, [r4, #0]
    557e:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5580:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5584:	4a10      	ldr	r2, [pc, #64]	; (55c8 <opcode_0x13()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5586:	bf4c      	ite	mi
    5588:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    558c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5590:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5592:	b2c9      	uxtb	r1, r1
    5594:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5596:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5598:	4c0c      	ldr	r4, [pc, #48]	; (55cc <opcode_0x13()+0x5c>)
    559a:	9101      	str	r1, [sp, #4]
    559c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    559e:	f7fd fcd1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    55a2:	8820      	ldrh	r0, [r4, #0]
    55a4:	9901      	ldr	r1, [sp, #4]
    55a6:	f7fd fbc1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55aa:	8820      	ldrh	r0, [r4, #0]
    55ac:	9901      	ldr	r1, [sp, #4]
    55ae:	f7fd fbbd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    55b2:	4a07      	ldr	r2, [pc, #28]	; (55d0 <opcode_0x13()+0x60>)
    55b4:	4b07      	ldr	r3, [pc, #28]	; (55d4 <opcode_0x13()+0x64>)
    55b6:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    55ba:	881b      	ldrh	r3, [r3, #0]
    55bc:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    55be:	b280      	uxth	r0, r0
    55c0:	b002      	add	sp, #8
    55c2:	bd10      	pop	{r4, pc}
    55c4:	20004aa0 	.word	0x20004aa0
    55c8:	200188ac 	.word	0x200188ac
    55cc:	2001888e 	.word	0x2001888e
    55d0:	20015418 	.word	0x20015418
    55d4:	20018890 	.word	0x20018890

000055d8 <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    55d8:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55da:	4c14      	ldr	r4, [pc, #80]	; (562c <opcode_0x0F()+0x54>)
uint16_t opcode_0x0F() {
    55dc:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    55de:	f7fd fd25 	bl	302c <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55e2:	0602      	lsls	r2, r0, #24
    55e4:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    55e6:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    55ea:	4a11      	ldr	r2, [pc, #68]	; (5630 <opcode_0x0F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55ec:	bf4c      	ite	mi
    55ee:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    55f2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    55f6:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    55f8:	b2c9      	uxtb	r1, r1
    55fa:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    55fc:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    55fe:	4c0d      	ldr	r4, [pc, #52]	; (5634 <opcode_0x0F()+0x5c>)
    5600:	9101      	str	r1, [sp, #4]
    5602:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5604:	f7fd fc9e 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5608:	8820      	ldrh	r0, [r4, #0]
    560a:	9901      	ldr	r1, [sp, #4]
    560c:	f7fd fb8e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5610:	8820      	ldrh	r0, [r4, #0]
    5612:	9901      	ldr	r1, [sp, #4]
    5614:	f7fd fb8a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    5618:	4a07      	ldr	r2, [pc, #28]	; (5638 <opcode_0x0F()+0x60>)
    561a:	4b08      	ldr	r3, [pc, #32]	; (563c <opcode_0x0F()+0x64>)
    561c:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    5620:	881b      	ldrh	r3, [r3, #0]
    5622:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    5624:	b280      	uxth	r0, r0
    5626:	b002      	add	sp, #8
    5628:	bd10      	pop	{r4, pc}
    562a:	bf00      	nop
    562c:	20004aa0 	.word	0x20004aa0
    5630:	200188ac 	.word	0x200188ac
    5634:	2001888e 	.word	0x2001888e
    5638:	20015418 	.word	0x20015418
    563c:	20018890 	.word	0x20018890

00005640 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    5640:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5642:	4c14      	ldr	r4, [pc, #80]	; (5694 <opcode_0x1F()+0x54>)
uint16_t opcode_0x1F() {
    5644:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    5646:	2001      	movs	r0, #1
    5648:	f7fd fd0c 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    564c:	7823      	ldrb	r3, [r4, #0]
    564e:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5650:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5654:	4a10      	ldr	r2, [pc, #64]	; (5698 <opcode_0x1F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5656:	bf4c      	ite	mi
    5658:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    565c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5660:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5662:	b2c9      	uxtb	r1, r1
    5664:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5666:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5668:	4c0c      	ldr	r4, [pc, #48]	; (569c <opcode_0x1F()+0x5c>)
    566a:	9101      	str	r1, [sp, #4]
    566c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    566e:	f7fd fc69 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5672:	8820      	ldrh	r0, [r4, #0]
    5674:	9901      	ldr	r1, [sp, #4]
    5676:	f7fd fb59 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    567a:	8820      	ldrh	r0, [r4, #0]
    567c:	9901      	ldr	r1, [sp, #4]
    567e:	f7fd fb55 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    5682:	4a07      	ldr	r2, [pc, #28]	; (56a0 <opcode_0x1F()+0x60>)
    5684:	4b07      	ldr	r3, [pc, #28]	; (56a4 <opcode_0x1F()+0x64>)
    5686:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    568a:	881b      	ldrh	r3, [r3, #0]
    568c:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    568e:	b280      	uxth	r0, r0
    5690:	b002      	add	sp, #8
    5692:	bd10      	pop	{r4, pc}
    5694:	20004aa0 	.word	0x20004aa0
    5698:	200188ac 	.word	0x200188ac
    569c:	2001888e 	.word	0x2001888e
    56a0:	20015418 	.word	0x20015418
    56a4:	20018890 	.word	0x20018890

000056a8 <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    56a8:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56aa:	4c14      	ldr	r4, [pc, #80]	; (56fc <opcode_0x1B()+0x54>)
uint16_t opcode_0x1B() {
    56ac:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    56ae:	2001      	movs	r0, #1
    56b0:	f7fd fd08 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56b4:	7823      	ldrb	r3, [r4, #0]
    56b6:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    56b8:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    56bc:	4a10      	ldr	r2, [pc, #64]	; (5700 <opcode_0x1B()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56be:	bf4c      	ite	mi
    56c0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    56c4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    56c8:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    56ca:	b2c9      	uxtb	r1, r1
    56cc:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    56ce:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    56d0:	4c0c      	ldr	r4, [pc, #48]	; (5704 <opcode_0x1B()+0x5c>)
    56d2:	9101      	str	r1, [sp, #4]
    56d4:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    56d6:	f7fd fc35 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    56da:	8820      	ldrh	r0, [r4, #0]
    56dc:	9901      	ldr	r1, [sp, #4]
    56de:	f7fd fb25 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    56e2:	8820      	ldrh	r0, [r4, #0]
    56e4:	9901      	ldr	r1, [sp, #4]
    56e6:	f7fd fb21 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    56ea:	4a07      	ldr	r2, [pc, #28]	; (5708 <opcode_0x1B()+0x60>)
    56ec:	4b07      	ldr	r3, [pc, #28]	; (570c <opcode_0x1B()+0x64>)
    56ee:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    56f2:	881b      	ldrh	r3, [r3, #0]
    56f4:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    56f6:	b280      	uxth	r0, r0
    56f8:	b002      	add	sp, #8
    56fa:	bd10      	pop	{r4, pc}
    56fc:	20004aa0 	.word	0x20004aa0
    5700:	200188ac 	.word	0x200188ac
    5704:	2001888e 	.word	0x2001888e
    5708:	20015418 	.word	0x20015418
    570c:	20018890 	.word	0x20018890

00005710 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    5710:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5712:	4d1a      	ldr	r5, [pc, #104]	; (577c <opcode_0x27()+0x6c>)
    5714:	b083      	sub	sp, #12
    5716:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5718:	4c19      	ldr	r4, [pc, #100]	; (5780 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    571a:	8828      	ldrh	r0, [r5, #0]
    571c:	3001      	adds	r0, #1
    571e:	b280      	uxth	r0, r0
    5720:	f7fd f948 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5724:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5726:	b280      	uxth	r0, r0
    5728:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    572a:	f7fd f943 	bl	29b4 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    572e:	4915      	ldr	r1, [pc, #84]	; (5784 <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5730:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5734:	780a      	ldrb	r2, [r1, #0]
    5736:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    573a:	bf14      	ite	ne
    573c:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5740:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5744:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5748:	4b0f      	ldr	r3, [pc, #60]	; (5788 <opcode_0x27()+0x78>)
    574a:	700a      	strb	r2, [r1, #0]
    574c:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    574e:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5750:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    5752:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5754:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5756:	f7fd fbf5 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    575a:	9901      	ldr	r1, [sp, #4]
    575c:	8820      	ldrh	r0, [r4, #0]
    575e:	f7fd fae5 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5762:	8820      	ldrh	r0, [r4, #0]
    5764:	9901      	ldr	r1, [sp, #4]
    5766:	f7fd fae1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    576a:	4a08      	ldr	r2, [pc, #32]	; (578c <opcode_0x27()+0x7c>)
    576c:	882b      	ldrh	r3, [r5, #0]
    576e:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    5772:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    5774:	b280      	uxth	r0, r0
    5776:	b003      	add	sp, #12
    5778:	bd30      	pop	{r4, r5, pc}
    577a:	bf00      	nop
    577c:	20018890 	.word	0x20018890
    5780:	2001888e 	.word	0x2001888e
    5784:	20004aa0 	.word	0x20004aa0
    5788:	200188ac 	.word	0x200188ac
    578c:	20015418 	.word	0x20015418

00005790 <opcode_0x37()>:
uint16_t opcode_0x37() {
    5790:	b530      	push	{r4, r5, lr}
    5792:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    5794:	4d14      	ldr	r5, [pc, #80]	; (57e8 <opcode_0x37()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    5796:	f7fd fc09 	bl	2fac <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    579a:	4914      	ldr	r1, [pc, #80]	; (57ec <opcode_0x37()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    579c:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    579e:	4c14      	ldr	r4, [pc, #80]	; (57f0 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    57a0:	780a      	ldrb	r2, [r1, #0]
    57a2:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    57a6:	bf4c      	ite	mi
    57a8:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    57ac:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    57b0:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    57b4:	782b      	ldrb	r3, [r5, #0]
    57b6:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    57b8:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    57ba:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    57bc:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    57be:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    57c0:	f7fd fbc0 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    57c4:	8820      	ldrh	r0, [r4, #0]
    57c6:	9901      	ldr	r1, [sp, #4]
    57c8:	f7fd fab0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    57cc:	8820      	ldrh	r0, [r4, #0]
    57ce:	9901      	ldr	r1, [sp, #4]
    57d0:	f7fd faac 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    57d4:	4a07      	ldr	r2, [pc, #28]	; (57f4 <opcode_0x37()+0x64>)
    57d6:	4b08      	ldr	r3, [pc, #32]	; (57f8 <opcode_0x37()+0x68>)
    57d8:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    57dc:	881b      	ldrh	r3, [r3, #0]
    57de:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    57e0:	b280      	uxth	r0, r0
    57e2:	b003      	add	sp, #12
    57e4:	bd30      	pop	{r4, r5, pc}
    57e6:	bf00      	nop
    57e8:	200188ac 	.word	0x200188ac
    57ec:	20004aa0 	.word	0x20004aa0
    57f0:	2001888e 	.word	0x2001888e
    57f4:	20015418 	.word	0x20015418
    57f8:	20018890 	.word	0x20018890

000057fc <opcode_0x23()>:
uint16_t opcode_0x23() {
    57fc:	b530      	push	{r4, r5, lr}
    57fe:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    5800:	4d14      	ldr	r5, [pc, #80]	; (5854 <opcode_0x23()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    5802:	f7fd fc8f 	bl	3124 <Fetch_Indexed_Indirect_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5806:	4914      	ldr	r1, [pc, #80]	; (5858 <opcode_0x23()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5808:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    580a:	4c14      	ldr	r4, [pc, #80]	; (585c <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    580c:	780a      	ldrb	r2, [r1, #0]
    580e:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5812:	bf4c      	ite	mi
    5814:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5818:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    581c:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5820:	782b      	ldrb	r3, [r5, #0]
    5822:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5824:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5826:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5828:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    582a:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    582c:	f7fd fb8a 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5830:	8820      	ldrh	r0, [r4, #0]
    5832:	9901      	ldr	r1, [sp, #4]
    5834:	f7fd fa7a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5838:	8820      	ldrh	r0, [r4, #0]
    583a:	9901      	ldr	r1, [sp, #4]
    583c:	f7fd fa76 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    5840:	4a07      	ldr	r2, [pc, #28]	; (5860 <opcode_0x23()+0x64>)
    5842:	4b08      	ldr	r3, [pc, #32]	; (5864 <opcode_0x23()+0x68>)
    5844:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    5848:	881b      	ldrh	r3, [r3, #0]
    584a:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    584c:	b280      	uxth	r0, r0
    584e:	b003      	add	sp, #12
    5850:	bd30      	pop	{r4, r5, pc}
    5852:	bf00      	nop
    5854:	200188ac 	.word	0x200188ac
    5858:	20004aa0 	.word	0x20004aa0
    585c:	2001888e 	.word	0x2001888e
    5860:	20015418 	.word	0x20015418
    5864:	20018890 	.word	0x20018890

00005868 <opcode_0x33()>:
uint16_t opcode_0x33() {
    5868:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    586a:	2001      	movs	r0, #1
uint16_t opcode_0x33() {
    586c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    586e:	f7fd fc83 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5872:	4913      	ldr	r1, [pc, #76]	; (58c0 <opcode_0x33()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5874:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    5876:	4d13      	ldr	r5, [pc, #76]	; (58c4 <opcode_0x33()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5878:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    587a:	4c13      	ldr	r4, [pc, #76]	; (58c8 <opcode_0x33()+0x60>)
    587c:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5880:	bf4c      	ite	mi
    5882:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5886:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    588a:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    588e:	782b      	ldrb	r3, [r5, #0]
    5890:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5892:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5894:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5896:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5898:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    589a:	f7fd fb53 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    589e:	8820      	ldrh	r0, [r4, #0]
    58a0:	9901      	ldr	r1, [sp, #4]
    58a2:	f7fd fa43 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58a6:	8820      	ldrh	r0, [r4, #0]
    58a8:	9901      	ldr	r1, [sp, #4]
    58aa:	f7fd fa3f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    58ae:	4a07      	ldr	r2, [pc, #28]	; (58cc <opcode_0x33()+0x64>)
    58b0:	4b07      	ldr	r3, [pc, #28]	; (58d0 <opcode_0x33()+0x68>)
    58b2:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    58b6:	881b      	ldrh	r3, [r3, #0]
    58b8:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    58ba:	b280      	uxth	r0, r0
    58bc:	b003      	add	sp, #12
    58be:	bd30      	pop	{r4, r5, pc}
    58c0:	20004aa0 	.word	0x20004aa0
    58c4:	200188ac 	.word	0x200188ac
    58c8:	2001888e 	.word	0x2001888e
    58cc:	20015418 	.word	0x20015418
    58d0:	20018890 	.word	0x20018890

000058d4 <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    58d4:	b530      	push	{r4, r5, lr}
    58d6:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    58d8:	4d14      	ldr	r5, [pc, #80]	; (592c <opcode_0x2F()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    58da:	f7fd fba7 	bl	302c <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    58de:	4914      	ldr	r1, [pc, #80]	; (5930 <opcode_0x2F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    58e0:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    58e2:	4c14      	ldr	r4, [pc, #80]	; (5934 <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    58e4:	780a      	ldrb	r2, [r1, #0]
    58e6:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    58ea:	bf4c      	ite	mi
    58ec:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58f0:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    58f4:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    58f8:	782b      	ldrb	r3, [r5, #0]
    58fa:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    58fc:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    58fe:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5900:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5902:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5904:	f7fd fb1e 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5908:	8820      	ldrh	r0, [r4, #0]
    590a:	9901      	ldr	r1, [sp, #4]
    590c:	f7fd fa0e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5910:	8820      	ldrh	r0, [r4, #0]
    5912:	9901      	ldr	r1, [sp, #4]
    5914:	f7fd fa0a 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    5918:	4a07      	ldr	r2, [pc, #28]	; (5938 <opcode_0x2F()+0x64>)
    591a:	4b08      	ldr	r3, [pc, #32]	; (593c <opcode_0x2F()+0x68>)
    591c:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    5920:	881b      	ldrh	r3, [r3, #0]
    5922:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    5924:	b280      	uxth	r0, r0
    5926:	b003      	add	sp, #12
    5928:	bd30      	pop	{r4, r5, pc}
    592a:	bf00      	nop
    592c:	200188ac 	.word	0x200188ac
    5930:	20004aa0 	.word	0x20004aa0
    5934:	2001888e 	.word	0x2001888e
    5938:	20015418 	.word	0x20015418
    593c:	20018890 	.word	0x20018890

00005940 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    5940:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    5942:	2001      	movs	r0, #1
uint16_t opcode_0x3F() {
    5944:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    5946:	f7fd fb8d 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    594a:	4913      	ldr	r1, [pc, #76]	; (5998 <opcode_0x3F()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    594c:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    594e:	4d13      	ldr	r5, [pc, #76]	; (599c <opcode_0x3F()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5950:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5952:	4c13      	ldr	r4, [pc, #76]	; (59a0 <opcode_0x3F()+0x60>)
    5954:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5958:	bf4c      	ite	mi
    595a:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    595e:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5962:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5966:	782b      	ldrb	r3, [r5, #0]
    5968:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    596a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    596c:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    596e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5970:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5972:	f7fd fae7 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5976:	8820      	ldrh	r0, [r4, #0]
    5978:	9901      	ldr	r1, [sp, #4]
    597a:	f7fd f9d7 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    597e:	8820      	ldrh	r0, [r4, #0]
    5980:	9901      	ldr	r1, [sp, #4]
    5982:	f7fd f9d3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    5986:	4a07      	ldr	r2, [pc, #28]	; (59a4 <opcode_0x3F()+0x64>)
    5988:	4b07      	ldr	r3, [pc, #28]	; (59a8 <opcode_0x3F()+0x68>)
    598a:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    598e:	881b      	ldrh	r3, [r3, #0]
    5990:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    5992:	b280      	uxth	r0, r0
    5994:	b003      	add	sp, #12
    5996:	bd30      	pop	{r4, r5, pc}
    5998:	20004aa0 	.word	0x20004aa0
    599c:	200188ac 	.word	0x200188ac
    59a0:	2001888e 	.word	0x2001888e
    59a4:	20015418 	.word	0x20015418
    59a8:	20018890 	.word	0x20018890

000059ac <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    59ac:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    59ae:	2001      	movs	r0, #1
uint16_t opcode_0x3B() {
    59b0:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    59b2:	f7fd fb87 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59b6:	4913      	ldr	r1, [pc, #76]	; (5a04 <opcode_0x3B()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59b8:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    59ba:	4d13      	ldr	r5, [pc, #76]	; (5a08 <opcode_0x3B()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59bc:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    59be:	4c13      	ldr	r4, [pc, #76]	; (5a0c <opcode_0x3B()+0x60>)
    59c0:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59c4:	bf4c      	ite	mi
    59c6:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59ca:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    59ce:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    59d2:	782b      	ldrb	r3, [r5, #0]
    59d4:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    59d6:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    59d8:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    59da:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    59dc:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    59de:	f7fd fab1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    59e2:	8820      	ldrh	r0, [r4, #0]
    59e4:	9901      	ldr	r1, [sp, #4]
    59e6:	f7fd f9a1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59ea:	8820      	ldrh	r0, [r4, #0]
    59ec:	9901      	ldr	r1, [sp, #4]
    59ee:	f7fd f99d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    59f2:	4a07      	ldr	r2, [pc, #28]	; (5a10 <opcode_0x3B()+0x64>)
    59f4:	4b07      	ldr	r3, [pc, #28]	; (5a14 <opcode_0x3B()+0x68>)
    59f6:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    59fa:	881b      	ldrh	r3, [r3, #0]
    59fc:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    59fe:	b280      	uxth	r0, r0
    5a00:	b003      	add	sp, #12
    5a02:	bd30      	pop	{r4, r5, pc}
    5a04:	20004aa0 	.word	0x20004aa0
    5a08:	200188ac 	.word	0x200188ac
    5a0c:	2001888e 	.word	0x2001888e
    5a10:	20015418 	.word	0x20015418
    5a14:	20018890 	.word	0x20018890

00005a18 <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    5a18:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5a1a:	4d18      	ldr	r5, [pc, #96]	; (5a7c <opcode_0x47()+0x64>)
    5a1c:	b083      	sub	sp, #12
    5a1e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a20:	4c17      	ldr	r4, [pc, #92]	; (5a80 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    5a22:	8828      	ldrh	r0, [r5, #0]
    5a24:	3001      	adds	r0, #1
    5a26:	b280      	uxth	r0, r0
    5a28:	f7fc ffc4 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5a2c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a2e:	b280      	uxth	r0, r0
    5a30:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5a32:	f7fc ffbf 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a36:	4a13      	ldr	r2, [pc, #76]	; (5a84 <opcode_0x47()+0x6c>)
    5a38:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5a3a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a3e:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5a40:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a42:	bf4c      	ite	mi
    5a44:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a48:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5a4c:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5a4e:	4b0e      	ldr	r3, [pc, #56]	; (5a88 <opcode_0x47()+0x70>)
    5a50:	7818      	ldrb	r0, [r3, #0]
    5a52:	4048      	eors	r0, r1
    5a54:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5a56:	f7fd fa75 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5a5a:	9901      	ldr	r1, [sp, #4]
    5a5c:	8820      	ldrh	r0, [r4, #0]
    5a5e:	f7fd f965 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a62:	8820      	ldrh	r0, [r4, #0]
    5a64:	9901      	ldr	r1, [sp, #4]
    5a66:	f7fd f961 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    5a6a:	4a08      	ldr	r2, [pc, #32]	; (5a8c <opcode_0x47()+0x74>)
    5a6c:	882b      	ldrh	r3, [r5, #0]
    5a6e:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    5a72:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    5a74:	b280      	uxth	r0, r0
    5a76:	b003      	add	sp, #12
    5a78:	bd30      	pop	{r4, r5, pc}
    5a7a:	bf00      	nop
    5a7c:	20018890 	.word	0x20018890
    5a80:	2001888e 	.word	0x2001888e
    5a84:	20004aa0 	.word	0x20004aa0
    5a88:	200188ac 	.word	0x200188ac
    5a8c:	20015418 	.word	0x20015418

00005a90 <opcode_0x57()>:
uint16_t opcode_0x57() {
    5a90:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a92:	4c13      	ldr	r4, [pc, #76]	; (5ae0 <opcode_0x57()+0x50>)
uint16_t opcode_0x57() {
    5a94:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    5a96:	f7fd fa89 	bl	2fac <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5a9a:	07c2      	lsls	r2, r0, #31
    5a9c:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5a9e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5aa2:	4a10      	ldr	r2, [pc, #64]	; (5ae4 <opcode_0x57()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5aa4:	bf4c      	ite	mi
    5aa6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5aaa:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5aae:	7810      	ldrb	r0, [r2, #0]
    5ab0:	7023      	strb	r3, [r4, #0]
    5ab2:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5ab4:	4c0c      	ldr	r4, [pc, #48]	; (5ae8 <opcode_0x57()+0x58>)
    5ab6:	9101      	str	r1, [sp, #4]
    5ab8:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5aba:	f7fd fa43 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5abe:	8820      	ldrh	r0, [r4, #0]
    5ac0:	9901      	ldr	r1, [sp, #4]
    5ac2:	f7fd f933 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ac6:	8820      	ldrh	r0, [r4, #0]
    5ac8:	9901      	ldr	r1, [sp, #4]
    5aca:	f7fd f92f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    5ace:	4a07      	ldr	r2, [pc, #28]	; (5aec <opcode_0x57()+0x5c>)
    5ad0:	4b07      	ldr	r3, [pc, #28]	; (5af0 <opcode_0x57()+0x60>)
    5ad2:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    5ad6:	881b      	ldrh	r3, [r3, #0]
    5ad8:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    5ada:	b280      	uxth	r0, r0
    5adc:	b002      	add	sp, #8
    5ade:	bd10      	pop	{r4, pc}
    5ae0:	20004aa0 	.word	0x20004aa0
    5ae4:	200188ac 	.word	0x200188ac
    5ae8:	2001888e 	.word	0x2001888e
    5aec:	20016418 	.word	0x20016418
    5af0:	20018890 	.word	0x20018890

00005af4 <opcode_0x43()>:
uint16_t opcode_0x43() {
    5af4:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5af6:	4c13      	ldr	r4, [pc, #76]	; (5b44 <opcode_0x43()+0x50>)
uint16_t opcode_0x43() {
    5af8:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    5afa:	f7fd fb13 	bl	3124 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5afe:	07c2      	lsls	r2, r0, #31
    5b00:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5b02:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5b06:	4a10      	ldr	r2, [pc, #64]	; (5b48 <opcode_0x43()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b08:	bf4c      	ite	mi
    5b0a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b0e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5b12:	7810      	ldrb	r0, [r2, #0]
    5b14:	7023      	strb	r3, [r4, #0]
    5b16:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5b18:	4c0c      	ldr	r4, [pc, #48]	; (5b4c <opcode_0x43()+0x58>)
    5b1a:	9101      	str	r1, [sp, #4]
    5b1c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5b1e:	f7fd fa11 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b22:	8820      	ldrh	r0, [r4, #0]
    5b24:	9901      	ldr	r1, [sp, #4]
    5b26:	f7fd f901 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b2a:	8820      	ldrh	r0, [r4, #0]
    5b2c:	9901      	ldr	r1, [sp, #4]
    5b2e:	f7fd f8fd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    5b32:	4a07      	ldr	r2, [pc, #28]	; (5b50 <opcode_0x43()+0x5c>)
    5b34:	4b07      	ldr	r3, [pc, #28]	; (5b54 <opcode_0x43()+0x60>)
    5b36:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    5b3a:	881b      	ldrh	r3, [r3, #0]
    5b3c:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    5b3e:	b280      	uxth	r0, r0
    5b40:	b002      	add	sp, #8
    5b42:	bd10      	pop	{r4, pc}
    5b44:	20004aa0 	.word	0x20004aa0
    5b48:	200188ac 	.word	0x200188ac
    5b4c:	2001888e 	.word	0x2001888e
    5b50:	20015418 	.word	0x20015418
    5b54:	20018890 	.word	0x20018890

00005b58 <opcode_0x53()>:
uint16_t opcode_0x53() {
    5b58:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b5a:	4c14      	ldr	r4, [pc, #80]	; (5bac <opcode_0x53()+0x54>)
uint16_t opcode_0x53() {
    5b5c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    5b5e:	2001      	movs	r0, #1
    5b60:	f7fd fb0a 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b64:	7823      	ldrb	r3, [r4, #0]
    5b66:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5b68:	4a11      	ldr	r2, [pc, #68]	; (5bb0 <opcode_0x53()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5b6a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b6e:	bf4c      	ite	mi
    5b70:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b74:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5b78:	7810      	ldrb	r0, [r2, #0]
    5b7a:	7023      	strb	r3, [r4, #0]
    5b7c:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5b7e:	4c0d      	ldr	r4, [pc, #52]	; (5bb4 <opcode_0x53()+0x5c>)
    5b80:	9101      	str	r1, [sp, #4]
    5b82:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5b84:	f7fd f9de 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b88:	8820      	ldrh	r0, [r4, #0]
    5b8a:	9901      	ldr	r1, [sp, #4]
    5b8c:	f7fd f8ce 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b90:	8820      	ldrh	r0, [r4, #0]
    5b92:	9901      	ldr	r1, [sp, #4]
    5b94:	f7fd f8ca 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    5b98:	4a07      	ldr	r2, [pc, #28]	; (5bb8 <opcode_0x53()+0x60>)
    5b9a:	4b08      	ldr	r3, [pc, #32]	; (5bbc <opcode_0x53()+0x64>)
    5b9c:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    5ba0:	881b      	ldrh	r3, [r3, #0]
    5ba2:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    5ba4:	b280      	uxth	r0, r0
    5ba6:	b002      	add	sp, #8
    5ba8:	bd10      	pop	{r4, pc}
    5baa:	bf00      	nop
    5bac:	20004aa0 	.word	0x20004aa0
    5bb0:	200188ac 	.word	0x200188ac
    5bb4:	2001888e 	.word	0x2001888e
    5bb8:	20016418 	.word	0x20016418
    5bbc:	20018890 	.word	0x20018890

00005bc0 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    5bc0:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bc2:	4c13      	ldr	r4, [pc, #76]	; (5c10 <opcode_0x4F()+0x50>)
uint16_t opcode_0x4F() {
    5bc4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    5bc6:	f7fd fa31 	bl	302c <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bca:	07c2      	lsls	r2, r0, #31
    5bcc:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5bce:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5bd2:	4a10      	ldr	r2, [pc, #64]	; (5c14 <opcode_0x4F()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bd4:	bf4c      	ite	mi
    5bd6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5bda:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5bde:	7810      	ldrb	r0, [r2, #0]
    5be0:	7023      	strb	r3, [r4, #0]
    5be2:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5be4:	4c0c      	ldr	r4, [pc, #48]	; (5c18 <opcode_0x4F()+0x58>)
    5be6:	9101      	str	r1, [sp, #4]
    5be8:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5bea:	f7fd f9ab 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5bee:	8820      	ldrh	r0, [r4, #0]
    5bf0:	9901      	ldr	r1, [sp, #4]
    5bf2:	f7fd f89b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bf6:	8820      	ldrh	r0, [r4, #0]
    5bf8:	9901      	ldr	r1, [sp, #4]
    5bfa:	f7fd f897 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    5bfe:	4a07      	ldr	r2, [pc, #28]	; (5c1c <opcode_0x4F()+0x5c>)
    5c00:	4b07      	ldr	r3, [pc, #28]	; (5c20 <opcode_0x4F()+0x60>)
    5c02:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    5c06:	881b      	ldrh	r3, [r3, #0]
    5c08:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    5c0a:	b280      	uxth	r0, r0
    5c0c:	b002      	add	sp, #8
    5c0e:	bd10      	pop	{r4, pc}
    5c10:	20004aa0 	.word	0x20004aa0
    5c14:	200188ac 	.word	0x200188ac
    5c18:	2001888e 	.word	0x2001888e
    5c1c:	20016418 	.word	0x20016418
    5c20:	20018890 	.word	0x20018890

00005c24 <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    5c24:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c26:	4c14      	ldr	r4, [pc, #80]	; (5c78 <opcode_0x5F()+0x54>)
uint16_t opcode_0x5F() {
    5c28:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    5c2a:	2001      	movs	r0, #1
    5c2c:	f7fd fa1a 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c30:	7823      	ldrb	r3, [r4, #0]
    5c32:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5c34:	4a11      	ldr	r2, [pc, #68]	; (5c7c <opcode_0x5F()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5c36:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c3a:	bf4c      	ite	mi
    5c3c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c40:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5c44:	7810      	ldrb	r0, [r2, #0]
    5c46:	7023      	strb	r3, [r4, #0]
    5c48:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5c4a:	4c0d      	ldr	r4, [pc, #52]	; (5c80 <opcode_0x5F()+0x5c>)
    5c4c:	9101      	str	r1, [sp, #4]
    5c4e:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5c50:	f7fd f978 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5c54:	8820      	ldrh	r0, [r4, #0]
    5c56:	9901      	ldr	r1, [sp, #4]
    5c58:	f7fd f868 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c5c:	8820      	ldrh	r0, [r4, #0]
    5c5e:	9901      	ldr	r1, [sp, #4]
    5c60:	f7fd f864 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    5c64:	4a07      	ldr	r2, [pc, #28]	; (5c84 <opcode_0x5F()+0x60>)
    5c66:	4b08      	ldr	r3, [pc, #32]	; (5c88 <opcode_0x5F()+0x64>)
    5c68:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    5c6c:	881b      	ldrh	r3, [r3, #0]
    5c6e:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    5c70:	b280      	uxth	r0, r0
    5c72:	b002      	add	sp, #8
    5c74:	bd10      	pop	{r4, pc}
    5c76:	bf00      	nop
    5c78:	20004aa0 	.word	0x20004aa0
    5c7c:	200188ac 	.word	0x200188ac
    5c80:	2001888e 	.word	0x2001888e
    5c84:	20016418 	.word	0x20016418
    5c88:	20018890 	.word	0x20018890

00005c8c <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    5c8c:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c8e:	4c14      	ldr	r4, [pc, #80]	; (5ce0 <opcode_0x5B()+0x54>)
uint16_t opcode_0x5B() {
    5c90:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    5c92:	2001      	movs	r0, #1
    5c94:	f7fd fa16 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c98:	7823      	ldrb	r3, [r4, #0]
    5c9a:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5c9c:	4a11      	ldr	r2, [pc, #68]	; (5ce4 <opcode_0x5B()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5c9e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ca2:	bf4c      	ite	mi
    5ca4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ca8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5cac:	7810      	ldrb	r0, [r2, #0]
    5cae:	7023      	strb	r3, [r4, #0]
    5cb0:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5cb2:	4c0d      	ldr	r4, [pc, #52]	; (5ce8 <opcode_0x5B()+0x5c>)
    5cb4:	9101      	str	r1, [sp, #4]
    5cb6:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5cb8:	f7fd f944 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5cbc:	8820      	ldrh	r0, [r4, #0]
    5cbe:	9901      	ldr	r1, [sp, #4]
    5cc0:	f7fd f834 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5cc4:	8820      	ldrh	r0, [r4, #0]
    5cc6:	9901      	ldr	r1, [sp, #4]
    5cc8:	f7fd f830 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    5ccc:	4a07      	ldr	r2, [pc, #28]	; (5cec <opcode_0x5B()+0x60>)
    5cce:	4b08      	ldr	r3, [pc, #32]	; (5cf0 <opcode_0x5B()+0x64>)
    5cd0:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    5cd4:	881b      	ldrh	r3, [r3, #0]
    5cd6:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    5cd8:	b280      	uxth	r0, r0
    5cda:	b002      	add	sp, #8
    5cdc:	bd10      	pop	{r4, pc}
    5cde:	bf00      	nop
    5ce0:	20004aa0 	.word	0x20004aa0
    5ce4:	200188ac 	.word	0x200188ac
    5ce8:	2001888e 	.word	0x2001888e
    5cec:	20016418 	.word	0x20016418
    5cf0:	20018890 	.word	0x20018890

00005cf4 <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    5cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5cf6:	4e16      	ldr	r6, [pc, #88]	; (5d50 <opcode_0x67()+0x5c>)
    5cf8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5cfa:	4d16      	ldr	r5, [pc, #88]	; (5d54 <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    5cfc:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    5cfe:	4f16      	ldr	r7, [pc, #88]	; (5d58 <opcode_0x67()+0x64>)
    5d00:	3001      	adds	r0, #1
    5d02:	b280      	uxth	r0, r0
    5d04:	f7fc fe56 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5d08:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d0a:	b280      	uxth	r0, r0
    5d0c:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5d0e:	f7fc fe51 	bl	29b4 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d12:	4a12      	ldr	r2, [pc, #72]	; (5d5c <opcode_0x67()+0x68>)
    5d14:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d16:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    5d1a:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d1c:	7813      	ldrb	r3, [r2, #0]
    5d1e:	4621      	mov	r1, r4
    global_temp = local_data;
    5d20:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d22:	bf4c      	ite	mi
    5d24:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d28:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5d2c:	7013      	strb	r3, [r2, #0]
    5d2e:	f7fc fffd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d32:	4621      	mov	r1, r4
    5d34:	8828      	ldrh	r0, [r5, #0]
    5d36:	f7fc fff9 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    5d3a:	7838      	ldrb	r0, [r7, #0]
    5d3c:	f7fd fed2 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    5d40:	4a07      	ldr	r2, [pc, #28]	; (5d60 <opcode_0x67()+0x6c>)
    5d42:	8833      	ldrh	r3, [r6, #0]
    5d44:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    5d48:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    5d4a:	b280      	uxth	r0, r0
    5d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d4e:	bf00      	nop
    5d50:	20018890 	.word	0x20018890
    5d54:	2001888e 	.word	0x2001888e
    5d58:	200188a8 	.word	0x200188a8
    5d5c:	20004aa0 	.word	0x20004aa0
    5d60:	20016418 	.word	0x20016418

00005d64 <opcode_0x77()>:
uint16_t opcode_0x77() {
    5d64:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    5d66:	f7fd f921 	bl	2fac <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d6a:	4a10      	ldr	r2, [pc, #64]	; (5dac <opcode_0x77()+0x48>)
    5d6c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d6e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d72:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5d74:	4e0e      	ldr	r6, [pc, #56]	; (5db0 <opcode_0x77()+0x4c>)
    5d76:	4621      	mov	r1, r4
    5d78:	bf4c      	ite	mi
    5d7a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d7e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5d82:	4d0c      	ldr	r5, [pc, #48]	; (5db4 <opcode_0x77()+0x50>)
    5d84:	8830      	ldrh	r0, [r6, #0]
    5d86:	7013      	strb	r3, [r2, #0]
    5d88:	702c      	strb	r4, [r5, #0]
    5d8a:	f7fc ffcf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d8e:	4621      	mov	r1, r4
    5d90:	8830      	ldrh	r0, [r6, #0]
    5d92:	f7fc ffcb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5d96:	7828      	ldrb	r0, [r5, #0]
    5d98:	f7fd fea4 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    5d9c:	4a06      	ldr	r2, [pc, #24]	; (5db8 <opcode_0x77()+0x54>)
    5d9e:	4b07      	ldr	r3, [pc, #28]	; (5dbc <opcode_0x77()+0x58>)
    5da0:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    5da4:	881b      	ldrh	r3, [r3, #0]
    5da6:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    5da8:	b280      	uxth	r0, r0
    5daa:	bd70      	pop	{r4, r5, r6, pc}
    5dac:	20004aa0 	.word	0x20004aa0
    5db0:	2001888e 	.word	0x2001888e
    5db4:	200188a8 	.word	0x200188a8
    5db8:	20016418 	.word	0x20016418
    5dbc:	20018890 	.word	0x20018890

00005dc0 <opcode_0x63()>:
uint16_t opcode_0x63() {
    5dc0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    5dc2:	f7fd f9af 	bl	3124 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dc6:	4a10      	ldr	r2, [pc, #64]	; (5e08 <opcode_0x63()+0x48>)
    5dc8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5dca:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dce:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5dd0:	4e0e      	ldr	r6, [pc, #56]	; (5e0c <opcode_0x63()+0x4c>)
    5dd2:	4621      	mov	r1, r4
    5dd4:	bf4c      	ite	mi
    5dd6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5dda:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5dde:	4d0c      	ldr	r5, [pc, #48]	; (5e10 <opcode_0x63()+0x50>)
    5de0:	8830      	ldrh	r0, [r6, #0]
    5de2:	7013      	strb	r3, [r2, #0]
    5de4:	702c      	strb	r4, [r5, #0]
    5de6:	f7fc ffa1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5dea:	4621      	mov	r1, r4
    5dec:	8830      	ldrh	r0, [r6, #0]
    5dee:	f7fc ff9d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5df2:	7828      	ldrb	r0, [r5, #0]
    5df4:	f7fd fe76 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    5df8:	4a06      	ldr	r2, [pc, #24]	; (5e14 <opcode_0x63()+0x54>)
    5dfa:	4b07      	ldr	r3, [pc, #28]	; (5e18 <opcode_0x63()+0x58>)
    5dfc:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    5e00:	881b      	ldrh	r3, [r3, #0]
    5e02:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    5e04:	b280      	uxth	r0, r0
    5e06:	bd70      	pop	{r4, r5, r6, pc}
    5e08:	20004aa0 	.word	0x20004aa0
    5e0c:	2001888e 	.word	0x2001888e
    5e10:	200188a8 	.word	0x200188a8
    5e14:	20016418 	.word	0x20016418
    5e18:	20018890 	.word	0x20018890

00005e1c <opcode_0x73()>:
uint16_t opcode_0x73() {
    5e1c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    5e1e:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5e20:	4e11      	ldr	r6, [pc, #68]	; (5e68 <opcode_0x73()+0x4c>)
    5e22:	f7fd f9a9 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e26:	4a11      	ldr	r2, [pc, #68]	; (5e6c <opcode_0x73()+0x50>)
    5e28:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e2a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e2e:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5e30:	4d0f      	ldr	r5, [pc, #60]	; (5e70 <opcode_0x73()+0x54>)
    5e32:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e34:	bf4c      	ite	mi
    5e36:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e3a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5e3e:	8830      	ldrh	r0, [r6, #0]
    5e40:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5e42:	702c      	strb	r4, [r5, #0]
    5e44:	f7fc ff72 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e48:	4621      	mov	r1, r4
    5e4a:	8830      	ldrh	r0, [r6, #0]
    5e4c:	f7fc ff6e 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5e50:	7828      	ldrb	r0, [r5, #0]
    5e52:	f7fd fe47 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    5e56:	4a07      	ldr	r2, [pc, #28]	; (5e74 <opcode_0x73()+0x58>)
    5e58:	4b07      	ldr	r3, [pc, #28]	; (5e78 <opcode_0x73()+0x5c>)
    5e5a:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    5e5e:	881b      	ldrh	r3, [r3, #0]
    5e60:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    5e62:	b280      	uxth	r0, r0
    5e64:	bd70      	pop	{r4, r5, r6, pc}
    5e66:	bf00      	nop
    5e68:	2001888e 	.word	0x2001888e
    5e6c:	20004aa0 	.word	0x20004aa0
    5e70:	200188a8 	.word	0x200188a8
    5e74:	20016418 	.word	0x20016418
    5e78:	20018890 	.word	0x20018890

00005e7c <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    5e7c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    5e7e:	f7fd f8d5 	bl	302c <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e82:	4a10      	ldr	r2, [pc, #64]	; (5ec4 <opcode_0x6F()+0x48>)
    5e84:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e86:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e8a:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5e8c:	4e0e      	ldr	r6, [pc, #56]	; (5ec8 <opcode_0x6F()+0x4c>)
    5e8e:	4621      	mov	r1, r4
    5e90:	bf4c      	ite	mi
    5e92:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e96:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5e9a:	4d0c      	ldr	r5, [pc, #48]	; (5ecc <opcode_0x6F()+0x50>)
    5e9c:	8830      	ldrh	r0, [r6, #0]
    5e9e:	7013      	strb	r3, [r2, #0]
    5ea0:	702c      	strb	r4, [r5, #0]
    5ea2:	f7fc ff43 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ea6:	4621      	mov	r1, r4
    5ea8:	8830      	ldrh	r0, [r6, #0]
    5eaa:	f7fc ff3f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5eae:	7828      	ldrb	r0, [r5, #0]
    5eb0:	f7fd fe18 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    5eb4:	4a06      	ldr	r2, [pc, #24]	; (5ed0 <opcode_0x6F()+0x54>)
    5eb6:	4b07      	ldr	r3, [pc, #28]	; (5ed4 <opcode_0x6F()+0x58>)
    5eb8:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    5ebc:	881b      	ldrh	r3, [r3, #0]
    5ebe:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    5ec0:	b280      	uxth	r0, r0
    5ec2:	bd70      	pop	{r4, r5, r6, pc}
    5ec4:	20004aa0 	.word	0x20004aa0
    5ec8:	2001888e 	.word	0x2001888e
    5ecc:	200188a8 	.word	0x200188a8
    5ed0:	20016418 	.word	0x20016418
    5ed4:	20018890 	.word	0x20018890

00005ed8 <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    5ed8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    5eda:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5edc:	4e11      	ldr	r6, [pc, #68]	; (5f24 <opcode_0x7F()+0x4c>)
    5ede:	f7fd f8c1 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ee2:	4a11      	ldr	r2, [pc, #68]	; (5f28 <opcode_0x7F()+0x50>)
    5ee4:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5ee6:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5eea:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5eec:	4d0f      	ldr	r5, [pc, #60]	; (5f2c <opcode_0x7F()+0x54>)
    5eee:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ef0:	bf4c      	ite	mi
    5ef2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ef6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5efa:	8830      	ldrh	r0, [r6, #0]
    5efc:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5efe:	702c      	strb	r4, [r5, #0]
    5f00:	f7fc ff14 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f04:	4621      	mov	r1, r4
    5f06:	8830      	ldrh	r0, [r6, #0]
    5f08:	f7fc ff10 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5f0c:	7828      	ldrb	r0, [r5, #0]
    5f0e:	f7fd fde9 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    5f12:	4a07      	ldr	r2, [pc, #28]	; (5f30 <opcode_0x7F()+0x58>)
    5f14:	4b07      	ldr	r3, [pc, #28]	; (5f34 <opcode_0x7F()+0x5c>)
    5f16:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    5f1a:	881b      	ldrh	r3, [r3, #0]
    5f1c:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    5f1e:	b280      	uxth	r0, r0
    5f20:	bd70      	pop	{r4, r5, r6, pc}
    5f22:	bf00      	nop
    5f24:	2001888e 	.word	0x2001888e
    5f28:	20004aa0 	.word	0x20004aa0
    5f2c:	200188a8 	.word	0x200188a8
    5f30:	20016418 	.word	0x20016418
    5f34:	20018890 	.word	0x20018890

00005f38 <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    5f38:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    5f3a:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5f3c:	4e11      	ldr	r6, [pc, #68]	; (5f84 <opcode_0x7B()+0x4c>)
    5f3e:	f7fd f8c1 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f42:	4a11      	ldr	r2, [pc, #68]	; (5f88 <opcode_0x7B()+0x50>)
    5f44:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5f46:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f4a:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5f4c:	4d0f      	ldr	r5, [pc, #60]	; (5f8c <opcode_0x7B()+0x54>)
    5f4e:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f50:	bf4c      	ite	mi
    5f52:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f56:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5f5a:	8830      	ldrh	r0, [r6, #0]
    5f5c:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5f5e:	702c      	strb	r4, [r5, #0]
    5f60:	f7fc fee4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f64:	4621      	mov	r1, r4
    5f66:	8830      	ldrh	r0, [r6, #0]
    5f68:	f7fc fee0 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5f6c:	7828      	ldrb	r0, [r5, #0]
    5f6e:	f7fd fdb9 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    5f72:	4a07      	ldr	r2, [pc, #28]	; (5f90 <opcode_0x7B()+0x58>)
    5f74:	4b07      	ldr	r3, [pc, #28]	; (5f94 <opcode_0x7B()+0x5c>)
    5f76:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    5f7a:	881b      	ldrh	r3, [r3, #0]
    5f7c:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    5f7e:	b280      	uxth	r0, r0
    5f80:	bd70      	pop	{r4, r5, r6, pc}
    5f82:	bf00      	nop
    5f84:	2001888e 	.word	0x2001888e
    5f88:	20004aa0 	.word	0x20004aa0
    5f8c:	200188a8 	.word	0x200188a8
    5f90:	20016418 	.word	0x20016418
    5f94:	20018890 	.word	0x20018890

00005f98 <opcode_0xC7()>:
} // 0xBF - LAX - Absolute , Y

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    5f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5f9a:	4d1a      	ldr	r5, [pc, #104]	; (6004 <opcode_0xC7()+0x6c>)
    5f9c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5f9e:	4e1a      	ldr	r6, [pc, #104]	; (6008 <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    5fa0:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    5fa2:	4f1a      	ldr	r7, [pc, #104]	; (600c <opcode_0xC7()+0x74>)
    5fa4:	3001      	adds	r0, #1
    5fa6:	b280      	uxth	r0, r0
    5fa8:	f7fc fd04 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5fac:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5fae:	b280      	uxth	r0, r0
    5fb0:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    5fb2:	f7fc fcff 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5fb6:	3801      	subs	r0, #1
    5fb8:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fba:	4620      	mov	r0, r4
    global_temp = local_data;
    5fbc:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5fbe:	f7fc ffc1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5fc2:	4621      	mov	r1, r4
    5fc4:	8830      	ldrh	r0, [r6, #0]
    5fc6:	f7fc feb1 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5fca:	4621      	mov	r1, r4
    5fcc:	8830      	ldrh	r0, [r6, #0]
    5fce:	f7fc fead 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5fd2:	4b0f      	ldr	r3, [pc, #60]	; (6010 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    5fd4:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    5fd6:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fd8:	4a0e      	ldr	r2, [pc, #56]	; (6014 <opcode_0xC7()+0x7c>)
    5fda:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5fdc:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fe0:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5fe2:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5fe4:	bf94      	ite	ls
    5fe6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5fea:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    5fee:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    5ff0:	f7fc ffa8 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    5ff4:	4a08      	ldr	r2, [pc, #32]	; (6018 <opcode_0xC7()+0x80>)
    5ff6:	882b      	ldrh	r3, [r5, #0]
    5ff8:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    5ffc:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    5ffe:	b280      	uxth	r0, r0
    6000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6002:	bf00      	nop
    6004:	20018890 	.word	0x20018890
    6008:	2001888e 	.word	0x2001888e
    600c:	200188a8 	.word	0x200188a8
    6010:	200188ac 	.word	0x200188ac
    6014:	20004aa0 	.word	0x20004aa0
    6018:	20017418 	.word	0x20017418

0000601c <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    601c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    601e:	f7fc ffc5 	bl	2fac <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    6022:	3801      	subs	r0, #1
    global_temp = local_data;
    6024:	4d13      	ldr	r5, [pc, #76]	; (6074 <opcode_0xD7()+0x58>)
    local_data = local_data - 1;
    6026:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6028:	4e13      	ldr	r6, [pc, #76]	; (6078 <opcode_0xD7()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    602a:	4620      	mov	r0, r4
    global_temp = local_data;
    602c:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    602e:	f7fc ff89 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6032:	8830      	ldrh	r0, [r6, #0]
    6034:	4621      	mov	r1, r4
    6036:	f7fc fe79 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    603a:	4621      	mov	r1, r4
    603c:	8830      	ldrh	r0, [r6, #0]
    603e:	f7fc fe75 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6042:	4b0e      	ldr	r3, [pc, #56]	; (607c <opcode_0xD7()+0x60>)
    Calculate_CMP(global_temp);
    6044:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6046:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6048:	4a0d      	ldr	r2, [pc, #52]	; (6080 <opcode_0xD7()+0x64>)
    604a:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    604c:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6050:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6052:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6054:	bf94      	ite	ls
    6056:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    605a:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    605e:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6060:	f7fc ff70 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    6064:	4a07      	ldr	r2, [pc, #28]	; (6084 <opcode_0xD7()+0x68>)
    6066:	4b08      	ldr	r3, [pc, #32]	; (6088 <opcode_0xD7()+0x6c>)
    6068:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    606c:	881b      	ldrh	r3, [r3, #0]
    606e:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    6070:	b280      	uxth	r0, r0
    6072:	bd70      	pop	{r4, r5, r6, pc}
    6074:	200188a8 	.word	0x200188a8
    6078:	2001888e 	.word	0x2001888e
    607c:	200188ac 	.word	0x200188ac
    6080:	20004aa0 	.word	0x20004aa0
    6084:	20017418 	.word	0x20017418
    6088:	20018890 	.word	0x20018890

0000608c <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    608c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    608e:	f7fd f849 	bl	3124 <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    6092:	3801      	subs	r0, #1
    global_temp = local_data;
    6094:	4d13      	ldr	r5, [pc, #76]	; (60e4 <opcode_0xC3()+0x58>)
    local_data = local_data - 1;
    6096:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6098:	4e13      	ldr	r6, [pc, #76]	; (60e8 <opcode_0xC3()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    609a:	4620      	mov	r0, r4
    global_temp = local_data;
    609c:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    609e:	f7fc ff51 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    60a2:	8830      	ldrh	r0, [r6, #0]
    60a4:	4621      	mov	r1, r4
    60a6:	f7fc fe41 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60aa:	4621      	mov	r1, r4
    60ac:	8830      	ldrh	r0, [r6, #0]
    60ae:	f7fc fe3d 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    60b2:	4b0e      	ldr	r3, [pc, #56]	; (60ec <opcode_0xC3()+0x60>)
    Calculate_CMP(global_temp);
    60b4:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    60b6:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60b8:	4a0d      	ldr	r2, [pc, #52]	; (60f0 <opcode_0xC3()+0x64>)
    60ba:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    60bc:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60c0:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60c2:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60c4:	bf94      	ite	ls
    60c6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    60ca:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    60ce:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60d0:	f7fc ff38 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    60d4:	4a07      	ldr	r2, [pc, #28]	; (60f4 <opcode_0xC3()+0x68>)
    60d6:	4b08      	ldr	r3, [pc, #32]	; (60f8 <opcode_0xC3()+0x6c>)
    60d8:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    60dc:	881b      	ldrh	r3, [r3, #0]
    60de:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    60e0:	b280      	uxth	r0, r0
    60e2:	bd70      	pop	{r4, r5, r6, pc}
    60e4:	200188a8 	.word	0x200188a8
    60e8:	2001888e 	.word	0x2001888e
    60ec:	200188ac 	.word	0x200188ac
    60f0:	20004aa0 	.word	0x20004aa0
    60f4:	20017418 	.word	0x20017418
    60f8:	20018890 	.word	0x20018890

000060fc <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    60fc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    60fe:	2000      	movs	r0, #0
    global_temp = local_data;
    6100:	4d15      	ldr	r5, [pc, #84]	; (6158 <opcode_0xD3()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    6102:	f7fd f839 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    6106:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    6108:	4e14      	ldr	r6, [pc, #80]	; (615c <opcode_0xD3()+0x60>)
    610a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    610c:	4620      	mov	r0, r4
    global_temp = local_data;
    610e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6110:	f7fc ff18 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6114:	8830      	ldrh	r0, [r6, #0]
    6116:	4621      	mov	r1, r4
    6118:	f7fc fe08 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    611c:	4621      	mov	r1, r4
    611e:	8830      	ldrh	r0, [r6, #0]
    6120:	f7fc fe04 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6124:	4b0e      	ldr	r3, [pc, #56]	; (6160 <opcode_0xD3()+0x64>)
    Calculate_CMP(global_temp);
    6126:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6128:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    612a:	4a0e      	ldr	r2, [pc, #56]	; (6164 <opcode_0xD3()+0x68>)
    612c:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    612e:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6132:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6134:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6136:	bf94      	ite	ls
    6138:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    613c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6140:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6142:	f7fc feff 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD3].length);
    6146:	4a08      	ldr	r2, [pc, #32]	; (6168 <opcode_0xD3()+0x6c>)
    6148:	4b08      	ldr	r3, [pc, #32]	; (616c <opcode_0xD3()+0x70>)
    614a:	f892 0b0d 	ldrb.w	r0, [r2, #2829]	; 0xb0d
    614e:	881b      	ldrh	r3, [r3, #0]
    6150:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    6152:	b280      	uxth	r0, r0
    6154:	bd70      	pop	{r4, r5, r6, pc}
    6156:	bf00      	nop
    6158:	200188a8 	.word	0x200188a8
    615c:	2001888e 	.word	0x2001888e
    6160:	200188ac 	.word	0x200188ac
    6164:	20004aa0 	.word	0x20004aa0
    6168:	20017418 	.word	0x20017418
    616c:	20018890 	.word	0x20018890

00006170 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    6170:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    6172:	f7fc ff5b 	bl	302c <Fetch_Absolute()>
    local_data = local_data - 1;
    6176:	3801      	subs	r0, #1
    global_temp = local_data;
    6178:	4d13      	ldr	r5, [pc, #76]	; (61c8 <opcode_0xCF()+0x58>)
    local_data = local_data - 1;
    617a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    617c:	4e13      	ldr	r6, [pc, #76]	; (61cc <opcode_0xCF()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    617e:	4620      	mov	r0, r4
    global_temp = local_data;
    6180:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6182:	f7fc fedf 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6186:	8830      	ldrh	r0, [r6, #0]
    6188:	4621      	mov	r1, r4
    618a:	f7fc fdcf 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    618e:	4621      	mov	r1, r4
    6190:	8830      	ldrh	r0, [r6, #0]
    6192:	f7fc fdcb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6196:	4b0e      	ldr	r3, [pc, #56]	; (61d0 <opcode_0xCF()+0x60>)
    Calculate_CMP(global_temp);
    6198:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    619a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    619c:	4a0d      	ldr	r2, [pc, #52]	; (61d4 <opcode_0xCF()+0x64>)
    619e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    61a0:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61a4:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    61a6:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61a8:	bf94      	ite	ls
    61aa:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    61ae:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    61b2:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    61b4:	f7fc fec6 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCF].length);
    61b8:	4a07      	ldr	r2, [pc, #28]	; (61d8 <opcode_0xCF()+0x68>)
    61ba:	4b08      	ldr	r3, [pc, #32]	; (61dc <opcode_0xCF()+0x6c>)
    61bc:	f892 0a3d 	ldrb.w	r0, [r2, #2621]	; 0xa3d
    61c0:	881b      	ldrh	r3, [r3, #0]
    61c2:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    61c4:	b280      	uxth	r0, r0
    61c6:	bd70      	pop	{r4, r5, r6, pc}
    61c8:	200188a8 	.word	0x200188a8
    61cc:	2001888e 	.word	0x2001888e
    61d0:	200188ac 	.word	0x200188ac
    61d4:	20004aa0 	.word	0x20004aa0
    61d8:	20017418 	.word	0x20017418
    61dc:	20018890 	.word	0x20018890

000061e0 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    61e0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    61e2:	2000      	movs	r0, #0
    global_temp = local_data;
    61e4:	4d15      	ldr	r5, [pc, #84]	; (623c <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    61e6:	f7fc ff3d 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    61ea:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    61ec:	4e14      	ldr	r6, [pc, #80]	; (6240 <opcode_0xDF()+0x60>)
    61ee:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61f0:	4620      	mov	r0, r4
    global_temp = local_data;
    61f2:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61f4:	f7fc fea6 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    61f8:	8830      	ldrh	r0, [r6, #0]
    61fa:	4621      	mov	r1, r4
    61fc:	f7fc fd96 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6200:	4621      	mov	r1, r4
    6202:	8830      	ldrh	r0, [r6, #0]
    6204:	f7fc fd92 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6208:	4b0e      	ldr	r3, [pc, #56]	; (6244 <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    620a:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    620c:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    620e:	4a0e      	ldr	r2, [pc, #56]	; (6248 <opcode_0xDF()+0x68>)
    6210:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6212:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6216:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6218:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    621a:	bf94      	ite	ls
    621c:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6220:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6224:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6226:	f7fc fe8d 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    622a:	4a08      	ldr	r2, [pc, #32]	; (624c <opcode_0xDF()+0x6c>)
    622c:	4b08      	ldr	r3, [pc, #32]	; (6250 <opcode_0xDF()+0x70>)
    622e:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    6232:	881b      	ldrh	r3, [r3, #0]
    6234:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    6236:	b280      	uxth	r0, r0
    6238:	bd70      	pop	{r4, r5, r6, pc}
    623a:	bf00      	nop
    623c:	200188a8 	.word	0x200188a8
    6240:	2001888e 	.word	0x2001888e
    6244:	200188ac 	.word	0x200188ac
    6248:	20004aa0 	.word	0x20004aa0
    624c:	20017418 	.word	0x20017418
    6250:	20018890 	.word	0x20018890

00006254 <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    6254:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    6256:	2000      	movs	r0, #0
    global_temp = local_data;
    6258:	4d15      	ldr	r5, [pc, #84]	; (62b0 <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    625a:	f7fc ff33 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    625e:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    6260:	4e14      	ldr	r6, [pc, #80]	; (62b4 <opcode_0xDB()+0x60>)
    6262:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6264:	4620      	mov	r0, r4
    global_temp = local_data;
    6266:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6268:	f7fc fe6c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    626c:	8830      	ldrh	r0, [r6, #0]
    626e:	4621      	mov	r1, r4
    6270:	f7fc fd5c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6274:	4621      	mov	r1, r4
    6276:	8830      	ldrh	r0, [r6, #0]
    6278:	f7fc fd58 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    627c:	4b0e      	ldr	r3, [pc, #56]	; (62b8 <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    627e:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6280:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6282:	4a0e      	ldr	r2, [pc, #56]	; (62bc <opcode_0xDB()+0x68>)
    6284:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6286:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    628a:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    628c:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    628e:	bf94      	ite	ls
    6290:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6294:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6298:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    629a:	f7fc fe53 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    629e:	4a08      	ldr	r2, [pc, #32]	; (62c0 <opcode_0xDB()+0x6c>)
    62a0:	4b08      	ldr	r3, [pc, #32]	; (62c4 <opcode_0xDB()+0x70>)
    62a2:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    62a6:	881b      	ldrh	r3, [r3, #0]
    62a8:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    62aa:	b280      	uxth	r0, r0
    62ac:	bd70      	pop	{r4, r5, r6, pc}
    62ae:	bf00      	nop
    62b0:	200188a8 	.word	0x200188a8
    62b4:	2001888e 	.word	0x2001888e
    62b8:	200188ac 	.word	0x200188ac
    62bc:	20004aa0 	.word	0x20004aa0
    62c0:	20017418 	.word	0x20017418
    62c4:	20018890 	.word	0x20018890

000062c8 <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    62c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    62ca:	4e13      	ldr	r6, [pc, #76]	; (6318 <opcode_0xE7()+0x50>)
    62cc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    62ce:	4d13      	ldr	r5, [pc, #76]	; (631c <opcode_0xE7()+0x54>)
    return read_byte(register_pc+offset, false);
    62d0:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    62d2:	4f13      	ldr	r7, [pc, #76]	; (6320 <opcode_0xE7()+0x58>)
    62d4:	3001      	adds	r0, #1
    62d6:	b280      	uxth	r0, r0
    62d8:	f7fc fb6c 	bl	29b4 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    62dc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    62de:	b280      	uxth	r0, r0
    62e0:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    62e2:	f7fc fb67 	bl	29b4 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    62e6:	3001      	adds	r0, #1
    62e8:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62ea:	4620      	mov	r0, r4
    global_temp = local_data;
    62ec:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62ee:	f7fc fe29 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    62f2:	4621      	mov	r1, r4
    62f4:	8828      	ldrh	r0, [r5, #0]
    62f6:	f7fc fd19 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    62fa:	4621      	mov	r1, r4
    62fc:	8828      	ldrh	r0, [r5, #0]
    62fe:	f7fc fd15 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    6302:	7838      	ldrb	r0, [r7, #0]
    6304:	f7fd fc52 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    6308:	4a06      	ldr	r2, [pc, #24]	; (6324 <opcode_0xE7()+0x5c>)
    630a:	8833      	ldrh	r3, [r6, #0]
    630c:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    6310:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    6312:	b280      	uxth	r0, r0
    6314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6316:	bf00      	nop
    6318:	20018890 	.word	0x20018890
    631c:	2001888e 	.word	0x2001888e
    6320:	200188a8 	.word	0x200188a8
    6324:	20017418 	.word	0x20017418

00006328 <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    6328:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    632a:	f7fc fe3f 	bl	2fac <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    632e:	3001      	adds	r0, #1
    global_temp = local_data;
    6330:	4d0c      	ldr	r5, [pc, #48]	; (6364 <opcode_0xF7()+0x3c>)
    local_data = local_data + 1;
    6332:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6334:	4e0c      	ldr	r6, [pc, #48]	; (6368 <opcode_0xF7()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6336:	4620      	mov	r0, r4
    global_temp = local_data;
    6338:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    633a:	f7fc fe03 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    633e:	8830      	ldrh	r0, [r6, #0]
    6340:	4621      	mov	r1, r4
    6342:	f7fc fcf3 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6346:	4621      	mov	r1, r4
    6348:	8830      	ldrh	r0, [r6, #0]
    634a:	f7fc fcef 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    634e:	7828      	ldrb	r0, [r5, #0]
    6350:	f7fd fc2c 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    6354:	4a05      	ldr	r2, [pc, #20]	; (636c <opcode_0xF7()+0x44>)
    6356:	4b06      	ldr	r3, [pc, #24]	; (6370 <opcode_0xF7()+0x48>)
    6358:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    635c:	881b      	ldrh	r3, [r3, #0]
    635e:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    6360:	b280      	uxth	r0, r0
    6362:	bd70      	pop	{r4, r5, r6, pc}
    6364:	200188a8 	.word	0x200188a8
    6368:	2001888e 	.word	0x2001888e
    636c:	20018418 	.word	0x20018418
    6370:	20018890 	.word	0x20018890

00006374 <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    6374:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    6376:	f7fc fed5 	bl	3124 <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    637a:	3001      	adds	r0, #1
    global_temp = local_data;
    637c:	4d0c      	ldr	r5, [pc, #48]	; (63b0 <opcode_0xE3()+0x3c>)
    local_data = local_data + 1;
    637e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6380:	4e0c      	ldr	r6, [pc, #48]	; (63b4 <opcode_0xE3()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6382:	4620      	mov	r0, r4
    global_temp = local_data;
    6384:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6386:	f7fc fddd 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    638a:	8830      	ldrh	r0, [r6, #0]
    638c:	4621      	mov	r1, r4
    638e:	f7fc fccd 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6392:	4621      	mov	r1, r4
    6394:	8830      	ldrh	r0, [r6, #0]
    6396:	f7fc fcc9 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    639a:	7828      	ldrb	r0, [r5, #0]
    639c:	f7fd fc06 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    63a0:	4a05      	ldr	r2, [pc, #20]	; (63b8 <opcode_0xE3()+0x44>)
    63a2:	4b06      	ldr	r3, [pc, #24]	; (63bc <opcode_0xE3()+0x48>)
    63a4:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    63a8:	881b      	ldrh	r3, [r3, #0]
    63aa:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    63ac:	b280      	uxth	r0, r0
    63ae:	bd70      	pop	{r4, r5, r6, pc}
    63b0:	200188a8 	.word	0x200188a8
    63b4:	2001888e 	.word	0x2001888e
    63b8:	20017418 	.word	0x20017418
    63bc:	20018890 	.word	0x20018890

000063c0 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    63c0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    63c2:	2000      	movs	r0, #0
    global_temp = local_data;
    63c4:	4d0e      	ldr	r5, [pc, #56]	; (6400 <opcode_0xF3()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    63c6:	f7fc fed7 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    63ca:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    63cc:	4e0d      	ldr	r6, [pc, #52]	; (6404 <opcode_0xF3()+0x44>)
    63ce:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63d0:	4620      	mov	r0, r4
    global_temp = local_data;
    63d2:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63d4:	f7fc fdb6 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    63d8:	8830      	ldrh	r0, [r6, #0]
    63da:	4621      	mov	r1, r4
    63dc:	f7fc fca6 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    63e0:	4621      	mov	r1, r4
    63e2:	8830      	ldrh	r0, [r6, #0]
    63e4:	f7fc fca2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    63e8:	7828      	ldrb	r0, [r5, #0]
    63ea:	f7fd fbdf 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    63ee:	4a06      	ldr	r2, [pc, #24]	; (6408 <opcode_0xF3()+0x48>)
    63f0:	4b06      	ldr	r3, [pc, #24]	; (640c <opcode_0xF3()+0x4c>)
    63f2:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    63f6:	881b      	ldrh	r3, [r3, #0]
    63f8:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    63fa:	b280      	uxth	r0, r0
    63fc:	bd70      	pop	{r4, r5, r6, pc}
    63fe:	bf00      	nop
    6400:	200188a8 	.word	0x200188a8
    6404:	2001888e 	.word	0x2001888e
    6408:	20018418 	.word	0x20018418
    640c:	20018890 	.word	0x20018890

00006410 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    6410:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    6412:	f7fc fe0b 	bl	302c <Fetch_Absolute()>
    local_data = local_data + 1;
    6416:	3001      	adds	r0, #1
    global_temp = local_data;
    6418:	4d0c      	ldr	r5, [pc, #48]	; (644c <opcode_0xEF()+0x3c>)
    local_data = local_data + 1;
    641a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    641c:	4e0c      	ldr	r6, [pc, #48]	; (6450 <opcode_0xEF()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    641e:	4620      	mov	r0, r4
    global_temp = local_data;
    6420:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6422:	f7fc fd8f 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6426:	8830      	ldrh	r0, [r6, #0]
    6428:	4621      	mov	r1, r4
    642a:	f7fc fc7f 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    642e:	4621      	mov	r1, r4
    6430:	8830      	ldrh	r0, [r6, #0]
    6432:	f7fc fc7b 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6436:	7828      	ldrb	r0, [r5, #0]
    6438:	f7fd fbb8 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    643c:	4a05      	ldr	r2, [pc, #20]	; (6454 <opcode_0xEF()+0x44>)
    643e:	4b06      	ldr	r3, [pc, #24]	; (6458 <opcode_0xEF()+0x48>)
    6440:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    6444:	881b      	ldrh	r3, [r3, #0]
    6446:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    6448:	b280      	uxth	r0, r0
    644a:	bd70      	pop	{r4, r5, r6, pc}
    644c:	200188a8 	.word	0x200188a8
    6450:	2001888e 	.word	0x2001888e
    6454:	20018418 	.word	0x20018418
    6458:	20018890 	.word	0x20018890

0000645c <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    645c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    645e:	2000      	movs	r0, #0
    global_temp = local_data;
    6460:	4d0e      	ldr	r5, [pc, #56]	; (649c <opcode_0xFF()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    6462:	f7fc fdff 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    6466:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    6468:	4e0d      	ldr	r6, [pc, #52]	; (64a0 <opcode_0xFF()+0x44>)
    646a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    646c:	4620      	mov	r0, r4
    global_temp = local_data;
    646e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6470:	f7fc fd68 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6474:	8830      	ldrh	r0, [r6, #0]
    6476:	4621      	mov	r1, r4
    6478:	f7fc fc58 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    647c:	4621      	mov	r1, r4
    647e:	8830      	ldrh	r0, [r6, #0]
    6480:	f7fc fc54 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6484:	7828      	ldrb	r0, [r5, #0]
    6486:	f7fd fb91 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    648a:	4a06      	ldr	r2, [pc, #24]	; (64a4 <opcode_0xFF()+0x48>)
    648c:	4b06      	ldr	r3, [pc, #24]	; (64a8 <opcode_0xFF()+0x4c>)
    648e:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    6492:	881b      	ldrh	r3, [r3, #0]
    6494:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    6496:	b280      	uxth	r0, r0
    6498:	bd70      	pop	{r4, r5, r6, pc}
    649a:	bf00      	nop
    649c:	200188a8 	.word	0x200188a8
    64a0:	2001888e 	.word	0x2001888e
    64a4:	20018418 	.word	0x20018418
    64a8:	20018890 	.word	0x20018890

000064ac <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    64ac:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    64ae:	2000      	movs	r0, #0
    global_temp = local_data;
    64b0:	4d0e      	ldr	r5, [pc, #56]	; (64ec <opcode_0xFB()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    64b2:	f7fc fe07 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    64b6:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    64b8:	4e0d      	ldr	r6, [pc, #52]	; (64f0 <opcode_0xFB()+0x44>)
    64ba:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64bc:	4620      	mov	r0, r4
    global_temp = local_data;
    64be:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64c0:	f7fc fd40 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    64c4:	8830      	ldrh	r0, [r6, #0]
    64c6:	4621      	mov	r1, r4
    64c8:	f7fc fc30 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    64cc:	4621      	mov	r1, r4
    64ce:	8830      	ldrh	r0, [r6, #0]
    64d0:	f7fc fc2c 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    64d4:	7828      	ldrb	r0, [r5, #0]
    64d6:	f7fd fb69 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    64da:	4a06      	ldr	r2, [pc, #24]	; (64f4 <opcode_0xFB()+0x48>)
    64dc:	4b06      	ldr	r3, [pc, #24]	; (64f8 <opcode_0xFB()+0x4c>)
    64de:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    64e2:	881b      	ldrh	r3, [r3, #0]
    64e4:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    64e6:	b280      	uxth	r0, r0
    64e8:	bd70      	pop	{r4, r5, r6, pc}
    64ea:	bf00      	nop
    64ec:	200188a8 	.word	0x200188a8
    64f0:	2001888e 	.word	0x2001888e
    64f4:	20018418 	.word	0x20018418
    64f8:	20018890 	.word	0x20018890

000064fc <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    64fc:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    64fe:	4c0e      	ldr	r4, [pc, #56]	; (6538 <opcode_0x0B()+0x3c>)
    6500:	2100      	movs	r1, #0
    6502:	8820      	ldrh	r0, [r4, #0]
    6504:	3001      	adds	r0, #1
    6506:	b280      	uxth	r0, r0
    6508:	f7fc fa54 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    650c:	4b0b      	ldr	r3, [pc, #44]	; (653c <opcode_0x0B()+0x40>)
    650e:	781a      	ldrb	r2, [r3, #0]
    6510:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6512:	4a0b      	ldr	r2, [pc, #44]	; (6540 <opcode_0x0B()+0x44>)
    6514:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    6516:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6518:	7813      	ldrb	r3, [r2, #0]
    651a:	bf4c      	ite	mi
    651c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6520:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6524:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6526:	f7fc fd0d 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    652a:	4a06      	ldr	r2, [pc, #24]	; (6544 <opcode_0x0B()+0x48>)
    652c:	8823      	ldrh	r3, [r4, #0]
    652e:	f892 026d 	ldrb.w	r0, [r2, #621]	; 0x26d
    6532:	4418      	add	r0, r3
} // 0x0B - ANC - Immediate
    6534:	b280      	uxth	r0, r0
    6536:	bd10      	pop	{r4, pc}
    6538:	20018890 	.word	0x20018890
    653c:	200188ac 	.word	0x200188ac
    6540:	20004aa0 	.word	0x20004aa0
    6544:	20015418 	.word	0x20015418

00006548 <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    6548:	b510      	push	{r4, lr}
    654a:	4c0e      	ldr	r4, [pc, #56]	; (6584 <opcode_0x2B()+0x3c>)
    654c:	2100      	movs	r1, #0
    654e:	8820      	ldrh	r0, [r4, #0]
    6550:	3001      	adds	r0, #1
    6552:	b280      	uxth	r0, r0
    6554:	f7fc fa2e 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6558:	4b0b      	ldr	r3, [pc, #44]	; (6588 <opcode_0x2B()+0x40>)
    655a:	781a      	ldrb	r2, [r3, #0]
    655c:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    655e:	4a0b      	ldr	r2, [pc, #44]	; (658c <opcode_0x2B()+0x44>)
    6560:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    6562:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6564:	7813      	ldrb	r3, [r2, #0]
    6566:	bf4c      	ite	mi
    6568:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    656c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6570:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6572:	f7fc fce7 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    6576:	4a06      	ldr	r2, [pc, #24]	; (6590 <opcode_0x2B()+0x48>)
    6578:	8823      	ldrh	r3, [r4, #0]
    657a:	f892 08ed 	ldrb.w	r0, [r2, #2285]	; 0x8ed
    657e:	4418      	add	r0, r3
} // 0x2B - ANC - Immediate
    6580:	b280      	uxth	r0, r0
    6582:	bd10      	pop	{r4, pc}
    6584:	20018890 	.word	0x20018890
    6588:	200188ac 	.word	0x200188ac
    658c:	20004aa0 	.word	0x20004aa0
    6590:	20015418 	.word	0x20015418

00006594 <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    6594:	b510      	push	{r4, lr}
    6596:	4c10      	ldr	r4, [pc, #64]	; (65d8 <opcode_0x4B()+0x44>)
    6598:	2100      	movs	r1, #0
    659a:	8820      	ldrh	r0, [r4, #0]
    659c:	3001      	adds	r0, #1
    659e:	b280      	uxth	r0, r0
    65a0:	f7fc fa08 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    65a4:	4a0d      	ldr	r2, [pc, #52]	; (65dc <opcode_0x4B()+0x48>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    65a6:	490e      	ldr	r1, [pc, #56]	; (65e0 <opcode_0x4B()+0x4c>)
    register_a = register_a & local_data;
    65a8:	7813      	ldrb	r3, [r2, #0]
    65aa:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    65ac:	780b      	ldrb	r3, [r1, #0]
    65ae:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    65b2:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    65b6:	bf14      	ite	ne
    65b8:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    65bc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    65c0:	7010      	strb	r0, [r2, #0]
    65c2:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    65c4:	f7fc fcbe 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    65c8:	4a06      	ldr	r2, [pc, #24]	; (65e4 <opcode_0x4B()+0x50>)
    65ca:	8823      	ldrh	r3, [r4, #0]
    65cc:	f892 0f6d 	ldrb.w	r0, [r2, #3949]	; 0xf6d
    65d0:	4418      	add	r0, r3
} // 0x4B - ALR - Immediate
    65d2:	b280      	uxth	r0, r0
    65d4:	bd10      	pop	{r4, pc}
    65d6:	bf00      	nop
    65d8:	20018890 	.word	0x20018890
    65dc:	200188ac 	.word	0x200188ac
    65e0:	20004aa0 	.word	0x20004aa0
    65e4:	20015418 	.word	0x20015418

000065e8 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    65e8:	b510      	push	{r4, lr}
    65ea:	4c0f      	ldr	r4, [pc, #60]	; (6628 <opcode_0x6B()+0x40>)
    65ec:	2100      	movs	r1, #0
    65ee:	8820      	ldrh	r0, [r4, #0]
    65f0:	3001      	adds	r0, #1
    65f2:	b280      	uxth	r0, r0
    65f4:	f7fc f9de 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    65f8:	490c      	ldr	r1, [pc, #48]	; (662c <opcode_0x6B()+0x44>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    65fa:	4a0d      	ldr	r2, [pc, #52]	; (6630 <opcode_0x6B()+0x48>)
    register_a = register_a & local_data;
    65fc:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    65fe:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    6600:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    6602:	0840      	lsrs	r0, r0, #1
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    6604:	f003 03be 	and.w	r3, r3, #190	; 0xbe
    register_a = (0x7F & (register_a >> 1));
    6608:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    660a:	f000 0140 	and.w	r1, r0, #64	; 0x40
    660e:	b109      	cbz	r1, 6614 <opcode_0x6B()+0x2c>
        register_flags = register_flags | 0x40;
    6610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6614:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6616:	f7fc fc95 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    661a:	4a06      	ldr	r2, [pc, #24]	; (6634 <opcode_0x6B()+0x4c>)
    661c:	8823      	ldrh	r3, [r4, #0]
    661e:	f892 05ed 	ldrb.w	r0, [r2, #1517]	; 0x5ed
    6622:	4418      	add	r0, r3
} // 0x6B - ARR - Immediate
    6624:	b280      	uxth	r0, r0
    6626:	bd10      	pop	{r4, pc}
    6628:	20018890 	.word	0x20018890
    662c:	200188ac 	.word	0x200188ac
    6630:	20004aa0 	.word	0x20004aa0
    6634:	20016418 	.word	0x20016418

00006638 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    6638:	b510      	push	{r4, lr}
    663a:	4c11      	ldr	r4, [pc, #68]	; (6680 <opcode_0xCB()+0x48>)
    663c:	2100      	movs	r1, #0
    663e:	8820      	ldrh	r0, [r4, #0]
    6640:	3001      	adds	r0, #1
    6642:	b280      	uxth	r0, r0
    6644:	f7fc f9b6 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    6648:	4a0e      	ldr	r2, [pc, #56]	; (6684 <opcode_0xCB()+0x4c>)
    664a:	4b0f      	ldr	r3, [pc, #60]	; (6688 <opcode_0xCB()+0x50>)
    664c:	7811      	ldrb	r1, [r2, #0]
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6652:	490e      	ldr	r1, [pc, #56]	; (668c <opcode_0xCB()+0x54>)
    register_x = register_x - local_data;
    6654:	1a1b      	subs	r3, r3, r0
    6656:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    6658:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    665a:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    665c:	780a      	ldrb	r2, [r1, #0]
    665e:	0400      	lsls	r0, r0, #16
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6660:	4618      	mov	r0, r3
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    6662:	bf54      	ite	pl
    6664:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6668:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    666c:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    666e:	f7fc fc69 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    6672:	4a07      	ldr	r2, [pc, #28]	; (6690 <opcode_0xCB()+0x58>)
    6674:	8823      	ldrh	r3, [r4, #0]
    6676:	f892 096d 	ldrb.w	r0, [r2, #2413]	; 0x96d
    667a:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    667c:	b280      	uxth	r0, r0
    667e:	bd10      	pop	{r4, pc}
    6680:	20018890 	.word	0x20018890
    6684:	200188ad 	.word	0x200188ad
    6688:	200188ac 	.word	0x200188ac
    668c:	20004aa0 	.word	0x20004aa0
    6690:	20017418 	.word	0x20017418

00006694 <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    6694:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    6696:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    6698:	f7fc fc68 	bl	2f6c <Fetch_Immediate(unsigned char)>
    while (1) {}
    669c:	e7fe      	b.n	669c <opcode_0x02()+0x8>
    669e:	bf00      	nop

000066a0 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    66a0:	b570      	push	{r4, r5, r6, lr}
    66a2:	4604      	mov	r4, r0
	uint8_t op1 = read_byte(pc+1, false);
    66a4:	3001      	adds	r0, #1
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    66a6:	b08e      	sub	sp, #56	; 0x38
    66a8:	460d      	mov	r5, r1
	uint8_t op1 = read_byte(pc+1, false);
    66aa:	b280      	uxth	r0, r0
    66ac:	2100      	movs	r1, #0
    66ae:	f7fc f981 	bl	29b4 <read_byte(unsigned short, bool)>
	uint8_t op2 = read_byte(pc+2, false);
    66b2:	1ca3      	adds	r3, r4, #2
	uint8_t op1 = read_byte(pc+1, false);
    66b4:	4606      	mov	r6, r0
	uint8_t op2 = read_byte(pc+2, false);
    66b6:	2100      	movs	r1, #0
    66b8:	b298      	uxth	r0, r3
    66ba:	f7fc f97b 	bl	29b4 <read_byte(unsigned short, bool)>
	Serial.println(String(pc,HEX) + ": " + decode_opcode(opcode, op1, op2));
    66be:	2210      	movs	r2, #16
    66c0:	4621      	mov	r1, r4
	uint8_t op2 = read_byte(pc+2, false);
    66c2:	9001      	str	r0, [sp, #4]
	Serial.println(String(pc,HEX) + ": " + decode_opcode(opcode, op1, op2));
    66c4:	a802      	add	r0, sp, #8
    66c6:	f002 fa29 	bl	8b1c <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    66ca:	a902      	add	r1, sp, #8
    66cc:	a806      	add	r0, sp, #24
    66ce:	f002 f9a1 	bl	8a14 <String::String(String const&)>
    66d2:	4911      	ldr	r1, [pc, #68]	; (6718 <display_next_instruction(unsigned short, unsigned char)+0x78>)
    66d4:	a806      	add	r0, sp, #24
    66d6:	f002 fad9 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    66da:	4604      	mov	r4, r0
    66dc:	9b01      	ldr	r3, [sp, #4]
    66de:	4632      	mov	r2, r6
    66e0:	4629      	mov	r1, r5
    66e2:	a80a      	add	r0, sp, #40	; 0x28
	size_t println(const String &s)			{ return print(s) + println(); }
    66e4:	4d0d      	ldr	r5, [pc, #52]	; (671c <display_next_instruction(unsigned short, unsigned char)+0x7c>)
    66e6:	f7f9 fd03 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
    66ea:	a90a      	add	r1, sp, #40	; 0x28
    66ec:	4620      	mov	r0, r4
    66ee:	f002 fac5 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    66f2:	4601      	mov	r1, r0
    66f4:	4628      	mov	r0, r5
    66f6:	f002 f945 	bl	8984 <Print::print(String const&)>
    66fa:	4628      	mov	r0, r5
    66fc:	f002 f968 	bl	89d0 <Print::println()>
    6700:	a80a      	add	r0, sp, #40	; 0x28
    6702:	f002 f9bb 	bl	8a7c <String::~String()>
class StringSumHelper : public String
    6706:	a806      	add	r0, sp, #24
    6708:	f002 f9b8 	bl	8a7c <String::~String()>
    670c:	a802      	add	r0, sp, #8
    670e:	f002 f9b5 	bl	8a7c <String::~String()>
}
    6712:	b00e      	add	sp, #56	; 0x38
    6714:	bd70      	pop	{r4, r5, r6, pc}
    6716:	bf00      	nop
    6718:	20000b08 	.word	0x20000b08
    671c:	20004490 	.word	0x20004490

00006720 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6720:	4922      	ldr	r1, [pc, #136]	; (67ac <display_registers()+0x8c>)
    6722:	4b23      	ldr	r3, [pc, #140]	; (67b0 <display_registers()+0x90>)
    6724:	4a23      	ldr	r2, [pc, #140]	; (67b4 <display_registers()+0x94>)
void display_registers() {
    6726:	b500      	push	{lr}
    6728:	b08f      	sub	sp, #60	; 0x3c
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    672a:	7808      	ldrb	r0, [r1, #0]
    672c:	781b      	ldrb	r3, [r3, #0]
    672e:	7812      	ldrb	r2, [r2, #0]
    6730:	4921      	ldr	r1, [pc, #132]	; (67b8 <display_registers()+0x98>)
    6732:	9000      	str	r0, [sp, #0]
    6734:	a806      	add	r0, sp, #24
    6736:	f005 f981 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    673a:	a806      	add	r0, sp, #24
    673c:	f005 fdc0 	bl	c2c0 <strlen>
    6740:	4601      	mov	r1, r0
    6742:	a806      	add	r0, sp, #24
    6744:	f003 fe0e 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6748:	481c      	ldr	r0, [pc, #112]	; (67bc <display_registers()+0x9c>)
    674a:	f002 f941 	bl	89d0 <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    674e:	4b1c      	ldr	r3, [pc, #112]	; (67c0 <display_registers()+0xa0>)
    6750:	4a1c      	ldr	r2, [pc, #112]	; (67c4 <display_registers()+0xa4>)
    6752:	a806      	add	r0, sp, #24
    6754:	781b      	ldrb	r3, [r3, #0]
    6756:	8812      	ldrh	r2, [r2, #0]
    6758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    675c:	491a      	ldr	r1, [pc, #104]	; (67c8 <display_registers()+0xa8>)
    675e:	f005 f96d 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6762:	a806      	add	r0, sp, #24
    6764:	f005 fdac 	bl	c2c0 <strlen>
    6768:	4601      	mov	r1, r0
    676a:	a806      	add	r0, sp, #24
    676c:	f003 fdfa 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6770:	4812      	ldr	r0, [pc, #72]	; (67bc <display_registers()+0x9c>)
    6772:	f002 f92d 	bl	89d0 <Print::println()>
    sprintf(buf, "            Flags: %s", flag_status().c_str());
    6776:	a802      	add	r0, sp, #8
    6778:	f7fc f81a 	bl	27b0 <flag_status()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    677c:	9a02      	ldr	r2, [sp, #8]
    677e:	b19a      	cbz	r2, 67a8 <display_registers()+0x88>
    6780:	4912      	ldr	r1, [pc, #72]	; (67cc <display_registers()+0xac>)
    6782:	a806      	add	r0, sp, #24
    6784:	f005 f95a 	bl	ba3c <sprintf>
    6788:	a802      	add	r0, sp, #8
    678a:	f002 f977 	bl	8a7c <String::~String()>
							  return write((const uint8_t *)str, strlen(str)); }
    678e:	a806      	add	r0, sp, #24
    6790:	f005 fd96 	bl	c2c0 <strlen>
    6794:	4601      	mov	r1, r0
    6796:	a806      	add	r0, sp, #24
    6798:	f003 fde4 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    679c:	4807      	ldr	r0, [pc, #28]	; (67bc <display_registers()+0x9c>)
    679e:	f002 f917 	bl	89d0 <Print::println()>
}
    67a2:	b00f      	add	sp, #60	; 0x3c
    67a4:	f85d fb04 	ldr.w	pc, [sp], #4
    67a8:	4a09      	ldr	r2, [pc, #36]	; (67d0 <display_registers()+0xb0>)
    67aa:	e7e9      	b.n	6780 <display_registers()+0x60>
    67ac:	200188ae 	.word	0x200188ae
    67b0:	200188ad 	.word	0x200188ad
    67b4:	200188ac 	.word	0x200188ac
    67b8:	2000098c 	.word	0x2000098c
    67bc:	20004490 	.word	0x20004490
    67c0:	20004aa1 	.word	0x20004aa1
    67c4:	20018890 	.word	0x20018890
    67c8:	200009b0 	.word	0x200009b0
    67cc:	200009d0 	.word	0x200009d0
    67d0:	20001360 	.word	0x20001360

000067d4 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    67d4:	490c      	ldr	r1, [pc, #48]	; (6808 <display_info()+0x34>)
    67d6:	4b0d      	ldr	r3, [pc, #52]	; (680c <display_info()+0x38>)
    67d8:	6808      	ldr	r0, [r1, #0]
    67da:	4a0d      	ldr	r2, [pc, #52]	; (6810 <display_info()+0x3c>)
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	7812      	ldrb	r2, [r2, #0]
    67e0:	490c      	ldr	r1, [pc, #48]	; (6814 <display_info()+0x40>)
void display_info() {
    67e2:	b500      	push	{lr}
    67e4:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    67e6:	9000      	str	r0, [sp, #0]
    67e8:	a802      	add	r0, sp, #8
    67ea:	f005 f927 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    67ee:	a802      	add	r0, sp, #8
    67f0:	f005 fd66 	bl	c2c0 <strlen>
    67f4:	4601      	mov	r1, r0
    67f6:	a802      	add	r0, sp, #8
    67f8:	f003 fdb4 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    67fc:	4806      	ldr	r0, [pc, #24]	; (6818 <display_info()+0x44>)
    67fe:	f002 f8e7 	bl	89d0 <Print::println()>
}
    6802:	b013      	add	sp, #76	; 0x4c
    6804:	f85d fb04 	ldr.w	pc, [sp], #4
    6808:	200053c8 	.word	0x200053c8
    680c:	200188a0 	.word	0x200188a0
    6810:	200188b0 	.word	0x200188b0
    6814:	200003a4 	.word	0x200003a4
    6818:	20004490 	.word	0x20004490

0000681c <get_command()>:
String get_command() {
    681c:	b570      	push	{r4, r5, r6, lr}
    681e:	b084      	sub	sp, #16
    String s = "";
    6820:	491c      	ldr	r1, [pc, #112]	; (6894 <get_command()+0x78>)
String get_command() {
    6822:	4605      	mov	r5, r0
    6824:	4e1c      	ldr	r6, [pc, #112]	; (6898 <get_command()+0x7c>)
    String s = "";
    6826:	4668      	mov	r0, sp
    6828:	f002 f964 	bl	8af4 <String::String(char const*)>
    682c:	2103      	movs	r1, #3
    682e:	481b      	ldr	r0, [pc, #108]	; (689c <get_command()+0x80>)
    6830:	f003 fd98 	bl	a364 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    6834:	f003 fd2c 	bl	a290 <usb_serial_available>
        if (Serial.available()) {
    6838:	2800      	cmp	r0, #0
    683a:	d0fb      	beq.n	6834 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    683c:	f003 fd6c 	bl	a318 <usb_serial_getchar>
            switch(c) {
    6840:	b2c4      	uxtb	r4, r0
    6842:	2c08      	cmp	r4, #8
    6844:	d00e      	beq.n	6864 <get_command()+0x48>
    6846:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    6848:	4620      	mov	r0, r4
            switch(c) {
    684a:	d016      	beq.n	687a <get_command()+0x5e>
                    if (isprint(c)) {
    684c:	f004 fff8 	bl	b840 <isprint>
    6850:	2800      	cmp	r0, #0
    6852:	d0ef      	beq.n	6834 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    6854:	4621      	mov	r1, r4
    6856:	4668      	mov	r0, sp
    6858:	f002 fa00 	bl	8c5c <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    685c:	4620      	mov	r0, r4
    685e:	f003 fd6b 	bl	a338 <usb_serial_putchar>
    6862:	e7e7      	b.n	6834 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    6864:	9902      	ldr	r1, [sp, #8]
    6866:	2201      	movs	r2, #1
    6868:	4668      	mov	r0, sp
    686a:	3901      	subs	r1, #1
    686c:	f002 fac4 	bl	8df8 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6870:	2103      	movs	r1, #3
    6872:	4630      	mov	r0, r6
    6874:	f003 fd76 	bl	a364 <usb_serial_write>
    6878:	e7dc      	b.n	6834 <get_command()+0x18>
                    return(s.toLowerCase());
    687a:	4668      	mov	r0, sp
    687c:	f002 fadc 	bl	8e38 <String::toLowerCase()>
    6880:	4601      	mov	r1, r0
    6882:	4628      	mov	r0, r5
    6884:	f002 f8c6 	bl	8a14 <String::String(String const&)>
}
    6888:	4668      	mov	r0, sp
    688a:	f002 f8f7 	bl	8a7c <String::~String()>
    688e:	4628      	mov	r0, r5
    6890:	b004      	add	sp, #16
    6892:	bd70      	pop	{r4, r5, r6, pc}
    6894:	200007d4 	.word	0x200007d4
    6898:	20000380 	.word	0x20000380
    689c:	2000037c 	.word	0x2000037c

000068a0 <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    68a0:	b570      	push	{r4, r5, r6, lr}
    68a2:	460d      	mov	r5, r1
    68a4:	b088      	sub	sp, #32
    String arg = "";
    68a6:	4923      	ldr	r1, [pc, #140]	; (6934 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    68a8:	4616      	mov	r6, r2
    68aa:	4604      	mov	r4, r0
    String arg = "";
    68ac:	f002 f922 	bl	8af4 <String::String(char const*)>

    String src = _src.trim();
    68b0:	4628      	mov	r0, r5
    68b2:	f002 fad1 	bl	8e58 <String::trim()>
    68b6:	4601      	mov	r1, r0
    68b8:	4668      	mov	r0, sp
    68ba:	f002 f8ab 	bl	8a14 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    68be:	9b02      	ldr	r3, [sp, #8]
    68c0:	b92b      	cbnz	r3, 68ce <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    68c2:	4668      	mov	r0, sp
    68c4:	f002 f8da 	bl	8a7c <String::~String()>
    68c8:	4620      	mov	r0, r4
    68ca:	b008      	add	sp, #32
    68cc:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    68ce:	2120      	movs	r1, #32
    68d0:	4668      	mov	r0, sp
    68d2:	f002 fa29 	bl	8d28 <String::indexOf(char) const>
        if (idx>0) {
    68d6:	1e05      	subs	r5, r0, #0
    68d8:	dd1e      	ble.n	6918 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    68da:	462b      	mov	r3, r5
    68dc:	2200      	movs	r2, #0
    68de:	4669      	mov	r1, sp
    68e0:	a804      	add	r0, sp, #16
    68e2:	f002 fa5d 	bl	8da0 <String::substring(unsigned int, unsigned int) const>
    68e6:	a904      	add	r1, sp, #16
    68e8:	4620      	mov	r0, r4
    68ea:	f002 f94f 	bl	8b8c <String::operator=(String&&)>
    68ee:	a804      	add	r0, sp, #16
    68f0:	f002 f8c4 	bl	8a7c <String::~String()>
            remainder = src.substring(idx+1);
    68f4:	1c6a      	adds	r2, r5, #1
    68f6:	4669      	mov	r1, sp
    68f8:	a804      	add	r0, sp, #16
    68fa:	f002 fa25 	bl	8d48 <String::substring(unsigned int) const>
    68fe:	a904      	add	r1, sp, #16
    6900:	4630      	mov	r0, r6
    6902:	f002 f943 	bl	8b8c <String::operator=(String&&)>
    6906:	a804      	add	r0, sp, #16
    6908:	f002 f8b8 	bl	8a7c <String::~String()>
}
    690c:	4668      	mov	r0, sp
    690e:	f002 f8b5 	bl	8a7c <String::~String()>
    6912:	4620      	mov	r0, r4
    6914:	b008      	add	sp, #32
    6916:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    6918:	4669      	mov	r1, sp
    691a:	4620      	mov	r0, r4
    691c:	f002 f92e 	bl	8b7c <String::operator=(String const&)>
            remainder = "";
    6920:	4904      	ldr	r1, [pc, #16]	; (6934 <parse_next_arg(String&, String&)+0x94>)
    6922:	4630      	mov	r0, r6
    6924:	f002 f948 	bl	8bb8 <String::operator=(char const*)>
}
    6928:	4668      	mov	r0, sp
    692a:	f002 f8a7 	bl	8a7c <String::~String()>
    692e:	4620      	mov	r0, r4
    6930:	b008      	add	sp, #32
    6932:	bd70      	pop	{r4, r5, r6, pc}
    6934:	200007d4 	.word	0x200007d4

00006938 <print_instruction(unsigned short)>:

uint16_t print_instruction(uint16_t address) {
    6938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t opcode = read_byte(address, false);
    693c:	2100      	movs	r1, #0
uint16_t print_instruction(uint16_t address) {
    693e:	b08e      	sub	sp, #56	; 0x38
    6940:	4606      	mov	r6, r0
    uint8_t opcode = read_byte(address, false);
    6942:	f7fc f837 	bl	29b4 <read_byte(unsigned short, bool)>
    uint8_t instr_length = opcode_info[opcode].length;
    6946:	4b2a      	ldr	r3, [pc, #168]	; (69f0 <print_instruction(unsigned short)+0xb8>)
    6948:	2234      	movs	r2, #52	; 0x34

    uint8_t operands[2] = {0, 0};
    694a:	2400      	movs	r4, #0
    uint8_t opcode = read_byte(address, false);
    694c:	4607      	mov	r7, r0
    uint8_t instr_length = opcode_info[opcode].length;
    694e:	fb02 3300 	mla	r3, r2, r0, r3
    uint8_t operands[2] = {0, 0};
    6952:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t instr_length = opcode_info[opcode].length;
    6956:	f893 8031 	ldrb.w	r8, [r3, #49]	; 0x31
    for (uint8_t i=0; i<instr_length-1; i++)
    695a:	f108 39ff 	add.w	r9, r8, #4294967295
    695e:	45a1      	cmp	r9, r4
    6960:	dd43      	ble.n	69ea <print_instruction(unsigned short)+0xb2>
    6962:	f106 0a01 	add.w	sl, r6, #1
    6966:	4625      	mov	r5, r4
    6968:	fa1f fa8a 	uxth.w	sl, sl
        operands[i] = read_byte(address + 1 + i, false);
    696c:	eb0a 0004 	add.w	r0, sl, r4
    for (uint8_t i=0; i<instr_length-1; i++)
    6970:	3401      	adds	r4, #1
        operands[i] = read_byte(address + 1 + i, false);
    6972:	2100      	movs	r1, #0
    6974:	b280      	uxth	r0, r0
    6976:	f7fc f81d 	bl	29b4 <read_byte(unsigned short, bool)>
    697a:	f105 0338 	add.w	r3, r5, #56	; 0x38
    for (uint8_t i=0; i<instr_length-1; i++)
    697e:	b2e4      	uxtb	r4, r4
        operands[i] = read_byte(address + 1 + i, false);
    6980:	eb0d 0503 	add.w	r5, sp, r3
    for (uint8_t i=0; i<instr_length-1; i++)
    6984:	454c      	cmp	r4, r9
        operands[i] = read_byte(address + 1 + i, false);
    6986:	f805 0c34 	strb.w	r0, [r5, #-52]
    for (uint8_t i=0; i<instr_length-1; i++)
    698a:	4625      	mov	r5, r4
    698c:	dbee      	blt.n	696c <print_instruction(unsigned short)+0x34>

    String s = decode_opcode(opcode, operands[0], operands[1]);
    698e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6992:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6996:	4639      	mov	r1, r7
    6998:	a802      	add	r0, sp, #8
    699a:	f7f9 fba9 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
    Serial.println(String(address,HEX) + ": " + s);
    699e:	2210      	movs	r2, #16
    69a0:	4631      	mov	r1, r6
    69a2:	a806      	add	r0, sp, #24
    69a4:	f002 f8ba 	bl	8b1c <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    69a8:	a906      	add	r1, sp, #24
    69aa:	a80a      	add	r0, sp, #40	; 0x28

    return(address + instr_length);
    69ac:	4446      	add	r6, r8
    69ae:	f002 f831 	bl	8a14 <String::String(String const&)>
    Serial.println(String(address,HEX) + ": " + s);
    69b2:	4910      	ldr	r1, [pc, #64]	; (69f4 <print_instruction(unsigned short)+0xbc>)
    69b4:	a80a      	add	r0, sp, #40	; 0x28
    return(address + instr_length);
    69b6:	b2b6      	uxth	r6, r6
    Serial.println(String(address,HEX) + ": " + s);
    69b8:	f002 f968 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    69bc:	a902      	add	r1, sp, #8
    69be:	f002 f95d 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    69c2:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    69c4:	480c      	ldr	r0, [pc, #48]	; (69f8 <print_instruction(unsigned short)+0xc0>)
    69c6:	f001 ffdd 	bl	8984 <Print::print(String const&)>
    69ca:	480b      	ldr	r0, [pc, #44]	; (69f8 <print_instruction(unsigned short)+0xc0>)
    69cc:	f002 f800 	bl	89d0 <Print::println()>
class StringSumHelper : public String
    69d0:	a80a      	add	r0, sp, #40	; 0x28
    69d2:	f002 f853 	bl	8a7c <String::~String()>
    69d6:	a806      	add	r0, sp, #24
    69d8:	f002 f850 	bl	8a7c <String::~String()>
}
    69dc:	a802      	add	r0, sp, #8
    69de:	f002 f84d 	bl	8a7c <String::~String()>
    69e2:	4630      	mov	r0, r6
    69e4:	b00e      	add	sp, #56	; 0x38
    69e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (uint8_t i=0; i<instr_length-1; i++)
    69ea:	4623      	mov	r3, r4
    69ec:	4622      	mov	r2, r4
    69ee:	e7d2      	b.n	6996 <print_instruction(unsigned short)+0x5e>
    69f0:	20015418 	.word	0x20015418
    69f4:	20000b08 	.word	0x20000b08
    69f8:	20004490 	.word	0x20004490

000069fc <process_command(String)>:
        // of the following instruction
        next_pc = print_instruction(next_pc);
    }
}

ENUM_RUN_MODE process_command(String input) {
    69fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a00:	b0a5      	sub	sp, #148	; 0x94
    6a02:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    6a04:	49b2      	ldr	r1, [pc, #712]	; (6cd0 <process_command(String)+0x2d4>)
    6a06:	4668      	mov	r0, sp
    6a08:	f002 f874 	bl	8af4 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    6a0c:	466a      	mov	r2, sp
    6a0e:	4621      	mov	r1, r4
    6a10:	a804      	add	r0, sp, #16
    6a12:	f7ff ff45 	bl	68a0 <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    6a16:	466a      	mov	r2, sp
    6a18:	4669      	mov	r1, sp
    6a1a:	a808      	add	r0, sp, #32
    6a1c:	f7ff ff40 	bl	68a0 <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    6a20:	466a      	mov	r2, sp
    6a22:	4669      	mov	r1, sp
    6a24:	a80c      	add	r0, sp, #48	; 0x30
    6a26:	f7ff ff3b 	bl	68a0 <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    6a2a:	2100      	movs	r1, #0
    6a2c:	a804      	add	r0, sp, #16
    6a2e:	f002 f951 	bl	8cd4 <String::operator[](unsigned int)>
    6a32:	7805      	ldrb	r5, [r0, #0]
    6a34:	2101      	movs	r1, #1
    6a36:	a804      	add	r0, sp, #16
    6a38:	f002 f94c 	bl	8cd4 <String::operator[](unsigned int)>
    6a3c:	7803      	ldrb	r3, [r0, #0]
    6a3e:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    6a40:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    6a44:	442b      	add	r3, r5
    switch (cmd_int) {
    6a46:	4293      	cmp	r3, r2
    6a48:	f000 8267 	beq.w	6f1a <process_command(String)+0x51e>
    6a4c:	d83f      	bhi.n	6ace <process_command(String)+0xd2>
    6a4e:	f246 6265 	movw	r2, #26213	; 0x6665
    6a52:	4293      	cmp	r3, r2
    6a54:	f000 822c 	beq.w	6eb0 <process_command(String)+0x4b4>
    6a58:	f240 8119 	bls.w	6c8e <process_command(String)+0x292>
    6a5c:	f646 126e 	movw	r2, #26990	; 0x696e
    6a60:	4293      	cmp	r3, r2
    6a62:	f000 8252 	beq.w	6f0a <process_command(String)+0x50e>
    6a66:	f240 8096 	bls.w	6b96 <process_command(String)+0x19a>
    6a6a:	f646 4269 	movw	r2, #27753	; 0x6c69
    6a6e:	4293      	cmp	r3, r2
    6a70:	f040 81d1 	bne.w	6e16 <process_command(String)+0x41a>
            if (pc_trace)
                pc_trace_index = 0;
			break;

        case CMD_LI:
            switch ((arg1.length()>0) + (arg2.length()>0)) {
    6a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a78:	3b00      	subs	r3, #0
    6a7a:	bf18      	it	ne
    6a7c:	2301      	movne	r3, #1
    6a7e:	2a00      	cmp	r2, #0
    6a80:	bf18      	it	ne
    6a82:	3301      	addne	r3, #1
    6a84:	2b01      	cmp	r3, #1
    6a86:	f000 825f 	beq.w	6f48 <process_command(String)+0x54c>
    6a8a:	2b02      	cmp	r3, #2
    6a8c:	f040 8252 	bne.w	6f34 <process_command(String)+0x538>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6a90:	9808      	ldr	r0, [sp, #32]
    6a92:	2800      	cmp	r0, #0
    6a94:	f000 8300 	beq.w	7098 <process_command(String)+0x69c>
                        list_instructions(start_address, 16);
                    }
                    break;
                case 2:  // Two arguments - Print instructions starting at address, count
                    {
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6a98:	2210      	movs	r2, #16
    6a9a:	2100      	movs	r1, #0
    6a9c:	f004 fdbe 	bl	b61c <strtol>
    6aa0:	b284      	uxth	r4, r0
    6aa2:	980c      	ldr	r0, [sp, #48]	; 0x30
    6aa4:	2800      	cmp	r0, #0
    6aa6:	f000 82f5 	beq.w	7094 <process_command(String)+0x698>
                        uint8_t count = strtol(arg2.c_str(), 0, 8);
    6aaa:	2208      	movs	r2, #8
    6aac:	2100      	movs	r1, #0
    6aae:	f004 fdb5 	bl	b61c <strtol>
    for (uint8_t i=0; i<count; i++) {
    6ab2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    6ab6:	f000 815d 	beq.w	6d74 <process_command(String)+0x378>
    6aba:	2500      	movs	r5, #0
    6abc:	3501      	adds	r5, #1
        next_pc = print_instruction(next_pc);
    6abe:	4620      	mov	r0, r4
    6ac0:	f7ff ff3a 	bl	6938 <print_instruction(unsigned short)>
    6ac4:	4604      	mov	r4, r0
    for (uint8_t i=0; i<count; i++) {
    6ac6:	b2eb      	uxtb	r3, r5
    6ac8:	429e      	cmp	r6, r3
    6aca:	d8f7      	bhi.n	6abc <process_command(String)+0xc0>
    6acc:	e152      	b.n	6d74 <process_command(String)+0x378>
    switch (cmd_int) {
    6ace:	f247 3273 	movw	r2, #29555	; 0x7373
    6ad2:	4293      	cmp	r3, r2
    6ad4:	f000 81d9 	beq.w	6e8a <process_command(String)+0x48e>
    6ad8:	f240 812e 	bls.w	6d38 <process_command(String)+0x33c>
    6adc:	f247 4274 	movw	r2, #29812	; 0x7474
    6ae0:	4293      	cmp	r3, r2
    6ae2:	f000 81c3 	beq.w	6e6c <process_command(String)+0x470>
    6ae6:	f247 7272 	movw	r2, #30578	; 0x7772
    6aea:	4293      	cmp	r3, r2
    6aec:	f040 80e0 	bne.w	6cb0 <process_command(String)+0x2b4>
    6af0:	9808      	ldr	r0, [sp, #32]
    6af2:	2800      	cmp	r0, #0
    6af4:	f000 827b 	beq.w	6fee <process_command(String)+0x5f2>
        //
        //      Write one or more bytes to <address>.
        //
        case CMD_WR:
            {
                word addr = strtoul(arg1.c_str(), 0, 16);
    6af8:	2210      	movs	r2, #16
    6afa:	2100      	movs	r1, #0
    6afc:	f004 fe3c 	bl	b778 <strtoul>
    6b00:	4605      	mov	r5, r0
    6b02:	980c      	ldr	r0, [sp, #48]	; 0x30
    6b04:	2800      	cmp	r0, #0
    6b06:	f000 826a 	beq.w	6fde <process_command(String)+0x5e2>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6b0a:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6b0e:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    6b12:	2210      	movs	r2, #16
    6b14:	2100      	movs	r1, #0
    6b16:	f004 fe2f 	bl	b778 <strtoul>
    6b1a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84

                digitalWriteFast(PIN_SYNC, 0x1);  //Special for manual writes
                write_byte(addr, data);
    6b1e:	b2c1      	uxtb	r1, r0
    6b20:	b2a8      	uxth	r0, r5
    6b22:	f7fc f903 	bl	2d2c <write_byte(unsigned short, unsigned char)>
                digitalWriteFast(PIN_SYNC, 0x0);

                while (remainder.length()) {
    6b26:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6b28:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    6b2c:	b1cb      	cbz	r3, 6b62 <process_command(String)+0x166>
    6b2e:	ac14      	add	r4, sp, #80	; 0x50
    6b30:	4e68      	ldr	r6, [pc, #416]	; (6cd4 <process_command(String)+0x2d8>)
                    String d = parse_next_arg(remainder, remainder);
    6b32:	466a      	mov	r2, sp
    6b34:	4669      	mov	r1, sp
    6b36:	4620      	mov	r0, r4
                    data = strtoul(d.c_str(), 0, 16);
                    write_byte(++addr, data);
    6b38:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    6b3a:	f7ff feb1 	bl	68a0 <parse_next_arg(String&, String&)>
    6b3e:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    6b40:	2210      	movs	r2, #16
    6b42:	2100      	movs	r1, #0
    6b44:	2800      	cmp	r0, #0
    6b46:	bf08      	it	eq
    6b48:	4630      	moveq	r0, r6
    6b4a:	f004 fe15 	bl	b778 <strtoul>
                    write_byte(++addr, data);
    6b4e:	b2c1      	uxtb	r1, r0
    6b50:	b2a8      	uxth	r0, r5
    6b52:	f7fc f8eb 	bl	2d2c <write_byte(unsigned short, unsigned char)>
                }
    6b56:	4620      	mov	r0, r4
    6b58:	f001 ff90 	bl	8a7c <String::~String()>
                while (remainder.length()) {
    6b5c:	9b02      	ldr	r3, [sp, #8]
    6b5e:	2b00      	cmp	r3, #0
    6b60:	d1e7      	bne.n	6b32 <process_command(String)+0x136>
    6b62:	2102      	movs	r1, #2
    6b64:	485c      	ldr	r0, [pc, #368]	; (6cd8 <process_command(String)+0x2dc>)
    6b66:	f003 fbfd 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6b6a:	485c      	ldr	r0, [pc, #368]	; (6cdc <process_command(String)+0x2e0>)
    6b6c:	f001 ff30 	bl	89d0 <Print::println()>
                Serial.println("OK");
            }
            run_mode = WAITING;
    6b70:	4b5b      	ldr	r3, [pc, #364]	; (6ce0 <process_command(String)+0x2e4>)
    6b72:	2400      	movs	r4, #0
    6b74:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    6b76:	a80c      	add	r0, sp, #48	; 0x30
    6b78:	f001 ff80 	bl	8a7c <String::~String()>
    6b7c:	a808      	add	r0, sp, #32
    6b7e:	f001 ff7d 	bl	8a7c <String::~String()>
    6b82:	a804      	add	r0, sp, #16
    6b84:	f001 ff7a 	bl	8a7c <String::~String()>
    6b88:	4668      	mov	r0, sp
    6b8a:	f001 ff77 	bl	8a7c <String::~String()>
    6b8e:	4620      	mov	r0, r4
    6b90:	b025      	add	sp, #148	; 0x94
    6b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    6b96:	f246 726f 	movw	r2, #26479	; 0x676f
    6b9a:	4293      	cmp	r3, r2
    6b9c:	d12c      	bne.n	6bf8 <process_command(String)+0x1fc>
            run_mode = RUNNING;
    6b9e:	4d50      	ldr	r5, [pc, #320]	; (6ce0 <process_command(String)+0x2e4>)
    6ba0:	2402      	movs	r4, #2
            if (arg1.length()) {
    6ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    6ba4:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d0e5      	beq.n	6b76 <process_command(String)+0x17a>
    6baa:	9808      	ldr	r0, [sp, #32]
    6bac:	2800      	cmp	r0, #0
    6bae:	f000 826f 	beq.w	7090 <process_command(String)+0x694>
                runto_address = strtoul(arg1.c_str(), 0, 16);
    6bb2:	2210      	movs	r2, #16
    6bb4:	2100      	movs	r1, #0
    6bb6:	f004 fddf 	bl	b778 <strtoul>
    6bba:	4b4a      	ldr	r3, [pc, #296]	; (6ce4 <process_command(String)+0x2e8>)
	StringSumHelper(const char *p) : String(p) {}
    6bbc:	494a      	ldr	r1, [pc, #296]	; (6ce8 <process_command(String)+0x2ec>)
    6bbe:	6018      	str	r0, [r3, #0]
    6bc0:	a814      	add	r0, sp, #80	; 0x50
    6bc2:	f001 ff97 	bl	8af4 <String::String(char const*)>
                Serial.println("Breakpoint set to $" + String(breakpoint, HEX));
    6bc6:	4b49      	ldr	r3, [pc, #292]	; (6cec <process_command(String)+0x2f0>)
    6bc8:	2210      	movs	r2, #16
    6bca:	a810      	add	r0, sp, #64	; 0x40
    6bcc:	6819      	ldr	r1, [r3, #0]
    6bce:	f001 ffbd 	bl	8b4c <String::String(unsigned int, unsigned char)>
    6bd2:	a910      	add	r1, sp, #64	; 0x40
    6bd4:	a814      	add	r0, sp, #80	; 0x50
    6bd6:	f002 f851 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6bda:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6bdc:	483f      	ldr	r0, [pc, #252]	; (6cdc <process_command(String)+0x2e0>)
    6bde:	f001 fed1 	bl	8984 <Print::print(String const&)>
    6be2:	483e      	ldr	r0, [pc, #248]	; (6cdc <process_command(String)+0x2e0>)
    6be4:	f001 fef4 	bl	89d0 <Print::println()>
    6be8:	a810      	add	r0, sp, #64	; 0x40
    6bea:	f001 ff47 	bl	8a7c <String::~String()>
class StringSumHelper : public String
    6bee:	a814      	add	r0, sp, #80	; 0x50
    6bf0:	f001 ff44 	bl	8a7c <String::~String()>
    return(run_mode);
    6bf4:	782c      	ldrb	r4, [r5, #0]
    6bf6:	e7be      	b.n	6b76 <process_command(String)+0x17a>
    switch (cmd_int) {
    6bf8:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    6bfc:	f040 810b 	bne.w	6e16 <process_command(String)+0x41a>
            Serial.println(String("Available Commands:\n\r")+
    6c00:	493b      	ldr	r1, [pc, #236]	; (6cf0 <process_command(String)+0x2f4>)
    6c02:	a810      	add	r0, sp, #64	; 0x40
    6c04:	f001 ff76 	bl	8af4 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    6c08:	a910      	add	r1, sp, #64	; 0x40
    6c0a:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6c0c:	2400      	movs	r4, #0
    6c0e:	f001 ff01 	bl	8a14 <String::String(String const&)>
                           "    IN                                   Information about ICE state\n\r"+
    6c12:	4938      	ldr	r1, [pc, #224]	; (6cf4 <process_command(String)+0x2f8>)
    6c14:	a814      	add	r0, sp, #80	; 0x50
    6c16:	f002 f839 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>                            Set memory addressing mode (0-3 see below)\n\r"+
    6c1a:	4937      	ldr	r1, [pc, #220]	; (6cf8 <process_command(String)+0x2fc>)
    6c1c:	f002 f836 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    DR                                   Dump registers\n\r"+
    6c20:	4936      	ldr	r1, [pc, #216]	; (6cfc <process_command(String)+0x300>)
    6c22:	f002 f833 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    SS                                   Single-step execution\n\r"+
    6c26:	4936      	ldr	r1, [pc, #216]	; (6d00 <process_command(String)+0x304>)
    6c28:	f002 f830 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    GO [<address>]                       Execute from PC (Stop at optional address)\n\r"+
    6c2c:	4935      	ldr	r1, [pc, #212]	; (6d04 <process_command(String)+0x308>)
    6c2e:	f002 f82d 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>                         Set execution breakpoint\n\r"+
    6c32:	4935      	ldr	r1, [pc, #212]	; (6d08 <process_command(String)+0x30c>)
    6c34:	f002 f82a 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>                     Set register (PC, A, X, Y) to value\n\r"+
    6c38:	4934      	ldr	r1, [pc, #208]	; (6d0c <process_command(String)+0x310>)
    6c3a:	f002 f827 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> [<count>]               Read from memory address, displays <count> values\n\r"+
    6c3e:	4934      	ldr	r1, [pc, #208]	; (6d10 <process_command(String)+0x314>)
    6c40:	f002 f824 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value> [<value> ...]   Write values starting at memory address\n\r"+
    6c44:	4933      	ldr	r1, [pc, #204]	; (6d14 <process_command(String)+0x318>)
    6c46:	f002 f821 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    6c4a:	4933      	ldr	r1, [pc, #204]	; (6d18 <process_command(String)+0x31c>)
    6c4c:	f002 f81e 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    6c50:	4932      	ldr	r1, [pc, #200]	; (6d1c <process_command(String)+0x320>)
    6c52:	f002 f81b 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    6c56:	4932      	ldr	r1, [pc, #200]	; (6d20 <process_command(String)+0x324>)
    6c58:	f002 f818 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    6c5c:	4931      	ldr	r1, [pc, #196]	; (6d24 <process_command(String)+0x328>)
    6c5e:	f002 f815 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    6c62:	4931      	ldr	r1, [pc, #196]	; (6d28 <process_command(String)+0x32c>)
    6c64:	f002 f812 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    6c68:	4930      	ldr	r1, [pc, #192]	; (6d2c <process_command(String)+0x330>)
    6c6a:	f002 f80f 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    6c6e:	4601      	mov	r1, r0
    6c70:	481a      	ldr	r0, [pc, #104]	; (6cdc <process_command(String)+0x2e0>)
    6c72:	f001 fe87 	bl	8984 <Print::print(String const&)>
    6c76:	4819      	ldr	r0, [pc, #100]	; (6cdc <process_command(String)+0x2e0>)
    6c78:	f001 feaa 	bl	89d0 <Print::println()>
class StringSumHelper : public String
    6c7c:	a814      	add	r0, sp, #80	; 0x50
    6c7e:	f001 fefd 	bl	8a7c <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    6c82:	a810      	add	r0, sp, #64	; 0x40
    6c84:	f001 fefa 	bl	8a7c <String::~String()>
            run_mode = WAITING;
    6c88:	4b15      	ldr	r3, [pc, #84]	; (6ce0 <process_command(String)+0x2e4>)
    6c8a:	701c      	strb	r4, [r3, #0]
            break;
    6c8c:	e773      	b.n	6b76 <process_command(String)+0x17a>
    switch (cmd_int) {
    6c8e:	f246 226b 	movw	r2, #25195	; 0x626b
    6c92:	4293      	cmp	r3, r2
    6c94:	f000 8101 	beq.w	6e9a <process_command(String)+0x49e>
    6c98:	d96a      	bls.n	6d70 <process_command(String)+0x374>
    6c9a:	f246 4272 	movw	r2, #25714	; 0x6472
    6c9e:	4293      	cmp	r3, r2
    6ca0:	f040 80b9 	bne.w	6e16 <process_command(String)+0x41a>
            display_registers();
    6ca4:	f7ff fd3c 	bl	6720 <display_registers()>
            run_mode = WAITING;          
    6ca8:	2400      	movs	r4, #0
    6caa:	4b0d      	ldr	r3, [pc, #52]	; (6ce0 <process_command(String)+0x2e4>)
    6cac:	701c      	strb	r4, [r3, #0]
            break;
    6cae:	e762      	b.n	6b76 <process_command(String)+0x17a>
    switch (cmd_int) {
    6cb0:	f247 4272 	movw	r2, #29810	; 0x7472
    6cb4:	4293      	cmp	r3, r2
    6cb6:	f040 80ae 	bne.w	6e16 <process_command(String)+0x41a>
			pc_trace = !pc_trace;
    6cba:	4a1d      	ldr	r2, [pc, #116]	; (6d30 <process_command(String)+0x334>)
    6cbc:	7813      	ldrb	r3, [r2, #0]
    6cbe:	f083 0301 	eor.w	r3, r3, #1
    6cc2:	7013      	strb	r3, [r2, #0]
            if (pc_trace)
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d055      	beq.n	6d74 <process_command(String)+0x378>
                pc_trace_index = 0;
    6cc8:	4b1a      	ldr	r3, [pc, #104]	; (6d34 <process_command(String)+0x338>)
    6cca:	2200      	movs	r2, #0
    6ccc:	601a      	str	r2, [r3, #0]
    6cce:	e051      	b.n	6d74 <process_command(String)+0x378>
    6cd0:	200007d4 	.word	0x200007d4
    6cd4:	20001360 	.word	0x20001360
    6cd8:	20000900 	.word	0x20000900
    6cdc:	20004490 	.word	0x20004490
    6ce0:	200188b0 	.word	0x200188b0
    6ce4:	20018824 	.word	0x20018824
    6ce8:	200008ec 	.word	0x200008ec
    6cec:	200053c8 	.word	0x200053c8
    6cf0:	20000458 	.word	0x20000458
    6cf4:	20000470 	.word	0x20000470
    6cf8:	200004b8 	.word	0x200004b8
    6cfc:	20000510 	.word	0x20000510
    6d00:	2000054c 	.word	0x2000054c
    6d04:	20000590 	.word	0x20000590
    6d08:	200005e8 	.word	0x200005e8
    6d0c:	2000062c 	.word	0x2000062c
    6d10:	2000067c 	.word	0x2000067c
    6d14:	200006dc 	.word	0x200006dc
    6d18:	20000730 	.word	0x20000730
    6d1c:	20000734 	.word	0x20000734
    6d20:	2000074c 	.word	0x2000074c
    6d24:	20000778 	.word	0x20000778
    6d28:	200007d8 	.word	0x200007d8
    6d2c:	20000834 	.word	0x20000834
    6d30:	200188ab 	.word	0x200188ab
    6d34:	20018818 	.word	0x20018818
    switch (cmd_int) {
    6d38:	f247 2273 	movw	r2, #29299	; 0x7273
    6d3c:	4293      	cmp	r3, r2
    6d3e:	f000 80a8 	beq.w	6e92 <process_command(String)+0x496>
    6d42:	f247 3272 	movw	r2, #29554	; 0x7372
    6d46:	4293      	cmp	r3, r2
    6d48:	d117      	bne.n	6d7a <process_command(String)+0x37e>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6d4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    6d4c:	2800      	cmp	r0, #0
    6d4e:	f000 814c 	beq.w	6fea <process_command(String)+0x5ee>
                word value = strtoul(arg2.c_str(), 0, 16);
    6d52:	2100      	movs	r1, #0
    6d54:	2210      	movs	r2, #16
    6d56:	f004 fd0f 	bl	b778 <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6d5a:	49b4      	ldr	r1, [pc, #720]	; (702c <process_command(String)+0x630>)
    6d5c:	4604      	mov	r4, r0
    6d5e:	a808      	add	r0, sp, #32
    6d60:	f001 ffa2 	bl	8ca8 <String::equals(char const*) const>
                if (arg1=="pc") {
    6d64:	2800      	cmp	r0, #0
    6d66:	f000 8132 	beq.w	6fce <process_command(String)+0x5d2>
                    register_pc = value & 0xFFFF;
    6d6a:	4bb1      	ldr	r3, [pc, #708]	; (7030 <process_command(String)+0x634>)
    6d6c:	801c      	strh	r4, [r3, #0]
    6d6e:	e799      	b.n	6ca4 <process_command(String)+0x2a8>
    switch (cmd_int) {
    6d70:	2b00      	cmp	r3, #0
    6d72:	d14c      	bne.n	6e0e <process_command(String)+0x412>
    return(run_mode);
    6d74:	4baf      	ldr	r3, [pc, #700]	; (7034 <process_command(String)+0x638>)
    6d76:	781c      	ldrb	r4, [r3, #0]
    6d78:	e6fd      	b.n	6b76 <process_command(String)+0x17a>
    switch (cmd_int) {
    6d7a:	f247 2264 	movw	r2, #29284	; 0x7264
    6d7e:	4293      	cmp	r3, r2
    6d80:	d149      	bne.n	6e16 <process_command(String)+0x41a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6d82:	9808      	ldr	r0, [sp, #32]
    6d84:	2800      	cmp	r0, #0
    6d86:	f000 812c 	beq.w	6fe2 <process_command(String)+0x5e6>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d8a:	2210      	movs	r2, #16
    6d8c:	2100      	movs	r1, #0
    6d8e:	f004 fcf3 	bl	b778 <strtoul>
                if (arg2.length()) {
    6d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d94:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    6d96:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    6d98:	2b00      	cmp	r3, #0
    6d9a:	f040 80ef 	bne.w	6f7c <process_command(String)+0x580>
                sprintf(s,"[%04X] = ", addr);
    6d9e:	4602      	mov	r2, r0
    6da0:	49a5      	ldr	r1, [pc, #660]	; (7038 <process_command(String)+0x63c>)
    6da2:	4620      	mov	r0, r4
                byte count = 1;
    6da4:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    6da8:	f004 fe48 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6dac:	4620      	mov	r0, r4
    6dae:	f005 fa87 	bl	c2c0 <strlen>
    6db2:	4601      	mov	r1, r0
    6db4:	4620      	mov	r0, r4
    6db6:	f003 fad5 	bl	a364 <usb_serial_write>
                byte count = 1;
    6dba:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    6dbc:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 7088 <process_command(String)+0x68c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6dc0:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    6dc4:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 708c <process_command(String)+0x690>
    6dc8:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    6dca:	b115      	cbz	r5, 6dd2 <process_command(String)+0x3d6>
    6dcc:	075b      	lsls	r3, r3, #29
    6dce:	f000 8112 	beq.w	6ff6 <process_command(String)+0x5fa>
    6dd2:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    6dd6:	2100      	movs	r1, #0
    6dd8:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    6dda:	3501      	adds	r5, #1
    6ddc:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    6de0:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    6de2:	f7fb fde7 	bl	29b4 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    6de6:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    6de8:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6dea:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    6dee:	4620      	mov	r0, r4
    6df0:	f004 fe24 	bl	ba3c <sprintf>
    6df4:	4620      	mov	r0, r4
    6df6:	f005 fa63 	bl	c2c0 <strlen>
    6dfa:	4601      	mov	r1, r0
    6dfc:	4620      	mov	r0, r4
    6dfe:	f003 fab1 	bl	a364 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6e02:	b2eb      	uxtb	r3, r5
    6e04:	4599      	cmp	r9, r3
    6e06:	d8e0      	bhi.n	6dca <process_command(String)+0x3ce>
    6e08:	2100      	movs	r1, #0
    6e0a:	488c      	ldr	r0, [pc, #560]	; (703c <process_command(String)+0x640>)
    6e0c:	e6ab      	b.n	6b66 <process_command(String)+0x16a>
    switch (cmd_int) {
    6e0e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    6e12:	f43f aef5 	beq.w	6c00 <process_command(String)+0x204>
	StringSumHelper(const char *p) : String(p) {}
    6e16:	498a      	ldr	r1, [pc, #552]	; (7040 <process_command(String)+0x644>)
    6e18:	a814      	add	r0, sp, #80	; 0x50
    6e1a:	f001 fe6b 	bl	8af4 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e1e:	4621      	mov	r1, r4
    6e20:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6e22:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e24:	f001 ff2a 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6e28:	4986      	ldr	r1, [pc, #536]	; (7044 <process_command(String)+0x648>)
    6e2a:	f001 ff2f 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    6e2e:	a904      	add	r1, sp, #16
    6e30:	f001 ff24 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6e34:	4984      	ldr	r1, [pc, #528]	; (7048 <process_command(String)+0x64c>)
    6e36:	f001 ff29 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    6e3a:	a908      	add	r1, sp, #32
    6e3c:	f001 ff1e 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6e40:	4981      	ldr	r1, [pc, #516]	; (7048 <process_command(String)+0x64c>)
    6e42:	f001 ff23 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    6e46:	a90c      	add	r1, sp, #48	; 0x30
    6e48:	f001 ff18 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6e4c:	497f      	ldr	r1, [pc, #508]	; (704c <process_command(String)+0x650>)
    6e4e:	f001 ff1d 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    6e52:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6e54:	487e      	ldr	r0, [pc, #504]	; (7050 <process_command(String)+0x654>)
    6e56:	f001 fd95 	bl	8984 <Print::print(String const&)>
    6e5a:	487d      	ldr	r0, [pc, #500]	; (7050 <process_command(String)+0x654>)
    6e5c:	f001 fdb8 	bl	89d0 <Print::println()>
class StringSumHelper : public String
    6e60:	a814      	add	r0, sp, #80	; 0x50
    6e62:	f001 fe0b 	bl	8a7c <String::~String()>
            run_mode = WAITING;
    6e66:	4b73      	ldr	r3, [pc, #460]	; (7034 <process_command(String)+0x638>)
    6e68:	701c      	strb	r4, [r3, #0]
            break;
    6e6a:	e684      	b.n	6b76 <process_command(String)+0x17a>
    6e6c:	4d71      	ldr	r5, [pc, #452]	; (7034 <process_command(String)+0x638>)
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6e6e:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6e72:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    6e76:	f7fb fd4d 	bl	2914 <sample_at_CLK_rising_edge()>
    6e7a:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    6e7e:	f7fb fd49 	bl	2914 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6e82:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    return(run_mode);
    6e86:	782c      	ldrb	r4, [r5, #0]
}
    6e88:	e675      	b.n	6b76 <process_command(String)+0x17a>
            run_mode = SINGLE_STEP;
    6e8a:	4b6a      	ldr	r3, [pc, #424]	; (7034 <process_command(String)+0x638>)
    6e8c:	2401      	movs	r4, #1
    6e8e:	701c      	strb	r4, [r3, #0]
            break;
    6e90:	e671      	b.n	6b76 <process_command(String)+0x17a>
            run_mode = RESETTING;
    6e92:	4d68      	ldr	r5, [pc, #416]	; (7034 <process_command(String)+0x638>)
    6e94:	2303      	movs	r3, #3
    6e96:	702b      	strb	r3, [r5, #0]
    6e98:	e7e9      	b.n	6e6e <process_command(String)+0x472>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6e9a:	9808      	ldr	r0, [sp, #32]
    6e9c:	2800      	cmp	r0, #0
    6e9e:	f000 80a8 	beq.w	6ff2 <process_command(String)+0x5f6>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6ea2:	2210      	movs	r2, #16
    6ea4:	2100      	movs	r1, #0
    6ea6:	f004 fc67 	bl	b778 <strtoul>
                breakpoint = addr;
    6eaa:	4b6a      	ldr	r3, [pc, #424]	; (7054 <process_command(String)+0x658>)
    6eac:	6018      	str	r0, [r3, #0]
    6eae:	e658      	b.n	6b62 <process_command(String)+0x166>
				if (run_fence) {
    6eb0:	4b69      	ldr	r3, [pc, #420]	; (7058 <process_command(String)+0x65c>)
    6eb2:	781a      	ldrb	r2, [r3, #0]
    6eb4:	2a00      	cmp	r2, #0
    6eb6:	d158      	bne.n	6f6a <process_command(String)+0x56e>
					run_fence = true;
    6eb8:	2201      	movs	r2, #1
    6eba:	9808      	ldr	r0, [sp, #32]
    6ebc:	701a      	strb	r2, [r3, #0]
    6ebe:	2800      	cmp	r0, #0
    6ec0:	f000 80a8 	beq.w	7014 <process_command(String)+0x618>
					run_fence_low  = strtoul(arg1.c_str(), 0, 16);
    6ec4:	4c65      	ldr	r4, [pc, #404]	; (705c <process_command(String)+0x660>)
    6ec6:	2210      	movs	r2, #16
    6ec8:	2100      	movs	r1, #0
    6eca:	f004 fc55 	bl	b778 <strtoul>
    6ece:	8020      	strh	r0, [r4, #0]
    6ed0:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ed2:	2800      	cmp	r0, #0
    6ed4:	f000 809c 	beq.w	7010 <process_command(String)+0x614>
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6ed8:	2210      	movs	r2, #16
    6eda:	2100      	movs	r1, #0
    6edc:	f004 fc4c 	bl	b778 <strtoul>
    6ee0:	4b5f      	ldr	r3, [pc, #380]	; (7060 <process_command(String)+0x664>)
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6ee2:	8822      	ldrh	r2, [r4, #0]
    6ee4:	495f      	ldr	r1, [pc, #380]	; (7064 <process_command(String)+0x668>)
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6ee6:	8018      	strh	r0, [r3, #0]
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6ee8:	b283      	uxth	r3, r0
    6eea:	a814      	add	r0, sp, #80	; 0x50
    6eec:	f004 fda6 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ef0:	a814      	add	r0, sp, #80	; 0x50
    6ef2:	f005 f9e5 	bl	c2c0 <strlen>
    6ef6:	4601      	mov	r1, r0
    6ef8:	a814      	add	r0, sp, #80	; 0x50
    6efa:	f003 fa33 	bl	a364 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6efe:	4854      	ldr	r0, [pc, #336]	; (7050 <process_command(String)+0x654>)
    6f00:	f001 fd66 	bl	89d0 <Print::println()>
    return(run_mode);
    6f04:	4b4b      	ldr	r3, [pc, #300]	; (7034 <process_command(String)+0x638>)
    6f06:	781c      	ldrb	r4, [r3, #0]
    6f08:	e635      	b.n	6b76 <process_command(String)+0x17a>
            display_registers();
    6f0a:	f7ff fc09 	bl	6720 <display_registers()>
            run_mode = WAITING;
    6f0e:	2400      	movs	r4, #0
            display_info();
    6f10:	f7ff fc60 	bl	67d4 <display_info()>
            run_mode = WAITING;
    6f14:	4b47      	ldr	r3, [pc, #284]	; (7034 <process_command(String)+0x638>)
    6f16:	701c      	strb	r4, [r3, #0]
            break;
    6f18:	e62d      	b.n	6b76 <process_command(String)+0x17a>
    6f1a:	9808      	ldr	r0, [sp, #32]
    6f1c:	2800      	cmp	r0, #0
    6f1e:	d062      	beq.n	6fe6 <process_command(String)+0x5ea>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    6f20:	220a      	movs	r2, #10
    6f22:	2100      	movs	r1, #0
    6f24:	f004 fc28 	bl	b778 <strtoul>
    6f28:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    6f2a:	2803      	cmp	r0, #3
    6f2c:	d83c      	bhi.n	6fa8 <process_command(String)+0x5ac>
                    addr_mode = (ADDR_MODE)a_mode;
    6f2e:	4b4e      	ldr	r3, [pc, #312]	; (7068 <process_command(String)+0x66c>)
    6f30:	7018      	strb	r0, [r3, #0]
    6f32:	e61d      	b.n	6b70 <process_command(String)+0x174>
                        list_instructions(register_pc, 16);
    6f34:	4b3e      	ldr	r3, [pc, #248]	; (7030 <process_command(String)+0x634>)
    6f36:	2410      	movs	r4, #16
    6f38:	8818      	ldrh	r0, [r3, #0]
        next_pc = print_instruction(next_pc);
    6f3a:	f7ff fcfd 	bl	6938 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f3e:	1e63      	subs	r3, r4, #1
    6f40:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f44:	d1f9      	bne.n	6f3a <process_command(String)+0x53e>
    6f46:	e715      	b.n	6d74 <process_command(String)+0x378>
    6f48:	9808      	ldr	r0, [sp, #32]
    6f4a:	2800      	cmp	r0, #0
    6f4c:	f000 80a6 	beq.w	709c <process_command(String)+0x6a0>
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6f50:	2210      	movs	r2, #16
    6f52:	2100      	movs	r1, #0
    6f54:	f004 fb62 	bl	b61c <strtol>
    6f58:	2410      	movs	r4, #16
    6f5a:	b280      	uxth	r0, r0
        next_pc = print_instruction(next_pc);
    6f5c:	f7ff fcec 	bl	6938 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f60:	1e63      	subs	r3, r4, #1
    6f62:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f66:	d1f9      	bne.n	6f5c <process_command(String)+0x560>
    6f68:	e704      	b.n	6d74 <process_command(String)+0x378>
					run_fence = false;
    6f6a:	2200      	movs	r2, #0
					Serial.println("Run fence disabled");
    6f6c:	493f      	ldr	r1, [pc, #252]	; (706c <process_command(String)+0x670>)
    6f6e:	4838      	ldr	r0, [pc, #224]	; (7050 <process_command(String)+0x654>)
					run_fence = false;
    6f70:	701a      	strb	r2, [r3, #0]
					Serial.println("Run fence disabled");
    6f72:	f7f9 f8ab 	bl	cc <Print::println(char const*) [clone .isra.0]>
    return(run_mode);
    6f76:	4b2f      	ldr	r3, [pc, #188]	; (7034 <process_command(String)+0x638>)
    6f78:	781c      	ldrb	r4, [r3, #0]
    6f7a:	e5fc      	b.n	6b76 <process_command(String)+0x17a>
                    count = arg2.toInt() & 0xFF;
    6f7c:	a80c      	add	r0, sp, #48	; 0x30
    6f7e:	f001 ff97 	bl	8eb0 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    6f82:	492d      	ldr	r1, [pc, #180]	; (7038 <process_command(String)+0x63c>)
                    count = arg2.toInt() & 0xFF;
    6f84:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    6f88:	4632      	mov	r2, r6
    6f8a:	4620      	mov	r0, r4
    6f8c:	f004 fd56 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6f90:	4620      	mov	r0, r4
    6f92:	f005 f995 	bl	c2c0 <strlen>
    6f96:	4601      	mov	r1, r0
    6f98:	4620      	mov	r0, r4
    6f9a:	f003 f9e3 	bl	a364 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6f9e:	f1b9 0f00 	cmp.w	r9, #0
    6fa2:	f47f af0a 	bne.w	6dba <process_command(String)+0x3be>
    6fa6:	e72f      	b.n	6e08 <process_command(String)+0x40c>
	StringSumHelper(const char *p) : String(p) {}
    6fa8:	4931      	ldr	r1, [pc, #196]	; (7070 <process_command(String)+0x674>)
    6faa:	a814      	add	r0, sp, #80	; 0x50
    6fac:	f001 fda2 	bl	8af4 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    6fb0:	a908      	add	r1, sp, #32
    6fb2:	a814      	add	r0, sp, #80	; 0x50
    6fb4:	f001 fe62 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    6fb8:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6fba:	4825      	ldr	r0, [pc, #148]	; (7050 <process_command(String)+0x654>)
    6fbc:	f001 fce2 	bl	8984 <Print::print(String const&)>
    6fc0:	4823      	ldr	r0, [pc, #140]	; (7050 <process_command(String)+0x654>)
    6fc2:	f001 fd05 	bl	89d0 <Print::println()>
class StringSumHelper : public String
    6fc6:	a814      	add	r0, sp, #80	; 0x50
    6fc8:	f001 fd58 	bl	8a7c <String::~String()>
            run_mode = WAITING;
    6fcc:	e5d0      	b.n	6b70 <process_command(String)+0x174>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6fce:	4929      	ldr	r1, [pc, #164]	; (7074 <process_command(String)+0x678>)
    6fd0:	a808      	add	r0, sp, #32
    6fd2:	f001 fe69 	bl	8ca8 <String::equals(char const*) const>
                else if (arg1=="a") {
    6fd6:	b1f8      	cbz	r0, 7018 <process_command(String)+0x61c>
                    register_a = value & 0xFF;
    6fd8:	4b27      	ldr	r3, [pc, #156]	; (7078 <process_command(String)+0x67c>)
    6fda:	701c      	strb	r4, [r3, #0]
    6fdc:	e662      	b.n	6ca4 <process_command(String)+0x2a8>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6fde:	4827      	ldr	r0, [pc, #156]	; (707c <process_command(String)+0x680>)
    6fe0:	e593      	b.n	6b0a <process_command(String)+0x10e>
    6fe2:	4826      	ldr	r0, [pc, #152]	; (707c <process_command(String)+0x680>)
    6fe4:	e6d1      	b.n	6d8a <process_command(String)+0x38e>
    6fe6:	4825      	ldr	r0, [pc, #148]	; (707c <process_command(String)+0x680>)
    6fe8:	e79a      	b.n	6f20 <process_command(String)+0x524>
    6fea:	4824      	ldr	r0, [pc, #144]	; (707c <process_command(String)+0x680>)
    6fec:	e6b1      	b.n	6d52 <process_command(String)+0x356>
    6fee:	4823      	ldr	r0, [pc, #140]	; (707c <process_command(String)+0x680>)
    6ff0:	e582      	b.n	6af8 <process_command(String)+0xfc>
    6ff2:	4822      	ldr	r0, [pc, #136]	; (707c <process_command(String)+0x680>)
    6ff4:	e755      	b.n	6ea2 <process_command(String)+0x4a6>
                        sprintf(s,"\n\r[%04X] = ", addr);
    6ff6:	4659      	mov	r1, fp
    6ff8:	4632      	mov	r2, r6
    6ffa:	4620      	mov	r0, r4
    6ffc:	f004 fd1e 	bl	ba3c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    7000:	4620      	mov	r0, r4
    7002:	f005 f95d 	bl	c2c0 <strlen>
    7006:	4601      	mov	r1, r0
    7008:	4620      	mov	r0, r4
    700a:	f003 f9ab 	bl	a364 <usb_serial_write>
    700e:	e6e0      	b.n	6dd2 <process_command(String)+0x3d6>
    7010:	481a      	ldr	r0, [pc, #104]	; (707c <process_command(String)+0x680>)
    7012:	e761      	b.n	6ed8 <process_command(String)+0x4dc>
    7014:	4819      	ldr	r0, [pc, #100]	; (707c <process_command(String)+0x680>)
    7016:	e755      	b.n	6ec4 <process_command(String)+0x4c8>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    7018:	4919      	ldr	r1, [pc, #100]	; (7080 <process_command(String)+0x684>)
    701a:	a808      	add	r0, sp, #32
    701c:	f001 fe44 	bl	8ca8 <String::equals(char const*) const>
                else if (arg1=="x") {
    7020:	2800      	cmp	r0, #0
    7022:	d03d      	beq.n	70a0 <process_command(String)+0x6a4>
                    register_x = value & 0xFF;
    7024:	4b17      	ldr	r3, [pc, #92]	; (7084 <process_command(String)+0x688>)
    7026:	701c      	strb	r4, [r3, #0]
    7028:	e63c      	b.n	6ca4 <process_command(String)+0x2a8>
    702a:	bf00      	nop
    702c:	200008a0 	.word	0x200008a0
    7030:	20018890 	.word	0x20018890
    7034:	200188b0 	.word	0x200188b0
    7038:	20000904 	.word	0x20000904
    703c:	200007d4 	.word	0x200007d4
    7040:	20000964 	.word	0x20000964
    7044:	20000984 	.word	0x20000984
    7048:	20000988 	.word	0x20000988
    704c:	20000440 	.word	0x20000440
    7050:	20004490 	.word	0x20004490
    7054:	200053c8 	.word	0x200053c8
    7058:	200188af 	.word	0x200188af
    705c:	20018894 	.word	0x20018894
    7060:	20018892 	.word	0x20018892
    7064:	20000938 	.word	0x20000938
    7068:	200188a0 	.word	0x200188a0
    706c:	20000924 	.word	0x20000924
    7070:	20000880 	.word	0x20000880
    7074:	200008a4 	.word	0x200008a4
    7078:	200188ac 	.word	0x200188ac
    707c:	20001360 	.word	0x20001360
    7080:	200008a8 	.word	0x200008a8
    7084:	200188ad 	.word	0x200188ad
    7088:	20000910 	.word	0x20000910
    708c:	2000091c 	.word	0x2000091c
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    7090:	480a      	ldr	r0, [pc, #40]	; (70bc <process_command(String)+0x6c0>)
    7092:	e58e      	b.n	6bb2 <process_command(String)+0x1b6>
    7094:	4809      	ldr	r0, [pc, #36]	; (70bc <process_command(String)+0x6c0>)
    7096:	e508      	b.n	6aaa <process_command(String)+0xae>
    7098:	4808      	ldr	r0, [pc, #32]	; (70bc <process_command(String)+0x6c0>)
    709a:	e4fd      	b.n	6a98 <process_command(String)+0x9c>
    709c:	4807      	ldr	r0, [pc, #28]	; (70bc <process_command(String)+0x6c0>)
    709e:	e757      	b.n	6f50 <process_command(String)+0x554>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    70a0:	4907      	ldr	r1, [pc, #28]	; (70c0 <process_command(String)+0x6c4>)
    70a2:	a808      	add	r0, sp, #32
    70a4:	f001 fe00 	bl	8ca8 <String::equals(char const*) const>
                else if (arg1=="y") {
    70a8:	b110      	cbz	r0, 70b0 <process_command(String)+0x6b4>
                    register_y = value & 0xFF;
    70aa:	4b06      	ldr	r3, [pc, #24]	; (70c4 <process_command(String)+0x6c8>)
    70ac:	701c      	strb	r4, [r3, #0]
    70ae:	e5f9      	b.n	6ca4 <process_command(String)+0x2a8>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    70b0:	4905      	ldr	r1, [pc, #20]	; (70c8 <process_command(String)+0x6cc>)
    70b2:	4806      	ldr	r0, [pc, #24]	; (70cc <process_command(String)+0x6d0>)
    70b4:	f7f9 f80a 	bl	cc <Print::println(char const*) [clone .isra.0]>
    70b8:	e5f4      	b.n	6ca4 <process_command(String)+0x2a8>
    70ba:	bf00      	nop
    70bc:	20001360 	.word	0x20001360
    70c0:	200008ac 	.word	0x200008ac
    70c4:	200188ae 	.word	0x200188ae
    70c8:	200008b0 	.word	0x200008b0
    70cc:	20004490 	.word	0x20004490

000070d0 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    70d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70d4:	4f50      	ldr	r7, [pc, #320]	; (7218 <loop+0x148>)
    70d6:	b091      	sub	sp, #68	; 0x44
    70d8:	f8df a160 	ldr.w	sl, [pc, #352]	; 723c <loop+0x16c>

    // Give Teensy 4.1 a moment
    delay(50);
    70dc:	2032      	movs	r0, #50	; 0x32
    70de:	4d4f      	ldr	r5, [pc, #316]	; (721c <loop+0x14c>)
    70e0:	f001 feec 	bl	8ebc <delay>
    sample_at_CLK_rising_edge();
    70e4:	f7fb fc16 	bl	2914 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70e8:	f7fb fc14 	bl	2914 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70ec:	f7fb fc12 	bl	2914 <sample_at_CLK_rising_edge()>

    reset_sequence();
    70f0:	f7fc f982 	bl	33f8 <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    70f4:	4b4a      	ldr	r3, [pc, #296]	; (7220 <loop+0x150>)
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	2b01      	cmp	r3, #1
    70fa:	f000 81f3 	beq.w	74e4 <loop+0x414>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    70fe:	4b49      	ldr	r3, [pc, #292]	; (7224 <loop+0x154>)
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	2b00      	cmp	r3, #0
    7104:	f040 81f5 	bne.w	74f2 <loop+0x422>
    7108:	4b47      	ldr	r3, [pc, #284]	; (7228 <loop+0x158>)
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	2b01      	cmp	r3, #1
    710e:	f000 8273 	beq.w	75f8 <loop+0x528>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    7112:	4a46      	ldr	r2, [pc, #280]	; (722c <loop+0x15c>)
        nmi_n_old = direct_nmi;
    7114:	4943      	ldr	r1, [pc, #268]	; (7224 <loop+0x154>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    7116:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    7118:	700b      	strb	r3, [r1, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    711a:	2a01      	cmp	r2, #1
    711c:	f000 81ec 	beq.w	74f8 <loop+0x428>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    7120:	2100      	movs	r1, #0
    7122:	8838      	ldrh	r0, [r7, #0]
    7124:	f7fb fc46 	bl	29b4 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7128:	4b41      	ldr	r3, [pc, #260]	; (7230 <loop+0x160>)
        next_instruction = read_byte(register_pc, false);
    712a:	4601      	mov	r1, r0
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    712c:	782a      	ldrb	r2, [r5, #0]
    712e:	681b      	ldr	r3, [r3, #0]
        next_instruction = read_byte(register_pc, false);
    7130:	f88a 0000 	strb.w	r0, [sl]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7134:	2b00      	cmp	r3, #0
    7136:	d162      	bne.n	71fe <loop+0x12e>
            run_mode = WAITING;
        }

        if (runto_address && (run_mode==RUNNING) && (register_pc==runto_address)) {
    7138:	4b3e      	ldr	r3, [pc, #248]	; (7234 <loop+0x164>)
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	2b00      	cmp	r3, #0
    713e:	f000 81e8 	beq.w	7512 <loop+0x442>
    7142:	2a02      	cmp	r2, #2
    7144:	f000 824c 	beq.w	75e0 <loop+0x510>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7148:	f8b7 b000 	ldrh.w	fp, [r7]
void loop() {
    714c:	4658      	mov	r0, fp
    714e:	ac08      	add	r4, sp, #32
    7150:	ae0c      	add	r6, sp, #48	; 0x30
    7152:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 7240 <loop+0x170>
	size_t println(const char s[])			{ return print(s) + println(); }
    7156:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 7244 <loop+0x174>
    715a:	e032      	b.n	71c2 <loop+0xf2>
    715c:	2101      	movs	r1, #1
    715e:	4648      	mov	r0, r9
    7160:	f003 f900 	bl	a364 <usb_serial_write>
    7164:	4640      	mov	r0, r8
    7166:	f001 fc33 	bl	89d0 <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    716a:	4621      	mov	r1, r4
    716c:	4630      	mov	r0, r6
    716e:	f001 fc51 	bl	8a14 <String::String(String const&)>
    7172:	4630      	mov	r0, r6
    7174:	f7ff fc42 	bl	69fc <process_command(String)>
    7178:	7028      	strb	r0, [r5, #0]
    717a:	4630      	mov	r0, r6
    717c:	f001 fc7e 	bl	8a7c <String::~String()>
                    last_command = c;
    7180:	4621      	mov	r1, r4
    7182:	482d      	ldr	r0, [pc, #180]	; (7238 <loop+0x168>)
    7184:	f001 fcfa 	bl	8b7c <String::operator=(String const&)>
    7188:	2101      	movs	r1, #1
    718a:	4648      	mov	r0, r9
    718c:	f003 f8ea 	bl	a364 <usb_serial_write>
    7190:	4640      	mov	r0, r8
    7192:	f001 fc1d 	bl	89d0 <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    7196:	782b      	ldrb	r3, [r5, #0]
    7198:	2b02      	cmp	r3, #2
    719a:	d009      	beq.n	71b0 <loop+0xe0>
    719c:	8838      	ldrh	r0, [r7, #0]
    719e:	4558      	cmp	r0, fp
    71a0:	d006      	beq.n	71b0 <loop+0xe0>
                    next_instruction = read_byte(register_pc, false);
    71a2:	2100      	movs	r1, #0
    71a4:	f7fb fc06 	bl	29b4 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    71a8:	f8b7 b000 	ldrh.w	fp, [r7]
                    next_instruction = read_byte(register_pc, false);
    71ac:	f88a 0000 	strb.w	r0, [sl]
                }
            } while (run_mode == WAITING);
    71b0:	4620      	mov	r0, r4
    71b2:	f001 fc63 	bl	8a7c <String::~String()>
    71b6:	782b      	ldrb	r3, [r5, #0]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d153      	bne.n	7264 <loop+0x194>
                display_next_instruction(register_pc, next_instruction);
    71bc:	8838      	ldrh	r0, [r7, #0]
    71be:	f89a 1000 	ldrb.w	r1, [sl]
    71c2:	f7ff fa6d 	bl	66a0 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    71c6:	4620      	mov	r0, r4
    71c8:	f7ff fb28 	bl	681c <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    71cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71ce:	2b00      	cmp	r3, #0
    71d0:	d1c4      	bne.n	715c <loop+0x8c>
	inline unsigned int length(void) const {return len;}
    71d2:	4919      	ldr	r1, [pc, #100]	; (7238 <loop+0x168>)
    71d4:	688b      	ldr	r3, [r1, #8]
    71d6:	2b00      	cmp	r3, #0
    71d8:	d0c0      	beq.n	715c <loop+0x8c>
	size_t println(const String &s)			{ return print(s) + println(); }
    71da:	4640      	mov	r0, r8
    71dc:	f001 fbd2 	bl	8984 <Print::print(String const&)>
    71e0:	4640      	mov	r0, r8
    71e2:	f001 fbf5 	bl	89d0 <Print::println()>
                    run_mode = process_command(last_command);
    71e6:	4914      	ldr	r1, [pc, #80]	; (7238 <loop+0x168>)
    71e8:	4630      	mov	r0, r6
    71ea:	f001 fc13 	bl	8a14 <String::String(String const&)>
    71ee:	4630      	mov	r0, r6
    71f0:	f7ff fc04 	bl	69fc <process_command(String)>
    71f4:	7028      	strb	r0, [r5, #0]
    71f6:	4630      	mov	r0, r6
    71f8:	f001 fc40 	bl	8a7c <String::~String()>
    71fc:	e7c4      	b.n	7188 <loop+0xb8>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    71fe:	2a02      	cmp	r2, #2
    7200:	d1a2      	bne.n	7148 <loop+0x78>
    7202:	f8b7 b000 	ldrh.w	fp, [r7]
    7206:	455b      	cmp	r3, fp
    7208:	f000 81fb 	beq.w	7602 <loop+0x532>
        if (runto_address && (run_mode==RUNNING) && (register_pc==runto_address)) {
    720c:	4b09      	ldr	r3, [pc, #36]	; (7234 <loop+0x164>)
    720e:	681b      	ldr	r3, [r3, #0]
    7210:	b303      	cbz	r3, 7254 <loop+0x184>
    7212:	455b      	cmp	r3, fp
    7214:	d11e      	bne.n	7254 <loop+0x184>
    7216:	e1e8      	b.n	75ea <loop+0x51a>
    7218:	20018890 	.word	0x20018890
    721c:	200188b0 	.word	0x200188b0
    7220:	200188a6 	.word	0x200188a6
    7224:	20004a9f 	.word	0x20004a9f
    7228:	200188a4 	.word	0x200188a4
    722c:	200188a3 	.word	0x200188a3
    7230:	200053c8 	.word	0x200053c8
    7234:	20018824 	.word	0x20018824
    7238:	200153f0 	.word	0x200153f0
    723c:	200188aa 	.word	0x200188aa
    7240:	2000041c 	.word	0x2000041c
    7244:	20004490 	.word	0x20004490
        virtual int read() { return usb_serial_getchar(); }
    7248:	f003 f866 	bl	a318 <usb_serial_getchar>
        else {
            while (Serial.available() > 0) {
                // read the incoming byte:
                char b = Serial.read();

                switch(b) {
    724c:	b2c0      	uxtb	r0, r0
    724e:	281b      	cmp	r0, #27
    7250:	f000 815b 	beq.w	750a <loop+0x43a>
        virtual int available() { return usb_serial_available(); }
    7254:	f003 f81c 	bl	a290 <usb_serial_available>
            while (Serial.available() > 0) {
    7258:	2800      	cmp	r0, #0
    725a:	dcf5      	bgt.n	7248 <loop+0x178>
                        run_mode = WAITING;
                }
            }
        }

        if (run_mode == WAITING) {
    725c:	782b      	ldrb	r3, [r5, #0]
    725e:	2b00      	cmp	r3, #0
    7260:	f43f af48 	beq.w	70f4 <loop+0x24>
            // just transitioned to WAITING while running...
            // skip the rest of this loop
            continue;
        }

        if (run_mode == RESETTING) {
    7264:	2b03      	cmp	r3, #3
    7266:	f000 81d0 	beq.w	760a <loop+0x53a>
            // Break out of the internal while loop, causing the main loop() 
            // to be called again, which executes the reset sequence
            break;
        }

		if (run_fence) {
    726a:	4a0e      	ldr	r2, [pc, #56]	; (72a4 <loop+0x1d4>)
    726c:	7812      	ldrb	r2, [r2, #0]
    726e:	b152      	cbz	r2, 7286 <loop+0x1b6>
			if (register_pc < run_fence_low || register_pc > run_fence_high) {
    7270:	490d      	ldr	r1, [pc, #52]	; (72a8 <loop+0x1d8>)
    7272:	883a      	ldrh	r2, [r7, #0]
    7274:	8809      	ldrh	r1, [r1, #0]
    7276:	4291      	cmp	r1, r2
    7278:	f200 8188 	bhi.w	758c <loop+0x4bc>
    727c:	490b      	ldr	r1, [pc, #44]	; (72ac <loop+0x1dc>)
    727e:	8809      	ldrh	r1, [r1, #0]
    7280:	4291      	cmp	r1, r2
    7282:	f0c0 8183 	bcc.w	758c <loop+0x4bc>
				continue;
			}
		}

        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    7286:	2b01      	cmp	r3, #1
    7288:	d105      	bne.n	7296 <loop+0x1c6>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    728a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    728e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            digitalWriteFast(PIN_SYNC, 0x1);

        if (pc_trace) {
    7296:	4b06      	ldr	r3, [pc, #24]	; (72b0 <loop+0x1e0>)
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	2b00      	cmp	r3, #0
    729c:	f040 813d 	bne.w	751a <loop+0x44a>
    72a0:	e008      	b.n	72b4 <loop+0x1e4>
    72a2:	bf00      	nop
    72a4:	200188af 	.word	0x200188af
    72a8:	20018894 	.word	0x20018894
    72ac:	20018892 	.word	0x20018892
    72b0:	200188ab 	.word	0x200188ab

            pc_trace_index++;
        }

		uint16_t next_pc = 0;
        switch (next_instruction) {
    72b4:	f89a 3000 	ldrb.w	r3, [sl]
    72b8:	2bff      	cmp	r3, #255	; 0xff
    72ba:	f201 82e4 	bhi.w	8886 <loop+0x17b6>
    72be:	e8df f013 	tbh	[pc, r3, lsl #1]
    72c2:	0a5b      	.short	0x0a5b
    72c4:	01aa0a61 	.word	0x01aa0a61
    72c8:	01af01ac 	.word	0x01af01ac
    72cc:	01c801b8 	.word	0x01c801b8
    72d0:	01ce01cb 	.word	0x01ce01cb
    72d4:	01d401d1 	.word	0x01d401d1
    72d8:	01da01d7 	.word	0x01da01d7
    72dc:	01f301e3 	.word	0x01f301e3
    72e0:	01f901f6 	.word	0x01f901f6
    72e4:	01aa0203 	.word	0x01aa0203
    72e8:	0214022d 	.word	0x0214022d
    72ec:	0230021d 	.word	0x0230021d
    72f0:	02360233 	.word	0x02360233
    72f4:	01000248 	.word	0x01000248
    72f8:	025c0259 	.word	0x025c0259
    72fc:	02770266 	.word	0x02770266
    7300:	027d027a 	.word	0x027d027a
    7304:	01aa0299 	.word	0x01aa0299
    7308:	02ab02a8 	.word	0x02ab02a8
    730c:	02bd02ae 	.word	0x02bd02ae
    7310:	02c302c0 	.word	0x02c302c0
    7314:	02c902c6 	.word	0x02c902c6
    7318:	02cf02cc 	.word	0x02cf02cc
    731c:	02e102d2 	.word	0x02e102d2
    7320:	02e702e4 	.word	0x02e702e4
    7324:	01aa02fa 	.word	0x01aa02fa
    7328:	030d030a 	.word	0x030d030a
    732c:	03250316 	.word	0x03250316
    7330:	032b0328 	.word	0x032b0328
    7334:	0100033d 	.word	0x0100033d
    7338:	0350034d 	.word	0x0350034d
    733c:	036a035a 	.word	0x036a035a
    7340:	0370036d 	.word	0x0370036d
    7344:	01aa0373 	.word	0x01aa0373
    7348:	03860383 	.word	0x03860383
    734c:	039f038f 	.word	0x039f038f
    7350:	03a503a2 	.word	0x03a503a2
    7354:	03ab03a8 	.word	0x03ab03a8
    7358:	03b103ae 	.word	0x03b103ae
    735c:	03c403b4 	.word	0x03c403b4
    7360:	03ca03c7 	.word	0x03ca03c7
    7364:	01aa03cd 	.word	0x01aa03cd
    7368:	03e103de 	.word	0x03e103de
    736c:	03fa03ea 	.word	0x03fa03ea
    7370:	040903fd 	.word	0x040903fd
    7374:	0100041b 	.word	0x0100041b
    7378:	042f042c 	.word	0x042f042c
    737c:	044a0439 	.word	0x044a0439
    7380:	0450044d 	.word	0x0450044d
    7384:	01aa0453 	.word	0x01aa0453
    7388:	0462045f 	.word	0x0462045f
    738c:	0477046b 	.word	0x0477046b
    7390:	047d047a 	.word	0x047d047a
    7394:	04900480 	.word	0x04900480
    7398:	04960493 	.word	0x04960493
    739c:	04a50499 	.word	0x04a50499
    73a0:	04ab04a8 	.word	0x04ab04a8
    73a4:	01aa04ae 	.word	0x01aa04ae
    73a8:	04be04bb 	.word	0x04be04bb
    73ac:	04d304c7 	.word	0x04d304c7
    73b0:	04d904d6 	.word	0x04d904d6
    73b4:	010004eb 	.word	0x010004eb
    73b8:	04fb04f8 	.word	0x04fb04f8
    73bc:	05140506 	.word	0x05140506
    73c0:	051c0518 	.word	0x051c0518
    73c4:	05330527 	.word	0x05330527
    73c8:	054d053e 	.word	0x054d053e
    73cc:	05850563 	.word	0x05850563
    73d0:	05b4059b 	.word	0x05b4059b
    73d4:	05d405c9 	.word	0x05d405c9
    73d8:	05f305e8 	.word	0x05f305e8
    73dc:	060b05ff 	.word	0x060b05ff
    73e0:	06260617 	.word	0x06260617
    73e4:	01aa0630 	.word	0x01aa0630
    73e8:	0646063c 	.word	0x0646063c
    73ec:	065e0652 	.word	0x065e0652
    73f0:	0679066a 	.word	0x0679066a
    73f4:	0699068d 	.word	0x0699068d
    73f8:	06b606ab 	.word	0x06b606ab
    73fc:	06cc06c1 	.word	0x06cc06c1
    7400:	06f306d7 	.word	0x06f306d7
    7404:	07130705 	.word	0x07130705
    7408:	07350725 	.word	0x07350725
    740c:	07510743 	.word	0x07510743
    7410:	076f075f 	.word	0x076f075f
    7414:	07950783 	.word	0x07950783
    7418:	07b407a9 	.word	0x07b407a9
    741c:	07d007c2 	.word	0x07d007c2
    7420:	07ee07de 	.word	0x07ee07de
    7424:	01aa07f9 	.word	0x01aa07f9
    7428:	08480864 	.word	0x08480864
    742c:	08080856 	.word	0x08080856
    7430:	08260816 	.word	0x08260816
    7434:	087f0839 	.word	0x087f0839
    7438:	08a80893 	.word	0x08a80893
    743c:	08c608b7 	.word	0x08c608b7
    7440:	08e608d5 	.word	0x08e608d5
    7444:	08f608ea 	.word	0x08f608ea
    7448:	09050901 	.word	0x09050901
    744c:	09150909 	.word	0x09150909
    7450:	091d0919 	.word	0x091d0919
    7454:	09360932 	.word	0x09360932
    7458:	094f094b 	.word	0x094f094b
    745c:	095f0953 	.word	0x095f0953
    7460:	09670963 	.word	0x09670963
    7464:	01aa096b 	.word	0x01aa096b
    7468:	097c0978 	.word	0x097c0978
    746c:	09920986 	.word	0x09920986
    7470:	099a0996 	.word	0x099a0996
    7474:	010009ad 	.word	0x010009ad
    7478:	09be09ba 	.word	0x09be09ba
    747c:	09d609c9 	.word	0x09d609c9
    7480:	09de09da 	.word	0x09de09da
    7484:	0a3709e2 	.word	0x0a3709e2
    7488:	0a460a42 	.word	0x0a460a42
    748c:	0ac50a4a 	.word	0x0ac50a4a
    7490:	0acd0ac9 	.word	0x0acd0ac9
    7494:	010001a7 	.word	0x010001a7
    7498:	09ef01a7 	.word	0x09ef01a7
    749c:	0a0009f3 	.word	0x0a0009f3
    74a0:	0a080a04 	.word	0x0a080a04
    74a4:	01aa0a0c 	.word	0x01aa0a0c
    74a8:	0a2d0a1a 	.word	0x0a2d0a1a
    74ac:	0a7f0a72 	.word	0x0a7f0a72
    74b0:	0a870a83 	.word	0x0a870a83
    74b4:	01000a9a 	.word	0x01000a9a
    74b8:	0aac0aa8 	.word	0x0aac0aa8
    74bc:	0ae20ab7 	.word	0x0ae20ab7
    74c0:	0a57      	.short	0x0a57
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    74c2:	f7fc fbf3 	bl	3cac <opcode_0xEA()>
				run_mode = WAITING;
				break;
        }

        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    74c6:	782b      	ldrb	r3, [r5, #0]
    74c8:	2b01      	cmp	r3, #1
    74ca:	d105      	bne.n	74d8 <loop+0x408>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    74cc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    74d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    74d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (direct_reset == 1) reset_sequence();
    74d8:	4bba      	ldr	r3, [pc, #744]	; (77c4 <loop+0x6f4>)
            digitalWriteFast(PIN_SYNC, 0);

        // Move to next instruction
        register_pc = next_pc;
    74da:	8038      	strh	r0, [r7, #0]
        if (direct_reset == 1) reset_sequence();
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	2b01      	cmp	r3, #1
    74e0:	f47f ae0d 	bne.w	70fe <loop+0x2e>
    74e4:	f7fb ff88 	bl	33f8 <reset_sequence()>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    74e8:	4bb7      	ldr	r3, [pc, #732]	; (77c8 <loop+0x6f8>)
    74ea:	781b      	ldrb	r3, [r3, #0]
    74ec:	2b00      	cmp	r3, #0
    74ee:	f43f ae0b 	beq.w	7108 <loop+0x38>
        nmi_n_old = direct_nmi;
    74f2:	4bb6      	ldr	r3, [pc, #728]	; (77cc <loop+0x6fc>)
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	e60c      	b.n	7112 <loop+0x42>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    74f8:	4bb5      	ldr	r3, [pc, #724]	; (77d0 <loop+0x700>)
    74fa:	7818      	ldrb	r0, [r3, #0]
    74fc:	f010 0004 	ands.w	r0, r0, #4
    7500:	f47f ae0e 	bne.w	7120 <loop+0x50>
    7504:	f7fc f954 	bl	37b0 <irq_handler(unsigned char)>
    7508:	e60a      	b.n	7120 <loop+0x50>
                        run_mode = WAITING;
    750a:	f04f 0300 	mov.w	r3, #0
    750e:	702b      	strb	r3, [r5, #0]
    7510:	e6a0      	b.n	7254 <loop+0x184>
        if (run_mode != RUNNING) {
    7512:	2a02      	cmp	r2, #2
    7514:	f43f ae9e 	beq.w	7254 <loop+0x184>
    7518:	e616      	b.n	7148 <loop+0x78>
            String s = String(pc_trace_index) + ": " + String(register_pc, HEX);
    751a:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 77f0 <loop+0x720>
	StringSumHelper(const String &s) : String(s) {}
    751e:	ac08      	add	r4, sp, #32
    7520:	220a      	movs	r2, #10
    7522:	a804      	add	r0, sp, #16
    7524:	f8d8 1000 	ldr.w	r1, [r8]
    7528:	ae0c      	add	r6, sp, #48	; 0x30
    752a:	f001 fb0f 	bl	8b4c <String::String(unsigned int, unsigned char)>
    752e:	a904      	add	r1, sp, #16
    7530:	4620      	mov	r0, r4
    7532:	f001 fa6f 	bl	8a14 <String::String(String const&)>
    7536:	49a7      	ldr	r1, [pc, #668]	; (77d4 <loop+0x704>)
    7538:	4620      	mov	r0, r4
    753a:	f001 fba7 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    753e:	4681      	mov	r9, r0
    7540:	2210      	movs	r2, #16
    7542:	8839      	ldrh	r1, [r7, #0]
    7544:	4630      	mov	r0, r6
    7546:	f001 fae9 	bl	8b1c <String::String(int, unsigned char)>
    754a:	4631      	mov	r1, r6
    754c:	4648      	mov	r0, r9
    754e:	f001 fb95 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    7552:	4601      	mov	r1, r0
    7554:	4668      	mov	r0, sp
    7556:	f001 fa5d 	bl	8a14 <String::String(String const&)>
    755a:	4630      	mov	r0, r6
    755c:	f001 fa8e 	bl	8a7c <String::~String()>
class StringSumHelper : public String
    7560:	4620      	mov	r0, r4
    7562:	f001 fa8b 	bl	8a7c <String::~String()>
    7566:	a804      	add	r0, sp, #16
    7568:	f001 fa88 	bl	8a7c <String::~String()>
    756c:	4669      	mov	r1, sp
    756e:	489a      	ldr	r0, [pc, #616]	; (77d8 <loop+0x708>)
    7570:	f001 fa08 	bl	8984 <Print::print(String const&)>
    7574:	4898      	ldr	r0, [pc, #608]	; (77d8 <loop+0x708>)
    7576:	f001 fa2b 	bl	89d0 <Print::println()>
            pc_trace_index++;
    757a:	f8d8 3000 	ldr.w	r3, [r8]
        }
    757e:	4668      	mov	r0, sp
            pc_trace_index++;
    7580:	3301      	adds	r3, #1
    7582:	f8c8 3000 	str.w	r3, [r8]
        }
    7586:	f001 fa79 	bl	8a7c <String::~String()>
    758a:	e693      	b.n	72b4 <loop+0x1e4>
	StringSumHelper(const char *p) : String(p) {}
    758c:	ae0c      	add	r6, sp, #48	; 0x30
				String s = "EXECPTION: Attempt to execute outside of the run-fence (PC=" + String(register_pc, HEX) + ")";
    758e:	ac08      	add	r4, sp, #32
    7590:	4992      	ldr	r1, [pc, #584]	; (77dc <loop+0x70c>)
    7592:	4630      	mov	r0, r6
    7594:	f001 faae 	bl	8af4 <String::String(char const*)>
    7598:	2210      	movs	r2, #16
    759a:	8839      	ldrh	r1, [r7, #0]
    759c:	4620      	mov	r0, r4
    759e:	f001 fabd 	bl	8b1c <String::String(int, unsigned char)>
    75a2:	4621      	mov	r1, r4
    75a4:	4630      	mov	r0, r6
    75a6:	f001 fb69 	bl	8c7c <operator+(StringSumHelper const&, String const&)>
    75aa:	498d      	ldr	r1, [pc, #564]	; (77e0 <loop+0x710>)
    75ac:	f001 fb6e 	bl	8c8c <operator+(StringSumHelper const&, char const*)>
    75b0:	4601      	mov	r1, r0
    75b2:	a804      	add	r0, sp, #16
    75b4:	f001 fa2e 	bl	8a14 <String::String(String const&)>
    75b8:	4620      	mov	r0, r4
    75ba:	f001 fa5f 	bl	8a7c <String::~String()>
class StringSumHelper : public String
    75be:	4630      	mov	r0, r6
    75c0:	f001 fa5c 	bl	8a7c <String::~String()>
    75c4:	a904      	add	r1, sp, #16
    75c6:	4884      	ldr	r0, [pc, #528]	; (77d8 <loop+0x708>)
    75c8:	f001 f9dc 	bl	8984 <Print::print(String const&)>
    75cc:	4882      	ldr	r0, [pc, #520]	; (77d8 <loop+0x708>)
    75ce:	f001 f9ff 	bl	89d0 <Print::println()>
				run_mode = WAITING;
    75d2:	f04f 0300 	mov.w	r3, #0
			}
    75d6:	a804      	add	r0, sp, #16
				run_mode = WAITING;
    75d8:	702b      	strb	r3, [r5, #0]
			}
    75da:	f001 fa4f 	bl	8a7c <String::~String()>
    75de:	e589      	b.n	70f4 <loop+0x24>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    75e0:	f8b7 b000 	ldrh.w	fp, [r7]
        if (runto_address && (run_mode==RUNNING) && (register_pc==runto_address)) {
    75e4:	455b      	cmp	r3, fp
    75e6:	f47f ae35 	bne.w	7254 <loop+0x184>
            run_mode = WAITING;
    75ea:	f04f 0300 	mov.w	r3, #0
            runto_address = 0;
    75ee:	2200      	movs	r2, #0
            run_mode = WAITING;
    75f0:	702b      	strb	r3, [r5, #0]
            runto_address = 0;
    75f2:	4b7c      	ldr	r3, [pc, #496]	; (77e4 <loop+0x714>)
    75f4:	601a      	str	r2, [r3, #0]
    75f6:	e5a9      	b.n	714c <loop+0x7c>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    75f8:	f7fb ffea 	bl	35d0 <nmi_handler()>
        nmi_n_old = direct_nmi;
    75fc:	4b73      	ldr	r3, [pc, #460]	; (77cc <loop+0x6fc>)
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	e587      	b.n	7112 <loop+0x42>
            run_mode = WAITING;
    7602:	f04f 0300 	mov.w	r3, #0
    7606:	702b      	strb	r3, [r5, #0]
        if (runto_address && (run_mode==RUNNING) && (register_pc==runto_address)) {
    7608:	e59e      	b.n	7148 <loop+0x78>
    }
}
    760a:	b011      	add	sp, #68	; 0x44
    760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next_pc = opcode_0xE9();
    7610:	f7fc fb36 	bl	3c80 <opcode_0xE9()>
				break; // SBC - Immediate
    7614:	e757      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x02();
    7616:	f7ff f83d 	bl	6694 <opcode_0x02()>
				next_pc = opcode_0x03();
    761a:	f7fd ff75 	bl	5508 <opcode_0x03()>
				break; // SLO - Indexed Indirect X
    761e:	e752      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage();
    7620:	f7fb fcb0 	bl	2f84 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    7624:	4b70      	ldr	r3, [pc, #448]	; (77e8 <loop+0x718>)
    7626:	f893 0101 	ldrb.w	r0, [r3, #257]	; 0x101
    762a:	883b      	ldrh	r3, [r7, #0]
    762c:	4418      	add	r0, r3
    762e:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    7630:	e749      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_ZeroPage());
    7632:	f7fb fca7 	bl	2f84 <Fetch_ZeroPage()>
    7636:	4b6d      	ldr	r3, [pc, #436]	; (77ec <loop+0x71c>)
    7638:	781a      	ldrb	r2, [r3, #0]
    763a:	4310      	orrs	r0, r2
    763c:	b2c0      	uxtb	r0, r0
    763e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7640:	f7fb fc80 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x05].length);
    7644:	4b68      	ldr	r3, [pc, #416]	; (77e8 <loop+0x718>)
    7646:	f893 0135 	ldrb.w	r0, [r3, #309]	; 0x135
    764a:	883b      	ldrh	r3, [r7, #0]
    764c:	4418      	add	r0, r3
    764e:	b280      	uxth	r0, r0
				break; // OR ZeroPage
    7650:	e739      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x06();
    7652:	f7fc fdbb 	bl	41cc <opcode_0x06()>
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    7656:	e736      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x07();
    7658:	f7fd fee6 	bl	5428 <opcode_0x07()>
				break; // SLO - ZeroPage
    765c:	e733      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x08();
    765e:	f7fc fb39 	bl	3cd4 <opcode_0x08()>
				break; // PHP - Push processor status to the stack
    7662:	e730      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x09();
    7664:	f7fc fbf0 	bl	3e48 <opcode_0x09()>
				break; // OR - Immediate
    7668:	e72d      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x0A();
    766a:	f7fc f997 	bl	399c <opcode_0x0A()>
				break; // ASL A
    766e:	e72a      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x0B();
    7670:	f7fe ff44 	bl	64fc <opcode_0x0B()>
				break; // ANC - Immediate
    7674:	e727      	b.n	74c6 <loop+0x3f6>
    Fetch_Absolute();
    7676:	f7fb fcd9 	bl	302c <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    767a:	4b5b      	ldr	r3, [pc, #364]	; (77e8 <loop+0x718>)
    767c:	f893 02a1 	ldrb.w	r0, [r3, #673]	; 0x2a1
    7680:	883b      	ldrh	r3, [r7, #0]
    7682:	4418      	add	r0, r3
    7684:	b280      	uxth	r0, r0
				break; // NOP - Absolute
    7686:	e71e      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_Absolute());
    7688:	f7fb fcd0 	bl	302c <Fetch_Absolute()>
    768c:	4b57      	ldr	r3, [pc, #348]	; (77ec <loop+0x71c>)
    768e:	781a      	ldrb	r2, [r3, #0]
    7690:	4310      	orrs	r0, r2
    7692:	b2c0      	uxtb	r0, r0
    7694:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7696:	f7fb fc55 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0D].length);
    769a:	4b53      	ldr	r3, [pc, #332]	; (77e8 <loop+0x718>)
    769c:	f893 02d5 	ldrb.w	r0, [r3, #725]	; 0x2d5
    76a0:	883b      	ldrh	r3, [r7, #0]
    76a2:	4418      	add	r0, r3
    76a4:	b280      	uxth	r0, r0
				break; // OR - Absolute
    76a6:	e70e      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x0E();
    76a8:	f7fc fdf6 	bl	4298 <opcode_0x0E()>
				break; // ASL A - Arithmetic Shift Left - Absolute
    76ac:	e70b      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x0F();
    76ae:	f7fd ff93 	bl	55d8 <opcode_0x0F()>
				break; // SLO - Absolute
    76b2:	e708      	b.n	74c6 <loop+0x3f6>
    if ((flag_n) == 0) Branch_Taken();
    76b4:	4b46      	ldr	r3, [pc, #280]	; (77d0 <loop+0x700>)
    76b6:	f993 3000 	ldrsb.w	r3, [r3]
    76ba:	2b00      	cmp	r3, #0
    76bc:	f2c1 8107 	blt.w	88ce <loop+0x17fe>
    76c0:	f7fd f9b0 	bl	4a24 <Branch_Taken()>
    return(register_pc);
    76c4:	8838      	ldrh	r0, [r7, #0]
				break; // BNE - Branch on Zero Clear
    76c6:	e6fe      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    76c8:	2001      	movs	r0, #1
    76ca:	f7fb fd55 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    76ce:	4b47      	ldr	r3, [pc, #284]	; (77ec <loop+0x71c>)
    76d0:	781a      	ldrb	r2, [r3, #0]
    76d2:	4310      	orrs	r0, r2
    76d4:	b2c0      	uxtb	r0, r0
    76d6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    76d8:	f7fb fc34 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x11].length);
    76dc:	4b42      	ldr	r3, [pc, #264]	; (77e8 <loop+0x718>)
    76de:	f893 03a5 	ldrb.w	r0, [r3, #933]	; 0x3a5
    76e2:	883b      	ldrh	r3, [r7, #0]
    76e4:	4418      	add	r0, r3
    76e6:	b280      	uxth	r0, r0
				break; // OR Indirect Indexed  Y
    76e8:	e6ed      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage_X();
    76ea:	f7fb fc5f 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    76ee:	4b3e      	ldr	r3, [pc, #248]	; (77e8 <loop+0x718>)
    76f0:	f893 0441 	ldrb.w	r0, [r3, #1089]	; 0x441
    76f4:	883b      	ldrh	r3, [r7, #0]
    76f6:	4418      	add	r0, r3
    76f8:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    76fa:	e6e4      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_ZeroPage_X());
    76fc:	f7fb fc56 	bl	2fac <Fetch_ZeroPage_X()>
    7700:	4b3a      	ldr	r3, [pc, #232]	; (77ec <loop+0x71c>)
    7702:	781a      	ldrb	r2, [r3, #0]
    7704:	4310      	orrs	r0, r2
    7706:	b2c0      	uxtb	r0, r0
    7708:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    770a:	f7fb fc1b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x15].length);
    770e:	4b36      	ldr	r3, [pc, #216]	; (77e8 <loop+0x718>)
    7710:	f893 0475 	ldrb.w	r0, [r3, #1141]	; 0x475
    7714:	883b      	ldrh	r3, [r7, #0]
    7716:	4418      	add	r0, r3
    7718:	b280      	uxth	r0, r0
				break; // OR - ZeroPage,X
    771a:	e6d4      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x13();
    771c:	f7fd ff28 	bl	5570 <opcode_0x13()>
				break; // Indirect Indexed  Y
    7720:	e6d1      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x16();
    7722:	f7fc fd8b 	bl	423c <opcode_0x16()>
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    7726:	e6ce      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x17();
    7728:	f7fd feba 	bl	54a0 <opcode_0x17()>
				break; // SLO - ZeroPage , X
    772c:	e6cb      	b.n	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    772e:	8838      	ldrh	r0, [r7, #0]
    7730:	2100      	movs	r1, #0
    7732:	3001      	adds	r0, #1
    7734:	b280      	uxth	r0, r0
    7736:	f7fb f93d 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x18].length);
    773a:	4b2b      	ldr	r3, [pc, #172]	; (77e8 <loop+0x718>)
    register_flags = register_flags & 0xFE;
    773c:	4a24      	ldr	r2, [pc, #144]	; (77d0 <loop+0x700>)
    return(register_pc + opcode_info[0x18].length);
    773e:	f893 0511 	ldrb.w	r0, [r3, #1297]	; 0x511
    register_flags = register_flags & 0xFE;
    7742:	7813      	ldrb	r3, [r2, #0]
    7744:	f023 0301 	bic.w	r3, r3, #1
    7748:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    774a:	883b      	ldrh	r3, [r7, #0]
    774c:	4418      	add	r0, r3
    774e:	b280      	uxth	r0, r0
				break; // CLC
    7750:	e6b9      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_Absolute_Y(1));
    7752:	2001      	movs	r0, #1
    7754:	f7fb fcb6 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    7758:	4b24      	ldr	r3, [pc, #144]	; (77ec <loop+0x71c>)
    775a:	781a      	ldrb	r2, [r3, #0]
    775c:	4310      	orrs	r0, r2
    775e:	b2c0      	uxtb	r0, r0
    7760:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7762:	f7fb fbef 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x19].length);
    7766:	4b20      	ldr	r3, [pc, #128]	; (77e8 <loop+0x718>)
    7768:	f893 0545 	ldrb.w	r0, [r3, #1349]	; 0x545
    776c:	883b      	ldrh	r3, [r7, #0]
    776e:	4418      	add	r0, r3
    7770:	b280      	uxth	r0, r0
				break; // OR - Absolute,Y
    7772:	e6a8      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x1B();
    7774:	f7fd ff98 	bl	56a8 <opcode_0x1B()>
				break; // SLO - Absolute , Y
    7778:	e6a5      	b.n	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    777a:	2001      	movs	r0, #1
    777c:	f7fb fc72 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    7780:	4b19      	ldr	r3, [pc, #100]	; (77e8 <loop+0x718>)
    7782:	f893 05e1 	ldrb.w	r0, [r3, #1505]	; 0x5e1
    7786:	883b      	ldrh	r3, [r7, #0]
    7788:	4418      	add	r0, r3
    778a:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    778c:	e69b      	b.n	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_Absolute_X(1));
    778e:	2001      	movs	r0, #1
    7790:	f7fb fc68 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    7794:	4b15      	ldr	r3, [pc, #84]	; (77ec <loop+0x71c>)
    7796:	781a      	ldrb	r2, [r3, #0]
    7798:	4310      	orrs	r0, r2
    779a:	b2c0      	uxtb	r0, r0
    779c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    779e:	f7fb fbd1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x1D].length);
    77a2:	4b11      	ldr	r3, [pc, #68]	; (77e8 <loop+0x718>)
    77a4:	f893 0615 	ldrb.w	r0, [r3, #1557]	; 0x615
    77a8:	883b      	ldrh	r3, [r7, #0]
    77aa:	4418      	add	r0, r3
    77ac:	b280      	uxth	r0, r0
				break; // OR - Absolute,X
    77ae:	e68a      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x1E();
    77b0:	f7fc fda0 	bl	42f4 <opcode_0x1E()>
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    77b4:	e687      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x1F();
    77b6:	f7fd ff43 	bl	5640 <opcode_0x1F()>
				break; // SLO - Absolute , X
    77ba:	e684      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x20();
    77bc:	f7fd fbdc 	bl	4f78 <opcode_0x20()>
				break; // JSR - Jump to Subroutine
    77c0:	e681      	b.n	74c6 <loop+0x3f6>
    77c2:	bf00      	nop
    77c4:	200188a6 	.word	0x200188a6
    77c8:	20004a9f 	.word	0x20004a9f
    77cc:	200188a4 	.word	0x200188a4
    77d0:	20004aa0 	.word	0x20004aa0
    77d4:	20000b08 	.word	0x20000b08
    77d8:	20004490 	.word	0x20004490
    77dc:	20001150 	.word	0x20001150
    77e0:	20000440 	.word	0x20000440
    77e4:	20018824 	.word	0x20018824
    77e8:	20015418 	.word	0x20015418
    77ec:	200188ac 	.word	0x200188ac
    77f0:	20018818 	.word	0x20018818
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    77f4:	f7fb fc96 	bl	3124 <Fetch_Indexed_Indirect_X()>
    77f8:	4bb2      	ldr	r3, [pc, #712]	; (7ac4 <loop+0x9f4>)
    77fa:	781a      	ldrb	r2, [r3, #0]
    77fc:	4010      	ands	r0, r2
    77fe:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7800:	f7fb fba0 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x21].length);
    7804:	4bb0      	ldr	r3, [pc, #704]	; (7ac8 <loop+0x9f8>)
    7806:	f893 06e5 	ldrb.w	r0, [r3, #1765]	; 0x6e5
    780a:	883b      	ldrh	r3, [r7, #0]
    780c:	4418      	add	r0, r3
    780e:	b280      	uxth	r0, r0
				break; // AND - Indexed Indirect
    7810:	e659      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x23();
    7812:	f7fd fff3 	bl	57fc <opcode_0x23()>
				break; // RLA - Indexed Indirect X
    7816:	e656      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x24();
    7818:	f7fc fb4e 	bl	3eb8 <opcode_0x24()>
				break; // BIT - ZeroPage
    781c:	e653      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_ZeroPage());
    781e:	f7fb fbb1 	bl	2f84 <Fetch_ZeroPage()>
    7822:	4ba8      	ldr	r3, [pc, #672]	; (7ac4 <loop+0x9f4>)
    7824:	781a      	ldrb	r2, [r3, #0]
    7826:	4010      	ands	r0, r2
    7828:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    782a:	f7fb fb8b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x25].length);
    782e:	4ba6      	ldr	r3, [pc, #664]	; (7ac8 <loop+0x9f8>)
    7830:	f893 07b5 	ldrb.w	r0, [r3, #1973]	; 0x7b5
    7834:	883b      	ldrh	r3, [r7, #0]
    7836:	4418      	add	r0, r3
    7838:	b280      	uxth	r0, r0
				break; // AND - ZeroPage
    783a:	e644      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x26();
    783c:	f7fd f826 	bl	488c <opcode_0x26()>
				break; // ROL - Rotate Left - ZeroPage
    7840:	e641      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x27();
    7842:	f7fd ff65 	bl	5710 <opcode_0x27()>
				break; // RLA - ZeroPage
    7846:	e63e      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x28();
    7848:	f7fc fa8a 	bl	3d60 <opcode_0x28()>
				break; // PLP - Pop processor status from the stack
    784c:	e63b      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x29();
    784e:	f7fc fadf 	bl	3e10 <opcode_0x29()>
				break; // AND - Immediate
    7852:	e638      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x2A();
    7854:	f7fc f91a 	bl	3a8c <opcode_0x2A()>
				break; // ROL A
    7858:	e635      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x2B();
    785a:	f7fe fe75 	bl	6548 <opcode_0x2B()>
				break; // ANC - Immediate
    785e:	e632      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x2C();
    7860:	f7fc fb5a 	bl	3f18 <opcode_0x2C()>
				break; // BIT - Absolute
    7864:	e62f      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_Absolute());
    7866:	f7fb fbe1 	bl	302c <Fetch_Absolute()>
    786a:	4b96      	ldr	r3, [pc, #600]	; (7ac4 <loop+0x9f4>)
    786c:	781a      	ldrb	r2, [r3, #0]
    786e:	4010      	ands	r0, r2
    7870:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7872:	f7fb fb67 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2D].length);
    7876:	4b94      	ldr	r3, [pc, #592]	; (7ac8 <loop+0x9f8>)
    7878:	f893 0955 	ldrb.w	r0, [r3, #2389]	; 0x955
    787c:	883b      	ldrh	r3, [r7, #0]
    787e:	4418      	add	r0, r3
    7880:	b280      	uxth	r0, r0
				break; // AND - Absolute
    7882:	e620      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x2E();
    7884:	f7fd f86c 	bl	4960 <opcode_0x2E()>
				break; // ROL - Rotate Left - Absolute
    7888:	e61d      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x2F();
    788a:	f7fe f823 	bl	58d4 <opcode_0x2F()>
				break; // RLA - Absolute
    788e:	e61a      	b.n	74c6 <loop+0x3f6>
    if ((flag_n) == 1) Branch_Taken();
    7890:	4b8e      	ldr	r3, [pc, #568]	; (7acc <loop+0x9fc>)
    7892:	781b      	ldrb	r3, [r3, #0]
    7894:	09db      	lsrs	r3, r3, #7
    7896:	f041 8028 	bne.w	88ea <loop+0x181a>
        register_pc = register_pc + opcode_info[0x30].length;
    789a:	4b8b      	ldr	r3, [pc, #556]	; (7ac8 <loop+0x9f8>)
    return read_byte(register_pc+offset, false);
    789c:	2100      	movs	r1, #0
    789e:	883a      	ldrh	r2, [r7, #0]
    78a0:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
    78a4:	4413      	add	r3, r2
    78a6:	b29b      	uxth	r3, r3
    78a8:	803b      	strh	r3, [r7, #0]
    78aa:	3301      	adds	r3, #1
    78ac:	b298      	uxth	r0, r3
    78ae:	f7fb f881 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc);
    78b2:	8838      	ldrh	r0, [r7, #0]
				break; // BMI - Branch on Minus (N Flag Set)
    78b4:	e607      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    78b6:	2001      	movs	r0, #1
    78b8:	f7fb fc5e 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    78bc:	4b81      	ldr	r3, [pc, #516]	; (7ac4 <loop+0x9f4>)
    78be:	781a      	ldrb	r2, [r3, #0]
    78c0:	4010      	ands	r0, r2
    78c2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    78c4:	f7fb fb3e 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x31].length);
    78c8:	4b7f      	ldr	r3, [pc, #508]	; (7ac8 <loop+0x9f8>)
    78ca:	f893 0a25 	ldrb.w	r0, [r3, #2597]	; 0xa25
    78ce:	883b      	ldrh	r3, [r7, #0]
    78d0:	4418      	add	r0, r3
    78d2:	b280      	uxth	r0, r0
				break; // AND - Indirect Indexed
    78d4:	e5f7      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x33();
    78d6:	f7fd ffc7 	bl	5868 <opcode_0x33()>
				break; // RLA - Indirect Indexed  Y
    78da:	e5f4      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage_X();
    78dc:	f7fb fb66 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    78e0:	4b79      	ldr	r3, [pc, #484]	; (7ac8 <loop+0x9f8>)
    78e2:	f893 0ac1 	ldrb.w	r0, [r3, #2753]	; 0xac1
    78e6:	883b      	ldrh	r3, [r7, #0]
    78e8:	4418      	add	r0, r3
    78ea:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    78ec:	e5eb      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_ZeroPage_X());
    78ee:	f7fb fb5d 	bl	2fac <Fetch_ZeroPage_X()>
    78f2:	4b74      	ldr	r3, [pc, #464]	; (7ac4 <loop+0x9f4>)
    78f4:	781a      	ldrb	r2, [r3, #0]
    78f6:	4010      	ands	r0, r2
    78f8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    78fa:	f7fb fb23 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x35].length);
    78fe:	4b72      	ldr	r3, [pc, #456]	; (7ac8 <loop+0x9f8>)
    7900:	f893 0af5 	ldrb.w	r0, [r3, #2805]	; 0xaf5
    7904:	883b      	ldrh	r3, [r7, #0]
    7906:	4418      	add	r0, r3
    7908:	b280      	uxth	r0, r0
				break; // AND - ZeroPage,X
    790a:	e5dc      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x36();
    790c:	f7fc fff8 	bl	4900 <opcode_0x36()>
				break; // ROL - Rotate Left - ZeroPage , X
    7910:	e5d9      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x37();
    7912:	f7fd ff3d 	bl	5790 <opcode_0x37()>
				break; // RLA - ZeroPage , X
    7916:	e5d6      	b.n	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7918:	8838      	ldrh	r0, [r7, #0]
    791a:	2100      	movs	r1, #0
    791c:	3001      	adds	r0, #1
    791e:	b280      	uxth	r0, r0
    7920:	f7fb f848 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x38].length);
    7924:	4b68      	ldr	r3, [pc, #416]	; (7ac8 <loop+0x9f8>)
    register_flags = register_flags | 0x01;
    7926:	4a69      	ldr	r2, [pc, #420]	; (7acc <loop+0x9fc>)
    return(register_pc + opcode_info[0x38].length);
    7928:	f893 0b91 	ldrb.w	r0, [r3, #2961]	; 0xb91
    register_flags = register_flags | 0x01;
    792c:	7813      	ldrb	r3, [r2, #0]
    792e:	f043 0301 	orr.w	r3, r3, #1
    7932:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    7934:	883b      	ldrh	r3, [r7, #0]
    7936:	4418      	add	r0, r3
    7938:	b280      	uxth	r0, r0
				break; // SEC
    793a:	e5c4      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_Absolute_Y(1));
    793c:	2001      	movs	r0, #1
    793e:	f7fb fbc1 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    7942:	4b60      	ldr	r3, [pc, #384]	; (7ac4 <loop+0x9f4>)
    7944:	781a      	ldrb	r2, [r3, #0]
    7946:	4010      	ands	r0, r2
    7948:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    794a:	f7fb fafb 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x39].length);
    794e:	4b5e      	ldr	r3, [pc, #376]	; (7ac8 <loop+0x9f8>)
    7950:	f893 0bc5 	ldrb.w	r0, [r3, #3013]	; 0xbc5
    7954:	883b      	ldrh	r3, [r7, #0]
    7956:	4418      	add	r0, r3
    7958:	b280      	uxth	r0, r0
				break; // AND - Absolute,Y
    795a:	e5b4      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x3B();
    795c:	f7fe f826 	bl	59ac <opcode_0x3B()>
				break; // RLA - Absolute , Y
    7960:	e5b1      	b.n	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    7962:	2001      	movs	r0, #1
    7964:	f7fb fb7e 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    7968:	4b57      	ldr	r3, [pc, #348]	; (7ac8 <loop+0x9f8>)
    796a:	f893 0c61 	ldrb.w	r0, [r3, #3169]	; 0xc61
    796e:	883b      	ldrh	r3, [r7, #0]
    7970:	4418      	add	r0, r3
    7972:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7974:	e5a7      	b.n	74c6 <loop+0x3f6>
    register_a = register_a & (Fetch_Absolute_X(1));
    7976:	2001      	movs	r0, #1
    7978:	f7fb fb74 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    797c:	4b51      	ldr	r3, [pc, #324]	; (7ac4 <loop+0x9f4>)
    797e:	781a      	ldrb	r2, [r3, #0]
    7980:	4010      	ands	r0, r2
    7982:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7984:	f7fb fade 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x3D].length);
    7988:	4b4f      	ldr	r3, [pc, #316]	; (7ac8 <loop+0x9f8>)
    798a:	f893 0c95 	ldrb.w	r0, [r3, #3221]	; 0xc95
    798e:	883b      	ldrh	r3, [r7, #0]
    7990:	4418      	add	r0, r3
    7992:	b280      	uxth	r0, r0
				break; // AND - Absolute,X
    7994:	e597      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x3E();
    7996:	f7fd f813 	bl	49c0 <opcode_0x3E()>
				break; // ROL - Rotate Left - Absolute , X
    799a:	e594      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x3F();
    799c:	f7fd ffd0 	bl	5940 <opcode_0x3F()>
				break; // RLA - Absolute , X
    79a0:	e591      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x40();
    79a2:	f7fd fbb1 	bl	5108 <opcode_0x40()>
				break; // RTI - Return from Interrupt
    79a6:	e58e      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    79a8:	f7fb fbbc 	bl	3124 <Fetch_Indexed_Indirect_X()>
    79ac:	4b45      	ldr	r3, [pc, #276]	; (7ac4 <loop+0x9f4>)
    79ae:	781a      	ldrb	r2, [r3, #0]
    79b0:	4050      	eors	r0, r2
    79b2:	b2c0      	uxtb	r0, r0
    79b4:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79b6:	f7fb fac5 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x41].length);
    79ba:	4b43      	ldr	r3, [pc, #268]	; (7ac8 <loop+0x9f8>)
    79bc:	f893 0d65 	ldrb.w	r0, [r3, #3429]	; 0xd65
    79c0:	883b      	ldrh	r3, [r7, #0]
    79c2:	4418      	add	r0, r3
    79c4:	b280      	uxth	r0, r0
				break; // EOR - Indexed Indirect X
    79c6:	e57e      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x43();
    79c8:	f7fe f894 	bl	5af4 <opcode_0x43()>
				break; // SRE - Indexed Indirect X
    79cc:	e57b      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage();
    79ce:	f7fb fad9 	bl	2f84 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    79d2:	4b3d      	ldr	r3, [pc, #244]	; (7ac8 <loop+0x9f8>)
    79d4:	f893 0e01 	ldrb.w	r0, [r3, #3585]	; 0xe01
    79d8:	883b      	ldrh	r3, [r7, #0]
    79da:	4418      	add	r0, r3
    79dc:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    79de:	e572      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_ZeroPage());
    79e0:	f7fb fad0 	bl	2f84 <Fetch_ZeroPage()>
    79e4:	4b37      	ldr	r3, [pc, #220]	; (7ac4 <loop+0x9f4>)
    79e6:	781a      	ldrb	r2, [r3, #0]
    79e8:	4050      	eors	r0, r2
    79ea:	b2c0      	uxtb	r0, r0
    79ec:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79ee:	f7fb faa9 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x45].length);
    79f2:	4b35      	ldr	r3, [pc, #212]	; (7ac8 <loop+0x9f8>)
    79f4:	f893 0e35 	ldrb.w	r0, [r3, #3637]	; 0xe35
    79f8:	883b      	ldrh	r3, [r7, #0]
    79fa:	4418      	add	r0, r3
    79fc:	b280      	uxth	r0, r0
				break; // EOR - ZeroPage
    79fe:	e562      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x46();
    7a00:	f7fc fdb4 	bl	456c <opcode_0x46()>
				break; // LSR - Logical Shift Right - ZeroPage
    7a04:	e55f      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x47();
    7a06:	f7fe f807 	bl	5a18 <opcode_0x47()>
				break; // SRE - ZeroPage
    7a0a:	e55c      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x48();
    7a0c:	f7fc f986 	bl	3d1c <opcode_0x48()>
				break; // PHA - Push Accumulator to the stack
    7a10:	e559      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x49();
    7a12:	f7fc fa35 	bl	3e80 <opcode_0x49()>
				break; // EOR - Immediate
    7a16:	e556      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x4A();
    7a18:	f7fb ffe8 	bl	39ec <opcode_0x4A()>
				break; // LSR A
    7a1c:	e553      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x4B();
    7a1e:	f7fe fdb9 	bl	6594 <opcode_0x4B()>
				break; // ALR - Immediate
    7a22:	e550      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x4C();
    7a24:	f7fd f93a 	bl	4c9c <opcode_0x4C()>
				break; // JMP - Jump Absolute
    7a28:	e54d      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_Absolute());
    7a2a:	f7fb faff 	bl	302c <Fetch_Absolute()>
    7a2e:	4b25      	ldr	r3, [pc, #148]	; (7ac4 <loop+0x9f4>)
    7a30:	781a      	ldrb	r2, [r3, #0]
    7a32:	4050      	eors	r0, r2
    7a34:	b2c0      	uxtb	r0, r0
    7a36:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a38:	f7fb fa84 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4D].length);
    7a3c:	4b22      	ldr	r3, [pc, #136]	; (7ac8 <loop+0x9f8>)
    7a3e:	f893 0fd5 	ldrb.w	r0, [r3, #4053]	; 0xfd5
    7a42:	883b      	ldrh	r3, [r7, #0]
    7a44:	4418      	add	r0, r3
    7a46:	b280      	uxth	r0, r0
				break; // EOR - Absolute
    7a48:	e53d      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x4E();
    7a4a:	f7fc fdf3 	bl	4634 <opcode_0x4E()>
				break; // LSR - Logical Shift Right - Absolute
    7a4e:	e53a      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x4F();
    7a50:	f7fe f8b6 	bl	5bc0 <opcode_0x4F()>
				break; // SRE - Absolute
    7a54:	e537      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x50();
    7a56:	f7fd f903 	bl	4c60 <opcode_0x50()>
				break; // BVC - Branch on Overflow Clear
    7a5a:	e534      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    7a5c:	2001      	movs	r0, #1
    7a5e:	f7fb fb8b 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7a62:	4b18      	ldr	r3, [pc, #96]	; (7ac4 <loop+0x9f4>)
    7a64:	781a      	ldrb	r2, [r3, #0]
    7a66:	4050      	eors	r0, r2
    7a68:	b2c0      	uxtb	r0, r0
    7a6a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a6c:	f7fb fa6a 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x51].length);
    7a70:	4b17      	ldr	r3, [pc, #92]	; (7ad0 <loop+0xa00>)
    7a72:	f893 00a5 	ldrb.w	r0, [r3, #165]	; 0xa5
    7a76:	883b      	ldrh	r3, [r7, #0]
    7a78:	4418      	add	r0, r3
    7a7a:	b280      	uxth	r0, r0
				break; // EOR - Indirect Indexed  Y
    7a7c:	e523      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x53();
    7a7e:	f7fe f86b 	bl	5b58 <opcode_0x53()>
				break; // SRE - Indirect Indexed  Y
    7a82:	e520      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage_X();
    7a84:	f7fb fa92 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    7a88:	4b11      	ldr	r3, [pc, #68]	; (7ad0 <loop+0xa00>)
    7a8a:	f893 0141 	ldrb.w	r0, [r3, #321]	; 0x141
    7a8e:	883b      	ldrh	r3, [r7, #0]
    7a90:	4418      	add	r0, r3
    7a92:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    7a94:	e517      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_ZeroPage_X());
    7a96:	f7fb fa89 	bl	2fac <Fetch_ZeroPage_X()>
    7a9a:	4b0a      	ldr	r3, [pc, #40]	; (7ac4 <loop+0x9f4>)
    7a9c:	781a      	ldrb	r2, [r3, #0]
    7a9e:	4050      	eors	r0, r2
    7aa0:	b2c0      	uxtb	r0, r0
    7aa2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7aa4:	f7fb fa4e 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x55].length);
    7aa8:	4b09      	ldr	r3, [pc, #36]	; (7ad0 <loop+0xa00>)
    7aaa:	f893 0175 	ldrb.w	r0, [r3, #373]	; 0x175
    7aae:	883b      	ldrh	r3, [r7, #0]
    7ab0:	4418      	add	r0, r3
    7ab2:	b280      	uxth	r0, r0
				break; // EOR - ZeroPage,X
    7ab4:	e507      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x56();
    7ab6:	f7fc fd8f 	bl	45d8 <opcode_0x56()>
				break; // LSR - Logical Shift Right - ZeroPage , X
    7aba:	e504      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x57();
    7abc:	f7fd ffe8 	bl	5a90 <opcode_0x57()>
				break; // SRE - ZeroPage , X
    7ac0:	e501      	b.n	74c6 <loop+0x3f6>
    7ac2:	bf00      	nop
    7ac4:	200188ac 	.word	0x200188ac
    7ac8:	20015418 	.word	0x20015418
    7acc:	20004aa0 	.word	0x20004aa0
    7ad0:	20016418 	.word	0x20016418
    read_byte(register_pc+1, false);
    7ad4:	8838      	ldrh	r0, [r7, #0]
    7ad6:	2100      	movs	r1, #0
    7ad8:	3001      	adds	r0, #1
    7ada:	b280      	uxth	r0, r0
    7adc:	f7fa ff6a 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x58].length);
    7ae0:	4bb4      	ldr	r3, [pc, #720]	; (7db4 <loop+0xce4>)
    register_flags = register_flags & 0xFB;
    7ae2:	4ab5      	ldr	r2, [pc, #724]	; (7db8 <loop+0xce8>)
    return(register_pc + opcode_info[0x58].length);
    7ae4:	f893 0211 	ldrb.w	r0, [r3, #529]	; 0x211
    register_flags = register_flags & 0xFB;
    7ae8:	7813      	ldrb	r3, [r2, #0]
    7aea:	f023 0304 	bic.w	r3, r3, #4
    7aee:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    7af0:	883b      	ldrh	r3, [r7, #0]
    7af2:	4418      	add	r0, r3
    7af4:	b280      	uxth	r0, r0
				break; // CLI
    7af6:	e4e6      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    7af8:	2001      	movs	r0, #1
    7afa:	f7fb fae3 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    7afe:	4baf      	ldr	r3, [pc, #700]	; (7dbc <loop+0xcec>)
    7b00:	781a      	ldrb	r2, [r3, #0]
    7b02:	4050      	eors	r0, r2
    7b04:	b2c0      	uxtb	r0, r0
    7b06:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b08:	f7fb fa1c 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x59].length);
    7b0c:	4ba9      	ldr	r3, [pc, #676]	; (7db4 <loop+0xce4>)
    7b0e:	f893 0245 	ldrb.w	r0, [r3, #581]	; 0x245
    7b12:	883b      	ldrh	r3, [r7, #0]
    7b14:	4418      	add	r0, r3
    7b16:	b280      	uxth	r0, r0
				break; // EOR - Absolute,Y
    7b18:	e4d5      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x5B();
    7b1a:	f7fe f8b7 	bl	5c8c <opcode_0x5B()>
				break; // RE - Absolute , Y
    7b1e:	e4d2      	b.n	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    7b20:	2001      	movs	r0, #1
    7b22:	f7fb fa9f 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    7b26:	4ba3      	ldr	r3, [pc, #652]	; (7db4 <loop+0xce4>)
    7b28:	f893 02e1 	ldrb.w	r0, [r3, #737]	; 0x2e1
    7b2c:	883b      	ldrh	r3, [r7, #0]
    7b2e:	4418      	add	r0, r3
    7b30:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7b32:	e4c8      	b.n	74c6 <loop+0x3f6>
    register_a = register_a ^ (Fetch_Absolute_X(1));
    7b34:	2001      	movs	r0, #1
    7b36:	f7fb fa95 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    7b3a:	4ba0      	ldr	r3, [pc, #640]	; (7dbc <loop+0xcec>)
    7b3c:	781a      	ldrb	r2, [r3, #0]
    7b3e:	4050      	eors	r0, r2
    7b40:	b2c0      	uxtb	r0, r0
    7b42:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b44:	f7fb f9fe 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x5D].length);
    7b48:	4b9a      	ldr	r3, [pc, #616]	; (7db4 <loop+0xce4>)
    7b4a:	f893 0315 	ldrb.w	r0, [r3, #789]	; 0x315
    7b4e:	883b      	ldrh	r3, [r7, #0]
    7b50:	4418      	add	r0, r3
    7b52:	b280      	uxth	r0, r0
				break; // EOR - Absolute,X
    7b54:	e4b7      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x5E();
    7b56:	f7fc fd99 	bl	468c <opcode_0x5E()>
				break; // LSR - Logical Shift Right - Absolute , X
    7b5a:	e4b4      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x5F();
    7b5c:	f7fe f862 	bl	5c24 <opcode_0x5F()>
				break; // SRE - Absolute , X
    7b60:	e4b1      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x60();
    7b62:	f7fd fb9d 	bl	52a0 <opcode_0x60()>
				break; // RTS - Return from Subroutine
    7b66:	e4ae      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    7b68:	f7fb fadc 	bl	3124 <Fetch_Indexed_Indirect_X()>
    7b6c:	b280      	uxth	r0, r0
    7b6e:	f7fb ffb9 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    7b72:	4b90      	ldr	r3, [pc, #576]	; (7db4 <loop+0xce4>)
    7b74:	f893 03e5 	ldrb.w	r0, [r3, #997]	; 0x3e5
    7b78:	883b      	ldrh	r3, [r7, #0]
    7b7a:	4418      	add	r0, r3
    7b7c:	b280      	uxth	r0, r0
				break; // ADC - Indexed Indirect X
    7b7e:	e4a2      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x63();
    7b80:	f7fe f91e 	bl	5dc0 <opcode_0x63()>
				break; // RRA - Indexed Indirect X
    7b84:	e49f      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage();
    7b86:	f7fb f9fd 	bl	2f84 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    7b8a:	4b8a      	ldr	r3, [pc, #552]	; (7db4 <loop+0xce4>)
    7b8c:	f893 0481 	ldrb.w	r0, [r3, #1153]	; 0x481
    7b90:	883b      	ldrh	r3, [r7, #0]
    7b92:	4418      	add	r0, r3
    7b94:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage
    7b96:	e496      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_ZeroPage());
    7b98:	f7fb f9f4 	bl	2f84 <Fetch_ZeroPage()>
    7b9c:	b280      	uxth	r0, r0
    7b9e:	f7fb ffa1 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    7ba2:	4b84      	ldr	r3, [pc, #528]	; (7db4 <loop+0xce4>)
    7ba4:	f893 04b5 	ldrb.w	r0, [r3, #1205]	; 0x4b5
    7ba8:	883b      	ldrh	r3, [r7, #0]
    7baa:	4418      	add	r0, r3
    7bac:	b280      	uxth	r0, r0
				break; // ADC - ZeroPage
    7bae:	e48a      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x66();
    7bb0:	f7fc fd9a 	bl	46e8 <opcode_0x66()>
				break; // ROR - Rotate Right - ZeroPage
    7bb4:	e487      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x67();
    7bb6:	f7fe f89d 	bl	5cf4 <opcode_0x67()>
				break; // RRA - ZeroPage
    7bba:	e484      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x68();
    7bbc:	f7fc f8fc 	bl	3db8 <opcode_0x68()>
				break; // PLA - Pop Accumulator from the stack
    7bc0:	e481      	b.n	74c6 <loop+0x3f6>
    return read_byte(register_pc+offset, false);
    7bc2:	8838      	ldrh	r0, [r7, #0]
    7bc4:	2100      	movs	r1, #0
    7bc6:	3001      	adds	r0, #1
    7bc8:	b280      	uxth	r0, r0
    7bca:	f7fa fef3 	bl	29b4 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    7bce:	b280      	uxth	r0, r0
    7bd0:	f7fb ff88 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    7bd4:	4b77      	ldr	r3, [pc, #476]	; (7db4 <loop+0xce4>)
    7bd6:	f893 0585 	ldrb.w	r0, [r3, #1413]	; 0x585
    7bda:	883b      	ldrh	r3, [r7, #0]
    7bdc:	4418      	add	r0, r3
    7bde:	b280      	uxth	r0, r0
				break; // ADC - Immediate
    7be0:	e471      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x6A();
    7be2:	f7fb ff29 	bl	3a38 <opcode_0x6A()>
				break; // ROR A
    7be6:	e46e      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x6B();
    7be8:	f7fe fcfe 	bl	65e8 <opcode_0x6B()>
				break; // ARR - Immediate
    7bec:	e46b      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x6C();
    7bee:	f7fd f905 	bl	4dfc <opcode_0x6C()>
				break; // JMP - Jump Indirect
    7bf2:	e468      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_Absolute());
    7bf4:	f7fb fa1a 	bl	302c <Fetch_Absolute()>
    7bf8:	b280      	uxth	r0, r0
    7bfa:	f7fb ff73 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    7bfe:	4b6d      	ldr	r3, [pc, #436]	; (7db4 <loop+0xce4>)
    7c00:	f893 0655 	ldrb.w	r0, [r3, #1621]	; 0x655
    7c04:	883b      	ldrh	r3, [r7, #0]
    7c06:	4418      	add	r0, r3
    7c08:	b280      	uxth	r0, r0
				break; // ADC - Absolute
    7c0a:	e45c      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x6E();
    7c0c:	f7fc fdda 	bl	47c4 <opcode_0x6E()>
				break; // ROR - Rotate Right - Absolute
    7c10:	e459      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x6F();
    7c12:	f7fe f933 	bl	5e7c <opcode_0x6F()>
				break; // RRA - Absolute
    7c16:	e456      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x70();
    7c18:	f7fd f802 	bl	4c20 <opcode_0x70()>
				break; // BVS - Branch on Overflow Set
    7c1c:	e453      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    7c1e:	2001      	movs	r0, #1
    7c20:	f7fb faaa 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    7c24:	b280      	uxth	r0, r0
    7c26:	f7fb ff5d 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    7c2a:	4b62      	ldr	r3, [pc, #392]	; (7db4 <loop+0xce4>)
    7c2c:	f893 0725 	ldrb.w	r0, [r3, #1829]	; 0x725
    7c30:	883b      	ldrh	r3, [r7, #0]
    7c32:	4418      	add	r0, r3
    7c34:	b280      	uxth	r0, r0
				break; // ADC - Indirect Indexed  Y
    7c36:	e446      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x73();
    7c38:	f7fe f8f0 	bl	5e1c <opcode_0x73()>
				break; // RRA - Indirect Indexed  Y
    7c3c:	e443      	b.n	74c6 <loop+0x3f6>
    Fetch_ZeroPage_X();
    7c3e:	f7fb f9b5 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    7c42:	4b5c      	ldr	r3, [pc, #368]	; (7db4 <loop+0xce4>)
    7c44:	f893 07c1 	ldrb.w	r0, [r3, #1985]	; 0x7c1
    7c48:	883b      	ldrh	r3, [r7, #0]
    7c4a:	4418      	add	r0, r3
    7c4c:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    7c4e:	e43a      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_ZeroPage_X());
    7c50:	f7fb f9ac 	bl	2fac <Fetch_ZeroPage_X()>
    7c54:	b280      	uxth	r0, r0
    7c56:	f7fb ff45 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    7c5a:	4b56      	ldr	r3, [pc, #344]	; (7db4 <loop+0xce4>)
    7c5c:	f893 07f5 	ldrb.w	r0, [r3, #2037]	; 0x7f5
    7c60:	883b      	ldrh	r3, [r7, #0]
    7c62:	4418      	add	r0, r3
    7c64:	b280      	uxth	r0, r0
				break; // ADC - ZeroPage , X
    7c66:	e42e      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x76();
    7c68:	f7fc fd7a 	bl	4760 <opcode_0x76()>
				break; // ROR - Rotate Right - ZeroPage , X
    7c6c:	e42b      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x77();
    7c6e:	f7fe f879 	bl	5d64 <opcode_0x77()>
				break; // RRA - ZeroPage , X
    7c72:	e428      	b.n	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7c74:	8838      	ldrh	r0, [r7, #0]
    7c76:	2100      	movs	r1, #0
    7c78:	3001      	adds	r0, #1
    7c7a:	b280      	uxth	r0, r0
    7c7c:	f7fa fe9a 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x78].length);
    7c80:	4b4c      	ldr	r3, [pc, #304]	; (7db4 <loop+0xce4>)
    register_flags = register_flags | 0x04;
    7c82:	4a4d      	ldr	r2, [pc, #308]	; (7db8 <loop+0xce8>)
    return(register_pc + opcode_info[0x78].length);
    7c84:	f893 0891 	ldrb.w	r0, [r3, #2193]	; 0x891
    register_flags = register_flags | 0x04;
    7c88:	7813      	ldrb	r3, [r2, #0]
    7c8a:	f043 0304 	orr.w	r3, r3, #4
    7c8e:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    7c90:	883b      	ldrh	r3, [r7, #0]
    7c92:	4418      	add	r0, r3
    7c94:	b280      	uxth	r0, r0
				break; // SEI
    7c96:	e416      	b.n	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_Absolute_Y(1));
    7c98:	2001      	movs	r0, #1
    7c9a:	f7fb fa13 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    7c9e:	b280      	uxth	r0, r0
    7ca0:	f7fb ff20 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    7ca4:	4b43      	ldr	r3, [pc, #268]	; (7db4 <loop+0xce4>)
    7ca6:	f893 08c5 	ldrb.w	r0, [r3, #2245]	; 0x8c5
    7caa:	883b      	ldrh	r3, [r7, #0]
    7cac:	4418      	add	r0, r3
    7cae:	b280      	uxth	r0, r0
				break; // ADC - Absolute , Y
    7cb0:	e409      	b.n	74c6 <loop+0x3f6>
				next_pc = opcode_0x7B();
    7cb2:	f7fe f941 	bl	5f38 <opcode_0x7B()>
				break; // RRA - Absolute , Y
    7cb6:	e406      	b.n	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    7cb8:	2001      	movs	r0, #1
    7cba:	f7fb f9d3 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    7cbe:	4b3d      	ldr	r3, [pc, #244]	; (7db4 <loop+0xce4>)
    7cc0:	f893 0961 	ldrb.w	r0, [r3, #2401]	; 0x961
    7cc4:	883b      	ldrh	r3, [r7, #0]
    7cc6:	4418      	add	r0, r3
    7cc8:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    7cca:	f7ff bbfc 	b.w	74c6 <loop+0x3f6>
    Calculate_ADC(Fetch_Absolute_X(1));
    7cce:	2001      	movs	r0, #1
    7cd0:	f7fb f9c8 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    7cd4:	b280      	uxth	r0, r0
    7cd6:	f7fb ff05 	bl	3ae4 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    7cda:	4b36      	ldr	r3, [pc, #216]	; (7db4 <loop+0xce4>)
    7cdc:	f893 0995 	ldrb.w	r0, [r3, #2453]	; 0x995
    7ce0:	883b      	ldrh	r3, [r7, #0]
    7ce2:	4418      	add	r0, r3
    7ce4:	b280      	uxth	r0, r0
				break; // ADC - Absolute , X
    7ce6:	f7ff bbee 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0x7E();
    7cea:	f7fc fd9d 	bl	4828 <opcode_0x7E()>
				break; // ROR - Rotate Right - Absolute , X
    7cee:	f7ff bbea 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0x7F();
    7cf2:	f7fe f8f1 	bl	5ed8 <opcode_0x7F()>
				break; // RRA - Absolute , X
    7cf6:	f7ff bbe6 	b.w	74c6 <loop+0x3f6>
    Fetch_Immediate(1);
    7cfa:	2001      	movs	r0, #1
    7cfc:	f7fb f936 	bl	2f6c <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    7d00:	4b2c      	ldr	r3, [pc, #176]	; (7db4 <loop+0xce4>)
    7d02:	f893 0a31 	ldrb.w	r0, [r3, #2609]	; 0xa31
    7d06:	883b      	ldrh	r3, [r7, #0]
    7d08:	4418      	add	r0, r3
    7d0a:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7d0c:	f7ff bbdb 	b.w	74c6 <loop+0x3f6>
    Write_Indexed_Indirect_X(register_a);
    7d10:	4b2a      	ldr	r3, [pc, #168]	; (7dbc <loop+0xcec>)
    7d12:	7818      	ldrb	r0, [r3, #0]
    7d14:	f7fb fb18 	bl	3348 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x81].length);
    7d18:	4b26      	ldr	r3, [pc, #152]	; (7db4 <loop+0xce4>)
    7d1a:	f893 0a65 	ldrb.w	r0, [r3, #2661]	; 0xa65
    7d1e:	883b      	ldrh	r3, [r7, #0]
    7d20:	4418      	add	r0, r3
    7d22:	b280      	uxth	r0, r0
				break; // STA - Indexed Indirect X
    7d24:	f7ff bbcf 	b.w	74c6 <loop+0x3f6>
    Fetch_Immediate(1);
    7d28:	2001      	movs	r0, #1
    7d2a:	f7fb f91f 	bl	2f6c <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    7d2e:	4b21      	ldr	r3, [pc, #132]	; (7db4 <loop+0xce4>)
    7d30:	f893 0a99 	ldrb.w	r0, [r3, #2713]	; 0xa99
    7d34:	883b      	ldrh	r3, [r7, #0]
    7d36:	4418      	add	r0, r3
    7d38:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7d3a:	f7ff bbc4 	b.w	74c6 <loop+0x3f6>
    Write_Indexed_Indirect_X(register_a & register_x);
    7d3e:	4b1f      	ldr	r3, [pc, #124]	; (7dbc <loop+0xcec>)
    7d40:	7818      	ldrb	r0, [r3, #0]
    7d42:	4b1f      	ldr	r3, [pc, #124]	; (7dc0 <loop+0xcf0>)
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	4018      	ands	r0, r3
    7d48:	f7fb fafe 	bl	3348 <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x83].length);
    7d4c:	4b19      	ldr	r3, [pc, #100]	; (7db4 <loop+0xce4>)
    7d4e:	f893 0acd 	ldrb.w	r0, [r3, #2765]	; 0xacd
    7d52:	883b      	ldrh	r3, [r7, #0]
    7d54:	4418      	add	r0, r3
    7d56:	b280      	uxth	r0, r0
				break; // SAX - Indexed Indirect X
    7d58:	f7ff bbb5 	b.w	74c6 <loop+0x3f6>
    return read_byte(register_pc+offset, false);
    7d5c:	8838      	ldrh	r0, [r7, #0]
    7d5e:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    7d60:	4b18      	ldr	r3, [pc, #96]	; (7dc4 <loop+0xcf4>)
    7d62:	3001      	adds	r0, #1
    7d64:	781c      	ldrb	r4, [r3, #0]
    7d66:	b280      	uxth	r0, r0
    7d68:	f7fa fe24 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7d6c:	4b16      	ldr	r3, [pc, #88]	; (7dc8 <loop+0xcf8>)
    7d6e:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7d70:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7d72:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7d74:	f7fa ffda 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x84].length);
    7d78:	4b0e      	ldr	r3, [pc, #56]	; (7db4 <loop+0xce4>)
    7d7a:	f893 0b01 	ldrb.w	r0, [r3, #2817]	; 0xb01
    7d7e:	883b      	ldrh	r3, [r7, #0]
    7d80:	4418      	add	r0, r3
    7d82:	b280      	uxth	r0, r0
				break; // STY - ZeroPage
    7d84:	f7ff bb9f 	b.w	74c6 <loop+0x3f6>
    return read_byte(register_pc+offset, false);
    7d88:	8838      	ldrh	r0, [r7, #0]
    7d8a:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    7d8c:	4b0b      	ldr	r3, [pc, #44]	; (7dbc <loop+0xcec>)
    7d8e:	3001      	adds	r0, #1
    7d90:	781c      	ldrb	r4, [r3, #0]
    7d92:	b280      	uxth	r0, r0
    7d94:	f7fa fe0e 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7d98:	4b0b      	ldr	r3, [pc, #44]	; (7dc8 <loop+0xcf8>)
    7d9a:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7d9c:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7d9e:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7da0:	f7fa ffc4 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x85].length);
    7da4:	4b03      	ldr	r3, [pc, #12]	; (7db4 <loop+0xce4>)
    7da6:	f893 0b35 	ldrb.w	r0, [r3, #2869]	; 0xb35
    7daa:	883b      	ldrh	r3, [r7, #0]
    7dac:	4418      	add	r0, r3
    7dae:	b280      	uxth	r0, r0
				break; // STA - ZeroPage
    7db0:	f7ff bb89 	b.w	74c6 <loop+0x3f6>
    7db4:	20016418 	.word	0x20016418
    7db8:	20004aa0 	.word	0x20004aa0
    7dbc:	200188ac 	.word	0x200188ac
    7dc0:	200188ad 	.word	0x200188ad
    7dc4:	200188ae 	.word	0x200188ae
    7dc8:	2001888e 	.word	0x2001888e
    return read_byte(register_pc+offset, false);
    7dcc:	8838      	ldrh	r0, [r7, #0]
    7dce:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    7dd0:	4bad      	ldr	r3, [pc, #692]	; (8088 <loop+0xfb8>)
    7dd2:	3001      	adds	r0, #1
    7dd4:	781c      	ldrb	r4, [r3, #0]
    7dd6:	b280      	uxth	r0, r0
    7dd8:	f7fa fdec 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7ddc:	4bab      	ldr	r3, [pc, #684]	; (808c <loop+0xfbc>)
    7dde:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7de0:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7de2:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7de4:	f7fa ffa2 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x86].length);
    7de8:	4ba9      	ldr	r3, [pc, #676]	; (8090 <loop+0xfc0>)
    7dea:	f893 0b69 	ldrb.w	r0, [r3, #2921]	; 0xb69
    7dee:	883b      	ldrh	r3, [r7, #0]
    7df0:	4418      	add	r0, r3
    7df2:	b280      	uxth	r0, r0
				break; // STX - ZeroPage
    7df4:	f7ff bb67 	b.w	74c6 <loop+0x3f6>
    Write_ZeroPage(register_a & register_x);
    7df8:	4ba6      	ldr	r3, [pc, #664]	; (8094 <loop+0xfc4>)
    return read_byte(register_pc+offset, false);
    7dfa:	2100      	movs	r1, #0
    7dfc:	8838      	ldrh	r0, [r7, #0]
    7dfe:	781c      	ldrb	r4, [r3, #0]
    7e00:	4ba1      	ldr	r3, [pc, #644]	; (8088 <loop+0xfb8>)
    7e02:	3001      	adds	r0, #1
    7e04:	781b      	ldrb	r3, [r3, #0]
    7e06:	b280      	uxth	r0, r0
    7e08:	401c      	ands	r4, r3
    7e0a:	f7fa fdd3 	bl	29b4 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7e0e:	4b9f      	ldr	r3, [pc, #636]	; (808c <loop+0xfbc>)
    7e10:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7e12:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7e14:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7e16:	f7fa ff89 	bl	2d2c <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x87].length);
    7e1a:	4b9d      	ldr	r3, [pc, #628]	; (8090 <loop+0xfc0>)
    7e1c:	f893 0b9d 	ldrb.w	r0, [r3, #2973]	; 0xb9d
    7e20:	883b      	ldrh	r3, [r7, #0]
    7e22:	4418      	add	r0, r3
    7e24:	b280      	uxth	r0, r0
				break; // SAX - ZeroPage
    7e26:	f7ff bb4e 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7e2a:	8838      	ldrh	r0, [r7, #0]
    7e2c:	2100      	movs	r1, #0
    7e2e:	3001      	adds	r0, #1
    7e30:	b280      	uxth	r0, r0
    7e32:	f7fa fdbf 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_y - 1;
    7e36:	4b98      	ldr	r3, [pc, #608]	; (8098 <loop+0xfc8>)
    7e38:	7818      	ldrb	r0, [r3, #0]
    7e3a:	3801      	subs	r0, #1
    7e3c:	b2c0      	uxtb	r0, r0
    7e3e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7e40:	f7fb f880 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x88].length);
    7e44:	4b92      	ldr	r3, [pc, #584]	; (8090 <loop+0xfc0>)
    7e46:	f893 0bd1 	ldrb.w	r0, [r3, #3025]	; 0xbd1
    7e4a:	883b      	ldrh	r3, [r7, #0]
    7e4c:	4418      	add	r0, r3
    7e4e:	b280      	uxth	r0, r0
				break; // DEY
    7e50:	f7ff bb39 	b.w	74c6 <loop+0x3f6>
    Fetch_Immediate(1);
    7e54:	2001      	movs	r0, #1
    7e56:	f7fb f889 	bl	2f6c <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    7e5a:	4b8d      	ldr	r3, [pc, #564]	; (8090 <loop+0xfc0>)
    7e5c:	f893 0c05 	ldrb.w	r0, [r3, #3077]	; 0xc05
    7e60:	883b      	ldrh	r3, [r7, #0]
    7e62:	4418      	add	r0, r3
    7e64:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    7e66:	f7ff bb2e 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7e6a:	8838      	ldrh	r0, [r7, #0]
    7e6c:	2100      	movs	r1, #0
    7e6e:	3001      	adds	r0, #1
    7e70:	b280      	uxth	r0, r0
    7e72:	f7fa fd9f 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_x;
    7e76:	4b84      	ldr	r3, [pc, #528]	; (8088 <loop+0xfb8>)
    7e78:	7818      	ldrb	r0, [r3, #0]
    7e7a:	4b86      	ldr	r3, [pc, #536]	; (8094 <loop+0xfc4>)
    7e7c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7e7e:	f7fb f861 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x8A].length);
    7e82:	4b83      	ldr	r3, [pc, #524]	; (8090 <loop+0xfc0>)
    7e84:	f893 0c39 	ldrb.w	r0, [r3, #3129]	; 0xc39
    7e88:	883b      	ldrh	r3, [r7, #0]
    7e8a:	4418      	add	r0, r3
    7e8c:	b280      	uxth	r0, r0
				break; // TXA
    7e8e:	f7ff bb1a 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    7e92:	2001      	movs	r0, #1
    7e94:	f7fb f86a 	bl	2f6c <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    7e98:	4b7d      	ldr	r3, [pc, #500]	; (8090 <loop+0xfc0>)
    7e9a:	f893 0c6d 	ldrb.w	r0, [r3, #3181]	; 0xc6d
    7e9e:	883b      	ldrh	r3, [r7, #0]
    7ea0:	4418      	add	r0, r3
    7ea2:	b280      	uxth	r0, r0
				break; // ANE - Immediate
    7ea4:	f7ff bb0f 	b.w	74c6 <loop+0x3f6>
    Write_Absolute(register_y);
    7ea8:	4b7b      	ldr	r3, [pc, #492]	; (8098 <loop+0xfc8>)
    7eaa:	7818      	ldrb	r0, [r3, #0]
    7eac:	f7fb f998 	bl	31e0 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8C].length);
    7eb0:	4b77      	ldr	r3, [pc, #476]	; (8090 <loop+0xfc0>)
    7eb2:	f893 0ca1 	ldrb.w	r0, [r3, #3233]	; 0xca1
    7eb6:	883b      	ldrh	r3, [r7, #0]
    7eb8:	4418      	add	r0, r3
    7eba:	b280      	uxth	r0, r0
				break; // STY - Absolute
    7ebc:	f7ff bb03 	b.w	74c6 <loop+0x3f6>
    Write_Absolute(register_a);
    7ec0:	4b74      	ldr	r3, [pc, #464]	; (8094 <loop+0xfc4>)
    7ec2:	7818      	ldrb	r0, [r3, #0]
    7ec4:	f7fb f98c 	bl	31e0 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8D].length);
    7ec8:	4b71      	ldr	r3, [pc, #452]	; (8090 <loop+0xfc0>)
    7eca:	f893 0cd5 	ldrb.w	r0, [r3, #3285]	; 0xcd5
    7ece:	883b      	ldrh	r3, [r7, #0]
    7ed0:	4418      	add	r0, r3
    7ed2:	b280      	uxth	r0, r0
				break; // STA - Absolute
    7ed4:	f7ff baf7 	b.w	74c6 <loop+0x3f6>
    Write_Absolute(register_x);
    7ed8:	4b6b      	ldr	r3, [pc, #428]	; (8088 <loop+0xfb8>)
    7eda:	7818      	ldrb	r0, [r3, #0]
    7edc:	f7fb f980 	bl	31e0 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8E].length);
    7ee0:	4b6b      	ldr	r3, [pc, #428]	; (8090 <loop+0xfc0>)
    7ee2:	f893 0d09 	ldrb.w	r0, [r3, #3337]	; 0xd09
    7ee6:	883b      	ldrh	r3, [r7, #0]
    7ee8:	4418      	add	r0, r3
    7eea:	b280      	uxth	r0, r0
				break; // STX - Absolute
    7eec:	f7ff baeb 	b.w	74c6 <loop+0x3f6>
    Write_Absolute(register_a & register_x);
    7ef0:	4b68      	ldr	r3, [pc, #416]	; (8094 <loop+0xfc4>)
    7ef2:	7818      	ldrb	r0, [r3, #0]
    7ef4:	4b64      	ldr	r3, [pc, #400]	; (8088 <loop+0xfb8>)
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	4018      	ands	r0, r3
    7efa:	f7fb f971 	bl	31e0 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8F].length);
    7efe:	4b64      	ldr	r3, [pc, #400]	; (8090 <loop+0xfc0>)
    7f00:	f893 0d3d 	ldrb.w	r0, [r3, #3389]	; 0xd3d
    7f04:	883b      	ldrh	r3, [r7, #0]
    7f06:	4418      	add	r0, r3
    7f08:	b280      	uxth	r0, r0
				break; // SAX - Absolute
    7f0a:	f7ff badc 	b.w	74c6 <loop+0x3f6>
    if ((flag_c) == 0) Branch_Taken();
    7f0e:	4b63      	ldr	r3, [pc, #396]	; (809c <loop+0xfcc>)
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	07db      	lsls	r3, r3, #31
    7f14:	f100 84c1 	bmi.w	889a <loop+0x17ca>
    7f18:	f7fc fd84 	bl	4a24 <Branch_Taken()>
    return(register_pc);
    7f1c:	8838      	ldrh	r0, [r7, #0]
				break; // BCC - Branch on Carry Clear
    7f1e:	f7ff bad2 	b.w	74c6 <loop+0x3f6>
    Write_Indexed_Indirect_Y(register_a);
    7f22:	4b5c      	ldr	r3, [pc, #368]	; (8094 <loop+0xfc4>)
    7f24:	7818      	ldrb	r0, [r3, #0]
    7f26:	f7fb fa3d 	bl	33a4 <Write_Indexed_Indirect_Y(unsigned char)>
    return(register_pc + opcode_info[0x91].length);
    7f2a:	4b59      	ldr	r3, [pc, #356]	; (8090 <loop+0xfc0>)
    7f2c:	f893 0da5 	ldrb.w	r0, [r3, #3493]	; 0xda5
    7f30:	883b      	ldrh	r3, [r7, #0]
    7f32:	4418      	add	r0, r3
    7f34:	b280      	uxth	r0, r0
				break; // STA - Indirect Indexed  Y
    7f36:	f7ff bac6 	b.w	74c6 <loop+0x3f6>
    Fetch_ZeroPage_Y();
    7f3a:	f7fb f857 	bl	2fec <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    7f3e:	4b54      	ldr	r3, [pc, #336]	; (8090 <loop+0xfc0>)
    7f40:	f893 0e0d 	ldrb.w	r0, [r3, #3597]	; 0xe0d
    7f44:	883b      	ldrh	r3, [r7, #0]
    7f46:	4418      	add	r0, r3
    7f48:	b280      	uxth	r0, r0
				break; // SHA - ZeroPage , Y
    7f4a:	f7ff babc 	b.w	74c6 <loop+0x3f6>
    Write_ZeroPage_X(register_y);
    7f4e:	4b52      	ldr	r3, [pc, #328]	; (8098 <loop+0xfc8>)
    7f50:	7818      	ldrb	r0, [r3, #0]
    7f52:	f7fb f963 	bl	321c <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x94].length);
    7f56:	4b4e      	ldr	r3, [pc, #312]	; (8090 <loop+0xfc0>)
    7f58:	f893 0e41 	ldrb.w	r0, [r3, #3649]	; 0xe41
    7f5c:	883b      	ldrh	r3, [r7, #0]
    7f5e:	4418      	add	r0, r3
    7f60:	b280      	uxth	r0, r0
				break; // STY - ZeroPage , X
    7f62:	f7ff bab0 	b.w	74c6 <loop+0x3f6>
    Write_ZeroPage_X(register_a);
    7f66:	4b4b      	ldr	r3, [pc, #300]	; (8094 <loop+0xfc4>)
    7f68:	7818      	ldrb	r0, [r3, #0]
    7f6a:	f7fb f957 	bl	321c <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x95].length);
    7f6e:	4b48      	ldr	r3, [pc, #288]	; (8090 <loop+0xfc0>)
    7f70:	f893 0e75 	ldrb.w	r0, [r3, #3701]	; 0xe75
    7f74:	883b      	ldrh	r3, [r7, #0]
    7f76:	4418      	add	r0, r3
    7f78:	b280      	uxth	r0, r0
				break; // STA - ZeroPage , X
    7f7a:	f7ff baa4 	b.w	74c6 <loop+0x3f6>
    Write_ZeroPage_Y(register_x);
    7f7e:	4b42      	ldr	r3, [pc, #264]	; (8088 <loop+0xfb8>)
    7f80:	7818      	ldrb	r0, [r3, #0]
    7f82:	f7fb f969 	bl	3258 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x96].length);
    7f86:	4b42      	ldr	r3, [pc, #264]	; (8090 <loop+0xfc0>)
    7f88:	f893 0ea9 	ldrb.w	r0, [r3, #3753]	; 0xea9
    7f8c:	883b      	ldrh	r3, [r7, #0]
    7f8e:	4418      	add	r0, r3
    7f90:	b280      	uxth	r0, r0
				break; // STX - ZeroPage , Y
    7f92:	f7ff ba98 	b.w	74c6 <loop+0x3f6>
    Write_ZeroPage_Y(register_a & register_x);
    7f96:	4b3f      	ldr	r3, [pc, #252]	; (8094 <loop+0xfc4>)
    7f98:	7818      	ldrb	r0, [r3, #0]
    7f9a:	4b3b      	ldr	r3, [pc, #236]	; (8088 <loop+0xfb8>)
    7f9c:	781b      	ldrb	r3, [r3, #0]
    7f9e:	4018      	ands	r0, r3
    7fa0:	f7fb f95a 	bl	3258 <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x97].length);
    7fa4:	4b3a      	ldr	r3, [pc, #232]	; (8090 <loop+0xfc0>)
    7fa6:	f893 0edd 	ldrb.w	r0, [r3, #3805]	; 0xedd
    7faa:	883b      	ldrh	r3, [r7, #0]
    7fac:	4418      	add	r0, r3
    7fae:	b280      	uxth	r0, r0
				break; // SAX - ZeroPage , Y
    7fb0:	f7ff ba89 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7fb4:	8838      	ldrh	r0, [r7, #0]
    7fb6:	2100      	movs	r1, #0
    7fb8:	3001      	adds	r0, #1
    7fba:	b280      	uxth	r0, r0
    7fbc:	f7fa fcfa 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = register_y;
    7fc0:	4b35      	ldr	r3, [pc, #212]	; (8098 <loop+0xfc8>)
    7fc2:	7818      	ldrb	r0, [r3, #0]
    7fc4:	4b33      	ldr	r3, [pc, #204]	; (8094 <loop+0xfc4>)
    7fc6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7fc8:	f7fa ffbc 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x98].length);
    7fcc:	4b30      	ldr	r3, [pc, #192]	; (8090 <loop+0xfc0>)
    7fce:	f893 0f11 	ldrb.w	r0, [r3, #3857]	; 0xf11
    7fd2:	883b      	ldrh	r3, [r7, #0]
    7fd4:	4418      	add	r0, r3
    7fd6:	b280      	uxth	r0, r0
				break; // TYA
    7fd8:	f7ff ba75 	b.w	74c6 <loop+0x3f6>
    Write_Absolute_Y(register_a);
    7fdc:	4b2d      	ldr	r3, [pc, #180]	; (8094 <loop+0xfc4>)
    7fde:	7818      	ldrb	r0, [r3, #0]
    7fe0:	f7fb f97e 	bl	32e0 <Write_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x99].length);
    7fe4:	4b2a      	ldr	r3, [pc, #168]	; (8090 <loop+0xfc0>)
    7fe6:	f893 0f45 	ldrb.w	r0, [r3, #3909]	; 0xf45
    7fea:	883b      	ldrh	r3, [r7, #0]
    7fec:	4418      	add	r0, r3
    7fee:	b280      	uxth	r0, r0
				break; // STA - Absolute , Y
    7ff0:	f7ff ba69 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    7ff4:	8838      	ldrh	r0, [r7, #0]
    7ff6:	2100      	movs	r1, #0
    7ff8:	3001      	adds	r0, #1
    7ffa:	b280      	uxth	r0, r0
    7ffc:	f7fa fcda 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x9A].length);
    8000:	4b23      	ldr	r3, [pc, #140]	; (8090 <loop+0xfc0>)
    8002:	f893 0f79 	ldrb.w	r0, [r3, #3961]	; 0xf79
    register_sp = register_x;
    8006:	4b20      	ldr	r3, [pc, #128]	; (8088 <loop+0xfb8>)
    8008:	781a      	ldrb	r2, [r3, #0]
    return(register_pc + opcode_info[0x9A].length);
    800a:	883b      	ldrh	r3, [r7, #0]
    800c:	4418      	add	r0, r3
    register_sp = register_x;
    800e:	4b24      	ldr	r3, [pc, #144]	; (80a0 <loop+0xfd0>)
    return(register_pc + opcode_info[0x9A].length);
    8010:	b280      	uxth	r0, r0
    register_sp = register_x;
    8012:	701a      	strb	r2, [r3, #0]
				break; // TXS
    8014:	f7ff ba57 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_Y(0);
    8018:	2000      	movs	r0, #0
    801a:	f7fb f853 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    801e:	4b1c      	ldr	r3, [pc, #112]	; (8090 <loop+0xfc0>)
    8020:	f893 0fad 	ldrb.w	r0, [r3, #4013]	; 0xfad
    8024:	883b      	ldrh	r3, [r7, #0]
    8026:	4418      	add	r0, r3
    8028:	b280      	uxth	r0, r0
				break; // TAS - Absolute , Y 
    802a:	f7ff ba4c 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_X(0);
    802e:	2000      	movs	r0, #0
    8030:	f7fb f818 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    8034:	4b16      	ldr	r3, [pc, #88]	; (8090 <loop+0xfc0>)
    8036:	f893 0fe1 	ldrb.w	r0, [r3, #4065]	; 0xfe1
    803a:	883b      	ldrh	r3, [r7, #0]
    803c:	4418      	add	r0, r3
    803e:	b280      	uxth	r0, r0
				break; // SHY - Absolute , X
    8040:	f7ff ba41 	b.w	74c6 <loop+0x3f6>
    Write_Absolute_X(register_a);
    8044:	4b13      	ldr	r3, [pc, #76]	; (8094 <loop+0xfc4>)
    8046:	7818      	ldrb	r0, [r3, #0]
    8048:	f7fb f924 	bl	3294 <Write_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9D].length);
    804c:	4b15      	ldr	r3, [pc, #84]	; (80a4 <loop+0xfd4>)
    804e:	7d58      	ldrb	r0, [r3, #21]
    8050:	883b      	ldrh	r3, [r7, #0]
    8052:	4418      	add	r0, r3
    8054:	b280      	uxth	r0, r0
				break; // STA - Absolute , X
    8056:	f7ff ba36 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_Y(0);
    805a:	2000      	movs	r0, #0
    805c:	f7fb f832 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    8060:	4b10      	ldr	r3, [pc, #64]	; (80a4 <loop+0xfd4>)
    8062:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
    8066:	883b      	ldrh	r3, [r7, #0]
    8068:	4418      	add	r0, r3
    806a:	b280      	uxth	r0, r0
				break; // SHX - Absolute , Y
    806c:	f7ff ba2b 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_Y(0);
    8070:	2000      	movs	r0, #0
    8072:	f7fb f827 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    8076:	4b0b      	ldr	r3, [pc, #44]	; (80a4 <loop+0xfd4>)
    8078:	f893 007d 	ldrb.w	r0, [r3, #125]	; 0x7d
    807c:	883b      	ldrh	r3, [r7, #0]
    807e:	4418      	add	r0, r3
    8080:	b280      	uxth	r0, r0
				break; // SHA - Absolute , Y
    8082:	f7ff ba20 	b.w	74c6 <loop+0x3f6>
    8086:	bf00      	nop
    8088:	200188ad 	.word	0x200188ad
    808c:	2001888e 	.word	0x2001888e
    8090:	20016418 	.word	0x20016418
    8094:	200188ac 	.word	0x200188ac
    8098:	200188ae 	.word	0x200188ae
    809c:	20004aa0 	.word	0x20004aa0
    80a0:	20004aa1 	.word	0x20004aa1
    80a4:	20017418 	.word	0x20017418
    return read_byte(register_pc+offset, false);
    80a8:	8838      	ldrh	r0, [r7, #0]
    80aa:	2100      	movs	r1, #0
    80ac:	3001      	adds	r0, #1
    80ae:	b280      	uxth	r0, r0
    80b0:	f7fa fc80 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    80b4:	4bbd      	ldr	r3, [pc, #756]	; (83ac <loop+0x12dc>)
    80b6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    80b8:	f7fa ff44 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA0].length);
    80bc:	4bbc      	ldr	r3, [pc, #752]	; (83b0 <loop+0x12e0>)
    80be:	f893 00b1 	ldrb.w	r0, [r3, #177]	; 0xb1
    80c2:	883b      	ldrh	r3, [r7, #0]
    80c4:	4418      	add	r0, r3
    80c6:	b280      	uxth	r0, r0
				break; // LDY - Immediate
    80c8:	f7ff b9fd 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Indexed_Indirect_X();
    80cc:	f7fb f82a 	bl	3124 <Fetch_Indexed_Indirect_X()>
    80d0:	4bb8      	ldr	r3, [pc, #736]	; (83b4 <loop+0x12e4>)
    80d2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    80d4:	f7fa ff36 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA1].length);
    80d8:	4bb5      	ldr	r3, [pc, #724]	; (83b0 <loop+0x12e0>)
    80da:	f893 00e5 	ldrb.w	r0, [r3, #229]	; 0xe5
    80de:	883b      	ldrh	r3, [r7, #0]
    80e0:	4418      	add	r0, r3
    80e2:	b280      	uxth	r0, r0
				break; // LDA - Indexed Indirect X
    80e4:	f7ff b9ef 	b.w	74c6 <loop+0x3f6>
    return read_byte(register_pc+offset, false);
    80e8:	8838      	ldrh	r0, [r7, #0]
    80ea:	2100      	movs	r1, #0
    80ec:	3001      	adds	r0, #1
    80ee:	b280      	uxth	r0, r0
    80f0:	f7fa fc60 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    80f4:	4bb0      	ldr	r3, [pc, #704]	; (83b8 <loop+0x12e8>)
    80f6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    80f8:	f7fa ff24 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA2].length);
    80fc:	4bac      	ldr	r3, [pc, #688]	; (83b0 <loop+0x12e0>)
    80fe:	f893 0119 	ldrb.w	r0, [r3, #281]	; 0x119
    8102:	883b      	ldrh	r3, [r7, #0]
    8104:	4418      	add	r0, r3
    8106:	b280      	uxth	r0, r0
				break; // LDX - Immediate
    8108:	f7ff b9dd 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Indexed_Indirect_X();
    810c:	f7fb f80a 	bl	3124 <Fetch_Indexed_Indirect_X()>
    8110:	4aa8      	ldr	r2, [pc, #672]	; (83b4 <loop+0x12e4>)
    8112:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8114:	4aa8      	ldr	r2, [pc, #672]	; (83b8 <loop+0x12e8>)
    8116:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8118:	f7fa ff14 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA3].length);
    811c:	4ba4      	ldr	r3, [pc, #656]	; (83b0 <loop+0x12e0>)
    811e:	f893 014d 	ldrb.w	r0, [r3, #333]	; 0x14d
    8122:	883b      	ldrh	r3, [r7, #0]
    8124:	4418      	add	r0, r3
    8126:	b280      	uxth	r0, r0
				break; // LAX - Indexed Indirect X
    8128:	f7ff b9cd 	b.w	74c6 <loop+0x3f6>
    register_y = Fetch_ZeroPage();
    812c:	f7fa ff2a 	bl	2f84 <Fetch_ZeroPage()>
    8130:	4b9e      	ldr	r3, [pc, #632]	; (83ac <loop+0x12dc>)
    8132:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8134:	f7fa ff06 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA4].length);
    8138:	4b9d      	ldr	r3, [pc, #628]	; (83b0 <loop+0x12e0>)
    813a:	f893 0181 	ldrb.w	r0, [r3, #385]	; 0x181
    813e:	883b      	ldrh	r3, [r7, #0]
    8140:	4418      	add	r0, r3
    8142:	b280      	uxth	r0, r0
				break; // LDY - ZeroPage
    8144:	f7ff b9bf 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_ZeroPage();
    8148:	f7fa ff1c 	bl	2f84 <Fetch_ZeroPage()>
    814c:	4b99      	ldr	r3, [pc, #612]	; (83b4 <loop+0x12e4>)
    814e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8150:	f7fa fef8 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA5].length);
    8154:	4b96      	ldr	r3, [pc, #600]	; (83b0 <loop+0x12e0>)
    8156:	f893 01b5 	ldrb.w	r0, [r3, #437]	; 0x1b5
    815a:	883b      	ldrh	r3, [r7, #0]
    815c:	4418      	add	r0, r3
    815e:	b280      	uxth	r0, r0
				break; // LDA - ZeroPage
    8160:	f7ff b9b1 	b.w	74c6 <loop+0x3f6>
    register_x = Fetch_ZeroPage();
    8164:	f7fa ff0e 	bl	2f84 <Fetch_ZeroPage()>
    8168:	4b93      	ldr	r3, [pc, #588]	; (83b8 <loop+0x12e8>)
    816a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    816c:	f7fa feea 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA6].length);
    8170:	4b8f      	ldr	r3, [pc, #572]	; (83b0 <loop+0x12e0>)
    8172:	f893 01e9 	ldrb.w	r0, [r3, #489]	; 0x1e9
    8176:	883b      	ldrh	r3, [r7, #0]
    8178:	4418      	add	r0, r3
    817a:	b280      	uxth	r0, r0
				break; // LDX - ZeroPage
    817c:	f7ff b9a3 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_ZeroPage();
    8180:	f7fa ff00 	bl	2f84 <Fetch_ZeroPage()>
    8184:	4a8b      	ldr	r2, [pc, #556]	; (83b4 <loop+0x12e4>)
    8186:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8188:	4a8b      	ldr	r2, [pc, #556]	; (83b8 <loop+0x12e8>)
    818a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    818c:	f7fa feda 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA7].length);
    8190:	4b87      	ldr	r3, [pc, #540]	; (83b0 <loop+0x12e0>)
    8192:	f893 021d 	ldrb.w	r0, [r3, #541]	; 0x21d
    8196:	883b      	ldrh	r3, [r7, #0]
    8198:	4418      	add	r0, r3
    819a:	b280      	uxth	r0, r0
				break; // LAX - ZeroPage
    819c:	f7ff b993 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    81a0:	8838      	ldrh	r0, [r7, #0]
    81a2:	2100      	movs	r1, #0
    81a4:	3001      	adds	r0, #1
    81a6:	b280      	uxth	r0, r0
    81a8:	f7fa fc04 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_a;
    81ac:	4b81      	ldr	r3, [pc, #516]	; (83b4 <loop+0x12e4>)
    81ae:	7818      	ldrb	r0, [r3, #0]
    81b0:	4b7e      	ldr	r3, [pc, #504]	; (83ac <loop+0x12dc>)
    81b2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    81b4:	f7fa fec6 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA8].length);
    81b8:	4b7d      	ldr	r3, [pc, #500]	; (83b0 <loop+0x12e0>)
    81ba:	f893 0251 	ldrb.w	r0, [r3, #593]	; 0x251
    81be:	883b      	ldrh	r3, [r7, #0]
    81c0:	4418      	add	r0, r3
    81c2:	b280      	uxth	r0, r0
				break; // TAY
    81c4:	f7ff b97f 	b.w	74c6 <loop+0x3f6>
    return read_byte(register_pc+offset, false);
    81c8:	8838      	ldrh	r0, [r7, #0]
    81ca:	2100      	movs	r1, #0
    81cc:	3001      	adds	r0, #1
    81ce:	b280      	uxth	r0, r0
    81d0:	f7fa fbf0 	bl	29b4 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    81d4:	4b77      	ldr	r3, [pc, #476]	; (83b4 <loop+0x12e4>)
    81d6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    81d8:	f7fa feb4 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA9].length);
    81dc:	4b74      	ldr	r3, [pc, #464]	; (83b0 <loop+0x12e0>)
    81de:	f893 0285 	ldrb.w	r0, [r3, #645]	; 0x285
    81e2:	883b      	ldrh	r3, [r7, #0]
    81e4:	4418      	add	r0, r3
    81e6:	b280      	uxth	r0, r0
				break; // LDA - Immediate
    81e8:	f7ff b96d 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    81ec:	8838      	ldrh	r0, [r7, #0]
    81ee:	2100      	movs	r1, #0
    81f0:	3001      	adds	r0, #1
    81f2:	b280      	uxth	r0, r0
    81f4:	f7fa fbde 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_a;
    81f8:	4b6e      	ldr	r3, [pc, #440]	; (83b4 <loop+0x12e4>)
    81fa:	7818      	ldrb	r0, [r3, #0]
    81fc:	4b6e      	ldr	r3, [pc, #440]	; (83b8 <loop+0x12e8>)
    81fe:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8200:	f7fa fea0 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAA].length);
    8204:	4b6a      	ldr	r3, [pc, #424]	; (83b0 <loop+0x12e0>)
    8206:	f893 02b9 	ldrb.w	r0, [r3, #697]	; 0x2b9
    820a:	883b      	ldrh	r3, [r7, #0]
    820c:	4418      	add	r0, r3
    820e:	b280      	uxth	r0, r0
				break; // TAX
    8210:	f7ff b959 	b.w	74c6 <loop+0x3f6>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    8214:	2001      	movs	r0, #1
    8216:	f7fa fea9 	bl	2f6c <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    821a:	4b65      	ldr	r3, [pc, #404]	; (83b0 <loop+0x12e0>)
    821c:	f893 02ed 	ldrb.w	r0, [r3, #749]	; 0x2ed
    8220:	883b      	ldrh	r3, [r7, #0]
    8222:	4418      	add	r0, r3
    8224:	b280      	uxth	r0, r0
				break; // LAX - Immediate
    8226:	f7ff b94e 	b.w	74c6 <loop+0x3f6>
    register_y = Fetch_Absolute();
    822a:	f7fa feff 	bl	302c <Fetch_Absolute()>
    822e:	4b5f      	ldr	r3, [pc, #380]	; (83ac <loop+0x12dc>)
    8230:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8232:	f7fa fe87 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAC].length);
    8236:	4b5e      	ldr	r3, [pc, #376]	; (83b0 <loop+0x12e0>)
    8238:	f893 0321 	ldrb.w	r0, [r3, #801]	; 0x321
    823c:	883b      	ldrh	r3, [r7, #0]
    823e:	4418      	add	r0, r3
    8240:	b280      	uxth	r0, r0
				break; // LDY - Absolute
    8242:	f7ff b940 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Absolute();
    8246:	f7fa fef1 	bl	302c <Fetch_Absolute()>
    824a:	4b5a      	ldr	r3, [pc, #360]	; (83b4 <loop+0x12e4>)
    824c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    824e:	f7fa fe79 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAD].length);
    8252:	4b57      	ldr	r3, [pc, #348]	; (83b0 <loop+0x12e0>)
    8254:	f893 0355 	ldrb.w	r0, [r3, #853]	; 0x355
    8258:	883b      	ldrh	r3, [r7, #0]
    825a:	4418      	add	r0, r3
    825c:	b280      	uxth	r0, r0
				break; // LDA - Absolute
    825e:	f7ff b932 	b.w	74c6 <loop+0x3f6>
    register_x = Fetch_Absolute();
    8262:	f7fa fee3 	bl	302c <Fetch_Absolute()>
    8266:	4b54      	ldr	r3, [pc, #336]	; (83b8 <loop+0x12e8>)
    8268:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    826a:	f7fa fe6b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAE].length);
    826e:	4b50      	ldr	r3, [pc, #320]	; (83b0 <loop+0x12e0>)
    8270:	f893 0389 	ldrb.w	r0, [r3, #905]	; 0x389
    8274:	883b      	ldrh	r3, [r7, #0]
    8276:	4418      	add	r0, r3
    8278:	b280      	uxth	r0, r0
				break; // LDX - Absolute
    827a:	f7ff b924 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Absolute();
    827e:	f7fa fed5 	bl	302c <Fetch_Absolute()>
    8282:	4a4c      	ldr	r2, [pc, #304]	; (83b4 <loop+0x12e4>)
    8284:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8286:	4a4c      	ldr	r2, [pc, #304]	; (83b8 <loop+0x12e8>)
    8288:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    828a:	f7fa fe5b 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAF].length);
    828e:	4b48      	ldr	r3, [pc, #288]	; (83b0 <loop+0x12e0>)
    8290:	f893 03bd 	ldrb.w	r0, [r3, #957]	; 0x3bd
    8294:	883b      	ldrh	r3, [r7, #0]
    8296:	4418      	add	r0, r3
    8298:	b280      	uxth	r0, r0
				break; // LAX - Absolute
    829a:	f7ff b914 	b.w	74c6 <loop+0x3f6>
    if ((flag_c) == 1) Branch_Taken();
    829e:	4b47      	ldr	r3, [pc, #284]	; (83bc <loop+0x12ec>)
    82a0:	7819      	ldrb	r1, [r3, #0]
    82a2:	f011 0101 	ands.w	r1, r1, #1
    82a6:	f000 8306 	beq.w	88b6 <loop+0x17e6>
    82aa:	f7fc fbbb 	bl	4a24 <Branch_Taken()>
    return(register_pc);
    82ae:	8838      	ldrh	r0, [r7, #0]
				break; // BCS - Branch on Carry Set
    82b0:	f7ff b909 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Indexed_Indirect_Y(1);
    82b4:	2001      	movs	r0, #1
    82b6:	f7fa ff5f 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    82ba:	4b3e      	ldr	r3, [pc, #248]	; (83b4 <loop+0x12e4>)
    82bc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82be:	f7fa fe41 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB1].length);
    82c2:	4b3b      	ldr	r3, [pc, #236]	; (83b0 <loop+0x12e0>)
    82c4:	f893 0425 	ldrb.w	r0, [r3, #1061]	; 0x425
    82c8:	883b      	ldrh	r3, [r7, #0]
    82ca:	4418      	add	r0, r3
    82cc:	b280      	uxth	r0, r0
				break; // LDA - Indirect Indexed  Y
    82ce:	f7ff b8fa 	b.w	74c6 <loop+0x3f6>
    register_x = Fetch_ZeroPage_Y();
    82d2:	f7fa fe8b 	bl	2fec <Fetch_ZeroPage_Y()>
    82d6:	4b38      	ldr	r3, [pc, #224]	; (83b8 <loop+0x12e8>)
    82d8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    82da:	f7fa fe33 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB6].length);
    82de:	4b34      	ldr	r3, [pc, #208]	; (83b0 <loop+0x12e0>)
    82e0:	f893 0529 	ldrb.w	r0, [r3, #1321]	; 0x529
    82e4:	883b      	ldrh	r3, [r7, #0]
    82e6:	4418      	add	r0, r3
    82e8:	b280      	uxth	r0, r0
				break; // LDX - ZeroPage , Y
    82ea:	f7ff b8ec 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_ZeroPage_Y();
    82ee:	f7fa fe7d 	bl	2fec <Fetch_ZeroPage_Y()>
    82f2:	4a30      	ldr	r2, [pc, #192]	; (83b4 <loop+0x12e4>)
    82f4:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    82f6:	4a30      	ldr	r2, [pc, #192]	; (83b8 <loop+0x12e8>)
    82f8:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82fa:	f7fa fe23 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB7].length);
    82fe:	4b2c      	ldr	r3, [pc, #176]	; (83b0 <loop+0x12e0>)
    8300:	f893 055d 	ldrb.w	r0, [r3, #1373]	; 0x55d
    8304:	883b      	ldrh	r3, [r7, #0]
    8306:	4418      	add	r0, r3
    8308:	b280      	uxth	r0, r0
				break; // LAX - ZeroPage , Y
    830a:	f7ff b8dc 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    830e:	8838      	ldrh	r0, [r7, #0]
    8310:	2100      	movs	r1, #0
    8312:	3001      	adds	r0, #1
    8314:	b280      	uxth	r0, r0
    8316:	f7fa fb4d 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xB8].length);
    831a:	4b25      	ldr	r3, [pc, #148]	; (83b0 <loop+0x12e0>)
    register_flags = register_flags & 0xBF;
    831c:	4a27      	ldr	r2, [pc, #156]	; (83bc <loop+0x12ec>)
    return(register_pc + opcode_info[0xB8].length);
    831e:	f893 0591 	ldrb.w	r0, [r3, #1425]	; 0x591
    register_flags = register_flags & 0xBF;
    8322:	7813      	ldrb	r3, [r2, #0]
    8324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8328:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    832a:	883b      	ldrh	r3, [r7, #0]
    832c:	4418      	add	r0, r3
    832e:	b280      	uxth	r0, r0
				break; // CLV
    8330:	f7ff b8c9 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Absolute_Y(1);
    8334:	2001      	movs	r0, #1
    8336:	f7fa fec5 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    833a:	4b1e      	ldr	r3, [pc, #120]	; (83b4 <loop+0x12e4>)
    833c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    833e:	f7fa fe01 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB9].length);
    8342:	4b1b      	ldr	r3, [pc, #108]	; (83b0 <loop+0x12e0>)
    8344:	f893 05c5 	ldrb.w	r0, [r3, #1477]	; 0x5c5
    8348:	883b      	ldrh	r3, [r7, #0]
    834a:	4418      	add	r0, r3
    834c:	b280      	uxth	r0, r0
				break; // LDA - Absolute , Y
    834e:	f7ff b8ba 	b.w	74c6 <loop+0x3f6>
    register_y = Fetch_ZeroPage_X();
    8352:	f7fa fe2b 	bl	2fac <Fetch_ZeroPage_X()>
    8356:	4b15      	ldr	r3, [pc, #84]	; (83ac <loop+0x12dc>)
    8358:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    835a:	f7fa fdf3 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB4].length);
    835e:	4b14      	ldr	r3, [pc, #80]	; (83b0 <loop+0x12e0>)
    8360:	f893 04c1 	ldrb.w	r0, [r3, #1217]	; 0x4c1
    8364:	883b      	ldrh	r3, [r7, #0]
    8366:	4418      	add	r0, r3
    8368:	b280      	uxth	r0, r0
				break; // LDY - ZeroPage , X
    836a:	f7ff b8ac 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_ZeroPage_X();
    836e:	f7fa fe1d 	bl	2fac <Fetch_ZeroPage_X()>
    8372:	4b10      	ldr	r3, [pc, #64]	; (83b4 <loop+0x12e4>)
    8374:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8376:	f7fa fde5 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB5].length);
    837a:	4b0d      	ldr	r3, [pc, #52]	; (83b0 <loop+0x12e0>)
    837c:	f893 04f5 	ldrb.w	r0, [r3, #1269]	; 0x4f5
    8380:	883b      	ldrh	r3, [r7, #0]
    8382:	4418      	add	r0, r3
    8384:	b280      	uxth	r0, r0
				break; // LDA - ZeroPage , X
    8386:	f7ff b89e 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Indexed_Indirect_Y(1);
    838a:	2001      	movs	r0, #1
    838c:	f7fa fef4 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    8390:	4a08      	ldr	r2, [pc, #32]	; (83b4 <loop+0x12e4>)
    8392:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8394:	4a08      	ldr	r2, [pc, #32]	; (83b8 <loop+0x12e8>)
    8396:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8398:	f7fa fdd4 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB3].length);
    839c:	4b04      	ldr	r3, [pc, #16]	; (83b0 <loop+0x12e0>)
    839e:	f893 048d 	ldrb.w	r0, [r3, #1165]	; 0x48d
    83a2:	883b      	ldrh	r3, [r7, #0]
    83a4:	4418      	add	r0, r3
    83a6:	b280      	uxth	r0, r0
				break; // LAX - Indirect Indexed  Y
    83a8:	f7ff b88d 	b.w	74c6 <loop+0x3f6>
    83ac:	200188ae 	.word	0x200188ae
    83b0:	20017418 	.word	0x20017418
    83b4:	200188ac 	.word	0x200188ac
    83b8:	200188ad 	.word	0x200188ad
    83bc:	20004aa0 	.word	0x20004aa0
    read_byte(register_pc+1, false);
    83c0:	8838      	ldrh	r0, [r7, #0]
    83c2:	2100      	movs	r1, #0
    83c4:	3001      	adds	r0, #1
    83c6:	b280      	uxth	r0, r0
    83c8:	f7fa faf4 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_sp;
    83cc:	4bcc      	ldr	r3, [pc, #816]	; (8700 <loop+0x1630>)
    83ce:	7818      	ldrb	r0, [r3, #0]
    83d0:	4bcc      	ldr	r3, [pc, #816]	; (8704 <loop+0x1634>)
    83d2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    83d4:	f7fa fdb6 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBA].length);
    83d8:	4bcb      	ldr	r3, [pc, #812]	; (8708 <loop+0x1638>)
    83da:	f893 05f9 	ldrb.w	r0, [r3, #1529]	; 0x5f9
    83de:	883b      	ldrh	r3, [r7, #0]
    83e0:	4418      	add	r0, r3
    83e2:	b280      	uxth	r0, r0
				break; // TSX
    83e4:	f7ff b86f 	b.w	74c6 <loop+0x3f6>
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83e8:	2001      	movs	r0, #1
    83ea:	f7fa fe6b 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    83ee:	4bc4      	ldr	r3, [pc, #784]	; (8700 <loop+0x1630>)
    register_a = register_sp;
    83f0:	49c6      	ldr	r1, [pc, #792]	; (870c <loop+0x163c>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83f2:	781c      	ldrb	r4, [r3, #0]
    register_x = register_sp;
    83f4:	4ac3      	ldr	r2, [pc, #780]	; (8704 <loop+0x1634>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    83f6:	4020      	ands	r0, r4
    83f8:	7018      	strb	r0, [r3, #0]
    register_a = register_sp;
    83fa:	7008      	strb	r0, [r1, #0]
    register_x = register_sp;
    83fc:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    83fe:	f7fa fda1 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBB].length);
    8402:	4bc1      	ldr	r3, [pc, #772]	; (8708 <loop+0x1638>)
    8404:	f893 062d 	ldrb.w	r0, [r3, #1581]	; 0x62d
    8408:	883b      	ldrh	r3, [r7, #0]
    840a:	4418      	add	r0, r3
    840c:	b280      	uxth	r0, r0
				break; // LAS - Absolute , Y
    840e:	f7ff b85a 	b.w	74c6 <loop+0x3f6>
    register_y = Fetch_Absolute_X(1);
    8412:	2001      	movs	r0, #1
    8414:	f7fa fe26 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    8418:	4bbd      	ldr	r3, [pc, #756]	; (8710 <loop+0x1640>)
    841a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    841c:	f7fa fd92 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBC].length);
    8420:	4bb9      	ldr	r3, [pc, #740]	; (8708 <loop+0x1638>)
    8422:	f893 0661 	ldrb.w	r0, [r3, #1633]	; 0x661
    8426:	883b      	ldrh	r3, [r7, #0]
    8428:	4418      	add	r0, r3
    842a:	b280      	uxth	r0, r0
				break; // LDY - Absolute , X
    842c:	f7ff b84b 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Absolute_X(1);
    8430:	2001      	movs	r0, #1
    8432:	f7fa fe17 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    8436:	4bb5      	ldr	r3, [pc, #724]	; (870c <loop+0x163c>)
    8438:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    843a:	f7fa fd83 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBD].length);
    843e:	4bb2      	ldr	r3, [pc, #712]	; (8708 <loop+0x1638>)
    8440:	f893 0695 	ldrb.w	r0, [r3, #1685]	; 0x695
    8444:	883b      	ldrh	r3, [r7, #0]
    8446:	4418      	add	r0, r3
    8448:	b280      	uxth	r0, r0
				break; // LDA - Absolute , X
    844a:	f7ff b83c 	b.w	74c6 <loop+0x3f6>
    register_x = Fetch_Absolute_Y(1);
    844e:	2001      	movs	r0, #1
    8450:	f7fa fe38 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    8454:	4bab      	ldr	r3, [pc, #684]	; (8704 <loop+0x1634>)
    8456:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8458:	f7fa fd74 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBE].length);
    845c:	4baa      	ldr	r3, [pc, #680]	; (8708 <loop+0x1638>)
    845e:	f893 06c9 	ldrb.w	r0, [r3, #1737]	; 0x6c9
    8462:	883b      	ldrh	r3, [r7, #0]
    8464:	4418      	add	r0, r3
    8466:	b280      	uxth	r0, r0
				break; // LDX - Absolute , Y
    8468:	f7ff b82d 	b.w	74c6 <loop+0x3f6>
    register_a = Fetch_Absolute_Y(1);
    846c:	2001      	movs	r0, #1
    846e:	f7fa fe29 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    8472:	4aa6      	ldr	r2, [pc, #664]	; (870c <loop+0x163c>)
    8474:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8476:	4aa3      	ldr	r2, [pc, #652]	; (8704 <loop+0x1634>)
    8478:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    847a:	f7fa fd63 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBF].length);
    847e:	4ba2      	ldr	r3, [pc, #648]	; (8708 <loop+0x1638>)
    8480:	f893 06fd 	ldrb.w	r0, [r3, #1789]	; 0x6fd
    8484:	883b      	ldrh	r3, [r7, #0]
    8486:	4418      	add	r0, r3
    8488:	b280      	uxth	r0, r0
				break; // LAX - Absolute , Y
    848a:	f7ff b81c 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC0();
    848e:	f7fb fe21 	bl	40d4 <opcode_0xC0()>
				break; // CPY - Immediate
    8492:	f7ff b818 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    8496:	f7fa fe45 	bl	3124 <Fetch_Indexed_Indirect_X()>
    849a:	f7fb fd63 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC1].length);
    849e:	4b9a      	ldr	r3, [pc, #616]	; (8708 <loop+0x1638>)
    84a0:	f893 0765 	ldrb.w	r0, [r3, #1893]	; 0x765
    84a4:	883b      	ldrh	r3, [r7, #0]
    84a6:	4418      	add	r0, r3
    84a8:	b280      	uxth	r0, r0
				break; // CMP - Indexed Indirect X
    84aa:	f7ff b80c 	b.w	74c6 <loop+0x3f6>
    Fetch_Immediate(1);
    84ae:	2001      	movs	r0, #1
    84b0:	f7fa fd5c 	bl	2f6c <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    84b4:	4b94      	ldr	r3, [pc, #592]	; (8708 <loop+0x1638>)
    84b6:	f893 0799 	ldrb.w	r0, [r3, #1945]	; 0x799
    84ba:	883b      	ldrh	r3, [r7, #0]
    84bc:	4418      	add	r0, r3
    84be:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    84c0:	f7ff b801 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC3();
    84c4:	f7fd fde2 	bl	608c <opcode_0xC3()>
				break; // DCP - Indexed Indirect X
    84c8:	f7fe bffd 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC4();
    84cc:	f7fb fe2a 	bl	4124 <opcode_0xC4()>
				break; // CPY - ZeroPage
    84d0:	f7fe bff9 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_ZeroPage());
    84d4:	f7fa fd56 	bl	2f84 <Fetch_ZeroPage()>
    84d8:	f7fb fd44 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC5].length);
    84dc:	4b8a      	ldr	r3, [pc, #552]	; (8708 <loop+0x1638>)
    84de:	f893 0835 	ldrb.w	r0, [r3, #2101]	; 0x835
    84e2:	883b      	ldrh	r3, [r7, #0]
    84e4:	4418      	add	r0, r3
    84e6:	b280      	uxth	r0, r0
				break; // CMP - ZeroPage
    84e8:	f7fe bfed 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC6();
    84ec:	f7fb ffa6 	bl	443c <opcode_0xC6()>
				break; // DEC - ZeroPage
    84f0:	f7fe bfe9 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC7();
    84f4:	f7fd fd50 	bl	5f98 <opcode_0xC7()>
				break; // DCP - ZeroPage
    84f8:	f7fe bfe5 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    84fc:	8838      	ldrh	r0, [r7, #0]
    84fe:	2100      	movs	r1, #0
    8500:	3001      	adds	r0, #1
    8502:	b280      	uxth	r0, r0
    8504:	f7fa fa56 	bl	29b4 <read_byte(unsigned short, bool)>
    register_y = register_y + 1;
    8508:	4b81      	ldr	r3, [pc, #516]	; (8710 <loop+0x1640>)
    850a:	7818      	ldrb	r0, [r3, #0]
    850c:	3001      	adds	r0, #1
    850e:	b2c0      	uxtb	r0, r0
    8510:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8512:	f7fa fd17 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC8].length);
    8516:	4b7c      	ldr	r3, [pc, #496]	; (8708 <loop+0x1638>)
    8518:	f893 08d1 	ldrb.w	r0, [r3, #2257]	; 0x8d1
    851c:	883b      	ldrh	r3, [r7, #0]
    851e:	4418      	add	r0, r3
    8520:	b280      	uxth	r0, r0
				break; // INY
    8522:	f7fe bfd0 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xC9();
    8526:	f7fb fd31 	bl	3f8c <opcode_0xC9()>
				break; // CMP - Immediate
    852a:	f7fe bfcc 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    852e:	8838      	ldrh	r0, [r7, #0]
    8530:	2100      	movs	r1, #0
    8532:	3001      	adds	r0, #1
    8534:	b280      	uxth	r0, r0
    8536:	f7fa fa3d 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_x - 1;
    853a:	4b72      	ldr	r3, [pc, #456]	; (8704 <loop+0x1634>)
    853c:	7818      	ldrb	r0, [r3, #0]
    853e:	3801      	subs	r0, #1
    8540:	b2c0      	uxtb	r0, r0
    8542:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8544:	f7fa fcfe 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCA].length);
    8548:	4b6f      	ldr	r3, [pc, #444]	; (8708 <loop+0x1638>)
    854a:	f893 0939 	ldrb.w	r0, [r3, #2361]	; 0x939
    854e:	883b      	ldrh	r3, [r7, #0]
    8550:	4418      	add	r0, r3
    8552:	b280      	uxth	r0, r0
				break; // DEX
    8554:	f7fe bfb7 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xCB();
    8558:	f7fe f86e 	bl	6638 <opcode_0xCB()>
				break; // SBX - Immediate
    855c:	f7fe bfb3 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xCC();
    8560:	f7fb fe10 	bl	4184 <opcode_0xCC()>
				break; // CPY - Absolute
    8564:	f7fe bfaf 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_Absolute());
    8568:	f7fa fd60 	bl	302c <Fetch_Absolute()>
    856c:	f7fb fcfa 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xCD].length);
    8570:	4b65      	ldr	r3, [pc, #404]	; (8708 <loop+0x1638>)
    8572:	f893 09d5 	ldrb.w	r0, [r3, #2517]	; 0x9d5
    8576:	883b      	ldrh	r3, [r7, #0]
    8578:	4418      	add	r0, r3
    857a:	b280      	uxth	r0, r0
				break; // CMP - Absolute
    857c:	f7fe bfa3 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xCE();
    8580:	f7fb ffac 	bl	44dc <opcode_0xCE()>
				break; // DEC - Absolute
    8584:	f7fe bf9f 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xCF();
    8588:	f7fd fdf2 	bl	6170 <opcode_0xCF()>
				break; // DCP - Absolute
    858c:	f7fe bf9b 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xD0();
    8590:	f7fc fb28 	bl	4be4 <opcode_0xD0()>
				break; // BNE - Branch on Zero Clear
    8594:	f7fe bf97 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    8598:	2001      	movs	r0, #1
    859a:	f7fa fded 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    859e:	f7fb fce1 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD1].length);
    85a2:	4b59      	ldr	r3, [pc, #356]	; (8708 <loop+0x1638>)
    85a4:	f893 0aa5 	ldrb.w	r0, [r3, #2725]	; 0xaa5
    85a8:	883b      	ldrh	r3, [r7, #0]
    85aa:	4418      	add	r0, r3
    85ac:	b280      	uxth	r0, r0
				break; // CMP - Indirect Indexed  Y
    85ae:	f7fe bf8a 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xD3();
    85b2:	f7fd fda3 	bl	60fc <opcode_0xD3()>
				break; // DCP - Indirect Indexed  Y
    85b6:	f7fe bf86 	b.w	74c6 <loop+0x3f6>
    Fetch_ZeroPage_X();
    85ba:	f7fa fcf7 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    85be:	4b52      	ldr	r3, [pc, #328]	; (8708 <loop+0x1638>)
    85c0:	f893 0b41 	ldrb.w	r0, [r3, #2881]	; 0xb41
    85c4:	883b      	ldrh	r3, [r7, #0]
    85c6:	4418      	add	r0, r3
    85c8:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    85ca:	f7fe bf7c 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_ZeroPage_X());
    85ce:	f7fa fced 	bl	2fac <Fetch_ZeroPage_X()>
    85d2:	f7fb fcc7 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD5].length);
    85d6:	4b4c      	ldr	r3, [pc, #304]	; (8708 <loop+0x1638>)
    85d8:	f893 0b75 	ldrb.w	r0, [r3, #2933]	; 0xb75
    85dc:	883b      	ldrh	r3, [r7, #0]
    85de:	4418      	add	r0, r3
    85e0:	b280      	uxth	r0, r0
				break; // CMP - ZeroPage , X
    85e2:	f7fe bf70 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xD6();
    85e6:	f7fb ff55 	bl	4494 <opcode_0xD6()>
				break; // DEC - ZeroPage , X
    85ea:	f7fe bf6c 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xD7();
    85ee:	f7fd fd15 	bl	601c <opcode_0xD7()>
				break; // DCP - ZeroPage , X
    85f2:	f7fe bf68 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    85f6:	8838      	ldrh	r0, [r7, #0]
    85f8:	2100      	movs	r1, #0
    85fa:	3001      	adds	r0, #1
    85fc:	b280      	uxth	r0, r0
    85fe:	f7fa f9d9 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xD8].length);
    8602:	4b41      	ldr	r3, [pc, #260]	; (8708 <loop+0x1638>)
    register_flags = register_flags & 0xF7;
    8604:	4a43      	ldr	r2, [pc, #268]	; (8714 <loop+0x1644>)
    return(register_pc + opcode_info[0xD8].length);
    8606:	f893 0c11 	ldrb.w	r0, [r3, #3089]	; 0xc11
    register_flags = register_flags & 0xF7;
    860a:	7813      	ldrb	r3, [r2, #0]
    860c:	f023 0308 	bic.w	r3, r3, #8
    8610:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    8612:	883b      	ldrh	r3, [r7, #0]
    8614:	4418      	add	r0, r3
    8616:	b280      	uxth	r0, r0
				break; // CLD
    8618:	f7fe bf55 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_Absolute_Y(1));
    861c:	2001      	movs	r0, #1
    861e:	f7fa fd51 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    8622:	f7fb fc9f 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD9].length);
    8626:	4b38      	ldr	r3, [pc, #224]	; (8708 <loop+0x1638>)
    8628:	f893 0c45 	ldrb.w	r0, [r3, #3141]	; 0xc45
    862c:	883b      	ldrh	r3, [r7, #0]
    862e:	4418      	add	r0, r3
    8630:	b280      	uxth	r0, r0
				break; // CMP - Absolute , Y
    8632:	f7fe bf48 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xDB();
    8636:	f7fd fe0d 	bl	6254 <opcode_0xDB()>
				break; // DCP - Absolute , Y
    863a:	f7fe bf44 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    863e:	2001      	movs	r0, #1
    8640:	f7fa fd10 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    8644:	4b30      	ldr	r3, [pc, #192]	; (8708 <loop+0x1638>)
    8646:	f893 0ce1 	ldrb.w	r0, [r3, #3297]	; 0xce1
    864a:	883b      	ldrh	r3, [r7, #0]
    864c:	4418      	add	r0, r3
    864e:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    8650:	f7fe bf39 	b.w	74c6 <loop+0x3f6>
    Calculate_CMP(Fetch_Absolute_X(1));
    8654:	2001      	movs	r0, #1
    8656:	f7fa fd05 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    865a:	f7fb fc83 	bl	3f64 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xDD].length);
    865e:	4b2a      	ldr	r3, [pc, #168]	; (8708 <loop+0x1638>)
    8660:	f893 0d15 	ldrb.w	r0, [r3, #3349]	; 0xd15
    8664:	883b      	ldrh	r3, [r7, #0]
    8666:	4418      	add	r0, r3
    8668:	b280      	uxth	r0, r0
				break; // CMP - Absolute , X
    866a:	f7fe bf2c 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xDE();
    866e:	f7fb ff59 	bl	4524 <opcode_0xDE()>
				break; // DEC - Absolute , X
    8672:	f7fe bf28 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xDF();
    8676:	f7fd fdb3 	bl	61e0 <opcode_0xDF()>
				break; // DCP - Absolute , X
    867a:	f7fe bf24 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xE0();
    867e:	f7fb fcad 	bl	3fdc <opcode_0xE0()>
				break; // CPX - Immediate
    8682:	f7fe bf20 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    8686:	f7fa fd4d 	bl	3124 <Fetch_Indexed_Indirect_X()>
    868a:	b280      	uxth	r0, r0
    868c:	f7fb fa8e 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    8690:	4b1d      	ldr	r3, [pc, #116]	; (8708 <loop+0x1638>)
    8692:	f893 0de5 	ldrb.w	r0, [r3, #3557]	; 0xde5
    8696:	883b      	ldrh	r3, [r7, #0]
    8698:	4418      	add	r0, r3
    869a:	b280      	uxth	r0, r0
				break; // SBC - Indexed Indirect X
    869c:	f7fe bf13 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xEC();
    86a0:	f7fb fcf4 	bl	408c <opcode_0xEC()>
				break; // CPX - Absolute
    86a4:	f7fe bf0f 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_Absolute());
    86a8:	f7fa fcc0 	bl	302c <Fetch_Absolute()>
    86ac:	b280      	uxth	r0, r0
    86ae:	f7fb fa7d 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    86b2:	4b19      	ldr	r3, [pc, #100]	; (8718 <loop+0x1648>)
    86b4:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
    86b8:	883b      	ldrh	r3, [r7, #0]
    86ba:	4418      	add	r0, r3
    86bc:	b280      	uxth	r0, r0
				break; // SBC - Absolute
    86be:	f7fe bf02 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xEE();
    86c2:	f7fb fe97 	bl	43f4 <opcode_0xEE()>
				break; // INC - Absolute
    86c6:	f7fe befe 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xEF();
    86ca:	f7fd fea1 	bl	6410 <opcode_0xEF()>
				break; // ISC - Absolute
    86ce:	f7fe befa 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xF0();
    86d2:	f7fc fa67 	bl	4ba4 <opcode_0xF0()>
				break; // BEQ - Branch on Zero Set
    86d6:	f7fe bef6 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    86da:	2001      	movs	r0, #1
    86dc:	f7fa fd4c 	bl	3178 <Fetch_Indexed_Indirect_Y(unsigned char)>
    86e0:	b280      	uxth	r0, r0
    86e2:	f7fb fa63 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    86e6:	4b0c      	ldr	r3, [pc, #48]	; (8718 <loop+0x1648>)
    86e8:	f893 0125 	ldrb.w	r0, [r3, #293]	; 0x125
    86ec:	883b      	ldrh	r3, [r7, #0]
    86ee:	4418      	add	r0, r3
    86f0:	b280      	uxth	r0, r0
				break; // SBC - Indirect Indexed  Y
    86f2:	f7fe bee8 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xF3();
    86f6:	f7fd fe63 	bl	63c0 <opcode_0xF3()>
				break; // ISC - Indirect Indexed  Y
    86fa:	f7fe bee4 	b.w	74c6 <loop+0x3f6>
    86fe:	bf00      	nop
    8700:	20004aa1 	.word	0x20004aa1
    8704:	200188ad 	.word	0x200188ad
    8708:	20017418 	.word	0x20017418
    870c:	200188ac 	.word	0x200188ac
    8710:	200188ae 	.word	0x200188ae
    8714:	20004aa0 	.word	0x20004aa0
    8718:	20018418 	.word	0x20018418
    Fetch_ZeroPage_X();
    871c:	f7fa fc46 	bl	2fac <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    8720:	4b74      	ldr	r3, [pc, #464]	; (88f4 <loop+0x1824>)
    8722:	f893 01c1 	ldrb.w	r0, [r3, #449]	; 0x1c1
    8726:	883b      	ldrh	r3, [r7, #0]
    8728:	4418      	add	r0, r3
    872a:	b280      	uxth	r0, r0
				break; // NOP - ZeroPage , X
    872c:	f7fe becb 	b.w	74c6 <loop+0x3f6>
    Fetch_Immediate(1);
    8730:	2001      	movs	r0, #1
    8732:	f7fa fc1b 	bl	2f6c <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    8736:	4b70      	ldr	r3, [pc, #448]	; (88f8 <loop+0x1828>)
    8738:	f893 0e19 	ldrb.w	r0, [r3, #3609]	; 0xe19
    873c:	883b      	ldrh	r3, [r7, #0]
    873e:	4418      	add	r0, r3
    8740:	b280      	uxth	r0, r0
				break; // NOP - Immediate
    8742:	f7fe bec0 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xE3();
    8746:	f7fd fe15 	bl	6374 <opcode_0xE3()>
				break; // ISC - Indexed Indirect X
    874a:	f7fe bebc 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xE4();
    874e:	f7fb fc6d 	bl	402c <opcode_0xE4()>
				break; // CPX - ZeroPage
    8752:	f7fe beb8 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_ZeroPage());
    8756:	f7fa fc15 	bl	2f84 <Fetch_ZeroPage()>
    875a:	b280      	uxth	r0, r0
    875c:	f7fb fa26 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    8760:	4b65      	ldr	r3, [pc, #404]	; (88f8 <loop+0x1828>)
    8762:	f893 0eb5 	ldrb.w	r0, [r3, #3765]	; 0xeb5
    8766:	883b      	ldrh	r3, [r7, #0]
    8768:	4418      	add	r0, r3
    876a:	b280      	uxth	r0, r0
				break; // SBC - ZeroPage
    876c:	f7fe beab 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xFF();
    8770:	f7fd fe74 	bl	645c <opcode_0xFF()>
				break; // 
    8774:	f7fe bea7 	b.w	74c6 <loop+0x3f6>
				irq_handler(0x1);
    8778:	2001      	movs	r0, #1
    877a:	f7fb f819 	bl	37b0 <irq_handler(unsigned char)>
		uint16_t next_pc = 0;
    877e:	2000      	movs	r0, #0
				break; // BRK - Break
    8780:	f7fe bea1 	b.w	74c6 <loop+0x3f6>
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    8784:	f7fa fcce 	bl	3124 <Fetch_Indexed_Indirect_X()>
    8788:	4b5c      	ldr	r3, [pc, #368]	; (88fc <loop+0x182c>)
    878a:	781a      	ldrb	r2, [r3, #0]
    878c:	4310      	orrs	r0, r2
    878e:	b2c0      	uxtb	r0, r0
    8790:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8792:	f7fa fbd7 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x01].length);
    8796:	4b5a      	ldr	r3, [pc, #360]	; (8900 <loop+0x1830>)
    8798:	f893 0065 	ldrb.w	r0, [r3, #101]	; 0x65
    879c:	883b      	ldrh	r3, [r7, #0]
    879e:	4418      	add	r0, r3
    87a0:	b280      	uxth	r0, r0
				break; // OR - Indexed Indirect X
    87a2:	f7fe be90 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_ZeroPage_X());
    87a6:	f7fa fc01 	bl	2fac <Fetch_ZeroPage_X()>
    87aa:	b280      	uxth	r0, r0
    87ac:	f7fb f9fe 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    87b0:	4b50      	ldr	r3, [pc, #320]	; (88f4 <loop+0x1824>)
    87b2:	f893 01f5 	ldrb.w	r0, [r3, #501]	; 0x1f5
    87b6:	883b      	ldrh	r3, [r7, #0]
    87b8:	4418      	add	r0, r3
    87ba:	b280      	uxth	r0, r0
				break; // SBC - ZeroPage , X
    87bc:	f7fe be83 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xF6();
    87c0:	f7fb fdf4 	bl	43ac <opcode_0xF6()>
				break; // INC - ZeroPage , X
    87c4:	f7fe be7f 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xF7();
    87c8:	f7fd fdae 	bl	6328 <opcode_0xF7()>
				break; // ISC - ZeroPage , X
    87cc:	f7fe be7b 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    87d0:	8838      	ldrh	r0, [r7, #0]
    87d2:	2100      	movs	r1, #0
    87d4:	3001      	adds	r0, #1
    87d6:	b280      	uxth	r0, r0
    87d8:	f7fa f8ec 	bl	29b4 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xF8].length);
    87dc:	4b45      	ldr	r3, [pc, #276]	; (88f4 <loop+0x1824>)
    register_flags = register_flags | 0x08;
    87de:	4a49      	ldr	r2, [pc, #292]	; (8904 <loop+0x1834>)
    return(register_pc + opcode_info[0xF8].length);
    87e0:	f893 0291 	ldrb.w	r0, [r3, #657]	; 0x291
    register_flags = register_flags | 0x08;
    87e4:	7813      	ldrb	r3, [r2, #0]
    87e6:	f043 0308 	orr.w	r3, r3, #8
    87ea:	7013      	strb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    87ec:	883b      	ldrh	r3, [r7, #0]
    87ee:	4418      	add	r0, r3
    87f0:	b280      	uxth	r0, r0
				break; // SED
    87f2:	f7fe be68 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_Absolute_Y(1));
    87f6:	2001      	movs	r0, #1
    87f8:	f7fa fc64 	bl	30c4 <Fetch_Absolute_Y(unsigned char)>
    87fc:	b280      	uxth	r0, r0
    87fe:	f7fb f9d5 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    8802:	4b3c      	ldr	r3, [pc, #240]	; (88f4 <loop+0x1824>)
    8804:	f893 02c5 	ldrb.w	r0, [r3, #709]	; 0x2c5
    8808:	883b      	ldrh	r3, [r7, #0]
    880a:	4418      	add	r0, r3
    880c:	b280      	uxth	r0, r0
				break; // SBC - Absolute , Y
    880e:	f7fe be5a 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xFB();
    8812:	f7fd fe4b 	bl	64ac <opcode_0xFB()>
				break; // ISC - Absolute , Y
    8816:	f7fe be56 	b.w	74c6 <loop+0x3f6>
    Fetch_Absolute_X(1);
    881a:	2001      	movs	r0, #1
    881c:	f7fa fc22 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    8820:	4b34      	ldr	r3, [pc, #208]	; (88f4 <loop+0x1824>)
    8822:	f893 0361 	ldrb.w	r0, [r3, #865]	; 0x361
    8826:	883b      	ldrh	r3, [r7, #0]
    8828:	4418      	add	r0, r3
    882a:	b280      	uxth	r0, r0
				break; // NOP - Absolute , X
    882c:	f7fe be4b 	b.w	74c6 <loop+0x3f6>
    Calculate_SBC(Fetch_Absolute_X(1));
    8830:	2001      	movs	r0, #1
    8832:	f7fa fc17 	bl	3064 <Fetch_Absolute_X(unsigned char)>
    8836:	b280      	uxth	r0, r0
    8838:	f7fb f9b8 	bl	3bac <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    883c:	4b2d      	ldr	r3, [pc, #180]	; (88f4 <loop+0x1824>)
    883e:	f893 0395 	ldrb.w	r0, [r3, #917]	; 0x395
    8842:	883b      	ldrh	r3, [r7, #0]
    8844:	4418      	add	r0, r3
    8846:	b280      	uxth	r0, r0
				break; // SBC - Absolute , X
    8848:	f7fe be3d 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xE6();
    884c:	f7fb fd82 	bl	4354 <opcode_0xE6()>
				break; // INC - ZeroPage
    8850:	f7fe be39 	b.w	74c6 <loop+0x3f6>
				next_pc = opcode_0xE7();
    8854:	f7fd fd38 	bl	62c8 <opcode_0xE7()>
				break; // ISC - ZeroPage
    8858:	f7fe be35 	b.w	74c6 <loop+0x3f6>
    read_byte(register_pc+1, false);
    885c:	8838      	ldrh	r0, [r7, #0]
    885e:	2100      	movs	r1, #0
    8860:	3001      	adds	r0, #1
    8862:	b280      	uxth	r0, r0
    8864:	f7fa f8a6 	bl	29b4 <read_byte(unsigned short, bool)>
    register_x = register_x + 1;
    8868:	4b27      	ldr	r3, [pc, #156]	; (8908 <loop+0x1838>)
    886a:	7818      	ldrb	r0, [r3, #0]
    886c:	3001      	adds	r0, #1
    886e:	b2c0      	uxtb	r0, r0
    8870:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8872:	f7fa fb67 	bl	2f44 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xE8].length);
    8876:	4b20      	ldr	r3, [pc, #128]	; (88f8 <loop+0x1828>)
    8878:	f893 0f51 	ldrb.w	r0, [r3, #3921]	; 0xf51
    887c:	883b      	ldrh	r3, [r7, #0]
    887e:	4418      	add	r0, r3
    8880:	b280      	uxth	r0, r0
				break; // INX
    8882:	f7fe be20 	b.w	74c6 <loop+0x3f6>
				Serial.println("ERROR: Illegal instruction");
    8886:	4821      	ldr	r0, [pc, #132]	; (890c <loop+0x183c>)
    8888:	4921      	ldr	r1, [pc, #132]	; (8910 <loop+0x1840>)
    888a:	f7f7 fc1f 	bl	cc <Print::println(char const*) [clone .isra.0]>
				run_mode = WAITING;
    888e:	f04f 0300 	mov.w	r3, #0
		uint16_t next_pc = 0;
    8892:	2000      	movs	r0, #0
				run_mode = WAITING;
    8894:	702b      	strb	r3, [r5, #0]
        if (run_mode == SINGLE_STEP)
    8896:	f7fe be1f 	b.w	74d8 <loop+0x408>
        register_pc = register_pc + opcode_info[0x90].length;
    889a:	4b1e      	ldr	r3, [pc, #120]	; (8914 <loop+0x1844>)
    return read_byte(register_pc+offset, false);
    889c:	2100      	movs	r1, #0
    889e:	883a      	ldrh	r2, [r7, #0]
    88a0:	f893 3d71 	ldrb.w	r3, [r3, #3441]	; 0xd71
    88a4:	4413      	add	r3, r2
    88a6:	b29b      	uxth	r3, r3
    88a8:	803b      	strh	r3, [r7, #0]
    88aa:	3301      	adds	r3, #1
    88ac:	b298      	uxth	r0, r3
    88ae:	f7fa f881 	bl	29b4 <read_byte(unsigned short, bool)>
    88b2:	f7ff bb33 	b.w	7f1c <loop+0xe4c>
        register_pc = register_pc + opcode_info[0xB0].length;
    88b6:	4b10      	ldr	r3, [pc, #64]	; (88f8 <loop+0x1828>)
    88b8:	883a      	ldrh	r2, [r7, #0]
    88ba:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
    88be:	4413      	add	r3, r2
    88c0:	b29b      	uxth	r3, r3
    88c2:	803b      	strh	r3, [r7, #0]
    88c4:	3301      	adds	r3, #1
    88c6:	b298      	uxth	r0, r3
    88c8:	f7fa f874 	bl	29b4 <read_byte(unsigned short, bool)>
    88cc:	e4ef      	b.n	82ae <loop+0x11de>
        register_pc = register_pc + opcode_info[0x10].length;
    88ce:	4b0c      	ldr	r3, [pc, #48]	; (8900 <loop+0x1830>)
    88d0:	2100      	movs	r1, #0
    88d2:	883a      	ldrh	r2, [r7, #0]
    88d4:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
    88d8:	4413      	add	r3, r2
    88da:	b29b      	uxth	r3, r3
    88dc:	803b      	strh	r3, [r7, #0]
    88de:	3301      	adds	r3, #1
    88e0:	b298      	uxth	r0, r3
    88e2:	f7fa f867 	bl	29b4 <read_byte(unsigned short, bool)>
    88e6:	f7fe beed 	b.w	76c4 <loop+0x5f4>
    if ((flag_n) == 1) Branch_Taken();
    88ea:	f7fc f89b 	bl	4a24 <Branch_Taken()>
    88ee:	f7fe bfe0 	b.w	78b2 <loop+0x7e2>
    88f2:	bf00      	nop
    88f4:	20018418 	.word	0x20018418
    88f8:	20017418 	.word	0x20017418
    88fc:	200188ac 	.word	0x200188ac
    8900:	20015418 	.word	0x20015418
    8904:	20004aa0 	.word	0x20004aa0
    8908:	200188ad 	.word	0x200188ad
    890c:	20004490 	.word	0x20004490
    8910:	2000118c 	.word	0x2000118c
    8914:	20016418 	.word	0x20016418

00008918 <_GLOBAL__sub_I_opcode_info>:
}
    8918:	b538      	push	{r3, r4, r5, lr}
    891a:	4c12      	ldr	r4, [pc, #72]	; (8964 <_GLOBAL__sub_I_opcode_info+0x4c>)
    891c:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    8920:	2100      	movs	r1, #0
    8922:	4620      	mov	r0, r4
    8924:	f000 f8e6 	bl	8af4 <String::String(char const*)>
    8928:	2100      	movs	r1, #0
    892a:	f104 0010 	add.w	r0, r4, #16
    892e:	f000 f8e1 	bl	8af4 <String::String(char const*)>
    8932:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    8936:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    8938:	2100      	movs	r1, #0
    893a:	f000 f8db 	bl	8af4 <String::String(char const*)>
OpDecoder opcode_info[256];
    893e:	42ac      	cmp	r4, r5
    8940:	d1ee      	bne.n	8920 <_GLOBAL__sub_I_opcode_info+0x8>
    8942:	4a09      	ldr	r2, [pc, #36]	; (8968 <_GLOBAL__sub_I_opcode_info+0x50>)
    8944:	2000      	movs	r0, #0
    8946:	4909      	ldr	r1, [pc, #36]	; (896c <_GLOBAL__sub_I_opcode_info+0x54>)
    8948:	f002 f8e2 	bl	ab10 <__aeabi_atexit>
String last_command = "";
    894c:	4908      	ldr	r1, [pc, #32]	; (8970 <_GLOBAL__sub_I_opcode_info+0x58>)
    894e:	4809      	ldr	r0, [pc, #36]	; (8974 <_GLOBAL__sub_I_opcode_info+0x5c>)
    8950:	f000 f8d0 	bl	8af4 <String::String(char const*)>
    8954:	4a04      	ldr	r2, [pc, #16]	; (8968 <_GLOBAL__sub_I_opcode_info+0x50>)
    8956:	4908      	ldr	r1, [pc, #32]	; (8978 <_GLOBAL__sub_I_opcode_info+0x60>)
    8958:	4806      	ldr	r0, [pc, #24]	; (8974 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    895a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    895e:	f002 b8d7 	b.w	ab10 <__aeabi_atexit>
    8962:	bf00      	nop
    8964:	20015418 	.word	0x20015418
    8968:	200044a8 	.word	0x200044a8
    896c:	0000009d 	.word	0x0000009d
    8970:	200007d4 	.word	0x200007d4
    8974:	200153f0 	.word	0x200153f0
    8978:	00008a7d 	.word	0x00008a7d

0000897c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    897c:	4608      	mov	r0, r1
    897e:	f001 bcdb 	b.w	a338 <usb_serial_putchar>
    8982:	bf00      	nop

00008984 <Print::print(String const&)>:
{
    8984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    8988:	688c      	ldr	r4, [r1, #8]
    898a:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    898c:	b1dc      	cbz	r4, 89c6 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    898e:	2500      	movs	r5, #0
    8990:	4688      	mov	r8, r1
    8992:	4606      	mov	r6, r0
	size_t count = 0;
    8994:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8996:	462b      	mov	r3, r5
    8998:	2221      	movs	r2, #33	; 0x21
    899a:	a901      	add	r1, sp, #4
    899c:	4640      	mov	r0, r8
    899e:	f000 f9a7 	bl	8cf0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    89a2:	2c20      	cmp	r4, #32
    89a4:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    89a6:	6833      	ldr	r3, [r6, #0]
    89a8:	bf28      	it	cs
    89aa:	2220      	movcs	r2, #32
    89ac:	a901      	add	r1, sp, #4
    89ae:	4630      	mov	r0, r6
    89b0:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    89b2:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    89b4:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    89b6:	4798      	blx	r3
    89b8:	4407      	add	r7, r0
	while (len > 0) {
    89ba:	2c00      	cmp	r4, #0
    89bc:	d1eb      	bne.n	8996 <Print::print(String const&)+0x12>
}
    89be:	4638      	mov	r0, r7
    89c0:	b00a      	add	sp, #40	; 0x28
    89c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    89c6:	4627      	mov	r7, r4
}
    89c8:	4638      	mov	r0, r7
    89ca:	b00a      	add	sp, #40	; 0x28
    89cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000089d0 <Print::println()>:
{
    89d0:	b500      	push	{lr}
	return write(buf, 2);
    89d2:	6803      	ldr	r3, [r0, #0]
{
    89d4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    89d6:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    89da:	2202      	movs	r2, #2
    89dc:	a901      	add	r1, sp, #4
    89de:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    89e0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    89e4:	4798      	blx	r3
}
    89e6:	b003      	add	sp, #12
    89e8:	f85d fb04 	ldr.w	pc, [sp], #4

000089ec <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    89ec:	4b05      	ldr	r3, [pc, #20]	; (8a04 <_write+0x18>)
    89ee:	2802      	cmp	r0, #2
    89f0:	bf88      	it	hi
    89f2:	4603      	movhi	r3, r0
{
    89f4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    89f6:	681c      	ldr	r4, [r3, #0]
    89f8:	4618      	mov	r0, r3
    89fa:	6863      	ldr	r3, [r4, #4]
}
    89fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8a00:	4718      	bx	r3
    8a02:	bf00      	nop
    8a04:	20004490 	.word	0x20004490

00008a08 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    8a08:	f001 bc86 	b.w	a318 <usb_serial_getchar>

00008a0c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    8a0c:	f001 bc1e 	b.w	a24c <usb_serial_peekchar>

00008a10 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    8a10:	6081      	str	r1, [r0, #8]
}
    8a12:	4770      	bx	lr

00008a14 <String::String(String const&)>:
String::String(const String &value)
    8a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    8a16:	4288      	cmp	r0, r1
	buffer = NULL;
    8a18:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    8a1c:	4604      	mov	r4, r0
	len = 0;
    8a1e:	6085      	str	r5, [r0, #8]
	flags = 0;
    8a20:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    8a22:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    8a26:	d002      	beq.n	8a2e <String::String(String const&)+0x1a>
    8a28:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    8a2a:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    8a2c:	b90e      	cbnz	r6, 8a32 <String::String(String const&)+0x1e>
}
    8a2e:	4620      	mov	r0, r4
    8a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8a32:	1c70      	adds	r0, r6, #1
    8a34:	f002 f88c 	bl	ab50 <malloc>
	if (newbuffer) {
    8a38:	2800      	cmp	r0, #0
    8a3a:	d0f8      	beq.n	8a2e <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    8a3c:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    8a3e:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    8a40:	6020      	str	r0, [r4, #0]
	len = length;
    8a42:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    8a46:	f003 fbd9 	bl	c1fc <strcpy>
}
    8a4a:	4620      	mov	r0, r4
    8a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a4e:	bf00      	nop

00008a50 <String::String(String&&)>:
	buffer = NULL;
    8a50:	2300      	movs	r3, #0
	if (&rhs == this) return;
    8a52:	4288      	cmp	r0, r1
	capacity = 0;
    8a54:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8a58:	6083      	str	r3, [r0, #8]
	flags = 0;
    8a5a:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    8a5c:	d00c      	beq.n	8a78 <String::String(String&&)+0x28>
String::String(String &&rval)
    8a5e:	b410      	push	{r4}
	capacity = rhs.capacity;
    8a60:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    8a64:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    8a68:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    8a6c:	688a      	ldr	r2, [r1, #8]
}
    8a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    8a72:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    8a74:	6082      	str	r2, [r0, #8]
}
    8a76:	4770      	bx	lr
    8a78:	4770      	bx	lr
    8a7a:	bf00      	nop

00008a7c <String::~String()>:
String::~String()
    8a7c:	b510      	push	{r4, lr}
    8a7e:	4604      	mov	r4, r0
	free(buffer);
    8a80:	6800      	ldr	r0, [r0, #0]
    8a82:	f002 f86d 	bl	ab60 <free>
}
    8a86:	4620      	mov	r0, r4
    8a88:	bd10      	pop	{r4, pc}
    8a8a:	bf00      	nop

00008a8c <String::copy(char const*, unsigned int)>:
{
    8a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a8e:	4604      	mov	r4, r0
	if (length == 0) {
    8a90:	4615      	mov	r5, r2
    8a92:	b932      	cbnz	r2, 8aa2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8a94:	6803      	ldr	r3, [r0, #0]
    8a96:	b103      	cbz	r3, 8a9a <String::copy(char const*, unsigned int)+0xe>
    8a98:	701a      	strb	r2, [r3, #0]
		len = 0;
    8a9a:	2300      	movs	r3, #0
}
    8a9c:	4620      	mov	r0, r4
		len = 0;
    8a9e:	60a3      	str	r3, [r4, #8]
}
    8aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8aa2:	6843      	ldr	r3, [r0, #4]
    8aa4:	460e      	mov	r6, r1
    8aa6:	429a      	cmp	r2, r3
    8aa8:	d91c      	bls.n	8ae4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8aaa:	1c51      	adds	r1, r2, #1
    8aac:	6800      	ldr	r0, [r0, #0]
    8aae:	f002 fb1b 	bl	b0e8 <realloc>
	if (newbuffer) {
    8ab2:	4607      	mov	r7, r0
    8ab4:	b160      	cbz	r0, 8ad0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8ab6:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8ab8:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    8abc:	b90b      	cbnz	r3, 8ac2 <String::copy(char const*, unsigned int)+0x36>
    8abe:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    8ac0:	6827      	ldr	r7, [r4, #0]
    8ac2:	4631      	mov	r1, r6
    8ac4:	4638      	mov	r0, r7
	len = length;
    8ac6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8ac8:	f003 fb98 	bl	c1fc <strcpy>
}
    8acc:	4620      	mov	r0, r4
    8ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    8ad0:	6820      	ldr	r0, [r4, #0]
    8ad2:	b110      	cbz	r0, 8ada <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    8ad4:	f002 f844 	bl	ab60 <free>
			buffer = NULL;
    8ad8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    8ada:	2300      	movs	r3, #0
}
    8adc:	4620      	mov	r0, r4
		len = capacity = 0;
    8ade:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    8ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    8ae4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    8ae6:	4631      	mov	r1, r6
	len = length;
    8ae8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8aea:	4638      	mov	r0, r7
    8aec:	f003 fb86 	bl	c1fc <strcpy>
	return *this;
    8af0:	e7ec      	b.n	8acc <String::copy(char const*, unsigned int)+0x40>
    8af2:	bf00      	nop

00008af4 <String::String(char const*)>:
String::String(const char *cstr)
    8af4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    8af6:	2300      	movs	r3, #0
String::String(const char *cstr)
    8af8:	4604      	mov	r4, r0
	capacity = 0;
    8afa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8afe:	6083      	str	r3, [r0, #8]
	flags = 0;
    8b00:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    8b02:	b141      	cbz	r1, 8b16 <String::String(char const*)+0x22>
    8b04:	460d      	mov	r5, r1
    8b06:	4608      	mov	r0, r1
    8b08:	f003 fbda 	bl	c2c0 <strlen>
    8b0c:	4602      	mov	r2, r0
    8b0e:	4629      	mov	r1, r5
    8b10:	4620      	mov	r0, r4
    8b12:	f7ff ffbb 	bl	8a8c <String::copy(char const*, unsigned int)>
}
    8b16:	4620      	mov	r0, r4
    8b18:	bd38      	pop	{r3, r4, r5, pc}
    8b1a:	bf00      	nop

00008b1c <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    8b1c:	b510      	push	{r4, lr}
	buffer = NULL;
    8b1e:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    8b20:	b08a      	sub	sp, #40	; 0x28
    8b22:	4604      	mov	r4, r0
	itoa(value, buf, base);
    8b24:	4608      	mov	r0, r1
    8b26:	a901      	add	r1, sp, #4
	len = 0;
    8b28:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8b2a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8b2c:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    8b30:	f001 fff8 	bl	ab24 <itoa>
		copy(cstr, strlen(cstr));
    8b34:	a801      	add	r0, sp, #4
    8b36:	f003 fbc3 	bl	c2c0 <strlen>
    8b3a:	a901      	add	r1, sp, #4
    8b3c:	4602      	mov	r2, r0
    8b3e:	4620      	mov	r0, r4
    8b40:	f7ff ffa4 	bl	8a8c <String::copy(char const*, unsigned int)>
}
    8b44:	4620      	mov	r0, r4
    8b46:	b00a      	add	sp, #40	; 0x28
    8b48:	bd10      	pop	{r4, pc}
    8b4a:	bf00      	nop

00008b4c <String::String(unsigned int, unsigned char)>:
String::String(unsigned int value, unsigned char base)
    8b4c:	b510      	push	{r4, lr}
	buffer = NULL;
    8b4e:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
    8b50:	b08a      	sub	sp, #40	; 0x28
    8b52:	4604      	mov	r4, r0
  	utoa(value, buf, base);
    8b54:	4608      	mov	r0, r1
    8b56:	a901      	add	r1, sp, #4
	len = 0;
    8b58:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8b5a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8b5c:	e9c4 3300 	strd	r3, r3, [r4]
  	utoa(value, buf, base);
    8b60:	f002 fe66 	bl	b830 <utoa>
		copy(cstr, strlen(cstr));
    8b64:	a801      	add	r0, sp, #4
    8b66:	f003 fbab 	bl	c2c0 <strlen>
    8b6a:	a901      	add	r1, sp, #4
    8b6c:	4602      	mov	r2, r0
    8b6e:	4620      	mov	r0, r4
    8b70:	f7ff ff8c 	bl	8a8c <String::copy(char const*, unsigned int)>
}
    8b74:	4620      	mov	r0, r4
    8b76:	b00a      	add	sp, #40	; 0x28
    8b78:	bd10      	pop	{r4, pc}
    8b7a:	bf00      	nop

00008b7c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    8b7c:	4281      	cmp	r1, r0
    8b7e:	d003      	beq.n	8b88 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    8b80:	688a      	ldr	r2, [r1, #8]
    8b82:	6809      	ldr	r1, [r1, #0]
    8b84:	f7ff bf82 	b.w	8a8c <String::copy(char const*, unsigned int)>
}
    8b88:	4770      	bx	lr
    8b8a:	bf00      	nop

00008b8c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    8b8c:	4288      	cmp	r0, r1
{
    8b8e:	b538      	push	{r3, r4, r5, lr}
    8b90:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    8b92:	d00e      	beq.n	8bb2 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    8b94:	6800      	ldr	r0, [r0, #0]
    8b96:	460c      	mov	r4, r1
    8b98:	b108      	cbz	r0, 8b9e <String::operator=(String&&)+0x12>
    8b9a:	f001 ffe1 	bl	ab60 <free>
	len = rhs.len;
    8b9e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    8ba0:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    8ba2:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    8ba6:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    8ba8:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    8bac:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    8bb0:	60a3      	str	r3, [r4, #8]
}
    8bb2:	4628      	mov	r0, r5
    8bb4:	bd38      	pop	{r3, r4, r5, pc}
    8bb6:	bf00      	nop

00008bb8 <String::operator=(char const*)>:
{
    8bb8:	b538      	push	{r3, r4, r5, lr}
    8bba:	4605      	mov	r5, r0
	if (cstr) {
    8bbc:	460c      	mov	r4, r1
    8bbe:	b149      	cbz	r1, 8bd4 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    8bc0:	4608      	mov	r0, r1
    8bc2:	f003 fb7d 	bl	c2c0 <strlen>
    8bc6:	4621      	mov	r1, r4
    8bc8:	4602      	mov	r2, r0
    8bca:	4628      	mov	r0, r5
    8bcc:	f7ff ff5e 	bl	8a8c <String::copy(char const*, unsigned int)>
}
    8bd0:	4628      	mov	r0, r5
    8bd2:	bd38      	pop	{r3, r4, r5, pc}
    8bd4:	4628      	mov	r0, r5
		len = 0;
    8bd6:	60a9      	str	r1, [r5, #8]
}
    8bd8:	bd38      	pop	{r3, r4, r5, pc}
    8bda:	bf00      	nop

00008bdc <String::append(char const*, unsigned int)>:
{
    8bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8be0:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8be2:	6800      	ldr	r0, [r0, #0]
{
    8be4:	460d      	mov	r5, r1
    8be6:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8be8:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    8bea:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8bec:	d809      	bhi.n	8c02 <String::append(char const*, unsigned int)+0x26>
    8bee:	18c2      	adds	r2, r0, r3
    8bf0:	4291      	cmp	r1, r2
    8bf2:	d206      	bcs.n	8c02 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    8bf4:	1a0f      	subs	r7, r1, r0
		self = true;
    8bf6:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    8bfa:	b936      	cbnz	r6, 8c0a <String::append(char const*, unsigned int)+0x2e>
}
    8bfc:	4620      	mov	r0, r4
    8bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    8c02:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    8c06:	2e00      	cmp	r6, #0
    8c08:	d0f8      	beq.n	8bfc <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    8c0a:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    8c0e:	6862      	ldr	r2, [r4, #4]
    8c10:	4590      	cmp	r8, r2
    8c12:	d90c      	bls.n	8c2e <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8c14:	f108 0101 	add.w	r1, r8, #1
    8c18:	f002 fa66 	bl	b0e8 <realloc>
	if (newbuffer) {
    8c1c:	2800      	cmp	r0, #0
    8c1e:	d0ed      	beq.n	8bfc <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    8c20:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8c22:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    8c26:	b913      	cbnz	r3, 8c2e <String::append(char const*, unsigned int)+0x52>
    8c28:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    8c2a:	6820      	ldr	r0, [r4, #0]
    8c2c:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    8c2e:	f1b9 0f00 	cmp.w	r9, #0
    8c32:	d108      	bne.n	8c46 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    8c34:	4629      	mov	r1, r5
    8c36:	4418      	add	r0, r3
    8c38:	f003 fae0 	bl	c1fc <strcpy>
}
    8c3c:	4620      	mov	r0, r4
	len = newlen;
    8c3e:	f8c4 8008 	str.w	r8, [r4, #8]
}
    8c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    8c46:	4632      	mov	r2, r6
    8c48:	19c1      	adds	r1, r0, r7
    8c4a:	4418      	add	r0, r3
    8c4c:	f000 f9ca 	bl	8fe4 <memcpy>
		buffer[newlen] = 0;
    8c50:	6823      	ldr	r3, [r4, #0]
    8c52:	2200      	movs	r2, #0
    8c54:	f803 2008 	strb.w	r2, [r3, r8]
    8c58:	e7f0      	b.n	8c3c <String::append(char const*, unsigned int)+0x60>
    8c5a:	bf00      	nop

00008c5c <String::append(char)>:
{
    8c5c:	b510      	push	{r4, lr}
    8c5e:	b082      	sub	sp, #8
	buf[1] = 0;
    8c60:	2300      	movs	r3, #0
{
    8c62:	4604      	mov	r4, r0
	append(buf, 1);
    8c64:	2201      	movs	r2, #1
	buf[0] = c;
    8c66:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    8c6a:	a901      	add	r1, sp, #4
	buf[1] = 0;
    8c6c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    8c70:	f7ff ffb4 	bl	8bdc <String::append(char const*, unsigned int)>
}
    8c74:	4620      	mov	r0, r4
    8c76:	b002      	add	sp, #8
    8c78:	bd10      	pop	{r4, pc}
    8c7a:	bf00      	nop

00008c7c <operator+(StringSumHelper const&, String const&)>:
{
    8c7c:	b510      	push	{r4, lr}
    8c7e:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    8c80:	688a      	ldr	r2, [r1, #8]
    8c82:	6809      	ldr	r1, [r1, #0]
    8c84:	f7ff ffaa 	bl	8bdc <String::append(char const*, unsigned int)>
}
    8c88:	4620      	mov	r0, r4
    8c8a:	bd10      	pop	{r4, pc}

00008c8c <operator+(StringSumHelper const&, char const*)>:
{
    8c8c:	b538      	push	{r3, r4, r5, lr}
    8c8e:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    8c90:	b141      	cbz	r1, 8ca4 <operator+(StringSumHelper const&, char const*)+0x18>
    8c92:	460c      	mov	r4, r1
    8c94:	4608      	mov	r0, r1
    8c96:	f003 fb13 	bl	c2c0 <strlen>
    8c9a:	4602      	mov	r2, r0
    8c9c:	4621      	mov	r1, r4
    8c9e:	4628      	mov	r0, r5
    8ca0:	f7ff ff9c 	bl	8bdc <String::append(char const*, unsigned int)>
}
    8ca4:	4628      	mov	r0, r5
    8ca6:	bd38      	pop	{r3, r4, r5, pc}

00008ca8 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8ca8:	6882      	ldr	r2, [r0, #8]
{
    8caa:	b508      	push	{r3, lr}
    8cac:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8cae:	b13a      	cbz	r2, 8cc0 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    8cb0:	b161      	cbz	r1, 8ccc <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    8cb2:	6800      	ldr	r0, [r0, #0]
    8cb4:	f003 f938 	bl	bf28 <strcmp>
    8cb8:	fab0 f080 	clz	r0, r0
    8cbc:	0940      	lsrs	r0, r0, #5
}
    8cbe:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8cc0:	b131      	cbz	r1, 8cd0 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    8cc2:	7818      	ldrb	r0, [r3, #0]
    8cc4:	fab0 f080 	clz	r0, r0
    8cc8:	0940      	lsrs	r0, r0, #5
}
    8cca:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    8ccc:	6803      	ldr	r3, [r0, #0]
    8cce:	e7f8      	b.n	8cc2 <String::equals(char const*) const+0x1a>
    8cd0:	2001      	movs	r0, #1
}
    8cd2:	bd08      	pop	{r3, pc}

00008cd4 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    8cd4:	6883      	ldr	r3, [r0, #8]
    8cd6:	428b      	cmp	r3, r1
    8cd8:	d903      	bls.n	8ce2 <String::operator[](unsigned int)+0xe>
    8cda:	6800      	ldr	r0, [r0, #0]
    8cdc:	b108      	cbz	r0, 8ce2 <String::operator[](unsigned int)+0xe>
	return buffer[index];
    8cde:	4408      	add	r0, r1
}
    8ce0:	4770      	bx	lr
		dummy_writable_char = 0;
    8ce2:	4b02      	ldr	r3, [pc, #8]	; (8cec <String::operator[](unsigned int)+0x18>)
    8ce4:	2200      	movs	r2, #0
		return dummy_writable_char;
    8ce6:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    8ce8:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    8cea:	4770      	bx	lr
    8cec:	2001889f 	.word	0x2001889f

00008cf0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    8cf0:	b1c2      	cbz	r2, 8d24 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    8cf2:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    8cf4:	fab1 f681 	clz	r6, r1
    8cf8:	460c      	mov	r4, r1
    8cfa:	0976      	lsrs	r6, r6, #5
    8cfc:	b119      	cbz	r1, 8d06 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    8cfe:	6885      	ldr	r5, [r0, #8]
    8d00:	429d      	cmp	r5, r3
    8d02:	d801      	bhi.n	8d08 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    8d04:	700e      	strb	r6, [r1, #0]
}
    8d06:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    8d08:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    8d0a:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    8d0e:	6801      	ldr	r1, [r0, #0]
    8d10:	4620      	mov	r0, r4
    8d12:	4565      	cmp	r5, ip
    8d14:	4419      	add	r1, r3
    8d16:	bf28      	it	cs
    8d18:	4665      	movcs	r5, ip
    8d1a:	462a      	mov	r2, r5
    8d1c:	f003 f828 	bl	bd70 <strncpy>
	buf[n] = 0;
    8d20:	5566      	strb	r6, [r4, r5]
}
    8d22:	bd70      	pop	{r4, r5, r6, pc}
    8d24:	4770      	bx	lr
    8d26:	bf00      	nop

00008d28 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    8d28:	6883      	ldr	r3, [r0, #8]
    8d2a:	b13b      	cbz	r3, 8d3c <String::indexOf(char) const+0x14>
{
    8d2c:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    8d2e:	6804      	ldr	r4, [r0, #0]
    8d30:	4620      	mov	r0, r4
    8d32:	f002 ffb7 	bl	bca4 <strchr>
	if (temp == NULL) return -1;
    8d36:	b120      	cbz	r0, 8d42 <String::indexOf(char) const+0x1a>
	return temp - buffer;
    8d38:	1b00      	subs	r0, r0, r4
}
    8d3a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    8d3c:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d40:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    8d42:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d46:	bd10      	pop	{r4, pc}

00008d48 <String::substring(unsigned int) const>:
{
    8d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    8d4c:	688f      	ldr	r7, [r1, #8]
{
    8d4e:	460e      	mov	r6, r1
    8d50:	4604      	mov	r4, r0
	if (left > right) {
    8d52:	4297      	cmp	r7, r2
    8d54:	d202      	bcs.n	8d5c <String::substring(unsigned int) const+0x14>
    8d56:	4613      	mov	r3, r2
    8d58:	463a      	mov	r2, r7
    8d5a:	461f      	mov	r7, r3
	buffer = NULL;
    8d5c:	2300      	movs	r3, #0
	len = 0;
    8d5e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8d60:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    8d62:	68b0      	ldr	r0, [r6, #8]
    8d64:	4290      	cmp	r0, r2
	capacity = 0;
    8d66:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    8d6a:	d314      	bcc.n	8d96 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    8d6c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    8d6e:	6831      	ldr	r1, [r6, #0]
    8d70:	bf28      	it	cs
    8d72:	4607      	movcs	r7, r0
    8d74:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    8d78:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    8d7a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    8d7c:	189d      	adds	r5, r3, r2
    8d7e:	d00d      	beq.n	8d9c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    8d80:	4628      	mov	r0, r5
    8d82:	f003 fa9d 	bl	c2c0 <strlen>
    8d86:	4629      	mov	r1, r5
    8d88:	4602      	mov	r2, r0
    8d8a:	4620      	mov	r0, r4
    8d8c:	f7ff fe7e 	bl	8a8c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8d90:	6833      	ldr	r3, [r6, #0]
    8d92:	f803 8007 	strb.w	r8, [r3, r7]
}
    8d96:	4620      	mov	r0, r4
    8d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8d9c:	60a5      	str	r5, [r4, #8]
    8d9e:	e7f8      	b.n	8d92 <String::substring(unsigned int) const+0x4a>

00008da0 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    8da0:	429a      	cmp	r2, r3
{
    8da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8da6:	4604      	mov	r4, r0
    8da8:	460e      	mov	r6, r1
	if (left > right) {
    8daa:	d902      	bls.n	8db2 <String::substring(unsigned int, unsigned int) const+0x12>
    8dac:	4611      	mov	r1, r2
    8dae:	461a      	mov	r2, r3
    8db0:	460b      	mov	r3, r1
	buffer = NULL;
    8db2:	2000      	movs	r0, #0
	len = 0;
    8db4:	60a0      	str	r0, [r4, #8]
	flags = 0;
    8db6:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    8db8:	68b7      	ldr	r7, [r6, #8]
    8dba:	4297      	cmp	r7, r2
	capacity = 0;
    8dbc:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    8dc0:	d314      	bcc.n	8dec <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    8dc2:	429f      	cmp	r7, r3
    8dc4:	bf28      	it	cs
    8dc6:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    8dc8:	6833      	ldr	r3, [r6, #0]
    8dca:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    8dce:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    8dd0:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    8dd2:	189d      	adds	r5, r3, r2
    8dd4:	d00d      	beq.n	8df2 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    8dd6:	4628      	mov	r0, r5
    8dd8:	f003 fa72 	bl	c2c0 <strlen>
    8ddc:	4629      	mov	r1, r5
    8dde:	4602      	mov	r2, r0
    8de0:	4620      	mov	r0, r4
    8de2:	f7ff fe53 	bl	8a8c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    8de6:	6833      	ldr	r3, [r6, #0]
    8de8:	f803 8007 	strb.w	r8, [r3, r7]
}
    8dec:	4620      	mov	r0, r4
    8dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    8df2:	60a5      	str	r5, [r4, #8]
    8df4:	e7f8      	b.n	8de8 <String::substring(unsigned int, unsigned int) const+0x48>
    8df6:	bf00      	nop

00008df8 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    8df8:	b510      	push	{r4, lr}
    8dfa:	4604      	mov	r4, r0
    8dfc:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    8dfe:	68a1      	ldr	r1, [r4, #8]
    8e00:	b10a      	cbz	r2, 8e06 <String::remove(unsigned int, unsigned int)+0xe>
    8e02:	4281      	cmp	r1, r0
    8e04:	d801      	bhi.n	8e0a <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    8e06:	4620      	mov	r0, r4
    8e08:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    8e0a:	eb00 0c02 	add.w	ip, r0, r2
    8e0e:	4561      	cmp	r1, ip
    8e10:	d30e      	bcc.n	8e30 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    8e12:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    8e14:	4661      	mov	r1, ip
    8e16:	1a1a      	subs	r2, r3, r0
		len = len - count;
    8e18:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    8e1a:	6823      	ldr	r3, [r4, #0]
    8e1c:	4419      	add	r1, r3
    8e1e:	4418      	add	r0, r3
    8e20:	f002 fe72 	bl	bb08 <memmove>
		buffer[len] = 0;
    8e24:	6822      	ldr	r2, [r4, #0]
    8e26:	68a3      	ldr	r3, [r4, #8]
    8e28:	2100      	movs	r1, #0
}
    8e2a:	4620      	mov	r0, r4
		buffer[len] = 0;
    8e2c:	54d1      	strb	r1, [r2, r3]
}
    8e2e:	bd10      	pop	{r4, pc}
    8e30:	4603      	mov	r3, r0
    8e32:	2200      	movs	r2, #0
    8e34:	e7f0      	b.n	8e18 <String::remove(unsigned int, unsigned int)+0x20>
    8e36:	bf00      	nop

00008e38 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    8e38:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    8e3a:	6804      	ldr	r4, [r0, #0]
{
    8e3c:	4605      	mov	r5, r0
	if (!buffer) return *this;
    8e3e:	b144      	cbz	r4, 8e52 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    8e40:	7820      	ldrb	r0, [r4, #0]
    8e42:	b130      	cbz	r0, 8e52 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    8e44:	f002 fd0c 	bl	b860 <tolower>
    8e48:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    8e4a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    8e4e:	2800      	cmp	r0, #0
    8e50:	d1f8      	bne.n	8e44 <String::toLowerCase()+0xc>
	}
	return *this;
}
    8e52:	4628      	mov	r0, r5
    8e54:	bd38      	pop	{r3, r4, r5, pc}
    8e56:	bf00      	nop

00008e58 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    8e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    8e5c:	6807      	ldr	r7, [r0, #0]
{
    8e5e:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    8e60:	b1e7      	cbz	r7, 8e9c <String::trim()+0x44>
    8e62:	6884      	ldr	r4, [r0, #8]
    8e64:	b1d4      	cbz	r4, 8e9c <String::trim()+0x44>
    8e66:	46b8      	mov	r8, r7
    8e68:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    8e6a:	f818 0b01 	ldrb.w	r0, [r8], #1
    8e6e:	f002 fcef 	bl	b850 <isspace>
    8e72:	2800      	cmp	r0, #0
    8e74:	d1f8      	bne.n	8e68 <String::trim()+0x10>
	char *end = buffer + len - 1;
    8e76:	3c01      	subs	r4, #1
    8e78:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    8e7a:	e002      	b.n	8e82 <String::trim()+0x2a>
    8e7c:	42a5      	cmp	r5, r4
    8e7e:	d805      	bhi.n	8e8c <String::trim()+0x34>
    8e80:	3c01      	subs	r4, #1
    8e82:	7820      	ldrb	r0, [r4, #0]
    8e84:	f002 fce4 	bl	b850 <isspace>
    8e88:	2800      	cmp	r0, #0
    8e8a:	d1f7      	bne.n	8e7c <String::trim()+0x24>
	len = end + 1 - begin;
    8e8c:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    8e8e:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    8e90:	eba2 0205 	sub.w	r2, r2, r5
    8e94:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    8e96:	d304      	bcc.n	8ea2 <String::trim()+0x4a>
	buffer[len] = 0;
    8e98:	2300      	movs	r3, #0
    8e9a:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    8e9c:	4630      	mov	r0, r6
    8e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    8ea2:	4638      	mov	r0, r7
    8ea4:	4629      	mov	r1, r5
    8ea6:	f000 f89d 	bl	8fe4 <memcpy>
	buffer[len] = 0;
    8eaa:	6837      	ldr	r7, [r6, #0]
    8eac:	68b2      	ldr	r2, [r6, #8]
    8eae:	e7f3      	b.n	8e98 <String::trim()+0x40>

00008eb0 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    8eb0:	6800      	ldr	r0, [r0, #0]
    8eb2:	b108      	cbz	r0, 8eb8 <String::toInt() const+0x8>
    8eb4:	f001 be32 	b.w	ab1c <atol>
	return 0;
}
    8eb8:	4770      	bx	lr
    8eba:	bf00      	nop

00008ebc <delay>:
	if (msec == 0) return;
    8ebc:	b900      	cbnz	r0, 8ec0 <delay+0x4>
    8ebe:	4770      	bx	lr
{
    8ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8ec4:	2101      	movs	r1, #1
    8ec6:	4681      	mov	r9, r0
    8ec8:	4c21      	ldr	r4, [pc, #132]	; (8f50 <delay+0x94>)
    8eca:	4d22      	ldr	r5, [pc, #136]	; (8f54 <delay+0x98>)
    8ecc:	4e22      	ldr	r6, [pc, #136]	; (8f58 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8ece:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8ed2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8ed4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8ed6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8eda:	2b00      	cmp	r3, #0
    8edc:	d1f7      	bne.n	8ece <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8ede:	491f      	ldr	r1, [pc, #124]	; (8f5c <delay+0xa0>)
    8ee0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    8ee2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ee6:	f8df a078 	ldr.w	sl, [pc, #120]	; 8f60 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    8eea:	1a1b      	subs	r3, r3, r0
    8eec:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    8eee:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ef2:	f8da 2000 	ldr.w	r2, [sl]
    8ef6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    8efa:	455a      	cmp	r2, fp
    8efc:	bf94      	ite	ls
    8efe:	4490      	addls	r8, r2
    8f00:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8f02:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    8f06:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8f08:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8f0a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8f0e:	2b00      	cmp	r3, #0
    8f10:	d1f7      	bne.n	8f02 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8f12:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8f14:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    8f18:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    8f1a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8f1e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    8f22:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    8f26:	bf94      	ite	ls
    8f28:	4462      	addls	r2, ip
    8f2a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    8f2e:	eba2 0208 	sub.w	r2, r2, r8
    8f32:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    8f36:	d306      	bcc.n	8f46 <delay+0x8a>
			if (--msec == 0) return;
    8f38:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    8f3c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    8f40:	d1df      	bne.n	8f02 <delay+0x46>
}
    8f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    8f46:	f001 fa8b 	bl	a460 <yield>
		while ((micros() - start) >= 1000) {
    8f4a:	4904      	ldr	r1, [pc, #16]	; (8f5c <delay+0xa0>)
    8f4c:	e7d9      	b.n	8f02 <delay+0x46>
    8f4e:	bf00      	nop
    8f50:	20018874 	.word	0x20018874
    8f54:	20018870 	.word	0x20018870
    8f58:	2001886c 	.word	0x2001886c
    8f5c:	e0001000 	.word	0xe0001000
    8f60:	20018868 	.word	0x20018868

00008f64 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8f64:	2836      	cmp	r0, #54	; 0x36
    8f66:	d829      	bhi.n	8fbc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    8f68:	4b16      	ldr	r3, [pc, #88]	; (8fc4 <pinMode+0x60>)
    8f6a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8f6c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    8f6e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f72:	589a      	ldr	r2, [r3, r2]
{
    8f74:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f76:	6853      	ldr	r3, [r2, #4]
    8f78:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    8f7a:	d00e      	beq.n	8f9a <pinMode+0x36>
    8f7c:	2904      	cmp	r1, #4
    8f7e:	d00c      	beq.n	8f9a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    8f80:	ea23 0304 	bic.w	r3, r3, r4
    8f84:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8f86:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    8f88:	b1a9      	cbz	r1, 8fb6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    8f8a:	2902      	cmp	r1, #2
    8f8c:	d017      	beq.n	8fbe <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    8f8e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8f90:	bf0c      	ite	eq
    8f92:	4a0d      	ldreq	r2, [pc, #52]	; (8fc8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    8f94:	4a0d      	ldrne	r2, [pc, #52]	; (8fcc <pinMode+0x68>)
    8f96:	601a      	str	r2, [r3, #0]
    8f98:	e007      	b.n	8faa <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8f9a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    8f9c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    8f9e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8fa0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    8fa2:	d008      	beq.n	8fb6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    8fa4:	f640 0238 	movw	r2, #2104	; 0x838
    8fa8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    8faa:	6843      	ldr	r3, [r0, #4]
    8fac:	2215      	movs	r2, #21
}
    8fae:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    8fb2:	601a      	str	r2, [r3, #0]
}
    8fb4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    8fb6:	2238      	movs	r2, #56	; 0x38
    8fb8:	601a      	str	r2, [r3, #0]
    8fba:	e7f6      	b.n	8faa <pinMode+0x46>
    8fbc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8fbe:	4a04      	ldr	r2, [pc, #16]	; (8fd0 <pinMode+0x6c>)
    8fc0:	601a      	str	r2, [r3, #0]
    8fc2:	e7f2      	b.n	8faa <pinMode+0x46>
    8fc4:	20000de0 	.word	0x20000de0
    8fc8:	00013038 	.word	0x00013038
    8fcc:	00010038 	.word	0x00010038
    8fd0:	0001f038 	.word	0x0001f038

00008fd4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8fd4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8fd6:	f7f9 fa8d 	bl	24f4 <setup>
	while (1) {
		loop();
    8fda:	f7fe f879 	bl	70d0 <loop>
		yield();
    8fde:	f001 fa3f 	bl	a460 <yield>
	while (1) {
    8fe2:	e7fa      	b.n	8fda <main+0x6>

00008fe4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8fe4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8fe6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8fea:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8fee:	d16d      	bne.n	90cc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8ff0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8ff2:	d341      	bcc.n	9078 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8ff4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ff8:	f840 3b04 	str.w	r3, [r0], #4
    8ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    9000:	f840 3b04 	str.w	r3, [r0], #4
    9004:	f851 3b04 	ldr.w	r3, [r1], #4
    9008:	f840 3b04 	str.w	r3, [r0], #4
    900c:	f851 3b04 	ldr.w	r3, [r1], #4
    9010:	f840 3b04 	str.w	r3, [r0], #4
    9014:	f851 3b04 	ldr.w	r3, [r1], #4
    9018:	f840 3b04 	str.w	r3, [r0], #4
    901c:	f851 3b04 	ldr.w	r3, [r1], #4
    9020:	f840 3b04 	str.w	r3, [r0], #4
    9024:	f851 3b04 	ldr.w	r3, [r1], #4
    9028:	f840 3b04 	str.w	r3, [r0], #4
    902c:	f851 3b04 	ldr.w	r3, [r1], #4
    9030:	f840 3b04 	str.w	r3, [r0], #4
    9034:	f851 3b04 	ldr.w	r3, [r1], #4
    9038:	f840 3b04 	str.w	r3, [r0], #4
    903c:	f851 3b04 	ldr.w	r3, [r1], #4
    9040:	f840 3b04 	str.w	r3, [r0], #4
    9044:	f851 3b04 	ldr.w	r3, [r1], #4
    9048:	f840 3b04 	str.w	r3, [r0], #4
    904c:	f851 3b04 	ldr.w	r3, [r1], #4
    9050:	f840 3b04 	str.w	r3, [r0], #4
    9054:	f851 3b04 	ldr.w	r3, [r1], #4
    9058:	f840 3b04 	str.w	r3, [r0], #4
    905c:	f851 3b04 	ldr.w	r3, [r1], #4
    9060:	f840 3b04 	str.w	r3, [r0], #4
    9064:	f851 3b04 	ldr.w	r3, [r1], #4
    9068:	f840 3b04 	str.w	r3, [r0], #4
    906c:	f851 3b04 	ldr.w	r3, [r1], #4
    9070:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9074:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9076:	d2bd      	bcs.n	8ff4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9078:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    907a:	d311      	bcc.n	90a0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    907c:	f851 3b04 	ldr.w	r3, [r1], #4
    9080:	f840 3b04 	str.w	r3, [r0], #4
    9084:	f851 3b04 	ldr.w	r3, [r1], #4
    9088:	f840 3b04 	str.w	r3, [r0], #4
    908c:	f851 3b04 	ldr.w	r3, [r1], #4
    9090:	f840 3b04 	str.w	r3, [r0], #4
    9094:	f851 3b04 	ldr.w	r3, [r1], #4
    9098:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    909c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    909e:	d2ed      	bcs.n	907c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    90a0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    90a2:	d305      	bcc.n	90b0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    90a4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    90a8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    90ac:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    90ae:	d2f9      	bcs.n	90a4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    90b0:	3204      	adds	r2, #4
	beq	.Ldone
    90b2:	d008      	beq.n	90c6 <memcpy+0xe2>

	lsls	r2, r2, #31
    90b4:	07d2      	lsls	r2, r2, #31
	itt ne
    90b6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    90b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    90bc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    90c0:	d301      	bcc.n	90c6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    90c2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    90c4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    90c6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    90c8:	4770      	bx	lr
    90ca:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    90cc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    90ce:	d313      	bcc.n	90f8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    90d0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    90d2:	d08d      	beq.n	8ff0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    90d4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    90d8:	d08a      	beq.n	8ff0 <memcpy+0xc>

	rsb	r3, #4
    90da:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    90de:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    90e0:	07db      	lsls	r3, r3, #31
	itt ne
    90e2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    90e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    90e8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    90ec:	d380      	bcc.n	8ff0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    90ee:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    90f2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    90f6:	e77b      	b.n	8ff0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    90f8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    90fa:	d3d9      	bcc.n	90b0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    90fc:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    90fe:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9102:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9106:	d2f9      	bcs.n	90fc <memcpy+0x118>

	ldrb	r3, [r1]
    9108:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    910a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    910c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    910e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9110:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9112:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9114:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9116:	4770      	bx	lr

00009118 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9118:	f101 3cff 	add.w	ip, r1, #4294967295
{
    911c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    911e:	4666      	mov	r6, ip
	int i=0, j;
    9120:	2400      	movs	r4, #0
    9122:	e000      	b.n	9126 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    9124:	3401      	adds	r4, #1
		digit = val % radix;
    9126:	fbb0 f5f2 	udiv	r5, r0, r2
    912a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    912e:	2b09      	cmp	r3, #9
    9130:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    9134:	f103 0330 	add.w	r3, r3, #48	; 0x30
    9138:	fa5f fe8e 	uxtb.w	lr, lr
    913c:	bf98      	it	ls
    913e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    9142:	4290      	cmp	r0, r2
		val /= radix;
    9144:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9146:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    914a:	d2eb      	bcs.n	9124 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    914c:	1c63      	adds	r3, r4, #1
    914e:	2200      	movs	r2, #0
    9150:	18c8      	adds	r0, r1, r3
    9152:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    9154:	b17c      	cbz	r4, 9176 <ultoa+0x5e>
		t = buf[j];
    9156:	4662      	mov	r2, ip
    9158:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    915c:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    9160:	eba1 030c 	sub.w	r3, r1, ip
    9164:	3202      	adds	r2, #2
		buf[j] = buf[i];
    9166:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    916a:	3b01      	subs	r3, #1
    916c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    916e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9170:	4423      	add	r3, r4
    9172:	429a      	cmp	r2, r3
    9174:	dbef      	blt.n	9156 <ultoa+0x3e>
	}
	return buf;
}
    9176:	4608      	mov	r0, r1
    9178:	bd70      	pop	{r4, r5, r6, pc}
    917a:	bf00      	nop

0000917c <unused_interrupt_vector>:
	__disable_irq();
    917c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    917e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    9182:	4c4f      	ldr	r4, [pc, #316]	; (92c0 <unused_interrupt_vector+0x144>)
    9184:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    9188:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    918c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    9190:	4e4c      	ldr	r6, [pc, #304]	; (92c4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    9192:	4d4d      	ldr	r5, [pc, #308]	; (92c8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    9194:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    9198:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    919c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    91a0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    91a4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    91a8:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    91ac:	6993      	ldr	r3, [r2, #24]
    91ae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    91b2:	69d3      	ldr	r3, [r2, #28]
    91b4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    91b8:	f000 f8d0 	bl	935c <tempmonGetTemp>
    91bc:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    91c0:	f001 fc2a 	bl	aa18 <rtc_get>
	info->len = sizeof(*info) / 4;
    91c4:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    91c6:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    91ca:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    91ce:	460b      	mov	r3, r1
    91d0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    91d4:	493d      	ldr	r1, [pc, #244]	; (92cc <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    91d6:	1d30      	adds	r0, r6, #4
    91d8:	405a      	eors	r2, r3
    91da:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    91dc:	f002 0301 	and.w	r3, r2, #1
    91e0:	3c01      	subs	r4, #1
    91e2:	fb01 f303 	mul.w	r3, r1, r3
    91e6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    91ea:	d1f7      	bne.n	91dc <unused_interrupt_vector+0x60>
	while (p < end) {
    91ec:	42a8      	cmp	r0, r5
    91ee:	d002      	beq.n	91f6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    91f0:	6873      	ldr	r3, [r6, #4]
    91f2:	4606      	mov	r6, r0
    91f4:	e7ef      	b.n	91d6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    91f6:	4b32      	ldr	r3, [pc, #200]	; (92c0 <unused_interrupt_vector+0x144>)
    91f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    91fc:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9200:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9204:	492f      	ldr	r1, [pc, #188]	; (92c4 <unused_interrupt_vector+0x148>)
    9206:	4a32      	ldr	r2, [pc, #200]	; (92d0 <unused_interrupt_vector+0x154>)
    9208:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    920c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    9210:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9214:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9218:	4a2e      	ldr	r2, [pc, #184]	; (92d4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    921a:	2502      	movs	r5, #2
    921c:	482e      	ldr	r0, [pc, #184]	; (92d8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    921e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9220:	492e      	ldr	r1, [pc, #184]	; (92dc <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9222:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    9226:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    9228:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    922a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    922c:	482c      	ldr	r0, [pc, #176]	; (92e0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    922e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    9232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9236:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9238:	680b      	ldr	r3, [r1, #0]
    923a:	4283      	cmp	r3, r0
    923c:	d83d      	bhi.n	92ba <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    923e:	4d26      	ldr	r5, [pc, #152]	; (92d8 <unused_interrupt_vector+0x15c>)
    9240:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    9242:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9246:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    924a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    924c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    924e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9252:	4924      	ldr	r1, [pc, #144]	; (92e4 <unused_interrupt_vector+0x168>)
    9254:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9258:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    925c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    9260:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    9264:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    9268:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    926c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    9270:	e001      	b.n	9276 <unused_interrupt_vector+0xfa>
		usb_isr();
    9272:	f000 f965 	bl	9540 <usb_isr>
		if (PIT_TFLG0) {
    9276:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    927a:	2b00      	cmp	r3, #0
    927c:	d0f9      	beq.n	9272 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    927e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    9280:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    9284:	2c4f      	cmp	r4, #79	; 0x4f
    9286:	d9f4      	bls.n	9272 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9288:	4b17      	ldr	r3, [pc, #92]	; (92e8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    928a:	2002      	movs	r0, #2
    928c:	4917      	ldr	r1, [pc, #92]	; (92ec <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    928e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    9292:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9296:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9298:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    929c:	b93b      	cbnz	r3, 92ae <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    929e:	4814      	ldr	r0, [pc, #80]	; (92f0 <unused_interrupt_vector+0x174>)
    92a0:	4914      	ldr	r1, [pc, #80]	; (92f4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    92a2:	4a0d      	ldr	r2, [pc, #52]	; (92d8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    92a4:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    92a6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    92aa:	2b00      	cmp	r3, #0
    92ac:	d0fa      	beq.n	92a4 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    92ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    92b2:	4a11      	ldr	r2, [pc, #68]	; (92f8 <unused_interrupt_vector+0x17c>)
    92b4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    92b8:	e7fe      	b.n	92b8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    92ba:	f001 f97d 	bl	a5b8 <set_arm_clock>
    92be:	e7be      	b.n	923e <unused_interrupt_vector+0xc2>
    92c0:	2027ff00 	.word	0x2027ff00
    92c4:	2027ff80 	.word	0x2027ff80
    92c8:	2027ffa8 	.word	0x2027ffa8
    92cc:	edb88320 	.word	0xedb88320
    92d0:	2027ffa0 	.word	0x2027ffa0
    92d4:	400fc000 	.word	0x400fc000
    92d8:	40084000 	.word	0x40084000
    92dc:	2000448c 	.word	0x2000448c
    92e0:	0bcd3d80 	.word	0x0bcd3d80
    92e4:	00249f00 	.word	0x00249f00
    92e8:	400d9000 	.word	0x400d9000
    92ec:	402e0000 	.word	0x402e0000
    92f0:	400f8000 	.word	0x400f8000
    92f4:	0bad00f1 	.word	0x0bad00f1
    92f8:	05fa0004 	.word	0x05fa0004

000092fc <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    92fc:	490a      	ldr	r1, [pc, #40]	; (9328 <_sbrk+0x2c>)
    92fe:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    9300:	b138      	cbz	r0, 9312 <_sbrk+0x16>
{
    9302:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    9304:	1813      	adds	r3, r2, r0
    9306:	4809      	ldr	r0, [pc, #36]	; (932c <_sbrk+0x30>)
    9308:	4283      	cmp	r3, r0
    930a:	d804      	bhi.n	9316 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    930c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    930e:	600b      	str	r3, [r1, #0]
}
    9310:	bd08      	pop	{r3, pc}
    9312:	4610      	mov	r0, r2
    9314:	4770      	bx	lr
                        errno = ENOMEM;
    9316:	f002 fdc9 	bl	beac <__errno>
    931a:	230c      	movs	r3, #12
                        return (void *)-1;
    931c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    9320:	6003      	str	r3, [r0, #0]
}
    9322:	4610      	mov	r0, r2
    9324:	bd08      	pop	{r3, pc}
    9326:	bf00      	nop
    9328:	200044a4 	.word	0x200044a4
    932c:	20280000 	.word	0x20280000

00009330 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    9330:	2000      	movs	r0, #0
    9332:	4770      	bx	lr

00009334 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    9334:	f04f 30ff 	mov.w	r0, #4294967295
    9338:	4770      	bx	lr
    933a:	bf00      	nop

0000933c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    933c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    9340:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    9342:	604b      	str	r3, [r1, #4]
}
    9344:	4770      	bx	lr
    9346:	bf00      	nop

00009348 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    9348:	2001      	movs	r0, #1
    934a:	4770      	bx	lr

0000934c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    934c:	f04f 30ff 	mov.w	r0, #4294967295
    9350:	4770      	bx	lr
    9352:	bf00      	nop

00009354 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    9354:	bf30      	wfi
    9356:	e7fd      	b.n	9354 <abort>

00009358 <Panic_Temp_isr>:
  unused_interrupt_vector();
    9358:	f7ff bf10 	b.w	917c <unused_interrupt_vector>

0000935c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    935c:	4a12      	ldr	r2, [pc, #72]	; (93a8 <tempmonGetTemp+0x4c>)
    935e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    9362:	075b      	lsls	r3, r3, #29
    9364:	d5fb      	bpl.n	935e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9366:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    936a:	4810      	ldr	r0, [pc, #64]	; (93ac <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    936c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9370:	490f      	ldr	r1, [pc, #60]	; (93b0 <tempmonGetTemp+0x54>)
    9372:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9376:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    937a:	ed91 6a00 	vldr	s12, [r1]
    937e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9382:	4a0c      	ldr	r2, [pc, #48]	; (93b4 <tempmonGetTemp+0x58>)
    9384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9388:	4b0b      	ldr	r3, [pc, #44]	; (93b8 <tempmonGetTemp+0x5c>)
    938a:	edd2 6a00 	vldr	s13, [r2]
    938e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9392:	ed93 7a00 	vldr	s14, [r3]
    9396:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    939a:	ee67 7a86 	vmul.f32	s15, s15, s12
    939e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    93a2:	ee37 0a40 	vsub.f32	s0, s14, s0
    93a6:	4770      	bx	lr
    93a8:	400d8100 	.word	0x400d8100
    93ac:	20018858 	.word	0x20018858
    93b0:	20018860 	.word	0x20018860
    93b4:	20018864 	.word	0x20018864
    93b8:	2001885c 	.word	0x2001885c

000093bc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    93bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    93be:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    93c0:	b11b      	cbz	r3, 93ca <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    93c2:	6853      	ldr	r3, [r2, #4]
    93c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    93c8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    93ca:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    93cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    93ce:	b33c      	cbz	r4, 9420 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    93d0:	4b1a      	ldr	r3, [pc, #104]	; (943c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    93d2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    93d4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    93d8:	420c      	tst	r4, r1
    93da:	d11d      	bne.n	9418 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    93dc:	4e18      	ldr	r6, [pc, #96]	; (9440 <schedule_transfer+0x84>)
    93de:	6877      	ldr	r7, [r6, #4]
    93e0:	e004      	b.n	93ec <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    93e2:	6874      	ldr	r4, [r6, #4]
    93e4:	1be4      	subs	r4, r4, r7
    93e6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    93ea:	d20b      	bcs.n	9404 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    93ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    93f0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    93f4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    93f8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    93fc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    9400:	0464      	lsls	r4, r4, #17
    9402:	d5ee      	bpl.n	93e2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9404:	400d      	ands	r5, r1
    9406:	d107      	bne.n	9418 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    9408:	4c0c      	ldr	r4, [pc, #48]	; (943c <schedule_transfer+0x80>)
		endpoint->status = 0;
    940a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    940e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9412:	430b      	orrs	r3, r1
    9414:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    9418:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    941a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    941c:	bcf0      	pop	{r4, r5, r6, r7}
    941e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    9420:	4d06      	ldr	r5, [pc, #24]	; (943c <schedule_transfer+0x80>)
	endpoint->status = 0;
    9422:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    9426:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    942a:	430b      	orrs	r3, r1
    942c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    9430:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    9432:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9434:	b662      	cpsie	i
}
    9436:	bcf0      	pop	{r4, r5, r6, r7}
    9438:	4770      	bx	lr
    943a:	bf00      	nop
    943c:	402e0000 	.word	0x402e0000
    9440:	e0001000 	.word	0xe0001000

00009444 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9444:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9446:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    9448:	b19d      	cbz	r5, 9472 <run_callbacks+0x2e>
    944a:	4606      	mov	r6, r0
    944c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    944e:	2400      	movs	r4, #0
    9450:	e003      	b.n	945a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    9452:	6812      	ldr	r2, [r2, #0]
		count++;
    9454:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    9456:	2a01      	cmp	r2, #1
    9458:	d00c      	beq.n	9474 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    945a:	6853      	ldr	r3, [r2, #4]
    945c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    9460:	d0f7      	beq.n	9452 <run_callbacks+0xe>
			ep->first_transfer = t;
    9462:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9464:	b12c      	cbz	r4, 9472 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    9466:	4628      	mov	r0, r5
		ep->callback_function(first);
    9468:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    946a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    946c:	4798      	blx	r3
	while (count) {
    946e:	3c01      	subs	r4, #1
    9470:	d1f9      	bne.n	9466 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    9472:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    9474:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    9478:	e7f4      	b.n	9464 <run_callbacks+0x20>
    947a:	bf00      	nop

0000947c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    947c:	b430      	push	{r4, r5}
	if (len > 0) {
    947e:	b9d9      	cbnz	r1, 94b8 <endpoint0_transmit.constprop.0+0x3c>
    9480:	4c1f      	ldr	r4, [pc, #124]	; (9500 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    9482:	4b20      	ldr	r3, [pc, #128]	; (9504 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    9484:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9486:	4a20      	ldr	r2, [pc, #128]	; (9508 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    9488:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    948a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    948e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9490:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    9492:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9496:	2480      	movs	r4, #128	; 0x80
    9498:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    949a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    949e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    94a2:	481a      	ldr	r0, [pc, #104]	; (950c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    94a4:	432b      	orrs	r3, r5
    94a6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    94aa:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    94ac:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    94b0:	2b00      	cmp	r3, #0
    94b2:	d1fb      	bne.n	94ac <endpoint0_transmit.constprop.0+0x30>
}
    94b4:	bc30      	pop	{r4, r5}
    94b6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    94b8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    94ba:	4b15      	ldr	r3, [pc, #84]	; (9510 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    94bc:	4c10      	ldr	r4, [pc, #64]	; (9500 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    94be:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    94c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    94c4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    94c6:	4a10      	ldr	r2, [pc, #64]	; (9508 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    94c8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    94ca:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    94ce:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    94d0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    94d2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    94d6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    94d8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    94da:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    94de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    94e2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    94e4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    94e6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    94e8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    94ea:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    94ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    94f2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    94f6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    94fa:	2b00      	cmp	r3, #0
    94fc:	d1fb      	bne.n	94f6 <endpoint0_transmit.constprop.0+0x7a>
    94fe:	e7c0      	b.n	9482 <endpoint0_transmit.constprop.0+0x6>
    9500:	20000000 	.word	0x20000000
    9504:	20004ec0 	.word	0x20004ec0
    9508:	402e0000 	.word	0x402e0000
    950c:	200053d4 	.word	0x200053d4
    9510:	20004ee0 	.word	0x20004ee0

00009514 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    9514:	4908      	ldr	r1, [pc, #32]	; (9538 <usb_stop_sof_interrupts+0x24>)
    9516:	2201      	movs	r2, #1
    9518:	780b      	ldrb	r3, [r1, #0]
    951a:	fa02 f000 	lsl.w	r0, r2, r0
    951e:	ea23 0000 	bic.w	r0, r3, r0
    9522:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    9524:	b930      	cbnz	r0, 9534 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    9526:	4a05      	ldr	r2, [pc, #20]	; (953c <usb_stop_sof_interrupts+0x28>)
    9528:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    952c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9530:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    9534:	4770      	bx	lr
    9536:	bf00      	nop
    9538:	200188b4 	.word	0x200188b4
    953c:	402e0000 	.word	0x402e0000

00009540 <usb_isr>:
{
    9540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    9544:	4c97      	ldr	r4, [pc, #604]	; (97a4 <usb_isr+0x264>)
{
    9546:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    9548:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    954c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    954e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    9552:	d553      	bpl.n	95fc <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    9554:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    9558:	2a00      	cmp	r2, #0
    955a:	d04a      	beq.n	95f2 <usb_isr+0xb2>
    955c:	4e92      	ldr	r6, [pc, #584]	; (97a8 <usb_isr+0x268>)
    955e:	f8df a260 	ldr.w	sl, [pc, #608]	; 97c0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    9562:	f8df 9274 	ldr.w	r9, [pc, #628]	; 97d8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    9566:	f8df b274 	ldr.w	fp, [pc, #628]	; 97dc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    956a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 97e0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    956e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    9572:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9576:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    957a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    957e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9582:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9586:	049d      	lsls	r5, r3, #18
    9588:	d5f5      	bpl.n	9576 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    958a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    958e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9592:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9596:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    959a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    959e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    95a2:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    95a6:	d1fa      	bne.n	959e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    95a8:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    95aa:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    95ac:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    95b0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    95b4:	f000 81cf 	beq.w	9956 <usb_isr+0x416>
    95b8:	f200 80db 	bhi.w	9772 <usb_isr+0x232>
    95bc:	f240 3102 	movw	r1, #770	; 0x302
    95c0:	428b      	cmp	r3, r1
    95c2:	f000 81e7 	beq.w	9994 <usb_isr+0x454>
    95c6:	f200 809a 	bhi.w	96fe <usb_isr+0x1be>
    95ca:	2b82      	cmp	r3, #130	; 0x82
    95cc:	f000 81cb 	beq.w	9966 <usb_isr+0x426>
    95d0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    95d4:	f040 808a 	bne.w	96ec <usb_isr+0x1ac>
		if (endpoint > 7) break;
    95d8:	f010 0f78 	tst.w	r0, #120	; 0x78
    95dc:	b283      	uxth	r3, r0
    95de:	f000 8203 	beq.w	99e8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    95e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    95e6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    95ea:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    95ee:	2a00      	cmp	r2, #0
    95f0:	d1bd      	bne.n	956e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    95f2:	4a6c      	ldr	r2, [pc, #432]	; (97a4 <usb_isr+0x264>)
    95f4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    95f8:	2b00      	cmp	r3, #0
    95fa:	d142      	bne.n	9682 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    95fc:	067e      	lsls	r6, r7, #25
    95fe:	d516      	bpl.n	962e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9600:	4b68      	ldr	r3, [pc, #416]	; (97a4 <usb_isr+0x264>)
    9602:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    9606:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    960a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    960e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9612:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9616:	2c00      	cmp	r4, #0
    9618:	d1fb      	bne.n	9612 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    961a:	f04f 32ff 	mov.w	r2, #4294967295
    961e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    9622:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    9626:	f000 fd29 	bl	a07c <usb_serial_reset>
		endpointN_notify_mask = 0;
    962a:	4b60      	ldr	r3, [pc, #384]	; (97ac <usb_isr+0x26c>)
    962c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    962e:	01fc      	lsls	r4, r7, #7
    9630:	d503      	bpl.n	963a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9632:	4b5f      	ldr	r3, [pc, #380]	; (97b0 <usb_isr+0x270>)
    9634:	681b      	ldr	r3, [r3, #0]
    9636:	b103      	cbz	r3, 963a <usb_isr+0xfa>
    9638:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    963a:	01b8      	lsls	r0, r7, #6
    963c:	d503      	bpl.n	9646 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    963e:	4b5d      	ldr	r3, [pc, #372]	; (97b4 <usb_isr+0x274>)
    9640:	681b      	ldr	r3, [r3, #0]
    9642:	b103      	cbz	r3, 9646 <usb_isr+0x106>
    9644:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    9646:	0779      	lsls	r1, r7, #29
    9648:	d508      	bpl.n	965c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    964a:	4b56      	ldr	r3, [pc, #344]	; (97a4 <usb_isr+0x264>)
    964c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    9650:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    9654:	d047      	beq.n	96e6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    9656:	4b58      	ldr	r3, [pc, #352]	; (97b8 <usb_isr+0x278>)
    9658:	2201      	movs	r2, #1
    965a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    965c:	4b51      	ldr	r3, [pc, #324]	; (97a4 <usb_isr+0x264>)
    965e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    9662:	061a      	lsls	r2, r3, #24
    9664:	d50a      	bpl.n	967c <usb_isr+0x13c>
    9666:	063b      	lsls	r3, r7, #24
    9668:	d508      	bpl.n	967c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    966a:	4a54      	ldr	r2, [pc, #336]	; (97bc <usb_isr+0x27c>)
    966c:	7813      	ldrb	r3, [r2, #0]
    966e:	b12b      	cbz	r3, 967c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    9670:	3b01      	subs	r3, #1
    9672:	b2db      	uxtb	r3, r3
    9674:	7013      	strb	r3, [r2, #0]
    9676:	2b00      	cmp	r3, #0
    9678:	f000 8272 	beq.w	9b60 <usb_isr+0x620>
}
    967c:	b003      	add	sp, #12
    967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    9682:	494f      	ldr	r1, [pc, #316]	; (97c0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    9684:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    9688:	6808      	ldr	r0, [r1, #0]
    968a:	4203      	tst	r3, r0
    968c:	f040 81d1 	bne.w	9a32 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    9690:	4a46      	ldr	r2, [pc, #280]	; (97ac <usb_isr+0x26c>)
    9692:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    9694:	401c      	ands	r4, r3
    9696:	d0b1      	beq.n	95fc <usb_isr+0xbc>
				while (tx) {
    9698:	ea5f 4814 	movs.w	r8, r4, lsr #16
    969c:	d010      	beq.n	96c0 <usb_isr+0x180>
    969e:	4e42      	ldr	r6, [pc, #264]	; (97a8 <usb_isr+0x268>)
					tx &= ~(1<<p);
    96a0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    96a4:	fa98 f5a8 	rbit	r5, r8
    96a8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    96ac:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    96b0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    96b4:	3040      	adds	r0, #64	; 0x40
    96b6:	f7ff fec5 	bl	9444 <run_callbacks>
				while (tx) {
    96ba:	ea38 0805 	bics.w	r8, r8, r5
    96be:	d1f1      	bne.n	96a4 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    96c0:	b2a4      	uxth	r4, r4
				while(rx) {
    96c2:	2c00      	cmp	r4, #0
    96c4:	d09a      	beq.n	95fc <usb_isr+0xbc>
    96c6:	4e38      	ldr	r6, [pc, #224]	; (97a8 <usb_isr+0x268>)
					rx &= ~(1<<p);
    96c8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    96cc:	fa94 f5a4 	rbit	r5, r4
    96d0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    96d4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    96d8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    96dc:	f7ff feb2 	bl	9444 <run_callbacks>
				while(rx) {
    96e0:	43ac      	bics	r4, r5
    96e2:	d1f3      	bne.n	96cc <usb_isr+0x18c>
    96e4:	e78a      	b.n	95fc <usb_isr+0xbc>
			usb_high_speed = 0;
    96e6:	4a34      	ldr	r2, [pc, #208]	; (97b8 <usb_isr+0x278>)
    96e8:	7013      	strb	r3, [r2, #0]
    96ea:	e7b7      	b.n	965c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    96ec:	2b80      	cmp	r3, #128	; 0x80
    96ee:	f47f af78 	bne.w	95e2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    96f2:	4834      	ldr	r0, [pc, #208]	; (97c4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    96f4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    96f6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    96f8:	f7ff fec0 	bl	947c <endpoint0_transmit.constprop.0>
		return;
    96fc:	e775      	b.n	95ea <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    96fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    9702:	f000 810b 	beq.w	991c <usb_isr+0x3dc>
    9706:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    970a:	2b01      	cmp	r3, #1
    970c:	f63f af69 	bhi.w	95e2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9710:	4b2d      	ldr	r3, [pc, #180]	; (97c8 <usb_isr+0x288>)
    9712:	685d      	ldr	r5, [r3, #4]
    9714:	2d00      	cmp	r5, #0
    9716:	f43f af64 	beq.w	95e2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    971a:	fa1f fc8c 	uxth.w	ip, ip
    971e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    9722:	e004      	b.n	972e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9724:	691d      	ldr	r5, [r3, #16]
    9726:	330c      	adds	r3, #12
    9728:	2d00      	cmp	r5, #0
    972a:	f43f af5a 	beq.w	95e2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    972e:	881a      	ldrh	r2, [r3, #0]
    9730:	4572      	cmp	r2, lr
    9732:	d1f7      	bne.n	9724 <usb_isr+0x1e4>
    9734:	885a      	ldrh	r2, [r3, #2]
    9736:	4562      	cmp	r2, ip
    9738:	d1f4      	bne.n	9724 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    973a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    973e:	2a03      	cmp	r2, #3
    9740:	f000 81a5 	beq.w	9a8e <usb_isr+0x54e>
					datalen = list->length;
    9744:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    9746:	0c00      	lsrs	r0, r0, #16
    9748:	4282      	cmp	r2, r0
    974a:	bf28      	it	cs
    974c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    974e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    9752:	f040 81a1 	bne.w	9a98 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    9756:	4b18      	ldr	r3, [pc, #96]	; (97b8 <usb_isr+0x278>)
    9758:	491c      	ldr	r1, [pc, #112]	; (97cc <usb_isr+0x28c>)
    975a:	7818      	ldrb	r0, [r3, #0]
    975c:	4b1c      	ldr	r3, [pc, #112]	; (97d0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    975e:	9201      	str	r2, [sp, #4]
    9760:	2800      	cmp	r0, #0
    9762:	bf18      	it	ne
    9764:	4619      	movne	r1, r3
    9766:	481b      	ldr	r0, [pc, #108]	; (97d4 <usb_isr+0x294>)
    9768:	f7ff fc3c 	bl	8fe4 <memcpy>
    976c:	4d19      	ldr	r5, [pc, #100]	; (97d4 <usb_isr+0x294>)
    976e:	9a01      	ldr	r2, [sp, #4]
    9770:	e1e1      	b.n	9b36 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    9772:	f242 2121 	movw	r1, #8737	; 0x2221
    9776:	428b      	cmp	r3, r1
    9778:	d07c      	beq.n	9874 <usb_isr+0x334>
    977a:	d933      	bls.n	97e4 <usb_isr+0x2a4>
    977c:	f242 3121 	movw	r1, #8993	; 0x2321
    9780:	428b      	cmp	r3, r1
    9782:	f000 8081 	beq.w	9888 <usb_isr+0x348>
    9786:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    978a:	428b      	cmp	r3, r1
    978c:	f47f af29 	bne.w	95e2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    9790:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    9794:	b283      	uxth	r3, r0
    9796:	f47f af24 	bne.w	95e2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    979a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    979e:	f363 0c0f 	bfi	ip, r3, #0, #16
    97a2:	e7b5      	b.n	9710 <usb_isr+0x1d0>
    97a4:	402e0000 	.word	0x402e0000
    97a8:	20000000 	.word	0x20000000
    97ac:	200053d8 	.word	0x200053d8
    97b0:	20018884 	.word	0x20018884
    97b4:	20018888 	.word	0x20018888
    97b8:	200188ba 	.word	0x200188ba
    97bc:	200188bb 	.word	0x200188bb
    97c0:	200053d4 	.word	0x200053d4
    97c4:	2001881c 	.word	0x2001881c
    97c8:	200012bc 	.word	0x200012bc
    97cc:	60001e84 	.word	0x60001e84
    97d0:	60001ee8 	.word	0x60001ee8
    97d4:	20200000 	.word	0x20200000
    97d8:	200053cc 	.word	0x200053cc
    97dc:	b8c6cf5d 	.word	0xb8c6cf5d
    97e0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    97e4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    97e8:	d066      	beq.n	98b8 <usb_isr+0x378>
    97ea:	f242 0121 	movw	r1, #8225	; 0x2021
    97ee:	428b      	cmp	r3, r1
    97f0:	f47f aef7 	bne.w	95e2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    97f4:	0c03      	lsrs	r3, r0, #16
    97f6:	2b07      	cmp	r3, #7
    97f8:	f47f aef3 	bne.w	95e2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    97fc:	4bb2      	ldr	r3, [pc, #712]	; (9ac8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97fe:	49b3      	ldr	r1, [pc, #716]	; (9acc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    9800:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9802:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    9804:	49b2      	ldr	r1, [pc, #712]	; (9ad0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9806:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9808:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    980c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    9810:	2201      	movs	r2, #1
    9812:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9814:	4aaf      	ldr	r2, [pc, #700]	; (9ad4 <usb_isr+0x594>)
    9816:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9818:	4aaf      	ldr	r2, [pc, #700]	; (9ad8 <usb_isr+0x598>)
    981a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    981c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    9820:	f041 0101 	orr.w	r1, r1, #1
    9824:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9828:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    982c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9830:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9832:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    9834:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9838:	2b00      	cmp	r3, #0
    983a:	d1fb      	bne.n	9834 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    983c:	4aa7      	ldr	r2, [pc, #668]	; (9adc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    983e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9840:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    9842:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9844:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9846:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9848:	f248 0380 	movw	r3, #32896	; 0x8080
    984c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    984e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9852:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9856:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    985a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    985e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9866:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    986a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    986e:	2b00      	cmp	r3, #0
    9870:	d1fb      	bne.n	986a <usb_isr+0x32a>
    9872:	e6ba      	b.n	95ea <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9874:	b280      	uxth	r0, r0
    9876:	b938      	cbnz	r0, 9888 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9878:	4b99      	ldr	r3, [pc, #612]	; (9ae0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    987a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    987e:	6819      	ldr	r1, [r3, #0]
    9880:	4b98      	ldr	r3, [pc, #608]	; (9ae4 <usb_isr+0x5a4>)
    9882:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9884:	4b98      	ldr	r3, [pc, #608]	; (9ae8 <usb_isr+0x5a8>)
    9886:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    9888:	4b94      	ldr	r3, [pc, #592]	; (9adc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    988a:	2200      	movs	r2, #0
    988c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    988e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9890:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9892:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9894:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9896:	2280      	movs	r2, #128	; 0x80
    9898:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    989a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    989e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    98a2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    98a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    98aa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    98ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    98b2:	2b00      	cmp	r3, #0
    98b4:	d1fb      	bne.n	98ae <usb_isr+0x36e>
    98b6:	e698      	b.n	95ea <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    98b8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    98bc:	4b8b      	ldr	r3, [pc, #556]	; (9aec <usb_isr+0x5ac>)
    98be:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    98c0:	4b8b      	ldr	r3, [pc, #556]	; (9af0 <usb_isr+0x5b0>)
    98c2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    98c6:	4b8b      	ldr	r3, [pc, #556]	; (9af4 <usb_isr+0x5b4>)
    98c8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    98cc:	4b8a      	ldr	r3, [pc, #552]	; (9af8 <usb_isr+0x5b8>)
    98ce:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    98d2:	f000 fbd5 	bl	a080 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    98d6:	2280      	movs	r2, #128	; 0x80
    98d8:	4629      	mov	r1, r5
    98da:	4888      	ldr	r0, [pc, #544]	; (9afc <usb_isr+0x5bc>)
    98dc:	f002 f990 	bl	bc00 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    98e0:	4b87      	ldr	r3, [pc, #540]	; (9b00 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98e2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    98e4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    98e8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    98ec:	4b7b      	ldr	r3, [pc, #492]	; (9adc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    98ee:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    98f0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    98f2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    98f4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    98f6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    98f8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    98fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    98fe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9902:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    990a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    990e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    9912:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9916:	2b00      	cmp	r3, #0
    9918:	d1fb      	bne.n	9912 <usb_isr+0x3d2>
    991a:	e666      	b.n	95ea <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    991c:	4b6f      	ldr	r3, [pc, #444]	; (9adc <usb_isr+0x59c>)
    991e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    9920:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9922:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9924:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9926:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9928:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    992a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    992c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9930:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9934:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    993c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9940:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9944:	2b00      	cmp	r3, #0
    9946:	d1fb      	bne.n	9940 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9948:	0c13      	lsrs	r3, r2, #16
    994a:	065b      	lsls	r3, r3, #25
    994c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9950:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    9954:	e649      	b.n	95ea <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    9956:	4b65      	ldr	r3, [pc, #404]	; (9aec <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9958:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    995a:	486a      	ldr	r0, [pc, #424]	; (9b04 <usb_isr+0x5c4>)
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9960:	f7ff fd8c 	bl	947c <endpoint0_transmit.constprop.0>
		return;
    9964:	e641      	b.n	95ea <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9966:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    9968:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    996c:	f47f ae39 	bne.w	95e2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    9970:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9974:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    9978:	4a62      	ldr	r2, [pc, #392]	; (9b04 <usb_isr+0x5c4>)
    997a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    997c:	0618      	lsls	r0, r3, #24
    997e:	f100 809e 	bmi.w	9abe <usb_isr+0x57e>
    9982:	07cb      	lsls	r3, r1, #31
    9984:	d501      	bpl.n	998a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    9986:	2301      	movs	r3, #1
    9988:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    998a:	2102      	movs	r1, #2
    998c:	485d      	ldr	r0, [pc, #372]	; (9b04 <usb_isr+0x5c4>)
    998e:	f7ff fd75 	bl	947c <endpoint0_transmit.constprop.0>
		return;
    9992:	e62a      	b.n	95ea <usb_isr+0xaa>
		if (endpoint > 7) break;
    9994:	f010 0f78 	tst.w	r0, #120	; 0x78
    9998:	b283      	uxth	r3, r0
    999a:	f47f ae22 	bne.w	95e2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    999e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    99a2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    99a6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    99aa:	bf14      	ite	ne
    99ac:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    99b0:	f043 0301 	orreq.w	r3, r3, #1
    99b4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    99b8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    99ba:	4b48      	ldr	r3, [pc, #288]	; (9adc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    99bc:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    99be:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    99c0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    99c2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    99c4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    99c6:	2280      	movs	r2, #128	; 0x80
    99c8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    99ca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    99ce:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    99d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    99d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    99da:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    99de:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    99e2:	2b00      	cmp	r3, #0
    99e4:	d1fb      	bne.n	99de <usb_isr+0x49e>
    99e6:	e600      	b.n	95ea <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    99e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    99ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    99f0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    99f4:	bf14      	ite	ne
    99f6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    99fa:	f023 0301 	biceq.w	r3, r3, #1
    99fe:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9a02:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9a04:	4b35      	ldr	r3, [pc, #212]	; (9adc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9a06:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9a08:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9a0a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9a0c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9a0e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9a10:	2280      	movs	r2, #128	; 0x80
    9a12:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9a14:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9a18:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9a1c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9a24:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9a28:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d1fb      	bne.n	9a28 <usb_isr+0x4e8>
    9a30:	e5db      	b.n	95ea <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    9a32:	2000      	movs	r0, #0
    9a34:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    9a36:	4926      	ldr	r1, [pc, #152]	; (9ad0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9a38:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    9a3a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9a3c:	f242 0121 	movw	r1, #8225	; 0x2021
    9a40:	428c      	cmp	r4, r1
    9a42:	f47f ae25 	bne.w	9690 <usb_isr+0x150>
    9a46:	b280      	uxth	r0, r0
    9a48:	2800      	cmp	r0, #0
    9a4a:	f47f ae21 	bne.w	9690 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9a4e:	492e      	ldr	r1, [pc, #184]	; (9b08 <usb_isr+0x5c8>)
    9a50:	4c2e      	ldr	r4, [pc, #184]	; (9b0c <usb_isr+0x5cc>)
    9a52:	c903      	ldmia	r1, {r0, r1}
    9a54:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    9a56:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9a58:	ea4f 4111 	mov.w	r1, r1, lsr #16
    9a5c:	6020      	str	r0, [r4, #0]
    9a5e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    9a60:	f47f ae16 	bne.w	9690 <usb_isr+0x150>
	__disable_irq();
    9a64:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    9a66:	482a      	ldr	r0, [pc, #168]	; (9b10 <usb_isr+0x5d0>)
    9a68:	7801      	ldrb	r1, [r0, #0]
    9a6a:	f041 0108 	orr.w	r1, r1, #8
    9a6e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9a70:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9a74:	060d      	lsls	r5, r1, #24
    9a76:	d405      	bmi.n	9a84 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9a78:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9a7a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9a7c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9a80:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    9a84:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9a86:	4a23      	ldr	r2, [pc, #140]	; (9b14 <usb_isr+0x5d4>)
    9a88:	2150      	movs	r1, #80	; 0x50
    9a8a:	7011      	strb	r1, [r2, #0]
    9a8c:	e600      	b.n	9690 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    9a8e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    9a90:	782a      	ldrb	r2, [r5, #0]
    9a92:	4282      	cmp	r2, r0
    9a94:	bf28      	it	cs
    9a96:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    9a98:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    9a9c:	d144      	bne.n	9b28 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9a9e:	4b1e      	ldr	r3, [pc, #120]	; (9b18 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9aa0:	4d1e      	ldr	r5, [pc, #120]	; (9b1c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    9aa2:	7818      	ldrb	r0, [r3, #0]
    9aa4:	491e      	ldr	r1, [pc, #120]	; (9b20 <usb_isr+0x5e0>)
    9aa6:	4b1f      	ldr	r3, [pc, #124]	; (9b24 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9aa8:	9201      	str	r2, [sp, #4]
    9aaa:	2800      	cmp	r0, #0
    9aac:	bf18      	it	ne
    9aae:	4619      	movne	r1, r3
    9ab0:	4628      	mov	r0, r5
    9ab2:	f7ff fa97 	bl	8fe4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9ab6:	2307      	movs	r3, #7
    9ab8:	706b      	strb	r3, [r5, #1]
    9aba:	9a01      	ldr	r2, [sp, #4]
    9abc:	e03b      	b.n	9b36 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9abe:	03c9      	lsls	r1, r1, #15
    9ac0:	f53f af61 	bmi.w	9986 <usb_isr+0x446>
    9ac4:	e761      	b.n	998a <usb_isr+0x44a>
    9ac6:	bf00      	nop
    9ac8:	20004ee0 	.word	0x20004ee0
    9acc:	200063cc 	.word	0x200063cc
    9ad0:	20005080 	.word	0x20005080
    9ad4:	00070080 	.word	0x00070080
    9ad8:	200073cc 	.word	0x200073cc
    9adc:	20004ec0 	.word	0x20004ec0
    9ae0:	20018870 	.word	0x20018870
    9ae4:	20018880 	.word	0x20018880
    9ae8:	200188b8 	.word	0x200188b8
    9aec:	200188b9 	.word	0x200188b9
    9af0:	00cc0002 	.word	0x00cc0002
    9af4:	000200c8 	.word	0x000200c8
    9af8:	00c80002 	.word	0x00c80002
    9afc:	20000080 	.word	0x20000080
    9b00:	74d59319 	.word	0x74d59319
    9b04:	2001881c 	.word	0x2001881c
    9b08:	200053cc 	.word	0x200053cc
    9b0c:	20018878 	.word	0x20018878
    9b10:	200188b4 	.word	0x200188b4
    9b14:	200188bb 	.word	0x200188bb
    9b18:	200188ba 	.word	0x200188ba
    9b1c:	20200000 	.word	0x20200000
    9b20:	60001ee8 	.word	0x60001ee8
    9b24:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9b28:	4629      	mov	r1, r5
    9b2a:	4d10      	ldr	r5, [pc, #64]	; (9b6c <usb_isr+0x62c>)
    9b2c:	9201      	str	r2, [sp, #4]
    9b2e:	4628      	mov	r0, r5
    9b30:	f7ff fa58 	bl	8fe4 <memcpy>
    9b34:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9b36:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9b3a:	4415      	add	r5, r2
	asm("dsb");
    9b3c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9b40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9b44:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    9b48:	3320      	adds	r3, #32
	} while (location < end_addr);
    9b4a:	429d      	cmp	r5, r3
    9b4c:	d8fa      	bhi.n	9b44 <usb_isr+0x604>
	asm("dsb");
    9b4e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9b52:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    9b56:	4805      	ldr	r0, [pc, #20]	; (9b6c <usb_isr+0x62c>)
    9b58:	4611      	mov	r1, r2
    9b5a:	f7ff fc8f 	bl	947c <endpoint0_transmit.constprop.0>
				return;
    9b5e:	e544      	b.n	95ea <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    9b60:	2003      	movs	r0, #3
    9b62:	f7ff fcd7 	bl	9514 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9b66:	f007 fd4b 	bl	11600 <___reboot_Teensyduino__veneer>
    9b6a:	bf00      	nop
    9b6c:	20200000 	.word	0x20200000

00009b70 <usb_config_rx>:
{
    9b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9b74:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9b76:	1e83      	subs	r3, r0, #2
    9b78:	2b02      	cmp	r3, #2
    9b7a:	d901      	bls.n	9b80 <usb_config_rx+0x10>
}
    9b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b80:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9bd0 <usb_config_rx+0x60>
    9b84:	4615      	mov	r5, r2
    9b86:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9b88:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b8a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9b8e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9b90:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9b94:	2100      	movs	r1, #0
    9b96:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9b9a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    9b9c:	f002 f830 	bl	bc00 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9ba0:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    9ba4:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9ba6:	0952      	lsrs	r2, r2, #5
    9ba8:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    9bac:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9bb0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9bb4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9bb8:	2f00      	cmp	r7, #0
    9bba:	d0df      	beq.n	9b7c <usb_config_rx+0xc>
    9bbc:	4a03      	ldr	r2, [pc, #12]	; (9bcc <usb_config_rx+0x5c>)
    9bbe:	40b3      	lsls	r3, r6
    9bc0:	6811      	ldr	r1, [r2, #0]
    9bc2:	430b      	orrs	r3, r1
    9bc4:	6013      	str	r3, [r2, #0]
}
    9bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9bca:	bf00      	nop
    9bcc:	200053d8 	.word	0x200053d8
    9bd0:	20000000 	.word	0x20000000

00009bd4 <usb_config_tx>:
{
    9bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9bd8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9bda:	1e81      	subs	r1, r0, #2
    9bdc:	2902      	cmp	r1, #2
    9bde:	d901      	bls.n	9be4 <usb_config_tx+0x10>
}
    9be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9be4:	01c7      	lsls	r7, r0, #7
    9be6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9c34 <usb_config_tx+0x60>
    9bea:	4692      	mov	sl, r2
    9bec:	4604      	mov	r4, r0
    9bee:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9bf0:	223c      	movs	r2, #60	; 0x3c
    9bf2:	2100      	movs	r1, #0
    9bf4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9bf6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9bfa:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    9bfc:	f108 0004 	add.w	r0, r8, #4
    9c00:	f001 fffe 	bl	bc00 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9c04:	faba f28a 	clz	r2, sl
    9c08:	0952      	lsrs	r2, r2, #5
    9c0a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    9c0e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9c12:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9c14:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9c18:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9c1c:	2e00      	cmp	r6, #0
    9c1e:	d0df      	beq.n	9be0 <usb_config_tx+0xc>
    9c20:	4b03      	ldr	r3, [pc, #12]	; (9c30 <usb_config_tx+0x5c>)
    9c22:	3410      	adds	r4, #16
    9c24:	6819      	ldr	r1, [r3, #0]
    9c26:	40a2      	lsls	r2, r4
    9c28:	430a      	orrs	r2, r1
    9c2a:	601a      	str	r2, [r3, #0]
}
    9c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c30:	200053d8 	.word	0x200053d8
    9c34:	20000000 	.word	0x20000000

00009c38 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9c38:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    9c3a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    9c3c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    9c3e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    9c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    9c46:	b410      	push	{r4}
	transfer->next = 1;
    9c48:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    9c4a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    9c4c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9c50:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    9c52:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    9c56:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    9c5a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    9c5c:	6181      	str	r1, [r0, #24]
}
    9c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    9c62:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    9c66:	4770      	bx	lr

00009c68 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c68:	1e83      	subs	r3, r0, #2
{
    9c6a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c6c:	2b02      	cmp	r3, #2
    9c6e:	d900      	bls.n	9c72 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9c70:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9c72:	4b06      	ldr	r3, [pc, #24]	; (9c8c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    9c74:	f100 0110 	add.w	r1, r0, #16
    9c78:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9c7c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9c80:	fa0c f101 	lsl.w	r1, ip, r1
    9c84:	3040      	adds	r0, #64	; 0x40
    9c86:	f7ff bb99 	b.w	93bc <schedule_transfer>
    9c8a:	bf00      	nop
    9c8c:	20000000 	.word	0x20000000

00009c90 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c90:	1e83      	subs	r3, r0, #2
{
    9c92:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9c94:	2b02      	cmp	r3, #2
    9c96:	d900      	bls.n	9c9a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    9c98:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    9c9a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    9c9c:	4b02      	ldr	r3, [pc, #8]	; (9ca8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    9c9e:	4081      	lsls	r1, r0
    9ca0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9ca4:	f7ff bb8a 	b.w	93bc <schedule_transfer>
    9ca8:	20000000 	.word	0x20000000

00009cac <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9cac:	6840      	ldr	r0, [r0, #4]
#endif
}
    9cae:	4770      	bx	lr

00009cb0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9cb0:	4a12      	ldr	r2, [pc, #72]	; (9cfc <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9cb2:	4b13      	ldr	r3, [pc, #76]	; (9d00 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9cb4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9cb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9cbc:	4298      	cmp	r0, r3
{
    9cbe:	b510      	push	{r4, lr}
    9cc0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9cc2:	d202      	bcs.n	9cca <usb_init_serialnumber+0x1a>
    9cc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9cc8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    9cca:	4c0e      	ldr	r4, [pc, #56]	; (9d04 <usb_init_serialnumber+0x54>)
    9ccc:	a901      	add	r1, sp, #4
    9cce:	220a      	movs	r2, #10
    9cd0:	f7ff fa22 	bl	9118 <ultoa>
	for (i=0; i<10; i++) {
    9cd4:	a901      	add	r1, sp, #4
    9cd6:	2300      	movs	r3, #0
    9cd8:	4620      	mov	r0, r4
		char c = buf[i];
    9cda:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    9cde:	3301      	adds	r3, #1
		if (!c) break;
    9ce0:	b13a      	cbz	r2, 9cf2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    9ce2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    9ce4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    9ce8:	d1f7      	bne.n	9cda <usb_init_serialnumber+0x2a>
    9cea:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9cec:	7023      	strb	r3, [r4, #0]
}
    9cee:	b004      	add	sp, #16
    9cf0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9cf2:	005b      	lsls	r3, r3, #1
    9cf4:	b2db      	uxtb	r3, r3
    9cf6:	7023      	strb	r3, [r4, #0]
}
    9cf8:	b004      	add	sp, #16
    9cfa:	bd10      	pop	{r4, pc}
    9cfc:	401f4400 	.word	0x401f4400
    9d00:	00989680 	.word	0x00989680
    9d04:	20004a88 	.word	0x20004a88

00009d08 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9d08:	f000 bace 	b.w	a2a8 <usb_serial_flush_input>

00009d0c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9d0c:	f000 bac0 	b.w	a290 <usb_serial_available>

00009d10 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9d10:	f000 bb5c 	b.w	a3cc <usb_serial_flush_output>

00009d14 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9d14:	f000 bb32 	b.w	a37c <usb_serial_write_buffer_free>

00009d18 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d18:	4608      	mov	r0, r1
    9d1a:	4611      	mov	r1, r2
    9d1c:	f000 bb22 	b.w	a364 <usb_serial_write>

00009d20 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9d22:	4c14      	ldr	r4, [pc, #80]	; (9d74 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d24:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9d28:	4e13      	ldr	r6, [pc, #76]	; (9d78 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9d2e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9d32:	4f12      	ldr	r7, [pc, #72]	; (9d7c <rx_queue_transfer+0x5c>)
    9d34:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9d38:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9d3a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9d3e:	4621      	mov	r1, r4
    9d40:	883a      	ldrh	r2, [r7, #0]
    9d42:	4630      	mov	r0, r6
    9d44:	f7ff ff78 	bl	9c38 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9d48:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9d4a:	4423      	add	r3, r4
	asm("dsb");
    9d4c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9d50:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9d54:	3420      	adds	r4, #32
	} while (location < end_addr);
    9d56:	42a3      	cmp	r3, r4
    9d58:	d8fa      	bhi.n	9d50 <rx_queue_transfer+0x30>
	asm("dsb");
    9d5a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9d5e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9d62:	2003      	movs	r0, #3
    9d64:	4631      	mov	r1, r6
    9d66:	f7ff ff93 	bl	9c90 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9d6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9d6e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d74:	20200080 	.word	0x20200080
    9d78:	20004f00 	.word	0x20004f00
    9d7c:	20018896 	.word	0x20018896

00009d80 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d80:	4b24      	ldr	r3, [pc, #144]	; (9e14 <rx_event+0x94>)
{
    9d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d86:	881c      	ldrh	r4, [r3, #0]
    9d88:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    9d8a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9d8c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9d90:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9d92:	2c00      	cmp	r4, #0
    9d94:	dd24      	ble.n	9de0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    9d96:	4920      	ldr	r1, [pc, #128]	; (9e18 <rx_event+0x98>)
		if (head != rx_tail) {
    9d98:	4820      	ldr	r0, [pc, #128]	; (9e1c <rx_event+0x9c>)
		uint32_t head = rx_head;
    9d9a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    9d9c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9d9e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    9da0:	4e1f      	ldr	r6, [pc, #124]	; (9e20 <rx_event+0xa0>)
		if (head != rx_tail) {
    9da2:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    9da4:	481f      	ldr	r0, [pc, #124]	; (9e24 <rx_event+0xa4>)
		if (head != rx_tail) {
    9da6:	d007      	beq.n	9db8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    9da8:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9dac:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9db0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9db4:	4294      	cmp	r4, r2
    9db6:	d918      	bls.n	9dea <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9db8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    9dba:	2200      	movs	r2, #0
		rx_count[i] = len;
    9dbc:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9dc0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    9dc2:	4e19      	ldr	r6, [pc, #100]	; (9e28 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9dc4:	bf88      	it	hi
    9dc6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    9dc8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    9dcc:	bf98      	it	ls
    9dce:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    9dd0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    9dd2:	4b16      	ldr	r3, [pc, #88]	; (9e2c <rx_event+0xac>)
		rx_head = head;
    9dd4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9dd6:	681a      	ldr	r2, [r3, #0]
    9dd8:	4414      	add	r4, r2
    9dda:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    9de0:	4628      	mov	r0, r5
}
    9de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    9de6:	f7ff bf9b 	b.w	9d20 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9dea:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9dee:	4910      	ldr	r1, [pc, #64]	; (9e30 <rx_event+0xb0>)
    9df0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    9df2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9df4:	4408      	add	r0, r1
    9df6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    9dfa:	f7ff f8f3 	bl	8fe4 <memcpy>
				rx_available += len;
    9dfe:	4a0b      	ldr	r2, [pc, #44]	; (9e2c <rx_event+0xac>)
				rx_queue_transfer(i);
    9e00:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    9e02:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9e06:	6813      	ldr	r3, [r2, #0]
    9e08:	4423      	add	r3, r4
}
    9e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    9e0e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    9e10:	f7ff bf86 	b.w	9d20 <rx_queue_transfer>
    9e14:	20018896 	.word	0x20018896
    9e18:	200188b2 	.word	0x200188b2
    9e1c:	200188b3 	.word	0x200188b3
    9e20:	2001882c 	.word	0x2001882c
    9e24:	2001884c 	.word	0x2001884c
    9e28:	2001883c 	.word	0x2001883c
    9e2c:	20018828 	.word	0x20018828
    9e30:	20200080 	.word	0x20200080

00009e34 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9e34:	4b1d      	ldr	r3, [pc, #116]	; (9eac <usb_serial_flush_callback+0x78>)
    9e36:	781a      	ldrb	r2, [r3, #0]
    9e38:	2a00      	cmp	r2, #0
    9e3a:	d136      	bne.n	9eaa <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    9e3c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9e40:	4a1b      	ldr	r2, [pc, #108]	; (9eb0 <usb_serial_flush_callback+0x7c>)
    9e42:	7812      	ldrb	r2, [r2, #0]
    9e44:	b38a      	cbz	r2, 9eaa <usb_serial_flush_callback+0x76>
{
    9e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    9e4a:	4d1a      	ldr	r5, [pc, #104]	; (9eb4 <usb_serial_flush_callback+0x80>)
    9e4c:	882a      	ldrh	r2, [r5, #0]
    9e4e:	b352      	cbz	r2, 9ea6 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9e50:	4e19      	ldr	r6, [pc, #100]	; (9eb8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9e52:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    9e56:	4f19      	ldr	r7, [pc, #100]	; (9ebc <usb_serial_flush_callback+0x88>)
    9e58:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e5a:	4c19      	ldr	r4, [pc, #100]	; (9ec0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9e5c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9e60:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9e64:	4642      	mov	r2, r8
    9e66:	4638      	mov	r0, r7
    9e68:	4621      	mov	r1, r4
    9e6a:	f7ff fee5 	bl	9c38 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    9e6e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    9e72:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9e7a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9e7e:	3420      	adds	r4, #32
	} while (location < end_addr);
    9e80:	42a2      	cmp	r2, r4
    9e82:	d8fa      	bhi.n	9e7a <usb_serial_flush_callback+0x46>
	asm("dsb");
    9e84:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9e88:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9e8c:	2004      	movs	r0, #4
    9e8e:	4639      	mov	r1, r7
    9e90:	f7ff feea 	bl	9c68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9e94:	7833      	ldrb	r3, [r6, #0]
    9e96:	3301      	adds	r3, #1
    9e98:	b2db      	uxtb	r3, r3
    9e9a:	2b03      	cmp	r3, #3
    9e9c:	bf88      	it	hi
    9e9e:	2300      	movhi	r3, #0
    9ea0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    9ea2:	2300      	movs	r3, #0
    9ea4:	802b      	strh	r3, [r5, #0]
}
    9ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9eaa:	4770      	bx	lr
    9eac:	200188b7 	.word	0x200188b7
    9eb0:	200188b9 	.word	0x200188b9
    9eb4:	20018898 	.word	0x20018898
    9eb8:	200188b6 	.word	0x200188b6
    9ebc:	20005000 	.word	0x20005000
    9ec0:	20201080 	.word	0x20201080

00009ec4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    9ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ec8:	b085      	sub	sp, #20
	while (size > 0) {
    9eca:	e9cd 1001 	strd	r1, r0, [sp, #4]
    9ece:	2900      	cmp	r1, #0
    9ed0:	f000 80bf 	beq.w	a052 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    9ed4:	2300      	movs	r3, #0
    9ed6:	4c60      	ldr	r4, [pc, #384]	; (a058 <usb_serial_write.part.0+0x194>)
    9ed8:	f8df 8198 	ldr.w	r8, [pc, #408]	; a074 <usb_serial_write.part.0+0x1b0>
    9edc:	f8df a198 	ldr.w	sl, [pc, #408]	; a078 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    9ee0:	4f5e      	ldr	r7, [pc, #376]	; (a05c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    9ee2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    9ee4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9ee6:	4a5e      	ldr	r2, [pc, #376]	; (a060 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    9ee8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    9eea:	4b5e      	ldr	r3, [pc, #376]	; (a064 <usb_serial_write.part.0+0x1a0>)
    9eec:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    9eee:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    9ef2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	f040 80a7 	bne.w	a04a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    9efc:	461e      	mov	r6, r3
		int waiting=0;
    9efe:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    9f00:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    9f02:	4648      	mov	r0, r9
    9f04:	f7ff fed2 	bl	9cac <usb_transfer_status>
			if (!(status & 0x80)) {
    9f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    9f0c:	f000 808c 	beq.w	a028 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    9f10:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    9f14:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    9f18:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    9f1c:	b905      	cbnz	r5, 9f20 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    9f1e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    9f20:	2b00      	cmp	r3, #0
    9f22:	d17d      	bne.n	a020 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9f24:	683b      	ldr	r3, [r7, #0]
    9f26:	1b9b      	subs	r3, r3, r6
    9f28:	2b78      	cmp	r3, #120	; 0x78
    9f2a:	f200 8087 	bhi.w	a03c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    9f2e:	4b4e      	ldr	r3, [pc, #312]	; (a068 <usb_serial_write.part.0+0x1a4>)
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	2b00      	cmp	r3, #0
    9f34:	d074      	beq.n	a020 <usb_serial_write.part.0+0x15c>
			yield();
    9f36:	f000 fa93 	bl	a460 <yield>
			tx_noautoflush = 1;
    9f3a:	2201      	movs	r2, #1
		while (!tx_available) {
    9f3c:	f8b8 3000 	ldrh.w	r3, [r8]
    9f40:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    9f42:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    9f44:	2b00      	cmp	r3, #0
    9f46:	d0dc      	beq.n	9f02 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9f48:	4a46      	ldr	r2, [pc, #280]	; (a064 <usb_serial_write.part.0+0x1a0>)
    9f4a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9f4e:	7811      	ldrb	r1, [r2, #0]
    9f50:	461a      	mov	r2, r3
    9f52:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    9f56:	4d45      	ldr	r5, [pc, #276]	; (a06c <usb_serial_write.part.0+0x1a8>)
    9f58:	02c9      	lsls	r1, r1, #11
    9f5a:	4428      	add	r0, r5
		if (size >= tx_available) {
    9f5c:	9d01      	ldr	r5, [sp, #4]
    9f5e:	4295      	cmp	r5, r2
    9f60:	d217      	bcs.n	9f92 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    9f62:	9303      	str	r3, [sp, #12]
    9f64:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    9f68:	462a      	mov	r2, r5
    9f6a:	f7ff f83b 	bl	8fe4 <memcpy>
			tx_available -= size;
    9f6e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f70:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    9f74:	1b5b      	subs	r3, r3, r5
    9f76:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9f7a:	4b3d      	ldr	r3, [pc, #244]	; (a070 <usb_serial_write.part.0+0x1ac>)
    9f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    9f80:	f3bf 8f4f 	dsb	sy
			sent += size;
    9f84:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    9f86:	2300      	movs	r3, #0
			sent += size;
    9f88:	4428      	add	r0, r5
		tx_noautoflush = 0;
    9f8a:	7023      	strb	r3, [r4, #0]
}
    9f8c:	b005      	add	sp, #20
    9f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9f92:	4b36      	ldr	r3, [pc, #216]	; (a06c <usb_serial_write.part.0+0x1a8>)
    9f94:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    9f96:	9902      	ldr	r1, [sp, #8]
    9f98:	f7ff f824 	bl	8fe4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9f9c:	2300      	movs	r3, #0
    9f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9fa2:	4629      	mov	r1, r5
    9fa4:	4648      	mov	r0, r9
    9fa6:	f7ff fe47 	bl	9c38 <usb_prepare_transfer>
	asm("dsb");
    9faa:	f3bf 8f4f 	dsb	sy
    9fae:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    9fb2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    9fb6:	4293      	cmp	r3, r2
    9fb8:	bf34      	ite	cc
    9fba:	2301      	movcc	r3, #1
    9fbc:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9fbe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9fc2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    9fc6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    9fca:	3520      	adds	r5, #32
	} while (location < end_addr);
    9fcc:	42ab      	cmp	r3, r5
    9fce:	d1fa      	bne.n	9fc6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    9fd0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9fd4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9fd8:	2004      	movs	r0, #4
    9fda:	4649      	mov	r1, r9
    9fdc:	f7ff fe44 	bl	9c68 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9fe0:	4a20      	ldr	r2, [pc, #128]	; (a064 <usb_serial_write.part.0+0x1a0>)
    9fe2:	7813      	ldrb	r3, [r2, #0]
    9fe4:	3301      	adds	r3, #1
    9fe6:	b2db      	uxtb	r3, r3
    9fe8:	2b03      	cmp	r3, #3
    9fea:	bf84      	itt	hi
    9fec:	2300      	movhi	r3, #0
    9fee:	4a1d      	ldrhi	r2, [pc, #116]	; (a064 <usb_serial_write.part.0+0x1a0>)
    9ff0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9ff2:	f8b8 3000 	ldrh.w	r3, [r8]
    9ff6:	9a01      	ldr	r2, [sp, #4]
    9ff8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    9ffa:	9a00      	ldr	r2, [sp, #0]
    9ffc:	441a      	add	r2, r3
			size -= tx_available;
    9ffe:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    a000:	9200      	str	r2, [sp, #0]
			data += tx_available;
    a002:	9a02      	ldr	r2, [sp, #8]
    a004:	441a      	add	r2, r3
			tx_available = 0;
    a006:	2300      	movs	r3, #0
			data += tx_available;
    a008:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a00a:	4a19      	ldr	r2, [pc, #100]	; (a070 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a00c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a010:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a014:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    a018:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    a01a:	2900      	cmp	r1, #0
    a01c:	f47f af62 	bne.w	9ee4 <usb_serial_write.part.0+0x20>
	return sent;
    a020:	9800      	ldr	r0, [sp, #0]
}
    a022:	b005      	add	sp, #20
    a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a028:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a02c:	4b0d      	ldr	r3, [pc, #52]	; (a064 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a02e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a032:	7819      	ldrb	r1, [r3, #0]
				break;
    a034:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    a036:	f8a8 2000 	strh.w	r2, [r8]
				break;
    a03a:	e78a      	b.n	9f52 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a03c:	2301      	movs	r3, #1
				return sent;
    a03e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a040:	f88a 3000 	strb.w	r3, [sl]
}
    a044:	b005      	add	sp, #20
    a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a04a:	461a      	mov	r2, r3
    a04c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a050:	e77f      	b.n	9f52 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a052:	9801      	ldr	r0, [sp, #4]
	return sent;
    a054:	e7e5      	b.n	a022 <usb_serial_write.part.0+0x15e>
    a056:	bf00      	nop
    a058:	200188b7 	.word	0x200188b7
    a05c:	20018870 	.word	0x20018870
    a060:	20005000 	.word	0x20005000
    a064:	200188b6 	.word	0x200188b6
    a068:	200188b9 	.word	0x200188b9
    a06c:	20201080 	.word	0x20201080
    a070:	402e0000 	.word	0x402e0000
    a074:	20018898 	.word	0x20018898
    a078:	200188b5 	.word	0x200188b5

0000a07c <usb_serial_reset>:
}
    a07c:	4770      	bx	lr
    a07e:	bf00      	nop

0000a080 <usb_serial_configure>:
	if (usb_high_speed) {
    a080:	4b2a      	ldr	r3, [pc, #168]	; (a12c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a082:	2100      	movs	r1, #0
    a084:	2280      	movs	r2, #128	; 0x80
    a086:	482a      	ldr	r0, [pc, #168]	; (a130 <usb_serial_configure+0xb0>)
{
    a088:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a08a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    a08c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a08e:	4d29      	ldr	r5, [pc, #164]	; (a134 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a090:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a092:	4e29      	ldr	r6, [pc, #164]	; (a138 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a094:	bf0c      	ite	eq
    a096:	2340      	moveq	r3, #64	; 0x40
    a098:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a09c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a09e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0a0:	f001 fdae 	bl	bc00 <memset>
	tx_head = 0;
    a0a4:	4a25      	ldr	r2, [pc, #148]	; (a13c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0a6:	4621      	mov	r1, r4
	tx_available = 0;
    a0a8:	4b25      	ldr	r3, [pc, #148]	; (a140 <usb_serial_configure+0xc0>)
	tx_head = 0;
    a0aa:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    a0b0:	4824      	ldr	r0, [pc, #144]	; (a144 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a0b2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0b4:	f001 fda4 	bl	bc00 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a0b8:	4a23      	ldr	r2, [pc, #140]	; (a148 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0ba:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a0bc:	4b23      	ldr	r3, [pc, #140]	; (a14c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0be:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a0c0:	e9c2 4400 	strd	r4, r4, [r2]
    a0c4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a0c8:	4a21      	ldr	r2, [pc, #132]	; (a150 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a0ca:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    a0ce:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    a0d0:	4a20      	ldr	r2, [pc, #128]	; (a154 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a0d2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a0d6:	4b20      	ldr	r3, [pc, #128]	; (a158 <usb_serial_configure+0xd8>)
    a0d8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0da:	4623      	mov	r3, r4
	rx_available = 0;
    a0dc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0de:	4622      	mov	r2, r4
    a0e0:	f7ff fd78 	bl	9bd4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a0e4:	4622      	mov	r2, r4
    a0e6:	8831      	ldrh	r1, [r6, #0]
    a0e8:	2003      	movs	r0, #3
    a0ea:	4b1c      	ldr	r3, [pc, #112]	; (a15c <usb_serial_configure+0xdc>)
    a0ec:	f7ff fd40 	bl	9b70 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a0f0:	4623      	mov	r3, r4
    a0f2:	2201      	movs	r2, #1
    a0f4:	8829      	ldrh	r1, [r5, #0]
    a0f6:	2004      	movs	r0, #4
    a0f8:	f7ff fd6c 	bl	9bd4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a0fc:	4620      	mov	r0, r4
    a0fe:	3401      	adds	r4, #1
    a100:	f7ff fe0e 	bl	9d20 <rx_queue_transfer>
    a104:	2c08      	cmp	r4, #8
    a106:	d1f9      	bne.n	a0fc <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a108:	4b15      	ldr	r3, [pc, #84]	; (a160 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a10a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a10c:	4815      	ldr	r0, [pc, #84]	; (a164 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a10e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a110:	4c15      	ldr	r4, [pc, #84]	; (a168 <usb_serial_configure+0xe8>)
    a112:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a114:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a11c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a120:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a124:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a128:	bd70      	pop	{r4, r5, r6, pc}
    a12a:	bf00      	nop
    a12c:	200188ba 	.word	0x200188ba
    a130:	20005000 	.word	0x20005000
    a134:	2001889a 	.word	0x2001889a
    a138:	20018896 	.word	0x20018896
    a13c:	200188b6 	.word	0x200188b6
    a140:	20018898 	.word	0x20018898
    a144:	20004f00 	.word	0x20004f00
    a148:	2001882c 	.word	0x2001882c
    a14c:	2001883c 	.word	0x2001883c
    a150:	200188b2 	.word	0x200188b2
    a154:	20018828 	.word	0x20018828
    a158:	200188b3 	.word	0x200188b3
    a15c:	00009d81 	.word	0x00009d81
    a160:	402e0000 	.word	0x402e0000
    a164:	20018884 	.word	0x20018884
    a168:	00009e35 	.word	0x00009e35

0000a16c <usb_serial_read>:
{
    a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a170:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a244 <usb_serial_read+0xd8>
{
    a17c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a17e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a182:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a184:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a188:	2900      	cmp	r1, #0
    a18a:	d04f      	beq.n	a22c <usb_serial_read+0xc0>
    a18c:	4680      	mov	r8, r0
    a18e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a190:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a192:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a248 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a196:	4b26      	ldr	r3, [pc, #152]	; (a230 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a198:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a19c:	4925      	ldr	r1, [pc, #148]	; (a234 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a19e:	781b      	ldrb	r3, [r3, #0]
    a1a0:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a1a2:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a1a6:	d03f      	beq.n	a228 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a1a8:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a1aa:	4b23      	ldr	r3, [pc, #140]	; (a238 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a1ac:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a1ae:	bf28      	it	cs
    a1b0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a1b2:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a1b4:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a1b8:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a1bc:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a1be:	4b1f      	ldr	r3, [pc, #124]	; (a23c <usb_serial_read+0xd0>)
    a1c0:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a1c4:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a1c8:	42aa      	cmp	r2, r5
    a1ca:	d21c      	bcs.n	a206 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a1cc:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a1d0:	4918      	ldr	r1, [pc, #96]	; (a234 <usb_serial_read+0xc8>)
			rx_available -= len;
    a1d2:	4c1b      	ldr	r4, [pc, #108]	; (a240 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a1d4:	4461      	add	r1, ip
    a1d6:	9201      	str	r2, [sp, #4]
    a1d8:	f7fe ff04 	bl	8fe4 <memcpy>
			rx_available -= len;
    a1dc:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a1de:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a1e2:	4658      	mov	r0, fp
			rx_index[i] += len;
    a1e4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a1e6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a1ea:	442a      	add	r2, r5
			rx_available -= len;
    a1ec:	4439      	add	r1, r7
			rx_index[i] += len;
    a1ee:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a1f2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a1f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a1f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a1fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a200:	b003      	add	sp, #12
    a202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a206:	462a      	mov	r2, r5
			count += avail;
    a208:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a20a:	f7fe feeb 	bl	8fe4 <memcpy>
			rx_available -= avail;
    a20e:	490c      	ldr	r1, [pc, #48]	; (a240 <usb_serial_read+0xd4>)
			rx_tail = tail;
    a210:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a212:	4630      	mov	r0, r6
			rx_available -= avail;
    a214:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a216:	44a8      	add	r8, r5
			rx_available -= avail;
    a218:	1b52      	subs	r2, r2, r5
    a21a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a21c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a220:	f7ff fd7e 	bl	9d20 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a224:	45bb      	cmp	fp, r7
    a226:	d8b6      	bhi.n	a196 <usb_serial_read+0x2a>
	return count;
    a228:	4638      	mov	r0, r7
    a22a:	e7e3      	b.n	a1f4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a22c:	4608      	mov	r0, r1
    a22e:	e7e1      	b.n	a1f4 <usb_serial_read+0x88>
    a230:	200188b2 	.word	0x200188b2
    a234:	20200080 	.word	0x20200080
    a238:	2001884c 	.word	0x2001884c
    a23c:	2001882c 	.word	0x2001882c
    a240:	20018828 	.word	0x20018828
    a244:	200188b3 	.word	0x200188b3
    a248:	2001883c 	.word	0x2001883c

0000a24c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a24c:	4b0b      	ldr	r3, [pc, #44]	; (a27c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a24e:	4a0c      	ldr	r2, [pc, #48]	; (a280 <usb_serial_peekchar+0x34>)
    a250:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a252:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a254:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a256:	428a      	cmp	r2, r1
    a258:	d00d      	beq.n	a276 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a25a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a25c:	4809      	ldr	r0, [pc, #36]	; (a284 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a25e:	4a0a      	ldr	r2, [pc, #40]	; (a288 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a260:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a262:	490a      	ldr	r1, [pc, #40]	; (a28c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a264:	bf28      	it	cs
    a266:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a268:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a26a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a26e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a272:	5c58      	ldrb	r0, [r3, r1]
    a274:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a276:	f04f 30ff 	mov.w	r0, #4294967295
}
    a27a:	4770      	bx	lr
    a27c:	200188b2 	.word	0x200188b2
    a280:	200188b3 	.word	0x200188b3
    a284:	2001884c 	.word	0x2001884c
    a288:	20200080 	.word	0x20200080
    a28c:	2001883c 	.word	0x2001883c

0000a290 <usb_serial_available>:
	uint32_t n = rx_available;
    a290:	4b04      	ldr	r3, [pc, #16]	; (a2a4 <usb_serial_available+0x14>)
{
    a292:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a294:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a296:	b10c      	cbz	r4, a29c <usb_serial_available+0xc>
}
    a298:	4620      	mov	r0, r4
    a29a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a29c:	f000 f8e0 	bl	a460 <yield>
}
    a2a0:	4620      	mov	r0, r4
    a2a2:	bd10      	pop	{r4, pc}
    a2a4:	20018828 	.word	0x20018828

0000a2a8 <usb_serial_flush_input>:
{
    a2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a2ac:	4e14      	ldr	r6, [pc, #80]	; (a300 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a2ae:	4d15      	ldr	r5, [pc, #84]	; (a304 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a2b0:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a2b2:	782a      	ldrb	r2, [r5, #0]
    a2b4:	4293      	cmp	r3, r2
    a2b6:	d021      	beq.n	a2fc <usb_serial_flush_input+0x54>
    a2b8:	b2dc      	uxtb	r4, r3
    a2ba:	f8df 9050 	ldr.w	r9, [pc, #80]	; a30c <usb_serial_flush_input+0x64>
    a2be:	f8df b050 	ldr.w	fp, [pc, #80]	; a310 <usb_serial_flush_input+0x68>
    a2c2:	f8df 8050 	ldr.w	r8, [pc, #80]	; a314 <usb_serial_flush_input+0x6c>
    a2c6:	4f10      	ldr	r7, [pc, #64]	; (a308 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a2c8:	3401      	adds	r4, #1
    a2ca:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a2cc:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a2d0:	d901      	bls.n	a2d6 <usb_serial_flush_input+0x2e>
    a2d2:	2400      	movs	r4, #0
    a2d4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a2d6:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a2da:	f8db 3000 	ldr.w	r3, [fp]
    a2de:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a2e2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a2e6:	1a52      	subs	r2, r2, r1
    a2e8:	1a9b      	subs	r3, r3, r2
    a2ea:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a2ee:	f7ff fd17 	bl	9d20 <rx_queue_transfer>
		rx_tail = tail;
    a2f2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a2f6:	782b      	ldrb	r3, [r5, #0]
    a2f8:	42a3      	cmp	r3, r4
    a2fa:	d1e5      	bne.n	a2c8 <usb_serial_flush_input+0x20>
}
    a2fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a300:	200188b3 	.word	0x200188b3
    a304:	200188b2 	.word	0x200188b2
    a308:	2001883c 	.word	0x2001883c
    a30c:	2001884c 	.word	0x2001884c
    a310:	20018828 	.word	0x20018828
    a314:	2001882c 	.word	0x2001882c

0000a318 <usb_serial_getchar>:
{
    a318:	b500      	push	{lr}
    a31a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a31c:	2101      	movs	r1, #1
    a31e:	f10d 0007 	add.w	r0, sp, #7
    a322:	f7ff ff23 	bl	a16c <usb_serial_read>
    a326:	b120      	cbz	r0, a332 <usb_serial_getchar+0x1a>
    a328:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a32c:	b003      	add	sp, #12
    a32e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a332:	f04f 30ff 	mov.w	r0, #4294967295
    a336:	e7f9      	b.n	a32c <usb_serial_getchar+0x14>

0000a338 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a338:	4b09      	ldr	r3, [pc, #36]	; (a360 <usb_serial_putchar+0x28>)
{
    a33a:	b500      	push	{lr}
    a33c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a33e:	781b      	ldrb	r3, [r3, #0]
{
    a340:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a344:	b13b      	cbz	r3, a356 <usb_serial_putchar+0x1e>
    a346:	2101      	movs	r1, #1
    a348:	f10d 0007 	add.w	r0, sp, #7
    a34c:	f7ff fdba 	bl	9ec4 <usb_serial_write.part.0>
}
    a350:	b003      	add	sp, #12
    a352:	f85d fb04 	ldr.w	pc, [sp], #4
    a356:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a35a:	b003      	add	sp, #12
    a35c:	f85d fb04 	ldr.w	pc, [sp], #4
    a360:	200188b9 	.word	0x200188b9

0000a364 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a364:	4b04      	ldr	r3, [pc, #16]	; (a378 <usb_serial_write+0x14>)
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a36c:	b10b      	cbz	r3, a372 <usb_serial_write+0xe>
    a36e:	f7ff bda9 	b.w	9ec4 <usb_serial_write.part.0>
}
    a372:	4610      	mov	r0, r2
    a374:	4770      	bx	lr
    a376:	bf00      	nop
    a378:	200188b9 	.word	0x200188b9

0000a37c <usb_serial_write_buffer_free>:
{
    a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a380:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a382:	f8df 8044 	ldr.w	r8, [pc, #68]	; a3c8 <usb_serial_write_buffer_free+0x4c>
    a386:	2301      	movs	r3, #1
    a388:	4d0d      	ldr	r5, [pc, #52]	; (a3c0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a38a:	4627      	mov	r7, r4
    a38c:	4e0d      	ldr	r6, [pc, #52]	; (a3c4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a38e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a392:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a394:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a396:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a398:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a39a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a39e:	d005      	beq.n	a3ac <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a3a0:	f7ff fc84 	bl	9cac <usb_transfer_status>
    a3a4:	0603      	lsls	r3, r0, #24
    a3a6:	bf58      	it	pl
    a3a8:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a3ac:	2c04      	cmp	r4, #4
    a3ae:	d1f0      	bne.n	a392 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a3b0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a3b4:	2300      	movs	r3, #0
}
    a3b6:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a3b8:	f888 3000 	strb.w	r3, [r8]
}
    a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3c0:	20005000 	.word	0x20005000
    a3c4:	200188b6 	.word	0x200188b6
    a3c8:	200188b7 	.word	0x200188b7

0000a3cc <usb_serial_flush_output>:
{
    a3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a3d0:	4b1d      	ldr	r3, [pc, #116]	; (a448 <usb_serial_flush_output+0x7c>)
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	b113      	cbz	r3, a3dc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a3d6:	4d1d      	ldr	r5, [pc, #116]	; (a44c <usb_serial_flush_output+0x80>)
    a3d8:	882a      	ldrh	r2, [r5, #0]
    a3da:	b90a      	cbnz	r2, a3e0 <usb_serial_flush_output+0x14>
}
    a3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a3e0:	4e1b      	ldr	r6, [pc, #108]	; (a450 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a3e2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a3e6:	491b      	ldr	r1, [pc, #108]	; (a454 <usb_serial_flush_output+0x88>)
    a3e8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3ea:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3ec:	4c1a      	ldr	r4, [pc, #104]	; (a458 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a3ee:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a3f2:	4f1a      	ldr	r7, [pc, #104]	; (a45c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3f4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a3f8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3fa:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a3fc:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a3fe:	4621      	mov	r1, r4
    a400:	2300      	movs	r3, #0
    a402:	f7ff fc19 	bl	9c38 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a406:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a40a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a40e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a412:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a416:	3420      	adds	r4, #32
	} while (location < end_addr);
    a418:	42a2      	cmp	r2, r4
    a41a:	d8fa      	bhi.n	a412 <usb_serial_flush_output+0x46>
	asm("dsb");
    a41c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a420:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a424:	2004      	movs	r0, #4
    a426:	4641      	mov	r1, r8
    a428:	f7ff fc1e 	bl	9c68 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a42c:	7833      	ldrb	r3, [r6, #0]
    a42e:	3301      	adds	r3, #1
    a430:	b2db      	uxtb	r3, r3
    a432:	2b03      	cmp	r3, #3
    a434:	bf88      	it	hi
    a436:	2300      	movhi	r3, #0
    a438:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a43a:	2300      	movs	r3, #0
    a43c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a43e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a442:	703b      	strb	r3, [r7, #0]
}
    a444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a448:	200188b9 	.word	0x200188b9
    a44c:	20018898 	.word	0x20018898
    a450:	200188b6 	.word	0x200188b6
    a454:	20005000 	.word	0x20005000
    a458:	20201080 	.word	0x20201080
    a45c:	200188b7 	.word	0x200188b7

0000a460 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a464:	4e32      	ldr	r6, [pc, #200]	; (a530 <yield+0xd0>)
    a466:	7833      	ldrb	r3, [r6, #0]
    a468:	b163      	cbz	r3, a484 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a46a:	4f32      	ldr	r7, [pc, #200]	; (a534 <yield+0xd4>)
    a46c:	783a      	ldrb	r2, [r7, #0]
    a46e:	b94a      	cbnz	r2, a484 <yield+0x24>
	running = 1;
    a470:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a472:	07d9      	lsls	r1, r3, #31
	running = 1;
    a474:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a476:	d444      	bmi.n	a502 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a478:	079a      	lsls	r2, r3, #30
    a47a:	d426      	bmi.n	a4ca <yield+0x6a>

	running = 0;
    a47c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a47e:	075b      	lsls	r3, r3, #29
	running = 0;
    a480:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a482:	d401      	bmi.n	a488 <yield+0x28>
	
};
    a484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a488:	4b2b      	ldr	r3, [pc, #172]	; (a538 <yield+0xd8>)
    a48a:	681a      	ldr	r2, [r3, #0]
    a48c:	2a00      	cmp	r2, #0
    a48e:	d0f9      	beq.n	a484 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a490:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a494:	2a00      	cmp	r2, #0
    a496:	d1f5      	bne.n	a484 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a498:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a49c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a49e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a4a0:	2800      	cmp	r0, #0
    a4a2:	d03b      	beq.n	a51c <yield+0xbc>
		if (runningFromYield) {
    a4a4:	4c25      	ldr	r4, [pc, #148]	; (a53c <yield+0xdc>)
    a4a6:	7821      	ldrb	r1, [r4, #0]
    a4a8:	2900      	cmp	r1, #0
    a4aa:	d137      	bne.n	a51c <yield+0xbc>
		runningFromYield = true;
    a4ac:	2201      	movs	r2, #1
    a4ae:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a4b0:	6942      	ldr	r2, [r0, #20]
    a4b2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a4b4:	2a00      	cmp	r2, #0
    a4b6:	d038      	beq.n	a52a <yield+0xca>
			firstYield->_prev = nullptr;
    a4b8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a4ba:	b905      	cbnz	r5, a4be <yield+0x5e>
    a4bc:	b662      	cpsie	i
		first->_triggered = false;
    a4be:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a4c0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a4c2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a4c4:	4798      	blx	r3
		runningFromYield = false;
    a4c6:	7025      	strb	r5, [r4, #0]
    a4c8:	e7dc      	b.n	a484 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a4ca:	f8df 807c 	ldr.w	r8, [pc, #124]	; a548 <yield+0xe8>
    a4ce:	f898 2000 	ldrb.w	r2, [r8]
    a4d2:	2a00      	cmp	r2, #0
    a4d4:	d0d2      	beq.n	a47c <yield+0x1c>
    a4d6:	2500      	movs	r5, #0
    a4d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; a54c <yield+0xec>
    a4dc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a4de:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a4e2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a4e4:	6823      	ldr	r3, [r4, #0]
    a4e6:	4620      	mov	r0, r4
    a4e8:	691b      	ldr	r3, [r3, #16]
    a4ea:	4798      	blx	r3
    a4ec:	b110      	cbz	r0, a4f4 <yield+0x94>
    a4ee:	6963      	ldr	r3, [r4, #20]
    a4f0:	689b      	ldr	r3, [r3, #8]
    a4f2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a4f4:	f898 2000 	ldrb.w	r2, [r8]
    a4f8:	b2eb      	uxtb	r3, r5
    a4fa:	429a      	cmp	r2, r3
    a4fc:	d8ef      	bhi.n	a4de <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a4fe:	7833      	ldrb	r3, [r6, #0]
    a500:	e7bc      	b.n	a47c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a502:	f7ff fec5 	bl	a290 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a506:	b968      	cbnz	r0, a524 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a508:	4b0d      	ldr	r3, [pc, #52]	; (a540 <yield+0xe0>)
    a50a:	781b      	ldrb	r3, [r3, #0]
    a50c:	b90b      	cbnz	r3, a512 <yield+0xb2>
    a50e:	7833      	ldrb	r3, [r6, #0]
    a510:	e7b2      	b.n	a478 <yield+0x18>
    a512:	7833      	ldrb	r3, [r6, #0]
    a514:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a518:	7033      	strb	r3, [r6, #0]
    a51a:	e7ad      	b.n	a478 <yield+0x18>
		if (doit) __enable_irq();
    a51c:	2d00      	cmp	r5, #0
    a51e:	d1b1      	bne.n	a484 <yield+0x24>
    a520:	b662      	cpsie	i
    a522:	e7af      	b.n	a484 <yield+0x24>
		if (Serial.available()) serialEvent();
    a524:	f000 fa8a 	bl	aa3c <serialEvent()>
    a528:	e7ee      	b.n	a508 <yield+0xa8>
			lastYield = nullptr;
    a52a:	4b06      	ldr	r3, [pc, #24]	; (a544 <yield+0xe4>)
    a52c:	601a      	str	r2, [r3, #0]
    a52e:	e7c4      	b.n	a4ba <yield+0x5a>
    a530:	20004aa2 	.word	0x20004aa2
    a534:	2001889e 	.word	0x2001889e
    a538:	20005088 	.word	0x20005088
    a53c:	2001889c 	.word	0x2001889c
    a540:	60001f58 	.word	0x60001f58
    a544:	20005094 	.word	0x20005094
    a548:	2001889d 	.word	0x2001889d
    a54c:	20005098 	.word	0x20005098

0000a550 <EventResponder::runFromInterrupt()>:
{
    a550:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a552:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a556:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a558:	4c0c      	ldr	r4, [pc, #48]	; (a58c <EventResponder::runFromInterrupt()+0x3c>)
    a55a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a55c:	b180      	cbz	r0, a580 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    a55e:	4e0c      	ldr	r6, [pc, #48]	; (a590 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    a560:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    a562:	6943      	ldr	r3, [r0, #20]
    a564:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    a566:	b173      	cbz	r3, a586 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a568:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    a56a:	b902      	cbnz	r2, a56e <EventResponder::runFromInterrupt()+0x1e>
    a56c:	b662      	cpsie	i
			(*(first->_function))(*first);
    a56e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    a570:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a572:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a574:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a578:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a57a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a57c:	2800      	cmp	r0, #0
    a57e:	d1f0      	bne.n	a562 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    a580:	b902      	cbnz	r2, a584 <EventResponder::runFromInterrupt()+0x34>
    a582:	b662      	cpsie	i
}
    a584:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    a586:	6033      	str	r3, [r6, #0]
    a588:	e7ef      	b.n	a56a <EventResponder::runFromInterrupt()+0x1a>
    a58a:	bf00      	nop
    a58c:	20005090 	.word	0x20005090
    a590:	2000508c 	.word	0x2000508c

0000a594 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    a594:	f7ff bfdc 	b.w	a550 <EventResponder::runFromInterrupt()>

0000a598 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a598:	4904      	ldr	r1, [pc, #16]	; (a5ac <systick_isr+0x14>)
	systick_millis_count++;
    a59a:	4a05      	ldr	r2, [pc, #20]	; (a5b0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    a59c:	6849      	ldr	r1, [r1, #4]
    a59e:	4b05      	ldr	r3, [pc, #20]	; (a5b4 <systick_isr+0x1c>)
    a5a0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    a5a2:	6813      	ldr	r3, [r2, #0]
    a5a4:	3301      	adds	r3, #1
    a5a6:	6013      	str	r3, [r2, #0]
}
    a5a8:	4770      	bx	lr
    a5aa:	bf00      	nop
    a5ac:	e0001000 	.word	0xe0001000
    a5b0:	20018870 	.word	0x20018870
    a5b4:	2001886c 	.word	0x2001886c

0000a5b8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a5b8:	49a2      	ldr	r1, [pc, #648]	; (a844 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5ba:	4ba3      	ldr	r3, [pc, #652]	; (a848 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a5bc:	4288      	cmp	r0, r1
{
    a5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a5c2:	4ca2      	ldr	r4, [pc, #648]	; (a84c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5c4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a5c6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a5c8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a5cc:	d91b      	bls.n	a606 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a5ce:	4ba0      	ldr	r3, [pc, #640]	; (a850 <set_arm_clock+0x298>)
    a5d0:	4298      	cmp	r0, r3
    a5d2:	f240 8102 	bls.w	a7da <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5d6:	1ac3      	subs	r3, r0, r3
    a5d8:	499e      	ldr	r1, [pc, #632]	; (a854 <set_arm_clock+0x29c>)
    a5da:	0a1b      	lsrs	r3, r3, #8
    a5dc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5e0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5e4:	09db      	lsrs	r3, r3, #7
    a5e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a5ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a5ee:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a5f2:	428b      	cmp	r3, r1
    a5f4:	bf28      	it	cs
    a5f6:	460b      	movcs	r3, r1
    a5f8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a5fc:	4b96      	ldr	r3, [pc, #600]	; (a858 <set_arm_clock+0x2a0>)
    a5fe:	fba3 3707 	umull	r3, r7, r3, r7
    a602:	08ff      	lsrs	r7, r7, #3
    a604:	e004      	b.n	a610 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a606:	4f95      	ldr	r7, [pc, #596]	; (a85c <set_arm_clock+0x2a4>)
    a608:	42b8      	cmp	r0, r7
    a60a:	bf8c      	ite	hi
    a60c:	270e      	movhi	r7, #14
    a60e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a610:	498d      	ldr	r1, [pc, #564]	; (a848 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a612:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a616:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a61a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a61c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a620:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a624:	d20c      	bcs.n	a640 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a626:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a62a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a62e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a632:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a636:	680b      	ldr	r3, [r1, #0]
    a638:	2b00      	cmp	r3, #0
    a63a:	dafc      	bge.n	a636 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a63c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a640:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a644:	d124      	bne.n	a690 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a646:	4986      	ldr	r1, [pc, #536]	; (a860 <set_arm_clock+0x2a8>)
    a648:	690c      	ldr	r4, [r1, #16]
    a64a:	4986      	ldr	r1, [pc, #536]	; (a864 <set_arm_clock+0x2ac>)
    a64c:	43a1      	bics	r1, r4
    a64e:	f000 80ea 	beq.w	a826 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a652:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a656:	4634      	mov	r4, r6
    a658:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a65c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a660:	d004      	beq.n	a66c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a662:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a666:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a668:	4b77      	ldr	r3, [pc, #476]	; (a848 <set_arm_clock+0x290>)
    a66a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a66c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a670:	d007      	beq.n	a682 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a672:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a676:	4974      	ldr	r1, [pc, #464]	; (a848 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a678:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a67a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a67c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a67e:	071a      	lsls	r2, r3, #28
    a680:	d4fc      	bmi.n	a67c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a682:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a686:	4a70      	ldr	r2, [pc, #448]	; (a848 <set_arm_clock+0x290>)
    a688:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a68a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a68c:	069b      	lsls	r3, r3, #26
    a68e:	d4fc      	bmi.n	a68a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a690:	4c75      	ldr	r4, [pc, #468]	; (a868 <set_arm_clock+0x2b0>)
    a692:	42a0      	cmp	r0, r4
    a694:	f200 80ce 	bhi.w	a834 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a698:	f04f 0c01 	mov.w	ip, #1
    a69c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a69e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a6a0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a6a4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a6a8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a6ac:	42a2      	cmp	r2, r4
    a6ae:	d818      	bhi.n	a6e2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a6b0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a6b4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a6b8:	f040 808d 	bne.w	a7d6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a6bc:	f1bc 0f04 	cmp.w	ip, #4
    a6c0:	f200 8091 	bhi.w	a7e6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a6c4:	180a      	adds	r2, r1, r0
    a6c6:	42a2      	cmp	r2, r4
    a6c8:	f200 80a4 	bhi.w	a814 <set_arm_clock+0x25c>
    a6cc:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a6d0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a6d2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a6d6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a6da:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a6de:	42a2      	cmp	r2, r4
    a6e0:	d9e6      	bls.n	a6b0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a6e2:	f10c 31ff 	add.w	r1, ip, #4294967295
    a6e6:	028c      	lsls	r4, r1, #10
    a6e8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6ec:	485f      	ldr	r0, [pc, #380]	; (a86c <set_arm_clock+0x2b4>)
    a6ee:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a6f0:	4a5f      	ldr	r2, [pc, #380]	; (a870 <set_arm_clock+0x2b8>)
    a6f2:	4290      	cmp	r0, r2
    a6f4:	d97f      	bls.n	a7f6 <set_arm_clock+0x23e>
    a6f6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; a89c <set_arm_clock+0x2e4>
    a6fa:	226c      	movs	r2, #108	; 0x6c
    a6fc:	485d      	ldr	r0, [pc, #372]	; (a874 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6fe:	4d58      	ldr	r5, [pc, #352]	; (a860 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a700:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a704:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a708:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a70c:	f8df c190 	ldr.w	ip, [pc, #400]	; a8a0 <set_arm_clock+0x2e8>
    a710:	ea0e 0c0c 	and.w	ip, lr, ip
    a714:	45d4      	cmp	ip, sl
    a716:	d009      	beq.n	a72c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a71c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a720:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a724:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a726:	682a      	ldr	r2, [r5, #0]
    a728:	2a00      	cmp	r2, #0
    a72a:	dafc      	bge.n	a726 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a72c:	4a46      	ldr	r2, [pc, #280]	; (a848 <set_arm_clock+0x290>)
    a72e:	6915      	ldr	r5, [r2, #16]
    a730:	f005 0507 	and.w	r5, r5, #7
    a734:	429d      	cmp	r5, r3
    a736:	d003      	beq.n	a740 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a738:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a73a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a73c:	03dd      	lsls	r5, r3, #15
    a73e:	d4fc      	bmi.n	a73a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a740:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a744:	d009      	beq.n	a75a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a746:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a74a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a74e:	4a3e      	ldr	r2, [pc, #248]	; (a848 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a750:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a752:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a754:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a756:	0799      	lsls	r1, r3, #30
    a758:	d4fc      	bmi.n	a754 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a75a:	4947      	ldr	r1, [pc, #284]	; (a878 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a75c:	4a47      	ldr	r2, [pc, #284]	; (a87c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a75e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a760:	4291      	cmp	r1, r2
    a762:	d83c      	bhi.n	a7de <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a764:	4b46      	ldr	r3, [pc, #280]	; (a880 <set_arm_clock+0x2c8>)
    a766:	09c9      	lsrs	r1, r1, #7
    a768:	fba3 3101 	umull	r3, r1, r3, r1
    a76c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a76e:	1e4b      	subs	r3, r1, #1
    a770:	021b      	lsls	r3, r3, #8
    a772:	ea86 0203 	eor.w	r2, r6, r3
    a776:	f412 7f40 	tst.w	r2, #768	; 0x300
    a77a:	d006      	beq.n	a78a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a77c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a780:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    a784:	4a30      	ldr	r2, [pc, #192]	; (a848 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a786:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    a788:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a78a:	4a2f      	ldr	r2, [pc, #188]	; (a848 <set_arm_clock+0x290>)
    a78c:	6953      	ldr	r3, [r2, #20]
    a78e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    a792:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a794:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a796:	069b      	lsls	r3, r3, #26
    a798:	d4fc      	bmi.n	a794 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a79a:	4b3a      	ldr	r3, [pc, #232]	; (a884 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a79c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a79e:	fba3 2300 	umull	r2, r3, r3, r0
    a7a2:	f04f 32ff 	mov.w	r2, #4294967295
    a7a6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    a7aa:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a7ae:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    a7b2:	4a35      	ldr	r2, [pc, #212]	; (a888 <set_arm_clock+0x2d0>)
    a7b4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a7b6:	4a35      	ldr	r2, [pc, #212]	; (a88c <set_arm_clock+0x2d4>)
    a7b8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a7ba:	4a35      	ldr	r2, [pc, #212]	; (a890 <set_arm_clock+0x2d8>)
    a7bc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a7be:	d208      	bcs.n	a7d2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a7c0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a7c4:	4a21      	ldr	r2, [pc, #132]	; (a84c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a7c6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    a7ca:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a7cc:	6813      	ldr	r3, [r2, #0]
    a7ce:	2b00      	cmp	r3, #0
    a7d0:	dafc      	bge.n	a7cc <set_arm_clock+0x214>
	}

	return frequency;
}
    a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7d6:	4673      	mov	r3, lr
    a7d8:	e762      	b.n	a6a0 <set_arm_clock+0xe8>
    a7da:	2712      	movs	r7, #18
    a7dc:	e718      	b.n	a610 <set_arm_clock+0x58>
    a7de:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    a7e2:	2104      	movs	r1, #4
    a7e4:	e7c5      	b.n	a772 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7e6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7ea:	4820      	ldr	r0, [pc, #128]	; (a86c <set_arm_clock+0x2b4>)
    a7ec:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7ee:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7f0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a7f2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7f6:	4a27      	ldr	r2, [pc, #156]	; (a894 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a7f8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; a8a4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7fc:	fba2 2000 	umull	r2, r0, r2, r0
    a800:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    a802:	4825      	ldr	r0, [pc, #148]	; (a898 <set_arm_clock+0x2e0>)
    a804:	2a36      	cmp	r2, #54	; 0x36
    a806:	bf38      	it	cc
    a808:	2236      	movcc	r2, #54	; 0x36
    a80a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a80e:	ea42 0a0a 	orr.w	sl, r2, sl
    a812:	e774      	b.n	a6fe <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a814:	ea4f 248c 	mov.w	r4, ip, lsl #10
    a818:	2300      	movs	r3, #0
    a81a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    a81e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    a822:	46ac      	mov	ip, r5
    a824:	e762      	b.n	a6ec <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a826:	461d      	mov	r5, r3
    a828:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    a82c:	4611      	mov	r1, r2
    a82e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    a832:	e713      	b.n	a65c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    a834:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    a836:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a83a:	4602      	mov	r2, r0
    a83c:	4631      	mov	r1, r6
    a83e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    a840:	46e6      	mov	lr, ip
    a842:	e753      	b.n	a6ec <set_arm_clock+0x134>
    a844:	1f78a400 	.word	0x1f78a400
    a848:	400fc000 	.word	0x400fc000
    a84c:	40080000 	.word	0x40080000
    a850:	23c34600 	.word	0x23c34600
    a854:	004cb223 	.word	0x004cb223
    a858:	51eb851f 	.word	0x51eb851f
    a85c:	016e3600 	.word	0x016e3600
    a860:	400d8000 	.word	0x400d8000
    a864:	80003040 	.word	0x80003040
    a868:	269fb1ff 	.word	0x269fb1ff
    a86c:	005b8d80 	.word	0x005b8d80
    a870:	4df67eff 	.word	0x4df67eff
    a874:	4d3f6400 	.word	0x4d3f6400
    a878:	08f0d17f 	.word	0x08f0d17f
    a87c:	2cb4177f 	.word	0x2cb4177f
    a880:	00e5109f 	.word	0x00e5109f
    a884:	431bde83 	.word	0x431bde83
    a888:	2000448c 	.word	0x2000448c
    a88c:	20004488 	.word	0x20004488
    a890:	20018868 	.word	0x20018868
    a894:	165e9f81 	.word	0x165e9f81
    a898:	00b71b00 	.word	0x00b71b00
    a89c:	8000206c 	.word	0x8000206c
    a8a0:	8001307f 	.word	0x8001307f
    a8a4:	80002000 	.word	0x80002000

0000a8a8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a8a8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    a8aa:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a8ac:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    a8b0:	4619      	mov	r1, r3
{
    a8b2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a8b4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a8b8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a8bc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a8c0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    a8c4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    a8c8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    a8ca:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a8ce:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a8d2:	b29b      	uxth	r3, r3
    a8d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    a8d8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a8dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    a8e0:	3101      	adds	r1, #1
    a8e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    a8e6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a8e8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a8ea:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a8ee:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a8f0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a8f2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a8f4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a8f6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    a8fa:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a8fc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a8fe:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a900:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    a902:	d1eb      	bne.n	a8dc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a904:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a908:	b29b      	uxth	r3, r3
    a90a:	f043 030f 	orr.w	r3, r3, #15
    a90e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a912:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    a916:	b29b      	uxth	r3, r3
    a918:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a91c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    a920:	bd10      	pop	{r4, pc}
    a922:	bf00      	nop

0000a924 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a924:	4b37      	ldr	r3, [pc, #220]	; (aa04 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a926:	4a38      	ldr	r2, [pc, #224]	; (aa08 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a928:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    a92a:	4838      	ldr	r0, [pc, #224]	; (aa0c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a92c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    a930:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a932:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a934:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a938:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a93c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a940:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a944:	430a      	orrs	r2, r1
    a946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    a94a:	f7ff ffad 	bl	a8a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    a94e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a952:	f7ff ffa9 	bl	a8a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    a956:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a95a:	f7ff ffa5 	bl	a8a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    a95e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    a962:	f7ff ffa1 	bl	a8a8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    a966:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a968:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a96c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    a970:	4611      	mov	r1, r2
    a972:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a976:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a97a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a97c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a97e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a980:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a982:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a986:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a988:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a98a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a98e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a990:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a992:	d1ee      	bne.n	a972 <pwm_init+0x4e>
    a994:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a996:	481e      	ldr	r0, [pc, #120]	; (aa10 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a998:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a99c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a9a0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a9a2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a9a6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a9aa:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a9ae:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a9b2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a9b4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a9b6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a9b8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a9ba:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a9be:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a9c0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a9c2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a9c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a9c8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    a9ca:	d1ee      	bne.n	a9aa <pwm_init+0x86>
    a9cc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    a9ce:	4811      	ldr	r0, [pc, #68]	; (aa14 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a9d0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a9d2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    a9d6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a9d8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a9dc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    a9e0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    a9e4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    a9e8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a9ea:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    a9ec:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    a9ee:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a9f0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a9f2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a9f4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a9f6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    a9fa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a9fc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    aa00:	d1ee      	bne.n	a9e0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    aa02:	bd70      	pop	{r4, r5, r6, pc}
    aa04:	400fc000 	.word	0x400fc000
    aa08:	fc030000 	.word	0xfc030000
    aa0c:	403dc000 	.word	0x403dc000
    aa10:	401e0000 	.word	0x401e0000
    aa14:	401e4000 	.word	0x401e4000

0000aa18 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    aa18:	4a07      	ldr	r2, [pc, #28]	; (aa38 <rtc_get+0x20>)
    aa1a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    aa1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    aa1e:	4619      	mov	r1, r3
    aa20:	4684      	mov	ip, r0
    aa22:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    aa24:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    aa26:	4299      	cmp	r1, r3
    aa28:	d1f9      	bne.n	aa1e <rtc_get+0x6>
    aa2a:	4584      	cmp	ip, r0
    aa2c:	d1f7      	bne.n	aa1e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    aa2e:	0bdb      	lsrs	r3, r3, #15
}
    aa30:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    aa34:	4770      	bx	lr
    aa36:	bf00      	nop
    aa38:	400d4000 	.word	0x400d4000

0000aa3c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    aa3c:	4770      	bx	lr
    aa3e:	bf00      	nop

0000aa40 <sm_align_pool>:
{
    aa40:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    aa42:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    aa46:	b15b      	cbz	r3, aa60 <sm_align_pool+0x20>
    aa48:	b1ba      	cbz	r2, aa7a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    aa4a:	4b0f      	ldr	r3, [pc, #60]	; (aa88 <sm_align_pool+0x48>)
    aa4c:	fba3 1302 	umull	r1, r3, r3, r2
    aa50:	08db      	lsrs	r3, r3, #3
    aa52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    aa56:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    aa5a:	d10a      	bne.n	aa72 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    aa5c:	2001      	movs	r0, #1
}
    aa5e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    aa60:	4b09      	ldr	r3, [pc, #36]	; (aa88 <sm_align_pool+0x48>)
    aa62:	fba3 1302 	umull	r1, r3, r3, r2
    aa66:	08db      	lsrs	r3, r3, #3
    aa68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    aa6c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    aa70:	d001      	beq.n	aa76 <sm_align_pool+0x36>
    aa72:	1ad2      	subs	r2, r2, r3
    aa74:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    aa76:	2af0      	cmp	r2, #240	; 0xf0
    aa78:	d8f0      	bhi.n	aa5c <sm_align_pool+0x1c>
		errno = ENOSPC;
    aa7a:	f001 fa17 	bl	beac <__errno>
    aa7e:	221c      	movs	r2, #28
    aa80:	4603      	mov	r3, r0
    aa82:	2000      	movs	r0, #0
    aa84:	601a      	str	r2, [r3, #0]
}
    aa86:	bd08      	pop	{r3, pc}
    aa88:	aaaaaaab 	.word	0xaaaaaaab

0000aa8c <sm_set_pool>:
{
    aa8c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    aa8e:	4604      	mov	r4, r0
    aa90:	b338      	cbz	r0, aae2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    aa92:	b119      	cbz	r1, aa9c <sm_set_pool+0x10>
    aa94:	fab2 f682 	clz	r6, r2
    aa98:	0976      	lsrs	r6, r6, #5
    aa9a:	b9a2      	cbnz	r2, aac6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    aa9c:	6820      	ldr	r0, [r4, #0]
    aa9e:	b300      	cbz	r0, aae2 <sm_set_pool+0x56>
    aaa0:	6862      	ldr	r2, [r4, #4]
    aaa2:	b1f2      	cbz	r2, aae2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    aaa4:	4b18      	ldr	r3, [pc, #96]	; (ab08 <sm_set_pool+0x7c>)
    aaa6:	4919      	ldr	r1, [pc, #100]	; (ab0c <sm_set_pool+0x80>)
    aaa8:	fb02 f303 	mul.w	r3, r2, r3
    aaac:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    aab0:	d317      	bcc.n	aae2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    aab2:	68a3      	ldr	r3, [r4, #8]
    aab4:	b9e3      	cbnz	r3, aaf0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    aab6:	2200      	movs	r2, #0
			return 1;
    aab8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    aaba:	6022      	str	r2, [r4, #0]
    aabc:	6062      	str	r2, [r4, #4]
    aabe:	60a2      	str	r2, [r4, #8]
    aac0:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    aac2:	4618      	mov	r0, r3
    aac4:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    aac6:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    aac8:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    aaca:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    aace:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    aad0:	f7ff ffb6 	bl	aa40 <sm_align_pool>
    aad4:	4603      	mov	r3, r0
    aad6:	2800      	cmp	r0, #0
    aad8:	d0f3      	beq.n	aac2 <sm_set_pool+0x36>
	if (do_zero) {
    aada:	b96d      	cbnz	r5, aaf8 <sm_set_pool+0x6c>
	return 1;
    aadc:	2301      	movs	r3, #1
}
    aade:	4618      	mov	r0, r3
    aae0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    aae2:	f001 f9e3 	bl	beac <__errno>
    aae6:	2216      	movs	r2, #22
		return 0;
    aae8:	2300      	movs	r3, #0
		errno = EINVAL;
    aaea:	6002      	str	r2, [r0, #0]
}
    aaec:	4618      	mov	r0, r3
    aaee:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    aaf0:	2100      	movs	r1, #0
    aaf2:	f001 f885 	bl	bc00 <memset>
    aaf6:	e7de      	b.n	aab6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    aaf8:	6862      	ldr	r2, [r4, #4]
    aafa:	4631      	mov	r1, r6
    aafc:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    aafe:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    ab00:	f001 f87e 	bl	bc00 <memset>
	return 1;
    ab04:	2301      	movs	r3, #1
    ab06:	e7dc      	b.n	aac2 <sm_set_pool+0x36>
    ab08:	aaaaaaab 	.word	0xaaaaaaab
    ab0c:	15555555 	.word	0x15555555

0000ab10 <__aeabi_atexit>:
    ab10:	4603      	mov	r3, r0
    ab12:	4608      	mov	r0, r1
    ab14:	4619      	mov	r1, r3
    ab16:	f000 be8d 	b.w	b834 <__cxa_atexit>
    ab1a:	bf00      	nop

0000ab1c <atol>:
    ab1c:	220a      	movs	r2, #10
    ab1e:	2100      	movs	r1, #0
    ab20:	f000 bd7c 	b.w	b61c <strtol>

0000ab24 <itoa>:
    ab24:	1e93      	subs	r3, r2, #2
    ab26:	2b22      	cmp	r3, #34	; 0x22
    ab28:	b510      	push	{r4, lr}
    ab2a:	460c      	mov	r4, r1
    ab2c:	d80c      	bhi.n	ab48 <itoa+0x24>
    ab2e:	2a0a      	cmp	r2, #10
    ab30:	d003      	beq.n	ab3a <itoa+0x16>
    ab32:	f000 fe2f 	bl	b794 <__utoa>
    ab36:	4620      	mov	r0, r4
    ab38:	bd10      	pop	{r4, pc}
    ab3a:	2800      	cmp	r0, #0
    ab3c:	daf9      	bge.n	ab32 <itoa+0xe>
    ab3e:	232d      	movs	r3, #45	; 0x2d
    ab40:	f801 3b01 	strb.w	r3, [r1], #1
    ab44:	4240      	negs	r0, r0
    ab46:	e7f4      	b.n	ab32 <itoa+0xe>
    ab48:	2300      	movs	r3, #0
    ab4a:	700b      	strb	r3, [r1, #0]
    ab4c:	4618      	mov	r0, r3
    ab4e:	bd10      	pop	{r4, pc}

0000ab50 <malloc>:
    ab50:	4b02      	ldr	r3, [pc, #8]	; (ab5c <malloc+0xc>)
    ab52:	4601      	mov	r1, r0
    ab54:	6818      	ldr	r0, [r3, #0]
    ab56:	f000 b80b 	b.w	ab70 <_malloc_r>
    ab5a:	bf00      	nop
    ab5c:	20004a34 	.word	0x20004a34

0000ab60 <free>:
    ab60:	4b02      	ldr	r3, [pc, #8]	; (ab6c <free+0xc>)
    ab62:	4601      	mov	r1, r0
    ab64:	6818      	ldr	r0, [r3, #0]
    ab66:	f001 bcad 	b.w	c4c4 <_free_r>
    ab6a:	bf00      	nop
    ab6c:	20004a34 	.word	0x20004a34

0000ab70 <_malloc_r>:
    ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab74:	f101 060b 	add.w	r6, r1, #11
    ab78:	2e16      	cmp	r6, #22
    ab7a:	b083      	sub	sp, #12
    ab7c:	4604      	mov	r4, r0
    ab7e:	d824      	bhi.n	abca <_malloc_r+0x5a>
    ab80:	2910      	cmp	r1, #16
    ab82:	f200 80ba 	bhi.w	acfa <_malloc_r+0x18a>
    ab86:	f000 faa3 	bl	b0d0 <__malloc_lock>
    ab8a:	2610      	movs	r6, #16
    ab8c:	2218      	movs	r2, #24
    ab8e:	2002      	movs	r0, #2
    ab90:	4fb5      	ldr	r7, [pc, #724]	; (ae68 <_malloc_r+0x2f8>)
    ab92:	443a      	add	r2, r7
    ab94:	f1a2 0108 	sub.w	r1, r2, #8
    ab98:	6853      	ldr	r3, [r2, #4]
    ab9a:	428b      	cmp	r3, r1
    ab9c:	f000 80ba 	beq.w	ad14 <_malloc_r+0x1a4>
    aba0:	685a      	ldr	r2, [r3, #4]
    aba2:	68d9      	ldr	r1, [r3, #12]
    aba4:	f022 0203 	bic.w	r2, r2, #3
    aba8:	441a      	add	r2, r3
    abaa:	689d      	ldr	r5, [r3, #8]
    abac:	60e9      	str	r1, [r5, #12]
    abae:	608d      	str	r5, [r1, #8]
    abb0:	6851      	ldr	r1, [r2, #4]
    abb2:	f041 0101 	orr.w	r1, r1, #1
    abb6:	4620      	mov	r0, r4
    abb8:	6051      	str	r1, [r2, #4]
    abba:	f103 0508 	add.w	r5, r3, #8
    abbe:	f000 fa8d 	bl	b0dc <__malloc_unlock>
    abc2:	4628      	mov	r0, r5
    abc4:	b003      	add	sp, #12
    abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abca:	f036 0607 	bics.w	r6, r6, #7
    abce:	f100 8094 	bmi.w	acfa <_malloc_r+0x18a>
    abd2:	42b1      	cmp	r1, r6
    abd4:	f200 8091 	bhi.w	acfa <_malloc_r+0x18a>
    abd8:	f000 fa7a 	bl	b0d0 <__malloc_lock>
    abdc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    abe0:	f0c0 819a 	bcc.w	af18 <_malloc_r+0x3a8>
    abe4:	0a73      	lsrs	r3, r6, #9
    abe6:	f000 808f 	beq.w	ad08 <_malloc_r+0x198>
    abea:	2b04      	cmp	r3, #4
    abec:	f200 816f 	bhi.w	aece <_malloc_r+0x35e>
    abf0:	09b3      	lsrs	r3, r6, #6
    abf2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    abf6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    abfa:	00c3      	lsls	r3, r0, #3
    abfc:	4f9a      	ldr	r7, [pc, #616]	; (ae68 <_malloc_r+0x2f8>)
    abfe:	443b      	add	r3, r7
    ac00:	f1a3 0508 	sub.w	r5, r3, #8
    ac04:	685b      	ldr	r3, [r3, #4]
    ac06:	429d      	cmp	r5, r3
    ac08:	d106      	bne.n	ac18 <_malloc_r+0xa8>
    ac0a:	e00c      	b.n	ac26 <_malloc_r+0xb6>
    ac0c:	2900      	cmp	r1, #0
    ac0e:	f280 8127 	bge.w	ae60 <_malloc_r+0x2f0>
    ac12:	68db      	ldr	r3, [r3, #12]
    ac14:	429d      	cmp	r5, r3
    ac16:	d006      	beq.n	ac26 <_malloc_r+0xb6>
    ac18:	685a      	ldr	r2, [r3, #4]
    ac1a:	f022 0203 	bic.w	r2, r2, #3
    ac1e:	1b91      	subs	r1, r2, r6
    ac20:	290f      	cmp	r1, #15
    ac22:	ddf3      	ble.n	ac0c <_malloc_r+0x9c>
    ac24:	4660      	mov	r0, ip
    ac26:	693d      	ldr	r5, [r7, #16]
    ac28:	f8df c250 	ldr.w	ip, [pc, #592]	; ae7c <_malloc_r+0x30c>
    ac2c:	4565      	cmp	r5, ip
    ac2e:	d07c      	beq.n	ad2a <_malloc_r+0x1ba>
    ac30:	686a      	ldr	r2, [r5, #4]
    ac32:	f022 0203 	bic.w	r2, r2, #3
    ac36:	1b93      	subs	r3, r2, r6
    ac38:	2b0f      	cmp	r3, #15
    ac3a:	f300 817b 	bgt.w	af34 <_malloc_r+0x3c4>
    ac3e:	2b00      	cmp	r3, #0
    ac40:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ac44:	f280 816c 	bge.w	af20 <_malloc_r+0x3b0>
    ac48:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    ac4c:	f080 811a 	bcs.w	ae84 <_malloc_r+0x314>
    ac50:	08d3      	lsrs	r3, r2, #3
    ac52:	6879      	ldr	r1, [r7, #4]
    ac54:	3301      	adds	r3, #1
    ac56:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    ac5a:	2201      	movs	r2, #1
    ac5c:	fa02 f20e 	lsl.w	r2, r2, lr
    ac60:	430a      	orrs	r2, r1
    ac62:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ac66:	f8c5 e008 	str.w	lr, [r5, #8]
    ac6a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ac6e:	3908      	subs	r1, #8
    ac70:	60e9      	str	r1, [r5, #12]
    ac72:	607a      	str	r2, [r7, #4]
    ac74:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ac78:	f8ce 500c 	str.w	r5, [lr, #12]
    ac7c:	1083      	asrs	r3, r0, #2
    ac7e:	2101      	movs	r1, #1
    ac80:	4099      	lsls	r1, r3
    ac82:	4291      	cmp	r1, r2
    ac84:	d857      	bhi.n	ad36 <_malloc_r+0x1c6>
    ac86:	4211      	tst	r1, r2
    ac88:	d106      	bne.n	ac98 <_malloc_r+0x128>
    ac8a:	f020 0003 	bic.w	r0, r0, #3
    ac8e:	0049      	lsls	r1, r1, #1
    ac90:	4211      	tst	r1, r2
    ac92:	f100 0004 	add.w	r0, r0, #4
    ac96:	d0fa      	beq.n	ac8e <_malloc_r+0x11e>
    ac98:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ac9c:	464d      	mov	r5, r9
    ac9e:	4686      	mov	lr, r0
    aca0:	f8d5 800c 	ldr.w	r8, [r5, #12]
    aca4:	4545      	cmp	r5, r8
    aca6:	d108      	bne.n	acba <_malloc_r+0x14a>
    aca8:	e11d      	b.n	aee6 <_malloc_r+0x376>
    acaa:	2b00      	cmp	r3, #0
    acac:	f280 8124 	bge.w	aef8 <_malloc_r+0x388>
    acb0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    acb4:	4545      	cmp	r5, r8
    acb6:	f000 8116 	beq.w	aee6 <_malloc_r+0x376>
    acba:	f8d8 2004 	ldr.w	r2, [r8, #4]
    acbe:	f022 0203 	bic.w	r2, r2, #3
    acc2:	1b93      	subs	r3, r2, r6
    acc4:	2b0f      	cmp	r3, #15
    acc6:	ddf0      	ble.n	acaa <_malloc_r+0x13a>
    acc8:	4620      	mov	r0, r4
    acca:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    acce:	eb08 0106 	add.w	r1, r8, r6
    acd2:	f046 0601 	orr.w	r6, r6, #1
    acd6:	f8c8 6004 	str.w	r6, [r8, #4]
    acda:	60ec      	str	r4, [r5, #12]
    acdc:	60a5      	str	r5, [r4, #8]
    acde:	f043 0401 	orr.w	r4, r3, #1
    ace2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ace6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    acea:	604c      	str	r4, [r1, #4]
    acec:	f848 3002 	str.w	r3, [r8, r2]
    acf0:	f000 f9f4 	bl	b0dc <__malloc_unlock>
    acf4:	f108 0508 	add.w	r5, r8, #8
    acf8:	e002      	b.n	ad00 <_malloc_r+0x190>
    acfa:	230c      	movs	r3, #12
    acfc:	6023      	str	r3, [r4, #0]
    acfe:	2500      	movs	r5, #0
    ad00:	4628      	mov	r0, r5
    ad02:	b003      	add	sp, #12
    ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad08:	f44f 7300 	mov.w	r3, #512	; 0x200
    ad0c:	2040      	movs	r0, #64	; 0x40
    ad0e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    ad12:	e773      	b.n	abfc <_malloc_r+0x8c>
    ad14:	68d3      	ldr	r3, [r2, #12]
    ad16:	429a      	cmp	r2, r3
    ad18:	bf08      	it	eq
    ad1a:	3002      	addeq	r0, #2
    ad1c:	f47f af40 	bne.w	aba0 <_malloc_r+0x30>
    ad20:	693d      	ldr	r5, [r7, #16]
    ad22:	f8df c158 	ldr.w	ip, [pc, #344]	; ae7c <_malloc_r+0x30c>
    ad26:	4565      	cmp	r5, ip
    ad28:	d182      	bne.n	ac30 <_malloc_r+0xc0>
    ad2a:	687a      	ldr	r2, [r7, #4]
    ad2c:	1083      	asrs	r3, r0, #2
    ad2e:	2101      	movs	r1, #1
    ad30:	4099      	lsls	r1, r3
    ad32:	4291      	cmp	r1, r2
    ad34:	d9a7      	bls.n	ac86 <_malloc_r+0x116>
    ad36:	68bd      	ldr	r5, [r7, #8]
    ad38:	686b      	ldr	r3, [r5, #4]
    ad3a:	f023 0903 	bic.w	r9, r3, #3
    ad3e:	454e      	cmp	r6, r9
    ad40:	d803      	bhi.n	ad4a <_malloc_r+0x1da>
    ad42:	eba9 0306 	sub.w	r3, r9, r6
    ad46:	2b0f      	cmp	r3, #15
    ad48:	dc7a      	bgt.n	ae40 <_malloc_r+0x2d0>
    ad4a:	f8df b134 	ldr.w	fp, [pc, #308]	; ae80 <_malloc_r+0x310>
    ad4e:	4b47      	ldr	r3, [pc, #284]	; (ae6c <_malloc_r+0x2fc>)
    ad50:	f8db 2000 	ldr.w	r2, [fp]
    ad54:	681b      	ldr	r3, [r3, #0]
    ad56:	3201      	adds	r2, #1
    ad58:	4433      	add	r3, r6
    ad5a:	eb05 0a09 	add.w	sl, r5, r9
    ad5e:	f000 8133 	beq.w	afc8 <_malloc_r+0x458>
    ad62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ad66:	330f      	adds	r3, #15
    ad68:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    ad6c:	f028 080f 	bic.w	r8, r8, #15
    ad70:	4641      	mov	r1, r8
    ad72:	4620      	mov	r0, r4
    ad74:	f001 f872 	bl	be5c <_sbrk_r>
    ad78:	1c41      	adds	r1, r0, #1
    ad7a:	4602      	mov	r2, r0
    ad7c:	f000 80f3 	beq.w	af66 <_malloc_r+0x3f6>
    ad80:	4582      	cmp	sl, r0
    ad82:	f200 80ee 	bhi.w	af62 <_malloc_r+0x3f2>
    ad86:	4b3a      	ldr	r3, [pc, #232]	; (ae70 <_malloc_r+0x300>)
    ad88:	6819      	ldr	r1, [r3, #0]
    ad8a:	4441      	add	r1, r8
    ad8c:	6019      	str	r1, [r3, #0]
    ad8e:	4608      	mov	r0, r1
    ad90:	f000 814e 	beq.w	b030 <_malloc_r+0x4c0>
    ad94:	f8db 1000 	ldr.w	r1, [fp]
    ad98:	9301      	str	r3, [sp, #4]
    ad9a:	3101      	adds	r1, #1
    ad9c:	bf1b      	ittet	ne
    ad9e:	eba2 010a 	subne.w	r1, r2, sl
    ada2:	1809      	addne	r1, r1, r0
    ada4:	f8cb 2000 	streq.w	r2, [fp]
    ada8:	6019      	strne	r1, [r3, #0]
    adaa:	f012 0b07 	ands.w	fp, r2, #7
    adae:	f000 8117 	beq.w	afe0 <_malloc_r+0x470>
    adb2:	f1cb 0108 	rsb	r1, fp, #8
    adb6:	440a      	add	r2, r1
    adb8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    adbc:	4490      	add	r8, r2
    adbe:	3108      	adds	r1, #8
    adc0:	eba1 0108 	sub.w	r1, r1, r8
    adc4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    adc8:	4651      	mov	r1, sl
    adca:	4620      	mov	r0, r4
    adcc:	9200      	str	r2, [sp, #0]
    adce:	f001 f845 	bl	be5c <_sbrk_r>
    add2:	1c42      	adds	r2, r0, #1
    add4:	e9dd 2300 	ldrd	r2, r3, [sp]
    add8:	f000 814f 	beq.w	b07a <_malloc_r+0x50a>
    addc:	1a80      	subs	r0, r0, r2
    adde:	eb00 080a 	add.w	r8, r0, sl
    ade2:	6819      	ldr	r1, [r3, #0]
    ade4:	60ba      	str	r2, [r7, #8]
    ade6:	f048 0001 	orr.w	r0, r8, #1
    adea:	4451      	add	r1, sl
    adec:	42bd      	cmp	r5, r7
    adee:	6050      	str	r0, [r2, #4]
    adf0:	6019      	str	r1, [r3, #0]
    adf2:	f000 8129 	beq.w	b048 <_malloc_r+0x4d8>
    adf6:	f1b9 0f0f 	cmp.w	r9, #15
    adfa:	f240 8127 	bls.w	b04c <_malloc_r+0x4dc>
    adfe:	6868      	ldr	r0, [r5, #4]
    ae00:	f1a9 0c0c 	sub.w	ip, r9, #12
    ae04:	f02c 0c07 	bic.w	ip, ip, #7
    ae08:	f000 0001 	and.w	r0, r0, #1
    ae0c:	ea40 000c 	orr.w	r0, r0, ip
    ae10:	6068      	str	r0, [r5, #4]
    ae12:	f04f 0e05 	mov.w	lr, #5
    ae16:	eb05 000c 	add.w	r0, r5, ip
    ae1a:	f1bc 0f0f 	cmp.w	ip, #15
    ae1e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    ae22:	f200 8132 	bhi.w	b08a <_malloc_r+0x51a>
    ae26:	6850      	ldr	r0, [r2, #4]
    ae28:	4615      	mov	r5, r2
    ae2a:	4b12      	ldr	r3, [pc, #72]	; (ae74 <_malloc_r+0x304>)
    ae2c:	681a      	ldr	r2, [r3, #0]
    ae2e:	428a      	cmp	r2, r1
    ae30:	bf38      	it	cc
    ae32:	6019      	strcc	r1, [r3, #0]
    ae34:	4b10      	ldr	r3, [pc, #64]	; (ae78 <_malloc_r+0x308>)
    ae36:	681a      	ldr	r2, [r3, #0]
    ae38:	428a      	cmp	r2, r1
    ae3a:	bf38      	it	cc
    ae3c:	6019      	strcc	r1, [r3, #0]
    ae3e:	e094      	b.n	af6a <_malloc_r+0x3fa>
    ae40:	19aa      	adds	r2, r5, r6
    ae42:	f043 0301 	orr.w	r3, r3, #1
    ae46:	f046 0601 	orr.w	r6, r6, #1
    ae4a:	606e      	str	r6, [r5, #4]
    ae4c:	4620      	mov	r0, r4
    ae4e:	60ba      	str	r2, [r7, #8]
    ae50:	6053      	str	r3, [r2, #4]
    ae52:	f000 f943 	bl	b0dc <__malloc_unlock>
    ae56:	3508      	adds	r5, #8
    ae58:	4628      	mov	r0, r5
    ae5a:	b003      	add	sp, #12
    ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae60:	68d9      	ldr	r1, [r3, #12]
    ae62:	441a      	add	r2, r3
    ae64:	e6a1      	b.n	abaa <_malloc_r+0x3a>
    ae66:	bf00      	nop
    ae68:	20004618 	.word	0x20004618
    ae6c:	20005288 	.word	0x20005288
    ae70:	20005258 	.word	0x20005258
    ae74:	20005280 	.word	0x20005280
    ae78:	20005284 	.word	0x20005284
    ae7c:	20004620 	.word	0x20004620
    ae80:	20004a20 	.word	0x20004a20
    ae84:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    ae88:	ea4f 2352 	mov.w	r3, r2, lsr #9
    ae8c:	d363      	bcc.n	af56 <_malloc_r+0x3e6>
    ae8e:	2b14      	cmp	r3, #20
    ae90:	f200 80b7 	bhi.w	b002 <_malloc_r+0x492>
    ae94:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    ae98:	00c9      	lsls	r1, r1, #3
    ae9a:	335b      	adds	r3, #91	; 0x5b
    ae9c:	eb07 0e01 	add.w	lr, r7, r1
    aea0:	5879      	ldr	r1, [r7, r1]
    aea2:	f1ae 0e08 	sub.w	lr, lr, #8
    aea6:	458e      	cmp	lr, r1
    aea8:	f000 8091 	beq.w	afce <_malloc_r+0x45e>
    aeac:	684b      	ldr	r3, [r1, #4]
    aeae:	f023 0303 	bic.w	r3, r3, #3
    aeb2:	4293      	cmp	r3, r2
    aeb4:	d902      	bls.n	aebc <_malloc_r+0x34c>
    aeb6:	6889      	ldr	r1, [r1, #8]
    aeb8:	458e      	cmp	lr, r1
    aeba:	d1f7      	bne.n	aeac <_malloc_r+0x33c>
    aebc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    aec0:	687a      	ldr	r2, [r7, #4]
    aec2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    aec6:	f8ce 5008 	str.w	r5, [lr, #8]
    aeca:	60cd      	str	r5, [r1, #12]
    aecc:	e6d6      	b.n	ac7c <_malloc_r+0x10c>
    aece:	2b14      	cmp	r3, #20
    aed0:	d959      	bls.n	af86 <_malloc_r+0x416>
    aed2:	2b54      	cmp	r3, #84	; 0x54
    aed4:	f200 809d 	bhi.w	b012 <_malloc_r+0x4a2>
    aed8:	0b33      	lsrs	r3, r6, #12
    aeda:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    aede:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    aee2:	00c3      	lsls	r3, r0, #3
    aee4:	e68a      	b.n	abfc <_malloc_r+0x8c>
    aee6:	f10e 0e01 	add.w	lr, lr, #1
    aeea:	f01e 0f03 	tst.w	lr, #3
    aeee:	f105 0508 	add.w	r5, r5, #8
    aef2:	f47f aed5 	bne.w	aca0 <_malloc_r+0x130>
    aef6:	e051      	b.n	af9c <_malloc_r+0x42c>
    aef8:	4442      	add	r2, r8
    aefa:	4645      	mov	r5, r8
    aefc:	6853      	ldr	r3, [r2, #4]
    aefe:	f8d8 100c 	ldr.w	r1, [r8, #12]
    af02:	f043 0301 	orr.w	r3, r3, #1
    af06:	6053      	str	r3, [r2, #4]
    af08:	f855 3f08 	ldr.w	r3, [r5, #8]!
    af0c:	4620      	mov	r0, r4
    af0e:	60d9      	str	r1, [r3, #12]
    af10:	608b      	str	r3, [r1, #8]
    af12:	f000 f8e3 	bl	b0dc <__malloc_unlock>
    af16:	e6f3      	b.n	ad00 <_malloc_r+0x190>
    af18:	08f0      	lsrs	r0, r6, #3
    af1a:	f106 0208 	add.w	r2, r6, #8
    af1e:	e637      	b.n	ab90 <_malloc_r+0x20>
    af20:	442a      	add	r2, r5
    af22:	4620      	mov	r0, r4
    af24:	6853      	ldr	r3, [r2, #4]
    af26:	f043 0301 	orr.w	r3, r3, #1
    af2a:	6053      	str	r3, [r2, #4]
    af2c:	3508      	adds	r5, #8
    af2e:	f000 f8d5 	bl	b0dc <__malloc_unlock>
    af32:	e6e5      	b.n	ad00 <_malloc_r+0x190>
    af34:	19a9      	adds	r1, r5, r6
    af36:	4620      	mov	r0, r4
    af38:	f046 0601 	orr.w	r6, r6, #1
    af3c:	f043 0401 	orr.w	r4, r3, #1
    af40:	606e      	str	r6, [r5, #4]
    af42:	e9c7 1104 	strd	r1, r1, [r7, #16]
    af46:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    af4a:	604c      	str	r4, [r1, #4]
    af4c:	50ab      	str	r3, [r5, r2]
    af4e:	f000 f8c5 	bl	b0dc <__malloc_unlock>
    af52:	3508      	adds	r5, #8
    af54:	e6d4      	b.n	ad00 <_malloc_r+0x190>
    af56:	0993      	lsrs	r3, r2, #6
    af58:	f103 0139 	add.w	r1, r3, #57	; 0x39
    af5c:	00c9      	lsls	r1, r1, #3
    af5e:	3338      	adds	r3, #56	; 0x38
    af60:	e79c      	b.n	ae9c <_malloc_r+0x32c>
    af62:	42bd      	cmp	r5, r7
    af64:	d05f      	beq.n	b026 <_malloc_r+0x4b6>
    af66:	68bd      	ldr	r5, [r7, #8]
    af68:	6868      	ldr	r0, [r5, #4]
    af6a:	f020 0803 	bic.w	r8, r0, #3
    af6e:	4546      	cmp	r6, r8
    af70:	eba8 0306 	sub.w	r3, r8, r6
    af74:	d802      	bhi.n	af7c <_malloc_r+0x40c>
    af76:	2b0f      	cmp	r3, #15
    af78:	f73f af62 	bgt.w	ae40 <_malloc_r+0x2d0>
    af7c:	4620      	mov	r0, r4
    af7e:	f000 f8ad 	bl	b0dc <__malloc_unlock>
    af82:	2500      	movs	r5, #0
    af84:	e6bc      	b.n	ad00 <_malloc_r+0x190>
    af86:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    af8a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    af8e:	00c3      	lsls	r3, r0, #3
    af90:	e634      	b.n	abfc <_malloc_r+0x8c>
    af92:	f859 3908 	ldr.w	r3, [r9], #-8
    af96:	454b      	cmp	r3, r9
    af98:	f040 8096 	bne.w	b0c8 <_malloc_r+0x558>
    af9c:	f010 0f03 	tst.w	r0, #3
    afa0:	f100 30ff 	add.w	r0, r0, #4294967295
    afa4:	d1f5      	bne.n	af92 <_malloc_r+0x422>
    afa6:	687b      	ldr	r3, [r7, #4]
    afa8:	ea23 0301 	bic.w	r3, r3, r1
    afac:	607b      	str	r3, [r7, #4]
    afae:	0049      	lsls	r1, r1, #1
    afb0:	4299      	cmp	r1, r3
    afb2:	f63f aec0 	bhi.w	ad36 <_malloc_r+0x1c6>
    afb6:	b919      	cbnz	r1, afc0 <_malloc_r+0x450>
    afb8:	e6bd      	b.n	ad36 <_malloc_r+0x1c6>
    afba:	0049      	lsls	r1, r1, #1
    afbc:	f10e 0e04 	add.w	lr, lr, #4
    afc0:	4219      	tst	r1, r3
    afc2:	d0fa      	beq.n	afba <_malloc_r+0x44a>
    afc4:	4670      	mov	r0, lr
    afc6:	e667      	b.n	ac98 <_malloc_r+0x128>
    afc8:	f103 0810 	add.w	r8, r3, #16
    afcc:	e6d0      	b.n	ad70 <_malloc_r+0x200>
    afce:	109a      	asrs	r2, r3, #2
    afd0:	f04f 0801 	mov.w	r8, #1
    afd4:	687b      	ldr	r3, [r7, #4]
    afd6:	fa08 f202 	lsl.w	r2, r8, r2
    afda:	431a      	orrs	r2, r3
    afdc:	607a      	str	r2, [r7, #4]
    afde:	e770      	b.n	aec2 <_malloc_r+0x352>
    afe0:	eb02 0108 	add.w	r1, r2, r8
    afe4:	4249      	negs	r1, r1
    afe6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    afea:	4651      	mov	r1, sl
    afec:	4620      	mov	r0, r4
    afee:	9200      	str	r2, [sp, #0]
    aff0:	f000 ff34 	bl	be5c <_sbrk_r>
    aff4:	1c43      	adds	r3, r0, #1
    aff6:	e9dd 2300 	ldrd	r2, r3, [sp]
    affa:	f47f aeef 	bne.w	addc <_malloc_r+0x26c>
    affe:	46da      	mov	sl, fp
    b000:	e6ef      	b.n	ade2 <_malloc_r+0x272>
    b002:	2b54      	cmp	r3, #84	; 0x54
    b004:	d825      	bhi.n	b052 <_malloc_r+0x4e2>
    b006:	0b13      	lsrs	r3, r2, #12
    b008:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    b00c:	00c9      	lsls	r1, r1, #3
    b00e:	336e      	adds	r3, #110	; 0x6e
    b010:	e744      	b.n	ae9c <_malloc_r+0x32c>
    b012:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b016:	d825      	bhi.n	b064 <_malloc_r+0x4f4>
    b018:	0bf3      	lsrs	r3, r6, #15
    b01a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    b01e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    b022:	00c3      	lsls	r3, r0, #3
    b024:	e5ea      	b.n	abfc <_malloc_r+0x8c>
    b026:	4b29      	ldr	r3, [pc, #164]	; (b0cc <_malloc_r+0x55c>)
    b028:	6818      	ldr	r0, [r3, #0]
    b02a:	4440      	add	r0, r8
    b02c:	6018      	str	r0, [r3, #0]
    b02e:	e6b1      	b.n	ad94 <_malloc_r+0x224>
    b030:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    b034:	f1bc 0f00 	cmp.w	ip, #0
    b038:	f47f aeac 	bne.w	ad94 <_malloc_r+0x224>
    b03c:	68bd      	ldr	r5, [r7, #8]
    b03e:	44c8      	add	r8, r9
    b040:	f048 0001 	orr.w	r0, r8, #1
    b044:	6068      	str	r0, [r5, #4]
    b046:	e6f0      	b.n	ae2a <_malloc_r+0x2ba>
    b048:	4615      	mov	r5, r2
    b04a:	e6ee      	b.n	ae2a <_malloc_r+0x2ba>
    b04c:	2301      	movs	r3, #1
    b04e:	6053      	str	r3, [r2, #4]
    b050:	e794      	b.n	af7c <_malloc_r+0x40c>
    b052:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b056:	d823      	bhi.n	b0a0 <_malloc_r+0x530>
    b058:	0bd3      	lsrs	r3, r2, #15
    b05a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    b05e:	00c9      	lsls	r1, r1, #3
    b060:	3377      	adds	r3, #119	; 0x77
    b062:	e71b      	b.n	ae9c <_malloc_r+0x32c>
    b064:	f240 5254 	movw	r2, #1364	; 0x554
    b068:	4293      	cmp	r3, r2
    b06a:	d823      	bhi.n	b0b4 <_malloc_r+0x544>
    b06c:	0cb3      	lsrs	r3, r6, #18
    b06e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    b072:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    b076:	00c3      	lsls	r3, r0, #3
    b078:	e5c0      	b.n	abfc <_malloc_r+0x8c>
    b07a:	f1ab 0b08 	sub.w	fp, fp, #8
    b07e:	44d8      	add	r8, fp
    b080:	eba8 0802 	sub.w	r8, r8, r2
    b084:	f04f 0a00 	mov.w	sl, #0
    b088:	e6ab      	b.n	ade2 <_malloc_r+0x272>
    b08a:	f105 0108 	add.w	r1, r5, #8
    b08e:	4620      	mov	r0, r4
    b090:	9300      	str	r3, [sp, #0]
    b092:	f001 fa17 	bl	c4c4 <_free_r>
    b096:	68bd      	ldr	r5, [r7, #8]
    b098:	9b00      	ldr	r3, [sp, #0]
    b09a:	6868      	ldr	r0, [r5, #4]
    b09c:	6819      	ldr	r1, [r3, #0]
    b09e:	e6c4      	b.n	ae2a <_malloc_r+0x2ba>
    b0a0:	f240 5154 	movw	r1, #1364	; 0x554
    b0a4:	428b      	cmp	r3, r1
    b0a6:	d80b      	bhi.n	b0c0 <_malloc_r+0x550>
    b0a8:	0c93      	lsrs	r3, r2, #18
    b0aa:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    b0ae:	00c9      	lsls	r1, r1, #3
    b0b0:	337c      	adds	r3, #124	; 0x7c
    b0b2:	e6f3      	b.n	ae9c <_malloc_r+0x32c>
    b0b4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    b0b8:	207f      	movs	r0, #127	; 0x7f
    b0ba:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    b0be:	e59d      	b.n	abfc <_malloc_r+0x8c>
    b0c0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b0c4:	237e      	movs	r3, #126	; 0x7e
    b0c6:	e6e9      	b.n	ae9c <_malloc_r+0x32c>
    b0c8:	687b      	ldr	r3, [r7, #4]
    b0ca:	e770      	b.n	afae <_malloc_r+0x43e>
    b0cc:	20005258 	.word	0x20005258

0000b0d0 <__malloc_lock>:
    b0d0:	4801      	ldr	r0, [pc, #4]	; (b0d8 <__malloc_lock+0x8>)
    b0d2:	f000 bf19 	b.w	bf08 <__retarget_lock_acquire_recursive>
    b0d6:	bf00      	nop
    b0d8:	20005250 	.word	0x20005250

0000b0dc <__malloc_unlock>:
    b0dc:	4801      	ldr	r0, [pc, #4]	; (b0e4 <__malloc_unlock+0x8>)
    b0de:	f000 bf15 	b.w	bf0c <__retarget_lock_release_recursive>
    b0e2:	bf00      	nop
    b0e4:	20005250 	.word	0x20005250

0000b0e8 <realloc>:
    b0e8:	b410      	push	{r4}
    b0ea:	4c04      	ldr	r4, [pc, #16]	; (b0fc <realloc+0x14>)
    b0ec:	4603      	mov	r3, r0
    b0ee:	460a      	mov	r2, r1
    b0f0:	6820      	ldr	r0, [r4, #0]
    b0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b0f6:	4619      	mov	r1, r3
    b0f8:	f000 b802 	b.w	b100 <_realloc_r>
    b0fc:	20004a34 	.word	0x20004a34

0000b100 <_realloc_r>:
    b100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b104:	4617      	mov	r7, r2
    b106:	2900      	cmp	r1, #0
    b108:	f000 8098 	beq.w	b23c <_realloc_r+0x13c>
    b10c:	460c      	mov	r4, r1
    b10e:	f107 050b 	add.w	r5, r7, #11
    b112:	4680      	mov	r8, r0
    b114:	f7ff ffdc 	bl	b0d0 <__malloc_lock>
    b118:	2d16      	cmp	r5, #22
    b11a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    b11e:	d85b      	bhi.n	b1d8 <_realloc_r+0xd8>
    b120:	2510      	movs	r5, #16
    b122:	462a      	mov	r2, r5
    b124:	42af      	cmp	r7, r5
    b126:	d85c      	bhi.n	b1e2 <_realloc_r+0xe2>
    b128:	f021 0603 	bic.w	r6, r1, #3
    b12c:	4296      	cmp	r6, r2
    b12e:	f1a4 0908 	sub.w	r9, r4, #8
    b132:	da62      	bge.n	b1fa <_realloc_r+0xfa>
    b134:	4bbc      	ldr	r3, [pc, #752]	; (b428 <_realloc_r+0x328>)
    b136:	f8d3 c008 	ldr.w	ip, [r3, #8]
    b13a:	eb09 0006 	add.w	r0, r9, r6
    b13e:	4584      	cmp	ip, r0
    b140:	f000 8097 	beq.w	b272 <_realloc_r+0x172>
    b144:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b148:	f02c 0301 	bic.w	r3, ip, #1
    b14c:	4403      	add	r3, r0
    b14e:	685b      	ldr	r3, [r3, #4]
    b150:	07db      	lsls	r3, r3, #31
    b152:	d468      	bmi.n	b226 <_realloc_r+0x126>
    b154:	f02c 0c03 	bic.w	ip, ip, #3
    b158:	eb06 030c 	add.w	r3, r6, ip
    b15c:	4293      	cmp	r3, r2
    b15e:	da47      	bge.n	b1f0 <_realloc_r+0xf0>
    b160:	07cb      	lsls	r3, r1, #31
    b162:	d410      	bmi.n	b186 <_realloc_r+0x86>
    b164:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b168:	eba9 0a03 	sub.w	sl, r9, r3
    b16c:	f8da 3004 	ldr.w	r3, [sl, #4]
    b170:	f023 0103 	bic.w	r1, r3, #3
    b174:	448c      	add	ip, r1
    b176:	44b4      	add	ip, r6
    b178:	4594      	cmp	ip, r2
    b17a:	f280 8111 	bge.w	b3a0 <_realloc_r+0x2a0>
    b17e:	1873      	adds	r3, r6, r1
    b180:	4293      	cmp	r3, r2
    b182:	f280 80e8 	bge.w	b356 <_realloc_r+0x256>
    b186:	4639      	mov	r1, r7
    b188:	4640      	mov	r0, r8
    b18a:	f7ff fcf1 	bl	ab70 <_malloc_r>
    b18e:	4607      	mov	r7, r0
    b190:	b1e0      	cbz	r0, b1cc <_realloc_r+0xcc>
    b192:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b196:	f023 0301 	bic.w	r3, r3, #1
    b19a:	444b      	add	r3, r9
    b19c:	f1a0 0208 	sub.w	r2, r0, #8
    b1a0:	4293      	cmp	r3, r2
    b1a2:	f000 80d2 	beq.w	b34a <_realloc_r+0x24a>
    b1a6:	1f32      	subs	r2, r6, #4
    b1a8:	2a24      	cmp	r2, #36	; 0x24
    b1aa:	f200 80f5 	bhi.w	b398 <_realloc_r+0x298>
    b1ae:	2a13      	cmp	r2, #19
    b1b0:	f200 80ac 	bhi.w	b30c <_realloc_r+0x20c>
    b1b4:	4603      	mov	r3, r0
    b1b6:	4622      	mov	r2, r4
    b1b8:	6811      	ldr	r1, [r2, #0]
    b1ba:	6019      	str	r1, [r3, #0]
    b1bc:	6851      	ldr	r1, [r2, #4]
    b1be:	6059      	str	r1, [r3, #4]
    b1c0:	6892      	ldr	r2, [r2, #8]
    b1c2:	609a      	str	r2, [r3, #8]
    b1c4:	4621      	mov	r1, r4
    b1c6:	4640      	mov	r0, r8
    b1c8:	f001 f97c 	bl	c4c4 <_free_r>
    b1cc:	4640      	mov	r0, r8
    b1ce:	f7ff ff85 	bl	b0dc <__malloc_unlock>
    b1d2:	4638      	mov	r0, r7
    b1d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1d8:	f025 0507 	bic.w	r5, r5, #7
    b1dc:	2d00      	cmp	r5, #0
    b1de:	462a      	mov	r2, r5
    b1e0:	daa0      	bge.n	b124 <_realloc_r+0x24>
    b1e2:	230c      	movs	r3, #12
    b1e4:	f8c8 3000 	str.w	r3, [r8]
    b1e8:	2700      	movs	r7, #0
    b1ea:	4638      	mov	r0, r7
    b1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f0:	461e      	mov	r6, r3
    b1f2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b1f6:	60d3      	str	r3, [r2, #12]
    b1f8:	609a      	str	r2, [r3, #8]
    b1fa:	1b73      	subs	r3, r6, r5
    b1fc:	2b0f      	cmp	r3, #15
    b1fe:	d822      	bhi.n	b246 <_realloc_r+0x146>
    b200:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b204:	f003 0301 	and.w	r3, r3, #1
    b208:	4333      	orrs	r3, r6
    b20a:	444e      	add	r6, r9
    b20c:	f8c9 3004 	str.w	r3, [r9, #4]
    b210:	6873      	ldr	r3, [r6, #4]
    b212:	f043 0301 	orr.w	r3, r3, #1
    b216:	6073      	str	r3, [r6, #4]
    b218:	4640      	mov	r0, r8
    b21a:	4627      	mov	r7, r4
    b21c:	f7ff ff5e 	bl	b0dc <__malloc_unlock>
    b220:	4638      	mov	r0, r7
    b222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b226:	07c9      	lsls	r1, r1, #31
    b228:	d4ad      	bmi.n	b186 <_realloc_r+0x86>
    b22a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b22e:	eba9 0a03 	sub.w	sl, r9, r3
    b232:	f8da 1004 	ldr.w	r1, [sl, #4]
    b236:	f021 0103 	bic.w	r1, r1, #3
    b23a:	e7a0      	b.n	b17e <_realloc_r+0x7e>
    b23c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b240:	4611      	mov	r1, r2
    b242:	f7ff bc95 	b.w	ab70 <_malloc_r>
    b246:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b24a:	eb09 0105 	add.w	r1, r9, r5
    b24e:	f002 0201 	and.w	r2, r2, #1
    b252:	444e      	add	r6, r9
    b254:	f043 0301 	orr.w	r3, r3, #1
    b258:	432a      	orrs	r2, r5
    b25a:	f8c9 2004 	str.w	r2, [r9, #4]
    b25e:	604b      	str	r3, [r1, #4]
    b260:	6873      	ldr	r3, [r6, #4]
    b262:	f043 0301 	orr.w	r3, r3, #1
    b266:	3108      	adds	r1, #8
    b268:	6073      	str	r3, [r6, #4]
    b26a:	4640      	mov	r0, r8
    b26c:	f001 f92a 	bl	c4c4 <_free_r>
    b270:	e7d2      	b.n	b218 <_realloc_r+0x118>
    b272:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b276:	f020 0b03 	bic.w	fp, r0, #3
    b27a:	eb06 0c0b 	add.w	ip, r6, fp
    b27e:	f105 0010 	add.w	r0, r5, #16
    b282:	4584      	cmp	ip, r0
    b284:	da4d      	bge.n	b322 <_realloc_r+0x222>
    b286:	07c9      	lsls	r1, r1, #31
    b288:	f53f af7d 	bmi.w	b186 <_realloc_r+0x86>
    b28c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b290:	eba9 0a01 	sub.w	sl, r9, r1
    b294:	f8da 1004 	ldr.w	r1, [sl, #4]
    b298:	f021 0103 	bic.w	r1, r1, #3
    b29c:	448b      	add	fp, r1
    b29e:	44b3      	add	fp, r6
    b2a0:	4558      	cmp	r0, fp
    b2a2:	f73f af6c 	bgt.w	b17e <_realloc_r+0x7e>
    b2a6:	4657      	mov	r7, sl
    b2a8:	f8da 100c 	ldr.w	r1, [sl, #12]
    b2ac:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b2b0:	1f32      	subs	r2, r6, #4
    b2b2:	2a24      	cmp	r2, #36	; 0x24
    b2b4:	60c1      	str	r1, [r0, #12]
    b2b6:	6088      	str	r0, [r1, #8]
    b2b8:	f200 80db 	bhi.w	b472 <_realloc_r+0x372>
    b2bc:	2a13      	cmp	r2, #19
    b2be:	f240 80d6 	bls.w	b46e <_realloc_r+0x36e>
    b2c2:	6821      	ldr	r1, [r4, #0]
    b2c4:	f8ca 1008 	str.w	r1, [sl, #8]
    b2c8:	6861      	ldr	r1, [r4, #4]
    b2ca:	f8ca 100c 	str.w	r1, [sl, #12]
    b2ce:	2a1b      	cmp	r2, #27
    b2d0:	f200 80df 	bhi.w	b492 <_realloc_r+0x392>
    b2d4:	3408      	adds	r4, #8
    b2d6:	f10a 0210 	add.w	r2, sl, #16
    b2da:	6821      	ldr	r1, [r4, #0]
    b2dc:	6011      	str	r1, [r2, #0]
    b2de:	6861      	ldr	r1, [r4, #4]
    b2e0:	6051      	str	r1, [r2, #4]
    b2e2:	68a1      	ldr	r1, [r4, #8]
    b2e4:	6091      	str	r1, [r2, #8]
    b2e6:	eb0a 0105 	add.w	r1, sl, r5
    b2ea:	ebab 0205 	sub.w	r2, fp, r5
    b2ee:	f042 0201 	orr.w	r2, r2, #1
    b2f2:	6099      	str	r1, [r3, #8]
    b2f4:	604a      	str	r2, [r1, #4]
    b2f6:	f8da 3004 	ldr.w	r3, [sl, #4]
    b2fa:	f003 0301 	and.w	r3, r3, #1
    b2fe:	432b      	orrs	r3, r5
    b300:	4640      	mov	r0, r8
    b302:	f8ca 3004 	str.w	r3, [sl, #4]
    b306:	f7ff fee9 	bl	b0dc <__malloc_unlock>
    b30a:	e76e      	b.n	b1ea <_realloc_r+0xea>
    b30c:	6823      	ldr	r3, [r4, #0]
    b30e:	6003      	str	r3, [r0, #0]
    b310:	6863      	ldr	r3, [r4, #4]
    b312:	6043      	str	r3, [r0, #4]
    b314:	2a1b      	cmp	r2, #27
    b316:	d868      	bhi.n	b3ea <_realloc_r+0x2ea>
    b318:	f104 0208 	add.w	r2, r4, #8
    b31c:	f100 0308 	add.w	r3, r0, #8
    b320:	e74a      	b.n	b1b8 <_realloc_r+0xb8>
    b322:	eb09 0205 	add.w	r2, r9, r5
    b326:	609a      	str	r2, [r3, #8]
    b328:	ebac 0305 	sub.w	r3, ip, r5
    b32c:	f043 0301 	orr.w	r3, r3, #1
    b330:	6053      	str	r3, [r2, #4]
    b332:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b336:	f003 0301 	and.w	r3, r3, #1
    b33a:	432b      	orrs	r3, r5
    b33c:	4640      	mov	r0, r8
    b33e:	f844 3c04 	str.w	r3, [r4, #-4]
    b342:	f7ff fecb 	bl	b0dc <__malloc_unlock>
    b346:	4627      	mov	r7, r4
    b348:	e74f      	b.n	b1ea <_realloc_r+0xea>
    b34a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b34e:	f023 0303 	bic.w	r3, r3, #3
    b352:	441e      	add	r6, r3
    b354:	e751      	b.n	b1fa <_realloc_r+0xfa>
    b356:	4657      	mov	r7, sl
    b358:	f8da 100c 	ldr.w	r1, [sl, #12]
    b35c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b360:	1f32      	subs	r2, r6, #4
    b362:	2a24      	cmp	r2, #36	; 0x24
    b364:	60c1      	str	r1, [r0, #12]
    b366:	6088      	str	r0, [r1, #8]
    b368:	d84c      	bhi.n	b404 <_realloc_r+0x304>
    b36a:	2a13      	cmp	r2, #19
    b36c:	d948      	bls.n	b400 <_realloc_r+0x300>
    b36e:	6821      	ldr	r1, [r4, #0]
    b370:	f8ca 1008 	str.w	r1, [sl, #8]
    b374:	6861      	ldr	r1, [r4, #4]
    b376:	f8ca 100c 	str.w	r1, [sl, #12]
    b37a:	2a1b      	cmp	r2, #27
    b37c:	d856      	bhi.n	b42c <_realloc_r+0x32c>
    b37e:	3408      	adds	r4, #8
    b380:	f10a 0210 	add.w	r2, sl, #16
    b384:	461e      	mov	r6, r3
    b386:	6823      	ldr	r3, [r4, #0]
    b388:	6013      	str	r3, [r2, #0]
    b38a:	6863      	ldr	r3, [r4, #4]
    b38c:	6053      	str	r3, [r2, #4]
    b38e:	68a3      	ldr	r3, [r4, #8]
    b390:	6093      	str	r3, [r2, #8]
    b392:	46d1      	mov	r9, sl
    b394:	463c      	mov	r4, r7
    b396:	e730      	b.n	b1fa <_realloc_r+0xfa>
    b398:	4621      	mov	r1, r4
    b39a:	f000 fbb5 	bl	bb08 <memmove>
    b39e:	e711      	b.n	b1c4 <_realloc_r+0xc4>
    b3a0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b3a4:	4657      	mov	r7, sl
    b3a6:	60cb      	str	r3, [r1, #12]
    b3a8:	6099      	str	r1, [r3, #8]
    b3aa:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b3ae:	f8da 300c 	ldr.w	r3, [sl, #12]
    b3b2:	60cb      	str	r3, [r1, #12]
    b3b4:	1f32      	subs	r2, r6, #4
    b3b6:	2a24      	cmp	r2, #36	; 0x24
    b3b8:	6099      	str	r1, [r3, #8]
    b3ba:	d82d      	bhi.n	b418 <_realloc_r+0x318>
    b3bc:	2a13      	cmp	r2, #19
    b3be:	d929      	bls.n	b414 <_realloc_r+0x314>
    b3c0:	6823      	ldr	r3, [r4, #0]
    b3c2:	f8ca 3008 	str.w	r3, [sl, #8]
    b3c6:	6863      	ldr	r3, [r4, #4]
    b3c8:	f8ca 300c 	str.w	r3, [sl, #12]
    b3cc:	2a1b      	cmp	r2, #27
    b3ce:	d842      	bhi.n	b456 <_realloc_r+0x356>
    b3d0:	3408      	adds	r4, #8
    b3d2:	f10a 0310 	add.w	r3, sl, #16
    b3d6:	6822      	ldr	r2, [r4, #0]
    b3d8:	601a      	str	r2, [r3, #0]
    b3da:	6862      	ldr	r2, [r4, #4]
    b3dc:	605a      	str	r2, [r3, #4]
    b3de:	68a2      	ldr	r2, [r4, #8]
    b3e0:	609a      	str	r2, [r3, #8]
    b3e2:	4666      	mov	r6, ip
    b3e4:	46d1      	mov	r9, sl
    b3e6:	463c      	mov	r4, r7
    b3e8:	e707      	b.n	b1fa <_realloc_r+0xfa>
    b3ea:	68a3      	ldr	r3, [r4, #8]
    b3ec:	6083      	str	r3, [r0, #8]
    b3ee:	68e3      	ldr	r3, [r4, #12]
    b3f0:	60c3      	str	r3, [r0, #12]
    b3f2:	2a24      	cmp	r2, #36	; 0x24
    b3f4:	d026      	beq.n	b444 <_realloc_r+0x344>
    b3f6:	f104 0210 	add.w	r2, r4, #16
    b3fa:	f100 0310 	add.w	r3, r0, #16
    b3fe:	e6db      	b.n	b1b8 <_realloc_r+0xb8>
    b400:	463a      	mov	r2, r7
    b402:	e7bf      	b.n	b384 <_realloc_r+0x284>
    b404:	4621      	mov	r1, r4
    b406:	4638      	mov	r0, r7
    b408:	461e      	mov	r6, r3
    b40a:	46d1      	mov	r9, sl
    b40c:	f000 fb7c 	bl	bb08 <memmove>
    b410:	463c      	mov	r4, r7
    b412:	e6f2      	b.n	b1fa <_realloc_r+0xfa>
    b414:	463b      	mov	r3, r7
    b416:	e7de      	b.n	b3d6 <_realloc_r+0x2d6>
    b418:	4621      	mov	r1, r4
    b41a:	4638      	mov	r0, r7
    b41c:	4666      	mov	r6, ip
    b41e:	46d1      	mov	r9, sl
    b420:	f000 fb72 	bl	bb08 <memmove>
    b424:	463c      	mov	r4, r7
    b426:	e6e8      	b.n	b1fa <_realloc_r+0xfa>
    b428:	20004618 	.word	0x20004618
    b42c:	68a1      	ldr	r1, [r4, #8]
    b42e:	f8ca 1010 	str.w	r1, [sl, #16]
    b432:	68e1      	ldr	r1, [r4, #12]
    b434:	f8ca 1014 	str.w	r1, [sl, #20]
    b438:	2a24      	cmp	r2, #36	; 0x24
    b43a:	d020      	beq.n	b47e <_realloc_r+0x37e>
    b43c:	3410      	adds	r4, #16
    b43e:	f10a 0218 	add.w	r2, sl, #24
    b442:	e79f      	b.n	b384 <_realloc_r+0x284>
    b444:	6923      	ldr	r3, [r4, #16]
    b446:	6103      	str	r3, [r0, #16]
    b448:	6961      	ldr	r1, [r4, #20]
    b44a:	6141      	str	r1, [r0, #20]
    b44c:	f104 0218 	add.w	r2, r4, #24
    b450:	f100 0318 	add.w	r3, r0, #24
    b454:	e6b0      	b.n	b1b8 <_realloc_r+0xb8>
    b456:	68a3      	ldr	r3, [r4, #8]
    b458:	f8ca 3010 	str.w	r3, [sl, #16]
    b45c:	68e3      	ldr	r3, [r4, #12]
    b45e:	f8ca 3014 	str.w	r3, [sl, #20]
    b462:	2a24      	cmp	r2, #36	; 0x24
    b464:	d021      	beq.n	b4aa <_realloc_r+0x3aa>
    b466:	3410      	adds	r4, #16
    b468:	f10a 0318 	add.w	r3, sl, #24
    b46c:	e7b3      	b.n	b3d6 <_realloc_r+0x2d6>
    b46e:	463a      	mov	r2, r7
    b470:	e733      	b.n	b2da <_realloc_r+0x1da>
    b472:	4621      	mov	r1, r4
    b474:	4638      	mov	r0, r7
    b476:	f000 fb47 	bl	bb08 <memmove>
    b47a:	4b16      	ldr	r3, [pc, #88]	; (b4d4 <_realloc_r+0x3d4>)
    b47c:	e733      	b.n	b2e6 <_realloc_r+0x1e6>
    b47e:	6922      	ldr	r2, [r4, #16]
    b480:	f8ca 2018 	str.w	r2, [sl, #24]
    b484:	6962      	ldr	r2, [r4, #20]
    b486:	f8ca 201c 	str.w	r2, [sl, #28]
    b48a:	3418      	adds	r4, #24
    b48c:	f10a 0220 	add.w	r2, sl, #32
    b490:	e778      	b.n	b384 <_realloc_r+0x284>
    b492:	68a1      	ldr	r1, [r4, #8]
    b494:	f8ca 1010 	str.w	r1, [sl, #16]
    b498:	68e1      	ldr	r1, [r4, #12]
    b49a:	f8ca 1014 	str.w	r1, [sl, #20]
    b49e:	2a24      	cmp	r2, #36	; 0x24
    b4a0:	d00d      	beq.n	b4be <_realloc_r+0x3be>
    b4a2:	3410      	adds	r4, #16
    b4a4:	f10a 0218 	add.w	r2, sl, #24
    b4a8:	e717      	b.n	b2da <_realloc_r+0x1da>
    b4aa:	6923      	ldr	r3, [r4, #16]
    b4ac:	f8ca 3018 	str.w	r3, [sl, #24]
    b4b0:	6963      	ldr	r3, [r4, #20]
    b4b2:	f8ca 301c 	str.w	r3, [sl, #28]
    b4b6:	3418      	adds	r4, #24
    b4b8:	f10a 0320 	add.w	r3, sl, #32
    b4bc:	e78b      	b.n	b3d6 <_realloc_r+0x2d6>
    b4be:	6922      	ldr	r2, [r4, #16]
    b4c0:	f8ca 2018 	str.w	r2, [sl, #24]
    b4c4:	6962      	ldr	r2, [r4, #20]
    b4c6:	f8ca 201c 	str.w	r2, [sl, #28]
    b4ca:	3418      	adds	r4, #24
    b4cc:	f10a 0220 	add.w	r2, sl, #32
    b4d0:	e703      	b.n	b2da <_realloc_r+0x1da>
    b4d2:	bf00      	nop
    b4d4:	20004618 	.word	0x20004618

0000b4d8 <_strtol_l.constprop.0>:
    b4d8:	2b01      	cmp	r3, #1
    b4da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4de:	d040      	beq.n	b562 <_strtol_l.constprop.0+0x8a>
    b4e0:	2b24      	cmp	r3, #36	; 0x24
    b4e2:	4698      	mov	r8, r3
    b4e4:	d83d      	bhi.n	b562 <_strtol_l.constprop.0+0x8a>
    b4e6:	4d4c      	ldr	r5, [pc, #304]	; (b618 <_strtol_l.constprop.0+0x140>)
    b4e8:	468e      	mov	lr, r1
    b4ea:	4676      	mov	r6, lr
    b4ec:	f81e bb01 	ldrb.w	fp, [lr], #1
    b4f0:	f815 400b 	ldrb.w	r4, [r5, fp]
    b4f4:	f014 0408 	ands.w	r4, r4, #8
    b4f8:	d1f7      	bne.n	b4ea <_strtol_l.constprop.0+0x12>
    b4fa:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b4fe:	d072      	beq.n	b5e6 <_strtol_l.constprop.0+0x10e>
    b500:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b504:	bf08      	it	eq
    b506:	f89e b000 	ldrbeq.w	fp, [lr]
    b50a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b50e:	bf08      	it	eq
    b510:	f106 0e02 	addeq.w	lr, r6, #2
    b514:	2b00      	cmp	r3, #0
    b516:	d042      	beq.n	b59e <_strtol_l.constprop.0+0xc6>
    b518:	2b10      	cmp	r3, #16
    b51a:	d057      	beq.n	b5cc <_strtol_l.constprop.0+0xf4>
    b51c:	fbb9 f7f8 	udiv	r7, r9, r8
    b520:	2500      	movs	r5, #0
    b522:	462e      	mov	r6, r5
    b524:	fb08 9a17 	mls	sl, r8, r7, r9
    b528:	e005      	b.n	b536 <_strtol_l.constprop.0+0x5e>
    b52a:	d033      	beq.n	b594 <_strtol_l.constprop.0+0xbc>
    b52c:	fb08 c606 	mla	r6, r8, r6, ip
    b530:	2501      	movs	r5, #1
    b532:	f81e bb01 	ldrb.w	fp, [lr], #1
    b536:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b53a:	f1bc 0f09 	cmp.w	ip, #9
    b53e:	d906      	bls.n	b54e <_strtol_l.constprop.0+0x76>
    b540:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b544:	f1bc 0f19 	cmp.w	ip, #25
    b548:	d812      	bhi.n	b570 <_strtol_l.constprop.0+0x98>
    b54a:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b54e:	4563      	cmp	r3, ip
    b550:	dd17      	ble.n	b582 <_strtol_l.constprop.0+0xaa>
    b552:	f1b5 3fff 	cmp.w	r5, #4294967295
    b556:	d0ec      	beq.n	b532 <_strtol_l.constprop.0+0x5a>
    b558:	42b7      	cmp	r7, r6
    b55a:	d2e6      	bcs.n	b52a <_strtol_l.constprop.0+0x52>
    b55c:	f04f 35ff 	mov.w	r5, #4294967295
    b560:	e7e7      	b.n	b532 <_strtol_l.constprop.0+0x5a>
    b562:	f000 fca3 	bl	beac <__errno>
    b566:	2316      	movs	r3, #22
    b568:	6003      	str	r3, [r0, #0]
    b56a:	2000      	movs	r0, #0
    b56c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b570:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b574:	f1bc 0f19 	cmp.w	ip, #25
    b578:	d803      	bhi.n	b582 <_strtol_l.constprop.0+0xaa>
    b57a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b57e:	4563      	cmp	r3, ip
    b580:	dce7      	bgt.n	b552 <_strtol_l.constprop.0+0x7a>
    b582:	1c6b      	adds	r3, r5, #1
    b584:	d027      	beq.n	b5d6 <_strtol_l.constprop.0+0xfe>
    b586:	b98c      	cbnz	r4, b5ac <_strtol_l.constprop.0+0xd4>
    b588:	b10a      	cbz	r2, b58e <_strtol_l.constprop.0+0xb6>
    b58a:	bba5      	cbnz	r5, b5f6 <_strtol_l.constprop.0+0x11e>
    b58c:	6011      	str	r1, [r2, #0]
    b58e:	4630      	mov	r0, r6
    b590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b594:	45e2      	cmp	sl, ip
    b596:	dac9      	bge.n	b52c <_strtol_l.constprop.0+0x54>
    b598:	f04f 35ff 	mov.w	r5, #4294967295
    b59c:	e7c9      	b.n	b532 <_strtol_l.constprop.0+0x5a>
    b59e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b5a2:	d005      	beq.n	b5b0 <_strtol_l.constprop.0+0xd8>
    b5a4:	f04f 080a 	mov.w	r8, #10
    b5a8:	4643      	mov	r3, r8
    b5aa:	e7b7      	b.n	b51c <_strtol_l.constprop.0+0x44>
    b5ac:	4276      	negs	r6, r6
    b5ae:	e7eb      	b.n	b588 <_strtol_l.constprop.0+0xb0>
    b5b0:	f89e 3000 	ldrb.w	r3, [lr]
    b5b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b5b8:	2b58      	cmp	r3, #88	; 0x58
    b5ba:	d121      	bne.n	b600 <_strtol_l.constprop.0+0x128>
    b5bc:	f04f 0810 	mov.w	r8, #16
    b5c0:	f89e b001 	ldrb.w	fp, [lr, #1]
    b5c4:	4643      	mov	r3, r8
    b5c6:	f10e 0e02 	add.w	lr, lr, #2
    b5ca:	e7a7      	b.n	b51c <_strtol_l.constprop.0+0x44>
    b5cc:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b5d0:	d01a      	beq.n	b608 <_strtol_l.constprop.0+0x130>
    b5d2:	4698      	mov	r8, r3
    b5d4:	e7a2      	b.n	b51c <_strtol_l.constprop.0+0x44>
    b5d6:	2322      	movs	r3, #34	; 0x22
    b5d8:	6003      	str	r3, [r0, #0]
    b5da:	b172      	cbz	r2, b5fa <_strtol_l.constprop.0+0x122>
    b5dc:	f10e 31ff 	add.w	r1, lr, #4294967295
    b5e0:	464e      	mov	r6, r9
    b5e2:	6011      	str	r1, [r2, #0]
    b5e4:	e7d3      	b.n	b58e <_strtol_l.constprop.0+0xb6>
    b5e6:	f89e b000 	ldrb.w	fp, [lr]
    b5ea:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b5ee:	f106 0e02 	add.w	lr, r6, #2
    b5f2:	2401      	movs	r4, #1
    b5f4:	e78e      	b.n	b514 <_strtol_l.constprop.0+0x3c>
    b5f6:	46b1      	mov	r9, r6
    b5f8:	e7f0      	b.n	b5dc <_strtol_l.constprop.0+0x104>
    b5fa:	464e      	mov	r6, r9
    b5fc:	4630      	mov	r0, r6
    b5fe:	e7c7      	b.n	b590 <_strtol_l.constprop.0+0xb8>
    b600:	f04f 0808 	mov.w	r8, #8
    b604:	4643      	mov	r3, r8
    b606:	e789      	b.n	b51c <_strtol_l.constprop.0+0x44>
    b608:	f89e 5000 	ldrb.w	r5, [lr]
    b60c:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b610:	2d58      	cmp	r5, #88	; 0x58
    b612:	d0d3      	beq.n	b5bc <_strtol_l.constprop.0+0xe4>
    b614:	4698      	mov	r8, r3
    b616:	e781      	b.n	b51c <_strtol_l.constprop.0+0x44>
    b618:	20000c0d 	.word	0x20000c0d

0000b61c <strtol>:
    b61c:	b410      	push	{r4}
    b61e:	4c05      	ldr	r4, [pc, #20]	; (b634 <strtol+0x18>)
    b620:	4684      	mov	ip, r0
    b622:	4613      	mov	r3, r2
    b624:	6820      	ldr	r0, [r4, #0]
    b626:	f85d 4b04 	ldr.w	r4, [sp], #4
    b62a:	460a      	mov	r2, r1
    b62c:	4661      	mov	r1, ip
    b62e:	f7ff bf53 	b.w	b4d8 <_strtol_l.constprop.0>
    b632:	bf00      	nop
    b634:	20004a34 	.word	0x20004a34

0000b638 <_strtoul_l.constprop.0>:
    b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b63c:	4607      	mov	r7, r0
    b63e:	484c      	ldr	r0, [pc, #304]	; (b770 <_strtoul_l.constprop.0+0x138>)
    b640:	460e      	mov	r6, r1
    b642:	4635      	mov	r5, r6
    b644:	f816 eb01 	ldrb.w	lr, [r6], #1
    b648:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b64c:	f01c 0c08 	ands.w	ip, ip, #8
    b650:	d1f7      	bne.n	b642 <_strtoul_l.constprop.0+0xa>
    b652:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b656:	d05a      	beq.n	b70e <_strtoul_l.constprop.0+0xd6>
    b658:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b65c:	bf03      	ittte	eq
    b65e:	f896 e000 	ldrbeq.w	lr, [r6]
    b662:	4664      	moveq	r4, ip
    b664:	1cae      	addeq	r6, r5, #2
    b666:	4664      	movne	r4, ip
    b668:	b15b      	cbz	r3, b682 <_strtoul_l.constprop.0+0x4a>
    b66a:	2b10      	cmp	r3, #16
    b66c:	d054      	beq.n	b718 <_strtoul_l.constprop.0+0xe0>
    b66e:	f04f 38ff 	mov.w	r8, #4294967295
    b672:	fbb8 f8f3 	udiv	r8, r8, r3
    b676:	fb03 fa08 	mul.w	sl, r3, r8
    b67a:	ea6f 0a0a 	mvn.w	sl, sl
    b67e:	4699      	mov	r9, r3
    b680:	e008      	b.n	b694 <_strtoul_l.constprop.0+0x5c>
    b682:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b686:	d05a      	beq.n	b73e <_strtoul_l.constprop.0+0x106>
    b688:	230a      	movs	r3, #10
    b68a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; b774 <_strtoul_l.constprop.0+0x13c>
    b68e:	f04f 0a05 	mov.w	sl, #5
    b692:	4699      	mov	r9, r3
    b694:	2500      	movs	r5, #0
    b696:	4628      	mov	r0, r5
    b698:	e005      	b.n	b6a6 <_strtoul_l.constprop.0+0x6e>
    b69a:	d02c      	beq.n	b6f6 <_strtoul_l.constprop.0+0xbe>
    b69c:	fb09 c000 	mla	r0, r9, r0, ip
    b6a0:	2501      	movs	r5, #1
    b6a2:	f816 eb01 	ldrb.w	lr, [r6], #1
    b6a6:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b6aa:	f1bc 0f09 	cmp.w	ip, #9
    b6ae:	d906      	bls.n	b6be <_strtoul_l.constprop.0+0x86>
    b6b0:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b6b4:	f1bc 0f19 	cmp.w	ip, #25
    b6b8:	d80b      	bhi.n	b6d2 <_strtoul_l.constprop.0+0x9a>
    b6ba:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b6be:	4563      	cmp	r3, ip
    b6c0:	dd10      	ble.n	b6e4 <_strtoul_l.constprop.0+0xac>
    b6c2:	f1b5 3fff 	cmp.w	r5, #4294967295
    b6c6:	d0ec      	beq.n	b6a2 <_strtoul_l.constprop.0+0x6a>
    b6c8:	4540      	cmp	r0, r8
    b6ca:	d9e6      	bls.n	b69a <_strtoul_l.constprop.0+0x62>
    b6cc:	f04f 35ff 	mov.w	r5, #4294967295
    b6d0:	e7e7      	b.n	b6a2 <_strtoul_l.constprop.0+0x6a>
    b6d2:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b6d6:	f1bc 0f19 	cmp.w	ip, #25
    b6da:	d803      	bhi.n	b6e4 <_strtoul_l.constprop.0+0xac>
    b6dc:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b6e0:	4563      	cmp	r3, ip
    b6e2:	dcee      	bgt.n	b6c2 <_strtoul_l.constprop.0+0x8a>
    b6e4:	1c6b      	adds	r3, r5, #1
    b6e6:	d00b      	beq.n	b700 <_strtoul_l.constprop.0+0xc8>
    b6e8:	b104      	cbz	r4, b6ec <_strtoul_l.constprop.0+0xb4>
    b6ea:	4240      	negs	r0, r0
    b6ec:	b10a      	cbz	r2, b6f2 <_strtoul_l.constprop.0+0xba>
    b6ee:	b965      	cbnz	r5, b70a <_strtoul_l.constprop.0+0xd2>
    b6f0:	6011      	str	r1, [r2, #0]
    b6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6f6:	45d4      	cmp	ip, sl
    b6f8:	ddd0      	ble.n	b69c <_strtoul_l.constprop.0+0x64>
    b6fa:	f04f 35ff 	mov.w	r5, #4294967295
    b6fe:	e7d0      	b.n	b6a2 <_strtoul_l.constprop.0+0x6a>
    b700:	2322      	movs	r3, #34	; 0x22
    b702:	603b      	str	r3, [r7, #0]
    b704:	4628      	mov	r0, r5
    b706:	2a00      	cmp	r2, #0
    b708:	d0f3      	beq.n	b6f2 <_strtoul_l.constprop.0+0xba>
    b70a:	1e71      	subs	r1, r6, #1
    b70c:	e7f0      	b.n	b6f0 <_strtoul_l.constprop.0+0xb8>
    b70e:	f896 e000 	ldrb.w	lr, [r6]
    b712:	2401      	movs	r4, #1
    b714:	1cae      	adds	r6, r5, #2
    b716:	e7a7      	b.n	b668 <_strtoul_l.constprop.0+0x30>
    b718:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b71c:	d121      	bne.n	b762 <_strtoul_l.constprop.0+0x12a>
    b71e:	7830      	ldrb	r0, [r6, #0]
    b720:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b724:	2858      	cmp	r0, #88	; 0x58
    b726:	d116      	bne.n	b756 <_strtoul_l.constprop.0+0x11e>
    b728:	f04f 0910 	mov.w	r9, #16
    b72c:	f896 e001 	ldrb.w	lr, [r6, #1]
    b730:	f04f 0a0f 	mov.w	sl, #15
    b734:	3602      	adds	r6, #2
    b736:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b73a:	464b      	mov	r3, r9
    b73c:	e7aa      	b.n	b694 <_strtoul_l.constprop.0+0x5c>
    b73e:	7833      	ldrb	r3, [r6, #0]
    b740:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b744:	2b58      	cmp	r3, #88	; 0x58
    b746:	d0ef      	beq.n	b728 <_strtoul_l.constprop.0+0xf0>
    b748:	2308      	movs	r3, #8
    b74a:	f04f 0a07 	mov.w	sl, #7
    b74e:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b752:	4699      	mov	r9, r3
    b754:	e79e      	b.n	b694 <_strtoul_l.constprop.0+0x5c>
    b756:	4699      	mov	r9, r3
    b758:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b75c:	f04f 0a0f 	mov.w	sl, #15
    b760:	e798      	b.n	b694 <_strtoul_l.constprop.0+0x5c>
    b762:	f04f 0a0f 	mov.w	sl, #15
    b766:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b76a:	4699      	mov	r9, r3
    b76c:	e792      	b.n	b694 <_strtoul_l.constprop.0+0x5c>
    b76e:	bf00      	nop
    b770:	20000c0d 	.word	0x20000c0d
    b774:	19999999 	.word	0x19999999

0000b778 <strtoul>:
    b778:	b410      	push	{r4}
    b77a:	4c05      	ldr	r4, [pc, #20]	; (b790 <strtoul+0x18>)
    b77c:	4684      	mov	ip, r0
    b77e:	4613      	mov	r3, r2
    b780:	6820      	ldr	r0, [r4, #0]
    b782:	f85d 4b04 	ldr.w	r4, [sp], #4
    b786:	460a      	mov	r2, r1
    b788:	4661      	mov	r1, ip
    b78a:	f7ff bf55 	b.w	b638 <_strtoul_l.constprop.0>
    b78e:	bf00      	nop
    b790:	20004a34 	.word	0x20004a34

0000b794 <__utoa>:
    b794:	b5f0      	push	{r4, r5, r6, r7, lr}
    b796:	4f25      	ldr	r7, [pc, #148]	; (b82c <__utoa+0x98>)
    b798:	f1a2 0e02 	sub.w	lr, r2, #2
    b79c:	4616      	mov	r6, r2
    b79e:	4605      	mov	r5, r0
    b7a0:	460c      	mov	r4, r1
    b7a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    b7a4:	b08b      	sub	sp, #44	; 0x2c
    b7a6:	46ec      	mov	ip, sp
    b7a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b7ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    b7ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    b7b2:	e897 0003 	ldmia.w	r7, {r0, r1}
    b7b6:	f84c 0b04 	str.w	r0, [ip], #4
    b7ba:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    b7be:	f88c 1000 	strb.w	r1, [ip]
    b7c2:	d82e      	bhi.n	b822 <__utoa+0x8e>
    b7c4:	f104 3eff 	add.w	lr, r4, #4294967295
    b7c8:	4670      	mov	r0, lr
    b7ca:	f04f 0c00 	mov.w	ip, #0
    b7ce:	fbb5 f2f6 	udiv	r2, r5, r6
    b7d2:	fb06 5312 	mls	r3, r6, r2, r5
    b7d6:	3328      	adds	r3, #40	; 0x28
    b7d8:	446b      	add	r3, sp
    b7da:	4661      	mov	r1, ip
    b7dc:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    b7e0:	f800 cf01 	strb.w	ip, [r0, #1]!
    b7e4:	462b      	mov	r3, r5
    b7e6:	429e      	cmp	r6, r3
    b7e8:	f101 0c01 	add.w	ip, r1, #1
    b7ec:	4615      	mov	r5, r2
    b7ee:	d9ee      	bls.n	b7ce <__utoa+0x3a>
    b7f0:	2300      	movs	r3, #0
    b7f2:	f804 300c 	strb.w	r3, [r4, ip]
    b7f6:	b189      	cbz	r1, b81c <__utoa+0x88>
    b7f8:	44a4      	add	ip, r4
    b7fa:	4672      	mov	r2, lr
    b7fc:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    b800:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    b804:	f88e 5000 	strb.w	r5, [lr]
    b808:	eba4 030e 	sub.w	r3, r4, lr
    b80c:	3202      	adds	r2, #2
    b80e:	3b01      	subs	r3, #1
    b810:	1b12      	subs	r2, r2, r4
    b812:	440b      	add	r3, r1
    b814:	429a      	cmp	r2, r3
    b816:	f88c 0000 	strb.w	r0, [ip]
    b81a:	dbee      	blt.n	b7fa <__utoa+0x66>
    b81c:	4620      	mov	r0, r4
    b81e:	b00b      	add	sp, #44	; 0x2c
    b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b822:	2300      	movs	r3, #0
    b824:	4618      	mov	r0, r3
    b826:	7023      	strb	r3, [r4, #0]
    b828:	b00b      	add	sp, #44	; 0x2c
    b82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b82c:	20000be4 	.word	0x20000be4

0000b830 <utoa>:
    b830:	f7ff bfb0 	b.w	b794 <__utoa>

0000b834 <__cxa_atexit>:
    b834:	4613      	mov	r3, r2
    b836:	460a      	mov	r2, r1
    b838:	4601      	mov	r1, r0
    b83a:	2002      	movs	r0, #2
    b83c:	f000 bdae 	b.w	c39c <__register_exitproc>

0000b840 <isprint>:
    b840:	4b02      	ldr	r3, [pc, #8]	; (b84c <isprint+0xc>)
    b842:	4418      	add	r0, r3
    b844:	7840      	ldrb	r0, [r0, #1]
    b846:	f000 0097 	and.w	r0, r0, #151	; 0x97
    b84a:	4770      	bx	lr
    b84c:	20000c0c 	.word	0x20000c0c

0000b850 <isspace>:
    b850:	4b02      	ldr	r3, [pc, #8]	; (b85c <isspace+0xc>)
    b852:	4418      	add	r0, r3
    b854:	7840      	ldrb	r0, [r0, #1]
    b856:	f000 0008 	and.w	r0, r0, #8
    b85a:	4770      	bx	lr
    b85c:	20000c0c 	.word	0x20000c0c

0000b860 <tolower>:
    b860:	4b03      	ldr	r3, [pc, #12]	; (b870 <tolower+0x10>)
    b862:	5c1b      	ldrb	r3, [r3, r0]
    b864:	f003 0303 	and.w	r3, r3, #3
    b868:	2b01      	cmp	r3, #1
    b86a:	bf08      	it	eq
    b86c:	3020      	addeq	r0, #32
    b86e:	4770      	bx	lr
    b870:	20000c0d 	.word	0x20000c0d

0000b874 <stdio_exit_handler>:
    b874:	4a02      	ldr	r2, [pc, #8]	; (b880 <stdio_exit_handler+0xc>)
    b876:	4903      	ldr	r1, [pc, #12]	; (b884 <stdio_exit_handler+0x10>)
    b878:	4803      	ldr	r0, [pc, #12]	; (b888 <stdio_exit_handler+0x14>)
    b87a:	f000 b8bb 	b.w	b9f4 <_fwalk_sglue>
    b87e:	bf00      	nop
    b880:	20004a28 	.word	0x20004a28
    b884:	0000e9d5 	.word	0x0000e9d5
    b888:	20001368 	.word	0x20001368

0000b88c <cleanup_stdio>:
    b88c:	4b0c      	ldr	r3, [pc, #48]	; (b8c0 <cleanup_stdio+0x34>)
    b88e:	6841      	ldr	r1, [r0, #4]
    b890:	4299      	cmp	r1, r3
    b892:	b510      	push	{r4, lr}
    b894:	4604      	mov	r4, r0
    b896:	d001      	beq.n	b89c <cleanup_stdio+0x10>
    b898:	f003 f89c 	bl	e9d4 <_fclose_r>
    b89c:	68a1      	ldr	r1, [r4, #8]
    b89e:	4b09      	ldr	r3, [pc, #36]	; (b8c4 <cleanup_stdio+0x38>)
    b8a0:	4299      	cmp	r1, r3
    b8a2:	d002      	beq.n	b8aa <cleanup_stdio+0x1e>
    b8a4:	4620      	mov	r0, r4
    b8a6:	f003 f895 	bl	e9d4 <_fclose_r>
    b8aa:	68e1      	ldr	r1, [r4, #12]
    b8ac:	4b06      	ldr	r3, [pc, #24]	; (b8c8 <cleanup_stdio+0x3c>)
    b8ae:	4299      	cmp	r1, r3
    b8b0:	d004      	beq.n	b8bc <cleanup_stdio+0x30>
    b8b2:	4620      	mov	r0, r4
    b8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b8b8:	f003 b88c 	b.w	e9d4 <_fclose_r>
    b8bc:	bd10      	pop	{r4, pc}
    b8be:	bf00      	nop
    b8c0:	2000528c 	.word	0x2000528c
    b8c4:	200052f4 	.word	0x200052f4
    b8c8:	2000535c 	.word	0x2000535c

0000b8cc <global_stdio_init.part.0>:
    b8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b8d0:	4c2a      	ldr	r4, [pc, #168]	; (b97c <global_stdio_init.part.0+0xb0>)
    b8d2:	4b2b      	ldr	r3, [pc, #172]	; (b980 <global_stdio_init.part.0+0xb4>)
    b8d4:	482b      	ldr	r0, [pc, #172]	; (b984 <global_stdio_init.part.0+0xb8>)
    b8d6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b998 <global_stdio_init.part.0+0xcc>
    b8da:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b99c <global_stdio_init.part.0+0xd0>
    b8de:	4f2a      	ldr	r7, [pc, #168]	; (b988 <global_stdio_init.part.0+0xbc>)
    b8e0:	6018      	str	r0, [r3, #0]
    b8e2:	2500      	movs	r5, #0
    b8e4:	2304      	movs	r3, #4
    b8e6:	2208      	movs	r2, #8
    b8e8:	4629      	mov	r1, r5
    b8ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b8ee:	4e27      	ldr	r6, [pc, #156]	; (b98c <global_stdio_init.part.0+0xc0>)
    b8f0:	6665      	str	r5, [r4, #100]	; 0x64
    b8f2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b8f6:	e9c4 5500 	strd	r5, r5, [r4]
    b8fa:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b8fe:	61a5      	str	r5, [r4, #24]
    b900:	f000 f97e 	bl	bc00 <memset>
    b904:	4b22      	ldr	r3, [pc, #136]	; (b990 <global_stdio_init.part.0+0xc4>)
    b906:	6763      	str	r3, [r4, #116]	; 0x74
    b908:	2208      	movs	r2, #8
    b90a:	4629      	mov	r1, r5
    b90c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b910:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b914:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b918:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b91c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b920:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b924:	6725      	str	r5, [r4, #112]	; 0x70
    b926:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b92a:	62e6      	str	r6, [r4, #44]	; 0x2c
    b92c:	f000 f968 	bl	bc00 <memset>
    b930:	4b18      	ldr	r3, [pc, #96]	; (b994 <global_stdio_init.part.0+0xc8>)
    b932:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b936:	4629      	mov	r1, r5
    b938:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b93c:	2208      	movs	r2, #8
    b93e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b942:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b946:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b94a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b94e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b952:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b956:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b95a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b95e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b962:	f000 f94d 	bl	bc00 <memset>
    b966:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b96a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b96e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b972:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b97a:	bf00      	nop
    b97c:	2000528c 	.word	0x2000528c
    b980:	200053c4 	.word	0x200053c4
    b984:	0000b875 	.word	0x0000b875
    b988:	0000bae1 	.word	0x0000bae1
    b98c:	0000bb01 	.word	0x0000bb01
    b990:	00010009 	.word	0x00010009
    b994:	00020012 	.word	0x00020012
    b998:	0000ba7d 	.word	0x0000ba7d
    b99c:	0000baa1 	.word	0x0000baa1

0000b9a0 <__sinit>:
    b9a0:	b510      	push	{r4, lr}
    b9a2:	4604      	mov	r4, r0
    b9a4:	480a      	ldr	r0, [pc, #40]	; (b9d0 <__sinit+0x30>)
    b9a6:	f000 faaf 	bl	bf08 <__retarget_lock_acquire_recursive>
    b9aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b9ac:	b923      	cbnz	r3, b9b8 <__sinit+0x18>
    b9ae:	4b09      	ldr	r3, [pc, #36]	; (b9d4 <__sinit+0x34>)
    b9b0:	4a09      	ldr	r2, [pc, #36]	; (b9d8 <__sinit+0x38>)
    b9b2:	681b      	ldr	r3, [r3, #0]
    b9b4:	6362      	str	r2, [r4, #52]	; 0x34
    b9b6:	b123      	cbz	r3, b9c2 <__sinit+0x22>
    b9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9bc:	4804      	ldr	r0, [pc, #16]	; (b9d0 <__sinit+0x30>)
    b9be:	f000 baa5 	b.w	bf0c <__retarget_lock_release_recursive>
    b9c2:	f7ff ff83 	bl	b8cc <global_stdio_init.part.0>
    b9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9ca:	4801      	ldr	r0, [pc, #4]	; (b9d0 <__sinit+0x30>)
    b9cc:	f000 ba9e 	b.w	bf0c <__retarget_lock_release_recursive>
    b9d0:	20005254 	.word	0x20005254
    b9d4:	200053c4 	.word	0x200053c4
    b9d8:	0000b88d 	.word	0x0000b88d

0000b9dc <__sfp_lock_acquire>:
    b9dc:	4801      	ldr	r0, [pc, #4]	; (b9e4 <__sfp_lock_acquire+0x8>)
    b9de:	f000 ba93 	b.w	bf08 <__retarget_lock_acquire_recursive>
    b9e2:	bf00      	nop
    b9e4:	20005254 	.word	0x20005254

0000b9e8 <__sfp_lock_release>:
    b9e8:	4801      	ldr	r0, [pc, #4]	; (b9f0 <__sfp_lock_release+0x8>)
    b9ea:	f000 ba8f 	b.w	bf0c <__retarget_lock_release_recursive>
    b9ee:	bf00      	nop
    b9f0:	20005254 	.word	0x20005254

0000b9f4 <_fwalk_sglue>:
    b9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9f8:	4680      	mov	r8, r0
    b9fa:	460f      	mov	r7, r1
    b9fc:	4616      	mov	r6, r2
    b9fe:	f04f 0900 	mov.w	r9, #0
    ba02:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    ba06:	3d01      	subs	r5, #1
    ba08:	d411      	bmi.n	ba2e <_fwalk_sglue+0x3a>
    ba0a:	89a3      	ldrh	r3, [r4, #12]
    ba0c:	2b01      	cmp	r3, #1
    ba0e:	f105 35ff 	add.w	r5, r5, #4294967295
    ba12:	d908      	bls.n	ba26 <_fwalk_sglue+0x32>
    ba14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    ba18:	3301      	adds	r3, #1
    ba1a:	4621      	mov	r1, r4
    ba1c:	d003      	beq.n	ba26 <_fwalk_sglue+0x32>
    ba1e:	4640      	mov	r0, r8
    ba20:	47b8      	blx	r7
    ba22:	ea49 0900 	orr.w	r9, r9, r0
    ba26:	1c6b      	adds	r3, r5, #1
    ba28:	f104 0468 	add.w	r4, r4, #104	; 0x68
    ba2c:	d1ed      	bne.n	ba0a <_fwalk_sglue+0x16>
    ba2e:	6836      	ldr	r6, [r6, #0]
    ba30:	2e00      	cmp	r6, #0
    ba32:	d1e6      	bne.n	ba02 <_fwalk_sglue+0xe>
    ba34:	4648      	mov	r0, r9
    ba36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba3a:	bf00      	nop

0000ba3c <sprintf>:
    ba3c:	b40e      	push	{r1, r2, r3}
    ba3e:	b510      	push	{r4, lr}
    ba40:	b09d      	sub	sp, #116	; 0x74
    ba42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ba46:	ab1f      	add	r3, sp, #124	; 0x7c
    ba48:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ba4c:	9104      	str	r1, [sp, #16]
    ba4e:	4909      	ldr	r1, [pc, #36]	; (ba74 <sprintf+0x38>)
    ba50:	f853 2b04 	ldr.w	r2, [r3], #4
    ba54:	9002      	str	r0, [sp, #8]
    ba56:	4c08      	ldr	r4, [pc, #32]	; (ba78 <sprintf+0x3c>)
    ba58:	6808      	ldr	r0, [r1, #0]
    ba5a:	9301      	str	r3, [sp, #4]
    ba5c:	a902      	add	r1, sp, #8
    ba5e:	9405      	str	r4, [sp, #20]
    ba60:	f001 fa16 	bl	ce90 <_svfprintf_r>
    ba64:	9b02      	ldr	r3, [sp, #8]
    ba66:	2200      	movs	r2, #0
    ba68:	701a      	strb	r2, [r3, #0]
    ba6a:	b01d      	add	sp, #116	; 0x74
    ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba70:	b003      	add	sp, #12
    ba72:	4770      	bx	lr
    ba74:	20004a34 	.word	0x20004a34
    ba78:	ffff0208 	.word	0xffff0208

0000ba7c <__sread>:
    ba7c:	b510      	push	{r4, lr}
    ba7e:	460c      	mov	r4, r1
    ba80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ba84:	f000 f9d4 	bl	be30 <_read_r>
    ba88:	2800      	cmp	r0, #0
    ba8a:	db03      	blt.n	ba94 <__sread+0x18>
    ba8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ba8e:	4403      	add	r3, r0
    ba90:	6523      	str	r3, [r4, #80]	; 0x50
    ba92:	bd10      	pop	{r4, pc}
    ba94:	89a3      	ldrh	r3, [r4, #12]
    ba96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ba9a:	81a3      	strh	r3, [r4, #12]
    ba9c:	bd10      	pop	{r4, pc}
    ba9e:	bf00      	nop

0000baa0 <__swrite>:
    baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baa4:	460c      	mov	r4, r1
    baa6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    baaa:	461f      	mov	r7, r3
    baac:	05cb      	lsls	r3, r1, #23
    baae:	4605      	mov	r5, r0
    bab0:	4616      	mov	r6, r2
    bab2:	d40b      	bmi.n	bacc <__swrite+0x2c>
    bab4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    bab8:	81a1      	strh	r1, [r4, #12]
    baba:	463b      	mov	r3, r7
    babc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bac0:	4632      	mov	r2, r6
    bac2:	4628      	mov	r0, r5
    bac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bac8:	f000 b9da 	b.w	be80 <_write_r>
    bacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bad0:	2302      	movs	r3, #2
    bad2:	2200      	movs	r2, #0
    bad4:	f000 f996 	bl	be04 <_lseek_r>
    bad8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    badc:	e7ea      	b.n	bab4 <__swrite+0x14>
    bade:	bf00      	nop

0000bae0 <__sseek>:
    bae0:	b510      	push	{r4, lr}
    bae2:	460c      	mov	r4, r1
    bae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bae8:	f000 f98c 	bl	be04 <_lseek_r>
    baec:	89a3      	ldrh	r3, [r4, #12]
    baee:	1c42      	adds	r2, r0, #1
    baf0:	bf0e      	itee	eq
    baf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    baf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    bafa:	6520      	strne	r0, [r4, #80]	; 0x50
    bafc:	81a3      	strh	r3, [r4, #12]
    bafe:	bd10      	pop	{r4, pc}

0000bb00 <__sclose>:
    bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bb04:	f000 b96c 	b.w	bde0 <_close_r>

0000bb08 <memmove>:
    bb08:	4288      	cmp	r0, r1
    bb0a:	d90d      	bls.n	bb28 <memmove+0x20>
    bb0c:	188b      	adds	r3, r1, r2
    bb0e:	4283      	cmp	r3, r0
    bb10:	d90a      	bls.n	bb28 <memmove+0x20>
    bb12:	eb00 0c02 	add.w	ip, r0, r2
    bb16:	b1ba      	cbz	r2, bb48 <memmove+0x40>
    bb18:	4662      	mov	r2, ip
    bb1a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    bb1e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    bb22:	4299      	cmp	r1, r3
    bb24:	d1f9      	bne.n	bb1a <memmove+0x12>
    bb26:	4770      	bx	lr
    bb28:	2a0f      	cmp	r2, #15
    bb2a:	d80e      	bhi.n	bb4a <memmove+0x42>
    bb2c:	4603      	mov	r3, r0
    bb2e:	f102 3cff 	add.w	ip, r2, #4294967295
    bb32:	b14a      	cbz	r2, bb48 <memmove+0x40>
    bb34:	f10c 0c01 	add.w	ip, ip, #1
    bb38:	3b01      	subs	r3, #1
    bb3a:	448c      	add	ip, r1
    bb3c:	f811 2b01 	ldrb.w	r2, [r1], #1
    bb40:	f803 2f01 	strb.w	r2, [r3, #1]!
    bb44:	4561      	cmp	r1, ip
    bb46:	d1f9      	bne.n	bb3c <memmove+0x34>
    bb48:	4770      	bx	lr
    bb4a:	ea40 0301 	orr.w	r3, r0, r1
    bb4e:	079b      	lsls	r3, r3, #30
    bb50:	d150      	bne.n	bbf4 <memmove+0xec>
    bb52:	f1a2 0310 	sub.w	r3, r2, #16
    bb56:	b570      	push	{r4, r5, r6, lr}
    bb58:	f101 0c20 	add.w	ip, r1, #32
    bb5c:	f023 050f 	bic.w	r5, r3, #15
    bb60:	f101 0e10 	add.w	lr, r1, #16
    bb64:	f100 0410 	add.w	r4, r0, #16
    bb68:	44ac      	add	ip, r5
    bb6a:	091b      	lsrs	r3, r3, #4
    bb6c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    bb70:	f844 5c10 	str.w	r5, [r4, #-16]
    bb74:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    bb78:	f844 5c0c 	str.w	r5, [r4, #-12]
    bb7c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    bb80:	f844 5c08 	str.w	r5, [r4, #-8]
    bb84:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    bb88:	f844 5c04 	str.w	r5, [r4, #-4]
    bb8c:	f10e 0e10 	add.w	lr, lr, #16
    bb90:	45e6      	cmp	lr, ip
    bb92:	f104 0410 	add.w	r4, r4, #16
    bb96:	d1e9      	bne.n	bb6c <memmove+0x64>
    bb98:	3301      	adds	r3, #1
    bb9a:	f012 0f0c 	tst.w	r2, #12
    bb9e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    bba2:	f002 040f 	and.w	r4, r2, #15
    bba6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    bbaa:	d027      	beq.n	bbfc <memmove+0xf4>
    bbac:	3c04      	subs	r4, #4
    bbae:	f024 0603 	bic.w	r6, r4, #3
    bbb2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    bbb6:	441e      	add	r6, r3
    bbb8:	1f1c      	subs	r4, r3, #4
    bbba:	468e      	mov	lr, r1
    bbbc:	f85e 5b04 	ldr.w	r5, [lr], #4
    bbc0:	f844 5f04 	str.w	r5, [r4, #4]!
    bbc4:	42b4      	cmp	r4, r6
    bbc6:	d1f9      	bne.n	bbbc <memmove+0xb4>
    bbc8:	f10c 0401 	add.w	r4, ip, #1
    bbcc:	f002 0203 	and.w	r2, r2, #3
    bbd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    bbd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bbd8:	f102 3cff 	add.w	ip, r2, #4294967295
    bbdc:	b14a      	cbz	r2, bbf2 <memmove+0xea>
    bbde:	f10c 0c01 	add.w	ip, ip, #1
    bbe2:	3b01      	subs	r3, #1
    bbe4:	448c      	add	ip, r1
    bbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
    bbea:	f803 2f01 	strb.w	r2, [r3, #1]!
    bbee:	4561      	cmp	r1, ip
    bbf0:	d1f9      	bne.n	bbe6 <memmove+0xde>
    bbf2:	bd70      	pop	{r4, r5, r6, pc}
    bbf4:	f102 3cff 	add.w	ip, r2, #4294967295
    bbf8:	4603      	mov	r3, r0
    bbfa:	e79b      	b.n	bb34 <memmove+0x2c>
    bbfc:	4622      	mov	r2, r4
    bbfe:	e7eb      	b.n	bbd8 <memmove+0xd0>

0000bc00 <memset>:
    bc00:	0783      	lsls	r3, r0, #30
    bc02:	b530      	push	{r4, r5, lr}
    bc04:	d048      	beq.n	bc98 <memset+0x98>
    bc06:	1e54      	subs	r4, r2, #1
    bc08:	2a00      	cmp	r2, #0
    bc0a:	d03f      	beq.n	bc8c <memset+0x8c>
    bc0c:	b2ca      	uxtb	r2, r1
    bc0e:	4603      	mov	r3, r0
    bc10:	e001      	b.n	bc16 <memset+0x16>
    bc12:	3c01      	subs	r4, #1
    bc14:	d33a      	bcc.n	bc8c <memset+0x8c>
    bc16:	f803 2b01 	strb.w	r2, [r3], #1
    bc1a:	079d      	lsls	r5, r3, #30
    bc1c:	d1f9      	bne.n	bc12 <memset+0x12>
    bc1e:	2c03      	cmp	r4, #3
    bc20:	d92d      	bls.n	bc7e <memset+0x7e>
    bc22:	b2cd      	uxtb	r5, r1
    bc24:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    bc28:	2c0f      	cmp	r4, #15
    bc2a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    bc2e:	d936      	bls.n	bc9e <memset+0x9e>
    bc30:	f1a4 0210 	sub.w	r2, r4, #16
    bc34:	f022 0c0f 	bic.w	ip, r2, #15
    bc38:	f103 0e20 	add.w	lr, r3, #32
    bc3c:	44e6      	add	lr, ip
    bc3e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    bc42:	f103 0210 	add.w	r2, r3, #16
    bc46:	e942 5504 	strd	r5, r5, [r2, #-16]
    bc4a:	e942 5502 	strd	r5, r5, [r2, #-8]
    bc4e:	3210      	adds	r2, #16
    bc50:	4572      	cmp	r2, lr
    bc52:	d1f8      	bne.n	bc46 <memset+0x46>
    bc54:	f10c 0201 	add.w	r2, ip, #1
    bc58:	f014 0f0c 	tst.w	r4, #12
    bc5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    bc60:	f004 0c0f 	and.w	ip, r4, #15
    bc64:	d013      	beq.n	bc8e <memset+0x8e>
    bc66:	f1ac 0304 	sub.w	r3, ip, #4
    bc6a:	f023 0303 	bic.w	r3, r3, #3
    bc6e:	3304      	adds	r3, #4
    bc70:	4413      	add	r3, r2
    bc72:	f842 5b04 	str.w	r5, [r2], #4
    bc76:	4293      	cmp	r3, r2
    bc78:	d1fb      	bne.n	bc72 <memset+0x72>
    bc7a:	f00c 0403 	and.w	r4, ip, #3
    bc7e:	b12c      	cbz	r4, bc8c <memset+0x8c>
    bc80:	b2c9      	uxtb	r1, r1
    bc82:	441c      	add	r4, r3
    bc84:	f803 1b01 	strb.w	r1, [r3], #1
    bc88:	429c      	cmp	r4, r3
    bc8a:	d1fb      	bne.n	bc84 <memset+0x84>
    bc8c:	bd30      	pop	{r4, r5, pc}
    bc8e:	4664      	mov	r4, ip
    bc90:	4613      	mov	r3, r2
    bc92:	2c00      	cmp	r4, #0
    bc94:	d1f4      	bne.n	bc80 <memset+0x80>
    bc96:	e7f9      	b.n	bc8c <memset+0x8c>
    bc98:	4603      	mov	r3, r0
    bc9a:	4614      	mov	r4, r2
    bc9c:	e7bf      	b.n	bc1e <memset+0x1e>
    bc9e:	461a      	mov	r2, r3
    bca0:	46a4      	mov	ip, r4
    bca2:	e7e0      	b.n	bc66 <memset+0x66>

0000bca4 <strchr>:
    bca4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    bca8:	4603      	mov	r3, r0
    bcaa:	d044      	beq.n	bd36 <strchr+0x92>
    bcac:	0782      	lsls	r2, r0, #30
    bcae:	d132      	bne.n	bd16 <strchr+0x72>
    bcb0:	b510      	push	{r4, lr}
    bcb2:	6804      	ldr	r4, [r0, #0]
    bcb4:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    bcb8:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    bcbc:	ea8e 0204 	eor.w	r2, lr, r4
    bcc0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bcc4:	ea23 0302 	bic.w	r3, r3, r2
    bcc8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bccc:	ea22 0204 	bic.w	r2, r2, r4
    bcd0:	4313      	orrs	r3, r2
    bcd2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bcd6:	d10f      	bne.n	bcf8 <strchr+0x54>
    bcd8:	f850 4f04 	ldr.w	r4, [r0, #4]!
    bcdc:	ea84 0c0e 	eor.w	ip, r4, lr
    bce0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    bce4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    bce8:	ea23 0304 	bic.w	r3, r3, r4
    bcec:	ea22 020c 	bic.w	r2, r2, ip
    bcf0:	4313      	orrs	r3, r2
    bcf2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bcf6:	d0ef      	beq.n	bcd8 <strchr+0x34>
    bcf8:	7803      	ldrb	r3, [r0, #0]
    bcfa:	b923      	cbnz	r3, bd06 <strchr+0x62>
    bcfc:	e036      	b.n	bd6c <strchr+0xc8>
    bcfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bd02:	2b00      	cmp	r3, #0
    bd04:	d032      	beq.n	bd6c <strchr+0xc8>
    bd06:	4299      	cmp	r1, r3
    bd08:	d1f9      	bne.n	bcfe <strchr+0x5a>
    bd0a:	bd10      	pop	{r4, pc}
    bd0c:	428a      	cmp	r2, r1
    bd0e:	d011      	beq.n	bd34 <strchr+0x90>
    bd10:	079a      	lsls	r2, r3, #30
    bd12:	4618      	mov	r0, r3
    bd14:	d0cc      	beq.n	bcb0 <strchr+0xc>
    bd16:	4618      	mov	r0, r3
    bd18:	f813 2b01 	ldrb.w	r2, [r3], #1
    bd1c:	2a00      	cmp	r2, #0
    bd1e:	d1f5      	bne.n	bd0c <strchr+0x68>
    bd20:	4610      	mov	r0, r2
    bd22:	4770      	bx	lr
    bd24:	0799      	lsls	r1, r3, #30
    bd26:	4618      	mov	r0, r3
    bd28:	d007      	beq.n	bd3a <strchr+0x96>
    bd2a:	4618      	mov	r0, r3
    bd2c:	3301      	adds	r3, #1
    bd2e:	7802      	ldrb	r2, [r0, #0]
    bd30:	2a00      	cmp	r2, #0
    bd32:	d1f7      	bne.n	bd24 <strchr+0x80>
    bd34:	4770      	bx	lr
    bd36:	0782      	lsls	r2, r0, #30
    bd38:	d1f7      	bne.n	bd2a <strchr+0x86>
    bd3a:	6802      	ldr	r2, [r0, #0]
    bd3c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bd40:	ea23 0302 	bic.w	r3, r3, r2
    bd44:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bd48:	d108      	bne.n	bd5c <strchr+0xb8>
    bd4a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    bd4e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bd52:	ea23 0302 	bic.w	r3, r3, r2
    bd56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bd5a:	d0f6      	beq.n	bd4a <strchr+0xa6>
    bd5c:	7803      	ldrb	r3, [r0, #0]
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d0e8      	beq.n	bd34 <strchr+0x90>
    bd62:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bd66:	2b00      	cmp	r3, #0
    bd68:	d1fb      	bne.n	bd62 <strchr+0xbe>
    bd6a:	4770      	bx	lr
    bd6c:	4618      	mov	r0, r3
    bd6e:	bd10      	pop	{r4, pc}

0000bd70 <strncpy>:
    bd70:	ea40 0301 	orr.w	r3, r0, r1
    bd74:	079b      	lsls	r3, r3, #30
    bd76:	b530      	push	{r4, r5, lr}
    bd78:	d101      	bne.n	bd7e <strncpy+0xe>
    bd7a:	2a03      	cmp	r2, #3
    bd7c:	d80f      	bhi.n	bd9e <strncpy+0x2e>
    bd7e:	4684      	mov	ip, r0
    bd80:	f101 3eff 	add.w	lr, r1, #4294967295
    bd84:	e007      	b.n	bd96 <strncpy+0x26>
    bd86:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bd8a:	f803 1b01 	strb.w	r1, [r3], #1
    bd8e:	1e54      	subs	r4, r2, #1
    bd90:	b1c1      	cbz	r1, bdc4 <strncpy+0x54>
    bd92:	469c      	mov	ip, r3
    bd94:	4622      	mov	r2, r4
    bd96:	4663      	mov	r3, ip
    bd98:	2a00      	cmp	r2, #0
    bd9a:	d1f4      	bne.n	bd86 <strncpy+0x16>
    bd9c:	bd30      	pop	{r4, r5, pc}
    bd9e:	460b      	mov	r3, r1
    bda0:	4684      	mov	ip, r0
    bda2:	4619      	mov	r1, r3
    bda4:	f853 5b04 	ldr.w	r5, [r3], #4
    bda8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bdac:	ea24 0405 	bic.w	r4, r4, r5
    bdb0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bdb4:	d1e4      	bne.n	bd80 <strncpy+0x10>
    bdb6:	3a04      	subs	r2, #4
    bdb8:	2a03      	cmp	r2, #3
    bdba:	f84c 5b04 	str.w	r5, [ip], #4
    bdbe:	4619      	mov	r1, r3
    bdc0:	d8ef      	bhi.n	bda2 <strncpy+0x32>
    bdc2:	e7dd      	b.n	bd80 <strncpy+0x10>
    bdc4:	4494      	add	ip, r2
    bdc6:	2c00      	cmp	r4, #0
    bdc8:	d0e8      	beq.n	bd9c <strncpy+0x2c>
    bdca:	f803 1b01 	strb.w	r1, [r3], #1
    bdce:	4563      	cmp	r3, ip
    bdd0:	d1fb      	bne.n	bdca <strncpy+0x5a>
    bdd2:	bd30      	pop	{r4, r5, pc}

0000bdd4 <__locale_mb_cur_max>:
    bdd4:	4b01      	ldr	r3, [pc, #4]	; (bddc <__locale_mb_cur_max+0x8>)
    bdd6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bdda:	4770      	bx	lr
    bddc:	200044ac 	.word	0x200044ac

0000bde0 <_close_r>:
    bde0:	b538      	push	{r3, r4, r5, lr}
    bde2:	4d07      	ldr	r5, [pc, #28]	; (be00 <_close_r+0x20>)
    bde4:	2200      	movs	r2, #0
    bde6:	4604      	mov	r4, r0
    bde8:	4608      	mov	r0, r1
    bdea:	602a      	str	r2, [r5, #0]
    bdec:	f7fd faa2 	bl	9334 <_close>
    bdf0:	1c43      	adds	r3, r0, #1
    bdf2:	d000      	beq.n	bdf6 <_close_r+0x16>
    bdf4:	bd38      	pop	{r3, r4, r5, pc}
    bdf6:	682b      	ldr	r3, [r5, #0]
    bdf8:	2b00      	cmp	r3, #0
    bdfa:	d0fb      	beq.n	bdf4 <_close_r+0x14>
    bdfc:	6023      	str	r3, [r4, #0]
    bdfe:	bd38      	pop	{r3, r4, r5, pc}
    be00:	200053dc 	.word	0x200053dc

0000be04 <_lseek_r>:
    be04:	b538      	push	{r3, r4, r5, lr}
    be06:	460c      	mov	r4, r1
    be08:	4d08      	ldr	r5, [pc, #32]	; (be2c <_lseek_r+0x28>)
    be0a:	4684      	mov	ip, r0
    be0c:	4611      	mov	r1, r2
    be0e:	4620      	mov	r0, r4
    be10:	461a      	mov	r2, r3
    be12:	2300      	movs	r3, #0
    be14:	602b      	str	r3, [r5, #0]
    be16:	4664      	mov	r4, ip
    be18:	f7fd fa98 	bl	934c <_lseek>
    be1c:	1c43      	adds	r3, r0, #1
    be1e:	d000      	beq.n	be22 <_lseek_r+0x1e>
    be20:	bd38      	pop	{r3, r4, r5, pc}
    be22:	682b      	ldr	r3, [r5, #0]
    be24:	2b00      	cmp	r3, #0
    be26:	d0fb      	beq.n	be20 <_lseek_r+0x1c>
    be28:	6023      	str	r3, [r4, #0]
    be2a:	bd38      	pop	{r3, r4, r5, pc}
    be2c:	200053dc 	.word	0x200053dc

0000be30 <_read_r>:
    be30:	b538      	push	{r3, r4, r5, lr}
    be32:	460c      	mov	r4, r1
    be34:	4d08      	ldr	r5, [pc, #32]	; (be58 <_read_r+0x28>)
    be36:	4684      	mov	ip, r0
    be38:	4611      	mov	r1, r2
    be3a:	4620      	mov	r0, r4
    be3c:	461a      	mov	r2, r3
    be3e:	2300      	movs	r3, #0
    be40:	602b      	str	r3, [r5, #0]
    be42:	4664      	mov	r4, ip
    be44:	f7fd fa74 	bl	9330 <_read>
    be48:	1c43      	adds	r3, r0, #1
    be4a:	d000      	beq.n	be4e <_read_r+0x1e>
    be4c:	bd38      	pop	{r3, r4, r5, pc}
    be4e:	682b      	ldr	r3, [r5, #0]
    be50:	2b00      	cmp	r3, #0
    be52:	d0fb      	beq.n	be4c <_read_r+0x1c>
    be54:	6023      	str	r3, [r4, #0]
    be56:	bd38      	pop	{r3, r4, r5, pc}
    be58:	200053dc 	.word	0x200053dc

0000be5c <_sbrk_r>:
    be5c:	b538      	push	{r3, r4, r5, lr}
    be5e:	4d07      	ldr	r5, [pc, #28]	; (be7c <_sbrk_r+0x20>)
    be60:	2200      	movs	r2, #0
    be62:	4604      	mov	r4, r0
    be64:	4608      	mov	r0, r1
    be66:	602a      	str	r2, [r5, #0]
    be68:	f7fd fa48 	bl	92fc <_sbrk>
    be6c:	1c43      	adds	r3, r0, #1
    be6e:	d000      	beq.n	be72 <_sbrk_r+0x16>
    be70:	bd38      	pop	{r3, r4, r5, pc}
    be72:	682b      	ldr	r3, [r5, #0]
    be74:	2b00      	cmp	r3, #0
    be76:	d0fb      	beq.n	be70 <_sbrk_r+0x14>
    be78:	6023      	str	r3, [r4, #0]
    be7a:	bd38      	pop	{r3, r4, r5, pc}
    be7c:	200053dc 	.word	0x200053dc

0000be80 <_write_r>:
    be80:	b538      	push	{r3, r4, r5, lr}
    be82:	460c      	mov	r4, r1
    be84:	4d08      	ldr	r5, [pc, #32]	; (bea8 <_write_r+0x28>)
    be86:	4684      	mov	ip, r0
    be88:	4611      	mov	r1, r2
    be8a:	4620      	mov	r0, r4
    be8c:	461a      	mov	r2, r3
    be8e:	2300      	movs	r3, #0
    be90:	602b      	str	r3, [r5, #0]
    be92:	4664      	mov	r4, ip
    be94:	f7fc fdaa 	bl	89ec <_write>
    be98:	1c43      	adds	r3, r0, #1
    be9a:	d000      	beq.n	be9e <_write_r+0x1e>
    be9c:	bd38      	pop	{r3, r4, r5, pc}
    be9e:	682b      	ldr	r3, [r5, #0]
    bea0:	2b00      	cmp	r3, #0
    bea2:	d0fb      	beq.n	be9c <_write_r+0x1c>
    bea4:	6023      	str	r3, [r4, #0]
    bea6:	bd38      	pop	{r3, r4, r5, pc}
    bea8:	200053dc 	.word	0x200053dc

0000beac <__errno>:
    beac:	4b01      	ldr	r3, [pc, #4]	; (beb4 <__errno+0x8>)
    beae:	6818      	ldr	r0, [r3, #0]
    beb0:	4770      	bx	lr
    beb2:	bf00      	nop
    beb4:	20004a34 	.word	0x20004a34

0000beb8 <__libc_init_array>:
    beb8:	b570      	push	{r4, r5, r6, lr}
    beba:	4e0d      	ldr	r6, [pc, #52]	; (bef0 <__libc_init_array+0x38>)
    bebc:	4d0d      	ldr	r5, [pc, #52]	; (bef4 <__libc_init_array+0x3c>)
    bebe:	1b76      	subs	r6, r6, r5
    bec0:	10b6      	asrs	r6, r6, #2
    bec2:	d006      	beq.n	bed2 <__libc_init_array+0x1a>
    bec4:	2400      	movs	r4, #0
    bec6:	f855 3b04 	ldr.w	r3, [r5], #4
    beca:	3401      	adds	r4, #1
    becc:	4798      	blx	r3
    bece:	42a6      	cmp	r6, r4
    bed0:	d1f9      	bne.n	bec6 <__libc_init_array+0xe>
    bed2:	4e09      	ldr	r6, [pc, #36]	; (bef8 <__libc_init_array+0x40>)
    bed4:	4d09      	ldr	r5, [pc, #36]	; (befc <__libc_init_array+0x44>)
    bed6:	1b76      	subs	r6, r6, r5
    bed8:	f005 fb96 	bl	11608 <___init_veneer>
    bedc:	10b6      	asrs	r6, r6, #2
    bede:	d006      	beq.n	beee <__libc_init_array+0x36>
    bee0:	2400      	movs	r4, #0
    bee2:	f855 3b04 	ldr.w	r3, [r5], #4
    bee6:	3401      	adds	r4, #1
    bee8:	4798      	blx	r3
    beea:	42a6      	cmp	r6, r4
    beec:	d1f9      	bne.n	bee2 <__libc_init_array+0x2a>
    beee:	bd70      	pop	{r4, r5, r6, pc}
    bef0:	60001e48 	.word	0x60001e48
    bef4:	60001e48 	.word	0x60001e48
    bef8:	60001e50 	.word	0x60001e50
    befc:	60001e48 	.word	0x60001e48

0000bf00 <__retarget_lock_init_recursive>:
    bf00:	4770      	bx	lr
    bf02:	bf00      	nop

0000bf04 <__retarget_lock_close_recursive>:
    bf04:	4770      	bx	lr
    bf06:	bf00      	nop

0000bf08 <__retarget_lock_acquire_recursive>:
    bf08:	4770      	bx	lr
    bf0a:	bf00      	nop

0000bf0c <__retarget_lock_release_recursive>:
    bf0c:	4770      	bx	lr
    bf0e:	bf00      	nop
	...
    bf20:	eba2 0003 	sub.w	r0, r2, r3
    bf24:	4770      	bx	lr
    bf26:	bf00      	nop

0000bf28 <strcmp>:
    bf28:	7802      	ldrb	r2, [r0, #0]
    bf2a:	780b      	ldrb	r3, [r1, #0]
    bf2c:	2a01      	cmp	r2, #1
    bf2e:	bf28      	it	cs
    bf30:	429a      	cmpcs	r2, r3
    bf32:	d1f5      	bne.n	bf20 <__retarget_lock_release_recursive+0x14>
    bf34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    bf38:	ea40 0401 	orr.w	r4, r0, r1
    bf3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    bf40:	f06f 0c00 	mvn.w	ip, #0
    bf44:	ea4f 7244 	mov.w	r2, r4, lsl #29
    bf48:	b312      	cbz	r2, bf90 <strcmp+0x68>
    bf4a:	ea80 0401 	eor.w	r4, r0, r1
    bf4e:	f014 0f07 	tst.w	r4, #7
    bf52:	d16a      	bne.n	c02a <strcmp+0x102>
    bf54:	f000 0407 	and.w	r4, r0, #7
    bf58:	f020 0007 	bic.w	r0, r0, #7
    bf5c:	f004 0503 	and.w	r5, r4, #3
    bf60:	f021 0107 	bic.w	r1, r1, #7
    bf64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    bf68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bf6c:	f014 0f04 	tst.w	r4, #4
    bf70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bf74:	fa0c f405 	lsl.w	r4, ip, r5
    bf78:	ea62 0204 	orn	r2, r2, r4
    bf7c:	ea66 0604 	orn	r6, r6, r4
    bf80:	d00a      	beq.n	bf98 <strcmp+0x70>
    bf82:	ea63 0304 	orn	r3, r3, r4
    bf86:	4662      	mov	r2, ip
    bf88:	ea67 0704 	orn	r7, r7, r4
    bf8c:	4666      	mov	r6, ip
    bf8e:	e003      	b.n	bf98 <strcmp+0x70>
    bf90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    bf94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    bf98:	fa82 f54c 	uadd8	r5, r2, ip
    bf9c:	ea82 0406 	eor.w	r4, r2, r6
    bfa0:	faa4 f48c 	sel	r4, r4, ip
    bfa4:	bb6c      	cbnz	r4, c002 <strcmp+0xda>
    bfa6:	fa83 f54c 	uadd8	r5, r3, ip
    bfaa:	ea83 0507 	eor.w	r5, r3, r7
    bfae:	faa5 f58c 	sel	r5, r5, ip
    bfb2:	b995      	cbnz	r5, bfda <strcmp+0xb2>
    bfb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    bfb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    bfbc:	fa82 f54c 	uadd8	r5, r2, ip
    bfc0:	ea82 0406 	eor.w	r4, r2, r6
    bfc4:	faa4 f48c 	sel	r4, r4, ip
    bfc8:	fa83 f54c 	uadd8	r5, r3, ip
    bfcc:	ea83 0507 	eor.w	r5, r3, r7
    bfd0:	faa5 f58c 	sel	r5, r5, ip
    bfd4:	4325      	orrs	r5, r4
    bfd6:	d0db      	beq.n	bf90 <strcmp+0x68>
    bfd8:	b99c      	cbnz	r4, c002 <strcmp+0xda>
    bfda:	ba2d      	rev	r5, r5
    bfdc:	fab5 f485 	clz	r4, r5
    bfe0:	f024 0407 	bic.w	r4, r4, #7
    bfe4:	fa27 f104 	lsr.w	r1, r7, r4
    bfe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    bfec:	fa23 f304 	lsr.w	r3, r3, r4
    bff0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    bff4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    bff8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    bffc:	eba0 0001 	sub.w	r0, r0, r1
    c000:	4770      	bx	lr
    c002:	ba24      	rev	r4, r4
    c004:	fab4 f484 	clz	r4, r4
    c008:	f024 0407 	bic.w	r4, r4, #7
    c00c:	fa26 f104 	lsr.w	r1, r6, r4
    c010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c014:	fa22 f204 	lsr.w	r2, r2, r4
    c018:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    c01c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c020:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c024:	eba0 0001 	sub.w	r0, r0, r1
    c028:	4770      	bx	lr
    c02a:	f014 0f03 	tst.w	r4, #3
    c02e:	d13c      	bne.n	c0aa <strcmp+0x182>
    c030:	f010 0403 	ands.w	r4, r0, #3
    c034:	d128      	bne.n	c088 <strcmp+0x160>
    c036:	f850 2b08 	ldr.w	r2, [r0], #8
    c03a:	f851 3b08 	ldr.w	r3, [r1], #8
    c03e:	fa82 f54c 	uadd8	r5, r2, ip
    c042:	ea82 0503 	eor.w	r5, r2, r3
    c046:	faa5 f58c 	sel	r5, r5, ip
    c04a:	b95d      	cbnz	r5, c064 <strcmp+0x13c>
    c04c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    c050:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c054:	fa82 f54c 	uadd8	r5, r2, ip
    c058:	ea82 0503 	eor.w	r5, r2, r3
    c05c:	faa5 f58c 	sel	r5, r5, ip
    c060:	2d00      	cmp	r5, #0
    c062:	d0e8      	beq.n	c036 <strcmp+0x10e>
    c064:	ba2d      	rev	r5, r5
    c066:	fab5 f485 	clz	r4, r5
    c06a:	f024 0407 	bic.w	r4, r4, #7
    c06e:	fa23 f104 	lsr.w	r1, r3, r4
    c072:	fa22 f204 	lsr.w	r2, r2, r4
    c076:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    c07a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c07e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c082:	eba0 0001 	sub.w	r0, r0, r1
    c086:	4770      	bx	lr
    c088:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    c08c:	f020 0003 	bic.w	r0, r0, #3
    c090:	f850 2b08 	ldr.w	r2, [r0], #8
    c094:	f021 0103 	bic.w	r1, r1, #3
    c098:	f851 3b08 	ldr.w	r3, [r1], #8
    c09c:	fa0c f404 	lsl.w	r4, ip, r4
    c0a0:	ea62 0204 	orn	r2, r2, r4
    c0a4:	ea63 0304 	orn	r3, r3, r4
    c0a8:	e7c9      	b.n	c03e <strcmp+0x116>
    c0aa:	f010 0403 	ands.w	r4, r0, #3
    c0ae:	d01a      	beq.n	c0e6 <strcmp+0x1be>
    c0b0:	eba1 0104 	sub.w	r1, r1, r4
    c0b4:	f020 0003 	bic.w	r0, r0, #3
    c0b8:	07e4      	lsls	r4, r4, #31
    c0ba:	f850 2b04 	ldr.w	r2, [r0], #4
    c0be:	d006      	beq.n	c0ce <strcmp+0x1a6>
    c0c0:	d20f      	bcs.n	c0e2 <strcmp+0x1ba>
    c0c2:	788b      	ldrb	r3, [r1, #2]
    c0c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    c0c8:	1ae4      	subs	r4, r4, r3
    c0ca:	d106      	bne.n	c0da <strcmp+0x1b2>
    c0cc:	b12b      	cbz	r3, c0da <strcmp+0x1b2>
    c0ce:	78cb      	ldrb	r3, [r1, #3]
    c0d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    c0d4:	1ae4      	subs	r4, r4, r3
    c0d6:	d100      	bne.n	c0da <strcmp+0x1b2>
    c0d8:	b91b      	cbnz	r3, c0e2 <strcmp+0x1ba>
    c0da:	4620      	mov	r0, r4
    c0dc:	f85d 4b10 	ldr.w	r4, [sp], #16
    c0e0:	4770      	bx	lr
    c0e2:	f101 0104 	add.w	r1, r1, #4
    c0e6:	f850 2b04 	ldr.w	r2, [r0], #4
    c0ea:	07cc      	lsls	r4, r1, #31
    c0ec:	f021 0103 	bic.w	r1, r1, #3
    c0f0:	f851 3b04 	ldr.w	r3, [r1], #4
    c0f4:	d848      	bhi.n	c188 <strcmp+0x260>
    c0f6:	d224      	bcs.n	c142 <strcmp+0x21a>
    c0f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    c0fc:	fa82 f54c 	uadd8	r5, r2, ip
    c100:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    c104:	faa5 f58c 	sel	r5, r5, ip
    c108:	d10a      	bne.n	c120 <strcmp+0x1f8>
    c10a:	b965      	cbnz	r5, c126 <strcmp+0x1fe>
    c10c:	f851 3b04 	ldr.w	r3, [r1], #4
    c110:	ea84 0402 	eor.w	r4, r4, r2
    c114:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    c118:	d10e      	bne.n	c138 <strcmp+0x210>
    c11a:	f850 2b04 	ldr.w	r2, [r0], #4
    c11e:	e7eb      	b.n	c0f8 <strcmp+0x1d0>
    c120:	ea4f 2313 	mov.w	r3, r3, lsr #8
    c124:	e055      	b.n	c1d2 <strcmp+0x2aa>
    c126:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    c12a:	d14d      	bne.n	c1c8 <strcmp+0x2a0>
    c12c:	7808      	ldrb	r0, [r1, #0]
    c12e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c132:	f1c0 0000 	rsb	r0, r0, #0
    c136:	4770      	bx	lr
    c138:	ea4f 6212 	mov.w	r2, r2, lsr #24
    c13c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c140:	e047      	b.n	c1d2 <strcmp+0x2aa>
    c142:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    c146:	fa82 f54c 	uadd8	r5, r2, ip
    c14a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    c14e:	faa5 f58c 	sel	r5, r5, ip
    c152:	d10a      	bne.n	c16a <strcmp+0x242>
    c154:	b965      	cbnz	r5, c170 <strcmp+0x248>
    c156:	f851 3b04 	ldr.w	r3, [r1], #4
    c15a:	ea84 0402 	eor.w	r4, r4, r2
    c15e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    c162:	d10c      	bne.n	c17e <strcmp+0x256>
    c164:	f850 2b04 	ldr.w	r2, [r0], #4
    c168:	e7eb      	b.n	c142 <strcmp+0x21a>
    c16a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    c16e:	e030      	b.n	c1d2 <strcmp+0x2aa>
    c170:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    c174:	d128      	bne.n	c1c8 <strcmp+0x2a0>
    c176:	880b      	ldrh	r3, [r1, #0]
    c178:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c17c:	e029      	b.n	c1d2 <strcmp+0x2aa>
    c17e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c182:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    c186:	e024      	b.n	c1d2 <strcmp+0x2aa>
    c188:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    c18c:	fa82 f54c 	uadd8	r5, r2, ip
    c190:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    c194:	faa5 f58c 	sel	r5, r5, ip
    c198:	d10a      	bne.n	c1b0 <strcmp+0x288>
    c19a:	b965      	cbnz	r5, c1b6 <strcmp+0x28e>
    c19c:	f851 3b04 	ldr.w	r3, [r1], #4
    c1a0:	ea84 0402 	eor.w	r4, r4, r2
    c1a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    c1a8:	d109      	bne.n	c1be <strcmp+0x296>
    c1aa:	f850 2b04 	ldr.w	r2, [r0], #4
    c1ae:	e7eb      	b.n	c188 <strcmp+0x260>
    c1b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    c1b4:	e00d      	b.n	c1d2 <strcmp+0x2aa>
    c1b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    c1ba:	d105      	bne.n	c1c8 <strcmp+0x2a0>
    c1bc:	680b      	ldr	r3, [r1, #0]
    c1be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    c1c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c1c6:	e004      	b.n	c1d2 <strcmp+0x2aa>
    c1c8:	f04f 0000 	mov.w	r0, #0
    c1cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c1d0:	4770      	bx	lr
    c1d2:	ba12      	rev	r2, r2
    c1d4:	ba1b      	rev	r3, r3
    c1d6:	fa82 f44c 	uadd8	r4, r2, ip
    c1da:	ea82 0403 	eor.w	r4, r2, r3
    c1de:	faa4 f58c 	sel	r5, r4, ip
    c1e2:	fab5 f485 	clz	r4, r5
    c1e6:	fa02 f204 	lsl.w	r2, r2, r4
    c1ea:	fa03 f304 	lsl.w	r3, r3, r4
    c1ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    c1f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c1f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    c1fa:	4770      	bx	lr

0000c1fc <strcpy>:
    c1fc:	ea80 0201 	eor.w	r2, r0, r1
    c200:	4684      	mov	ip, r0
    c202:	f012 0f03 	tst.w	r2, #3
    c206:	d14f      	bne.n	c2a8 <strcpy+0xac>
    c208:	f011 0f03 	tst.w	r1, #3
    c20c:	d132      	bne.n	c274 <strcpy+0x78>
    c20e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c212:	f011 0f04 	tst.w	r1, #4
    c216:	f851 3b04 	ldr.w	r3, [r1], #4
    c21a:	d00b      	beq.n	c234 <strcpy+0x38>
    c21c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c220:	439a      	bics	r2, r3
    c222:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c226:	bf04      	itt	eq
    c228:	f84c 3b04 	streq.w	r3, [ip], #4
    c22c:	f851 3b04 	ldreq.w	r3, [r1], #4
    c230:	d116      	bne.n	c260 <strcpy+0x64>
    c232:	bf00      	nop
    c234:	f851 4b04 	ldr.w	r4, [r1], #4
    c238:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c23c:	439a      	bics	r2, r3
    c23e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c242:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c246:	d10b      	bne.n	c260 <strcpy+0x64>
    c248:	f84c 3b04 	str.w	r3, [ip], #4
    c24c:	43a2      	bics	r2, r4
    c24e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c252:	bf04      	itt	eq
    c254:	f851 3b04 	ldreq.w	r3, [r1], #4
    c258:	f84c 4b04 	streq.w	r4, [ip], #4
    c25c:	d0ea      	beq.n	c234 <strcpy+0x38>
    c25e:	4623      	mov	r3, r4
    c260:	f80c 3b01 	strb.w	r3, [ip], #1
    c264:	f013 0fff 	tst.w	r3, #255	; 0xff
    c268:	ea4f 2333 	mov.w	r3, r3, ror #8
    c26c:	d1f8      	bne.n	c260 <strcpy+0x64>
    c26e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c272:	4770      	bx	lr
    c274:	f011 0f01 	tst.w	r1, #1
    c278:	d006      	beq.n	c288 <strcpy+0x8c>
    c27a:	f811 2b01 	ldrb.w	r2, [r1], #1
    c27e:	f80c 2b01 	strb.w	r2, [ip], #1
    c282:	2a00      	cmp	r2, #0
    c284:	bf08      	it	eq
    c286:	4770      	bxeq	lr
    c288:	f011 0f02 	tst.w	r1, #2
    c28c:	d0bf      	beq.n	c20e <strcpy+0x12>
    c28e:	f831 2b02 	ldrh.w	r2, [r1], #2
    c292:	f012 0fff 	tst.w	r2, #255	; 0xff
    c296:	bf16      	itet	ne
    c298:	f82c 2b02 	strhne.w	r2, [ip], #2
    c29c:	f88c 2000 	strbeq.w	r2, [ip]
    c2a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c2a4:	d1b3      	bne.n	c20e <strcpy+0x12>
    c2a6:	4770      	bx	lr
    c2a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    c2ac:	f80c 2b01 	strb.w	r2, [ip], #1
    c2b0:	2a00      	cmp	r2, #0
    c2b2:	d1f9      	bne.n	c2a8 <strcpy+0xac>
    c2b4:	4770      	bx	lr
    c2b6:	bf00      	nop
	...

0000c2c0 <strlen>:
    c2c0:	f890 f000 	pld	[r0]
    c2c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c2c8:	f020 0107 	bic.w	r1, r0, #7
    c2cc:	f06f 0c00 	mvn.w	ip, #0
    c2d0:	f010 0407 	ands.w	r4, r0, #7
    c2d4:	f891 f020 	pld	[r1, #32]
    c2d8:	f040 8049 	bne.w	c36e <strlen+0xae>
    c2dc:	f04f 0400 	mov.w	r4, #0
    c2e0:	f06f 0007 	mvn.w	r0, #7
    c2e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    c2e8:	f891 f040 	pld	[r1, #64]	; 0x40
    c2ec:	f100 0008 	add.w	r0, r0, #8
    c2f0:	fa82 f24c 	uadd8	r2, r2, ip
    c2f4:	faa4 f28c 	sel	r2, r4, ip
    c2f8:	fa83 f34c 	uadd8	r3, r3, ip
    c2fc:	faa2 f38c 	sel	r3, r2, ip
    c300:	bb4b      	cbnz	r3, c356 <strlen+0x96>
    c302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c306:	fa82 f24c 	uadd8	r2, r2, ip
    c30a:	f100 0008 	add.w	r0, r0, #8
    c30e:	faa4 f28c 	sel	r2, r4, ip
    c312:	fa83 f34c 	uadd8	r3, r3, ip
    c316:	faa2 f38c 	sel	r3, r2, ip
    c31a:	b9e3      	cbnz	r3, c356 <strlen+0x96>
    c31c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c320:	fa82 f24c 	uadd8	r2, r2, ip
    c324:	f100 0008 	add.w	r0, r0, #8
    c328:	faa4 f28c 	sel	r2, r4, ip
    c32c:	fa83 f34c 	uadd8	r3, r3, ip
    c330:	faa2 f38c 	sel	r3, r2, ip
    c334:	b97b      	cbnz	r3, c356 <strlen+0x96>
    c336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c33a:	f101 0120 	add.w	r1, r1, #32
    c33e:	fa82 f24c 	uadd8	r2, r2, ip
    c342:	f100 0008 	add.w	r0, r0, #8
    c346:	faa4 f28c 	sel	r2, r4, ip
    c34a:	fa83 f34c 	uadd8	r3, r3, ip
    c34e:	faa2 f38c 	sel	r3, r2, ip
    c352:	2b00      	cmp	r3, #0
    c354:	d0c6      	beq.n	c2e4 <strlen+0x24>
    c356:	2a00      	cmp	r2, #0
    c358:	bf04      	itt	eq
    c35a:	3004      	addeq	r0, #4
    c35c:	461a      	moveq	r2, r3
    c35e:	ba12      	rev	r2, r2
    c360:	fab2 f282 	clz	r2, r2
    c364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c36c:	4770      	bx	lr
    c36e:	e9d1 2300 	ldrd	r2, r3, [r1]
    c372:	f004 0503 	and.w	r5, r4, #3
    c376:	f1c4 0000 	rsb	r0, r4, #0
    c37a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c37e:	f014 0f04 	tst.w	r4, #4
    c382:	f891 f040 	pld	[r1, #64]	; 0x40
    c386:	fa0c f505 	lsl.w	r5, ip, r5
    c38a:	ea62 0205 	orn	r2, r2, r5
    c38e:	bf1c      	itt	ne
    c390:	ea63 0305 	ornne	r3, r3, r5
    c394:	4662      	movne	r2, ip
    c396:	f04f 0400 	mov.w	r4, #0
    c39a:	e7a9      	b.n	c2f0 <strlen+0x30>

0000c39c <__register_exitproc>:
    c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; c420 <__register_exitproc+0x84>
    c3a4:	4606      	mov	r6, r0
    c3a6:	f8da 0000 	ldr.w	r0, [sl]
    c3aa:	4698      	mov	r8, r3
    c3ac:	460f      	mov	r7, r1
    c3ae:	4691      	mov	r9, r2
    c3b0:	f7ff fdaa 	bl	bf08 <__retarget_lock_acquire_recursive>
    c3b4:	4b18      	ldr	r3, [pc, #96]	; (c418 <__register_exitproc+0x7c>)
    c3b6:	681c      	ldr	r4, [r3, #0]
    c3b8:	b324      	cbz	r4, c404 <__register_exitproc+0x68>
    c3ba:	6865      	ldr	r5, [r4, #4]
    c3bc:	2d1f      	cmp	r5, #31
    c3be:	dc24      	bgt.n	c40a <__register_exitproc+0x6e>
    c3c0:	b95e      	cbnz	r6, c3da <__register_exitproc+0x3e>
    c3c2:	1c6b      	adds	r3, r5, #1
    c3c4:	3502      	adds	r5, #2
    c3c6:	f8da 0000 	ldr.w	r0, [sl]
    c3ca:	6063      	str	r3, [r4, #4]
    c3cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c3d0:	f7ff fd9c 	bl	bf0c <__retarget_lock_release_recursive>
    c3d4:	2000      	movs	r0, #0
    c3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c3de:	2301      	movs	r3, #1
    c3e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c3e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c3e8:	40ab      	lsls	r3, r5
    c3ea:	431a      	orrs	r2, r3
    c3ec:	2e02      	cmp	r6, #2
    c3ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c3f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c3f6:	d1e4      	bne.n	c3c2 <__register_exitproc+0x26>
    c3f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c3fc:	431a      	orrs	r2, r3
    c3fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c402:	e7de      	b.n	c3c2 <__register_exitproc+0x26>
    c404:	4c05      	ldr	r4, [pc, #20]	; (c41c <__register_exitproc+0x80>)
    c406:	601c      	str	r4, [r3, #0]
    c408:	e7d7      	b.n	c3ba <__register_exitproc+0x1e>
    c40a:	f8da 0000 	ldr.w	r0, [sl]
    c40e:	f7ff fd7d 	bl	bf0c <__retarget_lock_release_recursive>
    c412:	f04f 30ff 	mov.w	r0, #4294967295
    c416:	e7de      	b.n	c3d6 <__register_exitproc+0x3a>
    c418:	200050b8 	.word	0x200050b8
    c41c:	200050bc 	.word	0x200050bc
    c420:	200044a0 	.word	0x200044a0

0000c424 <_malloc_trim_r>:
    c424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c426:	4f24      	ldr	r7, [pc, #144]	; (c4b8 <_malloc_trim_r+0x94>)
    c428:	460c      	mov	r4, r1
    c42a:	4606      	mov	r6, r0
    c42c:	f7fe fe50 	bl	b0d0 <__malloc_lock>
    c430:	68bb      	ldr	r3, [r7, #8]
    c432:	685d      	ldr	r5, [r3, #4]
    c434:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c438:	310f      	adds	r1, #15
    c43a:	f025 0503 	bic.w	r5, r5, #3
    c43e:	194b      	adds	r3, r1, r5
    c440:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c444:	f023 030f 	bic.w	r3, r3, #15
    c448:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c44c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c450:	db07      	blt.n	c462 <_malloc_trim_r+0x3e>
    c452:	2100      	movs	r1, #0
    c454:	4630      	mov	r0, r6
    c456:	f7ff fd01 	bl	be5c <_sbrk_r>
    c45a:	68bb      	ldr	r3, [r7, #8]
    c45c:	442b      	add	r3, r5
    c45e:	4298      	cmp	r0, r3
    c460:	d004      	beq.n	c46c <_malloc_trim_r+0x48>
    c462:	4630      	mov	r0, r6
    c464:	f7fe fe3a 	bl	b0dc <__malloc_unlock>
    c468:	2000      	movs	r0, #0
    c46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c46c:	4261      	negs	r1, r4
    c46e:	4630      	mov	r0, r6
    c470:	f7ff fcf4 	bl	be5c <_sbrk_r>
    c474:	3001      	adds	r0, #1
    c476:	d00d      	beq.n	c494 <_malloc_trim_r+0x70>
    c478:	4a10      	ldr	r2, [pc, #64]	; (c4bc <_malloc_trim_r+0x98>)
    c47a:	68bb      	ldr	r3, [r7, #8]
    c47c:	1b2d      	subs	r5, r5, r4
    c47e:	f045 0501 	orr.w	r5, r5, #1
    c482:	605d      	str	r5, [r3, #4]
    c484:	6813      	ldr	r3, [r2, #0]
    c486:	4630      	mov	r0, r6
    c488:	1b1b      	subs	r3, r3, r4
    c48a:	6013      	str	r3, [r2, #0]
    c48c:	f7fe fe26 	bl	b0dc <__malloc_unlock>
    c490:	2001      	movs	r0, #1
    c492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c494:	2100      	movs	r1, #0
    c496:	4630      	mov	r0, r6
    c498:	f7ff fce0 	bl	be5c <_sbrk_r>
    c49c:	68ba      	ldr	r2, [r7, #8]
    c49e:	1a83      	subs	r3, r0, r2
    c4a0:	2b0f      	cmp	r3, #15
    c4a2:	ddde      	ble.n	c462 <_malloc_trim_r+0x3e>
    c4a4:	f043 0301 	orr.w	r3, r3, #1
    c4a8:	6053      	str	r3, [r2, #4]
    c4aa:	4b05      	ldr	r3, [pc, #20]	; (c4c0 <_malloc_trim_r+0x9c>)
    c4ac:	4903      	ldr	r1, [pc, #12]	; (c4bc <_malloc_trim_r+0x98>)
    c4ae:	681b      	ldr	r3, [r3, #0]
    c4b0:	1ac0      	subs	r0, r0, r3
    c4b2:	6008      	str	r0, [r1, #0]
    c4b4:	e7d5      	b.n	c462 <_malloc_trim_r+0x3e>
    c4b6:	bf00      	nop
    c4b8:	20004618 	.word	0x20004618
    c4bc:	20005258 	.word	0x20005258
    c4c0:	20004a20 	.word	0x20004a20

0000c4c4 <_free_r>:
    c4c4:	2900      	cmp	r1, #0
    c4c6:	d061      	beq.n	c58c <_free_r+0xc8>
    c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ca:	460c      	mov	r4, r1
    c4cc:	4606      	mov	r6, r0
    c4ce:	f7fe fdff 	bl	b0d0 <__malloc_lock>
    c4d2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c4d6:	4f7b      	ldr	r7, [pc, #492]	; (c6c4 <_free_r+0x200>)
    c4d8:	f1a4 0508 	sub.w	r5, r4, #8
    c4dc:	f022 0101 	bic.w	r1, r2, #1
    c4e0:	eb05 0c01 	add.w	ip, r5, r1
    c4e4:	68b8      	ldr	r0, [r7, #8]
    c4e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c4ea:	4560      	cmp	r0, ip
    c4ec:	f023 0303 	bic.w	r3, r3, #3
    c4f0:	f000 808b 	beq.w	c60a <_free_r+0x146>
    c4f4:	07d2      	lsls	r2, r2, #31
    c4f6:	f8cc 3004 	str.w	r3, [ip, #4]
    c4fa:	d432      	bmi.n	c562 <_free_r+0x9e>
    c4fc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c500:	1aad      	subs	r5, r5, r2
    c502:	4411      	add	r1, r2
    c504:	68aa      	ldr	r2, [r5, #8]
    c506:	f107 0008 	add.w	r0, r7, #8
    c50a:	4282      	cmp	r2, r0
    c50c:	d06a      	beq.n	c5e4 <_free_r+0x120>
    c50e:	eb0c 0403 	add.w	r4, ip, r3
    c512:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c516:	68ec      	ldr	r4, [r5, #12]
    c518:	60d4      	str	r4, [r2, #12]
    c51a:	f01e 0f01 	tst.w	lr, #1
    c51e:	60a2      	str	r2, [r4, #8]
    c520:	f000 8097 	beq.w	c652 <_free_r+0x18e>
    c524:	f041 0301 	orr.w	r3, r1, #1
    c528:	606b      	str	r3, [r5, #4]
    c52a:	f8cc 1000 	str.w	r1, [ip]
    c52e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c532:	d235      	bcs.n	c5a0 <_free_r+0xdc>
    c534:	6878      	ldr	r0, [r7, #4]
    c536:	08cb      	lsrs	r3, r1, #3
    c538:	2201      	movs	r2, #1
    c53a:	0949      	lsrs	r1, r1, #5
    c53c:	3301      	adds	r3, #1
    c53e:	408a      	lsls	r2, r1
    c540:	4302      	orrs	r2, r0
    c542:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c546:	607a      	str	r2, [r7, #4]
    c548:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c54c:	3a08      	subs	r2, #8
    c54e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c552:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c556:	60cd      	str	r5, [r1, #12]
    c558:	4630      	mov	r0, r6
    c55a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c55e:	f7fe bdbd 	b.w	b0dc <__malloc_unlock>
    c562:	eb0c 0203 	add.w	r2, ip, r3
    c566:	6852      	ldr	r2, [r2, #4]
    c568:	07d0      	lsls	r0, r2, #31
    c56a:	d410      	bmi.n	c58e <_free_r+0xca>
    c56c:	4419      	add	r1, r3
    c56e:	f107 0008 	add.w	r0, r7, #8
    c572:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c576:	4283      	cmp	r3, r0
    c578:	d073      	beq.n	c662 <_free_r+0x19e>
    c57a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c57e:	60da      	str	r2, [r3, #12]
    c580:	6093      	str	r3, [r2, #8]
    c582:	f041 0301 	orr.w	r3, r1, #1
    c586:	606b      	str	r3, [r5, #4]
    c588:	5069      	str	r1, [r5, r1]
    c58a:	e7d0      	b.n	c52e <_free_r+0x6a>
    c58c:	4770      	bx	lr
    c58e:	f041 0301 	orr.w	r3, r1, #1
    c592:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c596:	f844 3c04 	str.w	r3, [r4, #-4]
    c59a:	f8cc 1000 	str.w	r1, [ip]
    c59e:	d3c9      	bcc.n	c534 <_free_r+0x70>
    c5a0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c5a4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c5a8:	d248      	bcs.n	c63c <_free_r+0x178>
    c5aa:	098b      	lsrs	r3, r1, #6
    c5ac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c5b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c5b4:	00c3      	lsls	r3, r0, #3
    c5b6:	18f8      	adds	r0, r7, r3
    c5b8:	58fb      	ldr	r3, [r7, r3]
    c5ba:	3808      	subs	r0, #8
    c5bc:	4298      	cmp	r0, r3
    c5be:	d059      	beq.n	c674 <_free_r+0x1b0>
    c5c0:	685a      	ldr	r2, [r3, #4]
    c5c2:	f022 0203 	bic.w	r2, r2, #3
    c5c6:	428a      	cmp	r2, r1
    c5c8:	d902      	bls.n	c5d0 <_free_r+0x10c>
    c5ca:	689b      	ldr	r3, [r3, #8]
    c5cc:	4298      	cmp	r0, r3
    c5ce:	d1f7      	bne.n	c5c0 <_free_r+0xfc>
    c5d0:	68d8      	ldr	r0, [r3, #12]
    c5d2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c5d6:	6085      	str	r5, [r0, #8]
    c5d8:	60dd      	str	r5, [r3, #12]
    c5da:	4630      	mov	r0, r6
    c5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c5e0:	f7fe bd7c 	b.w	b0dc <__malloc_unlock>
    c5e4:	eb0c 0203 	add.w	r2, ip, r3
    c5e8:	6852      	ldr	r2, [r2, #4]
    c5ea:	07d2      	lsls	r2, r2, #31
    c5ec:	d463      	bmi.n	c6b6 <_free_r+0x1f2>
    c5ee:	440b      	add	r3, r1
    c5f0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c5f4:	60ca      	str	r2, [r1, #12]
    c5f6:	6091      	str	r1, [r2, #8]
    c5f8:	f043 0201 	orr.w	r2, r3, #1
    c5fc:	606a      	str	r2, [r5, #4]
    c5fe:	4630      	mov	r0, r6
    c600:	50eb      	str	r3, [r5, r3]
    c602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c606:	f7fe bd69 	b.w	b0dc <__malloc_unlock>
    c60a:	440b      	add	r3, r1
    c60c:	07d1      	lsls	r1, r2, #31
    c60e:	d407      	bmi.n	c620 <_free_r+0x15c>
    c610:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c614:	1aad      	subs	r5, r5, r2
    c616:	4413      	add	r3, r2
    c618:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c61c:	60ca      	str	r2, [r1, #12]
    c61e:	6091      	str	r1, [r2, #8]
    c620:	f043 0201 	orr.w	r2, r3, #1
    c624:	606a      	str	r2, [r5, #4]
    c626:	4a28      	ldr	r2, [pc, #160]	; (c6c8 <_free_r+0x204>)
    c628:	60bd      	str	r5, [r7, #8]
    c62a:	6812      	ldr	r2, [r2, #0]
    c62c:	429a      	cmp	r2, r3
    c62e:	d893      	bhi.n	c558 <_free_r+0x94>
    c630:	4b26      	ldr	r3, [pc, #152]	; (c6cc <_free_r+0x208>)
    c632:	4630      	mov	r0, r6
    c634:	6819      	ldr	r1, [r3, #0]
    c636:	f7ff fef5 	bl	c424 <_malloc_trim_r>
    c63a:	e78d      	b.n	c558 <_free_r+0x94>
    c63c:	2b14      	cmp	r3, #20
    c63e:	d90a      	bls.n	c656 <_free_r+0x192>
    c640:	2b54      	cmp	r3, #84	; 0x54
    c642:	d81f      	bhi.n	c684 <_free_r+0x1c0>
    c644:	0b0b      	lsrs	r3, r1, #12
    c646:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c64a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c64e:	00c3      	lsls	r3, r0, #3
    c650:	e7b1      	b.n	c5b6 <_free_r+0xf2>
    c652:	4419      	add	r1, r3
    c654:	e78d      	b.n	c572 <_free_r+0xae>
    c656:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c65a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c65e:	00c3      	lsls	r3, r0, #3
    c660:	e7a9      	b.n	c5b6 <_free_r+0xf2>
    c662:	f041 0301 	orr.w	r3, r1, #1
    c666:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c66a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c66e:	606b      	str	r3, [r5, #4]
    c670:	5069      	str	r1, [r5, r1]
    c672:	e771      	b.n	c558 <_free_r+0x94>
    c674:	6879      	ldr	r1, [r7, #4]
    c676:	1092      	asrs	r2, r2, #2
    c678:	2401      	movs	r4, #1
    c67a:	fa04 f202 	lsl.w	r2, r4, r2
    c67e:	430a      	orrs	r2, r1
    c680:	607a      	str	r2, [r7, #4]
    c682:	e7a6      	b.n	c5d2 <_free_r+0x10e>
    c684:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c688:	d806      	bhi.n	c698 <_free_r+0x1d4>
    c68a:	0bcb      	lsrs	r3, r1, #15
    c68c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c690:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c694:	00c3      	lsls	r3, r0, #3
    c696:	e78e      	b.n	c5b6 <_free_r+0xf2>
    c698:	f240 5254 	movw	r2, #1364	; 0x554
    c69c:	4293      	cmp	r3, r2
    c69e:	d806      	bhi.n	c6ae <_free_r+0x1ea>
    c6a0:	0c8b      	lsrs	r3, r1, #18
    c6a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c6a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c6aa:	00c3      	lsls	r3, r0, #3
    c6ac:	e783      	b.n	c5b6 <_free_r+0xf2>
    c6ae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c6b2:	227e      	movs	r2, #126	; 0x7e
    c6b4:	e77f      	b.n	c5b6 <_free_r+0xf2>
    c6b6:	f041 0301 	orr.w	r3, r1, #1
    c6ba:	606b      	str	r3, [r5, #4]
    c6bc:	f8cc 1000 	str.w	r1, [ip]
    c6c0:	e74a      	b.n	c558 <_free_r+0x94>
    c6c2:	bf00      	nop
    c6c4:	20004618 	.word	0x20004618
    c6c8:	20004a24 	.word	0x20004a24
    c6cc:	20005288 	.word	0x20005288

0000c6d0 <__ascii_mbtowc>:
    c6d0:	b082      	sub	sp, #8
    c6d2:	b149      	cbz	r1, c6e8 <__ascii_mbtowc+0x18>
    c6d4:	b15a      	cbz	r2, c6ee <__ascii_mbtowc+0x1e>
    c6d6:	b16b      	cbz	r3, c6f4 <__ascii_mbtowc+0x24>
    c6d8:	7813      	ldrb	r3, [r2, #0]
    c6da:	600b      	str	r3, [r1, #0]
    c6dc:	7812      	ldrb	r2, [r2, #0]
    c6de:	1e10      	subs	r0, r2, #0
    c6e0:	bf18      	it	ne
    c6e2:	2001      	movne	r0, #1
    c6e4:	b002      	add	sp, #8
    c6e6:	4770      	bx	lr
    c6e8:	a901      	add	r1, sp, #4
    c6ea:	2a00      	cmp	r2, #0
    c6ec:	d1f3      	bne.n	c6d6 <__ascii_mbtowc+0x6>
    c6ee:	4610      	mov	r0, r2
    c6f0:	b002      	add	sp, #8
    c6f2:	4770      	bx	lr
    c6f4:	f06f 0001 	mvn.w	r0, #1
    c6f8:	e7f4      	b.n	c6e4 <__ascii_mbtowc+0x14>
    c6fa:	bf00      	nop

0000c6fc <_Balloc>:
    c6fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c6fe:	b570      	push	{r4, r5, r6, lr}
    c700:	4605      	mov	r5, r0
    c702:	460c      	mov	r4, r1
    c704:	b14b      	cbz	r3, c71a <_Balloc+0x1e>
    c706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c70a:	b180      	cbz	r0, c72e <_Balloc+0x32>
    c70c:	6802      	ldr	r2, [r0, #0]
    c70e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c712:	2300      	movs	r3, #0
    c714:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c718:	bd70      	pop	{r4, r5, r6, pc}
    c71a:	2221      	movs	r2, #33	; 0x21
    c71c:	2104      	movs	r1, #4
    c71e:	f002 fb33 	bl	ed88 <_calloc_r>
    c722:	4603      	mov	r3, r0
    c724:	6468      	str	r0, [r5, #68]	; 0x44
    c726:	2800      	cmp	r0, #0
    c728:	d1ed      	bne.n	c706 <_Balloc+0xa>
    c72a:	2000      	movs	r0, #0
    c72c:	bd70      	pop	{r4, r5, r6, pc}
    c72e:	2101      	movs	r1, #1
    c730:	fa01 f604 	lsl.w	r6, r1, r4
    c734:	1d72      	adds	r2, r6, #5
    c736:	0092      	lsls	r2, r2, #2
    c738:	4628      	mov	r0, r5
    c73a:	f002 fb25 	bl	ed88 <_calloc_r>
    c73e:	2800      	cmp	r0, #0
    c740:	d0f3      	beq.n	c72a <_Balloc+0x2e>
    c742:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c746:	e7e4      	b.n	c712 <_Balloc+0x16>

0000c748 <_Bfree>:
    c748:	b131      	cbz	r1, c758 <_Bfree+0x10>
    c74a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c74c:	684a      	ldr	r2, [r1, #4]
    c74e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c752:	6008      	str	r0, [r1, #0]
    c754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c758:	4770      	bx	lr
    c75a:	bf00      	nop

0000c75c <__multadd>:
    c75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c760:	690e      	ldr	r6, [r1, #16]
    c762:	4680      	mov	r8, r0
    c764:	460f      	mov	r7, r1
    c766:	461d      	mov	r5, r3
    c768:	f101 0e14 	add.w	lr, r1, #20
    c76c:	2000      	movs	r0, #0
    c76e:	f8de 1000 	ldr.w	r1, [lr]
    c772:	b28c      	uxth	r4, r1
    c774:	fb02 5304 	mla	r3, r2, r4, r5
    c778:	0c09      	lsrs	r1, r1, #16
    c77a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c77e:	fb02 cc01 	mla	ip, r2, r1, ip
    c782:	3001      	adds	r0, #1
    c784:	b29c      	uxth	r4, r3
    c786:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c78a:	4286      	cmp	r6, r0
    c78c:	f84e 4b04 	str.w	r4, [lr], #4
    c790:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c794:	dceb      	bgt.n	c76e <__multadd+0x12>
    c796:	b13d      	cbz	r5, c7a8 <__multadd+0x4c>
    c798:	68bb      	ldr	r3, [r7, #8]
    c79a:	42b3      	cmp	r3, r6
    c79c:	dd07      	ble.n	c7ae <__multadd+0x52>
    c79e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c7a2:	3601      	adds	r6, #1
    c7a4:	615d      	str	r5, [r3, #20]
    c7a6:	613e      	str	r6, [r7, #16]
    c7a8:	4638      	mov	r0, r7
    c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7ae:	6879      	ldr	r1, [r7, #4]
    c7b0:	4640      	mov	r0, r8
    c7b2:	3101      	adds	r1, #1
    c7b4:	f7ff ffa2 	bl	c6fc <_Balloc>
    c7b8:	4604      	mov	r4, r0
    c7ba:	b1b0      	cbz	r0, c7ea <__multadd+0x8e>
    c7bc:	693a      	ldr	r2, [r7, #16]
    c7be:	3202      	adds	r2, #2
    c7c0:	f107 010c 	add.w	r1, r7, #12
    c7c4:	0092      	lsls	r2, r2, #2
    c7c6:	300c      	adds	r0, #12
    c7c8:	f7fc fc0c 	bl	8fe4 <memcpy>
    c7cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c7d0:	687a      	ldr	r2, [r7, #4]
    c7d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c7d6:	6039      	str	r1, [r7, #0]
    c7d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c7dc:	4627      	mov	r7, r4
    c7de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c7e2:	3601      	adds	r6, #1
    c7e4:	615d      	str	r5, [r3, #20]
    c7e6:	613e      	str	r6, [r7, #16]
    c7e8:	e7de      	b.n	c7a8 <__multadd+0x4c>
    c7ea:	4b03      	ldr	r3, [pc, #12]	; (c7f8 <__multadd+0x9c>)
    c7ec:	4803      	ldr	r0, [pc, #12]	; (c7fc <__multadd+0xa0>)
    c7ee:	4622      	mov	r2, r4
    c7f0:	21ba      	movs	r1, #186	; 0xba
    c7f2:	f002 faa9 	bl	ed48 <__assert_func>
    c7f6:	bf00      	nop
    c7f8:	20000b74 	.word	0x20000b74
    c7fc:	20000b88 	.word	0x20000b88

0000c800 <__hi0bits>:
    c800:	0c03      	lsrs	r3, r0, #16
    c802:	041b      	lsls	r3, r3, #16
    c804:	b9d3      	cbnz	r3, c83c <__hi0bits+0x3c>
    c806:	0400      	lsls	r0, r0, #16
    c808:	2310      	movs	r3, #16
    c80a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c80e:	bf04      	itt	eq
    c810:	0200      	lsleq	r0, r0, #8
    c812:	3308      	addeq	r3, #8
    c814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c818:	bf04      	itt	eq
    c81a:	0100      	lsleq	r0, r0, #4
    c81c:	3304      	addeq	r3, #4
    c81e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c822:	bf04      	itt	eq
    c824:	0080      	lsleq	r0, r0, #2
    c826:	3302      	addeq	r3, #2
    c828:	2800      	cmp	r0, #0
    c82a:	db05      	blt.n	c838 <__hi0bits+0x38>
    c82c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c830:	f103 0301 	add.w	r3, r3, #1
    c834:	bf08      	it	eq
    c836:	2320      	moveq	r3, #32
    c838:	4618      	mov	r0, r3
    c83a:	4770      	bx	lr
    c83c:	2300      	movs	r3, #0
    c83e:	e7e4      	b.n	c80a <__hi0bits+0xa>

0000c840 <__lo0bits>:
    c840:	6803      	ldr	r3, [r0, #0]
    c842:	f013 0207 	ands.w	r2, r3, #7
    c846:	d008      	beq.n	c85a <__lo0bits+0x1a>
    c848:	07d9      	lsls	r1, r3, #31
    c84a:	d41f      	bmi.n	c88c <__lo0bits+0x4c>
    c84c:	079a      	lsls	r2, r3, #30
    c84e:	d522      	bpl.n	c896 <__lo0bits+0x56>
    c850:	085b      	lsrs	r3, r3, #1
    c852:	6003      	str	r3, [r0, #0]
    c854:	2201      	movs	r2, #1
    c856:	4610      	mov	r0, r2
    c858:	4770      	bx	lr
    c85a:	b299      	uxth	r1, r3
    c85c:	b909      	cbnz	r1, c862 <__lo0bits+0x22>
    c85e:	0c1b      	lsrs	r3, r3, #16
    c860:	2210      	movs	r2, #16
    c862:	b2d9      	uxtb	r1, r3
    c864:	b909      	cbnz	r1, c86a <__lo0bits+0x2a>
    c866:	3208      	adds	r2, #8
    c868:	0a1b      	lsrs	r3, r3, #8
    c86a:	0719      	lsls	r1, r3, #28
    c86c:	bf04      	itt	eq
    c86e:	091b      	lsreq	r3, r3, #4
    c870:	3204      	addeq	r2, #4
    c872:	0799      	lsls	r1, r3, #30
    c874:	bf04      	itt	eq
    c876:	089b      	lsreq	r3, r3, #2
    c878:	3202      	addeq	r2, #2
    c87a:	07d9      	lsls	r1, r3, #31
    c87c:	d403      	bmi.n	c886 <__lo0bits+0x46>
    c87e:	085b      	lsrs	r3, r3, #1
    c880:	f102 0201 	add.w	r2, r2, #1
    c884:	d005      	beq.n	c892 <__lo0bits+0x52>
    c886:	6003      	str	r3, [r0, #0]
    c888:	4610      	mov	r0, r2
    c88a:	4770      	bx	lr
    c88c:	2200      	movs	r2, #0
    c88e:	4610      	mov	r0, r2
    c890:	4770      	bx	lr
    c892:	2220      	movs	r2, #32
    c894:	e7df      	b.n	c856 <__lo0bits+0x16>
    c896:	089b      	lsrs	r3, r3, #2
    c898:	2202      	movs	r2, #2
    c89a:	6003      	str	r3, [r0, #0]
    c89c:	4610      	mov	r0, r2
    c89e:	4770      	bx	lr

0000c8a0 <__i2b>:
    c8a0:	b538      	push	{r3, r4, r5, lr}
    c8a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c8a4:	4604      	mov	r4, r0
    c8a6:	460d      	mov	r5, r1
    c8a8:	b14b      	cbz	r3, c8be <__i2b+0x1e>
    c8aa:	6858      	ldr	r0, [r3, #4]
    c8ac:	b1b0      	cbz	r0, c8dc <__i2b+0x3c>
    c8ae:	6802      	ldr	r2, [r0, #0]
    c8b0:	605a      	str	r2, [r3, #4]
    c8b2:	2200      	movs	r2, #0
    c8b4:	2301      	movs	r3, #1
    c8b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c8ba:	60c2      	str	r2, [r0, #12]
    c8bc:	bd38      	pop	{r3, r4, r5, pc}
    c8be:	2221      	movs	r2, #33	; 0x21
    c8c0:	2104      	movs	r1, #4
    c8c2:	f002 fa61 	bl	ed88 <_calloc_r>
    c8c6:	4603      	mov	r3, r0
    c8c8:	6460      	str	r0, [r4, #68]	; 0x44
    c8ca:	2800      	cmp	r0, #0
    c8cc:	d1ed      	bne.n	c8aa <__i2b+0xa>
    c8ce:	4b09      	ldr	r3, [pc, #36]	; (c8f4 <__i2b+0x54>)
    c8d0:	4809      	ldr	r0, [pc, #36]	; (c8f8 <__i2b+0x58>)
    c8d2:	2200      	movs	r2, #0
    c8d4:	f240 1145 	movw	r1, #325	; 0x145
    c8d8:	f002 fa36 	bl	ed48 <__assert_func>
    c8dc:	221c      	movs	r2, #28
    c8de:	2101      	movs	r1, #1
    c8e0:	4620      	mov	r0, r4
    c8e2:	f002 fa51 	bl	ed88 <_calloc_r>
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d0f1      	beq.n	c8ce <__i2b+0x2e>
    c8ea:	2201      	movs	r2, #1
    c8ec:	2302      	movs	r3, #2
    c8ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c8f2:	e7de      	b.n	c8b2 <__i2b+0x12>
    c8f4:	20000b74 	.word	0x20000b74
    c8f8:	20000b88 	.word	0x20000b88

0000c8fc <__multiply>:
    c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c900:	690e      	ldr	r6, [r1, #16]
    c902:	6915      	ldr	r5, [r2, #16]
    c904:	42ae      	cmp	r6, r5
    c906:	b085      	sub	sp, #20
    c908:	4688      	mov	r8, r1
    c90a:	4614      	mov	r4, r2
    c90c:	db05      	blt.n	c91a <__multiply+0x1e>
    c90e:	462a      	mov	r2, r5
    c910:	4623      	mov	r3, r4
    c912:	4635      	mov	r5, r6
    c914:	460c      	mov	r4, r1
    c916:	4616      	mov	r6, r2
    c918:	4698      	mov	r8, r3
    c91a:	68a3      	ldr	r3, [r4, #8]
    c91c:	6861      	ldr	r1, [r4, #4]
    c91e:	19af      	adds	r7, r5, r6
    c920:	42bb      	cmp	r3, r7
    c922:	bfb8      	it	lt
    c924:	3101      	addlt	r1, #1
    c926:	f7ff fee9 	bl	c6fc <_Balloc>
    c92a:	9001      	str	r0, [sp, #4]
    c92c:	2800      	cmp	r0, #0
    c92e:	f000 8087 	beq.w	ca40 <__multiply+0x144>
    c932:	9b01      	ldr	r3, [sp, #4]
    c934:	f103 0914 	add.w	r9, r3, #20
    c938:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c93c:	45d1      	cmp	r9, sl
    c93e:	d205      	bcs.n	c94c <__multiply+0x50>
    c940:	464b      	mov	r3, r9
    c942:	2200      	movs	r2, #0
    c944:	f843 2b04 	str.w	r2, [r3], #4
    c948:	459a      	cmp	sl, r3
    c94a:	d8fb      	bhi.n	c944 <__multiply+0x48>
    c94c:	f108 0814 	add.w	r8, r8, #20
    c950:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    c954:	f104 0314 	add.w	r3, r4, #20
    c958:	45d8      	cmp	r8, fp
    c95a:	461a      	mov	r2, r3
    c95c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    c960:	d25f      	bcs.n	ca22 <__multiply+0x126>
    c962:	1b2b      	subs	r3, r5, r4
    c964:	3b15      	subs	r3, #21
    c966:	f023 0303 	bic.w	r3, r3, #3
    c96a:	3304      	adds	r3, #4
    c96c:	3415      	adds	r4, #21
    c96e:	42a5      	cmp	r5, r4
    c970:	bf38      	it	cc
    c972:	2304      	movcc	r3, #4
    c974:	e9cd a702 	strd	sl, r7, [sp, #8]
    c978:	46ac      	mov	ip, r5
    c97a:	461f      	mov	r7, r3
    c97c:	4692      	mov	sl, r2
    c97e:	e005      	b.n	c98c <__multiply+0x90>
    c980:	0c09      	lsrs	r1, r1, #16
    c982:	d129      	bne.n	c9d8 <__multiply+0xdc>
    c984:	45c3      	cmp	fp, r8
    c986:	f109 0904 	add.w	r9, r9, #4
    c98a:	d948      	bls.n	ca1e <__multiply+0x122>
    c98c:	f858 1b04 	ldr.w	r1, [r8], #4
    c990:	b28d      	uxth	r5, r1
    c992:	2d00      	cmp	r5, #0
    c994:	d0f4      	beq.n	c980 <__multiply+0x84>
    c996:	4656      	mov	r6, sl
    c998:	464c      	mov	r4, r9
    c99a:	2300      	movs	r3, #0
    c99c:	f856 1b04 	ldr.w	r1, [r6], #4
    c9a0:	6822      	ldr	r2, [r4, #0]
    c9a2:	fa1f fe81 	uxth.w	lr, r1
    c9a6:	b290      	uxth	r0, r2
    c9a8:	0c09      	lsrs	r1, r1, #16
    c9aa:	fb05 000e 	mla	r0, r5, lr, r0
    c9ae:	0c12      	lsrs	r2, r2, #16
    c9b0:	4403      	add	r3, r0
    c9b2:	fb05 2201 	mla	r2, r5, r1, r2
    c9b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c9ba:	b29b      	uxth	r3, r3
    c9bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c9c0:	45b4      	cmp	ip, r6
    c9c2:	f844 3b04 	str.w	r3, [r4], #4
    c9c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c9ca:	d8e7      	bhi.n	c99c <__multiply+0xa0>
    c9cc:	f849 3007 	str.w	r3, [r9, r7]
    c9d0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    c9d4:	0c09      	lsrs	r1, r1, #16
    c9d6:	d0d5      	beq.n	c984 <__multiply+0x88>
    c9d8:	f8d9 3000 	ldr.w	r3, [r9]
    c9dc:	4650      	mov	r0, sl
    c9de:	461a      	mov	r2, r3
    c9e0:	464c      	mov	r4, r9
    c9e2:	2600      	movs	r6, #0
    c9e4:	8805      	ldrh	r5, [r0, #0]
    c9e6:	0c12      	lsrs	r2, r2, #16
    c9e8:	fb01 2205 	mla	r2, r1, r5, r2
    c9ec:	4416      	add	r6, r2
    c9ee:	b29b      	uxth	r3, r3
    c9f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    c9f4:	f844 3b04 	str.w	r3, [r4], #4
    c9f8:	f850 5b04 	ldr.w	r5, [r0], #4
    c9fc:	6822      	ldr	r2, [r4, #0]
    c9fe:	0c2d      	lsrs	r5, r5, #16
    ca00:	b293      	uxth	r3, r2
    ca02:	fb01 3305 	mla	r3, r1, r5, r3
    ca06:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    ca0a:	4584      	cmp	ip, r0
    ca0c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    ca10:	d8e8      	bhi.n	c9e4 <__multiply+0xe8>
    ca12:	45c3      	cmp	fp, r8
    ca14:	f849 3007 	str.w	r3, [r9, r7]
    ca18:	f109 0904 	add.w	r9, r9, #4
    ca1c:	d8b6      	bhi.n	c98c <__multiply+0x90>
    ca1e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    ca22:	2f00      	cmp	r7, #0
    ca24:	dc02      	bgt.n	ca2c <__multiply+0x130>
    ca26:	e005      	b.n	ca34 <__multiply+0x138>
    ca28:	3f01      	subs	r7, #1
    ca2a:	d003      	beq.n	ca34 <__multiply+0x138>
    ca2c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    ca30:	2b00      	cmp	r3, #0
    ca32:	d0f9      	beq.n	ca28 <__multiply+0x12c>
    ca34:	9b01      	ldr	r3, [sp, #4]
    ca36:	4618      	mov	r0, r3
    ca38:	611f      	str	r7, [r3, #16]
    ca3a:	b005      	add	sp, #20
    ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca40:	4b03      	ldr	r3, [pc, #12]	; (ca50 <__multiply+0x154>)
    ca42:	4804      	ldr	r0, [pc, #16]	; (ca54 <__multiply+0x158>)
    ca44:	9a01      	ldr	r2, [sp, #4]
    ca46:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ca4a:	f002 f97d 	bl	ed48 <__assert_func>
    ca4e:	bf00      	nop
    ca50:	20000b74 	.word	0x20000b74
    ca54:	20000b88 	.word	0x20000b88

0000ca58 <__pow5mult>:
    ca58:	f012 0303 	ands.w	r3, r2, #3
    ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca60:	4614      	mov	r4, r2
    ca62:	4606      	mov	r6, r0
    ca64:	d132      	bne.n	cacc <__pow5mult+0x74>
    ca66:	460d      	mov	r5, r1
    ca68:	10a4      	asrs	r4, r4, #2
    ca6a:	d020      	beq.n	caae <__pow5mult+0x56>
    ca6c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ca70:	f1b8 0f00 	cmp.w	r8, #0
    ca74:	d033      	beq.n	cade <__pow5mult+0x86>
    ca76:	07e3      	lsls	r3, r4, #31
    ca78:	f04f 0700 	mov.w	r7, #0
    ca7c:	d407      	bmi.n	ca8e <__pow5mult+0x36>
    ca7e:	1064      	asrs	r4, r4, #1
    ca80:	d015      	beq.n	caae <__pow5mult+0x56>
    ca82:	f8d8 0000 	ldr.w	r0, [r8]
    ca86:	b1a8      	cbz	r0, cab4 <__pow5mult+0x5c>
    ca88:	4680      	mov	r8, r0
    ca8a:	07e3      	lsls	r3, r4, #31
    ca8c:	d5f7      	bpl.n	ca7e <__pow5mult+0x26>
    ca8e:	4642      	mov	r2, r8
    ca90:	4629      	mov	r1, r5
    ca92:	4630      	mov	r0, r6
    ca94:	f7ff ff32 	bl	c8fc <__multiply>
    ca98:	b1b5      	cbz	r5, cac8 <__pow5mult+0x70>
    ca9a:	6869      	ldr	r1, [r5, #4]
    ca9c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ca9e:	1064      	asrs	r4, r4, #1
    caa0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    caa4:	602a      	str	r2, [r5, #0]
    caa6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    caaa:	4605      	mov	r5, r0
    caac:	d1e9      	bne.n	ca82 <__pow5mult+0x2a>
    caae:	4628      	mov	r0, r5
    cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cab4:	4642      	mov	r2, r8
    cab6:	4641      	mov	r1, r8
    cab8:	4630      	mov	r0, r6
    caba:	f7ff ff1f 	bl	c8fc <__multiply>
    cabe:	f8c8 0000 	str.w	r0, [r8]
    cac2:	6007      	str	r7, [r0, #0]
    cac4:	4680      	mov	r8, r0
    cac6:	e7e0      	b.n	ca8a <__pow5mult+0x32>
    cac8:	4605      	mov	r5, r0
    caca:	e7d8      	b.n	ca7e <__pow5mult+0x26>
    cacc:	3b01      	subs	r3, #1
    cace:	4a0f      	ldr	r2, [pc, #60]	; (cb0c <__pow5mult+0xb4>)
    cad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    cad4:	2300      	movs	r3, #0
    cad6:	f7ff fe41 	bl	c75c <__multadd>
    cada:	4605      	mov	r5, r0
    cadc:	e7c4      	b.n	ca68 <__pow5mult+0x10>
    cade:	2101      	movs	r1, #1
    cae0:	4630      	mov	r0, r6
    cae2:	f7ff fe0b 	bl	c6fc <_Balloc>
    cae6:	4680      	mov	r8, r0
    cae8:	b140      	cbz	r0, cafc <__pow5mult+0xa4>
    caea:	2301      	movs	r3, #1
    caec:	f240 2271 	movw	r2, #625	; 0x271
    caf0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    caf4:	2300      	movs	r3, #0
    caf6:	6430      	str	r0, [r6, #64]	; 0x40
    caf8:	6003      	str	r3, [r0, #0]
    cafa:	e7bc      	b.n	ca76 <__pow5mult+0x1e>
    cafc:	4b04      	ldr	r3, [pc, #16]	; (cb10 <__pow5mult+0xb8>)
    cafe:	4805      	ldr	r0, [pc, #20]	; (cb14 <__pow5mult+0xbc>)
    cb00:	4642      	mov	r2, r8
    cb02:	f240 1145 	movw	r1, #325	; 0x145
    cb06:	f002 f91f 	bl	ed48 <__assert_func>
    cb0a:	bf00      	nop
    cb0c:	200011a8 	.word	0x200011a8
    cb10:	20000b74 	.word	0x20000b74
    cb14:	20000b88 	.word	0x20000b88

0000cb18 <__lshift>:
    cb18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb1c:	460d      	mov	r5, r1
    cb1e:	4614      	mov	r4, r2
    cb20:	692f      	ldr	r7, [r5, #16]
    cb22:	68ab      	ldr	r3, [r5, #8]
    cb24:	6849      	ldr	r1, [r1, #4]
    cb26:	eb07 1762 	add.w	r7, r7, r2, asr #5
    cb2a:	1c7e      	adds	r6, r7, #1
    cb2c:	429e      	cmp	r6, r3
    cb2e:	4680      	mov	r8, r0
    cb30:	ea4f 1962 	mov.w	r9, r2, asr #5
    cb34:	dd04      	ble.n	cb40 <__lshift+0x28>
    cb36:	005b      	lsls	r3, r3, #1
    cb38:	429e      	cmp	r6, r3
    cb3a:	f101 0101 	add.w	r1, r1, #1
    cb3e:	dcfa      	bgt.n	cb36 <__lshift+0x1e>
    cb40:	4640      	mov	r0, r8
    cb42:	f7ff fddb 	bl	c6fc <_Balloc>
    cb46:	4684      	mov	ip, r0
    cb48:	2800      	cmp	r0, #0
    cb4a:	d052      	beq.n	cbf2 <__lshift+0xda>
    cb4c:	f1b9 0f00 	cmp.w	r9, #0
    cb50:	f100 0214 	add.w	r2, r0, #20
    cb54:	dd0e      	ble.n	cb74 <__lshift+0x5c>
    cb56:	f109 0105 	add.w	r1, r9, #5
    cb5a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    cb5e:	4613      	mov	r3, r2
    cb60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cb64:	2000      	movs	r0, #0
    cb66:	f843 0b04 	str.w	r0, [r3], #4
    cb6a:	428b      	cmp	r3, r1
    cb6c:	d1fb      	bne.n	cb66 <__lshift+0x4e>
    cb6e:	f1ae 0314 	sub.w	r3, lr, #20
    cb72:	441a      	add	r2, r3
    cb74:	6929      	ldr	r1, [r5, #16]
    cb76:	f105 0314 	add.w	r3, r5, #20
    cb7a:	f014 0e1f 	ands.w	lr, r4, #31
    cb7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cb82:	d02e      	beq.n	cbe2 <__lshift+0xca>
    cb84:	f1ce 0920 	rsb	r9, lr, #32
    cb88:	4610      	mov	r0, r2
    cb8a:	f04f 0a00 	mov.w	sl, #0
    cb8e:	681c      	ldr	r4, [r3, #0]
    cb90:	fa04 f40e 	lsl.w	r4, r4, lr
    cb94:	ea44 040a 	orr.w	r4, r4, sl
    cb98:	f840 4b04 	str.w	r4, [r0], #4
    cb9c:	f853 4b04 	ldr.w	r4, [r3], #4
    cba0:	4299      	cmp	r1, r3
    cba2:	fa24 fa09 	lsr.w	sl, r4, r9
    cba6:	d8f2      	bhi.n	cb8e <__lshift+0x76>
    cba8:	1b4b      	subs	r3, r1, r5
    cbaa:	3b15      	subs	r3, #21
    cbac:	f023 0303 	bic.w	r3, r3, #3
    cbb0:	3304      	adds	r3, #4
    cbb2:	f105 0015 	add.w	r0, r5, #21
    cbb6:	4281      	cmp	r1, r0
    cbb8:	bf38      	it	cc
    cbba:	2304      	movcc	r3, #4
    cbbc:	f1ba 0f00 	cmp.w	sl, #0
    cbc0:	bf18      	it	ne
    cbc2:	4637      	movne	r7, r6
    cbc4:	f842 a003 	str.w	sl, [r2, r3]
    cbc8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    cbcc:	686a      	ldr	r2, [r5, #4]
    cbce:	f8cc 7010 	str.w	r7, [ip, #16]
    cbd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    cbd6:	6029      	str	r1, [r5, #0]
    cbd8:	4660      	mov	r0, ip
    cbda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    cbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbe2:	3a04      	subs	r2, #4
    cbe4:	f853 0b04 	ldr.w	r0, [r3], #4
    cbe8:	f842 0f04 	str.w	r0, [r2, #4]!
    cbec:	4299      	cmp	r1, r3
    cbee:	d8f9      	bhi.n	cbe4 <__lshift+0xcc>
    cbf0:	e7ea      	b.n	cbc8 <__lshift+0xb0>
    cbf2:	4b03      	ldr	r3, [pc, #12]	; (cc00 <__lshift+0xe8>)
    cbf4:	4803      	ldr	r0, [pc, #12]	; (cc04 <__lshift+0xec>)
    cbf6:	4662      	mov	r2, ip
    cbf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    cbfc:	f002 f8a4 	bl	ed48 <__assert_func>
    cc00:	20000b74 	.word	0x20000b74
    cc04:	20000b88 	.word	0x20000b88

0000cc08 <__mcmp>:
    cc08:	690b      	ldr	r3, [r1, #16]
    cc0a:	4684      	mov	ip, r0
    cc0c:	6900      	ldr	r0, [r0, #16]
    cc0e:	1ac0      	subs	r0, r0, r3
    cc10:	d116      	bne.n	cc40 <__mcmp+0x38>
    cc12:	f10c 0c14 	add.w	ip, ip, #20
    cc16:	3114      	adds	r1, #20
    cc18:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    cc1c:	b410      	push	{r4}
    cc1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    cc22:	e001      	b.n	cc28 <__mcmp+0x20>
    cc24:	4594      	cmp	ip, r2
    cc26:	d208      	bcs.n	cc3a <__mcmp+0x32>
    cc28:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cc2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cc30:	428c      	cmp	r4, r1
    cc32:	d0f7      	beq.n	cc24 <__mcmp+0x1c>
    cc34:	d205      	bcs.n	cc42 <__mcmp+0x3a>
    cc36:	f04f 30ff 	mov.w	r0, #4294967295
    cc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc3e:	4770      	bx	lr
    cc40:	4770      	bx	lr
    cc42:	2001      	movs	r0, #1
    cc44:	f85d 4b04 	ldr.w	r4, [sp], #4
    cc48:	4770      	bx	lr
    cc4a:	bf00      	nop

0000cc4c <__mdiff>:
    cc4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc50:	690f      	ldr	r7, [r1, #16]
    cc52:	6913      	ldr	r3, [r2, #16]
    cc54:	1aff      	subs	r7, r7, r3
    cc56:	2f00      	cmp	r7, #0
    cc58:	460e      	mov	r6, r1
    cc5a:	4690      	mov	r8, r2
    cc5c:	d17f      	bne.n	cd5e <__mdiff+0x112>
    cc5e:	f101 0514 	add.w	r5, r1, #20
    cc62:	3214      	adds	r2, #20
    cc64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    cc68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cc6c:	e001      	b.n	cc72 <__mdiff+0x26>
    cc6e:	429d      	cmp	r5, r3
    cc70:	d278      	bcs.n	cd64 <__mdiff+0x118>
    cc72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cc76:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cc7a:	42a1      	cmp	r1, r4
    cc7c:	d0f7      	beq.n	cc6e <__mdiff+0x22>
    cc7e:	d369      	bcc.n	cd54 <__mdiff+0x108>
    cc80:	6871      	ldr	r1, [r6, #4]
    cc82:	f7ff fd3b 	bl	c6fc <_Balloc>
    cc86:	4681      	mov	r9, r0
    cc88:	2800      	cmp	r0, #0
    cc8a:	d077      	beq.n	cd7c <__mdiff+0x130>
    cc8c:	6935      	ldr	r5, [r6, #16]
    cc8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    cc92:	60c7      	str	r7, [r0, #12]
    cc94:	f108 0e14 	add.w	lr, r8, #20
    cc98:	f106 0014 	add.w	r0, r6, #20
    cc9c:	f109 0a14 	add.w	sl, r9, #20
    cca0:	f106 0110 	add.w	r1, r6, #16
    cca4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    cca8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    ccac:	4656      	mov	r6, sl
    ccae:	f04f 0c00 	mov.w	ip, #0
    ccb2:	f85e 4b04 	ldr.w	r4, [lr], #4
    ccb6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    ccba:	b2a3      	uxth	r3, r4
    ccbc:	fa1c fc8b 	uxtah	ip, ip, fp
    ccc0:	ebac 0303 	sub.w	r3, ip, r3
    ccc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ccc8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    cccc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ccd0:	b29b      	uxth	r3, r3
    ccd2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ccd6:	4572      	cmp	r2, lr
    ccd8:	f846 3b04 	str.w	r3, [r6], #4
    ccdc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    cce0:	d8e7      	bhi.n	ccb2 <__mdiff+0x66>
    cce2:	eba2 0108 	sub.w	r1, r2, r8
    cce6:	3915      	subs	r1, #21
    cce8:	f108 0815 	add.w	r8, r8, #21
    ccec:	4542      	cmp	r2, r8
    ccee:	f021 0403 	bic.w	r4, r1, #3
    ccf2:	f104 0404 	add.w	r4, r4, #4
    ccf6:	bf38      	it	cc
    ccf8:	2404      	movcc	r4, #4
    ccfa:	4420      	add	r0, r4
    ccfc:	f021 0203 	bic.w	r2, r1, #3
    cd00:	bf38      	it	cc
    cd02:	2200      	movcc	r2, #0
    cd04:	4287      	cmp	r7, r0
    cd06:	4452      	add	r2, sl
    cd08:	4454      	add	r4, sl
    cd0a:	d918      	bls.n	cd3e <__mdiff+0xf2>
    cd0c:	4626      	mov	r6, r4
    cd0e:	4601      	mov	r1, r0
    cd10:	f851 3b04 	ldr.w	r3, [r1], #4
    cd14:	fa1c fc83 	uxtah	ip, ip, r3
    cd18:	ea4f 422c 	mov.w	r2, ip, asr #16
    cd1c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cd20:	fa1f fc8c 	uxth.w	ip, ip
    cd24:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    cd28:	428f      	cmp	r7, r1
    cd2a:	f846 3b04 	str.w	r3, [r6], #4
    cd2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    cd32:	d8ed      	bhi.n	cd10 <__mdiff+0xc4>
    cd34:	3f01      	subs	r7, #1
    cd36:	1a3f      	subs	r7, r7, r0
    cd38:	f027 0703 	bic.w	r7, r7, #3
    cd3c:	19e2      	adds	r2, r4, r7
    cd3e:	b923      	cbnz	r3, cd4a <__mdiff+0xfe>
    cd40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    cd44:	3d01      	subs	r5, #1
    cd46:	2b00      	cmp	r3, #0
    cd48:	d0fa      	beq.n	cd40 <__mdiff+0xf4>
    cd4a:	f8c9 5010 	str.w	r5, [r9, #16]
    cd4e:	4648      	mov	r0, r9
    cd50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd54:	4633      	mov	r3, r6
    cd56:	2701      	movs	r7, #1
    cd58:	4646      	mov	r6, r8
    cd5a:	4698      	mov	r8, r3
    cd5c:	e790      	b.n	cc80 <__mdiff+0x34>
    cd5e:	dbf9      	blt.n	cd54 <__mdiff+0x108>
    cd60:	2700      	movs	r7, #0
    cd62:	e78d      	b.n	cc80 <__mdiff+0x34>
    cd64:	2100      	movs	r1, #0
    cd66:	f7ff fcc9 	bl	c6fc <_Balloc>
    cd6a:	4681      	mov	r9, r0
    cd6c:	b168      	cbz	r0, cd8a <__mdiff+0x13e>
    cd6e:	2201      	movs	r2, #1
    cd70:	2300      	movs	r3, #0
    cd72:	e9c9 2304 	strd	r2, r3, [r9, #16]
    cd76:	4648      	mov	r0, r9
    cd78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd7c:	4b06      	ldr	r3, [pc, #24]	; (cd98 <__mdiff+0x14c>)
    cd7e:	4807      	ldr	r0, [pc, #28]	; (cd9c <__mdiff+0x150>)
    cd80:	464a      	mov	r2, r9
    cd82:	f240 2145 	movw	r1, #581	; 0x245
    cd86:	f001 ffdf 	bl	ed48 <__assert_func>
    cd8a:	4b03      	ldr	r3, [pc, #12]	; (cd98 <__mdiff+0x14c>)
    cd8c:	4803      	ldr	r0, [pc, #12]	; (cd9c <__mdiff+0x150>)
    cd8e:	464a      	mov	r2, r9
    cd90:	f240 2137 	movw	r1, #567	; 0x237
    cd94:	f001 ffd8 	bl	ed48 <__assert_func>
    cd98:	20000b74 	.word	0x20000b74
    cd9c:	20000b88 	.word	0x20000b88

0000cda0 <__d2b>:
    cda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cda4:	4688      	mov	r8, r1
    cda6:	b083      	sub	sp, #12
    cda8:	2101      	movs	r1, #1
    cdaa:	ec57 6b10 	vmov	r6, r7, d0
    cdae:	4615      	mov	r5, r2
    cdb0:	f7ff fca4 	bl	c6fc <_Balloc>
    cdb4:	4604      	mov	r4, r0
    cdb6:	2800      	cmp	r0, #0
    cdb8:	d051      	beq.n	ce5e <__d2b+0xbe>
    cdba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    cdbe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    cdc2:	f1b9 0f00 	cmp.w	r9, #0
    cdc6:	d001      	beq.n	cdcc <__d2b+0x2c>
    cdc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cdcc:	2e00      	cmp	r6, #0
    cdce:	9301      	str	r3, [sp, #4]
    cdd0:	d118      	bne.n	ce04 <__d2b+0x64>
    cdd2:	a801      	add	r0, sp, #4
    cdd4:	f7ff fd34 	bl	c840 <__lo0bits>
    cdd8:	9a01      	ldr	r2, [sp, #4]
    cdda:	6162      	str	r2, [r4, #20]
    cddc:	2201      	movs	r2, #1
    cdde:	f100 0320 	add.w	r3, r0, #32
    cde2:	6122      	str	r2, [r4, #16]
    cde4:	f1b9 0f00 	cmp.w	r9, #0
    cde8:	d025      	beq.n	ce36 <__d2b+0x96>
    cdea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    cdee:	eb09 0203 	add.w	r2, r9, r3
    cdf2:	4620      	mov	r0, r4
    cdf4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    cdf8:	f8c8 2000 	str.w	r2, [r8]
    cdfc:	602b      	str	r3, [r5, #0]
    cdfe:	b003      	add	sp, #12
    ce00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce04:	4668      	mov	r0, sp
    ce06:	9600      	str	r6, [sp, #0]
    ce08:	f7ff fd1a 	bl	c840 <__lo0bits>
    ce0c:	4603      	mov	r3, r0
    ce0e:	b310      	cbz	r0, ce56 <__d2b+0xb6>
    ce10:	e9dd 0200 	ldrd	r0, r2, [sp]
    ce14:	f1c3 0120 	rsb	r1, r3, #32
    ce18:	fa02 f101 	lsl.w	r1, r2, r1
    ce1c:	4301      	orrs	r1, r0
    ce1e:	40da      	lsrs	r2, r3
    ce20:	6161      	str	r1, [r4, #20]
    ce22:	9201      	str	r2, [sp, #4]
    ce24:	2a00      	cmp	r2, #0
    ce26:	61a2      	str	r2, [r4, #24]
    ce28:	bf14      	ite	ne
    ce2a:	2202      	movne	r2, #2
    ce2c:	2201      	moveq	r2, #1
    ce2e:	6122      	str	r2, [r4, #16]
    ce30:	f1b9 0f00 	cmp.w	r9, #0
    ce34:	d1d9      	bne.n	cdea <__d2b+0x4a>
    ce36:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    ce3a:	f8c8 3000 	str.w	r3, [r8]
    ce3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    ce42:	6918      	ldr	r0, [r3, #16]
    ce44:	f7ff fcdc 	bl	c800 <__hi0bits>
    ce48:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    ce4c:	4620      	mov	r0, r4
    ce4e:	602b      	str	r3, [r5, #0]
    ce50:	b003      	add	sp, #12
    ce52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ce56:	9a00      	ldr	r2, [sp, #0]
    ce58:	6162      	str	r2, [r4, #20]
    ce5a:	9a01      	ldr	r2, [sp, #4]
    ce5c:	e7e2      	b.n	ce24 <__d2b+0x84>
    ce5e:	4b03      	ldr	r3, [pc, #12]	; (ce6c <__d2b+0xcc>)
    ce60:	4803      	ldr	r0, [pc, #12]	; (ce70 <__d2b+0xd0>)
    ce62:	4622      	mov	r2, r4
    ce64:	f240 310f 	movw	r1, #783	; 0x30f
    ce68:	f001 ff6e 	bl	ed48 <__assert_func>
    ce6c:	20000b74 	.word	0x20000b74
    ce70:	20000b88 	.word	0x20000b88

0000ce74 <__ascii_wctomb>:
    ce74:	b149      	cbz	r1, ce8a <__ascii_wctomb+0x16>
    ce76:	2aff      	cmp	r2, #255	; 0xff
    ce78:	d802      	bhi.n	ce80 <__ascii_wctomb+0xc>
    ce7a:	700a      	strb	r2, [r1, #0]
    ce7c:	2001      	movs	r0, #1
    ce7e:	4770      	bx	lr
    ce80:	238a      	movs	r3, #138	; 0x8a
    ce82:	6003      	str	r3, [r0, #0]
    ce84:	f04f 30ff 	mov.w	r0, #4294967295
    ce88:	4770      	bx	lr
    ce8a:	4608      	mov	r0, r1
    ce8c:	4770      	bx	lr
    ce8e:	bf00      	nop

0000ce90 <_svfprintf_r>:
    ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce94:	ed2d 8b08 	vpush	{d8-d11}
    ce98:	b0d1      	sub	sp, #324	; 0x144
    ce9a:	460c      	mov	r4, r1
    ce9c:	ee0b 1a10 	vmov	s22, r1
    cea0:	4690      	mov	r8, r2
    cea2:	9308      	str	r3, [sp, #32]
    cea4:	4683      	mov	fp, r0
    cea6:	f001 febb 	bl	ec20 <_localeconv_r>
    ceaa:	6803      	ldr	r3, [r0, #0]
    ceac:	9312      	str	r3, [sp, #72]	; 0x48
    ceae:	4618      	mov	r0, r3
    ceb0:	f7ff fa06 	bl	c2c0 <strlen>
    ceb4:	af20      	add	r7, sp, #128	; 0x80
    ceb6:	9010      	str	r0, [sp, #64]	; 0x40
    ceb8:	2208      	movs	r2, #8
    ceba:	2100      	movs	r1, #0
    cebc:	4638      	mov	r0, r7
    cebe:	f7fe fe9f 	bl	bc00 <memset>
    cec2:	89a3      	ldrh	r3, [r4, #12]
    cec4:	061b      	lsls	r3, r3, #24
    cec6:	d503      	bpl.n	ced0 <_svfprintf_r+0x40>
    cec8:	6923      	ldr	r3, [r4, #16]
    ceca:	2b00      	cmp	r3, #0
    cecc:	f000 8755 	beq.w	dd7a <_svfprintf_r+0xeea>
    ced0:	2300      	movs	r3, #0
    ced2:	ed9f 8b83 	vldr	d8, [pc, #524]	; d0e0 <_svfprintf_r+0x250>
    ced6:	ed9f 9b84 	vldr	d9, [pc, #528]	; d0e8 <_svfprintf_r+0x258>
    ceda:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    cede:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    cee2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    cee6:	aa27      	add	r2, sp, #156	; 0x9c
    cee8:	930e      	str	r3, [sp, #56]	; 0x38
    ceea:	9224      	str	r2, [sp, #144]	; 0x90
    ceec:	4692      	mov	sl, r2
    ceee:	9311      	str	r3, [sp, #68]	; 0x44
    cef0:	9304      	str	r3, [sp, #16]
    cef2:	4644      	mov	r4, r8
    cef4:	46a1      	mov	r9, r4
    cef6:	4b7e      	ldr	r3, [pc, #504]	; (d0f0 <_svfprintf_r+0x260>)
    cef8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cefc:	f7fe ff6a 	bl	bdd4 <__locale_mb_cur_max>
    cf00:	464a      	mov	r2, r9
    cf02:	4603      	mov	r3, r0
    cf04:	a91c      	add	r1, sp, #112	; 0x70
    cf06:	9700      	str	r7, [sp, #0]
    cf08:	4658      	mov	r0, fp
    cf0a:	47a8      	blx	r5
    cf0c:	2800      	cmp	r0, #0
    cf0e:	f000 80b0 	beq.w	d072 <_svfprintf_r+0x1e2>
    cf12:	f2c0 80a6 	blt.w	d062 <_svfprintf_r+0x1d2>
    cf16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cf18:	2a25      	cmp	r2, #37	; 0x25
    cf1a:	4603      	mov	r3, r0
    cf1c:	d001      	beq.n	cf22 <_svfprintf_r+0x92>
    cf1e:	4499      	add	r9, r3
    cf20:	e7e9      	b.n	cef6 <_svfprintf_r+0x66>
    cf22:	ebb9 0504 	subs.w	r5, r9, r4
    cf26:	4606      	mov	r6, r0
    cf28:	f040 80a7 	bne.w	d07a <_svfprintf_r+0x1ea>
    cf2c:	2300      	movs	r3, #0
    cf2e:	f04f 32ff 	mov.w	r2, #4294967295
    cf32:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    cf36:	4698      	mov	r8, r3
    cf38:	9306      	str	r3, [sp, #24]
    cf3a:	f109 0901 	add.w	r9, r9, #1
    cf3e:	f899 3000 	ldrb.w	r3, [r9]
    cf42:	9203      	str	r2, [sp, #12]
    cf44:	252b      	movs	r5, #43	; 0x2b
    cf46:	2620      	movs	r6, #32
    cf48:	f109 0901 	add.w	r9, r9, #1
    cf4c:	f1a3 0220 	sub.w	r2, r3, #32
    cf50:	2a5a      	cmp	r2, #90	; 0x5a
    cf52:	f200 80cf 	bhi.w	d0f4 <_svfprintf_r+0x264>
    cf56:	e8df f012 	tbh	[pc, r2, lsl #1]
    cf5a:	02e8      	.short	0x02e8
    cf5c:	00cd00cd 	.word	0x00cd00cd
    cf60:	00cd02e3 	.word	0x00cd02e3
    cf64:	00cd00cd 	.word	0x00cd00cd
    cf68:	00cd006a 	.word	0x00cd006a
    cf6c:	020500cd 	.word	0x020500cd
    cf70:	00cd0284 	.word	0x00cd0284
    cf74:	02c90210 	.word	0x02c90210
    cf78:	02bd00cd 	.word	0x02bd00cd
    cf7c:	005b005b 	.word	0x005b005b
    cf80:	005b005b 	.word	0x005b005b
    cf84:	005b005b 	.word	0x005b005b
    cf88:	005b005b 	.word	0x005b005b
    cf8c:	00cd005b 	.word	0x00cd005b
    cf90:	00cd00cd 	.word	0x00cd00cd
    cf94:	00cd00cd 	.word	0x00cd00cd
    cf98:	00cd00cd 	.word	0x00cd00cd
    cf9c:	00cd0153 	.word	0x00cd0153
    cfa0:	021a0183 	.word	0x021a0183
    cfa4:	01530153 	.word	0x01530153
    cfa8:	00cd0153 	.word	0x00cd0153
    cfac:	00cd00cd 	.word	0x00cd00cd
    cfb0:	021500cd 	.word	0x021500cd
    cfb4:	00cd00cd 	.word	0x00cd00cd
    cfb8:	00cd0296 	.word	0x00cd0296
    cfbc:	00cd00cd 	.word	0x00cd00cd
    cfc0:	00cd01ab 	.word	0x00cd01ab
    cfc4:	00cd02aa 	.word	0x00cd02aa
    cfc8:	06e300cd 	.word	0x06e300cd
    cfcc:	00cd00cd 	.word	0x00cd00cd
    cfd0:	00cd00cd 	.word	0x00cd00cd
    cfd4:	00cd00cd 	.word	0x00cd00cd
    cfd8:	00cd00cd 	.word	0x00cd00cd
    cfdc:	00cd0153 	.word	0x00cd0153
    cfe0:	01de0183 	.word	0x01de0183
    cfe4:	01530153 	.word	0x01530153
    cfe8:	02770153 	.word	0x02770153
    cfec:	007f01de 	.word	0x007f01de
    cff0:	028900cd 	.word	0x028900cd
    cff4:	025f00cd 	.word	0x025f00cd
    cff8:	022f06e0 	.word	0x022f06e0
    cffc:	00cd007f 	.word	0x00cd007f
    d000:	007c01ab 	.word	0x007c01ab
    d004:	00cd06b8 	.word	0x00cd06b8
    d008:	06bd00cd 	.word	0x06bd00cd
    d00c:	007c00cd 	.word	0x007c00cd
    d010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d014:	2100      	movs	r1, #0
    d016:	f819 3b01 	ldrb.w	r3, [r9], #1
    d01a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d01e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d022:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d026:	2a09      	cmp	r2, #9
    d028:	d9f5      	bls.n	d016 <_svfprintf_r+0x186>
    d02a:	9106      	str	r1, [sp, #24]
    d02c:	e78e      	b.n	cf4c <_svfprintf_r+0xbc>
    d02e:	4658      	mov	r0, fp
    d030:	f001 fdf6 	bl	ec20 <_localeconv_r>
    d034:	6843      	ldr	r3, [r0, #4]
    d036:	9315      	str	r3, [sp, #84]	; 0x54
    d038:	4618      	mov	r0, r3
    d03a:	f7ff f941 	bl	c2c0 <strlen>
    d03e:	9016      	str	r0, [sp, #88]	; 0x58
    d040:	4658      	mov	r0, fp
    d042:	f001 fded 	bl	ec20 <_localeconv_r>
    d046:	6883      	ldr	r3, [r0, #8]
    d048:	9313      	str	r3, [sp, #76]	; 0x4c
    d04a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d04c:	2b00      	cmp	r3, #0
    d04e:	f040 862d 	bne.w	dcac <_svfprintf_r+0xe1c>
    d052:	f899 3000 	ldrb.w	r3, [r9]
    d056:	e777      	b.n	cf48 <_svfprintf_r+0xb8>
    d058:	f899 3000 	ldrb.w	r3, [r9]
    d05c:	f048 0820 	orr.w	r8, r8, #32
    d060:	e772      	b.n	cf48 <_svfprintf_r+0xb8>
    d062:	2208      	movs	r2, #8
    d064:	2100      	movs	r1, #0
    d066:	4638      	mov	r0, r7
    d068:	f7fe fdca 	bl	bc00 <memset>
    d06c:	2301      	movs	r3, #1
    d06e:	4499      	add	r9, r3
    d070:	e741      	b.n	cef6 <_svfprintf_r+0x66>
    d072:	ebb9 0504 	subs.w	r5, r9, r4
    d076:	4606      	mov	r6, r0
    d078:	d011      	beq.n	d09e <_svfprintf_r+0x20e>
    d07a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d07c:	442b      	add	r3, r5
    d07e:	9326      	str	r3, [sp, #152]	; 0x98
    d080:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d082:	3301      	adds	r3, #1
    d084:	2b07      	cmp	r3, #7
    d086:	e9ca 4500 	strd	r4, r5, [sl]
    d08a:	9325      	str	r3, [sp, #148]	; 0x94
    d08c:	dc1c      	bgt.n	d0c8 <_svfprintf_r+0x238>
    d08e:	f10a 0a08 	add.w	sl, sl, #8
    d092:	9b04      	ldr	r3, [sp, #16]
    d094:	442b      	add	r3, r5
    d096:	9304      	str	r3, [sp, #16]
    d098:	2e00      	cmp	r6, #0
    d09a:	f47f af47 	bne.w	cf2c <_svfprintf_r+0x9c>
    d09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d0a0:	2b00      	cmp	r3, #0
    d0a2:	f041 820b 	bne.w	e4bc <_svfprintf_r+0x162c>
    d0a6:	ee1b 3a10 	vmov	r3, s22
    d0aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d0ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    d0b2:	9b04      	ldr	r3, [sp, #16]
    d0b4:	bf18      	it	ne
    d0b6:	f04f 33ff 	movne.w	r3, #4294967295
    d0ba:	9304      	str	r3, [sp, #16]
    d0bc:	9804      	ldr	r0, [sp, #16]
    d0be:	b051      	add	sp, #324	; 0x144
    d0c0:	ecbd 8b08 	vpop	{d8-d11}
    d0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0c8:	ee1b 1a10 	vmov	r1, s22
    d0cc:	aa24      	add	r2, sp, #144	; 0x90
    d0ce:	4658      	mov	r0, fp
    d0d0:	f002 fde6 	bl	fca0 <__ssprint_r>
    d0d4:	2800      	cmp	r0, #0
    d0d6:	d1e6      	bne.n	d0a6 <_svfprintf_r+0x216>
    d0d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d0dc:	e7d9      	b.n	d092 <_svfprintf_r+0x202>
    d0de:	bf00      	nop
	...
    d0e8:	ffffffff 	.word	0xffffffff
    d0ec:	7fefffff 	.word	0x7fefffff
    d0f0:	200044ac 	.word	0x200044ac
    d0f4:	930b      	str	r3, [sp, #44]	; 0x2c
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d0d1      	beq.n	d09e <_svfprintf_r+0x20e>
    d0fa:	2100      	movs	r1, #0
    d0fc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d100:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d104:	2301      	movs	r3, #1
    d106:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d10a:	9302      	str	r3, [sp, #8]
    d10c:	9107      	str	r1, [sp, #28]
    d10e:	9305      	str	r3, [sp, #20]
    d110:	9103      	str	r1, [sp, #12]
    d112:	910f      	str	r1, [sp, #60]	; 0x3c
    d114:	ac37      	add	r4, sp, #220	; 0xdc
    d116:	f018 0302 	ands.w	r3, r8, #2
    d11a:	9309      	str	r3, [sp, #36]	; 0x24
    d11c:	d002      	beq.n	d124 <_svfprintf_r+0x294>
    d11e:	9b02      	ldr	r3, [sp, #8]
    d120:	3302      	adds	r3, #2
    d122:	9302      	str	r3, [sp, #8]
    d124:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d128:	930a      	str	r3, [sp, #40]	; 0x28
    d12a:	d105      	bne.n	d138 <_svfprintf_r+0x2a8>
    d12c:	9b06      	ldr	r3, [sp, #24]
    d12e:	9a02      	ldr	r2, [sp, #8]
    d130:	1a9d      	subs	r5, r3, r2
    d132:	2d00      	cmp	r5, #0
    d134:	f300 8369 	bgt.w	d80a <_svfprintf_r+0x97a>
    d138:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d13a:	b189      	cbz	r1, d160 <_svfprintf_r+0x2d0>
    d13c:	9925      	ldr	r1, [sp, #148]	; 0x94
    d13e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d142:	3101      	adds	r1, #1
    d144:	3201      	adds	r2, #1
    d146:	f8ca 0000 	str.w	r0, [sl]
    d14a:	2907      	cmp	r1, #7
    d14c:	f04f 0001 	mov.w	r0, #1
    d150:	9226      	str	r2, [sp, #152]	; 0x98
    d152:	9125      	str	r1, [sp, #148]	; 0x94
    d154:	f8ca 0004 	str.w	r0, [sl, #4]
    d158:	f300 83a2 	bgt.w	d8a0 <_svfprintf_r+0xa10>
    d15c:	f10a 0a08 	add.w	sl, sl, #8
    d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d162:	b183      	cbz	r3, d186 <_svfprintf_r+0x2f6>
    d164:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d166:	a91a      	add	r1, sp, #104	; 0x68
    d168:	3301      	adds	r3, #1
    d16a:	3202      	adds	r2, #2
    d16c:	f8ca 1000 	str.w	r1, [sl]
    d170:	2b07      	cmp	r3, #7
    d172:	f04f 0102 	mov.w	r1, #2
    d176:	9226      	str	r2, [sp, #152]	; 0x98
    d178:	9325      	str	r3, [sp, #148]	; 0x94
    d17a:	f8ca 1004 	str.w	r1, [sl, #4]
    d17e:	f300 83a3 	bgt.w	d8c8 <_svfprintf_r+0xa38>
    d182:	f10a 0a08 	add.w	sl, sl, #8
    d186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d188:	2b80      	cmp	r3, #128	; 0x80
    d18a:	f000 826c 	beq.w	d666 <_svfprintf_r+0x7d6>
    d18e:	9b03      	ldr	r3, [sp, #12]
    d190:	9905      	ldr	r1, [sp, #20]
    d192:	1a5d      	subs	r5, r3, r1
    d194:	2d00      	cmp	r5, #0
    d196:	f300 82a5 	bgt.w	d6e4 <_svfprintf_r+0x854>
    d19a:	f418 7f80 	tst.w	r8, #256	; 0x100
    d19e:	f040 820d 	bne.w	d5bc <_svfprintf_r+0x72c>
    d1a2:	9b05      	ldr	r3, [sp, #20]
    d1a4:	f8ca 3004 	str.w	r3, [sl, #4]
    d1a8:	441a      	add	r2, r3
    d1aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d1ac:	f8ca 4000 	str.w	r4, [sl]
    d1b0:	3301      	adds	r3, #1
    d1b2:	2b07      	cmp	r3, #7
    d1b4:	9226      	str	r2, [sp, #152]	; 0x98
    d1b6:	9325      	str	r3, [sp, #148]	; 0x94
    d1b8:	f300 831b 	bgt.w	d7f2 <_svfprintf_r+0x962>
    d1bc:	f10a 0a08 	add.w	sl, sl, #8
    d1c0:	f018 0f04 	tst.w	r8, #4
    d1c4:	d005      	beq.n	d1d2 <_svfprintf_r+0x342>
    d1c6:	9b06      	ldr	r3, [sp, #24]
    d1c8:	9902      	ldr	r1, [sp, #8]
    d1ca:	1a5c      	subs	r4, r3, r1
    d1cc:	2c00      	cmp	r4, #0
    d1ce:	f300 8388 	bgt.w	d8e2 <_svfprintf_r+0xa52>
    d1d2:	9b04      	ldr	r3, [sp, #16]
    d1d4:	9906      	ldr	r1, [sp, #24]
    d1d6:	9802      	ldr	r0, [sp, #8]
    d1d8:	4281      	cmp	r1, r0
    d1da:	bfac      	ite	ge
    d1dc:	185b      	addge	r3, r3, r1
    d1de:	181b      	addlt	r3, r3, r0
    d1e0:	9304      	str	r3, [sp, #16]
    d1e2:	2a00      	cmp	r2, #0
    d1e4:	f040 82b0 	bne.w	d748 <_svfprintf_r+0x8b8>
    d1e8:	2300      	movs	r3, #0
    d1ea:	9325      	str	r3, [sp, #148]	; 0x94
    d1ec:	9b07      	ldr	r3, [sp, #28]
    d1ee:	b11b      	cbz	r3, d1f8 <_svfprintf_r+0x368>
    d1f0:	9907      	ldr	r1, [sp, #28]
    d1f2:	4658      	mov	r0, fp
    d1f4:	f7ff f966 	bl	c4c4 <_free_r>
    d1f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d1fc:	464c      	mov	r4, r9
    d1fe:	e679      	b.n	cef4 <_svfprintf_r+0x64>
    d200:	930b      	str	r3, [sp, #44]	; 0x2c
    d202:	9b08      	ldr	r3, [sp, #32]
    d204:	3307      	adds	r3, #7
    d206:	f023 0307 	bic.w	r3, r3, #7
    d20a:	ecb3 8b02 	vldmia	r3!, {d8}
    d20e:	eeb0 7bc8 	vabs.f64	d7, d8
    d212:	eeb4 7b49 	vcmp.f64	d7, d9
    d216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d21a:	9308      	str	r3, [sp, #32]
    d21c:	f340 84e9 	ble.w	dbf2 <_svfprintf_r+0xd62>
    d220:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    d224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d228:	f101 8059 	bmi.w	e2de <_svfprintf_r+0x144e>
    d22c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d230:	4cab      	ldr	r4, [pc, #684]	; (d4e0 <_svfprintf_r+0x650>)
    d232:	4bac      	ldr	r3, [pc, #688]	; (d4e4 <_svfprintf_r+0x654>)
    d234:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    d238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d23a:	2a47      	cmp	r2, #71	; 0x47
    d23c:	bfc8      	it	gt
    d23e:	461c      	movgt	r4, r3
    d240:	2300      	movs	r3, #0
    d242:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d246:	2203      	movs	r2, #3
    d248:	9307      	str	r3, [sp, #28]
    d24a:	9202      	str	r2, [sp, #8]
    d24c:	9205      	str	r2, [sp, #20]
    d24e:	9303      	str	r3, [sp, #12]
    d250:	930f      	str	r3, [sp, #60]	; 0x3c
    d252:	2900      	cmp	r1, #0
    d254:	f43f af5f 	beq.w	d116 <_svfprintf_r+0x286>
    d258:	9b02      	ldr	r3, [sp, #8]
    d25a:	3301      	adds	r3, #1
    d25c:	9302      	str	r3, [sp, #8]
    d25e:	e75a      	b.n	d116 <_svfprintf_r+0x286>
    d260:	2b43      	cmp	r3, #67	; 0x43
    d262:	930b      	str	r3, [sp, #44]	; 0x2c
    d264:	d003      	beq.n	d26e <_svfprintf_r+0x3de>
    d266:	f018 0f10 	tst.w	r8, #16
    d26a:	f000 855d 	beq.w	dd28 <_svfprintf_r+0xe98>
    d26e:	9d08      	ldr	r5, [sp, #32]
    d270:	2208      	movs	r2, #8
    d272:	2100      	movs	r1, #0
    d274:	a822      	add	r0, sp, #136	; 0x88
    d276:	ac37      	add	r4, sp, #220	; 0xdc
    d278:	f7fe fcc2 	bl	bc00 <memset>
    d27c:	ab22      	add	r3, sp, #136	; 0x88
    d27e:	f855 2b04 	ldr.w	r2, [r5], #4
    d282:	4621      	mov	r1, r4
    d284:	4658      	mov	r0, fp
    d286:	f002 fcc5 	bl	fc14 <_wcrtomb_r>
    d28a:	4603      	mov	r3, r0
    d28c:	3301      	adds	r3, #1
    d28e:	9005      	str	r0, [sp, #20]
    d290:	f001 82ee 	beq.w	e870 <_svfprintf_r+0x19e0>
    d294:	9b05      	ldr	r3, [sp, #20]
    d296:	9508      	str	r5, [sp, #32]
    d298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d29c:	9302      	str	r3, [sp, #8]
    d29e:	2100      	movs	r1, #0
    d2a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d2a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d2a8:	9107      	str	r1, [sp, #28]
    d2aa:	9103      	str	r1, [sp, #12]
    d2ac:	910f      	str	r1, [sp, #60]	; 0x3c
    d2ae:	e732      	b.n	d116 <_svfprintf_r+0x286>
    d2b0:	930b      	str	r3, [sp, #44]	; 0x2c
    d2b2:	9b08      	ldr	r3, [sp, #32]
    d2b4:	461a      	mov	r2, r3
    d2b6:	2300      	movs	r3, #0
    d2b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d2bc:	4613      	mov	r3, r2
    d2be:	f853 4b04 	ldr.w	r4, [r3], #4
    d2c2:	9308      	str	r3, [sp, #32]
    d2c4:	2c00      	cmp	r4, #0
    d2c6:	f000 8548 	beq.w	dd5a <_svfprintf_r+0xeca>
    d2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2cc:	2b53      	cmp	r3, #83	; 0x53
    d2ce:	f000 86ec 	beq.w	e0aa <_svfprintf_r+0x121a>
    d2d2:	f018 0310 	ands.w	r3, r8, #16
    d2d6:	930c      	str	r3, [sp, #48]	; 0x30
    d2d8:	f040 86e7 	bne.w	e0aa <_svfprintf_r+0x121a>
    d2dc:	9b03      	ldr	r3, [sp, #12]
    d2de:	1c5d      	adds	r5, r3, #1
    d2e0:	f001 80e5 	beq.w	e4ae <_svfprintf_r+0x161e>
    d2e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    d2e6:	461a      	mov	r2, r3
    d2e8:	4620      	mov	r0, r4
    d2ea:	f001 fca1 	bl	ec30 <memchr>
    d2ee:	9007      	str	r0, [sp, #28]
    d2f0:	2800      	cmp	r0, #0
    d2f2:	f001 8328 	beq.w	e946 <_svfprintf_r+0x1ab6>
    d2f6:	9b07      	ldr	r3, [sp, #28]
    d2f8:	1b1a      	subs	r2, r3, r4
    d2fa:	9205      	str	r2, [sp, #20]
    d2fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2fe:	9303      	str	r3, [sp, #12]
    d300:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d304:	930f      	str	r3, [sp, #60]	; 0x3c
    d306:	930d      	str	r3, [sp, #52]	; 0x34
    d308:	9307      	str	r3, [sp, #28]
    d30a:	2373      	movs	r3, #115	; 0x73
    d30c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d310:	9202      	str	r2, [sp, #8]
    d312:	930b      	str	r3, [sp, #44]	; 0x2c
    d314:	e79d      	b.n	d252 <_svfprintf_r+0x3c2>
    d316:	f018 0f20 	tst.w	r8, #32
    d31a:	930b      	str	r3, [sp, #44]	; 0x2c
    d31c:	9b08      	ldr	r3, [sp, #32]
    d31e:	d03d      	beq.n	d39c <_svfprintf_r+0x50c>
    d320:	3307      	adds	r3, #7
    d322:	f023 0307 	bic.w	r3, r3, #7
    d326:	461a      	mov	r2, r3
    d328:	4611      	mov	r1, r2
    d32a:	685b      	ldr	r3, [r3, #4]
    d32c:	f851 2b08 	ldr.w	r2, [r1], #8
    d330:	9108      	str	r1, [sp, #32]
    d332:	4619      	mov	r1, r3
    d334:	2b00      	cmp	r3, #0
    d336:	f2c0 840c 	blt.w	db52 <_svfprintf_r+0xcc2>
    d33a:	9b03      	ldr	r3, [sp, #12]
    d33c:	3301      	adds	r3, #1
    d33e:	f000 829e 	beq.w	d87e <_svfprintf_r+0x9ee>
    d342:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    d346:	ea52 0301 	orrs.w	r3, r2, r1
    d34a:	9002      	str	r0, [sp, #8]
    d34c:	f040 8299 	bne.w	d882 <_svfprintf_r+0x9f2>
    d350:	9b03      	ldr	r3, [sp, #12]
    d352:	2b00      	cmp	r3, #0
    d354:	f040 829a 	bne.w	d88c <_svfprintf_r+0x9fc>
    d358:	4680      	mov	r8, r0
    d35a:	2300      	movs	r3, #0
    d35c:	9303      	str	r3, [sp, #12]
    d35e:	9305      	str	r3, [sp, #20]
    d360:	ac50      	add	r4, sp, #320	; 0x140
    d362:	e106      	b.n	d572 <_svfprintf_r+0x6e2>
    d364:	9b08      	ldr	r3, [sp, #32]
    d366:	f853 2b04 	ldr.w	r2, [r3], #4
    d36a:	9206      	str	r2, [sp, #24]
    d36c:	2a00      	cmp	r2, #0
    d36e:	f280 8419 	bge.w	dba4 <_svfprintf_r+0xd14>
    d372:	9a06      	ldr	r2, [sp, #24]
    d374:	9308      	str	r3, [sp, #32]
    d376:	4252      	negs	r2, r2
    d378:	9206      	str	r2, [sp, #24]
    d37a:	f899 3000 	ldrb.w	r3, [r9]
    d37e:	f048 0804 	orr.w	r8, r8, #4
    d382:	e5e1      	b.n	cf48 <_svfprintf_r+0xb8>
    d384:	f899 3000 	ldrb.w	r3, [r9]
    d388:	f048 0808 	orr.w	r8, r8, #8
    d38c:	e5dc      	b.n	cf48 <_svfprintf_r+0xb8>
    d38e:	f048 0810 	orr.w	r8, r8, #16
    d392:	f018 0f20 	tst.w	r8, #32
    d396:	930b      	str	r3, [sp, #44]	; 0x2c
    d398:	9b08      	ldr	r3, [sp, #32]
    d39a:	d1c1      	bne.n	d320 <_svfprintf_r+0x490>
    d39c:	f018 0f10 	tst.w	r8, #16
    d3a0:	f040 840b 	bne.w	dbba <_svfprintf_r+0xd2a>
    d3a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    d3a8:	f000 8403 	beq.w	dbb2 <_svfprintf_r+0xd22>
    d3ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d3b0:	9308      	str	r3, [sp, #32]
    d3b2:	17d1      	asrs	r1, r2, #31
    d3b4:	460b      	mov	r3, r1
    d3b6:	e7bd      	b.n	d334 <_svfprintf_r+0x4a4>
    d3b8:	9b08      	ldr	r3, [sp, #32]
    d3ba:	f048 0202 	orr.w	r2, r8, #2
    d3be:	9202      	str	r2, [sp, #8]
    d3c0:	f853 2b04 	ldr.w	r2, [r3], #4
    d3c4:	9308      	str	r3, [sp, #32]
    d3c6:	f647 0330 	movw	r3, #30768	; 0x7830
    d3ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    d3ce:	2078      	movs	r0, #120	; 0x78
    d3d0:	4b45      	ldr	r3, [pc, #276]	; (d4e8 <_svfprintf_r+0x658>)
    d3d2:	9311      	str	r3, [sp, #68]	; 0x44
    d3d4:	2100      	movs	r1, #0
    d3d6:	2302      	movs	r3, #2
    d3d8:	900b      	str	r0, [sp, #44]	; 0x2c
    d3da:	2000      	movs	r0, #0
    d3dc:	9c03      	ldr	r4, [sp, #12]
    d3de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    d3e2:	1c60      	adds	r0, r4, #1
    d3e4:	f000 80ad 	beq.w	d542 <_svfprintf_r+0x6b2>
    d3e8:	9802      	ldr	r0, [sp, #8]
    d3ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    d3ee:	ea52 0001 	orrs.w	r0, r2, r1
    d3f2:	f040 80a4 	bne.w	d53e <_svfprintf_r+0x6ae>
    d3f6:	2c00      	cmp	r4, #0
    d3f8:	f040 86ae 	bne.w	e158 <_svfprintf_r+0x12c8>
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d1ac      	bne.n	d35a <_svfprintf_r+0x4ca>
    d400:	9b02      	ldr	r3, [sp, #8]
    d402:	f013 0301 	ands.w	r3, r3, #1
    d406:	9305      	str	r3, [sp, #20]
    d408:	f000 83d1 	beq.w	dbae <_svfprintf_r+0xd1e>
    d40c:	2330      	movs	r3, #48	; 0x30
    d40e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    d412:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d416:	e0ac      	b.n	d572 <_svfprintf_r+0x6e2>
    d418:	f018 0f20 	tst.w	r8, #32
    d41c:	f040 83d4 	bne.w	dbc8 <_svfprintf_r+0xd38>
    d420:	f018 0f10 	tst.w	r8, #16
    d424:	f040 869f 	bne.w	e166 <_svfprintf_r+0x12d6>
    d428:	f018 0f40 	tst.w	r8, #64	; 0x40
    d42c:	f040 8797 	bne.w	e35e <_svfprintf_r+0x14ce>
    d430:	f418 7f00 	tst.w	r8, #512	; 0x200
    d434:	f000 8697 	beq.w	e166 <_svfprintf_r+0x12d6>
    d438:	9b08      	ldr	r3, [sp, #32]
    d43a:	9904      	ldr	r1, [sp, #16]
    d43c:	f853 2b04 	ldr.w	r2, [r3], #4
    d440:	9308      	str	r3, [sp, #32]
    d442:	7011      	strb	r1, [r2, #0]
    d444:	464c      	mov	r4, r9
    d446:	e555      	b.n	cef4 <_svfprintf_r+0x64>
    d448:	f899 3000 	ldrb.w	r3, [r9]
    d44c:	2b68      	cmp	r3, #104	; 0x68
    d44e:	bf03      	ittte	eq
    d450:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d454:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    d458:	f109 0901 	addeq.w	r9, r9, #1
    d45c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    d460:	e572      	b.n	cf48 <_svfprintf_r+0xb8>
    d462:	f899 3000 	ldrb.w	r3, [r9]
    d466:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    d46a:	e56d      	b.n	cf48 <_svfprintf_r+0xb8>
    d46c:	f899 3000 	ldrb.w	r3, [r9]
    d470:	2b6c      	cmp	r3, #108	; 0x6c
    d472:	bf03      	ittte	eq
    d474:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d478:	f048 0820 	orreq.w	r8, r8, #32
    d47c:	f109 0901 	addeq.w	r9, r9, #1
    d480:	f048 0810 	orrne.w	r8, r8, #16
    d484:	e560      	b.n	cf48 <_svfprintf_r+0xb8>
    d486:	930b      	str	r3, [sp, #44]	; 0x2c
    d488:	f048 0810 	orr.w	r8, r8, #16
    d48c:	f018 0120 	ands.w	r1, r8, #32
    d490:	f000 8351 	beq.w	db36 <_svfprintf_r+0xca6>
    d494:	9b08      	ldr	r3, [sp, #32]
    d496:	3307      	adds	r3, #7
    d498:	f023 0307 	bic.w	r3, r3, #7
    d49c:	6859      	ldr	r1, [r3, #4]
    d49e:	f853 2b08 	ldr.w	r2, [r3], #8
    d4a2:	9308      	str	r3, [sp, #32]
    d4a4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d4a8:	9302      	str	r3, [sp, #8]
    d4aa:	2300      	movs	r3, #0
    d4ac:	e795      	b.n	d3da <_svfprintf_r+0x54a>
    d4ae:	930b      	str	r3, [sp, #44]	; 0x2c
    d4b0:	f048 0310 	orr.w	r3, r8, #16
    d4b4:	9302      	str	r3, [sp, #8]
    d4b6:	9b02      	ldr	r3, [sp, #8]
    d4b8:	f013 0120 	ands.w	r1, r3, #32
    d4bc:	f000 8329 	beq.w	db12 <_svfprintf_r+0xc82>
    d4c0:	9b08      	ldr	r3, [sp, #32]
    d4c2:	3307      	adds	r3, #7
    d4c4:	f023 0307 	bic.w	r3, r3, #7
    d4c8:	6859      	ldr	r1, [r3, #4]
    d4ca:	f853 2b08 	ldr.w	r2, [r3], #8
    d4ce:	9308      	str	r3, [sp, #32]
    d4d0:	2301      	movs	r3, #1
    d4d2:	e782      	b.n	d3da <_svfprintf_r+0x54a>
    d4d4:	f899 3000 	ldrb.w	r3, [r9]
    d4d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    d4dc:	e534      	b.n	cf48 <_svfprintf_r+0xb8>
    d4de:	bf00      	nop
    d4e0:	20000d7c 	.word	0x20000d7c
    d4e4:	20000d80 	.word	0x20000d80
    d4e8:	20000d8c 	.word	0x20000d8c
    d4ec:	4649      	mov	r1, r9
    d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    d4f2:	2b2a      	cmp	r3, #42	; 0x2a
    d4f4:	f001 8249 	beq.w	e98a <_svfprintf_r+0x1afa>
    d4f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4fc:	2a09      	cmp	r2, #9
    d4fe:	4689      	mov	r9, r1
    d500:	bf98      	it	ls
    d502:	2100      	movls	r1, #0
    d504:	f201 8144 	bhi.w	e790 <_svfprintf_r+0x1900>
    d508:	f819 3b01 	ldrb.w	r3, [r9], #1
    d50c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d510:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d514:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d518:	2a09      	cmp	r2, #9
    d51a:	d9f5      	bls.n	d508 <_svfprintf_r+0x678>
    d51c:	9103      	str	r1, [sp, #12]
    d51e:	e515      	b.n	cf4c <_svfprintf_r+0xbc>
    d520:	f899 3000 	ldrb.w	r3, [r9]
    d524:	f048 0801 	orr.w	r8, r8, #1
    d528:	e50e      	b.n	cf48 <_svfprintf_r+0xb8>
    d52a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    d52e:	2b00      	cmp	r3, #0
    d530:	f47f ad8f 	bne.w	d052 <_svfprintf_r+0x1c2>
    d534:	f899 3000 	ldrb.w	r3, [r9]
    d538:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    d53c:	e504      	b.n	cf48 <_svfprintf_r+0xb8>
    d53e:	f8cd 8008 	str.w	r8, [sp, #8]
    d542:	2b01      	cmp	r3, #1
    d544:	f000 819d 	beq.w	d882 <_svfprintf_r+0x9f2>
    d548:	2b02      	cmp	r3, #2
    d54a:	ac50      	add	r4, sp, #320	; 0x140
    d54c:	d120      	bne.n	d590 <_svfprintf_r+0x700>
    d54e:	9811      	ldr	r0, [sp, #68]	; 0x44
    d550:	f002 030f 	and.w	r3, r2, #15
    d554:	0912      	lsrs	r2, r2, #4
    d556:	5cc3      	ldrb	r3, [r0, r3]
    d558:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d55c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d560:	0909      	lsrs	r1, r1, #4
    d562:	ea52 0301 	orrs.w	r3, r2, r1
    d566:	d1f3      	bne.n	d550 <_svfprintf_r+0x6c0>
    d568:	ab50      	add	r3, sp, #320	; 0x140
    d56a:	1b1b      	subs	r3, r3, r4
    d56c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d570:	9305      	str	r3, [sp, #20]
    d572:	9a05      	ldr	r2, [sp, #20]
    d574:	9803      	ldr	r0, [sp, #12]
    d576:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d57a:	4282      	cmp	r2, r0
    d57c:	f04f 0300 	mov.w	r3, #0
    d580:	bfb8      	it	lt
    d582:	4602      	movlt	r2, r0
    d584:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d588:	9307      	str	r3, [sp, #28]
    d58a:	9202      	str	r2, [sp, #8]
    d58c:	930f      	str	r3, [sp, #60]	; 0x3c
    d58e:	e660      	b.n	d252 <_svfprintf_r+0x3c2>
    d590:	f002 0307 	and.w	r3, r2, #7
    d594:	08d2      	lsrs	r2, r2, #3
    d596:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d59a:	08c9      	lsrs	r1, r1, #3
    d59c:	3330      	adds	r3, #48	; 0x30
    d59e:	ea52 0501 	orrs.w	r5, r2, r1
    d5a2:	4620      	mov	r0, r4
    d5a4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d5a8:	d1f2      	bne.n	d590 <_svfprintf_r+0x700>
    d5aa:	9a02      	ldr	r2, [sp, #8]
    d5ac:	07d1      	lsls	r1, r2, #31
    d5ae:	f100 824d 	bmi.w	da4c <_svfprintf_r+0xbbc>
    d5b2:	ab50      	add	r3, sp, #320	; 0x140
    d5b4:	1b1b      	subs	r3, r3, r4
    d5b6:	4690      	mov	r8, r2
    d5b8:	9305      	str	r3, [sp, #20]
    d5ba:	e7da      	b.n	d572 <_svfprintf_r+0x6e2>
    d5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5be:	2b65      	cmp	r3, #101	; 0x65
    d5c0:	f340 80d4 	ble.w	d76c <_svfprintf_r+0x8dc>
    d5c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d5cc:	f040 81c1 	bne.w	d952 <_svfprintf_r+0xac2>
    d5d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d5d2:	49ba      	ldr	r1, [pc, #744]	; (d8bc <_svfprintf_r+0xa2c>)
    d5d4:	f8ca 1000 	str.w	r1, [sl]
    d5d8:	3301      	adds	r3, #1
    d5da:	3201      	adds	r2, #1
    d5dc:	2101      	movs	r1, #1
    d5de:	2b07      	cmp	r3, #7
    d5e0:	9226      	str	r2, [sp, #152]	; 0x98
    d5e2:	9325      	str	r3, [sp, #148]	; 0x94
    d5e4:	f8ca 1004 	str.w	r1, [sl, #4]
    d5e8:	f300 8551 	bgt.w	e08e <_svfprintf_r+0x11fe>
    d5ec:	f10a 0a08 	add.w	sl, sl, #8
    d5f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d5f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    d5f4:	428b      	cmp	r3, r1
    d5f6:	f280 82d0 	bge.w	db9a <_svfprintf_r+0xd0a>
    d5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d5fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    d5fe:	441a      	add	r2, r3
    d600:	e9ca 1300 	strd	r1, r3, [sl]
    d604:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d606:	9226      	str	r2, [sp, #152]	; 0x98
    d608:	3301      	adds	r3, #1
    d60a:	2b07      	cmp	r3, #7
    d60c:	9325      	str	r3, [sp, #148]	; 0x94
    d60e:	f300 8397 	bgt.w	dd40 <_svfprintf_r+0xeb0>
    d612:	f10a 0a08 	add.w	sl, sl, #8
    d616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d618:	1e5c      	subs	r4, r3, #1
    d61a:	2c00      	cmp	r4, #0
    d61c:	f77f add0 	ble.w	d1c0 <_svfprintf_r+0x330>
    d620:	2c10      	cmp	r4, #16
    d622:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d624:	f340 856e 	ble.w	e104 <_svfprintf_r+0x1274>
    d628:	ee1b 6a10 	vmov	r6, s22
    d62c:	2510      	movs	r5, #16
    d62e:	e005      	b.n	d63c <_svfprintf_r+0x7ac>
    d630:	f10a 0a08 	add.w	sl, sl, #8
    d634:	3c10      	subs	r4, #16
    d636:	2c10      	cmp	r4, #16
    d638:	f340 8564 	ble.w	e104 <_svfprintf_r+0x1274>
    d63c:	3301      	adds	r3, #1
    d63e:	49a0      	ldr	r1, [pc, #640]	; (d8c0 <_svfprintf_r+0xa30>)
    d640:	3210      	adds	r2, #16
    d642:	2b07      	cmp	r3, #7
    d644:	e9ca 1500 	strd	r1, r5, [sl]
    d648:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d64c:	ddf0      	ble.n	d630 <_svfprintf_r+0x7a0>
    d64e:	aa24      	add	r2, sp, #144	; 0x90
    d650:	4631      	mov	r1, r6
    d652:	4658      	mov	r0, fp
    d654:	f002 fb24 	bl	fca0 <__ssprint_r>
    d658:	2800      	cmp	r0, #0
    d65a:	d17e      	bne.n	d75a <_svfprintf_r+0x8ca>
    d65c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d660:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d664:	e7e6      	b.n	d634 <_svfprintf_r+0x7a4>
    d666:	9b06      	ldr	r3, [sp, #24]
    d668:	9902      	ldr	r1, [sp, #8]
    d66a:	1a5d      	subs	r5, r3, r1
    d66c:	2d00      	cmp	r5, #0
    d66e:	f77f ad8e 	ble.w	d18e <_svfprintf_r+0x2fe>
    d672:	2d10      	cmp	r5, #16
    d674:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d676:	dd21      	ble.n	d6bc <_svfprintf_r+0x82c>
    d678:	9409      	str	r4, [sp, #36]	; 0x24
    d67a:	2610      	movs	r6, #16
    d67c:	ee1b 4a10 	vmov	r4, s22
    d680:	e004      	b.n	d68c <_svfprintf_r+0x7fc>
    d682:	3d10      	subs	r5, #16
    d684:	2d10      	cmp	r5, #16
    d686:	f10a 0a08 	add.w	sl, sl, #8
    d68a:	dd16      	ble.n	d6ba <_svfprintf_r+0x82a>
    d68c:	3301      	adds	r3, #1
    d68e:	498c      	ldr	r1, [pc, #560]	; (d8c0 <_svfprintf_r+0xa30>)
    d690:	3210      	adds	r2, #16
    d692:	2b07      	cmp	r3, #7
    d694:	e9ca 1600 	strd	r1, r6, [sl]
    d698:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d69c:	ddf1      	ble.n	d682 <_svfprintf_r+0x7f2>
    d69e:	aa24      	add	r2, sp, #144	; 0x90
    d6a0:	4621      	mov	r1, r4
    d6a2:	4658      	mov	r0, fp
    d6a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d6a8:	f002 fafa 	bl	fca0 <__ssprint_r>
    d6ac:	2800      	cmp	r0, #0
    d6ae:	d154      	bne.n	d75a <_svfprintf_r+0x8ca>
    d6b0:	3d10      	subs	r5, #16
    d6b2:	2d10      	cmp	r5, #16
    d6b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d6b8:	dce8      	bgt.n	d68c <_svfprintf_r+0x7fc>
    d6ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d6bc:	4980      	ldr	r1, [pc, #512]	; (d8c0 <_svfprintf_r+0xa30>)
    d6be:	f8ca 5004 	str.w	r5, [sl, #4]
    d6c2:	3301      	adds	r3, #1
    d6c4:	442a      	add	r2, r5
    d6c6:	2b07      	cmp	r3, #7
    d6c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d6cc:	f8ca 1000 	str.w	r1, [sl]
    d6d0:	f300 8526 	bgt.w	e120 <_svfprintf_r+0x1290>
    d6d4:	9b03      	ldr	r3, [sp, #12]
    d6d6:	9905      	ldr	r1, [sp, #20]
    d6d8:	1a5d      	subs	r5, r3, r1
    d6da:	2d00      	cmp	r5, #0
    d6dc:	f10a 0a08 	add.w	sl, sl, #8
    d6e0:	f77f ad5b 	ble.w	d19a <_svfprintf_r+0x30a>
    d6e4:	2d10      	cmp	r5, #16
    d6e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d6e8:	dd1f      	ble.n	d72a <_svfprintf_r+0x89a>
    d6ea:	4651      	mov	r1, sl
    d6ec:	2610      	movs	r6, #16
    d6ee:	ee1b aa10 	vmov	sl, s22
    d6f2:	e004      	b.n	d6fe <_svfprintf_r+0x86e>
    d6f4:	3d10      	subs	r5, #16
    d6f6:	2d10      	cmp	r5, #16
    d6f8:	f101 0108 	add.w	r1, r1, #8
    d6fc:	dd14      	ble.n	d728 <_svfprintf_r+0x898>
    d6fe:	3301      	adds	r3, #1
    d700:	486f      	ldr	r0, [pc, #444]	; (d8c0 <_svfprintf_r+0xa30>)
    d702:	3210      	adds	r2, #16
    d704:	2b07      	cmp	r3, #7
    d706:	e9c1 0600 	strd	r0, r6, [r1]
    d70a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d70e:	ddf1      	ble.n	d6f4 <_svfprintf_r+0x864>
    d710:	aa24      	add	r2, sp, #144	; 0x90
    d712:	4651      	mov	r1, sl
    d714:	4658      	mov	r0, fp
    d716:	f002 fac3 	bl	fca0 <__ssprint_r>
    d71a:	b9f0      	cbnz	r0, d75a <_svfprintf_r+0x8ca>
    d71c:	3d10      	subs	r5, #16
    d71e:	2d10      	cmp	r5, #16
    d720:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d724:	a927      	add	r1, sp, #156	; 0x9c
    d726:	dcea      	bgt.n	d6fe <_svfprintf_r+0x86e>
    d728:	468a      	mov	sl, r1
    d72a:	3301      	adds	r3, #1
    d72c:	4964      	ldr	r1, [pc, #400]	; (d8c0 <_svfprintf_r+0xa30>)
    d72e:	f8ca 5004 	str.w	r5, [sl, #4]
    d732:	442a      	add	r2, r5
    d734:	2b07      	cmp	r3, #7
    d736:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d73a:	f8ca 1000 	str.w	r1, [sl]
    d73e:	f300 81da 	bgt.w	daf6 <_svfprintf_r+0xc66>
    d742:	f10a 0a08 	add.w	sl, sl, #8
    d746:	e528      	b.n	d19a <_svfprintf_r+0x30a>
    d748:	ee1b 1a10 	vmov	r1, s22
    d74c:	aa24      	add	r2, sp, #144	; 0x90
    d74e:	4658      	mov	r0, fp
    d750:	f002 faa6 	bl	fca0 <__ssprint_r>
    d754:	2800      	cmp	r0, #0
    d756:	f43f ad47 	beq.w	d1e8 <_svfprintf_r+0x358>
    d75a:	9b07      	ldr	r3, [sp, #28]
    d75c:	2b00      	cmp	r3, #0
    d75e:	f43f aca2 	beq.w	d0a6 <_svfprintf_r+0x216>
    d762:	9907      	ldr	r1, [sp, #28]
    d764:	4658      	mov	r0, fp
    d766:	f7fe fead 	bl	c4c4 <_free_r>
    d76a:	e49c      	b.n	d0a6 <_svfprintf_r+0x216>
    d76c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d76e:	2b01      	cmp	r3, #1
    d770:	f340 817a 	ble.w	da68 <_svfprintf_r+0xbd8>
    d774:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d776:	f8ca 4000 	str.w	r4, [sl]
    d77a:	3301      	adds	r3, #1
    d77c:	3201      	adds	r2, #1
    d77e:	2101      	movs	r1, #1
    d780:	2b07      	cmp	r3, #7
    d782:	9226      	str	r2, [sp, #152]	; 0x98
    d784:	9325      	str	r3, [sp, #148]	; 0x94
    d786:	f8ca 1004 	str.w	r1, [sl, #4]
    d78a:	f300 81f8 	bgt.w	db7e <_svfprintf_r+0xcee>
    d78e:	f10a 0a08 	add.w	sl, sl, #8
    d792:	9910      	ldr	r1, [sp, #64]	; 0x40
    d794:	9812      	ldr	r0, [sp, #72]	; 0x48
    d796:	3301      	adds	r3, #1
    d798:	440a      	add	r2, r1
    d79a:	2b07      	cmp	r3, #7
    d79c:	e9ca 0100 	strd	r0, r1, [sl]
    d7a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d7a4:	f300 81dd 	bgt.w	db62 <_svfprintf_r+0xcd2>
    d7a8:	f10a 0a08 	add.w	sl, sl, #8
    d7ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d7b4:	f000 8177 	beq.w	daa6 <_svfprintf_r+0xc16>
    d7b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    d7ba:	3301      	adds	r3, #1
    d7bc:	3901      	subs	r1, #1
    d7be:	3401      	adds	r4, #1
    d7c0:	440a      	add	r2, r1
    d7c2:	2b07      	cmp	r3, #7
    d7c4:	f8ca 4000 	str.w	r4, [sl]
    d7c8:	9325      	str	r3, [sp, #148]	; 0x94
    d7ca:	f8ca 1004 	str.w	r1, [sl, #4]
    d7ce:	9226      	str	r2, [sp, #152]	; 0x98
    d7d0:	f300 815b 	bgt.w	da8a <_svfprintf_r+0xbfa>
    d7d4:	f10a 0a08 	add.w	sl, sl, #8
    d7d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    d7da:	f8ca 1004 	str.w	r1, [sl, #4]
    d7de:	3301      	adds	r3, #1
    d7e0:	440a      	add	r2, r1
    d7e2:	2b07      	cmp	r3, #7
    d7e4:	a91e      	add	r1, sp, #120	; 0x78
    d7e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d7ea:	f8ca 1000 	str.w	r1, [sl]
    d7ee:	f77f ace5 	ble.w	d1bc <_svfprintf_r+0x32c>
    d7f2:	ee1b 1a10 	vmov	r1, s22
    d7f6:	aa24      	add	r2, sp, #144	; 0x90
    d7f8:	4658      	mov	r0, fp
    d7fa:	f002 fa51 	bl	fca0 <__ssprint_r>
    d7fe:	2800      	cmp	r0, #0
    d800:	d1ab      	bne.n	d75a <_svfprintf_r+0x8ca>
    d802:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d804:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d808:	e4da      	b.n	d1c0 <_svfprintf_r+0x330>
    d80a:	2d10      	cmp	r5, #16
    d80c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    d810:	4e2c      	ldr	r6, [pc, #176]	; (d8c4 <_svfprintf_r+0xa34>)
    d812:	dd24      	ble.n	d85e <_svfprintf_r+0x9ce>
    d814:	9417      	str	r4, [sp, #92]	; 0x5c
    d816:	2310      	movs	r3, #16
    d818:	ee1b 4a10 	vmov	r4, s22
    d81c:	4608      	mov	r0, r1
    d81e:	e004      	b.n	d82a <_svfprintf_r+0x99a>
    d820:	3d10      	subs	r5, #16
    d822:	2d10      	cmp	r5, #16
    d824:	f10a 0a08 	add.w	sl, sl, #8
    d828:	dd17      	ble.n	d85a <_svfprintf_r+0x9ca>
    d82a:	3001      	adds	r0, #1
    d82c:	3210      	adds	r2, #16
    d82e:	2807      	cmp	r0, #7
    d830:	e9ca 6300 	strd	r6, r3, [sl]
    d834:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    d838:	ddf2      	ble.n	d820 <_svfprintf_r+0x990>
    d83a:	aa24      	add	r2, sp, #144	; 0x90
    d83c:	4621      	mov	r1, r4
    d83e:	4658      	mov	r0, fp
    d840:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d844:	f002 fa2c 	bl	fca0 <__ssprint_r>
    d848:	2800      	cmp	r0, #0
    d84a:	d186      	bne.n	d75a <_svfprintf_r+0x8ca>
    d84c:	3d10      	subs	r5, #16
    d84e:	2d10      	cmp	r5, #16
    d850:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    d854:	f04f 0310 	mov.w	r3, #16
    d858:	dce7      	bgt.n	d82a <_svfprintf_r+0x99a>
    d85a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    d85c:	4601      	mov	r1, r0
    d85e:	3101      	adds	r1, #1
    d860:	442a      	add	r2, r5
    d862:	2907      	cmp	r1, #7
    d864:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    d868:	f8ca 6000 	str.w	r6, [sl]
    d86c:	f8ca 5004 	str.w	r5, [sl, #4]
    d870:	f300 83bd 	bgt.w	dfee <_svfprintf_r+0x115e>
    d874:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d878:	f10a 0a08 	add.w	sl, sl, #8
    d87c:	e45d      	b.n	d13a <_svfprintf_r+0x2aa>
    d87e:	f8cd 8008 	str.w	r8, [sp, #8]
    d882:	2a0a      	cmp	r2, #10
    d884:	f171 0300 	sbcs.w	r3, r1, #0
    d888:	f080 8345 	bcs.w	df16 <_svfprintf_r+0x1086>
    d88c:	3230      	adds	r2, #48	; 0x30
    d88e:	2301      	movs	r3, #1
    d890:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d894:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    d898:	9305      	str	r3, [sp, #20]
    d89a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d89e:	e668      	b.n	d572 <_svfprintf_r+0x6e2>
    d8a0:	ee1b 1a10 	vmov	r1, s22
    d8a4:	aa24      	add	r2, sp, #144	; 0x90
    d8a6:	4658      	mov	r0, fp
    d8a8:	f002 f9fa 	bl	fca0 <__ssprint_r>
    d8ac:	2800      	cmp	r0, #0
    d8ae:	f47f af54 	bne.w	d75a <_svfprintf_r+0x8ca>
    d8b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d8b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d8b8:	e452      	b.n	d160 <_svfprintf_r+0x2d0>
    d8ba:	bf00      	nop
    d8bc:	20000dbc 	.word	0x20000dbc
    d8c0:	20001340 	.word	0x20001340
    d8c4:	20000dc0 	.word	0x20000dc0
    d8c8:	ee1b 1a10 	vmov	r1, s22
    d8cc:	aa24      	add	r2, sp, #144	; 0x90
    d8ce:	4658      	mov	r0, fp
    d8d0:	f002 f9e6 	bl	fca0 <__ssprint_r>
    d8d4:	2800      	cmp	r0, #0
    d8d6:	f47f af40 	bne.w	d75a <_svfprintf_r+0x8ca>
    d8da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d8dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d8e0:	e451      	b.n	d186 <_svfprintf_r+0x2f6>
    d8e2:	2c10      	cmp	r4, #16
    d8e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d8e6:	4ebe      	ldr	r6, [pc, #760]	; (dbe0 <_svfprintf_r+0xd50>)
    d8e8:	dd1f      	ble.n	d92a <_svfprintf_r+0xa9a>
    d8ea:	ee1b 8a10 	vmov	r8, s22
    d8ee:	2510      	movs	r5, #16
    d8f0:	e004      	b.n	d8fc <_svfprintf_r+0xa6c>
    d8f2:	3c10      	subs	r4, #16
    d8f4:	2c10      	cmp	r4, #16
    d8f6:	f10a 0a08 	add.w	sl, sl, #8
    d8fa:	dd16      	ble.n	d92a <_svfprintf_r+0xa9a>
    d8fc:	3301      	adds	r3, #1
    d8fe:	3210      	adds	r2, #16
    d900:	2b07      	cmp	r3, #7
    d902:	e9ca 6500 	strd	r6, r5, [sl]
    d906:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d90a:	ddf2      	ble.n	d8f2 <_svfprintf_r+0xa62>
    d90c:	aa24      	add	r2, sp, #144	; 0x90
    d90e:	4641      	mov	r1, r8
    d910:	4658      	mov	r0, fp
    d912:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d916:	f002 f9c3 	bl	fca0 <__ssprint_r>
    d91a:	2800      	cmp	r0, #0
    d91c:	f47f af1d 	bne.w	d75a <_svfprintf_r+0x8ca>
    d920:	3c10      	subs	r4, #16
    d922:	2c10      	cmp	r4, #16
    d924:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d928:	dce8      	bgt.n	d8fc <_svfprintf_r+0xa6c>
    d92a:	3301      	adds	r3, #1
    d92c:	4422      	add	r2, r4
    d92e:	2b07      	cmp	r3, #7
    d930:	e9ca 6400 	strd	r6, r4, [sl]
    d934:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d938:	f77f ac4b 	ble.w	d1d2 <_svfprintf_r+0x342>
    d93c:	ee1b 1a10 	vmov	r1, s22
    d940:	aa24      	add	r2, sp, #144	; 0x90
    d942:	4658      	mov	r0, fp
    d944:	f002 f9ac 	bl	fca0 <__ssprint_r>
    d948:	2800      	cmp	r0, #0
    d94a:	f47f af06 	bne.w	d75a <_svfprintf_r+0x8ca>
    d94e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d950:	e43f      	b.n	d1d2 <_svfprintf_r+0x342>
    d952:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d954:	2900      	cmp	r1, #0
    d956:	f340 835a 	ble.w	e00e <_svfprintf_r+0x117e>
    d95a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    d95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d95e:	429e      	cmp	r6, r3
    d960:	bfa8      	it	ge
    d962:	461e      	movge	r6, r3
    d964:	2e00      	cmp	r6, #0
    d966:	dd0b      	ble.n	d980 <_svfprintf_r+0xaf0>
    d968:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d96a:	3301      	adds	r3, #1
    d96c:	4432      	add	r2, r6
    d96e:	2b07      	cmp	r3, #7
    d970:	e9ca 4600 	strd	r4, r6, [sl]
    d974:	9226      	str	r2, [sp, #152]	; 0x98
    d976:	9325      	str	r3, [sp, #148]	; 0x94
    d978:	f300 8689 	bgt.w	e68e <_svfprintf_r+0x17fe>
    d97c:	f10a 0a08 	add.w	sl, sl, #8
    d980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d982:	2e00      	cmp	r6, #0
    d984:	bfa8      	it	ge
    d986:	1bad      	subge	r5, r5, r6
    d988:	2d00      	cmp	r5, #0
    d98a:	f300 8203 	bgt.w	dd94 <_svfprintf_r+0xf04>
    d98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d990:	f418 6f80 	tst.w	r8, #1024	; 0x400
    d994:	4423      	add	r3, r4
    d996:	9305      	str	r3, [sp, #20]
    d998:	f040 821f 	bne.w	ddda <_svfprintf_r+0xf4a>
    d99c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d99e:	990e      	ldr	r1, [sp, #56]	; 0x38
    d9a0:	428b      	cmp	r3, r1
    d9a2:	db03      	blt.n	d9ac <_svfprintf_r+0xb1c>
    d9a4:	f018 0f01 	tst.w	r8, #1
    d9a8:	f000 84cf 	beq.w	e34a <_svfprintf_r+0x14ba>
    d9ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    d9ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    d9b0:	440a      	add	r2, r1
    d9b2:	e9ca 0100 	strd	r0, r1, [sl]
    d9b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    d9b8:	9226      	str	r2, [sp, #152]	; 0x98
    d9ba:	3101      	adds	r1, #1
    d9bc:	2907      	cmp	r1, #7
    d9be:	9125      	str	r1, [sp, #148]	; 0x94
    d9c0:	f300 86a5 	bgt.w	e70e <_svfprintf_r+0x187e>
    d9c4:	f10a 0a08 	add.w	sl, sl, #8
    d9c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    d9ca:	1865      	adds	r5, r4, r1
    d9cc:	1acc      	subs	r4, r1, r3
    d9ce:	9b05      	ldr	r3, [sp, #20]
    d9d0:	1aed      	subs	r5, r5, r3
    d9d2:	42a5      	cmp	r5, r4
    d9d4:	bfa8      	it	ge
    d9d6:	4625      	movge	r5, r4
    d9d8:	2d00      	cmp	r5, #0
    d9da:	dd0d      	ble.n	d9f8 <_svfprintf_r+0xb68>
    d9dc:	f8ca 3000 	str.w	r3, [sl]
    d9e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9e2:	f8ca 5004 	str.w	r5, [sl, #4]
    d9e6:	3301      	adds	r3, #1
    d9e8:	442a      	add	r2, r5
    d9ea:	2b07      	cmp	r3, #7
    d9ec:	9226      	str	r2, [sp, #152]	; 0x98
    d9ee:	9325      	str	r3, [sp, #148]	; 0x94
    d9f0:	f300 86bb 	bgt.w	e76a <_svfprintf_r+0x18da>
    d9f4:	f10a 0a08 	add.w	sl, sl, #8
    d9f8:	2d00      	cmp	r5, #0
    d9fa:	bfa8      	it	ge
    d9fc:	1b64      	subge	r4, r4, r5
    d9fe:	2c00      	cmp	r4, #0
    da00:	f77f abde 	ble.w	d1c0 <_svfprintf_r+0x330>
    da04:	2c10      	cmp	r4, #16
    da06:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da08:	f340 837c 	ble.w	e104 <_svfprintf_r+0x1274>
    da0c:	ee1b 6a10 	vmov	r6, s22
    da10:	2510      	movs	r5, #16
    da12:	e005      	b.n	da20 <_svfprintf_r+0xb90>
    da14:	f10a 0a08 	add.w	sl, sl, #8
    da18:	3c10      	subs	r4, #16
    da1a:	2c10      	cmp	r4, #16
    da1c:	f340 8372 	ble.w	e104 <_svfprintf_r+0x1274>
    da20:	3301      	adds	r3, #1
    da22:	4970      	ldr	r1, [pc, #448]	; (dbe4 <_svfprintf_r+0xd54>)
    da24:	3210      	adds	r2, #16
    da26:	2b07      	cmp	r3, #7
    da28:	e9ca 1500 	strd	r1, r5, [sl]
    da2c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da30:	ddf0      	ble.n	da14 <_svfprintf_r+0xb84>
    da32:	aa24      	add	r2, sp, #144	; 0x90
    da34:	4631      	mov	r1, r6
    da36:	4658      	mov	r0, fp
    da38:	f002 f932 	bl	fca0 <__ssprint_r>
    da3c:	2800      	cmp	r0, #0
    da3e:	f47f ae8c 	bne.w	d75a <_svfprintf_r+0x8ca>
    da42:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    da46:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da4a:	e7e5      	b.n	da18 <_svfprintf_r+0xb88>
    da4c:	2b30      	cmp	r3, #48	; 0x30
    da4e:	f43f ad8b 	beq.w	d568 <_svfprintf_r+0x6d8>
    da52:	2330      	movs	r3, #48	; 0x30
    da54:	3802      	subs	r0, #2
    da56:	f804 3c01 	strb.w	r3, [r4, #-1]
    da5a:	ab50      	add	r3, sp, #320	; 0x140
    da5c:	1a1b      	subs	r3, r3, r0
    da5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    da62:	9305      	str	r3, [sp, #20]
    da64:	4604      	mov	r4, r0
    da66:	e584      	b.n	d572 <_svfprintf_r+0x6e2>
    da68:	f018 0f01 	tst.w	r8, #1
    da6c:	f47f ae82 	bne.w	d774 <_svfprintf_r+0x8e4>
    da70:	9b25      	ldr	r3, [sp, #148]	; 0x94
    da72:	f8ca 4000 	str.w	r4, [sl]
    da76:	3301      	adds	r3, #1
    da78:	3201      	adds	r2, #1
    da7a:	2101      	movs	r1, #1
    da7c:	2b07      	cmp	r3, #7
    da7e:	9226      	str	r2, [sp, #152]	; 0x98
    da80:	9325      	str	r3, [sp, #148]	; 0x94
    da82:	f8ca 1004 	str.w	r1, [sl, #4]
    da86:	f77f aea5 	ble.w	d7d4 <_svfprintf_r+0x944>
    da8a:	ee1b 1a10 	vmov	r1, s22
    da8e:	aa24      	add	r2, sp, #144	; 0x90
    da90:	4658      	mov	r0, fp
    da92:	f002 f905 	bl	fca0 <__ssprint_r>
    da96:	2800      	cmp	r0, #0
    da98:	f47f ae5f 	bne.w	d75a <_svfprintf_r+0x8ca>
    da9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    daa0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    daa4:	e698      	b.n	d7d8 <_svfprintf_r+0x948>
    daa6:	990e      	ldr	r1, [sp, #56]	; 0x38
    daa8:	1e4c      	subs	r4, r1, #1
    daaa:	2c00      	cmp	r4, #0
    daac:	f77f ae94 	ble.w	d7d8 <_svfprintf_r+0x948>
    dab0:	2c10      	cmp	r4, #16
    dab2:	f340 8361 	ble.w	e178 <_svfprintf_r+0x12e8>
    dab6:	ee1b 6a10 	vmov	r6, s22
    daba:	2510      	movs	r5, #16
    dabc:	e005      	b.n	daca <_svfprintf_r+0xc3a>
    dabe:	f10a 0a08 	add.w	sl, sl, #8
    dac2:	3c10      	subs	r4, #16
    dac4:	2c10      	cmp	r4, #16
    dac6:	f340 8357 	ble.w	e178 <_svfprintf_r+0x12e8>
    daca:	3301      	adds	r3, #1
    dacc:	4945      	ldr	r1, [pc, #276]	; (dbe4 <_svfprintf_r+0xd54>)
    dace:	3210      	adds	r2, #16
    dad0:	2b07      	cmp	r3, #7
    dad2:	e9ca 1500 	strd	r1, r5, [sl]
    dad6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dada:	ddf0      	ble.n	dabe <_svfprintf_r+0xc2e>
    dadc:	aa24      	add	r2, sp, #144	; 0x90
    dade:	4631      	mov	r1, r6
    dae0:	4658      	mov	r0, fp
    dae2:	f002 f8dd 	bl	fca0 <__ssprint_r>
    dae6:	2800      	cmp	r0, #0
    dae8:	f47f ae37 	bne.w	d75a <_svfprintf_r+0x8ca>
    daec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    daf0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    daf4:	e7e5      	b.n	dac2 <_svfprintf_r+0xc32>
    daf6:	ee1b 1a10 	vmov	r1, s22
    dafa:	aa24      	add	r2, sp, #144	; 0x90
    dafc:	4658      	mov	r0, fp
    dafe:	f002 f8cf 	bl	fca0 <__ssprint_r>
    db02:	2800      	cmp	r0, #0
    db04:	f47f ae29 	bne.w	d75a <_svfprintf_r+0x8ca>
    db08:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db0a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db0e:	f7ff bb44 	b.w	d19a <_svfprintf_r+0x30a>
    db12:	9b02      	ldr	r3, [sp, #8]
    db14:	f013 0310 	ands.w	r3, r3, #16
    db18:	f040 80c1 	bne.w	dc9e <_svfprintf_r+0xe0e>
    db1c:	9a02      	ldr	r2, [sp, #8]
    db1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    db22:	f000 837a 	beq.w	e21a <_svfprintf_r+0x138a>
    db26:	9808      	ldr	r0, [sp, #32]
    db28:	f850 2b04 	ldr.w	r2, [r0], #4
    db2c:	9008      	str	r0, [sp, #32]
    db2e:	4619      	mov	r1, r3
    db30:	b292      	uxth	r2, r2
    db32:	2301      	movs	r3, #1
    db34:	e451      	b.n	d3da <_svfprintf_r+0x54a>
    db36:	f018 0310 	ands.w	r3, r8, #16
    db3a:	d155      	bne.n	dbe8 <_svfprintf_r+0xd58>
    db3c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    db40:	f000 835d 	beq.w	e1fe <_svfprintf_r+0x136e>
    db44:	9808      	ldr	r0, [sp, #32]
    db46:	f850 2b04 	ldr.w	r2, [r0], #4
    db4a:	9008      	str	r0, [sp, #32]
    db4c:	4619      	mov	r1, r3
    db4e:	b292      	uxth	r2, r2
    db50:	e4a8      	b.n	d4a4 <_svfprintf_r+0x614>
    db52:	4252      	negs	r2, r2
    db54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    db58:	f8cd 8008 	str.w	r8, [sp, #8]
    db5c:	202d      	movs	r0, #45	; 0x2d
    db5e:	2301      	movs	r3, #1
    db60:	e43c      	b.n	d3dc <_svfprintf_r+0x54c>
    db62:	ee1b 1a10 	vmov	r1, s22
    db66:	aa24      	add	r2, sp, #144	; 0x90
    db68:	4658      	mov	r0, fp
    db6a:	f002 f899 	bl	fca0 <__ssprint_r>
    db6e:	2800      	cmp	r0, #0
    db70:	f47f adf3 	bne.w	d75a <_svfprintf_r+0x8ca>
    db74:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    db78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db7c:	e616      	b.n	d7ac <_svfprintf_r+0x91c>
    db7e:	ee1b 1a10 	vmov	r1, s22
    db82:	aa24      	add	r2, sp, #144	; 0x90
    db84:	4658      	mov	r0, fp
    db86:	f002 f88b 	bl	fca0 <__ssprint_r>
    db8a:	2800      	cmp	r0, #0
    db8c:	f47f ade5 	bne.w	d75a <_svfprintf_r+0x8ca>
    db90:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    db94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db98:	e5fb      	b.n	d792 <_svfprintf_r+0x902>
    db9a:	f018 0f01 	tst.w	r8, #1
    db9e:	f43f ab0f 	beq.w	d1c0 <_svfprintf_r+0x330>
    dba2:	e52a      	b.n	d5fa <_svfprintf_r+0x76a>
    dba4:	9308      	str	r3, [sp, #32]
    dba6:	f899 3000 	ldrb.w	r3, [r9]
    dbaa:	f7ff b9cd 	b.w	cf48 <_svfprintf_r+0xb8>
    dbae:	ac50      	add	r4, sp, #320	; 0x140
    dbb0:	e4df      	b.n	d572 <_svfprintf_r+0x6e2>
    dbb2:	f418 7f00 	tst.w	r8, #512	; 0x200
    dbb6:	f040 83db 	bne.w	e370 <_svfprintf_r+0x14e0>
    dbba:	f853 2b04 	ldr.w	r2, [r3], #4
    dbbe:	9308      	str	r3, [sp, #32]
    dbc0:	17d1      	asrs	r1, r2, #31
    dbc2:	460b      	mov	r3, r1
    dbc4:	f7ff bbb6 	b.w	d334 <_svfprintf_r+0x4a4>
    dbc8:	9b08      	ldr	r3, [sp, #32]
    dbca:	9804      	ldr	r0, [sp, #16]
    dbcc:	f853 1b04 	ldr.w	r1, [r3], #4
    dbd0:	9308      	str	r3, [sp, #32]
    dbd2:	17c2      	asrs	r2, r0, #31
    dbd4:	e9c1 0200 	strd	r0, r2, [r1]
    dbd8:	464c      	mov	r4, r9
    dbda:	f7ff b98b 	b.w	cef4 <_svfprintf_r+0x64>
    dbde:	bf00      	nop
    dbe0:	20000dc0 	.word	0x20000dc0
    dbe4:	20001340 	.word	0x20001340
    dbe8:	9b08      	ldr	r3, [sp, #32]
    dbea:	f853 2b04 	ldr.w	r2, [r3], #4
    dbee:	9308      	str	r3, [sp, #32]
    dbf0:	e458      	b.n	d4a4 <_svfprintf_r+0x614>
    dbf2:	eeb4 8b48 	vcmp.f64	d8, d8
    dbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dbfa:	f180 8694 	bvs.w	e926 <_svfprintf_r+0x1a96>
    dbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc00:	2b61      	cmp	r3, #97	; 0x61
    dc02:	f000 8552 	beq.w	e6aa <_svfprintf_r+0x181a>
    dc06:	2b41      	cmp	r3, #65	; 0x41
    dc08:	f000 85c0 	beq.w	e78c <_svfprintf_r+0x18fc>
    dc0c:	9b03      	ldr	r3, [sp, #12]
    dc0e:	3301      	adds	r3, #1
    dc10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc12:	f023 0520 	bic.w	r5, r3, #32
    dc16:	f000 8480 	beq.w	e51a <_svfprintf_r+0x168a>
    dc1a:	2d47      	cmp	r5, #71	; 0x47
    dc1c:	d104      	bne.n	dc28 <_svfprintf_r+0xd98>
    dc1e:	9b03      	ldr	r3, [sp, #12]
    dc20:	2b00      	cmp	r3, #0
    dc22:	bf08      	it	eq
    dc24:	2301      	moveq	r3, #1
    dc26:	9303      	str	r3, [sp, #12]
    dc28:	ee18 3a90 	vmov	r3, s17
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    dc32:	4646      	mov	r6, r8
    dc34:	f2c0 8618 	blt.w	e868 <_svfprintf_r+0x19d8>
    dc38:	eeb0 ab48 	vmov.f64	d10, d8
    dc3c:	2300      	movs	r3, #0
    dc3e:	4690      	mov	r8, r2
    dc40:	9309      	str	r3, [sp, #36]	; 0x24
    dc42:	9307      	str	r3, [sp, #28]
    dc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc46:	3b41      	subs	r3, #65	; 0x41
    dc48:	2b25      	cmp	r3, #37	; 0x25
    dc4a:	f200 8398 	bhi.w	e37e <_svfprintf_r+0x14ee>
    dc4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    dc52:	046f      	.short	0x046f
    dc54:	03960396 	.word	0x03960396
    dc58:	04680396 	.word	0x04680396
    dc5c:	0396046c 	.word	0x0396046c
    dc60:	03960396 	.word	0x03960396
    dc64:	03960396 	.word	0x03960396
    dc68:	03960396 	.word	0x03960396
    dc6c:	03960396 	.word	0x03960396
    dc70:	03960396 	.word	0x03960396
    dc74:	03960396 	.word	0x03960396
    dc78:	03960396 	.word	0x03960396
    dc7c:	03960396 	.word	0x03960396
    dc80:	03960396 	.word	0x03960396
    dc84:	03960396 	.word	0x03960396
    dc88:	03960396 	.word	0x03960396
    dc8c:	03960396 	.word	0x03960396
    dc90:	03960396 	.word	0x03960396
    dc94:	03960396 	.word	0x03960396
    dc98:	04680396 	.word	0x04680396
    dc9c:	046c      	.short	0x046c
    dc9e:	9b08      	ldr	r3, [sp, #32]
    dca0:	f853 2b04 	ldr.w	r2, [r3], #4
    dca4:	9308      	str	r3, [sp, #32]
    dca6:	2301      	movs	r3, #1
    dca8:	f7ff bb97 	b.w	d3da <_svfprintf_r+0x54a>
    dcac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dcae:	2b00      	cmp	r3, #0
    dcb0:	f43f a9cf 	beq.w	d052 <_svfprintf_r+0x1c2>
    dcb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	2b00      	cmp	r3, #0
    dcba:	f43f a9ca 	beq.w	d052 <_svfprintf_r+0x1c2>
    dcbe:	f899 3000 	ldrb.w	r3, [r9]
    dcc2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    dcc6:	f7ff b93f 	b.w	cf48 <_svfprintf_r+0xb8>
    dcca:	930b      	str	r3, [sp, #44]	; 0x2c
    dccc:	f8cd 8008 	str.w	r8, [sp, #8]
    dcd0:	f7ff bbf1 	b.w	d4b6 <_svfprintf_r+0x626>
    dcd4:	930b      	str	r3, [sp, #44]	; 0x2c
    dcd6:	4b9a      	ldr	r3, [pc, #616]	; (df40 <_svfprintf_r+0x10b0>)
    dcd8:	9311      	str	r3, [sp, #68]	; 0x44
    dcda:	f018 0120 	ands.w	r1, r8, #32
    dcde:	f000 8105 	beq.w	deec <_svfprintf_r+0x105c>
    dce2:	9b08      	ldr	r3, [sp, #32]
    dce4:	3307      	adds	r3, #7
    dce6:	f023 0307 	bic.w	r3, r3, #7
    dcea:	6859      	ldr	r1, [r3, #4]
    dcec:	f853 2b08 	ldr.w	r2, [r3], #8
    dcf0:	9308      	str	r3, [sp, #32]
    dcf2:	f018 0f01 	tst.w	r8, #1
    dcf6:	d00a      	beq.n	dd0e <_svfprintf_r+0xe7e>
    dcf8:	ea52 0301 	orrs.w	r3, r2, r1
    dcfc:	d007      	beq.n	dd0e <_svfprintf_r+0xe7e>
    dcfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd00:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    dd04:	2330      	movs	r3, #48	; 0x30
    dd06:	f048 0802 	orr.w	r8, r8, #2
    dd0a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    dd0e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    dd12:	9302      	str	r3, [sp, #8]
    dd14:	2302      	movs	r3, #2
    dd16:	f7ff bb60 	b.w	d3da <_svfprintf_r+0x54a>
    dd1a:	930b      	str	r3, [sp, #44]	; 0x2c
    dd1c:	f7ff bbb6 	b.w	d48c <_svfprintf_r+0x5fc>
    dd20:	930b      	str	r3, [sp, #44]	; 0x2c
    dd22:	4b88      	ldr	r3, [pc, #544]	; (df44 <_svfprintf_r+0x10b4>)
    dd24:	9311      	str	r3, [sp, #68]	; 0x44
    dd26:	e7d8      	b.n	dcda <_svfprintf_r+0xe4a>
    dd28:	9b08      	ldr	r3, [sp, #32]
    dd2a:	2101      	movs	r1, #1
    dd2c:	f853 2b04 	ldr.w	r2, [r3], #4
    dd30:	9102      	str	r1, [sp, #8]
    dd32:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    dd36:	9308      	str	r3, [sp, #32]
    dd38:	9105      	str	r1, [sp, #20]
    dd3a:	ac37      	add	r4, sp, #220	; 0xdc
    dd3c:	f7ff baaf 	b.w	d29e <_svfprintf_r+0x40e>
    dd40:	ee1b 1a10 	vmov	r1, s22
    dd44:	aa24      	add	r2, sp, #144	; 0x90
    dd46:	4658      	mov	r0, fp
    dd48:	f001 ffaa 	bl	fca0 <__ssprint_r>
    dd4c:	2800      	cmp	r0, #0
    dd4e:	f47f ad04 	bne.w	d75a <_svfprintf_r+0x8ca>
    dd52:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dd54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd58:	e45d      	b.n	d616 <_svfprintf_r+0x786>
    dd5a:	9b03      	ldr	r3, [sp, #12]
    dd5c:	9407      	str	r4, [sp, #28]
    dd5e:	2b06      	cmp	r3, #6
    dd60:	4622      	mov	r2, r4
    dd62:	bf28      	it	cs
    dd64:	2306      	movcs	r3, #6
    dd66:	9403      	str	r4, [sp, #12]
    dd68:	4621      	mov	r1, r4
    dd6a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    dd6e:	4c76      	ldr	r4, [pc, #472]	; (df48 <_svfprintf_r+0x10b8>)
    dd70:	9302      	str	r3, [sp, #8]
    dd72:	9305      	str	r3, [sp, #20]
    dd74:	920f      	str	r2, [sp, #60]	; 0x3c
    dd76:	f7ff ba6c 	b.w	d252 <_svfprintf_r+0x3c2>
    dd7a:	2140      	movs	r1, #64	; 0x40
    dd7c:	4658      	mov	r0, fp
    dd7e:	f7fc fef7 	bl	ab70 <_malloc_r>
    dd82:	6020      	str	r0, [r4, #0]
    dd84:	6120      	str	r0, [r4, #16]
    dd86:	2800      	cmp	r0, #0
    dd88:	f000 860f 	beq.w	e9aa <_svfprintf_r+0x1b1a>
    dd8c:	2340      	movs	r3, #64	; 0x40
    dd8e:	6163      	str	r3, [r4, #20]
    dd90:	f7ff b89e 	b.w	ced0 <_svfprintf_r+0x40>
    dd94:	2d10      	cmp	r5, #16
    dd96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dd98:	f340 825d 	ble.w	e256 <_svfprintf_r+0x13c6>
    dd9c:	4651      	mov	r1, sl
    dd9e:	2610      	movs	r6, #16
    dda0:	ee1b aa10 	vmov	sl, s22
    dda4:	e004      	b.n	ddb0 <_svfprintf_r+0xf20>
    dda6:	3108      	adds	r1, #8
    dda8:	3d10      	subs	r5, #16
    ddaa:	2d10      	cmp	r5, #16
    ddac:	f340 8252 	ble.w	e254 <_svfprintf_r+0x13c4>
    ddb0:	3301      	adds	r3, #1
    ddb2:	4866      	ldr	r0, [pc, #408]	; (df4c <_svfprintf_r+0x10bc>)
    ddb4:	3210      	adds	r2, #16
    ddb6:	2b07      	cmp	r3, #7
    ddb8:	e9c1 0600 	strd	r0, r6, [r1]
    ddbc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ddc0:	ddf1      	ble.n	dda6 <_svfprintf_r+0xf16>
    ddc2:	aa24      	add	r2, sp, #144	; 0x90
    ddc4:	4651      	mov	r1, sl
    ddc6:	4658      	mov	r0, fp
    ddc8:	f001 ff6a 	bl	fca0 <__ssprint_r>
    ddcc:	2800      	cmp	r0, #0
    ddce:	f47f acc4 	bne.w	d75a <_svfprintf_r+0x8ca>
    ddd2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ddd6:	a927      	add	r1, sp, #156	; 0x9c
    ddd8:	e7e6      	b.n	dda8 <_svfprintf_r+0xf18>
    ddda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dddc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    dde0:	18e3      	adds	r3, r4, r3
    dde2:	9303      	str	r3, [sp, #12]
    dde4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dde6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ddea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    ddec:	9d05      	ldr	r5, [sp, #20]
    ddee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    ddf2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    ddf6:	940b      	str	r4, [sp, #44]	; 0x2c
    ddf8:	ee1b 1a10 	vmov	r1, s22
    ddfc:	4650      	mov	r0, sl
    ddfe:	2b00      	cmp	r3, #0
    de00:	d034      	beq.n	de6c <_svfprintf_r+0xfdc>
    de02:	f1b8 0f00 	cmp.w	r8, #0
    de06:	d135      	bne.n	de74 <_svfprintf_r+0xfe4>
    de08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de0a:	3b01      	subs	r3, #1
    de0c:	3e01      	subs	r6, #1
    de0e:	930d      	str	r3, [sp, #52]	; 0x34
    de10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    de12:	e9c0 3900 	strd	r3, r9, [r0]
    de16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    de18:	3301      	adds	r3, #1
    de1a:	444a      	add	r2, r9
    de1c:	2b07      	cmp	r3, #7
    de1e:	9226      	str	r2, [sp, #152]	; 0x98
    de20:	9325      	str	r3, [sp, #148]	; 0x94
    de22:	dc6c      	bgt.n	defe <_svfprintf_r+0x106e>
    de24:	3008      	adds	r0, #8
    de26:	9b03      	ldr	r3, [sp, #12]
    de28:	f896 c000 	ldrb.w	ip, [r6]
    de2c:	1b5b      	subs	r3, r3, r5
    de2e:	4563      	cmp	r3, ip
    de30:	bfa8      	it	ge
    de32:	4663      	movge	r3, ip
    de34:	2b00      	cmp	r3, #0
    de36:	469a      	mov	sl, r3
    de38:	dd0c      	ble.n	de54 <_svfprintf_r+0xfc4>
    de3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    de3c:	3401      	adds	r4, #1
    de3e:	441a      	add	r2, r3
    de40:	2c07      	cmp	r4, #7
    de42:	e9c0 5300 	strd	r5, r3, [r0]
    de46:	9226      	str	r2, [sp, #152]	; 0x98
    de48:	9425      	str	r4, [sp, #148]	; 0x94
    de4a:	f300 8177 	bgt.w	e13c <_svfprintf_r+0x12ac>
    de4e:	f896 c000 	ldrb.w	ip, [r6]
    de52:	3008      	adds	r0, #8
    de54:	f1ba 0f00 	cmp.w	sl, #0
    de58:	bfac      	ite	ge
    de5a:	ebac 040a 	subge.w	r4, ip, sl
    de5e:	4664      	movlt	r4, ip
    de60:	2c00      	cmp	r4, #0
    de62:	dc0a      	bgt.n	de7a <_svfprintf_r+0xfea>
    de64:	4465      	add	r5, ip
    de66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de68:	2b00      	cmp	r3, #0
    de6a:	d1ca      	bne.n	de02 <_svfprintf_r+0xf72>
    de6c:	f1b8 0f00 	cmp.w	r8, #0
    de70:	f000 83ac 	beq.w	e5cc <_svfprintf_r+0x173c>
    de74:	f108 38ff 	add.w	r8, r8, #4294967295
    de78:	e7ca      	b.n	de10 <_svfprintf_r+0xf80>
    de7a:	2c10      	cmp	r4, #16
    de7c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    de80:	dd24      	ble.n	decc <_svfprintf_r+0x103c>
    de82:	9505      	str	r5, [sp, #20]
    de84:	f04f 0a10 	mov.w	sl, #16
    de88:	4663      	mov	r3, ip
    de8a:	460d      	mov	r5, r1
    de8c:	e004      	b.n	de98 <_svfprintf_r+0x1008>
    de8e:	3c10      	subs	r4, #16
    de90:	2c10      	cmp	r4, #16
    de92:	f100 0008 	add.w	r0, r0, #8
    de96:	dd16      	ble.n	dec6 <_svfprintf_r+0x1036>
    de98:	3301      	adds	r3, #1
    de9a:	492c      	ldr	r1, [pc, #176]	; (df4c <_svfprintf_r+0x10bc>)
    de9c:	3210      	adds	r2, #16
    de9e:	2b07      	cmp	r3, #7
    dea0:	e9c0 1a00 	strd	r1, sl, [r0]
    dea4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dea8:	ddf1      	ble.n	de8e <_svfprintf_r+0xffe>
    deaa:	aa24      	add	r2, sp, #144	; 0x90
    deac:	4629      	mov	r1, r5
    deae:	4658      	mov	r0, fp
    deb0:	f001 fef6 	bl	fca0 <__ssprint_r>
    deb4:	2800      	cmp	r0, #0
    deb6:	f47f ac50 	bne.w	d75a <_svfprintf_r+0x8ca>
    deba:	3c10      	subs	r4, #16
    debc:	2c10      	cmp	r4, #16
    debe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dec2:	a827      	add	r0, sp, #156	; 0x9c
    dec4:	dce8      	bgt.n	de98 <_svfprintf_r+0x1008>
    dec6:	4629      	mov	r1, r5
    dec8:	9d05      	ldr	r5, [sp, #20]
    deca:	469c      	mov	ip, r3
    decc:	f10c 0301 	add.w	r3, ip, #1
    ded0:	4422      	add	r2, r4
    ded2:	6044      	str	r4, [r0, #4]
    ded4:	2b07      	cmp	r3, #7
    ded6:	4c1d      	ldr	r4, [pc, #116]	; (df4c <_svfprintf_r+0x10bc>)
    ded8:	6004      	str	r4, [r0, #0]
    deda:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dede:	f300 83c6 	bgt.w	e66e <_svfprintf_r+0x17de>
    dee2:	f896 c000 	ldrb.w	ip, [r6]
    dee6:	3008      	adds	r0, #8
    dee8:	4465      	add	r5, ip
    deea:	e7bc      	b.n	de66 <_svfprintf_r+0xfd6>
    deec:	f018 0310 	ands.w	r3, r8, #16
    def0:	f000 80c2 	beq.w	e078 <_svfprintf_r+0x11e8>
    def4:	9b08      	ldr	r3, [sp, #32]
    def6:	f853 2b04 	ldr.w	r2, [r3], #4
    defa:	9308      	str	r3, [sp, #32]
    defc:	e6f9      	b.n	dcf2 <_svfprintf_r+0xe62>
    defe:	aa24      	add	r2, sp, #144	; 0x90
    df00:	4658      	mov	r0, fp
    df02:	9105      	str	r1, [sp, #20]
    df04:	f001 fecc 	bl	fca0 <__ssprint_r>
    df08:	2800      	cmp	r0, #0
    df0a:	f47f ac26 	bne.w	d75a <_svfprintf_r+0x8ca>
    df0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    df10:	9905      	ldr	r1, [sp, #20]
    df12:	a827      	add	r0, sp, #156	; 0x9c
    df14:	e787      	b.n	de26 <_svfprintf_r+0xf96>
    df16:	9802      	ldr	r0, [sp, #8]
    df18:	f8cd a01c 	str.w	sl, [sp, #28]
    df1c:	ac50      	add	r4, sp, #320	; 0x140
    df1e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    df22:	2500      	movs	r5, #0
    df24:	ee0a ba10 	vmov	s20, fp
    df28:	4b09      	ldr	r3, [pc, #36]	; (df50 <_svfprintf_r+0x10c0>)
    df2a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    df2e:	f8cd 9014 	str.w	r9, [sp, #20]
    df32:	46a3      	mov	fp, r4
    df34:	f04f 0805 	mov.w	r8, #5
    df38:	46ac      	mov	ip, r5
    df3a:	4604      	mov	r4, r0
    df3c:	e010      	b.n	df60 <_svfprintf_r+0x10d0>
    df3e:	bf00      	nop
    df40:	20000d8c 	.word	0x20000d8c
    df44:	20000da0 	.word	0x20000da0
    df48:	20000db4 	.word	0x20000db4
    df4c:	20001340 	.word	0x20001340
    df50:	cccccccd 	.word	0xcccccccd
    df54:	2a0a      	cmp	r2, #10
    df56:	f171 0100 	sbcs.w	r1, r1, #0
    df5a:	d336      	bcc.n	dfca <_svfprintf_r+0x113a>
    df5c:	464a      	mov	r2, r9
    df5e:	4631      	mov	r1, r6
    df60:	1850      	adds	r0, r2, r1
    df62:	f140 0000 	adc.w	r0, r0, #0
    df66:	fba3 5600 	umull	r5, r6, r3, r0
    df6a:	f026 0503 	bic.w	r5, r6, #3
    df6e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    df72:	1b40      	subs	r0, r0, r5
    df74:	1a15      	subs	r5, r2, r0
    df76:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    df7a:	f161 0e00 	sbc.w	lr, r1, #0
    df7e:	fb06 f605 	mul.w	r6, r6, r5
    df82:	fba5 9503 	umull	r9, r5, r5, r3
    df86:	fb03 660e 	mla	r6, r3, lr, r6
    df8a:	f009 0e01 	and.w	lr, r9, #1
    df8e:	442e      	add	r6, r5
    df90:	fbae 5e08 	umull	r5, lr, lr, r8
    df94:	182d      	adds	r5, r5, r0
    df96:	ea4f 0959 	mov.w	r9, r9, lsr #1
    df9a:	3530      	adds	r5, #48	; 0x30
    df9c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    dfa0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    dfa4:	f10c 0c01 	add.w	ip, ip, #1
    dfa8:	f10b 3bff 	add.w	fp, fp, #4294967295
    dfac:	0876      	lsrs	r6, r6, #1
    dfae:	2c00      	cmp	r4, #0
    dfb0:	d0d0      	beq.n	df54 <_svfprintf_r+0x10c4>
    dfb2:	f89a 0000 	ldrb.w	r0, [sl]
    dfb6:	4584      	cmp	ip, r0
    dfb8:	d1cc      	bne.n	df54 <_svfprintf_r+0x10c4>
    dfba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dfbe:	d0c9      	beq.n	df54 <_svfprintf_r+0x10c4>
    dfc0:	2a0a      	cmp	r2, #10
    dfc2:	f171 0100 	sbcs.w	r1, r1, #0
    dfc6:	f080 818f 	bcs.w	e2e8 <_svfprintf_r+0x1458>
    dfca:	465c      	mov	r4, fp
    dfcc:	ab50      	add	r3, sp, #320	; 0x140
    dfce:	1b1b      	subs	r3, r3, r4
    dfd0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    dfd4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    dfd8:	ee1a ba10 	vmov	fp, s20
    dfdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    dfe0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dfe4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    dfe8:	9305      	str	r3, [sp, #20]
    dfea:	f7ff bac2 	b.w	d572 <_svfprintf_r+0x6e2>
    dfee:	ee1b 1a10 	vmov	r1, s22
    dff2:	aa24      	add	r2, sp, #144	; 0x90
    dff4:	4658      	mov	r0, fp
    dff6:	f001 fe53 	bl	fca0 <__ssprint_r>
    dffa:	2800      	cmp	r0, #0
    dffc:	f47f abad 	bne.w	d75a <_svfprintf_r+0x8ca>
    e000:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e004:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e006:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e00a:	f7ff b896 	b.w	d13a <_svfprintf_r+0x2aa>
    e00e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e010:	48be      	ldr	r0, [pc, #760]	; (e30c <_svfprintf_r+0x147c>)
    e012:	f8ca 0000 	str.w	r0, [sl]
    e016:	3301      	adds	r3, #1
    e018:	3201      	adds	r2, #1
    e01a:	2001      	movs	r0, #1
    e01c:	2b07      	cmp	r3, #7
    e01e:	9226      	str	r2, [sp, #152]	; 0x98
    e020:	9325      	str	r3, [sp, #148]	; 0x94
    e022:	f8ca 0004 	str.w	r0, [sl, #4]
    e026:	f300 8177 	bgt.w	e318 <_svfprintf_r+0x1488>
    e02a:	f10a 0a08 	add.w	sl, sl, #8
    e02e:	2900      	cmp	r1, #0
    e030:	f040 80af 	bne.w	e192 <_svfprintf_r+0x1302>
    e034:	990e      	ldr	r1, [sp, #56]	; 0x38
    e036:	f008 0301 	and.w	r3, r8, #1
    e03a:	430b      	orrs	r3, r1
    e03c:	f43f a8c0 	beq.w	d1c0 <_svfprintf_r+0x330>
    e040:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e042:	9912      	ldr	r1, [sp, #72]	; 0x48
    e044:	441a      	add	r2, r3
    e046:	e9ca 1300 	strd	r1, r3, [sl]
    e04a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e04c:	9226      	str	r2, [sp, #152]	; 0x98
    e04e:	3301      	adds	r3, #1
    e050:	2b07      	cmp	r3, #7
    e052:	9325      	str	r3, [sp, #148]	; 0x94
    e054:	f300 8252 	bgt.w	e4fc <_svfprintf_r+0x166c>
    e058:	f10a 0a08 	add.w	sl, sl, #8
    e05c:	990e      	ldr	r1, [sp, #56]	; 0x38
    e05e:	f8ca 4000 	str.w	r4, [sl]
    e062:	3301      	adds	r3, #1
    e064:	440a      	add	r2, r1
    e066:	2b07      	cmp	r3, #7
    e068:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e06c:	f8ca 1004 	str.w	r1, [sl, #4]
    e070:	f77f a8a4 	ble.w	d1bc <_svfprintf_r+0x32c>
    e074:	f7ff bbbd 	b.w	d7f2 <_svfprintf_r+0x962>
    e078:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e07c:	f000 80dd 	beq.w	e23a <_svfprintf_r+0x13aa>
    e080:	9808      	ldr	r0, [sp, #32]
    e082:	f850 2b04 	ldr.w	r2, [r0], #4
    e086:	9008      	str	r0, [sp, #32]
    e088:	4619      	mov	r1, r3
    e08a:	b292      	uxth	r2, r2
    e08c:	e631      	b.n	dcf2 <_svfprintf_r+0xe62>
    e08e:	ee1b 1a10 	vmov	r1, s22
    e092:	aa24      	add	r2, sp, #144	; 0x90
    e094:	4658      	mov	r0, fp
    e096:	f001 fe03 	bl	fca0 <__ssprint_r>
    e09a:	2800      	cmp	r0, #0
    e09c:	f47f ab5d 	bne.w	d75a <_svfprintf_r+0x8ca>
    e0a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e0a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0a6:	f7ff baa3 	b.w	d5f0 <_svfprintf_r+0x760>
    e0aa:	ae22      	add	r6, sp, #136	; 0x88
    e0ac:	2208      	movs	r2, #8
    e0ae:	2100      	movs	r1, #0
    e0b0:	4630      	mov	r0, r6
    e0b2:	941d      	str	r4, [sp, #116]	; 0x74
    e0b4:	f7fd fda4 	bl	bc00 <memset>
    e0b8:	9b03      	ldr	r3, [sp, #12]
    e0ba:	1c5a      	adds	r2, r3, #1
    e0bc:	f000 80db 	beq.w	e276 <_svfprintf_r+0x13e6>
    e0c0:	2500      	movs	r5, #0
    e0c2:	f8cd 9008 	str.w	r9, [sp, #8]
    e0c6:	f8cd 801c 	str.w	r8, [sp, #28]
    e0ca:	4699      	mov	r9, r3
    e0cc:	46a8      	mov	r8, r5
    e0ce:	e00c      	b.n	e0ea <_svfprintf_r+0x125a>
    e0d0:	a937      	add	r1, sp, #220	; 0xdc
    e0d2:	4658      	mov	r0, fp
    e0d4:	f001 fd9e 	bl	fc14 <_wcrtomb_r>
    e0d8:	1c43      	adds	r3, r0, #1
    e0da:	4440      	add	r0, r8
    e0dc:	f000 83c8 	beq.w	e870 <_svfprintf_r+0x19e0>
    e0e0:	4548      	cmp	r0, r9
    e0e2:	dc08      	bgt.n	e0f6 <_svfprintf_r+0x1266>
    e0e4:	f000 8418 	beq.w	e918 <_svfprintf_r+0x1a88>
    e0e8:	4680      	mov	r8, r0
    e0ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e0ec:	5952      	ldr	r2, [r2, r5]
    e0ee:	4633      	mov	r3, r6
    e0f0:	3504      	adds	r5, #4
    e0f2:	2a00      	cmp	r2, #0
    e0f4:	d1ec      	bne.n	e0d0 <_svfprintf_r+0x1240>
    e0f6:	f8cd 8014 	str.w	r8, [sp, #20]
    e0fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e0fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e102:	e0c5      	b.n	e290 <_svfprintf_r+0x1400>
    e104:	3301      	adds	r3, #1
    e106:	4982      	ldr	r1, [pc, #520]	; (e310 <_svfprintf_r+0x1480>)
    e108:	f8ca 4004 	str.w	r4, [sl, #4]
    e10c:	4422      	add	r2, r4
    e10e:	2b07      	cmp	r3, #7
    e110:	f8ca 1000 	str.w	r1, [sl]
    e114:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e118:	f77f a850 	ble.w	d1bc <_svfprintf_r+0x32c>
    e11c:	f7ff bb69 	b.w	d7f2 <_svfprintf_r+0x962>
    e120:	ee1b 1a10 	vmov	r1, s22
    e124:	aa24      	add	r2, sp, #144	; 0x90
    e126:	4658      	mov	r0, fp
    e128:	f001 fdba 	bl	fca0 <__ssprint_r>
    e12c:	2800      	cmp	r0, #0
    e12e:	f47f ab14 	bne.w	d75a <_svfprintf_r+0x8ca>
    e132:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e134:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e138:	f7ff b829 	b.w	d18e <_svfprintf_r+0x2fe>
    e13c:	aa24      	add	r2, sp, #144	; 0x90
    e13e:	4658      	mov	r0, fp
    e140:	9105      	str	r1, [sp, #20]
    e142:	f001 fdad 	bl	fca0 <__ssprint_r>
    e146:	2800      	cmp	r0, #0
    e148:	f47f ab07 	bne.w	d75a <_svfprintf_r+0x8ca>
    e14c:	f896 c000 	ldrb.w	ip, [r6]
    e150:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e152:	9905      	ldr	r1, [sp, #20]
    e154:	a827      	add	r0, sp, #156	; 0x9c
    e156:	e67d      	b.n	de54 <_svfprintf_r+0xfc4>
    e158:	2b01      	cmp	r3, #1
    e15a:	f8cd 8008 	str.w	r8, [sp, #8]
    e15e:	f47f a9f3 	bne.w	d548 <_svfprintf_r+0x6b8>
    e162:	f7ff bb93 	b.w	d88c <_svfprintf_r+0x9fc>
    e166:	9b08      	ldr	r3, [sp, #32]
    e168:	9904      	ldr	r1, [sp, #16]
    e16a:	f853 2b04 	ldr.w	r2, [r3], #4
    e16e:	464c      	mov	r4, r9
    e170:	6011      	str	r1, [r2, #0]
    e172:	9308      	str	r3, [sp, #32]
    e174:	f7fe bebe 	b.w	cef4 <_svfprintf_r+0x64>
    e178:	3301      	adds	r3, #1
    e17a:	4965      	ldr	r1, [pc, #404]	; (e310 <_svfprintf_r+0x1480>)
    e17c:	f8ca 4004 	str.w	r4, [sl, #4]
    e180:	4422      	add	r2, r4
    e182:	2b07      	cmp	r3, #7
    e184:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e188:	f8ca 1000 	str.w	r1, [sl]
    e18c:	f77f ab22 	ble.w	d7d4 <_svfprintf_r+0x944>
    e190:	e47b      	b.n	da8a <_svfprintf_r+0xbfa>
    e192:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e194:	9812      	ldr	r0, [sp, #72]	; 0x48
    e196:	441a      	add	r2, r3
    e198:	e9ca 0300 	strd	r0, r3, [sl]
    e19c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e19e:	9226      	str	r2, [sp, #152]	; 0x98
    e1a0:	3301      	adds	r3, #1
    e1a2:	2b07      	cmp	r3, #7
    e1a4:	9325      	str	r3, [sp, #148]	; 0x94
    e1a6:	f300 81a9 	bgt.w	e4fc <_svfprintf_r+0x166c>
    e1aa:	f10a 0a08 	add.w	sl, sl, #8
    e1ae:	2900      	cmp	r1, #0
    e1b0:	f6bf af54 	bge.w	e05c <_svfprintf_r+0x11cc>
    e1b4:	424d      	negs	r5, r1
    e1b6:	3110      	adds	r1, #16
    e1b8:	f280 830f 	bge.w	e7da <_svfprintf_r+0x194a>
    e1bc:	ee1b 1a10 	vmov	r1, s22
    e1c0:	2610      	movs	r6, #16
    e1c2:	e005      	b.n	e1d0 <_svfprintf_r+0x1340>
    e1c4:	f10a 0a08 	add.w	sl, sl, #8
    e1c8:	3d10      	subs	r5, #16
    e1ca:	2d10      	cmp	r5, #16
    e1cc:	f340 8305 	ble.w	e7da <_svfprintf_r+0x194a>
    e1d0:	3301      	adds	r3, #1
    e1d2:	484f      	ldr	r0, [pc, #316]	; (e310 <_svfprintf_r+0x1480>)
    e1d4:	3210      	adds	r2, #16
    e1d6:	2b07      	cmp	r3, #7
    e1d8:	e9ca 0600 	strd	r0, r6, [sl]
    e1dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e1e0:	ddf0      	ble.n	e1c4 <_svfprintf_r+0x1334>
    e1e2:	aa24      	add	r2, sp, #144	; 0x90
    e1e4:	4658      	mov	r0, fp
    e1e6:	9103      	str	r1, [sp, #12]
    e1e8:	f001 fd5a 	bl	fca0 <__ssprint_r>
    e1ec:	2800      	cmp	r0, #0
    e1ee:	f47f aab4 	bne.w	d75a <_svfprintf_r+0x8ca>
    e1f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e1f6:	9903      	ldr	r1, [sp, #12]
    e1f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e1fc:	e7e4      	b.n	e1c8 <_svfprintf_r+0x1338>
    e1fe:	9b08      	ldr	r3, [sp, #32]
    e200:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e204:	bf1a      	itte	ne
    e206:	4611      	movne	r1, r2
    e208:	f853 2b04 	ldrne.w	r2, [r3], #4
    e20c:	f853 2b04 	ldreq.w	r2, [r3], #4
    e210:	9308      	str	r3, [sp, #32]
    e212:	bf18      	it	ne
    e214:	b2d2      	uxtbne	r2, r2
    e216:	f7ff b945 	b.w	d4a4 <_svfprintf_r+0x614>
    e21a:	9b02      	ldr	r3, [sp, #8]
    e21c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    e220:	9b08      	ldr	r3, [sp, #32]
    e222:	bf1a      	itte	ne
    e224:	4611      	movne	r1, r2
    e226:	f853 2b04 	ldrne.w	r2, [r3], #4
    e22a:	f853 2b04 	ldreq.w	r2, [r3], #4
    e22e:	9308      	str	r3, [sp, #32]
    e230:	bf18      	it	ne
    e232:	b2d2      	uxtbne	r2, r2
    e234:	2301      	movs	r3, #1
    e236:	f7ff b8d0 	b.w	d3da <_svfprintf_r+0x54a>
    e23a:	9b08      	ldr	r3, [sp, #32]
    e23c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e240:	bf1a      	itte	ne
    e242:	4611      	movne	r1, r2
    e244:	f853 2b04 	ldrne.w	r2, [r3], #4
    e248:	f853 2b04 	ldreq.w	r2, [r3], #4
    e24c:	9308      	str	r3, [sp, #32]
    e24e:	bf18      	it	ne
    e250:	b2d2      	uxtbne	r2, r2
    e252:	e54e      	b.n	dcf2 <_svfprintf_r+0xe62>
    e254:	468a      	mov	sl, r1
    e256:	3301      	adds	r3, #1
    e258:	492d      	ldr	r1, [pc, #180]	; (e310 <_svfprintf_r+0x1480>)
    e25a:	f8ca 5004 	str.w	r5, [sl, #4]
    e25e:	442a      	add	r2, r5
    e260:	2b07      	cmp	r3, #7
    e262:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e266:	f8ca 1000 	str.w	r1, [sl]
    e26a:	f300 8139 	bgt.w	e4e0 <_svfprintf_r+0x1650>
    e26e:	f10a 0a08 	add.w	sl, sl, #8
    e272:	f7ff bb8c 	b.w	d98e <_svfprintf_r+0xafe>
    e276:	2300      	movs	r3, #0
    e278:	4619      	mov	r1, r3
    e27a:	9600      	str	r6, [sp, #0]
    e27c:	aa1d      	add	r2, sp, #116	; 0x74
    e27e:	4658      	mov	r0, fp
    e280:	f001 fcee 	bl	fc60 <_wcsrtombs_r>
    e284:	4603      	mov	r3, r0
    e286:	3301      	adds	r3, #1
    e288:	9005      	str	r0, [sp, #20]
    e28a:	f000 82f1 	beq.w	e870 <_svfprintf_r+0x19e0>
    e28e:	941d      	str	r4, [sp, #116]	; 0x74
    e290:	9b05      	ldr	r3, [sp, #20]
    e292:	2b00      	cmp	r3, #0
    e294:	d04e      	beq.n	e334 <_svfprintf_r+0x14a4>
    e296:	2b63      	cmp	r3, #99	; 0x63
    e298:	f300 8118 	bgt.w	e4cc <_svfprintf_r+0x163c>
    e29c:	2300      	movs	r3, #0
    e29e:	9307      	str	r3, [sp, #28]
    e2a0:	ac37      	add	r4, sp, #220	; 0xdc
    e2a2:	2208      	movs	r2, #8
    e2a4:	2100      	movs	r1, #0
    e2a6:	4630      	mov	r0, r6
    e2a8:	f7fd fcaa 	bl	bc00 <memset>
    e2ac:	9d05      	ldr	r5, [sp, #20]
    e2ae:	9600      	str	r6, [sp, #0]
    e2b0:	462b      	mov	r3, r5
    e2b2:	aa1d      	add	r2, sp, #116	; 0x74
    e2b4:	4621      	mov	r1, r4
    e2b6:	4658      	mov	r0, fp
    e2b8:	f001 fcd2 	bl	fc60 <_wcsrtombs_r>
    e2bc:	4285      	cmp	r5, r0
    e2be:	f040 837c 	bne.w	e9ba <_svfprintf_r+0x1b2a>
    e2c2:	9a05      	ldr	r2, [sp, #20]
    e2c4:	2300      	movs	r3, #0
    e2c6:	54a3      	strb	r3, [r4, r2]
    e2c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e2cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e2d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e2d4:	9303      	str	r3, [sp, #12]
    e2d6:	9202      	str	r2, [sp, #8]
    e2d8:	930f      	str	r3, [sp, #60]	; 0x3c
    e2da:	f7fe bfba 	b.w	d252 <_svfprintf_r+0x3c2>
    e2de:	212d      	movs	r1, #45	; 0x2d
    e2e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e2e4:	f7fe bfa4 	b.w	d230 <_svfprintf_r+0x3a0>
    e2e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e2ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    e2ec:	ebab 0b03 	sub.w	fp, fp, r3
    e2f0:	461a      	mov	r2, r3
    e2f2:	4658      	mov	r0, fp
    e2f4:	f7fd fd3c 	bl	bd70 <strncpy>
    e2f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e2fc:	4b05      	ldr	r3, [pc, #20]	; (e314 <_svfprintf_r+0x1484>)
    e2fe:	b10a      	cbz	r2, e304 <_svfprintf_r+0x1474>
    e300:	f10a 0a01 	add.w	sl, sl, #1
    e304:	f04f 0c00 	mov.w	ip, #0
    e308:	e628      	b.n	df5c <_svfprintf_r+0x10cc>
    e30a:	bf00      	nop
    e30c:	20000dbc 	.word	0x20000dbc
    e310:	20001340 	.word	0x20001340
    e314:	cccccccd 	.word	0xcccccccd
    e318:	ee1b 1a10 	vmov	r1, s22
    e31c:	aa24      	add	r2, sp, #144	; 0x90
    e31e:	4658      	mov	r0, fp
    e320:	f001 fcbe 	bl	fca0 <__ssprint_r>
    e324:	2800      	cmp	r0, #0
    e326:	f47f aa18 	bne.w	d75a <_svfprintf_r+0x8ca>
    e32a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e32c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e32e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e332:	e67c      	b.n	e02e <_svfprintf_r+0x119e>
    e334:	9b05      	ldr	r3, [sp, #20]
    e336:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e33a:	930f      	str	r3, [sp, #60]	; 0x3c
    e33c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e340:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e344:	9307      	str	r3, [sp, #28]
    e346:	f7fe bf84 	b.w	d252 <_svfprintf_r+0x3c2>
    e34a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e34c:	9805      	ldr	r0, [sp, #20]
    e34e:	1865      	adds	r5, r4, r1
    e350:	1a2d      	subs	r5, r5, r0
    e352:	1acc      	subs	r4, r1, r3
    e354:	42a5      	cmp	r5, r4
    e356:	bfa8      	it	ge
    e358:	4625      	movge	r5, r4
    e35a:	f7ff bb4d 	b.w	d9f8 <_svfprintf_r+0xb68>
    e35e:	9b08      	ldr	r3, [sp, #32]
    e360:	9904      	ldr	r1, [sp, #16]
    e362:	f853 2b04 	ldr.w	r2, [r3], #4
    e366:	9308      	str	r3, [sp, #32]
    e368:	8011      	strh	r1, [r2, #0]
    e36a:	464c      	mov	r4, r9
    e36c:	f7fe bdc2 	b.w	cef4 <_svfprintf_r+0x64>
    e370:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e374:	9308      	str	r3, [sp, #32]
    e376:	17d1      	asrs	r1, r2, #31
    e378:	460b      	mov	r3, r1
    e37a:	f7fe bfdb 	b.w	d334 <_svfprintf_r+0x4a4>
    e37e:	9a03      	ldr	r2, [sp, #12]
    e380:	2102      	movs	r1, #2
    e382:	ab22      	add	r3, sp, #136	; 0x88
    e384:	9301      	str	r3, [sp, #4]
    e386:	ab1d      	add	r3, sp, #116	; 0x74
    e388:	9300      	str	r3, [sp, #0]
    e38a:	4658      	mov	r0, fp
    e38c:	ab1b      	add	r3, sp, #108	; 0x6c
    e38e:	eeb0 0b4a 	vmov.f64	d0, d10
    e392:	9202      	str	r2, [sp, #8]
    e394:	f000 fdc8 	bl	ef28 <_dtoa_r>
    e398:	2d47      	cmp	r5, #71	; 0x47
    e39a:	9a02      	ldr	r2, [sp, #8]
    e39c:	4604      	mov	r4, r0
    e39e:	f000 8161 	beq.w	e664 <_svfprintf_r+0x17d4>
    e3a2:	2d46      	cmp	r5, #70	; 0x46
    e3a4:	4410      	add	r0, r2
    e3a6:	d105      	bne.n	e3b4 <_svfprintf_r+0x1524>
    e3a8:	7823      	ldrb	r3, [r4, #0]
    e3aa:	2b30      	cmp	r3, #48	; 0x30
    e3ac:	f000 826f 	beq.w	e88e <_svfprintf_r+0x19fe>
    e3b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e3b2:	4410      	add	r0, r2
    e3b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e3bc:	f040 8146 	bne.w	e64c <_svfprintf_r+0x17bc>
    e3c0:	4603      	mov	r3, r0
    e3c2:	1b1b      	subs	r3, r3, r4
    e3c4:	930e      	str	r3, [sp, #56]	; 0x38
    e3c6:	2d47      	cmp	r5, #71	; 0x47
    e3c8:	f000 8110 	beq.w	e5ec <_svfprintf_r+0x175c>
    e3cc:	2d46      	cmp	r5, #70	; 0x46
    e3ce:	f000 81b5 	beq.w	e73c <_svfprintf_r+0x18ac>
    e3d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e3d4:	930c      	str	r3, [sp, #48]	; 0x30
    e3d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e3d8:	2d41      	cmp	r5, #65	; 0x41
    e3da:	f103 33ff 	add.w	r3, r3, #4294967295
    e3de:	931b      	str	r3, [sp, #108]	; 0x6c
    e3e0:	f000 81e5 	beq.w	e7ae <_svfprintf_r+0x191e>
    e3e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    e3e8:	2100      	movs	r1, #0
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	bfb8      	it	lt
    e3ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    e3f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    e3f4:	bfba      	itte	lt
    e3f6:	f1c3 0301 	rsblt	r3, r3, #1
    e3fa:	222d      	movlt	r2, #45	; 0x2d
    e3fc:	222b      	movge	r2, #43	; 0x2b
    e3fe:	2b09      	cmp	r3, #9
    e400:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e404:	f340 81da 	ble.w	e7bc <_svfprintf_r+0x192c>
    e408:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    e40c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; e82c <_svfprintf_r+0x199c>
    e410:	462a      	mov	r2, r5
    e412:	4610      	mov	r0, r2
    e414:	fb8c 2103 	smull	r2, r1, ip, r3
    e418:	17da      	asrs	r2, r3, #31
    e41a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e41e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e422:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e426:	3130      	adds	r1, #48	; 0x30
    e428:	f800 1c01 	strb.w	r1, [r0, #-1]
    e42c:	4619      	mov	r1, r3
    e42e:	2963      	cmp	r1, #99	; 0x63
    e430:	4613      	mov	r3, r2
    e432:	f100 32ff 	add.w	r2, r0, #4294967295
    e436:	dcec      	bgt.n	e412 <_svfprintf_r+0x1582>
    e438:	3330      	adds	r3, #48	; 0x30
    e43a:	b2d9      	uxtb	r1, r3
    e43c:	1e83      	subs	r3, r0, #2
    e43e:	429d      	cmp	r5, r3
    e440:	f802 1c01 	strb.w	r1, [r2, #-1]
    e444:	f240 828b 	bls.w	e95e <_svfprintf_r+0x1ace>
    e448:	4613      	mov	r3, r2
    e44a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e44e:	e001      	b.n	e454 <_svfprintf_r+0x15c4>
    e450:	f813 1b01 	ldrb.w	r1, [r3], #1
    e454:	f802 1b01 	strb.w	r1, [r2], #1
    e458:	429d      	cmp	r5, r3
    e45a:	d1f9      	bne.n	e450 <_svfprintf_r+0x15c0>
    e45c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    e460:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e464:	1a1b      	subs	r3, r3, r0
    e466:	4413      	add	r3, r2
    e468:	aa1e      	add	r2, sp, #120	; 0x78
    e46a:	1a9b      	subs	r3, r3, r2
    e46c:	9314      	str	r3, [sp, #80]	; 0x50
    e46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e470:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e472:	2b01      	cmp	r3, #1
    e474:	441a      	add	r2, r3
    e476:	9205      	str	r2, [sp, #20]
    e478:	f340 8203 	ble.w	e882 <_svfprintf_r+0x19f2>
    e47c:	9b05      	ldr	r3, [sp, #20]
    e47e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e480:	4413      	add	r3, r2
    e482:	9305      	str	r3, [sp, #20]
    e484:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    e488:	9a05      	ldr	r2, [sp, #20]
    e48a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    e48e:	2300      	movs	r3, #0
    e490:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e494:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e498:	930f      	str	r3, [sp, #60]	; 0x3c
    e49a:	9202      	str	r2, [sp, #8]
    e49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e49e:	2b00      	cmp	r3, #0
    e4a0:	f040 80b1 	bne.w	e606 <_svfprintf_r+0x1776>
    e4a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e4a8:	9303      	str	r3, [sp, #12]
    e4aa:	f7fe bed2 	b.w	d252 <_svfprintf_r+0x3c2>
    e4ae:	4620      	mov	r0, r4
    e4b0:	f7fd ff06 	bl	c2c0 <strlen>
    e4b4:	4602      	mov	r2, r0
    e4b6:	9005      	str	r0, [sp, #20]
    e4b8:	f7fe bf20 	b.w	d2fc <_svfprintf_r+0x46c>
    e4bc:	ee1b 1a10 	vmov	r1, s22
    e4c0:	aa24      	add	r2, sp, #144	; 0x90
    e4c2:	4658      	mov	r0, fp
    e4c4:	f001 fbec 	bl	fca0 <__ssprint_r>
    e4c8:	f7fe bded 	b.w	d0a6 <_svfprintf_r+0x216>
    e4cc:	1c59      	adds	r1, r3, #1
    e4ce:	4658      	mov	r0, fp
    e4d0:	f7fc fb4e 	bl	ab70 <_malloc_r>
    e4d4:	4604      	mov	r4, r0
    e4d6:	2800      	cmp	r0, #0
    e4d8:	f000 81ca 	beq.w	e870 <_svfprintf_r+0x19e0>
    e4dc:	9007      	str	r0, [sp, #28]
    e4de:	e6e0      	b.n	e2a2 <_svfprintf_r+0x1412>
    e4e0:	ee1b 1a10 	vmov	r1, s22
    e4e4:	aa24      	add	r2, sp, #144	; 0x90
    e4e6:	4658      	mov	r0, fp
    e4e8:	f001 fbda 	bl	fca0 <__ssprint_r>
    e4ec:	2800      	cmp	r0, #0
    e4ee:	f47f a934 	bne.w	d75a <_svfprintf_r+0x8ca>
    e4f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e4f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e4f8:	f7ff ba49 	b.w	d98e <_svfprintf_r+0xafe>
    e4fc:	ee1b 1a10 	vmov	r1, s22
    e500:	aa24      	add	r2, sp, #144	; 0x90
    e502:	4658      	mov	r0, fp
    e504:	f001 fbcc 	bl	fca0 <__ssprint_r>
    e508:	2800      	cmp	r0, #0
    e50a:	f47f a926 	bne.w	d75a <_svfprintf_r+0x8ca>
    e50e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e512:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e514:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e518:	e649      	b.n	e1ae <_svfprintf_r+0x131e>
    e51a:	2306      	movs	r3, #6
    e51c:	9303      	str	r3, [sp, #12]
    e51e:	f7ff bb83 	b.w	dc28 <_svfprintf_r+0xd98>
    e522:	9b03      	ldr	r3, [sp, #12]
    e524:	2102      	movs	r1, #2
    e526:	1c5a      	adds	r2, r3, #1
    e528:	e72b      	b.n	e382 <_svfprintf_r+0x14f2>
    e52a:	9a03      	ldr	r2, [sp, #12]
    e52c:	2103      	movs	r1, #3
    e52e:	e728      	b.n	e382 <_svfprintf_r+0x14f2>
    e530:	a81b      	add	r0, sp, #108	; 0x6c
    e532:	eeb0 0b4a 	vmov.f64	d0, d10
    e536:	f000 fbcb 	bl	ecd0 <frexp>
    e53a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e53e:	ee20 0b07 	vmul.f64	d0, d0, d7
    e542:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e54a:	d101      	bne.n	e550 <_svfprintf_r+0x16c0>
    e54c:	2301      	movs	r3, #1
    e54e:	931b      	str	r3, [sp, #108]	; 0x6c
    e550:	48b3      	ldr	r0, [pc, #716]	; (e820 <_svfprintf_r+0x1990>)
    e552:	9b03      	ldr	r3, [sp, #12]
    e554:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    e558:	3b01      	subs	r3, #1
    e55a:	4622      	mov	r2, r4
    e55c:	e004      	b.n	e568 <_svfprintf_r+0x16d8>
    e55e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e566:	d013      	beq.n	e590 <_svfprintf_r+0x1700>
    e568:	ee20 0b05 	vmul.f64	d0, d0, d5
    e56c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    e570:	f1b3 3fff 	cmp.w	r3, #4294967295
    e574:	ee17 1a90 	vmov	r1, s15
    e578:	5c41      	ldrb	r1, [r0, r1]
    e57a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    e57e:	4694      	mov	ip, r2
    e580:	ee30 0b46 	vsub.f64	d0, d0, d6
    e584:	f802 1b01 	strb.w	r1, [r2], #1
    e588:	4619      	mov	r1, r3
    e58a:	f103 33ff 	add.w	r3, r3, #4294967295
    e58e:	d1e6      	bne.n	e55e <_svfprintf_r+0x16ce>
    e590:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    e594:	eeb4 0bc6 	vcmpe.f64	d0, d6
    e598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e59c:	f300 8148 	bgt.w	e830 <_svfprintf_r+0x19a0>
    e5a0:	eeb4 0b46 	vcmp.f64	d0, d6
    e5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5a8:	d104      	bne.n	e5b4 <_svfprintf_r+0x1724>
    e5aa:	ee17 3a90 	vmov	r3, s15
    e5ae:	07db      	lsls	r3, r3, #31
    e5b0:	f100 813e 	bmi.w	e830 <_svfprintf_r+0x19a0>
    e5b4:	2900      	cmp	r1, #0
    e5b6:	db06      	blt.n	e5c6 <_svfprintf_r+0x1736>
    e5b8:	1c4b      	adds	r3, r1, #1
    e5ba:	4413      	add	r3, r2
    e5bc:	2130      	movs	r1, #48	; 0x30
    e5be:	f802 1b01 	strb.w	r1, [r2], #1
    e5c2:	4293      	cmp	r3, r2
    e5c4:	d1fb      	bne.n	e5be <_svfprintf_r+0x172e>
    e5c6:	1b13      	subs	r3, r2, r4
    e5c8:	930e      	str	r3, [sp, #56]	; 0x38
    e5ca:	e6fc      	b.n	e3c6 <_svfprintf_r+0x1536>
    e5cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e5d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    e5d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    e5d8:	9613      	str	r6, [sp, #76]	; 0x4c
    e5da:	18e3      	adds	r3, r4, r3
    e5dc:	429d      	cmp	r5, r3
    e5de:	4629      	mov	r1, r5
    e5e0:	bf28      	it	cs
    e5e2:	4619      	movcs	r1, r3
    e5e4:	4682      	mov	sl, r0
    e5e6:	9105      	str	r1, [sp, #20]
    e5e8:	f7ff b9d8 	b.w	d99c <_svfprintf_r+0xb0c>
    e5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e5ee:	930c      	str	r3, [sp, #48]	; 0x30
    e5f0:	1cda      	adds	r2, r3, #3
    e5f2:	db02      	blt.n	e5fa <_svfprintf_r+0x176a>
    e5f4:	9a03      	ldr	r2, [sp, #12]
    e5f6:	4293      	cmp	r3, r2
    e5f8:	dd0c      	ble.n	e614 <_svfprintf_r+0x1784>
    e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5fc:	3b02      	subs	r3, #2
    e5fe:	930b      	str	r3, [sp, #44]	; 0x2c
    e600:	f023 0520 	bic.w	r5, r3, #32
    e604:	e6e7      	b.n	e3d6 <_svfprintf_r+0x1546>
    e606:	212d      	movs	r1, #45	; 0x2d
    e608:	2300      	movs	r3, #0
    e60a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e60e:	9303      	str	r3, [sp, #12]
    e610:	f7fe be22 	b.w	d258 <_svfprintf_r+0x3c8>
    e614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e618:	4293      	cmp	r3, r2
    e61a:	f2c0 80bd 	blt.w	e798 <_svfprintf_r+0x1908>
    e61e:	07f0      	lsls	r0, r6, #31
    e620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e622:	f140 8132 	bpl.w	e88a <_svfprintf_r+0x19fa>
    e626:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e628:	4413      	add	r3, r2
    e62a:	9305      	str	r3, [sp, #20]
    e62c:	0571      	lsls	r1, r6, #21
    e62e:	d503      	bpl.n	e638 <_svfprintf_r+0x17a8>
    e630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e632:	2b00      	cmp	r3, #0
    e634:	f300 8135 	bgt.w	e8a2 <_svfprintf_r+0x1a12>
    e638:	9b05      	ldr	r3, [sp, #20]
    e63a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e63e:	9302      	str	r3, [sp, #8]
    e640:	2367      	movs	r3, #103	; 0x67
    e642:	930b      	str	r3, [sp, #44]	; 0x2c
    e644:	2300      	movs	r3, #0
    e646:	930f      	str	r3, [sp, #60]	; 0x3c
    e648:	930d      	str	r3, [sp, #52]	; 0x34
    e64a:	e727      	b.n	e49c <_svfprintf_r+0x160c>
    e64c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e64e:	4283      	cmp	r3, r0
    e650:	f4bf aeb7 	bcs.w	e3c2 <_svfprintf_r+0x1532>
    e654:	2130      	movs	r1, #48	; 0x30
    e656:	1c5a      	adds	r2, r3, #1
    e658:	9222      	str	r2, [sp, #136]	; 0x88
    e65a:	7019      	strb	r1, [r3, #0]
    e65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e65e:	4298      	cmp	r0, r3
    e660:	d8f9      	bhi.n	e656 <_svfprintf_r+0x17c6>
    e662:	e6ae      	b.n	e3c2 <_svfprintf_r+0x1532>
    e664:	07f3      	lsls	r3, r6, #31
    e666:	f100 80a7 	bmi.w	e7b8 <_svfprintf_r+0x1928>
    e66a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e66c:	e6a9      	b.n	e3c2 <_svfprintf_r+0x1532>
    e66e:	aa24      	add	r2, sp, #144	; 0x90
    e670:	4658      	mov	r0, fp
    e672:	9105      	str	r1, [sp, #20]
    e674:	f001 fb14 	bl	fca0 <__ssprint_r>
    e678:	2800      	cmp	r0, #0
    e67a:	f47f a86e 	bne.w	d75a <_svfprintf_r+0x8ca>
    e67e:	f896 c000 	ldrb.w	ip, [r6]
    e682:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e684:	9905      	ldr	r1, [sp, #20]
    e686:	a827      	add	r0, sp, #156	; 0x9c
    e688:	4465      	add	r5, ip
    e68a:	f7ff bbec 	b.w	de66 <_svfprintf_r+0xfd6>
    e68e:	ee1b 1a10 	vmov	r1, s22
    e692:	aa24      	add	r2, sp, #144	; 0x90
    e694:	4658      	mov	r0, fp
    e696:	f001 fb03 	bl	fca0 <__ssprint_r>
    e69a:	2800      	cmp	r0, #0
    e69c:	f47f a85d 	bne.w	d75a <_svfprintf_r+0x8ca>
    e6a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e6a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e6a6:	f7ff b96b 	b.w	d980 <_svfprintf_r+0xaf0>
    e6aa:	2378      	movs	r3, #120	; 0x78
    e6ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e6b0:	2330      	movs	r3, #48	; 0x30
    e6b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e6b6:	9b03      	ldr	r3, [sp, #12]
    e6b8:	2b63      	cmp	r3, #99	; 0x63
    e6ba:	f048 0602 	orr.w	r6, r8, #2
    e6be:	f300 80a6 	bgt.w	e80e <_svfprintf_r+0x197e>
    e6c2:	2300      	movs	r3, #0
    e6c4:	9307      	str	r3, [sp, #28]
    e6c6:	ac37      	add	r4, sp, #220	; 0xdc
    e6c8:	ee18 3a90 	vmov	r3, s17
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e6d2:	db2b      	blt.n	e72c <_svfprintf_r+0x189c>
    e6d4:	eeb0 ab48 	vmov.f64	d10, d8
    e6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6da:	f023 0520 	bic.w	r5, r3, #32
    e6de:	2300      	movs	r3, #0
    e6e0:	9309      	str	r3, [sp, #36]	; 0x24
    e6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e6e4:	2b61      	cmp	r3, #97	; 0x61
    e6e6:	f47f aaad 	bne.w	dc44 <_svfprintf_r+0xdb4>
    e6ea:	eeb0 0b4a 	vmov.f64	d0, d10
    e6ee:	a81b      	add	r0, sp, #108	; 0x6c
    e6f0:	f000 faee 	bl	ecd0 <frexp>
    e6f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e6f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    e6fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e704:	d101      	bne.n	e70a <_svfprintf_r+0x187a>
    e706:	2301      	movs	r3, #1
    e708:	931b      	str	r3, [sp, #108]	; 0x6c
    e70a:	4846      	ldr	r0, [pc, #280]	; (e824 <_svfprintf_r+0x1994>)
    e70c:	e721      	b.n	e552 <_svfprintf_r+0x16c2>
    e70e:	ee1b 1a10 	vmov	r1, s22
    e712:	aa24      	add	r2, sp, #144	; 0x90
    e714:	4658      	mov	r0, fp
    e716:	f001 fac3 	bl	fca0 <__ssprint_r>
    e71a:	2800      	cmp	r0, #0
    e71c:	f47f a81d 	bne.w	d75a <_svfprintf_r+0x8ca>
    e720:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e722:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e724:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e728:	f7ff b94e 	b.w	d9c8 <_svfprintf_r+0xb38>
    e72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e72e:	f023 0520 	bic.w	r5, r3, #32
    e732:	232d      	movs	r3, #45	; 0x2d
    e734:	9309      	str	r3, [sp, #36]	; 0x24
    e736:	eeb1 ab48 	vneg.f64	d10, d8
    e73a:	e7d2      	b.n	e6e2 <_svfprintf_r+0x1852>
    e73c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e73e:	920c      	str	r2, [sp, #48]	; 0x30
    e740:	2a00      	cmp	r2, #0
    e742:	f006 0301 	and.w	r3, r6, #1
    e746:	f340 810d 	ble.w	e964 <_svfprintf_r+0x1ad4>
    e74a:	9903      	ldr	r1, [sp, #12]
    e74c:	430b      	orrs	r3, r1
    e74e:	f040 80cf 	bne.w	e8f0 <_svfprintf_r+0x1a60>
    e752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e754:	9305      	str	r3, [sp, #20]
    e756:	2366      	movs	r3, #102	; 0x66
    e758:	930b      	str	r3, [sp, #44]	; 0x2c
    e75a:	0572      	lsls	r2, r6, #21
    e75c:	f100 80a3 	bmi.w	e8a6 <_svfprintf_r+0x1a16>
    e760:	9b05      	ldr	r3, [sp, #20]
    e762:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e766:	9302      	str	r3, [sp, #8]
    e768:	e76c      	b.n	e644 <_svfprintf_r+0x17b4>
    e76a:	ee1b 1a10 	vmov	r1, s22
    e76e:	aa24      	add	r2, sp, #144	; 0x90
    e770:	4658      	mov	r0, fp
    e772:	f001 fa95 	bl	fca0 <__ssprint_r>
    e776:	2800      	cmp	r0, #0
    e778:	f47e afef 	bne.w	d75a <_svfprintf_r+0x8ca>
    e77c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e780:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e782:	1b1c      	subs	r4, r3, r4
    e784:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e788:	f7ff b936 	b.w	d9f8 <_svfprintf_r+0xb68>
    e78c:	2358      	movs	r3, #88	; 0x58
    e78e:	e78d      	b.n	e6ac <_svfprintf_r+0x181c>
    e790:	2200      	movs	r2, #0
    e792:	9203      	str	r2, [sp, #12]
    e794:	f7fe bbda 	b.w	cf4c <_svfprintf_r+0xbc>
    e798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e79a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e79c:	189a      	adds	r2, r3, r2
    e79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e7a0:	9205      	str	r2, [sp, #20]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	f340 80ab 	ble.w	e8fe <_svfprintf_r+0x1a6e>
    e7a8:	2367      	movs	r3, #103	; 0x67
    e7aa:	930b      	str	r3, [sp, #44]	; 0x2c
    e7ac:	e7d5      	b.n	e75a <_svfprintf_r+0x18ca>
    e7ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e7b0:	320f      	adds	r2, #15
    e7b2:	b2d2      	uxtb	r2, r2
    e7b4:	2101      	movs	r1, #1
    e7b6:	e618      	b.n	e3ea <_svfprintf_r+0x155a>
    e7b8:	18a0      	adds	r0, r4, r2
    e7ba:	e5fb      	b.n	e3b4 <_svfprintf_r+0x1524>
    e7bc:	2900      	cmp	r1, #0
    e7be:	f040 80a8 	bne.w	e912 <_svfprintf_r+0x1a82>
    e7c2:	2230      	movs	r2, #48	; 0x30
    e7c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    e7c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    e7cc:	3330      	adds	r3, #48	; 0x30
    e7ce:	f802 3b01 	strb.w	r3, [r2], #1
    e7d2:	ab1e      	add	r3, sp, #120	; 0x78
    e7d4:	1ad3      	subs	r3, r2, r3
    e7d6:	9314      	str	r3, [sp, #80]	; 0x50
    e7d8:	e649      	b.n	e46e <_svfprintf_r+0x15de>
    e7da:	3301      	adds	r3, #1
    e7dc:	4912      	ldr	r1, [pc, #72]	; (e828 <_svfprintf_r+0x1998>)
    e7de:	f8ca 5004 	str.w	r5, [sl, #4]
    e7e2:	442a      	add	r2, r5
    e7e4:	2b07      	cmp	r3, #7
    e7e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7ea:	f8ca 1000 	str.w	r1, [sl]
    e7ee:	f77f ac33 	ble.w	e058 <_svfprintf_r+0x11c8>
    e7f2:	ee1b 1a10 	vmov	r1, s22
    e7f6:	aa24      	add	r2, sp, #144	; 0x90
    e7f8:	4658      	mov	r0, fp
    e7fa:	f001 fa51 	bl	fca0 <__ssprint_r>
    e7fe:	2800      	cmp	r0, #0
    e800:	f47e afab 	bne.w	d75a <_svfprintf_r+0x8ca>
    e804:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e808:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e80c:	e426      	b.n	e05c <_svfprintf_r+0x11cc>
    e80e:	1c59      	adds	r1, r3, #1
    e810:	4658      	mov	r0, fp
    e812:	f7fc f9ad 	bl	ab70 <_malloc_r>
    e816:	4604      	mov	r4, r0
    e818:	b350      	cbz	r0, e870 <_svfprintf_r+0x19e0>
    e81a:	9007      	str	r0, [sp, #28]
    e81c:	e754      	b.n	e6c8 <_svfprintf_r+0x1838>
    e81e:	bf00      	nop
    e820:	20000da0 	.word	0x20000da0
    e824:	20000d8c 	.word	0x20000d8c
    e828:	20001340 	.word	0x20001340
    e82c:	66666667 	.word	0x66666667
    e830:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    e834:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    e838:	f890 c00f 	ldrb.w	ip, [r0, #15]
    e83c:	4561      	cmp	r1, ip
    e83e:	4613      	mov	r3, r2
    e840:	d10a      	bne.n	e858 <_svfprintf_r+0x19c8>
    e842:	f04f 0e30 	mov.w	lr, #48	; 0x30
    e846:	f803 ec01 	strb.w	lr, [r3, #-1]
    e84a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e84c:	1e59      	subs	r1, r3, #1
    e84e:	9122      	str	r1, [sp, #136]	; 0x88
    e850:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    e854:	458c      	cmp	ip, r1
    e856:	d0f6      	beq.n	e846 <_svfprintf_r+0x19b6>
    e858:	2939      	cmp	r1, #57	; 0x39
    e85a:	bf16      	itet	ne
    e85c:	3101      	addne	r1, #1
    e85e:	7a81      	ldrbeq	r1, [r0, #10]
    e860:	b2c9      	uxtbne	r1, r1
    e862:	f803 1c01 	strb.w	r1, [r3, #-1]
    e866:	e6ae      	b.n	e5c6 <_svfprintf_r+0x1736>
    e868:	2300      	movs	r3, #0
    e86a:	4690      	mov	r8, r2
    e86c:	9307      	str	r3, [sp, #28]
    e86e:	e760      	b.n	e732 <_svfprintf_r+0x18a2>
    e870:	ee1b 2a10 	vmov	r2, s22
    e874:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e87c:	8193      	strh	r3, [r2, #12]
    e87e:	f7fe bc16 	b.w	d0ae <_svfprintf_r+0x21e>
    e882:	07f5      	lsls	r5, r6, #31
    e884:	f57f adfe 	bpl.w	e484 <_svfprintf_r+0x15f4>
    e888:	e5f8      	b.n	e47c <_svfprintf_r+0x15ec>
    e88a:	9305      	str	r3, [sp, #20]
    e88c:	e6ce      	b.n	e62c <_svfprintf_r+0x179c>
    e88e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e896:	f43f ad8b 	beq.w	e3b0 <_svfprintf_r+0x1520>
    e89a:	f1c2 0201 	rsb	r2, r2, #1
    e89e:	921b      	str	r2, [sp, #108]	; 0x6c
    e8a0:	e587      	b.n	e3b2 <_svfprintf_r+0x1522>
    e8a2:	2367      	movs	r3, #103	; 0x67
    e8a4:	930b      	str	r3, [sp, #44]	; 0x2c
    e8a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e8a8:	780b      	ldrb	r3, [r1, #0]
    e8aa:	2bff      	cmp	r3, #255	; 0xff
    e8ac:	d079      	beq.n	e9a2 <_svfprintf_r+0x1b12>
    e8ae:	2500      	movs	r5, #0
    e8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e8b2:	4628      	mov	r0, r5
    e8b4:	e003      	b.n	e8be <_svfprintf_r+0x1a2e>
    e8b6:	3001      	adds	r0, #1
    e8b8:	3101      	adds	r1, #1
    e8ba:	2bff      	cmp	r3, #255	; 0xff
    e8bc:	d008      	beq.n	e8d0 <_svfprintf_r+0x1a40>
    e8be:	4293      	cmp	r3, r2
    e8c0:	da06      	bge.n	e8d0 <_svfprintf_r+0x1a40>
    e8c2:	1ad2      	subs	r2, r2, r3
    e8c4:	784b      	ldrb	r3, [r1, #1]
    e8c6:	2b00      	cmp	r3, #0
    e8c8:	d1f5      	bne.n	e8b6 <_svfprintf_r+0x1a26>
    e8ca:	780b      	ldrb	r3, [r1, #0]
    e8cc:	3501      	adds	r5, #1
    e8ce:	e7f4      	b.n	e8ba <_svfprintf_r+0x1a2a>
    e8d0:	920c      	str	r2, [sp, #48]	; 0x30
    e8d2:	9113      	str	r1, [sp, #76]	; 0x4c
    e8d4:	900d      	str	r0, [sp, #52]	; 0x34
    e8d6:	950f      	str	r5, [sp, #60]	; 0x3c
    e8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    e8de:	4413      	add	r3, r2
    e8e0:	9a05      	ldr	r2, [sp, #20]
    e8e2:	fb01 2303 	mla	r3, r1, r3, r2
    e8e6:	9305      	str	r3, [sp, #20]
    e8e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e8ec:	9302      	str	r3, [sp, #8]
    e8ee:	e5d5      	b.n	e49c <_svfprintf_r+0x160c>
    e8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e8f2:	18d3      	adds	r3, r2, r3
    e8f4:	4419      	add	r1, r3
    e8f6:	2366      	movs	r3, #102	; 0x66
    e8f8:	9105      	str	r1, [sp, #20]
    e8fa:	930b      	str	r3, [sp, #44]	; 0x2c
    e8fc:	e72d      	b.n	e75a <_svfprintf_r+0x18ca>
    e8fe:	f1c3 0301 	rsb	r3, r3, #1
    e902:	441a      	add	r2, r3
    e904:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e908:	9302      	str	r3, [sp, #8]
    e90a:	2367      	movs	r3, #103	; 0x67
    e90c:	9205      	str	r2, [sp, #20]
    e90e:	930b      	str	r3, [sp, #44]	; 0x2c
    e910:	e698      	b.n	e644 <_svfprintf_r+0x17b4>
    e912:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e916:	e759      	b.n	e7cc <_svfprintf_r+0x193c>
    e918:	9b03      	ldr	r3, [sp, #12]
    e91a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e91e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e922:	9305      	str	r3, [sp, #20]
    e924:	e4b4      	b.n	e290 <_svfprintf_r+0x1400>
    e926:	ee18 3a90 	vmov	r3, s17
    e92a:	2b00      	cmp	r3, #0
    e92c:	bfb4      	ite	lt
    e92e:	212d      	movlt	r1, #45	; 0x2d
    e930:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    e934:	4c25      	ldr	r4, [pc, #148]	; (e9cc <_svfprintf_r+0x1b3c>)
    e936:	4b26      	ldr	r3, [pc, #152]	; (e9d0 <_svfprintf_r+0x1b40>)
    e938:	bfb8      	it	lt
    e93a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    e93e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e942:	f7fe bc79 	b.w	d238 <_svfprintf_r+0x3a8>
    e946:	9b03      	ldr	r3, [sp, #12]
    e948:	9302      	str	r3, [sp, #8]
    e94a:	9305      	str	r3, [sp, #20]
    e94c:	2373      	movs	r3, #115	; 0x73
    e94e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e952:	9003      	str	r0, [sp, #12]
    e954:	900f      	str	r0, [sp, #60]	; 0x3c
    e956:	900d      	str	r0, [sp, #52]	; 0x34
    e958:	930b      	str	r3, [sp, #44]	; 0x2c
    e95a:	f7fe bc7a 	b.w	d252 <_svfprintf_r+0x3c2>
    e95e:	2302      	movs	r3, #2
    e960:	9314      	str	r3, [sp, #80]	; 0x50
    e962:	e584      	b.n	e46e <_svfprintf_r+0x15de>
    e964:	9a03      	ldr	r2, [sp, #12]
    e966:	4313      	orrs	r3, r2
    e968:	d105      	bne.n	e976 <_svfprintf_r+0x1ae6>
    e96a:	2301      	movs	r3, #1
    e96c:	2266      	movs	r2, #102	; 0x66
    e96e:	9302      	str	r3, [sp, #8]
    e970:	920b      	str	r2, [sp, #44]	; 0x2c
    e972:	9305      	str	r3, [sp, #20]
    e974:	e666      	b.n	e644 <_svfprintf_r+0x17b4>
    e976:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e978:	3301      	adds	r3, #1
    e97a:	441a      	add	r2, r3
    e97c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e980:	9302      	str	r3, [sp, #8]
    e982:	2366      	movs	r3, #102	; 0x66
    e984:	9205      	str	r2, [sp, #20]
    e986:	930b      	str	r3, [sp, #44]	; 0x2c
    e988:	e65c      	b.n	e644 <_svfprintf_r+0x17b4>
    e98a:	9a08      	ldr	r2, [sp, #32]
    e98c:	f899 3001 	ldrb.w	r3, [r9, #1]
    e990:	4689      	mov	r9, r1
    e992:	f852 1b04 	ldr.w	r1, [r2], #4
    e996:	9208      	str	r2, [sp, #32]
    e998:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    e99c:	9103      	str	r1, [sp, #12]
    e99e:	f7fe bad3 	b.w	cf48 <_svfprintf_r+0xb8>
    e9a2:	2300      	movs	r3, #0
    e9a4:	930f      	str	r3, [sp, #60]	; 0x3c
    e9a6:	930d      	str	r3, [sp, #52]	; 0x34
    e9a8:	e796      	b.n	e8d8 <_svfprintf_r+0x1a48>
    e9aa:	230c      	movs	r3, #12
    e9ac:	f8cb 3000 	str.w	r3, [fp]
    e9b0:	f04f 33ff 	mov.w	r3, #4294967295
    e9b4:	9304      	str	r3, [sp, #16]
    e9b6:	f7fe bb81 	b.w	d0bc <_svfprintf_r+0x22c>
    e9ba:	ee1b 2a10 	vmov	r2, s22
    e9be:	8993      	ldrh	r3, [r2, #12]
    e9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e9c4:	8193      	strh	r3, [r2, #12]
    e9c6:	f7fe bec8 	b.w	d75a <_svfprintf_r+0x8ca>
    e9ca:	bf00      	nop
    e9cc:	20000d84 	.word	0x20000d84
    e9d0:	20000d88 	.word	0x20000d88

0000e9d4 <_fclose_r>:
    e9d4:	b570      	push	{r4, r5, r6, lr}
    e9d6:	2900      	cmp	r1, #0
    e9d8:	d04b      	beq.n	ea72 <_fclose_r+0x9e>
    e9da:	4606      	mov	r6, r0
    e9dc:	460c      	mov	r4, r1
    e9de:	b110      	cbz	r0, e9e6 <_fclose_r+0x12>
    e9e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d048      	beq.n	ea78 <_fclose_r+0xa4>
    e9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e9e8:	07d8      	lsls	r0, r3, #31
    e9ea:	d534      	bpl.n	ea56 <_fclose_r+0x82>
    e9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d03e      	beq.n	ea72 <_fclose_r+0x9e>
    e9f4:	4621      	mov	r1, r4
    e9f6:	4630      	mov	r0, r6
    e9f8:	f000 f850 	bl	ea9c <__sflush_r>
    e9fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e9fe:	4605      	mov	r5, r0
    ea00:	b133      	cbz	r3, ea10 <_fclose_r+0x3c>
    ea02:	69e1      	ldr	r1, [r4, #28]
    ea04:	4630      	mov	r0, r6
    ea06:	4798      	blx	r3
    ea08:	2800      	cmp	r0, #0
    ea0a:	bfb8      	it	lt
    ea0c:	f04f 35ff 	movlt.w	r5, #4294967295
    ea10:	89a3      	ldrh	r3, [r4, #12]
    ea12:	061a      	lsls	r2, r3, #24
    ea14:	d43c      	bmi.n	ea90 <_fclose_r+0xbc>
    ea16:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ea18:	b141      	cbz	r1, ea2c <_fclose_r+0x58>
    ea1a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ea1e:	4299      	cmp	r1, r3
    ea20:	d002      	beq.n	ea28 <_fclose_r+0x54>
    ea22:	4630      	mov	r0, r6
    ea24:	f7fd fd4e 	bl	c4c4 <_free_r>
    ea28:	2300      	movs	r3, #0
    ea2a:	6323      	str	r3, [r4, #48]	; 0x30
    ea2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ea2e:	b121      	cbz	r1, ea3a <_fclose_r+0x66>
    ea30:	4630      	mov	r0, r6
    ea32:	f7fd fd47 	bl	c4c4 <_free_r>
    ea36:	2300      	movs	r3, #0
    ea38:	6463      	str	r3, [r4, #68]	; 0x44
    ea3a:	f7fc ffcf 	bl	b9dc <__sfp_lock_acquire>
    ea3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ea40:	2200      	movs	r2, #0
    ea42:	07db      	lsls	r3, r3, #31
    ea44:	81a2      	strh	r2, [r4, #12]
    ea46:	d51f      	bpl.n	ea88 <_fclose_r+0xb4>
    ea48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea4a:	f7fd fa5b 	bl	bf04 <__retarget_lock_close_recursive>
    ea4e:	f7fc ffcb 	bl	b9e8 <__sfp_lock_release>
    ea52:	4628      	mov	r0, r5
    ea54:	bd70      	pop	{r4, r5, r6, pc}
    ea56:	89a3      	ldrh	r3, [r4, #12]
    ea58:	0599      	lsls	r1, r3, #22
    ea5a:	d4cb      	bmi.n	e9f4 <_fclose_r+0x20>
    ea5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea5e:	f7fd fa53 	bl	bf08 <__retarget_lock_acquire_recursive>
    ea62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ea66:	2b00      	cmp	r3, #0
    ea68:	d1c4      	bne.n	e9f4 <_fclose_r+0x20>
    ea6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    ea6c:	f015 0501 	ands.w	r5, r5, #1
    ea70:	d005      	beq.n	ea7e <_fclose_r+0xaa>
    ea72:	2500      	movs	r5, #0
    ea74:	4628      	mov	r0, r5
    ea76:	bd70      	pop	{r4, r5, r6, pc}
    ea78:	f7fc ff92 	bl	b9a0 <__sinit>
    ea7c:	e7b3      	b.n	e9e6 <_fclose_r+0x12>
    ea7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea80:	f7fd fa44 	bl	bf0c <__retarget_lock_release_recursive>
    ea84:	4628      	mov	r0, r5
    ea86:	bd70      	pop	{r4, r5, r6, pc}
    ea88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea8a:	f7fd fa3f 	bl	bf0c <__retarget_lock_release_recursive>
    ea8e:	e7db      	b.n	ea48 <_fclose_r+0x74>
    ea90:	6921      	ldr	r1, [r4, #16]
    ea92:	4630      	mov	r0, r6
    ea94:	f7fd fd16 	bl	c4c4 <_free_r>
    ea98:	e7bd      	b.n	ea16 <_fclose_r+0x42>
    ea9a:	bf00      	nop

0000ea9c <__sflush_r>:
    ea9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaa4:	460c      	mov	r4, r1
    eaa6:	0711      	lsls	r1, r2, #28
    eaa8:	4680      	mov	r8, r0
    eaaa:	d447      	bmi.n	eb3c <__sflush_r+0xa0>
    eaac:	6863      	ldr	r3, [r4, #4]
    eaae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    eab2:	2b00      	cmp	r3, #0
    eab4:	81a2      	strh	r2, [r4, #12]
    eab6:	dd5e      	ble.n	eb76 <__sflush_r+0xda>
    eab8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    eaba:	2d00      	cmp	r5, #0
    eabc:	d058      	beq.n	eb70 <__sflush_r+0xd4>
    eabe:	2300      	movs	r3, #0
    eac0:	f8d8 6000 	ldr.w	r6, [r8]
    eac4:	f8c8 3000 	str.w	r3, [r8]
    eac8:	b293      	uxth	r3, r2
    eaca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    eace:	d156      	bne.n	eb7e <__sflush_r+0xe2>
    ead0:	2301      	movs	r3, #1
    ead2:	69e1      	ldr	r1, [r4, #28]
    ead4:	4640      	mov	r0, r8
    ead6:	47a8      	blx	r5
    ead8:	1c43      	adds	r3, r0, #1
    eada:	d067      	beq.n	ebac <__sflush_r+0x110>
    eadc:	89a3      	ldrh	r3, [r4, #12]
    eade:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    eae0:	075f      	lsls	r7, r3, #29
    eae2:	d505      	bpl.n	eaf0 <__sflush_r+0x54>
    eae4:	6863      	ldr	r3, [r4, #4]
    eae6:	1ac0      	subs	r0, r0, r3
    eae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eaea:	b10b      	cbz	r3, eaf0 <__sflush_r+0x54>
    eaec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    eaee:	1ac0      	subs	r0, r0, r3
    eaf0:	69e1      	ldr	r1, [r4, #28]
    eaf2:	4602      	mov	r2, r0
    eaf4:	2300      	movs	r3, #0
    eaf6:	4640      	mov	r0, r8
    eaf8:	47a8      	blx	r5
    eafa:	1c41      	adds	r1, r0, #1
    eafc:	d141      	bne.n	eb82 <__sflush_r+0xe6>
    eafe:	f8d8 3000 	ldr.w	r3, [r8]
    eb02:	2b00      	cmp	r3, #0
    eb04:	d03d      	beq.n	eb82 <__sflush_r+0xe6>
    eb06:	2b1d      	cmp	r3, #29
    eb08:	d001      	beq.n	eb0e <__sflush_r+0x72>
    eb0a:	2b16      	cmp	r3, #22
    eb0c:	d156      	bne.n	ebbc <__sflush_r+0x120>
    eb0e:	89a3      	ldrh	r3, [r4, #12]
    eb10:	6922      	ldr	r2, [r4, #16]
    eb12:	6022      	str	r2, [r4, #0]
    eb14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    eb18:	2100      	movs	r1, #0
    eb1a:	6061      	str	r1, [r4, #4]
    eb1c:	81a3      	strh	r3, [r4, #12]
    eb1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    eb20:	f8c8 6000 	str.w	r6, [r8]
    eb24:	b321      	cbz	r1, eb70 <__sflush_r+0xd4>
    eb26:	f104 0340 	add.w	r3, r4, #64	; 0x40
    eb2a:	4299      	cmp	r1, r3
    eb2c:	d002      	beq.n	eb34 <__sflush_r+0x98>
    eb2e:	4640      	mov	r0, r8
    eb30:	f7fd fcc8 	bl	c4c4 <_free_r>
    eb34:	2000      	movs	r0, #0
    eb36:	6320      	str	r0, [r4, #48]	; 0x30
    eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb3c:	6926      	ldr	r6, [r4, #16]
    eb3e:	b1be      	cbz	r6, eb70 <__sflush_r+0xd4>
    eb40:	b293      	uxth	r3, r2
    eb42:	6825      	ldr	r5, [r4, #0]
    eb44:	6026      	str	r6, [r4, #0]
    eb46:	079a      	lsls	r2, r3, #30
    eb48:	bf0c      	ite	eq
    eb4a:	6963      	ldreq	r3, [r4, #20]
    eb4c:	2300      	movne	r3, #0
    eb4e:	1bad      	subs	r5, r5, r6
    eb50:	60a3      	str	r3, [r4, #8]
    eb52:	e00b      	b.n	eb6c <__sflush_r+0xd0>
    eb54:	462b      	mov	r3, r5
    eb56:	4632      	mov	r2, r6
    eb58:	69e1      	ldr	r1, [r4, #28]
    eb5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    eb5c:	4640      	mov	r0, r8
    eb5e:	47b8      	blx	r7
    eb60:	f1b0 0c00 	subs.w	ip, r0, #0
    eb64:	eba5 050c 	sub.w	r5, r5, ip
    eb68:	4466      	add	r6, ip
    eb6a:	dd17      	ble.n	eb9c <__sflush_r+0x100>
    eb6c:	2d00      	cmp	r5, #0
    eb6e:	dcf1      	bgt.n	eb54 <__sflush_r+0xb8>
    eb70:	2000      	movs	r0, #0
    eb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    eb78:	2b00      	cmp	r3, #0
    eb7a:	dc9d      	bgt.n	eab8 <__sflush_r+0x1c>
    eb7c:	e7f8      	b.n	eb70 <__sflush_r+0xd4>
    eb7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    eb80:	e7ae      	b.n	eae0 <__sflush_r+0x44>
    eb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    eb86:	6922      	ldr	r2, [r4, #16]
    eb88:	6022      	str	r2, [r4, #0]
    eb8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    eb8e:	81a3      	strh	r3, [r4, #12]
    eb90:	2200      	movs	r2, #0
    eb92:	04db      	lsls	r3, r3, #19
    eb94:	6062      	str	r2, [r4, #4]
    eb96:	d5c2      	bpl.n	eb1e <__sflush_r+0x82>
    eb98:	6520      	str	r0, [r4, #80]	; 0x50
    eb9a:	e7c0      	b.n	eb1e <__sflush_r+0x82>
    eb9c:	89a3      	ldrh	r3, [r4, #12]
    eb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eba2:	f04f 30ff 	mov.w	r0, #4294967295
    eba6:	81a3      	strh	r3, [r4, #12]
    eba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebac:	f8d8 3000 	ldr.w	r3, [r8]
    ebb0:	2b00      	cmp	r3, #0
    ebb2:	d093      	beq.n	eadc <__sflush_r+0x40>
    ebb4:	2b1d      	cmp	r3, #29
    ebb6:	d006      	beq.n	ebc6 <__sflush_r+0x12a>
    ebb8:	2b16      	cmp	r3, #22
    ebba:	d004      	beq.n	ebc6 <__sflush_r+0x12a>
    ebbc:	89a3      	ldrh	r3, [r4, #12]
    ebbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ebc2:	81a3      	strh	r3, [r4, #12]
    ebc4:	e7d5      	b.n	eb72 <__sflush_r+0xd6>
    ebc6:	f8c8 6000 	str.w	r6, [r8]
    ebca:	e7d1      	b.n	eb70 <__sflush_r+0xd4>

0000ebcc <_fflush_r>:
    ebcc:	b538      	push	{r3, r4, r5, lr}
    ebce:	460c      	mov	r4, r1
    ebd0:	4605      	mov	r5, r0
    ebd2:	b108      	cbz	r0, ebd8 <_fflush_r+0xc>
    ebd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ebd6:	b303      	cbz	r3, ec1a <_fflush_r+0x4e>
    ebd8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    ebdc:	b188      	cbz	r0, ec02 <_fflush_r+0x36>
    ebde:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ebe0:	07db      	lsls	r3, r3, #31
    ebe2:	d401      	bmi.n	ebe8 <_fflush_r+0x1c>
    ebe4:	0581      	lsls	r1, r0, #22
    ebe6:	d50f      	bpl.n	ec08 <_fflush_r+0x3c>
    ebe8:	4628      	mov	r0, r5
    ebea:	4621      	mov	r1, r4
    ebec:	f7ff ff56 	bl	ea9c <__sflush_r>
    ebf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ebf2:	07da      	lsls	r2, r3, #31
    ebf4:	4605      	mov	r5, r0
    ebf6:	d402      	bmi.n	ebfe <_fflush_r+0x32>
    ebf8:	89a3      	ldrh	r3, [r4, #12]
    ebfa:	059b      	lsls	r3, r3, #22
    ebfc:	d508      	bpl.n	ec10 <_fflush_r+0x44>
    ebfe:	4628      	mov	r0, r5
    ec00:	bd38      	pop	{r3, r4, r5, pc}
    ec02:	4605      	mov	r5, r0
    ec04:	4628      	mov	r0, r5
    ec06:	bd38      	pop	{r3, r4, r5, pc}
    ec08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ec0a:	f7fd f97d 	bl	bf08 <__retarget_lock_acquire_recursive>
    ec0e:	e7eb      	b.n	ebe8 <_fflush_r+0x1c>
    ec10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ec12:	f7fd f97b 	bl	bf0c <__retarget_lock_release_recursive>
    ec16:	4628      	mov	r0, r5
    ec18:	bd38      	pop	{r3, r4, r5, pc}
    ec1a:	f7fc fec1 	bl	b9a0 <__sinit>
    ec1e:	e7db      	b.n	ebd8 <_fflush_r+0xc>

0000ec20 <_localeconv_r>:
    ec20:	4800      	ldr	r0, [pc, #0]	; (ec24 <_localeconv_r+0x4>)
    ec22:	4770      	bx	lr
    ec24:	2000459c 	.word	0x2000459c
	...

0000ec30 <memchr>:
    ec30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ec34:	2a10      	cmp	r2, #16
    ec36:	db2b      	blt.n	ec90 <memchr+0x60>
    ec38:	f010 0f07 	tst.w	r0, #7
    ec3c:	d008      	beq.n	ec50 <memchr+0x20>
    ec3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ec42:	3a01      	subs	r2, #1
    ec44:	428b      	cmp	r3, r1
    ec46:	d02d      	beq.n	eca4 <memchr+0x74>
    ec48:	f010 0f07 	tst.w	r0, #7
    ec4c:	b342      	cbz	r2, eca0 <memchr+0x70>
    ec4e:	d1f6      	bne.n	ec3e <memchr+0xe>
    ec50:	b4f0      	push	{r4, r5, r6, r7}
    ec52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ec56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ec5a:	f022 0407 	bic.w	r4, r2, #7
    ec5e:	f07f 0700 	mvns.w	r7, #0
    ec62:	2300      	movs	r3, #0
    ec64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ec68:	3c08      	subs	r4, #8
    ec6a:	ea85 0501 	eor.w	r5, r5, r1
    ec6e:	ea86 0601 	eor.w	r6, r6, r1
    ec72:	fa85 f547 	uadd8	r5, r5, r7
    ec76:	faa3 f587 	sel	r5, r3, r7
    ec7a:	fa86 f647 	uadd8	r6, r6, r7
    ec7e:	faa5 f687 	sel	r6, r5, r7
    ec82:	b98e      	cbnz	r6, eca8 <memchr+0x78>
    ec84:	d1ee      	bne.n	ec64 <memchr+0x34>
    ec86:	bcf0      	pop	{r4, r5, r6, r7}
    ec88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ec8c:	f002 0207 	and.w	r2, r2, #7
    ec90:	b132      	cbz	r2, eca0 <memchr+0x70>
    ec92:	f810 3b01 	ldrb.w	r3, [r0], #1
    ec96:	3a01      	subs	r2, #1
    ec98:	ea83 0301 	eor.w	r3, r3, r1
    ec9c:	b113      	cbz	r3, eca4 <memchr+0x74>
    ec9e:	d1f8      	bne.n	ec92 <memchr+0x62>
    eca0:	2000      	movs	r0, #0
    eca2:	4770      	bx	lr
    eca4:	3801      	subs	r0, #1
    eca6:	4770      	bx	lr
    eca8:	2d00      	cmp	r5, #0
    ecaa:	bf06      	itte	eq
    ecac:	4635      	moveq	r5, r6
    ecae:	3803      	subeq	r0, #3
    ecb0:	3807      	subne	r0, #7
    ecb2:	f015 0f01 	tst.w	r5, #1
    ecb6:	d107      	bne.n	ecc8 <memchr+0x98>
    ecb8:	3001      	adds	r0, #1
    ecba:	f415 7f80 	tst.w	r5, #256	; 0x100
    ecbe:	bf02      	ittt	eq
    ecc0:	3001      	addeq	r0, #1
    ecc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ecc6:	3001      	addeq	r0, #1
    ecc8:	bcf0      	pop	{r4, r5, r6, r7}
    ecca:	3801      	subs	r0, #1
    eccc:	4770      	bx	lr
    ecce:	bf00      	nop

0000ecd0 <frexp>:
    ecd0:	b430      	push	{r4, r5}
    ecd2:	b082      	sub	sp, #8
    ecd4:	ed8d 0b00 	vstr	d0, [sp]
    ecd8:	9a01      	ldr	r2, [sp, #4]
    ecda:	4c19      	ldr	r4, [pc, #100]	; (ed40 <frexp+0x70>)
    ecdc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ece0:	2100      	movs	r1, #0
    ece2:	42a3      	cmp	r3, r4
    ece4:	6001      	str	r1, [r0, #0]
    ece6:	dc21      	bgt.n	ed2c <frexp+0x5c>
    ece8:	9c00      	ldr	r4, [sp, #0]
    ecea:	431c      	orrs	r4, r3
    ecec:	d01e      	beq.n	ed2c <frexp+0x5c>
    ecee:	4c15      	ldr	r4, [pc, #84]	; (ed44 <frexp+0x74>)
    ecf0:	4014      	ands	r4, r2
    ecf2:	b954      	cbnz	r4, ed0a <frexp+0x3a>
    ecf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; ed38 <frexp+0x68>
    ecf8:	ee20 7b07 	vmul.f64	d7, d0, d7
    ecfc:	ed8d 7b00 	vstr	d7, [sp]
    ed00:	9a01      	ldr	r2, [sp, #4]
    ed02:	f06f 0135 	mvn.w	r1, #53	; 0x35
    ed06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ed0a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    ed0e:	e9dd 4500 	ldrd	r4, r5, [sp]
    ed12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    ed16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    ed1a:	151b      	asrs	r3, r3, #20
    ed1c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    ed20:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    ed24:	e9cd 4500 	strd	r4, r5, [sp]
    ed28:	440b      	add	r3, r1
    ed2a:	6003      	str	r3, [r0, #0]
    ed2c:	ed9d 0b00 	vldr	d0, [sp]
    ed30:	b002      	add	sp, #8
    ed32:	bc30      	pop	{r4, r5}
    ed34:	4770      	bx	lr
    ed36:	bf00      	nop
    ed38:	00000000 	.word	0x00000000
    ed3c:	43500000 	.word	0x43500000
    ed40:	7fefffff 	.word	0x7fefffff
    ed44:	7ff00000 	.word	0x7ff00000

0000ed48 <__assert_func>:
    ed48:	b500      	push	{lr}
    ed4a:	4c0b      	ldr	r4, [pc, #44]	; (ed78 <__assert_func+0x30>)
    ed4c:	6825      	ldr	r5, [r4, #0]
    ed4e:	4614      	mov	r4, r2
    ed50:	68ee      	ldr	r6, [r5, #12]
    ed52:	461a      	mov	r2, r3
    ed54:	b085      	sub	sp, #20
    ed56:	4603      	mov	r3, r0
    ed58:	460d      	mov	r5, r1
    ed5a:	b14c      	cbz	r4, ed70 <__assert_func+0x28>
    ed5c:	4907      	ldr	r1, [pc, #28]	; (ed7c <__assert_func+0x34>)
    ed5e:	9500      	str	r5, [sp, #0]
    ed60:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ed64:	4630      	mov	r0, r6
    ed66:	4906      	ldr	r1, [pc, #24]	; (ed80 <__assert_func+0x38>)
    ed68:	f000 ff86 	bl	fc78 <fiprintf>
    ed6c:	f7fa faf2 	bl	9354 <abort>
    ed70:	4904      	ldr	r1, [pc, #16]	; (ed84 <__assert_func+0x3c>)
    ed72:	460c      	mov	r4, r1
    ed74:	e7f3      	b.n	ed5e <__assert_func+0x16>
    ed76:	bf00      	nop
    ed78:	20004a34 	.word	0x20004a34
    ed7c:	20000b34 	.word	0x20000b34
    ed80:	20000b44 	.word	0x20000b44
    ed84:	200007d4 	.word	0x200007d4

0000ed88 <_calloc_r>:
    ed88:	b538      	push	{r3, r4, r5, lr}
    ed8a:	fba1 1402 	umull	r1, r4, r1, r2
    ed8e:	bb8c      	cbnz	r4, edf4 <_calloc_r+0x6c>
    ed90:	f7fb feee 	bl	ab70 <_malloc_r>
    ed94:	4605      	mov	r5, r0
    ed96:	b1e0      	cbz	r0, edd2 <_calloc_r+0x4a>
    ed98:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ed9c:	f022 0203 	bic.w	r2, r2, #3
    eda0:	3a04      	subs	r2, #4
    eda2:	2a24      	cmp	r2, #36	; 0x24
    eda4:	d817      	bhi.n	edd6 <_calloc_r+0x4e>
    eda6:	2a13      	cmp	r2, #19
    eda8:	d91a      	bls.n	ede0 <_calloc_r+0x58>
    edaa:	2a1b      	cmp	r2, #27
    edac:	e9c0 4400 	strd	r4, r4, [r0]
    edb0:	d91d      	bls.n	edee <_calloc_r+0x66>
    edb2:	2a24      	cmp	r2, #36	; 0x24
    edb4:	bf14      	ite	ne
    edb6:	f100 0210 	addne.w	r2, r0, #16
    edba:	f100 0218 	addeq.w	r2, r0, #24
    edbe:	f04f 0300 	mov.w	r3, #0
    edc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    edc6:	bf04      	itt	eq
    edc8:	6104      	streq	r4, [r0, #16]
    edca:	6144      	streq	r4, [r0, #20]
    edcc:	e9c2 3300 	strd	r3, r3, [r2]
    edd0:	6093      	str	r3, [r2, #8]
    edd2:	4628      	mov	r0, r5
    edd4:	bd38      	pop	{r3, r4, r5, pc}
    edd6:	4621      	mov	r1, r4
    edd8:	f7fc ff12 	bl	bc00 <memset>
    eddc:	4628      	mov	r0, r5
    edde:	bd38      	pop	{r3, r4, r5, pc}
    ede0:	4602      	mov	r2, r0
    ede2:	2300      	movs	r3, #0
    ede4:	e9c2 3300 	strd	r3, r3, [r2]
    ede8:	6093      	str	r3, [r2, #8]
    edea:	4628      	mov	r0, r5
    edec:	bd38      	pop	{r3, r4, r5, pc}
    edee:	f100 0208 	add.w	r2, r0, #8
    edf2:	e7f6      	b.n	ede2 <_calloc_r+0x5a>
    edf4:	f7fd f85a 	bl	beac <__errno>
    edf8:	230c      	movs	r3, #12
    edfa:	2500      	movs	r5, #0
    edfc:	6003      	str	r3, [r0, #0]
    edfe:	e7e8      	b.n	edd2 <_calloc_r+0x4a>

0000ee00 <quorem>:
    ee00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee04:	6903      	ldr	r3, [r0, #16]
    ee06:	690c      	ldr	r4, [r1, #16]
    ee08:	42a3      	cmp	r3, r4
    ee0a:	b083      	sub	sp, #12
    ee0c:	f2c0 8087 	blt.w	ef1e <quorem+0x11e>
    ee10:	3c01      	subs	r4, #1
    ee12:	f101 0514 	add.w	r5, r1, #20
    ee16:	00a3      	lsls	r3, r4, #2
    ee18:	f100 0814 	add.w	r8, r0, #20
    ee1c:	9300      	str	r3, [sp, #0]
    ee1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    ee22:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    ee26:	3301      	adds	r3, #1
    ee28:	4681      	mov	r9, r0
    ee2a:	429a      	cmp	r2, r3
    ee2c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ee30:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    ee34:	9001      	str	r0, [sp, #4]
    ee36:	fbb2 f6f3 	udiv	r6, r2, r3
    ee3a:	d33b      	bcc.n	eeb4 <quorem+0xb4>
    ee3c:	f04f 0c00 	mov.w	ip, #0
    ee40:	46ae      	mov	lr, r5
    ee42:	4640      	mov	r0, r8
    ee44:	46e2      	mov	sl, ip
    ee46:	4663      	mov	r3, ip
    ee48:	f85e bb04 	ldr.w	fp, [lr], #4
    ee4c:	6802      	ldr	r2, [r0, #0]
    ee4e:	fa1f fc8b 	uxth.w	ip, fp
    ee52:	fb06 330c 	mla	r3, r6, ip, r3
    ee56:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ee5a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    ee5e:	fb06 cc0b 	mla	ip, r6, fp, ip
    ee62:	b29b      	uxth	r3, r3
    ee64:	ebaa 0303 	sub.w	r3, sl, r3
    ee68:	fa1f fa8c 	uxth.w	sl, ip
    ee6c:	fa13 f382 	uxtah	r3, r3, r2
    ee70:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    ee74:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ee78:	b29b      	uxth	r3, r3
    ee7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ee7e:	4577      	cmp	r7, lr
    ee80:	f840 3b04 	str.w	r3, [r0], #4
    ee84:	ea4f 4a22 	mov.w	sl, r2, asr #16
    ee88:	ea4f 431c 	mov.w	r3, ip, lsr #16
    ee8c:	d2dc      	bcs.n	ee48 <quorem+0x48>
    ee8e:	9b00      	ldr	r3, [sp, #0]
    ee90:	f858 3003 	ldr.w	r3, [r8, r3]
    ee94:	b973      	cbnz	r3, eeb4 <quorem+0xb4>
    ee96:	9b01      	ldr	r3, [sp, #4]
    ee98:	3b04      	subs	r3, #4
    ee9a:	4598      	cmp	r8, r3
    ee9c:	d304      	bcc.n	eea8 <quorem+0xa8>
    ee9e:	e007      	b.n	eeb0 <quorem+0xb0>
    eea0:	4598      	cmp	r8, r3
    eea2:	f104 34ff 	add.w	r4, r4, #4294967295
    eea6:	d203      	bcs.n	eeb0 <quorem+0xb0>
    eea8:	f853 2904 	ldr.w	r2, [r3], #-4
    eeac:	2a00      	cmp	r2, #0
    eeae:	d0f7      	beq.n	eea0 <quorem+0xa0>
    eeb0:	f8c9 4010 	str.w	r4, [r9, #16]
    eeb4:	4648      	mov	r0, r9
    eeb6:	f7fd fea7 	bl	cc08 <__mcmp>
    eeba:	2800      	cmp	r0, #0
    eebc:	db2b      	blt.n	ef16 <quorem+0x116>
    eebe:	3601      	adds	r6, #1
    eec0:	4641      	mov	r1, r8
    eec2:	2300      	movs	r3, #0
    eec4:	f855 0b04 	ldr.w	r0, [r5], #4
    eec8:	f8d1 c000 	ldr.w	ip, [r1]
    eecc:	b282      	uxth	r2, r0
    eece:	1a9a      	subs	r2, r3, r2
    eed0:	0c03      	lsrs	r3, r0, #16
    eed2:	fa12 f28c 	uxtah	r2, r2, ip
    eed6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    eeda:	eb03 4322 	add.w	r3, r3, r2, asr #16
    eede:	b292      	uxth	r2, r2
    eee0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    eee4:	42af      	cmp	r7, r5
    eee6:	f841 2b04 	str.w	r2, [r1], #4
    eeea:	ea4f 4323 	mov.w	r3, r3, asr #16
    eeee:	d2e9      	bcs.n	eec4 <quorem+0xc4>
    eef0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    eef4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    eef8:	b96a      	cbnz	r2, ef16 <quorem+0x116>
    eefa:	3b04      	subs	r3, #4
    eefc:	4598      	cmp	r8, r3
    eefe:	d304      	bcc.n	ef0a <quorem+0x10a>
    ef00:	e007      	b.n	ef12 <quorem+0x112>
    ef02:	4598      	cmp	r8, r3
    ef04:	f104 34ff 	add.w	r4, r4, #4294967295
    ef08:	d203      	bcs.n	ef12 <quorem+0x112>
    ef0a:	f853 2904 	ldr.w	r2, [r3], #-4
    ef0e:	2a00      	cmp	r2, #0
    ef10:	d0f7      	beq.n	ef02 <quorem+0x102>
    ef12:	f8c9 4010 	str.w	r4, [r9, #16]
    ef16:	4630      	mov	r0, r6
    ef18:	b003      	add	sp, #12
    ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef1e:	2000      	movs	r0, #0
    ef20:	b003      	add	sp, #12
    ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef26:	bf00      	nop

0000ef28 <_dtoa_r>:
    ef28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef2c:	ed2d 8b02 	vpush	{d8}
    ef30:	b08f      	sub	sp, #60	; 0x3c
    ef32:	ed8d 0b02 	vstr	d0, [sp, #8]
    ef36:	9101      	str	r1, [sp, #4]
    ef38:	6b81      	ldr	r1, [r0, #56]	; 0x38
    ef3a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    ef3c:	9305      	str	r3, [sp, #20]
    ef3e:	ec57 6b10 	vmov	r6, r7, d0
    ef42:	4604      	mov	r4, r0
    ef44:	4693      	mov	fp, r2
    ef46:	b141      	cbz	r1, ef5a <_dtoa_r+0x32>
    ef48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    ef4a:	604a      	str	r2, [r1, #4]
    ef4c:	2301      	movs	r3, #1
    ef4e:	4093      	lsls	r3, r2
    ef50:	608b      	str	r3, [r1, #8]
    ef52:	f7fd fbf9 	bl	c748 <_Bfree>
    ef56:	2300      	movs	r3, #0
    ef58:	63a3      	str	r3, [r4, #56]	; 0x38
    ef5a:	f1b7 0800 	subs.w	r8, r7, #0
    ef5e:	bfb4      	ite	lt
    ef60:	2301      	movlt	r3, #1
    ef62:	2300      	movge	r3, #0
    ef64:	602b      	str	r3, [r5, #0]
    ef66:	4bbe      	ldr	r3, [pc, #760]	; (f260 <_dtoa_r+0x338>)
    ef68:	bfbc      	itt	lt
    ef6a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    ef6e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    ef72:	ea33 0308 	bics.w	r3, r3, r8
    ef76:	f000 809f 	beq.w	f0b8 <_dtoa_r+0x190>
    ef7a:	ed9d 8b02 	vldr	d8, [sp, #8]
    ef7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ef82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ef86:	d111      	bne.n	efac <_dtoa_r+0x84>
    ef88:	9a05      	ldr	r2, [sp, #20]
    ef8a:	2301      	movs	r3, #1
    ef8c:	6013      	str	r3, [r2, #0]
    ef8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ef90:	2b00      	cmp	r3, #0
    ef92:	f000 823f 	beq.w	f414 <_dtoa_r+0x4ec>
    ef96:	4bb3      	ldr	r3, [pc, #716]	; (f264 <_dtoa_r+0x33c>)
    ef98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ef9a:	6013      	str	r3, [r2, #0]
    ef9c:	3b01      	subs	r3, #1
    ef9e:	9300      	str	r3, [sp, #0]
    efa0:	9800      	ldr	r0, [sp, #0]
    efa2:	b00f      	add	sp, #60	; 0x3c
    efa4:	ecbd 8b02 	vpop	{d8}
    efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efac:	aa0c      	add	r2, sp, #48	; 0x30
    efae:	a90d      	add	r1, sp, #52	; 0x34
    efb0:	4620      	mov	r0, r4
    efb2:	eeb0 0b48 	vmov.f64	d0, d8
    efb6:	f7fd fef3 	bl	cda0 <__d2b>
    efba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    efbe:	4605      	mov	r5, r0
    efc0:	f040 8092 	bne.w	f0e8 <_dtoa_r+0x1c0>
    efc4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    efc8:	440b      	add	r3, r1
    efca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    efce:	2a20      	cmp	r2, #32
    efd0:	f340 82fa 	ble.w	f5c8 <_dtoa_r+0x6a0>
    efd4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    efd8:	fa08 f802 	lsl.w	r8, r8, r2
    efdc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    efe0:	40d6      	lsrs	r6, r2
    efe2:	ea48 0206 	orr.w	r2, r8, r6
    efe6:	ee07 2a10 	vmov	s14, r2
    efea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    efee:	1e58      	subs	r0, r3, #1
    eff0:	ee17 6a90 	vmov	r6, s15
    eff4:	ec53 2b17 	vmov	r2, r3, d7
    eff8:	f04f 0a01 	mov.w	sl, #1
    effc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    f000:	ed9f 3b91 	vldr	d3, [pc, #580]	; f248 <_dtoa_r+0x320>
    f004:	ed9f 7b92 	vldr	d7, [pc, #584]	; f250 <_dtoa_r+0x328>
    f008:	ed9f 5b93 	vldr	d5, [pc, #588]	; f258 <_dtoa_r+0x330>
    f00c:	ee06 0a90 	vmov	s13, r0
    f010:	ec43 2b12 	vmov	d2, r2, r3
    f014:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    f018:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f01c:	ee32 6b46 	vsub.f64	d6, d2, d6
    f020:	eea6 7b03 	vfma.f64	d7, d6, d3
    f024:	eea4 7b05 	vfma.f64	d7, d4, d5
    f028:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f02c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    f030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f034:	ee16 7a90 	vmov	r7, s13
    f038:	d508      	bpl.n	f04c <_dtoa_r+0x124>
    f03a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f03e:	eeb4 6b47 	vcmp.f64	d6, d7
    f042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f046:	bf18      	it	ne
    f048:	f107 37ff 	addne.w	r7, r7, #4294967295
    f04c:	2f16      	cmp	r7, #22
    f04e:	f200 8145 	bhi.w	f2dc <_dtoa_r+0x3b4>
    f052:	4b85      	ldr	r3, [pc, #532]	; (f268 <_dtoa_r+0x340>)
    f054:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    f058:	ed93 7b00 	vldr	d7, [r3]
    f05c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f064:	d557      	bpl.n	f116 <_dtoa_r+0x1ee>
    f066:	1a09      	subs	r1, r1, r0
    f068:	2300      	movs	r3, #0
    f06a:	f1b1 0801 	subs.w	r8, r1, #1
    f06e:	f107 37ff 	add.w	r7, r7, #4294967295
    f072:	930a      	str	r3, [sp, #40]	; 0x28
    f074:	f100 8139 	bmi.w	f2ea <_dtoa_r+0x3c2>
    f078:	2300      	movs	r3, #0
    f07a:	9306      	str	r3, [sp, #24]
    f07c:	2f00      	cmp	r7, #0
    f07e:	da52      	bge.n	f126 <_dtoa_r+0x1fe>
    f080:	9b06      	ldr	r3, [sp, #24]
    f082:	9704      	str	r7, [sp, #16]
    f084:	1bdb      	subs	r3, r3, r7
    f086:	9306      	str	r3, [sp, #24]
    f088:	427b      	negs	r3, r7
    f08a:	9308      	str	r3, [sp, #32]
    f08c:	9b01      	ldr	r3, [sp, #4]
    f08e:	2b09      	cmp	r3, #9
    f090:	f04f 0700 	mov.w	r7, #0
    f094:	d84e      	bhi.n	f134 <_dtoa_r+0x20c>
    f096:	2b05      	cmp	r3, #5
    f098:	f340 829d 	ble.w	f5d6 <_dtoa_r+0x6ae>
    f09c:	3b04      	subs	r3, #4
    f09e:	9301      	str	r3, [sp, #4]
    f0a0:	2600      	movs	r6, #0
    f0a2:	9b01      	ldr	r3, [sp, #4]
    f0a4:	1e9a      	subs	r2, r3, #2
    f0a6:	2a03      	cmp	r2, #3
    f0a8:	f200 8125 	bhi.w	f2f6 <_dtoa_r+0x3ce>
    f0ac:	e8df f012 	tbh	[pc, r2, lsl #1]
    f0b0:	03a703aa 	.word	0x03a703aa
    f0b4:	037e039d 	.word	0x037e039d
    f0b8:	9a05      	ldr	r2, [sp, #20]
    f0ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
    f0be:	f242 730f 	movw	r3, #9999	; 0x270f
    f0c2:	ea58 0806 	orrs.w	r8, r8, r6
    f0c6:	6013      	str	r3, [r2, #0]
    f0c8:	d11e      	bne.n	f108 <_dtoa_r+0x1e0>
    f0ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f0cc:	2b00      	cmp	r3, #0
    f0ce:	f000 8591 	beq.w	fbf4 <_dtoa_r+0xccc>
    f0d2:	4b66      	ldr	r3, [pc, #408]	; (f26c <_dtoa_r+0x344>)
    f0d4:	9300      	str	r3, [sp, #0]
    f0d6:	3308      	adds	r3, #8
    f0d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f0da:	9800      	ldr	r0, [sp, #0]
    f0dc:	6013      	str	r3, [r2, #0]
    f0de:	b00f      	add	sp, #60	; 0x3c
    f0e0:	ecbd 8b02 	vpop	{d8}
    f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0e8:	ee18 6a90 	vmov	r6, s17
    f0ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f0f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    f0f4:	ec53 2b18 	vmov	r2, r3, d8
    f0f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    f0fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f0fe:	f04f 0a00 	mov.w	sl, #0
    f102:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    f106:	e77b      	b.n	f000 <_dtoa_r+0xd8>
    f108:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f10a:	2b00      	cmp	r3, #0
    f10c:	f040 833b 	bne.w	f786 <_dtoa_r+0x85e>
    f110:	4b57      	ldr	r3, [pc, #348]	; (f270 <_dtoa_r+0x348>)
    f112:	9300      	str	r3, [sp, #0]
    f114:	e744      	b.n	efa0 <_dtoa_r+0x78>
    f116:	1a09      	subs	r1, r1, r0
    f118:	2300      	movs	r3, #0
    f11a:	f1b1 0801 	subs.w	r8, r1, #1
    f11e:	930a      	str	r3, [sp, #40]	; 0x28
    f120:	f100 80e3 	bmi.w	f2ea <_dtoa_r+0x3c2>
    f124:	9306      	str	r3, [sp, #24]
    f126:	2300      	movs	r3, #0
    f128:	9308      	str	r3, [sp, #32]
    f12a:	9b01      	ldr	r3, [sp, #4]
    f12c:	9704      	str	r7, [sp, #16]
    f12e:	2b09      	cmp	r3, #9
    f130:	44b8      	add	r8, r7
    f132:	d9b0      	bls.n	f096 <_dtoa_r+0x16e>
    f134:	2300      	movs	r3, #0
    f136:	2601      	movs	r6, #1
    f138:	9301      	str	r3, [sp, #4]
    f13a:	9607      	str	r6, [sp, #28]
    f13c:	f04f 39ff 	mov.w	r9, #4294967295
    f140:	469b      	mov	fp, r3
    f142:	2100      	movs	r1, #0
    f144:	63e1      	str	r1, [r4, #60]	; 0x3c
    f146:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    f14a:	4620      	mov	r0, r4
    f14c:	f7fd fad6 	bl	c6fc <_Balloc>
    f150:	9000      	str	r0, [sp, #0]
    f152:	2800      	cmp	r0, #0
    f154:	f000 8540 	beq.w	fbd8 <_dtoa_r+0xcb0>
    f158:	9b00      	ldr	r3, [sp, #0]
    f15a:	63a3      	str	r3, [r4, #56]	; 0x38
    f15c:	f1b9 0f0e 	cmp.w	r9, #14
    f160:	f200 80dc 	bhi.w	f31c <_dtoa_r+0x3f4>
    f164:	2e00      	cmp	r6, #0
    f166:	f000 80d9 	beq.w	f31c <_dtoa_r+0x3f4>
    f16a:	9b04      	ldr	r3, [sp, #16]
    f16c:	2b00      	cmp	r3, #0
    f16e:	f340 83de 	ble.w	f92e <_dtoa_r+0xa06>
    f172:	4a3d      	ldr	r2, [pc, #244]	; (f268 <_dtoa_r+0x340>)
    f174:	f003 010f 	and.w	r1, r3, #15
    f178:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f17c:	ed92 7b00 	vldr	d7, [r2]
    f180:	111a      	asrs	r2, r3, #4
    f182:	05db      	lsls	r3, r3, #23
    f184:	f140 8382 	bpl.w	f88c <_dtoa_r+0x964>
    f188:	493a      	ldr	r1, [pc, #232]	; (f274 <_dtoa_r+0x34c>)
    f18a:	ed91 6b08 	vldr	d6, [r1, #32]
    f18e:	f002 020f 	and.w	r2, r2, #15
    f192:	2003      	movs	r0, #3
    f194:	ee88 5b06 	vdiv.f64	d5, d8, d6
    f198:	b15a      	cbz	r2, f1b2 <_dtoa_r+0x28a>
    f19a:	4936      	ldr	r1, [pc, #216]	; (f274 <_dtoa_r+0x34c>)
    f19c:	07d6      	lsls	r6, r2, #31
    f19e:	d504      	bpl.n	f1aa <_dtoa_r+0x282>
    f1a0:	ed91 6b00 	vldr	d6, [r1]
    f1a4:	3001      	adds	r0, #1
    f1a6:	ee27 7b06 	vmul.f64	d7, d7, d6
    f1aa:	1052      	asrs	r2, r2, #1
    f1ac:	f101 0108 	add.w	r1, r1, #8
    f1b0:	d1f4      	bne.n	f19c <_dtoa_r+0x274>
    f1b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    f1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1b8:	b13b      	cbz	r3, f1ca <_dtoa_r+0x2a2>
    f1ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    f1be:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1c6:	f100 84ae 	bmi.w	fb26 <_dtoa_r+0xbfe>
    f1ca:	ee07 0a90 	vmov	s15, r0
    f1ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f1d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f1d6:	eea5 7b06 	vfma.f64	d7, d5, d6
    f1da:	ee17 2a90 	vmov	r2, s15
    f1de:	ec51 0b17 	vmov	r0, r1, d7
    f1e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f1e6:	f1b9 0f00 	cmp.w	r9, #0
    f1ea:	f000 8388 	beq.w	f8fe <_dtoa_r+0x9d6>
    f1ee:	9e04      	ldr	r6, [sp, #16]
    f1f0:	464a      	mov	r2, r9
    f1f2:	9b07      	ldr	r3, [sp, #28]
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	f000 8447 	beq.w	fa88 <_dtoa_r+0xb60>
    f1fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f1fe:	4b1a      	ldr	r3, [pc, #104]	; (f268 <_dtoa_r+0x340>)
    f200:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    f204:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f208:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    f20c:	ee36 7b47 	vsub.f64	d7, d6, d7
    f210:	ed1c 6b02 	vldr	d6, [ip, #-8]
    f214:	ee83 5b06 	vdiv.f64	d5, d3, d6
    f218:	ec41 0b16 	vmov	d6, r0, r1
    f21c:	ee14 0a90 	vmov	r0, s9
    f220:	ee35 5b46 	vsub.f64	d5, d5, d6
    f224:	9900      	ldr	r1, [sp, #0]
    f226:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f22a:	3030      	adds	r0, #48	; 0x30
    f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f230:	f801 0b01 	strb.w	r0, [r1], #1
    f234:	f300 84ac 	bgt.w	fb90 <_dtoa_r+0xc68>
    f238:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    f23c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f240:	f04f 0c00 	mov.w	ip, #0
    f244:	e031      	b.n	f2aa <_dtoa_r+0x382>
    f246:	bf00      	nop
    f248:	636f4361 	.word	0x636f4361
    f24c:	3fd287a7 	.word	0x3fd287a7
    f250:	8b60c8b3 	.word	0x8b60c8b3
    f254:	3fc68a28 	.word	0x3fc68a28
    f258:	509f79fb 	.word	0x509f79fb
    f25c:	3fd34413 	.word	0x3fd34413
    f260:	7ff00000 	.word	0x7ff00000
    f264:	20000dbd 	.word	0x20000dbd
    f268:	200002a8 	.word	0x200002a8
    f26c:	20000d10 	.word	0x20000d10
    f270:	20000d1c 	.word	0x20000d1c
    f274:	20000280 	.word	0x20000280
    f278:	f10c 0c01 	add.w	ip, ip, #1
    f27c:	4594      	cmp	ip, r2
    f27e:	da4d      	bge.n	f31c <_dtoa_r+0x3f4>
    f280:	ee27 7b04 	vmul.f64	d7, d7, d4
    f284:	ee25 5b04 	vmul.f64	d5, d5, d4
    f288:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f28c:	ee16 3a90 	vmov	r3, s13
    f290:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    f294:	3330      	adds	r3, #48	; 0x30
    f296:	ee37 7b43 	vsub.f64	d7, d7, d3
    f29a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2a2:	f801 3b01 	strb.w	r3, [r1], #1
    f2a6:	f100 8473 	bmi.w	fb90 <_dtoa_r+0xc68>
    f2aa:	ee32 6b47 	vsub.f64	d6, d2, d7
    f2ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
    f2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2b6:	d5df      	bpl.n	f278 <_dtoa_r+0x350>
    f2b8:	9a00      	ldr	r2, [sp, #0]
    f2ba:	9604      	str	r6, [sp, #16]
    f2bc:	e002      	b.n	f2c4 <_dtoa_r+0x39c>
    f2be:	428a      	cmp	r2, r1
    f2c0:	f000 8450 	beq.w	fb64 <_dtoa_r+0xc3c>
    f2c4:	4689      	mov	r9, r1
    f2c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f2ca:	2b39      	cmp	r3, #57	; 0x39
    f2cc:	d0f7      	beq.n	f2be <_dtoa_r+0x396>
    f2ce:	3301      	adds	r3, #1
    f2d0:	b2db      	uxtb	r3, r3
    f2d2:	700b      	strb	r3, [r1, #0]
    f2d4:	9b04      	ldr	r3, [sp, #16]
    f2d6:	3301      	adds	r3, #1
    f2d8:	9304      	str	r3, [sp, #16]
    f2da:	e155      	b.n	f588 <_dtoa_r+0x660>
    f2dc:	1a09      	subs	r1, r1, r0
    f2de:	2301      	movs	r3, #1
    f2e0:	f1b1 0801 	subs.w	r8, r1, #1
    f2e4:	930a      	str	r3, [sp, #40]	; 0x28
    f2e6:	f57f aec7 	bpl.w	f078 <_dtoa_r+0x150>
    f2ea:	f1c1 0301 	rsb	r3, r1, #1
    f2ee:	9306      	str	r3, [sp, #24]
    f2f0:	f04f 0800 	mov.w	r8, #0
    f2f4:	e6c2      	b.n	f07c <_dtoa_r+0x154>
    f2f6:	2600      	movs	r6, #0
    f2f8:	63e6      	str	r6, [r4, #60]	; 0x3c
    f2fa:	4631      	mov	r1, r6
    f2fc:	4620      	mov	r0, r4
    f2fe:	f7fd f9fd 	bl	c6fc <_Balloc>
    f302:	9000      	str	r0, [sp, #0]
    f304:	2800      	cmp	r0, #0
    f306:	f000 8467 	beq.w	fbd8 <_dtoa_r+0xcb0>
    f30a:	9b00      	ldr	r3, [sp, #0]
    f30c:	63a3      	str	r3, [r4, #56]	; 0x38
    f30e:	f04f 33ff 	mov.w	r3, #4294967295
    f312:	930b      	str	r3, [sp, #44]	; 0x2c
    f314:	4699      	mov	r9, r3
    f316:	2301      	movs	r3, #1
    f318:	46b3      	mov	fp, r6
    f31a:	9307      	str	r3, [sp, #28]
    f31c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f31e:	2a00      	cmp	r2, #0
    f320:	db55      	blt.n	f3ce <_dtoa_r+0x4a6>
    f322:	9904      	ldr	r1, [sp, #16]
    f324:	290e      	cmp	r1, #14
    f326:	dc52      	bgt.n	f3ce <_dtoa_r+0x4a6>
    f328:	4bb7      	ldr	r3, [pc, #732]	; (f608 <_dtoa_r+0x6e0>)
    f32a:	f1bb 0f00 	cmp.w	fp, #0
    f32e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f332:	ed93 6b00 	vldr	d6, [r3]
    f336:	da15      	bge.n	f364 <_dtoa_r+0x43c>
    f338:	f1b9 0f00 	cmp.w	r9, #0
    f33c:	dc12      	bgt.n	f364 <_dtoa_r+0x43c>
    f33e:	f040 82f2 	bne.w	f926 <_dtoa_r+0x9fe>
    f342:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f346:	ee26 7b07 	vmul.f64	d7, d6, d7
    f34a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f352:	46ca      	mov	sl, r9
    f354:	464e      	mov	r6, r9
    f356:	f200 826d 	bhi.w	f834 <_dtoa_r+0x90c>
    f35a:	f8dd 8000 	ldr.w	r8, [sp]
    f35e:	ea6f 0b0b 	mvn.w	fp, fp
    f362:	e270      	b.n	f846 <_dtoa_r+0x91e>
    f364:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f368:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f36c:	9900      	ldr	r1, [sp, #0]
    f36e:	ee17 3a10 	vmov	r3, s14
    f372:	f1b9 0f01 	cmp.w	r9, #1
    f376:	f103 0330 	add.w	r3, r3, #48	; 0x30
    f37a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f37e:	f801 3b01 	strb.w	r3, [r1], #1
    f382:	eea5 8b46 	vfms.f64	d8, d5, d6
    f386:	f000 8334 	beq.w	f9f2 <_dtoa_r+0xaca>
    f38a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f38e:	2301      	movs	r3, #1
    f390:	e011      	b.n	f3b6 <_dtoa_r+0x48e>
    f392:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f396:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f39a:	3301      	adds	r3, #1
    f39c:	ee17 2a10 	vmov	r2, s14
    f3a0:	454b      	cmp	r3, r9
    f3a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    f3a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f3aa:	f801 2b01 	strb.w	r2, [r1], #1
    f3ae:	eea5 8b46 	vfms.f64	d8, d5, d6
    f3b2:	f000 831e 	beq.w	f9f2 <_dtoa_r+0xaca>
    f3b6:	ee28 8b04 	vmul.f64	d8, d8, d4
    f3ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3c2:	d1e6      	bne.n	f392 <_dtoa_r+0x46a>
    f3c4:	9b04      	ldr	r3, [sp, #16]
    f3c6:	3301      	adds	r3, #1
    f3c8:	9304      	str	r3, [sp, #16]
    f3ca:	4689      	mov	r9, r1
    f3cc:	e0dc      	b.n	f588 <_dtoa_r+0x660>
    f3ce:	9b07      	ldr	r3, [sp, #28]
    f3d0:	b343      	cbz	r3, f424 <_dtoa_r+0x4fc>
    f3d2:	9b01      	ldr	r3, [sp, #4]
    f3d4:	2b01      	cmp	r3, #1
    f3d6:	f340 8276 	ble.w	f8c6 <_dtoa_r+0x99e>
    f3da:	9b08      	ldr	r3, [sp, #32]
    f3dc:	f109 3aff 	add.w	sl, r9, #4294967295
    f3e0:	4553      	cmp	r3, sl
    f3e2:	f280 823f 	bge.w	f864 <_dtoa_r+0x93c>
    f3e6:	9b08      	ldr	r3, [sp, #32]
    f3e8:	f8cd a020 	str.w	sl, [sp, #32]
    f3ec:	ebaa 0203 	sub.w	r2, sl, r3
    f3f0:	4417      	add	r7, r2
    f3f2:	f04f 0a00 	mov.w	sl, #0
    f3f6:	f1b9 0f00 	cmp.w	r9, #0
    f3fa:	f2c0 8325 	blt.w	fa48 <_dtoa_r+0xb20>
    f3fe:	9b06      	ldr	r3, [sp, #24]
    f400:	9309      	str	r3, [sp, #36]	; 0x24
    f402:	444b      	add	r3, r9
    f404:	44c8      	add	r8, r9
    f406:	9306      	str	r3, [sp, #24]
    f408:	2101      	movs	r1, #1
    f40a:	4620      	mov	r0, r4
    f40c:	f7fd fa48 	bl	c8a0 <__i2b>
    f410:	4606      	mov	r6, r0
    f412:	e00c      	b.n	f42e <_dtoa_r+0x506>
    f414:	4b7d      	ldr	r3, [pc, #500]	; (f60c <_dtoa_r+0x6e4>)
    f416:	9300      	str	r3, [sp, #0]
    f418:	9800      	ldr	r0, [sp, #0]
    f41a:	b00f      	add	sp, #60	; 0x3c
    f41c:	ecbd 8b02 	vpop	{d8}
    f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f424:	9b06      	ldr	r3, [sp, #24]
    f426:	f8dd a020 	ldr.w	sl, [sp, #32]
    f42a:	9e07      	ldr	r6, [sp, #28]
    f42c:	9309      	str	r3, [sp, #36]	; 0x24
    f42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f430:	b16b      	cbz	r3, f44e <_dtoa_r+0x526>
    f432:	f1b8 0f00 	cmp.w	r8, #0
    f436:	dd0a      	ble.n	f44e <_dtoa_r+0x526>
    f438:	4543      	cmp	r3, r8
    f43a:	9906      	ldr	r1, [sp, #24]
    f43c:	461a      	mov	r2, r3
    f43e:	bfa8      	it	ge
    f440:	4642      	movge	r2, r8
    f442:	1a89      	subs	r1, r1, r2
    f444:	1a9b      	subs	r3, r3, r2
    f446:	9106      	str	r1, [sp, #24]
    f448:	9309      	str	r3, [sp, #36]	; 0x24
    f44a:	eba8 0802 	sub.w	r8, r8, r2
    f44e:	9b08      	ldr	r3, [sp, #32]
    f450:	b163      	cbz	r3, f46c <_dtoa_r+0x544>
    f452:	9b07      	ldr	r3, [sp, #28]
    f454:	2b00      	cmp	r3, #0
    f456:	f000 82a7 	beq.w	f9a8 <_dtoa_r+0xa80>
    f45a:	f1ba 0f00 	cmp.w	sl, #0
    f45e:	f300 8204 	bgt.w	f86a <_dtoa_r+0x942>
    f462:	9b08      	ldr	r3, [sp, #32]
    f464:	ebb3 020a 	subs.w	r2, r3, sl
    f468:	f040 82ff 	bne.w	fa6a <_dtoa_r+0xb42>
    f46c:	2101      	movs	r1, #1
    f46e:	4620      	mov	r0, r4
    f470:	f7fd fa16 	bl	c8a0 <__i2b>
    f474:	2f00      	cmp	r7, #0
    f476:	4682      	mov	sl, r0
    f478:	f300 80af 	bgt.w	f5da <_dtoa_r+0x6b2>
    f47c:	9b01      	ldr	r3, [sp, #4]
    f47e:	2b01      	cmp	r3, #1
    f480:	f340 8187 	ble.w	f792 <_dtoa_r+0x86a>
    f484:	2300      	movs	r3, #0
    f486:	9308      	str	r3, [sp, #32]
    f488:	2001      	movs	r0, #1
    f48a:	2f00      	cmp	r7, #0
    f48c:	f040 80b1 	bne.w	f5f2 <_dtoa_r+0x6ca>
    f490:	4440      	add	r0, r8
    f492:	f010 001f 	ands.w	r0, r0, #31
    f496:	f000 817a 	beq.w	f78e <_dtoa_r+0x866>
    f49a:	f1c0 0220 	rsb	r2, r0, #32
    f49e:	2a04      	cmp	r2, #4
    f4a0:	f300 8088 	bgt.w	f5b4 <_dtoa_r+0x68c>
    f4a4:	f040 81f6 	bne.w	f894 <_dtoa_r+0x96c>
    f4a8:	9b06      	ldr	r3, [sp, #24]
    f4aa:	2b00      	cmp	r3, #0
    f4ac:	dd05      	ble.n	f4ba <_dtoa_r+0x592>
    f4ae:	4629      	mov	r1, r5
    f4b0:	461a      	mov	r2, r3
    f4b2:	4620      	mov	r0, r4
    f4b4:	f7fd fb30 	bl	cb18 <__lshift>
    f4b8:	4605      	mov	r5, r0
    f4ba:	f1b8 0f00 	cmp.w	r8, #0
    f4be:	dd05      	ble.n	f4cc <_dtoa_r+0x5a4>
    f4c0:	4651      	mov	r1, sl
    f4c2:	4642      	mov	r2, r8
    f4c4:	4620      	mov	r0, r4
    f4c6:	f7fd fb27 	bl	cb18 <__lshift>
    f4ca:	4682      	mov	sl, r0
    f4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f4ce:	2b00      	cmp	r3, #0
    f4d0:	f040 813f 	bne.w	f752 <_dtoa_r+0x82a>
    f4d4:	f1b9 0f00 	cmp.w	r9, #0
    f4d8:	f340 8125 	ble.w	f726 <_dtoa_r+0x7fe>
    f4dc:	9b07      	ldr	r3, [sp, #28]
    f4de:	2b00      	cmp	r3, #0
    f4e0:	f040 80a3 	bne.w	f62a <_dtoa_r+0x702>
    f4e4:	9b04      	ldr	r3, [sp, #16]
    f4e6:	3301      	adds	r3, #1
    f4e8:	9304      	str	r3, [sp, #16]
    f4ea:	f8dd 8000 	ldr.w	r8, [sp]
    f4ee:	2701      	movs	r7, #1
    f4f0:	e007      	b.n	f502 <_dtoa_r+0x5da>
    f4f2:	4629      	mov	r1, r5
    f4f4:	2300      	movs	r3, #0
    f4f6:	220a      	movs	r2, #10
    f4f8:	4620      	mov	r0, r4
    f4fa:	f7fd f92f 	bl	c75c <__multadd>
    f4fe:	3701      	adds	r7, #1
    f500:	4605      	mov	r5, r0
    f502:	4651      	mov	r1, sl
    f504:	4628      	mov	r0, r5
    f506:	f7ff fc7b 	bl	ee00 <quorem>
    f50a:	45b9      	cmp	r9, r7
    f50c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f510:	f808 0b01 	strb.w	r0, [r8], #1
    f514:	dced      	bgt.n	f4f2 <_dtoa_r+0x5ca>
    f516:	f1b9 0f00 	cmp.w	r9, #0
    f51a:	9a00      	ldr	r2, [sp, #0]
    f51c:	bfcc      	ite	gt
    f51e:	46cb      	movgt	fp, r9
    f520:	f04f 0b01 	movle.w	fp, #1
    f524:	4603      	mov	r3, r0
    f526:	4493      	add	fp, r2
    f528:	2700      	movs	r7, #0
    f52a:	4629      	mov	r1, r5
    f52c:	2201      	movs	r2, #1
    f52e:	4620      	mov	r0, r4
    f530:	9301      	str	r3, [sp, #4]
    f532:	f7fd faf1 	bl	cb18 <__lshift>
    f536:	4651      	mov	r1, sl
    f538:	4605      	mov	r5, r0
    f53a:	f7fd fb65 	bl	cc08 <__mcmp>
    f53e:	2800      	cmp	r0, #0
    f540:	f340 81af 	ble.w	f8a2 <_dtoa_r+0x97a>
    f544:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f548:	9a00      	ldr	r2, [sp, #0]
    f54a:	f10b 3bff 	add.w	fp, fp, #4294967295
    f54e:	e004      	b.n	f55a <_dtoa_r+0x632>
    f550:	455a      	cmp	r2, fp
    f552:	f000 81b1 	beq.w	f8b8 <_dtoa_r+0x990>
    f556:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f55a:	2b39      	cmp	r3, #57	; 0x39
    f55c:	f10b 0901 	add.w	r9, fp, #1
    f560:	d0f6      	beq.n	f550 <_dtoa_r+0x628>
    f562:	3301      	adds	r3, #1
    f564:	f88b 3000 	strb.w	r3, [fp]
    f568:	4651      	mov	r1, sl
    f56a:	4620      	mov	r0, r4
    f56c:	f7fd f8ec 	bl	c748 <_Bfree>
    f570:	b156      	cbz	r6, f588 <_dtoa_r+0x660>
    f572:	b12f      	cbz	r7, f580 <_dtoa_r+0x658>
    f574:	42b7      	cmp	r7, r6
    f576:	d003      	beq.n	f580 <_dtoa_r+0x658>
    f578:	4639      	mov	r1, r7
    f57a:	4620      	mov	r0, r4
    f57c:	f7fd f8e4 	bl	c748 <_Bfree>
    f580:	4631      	mov	r1, r6
    f582:	4620      	mov	r0, r4
    f584:	f7fd f8e0 	bl	c748 <_Bfree>
    f588:	4629      	mov	r1, r5
    f58a:	4620      	mov	r0, r4
    f58c:	f7fd f8dc 	bl	c748 <_Bfree>
    f590:	2300      	movs	r3, #0
    f592:	f889 3000 	strb.w	r3, [r9]
    f596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f59a:	601a      	str	r2, [r3, #0]
    f59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f59e:	2b00      	cmp	r3, #0
    f5a0:	f43f acfe 	beq.w	efa0 <_dtoa_r+0x78>
    f5a4:	9800      	ldr	r0, [sp, #0]
    f5a6:	f8c3 9000 	str.w	r9, [r3]
    f5aa:	b00f      	add	sp, #60	; 0x3c
    f5ac:	ecbd 8b02 	vpop	{d8}
    f5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5b4:	f1c0 001c 	rsb	r0, r0, #28
    f5b8:	9b06      	ldr	r3, [sp, #24]
    f5ba:	4403      	add	r3, r0
    f5bc:	9306      	str	r3, [sp, #24]
    f5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f5c0:	4403      	add	r3, r0
    f5c2:	9309      	str	r3, [sp, #36]	; 0x24
    f5c4:	4480      	add	r8, r0
    f5c6:	e76f      	b.n	f4a8 <_dtoa_r+0x580>
    f5c8:	f1c2 0220 	rsb	r2, r2, #32
    f5cc:	fa06 f202 	lsl.w	r2, r6, r2
    f5d0:	ee07 2a10 	vmov	s14, r2
    f5d4:	e509      	b.n	efea <_dtoa_r+0xc2>
    f5d6:	2601      	movs	r6, #1
    f5d8:	e563      	b.n	f0a2 <_dtoa_r+0x17a>
    f5da:	4601      	mov	r1, r0
    f5dc:	463a      	mov	r2, r7
    f5de:	4620      	mov	r0, r4
    f5e0:	f7fd fa3a 	bl	ca58 <__pow5mult>
    f5e4:	9b01      	ldr	r3, [sp, #4]
    f5e6:	2b01      	cmp	r3, #1
    f5e8:	4682      	mov	sl, r0
    f5ea:	f340 81c5 	ble.w	f978 <_dtoa_r+0xa50>
    f5ee:	2300      	movs	r3, #0
    f5f0:	9308      	str	r3, [sp, #32]
    f5f2:	f8da 2010 	ldr.w	r2, [sl, #16]
    f5f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    f5fa:	6910      	ldr	r0, [r2, #16]
    f5fc:	f7fd f900 	bl	c800 <__hi0bits>
    f600:	f1c0 0020 	rsb	r0, r0, #32
    f604:	e744      	b.n	f490 <_dtoa_r+0x568>
    f606:	bf00      	nop
    f608:	200002a8 	.word	0x200002a8
    f60c:	20000dbc 	.word	0x20000dbc
    f610:	4631      	mov	r1, r6
    f612:	2300      	movs	r3, #0
    f614:	220a      	movs	r2, #10
    f616:	4620      	mov	r0, r4
    f618:	f7fd f8a0 	bl	c75c <__multadd>
    f61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f61e:	2b00      	cmp	r3, #0
    f620:	4606      	mov	r6, r0
    f622:	f340 82ce 	ble.w	fbc2 <_dtoa_r+0xc9a>
    f626:	9704      	str	r7, [sp, #16]
    f628:	4699      	mov	r9, r3
    f62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f62c:	2b00      	cmp	r3, #0
    f62e:	dd05      	ble.n	f63c <_dtoa_r+0x714>
    f630:	4631      	mov	r1, r6
    f632:	461a      	mov	r2, r3
    f634:	4620      	mov	r0, r4
    f636:	f7fd fa6f 	bl	cb18 <__lshift>
    f63a:	4606      	mov	r6, r0
    f63c:	9b08      	ldr	r3, [sp, #32]
    f63e:	2b00      	cmp	r3, #0
    f640:	f040 81eb 	bne.w	fa1a <_dtoa_r+0xaf2>
    f644:	46b0      	mov	r8, r6
    f646:	9b02      	ldr	r3, [sp, #8]
    f648:	9f00      	ldr	r7, [sp, #0]
    f64a:	f003 0201 	and.w	r2, r3, #1
    f64e:	1e7b      	subs	r3, r7, #1
    f650:	444b      	add	r3, r9
    f652:	9308      	str	r3, [sp, #32]
    f654:	9b01      	ldr	r3, [sp, #4]
    f656:	920a      	str	r2, [sp, #40]	; 0x28
    f658:	4313      	orrs	r3, r2
    f65a:	9309      	str	r3, [sp, #36]	; 0x24
    f65c:	4651      	mov	r1, sl
    f65e:	4628      	mov	r0, r5
    f660:	f7ff fbce 	bl	ee00 <quorem>
    f664:	4631      	mov	r1, r6
    f666:	4683      	mov	fp, r0
    f668:	4628      	mov	r0, r5
    f66a:	f7fd facd 	bl	cc08 <__mcmp>
    f66e:	4642      	mov	r2, r8
    f670:	4651      	mov	r1, sl
    f672:	4681      	mov	r9, r0
    f674:	4620      	mov	r0, r4
    f676:	f7fd fae9 	bl	cc4c <__mdiff>
    f67a:	68c2      	ldr	r2, [r0, #12]
    f67c:	4601      	mov	r1, r0
    f67e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f682:	2a00      	cmp	r2, #0
    f684:	d142      	bne.n	f70c <_dtoa_r+0x7e4>
    f686:	e9cd 0306 	strd	r0, r3, [sp, #24]
    f68a:	4628      	mov	r0, r5
    f68c:	f7fd fabc 	bl	cc08 <__mcmp>
    f690:	9906      	ldr	r1, [sp, #24]
    f692:	9002      	str	r0, [sp, #8]
    f694:	4620      	mov	r0, r4
    f696:	f7fd f857 	bl	c748 <_Bfree>
    f69a:	9a02      	ldr	r2, [sp, #8]
    f69c:	9b07      	ldr	r3, [sp, #28]
    f69e:	b91a      	cbnz	r2, f6a8 <_dtoa_r+0x780>
    f6a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    f6a2:	2900      	cmp	r1, #0
    f6a4:	f000 827e 	beq.w	fba4 <_dtoa_r+0xc7c>
    f6a8:	f1b9 0f00 	cmp.w	r9, #0
    f6ac:	f2c0 8183 	blt.w	f9b6 <_dtoa_r+0xa8e>
    f6b0:	9901      	ldr	r1, [sp, #4]
    f6b2:	ea49 0901 	orr.w	r9, r9, r1
    f6b6:	990a      	ldr	r1, [sp, #40]	; 0x28
    f6b8:	ea51 0909 	orrs.w	r9, r1, r9
    f6bc:	f000 817b 	beq.w	f9b6 <_dtoa_r+0xa8e>
    f6c0:	2a00      	cmp	r2, #0
    f6c2:	f300 81c6 	bgt.w	fa52 <_dtoa_r+0xb2a>
    f6c6:	9a08      	ldr	r2, [sp, #32]
    f6c8:	703b      	strb	r3, [r7, #0]
    f6ca:	f107 0901 	add.w	r9, r7, #1
    f6ce:	4297      	cmp	r7, r2
    f6d0:	46cb      	mov	fp, r9
    f6d2:	f000 81c4 	beq.w	fa5e <_dtoa_r+0xb36>
    f6d6:	4629      	mov	r1, r5
    f6d8:	2300      	movs	r3, #0
    f6da:	220a      	movs	r2, #10
    f6dc:	4620      	mov	r0, r4
    f6de:	f7fd f83d 	bl	c75c <__multadd>
    f6e2:	4546      	cmp	r6, r8
    f6e4:	4605      	mov	r5, r0
    f6e6:	4631      	mov	r1, r6
    f6e8:	f04f 0300 	mov.w	r3, #0
    f6ec:	f04f 020a 	mov.w	r2, #10
    f6f0:	4620      	mov	r0, r4
    f6f2:	d012      	beq.n	f71a <_dtoa_r+0x7f2>
    f6f4:	f7fd f832 	bl	c75c <__multadd>
    f6f8:	4641      	mov	r1, r8
    f6fa:	4606      	mov	r6, r0
    f6fc:	2300      	movs	r3, #0
    f6fe:	220a      	movs	r2, #10
    f700:	4620      	mov	r0, r4
    f702:	f7fd f82b 	bl	c75c <__multadd>
    f706:	464f      	mov	r7, r9
    f708:	4680      	mov	r8, r0
    f70a:	e7a7      	b.n	f65c <_dtoa_r+0x734>
    f70c:	4620      	mov	r0, r4
    f70e:	9302      	str	r3, [sp, #8]
    f710:	f7fd f81a 	bl	c748 <_Bfree>
    f714:	9b02      	ldr	r3, [sp, #8]
    f716:	2201      	movs	r2, #1
    f718:	e7c6      	b.n	f6a8 <_dtoa_r+0x780>
    f71a:	f7fd f81f 	bl	c75c <__multadd>
    f71e:	464f      	mov	r7, r9
    f720:	4606      	mov	r6, r0
    f722:	4680      	mov	r8, r0
    f724:	e79a      	b.n	f65c <_dtoa_r+0x734>
    f726:	9b01      	ldr	r3, [sp, #4]
    f728:	2b02      	cmp	r3, #2
    f72a:	dc71      	bgt.n	f810 <_dtoa_r+0x8e8>
    f72c:	9b07      	ldr	r3, [sp, #28]
    f72e:	2b00      	cmp	r3, #0
    f730:	f47f af7b 	bne.w	f62a <_dtoa_r+0x702>
    f734:	9b04      	ldr	r3, [sp, #16]
    f736:	4651      	mov	r1, sl
    f738:	3301      	adds	r3, #1
    f73a:	4628      	mov	r0, r5
    f73c:	9304      	str	r3, [sp, #16]
    f73e:	f7ff fb5f 	bl	ee00 <quorem>
    f742:	f8dd b000 	ldr.w	fp, [sp]
    f746:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f74a:	f80b 3b01 	strb.w	r3, [fp], #1
    f74e:	2700      	movs	r7, #0
    f750:	e6eb      	b.n	f52a <_dtoa_r+0x602>
    f752:	4651      	mov	r1, sl
    f754:	4628      	mov	r0, r5
    f756:	f7fd fa57 	bl	cc08 <__mcmp>
    f75a:	2800      	cmp	r0, #0
    f75c:	f6bf aeba 	bge.w	f4d4 <_dtoa_r+0x5ac>
    f760:	4629      	mov	r1, r5
    f762:	2300      	movs	r3, #0
    f764:	220a      	movs	r2, #10
    f766:	4620      	mov	r0, r4
    f768:	f7fc fff8 	bl	c75c <__multadd>
    f76c:	9b04      	ldr	r3, [sp, #16]
    f76e:	1e5f      	subs	r7, r3, #1
    f770:	9b07      	ldr	r3, [sp, #28]
    f772:	4605      	mov	r5, r0
    f774:	2b00      	cmp	r3, #0
    f776:	f47f af4b 	bne.w	f610 <_dtoa_r+0x6e8>
    f77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f77c:	2b00      	cmp	r3, #0
    f77e:	f340 8218 	ble.w	fbb2 <_dtoa_r+0xc8a>
    f782:	4699      	mov	r9, r3
    f784:	e6b1      	b.n	f4ea <_dtoa_r+0x5c2>
    f786:	4bbc      	ldr	r3, [pc, #752]	; (fa78 <_dtoa_r+0xb50>)
    f788:	9300      	str	r3, [sp, #0]
    f78a:	3303      	adds	r3, #3
    f78c:	e4a4      	b.n	f0d8 <_dtoa_r+0x1b0>
    f78e:	201c      	movs	r0, #28
    f790:	e712      	b.n	f5b8 <_dtoa_r+0x690>
    f792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f796:	2800      	cmp	r0, #0
    f798:	f47f ae74 	bne.w	f484 <_dtoa_r+0x55c>
    f79c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f7a0:	2a00      	cmp	r2, #0
    f7a2:	f000 80f4 	beq.w	f98e <_dtoa_r+0xa66>
    f7a6:	9b02      	ldr	r3, [sp, #8]
    f7a8:	9308      	str	r3, [sp, #32]
    f7aa:	e66d      	b.n	f488 <_dtoa_r+0x560>
    f7ac:	2301      	movs	r3, #1
    f7ae:	9307      	str	r3, [sp, #28]
    f7b0:	9b04      	ldr	r3, [sp, #16]
    f7b2:	445b      	add	r3, fp
    f7b4:	f103 0901 	add.w	r9, r3, #1
    f7b8:	f1b9 0f01 	cmp.w	r9, #1
    f7bc:	46cc      	mov	ip, r9
    f7be:	930b      	str	r3, [sp, #44]	; 0x2c
    f7c0:	bfb8      	it	lt
    f7c2:	f04f 0c01 	movlt.w	ip, #1
    f7c6:	2100      	movs	r1, #0
    f7c8:	f1bc 0f17 	cmp.w	ip, #23
    f7cc:	63e1      	str	r1, [r4, #60]	; 0x3c
    f7ce:	f77f acbc 	ble.w	f14a <_dtoa_r+0x222>
    f7d2:	2001      	movs	r0, #1
    f7d4:	2204      	movs	r2, #4
    f7d6:	0052      	lsls	r2, r2, #1
    f7d8:	f102 0314 	add.w	r3, r2, #20
    f7dc:	4563      	cmp	r3, ip
    f7de:	4601      	mov	r1, r0
    f7e0:	f100 0001 	add.w	r0, r0, #1
    f7e4:	d9f7      	bls.n	f7d6 <_dtoa_r+0x8ae>
    f7e6:	63e1      	str	r1, [r4, #60]	; 0x3c
    f7e8:	e4af      	b.n	f14a <_dtoa_r+0x222>
    f7ea:	2301      	movs	r3, #1
    f7ec:	9307      	str	r3, [sp, #28]
    f7ee:	f1bb 0f00 	cmp.w	fp, #0
    f7f2:	dd52      	ble.n	f89a <_dtoa_r+0x972>
    f7f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    f7f8:	46d9      	mov	r9, fp
    f7fa:	46dc      	mov	ip, fp
    f7fc:	e7e3      	b.n	f7c6 <_dtoa_r+0x89e>
    f7fe:	2300      	movs	r3, #0
    f800:	9307      	str	r3, [sp, #28]
    f802:	e7d5      	b.n	f7b0 <_dtoa_r+0x888>
    f804:	2300      	movs	r3, #0
    f806:	9307      	str	r3, [sp, #28]
    f808:	e7f1      	b.n	f7ee <_dtoa_r+0x8c6>
    f80a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    f80e:	9704      	str	r7, [sp, #16]
    f810:	f1b9 0f00 	cmp.w	r9, #0
    f814:	f47f ada1 	bne.w	f35a <_dtoa_r+0x432>
    f818:	4651      	mov	r1, sl
    f81a:	464b      	mov	r3, r9
    f81c:	2205      	movs	r2, #5
    f81e:	4620      	mov	r0, r4
    f820:	f7fc ff9c 	bl	c75c <__multadd>
    f824:	4601      	mov	r1, r0
    f826:	4682      	mov	sl, r0
    f828:	4628      	mov	r0, r5
    f82a:	f7fd f9ed 	bl	cc08 <__mcmp>
    f82e:	2800      	cmp	r0, #0
    f830:	f77f ad93 	ble.w	f35a <_dtoa_r+0x432>
    f834:	9b04      	ldr	r3, [sp, #16]
    f836:	f103 0b01 	add.w	fp, r3, #1
    f83a:	9b00      	ldr	r3, [sp, #0]
    f83c:	2231      	movs	r2, #49	; 0x31
    f83e:	4698      	mov	r8, r3
    f840:	f803 2b01 	strb.w	r2, [r3], #1
    f844:	9300      	str	r3, [sp, #0]
    f846:	4651      	mov	r1, sl
    f848:	4620      	mov	r0, r4
    f84a:	f7fc ff7d 	bl	c748 <_Bfree>
    f84e:	f10b 0301 	add.w	r3, fp, #1
    f852:	f8dd 9000 	ldr.w	r9, [sp]
    f856:	9304      	str	r3, [sp, #16]
    f858:	f8cd 8000 	str.w	r8, [sp]
    f85c:	2e00      	cmp	r6, #0
    f85e:	f47f ae8f 	bne.w	f580 <_dtoa_r+0x658>
    f862:	e691      	b.n	f588 <_dtoa_r+0x660>
    f864:	eba3 0a0a 	sub.w	sl, r3, sl
    f868:	e5c5      	b.n	f3f6 <_dtoa_r+0x4ce>
    f86a:	4631      	mov	r1, r6
    f86c:	4652      	mov	r2, sl
    f86e:	4620      	mov	r0, r4
    f870:	f7fd f8f2 	bl	ca58 <__pow5mult>
    f874:	462a      	mov	r2, r5
    f876:	4601      	mov	r1, r0
    f878:	4606      	mov	r6, r0
    f87a:	4620      	mov	r0, r4
    f87c:	f7fd f83e 	bl	c8fc <__multiply>
    f880:	4629      	mov	r1, r5
    f882:	4605      	mov	r5, r0
    f884:	4620      	mov	r0, r4
    f886:	f7fc ff5f 	bl	c748 <_Bfree>
    f88a:	e5ea      	b.n	f462 <_dtoa_r+0x53a>
    f88c:	2002      	movs	r0, #2
    f88e:	eeb0 5b48 	vmov.f64	d5, d8
    f892:	e481      	b.n	f198 <_dtoa_r+0x270>
    f894:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f898:	e68e      	b.n	f5b8 <_dtoa_r+0x690>
    f89a:	f04f 0b01 	mov.w	fp, #1
    f89e:	46d9      	mov	r9, fp
    f8a0:	e44f      	b.n	f142 <_dtoa_r+0x21a>
    f8a2:	d103      	bne.n	f8ac <_dtoa_r+0x984>
    f8a4:	9b01      	ldr	r3, [sp, #4]
    f8a6:	07db      	lsls	r3, r3, #31
    f8a8:	f53f ae4c 	bmi.w	f544 <_dtoa_r+0x61c>
    f8ac:	46d9      	mov	r9, fp
    f8ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f8b2:	2b30      	cmp	r3, #48	; 0x30
    f8b4:	d0fa      	beq.n	f8ac <_dtoa_r+0x984>
    f8b6:	e657      	b.n	f568 <_dtoa_r+0x640>
    f8b8:	9b04      	ldr	r3, [sp, #16]
    f8ba:	9a00      	ldr	r2, [sp, #0]
    f8bc:	3301      	adds	r3, #1
    f8be:	9304      	str	r3, [sp, #16]
    f8c0:	2331      	movs	r3, #49	; 0x31
    f8c2:	7013      	strb	r3, [r2, #0]
    f8c4:	e650      	b.n	f568 <_dtoa_r+0x640>
    f8c6:	f1ba 0f00 	cmp.w	sl, #0
    f8ca:	f000 8123 	beq.w	fb14 <_dtoa_r+0xbec>
    f8ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
    f8d2:	9b06      	ldr	r3, [sp, #24]
    f8d4:	9309      	str	r3, [sp, #36]	; 0x24
    f8d6:	4413      	add	r3, r2
    f8d8:	f8dd a020 	ldr.w	sl, [sp, #32]
    f8dc:	9306      	str	r3, [sp, #24]
    f8de:	4490      	add	r8, r2
    f8e0:	e592      	b.n	f408 <_dtoa_r+0x4e0>
    f8e2:	ee07 0a90 	vmov	s15, r0
    f8e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    f8ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    f8ee:	eea6 5b07 	vfma.f64	d5, d6, d7
    f8f2:	ee15 2a90 	vmov	r2, s11
    f8f6:	ec51 0b15 	vmov	r0, r1, d5
    f8fa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f8fe:	ec41 0b15 	vmov	d5, r0, r1
    f902:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f906:	ee36 7b47 	vsub.f64	d7, d6, d7
    f90a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f912:	f300 8137 	bgt.w	fb84 <_dtoa_r+0xc5c>
    f916:	eeb1 5b45 	vneg.f64	d5, d5
    f91a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f922:	f57f acfb 	bpl.w	f31c <_dtoa_r+0x3f4>
    f926:	f04f 0a00 	mov.w	sl, #0
    f92a:	4656      	mov	r6, sl
    f92c:	e515      	b.n	f35a <_dtoa_r+0x432>
    f92e:	f000 80f5 	beq.w	fb1c <_dtoa_r+0xbf4>
    f932:	9b04      	ldr	r3, [sp, #16]
    f934:	4951      	ldr	r1, [pc, #324]	; (fa7c <_dtoa_r+0xb54>)
    f936:	425a      	negs	r2, r3
    f938:	f002 000f 	and.w	r0, r2, #15
    f93c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    f940:	ed91 6b00 	vldr	d6, [r1]
    f944:	1112      	asrs	r2, r2, #4
    f946:	ee28 6b06 	vmul.f64	d6, d8, d6
    f94a:	f000 8142 	beq.w	fbd2 <_dtoa_r+0xcaa>
    f94e:	eeb0 7b46 	vmov.f64	d7, d6
    f952:	494b      	ldr	r1, [pc, #300]	; (fa80 <_dtoa_r+0xb58>)
    f954:	2600      	movs	r6, #0
    f956:	2002      	movs	r0, #2
    f958:	07d3      	lsls	r3, r2, #31
    f95a:	d505      	bpl.n	f968 <_dtoa_r+0xa40>
    f95c:	ed91 5b00 	vldr	d5, [r1]
    f960:	3001      	adds	r0, #1
    f962:	2601      	movs	r6, #1
    f964:	ee27 7b05 	vmul.f64	d7, d7, d5
    f968:	1052      	asrs	r2, r2, #1
    f96a:	f101 0108 	add.w	r1, r1, #8
    f96e:	d1f3      	bne.n	f958 <_dtoa_r+0xa30>
    f970:	2e00      	cmp	r6, #0
    f972:	fe06 6b07 	vseleq.f64	d6, d6, d7
    f976:	e41e      	b.n	f1b6 <_dtoa_r+0x28e>
    f978:	9b02      	ldr	r3, [sp, #8]
    f97a:	2b00      	cmp	r3, #0
    f97c:	f47f ae37 	bne.w	f5ee <_dtoa_r+0x6c6>
    f980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f984:	f3c1 0213 	ubfx	r2, r1, #0, #20
    f988:	2a00      	cmp	r2, #0
    f98a:	f040 8137 	bne.w	fbfc <_dtoa_r+0xcd4>
    f98e:	4a3d      	ldr	r2, [pc, #244]	; (fa84 <_dtoa_r+0xb5c>)
    f990:	400a      	ands	r2, r1
    f992:	2a00      	cmp	r2, #0
    f994:	f000 80fa 	beq.w	fb8c <_dtoa_r+0xc64>
    f998:	9b06      	ldr	r3, [sp, #24]
    f99a:	3301      	adds	r3, #1
    f99c:	9306      	str	r3, [sp, #24]
    f99e:	2301      	movs	r3, #1
    f9a0:	f108 0801 	add.w	r8, r8, #1
    f9a4:	9308      	str	r3, [sp, #32]
    f9a6:	e56f      	b.n	f488 <_dtoa_r+0x560>
    f9a8:	4629      	mov	r1, r5
    f9aa:	9a08      	ldr	r2, [sp, #32]
    f9ac:	4620      	mov	r0, r4
    f9ae:	f7fd f853 	bl	ca58 <__pow5mult>
    f9b2:	4605      	mov	r5, r0
    f9b4:	e55a      	b.n	f46c <_dtoa_r+0x544>
    f9b6:	2a00      	cmp	r2, #0
    f9b8:	dd12      	ble.n	f9e0 <_dtoa_r+0xab8>
    f9ba:	4629      	mov	r1, r5
    f9bc:	2201      	movs	r2, #1
    f9be:	4620      	mov	r0, r4
    f9c0:	9301      	str	r3, [sp, #4]
    f9c2:	f7fd f8a9 	bl	cb18 <__lshift>
    f9c6:	4651      	mov	r1, sl
    f9c8:	4605      	mov	r5, r0
    f9ca:	f7fd f91d 	bl	cc08 <__mcmp>
    f9ce:	2800      	cmp	r0, #0
    f9d0:	9b01      	ldr	r3, [sp, #4]
    f9d2:	f340 80e1 	ble.w	fb98 <_dtoa_r+0xc70>
    f9d6:	2b39      	cmp	r3, #57	; 0x39
    f9d8:	f000 80ca 	beq.w	fb70 <_dtoa_r+0xc48>
    f9dc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f9e0:	46b9      	mov	r9, r7
    f9e2:	f809 3b01 	strb.w	r3, [r9], #1
    f9e6:	9b04      	ldr	r3, [sp, #16]
    f9e8:	3301      	adds	r3, #1
    f9ea:	4637      	mov	r7, r6
    f9ec:	9304      	str	r3, [sp, #16]
    f9ee:	4646      	mov	r6, r8
    f9f0:	e5ba      	b.n	f568 <_dtoa_r+0x640>
    f9f2:	ee38 8b08 	vadd.f64	d8, d8, d8
    f9f6:	eeb4 8bc6 	vcmpe.f64	d8, d6
    f9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9fe:	dc0a      	bgt.n	fa16 <_dtoa_r+0xaee>
    fa00:	eeb4 8b46 	vcmp.f64	d8, d6
    fa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fa08:	f47f acdc 	bne.w	f3c4 <_dtoa_r+0x49c>
    fa0c:	ee17 3a10 	vmov	r3, s14
    fa10:	07d8      	lsls	r0, r3, #31
    fa12:	f57f acd7 	bpl.w	f3c4 <_dtoa_r+0x49c>
    fa16:	9a00      	ldr	r2, [sp, #0]
    fa18:	e454      	b.n	f2c4 <_dtoa_r+0x39c>
    fa1a:	6871      	ldr	r1, [r6, #4]
    fa1c:	4620      	mov	r0, r4
    fa1e:	f7fc fe6d 	bl	c6fc <_Balloc>
    fa22:	4607      	mov	r7, r0
    fa24:	2800      	cmp	r0, #0
    fa26:	f000 80de 	beq.w	fbe6 <_dtoa_r+0xcbe>
    fa2a:	6933      	ldr	r3, [r6, #16]
    fa2c:	3302      	adds	r3, #2
    fa2e:	009a      	lsls	r2, r3, #2
    fa30:	f106 010c 	add.w	r1, r6, #12
    fa34:	300c      	adds	r0, #12
    fa36:	f7f9 fad5 	bl	8fe4 <memcpy>
    fa3a:	4639      	mov	r1, r7
    fa3c:	2201      	movs	r2, #1
    fa3e:	4620      	mov	r0, r4
    fa40:	f7fd f86a 	bl	cb18 <__lshift>
    fa44:	4680      	mov	r8, r0
    fa46:	e5fe      	b.n	f646 <_dtoa_r+0x71e>
    fa48:	9b06      	ldr	r3, [sp, #24]
    fa4a:	eba3 0309 	sub.w	r3, r3, r9
    fa4e:	9309      	str	r3, [sp, #36]	; 0x24
    fa50:	e4da      	b.n	f408 <_dtoa_r+0x4e0>
    fa52:	2b39      	cmp	r3, #57	; 0x39
    fa54:	f000 808c 	beq.w	fb70 <_dtoa_r+0xc48>
    fa58:	46b9      	mov	r9, r7
    fa5a:	3301      	adds	r3, #1
    fa5c:	e7c1      	b.n	f9e2 <_dtoa_r+0xaba>
    fa5e:	9a04      	ldr	r2, [sp, #16]
    fa60:	3201      	adds	r2, #1
    fa62:	4637      	mov	r7, r6
    fa64:	9204      	str	r2, [sp, #16]
    fa66:	4646      	mov	r6, r8
    fa68:	e55f      	b.n	f52a <_dtoa_r+0x602>
    fa6a:	4629      	mov	r1, r5
    fa6c:	4620      	mov	r0, r4
    fa6e:	f7fc fff3 	bl	ca58 <__pow5mult>
    fa72:	4605      	mov	r5, r0
    fa74:	e4fa      	b.n	f46c <_dtoa_r+0x544>
    fa76:	bf00      	nop
    fa78:	20000d1c 	.word	0x20000d1c
    fa7c:	200002a8 	.word	0x200002a8
    fa80:	20000280 	.word	0x20000280
    fa84:	7ff00000 	.word	0x7ff00000
    fa88:	4b5e      	ldr	r3, [pc, #376]	; (fc04 <_dtoa_r+0xcdc>)
    fa8a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    fa8e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    fa92:	ed1c 3b02 	vldr	d3, [ip, #-8]
    fa96:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    fa9a:	ee36 7b47 	vsub.f64	d7, d6, d7
    fa9e:	ec41 0b16 	vmov	d6, r0, r1
    faa2:	ee15 1a90 	vmov	r1, s11
    faa6:	ee23 3b06 	vmul.f64	d3, d3, d6
    faaa:	9800      	ldr	r0, [sp, #0]
    faac:	3130      	adds	r1, #48	; 0x30
    faae:	2a01      	cmp	r2, #1
    fab0:	f800 1b01 	strb.w	r1, [r0], #1
    fab4:	f000 8083 	beq.w	fbbe <_dtoa_r+0xc96>
    fab8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fabc:	9b00      	ldr	r3, [sp, #0]
    fabe:	1899      	adds	r1, r3, r2
    fac0:	ee27 7b04 	vmul.f64	d7, d7, d4
    fac4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    fac8:	ee16 3a90 	vmov	r3, s13
    facc:	3330      	adds	r3, #48	; 0x30
    face:	f800 3b01 	strb.w	r3, [r0], #1
    fad2:	4281      	cmp	r1, r0
    fad4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    fad8:	ee37 7b45 	vsub.f64	d7, d7, d5
    fadc:	d1f0      	bne.n	fac0 <_dtoa_r+0xb98>
    fade:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fae2:	ee33 5b06 	vadd.f64	d5, d3, d6
    fae6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    faea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    faee:	f53f abe3 	bmi.w	f2b8 <_dtoa_r+0x390>
    faf2:	ee36 6b43 	vsub.f64	d6, d6, d3
    faf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    fafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fafe:	f77f ac0d 	ble.w	f31c <_dtoa_r+0x3f4>
    fb02:	4689      	mov	r9, r1
    fb04:	3901      	subs	r1, #1
    fb06:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    fb0a:	2b30      	cmp	r3, #48	; 0x30
    fb0c:	d0f9      	beq.n	fb02 <_dtoa_r+0xbda>
    fb0e:	1c73      	adds	r3, r6, #1
    fb10:	9304      	str	r3, [sp, #16]
    fb12:	e539      	b.n	f588 <_dtoa_r+0x660>
    fb14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fb16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    fb1a:	e6da      	b.n	f8d2 <_dtoa_r+0x9aa>
    fb1c:	2002      	movs	r0, #2
    fb1e:	eeb0 6b48 	vmov.f64	d6, d8
    fb22:	f7ff bb48 	b.w	f1b6 <_dtoa_r+0x28e>
    fb26:	f1b9 0f00 	cmp.w	r9, #0
    fb2a:	f43f aeda 	beq.w	f8e2 <_dtoa_r+0x9ba>
    fb2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fb30:	2a00      	cmp	r2, #0
    fb32:	f77f abf3 	ble.w	f31c <_dtoa_r+0x3f4>
    fb36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fb3a:	ee26 6b04 	vmul.f64	d6, d6, d4
    fb3e:	3001      	adds	r0, #1
    fb40:	ee07 0a90 	vmov	s15, r0
    fb44:	9b04      	ldr	r3, [sp, #16]
    fb46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    fb4a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    fb4e:	eea6 7b05 	vfma.f64	d7, d6, d5
    fb52:	ee17 ca90 	vmov	ip, s15
    fb56:	ec51 0b17 	vmov	r0, r1, d7
    fb5a:	1e5e      	subs	r6, r3, #1
    fb5c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    fb60:	f7ff bb47 	b.w	f1f2 <_dtoa_r+0x2ca>
    fb64:	9b04      	ldr	r3, [sp, #16]
    fb66:	3301      	adds	r3, #1
    fb68:	9304      	str	r3, [sp, #16]
    fb6a:	2331      	movs	r3, #49	; 0x31
    fb6c:	f7ff bbb1 	b.w	f2d2 <_dtoa_r+0x3aa>
    fb70:	9b04      	ldr	r3, [sp, #16]
    fb72:	46bb      	mov	fp, r7
    fb74:	3301      	adds	r3, #1
    fb76:	9304      	str	r3, [sp, #16]
    fb78:	2339      	movs	r3, #57	; 0x39
    fb7a:	4637      	mov	r7, r6
    fb7c:	f80b 3b01 	strb.w	r3, [fp], #1
    fb80:	4646      	mov	r6, r8
    fb82:	e4e1      	b.n	f548 <_dtoa_r+0x620>
    fb84:	f04f 0a00 	mov.w	sl, #0
    fb88:	4656      	mov	r6, sl
    fb8a:	e653      	b.n	f834 <_dtoa_r+0x90c>
    fb8c:	9208      	str	r2, [sp, #32]
    fb8e:	e47b      	b.n	f488 <_dtoa_r+0x560>
    fb90:	1c73      	adds	r3, r6, #1
    fb92:	9304      	str	r3, [sp, #16]
    fb94:	4689      	mov	r9, r1
    fb96:	e4f7      	b.n	f588 <_dtoa_r+0x660>
    fb98:	f47f af22 	bne.w	f9e0 <_dtoa_r+0xab8>
    fb9c:	07da      	lsls	r2, r3, #31
    fb9e:	f57f af1f 	bpl.w	f9e0 <_dtoa_r+0xab8>
    fba2:	e718      	b.n	f9d6 <_dtoa_r+0xaae>
    fba4:	2b39      	cmp	r3, #57	; 0x39
    fba6:	d0e3      	beq.n	fb70 <_dtoa_r+0xc48>
    fba8:	f1b9 0f00 	cmp.w	r9, #0
    fbac:	f73f af16 	bgt.w	f9dc <_dtoa_r+0xab4>
    fbb0:	e716      	b.n	f9e0 <_dtoa_r+0xab8>
    fbb2:	9b01      	ldr	r3, [sp, #4]
    fbb4:	2b02      	cmp	r3, #2
    fbb6:	f73f ae28 	bgt.w	f80a <_dtoa_r+0x8e2>
    fbba:	9704      	str	r7, [sp, #16]
    fbbc:	e5ba      	b.n	f734 <_dtoa_r+0x80c>
    fbbe:	4601      	mov	r1, r0
    fbc0:	e78d      	b.n	fade <_dtoa_r+0xbb6>
    fbc2:	9b01      	ldr	r3, [sp, #4]
    fbc4:	2b02      	cmp	r3, #2
    fbc6:	f73f ae20 	bgt.w	f80a <_dtoa_r+0x8e2>
    fbca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    fbce:	9704      	str	r7, [sp, #16]
    fbd0:	e52b      	b.n	f62a <_dtoa_r+0x702>
    fbd2:	2002      	movs	r0, #2
    fbd4:	f7ff baef 	b.w	f1b6 <_dtoa_r+0x28e>
    fbd8:	4b0b      	ldr	r3, [pc, #44]	; (fc08 <_dtoa_r+0xce0>)
    fbda:	480c      	ldr	r0, [pc, #48]	; (fc0c <_dtoa_r+0xce4>)
    fbdc:	2200      	movs	r2, #0
    fbde:	f240 11af 	movw	r1, #431	; 0x1af
    fbe2:	f7ff f8b1 	bl	ed48 <__assert_func>
    fbe6:	4b08      	ldr	r3, [pc, #32]	; (fc08 <_dtoa_r+0xce0>)
    fbe8:	4808      	ldr	r0, [pc, #32]	; (fc0c <_dtoa_r+0xce4>)
    fbea:	463a      	mov	r2, r7
    fbec:	f240 21ef 	movw	r1, #751	; 0x2ef
    fbf0:	f7ff f8aa 	bl	ed48 <__assert_func>
    fbf4:	4b06      	ldr	r3, [pc, #24]	; (fc10 <_dtoa_r+0xce8>)
    fbf6:	9300      	str	r3, [sp, #0]
    fbf8:	f7ff b9d2 	b.w	efa0 <_dtoa_r+0x78>
    fbfc:	9b02      	ldr	r3, [sp, #8]
    fbfe:	9308      	str	r3, [sp, #32]
    fc00:	e4f7      	b.n	f5f2 <_dtoa_r+0x6ca>
    fc02:	bf00      	nop
    fc04:	200002a8 	.word	0x200002a8
    fc08:	20000b74 	.word	0x20000b74
    fc0c:	20000d20 	.word	0x20000d20
    fc10:	20000d10 	.word	0x20000d10

0000fc14 <_wcrtomb_r>:
    fc14:	b570      	push	{r4, r5, r6, lr}
    fc16:	4605      	mov	r5, r0
    fc18:	b084      	sub	sp, #16
    fc1a:	b15b      	cbz	r3, fc34 <_wcrtomb_r+0x20>
    fc1c:	461c      	mov	r4, r3
    fc1e:	b169      	cbz	r1, fc3c <_wcrtomb_r+0x28>
    fc20:	4b0e      	ldr	r3, [pc, #56]	; (fc5c <_wcrtomb_r+0x48>)
    fc22:	4628      	mov	r0, r5
    fc24:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    fc28:	4623      	mov	r3, r4
    fc2a:	47b0      	blx	r6
    fc2c:	1c43      	adds	r3, r0, #1
    fc2e:	d00f      	beq.n	fc50 <_wcrtomb_r+0x3c>
    fc30:	b004      	add	sp, #16
    fc32:	bd70      	pop	{r4, r5, r6, pc}
    fc34:	f500 7482 	add.w	r4, r0, #260	; 0x104
    fc38:	2900      	cmp	r1, #0
    fc3a:	d1f1      	bne.n	fc20 <_wcrtomb_r+0xc>
    fc3c:	4a07      	ldr	r2, [pc, #28]	; (fc5c <_wcrtomb_r+0x48>)
    fc3e:	4623      	mov	r3, r4
    fc40:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    fc44:	4628      	mov	r0, r5
    fc46:	460a      	mov	r2, r1
    fc48:	a901      	add	r1, sp, #4
    fc4a:	47b0      	blx	r6
    fc4c:	1c43      	adds	r3, r0, #1
    fc4e:	d1ef      	bne.n	fc30 <_wcrtomb_r+0x1c>
    fc50:	2200      	movs	r2, #0
    fc52:	238a      	movs	r3, #138	; 0x8a
    fc54:	6022      	str	r2, [r4, #0]
    fc56:	602b      	str	r3, [r5, #0]
    fc58:	b004      	add	sp, #16
    fc5a:	bd70      	pop	{r4, r5, r6, pc}
    fc5c:	200044ac 	.word	0x200044ac

0000fc60 <_wcsrtombs_r>:
    fc60:	b510      	push	{r4, lr}
    fc62:	b082      	sub	sp, #8
    fc64:	9c04      	ldr	r4, [sp, #16]
    fc66:	e9cd 3400 	strd	r3, r4, [sp]
    fc6a:	f04f 33ff 	mov.w	r3, #4294967295
    fc6e:	f001 fbc7 	bl	11400 <_wcsnrtombs_r>
    fc72:	b002      	add	sp, #8
    fc74:	bd10      	pop	{r4, pc}
    fc76:	bf00      	nop

0000fc78 <fiprintf>:
    fc78:	b40e      	push	{r1, r2, r3}
    fc7a:	b510      	push	{r4, lr}
    fc7c:	b083      	sub	sp, #12
    fc7e:	ab05      	add	r3, sp, #20
    fc80:	4c06      	ldr	r4, [pc, #24]	; (fc9c <fiprintf+0x24>)
    fc82:	f853 2b04 	ldr.w	r2, [r3], #4
    fc86:	9301      	str	r3, [sp, #4]
    fc88:	4601      	mov	r1, r0
    fc8a:	6820      	ldr	r0, [r4, #0]
    fc8c:	f000 f8c4 	bl	fe18 <_vfiprintf_r>
    fc90:	b003      	add	sp, #12
    fc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc96:	b003      	add	sp, #12
    fc98:	4770      	bx	lr
    fc9a:	bf00      	nop
    fc9c:	20004a34 	.word	0x20004a34

0000fca0 <__ssprint_r>:
    fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fca4:	6893      	ldr	r3, [r2, #8]
    fca6:	6817      	ldr	r7, [r2, #0]
    fca8:	b083      	sub	sp, #12
    fcaa:	4692      	mov	sl, r2
    fcac:	2b00      	cmp	r3, #0
    fcae:	d070      	beq.n	fd92 <__ssprint_r+0xf2>
    fcb0:	4681      	mov	r9, r0
    fcb2:	688a      	ldr	r2, [r1, #8]
    fcb4:	6808      	ldr	r0, [r1, #0]
    fcb6:	460c      	mov	r4, r1
    fcb8:	3708      	adds	r7, #8
    fcba:	e043      	b.n	fd44 <__ssprint_r+0xa4>
    fcbc:	89a3      	ldrh	r3, [r4, #12]
    fcbe:	f413 6f90 	tst.w	r3, #1152	; 0x480
    fcc2:	d02e      	beq.n	fd22 <__ssprint_r+0x82>
    fcc4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    fcc8:	eba0 0801 	sub.w	r8, r0, r1
    fccc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fcd0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    fcd4:	f108 0001 	add.w	r0, r8, #1
    fcd8:	1076      	asrs	r6, r6, #1
    fcda:	4428      	add	r0, r5
    fcdc:	42b0      	cmp	r0, r6
    fcde:	4632      	mov	r2, r6
    fce0:	bf84      	itt	hi
    fce2:	4606      	movhi	r6, r0
    fce4:	4632      	movhi	r2, r6
    fce6:	055b      	lsls	r3, r3, #21
    fce8:	d537      	bpl.n	fd5a <__ssprint_r+0xba>
    fcea:	4611      	mov	r1, r2
    fcec:	4648      	mov	r0, r9
    fcee:	f7fa ff3f 	bl	ab70 <_malloc_r>
    fcf2:	9001      	str	r0, [sp, #4]
    fcf4:	2800      	cmp	r0, #0
    fcf6:	d03a      	beq.n	fd6e <__ssprint_r+0xce>
    fcf8:	4642      	mov	r2, r8
    fcfa:	6921      	ldr	r1, [r4, #16]
    fcfc:	f7f9 f972 	bl	8fe4 <memcpy>
    fd00:	89a2      	ldrh	r2, [r4, #12]
    fd02:	9b01      	ldr	r3, [sp, #4]
    fd04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    fd08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    fd0c:	81a2      	strh	r2, [r4, #12]
    fd0e:	eba6 0208 	sub.w	r2, r6, r8
    fd12:	eb03 0008 	add.w	r0, r3, r8
    fd16:	6166      	str	r6, [r4, #20]
    fd18:	60a2      	str	r2, [r4, #8]
    fd1a:	6123      	str	r3, [r4, #16]
    fd1c:	6020      	str	r0, [r4, #0]
    fd1e:	462e      	mov	r6, r5
    fd20:	46a8      	mov	r8, r5
    fd22:	4642      	mov	r2, r8
    fd24:	4659      	mov	r1, fp
    fd26:	f7fb feef 	bl	bb08 <memmove>
    fd2a:	f8da 3008 	ldr.w	r3, [sl, #8]
    fd2e:	68a2      	ldr	r2, [r4, #8]
    fd30:	6820      	ldr	r0, [r4, #0]
    fd32:	1b92      	subs	r2, r2, r6
    fd34:	4440      	add	r0, r8
    fd36:	1b5b      	subs	r3, r3, r5
    fd38:	60a2      	str	r2, [r4, #8]
    fd3a:	6020      	str	r0, [r4, #0]
    fd3c:	f8ca 3008 	str.w	r3, [sl, #8]
    fd40:	b33b      	cbz	r3, fd92 <__ssprint_r+0xf2>
    fd42:	3708      	adds	r7, #8
    fd44:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    fd48:	2d00      	cmp	r5, #0
    fd4a:	d0fa      	beq.n	fd42 <__ssprint_r+0xa2>
    fd4c:	42aa      	cmp	r2, r5
    fd4e:	4616      	mov	r6, r2
    fd50:	4690      	mov	r8, r2
    fd52:	d9b3      	bls.n	fcbc <__ssprint_r+0x1c>
    fd54:	462e      	mov	r6, r5
    fd56:	46a8      	mov	r8, r5
    fd58:	e7e3      	b.n	fd22 <__ssprint_r+0x82>
    fd5a:	4648      	mov	r0, r9
    fd5c:	f7fb f9d0 	bl	b100 <_realloc_r>
    fd60:	4603      	mov	r3, r0
    fd62:	2800      	cmp	r0, #0
    fd64:	d1d3      	bne.n	fd0e <__ssprint_r+0x6e>
    fd66:	6921      	ldr	r1, [r4, #16]
    fd68:	4648      	mov	r0, r9
    fd6a:	f7fc fbab 	bl	c4c4 <_free_r>
    fd6e:	89a3      	ldrh	r3, [r4, #12]
    fd70:	220c      	movs	r2, #12
    fd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd76:	f8c9 2000 	str.w	r2, [r9]
    fd7a:	f04f 30ff 	mov.w	r0, #4294967295
    fd7e:	81a3      	strh	r3, [r4, #12]
    fd80:	2200      	movs	r2, #0
    fd82:	2300      	movs	r3, #0
    fd84:	f8ca 2008 	str.w	r2, [sl, #8]
    fd88:	f8ca 3004 	str.w	r3, [sl, #4]
    fd8c:	b003      	add	sp, #12
    fd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd92:	2000      	movs	r0, #0
    fd94:	2300      	movs	r3, #0
    fd96:	f8ca 3004 	str.w	r3, [sl, #4]
    fd9a:	b003      	add	sp, #12
    fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fda0 <__sprint_r.part.0>:
    fda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fda4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    fda6:	049c      	lsls	r4, r3, #18
    fda8:	4690      	mov	r8, r2
    fdaa:	d52d      	bpl.n	fe08 <__sprint_r.part.0+0x68>
    fdac:	6893      	ldr	r3, [r2, #8]
    fdae:	6812      	ldr	r2, [r2, #0]
    fdb0:	b343      	cbz	r3, fe04 <__sprint_r.part.0+0x64>
    fdb2:	468b      	mov	fp, r1
    fdb4:	4606      	mov	r6, r0
    fdb6:	f102 0908 	add.w	r9, r2, #8
    fdba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    fdbe:	ea5f 079a 	movs.w	r7, sl, lsr #2
    fdc2:	d015      	beq.n	fdf0 <__sprint_r.part.0+0x50>
    fdc4:	3d04      	subs	r5, #4
    fdc6:	2400      	movs	r4, #0
    fdc8:	e001      	b.n	fdce <__sprint_r.part.0+0x2e>
    fdca:	42a7      	cmp	r7, r4
    fdcc:	d00e      	beq.n	fdec <__sprint_r.part.0+0x4c>
    fdce:	f855 1f04 	ldr.w	r1, [r5, #4]!
    fdd2:	465a      	mov	r2, fp
    fdd4:	4630      	mov	r0, r6
    fdd6:	f001 fa5b 	bl	11290 <_fputwc_r>
    fdda:	1c43      	adds	r3, r0, #1
    fddc:	f104 0401 	add.w	r4, r4, #1
    fde0:	d1f3      	bne.n	fdca <__sprint_r.part.0+0x2a>
    fde2:	2300      	movs	r3, #0
    fde4:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fde8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdec:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fdf0:	f02a 0a03 	bic.w	sl, sl, #3
    fdf4:	eba3 030a 	sub.w	r3, r3, sl
    fdf8:	f8c8 3008 	str.w	r3, [r8, #8]
    fdfc:	f109 0908 	add.w	r9, r9, #8
    fe00:	2b00      	cmp	r3, #0
    fe02:	d1da      	bne.n	fdba <__sprint_r.part.0+0x1a>
    fe04:	2000      	movs	r0, #0
    fe06:	e7ec      	b.n	fde2 <__sprint_r.part.0+0x42>
    fe08:	f001 f80c 	bl	10e24 <__sfvwrite_r>
    fe0c:	2300      	movs	r3, #0
    fe0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fe12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe16:	bf00      	nop

0000fe18 <_vfiprintf_r>:
    fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe1c:	ed2d 8b02 	vpush	{d8}
    fe20:	b0c5      	sub	sp, #276	; 0x114
    fe22:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    fe26:	4683      	mov	fp, r0
    fe28:	ee08 1a10 	vmov	s16, r1
    fe2c:	4616      	mov	r6, r2
    fe2e:	2100      	movs	r1, #0
    fe30:	2208      	movs	r2, #8
    fe32:	4650      	mov	r0, sl
    fe34:	461c      	mov	r4, r3
    fe36:	9307      	str	r3, [sp, #28]
    fe38:	f7fb fee2 	bl	bc00 <memset>
    fe3c:	f1bb 0f00 	cmp.w	fp, #0
    fe40:	d004      	beq.n	fe4c <_vfiprintf_r+0x34>
    fe42:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    fe46:	2b00      	cmp	r3, #0
    fe48:	f000 86a0 	beq.w	10b8c <_vfiprintf_r+0xd74>
    fe4c:	ee18 2a10 	vmov	r2, s16
    fe50:	6e53      	ldr	r3, [r2, #100]	; 0x64
    fe52:	07db      	lsls	r3, r3, #31
    fe54:	f140 8513 	bpl.w	1087e <_vfiprintf_r+0xa66>
    fe58:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    fe5c:	b28a      	uxth	r2, r1
    fe5e:	0495      	lsls	r5, r2, #18
    fe60:	d40b      	bmi.n	fe7a <_vfiprintf_r+0x62>
    fe62:	ee18 3a10 	vmov	r3, s16
    fe66:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    fe6a:	8199      	strh	r1, [r3, #12]
    fe6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fe6e:	b28a      	uxth	r2, r1
    fe70:	ee18 1a10 	vmov	r1, s16
    fe74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    fe78:	664b      	str	r3, [r1, #100]	; 0x64
    fe7a:	0710      	lsls	r0, r2, #28
    fe7c:	f140 8105 	bpl.w	1008a <_vfiprintf_r+0x272>
    fe80:	ee18 3a10 	vmov	r3, s16
    fe84:	691b      	ldr	r3, [r3, #16]
    fe86:	2b00      	cmp	r3, #0
    fe88:	f000 80ff 	beq.w	1008a <_vfiprintf_r+0x272>
    fe8c:	f002 031a 	and.w	r3, r2, #26
    fe90:	2b0a      	cmp	r3, #10
    fe92:	f000 810a 	beq.w	100aa <_vfiprintf_r+0x292>
    fe96:	2300      	movs	r3, #0
    fe98:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    fe9c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    fea0:	aa1b      	add	r2, sp, #108	; 0x6c
    fea2:	930c      	str	r3, [sp, #48]	; 0x30
    fea4:	9218      	str	r2, [sp, #96]	; 0x60
    fea6:	4691      	mov	r9, r2
    fea8:	930b      	str	r3, [sp, #44]	; 0x2c
    feaa:	9305      	str	r3, [sp, #20]
    feac:	46b0      	mov	r8, r6
    feae:	4644      	mov	r4, r8
    feb0:	4ba8      	ldr	r3, [pc, #672]	; (10154 <_vfiprintf_r+0x33c>)
    feb2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    feb6:	f7fb ff8d 	bl	bdd4 <__locale_mb_cur_max>
    feba:	4622      	mov	r2, r4
    febc:	4603      	mov	r3, r0
    febe:	a912      	add	r1, sp, #72	; 0x48
    fec0:	f8cd a000 	str.w	sl, [sp]
    fec4:	4658      	mov	r0, fp
    fec6:	47a8      	blx	r5
    fec8:	2800      	cmp	r0, #0
    feca:	f000 8145 	beq.w	10158 <_vfiprintf_r+0x340>
    fece:	f2c0 8139 	blt.w	10144 <_vfiprintf_r+0x32c>
    fed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fed4:	2a25      	cmp	r2, #37	; 0x25
    fed6:	4603      	mov	r3, r0
    fed8:	d001      	beq.n	fede <_vfiprintf_r+0xc6>
    feda:	441c      	add	r4, r3
    fedc:	e7e8      	b.n	feb0 <_vfiprintf_r+0x98>
    fede:	ebb4 0608 	subs.w	r6, r4, r8
    fee2:	4605      	mov	r5, r0
    fee4:	f040 813c 	bne.w	10160 <_vfiprintf_r+0x348>
    fee8:	2300      	movs	r3, #0
    feea:	7861      	ldrb	r1, [r4, #1]
    feec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fef0:	f104 0801 	add.w	r8, r4, #1
    fef4:	9306      	str	r3, [sp, #24]
    fef6:	f04f 37ff 	mov.w	r7, #4294967295
    fefa:	461e      	mov	r6, r3
    fefc:	242b      	movs	r4, #43	; 0x2b
    fefe:	f108 0801 	add.w	r8, r8, #1
    ff02:	f1a1 0320 	sub.w	r3, r1, #32
    ff06:	2b5a      	cmp	r3, #90	; 0x5a
    ff08:	f200 8178 	bhi.w	101fc <_vfiprintf_r+0x3e4>
    ff0c:	e8df f013 	tbh	[pc, r3, lsl #1]
    ff10:	017602b5 	.word	0x017602b5
    ff14:	02b00176 	.word	0x02b00176
    ff18:	01760176 	.word	0x01760176
    ff1c:	006a0176 	.word	0x006a0176
    ff20:	01760176 	.word	0x01760176
    ff24:	028d027d 	.word	0x028d027d
    ff28:	02880176 	.word	0x02880176
    ff2c:	01760297 	.word	0x01760297
    ff30:	005b0292 	.word	0x005b0292
    ff34:	005b005b 	.word	0x005b005b
    ff38:	005b005b 	.word	0x005b005b
    ff3c:	005b005b 	.word	0x005b005b
    ff40:	005b005b 	.word	0x005b005b
    ff44:	01760176 	.word	0x01760176
    ff48:	01760176 	.word	0x01760176
    ff4c:	01760176 	.word	0x01760176
    ff50:	01760176 	.word	0x01760176
    ff54:	025c0176 	.word	0x025c0176
    ff58:	01760084 	.word	0x01760084
    ff5c:	01760176 	.word	0x01760176
    ff60:	01760176 	.word	0x01760176
    ff64:	01760176 	.word	0x01760176
    ff68:	01760176 	.word	0x01760176
    ff6c:	00e80176 	.word	0x00e80176
    ff70:	01760176 	.word	0x01760176
    ff74:	02330176 	.word	0x02330176
    ff78:	02da0176 	.word	0x02da0176
    ff7c:	01760176 	.word	0x01760176
    ff80:	0176058b 	.word	0x0176058b
    ff84:	01760176 	.word	0x01760176
    ff88:	01760176 	.word	0x01760176
    ff8c:	01760176 	.word	0x01760176
    ff90:	01760176 	.word	0x01760176
    ff94:	025c0176 	.word	0x025c0176
    ff98:	01760086 	.word	0x01760086
    ff9c:	01760176 	.word	0x01760176
    ffa0:	008602cd 	.word	0x008602cd
    ffa4:	0176007f 	.word	0x0176007f
    ffa8:	017602c0 	.word	0x017602c0
    ffac:	00ea02fd 	.word	0x00ea02fd
    ffb0:	007f02ed 	.word	0x007f02ed
    ffb4:	02330176 	.word	0x02330176
    ffb8:	0569007c 	.word	0x0569007c
    ffbc:	01760176 	.word	0x01760176
    ffc0:	0176056b 	.word	0x0176056b
    ffc4:	007c      	.short	0x007c
    ffc6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ffca:	2200      	movs	r2, #0
    ffcc:	f818 1b01 	ldrb.w	r1, [r8], #1
    ffd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ffd4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ffd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ffdc:	2b09      	cmp	r3, #9
    ffde:	d9f5      	bls.n	ffcc <_vfiprintf_r+0x1b4>
    ffe0:	9206      	str	r2, [sp, #24]
    ffe2:	e78e      	b.n	ff02 <_vfiprintf_r+0xea>
    ffe4:	4658      	mov	r0, fp
    ffe6:	f7fe fe1b 	bl	ec20 <_localeconv_r>
    ffea:	6843      	ldr	r3, [r0, #4]
    ffec:	930d      	str	r3, [sp, #52]	; 0x34
    ffee:	4618      	mov	r0, r3
    fff0:	f7fc f966 	bl	c2c0 <strlen>
    fff4:	900e      	str	r0, [sp, #56]	; 0x38
    fff6:	4605      	mov	r5, r0
    fff8:	4658      	mov	r0, fp
    fffa:	f7fe fe11 	bl	ec20 <_localeconv_r>
    fffe:	6883      	ldr	r3, [r0, #8]
   10000:	930b      	str	r3, [sp, #44]	; 0x2c
   10002:	2d00      	cmp	r5, #0
   10004:	f040 84d6 	bne.w	109b4 <_vfiprintf_r+0xb9c>
   10008:	f898 1000 	ldrb.w	r1, [r8]
   1000c:	e777      	b.n	fefe <_vfiprintf_r+0xe6>
   1000e:	f898 1000 	ldrb.w	r1, [r8]
   10012:	f046 0620 	orr.w	r6, r6, #32
   10016:	e772      	b.n	fefe <_vfiprintf_r+0xe6>
   10018:	f046 0610 	orr.w	r6, r6, #16
   1001c:	06b4      	lsls	r4, r6, #26
   1001e:	f140 818e 	bpl.w	1033e <_vfiprintf_r+0x526>
   10022:	9b07      	ldr	r3, [sp, #28]
   10024:	3307      	adds	r3, #7
   10026:	f023 0307 	bic.w	r3, r3, #7
   1002a:	461a      	mov	r2, r3
   1002c:	6859      	ldr	r1, [r3, #4]
   1002e:	f852 3b08 	ldr.w	r3, [r2], #8
   10032:	9207      	str	r2, [sp, #28]
   10034:	460a      	mov	r2, r1
   10036:	2900      	cmp	r1, #0
   10038:	f2c0 8470 	blt.w	1091c <_vfiprintf_r+0xb04>
   1003c:	1c79      	adds	r1, r7, #1
   1003e:	f000 85a2 	beq.w	10b86 <_vfiprintf_r+0xd6e>
   10042:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   10046:	9103      	str	r1, [sp, #12]
   10048:	ea53 0102 	orrs.w	r1, r3, r2
   1004c:	f000 843f 	beq.w	108ce <_vfiprintf_r+0xab6>
   10050:	2b0a      	cmp	r3, #10
   10052:	f172 0100 	sbcs.w	r1, r2, #0
   10056:	f080 8541 	bcs.w	10adc <_vfiprintf_r+0xcc4>
   1005a:	3330      	adds	r3, #48	; 0x30
   1005c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   10060:	9e03      	ldr	r6, [sp, #12]
   10062:	2301      	movs	r3, #1
   10064:	9304      	str	r3, [sp, #16]
   10066:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1006a:	9b04      	ldr	r3, [sp, #16]
   1006c:	42bb      	cmp	r3, r7
   1006e:	bfb8      	it	lt
   10070:	463b      	movlt	r3, r7
   10072:	9303      	str	r3, [sp, #12]
   10074:	2300      	movs	r3, #0
   10076:	9308      	str	r3, [sp, #32]
   10078:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1007c:	2b00      	cmp	r3, #0
   1007e:	f000 80cb 	beq.w	10218 <_vfiprintf_r+0x400>
   10082:	9b03      	ldr	r3, [sp, #12]
   10084:	3301      	adds	r3, #1
   10086:	9303      	str	r3, [sp, #12]
   10088:	e0c6      	b.n	10218 <_vfiprintf_r+0x400>
   1008a:	ee18 1a10 	vmov	r1, s16
   1008e:	4658      	mov	r0, fp
   10090:	ee18 5a10 	vmov	r5, s16
   10094:	f001 f840 	bl	11118 <__swsetup_r>
   10098:	2800      	cmp	r0, #0
   1009a:	f040 8652 	bne.w	10d42 <_vfiprintf_r+0xf2a>
   1009e:	89aa      	ldrh	r2, [r5, #12]
   100a0:	f002 031a 	and.w	r3, r2, #26
   100a4:	2b0a      	cmp	r3, #10
   100a6:	f47f aef6 	bne.w	fe96 <_vfiprintf_r+0x7e>
   100aa:	ee18 1a10 	vmov	r1, s16
   100ae:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   100b2:	2b00      	cmp	r3, #0
   100b4:	f6ff aeef 	blt.w	fe96 <_vfiprintf_r+0x7e>
   100b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   100ba:	07db      	lsls	r3, r3, #31
   100bc:	d402      	bmi.n	100c4 <_vfiprintf_r+0x2ac>
   100be:	0597      	lsls	r7, r2, #22
   100c0:	f140 8612 	bpl.w	10ce8 <_vfiprintf_r+0xed0>
   100c4:	ee18 1a10 	vmov	r1, s16
   100c8:	4623      	mov	r3, r4
   100ca:	4632      	mov	r2, r6
   100cc:	4658      	mov	r0, fp
   100ce:	f000 fe69 	bl	10da4 <__sbprintf>
   100d2:	9005      	str	r0, [sp, #20]
   100d4:	9805      	ldr	r0, [sp, #20]
   100d6:	b045      	add	sp, #276	; 0x114
   100d8:	ecbd 8b02 	vpop	{d8}
   100dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100e0:	f046 0610 	orr.w	r6, r6, #16
   100e4:	f016 0220 	ands.w	r2, r6, #32
   100e8:	f000 8136 	beq.w	10358 <_vfiprintf_r+0x540>
   100ec:	9b07      	ldr	r3, [sp, #28]
   100ee:	3307      	adds	r3, #7
   100f0:	f023 0307 	bic.w	r3, r3, #7
   100f4:	4619      	mov	r1, r3
   100f6:	685a      	ldr	r2, [r3, #4]
   100f8:	f851 3b08 	ldr.w	r3, [r1], #8
   100fc:	9107      	str	r1, [sp, #28]
   100fe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10102:	9103      	str	r1, [sp, #12]
   10104:	2100      	movs	r1, #0
   10106:	2000      	movs	r0, #0
   10108:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1010c:	1c78      	adds	r0, r7, #1
   1010e:	f000 8210 	beq.w	10532 <_vfiprintf_r+0x71a>
   10112:	9803      	ldr	r0, [sp, #12]
   10114:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   10118:	ea53 0002 	orrs.w	r0, r3, r2
   1011c:	f040 8208 	bne.w	10530 <_vfiprintf_r+0x718>
   10120:	2f00      	cmp	r7, #0
   10122:	f040 8538 	bne.w	10b96 <_vfiprintf_r+0xd7e>
   10126:	2900      	cmp	r1, #0
   10128:	f040 83d5 	bne.w	108d6 <_vfiprintf_r+0xabe>
   1012c:	9b03      	ldr	r3, [sp, #12]
   1012e:	f013 0301 	ands.w	r3, r3, #1
   10132:	9304      	str	r3, [sp, #16]
   10134:	f000 8411 	beq.w	1095a <_vfiprintf_r+0xb42>
   10138:	2330      	movs	r3, #48	; 0x30
   1013a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   1013e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   10142:	e792      	b.n	1006a <_vfiprintf_r+0x252>
   10144:	2208      	movs	r2, #8
   10146:	2100      	movs	r1, #0
   10148:	4650      	mov	r0, sl
   1014a:	f7fb fd59 	bl	bc00 <memset>
   1014e:	2301      	movs	r3, #1
   10150:	441c      	add	r4, r3
   10152:	e6ad      	b.n	feb0 <_vfiprintf_r+0x98>
   10154:	200044ac 	.word	0x200044ac
   10158:	ebb4 0608 	subs.w	r6, r4, r8
   1015c:	4605      	mov	r5, r0
   1015e:	d01b      	beq.n	10198 <_vfiprintf_r+0x380>
   10160:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10162:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   10164:	3301      	adds	r3, #1
   10166:	4432      	add	r2, r6
   10168:	2b07      	cmp	r3, #7
   1016a:	e9c9 8600 	strd	r8, r6, [r9]
   1016e:	921a      	str	r2, [sp, #104]	; 0x68
   10170:	9319      	str	r3, [sp, #100]	; 0x64
   10172:	dd1c      	ble.n	101ae <_vfiprintf_r+0x396>
   10174:	2a00      	cmp	r2, #0
   10176:	f000 83a6 	beq.w	108c6 <_vfiprintf_r+0xaae>
   1017a:	ee18 1a10 	vmov	r1, s16
   1017e:	aa18      	add	r2, sp, #96	; 0x60
   10180:	4658      	mov	r0, fp
   10182:	f7ff fe0d 	bl	fda0 <__sprint_r.part.0>
   10186:	bb20      	cbnz	r0, 101d2 <_vfiprintf_r+0x3ba>
   10188:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1018c:	9b05      	ldr	r3, [sp, #20]
   1018e:	4433      	add	r3, r6
   10190:	9305      	str	r3, [sp, #20]
   10192:	2d00      	cmp	r5, #0
   10194:	f47f aea8 	bne.w	fee8 <_vfiprintf_r+0xd0>
   10198:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1019a:	2b00      	cmp	r3, #0
   1019c:	f040 85c1 	bne.w	10d22 <_vfiprintf_r+0xf0a>
   101a0:	ee18 3a10 	vmov	r3, s16
   101a4:	2200      	movs	r2, #0
   101a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   101aa:	9219      	str	r2, [sp, #100]	; 0x64
   101ac:	e015      	b.n	101da <_vfiprintf_r+0x3c2>
   101ae:	f109 0908 	add.w	r9, r9, #8
   101b2:	e7eb      	b.n	1018c <_vfiprintf_r+0x374>
   101b4:	ee18 1a10 	vmov	r1, s16
   101b8:	aa18      	add	r2, sp, #96	; 0x60
   101ba:	4658      	mov	r0, fp
   101bc:	f7ff fdf0 	bl	fda0 <__sprint_r.part.0>
   101c0:	2800      	cmp	r0, #0
   101c2:	f000 80a6 	beq.w	10312 <_vfiprintf_r+0x4fa>
   101c6:	9b08      	ldr	r3, [sp, #32]
   101c8:	b11b      	cbz	r3, 101d2 <_vfiprintf_r+0x3ba>
   101ca:	9908      	ldr	r1, [sp, #32]
   101cc:	4658      	mov	r0, fp
   101ce:	f7fc f979 	bl	c4c4 <_free_r>
   101d2:	ee18 3a10 	vmov	r3, s16
   101d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   101da:	ee18 2a10 	vmov	r2, s16
   101de:	6e52      	ldr	r2, [r2, #100]	; 0x64
   101e0:	f012 0f01 	tst.w	r2, #1
   101e4:	b29a      	uxth	r2, r3
   101e6:	f000 80a0 	beq.w	1032a <_vfiprintf_r+0x512>
   101ea:	0650      	lsls	r0, r2, #25
   101ec:	f100 85b2 	bmi.w	10d54 <_vfiprintf_r+0xf3c>
   101f0:	9805      	ldr	r0, [sp, #20]
   101f2:	b045      	add	sp, #276	; 0x114
   101f4:	ecbd 8b02 	vpop	{d8}
   101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101fc:	2900      	cmp	r1, #0
   101fe:	d0cb      	beq.n	10198 <_vfiprintf_r+0x380>
   10200:	2300      	movs	r3, #0
   10202:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10206:	2301      	movs	r3, #1
   10208:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1020c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   10210:	ac2b      	add	r4, sp, #172	; 0xac
   10212:	2300      	movs	r3, #0
   10214:	9308      	str	r3, [sp, #32]
   10216:	461f      	mov	r7, r3
   10218:	f016 0302 	ands.w	r3, r6, #2
   1021c:	9309      	str	r3, [sp, #36]	; 0x24
   1021e:	d002      	beq.n	10226 <_vfiprintf_r+0x40e>
   10220:	9b03      	ldr	r3, [sp, #12]
   10222:	3302      	adds	r3, #2
   10224:	9303      	str	r3, [sp, #12]
   10226:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1022a:	930a      	str	r3, [sp, #40]	; 0x28
   1022c:	d105      	bne.n	1023a <_vfiprintf_r+0x422>
   1022e:	9b06      	ldr	r3, [sp, #24]
   10230:	9a03      	ldr	r2, [sp, #12]
   10232:	1a9d      	subs	r5, r3, r2
   10234:	2d00      	cmp	r5, #0
   10236:	f300 827b 	bgt.w	10730 <_vfiprintf_r+0x918>
   1023a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1023e:	1c41      	adds	r1, r0, #1
   10240:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10244:	b182      	cbz	r2, 10268 <_vfiprintf_r+0x450>
   10246:	2201      	movs	r2, #1
   10248:	3301      	adds	r3, #1
   1024a:	f8c9 2004 	str.w	r2, [r9, #4]
   1024e:	2907      	cmp	r1, #7
   10250:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   10254:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10258:	f8c9 2000 	str.w	r2, [r9]
   1025c:	f300 824a 	bgt.w	106f4 <_vfiprintf_r+0x8dc>
   10260:	4608      	mov	r0, r1
   10262:	f109 0908 	add.w	r9, r9, #8
   10266:	3101      	adds	r1, #1
   10268:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1026a:	b1e2      	cbz	r2, 102a6 <_vfiprintf_r+0x48e>
   1026c:	aa11      	add	r2, sp, #68	; 0x44
   1026e:	3302      	adds	r3, #2
   10270:	f8c9 2000 	str.w	r2, [r9]
   10274:	2907      	cmp	r1, #7
   10276:	f04f 0202 	mov.w	r2, #2
   1027a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1027e:	f8c9 2004 	str.w	r2, [r9, #4]
   10282:	f340 8250 	ble.w	10726 <_vfiprintf_r+0x90e>
   10286:	2b00      	cmp	r3, #0
   10288:	f000 8343 	beq.w	10912 <_vfiprintf_r+0xafa>
   1028c:	ee18 1a10 	vmov	r1, s16
   10290:	aa18      	add	r2, sp, #96	; 0x60
   10292:	4658      	mov	r0, fp
   10294:	f7ff fd84 	bl	fda0 <__sprint_r.part.0>
   10298:	2800      	cmp	r0, #0
   1029a:	d194      	bne.n	101c6 <_vfiprintf_r+0x3ae>
   1029c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   102a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102a4:	1c41      	adds	r1, r0, #1
   102a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   102a8:	2a80      	cmp	r2, #128	; 0x80
   102aa:	f000 8184 	beq.w	105b6 <_vfiprintf_r+0x79e>
   102ae:	9a04      	ldr	r2, [sp, #16]
   102b0:	1abd      	subs	r5, r7, r2
   102b2:	2d00      	cmp	r5, #0
   102b4:	f300 81d7 	bgt.w	10666 <_vfiprintf_r+0x84e>
   102b8:	9a04      	ldr	r2, [sp, #16]
   102ba:	f8c9 4000 	str.w	r4, [r9]
   102be:	4413      	add	r3, r2
   102c0:	2907      	cmp	r1, #7
   102c2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   102c6:	f8c9 2004 	str.w	r2, [r9, #4]
   102ca:	f340 816e 	ble.w	105aa <_vfiprintf_r+0x792>
   102ce:	2b00      	cmp	r3, #0
   102d0:	f000 8275 	beq.w	107be <_vfiprintf_r+0x9a6>
   102d4:	ee18 1a10 	vmov	r1, s16
   102d8:	aa18      	add	r2, sp, #96	; 0x60
   102da:	4658      	mov	r0, fp
   102dc:	f7ff fd60 	bl	fda0 <__sprint_r.part.0>
   102e0:	2800      	cmp	r0, #0
   102e2:	f47f af70 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   102e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   102e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   102ec:	0775      	lsls	r5, r6, #29
   102ee:	d505      	bpl.n	102fc <_vfiprintf_r+0x4e4>
   102f0:	9a06      	ldr	r2, [sp, #24]
   102f2:	9903      	ldr	r1, [sp, #12]
   102f4:	1a54      	subs	r4, r2, r1
   102f6:	2c00      	cmp	r4, #0
   102f8:	f300 826b 	bgt.w	107d2 <_vfiprintf_r+0x9ba>
   102fc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   10300:	9803      	ldr	r0, [sp, #12]
   10302:	4281      	cmp	r1, r0
   10304:	bfac      	ite	ge
   10306:	1852      	addge	r2, r2, r1
   10308:	1812      	addlt	r2, r2, r0
   1030a:	9205      	str	r2, [sp, #20]
   1030c:	2b00      	cmp	r3, #0
   1030e:	f47f af51 	bne.w	101b4 <_vfiprintf_r+0x39c>
   10312:	9908      	ldr	r1, [sp, #32]
   10314:	2300      	movs	r3, #0
   10316:	9319      	str	r3, [sp, #100]	; 0x64
   10318:	2900      	cmp	r1, #0
   1031a:	f000 8149 	beq.w	105b0 <_vfiprintf_r+0x798>
   1031e:	4658      	mov	r0, fp
   10320:	f7fc f8d0 	bl	c4c4 <_free_r>
   10324:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10328:	e5c1      	b.n	feae <_vfiprintf_r+0x96>
   1032a:	059c      	lsls	r4, r3, #22
   1032c:	f53f af5d 	bmi.w	101ea <_vfiprintf_r+0x3d2>
   10330:	ee18 4a10 	vmov	r4, s16
   10334:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10336:	f7fb fde9 	bl	bf0c <__retarget_lock_release_recursive>
   1033a:	89a2      	ldrh	r2, [r4, #12]
   1033c:	e755      	b.n	101ea <_vfiprintf_r+0x3d2>
   1033e:	06f0      	lsls	r0, r6, #27
   10340:	9a07      	ldr	r2, [sp, #28]
   10342:	f100 831f 	bmi.w	10984 <_vfiprintf_r+0xb6c>
   10346:	0671      	lsls	r1, r6, #25
   10348:	f140 8319 	bpl.w	1097e <_vfiprintf_r+0xb66>
   1034c:	f932 3b04 	ldrsh.w	r3, [r2], #4
   10350:	9207      	str	r2, [sp, #28]
   10352:	17da      	asrs	r2, r3, #31
   10354:	4611      	mov	r1, r2
   10356:	e66e      	b.n	10036 <_vfiprintf_r+0x21e>
   10358:	f016 0310 	ands.w	r3, r6, #16
   1035c:	9907      	ldr	r1, [sp, #28]
   1035e:	f040 8309 	bne.w	10974 <_vfiprintf_r+0xb5c>
   10362:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   10366:	f000 8301 	beq.w	1096c <_vfiprintf_r+0xb54>
   1036a:	461a      	mov	r2, r3
   1036c:	f851 3b04 	ldr.w	r3, [r1], #4
   10370:	9107      	str	r1, [sp, #28]
   10372:	b29b      	uxth	r3, r3
   10374:	e6c3      	b.n	100fe <_vfiprintf_r+0x2e6>
   10376:	9b07      	ldr	r3, [sp, #28]
   10378:	461a      	mov	r2, r3
   1037a:	2300      	movs	r3, #0
   1037c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10380:	4613      	mov	r3, r2
   10382:	f853 4b04 	ldr.w	r4, [r3], #4
   10386:	9303      	str	r3, [sp, #12]
   10388:	2c00      	cmp	r4, #0
   1038a:	f000 8412 	beq.w	10bb2 <_vfiprintf_r+0xd9a>
   1038e:	2953      	cmp	r1, #83	; 0x53
   10390:	f000 8365 	beq.w	10a5e <_vfiprintf_r+0xc46>
   10394:	f016 0510 	ands.w	r5, r6, #16
   10398:	f040 8361 	bne.w	10a5e <_vfiprintf_r+0xc46>
   1039c:	1c7b      	adds	r3, r7, #1
   1039e:	f000 84b3 	beq.w	10d08 <_vfiprintf_r+0xef0>
   103a2:	463a      	mov	r2, r7
   103a4:	4629      	mov	r1, r5
   103a6:	4620      	mov	r0, r4
   103a8:	f7fe fc42 	bl	ec30 <memchr>
   103ac:	9008      	str	r0, [sp, #32]
   103ae:	2800      	cmp	r0, #0
   103b0:	f000 849f 	beq.w	10cf2 <_vfiprintf_r+0xeda>
   103b4:	1b03      	subs	r3, r0, r4
   103b6:	9a03      	ldr	r2, [sp, #12]
   103b8:	9304      	str	r3, [sp, #16]
   103ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103be:	462f      	mov	r7, r5
   103c0:	9207      	str	r2, [sp, #28]
   103c2:	9303      	str	r3, [sp, #12]
   103c4:	9508      	str	r5, [sp, #32]
   103c6:	e657      	b.n	10078 <_vfiprintf_r+0x260>
   103c8:	2943      	cmp	r1, #67	; 0x43
   103ca:	d002      	beq.n	103d2 <_vfiprintf_r+0x5ba>
   103cc:	06f5      	lsls	r5, r6, #27
   103ce:	f140 832d 	bpl.w	10a2c <_vfiprintf_r+0xc14>
   103d2:	9d07      	ldr	r5, [sp, #28]
   103d4:	2208      	movs	r2, #8
   103d6:	2100      	movs	r1, #0
   103d8:	a816      	add	r0, sp, #88	; 0x58
   103da:	ac2b      	add	r4, sp, #172	; 0xac
   103dc:	f7fb fc10 	bl	bc00 <memset>
   103e0:	ab16      	add	r3, sp, #88	; 0x58
   103e2:	f855 2b04 	ldr.w	r2, [r5], #4
   103e6:	4621      	mov	r1, r4
   103e8:	4658      	mov	r0, fp
   103ea:	f7ff fc13 	bl	fc14 <_wcrtomb_r>
   103ee:	4603      	mov	r3, r0
   103f0:	3301      	adds	r3, #1
   103f2:	9004      	str	r0, [sp, #16]
   103f4:	f000 84b3 	beq.w	10d5e <_vfiprintf_r+0xf46>
   103f8:	9b04      	ldr	r3, [sp, #16]
   103fa:	9507      	str	r5, [sp, #28]
   103fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10400:	9303      	str	r3, [sp, #12]
   10402:	2300      	movs	r3, #0
   10404:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10408:	e703      	b.n	10212 <_vfiprintf_r+0x3fa>
   1040a:	9b07      	ldr	r3, [sp, #28]
   1040c:	f853 2b04 	ldr.w	r2, [r3], #4
   10410:	9206      	str	r2, [sp, #24]
   10412:	2a00      	cmp	r2, #0
   10414:	f280 829c 	bge.w	10950 <_vfiprintf_r+0xb38>
   10418:	9a06      	ldr	r2, [sp, #24]
   1041a:	4252      	negs	r2, r2
   1041c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10420:	f898 1000 	ldrb.w	r1, [r8]
   10424:	f046 0604 	orr.w	r6, r6, #4
   10428:	e569      	b.n	fefe <_vfiprintf_r+0xe6>
   1042a:	f898 1000 	ldrb.w	r1, [r8]
   1042e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   10432:	e564      	b.n	fefe <_vfiprintf_r+0xe6>
   10434:	f898 1000 	ldrb.w	r1, [r8]
   10438:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1043c:	e55f      	b.n	fefe <_vfiprintf_r+0xe6>
   1043e:	4642      	mov	r2, r8
   10440:	f812 1b01 	ldrb.w	r1, [r2], #1
   10444:	292a      	cmp	r1, #42	; 0x2a
   10446:	f000 8496 	beq.w	10d76 <_vfiprintf_r+0xf5e>
   1044a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1044e:	2b09      	cmp	r3, #9
   10450:	4690      	mov	r8, r2
   10452:	f04f 0700 	mov.w	r7, #0
   10456:	f63f ad54 	bhi.w	ff02 <_vfiprintf_r+0xea>
   1045a:	f818 1b01 	ldrb.w	r1, [r8], #1
   1045e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   10462:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   10466:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1046a:	2b09      	cmp	r3, #9
   1046c:	d9f5      	bls.n	1045a <_vfiprintf_r+0x642>
   1046e:	e548      	b.n	ff02 <_vfiprintf_r+0xea>
   10470:	f898 1000 	ldrb.w	r1, [r8]
   10474:	f046 0601 	orr.w	r6, r6, #1
   10478:	e541      	b.n	fefe <_vfiprintf_r+0xe6>
   1047a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1047e:	2b00      	cmp	r3, #0
   10480:	f47f adc2 	bne.w	10008 <_vfiprintf_r+0x1f0>
   10484:	2320      	movs	r3, #32
   10486:	f898 1000 	ldrb.w	r1, [r8]
   1048a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1048e:	e536      	b.n	fefe <_vfiprintf_r+0xe6>
   10490:	f898 1000 	ldrb.w	r1, [r8]
   10494:	296c      	cmp	r1, #108	; 0x6c
   10496:	bf03      	ittte	eq
   10498:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1049c:	f046 0620 	orreq.w	r6, r6, #32
   104a0:	f108 0801 	addeq.w	r8, r8, #1
   104a4:	f046 0610 	orrne.w	r6, r6, #16
   104a8:	e529      	b.n	fefe <_vfiprintf_r+0xe6>
   104aa:	f898 1000 	ldrb.w	r1, [r8]
   104ae:	2968      	cmp	r1, #104	; 0x68
   104b0:	bf03      	ittte	eq
   104b2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   104b6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   104ba:	f108 0801 	addeq.w	r8, r8, #1
   104be:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   104c2:	e51c      	b.n	fefe <_vfiprintf_r+0xe6>
   104c4:	f046 0310 	orr.w	r3, r6, #16
   104c8:	9303      	str	r3, [sp, #12]
   104ca:	9b03      	ldr	r3, [sp, #12]
   104cc:	f013 0220 	ands.w	r2, r3, #32
   104d0:	f000 8206 	beq.w	108e0 <_vfiprintf_r+0xac8>
   104d4:	9b07      	ldr	r3, [sp, #28]
   104d6:	3307      	adds	r3, #7
   104d8:	f023 0307 	bic.w	r3, r3, #7
   104dc:	4619      	mov	r1, r3
   104de:	685a      	ldr	r2, [r3, #4]
   104e0:	f851 3b08 	ldr.w	r3, [r1], #8
   104e4:	9107      	str	r1, [sp, #28]
   104e6:	2101      	movs	r1, #1
   104e8:	e60d      	b.n	10106 <_vfiprintf_r+0x2ee>
   104ea:	9a07      	ldr	r2, [sp, #28]
   104ec:	f046 0302 	orr.w	r3, r6, #2
   104f0:	9303      	str	r3, [sp, #12]
   104f2:	f852 3b04 	ldr.w	r3, [r2], #4
   104f6:	9207      	str	r2, [sp, #28]
   104f8:	f647 0230 	movw	r2, #30768	; 0x7830
   104fc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   10500:	4ab8      	ldr	r2, [pc, #736]	; (107e4 <_vfiprintf_r+0x9cc>)
   10502:	920c      	str	r2, [sp, #48]	; 0x30
   10504:	2102      	movs	r1, #2
   10506:	2200      	movs	r2, #0
   10508:	e5fd      	b.n	10106 <_vfiprintf_r+0x2ee>
   1050a:	06b7      	lsls	r7, r6, #26
   1050c:	f100 8248 	bmi.w	109a0 <_vfiprintf_r+0xb88>
   10510:	06f5      	lsls	r5, r6, #27
   10512:	f100 8346 	bmi.w	10ba2 <_vfiprintf_r+0xd8a>
   10516:	0674      	lsls	r4, r6, #25
   10518:	f100 83d5 	bmi.w	10cc6 <_vfiprintf_r+0xeae>
   1051c:	05b0      	lsls	r0, r6, #22
   1051e:	f140 8340 	bpl.w	10ba2 <_vfiprintf_r+0xd8a>
   10522:	9b07      	ldr	r3, [sp, #28]
   10524:	9905      	ldr	r1, [sp, #20]
   10526:	f853 2b04 	ldr.w	r2, [r3], #4
   1052a:	9307      	str	r3, [sp, #28]
   1052c:	7011      	strb	r1, [r2, #0]
   1052e:	e4be      	b.n	feae <_vfiprintf_r+0x96>
   10530:	9603      	str	r6, [sp, #12]
   10532:	2901      	cmp	r1, #1
   10534:	f43f ad8c 	beq.w	10050 <_vfiprintf_r+0x238>
   10538:	2902      	cmp	r1, #2
   1053a:	ac44      	add	r4, sp, #272	; 0x110
   1053c:	d111      	bne.n	10562 <_vfiprintf_r+0x74a>
   1053e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10540:	f003 010f 	and.w	r1, r3, #15
   10544:	091b      	lsrs	r3, r3, #4
   10546:	5c41      	ldrb	r1, [r0, r1]
   10548:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1054c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   10550:	0912      	lsrs	r2, r2, #4
   10552:	ea53 0102 	orrs.w	r1, r3, r2
   10556:	d1f3      	bne.n	10540 <_vfiprintf_r+0x728>
   10558:	9e03      	ldr	r6, [sp, #12]
   1055a:	ab44      	add	r3, sp, #272	; 0x110
   1055c:	1b1b      	subs	r3, r3, r4
   1055e:	9304      	str	r3, [sp, #16]
   10560:	e583      	b.n	1006a <_vfiprintf_r+0x252>
   10562:	f003 0107 	and.w	r1, r3, #7
   10566:	08db      	lsrs	r3, r3, #3
   10568:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1056c:	08d2      	lsrs	r2, r2, #3
   1056e:	3130      	adds	r1, #48	; 0x30
   10570:	ea53 0502 	orrs.w	r5, r3, r2
   10574:	4620      	mov	r0, r4
   10576:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1057a:	d1f2      	bne.n	10562 <_vfiprintf_r+0x74a>
   1057c:	9e03      	ldr	r6, [sp, #12]
   1057e:	07f3      	lsls	r3, r6, #31
   10580:	d5eb      	bpl.n	1055a <_vfiprintf_r+0x742>
   10582:	2930      	cmp	r1, #48	; 0x30
   10584:	d0e8      	beq.n	10558 <_vfiprintf_r+0x740>
   10586:	2330      	movs	r3, #48	; 0x30
   10588:	3802      	subs	r0, #2
   1058a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1058e:	ab44      	add	r3, sp, #272	; 0x110
   10590:	1a1b      	subs	r3, r3, r0
   10592:	9e03      	ldr	r6, [sp, #12]
   10594:	9304      	str	r3, [sp, #16]
   10596:	4604      	mov	r4, r0
   10598:	e567      	b.n	1006a <_vfiprintf_r+0x252>
   1059a:	9b04      	ldr	r3, [sp, #16]
   1059c:	941b      	str	r4, [sp, #108]	; 0x6c
   1059e:	2201      	movs	r2, #1
   105a0:	931c      	str	r3, [sp, #112]	; 0x70
   105a2:	931a      	str	r3, [sp, #104]	; 0x68
   105a4:	9219      	str	r2, [sp, #100]	; 0x64
   105a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105aa:	f109 0908 	add.w	r9, r9, #8
   105ae:	e69d      	b.n	102ec <_vfiprintf_r+0x4d4>
   105b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105b4:	e47b      	b.n	feae <_vfiprintf_r+0x96>
   105b6:	9a06      	ldr	r2, [sp, #24]
   105b8:	9d03      	ldr	r5, [sp, #12]
   105ba:	1b55      	subs	r5, r2, r5
   105bc:	2d00      	cmp	r5, #0
   105be:	f77f ae76 	ble.w	102ae <_vfiprintf_r+0x496>
   105c2:	2d10      	cmp	r5, #16
   105c4:	f340 83bb 	ble.w	10d3e <_vfiprintf_r+0xf26>
   105c8:	9409      	str	r4, [sp, #36]	; 0x24
   105ca:	ee18 4a10 	vmov	r4, s16
   105ce:	e007      	b.n	105e0 <_vfiprintf_r+0x7c8>
   105d0:	f100 0c02 	add.w	ip, r0, #2
   105d4:	f109 0908 	add.w	r9, r9, #8
   105d8:	4610      	mov	r0, r2
   105da:	3d10      	subs	r5, #16
   105dc:	2d10      	cmp	r5, #16
   105de:	dd1e      	ble.n	1061e <_vfiprintf_r+0x806>
   105e0:	4981      	ldr	r1, [pc, #516]	; (107e8 <_vfiprintf_r+0x9d0>)
   105e2:	f8c9 1000 	str.w	r1, [r9]
   105e6:	1c42      	adds	r2, r0, #1
   105e8:	3310      	adds	r3, #16
   105ea:	2110      	movs	r1, #16
   105ec:	2a07      	cmp	r2, #7
   105ee:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   105f2:	f8c9 1004 	str.w	r1, [r9, #4]
   105f6:	ddeb      	ble.n	105d0 <_vfiprintf_r+0x7b8>
   105f8:	aa18      	add	r2, sp, #96	; 0x60
   105fa:	2b00      	cmp	r3, #0
   105fc:	d074      	beq.n	106e8 <_vfiprintf_r+0x8d0>
   105fe:	4621      	mov	r1, r4
   10600:	4658      	mov	r0, fp
   10602:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10606:	f7ff fbcb 	bl	fda0 <__sprint_r.part.0>
   1060a:	2800      	cmp	r0, #0
   1060c:	f47f addb 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   10610:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10614:	3d10      	subs	r5, #16
   10616:	2d10      	cmp	r5, #16
   10618:	f100 0c01 	add.w	ip, r0, #1
   1061c:	dce0      	bgt.n	105e0 <_vfiprintf_r+0x7c8>
   1061e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10620:	4a71      	ldr	r2, [pc, #452]	; (107e8 <_vfiprintf_r+0x9d0>)
   10622:	f8c9 5004 	str.w	r5, [r9, #4]
   10626:	442b      	add	r3, r5
   10628:	f1bc 0f07 	cmp.w	ip, #7
   1062c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   10630:	f8c9 2000 	str.w	r2, [r9]
   10634:	f340 8194 	ble.w	10960 <_vfiprintf_r+0xb48>
   10638:	2b00      	cmp	r3, #0
   1063a:	f000 831f 	beq.w	10c7c <_vfiprintf_r+0xe64>
   1063e:	ee18 1a10 	vmov	r1, s16
   10642:	aa18      	add	r2, sp, #96	; 0x60
   10644:	4658      	mov	r0, fp
   10646:	f7ff fbab 	bl	fda0 <__sprint_r.part.0>
   1064a:	2800      	cmp	r0, #0
   1064c:	f47f adbb 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   10650:	9a04      	ldr	r2, [sp, #16]
   10652:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10656:	1abd      	subs	r5, r7, r2
   10658:	2d00      	cmp	r5, #0
   1065a:	f100 0101 	add.w	r1, r0, #1
   1065e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10662:	f77f ae29 	ble.w	102b8 <_vfiprintf_r+0x4a0>
   10666:	2d10      	cmp	r5, #16
   10668:	dd29      	ble.n	106be <_vfiprintf_r+0x8a6>
   1066a:	9409      	str	r4, [sp, #36]	; 0x24
   1066c:	2710      	movs	r7, #16
   1066e:	ee18 4a10 	vmov	r4, s16
   10672:	e007      	b.n	10684 <_vfiprintf_r+0x86c>
   10674:	f100 0c02 	add.w	ip, r0, #2
   10678:	f109 0908 	add.w	r9, r9, #8
   1067c:	4610      	mov	r0, r2
   1067e:	3d10      	subs	r5, #16
   10680:	2d10      	cmp	r5, #16
   10682:	dd1a      	ble.n	106ba <_vfiprintf_r+0x8a2>
   10684:	1c42      	adds	r2, r0, #1
   10686:	4958      	ldr	r1, [pc, #352]	; (107e8 <_vfiprintf_r+0x9d0>)
   10688:	3310      	adds	r3, #16
   1068a:	2a07      	cmp	r2, #7
   1068c:	e9c9 1700 	strd	r1, r7, [r9]
   10690:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10694:	ddee      	ble.n	10674 <_vfiprintf_r+0x85c>
   10696:	aa18      	add	r2, sp, #96	; 0x60
   10698:	b303      	cbz	r3, 106dc <_vfiprintf_r+0x8c4>
   1069a:	4621      	mov	r1, r4
   1069c:	4658      	mov	r0, fp
   1069e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106a2:	f7ff fb7d 	bl	fda0 <__sprint_r.part.0>
   106a6:	2800      	cmp	r0, #0
   106a8:	f47f ad8d 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   106ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   106b0:	3d10      	subs	r5, #16
   106b2:	2d10      	cmp	r5, #16
   106b4:	f100 0c01 	add.w	ip, r0, #1
   106b8:	dce4      	bgt.n	10684 <_vfiprintf_r+0x86c>
   106ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   106bc:	4661      	mov	r1, ip
   106be:	4a4a      	ldr	r2, [pc, #296]	; (107e8 <_vfiprintf_r+0x9d0>)
   106c0:	f8c9 5004 	str.w	r5, [r9, #4]
   106c4:	442b      	add	r3, r5
   106c6:	2907      	cmp	r1, #7
   106c8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   106cc:	f8c9 2000 	str.w	r2, [r9]
   106d0:	f300 80e7 	bgt.w	108a2 <_vfiprintf_r+0xa8a>
   106d4:	f109 0908 	add.w	r9, r9, #8
   106d8:	3101      	adds	r1, #1
   106da:	e5ed      	b.n	102b8 <_vfiprintf_r+0x4a0>
   106dc:	f04f 0c01 	mov.w	ip, #1
   106e0:	4618      	mov	r0, r3
   106e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106e6:	e7ca      	b.n	1067e <_vfiprintf_r+0x866>
   106e8:	f04f 0c01 	mov.w	ip, #1
   106ec:	4618      	mov	r0, r3
   106ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106f2:	e772      	b.n	105da <_vfiprintf_r+0x7c2>
   106f4:	2b00      	cmp	r3, #0
   106f6:	f000 8104 	beq.w	10902 <_vfiprintf_r+0xaea>
   106fa:	ee18 1a10 	vmov	r1, s16
   106fe:	aa18      	add	r2, sp, #96	; 0x60
   10700:	4658      	mov	r0, fp
   10702:	f7ff fb4d 	bl	fda0 <__sprint_r.part.0>
   10706:	2800      	cmp	r0, #0
   10708:	f47f ad5d 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   1070c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10710:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10714:	1c41      	adds	r1, r0, #1
   10716:	e5a7      	b.n	10268 <_vfiprintf_r+0x450>
   10718:	2302      	movs	r3, #2
   1071a:	aa11      	add	r2, sp, #68	; 0x44
   1071c:	931c      	str	r3, [sp, #112]	; 0x70
   1071e:	921b      	str	r2, [sp, #108]	; 0x6c
   10720:	2101      	movs	r1, #1
   10722:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10726:	4608      	mov	r0, r1
   10728:	f109 0908 	add.w	r9, r9, #8
   1072c:	1c41      	adds	r1, r0, #1
   1072e:	e5ba      	b.n	102a6 <_vfiprintf_r+0x48e>
   10730:	2d10      	cmp	r5, #16
   10732:	f340 82e5 	ble.w	10d00 <_vfiprintf_r+0xee8>
   10736:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1073a:	940f      	str	r4, [sp, #60]	; 0x3c
   1073c:	4608      	mov	r0, r1
   1073e:	ee18 4a10 	vmov	r4, s16
   10742:	e007      	b.n	10754 <_vfiprintf_r+0x93c>
   10744:	f100 0c02 	add.w	ip, r0, #2
   10748:	f109 0908 	add.w	r9, r9, #8
   1074c:	4610      	mov	r0, r2
   1074e:	3d10      	subs	r5, #16
   10750:	2d10      	cmp	r5, #16
   10752:	dd1d      	ble.n	10790 <_vfiprintf_r+0x978>
   10754:	4925      	ldr	r1, [pc, #148]	; (107ec <_vfiprintf_r+0x9d4>)
   10756:	f8c9 1000 	str.w	r1, [r9]
   1075a:	1c42      	adds	r2, r0, #1
   1075c:	3310      	adds	r3, #16
   1075e:	2110      	movs	r1, #16
   10760:	2a07      	cmp	r2, #7
   10762:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10766:	f8c9 1004 	str.w	r1, [r9, #4]
   1076a:	ddeb      	ble.n	10744 <_vfiprintf_r+0x92c>
   1076c:	aa18      	add	r2, sp, #96	; 0x60
   1076e:	b303      	cbz	r3, 107b2 <_vfiprintf_r+0x99a>
   10770:	4621      	mov	r1, r4
   10772:	4658      	mov	r0, fp
   10774:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10778:	f7ff fb12 	bl	fda0 <__sprint_r.part.0>
   1077c:	2800      	cmp	r0, #0
   1077e:	f47f ad22 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   10782:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10786:	3d10      	subs	r5, #16
   10788:	2d10      	cmp	r5, #16
   1078a:	f100 0c01 	add.w	ip, r0, #1
   1078e:	dce1      	bgt.n	10754 <_vfiprintf_r+0x93c>
   10790:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10792:	4660      	mov	r0, ip
   10794:	4a15      	ldr	r2, [pc, #84]	; (107ec <_vfiprintf_r+0x9d4>)
   10796:	f8c9 5004 	str.w	r5, [r9, #4]
   1079a:	442b      	add	r3, r5
   1079c:	2807      	cmp	r0, #7
   1079e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   107a2:	f8c9 2000 	str.w	r2, [r9]
   107a6:	f300 80c1 	bgt.w	1092c <_vfiprintf_r+0xb14>
   107aa:	f109 0908 	add.w	r9, r9, #8
   107ae:	1c41      	adds	r1, r0, #1
   107b0:	e546      	b.n	10240 <_vfiprintf_r+0x428>
   107b2:	4618      	mov	r0, r3
   107b4:	f04f 0c01 	mov.w	ip, #1
   107b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   107bc:	e7c7      	b.n	1074e <_vfiprintf_r+0x936>
   107be:	0776      	lsls	r6, r6, #29
   107c0:	9319      	str	r3, [sp, #100]	; 0x64
   107c2:	d553      	bpl.n	1086c <_vfiprintf_r+0xa54>
   107c4:	9a06      	ldr	r2, [sp, #24]
   107c6:	9903      	ldr	r1, [sp, #12]
   107c8:	1a54      	subs	r4, r2, r1
   107ca:	2c00      	cmp	r4, #0
   107cc:	dd4e      	ble.n	1086c <_vfiprintf_r+0xa54>
   107ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   107d2:	2c10      	cmp	r4, #16
   107d4:	f340 82b0 	ble.w	10d38 <_vfiprintf_r+0xf20>
   107d8:	9919      	ldr	r1, [sp, #100]	; 0x64
   107da:	ee18 6a10 	vmov	r6, s16
   107de:	2510      	movs	r5, #16
   107e0:	e00d      	b.n	107fe <_vfiprintf_r+0x9e6>
   107e2:	bf00      	nop
   107e4:	20000d8c 	.word	0x20000d8c
   107e8:	20001350 	.word	0x20001350
   107ec:	20000dd0 	.word	0x20000dd0
   107f0:	1c88      	adds	r0, r1, #2
   107f2:	f109 0908 	add.w	r9, r9, #8
   107f6:	4611      	mov	r1, r2
   107f8:	3c10      	subs	r4, #16
   107fa:	2c10      	cmp	r4, #16
   107fc:	dd1a      	ble.n	10834 <_vfiprintf_r+0xa1c>
   107fe:	1c4a      	adds	r2, r1, #1
   10800:	48b3      	ldr	r0, [pc, #716]	; (10ad0 <_vfiprintf_r+0xcb8>)
   10802:	3310      	adds	r3, #16
   10804:	2a07      	cmp	r2, #7
   10806:	e9c9 0500 	strd	r0, r5, [r9]
   1080a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1080e:	ddef      	ble.n	107f0 <_vfiprintf_r+0x9d8>
   10810:	aa18      	add	r2, sp, #96	; 0x60
   10812:	b333      	cbz	r3, 10862 <_vfiprintf_r+0xa4a>
   10814:	4631      	mov	r1, r6
   10816:	4658      	mov	r0, fp
   10818:	f7ff fac2 	bl	fda0 <__sprint_r.part.0>
   1081c:	2800      	cmp	r0, #0
   1081e:	f47f acd2 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   10822:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   10826:	3c10      	subs	r4, #16
   10828:	2c10      	cmp	r4, #16
   1082a:	f101 0001 	add.w	r0, r1, #1
   1082e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10832:	dce4      	bgt.n	107fe <_vfiprintf_r+0x9e6>
   10834:	4aa6      	ldr	r2, [pc, #664]	; (10ad0 <_vfiprintf_r+0xcb8>)
   10836:	f8c9 4004 	str.w	r4, [r9, #4]
   1083a:	4423      	add	r3, r4
   1083c:	2807      	cmp	r0, #7
   1083e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10842:	f8c9 2000 	str.w	r2, [r9]
   10846:	f77f ad59 	ble.w	102fc <_vfiprintf_r+0x4e4>
   1084a:	b17b      	cbz	r3, 1086c <_vfiprintf_r+0xa54>
   1084c:	ee18 1a10 	vmov	r1, s16
   10850:	aa18      	add	r2, sp, #96	; 0x60
   10852:	4658      	mov	r0, fp
   10854:	f7ff faa4 	bl	fda0 <__sprint_r.part.0>
   10858:	2800      	cmp	r0, #0
   1085a:	f47f acb4 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   1085e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10860:	e54c      	b.n	102fc <_vfiprintf_r+0x4e4>
   10862:	2001      	movs	r0, #1
   10864:	4619      	mov	r1, r3
   10866:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1086a:	e7c5      	b.n	107f8 <_vfiprintf_r+0x9e0>
   1086c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10870:	9903      	ldr	r1, [sp, #12]
   10872:	428a      	cmp	r2, r1
   10874:	bfac      	ite	ge
   10876:	189b      	addge	r3, r3, r2
   10878:	185b      	addlt	r3, r3, r1
   1087a:	9305      	str	r3, [sp, #20]
   1087c:	e549      	b.n	10312 <_vfiprintf_r+0x4fa>
   1087e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10882:	058f      	lsls	r7, r1, #22
   10884:	ee18 3a10 	vmov	r3, s16
   10888:	b28a      	uxth	r2, r1
   1088a:	f53f aae8 	bmi.w	fe5e <_vfiprintf_r+0x46>
   1088e:	ee18 5a10 	vmov	r5, s16
   10892:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10894:	f7fb fb38 	bl	bf08 <__retarget_lock_acquire_recursive>
   10898:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1089c:	b28a      	uxth	r2, r1
   1089e:	f7ff bade 	b.w	fe5e <_vfiprintf_r+0x46>
   108a2:	2b00      	cmp	r3, #0
   108a4:	f43f ae79 	beq.w	1059a <_vfiprintf_r+0x782>
   108a8:	ee18 1a10 	vmov	r1, s16
   108ac:	aa18      	add	r2, sp, #96	; 0x60
   108ae:	4658      	mov	r0, fp
   108b0:	f7ff fa76 	bl	fda0 <__sprint_r.part.0>
   108b4:	2800      	cmp	r0, #0
   108b6:	f47f ac86 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   108ba:	9919      	ldr	r1, [sp, #100]	; 0x64
   108bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   108be:	3101      	adds	r1, #1
   108c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108c4:	e4f8      	b.n	102b8 <_vfiprintf_r+0x4a0>
   108c6:	9219      	str	r2, [sp, #100]	; 0x64
   108c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108cc:	e45e      	b.n	1018c <_vfiprintf_r+0x374>
   108ce:	2f00      	cmp	r7, #0
   108d0:	f47f abc3 	bne.w	1005a <_vfiprintf_r+0x242>
   108d4:	9e03      	ldr	r6, [sp, #12]
   108d6:	2700      	movs	r7, #0
   108d8:	9704      	str	r7, [sp, #16]
   108da:	ac44      	add	r4, sp, #272	; 0x110
   108dc:	f7ff bbc5 	b.w	1006a <_vfiprintf_r+0x252>
   108e0:	9b03      	ldr	r3, [sp, #12]
   108e2:	f013 0310 	ands.w	r3, r3, #16
   108e6:	d154      	bne.n	10992 <_vfiprintf_r+0xb7a>
   108e8:	9a03      	ldr	r2, [sp, #12]
   108ea:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   108ee:	f000 816b 	beq.w	10bc8 <_vfiprintf_r+0xdb0>
   108f2:	9907      	ldr	r1, [sp, #28]
   108f4:	461a      	mov	r2, r3
   108f6:	f851 3b04 	ldr.w	r3, [r1], #4
   108fa:	9107      	str	r1, [sp, #28]
   108fc:	b29b      	uxth	r3, r3
   108fe:	2101      	movs	r1, #1
   10900:	e401      	b.n	10106 <_vfiprintf_r+0x2ee>
   10902:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10904:	2a00      	cmp	r2, #0
   10906:	d164      	bne.n	109d2 <_vfiprintf_r+0xbba>
   10908:	4618      	mov	r0, r3
   1090a:	2101      	movs	r1, #1
   1090c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10910:	e4c9      	b.n	102a6 <_vfiprintf_r+0x48e>
   10912:	2101      	movs	r1, #1
   10914:	4618      	mov	r0, r3
   10916:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1091a:	e4c4      	b.n	102a6 <_vfiprintf_r+0x48e>
   1091c:	425b      	negs	r3, r3
   1091e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   10922:	9603      	str	r6, [sp, #12]
   10924:	202d      	movs	r0, #45	; 0x2d
   10926:	2101      	movs	r1, #1
   10928:	f7ff bbee 	b.w	10108 <_vfiprintf_r+0x2f0>
   1092c:	2b00      	cmp	r3, #0
   1092e:	f000 8088 	beq.w	10a42 <_vfiprintf_r+0xc2a>
   10932:	ee18 1a10 	vmov	r1, s16
   10936:	aa18      	add	r2, sp, #96	; 0x60
   10938:	4658      	mov	r0, fp
   1093a:	f7ff fa31 	bl	fda0 <__sprint_r.part.0>
   1093e:	2800      	cmp	r0, #0
   10940:	f47f ac41 	bne.w	101c6 <_vfiprintf_r+0x3ae>
   10944:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10948:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1094c:	1c41      	adds	r1, r0, #1
   1094e:	e477      	b.n	10240 <_vfiprintf_r+0x428>
   10950:	f898 1000 	ldrb.w	r1, [r8]
   10954:	9307      	str	r3, [sp, #28]
   10956:	f7ff bad2 	b.w	fefe <_vfiprintf_r+0xe6>
   1095a:	ac44      	add	r4, sp, #272	; 0x110
   1095c:	f7ff bb85 	b.w	1006a <_vfiprintf_r+0x252>
   10960:	f109 0908 	add.w	r9, r9, #8
   10964:	f10c 0101 	add.w	r1, ip, #1
   10968:	4660      	mov	r0, ip
   1096a:	e4a0      	b.n	102ae <_vfiprintf_r+0x496>
   1096c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10970:	f040 8197 	bne.w	10ca2 <_vfiprintf_r+0xe8a>
   10974:	f851 3b04 	ldr.w	r3, [r1], #4
   10978:	9107      	str	r1, [sp, #28]
   1097a:	f7ff bbc0 	b.w	100fe <_vfiprintf_r+0x2e6>
   1097e:	05b3      	lsls	r3, r6, #22
   10980:	f100 8188 	bmi.w	10c94 <_vfiprintf_r+0xe7c>
   10984:	f852 3b04 	ldr.w	r3, [r2], #4
   10988:	9207      	str	r2, [sp, #28]
   1098a:	17da      	asrs	r2, r3, #31
   1098c:	4611      	mov	r1, r2
   1098e:	f7ff bb52 	b.w	10036 <_vfiprintf_r+0x21e>
   10992:	9907      	ldr	r1, [sp, #28]
   10994:	f851 3b04 	ldr.w	r3, [r1], #4
   10998:	9107      	str	r1, [sp, #28]
   1099a:	2101      	movs	r1, #1
   1099c:	f7ff bbb3 	b.w	10106 <_vfiprintf_r+0x2ee>
   109a0:	9b07      	ldr	r3, [sp, #28]
   109a2:	9805      	ldr	r0, [sp, #20]
   109a4:	f853 1b04 	ldr.w	r1, [r3], #4
   109a8:	9307      	str	r3, [sp, #28]
   109aa:	17c2      	asrs	r2, r0, #31
   109ac:	e9c1 0200 	strd	r0, r2, [r1]
   109b0:	f7ff ba7d 	b.w	feae <_vfiprintf_r+0x96>
   109b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109b6:	2b00      	cmp	r3, #0
   109b8:	f43f ab26 	beq.w	10008 <_vfiprintf_r+0x1f0>
   109bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109be:	781b      	ldrb	r3, [r3, #0]
   109c0:	2b00      	cmp	r3, #0
   109c2:	f43f ab21 	beq.w	10008 <_vfiprintf_r+0x1f0>
   109c6:	f898 1000 	ldrb.w	r1, [r8]
   109ca:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   109ce:	f7ff ba96 	b.w	fefe <_vfiprintf_r+0xe6>
   109d2:	2302      	movs	r3, #2
   109d4:	aa11      	add	r2, sp, #68	; 0x44
   109d6:	931c      	str	r3, [sp, #112]	; 0x70
   109d8:	921b      	str	r2, [sp, #108]	; 0x6c
   109da:	2001      	movs	r0, #1
   109dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109e0:	e6a2      	b.n	10728 <_vfiprintf_r+0x910>
   109e2:	9603      	str	r6, [sp, #12]
   109e4:	e571      	b.n	104ca <_vfiprintf_r+0x6b2>
   109e6:	4b3b      	ldr	r3, [pc, #236]	; (10ad4 <_vfiprintf_r+0xcbc>)
   109e8:	930c      	str	r3, [sp, #48]	; 0x30
   109ea:	f016 0220 	ands.w	r2, r6, #32
   109ee:	d059      	beq.n	10aa4 <_vfiprintf_r+0xc8c>
   109f0:	9b07      	ldr	r3, [sp, #28]
   109f2:	3307      	adds	r3, #7
   109f4:	f023 0307 	bic.w	r3, r3, #7
   109f8:	4618      	mov	r0, r3
   109fa:	685a      	ldr	r2, [r3, #4]
   109fc:	f850 3b08 	ldr.w	r3, [r0], #8
   10a00:	9007      	str	r0, [sp, #28]
   10a02:	07f4      	lsls	r4, r6, #31
   10a04:	d509      	bpl.n	10a1a <_vfiprintf_r+0xc02>
   10a06:	ea53 0002 	orrs.w	r0, r3, r2
   10a0a:	d006      	beq.n	10a1a <_vfiprintf_r+0xc02>
   10a0c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10a10:	2130      	movs	r1, #48	; 0x30
   10a12:	f046 0602 	orr.w	r6, r6, #2
   10a16:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   10a1a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10a1e:	9103      	str	r1, [sp, #12]
   10a20:	2102      	movs	r1, #2
   10a22:	f7ff bb70 	b.w	10106 <_vfiprintf_r+0x2ee>
   10a26:	4b2c      	ldr	r3, [pc, #176]	; (10ad8 <_vfiprintf_r+0xcc0>)
   10a28:	930c      	str	r3, [sp, #48]	; 0x30
   10a2a:	e7de      	b.n	109ea <_vfiprintf_r+0xbd2>
   10a2c:	9b07      	ldr	r3, [sp, #28]
   10a2e:	2101      	movs	r1, #1
   10a30:	f853 2b04 	ldr.w	r2, [r3], #4
   10a34:	9103      	str	r1, [sp, #12]
   10a36:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   10a3a:	9307      	str	r3, [sp, #28]
   10a3c:	9104      	str	r1, [sp, #16]
   10a3e:	ac2b      	add	r4, sp, #172	; 0xac
   10a40:	e4df      	b.n	10402 <_vfiprintf_r+0x5ea>
   10a42:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10a46:	2a00      	cmp	r2, #0
   10a48:	f040 8132 	bne.w	10cb0 <_vfiprintf_r+0xe98>
   10a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a4e:	2a00      	cmp	r2, #0
   10a50:	f47f ae62 	bne.w	10718 <_vfiprintf_r+0x900>
   10a54:	4618      	mov	r0, r3
   10a56:	2101      	movs	r1, #1
   10a58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a5c:	e427      	b.n	102ae <_vfiprintf_r+0x496>
   10a5e:	2100      	movs	r1, #0
   10a60:	2208      	movs	r2, #8
   10a62:	a816      	add	r0, sp, #88	; 0x58
   10a64:	9413      	str	r4, [sp, #76]	; 0x4c
   10a66:	f7fb f8cb 	bl	bc00 <memset>
   10a6a:	1c79      	adds	r1, r7, #1
   10a6c:	f000 80bc 	beq.w	10be8 <_vfiprintf_r+0xdd0>
   10a70:	2500      	movs	r5, #0
   10a72:	9407      	str	r4, [sp, #28]
   10a74:	462c      	mov	r4, r5
   10a76:	e00c      	b.n	10a92 <_vfiprintf_r+0xc7a>
   10a78:	a92b      	add	r1, sp, #172	; 0xac
   10a7a:	4658      	mov	r0, fp
   10a7c:	f7ff f8ca 	bl	fc14 <_wcrtomb_r>
   10a80:	1c42      	adds	r2, r0, #1
   10a82:	4420      	add	r0, r4
   10a84:	f000 816b 	beq.w	10d5e <_vfiprintf_r+0xf46>
   10a88:	42b8      	cmp	r0, r7
   10a8a:	dc08      	bgt.n	10a9e <_vfiprintf_r+0xc86>
   10a8c:	f000 8170 	beq.w	10d70 <_vfiprintf_r+0xf58>
   10a90:	4604      	mov	r4, r0
   10a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10a94:	5952      	ldr	r2, [r2, r5]
   10a96:	ab16      	add	r3, sp, #88	; 0x58
   10a98:	3504      	adds	r5, #4
   10a9a:	2a00      	cmp	r2, #0
   10a9c:	d1ec      	bne.n	10a78 <_vfiprintf_r+0xc60>
   10a9e:	9404      	str	r4, [sp, #16]
   10aa0:	9c07      	ldr	r4, [sp, #28]
   10aa2:	e0af      	b.n	10c04 <_vfiprintf_r+0xdec>
   10aa4:	f016 0310 	ands.w	r3, r6, #16
   10aa8:	9807      	ldr	r0, [sp, #28]
   10aaa:	d10c      	bne.n	10ac6 <_vfiprintf_r+0xcae>
   10aac:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10ab0:	d005      	beq.n	10abe <_vfiprintf_r+0xca6>
   10ab2:	461a      	mov	r2, r3
   10ab4:	f850 3b04 	ldr.w	r3, [r0], #4
   10ab8:	9007      	str	r0, [sp, #28]
   10aba:	b29b      	uxth	r3, r3
   10abc:	e7a1      	b.n	10a02 <_vfiprintf_r+0xbea>
   10abe:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10ac2:	f040 80e1 	bne.w	10c88 <_vfiprintf_r+0xe70>
   10ac6:	f850 3b04 	ldr.w	r3, [r0], #4
   10aca:	9007      	str	r0, [sp, #28]
   10acc:	e799      	b.n	10a02 <_vfiprintf_r+0xbea>
   10ace:	bf00      	nop
   10ad0:	20000dd0 	.word	0x20000dd0
   10ad4:	20000d8c 	.word	0x20000d8c
   10ad8:	20000da0 	.word	0x20000da0
   10adc:	9903      	ldr	r1, [sp, #12]
   10ade:	9704      	str	r7, [sp, #16]
   10ae0:	ac44      	add	r4, sp, #272	; 0x110
   10ae2:	469e      	mov	lr, r3
   10ae4:	ee08 ba90 	vmov	s17, fp
   10ae8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   10aec:	f04f 0c00 	mov.w	ip, #0
   10af0:	4623      	mov	r3, r4
   10af2:	e006      	b.n	10b02 <_vfiprintf_r+0xcea>
   10af4:	f1be 0f0a 	cmp.w	lr, #10
   10af8:	f172 0200 	sbcs.w	r2, r2, #0
   10afc:	d339      	bcc.n	10b72 <_vfiprintf_r+0xd5a>
   10afe:	46a6      	mov	lr, r4
   10b00:	462a      	mov	r2, r5
   10b02:	49a6      	ldr	r1, [pc, #664]	; (10d9c <_vfiprintf_r+0xf84>)
   10b04:	eb1e 0002 	adds.w	r0, lr, r2
   10b08:	f140 0000 	adc.w	r0, r0, #0
   10b0c:	460f      	mov	r7, r1
   10b0e:	fba1 1400 	umull	r1, r4, r1, r0
   10b12:	f024 0103 	bic.w	r1, r4, #3
   10b16:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   10b1a:	1a40      	subs	r0, r0, r1
   10b1c:	ebbe 0100 	subs.w	r1, lr, r0
   10b20:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10b24:	f162 0400 	sbc.w	r4, r2, #0
   10b28:	fb05 f501 	mul.w	r5, r5, r1
   10b2c:	fb07 5504 	mla	r5, r7, r4, r5
   10b30:	fba1 4107 	umull	r4, r1, r1, r7
   10b34:	440d      	add	r5, r1
   10b36:	2705      	movs	r7, #5
   10b38:	f004 0101 	and.w	r1, r4, #1
   10b3c:	fba1 1b07 	umull	r1, fp, r1, r7
   10b40:	1809      	adds	r1, r1, r0
   10b42:	0864      	lsrs	r4, r4, #1
   10b44:	3130      	adds	r1, #48	; 0x30
   10b46:	f803 1c01 	strb.w	r1, [r3, #-1]
   10b4a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   10b4e:	f10c 0c01 	add.w	ip, ip, #1
   10b52:	3b01      	subs	r3, #1
   10b54:	086d      	lsrs	r5, r5, #1
   10b56:	2e00      	cmp	r6, #0
   10b58:	d0cc      	beq.n	10af4 <_vfiprintf_r+0xcdc>
   10b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10b5c:	7809      	ldrb	r1, [r1, #0]
   10b5e:	4561      	cmp	r1, ip
   10b60:	d1c8      	bne.n	10af4 <_vfiprintf_r+0xcdc>
   10b62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10b66:	d0c5      	beq.n	10af4 <_vfiprintf_r+0xcdc>
   10b68:	f1be 0f0a 	cmp.w	lr, #10
   10b6c:	f172 0200 	sbcs.w	r2, r2, #0
   10b70:	d26c      	bcs.n	10c4c <_vfiprintf_r+0xe34>
   10b72:	461c      	mov	r4, r3
   10b74:	ab44      	add	r3, sp, #272	; 0x110
   10b76:	1b1b      	subs	r3, r3, r4
   10b78:	9f04      	ldr	r7, [sp, #16]
   10b7a:	9e03      	ldr	r6, [sp, #12]
   10b7c:	9304      	str	r3, [sp, #16]
   10b7e:	ee18 ba90 	vmov	fp, s17
   10b82:	f7ff ba72 	b.w	1006a <_vfiprintf_r+0x252>
   10b86:	9603      	str	r6, [sp, #12]
   10b88:	f7ff ba62 	b.w	10050 <_vfiprintf_r+0x238>
   10b8c:	4658      	mov	r0, fp
   10b8e:	f7fa ff07 	bl	b9a0 <__sinit>
   10b92:	f7ff b95b 	b.w	fe4c <_vfiprintf_r+0x34>
   10b96:	2901      	cmp	r1, #1
   10b98:	9603      	str	r6, [sp, #12]
   10b9a:	f47f accd 	bne.w	10538 <_vfiprintf_r+0x720>
   10b9e:	f7ff ba5c 	b.w	1005a <_vfiprintf_r+0x242>
   10ba2:	9b07      	ldr	r3, [sp, #28]
   10ba4:	9905      	ldr	r1, [sp, #20]
   10ba6:	f853 2b04 	ldr.w	r2, [r3], #4
   10baa:	6011      	str	r1, [r2, #0]
   10bac:	9307      	str	r3, [sp, #28]
   10bae:	f7ff b97e 	b.w	feae <_vfiprintf_r+0x96>
   10bb2:	2f06      	cmp	r7, #6
   10bb4:	463b      	mov	r3, r7
   10bb6:	9a03      	ldr	r2, [sp, #12]
   10bb8:	4c79      	ldr	r4, [pc, #484]	; (10da0 <_vfiprintf_r+0xf88>)
   10bba:	9207      	str	r2, [sp, #28]
   10bbc:	bf28      	it	cs
   10bbe:	2306      	movcs	r3, #6
   10bc0:	9304      	str	r3, [sp, #16]
   10bc2:	9303      	str	r3, [sp, #12]
   10bc4:	f7ff bb25 	b.w	10212 <_vfiprintf_r+0x3fa>
   10bc8:	9b03      	ldr	r3, [sp, #12]
   10bca:	9907      	ldr	r1, [sp, #28]
   10bcc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10bd0:	bf14      	ite	ne
   10bd2:	f851 3b04 	ldrne.w	r3, [r1], #4
   10bd6:	f851 3b04 	ldreq.w	r3, [r1], #4
   10bda:	9107      	str	r1, [sp, #28]
   10bdc:	bf1c      	itt	ne
   10bde:	4602      	movne	r2, r0
   10be0:	b2db      	uxtbne	r3, r3
   10be2:	2101      	movs	r1, #1
   10be4:	f7ff ba8f 	b.w	10106 <_vfiprintf_r+0x2ee>
   10be8:	ab16      	add	r3, sp, #88	; 0x58
   10bea:	9300      	str	r3, [sp, #0]
   10bec:	2300      	movs	r3, #0
   10bee:	4619      	mov	r1, r3
   10bf0:	aa13      	add	r2, sp, #76	; 0x4c
   10bf2:	4658      	mov	r0, fp
   10bf4:	f7ff f834 	bl	fc60 <_wcsrtombs_r>
   10bf8:	4603      	mov	r3, r0
   10bfa:	3301      	adds	r3, #1
   10bfc:	9004      	str	r0, [sp, #16]
   10bfe:	f000 80ae 	beq.w	10d5e <_vfiprintf_r+0xf46>
   10c02:	9413      	str	r4, [sp, #76]	; 0x4c
   10c04:	9b04      	ldr	r3, [sp, #16]
   10c06:	2b00      	cmp	r3, #0
   10c08:	d030      	beq.n	10c6c <_vfiprintf_r+0xe54>
   10c0a:	2b63      	cmp	r3, #99	; 0x63
   10c0c:	dc63      	bgt.n	10cd6 <_vfiprintf_r+0xebe>
   10c0e:	2300      	movs	r3, #0
   10c10:	9308      	str	r3, [sp, #32]
   10c12:	ac2b      	add	r4, sp, #172	; 0xac
   10c14:	2208      	movs	r2, #8
   10c16:	2100      	movs	r1, #0
   10c18:	a816      	add	r0, sp, #88	; 0x58
   10c1a:	f7fa fff1 	bl	bc00 <memset>
   10c1e:	9d04      	ldr	r5, [sp, #16]
   10c20:	ab16      	add	r3, sp, #88	; 0x58
   10c22:	9300      	str	r3, [sp, #0]
   10c24:	aa13      	add	r2, sp, #76	; 0x4c
   10c26:	462b      	mov	r3, r5
   10c28:	4621      	mov	r1, r4
   10c2a:	4658      	mov	r0, fp
   10c2c:	f7ff f818 	bl	fc60 <_wcsrtombs_r>
   10c30:	4285      	cmp	r5, r0
   10c32:	f040 80ab 	bne.w	10d8c <_vfiprintf_r+0xf74>
   10c36:	9b03      	ldr	r3, [sp, #12]
   10c38:	9a04      	ldr	r2, [sp, #16]
   10c3a:	9307      	str	r3, [sp, #28]
   10c3c:	2300      	movs	r3, #0
   10c3e:	54a3      	strb	r3, [r4, r2]
   10c40:	461f      	mov	r7, r3
   10c42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10c46:	9303      	str	r3, [sp, #12]
   10c48:	f7ff ba16 	b.w	10078 <_vfiprintf_r+0x260>
   10c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c50:	1a9b      	subs	r3, r3, r2
   10c52:	4618      	mov	r0, r3
   10c54:	9308      	str	r3, [sp, #32]
   10c56:	f7fb f88b 	bl	bd70 <strncpy>
   10c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c5c:	9b08      	ldr	r3, [sp, #32]
   10c5e:	784a      	ldrb	r2, [r1, #1]
   10c60:	b10a      	cbz	r2, 10c66 <_vfiprintf_r+0xe4e>
   10c62:	3101      	adds	r1, #1
   10c64:	910b      	str	r1, [sp, #44]	; 0x2c
   10c66:	f04f 0c00 	mov.w	ip, #0
   10c6a:	e748      	b.n	10afe <_vfiprintf_r+0xce6>
   10c6c:	9b03      	ldr	r3, [sp, #12]
   10c6e:	9307      	str	r3, [sp, #28]
   10c70:	9b04      	ldr	r3, [sp, #16]
   10c72:	9303      	str	r3, [sp, #12]
   10c74:	461f      	mov	r7, r3
   10c76:	9308      	str	r3, [sp, #32]
   10c78:	f7ff b9fe 	b.w	10078 <_vfiprintf_r+0x260>
   10c7c:	2101      	movs	r1, #1
   10c7e:	4618      	mov	r0, r3
   10c80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c84:	f7ff bb13 	b.w	102ae <_vfiprintf_r+0x496>
   10c88:	f850 3b04 	ldr.w	r3, [r0], #4
   10c8c:	9007      	str	r0, [sp, #28]
   10c8e:	4622      	mov	r2, r4
   10c90:	b2db      	uxtb	r3, r3
   10c92:	e6b6      	b.n	10a02 <_vfiprintf_r+0xbea>
   10c94:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10c98:	9207      	str	r2, [sp, #28]
   10c9a:	17da      	asrs	r2, r3, #31
   10c9c:	4611      	mov	r1, r2
   10c9e:	f7ff b9ca 	b.w	10036 <_vfiprintf_r+0x21e>
   10ca2:	f851 3b04 	ldr.w	r3, [r1], #4
   10ca6:	9107      	str	r1, [sp, #28]
   10ca8:	4602      	mov	r2, r0
   10caa:	b2db      	uxtb	r3, r3
   10cac:	f7ff ba27 	b.w	100fe <_vfiprintf_r+0x2e6>
   10cb0:	2301      	movs	r3, #1
   10cb2:	931c      	str	r3, [sp, #112]	; 0x70
   10cb4:	2101      	movs	r1, #1
   10cb6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   10cba:	931b      	str	r3, [sp, #108]	; 0x6c
   10cbc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cc0:	460b      	mov	r3, r1
   10cc2:	f7ff bacd 	b.w	10260 <_vfiprintf_r+0x448>
   10cc6:	9b07      	ldr	r3, [sp, #28]
   10cc8:	9905      	ldr	r1, [sp, #20]
   10cca:	f853 2b04 	ldr.w	r2, [r3], #4
   10cce:	9307      	str	r3, [sp, #28]
   10cd0:	8011      	strh	r1, [r2, #0]
   10cd2:	f7ff b8ec 	b.w	feae <_vfiprintf_r+0x96>
   10cd6:	1c59      	adds	r1, r3, #1
   10cd8:	4658      	mov	r0, fp
   10cda:	f7f9 ff49 	bl	ab70 <_malloc_r>
   10cde:	4604      	mov	r4, r0
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d03c      	beq.n	10d5e <_vfiprintf_r+0xf46>
   10ce4:	9008      	str	r0, [sp, #32]
   10ce6:	e795      	b.n	10c14 <_vfiprintf_r+0xdfc>
   10ce8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   10cea:	f7fb f90f 	bl	bf0c <__retarget_lock_release_recursive>
   10cee:	f7ff b9e9 	b.w	100c4 <_vfiprintf_r+0x2ac>
   10cf2:	9b03      	ldr	r3, [sp, #12]
   10cf4:	9307      	str	r3, [sp, #28]
   10cf6:	e9cd 7703 	strd	r7, r7, [sp, #12]
   10cfa:	9f08      	ldr	r7, [sp, #32]
   10cfc:	f7ff b9bc 	b.w	10078 <_vfiprintf_r+0x260>
   10d00:	9819      	ldr	r0, [sp, #100]	; 0x64
   10d02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10d04:	3001      	adds	r0, #1
   10d06:	e545      	b.n	10794 <_vfiprintf_r+0x97c>
   10d08:	9b03      	ldr	r3, [sp, #12]
   10d0a:	9307      	str	r3, [sp, #28]
   10d0c:	4620      	mov	r0, r4
   10d0e:	f7fb fad7 	bl	c2c0 <strlen>
   10d12:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   10d16:	462f      	mov	r7, r5
   10d18:	9004      	str	r0, [sp, #16]
   10d1a:	9303      	str	r3, [sp, #12]
   10d1c:	9508      	str	r5, [sp, #32]
   10d1e:	f7ff b9ab 	b.w	10078 <_vfiprintf_r+0x260>
   10d22:	ee18 1a10 	vmov	r1, s16
   10d26:	aa18      	add	r2, sp, #96	; 0x60
   10d28:	4658      	mov	r0, fp
   10d2a:	f7ff f839 	bl	fda0 <__sprint_r.part.0>
   10d2e:	2800      	cmp	r0, #0
   10d30:	f43f aa36 	beq.w	101a0 <_vfiprintf_r+0x388>
   10d34:	f7ff ba4d 	b.w	101d2 <_vfiprintf_r+0x3ba>
   10d38:	9819      	ldr	r0, [sp, #100]	; 0x64
   10d3a:	3001      	adds	r0, #1
   10d3c:	e57a      	b.n	10834 <_vfiprintf_r+0xa1c>
   10d3e:	468c      	mov	ip, r1
   10d40:	e46e      	b.n	10620 <_vfiprintf_r+0x808>
   10d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10d44:	07d9      	lsls	r1, r3, #31
   10d46:	d405      	bmi.n	10d54 <_vfiprintf_r+0xf3c>
   10d48:	89ab      	ldrh	r3, [r5, #12]
   10d4a:	059a      	lsls	r2, r3, #22
   10d4c:	d402      	bmi.n	10d54 <_vfiprintf_r+0xf3c>
   10d4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10d50:	f7fb f8dc 	bl	bf0c <__retarget_lock_release_recursive>
   10d54:	f04f 33ff 	mov.w	r3, #4294967295
   10d58:	9305      	str	r3, [sp, #20]
   10d5a:	f7ff ba49 	b.w	101f0 <_vfiprintf_r+0x3d8>
   10d5e:	ee18 2a10 	vmov	r2, s16
   10d62:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d6a:	8193      	strh	r3, [r2, #12]
   10d6c:	f7ff ba35 	b.w	101da <_vfiprintf_r+0x3c2>
   10d70:	9c07      	ldr	r4, [sp, #28]
   10d72:	9704      	str	r7, [sp, #16]
   10d74:	e746      	b.n	10c04 <_vfiprintf_r+0xdec>
   10d76:	9b07      	ldr	r3, [sp, #28]
   10d78:	f898 1001 	ldrb.w	r1, [r8, #1]
   10d7c:	f853 7b04 	ldr.w	r7, [r3], #4
   10d80:	9307      	str	r3, [sp, #28]
   10d82:	4690      	mov	r8, r2
   10d84:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   10d88:	f7ff b8b9 	b.w	fefe <_vfiprintf_r+0xe6>
   10d8c:	ee18 2a10 	vmov	r2, s16
   10d90:	8993      	ldrh	r3, [r2, #12]
   10d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d96:	8193      	strh	r3, [r2, #12]
   10d98:	f7ff ba15 	b.w	101c6 <_vfiprintf_r+0x3ae>
   10d9c:	cccccccd 	.word	0xcccccccd
   10da0:	20000db4 	.word	0x20000db4

00010da4 <__sbprintf>:
   10da4:	b570      	push	{r4, r5, r6, lr}
   10da6:	460c      	mov	r4, r1
   10da8:	8989      	ldrh	r1, [r1, #12]
   10daa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   10dae:	f021 0102 	bic.w	r1, r1, #2
   10db2:	f8ad 1014 	strh.w	r1, [sp, #20]
   10db6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10db8:	911b      	str	r1, [sp, #108]	; 0x6c
   10dba:	89e1      	ldrh	r1, [r4, #14]
   10dbc:	f8ad 1016 	strh.w	r1, [sp, #22]
   10dc0:	69e1      	ldr	r1, [r4, #28]
   10dc2:	9109      	str	r1, [sp, #36]	; 0x24
   10dc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10dc6:	910b      	str	r1, [sp, #44]	; 0x2c
   10dc8:	a91c      	add	r1, sp, #112	; 0x70
   10dca:	9102      	str	r1, [sp, #8]
   10dcc:	9106      	str	r1, [sp, #24]
   10dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10dd2:	4606      	mov	r6, r0
   10dd4:	9104      	str	r1, [sp, #16]
   10dd6:	9107      	str	r1, [sp, #28]
   10dd8:	a818      	add	r0, sp, #96	; 0x60
   10dda:	2100      	movs	r1, #0
   10ddc:	e9cd 3200 	strd	r3, r2, [sp]
   10de0:	9108      	str	r1, [sp, #32]
   10de2:	f7fb f88d 	bl	bf00 <__retarget_lock_init_recursive>
   10de6:	e9dd 3200 	ldrd	r3, r2, [sp]
   10dea:	a902      	add	r1, sp, #8
   10dec:	4630      	mov	r0, r6
   10dee:	f7ff f813 	bl	fe18 <_vfiprintf_r>
   10df2:	1e05      	subs	r5, r0, #0
   10df4:	db07      	blt.n	10e06 <__sbprintf+0x62>
   10df6:	a902      	add	r1, sp, #8
   10df8:	4630      	mov	r0, r6
   10dfa:	f7fd fee7 	bl	ebcc <_fflush_r>
   10dfe:	2800      	cmp	r0, #0
   10e00:	bf18      	it	ne
   10e02:	f04f 35ff 	movne.w	r5, #4294967295
   10e06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10e0a:	065b      	lsls	r3, r3, #25
   10e0c:	d503      	bpl.n	10e16 <__sbprintf+0x72>
   10e0e:	89a3      	ldrh	r3, [r4, #12]
   10e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e14:	81a3      	strh	r3, [r4, #12]
   10e16:	9818      	ldr	r0, [sp, #96]	; 0x60
   10e18:	f7fb f874 	bl	bf04 <__retarget_lock_close_recursive>
   10e1c:	4628      	mov	r0, r5
   10e1e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   10e22:	bd70      	pop	{r4, r5, r6, pc}

00010e24 <__sfvwrite_r>:
   10e24:	6893      	ldr	r3, [r2, #8]
   10e26:	2b00      	cmp	r3, #0
   10e28:	f000 8085 	beq.w	10f36 <__sfvwrite_r+0x112>
   10e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e30:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   10e34:	460c      	mov	r4, r1
   10e36:	0719      	lsls	r1, r3, #28
   10e38:	4680      	mov	r8, r0
   10e3a:	b083      	sub	sp, #12
   10e3c:	4617      	mov	r7, r2
   10e3e:	b298      	uxth	r0, r3
   10e40:	d525      	bpl.n	10e8e <__sfvwrite_r+0x6a>
   10e42:	6923      	ldr	r3, [r4, #16]
   10e44:	b31b      	cbz	r3, 10e8e <__sfvwrite_r+0x6a>
   10e46:	f010 0302 	ands.w	r3, r0, #2
   10e4a:	683d      	ldr	r5, [r7, #0]
   10e4c:	d02d      	beq.n	10eaa <__sfvwrite_r+0x86>
   10e4e:	f04f 0a00 	mov.w	sl, #0
   10e52:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 11114 <__sfvwrite_r+0x2f0>
   10e56:	4656      	mov	r6, sl
   10e58:	46b9      	mov	r9, r7
   10e5a:	455e      	cmp	r6, fp
   10e5c:	4633      	mov	r3, r6
   10e5e:	4652      	mov	r2, sl
   10e60:	bf28      	it	cs
   10e62:	465b      	movcs	r3, fp
   10e64:	4640      	mov	r0, r8
   10e66:	2e00      	cmp	r6, #0
   10e68:	d052      	beq.n	10f10 <__sfvwrite_r+0xec>
   10e6a:	69e1      	ldr	r1, [r4, #28]
   10e6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10e6e:	47b8      	blx	r7
   10e70:	2800      	cmp	r0, #0
   10e72:	dd56      	ble.n	10f22 <__sfvwrite_r+0xfe>
   10e74:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10e78:	1a1b      	subs	r3, r3, r0
   10e7a:	4482      	add	sl, r0
   10e7c:	1a36      	subs	r6, r6, r0
   10e7e:	f8c9 3008 	str.w	r3, [r9, #8]
   10e82:	2b00      	cmp	r3, #0
   10e84:	d1e9      	bne.n	10e5a <__sfvwrite_r+0x36>
   10e86:	2000      	movs	r0, #0
   10e88:	b003      	add	sp, #12
   10e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e8e:	4621      	mov	r1, r4
   10e90:	4640      	mov	r0, r8
   10e92:	f000 f941 	bl	11118 <__swsetup_r>
   10e96:	2800      	cmp	r0, #0
   10e98:	f040 8138 	bne.w	1110c <__sfvwrite_r+0x2e8>
   10e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ea0:	683d      	ldr	r5, [r7, #0]
   10ea2:	b298      	uxth	r0, r3
   10ea4:	f010 0302 	ands.w	r3, r0, #2
   10ea8:	d1d1      	bne.n	10e4e <__sfvwrite_r+0x2a>
   10eaa:	f010 0901 	ands.w	r9, r0, #1
   10eae:	d144      	bne.n	10f3a <__sfvwrite_r+0x116>
   10eb0:	464e      	mov	r6, r9
   10eb2:	9700      	str	r7, [sp, #0]
   10eb4:	b346      	cbz	r6, 10f08 <__sfvwrite_r+0xe4>
   10eb6:	0582      	lsls	r2, r0, #22
   10eb8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   10ebc:	f140 8085 	bpl.w	10fca <__sfvwrite_r+0x1a6>
   10ec0:	45b3      	cmp	fp, r6
   10ec2:	465a      	mov	r2, fp
   10ec4:	f200 80b4 	bhi.w	11030 <__sfvwrite_r+0x20c>
   10ec8:	f410 6f90 	tst.w	r0, #1152	; 0x480
   10ecc:	f040 80c1 	bne.w	11052 <__sfvwrite_r+0x22e>
   10ed0:	6820      	ldr	r0, [r4, #0]
   10ed2:	9201      	str	r2, [sp, #4]
   10ed4:	4649      	mov	r1, r9
   10ed6:	f7fa fe17 	bl	bb08 <memmove>
   10eda:	68a3      	ldr	r3, [r4, #8]
   10edc:	9a01      	ldr	r2, [sp, #4]
   10ede:	eba3 010b 	sub.w	r1, r3, fp
   10ee2:	6823      	ldr	r3, [r4, #0]
   10ee4:	60a1      	str	r1, [r4, #8]
   10ee6:	4413      	add	r3, r2
   10ee8:	46b2      	mov	sl, r6
   10eea:	6023      	str	r3, [r4, #0]
   10eec:	2600      	movs	r6, #0
   10eee:	9a00      	ldr	r2, [sp, #0]
   10ef0:	6893      	ldr	r3, [r2, #8]
   10ef2:	eba3 030a 	sub.w	r3, r3, sl
   10ef6:	44d1      	add	r9, sl
   10ef8:	6093      	str	r3, [r2, #8]
   10efa:	2b00      	cmp	r3, #0
   10efc:	d0c3      	beq.n	10e86 <__sfvwrite_r+0x62>
   10efe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10f02:	b280      	uxth	r0, r0
   10f04:	2e00      	cmp	r6, #0
   10f06:	d1d6      	bne.n	10eb6 <__sfvwrite_r+0x92>
   10f08:	e9d5 9600 	ldrd	r9, r6, [r5]
   10f0c:	3508      	adds	r5, #8
   10f0e:	e7d1      	b.n	10eb4 <__sfvwrite_r+0x90>
   10f10:	e9d5 a600 	ldrd	sl, r6, [r5]
   10f14:	3508      	adds	r5, #8
   10f16:	e7a0      	b.n	10e5a <__sfvwrite_r+0x36>
   10f18:	4621      	mov	r1, r4
   10f1a:	4640      	mov	r0, r8
   10f1c:	f7fd fe56 	bl	ebcc <_fflush_r>
   10f20:	b388      	cbz	r0, 10f86 <__sfvwrite_r+0x162>
   10f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10f2a:	f04f 30ff 	mov.w	r0, #4294967295
   10f2e:	81a3      	strh	r3, [r4, #12]
   10f30:	b003      	add	sp, #12
   10f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f36:	2000      	movs	r0, #0
   10f38:	4770      	bx	lr
   10f3a:	461e      	mov	r6, r3
   10f3c:	46ba      	mov	sl, r7
   10f3e:	4699      	mov	r9, r3
   10f40:	4618      	mov	r0, r3
   10f42:	9500      	str	r5, [sp, #0]
   10f44:	461f      	mov	r7, r3
   10f46:	b366      	cbz	r6, 10fa2 <__sfvwrite_r+0x17e>
   10f48:	2800      	cmp	r0, #0
   10f4a:	d032      	beq.n	10fb2 <__sfvwrite_r+0x18e>
   10f4c:	464a      	mov	r2, r9
   10f4e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10f52:	6820      	ldr	r0, [r4, #0]
   10f54:	68a5      	ldr	r5, [r4, #8]
   10f56:	42b2      	cmp	r2, r6
   10f58:	bf28      	it	cs
   10f5a:	4632      	movcs	r2, r6
   10f5c:	4288      	cmp	r0, r1
   10f5e:	d904      	bls.n	10f6a <__sfvwrite_r+0x146>
   10f60:	eb05 0b03 	add.w	fp, r5, r3
   10f64:	455a      	cmp	r2, fp
   10f66:	f300 80a7 	bgt.w	110b8 <__sfvwrite_r+0x294>
   10f6a:	4293      	cmp	r3, r2
   10f6c:	dc64      	bgt.n	11038 <__sfvwrite_r+0x214>
   10f6e:	69e1      	ldr	r1, [r4, #28]
   10f70:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10f72:	463a      	mov	r2, r7
   10f74:	4640      	mov	r0, r8
   10f76:	47a8      	blx	r5
   10f78:	f1b0 0b00 	subs.w	fp, r0, #0
   10f7c:	ddd1      	ble.n	10f22 <__sfvwrite_r+0xfe>
   10f7e:	ebb9 090b 	subs.w	r9, r9, fp
   10f82:	d0c9      	beq.n	10f18 <__sfvwrite_r+0xf4>
   10f84:	2001      	movs	r0, #1
   10f86:	f8da 3008 	ldr.w	r3, [sl, #8]
   10f8a:	eba3 030b 	sub.w	r3, r3, fp
   10f8e:	445f      	add	r7, fp
   10f90:	eba6 060b 	sub.w	r6, r6, fp
   10f94:	f8ca 3008 	str.w	r3, [sl, #8]
   10f98:	2b00      	cmp	r3, #0
   10f9a:	f43f af74 	beq.w	10e86 <__sfvwrite_r+0x62>
   10f9e:	2e00      	cmp	r6, #0
   10fa0:	d1d2      	bne.n	10f48 <__sfvwrite_r+0x124>
   10fa2:	9a00      	ldr	r2, [sp, #0]
   10fa4:	6856      	ldr	r6, [r2, #4]
   10fa6:	4613      	mov	r3, r2
   10fa8:	3208      	adds	r2, #8
   10faa:	9200      	str	r2, [sp, #0]
   10fac:	2e00      	cmp	r6, #0
   10fae:	d0f8      	beq.n	10fa2 <__sfvwrite_r+0x17e>
   10fb0:	681f      	ldr	r7, [r3, #0]
   10fb2:	4632      	mov	r2, r6
   10fb4:	210a      	movs	r1, #10
   10fb6:	4638      	mov	r0, r7
   10fb8:	f7fd fe3a 	bl	ec30 <memchr>
   10fbc:	2800      	cmp	r0, #0
   10fbe:	f000 809c 	beq.w	110fa <__sfvwrite_r+0x2d6>
   10fc2:	3001      	adds	r0, #1
   10fc4:	eba0 0907 	sub.w	r9, r0, r7
   10fc8:	e7c0      	b.n	10f4c <__sfvwrite_r+0x128>
   10fca:	6820      	ldr	r0, [r4, #0]
   10fcc:	6923      	ldr	r3, [r4, #16]
   10fce:	4298      	cmp	r0, r3
   10fd0:	d816      	bhi.n	11000 <__sfvwrite_r+0x1dc>
   10fd2:	6962      	ldr	r2, [r4, #20]
   10fd4:	42b2      	cmp	r2, r6
   10fd6:	d813      	bhi.n	11000 <__sfvwrite_r+0x1dc>
   10fd8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10fdc:	42b3      	cmp	r3, r6
   10fde:	bf28      	it	cs
   10fe0:	4633      	movcs	r3, r6
   10fe2:	69e1      	ldr	r1, [r4, #28]
   10fe4:	fb93 f3f2 	sdiv	r3, r3, r2
   10fe8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10fea:	fb02 f303 	mul.w	r3, r2, r3
   10fee:	4640      	mov	r0, r8
   10ff0:	464a      	mov	r2, r9
   10ff2:	47b8      	blx	r7
   10ff4:	f1b0 0a00 	subs.w	sl, r0, #0
   10ff8:	dd93      	ble.n	10f22 <__sfvwrite_r+0xfe>
   10ffa:	eba6 060a 	sub.w	r6, r6, sl
   10ffe:	e776      	b.n	10eee <__sfvwrite_r+0xca>
   11000:	45b3      	cmp	fp, r6
   11002:	46da      	mov	sl, fp
   11004:	bf28      	it	cs
   11006:	46b2      	movcs	sl, r6
   11008:	4652      	mov	r2, sl
   1100a:	4649      	mov	r1, r9
   1100c:	f7fa fd7c 	bl	bb08 <memmove>
   11010:	68a3      	ldr	r3, [r4, #8]
   11012:	6822      	ldr	r2, [r4, #0]
   11014:	eba3 030a 	sub.w	r3, r3, sl
   11018:	4452      	add	r2, sl
   1101a:	60a3      	str	r3, [r4, #8]
   1101c:	6022      	str	r2, [r4, #0]
   1101e:	2b00      	cmp	r3, #0
   11020:	d1eb      	bne.n	10ffa <__sfvwrite_r+0x1d6>
   11022:	4621      	mov	r1, r4
   11024:	4640      	mov	r0, r8
   11026:	f7fd fdd1 	bl	ebcc <_fflush_r>
   1102a:	2800      	cmp	r0, #0
   1102c:	d0e5      	beq.n	10ffa <__sfvwrite_r+0x1d6>
   1102e:	e778      	b.n	10f22 <__sfvwrite_r+0xfe>
   11030:	6820      	ldr	r0, [r4, #0]
   11032:	46b3      	mov	fp, r6
   11034:	4632      	mov	r2, r6
   11036:	e74c      	b.n	10ed2 <__sfvwrite_r+0xae>
   11038:	4639      	mov	r1, r7
   1103a:	9201      	str	r2, [sp, #4]
   1103c:	f7fa fd64 	bl	bb08 <memmove>
   11040:	9a01      	ldr	r2, [sp, #4]
   11042:	68a3      	ldr	r3, [r4, #8]
   11044:	1a9b      	subs	r3, r3, r2
   11046:	60a3      	str	r3, [r4, #8]
   11048:	6823      	ldr	r3, [r4, #0]
   1104a:	4413      	add	r3, r2
   1104c:	6023      	str	r3, [r4, #0]
   1104e:	4693      	mov	fp, r2
   11050:	e795      	b.n	10f7e <__sfvwrite_r+0x15a>
   11052:	6823      	ldr	r3, [r4, #0]
   11054:	6921      	ldr	r1, [r4, #16]
   11056:	eba3 0b01 	sub.w	fp, r3, r1
   1105a:	6963      	ldr	r3, [r4, #20]
   1105c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   11060:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   11064:	f10b 0301 	add.w	r3, fp, #1
   11068:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1106c:	4433      	add	r3, r6
   1106e:	4553      	cmp	r3, sl
   11070:	4652      	mov	r2, sl
   11072:	bf84      	itt	hi
   11074:	469a      	movhi	sl, r3
   11076:	4652      	movhi	r2, sl
   11078:	0543      	lsls	r3, r0, #21
   1107a:	d52c      	bpl.n	110d6 <__sfvwrite_r+0x2b2>
   1107c:	4611      	mov	r1, r2
   1107e:	4640      	mov	r0, r8
   11080:	f7f9 fd76 	bl	ab70 <_malloc_r>
   11084:	2800      	cmp	r0, #0
   11086:	d03b      	beq.n	11100 <__sfvwrite_r+0x2dc>
   11088:	465a      	mov	r2, fp
   1108a:	6921      	ldr	r1, [r4, #16]
   1108c:	9001      	str	r0, [sp, #4]
   1108e:	f7f7 ffa9 	bl	8fe4 <memcpy>
   11092:	89a2      	ldrh	r2, [r4, #12]
   11094:	9b01      	ldr	r3, [sp, #4]
   11096:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1109a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1109e:	81a2      	strh	r2, [r4, #12]
   110a0:	eb03 000b 	add.w	r0, r3, fp
   110a4:	6123      	str	r3, [r4, #16]
   110a6:	ebaa 030b 	sub.w	r3, sl, fp
   110aa:	f8c4 a014 	str.w	sl, [r4, #20]
   110ae:	60a3      	str	r3, [r4, #8]
   110b0:	6020      	str	r0, [r4, #0]
   110b2:	46b3      	mov	fp, r6
   110b4:	4632      	mov	r2, r6
   110b6:	e70c      	b.n	10ed2 <__sfvwrite_r+0xae>
   110b8:	4639      	mov	r1, r7
   110ba:	465a      	mov	r2, fp
   110bc:	f7fa fd24 	bl	bb08 <memmove>
   110c0:	6823      	ldr	r3, [r4, #0]
   110c2:	445b      	add	r3, fp
   110c4:	6023      	str	r3, [r4, #0]
   110c6:	4621      	mov	r1, r4
   110c8:	4640      	mov	r0, r8
   110ca:	f7fd fd7f 	bl	ebcc <_fflush_r>
   110ce:	2800      	cmp	r0, #0
   110d0:	f43f af55 	beq.w	10f7e <__sfvwrite_r+0x15a>
   110d4:	e725      	b.n	10f22 <__sfvwrite_r+0xfe>
   110d6:	4640      	mov	r0, r8
   110d8:	f7fa f812 	bl	b100 <_realloc_r>
   110dc:	4603      	mov	r3, r0
   110de:	2800      	cmp	r0, #0
   110e0:	d1de      	bne.n	110a0 <__sfvwrite_r+0x27c>
   110e2:	6921      	ldr	r1, [r4, #16]
   110e4:	4640      	mov	r0, r8
   110e6:	f7fb f9ed 	bl	c4c4 <_free_r>
   110ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   110ee:	220c      	movs	r2, #12
   110f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   110f4:	f8c8 2000 	str.w	r2, [r8]
   110f8:	e715      	b.n	10f26 <__sfvwrite_r+0x102>
   110fa:	1c72      	adds	r2, r6, #1
   110fc:	4691      	mov	r9, r2
   110fe:	e726      	b.n	10f4e <__sfvwrite_r+0x12a>
   11100:	220c      	movs	r2, #12
   11102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11106:	f8c8 2000 	str.w	r2, [r8]
   1110a:	e70c      	b.n	10f26 <__sfvwrite_r+0x102>
   1110c:	f04f 30ff 	mov.w	r0, #4294967295
   11110:	e6ba      	b.n	10e88 <__sfvwrite_r+0x64>
   11112:	bf00      	nop
   11114:	7ffffc00 	.word	0x7ffffc00

00011118 <__swsetup_r>:
   11118:	b538      	push	{r3, r4, r5, lr}
   1111a:	4b31      	ldr	r3, [pc, #196]	; (111e0 <__swsetup_r+0xc8>)
   1111c:	681b      	ldr	r3, [r3, #0]
   1111e:	4605      	mov	r5, r0
   11120:	460c      	mov	r4, r1
   11122:	b113      	cbz	r3, 1112a <__swsetup_r+0x12>
   11124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   11126:	2a00      	cmp	r2, #0
   11128:	d04e      	beq.n	111c8 <__swsetup_r+0xb0>
   1112a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1112e:	0718      	lsls	r0, r3, #28
   11130:	b29a      	uxth	r2, r3
   11132:	d51c      	bpl.n	1116e <__swsetup_r+0x56>
   11134:	6921      	ldr	r1, [r4, #16]
   11136:	b329      	cbz	r1, 11184 <__swsetup_r+0x6c>
   11138:	f012 0001 	ands.w	r0, r2, #1
   1113c:	d007      	beq.n	1114e <__swsetup_r+0x36>
   1113e:	2000      	movs	r0, #0
   11140:	60a0      	str	r0, [r4, #8]
   11142:	6960      	ldr	r0, [r4, #20]
   11144:	4240      	negs	r0, r0
   11146:	61a0      	str	r0, [r4, #24]
   11148:	b139      	cbz	r1, 1115a <__swsetup_r+0x42>
   1114a:	2000      	movs	r0, #0
   1114c:	bd38      	pop	{r3, r4, r5, pc}
   1114e:	0795      	lsls	r5, r2, #30
   11150:	bf58      	it	pl
   11152:	6960      	ldrpl	r0, [r4, #20]
   11154:	60a0      	str	r0, [r4, #8]
   11156:	2900      	cmp	r1, #0
   11158:	d1f7      	bne.n	1114a <__swsetup_r+0x32>
   1115a:	0612      	lsls	r2, r2, #24
   1115c:	bf58      	it	pl
   1115e:	4608      	movpl	r0, r1
   11160:	d5f4      	bpl.n	1114c <__swsetup_r+0x34>
   11162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11166:	81a3      	strh	r3, [r4, #12]
   11168:	f04f 30ff 	mov.w	r0, #4294967295
   1116c:	bd38      	pop	{r3, r4, r5, pc}
   1116e:	06d1      	lsls	r1, r2, #27
   11170:	d52e      	bpl.n	111d0 <__swsetup_r+0xb8>
   11172:	0752      	lsls	r2, r2, #29
   11174:	d414      	bmi.n	111a0 <__swsetup_r+0x88>
   11176:	6921      	ldr	r1, [r4, #16]
   11178:	f043 0308 	orr.w	r3, r3, #8
   1117c:	81a3      	strh	r3, [r4, #12]
   1117e:	b29a      	uxth	r2, r3
   11180:	2900      	cmp	r1, #0
   11182:	d1d9      	bne.n	11138 <__swsetup_r+0x20>
   11184:	f402 7020 	and.w	r0, r2, #640	; 0x280
   11188:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1118c:	d0d4      	beq.n	11138 <__swsetup_r+0x20>
   1118e:	4621      	mov	r1, r4
   11190:	4628      	mov	r0, r5
   11192:	f000 f947 	bl	11424 <__smakebuf_r>
   11196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1119a:	6921      	ldr	r1, [r4, #16]
   1119c:	b29a      	uxth	r2, r3
   1119e:	e7cb      	b.n	11138 <__swsetup_r+0x20>
   111a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   111a2:	b151      	cbz	r1, 111ba <__swsetup_r+0xa2>
   111a4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   111a8:	4291      	cmp	r1, r2
   111aa:	d004      	beq.n	111b6 <__swsetup_r+0x9e>
   111ac:	4628      	mov	r0, r5
   111ae:	f7fb f989 	bl	c4c4 <_free_r>
   111b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   111b6:	2200      	movs	r2, #0
   111b8:	6322      	str	r2, [r4, #48]	; 0x30
   111ba:	6921      	ldr	r1, [r4, #16]
   111bc:	2200      	movs	r2, #0
   111be:	e9c4 1200 	strd	r1, r2, [r4]
   111c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   111c6:	e7d7      	b.n	11178 <__swsetup_r+0x60>
   111c8:	4618      	mov	r0, r3
   111ca:	f7fa fbe9 	bl	b9a0 <__sinit>
   111ce:	e7ac      	b.n	1112a <__swsetup_r+0x12>
   111d0:	2209      	movs	r2, #9
   111d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111d6:	602a      	str	r2, [r5, #0]
   111d8:	f04f 30ff 	mov.w	r0, #4294967295
   111dc:	81a3      	strh	r3, [r4, #12]
   111de:	bd38      	pop	{r3, r4, r5, pc}
   111e0:	20004a34 	.word	0x20004a34

000111e4 <__fputwc>:
   111e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   111e8:	b082      	sub	sp, #8
   111ea:	4682      	mov	sl, r0
   111ec:	4688      	mov	r8, r1
   111ee:	4614      	mov	r4, r2
   111f0:	f7fa fdf0 	bl	bdd4 <__locale_mb_cur_max>
   111f4:	2801      	cmp	r0, #1
   111f6:	d103      	bne.n	11200 <__fputwc+0x1c>
   111f8:	f108 33ff 	add.w	r3, r8, #4294967295
   111fc:	2bfe      	cmp	r3, #254	; 0xfe
   111fe:	d936      	bls.n	1126e <__fputwc+0x8a>
   11200:	f10d 0904 	add.w	r9, sp, #4
   11204:	4642      	mov	r2, r8
   11206:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1120a:	4649      	mov	r1, r9
   1120c:	4650      	mov	r0, sl
   1120e:	f7fe fd01 	bl	fc14 <_wcrtomb_r>
   11212:	1c42      	adds	r2, r0, #1
   11214:	4606      	mov	r6, r0
   11216:	d032      	beq.n	1127e <__fputwc+0x9a>
   11218:	b320      	cbz	r0, 11264 <__fputwc+0x80>
   1121a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1121e:	2500      	movs	r5, #0
   11220:	e009      	b.n	11236 <__fputwc+0x52>
   11222:	6823      	ldr	r3, [r4, #0]
   11224:	1c5a      	adds	r2, r3, #1
   11226:	6022      	str	r2, [r4, #0]
   11228:	f883 c000 	strb.w	ip, [r3]
   1122c:	3501      	adds	r5, #1
   1122e:	42b5      	cmp	r5, r6
   11230:	d218      	bcs.n	11264 <__fputwc+0x80>
   11232:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   11236:	68a3      	ldr	r3, [r4, #8]
   11238:	3b01      	subs	r3, #1
   1123a:	2b00      	cmp	r3, #0
   1123c:	60a3      	str	r3, [r4, #8]
   1123e:	daf0      	bge.n	11222 <__fputwc+0x3e>
   11240:	69a7      	ldr	r7, [r4, #24]
   11242:	42bb      	cmp	r3, r7
   11244:	4661      	mov	r1, ip
   11246:	4622      	mov	r2, r4
   11248:	4650      	mov	r0, sl
   1124a:	db02      	blt.n	11252 <__fputwc+0x6e>
   1124c:	f1bc 0f0a 	cmp.w	ip, #10
   11250:	d1e7      	bne.n	11222 <__fputwc+0x3e>
   11252:	f000 f953 	bl	114fc <__swbuf_r>
   11256:	1c43      	adds	r3, r0, #1
   11258:	d1e8      	bne.n	1122c <__fputwc+0x48>
   1125a:	4606      	mov	r6, r0
   1125c:	4630      	mov	r0, r6
   1125e:	b002      	add	sp, #8
   11260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11264:	4646      	mov	r6, r8
   11266:	4630      	mov	r0, r6
   11268:	b002      	add	sp, #8
   1126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1126e:	fa5f fc88 	uxtb.w	ip, r8
   11272:	f88d c004 	strb.w	ip, [sp, #4]
   11276:	4606      	mov	r6, r0
   11278:	f10d 0904 	add.w	r9, sp, #4
   1127c:	e7cf      	b.n	1121e <__fputwc+0x3a>
   1127e:	89a3      	ldrh	r3, [r4, #12]
   11280:	4630      	mov	r0, r6
   11282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11286:	81a3      	strh	r3, [r4, #12]
   11288:	b002      	add	sp, #8
   1128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1128e:	bf00      	nop

00011290 <_fputwc_r>:
   11290:	b530      	push	{r4, r5, lr}
   11292:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11294:	f013 0f01 	tst.w	r3, #1
   11298:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1129c:	4614      	mov	r4, r2
   1129e:	b083      	sub	sp, #12
   112a0:	4605      	mov	r5, r0
   112a2:	b29a      	uxth	r2, r3
   112a4:	d101      	bne.n	112aa <_fputwc_r+0x1a>
   112a6:	0598      	lsls	r0, r3, #22
   112a8:	d51c      	bpl.n	112e4 <_fputwc_r+0x54>
   112aa:	0490      	lsls	r0, r2, #18
   112ac:	d406      	bmi.n	112bc <_fputwc_r+0x2c>
   112ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   112b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   112b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   112b8:	81a3      	strh	r3, [r4, #12]
   112ba:	6662      	str	r2, [r4, #100]	; 0x64
   112bc:	4622      	mov	r2, r4
   112be:	4628      	mov	r0, r5
   112c0:	f7ff ff90 	bl	111e4 <__fputwc>
   112c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   112c6:	07da      	lsls	r2, r3, #31
   112c8:	4605      	mov	r5, r0
   112ca:	d402      	bmi.n	112d2 <_fputwc_r+0x42>
   112cc:	89a3      	ldrh	r3, [r4, #12]
   112ce:	059b      	lsls	r3, r3, #22
   112d0:	d502      	bpl.n	112d8 <_fputwc_r+0x48>
   112d2:	4628      	mov	r0, r5
   112d4:	b003      	add	sp, #12
   112d6:	bd30      	pop	{r4, r5, pc}
   112d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   112da:	f7fa fe17 	bl	bf0c <__retarget_lock_release_recursive>
   112de:	4628      	mov	r0, r5
   112e0:	b003      	add	sp, #12
   112e2:	bd30      	pop	{r4, r5, pc}
   112e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   112e6:	9101      	str	r1, [sp, #4]
   112e8:	f7fa fe0e 	bl	bf08 <__retarget_lock_acquire_recursive>
   112ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   112f0:	9901      	ldr	r1, [sp, #4]
   112f2:	b29a      	uxth	r2, r3
   112f4:	e7d9      	b.n	112aa <_fputwc_r+0x1a>
   112f6:	bf00      	nop

000112f8 <_wcsnrtombs_l>:
   112f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112fc:	b08b      	sub	sp, #44	; 0x2c
   112fe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   11302:	9f14      	ldr	r7, [sp, #80]	; 0x50
   11304:	9103      	str	r1, [sp, #12]
   11306:	4681      	mov	r9, r0
   11308:	9205      	str	r2, [sp, #20]
   1130a:	461e      	mov	r6, r3
   1130c:	f1b8 0f00 	cmp.w	r8, #0
   11310:	d05c      	beq.n	113cc <_wcsnrtombs_l+0xd4>
   11312:	9b03      	ldr	r3, [sp, #12]
   11314:	2b00      	cmp	r3, #0
   11316:	d05e      	beq.n	113d6 <_wcsnrtombs_l+0xde>
   11318:	9b05      	ldr	r3, [sp, #20]
   1131a:	681d      	ldr	r5, [r3, #0]
   1131c:	2f00      	cmp	r7, #0
   1131e:	d06a      	beq.n	113f6 <_wcsnrtombs_l+0xfe>
   11320:	1e74      	subs	r4, r6, #1
   11322:	b34e      	cbz	r6, 11378 <_wcsnrtombs_l+0x80>
   11324:	9b03      	ldr	r3, [sp, #12]
   11326:	9304      	str	r3, [sp, #16]
   11328:	3d04      	subs	r5, #4
   1132a:	2600      	movs	r6, #0
   1132c:	9501      	str	r5, [sp, #4]
   1132e:	e00b      	b.n	11348 <_wcsnrtombs_l+0x50>
   11330:	9b03      	ldr	r3, [sp, #12]
   11332:	bb2b      	cbnz	r3, 11380 <_wcsnrtombs_l+0x88>
   11334:	9b01      	ldr	r3, [sp, #4]
   11336:	681a      	ldr	r2, [r3, #0]
   11338:	2a00      	cmp	r2, #0
   1133a:	d03a      	beq.n	113b2 <_wcsnrtombs_l+0xba>
   1133c:	45bc      	cmp	ip, r7
   1133e:	d25c      	bcs.n	113fa <_wcsnrtombs_l+0x102>
   11340:	3c01      	subs	r4, #1
   11342:	1c63      	adds	r3, r4, #1
   11344:	4666      	mov	r6, ip
   11346:	d017      	beq.n	11378 <_wcsnrtombs_l+0x80>
   11348:	f8d8 3000 	ldr.w	r3, [r8]
   1134c:	9302      	str	r3, [sp, #8]
   1134e:	9b01      	ldr	r3, [sp, #4]
   11350:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   11354:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11358:	9301      	str	r3, [sp, #4]
   1135a:	a907      	add	r1, sp, #28
   1135c:	4643      	mov	r3, r8
   1135e:	4648      	mov	r0, r9
   11360:	f8d8 b004 	ldr.w	fp, [r8, #4]
   11364:	47a8      	blx	r5
   11366:	1c42      	adds	r2, r0, #1
   11368:	d03a      	beq.n	113e0 <_wcsnrtombs_l+0xe8>
   1136a:	eb00 0c06 	add.w	ip, r0, r6
   1136e:	45bc      	cmp	ip, r7
   11370:	d9de      	bls.n	11330 <_wcsnrtombs_l+0x38>
   11372:	9b02      	ldr	r3, [sp, #8]
   11374:	e9c8 3b00 	strd	r3, fp, [r8]
   11378:	4630      	mov	r0, r6
   1137a:	b00b      	add	sp, #44	; 0x2c
   1137c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11380:	2800      	cmp	r0, #0
   11382:	dd0e      	ble.n	113a2 <_wcsnrtombs_l+0xaa>
   11384:	9b04      	ldr	r3, [sp, #16]
   11386:	9d01      	ldr	r5, [sp, #4]
   11388:	4418      	add	r0, r3
   1138a:	1e5a      	subs	r2, r3, #1
   1138c:	a907      	add	r1, sp, #28
   1138e:	f100 3eff 	add.w	lr, r0, #4294967295
   11392:	f811 3b01 	ldrb.w	r3, [r1], #1
   11396:	f802 3f01 	strb.w	r3, [r2, #1]!
   1139a:	4572      	cmp	r2, lr
   1139c:	d1f9      	bne.n	11392 <_wcsnrtombs_l+0x9a>
   1139e:	9501      	str	r5, [sp, #4]
   113a0:	9004      	str	r0, [sp, #16]
   113a2:	9b05      	ldr	r3, [sp, #20]
   113a4:	681a      	ldr	r2, [r3, #0]
   113a6:	3204      	adds	r2, #4
   113a8:	601a      	str	r2, [r3, #0]
   113aa:	9b01      	ldr	r3, [sp, #4]
   113ac:	681a      	ldr	r2, [r3, #0]
   113ae:	2a00      	cmp	r2, #0
   113b0:	d1c4      	bne.n	1133c <_wcsnrtombs_l+0x44>
   113b2:	9b03      	ldr	r3, [sp, #12]
   113b4:	b10b      	cbz	r3, 113ba <_wcsnrtombs_l+0xc2>
   113b6:	9b05      	ldr	r3, [sp, #20]
   113b8:	601a      	str	r2, [r3, #0]
   113ba:	f10c 36ff 	add.w	r6, ip, #4294967295
   113be:	2200      	movs	r2, #0
   113c0:	4630      	mov	r0, r6
   113c2:	f8c8 2000 	str.w	r2, [r8]
   113c6:	b00b      	add	sp, #44	; 0x2c
   113c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113cc:	9b03      	ldr	r3, [sp, #12]
   113ce:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   113d2:	2b00      	cmp	r3, #0
   113d4:	d1a0      	bne.n	11318 <_wcsnrtombs_l+0x20>
   113d6:	9b05      	ldr	r3, [sp, #20]
   113d8:	f04f 37ff 	mov.w	r7, #4294967295
   113dc:	681d      	ldr	r5, [r3, #0]
   113de:	e79f      	b.n	11320 <_wcsnrtombs_l+0x28>
   113e0:	4606      	mov	r6, r0
   113e2:	218a      	movs	r1, #138	; 0x8a
   113e4:	2200      	movs	r2, #0
   113e6:	4630      	mov	r0, r6
   113e8:	f8c9 1000 	str.w	r1, [r9]
   113ec:	f8c8 2000 	str.w	r2, [r8]
   113f0:	b00b      	add	sp, #44	; 0x2c
   113f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113f6:	463e      	mov	r6, r7
   113f8:	e7be      	b.n	11378 <_wcsnrtombs_l+0x80>
   113fa:	4666      	mov	r6, ip
   113fc:	e7bc      	b.n	11378 <_wcsnrtombs_l+0x80>
   113fe:	bf00      	nop

00011400 <_wcsnrtombs_r>:
   11400:	b510      	push	{r4, lr}
   11402:	b084      	sub	sp, #16
   11404:	4c05      	ldr	r4, [pc, #20]	; (1141c <_wcsnrtombs_r+0x1c>)
   11406:	9806      	ldr	r0, [sp, #24]
   11408:	9000      	str	r0, [sp, #0]
   1140a:	9807      	ldr	r0, [sp, #28]
   1140c:	9001      	str	r0, [sp, #4]
   1140e:	4804      	ldr	r0, [pc, #16]	; (11420 <_wcsnrtombs_r+0x20>)
   11410:	6800      	ldr	r0, [r0, #0]
   11412:	9402      	str	r4, [sp, #8]
   11414:	f7ff ff70 	bl	112f8 <_wcsnrtombs_l>
   11418:	b004      	add	sp, #16
   1141a:	bd10      	pop	{r4, pc}
   1141c:	200044ac 	.word	0x200044ac
   11420:	20004a34 	.word	0x20004a34

00011424 <__smakebuf_r>:
   11424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11428:	898b      	ldrh	r3, [r1, #12]
   1142a:	460c      	mov	r4, r1
   1142c:	0799      	lsls	r1, r3, #30
   1142e:	b096      	sub	sp, #88	; 0x58
   11430:	d508      	bpl.n	11444 <__smakebuf_r+0x20>
   11432:	f104 0343 	add.w	r3, r4, #67	; 0x43
   11436:	2201      	movs	r2, #1
   11438:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1143c:	6023      	str	r3, [r4, #0]
   1143e:	b016      	add	sp, #88	; 0x58
   11440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11448:	2900      	cmp	r1, #0
   1144a:	4606      	mov	r6, r0
   1144c:	db25      	blt.n	1149a <__smakebuf_r+0x76>
   1144e:	466a      	mov	r2, sp
   11450:	f000 f8ac 	bl	115ac <_fstat_r>
   11454:	2800      	cmp	r0, #0
   11456:	db1f      	blt.n	11498 <__smakebuf_r+0x74>
   11458:	9d01      	ldr	r5, [sp, #4]
   1145a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1145e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   11462:	fab5 f585 	clz	r5, r5
   11466:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1146a:	096d      	lsrs	r5, r5, #5
   1146c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   11470:	4641      	mov	r1, r8
   11472:	4630      	mov	r0, r6
   11474:	f7f9 fb7c 	bl	ab70 <_malloc_r>
   11478:	b1e0      	cbz	r0, 114b4 <__smakebuf_r+0x90>
   1147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1147e:	f8c4 8014 	str.w	r8, [r4, #20]
   11482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11486:	6020      	str	r0, [r4, #0]
   11488:	6120      	str	r0, [r4, #16]
   1148a:	81a3      	strh	r3, [r4, #12]
   1148c:	bb35      	cbnz	r5, 114dc <__smakebuf_r+0xb8>
   1148e:	433b      	orrs	r3, r7
   11490:	81a3      	strh	r3, [r4, #12]
   11492:	b016      	add	sp, #88	; 0x58
   11494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11498:	89a3      	ldrh	r3, [r4, #12]
   1149a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1149e:	d019      	beq.n	114d4 <__smakebuf_r+0xb0>
   114a0:	f04f 0840 	mov.w	r8, #64	; 0x40
   114a4:	2500      	movs	r5, #0
   114a6:	4641      	mov	r1, r8
   114a8:	4630      	mov	r0, r6
   114aa:	462f      	mov	r7, r5
   114ac:	f7f9 fb60 	bl	ab70 <_malloc_r>
   114b0:	2800      	cmp	r0, #0
   114b2:	d1e2      	bne.n	1147a <__smakebuf_r+0x56>
   114b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114b8:	059a      	lsls	r2, r3, #22
   114ba:	d4c0      	bmi.n	1143e <__smakebuf_r+0x1a>
   114bc:	f023 0303 	bic.w	r3, r3, #3
   114c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   114c4:	f043 0302 	orr.w	r3, r3, #2
   114c8:	2101      	movs	r1, #1
   114ca:	e9c4 2104 	strd	r2, r1, [r4, #16]
   114ce:	81a3      	strh	r3, [r4, #12]
   114d0:	6022      	str	r2, [r4, #0]
   114d2:	e7b4      	b.n	1143e <__smakebuf_r+0x1a>
   114d4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   114d8:	462f      	mov	r7, r5
   114da:	e7c9      	b.n	11470 <__smakebuf_r+0x4c>
   114dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   114e0:	4630      	mov	r0, r6
   114e2:	f000 f879 	bl	115d8 <_isatty_r>
   114e6:	b910      	cbnz	r0, 114ee <__smakebuf_r+0xca>
   114e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114ec:	e7cf      	b.n	1148e <__smakebuf_r+0x6a>
   114ee:	89a3      	ldrh	r3, [r4, #12]
   114f0:	f023 0303 	bic.w	r3, r3, #3
   114f4:	f043 0301 	orr.w	r3, r3, #1
   114f8:	b21b      	sxth	r3, r3
   114fa:	e7c8      	b.n	1148e <__smakebuf_r+0x6a>

000114fc <__swbuf_r>:
   114fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114fe:	460d      	mov	r5, r1
   11500:	4614      	mov	r4, r2
   11502:	4606      	mov	r6, r0
   11504:	b110      	cbz	r0, 1150c <__swbuf_r+0x10>
   11506:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11508:	2b00      	cmp	r3, #0
   1150a:	d04c      	beq.n	115a6 <__swbuf_r+0xaa>
   1150c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11510:	69a3      	ldr	r3, [r4, #24]
   11512:	60a3      	str	r3, [r4, #8]
   11514:	0717      	lsls	r7, r2, #28
   11516:	b290      	uxth	r0, r2
   11518:	d51b      	bpl.n	11552 <__swbuf_r+0x56>
   1151a:	6923      	ldr	r3, [r4, #16]
   1151c:	b1cb      	cbz	r3, 11552 <__swbuf_r+0x56>
   1151e:	b2ed      	uxtb	r5, r5
   11520:	0481      	lsls	r1, r0, #18
   11522:	462f      	mov	r7, r5
   11524:	d522      	bpl.n	1156c <__swbuf_r+0x70>
   11526:	6822      	ldr	r2, [r4, #0]
   11528:	6961      	ldr	r1, [r4, #20]
   1152a:	1ad3      	subs	r3, r2, r3
   1152c:	4299      	cmp	r1, r3
   1152e:	dd29      	ble.n	11584 <__swbuf_r+0x88>
   11530:	3301      	adds	r3, #1
   11532:	68a1      	ldr	r1, [r4, #8]
   11534:	3901      	subs	r1, #1
   11536:	60a1      	str	r1, [r4, #8]
   11538:	1c51      	adds	r1, r2, #1
   1153a:	6021      	str	r1, [r4, #0]
   1153c:	7015      	strb	r5, [r2, #0]
   1153e:	6962      	ldr	r2, [r4, #20]
   11540:	429a      	cmp	r2, r3
   11542:	d027      	beq.n	11594 <__swbuf_r+0x98>
   11544:	89a3      	ldrh	r3, [r4, #12]
   11546:	07db      	lsls	r3, r3, #31
   11548:	d501      	bpl.n	1154e <__swbuf_r+0x52>
   1154a:	2d0a      	cmp	r5, #10
   1154c:	d022      	beq.n	11594 <__swbuf_r+0x98>
   1154e:	4638      	mov	r0, r7
   11550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11552:	4621      	mov	r1, r4
   11554:	4630      	mov	r0, r6
   11556:	f7ff fddf 	bl	11118 <__swsetup_r>
   1155a:	bb08      	cbnz	r0, 115a0 <__swbuf_r+0xa4>
   1155c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11560:	6923      	ldr	r3, [r4, #16]
   11562:	b290      	uxth	r0, r2
   11564:	b2ed      	uxtb	r5, r5
   11566:	0481      	lsls	r1, r0, #18
   11568:	462f      	mov	r7, r5
   1156a:	d4dc      	bmi.n	11526 <__swbuf_r+0x2a>
   1156c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11570:	81a2      	strh	r2, [r4, #12]
   11572:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11574:	6961      	ldr	r1, [r4, #20]
   11576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1157a:	6662      	str	r2, [r4, #100]	; 0x64
   1157c:	6822      	ldr	r2, [r4, #0]
   1157e:	1ad3      	subs	r3, r2, r3
   11580:	4299      	cmp	r1, r3
   11582:	dcd5      	bgt.n	11530 <__swbuf_r+0x34>
   11584:	4621      	mov	r1, r4
   11586:	4630      	mov	r0, r6
   11588:	f7fd fb20 	bl	ebcc <_fflush_r>
   1158c:	b940      	cbnz	r0, 115a0 <__swbuf_r+0xa4>
   1158e:	6822      	ldr	r2, [r4, #0]
   11590:	2301      	movs	r3, #1
   11592:	e7ce      	b.n	11532 <__swbuf_r+0x36>
   11594:	4621      	mov	r1, r4
   11596:	4630      	mov	r0, r6
   11598:	f7fd fb18 	bl	ebcc <_fflush_r>
   1159c:	2800      	cmp	r0, #0
   1159e:	d0d6      	beq.n	1154e <__swbuf_r+0x52>
   115a0:	f04f 37ff 	mov.w	r7, #4294967295
   115a4:	e7d3      	b.n	1154e <__swbuf_r+0x52>
   115a6:	f7fa f9fb 	bl	b9a0 <__sinit>
   115aa:	e7af      	b.n	1150c <__swbuf_r+0x10>

000115ac <_fstat_r>:
   115ac:	b570      	push	{r4, r5, r6, lr}
   115ae:	460c      	mov	r4, r1
   115b0:	4d08      	ldr	r5, [pc, #32]	; (115d4 <_fstat_r+0x28>)
   115b2:	4603      	mov	r3, r0
   115b4:	2600      	movs	r6, #0
   115b6:	4620      	mov	r0, r4
   115b8:	4611      	mov	r1, r2
   115ba:	461c      	mov	r4, r3
   115bc:	602e      	str	r6, [r5, #0]
   115be:	f7f7 febd 	bl	933c <_fstat>
   115c2:	1c43      	adds	r3, r0, #1
   115c4:	d000      	beq.n	115c8 <_fstat_r+0x1c>
   115c6:	bd70      	pop	{r4, r5, r6, pc}
   115c8:	682b      	ldr	r3, [r5, #0]
   115ca:	2b00      	cmp	r3, #0
   115cc:	d0fb      	beq.n	115c6 <_fstat_r+0x1a>
   115ce:	6023      	str	r3, [r4, #0]
   115d0:	bd70      	pop	{r4, r5, r6, pc}
   115d2:	bf00      	nop
   115d4:	200053dc 	.word	0x200053dc

000115d8 <_isatty_r>:
   115d8:	b538      	push	{r3, r4, r5, lr}
   115da:	4d07      	ldr	r5, [pc, #28]	; (115f8 <_isatty_r+0x20>)
   115dc:	2200      	movs	r2, #0
   115de:	4604      	mov	r4, r0
   115e0:	4608      	mov	r0, r1
   115e2:	602a      	str	r2, [r5, #0]
   115e4:	f7f7 feb0 	bl	9348 <_isatty>
   115e8:	1c43      	adds	r3, r0, #1
   115ea:	d000      	beq.n	115ee <_isatty_r+0x16>
   115ec:	bd38      	pop	{r3, r4, r5, pc}
   115ee:	682b      	ldr	r3, [r5, #0]
   115f0:	2b00      	cmp	r3, #0
   115f2:	d0fb      	beq.n	115ec <_isatty_r+0x14>
   115f4:	6023      	str	r3, [r4, #0]
   115f6:	bd38      	pop	{r3, r4, r5, pc}
   115f8:	200053dc 	.word	0x200053dc
   115fc:	00000000 	.word	0x00000000

00011600 <___reboot_Teensyduino__veneer>:
   11600:	f85f f000 	ldr.w	pc, [pc]	; 11604 <___reboot_Teensyduino__veneer+0x4>
   11604:	60001d55 	.word	0x60001d55

00011608 <___init_veneer>:
   11608:	f85f f000 	ldr.w	pc, [pc]	; 1160c <___init_veneer+0x4>
   1160c:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

00011610 <_fini>:
   11610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11612:	bf00      	nop
