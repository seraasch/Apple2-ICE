
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc75 	bl	60001e20 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc5c 	bl	60001e40 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc2d 	bl	60001e08 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc43 	bl	60001e38 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00011898 	.word	0x00011898
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	600137f8 	.word	0x600137f8
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	00009409 	.word	0x00009409
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000a821 	.word	0x0000a821
600015f4:	20018868 	.word	0x20018868
600015f8:	0000a825 	.word	0x0000a825
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001886c 	.word	0x2001886c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 fa02 	bl	60001e30 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	200188a3 	.word	0x200188a3
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018858 	.word	0x20018858
60001c50:	20018854 	.word	0x20018854
60001c54:	2001885c 	.word	0x2001885c
60001c58:	20018860 	.word	0x20018860
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	000095e5 	.word	0x000095e5

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8c8 	bl	60001e10 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f89d 	bl	60001e18 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f895 	bl	60001e28 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	000097cd 	.word	0x000097cd

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	2001889d 	.word	0x2001889d

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <____libc_init_array_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <____libc_init_array_veneer+0x4>
60001e0c:	0000c145 	.word	0x0000c145

60001e10 <__usb_init_serialnumber_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__usb_init_serialnumber_veneer+0x4>
60001e14:	00009f3d 	.word	0x00009f3d

60001e18 <__delay_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__delay_veneer+0x4>
60001e1c:	00009149 	.word	0x00009149

60001e20 <__set_arm_clock_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__set_arm_clock_veneer+0x4>
60001e24:	0000a845 	.word	0x0000a845

60001e28 <__memset_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__memset_veneer+0x4>
60001e2c:	0000be8d 	.word	0x0000be8d

60001e30 <__sm_set_pool_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__sm_set_pool_veneer+0x4>
60001e34:	0000ad19 	.word	0x0000ad19

60001e38 <__main_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__main_veneer+0x4>
60001e3c:	00009261 	.word	0x00009261

60001e40 <__pwm_init_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__pwm_init_veneer+0x4>
60001e44:	0000abb1 	.word	0x0000abb1

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 00008ba5                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	60019400 	.word	0x60019400

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f008 fed3 	bl	8e18 <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f008 fecd 	bl	8e18 <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f008 fec7 	bl	8e18 <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f008 fe2f 	bl	8d08 <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f008 fe2b 	bl	8d08 <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f008 fe28 	bl	8d08 <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <Print::println(char const*) [clone .isra.0]>:
      cc:	b538      	push	{r3, r4, r5, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	b149      	cbz	r1, e6 <Print::println(char const*) [clone .isra.0]+0x1a>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4608      	mov	r0, r1
      d4:	460d      	mov	r5, r1
      d6:	f00c fa33 	bl	c540 <strlen>
      da:	6823      	ldr	r3, [r4, #0]
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	4602      	mov	r2, r0
      de:	4629      	mov	r1, r5
      e0:	685b      	ldr	r3, [r3, #4]
        return("");
      e2:	4620      	mov	r0, r4
      e4:	4798      	blx	r3
      e6:	4620      	mov	r0, r4
      e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}
      ec:	f008 bdb6 	b.w	8c5c <Print::println()>

000000f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>:
      f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      f4:	b093      	sub	sp, #76	; 0x4c
      f6:	460c      	mov	r4, r1
      f8:	4607      	mov	r7, r0
      fa:	2100      	movs	r1, #0
      fc:	a802      	add	r0, sp, #8
      fe:	9301      	str	r3, [sp, #4]
     100:	4691      	mov	r9, r2
     102:	f8df 8340 	ldr.w	r8, [pc, #832]	; 444 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x354>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f008 fe3b 	bl	8d80 <String::String(char const*)>
     10a:	2334      	movs	r3, #52	; 0x34
     10c:	fb03 8304 	mla	r3, r3, r4, r8
	if (newbuffer) {
     110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	2b02      	cmp	r3, #2
		capacity = maxStrLen;
     116:	d022      	beq.n	15e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x6e>
     118:	eb04 0644 	add.w	r6, r4, r4, lsl #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	2b03      	cmp	r3, #3
     11e:	ad0e      	add	r5, sp, #56	; 0x38
     120:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	ea4f 0686 	mov.w	r6, r6, lsl #2
     128:	d068      	beq.n	1fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x10c>
	mask = p->mask;
	if (pinmode & mask) {
     12a:	eb08 0106 	add.w	r1, r8, r6
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	4628      	mov	r0, r5
     130:	f008 fdb6 	bl	8ca0 <String::String(String const&)>
	mask = p->mask;
     134:	49ae      	ldr	r1, [pc, #696]	; (3f0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x300>)
	if (pinmode & mask) {
     136:	4628      	mov	r0, r5
     138:	f008 feee 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	a902      	add	r1, sp, #8
     13e:	f008 fee3 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     142:	4601      	mov	r1, r0
     144:	4638      	mov	r0, r7
     146:	f008 fdab 	bl	8ca0 <String::String(String const&)>
     14a:	4628      	mov	r0, r5
     14c:	f008 fddc 	bl	8d08 <String::~String()>
     150:	a802      	add	r0, sp, #8
     152:	f008 fdd9 	bl	8d08 <String::~String()>
     156:	4638      	mov	r0, r7
     158:	b013      	add	sp, #76	; 0x4c
     15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
     162:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	2210      	movs	r2, #16
     168:	4649      	mov	r1, r9
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
     16e:	4650      	mov	r0, sl
     170:	f008 fe1a 	bl	8da8 <String::String(int, unsigned char)>
     174:	499f      	ldr	r1, [pc, #636]	; (3f4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x304>)
     176:	00b6      	lsls	r6, r6, #2
     178:	ad0e      	add	r5, sp, #56	; 0x38
     17a:	f106 0b10 	add.w	fp, r6, #16
     17e:	44c3      	add	fp, r8
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	4658      	mov	r0, fp
     182:	f008 fed7 	bl	8f34 <String::equals(char const*) const>
     186:	2800      	cmp	r0, #0
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     188:	f040 8097 	bne.w	2ba <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ca>
     18c:	499a      	ldr	r1, [pc, #616]	; (3f8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x308>)
     18e:	4658      	mov	r0, fp
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	f008 fed0 	bl	8f34 <String::equals(char const*) const>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	2800      	cmp	r0, #0
     196:	d060      	beq.n	25a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x16a>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	4998      	ldr	r1, [pc, #608]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     19a:	4628      	mov	r0, r5
     19c:	f008 fdf0 	bl	8d80 <String::String(char const*)>
     1a0:	4651      	mov	r1, sl
     1a2:	4628      	mov	r0, r5
     1a4:	f008 feb0 	bl	8f08 <operator+(StringSumHelper const&, String const&)>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	4601      	mov	r1, r0
     1aa:	a802      	add	r0, sp, #8
     1ac:	f008 fe2c 	bl	8e08 <String::operator=(String const&)>

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1b0:	4628      	mov	r0, r5
     1b2:	f008 fda9 	bl	8d08 <String::~String()>

	// write out computed CTRL
	port->CTRL = ctrl;
     1b6:	4992      	ldr	r1, [pc, #584]	; (400 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x310>)

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b8:	4658      	mov	r0, fp
     1ba:	f008 febb 	bl	8f34 <String::equals(char const*) const>
     1be:	2800      	cmp	r0, #0
     1c0:	f040 8103 	bne.w	3ca <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2da>

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	498f      	ldr	r1, [pc, #572]	; (404 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x314>)
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c6:	4658      	mov	r0, fp
     1c8:	f008 feb4 	bl	8f34 <String::equals(char const*) const>
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1cc:	2800      	cmp	r0, #0
     1ce:	f040 80e9 	bne.w	3a4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x2b4>
	port->STAT = c;
     1d2:	498d      	ldr	r1, [pc, #564]	; (408 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x318>)

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d4:	4658      	mov	r0, fp
     1d6:	f008 fead 	bl	8f34 <String::equals(char const*) const>
     1da:	2800      	cmp	r0, #0
     1dc:	f040 80cf 	bne.w	37e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x28e>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	9b04      	ldr	r3, [sp, #16]
     1e2:	2b00      	cmp	r3, #0
};
     1e4:	f000 80b8 	beq.w	358 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x268>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	4650      	mov	r0, sl
     1ea:	f008 fd8d 	bl	8d08 <String::~String()>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	2334      	movs	r3, #52	; 0x34
     1f0:	fb03 8404 	mla	r4, r3, r4, r8
     1f4:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
     1f8:	2b03      	cmp	r3, #3
     1fa:	d196      	bne.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     1fc:	f106 0410 	add.w	r4, r6, #16
     200:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	4649      	mov	r1, r9
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     206:	2210      	movs	r2, #16
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     208:	a806      	add	r0, sp, #24
     20a:	4444      	add	r4, r8
     20c:	f008 fdcc 	bl	8da8 <String::String(int, unsigned char)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	9901      	ldr	r1, [sp, #4]
     212:	2210      	movs	r2, #16
     214:	4650      	mov	r0, sl
     216:	f008 fdc7 	bl	8da8 <String::String(int, unsigned char)>
     21a:	497c      	ldr	r1, [pc, #496]	; (40c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x31c>)
     21c:	4620      	mov	r0, r4
     21e:	f008 fe89 	bl	8f34 <String::equals(char const*) const>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	2800      	cmp	r0, #0
     224:	d159      	bne.n	2da <decode_opcode(unsigned char, unsigned char, unsigned char)+0x1ea>
     226:	497a      	ldr	r1, [pc, #488]	; (410 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x320>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	4620      	mov	r0, r4
     22a:	f008 fe83 	bl	8f34 <String::equals(char const*) const>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22e:	2800      	cmp	r0, #0
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	d17c      	bne.n	32c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x23c>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	4978      	ldr	r1, [pc, #480]	; (414 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x324>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	4620      	mov	r0, r4
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     236:	f008 fe7d 	bl	8f34 <String::equals(char const*) const>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	2800      	cmp	r0, #0
     23c:	d160      	bne.n	300 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x210>
     23e:	4976      	ldr	r1, [pc, #472]	; (418 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x328>)
};
     240:	4620      	mov	r0, r4
     242:	f008 fe77 	bl	8f34 <String::equals(char const*) const>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     246:	bb10      	cbnz	r0, 28e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x19e>
     248:	9b04      	ldr	r3, [sp, #16]
     24a:	b16b      	cbz	r3, 268 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x178>
     24c:	4650      	mov	r0, sl
     24e:	f008 fd5b 	bl	8d08 <String::~String()>
     252:	a806      	add	r0, sp, #24
     254:	f008 fd58 	bl	8d08 <String::~String()>
     258:	e767      	b.n	12a <decode_opcode(unsigned char, unsigned char, unsigned char)+0x3a>
     25a:	4970      	ldr	r1, [pc, #448]	; (41c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x32c>)
     25c:	4658      	mov	r0, fp
     25e:	f008 fe69 	bl	8f34 <String::equals(char const*) const>
     262:	2800      	cmp	r0, #0
     264:	d198      	bne.n	198 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xa8>
     266:	e7a6      	b.n	1b6 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xc6>
     268:	496d      	ldr	r1, [pc, #436]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     26a:	4628      	mov	r0, r5
     26c:	f008 fd88 	bl	8d80 <String::String(char const*)>
     270:	4621      	mov	r1, r4
     272:	4628      	mov	r0, r5
     274:	f008 fe48 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
		}
		if (instr->operands == "(ind)") {
			s = "($" + operand2 + operand1 + ")"; 
		}
		if (s.length() == 0) {
			s = "<unknown_format: " + instr->operands + ">";
     278:	496a      	ldr	r1, [pc, #424]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     27a:	f008 fe4d 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     27e:	4601      	mov	r1, r0
     280:	a802      	add	r0, sp, #8
     282:	f008 fdc1 	bl	8e08 <String::operator=(String const&)>
	static const char zerotermination;
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     286:	4628      	mov	r0, r5
     288:	f008 fd3e 	bl	8d08 <String::~String()>
     28c:	e7de      	b.n	24c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x15c>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     28e:	4966      	ldr	r1, [pc, #408]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     290:	4628      	mov	r0, r5
     292:	f008 fd75 	bl	8d80 <String::String(char const*)>
			s = "($" + operand2 + operand1 + ")"; 
     296:	4651      	mov	r1, sl
     298:	4628      	mov	r0, r5
     29a:	f008 fe35 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     29e:	a906      	add	r1, sp, #24
     2a0:	f008 fe32 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     2a4:	4961      	ldr	r1, [pc, #388]	; (42c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x33c>)
     2a6:	f008 fe37 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     2aa:	4601      	mov	r1, r0
     2ac:	a802      	add	r0, sp, #8
     2ae:	f008 fdab 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     2b2:	4628      	mov	r0, r5
     2b4:	f008 fd28 	bl	8d08 <String::~String()>
     2b8:	e7c6      	b.n	248 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x158>
	StringSumHelper(const char *p) : String(p) {}
     2ba:	495d      	ldr	r1, [pc, #372]	; (430 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x340>)
     2bc:	4628      	mov	r0, r5
     2be:	f008 fd5f 	bl	8d80 <String::String(char const*)>
			s = "#$" + operand;
     2c2:	4651      	mov	r1, sl
     2c4:	4628      	mov	r0, r5
     2c6:	f008 fe1f 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     2ca:	4601      	mov	r1, r0
     2cc:	a802      	add	r0, sp, #8
     2ce:	f008 fd9b 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     2d2:	4628      	mov	r0, r5
     2d4:	f008 fd18 	bl	8d08 <String::~String()>
     2d8:	e758      	b.n	18c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x9c>
	StringSumHelper(const char *p) : String(p) {}
     2da:	4948      	ldr	r1, [pc, #288]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     2dc:	4628      	mov	r0, r5
     2de:	f008 fd4f 	bl	8d80 <String::String(char const*)>
			s = "$" + operand2 + operand1; 
     2e2:	4651      	mov	r1, sl
     2e4:	4628      	mov	r0, r5
     2e6:	f008 fe0f 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     2ea:	a906      	add	r1, sp, #24
     2ec:	f008 fe0c 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     2f0:	4601      	mov	r1, r0
     2f2:	a802      	add	r0, sp, #8
     2f4:	f008 fd88 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     2f8:	4628      	mov	r0, r5
     2fa:	f008 fd05 	bl	8d08 <String::~String()>
     2fe:	e792      	b.n	226 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x136>
	StringSumHelper(const char *p) : String(p) {}
     300:	493e      	ldr	r1, [pc, #248]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     302:	4628      	mov	r0, r5
     304:	f008 fd3c 	bl	8d80 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",Y"; 
     308:	4651      	mov	r1, sl
     30a:	4628      	mov	r0, r5
     30c:	f008 fdfc 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     310:	a906      	add	r1, sp, #24
     312:	f008 fdf9 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     316:	4947      	ldr	r1, [pc, #284]	; (434 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x344>)
     318:	f008 fdfe 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     31c:	4601      	mov	r1, r0
     31e:	a802      	add	r0, sp, #8
     320:	f008 fd72 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     324:	4628      	mov	r0, r5
     326:	f008 fcef 	bl	8d08 <String::~String()>
     32a:	e788      	b.n	23e <decode_opcode(unsigned char, unsigned char, unsigned char)+0x14e>
	StringSumHelper(const char *p) : String(p) {}
     32c:	4933      	ldr	r1, [pc, #204]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     32e:	4628      	mov	r0, r5
     330:	f008 fd26 	bl	8d80 <String::String(char const*)>
			s = "$" + operand2 + operand1 + ",X"; 
     334:	4651      	mov	r1, sl
     336:	4628      	mov	r0, r5
     338:	f008 fde6 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     33c:	a906      	add	r1, sp, #24
     33e:	f008 fde3 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     342:	493d      	ldr	r1, [pc, #244]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     344:	f008 fde8 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     348:	4601      	mov	r1, r0
     34a:	a802      	add	r0, sp, #8
     34c:	f008 fd5c 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     350:	4628      	mov	r0, r5
     352:	f008 fcd9 	bl	8d08 <String::~String()>
     356:	e76c      	b.n	232 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x142>
	StringSumHelper(const char *p) : String(p) {}
     358:	4931      	ldr	r1, [pc, #196]	; (420 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x330>)
     35a:	4628      	mov	r0, r5
     35c:	f008 fd10 	bl	8d80 <String::String(char const*)>
			s = "<unknown_format: " + instr->operands + ">";
     360:	4659      	mov	r1, fp
     362:	4628      	mov	r0, r5
     364:	f008 fdd0 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     368:	492e      	ldr	r1, [pc, #184]	; (424 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x334>)
     36a:	f008 fdd5 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     36e:	4601      	mov	r1, r0
     370:	a802      	add	r0, sp, #8
     372:	f008 fd49 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     376:	4628      	mov	r0, r5
     378:	f008 fcc6 	bl	8d08 <String::~String()>
     37c:	e734      	b.n	1e8 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf8>
	StringSumHelper(const char *p) : String(p) {}
     37e:	491f      	ldr	r1, [pc, #124]	; (3fc <decode_opcode(unsigned char, unsigned char, unsigned char)+0x30c>)
     380:	4628      	mov	r0, r5
     382:	f008 fcfd 	bl	8d80 <String::String(char const*)>
			s = "$" + operand + ",X"; 
     386:	4651      	mov	r1, sl
     388:	4628      	mov	r0, r5
     38a:	f008 fdbd 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     38e:	492a      	ldr	r1, [pc, #168]	; (438 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x348>)
     390:	f008 fdc2 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     394:	4601      	mov	r1, r0
     396:	a802      	add	r0, sp, #8
     398:	f008 fd36 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     39c:	4628      	mov	r0, r5
     39e:	f008 fcb3 	bl	8d08 <String::~String()>
     3a2:	e71d      	b.n	1e0 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xf0>
	StringSumHelper(const char *p) : String(p) {}
     3a4:	4920      	ldr	r1, [pc, #128]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3a6:	4628      	mov	r0, r5
     3a8:	f008 fcea 	bl	8d80 <String::String(char const*)>
			s = "($" + operand + "),Y"; 
     3ac:	4651      	mov	r1, sl
     3ae:	4628      	mov	r0, r5
     3b0:	f008 fdaa 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     3b4:	4921      	ldr	r1, [pc, #132]	; (43c <decode_opcode(unsigned char, unsigned char, unsigned char)+0x34c>)
     3b6:	f008 fdaf 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     3ba:	4601      	mov	r1, r0
     3bc:	a802      	add	r0, sp, #8
     3be:	f008 fd23 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     3c2:	4628      	mov	r0, r5
     3c4:	f008 fca0 	bl	8d08 <String::~String()>
     3c8:	e703      	b.n	1d2 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xe2>
	StringSumHelper(const char *p) : String(p) {}
     3ca:	4917      	ldr	r1, [pc, #92]	; (428 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x338>)
     3cc:	4628      	mov	r0, r5
     3ce:	f008 fcd7 	bl	8d80 <String::String(char const*)>
			s = "($" + operand + ",X)"; 
     3d2:	4651      	mov	r1, sl
     3d4:	4628      	mov	r0, r5
     3d6:	f008 fd97 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
     3da:	4919      	ldr	r1, [pc, #100]	; (440 <decode_opcode(unsigned char, unsigned char, unsigned char)+0x350>)
     3dc:	f008 fd9c 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
     3e0:	4601      	mov	r1, r0
     3e2:	a802      	add	r0, sp, #8
     3e4:	f008 fd10 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
     3e8:	4628      	mov	r0, r5
     3ea:	f008 fc8d 	bl	8d08 <String::~String()>
     3ee:	e6e9      	b.n	1c4 <decode_opcode(unsigned char, unsigned char, unsigned char)+0xd4>
     3f0:	20000420 	.word	0x20000420
     3f4:	200003d8 	.word	0x200003d8
     3f8:	200003e0 	.word	0x200003e0
     3fc:	200003e4 	.word	0x200003e4
     400:	200003ec 	.word	0x200003ec
     404:	200003f8 	.word	0x200003f8
     408:	20000404 	.word	0x20000404
     40c:	20000428 	.word	0x20000428
     410:	2000042c 	.word	0x2000042c
     414:	20000434 	.word	0x20000434
     418:	20000440 	.word	0x20000440
     41c:	200003e8 	.word	0x200003e8
     420:	20000410 	.word	0x20000410
     424:	20000424 	.word	0x20000424
     428:	200003f4 	.word	0x200003f4
     42c:	20000444 	.word	0x20000444
     430:	200003dc 	.word	0x200003dc
     434:	2000043c 	.word	0x2000043c
     438:	2000040c 	.word	0x2000040c
     43c:	20000978 	.word	0x20000978
     440:	200003f0 	.word	0x200003f0
     444:	20015418 	.word	0x20015418

00000448 <OpDecoder::~OpDecoder()>:
struct OpDecoder {
     448:	b510      	push	{r4, lr}
     44a:	4604      	mov	r4, r0
     44c:	3020      	adds	r0, #32
     44e:	f008 fc5b 	bl	8d08 <String::~String()>
     452:	f104 0010 	add.w	r0, r4, #16
     456:	f008 fc57 	bl	8d08 <String::~String()>
     45a:	4620      	mov	r0, r4
     45c:	f008 fc54 	bl	8d08 <String::~String()>
     460:	4620      	mov	r0, r4
     462:	bd10      	pop	{r4, pc}

00000464 <initialize_opcode_info()>:
	}
	
	return(instr->opcode + " " + s);
}

void initialize_opcode_info() {
     464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     468:	b08f      	sub	sp, #60	; 0x3c
	opcode_info[0x00] = {"BRK","","B",7,1};
     46a:	4ccd      	ldr	r4, [pc, #820]	; (7a0 <initialize_opcode_info()+0x33c>)
     46c:	49cd      	ldr	r1, [pc, #820]	; (7a4 <initialize_opcode_info()+0x340>)
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     46e:	f240 2b03 	movw	fp, #515	; 0x203
	opcode_info[0x00] = {"BRK","","B",7,1};
     472:	a801      	add	r0, sp, #4
     474:	4dcc      	ldr	r5, [pc, #816]	; (7a8 <initialize_opcode_info()+0x344>)
     476:	f008 fc83 	bl	8d80 <String::String(char const*)>
     47a:	4621      	mov	r1, r4
     47c:	a805      	add	r0, sp, #20
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     47e:	f8df 9368 	ldr.w	r9, [pc, #872]	; 7e8 <initialize_opcode_info()+0x384>
	opcode_info[0x00] = {"BRK","","B",7,1};
     482:	f008 fc7d 	bl	8d80 <String::String(char const*)>
     486:	49c9      	ldr	r1, [pc, #804]	; (7ac <initialize_opcode_info()+0x348>)
     488:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     48a:	4fc9      	ldr	r7, [pc, #804]	; (7b0 <initialize_opcode_info()+0x34c>)
	opcode_info[0x00] = {"BRK","","B",7,1};
     48c:	f008 fc78 	bl	8d80 <String::String(char const*)>
     490:	f240 1307 	movw	r3, #263	; 0x107
     494:	a901      	add	r1, sp, #4
     496:	4628      	mov	r0, r5
     498:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     49c:	f7ff fde4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4a0:	a801      	add	r0, sp, #4
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     4a2:	f8df a348 	ldr.w	sl, [pc, #840]	; 7ec <initialize_opcode_info()+0x388>
	opcode_info[0x00] = {"BRK","","B",7,1};
     4a6:	f7ff ffcf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     4aa:	4649      	mov	r1, r9
     4ac:	a801      	add	r0, sp, #4
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     4ae:	4ec1      	ldr	r6, [pc, #772]	; (7b4 <initialize_opcode_info()+0x350>)
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     4b0:	f008 fc66 	bl	8d80 <String::String(char const*)>
     4b4:	49c0      	ldr	r1, [pc, #768]	; (7b8 <initialize_opcode_info()+0x354>)
     4b6:	a805      	add	r0, sp, #20
	opcode_info[0x08] = {"PHP","","",3,1};
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     4b8:	f8df 8334 	ldr.w	r8, [pc, #820]	; 7f0 <initialize_opcode_info()+0x38c>
	opcode_info[0x01] = {"ORA","(ind,X)","SZ",6,2};
     4bc:	f008 fc60 	bl	8d80 <String::String(char const*)>
     4c0:	4639      	mov	r1, r7
     4c2:	a809      	add	r0, sp, #36	; 0x24
     4c4:	f008 fc5c 	bl	8d80 <String::String(char const*)>
     4c8:	f240 2306 	movw	r3, #518	; 0x206
     4cc:	a901      	add	r1, sp, #4
     4ce:	f105 0034 	add.w	r0, r5, #52	; 0x34
     4d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     4d6:	f7ff fdc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4da:	aa01      	add	r2, sp, #4
     4dc:	4610      	mov	r0, r2
     4de:	f7ff ffb3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     4e2:	aa01      	add	r2, sp, #4
     4e4:	4649      	mov	r1, r9
     4e6:	4610      	mov	r0, r2
     4e8:	f008 fc4a 	bl	8d80 <String::String(char const*)>
     4ec:	aa05      	add	r2, sp, #20
     4ee:	4651      	mov	r1, sl
     4f0:	4610      	mov	r0, r2
     4f2:	f008 fc45 	bl	8d80 <String::String(char const*)>
     4f6:	aa09      	add	r2, sp, #36	; 0x24
     4f8:	4639      	mov	r1, r7
     4fa:	4610      	mov	r0, r2
     4fc:	f008 fc40 	bl	8d80 <String::String(char const*)>
     500:	a901      	add	r1, sp, #4
     502:	f505 7082 	add.w	r0, r5, #260	; 0x104
     506:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     50a:	f7ff fdad 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     50e:	aa01      	add	r2, sp, #4
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     510:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 7f4 <initialize_opcode_info()+0x390>
	opcode_info[0x05] = {"ORA","zpg","SZ",3,2};
     514:	4610      	mov	r0, r2
     516:	f7ff ff97 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x06] = {"ASL","zpg","SZC",5,2};
     51a:	aa01      	add	r2, sp, #4
     51c:	4659      	mov	r1, fp
     51e:	4610      	mov	r0, r2
     520:	f008 fc2e 	bl	8d80 <String::String(char const*)>
     524:	aa05      	add	r2, sp, #20
     526:	4651      	mov	r1, sl
     528:	4610      	mov	r0, r2
     52a:	f008 fc29 	bl	8d80 <String::String(char const*)>
     52e:	aa09      	add	r2, sp, #36	; 0x24
     530:	4631      	mov	r1, r6
     532:	4610      	mov	r0, r2
     534:	f008 fc24 	bl	8d80 <String::String(char const*)>
     538:	f240 2205 	movw	r2, #517	; 0x205
     53c:	a901      	add	r1, sp, #4
     53e:	f505 709c 	add.w	r0, r5, #312	; 0x138
     542:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     546:	f7ff fd8f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     54a:	a901      	add	r1, sp, #4
     54c:	4608      	mov	r0, r1
     54e:	f7ff ff7b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x08] = {"PHP","","",3,1};
     552:	499a      	ldr	r1, [pc, #616]	; (7bc <initialize_opcode_info()+0x358>)
     554:	a801      	add	r0, sp, #4
     556:	f008 fc13 	bl	8d80 <String::String(char const*)>
     55a:	4621      	mov	r1, r4
     55c:	a805      	add	r0, sp, #20
     55e:	f008 fc0f 	bl	8d80 <String::String(char const*)>
     562:	4621      	mov	r1, r4
     564:	a809      	add	r0, sp, #36	; 0x24
     566:	f008 fc0b 	bl	8d80 <String::String(char const*)>
     56a:	f240 1203 	movw	r2, #259	; 0x103
     56e:	a901      	add	r1, sp, #4
     570:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     574:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     578:	f7ff fd76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     57c:	a901      	add	r1, sp, #4
     57e:	4608      	mov	r0, r1
     580:	f7ff ff62 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x09] = {"ORA","#","SZ",2,2};
     584:	4649      	mov	r1, r9
     586:	a801      	add	r0, sp, #4
     588:	f008 fbfa 	bl	8d80 <String::String(char const*)>
     58c:	a905      	add	r1, sp, #20
     58e:	4608      	mov	r0, r1
     590:	498b      	ldr	r1, [pc, #556]	; (7c0 <initialize_opcode_info()+0x35c>)
     592:	f008 fbf5 	bl	8d80 <String::String(char const*)>
     596:	4639      	mov	r1, r7
     598:	a809      	add	r0, sp, #36	; 0x24
     59a:	f008 fbf1 	bl	8d80 <String::String(char const*)>
     59e:	f240 2302 	movw	r3, #514	; 0x202
     5a2:	a901      	add	r1, sp, #4
     5a4:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
     5a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     5ac:	f7ff fd5c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5b0:	a801      	add	r0, sp, #4
     5b2:	f7ff ff49 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
     5b6:	4659      	mov	r1, fp
     5b8:	a801      	add	r0, sp, #4
     5ba:	f008 fbe1 	bl	8d80 <String::String(char const*)>
     5be:	4b81      	ldr	r3, [pc, #516]	; (7c4 <initialize_opcode_info()+0x360>)
     5c0:	a805      	add	r0, sp, #20
     5c2:	4619      	mov	r1, r3
     5c4:	f008 fbdc 	bl	8d80 <String::String(char const*)>
     5c8:	4631      	mov	r1, r6
     5ca:	a809      	add	r0, sp, #36	; 0x24
     5cc:	f008 fbd8 	bl	8d80 <String::String(char const*)>
     5d0:	f44f 7381 	mov.w	r3, #258	; 0x102
     5d4:	a901      	add	r1, sp, #4
     5d6:	f505 7002 	add.w	r0, r5, #520	; 0x208
     5da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     5de:	f7ff fd43 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5e2:	a801      	add	r0, sp, #4
     5e4:	f7ff ff30 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
     5e8:	4649      	mov	r1, r9
     5ea:	a801      	add	r0, sp, #4
     5ec:	f008 fbc8 	bl	8d80 <String::String(char const*)>
     5f0:	4641      	mov	r1, r8
     5f2:	a805      	add	r0, sp, #20
     5f4:	f008 fbc4 	bl	8d80 <String::String(char const*)>
     5f8:	4639      	mov	r1, r7
     5fa:	a809      	add	r0, sp, #36	; 0x24
     5fc:	f008 fbc0 	bl	8d80 <String::String(char const*)>
     600:	f44f 7341 	mov.w	r3, #772	; 0x304
     604:	a901      	add	r1, sp, #4
     606:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
     60a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     60e:	f7ff fd2b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     612:	a801      	add	r0, sp, #4
     614:	f7ff ff18 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
     618:	4659      	mov	r1, fp
     61a:	a801      	add	r0, sp, #4
     61c:	f008 fbb0 	bl	8d80 <String::String(char const*)>
     620:	4641      	mov	r1, r8
     622:	a805      	add	r0, sp, #20
     624:	f008 fbac 	bl	8d80 <String::String(char const*)>
     628:	4631      	mov	r1, r6
     62a:	a809      	add	r0, sp, #36	; 0x24
     62c:	f008 fba8 	bl	8d80 <String::String(char const*)>
     630:	f240 3e06 	movw	lr, #774	; 0x306
     634:	a901      	add	r1, sp, #4
     636:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
     63a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     63e:	f7ff fd13 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     642:	a801      	add	r0, sp, #4
     644:	f7ff ff00 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x10] = {"BPL","rel","",2,2};
     648:	495f      	ldr	r1, [pc, #380]	; (7c8 <initialize_opcode_info()+0x364>)
     64a:	a801      	add	r0, sp, #4
     64c:	f008 fb98 	bl	8d80 <String::String(char const*)>
     650:	495e      	ldr	r1, [pc, #376]	; (7cc <initialize_opcode_info()+0x368>)
     652:	a805      	add	r0, sp, #20
     654:	f008 fb94 	bl	8d80 <String::String(char const*)>
     658:	4621      	mov	r1, r4
     65a:	a809      	add	r0, sp, #36	; 0x24
     65c:	f008 fb90 	bl	8d80 <String::String(char const*)>
     660:	f240 2102 	movw	r1, #514	; 0x202
     664:	f505 7050 	add.w	r0, r5, #832	; 0x340
     668:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     66c:	a901      	add	r1, sp, #4
     66e:	f7ff fcfb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     672:	a801      	add	r0, sp, #4
     674:	f7ff fee8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
     678:	4649      	mov	r1, r9
     67a:	a801      	add	r0, sp, #4
     67c:	f008 fb80 	bl	8d80 <String::String(char const*)>
     680:	a805      	add	r0, sp, #20
     682:	4953      	ldr	r1, [pc, #332]	; (7d0 <initialize_opcode_info()+0x36c>)
     684:	f008 fb7c 	bl	8d80 <String::String(char const*)>
     688:	4639      	mov	r1, r7
     68a:	a809      	add	r0, sp, #36	; 0x24
     68c:	f008 fb78 	bl	8d80 <String::String(char const*)>
     690:	aa01      	add	r2, sp, #4
     692:	f240 2c05 	movw	ip, #517	; 0x205
     696:	f505 705d 	add.w	r0, r5, #884	; 0x374
     69a:	4611      	mov	r1, r2
     69c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     6a0:	f7ff fce2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6a4:	a801      	add	r0, sp, #4
     6a6:	f7ff fecf 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     6aa:	4649      	mov	r1, r9
     6ac:	a801      	add	r0, sp, #4
     6ae:	f008 fb67 	bl	8d80 <String::String(char const*)>
     6b2:	4948      	ldr	r1, [pc, #288]	; (7d4 <initialize_opcode_info()+0x370>)
     6b4:	a805      	add	r0, sp, #20
     6b6:	f008 fb63 	bl	8d80 <String::String(char const*)>
     6ba:	4639      	mov	r1, r7
     6bc:	a809      	add	r0, sp, #36	; 0x24
     6be:	f008 fb5f 	bl	8d80 <String::String(char const*)>
     6c2:	aa01      	add	r2, sp, #4
     6c4:	f44f 7c01 	mov.w	ip, #516	; 0x204
     6c8:	f205 4044 	addw	r0, r5, #1092	; 0x444
     6cc:	4611      	mov	r1, r2
     6ce:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     6d2:	f7ff fcc9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6d6:	a801      	add	r0, sp, #4
     6d8:	f7ff feb6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     6dc:	4659      	mov	r1, fp
     6de:	a801      	add	r0, sp, #4
     6e0:	f008 fb4e 	bl	8d80 <String::String(char const*)>
     6e4:	493b      	ldr	r1, [pc, #236]	; (7d4 <initialize_opcode_info()+0x370>)
     6e6:	a805      	add	r0, sp, #20
     6e8:	f008 fb4a 	bl	8d80 <String::String(char const*)>
     6ec:	4631      	mov	r1, r6
     6ee:	a809      	add	r0, sp, #36	; 0x24
     6f0:	f008 fb46 	bl	8d80 <String::String(char const*)>
     6f4:	aa01      	add	r2, sp, #4
     6f6:	f240 2006 	movw	r0, #518	; 0x206
     6fa:	4611      	mov	r1, r2
     6fc:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     700:	f505 608f 	add.w	r0, r5, #1144	; 0x478
     704:	f7ff fcb0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     708:	aa01      	add	r2, sp, #4
     70a:	4610      	mov	r0, r2
     70c:	f7ff fe9c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     710:	aa01      	add	r2, sp, #4
     712:	4931      	ldr	r1, [pc, #196]	; (7d8 <initialize_opcode_info()+0x374>)
     714:	4610      	mov	r0, r2
     716:	f008 fb33 	bl	8d80 <String::String(char const*)>
     71a:	aa05      	add	r2, sp, #20
     71c:	4621      	mov	r1, r4
     71e:	4610      	mov	r0, r2
     720:	f008 fb2e 	bl	8d80 <String::String(char const*)>
     724:	aa09      	add	r2, sp, #36	; 0x24
     726:	492d      	ldr	r1, [pc, #180]	; (7dc <initialize_opcode_info()+0x378>)
     728:	4610      	mov	r0, r2
     72a:	f008 fb29 	bl	8d80 <String::String(char const*)>
     72e:	f44f 7281 	mov.w	r2, #258	; 0x102
     732:	a901      	add	r1, sp, #4
     734:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
     738:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     73c:	f7ff fc94 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     740:	a801      	add	r0, sp, #4
     742:	f7ff fe81 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     746:	4649      	mov	r1, r9
     748:	a801      	add	r0, sp, #4
     74a:	f008 fb19 	bl	8d80 <String::String(char const*)>
     74e:	a805      	add	r0, sp, #20
     750:	4923      	ldr	r1, [pc, #140]	; (7e0 <initialize_opcode_info()+0x37c>)
     752:	f008 fb15 	bl	8d80 <String::String(char const*)>
     756:	4639      	mov	r1, r7
     758:	a809      	add	r0, sp, #36	; 0x24
     75a:	f008 fb11 	bl	8d80 <String::String(char const*)>
     75e:	f44f 7341 	mov.w	r3, #772	; 0x304
     762:	a901      	add	r1, sp, #4
     764:	f205 5014 	addw	r0, r5, #1300	; 0x514
     768:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     76c:	f7ff fc7c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     770:	a801      	add	r0, sp, #4
     772:	f7ff fe69 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     776:	4649      	mov	r1, r9
     778:	a801      	add	r0, sp, #4
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     77a:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     77e:	f008 faff 	bl	8d80 <String::String(char const*)>
     782:	4918      	ldr	r1, [pc, #96]	; (7e4 <initialize_opcode_info()+0x380>)
     784:	a805      	add	r0, sp, #20
     786:	f008 fafb 	bl	8d80 <String::String(char const*)>
     78a:	4639      	mov	r1, r7
     78c:	a809      	add	r0, sp, #36	; 0x24
     78e:	f008 faf7 	bl	8d80 <String::String(char const*)>
     792:	f44f 7341 	mov.w	r3, #772	; 0x304
     796:	a901      	add	r1, sp, #4
     798:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
     79c:	e02c      	b.n	7f8 <initialize_opcode_info()+0x394>
     79e:	bf00      	nop
     7a0:	200004f8 	.word	0x200004f8
     7a4:	20000950 	.word	0x20000950
     7a8:	20015418 	.word	0x20015418
     7ac:	20000954 	.word	0x20000954
     7b0:	2000095c 	.word	0x2000095c
     7b4:	20000964 	.word	0x20000964
     7b8:	200003ec 	.word	0x200003ec
     7bc:	20000968 	.word	0x20000968
     7c0:	200003d8 	.word	0x200003d8
     7c4:	2000096c 	.word	0x2000096c
     7c8:	20000970 	.word	0x20000970
     7cc:	200003e8 	.word	0x200003e8
     7d0:	20000974 	.word	0x20000974
     7d4:	20000404 	.word	0x20000404
     7d8:	2000097c 	.word	0x2000097c
     7dc:	20000980 	.word	0x20000980
     7e0:	20000434 	.word	0x20000434
     7e4:	2000042c 	.word	0x2000042c
     7e8:	20000958 	.word	0x20000958
     7ec:	200003e0 	.word	0x200003e0
     7f0:	20000428 	.word	0x20000428
     7f4:	20000960 	.word	0x20000960
     7f8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     7fc:	f7ff fc34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     800:	a801      	add	r0, sp, #4
     802:	f7ff fe21 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     806:	4659      	mov	r1, fp
     808:	a801      	add	r0, sp, #4
	opcode_info[0x20] = {"JSR","abs","",6,3};
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     80a:	f240 2b03 	movw	fp, #515	; 0x203
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     80e:	f008 fab7 	bl	8d80 <String::String(char const*)>
     812:	49d0      	ldr	r1, [pc, #832]	; (b54 <initialize_opcode_info()+0x6f0>)
     814:	a805      	add	r0, sp, #20
     816:	f008 fab3 	bl	8d80 <String::String(char const*)>
     81a:	4631      	mov	r1, r6
     81c:	a809      	add	r0, sp, #36	; 0x24
     81e:	f008 faaf 	bl	8d80 <String::String(char const*)>
     822:	a901      	add	r1, sp, #4
     824:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
     828:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     82c:	f7ff fc1c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     830:	a801      	add	r0, sp, #4
     832:	f7ff fe09 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     836:	49c8      	ldr	r1, [pc, #800]	; (b58 <initialize_opcode_info()+0x6f4>)
     838:	a801      	add	r0, sp, #4
     83a:	f240 3906 	movw	r9, #774	; 0x306
     83e:	f008 fa9f 	bl	8d80 <String::String(char const*)>
     842:	4641      	mov	r1, r8
     844:	a805      	add	r0, sp, #20
     846:	f008 fa9b 	bl	8d80 <String::String(char const*)>
     84a:	4621      	mov	r1, r4
     84c:	a809      	add	r0, sp, #36	; 0x24
     84e:	f008 fa97 	bl	8d80 <String::String(char const*)>
     852:	a901      	add	r1, sp, #4
     854:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
     858:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     85c:	f8df 932c 	ldr.w	r9, [pc, #812]	; b8c <initialize_opcode_info()+0x728>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     860:	f7ff fc02 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     864:	a801      	add	r0, sp, #4
     866:	f7ff fdef 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     86a:	4649      	mov	r1, r9
     86c:	a801      	add	r0, sp, #4
     86e:	f008 fa87 	bl	8d80 <String::String(char const*)>
     872:	49ba      	ldr	r1, [pc, #744]	; (b5c <initialize_opcode_info()+0x6f8>)
     874:	a805      	add	r0, sp, #20
     876:	f008 fa83 	bl	8d80 <String::String(char const*)>
     87a:	4639      	mov	r1, r7
     87c:	a809      	add	r0, sp, #36	; 0x24
     87e:	f008 fa7f 	bl	8d80 <String::String(char const*)>
     882:	f240 2006 	movw	r0, #518	; 0x206
     886:	a901      	add	r1, sp, #4
     888:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     88c:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     890:	f7ff fbea 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     894:	f10d 0e04 	add.w	lr, sp, #4
     898:	4670      	mov	r0, lr
     89a:	f7ff fdd5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     89e:	f10d 0e04 	add.w	lr, sp, #4
     8a2:	49af      	ldr	r1, [pc, #700]	; (b60 <initialize_opcode_info()+0x6fc>)
     8a4:	4670      	mov	r0, lr
     8a6:	f008 fa6b 	bl	8d80 <String::String(char const*)>
     8aa:	f10d 0e14 	add.w	lr, sp, #20
     8ae:	4651      	mov	r1, sl
     8b0:	4670      	mov	r0, lr
     8b2:	f008 fa65 	bl	8d80 <String::String(char const*)>
     8b6:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     8ba:	49aa      	ldr	r1, [pc, #680]	; (b64 <initialize_opcode_info()+0x700>)
     8bc:	4670      	mov	r0, lr
     8be:	f008 fa5f 	bl	8d80 <String::String(char const*)>
     8c2:	a901      	add	r1, sp, #4
     8c4:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
     8c8:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     8cc:	f7ff fbcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8d0:	f10d 0e04 	add.w	lr, sp, #4
     8d4:	4670      	mov	r0, lr
     8d6:	f7ff fdb7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     8da:	f10d 0e04 	add.w	lr, sp, #4
     8de:	4649      	mov	r1, r9
     8e0:	4670      	mov	r0, lr
     8e2:	f008 fa4d 	bl	8d80 <String::String(char const*)>
     8e6:	f10d 0e14 	add.w	lr, sp, #20
     8ea:	4651      	mov	r1, sl
     8ec:	4670      	mov	r0, lr
     8ee:	f008 fa47 	bl	8d80 <String::String(char const*)>
     8f2:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     8f6:	4639      	mov	r1, r7
     8f8:	4670      	mov	r0, lr
     8fa:	f008 fa41 	bl	8d80 <String::String(char const*)>
     8fe:	a901      	add	r1, sp, #4
     900:	f205 7084 	addw	r0, r5, #1924	; 0x784
     904:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     908:	f8df b284 	ldr.w	fp, [pc, #644]	; b90 <initialize_opcode_info()+0x72c>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     90c:	f7ff fbac 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     910:	a801      	add	r0, sp, #4
     912:	f7ff fd99 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     916:	4659      	mov	r1, fp
     918:	a801      	add	r0, sp, #4
     91a:	f008 fa31 	bl	8d80 <String::String(char const*)>
     91e:	4651      	mov	r1, sl
     920:	a805      	add	r0, sp, #20
     922:	f008 fa2d 	bl	8d80 <String::String(char const*)>
     926:	4631      	mov	r1, r6
     928:	a809      	add	r0, sp, #36	; 0x24
     92a:	f008 fa29 	bl	8d80 <String::String(char const*)>
     92e:	f240 2e05 	movw	lr, #517	; 0x205
     932:	a901      	add	r1, sp, #4
     934:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
     938:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     93c:	f7ff fb94 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     940:	a801      	add	r0, sp, #4
     942:	f7ff fd81 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     946:	4988      	ldr	r1, [pc, #544]	; (b68 <initialize_opcode_info()+0x704>)
     948:	a801      	add	r0, sp, #4
     94a:	f008 fa19 	bl	8d80 <String::String(char const*)>
     94e:	4621      	mov	r1, r4
     950:	a805      	add	r0, sp, #20
     952:	f008 fa15 	bl	8d80 <String::String(char const*)>
     956:	4621      	mov	r1, r4
     958:	a809      	add	r0, sp, #36	; 0x24
     95a:	f008 fa11 	bl	8d80 <String::String(char const*)>
     95e:	f44f 7182 	mov.w	r1, #260	; 0x104
     962:	f505 6002 	add.w	r0, r5, #2080	; 0x820
     966:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     96a:	a901      	add	r1, sp, #4
     96c:	f7ff fb7c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     970:	a801      	add	r0, sp, #4
     972:	f7ff fd69 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     976:	4649      	mov	r1, r9
     978:	a801      	add	r0, sp, #4
     97a:	f008 fa01 	bl	8d80 <String::String(char const*)>
     97e:	497b      	ldr	r1, [pc, #492]	; (b6c <initialize_opcode_info()+0x708>)
     980:	a805      	add	r0, sp, #20
     982:	f008 f9fd 	bl	8d80 <String::String(char const*)>
     986:	4639      	mov	r1, r7
     988:	a809      	add	r0, sp, #36	; 0x24
     98a:	f008 f9f9 	bl	8d80 <String::String(char const*)>
     98e:	f240 2102 	movw	r1, #514	; 0x202
     992:	f605 0054 	addw	r0, r5, #2132	; 0x854
     996:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     99a:	a901      	add	r1, sp, #4
     99c:	f7ff fb64 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9a0:	a801      	add	r0, sp, #4
     9a2:	f7ff fd51 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     9a6:	4659      	mov	r1, fp
     9a8:	a801      	add	r0, sp, #4
     9aa:	f008 f9e9 	bl	8d80 <String::String(char const*)>
     9ae:	4b70      	ldr	r3, [pc, #448]	; (b70 <initialize_opcode_info()+0x70c>)
     9b0:	a805      	add	r0, sp, #20
     9b2:	4619      	mov	r1, r3
     9b4:	f008 f9e4 	bl	8d80 <String::String(char const*)>
     9b8:	4631      	mov	r1, r6
     9ba:	a809      	add	r0, sp, #36	; 0x24
     9bc:	f008 f9e0 	bl	8d80 <String::String(char const*)>
     9c0:	f44f 7281 	mov.w	r2, #258	; 0x102
     9c4:	a901      	add	r1, sp, #4
     9c6:	f605 0088 	addw	r0, r5, #2184	; 0x888
     9ca:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     9ce:	f7ff fb4b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9d2:	a801      	add	r0, sp, #4
     9d4:	f7ff fd38 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     9d8:	4961      	ldr	r1, [pc, #388]	; (b60 <initialize_opcode_info()+0x6fc>)
     9da:	a801      	add	r0, sp, #4
     9dc:	f008 f9d0 	bl	8d80 <String::String(char const*)>
     9e0:	4641      	mov	r1, r8
     9e2:	a805      	add	r0, sp, #20
     9e4:	f008 f9cc 	bl	8d80 <String::String(char const*)>
     9e8:	495e      	ldr	r1, [pc, #376]	; (b64 <initialize_opcode_info()+0x700>)
     9ea:	a809      	add	r0, sp, #36	; 0x24
     9ec:	f008 f9c8 	bl	8d80 <String::String(char const*)>
     9f0:	f44f 7341 	mov.w	r3, #772	; 0x304
     9f4:	a901      	add	r1, sp, #4
     9f6:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
     9fa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     9fe:	f7ff fb33 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a02:	a801      	add	r0, sp, #4
     a04:	f7ff fd20 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     a08:	4649      	mov	r1, r9
     a0a:	a801      	add	r0, sp, #4
     a0c:	f008 f9b8 	bl	8d80 <String::String(char const*)>
     a10:	4641      	mov	r1, r8
     a12:	a805      	add	r0, sp, #20
     a14:	f008 f9b4 	bl	8d80 <String::String(char const*)>
     a18:	4639      	mov	r1, r7
     a1a:	a809      	add	r0, sp, #36	; 0x24
     a1c:	f008 f9b0 	bl	8d80 <String::String(char const*)>
     a20:	f44f 7341 	mov.w	r3, #772	; 0x304
     a24:	a901      	add	r1, sp, #4
     a26:	f605 1024 	addw	r0, r5, #2340	; 0x924
     a2a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     a2e:	f7ff fb1b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a32:	a801      	add	r0, sp, #4
     a34:	f7ff fd08 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     a38:	4659      	mov	r1, fp
     a3a:	a801      	add	r0, sp, #4
     a3c:	f008 f9a0 	bl	8d80 <String::String(char const*)>
     a40:	4641      	mov	r1, r8
     a42:	a805      	add	r0, sp, #20
     a44:	f008 f99c 	bl	8d80 <String::String(char const*)>
     a48:	4631      	mov	r1, r6
     a4a:	a809      	add	r0, sp, #36	; 0x24
     a4c:	f008 f998 	bl	8d80 <String::String(char const*)>
     a50:	f240 3206 	movw	r2, #774	; 0x306
     a54:	a901      	add	r1, sp, #4
     a56:	f605 1058 	addw	r0, r5, #2392	; 0x958
     a5a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     a5e:	f7ff fb03 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a62:	a801      	add	r0, sp, #4
     a64:	f7ff fcf0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     a68:	4942      	ldr	r1, [pc, #264]	; (b74 <initialize_opcode_info()+0x710>)
     a6a:	a801      	add	r0, sp, #4
     a6c:	f008 f988 	bl	8d80 <String::String(char const*)>
     a70:	4941      	ldr	r1, [pc, #260]	; (b78 <initialize_opcode_info()+0x714>)
     a72:	a805      	add	r0, sp, #20
     a74:	f008 f984 	bl	8d80 <String::String(char const*)>
     a78:	4621      	mov	r1, r4
     a7a:	a809      	add	r0, sp, #36	; 0x24
     a7c:	f008 f980 	bl	8d80 <String::String(char const*)>
     a80:	f240 2102 	movw	r1, #514	; 0x202
     a84:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
     a88:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     a8c:	a901      	add	r1, sp, #4
     a8e:	f7ff faeb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a92:	a801      	add	r0, sp, #4
     a94:	f7ff fcd8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     a98:	4649      	mov	r1, r9
     a9a:	a801      	add	r0, sp, #4
     a9c:	f008 f970 	bl	8d80 <String::String(char const*)>
     aa0:	4936      	ldr	r1, [pc, #216]	; (b7c <initialize_opcode_info()+0x718>)
     aa2:	a805      	add	r0, sp, #20
     aa4:	f008 f96c 	bl	8d80 <String::String(char const*)>
     aa8:	4639      	mov	r1, r7
     aaa:	a809      	add	r0, sp, #36	; 0x24
     aac:	f008 f968 	bl	8d80 <String::String(char const*)>
     ab0:	f240 2e05 	movw	lr, #517	; 0x205
     ab4:	a901      	add	r1, sp, #4
     ab6:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
     aba:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     abe:	f7ff fad3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ac2:	a801      	add	r0, sp, #4
     ac4:	f7ff fcc0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     ac8:	4649      	mov	r1, r9
     aca:	a801      	add	r0, sp, #4
     acc:	f008 f958 	bl	8d80 <String::String(char const*)>
     ad0:	492b      	ldr	r1, [pc, #172]	; (b80 <initialize_opcode_info()+0x71c>)
     ad2:	a805      	add	r0, sp, #20
     ad4:	f008 f954 	bl	8d80 <String::String(char const*)>
     ad8:	4639      	mov	r1, r7
     ada:	a809      	add	r0, sp, #36	; 0x24
     adc:	f008 f950 	bl	8d80 <String::String(char const*)>
     ae0:	f44f 7c01 	mov.w	ip, #516	; 0x204
     ae4:	a901      	add	r1, sp, #4
     ae6:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
     aea:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     aee:	f7ff fabb 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     af2:	a801      	add	r0, sp, #4
     af4:	f7ff fca8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     af8:	4659      	mov	r1, fp
     afa:	a801      	add	r0, sp, #4
     afc:	f008 f940 	bl	8d80 <String::String(char const*)>
     b00:	491f      	ldr	r1, [pc, #124]	; (b80 <initialize_opcode_info()+0x71c>)
     b02:	a805      	add	r0, sp, #20
     b04:	f008 f93c 	bl	8d80 <String::String(char const*)>
     b08:	4631      	mov	r1, r6
     b0a:	a809      	add	r0, sp, #36	; 0x24
     b0c:	f008 f938 	bl	8d80 <String::String(char const*)>
     b10:	f240 2006 	movw	r0, #518	; 0x206
     b14:	a901      	add	r1, sp, #4
     b16:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     b1a:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
     b1e:	f7ff faa3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b22:	a801      	add	r0, sp, #4
     b24:	f7ff fc90 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     b28:	4916      	ldr	r1, [pc, #88]	; (b84 <initialize_opcode_info()+0x720>)
     b2a:	a801      	add	r0, sp, #4
     b2c:	f008 f928 	bl	8d80 <String::String(char const*)>
     b30:	4621      	mov	r1, r4
     b32:	a805      	add	r0, sp, #20
     b34:	f008 f924 	bl	8d80 <String::String(char const*)>
     b38:	4913      	ldr	r1, [pc, #76]	; (b88 <initialize_opcode_info()+0x724>)
     b3a:	a809      	add	r0, sp, #36	; 0x24
     b3c:	f008 f920 	bl	8d80 <String::String(char const*)>
     b40:	f44f 7281 	mov.w	r2, #258	; 0x102
     b44:	a901      	add	r1, sp, #4
     b46:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
     b4a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     b4e:	f7ff fa8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b52:	e01f      	b.n	b94 <initialize_opcode_info()+0x730>
     b54:	2000042c 	.word	0x2000042c
     b58:	20000984 	.word	0x20000984
     b5c:	200003ec 	.word	0x200003ec
     b60:	2000098c 	.word	0x2000098c
     b64:	20000990 	.word	0x20000990
     b68:	20000998 	.word	0x20000998
     b6c:	200003d8 	.word	0x200003d8
     b70:	2000096c 	.word	0x2000096c
     b74:	2000099c 	.word	0x2000099c
     b78:	200003e8 	.word	0x200003e8
     b7c:	20000974 	.word	0x20000974
     b80:	20000404 	.word	0x20000404
     b84:	200009a0 	.word	0x200009a0
     b88:	20000980 	.word	0x20000980
     b8c:	20000988 	.word	0x20000988
     b90:	20000994 	.word	0x20000994
     b94:	a801      	add	r0, sp, #4
     b96:	f7ff fc57 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     b9a:	4649      	mov	r1, r9
     b9c:	a801      	add	r0, sp, #4
     b9e:	f008 f8ef 	bl	8d80 <String::String(char const*)>
     ba2:	49cb      	ldr	r1, [pc, #812]	; (ed0 <initialize_opcode_info()+0xa6c>)
     ba4:	a805      	add	r0, sp, #20
     ba6:	f008 f8eb 	bl	8d80 <String::String(char const*)>
     baa:	4639      	mov	r1, r7
     bac:	a809      	add	r0, sp, #36	; 0x24
     bae:	f008 f8e7 	bl	8d80 <String::String(char const*)>
     bb2:	f44f 7341 	mov.w	r3, #772	; 0x304
     bb6:	a901      	add	r1, sp, #4
     bb8:	f605 3094 	addw	r0, r5, #2964	; 0xb94
     bbc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     bc0:	f7ff fa52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bc4:	a801      	add	r0, sp, #4
     bc6:	f7ff fc3f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     bca:	4649      	mov	r1, r9
     bcc:	a801      	add	r0, sp, #4
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     bce:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     bd2:	f008 f8d5 	bl	8d80 <String::String(char const*)>
     bd6:	49bf      	ldr	r1, [pc, #764]	; (ed4 <initialize_opcode_info()+0xa70>)
     bd8:	a805      	add	r0, sp, #20
     bda:	f008 f8d1 	bl	8d80 <String::String(char const*)>
     bde:	4639      	mov	r1, r7
     be0:	a809      	add	r0, sp, #36	; 0x24
     be2:	f008 f8cd 	bl	8d80 <String::String(char const*)>
     be6:	f44f 7341 	mov.w	r3, #772	; 0x304
     bea:	a901      	add	r1, sp, #4
     bec:	f605 4064 	addw	r0, r5, #3172	; 0xc64
     bf0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     bf4:	f7ff fa38 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     bf8:	a801      	add	r0, sp, #4
     bfa:	f7ff fc25 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     bfe:	4659      	mov	r1, fp
     c00:	a801      	add	r0, sp, #4
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     c02:	f8df b304 	ldr.w	fp, [pc, #772]	; f08 <initialize_opcode_info()+0xaa4>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     c06:	f008 f8bb 	bl	8d80 <String::String(char const*)>
     c0a:	49b2      	ldr	r1, [pc, #712]	; (ed4 <initialize_opcode_info()+0xa70>)
     c0c:	a805      	add	r0, sp, #20
     c0e:	f008 f8b7 	bl	8d80 <String::String(char const*)>
     c12:	4631      	mov	r1, r6
     c14:	a809      	add	r0, sp, #36	; 0x24
     c16:	f008 f8b3 	bl	8d80 <String::String(char const*)>
     c1a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     c1e:	f605 4998 	addw	r9, r5, #3224	; 0xc98
     c22:	a901      	add	r1, sp, #4
     c24:	4648      	mov	r0, r9
     c26:	f7ff fa1f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c2a:	a801      	add	r0, sp, #4
     c2c:	f7ff fc0c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     c30:	49a9      	ldr	r1, [pc, #676]	; (ed8 <initialize_opcode_info()+0xa74>)
     c32:	a801      	add	r0, sp, #4
     c34:	f008 f8a4 	bl	8d80 <String::String(char const*)>
     c38:	4621      	mov	r1, r4
     c3a:	a805      	add	r0, sp, #20
     c3c:	f008 f8a0 	bl	8d80 <String::String(char const*)>
     c40:	49a6      	ldr	r1, [pc, #664]	; (edc <initialize_opcode_info()+0xa78>)
     c42:	a809      	add	r0, sp, #36	; 0x24
     c44:	f008 f89c 	bl	8d80 <String::String(char const*)>
     c48:	f44f 7383 	mov.w	r3, #262	; 0x106
     c4c:	a901      	add	r1, sp, #4
     c4e:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
     c52:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c56:	f7ff fa07 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c5a:	a801      	add	r0, sp, #4
     c5c:	f7ff fbf4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     c60:	4659      	mov	r1, fp
     c62:	a801      	add	r0, sp, #4
     c64:	f008 f88c 	bl	8d80 <String::String(char const*)>
     c68:	499d      	ldr	r1, [pc, #628]	; (ee0 <initialize_opcode_info()+0xa7c>)
     c6a:	a805      	add	r0, sp, #20
     c6c:	f008 f888 	bl	8d80 <String::String(char const*)>
     c70:	4639      	mov	r1, r7
     c72:	a809      	add	r0, sp, #36	; 0x24
     c74:	f008 f884 	bl	8d80 <String::String(char const*)>
     c78:	f240 2006 	movw	r0, #518	; 0x206
     c7c:	a901      	add	r1, sp, #4
     c7e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     c82:	f605 5034 	addw	r0, r5, #3380	; 0xd34
     c86:	f7ff f9ef 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c8a:	a801      	add	r0, sp, #4
     c8c:	f7ff fbdc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     c90:	4659      	mov	r1, fp
     c92:	a801      	add	r0, sp, #4
     c94:	f008 f874 	bl	8d80 <String::String(char const*)>
     c98:	4651      	mov	r1, sl
     c9a:	a805      	add	r0, sp, #20
     c9c:	f008 f870 	bl	8d80 <String::String(char const*)>
     ca0:	4639      	mov	r1, r7
     ca2:	a809      	add	r0, sp, #36	; 0x24
     ca4:	f008 f86c 	bl	8d80 <String::String(char const*)>
     ca8:	f240 2e03 	movw	lr, #515	; 0x203
     cac:	a901      	add	r1, sp, #4
     cae:	f605 6004 	addw	r0, r5, #3588	; 0xe04
     cb2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     cb6:	f7ff f9d7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     cba:	a801      	add	r0, sp, #4
     cbc:	f7ff fbc4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     cc0:	4988      	ldr	r1, [pc, #544]	; (ee4 <initialize_opcode_info()+0xa80>)
     cc2:	a801      	add	r0, sp, #4
     cc4:	f008 f85c 	bl	8d80 <String::String(char const*)>
     cc8:	4651      	mov	r1, sl
     cca:	a805      	add	r0, sp, #20
     ccc:	f008 f858 	bl	8d80 <String::String(char const*)>
     cd0:	4631      	mov	r1, r6
     cd2:	a809      	add	r0, sp, #36	; 0x24
     cd4:	f008 f854 	bl	8d80 <String::String(char const*)>
     cd8:	f240 2e05 	movw	lr, #517	; 0x205
     cdc:	a901      	add	r1, sp, #4
     cde:	f605 6038 	addw	r0, r5, #3640	; 0xe38
     ce2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     ce6:	f7ff f9bf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     cea:	a801      	add	r0, sp, #4
     cec:	f7ff fbac 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     cf0:	497d      	ldr	r1, [pc, #500]	; (ee8 <initialize_opcode_info()+0xa84>)
     cf2:	a801      	add	r0, sp, #4
     cf4:	f008 f844 	bl	8d80 <String::String(char const*)>
     cf8:	4621      	mov	r1, r4
     cfa:	a805      	add	r0, sp, #20
     cfc:	f008 f840 	bl	8d80 <String::String(char const*)>
     d00:	4621      	mov	r1, r4
     d02:	a809      	add	r0, sp, #36	; 0x24
     d04:	f008 f83c 	bl	8d80 <String::String(char const*)>
     d08:	f240 1203 	movw	r2, #259	; 0x103
     d0c:	a901      	add	r1, sp, #4
     d0e:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
     d12:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     d16:	f7ff f9a7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d1a:	a801      	add	r0, sp, #4
     d1c:	f7ff fb94 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     d20:	4659      	mov	r1, fp
     d22:	a801      	add	r0, sp, #4
     d24:	f008 f82c 	bl	8d80 <String::String(char const*)>
     d28:	4970      	ldr	r1, [pc, #448]	; (eec <initialize_opcode_info()+0xa88>)
     d2a:	a805      	add	r0, sp, #20
     d2c:	f008 f828 	bl	8d80 <String::String(char const*)>
     d30:	4639      	mov	r1, r7
     d32:	a809      	add	r0, sp, #36	; 0x24
     d34:	f008 f824 	bl	8d80 <String::String(char const*)>
     d38:	f240 2102 	movw	r1, #514	; 0x202
     d3c:	f605 60d4 	addw	r0, r5, #3796	; 0xed4
     d40:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     d44:	a901      	add	r1, sp, #4
     d46:	f7ff f98f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d4a:	a801      	add	r0, sp, #4
     d4c:	f7ff fb7c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     d50:	4964      	ldr	r1, [pc, #400]	; (ee4 <initialize_opcode_info()+0xa80>)
     d52:	a801      	add	r0, sp, #4
     d54:	f008 f814 	bl	8d80 <String::String(char const*)>
     d58:	4b65      	ldr	r3, [pc, #404]	; (ef0 <initialize_opcode_info()+0xa8c>)
     d5a:	a805      	add	r0, sp, #20
     d5c:	4619      	mov	r1, r3
     d5e:	f008 f80f 	bl	8d80 <String::String(char const*)>
     d62:	4631      	mov	r1, r6
     d64:	a809      	add	r0, sp, #36	; 0x24
     d66:	f008 f80b 	bl	8d80 <String::String(char const*)>
     d6a:	f44f 7281 	mov.w	r2, #258	; 0x102
     d6e:	a901      	add	r1, sp, #4
     d70:	f605 7008 	addw	r0, r5, #3848	; 0xf08
     d74:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     d78:	f7ff f976 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d7c:	a801      	add	r0, sp, #4
     d7e:	f7ff fb63 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     d82:	4a5c      	ldr	r2, [pc, #368]	; (ef4 <initialize_opcode_info()+0xa90>)
     d84:	a801      	add	r0, sp, #4
     d86:	4611      	mov	r1, r2
     d88:	f007 fffa 	bl	8d80 <String::String(char const*)>
     d8c:	4641      	mov	r1, r8
     d8e:	a805      	add	r0, sp, #20
     d90:	f007 fff6 	bl	8d80 <String::String(char const*)>
     d94:	4621      	mov	r1, r4
     d96:	a809      	add	r0, sp, #36	; 0x24
     d98:	f007 fff2 	bl	8d80 <String::String(char const*)>
     d9c:	f240 3103 	movw	r1, #771	; 0x303
     da0:	f505 6077 	add.w	r0, r5, #3952	; 0xf70
     da4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     da8:	a901      	add	r1, sp, #4
     daa:	f7ff f95d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dae:	a801      	add	r0, sp, #4
     db0:	f7ff fb4a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     db4:	4659      	mov	r1, fp
     db6:	a801      	add	r0, sp, #4
     db8:	f007 ffe2 	bl	8d80 <String::String(char const*)>
     dbc:	4641      	mov	r1, r8
     dbe:	a805      	add	r0, sp, #20
     dc0:	f007 ffde 	bl	8d80 <String::String(char const*)>
     dc4:	4639      	mov	r1, r7
     dc6:	a809      	add	r0, sp, #36	; 0x24
     dc8:	f007 ffda 	bl	8d80 <String::String(char const*)>
     dcc:	f44f 7341 	mov.w	r3, #772	; 0x304
     dd0:	a901      	add	r1, sp, #4
     dd2:	f605 70a4 	addw	r0, r5, #4004	; 0xfa4
     dd6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     dda:	f7ff f945 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dde:	a801      	add	r0, sp, #4
     de0:	f7ff fb32 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     de4:	493f      	ldr	r1, [pc, #252]	; (ee4 <initialize_opcode_info()+0xa80>)
     de6:	a801      	add	r0, sp, #4
     de8:	f007 ffca 	bl	8d80 <String::String(char const*)>
     dec:	4641      	mov	r1, r8
     dee:	a805      	add	r0, sp, #20
     df0:	f007 ffc6 	bl	8d80 <String::String(char const*)>
     df4:	4631      	mov	r1, r6
     df6:	a809      	add	r0, sp, #36	; 0x24
     df8:	f007 ffc2 	bl	8d80 <String::String(char const*)>
     dfc:	f240 3206 	movw	r2, #774	; 0x306
     e00:	a901      	add	r1, sp, #4
     e02:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
     e06:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     e0a:	f7ff f92d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e0e:	a801      	add	r0, sp, #4
     e10:	f7ff fb1a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     e14:	4938      	ldr	r1, [pc, #224]	; (ef8 <initialize_opcode_info()+0xa94>)
     e16:	a801      	add	r0, sp, #4
     e18:	f007 ffb2 	bl	8d80 <String::String(char const*)>
     e1c:	4937      	ldr	r1, [pc, #220]	; (efc <initialize_opcode_info()+0xa98>)
     e1e:	a805      	add	r0, sp, #20
     e20:	f007 ffae 	bl	8d80 <String::String(char const*)>
     e24:	4621      	mov	r1, r4
     e26:	a809      	add	r0, sp, #36	; 0x24
     e28:	f007 ffaa 	bl	8d80 <String::String(char const*)>
     e2c:	f240 2102 	movw	r1, #514	; 0x202
     e30:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
     e34:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     e38:	a901      	add	r1, sp, #4
     e3a:	f7ff f915 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e3e:	a801      	add	r0, sp, #4
     e40:	f7ff fb02 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     e44:	4659      	mov	r1, fp
     e46:	a801      	add	r0, sp, #4
     e48:	f007 ff9a 	bl	8d80 <String::String(char const*)>
     e4c:	492c      	ldr	r1, [pc, #176]	; (f00 <initialize_opcode_info()+0xa9c>)
     e4e:	a805      	add	r0, sp, #20
     e50:	f007 ff96 	bl	8d80 <String::String(char const*)>
     e54:	4639      	mov	r1, r7
     e56:	a809      	add	r0, sp, #36	; 0x24
     e58:	f007 ff92 	bl	8d80 <String::String(char const*)>
     e5c:	f240 2e05 	movw	lr, #517	; 0x205
     e60:	a901      	add	r1, sp, #4
     e62:	f509 7077 	add.w	r0, r9, #988	; 0x3dc
     e66:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     e6a:	f7ff f8fd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e6e:	a801      	add	r0, sp, #4
     e70:	f7ff faea 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     e74:	4659      	mov	r1, fp
     e76:	a801      	add	r0, sp, #4
     e78:	f007 ff82 	bl	8d80 <String::String(char const*)>
     e7c:	4921      	ldr	r1, [pc, #132]	; (f04 <initialize_opcode_info()+0xaa0>)
     e7e:	a805      	add	r0, sp, #20
     e80:	f007 ff7e 	bl	8d80 <String::String(char const*)>
     e84:	4639      	mov	r1, r7
     e86:	a809      	add	r0, sp, #36	; 0x24
     e88:	f007 ff7a 	bl	8d80 <String::String(char const*)>
     e8c:	f44f 7c01 	mov.w	ip, #516	; 0x204
     e90:	a901      	add	r1, sp, #4
     e92:	f209 40ac 	addw	r0, r9, #1196	; 0x4ac
     e96:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     e9a:	f7ff f8e5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e9e:	a801      	add	r0, sp, #4
     ea0:	f7ff fad2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     ea4:	490f      	ldr	r1, [pc, #60]	; (ee4 <initialize_opcode_info()+0xa80>)
     ea6:	a801      	add	r0, sp, #4
     ea8:	f007 ff6a 	bl	8d80 <String::String(char const*)>
     eac:	4915      	ldr	r1, [pc, #84]	; (f04 <initialize_opcode_info()+0xaa0>)
     eae:	a805      	add	r0, sp, #20
     eb0:	f007 ff66 	bl	8d80 <String::String(char const*)>
     eb4:	4631      	mov	r1, r6
     eb6:	a809      	add	r0, sp, #36	; 0x24
     eb8:	f007 ff62 	bl	8d80 <String::String(char const*)>
     ebc:	f240 2006 	movw	r0, #518	; 0x206
     ec0:	a901      	add	r1, sp, #4
     ec2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     ec6:	f509 609c 	add.w	r0, r9, #1248	; 0x4e0
     eca:	f7ff f8cd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ece:	e01d      	b.n	f0c <initialize_opcode_info()+0xaa8>
     ed0:	20000434 	.word	0x20000434
     ed4:	2000042c 	.word	0x2000042c
     ed8:	200009a4 	.word	0x200009a4
     edc:	200009a8 	.word	0x200009a8
     ee0:	200003ec 	.word	0x200003ec
     ee4:	200009b4 	.word	0x200009b4
     ee8:	200009b8 	.word	0x200009b8
     eec:	200003d8 	.word	0x200003d8
     ef0:	2000096c 	.word	0x2000096c
     ef4:	200009bc 	.word	0x200009bc
     ef8:	200009c0 	.word	0x200009c0
     efc:	200003e8 	.word	0x200003e8
     f00:	20000974 	.word	0x20000974
     f04:	20000404 	.word	0x20000404
     f08:	200009b0 	.word	0x200009b0
     f0c:	a801      	add	r0, sp, #4
     f0e:	f7ff fa9b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     f12:	49d1      	ldr	r1, [pc, #836]	; (1258 <initialize_opcode_info()+0xdf4>)
     f14:	a801      	add	r0, sp, #4
     f16:	f007 ff33 	bl	8d80 <String::String(char const*)>
     f1a:	4621      	mov	r1, r4
     f1c:	a805      	add	r0, sp, #20
     f1e:	f007 ff2f 	bl	8d80 <String::String(char const*)>
     f22:	49ce      	ldr	r1, [pc, #824]	; (125c <initialize_opcode_info()+0xdf8>)
     f24:	a809      	add	r0, sp, #36	; 0x24
     f26:	f007 ff2b 	bl	8d80 <String::String(char const*)>
     f2a:	f44f 7281 	mov.w	r2, #258	; 0x102
     f2e:	a901      	add	r1, sp, #4
     f30:	f505 508f 	add.w	r0, r5, #4576	; 0x11e0
     f34:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     f38:	f7ff f896 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f3c:	a801      	add	r0, sp, #4
     f3e:	f7ff fa83 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
     f42:	4659      	mov	r1, fp
     f44:	a801      	add	r0, sp, #4
     f46:	f007 ff1b 	bl	8d80 <String::String(char const*)>
     f4a:	49c5      	ldr	r1, [pc, #788]	; (1260 <initialize_opcode_info()+0xdfc>)
     f4c:	a805      	add	r0, sp, #20
     f4e:	f007 ff17 	bl	8d80 <String::String(char const*)>
     f52:	4639      	mov	r1, r7
     f54:	a809      	add	r0, sp, #36	; 0x24
     f56:	f007 ff13 	bl	8d80 <String::String(char const*)>
     f5a:	f44f 7341 	mov.w	r3, #772	; 0x304
     f5e:	a901      	add	r1, sp, #4
     f60:	f209 507c 	addw	r0, r9, #1404	; 0x57c
     f64:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     f68:	f7ff f87e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f6c:	a801      	add	r0, sp, #4
     f6e:	f7ff fa6b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     f72:	4659      	mov	r1, fp
     f74:	a801      	add	r0, sp, #4
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
	opcode_info[0x60] = {"RTS","","",6,1};
     f76:	f44f 7b83 	mov.w	fp, #262	; 0x106
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     f7a:	f007 ff01 	bl	8d80 <String::String(char const*)>
     f7e:	49b9      	ldr	r1, [pc, #740]	; (1264 <initialize_opcode_info()+0xe00>)
     f80:	a805      	add	r0, sp, #20
     f82:	f007 fefd 	bl	8d80 <String::String(char const*)>
     f86:	4639      	mov	r1, r7
     f88:	af09      	add	r7, sp, #36	; 0x24
     f8a:	4638      	mov	r0, r7
     f8c:	af01      	add	r7, sp, #4
     f8e:	f007 fef7 	bl	8d80 <String::String(char const*)>
     f92:	f44f 7341 	mov.w	r3, #772	; 0x304
     f96:	4639      	mov	r1, r7
     f98:	f209 604c 	addw	r0, r9, #1612	; 0x64c
     f9c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     fa0:	f7ff f862 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fa4:	4638      	mov	r0, r7
     fa6:	f7ff fa4f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     faa:	4638      	mov	r0, r7
     fac:	af05      	add	r7, sp, #20
     fae:	49ae      	ldr	r1, [pc, #696]	; (1268 <initialize_opcode_info()+0xe04>)
     fb0:	f007 fee6 	bl	8d80 <String::String(char const*)>
     fb4:	49ab      	ldr	r1, [pc, #684]	; (1264 <initialize_opcode_info()+0xe00>)
     fb6:	4638      	mov	r0, r7
     fb8:	af09      	add	r7, sp, #36	; 0x24
     fba:	f007 fee1 	bl	8d80 <String::String(char const*)>
     fbe:	4631      	mov	r1, r6
     fc0:	4638      	mov	r0, r7
     fc2:	f240 3707 	movw	r7, #775	; 0x307
     fc6:	f007 fedb 	bl	8d80 <String::String(char const*)>
     fca:	f509 60d0 	add.w	r0, r9, #1664	; 0x680
     fce:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     fd2:	af01      	add	r7, sp, #4
     fd4:	4639      	mov	r1, r7
     fd6:	f7ff f847 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fda:	4638      	mov	r0, r7
     fdc:	f7ff fa34 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
     fe0:	4638      	mov	r0, r7
     fe2:	af05      	add	r7, sp, #20
     fe4:	49a1      	ldr	r1, [pc, #644]	; (126c <initialize_opcode_info()+0xe08>)
     fe6:	f007 fecb 	bl	8d80 <String::String(char const*)>
     fea:	4621      	mov	r1, r4
     fec:	4638      	mov	r0, r7
     fee:	af09      	add	r7, sp, #36	; 0x24
     ff0:	f007 fec6 	bl	8d80 <String::String(char const*)>
     ff4:	4621      	mov	r1, r4
     ff6:	4638      	mov	r0, r7
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     ff8:	4f9d      	ldr	r7, [pc, #628]	; (1270 <initialize_opcode_info()+0xe0c>)
	opcode_info[0x60] = {"RTS","","",6,1};
     ffa:	f007 fec1 	bl	8d80 <String::String(char const*)>
     ffe:	f505 509c 	add.w	r0, r5, #4992	; 0x1380
    1002:	ad01      	add	r5, sp, #4
    1004:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
    1008:	f8df b294 	ldr.w	fp, [pc, #660]	; 12a0 <initialize_opcode_info()+0xe3c>
	opcode_info[0x60] = {"RTS","","",6,1};
    100c:	4629      	mov	r1, r5
    100e:	f7ff f82b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1012:	4628      	mov	r0, r5
    1014:	f7ff fa18 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
    1018:	4628      	mov	r0, r5
    101a:	ad05      	add	r5, sp, #20
    101c:	4659      	mov	r1, fp
    101e:	f007 feaf 	bl	8d80 <String::String(char const*)>
    1022:	4994      	ldr	r1, [pc, #592]	; (1274 <initialize_opcode_info()+0xe10>)
    1024:	4628      	mov	r0, r5
    1026:	ad09      	add	r5, sp, #36	; 0x24
    1028:	f007 feaa 	bl	8d80 <String::String(char const*)>
    102c:	4639      	mov	r1, r7
    102e:	4628      	mov	r0, r5
    1030:	ad01      	add	r5, sp, #4
    1032:	f007 fea5 	bl	8d80 <String::String(char const*)>
    1036:	f240 2006 	movw	r0, #518	; 0x206
    103a:	4629      	mov	r1, r5
    103c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1040:	f209 701c 	addw	r0, r9, #1820	; 0x71c
    1044:	f7ff f810 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1048:	4628      	mov	r0, r5
    104a:	f7ff f9fd 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
    104e:	4628      	mov	r0, r5
    1050:	ad05      	add	r5, sp, #20
    1052:	4659      	mov	r1, fp
    1054:	f007 fe94 	bl	8d80 <String::String(char const*)>
    1058:	4651      	mov	r1, sl
    105a:	4628      	mov	r0, r5
    105c:	ad09      	add	r5, sp, #36	; 0x24
    105e:	f007 fe8f 	bl	8d80 <String::String(char const*)>
    1062:	4639      	mov	r1, r7
    1064:	4628      	mov	r0, r5
    1066:	ad01      	add	r5, sp, #4
    1068:	f007 fe8a 	bl	8d80 <String::String(char const*)>
    106c:	f240 2e03 	movw	lr, #515	; 0x203
    1070:	4629      	mov	r1, r5
    1072:	f209 70ec 	addw	r0, r9, #2028	; 0x7ec
    1076:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    107a:	f7fe fff5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    107e:	4628      	mov	r0, r5
    1080:	f7ff f9e2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
    1084:	497c      	ldr	r1, [pc, #496]	; (1278 <initialize_opcode_info()+0xe14>)
    1086:	4628      	mov	r0, r5
    1088:	f240 2505 	movw	r5, #517	; 0x205
    108c:	f007 fe78 	bl	8d80 <String::String(char const*)>
    1090:	4651      	mov	r1, sl
    1092:	f10d 0a14 	add.w	sl, sp, #20
    1096:	4650      	mov	r0, sl
    1098:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    109c:	f007 fe70 	bl	8d80 <String::String(char const*)>
    10a0:	4631      	mov	r1, r6
    10a2:	4650      	mov	r0, sl
    10a4:	f10d 0a04 	add.w	sl, sp, #4
    10a8:	f007 fe6a 	bl	8d80 <String::String(char const*)>
    10ac:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    10b0:	f509 6502 	add.w	r5, r9, #2080	; 0x820
    10b4:	4651      	mov	r1, sl
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
	opcode_info[0x78] = {"SEI","","I",2,1};
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    10b6:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 12a4 <initialize_opcode_info()+0xe40>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
    10ba:	4628      	mov	r0, r5
    10bc:	f7fe ffd4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10c0:	a801      	add	r0, sp, #4
    10c2:	f7ff f9c1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
    10c6:	496d      	ldr	r1, [pc, #436]	; (127c <initialize_opcode_info()+0xe18>)
    10c8:	a801      	add	r0, sp, #4
    10ca:	f007 fe59 	bl	8d80 <String::String(char const*)>
    10ce:	4621      	mov	r1, r4
    10d0:	a805      	add	r0, sp, #20
    10d2:	f007 fe55 	bl	8d80 <String::String(char const*)>
    10d6:	4621      	mov	r1, r4
    10d8:	a809      	add	r0, sp, #36	; 0x24
    10da:	f007 fe51 	bl	8d80 <String::String(char const*)>
    10de:	f44f 7182 	mov.w	r1, #260	; 0x104
    10e2:	f609 0088 	addw	r0, r9, #2184	; 0x888
    10e6:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    10ea:	a901      	add	r1, sp, #4
    10ec:	f7fe ffbc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10f0:	a801      	add	r0, sp, #4
    10f2:	f7ff f9a9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
    10f6:	4659      	mov	r1, fp
    10f8:	a801      	add	r0, sp, #4
    10fa:	f007 fe41 	bl	8d80 <String::String(char const*)>
    10fe:	4960      	ldr	r1, [pc, #384]	; (1280 <initialize_opcode_info()+0xe1c>)
    1100:	a805      	add	r0, sp, #20
    1102:	f007 fe3d 	bl	8d80 <String::String(char const*)>
    1106:	4639      	mov	r1, r7
    1108:	a809      	add	r0, sp, #36	; 0x24
    110a:	f007 fe39 	bl	8d80 <String::String(char const*)>
    110e:	f240 2102 	movw	r1, #514	; 0x202
    1112:	f609 00bc 	addw	r0, r9, #2236	; 0x8bc
    1116:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    111a:	a901      	add	r1, sp, #4
    111c:	f7fe ffa4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1120:	a801      	add	r0, sp, #4
    1122:	f7ff f991 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
    1126:	4954      	ldr	r1, [pc, #336]	; (1278 <initialize_opcode_info()+0xe14>)
    1128:	a801      	add	r0, sp, #4
    112a:	f007 fe29 	bl	8d80 <String::String(char const*)>
    112e:	4b55      	ldr	r3, [pc, #340]	; (1284 <initialize_opcode_info()+0xe20>)
    1130:	a805      	add	r0, sp, #20
    1132:	4619      	mov	r1, r3
    1134:	f007 fe24 	bl	8d80 <String::String(char const*)>
    1138:	4631      	mov	r1, r6
    113a:	a809      	add	r0, sp, #36	; 0x24
    113c:	f007 fe20 	bl	8d80 <String::String(char const*)>
    1140:	f44f 7281 	mov.w	r2, #258	; 0x102
    1144:	a901      	add	r1, sp, #4
    1146:	f509 600f 	add.w	r0, r9, #2288	; 0x8f0
    114a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    114e:	f7fe ff8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1152:	a801      	add	r0, sp, #4
    1154:	f7ff f978 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
    1158:	4a4b      	ldr	r2, [pc, #300]	; (1288 <initialize_opcode_info()+0xe24>)
    115a:	a801      	add	r0, sp, #4
    115c:	4611      	mov	r1, r2
    115e:	f007 fe0f 	bl	8d80 <String::String(char const*)>
    1162:	494a      	ldr	r1, [pc, #296]	; (128c <initialize_opcode_info()+0xe28>)
    1164:	a805      	add	r0, sp, #20
    1166:	f007 fe0b 	bl	8d80 <String::String(char const*)>
    116a:	4621      	mov	r1, r4
    116c:	a809      	add	r0, sp, #36	; 0x24
    116e:	f007 fe07 	bl	8d80 <String::String(char const*)>
    1172:	f240 3305 	movw	r3, #773	; 0x305
    1176:	a901      	add	r1, sp, #4
    1178:	f609 1058 	addw	r0, r9, #2392	; 0x958
    117c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1180:	f7fe ff72 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1184:	a801      	add	r0, sp, #4
    1186:	f7ff f95f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
    118a:	4659      	mov	r1, fp
    118c:	a801      	add	r0, sp, #4
    118e:	f007 fdf7 	bl	8d80 <String::String(char const*)>
    1192:	4641      	mov	r1, r8
    1194:	a805      	add	r0, sp, #20
    1196:	f007 fdf3 	bl	8d80 <String::String(char const*)>
    119a:	4639      	mov	r1, r7
    119c:	a809      	add	r0, sp, #36	; 0x24
    119e:	f007 fdef 	bl	8d80 <String::String(char const*)>
    11a2:	f44f 7341 	mov.w	r3, #772	; 0x304
    11a6:	a901      	add	r1, sp, #4
    11a8:	f609 108c 	addw	r0, r9, #2444	; 0x98c
    11ac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    11b0:	f7fe ff5a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11b4:	a801      	add	r0, sp, #4
    11b6:	f7ff f947 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
    11ba:	492f      	ldr	r1, [pc, #188]	; (1278 <initialize_opcode_info()+0xe14>)
    11bc:	a801      	add	r0, sp, #4
    11be:	f007 fddf 	bl	8d80 <String::String(char const*)>
    11c2:	4641      	mov	r1, r8
    11c4:	a805      	add	r0, sp, #20
    11c6:	f007 fddb 	bl	8d80 <String::String(char const*)>
    11ca:	4631      	mov	r1, r6
    11cc:	a809      	add	r0, sp, #36	; 0x24
    11ce:	f007 fdd7 	bl	8d80 <String::String(char const*)>
    11d2:	f240 3206 	movw	r2, #774	; 0x306
    11d6:	a901      	add	r1, sp, #4
    11d8:	f509 601c 	add.w	r0, r9, #2496	; 0x9c0
    11dc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    11e0:	f7fe ff42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11e4:	a801      	add	r0, sp, #4
    11e6:	f7ff f92f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
    11ea:	4929      	ldr	r1, [pc, #164]	; (1290 <initialize_opcode_info()+0xe2c>)
    11ec:	a801      	add	r0, sp, #4
    11ee:	f007 fdc7 	bl	8d80 <String::String(char const*)>
    11f2:	4928      	ldr	r1, [pc, #160]	; (1294 <initialize_opcode_info()+0xe30>)
    11f4:	a805      	add	r0, sp, #20
    11f6:	f007 fdc3 	bl	8d80 <String::String(char const*)>
    11fa:	4621      	mov	r1, r4
    11fc:	a809      	add	r0, sp, #36	; 0x24
    11fe:	f007 fdbf 	bl	8d80 <String::String(char const*)>
    1202:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1206:	a901      	add	r1, sp, #4
    1208:	f609 2028 	addw	r0, r9, #2600	; 0xa28
    120c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1210:	f7fe ff2a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1214:	a801      	add	r0, sp, #4
    1216:	f7ff f917 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
    121a:	4659      	mov	r1, fp
    121c:	a801      	add	r0, sp, #4
    121e:	f007 fdaf 	bl	8d80 <String::String(char const*)>
    1222:	491d      	ldr	r1, [pc, #116]	; (1298 <initialize_opcode_info()+0xe34>)
    1224:	a805      	add	r0, sp, #20
    1226:	f007 fdab 	bl	8d80 <String::String(char const*)>
    122a:	4639      	mov	r1, r7
    122c:	a809      	add	r0, sp, #36	; 0x24
    122e:	f007 fda7 	bl	8d80 <String::String(char const*)>
    1232:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1236:	a901      	add	r1, sp, #4
    1238:	f609 205c 	addw	r0, r9, #2652	; 0xa5c
    123c:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1240:	f7fe ff12 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1244:	a801      	add	r0, sp, #4
    1246:	f7ff f8ff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
    124a:	4659      	mov	r1, fp
    124c:	a801      	add	r0, sp, #4
    124e:	f007 fd97 	bl	8d80 <String::String(char const*)>
    1252:	4912      	ldr	r1, [pc, #72]	; (129c <initialize_opcode_info()+0xe38>)
    1254:	a805      	add	r0, sp, #20
    1256:	e027      	b.n	12a8 <initialize_opcode_info()+0xe44>
    1258:	200009c4 	.word	0x200009c4
    125c:	200009c8 	.word	0x200009c8
    1260:	20000434 	.word	0x20000434
    1264:	2000042c 	.word	0x2000042c
    1268:	200009b4 	.word	0x200009b4
    126c:	200009cc 	.word	0x200009cc
    1270:	200009d4 	.word	0x200009d4
    1274:	200003ec 	.word	0x200003ec
    1278:	200009dc 	.word	0x200009dc
    127c:	200009e0 	.word	0x200009e0
    1280:	200003d8 	.word	0x200003d8
    1284:	2000096c 	.word	0x2000096c
    1288:	200009bc 	.word	0x200009bc
    128c:	20000440 	.word	0x20000440
    1290:	200009e4 	.word	0x200009e4
    1294:	200003e8 	.word	0x200003e8
    1298:	20000974 	.word	0x20000974
    129c:	20000404 	.word	0x20000404
    12a0:	200009d0 	.word	0x200009d0
    12a4:	200009ec 	.word	0x200009ec
    12a8:	f007 fd6a 	bl	8d80 <String::String(char const*)>
    12ac:	4639      	mov	r1, r7
    12ae:	a809      	add	r0, sp, #36	; 0x24
    12b0:	f007 fd66 	bl	8d80 <String::String(char const*)>
    12b4:	f44f 7c01 	mov.w	ip, #516	; 0x204
    12b8:	a901      	add	r1, sp, #4
    12ba:	f609 302c 	addw	r0, r9, #2860	; 0xb2c
    12be:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    12c2:	f7fe fed1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12c6:	a801      	add	r0, sp, #4
    12c8:	f7ff f8be 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
    12cc:	49cb      	ldr	r1, [pc, #812]	; (15fc <initialize_opcode_info()+0x1198>)
    12ce:	a801      	add	r0, sp, #4
    12d0:	f007 fd56 	bl	8d80 <String::String(char const*)>
    12d4:	49ca      	ldr	r1, [pc, #808]	; (1600 <initialize_opcode_info()+0x119c>)
    12d6:	a805      	add	r0, sp, #20
    12d8:	f007 fd52 	bl	8d80 <String::String(char const*)>
    12dc:	4631      	mov	r1, r6
    12de:	a809      	add	r0, sp, #36	; 0x24
    12e0:	f007 fd4e 	bl	8d80 <String::String(char const*)>
    12e4:	f240 2006 	movw	r0, #518	; 0x206
    12e8:	a901      	add	r1, sp, #4
    12ea:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    12ee:	f509 6036 	add.w	r0, r9, #2912	; 0xb60
    12f2:	f7fe feb9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12f6:	a801      	add	r0, sp, #4
    12f8:	f7ff f8a6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
    12fc:	49c1      	ldr	r1, [pc, #772]	; (1604 <initialize_opcode_info()+0x11a0>)
    12fe:	a801      	add	r0, sp, #4
    1300:	f007 fd3e 	bl	8d80 <String::String(char const*)>
    1304:	4621      	mov	r1, r4
    1306:	a805      	add	r0, sp, #20
    1308:	f007 fd3a 	bl	8d80 <String::String(char const*)>
    130c:	49be      	ldr	r1, [pc, #760]	; (1608 <initialize_opcode_info()+0x11a4>)
    130e:	a809      	add	r0, sp, #36	; 0x24
    1310:	f007 fd36 	bl	8d80 <String::String(char const*)>
    1314:	f44f 7281 	mov.w	r2, #258	; 0x102
    1318:	a901      	add	r1, sp, #4
    131a:	f609 30c8 	addw	r0, r9, #3016	; 0xbc8
    131e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1322:	f7fe fea1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1326:	a801      	add	r0, sp, #4
    1328:	f7ff f88e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
    132c:	4659      	mov	r1, fp
    132e:	a801      	add	r0, sp, #4
    1330:	f007 fd26 	bl	8d80 <String::String(char const*)>
    1334:	49b5      	ldr	r1, [pc, #724]	; (160c <initialize_opcode_info()+0x11a8>)
    1336:	a805      	add	r0, sp, #20
    1338:	f007 fd22 	bl	8d80 <String::String(char const*)>
    133c:	4639      	mov	r1, r7
    133e:	a809      	add	r0, sp, #36	; 0x24
    1340:	f007 fd1e 	bl	8d80 <String::String(char const*)>
    1344:	f44f 7341 	mov.w	r3, #772	; 0x304
    1348:	a901      	add	r1, sp, #4
    134a:	f609 30fc 	addw	r0, r9, #3068	; 0xbfc
    134e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1352:	f7fe fe89 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1356:	a801      	add	r0, sp, #4
    1358:	f7ff f876 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    135c:	4659      	mov	r1, fp
    135e:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
    1360:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 1634 <initialize_opcode_info()+0x11d0>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1364:	f007 fd0c 	bl	8d80 <String::String(char const*)>
    1368:	49a9      	ldr	r1, [pc, #676]	; (1610 <initialize_opcode_info()+0x11ac>)
    136a:	a805      	add	r0, sp, #20
    136c:	f007 fd08 	bl	8d80 <String::String(char const*)>
    1370:	4639      	mov	r1, r7
    1372:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x84] = {"STY","zpg","",3,2};
    1374:	f240 2703 	movw	r7, #515	; 0x203
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1378:	f007 fd02 	bl	8d80 <String::String(char const*)>
    137c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1380:	a901      	add	r1, sp, #4
    1382:	f609 40cc 	addw	r0, r9, #3276	; 0xccc
    1386:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    138a:	f7fe fe6d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    138e:	a801      	add	r0, sp, #4
	opcode_info[0x85] = {"STA","zpg","",3,2};
	opcode_info[0x86] = {"STX","zpg","",3,2};
    1390:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 1638 <initialize_opcode_info()+0x11d4>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    1394:	f7ff f858 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    1398:	4998      	ldr	r1, [pc, #608]	; (15fc <initialize_opcode_info()+0x1198>)
    139a:	a801      	add	r0, sp, #4
    139c:	f007 fcf0 	bl	8d80 <String::String(char const*)>
    13a0:	499b      	ldr	r1, [pc, #620]	; (1610 <initialize_opcode_info()+0x11ac>)
    13a2:	a805      	add	r0, sp, #20
    13a4:	f007 fcec 	bl	8d80 <String::String(char const*)>
    13a8:	4631      	mov	r1, r6
    13aa:	a809      	add	r0, sp, #36	; 0x24
    13ac:	f007 fce8 	bl	8d80 <String::String(char const*)>
    13b0:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    13b4:	f240 3307 	movw	r3, #775	; 0x307
    13b8:	a901      	add	r1, sp, #4
    13ba:	4610      	mov	r0, r2
    13bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    13c0:	f7fe fe52 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13c4:	a801      	add	r0, sp, #4
    13c6:	f7ff f83f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    13ca:	4651      	mov	r1, sl
    13cc:	a801      	add	r0, sp, #4
    13ce:	f007 fcd7 	bl	8d80 <String::String(char const*)>
    13d2:	4990      	ldr	r1, [pc, #576]	; (1614 <initialize_opcode_info()+0x11b0>)
    13d4:	a805      	add	r0, sp, #20
    13d6:	f007 fcd3 	bl	8d80 <String::String(char const*)>
    13da:	4621      	mov	r1, r4
    13dc:	a809      	add	r0, sp, #36	; 0x24
    13de:	f007 fccf 	bl	8d80 <String::String(char const*)>
    13e2:	f240 2006 	movw	r0, #518	; 0x206
    13e6:	a901      	add	r1, sp, #4
    13e8:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    13ec:	f205 507c 	addw	r0, r5, #1404	; 0x57c
    13f0:	f7fe fe3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13f4:	a801      	add	r0, sp, #4
    13f6:	f7ff f827 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    13fa:	4659      	mov	r1, fp
    13fc:	a801      	add	r0, sp, #4
    13fe:	f007 fcbf 	bl	8d80 <String::String(char const*)>
    1402:	4985      	ldr	r1, [pc, #532]	; (1618 <initialize_opcode_info()+0x11b4>)
    1404:	a805      	add	r0, sp, #20
    1406:	f007 fcbb 	bl	8d80 <String::String(char const*)>
    140a:	4621      	mov	r1, r4
    140c:	a809      	add	r0, sp, #36	; 0x24
    140e:	f007 fcb7 	bl	8d80 <String::String(char const*)>
    1412:	a901      	add	r1, sp, #4
    1414:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    1418:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    141c:	f7fe fe24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1420:	a801      	add	r0, sp, #4
    1422:	f7ff f811 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    1426:	4651      	mov	r1, sl
    1428:	a801      	add	r0, sp, #4
    142a:	f007 fca9 	bl	8d80 <String::String(char const*)>
    142e:	497a      	ldr	r1, [pc, #488]	; (1618 <initialize_opcode_info()+0x11b4>)
    1430:	a805      	add	r0, sp, #20
    1432:	f007 fca5 	bl	8d80 <String::String(char const*)>
    1436:	4621      	mov	r1, r4
    1438:	a809      	add	r0, sp, #36	; 0x24
    143a:	f007 fca1 	bl	8d80 <String::String(char const*)>
    143e:	a901      	add	r1, sp, #4
    1440:	f205 604c 	addw	r0, r5, #1612	; 0x64c
    1444:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1448:	f7fe fe0e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    144c:	a801      	add	r0, sp, #4
    144e:	f7fe fffb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    1452:	4649      	mov	r1, r9
    1454:	a801      	add	r0, sp, #4
    1456:	f007 fc93 	bl	8d80 <String::String(char const*)>
    145a:	496f      	ldr	r1, [pc, #444]	; (1618 <initialize_opcode_info()+0x11b4>)
    145c:	a805      	add	r0, sp, #20
    145e:	f007 fc8f 	bl	8d80 <String::String(char const*)>
    1462:	4621      	mov	r1, r4
    1464:	a809      	add	r0, sp, #36	; 0x24
    1466:	f007 fc8b 	bl	8d80 <String::String(char const*)>
    146a:	a901      	add	r1, sp, #4
    146c:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1470:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    1474:	f7fe fdf8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1478:	a801      	add	r0, sp, #4
    147a:	f7fe ffe5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    147e:	4f67      	ldr	r7, [pc, #412]	; (161c <initialize_opcode_info()+0x11b8>)
    1480:	4967      	ldr	r1, [pc, #412]	; (1620 <initialize_opcode_info()+0x11bc>)
    1482:	a801      	add	r0, sp, #4
    1484:	f007 fc7c 	bl	8d80 <String::String(char const*)>
    1488:	4621      	mov	r1, r4
    148a:	a805      	add	r0, sp, #20
    148c:	f007 fc78 	bl	8d80 <String::String(char const*)>
    1490:	4639      	mov	r1, r7
    1492:	a809      	add	r0, sp, #36	; 0x24
    1494:	f007 fc74 	bl	8d80 <String::String(char const*)>
    1498:	f44f 7281 	mov.w	r2, #258	; 0x102
    149c:	a901      	add	r1, sp, #4
    149e:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
    14a2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    14a6:	f7fe fddf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14aa:	a801      	add	r0, sp, #4
    14ac:	f7fe ffcc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    14b0:	495c      	ldr	r1, [pc, #368]	; (1624 <initialize_opcode_info()+0x11c0>)
    14b2:	a801      	add	r0, sp, #4
    14b4:	f007 fc64 	bl	8d80 <String::String(char const*)>
    14b8:	4621      	mov	r1, r4
    14ba:	a805      	add	r0, sp, #20
    14bc:	f007 fc60 	bl	8d80 <String::String(char const*)>
    14c0:	4639      	mov	r1, r7
    14c2:	a809      	add	r0, sp, #36	; 0x24
    14c4:	f007 fc5c 	bl	8d80 <String::String(char const*)>
    14c8:	f44f 7281 	mov.w	r2, #258	; 0x102
    14cc:	a901      	add	r1, sp, #4
    14ce:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
    14d2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    14d6:	f7fe fdc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14da:	a801      	add	r0, sp, #4
    14dc:	f7fe ffb4 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    14e0:	4659      	mov	r1, fp
    14e2:	a801      	add	r0, sp, #4
    14e4:	f007 fc4c 	bl	8d80 <String::String(char const*)>
    14e8:	4641      	mov	r1, r8
    14ea:	a805      	add	r0, sp, #20
    14ec:	f007 fc48 	bl	8d80 <String::String(char const*)>
    14f0:	4621      	mov	r1, r4
    14f2:	a809      	add	r0, sp, #36	; 0x24
    14f4:	f007 fc44 	bl	8d80 <String::String(char const*)>
    14f8:	f44f 7341 	mov.w	r3, #772	; 0x304
    14fc:	a901      	add	r1, sp, #4
    14fe:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1502:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1506:	f7fe fdaf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    150a:	a801      	add	r0, sp, #4
    150c:	f7fe ff9c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1510:	4651      	mov	r1, sl
    1512:	a801      	add	r0, sp, #4
    1514:	f007 fc34 	bl	8d80 <String::String(char const*)>
    1518:	4641      	mov	r1, r8
    151a:	a805      	add	r0, sp, #20
    151c:	f007 fc30 	bl	8d80 <String::String(char const*)>
    1520:	4621      	mov	r1, r4
    1522:	a809      	add	r0, sp, #36	; 0x24
    1524:	f007 fc2c 	bl	8d80 <String::String(char const*)>
    1528:	f44f 7341 	mov.w	r3, #772	; 0x304
    152c:	a901      	add	r1, sp, #4
    152e:	f205 70ec 	addw	r0, r5, #2028	; 0x7ec
    1532:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1536:	f7fe fd97 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    153a:	a801      	add	r0, sp, #4
    153c:	f7fe ff84 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    1540:	4649      	mov	r1, r9
    1542:	a801      	add	r0, sp, #4
    1544:	f007 fc1c 	bl	8d80 <String::String(char const*)>
    1548:	4641      	mov	r1, r8
    154a:	a805      	add	r0, sp, #20
    154c:	f007 fc18 	bl	8d80 <String::String(char const*)>
    1550:	4621      	mov	r1, r4
    1552:	a809      	add	r0, sp, #36	; 0x24
    1554:	f007 fc14 	bl	8d80 <String::String(char const*)>
    1558:	f44f 7341 	mov.w	r3, #772	; 0x304
    155c:	a901      	add	r1, sp, #4
    155e:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    1562:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1566:	f7fe fd7f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    156a:	a801      	add	r0, sp, #4
    156c:	f7fe ff6c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    1570:	492d      	ldr	r1, [pc, #180]	; (1628 <initialize_opcode_info()+0x11c4>)
    1572:	a801      	add	r0, sp, #4
    1574:	f007 fc04 	bl	8d80 <String::String(char const*)>
    1578:	492c      	ldr	r1, [pc, #176]	; (162c <initialize_opcode_info()+0x11c8>)
    157a:	a805      	add	r0, sp, #20
    157c:	f007 fc00 	bl	8d80 <String::String(char const*)>
    1580:	4621      	mov	r1, r4
    1582:	a809      	add	r0, sp, #36	; 0x24
    1584:	f007 fbfc 	bl	8d80 <String::String(char const*)>
    1588:	f240 2102 	movw	r1, #514	; 0x202
    158c:	f605 0088 	addw	r0, r5, #2184	; 0x888
    1590:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1594:	a901      	add	r1, sp, #4
    1596:	f7fe fd67 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    159a:	a801      	add	r0, sp, #4
    159c:	f7fe ff54 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    15a0:	4651      	mov	r1, sl
    15a2:	a801      	add	r0, sp, #4
    15a4:	f007 fbec 	bl	8d80 <String::String(char const*)>
    15a8:	4921      	ldr	r1, [pc, #132]	; (1630 <initialize_opcode_info()+0x11cc>)
    15aa:	a805      	add	r0, sp, #20
    15ac:	f007 fbe8 	bl	8d80 <String::String(char const*)>
    15b0:	4621      	mov	r1, r4
    15b2:	a809      	add	r0, sp, #36	; 0x24
    15b4:	f007 fbe4 	bl	8d80 <String::String(char const*)>
    15b8:	f240 2006 	movw	r0, #518	; 0x206
    15bc:	a901      	add	r1, sp, #4
    15be:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    15c2:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
    15c6:	f7fe fd4f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15ca:	a801      	add	r0, sp, #4
    15cc:	f7fe ff3c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    15d0:	4659      	mov	r1, fp
    15d2:	a801      	add	r0, sp, #4
    15d4:	f44f 7b01 	mov.w	fp, #516	; 0x204
    15d8:	f007 fbd2 	bl	8d80 <String::String(char const*)>
    15dc:	4908      	ldr	r1, [pc, #32]	; (1600 <initialize_opcode_info()+0x119c>)
    15de:	a805      	add	r0, sp, #20
    15e0:	f007 fbce 	bl	8d80 <String::String(char const*)>
    15e4:	4621      	mov	r1, r4
    15e6:	a809      	add	r0, sp, #36	; 0x24
    15e8:	f007 fbca 	bl	8d80 <String::String(char const*)>
    15ec:	f10d 0c04 	add.w	ip, sp, #4
    15f0:	f605 1058 	addw	r0, r5, #2392	; 0x958
    15f4:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    15f8:	e020      	b.n	163c <initialize_opcode_info()+0x11d8>
    15fa:	bf00      	nop
    15fc:	200009dc 	.word	0x200009dc
    1600:	20000404 	.word	0x20000404
    1604:	200009e8 	.word	0x200009e8
    1608:	200009c8 	.word	0x200009c8
    160c:	20000434 	.word	0x20000434
    1610:	2000042c 	.word	0x2000042c
    1614:	200003ec 	.word	0x200003ec
    1618:	200003e0 	.word	0x200003e0
    161c:	2000095c 	.word	0x2000095c
    1620:	200009f8 	.word	0x200009f8
    1624:	200009fc 	.word	0x200009fc
    1628:	20000a00 	.word	0x20000a00
    162c:	200003e8 	.word	0x200003e8
    1630:	20000974 	.word	0x20000974
    1634:	200009f0 	.word	0x200009f0
    1638:	200009f4 	.word	0x200009f4
    163c:	4661      	mov	r1, ip
    163e:	f7fe fd13 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1642:	f10d 0c04 	add.w	ip, sp, #4
    1646:	4660      	mov	r0, ip
    1648:	f7fe fefe 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    164c:	f10d 0c04 	add.w	ip, sp, #4
    1650:	4651      	mov	r1, sl
    1652:	4660      	mov	r0, ip
    1654:	f007 fb94 	bl	8d80 <String::String(char const*)>
    1658:	f10d 0c14 	add.w	ip, sp, #20
    165c:	49d7      	ldr	r1, [pc, #860]	; (19bc <initialize_opcode_info()+0x1558>)
    165e:	4660      	mov	r0, ip
    1660:	f007 fb8e 	bl	8d80 <String::String(char const*)>
    1664:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    1668:	4621      	mov	r1, r4
    166a:	4660      	mov	r0, ip
    166c:	f007 fb88 	bl	8d80 <String::String(char const*)>
    1670:	f10d 0c04 	add.w	ip, sp, #4
    1674:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    1678:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    167c:	4661      	mov	r1, ip
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
	opcode_info[0x98] = {"TYA","","SZ",2,1};
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
	opcode_info[0x9a] = {"TXS","","",2,1};
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    167e:	f8df b368 	ldr.w	fp, [pc, #872]	; 19e8 <initialize_opcode_info()+0x1584>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    1682:	f7fe fcf1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1686:	f10d 0c04 	add.w	ip, sp, #4
    168a:	4660      	mov	r0, ip
    168c:	f7fe fedc 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    1690:	f10d 0c04 	add.w	ip, sp, #4
    1694:	4649      	mov	r1, r9
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    1696:	f44f 7981 	mov.w	r9, #258	; 0x102
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    169a:	4660      	mov	r0, ip
    169c:	f007 fb70 	bl	8d80 <String::String(char const*)>
    16a0:	4bc7      	ldr	r3, [pc, #796]	; (19c0 <initialize_opcode_info()+0x155c>)
    16a2:	f10d 0c14 	add.w	ip, sp, #20
    16a6:	4619      	mov	r1, r3
    16a8:	4660      	mov	r0, ip
    16aa:	f007 fb69 	bl	8d80 <String::String(char const*)>
    16ae:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    16b2:	4621      	mov	r1, r4
    16b4:	4660      	mov	r0, ip
    16b6:	f007 fb63 	bl	8d80 <String::String(char const*)>
    16ba:	f44f 7c01 	mov.w	ip, #516	; 0x204
    16be:	a901      	add	r1, sp, #4
    16c0:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    16c4:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    16c8:	f7fe fcce 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16cc:	a801      	add	r0, sp, #4
    16ce:	f7fe febb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    16d2:	49bc      	ldr	r1, [pc, #752]	; (19c4 <initialize_opcode_info()+0x1560>)
    16d4:	a801      	add	r0, sp, #4
    16d6:	f007 fb53 	bl	8d80 <String::String(char const*)>
    16da:	4621      	mov	r1, r4
    16dc:	a805      	add	r0, sp, #20
    16de:	f007 fb4f 	bl	8d80 <String::String(char const*)>
    16e2:	4639      	mov	r1, r7
    16e4:	a809      	add	r0, sp, #36	; 0x24
    16e6:	f007 fb4b 	bl	8d80 <String::String(char const*)>
    16ea:	a901      	add	r1, sp, #4
    16ec:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    16f0:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    16f4:	f7fe fcb8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16f8:	a801      	add	r0, sp, #4
    16fa:	f7fe fea5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    16fe:	4651      	mov	r1, sl
    1700:	a801      	add	r0, sp, #4
    1702:	f007 fb3d 	bl	8d80 <String::String(char const*)>
    1706:	49b0      	ldr	r1, [pc, #704]	; (19c8 <initialize_opcode_info()+0x1564>)
    1708:	a805      	add	r0, sp, #20
    170a:	f007 fb39 	bl	8d80 <String::String(char const*)>
    170e:	4621      	mov	r1, r4
    1710:	a809      	add	r0, sp, #36	; 0x24
    1712:	f007 fb35 	bl	8d80 <String::String(char const*)>
    1716:	f240 3305 	movw	r3, #773	; 0x305
    171a:	a901      	add	r1, sp, #4
    171c:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
    1720:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1724:	f7fe fca0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1728:	a801      	add	r0, sp, #4
    172a:	f7fe fe8d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    172e:	49a7      	ldr	r1, [pc, #668]	; (19cc <initialize_opcode_info()+0x1568>)
    1730:	a801      	add	r0, sp, #4
    1732:	f007 fb25 	bl	8d80 <String::String(char const*)>
    1736:	4621      	mov	r1, r4
    1738:	a805      	add	r0, sp, #20
    173a:	f007 fb21 	bl	8d80 <String::String(char const*)>
    173e:	4621      	mov	r1, r4
    1740:	a809      	add	r0, sp, #36	; 0x24
    1742:	f007 fb1d 	bl	8d80 <String::String(char const*)>
    1746:	a901      	add	r1, sp, #4
    1748:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    174c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1750:	f7fe fc8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1754:	a801      	add	r0, sp, #4
    1756:	f7fe fe77 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    175a:	4651      	mov	r1, sl
    175c:	f10d 0a04 	add.w	sl, sp, #4
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    1760:	f8df 9288 	ldr.w	r9, [pc, #648]	; 19ec <initialize_opcode_info()+0x1588>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    1764:	4650      	mov	r0, sl
    1766:	f10d 0a14 	add.w	sl, sp, #20
    176a:	f007 fb09 	bl	8d80 <String::String(char const*)>
    176e:	4998      	ldr	r1, [pc, #608]	; (19d0 <initialize_opcode_info()+0x156c>)
    1770:	4650      	mov	r0, sl
    1772:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1776:	f007 fb03 	bl	8d80 <String::String(char const*)>
    177a:	4621      	mov	r1, r4
    177c:	4650      	mov	r0, sl
    177e:	f240 3a05 	movw	sl, #773	; 0x305
    1782:	f007 fafd 	bl	8d80 <String::String(char const*)>
    1786:	f605 302c 	addw	r0, r5, #2860	; 0xb2c
    178a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    178e:	f10d 0a04 	add.w	sl, sp, #4
    1792:	4651      	mov	r1, sl
    1794:	f7fe fc68 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1798:	4650      	mov	r0, sl
    179a:	f7fe fe55 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    179e:	4650      	mov	r0, sl
    17a0:	f10d 0a14 	add.w	sl, sp, #20
    17a4:	4659      	mov	r1, fp
    17a6:	f007 faeb 	bl	8d80 <String::String(char const*)>
    17aa:	498a      	ldr	r1, [pc, #552]	; (19d4 <initialize_opcode_info()+0x1570>)
    17ac:	4650      	mov	r0, sl
    17ae:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    17b2:	f007 fae5 	bl	8d80 <String::String(char const*)>
    17b6:	4639      	mov	r1, r7
    17b8:	4650      	mov	r0, sl
    17ba:	f10d 0a04 	add.w	sl, sp, #4
    17be:	f007 fadf 	bl	8d80 <String::String(char const*)>
    17c2:	f240 2102 	movw	r1, #514	; 0x202
    17c6:	f605 30c8 	addw	r0, r5, #3016	; 0xbc8
    17ca:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    17ce:	4651      	mov	r1, sl
    17d0:	f7fe fc4a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17d4:	4650      	mov	r0, sl
    17d6:	f7fe fe37 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    17da:	4650      	mov	r0, sl
    17dc:	f10d 0a14 	add.w	sl, sp, #20
    17e0:	4649      	mov	r1, r9
    17e2:	f007 facd 	bl	8d80 <String::String(char const*)>
    17e6:	497c      	ldr	r1, [pc, #496]	; (19d8 <initialize_opcode_info()+0x1574>)
    17e8:	4650      	mov	r0, sl
    17ea:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    17ee:	f007 fac7 	bl	8d80 <String::String(char const*)>
    17f2:	4639      	mov	r1, r7
    17f4:	4650      	mov	r0, sl
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    17f6:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 19f0 <initialize_opcode_info()+0x158c>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    17fa:	f007 fac1 	bl	8d80 <String::String(char const*)>
    17fe:	f240 2006 	movw	r0, #518	; 0x206
    1802:	a901      	add	r1, sp, #4
    1804:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1808:	f605 30fc 	addw	r0, r5, #3068	; 0xbfc
    180c:	f7fe fc2c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1810:	a801      	add	r0, sp, #4
    1812:	f7fe fe19 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    1816:	4651      	mov	r1, sl
    1818:	a801      	add	r0, sp, #4
    181a:	f007 fab1 	bl	8d80 <String::String(char const*)>
    181e:	496d      	ldr	r1, [pc, #436]	; (19d4 <initialize_opcode_info()+0x1570>)
    1820:	a805      	add	r0, sp, #20
    1822:	f007 faad 	bl	8d80 <String::String(char const*)>
    1826:	4639      	mov	r1, r7
    1828:	a809      	add	r0, sp, #36	; 0x24
    182a:	f007 faa9 	bl	8d80 <String::String(char const*)>
    182e:	f240 2102 	movw	r1, #514	; 0x202
    1832:	f505 6043 	add.w	r0, r5, #3120	; 0xc30
    1836:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    183a:	a901      	add	r1, sp, #4
    183c:	f7fe fc14 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1840:	a801      	add	r0, sp, #4
    1842:	f7fe fe01 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    1846:	4659      	mov	r1, fp
    1848:	a801      	add	r0, sp, #4
    184a:	f007 fa99 	bl	8d80 <String::String(char const*)>
    184e:	4963      	ldr	r1, [pc, #396]	; (19dc <initialize_opcode_info()+0x1578>)
    1850:	a805      	add	r0, sp, #20
    1852:	f007 fa95 	bl	8d80 <String::String(char const*)>
    1856:	4639      	mov	r1, r7
    1858:	a809      	add	r0, sp, #36	; 0x24
    185a:	f007 fa91 	bl	8d80 <String::String(char const*)>
    185e:	f240 2e03 	movw	lr, #515	; 0x203
    1862:	a901      	add	r1, sp, #4
    1864:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    1868:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    186c:	f7fe fbfc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1870:	a801      	add	r0, sp, #4
    1872:	f7fe fde9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    1876:	4649      	mov	r1, r9
    1878:	a801      	add	r0, sp, #4
    187a:	f007 fa81 	bl	8d80 <String::String(char const*)>
    187e:	4957      	ldr	r1, [pc, #348]	; (19dc <initialize_opcode_info()+0x1578>)
    1880:	a805      	add	r0, sp, #20
    1882:	f007 fa7d 	bl	8d80 <String::String(char const*)>
    1886:	4639      	mov	r1, r7
    1888:	a809      	add	r0, sp, #36	; 0x24
    188a:	f007 fa79 	bl	8d80 <String::String(char const*)>
    188e:	f240 2e03 	movw	lr, #515	; 0x203
    1892:	a901      	add	r1, sp, #4
    1894:	f605 40cc 	addw	r0, r5, #3276	; 0xccc
    1898:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    189c:	f7fe fbe4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18a0:	a801      	add	r0, sp, #4
    18a2:	f7fe fdd1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    18a6:	4651      	mov	r1, sl
    18a8:	a801      	add	r0, sp, #4
    18aa:	f007 fa69 	bl	8d80 <String::String(char const*)>
    18ae:	494b      	ldr	r1, [pc, #300]	; (19dc <initialize_opcode_info()+0x1578>)
    18b0:	a805      	add	r0, sp, #20
    18b2:	f007 fa65 	bl	8d80 <String::String(char const*)>
    18b6:	4639      	mov	r1, r7
    18b8:	a809      	add	r0, sp, #36	; 0x24
    18ba:	f007 fa61 	bl	8d80 <String::String(char const*)>
    18be:	f240 2e03 	movw	lr, #515	; 0x203
    18c2:	a901      	add	r1, sp, #4
    18c4:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    18c8:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    18cc:	f7fe fbcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18d0:	a801      	add	r0, sp, #4
    18d2:	f7fe fdb9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    18d6:	4942      	ldr	r1, [pc, #264]	; (19e0 <initialize_opcode_info()+0x157c>)
    18d8:	a801      	add	r0, sp, #4
    18da:	f007 fa51 	bl	8d80 <String::String(char const*)>
    18de:	4621      	mov	r1, r4
    18e0:	a805      	add	r0, sp, #20
    18e2:	f007 fa4d 	bl	8d80 <String::String(char const*)>
    18e6:	4639      	mov	r1, r7
    18e8:	a809      	add	r0, sp, #36	; 0x24
    18ea:	f007 fa49 	bl	8d80 <String::String(char const*)>
    18ee:	f44f 7281 	mov.w	r2, #258	; 0x102
    18f2:	a901      	add	r1, sp, #4
    18f4:	f605 5068 	addw	r0, r5, #3432	; 0xd68
    18f8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    18fc:	f7fe fbb4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1900:	a801      	add	r0, sp, #4
    1902:	f7fe fda1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    1906:	4649      	mov	r1, r9
    1908:	a801      	add	r0, sp, #4
    190a:	f007 fa39 	bl	8d80 <String::String(char const*)>
    190e:	4931      	ldr	r1, [pc, #196]	; (19d4 <initialize_opcode_info()+0x1570>)
    1910:	a805      	add	r0, sp, #20
    1912:	f007 fa35 	bl	8d80 <String::String(char const*)>
    1916:	4639      	mov	r1, r7
    1918:	a809      	add	r0, sp, #36	; 0x24
    191a:	f007 fa31 	bl	8d80 <String::String(char const*)>
    191e:	f240 2102 	movw	r1, #514	; 0x202
    1922:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
    1926:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    192a:	a901      	add	r1, sp, #4
    192c:	f7fe fb9c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1930:	a801      	add	r0, sp, #4
    1932:	f7fe fd89 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    1936:	492b      	ldr	r1, [pc, #172]	; (19e4 <initialize_opcode_info()+0x1580>)
    1938:	a801      	add	r0, sp, #4
    193a:	f007 fa21 	bl	8d80 <String::String(char const*)>
    193e:	4621      	mov	r1, r4
    1940:	a805      	add	r0, sp, #20
    1942:	f007 fa1d 	bl	8d80 <String::String(char const*)>
    1946:	4639      	mov	r1, r7
    1948:	a809      	add	r0, sp, #36	; 0x24
    194a:	f007 fa19 	bl	8d80 <String::String(char const*)>
    194e:	f44f 7281 	mov.w	r2, #258	; 0x102
    1952:	a901      	add	r1, sp, #4
    1954:	f505 605d 	add.w	r0, r5, #3536	; 0xdd0
    1958:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    195c:	f7fe fb84 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1960:	a801      	add	r0, sp, #4
    1962:	f7fe fd71 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    1966:	4659      	mov	r1, fp
    1968:	a801      	add	r0, sp, #4
    196a:	f007 fa09 	bl	8d80 <String::String(char const*)>
    196e:	4641      	mov	r1, r8
    1970:	a805      	add	r0, sp, #20
    1972:	f007 fa05 	bl	8d80 <String::String(char const*)>
    1976:	4639      	mov	r1, r7
    1978:	a809      	add	r0, sp, #36	; 0x24
    197a:	f007 fa01 	bl	8d80 <String::String(char const*)>
    197e:	f44f 7341 	mov.w	r3, #772	; 0x304
    1982:	a901      	add	r1, sp, #4
    1984:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    1988:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    198c:	f7fe fb6c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1990:	a801      	add	r0, sp, #4
    1992:	f7fe fd59 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    1996:	4649      	mov	r1, r9
    1998:	a801      	add	r0, sp, #4
    199a:	f007 f9f1 	bl	8d80 <String::String(char const*)>
    199e:	4641      	mov	r1, r8
    19a0:	a805      	add	r0, sp, #20
    19a2:	f007 f9ed 	bl	8d80 <String::String(char const*)>
    19a6:	4639      	mov	r1, r7
    19a8:	a809      	add	r0, sp, #36	; 0x24
    19aa:	f007 f9e9 	bl	8d80 <String::String(char const*)>
    19ae:	f44f 7341 	mov.w	r3, #772	; 0x304
    19b2:	f605 606c 	addw	r0, r5, #3692	; 0xe6c
    19b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    19ba:	e01b      	b.n	19f4 <initialize_opcode_info()+0x1590>
    19bc:	20000404 	.word	0x20000404
    19c0:	20000a04 	.word	0x20000a04
    19c4:	20000a0c 	.word	0x20000a0c
    19c8:	20000434 	.word	0x20000434
    19cc:	20000a10 	.word	0x20000a10
    19d0:	2000042c 	.word	0x2000042c
    19d4:	200003d8 	.word	0x200003d8
    19d8:	200003ec 	.word	0x200003ec
    19dc:	200003e0 	.word	0x200003e0
    19e0:	20000a20 	.word	0x20000a20
    19e4:	20000a24 	.word	0x20000a24
    19e8:	20000a14 	.word	0x20000a14
    19ec:	20000a18 	.word	0x20000a18
    19f0:	20000a1c 	.word	0x20000a1c
    19f4:	ab01      	add	r3, sp, #4
    19f6:	4619      	mov	r1, r3
    19f8:	f7fe fb36 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19fc:	ab01      	add	r3, sp, #4
    19fe:	4618      	mov	r0, r3
    1a00:	f7fe fd22 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1a04:	ab01      	add	r3, sp, #4
    1a06:	4651      	mov	r1, sl
    1a08:	4618      	mov	r0, r3
    1a0a:	f007 f9b9 	bl	8d80 <String::String(char const*)>
    1a0e:	ab05      	add	r3, sp, #20
    1a10:	4641      	mov	r1, r8
    1a12:	f44f 7841 	mov.w	r8, #772	; 0x304
    1a16:	4618      	mov	r0, r3
    1a18:	f007 f9b2 	bl	8d80 <String::String(char const*)>
    1a1c:	ab09      	add	r3, sp, #36	; 0x24
    1a1e:	4639      	mov	r1, r7
    1a20:	4618      	mov	r0, r3
    1a22:	f007 f9ad 	bl	8d80 <String::String(char const*)>
    1a26:	ab01      	add	r3, sp, #4
    1a28:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
    1a2c:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1a30:	4619      	mov	r1, r3
    1a32:	f7fe fb19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a36:	ab01      	add	r3, sp, #4
    1a38:	4618      	mov	r0, r3
    1a3a:	f7fe fd05 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    1a3e:	ab01      	add	r3, sp, #4
    1a40:	49d8      	ldr	r1, [pc, #864]	; (1da4 <initialize_opcode_info()+0x1940>)
    1a42:	4618      	mov	r0, r3
    1a44:	f007 f99c 	bl	8d80 <String::String(char const*)>
    1a48:	ab05      	add	r3, sp, #20
    1a4a:	49d7      	ldr	r1, [pc, #860]	; (1da8 <initialize_opcode_info()+0x1944>)
    1a4c:	4618      	mov	r0, r3
    1a4e:	f007 f997 	bl	8d80 <String::String(char const*)>
    1a52:	ab09      	add	r3, sp, #36	; 0x24
    1a54:	4621      	mov	r1, r4
    1a56:	4618      	mov	r0, r3
    1a58:	f007 f992 	bl	8d80 <String::String(char const*)>
    1a5c:	ab01      	add	r3, sp, #4
    1a5e:	f240 2102 	movw	r1, #514	; 0x202
    1a62:	f605 7008 	addw	r0, r5, #3848	; 0xf08
    1a66:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1a6a:	4619      	mov	r1, r3
    1a6c:	f7fe fafc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a70:	ab01      	add	r3, sp, #4
    1a72:	4618      	mov	r0, r3
    1a74:	f7fe fce8 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    1a78:	ab01      	add	r3, sp, #4
    1a7a:	4649      	mov	r1, r9
    1a7c:	4618      	mov	r0, r3
    1a7e:	f007 f97f 	bl	8d80 <String::String(char const*)>
    1a82:	ab05      	add	r3, sp, #20
    1a84:	49c9      	ldr	r1, [pc, #804]	; (1dac <initialize_opcode_info()+0x1948>)
    1a86:	4618      	mov	r0, r3
    1a88:	f007 f97a 	bl	8d80 <String::String(char const*)>
    1a8c:	ab09      	add	r3, sp, #36	; 0x24
    1a8e:	4639      	mov	r1, r7
    1a90:	4618      	mov	r0, r3
    1a92:	f007 f975 	bl	8d80 <String::String(char const*)>
    1a96:	ab01      	add	r3, sp, #4
    1a98:	f240 2105 	movw	r1, #517	; 0x205
    1a9c:	f605 703c 	addw	r0, r5, #3900	; 0xf3c
    1aa0:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1aa4:	4619      	mov	r1, r3
    1aa6:	f7fe fadf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1aaa:	ab01      	add	r3, sp, #4
    1aac:	4618      	mov	r0, r3
    1aae:	f7fe fccb 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1ab2:	ab01      	add	r3, sp, #4
    1ab4:	4659      	mov	r1, fp
    1ab6:	4618      	mov	r0, r3
    1ab8:	f007 f962 	bl	8d80 <String::String(char const*)>
    1abc:	ab05      	add	r3, sp, #20
    1abe:	49bc      	ldr	r1, [pc, #752]	; (1db0 <initialize_opcode_info()+0x194c>)
    1ac0:	4618      	mov	r0, r3
    1ac2:	f007 f95d 	bl	8d80 <String::String(char const*)>
    1ac6:	ab09      	add	r3, sp, #36	; 0x24
    1ac8:	4639      	mov	r1, r7
    1aca:	4618      	mov	r0, r3
    1acc:	f007 f958 	bl	8d80 <String::String(char const*)>
    1ad0:	ab01      	add	r3, sp, #4
    1ad2:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1ad6:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
    1ada:	4619      	mov	r1, r3
    1adc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1ae0:	f7fe fac2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ae4:	ab01      	add	r3, sp, #4
    1ae6:	4618      	mov	r0, r3
    1ae8:	f7fe fcae 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1aec:	ab01      	add	r3, sp, #4
    1aee:	4649      	mov	r1, r9
    1af0:	4618      	mov	r0, r3
    1af2:	f007 f945 	bl	8d80 <String::String(char const*)>
    1af6:	ab05      	add	r3, sp, #20
    1af8:	49ad      	ldr	r1, [pc, #692]	; (1db0 <initialize_opcode_info()+0x194c>)
    1afa:	4618      	mov	r0, r3
    1afc:	f007 f940 	bl	8d80 <String::String(char const*)>
    1b00:	ab09      	add	r3, sp, #36	; 0x24
    1b02:	4639      	mov	r1, r7
    1b04:	4618      	mov	r0, r3
    1b06:	f007 f93b 	bl	8d80 <String::String(char const*)>
    1b0a:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1b0e:	ab01      	add	r3, sp, #4
    1b10:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1b14:	f602 302c 	addw	r0, r2, #2860	; 0xb2c
    1b18:	4619      	mov	r1, r3
    1b1a:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1b1e:	f7fe faa3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b22:	ab01      	add	r3, sp, #4
    1b24:	4618      	mov	r0, r3
    1b26:	f7fe fc8f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    1b2a:	ab01      	add	r3, sp, #4
    1b2c:	4651      	mov	r1, sl
    1b2e:	4618      	mov	r0, r3
    1b30:	f007 f926 	bl	8d80 <String::String(char const*)>
    1b34:	4b9f      	ldr	r3, [pc, #636]	; (1db4 <initialize_opcode_info()+0x1950>)
    1b36:	4619      	mov	r1, r3
    1b38:	ab05      	add	r3, sp, #20
    1b3a:	4618      	mov	r0, r3
    1b3c:	f007 f920 	bl	8d80 <String::String(char const*)>
    1b40:	ab09      	add	r3, sp, #36	; 0x24
    1b42:	4639      	mov	r1, r7
    1b44:	4618      	mov	r0, r3
    1b46:	f007 f91b 	bl	8d80 <String::String(char const*)>
    1b4a:	ab01      	add	r3, sp, #4
    1b4c:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1b50:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
    1b54:	4619      	mov	r1, r3
	opcode_info[0xb8] = {"CLV","","V",2,1};
    1b56:	4d98      	ldr	r5, [pc, #608]	; (1db8 <initialize_opcode_info()+0x1954>)
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    1b58:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1b5c:	f7fe fa84 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b60:	ab01      	add	r3, sp, #4
    1b62:	4618      	mov	r0, r3
    1b64:	f7fe fc70 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    1b68:	ab01      	add	r3, sp, #4
    1b6a:	4994      	ldr	r1, [pc, #592]	; (1dbc <initialize_opcode_info()+0x1958>)
    1b6c:	4618      	mov	r0, r3
    1b6e:	f007 f907 	bl	8d80 <String::String(char const*)>
    1b72:	ab05      	add	r3, sp, #20
    1b74:	4621      	mov	r1, r4
    1b76:	4618      	mov	r0, r3
    1b78:	f007 f902 	bl	8d80 <String::String(char const*)>
    1b7c:	ab09      	add	r3, sp, #36	; 0x24
    1b7e:	4990      	ldr	r1, [pc, #576]	; (1dc0 <initialize_opcode_info()+0x195c>)
    1b80:	4618      	mov	r0, r3
    1b82:	f007 f8fd 	bl	8d80 <String::String(char const*)>
    1b86:	ab01      	add	r3, sp, #4
    1b88:	f44f 7281 	mov.w	r2, #258	; 0x102
    1b8c:	4628      	mov	r0, r5
    1b8e:	4619      	mov	r1, r3
    1b90:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1b94:	f7fe fa68 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b98:	ab01      	add	r3, sp, #4
    1b9a:	4618      	mov	r0, r3
    1b9c:	f7fe fc54 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1ba0:	ab01      	add	r3, sp, #4
    1ba2:	4649      	mov	r1, r9
    1ba4:	4618      	mov	r0, r3
    1ba6:	f007 f8eb 	bl	8d80 <String::String(char const*)>
    1baa:	ab05      	add	r3, sp, #20
    1bac:	4985      	ldr	r1, [pc, #532]	; (1dc4 <initialize_opcode_info()+0x1960>)
    1bae:	4618      	mov	r0, r3
    1bb0:	f007 f8e6 	bl	8d80 <String::String(char const*)>
    1bb4:	ab09      	add	r3, sp, #36	; 0x24
    1bb6:	4639      	mov	r1, r7
    1bb8:	4618      	mov	r0, r3
    1bba:	f007 f8e1 	bl	8d80 <String::String(char const*)>
    1bbe:	ab01      	add	r3, sp, #4
    1bc0:	f105 0034 	add.w	r0, r5, #52	; 0x34
    1bc4:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1bc8:	4619      	mov	r1, r3
    1bca:	f7fe fa4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bce:	ab01      	add	r3, sp, #4
    1bd0:	4618      	mov	r0, r3
    1bd2:	f7fe fc39 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    1bd6:	ab01      	add	r3, sp, #4
    1bd8:	497b      	ldr	r1, [pc, #492]	; (1dc8 <initialize_opcode_info()+0x1964>)
    1bda:	4618      	mov	r0, r3
    1bdc:	f007 f8d0 	bl	8d80 <String::String(char const*)>
    1be0:	ab05      	add	r3, sp, #20
    1be2:	4621      	mov	r1, r4
    1be4:	4618      	mov	r0, r3
    1be6:	f007 f8cb 	bl	8d80 <String::String(char const*)>
    1bea:	ab09      	add	r3, sp, #36	; 0x24
    1bec:	4621      	mov	r1, r4
    1bee:	4618      	mov	r0, r3
    1bf0:	f007 f8c6 	bl	8d80 <String::String(char const*)>
    1bf4:	ab01      	add	r3, sp, #4
    1bf6:	f44f 7281 	mov.w	r2, #258	; 0x102
    1bfa:	f105 0068 	add.w	r0, r5, #104	; 0x68
    1bfe:	4619      	mov	r1, r3
    1c00:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1c04:	f7fe fa30 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c08:	ab01      	add	r3, sp, #4
    1c0a:	4618      	mov	r0, r3
    1c0c:	f7fe fc1c 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1c10:	ab01      	add	r3, sp, #4
    1c12:	4659      	mov	r1, fp
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1c14:	f10d 0b04 	add.w	fp, sp, #4
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1c18:	4618      	mov	r0, r3
    1c1a:	f007 f8b1 	bl	8d80 <String::String(char const*)>
    1c1e:	ab05      	add	r3, sp, #20
    1c20:	496a      	ldr	r1, [pc, #424]	; (1dcc <initialize_opcode_info()+0x1968>)
    1c22:	4618      	mov	r0, r3
    1c24:	f007 f8ac 	bl	8d80 <String::String(char const*)>
    1c28:	ab09      	add	r3, sp, #36	; 0x24
    1c2a:	4639      	mov	r1, r7
    1c2c:	4618      	mov	r0, r3
    1c2e:	f007 f8a7 	bl	8d80 <String::String(char const*)>
    1c32:	ab01      	add	r3, sp, #4
    1c34:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
    1c38:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1c3c:	4619      	mov	r1, r3
    1c3e:	f7fe fa13 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c42:	ab01      	add	r3, sp, #4
    1c44:	4618      	mov	r0, r3
    1c46:	f7fe fbff 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    1c4a:	ab01      	add	r3, sp, #4
    1c4c:	4649      	mov	r1, r9
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1c4e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 1ddc <initialize_opcode_info()+0x1978>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    1c52:	4618      	mov	r0, r3
    1c54:	f007 f894 	bl	8d80 <String::String(char const*)>
    1c58:	ab05      	add	r3, sp, #20
    1c5a:	495c      	ldr	r1, [pc, #368]	; (1dcc <initialize_opcode_info()+0x1968>)
    1c5c:	4618      	mov	r0, r3
    1c5e:	f007 f88f 	bl	8d80 <String::String(char const*)>
    1c62:	ab09      	add	r3, sp, #36	; 0x24
    1c64:	4639      	mov	r1, r7
    1c66:	4618      	mov	r0, r3
    1c68:	f007 f88a 	bl	8d80 <String::String(char const*)>
    1c6c:	ab01      	add	r3, sp, #4
    1c6e:	f505 7082 	add.w	r0, r5, #260	; 0x104
    1c72:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1c76:	4619      	mov	r1, r3
    1c78:	f7fe f9f6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c7c:	ab01      	add	r3, sp, #4
    1c7e:	4618      	mov	r0, r3
    1c80:	f7fe fbe2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1c84:	ab01      	add	r3, sp, #4
    1c86:	4651      	mov	r1, sl
    1c88:	f10d 0a04 	add.w	sl, sp, #4
    1c8c:	4618      	mov	r0, r3
    1c8e:	f007 f877 	bl	8d80 <String::String(char const*)>
    1c92:	ab05      	add	r3, sp, #20
    1c94:	494b      	ldr	r1, [pc, #300]	; (1dc4 <initialize_opcode_info()+0x1960>)
    1c96:	4618      	mov	r0, r3
    1c98:	f007 f872 	bl	8d80 <String::String(char const*)>
    1c9c:	ab09      	add	r3, sp, #36	; 0x24
    1c9e:	4639      	mov	r1, r7
    1ca0:	4618      	mov	r0, r3
    1ca2:	f007 f86d 	bl	8d80 <String::String(char const*)>
    1ca6:	4651      	mov	r1, sl
    1ca8:	f505 709c 	add.w	r0, r5, #312	; 0x138
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1cac:	f8df a130 	ldr.w	sl, [pc, #304]	; 1de0 <initialize_opcode_info()+0x197c>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1cb0:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1cb4:	f7fe f9d8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cb8:	4658      	mov	r0, fp
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1cba:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1de4 <initialize_opcode_info()+0x1980>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1cbe:	f7fe fbc3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1cc2:	4658      	mov	r0, fp
    1cc4:	f10d 0b14 	add.w	fp, sp, #20
    1cc8:	4651      	mov	r1, sl
    1cca:	f007 f859 	bl	8d80 <String::String(char const*)>
    1cce:	4940      	ldr	r1, [pc, #256]	; (1dd0 <initialize_opcode_info()+0x196c>)
    1cd0:	4658      	mov	r0, fp
    1cd2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1cd6:	f007 f853 	bl	8d80 <String::String(char const*)>
    1cda:	4631      	mov	r1, r6
    1cdc:	4658      	mov	r0, fp
    1cde:	f10d 0b04 	add.w	fp, sp, #4
    1ce2:	f007 f84d 	bl	8d80 <String::String(char const*)>
    1ce6:	f240 2102 	movw	r1, #514	; 0x202
    1cea:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
    1cee:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1cf2:	4659      	mov	r1, fp
    1cf4:	f7fe f9b8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cf8:	4658      	mov	r0, fp
    1cfa:	f7fe fba5 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1cfe:	4658      	mov	r0, fp
    1d00:	f10d 0b14 	add.w	fp, sp, #20
    1d04:	4641      	mov	r1, r8
    1d06:	f007 f83b 	bl	8d80 <String::String(char const*)>
    1d0a:	4932      	ldr	r1, [pc, #200]	; (1dd4 <initialize_opcode_info()+0x1970>)
    1d0c:	4658      	mov	r0, fp
    1d0e:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1d12:	f007 f835 	bl	8d80 <String::String(char const*)>
    1d16:	4631      	mov	r1, r6
    1d18:	4658      	mov	r0, fp
    1d1a:	f10d 0b04 	add.w	fp, sp, #4
    1d1e:	f007 f82f 	bl	8d80 <String::String(char const*)>
    1d22:	f240 2006 	movw	r0, #518	; 0x206
    1d26:	4659      	mov	r1, fp
    1d28:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1d2c:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
    1d30:	f7fe f99a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d34:	4658      	mov	r0, fp
    1d36:	f7fe fb87 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    1d3a:	4658      	mov	r0, fp
    1d3c:	f10d 0b14 	add.w	fp, sp, #20
    1d40:	4651      	mov	r1, sl
    1d42:	f007 f81d 	bl	8d80 <String::String(char const*)>
    1d46:	4924      	ldr	r1, [pc, #144]	; (1dd8 <initialize_opcode_info()+0x1974>)
    1d48:	4658      	mov	r0, fp
    1d4a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1d4e:	f007 f817 	bl	8d80 <String::String(char const*)>
    1d52:	4631      	mov	r1, r6
    1d54:	4658      	mov	r0, fp
    1d56:	f240 2b03 	movw	fp, #515	; 0x203
    1d5a:	f007 f811 	bl	8d80 <String::String(char const*)>
    1d5e:	ab01      	add	r3, sp, #4
    1d60:	f505 701c 	add.w	r0, r5, #624	; 0x270
    1d64:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1d68:	4619      	mov	r1, r3
    1d6a:	f7fe f97d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d6e:	ab01      	add	r3, sp, #4
    1d70:	4618      	mov	r0, r3
    1d72:	f7fe fb69 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    1d76:	ab01      	add	r3, sp, #4
    1d78:	4641      	mov	r1, r8
    1d7a:	4618      	mov	r0, r3
    1d7c:	f007 f800 	bl	8d80 <String::String(char const*)>
    1d80:	ab05      	add	r3, sp, #20
    1d82:	4915      	ldr	r1, [pc, #84]	; (1dd8 <initialize_opcode_info()+0x1974>)
    1d84:	4618      	mov	r0, r3
    1d86:	f006 fffb 	bl	8d80 <String::String(char const*)>
    1d8a:	ab09      	add	r3, sp, #36	; 0x24
    1d8c:	4631      	mov	r1, r6
    1d8e:	4618      	mov	r0, r3
    1d90:	f006 fff6 	bl	8d80 <String::String(char const*)>
    1d94:	ab01      	add	r3, sp, #4
    1d96:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
    1d9a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1d9e:	4619      	mov	r1, r3
    1da0:	e022      	b.n	1de8 <initialize_opcode_info()+0x1984>
    1da2:	bf00      	nop
    1da4:	20000a28 	.word	0x20000a28
    1da8:	200003e8 	.word	0x200003e8
    1dac:	20000974 	.word	0x20000974
    1db0:	20000404 	.word	0x20000404
    1db4:	20000a04 	.word	0x20000a04
    1db8:	20017978 	.word	0x20017978
    1dbc:	20000a2c 	.word	0x20000a2c
    1dc0:	20000a30 	.word	0x20000a30
    1dc4:	20000434 	.word	0x20000434
    1dc8:	20000a34 	.word	0x20000a34
    1dcc:	2000042c 	.word	0x2000042c
    1dd0:	200003d8 	.word	0x200003d8
    1dd4:	200003ec 	.word	0x200003ec
    1dd8:	200003e0 	.word	0x200003e0
    1ddc:	20000a40 	.word	0x20000a40
    1de0:	20000a38 	.word	0x20000a38
    1de4:	20000a3c 	.word	0x20000a3c
    1de8:	f7fe f93e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dec:	ab01      	add	r3, sp, #4
    1dee:	4618      	mov	r0, r3
    1df0:	f7fe fb2a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1df4:	ab01      	add	r3, sp, #4
    1df6:	4649      	mov	r1, r9
    1df8:	4618      	mov	r0, r3
    1dfa:	f006 ffc1 	bl	8d80 <String::String(char const*)>
    1dfe:	ab05      	add	r3, sp, #20
    1e00:	49d6      	ldr	r1, [pc, #856]	; (215c <initialize_opcode_info()+0x1cf8>)
    1e02:	4618      	mov	r0, r3
    1e04:	f006 ffbc 	bl	8d80 <String::String(char const*)>
    1e08:	ab09      	add	r3, sp, #36	; 0x24
    1e0a:	4639      	mov	r1, r7
    1e0c:	4618      	mov	r0, r3
    1e0e:	f006 ffb7 	bl	8d80 <String::String(char const*)>
    1e12:	ab01      	add	r3, sp, #4
    1e14:	f240 2e05 	movw	lr, #517	; 0x205
    1e18:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
    1e1c:	4619      	mov	r1, r3
    1e1e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1e22:	f7fe f921 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e26:	ab01      	add	r3, sp, #4
    1e28:	4618      	mov	r0, r3
    1e2a:	f7fe fb0d 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1e2e:	ab01      	add	r3, sp, #4
    1e30:	49cb      	ldr	r1, [pc, #812]	; (2160 <initialize_opcode_info()+0x1cfc>)
    1e32:	4618      	mov	r0, r3
    1e34:	f006 ffa4 	bl	8d80 <String::String(char const*)>
    1e38:	ab05      	add	r3, sp, #20
    1e3a:	4621      	mov	r1, r4
    1e3c:	4618      	mov	r0, r3
    1e3e:	f006 ff9f 	bl	8d80 <String::String(char const*)>
    1e42:	ab09      	add	r3, sp, #36	; 0x24
    1e44:	4621      	mov	r1, r4
    1e46:	4618      	mov	r0, r3
    1e48:	f006 ff9a 	bl	8d80 <String::String(char const*)>
    1e4c:	ab01      	add	r3, sp, #4
    1e4e:	f44f 7281 	mov.w	r2, #258	; 0x102
    1e52:	f505 7050 	add.w	r0, r5, #832	; 0x340
    1e56:	4619      	mov	r1, r3
    1e58:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1e5c:	f7fe f904 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e60:	ab01      	add	r3, sp, #4
    1e62:	4618      	mov	r0, r3
    1e64:	f7fe faf0 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1e68:	ab01      	add	r3, sp, #4
    1e6a:	4641      	mov	r1, r8
    1e6c:	4618      	mov	r0, r3
    1e6e:	f006 ff87 	bl	8d80 <String::String(char const*)>
    1e72:	ab05      	add	r3, sp, #20
    1e74:	49bb      	ldr	r1, [pc, #748]	; (2164 <initialize_opcode_info()+0x1d00>)
    1e76:	4618      	mov	r0, r3
    1e78:	f006 ff82 	bl	8d80 <String::String(char const*)>
    1e7c:	ab09      	add	r3, sp, #36	; 0x24
    1e7e:	4631      	mov	r1, r6
    1e80:	4618      	mov	r0, r3
    1e82:	f006 ff7d 	bl	8d80 <String::String(char const*)>
    1e86:	ab01      	add	r3, sp, #4
    1e88:	f240 2102 	movw	r1, #514	; 0x202
    1e8c:	f505 705d 	add.w	r0, r5, #884	; 0x374
    1e90:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1e94:	4619      	mov	r1, r3
    1e96:	f7fe f8e7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e9a:	ab01      	add	r3, sp, #4
    1e9c:	4618      	mov	r0, r3
    1e9e:	f7fe fad3 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1ea2:	ab01      	add	r3, sp, #4
    1ea4:	49b0      	ldr	r1, [pc, #704]	; (2168 <initialize_opcode_info()+0x1d04>)
    1ea6:	4618      	mov	r0, r3
    1ea8:	f006 ff6a 	bl	8d80 <String::String(char const*)>
    1eac:	ab05      	add	r3, sp, #20
    1eae:	4621      	mov	r1, r4
    1eb0:	4618      	mov	r0, r3
    1eb2:	f006 ff65 	bl	8d80 <String::String(char const*)>
    1eb6:	ab09      	add	r3, sp, #36	; 0x24
    1eb8:	4639      	mov	r1, r7
    1eba:	4618      	mov	r0, r3
    1ebc:	f006 ff60 	bl	8d80 <String::String(char const*)>
    1ec0:	ab01      	add	r3, sp, #4
    1ec2:	f44f 7281 	mov.w	r2, #258	; 0x102
    1ec6:	f505 706a 	add.w	r0, r5, #936	; 0x3a8
    1eca:	4619      	mov	r1, r3
    1ecc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1ed0:	f7fe f8ca 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ed4:	ab01      	add	r3, sp, #4
    1ed6:	4618      	mov	r0, r3
    1ed8:	f7fe fab6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1edc:	4651      	mov	r1, sl
    1ede:	f10d 0a04 	add.w	sl, sp, #4
    1ee2:	4650      	mov	r0, sl
    1ee4:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 2190 <initialize_opcode_info()+0x1d2c>
    1ee8:	f006 ff4a 	bl	8d80 <String::String(char const*)>
    1eec:	ab05      	add	r3, sp, #20
    1eee:	4651      	mov	r1, sl
    1ef0:	4618      	mov	r0, r3
    1ef2:	f006 ff45 	bl	8d80 <String::String(char const*)>
    1ef6:	ab09      	add	r3, sp, #36	; 0x24
    1ef8:	4631      	mov	r1, r6
    1efa:	4618      	mov	r0, r3
    1efc:	f006 ff40 	bl	8d80 <String::String(char const*)>
    1f00:	f44f 7341 	mov.w	r3, #772	; 0x304
    1f04:	a901      	add	r1, sp, #4
    1f06:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    1f0a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1f0e:	f7fe f8ab 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f12:	a801      	add	r0, sp, #4
    1f14:	f7fe fa98 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1f18:	4641      	mov	r1, r8
    1f1a:	a801      	add	r0, sp, #4
    1f1c:	f006 ff30 	bl	8d80 <String::String(char const*)>
    1f20:	4651      	mov	r1, sl
    1f22:	a805      	add	r0, sp, #20
    1f24:	f006 ff2c 	bl	8d80 <String::String(char const*)>
    1f28:	4631      	mov	r1, r6
    1f2a:	a809      	add	r0, sp, #36	; 0x24
    1f2c:	f006 ff28 	bl	8d80 <String::String(char const*)>
    1f30:	f44f 7341 	mov.w	r3, #772	; 0x304
    1f34:	a901      	add	r1, sp, #4
    1f36:	f205 4044 	addw	r0, r5, #1092	; 0x444
    1f3a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1f3e:	f7fe f893 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f42:	a801      	add	r0, sp, #4
    1f44:	f7fe fa80 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1f48:	4649      	mov	r1, r9
    1f4a:	a801      	add	r0, sp, #4
    1f4c:	f006 ff18 	bl	8d80 <String::String(char const*)>
    1f50:	4651      	mov	r1, sl
    1f52:	a805      	add	r0, sp, #20
    1f54:	f006 ff14 	bl	8d80 <String::String(char const*)>
    1f58:	4639      	mov	r1, r7
    1f5a:	a809      	add	r0, sp, #36	; 0x24
    1f5c:	f006 ff10 	bl	8d80 <String::String(char const*)>
    1f60:	f240 3206 	movw	r2, #774	; 0x306
    1f64:	a901      	add	r1, sp, #4
    1f66:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    1f6a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1f6e:	f7fe f87b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f72:	a801      	add	r0, sp, #4
    1f74:	f7fe fa68 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1f78:	497c      	ldr	r1, [pc, #496]	; (216c <initialize_opcode_info()+0x1d08>)
    1f7a:	a801      	add	r0, sp, #4
    1f7c:	f006 ff00 	bl	8d80 <String::String(char const*)>
    1f80:	4a7b      	ldr	r2, [pc, #492]	; (2170 <initialize_opcode_info()+0x1d0c>)
    1f82:	a805      	add	r0, sp, #20
    1f84:	4611      	mov	r1, r2
    1f86:	f006 fefb 	bl	8d80 <String::String(char const*)>
    1f8a:	4621      	mov	r1, r4
    1f8c:	a809      	add	r0, sp, #36	; 0x24
    1f8e:	f006 fef7 	bl	8d80 <String::String(char const*)>
    1f92:	f240 2102 	movw	r1, #514	; 0x202
    1f96:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
    1f9a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1f9e:	a901      	add	r1, sp, #4
    1fa0:	f7fe f862 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fa4:	a801      	add	r0, sp, #4
    1fa6:	f7fe fa4f 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1faa:	4641      	mov	r1, r8
    1fac:	a801      	add	r0, sp, #4
    1fae:	f006 fee7 	bl	8d80 <String::String(char const*)>
    1fb2:	4b70      	ldr	r3, [pc, #448]	; (2174 <initialize_opcode_info()+0x1d10>)
    1fb4:	a805      	add	r0, sp, #20
    1fb6:	4619      	mov	r1, r3
    1fb8:	f006 fee2 	bl	8d80 <String::String(char const*)>
    1fbc:	4631      	mov	r1, r6
    1fbe:	a809      	add	r0, sp, #36	; 0x24
    1fc0:	f006 fede 	bl	8d80 <String::String(char const*)>
    1fc4:	f240 2e05 	movw	lr, #517	; 0x205
    1fc8:	a901      	add	r1, sp, #4
    1fca:	f205 5014 	addw	r0, r5, #1300	; 0x514
    1fce:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1fd2:	f7fe f849 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1fd6:	a801      	add	r0, sp, #4
    1fd8:	f7fe fa36 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1fdc:	4641      	mov	r1, r8
    1fde:	a801      	add	r0, sp, #4
    1fe0:	f006 fece 	bl	8d80 <String::String(char const*)>
    1fe4:	4964      	ldr	r1, [pc, #400]	; (2178 <initialize_opcode_info()+0x1d14>)
    1fe6:	a805      	add	r0, sp, #20
    1fe8:	f006 feca 	bl	8d80 <String::String(char const*)>
    1fec:	4631      	mov	r1, r6
    1fee:	a809      	add	r0, sp, #36	; 0x24
    1ff0:	f006 fec6 	bl	8d80 <String::String(char const*)>
    1ff4:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1ff8:	a901      	add	r1, sp, #4
    1ffa:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
    1ffe:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    2002:	f7fe f831 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2006:	a801      	add	r0, sp, #4
    2008:	f7fe fa1e 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    200c:	4649      	mov	r1, r9
    200e:	a801      	add	r0, sp, #4
    2010:	f006 feb6 	bl	8d80 <String::String(char const*)>
    2014:	4958      	ldr	r1, [pc, #352]	; (2178 <initialize_opcode_info()+0x1d14>)
    2016:	a805      	add	r0, sp, #20
    2018:	f006 feb2 	bl	8d80 <String::String(char const*)>
    201c:	4639      	mov	r1, r7
    201e:	a809      	add	r0, sp, #36	; 0x24
    2020:	f006 feae 	bl	8d80 <String::String(char const*)>
    2024:	f240 2006 	movw	r0, #518	; 0x206
    2028:	a901      	add	r1, sp, #4
    202a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    202e:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    2032:	f7fe f819 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2036:	a801      	add	r0, sp, #4
    2038:	f7fe fa06 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    203c:	494f      	ldr	r1, [pc, #316]	; (217c <initialize_opcode_info()+0x1d18>)
    203e:	a801      	add	r0, sp, #4
    2040:	f006 fe9e 	bl	8d80 <String::String(char const*)>
    2044:	4621      	mov	r1, r4
    2046:	a805      	add	r0, sp, #20
    2048:	f006 fe9a 	bl	8d80 <String::String(char const*)>
    204c:	494c      	ldr	r1, [pc, #304]	; (2180 <initialize_opcode_info()+0x1d1c>)
    204e:	a809      	add	r0, sp, #36	; 0x24
    2050:	f006 fe96 	bl	8d80 <String::String(char const*)>
    2054:	f44f 7281 	mov.w	r2, #258	; 0x102
    2058:	a901      	add	r1, sp, #4
    205a:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    205e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2062:	f7fe f801 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2066:	a801      	add	r0, sp, #4
    2068:	f7fe f9ee 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    206c:	4641      	mov	r1, r8
    206e:	a801      	add	r0, sp, #4
    2070:	f006 fe86 	bl	8d80 <String::String(char const*)>
    2074:	4943      	ldr	r1, [pc, #268]	; (2184 <initialize_opcode_info()+0x1d20>)
    2076:	a805      	add	r0, sp, #20
    2078:	f006 fe82 	bl	8d80 <String::String(char const*)>
    207c:	4631      	mov	r1, r6
    207e:	a809      	add	r0, sp, #36	; 0x24
    2080:	f006 fe7e 	bl	8d80 <String::String(char const*)>
    2084:	f44f 7341 	mov.w	r3, #772	; 0x304
    2088:	a901      	add	r1, sp, #4
    208a:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
    208e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2092:	f7fd ffe9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2096:	a801      	add	r0, sp, #4
    2098:	f7fe f9d6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    209c:	4641      	mov	r1, r8
    209e:	f10d 0804 	add.w	r8, sp, #4
    20a2:	4640      	mov	r0, r8
    20a4:	f10d 0814 	add.w	r8, sp, #20
    20a8:	f006 fe6a 	bl	8d80 <String::String(char const*)>
    20ac:	4936      	ldr	r1, [pc, #216]	; (2188 <initialize_opcode_info()+0x1d24>)
    20ae:	4640      	mov	r0, r8
    20b0:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    20b4:	f006 fe64 	bl	8d80 <String::String(char const*)>
    20b8:	4631      	mov	r1, r6
    20ba:	4640      	mov	r0, r8
    20bc:	f10d 0804 	add.w	r8, sp, #4
    20c0:	f006 fe5e 	bl	8d80 <String::String(char const*)>
    20c4:	f44f 7341 	mov.w	r3, #772	; 0x304
    20c8:	4641      	mov	r1, r8
    20ca:	f205 7084 	addw	r0, r5, #1924	; 0x784
    20ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20d2:	f7fd ffc9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20d6:	4640      	mov	r0, r8
    20d8:	f7fe f9b6 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    20dc:	4640      	mov	r0, r8
    20de:	f10d 0814 	add.w	r8, sp, #20
    20e2:	4649      	mov	r1, r9
    20e4:	f006 fe4c 	bl	8d80 <String::String(char const*)>
    20e8:	4927      	ldr	r1, [pc, #156]	; (2188 <initialize_opcode_info()+0x1d24>)
    20ea:	4640      	mov	r0, r8
    20ec:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    20f0:	f006 fe46 	bl	8d80 <String::String(char const*)>
    20f4:	f240 3907 	movw	r9, #775	; 0x307
    20f8:	4640      	mov	r0, r8
    20fa:	f10d 0804 	add.w	r8, sp, #4
    20fe:	4639      	mov	r1, r7
    2100:	f006 fe3e 	bl	8d80 <String::String(char const*)>
    2104:	4641      	mov	r1, r8
    2106:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    210a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    210e:	f7fd ffab 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2112:	4640      	mov	r0, r8
    2114:	f7fe f998 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    2118:	4640      	mov	r0, r8
    211a:	f10d 0814 	add.w	r8, sp, #20
    211e:	491b      	ldr	r1, [pc, #108]	; (218c <initialize_opcode_info()+0x1d28>)
    2120:	f006 fe2e 	bl	8d80 <String::String(char const*)>
    2124:	490f      	ldr	r1, [pc, #60]	; (2164 <initialize_opcode_info()+0x1d00>)
    2126:	4640      	mov	r0, r8
    2128:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    212c:	f006 fe28 	bl	8d80 <String::String(char const*)>
    2130:	4631      	mov	r1, r6
    2132:	4640      	mov	r0, r8
    2134:	f10d 0804 	add.w	r8, sp, #4
    2138:	f006 fe22 	bl	8d80 <String::String(char const*)>
    213c:	f240 2102 	movw	r1, #514	; 0x202
    2140:	f505 6002 	add.w	r0, r5, #2080	; 0x820
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    2144:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2194 <initialize_opcode_info()+0x1d30>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    2148:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    214c:	4641      	mov	r1, r8
    214e:	f7fd ff8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2152:	4640      	mov	r0, r8
    2154:	f7fe f978 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    2158:	ab01      	add	r3, sp, #4
    215a:	e01d      	b.n	2198 <initialize_opcode_info()+0x1d34>
    215c:	200003e0 	.word	0x200003e0
    2160:	20000a44 	.word	0x20000a44
    2164:	200003d8 	.word	0x200003d8
    2168:	20000a48 	.word	0x20000a48
    216c:	20000a4c 	.word	0x20000a4c
    2170:	200003e8 	.word	0x200003e8
    2174:	20000974 	.word	0x20000974
    2178:	20000404 	.word	0x20000404
    217c:	20000a50 	.word	0x20000a50
    2180:	20000a54 	.word	0x20000a54
    2184:	20000434 	.word	0x20000434
    2188:	2000042c 	.word	0x2000042c
    218c:	20000a58 	.word	0x20000a58
    2190:	20000428 	.word	0x20000428
    2194:	20000a5c 	.word	0x20000a5c
    2198:	4649      	mov	r1, r9
    219a:	f8df 8370 	ldr.w	r8, [pc, #880]	; 250c <initialize_opcode_info()+0x20a8>
    219e:	4618      	mov	r0, r3
    21a0:	f006 fdee 	bl	8d80 <String::String(char const*)>
    21a4:	ab05      	add	r3, sp, #20
    21a6:	49cb      	ldr	r1, [pc, #812]	; (24d4 <initialize_opcode_info()+0x2070>)
    21a8:	4618      	mov	r0, r3
    21aa:	f006 fde9 	bl	8d80 <String::String(char const*)>
    21ae:	ab09      	add	r3, sp, #36	; 0x24
    21b0:	4641      	mov	r1, r8
    21b2:	4618      	mov	r0, r3
    21b4:	f006 fde4 	bl	8d80 <String::String(char const*)>
    21b8:	f240 2006 	movw	r0, #518	; 0x206
    21bc:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    21c0:	a801      	add	r0, sp, #4
    21c2:	4601      	mov	r1, r0
    21c4:	f605 0054 	addw	r0, r5, #2132	; 0x854
    21c8:	f7fd ff4e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21cc:	a801      	add	r0, sp, #4
    21ce:	f7fe f93b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    21d2:	49c1      	ldr	r1, [pc, #772]	; (24d8 <initialize_opcode_info()+0x2074>)
    21d4:	a801      	add	r0, sp, #4
    21d6:	f006 fdd3 	bl	8d80 <String::String(char const*)>
    21da:	49c0      	ldr	r1, [pc, #768]	; (24dc <initialize_opcode_info()+0x2078>)
    21dc:	a805      	add	r0, sp, #20
    21de:	f006 fdcf 	bl	8d80 <String::String(char const*)>
    21e2:	4631      	mov	r1, r6
    21e4:	a809      	add	r0, sp, #36	; 0x24
    21e6:	f006 fdcb 	bl	8d80 <String::String(char const*)>
    21ea:	a801      	add	r0, sp, #4
    21ec:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    21f0:	4601      	mov	r1, r0
    21f2:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
    21f6:	f7fd ff37 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21fa:	a801      	add	r0, sp, #4
    21fc:	f7fe f924 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    2200:	4649      	mov	r1, r9
    2202:	a801      	add	r0, sp, #4
    2204:	f006 fdbc 	bl	8d80 <String::String(char const*)>
    2208:	49b4      	ldr	r1, [pc, #720]	; (24dc <initialize_opcode_info()+0x2078>)
    220a:	a805      	add	r0, sp, #20
    220c:	f006 fdb8 	bl	8d80 <String::String(char const*)>
    2210:	4641      	mov	r1, r8
    2212:	a809      	add	r0, sp, #36	; 0x24
    2214:	f006 fdb4 	bl	8d80 <String::String(char const*)>
    2218:	a801      	add	r0, sp, #4
    221a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    221e:	4601      	mov	r1, r0
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    2220:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 2510 <initialize_opcode_info()+0x20ac>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    2224:	f605 1024 	addw	r0, r5, #2340	; 0x924
    2228:	f7fd ff1e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    222c:	a801      	add	r0, sp, #4
    222e:	f7fe f90b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    2232:	4659      	mov	r1, fp
    2234:	a801      	add	r0, sp, #4
    2236:	f006 fda3 	bl	8d80 <String::String(char const*)>
    223a:	49a8      	ldr	r1, [pc, #672]	; (24dc <initialize_opcode_info()+0x2078>)
    223c:	a805      	add	r0, sp, #20
    223e:	f006 fd9f 	bl	8d80 <String::String(char const*)>
    2242:	4639      	mov	r1, r7
    2244:	a809      	add	r0, sp, #36	; 0x24
    2246:	f006 fd9b 	bl	8d80 <String::String(char const*)>
    224a:	a801      	add	r0, sp, #4
    224c:	f240 2e05 	movw	lr, #517	; 0x205
    2250:	4601      	mov	r1, r0
    2252:	f605 1058 	addw	r0, r5, #2392	; 0x958
    2256:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    225a:	f7fd ff05 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    225e:	a801      	add	r0, sp, #4
    2260:	f7fe f8f2 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    2264:	499e      	ldr	r1, [pc, #632]	; (24e0 <initialize_opcode_info()+0x207c>)
    2266:	a801      	add	r0, sp, #4
    2268:	f006 fd8a 	bl	8d80 <String::String(char const*)>
    226c:	4621      	mov	r1, r4
    226e:	a805      	add	r0, sp, #20
    2270:	f006 fd86 	bl	8d80 <String::String(char const*)>
    2274:	4639      	mov	r1, r7
    2276:	a809      	add	r0, sp, #36	; 0x24
    2278:	f006 fd82 	bl	8d80 <String::String(char const*)>
    227c:	a801      	add	r0, sp, #4
    227e:	f44f 7281 	mov.w	r2, #258	; 0x102
    2282:	4601      	mov	r1, r0
    2284:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    2288:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    228c:	f7fd feec 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2290:	a801      	add	r0, sp, #4
    2292:	f7fe f8d9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    2296:	4649      	mov	r1, r9
    2298:	a801      	add	r0, sp, #4
    229a:	f006 fd71 	bl	8d80 <String::String(char const*)>
    229e:	4991      	ldr	r1, [pc, #580]	; (24e4 <initialize_opcode_info()+0x2080>)
    22a0:	a805      	add	r0, sp, #20
    22a2:	f006 fd6d 	bl	8d80 <String::String(char const*)>
    22a6:	4641      	mov	r1, r8
    22a8:	a809      	add	r0, sp, #36	; 0x24
    22aa:	f006 fd69 	bl	8d80 <String::String(char const*)>
    22ae:	f240 2102 	movw	r1, #514	; 0x202
    22b2:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
    22b6:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    22ba:	a901      	add	r1, sp, #4
    22bc:	f7fd fed4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    22c0:	a801      	add	r0, sp, #4
    22c2:	f7fe f8c1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    22c6:	4988      	ldr	r1, [pc, #544]	; (24e8 <initialize_opcode_info()+0x2084>)
    22c8:	a801      	add	r0, sp, #4
    22ca:	f006 fd59 	bl	8d80 <String::String(char const*)>
    22ce:	4621      	mov	r1, r4
    22d0:	a805      	add	r0, sp, #20
    22d2:	f006 fd55 	bl	8d80 <String::String(char const*)>
    22d6:	4621      	mov	r1, r4
    22d8:	a809      	add	r0, sp, #36	; 0x24
    22da:	f006 fd51 	bl	8d80 <String::String(char const*)>
    22de:	f44f 7281 	mov.w	r2, #258	; 0x102
    22e2:	a901      	add	r1, sp, #4
    22e4:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    22e8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    22ec:	f7fd febc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    22f0:	a801      	add	r0, sp, #4
    22f2:	f7fe f8a9 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    22f6:	4978      	ldr	r1, [pc, #480]	; (24d8 <initialize_opcode_info()+0x2074>)
    22f8:	a801      	add	r0, sp, #4
    22fa:	f006 fd41 	bl	8d80 <String::String(char const*)>
    22fe:	4651      	mov	r1, sl
    2300:	a805      	add	r0, sp, #20
    2302:	f006 fd3d 	bl	8d80 <String::String(char const*)>
    2306:	4631      	mov	r1, r6
    2308:	a809      	add	r0, sp, #36	; 0x24
    230a:	f44f 7641 	mov.w	r6, #772	; 0x304
    230e:	f006 fd37 	bl	8d80 <String::String(char const*)>
    2312:	a901      	add	r1, sp, #4
    2314:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    2318:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    231c:	f7fd fea4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2320:	a801      	add	r0, sp, #4
    2322:	f7fe f891 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    2326:	4649      	mov	r1, r9
    2328:	a801      	add	r0, sp, #4
    232a:	f006 fd29 	bl	8d80 <String::String(char const*)>
    232e:	4651      	mov	r1, sl
    2330:	a805      	add	r0, sp, #20
    2332:	f006 fd25 	bl	8d80 <String::String(char const*)>
    2336:	4641      	mov	r1, r8
    2338:	a809      	add	r0, sp, #36	; 0x24
    233a:	f006 fd21 	bl	8d80 <String::String(char const*)>
    233e:	a901      	add	r1, sp, #4
    2340:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
    2344:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    2348:	f7fd fe8e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    234c:	a801      	add	r0, sp, #4
    234e:	f7fe f87b 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    2352:	4659      	mov	r1, fp
    2354:	a801      	add	r0, sp, #4
    2356:	f006 fd13 	bl	8d80 <String::String(char const*)>
    235a:	4651      	mov	r1, sl
    235c:	a805      	add	r0, sp, #20
    235e:	f006 fd0f 	bl	8d80 <String::String(char const*)>
    2362:	4639      	mov	r1, r7
    2364:	a809      	add	r0, sp, #36	; 0x24
    2366:	f006 fd0b 	bl	8d80 <String::String(char const*)>
    236a:	f240 3206 	movw	r2, #774	; 0x306
    236e:	a901      	add	r1, sp, #4
    2370:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
    2374:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2378:	f7fd fe76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    237c:	a801      	add	r0, sp, #4
    237e:	f7fe f863 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    2382:	495a      	ldr	r1, [pc, #360]	; (24ec <initialize_opcode_info()+0x2088>)
    2384:	a801      	add	r0, sp, #4
    2386:	f006 fcfb 	bl	8d80 <String::String(char const*)>
    238a:	4a59      	ldr	r2, [pc, #356]	; (24f0 <initialize_opcode_info()+0x208c>)
    238c:	a805      	add	r0, sp, #20
    238e:	4611      	mov	r1, r2
    2390:	f006 fcf6 	bl	8d80 <String::String(char const*)>
    2394:	4621      	mov	r1, r4
    2396:	a809      	add	r0, sp, #36	; 0x24
    2398:	f006 fcf2 	bl	8d80 <String::String(char const*)>
    239c:	f240 2202 	movw	r2, #514	; 0x202
    23a0:	a901      	add	r1, sp, #4
    23a2:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
    23a6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    23aa:	f7fd fe5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23ae:	a801      	add	r0, sp, #4
    23b0:	f7fe f84a 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    23b4:	4649      	mov	r1, r9
    23b6:	a801      	add	r0, sp, #4
    23b8:	f006 fce2 	bl	8d80 <String::String(char const*)>
    23bc:	4b4d      	ldr	r3, [pc, #308]	; (24f4 <initialize_opcode_info()+0x2090>)
    23be:	a805      	add	r0, sp, #20
    23c0:	4619      	mov	r1, r3
    23c2:	f006 fcdd 	bl	8d80 <String::String(char const*)>
    23c6:	4641      	mov	r1, r8
    23c8:	a809      	add	r0, sp, #36	; 0x24
    23ca:	f006 fcd9 	bl	8d80 <String::String(char const*)>
    23ce:	f240 2e05 	movw	lr, #517	; 0x205
    23d2:	a901      	add	r1, sp, #4
    23d4:	f605 3094 	addw	r0, r5, #2964	; 0xb94
    23d8:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    23dc:	f7fd fe44 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    23e0:	a801      	add	r0, sp, #4
    23e2:	f7fe f831 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    23e6:	4649      	mov	r1, r9
    23e8:	a801      	add	r0, sp, #4
    23ea:	f006 fcc9 	bl	8d80 <String::String(char const*)>
    23ee:	4942      	ldr	r1, [pc, #264]	; (24f8 <initialize_opcode_info()+0x2094>)
    23f0:	a805      	add	r0, sp, #20
    23f2:	f006 fcc5 	bl	8d80 <String::String(char const*)>
    23f6:	4641      	mov	r1, r8
    23f8:	a809      	add	r0, sp, #36	; 0x24
    23fa:	f006 fcc1 	bl	8d80 <String::String(char const*)>
    23fe:	f44f 7c01 	mov.w	ip, #516	; 0x204
    2402:	a901      	add	r1, sp, #4
    2404:	f605 4064 	addw	r0, r5, #3172	; 0xc64
    2408:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    240c:	f7fd fe2c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2410:	a801      	add	r0, sp, #4
    2412:	f7fe f819 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    2416:	4659      	mov	r1, fp
    2418:	a801      	add	r0, sp, #4
    241a:	f006 fcb1 	bl	8d80 <String::String(char const*)>
    241e:	4936      	ldr	r1, [pc, #216]	; (24f8 <initialize_opcode_info()+0x2094>)
    2420:	a805      	add	r0, sp, #20
    2422:	f006 fcad 	bl	8d80 <String::String(char const*)>
    2426:	4639      	mov	r1, r7
    2428:	a809      	add	r0, sp, #36	; 0x24
    242a:	f006 fca9 	bl	8d80 <String::String(char const*)>
    242e:	f240 2306 	movw	r3, #518	; 0x206
    2432:	a901      	add	r1, sp, #4
    2434:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    2438:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    243c:	f7fd fe14 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2440:	a801      	add	r0, sp, #4
    2442:	f7fe f801 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    2446:	492d      	ldr	r1, [pc, #180]	; (24fc <initialize_opcode_info()+0x2098>)
    2448:	a801      	add	r0, sp, #4
    244a:	f006 fc99 	bl	8d80 <String::String(char const*)>
    244e:	4621      	mov	r1, r4
    2450:	a805      	add	r0, sp, #20
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    2452:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0xf8] = {"SED","","D",2,1};
    2456:	f006 fc93 	bl	8d80 <String::String(char const*)>
    245a:	4929      	ldr	r1, [pc, #164]	; (2500 <initialize_opcode_info()+0x209c>)
    245c:	a809      	add	r0, sp, #36	; 0x24
    245e:	f006 fc8f 	bl	8d80 <String::String(char const*)>
    2462:	f44f 7381 	mov.w	r3, #258	; 0x102
    2466:	a901      	add	r1, sp, #4
    2468:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    246c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2470:	f7fd fdfa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2474:	a801      	add	r0, sp, #4
    2476:	f7fd ffe7 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    247a:	4649      	mov	r1, r9
    247c:	a801      	add	r0, sp, #4
    247e:	f006 fc7f 	bl	8d80 <String::String(char const*)>
    2482:	4920      	ldr	r1, [pc, #128]	; (2504 <initialize_opcode_info()+0x20a0>)
    2484:	a805      	add	r0, sp, #20
    2486:	f006 fc7b 	bl	8d80 <String::String(char const*)>
    248a:	4641      	mov	r1, r8
    248c:	a809      	add	r0, sp, #36	; 0x24
    248e:	f006 fc77 	bl	8d80 <String::String(char const*)>
    2492:	a901      	add	r1, sp, #4
    2494:	f605 5034 	addw	r0, r5, #3380	; 0xd34
    2498:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    249c:	f7fd fde4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    24a0:	a801      	add	r0, sp, #4
    24a2:	f7fd ffd1 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    24a6:	4649      	mov	r1, r9
    24a8:	a801      	add	r0, sp, #4
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    24aa:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    24ae:	f006 fc67 	bl	8d80 <String::String(char const*)>
    24b2:	4915      	ldr	r1, [pc, #84]	; (2508 <initialize_opcode_info()+0x20a4>)
    24b4:	a805      	add	r0, sp, #20
    24b6:	f006 fc63 	bl	8d80 <String::String(char const*)>
    24ba:	4641      	mov	r1, r8
    24bc:	a809      	add	r0, sp, #36	; 0x24
    24be:	f006 fc5f 	bl	8d80 <String::String(char const*)>
    24c2:	a901      	add	r1, sp, #4
    24c4:	f605 6004 	addw	r0, r5, #3588	; 0xe04
    24c8:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    24cc:	f7fd fdcc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    24d0:	a801      	add	r0, sp, #4
    24d2:	e01f      	b.n	2514 <initialize_opcode_info()+0x20b0>
    24d4:	200003ec 	.word	0x200003ec
    24d8:	20000a58 	.word	0x20000a58
    24dc:	200003e0 	.word	0x200003e0
    24e0:	20000a64 	.word	0x20000a64
    24e4:	200003d8 	.word	0x200003d8
    24e8:	20000a68 	.word	0x20000a68
    24ec:	20000a6c 	.word	0x20000a6c
    24f0:	200003e8 	.word	0x200003e8
    24f4:	20000974 	.word	0x20000974
    24f8:	20000404 	.word	0x20000404
    24fc:	20000a70 	.word	0x20000a70
    2500:	20000a54 	.word	0x20000a54
    2504:	20000434 	.word	0x20000434
    2508:	2000042c 	.word	0x2000042c
    250c:	200009d4 	.word	0x200009d4
    2510:	20000a60 	.word	0x20000a60
    2514:	f7fd ff98 	bl	448 <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    2518:	4659      	mov	r1, fp
    251a:	a801      	add	r0, sp, #4
    251c:	f006 fc30 	bl	8d80 <String::String(char const*)>
    2520:	490a      	ldr	r1, [pc, #40]	; (254c <initialize_opcode_info()+0x20e8>)
    2522:	a805      	add	r0, sp, #20
    2524:	f006 fc2c 	bl	8d80 <String::String(char const*)>
    2528:	4639      	mov	r1, r7
    252a:	a809      	add	r0, sp, #36	; 0x24
    252c:	f006 fc28 	bl	8d80 <String::String(char const*)>
    2530:	a901      	add	r1, sp, #4
    2532:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    2536:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    253a:	f7fd fd95 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    253e:	a801      	add	r0, sp, #4
    2540:	f7fd ff82 	bl	448 <OpDecoder::~OpDecoder()>
    2544:	b00f      	add	sp, #60	; 0x3c
    2546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    254a:	bf00      	nop
    254c:	2000042c 	.word	0x2000042c

00002550 <check_for_CLK_activity()>:
    2550:	4a0e      	ldr	r2, [pc, #56]	; (258c <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    2552:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2556:	6811      	ldr	r1, [r2, #0]
    2558:	e004      	b.n	2564 <check_for_CLK_activity()+0x14>
    255a:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    255c:	1a5b      	subs	r3, r3, r1
    255e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2562:	d812      	bhi.n	258a <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    2564:	f8dc 0000 	ldr.w	r0, [ip]
    2568:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    256c:	d0f5      	beq.n	255a <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    256e:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    2572:	e004      	b.n	257e <check_for_CLK_activity()+0x2e>
    2574:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    2576:	1a5b      	subs	r3, r3, r1
    2578:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    257c:	d804      	bhi.n	2588 <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    257e:	6803      	ldr	r3, [r0, #0]
    2580:	04db      	lsls	r3, r3, #19
    2582:	d4f7      	bmi.n	2574 <check_for_CLK_activity()+0x24>
    return(true);
    2584:	2001      	movs	r0, #1
    2586:	4770      	bx	lr
            return(false);
    2588:	2000      	movs	r0, #0
}
    258a:	4770      	bx	lr
    258c:	2001886c 	.word	0x2001886c

00002590 <setup>:
void setup() {
    2590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    2594:	2100      	movs	r1, #0
void setup() {
    2596:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    2598:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    259a:	4d94      	ldr	r5, [pc, #592]	; (27ec <setup+0x25c>)
    259c:	f006 fe28 	bl	91f0 <pinMode>
    pinMode(PIN_RESET, INPUT);
    25a0:	2100      	movs	r1, #0
    25a2:	2028      	movs	r0, #40	; 0x28
    25a4:	4c92      	ldr	r4, [pc, #584]	; (27f0 <setup+0x260>)
    25a6:	f006 fe23 	bl	91f0 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    25aa:	2100      	movs	r1, #0
    25ac:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    25ae:	4f91      	ldr	r7, [pc, #580]	; (27f4 <setup+0x264>)
    25b0:	f006 fe1e 	bl	91f0 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    25b4:	2100      	movs	r1, #0
    25b6:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    25b8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 2848 <setup+0x2b8>
    25bc:	f006 fe18 	bl	91f0 <pinMode>
    pinMode(PIN_NMI, INPUT);
    25c0:	2100      	movs	r1, #0
    25c2:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    25c4:	f240 28ee 	movw	r8, #750	; 0x2ee
    25c8:	f006 fe12 	bl	91f0 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    25cc:	2101      	movs	r1, #1
    25ce:	200c      	movs	r0, #12
    25d0:	f006 fe0e 	bl	91f0 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    25d4:	2101      	movs	r1, #1
    25d6:	2027      	movs	r0, #39	; 0x27
    25d8:	f006 fe0a 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    25dc:	2101      	movs	r1, #1
    25de:	201b      	movs	r0, #27
    25e0:	f006 fe06 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    25e4:	2101      	movs	r1, #1
    25e6:	2026      	movs	r0, #38	; 0x26
    25e8:	f006 fe02 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    25ec:	2101      	movs	r1, #1
    25ee:	201c      	movs	r0, #28
    25f0:	f006 fdfe 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    25f4:	2101      	movs	r1, #1
    25f6:	2025      	movs	r0, #37	; 0x25
    25f8:	f006 fdfa 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    25fc:	2101      	movs	r1, #1
    25fe:	201d      	movs	r0, #29
    2600:	f006 fdf6 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2604:	2101      	movs	r1, #1
    2606:	2024      	movs	r0, #36	; 0x24
    2608:	f006 fdf2 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    260c:	2101      	movs	r1, #1
    260e:	201e      	movs	r0, #30
    2610:	f006 fdee 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2614:	2101      	movs	r1, #1
    2616:	2023      	movs	r0, #35	; 0x23
    2618:	f006 fdea 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    261c:	2101      	movs	r1, #1
    261e:	201f      	movs	r0, #31
    2620:	f006 fde6 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    2624:	2101      	movs	r1, #1
    2626:	2022      	movs	r0, #34	; 0x22
    2628:	f006 fde2 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    262c:	2101      	movs	r1, #1
    262e:	2020      	movs	r0, #32
    2630:	f006 fdde 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    2634:	2101      	movs	r1, #1
    2636:	2021      	movs	r0, #33	; 0x21
    2638:	f006 fdda 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    263c:	2101      	movs	r1, #1
    263e:	4608      	mov	r0, r1
    2640:	f006 fdd6 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    2644:	2101      	movs	r1, #1
    2646:	2000      	movs	r0, #0
    2648:	f006 fdd2 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    264c:	2101      	movs	r1, #1
    264e:	2002      	movs	r0, #2
    2650:	f006 fdce 	bl	91f0 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    2654:	2101      	movs	r1, #1
    2656:	2017      	movs	r0, #23
    2658:	f006 fdca 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    265c:	2100      	movs	r1, #0
    265e:	200e      	movs	r0, #14
    2660:	f006 fdc6 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    2664:	2100      	movs	r1, #0
    2666:	200f      	movs	r0, #15
    2668:	f006 fdc2 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    266c:	2100      	movs	r1, #0
    266e:	2010      	movs	r0, #16
    2670:	f006 fdbe 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    2674:	2100      	movs	r1, #0
    2676:	2011      	movs	r0, #17
    2678:	f006 fdba 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    267c:	2100      	movs	r1, #0
    267e:	2012      	movs	r0, #18
    2680:	f006 fdb6 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    2684:	2100      	movs	r1, #0
    2686:	2013      	movs	r0, #19
    2688:	f006 fdb2 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    268c:	2100      	movs	r1, #0
    268e:	2014      	movs	r0, #20
    2690:	f006 fdae 	bl	91f0 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    2694:	2100      	movs	r1, #0
    2696:	2015      	movs	r0, #21
    2698:	f006 fdaa 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    269c:	2101      	movs	r1, #1
    269e:	200b      	movs	r0, #11
    26a0:	f006 fda6 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    26a4:	2101      	movs	r1, #1
    26a6:	200a      	movs	r0, #10
    26a8:	f006 fda2 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    26ac:	2101      	movs	r1, #1
    26ae:	2009      	movs	r0, #9
    26b0:	f006 fd9e 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    26b4:	2101      	movs	r1, #1
    26b6:	2008      	movs	r0, #8
    26b8:	f006 fd9a 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    26bc:	2101      	movs	r1, #1
    26be:	2007      	movs	r0, #7
    26c0:	f006 fd96 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    26c4:	2101      	movs	r1, #1
    26c6:	2006      	movs	r0, #6
    26c8:	f006 fd92 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    26cc:	2101      	movs	r1, #1
    26ce:	2005      	movs	r0, #5
    26d0:	f006 fd8e 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    26d4:	2101      	movs	r1, #1
    26d6:	2004      	movs	r0, #4
    26d8:	f006 fd8a 	bl	91f0 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    26dc:	2101      	movs	r1, #1
    26de:	2003      	movs	r0, #3
    26e0:	f006 fd86 	bl	91f0 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    26e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    26e8:	4943      	ldr	r1, [pc, #268]	; (27f8 <setup+0x268>)
    26ea:	4844      	ldr	r0, [pc, #272]	; (27fc <setup+0x26c>)
    26ec:	f006 fdc0 	bl	9270 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    26f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    26f4:	4942      	ldr	r1, [pc, #264]	; (2800 <setup+0x270>)
    26f6:	4843      	ldr	r0, [pc, #268]	; (2804 <setup+0x274>)
    26f8:	f006 fdba 	bl	9270 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    26fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2700:	4941      	ldr	r1, [pc, #260]	; (2808 <setup+0x278>)
    2702:	4842      	ldr	r0, [pc, #264]	; (280c <setup+0x27c>)
    2704:	f006 fdb4 	bl	9270 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    2708:	f44f 6200 	mov.w	r2, #2048	; 0x800
    270c:	4940      	ldr	r1, [pc, #256]	; (2810 <setup+0x280>)
    270e:	4841      	ldr	r0, [pc, #260]	; (2814 <setup+0x284>)
    2710:	f006 fdae 	bl	9270 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2714:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2718:	493f      	ldr	r1, [pc, #252]	; (2818 <setup+0x288>)
    271a:	4840      	ldr	r0, [pc, #256]	; (281c <setup+0x28c>)
    271c:	f006 fda8 	bl	9270 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    2720:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2724:	493e      	ldr	r1, [pc, #248]	; (2820 <setup+0x290>)
    2726:	483f      	ldr	r0, [pc, #252]	; (2824 <setup+0x294>)
    2728:	f006 fda2 	bl	9270 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    272c:	682e      	ldr	r6, [r5, #0]
		yield();
    272e:	f007 ffdd 	bl	a6ec <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2732:	7823      	ldrb	r3, [r4, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d03e      	beq.n	27b6 <setup+0x226>
    2738:	783b      	ldrb	r3, [r7, #0]
    273a:	07db      	lsls	r3, r3, #31
    273c:	d53b      	bpl.n	27b6 <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    273e:	682b      	ldr	r3, [r5, #0]
    2740:	f8d9 2000 	ldr.w	r2, [r9]
    2744:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2746:	2b0e      	cmp	r3, #14
    2748:	d935      	bls.n	27b6 <setup+0x226>
    Serial.setTimeout(5000);
    274a:	f241 3188 	movw	r1, #5000	; 0x1388
    274e:	4836      	ldr	r0, [pc, #216]	; (2828 <setup+0x298>)
    2750:	f006 faa4 	bl	8c9c <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    2754:	4935      	ldr	r1, [pc, #212]	; (282c <setup+0x29c>)
    2756:	4668      	mov	r0, sp
    2758:	f006 fb12 	bl	8d80 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    275c:	4669      	mov	r1, sp
    275e:	a804      	add	r0, sp, #16
    2760:	f006 fa9e 	bl	8ca0 <String::String(String const&)>
    2764:	4932      	ldr	r1, [pc, #200]	; (2830 <setup+0x2a0>)
    2766:	a804      	add	r0, sp, #16
    2768:	f006 fbd6 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    276c:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    276e:	482e      	ldr	r0, [pc, #184]	; (2828 <setup+0x298>)
    2770:	f006 fa4e 	bl	8c10 <Print::print(String const&)>
    2774:	482c      	ldr	r0, [pc, #176]	; (2828 <setup+0x298>)
    2776:	f006 fa71 	bl	8c5c <Print::println()>
class StringSumHelper : public String
    277a:	a804      	add	r0, sp, #16
    277c:	f006 fac4 	bl	8d08 <String::~String()>
    2780:	4668      	mov	r0, sp
    2782:	f006 fac1 	bl	8d08 <String::~String()>
    if ( !check_for_CLK_activity() ) {
    2786:	f7ff fee3 	bl	2550 <check_for_CLK_activity()>
    278a:	bb08      	cbnz	r0, 27d0 <setup+0x240>
        debug_mode = true;
    278c:	4829      	ldr	r0, [pc, #164]	; (2834 <setup+0x2a4>)
    278e:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    2790:	4b29      	ldr	r3, [pc, #164]	; (2838 <setup+0x2a8>)
    2792:	2203      	movs	r2, #3
        debug_mode = true;
    2794:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2796:	2146      	movs	r1, #70	; 0x46
    2798:	4828      	ldr	r0, [pc, #160]	; (283c <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    279a:	701a      	strb	r2, [r3, #0]
    279c:	f007 ff28 	bl	a5f0 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    27a0:	4821      	ldr	r0, [pc, #132]	; (2828 <setup+0x298>)
    27a2:	f006 fa5b 	bl	8c5c <Print::println()>
    run_mode = WAITING;
    27a6:	4b26      	ldr	r3, [pc, #152]	; (2840 <setup+0x2b0>)
    27a8:	2200      	movs	r2, #0
    27aa:	701a      	strb	r2, [r3, #0]
}
    27ac:	b009      	add	sp, #36	; 0x24
    27ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    27b2:	f7fd be57 	b.w	464 <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    27b6:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    27b8:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    27ba:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    27bc:	b12a      	cbz	r2, 27ca <setup+0x23a>
				if (elapsed > 2000) break;
    27be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    27c2:	d8c2      	bhi.n	274a <setup+0x1ba>
			yield();
    27c4:	f007 ff92 	bl	a6ec <yield>
    27c8:	e7b1      	b.n	272e <setup+0x19e>
				if (elapsed > 750) break;
    27ca:	4543      	cmp	r3, r8
    27cc:	d9fa      	bls.n	27c4 <setup+0x234>
    27ce:	e7bc      	b.n	274a <setup+0x1ba>
        debug_mode = false;
    27d0:	2300      	movs	r3, #0
        addr_mode = All_External;
    27d2:	4a19      	ldr	r2, [pc, #100]	; (2838 <setup+0x2a8>)
        debug_mode = false;
    27d4:	4c17      	ldr	r4, [pc, #92]	; (2834 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    27d6:	2146      	movs	r1, #70	; 0x46
    27d8:	481a      	ldr	r0, [pc, #104]	; (2844 <setup+0x2b4>)
    27da:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    27dc:	7013      	strb	r3, [r2, #0]
    27de:	f007 ff07 	bl	a5f0 <usb_serial_write>
    27e2:	4811      	ldr	r0, [pc, #68]	; (2828 <setup+0x298>)
    27e4:	f006 fa3a 	bl	8c5c <Print::println()>
    27e8:	e7dd      	b.n	27a6 <setup+0x216>
    27ea:	bf00      	nop
    27ec:	2001886c 	.word	0x2001886c
    27f0:	200188b5 	.word	0x200188b5
    27f4:	200188b4 	.word	0x200188b4
    27f8:	200013f0 	.word	0x200013f0
    27fc:	200123f0 	.word	0x200123f0
    2800:	20001bf0 	.word	0x20001bf0
    2804:	20012bf0 	.word	0x20012bf0
    2808:	200023f0 	.word	0x200023f0
    280c:	200133f0 	.word	0x200133f0
    2810:	20002bf0 	.word	0x20002bf0
    2814:	20013bf0 	.word	0x20013bf0
    2818:	200033f0 	.word	0x200033f0
    281c:	200143f0 	.word	0x200143f0
    2820:	20003bf0 	.word	0x20003bf0
    2824:	20014bf0 	.word	0x20014bf0
    2828:	200043f8 	.word	0x200043f8
    282c:	20001120 	.word	0x20001120
    2830:	20001148 	.word	0x20001148
    2834:	20004a06 	.word	0x20004a06
    2838:	2001889c 	.word	0x2001889c
    283c:	20001150 	.word	0x20001150
    2840:	200188ac 	.word	0x200188ac
    2844:	20001198 	.word	0x20001198
    2848:	2001887c 	.word	0x2001887c

0000284c <flag_status()>:
String flag_status(void) {
    284c:	b570      	push	{r4, r5, r6, lr}
    284e:	b088      	sub	sp, #32
    s = s + (flag_c ? "C" : "-");
    2850:	4d4e      	ldr	r5, [pc, #312]	; (298c <flag_status()+0x140>)
String flag_status(void) {
    2852:	4606      	mov	r6, r0
    String s;
    2854:	2100      	movs	r1, #0
    2856:	4668      	mov	r0, sp
    s = s + (flag_c ? "C" : "-");
    2858:	4c4d      	ldr	r4, [pc, #308]	; (2990 <flag_status()+0x144>)
    String s;
    285a:	f006 fa91 	bl	8d80 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    285e:	4669      	mov	r1, sp
    2860:	a804      	add	r0, sp, #16
    2862:	f006 fa1d 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_c ? "C" : "-");
    2866:	782b      	ldrb	r3, [r5, #0]
    2868:	494a      	ldr	r1, [pc, #296]	; (2994 <flag_status()+0x148>)
    286a:	a804      	add	r0, sp, #16
    286c:	f013 0f01 	tst.w	r3, #1
    2870:	bf08      	it	eq
    2872:	4621      	moveq	r1, r4
    2874:	f006 fb50 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    2878:	4601      	mov	r1, r0
    287a:	4668      	mov	r0, sp
    287c:	f006 fac4 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    2880:	a804      	add	r0, sp, #16
    2882:	f006 fa41 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2886:	4669      	mov	r1, sp
    2888:	a804      	add	r0, sp, #16
    288a:	f006 fa09 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_z ? "Z" : "-");
    288e:	782b      	ldrb	r3, [r5, #0]
    2890:	4941      	ldr	r1, [pc, #260]	; (2998 <flag_status()+0x14c>)
    2892:	a804      	add	r0, sp, #16
    2894:	f013 0f02 	tst.w	r3, #2
    2898:	bf08      	it	eq
    289a:	4621      	moveq	r1, r4
    289c:	f006 fb3c 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    28a0:	4601      	mov	r1, r0
    28a2:	4668      	mov	r0, sp
    28a4:	f006 fab0 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    28a8:	a804      	add	r0, sp, #16
    28aa:	f006 fa2d 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    28ae:	4669      	mov	r1, sp
    28b0:	a804      	add	r0, sp, #16
    28b2:	f006 f9f5 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_i ? "I" : "-");
    28b6:	782b      	ldrb	r3, [r5, #0]
    28b8:	4938      	ldr	r1, [pc, #224]	; (299c <flag_status()+0x150>)
    28ba:	a804      	add	r0, sp, #16
    28bc:	f013 0f04 	tst.w	r3, #4
    28c0:	bf08      	it	eq
    28c2:	4621      	moveq	r1, r4
    28c4:	f006 fb28 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    28c8:	4601      	mov	r1, r0
    28ca:	4668      	mov	r0, sp
    28cc:	f006 fa9c 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    28d0:	a804      	add	r0, sp, #16
    28d2:	f006 fa19 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    28d6:	4669      	mov	r1, sp
    28d8:	a804      	add	r0, sp, #16
    28da:	f006 f9e1 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_d ? "D" : "-");
    28de:	782b      	ldrb	r3, [r5, #0]
    28e0:	492f      	ldr	r1, [pc, #188]	; (29a0 <flag_status()+0x154>)
    28e2:	a804      	add	r0, sp, #16
    28e4:	f013 0f08 	tst.w	r3, #8
    28e8:	bf08      	it	eq
    28ea:	4621      	moveq	r1, r4
    28ec:	f006 fb14 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    28f0:	4601      	mov	r1, r0
    28f2:	4668      	mov	r0, sp
    28f4:	f006 fa88 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    28f8:	a804      	add	r0, sp, #16
    28fa:	f006 fa05 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    28fe:	4669      	mov	r1, sp
    2900:	a804      	add	r0, sp, #16
    2902:	f006 f9cd 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_b ? "B" : "-");
    2906:	782b      	ldrb	r3, [r5, #0]
    2908:	4926      	ldr	r1, [pc, #152]	; (29a4 <flag_status()+0x158>)
    290a:	a804      	add	r0, sp, #16
    290c:	f013 0f10 	tst.w	r3, #16
    2910:	bf08      	it	eq
    2912:	4621      	moveq	r1, r4
    2914:	f006 fb00 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    2918:	4601      	mov	r1, r0
    291a:	4668      	mov	r0, sp
    291c:	f006 fa74 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    2920:	a804      	add	r0, sp, #16
    2922:	f006 f9f1 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    2926:	4669      	mov	r1, sp
    2928:	a804      	add	r0, sp, #16
    292a:	f006 f9b9 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_v ? "V" : "-");
    292e:	782b      	ldrb	r3, [r5, #0]
    2930:	491d      	ldr	r1, [pc, #116]	; (29a8 <flag_status()+0x15c>)
    2932:	a804      	add	r0, sp, #16
    2934:	f013 0f40 	tst.w	r3, #64	; 0x40
    2938:	bf08      	it	eq
    293a:	4621      	moveq	r1, r4
    293c:	f006 faec 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    2940:	4601      	mov	r1, r0
    2942:	4668      	mov	r0, sp
    2944:	f006 fa60 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    2948:	a804      	add	r0, sp, #16
    294a:	f006 f9dd 	bl	8d08 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    294e:	4669      	mov	r1, sp
    2950:	a804      	add	r0, sp, #16
    2952:	f006 f9a5 	bl	8ca0 <String::String(String const&)>
    s = s + (flag_n ? "N" : "-");
    2956:	4b15      	ldr	r3, [pc, #84]	; (29ac <flag_status()+0x160>)
    2958:	f995 1000 	ldrsb.w	r1, [r5]
    295c:	a804      	add	r0, sp, #16
    295e:	ea13 0121 	ands.w	r1, r3, r1, asr #32
    2962:	bf38      	it	cc
    2964:	4621      	movcc	r1, r4
    2966:	f006 fad7 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    296a:	4601      	mov	r1, r0
    296c:	4668      	mov	r0, sp
    296e:	f006 fa4b 	bl	8e08 <String::operator=(String const&)>
class StringSumHelper : public String
    2972:	a804      	add	r0, sp, #16
    2974:	f006 f9c8 	bl	8d08 <String::~String()>
    return(s);
    2978:	4669      	mov	r1, sp
    297a:	4630      	mov	r0, r6
    297c:	f006 f9ae 	bl	8cdc <String::String(String&&)>
}
    2980:	4668      	mov	r0, sp
    2982:	f006 f9c1 	bl	8d08 <String::~String()>
    2986:	4630      	mov	r0, r6
    2988:	b008      	add	sp, #32
    298a:	bd70      	pop	{r4, r5, r6, pc}
    298c:	20004a08 	.word	0x20004a08
    2990:	20000370 	.word	0x20000370
    2994:	20000980 	.word	0x20000980
    2998:	20000374 	.word	0x20000374
    299c:	200009c8 	.word	0x200009c8
    29a0:	20000a54 	.word	0x20000a54
    29a4:	20000954 	.word	0x20000954
    29a8:	20000a30 	.word	0x20000a30
    29ac:	20000378 	.word	0x20000378

000029b0 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    29b0:	4b21      	ldr	r3, [pc, #132]	; (2a38 <sample_at_CLK_rising_edge()+0x88>)
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	b103      	cbz	r3, 29b8 <sample_at_CLK_rising_edge()+0x8>
    29b6:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    29b8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    29bc:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    29be:	6813      	ldr	r3, [r2, #0]
    29c0:	04db      	lsls	r3, r3, #19
    29c2:	d4fc      	bmi.n	29be <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    29c4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    29c8:	6813      	ldr	r3, [r2, #0]
    29ca:	04d8      	lsls	r0, r3, #19
    29cc:	d5fc      	bpl.n	29c8 <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    29ce:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    29d2:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    29d4:	04d9      	lsls	r1, r3, #19
    29d6:	d5fc      	bpl.n	29d2 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    29d8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    29dc:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    29de:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    29e0:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    29e4:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    29e8:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    29ea:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    29ee:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    29f2:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    29f6:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    29fa:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    29fe:	0cd8      	lsrs	r0, r3, #19
    2a00:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2a04:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2a06:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2a0a:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2a0e:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2a10:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2a14:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2a18:	4302      	orrs	r2, r0
    2a1a:	4808      	ldr	r0, [pc, #32]	; (2a3c <sample_at_CLK_rising_edge()+0x8c>)
    2a1c:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2a1e:	4a08      	ldr	r2, [pc, #32]	; (2a40 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2a20:	4808      	ldr	r0, [pc, #32]	; (2a44 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2a22:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2a26:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2a28:	4a07      	ldr	r2, [pc, #28]	; (2a48 <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2a2a:	4b08      	ldr	r3, [pc, #32]	; (2a4c <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2a2c:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2a30:	7019      	strb	r1, [r3, #0]
}
    2a32:	f85d fb04 	ldr.w	pc, [sp], #4
    2a36:	bf00      	nop
    2a38:	20004a06 	.word	0x20004a06
    2a3c:	2001889e 	.word	0x2001889e
    2a40:	2001889f 	.word	0x2001889f
    2a44:	200188a1 	.word	0x200188a1
    2a48:	200188a2 	.word	0x200188a2
    2a4c:	200188a0 	.word	0x200188a0

00002a50 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a50:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    2a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2a58:	d33c      	bcc.n	2ad4 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2a5a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2a62:	d355      	bcc.n	2b10 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2a64:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    2a68:	b294      	uxth	r4, r2
    2a6a:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    2a6e:	d331      	bcc.n	2ad4 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a70:	2900      	cmp	r1, #0
    2a72:	f000 8118 	beq.w	2ca6 <read_byte(unsigned short, bool)+0x256>
    2a76:	4cb3      	ldr	r4, [pc, #716]	; (2d44 <read_byte(unsigned short, bool)+0x2f4>)
    2a78:	f894 8000 	ldrb.w	r8, [r4]
    2a7c:	f1b8 0f01 	cmp.w	r8, #1
    2a80:	f040 814f 	bne.w	2d22 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    2a84:	4ab0      	ldr	r2, [pc, #704]	; (2d48 <read_byte(unsigned short, bool)+0x2f8>)
    2a86:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2a8a:	2100      	movs	r1, #0
    current_address = local_address;
    2a8c:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2a92:	d311      	bcc.n	2ab8 <read_byte(unsigned short, bool)+0x68>
    2a94:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2a98:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    2a9c:	f0c0 8135 	bcc.w	2d0a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    2aa0:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    2aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2aa8:	f0c0 812f 	bcc.w	2d0a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2aac:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    2ab0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    2ab4:	f0c0 8129 	bcc.w	2d0a <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    2ab8:	4ba4      	ldr	r3, [pc, #656]	; (2d4c <read_byte(unsigned short, bool)+0x2fc>)
    2aba:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2abc:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    2ac0:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2ac2:	d02f      	beq.n	2b24 <read_byte(unsigned short, bool)+0xd4>
    2ac4:	b371      	cbz	r1, 2b24 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    2ac6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2aca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    2ad2:	e027      	b.n	2b24 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2ad4:	4b9e      	ldr	r3, [pc, #632]	; (2d50 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    2ad6:	781a      	ldrb	r2, [r3, #0]
    2ad8:	2a01      	cmp	r2, #1
    2ada:	d906      	bls.n	2aea <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    2adc:	4a9b      	ldr	r2, [pc, #620]	; (2d4c <read_byte(unsigned short, bool)+0x2fc>)
    2ade:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2ae0:	4b9c      	ldr	r3, [pc, #624]	; (2d54 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2ae2:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2ae4:	5c18      	ldrb	r0, [r3, r0]
}
    2ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2aea:	4a96      	ldr	r2, [pc, #600]	; (2d44 <read_byte(unsigned short, bool)+0x2f4>)
    2aec:	f892 8000 	ldrb.w	r8, [r2]
    2af0:	2900      	cmp	r1, #0
    2af2:	f040 80de 	bne.w	2cb2 <read_byte(unsigned short, bool)+0x262>
    2af6:	2100      	movs	r1, #0
    current_address = local_address;
    2af8:	4a93      	ldr	r2, [pc, #588]	; (2d48 <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2afa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    2afe:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2b00:	f080 811d 	bcs.w	2d3e <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2b04:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    2b06:	2b01      	cmp	r3, #1
    2b08:	d9d6      	bls.n	2ab8 <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    2b0a:	4b93      	ldr	r3, [pc, #588]	; (2d58 <read_byte(unsigned short, bool)+0x308>)
    2b0c:	781c      	ldrb	r4, [r3, #0]
    2b0e:	e06c      	b.n	2bea <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2b10:	2900      	cmp	r1, #0
    2b12:	f040 813d 	bne.w	2d90 <read_byte(unsigned short, bool)+0x340>
    2b16:	4b8b      	ldr	r3, [pc, #556]	; (2d44 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2b18:	4c8b      	ldr	r4, [pc, #556]	; (2d48 <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    2b1a:	4a8c      	ldr	r2, [pc, #560]	; (2d4c <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2b1c:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2b20:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2b22:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2b24:	4b8c      	ldr	r3, [pc, #560]	; (2d58 <read_byte(unsigned short, bool)+0x308>)
    2b26:	781c      	ldrb	r4, [r3, #0]
    2b28:	b94c      	cbnz	r4, 2b3e <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2b2a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2b2e:	6813      	ldr	r3, [r2, #0]
    2b30:	04de      	lsls	r6, r3, #19
    2b32:	d4fc      	bmi.n	2b2e <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2b34:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2b38:	6813      	ldr	r3, [r2, #0]
    2b3a:	04dd      	lsls	r5, r3, #19
    2b3c:	d5fc      	bpl.n	2b38 <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    2b3e:	4e87      	ldr	r6, [pc, #540]	; (2d5c <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b40:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2b44:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2b46:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2b48:	0a85      	lsrs	r5, r0, #10
    2b4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2b4e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b52:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2b56:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b5a:	4b81      	ldr	r3, [pc, #516]	; (2d60 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2b5c:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b60:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2b62:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2b64:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2b68:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2b6a:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2b6c:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2b6e:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2b72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2b76:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2b7a:	433b      	orrs	r3, r7
    2b7c:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2b80:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b82:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b84:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    2b8c:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2b8e:	4b75      	ldr	r3, [pc, #468]	; (2d64 <read_byte(unsigned short, bool)+0x314>)
    2b90:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b92:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2b94:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2b96:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2b98:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2b9c:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    2ba4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2ba6:	0342      	lsls	r2, r0, #13
    2ba8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    2bac:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2bae:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2bb0:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2bb8:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2bba:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2bbc:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2bc0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    2bc4:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2bc6:	f8dc 2000 	ldr.w	r2, [ip]
    2bca:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2bce:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2bd0:	4a65      	ldr	r2, [pc, #404]	; (2d68 <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2bd2:	433b      	orrs	r3, r7
    2bd4:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2bd8:	0903      	lsrs	r3, r0, #4
    2bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2bde:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2be0:	6835      	ldr	r5, [r6, #0]
    2be2:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2be4:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2be6:	430b      	orrs	r3, r1
    2be8:	6033      	str	r3, [r6, #0]
    return;
    2bea:	4d60      	ldr	r5, [pc, #384]	; (2d6c <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2bec:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2bf0:	f8df e184 	ldr.w	lr, [pc, #388]	; 2d78 <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2bf4:	f8df c188 	ldr.w	ip, [pc, #392]	; 2d80 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2bf8:	4f5d      	ldr	r7, [pc, #372]	; (2d70 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2bfa:	4e5e      	ldr	r6, [pc, #376]	; (2d74 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    2bfc:	b1d4      	cbz	r4, 2c34 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    2bfe:	782b      	ldrb	r3, [r5, #0]
    2c00:	2b01      	cmp	r3, #1
    2c02:	d0fb      	beq.n	2bfc <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2c04:	f1b8 0f01 	cmp.w	r8, #1
    2c08:	d005      	beq.n	2c16 <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    2c0a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    2c0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    2c16:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    2c1a:	d05d      	beq.n	2cd8 <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2c1c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2c20:	d352      	bcc.n	2cc8 <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2c22:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2c2a:	d247      	bcs.n	2cbc <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    2c2c:	4b49      	ldr	r3, [pc, #292]	; (2d54 <read_byte(unsigned short, bool)+0x304>)
    2c2e:	5c18      	ldrb	r0, [r3, r0]
}
    2c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2c34:	6813      	ldr	r3, [r2, #0]
    2c36:	04d9      	lsls	r1, r3, #19
    2c38:	d4fc      	bmi.n	2c34 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    2c3a:	6813      	ldr	r3, [r2, #0]
    2c3c:	04db      	lsls	r3, r3, #19
    2c3e:	d5fc      	bpl.n	2c3a <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2c40:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2c42:	04d9      	lsls	r1, r3, #19
    2c44:	d5fc      	bpl.n	2c40 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2c46:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2c4a:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2c4c:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2c50:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2c54:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2c58:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c5c:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2c60:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2c64:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2c68:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c6c:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2c70:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2c72:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2c76:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2c7a:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2c7e:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2c82:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c86:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2c8a:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2c8e:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2c92:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c96:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2c9a:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2c9c:	ea41 010a 	orr.w	r1, r1, sl
    2ca0:	f88e 1000 	strb.w	r1, [lr]
    return;
    2ca4:	e7ac      	b.n	2c00 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    2ca6:	4c28      	ldr	r4, [pc, #160]	; (2d48 <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2ca8:	4b26      	ldr	r3, [pc, #152]	; (2d44 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2caa:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2cac:	f893 8000 	ldrb.w	r8, [r3]
    2cb0:	e6f2      	b.n	2a98 <read_byte(unsigned short, bool)+0x48>
    2cb2:	f1b8 0f01 	cmp.w	r8, #1
    2cb6:	f47f af1f 	bne.w	2af8 <read_byte(unsigned short, bool)+0xa8>
    2cba:	e71c      	b.n	2af6 <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2cbc:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2cc0:	b29b      	uxth	r3, r3
    2cc2:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2cc6:	d203      	bcs.n	2cd0 <read_byte(unsigned short, bool)+0x280>
    2cc8:	4b21      	ldr	r3, [pc, #132]	; (2d50 <read_byte(unsigned short, bool)+0x300>)
    2cca:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d1ad      	bne.n	2c2c <read_byte(unsigned short, bool)+0x1dc>
    2cd0:	4b29      	ldr	r3, [pc, #164]	; (2d78 <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    2cd2:	7818      	ldrb	r0, [r3, #0]
}
    2cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2cd8:	4928      	ldr	r1, [pc, #160]	; (2d7c <read_byte(unsigned short, bool)+0x32c>)
    2cda:	4b27      	ldr	r3, [pc, #156]	; (2d78 <read_byte(unsigned short, bool)+0x328>)
    2cdc:	780a      	ldrb	r2, [r1, #0]
    2cde:	b9b2      	cbnz	r2, 2d0e <read_byte(unsigned short, bool)+0x2be>
    2ce0:	781a      	ldrb	r2, [r3, #0]
    2ce2:	2a88      	cmp	r2, #136	; 0x88
    2ce4:	d1f5      	bne.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    2ce6:	2201      	movs	r2, #1
    2ce8:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    2cea:	780a      	ldrb	r2, [r1, #0]
    2cec:	2a03      	cmp	r2, #3
    2cee:	d1f0      	bne.n	2cd2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2cf0:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2cf2:	28b0      	cmp	r0, #176	; 0xb0
    2cf4:	d018      	beq.n	2d28 <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    2cf6:	28b1      	cmp	r0, #177	; 0xb1
    2cf8:	d044      	beq.n	2d84 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    2cfa:	28b2      	cmp	r0, #178	; 0xb2
    2cfc:	d155      	bne.n	2daa <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    2cfe:	4814      	ldr	r0, [pc, #80]	; (2d50 <read_byte(unsigned short, bool)+0x300>)
    2d00:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2d02:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2d04:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2d06:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2d08:	e7e3      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2d0a:	4b11      	ldr	r3, [pc, #68]	; (2d50 <read_byte(unsigned short, bool)+0x300>)
    2d0c:	e6fa      	b.n	2b04 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2d0e:	2a01      	cmp	r2, #1
    2d10:	d00f      	beq.n	2d32 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2d12:	2a02      	cmp	r2, #2
    2d14:	d1ea      	bne.n	2cec <read_byte(unsigned short, bool)+0x29c>
    2d16:	781a      	ldrb	r2, [r3, #0]
    2d18:	2a88      	cmp	r2, #136	; 0x88
    2d1a:	d1da      	bne.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    2d1c:	2203      	movs	r2, #3
    2d1e:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2d20:	e7d7      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2d22:	4b09      	ldr	r3, [pc, #36]	; (2d48 <read_byte(unsigned short, bool)+0x2f8>)
    2d24:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2d26:	e6b7      	b.n	2a98 <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    2d28:	2200      	movs	r2, #0
    2d2a:	4809      	ldr	r0, [pc, #36]	; (2d50 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    2d2c:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    2d2e:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2d30:	e7cf      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2d32:	781a      	ldrb	r2, [r3, #0]
    2d34:	2a95      	cmp	r2, #149	; 0x95
    2d36:	d1d8      	bne.n	2cea <read_byte(unsigned short, bool)+0x29a>
    2d38:	2202      	movs	r2, #2
    2d3a:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2d3c:	e7c9      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    2d3e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2d42:	e6a4      	b.n	2a8e <read_byte(unsigned short, bool)+0x3e>
    2d44:	200188ac 	.word	0x200188ac
    2d48:	20018888 	.word	0x20018888
    2d4c:	200188a5 	.word	0x200188a5
    2d50:	2001889c 	.word	0x2001889c
    2d54:	200053f0 	.word	0x200053f0
    2d58:	20004a06 	.word	0x20004a06
    2d5c:	42004000 	.word	0x42004000
    2d60:	6dfffff3 	.word	0x6dfffff3
    2d64:	cff3efff 	.word	0xcff3efff
    2d68:	7fffff6f 	.word	0x7fffff6f
    2d6c:	200188a1 	.word	0x200188a1
    2d70:	200188a2 	.word	0x200188a2
    2d74:	200188a0 	.word	0x200188a0
    2d78:	2001889e 	.word	0x2001889e
    2d7c:	200188ad 	.word	0x200188ad
    2d80:	2001889f 	.word	0x2001889f
                    addr_mode = Read_Internal_Write_External;
    2d84:	480c      	ldr	r0, [pc, #48]	; (2db8 <read_byte(unsigned short, bool)+0x368>)
    2d86:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    2d88:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    2d8a:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2d8c:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2d8e:	e7a0      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2d90:	4a0a      	ldr	r2, [pc, #40]	; (2dbc <read_byte(unsigned short, bool)+0x36c>)
    2d92:	f892 8000 	ldrb.w	r8, [r2]
    2d96:	f1b8 0f01 	cmp.w	r8, #1
    2d9a:	f43f ae73 	beq.w	2a84 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    2d9e:	4908      	ldr	r1, [pc, #32]	; (2dc0 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    2da0:	2200      	movs	r2, #0
    2da2:	4b08      	ldr	r3, [pc, #32]	; (2dc4 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    2da4:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    2da6:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    2da8:	e68d      	b.n	2ac6 <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    2daa:	28b3      	cmp	r0, #179	; 0xb3
    2dac:	d191      	bne.n	2cd2 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    2dae:	4c02      	ldr	r4, [pc, #8]	; (2db8 <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    2db0:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    2db2:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    2db4:	7008      	strb	r0, [r1, #0]
    2db6:	e78c      	b.n	2cd2 <read_byte(unsigned short, bool)+0x282>
    2db8:	2001889c 	.word	0x2001889c
    2dbc:	200188ac 	.word	0x200188ac
    2dc0:	20018888 	.word	0x20018888
    2dc4:	200188a5 	.word	0x200188a5

00002dc8 <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2dc8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    2dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    2dce:	d201      	bcs.n	2dd4 <write_byte(unsigned short, unsigned char)+0xc>
    2dd0:	4b77      	ldr	r3, [pc, #476]	; (2fb0 <write_byte(unsigned short, unsigned char)+0x1e8>)
    2dd2:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2dd4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2dd8:	f0c0 80ad 	bcc.w	2f36 <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2ddc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2de4:	d306      	bcc.n	2df4 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2de6:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2dea:	b29b      	uxth	r3, r3
    2dec:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2df0:	f0c0 80a1 	bcc.w	2f36 <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2df4:	4b6f      	ldr	r3, [pc, #444]	; (2fb4 <write_byte(unsigned short, unsigned char)+0x1ec>)
    2df6:	781b      	ldrb	r3, [r3, #0]
    2df8:	b94b      	cbnz	r3, 2e0e <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2dfa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2dfe:	6813      	ldr	r3, [r2, #0]
    2e00:	04df      	lsls	r7, r3, #19
    2e02:	d4fc      	bmi.n	2dfe <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2e04:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2e08:	6813      	ldr	r3, [r2, #0]
    2e0a:	04de      	lsls	r6, r3, #19
    2e0c:	d5fc      	bpl.n	2e08 <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2e0e:	4c6a      	ldr	r4, [pc, #424]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e10:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2e14:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2e16:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2e1a:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2e1e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2e22:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e26:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2e28:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e2c:	4b63      	ldr	r3, [pc, #396]	; (2fbc <write_byte(unsigned short, unsigned char)+0x1f4>)
    2e2e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2e30:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2e32:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2e36:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2e3a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2e3c:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2e3e:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2e40:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2e44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2e48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2e4c:	432b      	orrs	r3, r5
    2e4e:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2e50:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e52:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2e54:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2e5a:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2e5e:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2e62:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e64:	4a56      	ldr	r2, [pc, #344]	; (2fc0 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2e66:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e68:	4d56      	ldr	r5, [pc, #344]	; (2fc4 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2e6a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2e6c:	0542      	lsls	r2, r0, #21
    2e6e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2e72:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2e74:	0343      	lsls	r3, r0, #13
    2e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2e7a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2e7c:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2e7e:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e80:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2e82:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2e86:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2e88:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e8a:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e92:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e94:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2e96:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2e9a:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2e9e:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ea0:	4849      	ldr	r0, [pc, #292]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2ea2:	4332      	orrs	r2, r6
    2ea4:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ea6:	4a49      	ldr	r2, [pc, #292]	; (2fcc <write_byte(unsigned short, unsigned char)+0x204>)
    2ea8:	6805      	ldr	r5, [r0, #0]
    2eaa:	402a      	ands	r2, r5
		if (val) {
    2eac:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2eae:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2eb2:	ea43 030c 	orr.w	r3, r3, ip
    2eb6:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2eb8:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2ebc:	d444      	bmi.n	2f48 <write_byte(unsigned short, unsigned char)+0x180>
    2ebe:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2ec0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2ec4:	f04f 0201 	mov.w	r2, #1
    2ec8:	4b3b      	ldr	r3, [pc, #236]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2eca:	d544      	bpl.n	2f56 <write_byte(unsigned short, unsigned char)+0x18e>
    2ecc:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2ed2:	4b39      	ldr	r3, [pc, #228]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2ed8:	d544      	bpl.n	2f64 <write_byte(unsigned short, unsigned char)+0x19c>
    2eda:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2ee0:	4b35      	ldr	r3, [pc, #212]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2ee6:	d544      	bpl.n	2f72 <write_byte(unsigned short, unsigned char)+0x1aa>
    2ee8:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2eee:	4b32      	ldr	r3, [pc, #200]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2ef4:	d544      	bpl.n	2f80 <write_byte(unsigned short, unsigned char)+0x1b8>
    2ef6:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2efc:	4b2e      	ldr	r3, [pc, #184]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2f02:	d544      	bpl.n	2f8e <write_byte(unsigned short, unsigned char)+0x1c6>
    2f04:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2f0a:	4b2f      	ldr	r3, [pc, #188]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    2f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2f10:	d544      	bpl.n	2f9c <write_byte(unsigned short, unsigned char)+0x1d4>
    2f12:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2f18:	4b2b      	ldr	r3, [pc, #172]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    2f1a:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2f1e:	d044      	beq.n	2faa <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2f24:	4c28      	ldr	r4, [pc, #160]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    2f26:	2520      	movs	r5, #32
    2f28:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2f2c:	f7ff fd40 	bl	29b0 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2f30:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2f36:	4b26      	ldr	r3, [pc, #152]	; (2fd0 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2f38:	781b      	ldrb	r3, [r3, #0]
    2f3a:	2b02      	cmp	r3, #2
    2f3c:	f67f af5a 	bls.w	2df4 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2f40:	4b24      	ldr	r3, [pc, #144]	; (2fd4 <write_byte(unsigned short, unsigned char)+0x20c>)
    2f42:	2201      	movs	r2, #1
    2f44:	701a      	strb	r2, [r3, #0]
}
    2f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2f48:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2f4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2f4e:	f04f 0201 	mov.w	r2, #1
    2f52:	4b19      	ldr	r3, [pc, #100]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2f54:	d4ba      	bmi.n	2ecc <write_byte(unsigned short, unsigned char)+0x104>
    2f56:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2f5c:	4b16      	ldr	r3, [pc, #88]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2f62:	d4ba      	bmi.n	2eda <write_byte(unsigned short, unsigned char)+0x112>
    2f64:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2f6a:	4b13      	ldr	r3, [pc, #76]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2f6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2f70:	d4ba      	bmi.n	2ee8 <write_byte(unsigned short, unsigned char)+0x120>
    2f72:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2f78:	4b0f      	ldr	r3, [pc, #60]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2f7e:	d4ba      	bmi.n	2ef6 <write_byte(unsigned short, unsigned char)+0x12e>
    2f80:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2f86:	4b0c      	ldr	r3, [pc, #48]	; (2fb8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2f8c:	d4ba      	bmi.n	2f04 <write_byte(unsigned short, unsigned char)+0x13c>
    2f8e:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2f94:	4b0c      	ldr	r3, [pc, #48]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    2f96:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2f9a:	d4ba      	bmi.n	2f12 <write_byte(unsigned short, unsigned char)+0x14a>
    2f9c:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2fa2:	4b09      	ldr	r3, [pc, #36]	; (2fc8 <write_byte(unsigned short, unsigned char)+0x200>)
    2fa4:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2fa8:	d1ba      	bne.n	2f20 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2fae:	e7b9      	b.n	2f24 <write_byte(unsigned short, unsigned char)+0x15c>
    2fb0:	200053f0 	.word	0x200053f0
    2fb4:	20004a06 	.word	0x20004a06
    2fb8:	42004000 	.word	0x42004000
    2fbc:	6dfffff3 	.word	0x6dfffff3
    2fc0:	cff3efff 	.word	0xcff3efff
    2fc4:	42008000 	.word	0x42008000
    2fc8:	4200c000 	.word	0x4200c000
    2fcc:	7fffff6f 	.word	0x7fffff6f
    2fd0:	2001889c 	.word	0x2001889c
    2fd4:	200188a5 	.word	0x200188a5

00002fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2fd8:	4a08      	ldr	r2, [pc, #32]	; (2ffc <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2fda:	0601      	lsls	r1, r0, #24
    2fdc:	7813      	ldrb	r3, [r2, #0]
    2fde:	d407      	bmi.n	2ff0 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2fe4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2fe6:	b928      	cbnz	r0, 2ff4 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2fe8:	f043 0302 	orr.w	r3, r3, #2
    return;
    2fec:	7013      	strb	r3, [r2, #0]
}
    2fee:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2ff4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2ff8:	7013      	strb	r3, [r2, #0]
}
    2ffa:	4770      	bx	lr
    2ffc:	20004a08 	.word	0x20004a08

00003000 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    3000:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    3002:	4b04      	ldr	r3, [pc, #16]	; (3014 <Fetch_Immediate(unsigned char)+0x14>)
    3004:	2100      	movs	r1, #0
    3006:	881b      	ldrh	r3, [r3, #0]
    3008:	4418      	add	r0, r3
    300a:	b280      	uxth	r0, r0
    300c:	f7ff fd20 	bl	2a50 <read_byte(unsigned short, bool)>
}
    3010:	bd08      	pop	{r3, pc}
    3012:	bf00      	nop
    3014:	2001888c 	.word	0x2001888c

00003018 <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    3018:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    301a:	4b07      	ldr	r3, [pc, #28]	; (3038 <Fetch_ZeroPage()+0x20>)
    301c:	2100      	movs	r1, #0
    301e:	8818      	ldrh	r0, [r3, #0]
    3020:	3001      	adds	r0, #1
    3022:	b280      	uxth	r0, r0
    3024:	f7ff fd14 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3028:	4b04      	ldr	r3, [pc, #16]	; (303c <Fetch_ZeroPage()+0x24>)
    302a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    302c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    302e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3030:	f7ff fd0e 	bl	2a50 <read_byte(unsigned short, bool)>
}
    3034:	bd08      	pop	{r3, pc}
    3036:	bf00      	nop
    3038:	2001888c 	.word	0x2001888c
    303c:	2001888a 	.word	0x2001888a

00003040 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    3040:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3042:	4c0c      	ldr	r4, [pc, #48]	; (3074 <Fetch_ZeroPage_X()+0x34>)
    3044:	2100      	movs	r1, #0
    3046:	8820      	ldrh	r0, [r4, #0]
    3048:	3001      	adds	r0, #1
    304a:	b280      	uxth	r0, r0
    304c:	f7ff fd00 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    3050:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    3052:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    3054:	2100      	movs	r1, #0
    3056:	1c58      	adds	r0, r3, #1
    3058:	b280      	uxth	r0, r0
    305a:	f7ff fcf9 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    305e:	4a06      	ldr	r2, [pc, #24]	; (3078 <Fetch_ZeroPage_X()+0x38>)
    3060:	4b06      	ldr	r3, [pc, #24]	; (307c <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    3062:	2100      	movs	r1, #0
    3064:	7812      	ldrb	r2, [r2, #0]
    3066:	18a0      	adds	r0, r4, r2
    3068:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    306a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    306c:	f7ff fcf0 	bl	2a50 <read_byte(unsigned short, bool)>
}
    3070:	bd10      	pop	{r4, pc}
    3072:	bf00      	nop
    3074:	2001888c 	.word	0x2001888c
    3078:	200188a9 	.word	0x200188a9
    307c:	2001888a 	.word	0x2001888a

00003080 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    3080:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3082:	4c0c      	ldr	r4, [pc, #48]	; (30b4 <Fetch_ZeroPage_Y()+0x34>)
    3084:	2100      	movs	r1, #0
    3086:	8820      	ldrh	r0, [r4, #0]
    3088:	3001      	adds	r0, #1
    308a:	b280      	uxth	r0, r0
    308c:	f7ff fce0 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    3090:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    3092:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    3094:	2100      	movs	r1, #0
    3096:	1c58      	adds	r0, r3, #1
    3098:	b280      	uxth	r0, r0
    309a:	f7ff fcd9 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    309e:	4a06      	ldr	r2, [pc, #24]	; (30b8 <Fetch_ZeroPage_Y()+0x38>)
    30a0:	4b06      	ldr	r3, [pc, #24]	; (30bc <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    30a2:	2100      	movs	r1, #0
    30a4:	7812      	ldrb	r2, [r2, #0]
    30a6:	18a0      	adds	r0, r4, r2
    30a8:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    30aa:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    30ac:	f7ff fcd0 	bl	2a50 <read_byte(unsigned short, bool)>
}
    30b0:	bd10      	pop	{r4, pc}
    30b2:	bf00      	nop
    30b4:	2001888c 	.word	0x2001888c
    30b8:	200188aa 	.word	0x200188aa
    30bc:	2001888a 	.word	0x2001888a

000030c0 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    30c0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    30c2:	4c0b      	ldr	r4, [pc, #44]	; (30f0 <Fetch_Absolute()+0x30>)
    30c4:	2100      	movs	r1, #0
    30c6:	8820      	ldrh	r0, [r4, #0]
    30c8:	3001      	adds	r0, #1
    30ca:	b280      	uxth	r0, r0
    30cc:	f7ff fcc0 	bl	2a50 <read_byte(unsigned short, bool)>
    30d0:	8823      	ldrh	r3, [r4, #0]
    30d2:	4604      	mov	r4, r0
    30d4:	2100      	movs	r1, #0
    30d6:	1c98      	adds	r0, r3, #2
    30d8:	b280      	uxth	r0, r0
    30da:	f7ff fcb9 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    30de:	4b05      	ldr	r3, [pc, #20]	; (30f4 <Fetch_Absolute()+0x34>)
    30e0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    30e4:	2100      	movs	r1, #0
    effective_address = adl + adh;
    30e6:	b280      	uxth	r0, r0
    30e8:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    30ea:	f7ff fcb1 	bl	2a50 <read_byte(unsigned short, bool)>
}
    30ee:	bd10      	pop	{r4, pc}
    30f0:	2001888c 	.word	0x2001888c
    30f4:	2001888a 	.word	0x2001888a

000030f8 <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    30fa:	4c14      	ldr	r4, [pc, #80]	; (314c <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    30fc:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    30fe:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    3100:	4d13      	ldr	r5, [pc, #76]	; (3150 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    3102:	8823      	ldrh	r3, [r4, #0]
    3104:	1c58      	adds	r0, r3, #1
    3106:	b280      	uxth	r0, r0
    3108:	f7ff fca2 	bl	2a50 <read_byte(unsigned short, bool)>
    310c:	8823      	ldrh	r3, [r4, #0]
    310e:	4607      	mov	r7, r0
    3110:	2100      	movs	r1, #0
    3112:	1c98      	adds	r0, r3, #2
    3114:	b280      	uxth	r0, r0
    3116:	f7ff fc9b 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    311a:	4b0e      	ldr	r3, [pc, #56]	; (3154 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    311c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    311e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    3120:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    3122:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    3124:	443b      	add	r3, r7
    3126:	4423      	add	r3, r4
    3128:	b298      	uxth	r0, r3
    312a:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    312c:	f7ff fc90 	bl	2a50 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3130:	2e01      	cmp	r6, #1
    3132:	d000      	beq.n	3136 <Fetch_Absolute_X(unsigned char)+0x3e>
}
    3134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3136:	882b      	ldrh	r3, [r5, #0]
    3138:	405c      	eors	r4, r3
    313a:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    313e:	d0f9      	beq.n	3134 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    3140:	2100      	movs	r1, #0
    3142:	4618      	mov	r0, r3
    3144:	f7ff fc84 	bl	2a50 <read_byte(unsigned short, bool)>
}
    3148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    314a:	bf00      	nop
    314c:	2001888c 	.word	0x2001888c
    3150:	2001888a 	.word	0x2001888a
    3154:	200188a9 	.word	0x200188a9

00003158 <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    3158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    315a:	4c14      	ldr	r4, [pc, #80]	; (31ac <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    315c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    315e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3160:	4d13      	ldr	r5, [pc, #76]	; (31b0 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    3162:	8823      	ldrh	r3, [r4, #0]
    3164:	1c58      	adds	r0, r3, #1
    3166:	b280      	uxth	r0, r0
    3168:	f7ff fc72 	bl	2a50 <read_byte(unsigned short, bool)>
    316c:	8823      	ldrh	r3, [r4, #0]
    316e:	4607      	mov	r7, r0
    3170:	2100      	movs	r1, #0
    3172:	1c98      	adds	r0, r3, #2
    3174:	b280      	uxth	r0, r0
    3176:	f7ff fc6b 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    317a:	4b0e      	ldr	r3, [pc, #56]	; (31b4 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    317c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    317e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3180:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    3182:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    3184:	443b      	add	r3, r7
    3186:	4423      	add	r3, r4
    3188:	b298      	uxth	r0, r3
    318a:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    318c:	f7ff fc60 	bl	2a50 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3190:	2e01      	cmp	r6, #1
    3192:	d000      	beq.n	3196 <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    3194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3196:	882b      	ldrh	r3, [r5, #0]
    3198:	405c      	eors	r4, r3
    319a:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    319e:	d0f9      	beq.n	3194 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    31a0:	2100      	movs	r1, #0
    31a2:	4618      	mov	r0, r3
    31a4:	f7ff fc54 	bl	2a50 <read_byte(unsigned short, bool)>
}
    31a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31aa:	bf00      	nop
    31ac:	2001888c 	.word	0x2001888c
    31b0:	2001888a 	.word	0x2001888a
    31b4:	200188aa 	.word	0x200188aa

000031b8 <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    31b8:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    31ba:	4b11      	ldr	r3, [pc, #68]	; (3200 <Fetch_Indexed_Indirect_X()+0x48>)
    31bc:	2100      	movs	r1, #0
    31be:	8818      	ldrh	r0, [r3, #0]
    31c0:	3001      	adds	r0, #1
    31c2:	b280      	uxth	r0, r0
    31c4:	f7ff fc44 	bl	2a50 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    31c8:	4b0e      	ldr	r3, [pc, #56]	; (3204 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    31ca:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    31cc:	781c      	ldrb	r4, [r3, #0]
    31ce:	4404      	add	r4, r0
    31d0:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    31d2:	4620      	mov	r0, r4
    31d4:	f7ff fc3c 	bl	2a50 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    31d8:	2100      	movs	r1, #0
    31da:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    31dc:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    31de:	f7ff fc37 	bl	2a50 <read_byte(unsigned short, bool)>
    31e2:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    31e4:	2100      	movs	r1, #0
    31e6:	b2e0      	uxtb	r0, r4
    31e8:	f7ff fc32 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    31ec:	4b06      	ldr	r3, [pc, #24]	; (3208 <Fetch_Indexed_Indirect_X()+0x50>)
    31ee:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    31f2:	2100      	movs	r1, #0
    effective_address = adh + adl;
    31f4:	b280      	uxth	r0, r0
    31f6:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    31f8:	f7ff fc2a 	bl	2a50 <read_byte(unsigned short, bool)>
}
    31fc:	bd38      	pop	{r3, r4, r5, pc}
    31fe:	bf00      	nop
    3200:	2001888c 	.word	0x2001888c
    3204:	200188a9 	.word	0x200188a9
    3208:	2001888a 	.word	0x2001888a

0000320c <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    320e:	4b16      	ldr	r3, [pc, #88]	; (3268 <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    3210:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    3212:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3214:	4e15      	ldr	r6, [pc, #84]	; (326c <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    3216:	881b      	ldrh	r3, [r3, #0]
    3218:	1c58      	adds	r0, r3, #1
    321a:	b280      	uxth	r0, r0
    321c:	f7ff fc18 	bl	2a50 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    3220:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    3222:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    3224:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3226:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    3228:	f7ff fc12 	bl	2a50 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    322c:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    322e:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3230:	b2e0      	uxtb	r0, r4
    3232:	f7ff fc0d 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    3236:	4b0e      	ldr	r3, [pc, #56]	; (3270 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    3238:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    323a:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    323c:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    323e:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    3240:	443b      	add	r3, r7
    3242:	4423      	add	r3, r4
    3244:	b298      	uxth	r0, r3
    3246:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    3248:	f7ff fc02 	bl	2a50 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    324c:	2d01      	cmp	r5, #1
    324e:	d000      	beq.n	3252 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    3250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    3252:	8833      	ldrh	r3, [r6, #0]
    3254:	405c      	eors	r4, r3
    3256:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    325a:	d0f9      	beq.n	3250 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    325c:	2100      	movs	r1, #0
    325e:	4618      	mov	r0, r3
    3260:	f7ff fbf6 	bl	2a50 <read_byte(unsigned short, bool)>
}
    3264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3266:	bf00      	nop
    3268:	2001888c 	.word	0x2001888c
    326c:	2001888a 	.word	0x2001888a
    3270:	200188aa 	.word	0x200188aa

00003274 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    3274:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    3276:	4e0c      	ldr	r6, [pc, #48]	; (32a8 <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    3278:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    327a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    327c:	4c0b      	ldr	r4, [pc, #44]	; (32ac <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    327e:	8833      	ldrh	r3, [r6, #0]
    3280:	1c58      	adds	r0, r3, #1
    3282:	b280      	uxth	r0, r0
    3284:	f7ff fbe4 	bl	2a50 <read_byte(unsigned short, bool)>
    3288:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    328a:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    328c:	2100      	movs	r1, #0
    328e:	1c98      	adds	r0, r3, #2
    3290:	b280      	uxth	r0, r0
    3292:	f7ff fbdd 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    3296:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    3298:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    329a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    329e:	b280      	uxth	r0, r0
    32a0:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    32a2:	f7ff fd91 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    32a6:	bd70      	pop	{r4, r5, r6, pc}
    32a8:	2001888c 	.word	0x2001888c
    32ac:	2001888a 	.word	0x2001888a

000032b0 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    32b0:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    32b2:	4b0b      	ldr	r3, [pc, #44]	; (32e0 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    32b4:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    32b6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    32b8:	4d0a      	ldr	r5, [pc, #40]	; (32e4 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    32ba:	881b      	ldrh	r3, [r3, #0]
    32bc:	1c58      	adds	r0, r3, #1
    32be:	b280      	uxth	r0, r0
    32c0:	f7ff fbc6 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    32c4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    32c6:	b280      	uxth	r0, r0
    32c8:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    32ca:	f7ff fbc1 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    32ce:	4a06      	ldr	r2, [pc, #24]	; (32e8 <Write_ZeroPage_X(unsigned char)+0x38>)
    32d0:	4621      	mov	r1, r4
    32d2:	882b      	ldrh	r3, [r5, #0]
    32d4:	7810      	ldrb	r0, [r2, #0]
    32d6:	4418      	add	r0, r3
    32d8:	b2c0      	uxtb	r0, r0
    32da:	f7ff fd75 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    32de:	bd38      	pop	{r3, r4, r5, pc}
    32e0:	2001888c 	.word	0x2001888c
    32e4:	2001888a 	.word	0x2001888a
    32e8:	200188a9 	.word	0x200188a9

000032ec <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    32ec:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    32ee:	4b0b      	ldr	r3, [pc, #44]	; (331c <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    32f0:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    32f2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    32f4:	4d0a      	ldr	r5, [pc, #40]	; (3320 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    32f6:	881b      	ldrh	r3, [r3, #0]
    32f8:	1c58      	adds	r0, r3, #1
    32fa:	b280      	uxth	r0, r0
    32fc:	f7ff fba8 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    3300:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3302:	b280      	uxth	r0, r0
    3304:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    3306:	f7ff fba3 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    330a:	4a06      	ldr	r2, [pc, #24]	; (3324 <Write_ZeroPage_Y(unsigned char)+0x38>)
    330c:	4621      	mov	r1, r4
    330e:	882b      	ldrh	r3, [r5, #0]
    3310:	7810      	ldrb	r0, [r2, #0]
    3312:	4418      	add	r0, r3
    3314:	b2c0      	uxtb	r0, r0
    3316:	f7ff fd57 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    331a:	bd38      	pop	{r3, r4, r5, pc}
    331c:	2001888c 	.word	0x2001888c
    3320:	2001888a 	.word	0x2001888a
    3324:	200188aa 	.word	0x200188aa

00003328 <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    3328:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    332a:	4d0f      	ldr	r5, [pc, #60]	; (3368 <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    332c:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    332e:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    3330:	4e0e      	ldr	r6, [pc, #56]	; (336c <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    3332:	882b      	ldrh	r3, [r5, #0]
    3334:	1c58      	adds	r0, r3, #1
    3336:	b280      	uxth	r0, r0
    3338:	f7ff fb8a 	bl	2a50 <read_byte(unsigned short, bool)>
    333c:	882b      	ldrh	r3, [r5, #0]
    333e:	4605      	mov	r5, r0
    3340:	2100      	movs	r1, #0
    3342:	1c98      	adds	r0, r3, #2
    3344:	b280      	uxth	r0, r0
    3346:	f7ff fb83 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    334a:	4b09      	ldr	r3, [pc, #36]	; (3370 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    334c:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	442b      	add	r3, r5
    3352:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    3356:	b298      	uxth	r0, r3
    3358:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    335a:	f7ff fb79 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    335e:	4621      	mov	r1, r4
    3360:	8830      	ldrh	r0, [r6, #0]
    3362:	f7ff fd31 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	2001888c 	.word	0x2001888c
    336c:	2001888a 	.word	0x2001888a
    3370:	200188a9 	.word	0x200188a9

00003374 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    3376:	4c16      	ldr	r4, [pc, #88]	; (33d0 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    3378:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    337a:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    337c:	4d15      	ldr	r5, [pc, #84]	; (33d4 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    337e:	8823      	ldrh	r3, [r4, #0]
    3380:	1c58      	adds	r0, r3, #1
    3382:	b280      	uxth	r0, r0
    3384:	f7ff fb64 	bl	2a50 <read_byte(unsigned short, bool)>
    3388:	8823      	ldrh	r3, [r4, #0]
    338a:	4607      	mov	r7, r0
    338c:	2100      	movs	r1, #0
    338e:	1c98      	adds	r0, r3, #2
    3390:	b280      	uxth	r0, r0
    3392:	f7ff fb5d 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    3396:	4b10      	ldr	r3, [pc, #64]	; (33d8 <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    3398:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    339a:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    339c:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    339e:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    33a0:	443b      	add	r3, r7
    33a2:	4423      	add	r3, r4
    33a4:	b298      	uxth	r0, r3
    33a6:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    33a8:	f7ff fb52 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    33ac:	8828      	ldrh	r0, [r5, #0]
    33ae:	4044      	eors	r4, r0
    33b0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    33b4:	d103      	bne.n	33be <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    33b6:	4631      	mov	r1, r6
    33b8:	f7ff fd06 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    33bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    33be:	2100      	movs	r1, #0
    33c0:	f7ff fb46 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    33c4:	8828      	ldrh	r0, [r5, #0]
    33c6:	4631      	mov	r1, r6
    33c8:	f7ff fcfe 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    33cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ce:	bf00      	nop
    33d0:	2001888c 	.word	0x2001888c
    33d4:	2001888a 	.word	0x2001888a
    33d8:	200188aa 	.word	0x200188aa

000033dc <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    33de:	4b13      	ldr	r3, [pc, #76]	; (342c <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    33e0:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    33e2:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    33e4:	4f12      	ldr	r7, [pc, #72]	; (3430 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    33e6:	881b      	ldrh	r3, [r3, #0]
    33e8:	1c58      	adds	r0, r3, #1
    33ea:	b280      	uxth	r0, r0
    33ec:	f7ff fb30 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    33f0:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    33f2:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    33f4:	4604      	mov	r4, r0
    read_byte(bal, false);
    33f6:	4628      	mov	r0, r5
    33f8:	f7ff fb2a 	bl	2a50 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    33fc:	783b      	ldrb	r3, [r7, #0]
    33fe:	2100      	movs	r1, #0
    3400:	441c      	add	r4, r3
    3402:	b2e0      	uxtb	r0, r4
    3404:	f7ff fb24 	bl	2a50 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3408:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    340a:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    340c:	2100      	movs	r1, #0
    340e:	3301      	adds	r3, #1
    3410:	441d      	add	r5, r3
    3412:	b2e8      	uxtb	r0, r5
    3414:	f7ff fb1c 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3418:	4b06      	ldr	r3, [pc, #24]	; (3434 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    341a:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    341e:	4631      	mov	r1, r6
    effective_address = adh + adl;
    3420:	b280      	uxth	r0, r0
    3422:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    3424:	f7ff fcd0 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    3428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    342a:	bf00      	nop
    342c:	2001888c 	.word	0x2001888c
    3430:	200188a9 	.word	0x200188a9
    3434:	2001888a 	.word	0x2001888a

00003438 <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    3438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    343a:	4b11      	ldr	r3, [pc, #68]	; (3480 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    343c:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    343e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3440:	4f10      	ldr	r7, [pc, #64]	; (3484 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    3442:	881b      	ldrh	r3, [r3, #0]
    3444:	1c58      	adds	r0, r3, #1
    3446:	b280      	uxth	r0, r0
    3448:	f7ff fb02 	bl	2a50 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    344c:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    344e:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    3450:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    3452:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    3454:	f7ff fafc 	bl	2a50 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    3458:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    345a:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    345c:	b2a0      	uxth	r0, r4
    345e:	f7ff faf7 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    3462:	4b09      	ldr	r3, [pc, #36]	; (3488 <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    3464:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3466:	781b      	ldrb	r3, [r3, #0]
    3468:	4433      	add	r3, r6
    346a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    346e:	b298      	uxth	r0, r3
    3470:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    3472:	f7ff faed 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    3476:	4629      	mov	r1, r5
    3478:	8838      	ldrh	r0, [r7, #0]
    347a:	f7ff fca5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
}
    347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3480:	2001888c 	.word	0x2001888c
    3484:	2001888a 	.word	0x2001888a
    3488:	200188aa 	.word	0x200188aa

0000348c <reset_sequence()>:
void reset_sequence() {
    348c:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    348e:	4b65      	ldr	r3, [pc, #404]	; (3624 <reset_sequence()+0x198>)
    3490:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    3492:	4d65      	ldr	r5, [pc, #404]	; (3628 <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3494:	2002      	movs	r0, #2
    3496:	4965      	ldr	r1, [pc, #404]	; (362c <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    3498:	4c65      	ldr	r4, [pc, #404]	; (3630 <reset_sequence()+0x1a4>)
    349a:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    349e:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    34a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    34a4:	8828      	ldrh	r0, [r5, #0]
    34a6:	f7ff fad3 	bl	2a50 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    34aa:	8828      	ldrh	r0, [r5, #0]
    34ac:	2100      	movs	r1, #0
    34ae:	3001      	adds	r0, #1
    34b0:	b280      	uxth	r0, r0
    34b2:	f7ff facd 	bl	2a50 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    34b6:	7820      	ldrb	r0, [r4, #0]
    34b8:	2100      	movs	r1, #0
    34ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34be:	f7ff fac7 	bl	2a50 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    34c2:	7820      	ldrb	r0, [r4, #0]
    34c4:	2100      	movs	r1, #0
    34c6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34ca:	3801      	subs	r0, #1
    34cc:	b280      	uxth	r0, r0
    34ce:	f7ff fabf 	bl	2a50 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    34d2:	7820      	ldrb	r0, [r4, #0]
    34d4:	2100      	movs	r1, #0
    34d6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34da:	3802      	subs	r0, #2
    34dc:	b280      	uxth	r0, r0
    34de:	f7ff fab7 	bl	2a50 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    34e2:	2100      	movs	r1, #0
    34e4:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    34e8:	f7ff fab2 	bl	2a50 <read_byte(unsigned short, bool)>
    34ec:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    34ee:	2100      	movs	r1, #0
    34f0:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    34f4:	f7ff faac 	bl	2a50 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    34f8:	4a4e      	ldr	r2, [pc, #312]	; (3634 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    34fa:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    34fe:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3500:	4b4d      	ldr	r3, [pc, #308]	; (3638 <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3502:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3504:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3506:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    350a:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    350c:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    350e:	d37b      	bcc.n	3608 <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3510:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3518:	d309      	bcc.n	352e <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    351a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    351e:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3522:	d371      	bcc.n	3608 <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3524:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3528:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    352c:	d36c      	bcc.n	3608 <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    352e:	4b43      	ldr	r3, [pc, #268]	; (363c <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    3530:	2100      	movs	r1, #0
    3532:	4a43      	ldr	r2, [pc, #268]	; (3640 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3534:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3536:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3538:	2b01      	cmp	r3, #1
    353a:	d005      	beq.n	3548 <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    353c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3540:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3548:	4b3e      	ldr	r3, [pc, #248]	; (3644 <reset_sequence()+0x1b8>)
    354a:	781b      	ldrb	r3, [r3, #0]
    354c:	b94b      	cbnz	r3, 3562 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    354e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3552:	6813      	ldr	r3, [r2, #0]
    3554:	04d9      	lsls	r1, r3, #19
    3556:	d4fc      	bmi.n	3552 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3558:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    355c:	6813      	ldr	r3, [r2, #0]
    355e:	04db      	lsls	r3, r3, #19
    3560:	d5fc      	bpl.n	355c <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3562:	4e32      	ldr	r6, [pc, #200]	; (362c <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3564:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3568:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    356a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    356c:	06c1      	lsls	r1, r0, #27
    356e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3572:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3576:	682a      	ldr	r2, [r5, #0]
    3578:	4b33      	ldr	r3, [pc, #204]	; (3648 <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    357a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    357e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3580:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3582:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3586:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    358a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    358c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3590:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3594:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3596:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    359a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    359e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35a0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    35a2:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    35a4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35a6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35aa:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    35ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35b0:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35b2:	4a26      	ldr	r2, [pc, #152]	; (364c <reset_sequence()+0x1c0>)
    35b4:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35b6:	4d26      	ldr	r5, [pc, #152]	; (3650 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35b8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    35ba:	0542      	lsls	r2, r0, #21
    35bc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    35c0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    35c2:	0343      	lsls	r3, r0, #13
    35c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    35c8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    35ca:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35cc:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    35d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35d4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    35d6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35da:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35de:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35e0:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35e8:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35ea:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35ec:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35ee:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35f2:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35f4:	480b      	ldr	r0, [pc, #44]	; (3624 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    35f6:	4332      	orrs	r2, r6
    35f8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35fa:	4a16      	ldr	r2, [pc, #88]	; (3654 <reset_sequence()+0x1c8>)
    35fc:	6804      	ldr	r4, [r0, #0]
    35fe:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3600:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3602:	430b      	orrs	r3, r1
    3604:	6003      	str	r3, [r0, #0]
    return;
    3606:	e003      	b.n	3610 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3608:	4b13      	ldr	r3, [pc, #76]	; (3658 <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    360a:	781b      	ldrb	r3, [r3, #0]
    360c:	2b01      	cmp	r3, #1
    360e:	d98e      	bls.n	352e <reset_sequence()+0xa2>
    3610:	2110      	movs	r1, #16
    3612:	4812      	ldr	r0, [pc, #72]	; (365c <reset_sequence()+0x1d0>)
    3614:	f006 ffec 	bl	a5f0 <usb_serial_write>
    3618:	4811      	ldr	r0, [pc, #68]	; (3660 <reset_sequence()+0x1d4>)
}
    361a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    361e:	f005 bb1d 	b.w	8c5c <Print::println()>
    3622:	bf00      	nop
    3624:	4200c000 	.word	0x4200c000
    3628:	2001888c 	.word	0x2001888c
    362c:	42004000 	.word	0x42004000
    3630:	20004a09 	.word	0x20004a09
    3634:	20004a08 	.word	0x20004a08
    3638:	20018888 	.word	0x20018888
    363c:	200188ac 	.word	0x200188ac
    3640:	200188a5 	.word	0x200188a5
    3644:	20004a06 	.word	0x20004a06
    3648:	6dfffff3 	.word	0x6dfffff3
    364c:	cff3efff 	.word	0xcff3efff
    3650:	42008000 	.word	0x42008000
    3654:	7fffff6f 	.word	0x7fffff6f
    3658:	2001889c 	.word	0x2001889c
    365c:	20000448 	.word	0x20000448
    3660:	200043f8 	.word	0x200043f8

00003664 <nmi_handler()>:
void nmi_handler() {
    3664:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3666:	4e67      	ldr	r6, [pc, #412]	; (3804 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    3668:	f7ff f9a2 	bl	29b0 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    366c:	4c66      	ldr	r4, [pc, #408]	; (3808 <nmi_handler()+0x1a4>)
    366e:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3670:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3672:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3674:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    3678:	4d64      	ldr	r5, [pc, #400]	; (380c <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    367a:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    367c:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3680:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3682:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3684:	f7ff f9e4 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    3688:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    368a:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    368c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3690:	0a09      	lsrs	r1, r1, #8
    3692:	f7ff fb99 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3696:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3698:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    369a:	3801      	subs	r0, #1
    369c:	b2c0      	uxtb	r0, r0
    369e:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    36a0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    36a4:	f7ff fb90 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    36a8:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    36aa:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    36ac:	3801      	subs	r0, #1
    36ae:	b2c0      	uxtb	r0, r0
    36b0:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    36b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    36b6:	f7ff fb87 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    36ba:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    36bc:	2100      	movs	r1, #0
    36be:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    36c2:	3b01      	subs	r3, #1
    36c4:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    36c6:	f7ff f9c3 	bl	2a50 <read_byte(unsigned short, bool)>
    36ca:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    36cc:	2100      	movs	r1, #0
    36ce:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    36d2:	f7ff f9bd 	bl	2a50 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    36d6:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    36d8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    36dc:	4a4c      	ldr	r2, [pc, #304]	; (3810 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    36de:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    36e2:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    36e4:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    36e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    36ea:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    36ec:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    36ee:	d37b      	bcc.n	37e8 <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    36f0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    36f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    36f8:	d309      	bcc.n	370e <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    36fa:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    36fe:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3702:	d371      	bcc.n	37e8 <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3704:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    370c:	d36c      	bcc.n	37e8 <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    370e:	4b41      	ldr	r3, [pc, #260]	; (3814 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3710:	2100      	movs	r1, #0
    3712:	4a41      	ldr	r2, [pc, #260]	; (3818 <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3714:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3716:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3718:	2b01      	cmp	r3, #1
    371a:	d005      	beq.n	3728 <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    371c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3720:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3728:	4b3c      	ldr	r3, [pc, #240]	; (381c <nmi_handler()+0x1b8>)
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	b94b      	cbnz	r3, 3742 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    372e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3732:	6813      	ldr	r3, [r2, #0]
    3734:	04d9      	lsls	r1, r3, #19
    3736:	d4fc      	bmi.n	3732 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    3738:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    373c:	6813      	ldr	r3, [r2, #0]
    373e:	04db      	lsls	r3, r3, #19
    3740:	d5fc      	bpl.n	373c <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3742:	4e37      	ldr	r6, [pc, #220]	; (3820 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3744:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3748:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    374a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    374c:	06c1      	lsls	r1, r0, #27
    374e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3752:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3756:	682a      	ldr	r2, [r5, #0]
    3758:	4b32      	ldr	r3, [pc, #200]	; (3824 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    375a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    375e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3760:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3762:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3766:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    376a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    376c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3770:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3774:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3776:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    377a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    377e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3780:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3782:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3784:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3786:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    378a:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    378c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3790:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3792:	4a25      	ldr	r2, [pc, #148]	; (3828 <nmi_handler()+0x1c4>)
    3794:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3796:	4d25      	ldr	r5, [pc, #148]	; (382c <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3798:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    379a:	0542      	lsls	r2, r0, #21
    379c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    37a0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    37a2:	0343      	lsls	r3, r0, #13
    37a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    37a8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    37aa:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    37ac:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    37b0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    37b4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    37b6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    37ba:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    37be:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    37c0:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    37c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    37c8:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    37ca:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    37cc:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    37ce:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    37d2:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    37d4:	4816      	ldr	r0, [pc, #88]	; (3830 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    37d6:	4332      	orrs	r2, r6
    37d8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    37da:	4a16      	ldr	r2, [pc, #88]	; (3834 <nmi_handler()+0x1d0>)
    37dc:	6804      	ldr	r4, [r0, #0]
    37de:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    37e0:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    37e2:	430b      	orrs	r3, r1
    37e4:	6003      	str	r3, [r0, #0]
    return;
    37e6:	e003      	b.n	37f0 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    37e8:	4b13      	ldr	r3, [pc, #76]	; (3838 <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    37ea:	781b      	ldrb	r3, [r3, #0]
    37ec:	2b01      	cmp	r3, #1
    37ee:	d98e      	bls.n	370e <nmi_handler()+0xaa>
    37f0:	210e      	movs	r1, #14
    37f2:	4812      	ldr	r0, [pc, #72]	; (383c <nmi_handler()+0x1d8>)
    37f4:	f006 fefc 	bl	a5f0 <usb_serial_write>
    37f8:	4811      	ldr	r0, [pc, #68]	; (3840 <nmi_handler()+0x1dc>)
}
    37fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    37fe:	f005 ba2d 	b.w	8c5c <Print::println()>
    3802:	bf00      	nop
    3804:	20004a08 	.word	0x20004a08
    3808:	2001888c 	.word	0x2001888c
    380c:	20004a09 	.word	0x20004a09
    3810:	20018888 	.word	0x20018888
    3814:	200188ac 	.word	0x200188ac
    3818:	200188a5 	.word	0x200188a5
    381c:	20004a06 	.word	0x20004a06
    3820:	42004000 	.word	0x42004000
    3824:	6dfffff3 	.word	0x6dfffff3
    3828:	cff3efff 	.word	0xcff3efff
    382c:	42008000 	.word	0x42008000
    3830:	4200c000 	.word	0x4200c000
    3834:	7fffff6f 	.word	0x7fffff6f
    3838:	2001889c 	.word	0x2001889c
    383c:	20000394 	.word	0x20000394
    3840:	200043f8 	.word	0x200043f8

00003844 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    3844:	b570      	push	{r4, r5, r6, lr}
    3846:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3848:	4e69      	ldr	r6, [pc, #420]	; (39f0 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    384a:	f7ff f8b1 	bl	29b0 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    384e:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3850:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3852:	f000 80ca 	beq.w	39ea <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    3856:	f023 0310 	bic.w	r3, r3, #16
    385a:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    385e:	4c65      	ldr	r4, [pc, #404]	; (39f4 <irq_handler(unsigned char)+0x1b0>)
    3860:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3862:	4d65      	ldr	r5, [pc, #404]	; (39f8 <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3864:	8820      	ldrh	r0, [r4, #0]
    3866:	7033      	strb	r3, [r6, #0]
    3868:	3001      	adds	r0, #1
    386a:	b280      	uxth	r0, r0
    386c:	f7ff f8f0 	bl	2a50 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    3870:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    3872:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    3874:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3878:	0a09      	lsrs	r1, r1, #8
    387a:	f7ff faa5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    387e:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3880:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    3882:	3801      	subs	r0, #1
    3884:	b2c0      	uxtb	r0, r0
    3886:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3888:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    388c:	f7ff fa9c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3890:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3892:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    3894:	3801      	subs	r0, #1
    3896:	b2c0      	uxtb	r0, r0
    3898:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    389a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    389e:	f7ff fa93 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    38a2:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    38a4:	2100      	movs	r1, #0
    38a6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    38aa:	3b01      	subs	r3, #1
    38ac:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    38ae:	f7ff f8cf 	bl	2a50 <read_byte(unsigned short, bool)>
    38b2:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    38b4:	2100      	movs	r1, #0
    38b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    38ba:	f7ff f8c9 	bl	2a50 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    38be:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    38c0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    38c4:	4a4d      	ldr	r2, [pc, #308]	; (39fc <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    38c6:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    38ca:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    38cc:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    38ce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    38d2:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    38d4:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    38d6:	d37b      	bcc.n	39d0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    38d8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    38dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    38e0:	d309      	bcc.n	38f6 <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    38e2:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    38e6:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    38ea:	d371      	bcc.n	39d0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    38ec:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    38f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    38f4:	d36c      	bcc.n	39d0 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    38f6:	4b42      	ldr	r3, [pc, #264]	; (3a00 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    38f8:	2100      	movs	r1, #0
    38fa:	4a42      	ldr	r2, [pc, #264]	; (3a04 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    38fc:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    38fe:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3900:	2b01      	cmp	r3, #1
    3902:	d005      	beq.n	3910 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3904:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3908:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    390c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3910:	4b3d      	ldr	r3, [pc, #244]	; (3a08 <irq_handler(unsigned char)+0x1c4>)
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	b94b      	cbnz	r3, 392a <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3916:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    391a:	6813      	ldr	r3, [r2, #0]
    391c:	04d9      	lsls	r1, r3, #19
    391e:	d4fc      	bmi.n	391a <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3920:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3924:	6813      	ldr	r3, [r2, #0]
    3926:	04db      	lsls	r3, r3, #19
    3928:	d5fc      	bpl.n	3924 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    392a:	4e38      	ldr	r6, [pc, #224]	; (3a0c <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    392c:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3930:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3932:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3934:	06c1      	lsls	r1, r0, #27
    3936:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    393a:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    393e:	682a      	ldr	r2, [r5, #0]
    3940:	4b33      	ldr	r3, [pc, #204]	; (3a10 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3942:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3946:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3948:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    394a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    394e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3952:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3954:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3958:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    395c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    395e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3962:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3966:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3968:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    396a:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    396c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    396e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3972:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3978:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    397a:	4a26      	ldr	r2, [pc, #152]	; (3a14 <irq_handler(unsigned char)+0x1d0>)
    397c:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    397e:	4d26      	ldr	r5, [pc, #152]	; (3a18 <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3980:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3982:	0542      	lsls	r2, r0, #21
    3984:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3988:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    398a:	0343      	lsls	r3, r0, #13
    398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    3990:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3992:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3994:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3998:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    399c:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    399e:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    39a2:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    39a6:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    39a8:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    39ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    39b0:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    39b2:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    39b4:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    39b6:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    39ba:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    39bc:	4817      	ldr	r0, [pc, #92]	; (3a1c <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    39be:	4332      	orrs	r2, r6
    39c0:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    39c2:	4a17      	ldr	r2, [pc, #92]	; (3a20 <irq_handler(unsigned char)+0x1dc>)
    39c4:	6804      	ldr	r4, [r0, #0]
    39c6:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    39c8:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    39ca:	430b      	orrs	r3, r1
    39cc:	6003      	str	r3, [r0, #0]
    return;
    39ce:	e003      	b.n	39d8 <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    39d0:	4b14      	ldr	r3, [pc, #80]	; (3a24 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2b01      	cmp	r3, #1
    39d6:	d98e      	bls.n	38f6 <irq_handler(unsigned char)+0xb2>
    39d8:	210e      	movs	r1, #14
    39da:	4813      	ldr	r0, [pc, #76]	; (3a28 <irq_handler(unsigned char)+0x1e4>)
    39dc:	f006 fe08 	bl	a5f0 <usb_serial_write>
    39e0:	4812      	ldr	r0, [pc, #72]	; (3a2c <irq_handler(unsigned char)+0x1e8>)
}
    39e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39e6:	f005 b939 	b.w	8c5c <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    39ea:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    39ee:	e736      	b.n	385e <irq_handler(unsigned char)+0x1a>
    39f0:	20004a08 	.word	0x20004a08
    39f4:	2001888c 	.word	0x2001888c
    39f8:	20004a09 	.word	0x20004a09
    39fc:	20018888 	.word	0x20018888
    3a00:	200188ac 	.word	0x200188ac
    3a04:	200188a5 	.word	0x200188a5
    3a08:	20004a06 	.word	0x20004a06
    3a0c:	42004000 	.word	0x42004000
    3a10:	6dfffff3 	.word	0x6dfffff3
    3a14:	cff3efff 	.word	0xcff3efff
    3a18:	42008000 	.word	0x42008000
    3a1c:	4200c000 	.word	0x4200c000
    3a20:	7fffff6f 	.word	0x7fffff6f
    3a24:	2001889c 	.word	0x2001889c
    3a28:	20000384 	.word	0x20000384
    3a2c:	200043f8 	.word	0x200043f8

00003a30 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    3a30:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3a32:	4c0f      	ldr	r4, [pc, #60]	; (3a70 <opcode_0x0A()+0x40>)
    3a34:	2100      	movs	r1, #0
    3a36:	8820      	ldrh	r0, [r4, #0]
    3a38:	f7ff f80a 	bl	2a50 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a3c:	4b0d      	ldr	r3, [pc, #52]	; (3a74 <opcode_0x0A()+0x44>)
    3a3e:	490e      	ldr	r1, [pc, #56]	; (3a78 <opcode_0x0A()+0x48>)
    3a40:	f993 2000 	ldrsb.w	r2, [r3]
    3a44:	7818      	ldrb	r0, [r3, #0]
    3a46:	2a00      	cmp	r2, #0
    3a48:	780a      	ldrb	r2, [r1, #0]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    3a4a:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a4e:	bfb4      	ite	lt
    3a50:	f042 0201 	orrlt.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3a54:	f002 02fe 	andge.w	r2, r2, #254	; 0xfe
    register_a = register_a << 1;
    3a58:	b2c0      	uxtb	r0, r0
    3a5a:	700a      	strb	r2, [r1, #0]
    3a5c:	7018      	strb	r0, [r3, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a5e:	f7ff fabb 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0A].length);
    3a62:	4a06      	ldr	r2, [pc, #24]	; (3a7c <opcode_0x0A()+0x4c>)
    3a64:	8823      	ldrh	r3, [r4, #0]
    3a66:	f892 0239 	ldrb.w	r0, [r2, #569]	; 0x239
    3a6a:	4418      	add	r0, r3
}
    3a6c:	b280      	uxth	r0, r0
    3a6e:	bd10      	pop	{r4, pc}
    3a70:	2001888c 	.word	0x2001888c
    3a74:	200188a8 	.word	0x200188a8
    3a78:	20004a08 	.word	0x20004a08
    3a7c:	20015418 	.word	0x20015418

00003a80 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    3a80:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3a82:	4c0e      	ldr	r4, [pc, #56]	; (3abc <opcode_0x4A()+0x3c>)
    3a84:	2100      	movs	r1, #0
    3a86:	8820      	ldrh	r0, [r4, #0]
    3a88:	f7fe ffe2 	bl	2a50 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a8c:	4a0c      	ldr	r2, [pc, #48]	; (3ac0 <opcode_0x4A()+0x40>)
    3a8e:	490d      	ldr	r1, [pc, #52]	; (3ac4 <opcode_0x4A()+0x44>)
    3a90:	7810      	ldrb	r0, [r2, #0]
    3a92:	780b      	ldrb	r3, [r1, #0]
    3a94:	f010 0f01 	tst.w	r0, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    3a98:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3a9c:	bf14      	ite	ne
    3a9e:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3aa2:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    3aa6:	7010      	strb	r0, [r2, #0]
    3aa8:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3aaa:	f7ff fa95 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4A].length);
    3aae:	4a06      	ldr	r2, [pc, #24]	; (3ac8 <opcode_0x4A()+0x48>)
    3ab0:	8823      	ldrh	r3, [r4, #0]
    3ab2:	f892 0f39 	ldrb.w	r0, [r2, #3897]	; 0xf39
    3ab6:	4418      	add	r0, r3
}
    3ab8:	b280      	uxth	r0, r0
    3aba:	bd10      	pop	{r4, pc}
    3abc:	2001888c 	.word	0x2001888c
    3ac0:	200188a8 	.word	0x200188a8
    3ac4:	20004a08 	.word	0x20004a08
    3ac8:	20015418 	.word	0x20015418

00003acc <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    3acc:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3ace:	4c10      	ldr	r4, [pc, #64]	; (3b10 <opcode_0x6A()+0x44>)
    3ad0:	2100      	movs	r1, #0
    3ad2:	8820      	ldrh	r0, [r4, #0]
    3ad4:	f7fe ffbc 	bl	2a50 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3ad8:	490e      	ldr	r1, [pc, #56]	; (3b14 <opcode_0x6A()+0x48>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3ada:	4a0f      	ldr	r2, [pc, #60]	; (3b18 <opcode_0x6A()+0x4c>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3adc:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3ade:	f892 c000 	ldrb.w	ip, [r2]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3ae2:	01d8      	lsls	r0, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3ae4:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3ae8:	b2c0      	uxtb	r0, r0
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3aea:	bf14      	ite	ne
    3aec:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3af0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3af4:	ea40 005c 	orr.w	r0, r0, ip, lsr #1
    3af8:	700b      	strb	r3, [r1, #0]
    3afa:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3afc:	f7ff fa6c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x6A].length);
    3b00:	4a06      	ldr	r2, [pc, #24]	; (3b1c <opcode_0x6A()+0x50>)
    3b02:	8823      	ldrh	r3, [r4, #0]
    3b04:	f892 05b9 	ldrb.w	r0, [r2, #1465]	; 0x5b9
    3b08:	4418      	add	r0, r3
}
    3b0a:	b280      	uxth	r0, r0
    3b0c:	bd10      	pop	{r4, pc}
    3b0e:	bf00      	nop
    3b10:	2001888c 	.word	0x2001888c
    3b14:	20004a08 	.word	0x20004a08
    3b18:	200188a8 	.word	0x200188a8
    3b1c:	20016418 	.word	0x20016418

00003b20 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3b20:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3b22:	4c11      	ldr	r4, [pc, #68]	; (3b68 <opcode_0x2A()+0x48>)
    3b24:	2100      	movs	r1, #0
    3b26:	8820      	ldrh	r0, [r4, #0]
    3b28:	f7fe ff92 	bl	2a50 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3b2c:	490f      	ldr	r1, [pc, #60]	; (3b6c <opcode_0x2A()+0x4c>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3b2e:	4a10      	ldr	r2, [pc, #64]	; (3b70 <opcode_0x2A()+0x50>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3b30:	780b      	ldrb	r3, [r1, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3b32:	f992 e000 	ldrsb.w	lr, [r2]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3b36:	f003 0001 	and.w	r0, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3b3a:	f892 c000 	ldrb.w	ip, [r2]
    3b3e:	f1be 0f00 	cmp.w	lr, #0
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    3b42:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3b46:	bfb4      	ite	lt
    3b48:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3b4c:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    3b50:	b2c0      	uxtb	r0, r0
    3b52:	700b      	strb	r3, [r1, #0]
    3b54:	7010      	strb	r0, [r2, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    3b56:	f7ff fa3f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2A].length);
    3b5a:	4a06      	ldr	r2, [pc, #24]	; (3b74 <opcode_0x2A()+0x54>)
    3b5c:	8823      	ldrh	r3, [r4, #0]
    3b5e:	f892 08b9 	ldrb.w	r0, [r2, #2233]	; 0x8b9
    3b62:	4418      	add	r0, r3
}
    3b64:	b280      	uxth	r0, r0
    3b66:	bd10      	pop	{r4, pc}
    3b68:	2001888c 	.word	0x2001888c
    3b6c:	20004a08 	.word	0x20004a08
    3b70:	200188a8 	.word	0x200188a8
    3b74:	20015418 	.word	0x20015418

00003b78 <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    3b78:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    3b7a:	4c2f      	ldr	r4, [pc, #188]	; (3c38 <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3b7c:	492f      	ldr	r1, [pc, #188]	; (3c3c <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    3b7e:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3b80:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    3b84:	0716      	lsls	r6, r2, #28
    3b86:	d532      	bpl.n	3bee <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    3b88:	f002 0e01 	and.w	lr, r2, #1
    3b8c:	f00c 030f 	and.w	r3, ip, #15
    3b90:	f000 050f 	and.w	r5, r0, #15
    3b94:	4473      	add	r3, lr
    3b96:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    3b98:	2b09      	cmp	r3, #9
    3b9a:	d823      	bhi.n	3be4 <Calculate_ADC(unsigned short)+0x6c>
    3b9c:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    3ba0:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    3ba4:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3ba8:	4435      	add	r5, r6
    3baa:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3bac:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    3bb0:	d838      	bhi.n	3c24 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3bb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3bb6:	4473      	add	r3, lr
    3bb8:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3bba:	fa4f fc8c 	sxtb.w	ip, ip
    3bbe:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3bc2:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    3bc6:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3bc8:	db20      	blt.n	3c0c <Calculate_ADC(unsigned short)+0x94>
    3bca:	f1be 0f00 	cmp.w	lr, #0
    3bce:	db1a      	blt.n	3c06 <Calculate_ADC(unsigned short)+0x8e>
    3bd0:	061d      	lsls	r5, r3, #24
    3bd2:	d41f      	bmi.n	3c14 <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3bd4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    3bd8:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3bda:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3be0:	f7ff b9fa 	b.w	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    3be4:	3b0a      	subs	r3, #10
    3be6:	f04f 0e10 	mov.w	lr, #16
    3bea:	b29b      	uxth	r3, r3
    3bec:	e7d8      	b.n	3ba0 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    3bee:	f002 0301 	and.w	r3, r2, #1
    3bf2:	4403      	add	r3, r0
    3bf4:	4463      	add	r3, ip
    3bf6:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3bf8:	2bff      	cmp	r3, #255	; 0xff
    3bfa:	bf8c      	ite	hi
    3bfc:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3c00:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    3c04:	e7d9      	b.n	3bba <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    3c06:	f1bc 0f00 	cmp.w	ip, #0
    3c0a:	dae3      	bge.n	3bd4 <Calculate_ADC(unsigned short)+0x5c>
    3c0c:	ea63 030e 	orn	r3, r3, lr
    3c10:	061b      	lsls	r3, r3, #24
    3c12:	d4df      	bmi.n	3bd4 <Calculate_ADC(unsigned short)+0x5c>
    3c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    3c18:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c1a:	7022      	strb	r2, [r4, #0]
}
    3c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3c20:	f7ff b9da 	b.w	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    3c24:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3c28:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    3c2c:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    3c30:	f042 0201 	orr.w	r2, r2, #1
    3c34:	e7bf      	b.n	3bb6 <Calculate_ADC(unsigned short)+0x3e>
    3c36:	bf00      	nop
    3c38:	20004a08 	.word	0x20004a08
    3c3c:	200188a8 	.word	0x200188a8

00003c40 <Calculate_SBC(unsigned short)>:
} // 0x71 - ADC - Indirect Indexed  Y

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    3c40:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    3c42:	4c32      	ldr	r4, [pc, #200]	; (3d0c <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3c44:	4932      	ldr	r1, [pc, #200]	; (3d10 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    3c46:	7823      	ldrb	r3, [r4, #0]
    3c48:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    3c4a:	071e      	lsls	r6, r3, #28
    3c4c:	f002 0201 	and.w	r2, r2, #1
    3c50:	d539      	bpl.n	3cc6 <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3c52:	f000 0c0f 	and.w	ip, r0, #15
    3c56:	f891 e000 	ldrb.w	lr, [r1]
    3c5a:	4462      	add	r2, ip
    3c5c:	f00e 0c0f 	and.w	ip, lr, #15
    3c60:	ebac 0c02 	sub.w	ip, ip, r2
    3c64:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3c68:	f1bc 0f09 	cmp.w	ip, #9
    3c6c:	d825      	bhi.n	3cba <Calculate_SBC(unsigned short)+0x7a>
    3c6e:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3c70:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    3c74:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3c78:	1b92      	subs	r2, r2, r6
    3c7a:	1b52      	subs	r2, r2, r5
    3c7c:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3c7e:	2a90      	cmp	r2, #144	; 0x90
    3c80:	d83f      	bhi.n	3d02 <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3c82:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    3c86:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3c8a:	4494      	add	ip, r2
    3c8c:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3c90:	fa4f fe8e 	sxtb.w	lr, lr
    3c94:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c96:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    3c9a:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3c9e:	db24      	blt.n	3cea <Calculate_SBC(unsigned short)+0xaa>
    3ca0:	2a00      	cmp	r2, #0
    3ca2:	da1f      	bge.n	3ce4 <Calculate_SBC(unsigned short)+0xa4>
    3ca4:	f01c 0f80 	tst.w	ip, #128	; 0x80
    3ca8:	d123      	bne.n	3cf2 <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3caa:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3cae:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3cb0:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3cb6:	f7ff b98f 	b.w	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    3cba:	f10c 0c0a 	add.w	ip, ip, #10
    3cbe:	2510      	movs	r5, #16
    3cc0:	fa1f fc8c 	uxth.w	ip, ip
    3cc4:	e7d4      	b.n	3c70 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    3cc6:	f891 e000 	ldrb.w	lr, [r1]
    3cca:	ebae 0c00 	sub.w	ip, lr, r0
    3cce:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3cd2:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    3cd4:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3cd8:	bf54      	ite	pl
    3cda:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    3cde:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3ce2:	e7d5      	b.n	3c90 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3ce4:	f1be 0f00 	cmp.w	lr, #0
    3ce8:	dadf      	bge.n	3caa <Calculate_SBC(unsigned short)+0x6a>
    3cea:	ea42 020c 	orr.w	r2, r2, ip
    3cee:	0612      	lsls	r2, r2, #24
    3cf0:	d4db      	bmi.n	3caa <Calculate_SBC(unsigned short)+0x6a>
    3cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    3cf6:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3cf8:	7023      	strb	r3, [r4, #0]
}
    3cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3cfe:	f7ff b96b 	b.w	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3d02:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3d04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    3d08:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    3d0a:	e7be      	b.n	3c8a <Calculate_SBC(unsigned short)+0x4a>
    3d0c:	20004a08 	.word	0x20004a08
    3d10:	200188a8 	.word	0x200188a8

00003d14 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3d14:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3d16:	4c08      	ldr	r4, [pc, #32]	; (3d38 <opcode_0xE9()+0x24>)
    3d18:	2100      	movs	r1, #0
    3d1a:	8820      	ldrh	r0, [r4, #0]
    3d1c:	3001      	adds	r0, #1
    3d1e:	b280      	uxth	r0, r0
    3d20:	f7fe fe96 	bl	2a50 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    3d24:	b280      	uxth	r0, r0
    3d26:	f7ff ff8b 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    3d2a:	4a04      	ldr	r2, [pc, #16]	; (3d3c <opcode_0xE9()+0x28>)
    3d2c:	8823      	ldrh	r3, [r4, #0]
    3d2e:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3d32:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3d34:	b280      	uxth	r0, r0
    3d36:	bd10      	pop	{r4, pc}
    3d38:	2001888c 	.word	0x2001888c
    3d3c:	20017418 	.word	0x20017418

00003d40 <opcode_0xEA()>:
} // 0xF1 - SBC - Indirect Indexed  Y

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3d40:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d42:	4c07      	ldr	r4, [pc, #28]	; (3d60 <opcode_0xEA()+0x20>)
    3d44:	2100      	movs	r1, #0
    3d46:	8820      	ldrh	r0, [r4, #0]
    3d48:	3001      	adds	r0, #1
    3d4a:	b280      	uxth	r0, r0
    3d4c:	f7fe fe80 	bl	2a50 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3d50:	4a04      	ldr	r2, [pc, #16]	; (3d64 <opcode_0xEA()+0x24>)
    3d52:	8823      	ldrh	r3, [r4, #0]
    3d54:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3d58:	4418      	add	r0, r3
} // 0xEA - NOP   
    3d5a:	b280      	uxth	r0, r0
    3d5c:	bd10      	pop	{r4, pc}
    3d5e:	bf00      	nop
    3d60:	2001888c 	.word	0x2001888c
    3d64:	20017418 	.word	0x20017418

00003d68 <opcode_0x08()>:
} // 0x98 - TYA - Transfer Y to Accumulator

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    3d68:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3d6a:	4d0d      	ldr	r5, [pc, #52]	; (3da0 <opcode_0x08()+0x38>)
    3d6c:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3d6e:	4c0d      	ldr	r4, [pc, #52]	; (3da4 <opcode_0x08()+0x3c>)
    3d70:	8828      	ldrh	r0, [r5, #0]
    3d72:	3001      	adds	r0, #1
    3d74:	b280      	uxth	r0, r0
    3d76:	f7fe fe6b 	bl	2a50 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    3d7a:	4b0b      	ldr	r3, [pc, #44]	; (3da8 <opcode_0x08()+0x40>)
    3d7c:	7820      	ldrb	r0, [r4, #0]
    3d7e:	7819      	ldrb	r1, [r3, #0]
    3d80:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3d84:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    3d88:	f7ff f81e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    3d8c:	4907      	ldr	r1, [pc, #28]	; (3dac <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    3d8e:	7823      	ldrb	r3, [r4, #0]
    3d90:	882a      	ldrh	r2, [r5, #0]
    3d92:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    3d96:	3b01      	subs	r3, #1
    3d98:	4410      	add	r0, r2
    3d9a:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    3d9c:	b280      	uxth	r0, r0
    3d9e:	bd38      	pop	{r3, r4, r5, pc}
    3da0:	2001888c 	.word	0x2001888c
    3da4:	20004a09 	.word	0x20004a09
    3da8:	20004a08 	.word	0x20004a08
    3dac:	20015418 	.word	0x20015418

00003db0 <opcode_0x48()>:
uint16_t opcode_0x48() {
    3db0:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3db2:	4d0c      	ldr	r5, [pc, #48]	; (3de4 <opcode_0x48()+0x34>)
    3db4:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3db6:	4c0c      	ldr	r4, [pc, #48]	; (3de8 <opcode_0x48()+0x38>)
    3db8:	8828      	ldrh	r0, [r5, #0]
    3dba:	3001      	adds	r0, #1
    3dbc:	b280      	uxth	r0, r0
    3dbe:	f7fe fe47 	bl	2a50 <read_byte(unsigned short, bool)>
    3dc2:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    3dc4:	4b09      	ldr	r3, [pc, #36]	; (3dec <opcode_0x48()+0x3c>)
    3dc6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3dca:	7819      	ldrb	r1, [r3, #0]
    3dcc:	f7fe fffc 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    3dd0:	4907      	ldr	r1, [pc, #28]	; (3df0 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    3dd2:	7823      	ldrb	r3, [r4, #0]
    3dd4:	882a      	ldrh	r2, [r5, #0]
    3dd6:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    3dda:	3b01      	subs	r3, #1
    3ddc:	4410      	add	r0, r2
    3dde:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    3de0:	b280      	uxth	r0, r0
    3de2:	bd38      	pop	{r3, r4, r5, pc}
    3de4:	2001888c 	.word	0x2001888c
    3de8:	20004a09 	.word	0x20004a09
    3dec:	200188a8 	.word	0x200188a8
    3df0:	20015418 	.word	0x20015418

00003df4 <opcode_0x28()>:
uint16_t opcode_0x28() {
    3df4:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3df6:	4d11      	ldr	r5, [pc, #68]	; (3e3c <opcode_0x28()+0x48>)
    3df8:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3dfa:	4c11      	ldr	r4, [pc, #68]	; (3e40 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    3dfc:	8828      	ldrh	r0, [r5, #0]
    3dfe:	3001      	adds	r0, #1
    3e00:	b280      	uxth	r0, r0
    3e02:	f7fe fe25 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3e06:	7820      	ldrb	r0, [r4, #0]
    3e08:	2100      	movs	r1, #0
    3e0a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e0e:	f7fe fe1f 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3e12:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3e14:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3e16:	3301      	adds	r3, #1
    3e18:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3e1a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3e1e:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3e20:	f7fe fe16 	bl	2a50 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    3e24:	4b07      	ldr	r3, [pc, #28]	; (3e44 <opcode_0x28()+0x50>)
    3e26:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    3e28:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3e2c:	4906      	ldr	r1, [pc, #24]	; (3e48 <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    3e2e:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    3e32:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    3e34:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    3e36:	b280      	uxth	r0, r0
    3e38:	bd38      	pop	{r3, r4, r5, pc}
    3e3a:	bf00      	nop
    3e3c:	2001888c 	.word	0x2001888c
    3e40:	20004a09 	.word	0x20004a09
    3e44:	20015418 	.word	0x20015418
    3e48:	20004a08 	.word	0x20004a08

00003e4c <opcode_0x68()>:
uint16_t opcode_0x68() {
    3e4c:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    3e4e:	4d11      	ldr	r5, [pc, #68]	; (3e94 <opcode_0x68()+0x48>)
    3e50:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    3e52:	4c11      	ldr	r4, [pc, #68]	; (3e98 <opcode_0x68()+0x4c>)
    read_byte(register_pc+1, false);
    3e54:	8828      	ldrh	r0, [r5, #0]
    3e56:	3001      	adds	r0, #1
    3e58:	b280      	uxth	r0, r0
    3e5a:	f7fe fdf9 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    3e5e:	7820      	ldrb	r0, [r4, #0]
    3e60:	2100      	movs	r1, #0
    3e62:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e66:	f7fe fdf3 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3e6a:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3e6c:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3e6e:	3301      	adds	r3, #1
    3e70:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3e72:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3e76:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3e78:	f7fe fdea 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = pop();
    3e7c:	4b07      	ldr	r3, [pc, #28]	; (3e9c <opcode_0x68()+0x50>)
    3e7e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3e80:	f7ff f8aa 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    3e84:	4a06      	ldr	r2, [pc, #24]	; (3ea0 <opcode_0x68()+0x54>)
    3e86:	882b      	ldrh	r3, [r5, #0]
    3e88:	f892 0551 	ldrb.w	r0, [r2, #1361]	; 0x551
    3e8c:	4418      	add	r0, r3
} // 0x68 - PLA - Pop Accumulator from Stack
    3e8e:	b280      	uxth	r0, r0
    3e90:	bd38      	pop	{r3, r4, r5, pc}
    3e92:	bf00      	nop
    3e94:	2001888c 	.word	0x2001888c
    3e98:	20004a09 	.word	0x20004a09
    3e9c:	200188a8 	.word	0x200188a8
    3ea0:	20016418 	.word	0x20016418

00003ea4 <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
uint16_t opcode_0x29() {
    3ea4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3ea6:	4c0a      	ldr	r4, [pc, #40]	; (3ed0 <opcode_0x29()+0x2c>)
    3ea8:	2100      	movs	r1, #0
    3eaa:	8820      	ldrh	r0, [r4, #0]
    3eac:	3001      	adds	r0, #1
    3eae:	b280      	uxth	r0, r0
    3eb0:	f7fe fdce 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    3eb4:	4b07      	ldr	r3, [pc, #28]	; (3ed4 <opcode_0x29()+0x30>)
    3eb6:	781a      	ldrb	r2, [r3, #0]
    3eb8:	4010      	ands	r0, r2
    3eba:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3ebc:	f7ff f88c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x29].length);
    3ec0:	4a05      	ldr	r2, [pc, #20]	; (3ed8 <opcode_0x29()+0x34>)
    3ec2:	8823      	ldrh	r3, [r4, #0]
    3ec4:	f892 0885 	ldrb.w	r0, [r2, #2181]	; 0x885
    3ec8:	4418      	add	r0, r3
} // 0x29 - AND - Immediate
    3eca:	b280      	uxth	r0, r0
    3ecc:	bd10      	pop	{r4, pc}
    3ece:	bf00      	nop
    3ed0:	2001888c 	.word	0x2001888c
    3ed4:	200188a8 	.word	0x200188a8
    3ed8:	20015418 	.word	0x20015418

00003edc <opcode_0x09()>:
} // 0x31 - AND - Indirect Indexed  Y

// -------------------------------------------------
// ORA
// -------------------------------------------------
uint16_t opcode_0x09() {
    3edc:	b510      	push	{r4, lr}
    3ede:	4c0a      	ldr	r4, [pc, #40]	; (3f08 <opcode_0x09()+0x2c>)
    3ee0:	2100      	movs	r1, #0
    3ee2:	8820      	ldrh	r0, [r4, #0]
    3ee4:	3001      	adds	r0, #1
    3ee6:	b280      	uxth	r0, r0
    3ee8:	f7fe fdb2 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    3eec:	4b07      	ldr	r3, [pc, #28]	; (3f0c <opcode_0x09()+0x30>)
    3eee:	781a      	ldrb	r2, [r3, #0]
    3ef0:	4310      	orrs	r0, r2
    3ef2:	b2c0      	uxtb	r0, r0
    3ef4:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3ef6:	f7ff f86f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x09].length);
    3efa:	4a05      	ldr	r2, [pc, #20]	; (3f10 <opcode_0x09()+0x34>)
    3efc:	8823      	ldrh	r3, [r4, #0]
    3efe:	f892 0205 	ldrb.w	r0, [r2, #517]	; 0x205
    3f02:	4418      	add	r0, r3
} // 0x09 - OR - Immediate
    3f04:	b280      	uxth	r0, r0
    3f06:	bd10      	pop	{r4, pc}
    3f08:	2001888c 	.word	0x2001888c
    3f0c:	200188a8 	.word	0x200188a8
    3f10:	20015418 	.word	0x20015418

00003f14 <opcode_0x49()>:
} // 0x11 - OR - Indirect Indexed  Y

// -------------------------------------------------
// EOR
// -------------------------------------------------
uint16_t opcode_0x49() {
    3f14:	b510      	push	{r4, lr}
    3f16:	4c0a      	ldr	r4, [pc, #40]	; (3f40 <opcode_0x49()+0x2c>)
    3f18:	2100      	movs	r1, #0
    3f1a:	8820      	ldrh	r0, [r4, #0]
    3f1c:	3001      	adds	r0, #1
    3f1e:	b280      	uxth	r0, r0
    3f20:	f7fe fd96 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    3f24:	4b07      	ldr	r3, [pc, #28]	; (3f44 <opcode_0x49()+0x30>)
    3f26:	781a      	ldrb	r2, [r3, #0]
    3f28:	4050      	eors	r0, r2
    3f2a:	b2c0      	uxtb	r0, r0
    3f2c:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3f2e:	f7ff f853 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x49].length);
    3f32:	4a05      	ldr	r2, [pc, #20]	; (3f48 <opcode_0x49()+0x34>)
    3f34:	8823      	ldrh	r3, [r4, #0]
    3f36:	f892 0f05 	ldrb.w	r0, [r2, #3845]	; 0xf05
    3f3a:	4418      	add	r0, r3
} // 0x49 - EOR - Immediate
    3f3c:	b280      	uxth	r0, r0
    3f3e:	bd10      	pop	{r4, pc}
    3f40:	2001888c 	.word	0x2001888c
    3f44:	200188a8 	.word	0x200188a8
    3f48:	20015418 	.word	0x20015418

00003f4c <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    3f4c:	b510      	push	{r4, lr}
    3f4e:	4c12      	ldr	r4, [pc, #72]	; (3f98 <opcode_0x24()+0x4c>)
    3f50:	2100      	movs	r1, #0
    3f52:	8820      	ldrh	r0, [r4, #0]
    3f54:	3001      	adds	r0, #1
    3f56:	b280      	uxth	r0, r0
    3f58:	f7fe fd7a 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3f5c:	4b0f      	ldr	r3, [pc, #60]	; (3f9c <opcode_0x24()+0x50>)
    3f5e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3f60:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3f62:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3f64:	f7fe fd74 	bl	2a50 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3f68:	490d      	ldr	r1, [pc, #52]	; (3fa0 <opcode_0x24()+0x54>)
    3f6a:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3f6e:	780a      	ldrb	r2, [r1, #0]
    3f70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3f74:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    3f76:	4a0b      	ldr	r2, [pc, #44]	; (3fa4 <opcode_0x24()+0x58>)
    3f78:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f7a:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    3f7c:	480a      	ldr	r0, [pc, #40]	; (3fa8 <opcode_0x24()+0x5c>)
    3f7e:	8822      	ldrh	r2, [r4, #0]
    3f80:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f84:	bf0c      	ite	eq
    3f86:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f8a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    3f8e:	4410      	add	r0, r2
    3f90:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    3f92:	b280      	uxth	r0, r0
    3f94:	bd10      	pop	{r4, pc}
    3f96:	bf00      	nop
    3f98:	2001888c 	.word	0x2001888c
    3f9c:	2001888a 	.word	0x2001888a
    3fa0:	20004a08 	.word	0x20004a08
    3fa4:	200188a8 	.word	0x200188a8
    3fa8:	20015418 	.word	0x20015418

00003fac <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    3fac:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    3fae:	f7ff f887 	bl	30c0 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3fb2:	490d      	ldr	r1, [pc, #52]	; (3fe8 <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    3fb4:	4b0d      	ldr	r3, [pc, #52]	; (3fec <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3fb6:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    3fb8:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3fbc:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    3fc0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3fc4:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    3fc8:	4809      	ldr	r0, [pc, #36]	; (3ff0 <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    3fca:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    3fce:	4a09      	ldr	r2, [pc, #36]	; (3ff4 <opcode_0x2C()+0x48>)
    3fd0:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3fd4:	bf0c      	ite	eq
    3fd6:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3fda:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    3fde:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    3fe0:	8813      	ldrh	r3, [r2, #0]
    3fe2:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    3fe4:	b280      	uxth	r0, r0
    3fe6:	bd08      	pop	{r3, pc}
    3fe8:	20004a08 	.word	0x20004a08
    3fec:	200188a8 	.word	0x200188a8
    3ff0:	20015418 	.word	0x20015418
    3ff4:	2001888c 	.word	0x2001888c

00003ff8 <Calculate_CMP(unsigned char)>:
void Calculate_CMP(uint8_t local_data) {
    int16_t temp = 0;

    Begin_Fetch_Next_Opcode();

    temp = register_a - local_data;
    3ff8:	4b07      	ldr	r3, [pc, #28]	; (4018 <Calculate_CMP(unsigned char)+0x20>)

    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ffa:	4908      	ldr	r1, [pc, #32]	; (401c <Calculate_CMP(unsigned char)+0x24>)
    temp = register_a - local_data;
    3ffc:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    3ffe:	780a      	ldrb	r2, [r1, #0]
    4000:	4283      	cmp	r3, r0
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    4002:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4006:	bf2c      	ite	cs
    4008:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    400c:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4010:	b2c0      	uxtb	r0, r0
    4012:	700a      	strb	r2, [r1, #0]
    4014:	f7fe bfe0 	b.w	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4018:	200188a8 	.word	0x200188a8
    401c:	20004a08 	.word	0x20004a08

00004020 <opcode_0xC9()>:
    return;
}
uint16_t opcode_0xC9() {
    4020:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4022:	4c0f      	ldr	r4, [pc, #60]	; (4060 <opcode_0xC9()+0x40>)
    4024:	2100      	movs	r1, #0
    4026:	8820      	ldrh	r0, [r4, #0]
    4028:	3001      	adds	r0, #1
    402a:	b280      	uxth	r0, r0
    402c:	f7fe fd10 	bl	2a50 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    4030:	4b0c      	ldr	r3, [pc, #48]	; (4064 <opcode_0xC9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4032:	490d      	ldr	r1, [pc, #52]	; (4068 <opcode_0xC9()+0x48>)
    temp = register_a - local_data;
    4034:	781b      	ldrb	r3, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4036:	780a      	ldrb	r2, [r1, #0]
    4038:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    403a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    403e:	bf94      	ite	ls
    4040:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4044:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4048:	b2c0      	uxtb	r0, r0
    404a:	700a      	strb	r2, [r1, #0]
    404c:	f7fe ffc4 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    4050:	4a06      	ldr	r2, [pc, #24]	; (406c <opcode_0xC9()+0x4c>)
    4052:	8823      	ldrh	r3, [r4, #0]
    4054:	f892 0905 	ldrb.w	r0, [r2, #2309]	; 0x905
    4058:	4418      	add	r0, r3
} // 0xC9 - CMP - Immediate
    405a:	b280      	uxth	r0, r0
    405c:	bd10      	pop	{r4, pc}
    405e:	bf00      	nop
    4060:	2001888c 	.word	0x2001888c
    4064:	200188a8 	.word	0x200188a8
    4068:	20004a08 	.word	0x20004a08
    406c:	20017418 	.word	0x20017418

00004070 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    4070:	b510      	push	{r4, lr}
    4072:	4c0f      	ldr	r4, [pc, #60]	; (40b0 <opcode_0xE0()+0x40>)
    4074:	2100      	movs	r1, #0
    4076:	8820      	ldrh	r0, [r4, #0]
    4078:	3001      	adds	r0, #1
    407a:	b280      	uxth	r0, r0
    407c:	f7fe fce8 	bl	2a50 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    4080:	4b0c      	ldr	r3, [pc, #48]	; (40b4 <opcode_0xE0()+0x44>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4082:	490d      	ldr	r1, [pc, #52]	; (40b8 <opcode_0xE0()+0x48>)
    temp = register_x - local_data;
    4084:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4086:	780a      	ldrb	r2, [r1, #0]
    4088:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    408a:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    408e:	bf94      	ite	ls
    4090:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4094:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4098:	b2c0      	uxtb	r0, r0
    409a:	700a      	strb	r2, [r1, #0]
    409c:	f7fe ff9c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    40a0:	4a06      	ldr	r2, [pc, #24]	; (40bc <opcode_0xE0()+0x4c>)
    40a2:	8823      	ldrh	r3, [r4, #0]
    40a4:	f892 0db1 	ldrb.w	r0, [r2, #3505]	; 0xdb1
    40a8:	4418      	add	r0, r3
} // 0xE0 - CPX - Immediate
    40aa:	b280      	uxth	r0, r0
    40ac:	bd10      	pop	{r4, pc}
    40ae:	bf00      	nop
    40b0:	2001888c 	.word	0x2001888c
    40b4:	200188a9 	.word	0x200188a9
    40b8:	20004a08 	.word	0x20004a08
    40bc:	20017418 	.word	0x20017418

000040c0 <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    40c0:	b510      	push	{r4, lr}
    40c2:	4c12      	ldr	r4, [pc, #72]	; (410c <opcode_0xE4()+0x4c>)
    40c4:	2100      	movs	r1, #0
    40c6:	8820      	ldrh	r0, [r4, #0]
    40c8:	3001      	adds	r0, #1
    40ca:	b280      	uxth	r0, r0
    40cc:	f7fe fcc0 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    40d0:	4b0f      	ldr	r3, [pc, #60]	; (4110 <opcode_0xE4()+0x50>)
    40d2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    40d4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    40d6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    40d8:	f7fe fcba 	bl	2a50 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    40dc:	4b0d      	ldr	r3, [pc, #52]	; (4114 <opcode_0xE4()+0x54>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40de:	490e      	ldr	r1, [pc, #56]	; (4118 <opcode_0xE4()+0x58>)
    temp = register_x - local_data;
    40e0:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40e2:	780a      	ldrb	r2, [r1, #0]
    40e4:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    40e6:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    40ea:	bf2c      	ite	cs
    40ec:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    40f0:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    40f4:	b2c0      	uxtb	r0, r0
    40f6:	700a      	strb	r2, [r1, #0]
    40f8:	f7fe ff6e 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    40fc:	4a07      	ldr	r2, [pc, #28]	; (411c <opcode_0xE4()+0x5c>)
    40fe:	8823      	ldrh	r3, [r4, #0]
    4100:	f892 0e81 	ldrb.w	r0, [r2, #3713]	; 0xe81
    4104:	4418      	add	r0, r3
} // 0xE4 - CPX - ZeroPage
    4106:	b280      	uxth	r0, r0
    4108:	bd10      	pop	{r4, pc}
    410a:	bf00      	nop
    410c:	2001888c 	.word	0x2001888c
    4110:	2001888a 	.word	0x2001888a
    4114:	200188a9 	.word	0x200188a9
    4118:	20004a08 	.word	0x20004a08
    411c:	20017418 	.word	0x20017418

00004120 <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    4120:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    4122:	f7fe ffcd 	bl	30c0 <Fetch_Absolute()>
    temp = register_x - local_data;
    4126:	4b0c      	ldr	r3, [pc, #48]	; (4158 <opcode_0xEC()+0x38>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4128:	490c      	ldr	r1, [pc, #48]	; (415c <opcode_0xEC()+0x3c>)
    temp = register_x - local_data;
    412a:	781b      	ldrb	r3, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    412c:	780a      	ldrb	r2, [r1, #0]
    412e:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    4130:	eba3 0000 	sub.w	r0, r3, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4134:	bf94      	ite	ls
    4136:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    413a:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    413e:	b2c0      	uxtb	r0, r0
    4140:	700a      	strb	r2, [r1, #0]
    4142:	f7fe ff49 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xEC].length);
    4146:	4a06      	ldr	r2, [pc, #24]	; (4160 <opcode_0xEC()+0x40>)
    4148:	4b06      	ldr	r3, [pc, #24]	; (4164 <opcode_0xEC()+0x44>)
    414a:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
    414e:	881b      	ldrh	r3, [r3, #0]
    4150:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    4152:	b280      	uxth	r0, r0
    4154:	bd08      	pop	{r3, pc}
    4156:	bf00      	nop
    4158:	200188a9 	.word	0x200188a9
    415c:	20004a08 	.word	0x20004a08
    4160:	20018418 	.word	0x20018418
    4164:	2001888c 	.word	0x2001888c

00004168 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    4168:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    416a:	4c0f      	ldr	r4, [pc, #60]	; (41a8 <opcode_0xC0()+0x40>)
    416c:	2100      	movs	r1, #0
    416e:	8820      	ldrh	r0, [r4, #0]
    4170:	3001      	adds	r0, #1
    4172:	b280      	uxth	r0, r0
    4174:	f7fe fc6c 	bl	2a50 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    4178:	4b0c      	ldr	r3, [pc, #48]	; (41ac <opcode_0xC0()+0x44>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    417a:	490d      	ldr	r1, [pc, #52]	; (41b0 <opcode_0xC0()+0x48>)
    temp = register_y - local_data;
    417c:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    417e:	780a      	ldrb	r2, [r1, #0]
    4180:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    4182:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4186:	bf94      	ite	ls
    4188:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    418c:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4190:	b2c0      	uxtb	r0, r0
    4192:	700a      	strb	r2, [r1, #0]
    4194:	f7fe ff20 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    4198:	4a06      	ldr	r2, [pc, #24]	; (41b4 <opcode_0xC0()+0x4c>)
    419a:	8823      	ldrh	r3, [r4, #0]
    419c:	f892 0731 	ldrb.w	r0, [r2, #1841]	; 0x731
    41a0:	4418      	add	r0, r3
} // 0xC0 - CPY - Immediate
    41a2:	b280      	uxth	r0, r0
    41a4:	bd10      	pop	{r4, pc}
    41a6:	bf00      	nop
    41a8:	2001888c 	.word	0x2001888c
    41ac:	200188aa 	.word	0x200188aa
    41b0:	20004a08 	.word	0x20004a08
    41b4:	20017418 	.word	0x20017418

000041b8 <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    41b8:	b510      	push	{r4, lr}
    41ba:	4c12      	ldr	r4, [pc, #72]	; (4204 <opcode_0xC4()+0x4c>)
    41bc:	2100      	movs	r1, #0
    41be:	8820      	ldrh	r0, [r4, #0]
    41c0:	3001      	adds	r0, #1
    41c2:	b280      	uxth	r0, r0
    41c4:	f7fe fc44 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    41c8:	4b0f      	ldr	r3, [pc, #60]	; (4208 <opcode_0xC4()+0x50>)
    41ca:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    41cc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    41ce:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    41d0:	f7fe fc3e 	bl	2a50 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    41d4:	4b0d      	ldr	r3, [pc, #52]	; (420c <opcode_0xC4()+0x54>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    41d6:	490e      	ldr	r1, [pc, #56]	; (4210 <opcode_0xC4()+0x58>)
    temp = register_y - local_data;
    41d8:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    41da:	780a      	ldrb	r2, [r1, #0]
    41dc:	4283      	cmp	r3, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    41de:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    41e2:	bf2c      	ite	cs
    41e4:	f042 0201 	orrcs.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    41e8:	f002 02fe 	andcc.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    41ec:	b2c0      	uxtb	r0, r0
    41ee:	700a      	strb	r2, [r1, #0]
    41f0:	f7fe fef2 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    41f4:	4a07      	ldr	r2, [pc, #28]	; (4214 <opcode_0xC4()+0x5c>)
    41f6:	8823      	ldrh	r3, [r4, #0]
    41f8:	f892 0801 	ldrb.w	r0, [r2, #2049]	; 0x801
    41fc:	4418      	add	r0, r3
} // 0xC4 - CPY - ZeroPage
    41fe:	b280      	uxth	r0, r0
    4200:	bd10      	pop	{r4, pc}
    4202:	bf00      	nop
    4204:	2001888c 	.word	0x2001888c
    4208:	2001888a 	.word	0x2001888a
    420c:	200188aa 	.word	0x200188aa
    4210:	20004a08 	.word	0x20004a08
    4214:	20017418 	.word	0x20017418

00004218 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    4218:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    421a:	f7fe ff51 	bl	30c0 <Fetch_Absolute()>
    temp = register_y - local_data;
    421e:	4b0c      	ldr	r3, [pc, #48]	; (4250 <opcode_0xCC()+0x38>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4220:	490c      	ldr	r1, [pc, #48]	; (4254 <opcode_0xCC()+0x3c>)
    temp = register_y - local_data;
    4222:	781b      	ldrb	r3, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    4224:	780a      	ldrb	r2, [r1, #0]
    4226:	4298      	cmp	r0, r3
    Calc_Flags_NEGATIVE_ZERO(temp);
    4228:	eba3 0000 	sub.w	r0, r3, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    422c:	bf94      	ite	ls
    422e:	f042 0201 	orrls.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    4232:	f002 02fe 	andhi.w	r2, r2, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    4236:	b2c0      	uxtb	r0, r0
    4238:	700a      	strb	r2, [r1, #0]
    423a:	f7fe fecd 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCC].length);
    423e:	4a06      	ldr	r2, [pc, #24]	; (4258 <opcode_0xCC()+0x40>)
    4240:	4b06      	ldr	r3, [pc, #24]	; (425c <opcode_0xCC()+0x44>)
    4242:	f892 09a1 	ldrb.w	r0, [r2, #2465]	; 0x9a1
    4246:	881b      	ldrh	r3, [r3, #0]
    4248:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    424a:	b280      	uxth	r0, r0
    424c:	bd08      	pop	{r3, pc}
    424e:	bf00      	nop
    4250:	200188aa 	.word	0x200188aa
    4254:	20004a08 	.word	0x20004a08
    4258:	20017418 	.word	0x20017418
    425c:	2001888c 	.word	0x2001888c

00004260 <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    4260:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4262:	4d17      	ldr	r5, [pc, #92]	; (42c0 <opcode_0x06()+0x60>)
    4264:	b083      	sub	sp, #12
    4266:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4268:	4c16      	ldr	r4, [pc, #88]	; (42c4 <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    426a:	8828      	ldrh	r0, [r5, #0]
    426c:	3001      	adds	r0, #1
    426e:	b280      	uxth	r0, r0
    4270:	f7fe fbee 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4274:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4276:	b280      	uxth	r0, r0
    4278:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    427a:	f7fe fbe9 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    427e:	4a12      	ldr	r2, [pc, #72]	; (42c8 <opcode_0x06()+0x68>)
    4280:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4282:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4286:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4288:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    428a:	bf4c      	ite	mi
    428c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4290:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4294:	4608      	mov	r0, r1
    4296:	9101      	str	r1, [sp, #4]
    4298:	7013      	strb	r3, [r2, #0]
    429a:	f7fe fe9d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    429e:	9901      	ldr	r1, [sp, #4]
    42a0:	8820      	ldrh	r0, [r4, #0]
    42a2:	f7fe fd91 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    42a6:	8820      	ldrh	r0, [r4, #0]
    42a8:	9901      	ldr	r1, [sp, #4]
    42aa:	f7fe fd8d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    42ae:	4a07      	ldr	r2, [pc, #28]	; (42cc <opcode_0x06()+0x6c>)
    42b0:	882b      	ldrh	r3, [r5, #0]
    42b2:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    42b6:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    42b8:	b280      	uxth	r0, r0
    42ba:	b003      	add	sp, #12
    42bc:	bd30      	pop	{r4, r5, pc}
    42be:	bf00      	nop
    42c0:	2001888c 	.word	0x2001888c
    42c4:	2001888a 	.word	0x2001888a
    42c8:	20004a08 	.word	0x20004a08
    42cc:	20015418 	.word	0x20015418

000042d0 <opcode_0x16()>:
uint16_t opcode_0x16() {
    42d0:	b510      	push	{r4, lr}
    42d2:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    42d4:	4c11      	ldr	r4, [pc, #68]	; (431c <opcode_0x16()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    42d6:	f7fe feb3 	bl	3040 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42da:	4a11      	ldr	r2, [pc, #68]	; (4320 <opcode_0x16()+0x50>)
    42dc:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    42de:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42e2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    42e4:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42e6:	bf4c      	ite	mi
    42e8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42ec:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    42f0:	4608      	mov	r0, r1
    42f2:	9101      	str	r1, [sp, #4]
    42f4:	7013      	strb	r3, [r2, #0]
    42f6:	f7fe fe6f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    42fa:	8820      	ldrh	r0, [r4, #0]
    42fc:	9901      	ldr	r1, [sp, #4]
    42fe:	f7fe fd63 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4302:	8820      	ldrh	r0, [r4, #0]
    4304:	9901      	ldr	r1, [sp, #4]
    4306:	f7fe fd5f 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    430a:	4a06      	ldr	r2, [pc, #24]	; (4324 <opcode_0x16()+0x54>)
    430c:	4b06      	ldr	r3, [pc, #24]	; (4328 <opcode_0x16()+0x58>)
    430e:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    4312:	881b      	ldrh	r3, [r3, #0]
    4314:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    4316:	b280      	uxth	r0, r0
    4318:	b002      	add	sp, #8
    431a:	bd10      	pop	{r4, pc}
    431c:	2001888a 	.word	0x2001888a
    4320:	20004a08 	.word	0x20004a08
    4324:	20015418 	.word	0x20015418
    4328:	2001888c 	.word	0x2001888c

0000432c <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    432c:	b510      	push	{r4, lr}
    432e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4330:	4c11      	ldr	r4, [pc, #68]	; (4378 <opcode_0x0E()+0x4c>)
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    4332:	f7fe fec5 	bl	30c0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4336:	4a11      	ldr	r2, [pc, #68]	; (437c <opcode_0x0E()+0x50>)
    4338:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    433a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    433e:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    4340:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4342:	bf4c      	ite	mi
    4344:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4348:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    434c:	4608      	mov	r0, r1
    434e:	9101      	str	r1, [sp, #4]
    4350:	7013      	strb	r3, [r2, #0]
    4352:	f7fe fe41 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4356:	8820      	ldrh	r0, [r4, #0]
    4358:	9901      	ldr	r1, [sp, #4]
    435a:	f7fe fd35 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    435e:	8820      	ldrh	r0, [r4, #0]
    4360:	9901      	ldr	r1, [sp, #4]
    4362:	f7fe fd31 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    4366:	4a06      	ldr	r2, [pc, #24]	; (4380 <opcode_0x0E()+0x54>)
    4368:	4b06      	ldr	r3, [pc, #24]	; (4384 <opcode_0x0E()+0x58>)
    436a:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    436e:	881b      	ldrh	r3, [r3, #0]
    4370:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    4372:	b280      	uxth	r0, r0
    4374:	b002      	add	sp, #8
    4376:	bd10      	pop	{r4, pc}
    4378:	2001888a 	.word	0x2001888a
    437c:	20004a08 	.word	0x20004a08
    4380:	20015418 	.word	0x20015418
    4384:	2001888c 	.word	0x2001888c

00004388 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    4388:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    438a:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    438c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    438e:	f7fe feb3 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4392:	4a11      	ldr	r2, [pc, #68]	; (43d8 <opcode_0x1E()+0x50>)
    4394:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4396:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    439a:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    439c:	b2c9      	uxtb	r1, r1
    write_byte(effective_address, local_data);
    439e:	4c0f      	ldr	r4, [pc, #60]	; (43dc <opcode_0x1E()+0x54>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    43a0:	bf4c      	ite	mi
    43a2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43a6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    43aa:	4608      	mov	r0, r1
    43ac:	9101      	str	r1, [sp, #4]
    43ae:	7013      	strb	r3, [r2, #0]
    43b0:	f7fe fe12 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    43b4:	8820      	ldrh	r0, [r4, #0]
    43b6:	9901      	ldr	r1, [sp, #4]
    43b8:	f7fe fd06 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43bc:	8820      	ldrh	r0, [r4, #0]
    43be:	9901      	ldr	r1, [sp, #4]
    43c0:	f7fe fd02 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    43c4:	4a06      	ldr	r2, [pc, #24]	; (43e0 <opcode_0x1E()+0x58>)
    43c6:	4b07      	ldr	r3, [pc, #28]	; (43e4 <opcode_0x1E()+0x5c>)
    43c8:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    43cc:	881b      	ldrh	r3, [r3, #0]
    43ce:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    43d0:	b280      	uxth	r0, r0
    43d2:	b002      	add	sp, #8
    43d4:	bd10      	pop	{r4, pc}
    43d6:	bf00      	nop
    43d8:	20004a08 	.word	0x20004a08
    43dc:	2001888a 	.word	0x2001888a
    43e0:	20015418 	.word	0x20015418
    43e4:	2001888c 	.word	0x2001888c

000043e8 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    43e8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    43ea:	4e11      	ldr	r6, [pc, #68]	; (4430 <opcode_0xE6()+0x48>)
    43ec:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    43ee:	4d11      	ldr	r5, [pc, #68]	; (4434 <opcode_0xE6()+0x4c>)
    return read_byte(register_pc+offset, false);
    43f0:	8830      	ldrh	r0, [r6, #0]
    43f2:	3001      	adds	r0, #1
    43f4:	b280      	uxth	r0, r0
    43f6:	f7fe fb2b 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    43fa:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    43fc:	b280      	uxth	r0, r0
    43fe:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    4400:	f7fe fb26 	bl	2a50 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    4404:	3001      	adds	r0, #1
    global_temp = local_data;
    4406:	4b0c      	ldr	r3, [pc, #48]	; (4438 <opcode_0xE6()+0x50>)
    local_data = local_data + 1;
    4408:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    440a:	4620      	mov	r0, r4
    global_temp = local_data;
    440c:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    440e:	f7fe fde3 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4412:	4621      	mov	r1, r4
    4414:	8828      	ldrh	r0, [r5, #0]
    4416:	f7fe fcd7 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    441a:	8828      	ldrh	r0, [r5, #0]
    441c:	4621      	mov	r1, r4
    441e:	f7fe fcd3 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    4422:	4a06      	ldr	r2, [pc, #24]	; (443c <opcode_0xE6()+0x54>)
    4424:	8833      	ldrh	r3, [r6, #0]
    4426:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    442a:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    442c:	b280      	uxth	r0, r0
    442e:	bd70      	pop	{r4, r5, r6, pc}
    4430:	2001888c 	.word	0x2001888c
    4434:	2001888a 	.word	0x2001888a
    4438:	200188a4 	.word	0x200188a4
    443c:	20017418 	.word	0x20017418

00004440 <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    4440:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    4442:	f7fe fdfd 	bl	3040 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    4446:	3001      	adds	r0, #1
    global_temp = local_data;
    4448:	4b0b      	ldr	r3, [pc, #44]	; (4478 <opcode_0xF6()+0x38>)
    local_data = local_data + 1;
    444a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    444c:	4d0b      	ldr	r5, [pc, #44]	; (447c <opcode_0xF6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    444e:	4620      	mov	r0, r4
    global_temp = local_data;
    4450:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4452:	f7fe fdc1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4456:	8828      	ldrh	r0, [r5, #0]
    4458:	4621      	mov	r1, r4
    445a:	f7fe fcb5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    445e:	8828      	ldrh	r0, [r5, #0]
    4460:	4621      	mov	r1, r4
    4462:	f7fe fcb1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    4466:	4a06      	ldr	r2, [pc, #24]	; (4480 <opcode_0xF6()+0x40>)
    4468:	4b06      	ldr	r3, [pc, #24]	; (4484 <opcode_0xF6()+0x44>)
    446a:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    446e:	881b      	ldrh	r3, [r3, #0]
    4470:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    4472:	b280      	uxth	r0, r0
    4474:	bd38      	pop	{r3, r4, r5, pc}
    4476:	bf00      	nop
    4478:	200188a4 	.word	0x200188a4
    447c:	2001888a 	.word	0x2001888a
    4480:	20018418 	.word	0x20018418
    4484:	2001888c 	.word	0x2001888c

00004488 <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    4488:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    448a:	f7fe fe19 	bl	30c0 <Fetch_Absolute()>
    local_data = local_data + 1;
    448e:	3001      	adds	r0, #1
    global_temp = local_data;
    4490:	4b0b      	ldr	r3, [pc, #44]	; (44c0 <opcode_0xEE()+0x38>)
    local_data = local_data + 1;
    4492:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    4494:	4d0b      	ldr	r5, [pc, #44]	; (44c4 <opcode_0xEE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4496:	4620      	mov	r0, r4
    global_temp = local_data;
    4498:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    449a:	f7fe fd9d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    449e:	8828      	ldrh	r0, [r5, #0]
    44a0:	4621      	mov	r1, r4
    44a2:	f7fe fc91 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44a6:	8828      	ldrh	r0, [r5, #0]
    44a8:	4621      	mov	r1, r4
    44aa:	f7fe fc8d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    44ae:	4a06      	ldr	r2, [pc, #24]	; (44c8 <opcode_0xEE()+0x40>)
    44b0:	4b06      	ldr	r3, [pc, #24]	; (44cc <opcode_0xEE()+0x44>)
    44b2:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    44b6:	881b      	ldrh	r3, [r3, #0]
    44b8:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    44ba:	b280      	uxth	r0, r0
    44bc:	bd38      	pop	{r3, r4, r5, pc}
    44be:	bf00      	nop
    44c0:	200188a4 	.word	0x200188a4
    44c4:	2001888a 	.word	0x2001888a
    44c8:	20018418 	.word	0x20018418
    44cc:	2001888c 	.word	0x2001888c

000044d0 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    44d0:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    44d2:	4e11      	ldr	r6, [pc, #68]	; (4518 <opcode_0xC6()+0x48>)
    44d4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    44d6:	4d11      	ldr	r5, [pc, #68]	; (451c <opcode_0xC6()+0x4c>)
    return read_byte(register_pc+offset, false);
    44d8:	8830      	ldrh	r0, [r6, #0]
    44da:	3001      	adds	r0, #1
    44dc:	b280      	uxth	r0, r0
    44de:	f7fe fab7 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    44e2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    44e4:	b280      	uxth	r0, r0
    44e6:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    44e8:	f7fe fab2 	bl	2a50 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    44ec:	3801      	subs	r0, #1
    global_temp = local_data;
    44ee:	4b0c      	ldr	r3, [pc, #48]	; (4520 <opcode_0xC6()+0x50>)
    local_data = local_data - 1;
    44f0:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44f2:	4620      	mov	r0, r4
    global_temp = local_data;
    44f4:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    44f6:	f7fe fd6f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    44fa:	4621      	mov	r1, r4
    44fc:	8828      	ldrh	r0, [r5, #0]
    44fe:	f7fe fc63 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4502:	8828      	ldrh	r0, [r5, #0]
    4504:	4621      	mov	r1, r4
    4506:	f7fe fc5f 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    450a:	4a06      	ldr	r2, [pc, #24]	; (4524 <opcode_0xC6()+0x54>)
    450c:	8833      	ldrh	r3, [r6, #0]
    450e:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    4512:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    4514:	b280      	uxth	r0, r0
    4516:	bd70      	pop	{r4, r5, r6, pc}
    4518:	2001888c 	.word	0x2001888c
    451c:	2001888a 	.word	0x2001888a
    4520:	200188a4 	.word	0x200188a4
    4524:	20017418 	.word	0x20017418

00004528 <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    4528:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    452a:	f7fe fd89 	bl	3040 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    452e:	3801      	subs	r0, #1
    global_temp = local_data;
    4530:	4b0b      	ldr	r3, [pc, #44]	; (4560 <opcode_0xD6()+0x38>)
    local_data = local_data - 1;
    4532:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    4534:	4d0b      	ldr	r5, [pc, #44]	; (4564 <opcode_0xD6()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4536:	4620      	mov	r0, r4
    global_temp = local_data;
    4538:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    453a:	f7fe fd4d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    453e:	8828      	ldrh	r0, [r5, #0]
    4540:	4621      	mov	r1, r4
    4542:	f7fe fc41 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4546:	8828      	ldrh	r0, [r5, #0]
    4548:	4621      	mov	r1, r4
    454a:	f7fe fc3d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    454e:	4a06      	ldr	r2, [pc, #24]	; (4568 <opcode_0xD6()+0x40>)
    4550:	4b06      	ldr	r3, [pc, #24]	; (456c <opcode_0xD6()+0x44>)
    4552:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    4556:	881b      	ldrh	r3, [r3, #0]
    4558:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    455a:	b280      	uxth	r0, r0
    455c:	bd38      	pop	{r3, r4, r5, pc}
    455e:	bf00      	nop
    4560:	200188a4 	.word	0x200188a4
    4564:	2001888a 	.word	0x2001888a
    4568:	20017418 	.word	0x20017418
    456c:	2001888c 	.word	0x2001888c

00004570 <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    4570:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    4572:	f7fe fda5 	bl	30c0 <Fetch_Absolute()>
    local_data = local_data - 1;
    4576:	3801      	subs	r0, #1
    global_temp = local_data;
    4578:	4b0b      	ldr	r3, [pc, #44]	; (45a8 <opcode_0xCE()+0x38>)
    local_data = local_data - 1;
    457a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    457c:	4d0b      	ldr	r5, [pc, #44]	; (45ac <opcode_0xCE()+0x3c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    457e:	4620      	mov	r0, r4
    global_temp = local_data;
    4580:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4582:	f7fe fd29 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4586:	8828      	ldrh	r0, [r5, #0]
    4588:	4621      	mov	r1, r4
    458a:	f7fe fc1d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    458e:	8828      	ldrh	r0, [r5, #0]
    4590:	4621      	mov	r1, r4
    4592:	f7fe fc19 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    4596:	4a06      	ldr	r2, [pc, #24]	; (45b0 <opcode_0xCE()+0x40>)
    4598:	4b06      	ldr	r3, [pc, #24]	; (45b4 <opcode_0xCE()+0x44>)
    459a:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    459e:	881b      	ldrh	r3, [r3, #0]
    45a0:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    45a2:	b280      	uxth	r0, r0
    45a4:	bd38      	pop	{r3, r4, r5, pc}
    45a6:	bf00      	nop
    45a8:	200188a4 	.word	0x200188a4
    45ac:	2001888a 	.word	0x2001888a
    45b0:	20017418 	.word	0x20017418
    45b4:	2001888c 	.word	0x2001888c

000045b8 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    45b8:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    45ba:	2000      	movs	r0, #0
    write_byte(effective_address, local_data);
    45bc:	4d0c      	ldr	r5, [pc, #48]	; (45f0 <opcode_0xDE()+0x38>)
    45be:	f7fe fd9b 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    45c2:	3801      	subs	r0, #1
    global_temp = local_data;
    45c4:	4b0b      	ldr	r3, [pc, #44]	; (45f4 <opcode_0xDE()+0x3c>)
    local_data = local_data - 1;
    45c6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45c8:	4620      	mov	r0, r4
    global_temp = local_data;
    45ca:	701c      	strb	r4, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    45cc:	f7fe fd04 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    45d0:	8828      	ldrh	r0, [r5, #0]
    45d2:	4621      	mov	r1, r4
    45d4:	f7fe fbf8 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45d8:	8828      	ldrh	r0, [r5, #0]
    45da:	4621      	mov	r1, r4
    45dc:	f7fe fbf4 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    45e0:	4a05      	ldr	r2, [pc, #20]	; (45f8 <opcode_0xDE()+0x40>)
    45e2:	4b06      	ldr	r3, [pc, #24]	; (45fc <opcode_0xDE()+0x44>)
    45e4:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    45e8:	881b      	ldrh	r3, [r3, #0]
    45ea:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    45ec:	b280      	uxth	r0, r0
    45ee:	bd38      	pop	{r3, r4, r5, pc}
    45f0:	2001888a 	.word	0x2001888a
    45f4:	200188a4 	.word	0x200188a4
    45f8:	20017418 	.word	0x20017418
    45fc:	2001888c 	.word	0x2001888c

00004600 <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    4600:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4602:	4d16      	ldr	r5, [pc, #88]	; (465c <opcode_0x46()+0x5c>)
    4604:	b083      	sub	sp, #12
    4606:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4608:	4c15      	ldr	r4, [pc, #84]	; (4660 <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    460a:	8828      	ldrh	r0, [r5, #0]
    460c:	3001      	adds	r0, #1
    460e:	b280      	uxth	r0, r0
    4610:	f7fe fa1e 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4614:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4616:	b280      	uxth	r0, r0
    4618:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    461a:	f7fe fa19 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    461e:	4a11      	ldr	r2, [pc, #68]	; (4664 <opcode_0x46()+0x64>)
    4620:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4622:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4626:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4628:	4608      	mov	r0, r1
    462a:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    462c:	bf4c      	ite	mi
    462e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4632:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4636:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4638:	f7fe fcce 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    463c:	9901      	ldr	r1, [sp, #4]
    463e:	8820      	ldrh	r0, [r4, #0]
    4640:	f7fe fbc2 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4644:	8820      	ldrh	r0, [r4, #0]
    4646:	9901      	ldr	r1, [sp, #4]
    4648:	f7fe fbbe 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    464c:	4a06      	ldr	r2, [pc, #24]	; (4668 <opcode_0x46()+0x68>)
    464e:	882b      	ldrh	r3, [r5, #0]
    4650:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    4654:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    4656:	b280      	uxth	r0, r0
    4658:	b003      	add	sp, #12
    465a:	bd30      	pop	{r4, r5, pc}
    465c:	2001888c 	.word	0x2001888c
    4660:	2001888a 	.word	0x2001888a
    4664:	20004a08 	.word	0x20004a08
    4668:	20015418 	.word	0x20015418

0000466c <opcode_0x56()>:
uint16_t opcode_0x56() {
    466c:	b510      	push	{r4, lr}
    466e:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    4670:	4c11      	ldr	r4, [pc, #68]	; (46b8 <opcode_0x56()+0x4c>)
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    4672:	f7fe fce5 	bl	3040 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4676:	4a11      	ldr	r2, [pc, #68]	; (46bc <opcode_0x56()+0x50>)
    4678:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    467a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    467e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4680:	4608      	mov	r0, r1
    4682:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4684:	bf4c      	ite	mi
    4686:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    468a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    468e:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4690:	f7fe fca2 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4694:	8820      	ldrh	r0, [r4, #0]
    4696:	9901      	ldr	r1, [sp, #4]
    4698:	f7fe fb96 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    469c:	8820      	ldrh	r0, [r4, #0]
    469e:	9901      	ldr	r1, [sp, #4]
    46a0:	f7fe fb92 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    46a4:	4a06      	ldr	r2, [pc, #24]	; (46c0 <opcode_0x56()+0x54>)
    46a6:	4b07      	ldr	r3, [pc, #28]	; (46c4 <opcode_0x56()+0x58>)
    46a8:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    46ac:	881b      	ldrh	r3, [r3, #0]
    46ae:	4418      	add	r0, r3
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    46b0:	b280      	uxth	r0, r0
    46b2:	b002      	add	sp, #8
    46b4:	bd10      	pop	{r4, pc}
    46b6:	bf00      	nop
    46b8:	2001888a 	.word	0x2001888a
    46bc:	20004a08 	.word	0x20004a08
    46c0:	20016418 	.word	0x20016418
    46c4:	2001888c 	.word	0x2001888c

000046c8 <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    46c8:	b510      	push	{r4, lr}
    46ca:	b082      	sub	sp, #8
    write_byte(effective_address, local_data);
    46cc:	4c10      	ldr	r4, [pc, #64]	; (4710 <opcode_0x4E()+0x48>)
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    46ce:	f7fe fcf7 	bl	30c0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    46d2:	4a10      	ldr	r2, [pc, #64]	; (4714 <opcode_0x4E()+0x4c>)
    46d4:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    46d6:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    46da:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46dc:	4608      	mov	r0, r1
    46de:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    46e0:	bf4c      	ite	mi
    46e2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    46e6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    46ea:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    46ec:	f7fe fc74 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    46f0:	8820      	ldrh	r0, [r4, #0]
    46f2:	9901      	ldr	r1, [sp, #4]
    46f4:	f7fe fb68 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    46f8:	8820      	ldrh	r0, [r4, #0]
    46fa:	9901      	ldr	r1, [sp, #4]
    46fc:	f7fe fb64 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    4700:	4a05      	ldr	r2, [pc, #20]	; (4718 <opcode_0x4E()+0x50>)
    4702:	4b06      	ldr	r3, [pc, #24]	; (471c <opcode_0x4E()+0x54>)
    4704:	7a50      	ldrb	r0, [r2, #9]
    4706:	881b      	ldrh	r3, [r3, #0]
    4708:	4418      	add	r0, r3
} // 0x4E - LSR - Logical Shift Right - Absolute
    470a:	b280      	uxth	r0, r0
    470c:	b002      	add	sp, #8
    470e:	bd10      	pop	{r4, pc}
    4710:	2001888a 	.word	0x2001888a
    4714:	20004a08 	.word	0x20004a08
    4718:	20016418 	.word	0x20016418
    471c:	2001888c 	.word	0x2001888c

00004720 <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    4720:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4722:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    4724:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    4726:	f7fe fce7 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    472a:	4a10      	ldr	r2, [pc, #64]	; (476c <opcode_0x5E()+0x4c>)
    472c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    472e:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4732:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4734:	4c0e      	ldr	r4, [pc, #56]	; (4770 <opcode_0x5E()+0x50>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4736:	4608      	mov	r0, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4738:	bf4c      	ite	mi
    473a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    473e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4742:	9101      	str	r1, [sp, #4]
    4744:	7013      	strb	r3, [r2, #0]
    4746:	f7fe fc47 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    474a:	8820      	ldrh	r0, [r4, #0]
    474c:	9901      	ldr	r1, [sp, #4]
    474e:	f7fe fb3b 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4752:	8820      	ldrh	r0, [r4, #0]
    4754:	9901      	ldr	r1, [sp, #4]
    4756:	f7fe fb37 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    475a:	4a06      	ldr	r2, [pc, #24]	; (4774 <opcode_0x5E()+0x54>)
    475c:	4b06      	ldr	r3, [pc, #24]	; (4778 <opcode_0x5E()+0x58>)
    475e:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    4762:	881b      	ldrh	r3, [r3, #0]
    4764:	4418      	add	r0, r3
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    4766:	b280      	uxth	r0, r0
    4768:	b002      	add	sp, #8
    476a:	bd10      	pop	{r4, pc}
    476c:	20004a08 	.word	0x20004a08
    4770:	2001888a 	.word	0x2001888a
    4774:	20016418 	.word	0x20016418
    4778:	2001888c 	.word	0x2001888c

0000477c <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    477c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    477e:	4d19      	ldr	r5, [pc, #100]	; (47e4 <opcode_0x66()+0x68>)
    4780:	b083      	sub	sp, #12
    4782:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4784:	4c18      	ldr	r4, [pc, #96]	; (47e8 <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    4786:	8828      	ldrh	r0, [r5, #0]
    4788:	3001      	adds	r0, #1
    478a:	b280      	uxth	r0, r0
    478c:	f7fe f960 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4790:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4792:	b280      	uxth	r0, r0
    4794:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    4796:	f7fe f95b 	bl	2a50 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    479a:	4a14      	ldr	r2, [pc, #80]	; (47ec <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    479c:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47a0:	7813      	ldrb	r3, [r2, #0]
    47a2:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47a6:	bf14      	ite	ne
    47a8:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47ac:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47b0:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47b2:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    47b4:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    47b8:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    47ba:	4608      	mov	r0, r1
    47bc:	9101      	str	r1, [sp, #4]
    47be:	f7fe fc0b 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    47c2:	9901      	ldr	r1, [sp, #4]
    47c4:	8820      	ldrh	r0, [r4, #0]
    47c6:	f7fe faff 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    47ca:	8820      	ldrh	r0, [r4, #0]
    47cc:	9901      	ldr	r1, [sp, #4]
    47ce:	f7fe fafb 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    47d2:	4a07      	ldr	r2, [pc, #28]	; (47f0 <opcode_0x66()+0x74>)
    47d4:	882b      	ldrh	r3, [r5, #0]
    47d6:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    47da:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    47dc:	b280      	uxth	r0, r0
    47de:	b003      	add	sp, #12
    47e0:	bd30      	pop	{r4, r5, pc}
    47e2:	bf00      	nop
    47e4:	2001888c 	.word	0x2001888c
    47e8:	2001888a 	.word	0x2001888a
    47ec:	20004a08 	.word	0x20004a08
    47f0:	20016418 	.word	0x20016418

000047f4 <opcode_0x76()>:
uint16_t opcode_0x76() {
    47f4:	b510      	push	{r4, lr}
    47f6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    47f8:	f7fe fc22 	bl	3040 <Fetch_ZeroPage_X()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    47fc:	4a12      	ldr	r2, [pc, #72]	; (4848 <opcode_0x76()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    47fe:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4800:	4c12      	ldr	r4, [pc, #72]	; (484c <opcode_0x76()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4802:	7813      	ldrb	r3, [r2, #0]
    4804:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4808:	bf4c      	ite	mi
    480a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    480e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4812:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4814:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    4816:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    481a:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    481c:	4608      	mov	r0, r1
    481e:	9101      	str	r1, [sp, #4]
    4820:	f7fe fbda 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4824:	8820      	ldrh	r0, [r4, #0]
    4826:	9901      	ldr	r1, [sp, #4]
    4828:	f7fe face 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    482c:	8820      	ldrh	r0, [r4, #0]
    482e:	9901      	ldr	r1, [sp, #4]
    4830:	f7fe faca 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    4834:	4a06      	ldr	r2, [pc, #24]	; (4850 <opcode_0x76()+0x5c>)
    4836:	4b07      	ldr	r3, [pc, #28]	; (4854 <opcode_0x76()+0x60>)
    4838:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    483c:	881b      	ldrh	r3, [r3, #0]
    483e:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    4840:	b280      	uxth	r0, r0
    4842:	b002      	add	sp, #8
    4844:	bd10      	pop	{r4, pc}
    4846:	bf00      	nop
    4848:	20004a08 	.word	0x20004a08
    484c:	2001888a 	.word	0x2001888a
    4850:	20016418 	.word	0x20016418
    4854:	2001888c 	.word	0x2001888c

00004858 <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    4858:	b510      	push	{r4, lr}
    485a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    485c:	f7fe fc30 	bl	30c0 <Fetch_Absolute()>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4860:	4a12      	ldr	r2, [pc, #72]	; (48ac <opcode_0x6E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4862:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    4864:	4c12      	ldr	r4, [pc, #72]	; (48b0 <opcode_0x6E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4866:	7813      	ldrb	r3, [r2, #0]
    4868:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    486c:	bf4c      	ite	mi
    486e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4872:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    4876:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4878:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    487a:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    487e:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4880:	4608      	mov	r0, r1
    4882:	9101      	str	r1, [sp, #4]
    4884:	f7fe fba8 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4888:	8820      	ldrh	r0, [r4, #0]
    488a:	9901      	ldr	r1, [sp, #4]
    488c:	f7fe fa9c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4890:	8820      	ldrh	r0, [r4, #0]
    4892:	9901      	ldr	r1, [sp, #4]
    4894:	f7fe fa98 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    4898:	4a06      	ldr	r2, [pc, #24]	; (48b4 <opcode_0x6E()+0x5c>)
    489a:	4b07      	ldr	r3, [pc, #28]	; (48b8 <opcode_0x6E()+0x60>)
    489c:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    48a0:	881b      	ldrh	r3, [r3, #0]
    48a2:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    48a4:	b280      	uxth	r0, r0
    48a6:	b002      	add	sp, #8
    48a8:	bd10      	pop	{r4, pc}
    48aa:	bf00      	nop
    48ac:	20004a08 	.word	0x20004a08
    48b0:	2001888a 	.word	0x2001888a
    48b4:	20016418 	.word	0x20016418
    48b8:	2001888c 	.word	0x2001888c

000048bc <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    48bc:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    48be:	2000      	movs	r0, #0
uint16_t opcode_0x7E() {
    48c0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    48c2:	f7fe fc19 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    48c6:	4a12      	ldr	r2, [pc, #72]	; (4910 <opcode_0x7E()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    48c8:	07c4      	lsls	r4, r0, #31
    write_byte(effective_address, local_data);
    48ca:	4c12      	ldr	r4, [pc, #72]	; (4914 <opcode_0x7E()+0x58>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    48cc:	7813      	ldrb	r3, [r2, #0]
    48ce:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    48d2:	bf4c      	ite	mi
    48d4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    48d8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    48dc:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    48de:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    48e0:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    48e4:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    48e6:	4608      	mov	r0, r1
    48e8:	9101      	str	r1, [sp, #4]
    48ea:	f7fe fb75 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    48ee:	8820      	ldrh	r0, [r4, #0]
    48f0:	9901      	ldr	r1, [sp, #4]
    48f2:	f7fe fa69 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    48f6:	8820      	ldrh	r0, [r4, #0]
    48f8:	9901      	ldr	r1, [sp, #4]
    48fa:	f7fe fa65 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    48fe:	4a06      	ldr	r2, [pc, #24]	; (4918 <opcode_0x7E()+0x5c>)
    4900:	4b06      	ldr	r3, [pc, #24]	; (491c <opcode_0x7E()+0x60>)
    4902:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    4906:	881b      	ldrh	r3, [r3, #0]
    4908:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    490a:	b280      	uxth	r0, r0
    490c:	b002      	add	sp, #8
    490e:	bd10      	pop	{r4, pc}
    4910:	20004a08 	.word	0x20004a08
    4914:	2001888a 	.word	0x2001888a
    4918:	20016418 	.word	0x20016418
    491c:	2001888c 	.word	0x2001888c

00004920 <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    4920:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    4922:	4d18      	ldr	r5, [pc, #96]	; (4984 <opcode_0x26()+0x64>)
    4924:	b083      	sub	sp, #12
    4926:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4928:	4c17      	ldr	r4, [pc, #92]	; (4988 <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    492a:	8828      	ldrh	r0, [r5, #0]
    492c:	3001      	adds	r0, #1
    492e:	b280      	uxth	r0, r0
    4930:	f7fe f88e 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    4934:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4936:	b280      	uxth	r0, r0
    4938:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    493a:	f7fe f889 	bl	2a50 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    493e:	4a13      	ldr	r2, [pc, #76]	; (498c <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4940:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4944:	7813      	ldrb	r3, [r2, #0]
    4946:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    494a:	bf14      	ite	ne
    494c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4950:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4954:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4958:	7013      	strb	r3, [r2, #0]
    495a:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    495c:	4608      	mov	r0, r1
    495e:	9101      	str	r1, [sp, #4]
    4960:	f7fe fb3a 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    4964:	9901      	ldr	r1, [sp, #4]
    4966:	8820      	ldrh	r0, [r4, #0]
    4968:	f7fe fa2e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    496c:	8820      	ldrh	r0, [r4, #0]
    496e:	9901      	ldr	r1, [sp, #4]
    4970:	f7fe fa2a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    4974:	4a06      	ldr	r2, [pc, #24]	; (4990 <opcode_0x26()+0x70>)
    4976:	882b      	ldrh	r3, [r5, #0]
    4978:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    497c:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    497e:	b280      	uxth	r0, r0
    4980:	b003      	add	sp, #12
    4982:	bd30      	pop	{r4, r5, pc}
    4984:	2001888c 	.word	0x2001888c
    4988:	2001888a 	.word	0x2001888a
    498c:	20004a08 	.word	0x20004a08
    4990:	20015418 	.word	0x20015418

00004994 <opcode_0x36()>:
uint16_t opcode_0x36() {
    4994:	b510      	push	{r4, lr}
    4996:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    4998:	f7fe fb52 	bl	3040 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    499c:	4a11      	ldr	r2, [pc, #68]	; (49e4 <opcode_0x36()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    499e:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    49a0:	4c11      	ldr	r4, [pc, #68]	; (49e8 <opcode_0x36()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49a2:	7813      	ldrb	r3, [r2, #0]
    49a4:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49a8:	bf4c      	ite	mi
    49aa:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    49ae:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    49b2:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    49b6:	7013      	strb	r3, [r2, #0]
    49b8:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    49ba:	4608      	mov	r0, r1
    49bc:	9101      	str	r1, [sp, #4]
    49be:	f7fe fb0b 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    49c2:	8820      	ldrh	r0, [r4, #0]
    49c4:	9901      	ldr	r1, [sp, #4]
    49c6:	f7fe f9ff 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    49ca:	8820      	ldrh	r0, [r4, #0]
    49cc:	9901      	ldr	r1, [sp, #4]
    49ce:	f7fe f9fb 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    49d2:	4a06      	ldr	r2, [pc, #24]	; (49ec <opcode_0x36()+0x58>)
    49d4:	4b06      	ldr	r3, [pc, #24]	; (49f0 <opcode_0x36()+0x5c>)
    49d6:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    49da:	881b      	ldrh	r3, [r3, #0]
    49dc:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    49de:	b280      	uxth	r0, r0
    49e0:	b002      	add	sp, #8
    49e2:	bd10      	pop	{r4, pc}
    49e4:	20004a08 	.word	0x20004a08
    49e8:	2001888a 	.word	0x2001888a
    49ec:	20015418 	.word	0x20015418
    49f0:	2001888c 	.word	0x2001888c

000049f4 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    49f4:	b510      	push	{r4, lr}
    49f6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    49f8:	f7fe fb62 	bl	30c0 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    49fc:	4a11      	ldr	r2, [pc, #68]	; (4a44 <opcode_0x2E()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    49fe:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4a00:	4c11      	ldr	r4, [pc, #68]	; (4a48 <opcode_0x2E()+0x54>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4a02:	7813      	ldrb	r3, [r2, #0]
    4a04:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4a08:	bf4c      	ite	mi
    4a0a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4a0e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4a12:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4a16:	7013      	strb	r3, [r2, #0]
    4a18:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4a1a:	4608      	mov	r0, r1
    4a1c:	9101      	str	r1, [sp, #4]
    4a1e:	f7fe fadb 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4a22:	8820      	ldrh	r0, [r4, #0]
    4a24:	9901      	ldr	r1, [sp, #4]
    4a26:	f7fe f9cf 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4a2a:	8820      	ldrh	r0, [r4, #0]
    4a2c:	9901      	ldr	r1, [sp, #4]
    4a2e:	f7fe f9cb 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    4a32:	4a06      	ldr	r2, [pc, #24]	; (4a4c <opcode_0x2E()+0x58>)
    4a34:	4b06      	ldr	r3, [pc, #24]	; (4a50 <opcode_0x2E()+0x5c>)
    4a36:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    4a3a:	881b      	ldrh	r3, [r3, #0]
    4a3c:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    4a3e:	b280      	uxth	r0, r0
    4a40:	b002      	add	sp, #8
    4a42:	bd10      	pop	{r4, pc}
    4a44:	20004a08 	.word	0x20004a08
    4a48:	2001888a 	.word	0x2001888a
    4a4c:	20015418 	.word	0x20015418
    4a50:	2001888c 	.word	0x2001888c

00004a54 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    4a54:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    4a56:	2000      	movs	r0, #0
uint16_t opcode_0x3E() {
    4a58:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    4a5a:	f7fe fb4d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4a5e:	4a12      	ldr	r2, [pc, #72]	; (4aa8 <opcode_0x3E()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4a60:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    4a62:	4c12      	ldr	r4, [pc, #72]	; (4aac <opcode_0x3E()+0x58>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4a64:	7813      	ldrb	r3, [r2, #0]
    4a66:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4a6a:	bf4c      	ite	mi
    4a6c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4a70:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4a74:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    4a78:	7013      	strb	r3, [r2, #0]
    4a7a:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    4a7c:	4608      	mov	r0, r1
    4a7e:	9101      	str	r1, [sp, #4]
    4a80:	f7fe faaa 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    4a84:	8820      	ldrh	r0, [r4, #0]
    4a86:	9901      	ldr	r1, [sp, #4]
    4a88:	f7fe f99e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4a8c:	8820      	ldrh	r0, [r4, #0]
    4a8e:	9901      	ldr	r1, [sp, #4]
    4a90:	f7fe f99a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    4a94:	4a06      	ldr	r2, [pc, #24]	; (4ab0 <opcode_0x3E()+0x5c>)
    4a96:	4b07      	ldr	r3, [pc, #28]	; (4ab4 <opcode_0x3E()+0x60>)
    4a98:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    4a9c:	881b      	ldrh	r3, [r3, #0]
    4a9e:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    4aa0:	b280      	uxth	r0, r0
    4aa2:	b002      	add	sp, #8
    4aa4:	bd10      	pop	{r4, pc}
    4aa6:	bf00      	nop
    4aa8:	20004a08 	.word	0x20004a08
    4aac:	2001888a 	.word	0x2001888a
    4ab0:	20015418 	.word	0x20015418
    4ab4:	2001888c 	.word	0x2001888c

00004ab8 <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    4ab8:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    4aba:	4c52      	ldr	r4, [pc, #328]	; (4c04 <Branch_Taken()+0x14c>)
    4abc:	2100      	movs	r1, #0
    4abe:	8820      	ldrh	r0, [r4, #0]
    4ac0:	3001      	adds	r0, #1
    4ac2:	b280      	uxth	r0, r0
    4ac4:	f7fd ffc4 	bl	2a50 <read_byte(unsigned short, bool)>

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    effective_address = (register_pc + 2) + effective_address;
    4ac8:	8821      	ldrh	r1, [r4, #0]
    if ((reg_data & 0x0080) == 0x0080) {
    4aca:	0605      	lsls	r5, r0, #24
    effective_address = Sign_Extend16(Fetch_Immediate(1));
    4acc:	b283      	uxth	r3, r0
    effective_address = (register_pc + 2) + effective_address;
    4ace:	f101 0002 	add.w	r0, r1, #2
    4ad2:	4d4d      	ldr	r5, [pc, #308]	; (4c08 <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    4ad4:	bf48      	it	mi
    4ad6:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    4ada:	b280      	uxth	r0, r0
    4adc:	4403      	add	r3, r0
    4ade:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4ae0:	4059      	eors	r1, r3
    effective_address = (register_pc + 2) + effective_address;
    4ae2:	802b      	strh	r3, [r5, #0]
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    4ae4:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    4ae8:	d006      	beq.n	4af8 <Branch_Taken()+0x40>
    return read_byte(register_pc+offset, false);
    4aea:	2100      	movs	r1, #0
    4aec:	f7fd ffb0 	bl	2a50 <read_byte(unsigned short, bool)>
    4af0:	8820      	ldrh	r0, [r4, #0]
    4af2:	2100      	movs	r1, #0
    4af4:	3003      	adds	r0, #3
    4af6:	b280      	uxth	r0, r0
    4af8:	f7fd ffaa 	bl	2a50 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    4afc:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    4afe:	4a43      	ldr	r2, [pc, #268]	; (4c0c <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4b04:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    4b06:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4b08:	d376      	bcc.n	4bf8 <Branch_Taken()+0x140>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4b0a:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    4b0e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4b12:	d305      	bcc.n	4b20 <Branch_Taken()+0x68>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4b14:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4b18:	b292      	uxth	r2, r2
    4b1a:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    4b1e:	d36b      	bcc.n	4bf8 <Branch_Taken()+0x140>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b20:	4a3b      	ldr	r2, [pc, #236]	; (4c10 <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    4b22:	2000      	movs	r0, #0
    4b24:	493b      	ldr	r1, [pc, #236]	; (4c14 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b26:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4b28:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4b2a:	2a01      	cmp	r2, #1
    4b2c:	d005      	beq.n	4b3a <Branch_Taken()+0x82>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4b2e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4b32:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4b36:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    4b3a:	4a37      	ldr	r2, [pc, #220]	; (4c18 <Branch_Taken()+0x160>)
    4b3c:	7812      	ldrb	r2, [r2, #0]
    4b3e:	b94a      	cbnz	r2, 4b54 <Branch_Taken()+0x9c>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4b40:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4b44:	680a      	ldr	r2, [r1, #0]
    4b46:	04d0      	lsls	r0, r2, #19
    4b48:	d4fc      	bmi.n	4b44 <Branch_Taken()+0x8c>
    while (CLK0) {}      // Wait for CLK0 to become low
    4b4a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4b4e:	680a      	ldr	r2, [r1, #0]
    4b50:	04d2      	lsls	r2, r2, #19
    4b52:	d5fc      	bpl.n	4b4e <Branch_Taken()+0x96>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4b54:	4e31      	ldr	r6, [pc, #196]	; (4c1c <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b56:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    4b5a:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4b5c:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b5e:	06d8      	lsls	r0, r3, #27
    4b60:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b64:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b68:	6829      	ldr	r1, [r5, #0]
    4b6a:	4a2d      	ldr	r2, [pc, #180]	; (4c20 <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4b6c:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b70:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b72:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b74:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4b78:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b7c:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4b7e:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4b82:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b86:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4b88:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4b8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b90:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b92:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4b94:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b96:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4b98:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4b9c:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4b9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4ba2:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba4:	491f      	ldr	r1, [pc, #124]	; (4c24 <Branch_Taken()+0x16c>)
    4ba6:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4ba8:	4d1f      	ldr	r5, [pc, #124]	; (4c28 <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4baa:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4bac:	0559      	lsls	r1, r3, #21
    4bae:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    4bb2:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4bb4:	0359      	lsls	r1, r3, #13
    4bb6:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    4bba:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4bbc:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bbe:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4bc2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4bc6:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4bc8:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bca:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4bcc:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4bd0:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4bd8:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bda:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4bdc:	682c      	ldr	r4, [r5, #0]
    4bde:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4be2:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4be4:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4be6:	4911      	ldr	r1, [pc, #68]	; (4c2c <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4be8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4bea:	4a11      	ldr	r2, [pc, #68]	; (4c30 <Branch_Taken()+0x178>)
    4bec:	680c      	ldr	r4, [r1, #0]
    4bee:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4bf0:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4bf2:	4303      	orrs	r3, r0
    4bf4:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4bf8:	4a0e      	ldr	r2, [pc, #56]	; (4c34 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4bfa:	7812      	ldrb	r2, [r2, #0]
    4bfc:	2a01      	cmp	r2, #1
    4bfe:	d98f      	bls.n	4b20 <Branch_Taken()+0x68>
    4c00:	bd70      	pop	{r4, r5, r6, pc}
    4c02:	bf00      	nop
    4c04:	2001888c 	.word	0x2001888c
    4c08:	2001888a 	.word	0x2001888a
    4c0c:	20018888 	.word	0x20018888
    4c10:	200188ac 	.word	0x200188ac
    4c14:	200188a5 	.word	0x200188a5
    4c18:	20004a06 	.word	0x20004a06
    4c1c:	42004000 	.word	0x42004000
    4c20:	6dfffff3 	.word	0x6dfffff3
    4c24:	cff3efff 	.word	0xcff3efff
    4c28:	42008000 	.word	0x42008000
    4c2c:	4200c000 	.word	0x4200c000
    4c30:	7fffff6f 	.word	0x7fffff6f
    4c34:	2001889c 	.word	0x2001889c

00004c38 <opcode_0xF0()>:
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    4c38:	4b0c      	ldr	r3, [pc, #48]	; (4c6c <opcode_0xF0()+0x34>)
uint16_t opcode_0xF0() {
    4c3a:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	4c0c      	ldr	r4, [pc, #48]	; (4c70 <opcode_0xF0()+0x38>)
    4c40:	f3c3 0140 	ubfx	r1, r3, #1, #1
    4c44:	079b      	lsls	r3, r3, #30
    4c46:	d503      	bpl.n	4c50 <opcode_0xF0()+0x18>
    4c48:	f7ff ff36 	bl	4ab8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xF0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    4c4c:	8820      	ldrh	r0, [r4, #0]
    4c4e:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xF0].length;
    4c50:	4b08      	ldr	r3, [pc, #32]	; (4c74 <opcode_0xF0()+0x3c>)
    4c52:	8822      	ldrh	r2, [r4, #0]
    4c54:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    4c58:	4413      	add	r3, r2
    4c5a:	b29b      	uxth	r3, r3
    return read_byte(register_pc+offset, false);
    4c5c:	1c58      	adds	r0, r3, #1
    4c5e:	8023      	strh	r3, [r4, #0]
    4c60:	b280      	uxth	r0, r0
    4c62:	f7fd fef5 	bl	2a50 <read_byte(unsigned short, bool)>
} // 0xF0 - BEQ - Branch on Zero Set
    4c66:	8820      	ldrh	r0, [r4, #0]
    4c68:	bd10      	pop	{r4, pc}
    4c6a:	bf00      	nop
    4c6c:	20004a08 	.word	0x20004a08
    4c70:	2001888c 	.word	0x2001888c
    4c74:	20018418 	.word	0x20018418

00004c78 <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    4c78:	4b0b      	ldr	r3, [pc, #44]	; (4ca8 <opcode_0xD0()+0x30>)
uint16_t opcode_0xD0() {
    4c7a:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    4c7c:	781b      	ldrb	r3, [r3, #0]
    4c7e:	4c0b      	ldr	r4, [pc, #44]	; (4cac <opcode_0xD0()+0x34>)
    4c80:	079b      	lsls	r3, r3, #30
    4c82:	d403      	bmi.n	4c8c <opcode_0xD0()+0x14>
    4c84:	f7ff ff18 	bl	4ab8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0xD0].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    4c88:	8820      	ldrh	r0, [r4, #0]
    4c8a:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0xD0].length;
    4c8c:	4b08      	ldr	r3, [pc, #32]	; (4cb0 <opcode_0xD0()+0x38>)
    4c8e:	2100      	movs	r1, #0
    4c90:	8822      	ldrh	r2, [r4, #0]
    4c92:	f893 3a71 	ldrb.w	r3, [r3, #2673]	; 0xa71
    4c96:	4413      	add	r3, r2
    4c98:	b29b      	uxth	r3, r3
    4c9a:	1c58      	adds	r0, r3, #1
    4c9c:	8023      	strh	r3, [r4, #0]
    4c9e:	b280      	uxth	r0, r0
    4ca0:	f7fd fed6 	bl	2a50 <read_byte(unsigned short, bool)>
} // 0xD0 - BNE - Branch on Zero Clear
    4ca4:	8820      	ldrh	r0, [r4, #0]
    4ca6:	bd10      	pop	{r4, pc}
    4ca8:	20004a08 	.word	0x20004a08
    4cac:	2001888c 	.word	0x2001888c
    4cb0:	20017418 	.word	0x20017418

00004cb4 <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    4cb4:	4b0c      	ldr	r3, [pc, #48]	; (4ce8 <opcode_0x70()+0x34>)
uint16_t opcode_0x70() {
    4cb6:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	4c0c      	ldr	r4, [pc, #48]	; (4cec <opcode_0x70()+0x38>)
    4cbc:	f3c3 1180 	ubfx	r1, r3, #6, #1
    4cc0:	065b      	lsls	r3, r3, #25
    4cc2:	d503      	bpl.n	4ccc <opcode_0x70()+0x18>
    4cc4:	f7ff fef8 	bl	4ab8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x70].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    4cc8:	8820      	ldrh	r0, [r4, #0]
    4cca:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x70].length;
    4ccc:	4b08      	ldr	r3, [pc, #32]	; (4cf0 <opcode_0x70()+0x3c>)
    4cce:	8822      	ldrh	r2, [r4, #0]
    4cd0:	f893 36f1 	ldrb.w	r3, [r3, #1777]	; 0x6f1
    4cd4:	4413      	add	r3, r2
    4cd6:	b29b      	uxth	r3, r3
    4cd8:	1c58      	adds	r0, r3, #1
    4cda:	8023      	strh	r3, [r4, #0]
    4cdc:	b280      	uxth	r0, r0
    4cde:	f7fd feb7 	bl	2a50 <read_byte(unsigned short, bool)>
} // 0x70 - BVS - Branch on Overflow Set
    4ce2:	8820      	ldrh	r0, [r4, #0]
    4ce4:	bd10      	pop	{r4, pc}
    4ce6:	bf00      	nop
    4ce8:	20004a08 	.word	0x20004a08
    4cec:	2001888c 	.word	0x2001888c
    4cf0:	20016418 	.word	0x20016418

00004cf4 <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    4cf4:	4b0b      	ldr	r3, [pc, #44]	; (4d24 <opcode_0x50()+0x30>)
uint16_t opcode_0x50() {
    4cf6:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    4cf8:	781b      	ldrb	r3, [r3, #0]
    4cfa:	4c0b      	ldr	r4, [pc, #44]	; (4d28 <opcode_0x50()+0x34>)
    4cfc:	065b      	lsls	r3, r3, #25
    4cfe:	d403      	bmi.n	4d08 <opcode_0x50()+0x14>
    4d00:	f7ff feda 	bl	4ab8 <Branch_Taken()>
        register_pc = register_pc + opcode_info[0x50].length;
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    4d04:	8820      	ldrh	r0, [r4, #0]
    4d06:	bd10      	pop	{r4, pc}
        register_pc = register_pc + opcode_info[0x50].length;
    4d08:	4b08      	ldr	r3, [pc, #32]	; (4d2c <opcode_0x50()+0x38>)
    4d0a:	2100      	movs	r1, #0
    4d0c:	8822      	ldrh	r2, [r4, #0]
    4d0e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
    4d12:	4413      	add	r3, r2
    4d14:	b29b      	uxth	r3, r3
    4d16:	1c58      	adds	r0, r3, #1
    4d18:	8023      	strh	r3, [r4, #0]
    4d1a:	b280      	uxth	r0, r0
    4d1c:	f7fd fe98 	bl	2a50 <read_byte(unsigned short, bool)>
} // 0x50 - BVC - Branch on Overflow Clear
    4d20:	8820      	ldrh	r0, [r4, #0]
    4d22:	bd10      	pop	{r4, pc}
    4d24:	20004a08 	.word	0x20004a08
    4d28:	2001888c 	.word	0x2001888c
    4d2c:	20016418 	.word	0x20016418

00004d30 <opcode_0x4C()>:
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    4d30:	b570      	push	{r4, r5, r6, lr}
    4d32:	4d4b      	ldr	r5, [pc, #300]	; (4e60 <opcode_0x4C()+0x130>)
    4d34:	2100      	movs	r1, #0
    4d36:	8828      	ldrh	r0, [r5, #0]
    4d38:	3001      	adds	r0, #1
    4d3a:	b280      	uxth	r0, r0
    4d3c:	f7fd fe88 	bl	2a50 <read_byte(unsigned short, bool)>
    4d40:	882b      	ldrh	r3, [r5, #0]
    4d42:	4604      	mov	r4, r0
    4d44:	2100      	movs	r1, #0
    4d46:	1c98      	adds	r0, r3, #2
    4d48:	b280      	uxth	r0, r0
    4d4a:	f7fd fe81 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    4d4e:	4a45      	ldr	r2, [pc, #276]	; (4e64 <opcode_0x4C()+0x134>)
    4d50:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    4d54:	4b44      	ldr	r3, [pc, #272]	; (4e68 <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    4d56:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4d58:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    4d5c:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    4d5e:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    4d60:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4d62:	d378      	bcc.n	4e56 <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4d64:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d6c:	d305      	bcc.n	4d7a <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4d6e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4d72:	b29b      	uxth	r3, r3
    4d74:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4d78:	d36d      	bcc.n	4e56 <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4d7a:	4b3c      	ldr	r3, [pc, #240]	; (4e6c <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    4d7c:	2100      	movs	r1, #0
    4d7e:	4a3c      	ldr	r2, [pc, #240]	; (4e70 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4d80:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4d82:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4d84:	2b01      	cmp	r3, #1
    4d86:	d005      	beq.n	4d94 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4d88:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4d8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4d94:	4b37      	ldr	r3, [pc, #220]	; (4e74 <opcode_0x4C()+0x144>)
    4d96:	781b      	ldrb	r3, [r3, #0]
    4d98:	b94b      	cbnz	r3, 4dae <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4d9a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4d9e:	6813      	ldr	r3, [r2, #0]
    4da0:	04d9      	lsls	r1, r3, #19
    4da2:	d4fc      	bmi.n	4d9e <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4da4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4da8:	6813      	ldr	r3, [r2, #0]
    4daa:	04db      	lsls	r3, r3, #19
    4dac:	d5fc      	bpl.n	4da8 <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4dae:	4d32      	ldr	r5, [pc, #200]	; (4e78 <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4db0:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4db4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4db6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4db8:	06c1      	lsls	r1, r0, #27
    4dba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4dbe:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4dc2:	6832      	ldr	r2, [r6, #0]
    4dc4:	4b2d      	ldr	r3, [pc, #180]	; (4e7c <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4dc6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4dca:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4dce:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4dd0:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4dd2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4dd6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4dda:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4ddc:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4de0:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4de4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4de6:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4dea:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4dee:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4df0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4df2:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4df4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4df6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4dfa:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e00:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e02:	4a1f      	ldr	r2, [pc, #124]	; (4e80 <opcode_0x4C()+0x150>)
    4e04:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e06:	4e1f      	ldr	r6, [pc, #124]	; (4e84 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4e08:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4e0a:	0542      	lsls	r2, r0, #21
    4e0c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4e10:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4e12:	0342      	lsls	r2, r0, #13
    4e14:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4e18:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4e1a:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4e1c:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4e24:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4e26:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e28:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4e2c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4e30:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e32:	6832      	ldr	r2, [r6, #0]
    4e34:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4e38:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e3a:	4a13      	ldr	r2, [pc, #76]	; (4e88 <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4e3c:	ea43 030c 	orr.w	r3, r3, ip
    4e40:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4e42:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e44:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4e4a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4e4c:	4323      	orrs	r3, r4
    4e4e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4e50:	430b      	orrs	r3, r1
    4e52:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    4e54:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4e56:	4b0d      	ldr	r3, [pc, #52]	; (4e8c <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	2b01      	cmp	r3, #1
    4e5c:	d98d      	bls.n	4d7a <opcode_0x4C()+0x4a>
    4e5e:	bd70      	pop	{r4, r5, r6, pc}
    4e60:	2001888c 	.word	0x2001888c
    4e64:	2001888a 	.word	0x2001888a
    4e68:	20018888 	.word	0x20018888
    4e6c:	200188ac 	.word	0x200188ac
    4e70:	200188a5 	.word	0x200188a5
    4e74:	20004a06 	.word	0x20004a06
    4e78:	42004000 	.word	0x42004000
    4e7c:	6dfffff3 	.word	0x6dfffff3
    4e80:	cff3efff 	.word	0xcff3efff
    4e84:	42008000 	.word	0x42008000
    4e88:	7fffff6f 	.word	0x7fffff6f
    4e8c:	2001889c 	.word	0x2001889c

00004e90 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    4e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    4e92:	4e52      	ldr	r6, [pc, #328]	; (4fdc <opcode_0x6C()+0x14c>)
    4e94:	2100      	movs	r1, #0
    4e96:	8830      	ldrh	r0, [r6, #0]
    4e98:	3001      	adds	r0, #1
    4e9a:	b280      	uxth	r0, r0
    4e9c:	f7fd fdd8 	bl	2a50 <read_byte(unsigned short, bool)>
    4ea0:	8833      	ldrh	r3, [r6, #0]
    4ea2:	4604      	mov	r4, r0
    4ea4:	2100      	movs	r1, #0
    4ea6:	1c98      	adds	r0, r3, #2
    4ea8:	b280      	uxth	r0, r0
    4eaa:	f7fd fdd1 	bl	2a50 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    4eae:	2100      	movs	r1, #0
    4eb0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4eb4:	b284      	uxth	r4, r0
    4eb6:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    4eb8:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    4eba:	f7fd fdc9 	bl	2a50 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    4ebe:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    4ec0:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    4ec2:	b2a0      	uxth	r0, r4
    4ec4:	f7fd fdc4 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    4ec8:	4945      	ldr	r1, [pc, #276]	; (4fe0 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    4eca:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    4ecc:	4a45      	ldr	r2, [pc, #276]	; (4fe4 <opcode_0x6C()+0x154>)
    4ece:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    4ed0:	1943      	adds	r3, r0, r5
    4ed2:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4ed4:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    4ed6:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    4ed8:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4eda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4ede:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    4ee0:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4ee2:	d376      	bcc.n	4fd2 <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    4ee4:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    4ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4eec:	d305      	bcc.n	4efa <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4eee:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    4ef2:	b29b      	uxth	r3, r3
    4ef4:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    4ef8:	d36b      	bcc.n	4fd2 <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4efa:	4b3b      	ldr	r3, [pc, #236]	; (4fe8 <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    4efc:	2100      	movs	r1, #0
    4efe:	4a3b      	ldr	r2, [pc, #236]	; (4fec <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4f00:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    4f02:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4f04:	2b01      	cmp	r3, #1
    4f06:	d005      	beq.n	4f14 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    4f08:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    4f0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    4f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    4f14:	4b36      	ldr	r3, [pc, #216]	; (4ff0 <opcode_0x6C()+0x160>)
    4f16:	781b      	ldrb	r3, [r3, #0]
    4f18:	b94b      	cbnz	r3, 4f2e <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4f1a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4f1e:	6813      	ldr	r3, [r2, #0]
    4f20:	04d9      	lsls	r1, r3, #19
    4f22:	d4fc      	bmi.n	4f1e <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    4f24:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4f28:	6813      	ldr	r3, [r2, #0]
    4f2a:	04db      	lsls	r3, r3, #19
    4f2c:	d5fc      	bpl.n	4f28 <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4f2e:	4d31      	ldr	r5, [pc, #196]	; (4ff4 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f30:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    4f34:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4f36:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4f38:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f3a:	4f2f      	ldr	r7, [pc, #188]	; (4ff8 <opcode_0x6C()+0x168>)
    4f3c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f40:	4b2e      	ldr	r3, [pc, #184]	; (4ffc <opcode_0x6C()+0x16c>)
    4f42:	6832      	ldr	r2, [r6, #0]
    4f44:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4f46:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4f48:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4f4c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4f50:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    4f52:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    4f56:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4f5a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4f5c:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4f60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4f64:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4f66:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4f68:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4f6a:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4f6c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f70:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4f76:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4f78:	4a21      	ldr	r2, [pc, #132]	; (5000 <opcode_0x6C()+0x170>)
    4f7a:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f7c:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4f7e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4f80:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f82:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4f86:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4f8a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    4f8e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4f90:	0342      	lsls	r2, r0, #13
    4f92:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    4f96:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4f98:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4f9a:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4fa2:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4fa4:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4fa6:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4faa:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    4fae:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4fb0:	683a      	ldr	r2, [r7, #0]
    4fb2:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4fb6:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4fb8:	4a12      	ldr	r2, [pc, #72]	; (5004 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4fba:	4333      	orrs	r3, r6
    4fbc:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4fbe:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4fc0:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4fc6:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4fc8:	4323      	orrs	r3, r4
    4fca:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4fcc:	430b      	orrs	r3, r1
    4fce:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    4fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4fd2:	4b0d      	ldr	r3, [pc, #52]	; (5008 <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    4fd4:	781b      	ldrb	r3, [r3, #0]
    4fd6:	2b01      	cmp	r3, #1
    4fd8:	d98f      	bls.n	4efa <opcode_0x6C()+0x6a>
    4fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fdc:	2001888c 	.word	0x2001888c
    4fe0:	2001888a 	.word	0x2001888a
    4fe4:	20018888 	.word	0x20018888
    4fe8:	200188ac 	.word	0x200188ac
    4fec:	200188a5 	.word	0x200188a5
    4ff0:	20004a06 	.word	0x20004a06
    4ff4:	42004000 	.word	0x42004000
    4ff8:	42008000 	.word	0x42008000
    4ffc:	6dfffff3 	.word	0x6dfffff3
    5000:	cff3efff 	.word	0xcff3efff
    5004:	7fffff6f 	.word	0x7fffff6f
    5008:	2001889c 	.word	0x2001889c

0000500c <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    500e:	4d57      	ldr	r5, [pc, #348]	; (516c <opcode_0x20()+0x160>)
    5010:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    5012:	4c57      	ldr	r4, [pc, #348]	; (5170 <opcode_0x20()+0x164>)
    5014:	8828      	ldrh	r0, [r5, #0]
    5016:	3001      	adds	r0, #1
    5018:	b280      	uxth	r0, r0
    501a:	f7fd fd19 	bl	2a50 <read_byte(unsigned short, bool)>
    501e:	882b      	ldrh	r3, [r5, #0]
    5020:	4606      	mov	r6, r0
    5022:	2100      	movs	r1, #0
    5024:	1c98      	adds	r0, r3, #2
    5026:	b280      	uxth	r0, r0
    5028:	f7fd fd12 	bl	2a50 <read_byte(unsigned short, bool)>
    502c:	7823      	ldrb	r3, [r4, #0]
    502e:	4607      	mov	r7, r0
    5030:	2100      	movs	r1, #0
    5032:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    5036:	f7fd fd0b 	bl	2a50 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    503a:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    503c:	7820      	ldrb	r0, [r4, #0]
    503e:	0a09      	lsrs	r1, r1, #8
    5040:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5044:	f7fd fec0 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    5048:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    504a:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    504c:	3b01      	subs	r3, #1
    504e:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    5050:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    5054:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    5056:	f7fd feb7 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    505a:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    505c:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    5060:	4a44      	ldr	r2, [pc, #272]	; (5174 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    5062:	3b01      	subs	r3, #1
    5064:	b280      	uxth	r0, r0
    5066:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5068:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    506c:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    506e:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5070:	d376      	bcc.n	5160 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    5072:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    5076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    507a:	d305      	bcc.n	5088 <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    507c:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    5080:	b29b      	uxth	r3, r3
    5082:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    5086:	d36b      	bcc.n	5160 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5088:	4b3b      	ldr	r3, [pc, #236]	; (5178 <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    508a:	2100      	movs	r1, #0
    508c:	4a3b      	ldr	r2, [pc, #236]	; (517c <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    508e:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    5090:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5092:	2b01      	cmp	r3, #1
    5094:	d005      	beq.n	50a2 <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5096:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    509a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    509e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    50a2:	4b37      	ldr	r3, [pc, #220]	; (5180 <opcode_0x20()+0x174>)
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	b94b      	cbnz	r3, 50bc <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    50a8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    50ac:	6813      	ldr	r3, [r2, #0]
    50ae:	04d9      	lsls	r1, r3, #19
    50b0:	d4fc      	bmi.n	50ac <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    50b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    50b6:	6813      	ldr	r3, [r2, #0]
    50b8:	04db      	lsls	r3, r3, #19
    50ba:	d5fc      	bpl.n	50b6 <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    50bc:	4d31      	ldr	r5, [pc, #196]	; (5184 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50be:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    50c2:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    50c4:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    50c6:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50c8:	4f2f      	ldr	r7, [pc, #188]	; (5188 <opcode_0x20()+0x17c>)
    50ca:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50ce:	4b2f      	ldr	r3, [pc, #188]	; (518c <opcode_0x20()+0x180>)
    50d0:	6832      	ldr	r2, [r6, #0]
    50d2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    50d4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    50d6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    50da:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    50de:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    50e0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    50e4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    50e8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    50ea:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    50ee:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    50f2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    50f4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    50f6:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    50f8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    50fa:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    50fe:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5104:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5106:	4a22      	ldr	r2, [pc, #136]	; (5190 <opcode_0x20()+0x184>)
    5108:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    510a:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    510c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    510e:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5110:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5114:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5118:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    511c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    511e:	0342      	lsls	r2, r0, #13
    5120:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5124:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5126:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5128:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5130:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5132:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5134:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5138:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    513c:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    513e:	683a      	ldr	r2, [r7, #0]
    5140:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5144:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5146:	4a13      	ldr	r2, [pc, #76]	; (5194 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5148:	4333      	orrs	r3, r6
    514a:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    514c:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    514e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5150:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5154:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5156:	4323      	orrs	r3, r4
    5158:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    515a:	430b      	orrs	r3, r1
    515c:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5160:	4b0d      	ldr	r3, [pc, #52]	; (5198 <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    5162:	781b      	ldrb	r3, [r3, #0]
    5164:	2b01      	cmp	r3, #1
    5166:	d98f      	bls.n	5088 <opcode_0x20()+0x7c>
    5168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    516a:	bf00      	nop
    516c:	2001888c 	.word	0x2001888c
    5170:	20004a09 	.word	0x20004a09
    5174:	20018888 	.word	0x20018888
    5178:	200188ac 	.word	0x200188ac
    517c:	200188a5 	.word	0x200188a5
    5180:	20004a06 	.word	0x20004a06
    5184:	42004000 	.word	0x42004000
    5188:	42008000 	.word	0x42008000
    518c:	6dfffff3 	.word	0x6dfffff3
    5190:	cff3efff 	.word	0xcff3efff
    5194:	7fffff6f 	.word	0x7fffff6f
    5198:	2001889c 	.word	0x2001889c

0000519c <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    519e:	4d58      	ldr	r5, [pc, #352]	; (5300 <opcode_0x40()+0x164>)
    51a0:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    51a2:	4c58      	ldr	r4, [pc, #352]	; (5304 <opcode_0x40()+0x168>)
    51a4:	8828      	ldrh	r0, [r5, #0]
    51a6:	3001      	adds	r0, #1
    51a8:	b280      	uxth	r0, r0
    51aa:	f7fd fc51 	bl	2a50 <read_byte(unsigned short, bool)>
    51ae:	7820      	ldrb	r0, [r4, #0]
    51b0:	2100      	movs	r1, #0
    51b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    51b6:	f7fd fc4b 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    51ba:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    51bc:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    51be:	3301      	adds	r3, #1
    51c0:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    51c2:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    51c6:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    51c8:	f7fd fc42 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    51cc:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    51ce:	4a4e      	ldr	r2, [pc, #312]	; (5308 <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    51d0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    51d2:	3301      	adds	r3, #1
    51d4:	7010      	strb	r0, [r2, #0]
    51d6:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    51d8:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    51dc:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    51de:	f7fd fc37 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    51e2:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    51e4:	4606      	mov	r6, r0
    51e6:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    51e8:	3301      	adds	r3, #1
    51ea:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    51ec:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    51f0:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    51f2:	f7fd fc2d 	bl	2a50 <read_byte(unsigned short, bool)>
    current_address = local_address;
    51f6:	4b45      	ldr	r3, [pc, #276]	; (530c <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    51f8:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    51fc:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    51fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    5202:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    5204:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5206:	d376      	bcc.n	52f6 <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    5208:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    520c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5210:	d305      	bcc.n	521e <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    5212:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    5216:	b29b      	uxth	r3, r3
    5218:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    521c:	d36b      	bcc.n	52f6 <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    521e:	4b3c      	ldr	r3, [pc, #240]	; (5310 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    5220:	2100      	movs	r1, #0
    5222:	4a3c      	ldr	r2, [pc, #240]	; (5314 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5224:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    5226:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    5228:	2b01      	cmp	r3, #1
    522a:	d005      	beq.n	5238 <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    522c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5230:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    5238:	4b37      	ldr	r3, [pc, #220]	; (5318 <opcode_0x40()+0x17c>)
    523a:	781b      	ldrb	r3, [r3, #0]
    523c:	b94b      	cbnz	r3, 5252 <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    523e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5242:	6813      	ldr	r3, [r2, #0]
    5244:	04d9      	lsls	r1, r3, #19
    5246:	d4fc      	bmi.n	5242 <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    5248:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    524c:	6813      	ldr	r3, [r2, #0]
    524e:	04db      	lsls	r3, r3, #19
    5250:	d5fc      	bpl.n	524c <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    5252:	4d32      	ldr	r5, [pc, #200]	; (531c <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5254:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    5258:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    525a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    525c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    525e:	4f30      	ldr	r7, [pc, #192]	; (5320 <opcode_0x40()+0x184>)
    5260:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5264:	4b2f      	ldr	r3, [pc, #188]	; (5324 <opcode_0x40()+0x188>)
    5266:	6832      	ldr	r2, [r6, #0]
    5268:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    526a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    526c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    5270:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5274:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    5276:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    527a:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    527e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    5280:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5288:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    528a:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    528c:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    528e:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5290:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5294:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    529a:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    529c:	4a22      	ldr	r2, [pc, #136]	; (5328 <opcode_0x40()+0x18c>)
    529e:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    52a0:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    52a2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    52a4:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    52a6:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    52aa:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    52ae:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    52b2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    52b4:	0342      	lsls	r2, r0, #13
    52b6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    52ba:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    52bc:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    52be:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    52c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    52c6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    52c8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    52ca:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    52ce:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    52d2:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    52d4:	683a      	ldr	r2, [r7, #0]
    52d6:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    52da:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    52dc:	4a13      	ldr	r2, [pc, #76]	; (532c <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    52de:	4333      	orrs	r3, r6
    52e0:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    52e2:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    52e4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    52e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    52ea:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    52ec:	4323      	orrs	r3, r4
    52ee:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    52f0:	430b      	orrs	r3, r1
    52f2:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    52f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    52f6:	4b0e      	ldr	r3, [pc, #56]	; (5330 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    52f8:	781b      	ldrb	r3, [r3, #0]
    52fa:	2b01      	cmp	r3, #1
    52fc:	d98f      	bls.n	521e <opcode_0x40()+0x82>
    52fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5300:	2001888c 	.word	0x2001888c
    5304:	20004a09 	.word	0x20004a09
    5308:	20004a08 	.word	0x20004a08
    530c:	20018888 	.word	0x20018888
    5310:	200188ac 	.word	0x200188ac
    5314:	200188a5 	.word	0x200188a5
    5318:	20004a06 	.word	0x20004a06
    531c:	42004000 	.word	0x42004000
    5320:	42008000 	.word	0x42008000
    5324:	6dfffff3 	.word	0x6dfffff3
    5328:	cff3efff 	.word	0xcff3efff
    532c:	7fffff6f 	.word	0x7fffff6f
    5330:	2001889c 	.word	0x2001889c

00005334 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    5334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5336:	4d55      	ldr	r5, [pc, #340]	; (548c <opcode_0x60()+0x158>)
    5338:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    533a:	4e55      	ldr	r6, [pc, #340]	; (5490 <opcode_0x60()+0x15c>)
    533c:	8828      	ldrh	r0, [r5, #0]
    533e:	3001      	adds	r0, #1
    5340:	b280      	uxth	r0, r0
    5342:	f7fd fb85 	bl	2a50 <read_byte(unsigned short, bool)>
    5346:	7830      	ldrb	r0, [r6, #0]
    5348:	2100      	movs	r1, #0
    534a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    534e:	f7fd fb7f 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5352:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    5354:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    5356:	3301      	adds	r3, #1
    5358:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    535a:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    535e:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    5360:	f7fd fb76 	bl	2a50 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    5364:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    5366:	4604      	mov	r4, r0
    5368:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    536a:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 3;
    536c:	3403      	adds	r4, #3
    536e:	b2c0      	uxtb	r0, r0
    5370:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    5372:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5376:	f7fd fb6b 	bl	2a50 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    537a:	2100      	movs	r1, #0
    register_pc = pch + pcl + 3;
    537c:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    5380:	b280      	uxth	r0, r0
    5382:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    5384:	f7fd fb64 	bl	2a50 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    5388:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    538a:	4b42      	ldr	r3, [pc, #264]	; (5494 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    538c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    5390:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5392:	d376      	bcc.n	5482 <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    5394:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    5398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    539c:	d305      	bcc.n	53aa <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    539e:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    53a2:	b29b      	uxth	r3, r3
    53a4:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    53a8:	d36b      	bcc.n	5482 <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    53aa:	4b3b      	ldr	r3, [pc, #236]	; (5498 <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    53ac:	2100      	movs	r1, #0
    53ae:	4a3b      	ldr	r2, [pc, #236]	; (549c <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    53b0:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    53b2:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    53b4:	2b01      	cmp	r3, #1
    53b6:	d005      	beq.n	53c4 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    53b8:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    53bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    53c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    53c4:	4b36      	ldr	r3, [pc, #216]	; (54a0 <opcode_0x60()+0x16c>)
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	b94b      	cbnz	r3, 53de <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    53ca:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    53ce:	6813      	ldr	r3, [r2, #0]
    53d0:	04d9      	lsls	r1, r3, #19
    53d2:	d4fc      	bmi.n	53ce <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    53d4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    53d8:	6813      	ldr	r3, [r2, #0]
    53da:	04db      	lsls	r3, r3, #19
    53dc:	d5fc      	bpl.n	53d8 <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    53de:	4d31      	ldr	r5, [pc, #196]	; (54a4 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53e0:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    53e4:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    53e6:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    53e8:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53ea:	4f2f      	ldr	r7, [pc, #188]	; (54a8 <opcode_0x60()+0x174>)
    53ec:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    53f0:	4b2e      	ldr	r3, [pc, #184]	; (54ac <opcode_0x60()+0x178>)
    53f2:	6832      	ldr	r2, [r6, #0]
    53f4:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    53f6:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    53f8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    53fc:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5400:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    5402:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    5406:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    540a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    540c:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    5410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5414:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5416:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    5418:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    541a:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    541c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5420:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    5422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    5426:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5428:	4a21      	ldr	r2, [pc, #132]	; (54b0 <opcode_0x60()+0x17c>)
    542a:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    542c:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    542e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    5430:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5432:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    5436:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    543a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    543e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    5440:	0342      	lsls	r2, r0, #13
    5442:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    5446:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    5448:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    544a:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    544e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    5452:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5454:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5456:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    545a:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    545e:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5460:	683a      	ldr	r2, [r7, #0]
    5462:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    5466:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5468:	4a12      	ldr	r2, [pc, #72]	; (54b4 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    546a:	4333      	orrs	r3, r6
    546c:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    546e:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5470:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5472:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    5476:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    5478:	4323      	orrs	r3, r4
    547a:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    547c:	430b      	orrs	r3, r1
    547e:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    5480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    5482:	4b0d      	ldr	r3, [pc, #52]	; (54b8 <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	2b01      	cmp	r3, #1
    5488:	d98f      	bls.n	53aa <opcode_0x60()+0x76>
    548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    548c:	2001888c 	.word	0x2001888c
    5490:	20004a09 	.word	0x20004a09
    5494:	20018888 	.word	0x20018888
    5498:	200188ac 	.word	0x200188ac
    549c:	200188a5 	.word	0x200188a5
    54a0:	20004a06 	.word	0x20004a06
    54a4:	42004000 	.word	0x42004000
    54a8:	42008000 	.word	0x42008000
    54ac:	6dfffff3 	.word	0x6dfffff3
    54b0:	cff3efff 	.word	0xcff3efff
    54b4:	7fffff6f 	.word	0x7fffff6f
    54b8:	2001889c 	.word	0x2001889c

000054bc <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    54bc:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    54be:	4d18      	ldr	r5, [pc, #96]	; (5520 <opcode_0x07()+0x64>)
    54c0:	b083      	sub	sp, #12
    54c2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    54c4:	4c17      	ldr	r4, [pc, #92]	; (5524 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    54c6:	8828      	ldrh	r0, [r5, #0]
    54c8:	3001      	adds	r0, #1
    54ca:	b280      	uxth	r0, r0
    54cc:	f7fd fac0 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    54d0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    54d2:	b280      	uxth	r0, r0
    54d4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    54d6:	f7fd fabb 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54da:	4a13      	ldr	r2, [pc, #76]	; (5528 <opcode_0x07()+0x6c>)
    54dc:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    54de:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54e2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    54e4:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    54e6:	bf4c      	ite	mi
    54e8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    54ec:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    54f0:	9101      	str	r1, [sp, #4]
    54f2:	7013      	strb	r3, [r2, #0]
    54f4:	4b0d      	ldr	r3, [pc, #52]	; (552c <opcode_0x07()+0x70>)
    54f6:	7818      	ldrb	r0, [r3, #0]
    54f8:	4308      	orrs	r0, r1
    54fa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    54fc:	f7fd fd6c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5500:	9901      	ldr	r1, [sp, #4]
    5502:	8820      	ldrh	r0, [r4, #0]
    5504:	f7fd fc60 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5508:	8820      	ldrh	r0, [r4, #0]
    550a:	9901      	ldr	r1, [sp, #4]
    550c:	f7fd fc5c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    5510:	4a07      	ldr	r2, [pc, #28]	; (5530 <opcode_0x07()+0x74>)
    5512:	882b      	ldrh	r3, [r5, #0]
    5514:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    5518:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    551a:	b280      	uxth	r0, r0
    551c:	b003      	add	sp, #12
    551e:	bd30      	pop	{r4, r5, pc}
    5520:	2001888c 	.word	0x2001888c
    5524:	2001888a 	.word	0x2001888a
    5528:	20004a08 	.word	0x20004a08
    552c:	200188a8 	.word	0x200188a8
    5530:	20015418 	.word	0x20015418

00005534 <opcode_0x17()>:
uint16_t opcode_0x17() {
    5534:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5536:	4c14      	ldr	r4, [pc, #80]	; (5588 <opcode_0x17()+0x54>)
uint16_t opcode_0x17() {
    5538:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    553a:	f7fd fd81 	bl	3040 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    553e:	0602      	lsls	r2, r0, #24
    5540:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    5542:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5546:	4a11      	ldr	r2, [pc, #68]	; (558c <opcode_0x17()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5548:	bf4c      	ite	mi
    554a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    554e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5552:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5554:	b2c9      	uxtb	r1, r1
    5556:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5558:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    555a:	4c0d      	ldr	r4, [pc, #52]	; (5590 <opcode_0x17()+0x5c>)
    555c:	9101      	str	r1, [sp, #4]
    555e:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5560:	f7fd fd3a 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5564:	8820      	ldrh	r0, [r4, #0]
    5566:	9901      	ldr	r1, [sp, #4]
    5568:	f7fd fc2e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    556c:	8820      	ldrh	r0, [r4, #0]
    556e:	9901      	ldr	r1, [sp, #4]
    5570:	f7fd fc2a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    5574:	4a07      	ldr	r2, [pc, #28]	; (5594 <opcode_0x17()+0x60>)
    5576:	4b08      	ldr	r3, [pc, #32]	; (5598 <opcode_0x17()+0x64>)
    5578:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    557c:	881b      	ldrh	r3, [r3, #0]
    557e:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    5580:	b280      	uxth	r0, r0
    5582:	b002      	add	sp, #8
    5584:	bd10      	pop	{r4, pc}
    5586:	bf00      	nop
    5588:	20004a08 	.word	0x20004a08
    558c:	200188a8 	.word	0x200188a8
    5590:	2001888a 	.word	0x2001888a
    5594:	20015418 	.word	0x20015418
    5598:	2001888c 	.word	0x2001888c

0000559c <opcode_0x03()>:
uint16_t opcode_0x03() {
    559c:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    559e:	4c14      	ldr	r4, [pc, #80]	; (55f0 <opcode_0x03()+0x54>)
uint16_t opcode_0x03() {
    55a0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    55a2:	f7fd fe09 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55a6:	0602      	lsls	r2, r0, #24
    55a8:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    55aa:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    55ae:	4a11      	ldr	r2, [pc, #68]	; (55f4 <opcode_0x03()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    55b0:	bf4c      	ite	mi
    55b2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    55b6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    55ba:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    55bc:	b2c9      	uxtb	r1, r1
    55be:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    55c0:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    55c2:	4c0d      	ldr	r4, [pc, #52]	; (55f8 <opcode_0x03()+0x5c>)
    55c4:	9101      	str	r1, [sp, #4]
    55c6:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    55c8:	f7fd fd06 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    55cc:	8820      	ldrh	r0, [r4, #0]
    55ce:	9901      	ldr	r1, [sp, #4]
    55d0:	f7fd fbfa 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55d4:	8820      	ldrh	r0, [r4, #0]
    55d6:	9901      	ldr	r1, [sp, #4]
    55d8:	f7fd fbf6 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    55dc:	4a07      	ldr	r2, [pc, #28]	; (55fc <opcode_0x03()+0x60>)
    55de:	4b08      	ldr	r3, [pc, #32]	; (5600 <opcode_0x03()+0x64>)
    55e0:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    55e4:	881b      	ldrh	r3, [r3, #0]
    55e6:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    55e8:	b280      	uxth	r0, r0
    55ea:	b002      	add	sp, #8
    55ec:	bd10      	pop	{r4, pc}
    55ee:	bf00      	nop
    55f0:	20004a08 	.word	0x20004a08
    55f4:	200188a8 	.word	0x200188a8
    55f8:	2001888a 	.word	0x2001888a
    55fc:	20015418 	.word	0x20015418
    5600:	2001888c 	.word	0x2001888c

00005604 <opcode_0x13()>:
uint16_t opcode_0x13() {
    5604:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5606:	4c14      	ldr	r4, [pc, #80]	; (5658 <opcode_0x13()+0x54>)
uint16_t opcode_0x13() {
    5608:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    560a:	2001      	movs	r0, #1
    560c:	f7fd fdfe 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5610:	7823      	ldrb	r3, [r4, #0]
    5612:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5614:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5618:	4a10      	ldr	r2, [pc, #64]	; (565c <opcode_0x13()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    561a:	bf4c      	ite	mi
    561c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5620:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    5624:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5626:	b2c9      	uxtb	r1, r1
    5628:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    562a:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    562c:	4c0c      	ldr	r4, [pc, #48]	; (5660 <opcode_0x13()+0x5c>)
    562e:	9101      	str	r1, [sp, #4]
    5630:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5632:	f7fd fcd1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5636:	8820      	ldrh	r0, [r4, #0]
    5638:	9901      	ldr	r1, [sp, #4]
    563a:	f7fd fbc5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    563e:	8820      	ldrh	r0, [r4, #0]
    5640:	9901      	ldr	r1, [sp, #4]
    5642:	f7fd fbc1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    5646:	4a07      	ldr	r2, [pc, #28]	; (5664 <opcode_0x13()+0x60>)
    5648:	4b07      	ldr	r3, [pc, #28]	; (5668 <opcode_0x13()+0x64>)
    564a:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    564e:	881b      	ldrh	r3, [r3, #0]
    5650:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    5652:	b280      	uxth	r0, r0
    5654:	b002      	add	sp, #8
    5656:	bd10      	pop	{r4, pc}
    5658:	20004a08 	.word	0x20004a08
    565c:	200188a8 	.word	0x200188a8
    5660:	2001888a 	.word	0x2001888a
    5664:	20015418 	.word	0x20015418
    5668:	2001888c 	.word	0x2001888c

0000566c <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    566c:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    566e:	4c14      	ldr	r4, [pc, #80]	; (56c0 <opcode_0x0F()+0x54>)
uint16_t opcode_0x0F() {
    5670:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    5672:	f7fd fd25 	bl	30c0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5676:	0602      	lsls	r2, r0, #24
    5678:	7823      	ldrb	r3, [r4, #0]
    local_data = ((local_data << 1) & 0xFE);
    567a:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    567e:	4a11      	ldr	r2, [pc, #68]	; (56c4 <opcode_0x0F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5680:	bf4c      	ite	mi
    5682:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5686:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    568a:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    568c:	b2c9      	uxtb	r1, r1
    568e:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5690:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5692:	4c0d      	ldr	r4, [pc, #52]	; (56c8 <opcode_0x0F()+0x5c>)
    5694:	9101      	str	r1, [sp, #4]
    5696:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5698:	f7fd fc9e 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    569c:	8820      	ldrh	r0, [r4, #0]
    569e:	9901      	ldr	r1, [sp, #4]
    56a0:	f7fd fb92 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    56a4:	8820      	ldrh	r0, [r4, #0]
    56a6:	9901      	ldr	r1, [sp, #4]
    56a8:	f7fd fb8e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    56ac:	4a07      	ldr	r2, [pc, #28]	; (56cc <opcode_0x0F()+0x60>)
    56ae:	4b08      	ldr	r3, [pc, #32]	; (56d0 <opcode_0x0F()+0x64>)
    56b0:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    56b4:	881b      	ldrh	r3, [r3, #0]
    56b6:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    56b8:	b280      	uxth	r0, r0
    56ba:	b002      	add	sp, #8
    56bc:	bd10      	pop	{r4, pc}
    56be:	bf00      	nop
    56c0:	20004a08 	.word	0x20004a08
    56c4:	200188a8 	.word	0x200188a8
    56c8:	2001888a 	.word	0x2001888a
    56cc:	20015418 	.word	0x20015418
    56d0:	2001888c 	.word	0x2001888c

000056d4 <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    56d4:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56d6:	4c14      	ldr	r4, [pc, #80]	; (5728 <opcode_0x1F()+0x54>)
uint16_t opcode_0x1F() {
    56d8:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    56da:	2001      	movs	r0, #1
    56dc:	f7fd fd0c 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56e0:	7823      	ldrb	r3, [r4, #0]
    56e2:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    56e4:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    56e8:	4a10      	ldr	r2, [pc, #64]	; (572c <opcode_0x1F()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    56ea:	bf4c      	ite	mi
    56ec:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    56f0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    56f4:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    56f6:	b2c9      	uxtb	r1, r1
    56f8:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    56fa:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    56fc:	4c0c      	ldr	r4, [pc, #48]	; (5730 <opcode_0x1F()+0x5c>)
    56fe:	9101      	str	r1, [sp, #4]
    5700:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5702:	f7fd fc69 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5706:	8820      	ldrh	r0, [r4, #0]
    5708:	9901      	ldr	r1, [sp, #4]
    570a:	f7fd fb5d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    570e:	8820      	ldrh	r0, [r4, #0]
    5710:	9901      	ldr	r1, [sp, #4]
    5712:	f7fd fb59 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    5716:	4a07      	ldr	r2, [pc, #28]	; (5734 <opcode_0x1F()+0x60>)
    5718:	4b07      	ldr	r3, [pc, #28]	; (5738 <opcode_0x1F()+0x64>)
    571a:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    571e:	881b      	ldrh	r3, [r3, #0]
    5720:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    5722:	b280      	uxth	r0, r0
    5724:	b002      	add	sp, #8
    5726:	bd10      	pop	{r4, pc}
    5728:	20004a08 	.word	0x20004a08
    572c:	200188a8 	.word	0x200188a8
    5730:	2001888a 	.word	0x2001888a
    5734:	20015418 	.word	0x20015418
    5738:	2001888c 	.word	0x2001888c

0000573c <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    573c:	b510      	push	{r4, lr}
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    573e:	4c14      	ldr	r4, [pc, #80]	; (5790 <opcode_0x1B()+0x54>)
uint16_t opcode_0x1B() {
    5740:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    5742:	2001      	movs	r0, #1
    5744:	f7fd fd08 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5748:	7823      	ldrb	r3, [r4, #0]
    574a:	0602      	lsls	r2, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    574c:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    5750:	4a10      	ldr	r2, [pc, #64]	; (5794 <opcode_0x1B()+0x58>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5752:	bf4c      	ite	mi
    5754:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5758:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    575c:	7810      	ldrb	r0, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    575e:	b2c9      	uxtb	r1, r1
    5760:	7023      	strb	r3, [r4, #0]
    register_a = register_a | local_data;
    5762:	4308      	orrs	r0, r1
    write_byte(effective_address, local_data);
    5764:	4c0c      	ldr	r4, [pc, #48]	; (5798 <opcode_0x1B()+0x5c>)
    5766:	9101      	str	r1, [sp, #4]
    5768:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    576a:	f7fd fc35 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    576e:	8820      	ldrh	r0, [r4, #0]
    5770:	9901      	ldr	r1, [sp, #4]
    5772:	f7fd fb29 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5776:	8820      	ldrh	r0, [r4, #0]
    5778:	9901      	ldr	r1, [sp, #4]
    577a:	f7fd fb25 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    577e:	4a07      	ldr	r2, [pc, #28]	; (579c <opcode_0x1B()+0x60>)
    5780:	4b07      	ldr	r3, [pc, #28]	; (57a0 <opcode_0x1B()+0x64>)
    5782:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    5786:	881b      	ldrh	r3, [r3, #0]
    5788:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    578a:	b280      	uxth	r0, r0
    578c:	b002      	add	sp, #8
    578e:	bd10      	pop	{r4, pc}
    5790:	20004a08 	.word	0x20004a08
    5794:	200188a8 	.word	0x200188a8
    5798:	2001888a 	.word	0x2001888a
    579c:	20015418 	.word	0x20015418
    57a0:	2001888c 	.word	0x2001888c

000057a4 <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    57a4:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    57a6:	4d1a      	ldr	r5, [pc, #104]	; (5810 <opcode_0x27()+0x6c>)
    57a8:	b083      	sub	sp, #12
    57aa:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57ac:	4c19      	ldr	r4, [pc, #100]	; (5814 <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    57ae:	8828      	ldrh	r0, [r5, #0]
    57b0:	3001      	adds	r0, #1
    57b2:	b280      	uxth	r0, r0
    57b4:	f7fd f94c 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    57b8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    57ba:	b280      	uxth	r0, r0
    57bc:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    57be:	f7fd f947 	bl	2a50 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    57c2:	4915      	ldr	r1, [pc, #84]	; (5818 <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    57c4:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    57c8:	780a      	ldrb	r2, [r1, #0]
    57ca:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    57ce:	bf14      	ite	ne
    57d0:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    57d4:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    57d8:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    57dc:	4b0f      	ldr	r3, [pc, #60]	; (581c <opcode_0x27()+0x78>)
    57de:	700a      	strb	r2, [r1, #0]
    57e0:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    57e2:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    57e4:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    57e6:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    57e8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    57ea:	f7fd fbf5 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    57ee:	9901      	ldr	r1, [sp, #4]
    57f0:	8820      	ldrh	r0, [r4, #0]
    57f2:	f7fd fae9 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    57f6:	8820      	ldrh	r0, [r4, #0]
    57f8:	9901      	ldr	r1, [sp, #4]
    57fa:	f7fd fae5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    57fe:	4a08      	ldr	r2, [pc, #32]	; (5820 <opcode_0x27()+0x7c>)
    5800:	882b      	ldrh	r3, [r5, #0]
    5802:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    5806:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    5808:	b280      	uxth	r0, r0
    580a:	b003      	add	sp, #12
    580c:	bd30      	pop	{r4, r5, pc}
    580e:	bf00      	nop
    5810:	2001888c 	.word	0x2001888c
    5814:	2001888a 	.word	0x2001888a
    5818:	20004a08 	.word	0x20004a08
    581c:	200188a8 	.word	0x200188a8
    5820:	20015418 	.word	0x20015418

00005824 <opcode_0x37()>:
uint16_t opcode_0x37() {
    5824:	b530      	push	{r4, r5, lr}
    5826:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    5828:	4d14      	ldr	r5, [pc, #80]	; (587c <opcode_0x37()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    582a:	f7fd fc09 	bl	3040 <Fetch_ZeroPage_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    582e:	4914      	ldr	r1, [pc, #80]	; (5880 <opcode_0x37()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5830:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5832:	4c14      	ldr	r4, [pc, #80]	; (5884 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5834:	780a      	ldrb	r2, [r1, #0]
    5836:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    583a:	bf4c      	ite	mi
    583c:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5840:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5844:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5848:	782b      	ldrb	r3, [r5, #0]
    584a:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    584c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    584e:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5850:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5852:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5854:	f7fd fbc0 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5858:	8820      	ldrh	r0, [r4, #0]
    585a:	9901      	ldr	r1, [sp, #4]
    585c:	f7fd fab4 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5860:	8820      	ldrh	r0, [r4, #0]
    5862:	9901      	ldr	r1, [sp, #4]
    5864:	f7fd fab0 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    5868:	4a07      	ldr	r2, [pc, #28]	; (5888 <opcode_0x37()+0x64>)
    586a:	4b08      	ldr	r3, [pc, #32]	; (588c <opcode_0x37()+0x68>)
    586c:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    5870:	881b      	ldrh	r3, [r3, #0]
    5872:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    5874:	b280      	uxth	r0, r0
    5876:	b003      	add	sp, #12
    5878:	bd30      	pop	{r4, r5, pc}
    587a:	bf00      	nop
    587c:	200188a8 	.word	0x200188a8
    5880:	20004a08 	.word	0x20004a08
    5884:	2001888a 	.word	0x2001888a
    5888:	20015418 	.word	0x20015418
    588c:	2001888c 	.word	0x2001888c

00005890 <opcode_0x23()>:
uint16_t opcode_0x23() {
    5890:	b530      	push	{r4, r5, lr}
    5892:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    5894:	4d14      	ldr	r5, [pc, #80]	; (58e8 <opcode_0x23()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    5896:	f7fd fc8f 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    589a:	4914      	ldr	r1, [pc, #80]	; (58ec <opcode_0x23()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    589c:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    589e:	4c14      	ldr	r4, [pc, #80]	; (58f0 <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    58a0:	780a      	ldrb	r2, [r1, #0]
    58a2:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    58a6:	bf4c      	ite	mi
    58a8:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58ac:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    58b0:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    58b4:	782b      	ldrb	r3, [r5, #0]
    58b6:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    58b8:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    58ba:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    58bc:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    58be:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    58c0:	f7fd fb8a 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    58c4:	8820      	ldrh	r0, [r4, #0]
    58c6:	9901      	ldr	r1, [sp, #4]
    58c8:	f7fd fa7e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58cc:	8820      	ldrh	r0, [r4, #0]
    58ce:	9901      	ldr	r1, [sp, #4]
    58d0:	f7fd fa7a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    58d4:	4a07      	ldr	r2, [pc, #28]	; (58f4 <opcode_0x23()+0x64>)
    58d6:	4b08      	ldr	r3, [pc, #32]	; (58f8 <opcode_0x23()+0x68>)
    58d8:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    58dc:	881b      	ldrh	r3, [r3, #0]
    58de:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    58e0:	b280      	uxth	r0, r0
    58e2:	b003      	add	sp, #12
    58e4:	bd30      	pop	{r4, r5, pc}
    58e6:	bf00      	nop
    58e8:	200188a8 	.word	0x200188a8
    58ec:	20004a08 	.word	0x20004a08
    58f0:	2001888a 	.word	0x2001888a
    58f4:	20015418 	.word	0x20015418
    58f8:	2001888c 	.word	0x2001888c

000058fc <opcode_0x33()>:
uint16_t opcode_0x33() {
    58fc:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    58fe:	2001      	movs	r0, #1
uint16_t opcode_0x33() {
    5900:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    5902:	f7fd fc83 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5906:	4913      	ldr	r1, [pc, #76]	; (5954 <opcode_0x33()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5908:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    590a:	4d13      	ldr	r5, [pc, #76]	; (5958 <opcode_0x33()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    590c:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    590e:	4c13      	ldr	r4, [pc, #76]	; (595c <opcode_0x33()+0x60>)
    5910:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5914:	bf4c      	ite	mi
    5916:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    591a:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    591e:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5922:	782b      	ldrb	r3, [r5, #0]
    5924:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5926:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5928:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    592a:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    592c:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    592e:	f7fd fb53 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5932:	8820      	ldrh	r0, [r4, #0]
    5934:	9901      	ldr	r1, [sp, #4]
    5936:	f7fd fa47 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    593a:	8820      	ldrh	r0, [r4, #0]
    593c:	9901      	ldr	r1, [sp, #4]
    593e:	f7fd fa43 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    5942:	4a07      	ldr	r2, [pc, #28]	; (5960 <opcode_0x33()+0x64>)
    5944:	4b07      	ldr	r3, [pc, #28]	; (5964 <opcode_0x33()+0x68>)
    5946:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    594a:	881b      	ldrh	r3, [r3, #0]
    594c:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    594e:	b280      	uxth	r0, r0
    5950:	b003      	add	sp, #12
    5952:	bd30      	pop	{r4, r5, pc}
    5954:	20004a08 	.word	0x20004a08
    5958:	200188a8 	.word	0x200188a8
    595c:	2001888a 	.word	0x2001888a
    5960:	20015418 	.word	0x20015418
    5964:	2001888c 	.word	0x2001888c

00005968 <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    5968:	b530      	push	{r4, r5, lr}
    596a:	b083      	sub	sp, #12
    register_a = register_a & local_data;
    596c:	4d14      	ldr	r5, [pc, #80]	; (59c0 <opcode_0x2F()+0x58>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    596e:	f7fd fba7 	bl	30c0 <Fetch_Absolute()>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5972:	4914      	ldr	r1, [pc, #80]	; (59c4 <opcode_0x2F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5974:	0604      	lsls	r4, r0, #24
    write_byte(effective_address, local_data);
    5976:	4c14      	ldr	r4, [pc, #80]	; (59c8 <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5978:	780a      	ldrb	r2, [r1, #0]
    597a:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    597e:	bf4c      	ite	mi
    5980:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5984:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5988:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    598c:	782b      	ldrb	r3, [r5, #0]
    598e:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5990:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5992:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5994:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5996:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5998:	f7fd fb1e 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    599c:	8820      	ldrh	r0, [r4, #0]
    599e:	9901      	ldr	r1, [sp, #4]
    59a0:	f7fd fa12 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59a4:	8820      	ldrh	r0, [r4, #0]
    59a6:	9901      	ldr	r1, [sp, #4]
    59a8:	f7fd fa0e 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    59ac:	4a07      	ldr	r2, [pc, #28]	; (59cc <opcode_0x2F()+0x64>)
    59ae:	4b08      	ldr	r3, [pc, #32]	; (59d0 <opcode_0x2F()+0x68>)
    59b0:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    59b4:	881b      	ldrh	r3, [r3, #0]
    59b6:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    59b8:	b280      	uxth	r0, r0
    59ba:	b003      	add	sp, #12
    59bc:	bd30      	pop	{r4, r5, pc}
    59be:	bf00      	nop
    59c0:	200188a8 	.word	0x200188a8
    59c4:	20004a08 	.word	0x20004a08
    59c8:	2001888a 	.word	0x2001888a
    59cc:	20015418 	.word	0x20015418
    59d0:	2001888c 	.word	0x2001888c

000059d4 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    59d4:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    59d6:	2001      	movs	r0, #1
uint16_t opcode_0x3F() {
    59d8:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    59da:	f7fd fb8d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59de:	4913      	ldr	r1, [pc, #76]	; (5a2c <opcode_0x3F()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59e0:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    59e2:	4d13      	ldr	r5, [pc, #76]	; (5a30 <opcode_0x3F()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    59e4:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    59e6:	4c13      	ldr	r4, [pc, #76]	; (5a34 <opcode_0x3F()+0x60>)
    59e8:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    59ec:	bf4c      	ite	mi
    59ee:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59f2:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    59f6:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    59fa:	782b      	ldrb	r3, [r5, #0]
    59fc:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    59fe:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5a00:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5a02:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5a04:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5a06:	f7fd fae7 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5a0a:	8820      	ldrh	r0, [r4, #0]
    5a0c:	9901      	ldr	r1, [sp, #4]
    5a0e:	f7fd f9db 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a12:	8820      	ldrh	r0, [r4, #0]
    5a14:	9901      	ldr	r1, [sp, #4]
    5a16:	f7fd f9d7 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    5a1a:	4a07      	ldr	r2, [pc, #28]	; (5a38 <opcode_0x3F()+0x64>)
    5a1c:	4b07      	ldr	r3, [pc, #28]	; (5a3c <opcode_0x3F()+0x68>)
    5a1e:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    5a22:	881b      	ldrh	r3, [r3, #0]
    5a24:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    5a26:	b280      	uxth	r0, r0
    5a28:	b003      	add	sp, #12
    5a2a:	bd30      	pop	{r4, r5, pc}
    5a2c:	20004a08 	.word	0x20004a08
    5a30:	200188a8 	.word	0x200188a8
    5a34:	2001888a 	.word	0x2001888a
    5a38:	20015418 	.word	0x20015418
    5a3c:	2001888c 	.word	0x2001888c

00005a40 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    5a40:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    5a42:	2001      	movs	r0, #1
uint16_t opcode_0x3B() {
    5a44:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    5a46:	f7fd fb87 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5a4a:	4913      	ldr	r1, [pc, #76]	; (5a98 <opcode_0x3B()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5a4c:	0604      	lsls	r4, r0, #24
    register_a = register_a & local_data;
    5a4e:	4d13      	ldr	r5, [pc, #76]	; (5a9c <opcode_0x3B()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    5a50:	780a      	ldrb	r2, [r1, #0]
    write_byte(effective_address, local_data);
    5a52:	4c13      	ldr	r4, [pc, #76]	; (5aa0 <opcode_0x3B()+0x60>)
    5a54:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    5a58:	bf4c      	ite	mi
    5a5a:	f042 0201 	orrmi.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5a5e:	f002 02fe 	andpl.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    5a62:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    5a66:	782b      	ldrb	r3, [r5, #0]
    5a68:	700a      	strb	r2, [r1, #0]
    local_data = (local_data << 1) | old_carry_flag;
    5a6a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    5a6c:	4018      	ands	r0, r3
    local_data = (local_data << 1) | old_carry_flag;
    5a6e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    5a70:	7028      	strb	r0, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5a72:	f7fd fab1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5a76:	8820      	ldrh	r0, [r4, #0]
    5a78:	9901      	ldr	r1, [sp, #4]
    5a7a:	f7fd f9a5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a7e:	8820      	ldrh	r0, [r4, #0]
    5a80:	9901      	ldr	r1, [sp, #4]
    5a82:	f7fd f9a1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    5a86:	4a07      	ldr	r2, [pc, #28]	; (5aa4 <opcode_0x3B()+0x64>)
    5a88:	4b07      	ldr	r3, [pc, #28]	; (5aa8 <opcode_0x3B()+0x68>)
    5a8a:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    5a8e:	881b      	ldrh	r3, [r3, #0]
    5a90:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    5a92:	b280      	uxth	r0, r0
    5a94:	b003      	add	sp, #12
    5a96:	bd30      	pop	{r4, r5, pc}
    5a98:	20004a08 	.word	0x20004a08
    5a9c:	200188a8 	.word	0x200188a8
    5aa0:	2001888a 	.word	0x2001888a
    5aa4:	20015418 	.word	0x20015418
    5aa8:	2001888c 	.word	0x2001888c

00005aac <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    5aac:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5aae:	4d18      	ldr	r5, [pc, #96]	; (5b10 <opcode_0x47()+0x64>)
    5ab0:	b083      	sub	sp, #12
    5ab2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ab4:	4c17      	ldr	r4, [pc, #92]	; (5b14 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    5ab6:	8828      	ldrh	r0, [r5, #0]
    5ab8:	3001      	adds	r0, #1
    5aba:	b280      	uxth	r0, r0
    5abc:	f7fc ffc8 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5ac0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ac2:	b280      	uxth	r0, r0
    5ac4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5ac6:	f7fc ffc3 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5aca:	4a13      	ldr	r2, [pc, #76]	; (5b18 <opcode_0x47()+0x6c>)
    5acc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5ace:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ad2:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5ad4:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ad6:	bf4c      	ite	mi
    5ad8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5adc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5ae0:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    5ae2:	4b0e      	ldr	r3, [pc, #56]	; (5b1c <opcode_0x47()+0x70>)
    5ae4:	7818      	ldrb	r0, [r3, #0]
    5ae6:	4048      	eors	r0, r1
    5ae8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5aea:	f7fd fa75 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5aee:	9901      	ldr	r1, [sp, #4]
    5af0:	8820      	ldrh	r0, [r4, #0]
    5af2:	f7fd f969 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5af6:	8820      	ldrh	r0, [r4, #0]
    5af8:	9901      	ldr	r1, [sp, #4]
    5afa:	f7fd f965 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    5afe:	4a08      	ldr	r2, [pc, #32]	; (5b20 <opcode_0x47()+0x74>)
    5b00:	882b      	ldrh	r3, [r5, #0]
    5b02:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    5b06:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    5b08:	b280      	uxth	r0, r0
    5b0a:	b003      	add	sp, #12
    5b0c:	bd30      	pop	{r4, r5, pc}
    5b0e:	bf00      	nop
    5b10:	2001888c 	.word	0x2001888c
    5b14:	2001888a 	.word	0x2001888a
    5b18:	20004a08 	.word	0x20004a08
    5b1c:	200188a8 	.word	0x200188a8
    5b20:	20015418 	.word	0x20015418

00005b24 <opcode_0x57()>:
uint16_t opcode_0x57() {
    5b24:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b26:	4c13      	ldr	r4, [pc, #76]	; (5b74 <opcode_0x57()+0x50>)
uint16_t opcode_0x57() {
    5b28:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    5b2a:	f7fd fa89 	bl	3040 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b2e:	07c2      	lsls	r2, r0, #31
    5b30:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5b32:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5b36:	4a10      	ldr	r2, [pc, #64]	; (5b78 <opcode_0x57()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b38:	bf4c      	ite	mi
    5b3a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5b3e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5b42:	7810      	ldrb	r0, [r2, #0]
    5b44:	7023      	strb	r3, [r4, #0]
    5b46:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5b48:	4c0c      	ldr	r4, [pc, #48]	; (5b7c <opcode_0x57()+0x58>)
    5b4a:	9101      	str	r1, [sp, #4]
    5b4c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5b4e:	f7fd fa43 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5b52:	8820      	ldrh	r0, [r4, #0]
    5b54:	9901      	ldr	r1, [sp, #4]
    5b56:	f7fd f937 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b5a:	8820      	ldrh	r0, [r4, #0]
    5b5c:	9901      	ldr	r1, [sp, #4]
    5b5e:	f7fd f933 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    5b62:	4a07      	ldr	r2, [pc, #28]	; (5b80 <opcode_0x57()+0x5c>)
    5b64:	4b07      	ldr	r3, [pc, #28]	; (5b84 <opcode_0x57()+0x60>)
    5b66:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    5b6a:	881b      	ldrh	r3, [r3, #0]
    5b6c:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    5b6e:	b280      	uxth	r0, r0
    5b70:	b002      	add	sp, #8
    5b72:	bd10      	pop	{r4, pc}
    5b74:	20004a08 	.word	0x20004a08
    5b78:	200188a8 	.word	0x200188a8
    5b7c:	2001888a 	.word	0x2001888a
    5b80:	20016418 	.word	0x20016418
    5b84:	2001888c 	.word	0x2001888c

00005b88 <opcode_0x43()>:
uint16_t opcode_0x43() {
    5b88:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b8a:	4c13      	ldr	r4, [pc, #76]	; (5bd8 <opcode_0x43()+0x50>)
uint16_t opcode_0x43() {
    5b8c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    5b8e:	f7fd fb13 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b92:	07c2      	lsls	r2, r0, #31
    5b94:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5b96:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5b9a:	4a10      	ldr	r2, [pc, #64]	; (5bdc <opcode_0x43()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5b9c:	bf4c      	ite	mi
    5b9e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ba2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5ba6:	7810      	ldrb	r0, [r2, #0]
    5ba8:	7023      	strb	r3, [r4, #0]
    5baa:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5bac:	4c0c      	ldr	r4, [pc, #48]	; (5be0 <opcode_0x43()+0x58>)
    5bae:	9101      	str	r1, [sp, #4]
    5bb0:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5bb2:	f7fd fa11 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5bb6:	8820      	ldrh	r0, [r4, #0]
    5bb8:	9901      	ldr	r1, [sp, #4]
    5bba:	f7fd f905 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bbe:	8820      	ldrh	r0, [r4, #0]
    5bc0:	9901      	ldr	r1, [sp, #4]
    5bc2:	f7fd f901 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    5bc6:	4a07      	ldr	r2, [pc, #28]	; (5be4 <opcode_0x43()+0x5c>)
    5bc8:	4b07      	ldr	r3, [pc, #28]	; (5be8 <opcode_0x43()+0x60>)
    5bca:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    5bce:	881b      	ldrh	r3, [r3, #0]
    5bd0:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    5bd2:	b280      	uxth	r0, r0
    5bd4:	b002      	add	sp, #8
    5bd6:	bd10      	pop	{r4, pc}
    5bd8:	20004a08 	.word	0x20004a08
    5bdc:	200188a8 	.word	0x200188a8
    5be0:	2001888a 	.word	0x2001888a
    5be4:	20015418 	.word	0x20015418
    5be8:	2001888c 	.word	0x2001888c

00005bec <opcode_0x53()>:
uint16_t opcode_0x53() {
    5bec:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bee:	4c14      	ldr	r4, [pc, #80]	; (5c40 <opcode_0x53()+0x54>)
uint16_t opcode_0x53() {
    5bf0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    5bf2:	2001      	movs	r0, #1
    5bf4:	f7fd fb0a 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5bf8:	7823      	ldrb	r3, [r4, #0]
    5bfa:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5bfc:	4a11      	ldr	r2, [pc, #68]	; (5c44 <opcode_0x53()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5bfe:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c02:	bf4c      	ite	mi
    5c04:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c08:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5c0c:	7810      	ldrb	r0, [r2, #0]
    5c0e:	7023      	strb	r3, [r4, #0]
    5c10:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5c12:	4c0d      	ldr	r4, [pc, #52]	; (5c48 <opcode_0x53()+0x5c>)
    5c14:	9101      	str	r1, [sp, #4]
    5c16:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5c18:	f7fd f9de 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5c1c:	8820      	ldrh	r0, [r4, #0]
    5c1e:	9901      	ldr	r1, [sp, #4]
    5c20:	f7fd f8d2 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c24:	8820      	ldrh	r0, [r4, #0]
    5c26:	9901      	ldr	r1, [sp, #4]
    5c28:	f7fd f8ce 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    5c2c:	4a07      	ldr	r2, [pc, #28]	; (5c4c <opcode_0x53()+0x60>)
    5c2e:	4b08      	ldr	r3, [pc, #32]	; (5c50 <opcode_0x53()+0x64>)
    5c30:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    5c34:	881b      	ldrh	r3, [r3, #0]
    5c36:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    5c38:	b280      	uxth	r0, r0
    5c3a:	b002      	add	sp, #8
    5c3c:	bd10      	pop	{r4, pc}
    5c3e:	bf00      	nop
    5c40:	20004a08 	.word	0x20004a08
    5c44:	200188a8 	.word	0x200188a8
    5c48:	2001888a 	.word	0x2001888a
    5c4c:	20016418 	.word	0x20016418
    5c50:	2001888c 	.word	0x2001888c

00005c54 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    5c54:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c56:	4c13      	ldr	r4, [pc, #76]	; (5ca4 <opcode_0x4F()+0x50>)
uint16_t opcode_0x4F() {
    5c58:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    5c5a:	f7fd fa31 	bl	30c0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c5e:	07c2      	lsls	r2, r0, #31
    5c60:	7823      	ldrb	r3, [r4, #0]
    local_data = (0x7F & (local_data >> 1));
    5c62:	f3c0 0147 	ubfx	r1, r0, #1, #8
    register_a = register_a ^ local_data;
    5c66:	4a10      	ldr	r2, [pc, #64]	; (5ca8 <opcode_0x4F()+0x54>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5c68:	bf4c      	ite	mi
    5c6a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5c6e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5c72:	7810      	ldrb	r0, [r2, #0]
    5c74:	7023      	strb	r3, [r4, #0]
    5c76:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5c78:	4c0c      	ldr	r4, [pc, #48]	; (5cac <opcode_0x4F()+0x58>)
    5c7a:	9101      	str	r1, [sp, #4]
    5c7c:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5c7e:	f7fd f9ab 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5c82:	8820      	ldrh	r0, [r4, #0]
    5c84:	9901      	ldr	r1, [sp, #4]
    5c86:	f7fd f89f 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c8a:	8820      	ldrh	r0, [r4, #0]
    5c8c:	9901      	ldr	r1, [sp, #4]
    5c8e:	f7fd f89b 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    5c92:	4a07      	ldr	r2, [pc, #28]	; (5cb0 <opcode_0x4F()+0x5c>)
    5c94:	4b07      	ldr	r3, [pc, #28]	; (5cb4 <opcode_0x4F()+0x60>)
    5c96:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    5c9a:	881b      	ldrh	r3, [r3, #0]
    5c9c:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    5c9e:	b280      	uxth	r0, r0
    5ca0:	b002      	add	sp, #8
    5ca2:	bd10      	pop	{r4, pc}
    5ca4:	20004a08 	.word	0x20004a08
    5ca8:	200188a8 	.word	0x200188a8
    5cac:	2001888a 	.word	0x2001888a
    5cb0:	20016418 	.word	0x20016418
    5cb4:	2001888c 	.word	0x2001888c

00005cb8 <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    5cb8:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5cba:	4c14      	ldr	r4, [pc, #80]	; (5d0c <opcode_0x5F()+0x54>)
uint16_t opcode_0x5F() {
    5cbc:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    5cbe:	2001      	movs	r0, #1
    5cc0:	f7fd fa1a 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5cc4:	7823      	ldrb	r3, [r4, #0]
    5cc6:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5cc8:	4a11      	ldr	r2, [pc, #68]	; (5d10 <opcode_0x5F()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5cca:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5cce:	bf4c      	ite	mi
    5cd0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5cd4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5cd8:	7810      	ldrb	r0, [r2, #0]
    5cda:	7023      	strb	r3, [r4, #0]
    5cdc:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5cde:	4c0d      	ldr	r4, [pc, #52]	; (5d14 <opcode_0x5F()+0x5c>)
    5ce0:	9101      	str	r1, [sp, #4]
    5ce2:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5ce4:	f7fd f978 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5ce8:	8820      	ldrh	r0, [r4, #0]
    5cea:	9901      	ldr	r1, [sp, #4]
    5cec:	f7fd f86c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5cf0:	8820      	ldrh	r0, [r4, #0]
    5cf2:	9901      	ldr	r1, [sp, #4]
    5cf4:	f7fd f868 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    5cf8:	4a07      	ldr	r2, [pc, #28]	; (5d18 <opcode_0x5F()+0x60>)
    5cfa:	4b08      	ldr	r3, [pc, #32]	; (5d1c <opcode_0x5F()+0x64>)
    5cfc:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    5d00:	881b      	ldrh	r3, [r3, #0]
    5d02:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    5d04:	b280      	uxth	r0, r0
    5d06:	b002      	add	sp, #8
    5d08:	bd10      	pop	{r4, pc}
    5d0a:	bf00      	nop
    5d0c:	20004a08 	.word	0x20004a08
    5d10:	200188a8 	.word	0x200188a8
    5d14:	2001888a 	.word	0x2001888a
    5d18:	20016418 	.word	0x20016418
    5d1c:	2001888c 	.word	0x2001888c

00005d20 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    5d20:	b510      	push	{r4, lr}
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d22:	4c14      	ldr	r4, [pc, #80]	; (5d74 <opcode_0x5B()+0x54>)
uint16_t opcode_0x5B() {
    5d24:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    5d26:	2001      	movs	r0, #1
    5d28:	f7fd fa16 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d2c:	7823      	ldrb	r3, [r4, #0]
    5d2e:	07c2      	lsls	r2, r0, #31
    register_a = register_a ^ local_data;
    5d30:	4a11      	ldr	r2, [pc, #68]	; (5d78 <opcode_0x5B()+0x58>)
    local_data = (0x7F & (local_data >> 1));
    5d32:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d36:	bf4c      	ite	mi
    5d38:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d3c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    5d40:	7810      	ldrb	r0, [r2, #0]
    5d42:	7023      	strb	r3, [r4, #0]
    5d44:	4048      	eors	r0, r1
    write_byte(effective_address, local_data);
    5d46:	4c0d      	ldr	r4, [pc, #52]	; (5d7c <opcode_0x5B()+0x5c>)
    5d48:	9101      	str	r1, [sp, #4]
    5d4a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    5d4c:	f7fd f944 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    5d50:	8820      	ldrh	r0, [r4, #0]
    5d52:	9901      	ldr	r1, [sp, #4]
    5d54:	f7fd f838 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d58:	8820      	ldrh	r0, [r4, #0]
    5d5a:	9901      	ldr	r1, [sp, #4]
    5d5c:	f7fd f834 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    5d60:	4a07      	ldr	r2, [pc, #28]	; (5d80 <opcode_0x5B()+0x60>)
    5d62:	4b08      	ldr	r3, [pc, #32]	; (5d84 <opcode_0x5B()+0x64>)
    5d64:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    5d68:	881b      	ldrh	r3, [r3, #0]
    5d6a:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    5d6c:	b280      	uxth	r0, r0
    5d6e:	b002      	add	sp, #8
    5d70:	bd10      	pop	{r4, pc}
    5d72:	bf00      	nop
    5d74:	20004a08 	.word	0x20004a08
    5d78:	200188a8 	.word	0x200188a8
    5d7c:	2001888a 	.word	0x2001888a
    5d80:	20016418 	.word	0x20016418
    5d84:	2001888c 	.word	0x2001888c

00005d88 <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    5d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    5d8a:	4e16      	ldr	r6, [pc, #88]	; (5de4 <opcode_0x67()+0x5c>)
    5d8c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d8e:	4d16      	ldr	r5, [pc, #88]	; (5de8 <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    5d90:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    5d92:	4f16      	ldr	r7, [pc, #88]	; (5dec <opcode_0x67()+0x64>)
    5d94:	3001      	adds	r0, #1
    5d96:	b280      	uxth	r0, r0
    5d98:	f7fc fe5a 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5d9c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d9e:	b280      	uxth	r0, r0
    5da0:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5da2:	f7fc fe55 	bl	2a50 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5da6:	4a12      	ldr	r2, [pc, #72]	; (5df0 <opcode_0x67()+0x68>)
    5da8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5daa:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    5dae:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5db0:	7813      	ldrb	r3, [r2, #0]
    5db2:	4621      	mov	r1, r4
    global_temp = local_data;
    5db4:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5db6:	bf4c      	ite	mi
    5db8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5dbc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5dc0:	7013      	strb	r3, [r2, #0]
    5dc2:	f7fd f801 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5dc6:	4621      	mov	r1, r4
    5dc8:	8828      	ldrh	r0, [r5, #0]
    5dca:	f7fc fffd 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    5dce:	7838      	ldrb	r0, [r7, #0]
    5dd0:	f7fd fed2 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    5dd4:	4a07      	ldr	r2, [pc, #28]	; (5df4 <opcode_0x67()+0x6c>)
    5dd6:	8833      	ldrh	r3, [r6, #0]
    5dd8:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    5ddc:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    5dde:	b280      	uxth	r0, r0
    5de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5de2:	bf00      	nop
    5de4:	2001888c 	.word	0x2001888c
    5de8:	2001888a 	.word	0x2001888a
    5dec:	200188a4 	.word	0x200188a4
    5df0:	20004a08 	.word	0x20004a08
    5df4:	20016418 	.word	0x20016418

00005df8 <opcode_0x77()>:
uint16_t opcode_0x77() {
    5df8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    5dfa:	f7fd f921 	bl	3040 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dfe:	4a10      	ldr	r2, [pc, #64]	; (5e40 <opcode_0x77()+0x48>)
    5e00:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e02:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e06:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5e08:	4e0e      	ldr	r6, [pc, #56]	; (5e44 <opcode_0x77()+0x4c>)
    5e0a:	4621      	mov	r1, r4
    5e0c:	bf4c      	ite	mi
    5e0e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e12:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5e16:	4d0c      	ldr	r5, [pc, #48]	; (5e48 <opcode_0x77()+0x50>)
    5e18:	8830      	ldrh	r0, [r6, #0]
    5e1a:	7013      	strb	r3, [r2, #0]
    5e1c:	702c      	strb	r4, [r5, #0]
    5e1e:	f7fc ffd3 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e22:	4621      	mov	r1, r4
    5e24:	8830      	ldrh	r0, [r6, #0]
    5e26:	f7fc ffcf 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5e2a:	7828      	ldrb	r0, [r5, #0]
    5e2c:	f7fd fea4 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    5e30:	4a06      	ldr	r2, [pc, #24]	; (5e4c <opcode_0x77()+0x54>)
    5e32:	4b07      	ldr	r3, [pc, #28]	; (5e50 <opcode_0x77()+0x58>)
    5e34:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    5e38:	881b      	ldrh	r3, [r3, #0]
    5e3a:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    5e3c:	b280      	uxth	r0, r0
    5e3e:	bd70      	pop	{r4, r5, r6, pc}
    5e40:	20004a08 	.word	0x20004a08
    5e44:	2001888a 	.word	0x2001888a
    5e48:	200188a4 	.word	0x200188a4
    5e4c:	20016418 	.word	0x20016418
    5e50:	2001888c 	.word	0x2001888c

00005e54 <opcode_0x63()>:
uint16_t opcode_0x63() {
    5e54:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    5e56:	f7fd f9af 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e5a:	4a10      	ldr	r2, [pc, #64]	; (5e9c <opcode_0x63()+0x48>)
    5e5c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e5e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e62:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5e64:	4e0e      	ldr	r6, [pc, #56]	; (5ea0 <opcode_0x63()+0x4c>)
    5e66:	4621      	mov	r1, r4
    5e68:	bf4c      	ite	mi
    5e6a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e6e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5e72:	4d0c      	ldr	r5, [pc, #48]	; (5ea4 <opcode_0x63()+0x50>)
    5e74:	8830      	ldrh	r0, [r6, #0]
    5e76:	7013      	strb	r3, [r2, #0]
    5e78:	702c      	strb	r4, [r5, #0]
    5e7a:	f7fc ffa5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e7e:	4621      	mov	r1, r4
    5e80:	8830      	ldrh	r0, [r6, #0]
    5e82:	f7fc ffa1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5e86:	7828      	ldrb	r0, [r5, #0]
    5e88:	f7fd fe76 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    5e8c:	4a06      	ldr	r2, [pc, #24]	; (5ea8 <opcode_0x63()+0x54>)
    5e8e:	4b07      	ldr	r3, [pc, #28]	; (5eac <opcode_0x63()+0x58>)
    5e90:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    5e94:	881b      	ldrh	r3, [r3, #0]
    5e96:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    5e98:	b280      	uxth	r0, r0
    5e9a:	bd70      	pop	{r4, r5, r6, pc}
    5e9c:	20004a08 	.word	0x20004a08
    5ea0:	2001888a 	.word	0x2001888a
    5ea4:	200188a4 	.word	0x200188a4
    5ea8:	20016418 	.word	0x20016418
    5eac:	2001888c 	.word	0x2001888c

00005eb0 <opcode_0x73()>:
uint16_t opcode_0x73() {
    5eb0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    5eb2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5eb4:	4e11      	ldr	r6, [pc, #68]	; (5efc <opcode_0x73()+0x4c>)
    5eb6:	f7fd f9a9 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5eba:	4a11      	ldr	r2, [pc, #68]	; (5f00 <opcode_0x73()+0x50>)
    5ebc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5ebe:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ec2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5ec4:	4d0f      	ldr	r5, [pc, #60]	; (5f04 <opcode_0x73()+0x54>)
    5ec6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ec8:	bf4c      	ite	mi
    5eca:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5ece:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5ed2:	8830      	ldrh	r0, [r6, #0]
    5ed4:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5ed6:	702c      	strb	r4, [r5, #0]
    5ed8:	f7fc ff76 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5edc:	4621      	mov	r1, r4
    5ede:	8830      	ldrh	r0, [r6, #0]
    5ee0:	f7fc ff72 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5ee4:	7828      	ldrb	r0, [r5, #0]
    5ee6:	f7fd fe47 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    5eea:	4a07      	ldr	r2, [pc, #28]	; (5f08 <opcode_0x73()+0x58>)
    5eec:	4b07      	ldr	r3, [pc, #28]	; (5f0c <opcode_0x73()+0x5c>)
    5eee:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    5ef2:	881b      	ldrh	r3, [r3, #0]
    5ef4:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    5ef6:	b280      	uxth	r0, r0
    5ef8:	bd70      	pop	{r4, r5, r6, pc}
    5efa:	bf00      	nop
    5efc:	2001888a 	.word	0x2001888a
    5f00:	20004a08 	.word	0x20004a08
    5f04:	200188a4 	.word	0x200188a4
    5f08:	20016418 	.word	0x20016418
    5f0c:	2001888c 	.word	0x2001888c

00005f10 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    5f10:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    5f12:	f7fd f8d5 	bl	30c0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f16:	4a10      	ldr	r2, [pc, #64]	; (5f58 <opcode_0x6F()+0x48>)
    5f18:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5f1a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f1e:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    5f20:	4e0e      	ldr	r6, [pc, #56]	; (5f5c <opcode_0x6F()+0x4c>)
    5f22:	4621      	mov	r1, r4
    5f24:	bf4c      	ite	mi
    5f26:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f2a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    5f2e:	4d0c      	ldr	r5, [pc, #48]	; (5f60 <opcode_0x6F()+0x50>)
    5f30:	8830      	ldrh	r0, [r6, #0]
    5f32:	7013      	strb	r3, [r2, #0]
    5f34:	702c      	strb	r4, [r5, #0]
    5f36:	f7fc ff47 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f3a:	4621      	mov	r1, r4
    5f3c:	8830      	ldrh	r0, [r6, #0]
    5f3e:	f7fc ff43 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5f42:	7828      	ldrb	r0, [r5, #0]
    5f44:	f7fd fe18 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    5f48:	4a06      	ldr	r2, [pc, #24]	; (5f64 <opcode_0x6F()+0x54>)
    5f4a:	4b07      	ldr	r3, [pc, #28]	; (5f68 <opcode_0x6F()+0x58>)
    5f4c:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    5f50:	881b      	ldrh	r3, [r3, #0]
    5f52:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    5f54:	b280      	uxth	r0, r0
    5f56:	bd70      	pop	{r4, r5, r6, pc}
    5f58:	20004a08 	.word	0x20004a08
    5f5c:	2001888a 	.word	0x2001888a
    5f60:	200188a4 	.word	0x200188a4
    5f64:	20016418 	.word	0x20016418
    5f68:	2001888c 	.word	0x2001888c

00005f6c <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    5f6c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    5f6e:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5f70:	4e11      	ldr	r6, [pc, #68]	; (5fb8 <opcode_0x7F()+0x4c>)
    5f72:	f7fd f8c1 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f76:	4a11      	ldr	r2, [pc, #68]	; (5fbc <opcode_0x7F()+0x50>)
    5f78:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5f7a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f7e:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5f80:	4d0f      	ldr	r5, [pc, #60]	; (5fc0 <opcode_0x7F()+0x54>)
    5f82:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f84:	bf4c      	ite	mi
    5f86:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f8a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5f8e:	8830      	ldrh	r0, [r6, #0]
    5f90:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5f92:	702c      	strb	r4, [r5, #0]
    5f94:	f7fc ff18 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f98:	4621      	mov	r1, r4
    5f9a:	8830      	ldrh	r0, [r6, #0]
    5f9c:	f7fc ff14 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    5fa0:	7828      	ldrb	r0, [r5, #0]
    5fa2:	f7fd fde9 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    5fa6:	4a07      	ldr	r2, [pc, #28]	; (5fc4 <opcode_0x7F()+0x58>)
    5fa8:	4b07      	ldr	r3, [pc, #28]	; (5fc8 <opcode_0x7F()+0x5c>)
    5faa:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    5fae:	881b      	ldrh	r3, [r3, #0]
    5fb0:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    5fb2:	b280      	uxth	r0, r0
    5fb4:	bd70      	pop	{r4, r5, r6, pc}
    5fb6:	bf00      	nop
    5fb8:	2001888a 	.word	0x2001888a
    5fbc:	20004a08 	.word	0x20004a08
    5fc0:	200188a4 	.word	0x200188a4
    5fc4:	20016418 	.word	0x20016418
    5fc8:	2001888c 	.word	0x2001888c

00005fcc <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    5fcc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    5fce:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    5fd0:	4e11      	ldr	r6, [pc, #68]	; (6018 <opcode_0x7B()+0x4c>)
    5fd2:	f7fd f8c1 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5fd6:	4a11      	ldr	r2, [pc, #68]	; (601c <opcode_0x7B()+0x50>)
    5fd8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5fda:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5fde:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5fe0:	4d0f      	ldr	r5, [pc, #60]	; (6020 <opcode_0x7B()+0x54>)
    5fe2:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5fe4:	bf4c      	ite	mi
    5fe6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5fea:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5fee:	8830      	ldrh	r0, [r6, #0]
    5ff0:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    5ff2:	702c      	strb	r4, [r5, #0]
    5ff4:	f7fc fee8 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ff8:	4621      	mov	r1, r4
    5ffa:	8830      	ldrh	r0, [r6, #0]
    5ffc:	f7fc fee4 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    6000:	7828      	ldrb	r0, [r5, #0]
    6002:	f7fd fdb9 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    6006:	4a07      	ldr	r2, [pc, #28]	; (6024 <opcode_0x7B()+0x58>)
    6008:	4b07      	ldr	r3, [pc, #28]	; (6028 <opcode_0x7B()+0x5c>)
    600a:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    600e:	881b      	ldrh	r3, [r3, #0]
    6010:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    6012:	b280      	uxth	r0, r0
    6014:	bd70      	pop	{r4, r5, r6, pc}
    6016:	bf00      	nop
    6018:	2001888a 	.word	0x2001888a
    601c:	20004a08 	.word	0x20004a08
    6020:	200188a4 	.word	0x200188a4
    6024:	20016418 	.word	0x20016418
    6028:	2001888c 	.word	0x2001888c

0000602c <opcode_0xC7()>:
} // 0xBF - LAX - Absolute , Y

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    602e:	4d1a      	ldr	r5, [pc, #104]	; (6098 <opcode_0xC7()+0x6c>)
    6030:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6032:	4e1a      	ldr	r6, [pc, #104]	; (609c <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    6034:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    6036:	4f1a      	ldr	r7, [pc, #104]	; (60a0 <opcode_0xC7()+0x74>)
    6038:	3001      	adds	r0, #1
    603a:	b280      	uxth	r0, r0
    603c:	f7fc fd08 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    6040:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6042:	b280      	uxth	r0, r0
    6044:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    6046:	f7fc fd03 	bl	2a50 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    604a:	3801      	subs	r0, #1
    604c:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    604e:	4620      	mov	r0, r4
    global_temp = local_data;
    6050:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6052:	f7fc ffc1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6056:	4621      	mov	r1, r4
    6058:	8830      	ldrh	r0, [r6, #0]
    605a:	f7fc feb5 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    605e:	4621      	mov	r1, r4
    6060:	8830      	ldrh	r0, [r6, #0]
    6062:	f7fc feb1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6066:	4b0f      	ldr	r3, [pc, #60]	; (60a4 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    6068:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    606a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    606c:	4a0e      	ldr	r2, [pc, #56]	; (60a8 <opcode_0xC7()+0x7c>)
    606e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6070:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6074:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6076:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6078:	bf94      	ite	ls
    607a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    607e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6082:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6084:	f7fc ffa8 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    6088:	4a08      	ldr	r2, [pc, #32]	; (60ac <opcode_0xC7()+0x80>)
    608a:	882b      	ldrh	r3, [r5, #0]
    608c:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    6090:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    6092:	b280      	uxth	r0, r0
    6094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6096:	bf00      	nop
    6098:	2001888c 	.word	0x2001888c
    609c:	2001888a 	.word	0x2001888a
    60a0:	200188a4 	.word	0x200188a4
    60a4:	200188a8 	.word	0x200188a8
    60a8:	20004a08 	.word	0x20004a08
    60ac:	20017418 	.word	0x20017418

000060b0 <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    60b0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    60b2:	f7fc ffc5 	bl	3040 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    60b6:	3801      	subs	r0, #1
    global_temp = local_data;
    60b8:	4d13      	ldr	r5, [pc, #76]	; (6108 <opcode_0xD7()+0x58>)
    local_data = local_data - 1;
    60ba:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    60bc:	4e13      	ldr	r6, [pc, #76]	; (610c <opcode_0xD7()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    60be:	4620      	mov	r0, r4
    global_temp = local_data;
    60c0:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    60c2:	f7fc ff89 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    60c6:	8830      	ldrh	r0, [r6, #0]
    60c8:	4621      	mov	r1, r4
    60ca:	f7fc fe7d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60ce:	4621      	mov	r1, r4
    60d0:	8830      	ldrh	r0, [r6, #0]
    60d2:	f7fc fe79 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    60d6:	4b0e      	ldr	r3, [pc, #56]	; (6110 <opcode_0xD7()+0x60>)
    Calculate_CMP(global_temp);
    60d8:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    60da:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60dc:	4a0d      	ldr	r2, [pc, #52]	; (6114 <opcode_0xD7()+0x64>)
    60de:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    60e0:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60e4:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60e6:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    60e8:	bf94      	ite	ls
    60ea:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    60ee:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    60f2:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    60f4:	f7fc ff70 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD7].length);
    60f8:	4a07      	ldr	r2, [pc, #28]	; (6118 <opcode_0xD7()+0x68>)
    60fa:	4b08      	ldr	r3, [pc, #32]	; (611c <opcode_0xD7()+0x6c>)
    60fc:	f892 0bdd 	ldrb.w	r0, [r2, #3037]	; 0xbdd
    6100:	881b      	ldrh	r3, [r3, #0]
    6102:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    6104:	b280      	uxth	r0, r0
    6106:	bd70      	pop	{r4, r5, r6, pc}
    6108:	200188a4 	.word	0x200188a4
    610c:	2001888a 	.word	0x2001888a
    6110:	200188a8 	.word	0x200188a8
    6114:	20004a08 	.word	0x20004a08
    6118:	20017418 	.word	0x20017418
    611c:	2001888c 	.word	0x2001888c

00006120 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    6120:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    6122:	f7fd f849 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    6126:	3801      	subs	r0, #1
    global_temp = local_data;
    6128:	4d13      	ldr	r5, [pc, #76]	; (6178 <opcode_0xC3()+0x58>)
    local_data = local_data - 1;
    612a:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    612c:	4e13      	ldr	r6, [pc, #76]	; (617c <opcode_0xC3()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    612e:	4620      	mov	r0, r4
    global_temp = local_data;
    6130:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6132:	f7fc ff51 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6136:	8830      	ldrh	r0, [r6, #0]
    6138:	4621      	mov	r1, r4
    613a:	f7fc fe45 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    613e:	4621      	mov	r1, r4
    6140:	8830      	ldrh	r0, [r6, #0]
    6142:	f7fc fe41 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6146:	4b0e      	ldr	r3, [pc, #56]	; (6180 <opcode_0xC3()+0x60>)
    Calculate_CMP(global_temp);
    6148:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    614a:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    614c:	4a0d      	ldr	r2, [pc, #52]	; (6184 <opcode_0xC3()+0x64>)
    614e:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6150:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6154:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6156:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6158:	bf94      	ite	ls
    615a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    615e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6162:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6164:	f7fc ff38 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC3].length);
    6168:	4a07      	ldr	r2, [pc, #28]	; (6188 <opcode_0xC3()+0x68>)
    616a:	4b08      	ldr	r3, [pc, #32]	; (618c <opcode_0xC3()+0x6c>)
    616c:	f892 07cd 	ldrb.w	r0, [r2, #1997]	; 0x7cd
    6170:	881b      	ldrh	r3, [r3, #0]
    6172:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    6174:	b280      	uxth	r0, r0
    6176:	bd70      	pop	{r4, r5, r6, pc}
    6178:	200188a4 	.word	0x200188a4
    617c:	2001888a 	.word	0x2001888a
    6180:	200188a8 	.word	0x200188a8
    6184:	20004a08 	.word	0x20004a08
    6188:	20017418 	.word	0x20017418
    618c:	2001888c 	.word	0x2001888c

00006190 <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    6190:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    6192:	2000      	movs	r0, #0
    global_temp = local_data;
    6194:	4d15      	ldr	r5, [pc, #84]	; (61ec <opcode_0xD3()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    6196:	f7fd f839 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    619a:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    619c:	4e14      	ldr	r6, [pc, #80]	; (61f0 <opcode_0xD3()+0x60>)
    619e:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61a0:	4620      	mov	r0, r4
    global_temp = local_data;
    61a2:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    61a4:	f7fc ff18 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    61a8:	8830      	ldrh	r0, [r6, #0]
    61aa:	4621      	mov	r1, r4
    61ac:	f7fc fe0c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    61b0:	4621      	mov	r1, r4
    61b2:	8830      	ldrh	r0, [r6, #0]
    61b4:	f7fc fe08 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    61b8:	4b0e      	ldr	r3, [pc, #56]	; (61f4 <opcode_0xD3()+0x64>)
    Calculate_CMP(global_temp);
    61ba:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    61bc:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61be:	4a0e      	ldr	r2, [pc, #56]	; (61f8 <opcode_0xD3()+0x68>)
    61c0:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    61c2:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61c6:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    61c8:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    61ca:	bf94      	ite	ls
    61cc:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    61d0:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    61d4:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    61d6:	f7fc feff 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xD3].length);
    61da:	4a08      	ldr	r2, [pc, #32]	; (61fc <opcode_0xD3()+0x6c>)
    61dc:	4b08      	ldr	r3, [pc, #32]	; (6200 <opcode_0xD3()+0x70>)
    61de:	f892 0b0d 	ldrb.w	r0, [r2, #2829]	; 0xb0d
    61e2:	881b      	ldrh	r3, [r3, #0]
    61e4:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    61e6:	b280      	uxth	r0, r0
    61e8:	bd70      	pop	{r4, r5, r6, pc}
    61ea:	bf00      	nop
    61ec:	200188a4 	.word	0x200188a4
    61f0:	2001888a 	.word	0x2001888a
    61f4:	200188a8 	.word	0x200188a8
    61f8:	20004a08 	.word	0x20004a08
    61fc:	20017418 	.word	0x20017418
    6200:	2001888c 	.word	0x2001888c

00006204 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    6204:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    6206:	f7fc ff5b 	bl	30c0 <Fetch_Absolute()>
    local_data = local_data - 1;
    620a:	3801      	subs	r0, #1
    global_temp = local_data;
    620c:	4d13      	ldr	r5, [pc, #76]	; (625c <opcode_0xCF()+0x58>)
    local_data = local_data - 1;
    620e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6210:	4e13      	ldr	r6, [pc, #76]	; (6260 <opcode_0xCF()+0x5c>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6212:	4620      	mov	r0, r4
    global_temp = local_data;
    6214:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6216:	f7fc fedf 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    621a:	8830      	ldrh	r0, [r6, #0]
    621c:	4621      	mov	r1, r4
    621e:	f7fc fdd3 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6222:	4621      	mov	r1, r4
    6224:	8830      	ldrh	r0, [r6, #0]
    6226:	f7fc fdcf 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    622a:	4b0e      	ldr	r3, [pc, #56]	; (6264 <opcode_0xCF()+0x60>)
    Calculate_CMP(global_temp);
    622c:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    622e:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6230:	4a0d      	ldr	r2, [pc, #52]	; (6268 <opcode_0xCF()+0x64>)
    6232:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    6234:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6238:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    623a:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    623c:	bf94      	ite	ls
    623e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6242:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    6246:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6248:	f7fc fec6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCF].length);
    624c:	4a07      	ldr	r2, [pc, #28]	; (626c <opcode_0xCF()+0x68>)
    624e:	4b08      	ldr	r3, [pc, #32]	; (6270 <opcode_0xCF()+0x6c>)
    6250:	f892 0a3d 	ldrb.w	r0, [r2, #2621]	; 0xa3d
    6254:	881b      	ldrh	r3, [r3, #0]
    6256:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    6258:	b280      	uxth	r0, r0
    625a:	bd70      	pop	{r4, r5, r6, pc}
    625c:	200188a4 	.word	0x200188a4
    6260:	2001888a 	.word	0x2001888a
    6264:	200188a8 	.word	0x200188a8
    6268:	20004a08 	.word	0x20004a08
    626c:	20017418 	.word	0x20017418
    6270:	2001888c 	.word	0x2001888c

00006274 <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    6274:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    6276:	2000      	movs	r0, #0
    global_temp = local_data;
    6278:	4d15      	ldr	r5, [pc, #84]	; (62d0 <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    627a:	f7fc ff3d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    627e:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    6280:	4e14      	ldr	r6, [pc, #80]	; (62d4 <opcode_0xDF()+0x60>)
    6282:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6284:	4620      	mov	r0, r4
    global_temp = local_data;
    6286:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6288:	f7fc fea6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    628c:	8830      	ldrh	r0, [r6, #0]
    628e:	4621      	mov	r1, r4
    6290:	f7fc fd9a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6294:	4621      	mov	r1, r4
    6296:	8830      	ldrh	r0, [r6, #0]
    6298:	f7fc fd96 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    629c:	4b0e      	ldr	r3, [pc, #56]	; (62d8 <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    629e:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    62a0:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    62a2:	4a0e      	ldr	r2, [pc, #56]	; (62dc <opcode_0xDF()+0x68>)
    62a4:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    62a6:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    62aa:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    62ac:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    62ae:	bf94      	ite	ls
    62b0:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    62b4:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    62b8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    62ba:	f7fc fe8d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    62be:	4a08      	ldr	r2, [pc, #32]	; (62e0 <opcode_0xDF()+0x6c>)
    62c0:	4b08      	ldr	r3, [pc, #32]	; (62e4 <opcode_0xDF()+0x70>)
    62c2:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    62c6:	881b      	ldrh	r3, [r3, #0]
    62c8:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    62ca:	b280      	uxth	r0, r0
    62cc:	bd70      	pop	{r4, r5, r6, pc}
    62ce:	bf00      	nop
    62d0:	200188a4 	.word	0x200188a4
    62d4:	2001888a 	.word	0x2001888a
    62d8:	200188a8 	.word	0x200188a8
    62dc:	20004a08 	.word	0x20004a08
    62e0:	20017418 	.word	0x20017418
    62e4:	2001888c 	.word	0x2001888c

000062e8 <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    62e8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    62ea:	2000      	movs	r0, #0
    global_temp = local_data;
    62ec:	4d15      	ldr	r5, [pc, #84]	; (6344 <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    62ee:	f7fc ff33 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    62f2:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    62f4:	4e14      	ldr	r6, [pc, #80]	; (6348 <opcode_0xDB()+0x60>)
    62f6:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62f8:	4620      	mov	r0, r4
    global_temp = local_data;
    62fa:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    62fc:	f7fc fe6c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6300:	8830      	ldrh	r0, [r6, #0]
    6302:	4621      	mov	r1, r4
    6304:	f7fc fd60 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6308:	4621      	mov	r1, r4
    630a:	8830      	ldrh	r0, [r6, #0]
    630c:	f7fc fd5c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    6310:	4b0e      	ldr	r3, [pc, #56]	; (634c <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    6312:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    6314:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6316:	4a0e      	ldr	r2, [pc, #56]	; (6350 <opcode_0xDB()+0x68>)
    6318:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    631a:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    631e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    6320:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    6322:	bf94      	ite	ls
    6324:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    6328:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    632c:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    632e:	f7fc fe53 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    6332:	4a08      	ldr	r2, [pc, #32]	; (6354 <opcode_0xDB()+0x6c>)
    6334:	4b08      	ldr	r3, [pc, #32]	; (6358 <opcode_0xDB()+0x70>)
    6336:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    633a:	881b      	ldrh	r3, [r3, #0]
    633c:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    633e:	b280      	uxth	r0, r0
    6340:	bd70      	pop	{r4, r5, r6, pc}
    6342:	bf00      	nop
    6344:	200188a4 	.word	0x200188a4
    6348:	2001888a 	.word	0x2001888a
    634c:	200188a8 	.word	0x200188a8
    6350:	20004a08 	.word	0x20004a08
    6354:	20017418 	.word	0x20017418
    6358:	2001888c 	.word	0x2001888c

0000635c <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    635e:	4e13      	ldr	r6, [pc, #76]	; (63ac <opcode_0xE7()+0x50>)
    6360:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6362:	4d13      	ldr	r5, [pc, #76]	; (63b0 <opcode_0xE7()+0x54>)
    return read_byte(register_pc+offset, false);
    6364:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    6366:	4f13      	ldr	r7, [pc, #76]	; (63b4 <opcode_0xE7()+0x58>)
    6368:	3001      	adds	r0, #1
    636a:	b280      	uxth	r0, r0
    636c:	f7fc fb70 	bl	2a50 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    6370:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6372:	b280      	uxth	r0, r0
    6374:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    6376:	f7fc fb6b 	bl	2a50 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    637a:	3001      	adds	r0, #1
    637c:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    637e:	4620      	mov	r0, r4
    global_temp = local_data;
    6380:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6382:	f7fc fe29 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6386:	4621      	mov	r1, r4
    6388:	8828      	ldrh	r0, [r5, #0]
    638a:	f7fc fd1d 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    638e:	4621      	mov	r1, r4
    6390:	8828      	ldrh	r0, [r5, #0]
    6392:	f7fc fd19 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    6396:	7838      	ldrb	r0, [r7, #0]
    6398:	f7fd fc52 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    639c:	4a06      	ldr	r2, [pc, #24]	; (63b8 <opcode_0xE7()+0x5c>)
    639e:	8833      	ldrh	r3, [r6, #0]
    63a0:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    63a4:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    63a6:	b280      	uxth	r0, r0
    63a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63aa:	bf00      	nop
    63ac:	2001888c 	.word	0x2001888c
    63b0:	2001888a 	.word	0x2001888a
    63b4:	200188a4 	.word	0x200188a4
    63b8:	20017418 	.word	0x20017418

000063bc <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    63bc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    63be:	f7fc fe3f 	bl	3040 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    63c2:	3001      	adds	r0, #1
    global_temp = local_data;
    63c4:	4d0c      	ldr	r5, [pc, #48]	; (63f8 <opcode_0xF7()+0x3c>)
    local_data = local_data + 1;
    63c6:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    63c8:	4e0c      	ldr	r6, [pc, #48]	; (63fc <opcode_0xF7()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63ca:	4620      	mov	r0, r4
    global_temp = local_data;
    63cc:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    63ce:	f7fc fe03 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    63d2:	8830      	ldrh	r0, [r6, #0]
    63d4:	4621      	mov	r1, r4
    63d6:	f7fc fcf7 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    63da:	4621      	mov	r1, r4
    63dc:	8830      	ldrh	r0, [r6, #0]
    63de:	f7fc fcf3 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    63e2:	7828      	ldrb	r0, [r5, #0]
    63e4:	f7fd fc2c 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    63e8:	4a05      	ldr	r2, [pc, #20]	; (6400 <opcode_0xF7()+0x44>)
    63ea:	4b06      	ldr	r3, [pc, #24]	; (6404 <opcode_0xF7()+0x48>)
    63ec:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    63f0:	881b      	ldrh	r3, [r3, #0]
    63f2:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    63f4:	b280      	uxth	r0, r0
    63f6:	bd70      	pop	{r4, r5, r6, pc}
    63f8:	200188a4 	.word	0x200188a4
    63fc:	2001888a 	.word	0x2001888a
    6400:	20018418 	.word	0x20018418
    6404:	2001888c 	.word	0x2001888c

00006408 <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    6408:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    640a:	f7fc fed5 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    640e:	3001      	adds	r0, #1
    global_temp = local_data;
    6410:	4d0c      	ldr	r5, [pc, #48]	; (6444 <opcode_0xE3()+0x3c>)
    local_data = local_data + 1;
    6412:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    6414:	4e0c      	ldr	r6, [pc, #48]	; (6448 <opcode_0xE3()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6416:	4620      	mov	r0, r4
    global_temp = local_data;
    6418:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    641a:	f7fc fddd 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    641e:	8830      	ldrh	r0, [r6, #0]
    6420:	4621      	mov	r1, r4
    6422:	f7fc fcd1 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6426:	4621      	mov	r1, r4
    6428:	8830      	ldrh	r0, [r6, #0]
    642a:	f7fc fccd 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    642e:	7828      	ldrb	r0, [r5, #0]
    6430:	f7fd fc06 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    6434:	4a05      	ldr	r2, [pc, #20]	; (644c <opcode_0xE3()+0x44>)
    6436:	4b06      	ldr	r3, [pc, #24]	; (6450 <opcode_0xE3()+0x48>)
    6438:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    643c:	881b      	ldrh	r3, [r3, #0]
    643e:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    6440:	b280      	uxth	r0, r0
    6442:	bd70      	pop	{r4, r5, r6, pc}
    6444:	200188a4 	.word	0x200188a4
    6448:	2001888a 	.word	0x2001888a
    644c:	20017418 	.word	0x20017418
    6450:	2001888c 	.word	0x2001888c

00006454 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    6454:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    6456:	2000      	movs	r0, #0
    global_temp = local_data;
    6458:	4d0e      	ldr	r5, [pc, #56]	; (6494 <opcode_0xF3()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    645a:	f7fc fed7 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    645e:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    6460:	4e0d      	ldr	r6, [pc, #52]	; (6498 <opcode_0xF3()+0x44>)
    6462:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6464:	4620      	mov	r0, r4
    global_temp = local_data;
    6466:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6468:	f7fc fdb6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    646c:	8830      	ldrh	r0, [r6, #0]
    646e:	4621      	mov	r1, r4
    6470:	f7fc fcaa 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6474:	4621      	mov	r1, r4
    6476:	8830      	ldrh	r0, [r6, #0]
    6478:	f7fc fca6 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    647c:	7828      	ldrb	r0, [r5, #0]
    647e:	f7fd fbdf 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    6482:	4a06      	ldr	r2, [pc, #24]	; (649c <opcode_0xF3()+0x48>)
    6484:	4b06      	ldr	r3, [pc, #24]	; (64a0 <opcode_0xF3()+0x4c>)
    6486:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    648a:	881b      	ldrh	r3, [r3, #0]
    648c:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    648e:	b280      	uxth	r0, r0
    6490:	bd70      	pop	{r4, r5, r6, pc}
    6492:	bf00      	nop
    6494:	200188a4 	.word	0x200188a4
    6498:	2001888a 	.word	0x2001888a
    649c:	20018418 	.word	0x20018418
    64a0:	2001888c 	.word	0x2001888c

000064a4 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    64a4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    64a6:	f7fc fe0b 	bl	30c0 <Fetch_Absolute()>
    local_data = local_data + 1;
    64aa:	3001      	adds	r0, #1
    global_temp = local_data;
    64ac:	4d0c      	ldr	r5, [pc, #48]	; (64e0 <opcode_0xEF()+0x3c>)
    local_data = local_data + 1;
    64ae:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    64b0:	4e0c      	ldr	r6, [pc, #48]	; (64e4 <opcode_0xEF()+0x40>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64b2:	4620      	mov	r0, r4
    global_temp = local_data;
    64b4:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    64b6:	f7fc fd8f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    64ba:	8830      	ldrh	r0, [r6, #0]
    64bc:	4621      	mov	r1, r4
    64be:	f7fc fc83 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    64c2:	4621      	mov	r1, r4
    64c4:	8830      	ldrh	r0, [r6, #0]
    64c6:	f7fc fc7f 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    64ca:	7828      	ldrb	r0, [r5, #0]
    64cc:	f7fd fbb8 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    64d0:	4a05      	ldr	r2, [pc, #20]	; (64e8 <opcode_0xEF()+0x44>)
    64d2:	4b06      	ldr	r3, [pc, #24]	; (64ec <opcode_0xEF()+0x48>)
    64d4:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    64d8:	881b      	ldrh	r3, [r3, #0]
    64da:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    64dc:	b280      	uxth	r0, r0
    64de:	bd70      	pop	{r4, r5, r6, pc}
    64e0:	200188a4 	.word	0x200188a4
    64e4:	2001888a 	.word	0x2001888a
    64e8:	20018418 	.word	0x20018418
    64ec:	2001888c 	.word	0x2001888c

000064f0 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    64f0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    64f2:	2000      	movs	r0, #0
    global_temp = local_data;
    64f4:	4d0e      	ldr	r5, [pc, #56]	; (6530 <opcode_0xFF()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    64f6:	f7fc fdff 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    64fa:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    64fc:	4e0d      	ldr	r6, [pc, #52]	; (6534 <opcode_0xFF()+0x44>)
    64fe:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6500:	4620      	mov	r0, r4
    global_temp = local_data;
    6502:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6504:	f7fc fd68 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6508:	8830      	ldrh	r0, [r6, #0]
    650a:	4621      	mov	r1, r4
    650c:	f7fc fc5c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6510:	4621      	mov	r1, r4
    6512:	8830      	ldrh	r0, [r6, #0]
    6514:	f7fc fc58 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6518:	7828      	ldrb	r0, [r5, #0]
    651a:	f7fd fb91 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    651e:	4a06      	ldr	r2, [pc, #24]	; (6538 <opcode_0xFF()+0x48>)
    6520:	4b06      	ldr	r3, [pc, #24]	; (653c <opcode_0xFF()+0x4c>)
    6522:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    6526:	881b      	ldrh	r3, [r3, #0]
    6528:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    652a:	b280      	uxth	r0, r0
    652c:	bd70      	pop	{r4, r5, r6, pc}
    652e:	bf00      	nop
    6530:	200188a4 	.word	0x200188a4
    6534:	2001888a 	.word	0x2001888a
    6538:	20018418 	.word	0x20018418
    653c:	2001888c 	.word	0x2001888c

00006540 <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    6540:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    6542:	2000      	movs	r0, #0
    global_temp = local_data;
    6544:	4d0e      	ldr	r5, [pc, #56]	; (6580 <opcode_0xFB()+0x40>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    6546:	f7fc fe07 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    654a:	3001      	adds	r0, #1
    write_byte(effective_address, local_data);
    654c:	4e0d      	ldr	r6, [pc, #52]	; (6584 <opcode_0xFB()+0x44>)
    654e:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6550:	4620      	mov	r0, r4
    global_temp = local_data;
    6552:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    6554:	f7fc fd40 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    6558:	8830      	ldrh	r0, [r6, #0]
    655a:	4621      	mov	r1, r4
    655c:	f7fc fc34 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6560:	4621      	mov	r1, r4
    6562:	8830      	ldrh	r0, [r6, #0]
    6564:	f7fc fc30 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    6568:	7828      	ldrb	r0, [r5, #0]
    656a:	f7fd fb69 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    656e:	4a06      	ldr	r2, [pc, #24]	; (6588 <opcode_0xFB()+0x48>)
    6570:	4b06      	ldr	r3, [pc, #24]	; (658c <opcode_0xFB()+0x4c>)
    6572:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    6576:	881b      	ldrh	r3, [r3, #0]
    6578:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    657a:	b280      	uxth	r0, r0
    657c:	bd70      	pop	{r4, r5, r6, pc}
    657e:	bf00      	nop
    6580:	200188a4 	.word	0x200188a4
    6584:	2001888a 	.word	0x2001888a
    6588:	20018418 	.word	0x20018418
    658c:	2001888c 	.word	0x2001888c

00006590 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    6590:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    6592:	4c0e      	ldr	r4, [pc, #56]	; (65cc <opcode_0x0B()+0x3c>)
    6594:	2100      	movs	r1, #0
    6596:	8820      	ldrh	r0, [r4, #0]
    6598:	3001      	adds	r0, #1
    659a:	b280      	uxth	r0, r0
    659c:	f7fc fa58 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    65a0:	4b0b      	ldr	r3, [pc, #44]	; (65d0 <opcode_0x0B()+0x40>)
    65a2:	781a      	ldrb	r2, [r3, #0]
    65a4:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    65a6:	4a0b      	ldr	r2, [pc, #44]	; (65d4 <opcode_0x0B()+0x44>)
    65a8:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    65aa:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    65ac:	7813      	ldrb	r3, [r2, #0]
    65ae:	bf4c      	ite	mi
    65b0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    65b4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    65b8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    65ba:	f7fc fd0d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    65be:	4a06      	ldr	r2, [pc, #24]	; (65d8 <opcode_0x0B()+0x48>)
    65c0:	8823      	ldrh	r3, [r4, #0]
    65c2:	f892 026d 	ldrb.w	r0, [r2, #621]	; 0x26d
    65c6:	4418      	add	r0, r3
} // 0x0B - ANC - Immediate
    65c8:	b280      	uxth	r0, r0
    65ca:	bd10      	pop	{r4, pc}
    65cc:	2001888c 	.word	0x2001888c
    65d0:	200188a8 	.word	0x200188a8
    65d4:	20004a08 	.word	0x20004a08
    65d8:	20015418 	.word	0x20015418

000065dc <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    65dc:	b510      	push	{r4, lr}
    65de:	4c0e      	ldr	r4, [pc, #56]	; (6618 <opcode_0x2B()+0x3c>)
    65e0:	2100      	movs	r1, #0
    65e2:	8820      	ldrh	r0, [r4, #0]
    65e4:	3001      	adds	r0, #1
    65e6:	b280      	uxth	r0, r0
    65e8:	f7fc fa32 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    65ec:	4b0b      	ldr	r3, [pc, #44]	; (661c <opcode_0x2B()+0x40>)
    65ee:	781a      	ldrb	r2, [r3, #0]
    65f0:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    65f2:	4a0b      	ldr	r2, [pc, #44]	; (6620 <opcode_0x2B()+0x44>)
    65f4:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    65f6:	7018      	strb	r0, [r3, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    65f8:	7813      	ldrb	r3, [r2, #0]
    65fa:	bf4c      	ite	mi
    65fc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6600:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    6604:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6606:	f7fc fce7 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    660a:	4a06      	ldr	r2, [pc, #24]	; (6624 <opcode_0x2B()+0x48>)
    660c:	8823      	ldrh	r3, [r4, #0]
    660e:	f892 08ed 	ldrb.w	r0, [r2, #2285]	; 0x8ed
    6612:	4418      	add	r0, r3
} // 0x2B - ANC - Immediate
    6614:	b280      	uxth	r0, r0
    6616:	bd10      	pop	{r4, pc}
    6618:	2001888c 	.word	0x2001888c
    661c:	200188a8 	.word	0x200188a8
    6620:	20004a08 	.word	0x20004a08
    6624:	20015418 	.word	0x20015418

00006628 <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    6628:	b510      	push	{r4, lr}
    662a:	4c10      	ldr	r4, [pc, #64]	; (666c <opcode_0x4B()+0x44>)
    662c:	2100      	movs	r1, #0
    662e:	8820      	ldrh	r0, [r4, #0]
    6630:	3001      	adds	r0, #1
    6632:	b280      	uxth	r0, r0
    6634:	f7fc fa0c 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    6638:	4a0d      	ldr	r2, [pc, #52]	; (6670 <opcode_0x4B()+0x48>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    663a:	490e      	ldr	r1, [pc, #56]	; (6674 <opcode_0x4B()+0x4c>)
    register_a = register_a & local_data;
    663c:	7813      	ldrb	r3, [r2, #0]
    663e:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    6640:	780b      	ldrb	r3, [r1, #0]
    6642:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    6646:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    664a:	bf14      	ite	ne
    664c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6650:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    6654:	7010      	strb	r0, [r2, #0]
    6656:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6658:	f7fc fcbe 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    665c:	4a06      	ldr	r2, [pc, #24]	; (6678 <opcode_0x4B()+0x50>)
    665e:	8823      	ldrh	r3, [r4, #0]
    6660:	f892 0f6d 	ldrb.w	r0, [r2, #3949]	; 0xf6d
    6664:	4418      	add	r0, r3
} // 0x4B - ALR - Immediate
    6666:	b280      	uxth	r0, r0
    6668:	bd10      	pop	{r4, pc}
    666a:	bf00      	nop
    666c:	2001888c 	.word	0x2001888c
    6670:	200188a8 	.word	0x200188a8
    6674:	20004a08 	.word	0x20004a08
    6678:	20015418 	.word	0x20015418

0000667c <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    667c:	b510      	push	{r4, lr}
    667e:	4c0f      	ldr	r4, [pc, #60]	; (66bc <opcode_0x6B()+0x40>)
    6680:	2100      	movs	r1, #0
    6682:	8820      	ldrh	r0, [r4, #0]
    6684:	3001      	adds	r0, #1
    6686:	b280      	uxth	r0, r0
    6688:	f7fc f9e2 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    668c:	490c      	ldr	r1, [pc, #48]	; (66c0 <opcode_0x6B()+0x44>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    668e:	4a0d      	ldr	r2, [pc, #52]	; (66c4 <opcode_0x6B()+0x48>)
    register_a = register_a & local_data;
    6690:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    6692:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    6694:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    6696:	0840      	lsrs	r0, r0, #1
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    6698:	f003 03be 	and.w	r3, r3, #190	; 0xbe
    register_a = (0x7F & (register_a >> 1));
    669c:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    669e:	f000 0140 	and.w	r1, r0, #64	; 0x40
    66a2:	b109      	cbz	r1, 66a8 <opcode_0x6B()+0x2c>
        register_flags = register_flags | 0x40;
    66a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    66a8:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    66aa:	f7fc fc95 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    66ae:	4a06      	ldr	r2, [pc, #24]	; (66c8 <opcode_0x6B()+0x4c>)
    66b0:	8823      	ldrh	r3, [r4, #0]
    66b2:	f892 05ed 	ldrb.w	r0, [r2, #1517]	; 0x5ed
    66b6:	4418      	add	r0, r3
} // 0x6B - ARR - Immediate
    66b8:	b280      	uxth	r0, r0
    66ba:	bd10      	pop	{r4, pc}
    66bc:	2001888c 	.word	0x2001888c
    66c0:	200188a8 	.word	0x200188a8
    66c4:	20004a08 	.word	0x20004a08
    66c8:	20016418 	.word	0x20016418

000066cc <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    66cc:	b510      	push	{r4, lr}
    66ce:	4c11      	ldr	r4, [pc, #68]	; (6714 <opcode_0xCB()+0x48>)
    66d0:	2100      	movs	r1, #0
    66d2:	8820      	ldrh	r0, [r4, #0]
    66d4:	3001      	adds	r0, #1
    66d6:	b280      	uxth	r0, r0
    66d8:	f7fc f9ba 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    66dc:	4a0e      	ldr	r2, [pc, #56]	; (6718 <opcode_0xCB()+0x4c>)
    66de:	4b0f      	ldr	r3, [pc, #60]	; (671c <opcode_0xCB()+0x50>)
    66e0:	7811      	ldrb	r1, [r2, #0]
    66e2:	781b      	ldrb	r3, [r3, #0]
    66e4:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    66e6:	490e      	ldr	r1, [pc, #56]	; (6720 <opcode_0xCB()+0x54>)
    register_x = register_x - local_data;
    66e8:	1a1b      	subs	r3, r3, r0
    66ea:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    66ec:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    66ee:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    66f0:	780a      	ldrb	r2, [r1, #0]
    66f2:	0400      	lsls	r0, r0, #16
    Calc_Flags_NEGATIVE_ZERO(register_x);
    66f4:	4618      	mov	r0, r3
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    66f6:	bf54      	ite	pl
    66f8:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    66fc:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    6700:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    6702:	f7fc fc69 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    6706:	4a07      	ldr	r2, [pc, #28]	; (6724 <opcode_0xCB()+0x58>)
    6708:	8823      	ldrh	r3, [r4, #0]
    670a:	f892 096d 	ldrb.w	r0, [r2, #2413]	; 0x96d
    670e:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    6710:	b280      	uxth	r0, r0
    6712:	bd10      	pop	{r4, pc}
    6714:	2001888c 	.word	0x2001888c
    6718:	200188a9 	.word	0x200188a9
    671c:	200188a8 	.word	0x200188a8
    6720:	20004a08 	.word	0x20004a08
    6724:	20017418 	.word	0x20017418

00006728 <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    6728:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    672a:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    672c:	f7fc fc68 	bl	3000 <Fetch_Immediate(unsigned char)>
    while (1) {}
    6730:	e7fe      	b.n	6730 <opcode_0x02()+0x8>
    6732:	bf00      	nop

00006734 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    6734:	b530      	push	{r4, r5, lr}
    6736:	4604      	mov	r4, r0
	uint8_t op1 = read_byte(pc+1, false);
    6738:	3001      	adds	r0, #1
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    673a:	b087      	sub	sp, #28
    673c:	460d      	mov	r5, r1
	uint8_t op2 = read_byte(pc+2, false);
    673e:	3402      	adds	r4, #2
	uint8_t op1 = read_byte(pc+1, false);
    6740:	2100      	movs	r1, #0
    6742:	b280      	uxth	r0, r0
    6744:	f7fc f984 	bl	2a50 <read_byte(unsigned short, bool)>
	uint8_t op2 = read_byte(pc+2, false);
    6748:	2100      	movs	r1, #0
	uint8_t op1 = read_byte(pc+1, false);
    674a:	9001      	str	r0, [sp, #4]
	uint8_t op2 = read_byte(pc+2, false);
    674c:	b2a0      	uxth	r0, r4
    674e:	f7fc f97f 	bl	2a50 <read_byte(unsigned short, bool)>
	Serial.println(decode_opcode(opcode, op1, op2).c_str());
    6752:	9a01      	ldr	r2, [sp, #4]
	uint8_t op2 = read_byte(pc+2, false);
    6754:	4603      	mov	r3, r0
	Serial.println(decode_opcode(opcode, op1, op2).c_str());
    6756:	4629      	mov	r1, r5
    6758:	a802      	add	r0, sp, #8
    675a:	f7f9 fcc9 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    675e:	9c02      	ldr	r4, [sp, #8]
    6760:	b174      	cbz	r4, 6780 <display_next_instruction(unsigned short, unsigned char)+0x4c>
							  return write((const uint8_t *)str, strlen(str)); }
    6762:	4620      	mov	r0, r4
    6764:	f005 feec 	bl	c540 <strlen>
    6768:	4601      	mov	r1, r0
    676a:	4620      	mov	r0, r4
    676c:	f003 ff40 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6770:	4804      	ldr	r0, [pc, #16]	; (6784 <display_next_instruction(unsigned short, unsigned char)+0x50>)
    6772:	f002 fa73 	bl	8c5c <Print::println()>
    6776:	a802      	add	r0, sp, #8
    6778:	f002 fac6 	bl	8d08 <String::~String()>
}
    677c:	b007      	add	sp, #28
    677e:	bd30      	pop	{r4, r5, pc}
    6780:	4c01      	ldr	r4, [pc, #4]	; (6788 <display_next_instruction(unsigned short, unsigned char)+0x54>)
    6782:	e7ee      	b.n	6762 <display_next_instruction(unsigned short, unsigned char)+0x2e>
    6784:	200043f8 	.word	0x200043f8
    6788:	200012cc 	.word	0x200012cc

0000678c <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    678c:	4922      	ldr	r1, [pc, #136]	; (6818 <display_registers()+0x8c>)
    678e:	4b23      	ldr	r3, [pc, #140]	; (681c <display_registers()+0x90>)
    6790:	4a23      	ldr	r2, [pc, #140]	; (6820 <display_registers()+0x94>)
void display_registers() {
    6792:	b500      	push	{lr}
    6794:	b08f      	sub	sp, #60	; 0x3c
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    6796:	7808      	ldrb	r0, [r1, #0]
    6798:	781b      	ldrb	r3, [r3, #0]
    679a:	7812      	ldrb	r2, [r2, #0]
    679c:	4921      	ldr	r1, [pc, #132]	; (6824 <display_registers()+0x98>)
    679e:	9000      	str	r0, [sp, #0]
    67a0:	a806      	add	r0, sp, #24
    67a2:	f005 fa91 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    67a6:	a806      	add	r0, sp, #24
    67a8:	f005 feca 	bl	c540 <strlen>
    67ac:	4601      	mov	r1, r0
    67ae:	a806      	add	r0, sp, #24
    67b0:	f003 ff1e 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    67b4:	481c      	ldr	r0, [pc, #112]	; (6828 <display_registers()+0x9c>)
    67b6:	f002 fa51 	bl	8c5c <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    67ba:	4b1c      	ldr	r3, [pc, #112]	; (682c <display_registers()+0xa0>)
    67bc:	4a1c      	ldr	r2, [pc, #112]	; (6830 <display_registers()+0xa4>)
    67be:	a806      	add	r0, sp, #24
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	8812      	ldrh	r2, [r2, #0]
    67c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    67c8:	491a      	ldr	r1, [pc, #104]	; (6834 <display_registers()+0xa8>)
    67ca:	f005 fa7d 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    67ce:	a806      	add	r0, sp, #24
    67d0:	f005 feb6 	bl	c540 <strlen>
    67d4:	4601      	mov	r1, r0
    67d6:	a806      	add	r0, sp, #24
    67d8:	f003 ff0a 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    67dc:	4812      	ldr	r0, [pc, #72]	; (6828 <display_registers()+0x9c>)
    67de:	f002 fa3d 	bl	8c5c <Print::println()>
    sprintf(buf, "            Flags: %s", flag_status().c_str());
    67e2:	a802      	add	r0, sp, #8
    67e4:	f7fc f832 	bl	284c <flag_status()>
    67e8:	9a02      	ldr	r2, [sp, #8]
    67ea:	b19a      	cbz	r2, 6814 <display_registers()+0x88>
    67ec:	4912      	ldr	r1, [pc, #72]	; (6838 <display_registers()+0xac>)
    67ee:	a806      	add	r0, sp, #24
    67f0:	f005 fa6a 	bl	bcc8 <sprintf>
    67f4:	a802      	add	r0, sp, #8
    67f6:	f002 fa87 	bl	8d08 <String::~String()>
							  return write((const uint8_t *)str, strlen(str)); }
    67fa:	a806      	add	r0, sp, #24
    67fc:	f005 fea0 	bl	c540 <strlen>
    6800:	4601      	mov	r1, r0
    6802:	a806      	add	r0, sp, #24
    6804:	f003 fef4 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6808:	4807      	ldr	r0, [pc, #28]	; (6828 <display_registers()+0x9c>)
    680a:	f002 fa27 	bl	8c5c <Print::println()>
}
    680e:	b00f      	add	sp, #60	; 0x3c
    6810:	f85d fb04 	ldr.w	pc, [sp], #4
    6814:	4a09      	ldr	r2, [pc, #36]	; (683c <display_registers()+0xb0>)
    6816:	e7e9      	b.n	67ec <display_registers()+0x60>
    6818:	200188aa 	.word	0x200188aa
    681c:	200188a9 	.word	0x200188a9
    6820:	200188a8 	.word	0x200188a8
    6824:	200008f4 	.word	0x200008f4
    6828:	200043f8 	.word	0x200043f8
    682c:	20004a09 	.word	0x20004a09
    6830:	2001888c 	.word	0x2001888c
    6834:	20000918 	.word	0x20000918
    6838:	20000938 	.word	0x20000938
    683c:	200012cc 	.word	0x200012cc

00006840 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    6840:	490c      	ldr	r1, [pc, #48]	; (6874 <display_info()+0x34>)
    6842:	4b0d      	ldr	r3, [pc, #52]	; (6878 <display_info()+0x38>)
    6844:	6808      	ldr	r0, [r1, #0]
    6846:	4a0d      	ldr	r2, [pc, #52]	; (687c <display_info()+0x3c>)
    6848:	781b      	ldrb	r3, [r3, #0]
    684a:	7812      	ldrb	r2, [r2, #0]
    684c:	490c      	ldr	r1, [pc, #48]	; (6880 <display_info()+0x40>)
void display_info() {
    684e:	b500      	push	{lr}
    6850:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    6852:	9000      	str	r0, [sp, #0]
    6854:	a802      	add	r0, sp, #8
    6856:	f005 fa37 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    685a:	a802      	add	r0, sp, #8
    685c:	f005 fe70 	bl	c540 <strlen>
    6860:	4601      	mov	r1, r0
    6862:	a802      	add	r0, sp, #8
    6864:	f003 fec4 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6868:	4806      	ldr	r0, [pc, #24]	; (6884 <display_info()+0x44>)
    686a:	f002 f9f7 	bl	8c5c <Print::println()>
}
    686e:	b013      	add	sp, #76	; 0x4c
    6870:	f85d fb04 	ldr.w	pc, [sp], #4
    6874:	200053c8 	.word	0x200053c8
    6878:	2001889c 	.word	0x2001889c
    687c:	200188ac 	.word	0x200188ac
    6880:	200003a4 	.word	0x200003a4
    6884:	200043f8 	.word	0x200043f8

00006888 <get_command()>:
String get_command() {
    6888:	b570      	push	{r4, r5, r6, lr}
    688a:	b084      	sub	sp, #16
    String s = "";
    688c:	491c      	ldr	r1, [pc, #112]	; (6900 <get_command()+0x78>)
String get_command() {
    688e:	4605      	mov	r5, r0
    6890:	4e1c      	ldr	r6, [pc, #112]	; (6904 <get_command()+0x7c>)
    String s = "";
    6892:	4668      	mov	r0, sp
    6894:	f002 fa74 	bl	8d80 <String::String(char const*)>
    6898:	2103      	movs	r1, #3
    689a:	481b      	ldr	r0, [pc, #108]	; (6908 <get_command()+0x80>)
    689c:	f003 fea8 	bl	a5f0 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    68a0:	f003 fe3c 	bl	a51c <usb_serial_available>
        if (Serial.available()) {
    68a4:	2800      	cmp	r0, #0
    68a6:	d0fb      	beq.n	68a0 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    68a8:	f003 fe7c 	bl	a5a4 <usb_serial_getchar>
            switch(c) {
    68ac:	b2c4      	uxtb	r4, r0
    68ae:	2c08      	cmp	r4, #8
    68b0:	d00e      	beq.n	68d0 <get_command()+0x48>
    68b2:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    68b4:	4620      	mov	r0, r4
            switch(c) {
    68b6:	d016      	beq.n	68e6 <get_command()+0x5e>
                    if (isprint(c)) {
    68b8:	f005 f908 	bl	bacc <isprint>
    68bc:	2800      	cmp	r0, #0
    68be:	d0ef      	beq.n	68a0 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    68c0:	4621      	mov	r1, r4
    68c2:	4668      	mov	r0, sp
    68c4:	f002 fb10 	bl	8ee8 <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    68c8:	4620      	mov	r0, r4
    68ca:	f003 fe7b 	bl	a5c4 <usb_serial_putchar>
    68ce:	e7e7      	b.n	68a0 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    68d0:	9902      	ldr	r1, [sp, #8]
    68d2:	2201      	movs	r2, #1
    68d4:	4668      	mov	r0, sp
    68d6:	3901      	subs	r1, #1
    68d8:	f002 fbd4 	bl	9084 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    68dc:	2103      	movs	r1, #3
    68de:	4630      	mov	r0, r6
    68e0:	f003 fe86 	bl	a5f0 <usb_serial_write>
    68e4:	e7dc      	b.n	68a0 <get_command()+0x18>
                    return(s.toLowerCase());
    68e6:	4668      	mov	r0, sp
    68e8:	f002 fbec 	bl	90c4 <String::toLowerCase()>
    68ec:	4601      	mov	r1, r0
    68ee:	4628      	mov	r0, r5
    68f0:	f002 f9d6 	bl	8ca0 <String::String(String const&)>
}
    68f4:	4668      	mov	r0, sp
    68f6:	f002 fa07 	bl	8d08 <String::~String()>
    68fa:	4628      	mov	r0, r5
    68fc:	b004      	add	sp, #16
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	200004f8 	.word	0x200004f8
    6904:	20000380 	.word	0x20000380
    6908:	2000037c 	.word	0x2000037c

0000690c <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    690c:	b570      	push	{r4, r5, r6, lr}
    690e:	460d      	mov	r5, r1
    6910:	b088      	sub	sp, #32
    String arg = "";
    6912:	4923      	ldr	r1, [pc, #140]	; (69a0 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    6914:	4616      	mov	r6, r2
    6916:	4604      	mov	r4, r0
    String arg = "";
    6918:	f002 fa32 	bl	8d80 <String::String(char const*)>

    String src = _src.trim();
    691c:	4628      	mov	r0, r5
    691e:	f002 fbe1 	bl	90e4 <String::trim()>
    6922:	4601      	mov	r1, r0
    6924:	4668      	mov	r0, sp
    6926:	f002 f9bb 	bl	8ca0 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    692a:	9b02      	ldr	r3, [sp, #8]
    692c:	b92b      	cbnz	r3, 693a <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    692e:	4668      	mov	r0, sp
    6930:	f002 f9ea 	bl	8d08 <String::~String()>
    6934:	4620      	mov	r0, r4
    6936:	b008      	add	sp, #32
    6938:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    693a:	2120      	movs	r1, #32
    693c:	4668      	mov	r0, sp
    693e:	f002 fb39 	bl	8fb4 <String::indexOf(char) const>
        if (idx>0) {
    6942:	1e05      	subs	r5, r0, #0
    6944:	dd1e      	ble.n	6984 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    6946:	462b      	mov	r3, r5
    6948:	2200      	movs	r2, #0
    694a:	4669      	mov	r1, sp
    694c:	a804      	add	r0, sp, #16
    694e:	f002 fb6d 	bl	902c <String::substring(unsigned int, unsigned int) const>
    6952:	a904      	add	r1, sp, #16
    6954:	4620      	mov	r0, r4
    6956:	f002 fa5f 	bl	8e18 <String::operator=(String&&)>
    695a:	a804      	add	r0, sp, #16
    695c:	f002 f9d4 	bl	8d08 <String::~String()>
            remainder = src.substring(idx+1);
    6960:	1c6a      	adds	r2, r5, #1
    6962:	4669      	mov	r1, sp
    6964:	a804      	add	r0, sp, #16
    6966:	f002 fb35 	bl	8fd4 <String::substring(unsigned int) const>
    696a:	a904      	add	r1, sp, #16
    696c:	4630      	mov	r0, r6
    696e:	f002 fa53 	bl	8e18 <String::operator=(String&&)>
    6972:	a804      	add	r0, sp, #16
    6974:	f002 f9c8 	bl	8d08 <String::~String()>
}
    6978:	4668      	mov	r0, sp
    697a:	f002 f9c5 	bl	8d08 <String::~String()>
    697e:	4620      	mov	r0, r4
    6980:	b008      	add	sp, #32
    6982:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    6984:	4669      	mov	r1, sp
    6986:	4620      	mov	r0, r4
    6988:	f002 fa3e 	bl	8e08 <String::operator=(String const&)>
            remainder = "";
    698c:	4904      	ldr	r1, [pc, #16]	; (69a0 <parse_next_arg(String&, String&)+0x94>)
    698e:	4630      	mov	r0, r6
    6990:	f002 fa58 	bl	8e44 <String::operator=(char const*)>
}
    6994:	4668      	mov	r0, sp
    6996:	f002 f9b7 	bl	8d08 <String::~String()>
    699a:	4620      	mov	r0, r4
    699c:	b008      	add	sp, #32
    699e:	bd70      	pop	{r4, r5, r6, pc}
    69a0:	200004f8 	.word	0x200004f8

000069a4 <print_instruction(unsigned short)>:

uint16_t print_instruction(uint16_t address) {
    69a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t opcode = read_byte(address, false);
    69a8:	2100      	movs	r1, #0
uint16_t print_instruction(uint16_t address) {
    69aa:	b086      	sub	sp, #24
    69ac:	4606      	mov	r6, r0
    uint8_t opcode = read_byte(address, false);
    69ae:	f7fc f84f 	bl	2a50 <read_byte(unsigned short, bool)>
    uint8_t instr_length = opcode_info[opcode].length;
    69b2:	4b1f      	ldr	r3, [pc, #124]	; (6a30 <print_instruction(unsigned short)+0x8c>)
    69b4:	2234      	movs	r2, #52	; 0x34

    uint8_t operands[2] = {0, 0};
    69b6:	2400      	movs	r4, #0
    uint8_t opcode = read_byte(address, false);
    69b8:	4607      	mov	r7, r0
    uint8_t instr_length = opcode_info[opcode].length;
    69ba:	fb02 3300 	mla	r3, r2, r0, r3
    uint8_t operands[2] = {0, 0};
    69be:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t instr_length = opcode_info[opcode].length;
    69c2:	f893 8031 	ldrb.w	r8, [r3, #49]	; 0x31
    for (uint8_t i=0; i<instr_length-1; i++)
    69c6:	f108 39ff 	add.w	r9, r8, #4294967295
    69ca:	45a1      	cmp	r9, r4
    69cc:	dd2d      	ble.n	6a2a <print_instruction(unsigned short)+0x86>
    69ce:	f106 0a01 	add.w	sl, r6, #1
    69d2:	4625      	mov	r5, r4
    69d4:	fa1f fa8a 	uxth.w	sl, sl
        operands[i] = read_byte(address + 1 + i, false);
    69d8:	eb0a 0004 	add.w	r0, sl, r4
    for (uint8_t i=0; i<instr_length-1; i++)
    69dc:	3401      	adds	r4, #1
        operands[i] = read_byte(address + 1 + i, false);
    69de:	2100      	movs	r1, #0
    69e0:	b280      	uxth	r0, r0
    69e2:	f7fc f835 	bl	2a50 <read_byte(unsigned short, bool)>
    69e6:	f105 0318 	add.w	r3, r5, #24
    for (uint8_t i=0; i<instr_length-1; i++)
    69ea:	b2e4      	uxtb	r4, r4
        operands[i] = read_byte(address + 1 + i, false);
    69ec:	eb0d 0503 	add.w	r5, sp, r3
    for (uint8_t i=0; i<instr_length-1; i++)
    69f0:	454c      	cmp	r4, r9
        operands[i] = read_byte(address + 1 + i, false);
    69f2:	f805 0c14 	strb.w	r0, [r5, #-20]
    for (uint8_t i=0; i<instr_length-1; i++)
    69f6:	4625      	mov	r5, r4
    69f8:	dbee      	blt.n	69d8 <print_instruction(unsigned short)+0x34>

    String s = decode_opcode(opcode, operands[0], operands[1]);
    69fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    69fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6a02:	4639      	mov	r1, r7
    6a04:	a802      	add	r0, sp, #8
    Serial.println(s);

    return(address + instr_length);
    6a06:	4446      	add	r6, r8
    String s = decode_opcode(opcode, operands[0], operands[1]);
    6a08:	f7f9 fb72 	bl	f0 <decode_opcode(unsigned char, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
    6a0c:	a902      	add	r1, sp, #8
    6a0e:	4809      	ldr	r0, [pc, #36]	; (6a34 <print_instruction(unsigned short)+0x90>)
    6a10:	f002 f8fe 	bl	8c10 <Print::print(String const&)>
    6a14:	4807      	ldr	r0, [pc, #28]	; (6a34 <print_instruction(unsigned short)+0x90>)
    return(address + instr_length);
    6a16:	b2b6      	uxth	r6, r6
    6a18:	f002 f920 	bl	8c5c <Print::println()>
}
    6a1c:	a802      	add	r0, sp, #8
    6a1e:	f002 f973 	bl	8d08 <String::~String()>
    6a22:	4630      	mov	r0, r6
    6a24:	b006      	add	sp, #24
    6a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (uint8_t i=0; i<instr_length-1; i++)
    6a2a:	4623      	mov	r3, r4
    6a2c:	4622      	mov	r2, r4
    6a2e:	e7e8      	b.n	6a02 <print_instruction(unsigned short)+0x5e>
    6a30:	20015418 	.word	0x20015418
    6a34:	200043f8 	.word	0x200043f8

00006a38 <process_command(String)>:
        // of the following instruction
        next_pc = print_instruction(next_pc);
    }
}

ENUM_RUN_MODE process_command(String input) {
    6a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a3c:	b0a5      	sub	sp, #148	; 0x94
    6a3e:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    6a40:	49b5      	ldr	r1, [pc, #724]	; (6d18 <process_command(String)+0x2e0>)
    6a42:	4668      	mov	r0, sp
    6a44:	f002 f99c 	bl	8d80 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    6a48:	466a      	mov	r2, sp
    6a4a:	4621      	mov	r1, r4
    6a4c:	a804      	add	r0, sp, #16
    6a4e:	f7ff ff5d 	bl	690c <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    6a52:	466a      	mov	r2, sp
    6a54:	4669      	mov	r1, sp
    6a56:	a808      	add	r0, sp, #32
    6a58:	f7ff ff58 	bl	690c <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    6a5c:	466a      	mov	r2, sp
    6a5e:	4669      	mov	r1, sp
    6a60:	a80c      	add	r0, sp, #48	; 0x30
    6a62:	f7ff ff53 	bl	690c <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    6a66:	2100      	movs	r1, #0
    6a68:	a804      	add	r0, sp, #16
    6a6a:	f002 fa79 	bl	8f60 <String::operator[](unsigned int)>
    6a6e:	7805      	ldrb	r5, [r0, #0]
    6a70:	2101      	movs	r1, #1
    6a72:	a804      	add	r0, sp, #16
    6a74:	f002 fa74 	bl	8f60 <String::operator[](unsigned int)>
    6a78:	7803      	ldrb	r3, [r0, #0]
    6a7a:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    6a7c:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    6a80:	442b      	add	r3, r5
    switch (cmd_int) {
    6a82:	4293      	cmp	r3, r2
    6a84:	f000 8244 	beq.w	6f10 <process_command(String)+0x4d8>
    6a88:	d83f      	bhi.n	6b0a <process_command(String)+0xd2>
    6a8a:	f246 6265 	movw	r2, #26213	; 0x6665
    6a8e:	4293      	cmp	r3, r2
    6a90:	f000 820f 	beq.w	6eb2 <process_command(String)+0x47a>
    6a94:	f240 80fe 	bls.w	6c94 <process_command(String)+0x25c>
    6a98:	f646 126e 	movw	r2, #26990	; 0x696e
    6a9c:	4293      	cmp	r3, r2
    6a9e:	f000 822f 	beq.w	6f00 <process_command(String)+0x4c8>
    6aa2:	f240 8096 	bls.w	6bd2 <process_command(String)+0x19a>
    6aa6:	f646 4269 	movw	r2, #27753	; 0x6c69
    6aaa:	4293      	cmp	r3, r2
    6aac:	f040 81b4 	bne.w	6e18 <process_command(String)+0x3e0>
            if (pc_trace)
                pc_trace_index = 0;
			break;

        case CMD_LI:
            switch ((arg1.length()>0) + (arg2.length()>0)) {
    6ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ab4:	3b00      	subs	r3, #0
    6ab6:	bf18      	it	ne
    6ab8:	2301      	movne	r3, #1
    6aba:	2a00      	cmp	r2, #0
    6abc:	bf18      	it	ne
    6abe:	3301      	addne	r3, #1
    6ac0:	2b01      	cmp	r3, #1
    6ac2:	f000 823c 	beq.w	6f3e <process_command(String)+0x506>
    6ac6:	2b02      	cmp	r3, #2
    6ac8:	f040 822f 	bne.w	6f2a <process_command(String)+0x4f2>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6acc:	9808      	ldr	r0, [sp, #32]
    6ace:	2800      	cmp	r0, #0
    6ad0:	f000 82a8 	beq.w	7024 <process_command(String)+0x5ec>
                        list_instructions(start_address, 16);
                    }
                    break;
                case 2:  // Two arguments - Print instructions starting at address, count
                    {
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6ad4:	2210      	movs	r2, #16
    6ad6:	2100      	movs	r1, #0
    6ad8:	f004 fee6 	bl	b8a8 <strtol>
    6adc:	b284      	uxth	r4, r0
    6ade:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ae0:	2800      	cmp	r0, #0
    6ae2:	f000 829d 	beq.w	7020 <process_command(String)+0x5e8>
                        uint8_t count = strtol(arg2.c_str(), 0, 8);
    6ae6:	2208      	movs	r2, #8
    6ae8:	2100      	movs	r1, #0
    6aea:	f004 fedd 	bl	b8a8 <strtol>
    for (uint8_t i=0; i<count; i++) {
    6aee:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    6af2:	f000 810d 	beq.w	6d10 <process_command(String)+0x2d8>
    6af6:	2500      	movs	r5, #0
    6af8:	3501      	adds	r5, #1
        next_pc = print_instruction(next_pc);
    6afa:	4620      	mov	r0, r4
    6afc:	f7ff ff52 	bl	69a4 <print_instruction(unsigned short)>
    6b00:	4604      	mov	r4, r0
    for (uint8_t i=0; i<count; i++) {
    6b02:	b2eb      	uxtb	r3, r5
    6b04:	429e      	cmp	r6, r3
    6b06:	d8f7      	bhi.n	6af8 <process_command(String)+0xc0>
    6b08:	e102      	b.n	6d10 <process_command(String)+0x2d8>
    switch (cmd_int) {
    6b0a:	f247 3273 	movw	r2, #29555	; 0x7373
    6b0e:	4293      	cmp	r3, r2
    6b10:	f000 81bc 	beq.w	6e8c <process_command(String)+0x454>
    6b14:	f240 80de 	bls.w	6cd4 <process_command(String)+0x29c>
    6b18:	f247 4274 	movw	r2, #29812	; 0x7474
    6b1c:	4293      	cmp	r3, r2
    6b1e:	f000 81a6 	beq.w	6e6e <process_command(String)+0x436>
    6b22:	f247 7272 	movw	r2, #30578	; 0x7772
    6b26:	4293      	cmp	r3, r2
    6b28:	f040 80c5 	bne.w	6cb6 <process_command(String)+0x27e>
    6b2c:	9808      	ldr	r0, [sp, #32]
    6b2e:	2800      	cmp	r0, #0
    6b30:	f000 8257 	beq.w	6fe2 <process_command(String)+0x5aa>
        //
        //      Write one or more bytes to <address>.
        //
        case CMD_WR:
            {
                word addr = strtoul(arg1.c_str(), 0, 16);
    6b34:	2210      	movs	r2, #16
    6b36:	2100      	movs	r1, #0
    6b38:	f004 ff64 	bl	ba04 <strtoul>
    6b3c:	4605      	mov	r5, r0
    6b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    6b40:	2800      	cmp	r0, #0
    6b42:	f000 8246 	beq.w	6fd2 <process_command(String)+0x59a>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6b46:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6b4a:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    6b4e:	2210      	movs	r2, #16
    6b50:	2100      	movs	r1, #0
    6b52:	f004 ff57 	bl	ba04 <strtoul>
    6b56:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84

                digitalWriteFast(PIN_SYNC, 0x1);  //Special for manual writes
                write_byte(addr, data);
    6b5a:	b2c1      	uxtb	r1, r0
    6b5c:	b2a8      	uxth	r0, r5
    6b5e:	f7fc f933 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
                digitalWriteFast(PIN_SYNC, 0x0);

                while (remainder.length()) {
    6b62:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6b64:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    6b68:	b1cb      	cbz	r3, 6b9e <process_command(String)+0x166>
    6b6a:	ac14      	add	r4, sp, #80	; 0x50
    6b6c:	4e6b      	ldr	r6, [pc, #428]	; (6d1c <process_command(String)+0x2e4>)
                    String d = parse_next_arg(remainder, remainder);
    6b6e:	466a      	mov	r2, sp
    6b70:	4669      	mov	r1, sp
    6b72:	4620      	mov	r0, r4
                    data = strtoul(d.c_str(), 0, 16);
                    write_byte(++addr, data);
    6b74:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    6b76:	f7ff fec9 	bl	690c <parse_next_arg(String&, String&)>
    6b7a:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    6b7c:	2210      	movs	r2, #16
    6b7e:	2100      	movs	r1, #0
    6b80:	2800      	cmp	r0, #0
    6b82:	bf08      	it	eq
    6b84:	4630      	moveq	r0, r6
    6b86:	f004 ff3d 	bl	ba04 <strtoul>
                    write_byte(++addr, data);
    6b8a:	b2c1      	uxtb	r1, r0
    6b8c:	b2a8      	uxth	r0, r5
    6b8e:	f7fc f91b 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
                }
    6b92:	4620      	mov	r0, r4
    6b94:	f002 f8b8 	bl	8d08 <String::~String()>
                while (remainder.length()) {
    6b98:	9b02      	ldr	r3, [sp, #8]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d1e7      	bne.n	6b6e <process_command(String)+0x136>
    6b9e:	2102      	movs	r1, #2
    6ba0:	485f      	ldr	r0, [pc, #380]	; (6d20 <process_command(String)+0x2e8>)
    6ba2:	f003 fd25 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6ba6:	485f      	ldr	r0, [pc, #380]	; (6d24 <process_command(String)+0x2ec>)
    6ba8:	f002 f858 	bl	8c5c <Print::println()>
                Serial.println("OK");
            }
            run_mode = WAITING;
    6bac:	4b5e      	ldr	r3, [pc, #376]	; (6d28 <process_command(String)+0x2f0>)
    6bae:	2400      	movs	r4, #0
    6bb0:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    6bb2:	a80c      	add	r0, sp, #48	; 0x30
    6bb4:	f002 f8a8 	bl	8d08 <String::~String()>
    6bb8:	a808      	add	r0, sp, #32
    6bba:	f002 f8a5 	bl	8d08 <String::~String()>
    6bbe:	a804      	add	r0, sp, #16
    6bc0:	f002 f8a2 	bl	8d08 <String::~String()>
    6bc4:	4668      	mov	r0, sp
    6bc6:	f002 f89f 	bl	8d08 <String::~String()>
    6bca:	4620      	mov	r0, r4
    6bcc:	b025      	add	sp, #148	; 0x94
    6bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    6bd2:	f246 726f 	movw	r2, #26479	; 0x676f
    6bd6:	4293      	cmp	r3, r2
    6bd8:	d111      	bne.n	6bfe <process_command(String)+0x1c6>
            run_mode = RUNNING;
    6bda:	4d53      	ldr	r5, [pc, #332]	; (6d28 <process_command(String)+0x2f0>)
    6bdc:	2402      	movs	r4, #2
            if (arg1.length()) {
    6bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    6be0:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    6be2:	2b00      	cmp	r3, #0
    6be4:	d0e5      	beq.n	6bb2 <process_command(String)+0x17a>
    6be6:	9808      	ldr	r0, [sp, #32]
    6be8:	2800      	cmp	r0, #0
    6bea:	f000 8217 	beq.w	701c <process_command(String)+0x5e4>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    6bee:	2210      	movs	r2, #16
    6bf0:	2100      	movs	r1, #0
    6bf2:	f004 ff07 	bl	ba04 <strtoul>
    6bf6:	4b4d      	ldr	r3, [pc, #308]	; (6d2c <process_command(String)+0x2f4>)
    return(run_mode);
    6bf8:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    6bfa:	8018      	strh	r0, [r3, #0]
    6bfc:	e7d9      	b.n	6bb2 <process_command(String)+0x17a>
    switch (cmd_int) {
    6bfe:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    6c02:	f040 8109 	bne.w	6e18 <process_command(String)+0x3e0>
            Serial.println(String("Available Commands:\n\r")+
    6c06:	494a      	ldr	r1, [pc, #296]	; (6d30 <process_command(String)+0x2f8>)
    6c08:	a810      	add	r0, sp, #64	; 0x40
    6c0a:	f002 f8b9 	bl	8d80 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    6c0e:	a910      	add	r1, sp, #64	; 0x40
    6c10:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6c12:	2400      	movs	r4, #0
    6c14:	f002 f844 	bl	8ca0 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    6c18:	4946      	ldr	r1, [pc, #280]	; (6d34 <process_command(String)+0x2fc>)
    6c1a:	a814      	add	r0, sp, #80	; 0x50
    6c1c:	f002 f97c 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    6c20:	4945      	ldr	r1, [pc, #276]	; (6d38 <process_command(String)+0x300>)
    6c22:	f002 f979 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    6c26:	4945      	ldr	r1, [pc, #276]	; (6d3c <process_command(String)+0x304>)
    6c28:	f002 f976 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    6c2c:	4944      	ldr	r1, [pc, #272]	; (6d40 <process_command(String)+0x308>)
    6c2e:	f002 f973 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    6c32:	4944      	ldr	r1, [pc, #272]	; (6d44 <process_command(String)+0x30c>)
    6c34:	f002 f970 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    6c38:	4943      	ldr	r1, [pc, #268]	; (6d48 <process_command(String)+0x310>)
    6c3a:	f002 f96d 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    6c3e:	4943      	ldr	r1, [pc, #268]	; (6d4c <process_command(String)+0x314>)
    6c40:	f002 f96a 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    6c44:	4942      	ldr	r1, [pc, #264]	; (6d50 <process_command(String)+0x318>)
    6c46:	f002 f967 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    6c4a:	4942      	ldr	r1, [pc, #264]	; (6d54 <process_command(String)+0x31c>)
    6c4c:	f002 f964 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    6c50:	4941      	ldr	r1, [pc, #260]	; (6d58 <process_command(String)+0x320>)
    6c52:	f002 f961 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    6c56:	4941      	ldr	r1, [pc, #260]	; (6d5c <process_command(String)+0x324>)
    6c58:	f002 f95e 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    6c5c:	4940      	ldr	r1, [pc, #256]	; (6d60 <process_command(String)+0x328>)
    6c5e:	f002 f95b 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    6c62:	4940      	ldr	r1, [pc, #256]	; (6d64 <process_command(String)+0x32c>)
    6c64:	f002 f958 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    6c68:	493f      	ldr	r1, [pc, #252]	; (6d68 <process_command(String)+0x330>)
    6c6a:	f002 f955 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    6c6e:	493f      	ldr	r1, [pc, #252]	; (6d6c <process_command(String)+0x334>)
    6c70:	f002 f952 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    6c74:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6c76:	482b      	ldr	r0, [pc, #172]	; (6d24 <process_command(String)+0x2ec>)
    6c78:	f001 ffca 	bl	8c10 <Print::print(String const&)>
    6c7c:	4829      	ldr	r0, [pc, #164]	; (6d24 <process_command(String)+0x2ec>)
    6c7e:	f001 ffed 	bl	8c5c <Print::println()>
class StringSumHelper : public String
    6c82:	a814      	add	r0, sp, #80	; 0x50
    6c84:	f002 f840 	bl	8d08 <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    6c88:	a810      	add	r0, sp, #64	; 0x40
    6c8a:	f002 f83d 	bl	8d08 <String::~String()>
            run_mode = WAITING;
    6c8e:	4b26      	ldr	r3, [pc, #152]	; (6d28 <process_command(String)+0x2f0>)
    6c90:	701c      	strb	r4, [r3, #0]
            break;
    6c92:	e78e      	b.n	6bb2 <process_command(String)+0x17a>
    switch (cmd_int) {
    6c94:	f246 226b 	movw	r2, #25195	; 0x626b
    6c98:	4293      	cmp	r3, r2
    6c9a:	f000 80ff 	beq.w	6e9c <process_command(String)+0x464>
    6c9e:	d935      	bls.n	6d0c <process_command(String)+0x2d4>
    6ca0:	f246 4272 	movw	r2, #25714	; 0x6472
    6ca4:	4293      	cmp	r3, r2
    6ca6:	f040 80b7 	bne.w	6e18 <process_command(String)+0x3e0>
            display_registers();
    6caa:	f7ff fd6f 	bl	678c <display_registers()>
            run_mode = WAITING;          
    6cae:	2400      	movs	r4, #0
    6cb0:	4b1d      	ldr	r3, [pc, #116]	; (6d28 <process_command(String)+0x2f0>)
    6cb2:	701c      	strb	r4, [r3, #0]
            break;
    6cb4:	e77d      	b.n	6bb2 <process_command(String)+0x17a>
    switch (cmd_int) {
    6cb6:	f247 4272 	movw	r2, #29810	; 0x7472
    6cba:	4293      	cmp	r3, r2
    6cbc:	f040 80ac 	bne.w	6e18 <process_command(String)+0x3e0>
			pc_trace = !pc_trace;
    6cc0:	4a2b      	ldr	r2, [pc, #172]	; (6d70 <process_command(String)+0x338>)
    6cc2:	7813      	ldrb	r3, [r2, #0]
    6cc4:	f083 0301 	eor.w	r3, r3, #1
    6cc8:	7013      	strb	r3, [r2, #0]
            if (pc_trace)
    6cca:	b30b      	cbz	r3, 6d10 <process_command(String)+0x2d8>
                pc_trace_index = 0;
    6ccc:	4b29      	ldr	r3, [pc, #164]	; (6d74 <process_command(String)+0x33c>)
    6cce:	2200      	movs	r2, #0
    6cd0:	601a      	str	r2, [r3, #0]
    6cd2:	e01d      	b.n	6d10 <process_command(String)+0x2d8>
    switch (cmd_int) {
    6cd4:	f247 2273 	movw	r2, #29299	; 0x7273
    6cd8:	4293      	cmp	r3, r2
    6cda:	f000 80db 	beq.w	6e94 <process_command(String)+0x45c>
    6cde:	f247 3272 	movw	r2, #29554	; 0x7372
    6ce2:	4293      	cmp	r3, r2
    6ce4:	d14a      	bne.n	6d7c <process_command(String)+0x344>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6ce6:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ce8:	2800      	cmp	r0, #0
    6cea:	f000 8178 	beq.w	6fde <process_command(String)+0x5a6>
                word value = strtoul(arg2.c_str(), 0, 16);
    6cee:	2100      	movs	r1, #0
    6cf0:	2210      	movs	r2, #16
    6cf2:	f004 fe87 	bl	ba04 <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6cf6:	4920      	ldr	r1, [pc, #128]	; (6d78 <process_command(String)+0x340>)
    6cf8:	4604      	mov	r4, r0
    6cfa:	a808      	add	r0, sp, #32
    6cfc:	f002 f91a 	bl	8f34 <String::equals(char const*) const>
                if (arg1=="pc") {
    6d00:	2800      	cmp	r0, #0
    6d02:	f000 815e 	beq.w	6fc2 <process_command(String)+0x58a>
                    register_pc = value & 0xFFFF;
    6d06:	4b09      	ldr	r3, [pc, #36]	; (6d2c <process_command(String)+0x2f4>)
    6d08:	801c      	strh	r4, [r3, #0]
    6d0a:	e7ce      	b.n	6caa <process_command(String)+0x272>
    switch (cmd_int) {
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d17f      	bne.n	6e10 <process_command(String)+0x3d8>
    return(run_mode);
    6d10:	4b05      	ldr	r3, [pc, #20]	; (6d28 <process_command(String)+0x2f0>)
    6d12:	781c      	ldrb	r4, [r3, #0]
    6d14:	e74d      	b.n	6bb2 <process_command(String)+0x17a>
    6d16:	bf00      	nop
    6d18:	200004f8 	.word	0x200004f8
    6d1c:	200012cc 	.word	0x200012cc
    6d20:	20000868 	.word	0x20000868
    6d24:	200043f8 	.word	0x200043f8
    6d28:	200188ac 	.word	0x200188ac
    6d2c:	2001888c 	.word	0x2001888c
    6d30:	2000045c 	.word	0x2000045c
    6d34:	20000474 	.word	0x20000474
    6d38:	200004b0 	.word	0x200004b0
    6d3c:	200004fc 	.word	0x200004fc
    6d40:	2000052c 	.word	0x2000052c
    6d44:	20000560 	.word	0x20000560
    6d48:	200005a4 	.word	0x200005a4
    6d4c:	200005dc 	.word	0x200005dc
    6d50:	20000620 	.word	0x20000620
    6d54:	20000670 	.word	0x20000670
    6d58:	200006ac 	.word	0x200006ac
    6d5c:	200006b0 	.word	0x200006b0
    6d60:	200006c8 	.word	0x200006c8
    6d64:	200006f4 	.word	0x200006f4
    6d68:	20000754 	.word	0x20000754
    6d6c:	200007b0 	.word	0x200007b0
    6d70:	200188a7 	.word	0x200188a7
    6d74:	20018818 	.word	0x20018818
    6d78:	2000081c 	.word	0x2000081c
    switch (cmd_int) {
    6d7c:	f247 2264 	movw	r2, #29284	; 0x7264
    6d80:	4293      	cmp	r3, r2
    6d82:	d149      	bne.n	6e18 <process_command(String)+0x3e0>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6d84:	9808      	ldr	r0, [sp, #32]
    6d86:	2800      	cmp	r0, #0
    6d88:	f000 8125 	beq.w	6fd6 <process_command(String)+0x59e>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d8c:	2210      	movs	r2, #16
    6d8e:	2100      	movs	r1, #0
    6d90:	f004 fe38 	bl	ba04 <strtoul>
                if (arg2.length()) {
    6d94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    6d96:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    6d98:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	f040 80e8 	bne.w	6f70 <process_command(String)+0x538>
                sprintf(s,"[%04X] = ", addr);
    6da0:	4602      	mov	r2, r0
    6da2:	49a9      	ldr	r1, [pc, #676]	; (7048 <process_command(String)+0x610>)
    6da4:	4620      	mov	r0, r4
                byte count = 1;
    6da6:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    6daa:	f004 ff8d 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6dae:	4620      	mov	r0, r4
    6db0:	f005 fbc6 	bl	c540 <strlen>
    6db4:	4601      	mov	r1, r0
    6db6:	4620      	mov	r0, r4
    6db8:	f003 fc1a 	bl	a5f0 <usb_serial_write>
                byte count = 1;
    6dbc:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    6dbe:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 70ac <process_command(String)+0x674>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6dc2:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    6dc6:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 70b0 <process_command(String)+0x678>
    6dca:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    6dcc:	b115      	cbz	r5, 6dd4 <process_command(String)+0x39c>
    6dce:	075b      	lsls	r3, r3, #29
    6dd0:	f000 810b 	beq.w	6fea <process_command(String)+0x5b2>
    6dd4:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    6dd8:	2100      	movs	r1, #0
    6dda:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    6ddc:	3501      	adds	r5, #1
    6dde:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    6de2:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    6de4:	f7fb fe34 	bl	2a50 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    6de8:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    6dea:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6dec:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    6df0:	4620      	mov	r0, r4
    6df2:	f004 ff69 	bl	bcc8 <sprintf>
    6df6:	4620      	mov	r0, r4
    6df8:	f005 fba2 	bl	c540 <strlen>
    6dfc:	4601      	mov	r1, r0
    6dfe:	4620      	mov	r0, r4
    6e00:	f003 fbf6 	bl	a5f0 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6e04:	b2eb      	uxtb	r3, r5
    6e06:	4599      	cmp	r9, r3
    6e08:	d8e0      	bhi.n	6dcc <process_command(String)+0x394>
    6e0a:	2100      	movs	r1, #0
    6e0c:	488f      	ldr	r0, [pc, #572]	; (704c <process_command(String)+0x614>)
    6e0e:	e6c8      	b.n	6ba2 <process_command(String)+0x16a>
    switch (cmd_int) {
    6e10:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    6e14:	f43f aef7 	beq.w	6c06 <process_command(String)+0x1ce>
	StringSumHelper(const char *p) : String(p) {}
    6e18:	498d      	ldr	r1, [pc, #564]	; (7050 <process_command(String)+0x618>)
    6e1a:	a814      	add	r0, sp, #80	; 0x50
    6e1c:	f001 ffb0 	bl	8d80 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e20:	4621      	mov	r1, r4
    6e22:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    6e24:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    6e26:	f002 f86f 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    6e2a:	498a      	ldr	r1, [pc, #552]	; (7054 <process_command(String)+0x61c>)
    6e2c:	f002 f874 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    6e30:	a904      	add	r1, sp, #16
    6e32:	f002 f869 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    6e36:	4988      	ldr	r1, [pc, #544]	; (7058 <process_command(String)+0x620>)
    6e38:	f002 f86e 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    6e3c:	a908      	add	r1, sp, #32
    6e3e:	f002 f863 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    6e42:	4985      	ldr	r1, [pc, #532]	; (7058 <process_command(String)+0x620>)
    6e44:	f002 f868 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    6e48:	a90c      	add	r1, sp, #48	; 0x30
    6e4a:	f002 f85d 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    6e4e:	4983      	ldr	r1, [pc, #524]	; (705c <process_command(String)+0x624>)
    6e50:	f002 f862 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    6e54:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6e56:	4882      	ldr	r0, [pc, #520]	; (7060 <process_command(String)+0x628>)
    6e58:	f001 feda 	bl	8c10 <Print::print(String const&)>
    6e5c:	4880      	ldr	r0, [pc, #512]	; (7060 <process_command(String)+0x628>)
    6e5e:	f001 fefd 	bl	8c5c <Print::println()>
class StringSumHelper : public String
    6e62:	a814      	add	r0, sp, #80	; 0x50
    6e64:	f001 ff50 	bl	8d08 <String::~String()>
            run_mode = WAITING;
    6e68:	4b7e      	ldr	r3, [pc, #504]	; (7064 <process_command(String)+0x62c>)
    6e6a:	701c      	strb	r4, [r3, #0]
            break;
    6e6c:	e6a1      	b.n	6bb2 <process_command(String)+0x17a>
    6e6e:	4d7d      	ldr	r5, [pc, #500]	; (7064 <process_command(String)+0x62c>)
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6e70:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    6e74:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    6e78:	f7fb fd9a 	bl	29b0 <sample_at_CLK_rising_edge()>
    6e7c:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    6e80:	f7fb fd96 	bl	29b0 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    6e84:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    return(run_mode);
    6e88:	782c      	ldrb	r4, [r5, #0]
}
    6e8a:	e692      	b.n	6bb2 <process_command(String)+0x17a>
            run_mode = SINGLE_STEP;
    6e8c:	4b75      	ldr	r3, [pc, #468]	; (7064 <process_command(String)+0x62c>)
    6e8e:	2401      	movs	r4, #1
    6e90:	701c      	strb	r4, [r3, #0]
            break;
    6e92:	e68e      	b.n	6bb2 <process_command(String)+0x17a>
            run_mode = RESETTING;
    6e94:	4d73      	ldr	r5, [pc, #460]	; (7064 <process_command(String)+0x62c>)
    6e96:	2303      	movs	r3, #3
    6e98:	702b      	strb	r3, [r5, #0]
    6e9a:	e7e9      	b.n	6e70 <process_command(String)+0x438>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6e9c:	9808      	ldr	r0, [sp, #32]
    6e9e:	2800      	cmp	r0, #0
    6ea0:	f000 80a1 	beq.w	6fe6 <process_command(String)+0x5ae>
                word addr = strtoul(arg1.c_str(), 0, 16);
    6ea4:	2210      	movs	r2, #16
    6ea6:	2100      	movs	r1, #0
    6ea8:	f004 fdac 	bl	ba04 <strtoul>
                breakpoint = addr;
    6eac:	4b6e      	ldr	r3, [pc, #440]	; (7068 <process_command(String)+0x630>)
    6eae:	6018      	str	r0, [r3, #0]
    6eb0:	e675      	b.n	6b9e <process_command(String)+0x166>
				if (run_fence) {
    6eb2:	4b6e      	ldr	r3, [pc, #440]	; (706c <process_command(String)+0x634>)
    6eb4:	781a      	ldrb	r2, [r3, #0]
    6eb6:	2a00      	cmp	r2, #0
    6eb8:	d151      	bne.n	6f5e <process_command(String)+0x526>
					run_fence = true;
    6eba:	2201      	movs	r2, #1
    6ebc:	9808      	ldr	r0, [sp, #32]
    6ebe:	701a      	strb	r2, [r3, #0]
    6ec0:	2800      	cmp	r0, #0
    6ec2:	f000 80a1 	beq.w	7008 <process_command(String)+0x5d0>
					run_fence_low  = strtoul(arg1.c_str(), 0, 16);
    6ec6:	4c6a      	ldr	r4, [pc, #424]	; (7070 <process_command(String)+0x638>)
    6ec8:	2210      	movs	r2, #16
    6eca:	2100      	movs	r1, #0
    6ecc:	f004 fd9a 	bl	ba04 <strtoul>
    6ed0:	8020      	strh	r0, [r4, #0]
    6ed2:	980c      	ldr	r0, [sp, #48]	; 0x30
    6ed4:	2800      	cmp	r0, #0
    6ed6:	f000 8095 	beq.w	7004 <process_command(String)+0x5cc>
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6eda:	2210      	movs	r2, #16
    6edc:	2100      	movs	r1, #0
    6ede:	f004 fd91 	bl	ba04 <strtoul>
    6ee2:	4b64      	ldr	r3, [pc, #400]	; (7074 <process_command(String)+0x63c>)
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6ee4:	8822      	ldrh	r2, [r4, #0]
					run_fence_high = strtoul(arg2.c_str(), 0, 16);
    6ee6:	8018      	strh	r0, [r3, #0]
					sprintf(buf, "Run fence enabled for range $%04X to $%04X", run_fence_low, run_fence_high);
    6ee8:	b283      	uxth	r3, r0
    6eea:	4963      	ldr	r1, [pc, #396]	; (7078 <process_command(String)+0x640>)
    6eec:	a814      	add	r0, sp, #80	; 0x50
    6eee:	f004 feeb 	bl	bcc8 <sprintf>
					Serial.println(buf);
    6ef2:	a914      	add	r1, sp, #80	; 0x50
    6ef4:	485a      	ldr	r0, [pc, #360]	; (7060 <process_command(String)+0x628>)
    6ef6:	f7f9 f8e9 	bl	cc <Print::println(char const*) [clone .isra.0]>
    return(run_mode);
    6efa:	4b5a      	ldr	r3, [pc, #360]	; (7064 <process_command(String)+0x62c>)
    6efc:	781c      	ldrb	r4, [r3, #0]
    6efe:	e658      	b.n	6bb2 <process_command(String)+0x17a>
            display_registers();
    6f00:	f7ff fc44 	bl	678c <display_registers()>
            run_mode = WAITING;
    6f04:	2400      	movs	r4, #0
            display_info();
    6f06:	f7ff fc9b 	bl	6840 <display_info()>
            run_mode = WAITING;
    6f0a:	4b56      	ldr	r3, [pc, #344]	; (7064 <process_command(String)+0x62c>)
    6f0c:	701c      	strb	r4, [r3, #0]
            break;
    6f0e:	e650      	b.n	6bb2 <process_command(String)+0x17a>
    6f10:	9808      	ldr	r0, [sp, #32]
    6f12:	2800      	cmp	r0, #0
    6f14:	d061      	beq.n	6fda <process_command(String)+0x5a2>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    6f16:	220a      	movs	r2, #10
    6f18:	2100      	movs	r1, #0
    6f1a:	f004 fd73 	bl	ba04 <strtoul>
    6f1e:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    6f20:	2803      	cmp	r0, #3
    6f22:	d83b      	bhi.n	6f9c <process_command(String)+0x564>
                    addr_mode = (ADDR_MODE)a_mode;
    6f24:	4b55      	ldr	r3, [pc, #340]	; (707c <process_command(String)+0x644>)
    6f26:	7018      	strb	r0, [r3, #0]
    6f28:	e640      	b.n	6bac <process_command(String)+0x174>
                        list_instructions(register_pc, 16);
    6f2a:	4b55      	ldr	r3, [pc, #340]	; (7080 <process_command(String)+0x648>)
    6f2c:	2410      	movs	r4, #16
    6f2e:	8818      	ldrh	r0, [r3, #0]
        next_pc = print_instruction(next_pc);
    6f30:	f7ff fd38 	bl	69a4 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f34:	1e63      	subs	r3, r4, #1
    6f36:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f3a:	d1f9      	bne.n	6f30 <process_command(String)+0x4f8>
    6f3c:	e6e8      	b.n	6d10 <process_command(String)+0x2d8>
    6f3e:	9808      	ldr	r0, [sp, #32]
    6f40:	2800      	cmp	r0, #0
    6f42:	d071      	beq.n	7028 <process_command(String)+0x5f0>
                        uint16_t start_address = strtol(arg1.c_str(), 0, 16);
    6f44:	2210      	movs	r2, #16
    6f46:	2100      	movs	r1, #0
    6f48:	f004 fcae 	bl	b8a8 <strtol>
    6f4c:	2410      	movs	r4, #16
    6f4e:	b280      	uxth	r0, r0
        next_pc = print_instruction(next_pc);
    6f50:	f7ff fd28 	bl	69a4 <print_instruction(unsigned short)>
    for (uint8_t i=0; i<count; i++) {
    6f54:	1e63      	subs	r3, r4, #1
    6f56:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    6f5a:	d1f9      	bne.n	6f50 <process_command(String)+0x518>
    6f5c:	e6d8      	b.n	6d10 <process_command(String)+0x2d8>
					run_fence = false;
    6f5e:	2200      	movs	r2, #0
					Serial.println("Run fence disabled");
    6f60:	4948      	ldr	r1, [pc, #288]	; (7084 <process_command(String)+0x64c>)
    6f62:	483f      	ldr	r0, [pc, #252]	; (7060 <process_command(String)+0x628>)
					run_fence = false;
    6f64:	701a      	strb	r2, [r3, #0]
					Serial.println("Run fence disabled");
    6f66:	f7f9 f8b1 	bl	cc <Print::println(char const*) [clone .isra.0]>
    return(run_mode);
    6f6a:	4b3e      	ldr	r3, [pc, #248]	; (7064 <process_command(String)+0x62c>)
    6f6c:	781c      	ldrb	r4, [r3, #0]
    6f6e:	e620      	b.n	6bb2 <process_command(String)+0x17a>
                    count = arg2.toInt() & 0xFF;
    6f70:	a80c      	add	r0, sp, #48	; 0x30
    6f72:	f002 f8e3 	bl	913c <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    6f76:	4934      	ldr	r1, [pc, #208]	; (7048 <process_command(String)+0x610>)
                    count = arg2.toInt() & 0xFF;
    6f78:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    6f7c:	4632      	mov	r2, r6
    6f7e:	4620      	mov	r0, r4
    6f80:	f004 fea2 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6f84:	4620      	mov	r0, r4
    6f86:	f005 fadb 	bl	c540 <strlen>
    6f8a:	4601      	mov	r1, r0
    6f8c:	4620      	mov	r0, r4
    6f8e:	f003 fb2f 	bl	a5f0 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    6f92:	f1b9 0f00 	cmp.w	r9, #0
    6f96:	f47f af11 	bne.w	6dbc <process_command(String)+0x384>
    6f9a:	e736      	b.n	6e0a <process_command(String)+0x3d2>
	StringSumHelper(const char *p) : String(p) {}
    6f9c:	493a      	ldr	r1, [pc, #232]	; (7088 <process_command(String)+0x650>)
    6f9e:	a814      	add	r0, sp, #80	; 0x50
    6fa0:	f001 feee 	bl	8d80 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    6fa4:	a908      	add	r1, sp, #32
    6fa6:	a814      	add	r0, sp, #80	; 0x50
    6fa8:	f001 ffae 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    6fac:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    6fae:	482c      	ldr	r0, [pc, #176]	; (7060 <process_command(String)+0x628>)
    6fb0:	f001 fe2e 	bl	8c10 <Print::print(String const&)>
    6fb4:	482a      	ldr	r0, [pc, #168]	; (7060 <process_command(String)+0x628>)
    6fb6:	f001 fe51 	bl	8c5c <Print::println()>
class StringSumHelper : public String
    6fba:	a814      	add	r0, sp, #80	; 0x50
    6fbc:	f001 fea4 	bl	8d08 <String::~String()>
            run_mode = WAITING;
    6fc0:	e5f4      	b.n	6bac <process_command(String)+0x174>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    6fc2:	4932      	ldr	r1, [pc, #200]	; (708c <process_command(String)+0x654>)
    6fc4:	a808      	add	r0, sp, #32
    6fc6:	f001 ffb5 	bl	8f34 <String::equals(char const*) const>
                else if (arg1=="a") {
    6fca:	b1f8      	cbz	r0, 700c <process_command(String)+0x5d4>
                    register_a = value & 0xFF;
    6fcc:	4b30      	ldr	r3, [pc, #192]	; (7090 <process_command(String)+0x658>)
    6fce:	701c      	strb	r4, [r3, #0]
    6fd0:	e66b      	b.n	6caa <process_command(String)+0x272>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    6fd2:	4830      	ldr	r0, [pc, #192]	; (7094 <process_command(String)+0x65c>)
    6fd4:	e5b7      	b.n	6b46 <process_command(String)+0x10e>
    6fd6:	482f      	ldr	r0, [pc, #188]	; (7094 <process_command(String)+0x65c>)
    6fd8:	e6d8      	b.n	6d8c <process_command(String)+0x354>
    6fda:	482e      	ldr	r0, [pc, #184]	; (7094 <process_command(String)+0x65c>)
    6fdc:	e79b      	b.n	6f16 <process_command(String)+0x4de>
    6fde:	482d      	ldr	r0, [pc, #180]	; (7094 <process_command(String)+0x65c>)
    6fe0:	e685      	b.n	6cee <process_command(String)+0x2b6>
    6fe2:	482c      	ldr	r0, [pc, #176]	; (7094 <process_command(String)+0x65c>)
    6fe4:	e5a6      	b.n	6b34 <process_command(String)+0xfc>
    6fe6:	482b      	ldr	r0, [pc, #172]	; (7094 <process_command(String)+0x65c>)
    6fe8:	e75c      	b.n	6ea4 <process_command(String)+0x46c>
                        sprintf(s,"\n\r[%04X] = ", addr);
    6fea:	4659      	mov	r1, fp
    6fec:	4632      	mov	r2, r6
    6fee:	4620      	mov	r0, r4
    6ff0:	f004 fe6a 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6ff4:	4620      	mov	r0, r4
    6ff6:	f005 faa3 	bl	c540 <strlen>
    6ffa:	4601      	mov	r1, r0
    6ffc:	4620      	mov	r0, r4
    6ffe:	f003 faf7 	bl	a5f0 <usb_serial_write>
    7002:	e6e7      	b.n	6dd4 <process_command(String)+0x39c>
    7004:	4823      	ldr	r0, [pc, #140]	; (7094 <process_command(String)+0x65c>)
    7006:	e768      	b.n	6eda <process_command(String)+0x4a2>
    7008:	4822      	ldr	r0, [pc, #136]	; (7094 <process_command(String)+0x65c>)
    700a:	e75c      	b.n	6ec6 <process_command(String)+0x48e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    700c:	4922      	ldr	r1, [pc, #136]	; (7098 <process_command(String)+0x660>)
    700e:	a808      	add	r0, sp, #32
    7010:	f001 ff90 	bl	8f34 <String::equals(char const*) const>
                else if (arg1=="x") {
    7014:	b150      	cbz	r0, 702c <process_command(String)+0x5f4>
                    register_x = value & 0xFF;
    7016:	4b21      	ldr	r3, [pc, #132]	; (709c <process_command(String)+0x664>)
    7018:	701c      	strb	r4, [r3, #0]
    701a:	e646      	b.n	6caa <process_command(String)+0x272>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    701c:	481d      	ldr	r0, [pc, #116]	; (7094 <process_command(String)+0x65c>)
    701e:	e5e6      	b.n	6bee <process_command(String)+0x1b6>
    7020:	481c      	ldr	r0, [pc, #112]	; (7094 <process_command(String)+0x65c>)
    7022:	e560      	b.n	6ae6 <process_command(String)+0xae>
    7024:	481b      	ldr	r0, [pc, #108]	; (7094 <process_command(String)+0x65c>)
    7026:	e555      	b.n	6ad4 <process_command(String)+0x9c>
    7028:	481a      	ldr	r0, [pc, #104]	; (7094 <process_command(String)+0x65c>)
    702a:	e78b      	b.n	6f44 <process_command(String)+0x50c>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    702c:	491c      	ldr	r1, [pc, #112]	; (70a0 <process_command(String)+0x668>)
    702e:	a808      	add	r0, sp, #32
    7030:	f001 ff80 	bl	8f34 <String::equals(char const*) const>
                else if (arg1=="y") {
    7034:	b110      	cbz	r0, 703c <process_command(String)+0x604>
                    register_y = value & 0xFF;
    7036:	4b1b      	ldr	r3, [pc, #108]	; (70a4 <process_command(String)+0x66c>)
    7038:	701c      	strb	r4, [r3, #0]
    703a:	e636      	b.n	6caa <process_command(String)+0x272>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    703c:	491a      	ldr	r1, [pc, #104]	; (70a8 <process_command(String)+0x670>)
    703e:	4808      	ldr	r0, [pc, #32]	; (7060 <process_command(String)+0x628>)
    7040:	f7f9 f844 	bl	cc <Print::println(char const*) [clone .isra.0]>
    7044:	e631      	b.n	6caa <process_command(String)+0x272>
    7046:	bf00      	nop
    7048:	2000086c 	.word	0x2000086c
    704c:	200004f8 	.word	0x200004f8
    7050:	200008cc 	.word	0x200008cc
    7054:	200008ec 	.word	0x200008ec
    7058:	200008f0 	.word	0x200008f0
    705c:	20000444 	.word	0x20000444
    7060:	200043f8 	.word	0x200043f8
    7064:	200188ac 	.word	0x200188ac
    7068:	200053c8 	.word	0x200053c8
    706c:	200188ab 	.word	0x200188ab
    7070:	20018890 	.word	0x20018890
    7074:	2001888e 	.word	0x2001888e
    7078:	200008a0 	.word	0x200008a0
    707c:	2001889c 	.word	0x2001889c
    7080:	2001888c 	.word	0x2001888c
    7084:	2000088c 	.word	0x2000088c
    7088:	200007fc 	.word	0x200007fc
    708c:	20000820 	.word	0x20000820
    7090:	200188a8 	.word	0x200188a8
    7094:	200012cc 	.word	0x200012cc
    7098:	20000824 	.word	0x20000824
    709c:	200188a9 	.word	0x200188a9
    70a0:	20000828 	.word	0x20000828
    70a4:	200188aa 	.word	0x200188aa
    70a8:	2000082c 	.word	0x2000082c
    70ac:	20000878 	.word	0x20000878
    70b0:	20000884 	.word	0x20000884

000070b4 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    70b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70b8:	4f48      	ldr	r7, [pc, #288]	; (71dc <loop+0x128>)
    70ba:	b095      	sub	sp, #84	; 0x54
    70bc:	f8df a13c 	ldr.w	sl, [pc, #316]	; 71fc <loop+0x148>

    // Give Teensy 4.1 a moment
    delay(50);
    70c0:	2032      	movs	r0, #50	; 0x32
    70c2:	4e47      	ldr	r6, [pc, #284]	; (71e0 <loop+0x12c>)
    70c4:	f002 f840 	bl	9148 <delay>
    sample_at_CLK_rising_edge();
    70c8:	f7fb fc72 	bl	29b0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70cc:	f7fb fc70 	bl	29b0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    70d0:	f7fb fc6e 	bl	29b0 <sample_at_CLK_rising_edge()>

    reset_sequence();
    70d4:	f7fc f9da 	bl	348c <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    70d8:	4b42      	ldr	r3, [pc, #264]	; (71e4 <loop+0x130>)
    70da:	781b      	ldrb	r3, [r3, #0]
    70dc:	2b01      	cmp	r3, #1
    70de:	f000 81f2 	beq.w	74c6 <loop+0x412>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    70e2:	4b41      	ldr	r3, [pc, #260]	; (71e8 <loop+0x134>)
    70e4:	781b      	ldrb	r3, [r3, #0]
    70e6:	2b00      	cmp	r3, #0
    70e8:	f040 81f4 	bne.w	74d4 <loop+0x420>
    70ec:	4b3f      	ldr	r3, [pc, #252]	; (71ec <loop+0x138>)
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	2b01      	cmp	r3, #1
    70f2:	f000 826b 	beq.w	75cc <loop+0x518>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    70f6:	4a3e      	ldr	r2, [pc, #248]	; (71f0 <loop+0x13c>)
        nmi_n_old = direct_nmi;
    70f8:	493b      	ldr	r1, [pc, #236]	; (71e8 <loop+0x134>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    70fa:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    70fc:	700b      	strb	r3, [r1, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    70fe:	2a01      	cmp	r2, #1
    7100:	f000 81f2 	beq.w	74e8 <loop+0x434>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    7104:	2100      	movs	r1, #0
    7106:	8838      	ldrh	r0, [r7, #0]
    7108:	f7fb fca2 	bl	2a50 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    710c:	4b39      	ldr	r3, [pc, #228]	; (71f4 <loop+0x140>)
        next_instruction = read_byte(register_pc, false);
    710e:	4601      	mov	r1, r0
    7110:	f88a 0000 	strb.w	r0, [sl]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7114:	681b      	ldr	r3, [r3, #0]
    7116:	2b00      	cmp	r3, #0
    7118:	f000 81df 	beq.w	74da <loop+0x426>
    711c:	7832      	ldrb	r2, [r6, #0]
    711e:	f8b7 b000 	ldrh.w	fp, [r7]
    7122:	2a02      	cmp	r2, #2
    7124:	f000 81ed 	beq.w	7502 <loop+0x44e>
void loop() {
    7128:	4658      	mov	r0, fp
    712a:	ac08      	add	r4, sp, #32
    712c:	ad0c      	add	r5, sp, #48	; 0x30
    712e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 7200 <loop+0x14c>
	size_t println(const char s[])			{ return print(s) + println(); }
    7132:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 7204 <loop+0x150>
    7136:	e032      	b.n	719e <loop+0xea>
    7138:	2101      	movs	r1, #1
    713a:	4648      	mov	r0, r9
    713c:	f003 fa58 	bl	a5f0 <usb_serial_write>
    7140:	4640      	mov	r0, r8
    7142:	f001 fd8b 	bl	8c5c <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    7146:	4621      	mov	r1, r4
    7148:	4628      	mov	r0, r5
    714a:	f001 fda9 	bl	8ca0 <String::String(String const&)>
    714e:	4628      	mov	r0, r5
    7150:	f7ff fc72 	bl	6a38 <process_command(String)>
    7154:	7030      	strb	r0, [r6, #0]
    7156:	4628      	mov	r0, r5
    7158:	f001 fdd6 	bl	8d08 <String::~String()>
                    last_command = c;
    715c:	4621      	mov	r1, r4
    715e:	4826      	ldr	r0, [pc, #152]	; (71f8 <loop+0x144>)
    7160:	f001 fe52 	bl	8e08 <String::operator=(String const&)>
    7164:	2101      	movs	r1, #1
    7166:	4648      	mov	r0, r9
    7168:	f003 fa42 	bl	a5f0 <usb_serial_write>
    716c:	4640      	mov	r0, r8
    716e:	f001 fd75 	bl	8c5c <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    7172:	7833      	ldrb	r3, [r6, #0]
    7174:	2b02      	cmp	r3, #2
    7176:	d009      	beq.n	718c <loop+0xd8>
    7178:	8838      	ldrh	r0, [r7, #0]
    717a:	4558      	cmp	r0, fp
    717c:	d006      	beq.n	718c <loop+0xd8>
                    next_instruction = read_byte(register_pc, false);
    717e:	2100      	movs	r1, #0
    7180:	f7fb fc66 	bl	2a50 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    7184:	f8b7 b000 	ldrh.w	fp, [r7]
                    next_instruction = read_byte(register_pc, false);
    7188:	f88a 0000 	strb.w	r0, [sl]
                }
            } while (run_mode == WAITING);
    718c:	4620      	mov	r0, r4
    718e:	f001 fdbb 	bl	8d08 <String::~String()>
    7192:	7833      	ldrb	r3, [r6, #0]
    7194:	2b00      	cmp	r3, #0
    7196:	d145      	bne.n	7224 <loop+0x170>
                display_next_instruction(register_pc, next_instruction);
    7198:	8838      	ldrh	r0, [r7, #0]
    719a:	f89a 1000 	ldrb.w	r1, [sl]
    719e:	f7ff fac9 	bl	6734 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    71a2:	4620      	mov	r0, r4
    71a4:	f7ff fb70 	bl	6888 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    71a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71aa:	2b00      	cmp	r3, #0
    71ac:	d1c4      	bne.n	7138 <loop+0x84>
	inline unsigned int length(void) const {return len;}
    71ae:	4912      	ldr	r1, [pc, #72]	; (71f8 <loop+0x144>)
    71b0:	688b      	ldr	r3, [r1, #8]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d0c0      	beq.n	7138 <loop+0x84>
	size_t println(const String &s)			{ return print(s) + println(); }
    71b6:	4640      	mov	r0, r8
    71b8:	f001 fd2a 	bl	8c10 <Print::print(String const&)>
    71bc:	4640      	mov	r0, r8
    71be:	f001 fd4d 	bl	8c5c <Print::println()>
                    run_mode = process_command(last_command);
    71c2:	490d      	ldr	r1, [pc, #52]	; (71f8 <loop+0x144>)
    71c4:	4628      	mov	r0, r5
    71c6:	f001 fd6b 	bl	8ca0 <String::String(String const&)>
    71ca:	4628      	mov	r0, r5
    71cc:	f7ff fc34 	bl	6a38 <process_command(String)>
    71d0:	7030      	strb	r0, [r6, #0]
    71d2:	4628      	mov	r0, r5
    71d4:	f001 fd98 	bl	8d08 <String::~String()>
    71d8:	e7c4      	b.n	7164 <loop+0xb0>
    71da:	bf00      	nop
    71dc:	2001888c 	.word	0x2001888c
    71e0:	200188ac 	.word	0x200188ac
    71e4:	200188a2 	.word	0x200188a2
    71e8:	20004a07 	.word	0x20004a07
    71ec:	200188a0 	.word	0x200188a0
    71f0:	2001889f 	.word	0x2001889f
    71f4:	200053c8 	.word	0x200053c8
    71f8:	200153f0 	.word	0x200153f0
    71fc:	200188a6 	.word	0x200188a6
    7200:	20000420 	.word	0x20000420
    7204:	200043f8 	.word	0x200043f8
        virtual int read() { return usb_serial_getchar(); }
    7208:	f003 f9cc 	bl	a5a4 <usb_serial_getchar>
        else {
            while (Serial.available() > 0) {
                // read the incoming byte:
                char b = Serial.read();

                switch(b) {
    720c:	b2c0      	uxtb	r0, r0
    720e:	281b      	cmp	r0, #27
    7210:	f000 8173 	beq.w	74fa <loop+0x446>
        virtual int available() { return usb_serial_available(); }
    7214:	f003 f982 	bl	a51c <usb_serial_available>
            while (Serial.available() > 0) {
    7218:	2800      	cmp	r0, #0
    721a:	dcf5      	bgt.n	7208 <loop+0x154>
                        run_mode = WAITING;
                }
            }
        }

        if (run_mode == WAITING) {
    721c:	7833      	ldrb	r3, [r6, #0]
    721e:	2b00      	cmp	r3, #0
    7220:	f43f af5a 	beq.w	70d8 <loop+0x24>
            // just transitioned to WAITING while running...
            // skip the rest of this loop
            continue;
        }

        if (run_mode == RESETTING) {
    7224:	2b03      	cmp	r3, #3
    7226:	f000 81d6 	beq.w	75d6 <loop+0x522>
            // Break out of the internal while loop, causing the main loop() 
            // to be called again, which executes the reset sequence
            break;
        }

		if (run_fence) {
    722a:	4a0e      	ldr	r2, [pc, #56]	; (7264 <loop+0x1b0>)
    722c:	7812      	ldrb	r2, [r2, #0]
    722e:	b152      	cbz	r2, 7246 <loop+0x192>
			if (register_pc < run_fence_low || register_pc > run_fence_high) {
    7230:	490d      	ldr	r1, [pc, #52]	; (7268 <loop+0x1b4>)
    7232:	883a      	ldrh	r2, [r7, #0]
    7234:	8809      	ldrh	r1, [r1, #0]
    7236:	4291      	cmp	r1, r2
    7238:	f200 819e 	bhi.w	7578 <loop+0x4c4>
    723c:	490b      	ldr	r1, [pc, #44]	; (726c <loop+0x1b8>)
    723e:	8809      	ldrh	r1, [r1, #0]
    7240:	4291      	cmp	r1, r2
    7242:	f0c0 8199 	bcc.w	7578 <loop+0x4c4>
				continue;
			}
		}

        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    7246:	2b01      	cmp	r3, #1
    7248:	d105      	bne.n	7256 <loop+0x1a2>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    724a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    724e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    7252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            digitalWriteFast(PIN_SYNC, 0x1);

        if (pc_trace) {
    7256:	4b06      	ldr	r3, [pc, #24]	; (7270 <loop+0x1bc>)
    7258:	781b      	ldrb	r3, [r3, #0]
    725a:	2b00      	cmp	r3, #0
    725c:	f040 8158 	bne.w	7510 <loop+0x45c>
    7260:	e008      	b.n	7274 <loop+0x1c0>
    7262:	bf00      	nop
    7264:	200188ab 	.word	0x200188ab
    7268:	20018890 	.word	0x20018890
    726c:	2001888e 	.word	0x2001888e
    7270:	200188a7 	.word	0x200188a7

            pc_trace_index++;
        }

		uint16_t next_pc = 0;
        switch (next_instruction) {
    7274:	f89a 3000 	ldrb.w	r3, [sl]
    7278:	2bff      	cmp	r3, #255	; 0xff
    727a:	f201 844f 	bhi.w	8b1c <loop+0x1a68>
    727e:	e8df f013 	tbh	[pc, r3, lsl #1]
    7282:	0baa      	.short	0x0baa
    7284:	01b20bb1 	.word	0x01b20bb1
    7288:	01b901b4 	.word	0x01b901b4
    728c:	01d401c3 	.word	0x01d401c3
    7290:	01de01d9 	.word	0x01de01d9
    7294:	01e801e3 	.word	0x01e801e3
    7298:	01f201ed 	.word	0x01f201ed
    729c:	020d01fc 	.word	0x020d01fc
    72a0:	02170212 	.word	0x02170212
    72a4:	01b20222 	.word	0x01b20222
    72a8:	0234024f 	.word	0x0234024f
    72ac:	0254023e 	.word	0x0254023e
    72b0:	025e0259 	.word	0x025e0259
    72b4:	01000271 	.word	0x01000271
    72b8:	02a10283 	.word	0x02a10283
    72bc:	02be02ac 	.word	0x02be02ac
    72c0:	02c802c3 	.word	0x02c802c3
    72c4:	01b202cd 	.word	0x01b202cd
    72c8:	02e202dd 	.word	0x02e202dd
    72cc:	02f702e7 	.word	0x02f702e7
    72d0:	030102fc 	.word	0x030102fc
    72d4:	030b0306 	.word	0x030b0306
    72d8:	03150310 	.word	0x03150310
    72dc:	032a031a 	.word	0x032a031a
    72e0:	0334032f 	.word	0x0334032f
    72e4:	01b20348 	.word	0x01b20348
    72e8:	035e0359 	.word	0x035e0359
    72ec:	03780368 	.word	0x03780368
    72f0:	0382037d 	.word	0x0382037d
    72f4:	01000395 	.word	0x01000395
    72f8:	03ab03a6 	.word	0x03ab03a6
    72fc:	03c703b6 	.word	0x03c703b6
    7300:	03d103cc 	.word	0x03d103cc
    7304:	01b203d6 	.word	0x01b203d6
    7308:	03ec03e7 	.word	0x03ec03e7
    730c:	040703f6 	.word	0x040703f6
    7310:	0411040c 	.word	0x0411040c
    7314:	041b0416 	.word	0x041b0416
    7318:	042c0427 	.word	0x042c0427
    731c:	04420431 	.word	0x04420431
    7320:	044c0447 	.word	0x044c0447
    7324:	01b20451 	.word	0x01b20451
    7328:	04680463 	.word	0x04680463
    732c:	04830472 	.word	0x04830472
    7330:	048d0488 	.word	0x048d0488
    7334:	010004a0 	.word	0x010004a0
    7338:	04b704b2 	.word	0x04b704b2
    733c:	04d404c2 	.word	0x04d404c2
    7340:	04de04d9 	.word	0x04de04d9
    7344:	01b204e3 	.word	0x01b204e3
    7348:	04f504f0 	.word	0x04f504f0
    734c:	050d04ff 	.word	0x050d04ff
    7350:	05190513 	.word	0x05190513
    7354:	0531051f 	.word	0x0531051f
    7358:	053d0537 	.word	0x053d0537
    735c:	05510543 	.word	0x05510543
    7360:	055d0557 	.word	0x055d0557
    7364:	01b20563 	.word	0x01b20563
    7368:	05780572 	.word	0x05780572
    736c:	05910583 	.word	0x05910583
    7370:	059d0597 	.word	0x059d0597
    7374:	010005b1 	.word	0x010005b1
    7378:	05cf05c9 	.word	0x05cf05c9
    737c:	05ea05db 	.word	0x05ea05db
    7380:	05f605f0 	.word	0x05f605f0
    7384:	060f0602 	.word	0x060f0602
    7388:	062b061b 	.word	0x062b061b
    738c:	06590642 	.word	0x06590642
    7390:	068a0670 	.word	0x068a0670
    7394:	06ac06a0 	.word	0x06ac06a0
    7398:	06cd06c1 	.word	0x06cd06c1
    739c:	06e706da 	.word	0x06e706da
    73a0:	070406f4 	.word	0x070406f4
    73a4:	01b2070f 	.word	0x01b2070f
    73a8:	0727071c 	.word	0x0727071c
    73ac:	074d0734 	.word	0x074d0734
    73b0:	076a075a 	.word	0x076a075a
    73b4:	078c077f 	.word	0x078c077f
    73b8:	07ab079f 	.word	0x07ab079f
    73bc:	07c307b7 	.word	0x07c307b7
    73c0:	07db07cf 	.word	0x07db07cf
    73c4:	07fd07ee 	.word	0x07fd07ee
    73c8:	08210810 	.word	0x08210810
    73cc:	083f0830 	.word	0x083f0830
    73d0:	085f084e 	.word	0x085f084e
    73d4:	08870874 	.word	0x08870874
    73d8:	08a8089c 	.word	0x08a8089c
    73dc:	08d308b7 	.word	0x08d308b7
    73e0:	08f308e2 	.word	0x08f308e2
    73e4:	01b208ff 	.word	0x01b208ff
    73e8:	09530971 	.word	0x09530971
    73ec:	090f0962 	.word	0x090f0962
    73f0:	092f091e 	.word	0x092f091e
    73f4:	09830943 	.word	0x09830943
    73f8:	09ae0998 	.word	0x09ae0998
    73fc:	09ce09be 	.word	0x09ce09be
    7400:	09f009de 	.word	0x09f009de
    7404:	0a0309f6 	.word	0x0a0309f6
    7408:	0a150a0f 	.word	0x0a150a0f
    740c:	0a280a1b 	.word	0x0a280a1b
    7410:	0a340a2e 	.word	0x0a340a2e
    7414:	0a500a4a 	.word	0x0a500a4a
    7418:	0a790a73 	.word	0x0a790a73
    741c:	0a8c0a7f 	.word	0x0a8c0a7f
    7420:	0a980a92 	.word	0x0a980a92
    7424:	01b20a9e 	.word	0x01b20a9e
    7428:	0ab20aac 	.word	0x0ab20aac
    742c:	0aca0abd 	.word	0x0aca0abd
    7430:	0ad60ad0 	.word	0x0ad60ad0
    7434:	01000aea 	.word	0x01000aea
    7438:	0afe0af8 	.word	0x0afe0af8
    743c:	0b180b0a 	.word	0x0b180b0a
    7440:	0b240b1e 	.word	0x0b240b1e
    7444:	0b7e0b2a 	.word	0x0b7e0b2a
    7448:	0b900b8a 	.word	0x0b900b8a
    744c:	0c210b96 	.word	0x0c210b96
    7450:	0c370c27 	.word	0x0c370c27
    7454:	010001ad 	.word	0x010001ad
    7458:	0b3801ad 	.word	0x0b3801ad
    745c:	0b4c0b3e 	.word	0x0b4c0b3e
    7460:	0b580b52 	.word	0x0b580b52
    7464:	01b20b5e 	.word	0x01b20b5e
    7468:	0b730b6d 	.word	0x0b730b6d
    746c:	0bd10bc3 	.word	0x0bd10bc3
    7470:	0bdd0bd7 	.word	0x0bdd0bd7
    7474:	01000bf1 	.word	0x01000bf1
    7478:	0c060c00 	.word	0x0c060c00
    747c:	0c4d0c12 	.word	0x0c4d0c12
    7480:	0ba4      	.short	0x0ba4
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    7482:	f7fc fc5d 	bl	3d40 <opcode_0xEA()>
    7486:	4604      	mov	r4, r0
        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0);

        char buf[32];
        sprintf(buf, "%04X", next_pc);
    7488:	4602      	mov	r2, r0
        if (run_mode == SINGLE_STEP)
    748a:	7833      	ldrb	r3, [r6, #0]
    748c:	2b01      	cmp	r3, #1
    748e:	d105      	bne.n	749c <loop+0x3e8>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    7490:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    7494:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    7498:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
        sprintf(buf, "%04X", next_pc);
    749c:	ad0c      	add	r5, sp, #48	; 0x30
    749e:	49bd      	ldr	r1, [pc, #756]	; (7794 <loop+0x6e0>)
    74a0:	4628      	mov	r0, r5
    74a2:	f004 fc11 	bl	bcc8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    74a6:	4628      	mov	r0, r5
    74a8:	f005 f84a 	bl	c540 <strlen>
    74ac:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    74ae:	4628      	mov	r0, r5
    74b0:	f003 f89e 	bl	a5f0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    74b4:	48b8      	ldr	r0, [pc, #736]	; (7798 <loop+0x6e4>)
    74b6:	f001 fbd1 	bl	8c5c <Print::println()>
        if (direct_reset == 1) reset_sequence();
    74ba:	4bb8      	ldr	r3, [pc, #736]	; (779c <loop+0x6e8>)
        Serial.println(buf);
        register_pc = next_pc;
    74bc:	803c      	strh	r4, [r7, #0]
        if (direct_reset == 1) reset_sequence();
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	2b01      	cmp	r3, #1
    74c2:	f47f ae0e 	bne.w	70e2 <loop+0x2e>
    74c6:	f7fb ffe1 	bl	348c <reset_sequence()>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    74ca:	4bb5      	ldr	r3, [pc, #724]	; (77a0 <loop+0x6ec>)
    74cc:	781b      	ldrb	r3, [r3, #0]
    74ce:	2b00      	cmp	r3, #0
    74d0:	f43f ae0c 	beq.w	70ec <loop+0x38>
        nmi_n_old = direct_nmi;
    74d4:	4bb3      	ldr	r3, [pc, #716]	; (77a4 <loop+0x6f0>)
    74d6:	781b      	ldrb	r3, [r3, #0]
    74d8:	e60d      	b.n	70f6 <loop+0x42>
        if (run_mode != RUNNING) {
    74da:	7833      	ldrb	r3, [r6, #0]
    74dc:	2b02      	cmp	r3, #2
    74de:	f43f ae99 	beq.w	7214 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    74e2:	f8b7 b000 	ldrh.w	fp, [r7]
    74e6:	e61f      	b.n	7128 <loop+0x74>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    74e8:	4baf      	ldr	r3, [pc, #700]	; (77a8 <loop+0x6f4>)
    74ea:	7818      	ldrb	r0, [r3, #0]
    74ec:	f010 0004 	ands.w	r0, r0, #4
    74f0:	f47f ae08 	bne.w	7104 <loop+0x50>
    74f4:	f7fc f9a6 	bl	3844 <irq_handler(unsigned char)>
    74f8:	e604      	b.n	7104 <loop+0x50>
                        run_mode = WAITING;
    74fa:	f04f 0300 	mov.w	r3, #0
    74fe:	7033      	strb	r3, [r6, #0]
    7500:	e688      	b.n	7214 <loop+0x160>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    7502:	455b      	cmp	r3, fp
    7504:	f47f ae86 	bne.w	7214 <loop+0x160>
            run_mode = WAITING;
    7508:	f04f 0300 	mov.w	r3, #0
    750c:	7033      	strb	r3, [r6, #0]
    750e:	e60b      	b.n	7128 <loop+0x74>
            String s = String(pc_trace_index) + ": " + String(register_pc, HEX);
    7510:	4da6      	ldr	r5, [pc, #664]	; (77ac <loop+0x6f8>)
	StringSumHelper(const String &s) : String(s) {}
    7512:	ac08      	add	r4, sp, #32
    7514:	220a      	movs	r2, #10
    7516:	a804      	add	r0, sp, #16
    7518:	6829      	ldr	r1, [r5, #0]
    751a:	f001 fc5d 	bl	8dd8 <String::String(unsigned int, unsigned char)>
    751e:	a904      	add	r1, sp, #16
    7520:	4620      	mov	r0, r4
    7522:	f001 fbbd 	bl	8ca0 <String::String(String const&)>
    7526:	49a2      	ldr	r1, [pc, #648]	; (77b0 <loop+0x6fc>)
    7528:	4620      	mov	r0, r4
    752a:	f001 fcf5 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    752e:	4680      	mov	r8, r0
    7530:	2210      	movs	r2, #16
    7532:	8839      	ldrh	r1, [r7, #0]
    7534:	a80c      	add	r0, sp, #48	; 0x30
    7536:	f001 fc37 	bl	8da8 <String::String(int, unsigned char)>
    753a:	a90c      	add	r1, sp, #48	; 0x30
    753c:	4640      	mov	r0, r8
    753e:	f001 fce3 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    7542:	4601      	mov	r1, r0
    7544:	4668      	mov	r0, sp
    7546:	f001 fbab 	bl	8ca0 <String::String(String const&)>
    754a:	a80c      	add	r0, sp, #48	; 0x30
    754c:	f001 fbdc 	bl	8d08 <String::~String()>
class StringSumHelper : public String
    7550:	4620      	mov	r0, r4
    7552:	f001 fbd9 	bl	8d08 <String::~String()>
    7556:	a804      	add	r0, sp, #16
    7558:	f001 fbd6 	bl	8d08 <String::~String()>
	size_t println(const String &s)			{ return print(s) + println(); }
    755c:	4669      	mov	r1, sp
    755e:	488e      	ldr	r0, [pc, #568]	; (7798 <loop+0x6e4>)
    7560:	f001 fb56 	bl	8c10 <Print::print(String const&)>
    7564:	488c      	ldr	r0, [pc, #560]	; (7798 <loop+0x6e4>)
    7566:	f001 fb79 	bl	8c5c <Print::println()>
            pc_trace_index++;
    756a:	682b      	ldr	r3, [r5, #0]
        }
    756c:	4668      	mov	r0, sp
            pc_trace_index++;
    756e:	3301      	adds	r3, #1
    7570:	602b      	str	r3, [r5, #0]
        }
    7572:	f001 fbc9 	bl	8d08 <String::~String()>
    7576:	e67d      	b.n	7274 <loop+0x1c0>
	StringSumHelper(const char *p) : String(p) {}
    7578:	ad0c      	add	r5, sp, #48	; 0x30
				String s = "EXECPTION: Attempt to execute outside of the run-fence (PC=" + String(register_pc, HEX) + ")";
    757a:	ac08      	add	r4, sp, #32
    757c:	498d      	ldr	r1, [pc, #564]	; (77b4 <loop+0x700>)
    757e:	4628      	mov	r0, r5
    7580:	f001 fbfe 	bl	8d80 <String::String(char const*)>
    7584:	2210      	movs	r2, #16
    7586:	8839      	ldrh	r1, [r7, #0]
    7588:	4620      	mov	r0, r4
    758a:	f001 fc0d 	bl	8da8 <String::String(int, unsigned char)>
    758e:	4621      	mov	r1, r4
    7590:	4628      	mov	r0, r5
    7592:	f001 fcb9 	bl	8f08 <operator+(StringSumHelper const&, String const&)>
    7596:	4988      	ldr	r1, [pc, #544]	; (77b8 <loop+0x704>)
    7598:	f001 fcbe 	bl	8f18 <operator+(StringSumHelper const&, char const*)>
    759c:	4601      	mov	r1, r0
    759e:	a804      	add	r0, sp, #16
    75a0:	f001 fb7e 	bl	8ca0 <String::String(String const&)>
    75a4:	4620      	mov	r0, r4
    75a6:	f001 fbaf 	bl	8d08 <String::~String()>
class StringSumHelper : public String
    75aa:	4628      	mov	r0, r5
    75ac:	f001 fbac 	bl	8d08 <String::~String()>
    75b0:	a904      	add	r1, sp, #16
    75b2:	4879      	ldr	r0, [pc, #484]	; (7798 <loop+0x6e4>)
    75b4:	f001 fb2c 	bl	8c10 <Print::print(String const&)>
    75b8:	4877      	ldr	r0, [pc, #476]	; (7798 <loop+0x6e4>)
    75ba:	f001 fb4f 	bl	8c5c <Print::println()>
				run_mode = WAITING;
    75be:	f04f 0300 	mov.w	r3, #0
			}
    75c2:	a804      	add	r0, sp, #16
				run_mode = WAITING;
    75c4:	7033      	strb	r3, [r6, #0]
			}
    75c6:	f001 fb9f 	bl	8d08 <String::~String()>
    75ca:	e585      	b.n	70d8 <loop+0x24>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    75cc:	f7fc f84a 	bl	3664 <nmi_handler()>
        nmi_n_old = direct_nmi;
    75d0:	4b74      	ldr	r3, [pc, #464]	; (77a4 <loop+0x6f0>)
    75d2:	781b      	ldrb	r3, [r3, #0]
    75d4:	e58f      	b.n	70f6 <loop+0x42>
    }
}
    75d6:	b015      	add	sp, #84	; 0x54
    75d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				next_pc = opcode_0xE9();
    75dc:	f7fc fb9a 	bl	3d14 <opcode_0xE9()>
    75e0:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    75e2:	4602      	mov	r2, r0
				break; // SBC - Immediate
    75e4:	e751      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x02();
    75e6:	f7ff f89f 	bl	6728 <opcode_0x02()>
				next_pc = opcode_0x03();
    75ea:	f7fd ffd7 	bl	559c <opcode_0x03()>
    75ee:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    75f0:	4602      	mov	r2, r0
				break; // SLO - Indexed Indirect X
    75f2:	e74a      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage();
    75f4:	f7fb fd10 	bl	3018 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    75f8:	4b70      	ldr	r3, [pc, #448]	; (77bc <loop+0x708>)
    75fa:	f893 4101 	ldrb.w	r4, [r3, #257]	; 0x101
    75fe:	883b      	ldrh	r3, [r7, #0]
    7600:	441c      	add	r4, r3
    7602:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7604:	4622      	mov	r2, r4
				break; // NOP - ZeroPage
    7606:	e740      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_ZeroPage());
    7608:	f7fb fd06 	bl	3018 <Fetch_ZeroPage()>
    760c:	4b6c      	ldr	r3, [pc, #432]	; (77c0 <loop+0x70c>)
    760e:	781a      	ldrb	r2, [r3, #0]
    7610:	4310      	orrs	r0, r2
    7612:	b2c0      	uxtb	r0, r0
    7614:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7616:	f7fb fcdf 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x05].length);
    761a:	4b68      	ldr	r3, [pc, #416]	; (77bc <loop+0x708>)
    761c:	f893 4135 	ldrb.w	r4, [r3, #309]	; 0x135
    7620:	883b      	ldrh	r3, [r7, #0]
    7622:	441c      	add	r4, r3
    7624:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7626:	4622      	mov	r2, r4
				break; // OR ZeroPage
    7628:	e72f      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x06();
    762a:	f7fc fe19 	bl	4260 <opcode_0x06()>
    762e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7630:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    7632:	e72a      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x07();
    7634:	f7fd ff42 	bl	54bc <opcode_0x07()>
    7638:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    763a:	4602      	mov	r2, r0
				break; // SLO - ZeroPage
    763c:	e725      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x08();
    763e:	f7fc fb93 	bl	3d68 <opcode_0x08()>
    7642:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7644:	4602      	mov	r2, r0
				break; // PHP - Push processor status to the stack
    7646:	e720      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x09();
    7648:	f7fc fc48 	bl	3edc <opcode_0x09()>
    764c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    764e:	4602      	mov	r2, r0
				break; // OR - Immediate
    7650:	e71b      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x0A();
    7652:	f7fc f9ed 	bl	3a30 <opcode_0x0A()>
    7656:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7658:	4602      	mov	r2, r0
				break; // ASL A
    765a:	e716      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x0B();
    765c:	f7fe ff98 	bl	6590 <opcode_0x0B()>
    7660:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7662:	4602      	mov	r2, r0
				break; // ANC - Immediate
    7664:	e711      	b.n	748a <loop+0x3d6>
    Fetch_Absolute();
    7666:	f7fb fd2b 	bl	30c0 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    766a:	4b54      	ldr	r3, [pc, #336]	; (77bc <loop+0x708>)
    766c:	f893 42a1 	ldrb.w	r4, [r3, #673]	; 0x2a1
    7670:	883b      	ldrh	r3, [r7, #0]
    7672:	441c      	add	r4, r3
    7674:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7676:	4622      	mov	r2, r4
				break; // NOP - Absolute
    7678:	e707      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_Absolute());
    767a:	f7fb fd21 	bl	30c0 <Fetch_Absolute()>
    767e:	4b50      	ldr	r3, [pc, #320]	; (77c0 <loop+0x70c>)
    7680:	781a      	ldrb	r2, [r3, #0]
    7682:	4310      	orrs	r0, r2
    7684:	b2c0      	uxtb	r0, r0
    7686:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7688:	f7fb fca6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x0D].length);
    768c:	4b4b      	ldr	r3, [pc, #300]	; (77bc <loop+0x708>)
    768e:	f893 42d5 	ldrb.w	r4, [r3, #725]	; 0x2d5
    7692:	883b      	ldrh	r3, [r7, #0]
    7694:	441c      	add	r4, r3
    7696:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7698:	4622      	mov	r2, r4
				break; // OR - Absolute
    769a:	e6f6      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x0E();
    769c:	f7fc fe46 	bl	432c <opcode_0x0E()>
    76a0:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    76a2:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute
    76a4:	e6f1      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x0F();
    76a6:	f7fd ffe1 	bl	566c <opcode_0x0F()>
    76aa:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    76ac:	4602      	mov	r2, r0
				break; // SLO - Absolute
    76ae:	e6ec      	b.n	748a <loop+0x3d6>
    if ((flag_n) == 0) Branch_Taken();
    76b0:	4b3d      	ldr	r3, [pc, #244]	; (77a8 <loop+0x6f4>)
    76b2:	f993 3000 	ldrsb.w	r3, [r3]
    76b6:	2b00      	cmp	r3, #0
    76b8:	f2c1 8255 	blt.w	8b66 <loop+0x1ab2>
    76bc:	f7fd f9fc 	bl	4ab8 <Branch_Taken()>
    return(register_pc);
    76c0:	883c      	ldrh	r4, [r7, #0]
        sprintf(buf, "%04X", next_pc);
    76c2:	4622      	mov	r2, r4
				break; // BNE - Branch on Zero Clear
    76c4:	e6e1      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    76c6:	2001      	movs	r0, #1
    76c8:	f7fb fda0 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    76cc:	4b3c      	ldr	r3, [pc, #240]	; (77c0 <loop+0x70c>)
    76ce:	781a      	ldrb	r2, [r3, #0]
    76d0:	4310      	orrs	r0, r2
    76d2:	b2c0      	uxtb	r0, r0
    76d4:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    76d6:	f7fb fc7f 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x11].length);
    76da:	4b38      	ldr	r3, [pc, #224]	; (77bc <loop+0x708>)
    76dc:	f893 43a5 	ldrb.w	r4, [r3, #933]	; 0x3a5
    76e0:	883b      	ldrh	r3, [r7, #0]
    76e2:	441c      	add	r4, r3
    76e4:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    76e6:	4622      	mov	r2, r4
				break; // OR Indirect Indexed  Y
    76e8:	e6cf      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    76ea:	f7fb fca9 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    76ee:	4b33      	ldr	r3, [pc, #204]	; (77bc <loop+0x708>)
    76f0:	f893 4441 	ldrb.w	r4, [r3, #1089]	; 0x441
    76f4:	883b      	ldrh	r3, [r7, #0]
    76f6:	441c      	add	r4, r3
    76f8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    76fa:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    76fc:	e6c5      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_ZeroPage_X());
    76fe:	f7fb fc9f 	bl	3040 <Fetch_ZeroPage_X()>
    7702:	4b2f      	ldr	r3, [pc, #188]	; (77c0 <loop+0x70c>)
    7704:	781a      	ldrb	r2, [r3, #0]
    7706:	4310      	orrs	r0, r2
    7708:	b2c0      	uxtb	r0, r0
    770a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    770c:	f7fb fc64 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x15].length);
    7710:	4b2a      	ldr	r3, [pc, #168]	; (77bc <loop+0x708>)
    7712:	f893 4475 	ldrb.w	r4, [r3, #1141]	; 0x475
    7716:	883b      	ldrh	r3, [r7, #0]
    7718:	441c      	add	r4, r3
    771a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    771c:	4622      	mov	r2, r4
				break; // OR - ZeroPage,X
    771e:	e6b4      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x13();
    7720:	f7fd ff70 	bl	5604 <opcode_0x13()>
    7724:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7726:	4602      	mov	r2, r0
				break; // Indirect Indexed  Y
    7728:	e6af      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x16();
    772a:	f7fc fdd1 	bl	42d0 <opcode_0x16()>
    772e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7730:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    7732:	e6aa      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x17();
    7734:	f7fd fefe 	bl	5534 <opcode_0x17()>
    7738:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    773a:	4602      	mov	r2, r0
				break; // SLO - ZeroPage , X
    773c:	e6a5      	b.n	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    773e:	8838      	ldrh	r0, [r7, #0]
    7740:	2100      	movs	r1, #0
    7742:	3001      	adds	r0, #1
    7744:	b280      	uxth	r0, r0
    7746:	f7fb f983 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x18].length);
    774a:	4b1c      	ldr	r3, [pc, #112]	; (77bc <loop+0x708>)
    register_flags = register_flags & 0xFE;
    774c:	4a16      	ldr	r2, [pc, #88]	; (77a8 <loop+0x6f4>)
    return(register_pc + opcode_info[0x18].length);
    774e:	f893 4511 	ldrb.w	r4, [r3, #1297]	; 0x511
    7752:	883b      	ldrh	r3, [r7, #0]
    7754:	441c      	add	r4, r3
    register_flags = register_flags & 0xFE;
    7756:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    7758:	b2a4      	uxth	r4, r4
    register_flags = register_flags & 0xFE;
    775a:	f023 0301 	bic.w	r3, r3, #1
    775e:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7760:	4622      	mov	r2, r4
				break; // CLC
    7762:	e692      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_Absolute_Y(1));
    7764:	2001      	movs	r0, #1
    7766:	f7fb fcf7 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    776a:	4b15      	ldr	r3, [pc, #84]	; (77c0 <loop+0x70c>)
    776c:	781a      	ldrb	r2, [r3, #0]
    776e:	4310      	orrs	r0, r2
    7770:	b2c0      	uxtb	r0, r0
    7772:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7774:	f7fb fc30 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x19].length);
    7778:	4b10      	ldr	r3, [pc, #64]	; (77bc <loop+0x708>)
    777a:	f893 4545 	ldrb.w	r4, [r3, #1349]	; 0x545
    777e:	883b      	ldrh	r3, [r7, #0]
    7780:	441c      	add	r4, r3
    7782:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7784:	4622      	mov	r2, r4
				break; // OR - Absolute,Y
    7786:	e680      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x1B();
    7788:	f7fd ffd8 	bl	573c <opcode_0x1B()>
    778c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    778e:	4602      	mov	r2, r0
				break; // SLO - Absolute , Y
    7790:	e67b      	b.n	748a <loop+0x3d6>
    7792:	bf00      	nop
    7794:	20000930 	.word	0x20000930
    7798:	200043f8 	.word	0x200043f8
    779c:	200188a2 	.word	0x200188a2
    77a0:	20004a07 	.word	0x20004a07
    77a4:	200188a0 	.word	0x200188a0
    77a8:	20004a08 	.word	0x20004a08
    77ac:	20018818 	.word	0x20018818
    77b0:	200010f4 	.word	0x200010f4
    77b4:	200010b8 	.word	0x200010b8
    77b8:	20000444 	.word	0x20000444
    77bc:	20015418 	.word	0x20015418
    77c0:	200188a8 	.word	0x200188a8
    Fetch_Absolute_X(1);
    77c4:	2001      	movs	r0, #1
    77c6:	f7fb fc97 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    77ca:	4bbe      	ldr	r3, [pc, #760]	; (7ac4 <loop+0xa10>)
    77cc:	f893 45e1 	ldrb.w	r4, [r3, #1505]	; 0x5e1
    77d0:	883b      	ldrh	r3, [r7, #0]
    77d2:	441c      	add	r4, r3
    77d4:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    77d6:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    77d8:	e657      	b.n	748a <loop+0x3d6>
    register_a = register_a | (Fetch_Absolute_X(1));
    77da:	2001      	movs	r0, #1
    77dc:	f7fb fc8c 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    77e0:	4bb9      	ldr	r3, [pc, #740]	; (7ac8 <loop+0xa14>)
    77e2:	781a      	ldrb	r2, [r3, #0]
    77e4:	4310      	orrs	r0, r2
    77e6:	b2c0      	uxtb	r0, r0
    77e8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    77ea:	f7fb fbf5 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x1D].length);
    77ee:	4bb5      	ldr	r3, [pc, #724]	; (7ac4 <loop+0xa10>)
    77f0:	f893 4615 	ldrb.w	r4, [r3, #1557]	; 0x615
    77f4:	883b      	ldrh	r3, [r7, #0]
    77f6:	441c      	add	r4, r3
    77f8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    77fa:	4622      	mov	r2, r4
				break; // OR - Absolute,X
    77fc:	e645      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x1E();
    77fe:	f7fc fdc3 	bl	4388 <opcode_0x1E()>
    7802:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7804:	4602      	mov	r2, r0
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    7806:	e640      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x1F();
    7808:	f7fd ff64 	bl	56d4 <opcode_0x1F()>
    780c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    780e:	4602      	mov	r2, r0
				break; // SLO - Absolute , X
    7810:	e63b      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x20();
    7812:	f7fd fbfb 	bl	500c <opcode_0x20()>
    7816:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7818:	4602      	mov	r2, r0
				break; // JSR - Jump to Subroutine
    781a:	e636      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    781c:	f7fb fccc 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    7820:	4ba9      	ldr	r3, [pc, #676]	; (7ac8 <loop+0xa14>)
    7822:	781a      	ldrb	r2, [r3, #0]
    7824:	4010      	ands	r0, r2
    7826:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7828:	f7fb fbd6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x21].length);
    782c:	4ba5      	ldr	r3, [pc, #660]	; (7ac4 <loop+0xa10>)
    782e:	f893 46e5 	ldrb.w	r4, [r3, #1765]	; 0x6e5
    7832:	883b      	ldrh	r3, [r7, #0]
    7834:	441c      	add	r4, r3
    7836:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7838:	4622      	mov	r2, r4
				break; // AND - Indexed Indirect
    783a:	e626      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x23();
    783c:	f7fe f828 	bl	5890 <opcode_0x23()>
    7840:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7842:	4602      	mov	r2, r0
				break; // RLA - Indexed Indirect X
    7844:	e621      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x24();
    7846:	f7fc fb81 	bl	3f4c <opcode_0x24()>
    784a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    784c:	4602      	mov	r2, r0
				break; // BIT - ZeroPage
    784e:	e61c      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_ZeroPage());
    7850:	f7fb fbe2 	bl	3018 <Fetch_ZeroPage()>
    7854:	4b9c      	ldr	r3, [pc, #624]	; (7ac8 <loop+0xa14>)
    7856:	781a      	ldrb	r2, [r3, #0]
    7858:	4010      	ands	r0, r2
    785a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    785c:	f7fb fbbc 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x25].length);
    7860:	4b98      	ldr	r3, [pc, #608]	; (7ac4 <loop+0xa10>)
    7862:	f893 47b5 	ldrb.w	r4, [r3, #1973]	; 0x7b5
    7866:	883b      	ldrh	r3, [r7, #0]
    7868:	441c      	add	r4, r3
    786a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    786c:	4622      	mov	r2, r4
				break; // AND - ZeroPage
    786e:	e60c      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x26();
    7870:	f7fd f856 	bl	4920 <opcode_0x26()>
    7874:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7876:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage
    7878:	e607      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x27();
    787a:	f7fd ff93 	bl	57a4 <opcode_0x27()>
    787e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7880:	4602      	mov	r2, r0
				break; // RLA - ZeroPage
    7882:	e602      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x28();
    7884:	f7fc fab6 	bl	3df4 <opcode_0x28()>
    7888:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    788a:	4602      	mov	r2, r0
				break; // PLP - Pop processor status from the stack
    788c:	e5fd      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x29();
    788e:	f7fc fb09 	bl	3ea4 <opcode_0x29()>
    7892:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7894:	4602      	mov	r2, r0
				break; // AND - Immediate
    7896:	e5f8      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x2A();
    7898:	f7fc f942 	bl	3b20 <opcode_0x2A()>
    789c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    789e:	4602      	mov	r2, r0
				break; // ROL A
    78a0:	e5f3      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x2B();
    78a2:	f7fe fe9b 	bl	65dc <opcode_0x2B()>
    78a6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    78a8:	4602      	mov	r2, r0
				break; // ANC - Immediate
    78aa:	e5ee      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x2C();
    78ac:	f7fc fb7e 	bl	3fac <opcode_0x2C()>
    78b0:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    78b2:	4602      	mov	r2, r0
				break; // BIT - Absolute
    78b4:	e5e9      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_Absolute());
    78b6:	f7fb fc03 	bl	30c0 <Fetch_Absolute()>
    78ba:	4b83      	ldr	r3, [pc, #524]	; (7ac8 <loop+0xa14>)
    78bc:	781a      	ldrb	r2, [r3, #0]
    78be:	4010      	ands	r0, r2
    78c0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    78c2:	f7fb fb89 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x2D].length);
    78c6:	4b7f      	ldr	r3, [pc, #508]	; (7ac4 <loop+0xa10>)
    78c8:	f893 4955 	ldrb.w	r4, [r3, #2389]	; 0x955
    78cc:	883b      	ldrh	r3, [r7, #0]
    78ce:	441c      	add	r4, r3
    78d0:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    78d2:	4622      	mov	r2, r4
				break; // AND - Absolute
    78d4:	e5d9      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x2E();
    78d6:	f7fd f88d 	bl	49f4 <opcode_0x2E()>
    78da:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    78dc:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute
    78de:	e5d4      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x2F();
    78e0:	f7fe f842 	bl	5968 <opcode_0x2F()>
    78e4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    78e6:	4602      	mov	r2, r0
				break; // RLA - Absolute
    78e8:	e5cf      	b.n	748a <loop+0x3d6>
    if ((flag_n) == 1) Branch_Taken();
    78ea:	4b78      	ldr	r3, [pc, #480]	; (7acc <loop+0xa18>)
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	09db      	lsrs	r3, r3, #7
    78f0:	f041 8147 	bne.w	8b82 <loop+0x1ace>
        register_pc = register_pc + opcode_info[0x30].length;
    78f4:	4b73      	ldr	r3, [pc, #460]	; (7ac4 <loop+0xa10>)
    return read_byte(register_pc+offset, false);
    78f6:	2100      	movs	r1, #0
    78f8:	883a      	ldrh	r2, [r7, #0]
    78fa:	f893 39f1 	ldrb.w	r3, [r3, #2545]	; 0x9f1
    78fe:	4413      	add	r3, r2
    7900:	b29b      	uxth	r3, r3
    7902:	803b      	strh	r3, [r7, #0]
    7904:	3301      	adds	r3, #1
    7906:	b298      	uxth	r0, r3
    7908:	f7fb f8a2 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc);
    790c:	883c      	ldrh	r4, [r7, #0]
        sprintf(buf, "%04X", next_pc);
    790e:	4622      	mov	r2, r4
				break; // BMI - Branch on Minus (N Flag Set)
    7910:	e5bb      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    7912:	2001      	movs	r0, #1
    7914:	f7fb fc7a 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7918:	4b6b      	ldr	r3, [pc, #428]	; (7ac8 <loop+0xa14>)
    791a:	781a      	ldrb	r2, [r3, #0]
    791c:	4010      	ands	r0, r2
    791e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7920:	f7fb fb5a 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x31].length);
    7924:	4b67      	ldr	r3, [pc, #412]	; (7ac4 <loop+0xa10>)
    7926:	f893 4a25 	ldrb.w	r4, [r3, #2597]	; 0xa25
    792a:	883b      	ldrh	r3, [r7, #0]
    792c:	441c      	add	r4, r3
    792e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7930:	4622      	mov	r2, r4
				break; // AND - Indirect Indexed
    7932:	e5aa      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x33();
    7934:	f7fd ffe2 	bl	58fc <opcode_0x33()>
    7938:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    793a:	4602      	mov	r2, r0
				break; // RLA - Indirect Indexed  Y
    793c:	e5a5      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    793e:	f7fb fb7f 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    7942:	4b60      	ldr	r3, [pc, #384]	; (7ac4 <loop+0xa10>)
    7944:	f893 4ac1 	ldrb.w	r4, [r3, #2753]	; 0xac1
    7948:	883b      	ldrh	r3, [r7, #0]
    794a:	441c      	add	r4, r3
    794c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    794e:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    7950:	e59b      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_ZeroPage_X());
    7952:	f7fb fb75 	bl	3040 <Fetch_ZeroPage_X()>
    7956:	4b5c      	ldr	r3, [pc, #368]	; (7ac8 <loop+0xa14>)
    7958:	781a      	ldrb	r2, [r3, #0]
    795a:	4010      	ands	r0, r2
    795c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    795e:	f7fb fb3b 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x35].length);
    7962:	4b58      	ldr	r3, [pc, #352]	; (7ac4 <loop+0xa10>)
    7964:	f893 4af5 	ldrb.w	r4, [r3, #2805]	; 0xaf5
    7968:	883b      	ldrh	r3, [r7, #0]
    796a:	441c      	add	r4, r3
    796c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    796e:	4622      	mov	r2, r4
				break; // AND - ZeroPage,X
    7970:	e58b      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x36();
    7972:	f7fd f80f 	bl	4994 <opcode_0x36()>
    7976:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7978:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - ZeroPage , X
    797a:	e586      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x37();
    797c:	f7fd ff52 	bl	5824 <opcode_0x37()>
    7980:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7982:	4602      	mov	r2, r0
				break; // RLA - ZeroPage , X
    7984:	e581      	b.n	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    7986:	8838      	ldrh	r0, [r7, #0]
    7988:	2100      	movs	r1, #0
    798a:	3001      	adds	r0, #1
    798c:	b280      	uxth	r0, r0
    798e:	f7fb f85f 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x38].length);
    7992:	4b4c      	ldr	r3, [pc, #304]	; (7ac4 <loop+0xa10>)
    register_flags = register_flags | 0x01;
    7994:	4a4d      	ldr	r2, [pc, #308]	; (7acc <loop+0xa18>)
    return(register_pc + opcode_info[0x38].length);
    7996:	f893 4b91 	ldrb.w	r4, [r3, #2961]	; 0xb91
    799a:	883b      	ldrh	r3, [r7, #0]
    799c:	441c      	add	r4, r3
    register_flags = register_flags | 0x01;
    799e:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    79a0:	b2a4      	uxth	r4, r4
    register_flags = register_flags | 0x01;
    79a2:	f043 0301 	orr.w	r3, r3, #1
    79a6:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    79a8:	4622      	mov	r2, r4
				break; // SEC
    79aa:	e56e      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_Absolute_Y(1));
    79ac:	2001      	movs	r0, #1
    79ae:	f7fb fbd3 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    79b2:	4b45      	ldr	r3, [pc, #276]	; (7ac8 <loop+0xa14>)
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	4010      	ands	r0, r2
    79b8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79ba:	f7fb fb0d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x39].length);
    79be:	4b41      	ldr	r3, [pc, #260]	; (7ac4 <loop+0xa10>)
    79c0:	f893 4bc5 	ldrb.w	r4, [r3, #3013]	; 0xbc5
    79c4:	883b      	ldrh	r3, [r7, #0]
    79c6:	441c      	add	r4, r3
    79c8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    79ca:	4622      	mov	r2, r4
				break; // AND - Absolute,Y
    79cc:	e55d      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x3B();
    79ce:	f7fe f837 	bl	5a40 <opcode_0x3B()>
    79d2:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    79d4:	4602      	mov	r2, r0
				break; // RLA - Absolute , Y
    79d6:	e558      	b.n	748a <loop+0x3d6>
    Fetch_Absolute_X(1);
    79d8:	2001      	movs	r0, #1
    79da:	f7fb fb8d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    79de:	4b39      	ldr	r3, [pc, #228]	; (7ac4 <loop+0xa10>)
    79e0:	f893 4c61 	ldrb.w	r4, [r3, #3169]	; 0xc61
    79e4:	883b      	ldrh	r3, [r7, #0]
    79e6:	441c      	add	r4, r3
    79e8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    79ea:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    79ec:	e54d      	b.n	748a <loop+0x3d6>
    register_a = register_a & (Fetch_Absolute_X(1));
    79ee:	2001      	movs	r0, #1
    79f0:	f7fb fb82 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    79f4:	4b34      	ldr	r3, [pc, #208]	; (7ac8 <loop+0xa14>)
    79f6:	781a      	ldrb	r2, [r3, #0]
    79f8:	4010      	ands	r0, r2
    79fa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    79fc:	f7fb faec 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x3D].length);
    7a00:	4b30      	ldr	r3, [pc, #192]	; (7ac4 <loop+0xa10>)
    7a02:	f893 4c95 	ldrb.w	r4, [r3, #3221]	; 0xc95
    7a06:	883b      	ldrh	r3, [r7, #0]
    7a08:	441c      	add	r4, r3
    7a0a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7a0c:	4622      	mov	r2, r4
				break; // AND - Absolute,X
    7a0e:	e53c      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x3E();
    7a10:	f7fd f820 	bl	4a54 <opcode_0x3E()>
    7a14:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7a16:	4602      	mov	r2, r0
				break; // ROL - Rotate Left - Absolute , X
    7a18:	e537      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x3F();
    7a1a:	f7fd ffdb 	bl	59d4 <opcode_0x3F()>
    7a1e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7a20:	4602      	mov	r2, r0
				break; // RLA - Absolute , X
    7a22:	e532      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x40();
    7a24:	f7fd fbba 	bl	519c <opcode_0x40()>
    7a28:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7a2a:	4602      	mov	r2, r0
				break; // RTI - Return from Interrupt
    7a2c:	e52d      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    7a2e:	f7fb fbc3 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    7a32:	4b25      	ldr	r3, [pc, #148]	; (7ac8 <loop+0xa14>)
    7a34:	781a      	ldrb	r2, [r3, #0]
    7a36:	4050      	eors	r0, r2
    7a38:	b2c0      	uxtb	r0, r0
    7a3a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a3c:	f7fb facc 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x41].length);
    7a40:	4b20      	ldr	r3, [pc, #128]	; (7ac4 <loop+0xa10>)
    7a42:	f893 4d65 	ldrb.w	r4, [r3, #3429]	; 0xd65
    7a46:	883b      	ldrh	r3, [r7, #0]
    7a48:	441c      	add	r4, r3
    7a4a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7a4c:	4622      	mov	r2, r4
				break; // EOR - Indexed Indirect X
    7a4e:	e51c      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x43();
    7a50:	f7fe f89a 	bl	5b88 <opcode_0x43()>
    7a54:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7a56:	4602      	mov	r2, r0
				break; // SRE - Indexed Indirect X
    7a58:	e517      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage();
    7a5a:	f7fb fadd 	bl	3018 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    7a5e:	4b19      	ldr	r3, [pc, #100]	; (7ac4 <loop+0xa10>)
    7a60:	f893 4e01 	ldrb.w	r4, [r3, #3585]	; 0xe01
    7a64:	883b      	ldrh	r3, [r7, #0]
    7a66:	441c      	add	r4, r3
    7a68:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7a6a:	4622      	mov	r2, r4
				break; // NOP - ZeroPage
    7a6c:	e50d      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_ZeroPage());
    7a6e:	f7fb fad3 	bl	3018 <Fetch_ZeroPage()>
    7a72:	4b15      	ldr	r3, [pc, #84]	; (7ac8 <loop+0xa14>)
    7a74:	781a      	ldrb	r2, [r3, #0]
    7a76:	4050      	eors	r0, r2
    7a78:	b2c0      	uxtb	r0, r0
    7a7a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7a7c:	f7fb faac 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x45].length);
    7a80:	4b10      	ldr	r3, [pc, #64]	; (7ac4 <loop+0xa10>)
    7a82:	f893 4e35 	ldrb.w	r4, [r3, #3637]	; 0xe35
    7a86:	883b      	ldrh	r3, [r7, #0]
    7a88:	441c      	add	r4, r3
    7a8a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7a8c:	4622      	mov	r2, r4
				break; // EOR - ZeroPage
    7a8e:	e4fc      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x46();
    7a90:	f7fc fdb6 	bl	4600 <opcode_0x46()>
    7a94:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7a96:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage
    7a98:	e4f7      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x47();
    7a9a:	f7fe f807 	bl	5aac <opcode_0x47()>
    7a9e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7aa0:	4602      	mov	r2, r0
				break; // SRE - ZeroPage
    7aa2:	e4f2      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x48();
    7aa4:	f7fc f984 	bl	3db0 <opcode_0x48()>
    7aa8:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7aaa:	4602      	mov	r2, r0
				break; // PHA - Push Accumulator to the stack
    7aac:	e4ed      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x49();
    7aae:	f7fc fa31 	bl	3f14 <opcode_0x49()>
    7ab2:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7ab4:	4602      	mov	r2, r0
				break; // EOR - Immediate
    7ab6:	e4e8      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x4A();
    7ab8:	f7fb ffe2 	bl	3a80 <opcode_0x4A()>
    7abc:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7abe:	4602      	mov	r2, r0
				break; // LSR A
    7ac0:	e4e3      	b.n	748a <loop+0x3d6>
    7ac2:	bf00      	nop
    7ac4:	20015418 	.word	0x20015418
    7ac8:	200188a8 	.word	0x200188a8
    7acc:	20004a08 	.word	0x20004a08
				next_pc = opcode_0x4B();
    7ad0:	f7fe fdaa 	bl	6628 <opcode_0x4B()>
    7ad4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7ad6:	4602      	mov	r2, r0
				break; // ALR - Immediate
    7ad8:	e4d7      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x4C();
    7ada:	f7fd f929 	bl	4d30 <opcode_0x4C()>
    7ade:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7ae0:	4602      	mov	r2, r0
				break; // JMP - Jump Absolute
    7ae2:	e4d2      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_Absolute());
    7ae4:	f7fb faec 	bl	30c0 <Fetch_Absolute()>
    7ae8:	4bc6      	ldr	r3, [pc, #792]	; (7e04 <loop+0xd50>)
    7aea:	781a      	ldrb	r2, [r3, #0]
    7aec:	4050      	eors	r0, r2
    7aee:	b2c0      	uxtb	r0, r0
    7af0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7af2:	f7fb fa71 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x4D].length);
    7af6:	4bc4      	ldr	r3, [pc, #784]	; (7e08 <loop+0xd54>)
    7af8:	f893 4fd5 	ldrb.w	r4, [r3, #4053]	; 0xfd5
    7afc:	883b      	ldrh	r3, [r7, #0]
    7afe:	441c      	add	r4, r3
    7b00:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7b02:	4622      	mov	r2, r4
				break; // EOR - Absolute
    7b04:	e4c1      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x4E();
    7b06:	f7fc fddf 	bl	46c8 <opcode_0x4E()>
    7b0a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b0c:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute
    7b0e:	e4bc      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x4F();
    7b10:	f7fe f8a0 	bl	5c54 <opcode_0x4F()>
    7b14:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b16:	4602      	mov	r2, r0
				break; // SRE - Absolute
    7b18:	e4b7      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x50();
    7b1a:	f7fd f8eb 	bl	4cf4 <opcode_0x50()>
    7b1e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b20:	4602      	mov	r2, r0
				break; // BVC - Branch on Overflow Clear
    7b22:	e4b2      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    7b24:	2001      	movs	r0, #1
    7b26:	f7fb fb71 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7b2a:	4bb6      	ldr	r3, [pc, #728]	; (7e04 <loop+0xd50>)
    7b2c:	781a      	ldrb	r2, [r3, #0]
    7b2e:	4050      	eors	r0, r2
    7b30:	b2c0      	uxtb	r0, r0
    7b32:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b34:	f7fb fa50 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x51].length);
    7b38:	4bb4      	ldr	r3, [pc, #720]	; (7e0c <loop+0xd58>)
    7b3a:	f893 40a5 	ldrb.w	r4, [r3, #165]	; 0xa5
    7b3e:	883b      	ldrh	r3, [r7, #0]
    7b40:	441c      	add	r4, r3
    7b42:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7b44:	4622      	mov	r2, r4
				break; // EOR - Indirect Indexed  Y
    7b46:	e4a0      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x53();
    7b48:	f7fe f850 	bl	5bec <opcode_0x53()>
    7b4c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b4e:	4602      	mov	r2, r0
				break; // SRE - Indirect Indexed  Y
    7b50:	e49b      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    7b52:	f7fb fa75 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    7b56:	4bad      	ldr	r3, [pc, #692]	; (7e0c <loop+0xd58>)
    7b58:	f893 4141 	ldrb.w	r4, [r3, #321]	; 0x141
    7b5c:	883b      	ldrh	r3, [r7, #0]
    7b5e:	441c      	add	r4, r3
    7b60:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7b62:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    7b64:	e491      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_ZeroPage_X());
    7b66:	f7fb fa6b 	bl	3040 <Fetch_ZeroPage_X()>
    7b6a:	4ba6      	ldr	r3, [pc, #664]	; (7e04 <loop+0xd50>)
    7b6c:	781a      	ldrb	r2, [r3, #0]
    7b6e:	4050      	eors	r0, r2
    7b70:	b2c0      	uxtb	r0, r0
    7b72:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7b74:	f7fb fa30 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x55].length);
    7b78:	4ba4      	ldr	r3, [pc, #656]	; (7e0c <loop+0xd58>)
    7b7a:	f893 4175 	ldrb.w	r4, [r3, #373]	; 0x175
    7b7e:	883b      	ldrh	r3, [r7, #0]
    7b80:	441c      	add	r4, r3
    7b82:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7b84:	4622      	mov	r2, r4
				break; // EOR - ZeroPage,X
    7b86:	e480      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x56();
    7b88:	f7fc fd70 	bl	466c <opcode_0x56()>
    7b8c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b8e:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - ZeroPage , X
    7b90:	e47b      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x57();
    7b92:	f7fd ffc7 	bl	5b24 <opcode_0x57()>
    7b96:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7b98:	4602      	mov	r2, r0
				break; // SRE - ZeroPage , X
    7b9a:	e476      	b.n	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    7b9c:	8838      	ldrh	r0, [r7, #0]
    7b9e:	2100      	movs	r1, #0
    7ba0:	3001      	adds	r0, #1
    7ba2:	b280      	uxth	r0, r0
    7ba4:	f7fa ff54 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x58].length);
    7ba8:	4b98      	ldr	r3, [pc, #608]	; (7e0c <loop+0xd58>)
    register_flags = register_flags & 0xFB;
    7baa:	4a99      	ldr	r2, [pc, #612]	; (7e10 <loop+0xd5c>)
    return(register_pc + opcode_info[0x58].length);
    7bac:	f893 4211 	ldrb.w	r4, [r3, #529]	; 0x211
    7bb0:	883b      	ldrh	r3, [r7, #0]
    7bb2:	441c      	add	r4, r3
    register_flags = register_flags & 0xFB;
    7bb4:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    7bb6:	b2a4      	uxth	r4, r4
    register_flags = register_flags & 0xFB;
    7bb8:	f023 0304 	bic.w	r3, r3, #4
    7bbc:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7bbe:	4622      	mov	r2, r4
				break; // CLI
    7bc0:	e463      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    7bc2:	2001      	movs	r0, #1
    7bc4:	f7fb fac8 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    7bc8:	4b8e      	ldr	r3, [pc, #568]	; (7e04 <loop+0xd50>)
    7bca:	781a      	ldrb	r2, [r3, #0]
    7bcc:	4050      	eors	r0, r2
    7bce:	b2c0      	uxtb	r0, r0
    7bd0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7bd2:	f7fb fa01 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x59].length);
    7bd6:	4b8d      	ldr	r3, [pc, #564]	; (7e0c <loop+0xd58>)
    7bd8:	f893 4245 	ldrb.w	r4, [r3, #581]	; 0x245
    7bdc:	883b      	ldrh	r3, [r7, #0]
    7bde:	441c      	add	r4, r3
    7be0:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7be2:	4622      	mov	r2, r4
				break; // EOR - Absolute,Y
    7be4:	e451      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x5B();
    7be6:	f7fe f89b 	bl	5d20 <opcode_0x5B()>
    7bea:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7bec:	4602      	mov	r2, r0
				break; // RE - Absolute , Y
    7bee:	e44c      	b.n	748a <loop+0x3d6>
    Fetch_Absolute_X(1);
    7bf0:	2001      	movs	r0, #1
    7bf2:	f7fb fa81 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    7bf6:	4b85      	ldr	r3, [pc, #532]	; (7e0c <loop+0xd58>)
    7bf8:	f893 42e1 	ldrb.w	r4, [r3, #737]	; 0x2e1
    7bfc:	883b      	ldrh	r3, [r7, #0]
    7bfe:	441c      	add	r4, r3
    7c00:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7c02:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    7c04:	e441      	b.n	748a <loop+0x3d6>
    register_a = register_a ^ (Fetch_Absolute_X(1));
    7c06:	2001      	movs	r0, #1
    7c08:	f7fb fa76 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    7c0c:	4b7d      	ldr	r3, [pc, #500]	; (7e04 <loop+0xd50>)
    7c0e:	781a      	ldrb	r2, [r3, #0]
    7c10:	4050      	eors	r0, r2
    7c12:	b2c0      	uxtb	r0, r0
    7c14:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7c16:	f7fb f9df 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x5D].length);
    7c1a:	4b7c      	ldr	r3, [pc, #496]	; (7e0c <loop+0xd58>)
    7c1c:	f893 4315 	ldrb.w	r4, [r3, #789]	; 0x315
    7c20:	883b      	ldrh	r3, [r7, #0]
    7c22:	441c      	add	r4, r3
    7c24:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7c26:	4622      	mov	r2, r4
				break; // EOR - Absolute,X
    7c28:	e42f      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x5E();
    7c2a:	f7fc fd79 	bl	4720 <opcode_0x5E()>
    7c2e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7c30:	4602      	mov	r2, r0
				break; // LSR - Logical Shift Right - Absolute , X
    7c32:	e42a      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x5F();
    7c34:	f7fe f840 	bl	5cb8 <opcode_0x5F()>
    7c38:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7c3a:	4602      	mov	r2, r0
				break; // SRE - Absolute , X
    7c3c:	e425      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x60();
    7c3e:	f7fd fb79 	bl	5334 <opcode_0x60()>
    7c42:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7c44:	4602      	mov	r2, r0
				break; // RTS - Return from Subroutine
    7c46:	e420      	b.n	748a <loop+0x3d6>
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    7c48:	f7fb fab6 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    7c4c:	b280      	uxth	r0, r0
    7c4e:	f7fb ff93 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    7c52:	4b6e      	ldr	r3, [pc, #440]	; (7e0c <loop+0xd58>)
    7c54:	f893 43e5 	ldrb.w	r4, [r3, #997]	; 0x3e5
    7c58:	883b      	ldrh	r3, [r7, #0]
    7c5a:	441c      	add	r4, r3
    7c5c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7c5e:	4622      	mov	r2, r4
				break; // ADC - Indexed Indirect X
    7c60:	e413      	b.n	748a <loop+0x3d6>
				next_pc = opcode_0x63();
    7c62:	f7fe f8f7 	bl	5e54 <opcode_0x63()>
    7c66:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7c68:	4602      	mov	r2, r0
				break; // RRA - Indexed Indirect X
    7c6a:	e40e      	b.n	748a <loop+0x3d6>
    Fetch_ZeroPage();
    7c6c:	f7fb f9d4 	bl	3018 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    7c70:	4b66      	ldr	r3, [pc, #408]	; (7e0c <loop+0xd58>)
    7c72:	f893 4481 	ldrb.w	r4, [r3, #1153]	; 0x481
    7c76:	883b      	ldrh	r3, [r7, #0]
    7c78:	441c      	add	r4, r3
    7c7a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7c7c:	4622      	mov	r2, r4
				break; // NOP - ZeroPage
    7c7e:	e404      	b.n	748a <loop+0x3d6>
    Calculate_ADC(Fetch_ZeroPage());
    7c80:	f7fb f9ca 	bl	3018 <Fetch_ZeroPage()>
    7c84:	b280      	uxth	r0, r0
    7c86:	f7fb ff77 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    7c8a:	4b60      	ldr	r3, [pc, #384]	; (7e0c <loop+0xd58>)
    7c8c:	f893 44b5 	ldrb.w	r4, [r3, #1205]	; 0x4b5
    7c90:	883b      	ldrh	r3, [r7, #0]
    7c92:	441c      	add	r4, r3
    7c94:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7c96:	4622      	mov	r2, r4
				break; // ADC - ZeroPage
    7c98:	f7ff bbf7 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x66();
    7c9c:	f7fc fd6e 	bl	477c <opcode_0x66()>
    7ca0:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7ca2:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage
    7ca4:	f7ff bbf1 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x67();
    7ca8:	f7fe f86e 	bl	5d88 <opcode_0x67()>
    7cac:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7cae:	4602      	mov	r2, r0
				break; // RRA - ZeroPage
    7cb0:	f7ff bbeb 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x68();
    7cb4:	f7fc f8ca 	bl	3e4c <opcode_0x68()>
    7cb8:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7cba:	4602      	mov	r2, r0
				break; // PLA - Pop Accumulator from the stack
    7cbc:	f7ff bbe5 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    7cc0:	8838      	ldrh	r0, [r7, #0]
    7cc2:	2100      	movs	r1, #0
    7cc4:	3001      	adds	r0, #1
    7cc6:	b280      	uxth	r0, r0
    7cc8:	f7fa fec2 	bl	2a50 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    7ccc:	b280      	uxth	r0, r0
    7cce:	f7fb ff53 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    7cd2:	4b4e      	ldr	r3, [pc, #312]	; (7e0c <loop+0xd58>)
    7cd4:	f893 4585 	ldrb.w	r4, [r3, #1413]	; 0x585
    7cd8:	883b      	ldrh	r3, [r7, #0]
    7cda:	441c      	add	r4, r3
    7cdc:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7cde:	4622      	mov	r2, r4
				break; // ADC - Immediate
    7ce0:	f7ff bbd3 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x6A();
    7ce4:	f7fb fef2 	bl	3acc <opcode_0x6A()>
    7ce8:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7cea:	4602      	mov	r2, r0
				break; // ROR A
    7cec:	f7ff bbcd 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x6B();
    7cf0:	f7fe fcc4 	bl	667c <opcode_0x6B()>
    7cf4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7cf6:	4602      	mov	r2, r0
				break; // ARR - Immediate
    7cf8:	f7ff bbc7 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x6C();
    7cfc:	f7fd f8c8 	bl	4e90 <opcode_0x6C()>
    7d00:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7d02:	4602      	mov	r2, r0
				break; // JMP - Jump Indirect
    7d04:	f7ff bbc1 	b.w	748a <loop+0x3d6>
    Calculate_ADC(Fetch_Absolute());
    7d08:	f7fb f9da 	bl	30c0 <Fetch_Absolute()>
    7d0c:	b280      	uxth	r0, r0
    7d0e:	f7fb ff33 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    7d12:	4b3e      	ldr	r3, [pc, #248]	; (7e0c <loop+0xd58>)
    7d14:	f893 4655 	ldrb.w	r4, [r3, #1621]	; 0x655
    7d18:	883b      	ldrh	r3, [r7, #0]
    7d1a:	441c      	add	r4, r3
    7d1c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7d1e:	4622      	mov	r2, r4
				break; // ADC - Absolute
    7d20:	f7ff bbb3 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x6E();
    7d24:	f7fc fd98 	bl	4858 <opcode_0x6E()>
    7d28:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7d2a:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute
    7d2c:	f7ff bbad 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x6F();
    7d30:	f7fe f8ee 	bl	5f10 <opcode_0x6F()>
    7d34:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7d36:	4602      	mov	r2, r0
				break; // RRA - Absolute
    7d38:	f7ff bba7 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x70();
    7d3c:	f7fc ffba 	bl	4cb4 <opcode_0x70()>
    7d40:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7d42:	4602      	mov	r2, r0
				break; // BVS - Branch on Overflow Set
    7d44:	f7ff bba1 	b.w	748a <loop+0x3d6>
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    7d48:	2001      	movs	r0, #1
    7d4a:	f7fb fa5f 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7d4e:	b280      	uxth	r0, r0
    7d50:	f7fb ff12 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    7d54:	4b2d      	ldr	r3, [pc, #180]	; (7e0c <loop+0xd58>)
    7d56:	f893 4725 	ldrb.w	r4, [r3, #1829]	; 0x725
    7d5a:	883b      	ldrh	r3, [r7, #0]
    7d5c:	441c      	add	r4, r3
    7d5e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7d60:	4622      	mov	r2, r4
				break; // ADC - Indirect Indexed  Y
    7d62:	f7ff bb92 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x73();
    7d66:	f7fe f8a3 	bl	5eb0 <opcode_0x73()>
    7d6a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7d6c:	4602      	mov	r2, r0
				break; // RRA - Indirect Indexed  Y
    7d6e:	f7ff bb8c 	b.w	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    7d72:	f7fb f965 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    7d76:	4b25      	ldr	r3, [pc, #148]	; (7e0c <loop+0xd58>)
    7d78:	f893 47c1 	ldrb.w	r4, [r3, #1985]	; 0x7c1
    7d7c:	883b      	ldrh	r3, [r7, #0]
    7d7e:	441c      	add	r4, r3
    7d80:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7d82:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    7d84:	f7ff bb81 	b.w	748a <loop+0x3d6>
    Calculate_ADC(Fetch_ZeroPage_X());
    7d88:	f7fb f95a 	bl	3040 <Fetch_ZeroPage_X()>
    7d8c:	b280      	uxth	r0, r0
    7d8e:	f7fb fef3 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    7d92:	4b1e      	ldr	r3, [pc, #120]	; (7e0c <loop+0xd58>)
    7d94:	f893 47f5 	ldrb.w	r4, [r3, #2037]	; 0x7f5
    7d98:	883b      	ldrh	r3, [r7, #0]
    7d9a:	441c      	add	r4, r3
    7d9c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7d9e:	4622      	mov	r2, r4
				break; // ADC - ZeroPage , X
    7da0:	f7ff bb73 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x76();
    7da4:	f7fc fd26 	bl	47f4 <opcode_0x76()>
    7da8:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7daa:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - ZeroPage , X
    7dac:	f7ff bb6d 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x77();
    7db0:	f7fe f822 	bl	5df8 <opcode_0x77()>
    7db4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7db6:	4602      	mov	r2, r0
				break; // RRA - ZeroPage , X
    7db8:	f7ff bb67 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    7dbc:	8838      	ldrh	r0, [r7, #0]
    7dbe:	2100      	movs	r1, #0
    7dc0:	3001      	adds	r0, #1
    7dc2:	b280      	uxth	r0, r0
    7dc4:	f7fa fe44 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x78].length);
    7dc8:	4b10      	ldr	r3, [pc, #64]	; (7e0c <loop+0xd58>)
    register_flags = register_flags | 0x04;
    7dca:	4a11      	ldr	r2, [pc, #68]	; (7e10 <loop+0xd5c>)
    return(register_pc + opcode_info[0x78].length);
    7dcc:	f893 4891 	ldrb.w	r4, [r3, #2193]	; 0x891
    7dd0:	883b      	ldrh	r3, [r7, #0]
    7dd2:	441c      	add	r4, r3
    register_flags = register_flags | 0x04;
    7dd4:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    7dd6:	b2a4      	uxth	r4, r4
    register_flags = register_flags | 0x04;
    7dd8:	f043 0304 	orr.w	r3, r3, #4
    7ddc:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    7dde:	4622      	mov	r2, r4
				break; // SEI
    7de0:	f7ff bb53 	b.w	748a <loop+0x3d6>
    Calculate_ADC(Fetch_Absolute_Y(1));
    7de4:	2001      	movs	r0, #1
    7de6:	f7fb f9b7 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    7dea:	b280      	uxth	r0, r0
    7dec:	f7fb fec4 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    7df0:	4b06      	ldr	r3, [pc, #24]	; (7e0c <loop+0xd58>)
    7df2:	f893 48c5 	ldrb.w	r4, [r3, #2245]	; 0x8c5
    7df6:	883b      	ldrh	r3, [r7, #0]
    7df8:	441c      	add	r4, r3
    7dfa:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7dfc:	4622      	mov	r2, r4
				break; // ADC - Absolute , Y
    7dfe:	f7ff bb44 	b.w	748a <loop+0x3d6>
    7e02:	bf00      	nop
    7e04:	200188a8 	.word	0x200188a8
    7e08:	20015418 	.word	0x20015418
    7e0c:	20016418 	.word	0x20016418
    7e10:	20004a08 	.word	0x20004a08
				next_pc = opcode_0x7B();
    7e14:	f7fe f8da 	bl	5fcc <opcode_0x7B()>
    7e18:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7e1a:	4602      	mov	r2, r0
				break; // RRA - Absolute , Y
    7e1c:	f7ff bb35 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_X(1);
    7e20:	2001      	movs	r0, #1
    7e22:	f7fb f969 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    7e26:	4bb7      	ldr	r3, [pc, #732]	; (8104 <loop+0x1050>)
    7e28:	f893 4961 	ldrb.w	r4, [r3, #2401]	; 0x961
    7e2c:	883b      	ldrh	r3, [r7, #0]
    7e2e:	441c      	add	r4, r3
    7e30:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7e32:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    7e34:	f7ff bb29 	b.w	748a <loop+0x3d6>
    Calculate_ADC(Fetch_Absolute_X(1));
    7e38:	2001      	movs	r0, #1
    7e3a:	f7fb f95d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    7e3e:	b280      	uxth	r0, r0
    7e40:	f7fb fe9a 	bl	3b78 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    7e44:	4baf      	ldr	r3, [pc, #700]	; (8104 <loop+0x1050>)
    7e46:	f893 4995 	ldrb.w	r4, [r3, #2453]	; 0x995
    7e4a:	883b      	ldrh	r3, [r7, #0]
    7e4c:	441c      	add	r4, r3
    7e4e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7e50:	4622      	mov	r2, r4
				break; // ADC - Absolute , X
    7e52:	f7ff bb1a 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x7E();
    7e56:	f7fc fd31 	bl	48bc <opcode_0x7E()>
    7e5a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7e5c:	4602      	mov	r2, r0
				break; // ROR - Rotate Right - Absolute , X
    7e5e:	f7ff bb14 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0x7F();
    7e62:	f7fe f883 	bl	5f6c <opcode_0x7F()>
    7e66:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    7e68:	4602      	mov	r2, r0
				break; // RRA - Absolute , X
    7e6a:	f7ff bb0e 	b.w	748a <loop+0x3d6>
    Fetch_Immediate(1);
    7e6e:	2001      	movs	r0, #1
    7e70:	f7fb f8c6 	bl	3000 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    7e74:	4ba3      	ldr	r3, [pc, #652]	; (8104 <loop+0x1050>)
    7e76:	f893 4a31 	ldrb.w	r4, [r3, #2609]	; 0xa31
    7e7a:	883b      	ldrh	r3, [r7, #0]
    7e7c:	441c      	add	r4, r3
    7e7e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7e80:	4622      	mov	r2, r4
				break; // NOP - Immediate
    7e82:	f7ff bb02 	b.w	748a <loop+0x3d6>
    Write_Indexed_Indirect_X(register_a);
    7e86:	4ba0      	ldr	r3, [pc, #640]	; (8108 <loop+0x1054>)
    7e88:	7818      	ldrb	r0, [r3, #0]
    7e8a:	f7fb faa7 	bl	33dc <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x81].length);
    7e8e:	4b9d      	ldr	r3, [pc, #628]	; (8104 <loop+0x1050>)
    7e90:	f893 4a65 	ldrb.w	r4, [r3, #2661]	; 0xa65
    7e94:	883b      	ldrh	r3, [r7, #0]
    7e96:	441c      	add	r4, r3
    7e98:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7e9a:	4622      	mov	r2, r4
				break; // STA - Indexed Indirect X
    7e9c:	f7ff baf5 	b.w	748a <loop+0x3d6>
    Fetch_Immediate(1);
    7ea0:	2001      	movs	r0, #1
    7ea2:	f7fb f8ad 	bl	3000 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    7ea6:	4b97      	ldr	r3, [pc, #604]	; (8104 <loop+0x1050>)
    7ea8:	f893 4a99 	ldrb.w	r4, [r3, #2713]	; 0xa99
    7eac:	883b      	ldrh	r3, [r7, #0]
    7eae:	441c      	add	r4, r3
    7eb0:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7eb2:	4622      	mov	r2, r4
				break; // NOP - Immediate
    7eb4:	f7ff bae9 	b.w	748a <loop+0x3d6>
    Write_Indexed_Indirect_X(register_a & register_x);
    7eb8:	4b93      	ldr	r3, [pc, #588]	; (8108 <loop+0x1054>)
    7eba:	7818      	ldrb	r0, [r3, #0]
    7ebc:	4b93      	ldr	r3, [pc, #588]	; (810c <loop+0x1058>)
    7ebe:	781b      	ldrb	r3, [r3, #0]
    7ec0:	4018      	ands	r0, r3
    7ec2:	f7fb fa8b 	bl	33dc <Write_Indexed_Indirect_X(unsigned char)>
    return(register_pc + opcode_info[0x83].length);
    7ec6:	4b8f      	ldr	r3, [pc, #572]	; (8104 <loop+0x1050>)
    7ec8:	f893 4acd 	ldrb.w	r4, [r3, #2765]	; 0xacd
    7ecc:	883b      	ldrh	r3, [r7, #0]
    7ece:	441c      	add	r4, r3
    7ed0:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7ed2:	4622      	mov	r2, r4
				break; // SAX - Indexed Indirect X
    7ed4:	f7ff bad9 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    7ed8:	8838      	ldrh	r0, [r7, #0]
    7eda:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    7edc:	4b8c      	ldr	r3, [pc, #560]	; (8110 <loop+0x105c>)
    7ede:	3001      	adds	r0, #1
    7ee0:	781c      	ldrb	r4, [r3, #0]
    7ee2:	b280      	uxth	r0, r0
    7ee4:	f7fa fdb4 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7ee8:	4b8a      	ldr	r3, [pc, #552]	; (8114 <loop+0x1060>)
    7eea:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7eec:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7eee:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7ef0:	f7fa ff6a 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x84].length);
    7ef4:	4b83      	ldr	r3, [pc, #524]	; (8104 <loop+0x1050>)
    7ef6:	f893 4b01 	ldrb.w	r4, [r3, #2817]	; 0xb01
    7efa:	883b      	ldrh	r3, [r7, #0]
    7efc:	441c      	add	r4, r3
    7efe:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7f00:	4622      	mov	r2, r4
				break; // STY - ZeroPage
    7f02:	f7ff bac2 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    7f06:	8838      	ldrh	r0, [r7, #0]
    7f08:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    7f0a:	4b7f      	ldr	r3, [pc, #508]	; (8108 <loop+0x1054>)
    7f0c:	3001      	adds	r0, #1
    7f0e:	781c      	ldrb	r4, [r3, #0]
    7f10:	b280      	uxth	r0, r0
    7f12:	f7fa fd9d 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7f16:	4b7f      	ldr	r3, [pc, #508]	; (8114 <loop+0x1060>)
    7f18:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7f1a:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7f1c:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7f1e:	f7fa ff53 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x85].length);
    7f22:	4b78      	ldr	r3, [pc, #480]	; (8104 <loop+0x1050>)
    7f24:	f893 4b35 	ldrb.w	r4, [r3, #2869]	; 0xb35
    7f28:	883b      	ldrh	r3, [r7, #0]
    7f2a:	441c      	add	r4, r3
    7f2c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7f2e:	4622      	mov	r2, r4
				break; // STA - ZeroPage
    7f30:	f7ff baab 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    7f34:	8838      	ldrh	r0, [r7, #0]
    7f36:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    7f38:	4b74      	ldr	r3, [pc, #464]	; (810c <loop+0x1058>)
    7f3a:	3001      	adds	r0, #1
    7f3c:	781c      	ldrb	r4, [r3, #0]
    7f3e:	b280      	uxth	r0, r0
    7f40:	f7fa fd86 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7f44:	4b73      	ldr	r3, [pc, #460]	; (8114 <loop+0x1060>)
    7f46:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7f48:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7f4a:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7f4c:	f7fa ff3c 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x86].length);
    7f50:	4b6c      	ldr	r3, [pc, #432]	; (8104 <loop+0x1050>)
    7f52:	f893 4b69 	ldrb.w	r4, [r3, #2921]	; 0xb69
    7f56:	883b      	ldrh	r3, [r7, #0]
    7f58:	441c      	add	r4, r3
    7f5a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7f5c:	4622      	mov	r2, r4
				break; // STX - ZeroPage
    7f5e:	f7ff ba94 	b.w	748a <loop+0x3d6>
    Write_ZeroPage(register_a & register_x);
    7f62:	4b69      	ldr	r3, [pc, #420]	; (8108 <loop+0x1054>)
    return read_byte(register_pc+offset, false);
    7f64:	2100      	movs	r1, #0
    7f66:	8838      	ldrh	r0, [r7, #0]
    7f68:	781c      	ldrb	r4, [r3, #0]
    7f6a:	4b68      	ldr	r3, [pc, #416]	; (810c <loop+0x1058>)
    7f6c:	3001      	adds	r0, #1
    7f6e:	781b      	ldrb	r3, [r3, #0]
    7f70:	b280      	uxth	r0, r0
    7f72:	401c      	ands	r4, r3
    7f74:	f7fa fd6c 	bl	2a50 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7f78:	4b66      	ldr	r3, [pc, #408]	; (8114 <loop+0x1060>)
    7f7a:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    7f7c:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    7f7e:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    7f80:	f7fa ff22 	bl	2dc8 <write_byte(unsigned short, unsigned char)>
    return(register_pc + opcode_info[0x87].length);
    7f84:	4b5f      	ldr	r3, [pc, #380]	; (8104 <loop+0x1050>)
    7f86:	f893 4b9d 	ldrb.w	r4, [r3, #2973]	; 0xb9d
    7f8a:	883b      	ldrh	r3, [r7, #0]
    7f8c:	441c      	add	r4, r3
    7f8e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7f90:	4622      	mov	r2, r4
				break; // SAX - ZeroPage
    7f92:	f7ff ba7a 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    7f96:	8838      	ldrh	r0, [r7, #0]
    7f98:	2100      	movs	r1, #0
    7f9a:	3001      	adds	r0, #1
    7f9c:	b280      	uxth	r0, r0
    7f9e:	f7fa fd57 	bl	2a50 <read_byte(unsigned short, bool)>
    register_y = register_y - 1;
    7fa2:	4b5b      	ldr	r3, [pc, #364]	; (8110 <loop+0x105c>)
    7fa4:	7818      	ldrb	r0, [r3, #0]
    7fa6:	3801      	subs	r0, #1
    7fa8:	b2c0      	uxtb	r0, r0
    7faa:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    7fac:	f7fb f814 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x88].length);
    7fb0:	4b54      	ldr	r3, [pc, #336]	; (8104 <loop+0x1050>)
    7fb2:	f893 4bd1 	ldrb.w	r4, [r3, #3025]	; 0xbd1
    7fb6:	883b      	ldrh	r3, [r7, #0]
    7fb8:	441c      	add	r4, r3
    7fba:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7fbc:	4622      	mov	r2, r4
				break; // DEY
    7fbe:	f7ff ba64 	b.w	748a <loop+0x3d6>
    Fetch_Immediate(1);
    7fc2:	2001      	movs	r0, #1
    7fc4:	f7fb f81c 	bl	3000 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    7fc8:	4b4e      	ldr	r3, [pc, #312]	; (8104 <loop+0x1050>)
    7fca:	f893 4c05 	ldrb.w	r4, [r3, #3077]	; 0xc05
    7fce:	883b      	ldrh	r3, [r7, #0]
    7fd0:	441c      	add	r4, r3
    7fd2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7fd4:	4622      	mov	r2, r4
				break; // NOP - Immediate
    7fd6:	f7ff ba58 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    7fda:	8838      	ldrh	r0, [r7, #0]
    7fdc:	2100      	movs	r1, #0
    7fde:	3001      	adds	r0, #1
    7fe0:	b280      	uxth	r0, r0
    7fe2:	f7fa fd35 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_x;
    7fe6:	4b49      	ldr	r3, [pc, #292]	; (810c <loop+0x1058>)
    7fe8:	7818      	ldrb	r0, [r3, #0]
    7fea:	4b47      	ldr	r3, [pc, #284]	; (8108 <loop+0x1054>)
    7fec:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7fee:	f7fa fff3 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x8A].length);
    7ff2:	4b44      	ldr	r3, [pc, #272]	; (8104 <loop+0x1050>)
    7ff4:	f893 4c39 	ldrb.w	r4, [r3, #3129]	; 0xc39
    7ff8:	883b      	ldrh	r3, [r7, #0]
    7ffa:	441c      	add	r4, r3
    7ffc:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    7ffe:	4622      	mov	r2, r4
				break; // TXA
    8000:	f7ff ba43 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    8004:	2001      	movs	r0, #1
    8006:	f7fa fffb 	bl	3000 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    800a:	4b3e      	ldr	r3, [pc, #248]	; (8104 <loop+0x1050>)
    800c:	f893 4c6d 	ldrb.w	r4, [r3, #3181]	; 0xc6d
    8010:	883b      	ldrh	r3, [r7, #0]
    8012:	441c      	add	r4, r3
    8014:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8016:	4622      	mov	r2, r4
				break; // ANE - Immediate
    8018:	f7ff ba37 	b.w	748a <loop+0x3d6>
    Write_Absolute(register_y);
    801c:	4b3c      	ldr	r3, [pc, #240]	; (8110 <loop+0x105c>)
    801e:	7818      	ldrb	r0, [r3, #0]
    8020:	f7fb f928 	bl	3274 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8C].length);
    8024:	4b37      	ldr	r3, [pc, #220]	; (8104 <loop+0x1050>)
    8026:	f893 4ca1 	ldrb.w	r4, [r3, #3233]	; 0xca1
    802a:	883b      	ldrh	r3, [r7, #0]
    802c:	441c      	add	r4, r3
    802e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8030:	4622      	mov	r2, r4
				break; // STY - Absolute
    8032:	f7ff ba2a 	b.w	748a <loop+0x3d6>
    Write_Absolute(register_a);
    8036:	4b34      	ldr	r3, [pc, #208]	; (8108 <loop+0x1054>)
    8038:	7818      	ldrb	r0, [r3, #0]
    803a:	f7fb f91b 	bl	3274 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8D].length);
    803e:	4b31      	ldr	r3, [pc, #196]	; (8104 <loop+0x1050>)
    8040:	f893 4cd5 	ldrb.w	r4, [r3, #3285]	; 0xcd5
    8044:	883b      	ldrh	r3, [r7, #0]
    8046:	441c      	add	r4, r3
    8048:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    804a:	4622      	mov	r2, r4
				break; // STA - Absolute
    804c:	f7ff ba1d 	b.w	748a <loop+0x3d6>
    Write_Absolute(register_x);
    8050:	4b2e      	ldr	r3, [pc, #184]	; (810c <loop+0x1058>)
    8052:	7818      	ldrb	r0, [r3, #0]
    8054:	f7fb f90e 	bl	3274 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8E].length);
    8058:	4b2a      	ldr	r3, [pc, #168]	; (8104 <loop+0x1050>)
    805a:	f893 4d09 	ldrb.w	r4, [r3, #3337]	; 0xd09
    805e:	883b      	ldrh	r3, [r7, #0]
    8060:	441c      	add	r4, r3
    8062:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8064:	4622      	mov	r2, r4
				break; // STX - Absolute
    8066:	f7ff ba10 	b.w	748a <loop+0x3d6>
    Write_Absolute(register_a & register_x);
    806a:	4b27      	ldr	r3, [pc, #156]	; (8108 <loop+0x1054>)
    806c:	7818      	ldrb	r0, [r3, #0]
    806e:	4b27      	ldr	r3, [pc, #156]	; (810c <loop+0x1058>)
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	4018      	ands	r0, r3
    8074:	f7fb f8fe 	bl	3274 <Write_Absolute(unsigned char)>
    return(register_pc + opcode_info[0x8F].length);
    8078:	4b22      	ldr	r3, [pc, #136]	; (8104 <loop+0x1050>)
    807a:	f893 4d3d 	ldrb.w	r4, [r3, #3389]	; 0xd3d
    807e:	883b      	ldrh	r3, [r7, #0]
    8080:	441c      	add	r4, r3
    8082:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8084:	4622      	mov	r2, r4
				break; // SAX - Absolute
    8086:	f7ff ba00 	b.w	748a <loop+0x3d6>
    if ((flag_c) == 0) Branch_Taken();
    808a:	4b23      	ldr	r3, [pc, #140]	; (8118 <loop+0x1064>)
    808c:	781b      	ldrb	r3, [r3, #0]
    808e:	07db      	lsls	r3, r3, #31
    8090:	f100 854f 	bmi.w	8b32 <loop+0x1a7e>
    8094:	f7fc fd10 	bl	4ab8 <Branch_Taken()>
    return(register_pc);
    8098:	883c      	ldrh	r4, [r7, #0]
        sprintf(buf, "%04X", next_pc);
    809a:	4622      	mov	r2, r4
				break; // BCC - Branch on Carry Clear
    809c:	f7ff b9f5 	b.w	748a <loop+0x3d6>
    Write_Indexed_Indirect_Y(register_a);
    80a0:	4b19      	ldr	r3, [pc, #100]	; (8108 <loop+0x1054>)
    80a2:	7818      	ldrb	r0, [r3, #0]
    80a4:	f7fb f9c8 	bl	3438 <Write_Indexed_Indirect_Y(unsigned char)>
    return(register_pc + opcode_info[0x91].length);
    80a8:	4b16      	ldr	r3, [pc, #88]	; (8104 <loop+0x1050>)
    80aa:	f893 4da5 	ldrb.w	r4, [r3, #3493]	; 0xda5
    80ae:	883b      	ldrh	r3, [r7, #0]
    80b0:	441c      	add	r4, r3
    80b2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    80b4:	4622      	mov	r2, r4
				break; // STA - Indirect Indexed  Y
    80b6:	f7ff b9e8 	b.w	748a <loop+0x3d6>
    Fetch_ZeroPage_Y();
    80ba:	f7fa ffe1 	bl	3080 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    80be:	4b11      	ldr	r3, [pc, #68]	; (8104 <loop+0x1050>)
    80c0:	f893 4e0d 	ldrb.w	r4, [r3, #3597]	; 0xe0d
    80c4:	883b      	ldrh	r3, [r7, #0]
    80c6:	441c      	add	r4, r3
    80c8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    80ca:	4622      	mov	r2, r4
				break; // SHA - ZeroPage , Y
    80cc:	f7ff b9dd 	b.w	748a <loop+0x3d6>
    Write_ZeroPage_X(register_y);
    80d0:	4b0f      	ldr	r3, [pc, #60]	; (8110 <loop+0x105c>)
    80d2:	7818      	ldrb	r0, [r3, #0]
    80d4:	f7fb f8ec 	bl	32b0 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x94].length);
    80d8:	4b0a      	ldr	r3, [pc, #40]	; (8104 <loop+0x1050>)
    80da:	f893 4e41 	ldrb.w	r4, [r3, #3649]	; 0xe41
    80de:	883b      	ldrh	r3, [r7, #0]
    80e0:	441c      	add	r4, r3
    80e2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    80e4:	4622      	mov	r2, r4
				break; // STY - ZeroPage , X
    80e6:	f7ff b9d0 	b.w	748a <loop+0x3d6>
    Write_ZeroPage_X(register_a);
    80ea:	4b07      	ldr	r3, [pc, #28]	; (8108 <loop+0x1054>)
    80ec:	7818      	ldrb	r0, [r3, #0]
    80ee:	f7fb f8df 	bl	32b0 <Write_ZeroPage_X(unsigned char)>
    return(register_pc + opcode_info[0x95].length);
    80f2:	4b04      	ldr	r3, [pc, #16]	; (8104 <loop+0x1050>)
    80f4:	f893 4e75 	ldrb.w	r4, [r3, #3701]	; 0xe75
    80f8:	883b      	ldrh	r3, [r7, #0]
    80fa:	441c      	add	r4, r3
    80fc:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    80fe:	4622      	mov	r2, r4
				break; // STA - ZeroPage , X
    8100:	f7ff b9c3 	b.w	748a <loop+0x3d6>
    8104:	20016418 	.word	0x20016418
    8108:	200188a8 	.word	0x200188a8
    810c:	200188a9 	.word	0x200188a9
    8110:	200188aa 	.word	0x200188aa
    8114:	2001888a 	.word	0x2001888a
    8118:	20004a08 	.word	0x20004a08
    Write_ZeroPage_Y(register_x);
    811c:	4bbc      	ldr	r3, [pc, #752]	; (8410 <loop+0x135c>)
    811e:	7818      	ldrb	r0, [r3, #0]
    8120:	f7fb f8e4 	bl	32ec <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x96].length);
    8124:	4bbb      	ldr	r3, [pc, #748]	; (8414 <loop+0x1360>)
    8126:	f893 4ea9 	ldrb.w	r4, [r3, #3753]	; 0xea9
    812a:	883b      	ldrh	r3, [r7, #0]
    812c:	441c      	add	r4, r3
    812e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8130:	4622      	mov	r2, r4
				break; // STX - ZeroPage , Y
    8132:	f7ff b9aa 	b.w	748a <loop+0x3d6>
    Write_ZeroPage_Y(register_a & register_x);
    8136:	4bb8      	ldr	r3, [pc, #736]	; (8418 <loop+0x1364>)
    8138:	7818      	ldrb	r0, [r3, #0]
    813a:	4bb5      	ldr	r3, [pc, #724]	; (8410 <loop+0x135c>)
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	4018      	ands	r0, r3
    8140:	f7fb f8d4 	bl	32ec <Write_ZeroPage_Y(unsigned char)>
    return(register_pc + opcode_info[0x97].length);
    8144:	4bb3      	ldr	r3, [pc, #716]	; (8414 <loop+0x1360>)
    8146:	f893 4edd 	ldrb.w	r4, [r3, #3805]	; 0xedd
    814a:	883b      	ldrh	r3, [r7, #0]
    814c:	441c      	add	r4, r3
    814e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8150:	4622      	mov	r2, r4
				break; // SAX - ZeroPage , Y
    8152:	f7ff b99a 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8156:	8838      	ldrh	r0, [r7, #0]
    8158:	2100      	movs	r1, #0
    815a:	3001      	adds	r0, #1
    815c:	b280      	uxth	r0, r0
    815e:	f7fa fc77 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = register_y;
    8162:	4bae      	ldr	r3, [pc, #696]	; (841c <loop+0x1368>)
    8164:	7818      	ldrb	r0, [r3, #0]
    8166:	4bac      	ldr	r3, [pc, #688]	; (8418 <loop+0x1364>)
    8168:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    816a:	f7fa ff35 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x98].length);
    816e:	4ba9      	ldr	r3, [pc, #676]	; (8414 <loop+0x1360>)
    8170:	f893 4f11 	ldrb.w	r4, [r3, #3857]	; 0xf11
    8174:	883b      	ldrh	r3, [r7, #0]
    8176:	441c      	add	r4, r3
    8178:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    817a:	4622      	mov	r2, r4
				break; // TYA
    817c:	f7ff b985 	b.w	748a <loop+0x3d6>
    Write_Absolute_Y(register_a);
    8180:	4ba5      	ldr	r3, [pc, #660]	; (8418 <loop+0x1364>)
    8182:	7818      	ldrb	r0, [r3, #0]
    8184:	f7fb f8f6 	bl	3374 <Write_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x99].length);
    8188:	4ba2      	ldr	r3, [pc, #648]	; (8414 <loop+0x1360>)
    818a:	f893 4f45 	ldrb.w	r4, [r3, #3909]	; 0xf45
    818e:	883b      	ldrh	r3, [r7, #0]
    8190:	441c      	add	r4, r3
    8192:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8194:	4622      	mov	r2, r4
				break; // STA - Absolute , Y
    8196:	f7ff b978 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    819a:	8838      	ldrh	r0, [r7, #0]
    819c:	2100      	movs	r1, #0
    819e:	3001      	adds	r0, #1
    81a0:	b280      	uxth	r0, r0
    81a2:	f7fa fc55 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0x9A].length);
    81a6:	4b9b      	ldr	r3, [pc, #620]	; (8414 <loop+0x1360>)
    81a8:	f893 4f79 	ldrb.w	r4, [r3, #3961]	; 0xf79
    81ac:	883b      	ldrh	r3, [r7, #0]
    81ae:	441c      	add	r4, r3
    register_sp = register_x;
    81b0:	4b97      	ldr	r3, [pc, #604]	; (8410 <loop+0x135c>)
    return(register_pc + opcode_info[0x9A].length);
    81b2:	b2a4      	uxth	r4, r4
    register_sp = register_x;
    81b4:	781a      	ldrb	r2, [r3, #0]
    81b6:	4b9a      	ldr	r3, [pc, #616]	; (8420 <loop+0x136c>)
    81b8:	701a      	strb	r2, [r3, #0]
        sprintf(buf, "%04X", next_pc);
    81ba:	4622      	mov	r2, r4
				break; // TXS
    81bc:	f7ff b965 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_Y(0);
    81c0:	2000      	movs	r0, #0
    81c2:	f7fa ffc9 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    81c6:	4b93      	ldr	r3, [pc, #588]	; (8414 <loop+0x1360>)
    81c8:	f893 4fad 	ldrb.w	r4, [r3, #4013]	; 0xfad
    81cc:	883b      	ldrh	r3, [r7, #0]
    81ce:	441c      	add	r4, r3
    81d0:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    81d2:	4622      	mov	r2, r4
				break; // TAS - Absolute , Y 
    81d4:	f7ff b959 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_X(0);
    81d8:	2000      	movs	r0, #0
    81da:	f7fa ff8d 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    81de:	4b8d      	ldr	r3, [pc, #564]	; (8414 <loop+0x1360>)
    81e0:	f893 4fe1 	ldrb.w	r4, [r3, #4065]	; 0xfe1
    81e4:	883b      	ldrh	r3, [r7, #0]
    81e6:	441c      	add	r4, r3
    81e8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    81ea:	4622      	mov	r2, r4
				break; // SHY - Absolute , X
    81ec:	f7ff b94d 	b.w	748a <loop+0x3d6>
    Write_Absolute_X(register_a);
    81f0:	4b89      	ldr	r3, [pc, #548]	; (8418 <loop+0x1364>)
    81f2:	7818      	ldrb	r0, [r3, #0]
    81f4:	f7fb f898 	bl	3328 <Write_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9D].length);
    81f8:	4b8a      	ldr	r3, [pc, #552]	; (8424 <loop+0x1370>)
    81fa:	7d5c      	ldrb	r4, [r3, #21]
    81fc:	883b      	ldrh	r3, [r7, #0]
    81fe:	441c      	add	r4, r3
    8200:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8202:	4622      	mov	r2, r4
				break; // STA - Absolute , X
    8204:	f7ff b941 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_Y(0);
    8208:	2000      	movs	r0, #0
    820a:	f7fa ffa5 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    820e:	4b85      	ldr	r3, [pc, #532]	; (8424 <loop+0x1370>)
    8210:	f893 4049 	ldrb.w	r4, [r3, #73]	; 0x49
    8214:	883b      	ldrh	r3, [r7, #0]
    8216:	441c      	add	r4, r3
    8218:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    821a:	4622      	mov	r2, r4
				break; // SHX - Absolute , Y
    821c:	f7ff b935 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_Y(0);
    8220:	2000      	movs	r0, #0
    8222:	f7fa ff99 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    8226:	4b7f      	ldr	r3, [pc, #508]	; (8424 <loop+0x1370>)
    8228:	f893 407d 	ldrb.w	r4, [r3, #125]	; 0x7d
    822c:	883b      	ldrh	r3, [r7, #0]
    822e:	441c      	add	r4, r3
    8230:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8232:	4622      	mov	r2, r4
				break; // SHA - Absolute , Y
    8234:	f7ff b929 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    8238:	8838      	ldrh	r0, [r7, #0]
    823a:	2100      	movs	r1, #0
    823c:	3001      	adds	r0, #1
    823e:	b280      	uxth	r0, r0
    8240:	f7fa fc06 	bl	2a50 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    8244:	4b75      	ldr	r3, [pc, #468]	; (841c <loop+0x1368>)
    8246:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8248:	f7fa fec6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA0].length);
    824c:	4b75      	ldr	r3, [pc, #468]	; (8424 <loop+0x1370>)
    824e:	f893 40b1 	ldrb.w	r4, [r3, #177]	; 0xb1
    8252:	883b      	ldrh	r3, [r7, #0]
    8254:	441c      	add	r4, r3
    8256:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8258:	4622      	mov	r2, r4
				break; // LDY - Immediate
    825a:	f7ff b916 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Indexed_Indirect_X();
    825e:	f7fa ffab 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    8262:	4b6d      	ldr	r3, [pc, #436]	; (8418 <loop+0x1364>)
    8264:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8266:	f7fa feb7 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA1].length);
    826a:	4b6e      	ldr	r3, [pc, #440]	; (8424 <loop+0x1370>)
    826c:	f893 40e5 	ldrb.w	r4, [r3, #229]	; 0xe5
    8270:	883b      	ldrh	r3, [r7, #0]
    8272:	441c      	add	r4, r3
    8274:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8276:	4622      	mov	r2, r4
				break; // LDA - Indexed Indirect X
    8278:	f7ff b907 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    827c:	8838      	ldrh	r0, [r7, #0]
    827e:	2100      	movs	r1, #0
    8280:	3001      	adds	r0, #1
    8282:	b280      	uxth	r0, r0
    8284:	f7fa fbe4 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    8288:	4b61      	ldr	r3, [pc, #388]	; (8410 <loop+0x135c>)
    828a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    828c:	f7fa fea4 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA2].length);
    8290:	4b64      	ldr	r3, [pc, #400]	; (8424 <loop+0x1370>)
    8292:	f893 4119 	ldrb.w	r4, [r3, #281]	; 0x119
    8296:	883b      	ldrh	r3, [r7, #0]
    8298:	441c      	add	r4, r3
    829a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    829c:	4622      	mov	r2, r4
				break; // LDX - Immediate
    829e:	f7ff b8f4 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Indexed_Indirect_X();
    82a2:	f7fa ff89 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    82a6:	4a5c      	ldr	r2, [pc, #368]	; (8418 <loop+0x1364>)
    82a8:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    82aa:	4a59      	ldr	r2, [pc, #356]	; (8410 <loop+0x135c>)
    82ac:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82ae:	f7fa fe93 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA3].length);
    82b2:	4b5c      	ldr	r3, [pc, #368]	; (8424 <loop+0x1370>)
    82b4:	f893 414d 	ldrb.w	r4, [r3, #333]	; 0x14d
    82b8:	883b      	ldrh	r3, [r7, #0]
    82ba:	441c      	add	r4, r3
    82bc:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    82be:	4622      	mov	r2, r4
				break; // LAX - Indexed Indirect X
    82c0:	f7ff b8e3 	b.w	748a <loop+0x3d6>
    register_y = Fetch_ZeroPage();
    82c4:	f7fa fea8 	bl	3018 <Fetch_ZeroPage()>
    82c8:	4b54      	ldr	r3, [pc, #336]	; (841c <loop+0x1368>)
    82ca:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    82cc:	f7fa fe84 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA4].length);
    82d0:	4b54      	ldr	r3, [pc, #336]	; (8424 <loop+0x1370>)
    82d2:	f893 4181 	ldrb.w	r4, [r3, #385]	; 0x181
    82d6:	883b      	ldrh	r3, [r7, #0]
    82d8:	441c      	add	r4, r3
    82da:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    82dc:	4622      	mov	r2, r4
				break; // LDY - ZeroPage
    82de:	f7ff b8d4 	b.w	748a <loop+0x3d6>
    register_a = Fetch_ZeroPage();
    82e2:	f7fa fe99 	bl	3018 <Fetch_ZeroPage()>
    82e6:	4b4c      	ldr	r3, [pc, #304]	; (8418 <loop+0x1364>)
    82e8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    82ea:	f7fa fe75 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA5].length);
    82ee:	4b4d      	ldr	r3, [pc, #308]	; (8424 <loop+0x1370>)
    82f0:	f893 41b5 	ldrb.w	r4, [r3, #437]	; 0x1b5
    82f4:	883b      	ldrh	r3, [r7, #0]
    82f6:	441c      	add	r4, r3
    82f8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    82fa:	4622      	mov	r2, r4
				break; // LDA - ZeroPage
    82fc:	f7ff b8c5 	b.w	748a <loop+0x3d6>
    register_x = Fetch_ZeroPage();
    8300:	f7fa fe8a 	bl	3018 <Fetch_ZeroPage()>
    8304:	4b42      	ldr	r3, [pc, #264]	; (8410 <loop+0x135c>)
    8306:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8308:	f7fa fe66 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA6].length);
    830c:	4b45      	ldr	r3, [pc, #276]	; (8424 <loop+0x1370>)
    830e:	f893 41e9 	ldrb.w	r4, [r3, #489]	; 0x1e9
    8312:	883b      	ldrh	r3, [r7, #0]
    8314:	441c      	add	r4, r3
    8316:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8318:	4622      	mov	r2, r4
				break; // LDX - ZeroPage
    831a:	f7ff b8b6 	b.w	748a <loop+0x3d6>
    register_a = Fetch_ZeroPage();
    831e:	f7fa fe7b 	bl	3018 <Fetch_ZeroPage()>
    8322:	4a3d      	ldr	r2, [pc, #244]	; (8418 <loop+0x1364>)
    8324:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8326:	4a3a      	ldr	r2, [pc, #232]	; (8410 <loop+0x135c>)
    8328:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    832a:	f7fa fe55 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA7].length);
    832e:	4b3d      	ldr	r3, [pc, #244]	; (8424 <loop+0x1370>)
    8330:	f893 421d 	ldrb.w	r4, [r3, #541]	; 0x21d
    8334:	883b      	ldrh	r3, [r7, #0]
    8336:	441c      	add	r4, r3
    8338:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    833a:	4622      	mov	r2, r4
				break; // LAX - ZeroPage
    833c:	f7ff b8a5 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8340:	8838      	ldrh	r0, [r7, #0]
    8342:	2100      	movs	r1, #0
    8344:	3001      	adds	r0, #1
    8346:	b280      	uxth	r0, r0
    8348:	f7fa fb82 	bl	2a50 <read_byte(unsigned short, bool)>
    register_y = register_a;
    834c:	4b32      	ldr	r3, [pc, #200]	; (8418 <loop+0x1364>)
    834e:	7818      	ldrb	r0, [r3, #0]
    8350:	4b32      	ldr	r3, [pc, #200]	; (841c <loop+0x1368>)
    8352:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8354:	f7fa fe40 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA8].length);
    8358:	4b32      	ldr	r3, [pc, #200]	; (8424 <loop+0x1370>)
    835a:	f893 4251 	ldrb.w	r4, [r3, #593]	; 0x251
    835e:	883b      	ldrh	r3, [r7, #0]
    8360:	441c      	add	r4, r3
    8362:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8364:	4622      	mov	r2, r4
				break; // TAY
    8366:	f7ff b890 	b.w	748a <loop+0x3d6>
    return read_byte(register_pc+offset, false);
    836a:	8838      	ldrh	r0, [r7, #0]
    836c:	2100      	movs	r1, #0
    836e:	3001      	adds	r0, #1
    8370:	b280      	uxth	r0, r0
    8372:	f7fa fb6d 	bl	2a50 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    8376:	4b28      	ldr	r3, [pc, #160]	; (8418 <loop+0x1364>)
    8378:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    837a:	f7fa fe2d 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xA9].length);
    837e:	4b29      	ldr	r3, [pc, #164]	; (8424 <loop+0x1370>)
    8380:	f893 4285 	ldrb.w	r4, [r3, #645]	; 0x285
    8384:	883b      	ldrh	r3, [r7, #0]
    8386:	441c      	add	r4, r3
    8388:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    838a:	4622      	mov	r2, r4
				break; // LDA - Immediate
    838c:	f7ff b87d 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8390:	8838      	ldrh	r0, [r7, #0]
    8392:	2100      	movs	r1, #0
    8394:	3001      	adds	r0, #1
    8396:	b280      	uxth	r0, r0
    8398:	f7fa fb5a 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = register_a;
    839c:	4b1e      	ldr	r3, [pc, #120]	; (8418 <loop+0x1364>)
    839e:	7818      	ldrb	r0, [r3, #0]
    83a0:	4b1b      	ldr	r3, [pc, #108]	; (8410 <loop+0x135c>)
    83a2:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    83a4:	f7fa fe18 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAA].length);
    83a8:	4b1e      	ldr	r3, [pc, #120]	; (8424 <loop+0x1370>)
    83aa:	f893 42b9 	ldrb.w	r4, [r3, #697]	; 0x2b9
    83ae:	883b      	ldrh	r3, [r7, #0]
    83b0:	441c      	add	r4, r3
    83b2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    83b4:	4622      	mov	r2, r4
				break; // TAX
    83b6:	f7ff b868 	b.w	748a <loop+0x3d6>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    83ba:	2001      	movs	r0, #1
    83bc:	f7fa fe20 	bl	3000 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    83c0:	4b18      	ldr	r3, [pc, #96]	; (8424 <loop+0x1370>)
    83c2:	f893 42ed 	ldrb.w	r4, [r3, #749]	; 0x2ed
    83c6:	883b      	ldrh	r3, [r7, #0]
    83c8:	441c      	add	r4, r3
    83ca:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    83cc:	4622      	mov	r2, r4
				break; // LAX - Immediate
    83ce:	f7ff b85c 	b.w	748a <loop+0x3d6>
    register_y = Fetch_Absolute();
    83d2:	f7fa fe75 	bl	30c0 <Fetch_Absolute()>
    83d6:	4b11      	ldr	r3, [pc, #68]	; (841c <loop+0x1368>)
    83d8:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    83da:	f7fa fdfd 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAC].length);
    83de:	4b11      	ldr	r3, [pc, #68]	; (8424 <loop+0x1370>)
    83e0:	f893 4321 	ldrb.w	r4, [r3, #801]	; 0x321
    83e4:	883b      	ldrh	r3, [r7, #0]
    83e6:	441c      	add	r4, r3
    83e8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    83ea:	4622      	mov	r2, r4
				break; // LDY - Absolute
    83ec:	f7ff b84d 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Absolute();
    83f0:	f7fa fe66 	bl	30c0 <Fetch_Absolute()>
    83f4:	4b08      	ldr	r3, [pc, #32]	; (8418 <loop+0x1364>)
    83f6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    83f8:	f7fa fdee 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAD].length);
    83fc:	4b09      	ldr	r3, [pc, #36]	; (8424 <loop+0x1370>)
    83fe:	f893 4355 	ldrb.w	r4, [r3, #853]	; 0x355
    8402:	883b      	ldrh	r3, [r7, #0]
    8404:	441c      	add	r4, r3
    8406:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8408:	4622      	mov	r2, r4
				break; // LDA - Absolute
    840a:	f7ff b83e 	b.w	748a <loop+0x3d6>
    840e:	bf00      	nop
    8410:	200188a9 	.word	0x200188a9
    8414:	20016418 	.word	0x20016418
    8418:	200188a8 	.word	0x200188a8
    841c:	200188aa 	.word	0x200188aa
    8420:	20004a09 	.word	0x20004a09
    8424:	20017418 	.word	0x20017418
    register_x = Fetch_Absolute();
    8428:	f7fa fe4a 	bl	30c0 <Fetch_Absolute()>
    842c:	4bc8      	ldr	r3, [pc, #800]	; (8750 <loop+0x169c>)
    842e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8430:	f7fa fdd2 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAE].length);
    8434:	4bc7      	ldr	r3, [pc, #796]	; (8754 <loop+0x16a0>)
    8436:	f893 4389 	ldrb.w	r4, [r3, #905]	; 0x389
    843a:	883b      	ldrh	r3, [r7, #0]
    843c:	441c      	add	r4, r3
    843e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8440:	4622      	mov	r2, r4
				break; // LDX - Absolute
    8442:	f7ff b822 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Absolute();
    8446:	f7fa fe3b 	bl	30c0 <Fetch_Absolute()>
    844a:	4ac3      	ldr	r2, [pc, #780]	; (8758 <loop+0x16a4>)
    844c:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    844e:	4ac0      	ldr	r2, [pc, #768]	; (8750 <loop+0x169c>)
    8450:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8452:	f7fa fdc1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xAF].length);
    8456:	4bbf      	ldr	r3, [pc, #764]	; (8754 <loop+0x16a0>)
    8458:	f893 43bd 	ldrb.w	r4, [r3, #957]	; 0x3bd
    845c:	883b      	ldrh	r3, [r7, #0]
    845e:	441c      	add	r4, r3
    8460:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8462:	4622      	mov	r2, r4
				break; // LAX - Absolute
    8464:	f7ff b811 	b.w	748a <loop+0x3d6>
    if ((flag_c) == 1) Branch_Taken();
    8468:	4bbc      	ldr	r3, [pc, #752]	; (875c <loop+0x16a8>)
    846a:	7819      	ldrb	r1, [r3, #0]
    846c:	f011 0101 	ands.w	r1, r1, #1
    8470:	f000 836d 	beq.w	8b4e <loop+0x1a9a>
    8474:	f7fc fb20 	bl	4ab8 <Branch_Taken()>
    return(register_pc);
    8478:	883c      	ldrh	r4, [r7, #0]
        sprintf(buf, "%04X", next_pc);
    847a:	4622      	mov	r2, r4
				break; // BCS - Branch on Carry Set
    847c:	f7ff b805 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Indexed_Indirect_Y(1);
    8480:	2001      	movs	r0, #1
    8482:	f7fa fec3 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    8486:	4bb4      	ldr	r3, [pc, #720]	; (8758 <loop+0x16a4>)
    8488:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    848a:	f7fa fda5 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB1].length);
    848e:	4bb1      	ldr	r3, [pc, #708]	; (8754 <loop+0x16a0>)
    8490:	f893 4425 	ldrb.w	r4, [r3, #1061]	; 0x425
    8494:	883b      	ldrh	r3, [r7, #0]
    8496:	441c      	add	r4, r3
    8498:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    849a:	4622      	mov	r2, r4
				break; // LDA - Indirect Indexed  Y
    849c:	f7fe bff5 	b.w	748a <loop+0x3d6>
    register_x = Fetch_ZeroPage_Y();
    84a0:	f7fa fdee 	bl	3080 <Fetch_ZeroPage_Y()>
    84a4:	4baa      	ldr	r3, [pc, #680]	; (8750 <loop+0x169c>)
    84a6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    84a8:	f7fa fd96 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB6].length);
    84ac:	4ba9      	ldr	r3, [pc, #676]	; (8754 <loop+0x16a0>)
    84ae:	f893 4529 	ldrb.w	r4, [r3, #1321]	; 0x529
    84b2:	883b      	ldrh	r3, [r7, #0]
    84b4:	441c      	add	r4, r3
    84b6:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    84b8:	4622      	mov	r2, r4
				break; // LDX - ZeroPage , Y
    84ba:	f7fe bfe6 	b.w	748a <loop+0x3d6>
    register_a = Fetch_ZeroPage_Y();
    84be:	f7fa fddf 	bl	3080 <Fetch_ZeroPage_Y()>
    84c2:	4aa5      	ldr	r2, [pc, #660]	; (8758 <loop+0x16a4>)
    84c4:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    84c6:	4aa2      	ldr	r2, [pc, #648]	; (8750 <loop+0x169c>)
    84c8:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    84ca:	f7fa fd85 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB7].length);
    84ce:	4ba1      	ldr	r3, [pc, #644]	; (8754 <loop+0x16a0>)
    84d0:	f893 455d 	ldrb.w	r4, [r3, #1373]	; 0x55d
    84d4:	883b      	ldrh	r3, [r7, #0]
    84d6:	441c      	add	r4, r3
    84d8:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    84da:	4622      	mov	r2, r4
				break; // LAX - ZeroPage , Y
    84dc:	f7fe bfd5 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    84e0:	8838      	ldrh	r0, [r7, #0]
    84e2:	2100      	movs	r1, #0
    84e4:	3001      	adds	r0, #1
    84e6:	b280      	uxth	r0, r0
    84e8:	f7fa fab2 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xB8].length);
    84ec:	4b99      	ldr	r3, [pc, #612]	; (8754 <loop+0x16a0>)
    register_flags = register_flags & 0xBF;
    84ee:	4a9b      	ldr	r2, [pc, #620]	; (875c <loop+0x16a8>)
    return(register_pc + opcode_info[0xB8].length);
    84f0:	f893 4591 	ldrb.w	r4, [r3, #1425]	; 0x591
    84f4:	883b      	ldrh	r3, [r7, #0]
    84f6:	441c      	add	r4, r3
    register_flags = register_flags & 0xBF;
    84f8:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    84fa:	b2a4      	uxth	r4, r4
    register_flags = register_flags & 0xBF;
    84fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8500:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    8502:	4622      	mov	r2, r4
				break; // CLV
    8504:	f7fe bfc1 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Absolute_Y(1);
    8508:	2001      	movs	r0, #1
    850a:	f7fa fe25 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    850e:	4b92      	ldr	r3, [pc, #584]	; (8758 <loop+0x16a4>)
    8510:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8512:	f7fa fd61 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB9].length);
    8516:	4b8f      	ldr	r3, [pc, #572]	; (8754 <loop+0x16a0>)
    8518:	f893 45c5 	ldrb.w	r4, [r3, #1477]	; 0x5c5
    851c:	883b      	ldrh	r3, [r7, #0]
    851e:	441c      	add	r4, r3
    8520:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8522:	4622      	mov	r2, r4
				break; // LDA - Absolute , Y
    8524:	f7fe bfb1 	b.w	748a <loop+0x3d6>
    register_y = Fetch_ZeroPage_X();
    8528:	f7fa fd8a 	bl	3040 <Fetch_ZeroPage_X()>
    852c:	4b8c      	ldr	r3, [pc, #560]	; (8760 <loop+0x16ac>)
    852e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8530:	f7fa fd52 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB4].length);
    8534:	4b87      	ldr	r3, [pc, #540]	; (8754 <loop+0x16a0>)
    8536:	f893 44c1 	ldrb.w	r4, [r3, #1217]	; 0x4c1
    853a:	883b      	ldrh	r3, [r7, #0]
    853c:	441c      	add	r4, r3
    853e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8540:	4622      	mov	r2, r4
				break; // LDY - ZeroPage , X
    8542:	f7fe bfa2 	b.w	748a <loop+0x3d6>
    register_a = Fetch_ZeroPage_X();
    8546:	f7fa fd7b 	bl	3040 <Fetch_ZeroPage_X()>
    854a:	4b83      	ldr	r3, [pc, #524]	; (8758 <loop+0x16a4>)
    854c:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    854e:	f7fa fd43 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB5].length);
    8552:	4b80      	ldr	r3, [pc, #512]	; (8754 <loop+0x16a0>)
    8554:	f893 44f5 	ldrb.w	r4, [r3, #1269]	; 0x4f5
    8558:	883b      	ldrh	r3, [r7, #0]
    855a:	441c      	add	r4, r3
    855c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    855e:	4622      	mov	r2, r4
				break; // LDA - ZeroPage , X
    8560:	f7fe bf93 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Indexed_Indirect_Y(1);
    8564:	2001      	movs	r0, #1
    8566:	f7fa fe51 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    856a:	4a7b      	ldr	r2, [pc, #492]	; (8758 <loop+0x16a4>)
    856c:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    856e:	4a78      	ldr	r2, [pc, #480]	; (8750 <loop+0x169c>)
    8570:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8572:	f7fa fd31 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xB3].length);
    8576:	4b77      	ldr	r3, [pc, #476]	; (8754 <loop+0x16a0>)
    8578:	f893 448d 	ldrb.w	r4, [r3, #1165]	; 0x48d
    857c:	883b      	ldrh	r3, [r7, #0]
    857e:	441c      	add	r4, r3
    8580:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8582:	4622      	mov	r2, r4
				break; // LAX - Indirect Indexed  Y
    8584:	f7fe bf81 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8588:	8838      	ldrh	r0, [r7, #0]
    858a:	2100      	movs	r1, #0
    858c:	3001      	adds	r0, #1
    858e:	b280      	uxth	r0, r0
    8590:	f7fa fa5e 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = register_sp;
    8594:	4b73      	ldr	r3, [pc, #460]	; (8764 <loop+0x16b0>)
    8596:	7818      	ldrb	r0, [r3, #0]
    8598:	4b6d      	ldr	r3, [pc, #436]	; (8750 <loop+0x169c>)
    859a:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    859c:	f7fa fd1c 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBA].length);
    85a0:	4b6c      	ldr	r3, [pc, #432]	; (8754 <loop+0x16a0>)
    85a2:	f893 45f9 	ldrb.w	r4, [r3, #1529]	; 0x5f9
    85a6:	883b      	ldrh	r3, [r7, #0]
    85a8:	441c      	add	r4, r3
    85aa:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    85ac:	4622      	mov	r2, r4
				break; // TSX
    85ae:	f7fe bf6c 	b.w	748a <loop+0x3d6>
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    85b2:	2001      	movs	r0, #1
    85b4:	f7fa fdd0 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    85b8:	4b6a      	ldr	r3, [pc, #424]	; (8764 <loop+0x16b0>)
    register_x = register_sp;
    85ba:	4a65      	ldr	r2, [pc, #404]	; (8750 <loop+0x169c>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    85bc:	781c      	ldrb	r4, [r3, #0]
    register_a = register_sp;
    85be:	4966      	ldr	r1, [pc, #408]	; (8758 <loop+0x16a4>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    85c0:	4020      	ands	r0, r4
    85c2:	7018      	strb	r0, [r3, #0]
    register_x = register_sp;
    85c4:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    85c6:	7008      	strb	r0, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    85c8:	f7fa fd06 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBB].length);
    85cc:	4b61      	ldr	r3, [pc, #388]	; (8754 <loop+0x16a0>)
    85ce:	f893 462d 	ldrb.w	r4, [r3, #1581]	; 0x62d
    85d2:	883b      	ldrh	r3, [r7, #0]
    85d4:	441c      	add	r4, r3
    85d6:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    85d8:	4622      	mov	r2, r4
				break; // LAS - Absolute , Y
    85da:	f7fe bf56 	b.w	748a <loop+0x3d6>
    register_y = Fetch_Absolute_X(1);
    85de:	2001      	movs	r0, #1
    85e0:	f7fa fd8a 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    85e4:	4b5e      	ldr	r3, [pc, #376]	; (8760 <loop+0x16ac>)
    85e6:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    85e8:	f7fa fcf6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBC].length);
    85ec:	4b59      	ldr	r3, [pc, #356]	; (8754 <loop+0x16a0>)
    85ee:	f893 4661 	ldrb.w	r4, [r3, #1633]	; 0x661
    85f2:	883b      	ldrh	r3, [r7, #0]
    85f4:	441c      	add	r4, r3
    85f6:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    85f8:	4622      	mov	r2, r4
				break; // LDY - Absolute , X
    85fa:	f7fe bf46 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Absolute_X(1);
    85fe:	2001      	movs	r0, #1
    8600:	f7fa fd7a 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    8604:	4b54      	ldr	r3, [pc, #336]	; (8758 <loop+0x16a4>)
    8606:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    8608:	f7fa fce6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBD].length);
    860c:	4b51      	ldr	r3, [pc, #324]	; (8754 <loop+0x16a0>)
    860e:	f893 4695 	ldrb.w	r4, [r3, #1685]	; 0x695
    8612:	883b      	ldrh	r3, [r7, #0]
    8614:	441c      	add	r4, r3
    8616:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8618:	4622      	mov	r2, r4
				break; // LDA - Absolute , X
    861a:	f7fe bf36 	b.w	748a <loop+0x3d6>
    register_x = Fetch_Absolute_Y(1);
    861e:	2001      	movs	r0, #1
    8620:	f7fa fd9a 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    8624:	4b4a      	ldr	r3, [pc, #296]	; (8750 <loop+0x169c>)
    8626:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8628:	f7fa fcd6 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBE].length);
    862c:	4b49      	ldr	r3, [pc, #292]	; (8754 <loop+0x16a0>)
    862e:	f893 46c9 	ldrb.w	r4, [r3, #1737]	; 0x6c9
    8632:	883b      	ldrh	r3, [r7, #0]
    8634:	441c      	add	r4, r3
    8636:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8638:	4622      	mov	r2, r4
				break; // LDX - Absolute , Y
    863a:	f7fe bf26 	b.w	748a <loop+0x3d6>
    register_a = Fetch_Absolute_Y(1);
    863e:	2001      	movs	r0, #1
    8640:	f7fa fd8a 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    8644:	4a44      	ldr	r2, [pc, #272]	; (8758 <loop+0x16a4>)
    8646:	7010      	strb	r0, [r2, #0]
    register_x = register_a;
    8648:	4a41      	ldr	r2, [pc, #260]	; (8750 <loop+0x169c>)
    864a:	7010      	strb	r0, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    864c:	f7fa fcc4 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xBF].length);
    8650:	4b40      	ldr	r3, [pc, #256]	; (8754 <loop+0x16a0>)
    8652:	f893 46fd 	ldrb.w	r4, [r3, #1789]	; 0x6fd
    8656:	883b      	ldrh	r3, [r7, #0]
    8658:	441c      	add	r4, r3
    865a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    865c:	4622      	mov	r2, r4
				break; // LAX - Absolute , Y
    865e:	f7fe bf14 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC0();
    8662:	f7fb fd81 	bl	4168 <opcode_0xC0()>
    8666:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8668:	4602      	mov	r2, r0
				break; // CPY - Immediate
    866a:	f7fe bf0e 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    866e:	f7fa fda3 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    8672:	f7fb fcc1 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC1].length);
    8676:	4b37      	ldr	r3, [pc, #220]	; (8754 <loop+0x16a0>)
    8678:	f893 4765 	ldrb.w	r4, [r3, #1893]	; 0x765
    867c:	883b      	ldrh	r3, [r7, #0]
    867e:	441c      	add	r4, r3
    8680:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8682:	4622      	mov	r2, r4
				break; // CMP - Indexed Indirect X
    8684:	f7fe bf01 	b.w	748a <loop+0x3d6>
    Fetch_Immediate(1);
    8688:	2001      	movs	r0, #1
    868a:	f7fa fcb9 	bl	3000 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    868e:	4b31      	ldr	r3, [pc, #196]	; (8754 <loop+0x16a0>)
    8690:	f893 4799 	ldrb.w	r4, [r3, #1945]	; 0x799
    8694:	883b      	ldrh	r3, [r7, #0]
    8696:	441c      	add	r4, r3
    8698:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    869a:	4622      	mov	r2, r4
				break; // NOP - Immediate
    869c:	f7fe bef5 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC3();
    86a0:	f7fd fd3e 	bl	6120 <opcode_0xC3()>
    86a4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    86a6:	4602      	mov	r2, r0
				break; // DCP - Indexed Indirect X
    86a8:	f7fe beef 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC4();
    86ac:	f7fb fd84 	bl	41b8 <opcode_0xC4()>
    86b0:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    86b2:	4602      	mov	r2, r0
				break; // CPY - ZeroPage
    86b4:	f7fe bee9 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_ZeroPage());
    86b8:	f7fa fcae 	bl	3018 <Fetch_ZeroPage()>
    86bc:	f7fb fc9c 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xC5].length);
    86c0:	4b24      	ldr	r3, [pc, #144]	; (8754 <loop+0x16a0>)
    86c2:	f893 4835 	ldrb.w	r4, [r3, #2101]	; 0x835
    86c6:	883b      	ldrh	r3, [r7, #0]
    86c8:	441c      	add	r4, r3
    86ca:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    86cc:	4622      	mov	r2, r4
				break; // CMP - ZeroPage
    86ce:	f7fe bedc 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC6();
    86d2:	f7fb fefd 	bl	44d0 <opcode_0xC6()>
    86d6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    86d8:	4602      	mov	r2, r0
				break; // DEC - ZeroPage
    86da:	f7fe bed6 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC7();
    86de:	f7fd fca5 	bl	602c <opcode_0xC7()>
    86e2:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    86e4:	4602      	mov	r2, r0
				break; // DCP - ZeroPage
    86e6:	f7fe bed0 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    86ea:	8838      	ldrh	r0, [r7, #0]
    86ec:	2100      	movs	r1, #0
    86ee:	3001      	adds	r0, #1
    86f0:	b280      	uxth	r0, r0
    86f2:	f7fa f9ad 	bl	2a50 <read_byte(unsigned short, bool)>
    register_y = register_y + 1;
    86f6:	4b1a      	ldr	r3, [pc, #104]	; (8760 <loop+0x16ac>)
    86f8:	7818      	ldrb	r0, [r3, #0]
    86fa:	3001      	adds	r0, #1
    86fc:	b2c0      	uxtb	r0, r0
    86fe:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    8700:	f7fa fc6a 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC8].length);
    8704:	4b13      	ldr	r3, [pc, #76]	; (8754 <loop+0x16a0>)
    8706:	f893 48d1 	ldrb.w	r4, [r3, #2257]	; 0x8d1
    870a:	883b      	ldrh	r3, [r7, #0]
    870c:	441c      	add	r4, r3
    870e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8710:	4622      	mov	r2, r4
				break; // INY
    8712:	f7fe beba 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xC9();
    8716:	f7fb fc83 	bl	4020 <opcode_0xC9()>
    871a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    871c:	4602      	mov	r2, r0
				break; // CMP - Immediate
    871e:	f7fe beb4 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8722:	8838      	ldrh	r0, [r7, #0]
    8724:	2100      	movs	r1, #0
    8726:	3001      	adds	r0, #1
    8728:	b280      	uxth	r0, r0
    872a:	f7fa f991 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = register_x - 1;
    872e:	4b08      	ldr	r3, [pc, #32]	; (8750 <loop+0x169c>)
    8730:	7818      	ldrb	r0, [r3, #0]
    8732:	3801      	subs	r0, #1
    8734:	b2c0      	uxtb	r0, r0
    8736:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8738:	f7fa fc4e 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xCA].length);
    873c:	4b05      	ldr	r3, [pc, #20]	; (8754 <loop+0x16a0>)
    873e:	f893 4939 	ldrb.w	r4, [r3, #2361]	; 0x939
    8742:	883b      	ldrh	r3, [r7, #0]
    8744:	441c      	add	r4, r3
    8746:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8748:	4622      	mov	r2, r4
				break; // DEX
    874a:	f7fe be9e 	b.w	748a <loop+0x3d6>
    874e:	bf00      	nop
    8750:	200188a9 	.word	0x200188a9
    8754:	20017418 	.word	0x20017418
    8758:	200188a8 	.word	0x200188a8
    875c:	20004a08 	.word	0x20004a08
    8760:	200188aa 	.word	0x200188aa
    8764:	20004a09 	.word	0x20004a09
				next_pc = opcode_0xCB();
    8768:	f7fd ffb0 	bl	66cc <opcode_0xCB()>
    876c:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    876e:	4602      	mov	r2, r0
				break; // SBX - Immediate
    8770:	f7fe be8b 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xCC();
    8774:	f7fb fd50 	bl	4218 <opcode_0xCC()>
    8778:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    877a:	4602      	mov	r2, r0
				break; // CPY - Absolute
    877c:	f7fe be85 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_Absolute());
    8780:	f7fa fc9e 	bl	30c0 <Fetch_Absolute()>
    8784:	f7fb fc38 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xCD].length);
    8788:	4bd4      	ldr	r3, [pc, #848]	; (8adc <loop+0x1a28>)
    878a:	f893 49d5 	ldrb.w	r4, [r3, #2517]	; 0x9d5
    878e:	883b      	ldrh	r3, [r7, #0]
    8790:	441c      	add	r4, r3
    8792:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8794:	4622      	mov	r2, r4
				break; // CMP - Absolute
    8796:	f7fe be78 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xCE();
    879a:	f7fb fee9 	bl	4570 <opcode_0xCE()>
    879e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    87a0:	4602      	mov	r2, r0
				break; // DEC - Absolute
    87a2:	f7fe be72 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xCF();
    87a6:	f7fd fd2d 	bl	6204 <opcode_0xCF()>
    87aa:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    87ac:	4602      	mov	r2, r0
				break; // DCP - Absolute
    87ae:	f7fe be6c 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xD0();
    87b2:	f7fc fa61 	bl	4c78 <opcode_0xD0()>
    87b6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    87b8:	4602      	mov	r2, r0
				break; // BNE - Branch on Zero Clear
    87ba:	f7fe be66 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    87be:	2001      	movs	r0, #1
    87c0:	f7fa fd24 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    87c4:	f7fb fc18 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD1].length);
    87c8:	4bc4      	ldr	r3, [pc, #784]	; (8adc <loop+0x1a28>)
    87ca:	f893 4aa5 	ldrb.w	r4, [r3, #2725]	; 0xaa5
    87ce:	883b      	ldrh	r3, [r7, #0]
    87d0:	441c      	add	r4, r3
    87d2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    87d4:	4622      	mov	r2, r4
				break; // CMP - Indirect Indexed  Y
    87d6:	f7fe be58 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xD3();
    87da:	f7fd fcd9 	bl	6190 <opcode_0xD3()>
    87de:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    87e0:	4602      	mov	r2, r0
				break; // DCP - Indirect Indexed  Y
    87e2:	f7fe be52 	b.w	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    87e6:	f7fa fc2b 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    87ea:	4bbc      	ldr	r3, [pc, #752]	; (8adc <loop+0x1a28>)
    87ec:	f893 4b41 	ldrb.w	r4, [r3, #2881]	; 0xb41
    87f0:	883b      	ldrh	r3, [r7, #0]
    87f2:	441c      	add	r4, r3
    87f4:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    87f6:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    87f8:	f7fe be47 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_ZeroPage_X());
    87fc:	f7fa fc20 	bl	3040 <Fetch_ZeroPage_X()>
    8800:	f7fb fbfa 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD5].length);
    8804:	4bb5      	ldr	r3, [pc, #724]	; (8adc <loop+0x1a28>)
    8806:	f893 4b75 	ldrb.w	r4, [r3, #2933]	; 0xb75
    880a:	883b      	ldrh	r3, [r7, #0]
    880c:	441c      	add	r4, r3
    880e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8810:	4622      	mov	r2, r4
				break; // CMP - ZeroPage , X
    8812:	f7fe be3a 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xD6();
    8816:	f7fb fe87 	bl	4528 <opcode_0xD6()>
    881a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    881c:	4602      	mov	r2, r0
				break; // DEC - ZeroPage , X
    881e:	f7fe be34 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xD7();
    8822:	f7fd fc45 	bl	60b0 <opcode_0xD7()>
    8826:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8828:	4602      	mov	r2, r0
				break; // DCP - ZeroPage , X
    882a:	f7fe be2e 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    882e:	8838      	ldrh	r0, [r7, #0]
    8830:	2100      	movs	r1, #0
    8832:	3001      	adds	r0, #1
    8834:	b280      	uxth	r0, r0
    8836:	f7fa f90b 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xD8].length);
    883a:	4ba8      	ldr	r3, [pc, #672]	; (8adc <loop+0x1a28>)
    register_flags = register_flags & 0xF7;
    883c:	4aa8      	ldr	r2, [pc, #672]	; (8ae0 <loop+0x1a2c>)
    return(register_pc + opcode_info[0xD8].length);
    883e:	f893 4c11 	ldrb.w	r4, [r3, #3089]	; 0xc11
    8842:	883b      	ldrh	r3, [r7, #0]
    8844:	441c      	add	r4, r3
    register_flags = register_flags & 0xF7;
    8846:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    8848:	b2a4      	uxth	r4, r4
    register_flags = register_flags & 0xF7;
    884a:	f023 0308 	bic.w	r3, r3, #8
    884e:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    8850:	4622      	mov	r2, r4
				break; // CLD
    8852:	f7fe be1a 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_Absolute_Y(1));
    8856:	2001      	movs	r0, #1
    8858:	f7fa fc7e 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    885c:	f7fb fbcc 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xD9].length);
    8860:	4b9e      	ldr	r3, [pc, #632]	; (8adc <loop+0x1a28>)
    8862:	f893 4c45 	ldrb.w	r4, [r3, #3141]	; 0xc45
    8866:	883b      	ldrh	r3, [r7, #0]
    8868:	441c      	add	r4, r3
    886a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    886c:	4622      	mov	r2, r4
				break; // CMP - Absolute , Y
    886e:	f7fe be0c 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xDB();
    8872:	f7fd fd39 	bl	62e8 <opcode_0xDB()>
    8876:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8878:	4602      	mov	r2, r0
				break; // DCP - Absolute , Y
    887a:	f7fe be06 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_X(1);
    887e:	2001      	movs	r0, #1
    8880:	f7fa fc3a 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    8884:	4b95      	ldr	r3, [pc, #596]	; (8adc <loop+0x1a28>)
    8886:	f893 4ce1 	ldrb.w	r4, [r3, #3297]	; 0xce1
    888a:	883b      	ldrh	r3, [r7, #0]
    888c:	441c      	add	r4, r3
    888e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8890:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    8892:	f7fe bdfa 	b.w	748a <loop+0x3d6>
    Calculate_CMP(Fetch_Absolute_X(1));
    8896:	2001      	movs	r0, #1
    8898:	f7fa fc2e 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    889c:	f7fb fbac 	bl	3ff8 <Calculate_CMP(unsigned char)>
    return(register_pc + opcode_info[0xDD].length);
    88a0:	4b8e      	ldr	r3, [pc, #568]	; (8adc <loop+0x1a28>)
    88a2:	f893 4d15 	ldrb.w	r4, [r3, #3349]	; 0xd15
    88a6:	883b      	ldrh	r3, [r7, #0]
    88a8:	441c      	add	r4, r3
    88aa:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    88ac:	4622      	mov	r2, r4
				break; // CMP - Absolute , X
    88ae:	f7fe bdec 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xDE();
    88b2:	f7fb fe81 	bl	45b8 <opcode_0xDE()>
    88b6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    88b8:	4602      	mov	r2, r0
				break; // DEC - Absolute , X
    88ba:	f7fe bde6 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xDF();
    88be:	f7fd fcd9 	bl	6274 <opcode_0xDF()>
    88c2:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    88c4:	4602      	mov	r2, r0
				break; // DCP - Absolute , X
    88c6:	f7fe bde0 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xE0();
    88ca:	f7fb fbd1 	bl	4070 <opcode_0xE0()>
    88ce:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    88d0:	4602      	mov	r2, r0
				break; // CPX - Immediate
    88d2:	f7fe bdda 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    88d6:	f7fa fc6f 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    88da:	b280      	uxth	r0, r0
    88dc:	f7fb f9b0 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    88e0:	4b7e      	ldr	r3, [pc, #504]	; (8adc <loop+0x1a28>)
    88e2:	f893 4de5 	ldrb.w	r4, [r3, #3557]	; 0xde5
    88e6:	883b      	ldrh	r3, [r7, #0]
    88e8:	441c      	add	r4, r3
    88ea:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    88ec:	4622      	mov	r2, r4
				break; // SBC - Indexed Indirect X
    88ee:	f7fe bdcc 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xEC();
    88f2:	f7fb fc15 	bl	4120 <opcode_0xEC()>
    88f6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    88f8:	4602      	mov	r2, r0
				break; // CPX - Absolute
    88fa:	f7fe bdc6 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_Absolute());
    88fe:	f7fa fbdf 	bl	30c0 <Fetch_Absolute()>
    8902:	b280      	uxth	r0, r0
    8904:	f7fb f99c 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    8908:	4b76      	ldr	r3, [pc, #472]	; (8ae4 <loop+0x1a30>)
    890a:	f893 4055 	ldrb.w	r4, [r3, #85]	; 0x55
    890e:	883b      	ldrh	r3, [r7, #0]
    8910:	441c      	add	r4, r3
    8912:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8914:	4622      	mov	r2, r4
				break; // SBC - Absolute
    8916:	f7fe bdb8 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xEE();
    891a:	f7fb fdb5 	bl	4488 <opcode_0xEE()>
    891e:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8920:	4602      	mov	r2, r0
				break; // INC - Absolute
    8922:	f7fe bdb2 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xEF();
    8926:	f7fd fdbd 	bl	64a4 <opcode_0xEF()>
    892a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    892c:	4602      	mov	r2, r0
				break; // ISC - Absolute
    892e:	f7fe bdac 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xF0();
    8932:	f7fc f981 	bl	4c38 <opcode_0xF0()>
    8936:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8938:	4602      	mov	r2, r0
				break; // BEQ - Branch on Zero Set
    893a:	f7fe bda6 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    893e:	2001      	movs	r0, #1
    8940:	f7fa fc64 	bl	320c <Fetch_Indexed_Indirect_Y(unsigned char)>
    8944:	b280      	uxth	r0, r0
    8946:	f7fb f97b 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    894a:	4b66      	ldr	r3, [pc, #408]	; (8ae4 <loop+0x1a30>)
    894c:	f893 4125 	ldrb.w	r4, [r3, #293]	; 0x125
    8950:	883b      	ldrh	r3, [r7, #0]
    8952:	441c      	add	r4, r3
    8954:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8956:	4622      	mov	r2, r4
				break; // SBC - Indirect Indexed  Y
    8958:	f7fe bd97 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xF3();
    895c:	f7fd fd7a 	bl	6454 <opcode_0xF3()>
    8960:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8962:	4602      	mov	r2, r0
				break; // ISC - Indirect Indexed  Y
    8964:	f7fe bd91 	b.w	748a <loop+0x3d6>
    Fetch_ZeroPage_X();
    8968:	f7fa fb6a 	bl	3040 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    896c:	4b5d      	ldr	r3, [pc, #372]	; (8ae4 <loop+0x1a30>)
    896e:	f893 41c1 	ldrb.w	r4, [r3, #449]	; 0x1c1
    8972:	883b      	ldrh	r3, [r7, #0]
    8974:	441c      	add	r4, r3
    8976:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8978:	4622      	mov	r2, r4
				break; // NOP - ZeroPage , X
    897a:	f7fe bd86 	b.w	748a <loop+0x3d6>
    Fetch_Immediate(1);
    897e:	2001      	movs	r0, #1
    8980:	f7fa fb3e 	bl	3000 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    8984:	4b55      	ldr	r3, [pc, #340]	; (8adc <loop+0x1a28>)
    8986:	f893 4e19 	ldrb.w	r4, [r3, #3609]	; 0xe19
    898a:	883b      	ldrh	r3, [r7, #0]
    898c:	441c      	add	r4, r3
    898e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8990:	4622      	mov	r2, r4
				break; // NOP - Immediate
    8992:	f7fe bd7a 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xE3();
    8996:	f7fd fd37 	bl	6408 <opcode_0xE3()>
    899a:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    899c:	4602      	mov	r2, r0
				break; // ISC - Indexed Indirect X
    899e:	f7fe bd74 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xE4();
    89a2:	f7fb fb8d 	bl	40c0 <opcode_0xE4()>
    89a6:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    89a8:	4602      	mov	r2, r0
				break; // CPX - ZeroPage
    89aa:	f7fe bd6e 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_ZeroPage());
    89ae:	f7fa fb33 	bl	3018 <Fetch_ZeroPage()>
    89b2:	b280      	uxth	r0, r0
    89b4:	f7fb f944 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    89b8:	4b48      	ldr	r3, [pc, #288]	; (8adc <loop+0x1a28>)
    89ba:	f893 4eb5 	ldrb.w	r4, [r3, #3765]	; 0xeb5
    89be:	883b      	ldrh	r3, [r7, #0]
    89c0:	441c      	add	r4, r3
    89c2:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    89c4:	4622      	mov	r2, r4
				break; // SBC - ZeroPage
    89c6:	f7fe bd60 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xFF();
    89ca:	f7fd fd91 	bl	64f0 <opcode_0xFF()>
    89ce:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    89d0:	4602      	mov	r2, r0
				break; // 
    89d2:	f7fe bd5a 	b.w	748a <loop+0x3d6>
				irq_handler(0x1);
    89d6:	2001      	movs	r0, #1
    89d8:	f7fa ff34 	bl	3844 <irq_handler(unsigned char)>
				break; // BRK - Break
    89dc:	2200      	movs	r2, #0
		uint16_t next_pc = 0;
    89de:	4614      	mov	r4, r2
				break; // BRK - Break
    89e0:	f7fe bd53 	b.w	748a <loop+0x3d6>
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    89e4:	f7fa fbe8 	bl	31b8 <Fetch_Indexed_Indirect_X()>
    89e8:	4b3f      	ldr	r3, [pc, #252]	; (8ae8 <loop+0x1a34>)
    89ea:	781a      	ldrb	r2, [r3, #0]
    89ec:	4310      	orrs	r0, r2
    89ee:	b2c0      	uxtb	r0, r0
    89f0:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    89f2:	f7fa faf1 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0x01].length);
    89f6:	4b3d      	ldr	r3, [pc, #244]	; (8aec <loop+0x1a38>)
    89f8:	f893 4065 	ldrb.w	r4, [r3, #101]	; 0x65
    89fc:	883b      	ldrh	r3, [r7, #0]
    89fe:	441c      	add	r4, r3
    8a00:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8a02:	4622      	mov	r2, r4
				break; // OR - Indexed Indirect X
    8a04:	f7fe bd41 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_ZeroPage_X());
    8a08:	f7fa fb1a 	bl	3040 <Fetch_ZeroPage_X()>
    8a0c:	b280      	uxth	r0, r0
    8a0e:	f7fb f917 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    8a12:	4b34      	ldr	r3, [pc, #208]	; (8ae4 <loop+0x1a30>)
    8a14:	f893 41f5 	ldrb.w	r4, [r3, #501]	; 0x1f5
    8a18:	883b      	ldrh	r3, [r7, #0]
    8a1a:	441c      	add	r4, r3
    8a1c:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8a1e:	4622      	mov	r2, r4
				break; // SBC - ZeroPage , X
    8a20:	f7fe bd33 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xF6();
    8a24:	f7fb fd0c 	bl	4440 <opcode_0xF6()>
    8a28:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8a2a:	4602      	mov	r2, r0
				break; // INC - ZeroPage , X
    8a2c:	f7fe bd2d 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xF7();
    8a30:	f7fd fcc4 	bl	63bc <opcode_0xF7()>
    8a34:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8a36:	4602      	mov	r2, r0
				break; // ISC - ZeroPage , X
    8a38:	f7fe bd27 	b.w	748a <loop+0x3d6>
    read_byte(register_pc+1, false);
    8a3c:	8838      	ldrh	r0, [r7, #0]
    8a3e:	2100      	movs	r1, #0
    8a40:	3001      	adds	r0, #1
    8a42:	b280      	uxth	r0, r0
    8a44:	f7fa f804 	bl	2a50 <read_byte(unsigned short, bool)>
    return(register_pc + opcode_info[0xF8].length);
    8a48:	4b26      	ldr	r3, [pc, #152]	; (8ae4 <loop+0x1a30>)
    register_flags = register_flags | 0x08;
    8a4a:	4a25      	ldr	r2, [pc, #148]	; (8ae0 <loop+0x1a2c>)
    return(register_pc + opcode_info[0xF8].length);
    8a4c:	f893 4291 	ldrb.w	r4, [r3, #657]	; 0x291
    8a50:	883b      	ldrh	r3, [r7, #0]
    8a52:	441c      	add	r4, r3
    register_flags = register_flags | 0x08;
    8a54:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    8a56:	b2a4      	uxth	r4, r4
    register_flags = register_flags | 0x08;
    8a58:	f043 0308 	orr.w	r3, r3, #8
    8a5c:	7013      	strb	r3, [r2, #0]
        sprintf(buf, "%04X", next_pc);
    8a5e:	4622      	mov	r2, r4
				break; // SED
    8a60:	f7fe bd13 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_Absolute_Y(1));
    8a64:	2001      	movs	r0, #1
    8a66:	f7fa fb77 	bl	3158 <Fetch_Absolute_Y(unsigned char)>
    8a6a:	b280      	uxth	r0, r0
    8a6c:	f7fb f8e8 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    8a70:	4b1c      	ldr	r3, [pc, #112]	; (8ae4 <loop+0x1a30>)
    8a72:	f893 42c5 	ldrb.w	r4, [r3, #709]	; 0x2c5
    8a76:	883b      	ldrh	r3, [r7, #0]
    8a78:	441c      	add	r4, r3
    8a7a:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8a7c:	4622      	mov	r2, r4
				break; // SBC - Absolute , Y
    8a7e:	f7fe bd04 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xFB();
    8a82:	f7fd fd5d 	bl	6540 <opcode_0xFB()>
    8a86:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8a88:	4602      	mov	r2, r0
				break; // ISC - Absolute , Y
    8a8a:	f7fe bcfe 	b.w	748a <loop+0x3d6>
    Fetch_Absolute_X(1);
    8a8e:	2001      	movs	r0, #1
    8a90:	f7fa fb32 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    8a94:	4b13      	ldr	r3, [pc, #76]	; (8ae4 <loop+0x1a30>)
    8a96:	f893 4361 	ldrb.w	r4, [r3, #865]	; 0x361
    8a9a:	883b      	ldrh	r3, [r7, #0]
    8a9c:	441c      	add	r4, r3
    8a9e:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8aa0:	4622      	mov	r2, r4
				break; // NOP - Absolute , X
    8aa2:	f7fe bcf2 	b.w	748a <loop+0x3d6>
    Calculate_SBC(Fetch_Absolute_X(1));
    8aa6:	2001      	movs	r0, #1
    8aa8:	f7fa fb26 	bl	30f8 <Fetch_Absolute_X(unsigned char)>
    8aac:	b280      	uxth	r0, r0
    8aae:	f7fb f8c7 	bl	3c40 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    8ab2:	4b0c      	ldr	r3, [pc, #48]	; (8ae4 <loop+0x1a30>)
    8ab4:	f893 4395 	ldrb.w	r4, [r3, #917]	; 0x395
    8ab8:	883b      	ldrh	r3, [r7, #0]
    8aba:	441c      	add	r4, r3
    8abc:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8abe:	4622      	mov	r2, r4
				break; // SBC - Absolute , X
    8ac0:	f7fe bce3 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xE6();
    8ac4:	f7fb fc90 	bl	43e8 <opcode_0xE6()>
    8ac8:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8aca:	4602      	mov	r2, r0
				break; // INC - ZeroPage
    8acc:	f7fe bcdd 	b.w	748a <loop+0x3d6>
				next_pc = opcode_0xE7();
    8ad0:	f7fd fc44 	bl	635c <opcode_0xE7()>
    8ad4:	4604      	mov	r4, r0
        sprintf(buf, "%04X", next_pc);
    8ad6:	4602      	mov	r2, r0
				break; // ISC - ZeroPage
    8ad8:	f7fe bcd7 	b.w	748a <loop+0x3d6>
    8adc:	20017418 	.word	0x20017418
    8ae0:	20004a08 	.word	0x20004a08
    8ae4:	20018418 	.word	0x20018418
    8ae8:	200188a8 	.word	0x200188a8
    8aec:	20015418 	.word	0x20015418
    read_byte(register_pc+1, false);
    8af0:	8838      	ldrh	r0, [r7, #0]
    8af2:	2100      	movs	r1, #0
    8af4:	3001      	adds	r0, #1
    8af6:	b280      	uxth	r0, r0
    8af8:	f7f9 ffaa 	bl	2a50 <read_byte(unsigned short, bool)>
    register_x = register_x + 1;
    8afc:	4b23      	ldr	r3, [pc, #140]	; (8b8c <loop+0x1ad8>)
    8afe:	7818      	ldrb	r0, [r3, #0]
    8b00:	3001      	adds	r0, #1
    8b02:	b2c0      	uxtb	r0, r0
    8b04:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    8b06:	f7fa fa67 	bl	2fd8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xE8].length);
    8b0a:	4b21      	ldr	r3, [pc, #132]	; (8b90 <loop+0x1adc>)
    8b0c:	f893 4f51 	ldrb.w	r4, [r3, #3921]	; 0xf51
    8b10:	883b      	ldrh	r3, [r7, #0]
    8b12:	441c      	add	r4, r3
    8b14:	b2a4      	uxth	r4, r4
        sprintf(buf, "%04X", next_pc);
    8b16:	4622      	mov	r2, r4
				break; // INX
    8b18:	f7fe bcb7 	b.w	748a <loop+0x3d6>
				Serial.println("ERROR: Illegal instruction");
    8b1c:	491d      	ldr	r1, [pc, #116]	; (8b94 <loop+0x1ae0>)
    8b1e:	481e      	ldr	r0, [pc, #120]	; (8b98 <loop+0x1ae4>)
    8b20:	f7f7 fad4 	bl	cc <Print::println(char const*) [clone .isra.0]>
				run_mode = WAITING;
    8b24:	f04f 0300 	mov.w	r3, #0
    8b28:	2200      	movs	r2, #0
    8b2a:	7033      	strb	r3, [r6, #0]
		uint16_t next_pc = 0;
    8b2c:	4614      	mov	r4, r2
    8b2e:	f7fe bcb5 	b.w	749c <loop+0x3e8>
        register_pc = register_pc + opcode_info[0x90].length;
    8b32:	4b1a      	ldr	r3, [pc, #104]	; (8b9c <loop+0x1ae8>)
    return read_byte(register_pc+offset, false);
    8b34:	2100      	movs	r1, #0
    8b36:	883a      	ldrh	r2, [r7, #0]
    8b38:	f893 3d71 	ldrb.w	r3, [r3, #3441]	; 0xd71
    8b3c:	4413      	add	r3, r2
    8b3e:	b29b      	uxth	r3, r3
    8b40:	803b      	strh	r3, [r7, #0]
    8b42:	3301      	adds	r3, #1
    8b44:	b298      	uxth	r0, r3
    8b46:	f7f9 ff83 	bl	2a50 <read_byte(unsigned short, bool)>
    8b4a:	f7ff baa5 	b.w	8098 <loop+0xfe4>
        register_pc = register_pc + opcode_info[0xB0].length;
    8b4e:	4b10      	ldr	r3, [pc, #64]	; (8b90 <loop+0x1adc>)
    8b50:	883a      	ldrh	r2, [r7, #0]
    8b52:	f893 33f1 	ldrb.w	r3, [r3, #1009]	; 0x3f1
    8b56:	4413      	add	r3, r2
    8b58:	b29b      	uxth	r3, r3
    8b5a:	803b      	strh	r3, [r7, #0]
    8b5c:	3301      	adds	r3, #1
    8b5e:	b298      	uxth	r0, r3
    8b60:	f7f9 ff76 	bl	2a50 <read_byte(unsigned short, bool)>
    8b64:	e488      	b.n	8478 <loop+0x13c4>
        register_pc = register_pc + opcode_info[0x10].length;
    8b66:	4b0e      	ldr	r3, [pc, #56]	; (8ba0 <loop+0x1aec>)
    8b68:	2100      	movs	r1, #0
    8b6a:	883a      	ldrh	r2, [r7, #0]
    8b6c:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
    8b70:	4413      	add	r3, r2
    8b72:	b29b      	uxth	r3, r3
    8b74:	803b      	strh	r3, [r7, #0]
    8b76:	3301      	adds	r3, #1
    8b78:	b298      	uxth	r0, r3
    8b7a:	f7f9 ff69 	bl	2a50 <read_byte(unsigned short, bool)>
    8b7e:	f7fe bd9f 	b.w	76c0 <loop+0x60c>
    if ((flag_n) == 1) Branch_Taken();
    8b82:	f7fb ff99 	bl	4ab8 <Branch_Taken()>
    8b86:	f7fe bec1 	b.w	790c <loop+0x858>
    8b8a:	bf00      	nop
    8b8c:	200188a9 	.word	0x200188a9
    8b90:	20017418 	.word	0x20017418
    8b94:	200010f8 	.word	0x200010f8
    8b98:	200043f8 	.word	0x200043f8
    8b9c:	20016418 	.word	0x20016418
    8ba0:	20015418 	.word	0x20015418

00008ba4 <_GLOBAL__sub_I_opcode_info>:
}
    8ba4:	b538      	push	{r3, r4, r5, lr}
    8ba6:	4c12      	ldr	r4, [pc, #72]	; (8bf0 <_GLOBAL__sub_I_opcode_info+0x4c>)
    8ba8:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    8bac:	2100      	movs	r1, #0
    8bae:	4620      	mov	r0, r4
    8bb0:	f000 f8e6 	bl	8d80 <String::String(char const*)>
    8bb4:	2100      	movs	r1, #0
    8bb6:	f104 0010 	add.w	r0, r4, #16
    8bba:	f000 f8e1 	bl	8d80 <String::String(char const*)>
    8bbe:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    8bc2:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    8bc4:	2100      	movs	r1, #0
    8bc6:	f000 f8db 	bl	8d80 <String::String(char const*)>
OpDecoder opcode_info[256];
    8bca:	42ac      	cmp	r4, r5
    8bcc:	d1ee      	bne.n	8bac <_GLOBAL__sub_I_opcode_info+0x8>
    8bce:	4a09      	ldr	r2, [pc, #36]	; (8bf4 <_GLOBAL__sub_I_opcode_info+0x50>)
    8bd0:	2000      	movs	r0, #0
    8bd2:	4909      	ldr	r1, [pc, #36]	; (8bf8 <_GLOBAL__sub_I_opcode_info+0x54>)
    8bd4:	f002 f8e2 	bl	ad9c <__aeabi_atexit>
String last_command = "";
    8bd8:	4908      	ldr	r1, [pc, #32]	; (8bfc <_GLOBAL__sub_I_opcode_info+0x58>)
    8bda:	4809      	ldr	r0, [pc, #36]	; (8c00 <_GLOBAL__sub_I_opcode_info+0x5c>)
    8bdc:	f000 f8d0 	bl	8d80 <String::String(char const*)>
    8be0:	4a04      	ldr	r2, [pc, #16]	; (8bf4 <_GLOBAL__sub_I_opcode_info+0x50>)
    8be2:	4908      	ldr	r1, [pc, #32]	; (8c04 <_GLOBAL__sub_I_opcode_info+0x60>)
    8be4:	4806      	ldr	r0, [pc, #24]	; (8c00 <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    8be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    8bea:	f002 b8d7 	b.w	ad9c <__aeabi_atexit>
    8bee:	bf00      	nop
    8bf0:	20015418 	.word	0x20015418
    8bf4:	20004410 	.word	0x20004410
    8bf8:	0000009d 	.word	0x0000009d
    8bfc:	200004f8 	.word	0x200004f8
    8c00:	200153f0 	.word	0x200153f0
    8c04:	00008d09 	.word	0x00008d09

00008c08 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8c08:	4608      	mov	r0, r1
    8c0a:	f001 bcdb 	b.w	a5c4 <usb_serial_putchar>
    8c0e:	bf00      	nop

00008c10 <Print::print(String const&)>:
{
    8c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    8c14:	688c      	ldr	r4, [r1, #8]
    8c16:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    8c18:	b1dc      	cbz	r4, 8c52 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    8c1a:	2500      	movs	r5, #0
    8c1c:	4688      	mov	r8, r1
    8c1e:	4606      	mov	r6, r0
	size_t count = 0;
    8c20:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8c22:	462b      	mov	r3, r5
    8c24:	2221      	movs	r2, #33	; 0x21
    8c26:	a901      	add	r1, sp, #4
    8c28:	4640      	mov	r0, r8
    8c2a:	f000 f9a7 	bl	8f7c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    8c2e:	2c20      	cmp	r4, #32
    8c30:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    8c32:	6833      	ldr	r3, [r6, #0]
    8c34:	bf28      	it	cs
    8c36:	2220      	movcs	r2, #32
    8c38:	a901      	add	r1, sp, #4
    8c3a:	4630      	mov	r0, r6
    8c3c:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    8c3e:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    8c40:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    8c42:	4798      	blx	r3
    8c44:	4407      	add	r7, r0
	while (len > 0) {
    8c46:	2c00      	cmp	r4, #0
    8c48:	d1eb      	bne.n	8c22 <Print::print(String const&)+0x12>
}
    8c4a:	4638      	mov	r0, r7
    8c4c:	b00a      	add	sp, #40	; 0x28
    8c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    8c52:	4627      	mov	r7, r4
}
    8c54:	4638      	mov	r0, r7
    8c56:	b00a      	add	sp, #40	; 0x28
    8c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c5c <Print::println()>:
{
    8c5c:	b500      	push	{lr}
	return write(buf, 2);
    8c5e:	6803      	ldr	r3, [r0, #0]
{
    8c60:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    8c62:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    8c66:	2202      	movs	r2, #2
    8c68:	a901      	add	r1, sp, #4
    8c6a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    8c6c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    8c70:	4798      	blx	r3
}
    8c72:	b003      	add	sp, #12
    8c74:	f85d fb04 	ldr.w	pc, [sp], #4

00008c78 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8c78:	4b05      	ldr	r3, [pc, #20]	; (8c90 <_write+0x18>)
    8c7a:	2802      	cmp	r0, #2
    8c7c:	bf88      	it	hi
    8c7e:	4603      	movhi	r3, r0
{
    8c80:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8c82:	681c      	ldr	r4, [r3, #0]
    8c84:	4618      	mov	r0, r3
    8c86:	6863      	ldr	r3, [r4, #4]
}
    8c88:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8c8c:	4718      	bx	r3
    8c8e:	bf00      	nop
    8c90:	200043f8 	.word	0x200043f8

00008c94 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    8c94:	f001 bc86 	b.w	a5a4 <usb_serial_getchar>

00008c98 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    8c98:	f001 bc1e 	b.w	a4d8 <usb_serial_peekchar>

00008c9c <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    8c9c:	6081      	str	r1, [r0, #8]
}
    8c9e:	4770      	bx	lr

00008ca0 <String::String(String const&)>:
String::String(const String &value)
    8ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    8ca2:	4288      	cmp	r0, r1
	buffer = NULL;
    8ca4:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    8ca8:	4604      	mov	r4, r0
	len = 0;
    8caa:	6085      	str	r5, [r0, #8]
	flags = 0;
    8cac:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    8cae:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    8cb2:	d002      	beq.n	8cba <String::String(String const&)+0x1a>
    8cb4:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    8cb6:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    8cb8:	b90e      	cbnz	r6, 8cbe <String::String(String const&)+0x1e>
}
    8cba:	4620      	mov	r0, r4
    8cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8cbe:	1c70      	adds	r0, r6, #1
    8cc0:	f002 f88c 	bl	addc <malloc>
	if (newbuffer) {
    8cc4:	2800      	cmp	r0, #0
    8cc6:	d0f8      	beq.n	8cba <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    8cc8:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    8cca:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    8ccc:	6020      	str	r0, [r4, #0]
	len = length;
    8cce:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    8cd2:	f003 fbd3 	bl	c47c <strcpy>
}
    8cd6:	4620      	mov	r0, r4
    8cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8cda:	bf00      	nop

00008cdc <String::String(String&&)>:
	buffer = NULL;
    8cdc:	2300      	movs	r3, #0
	if (&rhs == this) return;
    8cde:	4288      	cmp	r0, r1
	capacity = 0;
    8ce0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8ce4:	6083      	str	r3, [r0, #8]
	flags = 0;
    8ce6:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    8ce8:	d00c      	beq.n	8d04 <String::String(String&&)+0x28>
String::String(String &&rval)
    8cea:	b410      	push	{r4}
	capacity = rhs.capacity;
    8cec:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    8cf0:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    8cf4:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    8cf8:	688a      	ldr	r2, [r1, #8]
}
    8cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    8cfe:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    8d00:	6082      	str	r2, [r0, #8]
}
    8d02:	4770      	bx	lr
    8d04:	4770      	bx	lr
    8d06:	bf00      	nop

00008d08 <String::~String()>:
String::~String()
    8d08:	b510      	push	{r4, lr}
    8d0a:	4604      	mov	r4, r0
	free(buffer);
    8d0c:	6800      	ldr	r0, [r0, #0]
    8d0e:	f002 f86d 	bl	adec <free>
}
    8d12:	4620      	mov	r0, r4
    8d14:	bd10      	pop	{r4, pc}
    8d16:	bf00      	nop

00008d18 <String::copy(char const*, unsigned int)>:
{
    8d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d1a:	4604      	mov	r4, r0
	if (length == 0) {
    8d1c:	4615      	mov	r5, r2
    8d1e:	b932      	cbnz	r2, 8d2e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8d20:	6803      	ldr	r3, [r0, #0]
    8d22:	b103      	cbz	r3, 8d26 <String::copy(char const*, unsigned int)+0xe>
    8d24:	701a      	strb	r2, [r3, #0]
		len = 0;
    8d26:	2300      	movs	r3, #0
}
    8d28:	4620      	mov	r0, r4
		len = 0;
    8d2a:	60a3      	str	r3, [r4, #8]
}
    8d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8d2e:	6843      	ldr	r3, [r0, #4]
    8d30:	460e      	mov	r6, r1
    8d32:	429a      	cmp	r2, r3
    8d34:	d91c      	bls.n	8d70 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8d36:	1c51      	adds	r1, r2, #1
    8d38:	6800      	ldr	r0, [r0, #0]
    8d3a:	f002 fb1b 	bl	b374 <realloc>
	if (newbuffer) {
    8d3e:	4607      	mov	r7, r0
    8d40:	b160      	cbz	r0, 8d5c <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8d42:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8d44:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    8d48:	b90b      	cbnz	r3, 8d4e <String::copy(char const*, unsigned int)+0x36>
    8d4a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    8d4c:	6827      	ldr	r7, [r4, #0]
    8d4e:	4631      	mov	r1, r6
    8d50:	4638      	mov	r0, r7
	len = length;
    8d52:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8d54:	f003 fb92 	bl	c47c <strcpy>
}
    8d58:	4620      	mov	r0, r4
    8d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    8d5c:	6820      	ldr	r0, [r4, #0]
    8d5e:	b110      	cbz	r0, 8d66 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    8d60:	f002 f844 	bl	adec <free>
			buffer = NULL;
    8d64:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    8d66:	2300      	movs	r3, #0
}
    8d68:	4620      	mov	r0, r4
		len = capacity = 0;
    8d6a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    8d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    8d70:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    8d72:	4631      	mov	r1, r6
	len = length;
    8d74:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8d76:	4638      	mov	r0, r7
    8d78:	f003 fb80 	bl	c47c <strcpy>
	return *this;
    8d7c:	e7ec      	b.n	8d58 <String::copy(char const*, unsigned int)+0x40>
    8d7e:	bf00      	nop

00008d80 <String::String(char const*)>:
String::String(const char *cstr)
    8d80:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    8d82:	2300      	movs	r3, #0
String::String(const char *cstr)
    8d84:	4604      	mov	r4, r0
	capacity = 0;
    8d86:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    8d8a:	6083      	str	r3, [r0, #8]
	flags = 0;
    8d8c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    8d8e:	b141      	cbz	r1, 8da2 <String::String(char const*)+0x22>
    8d90:	460d      	mov	r5, r1
    8d92:	4608      	mov	r0, r1
    8d94:	f003 fbd4 	bl	c540 <strlen>
    8d98:	4602      	mov	r2, r0
    8d9a:	4629      	mov	r1, r5
    8d9c:	4620      	mov	r0, r4
    8d9e:	f7ff ffbb 	bl	8d18 <String::copy(char const*, unsigned int)>
}
    8da2:	4620      	mov	r0, r4
    8da4:	bd38      	pop	{r3, r4, r5, pc}
    8da6:	bf00      	nop

00008da8 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    8da8:	b510      	push	{r4, lr}
	buffer = NULL;
    8daa:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    8dac:	b08a      	sub	sp, #40	; 0x28
    8dae:	4604      	mov	r4, r0
	itoa(value, buf, base);
    8db0:	4608      	mov	r0, r1
    8db2:	a901      	add	r1, sp, #4
	len = 0;
    8db4:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8db6:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8db8:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    8dbc:	f001 fff8 	bl	adb0 <itoa>
		copy(cstr, strlen(cstr));
    8dc0:	a801      	add	r0, sp, #4
    8dc2:	f003 fbbd 	bl	c540 <strlen>
    8dc6:	a901      	add	r1, sp, #4
    8dc8:	4602      	mov	r2, r0
    8dca:	4620      	mov	r0, r4
    8dcc:	f7ff ffa4 	bl	8d18 <String::copy(char const*, unsigned int)>
}
    8dd0:	4620      	mov	r0, r4
    8dd2:	b00a      	add	sp, #40	; 0x28
    8dd4:	bd10      	pop	{r4, pc}
    8dd6:	bf00      	nop

00008dd8 <String::String(unsigned int, unsigned char)>:
String::String(unsigned int value, unsigned char base)
    8dd8:	b510      	push	{r4, lr}
	buffer = NULL;
    8dda:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
    8ddc:	b08a      	sub	sp, #40	; 0x28
    8dde:	4604      	mov	r4, r0
  	utoa(value, buf, base);
    8de0:	4608      	mov	r0, r1
    8de2:	a901      	add	r1, sp, #4
	len = 0;
    8de4:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8de6:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    8de8:	e9c4 3300 	strd	r3, r3, [r4]
  	utoa(value, buf, base);
    8dec:	f002 fe66 	bl	babc <utoa>
		copy(cstr, strlen(cstr));
    8df0:	a801      	add	r0, sp, #4
    8df2:	f003 fba5 	bl	c540 <strlen>
    8df6:	a901      	add	r1, sp, #4
    8df8:	4602      	mov	r2, r0
    8dfa:	4620      	mov	r0, r4
    8dfc:	f7ff ff8c 	bl	8d18 <String::copy(char const*, unsigned int)>
}
    8e00:	4620      	mov	r0, r4
    8e02:	b00a      	add	sp, #40	; 0x28
    8e04:	bd10      	pop	{r4, pc}
    8e06:	bf00      	nop

00008e08 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    8e08:	4281      	cmp	r1, r0
    8e0a:	d003      	beq.n	8e14 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    8e0c:	688a      	ldr	r2, [r1, #8]
    8e0e:	6809      	ldr	r1, [r1, #0]
    8e10:	f7ff bf82 	b.w	8d18 <String::copy(char const*, unsigned int)>
}
    8e14:	4770      	bx	lr
    8e16:	bf00      	nop

00008e18 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    8e18:	4288      	cmp	r0, r1
{
    8e1a:	b538      	push	{r3, r4, r5, lr}
    8e1c:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    8e1e:	d00e      	beq.n	8e3e <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    8e20:	6800      	ldr	r0, [r0, #0]
    8e22:	460c      	mov	r4, r1
    8e24:	b108      	cbz	r0, 8e2a <String::operator=(String&&)+0x12>
    8e26:	f001 ffe1 	bl	adec <free>
	len = rhs.len;
    8e2a:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    8e2c:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    8e2e:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    8e32:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    8e34:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    8e38:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    8e3c:	60a3      	str	r3, [r4, #8]
}
    8e3e:	4628      	mov	r0, r5
    8e40:	bd38      	pop	{r3, r4, r5, pc}
    8e42:	bf00      	nop

00008e44 <String::operator=(char const*)>:
{
    8e44:	b538      	push	{r3, r4, r5, lr}
    8e46:	4605      	mov	r5, r0
	if (cstr) {
    8e48:	460c      	mov	r4, r1
    8e4a:	b149      	cbz	r1, 8e60 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    8e4c:	4608      	mov	r0, r1
    8e4e:	f003 fb77 	bl	c540 <strlen>
    8e52:	4621      	mov	r1, r4
    8e54:	4602      	mov	r2, r0
    8e56:	4628      	mov	r0, r5
    8e58:	f7ff ff5e 	bl	8d18 <String::copy(char const*, unsigned int)>
}
    8e5c:	4628      	mov	r0, r5
    8e5e:	bd38      	pop	{r3, r4, r5, pc}
    8e60:	4628      	mov	r0, r5
		len = 0;
    8e62:	60a9      	str	r1, [r5, #8]
}
    8e64:	bd38      	pop	{r3, r4, r5, pc}
    8e66:	bf00      	nop

00008e68 <String::append(char const*, unsigned int)>:
{
    8e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e6c:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8e6e:	6800      	ldr	r0, [r0, #0]
{
    8e70:	460d      	mov	r5, r1
    8e72:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8e74:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    8e76:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    8e78:	d809      	bhi.n	8e8e <String::append(char const*, unsigned int)+0x26>
    8e7a:	18c2      	adds	r2, r0, r3
    8e7c:	4291      	cmp	r1, r2
    8e7e:	d206      	bcs.n	8e8e <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    8e80:	1a0f      	subs	r7, r1, r0
		self = true;
    8e82:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    8e86:	b936      	cbnz	r6, 8e96 <String::append(char const*, unsigned int)+0x2e>
}
    8e88:	4620      	mov	r0, r4
    8e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    8e8e:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    8e92:	2e00      	cmp	r6, #0
    8e94:	d0f8      	beq.n	8e88 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    8e96:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    8e9a:	6862      	ldr	r2, [r4, #4]
    8e9c:	4590      	cmp	r8, r2
    8e9e:	d90c      	bls.n	8eba <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8ea0:	f108 0101 	add.w	r1, r8, #1
    8ea4:	f002 fa66 	bl	b374 <realloc>
	if (newbuffer) {
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d0ed      	beq.n	8e88 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    8eac:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    8eae:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    8eb2:	b913      	cbnz	r3, 8eba <String::append(char const*, unsigned int)+0x52>
    8eb4:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    8eb6:	6820      	ldr	r0, [r4, #0]
    8eb8:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    8eba:	f1b9 0f00 	cmp.w	r9, #0
    8ebe:	d108      	bne.n	8ed2 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    8ec0:	4629      	mov	r1, r5
    8ec2:	4418      	add	r0, r3
    8ec4:	f003 fada 	bl	c47c <strcpy>
}
    8ec8:	4620      	mov	r0, r4
	len = newlen;
    8eca:	f8c4 8008 	str.w	r8, [r4, #8]
}
    8ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    8ed2:	4632      	mov	r2, r6
    8ed4:	19c1      	adds	r1, r0, r7
    8ed6:	4418      	add	r0, r3
    8ed8:	f000 f9ca 	bl	9270 <memcpy>
		buffer[newlen] = 0;
    8edc:	6823      	ldr	r3, [r4, #0]
    8ede:	2200      	movs	r2, #0
    8ee0:	f803 2008 	strb.w	r2, [r3, r8]
    8ee4:	e7f0      	b.n	8ec8 <String::append(char const*, unsigned int)+0x60>
    8ee6:	bf00      	nop

00008ee8 <String::append(char)>:
{
    8ee8:	b510      	push	{r4, lr}
    8eea:	b082      	sub	sp, #8
	buf[1] = 0;
    8eec:	2300      	movs	r3, #0
{
    8eee:	4604      	mov	r4, r0
	append(buf, 1);
    8ef0:	2201      	movs	r2, #1
	buf[0] = c;
    8ef2:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    8ef6:	a901      	add	r1, sp, #4
	buf[1] = 0;
    8ef8:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    8efc:	f7ff ffb4 	bl	8e68 <String::append(char const*, unsigned int)>
}
    8f00:	4620      	mov	r0, r4
    8f02:	b002      	add	sp, #8
    8f04:	bd10      	pop	{r4, pc}
    8f06:	bf00      	nop

00008f08 <operator+(StringSumHelper const&, String const&)>:
{
    8f08:	b510      	push	{r4, lr}
    8f0a:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    8f0c:	688a      	ldr	r2, [r1, #8]
    8f0e:	6809      	ldr	r1, [r1, #0]
    8f10:	f7ff ffaa 	bl	8e68 <String::append(char const*, unsigned int)>
}
    8f14:	4620      	mov	r0, r4
    8f16:	bd10      	pop	{r4, pc}

00008f18 <operator+(StringSumHelper const&, char const*)>:
{
    8f18:	b538      	push	{r3, r4, r5, lr}
    8f1a:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    8f1c:	b141      	cbz	r1, 8f30 <operator+(StringSumHelper const&, char const*)+0x18>
    8f1e:	460c      	mov	r4, r1
    8f20:	4608      	mov	r0, r1
    8f22:	f003 fb0d 	bl	c540 <strlen>
    8f26:	4602      	mov	r2, r0
    8f28:	4621      	mov	r1, r4
    8f2a:	4628      	mov	r0, r5
    8f2c:	f7ff ff9c 	bl	8e68 <String::append(char const*, unsigned int)>
}
    8f30:	4628      	mov	r0, r5
    8f32:	bd38      	pop	{r3, r4, r5, pc}

00008f34 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8f34:	6882      	ldr	r2, [r0, #8]
{
    8f36:	b508      	push	{r3, lr}
    8f38:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8f3a:	b13a      	cbz	r2, 8f4c <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    8f3c:	b161      	cbz	r1, 8f58 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    8f3e:	6800      	ldr	r0, [r0, #0]
    8f40:	f003 f932 	bl	c1a8 <strcmp>
    8f44:	fab0 f080 	clz	r0, r0
    8f48:	0940      	lsrs	r0, r0, #5
}
    8f4a:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    8f4c:	b131      	cbz	r1, 8f5c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    8f4e:	7818      	ldrb	r0, [r3, #0]
    8f50:	fab0 f080 	clz	r0, r0
    8f54:	0940      	lsrs	r0, r0, #5
}
    8f56:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    8f58:	6803      	ldr	r3, [r0, #0]
    8f5a:	e7f8      	b.n	8f4e <String::equals(char const*) const+0x1a>
    8f5c:	2001      	movs	r0, #1
}
    8f5e:	bd08      	pop	{r3, pc}

00008f60 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    8f60:	6883      	ldr	r3, [r0, #8]
    8f62:	428b      	cmp	r3, r1
    8f64:	d903      	bls.n	8f6e <String::operator[](unsigned int)+0xe>
    8f66:	6800      	ldr	r0, [r0, #0]
    8f68:	b108      	cbz	r0, 8f6e <String::operator[](unsigned int)+0xe>
	return buffer[index];
    8f6a:	4408      	add	r0, r1
}
    8f6c:	4770      	bx	lr
		dummy_writable_char = 0;
    8f6e:	4b02      	ldr	r3, [pc, #8]	; (8f78 <String::operator[](unsigned int)+0x18>)
    8f70:	2200      	movs	r2, #0
		return dummy_writable_char;
    8f72:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    8f74:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    8f76:	4770      	bx	lr
    8f78:	2001889b 	.word	0x2001889b

00008f7c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    8f7c:	b1c2      	cbz	r2, 8fb0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    8f7e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    8f80:	fab1 f681 	clz	r6, r1
    8f84:	460c      	mov	r4, r1
    8f86:	0976      	lsrs	r6, r6, #5
    8f88:	b119      	cbz	r1, 8f92 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    8f8a:	6885      	ldr	r5, [r0, #8]
    8f8c:	429d      	cmp	r5, r3
    8f8e:	d801      	bhi.n	8f94 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    8f90:	700e      	strb	r6, [r1, #0]
}
    8f92:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    8f94:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    8f96:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    8f9a:	6801      	ldr	r1, [r0, #0]
    8f9c:	4620      	mov	r0, r4
    8f9e:	4565      	cmp	r5, ip
    8fa0:	4419      	add	r1, r3
    8fa2:	bf28      	it	cs
    8fa4:	4665      	movcs	r5, ip
    8fa6:	462a      	mov	r2, r5
    8fa8:	f003 f828 	bl	bffc <strncpy>
	buf[n] = 0;
    8fac:	5566      	strb	r6, [r4, r5]
}
    8fae:	bd70      	pop	{r4, r5, r6, pc}
    8fb0:	4770      	bx	lr
    8fb2:	bf00      	nop

00008fb4 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    8fb4:	6883      	ldr	r3, [r0, #8]
    8fb6:	b13b      	cbz	r3, 8fc8 <String::indexOf(char) const+0x14>
{
    8fb8:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    8fba:	6804      	ldr	r4, [r0, #0]
    8fbc:	4620      	mov	r0, r4
    8fbe:	f002 ffb7 	bl	bf30 <strchr>
	if (temp == NULL) return -1;
    8fc2:	b120      	cbz	r0, 8fce <String::indexOf(char) const+0x1a>
	return temp - buffer;
    8fc4:	1b00      	subs	r0, r0, r4
}
    8fc6:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    8fc8:	f04f 30ff 	mov.w	r0, #4294967295
}
    8fcc:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    8fce:	f04f 30ff 	mov.w	r0, #4294967295
}
    8fd2:	bd10      	pop	{r4, pc}

00008fd4 <String::substring(unsigned int) const>:
{
    8fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    8fd8:	688f      	ldr	r7, [r1, #8]
{
    8fda:	460e      	mov	r6, r1
    8fdc:	4604      	mov	r4, r0
	if (left > right) {
    8fde:	4297      	cmp	r7, r2
    8fe0:	d202      	bcs.n	8fe8 <String::substring(unsigned int) const+0x14>
    8fe2:	4613      	mov	r3, r2
    8fe4:	463a      	mov	r2, r7
    8fe6:	461f      	mov	r7, r3
	buffer = NULL;
    8fe8:	2300      	movs	r3, #0
	len = 0;
    8fea:	60a3      	str	r3, [r4, #8]
	flags = 0;
    8fec:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    8fee:	68b0      	ldr	r0, [r6, #8]
    8ff0:	4290      	cmp	r0, r2
	capacity = 0;
    8ff2:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    8ff6:	d314      	bcc.n	9022 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    8ff8:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    8ffa:	6831      	ldr	r1, [r6, #0]
    8ffc:	bf28      	it	cs
    8ffe:	4607      	movcs	r7, r0
    9000:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    9004:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    9006:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    9008:	189d      	adds	r5, r3, r2
    900a:	d00d      	beq.n	9028 <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    900c:	4628      	mov	r0, r5
    900e:	f003 fa97 	bl	c540 <strlen>
    9012:	4629      	mov	r1, r5
    9014:	4602      	mov	r2, r0
    9016:	4620      	mov	r0, r4
    9018:	f7ff fe7e 	bl	8d18 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    901c:	6833      	ldr	r3, [r6, #0]
    901e:	f803 8007 	strb.w	r8, [r3, r7]
}
    9022:	4620      	mov	r0, r4
    9024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    9028:	60a5      	str	r5, [r4, #8]
    902a:	e7f8      	b.n	901e <String::substring(unsigned int) const+0x4a>

0000902c <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    902c:	429a      	cmp	r2, r3
{
    902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9032:	4604      	mov	r4, r0
    9034:	460e      	mov	r6, r1
	if (left > right) {
    9036:	d902      	bls.n	903e <String::substring(unsigned int, unsigned int) const+0x12>
    9038:	4611      	mov	r1, r2
    903a:	461a      	mov	r2, r3
    903c:	460b      	mov	r3, r1
	buffer = NULL;
    903e:	2000      	movs	r0, #0
	len = 0;
    9040:	60a0      	str	r0, [r4, #8]
	flags = 0;
    9042:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    9044:	68b7      	ldr	r7, [r6, #8]
    9046:	4297      	cmp	r7, r2
	capacity = 0;
    9048:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    904c:	d314      	bcc.n	9078 <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    904e:	429f      	cmp	r7, r3
    9050:	bf28      	it	cs
    9052:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    9054:	6833      	ldr	r3, [r6, #0]
    9056:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    905a:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    905c:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    905e:	189d      	adds	r5, r3, r2
    9060:	d00d      	beq.n	907e <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    9062:	4628      	mov	r0, r5
    9064:	f003 fa6c 	bl	c540 <strlen>
    9068:	4629      	mov	r1, r5
    906a:	4602      	mov	r2, r0
    906c:	4620      	mov	r0, r4
    906e:	f7ff fe53 	bl	8d18 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    9072:	6833      	ldr	r3, [r6, #0]
    9074:	f803 8007 	strb.w	r8, [r3, r7]
}
    9078:	4620      	mov	r0, r4
    907a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    907e:	60a5      	str	r5, [r4, #8]
    9080:	e7f8      	b.n	9074 <String::substring(unsigned int, unsigned int) const+0x48>
    9082:	bf00      	nop

00009084 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    9084:	b510      	push	{r4, lr}
    9086:	4604      	mov	r4, r0
    9088:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    908a:	68a1      	ldr	r1, [r4, #8]
    908c:	b10a      	cbz	r2, 9092 <String::remove(unsigned int, unsigned int)+0xe>
    908e:	4281      	cmp	r1, r0
    9090:	d801      	bhi.n	9096 <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    9092:	4620      	mov	r0, r4
    9094:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    9096:	eb00 0c02 	add.w	ip, r0, r2
    909a:	4561      	cmp	r1, ip
    909c:	d30e      	bcc.n	90bc <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    909e:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    90a0:	4661      	mov	r1, ip
    90a2:	1a1a      	subs	r2, r3, r0
		len = len - count;
    90a4:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    90a6:	6823      	ldr	r3, [r4, #0]
    90a8:	4419      	add	r1, r3
    90aa:	4418      	add	r0, r3
    90ac:	f002 fe72 	bl	bd94 <memmove>
		buffer[len] = 0;
    90b0:	6822      	ldr	r2, [r4, #0]
    90b2:	68a3      	ldr	r3, [r4, #8]
    90b4:	2100      	movs	r1, #0
}
    90b6:	4620      	mov	r0, r4
		buffer[len] = 0;
    90b8:	54d1      	strb	r1, [r2, r3]
}
    90ba:	bd10      	pop	{r4, pc}
    90bc:	4603      	mov	r3, r0
    90be:	2200      	movs	r2, #0
    90c0:	e7f0      	b.n	90a4 <String::remove(unsigned int, unsigned int)+0x20>
    90c2:	bf00      	nop

000090c4 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    90c4:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    90c6:	6804      	ldr	r4, [r0, #0]
{
    90c8:	4605      	mov	r5, r0
	if (!buffer) return *this;
    90ca:	b144      	cbz	r4, 90de <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    90cc:	7820      	ldrb	r0, [r4, #0]
    90ce:	b130      	cbz	r0, 90de <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    90d0:	f002 fd0c 	bl	baec <tolower>
    90d4:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    90d6:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    90da:	2800      	cmp	r0, #0
    90dc:	d1f8      	bne.n	90d0 <String::toLowerCase()+0xc>
	}
	return *this;
}
    90de:	4628      	mov	r0, r5
    90e0:	bd38      	pop	{r3, r4, r5, pc}
    90e2:	bf00      	nop

000090e4 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    90e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    90e8:	6807      	ldr	r7, [r0, #0]
{
    90ea:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    90ec:	b1e7      	cbz	r7, 9128 <String::trim()+0x44>
    90ee:	6884      	ldr	r4, [r0, #8]
    90f0:	b1d4      	cbz	r4, 9128 <String::trim()+0x44>
    90f2:	46b8      	mov	r8, r7
    90f4:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    90f6:	f818 0b01 	ldrb.w	r0, [r8], #1
    90fa:	f002 fcef 	bl	badc <isspace>
    90fe:	2800      	cmp	r0, #0
    9100:	d1f8      	bne.n	90f4 <String::trim()+0x10>
	char *end = buffer + len - 1;
    9102:	3c01      	subs	r4, #1
    9104:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    9106:	e002      	b.n	910e <String::trim()+0x2a>
    9108:	42a5      	cmp	r5, r4
    910a:	d805      	bhi.n	9118 <String::trim()+0x34>
    910c:	3c01      	subs	r4, #1
    910e:	7820      	ldrb	r0, [r4, #0]
    9110:	f002 fce4 	bl	badc <isspace>
    9114:	2800      	cmp	r0, #0
    9116:	d1f7      	bne.n	9108 <String::trim()+0x24>
	len = end + 1 - begin;
    9118:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    911a:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    911c:	eba2 0205 	sub.w	r2, r2, r5
    9120:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    9122:	d304      	bcc.n	912e <String::trim()+0x4a>
	buffer[len] = 0;
    9124:	2300      	movs	r3, #0
    9126:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    9128:	4630      	mov	r0, r6
    912a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    912e:	4638      	mov	r0, r7
    9130:	4629      	mov	r1, r5
    9132:	f000 f89d 	bl	9270 <memcpy>
	buffer[len] = 0;
    9136:	6837      	ldr	r7, [r6, #0]
    9138:	68b2      	ldr	r2, [r6, #8]
    913a:	e7f3      	b.n	9124 <String::trim()+0x40>

0000913c <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    913c:	6800      	ldr	r0, [r0, #0]
    913e:	b108      	cbz	r0, 9144 <String::toInt() const+0x8>
    9140:	f001 be32 	b.w	ada8 <atol>
	return 0;
}
    9144:	4770      	bx	lr
    9146:	bf00      	nop

00009148 <delay>:
	if (msec == 0) return;
    9148:	b900      	cbnz	r0, 914c <delay+0x4>
    914a:	4770      	bx	lr
{
    914c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9150:	2101      	movs	r1, #1
    9152:	4681      	mov	r9, r0
    9154:	4c21      	ldr	r4, [pc, #132]	; (91dc <delay+0x94>)
    9156:	4d22      	ldr	r5, [pc, #136]	; (91e0 <delay+0x98>)
    9158:	4e22      	ldr	r6, [pc, #136]	; (91e4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    915a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    915e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9160:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9162:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9166:	2b00      	cmp	r3, #0
    9168:	d1f7      	bne.n	915a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    916a:	491f      	ldr	r1, [pc, #124]	; (91e8 <delay+0xa0>)
    916c:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    916e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9172:	f8df a078 	ldr.w	sl, [pc, #120]	; 91ec <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    9176:	1a1b      	subs	r3, r3, r0
    9178:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    917a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    917e:	f8da 2000 	ldr.w	r2, [sl]
    9182:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    9186:	455a      	cmp	r2, fp
    9188:	bf94      	ite	ls
    918a:	4490      	addls	r8, r2
    918c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    918e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    9192:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9194:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9196:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    919a:	2b00      	cmp	r3, #0
    919c:	d1f7      	bne.n	918e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    919e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91a0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    91a4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    91a6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    91aa:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    91ae:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    91b2:	bf94      	ite	ls
    91b4:	4462      	addls	r2, ip
    91b6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    91ba:	eba2 0208 	sub.w	r2, r2, r8
    91be:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    91c2:	d306      	bcc.n	91d2 <delay+0x8a>
			if (--msec == 0) return;
    91c4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    91c8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    91cc:	d1df      	bne.n	918e <delay+0x46>
}
    91ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    91d2:	f001 fa8b 	bl	a6ec <yield>
		while ((micros() - start) >= 1000) {
    91d6:	4904      	ldr	r1, [pc, #16]	; (91e8 <delay+0xa0>)
    91d8:	e7d9      	b.n	918e <delay+0x46>
    91da:	bf00      	nop
    91dc:	20018870 	.word	0x20018870
    91e0:	2001886c 	.word	0x2001886c
    91e4:	20018868 	.word	0x20018868
    91e8:	e0001000 	.word	0xe0001000
    91ec:	20018864 	.word	0x20018864

000091f0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    91f0:	2836      	cmp	r0, #54	; 0x36
    91f2:	d829      	bhi.n	9248 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    91f4:	4b16      	ldr	r3, [pc, #88]	; (9250 <pinMode+0x60>)
    91f6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    91f8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    91fa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    91fe:	589a      	ldr	r2, [r3, r2]
{
    9200:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9202:	6853      	ldr	r3, [r2, #4]
    9204:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9206:	d00e      	beq.n	9226 <pinMode+0x36>
    9208:	2904      	cmp	r1, #4
    920a:	d00c      	beq.n	9226 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    920c:	ea23 0304 	bic.w	r3, r3, r4
    9210:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9212:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    9214:	b1a9      	cbz	r1, 9242 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    9216:	2902      	cmp	r1, #2
    9218:	d017      	beq.n	924a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    921a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    921c:	bf0c      	ite	eq
    921e:	4a0d      	ldreq	r2, [pc, #52]	; (9254 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9220:	4a0d      	ldrne	r2, [pc, #52]	; (9258 <pinMode+0x68>)
    9222:	601a      	str	r2, [r3, #0]
    9224:	e007      	b.n	9236 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9226:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    9228:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    922a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    922c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    922e:	d008      	beq.n	9242 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9230:	f640 0238 	movw	r2, #2104	; 0x838
    9234:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9236:	6843      	ldr	r3, [r0, #4]
    9238:	2215      	movs	r2, #21
}
    923a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    923e:	601a      	str	r2, [r3, #0]
}
    9240:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9242:	2238      	movs	r2, #56	; 0x38
    9244:	601a      	str	r2, [r3, #0]
    9246:	e7f6      	b.n	9236 <pinMode+0x46>
    9248:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    924a:	4a04      	ldr	r2, [pc, #16]	; (925c <pinMode+0x6c>)
    924c:	601a      	str	r2, [r3, #0]
    924e:	e7f2      	b.n	9236 <pinMode+0x46>
    9250:	20000d48 	.word	0x20000d48
    9254:	00013038 	.word	0x00013038
    9258:	00010038 	.word	0x00010038
    925c:	0001f038 	.word	0x0001f038

00009260 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9260:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9262:	f7f9 f995 	bl	2590 <setup>
	while (1) {
		loop();
    9266:	f7fd ff25 	bl	70b4 <loop>
		yield();
    926a:	f001 fa3f 	bl	a6ec <yield>
	while (1) {
    926e:	e7fa      	b.n	9266 <main+0x6>

00009270 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9270:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9272:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9276:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    927a:	d16d      	bne.n	9358 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    927c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    927e:	d341      	bcc.n	9304 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9280:	f851 3b04 	ldr.w	r3, [r1], #4
    9284:	f840 3b04 	str.w	r3, [r0], #4
    9288:	f851 3b04 	ldr.w	r3, [r1], #4
    928c:	f840 3b04 	str.w	r3, [r0], #4
    9290:	f851 3b04 	ldr.w	r3, [r1], #4
    9294:	f840 3b04 	str.w	r3, [r0], #4
    9298:	f851 3b04 	ldr.w	r3, [r1], #4
    929c:	f840 3b04 	str.w	r3, [r0], #4
    92a0:	f851 3b04 	ldr.w	r3, [r1], #4
    92a4:	f840 3b04 	str.w	r3, [r0], #4
    92a8:	f851 3b04 	ldr.w	r3, [r1], #4
    92ac:	f840 3b04 	str.w	r3, [r0], #4
    92b0:	f851 3b04 	ldr.w	r3, [r1], #4
    92b4:	f840 3b04 	str.w	r3, [r0], #4
    92b8:	f851 3b04 	ldr.w	r3, [r1], #4
    92bc:	f840 3b04 	str.w	r3, [r0], #4
    92c0:	f851 3b04 	ldr.w	r3, [r1], #4
    92c4:	f840 3b04 	str.w	r3, [r0], #4
    92c8:	f851 3b04 	ldr.w	r3, [r1], #4
    92cc:	f840 3b04 	str.w	r3, [r0], #4
    92d0:	f851 3b04 	ldr.w	r3, [r1], #4
    92d4:	f840 3b04 	str.w	r3, [r0], #4
    92d8:	f851 3b04 	ldr.w	r3, [r1], #4
    92dc:	f840 3b04 	str.w	r3, [r0], #4
    92e0:	f851 3b04 	ldr.w	r3, [r1], #4
    92e4:	f840 3b04 	str.w	r3, [r0], #4
    92e8:	f851 3b04 	ldr.w	r3, [r1], #4
    92ec:	f840 3b04 	str.w	r3, [r0], #4
    92f0:	f851 3b04 	ldr.w	r3, [r1], #4
    92f4:	f840 3b04 	str.w	r3, [r0], #4
    92f8:	f851 3b04 	ldr.w	r3, [r1], #4
    92fc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9300:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9302:	d2bd      	bcs.n	9280 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9304:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9306:	d311      	bcc.n	932c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9308:	f851 3b04 	ldr.w	r3, [r1], #4
    930c:	f840 3b04 	str.w	r3, [r0], #4
    9310:	f851 3b04 	ldr.w	r3, [r1], #4
    9314:	f840 3b04 	str.w	r3, [r0], #4
    9318:	f851 3b04 	ldr.w	r3, [r1], #4
    931c:	f840 3b04 	str.w	r3, [r0], #4
    9320:	f851 3b04 	ldr.w	r3, [r1], #4
    9324:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9328:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    932a:	d2ed      	bcs.n	9308 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    932c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    932e:	d305      	bcc.n	933c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9330:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9334:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9338:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    933a:	d2f9      	bcs.n	9330 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    933c:	3204      	adds	r2, #4
	beq	.Ldone
    933e:	d008      	beq.n	9352 <memcpy+0xe2>

	lsls	r2, r2, #31
    9340:	07d2      	lsls	r2, r2, #31
	itt ne
    9342:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9344:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9348:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    934c:	d301      	bcc.n	9352 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    934e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9350:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9352:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9354:	4770      	bx	lr
    9356:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9358:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    935a:	d313      	bcc.n	9384 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    935c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    935e:	d08d      	beq.n	927c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9360:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9364:	d08a      	beq.n	927c <memcpy+0xc>

	rsb	r3, #4
    9366:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    936a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    936c:	07db      	lsls	r3, r3, #31
	itt ne
    936e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9370:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9374:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9378:	d380      	bcc.n	927c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    937a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    937e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9382:	e77b      	b.n	927c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9384:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9386:	d3d9      	bcc.n	933c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9388:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    938a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    938e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9392:	d2f9      	bcs.n	9388 <memcpy+0x118>

	ldrb	r3, [r1]
    9394:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9396:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9398:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    939a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    939c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    939e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    93a0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    93a2:	4770      	bx	lr

000093a4 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    93a4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    93a8:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    93aa:	4666      	mov	r6, ip
	int i=0, j;
    93ac:	2400      	movs	r4, #0
    93ae:	e000      	b.n	93b2 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    93b0:	3401      	adds	r4, #1
		digit = val % radix;
    93b2:	fbb0 f5f2 	udiv	r5, r0, r2
    93b6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    93ba:	2b09      	cmp	r3, #9
    93bc:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    93c0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    93c4:	fa5f fe8e 	uxtb.w	lr, lr
    93c8:	bf98      	it	ls
    93ca:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    93ce:	4290      	cmp	r0, r2
		val /= radix;
    93d0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    93d2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    93d6:	d2eb      	bcs.n	93b0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    93d8:	1c63      	adds	r3, r4, #1
    93da:	2200      	movs	r2, #0
    93dc:	18c8      	adds	r0, r1, r3
    93de:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    93e0:	b17c      	cbz	r4, 9402 <ultoa+0x5e>
		t = buf[j];
    93e2:	4662      	mov	r2, ip
    93e4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    93e8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    93ec:	eba1 030c 	sub.w	r3, r1, ip
    93f0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    93f2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    93f6:	3b01      	subs	r3, #1
    93f8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    93fa:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    93fc:	4423      	add	r3, r4
    93fe:	429a      	cmp	r2, r3
    9400:	dbef      	blt.n	93e2 <ultoa+0x3e>
	}
	return buf;
}
    9402:	4608      	mov	r0, r1
    9404:	bd70      	pop	{r4, r5, r6, pc}
    9406:	bf00      	nop

00009408 <unused_interrupt_vector>:
	__disable_irq();
    9408:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    940a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    940e:	4c4f      	ldr	r4, [pc, #316]	; (954c <unused_interrupt_vector+0x144>)
    9410:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    9414:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    9418:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    941c:	4e4c      	ldr	r6, [pc, #304]	; (9550 <unused_interrupt_vector+0x148>)
	while (p < end) {
    941e:	4d4d      	ldr	r5, [pc, #308]	; (9554 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    9420:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    9424:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    9428:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    942c:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    9430:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    9434:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    9438:	6993      	ldr	r3, [r2, #24]
    943a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    943e:	69d3      	ldr	r3, [r2, #28]
    9440:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    9444:	f000 f8d0 	bl	95e8 <tempmonGetTemp>
    9448:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    944c:	f001 fc2a 	bl	aca4 <rtc_get>
	info->len = sizeof(*info) / 4;
    9450:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    9452:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    9456:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    945a:	460b      	mov	r3, r1
    945c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9460:	493d      	ldr	r1, [pc, #244]	; (9558 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    9462:	1d30      	adds	r0, r6, #4
    9464:	405a      	eors	r2, r3
    9466:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9468:	f002 0301 	and.w	r3, r2, #1
    946c:	3c01      	subs	r4, #1
    946e:	fb01 f303 	mul.w	r3, r1, r3
    9472:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    9476:	d1f7      	bne.n	9468 <unused_interrupt_vector+0x60>
	while (p < end) {
    9478:	42a8      	cmp	r0, r5
    947a:	d002      	beq.n	9482 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    947c:	6873      	ldr	r3, [r6, #4]
    947e:	4606      	mov	r6, r0
    9480:	e7ef      	b.n	9462 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    9482:	4b32      	ldr	r3, [pc, #200]	; (954c <unused_interrupt_vector+0x144>)
    9484:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9488:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    948c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9490:	492f      	ldr	r1, [pc, #188]	; (9550 <unused_interrupt_vector+0x148>)
    9492:	4a32      	ldr	r2, [pc, #200]	; (955c <unused_interrupt_vector+0x154>)
    9494:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    9498:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    949c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    94a0:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    94a4:	4a2e      	ldr	r2, [pc, #184]	; (9560 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    94a6:	2502      	movs	r5, #2
    94a8:	482e      	ldr	r0, [pc, #184]	; (9564 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    94aa:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    94ac:	492e      	ldr	r1, [pc, #184]	; (9568 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    94ae:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    94b2:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    94b4:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    94b6:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    94b8:	482c      	ldr	r0, [pc, #176]	; (956c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    94ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    94be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94c2:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    94c4:	680b      	ldr	r3, [r1, #0]
    94c6:	4283      	cmp	r3, r0
    94c8:	d83d      	bhi.n	9546 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    94ca:	4d26      	ldr	r5, [pc, #152]	; (9564 <unused_interrupt_vector+0x15c>)
    94cc:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    94ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    94d2:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    94d6:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    94d8:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    94da:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    94de:	4924      	ldr	r1, [pc, #144]	; (9570 <unused_interrupt_vector+0x168>)
    94e0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    94e4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    94e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    94ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    94f0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    94f4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    94f8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    94fc:	e001      	b.n	9502 <unused_interrupt_vector+0xfa>
		usb_isr();
    94fe:	f000 f965 	bl	97cc <usb_isr>
		if (PIT_TFLG0) {
    9502:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    9506:	2b00      	cmp	r3, #0
    9508:	d0f9      	beq.n	94fe <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    950a:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    950c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    9510:	2c4f      	cmp	r4, #79	; 0x4f
    9512:	d9f4      	bls.n	94fe <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9514:	4b17      	ldr	r3, [pc, #92]	; (9574 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    9516:	2002      	movs	r0, #2
    9518:	4917      	ldr	r1, [pc, #92]	; (9578 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    951a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    951e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    9522:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9524:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    9528:	b93b      	cbnz	r3, 953a <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    952a:	4814      	ldr	r0, [pc, #80]	; (957c <unused_interrupt_vector+0x174>)
    952c:	4914      	ldr	r1, [pc, #80]	; (9580 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    952e:	4a0d      	ldr	r2, [pc, #52]	; (9564 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    9530:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    9532:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    9536:	2b00      	cmp	r3, #0
    9538:	d0fa      	beq.n	9530 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    953a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    953e:	4a11      	ldr	r2, [pc, #68]	; (9584 <unused_interrupt_vector+0x17c>)
    9540:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    9544:	e7fe      	b.n	9544 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9546:	f001 f97d 	bl	a844 <set_arm_clock>
    954a:	e7be      	b.n	94ca <unused_interrupt_vector+0xc2>
    954c:	2027ff00 	.word	0x2027ff00
    9550:	2027ff80 	.word	0x2027ff80
    9554:	2027ffa8 	.word	0x2027ffa8
    9558:	edb88320 	.word	0xedb88320
    955c:	2027ffa0 	.word	0x2027ffa0
    9560:	400fc000 	.word	0x400fc000
    9564:	40084000 	.word	0x40084000
    9568:	200043f4 	.word	0x200043f4
    956c:	0bcd3d80 	.word	0x0bcd3d80
    9570:	00249f00 	.word	0x00249f00
    9574:	400d9000 	.word	0x400d9000
    9578:	402e0000 	.word	0x402e0000
    957c:	400f8000 	.word	0x400f8000
    9580:	0bad00f1 	.word	0x0bad00f1
    9584:	05fa0004 	.word	0x05fa0004

00009588 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    9588:	490a      	ldr	r1, [pc, #40]	; (95b4 <_sbrk+0x2c>)
    958a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    958c:	b138      	cbz	r0, 959e <_sbrk+0x16>
{
    958e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    9590:	1813      	adds	r3, r2, r0
    9592:	4809      	ldr	r0, [pc, #36]	; (95b8 <_sbrk+0x30>)
    9594:	4283      	cmp	r3, r0
    9596:	d804      	bhi.n	95a2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9598:	4610      	mov	r0, r2
                __brkval = prev + incr;
    959a:	600b      	str	r3, [r1, #0]
}
    959c:	bd08      	pop	{r3, pc}
    959e:	4610      	mov	r0, r2
    95a0:	4770      	bx	lr
                        errno = ENOMEM;
    95a2:	f002 fdc9 	bl	c138 <__errno>
    95a6:	230c      	movs	r3, #12
                        return (void *)-1;
    95a8:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    95ac:	6003      	str	r3, [r0, #0]
}
    95ae:	4610      	mov	r0, r2
    95b0:	bd08      	pop	{r3, pc}
    95b2:	bf00      	nop
    95b4:	2000440c 	.word	0x2000440c
    95b8:	20280000 	.word	0x20280000

000095bc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    95bc:	2000      	movs	r0, #0
    95be:	4770      	bx	lr

000095c0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    95c0:	f04f 30ff 	mov.w	r0, #4294967295
    95c4:	4770      	bx	lr
    95c6:	bf00      	nop

000095c8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    95c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    95cc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    95ce:	604b      	str	r3, [r1, #4]
}
    95d0:	4770      	bx	lr
    95d2:	bf00      	nop

000095d4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    95d4:	2001      	movs	r0, #1
    95d6:	4770      	bx	lr

000095d8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    95d8:	f04f 30ff 	mov.w	r0, #4294967295
    95dc:	4770      	bx	lr
    95de:	bf00      	nop

000095e0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    95e0:	bf30      	wfi
    95e2:	e7fd      	b.n	95e0 <abort>

000095e4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    95e4:	f7ff bf10 	b.w	9408 <unused_interrupt_vector>

000095e8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    95e8:	4a12      	ldr	r2, [pc, #72]	; (9634 <tempmonGetTemp+0x4c>)
    95ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    95ee:	075b      	lsls	r3, r3, #29
    95f0:	d5fb      	bpl.n	95ea <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    95f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    95f6:	4810      	ldr	r0, [pc, #64]	; (9638 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    95f8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    95fc:	490f      	ldr	r1, [pc, #60]	; (963c <tempmonGetTemp+0x54>)
    95fe:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9602:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9606:	ed91 6a00 	vldr	s12, [r1]
    960a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    960e:	4a0c      	ldr	r2, [pc, #48]	; (9640 <tempmonGetTemp+0x58>)
    9610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9614:	4b0b      	ldr	r3, [pc, #44]	; (9644 <tempmonGetTemp+0x5c>)
    9616:	edd2 6a00 	vldr	s13, [r2]
    961a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    961e:	ed93 7a00 	vldr	s14, [r3]
    9622:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    9626:	ee67 7a86 	vmul.f32	s15, s15, s12
    962a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    962e:	ee37 0a40 	vsub.f32	s0, s14, s0
    9632:	4770      	bx	lr
    9634:	400d8100 	.word	0x400d8100
    9638:	20018854 	.word	0x20018854
    963c:	2001885c 	.word	0x2001885c
    9640:	20018860 	.word	0x20018860
    9644:	20018858 	.word	0x20018858

00009648 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9648:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    964a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    964c:	b11b      	cbz	r3, 9656 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    964e:	6853      	ldr	r3, [r2, #4]
    9650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9654:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    9656:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    9658:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    965a:	b33c      	cbz	r4, 96ac <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    965c:	4b1a      	ldr	r3, [pc, #104]	; (96c8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    965e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9660:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    9664:	420c      	tst	r4, r1
    9666:	d11d      	bne.n	96a4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    9668:	4e18      	ldr	r6, [pc, #96]	; (96cc <schedule_transfer+0x84>)
    966a:	6877      	ldr	r7, [r6, #4]
    966c:	e004      	b.n	9678 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    966e:	6874      	ldr	r4, [r6, #4]
    9670:	1be4      	subs	r4, r4, r7
    9672:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    9676:	d20b      	bcs.n	9690 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    9678:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    967c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    9680:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    9684:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9688:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    968c:	0464      	lsls	r4, r4, #17
    968e:	d5ee      	bpl.n	966e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9690:	400d      	ands	r5, r1
    9692:	d107      	bne.n	96a4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    9694:	4c0c      	ldr	r4, [pc, #48]	; (96c8 <schedule_transfer+0x80>)
		endpoint->status = 0;
    9696:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    969a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    969e:	430b      	orrs	r3, r1
    96a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    96a4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    96a6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    96a8:	bcf0      	pop	{r4, r5, r6, r7}
    96aa:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    96ac:	4d06      	ldr	r5, [pc, #24]	; (96c8 <schedule_transfer+0x80>)
	endpoint->status = 0;
    96ae:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    96b2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    96b6:	430b      	orrs	r3, r1
    96b8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    96bc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    96be:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    96c0:	b662      	cpsie	i
}
    96c2:	bcf0      	pop	{r4, r5, r6, r7}
    96c4:	4770      	bx	lr
    96c6:	bf00      	nop
    96c8:	402e0000 	.word	0x402e0000
    96cc:	e0001000 	.word	0xe0001000

000096d0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    96d0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    96d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    96d4:	b19d      	cbz	r5, 96fe <run_callbacks+0x2e>
    96d6:	4606      	mov	r6, r0
    96d8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    96da:	2400      	movs	r4, #0
    96dc:	e003      	b.n	96e6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    96de:	6812      	ldr	r2, [r2, #0]
		count++;
    96e0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    96e2:	2a01      	cmp	r2, #1
    96e4:	d00c      	beq.n	9700 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    96e6:	6853      	ldr	r3, [r2, #4]
    96e8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    96ec:	d0f7      	beq.n	96de <run_callbacks+0xe>
			ep->first_transfer = t;
    96ee:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    96f0:	b12c      	cbz	r4, 96fe <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    96f2:	4628      	mov	r0, r5
		ep->callback_function(first);
    96f4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    96f6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    96f8:	4798      	blx	r3
	while (count) {
    96fa:	3c01      	subs	r4, #1
    96fc:	d1f9      	bne.n	96f2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    96fe:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    9700:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    9704:	e7f4      	b.n	96f0 <run_callbacks+0x20>
    9706:	bf00      	nop

00009708 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    9708:	b430      	push	{r4, r5}
	if (len > 0) {
    970a:	b9d9      	cbnz	r1, 9744 <endpoint0_transmit.constprop.0+0x3c>
    970c:	4c1f      	ldr	r4, [pc, #124]	; (978c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    970e:	4b20      	ldr	r3, [pc, #128]	; (9790 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    9710:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9712:	4a20      	ldr	r2, [pc, #128]	; (9794 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    9714:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9716:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    971a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    971c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    971e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9722:	2480      	movs	r4, #128	; 0x80
    9724:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9726:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    972a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    972e:	481a      	ldr	r0, [pc, #104]	; (9798 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    9730:	432b      	orrs	r3, r5
    9732:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9736:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    9738:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    973c:	2b00      	cmp	r3, #0
    973e:	d1fb      	bne.n	9738 <endpoint0_transmit.constprop.0+0x30>
}
    9740:	bc30      	pop	{r4, r5}
    9742:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9744:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    9746:	4b15      	ldr	r3, [pc, #84]	; (979c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9748:	4c10      	ldr	r4, [pc, #64]	; (978c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    974a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    974c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9750:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    9752:	4a10      	ldr	r2, [pc, #64]	; (9794 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9754:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9756:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    975a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    975c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    975e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9762:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9764:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9766:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    976a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    976e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    9770:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9772:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    9774:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    9776:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    977a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    977e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9782:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    9786:	2b00      	cmp	r3, #0
    9788:	d1fb      	bne.n	9782 <endpoint0_transmit.constprop.0+0x7a>
    978a:	e7c0      	b.n	970e <endpoint0_transmit.constprop.0+0x6>
    978c:	20000000 	.word	0x20000000
    9790:	20004ec0 	.word	0x20004ec0
    9794:	402e0000 	.word	0x402e0000
    9798:	200053d4 	.word	0x200053d4
    979c:	20004ee0 	.word	0x20004ee0

000097a0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    97a0:	4908      	ldr	r1, [pc, #32]	; (97c4 <usb_stop_sof_interrupts+0x24>)
    97a2:	2201      	movs	r2, #1
    97a4:	780b      	ldrb	r3, [r1, #0]
    97a6:	fa02 f000 	lsl.w	r0, r2, r0
    97aa:	ea23 0000 	bic.w	r0, r3, r0
    97ae:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    97b0:	b930      	cbnz	r0, 97c0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    97b2:	4a05      	ldr	r2, [pc, #20]	; (97c8 <usb_stop_sof_interrupts+0x28>)
    97b4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    97b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    97bc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    97c0:	4770      	bx	lr
    97c2:	bf00      	nop
    97c4:	200188b0 	.word	0x200188b0
    97c8:	402e0000 	.word	0x402e0000

000097cc <usb_isr>:
{
    97cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    97d0:	4c97      	ldr	r4, [pc, #604]	; (9a30 <usb_isr+0x264>)
{
    97d2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    97d4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    97d8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    97da:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    97de:	d553      	bpl.n	9888 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    97e0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    97e4:	2a00      	cmp	r2, #0
    97e6:	d04a      	beq.n	987e <usb_isr+0xb2>
    97e8:	4e92      	ldr	r6, [pc, #584]	; (9a34 <usb_isr+0x268>)
    97ea:	f8df a260 	ldr.w	sl, [pc, #608]	; 9a4c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    97ee:	f8df 9274 	ldr.w	r9, [pc, #628]	; 9a64 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    97f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 9a68 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    97f6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 9a6c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    97fa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    97fe:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9802:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9806:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    980a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    980e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9812:	049d      	lsls	r5, r3, #18
    9814:	d5f5      	bpl.n	9802 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    9816:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    981a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    981e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9822:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9826:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    982a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    982e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    9832:	d1fa      	bne.n	982a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    9834:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    9836:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    9838:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    983c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    9840:	f000 81cf 	beq.w	9be2 <usb_isr+0x416>
    9844:	f200 80db 	bhi.w	99fe <usb_isr+0x232>
    9848:	f240 3102 	movw	r1, #770	; 0x302
    984c:	428b      	cmp	r3, r1
    984e:	f000 81e7 	beq.w	9c20 <usb_isr+0x454>
    9852:	f200 809a 	bhi.w	998a <usb_isr+0x1be>
    9856:	2b82      	cmp	r3, #130	; 0x82
    9858:	f000 81cb 	beq.w	9bf2 <usb_isr+0x426>
    985c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9860:	f040 808a 	bne.w	9978 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    9864:	f010 0f78 	tst.w	r0, #120	; 0x78
    9868:	b283      	uxth	r3, r0
    986a:	f000 8203 	beq.w	9c74 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    986e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9872:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9876:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    987a:	2a00      	cmp	r2, #0
    987c:	d1bd      	bne.n	97fa <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    987e:	4a6c      	ldr	r2, [pc, #432]	; (9a30 <usb_isr+0x264>)
    9880:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    9884:	2b00      	cmp	r3, #0
    9886:	d142      	bne.n	990e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    9888:	067e      	lsls	r6, r7, #25
    988a:	d516      	bpl.n	98ba <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    988c:	4b68      	ldr	r3, [pc, #416]	; (9a30 <usb_isr+0x264>)
    988e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    9892:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    9896:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    989a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    989e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    98a2:	2c00      	cmp	r4, #0
    98a4:	d1fb      	bne.n	989e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    98a6:	f04f 32ff 	mov.w	r2, #4294967295
    98aa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    98ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    98b2:	f000 fd29 	bl	a308 <usb_serial_reset>
		endpointN_notify_mask = 0;
    98b6:	4b60      	ldr	r3, [pc, #384]	; (9a38 <usb_isr+0x26c>)
    98b8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    98ba:	01fc      	lsls	r4, r7, #7
    98bc:	d503      	bpl.n	98c6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    98be:	4b5f      	ldr	r3, [pc, #380]	; (9a3c <usb_isr+0x270>)
    98c0:	681b      	ldr	r3, [r3, #0]
    98c2:	b103      	cbz	r3, 98c6 <usb_isr+0xfa>
    98c4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    98c6:	01b8      	lsls	r0, r7, #6
    98c8:	d503      	bpl.n	98d2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    98ca:	4b5d      	ldr	r3, [pc, #372]	; (9a40 <usb_isr+0x274>)
    98cc:	681b      	ldr	r3, [r3, #0]
    98ce:	b103      	cbz	r3, 98d2 <usb_isr+0x106>
    98d0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    98d2:	0779      	lsls	r1, r7, #29
    98d4:	d508      	bpl.n	98e8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    98d6:	4b56      	ldr	r3, [pc, #344]	; (9a30 <usb_isr+0x264>)
    98d8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    98dc:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    98e0:	d047      	beq.n	9972 <usb_isr+0x1a6>
			usb_high_speed = 1;
    98e2:	4b58      	ldr	r3, [pc, #352]	; (9a44 <usb_isr+0x278>)
    98e4:	2201      	movs	r2, #1
    98e6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    98e8:	4b51      	ldr	r3, [pc, #324]	; (9a30 <usb_isr+0x264>)
    98ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    98ee:	061a      	lsls	r2, r3, #24
    98f0:	d50a      	bpl.n	9908 <usb_isr+0x13c>
    98f2:	063b      	lsls	r3, r7, #24
    98f4:	d508      	bpl.n	9908 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    98f6:	4a54      	ldr	r2, [pc, #336]	; (9a48 <usb_isr+0x27c>)
    98f8:	7813      	ldrb	r3, [r2, #0]
    98fa:	b12b      	cbz	r3, 9908 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    98fc:	3b01      	subs	r3, #1
    98fe:	b2db      	uxtb	r3, r3
    9900:	7013      	strb	r3, [r2, #0]
    9902:	2b00      	cmp	r3, #0
    9904:	f000 8272 	beq.w	9dec <usb_isr+0x620>
}
    9908:	b003      	add	sp, #12
    990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    990e:	494f      	ldr	r1, [pc, #316]	; (9a4c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    9910:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    9914:	6808      	ldr	r0, [r1, #0]
    9916:	4203      	tst	r3, r0
    9918:	f040 81d1 	bne.w	9cbe <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    991c:	4a46      	ldr	r2, [pc, #280]	; (9a38 <usb_isr+0x26c>)
    991e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    9920:	401c      	ands	r4, r3
    9922:	d0b1      	beq.n	9888 <usb_isr+0xbc>
				while (tx) {
    9924:	ea5f 4814 	movs.w	r8, r4, lsr #16
    9928:	d010      	beq.n	994c <usb_isr+0x180>
    992a:	4e42      	ldr	r6, [pc, #264]	; (9a34 <usb_isr+0x268>)
					tx &= ~(1<<p);
    992c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    9930:	fa98 f5a8 	rbit	r5, r8
    9934:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9938:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    993c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9940:	3040      	adds	r0, #64	; 0x40
    9942:	f7ff fec5 	bl	96d0 <run_callbacks>
				while (tx) {
    9946:	ea38 0805 	bics.w	r8, r8, r5
    994a:	d1f1      	bne.n	9930 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    994c:	b2a4      	uxth	r4, r4
				while(rx) {
    994e:	2c00      	cmp	r4, #0
    9950:	d09a      	beq.n	9888 <usb_isr+0xbc>
    9952:	4e38      	ldr	r6, [pc, #224]	; (9a34 <usb_isr+0x268>)
					rx &= ~(1<<p);
    9954:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    9958:	fa94 f5a4 	rbit	r5, r4
    995c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    9960:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    9964:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    9968:	f7ff feb2 	bl	96d0 <run_callbacks>
				while(rx) {
    996c:	43ac      	bics	r4, r5
    996e:	d1f3      	bne.n	9958 <usb_isr+0x18c>
    9970:	e78a      	b.n	9888 <usb_isr+0xbc>
			usb_high_speed = 0;
    9972:	4a34      	ldr	r2, [pc, #208]	; (9a44 <usb_isr+0x278>)
    9974:	7013      	strb	r3, [r2, #0]
    9976:	e7b7      	b.n	98e8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    9978:	2b80      	cmp	r3, #128	; 0x80
    997a:	f47f af78 	bne.w	986e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    997e:	4834      	ldr	r0, [pc, #208]	; (9a50 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    9980:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    9982:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    9984:	f7ff fec0 	bl	9708 <endpoint0_transmit.constprop.0>
		return;
    9988:	e775      	b.n	9876 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    998a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    998e:	f000 810b 	beq.w	9ba8 <usb_isr+0x3dc>
    9992:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    9996:	2b01      	cmp	r3, #1
    9998:	f63f af69 	bhi.w	986e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    999c:	4b2d      	ldr	r3, [pc, #180]	; (9a54 <usb_isr+0x288>)
    999e:	685d      	ldr	r5, [r3, #4]
    99a0:	2d00      	cmp	r5, #0
    99a2:	f43f af64 	beq.w	986e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    99a6:	fa1f fc8c 	uxth.w	ip, ip
    99aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    99ae:	e004      	b.n	99ba <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    99b0:	691d      	ldr	r5, [r3, #16]
    99b2:	330c      	adds	r3, #12
    99b4:	2d00      	cmp	r5, #0
    99b6:	f43f af5a 	beq.w	986e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    99ba:	881a      	ldrh	r2, [r3, #0]
    99bc:	4572      	cmp	r2, lr
    99be:	d1f7      	bne.n	99b0 <usb_isr+0x1e4>
    99c0:	885a      	ldrh	r2, [r3, #2]
    99c2:	4562      	cmp	r2, ip
    99c4:	d1f4      	bne.n	99b0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    99c6:	ea4f 221e 	mov.w	r2, lr, lsr #8
    99ca:	2a03      	cmp	r2, #3
    99cc:	f000 81a5 	beq.w	9d1a <usb_isr+0x54e>
					datalen = list->length;
    99d0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    99d2:	0c00      	lsrs	r0, r0, #16
    99d4:	4282      	cmp	r2, r0
    99d6:	bf28      	it	cs
    99d8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    99da:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    99de:	f040 81a1 	bne.w	9d24 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    99e2:	4b18      	ldr	r3, [pc, #96]	; (9a44 <usb_isr+0x278>)
    99e4:	491c      	ldr	r1, [pc, #112]	; (9a58 <usb_isr+0x28c>)
    99e6:	7818      	ldrb	r0, [r3, #0]
    99e8:	4b1c      	ldr	r3, [pc, #112]	; (9a5c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    99ea:	9201      	str	r2, [sp, #4]
    99ec:	2800      	cmp	r0, #0
    99ee:	bf18      	it	ne
    99f0:	4619      	movne	r1, r3
    99f2:	481b      	ldr	r0, [pc, #108]	; (9a60 <usb_isr+0x294>)
    99f4:	f7ff fc3c 	bl	9270 <memcpy>
    99f8:	4d19      	ldr	r5, [pc, #100]	; (9a60 <usb_isr+0x294>)
    99fa:	9a01      	ldr	r2, [sp, #4]
    99fc:	e1e1      	b.n	9dc2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    99fe:	f242 2121 	movw	r1, #8737	; 0x2221
    9a02:	428b      	cmp	r3, r1
    9a04:	d07c      	beq.n	9b00 <usb_isr+0x334>
    9a06:	d933      	bls.n	9a70 <usb_isr+0x2a4>
    9a08:	f242 3121 	movw	r1, #8993	; 0x2321
    9a0c:	428b      	cmp	r3, r1
    9a0e:	f000 8081 	beq.w	9b14 <usb_isr+0x348>
    9a12:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    9a16:	428b      	cmp	r3, r1
    9a18:	f47f af29 	bne.w	986e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    9a1c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    9a20:	b283      	uxth	r3, r0
    9a22:	f47f af24 	bne.w	986e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    9a26:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    9a2a:	f363 0c0f 	bfi	ip, r3, #0, #16
    9a2e:	e7b5      	b.n	999c <usb_isr+0x1d0>
    9a30:	402e0000 	.word	0x402e0000
    9a34:	20000000 	.word	0x20000000
    9a38:	200053d8 	.word	0x200053d8
    9a3c:	20018880 	.word	0x20018880
    9a40:	20018884 	.word	0x20018884
    9a44:	200188b6 	.word	0x200188b6
    9a48:	200188b7 	.word	0x200188b7
    9a4c:	200053d4 	.word	0x200053d4
    9a50:	2001881c 	.word	0x2001881c
    9a54:	20001228 	.word	0x20001228
    9a58:	60001e84 	.word	0x60001e84
    9a5c:	60001ee8 	.word	0x60001ee8
    9a60:	20200000 	.word	0x20200000
    9a64:	200053cc 	.word	0x200053cc
    9a68:	b8c6cf5d 	.word	0xb8c6cf5d
    9a6c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    9a70:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9a74:	d066      	beq.n	9b44 <usb_isr+0x378>
    9a76:	f242 0121 	movw	r1, #8225	; 0x2021
    9a7a:	428b      	cmp	r3, r1
    9a7c:	f47f aef7 	bne.w	986e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    9a80:	0c03      	lsrs	r3, r0, #16
    9a82:	2b07      	cmp	r3, #7
    9a84:	f47f aef3 	bne.w	986e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    9a88:	4bb2      	ldr	r3, [pc, #712]	; (9d54 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9a8a:	49b3      	ldr	r1, [pc, #716]	; (9d58 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    9a8c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9a8e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    9a90:	49b2      	ldr	r1, [pc, #712]	; (9d5c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9a92:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9a94:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    9a98:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    9a9c:	2201      	movs	r2, #1
    9a9e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9aa0:	4aaf      	ldr	r2, [pc, #700]	; (9d60 <usb_isr+0x594>)
    9aa2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9aa4:	4aaf      	ldr	r2, [pc, #700]	; (9d64 <usb_isr+0x598>)
    9aa6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    9aa8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    9aac:	f041 0101 	orr.w	r1, r1, #1
    9ab0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9ab4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9ab8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9abc:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9abe:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    9ac0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d1fb      	bne.n	9ac0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    9ac8:	4aa7      	ldr	r2, [pc, #668]	; (9d68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9aca:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9acc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    9ace:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9ad0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9ad2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9ad4:	f248 0380 	movw	r3, #32896	; 0x8080
    9ad8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9ada:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9ade:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9ae2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9aea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9af2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    9af6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9afa:	2b00      	cmp	r3, #0
    9afc:	d1fb      	bne.n	9af6 <usb_isr+0x32a>
    9afe:	e6ba      	b.n	9876 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9b00:	b280      	uxth	r0, r0
    9b02:	b938      	cbnz	r0, 9b14 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b04:	4b99      	ldr	r3, [pc, #612]	; (9d6c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    9b06:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b0a:	6819      	ldr	r1, [r3, #0]
    9b0c:	4b98      	ldr	r3, [pc, #608]	; (9d70 <usb_isr+0x5a4>)
    9b0e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9b10:	4b98      	ldr	r3, [pc, #608]	; (9d74 <usb_isr+0x5a8>)
    9b12:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    9b14:	4b94      	ldr	r3, [pc, #592]	; (9d68 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    9b16:	2200      	movs	r2, #0
    9b18:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    9b1a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9b1c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9b1e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9b20:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9b22:	2280      	movs	r2, #128	; 0x80
    9b24:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9b26:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9b2a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9b2e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9b36:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9b3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d1fb      	bne.n	9b3a <usb_isr+0x36e>
    9b42:	e698      	b.n	9876 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    9b44:	f3c2 4207 	ubfx	r2, r2, #16, #8
    9b48:	4b8b      	ldr	r3, [pc, #556]	; (9d78 <usb_isr+0x5ac>)
    9b4a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9b4c:	4b8b      	ldr	r3, [pc, #556]	; (9d7c <usb_isr+0x5b0>)
    9b4e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9b52:	4b8b      	ldr	r3, [pc, #556]	; (9d80 <usb_isr+0x5b4>)
    9b54:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    9b58:	4b8a      	ldr	r3, [pc, #552]	; (9d84 <usb_isr+0x5b8>)
    9b5a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    9b5e:	f000 fbd5 	bl	a30c <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    9b62:	2280      	movs	r2, #128	; 0x80
    9b64:	4629      	mov	r1, r5
    9b66:	4888      	ldr	r0, [pc, #544]	; (9d88 <usb_isr+0x5bc>)
    9b68:	f002 f990 	bl	be8c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    9b6c:	4b87      	ldr	r3, [pc, #540]	; (9d8c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9b6e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    9b70:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    9b74:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    9b78:	4b7b      	ldr	r3, [pc, #492]	; (9d68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9b7a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9b7c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    9b7e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9b80:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    9b82:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9b84:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9b86:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9b8a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9b8e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9b96:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9b9a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    9b9e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d1fb      	bne.n	9b9e <usb_isr+0x3d2>
    9ba6:	e666      	b.n	9876 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    9ba8:	4b6f      	ldr	r3, [pc, #444]	; (9d68 <usb_isr+0x59c>)
    9baa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    9bac:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    9bae:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9bb0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9bb2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9bb4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9bb6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9bb8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9bbc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9bc0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9bc8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9bcc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d1fb      	bne.n	9bcc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9bd4:	0c13      	lsrs	r3, r2, #16
    9bd6:	065b      	lsls	r3, r3, #25
    9bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    9bdc:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    9be0:	e649      	b.n	9876 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    9be2:	4b65      	ldr	r3, [pc, #404]	; (9d78 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9be4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    9be6:	486a      	ldr	r0, [pc, #424]	; (9d90 <usb_isr+0x5c4>)
    9be8:	781b      	ldrb	r3, [r3, #0]
    9bea:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9bec:	f7ff fd8c 	bl	9708 <endpoint0_transmit.constprop.0>
		return;
    9bf0:	e641      	b.n	9876 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9bf2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    9bf4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    9bf8:	f47f ae39 	bne.w	986e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    9bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9c00:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    9c04:	4a62      	ldr	r2, [pc, #392]	; (9d90 <usb_isr+0x5c4>)
    9c06:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9c08:	0618      	lsls	r0, r3, #24
    9c0a:	f100 809e 	bmi.w	9d4a <usb_isr+0x57e>
    9c0e:	07cb      	lsls	r3, r1, #31
    9c10:	d501      	bpl.n	9c16 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    9c12:	2301      	movs	r3, #1
    9c14:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    9c16:	2102      	movs	r1, #2
    9c18:	485d      	ldr	r0, [pc, #372]	; (9d90 <usb_isr+0x5c4>)
    9c1a:	f7ff fd75 	bl	9708 <endpoint0_transmit.constprop.0>
		return;
    9c1e:	e62a      	b.n	9876 <usb_isr+0xaa>
		if (endpoint > 7) break;
    9c20:	f010 0f78 	tst.w	r0, #120	; 0x78
    9c24:	b283      	uxth	r3, r0
    9c26:	f47f ae22 	bne.w	986e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    9c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    9c2e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9c32:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    9c36:	bf14      	ite	ne
    9c38:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9c3c:	f043 0301 	orreq.w	r3, r3, #1
    9c40:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9c44:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9c46:	4b48      	ldr	r3, [pc, #288]	; (9d68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9c48:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9c4a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9c4c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9c4e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9c50:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9c52:	2280      	movs	r2, #128	; 0x80
    9c54:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9c56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9c5a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9c5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9c66:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9c6a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d1fb      	bne.n	9c6a <usb_isr+0x49e>
    9c72:	e600      	b.n	9876 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    9c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    9c78:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9c7c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    9c80:	bf14      	ite	ne
    9c82:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    9c86:	f023 0301 	biceq.w	r3, r3, #1
    9c8a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    9c8e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    9c90:	4b35      	ldr	r3, [pc, #212]	; (9d68 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    9c92:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    9c94:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    9c96:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9c98:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    9c9a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9c9c:	2280      	movs	r2, #128	; 0x80
    9c9e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9ca0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    9ca4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9ca8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    9cb0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    9cb4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d1fb      	bne.n	9cb4 <usb_isr+0x4e8>
    9cbc:	e5db      	b.n	9876 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    9cbe:	2000      	movs	r0, #0
    9cc0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    9cc2:	4926      	ldr	r1, [pc, #152]	; (9d5c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9cc4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    9cc6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9cc8:	f242 0121 	movw	r1, #8225	; 0x2021
    9ccc:	428c      	cmp	r4, r1
    9cce:	f47f ae25 	bne.w	991c <usb_isr+0x150>
    9cd2:	b280      	uxth	r0, r0
    9cd4:	2800      	cmp	r0, #0
    9cd6:	f47f ae21 	bne.w	991c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9cda:	492e      	ldr	r1, [pc, #184]	; (9d94 <usb_isr+0x5c8>)
    9cdc:	4c2e      	ldr	r4, [pc, #184]	; (9d98 <usb_isr+0x5cc>)
    9cde:	c903      	ldmia	r1, {r0, r1}
    9ce0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    9ce2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9ce4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    9ce8:	6020      	str	r0, [r4, #0]
    9cea:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    9cec:	f47f ae16 	bne.w	991c <usb_isr+0x150>
	__disable_irq();
    9cf0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    9cf2:	482a      	ldr	r0, [pc, #168]	; (9d9c <usb_isr+0x5d0>)
    9cf4:	7801      	ldrb	r1, [r0, #0]
    9cf6:	f041 0108 	orr.w	r1, r1, #8
    9cfa:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9cfc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9d00:	060d      	lsls	r5, r1, #24
    9d02:	d405      	bmi.n	9d10 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9d04:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9d06:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9d08:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9d0c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    9d10:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9d12:	4a23      	ldr	r2, [pc, #140]	; (9da0 <usb_isr+0x5d4>)
    9d14:	2150      	movs	r1, #80	; 0x50
    9d16:	7011      	strb	r1, [r2, #0]
    9d18:	e600      	b.n	991c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    9d1a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    9d1c:	782a      	ldrb	r2, [r5, #0]
    9d1e:	4282      	cmp	r2, r0
    9d20:	bf28      	it	cs
    9d22:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    9d24:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    9d28:	d144      	bne.n	9db4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    9d2a:	4b1e      	ldr	r3, [pc, #120]	; (9da4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9d2c:	4d1e      	ldr	r5, [pc, #120]	; (9da8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    9d2e:	7818      	ldrb	r0, [r3, #0]
    9d30:	491e      	ldr	r1, [pc, #120]	; (9dac <usb_isr+0x5e0>)
    9d32:	4b1f      	ldr	r3, [pc, #124]	; (9db0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9d34:	9201      	str	r2, [sp, #4]
    9d36:	2800      	cmp	r0, #0
    9d38:	bf18      	it	ne
    9d3a:	4619      	movne	r1, r3
    9d3c:	4628      	mov	r0, r5
    9d3e:	f7ff fa97 	bl	9270 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9d42:	2307      	movs	r3, #7
    9d44:	706b      	strb	r3, [r5, #1]
    9d46:	9a01      	ldr	r2, [sp, #4]
    9d48:	e03b      	b.n	9dc2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9d4a:	03c9      	lsls	r1, r1, #15
    9d4c:	f53f af61 	bmi.w	9c12 <usb_isr+0x446>
    9d50:	e761      	b.n	9c16 <usb_isr+0x44a>
    9d52:	bf00      	nop
    9d54:	20004ee0 	.word	0x20004ee0
    9d58:	200063cc 	.word	0x200063cc
    9d5c:	20005080 	.word	0x20005080
    9d60:	00070080 	.word	0x00070080
    9d64:	200073cc 	.word	0x200073cc
    9d68:	20004ec0 	.word	0x20004ec0
    9d6c:	2001886c 	.word	0x2001886c
    9d70:	2001887c 	.word	0x2001887c
    9d74:	200188b4 	.word	0x200188b4
    9d78:	200188b5 	.word	0x200188b5
    9d7c:	00cc0002 	.word	0x00cc0002
    9d80:	000200c8 	.word	0x000200c8
    9d84:	00c80002 	.word	0x00c80002
    9d88:	20000080 	.word	0x20000080
    9d8c:	74d59319 	.word	0x74d59319
    9d90:	2001881c 	.word	0x2001881c
    9d94:	200053cc 	.word	0x200053cc
    9d98:	20018874 	.word	0x20018874
    9d9c:	200188b0 	.word	0x200188b0
    9da0:	200188b7 	.word	0x200188b7
    9da4:	200188b6 	.word	0x200188b6
    9da8:	20200000 	.word	0x20200000
    9dac:	60001ee8 	.word	0x60001ee8
    9db0:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9db4:	4629      	mov	r1, r5
    9db6:	4d10      	ldr	r5, [pc, #64]	; (9df8 <usb_isr+0x62c>)
    9db8:	9201      	str	r2, [sp, #4]
    9dba:	4628      	mov	r0, r5
    9dbc:	f7ff fa58 	bl	9270 <memcpy>
    9dc0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9dc2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9dc6:	4415      	add	r5, r2
	asm("dsb");
    9dc8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9dcc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    9dd0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    9dd4:	3320      	adds	r3, #32
	} while (location < end_addr);
    9dd6:	429d      	cmp	r5, r3
    9dd8:	d8fa      	bhi.n	9dd0 <usb_isr+0x604>
	asm("dsb");
    9dda:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9dde:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    9de2:	4805      	ldr	r0, [pc, #20]	; (9df8 <usb_isr+0x62c>)
    9de4:	4611      	mov	r1, r2
    9de6:	f7ff fc8f 	bl	9708 <endpoint0_transmit.constprop.0>
				return;
    9dea:	e544      	b.n	9876 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    9dec:	2003      	movs	r0, #3
    9dee:	f7ff fcd7 	bl	97a0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    9df2:	f007 fd45 	bl	11880 <___reboot_Teensyduino__veneer>
    9df6:	bf00      	nop
    9df8:	20200000 	.word	0x20200000

00009dfc <usb_config_rx>:
{
    9dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e00:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9e02:	1e83      	subs	r3, r0, #2
    9e04:	2b02      	cmp	r3, #2
    9e06:	d901      	bls.n	9e0c <usb_config_rx+0x10>
}
    9e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9e0c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9e5c <usb_config_rx+0x60>
    9e10:	4615      	mov	r5, r2
    9e12:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    9e14:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9e16:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9e1a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    9e1c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    9e20:	2100      	movs	r1, #0
    9e22:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e26:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    9e28:	f002 f830 	bl	be8c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e2c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    9e30:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e32:	0952      	lsrs	r2, r2, #5
    9e34:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    9e38:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    9e3c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9e40:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    9e44:	2f00      	cmp	r7, #0
    9e46:	d0df      	beq.n	9e08 <usb_config_rx+0xc>
    9e48:	4a03      	ldr	r2, [pc, #12]	; (9e58 <usb_config_rx+0x5c>)
    9e4a:	40b3      	lsls	r3, r6
    9e4c:	6811      	ldr	r1, [r2, #0]
    9e4e:	430b      	orrs	r3, r1
    9e50:	6013      	str	r3, [r2, #0]
}
    9e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e56:	bf00      	nop
    9e58:	200053d8 	.word	0x200053d8
    9e5c:	20000000 	.word	0x20000000

00009e60 <usb_config_tx>:
{
    9e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e64:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9e66:	1e81      	subs	r1, r0, #2
    9e68:	2902      	cmp	r1, #2
    9e6a:	d901      	bls.n	9e70 <usb_config_tx+0x10>
}
    9e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9e70:	01c7      	lsls	r7, r0, #7
    9e72:	f8df 904c 	ldr.w	r9, [pc, #76]	; 9ec0 <usb_config_tx+0x60>
    9e76:	4692      	mov	sl, r2
    9e78:	4604      	mov	r4, r0
    9e7a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    9e7c:	223c      	movs	r2, #60	; 0x3c
    9e7e:	2100      	movs	r1, #0
    9e80:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9e82:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e86:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    9e88:	f108 0004 	add.w	r0, r8, #4
    9e8c:	f001 fffe 	bl	be8c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9e90:	faba f28a 	clz	r2, sl
    9e94:	0952      	lsrs	r2, r2, #5
    9e96:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    9e9a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    9e9e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    9ea0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    9ea4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9ea8:	2e00      	cmp	r6, #0
    9eaa:	d0df      	beq.n	9e6c <usb_config_tx+0xc>
    9eac:	4b03      	ldr	r3, [pc, #12]	; (9ebc <usb_config_tx+0x5c>)
    9eae:	3410      	adds	r4, #16
    9eb0:	6819      	ldr	r1, [r3, #0]
    9eb2:	40a2      	lsls	r2, r4
    9eb4:	430a      	orrs	r2, r1
    9eb6:	601a      	str	r2, [r3, #0]
}
    9eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ebc:	200053d8 	.word	0x200053d8
    9ec0:	20000000 	.word	0x20000000

00009ec4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    9ec4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    9ec6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    9ec8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    9eca:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    9ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    9ed2:	b410      	push	{r4}
	transfer->next = 1;
    9ed4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    9ed6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    9ed8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    9edc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    9ede:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    9ee2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    9ee6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    9ee8:	6181      	str	r1, [r0, #24]
}
    9eea:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    9eee:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    9ef2:	4770      	bx	lr

00009ef4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9ef4:	1e83      	subs	r3, r0, #2
{
    9ef6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9ef8:	2b02      	cmp	r3, #2
    9efa:	d900      	bls.n	9efe <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    9efc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9efe:	4b06      	ldr	r3, [pc, #24]	; (9f18 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    9f00:	f100 0110 	add.w	r1, r0, #16
    9f04:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    9f08:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    9f0c:	fa0c f101 	lsl.w	r1, ip, r1
    9f10:	3040      	adds	r0, #64	; 0x40
    9f12:	f7ff bb99 	b.w	9648 <schedule_transfer>
    9f16:	bf00      	nop
    9f18:	20000000 	.word	0x20000000

00009f1c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9f1c:	1e83      	subs	r3, r0, #2
{
    9f1e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9f20:	2b02      	cmp	r3, #2
    9f22:	d900      	bls.n	9f26 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    9f24:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    9f26:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    9f28:	4b02      	ldr	r3, [pc, #8]	; (9f34 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    9f2a:	4081      	lsls	r1, r0
    9f2c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9f30:	f7ff bb8a 	b.w	9648 <schedule_transfer>
    9f34:	20000000 	.word	0x20000000

00009f38 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9f38:	6840      	ldr	r0, [r0, #4]
#endif
}
    9f3a:	4770      	bx	lr

00009f3c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9f3c:	4a12      	ldr	r2, [pc, #72]	; (9f88 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9f3e:	4b13      	ldr	r3, [pc, #76]	; (9f8c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9f40:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9f44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    9f48:	4298      	cmp	r0, r3
{
    9f4a:	b510      	push	{r4, lr}
    9f4c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    9f4e:	d202      	bcs.n	9f56 <usb_init_serialnumber+0x1a>
    9f50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9f54:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    9f56:	4c0e      	ldr	r4, [pc, #56]	; (9f90 <usb_init_serialnumber+0x54>)
    9f58:	a901      	add	r1, sp, #4
    9f5a:	220a      	movs	r2, #10
    9f5c:	f7ff fa22 	bl	93a4 <ultoa>
	for (i=0; i<10; i++) {
    9f60:	a901      	add	r1, sp, #4
    9f62:	2300      	movs	r3, #0
    9f64:	4620      	mov	r0, r4
		char c = buf[i];
    9f66:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    9f6a:	3301      	adds	r3, #1
		if (!c) break;
    9f6c:	b13a      	cbz	r2, 9f7e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    9f6e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    9f70:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    9f74:	d1f7      	bne.n	9f66 <usb_init_serialnumber+0x2a>
    9f76:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9f78:	7023      	strb	r3, [r4, #0]
}
    9f7a:	b004      	add	sp, #16
    9f7c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9f7e:	005b      	lsls	r3, r3, #1
    9f80:	b2db      	uxtb	r3, r3
    9f82:	7023      	strb	r3, [r4, #0]
}
    9f84:	b004      	add	sp, #16
    9f86:	bd10      	pop	{r4, pc}
    9f88:	401f4400 	.word	0x401f4400
    9f8c:	00989680 	.word	0x00989680
    9f90:	200049f0 	.word	0x200049f0

00009f94 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9f94:	f000 bace 	b.w	a534 <usb_serial_flush_input>

00009f98 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9f98:	f000 bac0 	b.w	a51c <usb_serial_available>

00009f9c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9f9c:	f000 bb5c 	b.w	a658 <usb_serial_flush_output>

00009fa0 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9fa0:	f000 bb32 	b.w	a608 <usb_serial_write_buffer_free>

00009fa4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9fa4:	4608      	mov	r0, r1
    9fa6:	4611      	mov	r1, r2
    9fa8:	f000 bb22 	b.w	a5f0 <usb_serial_write>

00009fac <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9fae:	4c14      	ldr	r4, [pc, #80]	; (a000 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fb0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fb4:	4e13      	ldr	r6, [pc, #76]	; (a004 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9fba:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fbe:	4f12      	ldr	r7, [pc, #72]	; (a008 <rx_queue_transfer+0x5c>)
    9fc0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    9fc4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9fc6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9fca:	4621      	mov	r1, r4
    9fcc:	883a      	ldrh	r2, [r7, #0]
    9fce:	4630      	mov	r0, r6
    9fd0:	f7ff ff78 	bl	9ec4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9fd4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    9fd6:	4423      	add	r3, r4
	asm("dsb");
    9fd8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    9fdc:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    9fe0:	3420      	adds	r4, #32
	} while (location < end_addr);
    9fe2:	42a3      	cmp	r3, r4
    9fe4:	d8fa      	bhi.n	9fdc <rx_queue_transfer+0x30>
	asm("dsb");
    9fe6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9fea:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9fee:	2003      	movs	r0, #3
    9ff0:	4631      	mov	r1, r6
    9ff2:	f7ff ff93 	bl	9f1c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    9ffa:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    9ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a000:	20200080 	.word	0x20200080
    a004:	20004f00 	.word	0x20004f00
    a008:	20018892 	.word	0x20018892

0000a00c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a00c:	4b24      	ldr	r3, [pc, #144]	; (a0a0 <rx_event+0x94>)
{
    a00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a012:	881c      	ldrh	r4, [r3, #0]
    a014:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    a016:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a018:	f3c3 430e 	ubfx	r3, r3, #16, #15
    a01c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a01e:	2c00      	cmp	r4, #0
    a020:	dd24      	ble.n	a06c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    a022:	4920      	ldr	r1, [pc, #128]	; (a0a4 <rx_event+0x98>)
		if (head != rx_tail) {
    a024:	4820      	ldr	r0, [pc, #128]	; (a0a8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    a026:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    a028:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a02a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    a02c:	4e1f      	ldr	r6, [pc, #124]	; (a0ac <rx_event+0xa0>)
		if (head != rx_tail) {
    a02e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    a030:	481f      	ldr	r0, [pc, #124]	; (a0b0 <rx_event+0xa4>)
		if (head != rx_tail) {
    a032:	d007      	beq.n	a044 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    a034:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    a038:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a03c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    a040:	4294      	cmp	r4, r2
    a042:	d918      	bls.n	a076 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    a044:	3301      	adds	r3, #1
		rx_index[i] = 0;
    a046:	2200      	movs	r2, #0
		rx_count[i] = len;
    a048:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a04c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    a04e:	4e19      	ldr	r6, [pc, #100]	; (a0b4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    a050:	bf88      	it	hi
    a052:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    a054:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    a058:	bf98      	it	ls
    a05a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    a05c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    a05e:	4b16      	ldr	r3, [pc, #88]	; (a0b8 <rx_event+0xac>)
		rx_head = head;
    a060:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    a062:	681a      	ldr	r2, [r3, #0]
    a064:	4414      	add	r4, r2
    a066:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    a068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    a06c:	4628      	mov	r0, r5
}
    a06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    a072:	f7ff bf9b 	b.w	9fac <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a076:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    a07a:	4910      	ldr	r1, [pc, #64]	; (a0bc <rx_event+0xb0>)
    a07c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    a07e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a080:	4408      	add	r0, r1
    a082:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    a086:	f7ff f8f3 	bl	9270 <memcpy>
				rx_available += len;
    a08a:	4a0b      	ldr	r2, [pc, #44]	; (a0b8 <rx_event+0xac>)
				rx_queue_transfer(i);
    a08c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    a08e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    a092:	6813      	ldr	r3, [r2, #0]
    a094:	4423      	add	r3, r4
}
    a096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    a09a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    a09c:	f7ff bf86 	b.w	9fac <rx_queue_transfer>
    a0a0:	20018892 	.word	0x20018892
    a0a4:	200188ae 	.word	0x200188ae
    a0a8:	200188af 	.word	0x200188af
    a0ac:	20018828 	.word	0x20018828
    a0b0:	20018848 	.word	0x20018848
    a0b4:	20018838 	.word	0x20018838
    a0b8:	20018824 	.word	0x20018824
    a0bc:	20200080 	.word	0x20200080

0000a0c0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a0c0:	4b1d      	ldr	r3, [pc, #116]	; (a138 <usb_serial_flush_callback+0x78>)
    a0c2:	781a      	ldrb	r2, [r3, #0]
    a0c4:	2a00      	cmp	r2, #0
    a0c6:	d136      	bne.n	a136 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    a0c8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a0cc:	4a1b      	ldr	r2, [pc, #108]	; (a13c <usb_serial_flush_callback+0x7c>)
    a0ce:	7812      	ldrb	r2, [r2, #0]
    a0d0:	b38a      	cbz	r2, a136 <usb_serial_flush_callback+0x76>
{
    a0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    a0d6:	4d1a      	ldr	r5, [pc, #104]	; (a140 <usb_serial_flush_callback+0x80>)
    a0d8:	882a      	ldrh	r2, [r5, #0]
    a0da:	b352      	cbz	r2, a132 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a0dc:	4e19      	ldr	r6, [pc, #100]	; (a144 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a0de:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a0e2:	4f19      	ldr	r7, [pc, #100]	; (a148 <usb_serial_flush_callback+0x88>)
    a0e4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a0e6:	4c19      	ldr	r4, [pc, #100]	; (a14c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a0e8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a0ec:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a0f0:	4642      	mov	r2, r8
    a0f2:	4638      	mov	r0, r7
    a0f4:	4621      	mov	r1, r4
    a0f6:	f7ff fee5 	bl	9ec4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a0fa:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    a0fe:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a102:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a106:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a10a:	3420      	adds	r4, #32
	} while (location < end_addr);
    a10c:	42a2      	cmp	r2, r4
    a10e:	d8fa      	bhi.n	a106 <usb_serial_flush_callback+0x46>
	asm("dsb");
    a110:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a114:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a118:	2004      	movs	r0, #4
    a11a:	4639      	mov	r1, r7
    a11c:	f7ff feea 	bl	9ef4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a120:	7833      	ldrb	r3, [r6, #0]
    a122:	3301      	adds	r3, #1
    a124:	b2db      	uxtb	r3, r3
    a126:	2b03      	cmp	r3, #3
    a128:	bf88      	it	hi
    a12a:	2300      	movhi	r3, #0
    a12c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a12e:	2300      	movs	r3, #0
    a130:	802b      	strh	r3, [r5, #0]
}
    a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a136:	4770      	bx	lr
    a138:	200188b3 	.word	0x200188b3
    a13c:	200188b5 	.word	0x200188b5
    a140:	20018894 	.word	0x20018894
    a144:	200188b2 	.word	0x200188b2
    a148:	20005000 	.word	0x20005000
    a14c:	20201080 	.word	0x20201080

0000a150 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a154:	b085      	sub	sp, #20
	while (size > 0) {
    a156:	e9cd 1001 	strd	r1, r0, [sp, #4]
    a15a:	2900      	cmp	r1, #0
    a15c:	f000 80bf 	beq.w	a2de <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    a160:	2300      	movs	r3, #0
    a162:	4c60      	ldr	r4, [pc, #384]	; (a2e4 <usb_serial_write.part.0+0x194>)
    a164:	f8df 8198 	ldr.w	r8, [pc, #408]	; a300 <usb_serial_write.part.0+0x1b0>
    a168:	f8df a198 	ldr.w	sl, [pc, #408]	; a304 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    a16c:	4f5e      	ldr	r7, [pc, #376]	; (a2e8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    a16e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    a170:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a172:	4a5e      	ldr	r2, [pc, #376]	; (a2ec <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    a174:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    a176:	4b5e      	ldr	r3, [pc, #376]	; (a2f0 <usb_serial_write.part.0+0x1a0>)
    a178:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    a17a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    a17e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    a182:	2b00      	cmp	r3, #0
    a184:	f040 80a7 	bne.w	a2d6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    a188:	461e      	mov	r6, r3
		int waiting=0;
    a18a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    a18c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    a18e:	4648      	mov	r0, r9
    a190:	f7ff fed2 	bl	9f38 <usb_transfer_status>
			if (!(status & 0x80)) {
    a194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    a198:	f000 808c 	beq.w	a2b4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    a19c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    a1a0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    a1a4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    a1a8:	b905      	cbnz	r5, a1ac <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    a1aa:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d17d      	bne.n	a2ac <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a1b0:	683b      	ldr	r3, [r7, #0]
    a1b2:	1b9b      	subs	r3, r3, r6
    a1b4:	2b78      	cmp	r3, #120	; 0x78
    a1b6:	f200 8087 	bhi.w	a2c8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    a1ba:	4b4e      	ldr	r3, [pc, #312]	; (a2f4 <usb_serial_write.part.0+0x1a4>)
    a1bc:	781b      	ldrb	r3, [r3, #0]
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d074      	beq.n	a2ac <usb_serial_write.part.0+0x15c>
			yield();
    a1c2:	f000 fa93 	bl	a6ec <yield>
			tx_noautoflush = 1;
    a1c6:	2201      	movs	r2, #1
		while (!tx_available) {
    a1c8:	f8b8 3000 	ldrh.w	r3, [r8]
    a1cc:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    a1ce:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    a1d0:	2b00      	cmp	r3, #0
    a1d2:	d0dc      	beq.n	a18e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a1d4:	4a46      	ldr	r2, [pc, #280]	; (a2f0 <usb_serial_write.part.0+0x1a0>)
    a1d6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a1da:	7811      	ldrb	r1, [r2, #0]
    a1dc:	461a      	mov	r2, r3
    a1de:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    a1e2:	4d45      	ldr	r5, [pc, #276]	; (a2f8 <usb_serial_write.part.0+0x1a8>)
    a1e4:	02c9      	lsls	r1, r1, #11
    a1e6:	4428      	add	r0, r5
		if (size >= tx_available) {
    a1e8:	9d01      	ldr	r5, [sp, #4]
    a1ea:	4295      	cmp	r5, r2
    a1ec:	d217      	bcs.n	a21e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    a1ee:	9303      	str	r3, [sp, #12]
    a1f0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    a1f4:	462a      	mov	r2, r5
    a1f6:	f7ff f83b 	bl	9270 <memcpy>
			tx_available -= size;
    a1fa:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a1fc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    a200:	1b5b      	subs	r3, r3, r5
    a202:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a206:	4b3d      	ldr	r3, [pc, #244]	; (a2fc <usb_serial_write.part.0+0x1ac>)
    a208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    a20c:	f3bf 8f4f 	dsb	sy
			sent += size;
    a210:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    a212:	2300      	movs	r3, #0
			sent += size;
    a214:	4428      	add	r0, r5
		tx_noautoflush = 0;
    a216:	7023      	strb	r3, [r4, #0]
}
    a218:	b005      	add	sp, #20
    a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a21e:	4b36      	ldr	r3, [pc, #216]	; (a2f8 <usb_serial_write.part.0+0x1a8>)
    a220:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    a222:	9902      	ldr	r1, [sp, #8]
    a224:	f7ff f824 	bl	9270 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a228:	2300      	movs	r3, #0
    a22a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a22e:	4629      	mov	r1, r5
    a230:	4648      	mov	r0, r9
    a232:	f7ff fe47 	bl	9ec4 <usb_prepare_transfer>
	asm("dsb");
    a236:	f3bf 8f4f 	dsb	sy
    a23a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    a23e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    a242:	4293      	cmp	r3, r2
    a244:	bf34      	ite	cc
    a246:	2301      	movcc	r3, #1
    a248:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a24a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a24e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    a252:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    a256:	3520      	adds	r5, #32
	} while (location < end_addr);
    a258:	42ab      	cmp	r3, r5
    a25a:	d1fa      	bne.n	a252 <usb_serial_write.part.0+0x102>
	asm("dsb");
    a25c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a260:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a264:	2004      	movs	r0, #4
    a266:	4649      	mov	r1, r9
    a268:	f7ff fe44 	bl	9ef4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a26c:	4a20      	ldr	r2, [pc, #128]	; (a2f0 <usb_serial_write.part.0+0x1a0>)
    a26e:	7813      	ldrb	r3, [r2, #0]
    a270:	3301      	adds	r3, #1
    a272:	b2db      	uxtb	r3, r3
    a274:	2b03      	cmp	r3, #3
    a276:	bf84      	itt	hi
    a278:	2300      	movhi	r3, #0
    a27a:	4a1d      	ldrhi	r2, [pc, #116]	; (a2f0 <usb_serial_write.part.0+0x1a0>)
    a27c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    a27e:	f8b8 3000 	ldrh.w	r3, [r8]
    a282:	9a01      	ldr	r2, [sp, #4]
    a284:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    a286:	9a00      	ldr	r2, [sp, #0]
    a288:	441a      	add	r2, r3
			size -= tx_available;
    a28a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    a28c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    a28e:	9a02      	ldr	r2, [sp, #8]
    a290:	441a      	add	r2, r3
			tx_available = 0;
    a292:	2300      	movs	r3, #0
			data += tx_available;
    a294:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    a296:	4a19      	ldr	r2, [pc, #100]	; (a2fc <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    a298:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    a29c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a2a0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    a2a4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    a2a6:	2900      	cmp	r1, #0
    a2a8:	f47f af62 	bne.w	a170 <usb_serial_write.part.0+0x20>
	return sent;
    a2ac:	9800      	ldr	r0, [sp, #0]
}
    a2ae:	b005      	add	sp, #20
    a2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    a2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2b8:	4b0d      	ldr	r3, [pc, #52]	; (a2f0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    a2ba:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2be:	7819      	ldrb	r1, [r3, #0]
				break;
    a2c0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    a2c2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    a2c6:	e78a      	b.n	a1de <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    a2c8:	2301      	movs	r3, #1
				return sent;
    a2ca:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    a2cc:	f88a 3000 	strb.w	r3, [sl]
}
    a2d0:	b005      	add	sp, #20
    a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a2d6:	461a      	mov	r2, r3
    a2d8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    a2dc:	e77f      	b.n	a1de <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    a2de:	9801      	ldr	r0, [sp, #4]
	return sent;
    a2e0:	e7e5      	b.n	a2ae <usb_serial_write.part.0+0x15e>
    a2e2:	bf00      	nop
    a2e4:	200188b3 	.word	0x200188b3
    a2e8:	2001886c 	.word	0x2001886c
    a2ec:	20005000 	.word	0x20005000
    a2f0:	200188b2 	.word	0x200188b2
    a2f4:	200188b5 	.word	0x200188b5
    a2f8:	20201080 	.word	0x20201080
    a2fc:	402e0000 	.word	0x402e0000
    a300:	20018894 	.word	0x20018894
    a304:	200188b1 	.word	0x200188b1

0000a308 <usb_serial_reset>:
}
    a308:	4770      	bx	lr
    a30a:	bf00      	nop

0000a30c <usb_serial_configure>:
	if (usb_high_speed) {
    a30c:	4b2a      	ldr	r3, [pc, #168]	; (a3b8 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a30e:	2100      	movs	r1, #0
    a310:	2280      	movs	r2, #128	; 0x80
    a312:	482a      	ldr	r0, [pc, #168]	; (a3bc <usb_serial_configure+0xb0>)
{
    a314:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a316:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    a318:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a31a:	4d29      	ldr	r5, [pc, #164]	; (a3c0 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    a31c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    a31e:	4e29      	ldr	r6, [pc, #164]	; (a3c4 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    a320:	bf0c      	ite	eq
    a322:	2340      	moveq	r3, #64	; 0x40
    a324:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a328:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a32a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a32c:	f001 fdae 	bl	be8c <memset>
	tx_head = 0;
    a330:	4a25      	ldr	r2, [pc, #148]	; (a3c8 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a332:	4621      	mov	r1, r4
	tx_available = 0;
    a334:	4b25      	ldr	r3, [pc, #148]	; (a3cc <usb_serial_configure+0xc0>)
	tx_head = 0;
    a336:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a338:	f44f 7280 	mov.w	r2, #256	; 0x100
    a33c:	4824      	ldr	r0, [pc, #144]	; (a3d0 <usb_serial_configure+0xc4>)
	tx_available = 0;
    a33e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a340:	f001 fda4 	bl	be8c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a344:	4a23      	ldr	r2, [pc, #140]	; (a3d4 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a346:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    a348:	4b23      	ldr	r3, [pc, #140]	; (a3d8 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a34a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    a34c:	e9c2 4400 	strd	r4, r4, [r2]
    a350:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    a354:	4a21      	ldr	r2, [pc, #132]	; (a3dc <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    a356:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    a35a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    a35c:	4a20      	ldr	r2, [pc, #128]	; (a3e0 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    a35e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    a362:	4b20      	ldr	r3, [pc, #128]	; (a3e4 <usb_serial_configure+0xd8>)
    a364:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a366:	4623      	mov	r3, r4
	rx_available = 0;
    a368:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a36a:	4622      	mov	r2, r4
    a36c:	f7ff fd78 	bl	9e60 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a370:	4622      	mov	r2, r4
    a372:	8831      	ldrh	r1, [r6, #0]
    a374:	2003      	movs	r0, #3
    a376:	4b1c      	ldr	r3, [pc, #112]	; (a3e8 <usb_serial_configure+0xdc>)
    a378:	f7ff fd40 	bl	9dfc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a37c:	4623      	mov	r3, r4
    a37e:	2201      	movs	r2, #1
    a380:	8829      	ldrh	r1, [r5, #0]
    a382:	2004      	movs	r0, #4
    a384:	f7ff fd6c 	bl	9e60 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a388:	4620      	mov	r0, r4
    a38a:	3401      	adds	r4, #1
    a38c:	f7ff fe0e 	bl	9fac <rx_queue_transfer>
    a390:	2c08      	cmp	r4, #8
    a392:	d1f9      	bne.n	a388 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    a394:	4b15      	ldr	r3, [pc, #84]	; (a3ec <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    a396:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    a398:	4815      	ldr	r0, [pc, #84]	; (a3f0 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    a39a:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    a39c:	4c15      	ldr	r4, [pc, #84]	; (a3f4 <usb_serial_configure+0xe8>)
    a39e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    a3a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a3a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a3a8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    a3ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a3b0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    a3b4:	bd70      	pop	{r4, r5, r6, pc}
    a3b6:	bf00      	nop
    a3b8:	200188b6 	.word	0x200188b6
    a3bc:	20005000 	.word	0x20005000
    a3c0:	20018896 	.word	0x20018896
    a3c4:	20018892 	.word	0x20018892
    a3c8:	200188b2 	.word	0x200188b2
    a3cc:	20018894 	.word	0x20018894
    a3d0:	20004f00 	.word	0x20004f00
    a3d4:	20018828 	.word	0x20018828
    a3d8:	20018838 	.word	0x20018838
    a3dc:	200188ae 	.word	0x200188ae
    a3e0:	20018824 	.word	0x20018824
    a3e4:	200188af 	.word	0x200188af
    a3e8:	0000a00d 	.word	0x0000a00d
    a3ec:	402e0000 	.word	0x402e0000
    a3f0:	20018880 	.word	0x20018880
    a3f4:	0000a0c1 	.word	0x0000a0c1

0000a3f8 <usb_serial_read>:
{
    a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a3fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a400:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    a404:	f8df a0c8 	ldr.w	sl, [pc, #200]	; a4d0 <usb_serial_read+0xd8>
{
    a408:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a40a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    a40e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    a410:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    a414:	2900      	cmp	r1, #0
    a416:	d04f      	beq.n	a4b8 <usb_serial_read+0xc0>
    a418:	4680      	mov	r8, r0
    a41a:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    a41c:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    a41e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a4d4 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    a422:	4b26      	ldr	r3, [pc, #152]	; (a4bc <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a424:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a428:	4925      	ldr	r1, [pc, #148]	; (a4c0 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    a42a:	781b      	ldrb	r3, [r3, #0]
    a42c:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    a42e:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    a432:	d03f      	beq.n	a4b4 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    a434:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    a436:	4b23      	ldr	r3, [pc, #140]	; (a4c4 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a438:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    a43a:	bf28      	it	cs
    a43c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a43e:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a440:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a444:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    a448:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    a44a:	4b1f      	ldr	r3, [pc, #124]	; (a4c8 <usb_serial_read+0xd0>)
    a44c:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    a450:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    a454:	42aa      	cmp	r2, r5
    a456:	d21c      	bcs.n	a492 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a458:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    a45c:	4918      	ldr	r1, [pc, #96]	; (a4c0 <usb_serial_read+0xc8>)
			rx_available -= len;
    a45e:	4c1b      	ldr	r4, [pc, #108]	; (a4cc <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a460:	4461      	add	r1, ip
    a462:	9201      	str	r2, [sp, #4]
    a464:	f7fe ff04 	bl	9270 <memcpy>
			rx_available -= len;
    a468:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    a46a:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    a46e:	4658      	mov	r0, fp
			rx_index[i] += len;
    a470:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    a472:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    a476:	442a      	add	r2, r5
			rx_available -= len;
    a478:	4439      	add	r1, r7
			rx_index[i] += len;
    a47a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    a47e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a484:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a488:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    a48c:	b003      	add	sp, #12
    a48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a492:	462a      	mov	r2, r5
			count += avail;
    a494:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a496:	f7fe feeb 	bl	9270 <memcpy>
			rx_available -= avail;
    a49a:	490c      	ldr	r1, [pc, #48]	; (a4cc <usb_serial_read+0xd4>)
			rx_tail = tail;
    a49c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    a49e:	4630      	mov	r0, r6
			rx_available -= avail;
    a4a0:	680a      	ldr	r2, [r1, #0]
			p += avail;
    a4a2:	44a8      	add	r8, r5
			rx_available -= avail;
    a4a4:	1b52      	subs	r2, r2, r5
    a4a6:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    a4a8:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    a4ac:	f7ff fd7e 	bl	9fac <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    a4b0:	45bb      	cmp	fp, r7
    a4b2:	d8b6      	bhi.n	a422 <usb_serial_read+0x2a>
	return count;
    a4b4:	4638      	mov	r0, r7
    a4b6:	e7e3      	b.n	a480 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    a4b8:	4608      	mov	r0, r1
    a4ba:	e7e1      	b.n	a480 <usb_serial_read+0x88>
    a4bc:	200188ae 	.word	0x200188ae
    a4c0:	20200080 	.word	0x20200080
    a4c4:	20018848 	.word	0x20018848
    a4c8:	20018828 	.word	0x20018828
    a4cc:	20018824 	.word	0x20018824
    a4d0:	200188af 	.word	0x200188af
    a4d4:	20018838 	.word	0x20018838

0000a4d8 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    a4d8:	4b0b      	ldr	r3, [pc, #44]	; (a508 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    a4da:	4a0c      	ldr	r2, [pc, #48]	; (a50c <usb_serial_peekchar+0x34>)
    a4dc:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    a4de:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    a4e0:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a4e2:	428a      	cmp	r2, r1
    a4e4:	d00d      	beq.n	a502 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a4e6:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a4e8:	4809      	ldr	r0, [pc, #36]	; (a510 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a4ea:	4a0a      	ldr	r2, [pc, #40]	; (a514 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    a4ec:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a4ee:	490a      	ldr	r1, [pc, #40]	; (a518 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    a4f0:	bf28      	it	cs
    a4f2:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a4f4:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a4f6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a4fa:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a4fe:	5c58      	ldrb	r0, [r3, r1]
    a500:	4770      	bx	lr
	if (tail == rx_head) return -1;
    a502:	f04f 30ff 	mov.w	r0, #4294967295
}
    a506:	4770      	bx	lr
    a508:	200188ae 	.word	0x200188ae
    a50c:	200188af 	.word	0x200188af
    a510:	20018848 	.word	0x20018848
    a514:	20200080 	.word	0x20200080
    a518:	20018838 	.word	0x20018838

0000a51c <usb_serial_available>:
	uint32_t n = rx_available;
    a51c:	4b04      	ldr	r3, [pc, #16]	; (a530 <usb_serial_available+0x14>)
{
    a51e:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    a520:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a522:	b10c      	cbz	r4, a528 <usb_serial_available+0xc>
}
    a524:	4620      	mov	r0, r4
    a526:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    a528:	f000 f8e0 	bl	a6ec <yield>
}
    a52c:	4620      	mov	r0, r4
    a52e:	bd10      	pop	{r4, pc}
    a530:	20018824 	.word	0x20018824

0000a534 <usb_serial_flush_input>:
{
    a534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a538:	4e14      	ldr	r6, [pc, #80]	; (a58c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    a53a:	4d15      	ldr	r5, [pc, #84]	; (a590 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    a53c:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    a53e:	782a      	ldrb	r2, [r5, #0]
    a540:	4293      	cmp	r3, r2
    a542:	d021      	beq.n	a588 <usb_serial_flush_input+0x54>
    a544:	b2dc      	uxtb	r4, r3
    a546:	f8df 9050 	ldr.w	r9, [pc, #80]	; a598 <usb_serial_flush_input+0x64>
    a54a:	f8df b050 	ldr.w	fp, [pc, #80]	; a59c <usb_serial_flush_input+0x68>
    a54e:	f8df 8050 	ldr.w	r8, [pc, #80]	; a5a0 <usb_serial_flush_input+0x6c>
    a552:	4f10      	ldr	r7, [pc, #64]	; (a594 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    a554:	3401      	adds	r4, #1
    a556:	2c08      	cmp	r4, #8
		rx_tail = tail;
    a558:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    a55c:	d901      	bls.n	a562 <usb_serial_flush_input+0x2e>
    a55e:	2400      	movs	r4, #0
    a560:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a562:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a566:	f8db 3000 	ldr.w	r3, [fp]
    a56a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    a56e:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    a572:	1a52      	subs	r2, r2, r1
    a574:	1a9b      	subs	r3, r3, r2
    a576:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a57a:	f7ff fd17 	bl	9fac <rx_queue_transfer>
		rx_tail = tail;
    a57e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    a582:	782b      	ldrb	r3, [r5, #0]
    a584:	42a3      	cmp	r3, r4
    a586:	d1e5      	bne.n	a554 <usb_serial_flush_input+0x20>
}
    a588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a58c:	200188af 	.word	0x200188af
    a590:	200188ae 	.word	0x200188ae
    a594:	20018838 	.word	0x20018838
    a598:	20018848 	.word	0x20018848
    a59c:	20018824 	.word	0x20018824
    a5a0:	20018828 	.word	0x20018828

0000a5a4 <usb_serial_getchar>:
{
    a5a4:	b500      	push	{lr}
    a5a6:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    a5a8:	2101      	movs	r1, #1
    a5aa:	f10d 0007 	add.w	r0, sp, #7
    a5ae:	f7ff ff23 	bl	a3f8 <usb_serial_read>
    a5b2:	b120      	cbz	r0, a5be <usb_serial_getchar+0x1a>
    a5b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    a5b8:	b003      	add	sp, #12
    a5ba:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    a5be:	f04f 30ff 	mov.w	r0, #4294967295
    a5c2:	e7f9      	b.n	a5b8 <usb_serial_getchar+0x14>

0000a5c4 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    a5c4:	4b09      	ldr	r3, [pc, #36]	; (a5ec <usb_serial_putchar+0x28>)
{
    a5c6:	b500      	push	{lr}
    a5c8:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    a5ca:	781b      	ldrb	r3, [r3, #0]
{
    a5cc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    a5d0:	b13b      	cbz	r3, a5e2 <usb_serial_putchar+0x1e>
    a5d2:	2101      	movs	r1, #1
    a5d4:	f10d 0007 	add.w	r0, sp, #7
    a5d8:	f7ff fdba 	bl	a150 <usb_serial_write.part.0>
}
    a5dc:	b003      	add	sp, #12
    a5de:	f85d fb04 	ldr.w	pc, [sp], #4
    a5e2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a5e6:	b003      	add	sp, #12
    a5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    a5ec:	200188b5 	.word	0x200188b5

0000a5f0 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a5f0:	4b04      	ldr	r3, [pc, #16]	; (a604 <usb_serial_write+0x14>)
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a5f8:	b10b      	cbz	r3, a5fe <usb_serial_write+0xe>
    a5fa:	f7ff bda9 	b.w	a150 <usb_serial_write.part.0>
}
    a5fe:	4610      	mov	r0, r2
    a600:	4770      	bx	lr
    a602:	bf00      	nop
    a604:	200188b5 	.word	0x200188b5

0000a608 <usb_serial_write_buffer_free>:
{
    a608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a60c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    a60e:	f8df 8044 	ldr.w	r8, [pc, #68]	; a654 <usb_serial_write_buffer_free+0x4c>
    a612:	2301      	movs	r3, #1
    a614:	4d0d      	ldr	r5, [pc, #52]	; (a64c <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a616:	4627      	mov	r7, r4
    a618:	4e0d      	ldr	r6, [pc, #52]	; (a650 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    a61a:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    a61e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a620:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    a622:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    a624:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    a626:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a62a:	d005      	beq.n	a638 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a62c:	f7ff fc84 	bl	9f38 <usb_transfer_status>
    a630:	0603      	lsls	r3, r0, #24
    a632:	bf58      	it	pl
    a634:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a638:	2c04      	cmp	r4, #4
    a63a:	d1f0      	bne.n	a61e <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    a63c:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a640:	2300      	movs	r3, #0
}
    a642:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    a644:	f888 3000 	strb.w	r3, [r8]
}
    a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a64c:	20005000 	.word	0x20005000
    a650:	200188b2 	.word	0x200188b2
    a654:	200188b3 	.word	0x200188b3

0000a658 <usb_serial_flush_output>:
{
    a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a65c:	4b1d      	ldr	r3, [pc, #116]	; (a6d4 <usb_serial_flush_output+0x7c>)
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	b113      	cbz	r3, a668 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a662:	4d1d      	ldr	r5, [pc, #116]	; (a6d8 <usb_serial_flush_output+0x80>)
    a664:	882a      	ldrh	r2, [r5, #0]
    a666:	b90a      	cbnz	r2, a66c <usb_serial_flush_output+0x14>
}
    a668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    a66c:	4e1b      	ldr	r6, [pc, #108]	; (a6dc <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a66e:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a672:	491b      	ldr	r1, [pc, #108]	; (a6e0 <usb_serial_flush_output+0x88>)
    a674:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a676:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a678:	4c1a      	ldr	r4, [pc, #104]	; (a6e4 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a67a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    a67e:	4f1a      	ldr	r7, [pc, #104]	; (a6e8 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a680:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    a684:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a686:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    a688:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a68a:	4621      	mov	r1, r4
    a68c:	2300      	movs	r3, #0
    a68e:	f7ff fc19 	bl	9ec4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    a692:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    a696:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a69a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a69e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a6a2:	3420      	adds	r4, #32
	} while (location < end_addr);
    a6a4:	42a2      	cmp	r2, r4
    a6a6:	d8fa      	bhi.n	a69e <usb_serial_flush_output+0x46>
	asm("dsb");
    a6a8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a6ac:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a6b0:	2004      	movs	r0, #4
    a6b2:	4641      	mov	r1, r8
    a6b4:	f7ff fc1e 	bl	9ef4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a6b8:	7833      	ldrb	r3, [r6, #0]
    a6ba:	3301      	adds	r3, #1
    a6bc:	b2db      	uxtb	r3, r3
    a6be:	2b03      	cmp	r3, #3
    a6c0:	bf88      	it	hi
    a6c2:	2300      	movhi	r3, #0
    a6c4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    a6c6:	2300      	movs	r3, #0
    a6c8:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    a6ca:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    a6ce:	703b      	strb	r3, [r7, #0]
}
    a6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a6d4:	200188b5 	.word	0x200188b5
    a6d8:	20018894 	.word	0x20018894
    a6dc:	200188b2 	.word	0x200188b2
    a6e0:	20005000 	.word	0x20005000
    a6e4:	20201080 	.word	0x20201080
    a6e8:	200188b3 	.word	0x200188b3

0000a6ec <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a6f0:	4e32      	ldr	r6, [pc, #200]	; (a7bc <yield+0xd0>)
    a6f2:	7833      	ldrb	r3, [r6, #0]
    a6f4:	b163      	cbz	r3, a710 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a6f6:	4f32      	ldr	r7, [pc, #200]	; (a7c0 <yield+0xd4>)
    a6f8:	783a      	ldrb	r2, [r7, #0]
    a6fa:	b94a      	cbnz	r2, a710 <yield+0x24>
	running = 1;
    a6fc:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a6fe:	07d9      	lsls	r1, r3, #31
	running = 1;
    a700:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a702:	d444      	bmi.n	a78e <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a704:	079a      	lsls	r2, r3, #30
    a706:	d426      	bmi.n	a756 <yield+0x6a>

	running = 0;
    a708:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a70a:	075b      	lsls	r3, r3, #29
	running = 0;
    a70c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a70e:	d401      	bmi.n	a714 <yield+0x28>
	
};
    a710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a714:	4b2b      	ldr	r3, [pc, #172]	; (a7c4 <yield+0xd8>)
    a716:	681a      	ldr	r2, [r3, #0]
    a718:	2a00      	cmp	r2, #0
    a71a:	d0f9      	beq.n	a710 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a71c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a720:	2a00      	cmp	r2, #0
    a722:	d1f5      	bne.n	a710 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a724:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a728:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a72a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a72c:	2800      	cmp	r0, #0
    a72e:	d03b      	beq.n	a7a8 <yield+0xbc>
		if (runningFromYield) {
    a730:	4c25      	ldr	r4, [pc, #148]	; (a7c8 <yield+0xdc>)
    a732:	7821      	ldrb	r1, [r4, #0]
    a734:	2900      	cmp	r1, #0
    a736:	d137      	bne.n	a7a8 <yield+0xbc>
		runningFromYield = true;
    a738:	2201      	movs	r2, #1
    a73a:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    a73c:	6942      	ldr	r2, [r0, #20]
    a73e:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    a740:	2a00      	cmp	r2, #0
    a742:	d038      	beq.n	a7b6 <yield+0xca>
			firstYield->_prev = nullptr;
    a744:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a746:	b905      	cbnz	r5, a74a <yield+0x5e>
    a748:	b662      	cpsie	i
		first->_triggered = false;
    a74a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a74c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a74e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a750:	4798      	blx	r3
		runningFromYield = false;
    a752:	7025      	strb	r5, [r4, #0]
    a754:	e7dc      	b.n	a710 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a756:	f8df 807c 	ldr.w	r8, [pc, #124]	; a7d4 <yield+0xe8>
    a75a:	f898 2000 	ldrb.w	r2, [r8]
    a75e:	2a00      	cmp	r2, #0
    a760:	d0d2      	beq.n	a708 <yield+0x1c>
    a762:	2500      	movs	r5, #0
    a764:	f8df 9070 	ldr.w	r9, [pc, #112]	; a7d8 <yield+0xec>
    a768:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a76a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a76e:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a770:	6823      	ldr	r3, [r4, #0]
    a772:	4620      	mov	r0, r4
    a774:	691b      	ldr	r3, [r3, #16]
    a776:	4798      	blx	r3
    a778:	b110      	cbz	r0, a780 <yield+0x94>
    a77a:	6963      	ldr	r3, [r4, #20]
    a77c:	689b      	ldr	r3, [r3, #8]
    a77e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a780:	f898 2000 	ldrb.w	r2, [r8]
    a784:	b2eb      	uxtb	r3, r5
    a786:	429a      	cmp	r2, r3
    a788:	d8ef      	bhi.n	a76a <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a78a:	7833      	ldrb	r3, [r6, #0]
    a78c:	e7bc      	b.n	a708 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a78e:	f7ff fec5 	bl	a51c <usb_serial_available>
		if (Serial.available()) serialEvent();
    a792:	b968      	cbnz	r0, a7b0 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a794:	4b0d      	ldr	r3, [pc, #52]	; (a7cc <yield+0xe0>)
    a796:	781b      	ldrb	r3, [r3, #0]
    a798:	b90b      	cbnz	r3, a79e <yield+0xb2>
    a79a:	7833      	ldrb	r3, [r6, #0]
    a79c:	e7b2      	b.n	a704 <yield+0x18>
    a79e:	7833      	ldrb	r3, [r6, #0]
    a7a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a7a4:	7033      	strb	r3, [r6, #0]
    a7a6:	e7ad      	b.n	a704 <yield+0x18>
		if (doit) __enable_irq();
    a7a8:	2d00      	cmp	r5, #0
    a7aa:	d1b1      	bne.n	a710 <yield+0x24>
    a7ac:	b662      	cpsie	i
    a7ae:	e7af      	b.n	a710 <yield+0x24>
		if (Serial.available()) serialEvent();
    a7b0:	f000 fa8a 	bl	acc8 <serialEvent()>
    a7b4:	e7ee      	b.n	a794 <yield+0xa8>
			lastYield = nullptr;
    a7b6:	4b06      	ldr	r3, [pc, #24]	; (a7d0 <yield+0xe4>)
    a7b8:	601a      	str	r2, [r3, #0]
    a7ba:	e7c4      	b.n	a746 <yield+0x5a>
    a7bc:	20004a0a 	.word	0x20004a0a
    a7c0:	2001889a 	.word	0x2001889a
    a7c4:	20005088 	.word	0x20005088
    a7c8:	20018898 	.word	0x20018898
    a7cc:	60001f58 	.word	0x60001f58
    a7d0:	20005094 	.word	0x20005094
    a7d4:	20018899 	.word	0x20018899
    a7d8:	20005098 	.word	0x20005098

0000a7dc <EventResponder::runFromInterrupt()>:
{
    a7dc:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a7de:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a7e2:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a7e4:	4c0c      	ldr	r4, [pc, #48]	; (a818 <EventResponder::runFromInterrupt()+0x3c>)
    a7e6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a7e8:	b180      	cbz	r0, a80c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    a7ea:	4e0c      	ldr	r6, [pc, #48]	; (a81c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    a7ec:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    a7ee:	6943      	ldr	r3, [r0, #20]
    a7f0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    a7f2:	b173      	cbz	r3, a812 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a7f4:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    a7f6:	b902      	cbnz	r2, a7fa <EventResponder::runFromInterrupt()+0x1e>
    a7f8:	b662      	cpsie	i
			(*(first->_function))(*first);
    a7fa:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    a7fc:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a7fe:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a800:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    a804:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    a806:	6820      	ldr	r0, [r4, #0]
		if (first) {
    a808:	2800      	cmp	r0, #0
    a80a:	d1f0      	bne.n	a7ee <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    a80c:	b902      	cbnz	r2, a810 <EventResponder::runFromInterrupt()+0x34>
    a80e:	b662      	cpsie	i
}
    a810:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    a812:	6033      	str	r3, [r6, #0]
    a814:	e7ef      	b.n	a7f6 <EventResponder::runFromInterrupt()+0x1a>
    a816:	bf00      	nop
    a818:	20005090 	.word	0x20005090
    a81c:	2000508c 	.word	0x2000508c

0000a820 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    a820:	f7ff bfdc 	b.w	a7dc <EventResponder::runFromInterrupt()>

0000a824 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a824:	4904      	ldr	r1, [pc, #16]	; (a838 <systick_isr+0x14>)
	systick_millis_count++;
    a826:	4a05      	ldr	r2, [pc, #20]	; (a83c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    a828:	6849      	ldr	r1, [r1, #4]
    a82a:	4b05      	ldr	r3, [pc, #20]	; (a840 <systick_isr+0x1c>)
    a82c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    a82e:	6813      	ldr	r3, [r2, #0]
    a830:	3301      	adds	r3, #1
    a832:	6013      	str	r3, [r2, #0]
}
    a834:	4770      	bx	lr
    a836:	bf00      	nop
    a838:	e0001000 	.word	0xe0001000
    a83c:	2001886c 	.word	0x2001886c
    a840:	20018868 	.word	0x20018868

0000a844 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a844:	49a2      	ldr	r1, [pc, #648]	; (aad0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a846:	4ba3      	ldr	r3, [pc, #652]	; (aad4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    a848:	4288      	cmp	r0, r1
{
    a84a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    a84e:	4ca2      	ldr	r4, [pc, #648]	; (aad8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a850:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a852:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a854:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    a858:	d91b      	bls.n	a892 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a85a:	4ba0      	ldr	r3, [pc, #640]	; (aadc <set_arm_clock+0x298>)
    a85c:	4298      	cmp	r0, r3
    a85e:	f240 8102 	bls.w	aa66 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a862:	1ac3      	subs	r3, r0, r3
    a864:	499e      	ldr	r1, [pc, #632]	; (aae0 <set_arm_clock+0x29c>)
    a866:	0a1b      	lsrs	r3, r3, #8
    a868:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a86c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a870:	09db      	lsrs	r3, r3, #7
    a872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a876:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    a87a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a87e:	428b      	cmp	r3, r1
    a880:	bf28      	it	cs
    a882:	460b      	movcs	r3, r1
    a884:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    a888:	4b96      	ldr	r3, [pc, #600]	; (aae4 <set_arm_clock+0x2a0>)
    a88a:	fba3 3707 	umull	r3, r7, r3, r7
    a88e:	08ff      	lsrs	r7, r7, #3
    a890:	e004      	b.n	a89c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    a892:	4f95      	ldr	r7, [pc, #596]	; (aae8 <set_arm_clock+0x2a4>)
    a894:	42b8      	cmp	r0, r7
    a896:	bf8c      	ite	hi
    a898:	270e      	movhi	r7, #14
    a89a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a89c:	498d      	ldr	r1, [pc, #564]	; (aad4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a89e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a8a2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8a6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a8a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    a8ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8b0:	d20c      	bcs.n	a8cc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a8b2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a8b6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a8ba:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    a8be:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a8c2:	680b      	ldr	r3, [r1, #0]
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	dafc      	bge.n	a8c2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8c8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a8cc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    a8d0:	d124      	bne.n	a91c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a8d2:	4986      	ldr	r1, [pc, #536]	; (aaec <set_arm_clock+0x2a8>)
    a8d4:	690c      	ldr	r4, [r1, #16]
    a8d6:	4986      	ldr	r1, [pc, #536]	; (aaf0 <set_arm_clock+0x2ac>)
    a8d8:	43a1      	bics	r1, r4
    a8da:	f000 80ea 	beq.w	aab2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a8de:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    a8e2:	4634      	mov	r4, r6
    a8e4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a8e8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    a8ec:	d004      	beq.n	a8f8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a8ee:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a8f2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    a8f4:	4b77      	ldr	r3, [pc, #476]	; (aad4 <set_arm_clock+0x290>)
    a8f6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a8f8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    a8fc:	d007      	beq.n	a90e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a8fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    a902:	4974      	ldr	r1, [pc, #464]	; (aad4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a904:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    a906:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a908:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    a90a:	071a      	lsls	r2, r3, #28
    a90c:	d4fc      	bmi.n	a908 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a90e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a912:	4a70      	ldr	r2, [pc, #448]	; (aad4 <set_arm_clock+0x290>)
    a914:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a916:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a918:	069b      	lsls	r3, r3, #26
    a91a:	d4fc      	bmi.n	a916 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    a91c:	4c75      	ldr	r4, [pc, #468]	; (aaf4 <set_arm_clock+0x2b0>)
    a91e:	42a0      	cmp	r0, r4
    a920:	f200 80ce 	bhi.w	aac0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    a924:	f04f 0c01 	mov.w	ip, #1
    a928:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    a92a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    a92c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    a930:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    a934:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a938:	42a2      	cmp	r2, r4
    a93a:	d818      	bhi.n	a96e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    a93c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    a940:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    a944:	f040 808d 	bne.w	aa62 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    a948:	f1bc 0f04 	cmp.w	ip, #4
    a94c:	f200 8091 	bhi.w	aa72 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    a950:	180a      	adds	r2, r1, r0
    a952:	42a2      	cmp	r2, r4
    a954:	f200 80a4 	bhi.w	aaa0 <set_arm_clock+0x25c>
    a958:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    a95c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    a95e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a962:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    a966:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a96a:	42a2      	cmp	r2, r4
    a96c:	d9e6      	bls.n	a93c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a96e:	f10c 31ff 	add.w	r1, ip, #4294967295
    a972:	028c      	lsls	r4, r1, #10
    a974:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a978:	485f      	ldr	r0, [pc, #380]	; (aaf8 <set_arm_clock+0x2b4>)
    a97a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    a97c:	4a5f      	ldr	r2, [pc, #380]	; (aafc <set_arm_clock+0x2b8>)
    a97e:	4290      	cmp	r0, r2
    a980:	d97f      	bls.n	aa82 <set_arm_clock+0x23e>
    a982:	f8df a1a4 	ldr.w	sl, [pc, #420]	; ab28 <set_arm_clock+0x2e4>
    a986:	226c      	movs	r2, #108	; 0x6c
    a988:	485d      	ldr	r0, [pc, #372]	; (ab00 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a98a:	4d58      	ldr	r5, [pc, #352]	; (aaec <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a98c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a990:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    a994:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a998:	f8df c190 	ldr.w	ip, [pc, #400]	; ab2c <set_arm_clock+0x2e8>
    a99c:	ea0e 0c0c 	and.w	ip, lr, ip
    a9a0:	45d4      	cmp	ip, sl
    a9a2:	d009      	beq.n	a9b8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a9a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a9a8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    a9ac:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a9b0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a9b2:	682a      	ldr	r2, [r5, #0]
    a9b4:	2a00      	cmp	r2, #0
    a9b6:	dafc      	bge.n	a9b2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a9b8:	4a46      	ldr	r2, [pc, #280]	; (aad4 <set_arm_clock+0x290>)
    a9ba:	6915      	ldr	r5, [r2, #16]
    a9bc:	f005 0507 	and.w	r5, r5, #7
    a9c0:	429d      	cmp	r5, r3
    a9c2:	d003      	beq.n	a9cc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a9c4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a9c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a9c8:	03dd      	lsls	r5, r3, #15
    a9ca:	d4fc      	bmi.n	a9c6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a9cc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    a9d0:	d009      	beq.n	a9e6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a9d2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a9d6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    a9da:	4a3e      	ldr	r2, [pc, #248]	; (aad4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a9dc:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    a9de:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a9e0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    a9e2:	0799      	lsls	r1, r3, #30
    a9e4:	d4fc      	bmi.n	a9e0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a9e6:	4947      	ldr	r1, [pc, #284]	; (ab04 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    a9e8:	4a47      	ldr	r2, [pc, #284]	; (ab08 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a9ea:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    a9ec:	4291      	cmp	r1, r2
    a9ee:	d83c      	bhi.n	aa6a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a9f0:	4b46      	ldr	r3, [pc, #280]	; (ab0c <set_arm_clock+0x2c8>)
    a9f2:	09c9      	lsrs	r1, r1, #7
    a9f4:	fba3 3101 	umull	r3, r1, r3, r1
    a9f8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a9fa:	1e4b      	subs	r3, r1, #1
    a9fc:	021b      	lsls	r3, r3, #8
    a9fe:	ea86 0203 	eor.w	r2, r6, r3
    aa02:	f412 7f40 	tst.w	r2, #768	; 0x300
    aa06:	d006      	beq.n	aa16 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    aa08:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    aa0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    aa10:	4a30      	ldr	r2, [pc, #192]	; (aad4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    aa12:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    aa14:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    aa16:	4a2f      	ldr	r2, [pc, #188]	; (aad4 <set_arm_clock+0x290>)
    aa18:	6953      	ldr	r3, [r2, #20]
    aa1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    aa1e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    aa20:	6c93      	ldr	r3, [r2, #72]	; 0x48
    aa22:	069b      	lsls	r3, r3, #26
    aa24:	d4fc      	bmi.n	aa20 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aa26:	4b3a      	ldr	r3, [pc, #232]	; (ab10 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa28:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aa2a:	fba3 2300 	umull	r2, r3, r3, r0
    aa2e:	f04f 32ff 	mov.w	r2, #4294967295
    aa32:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    aa36:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aa3a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    aa3e:	4a35      	ldr	r2, [pc, #212]	; (ab14 <set_arm_clock+0x2d0>)
    aa40:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    aa42:	4a35      	ldr	r2, [pc, #212]	; (ab18 <set_arm_clock+0x2d4>)
    aa44:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    aa46:	4a35      	ldr	r2, [pc, #212]	; (ab1c <set_arm_clock+0x2d8>)
    aa48:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa4a:	d208      	bcs.n	aa5e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    aa4c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    aa50:	4a21      	ldr	r2, [pc, #132]	; (aad8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    aa52:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    aa56:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    aa58:	6813      	ldr	r3, [r2, #0]
    aa5a:	2b00      	cmp	r3, #0
    aa5c:	dafc      	bge.n	aa58 <set_arm_clock+0x214>
	}

	return frequency;
}
    aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa62:	4673      	mov	r3, lr
    aa64:	e762      	b.n	a92c <set_arm_clock+0xe8>
    aa66:	2712      	movs	r7, #18
    aa68:	e718      	b.n	a89c <set_arm_clock+0x58>
    aa6a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    aa6e:	2104      	movs	r1, #4
    aa70:	e7c5      	b.n	a9fe <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa72:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa76:	4820      	ldr	r0, [pc, #128]	; (aaf8 <set_arm_clock+0x2b4>)
    aa78:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa7a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa7c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aa7e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa82:	4a27      	ldr	r2, [pc, #156]	; (ab20 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    aa84:	f8df a0a8 	ldr.w	sl, [pc, #168]	; ab30 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    aa88:	fba2 2000 	umull	r2, r0, r2, r0
    aa8c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    aa8e:	4825      	ldr	r0, [pc, #148]	; (ab24 <set_arm_clock+0x2e0>)
    aa90:	2a36      	cmp	r2, #54	; 0x36
    aa92:	bf38      	it	cc
    aa94:	2236      	movcc	r2, #54	; 0x36
    aa96:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    aa9a:	ea42 0a0a 	orr.w	sl, r2, sl
    aa9e:	e774      	b.n	a98a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    aaa0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    aaa4:	2300      	movs	r3, #0
    aaa6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    aaaa:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    aaae:	46ac      	mov	ip, r5
    aab0:	e762      	b.n	a978 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    aab2:	461d      	mov	r5, r3
    aab4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    aab8:	4611      	mov	r1, r2
    aaba:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    aabe:	e713      	b.n	a8e8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    aac0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    aac2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    aac6:	4602      	mov	r2, r0
    aac8:	4631      	mov	r1, r6
    aaca:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    aacc:	46e6      	mov	lr, ip
    aace:	e753      	b.n	a978 <set_arm_clock+0x134>
    aad0:	1f78a400 	.word	0x1f78a400
    aad4:	400fc000 	.word	0x400fc000
    aad8:	40080000 	.word	0x40080000
    aadc:	23c34600 	.word	0x23c34600
    aae0:	004cb223 	.word	0x004cb223
    aae4:	51eb851f 	.word	0x51eb851f
    aae8:	016e3600 	.word	0x016e3600
    aaec:	400d8000 	.word	0x400d8000
    aaf0:	80003040 	.word	0x80003040
    aaf4:	269fb1ff 	.word	0x269fb1ff
    aaf8:	005b8d80 	.word	0x005b8d80
    aafc:	4df67eff 	.word	0x4df67eff
    ab00:	4d3f6400 	.word	0x4d3f6400
    ab04:	08f0d17f 	.word	0x08f0d17f
    ab08:	2cb4177f 	.word	0x2cb4177f
    ab0c:	00e5109f 	.word	0x00e5109f
    ab10:	431bde83 	.word	0x431bde83
    ab14:	200043f4 	.word	0x200043f4
    ab18:	200043f0 	.word	0x200043f0
    ab1c:	20018864 	.word	0x20018864
    ab20:	165e9f81 	.word	0x165e9f81
    ab24:	00b71b00 	.word	0x00b71b00
    ab28:	8000206c 	.word	0x8000206c
    ab2c:	8001307f 	.word	0x8001307f
    ab30:	80002000 	.word	0x80002000

0000ab34 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    ab34:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    ab36:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ab38:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    ab3c:	4619      	mov	r1, r3
{
    ab3e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ab40:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ab44:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ab48:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ab4c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    ab50:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    ab54:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    ab56:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ab5a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    ab5e:	b29b      	uxth	r3, r3
    ab60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    ab64:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ab68:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    ab6c:	3101      	adds	r1, #1
    ab6e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    ab72:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ab74:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ab76:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ab7a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ab7c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ab7e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ab80:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ab82:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    ab86:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ab88:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ab8a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ab8c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    ab8e:	d1eb      	bne.n	ab68 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ab90:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    ab94:	b29b      	uxth	r3, r3
    ab96:	f043 030f 	orr.w	r3, r3, #15
    ab9a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ab9e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    aba2:	b29b      	uxth	r3, r3
    aba4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    aba8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    abac:	bd10      	pop	{r4, pc}
    abae:	bf00      	nop

0000abb0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    abb0:	4b37      	ldr	r3, [pc, #220]	; (ac90 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    abb2:	4a38      	ldr	r2, [pc, #224]	; (ac94 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    abb4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    abb6:	4838      	ldr	r0, [pc, #224]	; (ac98 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    abb8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    abbc:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    abbe:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    abc0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    abc4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    abc8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    abcc:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    abd0:	430a      	orrs	r2, r1
    abd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    abd6:	f7ff ffad 	bl	ab34 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    abda:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    abde:	f7ff ffa9 	bl	ab34 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    abe2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    abe6:	f7ff ffa5 	bl	ab34 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    abea:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    abee:	f7ff ffa1 	bl	ab34 <flexpwm_init>
	for (i=0; i < 4; i++) {
    abf2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    abf4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    abf8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    abfc:	4611      	mov	r1, r2
    abfe:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ac02:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ac06:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ac08:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ac0a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ac0c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ac0e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ac12:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ac14:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ac16:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ac1a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac1c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ac1e:	d1ee      	bne.n	abfe <pwm_init+0x4e>
    ac20:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ac22:	481e      	ldr	r0, [pc, #120]	; (ac9c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ac24:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ac28:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ac2c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ac2e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac32:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ac36:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ac3a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ac3e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ac40:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ac42:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ac44:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ac46:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ac4a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ac4c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ac4e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ac52:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac54:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ac56:	d1ee      	bne.n	ac36 <pwm_init+0x86>
    ac58:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ac5a:	4811      	ldr	r0, [pc, #68]	; (aca0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ac5c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ac5e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ac62:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ac64:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac68:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ac6c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ac70:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ac74:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ac76:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ac78:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ac7a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ac7c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ac7e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ac80:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ac82:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ac86:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ac88:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    ac8c:	d1ee      	bne.n	ac6c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    ac8e:	bd70      	pop	{r4, r5, r6, pc}
    ac90:	400fc000 	.word	0x400fc000
    ac94:	fc030000 	.word	0xfc030000
    ac98:	403dc000 	.word	0x403dc000
    ac9c:	401e0000 	.word	0x401e0000
    aca0:	401e4000 	.word	0x401e4000

0000aca4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    aca4:	4a07      	ldr	r2, [pc, #28]	; (acc4 <rtc_get+0x20>)
    aca6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    aca8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    acaa:	4619      	mov	r1, r3
    acac:	4684      	mov	ip, r0
    acae:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    acb0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    acb2:	4299      	cmp	r1, r3
    acb4:	d1f9      	bne.n	acaa <rtc_get+0x6>
    acb6:	4584      	cmp	ip, r0
    acb8:	d1f7      	bne.n	acaa <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    acba:	0bdb      	lsrs	r3, r3, #15
}
    acbc:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    acc0:	4770      	bx	lr
    acc2:	bf00      	nop
    acc4:	400d4000 	.word	0x400d4000

0000acc8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    acc8:	4770      	bx	lr
    acca:	bf00      	nop

0000accc <sm_align_pool>:
{
    accc:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    acce:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    acd2:	b15b      	cbz	r3, acec <sm_align_pool+0x20>
    acd4:	b1ba      	cbz	r2, ad06 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    acd6:	4b0f      	ldr	r3, [pc, #60]	; (ad14 <sm_align_pool+0x48>)
    acd8:	fba3 1302 	umull	r1, r3, r3, r2
    acdc:	08db      	lsrs	r3, r3, #3
    acde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ace2:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ace6:	d10a      	bne.n	acfe <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    ace8:	2001      	movs	r0, #1
}
    acea:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    acec:	4b09      	ldr	r3, [pc, #36]	; (ad14 <sm_align_pool+0x48>)
    acee:	fba3 1302 	umull	r1, r3, r3, r2
    acf2:	08db      	lsrs	r3, r3, #3
    acf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    acf8:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    acfc:	d001      	beq.n	ad02 <sm_align_pool+0x36>
    acfe:	1ad2      	subs	r2, r2, r3
    ad00:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ad02:	2af0      	cmp	r2, #240	; 0xf0
    ad04:	d8f0      	bhi.n	ace8 <sm_align_pool+0x1c>
		errno = ENOSPC;
    ad06:	f001 fa17 	bl	c138 <__errno>
    ad0a:	221c      	movs	r2, #28
    ad0c:	4603      	mov	r3, r0
    ad0e:	2000      	movs	r0, #0
    ad10:	601a      	str	r2, [r3, #0]
}
    ad12:	bd08      	pop	{r3, pc}
    ad14:	aaaaaaab 	.word	0xaaaaaaab

0000ad18 <sm_set_pool>:
{
    ad18:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ad1a:	4604      	mov	r4, r0
    ad1c:	b338      	cbz	r0, ad6e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    ad1e:	b119      	cbz	r1, ad28 <sm_set_pool+0x10>
    ad20:	fab2 f682 	clz	r6, r2
    ad24:	0976      	lsrs	r6, r6, #5
    ad26:	b9a2      	cbnz	r2, ad52 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    ad28:	6820      	ldr	r0, [r4, #0]
    ad2a:	b300      	cbz	r0, ad6e <sm_set_pool+0x56>
    ad2c:	6862      	ldr	r2, [r4, #4]
    ad2e:	b1f2      	cbz	r2, ad6e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    ad30:	4b18      	ldr	r3, [pc, #96]	; (ad94 <sm_set_pool+0x7c>)
    ad32:	4919      	ldr	r1, [pc, #100]	; (ad98 <sm_set_pool+0x80>)
    ad34:	fb02 f303 	mul.w	r3, r2, r3
    ad38:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    ad3c:	d317      	bcc.n	ad6e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ad3e:	68a3      	ldr	r3, [r4, #8]
    ad40:	b9e3      	cbnz	r3, ad7c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ad42:	2200      	movs	r2, #0
			return 1;
    ad44:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    ad46:	6022      	str	r2, [r4, #0]
    ad48:	6062      	str	r2, [r4, #4]
    ad4a:	60a2      	str	r2, [r4, #8]
    ad4c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ad4e:	4618      	mov	r0, r3
    ad50:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    ad52:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    ad54:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    ad56:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    ad5a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    ad5c:	f7ff ffb6 	bl	accc <sm_align_pool>
    ad60:	4603      	mov	r3, r0
    ad62:	2800      	cmp	r0, #0
    ad64:	d0f3      	beq.n	ad4e <sm_set_pool+0x36>
	if (do_zero) {
    ad66:	b96d      	cbnz	r5, ad84 <sm_set_pool+0x6c>
	return 1;
    ad68:	2301      	movs	r3, #1
}
    ad6a:	4618      	mov	r0, r3
    ad6c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    ad6e:	f001 f9e3 	bl	c138 <__errno>
    ad72:	2216      	movs	r2, #22
		return 0;
    ad74:	2300      	movs	r3, #0
		errno = EINVAL;
    ad76:	6002      	str	r2, [r0, #0]
}
    ad78:	4618      	mov	r0, r3
    ad7a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ad7c:	2100      	movs	r1, #0
    ad7e:	f001 f885 	bl	be8c <memset>
    ad82:	e7de      	b.n	ad42 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    ad84:	6862      	ldr	r2, [r4, #4]
    ad86:	4631      	mov	r1, r6
    ad88:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    ad8a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    ad8c:	f001 f87e 	bl	be8c <memset>
	return 1;
    ad90:	2301      	movs	r3, #1
    ad92:	e7dc      	b.n	ad4e <sm_set_pool+0x36>
    ad94:	aaaaaaab 	.word	0xaaaaaaab
    ad98:	15555555 	.word	0x15555555

0000ad9c <__aeabi_atexit>:
    ad9c:	4603      	mov	r3, r0
    ad9e:	4608      	mov	r0, r1
    ada0:	4619      	mov	r1, r3
    ada2:	f000 be8d 	b.w	bac0 <__cxa_atexit>
    ada6:	bf00      	nop

0000ada8 <atol>:
    ada8:	220a      	movs	r2, #10
    adaa:	2100      	movs	r1, #0
    adac:	f000 bd7c 	b.w	b8a8 <strtol>

0000adb0 <itoa>:
    adb0:	1e93      	subs	r3, r2, #2
    adb2:	2b22      	cmp	r3, #34	; 0x22
    adb4:	b510      	push	{r4, lr}
    adb6:	460c      	mov	r4, r1
    adb8:	d80c      	bhi.n	add4 <itoa+0x24>
    adba:	2a0a      	cmp	r2, #10
    adbc:	d003      	beq.n	adc6 <itoa+0x16>
    adbe:	f000 fe2f 	bl	ba20 <__utoa>
    adc2:	4620      	mov	r0, r4
    adc4:	bd10      	pop	{r4, pc}
    adc6:	2800      	cmp	r0, #0
    adc8:	daf9      	bge.n	adbe <itoa+0xe>
    adca:	232d      	movs	r3, #45	; 0x2d
    adcc:	f801 3b01 	strb.w	r3, [r1], #1
    add0:	4240      	negs	r0, r0
    add2:	e7f4      	b.n	adbe <itoa+0xe>
    add4:	2300      	movs	r3, #0
    add6:	700b      	strb	r3, [r1, #0]
    add8:	4618      	mov	r0, r3
    adda:	bd10      	pop	{r4, pc}

0000addc <malloc>:
    addc:	4b02      	ldr	r3, [pc, #8]	; (ade8 <malloc+0xc>)
    adde:	4601      	mov	r1, r0
    ade0:	6818      	ldr	r0, [r3, #0]
    ade2:	f000 b80b 	b.w	adfc <_malloc_r>
    ade6:	bf00      	nop
    ade8:	2000499c 	.word	0x2000499c

0000adec <free>:
    adec:	4b02      	ldr	r3, [pc, #8]	; (adf8 <free+0xc>)
    adee:	4601      	mov	r1, r0
    adf0:	6818      	ldr	r0, [r3, #0]
    adf2:	f001 bca7 	b.w	c744 <_free_r>
    adf6:	bf00      	nop
    adf8:	2000499c 	.word	0x2000499c

0000adfc <_malloc_r>:
    adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae00:	f101 060b 	add.w	r6, r1, #11
    ae04:	2e16      	cmp	r6, #22
    ae06:	b083      	sub	sp, #12
    ae08:	4604      	mov	r4, r0
    ae0a:	d824      	bhi.n	ae56 <_malloc_r+0x5a>
    ae0c:	2910      	cmp	r1, #16
    ae0e:	f200 80ba 	bhi.w	af86 <_malloc_r+0x18a>
    ae12:	f000 faa3 	bl	b35c <__malloc_lock>
    ae16:	2610      	movs	r6, #16
    ae18:	2218      	movs	r2, #24
    ae1a:	2002      	movs	r0, #2
    ae1c:	4fb5      	ldr	r7, [pc, #724]	; (b0f4 <_malloc_r+0x2f8>)
    ae1e:	443a      	add	r2, r7
    ae20:	f1a2 0108 	sub.w	r1, r2, #8
    ae24:	6853      	ldr	r3, [r2, #4]
    ae26:	428b      	cmp	r3, r1
    ae28:	f000 80ba 	beq.w	afa0 <_malloc_r+0x1a4>
    ae2c:	685a      	ldr	r2, [r3, #4]
    ae2e:	68d9      	ldr	r1, [r3, #12]
    ae30:	f022 0203 	bic.w	r2, r2, #3
    ae34:	441a      	add	r2, r3
    ae36:	689d      	ldr	r5, [r3, #8]
    ae38:	60e9      	str	r1, [r5, #12]
    ae3a:	608d      	str	r5, [r1, #8]
    ae3c:	6851      	ldr	r1, [r2, #4]
    ae3e:	f041 0101 	orr.w	r1, r1, #1
    ae42:	4620      	mov	r0, r4
    ae44:	6051      	str	r1, [r2, #4]
    ae46:	f103 0508 	add.w	r5, r3, #8
    ae4a:	f000 fa8d 	bl	b368 <__malloc_unlock>
    ae4e:	4628      	mov	r0, r5
    ae50:	b003      	add	sp, #12
    ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae56:	f036 0607 	bics.w	r6, r6, #7
    ae5a:	f100 8094 	bmi.w	af86 <_malloc_r+0x18a>
    ae5e:	42b1      	cmp	r1, r6
    ae60:	f200 8091 	bhi.w	af86 <_malloc_r+0x18a>
    ae64:	f000 fa7a 	bl	b35c <__malloc_lock>
    ae68:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ae6c:	f0c0 819a 	bcc.w	b1a4 <_malloc_r+0x3a8>
    ae70:	0a73      	lsrs	r3, r6, #9
    ae72:	f000 808f 	beq.w	af94 <_malloc_r+0x198>
    ae76:	2b04      	cmp	r3, #4
    ae78:	f200 816f 	bhi.w	b15a <_malloc_r+0x35e>
    ae7c:	09b3      	lsrs	r3, r6, #6
    ae7e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ae82:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    ae86:	00c3      	lsls	r3, r0, #3
    ae88:	4f9a      	ldr	r7, [pc, #616]	; (b0f4 <_malloc_r+0x2f8>)
    ae8a:	443b      	add	r3, r7
    ae8c:	f1a3 0508 	sub.w	r5, r3, #8
    ae90:	685b      	ldr	r3, [r3, #4]
    ae92:	429d      	cmp	r5, r3
    ae94:	d106      	bne.n	aea4 <_malloc_r+0xa8>
    ae96:	e00c      	b.n	aeb2 <_malloc_r+0xb6>
    ae98:	2900      	cmp	r1, #0
    ae9a:	f280 8127 	bge.w	b0ec <_malloc_r+0x2f0>
    ae9e:	68db      	ldr	r3, [r3, #12]
    aea0:	429d      	cmp	r5, r3
    aea2:	d006      	beq.n	aeb2 <_malloc_r+0xb6>
    aea4:	685a      	ldr	r2, [r3, #4]
    aea6:	f022 0203 	bic.w	r2, r2, #3
    aeaa:	1b91      	subs	r1, r2, r6
    aeac:	290f      	cmp	r1, #15
    aeae:	ddf3      	ble.n	ae98 <_malloc_r+0x9c>
    aeb0:	4660      	mov	r0, ip
    aeb2:	693d      	ldr	r5, [r7, #16]
    aeb4:	f8df c250 	ldr.w	ip, [pc, #592]	; b108 <_malloc_r+0x30c>
    aeb8:	4565      	cmp	r5, ip
    aeba:	d07c      	beq.n	afb6 <_malloc_r+0x1ba>
    aebc:	686a      	ldr	r2, [r5, #4]
    aebe:	f022 0203 	bic.w	r2, r2, #3
    aec2:	1b93      	subs	r3, r2, r6
    aec4:	2b0f      	cmp	r3, #15
    aec6:	f300 817b 	bgt.w	b1c0 <_malloc_r+0x3c4>
    aeca:	2b00      	cmp	r3, #0
    aecc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    aed0:	f280 816c 	bge.w	b1ac <_malloc_r+0x3b0>
    aed4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    aed8:	f080 811a 	bcs.w	b110 <_malloc_r+0x314>
    aedc:	08d3      	lsrs	r3, r2, #3
    aede:	6879      	ldr	r1, [r7, #4]
    aee0:	3301      	adds	r3, #1
    aee2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    aee6:	2201      	movs	r2, #1
    aee8:	fa02 f20e 	lsl.w	r2, r2, lr
    aeec:	430a      	orrs	r2, r1
    aeee:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    aef2:	f8c5 e008 	str.w	lr, [r5, #8]
    aef6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    aefa:	3908      	subs	r1, #8
    aefc:	60e9      	str	r1, [r5, #12]
    aefe:	607a      	str	r2, [r7, #4]
    af00:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    af04:	f8ce 500c 	str.w	r5, [lr, #12]
    af08:	1083      	asrs	r3, r0, #2
    af0a:	2101      	movs	r1, #1
    af0c:	4099      	lsls	r1, r3
    af0e:	4291      	cmp	r1, r2
    af10:	d857      	bhi.n	afc2 <_malloc_r+0x1c6>
    af12:	4211      	tst	r1, r2
    af14:	d106      	bne.n	af24 <_malloc_r+0x128>
    af16:	f020 0003 	bic.w	r0, r0, #3
    af1a:	0049      	lsls	r1, r1, #1
    af1c:	4211      	tst	r1, r2
    af1e:	f100 0004 	add.w	r0, r0, #4
    af22:	d0fa      	beq.n	af1a <_malloc_r+0x11e>
    af24:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    af28:	464d      	mov	r5, r9
    af2a:	4686      	mov	lr, r0
    af2c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    af30:	4545      	cmp	r5, r8
    af32:	d108      	bne.n	af46 <_malloc_r+0x14a>
    af34:	e11d      	b.n	b172 <_malloc_r+0x376>
    af36:	2b00      	cmp	r3, #0
    af38:	f280 8124 	bge.w	b184 <_malloc_r+0x388>
    af3c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    af40:	4545      	cmp	r5, r8
    af42:	f000 8116 	beq.w	b172 <_malloc_r+0x376>
    af46:	f8d8 2004 	ldr.w	r2, [r8, #4]
    af4a:	f022 0203 	bic.w	r2, r2, #3
    af4e:	1b93      	subs	r3, r2, r6
    af50:	2b0f      	cmp	r3, #15
    af52:	ddf0      	ble.n	af36 <_malloc_r+0x13a>
    af54:	4620      	mov	r0, r4
    af56:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    af5a:	eb08 0106 	add.w	r1, r8, r6
    af5e:	f046 0601 	orr.w	r6, r6, #1
    af62:	f8c8 6004 	str.w	r6, [r8, #4]
    af66:	60ec      	str	r4, [r5, #12]
    af68:	60a5      	str	r5, [r4, #8]
    af6a:	f043 0401 	orr.w	r4, r3, #1
    af6e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    af72:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    af76:	604c      	str	r4, [r1, #4]
    af78:	f848 3002 	str.w	r3, [r8, r2]
    af7c:	f000 f9f4 	bl	b368 <__malloc_unlock>
    af80:	f108 0508 	add.w	r5, r8, #8
    af84:	e002      	b.n	af8c <_malloc_r+0x190>
    af86:	230c      	movs	r3, #12
    af88:	6023      	str	r3, [r4, #0]
    af8a:	2500      	movs	r5, #0
    af8c:	4628      	mov	r0, r5
    af8e:	b003      	add	sp, #12
    af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af94:	f44f 7300 	mov.w	r3, #512	; 0x200
    af98:	2040      	movs	r0, #64	; 0x40
    af9a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    af9e:	e773      	b.n	ae88 <_malloc_r+0x8c>
    afa0:	68d3      	ldr	r3, [r2, #12]
    afa2:	429a      	cmp	r2, r3
    afa4:	bf08      	it	eq
    afa6:	3002      	addeq	r0, #2
    afa8:	f47f af40 	bne.w	ae2c <_malloc_r+0x30>
    afac:	693d      	ldr	r5, [r7, #16]
    afae:	f8df c158 	ldr.w	ip, [pc, #344]	; b108 <_malloc_r+0x30c>
    afb2:	4565      	cmp	r5, ip
    afb4:	d182      	bne.n	aebc <_malloc_r+0xc0>
    afb6:	687a      	ldr	r2, [r7, #4]
    afb8:	1083      	asrs	r3, r0, #2
    afba:	2101      	movs	r1, #1
    afbc:	4099      	lsls	r1, r3
    afbe:	4291      	cmp	r1, r2
    afc0:	d9a7      	bls.n	af12 <_malloc_r+0x116>
    afc2:	68bd      	ldr	r5, [r7, #8]
    afc4:	686b      	ldr	r3, [r5, #4]
    afc6:	f023 0903 	bic.w	r9, r3, #3
    afca:	454e      	cmp	r6, r9
    afcc:	d803      	bhi.n	afd6 <_malloc_r+0x1da>
    afce:	eba9 0306 	sub.w	r3, r9, r6
    afd2:	2b0f      	cmp	r3, #15
    afd4:	dc7a      	bgt.n	b0cc <_malloc_r+0x2d0>
    afd6:	f8df b134 	ldr.w	fp, [pc, #308]	; b10c <_malloc_r+0x310>
    afda:	4b47      	ldr	r3, [pc, #284]	; (b0f8 <_malloc_r+0x2fc>)
    afdc:	f8db 2000 	ldr.w	r2, [fp]
    afe0:	681b      	ldr	r3, [r3, #0]
    afe2:	3201      	adds	r2, #1
    afe4:	4433      	add	r3, r6
    afe6:	eb05 0a09 	add.w	sl, r5, r9
    afea:	f000 8133 	beq.w	b254 <_malloc_r+0x458>
    afee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    aff2:	330f      	adds	r3, #15
    aff4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    aff8:	f028 080f 	bic.w	r8, r8, #15
    affc:	4641      	mov	r1, r8
    affe:	4620      	mov	r0, r4
    b000:	f001 f872 	bl	c0e8 <_sbrk_r>
    b004:	1c41      	adds	r1, r0, #1
    b006:	4602      	mov	r2, r0
    b008:	f000 80f3 	beq.w	b1f2 <_malloc_r+0x3f6>
    b00c:	4582      	cmp	sl, r0
    b00e:	f200 80ee 	bhi.w	b1ee <_malloc_r+0x3f2>
    b012:	4b3a      	ldr	r3, [pc, #232]	; (b0fc <_malloc_r+0x300>)
    b014:	6819      	ldr	r1, [r3, #0]
    b016:	4441      	add	r1, r8
    b018:	6019      	str	r1, [r3, #0]
    b01a:	4608      	mov	r0, r1
    b01c:	f000 814e 	beq.w	b2bc <_malloc_r+0x4c0>
    b020:	f8db 1000 	ldr.w	r1, [fp]
    b024:	9301      	str	r3, [sp, #4]
    b026:	3101      	adds	r1, #1
    b028:	bf1b      	ittet	ne
    b02a:	eba2 010a 	subne.w	r1, r2, sl
    b02e:	1809      	addne	r1, r1, r0
    b030:	f8cb 2000 	streq.w	r2, [fp]
    b034:	6019      	strne	r1, [r3, #0]
    b036:	f012 0b07 	ands.w	fp, r2, #7
    b03a:	f000 8117 	beq.w	b26c <_malloc_r+0x470>
    b03e:	f1cb 0108 	rsb	r1, fp, #8
    b042:	440a      	add	r2, r1
    b044:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    b048:	4490      	add	r8, r2
    b04a:	3108      	adds	r1, #8
    b04c:	eba1 0108 	sub.w	r1, r1, r8
    b050:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b054:	4651      	mov	r1, sl
    b056:	4620      	mov	r0, r4
    b058:	9200      	str	r2, [sp, #0]
    b05a:	f001 f845 	bl	c0e8 <_sbrk_r>
    b05e:	1c42      	adds	r2, r0, #1
    b060:	e9dd 2300 	ldrd	r2, r3, [sp]
    b064:	f000 814f 	beq.w	b306 <_malloc_r+0x50a>
    b068:	1a80      	subs	r0, r0, r2
    b06a:	eb00 080a 	add.w	r8, r0, sl
    b06e:	6819      	ldr	r1, [r3, #0]
    b070:	60ba      	str	r2, [r7, #8]
    b072:	f048 0001 	orr.w	r0, r8, #1
    b076:	4451      	add	r1, sl
    b078:	42bd      	cmp	r5, r7
    b07a:	6050      	str	r0, [r2, #4]
    b07c:	6019      	str	r1, [r3, #0]
    b07e:	f000 8129 	beq.w	b2d4 <_malloc_r+0x4d8>
    b082:	f1b9 0f0f 	cmp.w	r9, #15
    b086:	f240 8127 	bls.w	b2d8 <_malloc_r+0x4dc>
    b08a:	6868      	ldr	r0, [r5, #4]
    b08c:	f1a9 0c0c 	sub.w	ip, r9, #12
    b090:	f02c 0c07 	bic.w	ip, ip, #7
    b094:	f000 0001 	and.w	r0, r0, #1
    b098:	ea40 000c 	orr.w	r0, r0, ip
    b09c:	6068      	str	r0, [r5, #4]
    b09e:	f04f 0e05 	mov.w	lr, #5
    b0a2:	eb05 000c 	add.w	r0, r5, ip
    b0a6:	f1bc 0f0f 	cmp.w	ip, #15
    b0aa:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    b0ae:	f200 8132 	bhi.w	b316 <_malloc_r+0x51a>
    b0b2:	6850      	ldr	r0, [r2, #4]
    b0b4:	4615      	mov	r5, r2
    b0b6:	4b12      	ldr	r3, [pc, #72]	; (b100 <_malloc_r+0x304>)
    b0b8:	681a      	ldr	r2, [r3, #0]
    b0ba:	428a      	cmp	r2, r1
    b0bc:	bf38      	it	cc
    b0be:	6019      	strcc	r1, [r3, #0]
    b0c0:	4b10      	ldr	r3, [pc, #64]	; (b104 <_malloc_r+0x308>)
    b0c2:	681a      	ldr	r2, [r3, #0]
    b0c4:	428a      	cmp	r2, r1
    b0c6:	bf38      	it	cc
    b0c8:	6019      	strcc	r1, [r3, #0]
    b0ca:	e094      	b.n	b1f6 <_malloc_r+0x3fa>
    b0cc:	19aa      	adds	r2, r5, r6
    b0ce:	f043 0301 	orr.w	r3, r3, #1
    b0d2:	f046 0601 	orr.w	r6, r6, #1
    b0d6:	606e      	str	r6, [r5, #4]
    b0d8:	4620      	mov	r0, r4
    b0da:	60ba      	str	r2, [r7, #8]
    b0dc:	6053      	str	r3, [r2, #4]
    b0de:	f000 f943 	bl	b368 <__malloc_unlock>
    b0e2:	3508      	adds	r5, #8
    b0e4:	4628      	mov	r0, r5
    b0e6:	b003      	add	sp, #12
    b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0ec:	68d9      	ldr	r1, [r3, #12]
    b0ee:	441a      	add	r2, r3
    b0f0:	e6a1      	b.n	ae36 <_malloc_r+0x3a>
    b0f2:	bf00      	nop
    b0f4:	20004580 	.word	0x20004580
    b0f8:	20005288 	.word	0x20005288
    b0fc:	20005258 	.word	0x20005258
    b100:	20005280 	.word	0x20005280
    b104:	20005284 	.word	0x20005284
    b108:	20004588 	.word	0x20004588
    b10c:	20004988 	.word	0x20004988
    b110:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    b114:	ea4f 2352 	mov.w	r3, r2, lsr #9
    b118:	d363      	bcc.n	b1e2 <_malloc_r+0x3e6>
    b11a:	2b14      	cmp	r3, #20
    b11c:	f200 80b7 	bhi.w	b28e <_malloc_r+0x492>
    b120:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    b124:	00c9      	lsls	r1, r1, #3
    b126:	335b      	adds	r3, #91	; 0x5b
    b128:	eb07 0e01 	add.w	lr, r7, r1
    b12c:	5879      	ldr	r1, [r7, r1]
    b12e:	f1ae 0e08 	sub.w	lr, lr, #8
    b132:	458e      	cmp	lr, r1
    b134:	f000 8091 	beq.w	b25a <_malloc_r+0x45e>
    b138:	684b      	ldr	r3, [r1, #4]
    b13a:	f023 0303 	bic.w	r3, r3, #3
    b13e:	4293      	cmp	r3, r2
    b140:	d902      	bls.n	b148 <_malloc_r+0x34c>
    b142:	6889      	ldr	r1, [r1, #8]
    b144:	458e      	cmp	lr, r1
    b146:	d1f7      	bne.n	b138 <_malloc_r+0x33c>
    b148:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    b14c:	687a      	ldr	r2, [r7, #4]
    b14e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    b152:	f8ce 5008 	str.w	r5, [lr, #8]
    b156:	60cd      	str	r5, [r1, #12]
    b158:	e6d6      	b.n	af08 <_malloc_r+0x10c>
    b15a:	2b14      	cmp	r3, #20
    b15c:	d959      	bls.n	b212 <_malloc_r+0x416>
    b15e:	2b54      	cmp	r3, #84	; 0x54
    b160:	f200 809d 	bhi.w	b29e <_malloc_r+0x4a2>
    b164:	0b33      	lsrs	r3, r6, #12
    b166:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    b16a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    b16e:	00c3      	lsls	r3, r0, #3
    b170:	e68a      	b.n	ae88 <_malloc_r+0x8c>
    b172:	f10e 0e01 	add.w	lr, lr, #1
    b176:	f01e 0f03 	tst.w	lr, #3
    b17a:	f105 0508 	add.w	r5, r5, #8
    b17e:	f47f aed5 	bne.w	af2c <_malloc_r+0x130>
    b182:	e051      	b.n	b228 <_malloc_r+0x42c>
    b184:	4442      	add	r2, r8
    b186:	4645      	mov	r5, r8
    b188:	6853      	ldr	r3, [r2, #4]
    b18a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    b18e:	f043 0301 	orr.w	r3, r3, #1
    b192:	6053      	str	r3, [r2, #4]
    b194:	f855 3f08 	ldr.w	r3, [r5, #8]!
    b198:	4620      	mov	r0, r4
    b19a:	60d9      	str	r1, [r3, #12]
    b19c:	608b      	str	r3, [r1, #8]
    b19e:	f000 f8e3 	bl	b368 <__malloc_unlock>
    b1a2:	e6f3      	b.n	af8c <_malloc_r+0x190>
    b1a4:	08f0      	lsrs	r0, r6, #3
    b1a6:	f106 0208 	add.w	r2, r6, #8
    b1aa:	e637      	b.n	ae1c <_malloc_r+0x20>
    b1ac:	442a      	add	r2, r5
    b1ae:	4620      	mov	r0, r4
    b1b0:	6853      	ldr	r3, [r2, #4]
    b1b2:	f043 0301 	orr.w	r3, r3, #1
    b1b6:	6053      	str	r3, [r2, #4]
    b1b8:	3508      	adds	r5, #8
    b1ba:	f000 f8d5 	bl	b368 <__malloc_unlock>
    b1be:	e6e5      	b.n	af8c <_malloc_r+0x190>
    b1c0:	19a9      	adds	r1, r5, r6
    b1c2:	4620      	mov	r0, r4
    b1c4:	f046 0601 	orr.w	r6, r6, #1
    b1c8:	f043 0401 	orr.w	r4, r3, #1
    b1cc:	606e      	str	r6, [r5, #4]
    b1ce:	e9c7 1104 	strd	r1, r1, [r7, #16]
    b1d2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    b1d6:	604c      	str	r4, [r1, #4]
    b1d8:	50ab      	str	r3, [r5, r2]
    b1da:	f000 f8c5 	bl	b368 <__malloc_unlock>
    b1de:	3508      	adds	r5, #8
    b1e0:	e6d4      	b.n	af8c <_malloc_r+0x190>
    b1e2:	0993      	lsrs	r3, r2, #6
    b1e4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    b1e8:	00c9      	lsls	r1, r1, #3
    b1ea:	3338      	adds	r3, #56	; 0x38
    b1ec:	e79c      	b.n	b128 <_malloc_r+0x32c>
    b1ee:	42bd      	cmp	r5, r7
    b1f0:	d05f      	beq.n	b2b2 <_malloc_r+0x4b6>
    b1f2:	68bd      	ldr	r5, [r7, #8]
    b1f4:	6868      	ldr	r0, [r5, #4]
    b1f6:	f020 0803 	bic.w	r8, r0, #3
    b1fa:	4546      	cmp	r6, r8
    b1fc:	eba8 0306 	sub.w	r3, r8, r6
    b200:	d802      	bhi.n	b208 <_malloc_r+0x40c>
    b202:	2b0f      	cmp	r3, #15
    b204:	f73f af62 	bgt.w	b0cc <_malloc_r+0x2d0>
    b208:	4620      	mov	r0, r4
    b20a:	f000 f8ad 	bl	b368 <__malloc_unlock>
    b20e:	2500      	movs	r5, #0
    b210:	e6bc      	b.n	af8c <_malloc_r+0x190>
    b212:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    b216:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    b21a:	00c3      	lsls	r3, r0, #3
    b21c:	e634      	b.n	ae88 <_malloc_r+0x8c>
    b21e:	f859 3908 	ldr.w	r3, [r9], #-8
    b222:	454b      	cmp	r3, r9
    b224:	f040 8096 	bne.w	b354 <_malloc_r+0x558>
    b228:	f010 0f03 	tst.w	r0, #3
    b22c:	f100 30ff 	add.w	r0, r0, #4294967295
    b230:	d1f5      	bne.n	b21e <_malloc_r+0x422>
    b232:	687b      	ldr	r3, [r7, #4]
    b234:	ea23 0301 	bic.w	r3, r3, r1
    b238:	607b      	str	r3, [r7, #4]
    b23a:	0049      	lsls	r1, r1, #1
    b23c:	4299      	cmp	r1, r3
    b23e:	f63f aec0 	bhi.w	afc2 <_malloc_r+0x1c6>
    b242:	b919      	cbnz	r1, b24c <_malloc_r+0x450>
    b244:	e6bd      	b.n	afc2 <_malloc_r+0x1c6>
    b246:	0049      	lsls	r1, r1, #1
    b248:	f10e 0e04 	add.w	lr, lr, #4
    b24c:	4219      	tst	r1, r3
    b24e:	d0fa      	beq.n	b246 <_malloc_r+0x44a>
    b250:	4670      	mov	r0, lr
    b252:	e667      	b.n	af24 <_malloc_r+0x128>
    b254:	f103 0810 	add.w	r8, r3, #16
    b258:	e6d0      	b.n	affc <_malloc_r+0x200>
    b25a:	109a      	asrs	r2, r3, #2
    b25c:	f04f 0801 	mov.w	r8, #1
    b260:	687b      	ldr	r3, [r7, #4]
    b262:	fa08 f202 	lsl.w	r2, r8, r2
    b266:	431a      	orrs	r2, r3
    b268:	607a      	str	r2, [r7, #4]
    b26a:	e770      	b.n	b14e <_malloc_r+0x352>
    b26c:	eb02 0108 	add.w	r1, r2, r8
    b270:	4249      	negs	r1, r1
    b272:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b276:	4651      	mov	r1, sl
    b278:	4620      	mov	r0, r4
    b27a:	9200      	str	r2, [sp, #0]
    b27c:	f000 ff34 	bl	c0e8 <_sbrk_r>
    b280:	1c43      	adds	r3, r0, #1
    b282:	e9dd 2300 	ldrd	r2, r3, [sp]
    b286:	f47f aeef 	bne.w	b068 <_malloc_r+0x26c>
    b28a:	46da      	mov	sl, fp
    b28c:	e6ef      	b.n	b06e <_malloc_r+0x272>
    b28e:	2b54      	cmp	r3, #84	; 0x54
    b290:	d825      	bhi.n	b2de <_malloc_r+0x4e2>
    b292:	0b13      	lsrs	r3, r2, #12
    b294:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    b298:	00c9      	lsls	r1, r1, #3
    b29a:	336e      	adds	r3, #110	; 0x6e
    b29c:	e744      	b.n	b128 <_malloc_r+0x32c>
    b29e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b2a2:	d825      	bhi.n	b2f0 <_malloc_r+0x4f4>
    b2a4:	0bf3      	lsrs	r3, r6, #15
    b2a6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    b2aa:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    b2ae:	00c3      	lsls	r3, r0, #3
    b2b0:	e5ea      	b.n	ae88 <_malloc_r+0x8c>
    b2b2:	4b29      	ldr	r3, [pc, #164]	; (b358 <_malloc_r+0x55c>)
    b2b4:	6818      	ldr	r0, [r3, #0]
    b2b6:	4440      	add	r0, r8
    b2b8:	6018      	str	r0, [r3, #0]
    b2ba:	e6b1      	b.n	b020 <_malloc_r+0x224>
    b2bc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    b2c0:	f1bc 0f00 	cmp.w	ip, #0
    b2c4:	f47f aeac 	bne.w	b020 <_malloc_r+0x224>
    b2c8:	68bd      	ldr	r5, [r7, #8]
    b2ca:	44c8      	add	r8, r9
    b2cc:	f048 0001 	orr.w	r0, r8, #1
    b2d0:	6068      	str	r0, [r5, #4]
    b2d2:	e6f0      	b.n	b0b6 <_malloc_r+0x2ba>
    b2d4:	4615      	mov	r5, r2
    b2d6:	e6ee      	b.n	b0b6 <_malloc_r+0x2ba>
    b2d8:	2301      	movs	r3, #1
    b2da:	6053      	str	r3, [r2, #4]
    b2dc:	e794      	b.n	b208 <_malloc_r+0x40c>
    b2de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b2e2:	d823      	bhi.n	b32c <_malloc_r+0x530>
    b2e4:	0bd3      	lsrs	r3, r2, #15
    b2e6:	f103 0178 	add.w	r1, r3, #120	; 0x78
    b2ea:	00c9      	lsls	r1, r1, #3
    b2ec:	3377      	adds	r3, #119	; 0x77
    b2ee:	e71b      	b.n	b128 <_malloc_r+0x32c>
    b2f0:	f240 5254 	movw	r2, #1364	; 0x554
    b2f4:	4293      	cmp	r3, r2
    b2f6:	d823      	bhi.n	b340 <_malloc_r+0x544>
    b2f8:	0cb3      	lsrs	r3, r6, #18
    b2fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    b2fe:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    b302:	00c3      	lsls	r3, r0, #3
    b304:	e5c0      	b.n	ae88 <_malloc_r+0x8c>
    b306:	f1ab 0b08 	sub.w	fp, fp, #8
    b30a:	44d8      	add	r8, fp
    b30c:	eba8 0802 	sub.w	r8, r8, r2
    b310:	f04f 0a00 	mov.w	sl, #0
    b314:	e6ab      	b.n	b06e <_malloc_r+0x272>
    b316:	f105 0108 	add.w	r1, r5, #8
    b31a:	4620      	mov	r0, r4
    b31c:	9300      	str	r3, [sp, #0]
    b31e:	f001 fa11 	bl	c744 <_free_r>
    b322:	68bd      	ldr	r5, [r7, #8]
    b324:	9b00      	ldr	r3, [sp, #0]
    b326:	6868      	ldr	r0, [r5, #4]
    b328:	6819      	ldr	r1, [r3, #0]
    b32a:	e6c4      	b.n	b0b6 <_malloc_r+0x2ba>
    b32c:	f240 5154 	movw	r1, #1364	; 0x554
    b330:	428b      	cmp	r3, r1
    b332:	d80b      	bhi.n	b34c <_malloc_r+0x550>
    b334:	0c93      	lsrs	r3, r2, #18
    b336:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    b33a:	00c9      	lsls	r1, r1, #3
    b33c:	337c      	adds	r3, #124	; 0x7c
    b33e:	e6f3      	b.n	b128 <_malloc_r+0x32c>
    b340:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    b344:	207f      	movs	r0, #127	; 0x7f
    b346:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    b34a:	e59d      	b.n	ae88 <_malloc_r+0x8c>
    b34c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b350:	237e      	movs	r3, #126	; 0x7e
    b352:	e6e9      	b.n	b128 <_malloc_r+0x32c>
    b354:	687b      	ldr	r3, [r7, #4]
    b356:	e770      	b.n	b23a <_malloc_r+0x43e>
    b358:	20005258 	.word	0x20005258

0000b35c <__malloc_lock>:
    b35c:	4801      	ldr	r0, [pc, #4]	; (b364 <__malloc_lock+0x8>)
    b35e:	f000 bf19 	b.w	c194 <__retarget_lock_acquire_recursive>
    b362:	bf00      	nop
    b364:	20005250 	.word	0x20005250

0000b368 <__malloc_unlock>:
    b368:	4801      	ldr	r0, [pc, #4]	; (b370 <__malloc_unlock+0x8>)
    b36a:	f000 bf15 	b.w	c198 <__retarget_lock_release_recursive>
    b36e:	bf00      	nop
    b370:	20005250 	.word	0x20005250

0000b374 <realloc>:
    b374:	b410      	push	{r4}
    b376:	4c04      	ldr	r4, [pc, #16]	; (b388 <realloc+0x14>)
    b378:	4603      	mov	r3, r0
    b37a:	460a      	mov	r2, r1
    b37c:	6820      	ldr	r0, [r4, #0]
    b37e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b382:	4619      	mov	r1, r3
    b384:	f000 b802 	b.w	b38c <_realloc_r>
    b388:	2000499c 	.word	0x2000499c

0000b38c <_realloc_r>:
    b38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b390:	4617      	mov	r7, r2
    b392:	2900      	cmp	r1, #0
    b394:	f000 8098 	beq.w	b4c8 <_realloc_r+0x13c>
    b398:	460c      	mov	r4, r1
    b39a:	f107 050b 	add.w	r5, r7, #11
    b39e:	4680      	mov	r8, r0
    b3a0:	f7ff ffdc 	bl	b35c <__malloc_lock>
    b3a4:	2d16      	cmp	r5, #22
    b3a6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    b3aa:	d85b      	bhi.n	b464 <_realloc_r+0xd8>
    b3ac:	2510      	movs	r5, #16
    b3ae:	462a      	mov	r2, r5
    b3b0:	42af      	cmp	r7, r5
    b3b2:	d85c      	bhi.n	b46e <_realloc_r+0xe2>
    b3b4:	f021 0603 	bic.w	r6, r1, #3
    b3b8:	4296      	cmp	r6, r2
    b3ba:	f1a4 0908 	sub.w	r9, r4, #8
    b3be:	da62      	bge.n	b486 <_realloc_r+0xfa>
    b3c0:	4bbc      	ldr	r3, [pc, #752]	; (b6b4 <_realloc_r+0x328>)
    b3c2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    b3c6:	eb09 0006 	add.w	r0, r9, r6
    b3ca:	4584      	cmp	ip, r0
    b3cc:	f000 8097 	beq.w	b4fe <_realloc_r+0x172>
    b3d0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b3d4:	f02c 0301 	bic.w	r3, ip, #1
    b3d8:	4403      	add	r3, r0
    b3da:	685b      	ldr	r3, [r3, #4]
    b3dc:	07db      	lsls	r3, r3, #31
    b3de:	d468      	bmi.n	b4b2 <_realloc_r+0x126>
    b3e0:	f02c 0c03 	bic.w	ip, ip, #3
    b3e4:	eb06 030c 	add.w	r3, r6, ip
    b3e8:	4293      	cmp	r3, r2
    b3ea:	da47      	bge.n	b47c <_realloc_r+0xf0>
    b3ec:	07cb      	lsls	r3, r1, #31
    b3ee:	d410      	bmi.n	b412 <_realloc_r+0x86>
    b3f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b3f4:	eba9 0a03 	sub.w	sl, r9, r3
    b3f8:	f8da 3004 	ldr.w	r3, [sl, #4]
    b3fc:	f023 0103 	bic.w	r1, r3, #3
    b400:	448c      	add	ip, r1
    b402:	44b4      	add	ip, r6
    b404:	4594      	cmp	ip, r2
    b406:	f280 8111 	bge.w	b62c <_realloc_r+0x2a0>
    b40a:	1873      	adds	r3, r6, r1
    b40c:	4293      	cmp	r3, r2
    b40e:	f280 80e8 	bge.w	b5e2 <_realloc_r+0x256>
    b412:	4639      	mov	r1, r7
    b414:	4640      	mov	r0, r8
    b416:	f7ff fcf1 	bl	adfc <_malloc_r>
    b41a:	4607      	mov	r7, r0
    b41c:	b1e0      	cbz	r0, b458 <_realloc_r+0xcc>
    b41e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b422:	f023 0301 	bic.w	r3, r3, #1
    b426:	444b      	add	r3, r9
    b428:	f1a0 0208 	sub.w	r2, r0, #8
    b42c:	4293      	cmp	r3, r2
    b42e:	f000 80d2 	beq.w	b5d6 <_realloc_r+0x24a>
    b432:	1f32      	subs	r2, r6, #4
    b434:	2a24      	cmp	r2, #36	; 0x24
    b436:	f200 80f5 	bhi.w	b624 <_realloc_r+0x298>
    b43a:	2a13      	cmp	r2, #19
    b43c:	f200 80ac 	bhi.w	b598 <_realloc_r+0x20c>
    b440:	4603      	mov	r3, r0
    b442:	4622      	mov	r2, r4
    b444:	6811      	ldr	r1, [r2, #0]
    b446:	6019      	str	r1, [r3, #0]
    b448:	6851      	ldr	r1, [r2, #4]
    b44a:	6059      	str	r1, [r3, #4]
    b44c:	6892      	ldr	r2, [r2, #8]
    b44e:	609a      	str	r2, [r3, #8]
    b450:	4621      	mov	r1, r4
    b452:	4640      	mov	r0, r8
    b454:	f001 f976 	bl	c744 <_free_r>
    b458:	4640      	mov	r0, r8
    b45a:	f7ff ff85 	bl	b368 <__malloc_unlock>
    b45e:	4638      	mov	r0, r7
    b460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b464:	f025 0507 	bic.w	r5, r5, #7
    b468:	2d00      	cmp	r5, #0
    b46a:	462a      	mov	r2, r5
    b46c:	daa0      	bge.n	b3b0 <_realloc_r+0x24>
    b46e:	230c      	movs	r3, #12
    b470:	f8c8 3000 	str.w	r3, [r8]
    b474:	2700      	movs	r7, #0
    b476:	4638      	mov	r0, r7
    b478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b47c:	461e      	mov	r6, r3
    b47e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b482:	60d3      	str	r3, [r2, #12]
    b484:	609a      	str	r2, [r3, #8]
    b486:	1b73      	subs	r3, r6, r5
    b488:	2b0f      	cmp	r3, #15
    b48a:	d822      	bhi.n	b4d2 <_realloc_r+0x146>
    b48c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b490:	f003 0301 	and.w	r3, r3, #1
    b494:	4333      	orrs	r3, r6
    b496:	444e      	add	r6, r9
    b498:	f8c9 3004 	str.w	r3, [r9, #4]
    b49c:	6873      	ldr	r3, [r6, #4]
    b49e:	f043 0301 	orr.w	r3, r3, #1
    b4a2:	6073      	str	r3, [r6, #4]
    b4a4:	4640      	mov	r0, r8
    b4a6:	4627      	mov	r7, r4
    b4a8:	f7ff ff5e 	bl	b368 <__malloc_unlock>
    b4ac:	4638      	mov	r0, r7
    b4ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4b2:	07c9      	lsls	r1, r1, #31
    b4b4:	d4ad      	bmi.n	b412 <_realloc_r+0x86>
    b4b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b4ba:	eba9 0a03 	sub.w	sl, r9, r3
    b4be:	f8da 1004 	ldr.w	r1, [sl, #4]
    b4c2:	f021 0103 	bic.w	r1, r1, #3
    b4c6:	e7a0      	b.n	b40a <_realloc_r+0x7e>
    b4c8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4cc:	4611      	mov	r1, r2
    b4ce:	f7ff bc95 	b.w	adfc <_malloc_r>
    b4d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b4d6:	eb09 0105 	add.w	r1, r9, r5
    b4da:	f002 0201 	and.w	r2, r2, #1
    b4de:	444e      	add	r6, r9
    b4e0:	f043 0301 	orr.w	r3, r3, #1
    b4e4:	432a      	orrs	r2, r5
    b4e6:	f8c9 2004 	str.w	r2, [r9, #4]
    b4ea:	604b      	str	r3, [r1, #4]
    b4ec:	6873      	ldr	r3, [r6, #4]
    b4ee:	f043 0301 	orr.w	r3, r3, #1
    b4f2:	3108      	adds	r1, #8
    b4f4:	6073      	str	r3, [r6, #4]
    b4f6:	4640      	mov	r0, r8
    b4f8:	f001 f924 	bl	c744 <_free_r>
    b4fc:	e7d2      	b.n	b4a4 <_realloc_r+0x118>
    b4fe:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b502:	f020 0b03 	bic.w	fp, r0, #3
    b506:	eb06 0c0b 	add.w	ip, r6, fp
    b50a:	f105 0010 	add.w	r0, r5, #16
    b50e:	4584      	cmp	ip, r0
    b510:	da4d      	bge.n	b5ae <_realloc_r+0x222>
    b512:	07c9      	lsls	r1, r1, #31
    b514:	f53f af7d 	bmi.w	b412 <_realloc_r+0x86>
    b518:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b51c:	eba9 0a01 	sub.w	sl, r9, r1
    b520:	f8da 1004 	ldr.w	r1, [sl, #4]
    b524:	f021 0103 	bic.w	r1, r1, #3
    b528:	448b      	add	fp, r1
    b52a:	44b3      	add	fp, r6
    b52c:	4558      	cmp	r0, fp
    b52e:	f73f af6c 	bgt.w	b40a <_realloc_r+0x7e>
    b532:	4657      	mov	r7, sl
    b534:	f8da 100c 	ldr.w	r1, [sl, #12]
    b538:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b53c:	1f32      	subs	r2, r6, #4
    b53e:	2a24      	cmp	r2, #36	; 0x24
    b540:	60c1      	str	r1, [r0, #12]
    b542:	6088      	str	r0, [r1, #8]
    b544:	f200 80db 	bhi.w	b6fe <_realloc_r+0x372>
    b548:	2a13      	cmp	r2, #19
    b54a:	f240 80d6 	bls.w	b6fa <_realloc_r+0x36e>
    b54e:	6821      	ldr	r1, [r4, #0]
    b550:	f8ca 1008 	str.w	r1, [sl, #8]
    b554:	6861      	ldr	r1, [r4, #4]
    b556:	f8ca 100c 	str.w	r1, [sl, #12]
    b55a:	2a1b      	cmp	r2, #27
    b55c:	f200 80df 	bhi.w	b71e <_realloc_r+0x392>
    b560:	3408      	adds	r4, #8
    b562:	f10a 0210 	add.w	r2, sl, #16
    b566:	6821      	ldr	r1, [r4, #0]
    b568:	6011      	str	r1, [r2, #0]
    b56a:	6861      	ldr	r1, [r4, #4]
    b56c:	6051      	str	r1, [r2, #4]
    b56e:	68a1      	ldr	r1, [r4, #8]
    b570:	6091      	str	r1, [r2, #8]
    b572:	eb0a 0105 	add.w	r1, sl, r5
    b576:	ebab 0205 	sub.w	r2, fp, r5
    b57a:	f042 0201 	orr.w	r2, r2, #1
    b57e:	6099      	str	r1, [r3, #8]
    b580:	604a      	str	r2, [r1, #4]
    b582:	f8da 3004 	ldr.w	r3, [sl, #4]
    b586:	f003 0301 	and.w	r3, r3, #1
    b58a:	432b      	orrs	r3, r5
    b58c:	4640      	mov	r0, r8
    b58e:	f8ca 3004 	str.w	r3, [sl, #4]
    b592:	f7ff fee9 	bl	b368 <__malloc_unlock>
    b596:	e76e      	b.n	b476 <_realloc_r+0xea>
    b598:	6823      	ldr	r3, [r4, #0]
    b59a:	6003      	str	r3, [r0, #0]
    b59c:	6863      	ldr	r3, [r4, #4]
    b59e:	6043      	str	r3, [r0, #4]
    b5a0:	2a1b      	cmp	r2, #27
    b5a2:	d868      	bhi.n	b676 <_realloc_r+0x2ea>
    b5a4:	f104 0208 	add.w	r2, r4, #8
    b5a8:	f100 0308 	add.w	r3, r0, #8
    b5ac:	e74a      	b.n	b444 <_realloc_r+0xb8>
    b5ae:	eb09 0205 	add.w	r2, r9, r5
    b5b2:	609a      	str	r2, [r3, #8]
    b5b4:	ebac 0305 	sub.w	r3, ip, r5
    b5b8:	f043 0301 	orr.w	r3, r3, #1
    b5bc:	6053      	str	r3, [r2, #4]
    b5be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b5c2:	f003 0301 	and.w	r3, r3, #1
    b5c6:	432b      	orrs	r3, r5
    b5c8:	4640      	mov	r0, r8
    b5ca:	f844 3c04 	str.w	r3, [r4, #-4]
    b5ce:	f7ff fecb 	bl	b368 <__malloc_unlock>
    b5d2:	4627      	mov	r7, r4
    b5d4:	e74f      	b.n	b476 <_realloc_r+0xea>
    b5d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b5da:	f023 0303 	bic.w	r3, r3, #3
    b5de:	441e      	add	r6, r3
    b5e0:	e751      	b.n	b486 <_realloc_r+0xfa>
    b5e2:	4657      	mov	r7, sl
    b5e4:	f8da 100c 	ldr.w	r1, [sl, #12]
    b5e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b5ec:	1f32      	subs	r2, r6, #4
    b5ee:	2a24      	cmp	r2, #36	; 0x24
    b5f0:	60c1      	str	r1, [r0, #12]
    b5f2:	6088      	str	r0, [r1, #8]
    b5f4:	d84c      	bhi.n	b690 <_realloc_r+0x304>
    b5f6:	2a13      	cmp	r2, #19
    b5f8:	d948      	bls.n	b68c <_realloc_r+0x300>
    b5fa:	6821      	ldr	r1, [r4, #0]
    b5fc:	f8ca 1008 	str.w	r1, [sl, #8]
    b600:	6861      	ldr	r1, [r4, #4]
    b602:	f8ca 100c 	str.w	r1, [sl, #12]
    b606:	2a1b      	cmp	r2, #27
    b608:	d856      	bhi.n	b6b8 <_realloc_r+0x32c>
    b60a:	3408      	adds	r4, #8
    b60c:	f10a 0210 	add.w	r2, sl, #16
    b610:	461e      	mov	r6, r3
    b612:	6823      	ldr	r3, [r4, #0]
    b614:	6013      	str	r3, [r2, #0]
    b616:	6863      	ldr	r3, [r4, #4]
    b618:	6053      	str	r3, [r2, #4]
    b61a:	68a3      	ldr	r3, [r4, #8]
    b61c:	6093      	str	r3, [r2, #8]
    b61e:	46d1      	mov	r9, sl
    b620:	463c      	mov	r4, r7
    b622:	e730      	b.n	b486 <_realloc_r+0xfa>
    b624:	4621      	mov	r1, r4
    b626:	f000 fbb5 	bl	bd94 <memmove>
    b62a:	e711      	b.n	b450 <_realloc_r+0xc4>
    b62c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b630:	4657      	mov	r7, sl
    b632:	60cb      	str	r3, [r1, #12]
    b634:	6099      	str	r1, [r3, #8]
    b636:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b63a:	f8da 300c 	ldr.w	r3, [sl, #12]
    b63e:	60cb      	str	r3, [r1, #12]
    b640:	1f32      	subs	r2, r6, #4
    b642:	2a24      	cmp	r2, #36	; 0x24
    b644:	6099      	str	r1, [r3, #8]
    b646:	d82d      	bhi.n	b6a4 <_realloc_r+0x318>
    b648:	2a13      	cmp	r2, #19
    b64a:	d929      	bls.n	b6a0 <_realloc_r+0x314>
    b64c:	6823      	ldr	r3, [r4, #0]
    b64e:	f8ca 3008 	str.w	r3, [sl, #8]
    b652:	6863      	ldr	r3, [r4, #4]
    b654:	f8ca 300c 	str.w	r3, [sl, #12]
    b658:	2a1b      	cmp	r2, #27
    b65a:	d842      	bhi.n	b6e2 <_realloc_r+0x356>
    b65c:	3408      	adds	r4, #8
    b65e:	f10a 0310 	add.w	r3, sl, #16
    b662:	6822      	ldr	r2, [r4, #0]
    b664:	601a      	str	r2, [r3, #0]
    b666:	6862      	ldr	r2, [r4, #4]
    b668:	605a      	str	r2, [r3, #4]
    b66a:	68a2      	ldr	r2, [r4, #8]
    b66c:	609a      	str	r2, [r3, #8]
    b66e:	4666      	mov	r6, ip
    b670:	46d1      	mov	r9, sl
    b672:	463c      	mov	r4, r7
    b674:	e707      	b.n	b486 <_realloc_r+0xfa>
    b676:	68a3      	ldr	r3, [r4, #8]
    b678:	6083      	str	r3, [r0, #8]
    b67a:	68e3      	ldr	r3, [r4, #12]
    b67c:	60c3      	str	r3, [r0, #12]
    b67e:	2a24      	cmp	r2, #36	; 0x24
    b680:	d026      	beq.n	b6d0 <_realloc_r+0x344>
    b682:	f104 0210 	add.w	r2, r4, #16
    b686:	f100 0310 	add.w	r3, r0, #16
    b68a:	e6db      	b.n	b444 <_realloc_r+0xb8>
    b68c:	463a      	mov	r2, r7
    b68e:	e7bf      	b.n	b610 <_realloc_r+0x284>
    b690:	4621      	mov	r1, r4
    b692:	4638      	mov	r0, r7
    b694:	461e      	mov	r6, r3
    b696:	46d1      	mov	r9, sl
    b698:	f000 fb7c 	bl	bd94 <memmove>
    b69c:	463c      	mov	r4, r7
    b69e:	e6f2      	b.n	b486 <_realloc_r+0xfa>
    b6a0:	463b      	mov	r3, r7
    b6a2:	e7de      	b.n	b662 <_realloc_r+0x2d6>
    b6a4:	4621      	mov	r1, r4
    b6a6:	4638      	mov	r0, r7
    b6a8:	4666      	mov	r6, ip
    b6aa:	46d1      	mov	r9, sl
    b6ac:	f000 fb72 	bl	bd94 <memmove>
    b6b0:	463c      	mov	r4, r7
    b6b2:	e6e8      	b.n	b486 <_realloc_r+0xfa>
    b6b4:	20004580 	.word	0x20004580
    b6b8:	68a1      	ldr	r1, [r4, #8]
    b6ba:	f8ca 1010 	str.w	r1, [sl, #16]
    b6be:	68e1      	ldr	r1, [r4, #12]
    b6c0:	f8ca 1014 	str.w	r1, [sl, #20]
    b6c4:	2a24      	cmp	r2, #36	; 0x24
    b6c6:	d020      	beq.n	b70a <_realloc_r+0x37e>
    b6c8:	3410      	adds	r4, #16
    b6ca:	f10a 0218 	add.w	r2, sl, #24
    b6ce:	e79f      	b.n	b610 <_realloc_r+0x284>
    b6d0:	6923      	ldr	r3, [r4, #16]
    b6d2:	6103      	str	r3, [r0, #16]
    b6d4:	6961      	ldr	r1, [r4, #20]
    b6d6:	6141      	str	r1, [r0, #20]
    b6d8:	f104 0218 	add.w	r2, r4, #24
    b6dc:	f100 0318 	add.w	r3, r0, #24
    b6e0:	e6b0      	b.n	b444 <_realloc_r+0xb8>
    b6e2:	68a3      	ldr	r3, [r4, #8]
    b6e4:	f8ca 3010 	str.w	r3, [sl, #16]
    b6e8:	68e3      	ldr	r3, [r4, #12]
    b6ea:	f8ca 3014 	str.w	r3, [sl, #20]
    b6ee:	2a24      	cmp	r2, #36	; 0x24
    b6f0:	d021      	beq.n	b736 <_realloc_r+0x3aa>
    b6f2:	3410      	adds	r4, #16
    b6f4:	f10a 0318 	add.w	r3, sl, #24
    b6f8:	e7b3      	b.n	b662 <_realloc_r+0x2d6>
    b6fa:	463a      	mov	r2, r7
    b6fc:	e733      	b.n	b566 <_realloc_r+0x1da>
    b6fe:	4621      	mov	r1, r4
    b700:	4638      	mov	r0, r7
    b702:	f000 fb47 	bl	bd94 <memmove>
    b706:	4b16      	ldr	r3, [pc, #88]	; (b760 <_realloc_r+0x3d4>)
    b708:	e733      	b.n	b572 <_realloc_r+0x1e6>
    b70a:	6922      	ldr	r2, [r4, #16]
    b70c:	f8ca 2018 	str.w	r2, [sl, #24]
    b710:	6962      	ldr	r2, [r4, #20]
    b712:	f8ca 201c 	str.w	r2, [sl, #28]
    b716:	3418      	adds	r4, #24
    b718:	f10a 0220 	add.w	r2, sl, #32
    b71c:	e778      	b.n	b610 <_realloc_r+0x284>
    b71e:	68a1      	ldr	r1, [r4, #8]
    b720:	f8ca 1010 	str.w	r1, [sl, #16]
    b724:	68e1      	ldr	r1, [r4, #12]
    b726:	f8ca 1014 	str.w	r1, [sl, #20]
    b72a:	2a24      	cmp	r2, #36	; 0x24
    b72c:	d00d      	beq.n	b74a <_realloc_r+0x3be>
    b72e:	3410      	adds	r4, #16
    b730:	f10a 0218 	add.w	r2, sl, #24
    b734:	e717      	b.n	b566 <_realloc_r+0x1da>
    b736:	6923      	ldr	r3, [r4, #16]
    b738:	f8ca 3018 	str.w	r3, [sl, #24]
    b73c:	6963      	ldr	r3, [r4, #20]
    b73e:	f8ca 301c 	str.w	r3, [sl, #28]
    b742:	3418      	adds	r4, #24
    b744:	f10a 0320 	add.w	r3, sl, #32
    b748:	e78b      	b.n	b662 <_realloc_r+0x2d6>
    b74a:	6922      	ldr	r2, [r4, #16]
    b74c:	f8ca 2018 	str.w	r2, [sl, #24]
    b750:	6962      	ldr	r2, [r4, #20]
    b752:	f8ca 201c 	str.w	r2, [sl, #28]
    b756:	3418      	adds	r4, #24
    b758:	f10a 0220 	add.w	r2, sl, #32
    b75c:	e703      	b.n	b566 <_realloc_r+0x1da>
    b75e:	bf00      	nop
    b760:	20004580 	.word	0x20004580

0000b764 <_strtol_l.constprop.0>:
    b764:	2b01      	cmp	r3, #1
    b766:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b76a:	d040      	beq.n	b7ee <_strtol_l.constprop.0+0x8a>
    b76c:	2b24      	cmp	r3, #36	; 0x24
    b76e:	4698      	mov	r8, r3
    b770:	d83d      	bhi.n	b7ee <_strtol_l.constprop.0+0x8a>
    b772:	4d4c      	ldr	r5, [pc, #304]	; (b8a4 <_strtol_l.constprop.0+0x140>)
    b774:	468e      	mov	lr, r1
    b776:	4676      	mov	r6, lr
    b778:	f81e bb01 	ldrb.w	fp, [lr], #1
    b77c:	f815 400b 	ldrb.w	r4, [r5, fp]
    b780:	f014 0408 	ands.w	r4, r4, #8
    b784:	d1f7      	bne.n	b776 <_strtol_l.constprop.0+0x12>
    b786:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    b78a:	d072      	beq.n	b872 <_strtol_l.constprop.0+0x10e>
    b78c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    b790:	bf08      	it	eq
    b792:	f89e b000 	ldrbeq.w	fp, [lr]
    b796:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    b79a:	bf08      	it	eq
    b79c:	f106 0e02 	addeq.w	lr, r6, #2
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d042      	beq.n	b82a <_strtol_l.constprop.0+0xc6>
    b7a4:	2b10      	cmp	r3, #16
    b7a6:	d057      	beq.n	b858 <_strtol_l.constprop.0+0xf4>
    b7a8:	fbb9 f7f8 	udiv	r7, r9, r8
    b7ac:	2500      	movs	r5, #0
    b7ae:	462e      	mov	r6, r5
    b7b0:	fb08 9a17 	mls	sl, r8, r7, r9
    b7b4:	e005      	b.n	b7c2 <_strtol_l.constprop.0+0x5e>
    b7b6:	d033      	beq.n	b820 <_strtol_l.constprop.0+0xbc>
    b7b8:	fb08 c606 	mla	r6, r8, r6, ip
    b7bc:	2501      	movs	r5, #1
    b7be:	f81e bb01 	ldrb.w	fp, [lr], #1
    b7c2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    b7c6:	f1bc 0f09 	cmp.w	ip, #9
    b7ca:	d906      	bls.n	b7da <_strtol_l.constprop.0+0x76>
    b7cc:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    b7d0:	f1bc 0f19 	cmp.w	ip, #25
    b7d4:	d812      	bhi.n	b7fc <_strtol_l.constprop.0+0x98>
    b7d6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    b7da:	4563      	cmp	r3, ip
    b7dc:	dd17      	ble.n	b80e <_strtol_l.constprop.0+0xaa>
    b7de:	f1b5 3fff 	cmp.w	r5, #4294967295
    b7e2:	d0ec      	beq.n	b7be <_strtol_l.constprop.0+0x5a>
    b7e4:	42b7      	cmp	r7, r6
    b7e6:	d2e6      	bcs.n	b7b6 <_strtol_l.constprop.0+0x52>
    b7e8:	f04f 35ff 	mov.w	r5, #4294967295
    b7ec:	e7e7      	b.n	b7be <_strtol_l.constprop.0+0x5a>
    b7ee:	f000 fca3 	bl	c138 <__errno>
    b7f2:	2316      	movs	r3, #22
    b7f4:	6003      	str	r3, [r0, #0]
    b7f6:	2000      	movs	r0, #0
    b7f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7fc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    b800:	f1bc 0f19 	cmp.w	ip, #25
    b804:	d803      	bhi.n	b80e <_strtol_l.constprop.0+0xaa>
    b806:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    b80a:	4563      	cmp	r3, ip
    b80c:	dce7      	bgt.n	b7de <_strtol_l.constprop.0+0x7a>
    b80e:	1c6b      	adds	r3, r5, #1
    b810:	d027      	beq.n	b862 <_strtol_l.constprop.0+0xfe>
    b812:	b98c      	cbnz	r4, b838 <_strtol_l.constprop.0+0xd4>
    b814:	b10a      	cbz	r2, b81a <_strtol_l.constprop.0+0xb6>
    b816:	bba5      	cbnz	r5, b882 <_strtol_l.constprop.0+0x11e>
    b818:	6011      	str	r1, [r2, #0]
    b81a:	4630      	mov	r0, r6
    b81c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b820:	45e2      	cmp	sl, ip
    b822:	dac9      	bge.n	b7b8 <_strtol_l.constprop.0+0x54>
    b824:	f04f 35ff 	mov.w	r5, #4294967295
    b828:	e7c9      	b.n	b7be <_strtol_l.constprop.0+0x5a>
    b82a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b82e:	d005      	beq.n	b83c <_strtol_l.constprop.0+0xd8>
    b830:	f04f 080a 	mov.w	r8, #10
    b834:	4643      	mov	r3, r8
    b836:	e7b7      	b.n	b7a8 <_strtol_l.constprop.0+0x44>
    b838:	4276      	negs	r6, r6
    b83a:	e7eb      	b.n	b814 <_strtol_l.constprop.0+0xb0>
    b83c:	f89e 3000 	ldrb.w	r3, [lr]
    b840:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b844:	2b58      	cmp	r3, #88	; 0x58
    b846:	d121      	bne.n	b88c <_strtol_l.constprop.0+0x128>
    b848:	f04f 0810 	mov.w	r8, #16
    b84c:	f89e b001 	ldrb.w	fp, [lr, #1]
    b850:	4643      	mov	r3, r8
    b852:	f10e 0e02 	add.w	lr, lr, #2
    b856:	e7a7      	b.n	b7a8 <_strtol_l.constprop.0+0x44>
    b858:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    b85c:	d01a      	beq.n	b894 <_strtol_l.constprop.0+0x130>
    b85e:	4698      	mov	r8, r3
    b860:	e7a2      	b.n	b7a8 <_strtol_l.constprop.0+0x44>
    b862:	2322      	movs	r3, #34	; 0x22
    b864:	6003      	str	r3, [r0, #0]
    b866:	b172      	cbz	r2, b886 <_strtol_l.constprop.0+0x122>
    b868:	f10e 31ff 	add.w	r1, lr, #4294967295
    b86c:	464e      	mov	r6, r9
    b86e:	6011      	str	r1, [r2, #0]
    b870:	e7d3      	b.n	b81a <_strtol_l.constprop.0+0xb6>
    b872:	f89e b000 	ldrb.w	fp, [lr]
    b876:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    b87a:	f106 0e02 	add.w	lr, r6, #2
    b87e:	2401      	movs	r4, #1
    b880:	e78e      	b.n	b7a0 <_strtol_l.constprop.0+0x3c>
    b882:	46b1      	mov	r9, r6
    b884:	e7f0      	b.n	b868 <_strtol_l.constprop.0+0x104>
    b886:	464e      	mov	r6, r9
    b888:	4630      	mov	r0, r6
    b88a:	e7c7      	b.n	b81c <_strtol_l.constprop.0+0xb8>
    b88c:	f04f 0808 	mov.w	r8, #8
    b890:	4643      	mov	r3, r8
    b892:	e789      	b.n	b7a8 <_strtol_l.constprop.0+0x44>
    b894:	f89e 5000 	ldrb.w	r5, [lr]
    b898:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    b89c:	2d58      	cmp	r5, #88	; 0x58
    b89e:	d0d3      	beq.n	b848 <_strtol_l.constprop.0+0xe4>
    b8a0:	4698      	mov	r8, r3
    b8a2:	e781      	b.n	b7a8 <_strtol_l.constprop.0+0x44>
    b8a4:	20000b75 	.word	0x20000b75

0000b8a8 <strtol>:
    b8a8:	b410      	push	{r4}
    b8aa:	4c05      	ldr	r4, [pc, #20]	; (b8c0 <strtol+0x18>)
    b8ac:	4684      	mov	ip, r0
    b8ae:	4613      	mov	r3, r2
    b8b0:	6820      	ldr	r0, [r4, #0]
    b8b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b8b6:	460a      	mov	r2, r1
    b8b8:	4661      	mov	r1, ip
    b8ba:	f7ff bf53 	b.w	b764 <_strtol_l.constprop.0>
    b8be:	bf00      	nop
    b8c0:	2000499c 	.word	0x2000499c

0000b8c4 <_strtoul_l.constprop.0>:
    b8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8c8:	4607      	mov	r7, r0
    b8ca:	484c      	ldr	r0, [pc, #304]	; (b9fc <_strtoul_l.constprop.0+0x138>)
    b8cc:	460e      	mov	r6, r1
    b8ce:	4635      	mov	r5, r6
    b8d0:	f816 eb01 	ldrb.w	lr, [r6], #1
    b8d4:	f810 c00e 	ldrb.w	ip, [r0, lr]
    b8d8:	f01c 0c08 	ands.w	ip, ip, #8
    b8dc:	d1f7      	bne.n	b8ce <_strtoul_l.constprop.0+0xa>
    b8de:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    b8e2:	d05a      	beq.n	b99a <_strtoul_l.constprop.0+0xd6>
    b8e4:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    b8e8:	bf03      	ittte	eq
    b8ea:	f896 e000 	ldrbeq.w	lr, [r6]
    b8ee:	4664      	moveq	r4, ip
    b8f0:	1cae      	addeq	r6, r5, #2
    b8f2:	4664      	movne	r4, ip
    b8f4:	b15b      	cbz	r3, b90e <_strtoul_l.constprop.0+0x4a>
    b8f6:	2b10      	cmp	r3, #16
    b8f8:	d054      	beq.n	b9a4 <_strtoul_l.constprop.0+0xe0>
    b8fa:	f04f 38ff 	mov.w	r8, #4294967295
    b8fe:	fbb8 f8f3 	udiv	r8, r8, r3
    b902:	fb03 fa08 	mul.w	sl, r3, r8
    b906:	ea6f 0a0a 	mvn.w	sl, sl
    b90a:	4699      	mov	r9, r3
    b90c:	e008      	b.n	b920 <_strtoul_l.constprop.0+0x5c>
    b90e:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b912:	d05a      	beq.n	b9ca <_strtoul_l.constprop.0+0x106>
    b914:	230a      	movs	r3, #10
    b916:	f8df 80e8 	ldr.w	r8, [pc, #232]	; ba00 <_strtoul_l.constprop.0+0x13c>
    b91a:	f04f 0a05 	mov.w	sl, #5
    b91e:	4699      	mov	r9, r3
    b920:	2500      	movs	r5, #0
    b922:	4628      	mov	r0, r5
    b924:	e005      	b.n	b932 <_strtoul_l.constprop.0+0x6e>
    b926:	d02c      	beq.n	b982 <_strtoul_l.constprop.0+0xbe>
    b928:	fb09 c000 	mla	r0, r9, r0, ip
    b92c:	2501      	movs	r5, #1
    b92e:	f816 eb01 	ldrb.w	lr, [r6], #1
    b932:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    b936:	f1bc 0f09 	cmp.w	ip, #9
    b93a:	d906      	bls.n	b94a <_strtoul_l.constprop.0+0x86>
    b93c:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    b940:	f1bc 0f19 	cmp.w	ip, #25
    b944:	d80b      	bhi.n	b95e <_strtoul_l.constprop.0+0x9a>
    b946:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    b94a:	4563      	cmp	r3, ip
    b94c:	dd10      	ble.n	b970 <_strtoul_l.constprop.0+0xac>
    b94e:	f1b5 3fff 	cmp.w	r5, #4294967295
    b952:	d0ec      	beq.n	b92e <_strtoul_l.constprop.0+0x6a>
    b954:	4540      	cmp	r0, r8
    b956:	d9e6      	bls.n	b926 <_strtoul_l.constprop.0+0x62>
    b958:	f04f 35ff 	mov.w	r5, #4294967295
    b95c:	e7e7      	b.n	b92e <_strtoul_l.constprop.0+0x6a>
    b95e:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    b962:	f1bc 0f19 	cmp.w	ip, #25
    b966:	d803      	bhi.n	b970 <_strtoul_l.constprop.0+0xac>
    b968:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    b96c:	4563      	cmp	r3, ip
    b96e:	dcee      	bgt.n	b94e <_strtoul_l.constprop.0+0x8a>
    b970:	1c6b      	adds	r3, r5, #1
    b972:	d00b      	beq.n	b98c <_strtoul_l.constprop.0+0xc8>
    b974:	b104      	cbz	r4, b978 <_strtoul_l.constprop.0+0xb4>
    b976:	4240      	negs	r0, r0
    b978:	b10a      	cbz	r2, b97e <_strtoul_l.constprop.0+0xba>
    b97a:	b965      	cbnz	r5, b996 <_strtoul_l.constprop.0+0xd2>
    b97c:	6011      	str	r1, [r2, #0]
    b97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b982:	45d4      	cmp	ip, sl
    b984:	ddd0      	ble.n	b928 <_strtoul_l.constprop.0+0x64>
    b986:	f04f 35ff 	mov.w	r5, #4294967295
    b98a:	e7d0      	b.n	b92e <_strtoul_l.constprop.0+0x6a>
    b98c:	2322      	movs	r3, #34	; 0x22
    b98e:	603b      	str	r3, [r7, #0]
    b990:	4628      	mov	r0, r5
    b992:	2a00      	cmp	r2, #0
    b994:	d0f3      	beq.n	b97e <_strtoul_l.constprop.0+0xba>
    b996:	1e71      	subs	r1, r6, #1
    b998:	e7f0      	b.n	b97c <_strtoul_l.constprop.0+0xb8>
    b99a:	f896 e000 	ldrb.w	lr, [r6]
    b99e:	2401      	movs	r4, #1
    b9a0:	1cae      	adds	r6, r5, #2
    b9a2:	e7a7      	b.n	b8f4 <_strtoul_l.constprop.0+0x30>
    b9a4:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    b9a8:	d121      	bne.n	b9ee <_strtoul_l.constprop.0+0x12a>
    b9aa:	7830      	ldrb	r0, [r6, #0]
    b9ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    b9b0:	2858      	cmp	r0, #88	; 0x58
    b9b2:	d116      	bne.n	b9e2 <_strtoul_l.constprop.0+0x11e>
    b9b4:	f04f 0910 	mov.w	r9, #16
    b9b8:	f896 e001 	ldrb.w	lr, [r6, #1]
    b9bc:	f04f 0a0f 	mov.w	sl, #15
    b9c0:	3602      	adds	r6, #2
    b9c2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b9c6:	464b      	mov	r3, r9
    b9c8:	e7aa      	b.n	b920 <_strtoul_l.constprop.0+0x5c>
    b9ca:	7833      	ldrb	r3, [r6, #0]
    b9cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b9d0:	2b58      	cmp	r3, #88	; 0x58
    b9d2:	d0ef      	beq.n	b9b4 <_strtoul_l.constprop.0+0xf0>
    b9d4:	2308      	movs	r3, #8
    b9d6:	f04f 0a07 	mov.w	sl, #7
    b9da:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    b9de:	4699      	mov	r9, r3
    b9e0:	e79e      	b.n	b920 <_strtoul_l.constprop.0+0x5c>
    b9e2:	4699      	mov	r9, r3
    b9e4:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b9e8:	f04f 0a0f 	mov.w	sl, #15
    b9ec:	e798      	b.n	b920 <_strtoul_l.constprop.0+0x5c>
    b9ee:	f04f 0a0f 	mov.w	sl, #15
    b9f2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    b9f6:	4699      	mov	r9, r3
    b9f8:	e792      	b.n	b920 <_strtoul_l.constprop.0+0x5c>
    b9fa:	bf00      	nop
    b9fc:	20000b75 	.word	0x20000b75
    ba00:	19999999 	.word	0x19999999

0000ba04 <strtoul>:
    ba04:	b410      	push	{r4}
    ba06:	4c05      	ldr	r4, [pc, #20]	; (ba1c <strtoul+0x18>)
    ba08:	4684      	mov	ip, r0
    ba0a:	4613      	mov	r3, r2
    ba0c:	6820      	ldr	r0, [r4, #0]
    ba0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba12:	460a      	mov	r2, r1
    ba14:	4661      	mov	r1, ip
    ba16:	f7ff bf55 	b.w	b8c4 <_strtoul_l.constprop.0>
    ba1a:	bf00      	nop
    ba1c:	2000499c 	.word	0x2000499c

0000ba20 <__utoa>:
    ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba22:	4f25      	ldr	r7, [pc, #148]	; (bab8 <__utoa+0x98>)
    ba24:	f1a2 0e02 	sub.w	lr, r2, #2
    ba28:	4616      	mov	r6, r2
    ba2a:	4605      	mov	r5, r0
    ba2c:	460c      	mov	r4, r1
    ba2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    ba30:	b08b      	sub	sp, #44	; 0x2c
    ba32:	46ec      	mov	ip, sp
    ba34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ba38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    ba3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    ba3e:	e897 0003 	ldmia.w	r7, {r0, r1}
    ba42:	f84c 0b04 	str.w	r0, [ip], #4
    ba46:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    ba4a:	f88c 1000 	strb.w	r1, [ip]
    ba4e:	d82e      	bhi.n	baae <__utoa+0x8e>
    ba50:	f104 3eff 	add.w	lr, r4, #4294967295
    ba54:	4670      	mov	r0, lr
    ba56:	f04f 0c00 	mov.w	ip, #0
    ba5a:	fbb5 f2f6 	udiv	r2, r5, r6
    ba5e:	fb06 5312 	mls	r3, r6, r2, r5
    ba62:	3328      	adds	r3, #40	; 0x28
    ba64:	446b      	add	r3, sp
    ba66:	4661      	mov	r1, ip
    ba68:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    ba6c:	f800 cf01 	strb.w	ip, [r0, #1]!
    ba70:	462b      	mov	r3, r5
    ba72:	429e      	cmp	r6, r3
    ba74:	f101 0c01 	add.w	ip, r1, #1
    ba78:	4615      	mov	r5, r2
    ba7a:	d9ee      	bls.n	ba5a <__utoa+0x3a>
    ba7c:	2300      	movs	r3, #0
    ba7e:	f804 300c 	strb.w	r3, [r4, ip]
    ba82:	b189      	cbz	r1, baa8 <__utoa+0x88>
    ba84:	44a4      	add	ip, r4
    ba86:	4672      	mov	r2, lr
    ba88:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    ba8c:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    ba90:	f88e 5000 	strb.w	r5, [lr]
    ba94:	eba4 030e 	sub.w	r3, r4, lr
    ba98:	3202      	adds	r2, #2
    ba9a:	3b01      	subs	r3, #1
    ba9c:	1b12      	subs	r2, r2, r4
    ba9e:	440b      	add	r3, r1
    baa0:	429a      	cmp	r2, r3
    baa2:	f88c 0000 	strb.w	r0, [ip]
    baa6:	dbee      	blt.n	ba86 <__utoa+0x66>
    baa8:	4620      	mov	r0, r4
    baaa:	b00b      	add	sp, #44	; 0x2c
    baac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baae:	2300      	movs	r3, #0
    bab0:	4618      	mov	r0, r3
    bab2:	7023      	strb	r3, [r4, #0]
    bab4:	b00b      	add	sp, #44	; 0x2c
    bab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bab8:	20000b4c 	.word	0x20000b4c

0000babc <utoa>:
    babc:	f7ff bfb0 	b.w	ba20 <__utoa>

0000bac0 <__cxa_atexit>:
    bac0:	4613      	mov	r3, r2
    bac2:	460a      	mov	r2, r1
    bac4:	4601      	mov	r1, r0
    bac6:	2002      	movs	r0, #2
    bac8:	f000 bda8 	b.w	c61c <__register_exitproc>

0000bacc <isprint>:
    bacc:	4b02      	ldr	r3, [pc, #8]	; (bad8 <isprint+0xc>)
    bace:	4418      	add	r0, r3
    bad0:	7840      	ldrb	r0, [r0, #1]
    bad2:	f000 0097 	and.w	r0, r0, #151	; 0x97
    bad6:	4770      	bx	lr
    bad8:	20000b74 	.word	0x20000b74

0000badc <isspace>:
    badc:	4b02      	ldr	r3, [pc, #8]	; (bae8 <isspace+0xc>)
    bade:	4418      	add	r0, r3
    bae0:	7840      	ldrb	r0, [r0, #1]
    bae2:	f000 0008 	and.w	r0, r0, #8
    bae6:	4770      	bx	lr
    bae8:	20000b74 	.word	0x20000b74

0000baec <tolower>:
    baec:	4b03      	ldr	r3, [pc, #12]	; (bafc <tolower+0x10>)
    baee:	5c1b      	ldrb	r3, [r3, r0]
    baf0:	f003 0303 	and.w	r3, r3, #3
    baf4:	2b01      	cmp	r3, #1
    baf6:	bf08      	it	eq
    baf8:	3020      	addeq	r0, #32
    bafa:	4770      	bx	lr
    bafc:	20000b75 	.word	0x20000b75

0000bb00 <stdio_exit_handler>:
    bb00:	4a02      	ldr	r2, [pc, #8]	; (bb0c <stdio_exit_handler+0xc>)
    bb02:	4903      	ldr	r1, [pc, #12]	; (bb10 <stdio_exit_handler+0x10>)
    bb04:	4803      	ldr	r0, [pc, #12]	; (bb14 <stdio_exit_handler+0x14>)
    bb06:	f000 b8bb 	b.w	bc80 <_fwalk_sglue>
    bb0a:	bf00      	nop
    bb0c:	20004990 	.word	0x20004990
    bb10:	0000ec55 	.word	0x0000ec55
    bb14:	200012d0 	.word	0x200012d0

0000bb18 <cleanup_stdio>:
    bb18:	4b0c      	ldr	r3, [pc, #48]	; (bb4c <cleanup_stdio+0x34>)
    bb1a:	6841      	ldr	r1, [r0, #4]
    bb1c:	4299      	cmp	r1, r3
    bb1e:	b510      	push	{r4, lr}
    bb20:	4604      	mov	r4, r0
    bb22:	d001      	beq.n	bb28 <cleanup_stdio+0x10>
    bb24:	f003 f896 	bl	ec54 <_fclose_r>
    bb28:	68a1      	ldr	r1, [r4, #8]
    bb2a:	4b09      	ldr	r3, [pc, #36]	; (bb50 <cleanup_stdio+0x38>)
    bb2c:	4299      	cmp	r1, r3
    bb2e:	d002      	beq.n	bb36 <cleanup_stdio+0x1e>
    bb30:	4620      	mov	r0, r4
    bb32:	f003 f88f 	bl	ec54 <_fclose_r>
    bb36:	68e1      	ldr	r1, [r4, #12]
    bb38:	4b06      	ldr	r3, [pc, #24]	; (bb54 <cleanup_stdio+0x3c>)
    bb3a:	4299      	cmp	r1, r3
    bb3c:	d004      	beq.n	bb48 <cleanup_stdio+0x30>
    bb3e:	4620      	mov	r0, r4
    bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb44:	f003 b886 	b.w	ec54 <_fclose_r>
    bb48:	bd10      	pop	{r4, pc}
    bb4a:	bf00      	nop
    bb4c:	2000528c 	.word	0x2000528c
    bb50:	200052f4 	.word	0x200052f4
    bb54:	2000535c 	.word	0x2000535c

0000bb58 <global_stdio_init.part.0>:
    bb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb5c:	4c2a      	ldr	r4, [pc, #168]	; (bc08 <global_stdio_init.part.0+0xb0>)
    bb5e:	4b2b      	ldr	r3, [pc, #172]	; (bc0c <global_stdio_init.part.0+0xb4>)
    bb60:	482b      	ldr	r0, [pc, #172]	; (bc10 <global_stdio_init.part.0+0xb8>)
    bb62:	f8df 90c0 	ldr.w	r9, [pc, #192]	; bc24 <global_stdio_init.part.0+0xcc>
    bb66:	f8df 80c0 	ldr.w	r8, [pc, #192]	; bc28 <global_stdio_init.part.0+0xd0>
    bb6a:	4f2a      	ldr	r7, [pc, #168]	; (bc14 <global_stdio_init.part.0+0xbc>)
    bb6c:	6018      	str	r0, [r3, #0]
    bb6e:	2500      	movs	r5, #0
    bb70:	2304      	movs	r3, #4
    bb72:	2208      	movs	r2, #8
    bb74:	4629      	mov	r1, r5
    bb76:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    bb7a:	4e27      	ldr	r6, [pc, #156]	; (bc18 <global_stdio_init.part.0+0xc0>)
    bb7c:	6665      	str	r5, [r4, #100]	; 0x64
    bb7e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    bb82:	e9c4 5500 	strd	r5, r5, [r4]
    bb86:	e9c4 5504 	strd	r5, r5, [r4, #16]
    bb8a:	61a5      	str	r5, [r4, #24]
    bb8c:	f000 f97e 	bl	be8c <memset>
    bb90:	4b22      	ldr	r3, [pc, #136]	; (bc1c <global_stdio_init.part.0+0xc4>)
    bb92:	6763      	str	r3, [r4, #116]	; 0x74
    bb94:	2208      	movs	r2, #8
    bb96:	4629      	mov	r1, r5
    bb98:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    bb9c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    bba0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    bba4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    bba8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    bbac:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    bbb0:	6725      	str	r5, [r4, #112]	; 0x70
    bbb2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    bbb6:	62e6      	str	r6, [r4, #44]	; 0x2c
    bbb8:	f000 f968 	bl	be8c <memset>
    bbbc:	4b18      	ldr	r3, [pc, #96]	; (bc20 <global_stdio_init.part.0+0xc8>)
    bbbe:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    bbc2:	4629      	mov	r1, r5
    bbc4:	f104 0368 	add.w	r3, r4, #104	; 0x68
    bbc8:	2208      	movs	r2, #8
    bbca:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    bbce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    bbd2:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    bbd6:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    bbda:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    bbde:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    bbe2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    bbe6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    bbea:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    bbee:	f000 f94d 	bl	be8c <memset>
    bbf2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    bbf6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    bbfa:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    bbfe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    bc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc06:	bf00      	nop
    bc08:	2000528c 	.word	0x2000528c
    bc0c:	200053c4 	.word	0x200053c4
    bc10:	0000bb01 	.word	0x0000bb01
    bc14:	0000bd6d 	.word	0x0000bd6d
    bc18:	0000bd8d 	.word	0x0000bd8d
    bc1c:	00010009 	.word	0x00010009
    bc20:	00020012 	.word	0x00020012
    bc24:	0000bd09 	.word	0x0000bd09
    bc28:	0000bd2d 	.word	0x0000bd2d

0000bc2c <__sinit>:
    bc2c:	b510      	push	{r4, lr}
    bc2e:	4604      	mov	r4, r0
    bc30:	480a      	ldr	r0, [pc, #40]	; (bc5c <__sinit+0x30>)
    bc32:	f000 faaf 	bl	c194 <__retarget_lock_acquire_recursive>
    bc36:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bc38:	b923      	cbnz	r3, bc44 <__sinit+0x18>
    bc3a:	4b09      	ldr	r3, [pc, #36]	; (bc60 <__sinit+0x34>)
    bc3c:	4a09      	ldr	r2, [pc, #36]	; (bc64 <__sinit+0x38>)
    bc3e:	681b      	ldr	r3, [r3, #0]
    bc40:	6362      	str	r2, [r4, #52]	; 0x34
    bc42:	b123      	cbz	r3, bc4e <__sinit+0x22>
    bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc48:	4804      	ldr	r0, [pc, #16]	; (bc5c <__sinit+0x30>)
    bc4a:	f000 baa5 	b.w	c198 <__retarget_lock_release_recursive>
    bc4e:	f7ff ff83 	bl	bb58 <global_stdio_init.part.0>
    bc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc56:	4801      	ldr	r0, [pc, #4]	; (bc5c <__sinit+0x30>)
    bc58:	f000 ba9e 	b.w	c198 <__retarget_lock_release_recursive>
    bc5c:	20005254 	.word	0x20005254
    bc60:	200053c4 	.word	0x200053c4
    bc64:	0000bb19 	.word	0x0000bb19

0000bc68 <__sfp_lock_acquire>:
    bc68:	4801      	ldr	r0, [pc, #4]	; (bc70 <__sfp_lock_acquire+0x8>)
    bc6a:	f000 ba93 	b.w	c194 <__retarget_lock_acquire_recursive>
    bc6e:	bf00      	nop
    bc70:	20005254 	.word	0x20005254

0000bc74 <__sfp_lock_release>:
    bc74:	4801      	ldr	r0, [pc, #4]	; (bc7c <__sfp_lock_release+0x8>)
    bc76:	f000 ba8f 	b.w	c198 <__retarget_lock_release_recursive>
    bc7a:	bf00      	nop
    bc7c:	20005254 	.word	0x20005254

0000bc80 <_fwalk_sglue>:
    bc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bc84:	4680      	mov	r8, r0
    bc86:	460f      	mov	r7, r1
    bc88:	4616      	mov	r6, r2
    bc8a:	f04f 0900 	mov.w	r9, #0
    bc8e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    bc92:	3d01      	subs	r5, #1
    bc94:	d411      	bmi.n	bcba <_fwalk_sglue+0x3a>
    bc96:	89a3      	ldrh	r3, [r4, #12]
    bc98:	2b01      	cmp	r3, #1
    bc9a:	f105 35ff 	add.w	r5, r5, #4294967295
    bc9e:	d908      	bls.n	bcb2 <_fwalk_sglue+0x32>
    bca0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    bca4:	3301      	adds	r3, #1
    bca6:	4621      	mov	r1, r4
    bca8:	d003      	beq.n	bcb2 <_fwalk_sglue+0x32>
    bcaa:	4640      	mov	r0, r8
    bcac:	47b8      	blx	r7
    bcae:	ea49 0900 	orr.w	r9, r9, r0
    bcb2:	1c6b      	adds	r3, r5, #1
    bcb4:	f104 0468 	add.w	r4, r4, #104	; 0x68
    bcb8:	d1ed      	bne.n	bc96 <_fwalk_sglue+0x16>
    bcba:	6836      	ldr	r6, [r6, #0]
    bcbc:	2e00      	cmp	r6, #0
    bcbe:	d1e6      	bne.n	bc8e <_fwalk_sglue+0xe>
    bcc0:	4648      	mov	r0, r9
    bcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bcc6:	bf00      	nop

0000bcc8 <sprintf>:
    bcc8:	b40e      	push	{r1, r2, r3}
    bcca:	b510      	push	{r4, lr}
    bccc:	b09d      	sub	sp, #116	; 0x74
    bcce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bcd2:	ab1f      	add	r3, sp, #124	; 0x7c
    bcd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    bcd8:	9104      	str	r1, [sp, #16]
    bcda:	4909      	ldr	r1, [pc, #36]	; (bd00 <sprintf+0x38>)
    bcdc:	f853 2b04 	ldr.w	r2, [r3], #4
    bce0:	9002      	str	r0, [sp, #8]
    bce2:	4c08      	ldr	r4, [pc, #32]	; (bd04 <sprintf+0x3c>)
    bce4:	6808      	ldr	r0, [r1, #0]
    bce6:	9301      	str	r3, [sp, #4]
    bce8:	a902      	add	r1, sp, #8
    bcea:	9405      	str	r4, [sp, #20]
    bcec:	f001 fa10 	bl	d110 <_svfprintf_r>
    bcf0:	9b02      	ldr	r3, [sp, #8]
    bcf2:	2200      	movs	r2, #0
    bcf4:	701a      	strb	r2, [r3, #0]
    bcf6:	b01d      	add	sp, #116	; 0x74
    bcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcfc:	b003      	add	sp, #12
    bcfe:	4770      	bx	lr
    bd00:	2000499c 	.word	0x2000499c
    bd04:	ffff0208 	.word	0xffff0208

0000bd08 <__sread>:
    bd08:	b510      	push	{r4, lr}
    bd0a:	460c      	mov	r4, r1
    bd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bd10:	f000 f9d4 	bl	c0bc <_read_r>
    bd14:	2800      	cmp	r0, #0
    bd16:	db03      	blt.n	bd20 <__sread+0x18>
    bd18:	6d23      	ldr	r3, [r4, #80]	; 0x50
    bd1a:	4403      	add	r3, r0
    bd1c:	6523      	str	r3, [r4, #80]	; 0x50
    bd1e:	bd10      	pop	{r4, pc}
    bd20:	89a3      	ldrh	r3, [r4, #12]
    bd22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    bd26:	81a3      	strh	r3, [r4, #12]
    bd28:	bd10      	pop	{r4, pc}
    bd2a:	bf00      	nop

0000bd2c <__swrite>:
    bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd30:	460c      	mov	r4, r1
    bd32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    bd36:	461f      	mov	r7, r3
    bd38:	05cb      	lsls	r3, r1, #23
    bd3a:	4605      	mov	r5, r0
    bd3c:	4616      	mov	r6, r2
    bd3e:	d40b      	bmi.n	bd58 <__swrite+0x2c>
    bd40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    bd44:	81a1      	strh	r1, [r4, #12]
    bd46:	463b      	mov	r3, r7
    bd48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bd4c:	4632      	mov	r2, r6
    bd4e:	4628      	mov	r0, r5
    bd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bd54:	f000 b9da 	b.w	c10c <_write_r>
    bd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bd5c:	2302      	movs	r3, #2
    bd5e:	2200      	movs	r2, #0
    bd60:	f000 f996 	bl	c090 <_lseek_r>
    bd64:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    bd68:	e7ea      	b.n	bd40 <__swrite+0x14>
    bd6a:	bf00      	nop

0000bd6c <__sseek>:
    bd6c:	b510      	push	{r4, lr}
    bd6e:	460c      	mov	r4, r1
    bd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bd74:	f000 f98c 	bl	c090 <_lseek_r>
    bd78:	89a3      	ldrh	r3, [r4, #12]
    bd7a:	1c42      	adds	r2, r0, #1
    bd7c:	bf0e      	itee	eq
    bd7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    bd82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    bd86:	6520      	strne	r0, [r4, #80]	; 0x50
    bd88:	81a3      	strh	r3, [r4, #12]
    bd8a:	bd10      	pop	{r4, pc}

0000bd8c <__sclose>:
    bd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bd90:	f000 b96c 	b.w	c06c <_close_r>

0000bd94 <memmove>:
    bd94:	4288      	cmp	r0, r1
    bd96:	d90d      	bls.n	bdb4 <memmove+0x20>
    bd98:	188b      	adds	r3, r1, r2
    bd9a:	4283      	cmp	r3, r0
    bd9c:	d90a      	bls.n	bdb4 <memmove+0x20>
    bd9e:	eb00 0c02 	add.w	ip, r0, r2
    bda2:	b1ba      	cbz	r2, bdd4 <memmove+0x40>
    bda4:	4662      	mov	r2, ip
    bda6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    bdaa:	f802 cd01 	strb.w	ip, [r2, #-1]!
    bdae:	4299      	cmp	r1, r3
    bdb0:	d1f9      	bne.n	bda6 <memmove+0x12>
    bdb2:	4770      	bx	lr
    bdb4:	2a0f      	cmp	r2, #15
    bdb6:	d80e      	bhi.n	bdd6 <memmove+0x42>
    bdb8:	4603      	mov	r3, r0
    bdba:	f102 3cff 	add.w	ip, r2, #4294967295
    bdbe:	b14a      	cbz	r2, bdd4 <memmove+0x40>
    bdc0:	f10c 0c01 	add.w	ip, ip, #1
    bdc4:	3b01      	subs	r3, #1
    bdc6:	448c      	add	ip, r1
    bdc8:	f811 2b01 	ldrb.w	r2, [r1], #1
    bdcc:	f803 2f01 	strb.w	r2, [r3, #1]!
    bdd0:	4561      	cmp	r1, ip
    bdd2:	d1f9      	bne.n	bdc8 <memmove+0x34>
    bdd4:	4770      	bx	lr
    bdd6:	ea40 0301 	orr.w	r3, r0, r1
    bdda:	079b      	lsls	r3, r3, #30
    bddc:	d150      	bne.n	be80 <memmove+0xec>
    bdde:	f1a2 0310 	sub.w	r3, r2, #16
    bde2:	b570      	push	{r4, r5, r6, lr}
    bde4:	f101 0c20 	add.w	ip, r1, #32
    bde8:	f023 050f 	bic.w	r5, r3, #15
    bdec:	f101 0e10 	add.w	lr, r1, #16
    bdf0:	f100 0410 	add.w	r4, r0, #16
    bdf4:	44ac      	add	ip, r5
    bdf6:	091b      	lsrs	r3, r3, #4
    bdf8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    bdfc:	f844 5c10 	str.w	r5, [r4, #-16]
    be00:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    be04:	f844 5c0c 	str.w	r5, [r4, #-12]
    be08:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    be0c:	f844 5c08 	str.w	r5, [r4, #-8]
    be10:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    be14:	f844 5c04 	str.w	r5, [r4, #-4]
    be18:	f10e 0e10 	add.w	lr, lr, #16
    be1c:	45e6      	cmp	lr, ip
    be1e:	f104 0410 	add.w	r4, r4, #16
    be22:	d1e9      	bne.n	bdf8 <memmove+0x64>
    be24:	3301      	adds	r3, #1
    be26:	f012 0f0c 	tst.w	r2, #12
    be2a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    be2e:	f002 040f 	and.w	r4, r2, #15
    be32:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    be36:	d027      	beq.n	be88 <memmove+0xf4>
    be38:	3c04      	subs	r4, #4
    be3a:	f024 0603 	bic.w	r6, r4, #3
    be3e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    be42:	441e      	add	r6, r3
    be44:	1f1c      	subs	r4, r3, #4
    be46:	468e      	mov	lr, r1
    be48:	f85e 5b04 	ldr.w	r5, [lr], #4
    be4c:	f844 5f04 	str.w	r5, [r4, #4]!
    be50:	42b4      	cmp	r4, r6
    be52:	d1f9      	bne.n	be48 <memmove+0xb4>
    be54:	f10c 0401 	add.w	r4, ip, #1
    be58:	f002 0203 	and.w	r2, r2, #3
    be5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    be60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    be64:	f102 3cff 	add.w	ip, r2, #4294967295
    be68:	b14a      	cbz	r2, be7e <memmove+0xea>
    be6a:	f10c 0c01 	add.w	ip, ip, #1
    be6e:	3b01      	subs	r3, #1
    be70:	448c      	add	ip, r1
    be72:	f811 2b01 	ldrb.w	r2, [r1], #1
    be76:	f803 2f01 	strb.w	r2, [r3, #1]!
    be7a:	4561      	cmp	r1, ip
    be7c:	d1f9      	bne.n	be72 <memmove+0xde>
    be7e:	bd70      	pop	{r4, r5, r6, pc}
    be80:	f102 3cff 	add.w	ip, r2, #4294967295
    be84:	4603      	mov	r3, r0
    be86:	e79b      	b.n	bdc0 <memmove+0x2c>
    be88:	4622      	mov	r2, r4
    be8a:	e7eb      	b.n	be64 <memmove+0xd0>

0000be8c <memset>:
    be8c:	0783      	lsls	r3, r0, #30
    be8e:	b530      	push	{r4, r5, lr}
    be90:	d048      	beq.n	bf24 <memset+0x98>
    be92:	1e54      	subs	r4, r2, #1
    be94:	2a00      	cmp	r2, #0
    be96:	d03f      	beq.n	bf18 <memset+0x8c>
    be98:	b2ca      	uxtb	r2, r1
    be9a:	4603      	mov	r3, r0
    be9c:	e001      	b.n	bea2 <memset+0x16>
    be9e:	3c01      	subs	r4, #1
    bea0:	d33a      	bcc.n	bf18 <memset+0x8c>
    bea2:	f803 2b01 	strb.w	r2, [r3], #1
    bea6:	079d      	lsls	r5, r3, #30
    bea8:	d1f9      	bne.n	be9e <memset+0x12>
    beaa:	2c03      	cmp	r4, #3
    beac:	d92d      	bls.n	bf0a <memset+0x7e>
    beae:	b2cd      	uxtb	r5, r1
    beb0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    beb4:	2c0f      	cmp	r4, #15
    beb6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    beba:	d936      	bls.n	bf2a <memset+0x9e>
    bebc:	f1a4 0210 	sub.w	r2, r4, #16
    bec0:	f022 0c0f 	bic.w	ip, r2, #15
    bec4:	f103 0e20 	add.w	lr, r3, #32
    bec8:	44e6      	add	lr, ip
    beca:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    bece:	f103 0210 	add.w	r2, r3, #16
    bed2:	e942 5504 	strd	r5, r5, [r2, #-16]
    bed6:	e942 5502 	strd	r5, r5, [r2, #-8]
    beda:	3210      	adds	r2, #16
    bedc:	4572      	cmp	r2, lr
    bede:	d1f8      	bne.n	bed2 <memset+0x46>
    bee0:	f10c 0201 	add.w	r2, ip, #1
    bee4:	f014 0f0c 	tst.w	r4, #12
    bee8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    beec:	f004 0c0f 	and.w	ip, r4, #15
    bef0:	d013      	beq.n	bf1a <memset+0x8e>
    bef2:	f1ac 0304 	sub.w	r3, ip, #4
    bef6:	f023 0303 	bic.w	r3, r3, #3
    befa:	3304      	adds	r3, #4
    befc:	4413      	add	r3, r2
    befe:	f842 5b04 	str.w	r5, [r2], #4
    bf02:	4293      	cmp	r3, r2
    bf04:	d1fb      	bne.n	befe <memset+0x72>
    bf06:	f00c 0403 	and.w	r4, ip, #3
    bf0a:	b12c      	cbz	r4, bf18 <memset+0x8c>
    bf0c:	b2c9      	uxtb	r1, r1
    bf0e:	441c      	add	r4, r3
    bf10:	f803 1b01 	strb.w	r1, [r3], #1
    bf14:	429c      	cmp	r4, r3
    bf16:	d1fb      	bne.n	bf10 <memset+0x84>
    bf18:	bd30      	pop	{r4, r5, pc}
    bf1a:	4664      	mov	r4, ip
    bf1c:	4613      	mov	r3, r2
    bf1e:	2c00      	cmp	r4, #0
    bf20:	d1f4      	bne.n	bf0c <memset+0x80>
    bf22:	e7f9      	b.n	bf18 <memset+0x8c>
    bf24:	4603      	mov	r3, r0
    bf26:	4614      	mov	r4, r2
    bf28:	e7bf      	b.n	beaa <memset+0x1e>
    bf2a:	461a      	mov	r2, r3
    bf2c:	46a4      	mov	ip, r4
    bf2e:	e7e0      	b.n	bef2 <memset+0x66>

0000bf30 <strchr>:
    bf30:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    bf34:	4603      	mov	r3, r0
    bf36:	d044      	beq.n	bfc2 <strchr+0x92>
    bf38:	0782      	lsls	r2, r0, #30
    bf3a:	d132      	bne.n	bfa2 <strchr+0x72>
    bf3c:	b510      	push	{r4, lr}
    bf3e:	6804      	ldr	r4, [r0, #0]
    bf40:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    bf44:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    bf48:	ea8e 0204 	eor.w	r2, lr, r4
    bf4c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bf50:	ea23 0302 	bic.w	r3, r3, r2
    bf54:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bf58:	ea22 0204 	bic.w	r2, r2, r4
    bf5c:	4313      	orrs	r3, r2
    bf5e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bf62:	d10f      	bne.n	bf84 <strchr+0x54>
    bf64:	f850 4f04 	ldr.w	r4, [r0, #4]!
    bf68:	ea84 0c0e 	eor.w	ip, r4, lr
    bf6c:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    bf70:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    bf74:	ea23 0304 	bic.w	r3, r3, r4
    bf78:	ea22 020c 	bic.w	r2, r2, ip
    bf7c:	4313      	orrs	r3, r2
    bf7e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bf82:	d0ef      	beq.n	bf64 <strchr+0x34>
    bf84:	7803      	ldrb	r3, [r0, #0]
    bf86:	b923      	cbnz	r3, bf92 <strchr+0x62>
    bf88:	e036      	b.n	bff8 <strchr+0xc8>
    bf8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bf8e:	2b00      	cmp	r3, #0
    bf90:	d032      	beq.n	bff8 <strchr+0xc8>
    bf92:	4299      	cmp	r1, r3
    bf94:	d1f9      	bne.n	bf8a <strchr+0x5a>
    bf96:	bd10      	pop	{r4, pc}
    bf98:	428a      	cmp	r2, r1
    bf9a:	d011      	beq.n	bfc0 <strchr+0x90>
    bf9c:	079a      	lsls	r2, r3, #30
    bf9e:	4618      	mov	r0, r3
    bfa0:	d0cc      	beq.n	bf3c <strchr+0xc>
    bfa2:	4618      	mov	r0, r3
    bfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
    bfa8:	2a00      	cmp	r2, #0
    bfaa:	d1f5      	bne.n	bf98 <strchr+0x68>
    bfac:	4610      	mov	r0, r2
    bfae:	4770      	bx	lr
    bfb0:	0799      	lsls	r1, r3, #30
    bfb2:	4618      	mov	r0, r3
    bfb4:	d007      	beq.n	bfc6 <strchr+0x96>
    bfb6:	4618      	mov	r0, r3
    bfb8:	3301      	adds	r3, #1
    bfba:	7802      	ldrb	r2, [r0, #0]
    bfbc:	2a00      	cmp	r2, #0
    bfbe:	d1f7      	bne.n	bfb0 <strchr+0x80>
    bfc0:	4770      	bx	lr
    bfc2:	0782      	lsls	r2, r0, #30
    bfc4:	d1f7      	bne.n	bfb6 <strchr+0x86>
    bfc6:	6802      	ldr	r2, [r0, #0]
    bfc8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bfcc:	ea23 0302 	bic.w	r3, r3, r2
    bfd0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bfd4:	d108      	bne.n	bfe8 <strchr+0xb8>
    bfd6:	f850 2f04 	ldr.w	r2, [r0, #4]!
    bfda:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    bfde:	ea23 0302 	bic.w	r3, r3, r2
    bfe2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    bfe6:	d0f6      	beq.n	bfd6 <strchr+0xa6>
    bfe8:	7803      	ldrb	r3, [r0, #0]
    bfea:	2b00      	cmp	r3, #0
    bfec:	d0e8      	beq.n	bfc0 <strchr+0x90>
    bfee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bff2:	2b00      	cmp	r3, #0
    bff4:	d1fb      	bne.n	bfee <strchr+0xbe>
    bff6:	4770      	bx	lr
    bff8:	4618      	mov	r0, r3
    bffa:	bd10      	pop	{r4, pc}

0000bffc <strncpy>:
    bffc:	ea40 0301 	orr.w	r3, r0, r1
    c000:	079b      	lsls	r3, r3, #30
    c002:	b530      	push	{r4, r5, lr}
    c004:	d101      	bne.n	c00a <strncpy+0xe>
    c006:	2a03      	cmp	r2, #3
    c008:	d80f      	bhi.n	c02a <strncpy+0x2e>
    c00a:	4684      	mov	ip, r0
    c00c:	f101 3eff 	add.w	lr, r1, #4294967295
    c010:	e007      	b.n	c022 <strncpy+0x26>
    c012:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    c016:	f803 1b01 	strb.w	r1, [r3], #1
    c01a:	1e54      	subs	r4, r2, #1
    c01c:	b1c1      	cbz	r1, c050 <strncpy+0x54>
    c01e:	469c      	mov	ip, r3
    c020:	4622      	mov	r2, r4
    c022:	4663      	mov	r3, ip
    c024:	2a00      	cmp	r2, #0
    c026:	d1f4      	bne.n	c012 <strncpy+0x16>
    c028:	bd30      	pop	{r4, r5, pc}
    c02a:	460b      	mov	r3, r1
    c02c:	4684      	mov	ip, r0
    c02e:	4619      	mov	r1, r3
    c030:	f853 5b04 	ldr.w	r5, [r3], #4
    c034:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    c038:	ea24 0405 	bic.w	r4, r4, r5
    c03c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    c040:	d1e4      	bne.n	c00c <strncpy+0x10>
    c042:	3a04      	subs	r2, #4
    c044:	2a03      	cmp	r2, #3
    c046:	f84c 5b04 	str.w	r5, [ip], #4
    c04a:	4619      	mov	r1, r3
    c04c:	d8ef      	bhi.n	c02e <strncpy+0x32>
    c04e:	e7dd      	b.n	c00c <strncpy+0x10>
    c050:	4494      	add	ip, r2
    c052:	2c00      	cmp	r4, #0
    c054:	d0e8      	beq.n	c028 <strncpy+0x2c>
    c056:	f803 1b01 	strb.w	r1, [r3], #1
    c05a:	4563      	cmp	r3, ip
    c05c:	d1fb      	bne.n	c056 <strncpy+0x5a>
    c05e:	bd30      	pop	{r4, r5, pc}

0000c060 <__locale_mb_cur_max>:
    c060:	4b01      	ldr	r3, [pc, #4]	; (c068 <__locale_mb_cur_max+0x8>)
    c062:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    c066:	4770      	bx	lr
    c068:	20004414 	.word	0x20004414

0000c06c <_close_r>:
    c06c:	b538      	push	{r3, r4, r5, lr}
    c06e:	4d07      	ldr	r5, [pc, #28]	; (c08c <_close_r+0x20>)
    c070:	2200      	movs	r2, #0
    c072:	4604      	mov	r4, r0
    c074:	4608      	mov	r0, r1
    c076:	602a      	str	r2, [r5, #0]
    c078:	f7fd faa2 	bl	95c0 <_close>
    c07c:	1c43      	adds	r3, r0, #1
    c07e:	d000      	beq.n	c082 <_close_r+0x16>
    c080:	bd38      	pop	{r3, r4, r5, pc}
    c082:	682b      	ldr	r3, [r5, #0]
    c084:	2b00      	cmp	r3, #0
    c086:	d0fb      	beq.n	c080 <_close_r+0x14>
    c088:	6023      	str	r3, [r4, #0]
    c08a:	bd38      	pop	{r3, r4, r5, pc}
    c08c:	200053dc 	.word	0x200053dc

0000c090 <_lseek_r>:
    c090:	b538      	push	{r3, r4, r5, lr}
    c092:	460c      	mov	r4, r1
    c094:	4d08      	ldr	r5, [pc, #32]	; (c0b8 <_lseek_r+0x28>)
    c096:	4684      	mov	ip, r0
    c098:	4611      	mov	r1, r2
    c09a:	4620      	mov	r0, r4
    c09c:	461a      	mov	r2, r3
    c09e:	2300      	movs	r3, #0
    c0a0:	602b      	str	r3, [r5, #0]
    c0a2:	4664      	mov	r4, ip
    c0a4:	f7fd fa98 	bl	95d8 <_lseek>
    c0a8:	1c43      	adds	r3, r0, #1
    c0aa:	d000      	beq.n	c0ae <_lseek_r+0x1e>
    c0ac:	bd38      	pop	{r3, r4, r5, pc}
    c0ae:	682b      	ldr	r3, [r5, #0]
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d0fb      	beq.n	c0ac <_lseek_r+0x1c>
    c0b4:	6023      	str	r3, [r4, #0]
    c0b6:	bd38      	pop	{r3, r4, r5, pc}
    c0b8:	200053dc 	.word	0x200053dc

0000c0bc <_read_r>:
    c0bc:	b538      	push	{r3, r4, r5, lr}
    c0be:	460c      	mov	r4, r1
    c0c0:	4d08      	ldr	r5, [pc, #32]	; (c0e4 <_read_r+0x28>)
    c0c2:	4684      	mov	ip, r0
    c0c4:	4611      	mov	r1, r2
    c0c6:	4620      	mov	r0, r4
    c0c8:	461a      	mov	r2, r3
    c0ca:	2300      	movs	r3, #0
    c0cc:	602b      	str	r3, [r5, #0]
    c0ce:	4664      	mov	r4, ip
    c0d0:	f7fd fa74 	bl	95bc <_read>
    c0d4:	1c43      	adds	r3, r0, #1
    c0d6:	d000      	beq.n	c0da <_read_r+0x1e>
    c0d8:	bd38      	pop	{r3, r4, r5, pc}
    c0da:	682b      	ldr	r3, [r5, #0]
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d0fb      	beq.n	c0d8 <_read_r+0x1c>
    c0e0:	6023      	str	r3, [r4, #0]
    c0e2:	bd38      	pop	{r3, r4, r5, pc}
    c0e4:	200053dc 	.word	0x200053dc

0000c0e8 <_sbrk_r>:
    c0e8:	b538      	push	{r3, r4, r5, lr}
    c0ea:	4d07      	ldr	r5, [pc, #28]	; (c108 <_sbrk_r+0x20>)
    c0ec:	2200      	movs	r2, #0
    c0ee:	4604      	mov	r4, r0
    c0f0:	4608      	mov	r0, r1
    c0f2:	602a      	str	r2, [r5, #0]
    c0f4:	f7fd fa48 	bl	9588 <_sbrk>
    c0f8:	1c43      	adds	r3, r0, #1
    c0fa:	d000      	beq.n	c0fe <_sbrk_r+0x16>
    c0fc:	bd38      	pop	{r3, r4, r5, pc}
    c0fe:	682b      	ldr	r3, [r5, #0]
    c100:	2b00      	cmp	r3, #0
    c102:	d0fb      	beq.n	c0fc <_sbrk_r+0x14>
    c104:	6023      	str	r3, [r4, #0]
    c106:	bd38      	pop	{r3, r4, r5, pc}
    c108:	200053dc 	.word	0x200053dc

0000c10c <_write_r>:
    c10c:	b538      	push	{r3, r4, r5, lr}
    c10e:	460c      	mov	r4, r1
    c110:	4d08      	ldr	r5, [pc, #32]	; (c134 <_write_r+0x28>)
    c112:	4684      	mov	ip, r0
    c114:	4611      	mov	r1, r2
    c116:	4620      	mov	r0, r4
    c118:	461a      	mov	r2, r3
    c11a:	2300      	movs	r3, #0
    c11c:	602b      	str	r3, [r5, #0]
    c11e:	4664      	mov	r4, ip
    c120:	f7fc fdaa 	bl	8c78 <_write>
    c124:	1c43      	adds	r3, r0, #1
    c126:	d000      	beq.n	c12a <_write_r+0x1e>
    c128:	bd38      	pop	{r3, r4, r5, pc}
    c12a:	682b      	ldr	r3, [r5, #0]
    c12c:	2b00      	cmp	r3, #0
    c12e:	d0fb      	beq.n	c128 <_write_r+0x1c>
    c130:	6023      	str	r3, [r4, #0]
    c132:	bd38      	pop	{r3, r4, r5, pc}
    c134:	200053dc 	.word	0x200053dc

0000c138 <__errno>:
    c138:	4b01      	ldr	r3, [pc, #4]	; (c140 <__errno+0x8>)
    c13a:	6818      	ldr	r0, [r3, #0]
    c13c:	4770      	bx	lr
    c13e:	bf00      	nop
    c140:	2000499c 	.word	0x2000499c

0000c144 <__libc_init_array>:
    c144:	b570      	push	{r4, r5, r6, lr}
    c146:	4e0d      	ldr	r6, [pc, #52]	; (c17c <__libc_init_array+0x38>)
    c148:	4d0d      	ldr	r5, [pc, #52]	; (c180 <__libc_init_array+0x3c>)
    c14a:	1b76      	subs	r6, r6, r5
    c14c:	10b6      	asrs	r6, r6, #2
    c14e:	d006      	beq.n	c15e <__libc_init_array+0x1a>
    c150:	2400      	movs	r4, #0
    c152:	f855 3b04 	ldr.w	r3, [r5], #4
    c156:	3401      	adds	r4, #1
    c158:	4798      	blx	r3
    c15a:	42a6      	cmp	r6, r4
    c15c:	d1f9      	bne.n	c152 <__libc_init_array+0xe>
    c15e:	4e09      	ldr	r6, [pc, #36]	; (c184 <__libc_init_array+0x40>)
    c160:	4d09      	ldr	r5, [pc, #36]	; (c188 <__libc_init_array+0x44>)
    c162:	1b76      	subs	r6, r6, r5
    c164:	f005 fb90 	bl	11888 <___init_veneer>
    c168:	10b6      	asrs	r6, r6, #2
    c16a:	d006      	beq.n	c17a <__libc_init_array+0x36>
    c16c:	2400      	movs	r4, #0
    c16e:	f855 3b04 	ldr.w	r3, [r5], #4
    c172:	3401      	adds	r4, #1
    c174:	4798      	blx	r3
    c176:	42a6      	cmp	r6, r4
    c178:	d1f9      	bne.n	c16e <__libc_init_array+0x2a>
    c17a:	bd70      	pop	{r4, r5, r6, pc}
    c17c:	60001e48 	.word	0x60001e48
    c180:	60001e48 	.word	0x60001e48
    c184:	60001e50 	.word	0x60001e50
    c188:	60001e48 	.word	0x60001e48

0000c18c <__retarget_lock_init_recursive>:
    c18c:	4770      	bx	lr
    c18e:	bf00      	nop

0000c190 <__retarget_lock_close_recursive>:
    c190:	4770      	bx	lr
    c192:	bf00      	nop

0000c194 <__retarget_lock_acquire_recursive>:
    c194:	4770      	bx	lr
    c196:	bf00      	nop

0000c198 <__retarget_lock_release_recursive>:
    c198:	4770      	bx	lr
    c19a:	bf00      	nop
    c19c:	0000      	movs	r0, r0
    c19e:	0000      	movs	r0, r0
    c1a0:	eba2 0003 	sub.w	r0, r2, r3
    c1a4:	4770      	bx	lr
    c1a6:	bf00      	nop

0000c1a8 <strcmp>:
    c1a8:	7802      	ldrb	r2, [r0, #0]
    c1aa:	780b      	ldrb	r3, [r1, #0]
    c1ac:	2a01      	cmp	r2, #1
    c1ae:	bf28      	it	cs
    c1b0:	429a      	cmpcs	r2, r3
    c1b2:	d1f5      	bne.n	c1a0 <__retarget_lock_release_recursive+0x8>
    c1b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    c1b8:	ea40 0401 	orr.w	r4, r0, r1
    c1bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    c1c0:	f06f 0c00 	mvn.w	ip, #0
    c1c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    c1c8:	b312      	cbz	r2, c210 <strcmp+0x68>
    c1ca:	ea80 0401 	eor.w	r4, r0, r1
    c1ce:	f014 0f07 	tst.w	r4, #7
    c1d2:	d16a      	bne.n	c2aa <strcmp+0x102>
    c1d4:	f000 0407 	and.w	r4, r0, #7
    c1d8:	f020 0007 	bic.w	r0, r0, #7
    c1dc:	f004 0503 	and.w	r5, r4, #3
    c1e0:	f021 0107 	bic.w	r1, r1, #7
    c1e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c1e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    c1ec:	f014 0f04 	tst.w	r4, #4
    c1f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    c1f4:	fa0c f405 	lsl.w	r4, ip, r5
    c1f8:	ea62 0204 	orn	r2, r2, r4
    c1fc:	ea66 0604 	orn	r6, r6, r4
    c200:	d00a      	beq.n	c218 <strcmp+0x70>
    c202:	ea63 0304 	orn	r3, r3, r4
    c206:	4662      	mov	r2, ip
    c208:	ea67 0704 	orn	r7, r7, r4
    c20c:	4666      	mov	r6, ip
    c20e:	e003      	b.n	c218 <strcmp+0x70>
    c210:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    c214:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    c218:	fa82 f54c 	uadd8	r5, r2, ip
    c21c:	ea82 0406 	eor.w	r4, r2, r6
    c220:	faa4 f48c 	sel	r4, r4, ip
    c224:	bb6c      	cbnz	r4, c282 <strcmp+0xda>
    c226:	fa83 f54c 	uadd8	r5, r3, ip
    c22a:	ea83 0507 	eor.w	r5, r3, r7
    c22e:	faa5 f58c 	sel	r5, r5, ip
    c232:	b995      	cbnz	r5, c25a <strcmp+0xb2>
    c234:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    c238:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    c23c:	fa82 f54c 	uadd8	r5, r2, ip
    c240:	ea82 0406 	eor.w	r4, r2, r6
    c244:	faa4 f48c 	sel	r4, r4, ip
    c248:	fa83 f54c 	uadd8	r5, r3, ip
    c24c:	ea83 0507 	eor.w	r5, r3, r7
    c250:	faa5 f58c 	sel	r5, r5, ip
    c254:	4325      	orrs	r5, r4
    c256:	d0db      	beq.n	c210 <strcmp+0x68>
    c258:	b99c      	cbnz	r4, c282 <strcmp+0xda>
    c25a:	ba2d      	rev	r5, r5
    c25c:	fab5 f485 	clz	r4, r5
    c260:	f024 0407 	bic.w	r4, r4, #7
    c264:	fa27 f104 	lsr.w	r1, r7, r4
    c268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c26c:	fa23 f304 	lsr.w	r3, r3, r4
    c270:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    c274:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c278:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c27c:	eba0 0001 	sub.w	r0, r0, r1
    c280:	4770      	bx	lr
    c282:	ba24      	rev	r4, r4
    c284:	fab4 f484 	clz	r4, r4
    c288:	f024 0407 	bic.w	r4, r4, #7
    c28c:	fa26 f104 	lsr.w	r1, r6, r4
    c290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    c294:	fa22 f204 	lsr.w	r2, r2, r4
    c298:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    c29c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c2a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c2a4:	eba0 0001 	sub.w	r0, r0, r1
    c2a8:	4770      	bx	lr
    c2aa:	f014 0f03 	tst.w	r4, #3
    c2ae:	d13c      	bne.n	c32a <strcmp+0x182>
    c2b0:	f010 0403 	ands.w	r4, r0, #3
    c2b4:	d128      	bne.n	c308 <strcmp+0x160>
    c2b6:	f850 2b08 	ldr.w	r2, [r0], #8
    c2ba:	f851 3b08 	ldr.w	r3, [r1], #8
    c2be:	fa82 f54c 	uadd8	r5, r2, ip
    c2c2:	ea82 0503 	eor.w	r5, r2, r3
    c2c6:	faa5 f58c 	sel	r5, r5, ip
    c2ca:	b95d      	cbnz	r5, c2e4 <strcmp+0x13c>
    c2cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    c2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    c2d4:	fa82 f54c 	uadd8	r5, r2, ip
    c2d8:	ea82 0503 	eor.w	r5, r2, r3
    c2dc:	faa5 f58c 	sel	r5, r5, ip
    c2e0:	2d00      	cmp	r5, #0
    c2e2:	d0e8      	beq.n	c2b6 <strcmp+0x10e>
    c2e4:	ba2d      	rev	r5, r5
    c2e6:	fab5 f485 	clz	r4, r5
    c2ea:	f024 0407 	bic.w	r4, r4, #7
    c2ee:	fa23 f104 	lsr.w	r1, r3, r4
    c2f2:	fa22 f204 	lsr.w	r2, r2, r4
    c2f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    c2fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    c2fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c302:	eba0 0001 	sub.w	r0, r0, r1
    c306:	4770      	bx	lr
    c308:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    c30c:	f020 0003 	bic.w	r0, r0, #3
    c310:	f850 2b08 	ldr.w	r2, [r0], #8
    c314:	f021 0103 	bic.w	r1, r1, #3
    c318:	f851 3b08 	ldr.w	r3, [r1], #8
    c31c:	fa0c f404 	lsl.w	r4, ip, r4
    c320:	ea62 0204 	orn	r2, r2, r4
    c324:	ea63 0304 	orn	r3, r3, r4
    c328:	e7c9      	b.n	c2be <strcmp+0x116>
    c32a:	f010 0403 	ands.w	r4, r0, #3
    c32e:	d01a      	beq.n	c366 <strcmp+0x1be>
    c330:	eba1 0104 	sub.w	r1, r1, r4
    c334:	f020 0003 	bic.w	r0, r0, #3
    c338:	07e4      	lsls	r4, r4, #31
    c33a:	f850 2b04 	ldr.w	r2, [r0], #4
    c33e:	d006      	beq.n	c34e <strcmp+0x1a6>
    c340:	d20f      	bcs.n	c362 <strcmp+0x1ba>
    c342:	788b      	ldrb	r3, [r1, #2]
    c344:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    c348:	1ae4      	subs	r4, r4, r3
    c34a:	d106      	bne.n	c35a <strcmp+0x1b2>
    c34c:	b12b      	cbz	r3, c35a <strcmp+0x1b2>
    c34e:	78cb      	ldrb	r3, [r1, #3]
    c350:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    c354:	1ae4      	subs	r4, r4, r3
    c356:	d100      	bne.n	c35a <strcmp+0x1b2>
    c358:	b91b      	cbnz	r3, c362 <strcmp+0x1ba>
    c35a:	4620      	mov	r0, r4
    c35c:	f85d 4b10 	ldr.w	r4, [sp], #16
    c360:	4770      	bx	lr
    c362:	f101 0104 	add.w	r1, r1, #4
    c366:	f850 2b04 	ldr.w	r2, [r0], #4
    c36a:	07cc      	lsls	r4, r1, #31
    c36c:	f021 0103 	bic.w	r1, r1, #3
    c370:	f851 3b04 	ldr.w	r3, [r1], #4
    c374:	d848      	bhi.n	c408 <strcmp+0x260>
    c376:	d224      	bcs.n	c3c2 <strcmp+0x21a>
    c378:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    c37c:	fa82 f54c 	uadd8	r5, r2, ip
    c380:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    c384:	faa5 f58c 	sel	r5, r5, ip
    c388:	d10a      	bne.n	c3a0 <strcmp+0x1f8>
    c38a:	b965      	cbnz	r5, c3a6 <strcmp+0x1fe>
    c38c:	f851 3b04 	ldr.w	r3, [r1], #4
    c390:	ea84 0402 	eor.w	r4, r4, r2
    c394:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    c398:	d10e      	bne.n	c3b8 <strcmp+0x210>
    c39a:	f850 2b04 	ldr.w	r2, [r0], #4
    c39e:	e7eb      	b.n	c378 <strcmp+0x1d0>
    c3a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    c3a4:	e055      	b.n	c452 <strcmp+0x2aa>
    c3a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    c3aa:	d14d      	bne.n	c448 <strcmp+0x2a0>
    c3ac:	7808      	ldrb	r0, [r1, #0]
    c3ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c3b2:	f1c0 0000 	rsb	r0, r0, #0
    c3b6:	4770      	bx	lr
    c3b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    c3bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c3c0:	e047      	b.n	c452 <strcmp+0x2aa>
    c3c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    c3c6:	fa82 f54c 	uadd8	r5, r2, ip
    c3ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    c3ce:	faa5 f58c 	sel	r5, r5, ip
    c3d2:	d10a      	bne.n	c3ea <strcmp+0x242>
    c3d4:	b965      	cbnz	r5, c3f0 <strcmp+0x248>
    c3d6:	f851 3b04 	ldr.w	r3, [r1], #4
    c3da:	ea84 0402 	eor.w	r4, r4, r2
    c3de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    c3e2:	d10c      	bne.n	c3fe <strcmp+0x256>
    c3e4:	f850 2b04 	ldr.w	r2, [r0], #4
    c3e8:	e7eb      	b.n	c3c2 <strcmp+0x21a>
    c3ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    c3ee:	e030      	b.n	c452 <strcmp+0x2aa>
    c3f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    c3f4:	d128      	bne.n	c448 <strcmp+0x2a0>
    c3f6:	880b      	ldrh	r3, [r1, #0]
    c3f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c3fc:	e029      	b.n	c452 <strcmp+0x2aa>
    c3fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    c402:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    c406:	e024      	b.n	c452 <strcmp+0x2aa>
    c408:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    c40c:	fa82 f54c 	uadd8	r5, r2, ip
    c410:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    c414:	faa5 f58c 	sel	r5, r5, ip
    c418:	d10a      	bne.n	c430 <strcmp+0x288>
    c41a:	b965      	cbnz	r5, c436 <strcmp+0x28e>
    c41c:	f851 3b04 	ldr.w	r3, [r1], #4
    c420:	ea84 0402 	eor.w	r4, r4, r2
    c424:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    c428:	d109      	bne.n	c43e <strcmp+0x296>
    c42a:	f850 2b04 	ldr.w	r2, [r0], #4
    c42e:	e7eb      	b.n	c408 <strcmp+0x260>
    c430:	ea4f 6313 	mov.w	r3, r3, lsr #24
    c434:	e00d      	b.n	c452 <strcmp+0x2aa>
    c436:	f015 0fff 	tst.w	r5, #255	; 0xff
    c43a:	d105      	bne.n	c448 <strcmp+0x2a0>
    c43c:	680b      	ldr	r3, [r1, #0]
    c43e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    c442:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c446:	e004      	b.n	c452 <strcmp+0x2aa>
    c448:	f04f 0000 	mov.w	r0, #0
    c44c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c450:	4770      	bx	lr
    c452:	ba12      	rev	r2, r2
    c454:	ba1b      	rev	r3, r3
    c456:	fa82 f44c 	uadd8	r4, r2, ip
    c45a:	ea82 0403 	eor.w	r4, r2, r3
    c45e:	faa4 f58c 	sel	r5, r4, ip
    c462:	fab5 f485 	clz	r4, r5
    c466:	fa02 f204 	lsl.w	r2, r2, r4
    c46a:	fa03 f304 	lsl.w	r3, r3, r4
    c46e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    c472:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    c476:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    c47a:	4770      	bx	lr

0000c47c <strcpy>:
    c47c:	ea80 0201 	eor.w	r2, r0, r1
    c480:	4684      	mov	ip, r0
    c482:	f012 0f03 	tst.w	r2, #3
    c486:	d14f      	bne.n	c528 <strcpy+0xac>
    c488:	f011 0f03 	tst.w	r1, #3
    c48c:	d132      	bne.n	c4f4 <strcpy+0x78>
    c48e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    c492:	f011 0f04 	tst.w	r1, #4
    c496:	f851 3b04 	ldr.w	r3, [r1], #4
    c49a:	d00b      	beq.n	c4b4 <strcpy+0x38>
    c49c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c4a0:	439a      	bics	r2, r3
    c4a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c4a6:	bf04      	itt	eq
    c4a8:	f84c 3b04 	streq.w	r3, [ip], #4
    c4ac:	f851 3b04 	ldreq.w	r3, [r1], #4
    c4b0:	d116      	bne.n	c4e0 <strcpy+0x64>
    c4b2:	bf00      	nop
    c4b4:	f851 4b04 	ldr.w	r4, [r1], #4
    c4b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    c4bc:	439a      	bics	r2, r3
    c4be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c4c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    c4c6:	d10b      	bne.n	c4e0 <strcpy+0x64>
    c4c8:	f84c 3b04 	str.w	r3, [ip], #4
    c4cc:	43a2      	bics	r2, r4
    c4ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    c4d2:	bf04      	itt	eq
    c4d4:	f851 3b04 	ldreq.w	r3, [r1], #4
    c4d8:	f84c 4b04 	streq.w	r4, [ip], #4
    c4dc:	d0ea      	beq.n	c4b4 <strcpy+0x38>
    c4de:	4623      	mov	r3, r4
    c4e0:	f80c 3b01 	strb.w	r3, [ip], #1
    c4e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    c4e8:	ea4f 2333 	mov.w	r3, r3, ror #8
    c4ec:	d1f8      	bne.n	c4e0 <strcpy+0x64>
    c4ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    c4f2:	4770      	bx	lr
    c4f4:	f011 0f01 	tst.w	r1, #1
    c4f8:	d006      	beq.n	c508 <strcpy+0x8c>
    c4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    c4fe:	f80c 2b01 	strb.w	r2, [ip], #1
    c502:	2a00      	cmp	r2, #0
    c504:	bf08      	it	eq
    c506:	4770      	bxeq	lr
    c508:	f011 0f02 	tst.w	r1, #2
    c50c:	d0bf      	beq.n	c48e <strcpy+0x12>
    c50e:	f831 2b02 	ldrh.w	r2, [r1], #2
    c512:	f012 0fff 	tst.w	r2, #255	; 0xff
    c516:	bf16      	itet	ne
    c518:	f82c 2b02 	strhne.w	r2, [ip], #2
    c51c:	f88c 2000 	strbeq.w	r2, [ip]
    c520:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    c524:	d1b3      	bne.n	c48e <strcpy+0x12>
    c526:	4770      	bx	lr
    c528:	f811 2b01 	ldrb.w	r2, [r1], #1
    c52c:	f80c 2b01 	strb.w	r2, [ip], #1
    c530:	2a00      	cmp	r2, #0
    c532:	d1f9      	bne.n	c528 <strcpy+0xac>
    c534:	4770      	bx	lr
    c536:	bf00      	nop
	...

0000c540 <strlen>:
    c540:	f890 f000 	pld	[r0]
    c544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c548:	f020 0107 	bic.w	r1, r0, #7
    c54c:	f06f 0c00 	mvn.w	ip, #0
    c550:	f010 0407 	ands.w	r4, r0, #7
    c554:	f891 f020 	pld	[r1, #32]
    c558:	f040 8049 	bne.w	c5ee <strlen+0xae>
    c55c:	f04f 0400 	mov.w	r4, #0
    c560:	f06f 0007 	mvn.w	r0, #7
    c564:	e9d1 2300 	ldrd	r2, r3, [r1]
    c568:	f891 f040 	pld	[r1, #64]	; 0x40
    c56c:	f100 0008 	add.w	r0, r0, #8
    c570:	fa82 f24c 	uadd8	r2, r2, ip
    c574:	faa4 f28c 	sel	r2, r4, ip
    c578:	fa83 f34c 	uadd8	r3, r3, ip
    c57c:	faa2 f38c 	sel	r3, r2, ip
    c580:	bb4b      	cbnz	r3, c5d6 <strlen+0x96>
    c582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c586:	fa82 f24c 	uadd8	r2, r2, ip
    c58a:	f100 0008 	add.w	r0, r0, #8
    c58e:	faa4 f28c 	sel	r2, r4, ip
    c592:	fa83 f34c 	uadd8	r3, r3, ip
    c596:	faa2 f38c 	sel	r3, r2, ip
    c59a:	b9e3      	cbnz	r3, c5d6 <strlen+0x96>
    c59c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c5a0:	fa82 f24c 	uadd8	r2, r2, ip
    c5a4:	f100 0008 	add.w	r0, r0, #8
    c5a8:	faa4 f28c 	sel	r2, r4, ip
    c5ac:	fa83 f34c 	uadd8	r3, r3, ip
    c5b0:	faa2 f38c 	sel	r3, r2, ip
    c5b4:	b97b      	cbnz	r3, c5d6 <strlen+0x96>
    c5b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c5ba:	f101 0120 	add.w	r1, r1, #32
    c5be:	fa82 f24c 	uadd8	r2, r2, ip
    c5c2:	f100 0008 	add.w	r0, r0, #8
    c5c6:	faa4 f28c 	sel	r2, r4, ip
    c5ca:	fa83 f34c 	uadd8	r3, r3, ip
    c5ce:	faa2 f38c 	sel	r3, r2, ip
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d0c6      	beq.n	c564 <strlen+0x24>
    c5d6:	2a00      	cmp	r2, #0
    c5d8:	bf04      	itt	eq
    c5da:	3004      	addeq	r0, #4
    c5dc:	461a      	moveq	r2, r3
    c5de:	ba12      	rev	r2, r2
    c5e0:	fab2 f282 	clz	r2, r2
    c5e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c5e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c5ec:	4770      	bx	lr
    c5ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    c5f2:	f004 0503 	and.w	r5, r4, #3
    c5f6:	f1c4 0000 	rsb	r0, r4, #0
    c5fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c5fe:	f014 0f04 	tst.w	r4, #4
    c602:	f891 f040 	pld	[r1, #64]	; 0x40
    c606:	fa0c f505 	lsl.w	r5, ip, r5
    c60a:	ea62 0205 	orn	r2, r2, r5
    c60e:	bf1c      	itt	ne
    c610:	ea63 0305 	ornne	r3, r3, r5
    c614:	4662      	movne	r2, ip
    c616:	f04f 0400 	mov.w	r4, #0
    c61a:	e7a9      	b.n	c570 <strlen+0x30>

0000c61c <__register_exitproc>:
    c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c620:	f8df a07c 	ldr.w	sl, [pc, #124]	; c6a0 <__register_exitproc+0x84>
    c624:	4606      	mov	r6, r0
    c626:	f8da 0000 	ldr.w	r0, [sl]
    c62a:	4698      	mov	r8, r3
    c62c:	460f      	mov	r7, r1
    c62e:	4691      	mov	r9, r2
    c630:	f7ff fdb0 	bl	c194 <__retarget_lock_acquire_recursive>
    c634:	4b18      	ldr	r3, [pc, #96]	; (c698 <__register_exitproc+0x7c>)
    c636:	681c      	ldr	r4, [r3, #0]
    c638:	b324      	cbz	r4, c684 <__register_exitproc+0x68>
    c63a:	6865      	ldr	r5, [r4, #4]
    c63c:	2d1f      	cmp	r5, #31
    c63e:	dc24      	bgt.n	c68a <__register_exitproc+0x6e>
    c640:	b95e      	cbnz	r6, c65a <__register_exitproc+0x3e>
    c642:	1c6b      	adds	r3, r5, #1
    c644:	3502      	adds	r5, #2
    c646:	f8da 0000 	ldr.w	r0, [sl]
    c64a:	6063      	str	r3, [r4, #4]
    c64c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c650:	f7ff fda2 	bl	c198 <__retarget_lock_release_recursive>
    c654:	2000      	movs	r0, #0
    c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c65a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c65e:	2301      	movs	r3, #1
    c660:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c664:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c668:	40ab      	lsls	r3, r5
    c66a:	431a      	orrs	r2, r3
    c66c:	2e02      	cmp	r6, #2
    c66e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c672:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c676:	d1e4      	bne.n	c642 <__register_exitproc+0x26>
    c678:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c67c:	431a      	orrs	r2, r3
    c67e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c682:	e7de      	b.n	c642 <__register_exitproc+0x26>
    c684:	4c05      	ldr	r4, [pc, #20]	; (c69c <__register_exitproc+0x80>)
    c686:	601c      	str	r4, [r3, #0]
    c688:	e7d7      	b.n	c63a <__register_exitproc+0x1e>
    c68a:	f8da 0000 	ldr.w	r0, [sl]
    c68e:	f7ff fd83 	bl	c198 <__retarget_lock_release_recursive>
    c692:	f04f 30ff 	mov.w	r0, #4294967295
    c696:	e7de      	b.n	c656 <__register_exitproc+0x3a>
    c698:	200050b8 	.word	0x200050b8
    c69c:	200050bc 	.word	0x200050bc
    c6a0:	20004408 	.word	0x20004408

0000c6a4 <_malloc_trim_r>:
    c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6a6:	4f24      	ldr	r7, [pc, #144]	; (c738 <_malloc_trim_r+0x94>)
    c6a8:	460c      	mov	r4, r1
    c6aa:	4606      	mov	r6, r0
    c6ac:	f7fe fe56 	bl	b35c <__malloc_lock>
    c6b0:	68bb      	ldr	r3, [r7, #8]
    c6b2:	685d      	ldr	r5, [r3, #4]
    c6b4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c6b8:	310f      	adds	r1, #15
    c6ba:	f025 0503 	bic.w	r5, r5, #3
    c6be:	194b      	adds	r3, r1, r5
    c6c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c6c4:	f023 030f 	bic.w	r3, r3, #15
    c6c8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c6cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c6d0:	db07      	blt.n	c6e2 <_malloc_trim_r+0x3e>
    c6d2:	2100      	movs	r1, #0
    c6d4:	4630      	mov	r0, r6
    c6d6:	f7ff fd07 	bl	c0e8 <_sbrk_r>
    c6da:	68bb      	ldr	r3, [r7, #8]
    c6dc:	442b      	add	r3, r5
    c6de:	4298      	cmp	r0, r3
    c6e0:	d004      	beq.n	c6ec <_malloc_trim_r+0x48>
    c6e2:	4630      	mov	r0, r6
    c6e4:	f7fe fe40 	bl	b368 <__malloc_unlock>
    c6e8:	2000      	movs	r0, #0
    c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6ec:	4261      	negs	r1, r4
    c6ee:	4630      	mov	r0, r6
    c6f0:	f7ff fcfa 	bl	c0e8 <_sbrk_r>
    c6f4:	3001      	adds	r0, #1
    c6f6:	d00d      	beq.n	c714 <_malloc_trim_r+0x70>
    c6f8:	4a10      	ldr	r2, [pc, #64]	; (c73c <_malloc_trim_r+0x98>)
    c6fa:	68bb      	ldr	r3, [r7, #8]
    c6fc:	1b2d      	subs	r5, r5, r4
    c6fe:	f045 0501 	orr.w	r5, r5, #1
    c702:	605d      	str	r5, [r3, #4]
    c704:	6813      	ldr	r3, [r2, #0]
    c706:	4630      	mov	r0, r6
    c708:	1b1b      	subs	r3, r3, r4
    c70a:	6013      	str	r3, [r2, #0]
    c70c:	f7fe fe2c 	bl	b368 <__malloc_unlock>
    c710:	2001      	movs	r0, #1
    c712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c714:	2100      	movs	r1, #0
    c716:	4630      	mov	r0, r6
    c718:	f7ff fce6 	bl	c0e8 <_sbrk_r>
    c71c:	68ba      	ldr	r2, [r7, #8]
    c71e:	1a83      	subs	r3, r0, r2
    c720:	2b0f      	cmp	r3, #15
    c722:	ddde      	ble.n	c6e2 <_malloc_trim_r+0x3e>
    c724:	f043 0301 	orr.w	r3, r3, #1
    c728:	6053      	str	r3, [r2, #4]
    c72a:	4b05      	ldr	r3, [pc, #20]	; (c740 <_malloc_trim_r+0x9c>)
    c72c:	4903      	ldr	r1, [pc, #12]	; (c73c <_malloc_trim_r+0x98>)
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	1ac0      	subs	r0, r0, r3
    c732:	6008      	str	r0, [r1, #0]
    c734:	e7d5      	b.n	c6e2 <_malloc_trim_r+0x3e>
    c736:	bf00      	nop
    c738:	20004580 	.word	0x20004580
    c73c:	20005258 	.word	0x20005258
    c740:	20004988 	.word	0x20004988

0000c744 <_free_r>:
    c744:	2900      	cmp	r1, #0
    c746:	d061      	beq.n	c80c <_free_r+0xc8>
    c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c74a:	460c      	mov	r4, r1
    c74c:	4606      	mov	r6, r0
    c74e:	f7fe fe05 	bl	b35c <__malloc_lock>
    c752:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c756:	4f7b      	ldr	r7, [pc, #492]	; (c944 <_free_r+0x200>)
    c758:	f1a4 0508 	sub.w	r5, r4, #8
    c75c:	f022 0101 	bic.w	r1, r2, #1
    c760:	eb05 0c01 	add.w	ip, r5, r1
    c764:	68b8      	ldr	r0, [r7, #8]
    c766:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c76a:	4560      	cmp	r0, ip
    c76c:	f023 0303 	bic.w	r3, r3, #3
    c770:	f000 808b 	beq.w	c88a <_free_r+0x146>
    c774:	07d2      	lsls	r2, r2, #31
    c776:	f8cc 3004 	str.w	r3, [ip, #4]
    c77a:	d432      	bmi.n	c7e2 <_free_r+0x9e>
    c77c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c780:	1aad      	subs	r5, r5, r2
    c782:	4411      	add	r1, r2
    c784:	68aa      	ldr	r2, [r5, #8]
    c786:	f107 0008 	add.w	r0, r7, #8
    c78a:	4282      	cmp	r2, r0
    c78c:	d06a      	beq.n	c864 <_free_r+0x120>
    c78e:	eb0c 0403 	add.w	r4, ip, r3
    c792:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c796:	68ec      	ldr	r4, [r5, #12]
    c798:	60d4      	str	r4, [r2, #12]
    c79a:	f01e 0f01 	tst.w	lr, #1
    c79e:	60a2      	str	r2, [r4, #8]
    c7a0:	f000 8097 	beq.w	c8d2 <_free_r+0x18e>
    c7a4:	f041 0301 	orr.w	r3, r1, #1
    c7a8:	606b      	str	r3, [r5, #4]
    c7aa:	f8cc 1000 	str.w	r1, [ip]
    c7ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c7b2:	d235      	bcs.n	c820 <_free_r+0xdc>
    c7b4:	6878      	ldr	r0, [r7, #4]
    c7b6:	08cb      	lsrs	r3, r1, #3
    c7b8:	2201      	movs	r2, #1
    c7ba:	0949      	lsrs	r1, r1, #5
    c7bc:	3301      	adds	r3, #1
    c7be:	408a      	lsls	r2, r1
    c7c0:	4302      	orrs	r2, r0
    c7c2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c7c6:	607a      	str	r2, [r7, #4]
    c7c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c7cc:	3a08      	subs	r2, #8
    c7ce:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c7d2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c7d6:	60cd      	str	r5, [r1, #12]
    c7d8:	4630      	mov	r0, r6
    c7da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c7de:	f7fe bdc3 	b.w	b368 <__malloc_unlock>
    c7e2:	eb0c 0203 	add.w	r2, ip, r3
    c7e6:	6852      	ldr	r2, [r2, #4]
    c7e8:	07d0      	lsls	r0, r2, #31
    c7ea:	d410      	bmi.n	c80e <_free_r+0xca>
    c7ec:	4419      	add	r1, r3
    c7ee:	f107 0008 	add.w	r0, r7, #8
    c7f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c7f6:	4283      	cmp	r3, r0
    c7f8:	d073      	beq.n	c8e2 <_free_r+0x19e>
    c7fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c7fe:	60da      	str	r2, [r3, #12]
    c800:	6093      	str	r3, [r2, #8]
    c802:	f041 0301 	orr.w	r3, r1, #1
    c806:	606b      	str	r3, [r5, #4]
    c808:	5069      	str	r1, [r5, r1]
    c80a:	e7d0      	b.n	c7ae <_free_r+0x6a>
    c80c:	4770      	bx	lr
    c80e:	f041 0301 	orr.w	r3, r1, #1
    c812:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c816:	f844 3c04 	str.w	r3, [r4, #-4]
    c81a:	f8cc 1000 	str.w	r1, [ip]
    c81e:	d3c9      	bcc.n	c7b4 <_free_r+0x70>
    c820:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c824:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c828:	d248      	bcs.n	c8bc <_free_r+0x178>
    c82a:	098b      	lsrs	r3, r1, #6
    c82c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c830:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c834:	00c3      	lsls	r3, r0, #3
    c836:	18f8      	adds	r0, r7, r3
    c838:	58fb      	ldr	r3, [r7, r3]
    c83a:	3808      	subs	r0, #8
    c83c:	4298      	cmp	r0, r3
    c83e:	d059      	beq.n	c8f4 <_free_r+0x1b0>
    c840:	685a      	ldr	r2, [r3, #4]
    c842:	f022 0203 	bic.w	r2, r2, #3
    c846:	428a      	cmp	r2, r1
    c848:	d902      	bls.n	c850 <_free_r+0x10c>
    c84a:	689b      	ldr	r3, [r3, #8]
    c84c:	4298      	cmp	r0, r3
    c84e:	d1f7      	bne.n	c840 <_free_r+0xfc>
    c850:	68d8      	ldr	r0, [r3, #12]
    c852:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c856:	6085      	str	r5, [r0, #8]
    c858:	60dd      	str	r5, [r3, #12]
    c85a:	4630      	mov	r0, r6
    c85c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c860:	f7fe bd82 	b.w	b368 <__malloc_unlock>
    c864:	eb0c 0203 	add.w	r2, ip, r3
    c868:	6852      	ldr	r2, [r2, #4]
    c86a:	07d2      	lsls	r2, r2, #31
    c86c:	d463      	bmi.n	c936 <_free_r+0x1f2>
    c86e:	440b      	add	r3, r1
    c870:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c874:	60ca      	str	r2, [r1, #12]
    c876:	6091      	str	r1, [r2, #8]
    c878:	f043 0201 	orr.w	r2, r3, #1
    c87c:	606a      	str	r2, [r5, #4]
    c87e:	4630      	mov	r0, r6
    c880:	50eb      	str	r3, [r5, r3]
    c882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c886:	f7fe bd6f 	b.w	b368 <__malloc_unlock>
    c88a:	440b      	add	r3, r1
    c88c:	07d1      	lsls	r1, r2, #31
    c88e:	d407      	bmi.n	c8a0 <_free_r+0x15c>
    c890:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c894:	1aad      	subs	r5, r5, r2
    c896:	4413      	add	r3, r2
    c898:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c89c:	60ca      	str	r2, [r1, #12]
    c89e:	6091      	str	r1, [r2, #8]
    c8a0:	f043 0201 	orr.w	r2, r3, #1
    c8a4:	606a      	str	r2, [r5, #4]
    c8a6:	4a28      	ldr	r2, [pc, #160]	; (c948 <_free_r+0x204>)
    c8a8:	60bd      	str	r5, [r7, #8]
    c8aa:	6812      	ldr	r2, [r2, #0]
    c8ac:	429a      	cmp	r2, r3
    c8ae:	d893      	bhi.n	c7d8 <_free_r+0x94>
    c8b0:	4b26      	ldr	r3, [pc, #152]	; (c94c <_free_r+0x208>)
    c8b2:	4630      	mov	r0, r6
    c8b4:	6819      	ldr	r1, [r3, #0]
    c8b6:	f7ff fef5 	bl	c6a4 <_malloc_trim_r>
    c8ba:	e78d      	b.n	c7d8 <_free_r+0x94>
    c8bc:	2b14      	cmp	r3, #20
    c8be:	d90a      	bls.n	c8d6 <_free_r+0x192>
    c8c0:	2b54      	cmp	r3, #84	; 0x54
    c8c2:	d81f      	bhi.n	c904 <_free_r+0x1c0>
    c8c4:	0b0b      	lsrs	r3, r1, #12
    c8c6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c8ca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c8ce:	00c3      	lsls	r3, r0, #3
    c8d0:	e7b1      	b.n	c836 <_free_r+0xf2>
    c8d2:	4419      	add	r1, r3
    c8d4:	e78d      	b.n	c7f2 <_free_r+0xae>
    c8d6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c8da:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c8de:	00c3      	lsls	r3, r0, #3
    c8e0:	e7a9      	b.n	c836 <_free_r+0xf2>
    c8e2:	f041 0301 	orr.w	r3, r1, #1
    c8e6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c8ea:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c8ee:	606b      	str	r3, [r5, #4]
    c8f0:	5069      	str	r1, [r5, r1]
    c8f2:	e771      	b.n	c7d8 <_free_r+0x94>
    c8f4:	6879      	ldr	r1, [r7, #4]
    c8f6:	1092      	asrs	r2, r2, #2
    c8f8:	2401      	movs	r4, #1
    c8fa:	fa04 f202 	lsl.w	r2, r4, r2
    c8fe:	430a      	orrs	r2, r1
    c900:	607a      	str	r2, [r7, #4]
    c902:	e7a6      	b.n	c852 <_free_r+0x10e>
    c904:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c908:	d806      	bhi.n	c918 <_free_r+0x1d4>
    c90a:	0bcb      	lsrs	r3, r1, #15
    c90c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c910:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c914:	00c3      	lsls	r3, r0, #3
    c916:	e78e      	b.n	c836 <_free_r+0xf2>
    c918:	f240 5254 	movw	r2, #1364	; 0x554
    c91c:	4293      	cmp	r3, r2
    c91e:	d806      	bhi.n	c92e <_free_r+0x1ea>
    c920:	0c8b      	lsrs	r3, r1, #18
    c922:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c926:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c92a:	00c3      	lsls	r3, r0, #3
    c92c:	e783      	b.n	c836 <_free_r+0xf2>
    c92e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c932:	227e      	movs	r2, #126	; 0x7e
    c934:	e77f      	b.n	c836 <_free_r+0xf2>
    c936:	f041 0301 	orr.w	r3, r1, #1
    c93a:	606b      	str	r3, [r5, #4]
    c93c:	f8cc 1000 	str.w	r1, [ip]
    c940:	e74a      	b.n	c7d8 <_free_r+0x94>
    c942:	bf00      	nop
    c944:	20004580 	.word	0x20004580
    c948:	2000498c 	.word	0x2000498c
    c94c:	20005288 	.word	0x20005288

0000c950 <__ascii_mbtowc>:
    c950:	b082      	sub	sp, #8
    c952:	b149      	cbz	r1, c968 <__ascii_mbtowc+0x18>
    c954:	b15a      	cbz	r2, c96e <__ascii_mbtowc+0x1e>
    c956:	b16b      	cbz	r3, c974 <__ascii_mbtowc+0x24>
    c958:	7813      	ldrb	r3, [r2, #0]
    c95a:	600b      	str	r3, [r1, #0]
    c95c:	7812      	ldrb	r2, [r2, #0]
    c95e:	1e10      	subs	r0, r2, #0
    c960:	bf18      	it	ne
    c962:	2001      	movne	r0, #1
    c964:	b002      	add	sp, #8
    c966:	4770      	bx	lr
    c968:	a901      	add	r1, sp, #4
    c96a:	2a00      	cmp	r2, #0
    c96c:	d1f3      	bne.n	c956 <__ascii_mbtowc+0x6>
    c96e:	4610      	mov	r0, r2
    c970:	b002      	add	sp, #8
    c972:	4770      	bx	lr
    c974:	f06f 0001 	mvn.w	r0, #1
    c978:	e7f4      	b.n	c964 <__ascii_mbtowc+0x14>
    c97a:	bf00      	nop

0000c97c <_Balloc>:
    c97c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c97e:	b570      	push	{r4, r5, r6, lr}
    c980:	4605      	mov	r5, r0
    c982:	460c      	mov	r4, r1
    c984:	b14b      	cbz	r3, c99a <_Balloc+0x1e>
    c986:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c98a:	b180      	cbz	r0, c9ae <_Balloc+0x32>
    c98c:	6802      	ldr	r2, [r0, #0]
    c98e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c992:	2300      	movs	r3, #0
    c994:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c998:	bd70      	pop	{r4, r5, r6, pc}
    c99a:	2221      	movs	r2, #33	; 0x21
    c99c:	2104      	movs	r1, #4
    c99e:	f002 fb33 	bl	f008 <_calloc_r>
    c9a2:	4603      	mov	r3, r0
    c9a4:	6468      	str	r0, [r5, #68]	; 0x44
    c9a6:	2800      	cmp	r0, #0
    c9a8:	d1ed      	bne.n	c986 <_Balloc+0xa>
    c9aa:	2000      	movs	r0, #0
    c9ac:	bd70      	pop	{r4, r5, r6, pc}
    c9ae:	2101      	movs	r1, #1
    c9b0:	fa01 f604 	lsl.w	r6, r1, r4
    c9b4:	1d72      	adds	r2, r6, #5
    c9b6:	0092      	lsls	r2, r2, #2
    c9b8:	4628      	mov	r0, r5
    c9ba:	f002 fb25 	bl	f008 <_calloc_r>
    c9be:	2800      	cmp	r0, #0
    c9c0:	d0f3      	beq.n	c9aa <_Balloc+0x2e>
    c9c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c9c6:	e7e4      	b.n	c992 <_Balloc+0x16>

0000c9c8 <_Bfree>:
    c9c8:	b131      	cbz	r1, c9d8 <_Bfree+0x10>
    c9ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c9cc:	684a      	ldr	r2, [r1, #4]
    c9ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c9d2:	6008      	str	r0, [r1, #0]
    c9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c9d8:	4770      	bx	lr
    c9da:	bf00      	nop

0000c9dc <__multadd>:
    c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9e0:	690e      	ldr	r6, [r1, #16]
    c9e2:	4680      	mov	r8, r0
    c9e4:	460f      	mov	r7, r1
    c9e6:	461d      	mov	r5, r3
    c9e8:	f101 0e14 	add.w	lr, r1, #20
    c9ec:	2000      	movs	r0, #0
    c9ee:	f8de 1000 	ldr.w	r1, [lr]
    c9f2:	b28c      	uxth	r4, r1
    c9f4:	fb02 5304 	mla	r3, r2, r4, r5
    c9f8:	0c09      	lsrs	r1, r1, #16
    c9fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c9fe:	fb02 cc01 	mla	ip, r2, r1, ip
    ca02:	3001      	adds	r0, #1
    ca04:	b29c      	uxth	r4, r3
    ca06:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    ca0a:	4286      	cmp	r6, r0
    ca0c:	f84e 4b04 	str.w	r4, [lr], #4
    ca10:	ea4f 451c 	mov.w	r5, ip, lsr #16
    ca14:	dceb      	bgt.n	c9ee <__multadd+0x12>
    ca16:	b13d      	cbz	r5, ca28 <__multadd+0x4c>
    ca18:	68bb      	ldr	r3, [r7, #8]
    ca1a:	42b3      	cmp	r3, r6
    ca1c:	dd07      	ble.n	ca2e <__multadd+0x52>
    ca1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ca22:	3601      	adds	r6, #1
    ca24:	615d      	str	r5, [r3, #20]
    ca26:	613e      	str	r6, [r7, #16]
    ca28:	4638      	mov	r0, r7
    ca2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca2e:	6879      	ldr	r1, [r7, #4]
    ca30:	4640      	mov	r0, r8
    ca32:	3101      	adds	r1, #1
    ca34:	f7ff ffa2 	bl	c97c <_Balloc>
    ca38:	4604      	mov	r4, r0
    ca3a:	b1b0      	cbz	r0, ca6a <__multadd+0x8e>
    ca3c:	693a      	ldr	r2, [r7, #16]
    ca3e:	3202      	adds	r2, #2
    ca40:	f107 010c 	add.w	r1, r7, #12
    ca44:	0092      	lsls	r2, r2, #2
    ca46:	300c      	adds	r0, #12
    ca48:	f7fc fc12 	bl	9270 <memcpy>
    ca4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ca50:	687a      	ldr	r2, [r7, #4]
    ca52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ca56:	6039      	str	r1, [r7, #0]
    ca58:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    ca5c:	4627      	mov	r7, r4
    ca5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    ca62:	3601      	adds	r6, #1
    ca64:	615d      	str	r5, [r3, #20]
    ca66:	613e      	str	r6, [r7, #16]
    ca68:	e7de      	b.n	ca28 <__multadd+0x4c>
    ca6a:	4b03      	ldr	r3, [pc, #12]	; (ca78 <__multadd+0x9c>)
    ca6c:	4803      	ldr	r0, [pc, #12]	; (ca7c <__multadd+0xa0>)
    ca6e:	4622      	mov	r2, r4
    ca70:	21ba      	movs	r1, #186	; 0xba
    ca72:	f002 faa9 	bl	efc8 <__assert_func>
    ca76:	bf00      	nop
    ca78:	20000adc 	.word	0x20000adc
    ca7c:	20000af0 	.word	0x20000af0

0000ca80 <__hi0bits>:
    ca80:	0c03      	lsrs	r3, r0, #16
    ca82:	041b      	lsls	r3, r3, #16
    ca84:	b9d3      	cbnz	r3, cabc <__hi0bits+0x3c>
    ca86:	0400      	lsls	r0, r0, #16
    ca88:	2310      	movs	r3, #16
    ca8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    ca8e:	bf04      	itt	eq
    ca90:	0200      	lsleq	r0, r0, #8
    ca92:	3308      	addeq	r3, #8
    ca94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    ca98:	bf04      	itt	eq
    ca9a:	0100      	lsleq	r0, r0, #4
    ca9c:	3304      	addeq	r3, #4
    ca9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    caa2:	bf04      	itt	eq
    caa4:	0080      	lsleq	r0, r0, #2
    caa6:	3302      	addeq	r3, #2
    caa8:	2800      	cmp	r0, #0
    caaa:	db05      	blt.n	cab8 <__hi0bits+0x38>
    caac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    cab0:	f103 0301 	add.w	r3, r3, #1
    cab4:	bf08      	it	eq
    cab6:	2320      	moveq	r3, #32
    cab8:	4618      	mov	r0, r3
    caba:	4770      	bx	lr
    cabc:	2300      	movs	r3, #0
    cabe:	e7e4      	b.n	ca8a <__hi0bits+0xa>

0000cac0 <__lo0bits>:
    cac0:	6803      	ldr	r3, [r0, #0]
    cac2:	f013 0207 	ands.w	r2, r3, #7
    cac6:	d008      	beq.n	cada <__lo0bits+0x1a>
    cac8:	07d9      	lsls	r1, r3, #31
    caca:	d41f      	bmi.n	cb0c <__lo0bits+0x4c>
    cacc:	079a      	lsls	r2, r3, #30
    cace:	d522      	bpl.n	cb16 <__lo0bits+0x56>
    cad0:	085b      	lsrs	r3, r3, #1
    cad2:	6003      	str	r3, [r0, #0]
    cad4:	2201      	movs	r2, #1
    cad6:	4610      	mov	r0, r2
    cad8:	4770      	bx	lr
    cada:	b299      	uxth	r1, r3
    cadc:	b909      	cbnz	r1, cae2 <__lo0bits+0x22>
    cade:	0c1b      	lsrs	r3, r3, #16
    cae0:	2210      	movs	r2, #16
    cae2:	b2d9      	uxtb	r1, r3
    cae4:	b909      	cbnz	r1, caea <__lo0bits+0x2a>
    cae6:	3208      	adds	r2, #8
    cae8:	0a1b      	lsrs	r3, r3, #8
    caea:	0719      	lsls	r1, r3, #28
    caec:	bf04      	itt	eq
    caee:	091b      	lsreq	r3, r3, #4
    caf0:	3204      	addeq	r2, #4
    caf2:	0799      	lsls	r1, r3, #30
    caf4:	bf04      	itt	eq
    caf6:	089b      	lsreq	r3, r3, #2
    caf8:	3202      	addeq	r2, #2
    cafa:	07d9      	lsls	r1, r3, #31
    cafc:	d403      	bmi.n	cb06 <__lo0bits+0x46>
    cafe:	085b      	lsrs	r3, r3, #1
    cb00:	f102 0201 	add.w	r2, r2, #1
    cb04:	d005      	beq.n	cb12 <__lo0bits+0x52>
    cb06:	6003      	str	r3, [r0, #0]
    cb08:	4610      	mov	r0, r2
    cb0a:	4770      	bx	lr
    cb0c:	2200      	movs	r2, #0
    cb0e:	4610      	mov	r0, r2
    cb10:	4770      	bx	lr
    cb12:	2220      	movs	r2, #32
    cb14:	e7df      	b.n	cad6 <__lo0bits+0x16>
    cb16:	089b      	lsrs	r3, r3, #2
    cb18:	2202      	movs	r2, #2
    cb1a:	6003      	str	r3, [r0, #0]
    cb1c:	4610      	mov	r0, r2
    cb1e:	4770      	bx	lr

0000cb20 <__i2b>:
    cb20:	b538      	push	{r3, r4, r5, lr}
    cb22:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cb24:	4604      	mov	r4, r0
    cb26:	460d      	mov	r5, r1
    cb28:	b14b      	cbz	r3, cb3e <__i2b+0x1e>
    cb2a:	6858      	ldr	r0, [r3, #4]
    cb2c:	b1b0      	cbz	r0, cb5c <__i2b+0x3c>
    cb2e:	6802      	ldr	r2, [r0, #0]
    cb30:	605a      	str	r2, [r3, #4]
    cb32:	2200      	movs	r2, #0
    cb34:	2301      	movs	r3, #1
    cb36:	e9c0 3504 	strd	r3, r5, [r0, #16]
    cb3a:	60c2      	str	r2, [r0, #12]
    cb3c:	bd38      	pop	{r3, r4, r5, pc}
    cb3e:	2221      	movs	r2, #33	; 0x21
    cb40:	2104      	movs	r1, #4
    cb42:	f002 fa61 	bl	f008 <_calloc_r>
    cb46:	4603      	mov	r3, r0
    cb48:	6460      	str	r0, [r4, #68]	; 0x44
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d1ed      	bne.n	cb2a <__i2b+0xa>
    cb4e:	4b09      	ldr	r3, [pc, #36]	; (cb74 <__i2b+0x54>)
    cb50:	4809      	ldr	r0, [pc, #36]	; (cb78 <__i2b+0x58>)
    cb52:	2200      	movs	r2, #0
    cb54:	f240 1145 	movw	r1, #325	; 0x145
    cb58:	f002 fa36 	bl	efc8 <__assert_func>
    cb5c:	221c      	movs	r2, #28
    cb5e:	2101      	movs	r1, #1
    cb60:	4620      	mov	r0, r4
    cb62:	f002 fa51 	bl	f008 <_calloc_r>
    cb66:	2800      	cmp	r0, #0
    cb68:	d0f1      	beq.n	cb4e <__i2b+0x2e>
    cb6a:	2201      	movs	r2, #1
    cb6c:	2302      	movs	r3, #2
    cb6e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    cb72:	e7de      	b.n	cb32 <__i2b+0x12>
    cb74:	20000adc 	.word	0x20000adc
    cb78:	20000af0 	.word	0x20000af0

0000cb7c <__multiply>:
    cb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb80:	690e      	ldr	r6, [r1, #16]
    cb82:	6915      	ldr	r5, [r2, #16]
    cb84:	42ae      	cmp	r6, r5
    cb86:	b085      	sub	sp, #20
    cb88:	4688      	mov	r8, r1
    cb8a:	4614      	mov	r4, r2
    cb8c:	db05      	blt.n	cb9a <__multiply+0x1e>
    cb8e:	462a      	mov	r2, r5
    cb90:	4623      	mov	r3, r4
    cb92:	4635      	mov	r5, r6
    cb94:	460c      	mov	r4, r1
    cb96:	4616      	mov	r6, r2
    cb98:	4698      	mov	r8, r3
    cb9a:	68a3      	ldr	r3, [r4, #8]
    cb9c:	6861      	ldr	r1, [r4, #4]
    cb9e:	19af      	adds	r7, r5, r6
    cba0:	42bb      	cmp	r3, r7
    cba2:	bfb8      	it	lt
    cba4:	3101      	addlt	r1, #1
    cba6:	f7ff fee9 	bl	c97c <_Balloc>
    cbaa:	9001      	str	r0, [sp, #4]
    cbac:	2800      	cmp	r0, #0
    cbae:	f000 8087 	beq.w	ccc0 <__multiply+0x144>
    cbb2:	9b01      	ldr	r3, [sp, #4]
    cbb4:	f103 0914 	add.w	r9, r3, #20
    cbb8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    cbbc:	45d1      	cmp	r9, sl
    cbbe:	d205      	bcs.n	cbcc <__multiply+0x50>
    cbc0:	464b      	mov	r3, r9
    cbc2:	2200      	movs	r2, #0
    cbc4:	f843 2b04 	str.w	r2, [r3], #4
    cbc8:	459a      	cmp	sl, r3
    cbca:	d8fb      	bhi.n	cbc4 <__multiply+0x48>
    cbcc:	f108 0814 	add.w	r8, r8, #20
    cbd0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    cbd4:	f104 0314 	add.w	r3, r4, #20
    cbd8:	45d8      	cmp	r8, fp
    cbda:	461a      	mov	r2, r3
    cbdc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    cbe0:	d25f      	bcs.n	cca2 <__multiply+0x126>
    cbe2:	1b2b      	subs	r3, r5, r4
    cbe4:	3b15      	subs	r3, #21
    cbe6:	f023 0303 	bic.w	r3, r3, #3
    cbea:	3304      	adds	r3, #4
    cbec:	3415      	adds	r4, #21
    cbee:	42a5      	cmp	r5, r4
    cbf0:	bf38      	it	cc
    cbf2:	2304      	movcc	r3, #4
    cbf4:	e9cd a702 	strd	sl, r7, [sp, #8]
    cbf8:	46ac      	mov	ip, r5
    cbfa:	461f      	mov	r7, r3
    cbfc:	4692      	mov	sl, r2
    cbfe:	e005      	b.n	cc0c <__multiply+0x90>
    cc00:	0c09      	lsrs	r1, r1, #16
    cc02:	d129      	bne.n	cc58 <__multiply+0xdc>
    cc04:	45c3      	cmp	fp, r8
    cc06:	f109 0904 	add.w	r9, r9, #4
    cc0a:	d948      	bls.n	cc9e <__multiply+0x122>
    cc0c:	f858 1b04 	ldr.w	r1, [r8], #4
    cc10:	b28d      	uxth	r5, r1
    cc12:	2d00      	cmp	r5, #0
    cc14:	d0f4      	beq.n	cc00 <__multiply+0x84>
    cc16:	4656      	mov	r6, sl
    cc18:	464c      	mov	r4, r9
    cc1a:	2300      	movs	r3, #0
    cc1c:	f856 1b04 	ldr.w	r1, [r6], #4
    cc20:	6822      	ldr	r2, [r4, #0]
    cc22:	fa1f fe81 	uxth.w	lr, r1
    cc26:	b290      	uxth	r0, r2
    cc28:	0c09      	lsrs	r1, r1, #16
    cc2a:	fb05 000e 	mla	r0, r5, lr, r0
    cc2e:	0c12      	lsrs	r2, r2, #16
    cc30:	4403      	add	r3, r0
    cc32:	fb05 2201 	mla	r2, r5, r1, r2
    cc36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cc3a:	b29b      	uxth	r3, r3
    cc3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cc40:	45b4      	cmp	ip, r6
    cc42:	f844 3b04 	str.w	r3, [r4], #4
    cc46:	ea4f 4312 	mov.w	r3, r2, lsr #16
    cc4a:	d8e7      	bhi.n	cc1c <__multiply+0xa0>
    cc4c:	f849 3007 	str.w	r3, [r9, r7]
    cc50:	f858 1c04 	ldr.w	r1, [r8, #-4]
    cc54:	0c09      	lsrs	r1, r1, #16
    cc56:	d0d5      	beq.n	cc04 <__multiply+0x88>
    cc58:	f8d9 3000 	ldr.w	r3, [r9]
    cc5c:	4650      	mov	r0, sl
    cc5e:	461a      	mov	r2, r3
    cc60:	464c      	mov	r4, r9
    cc62:	2600      	movs	r6, #0
    cc64:	8805      	ldrh	r5, [r0, #0]
    cc66:	0c12      	lsrs	r2, r2, #16
    cc68:	fb01 2205 	mla	r2, r1, r5, r2
    cc6c:	4416      	add	r6, r2
    cc6e:	b29b      	uxth	r3, r3
    cc70:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    cc74:	f844 3b04 	str.w	r3, [r4], #4
    cc78:	f850 5b04 	ldr.w	r5, [r0], #4
    cc7c:	6822      	ldr	r2, [r4, #0]
    cc7e:	0c2d      	lsrs	r5, r5, #16
    cc80:	b293      	uxth	r3, r2
    cc82:	fb01 3305 	mla	r3, r1, r5, r3
    cc86:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    cc8a:	4584      	cmp	ip, r0
    cc8c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    cc90:	d8e8      	bhi.n	cc64 <__multiply+0xe8>
    cc92:	45c3      	cmp	fp, r8
    cc94:	f849 3007 	str.w	r3, [r9, r7]
    cc98:	f109 0904 	add.w	r9, r9, #4
    cc9c:	d8b6      	bhi.n	cc0c <__multiply+0x90>
    cc9e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    cca2:	2f00      	cmp	r7, #0
    cca4:	dc02      	bgt.n	ccac <__multiply+0x130>
    cca6:	e005      	b.n	ccb4 <__multiply+0x138>
    cca8:	3f01      	subs	r7, #1
    ccaa:	d003      	beq.n	ccb4 <__multiply+0x138>
    ccac:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    ccb0:	2b00      	cmp	r3, #0
    ccb2:	d0f9      	beq.n	cca8 <__multiply+0x12c>
    ccb4:	9b01      	ldr	r3, [sp, #4]
    ccb6:	4618      	mov	r0, r3
    ccb8:	611f      	str	r7, [r3, #16]
    ccba:	b005      	add	sp, #20
    ccbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccc0:	4b03      	ldr	r3, [pc, #12]	; (ccd0 <__multiply+0x154>)
    ccc2:	4804      	ldr	r0, [pc, #16]	; (ccd4 <__multiply+0x158>)
    ccc4:	9a01      	ldr	r2, [sp, #4]
    ccc6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ccca:	f002 f97d 	bl	efc8 <__assert_func>
    ccce:	bf00      	nop
    ccd0:	20000adc 	.word	0x20000adc
    ccd4:	20000af0 	.word	0x20000af0

0000ccd8 <__pow5mult>:
    ccd8:	f012 0303 	ands.w	r3, r2, #3
    ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cce0:	4614      	mov	r4, r2
    cce2:	4606      	mov	r6, r0
    cce4:	d132      	bne.n	cd4c <__pow5mult+0x74>
    cce6:	460d      	mov	r5, r1
    cce8:	10a4      	asrs	r4, r4, #2
    ccea:	d020      	beq.n	cd2e <__pow5mult+0x56>
    ccec:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ccf0:	f1b8 0f00 	cmp.w	r8, #0
    ccf4:	d033      	beq.n	cd5e <__pow5mult+0x86>
    ccf6:	07e3      	lsls	r3, r4, #31
    ccf8:	f04f 0700 	mov.w	r7, #0
    ccfc:	d407      	bmi.n	cd0e <__pow5mult+0x36>
    ccfe:	1064      	asrs	r4, r4, #1
    cd00:	d015      	beq.n	cd2e <__pow5mult+0x56>
    cd02:	f8d8 0000 	ldr.w	r0, [r8]
    cd06:	b1a8      	cbz	r0, cd34 <__pow5mult+0x5c>
    cd08:	4680      	mov	r8, r0
    cd0a:	07e3      	lsls	r3, r4, #31
    cd0c:	d5f7      	bpl.n	ccfe <__pow5mult+0x26>
    cd0e:	4642      	mov	r2, r8
    cd10:	4629      	mov	r1, r5
    cd12:	4630      	mov	r0, r6
    cd14:	f7ff ff32 	bl	cb7c <__multiply>
    cd18:	b1b5      	cbz	r5, cd48 <__pow5mult+0x70>
    cd1a:	6869      	ldr	r1, [r5, #4]
    cd1c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    cd1e:	1064      	asrs	r4, r4, #1
    cd20:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    cd24:	602a      	str	r2, [r5, #0]
    cd26:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    cd2a:	4605      	mov	r5, r0
    cd2c:	d1e9      	bne.n	cd02 <__pow5mult+0x2a>
    cd2e:	4628      	mov	r0, r5
    cd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd34:	4642      	mov	r2, r8
    cd36:	4641      	mov	r1, r8
    cd38:	4630      	mov	r0, r6
    cd3a:	f7ff ff1f 	bl	cb7c <__multiply>
    cd3e:	f8c8 0000 	str.w	r0, [r8]
    cd42:	6007      	str	r7, [r0, #0]
    cd44:	4680      	mov	r8, r0
    cd46:	e7e0      	b.n	cd0a <__pow5mult+0x32>
    cd48:	4605      	mov	r5, r0
    cd4a:	e7d8      	b.n	ccfe <__pow5mult+0x26>
    cd4c:	3b01      	subs	r3, #1
    cd4e:	4a0f      	ldr	r2, [pc, #60]	; (cd8c <__pow5mult+0xb4>)
    cd50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    cd54:	2300      	movs	r3, #0
    cd56:	f7ff fe41 	bl	c9dc <__multadd>
    cd5a:	4605      	mov	r5, r0
    cd5c:	e7c4      	b.n	cce8 <__pow5mult+0x10>
    cd5e:	2101      	movs	r1, #1
    cd60:	4630      	mov	r0, r6
    cd62:	f7ff fe0b 	bl	c97c <_Balloc>
    cd66:	4680      	mov	r8, r0
    cd68:	b140      	cbz	r0, cd7c <__pow5mult+0xa4>
    cd6a:	2301      	movs	r3, #1
    cd6c:	f240 2271 	movw	r2, #625	; 0x271
    cd70:	e9c0 3204 	strd	r3, r2, [r0, #16]
    cd74:	2300      	movs	r3, #0
    cd76:	6430      	str	r0, [r6, #64]	; 0x40
    cd78:	6003      	str	r3, [r0, #0]
    cd7a:	e7bc      	b.n	ccf6 <__pow5mult+0x1e>
    cd7c:	4b04      	ldr	r3, [pc, #16]	; (cd90 <__pow5mult+0xb8>)
    cd7e:	4805      	ldr	r0, [pc, #20]	; (cd94 <__pow5mult+0xbc>)
    cd80:	4642      	mov	r2, r8
    cd82:	f240 1145 	movw	r1, #325	; 0x145
    cd86:	f002 f91f 	bl	efc8 <__assert_func>
    cd8a:	bf00      	nop
    cd8c:	20001114 	.word	0x20001114
    cd90:	20000adc 	.word	0x20000adc
    cd94:	20000af0 	.word	0x20000af0

0000cd98 <__lshift>:
    cd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cd9c:	460d      	mov	r5, r1
    cd9e:	4614      	mov	r4, r2
    cda0:	692f      	ldr	r7, [r5, #16]
    cda2:	68ab      	ldr	r3, [r5, #8]
    cda4:	6849      	ldr	r1, [r1, #4]
    cda6:	eb07 1762 	add.w	r7, r7, r2, asr #5
    cdaa:	1c7e      	adds	r6, r7, #1
    cdac:	429e      	cmp	r6, r3
    cdae:	4680      	mov	r8, r0
    cdb0:	ea4f 1962 	mov.w	r9, r2, asr #5
    cdb4:	dd04      	ble.n	cdc0 <__lshift+0x28>
    cdb6:	005b      	lsls	r3, r3, #1
    cdb8:	429e      	cmp	r6, r3
    cdba:	f101 0101 	add.w	r1, r1, #1
    cdbe:	dcfa      	bgt.n	cdb6 <__lshift+0x1e>
    cdc0:	4640      	mov	r0, r8
    cdc2:	f7ff fddb 	bl	c97c <_Balloc>
    cdc6:	4684      	mov	ip, r0
    cdc8:	2800      	cmp	r0, #0
    cdca:	d052      	beq.n	ce72 <__lshift+0xda>
    cdcc:	f1b9 0f00 	cmp.w	r9, #0
    cdd0:	f100 0214 	add.w	r2, r0, #20
    cdd4:	dd0e      	ble.n	cdf4 <__lshift+0x5c>
    cdd6:	f109 0105 	add.w	r1, r9, #5
    cdda:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    cdde:	4613      	mov	r3, r2
    cde0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    cde4:	2000      	movs	r0, #0
    cde6:	f843 0b04 	str.w	r0, [r3], #4
    cdea:	428b      	cmp	r3, r1
    cdec:	d1fb      	bne.n	cde6 <__lshift+0x4e>
    cdee:	f1ae 0314 	sub.w	r3, lr, #20
    cdf2:	441a      	add	r2, r3
    cdf4:	6929      	ldr	r1, [r5, #16]
    cdf6:	f105 0314 	add.w	r3, r5, #20
    cdfa:	f014 0e1f 	ands.w	lr, r4, #31
    cdfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ce02:	d02e      	beq.n	ce62 <__lshift+0xca>
    ce04:	f1ce 0920 	rsb	r9, lr, #32
    ce08:	4610      	mov	r0, r2
    ce0a:	f04f 0a00 	mov.w	sl, #0
    ce0e:	681c      	ldr	r4, [r3, #0]
    ce10:	fa04 f40e 	lsl.w	r4, r4, lr
    ce14:	ea44 040a 	orr.w	r4, r4, sl
    ce18:	f840 4b04 	str.w	r4, [r0], #4
    ce1c:	f853 4b04 	ldr.w	r4, [r3], #4
    ce20:	4299      	cmp	r1, r3
    ce22:	fa24 fa09 	lsr.w	sl, r4, r9
    ce26:	d8f2      	bhi.n	ce0e <__lshift+0x76>
    ce28:	1b4b      	subs	r3, r1, r5
    ce2a:	3b15      	subs	r3, #21
    ce2c:	f023 0303 	bic.w	r3, r3, #3
    ce30:	3304      	adds	r3, #4
    ce32:	f105 0015 	add.w	r0, r5, #21
    ce36:	4281      	cmp	r1, r0
    ce38:	bf38      	it	cc
    ce3a:	2304      	movcc	r3, #4
    ce3c:	f1ba 0f00 	cmp.w	sl, #0
    ce40:	bf18      	it	ne
    ce42:	4637      	movne	r7, r6
    ce44:	f842 a003 	str.w	sl, [r2, r3]
    ce48:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ce4c:	686a      	ldr	r2, [r5, #4]
    ce4e:	f8cc 7010 	str.w	r7, [ip, #16]
    ce52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ce56:	6029      	str	r1, [r5, #0]
    ce58:	4660      	mov	r0, ip
    ce5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    ce5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce62:	3a04      	subs	r2, #4
    ce64:	f853 0b04 	ldr.w	r0, [r3], #4
    ce68:	f842 0f04 	str.w	r0, [r2, #4]!
    ce6c:	4299      	cmp	r1, r3
    ce6e:	d8f9      	bhi.n	ce64 <__lshift+0xcc>
    ce70:	e7ea      	b.n	ce48 <__lshift+0xb0>
    ce72:	4b03      	ldr	r3, [pc, #12]	; (ce80 <__lshift+0xe8>)
    ce74:	4803      	ldr	r0, [pc, #12]	; (ce84 <__lshift+0xec>)
    ce76:	4662      	mov	r2, ip
    ce78:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ce7c:	f002 f8a4 	bl	efc8 <__assert_func>
    ce80:	20000adc 	.word	0x20000adc
    ce84:	20000af0 	.word	0x20000af0

0000ce88 <__mcmp>:
    ce88:	690b      	ldr	r3, [r1, #16]
    ce8a:	4684      	mov	ip, r0
    ce8c:	6900      	ldr	r0, [r0, #16]
    ce8e:	1ac0      	subs	r0, r0, r3
    ce90:	d116      	bne.n	cec0 <__mcmp+0x38>
    ce92:	f10c 0c14 	add.w	ip, ip, #20
    ce96:	3114      	adds	r1, #20
    ce98:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ce9c:	b410      	push	{r4}
    ce9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    cea2:	e001      	b.n	cea8 <__mcmp+0x20>
    cea4:	4594      	cmp	ip, r2
    cea6:	d208      	bcs.n	ceba <__mcmp+0x32>
    cea8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ceac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ceb0:	428c      	cmp	r4, r1
    ceb2:	d0f7      	beq.n	cea4 <__mcmp+0x1c>
    ceb4:	d205      	bcs.n	cec2 <__mcmp+0x3a>
    ceb6:	f04f 30ff 	mov.w	r0, #4294967295
    ceba:	f85d 4b04 	ldr.w	r4, [sp], #4
    cebe:	4770      	bx	lr
    cec0:	4770      	bx	lr
    cec2:	2001      	movs	r0, #1
    cec4:	f85d 4b04 	ldr.w	r4, [sp], #4
    cec8:	4770      	bx	lr
    ceca:	bf00      	nop

0000cecc <__mdiff>:
    cecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ced0:	690f      	ldr	r7, [r1, #16]
    ced2:	6913      	ldr	r3, [r2, #16]
    ced4:	1aff      	subs	r7, r7, r3
    ced6:	2f00      	cmp	r7, #0
    ced8:	460e      	mov	r6, r1
    ceda:	4690      	mov	r8, r2
    cedc:	d17f      	bne.n	cfde <__mdiff+0x112>
    cede:	f101 0514 	add.w	r5, r1, #20
    cee2:	3214      	adds	r2, #20
    cee4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    cee8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ceec:	e001      	b.n	cef2 <__mdiff+0x26>
    ceee:	429d      	cmp	r5, r3
    cef0:	d278      	bcs.n	cfe4 <__mdiff+0x118>
    cef2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    cef6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    cefa:	42a1      	cmp	r1, r4
    cefc:	d0f7      	beq.n	ceee <__mdiff+0x22>
    cefe:	d369      	bcc.n	cfd4 <__mdiff+0x108>
    cf00:	6871      	ldr	r1, [r6, #4]
    cf02:	f7ff fd3b 	bl	c97c <_Balloc>
    cf06:	4681      	mov	r9, r0
    cf08:	2800      	cmp	r0, #0
    cf0a:	d077      	beq.n	cffc <__mdiff+0x130>
    cf0c:	6935      	ldr	r5, [r6, #16]
    cf0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    cf12:	60c7      	str	r7, [r0, #12]
    cf14:	f108 0e14 	add.w	lr, r8, #20
    cf18:	f106 0014 	add.w	r0, r6, #20
    cf1c:	f109 0a14 	add.w	sl, r9, #20
    cf20:	f106 0110 	add.w	r1, r6, #16
    cf24:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    cf28:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    cf2c:	4656      	mov	r6, sl
    cf2e:	f04f 0c00 	mov.w	ip, #0
    cf32:	f85e 4b04 	ldr.w	r4, [lr], #4
    cf36:	f851 bf04 	ldr.w	fp, [r1, #4]!
    cf3a:	b2a3      	uxth	r3, r4
    cf3c:	fa1c fc8b 	uxtah	ip, ip, fp
    cf40:	ebac 0303 	sub.w	r3, ip, r3
    cf44:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    cf48:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    cf4c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    cf50:	b29b      	uxth	r3, r3
    cf52:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cf56:	4572      	cmp	r2, lr
    cf58:	f846 3b04 	str.w	r3, [r6], #4
    cf5c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    cf60:	d8e7      	bhi.n	cf32 <__mdiff+0x66>
    cf62:	eba2 0108 	sub.w	r1, r2, r8
    cf66:	3915      	subs	r1, #21
    cf68:	f108 0815 	add.w	r8, r8, #21
    cf6c:	4542      	cmp	r2, r8
    cf6e:	f021 0403 	bic.w	r4, r1, #3
    cf72:	f104 0404 	add.w	r4, r4, #4
    cf76:	bf38      	it	cc
    cf78:	2404      	movcc	r4, #4
    cf7a:	4420      	add	r0, r4
    cf7c:	f021 0203 	bic.w	r2, r1, #3
    cf80:	bf38      	it	cc
    cf82:	2200      	movcc	r2, #0
    cf84:	4287      	cmp	r7, r0
    cf86:	4452      	add	r2, sl
    cf88:	4454      	add	r4, sl
    cf8a:	d918      	bls.n	cfbe <__mdiff+0xf2>
    cf8c:	4626      	mov	r6, r4
    cf8e:	4601      	mov	r1, r0
    cf90:	f851 3b04 	ldr.w	r3, [r1], #4
    cf94:	fa1c fc83 	uxtah	ip, ip, r3
    cf98:	ea4f 422c 	mov.w	r2, ip, asr #16
    cf9c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    cfa0:	fa1f fc8c 	uxth.w	ip, ip
    cfa4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    cfa8:	428f      	cmp	r7, r1
    cfaa:	f846 3b04 	str.w	r3, [r6], #4
    cfae:	ea4f 4c22 	mov.w	ip, r2, asr #16
    cfb2:	d8ed      	bhi.n	cf90 <__mdiff+0xc4>
    cfb4:	3f01      	subs	r7, #1
    cfb6:	1a3f      	subs	r7, r7, r0
    cfb8:	f027 0703 	bic.w	r7, r7, #3
    cfbc:	19e2      	adds	r2, r4, r7
    cfbe:	b923      	cbnz	r3, cfca <__mdiff+0xfe>
    cfc0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    cfc4:	3d01      	subs	r5, #1
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d0fa      	beq.n	cfc0 <__mdiff+0xf4>
    cfca:	f8c9 5010 	str.w	r5, [r9, #16]
    cfce:	4648      	mov	r0, r9
    cfd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfd4:	4633      	mov	r3, r6
    cfd6:	2701      	movs	r7, #1
    cfd8:	4646      	mov	r6, r8
    cfda:	4698      	mov	r8, r3
    cfdc:	e790      	b.n	cf00 <__mdiff+0x34>
    cfde:	dbf9      	blt.n	cfd4 <__mdiff+0x108>
    cfe0:	2700      	movs	r7, #0
    cfe2:	e78d      	b.n	cf00 <__mdiff+0x34>
    cfe4:	2100      	movs	r1, #0
    cfe6:	f7ff fcc9 	bl	c97c <_Balloc>
    cfea:	4681      	mov	r9, r0
    cfec:	b168      	cbz	r0, d00a <__mdiff+0x13e>
    cfee:	2201      	movs	r2, #1
    cff0:	2300      	movs	r3, #0
    cff2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    cff6:	4648      	mov	r0, r9
    cff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cffc:	4b06      	ldr	r3, [pc, #24]	; (d018 <__mdiff+0x14c>)
    cffe:	4807      	ldr	r0, [pc, #28]	; (d01c <__mdiff+0x150>)
    d000:	464a      	mov	r2, r9
    d002:	f240 2145 	movw	r1, #581	; 0x245
    d006:	f001 ffdf 	bl	efc8 <__assert_func>
    d00a:	4b03      	ldr	r3, [pc, #12]	; (d018 <__mdiff+0x14c>)
    d00c:	4803      	ldr	r0, [pc, #12]	; (d01c <__mdiff+0x150>)
    d00e:	464a      	mov	r2, r9
    d010:	f240 2137 	movw	r1, #567	; 0x237
    d014:	f001 ffd8 	bl	efc8 <__assert_func>
    d018:	20000adc 	.word	0x20000adc
    d01c:	20000af0 	.word	0x20000af0

0000d020 <__d2b>:
    d020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d024:	4688      	mov	r8, r1
    d026:	b083      	sub	sp, #12
    d028:	2101      	movs	r1, #1
    d02a:	ec57 6b10 	vmov	r6, r7, d0
    d02e:	4615      	mov	r5, r2
    d030:	f7ff fca4 	bl	c97c <_Balloc>
    d034:	4604      	mov	r4, r0
    d036:	2800      	cmp	r0, #0
    d038:	d051      	beq.n	d0de <__d2b+0xbe>
    d03a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    d03e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    d042:	f1b9 0f00 	cmp.w	r9, #0
    d046:	d001      	beq.n	d04c <__d2b+0x2c>
    d048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d04c:	2e00      	cmp	r6, #0
    d04e:	9301      	str	r3, [sp, #4]
    d050:	d118      	bne.n	d084 <__d2b+0x64>
    d052:	a801      	add	r0, sp, #4
    d054:	f7ff fd34 	bl	cac0 <__lo0bits>
    d058:	9a01      	ldr	r2, [sp, #4]
    d05a:	6162      	str	r2, [r4, #20]
    d05c:	2201      	movs	r2, #1
    d05e:	f100 0320 	add.w	r3, r0, #32
    d062:	6122      	str	r2, [r4, #16]
    d064:	f1b9 0f00 	cmp.w	r9, #0
    d068:	d025      	beq.n	d0b6 <__d2b+0x96>
    d06a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    d06e:	eb09 0203 	add.w	r2, r9, r3
    d072:	4620      	mov	r0, r4
    d074:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    d078:	f8c8 2000 	str.w	r2, [r8]
    d07c:	602b      	str	r3, [r5, #0]
    d07e:	b003      	add	sp, #12
    d080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d084:	4668      	mov	r0, sp
    d086:	9600      	str	r6, [sp, #0]
    d088:	f7ff fd1a 	bl	cac0 <__lo0bits>
    d08c:	4603      	mov	r3, r0
    d08e:	b310      	cbz	r0, d0d6 <__d2b+0xb6>
    d090:	e9dd 0200 	ldrd	r0, r2, [sp]
    d094:	f1c3 0120 	rsb	r1, r3, #32
    d098:	fa02 f101 	lsl.w	r1, r2, r1
    d09c:	4301      	orrs	r1, r0
    d09e:	40da      	lsrs	r2, r3
    d0a0:	6161      	str	r1, [r4, #20]
    d0a2:	9201      	str	r2, [sp, #4]
    d0a4:	2a00      	cmp	r2, #0
    d0a6:	61a2      	str	r2, [r4, #24]
    d0a8:	bf14      	ite	ne
    d0aa:	2202      	movne	r2, #2
    d0ac:	2201      	moveq	r2, #1
    d0ae:	6122      	str	r2, [r4, #16]
    d0b0:	f1b9 0f00 	cmp.w	r9, #0
    d0b4:	d1d9      	bne.n	d06a <__d2b+0x4a>
    d0b6:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    d0ba:	f8c8 3000 	str.w	r3, [r8]
    d0be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    d0c2:	6918      	ldr	r0, [r3, #16]
    d0c4:	f7ff fcdc 	bl	ca80 <__hi0bits>
    d0c8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    d0cc:	4620      	mov	r0, r4
    d0ce:	602b      	str	r3, [r5, #0]
    d0d0:	b003      	add	sp, #12
    d0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d0d6:	9a00      	ldr	r2, [sp, #0]
    d0d8:	6162      	str	r2, [r4, #20]
    d0da:	9a01      	ldr	r2, [sp, #4]
    d0dc:	e7e2      	b.n	d0a4 <__d2b+0x84>
    d0de:	4b03      	ldr	r3, [pc, #12]	; (d0ec <__d2b+0xcc>)
    d0e0:	4803      	ldr	r0, [pc, #12]	; (d0f0 <__d2b+0xd0>)
    d0e2:	4622      	mov	r2, r4
    d0e4:	f240 310f 	movw	r1, #783	; 0x30f
    d0e8:	f001 ff6e 	bl	efc8 <__assert_func>
    d0ec:	20000adc 	.word	0x20000adc
    d0f0:	20000af0 	.word	0x20000af0

0000d0f4 <__ascii_wctomb>:
    d0f4:	b149      	cbz	r1, d10a <__ascii_wctomb+0x16>
    d0f6:	2aff      	cmp	r2, #255	; 0xff
    d0f8:	d802      	bhi.n	d100 <__ascii_wctomb+0xc>
    d0fa:	700a      	strb	r2, [r1, #0]
    d0fc:	2001      	movs	r0, #1
    d0fe:	4770      	bx	lr
    d100:	238a      	movs	r3, #138	; 0x8a
    d102:	6003      	str	r3, [r0, #0]
    d104:	f04f 30ff 	mov.w	r0, #4294967295
    d108:	4770      	bx	lr
    d10a:	4608      	mov	r0, r1
    d10c:	4770      	bx	lr
    d10e:	bf00      	nop

0000d110 <_svfprintf_r>:
    d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d114:	ed2d 8b08 	vpush	{d8-d11}
    d118:	b0d1      	sub	sp, #324	; 0x144
    d11a:	460c      	mov	r4, r1
    d11c:	ee0b 1a10 	vmov	s22, r1
    d120:	4690      	mov	r8, r2
    d122:	9308      	str	r3, [sp, #32]
    d124:	4683      	mov	fp, r0
    d126:	f001 febb 	bl	eea0 <_localeconv_r>
    d12a:	6803      	ldr	r3, [r0, #0]
    d12c:	9312      	str	r3, [sp, #72]	; 0x48
    d12e:	4618      	mov	r0, r3
    d130:	f7ff fa06 	bl	c540 <strlen>
    d134:	af20      	add	r7, sp, #128	; 0x80
    d136:	9010      	str	r0, [sp, #64]	; 0x40
    d138:	2208      	movs	r2, #8
    d13a:	2100      	movs	r1, #0
    d13c:	4638      	mov	r0, r7
    d13e:	f7fe fea5 	bl	be8c <memset>
    d142:	89a3      	ldrh	r3, [r4, #12]
    d144:	061b      	lsls	r3, r3, #24
    d146:	d503      	bpl.n	d150 <_svfprintf_r+0x40>
    d148:	6923      	ldr	r3, [r4, #16]
    d14a:	2b00      	cmp	r3, #0
    d14c:	f000 8755 	beq.w	dffa <_svfprintf_r+0xeea>
    d150:	2300      	movs	r3, #0
    d152:	ed9f 8b83 	vldr	d8, [pc, #524]	; d360 <_svfprintf_r+0x250>
    d156:	ed9f 9b84 	vldr	d9, [pc, #528]	; d368 <_svfprintf_r+0x258>
    d15a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    d15e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    d162:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    d166:	aa27      	add	r2, sp, #156	; 0x9c
    d168:	930e      	str	r3, [sp, #56]	; 0x38
    d16a:	9224      	str	r2, [sp, #144]	; 0x90
    d16c:	4692      	mov	sl, r2
    d16e:	9311      	str	r3, [sp, #68]	; 0x44
    d170:	9304      	str	r3, [sp, #16]
    d172:	4644      	mov	r4, r8
    d174:	46a1      	mov	r9, r4
    d176:	4b7e      	ldr	r3, [pc, #504]	; (d370 <_svfprintf_r+0x260>)
    d178:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    d17c:	f7fe ff70 	bl	c060 <__locale_mb_cur_max>
    d180:	464a      	mov	r2, r9
    d182:	4603      	mov	r3, r0
    d184:	a91c      	add	r1, sp, #112	; 0x70
    d186:	9700      	str	r7, [sp, #0]
    d188:	4658      	mov	r0, fp
    d18a:	47a8      	blx	r5
    d18c:	2800      	cmp	r0, #0
    d18e:	f000 80b0 	beq.w	d2f2 <_svfprintf_r+0x1e2>
    d192:	f2c0 80a6 	blt.w	d2e2 <_svfprintf_r+0x1d2>
    d196:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d198:	2a25      	cmp	r2, #37	; 0x25
    d19a:	4603      	mov	r3, r0
    d19c:	d001      	beq.n	d1a2 <_svfprintf_r+0x92>
    d19e:	4499      	add	r9, r3
    d1a0:	e7e9      	b.n	d176 <_svfprintf_r+0x66>
    d1a2:	ebb9 0504 	subs.w	r5, r9, r4
    d1a6:	4606      	mov	r6, r0
    d1a8:	f040 80a7 	bne.w	d2fa <_svfprintf_r+0x1ea>
    d1ac:	2300      	movs	r3, #0
    d1ae:	f04f 32ff 	mov.w	r2, #4294967295
    d1b2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d1b6:	4698      	mov	r8, r3
    d1b8:	9306      	str	r3, [sp, #24]
    d1ba:	f109 0901 	add.w	r9, r9, #1
    d1be:	f899 3000 	ldrb.w	r3, [r9]
    d1c2:	9203      	str	r2, [sp, #12]
    d1c4:	252b      	movs	r5, #43	; 0x2b
    d1c6:	2620      	movs	r6, #32
    d1c8:	f109 0901 	add.w	r9, r9, #1
    d1cc:	f1a3 0220 	sub.w	r2, r3, #32
    d1d0:	2a5a      	cmp	r2, #90	; 0x5a
    d1d2:	f200 80cf 	bhi.w	d374 <_svfprintf_r+0x264>
    d1d6:	e8df f012 	tbh	[pc, r2, lsl #1]
    d1da:	02e8      	.short	0x02e8
    d1dc:	00cd00cd 	.word	0x00cd00cd
    d1e0:	00cd02e3 	.word	0x00cd02e3
    d1e4:	00cd00cd 	.word	0x00cd00cd
    d1e8:	00cd006a 	.word	0x00cd006a
    d1ec:	020500cd 	.word	0x020500cd
    d1f0:	00cd0284 	.word	0x00cd0284
    d1f4:	02c90210 	.word	0x02c90210
    d1f8:	02bd00cd 	.word	0x02bd00cd
    d1fc:	005b005b 	.word	0x005b005b
    d200:	005b005b 	.word	0x005b005b
    d204:	005b005b 	.word	0x005b005b
    d208:	005b005b 	.word	0x005b005b
    d20c:	00cd005b 	.word	0x00cd005b
    d210:	00cd00cd 	.word	0x00cd00cd
    d214:	00cd00cd 	.word	0x00cd00cd
    d218:	00cd00cd 	.word	0x00cd00cd
    d21c:	00cd0153 	.word	0x00cd0153
    d220:	021a0183 	.word	0x021a0183
    d224:	01530153 	.word	0x01530153
    d228:	00cd0153 	.word	0x00cd0153
    d22c:	00cd00cd 	.word	0x00cd00cd
    d230:	021500cd 	.word	0x021500cd
    d234:	00cd00cd 	.word	0x00cd00cd
    d238:	00cd0296 	.word	0x00cd0296
    d23c:	00cd00cd 	.word	0x00cd00cd
    d240:	00cd01ab 	.word	0x00cd01ab
    d244:	00cd02aa 	.word	0x00cd02aa
    d248:	06e300cd 	.word	0x06e300cd
    d24c:	00cd00cd 	.word	0x00cd00cd
    d250:	00cd00cd 	.word	0x00cd00cd
    d254:	00cd00cd 	.word	0x00cd00cd
    d258:	00cd00cd 	.word	0x00cd00cd
    d25c:	00cd0153 	.word	0x00cd0153
    d260:	01de0183 	.word	0x01de0183
    d264:	01530153 	.word	0x01530153
    d268:	02770153 	.word	0x02770153
    d26c:	007f01de 	.word	0x007f01de
    d270:	028900cd 	.word	0x028900cd
    d274:	025f00cd 	.word	0x025f00cd
    d278:	022f06e0 	.word	0x022f06e0
    d27c:	00cd007f 	.word	0x00cd007f
    d280:	007c01ab 	.word	0x007c01ab
    d284:	00cd06b8 	.word	0x00cd06b8
    d288:	06bd00cd 	.word	0x06bd00cd
    d28c:	007c00cd 	.word	0x007c00cd
    d290:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d294:	2100      	movs	r1, #0
    d296:	f819 3b01 	ldrb.w	r3, [r9], #1
    d29a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d29e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d2a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d2a6:	2a09      	cmp	r2, #9
    d2a8:	d9f5      	bls.n	d296 <_svfprintf_r+0x186>
    d2aa:	9106      	str	r1, [sp, #24]
    d2ac:	e78e      	b.n	d1cc <_svfprintf_r+0xbc>
    d2ae:	4658      	mov	r0, fp
    d2b0:	f001 fdf6 	bl	eea0 <_localeconv_r>
    d2b4:	6843      	ldr	r3, [r0, #4]
    d2b6:	9315      	str	r3, [sp, #84]	; 0x54
    d2b8:	4618      	mov	r0, r3
    d2ba:	f7ff f941 	bl	c540 <strlen>
    d2be:	9016      	str	r0, [sp, #88]	; 0x58
    d2c0:	4658      	mov	r0, fp
    d2c2:	f001 fded 	bl	eea0 <_localeconv_r>
    d2c6:	6883      	ldr	r3, [r0, #8]
    d2c8:	9313      	str	r3, [sp, #76]	; 0x4c
    d2ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	f040 862d 	bne.w	df2c <_svfprintf_r+0xe1c>
    d2d2:	f899 3000 	ldrb.w	r3, [r9]
    d2d6:	e777      	b.n	d1c8 <_svfprintf_r+0xb8>
    d2d8:	f899 3000 	ldrb.w	r3, [r9]
    d2dc:	f048 0820 	orr.w	r8, r8, #32
    d2e0:	e772      	b.n	d1c8 <_svfprintf_r+0xb8>
    d2e2:	2208      	movs	r2, #8
    d2e4:	2100      	movs	r1, #0
    d2e6:	4638      	mov	r0, r7
    d2e8:	f7fe fdd0 	bl	be8c <memset>
    d2ec:	2301      	movs	r3, #1
    d2ee:	4499      	add	r9, r3
    d2f0:	e741      	b.n	d176 <_svfprintf_r+0x66>
    d2f2:	ebb9 0504 	subs.w	r5, r9, r4
    d2f6:	4606      	mov	r6, r0
    d2f8:	d011      	beq.n	d31e <_svfprintf_r+0x20e>
    d2fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d2fc:	442b      	add	r3, r5
    d2fe:	9326      	str	r3, [sp, #152]	; 0x98
    d300:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d302:	3301      	adds	r3, #1
    d304:	2b07      	cmp	r3, #7
    d306:	e9ca 4500 	strd	r4, r5, [sl]
    d30a:	9325      	str	r3, [sp, #148]	; 0x94
    d30c:	dc1c      	bgt.n	d348 <_svfprintf_r+0x238>
    d30e:	f10a 0a08 	add.w	sl, sl, #8
    d312:	9b04      	ldr	r3, [sp, #16]
    d314:	442b      	add	r3, r5
    d316:	9304      	str	r3, [sp, #16]
    d318:	2e00      	cmp	r6, #0
    d31a:	f47f af47 	bne.w	d1ac <_svfprintf_r+0x9c>
    d31e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d320:	2b00      	cmp	r3, #0
    d322:	f041 820b 	bne.w	e73c <_svfprintf_r+0x162c>
    d326:	ee1b 3a10 	vmov	r3, s22
    d32a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    d32e:	f013 0f40 	tst.w	r3, #64	; 0x40
    d332:	9b04      	ldr	r3, [sp, #16]
    d334:	bf18      	it	ne
    d336:	f04f 33ff 	movne.w	r3, #4294967295
    d33a:	9304      	str	r3, [sp, #16]
    d33c:	9804      	ldr	r0, [sp, #16]
    d33e:	b051      	add	sp, #324	; 0x144
    d340:	ecbd 8b08 	vpop	{d8-d11}
    d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d348:	ee1b 1a10 	vmov	r1, s22
    d34c:	aa24      	add	r2, sp, #144	; 0x90
    d34e:	4658      	mov	r0, fp
    d350:	f002 fde6 	bl	ff20 <__ssprint_r>
    d354:	2800      	cmp	r0, #0
    d356:	d1e6      	bne.n	d326 <_svfprintf_r+0x216>
    d358:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d35c:	e7d9      	b.n	d312 <_svfprintf_r+0x202>
    d35e:	bf00      	nop
	...
    d368:	ffffffff 	.word	0xffffffff
    d36c:	7fefffff 	.word	0x7fefffff
    d370:	20004414 	.word	0x20004414
    d374:	930b      	str	r3, [sp, #44]	; 0x2c
    d376:	2b00      	cmp	r3, #0
    d378:	d0d1      	beq.n	d31e <_svfprintf_r+0x20e>
    d37a:	2100      	movs	r1, #0
    d37c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d380:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    d384:	2301      	movs	r3, #1
    d386:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d38a:	9302      	str	r3, [sp, #8]
    d38c:	9107      	str	r1, [sp, #28]
    d38e:	9305      	str	r3, [sp, #20]
    d390:	9103      	str	r1, [sp, #12]
    d392:	910f      	str	r1, [sp, #60]	; 0x3c
    d394:	ac37      	add	r4, sp, #220	; 0xdc
    d396:	f018 0302 	ands.w	r3, r8, #2
    d39a:	9309      	str	r3, [sp, #36]	; 0x24
    d39c:	d002      	beq.n	d3a4 <_svfprintf_r+0x294>
    d39e:	9b02      	ldr	r3, [sp, #8]
    d3a0:	3302      	adds	r3, #2
    d3a2:	9302      	str	r3, [sp, #8]
    d3a4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    d3a8:	930a      	str	r3, [sp, #40]	; 0x28
    d3aa:	d105      	bne.n	d3b8 <_svfprintf_r+0x2a8>
    d3ac:	9b06      	ldr	r3, [sp, #24]
    d3ae:	9a02      	ldr	r2, [sp, #8]
    d3b0:	1a9d      	subs	r5, r3, r2
    d3b2:	2d00      	cmp	r5, #0
    d3b4:	f300 8369 	bgt.w	da8a <_svfprintf_r+0x97a>
    d3b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d3ba:	b189      	cbz	r1, d3e0 <_svfprintf_r+0x2d0>
    d3bc:	9925      	ldr	r1, [sp, #148]	; 0x94
    d3be:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    d3c2:	3101      	adds	r1, #1
    d3c4:	3201      	adds	r2, #1
    d3c6:	f8ca 0000 	str.w	r0, [sl]
    d3ca:	2907      	cmp	r1, #7
    d3cc:	f04f 0001 	mov.w	r0, #1
    d3d0:	9226      	str	r2, [sp, #152]	; 0x98
    d3d2:	9125      	str	r1, [sp, #148]	; 0x94
    d3d4:	f8ca 0004 	str.w	r0, [sl, #4]
    d3d8:	f300 83a2 	bgt.w	db20 <_svfprintf_r+0xa10>
    d3dc:	f10a 0a08 	add.w	sl, sl, #8
    d3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d3e2:	b183      	cbz	r3, d406 <_svfprintf_r+0x2f6>
    d3e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d3e6:	a91a      	add	r1, sp, #104	; 0x68
    d3e8:	3301      	adds	r3, #1
    d3ea:	3202      	adds	r2, #2
    d3ec:	f8ca 1000 	str.w	r1, [sl]
    d3f0:	2b07      	cmp	r3, #7
    d3f2:	f04f 0102 	mov.w	r1, #2
    d3f6:	9226      	str	r2, [sp, #152]	; 0x98
    d3f8:	9325      	str	r3, [sp, #148]	; 0x94
    d3fa:	f8ca 1004 	str.w	r1, [sl, #4]
    d3fe:	f300 83a3 	bgt.w	db48 <_svfprintf_r+0xa38>
    d402:	f10a 0a08 	add.w	sl, sl, #8
    d406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d408:	2b80      	cmp	r3, #128	; 0x80
    d40a:	f000 826c 	beq.w	d8e6 <_svfprintf_r+0x7d6>
    d40e:	9b03      	ldr	r3, [sp, #12]
    d410:	9905      	ldr	r1, [sp, #20]
    d412:	1a5d      	subs	r5, r3, r1
    d414:	2d00      	cmp	r5, #0
    d416:	f300 82a5 	bgt.w	d964 <_svfprintf_r+0x854>
    d41a:	f418 7f80 	tst.w	r8, #256	; 0x100
    d41e:	f040 820d 	bne.w	d83c <_svfprintf_r+0x72c>
    d422:	9b05      	ldr	r3, [sp, #20]
    d424:	f8ca 3004 	str.w	r3, [sl, #4]
    d428:	441a      	add	r2, r3
    d42a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d42c:	f8ca 4000 	str.w	r4, [sl]
    d430:	3301      	adds	r3, #1
    d432:	2b07      	cmp	r3, #7
    d434:	9226      	str	r2, [sp, #152]	; 0x98
    d436:	9325      	str	r3, [sp, #148]	; 0x94
    d438:	f300 831b 	bgt.w	da72 <_svfprintf_r+0x962>
    d43c:	f10a 0a08 	add.w	sl, sl, #8
    d440:	f018 0f04 	tst.w	r8, #4
    d444:	d005      	beq.n	d452 <_svfprintf_r+0x342>
    d446:	9b06      	ldr	r3, [sp, #24]
    d448:	9902      	ldr	r1, [sp, #8]
    d44a:	1a5c      	subs	r4, r3, r1
    d44c:	2c00      	cmp	r4, #0
    d44e:	f300 8388 	bgt.w	db62 <_svfprintf_r+0xa52>
    d452:	9b04      	ldr	r3, [sp, #16]
    d454:	9906      	ldr	r1, [sp, #24]
    d456:	9802      	ldr	r0, [sp, #8]
    d458:	4281      	cmp	r1, r0
    d45a:	bfac      	ite	ge
    d45c:	185b      	addge	r3, r3, r1
    d45e:	181b      	addlt	r3, r3, r0
    d460:	9304      	str	r3, [sp, #16]
    d462:	2a00      	cmp	r2, #0
    d464:	f040 82b0 	bne.w	d9c8 <_svfprintf_r+0x8b8>
    d468:	2300      	movs	r3, #0
    d46a:	9325      	str	r3, [sp, #148]	; 0x94
    d46c:	9b07      	ldr	r3, [sp, #28]
    d46e:	b11b      	cbz	r3, d478 <_svfprintf_r+0x368>
    d470:	9907      	ldr	r1, [sp, #28]
    d472:	4658      	mov	r0, fp
    d474:	f7ff f966 	bl	c744 <_free_r>
    d478:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d47c:	464c      	mov	r4, r9
    d47e:	e679      	b.n	d174 <_svfprintf_r+0x64>
    d480:	930b      	str	r3, [sp, #44]	; 0x2c
    d482:	9b08      	ldr	r3, [sp, #32]
    d484:	3307      	adds	r3, #7
    d486:	f023 0307 	bic.w	r3, r3, #7
    d48a:	ecb3 8b02 	vldmia	r3!, {d8}
    d48e:	eeb0 7bc8 	vabs.f64	d7, d8
    d492:	eeb4 7b49 	vcmp.f64	d7, d9
    d496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d49a:	9308      	str	r3, [sp, #32]
    d49c:	f340 84e9 	ble.w	de72 <_svfprintf_r+0xd62>
    d4a0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    d4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4a8:	f101 8059 	bmi.w	e55e <_svfprintf_r+0x144e>
    d4ac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d4b0:	4cab      	ldr	r4, [pc, #684]	; (d760 <_svfprintf_r+0x650>)
    d4b2:	4bac      	ldr	r3, [pc, #688]	; (d764 <_svfprintf_r+0x654>)
    d4b4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    d4b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d4ba:	2a47      	cmp	r2, #71	; 0x47
    d4bc:	bfc8      	it	gt
    d4be:	461c      	movgt	r4, r3
    d4c0:	2300      	movs	r3, #0
    d4c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d4c6:	2203      	movs	r2, #3
    d4c8:	9307      	str	r3, [sp, #28]
    d4ca:	9202      	str	r2, [sp, #8]
    d4cc:	9205      	str	r2, [sp, #20]
    d4ce:	9303      	str	r3, [sp, #12]
    d4d0:	930f      	str	r3, [sp, #60]	; 0x3c
    d4d2:	2900      	cmp	r1, #0
    d4d4:	f43f af5f 	beq.w	d396 <_svfprintf_r+0x286>
    d4d8:	9b02      	ldr	r3, [sp, #8]
    d4da:	3301      	adds	r3, #1
    d4dc:	9302      	str	r3, [sp, #8]
    d4de:	e75a      	b.n	d396 <_svfprintf_r+0x286>
    d4e0:	2b43      	cmp	r3, #67	; 0x43
    d4e2:	930b      	str	r3, [sp, #44]	; 0x2c
    d4e4:	d003      	beq.n	d4ee <_svfprintf_r+0x3de>
    d4e6:	f018 0f10 	tst.w	r8, #16
    d4ea:	f000 855d 	beq.w	dfa8 <_svfprintf_r+0xe98>
    d4ee:	9d08      	ldr	r5, [sp, #32]
    d4f0:	2208      	movs	r2, #8
    d4f2:	2100      	movs	r1, #0
    d4f4:	a822      	add	r0, sp, #136	; 0x88
    d4f6:	ac37      	add	r4, sp, #220	; 0xdc
    d4f8:	f7fe fcc8 	bl	be8c <memset>
    d4fc:	ab22      	add	r3, sp, #136	; 0x88
    d4fe:	f855 2b04 	ldr.w	r2, [r5], #4
    d502:	4621      	mov	r1, r4
    d504:	4658      	mov	r0, fp
    d506:	f002 fcc5 	bl	fe94 <_wcrtomb_r>
    d50a:	4603      	mov	r3, r0
    d50c:	3301      	adds	r3, #1
    d50e:	9005      	str	r0, [sp, #20]
    d510:	f001 82ee 	beq.w	eaf0 <_svfprintf_r+0x19e0>
    d514:	9b05      	ldr	r3, [sp, #20]
    d516:	9508      	str	r5, [sp, #32]
    d518:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d51c:	9302      	str	r3, [sp, #8]
    d51e:	2100      	movs	r1, #0
    d520:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    d524:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    d528:	9107      	str	r1, [sp, #28]
    d52a:	9103      	str	r1, [sp, #12]
    d52c:	910f      	str	r1, [sp, #60]	; 0x3c
    d52e:	e732      	b.n	d396 <_svfprintf_r+0x286>
    d530:	930b      	str	r3, [sp, #44]	; 0x2c
    d532:	9b08      	ldr	r3, [sp, #32]
    d534:	461a      	mov	r2, r3
    d536:	2300      	movs	r3, #0
    d538:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    d53c:	4613      	mov	r3, r2
    d53e:	f853 4b04 	ldr.w	r4, [r3], #4
    d542:	9308      	str	r3, [sp, #32]
    d544:	2c00      	cmp	r4, #0
    d546:	f000 8548 	beq.w	dfda <_svfprintf_r+0xeca>
    d54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d54c:	2b53      	cmp	r3, #83	; 0x53
    d54e:	f000 86ec 	beq.w	e32a <_svfprintf_r+0x121a>
    d552:	f018 0310 	ands.w	r3, r8, #16
    d556:	930c      	str	r3, [sp, #48]	; 0x30
    d558:	f040 86e7 	bne.w	e32a <_svfprintf_r+0x121a>
    d55c:	9b03      	ldr	r3, [sp, #12]
    d55e:	1c5d      	adds	r5, r3, #1
    d560:	f001 80e5 	beq.w	e72e <_svfprintf_r+0x161e>
    d564:	990c      	ldr	r1, [sp, #48]	; 0x30
    d566:	461a      	mov	r2, r3
    d568:	4620      	mov	r0, r4
    d56a:	f001 fca1 	bl	eeb0 <memchr>
    d56e:	9007      	str	r0, [sp, #28]
    d570:	2800      	cmp	r0, #0
    d572:	f001 8328 	beq.w	ebc6 <_svfprintf_r+0x1ab6>
    d576:	9b07      	ldr	r3, [sp, #28]
    d578:	1b1a      	subs	r2, r3, r4
    d57a:	9205      	str	r2, [sp, #20]
    d57c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d57e:	9303      	str	r3, [sp, #12]
    d580:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    d584:	930f      	str	r3, [sp, #60]	; 0x3c
    d586:	930d      	str	r3, [sp, #52]	; 0x34
    d588:	9307      	str	r3, [sp, #28]
    d58a:	2373      	movs	r3, #115	; 0x73
    d58c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d590:	9202      	str	r2, [sp, #8]
    d592:	930b      	str	r3, [sp, #44]	; 0x2c
    d594:	e79d      	b.n	d4d2 <_svfprintf_r+0x3c2>
    d596:	f018 0f20 	tst.w	r8, #32
    d59a:	930b      	str	r3, [sp, #44]	; 0x2c
    d59c:	9b08      	ldr	r3, [sp, #32]
    d59e:	d03d      	beq.n	d61c <_svfprintf_r+0x50c>
    d5a0:	3307      	adds	r3, #7
    d5a2:	f023 0307 	bic.w	r3, r3, #7
    d5a6:	461a      	mov	r2, r3
    d5a8:	4611      	mov	r1, r2
    d5aa:	685b      	ldr	r3, [r3, #4]
    d5ac:	f851 2b08 	ldr.w	r2, [r1], #8
    d5b0:	9108      	str	r1, [sp, #32]
    d5b2:	4619      	mov	r1, r3
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	f2c0 840c 	blt.w	ddd2 <_svfprintf_r+0xcc2>
    d5ba:	9b03      	ldr	r3, [sp, #12]
    d5bc:	3301      	adds	r3, #1
    d5be:	f000 829e 	beq.w	dafe <_svfprintf_r+0x9ee>
    d5c2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    d5c6:	ea52 0301 	orrs.w	r3, r2, r1
    d5ca:	9002      	str	r0, [sp, #8]
    d5cc:	f040 8299 	bne.w	db02 <_svfprintf_r+0x9f2>
    d5d0:	9b03      	ldr	r3, [sp, #12]
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	f040 829a 	bne.w	db0c <_svfprintf_r+0x9fc>
    d5d8:	4680      	mov	r8, r0
    d5da:	2300      	movs	r3, #0
    d5dc:	9303      	str	r3, [sp, #12]
    d5de:	9305      	str	r3, [sp, #20]
    d5e0:	ac50      	add	r4, sp, #320	; 0x140
    d5e2:	e106      	b.n	d7f2 <_svfprintf_r+0x6e2>
    d5e4:	9b08      	ldr	r3, [sp, #32]
    d5e6:	f853 2b04 	ldr.w	r2, [r3], #4
    d5ea:	9206      	str	r2, [sp, #24]
    d5ec:	2a00      	cmp	r2, #0
    d5ee:	f280 8419 	bge.w	de24 <_svfprintf_r+0xd14>
    d5f2:	9a06      	ldr	r2, [sp, #24]
    d5f4:	9308      	str	r3, [sp, #32]
    d5f6:	4252      	negs	r2, r2
    d5f8:	9206      	str	r2, [sp, #24]
    d5fa:	f899 3000 	ldrb.w	r3, [r9]
    d5fe:	f048 0804 	orr.w	r8, r8, #4
    d602:	e5e1      	b.n	d1c8 <_svfprintf_r+0xb8>
    d604:	f899 3000 	ldrb.w	r3, [r9]
    d608:	f048 0808 	orr.w	r8, r8, #8
    d60c:	e5dc      	b.n	d1c8 <_svfprintf_r+0xb8>
    d60e:	f048 0810 	orr.w	r8, r8, #16
    d612:	f018 0f20 	tst.w	r8, #32
    d616:	930b      	str	r3, [sp, #44]	; 0x2c
    d618:	9b08      	ldr	r3, [sp, #32]
    d61a:	d1c1      	bne.n	d5a0 <_svfprintf_r+0x490>
    d61c:	f018 0f10 	tst.w	r8, #16
    d620:	f040 840b 	bne.w	de3a <_svfprintf_r+0xd2a>
    d624:	f018 0f40 	tst.w	r8, #64	; 0x40
    d628:	f000 8403 	beq.w	de32 <_svfprintf_r+0xd22>
    d62c:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d630:	9308      	str	r3, [sp, #32]
    d632:	17d1      	asrs	r1, r2, #31
    d634:	460b      	mov	r3, r1
    d636:	e7bd      	b.n	d5b4 <_svfprintf_r+0x4a4>
    d638:	9b08      	ldr	r3, [sp, #32]
    d63a:	f048 0202 	orr.w	r2, r8, #2
    d63e:	9202      	str	r2, [sp, #8]
    d640:	f853 2b04 	ldr.w	r2, [r3], #4
    d644:	9308      	str	r3, [sp, #32]
    d646:	f647 0330 	movw	r3, #30768	; 0x7830
    d64a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    d64e:	2078      	movs	r0, #120	; 0x78
    d650:	4b45      	ldr	r3, [pc, #276]	; (d768 <_svfprintf_r+0x658>)
    d652:	9311      	str	r3, [sp, #68]	; 0x44
    d654:	2100      	movs	r1, #0
    d656:	2302      	movs	r3, #2
    d658:	900b      	str	r0, [sp, #44]	; 0x2c
    d65a:	2000      	movs	r0, #0
    d65c:	9c03      	ldr	r4, [sp, #12]
    d65e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    d662:	1c60      	adds	r0, r4, #1
    d664:	f000 80ad 	beq.w	d7c2 <_svfprintf_r+0x6b2>
    d668:	9802      	ldr	r0, [sp, #8]
    d66a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    d66e:	ea52 0001 	orrs.w	r0, r2, r1
    d672:	f040 80a4 	bne.w	d7be <_svfprintf_r+0x6ae>
    d676:	2c00      	cmp	r4, #0
    d678:	f040 86ae 	bne.w	e3d8 <_svfprintf_r+0x12c8>
    d67c:	2b00      	cmp	r3, #0
    d67e:	d1ac      	bne.n	d5da <_svfprintf_r+0x4ca>
    d680:	9b02      	ldr	r3, [sp, #8]
    d682:	f013 0301 	ands.w	r3, r3, #1
    d686:	9305      	str	r3, [sp, #20]
    d688:	f000 83d1 	beq.w	de2e <_svfprintf_r+0xd1e>
    d68c:	2330      	movs	r3, #48	; 0x30
    d68e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    d692:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    d696:	e0ac      	b.n	d7f2 <_svfprintf_r+0x6e2>
    d698:	f018 0f20 	tst.w	r8, #32
    d69c:	f040 83d4 	bne.w	de48 <_svfprintf_r+0xd38>
    d6a0:	f018 0f10 	tst.w	r8, #16
    d6a4:	f040 869f 	bne.w	e3e6 <_svfprintf_r+0x12d6>
    d6a8:	f018 0f40 	tst.w	r8, #64	; 0x40
    d6ac:	f040 8797 	bne.w	e5de <_svfprintf_r+0x14ce>
    d6b0:	f418 7f00 	tst.w	r8, #512	; 0x200
    d6b4:	f000 8697 	beq.w	e3e6 <_svfprintf_r+0x12d6>
    d6b8:	9b08      	ldr	r3, [sp, #32]
    d6ba:	9904      	ldr	r1, [sp, #16]
    d6bc:	f853 2b04 	ldr.w	r2, [r3], #4
    d6c0:	9308      	str	r3, [sp, #32]
    d6c2:	7011      	strb	r1, [r2, #0]
    d6c4:	464c      	mov	r4, r9
    d6c6:	e555      	b.n	d174 <_svfprintf_r+0x64>
    d6c8:	f899 3000 	ldrb.w	r3, [r9]
    d6cc:	2b68      	cmp	r3, #104	; 0x68
    d6ce:	bf03      	ittte	eq
    d6d0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d6d4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    d6d8:	f109 0901 	addeq.w	r9, r9, #1
    d6dc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    d6e0:	e572      	b.n	d1c8 <_svfprintf_r+0xb8>
    d6e2:	f899 3000 	ldrb.w	r3, [r9]
    d6e6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    d6ea:	e56d      	b.n	d1c8 <_svfprintf_r+0xb8>
    d6ec:	f899 3000 	ldrb.w	r3, [r9]
    d6f0:	2b6c      	cmp	r3, #108	; 0x6c
    d6f2:	bf03      	ittte	eq
    d6f4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    d6f8:	f048 0820 	orreq.w	r8, r8, #32
    d6fc:	f109 0901 	addeq.w	r9, r9, #1
    d700:	f048 0810 	orrne.w	r8, r8, #16
    d704:	e560      	b.n	d1c8 <_svfprintf_r+0xb8>
    d706:	930b      	str	r3, [sp, #44]	; 0x2c
    d708:	f048 0810 	orr.w	r8, r8, #16
    d70c:	f018 0120 	ands.w	r1, r8, #32
    d710:	f000 8351 	beq.w	ddb6 <_svfprintf_r+0xca6>
    d714:	9b08      	ldr	r3, [sp, #32]
    d716:	3307      	adds	r3, #7
    d718:	f023 0307 	bic.w	r3, r3, #7
    d71c:	6859      	ldr	r1, [r3, #4]
    d71e:	f853 2b08 	ldr.w	r2, [r3], #8
    d722:	9308      	str	r3, [sp, #32]
    d724:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    d728:	9302      	str	r3, [sp, #8]
    d72a:	2300      	movs	r3, #0
    d72c:	e795      	b.n	d65a <_svfprintf_r+0x54a>
    d72e:	930b      	str	r3, [sp, #44]	; 0x2c
    d730:	f048 0310 	orr.w	r3, r8, #16
    d734:	9302      	str	r3, [sp, #8]
    d736:	9b02      	ldr	r3, [sp, #8]
    d738:	f013 0120 	ands.w	r1, r3, #32
    d73c:	f000 8329 	beq.w	dd92 <_svfprintf_r+0xc82>
    d740:	9b08      	ldr	r3, [sp, #32]
    d742:	3307      	adds	r3, #7
    d744:	f023 0307 	bic.w	r3, r3, #7
    d748:	6859      	ldr	r1, [r3, #4]
    d74a:	f853 2b08 	ldr.w	r2, [r3], #8
    d74e:	9308      	str	r3, [sp, #32]
    d750:	2301      	movs	r3, #1
    d752:	e782      	b.n	d65a <_svfprintf_r+0x54a>
    d754:	f899 3000 	ldrb.w	r3, [r9]
    d758:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    d75c:	e534      	b.n	d1c8 <_svfprintf_r+0xb8>
    d75e:	bf00      	nop
    d760:	20000ce4 	.word	0x20000ce4
    d764:	20000ce8 	.word	0x20000ce8
    d768:	20000cf4 	.word	0x20000cf4
    d76c:	4649      	mov	r1, r9
    d76e:	f811 3b01 	ldrb.w	r3, [r1], #1
    d772:	2b2a      	cmp	r3, #42	; 0x2a
    d774:	f001 8249 	beq.w	ec0a <_svfprintf_r+0x1afa>
    d778:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d77c:	2a09      	cmp	r2, #9
    d77e:	4689      	mov	r9, r1
    d780:	bf98      	it	ls
    d782:	2100      	movls	r1, #0
    d784:	f201 8144 	bhi.w	ea10 <_svfprintf_r+0x1900>
    d788:	f819 3b01 	ldrb.w	r3, [r9], #1
    d78c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d790:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d794:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d798:	2a09      	cmp	r2, #9
    d79a:	d9f5      	bls.n	d788 <_svfprintf_r+0x678>
    d79c:	9103      	str	r1, [sp, #12]
    d79e:	e515      	b.n	d1cc <_svfprintf_r+0xbc>
    d7a0:	f899 3000 	ldrb.w	r3, [r9]
    d7a4:	f048 0801 	orr.w	r8, r8, #1
    d7a8:	e50e      	b.n	d1c8 <_svfprintf_r+0xb8>
    d7aa:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	f47f ad8f 	bne.w	d2d2 <_svfprintf_r+0x1c2>
    d7b4:	f899 3000 	ldrb.w	r3, [r9]
    d7b8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    d7bc:	e504      	b.n	d1c8 <_svfprintf_r+0xb8>
    d7be:	f8cd 8008 	str.w	r8, [sp, #8]
    d7c2:	2b01      	cmp	r3, #1
    d7c4:	f000 819d 	beq.w	db02 <_svfprintf_r+0x9f2>
    d7c8:	2b02      	cmp	r3, #2
    d7ca:	ac50      	add	r4, sp, #320	; 0x140
    d7cc:	d120      	bne.n	d810 <_svfprintf_r+0x700>
    d7ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    d7d0:	f002 030f 	and.w	r3, r2, #15
    d7d4:	0912      	lsrs	r2, r2, #4
    d7d6:	5cc3      	ldrb	r3, [r0, r3]
    d7d8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d7dc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d7e0:	0909      	lsrs	r1, r1, #4
    d7e2:	ea52 0301 	orrs.w	r3, r2, r1
    d7e6:	d1f3      	bne.n	d7d0 <_svfprintf_r+0x6c0>
    d7e8:	ab50      	add	r3, sp, #320	; 0x140
    d7ea:	1b1b      	subs	r3, r3, r4
    d7ec:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d7f0:	9305      	str	r3, [sp, #20]
    d7f2:	9a05      	ldr	r2, [sp, #20]
    d7f4:	9803      	ldr	r0, [sp, #12]
    d7f6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    d7fa:	4282      	cmp	r2, r0
    d7fc:	f04f 0300 	mov.w	r3, #0
    d800:	bfb8      	it	lt
    d802:	4602      	movlt	r2, r0
    d804:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    d808:	9307      	str	r3, [sp, #28]
    d80a:	9202      	str	r2, [sp, #8]
    d80c:	930f      	str	r3, [sp, #60]	; 0x3c
    d80e:	e660      	b.n	d4d2 <_svfprintf_r+0x3c2>
    d810:	f002 0307 	and.w	r3, r2, #7
    d814:	08d2      	lsrs	r2, r2, #3
    d816:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d81a:	08c9      	lsrs	r1, r1, #3
    d81c:	3330      	adds	r3, #48	; 0x30
    d81e:	ea52 0501 	orrs.w	r5, r2, r1
    d822:	4620      	mov	r0, r4
    d824:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d828:	d1f2      	bne.n	d810 <_svfprintf_r+0x700>
    d82a:	9a02      	ldr	r2, [sp, #8]
    d82c:	07d1      	lsls	r1, r2, #31
    d82e:	f100 824d 	bmi.w	dccc <_svfprintf_r+0xbbc>
    d832:	ab50      	add	r3, sp, #320	; 0x140
    d834:	1b1b      	subs	r3, r3, r4
    d836:	4690      	mov	r8, r2
    d838:	9305      	str	r3, [sp, #20]
    d83a:	e7da      	b.n	d7f2 <_svfprintf_r+0x6e2>
    d83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d83e:	2b65      	cmp	r3, #101	; 0x65
    d840:	f340 80d4 	ble.w	d9ec <_svfprintf_r+0x8dc>
    d844:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d84c:	f040 81c1 	bne.w	dbd2 <_svfprintf_r+0xac2>
    d850:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d852:	49ba      	ldr	r1, [pc, #744]	; (db3c <_svfprintf_r+0xa2c>)
    d854:	f8ca 1000 	str.w	r1, [sl]
    d858:	3301      	adds	r3, #1
    d85a:	3201      	adds	r2, #1
    d85c:	2101      	movs	r1, #1
    d85e:	2b07      	cmp	r3, #7
    d860:	9226      	str	r2, [sp, #152]	; 0x98
    d862:	9325      	str	r3, [sp, #148]	; 0x94
    d864:	f8ca 1004 	str.w	r1, [sl, #4]
    d868:	f300 8551 	bgt.w	e30e <_svfprintf_r+0x11fe>
    d86c:	f10a 0a08 	add.w	sl, sl, #8
    d870:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d872:	990e      	ldr	r1, [sp, #56]	; 0x38
    d874:	428b      	cmp	r3, r1
    d876:	f280 82d0 	bge.w	de1a <_svfprintf_r+0xd0a>
    d87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d87c:	9912      	ldr	r1, [sp, #72]	; 0x48
    d87e:	441a      	add	r2, r3
    d880:	e9ca 1300 	strd	r1, r3, [sl]
    d884:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d886:	9226      	str	r2, [sp, #152]	; 0x98
    d888:	3301      	adds	r3, #1
    d88a:	2b07      	cmp	r3, #7
    d88c:	9325      	str	r3, [sp, #148]	; 0x94
    d88e:	f300 8397 	bgt.w	dfc0 <_svfprintf_r+0xeb0>
    d892:	f10a 0a08 	add.w	sl, sl, #8
    d896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d898:	1e5c      	subs	r4, r3, #1
    d89a:	2c00      	cmp	r4, #0
    d89c:	f77f add0 	ble.w	d440 <_svfprintf_r+0x330>
    d8a0:	2c10      	cmp	r4, #16
    d8a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d8a4:	f340 856e 	ble.w	e384 <_svfprintf_r+0x1274>
    d8a8:	ee1b 6a10 	vmov	r6, s22
    d8ac:	2510      	movs	r5, #16
    d8ae:	e005      	b.n	d8bc <_svfprintf_r+0x7ac>
    d8b0:	f10a 0a08 	add.w	sl, sl, #8
    d8b4:	3c10      	subs	r4, #16
    d8b6:	2c10      	cmp	r4, #16
    d8b8:	f340 8564 	ble.w	e384 <_svfprintf_r+0x1274>
    d8bc:	3301      	adds	r3, #1
    d8be:	49a0      	ldr	r1, [pc, #640]	; (db40 <_svfprintf_r+0xa30>)
    d8c0:	3210      	adds	r2, #16
    d8c2:	2b07      	cmp	r3, #7
    d8c4:	e9ca 1500 	strd	r1, r5, [sl]
    d8c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d8cc:	ddf0      	ble.n	d8b0 <_svfprintf_r+0x7a0>
    d8ce:	aa24      	add	r2, sp, #144	; 0x90
    d8d0:	4631      	mov	r1, r6
    d8d2:	4658      	mov	r0, fp
    d8d4:	f002 fb24 	bl	ff20 <__ssprint_r>
    d8d8:	2800      	cmp	r0, #0
    d8da:	d17e      	bne.n	d9da <_svfprintf_r+0x8ca>
    d8dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d8e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d8e4:	e7e6      	b.n	d8b4 <_svfprintf_r+0x7a4>
    d8e6:	9b06      	ldr	r3, [sp, #24]
    d8e8:	9902      	ldr	r1, [sp, #8]
    d8ea:	1a5d      	subs	r5, r3, r1
    d8ec:	2d00      	cmp	r5, #0
    d8ee:	f77f ad8e 	ble.w	d40e <_svfprintf_r+0x2fe>
    d8f2:	2d10      	cmp	r5, #16
    d8f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d8f6:	dd21      	ble.n	d93c <_svfprintf_r+0x82c>
    d8f8:	9409      	str	r4, [sp, #36]	; 0x24
    d8fa:	2610      	movs	r6, #16
    d8fc:	ee1b 4a10 	vmov	r4, s22
    d900:	e004      	b.n	d90c <_svfprintf_r+0x7fc>
    d902:	3d10      	subs	r5, #16
    d904:	2d10      	cmp	r5, #16
    d906:	f10a 0a08 	add.w	sl, sl, #8
    d90a:	dd16      	ble.n	d93a <_svfprintf_r+0x82a>
    d90c:	3301      	adds	r3, #1
    d90e:	498c      	ldr	r1, [pc, #560]	; (db40 <_svfprintf_r+0xa30>)
    d910:	3210      	adds	r2, #16
    d912:	2b07      	cmp	r3, #7
    d914:	e9ca 1600 	strd	r1, r6, [sl]
    d918:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d91c:	ddf1      	ble.n	d902 <_svfprintf_r+0x7f2>
    d91e:	aa24      	add	r2, sp, #144	; 0x90
    d920:	4621      	mov	r1, r4
    d922:	4658      	mov	r0, fp
    d924:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    d928:	f002 fafa 	bl	ff20 <__ssprint_r>
    d92c:	2800      	cmp	r0, #0
    d92e:	d154      	bne.n	d9da <_svfprintf_r+0x8ca>
    d930:	3d10      	subs	r5, #16
    d932:	2d10      	cmp	r5, #16
    d934:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d938:	dce8      	bgt.n	d90c <_svfprintf_r+0x7fc>
    d93a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d93c:	4980      	ldr	r1, [pc, #512]	; (db40 <_svfprintf_r+0xa30>)
    d93e:	f8ca 5004 	str.w	r5, [sl, #4]
    d942:	3301      	adds	r3, #1
    d944:	442a      	add	r2, r5
    d946:	2b07      	cmp	r3, #7
    d948:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d94c:	f8ca 1000 	str.w	r1, [sl]
    d950:	f300 8526 	bgt.w	e3a0 <_svfprintf_r+0x1290>
    d954:	9b03      	ldr	r3, [sp, #12]
    d956:	9905      	ldr	r1, [sp, #20]
    d958:	1a5d      	subs	r5, r3, r1
    d95a:	2d00      	cmp	r5, #0
    d95c:	f10a 0a08 	add.w	sl, sl, #8
    d960:	f77f ad5b 	ble.w	d41a <_svfprintf_r+0x30a>
    d964:	2d10      	cmp	r5, #16
    d966:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d968:	dd1f      	ble.n	d9aa <_svfprintf_r+0x89a>
    d96a:	4651      	mov	r1, sl
    d96c:	2610      	movs	r6, #16
    d96e:	ee1b aa10 	vmov	sl, s22
    d972:	e004      	b.n	d97e <_svfprintf_r+0x86e>
    d974:	3d10      	subs	r5, #16
    d976:	2d10      	cmp	r5, #16
    d978:	f101 0108 	add.w	r1, r1, #8
    d97c:	dd14      	ble.n	d9a8 <_svfprintf_r+0x898>
    d97e:	3301      	adds	r3, #1
    d980:	486f      	ldr	r0, [pc, #444]	; (db40 <_svfprintf_r+0xa30>)
    d982:	3210      	adds	r2, #16
    d984:	2b07      	cmp	r3, #7
    d986:	e9c1 0600 	strd	r0, r6, [r1]
    d98a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d98e:	ddf1      	ble.n	d974 <_svfprintf_r+0x864>
    d990:	aa24      	add	r2, sp, #144	; 0x90
    d992:	4651      	mov	r1, sl
    d994:	4658      	mov	r0, fp
    d996:	f002 fac3 	bl	ff20 <__ssprint_r>
    d99a:	b9f0      	cbnz	r0, d9da <_svfprintf_r+0x8ca>
    d99c:	3d10      	subs	r5, #16
    d99e:	2d10      	cmp	r5, #16
    d9a0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    d9a4:	a927      	add	r1, sp, #156	; 0x9c
    d9a6:	dcea      	bgt.n	d97e <_svfprintf_r+0x86e>
    d9a8:	468a      	mov	sl, r1
    d9aa:	3301      	adds	r3, #1
    d9ac:	4964      	ldr	r1, [pc, #400]	; (db40 <_svfprintf_r+0xa30>)
    d9ae:	f8ca 5004 	str.w	r5, [sl, #4]
    d9b2:	442a      	add	r2, r5
    d9b4:	2b07      	cmp	r3, #7
    d9b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    d9ba:	f8ca 1000 	str.w	r1, [sl]
    d9be:	f300 81da 	bgt.w	dd76 <_svfprintf_r+0xc66>
    d9c2:	f10a 0a08 	add.w	sl, sl, #8
    d9c6:	e528      	b.n	d41a <_svfprintf_r+0x30a>
    d9c8:	ee1b 1a10 	vmov	r1, s22
    d9cc:	aa24      	add	r2, sp, #144	; 0x90
    d9ce:	4658      	mov	r0, fp
    d9d0:	f002 faa6 	bl	ff20 <__ssprint_r>
    d9d4:	2800      	cmp	r0, #0
    d9d6:	f43f ad47 	beq.w	d468 <_svfprintf_r+0x358>
    d9da:	9b07      	ldr	r3, [sp, #28]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	f43f aca2 	beq.w	d326 <_svfprintf_r+0x216>
    d9e2:	9907      	ldr	r1, [sp, #28]
    d9e4:	4658      	mov	r0, fp
    d9e6:	f7fe fead 	bl	c744 <_free_r>
    d9ea:	e49c      	b.n	d326 <_svfprintf_r+0x216>
    d9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d9ee:	2b01      	cmp	r3, #1
    d9f0:	f340 817a 	ble.w	dce8 <_svfprintf_r+0xbd8>
    d9f4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    d9f6:	f8ca 4000 	str.w	r4, [sl]
    d9fa:	3301      	adds	r3, #1
    d9fc:	3201      	adds	r2, #1
    d9fe:	2101      	movs	r1, #1
    da00:	2b07      	cmp	r3, #7
    da02:	9226      	str	r2, [sp, #152]	; 0x98
    da04:	9325      	str	r3, [sp, #148]	; 0x94
    da06:	f8ca 1004 	str.w	r1, [sl, #4]
    da0a:	f300 81f8 	bgt.w	ddfe <_svfprintf_r+0xcee>
    da0e:	f10a 0a08 	add.w	sl, sl, #8
    da12:	9910      	ldr	r1, [sp, #64]	; 0x40
    da14:	9812      	ldr	r0, [sp, #72]	; 0x48
    da16:	3301      	adds	r3, #1
    da18:	440a      	add	r2, r1
    da1a:	2b07      	cmp	r3, #7
    da1c:	e9ca 0100 	strd	r0, r1, [sl]
    da20:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da24:	f300 81dd 	bgt.w	dde2 <_svfprintf_r+0xcd2>
    da28:	f10a 0a08 	add.w	sl, sl, #8
    da2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
    da30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da34:	f000 8177 	beq.w	dd26 <_svfprintf_r+0xc16>
    da38:	990e      	ldr	r1, [sp, #56]	; 0x38
    da3a:	3301      	adds	r3, #1
    da3c:	3901      	subs	r1, #1
    da3e:	3401      	adds	r4, #1
    da40:	440a      	add	r2, r1
    da42:	2b07      	cmp	r3, #7
    da44:	f8ca 4000 	str.w	r4, [sl]
    da48:	9325      	str	r3, [sp, #148]	; 0x94
    da4a:	f8ca 1004 	str.w	r1, [sl, #4]
    da4e:	9226      	str	r2, [sp, #152]	; 0x98
    da50:	f300 815b 	bgt.w	dd0a <_svfprintf_r+0xbfa>
    da54:	f10a 0a08 	add.w	sl, sl, #8
    da58:	9914      	ldr	r1, [sp, #80]	; 0x50
    da5a:	f8ca 1004 	str.w	r1, [sl, #4]
    da5e:	3301      	adds	r3, #1
    da60:	440a      	add	r2, r1
    da62:	2b07      	cmp	r3, #7
    da64:	a91e      	add	r1, sp, #120	; 0x78
    da66:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    da6a:	f8ca 1000 	str.w	r1, [sl]
    da6e:	f77f ace5 	ble.w	d43c <_svfprintf_r+0x32c>
    da72:	ee1b 1a10 	vmov	r1, s22
    da76:	aa24      	add	r2, sp, #144	; 0x90
    da78:	4658      	mov	r0, fp
    da7a:	f002 fa51 	bl	ff20 <__ssprint_r>
    da7e:	2800      	cmp	r0, #0
    da80:	d1ab      	bne.n	d9da <_svfprintf_r+0x8ca>
    da82:	9a26      	ldr	r2, [sp, #152]	; 0x98
    da84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    da88:	e4da      	b.n	d440 <_svfprintf_r+0x330>
    da8a:	2d10      	cmp	r5, #16
    da8c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    da90:	4e2c      	ldr	r6, [pc, #176]	; (db44 <_svfprintf_r+0xa34>)
    da92:	dd24      	ble.n	dade <_svfprintf_r+0x9ce>
    da94:	9417      	str	r4, [sp, #92]	; 0x5c
    da96:	2310      	movs	r3, #16
    da98:	ee1b 4a10 	vmov	r4, s22
    da9c:	4608      	mov	r0, r1
    da9e:	e004      	b.n	daaa <_svfprintf_r+0x99a>
    daa0:	3d10      	subs	r5, #16
    daa2:	2d10      	cmp	r5, #16
    daa4:	f10a 0a08 	add.w	sl, sl, #8
    daa8:	dd17      	ble.n	dada <_svfprintf_r+0x9ca>
    daaa:	3001      	adds	r0, #1
    daac:	3210      	adds	r2, #16
    daae:	2807      	cmp	r0, #7
    dab0:	e9ca 6300 	strd	r6, r3, [sl]
    dab4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    dab8:	ddf2      	ble.n	daa0 <_svfprintf_r+0x990>
    daba:	aa24      	add	r2, sp, #144	; 0x90
    dabc:	4621      	mov	r1, r4
    dabe:	4658      	mov	r0, fp
    dac0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dac4:	f002 fa2c 	bl	ff20 <__ssprint_r>
    dac8:	2800      	cmp	r0, #0
    daca:	d186      	bne.n	d9da <_svfprintf_r+0x8ca>
    dacc:	3d10      	subs	r5, #16
    dace:	2d10      	cmp	r5, #16
    dad0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    dad4:	f04f 0310 	mov.w	r3, #16
    dad8:	dce7      	bgt.n	daaa <_svfprintf_r+0x99a>
    dada:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    dadc:	4601      	mov	r1, r0
    dade:	3101      	adds	r1, #1
    dae0:	442a      	add	r2, r5
    dae2:	2907      	cmp	r1, #7
    dae4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    dae8:	f8ca 6000 	str.w	r6, [sl]
    daec:	f8ca 5004 	str.w	r5, [sl, #4]
    daf0:	f300 83bd 	bgt.w	e26e <_svfprintf_r+0x115e>
    daf4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    daf8:	f10a 0a08 	add.w	sl, sl, #8
    dafc:	e45d      	b.n	d3ba <_svfprintf_r+0x2aa>
    dafe:	f8cd 8008 	str.w	r8, [sp, #8]
    db02:	2a0a      	cmp	r2, #10
    db04:	f171 0300 	sbcs.w	r3, r1, #0
    db08:	f080 8345 	bcs.w	e196 <_svfprintf_r+0x1086>
    db0c:	3230      	adds	r2, #48	; 0x30
    db0e:	2301      	movs	r3, #1
    db10:	f8dd 8008 	ldr.w	r8, [sp, #8]
    db14:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    db18:	9305      	str	r3, [sp, #20]
    db1a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    db1e:	e668      	b.n	d7f2 <_svfprintf_r+0x6e2>
    db20:	ee1b 1a10 	vmov	r1, s22
    db24:	aa24      	add	r2, sp, #144	; 0x90
    db26:	4658      	mov	r0, fp
    db28:	f002 f9fa 	bl	ff20 <__ssprint_r>
    db2c:	2800      	cmp	r0, #0
    db2e:	f47f af54 	bne.w	d9da <_svfprintf_r+0x8ca>
    db32:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db38:	e452      	b.n	d3e0 <_svfprintf_r+0x2d0>
    db3a:	bf00      	nop
    db3c:	20000d24 	.word	0x20000d24
    db40:	200012ac 	.word	0x200012ac
    db44:	20000d28 	.word	0x20000d28
    db48:	ee1b 1a10 	vmov	r1, s22
    db4c:	aa24      	add	r2, sp, #144	; 0x90
    db4e:	4658      	mov	r0, fp
    db50:	f002 f9e6 	bl	ff20 <__ssprint_r>
    db54:	2800      	cmp	r0, #0
    db56:	f47f af40 	bne.w	d9da <_svfprintf_r+0x8ca>
    db5a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    db5c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db60:	e451      	b.n	d406 <_svfprintf_r+0x2f6>
    db62:	2c10      	cmp	r4, #16
    db64:	9b25      	ldr	r3, [sp, #148]	; 0x94
    db66:	4ebe      	ldr	r6, [pc, #760]	; (de60 <_svfprintf_r+0xd50>)
    db68:	dd1f      	ble.n	dbaa <_svfprintf_r+0xa9a>
    db6a:	ee1b 8a10 	vmov	r8, s22
    db6e:	2510      	movs	r5, #16
    db70:	e004      	b.n	db7c <_svfprintf_r+0xa6c>
    db72:	3c10      	subs	r4, #16
    db74:	2c10      	cmp	r4, #16
    db76:	f10a 0a08 	add.w	sl, sl, #8
    db7a:	dd16      	ble.n	dbaa <_svfprintf_r+0xa9a>
    db7c:	3301      	adds	r3, #1
    db7e:	3210      	adds	r2, #16
    db80:	2b07      	cmp	r3, #7
    db82:	e9ca 6500 	strd	r6, r5, [sl]
    db86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    db8a:	ddf2      	ble.n	db72 <_svfprintf_r+0xa62>
    db8c:	aa24      	add	r2, sp, #144	; 0x90
    db8e:	4641      	mov	r1, r8
    db90:	4658      	mov	r0, fp
    db92:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    db96:	f002 f9c3 	bl	ff20 <__ssprint_r>
    db9a:	2800      	cmp	r0, #0
    db9c:	f47f af1d 	bne.w	d9da <_svfprintf_r+0x8ca>
    dba0:	3c10      	subs	r4, #16
    dba2:	2c10      	cmp	r4, #16
    dba4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dba8:	dce8      	bgt.n	db7c <_svfprintf_r+0xa6c>
    dbaa:	3301      	adds	r3, #1
    dbac:	4422      	add	r2, r4
    dbae:	2b07      	cmp	r3, #7
    dbb0:	e9ca 6400 	strd	r6, r4, [sl]
    dbb4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dbb8:	f77f ac4b 	ble.w	d452 <_svfprintf_r+0x342>
    dbbc:	ee1b 1a10 	vmov	r1, s22
    dbc0:	aa24      	add	r2, sp, #144	; 0x90
    dbc2:	4658      	mov	r0, fp
    dbc4:	f002 f9ac 	bl	ff20 <__ssprint_r>
    dbc8:	2800      	cmp	r0, #0
    dbca:	f47f af06 	bne.w	d9da <_svfprintf_r+0x8ca>
    dbce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dbd0:	e43f      	b.n	d452 <_svfprintf_r+0x342>
    dbd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    dbd4:	2900      	cmp	r1, #0
    dbd6:	f340 835a 	ble.w	e28e <_svfprintf_r+0x117e>
    dbda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    dbdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dbde:	429e      	cmp	r6, r3
    dbe0:	bfa8      	it	ge
    dbe2:	461e      	movge	r6, r3
    dbe4:	2e00      	cmp	r6, #0
    dbe6:	dd0b      	ble.n	dc00 <_svfprintf_r+0xaf0>
    dbe8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dbea:	3301      	adds	r3, #1
    dbec:	4432      	add	r2, r6
    dbee:	2b07      	cmp	r3, #7
    dbf0:	e9ca 4600 	strd	r4, r6, [sl]
    dbf4:	9226      	str	r2, [sp, #152]	; 0x98
    dbf6:	9325      	str	r3, [sp, #148]	; 0x94
    dbf8:	f300 8689 	bgt.w	e90e <_svfprintf_r+0x17fe>
    dbfc:	f10a 0a08 	add.w	sl, sl, #8
    dc00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    dc02:	2e00      	cmp	r6, #0
    dc04:	bfa8      	it	ge
    dc06:	1bad      	subge	r5, r5, r6
    dc08:	2d00      	cmp	r5, #0
    dc0a:	f300 8203 	bgt.w	e014 <_svfprintf_r+0xf04>
    dc0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dc10:	f418 6f80 	tst.w	r8, #1024	; 0x400
    dc14:	4423      	add	r3, r4
    dc16:	9305      	str	r3, [sp, #20]
    dc18:	f040 821f 	bne.w	e05a <_svfprintf_r+0xf4a>
    dc1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    dc1e:	990e      	ldr	r1, [sp, #56]	; 0x38
    dc20:	428b      	cmp	r3, r1
    dc22:	db03      	blt.n	dc2c <_svfprintf_r+0xb1c>
    dc24:	f018 0f01 	tst.w	r8, #1
    dc28:	f000 84cf 	beq.w	e5ca <_svfprintf_r+0x14ba>
    dc2c:	9910      	ldr	r1, [sp, #64]	; 0x40
    dc2e:	9812      	ldr	r0, [sp, #72]	; 0x48
    dc30:	440a      	add	r2, r1
    dc32:	e9ca 0100 	strd	r0, r1, [sl]
    dc36:	9925      	ldr	r1, [sp, #148]	; 0x94
    dc38:	9226      	str	r2, [sp, #152]	; 0x98
    dc3a:	3101      	adds	r1, #1
    dc3c:	2907      	cmp	r1, #7
    dc3e:	9125      	str	r1, [sp, #148]	; 0x94
    dc40:	f300 86a5 	bgt.w	e98e <_svfprintf_r+0x187e>
    dc44:	f10a 0a08 	add.w	sl, sl, #8
    dc48:	990e      	ldr	r1, [sp, #56]	; 0x38
    dc4a:	1865      	adds	r5, r4, r1
    dc4c:	1acc      	subs	r4, r1, r3
    dc4e:	9b05      	ldr	r3, [sp, #20]
    dc50:	1aed      	subs	r5, r5, r3
    dc52:	42a5      	cmp	r5, r4
    dc54:	bfa8      	it	ge
    dc56:	4625      	movge	r5, r4
    dc58:	2d00      	cmp	r5, #0
    dc5a:	dd0d      	ble.n	dc78 <_svfprintf_r+0xb68>
    dc5c:	f8ca 3000 	str.w	r3, [sl]
    dc60:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dc62:	f8ca 5004 	str.w	r5, [sl, #4]
    dc66:	3301      	adds	r3, #1
    dc68:	442a      	add	r2, r5
    dc6a:	2b07      	cmp	r3, #7
    dc6c:	9226      	str	r2, [sp, #152]	; 0x98
    dc6e:	9325      	str	r3, [sp, #148]	; 0x94
    dc70:	f300 86bb 	bgt.w	e9ea <_svfprintf_r+0x18da>
    dc74:	f10a 0a08 	add.w	sl, sl, #8
    dc78:	2d00      	cmp	r5, #0
    dc7a:	bfa8      	it	ge
    dc7c:	1b64      	subge	r4, r4, r5
    dc7e:	2c00      	cmp	r4, #0
    dc80:	f77f abde 	ble.w	d440 <_svfprintf_r+0x330>
    dc84:	2c10      	cmp	r4, #16
    dc86:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dc88:	f340 837c 	ble.w	e384 <_svfprintf_r+0x1274>
    dc8c:	ee1b 6a10 	vmov	r6, s22
    dc90:	2510      	movs	r5, #16
    dc92:	e005      	b.n	dca0 <_svfprintf_r+0xb90>
    dc94:	f10a 0a08 	add.w	sl, sl, #8
    dc98:	3c10      	subs	r4, #16
    dc9a:	2c10      	cmp	r4, #16
    dc9c:	f340 8372 	ble.w	e384 <_svfprintf_r+0x1274>
    dca0:	3301      	adds	r3, #1
    dca2:	4970      	ldr	r1, [pc, #448]	; (de64 <_svfprintf_r+0xd54>)
    dca4:	3210      	adds	r2, #16
    dca6:	2b07      	cmp	r3, #7
    dca8:	e9ca 1500 	strd	r1, r5, [sl]
    dcac:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dcb0:	ddf0      	ble.n	dc94 <_svfprintf_r+0xb84>
    dcb2:	aa24      	add	r2, sp, #144	; 0x90
    dcb4:	4631      	mov	r1, r6
    dcb6:	4658      	mov	r0, fp
    dcb8:	f002 f932 	bl	ff20 <__ssprint_r>
    dcbc:	2800      	cmp	r0, #0
    dcbe:	f47f ae8c 	bne.w	d9da <_svfprintf_r+0x8ca>
    dcc2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dcc6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dcca:	e7e5      	b.n	dc98 <_svfprintf_r+0xb88>
    dccc:	2b30      	cmp	r3, #48	; 0x30
    dcce:	f43f ad8b 	beq.w	d7e8 <_svfprintf_r+0x6d8>
    dcd2:	2330      	movs	r3, #48	; 0x30
    dcd4:	3802      	subs	r0, #2
    dcd6:	f804 3c01 	strb.w	r3, [r4, #-1]
    dcda:	ab50      	add	r3, sp, #320	; 0x140
    dcdc:	1a1b      	subs	r3, r3, r0
    dcde:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dce2:	9305      	str	r3, [sp, #20]
    dce4:	4604      	mov	r4, r0
    dce6:	e584      	b.n	d7f2 <_svfprintf_r+0x6e2>
    dce8:	f018 0f01 	tst.w	r8, #1
    dcec:	f47f ae82 	bne.w	d9f4 <_svfprintf_r+0x8e4>
    dcf0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    dcf2:	f8ca 4000 	str.w	r4, [sl]
    dcf6:	3301      	adds	r3, #1
    dcf8:	3201      	adds	r2, #1
    dcfa:	2101      	movs	r1, #1
    dcfc:	2b07      	cmp	r3, #7
    dcfe:	9226      	str	r2, [sp, #152]	; 0x98
    dd00:	9325      	str	r3, [sp, #148]	; 0x94
    dd02:	f8ca 1004 	str.w	r1, [sl, #4]
    dd06:	f77f aea5 	ble.w	da54 <_svfprintf_r+0x944>
    dd0a:	ee1b 1a10 	vmov	r1, s22
    dd0e:	aa24      	add	r2, sp, #144	; 0x90
    dd10:	4658      	mov	r0, fp
    dd12:	f002 f905 	bl	ff20 <__ssprint_r>
    dd16:	2800      	cmp	r0, #0
    dd18:	f47f ae5f 	bne.w	d9da <_svfprintf_r+0x8ca>
    dd1c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dd20:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd24:	e698      	b.n	da58 <_svfprintf_r+0x948>
    dd26:	990e      	ldr	r1, [sp, #56]	; 0x38
    dd28:	1e4c      	subs	r4, r1, #1
    dd2a:	2c00      	cmp	r4, #0
    dd2c:	f77f ae94 	ble.w	da58 <_svfprintf_r+0x948>
    dd30:	2c10      	cmp	r4, #16
    dd32:	f340 8361 	ble.w	e3f8 <_svfprintf_r+0x12e8>
    dd36:	ee1b 6a10 	vmov	r6, s22
    dd3a:	2510      	movs	r5, #16
    dd3c:	e005      	b.n	dd4a <_svfprintf_r+0xc3a>
    dd3e:	f10a 0a08 	add.w	sl, sl, #8
    dd42:	3c10      	subs	r4, #16
    dd44:	2c10      	cmp	r4, #16
    dd46:	f340 8357 	ble.w	e3f8 <_svfprintf_r+0x12e8>
    dd4a:	3301      	adds	r3, #1
    dd4c:	4945      	ldr	r1, [pc, #276]	; (de64 <_svfprintf_r+0xd54>)
    dd4e:	3210      	adds	r2, #16
    dd50:	2b07      	cmp	r3, #7
    dd52:	e9ca 1500 	strd	r1, r5, [sl]
    dd56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    dd5a:	ddf0      	ble.n	dd3e <_svfprintf_r+0xc2e>
    dd5c:	aa24      	add	r2, sp, #144	; 0x90
    dd5e:	4631      	mov	r1, r6
    dd60:	4658      	mov	r0, fp
    dd62:	f002 f8dd 	bl	ff20 <__ssprint_r>
    dd66:	2800      	cmp	r0, #0
    dd68:	f47f ae37 	bne.w	d9da <_svfprintf_r+0x8ca>
    dd6c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    dd70:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd74:	e7e5      	b.n	dd42 <_svfprintf_r+0xc32>
    dd76:	ee1b 1a10 	vmov	r1, s22
    dd7a:	aa24      	add	r2, sp, #144	; 0x90
    dd7c:	4658      	mov	r0, fp
    dd7e:	f002 f8cf 	bl	ff20 <__ssprint_r>
    dd82:	2800      	cmp	r0, #0
    dd84:	f47f ae29 	bne.w	d9da <_svfprintf_r+0x8ca>
    dd88:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dd8a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dd8e:	f7ff bb44 	b.w	d41a <_svfprintf_r+0x30a>
    dd92:	9b02      	ldr	r3, [sp, #8]
    dd94:	f013 0310 	ands.w	r3, r3, #16
    dd98:	f040 80c1 	bne.w	df1e <_svfprintf_r+0xe0e>
    dd9c:	9a02      	ldr	r2, [sp, #8]
    dd9e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    dda2:	f000 837a 	beq.w	e49a <_svfprintf_r+0x138a>
    dda6:	9808      	ldr	r0, [sp, #32]
    dda8:	f850 2b04 	ldr.w	r2, [r0], #4
    ddac:	9008      	str	r0, [sp, #32]
    ddae:	4619      	mov	r1, r3
    ddb0:	b292      	uxth	r2, r2
    ddb2:	2301      	movs	r3, #1
    ddb4:	e451      	b.n	d65a <_svfprintf_r+0x54a>
    ddb6:	f018 0310 	ands.w	r3, r8, #16
    ddba:	d155      	bne.n	de68 <_svfprintf_r+0xd58>
    ddbc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ddc0:	f000 835d 	beq.w	e47e <_svfprintf_r+0x136e>
    ddc4:	9808      	ldr	r0, [sp, #32]
    ddc6:	f850 2b04 	ldr.w	r2, [r0], #4
    ddca:	9008      	str	r0, [sp, #32]
    ddcc:	4619      	mov	r1, r3
    ddce:	b292      	uxth	r2, r2
    ddd0:	e4a8      	b.n	d724 <_svfprintf_r+0x614>
    ddd2:	4252      	negs	r2, r2
    ddd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ddd8:	f8cd 8008 	str.w	r8, [sp, #8]
    dddc:	202d      	movs	r0, #45	; 0x2d
    ddde:	2301      	movs	r3, #1
    dde0:	e43c      	b.n	d65c <_svfprintf_r+0x54c>
    dde2:	ee1b 1a10 	vmov	r1, s22
    dde6:	aa24      	add	r2, sp, #144	; 0x90
    dde8:	4658      	mov	r0, fp
    ddea:	f002 f899 	bl	ff20 <__ssprint_r>
    ddee:	2800      	cmp	r0, #0
    ddf0:	f47f adf3 	bne.w	d9da <_svfprintf_r+0x8ca>
    ddf4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ddf8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ddfc:	e616      	b.n	da2c <_svfprintf_r+0x91c>
    ddfe:	ee1b 1a10 	vmov	r1, s22
    de02:	aa24      	add	r2, sp, #144	; 0x90
    de04:	4658      	mov	r0, fp
    de06:	f002 f88b 	bl	ff20 <__ssprint_r>
    de0a:	2800      	cmp	r0, #0
    de0c:	f47f ade5 	bne.w	d9da <_svfprintf_r+0x8ca>
    de10:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    de14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    de18:	e5fb      	b.n	da12 <_svfprintf_r+0x902>
    de1a:	f018 0f01 	tst.w	r8, #1
    de1e:	f43f ab0f 	beq.w	d440 <_svfprintf_r+0x330>
    de22:	e52a      	b.n	d87a <_svfprintf_r+0x76a>
    de24:	9308      	str	r3, [sp, #32]
    de26:	f899 3000 	ldrb.w	r3, [r9]
    de2a:	f7ff b9cd 	b.w	d1c8 <_svfprintf_r+0xb8>
    de2e:	ac50      	add	r4, sp, #320	; 0x140
    de30:	e4df      	b.n	d7f2 <_svfprintf_r+0x6e2>
    de32:	f418 7f00 	tst.w	r8, #512	; 0x200
    de36:	f040 83db 	bne.w	e5f0 <_svfprintf_r+0x14e0>
    de3a:	f853 2b04 	ldr.w	r2, [r3], #4
    de3e:	9308      	str	r3, [sp, #32]
    de40:	17d1      	asrs	r1, r2, #31
    de42:	460b      	mov	r3, r1
    de44:	f7ff bbb6 	b.w	d5b4 <_svfprintf_r+0x4a4>
    de48:	9b08      	ldr	r3, [sp, #32]
    de4a:	9804      	ldr	r0, [sp, #16]
    de4c:	f853 1b04 	ldr.w	r1, [r3], #4
    de50:	9308      	str	r3, [sp, #32]
    de52:	17c2      	asrs	r2, r0, #31
    de54:	e9c1 0200 	strd	r0, r2, [r1]
    de58:	464c      	mov	r4, r9
    de5a:	f7ff b98b 	b.w	d174 <_svfprintf_r+0x64>
    de5e:	bf00      	nop
    de60:	20000d28 	.word	0x20000d28
    de64:	200012ac 	.word	0x200012ac
    de68:	9b08      	ldr	r3, [sp, #32]
    de6a:	f853 2b04 	ldr.w	r2, [r3], #4
    de6e:	9308      	str	r3, [sp, #32]
    de70:	e458      	b.n	d724 <_svfprintf_r+0x614>
    de72:	eeb4 8b48 	vcmp.f64	d8, d8
    de76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de7a:	f180 8694 	bvs.w	eba6 <_svfprintf_r+0x1a96>
    de7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de80:	2b61      	cmp	r3, #97	; 0x61
    de82:	f000 8552 	beq.w	e92a <_svfprintf_r+0x181a>
    de86:	2b41      	cmp	r3, #65	; 0x41
    de88:	f000 85c0 	beq.w	ea0c <_svfprintf_r+0x18fc>
    de8c:	9b03      	ldr	r3, [sp, #12]
    de8e:	3301      	adds	r3, #1
    de90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de92:	f023 0520 	bic.w	r5, r3, #32
    de96:	f000 8480 	beq.w	e79a <_svfprintf_r+0x168a>
    de9a:	2d47      	cmp	r5, #71	; 0x47
    de9c:	d104      	bne.n	dea8 <_svfprintf_r+0xd98>
    de9e:	9b03      	ldr	r3, [sp, #12]
    dea0:	2b00      	cmp	r3, #0
    dea2:	bf08      	it	eq
    dea4:	2301      	moveq	r3, #1
    dea6:	9303      	str	r3, [sp, #12]
    dea8:	ee18 3a90 	vmov	r3, s17
    deac:	2b00      	cmp	r3, #0
    deae:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    deb2:	4646      	mov	r6, r8
    deb4:	f2c0 8618 	blt.w	eae8 <_svfprintf_r+0x19d8>
    deb8:	eeb0 ab48 	vmov.f64	d10, d8
    debc:	2300      	movs	r3, #0
    debe:	4690      	mov	r8, r2
    dec0:	9309      	str	r3, [sp, #36]	; 0x24
    dec2:	9307      	str	r3, [sp, #28]
    dec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dec6:	3b41      	subs	r3, #65	; 0x41
    dec8:	2b25      	cmp	r3, #37	; 0x25
    deca:	f200 8398 	bhi.w	e5fe <_svfprintf_r+0x14ee>
    dece:	e8df f013 	tbh	[pc, r3, lsl #1]
    ded2:	046f      	.short	0x046f
    ded4:	03960396 	.word	0x03960396
    ded8:	04680396 	.word	0x04680396
    dedc:	0396046c 	.word	0x0396046c
    dee0:	03960396 	.word	0x03960396
    dee4:	03960396 	.word	0x03960396
    dee8:	03960396 	.word	0x03960396
    deec:	03960396 	.word	0x03960396
    def0:	03960396 	.word	0x03960396
    def4:	03960396 	.word	0x03960396
    def8:	03960396 	.word	0x03960396
    defc:	03960396 	.word	0x03960396
    df00:	03960396 	.word	0x03960396
    df04:	03960396 	.word	0x03960396
    df08:	03960396 	.word	0x03960396
    df0c:	03960396 	.word	0x03960396
    df10:	03960396 	.word	0x03960396
    df14:	03960396 	.word	0x03960396
    df18:	04680396 	.word	0x04680396
    df1c:	046c      	.short	0x046c
    df1e:	9b08      	ldr	r3, [sp, #32]
    df20:	f853 2b04 	ldr.w	r2, [r3], #4
    df24:	9308      	str	r3, [sp, #32]
    df26:	2301      	movs	r3, #1
    df28:	f7ff bb97 	b.w	d65a <_svfprintf_r+0x54a>
    df2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df2e:	2b00      	cmp	r3, #0
    df30:	f43f a9cf 	beq.w	d2d2 <_svfprintf_r+0x1c2>
    df34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	2b00      	cmp	r3, #0
    df3a:	f43f a9ca 	beq.w	d2d2 <_svfprintf_r+0x1c2>
    df3e:	f899 3000 	ldrb.w	r3, [r9]
    df42:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    df46:	f7ff b93f 	b.w	d1c8 <_svfprintf_r+0xb8>
    df4a:	930b      	str	r3, [sp, #44]	; 0x2c
    df4c:	f8cd 8008 	str.w	r8, [sp, #8]
    df50:	f7ff bbf1 	b.w	d736 <_svfprintf_r+0x626>
    df54:	930b      	str	r3, [sp, #44]	; 0x2c
    df56:	4b9a      	ldr	r3, [pc, #616]	; (e1c0 <_svfprintf_r+0x10b0>)
    df58:	9311      	str	r3, [sp, #68]	; 0x44
    df5a:	f018 0120 	ands.w	r1, r8, #32
    df5e:	f000 8105 	beq.w	e16c <_svfprintf_r+0x105c>
    df62:	9b08      	ldr	r3, [sp, #32]
    df64:	3307      	adds	r3, #7
    df66:	f023 0307 	bic.w	r3, r3, #7
    df6a:	6859      	ldr	r1, [r3, #4]
    df6c:	f853 2b08 	ldr.w	r2, [r3], #8
    df70:	9308      	str	r3, [sp, #32]
    df72:	f018 0f01 	tst.w	r8, #1
    df76:	d00a      	beq.n	df8e <_svfprintf_r+0xe7e>
    df78:	ea52 0301 	orrs.w	r3, r2, r1
    df7c:	d007      	beq.n	df8e <_svfprintf_r+0xe7e>
    df7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df80:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    df84:	2330      	movs	r3, #48	; 0x30
    df86:	f048 0802 	orr.w	r8, r8, #2
    df8a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    df8e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    df92:	9302      	str	r3, [sp, #8]
    df94:	2302      	movs	r3, #2
    df96:	f7ff bb60 	b.w	d65a <_svfprintf_r+0x54a>
    df9a:	930b      	str	r3, [sp, #44]	; 0x2c
    df9c:	f7ff bbb6 	b.w	d70c <_svfprintf_r+0x5fc>
    dfa0:	930b      	str	r3, [sp, #44]	; 0x2c
    dfa2:	4b88      	ldr	r3, [pc, #544]	; (e1c4 <_svfprintf_r+0x10b4>)
    dfa4:	9311      	str	r3, [sp, #68]	; 0x44
    dfa6:	e7d8      	b.n	df5a <_svfprintf_r+0xe4a>
    dfa8:	9b08      	ldr	r3, [sp, #32]
    dfaa:	2101      	movs	r1, #1
    dfac:	f853 2b04 	ldr.w	r2, [r3], #4
    dfb0:	9102      	str	r1, [sp, #8]
    dfb2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    dfb6:	9308      	str	r3, [sp, #32]
    dfb8:	9105      	str	r1, [sp, #20]
    dfba:	ac37      	add	r4, sp, #220	; 0xdc
    dfbc:	f7ff baaf 	b.w	d51e <_svfprintf_r+0x40e>
    dfc0:	ee1b 1a10 	vmov	r1, s22
    dfc4:	aa24      	add	r2, sp, #144	; 0x90
    dfc6:	4658      	mov	r0, fp
    dfc8:	f001 ffaa 	bl	ff20 <__ssprint_r>
    dfcc:	2800      	cmp	r0, #0
    dfce:	f47f ad04 	bne.w	d9da <_svfprintf_r+0x8ca>
    dfd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    dfd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    dfd8:	e45d      	b.n	d896 <_svfprintf_r+0x786>
    dfda:	9b03      	ldr	r3, [sp, #12]
    dfdc:	9407      	str	r4, [sp, #28]
    dfde:	2b06      	cmp	r3, #6
    dfe0:	4622      	mov	r2, r4
    dfe2:	bf28      	it	cs
    dfe4:	2306      	movcs	r3, #6
    dfe6:	9403      	str	r4, [sp, #12]
    dfe8:	4621      	mov	r1, r4
    dfea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    dfee:	4c76      	ldr	r4, [pc, #472]	; (e1c8 <_svfprintf_r+0x10b8>)
    dff0:	9302      	str	r3, [sp, #8]
    dff2:	9305      	str	r3, [sp, #20]
    dff4:	920f      	str	r2, [sp, #60]	; 0x3c
    dff6:	f7ff ba6c 	b.w	d4d2 <_svfprintf_r+0x3c2>
    dffa:	2140      	movs	r1, #64	; 0x40
    dffc:	4658      	mov	r0, fp
    dffe:	f7fc fefd 	bl	adfc <_malloc_r>
    e002:	6020      	str	r0, [r4, #0]
    e004:	6120      	str	r0, [r4, #16]
    e006:	2800      	cmp	r0, #0
    e008:	f000 860f 	beq.w	ec2a <_svfprintf_r+0x1b1a>
    e00c:	2340      	movs	r3, #64	; 0x40
    e00e:	6163      	str	r3, [r4, #20]
    e010:	f7ff b89e 	b.w	d150 <_svfprintf_r+0x40>
    e014:	2d10      	cmp	r5, #16
    e016:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e018:	f340 825d 	ble.w	e4d6 <_svfprintf_r+0x13c6>
    e01c:	4651      	mov	r1, sl
    e01e:	2610      	movs	r6, #16
    e020:	ee1b aa10 	vmov	sl, s22
    e024:	e004      	b.n	e030 <_svfprintf_r+0xf20>
    e026:	3108      	adds	r1, #8
    e028:	3d10      	subs	r5, #16
    e02a:	2d10      	cmp	r5, #16
    e02c:	f340 8252 	ble.w	e4d4 <_svfprintf_r+0x13c4>
    e030:	3301      	adds	r3, #1
    e032:	4866      	ldr	r0, [pc, #408]	; (e1cc <_svfprintf_r+0x10bc>)
    e034:	3210      	adds	r2, #16
    e036:	2b07      	cmp	r3, #7
    e038:	e9c1 0600 	strd	r0, r6, [r1]
    e03c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e040:	ddf1      	ble.n	e026 <_svfprintf_r+0xf16>
    e042:	aa24      	add	r2, sp, #144	; 0x90
    e044:	4651      	mov	r1, sl
    e046:	4658      	mov	r0, fp
    e048:	f001 ff6a 	bl	ff20 <__ssprint_r>
    e04c:	2800      	cmp	r0, #0
    e04e:	f47f acc4 	bne.w	d9da <_svfprintf_r+0x8ca>
    e052:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e056:	a927      	add	r1, sp, #156	; 0x9c
    e058:	e7e6      	b.n	e028 <_svfprintf_r+0xf18>
    e05a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e05c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    e060:	18e3      	adds	r3, r4, r3
    e062:	9303      	str	r3, [sp, #12]
    e064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e066:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    e06a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    e06c:	9d05      	ldr	r5, [sp, #20]
    e06e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    e072:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    e076:	940b      	str	r4, [sp, #44]	; 0x2c
    e078:	ee1b 1a10 	vmov	r1, s22
    e07c:	4650      	mov	r0, sl
    e07e:	2b00      	cmp	r3, #0
    e080:	d034      	beq.n	e0ec <_svfprintf_r+0xfdc>
    e082:	f1b8 0f00 	cmp.w	r8, #0
    e086:	d135      	bne.n	e0f4 <_svfprintf_r+0xfe4>
    e088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e08a:	3b01      	subs	r3, #1
    e08c:	3e01      	subs	r6, #1
    e08e:	930d      	str	r3, [sp, #52]	; 0x34
    e090:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e092:	e9c0 3900 	strd	r3, r9, [r0]
    e096:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e098:	3301      	adds	r3, #1
    e09a:	444a      	add	r2, r9
    e09c:	2b07      	cmp	r3, #7
    e09e:	9226      	str	r2, [sp, #152]	; 0x98
    e0a0:	9325      	str	r3, [sp, #148]	; 0x94
    e0a2:	dc6c      	bgt.n	e17e <_svfprintf_r+0x106e>
    e0a4:	3008      	adds	r0, #8
    e0a6:	9b03      	ldr	r3, [sp, #12]
    e0a8:	f896 c000 	ldrb.w	ip, [r6]
    e0ac:	1b5b      	subs	r3, r3, r5
    e0ae:	4563      	cmp	r3, ip
    e0b0:	bfa8      	it	ge
    e0b2:	4663      	movge	r3, ip
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	469a      	mov	sl, r3
    e0b8:	dd0c      	ble.n	e0d4 <_svfprintf_r+0xfc4>
    e0ba:	9c25      	ldr	r4, [sp, #148]	; 0x94
    e0bc:	3401      	adds	r4, #1
    e0be:	441a      	add	r2, r3
    e0c0:	2c07      	cmp	r4, #7
    e0c2:	e9c0 5300 	strd	r5, r3, [r0]
    e0c6:	9226      	str	r2, [sp, #152]	; 0x98
    e0c8:	9425      	str	r4, [sp, #148]	; 0x94
    e0ca:	f300 8177 	bgt.w	e3bc <_svfprintf_r+0x12ac>
    e0ce:	f896 c000 	ldrb.w	ip, [r6]
    e0d2:	3008      	adds	r0, #8
    e0d4:	f1ba 0f00 	cmp.w	sl, #0
    e0d8:	bfac      	ite	ge
    e0da:	ebac 040a 	subge.w	r4, ip, sl
    e0de:	4664      	movlt	r4, ip
    e0e0:	2c00      	cmp	r4, #0
    e0e2:	dc0a      	bgt.n	e0fa <_svfprintf_r+0xfea>
    e0e4:	4465      	add	r5, ip
    e0e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d1ca      	bne.n	e082 <_svfprintf_r+0xf72>
    e0ec:	f1b8 0f00 	cmp.w	r8, #0
    e0f0:	f000 83ac 	beq.w	e84c <_svfprintf_r+0x173c>
    e0f4:	f108 38ff 	add.w	r8, r8, #4294967295
    e0f8:	e7ca      	b.n	e090 <_svfprintf_r+0xf80>
    e0fa:	2c10      	cmp	r4, #16
    e0fc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    e100:	dd24      	ble.n	e14c <_svfprintf_r+0x103c>
    e102:	9505      	str	r5, [sp, #20]
    e104:	f04f 0a10 	mov.w	sl, #16
    e108:	4663      	mov	r3, ip
    e10a:	460d      	mov	r5, r1
    e10c:	e004      	b.n	e118 <_svfprintf_r+0x1008>
    e10e:	3c10      	subs	r4, #16
    e110:	2c10      	cmp	r4, #16
    e112:	f100 0008 	add.w	r0, r0, #8
    e116:	dd16      	ble.n	e146 <_svfprintf_r+0x1036>
    e118:	3301      	adds	r3, #1
    e11a:	492c      	ldr	r1, [pc, #176]	; (e1cc <_svfprintf_r+0x10bc>)
    e11c:	3210      	adds	r2, #16
    e11e:	2b07      	cmp	r3, #7
    e120:	e9c0 1a00 	strd	r1, sl, [r0]
    e124:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e128:	ddf1      	ble.n	e10e <_svfprintf_r+0xffe>
    e12a:	aa24      	add	r2, sp, #144	; 0x90
    e12c:	4629      	mov	r1, r5
    e12e:	4658      	mov	r0, fp
    e130:	f001 fef6 	bl	ff20 <__ssprint_r>
    e134:	2800      	cmp	r0, #0
    e136:	f47f ac50 	bne.w	d9da <_svfprintf_r+0x8ca>
    e13a:	3c10      	subs	r4, #16
    e13c:	2c10      	cmp	r4, #16
    e13e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e142:	a827      	add	r0, sp, #156	; 0x9c
    e144:	dce8      	bgt.n	e118 <_svfprintf_r+0x1008>
    e146:	4629      	mov	r1, r5
    e148:	9d05      	ldr	r5, [sp, #20]
    e14a:	469c      	mov	ip, r3
    e14c:	f10c 0301 	add.w	r3, ip, #1
    e150:	4422      	add	r2, r4
    e152:	6044      	str	r4, [r0, #4]
    e154:	2b07      	cmp	r3, #7
    e156:	4c1d      	ldr	r4, [pc, #116]	; (e1cc <_svfprintf_r+0x10bc>)
    e158:	6004      	str	r4, [r0, #0]
    e15a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e15e:	f300 83c6 	bgt.w	e8ee <_svfprintf_r+0x17de>
    e162:	f896 c000 	ldrb.w	ip, [r6]
    e166:	3008      	adds	r0, #8
    e168:	4465      	add	r5, ip
    e16a:	e7bc      	b.n	e0e6 <_svfprintf_r+0xfd6>
    e16c:	f018 0310 	ands.w	r3, r8, #16
    e170:	f000 80c2 	beq.w	e2f8 <_svfprintf_r+0x11e8>
    e174:	9b08      	ldr	r3, [sp, #32]
    e176:	f853 2b04 	ldr.w	r2, [r3], #4
    e17a:	9308      	str	r3, [sp, #32]
    e17c:	e6f9      	b.n	df72 <_svfprintf_r+0xe62>
    e17e:	aa24      	add	r2, sp, #144	; 0x90
    e180:	4658      	mov	r0, fp
    e182:	9105      	str	r1, [sp, #20]
    e184:	f001 fecc 	bl	ff20 <__ssprint_r>
    e188:	2800      	cmp	r0, #0
    e18a:	f47f ac26 	bne.w	d9da <_svfprintf_r+0x8ca>
    e18e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e190:	9905      	ldr	r1, [sp, #20]
    e192:	a827      	add	r0, sp, #156	; 0x9c
    e194:	e787      	b.n	e0a6 <_svfprintf_r+0xf96>
    e196:	9802      	ldr	r0, [sp, #8]
    e198:	f8cd a01c 	str.w	sl, [sp, #28]
    e19c:	ac50      	add	r4, sp, #320	; 0x140
    e19e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    e1a2:	2500      	movs	r5, #0
    e1a4:	ee0a ba10 	vmov	s20, fp
    e1a8:	4b09      	ldr	r3, [pc, #36]	; (e1d0 <_svfprintf_r+0x10c0>)
    e1aa:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    e1ae:	f8cd 9014 	str.w	r9, [sp, #20]
    e1b2:	46a3      	mov	fp, r4
    e1b4:	f04f 0805 	mov.w	r8, #5
    e1b8:	46ac      	mov	ip, r5
    e1ba:	4604      	mov	r4, r0
    e1bc:	e010      	b.n	e1e0 <_svfprintf_r+0x10d0>
    e1be:	bf00      	nop
    e1c0:	20000cf4 	.word	0x20000cf4
    e1c4:	20000d08 	.word	0x20000d08
    e1c8:	20000d1c 	.word	0x20000d1c
    e1cc:	200012ac 	.word	0x200012ac
    e1d0:	cccccccd 	.word	0xcccccccd
    e1d4:	2a0a      	cmp	r2, #10
    e1d6:	f171 0100 	sbcs.w	r1, r1, #0
    e1da:	d336      	bcc.n	e24a <_svfprintf_r+0x113a>
    e1dc:	464a      	mov	r2, r9
    e1de:	4631      	mov	r1, r6
    e1e0:	1850      	adds	r0, r2, r1
    e1e2:	f140 0000 	adc.w	r0, r0, #0
    e1e6:	fba3 5600 	umull	r5, r6, r3, r0
    e1ea:	f026 0503 	bic.w	r5, r6, #3
    e1ee:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    e1f2:	1b40      	subs	r0, r0, r5
    e1f4:	1a15      	subs	r5, r2, r0
    e1f6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    e1fa:	f161 0e00 	sbc.w	lr, r1, #0
    e1fe:	fb06 f605 	mul.w	r6, r6, r5
    e202:	fba5 9503 	umull	r9, r5, r5, r3
    e206:	fb03 660e 	mla	r6, r3, lr, r6
    e20a:	f009 0e01 	and.w	lr, r9, #1
    e20e:	442e      	add	r6, r5
    e210:	fbae 5e08 	umull	r5, lr, lr, r8
    e214:	182d      	adds	r5, r5, r0
    e216:	ea4f 0959 	mov.w	r9, r9, lsr #1
    e21a:	3530      	adds	r5, #48	; 0x30
    e21c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    e220:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    e224:	f10c 0c01 	add.w	ip, ip, #1
    e228:	f10b 3bff 	add.w	fp, fp, #4294967295
    e22c:	0876      	lsrs	r6, r6, #1
    e22e:	2c00      	cmp	r4, #0
    e230:	d0d0      	beq.n	e1d4 <_svfprintf_r+0x10c4>
    e232:	f89a 0000 	ldrb.w	r0, [sl]
    e236:	4584      	cmp	ip, r0
    e238:	d1cc      	bne.n	e1d4 <_svfprintf_r+0x10c4>
    e23a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    e23e:	d0c9      	beq.n	e1d4 <_svfprintf_r+0x10c4>
    e240:	2a0a      	cmp	r2, #10
    e242:	f171 0100 	sbcs.w	r1, r1, #0
    e246:	f080 818f 	bcs.w	e568 <_svfprintf_r+0x1458>
    e24a:	465c      	mov	r4, fp
    e24c:	ab50      	add	r3, sp, #320	; 0x140
    e24e:	1b1b      	subs	r3, r3, r4
    e250:	f8dd 9014 	ldr.w	r9, [sp, #20]
    e254:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    e258:	ee1a ba10 	vmov	fp, s20
    e25c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    e260:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e264:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    e268:	9305      	str	r3, [sp, #20]
    e26a:	f7ff bac2 	b.w	d7f2 <_svfprintf_r+0x6e2>
    e26e:	ee1b 1a10 	vmov	r1, s22
    e272:	aa24      	add	r2, sp, #144	; 0x90
    e274:	4658      	mov	r0, fp
    e276:	f001 fe53 	bl	ff20 <__ssprint_r>
    e27a:	2800      	cmp	r0, #0
    e27c:	f47f abad 	bne.w	d9da <_svfprintf_r+0x8ca>
    e280:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e284:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e286:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e28a:	f7ff b896 	b.w	d3ba <_svfprintf_r+0x2aa>
    e28e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e290:	48be      	ldr	r0, [pc, #760]	; (e58c <_svfprintf_r+0x147c>)
    e292:	f8ca 0000 	str.w	r0, [sl]
    e296:	3301      	adds	r3, #1
    e298:	3201      	adds	r2, #1
    e29a:	2001      	movs	r0, #1
    e29c:	2b07      	cmp	r3, #7
    e29e:	9226      	str	r2, [sp, #152]	; 0x98
    e2a0:	9325      	str	r3, [sp, #148]	; 0x94
    e2a2:	f8ca 0004 	str.w	r0, [sl, #4]
    e2a6:	f300 8177 	bgt.w	e598 <_svfprintf_r+0x1488>
    e2aa:	f10a 0a08 	add.w	sl, sl, #8
    e2ae:	2900      	cmp	r1, #0
    e2b0:	f040 80af 	bne.w	e412 <_svfprintf_r+0x1302>
    e2b4:	990e      	ldr	r1, [sp, #56]	; 0x38
    e2b6:	f008 0301 	and.w	r3, r8, #1
    e2ba:	430b      	orrs	r3, r1
    e2bc:	f43f a8c0 	beq.w	d440 <_svfprintf_r+0x330>
    e2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e2c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    e2c4:	441a      	add	r2, r3
    e2c6:	e9ca 1300 	strd	r1, r3, [sl]
    e2ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e2cc:	9226      	str	r2, [sp, #152]	; 0x98
    e2ce:	3301      	adds	r3, #1
    e2d0:	2b07      	cmp	r3, #7
    e2d2:	9325      	str	r3, [sp, #148]	; 0x94
    e2d4:	f300 8252 	bgt.w	e77c <_svfprintf_r+0x166c>
    e2d8:	f10a 0a08 	add.w	sl, sl, #8
    e2dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    e2de:	f8ca 4000 	str.w	r4, [sl]
    e2e2:	3301      	adds	r3, #1
    e2e4:	440a      	add	r2, r1
    e2e6:	2b07      	cmp	r3, #7
    e2e8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e2ec:	f8ca 1004 	str.w	r1, [sl, #4]
    e2f0:	f77f a8a4 	ble.w	d43c <_svfprintf_r+0x32c>
    e2f4:	f7ff bbbd 	b.w	da72 <_svfprintf_r+0x962>
    e2f8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    e2fc:	f000 80dd 	beq.w	e4ba <_svfprintf_r+0x13aa>
    e300:	9808      	ldr	r0, [sp, #32]
    e302:	f850 2b04 	ldr.w	r2, [r0], #4
    e306:	9008      	str	r0, [sp, #32]
    e308:	4619      	mov	r1, r3
    e30a:	b292      	uxth	r2, r2
    e30c:	e631      	b.n	df72 <_svfprintf_r+0xe62>
    e30e:	ee1b 1a10 	vmov	r1, s22
    e312:	aa24      	add	r2, sp, #144	; 0x90
    e314:	4658      	mov	r0, fp
    e316:	f001 fe03 	bl	ff20 <__ssprint_r>
    e31a:	2800      	cmp	r0, #0
    e31c:	f47f ab5d 	bne.w	d9da <_svfprintf_r+0x8ca>
    e320:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e322:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e326:	f7ff baa3 	b.w	d870 <_svfprintf_r+0x760>
    e32a:	ae22      	add	r6, sp, #136	; 0x88
    e32c:	2208      	movs	r2, #8
    e32e:	2100      	movs	r1, #0
    e330:	4630      	mov	r0, r6
    e332:	941d      	str	r4, [sp, #116]	; 0x74
    e334:	f7fd fdaa 	bl	be8c <memset>
    e338:	9b03      	ldr	r3, [sp, #12]
    e33a:	1c5a      	adds	r2, r3, #1
    e33c:	f000 80db 	beq.w	e4f6 <_svfprintf_r+0x13e6>
    e340:	2500      	movs	r5, #0
    e342:	f8cd 9008 	str.w	r9, [sp, #8]
    e346:	f8cd 801c 	str.w	r8, [sp, #28]
    e34a:	4699      	mov	r9, r3
    e34c:	46a8      	mov	r8, r5
    e34e:	e00c      	b.n	e36a <_svfprintf_r+0x125a>
    e350:	a937      	add	r1, sp, #220	; 0xdc
    e352:	4658      	mov	r0, fp
    e354:	f001 fd9e 	bl	fe94 <_wcrtomb_r>
    e358:	1c43      	adds	r3, r0, #1
    e35a:	4440      	add	r0, r8
    e35c:	f000 83c8 	beq.w	eaf0 <_svfprintf_r+0x19e0>
    e360:	4548      	cmp	r0, r9
    e362:	dc08      	bgt.n	e376 <_svfprintf_r+0x1266>
    e364:	f000 8418 	beq.w	eb98 <_svfprintf_r+0x1a88>
    e368:	4680      	mov	r8, r0
    e36a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e36c:	5952      	ldr	r2, [r2, r5]
    e36e:	4633      	mov	r3, r6
    e370:	3504      	adds	r5, #4
    e372:	2a00      	cmp	r2, #0
    e374:	d1ec      	bne.n	e350 <_svfprintf_r+0x1240>
    e376:	f8cd 8014 	str.w	r8, [sp, #20]
    e37a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    e37e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    e382:	e0c5      	b.n	e510 <_svfprintf_r+0x1400>
    e384:	3301      	adds	r3, #1
    e386:	4982      	ldr	r1, [pc, #520]	; (e590 <_svfprintf_r+0x1480>)
    e388:	f8ca 4004 	str.w	r4, [sl, #4]
    e38c:	4422      	add	r2, r4
    e38e:	2b07      	cmp	r3, #7
    e390:	f8ca 1000 	str.w	r1, [sl]
    e394:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e398:	f77f a850 	ble.w	d43c <_svfprintf_r+0x32c>
    e39c:	f7ff bb69 	b.w	da72 <_svfprintf_r+0x962>
    e3a0:	ee1b 1a10 	vmov	r1, s22
    e3a4:	aa24      	add	r2, sp, #144	; 0x90
    e3a6:	4658      	mov	r0, fp
    e3a8:	f001 fdba 	bl	ff20 <__ssprint_r>
    e3ac:	2800      	cmp	r0, #0
    e3ae:	f47f ab14 	bne.w	d9da <_svfprintf_r+0x8ca>
    e3b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e3b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e3b8:	f7ff b829 	b.w	d40e <_svfprintf_r+0x2fe>
    e3bc:	aa24      	add	r2, sp, #144	; 0x90
    e3be:	4658      	mov	r0, fp
    e3c0:	9105      	str	r1, [sp, #20]
    e3c2:	f001 fdad 	bl	ff20 <__ssprint_r>
    e3c6:	2800      	cmp	r0, #0
    e3c8:	f47f ab07 	bne.w	d9da <_svfprintf_r+0x8ca>
    e3cc:	f896 c000 	ldrb.w	ip, [r6]
    e3d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e3d2:	9905      	ldr	r1, [sp, #20]
    e3d4:	a827      	add	r0, sp, #156	; 0x9c
    e3d6:	e67d      	b.n	e0d4 <_svfprintf_r+0xfc4>
    e3d8:	2b01      	cmp	r3, #1
    e3da:	f8cd 8008 	str.w	r8, [sp, #8]
    e3de:	f47f a9f3 	bne.w	d7c8 <_svfprintf_r+0x6b8>
    e3e2:	f7ff bb93 	b.w	db0c <_svfprintf_r+0x9fc>
    e3e6:	9b08      	ldr	r3, [sp, #32]
    e3e8:	9904      	ldr	r1, [sp, #16]
    e3ea:	f853 2b04 	ldr.w	r2, [r3], #4
    e3ee:	464c      	mov	r4, r9
    e3f0:	6011      	str	r1, [r2, #0]
    e3f2:	9308      	str	r3, [sp, #32]
    e3f4:	f7fe bebe 	b.w	d174 <_svfprintf_r+0x64>
    e3f8:	3301      	adds	r3, #1
    e3fa:	4965      	ldr	r1, [pc, #404]	; (e590 <_svfprintf_r+0x1480>)
    e3fc:	f8ca 4004 	str.w	r4, [sl, #4]
    e400:	4422      	add	r2, r4
    e402:	2b07      	cmp	r3, #7
    e404:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e408:	f8ca 1000 	str.w	r1, [sl]
    e40c:	f77f ab22 	ble.w	da54 <_svfprintf_r+0x944>
    e410:	e47b      	b.n	dd0a <_svfprintf_r+0xbfa>
    e412:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e414:	9812      	ldr	r0, [sp, #72]	; 0x48
    e416:	441a      	add	r2, r3
    e418:	e9ca 0300 	strd	r0, r3, [sl]
    e41c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e41e:	9226      	str	r2, [sp, #152]	; 0x98
    e420:	3301      	adds	r3, #1
    e422:	2b07      	cmp	r3, #7
    e424:	9325      	str	r3, [sp, #148]	; 0x94
    e426:	f300 81a9 	bgt.w	e77c <_svfprintf_r+0x166c>
    e42a:	f10a 0a08 	add.w	sl, sl, #8
    e42e:	2900      	cmp	r1, #0
    e430:	f6bf af54 	bge.w	e2dc <_svfprintf_r+0x11cc>
    e434:	424d      	negs	r5, r1
    e436:	3110      	adds	r1, #16
    e438:	f280 830f 	bge.w	ea5a <_svfprintf_r+0x194a>
    e43c:	ee1b 1a10 	vmov	r1, s22
    e440:	2610      	movs	r6, #16
    e442:	e005      	b.n	e450 <_svfprintf_r+0x1340>
    e444:	f10a 0a08 	add.w	sl, sl, #8
    e448:	3d10      	subs	r5, #16
    e44a:	2d10      	cmp	r5, #16
    e44c:	f340 8305 	ble.w	ea5a <_svfprintf_r+0x194a>
    e450:	3301      	adds	r3, #1
    e452:	484f      	ldr	r0, [pc, #316]	; (e590 <_svfprintf_r+0x1480>)
    e454:	3210      	adds	r2, #16
    e456:	2b07      	cmp	r3, #7
    e458:	e9ca 0600 	strd	r0, r6, [sl]
    e45c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e460:	ddf0      	ble.n	e444 <_svfprintf_r+0x1334>
    e462:	aa24      	add	r2, sp, #144	; 0x90
    e464:	4658      	mov	r0, fp
    e466:	9103      	str	r1, [sp, #12]
    e468:	f001 fd5a 	bl	ff20 <__ssprint_r>
    e46c:	2800      	cmp	r0, #0
    e46e:	f47f aab4 	bne.w	d9da <_svfprintf_r+0x8ca>
    e472:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e476:	9903      	ldr	r1, [sp, #12]
    e478:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e47c:	e7e4      	b.n	e448 <_svfprintf_r+0x1338>
    e47e:	9b08      	ldr	r3, [sp, #32]
    e480:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e484:	bf1a      	itte	ne
    e486:	4611      	movne	r1, r2
    e488:	f853 2b04 	ldrne.w	r2, [r3], #4
    e48c:	f853 2b04 	ldreq.w	r2, [r3], #4
    e490:	9308      	str	r3, [sp, #32]
    e492:	bf18      	it	ne
    e494:	b2d2      	uxtbne	r2, r2
    e496:	f7ff b945 	b.w	d724 <_svfprintf_r+0x614>
    e49a:	9b02      	ldr	r3, [sp, #8]
    e49c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    e4a0:	9b08      	ldr	r3, [sp, #32]
    e4a2:	bf1a      	itte	ne
    e4a4:	4611      	movne	r1, r2
    e4a6:	f853 2b04 	ldrne.w	r2, [r3], #4
    e4aa:	f853 2b04 	ldreq.w	r2, [r3], #4
    e4ae:	9308      	str	r3, [sp, #32]
    e4b0:	bf18      	it	ne
    e4b2:	b2d2      	uxtbne	r2, r2
    e4b4:	2301      	movs	r3, #1
    e4b6:	f7ff b8d0 	b.w	d65a <_svfprintf_r+0x54a>
    e4ba:	9b08      	ldr	r3, [sp, #32]
    e4bc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    e4c0:	bf1a      	itte	ne
    e4c2:	4611      	movne	r1, r2
    e4c4:	f853 2b04 	ldrne.w	r2, [r3], #4
    e4c8:	f853 2b04 	ldreq.w	r2, [r3], #4
    e4cc:	9308      	str	r3, [sp, #32]
    e4ce:	bf18      	it	ne
    e4d0:	b2d2      	uxtbne	r2, r2
    e4d2:	e54e      	b.n	df72 <_svfprintf_r+0xe62>
    e4d4:	468a      	mov	sl, r1
    e4d6:	3301      	adds	r3, #1
    e4d8:	492d      	ldr	r1, [pc, #180]	; (e590 <_svfprintf_r+0x1480>)
    e4da:	f8ca 5004 	str.w	r5, [sl, #4]
    e4de:	442a      	add	r2, r5
    e4e0:	2b07      	cmp	r3, #7
    e4e2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e4e6:	f8ca 1000 	str.w	r1, [sl]
    e4ea:	f300 8139 	bgt.w	e760 <_svfprintf_r+0x1650>
    e4ee:	f10a 0a08 	add.w	sl, sl, #8
    e4f2:	f7ff bb8c 	b.w	dc0e <_svfprintf_r+0xafe>
    e4f6:	2300      	movs	r3, #0
    e4f8:	4619      	mov	r1, r3
    e4fa:	9600      	str	r6, [sp, #0]
    e4fc:	aa1d      	add	r2, sp, #116	; 0x74
    e4fe:	4658      	mov	r0, fp
    e500:	f001 fcee 	bl	fee0 <_wcsrtombs_r>
    e504:	4603      	mov	r3, r0
    e506:	3301      	adds	r3, #1
    e508:	9005      	str	r0, [sp, #20]
    e50a:	f000 82f1 	beq.w	eaf0 <_svfprintf_r+0x19e0>
    e50e:	941d      	str	r4, [sp, #116]	; 0x74
    e510:	9b05      	ldr	r3, [sp, #20]
    e512:	2b00      	cmp	r3, #0
    e514:	d04e      	beq.n	e5b4 <_svfprintf_r+0x14a4>
    e516:	2b63      	cmp	r3, #99	; 0x63
    e518:	f300 8118 	bgt.w	e74c <_svfprintf_r+0x163c>
    e51c:	2300      	movs	r3, #0
    e51e:	9307      	str	r3, [sp, #28]
    e520:	ac37      	add	r4, sp, #220	; 0xdc
    e522:	2208      	movs	r2, #8
    e524:	2100      	movs	r1, #0
    e526:	4630      	mov	r0, r6
    e528:	f7fd fcb0 	bl	be8c <memset>
    e52c:	9d05      	ldr	r5, [sp, #20]
    e52e:	9600      	str	r6, [sp, #0]
    e530:	462b      	mov	r3, r5
    e532:	aa1d      	add	r2, sp, #116	; 0x74
    e534:	4621      	mov	r1, r4
    e536:	4658      	mov	r0, fp
    e538:	f001 fcd2 	bl	fee0 <_wcsrtombs_r>
    e53c:	4285      	cmp	r5, r0
    e53e:	f040 837c 	bne.w	ec3a <_svfprintf_r+0x1b2a>
    e542:	9a05      	ldr	r2, [sp, #20]
    e544:	2300      	movs	r3, #0
    e546:	54a3      	strb	r3, [r4, r2]
    e548:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e54c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e550:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e554:	9303      	str	r3, [sp, #12]
    e556:	9202      	str	r2, [sp, #8]
    e558:	930f      	str	r3, [sp, #60]	; 0x3c
    e55a:	f7fe bfba 	b.w	d4d2 <_svfprintf_r+0x3c2>
    e55e:	212d      	movs	r1, #45	; 0x2d
    e560:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e564:	f7fe bfa4 	b.w	d4b0 <_svfprintf_r+0x3a0>
    e568:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e56a:	9915      	ldr	r1, [sp, #84]	; 0x54
    e56c:	ebab 0b03 	sub.w	fp, fp, r3
    e570:	461a      	mov	r2, r3
    e572:	4658      	mov	r0, fp
    e574:	f7fd fd42 	bl	bffc <strncpy>
    e578:	f89a 2001 	ldrb.w	r2, [sl, #1]
    e57c:	4b05      	ldr	r3, [pc, #20]	; (e594 <_svfprintf_r+0x1484>)
    e57e:	b10a      	cbz	r2, e584 <_svfprintf_r+0x1474>
    e580:	f10a 0a01 	add.w	sl, sl, #1
    e584:	f04f 0c00 	mov.w	ip, #0
    e588:	e628      	b.n	e1dc <_svfprintf_r+0x10cc>
    e58a:	bf00      	nop
    e58c:	20000d24 	.word	0x20000d24
    e590:	200012ac 	.word	0x200012ac
    e594:	cccccccd 	.word	0xcccccccd
    e598:	ee1b 1a10 	vmov	r1, s22
    e59c:	aa24      	add	r2, sp, #144	; 0x90
    e59e:	4658      	mov	r0, fp
    e5a0:	f001 fcbe 	bl	ff20 <__ssprint_r>
    e5a4:	2800      	cmp	r0, #0
    e5a6:	f47f aa18 	bne.w	d9da <_svfprintf_r+0x8ca>
    e5aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e5ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e5ae:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e5b2:	e67c      	b.n	e2ae <_svfprintf_r+0x119e>
    e5b4:	9b05      	ldr	r3, [sp, #20]
    e5b6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e5ba:	930f      	str	r3, [sp, #60]	; 0x3c
    e5bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e5c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e5c4:	9307      	str	r3, [sp, #28]
    e5c6:	f7fe bf84 	b.w	d4d2 <_svfprintf_r+0x3c2>
    e5ca:	990e      	ldr	r1, [sp, #56]	; 0x38
    e5cc:	9805      	ldr	r0, [sp, #20]
    e5ce:	1865      	adds	r5, r4, r1
    e5d0:	1a2d      	subs	r5, r5, r0
    e5d2:	1acc      	subs	r4, r1, r3
    e5d4:	42a5      	cmp	r5, r4
    e5d6:	bfa8      	it	ge
    e5d8:	4625      	movge	r5, r4
    e5da:	f7ff bb4d 	b.w	dc78 <_svfprintf_r+0xb68>
    e5de:	9b08      	ldr	r3, [sp, #32]
    e5e0:	9904      	ldr	r1, [sp, #16]
    e5e2:	f853 2b04 	ldr.w	r2, [r3], #4
    e5e6:	9308      	str	r3, [sp, #32]
    e5e8:	8011      	strh	r1, [r2, #0]
    e5ea:	464c      	mov	r4, r9
    e5ec:	f7fe bdc2 	b.w	d174 <_svfprintf_r+0x64>
    e5f0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e5f4:	9308      	str	r3, [sp, #32]
    e5f6:	17d1      	asrs	r1, r2, #31
    e5f8:	460b      	mov	r3, r1
    e5fa:	f7fe bfdb 	b.w	d5b4 <_svfprintf_r+0x4a4>
    e5fe:	9a03      	ldr	r2, [sp, #12]
    e600:	2102      	movs	r1, #2
    e602:	ab22      	add	r3, sp, #136	; 0x88
    e604:	9301      	str	r3, [sp, #4]
    e606:	ab1d      	add	r3, sp, #116	; 0x74
    e608:	9300      	str	r3, [sp, #0]
    e60a:	4658      	mov	r0, fp
    e60c:	ab1b      	add	r3, sp, #108	; 0x6c
    e60e:	eeb0 0b4a 	vmov.f64	d0, d10
    e612:	9202      	str	r2, [sp, #8]
    e614:	f000 fdc8 	bl	f1a8 <_dtoa_r>
    e618:	2d47      	cmp	r5, #71	; 0x47
    e61a:	9a02      	ldr	r2, [sp, #8]
    e61c:	4604      	mov	r4, r0
    e61e:	f000 8161 	beq.w	e8e4 <_svfprintf_r+0x17d4>
    e622:	2d46      	cmp	r5, #70	; 0x46
    e624:	4410      	add	r0, r2
    e626:	d105      	bne.n	e634 <_svfprintf_r+0x1524>
    e628:	7823      	ldrb	r3, [r4, #0]
    e62a:	2b30      	cmp	r3, #48	; 0x30
    e62c:	f000 826f 	beq.w	eb0e <_svfprintf_r+0x19fe>
    e630:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e632:	4410      	add	r0, r2
    e634:	eeb5 ab40 	vcmp.f64	d10, #0.0
    e638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e63c:	f040 8146 	bne.w	e8cc <_svfprintf_r+0x17bc>
    e640:	4603      	mov	r3, r0
    e642:	1b1b      	subs	r3, r3, r4
    e644:	930e      	str	r3, [sp, #56]	; 0x38
    e646:	2d47      	cmp	r5, #71	; 0x47
    e648:	f000 8110 	beq.w	e86c <_svfprintf_r+0x175c>
    e64c:	2d46      	cmp	r5, #70	; 0x46
    e64e:	f000 81b5 	beq.w	e9bc <_svfprintf_r+0x18ac>
    e652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e654:	930c      	str	r3, [sp, #48]	; 0x30
    e656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e658:	2d41      	cmp	r5, #65	; 0x41
    e65a:	f103 33ff 	add.w	r3, r3, #4294967295
    e65e:	931b      	str	r3, [sp, #108]	; 0x6c
    e660:	f000 81e5 	beq.w	ea2e <_svfprintf_r+0x191e>
    e664:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    e668:	2100      	movs	r1, #0
    e66a:	2b00      	cmp	r3, #0
    e66c:	bfb8      	it	lt
    e66e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    e670:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    e674:	bfba      	itte	lt
    e676:	f1c3 0301 	rsblt	r3, r3, #1
    e67a:	222d      	movlt	r2, #45	; 0x2d
    e67c:	222b      	movge	r2, #43	; 0x2b
    e67e:	2b09      	cmp	r3, #9
    e680:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    e684:	f340 81da 	ble.w	ea3c <_svfprintf_r+0x192c>
    e688:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    e68c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; eaac <_svfprintf_r+0x199c>
    e690:	462a      	mov	r2, r5
    e692:	4610      	mov	r0, r2
    e694:	fb8c 2103 	smull	r2, r1, ip, r3
    e698:	17da      	asrs	r2, r3, #31
    e69a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e69e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e6a2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e6a6:	3130      	adds	r1, #48	; 0x30
    e6a8:	f800 1c01 	strb.w	r1, [r0, #-1]
    e6ac:	4619      	mov	r1, r3
    e6ae:	2963      	cmp	r1, #99	; 0x63
    e6b0:	4613      	mov	r3, r2
    e6b2:	f100 32ff 	add.w	r2, r0, #4294967295
    e6b6:	dcec      	bgt.n	e692 <_svfprintf_r+0x1582>
    e6b8:	3330      	adds	r3, #48	; 0x30
    e6ba:	b2d9      	uxtb	r1, r3
    e6bc:	1e83      	subs	r3, r0, #2
    e6be:	429d      	cmp	r5, r3
    e6c0:	f802 1c01 	strb.w	r1, [r2, #-1]
    e6c4:	f240 828b 	bls.w	ebde <_svfprintf_r+0x1ace>
    e6c8:	4613      	mov	r3, r2
    e6ca:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e6ce:	e001      	b.n	e6d4 <_svfprintf_r+0x15c4>
    e6d0:	f813 1b01 	ldrb.w	r1, [r3], #1
    e6d4:	f802 1b01 	strb.w	r1, [r2], #1
    e6d8:	429d      	cmp	r5, r3
    e6da:	d1f9      	bne.n	e6d0 <_svfprintf_r+0x15c0>
    e6dc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    e6e0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    e6e4:	1a1b      	subs	r3, r3, r0
    e6e6:	4413      	add	r3, r2
    e6e8:	aa1e      	add	r2, sp, #120	; 0x78
    e6ea:	1a9b      	subs	r3, r3, r2
    e6ec:	9314      	str	r3, [sp, #80]	; 0x50
    e6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e6f2:	2b01      	cmp	r3, #1
    e6f4:	441a      	add	r2, r3
    e6f6:	9205      	str	r2, [sp, #20]
    e6f8:	f340 8203 	ble.w	eb02 <_svfprintf_r+0x19f2>
    e6fc:	9b05      	ldr	r3, [sp, #20]
    e6fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e700:	4413      	add	r3, r2
    e702:	9305      	str	r3, [sp, #20]
    e704:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    e708:	9a05      	ldr	r2, [sp, #20]
    e70a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    e70e:	2300      	movs	r3, #0
    e710:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e714:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e718:	930f      	str	r3, [sp, #60]	; 0x3c
    e71a:	9202      	str	r2, [sp, #8]
    e71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e71e:	2b00      	cmp	r3, #0
    e720:	f040 80b1 	bne.w	e886 <_svfprintf_r+0x1776>
    e724:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e728:	9303      	str	r3, [sp, #12]
    e72a:	f7fe bed2 	b.w	d4d2 <_svfprintf_r+0x3c2>
    e72e:	4620      	mov	r0, r4
    e730:	f7fd ff06 	bl	c540 <strlen>
    e734:	4602      	mov	r2, r0
    e736:	9005      	str	r0, [sp, #20]
    e738:	f7fe bf20 	b.w	d57c <_svfprintf_r+0x46c>
    e73c:	ee1b 1a10 	vmov	r1, s22
    e740:	aa24      	add	r2, sp, #144	; 0x90
    e742:	4658      	mov	r0, fp
    e744:	f001 fbec 	bl	ff20 <__ssprint_r>
    e748:	f7fe bded 	b.w	d326 <_svfprintf_r+0x216>
    e74c:	1c59      	adds	r1, r3, #1
    e74e:	4658      	mov	r0, fp
    e750:	f7fc fb54 	bl	adfc <_malloc_r>
    e754:	4604      	mov	r4, r0
    e756:	2800      	cmp	r0, #0
    e758:	f000 81ca 	beq.w	eaf0 <_svfprintf_r+0x19e0>
    e75c:	9007      	str	r0, [sp, #28]
    e75e:	e6e0      	b.n	e522 <_svfprintf_r+0x1412>
    e760:	ee1b 1a10 	vmov	r1, s22
    e764:	aa24      	add	r2, sp, #144	; 0x90
    e766:	4658      	mov	r0, fp
    e768:	f001 fbda 	bl	ff20 <__ssprint_r>
    e76c:	2800      	cmp	r0, #0
    e76e:	f47f a934 	bne.w	d9da <_svfprintf_r+0x8ca>
    e772:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e774:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e778:	f7ff ba49 	b.w	dc0e <_svfprintf_r+0xafe>
    e77c:	ee1b 1a10 	vmov	r1, s22
    e780:	aa24      	add	r2, sp, #144	; 0x90
    e782:	4658      	mov	r0, fp
    e784:	f001 fbcc 	bl	ff20 <__ssprint_r>
    e788:	2800      	cmp	r0, #0
    e78a:	f47f a926 	bne.w	d9da <_svfprintf_r+0x8ca>
    e78e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e792:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e794:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e798:	e649      	b.n	e42e <_svfprintf_r+0x131e>
    e79a:	2306      	movs	r3, #6
    e79c:	9303      	str	r3, [sp, #12]
    e79e:	f7ff bb83 	b.w	dea8 <_svfprintf_r+0xd98>
    e7a2:	9b03      	ldr	r3, [sp, #12]
    e7a4:	2102      	movs	r1, #2
    e7a6:	1c5a      	adds	r2, r3, #1
    e7a8:	e72b      	b.n	e602 <_svfprintf_r+0x14f2>
    e7aa:	9a03      	ldr	r2, [sp, #12]
    e7ac:	2103      	movs	r1, #3
    e7ae:	e728      	b.n	e602 <_svfprintf_r+0x14f2>
    e7b0:	a81b      	add	r0, sp, #108	; 0x6c
    e7b2:	eeb0 0b4a 	vmov.f64	d0, d10
    e7b6:	f000 fbcb 	bl	ef50 <frexp>
    e7ba:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e7be:	ee20 0b07 	vmul.f64	d0, d0, d7
    e7c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7ca:	d101      	bne.n	e7d0 <_svfprintf_r+0x16c0>
    e7cc:	2301      	movs	r3, #1
    e7ce:	931b      	str	r3, [sp, #108]	; 0x6c
    e7d0:	48b3      	ldr	r0, [pc, #716]	; (eaa0 <_svfprintf_r+0x1990>)
    e7d2:	9b03      	ldr	r3, [sp, #12]
    e7d4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    e7d8:	3b01      	subs	r3, #1
    e7da:	4622      	mov	r2, r4
    e7dc:	e004      	b.n	e7e8 <_svfprintf_r+0x16d8>
    e7de:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7e6:	d013      	beq.n	e810 <_svfprintf_r+0x1700>
    e7e8:	ee20 0b05 	vmul.f64	d0, d0, d5
    e7ec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    e7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e7f4:	ee17 1a90 	vmov	r1, s15
    e7f8:	5c41      	ldrb	r1, [r0, r1]
    e7fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    e7fe:	4694      	mov	ip, r2
    e800:	ee30 0b46 	vsub.f64	d0, d0, d6
    e804:	f802 1b01 	strb.w	r1, [r2], #1
    e808:	4619      	mov	r1, r3
    e80a:	f103 33ff 	add.w	r3, r3, #4294967295
    e80e:	d1e6      	bne.n	e7de <_svfprintf_r+0x16ce>
    e810:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    e814:	eeb4 0bc6 	vcmpe.f64	d0, d6
    e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e81c:	f300 8148 	bgt.w	eab0 <_svfprintf_r+0x19a0>
    e820:	eeb4 0b46 	vcmp.f64	d0, d6
    e824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e828:	d104      	bne.n	e834 <_svfprintf_r+0x1724>
    e82a:	ee17 3a90 	vmov	r3, s15
    e82e:	07db      	lsls	r3, r3, #31
    e830:	f100 813e 	bmi.w	eab0 <_svfprintf_r+0x19a0>
    e834:	2900      	cmp	r1, #0
    e836:	db06      	blt.n	e846 <_svfprintf_r+0x1736>
    e838:	1c4b      	adds	r3, r1, #1
    e83a:	4413      	add	r3, r2
    e83c:	2130      	movs	r1, #48	; 0x30
    e83e:	f802 1b01 	strb.w	r1, [r2], #1
    e842:	4293      	cmp	r3, r2
    e844:	d1fb      	bne.n	e83e <_svfprintf_r+0x172e>
    e846:	1b13      	subs	r3, r2, r4
    e848:	930e      	str	r3, [sp, #56]	; 0x38
    e84a:	e6fc      	b.n	e646 <_svfprintf_r+0x1536>
    e84c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e84e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e850:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    e854:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    e858:	9613      	str	r6, [sp, #76]	; 0x4c
    e85a:	18e3      	adds	r3, r4, r3
    e85c:	429d      	cmp	r5, r3
    e85e:	4629      	mov	r1, r5
    e860:	bf28      	it	cs
    e862:	4619      	movcs	r1, r3
    e864:	4682      	mov	sl, r0
    e866:	9105      	str	r1, [sp, #20]
    e868:	f7ff b9d8 	b.w	dc1c <_svfprintf_r+0xb0c>
    e86c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e86e:	930c      	str	r3, [sp, #48]	; 0x30
    e870:	1cda      	adds	r2, r3, #3
    e872:	db02      	blt.n	e87a <_svfprintf_r+0x176a>
    e874:	9a03      	ldr	r2, [sp, #12]
    e876:	4293      	cmp	r3, r2
    e878:	dd0c      	ble.n	e894 <_svfprintf_r+0x1784>
    e87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e87c:	3b02      	subs	r3, #2
    e87e:	930b      	str	r3, [sp, #44]	; 0x2c
    e880:	f023 0520 	bic.w	r5, r3, #32
    e884:	e6e7      	b.n	e656 <_svfprintf_r+0x1546>
    e886:	212d      	movs	r1, #45	; 0x2d
    e888:	2300      	movs	r3, #0
    e88a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e88e:	9303      	str	r3, [sp, #12]
    e890:	f7fe be22 	b.w	d4d8 <_svfprintf_r+0x3c8>
    e894:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e898:	4293      	cmp	r3, r2
    e89a:	f2c0 80bd 	blt.w	ea18 <_svfprintf_r+0x1908>
    e89e:	07f0      	lsls	r0, r6, #31
    e8a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e8a2:	f140 8132 	bpl.w	eb0a <_svfprintf_r+0x19fa>
    e8a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e8a8:	4413      	add	r3, r2
    e8aa:	9305      	str	r3, [sp, #20]
    e8ac:	0571      	lsls	r1, r6, #21
    e8ae:	d503      	bpl.n	e8b8 <_svfprintf_r+0x17a8>
    e8b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	f300 8135 	bgt.w	eb22 <_svfprintf_r+0x1a12>
    e8b8:	9b05      	ldr	r3, [sp, #20]
    e8ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e8be:	9302      	str	r3, [sp, #8]
    e8c0:	2367      	movs	r3, #103	; 0x67
    e8c2:	930b      	str	r3, [sp, #44]	; 0x2c
    e8c4:	2300      	movs	r3, #0
    e8c6:	930f      	str	r3, [sp, #60]	; 0x3c
    e8c8:	930d      	str	r3, [sp, #52]	; 0x34
    e8ca:	e727      	b.n	e71c <_svfprintf_r+0x160c>
    e8cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e8ce:	4283      	cmp	r3, r0
    e8d0:	f4bf aeb7 	bcs.w	e642 <_svfprintf_r+0x1532>
    e8d4:	2130      	movs	r1, #48	; 0x30
    e8d6:	1c5a      	adds	r2, r3, #1
    e8d8:	9222      	str	r2, [sp, #136]	; 0x88
    e8da:	7019      	strb	r1, [r3, #0]
    e8dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e8de:	4298      	cmp	r0, r3
    e8e0:	d8f9      	bhi.n	e8d6 <_svfprintf_r+0x17c6>
    e8e2:	e6ae      	b.n	e642 <_svfprintf_r+0x1532>
    e8e4:	07f3      	lsls	r3, r6, #31
    e8e6:	f100 80a7 	bmi.w	ea38 <_svfprintf_r+0x1928>
    e8ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e8ec:	e6a9      	b.n	e642 <_svfprintf_r+0x1532>
    e8ee:	aa24      	add	r2, sp, #144	; 0x90
    e8f0:	4658      	mov	r0, fp
    e8f2:	9105      	str	r1, [sp, #20]
    e8f4:	f001 fb14 	bl	ff20 <__ssprint_r>
    e8f8:	2800      	cmp	r0, #0
    e8fa:	f47f a86e 	bne.w	d9da <_svfprintf_r+0x8ca>
    e8fe:	f896 c000 	ldrb.w	ip, [r6]
    e902:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e904:	9905      	ldr	r1, [sp, #20]
    e906:	a827      	add	r0, sp, #156	; 0x9c
    e908:	4465      	add	r5, ip
    e90a:	f7ff bbec 	b.w	e0e6 <_svfprintf_r+0xfd6>
    e90e:	ee1b 1a10 	vmov	r1, s22
    e912:	aa24      	add	r2, sp, #144	; 0x90
    e914:	4658      	mov	r0, fp
    e916:	f001 fb03 	bl	ff20 <__ssprint_r>
    e91a:	2800      	cmp	r0, #0
    e91c:	f47f a85d 	bne.w	d9da <_svfprintf_r+0x8ca>
    e920:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e922:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e926:	f7ff b96b 	b.w	dc00 <_svfprintf_r+0xaf0>
    e92a:	2378      	movs	r3, #120	; 0x78
    e92c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    e930:	2330      	movs	r3, #48	; 0x30
    e932:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    e936:	9b03      	ldr	r3, [sp, #12]
    e938:	2b63      	cmp	r3, #99	; 0x63
    e93a:	f048 0602 	orr.w	r6, r8, #2
    e93e:	f300 80a6 	bgt.w	ea8e <_svfprintf_r+0x197e>
    e942:	2300      	movs	r3, #0
    e944:	9307      	str	r3, [sp, #28]
    e946:	ac37      	add	r4, sp, #220	; 0xdc
    e948:	ee18 3a90 	vmov	r3, s17
    e94c:	2b00      	cmp	r3, #0
    e94e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    e952:	db2b      	blt.n	e9ac <_svfprintf_r+0x189c>
    e954:	eeb0 ab48 	vmov.f64	d10, d8
    e958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e95a:	f023 0520 	bic.w	r5, r3, #32
    e95e:	2300      	movs	r3, #0
    e960:	9309      	str	r3, [sp, #36]	; 0x24
    e962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e964:	2b61      	cmp	r3, #97	; 0x61
    e966:	f47f aaad 	bne.w	dec4 <_svfprintf_r+0xdb4>
    e96a:	eeb0 0b4a 	vmov.f64	d0, d10
    e96e:	a81b      	add	r0, sp, #108	; 0x6c
    e970:	f000 faee 	bl	ef50 <frexp>
    e974:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    e978:	ee20 0b07 	vmul.f64	d0, d0, d7
    e97c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    e980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e984:	d101      	bne.n	e98a <_svfprintf_r+0x187a>
    e986:	2301      	movs	r3, #1
    e988:	931b      	str	r3, [sp, #108]	; 0x6c
    e98a:	4846      	ldr	r0, [pc, #280]	; (eaa4 <_svfprintf_r+0x1994>)
    e98c:	e721      	b.n	e7d2 <_svfprintf_r+0x16c2>
    e98e:	ee1b 1a10 	vmov	r1, s22
    e992:	aa24      	add	r2, sp, #144	; 0x90
    e994:	4658      	mov	r0, fp
    e996:	f001 fac3 	bl	ff20 <__ssprint_r>
    e99a:	2800      	cmp	r0, #0
    e99c:	f47f a81d 	bne.w	d9da <_svfprintf_r+0x8ca>
    e9a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e9a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e9a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e9a8:	f7ff b94e 	b.w	dc48 <_svfprintf_r+0xb38>
    e9ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e9ae:	f023 0520 	bic.w	r5, r3, #32
    e9b2:	232d      	movs	r3, #45	; 0x2d
    e9b4:	9309      	str	r3, [sp, #36]	; 0x24
    e9b6:	eeb1 ab48 	vneg.f64	d10, d8
    e9ba:	e7d2      	b.n	e962 <_svfprintf_r+0x1852>
    e9bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    e9be:	920c      	str	r2, [sp, #48]	; 0x30
    e9c0:	2a00      	cmp	r2, #0
    e9c2:	f006 0301 	and.w	r3, r6, #1
    e9c6:	f340 810d 	ble.w	ebe4 <_svfprintf_r+0x1ad4>
    e9ca:	9903      	ldr	r1, [sp, #12]
    e9cc:	430b      	orrs	r3, r1
    e9ce:	f040 80cf 	bne.w	eb70 <_svfprintf_r+0x1a60>
    e9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e9d4:	9305      	str	r3, [sp, #20]
    e9d6:	2366      	movs	r3, #102	; 0x66
    e9d8:	930b      	str	r3, [sp, #44]	; 0x2c
    e9da:	0572      	lsls	r2, r6, #21
    e9dc:	f100 80a3 	bmi.w	eb26 <_svfprintf_r+0x1a16>
    e9e0:	9b05      	ldr	r3, [sp, #20]
    e9e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e9e6:	9302      	str	r3, [sp, #8]
    e9e8:	e76c      	b.n	e8c4 <_svfprintf_r+0x17b4>
    e9ea:	ee1b 1a10 	vmov	r1, s22
    e9ee:	aa24      	add	r2, sp, #144	; 0x90
    e9f0:	4658      	mov	r0, fp
    e9f2:	f001 fa95 	bl	ff20 <__ssprint_r>
    e9f6:	2800      	cmp	r0, #0
    e9f8:	f47e afef 	bne.w	d9da <_svfprintf_r+0x8ca>
    e9fc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    e9fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea00:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ea02:	1b1c      	subs	r4, r3, r4
    ea04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea08:	f7ff b936 	b.w	dc78 <_svfprintf_r+0xb68>
    ea0c:	2358      	movs	r3, #88	; 0x58
    ea0e:	e78d      	b.n	e92c <_svfprintf_r+0x181c>
    ea10:	2200      	movs	r2, #0
    ea12:	9203      	str	r2, [sp, #12]
    ea14:	f7fe bbda 	b.w	d1cc <_svfprintf_r+0xbc>
    ea18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ea1c:	189a      	adds	r2, r3, r2
    ea1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea20:	9205      	str	r2, [sp, #20]
    ea22:	2b00      	cmp	r3, #0
    ea24:	f340 80ab 	ble.w	eb7e <_svfprintf_r+0x1a6e>
    ea28:	2367      	movs	r3, #103	; 0x67
    ea2a:	930b      	str	r3, [sp, #44]	; 0x2c
    ea2c:	e7d5      	b.n	e9da <_svfprintf_r+0x18ca>
    ea2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ea30:	320f      	adds	r2, #15
    ea32:	b2d2      	uxtb	r2, r2
    ea34:	2101      	movs	r1, #1
    ea36:	e618      	b.n	e66a <_svfprintf_r+0x155a>
    ea38:	18a0      	adds	r0, r4, r2
    ea3a:	e5fb      	b.n	e634 <_svfprintf_r+0x1524>
    ea3c:	2900      	cmp	r1, #0
    ea3e:	f040 80a8 	bne.w	eb92 <_svfprintf_r+0x1a82>
    ea42:	2230      	movs	r2, #48	; 0x30
    ea44:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    ea48:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    ea4c:	3330      	adds	r3, #48	; 0x30
    ea4e:	f802 3b01 	strb.w	r3, [r2], #1
    ea52:	ab1e      	add	r3, sp, #120	; 0x78
    ea54:	1ad3      	subs	r3, r2, r3
    ea56:	9314      	str	r3, [sp, #80]	; 0x50
    ea58:	e649      	b.n	e6ee <_svfprintf_r+0x15de>
    ea5a:	3301      	adds	r3, #1
    ea5c:	4912      	ldr	r1, [pc, #72]	; (eaa8 <_svfprintf_r+0x1998>)
    ea5e:	f8ca 5004 	str.w	r5, [sl, #4]
    ea62:	442a      	add	r2, r5
    ea64:	2b07      	cmp	r3, #7
    ea66:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea6a:	f8ca 1000 	str.w	r1, [sl]
    ea6e:	f77f ac33 	ble.w	e2d8 <_svfprintf_r+0x11c8>
    ea72:	ee1b 1a10 	vmov	r1, s22
    ea76:	aa24      	add	r2, sp, #144	; 0x90
    ea78:	4658      	mov	r0, fp
    ea7a:	f001 fa51 	bl	ff20 <__ssprint_r>
    ea7e:	2800      	cmp	r0, #0
    ea80:	f47e afab 	bne.w	d9da <_svfprintf_r+0x8ca>
    ea84:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ea88:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea8c:	e426      	b.n	e2dc <_svfprintf_r+0x11cc>
    ea8e:	1c59      	adds	r1, r3, #1
    ea90:	4658      	mov	r0, fp
    ea92:	f7fc f9b3 	bl	adfc <_malloc_r>
    ea96:	4604      	mov	r4, r0
    ea98:	b350      	cbz	r0, eaf0 <_svfprintf_r+0x19e0>
    ea9a:	9007      	str	r0, [sp, #28]
    ea9c:	e754      	b.n	e948 <_svfprintf_r+0x1838>
    ea9e:	bf00      	nop
    eaa0:	20000d08 	.word	0x20000d08
    eaa4:	20000cf4 	.word	0x20000cf4
    eaa8:	200012ac 	.word	0x200012ac
    eaac:	66666667 	.word	0x66666667
    eab0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    eab4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    eab8:	f890 c00f 	ldrb.w	ip, [r0, #15]
    eabc:	4561      	cmp	r1, ip
    eabe:	4613      	mov	r3, r2
    eac0:	d10a      	bne.n	ead8 <_svfprintf_r+0x19c8>
    eac2:	f04f 0e30 	mov.w	lr, #48	; 0x30
    eac6:	f803 ec01 	strb.w	lr, [r3, #-1]
    eaca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eacc:	1e59      	subs	r1, r3, #1
    eace:	9122      	str	r1, [sp, #136]	; 0x88
    ead0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    ead4:	458c      	cmp	ip, r1
    ead6:	d0f6      	beq.n	eac6 <_svfprintf_r+0x19b6>
    ead8:	2939      	cmp	r1, #57	; 0x39
    eada:	bf16      	itet	ne
    eadc:	3101      	addne	r1, #1
    eade:	7a81      	ldrbeq	r1, [r0, #10]
    eae0:	b2c9      	uxtbne	r1, r1
    eae2:	f803 1c01 	strb.w	r1, [r3, #-1]
    eae6:	e6ae      	b.n	e846 <_svfprintf_r+0x1736>
    eae8:	2300      	movs	r3, #0
    eaea:	4690      	mov	r8, r2
    eaec:	9307      	str	r3, [sp, #28]
    eaee:	e760      	b.n	e9b2 <_svfprintf_r+0x18a2>
    eaf0:	ee1b 2a10 	vmov	r2, s22
    eaf4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    eaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    eafc:	8193      	strh	r3, [r2, #12]
    eafe:	f7fe bc16 	b.w	d32e <_svfprintf_r+0x21e>
    eb02:	07f5      	lsls	r5, r6, #31
    eb04:	f57f adfe 	bpl.w	e704 <_svfprintf_r+0x15f4>
    eb08:	e5f8      	b.n	e6fc <_svfprintf_r+0x15ec>
    eb0a:	9305      	str	r3, [sp, #20]
    eb0c:	e6ce      	b.n	e8ac <_svfprintf_r+0x179c>
    eb0e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    eb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eb16:	f43f ad8b 	beq.w	e630 <_svfprintf_r+0x1520>
    eb1a:	f1c2 0201 	rsb	r2, r2, #1
    eb1e:	921b      	str	r2, [sp, #108]	; 0x6c
    eb20:	e587      	b.n	e632 <_svfprintf_r+0x1522>
    eb22:	2367      	movs	r3, #103	; 0x67
    eb24:	930b      	str	r3, [sp, #44]	; 0x2c
    eb26:	9913      	ldr	r1, [sp, #76]	; 0x4c
    eb28:	780b      	ldrb	r3, [r1, #0]
    eb2a:	2bff      	cmp	r3, #255	; 0xff
    eb2c:	d079      	beq.n	ec22 <_svfprintf_r+0x1b12>
    eb2e:	2500      	movs	r5, #0
    eb30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eb32:	4628      	mov	r0, r5
    eb34:	e003      	b.n	eb3e <_svfprintf_r+0x1a2e>
    eb36:	3001      	adds	r0, #1
    eb38:	3101      	adds	r1, #1
    eb3a:	2bff      	cmp	r3, #255	; 0xff
    eb3c:	d008      	beq.n	eb50 <_svfprintf_r+0x1a40>
    eb3e:	4293      	cmp	r3, r2
    eb40:	da06      	bge.n	eb50 <_svfprintf_r+0x1a40>
    eb42:	1ad2      	subs	r2, r2, r3
    eb44:	784b      	ldrb	r3, [r1, #1]
    eb46:	2b00      	cmp	r3, #0
    eb48:	d1f5      	bne.n	eb36 <_svfprintf_r+0x1a26>
    eb4a:	780b      	ldrb	r3, [r1, #0]
    eb4c:	3501      	adds	r5, #1
    eb4e:	e7f4      	b.n	eb3a <_svfprintf_r+0x1a2a>
    eb50:	920c      	str	r2, [sp, #48]	; 0x30
    eb52:	9113      	str	r1, [sp, #76]	; 0x4c
    eb54:	900d      	str	r0, [sp, #52]	; 0x34
    eb56:	950f      	str	r5, [sp, #60]	; 0x3c
    eb58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    eb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    eb5c:	9916      	ldr	r1, [sp, #88]	; 0x58
    eb5e:	4413      	add	r3, r2
    eb60:	9a05      	ldr	r2, [sp, #20]
    eb62:	fb01 2303 	mla	r3, r1, r3, r2
    eb66:	9305      	str	r3, [sp, #20]
    eb68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    eb6c:	9302      	str	r3, [sp, #8]
    eb6e:	e5d5      	b.n	e71c <_svfprintf_r+0x160c>
    eb70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eb72:	18d3      	adds	r3, r2, r3
    eb74:	4419      	add	r1, r3
    eb76:	2366      	movs	r3, #102	; 0x66
    eb78:	9105      	str	r1, [sp, #20]
    eb7a:	930b      	str	r3, [sp, #44]	; 0x2c
    eb7c:	e72d      	b.n	e9da <_svfprintf_r+0x18ca>
    eb7e:	f1c3 0301 	rsb	r3, r3, #1
    eb82:	441a      	add	r2, r3
    eb84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    eb88:	9302      	str	r3, [sp, #8]
    eb8a:	2367      	movs	r3, #103	; 0x67
    eb8c:	9205      	str	r2, [sp, #20]
    eb8e:	930b      	str	r3, [sp, #44]	; 0x2c
    eb90:	e698      	b.n	e8c4 <_svfprintf_r+0x17b4>
    eb92:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    eb96:	e759      	b.n	ea4c <_svfprintf_r+0x193c>
    eb98:	9b03      	ldr	r3, [sp, #12]
    eb9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    eb9e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    eba2:	9305      	str	r3, [sp, #20]
    eba4:	e4b4      	b.n	e510 <_svfprintf_r+0x1400>
    eba6:	ee18 3a90 	vmov	r3, s17
    ebaa:	2b00      	cmp	r3, #0
    ebac:	bfb4      	ite	lt
    ebae:	212d      	movlt	r1, #45	; 0x2d
    ebb0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    ebb4:	4c25      	ldr	r4, [pc, #148]	; (ec4c <_svfprintf_r+0x1b3c>)
    ebb6:	4b26      	ldr	r3, [pc, #152]	; (ec50 <_svfprintf_r+0x1b40>)
    ebb8:	bfb8      	it	lt
    ebba:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    ebbe:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    ebc2:	f7fe bc79 	b.w	d4b8 <_svfprintf_r+0x3a8>
    ebc6:	9b03      	ldr	r3, [sp, #12]
    ebc8:	9302      	str	r3, [sp, #8]
    ebca:	9305      	str	r3, [sp, #20]
    ebcc:	2373      	movs	r3, #115	; 0x73
    ebce:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    ebd2:	9003      	str	r0, [sp, #12]
    ebd4:	900f      	str	r0, [sp, #60]	; 0x3c
    ebd6:	900d      	str	r0, [sp, #52]	; 0x34
    ebd8:	930b      	str	r3, [sp, #44]	; 0x2c
    ebda:	f7fe bc7a 	b.w	d4d2 <_svfprintf_r+0x3c2>
    ebde:	2302      	movs	r3, #2
    ebe0:	9314      	str	r3, [sp, #80]	; 0x50
    ebe2:	e584      	b.n	e6ee <_svfprintf_r+0x15de>
    ebe4:	9a03      	ldr	r2, [sp, #12]
    ebe6:	4313      	orrs	r3, r2
    ebe8:	d105      	bne.n	ebf6 <_svfprintf_r+0x1ae6>
    ebea:	2301      	movs	r3, #1
    ebec:	2266      	movs	r2, #102	; 0x66
    ebee:	9302      	str	r3, [sp, #8]
    ebf0:	920b      	str	r2, [sp, #44]	; 0x2c
    ebf2:	9305      	str	r3, [sp, #20]
    ebf4:	e666      	b.n	e8c4 <_svfprintf_r+0x17b4>
    ebf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ebf8:	3301      	adds	r3, #1
    ebfa:	441a      	add	r2, r3
    ebfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    ec00:	9302      	str	r3, [sp, #8]
    ec02:	2366      	movs	r3, #102	; 0x66
    ec04:	9205      	str	r2, [sp, #20]
    ec06:	930b      	str	r3, [sp, #44]	; 0x2c
    ec08:	e65c      	b.n	e8c4 <_svfprintf_r+0x17b4>
    ec0a:	9a08      	ldr	r2, [sp, #32]
    ec0c:	f899 3001 	ldrb.w	r3, [r9, #1]
    ec10:	4689      	mov	r9, r1
    ec12:	f852 1b04 	ldr.w	r1, [r2], #4
    ec16:	9208      	str	r2, [sp, #32]
    ec18:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    ec1c:	9103      	str	r1, [sp, #12]
    ec1e:	f7fe bad3 	b.w	d1c8 <_svfprintf_r+0xb8>
    ec22:	2300      	movs	r3, #0
    ec24:	930f      	str	r3, [sp, #60]	; 0x3c
    ec26:	930d      	str	r3, [sp, #52]	; 0x34
    ec28:	e796      	b.n	eb58 <_svfprintf_r+0x1a48>
    ec2a:	230c      	movs	r3, #12
    ec2c:	f8cb 3000 	str.w	r3, [fp]
    ec30:	f04f 33ff 	mov.w	r3, #4294967295
    ec34:	9304      	str	r3, [sp, #16]
    ec36:	f7fe bb81 	b.w	d33c <_svfprintf_r+0x22c>
    ec3a:	ee1b 2a10 	vmov	r2, s22
    ec3e:	8993      	ldrh	r3, [r2, #12]
    ec40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ec44:	8193      	strh	r3, [r2, #12]
    ec46:	f7fe bec8 	b.w	d9da <_svfprintf_r+0x8ca>
    ec4a:	bf00      	nop
    ec4c:	20000cec 	.word	0x20000cec
    ec50:	20000cf0 	.word	0x20000cf0

0000ec54 <_fclose_r>:
    ec54:	b570      	push	{r4, r5, r6, lr}
    ec56:	2900      	cmp	r1, #0
    ec58:	d04b      	beq.n	ecf2 <_fclose_r+0x9e>
    ec5a:	4606      	mov	r6, r0
    ec5c:	460c      	mov	r4, r1
    ec5e:	b110      	cbz	r0, ec66 <_fclose_r+0x12>
    ec60:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ec62:	2b00      	cmp	r3, #0
    ec64:	d048      	beq.n	ecf8 <_fclose_r+0xa4>
    ec66:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ec68:	07d8      	lsls	r0, r3, #31
    ec6a:	d534      	bpl.n	ecd6 <_fclose_r+0x82>
    ec6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d03e      	beq.n	ecf2 <_fclose_r+0x9e>
    ec74:	4621      	mov	r1, r4
    ec76:	4630      	mov	r0, r6
    ec78:	f000 f850 	bl	ed1c <__sflush_r>
    ec7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ec7e:	4605      	mov	r5, r0
    ec80:	b133      	cbz	r3, ec90 <_fclose_r+0x3c>
    ec82:	69e1      	ldr	r1, [r4, #28]
    ec84:	4630      	mov	r0, r6
    ec86:	4798      	blx	r3
    ec88:	2800      	cmp	r0, #0
    ec8a:	bfb8      	it	lt
    ec8c:	f04f 35ff 	movlt.w	r5, #4294967295
    ec90:	89a3      	ldrh	r3, [r4, #12]
    ec92:	061a      	lsls	r2, r3, #24
    ec94:	d43c      	bmi.n	ed10 <_fclose_r+0xbc>
    ec96:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ec98:	b141      	cbz	r1, ecac <_fclose_r+0x58>
    ec9a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ec9e:	4299      	cmp	r1, r3
    eca0:	d002      	beq.n	eca8 <_fclose_r+0x54>
    eca2:	4630      	mov	r0, r6
    eca4:	f7fd fd4e 	bl	c744 <_free_r>
    eca8:	2300      	movs	r3, #0
    ecaa:	6323      	str	r3, [r4, #48]	; 0x30
    ecac:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ecae:	b121      	cbz	r1, ecba <_fclose_r+0x66>
    ecb0:	4630      	mov	r0, r6
    ecb2:	f7fd fd47 	bl	c744 <_free_r>
    ecb6:	2300      	movs	r3, #0
    ecb8:	6463      	str	r3, [r4, #68]	; 0x44
    ecba:	f7fc ffd5 	bl	bc68 <__sfp_lock_acquire>
    ecbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ecc0:	2200      	movs	r2, #0
    ecc2:	07db      	lsls	r3, r3, #31
    ecc4:	81a2      	strh	r2, [r4, #12]
    ecc6:	d51f      	bpl.n	ed08 <_fclose_r+0xb4>
    ecc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ecca:	f7fd fa61 	bl	c190 <__retarget_lock_close_recursive>
    ecce:	f7fc ffd1 	bl	bc74 <__sfp_lock_release>
    ecd2:	4628      	mov	r0, r5
    ecd4:	bd70      	pop	{r4, r5, r6, pc}
    ecd6:	89a3      	ldrh	r3, [r4, #12]
    ecd8:	0599      	lsls	r1, r3, #22
    ecda:	d4cb      	bmi.n	ec74 <_fclose_r+0x20>
    ecdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ecde:	f7fd fa59 	bl	c194 <__retarget_lock_acquire_recursive>
    ece2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ece6:	2b00      	cmp	r3, #0
    ece8:	d1c4      	bne.n	ec74 <_fclose_r+0x20>
    ecea:	6e65      	ldr	r5, [r4, #100]	; 0x64
    ecec:	f015 0501 	ands.w	r5, r5, #1
    ecf0:	d005      	beq.n	ecfe <_fclose_r+0xaa>
    ecf2:	2500      	movs	r5, #0
    ecf4:	4628      	mov	r0, r5
    ecf6:	bd70      	pop	{r4, r5, r6, pc}
    ecf8:	f7fc ff98 	bl	bc2c <__sinit>
    ecfc:	e7b3      	b.n	ec66 <_fclose_r+0x12>
    ecfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ed00:	f7fd fa4a 	bl	c198 <__retarget_lock_release_recursive>
    ed04:	4628      	mov	r0, r5
    ed06:	bd70      	pop	{r4, r5, r6, pc}
    ed08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ed0a:	f7fd fa45 	bl	c198 <__retarget_lock_release_recursive>
    ed0e:	e7db      	b.n	ecc8 <_fclose_r+0x74>
    ed10:	6921      	ldr	r1, [r4, #16]
    ed12:	4630      	mov	r0, r6
    ed14:	f7fd fd16 	bl	c744 <_free_r>
    ed18:	e7bd      	b.n	ec96 <_fclose_r+0x42>
    ed1a:	bf00      	nop

0000ed1c <__sflush_r>:
    ed1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed24:	460c      	mov	r4, r1
    ed26:	0711      	lsls	r1, r2, #28
    ed28:	4680      	mov	r8, r0
    ed2a:	d447      	bmi.n	edbc <__sflush_r+0xa0>
    ed2c:	6863      	ldr	r3, [r4, #4]
    ed2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    ed32:	2b00      	cmp	r3, #0
    ed34:	81a2      	strh	r2, [r4, #12]
    ed36:	dd5e      	ble.n	edf6 <__sflush_r+0xda>
    ed38:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    ed3a:	2d00      	cmp	r5, #0
    ed3c:	d058      	beq.n	edf0 <__sflush_r+0xd4>
    ed3e:	2300      	movs	r3, #0
    ed40:	f8d8 6000 	ldr.w	r6, [r8]
    ed44:	f8c8 3000 	str.w	r3, [r8]
    ed48:	b293      	uxth	r3, r2
    ed4a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    ed4e:	d156      	bne.n	edfe <__sflush_r+0xe2>
    ed50:	2301      	movs	r3, #1
    ed52:	69e1      	ldr	r1, [r4, #28]
    ed54:	4640      	mov	r0, r8
    ed56:	47a8      	blx	r5
    ed58:	1c43      	adds	r3, r0, #1
    ed5a:	d067      	beq.n	ee2c <__sflush_r+0x110>
    ed5c:	89a3      	ldrh	r3, [r4, #12]
    ed5e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    ed60:	075f      	lsls	r7, r3, #29
    ed62:	d505      	bpl.n	ed70 <__sflush_r+0x54>
    ed64:	6863      	ldr	r3, [r4, #4]
    ed66:	1ac0      	subs	r0, r0, r3
    ed68:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ed6a:	b10b      	cbz	r3, ed70 <__sflush_r+0x54>
    ed6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ed6e:	1ac0      	subs	r0, r0, r3
    ed70:	69e1      	ldr	r1, [r4, #28]
    ed72:	4602      	mov	r2, r0
    ed74:	2300      	movs	r3, #0
    ed76:	4640      	mov	r0, r8
    ed78:	47a8      	blx	r5
    ed7a:	1c41      	adds	r1, r0, #1
    ed7c:	d141      	bne.n	ee02 <__sflush_r+0xe6>
    ed7e:	f8d8 3000 	ldr.w	r3, [r8]
    ed82:	2b00      	cmp	r3, #0
    ed84:	d03d      	beq.n	ee02 <__sflush_r+0xe6>
    ed86:	2b1d      	cmp	r3, #29
    ed88:	d001      	beq.n	ed8e <__sflush_r+0x72>
    ed8a:	2b16      	cmp	r3, #22
    ed8c:	d156      	bne.n	ee3c <__sflush_r+0x120>
    ed8e:	89a3      	ldrh	r3, [r4, #12]
    ed90:	6922      	ldr	r2, [r4, #16]
    ed92:	6022      	str	r2, [r4, #0]
    ed94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ed98:	2100      	movs	r1, #0
    ed9a:	6061      	str	r1, [r4, #4]
    ed9c:	81a3      	strh	r3, [r4, #12]
    ed9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    eda0:	f8c8 6000 	str.w	r6, [r8]
    eda4:	b321      	cbz	r1, edf0 <__sflush_r+0xd4>
    eda6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    edaa:	4299      	cmp	r1, r3
    edac:	d002      	beq.n	edb4 <__sflush_r+0x98>
    edae:	4640      	mov	r0, r8
    edb0:	f7fd fcc8 	bl	c744 <_free_r>
    edb4:	2000      	movs	r0, #0
    edb6:	6320      	str	r0, [r4, #48]	; 0x30
    edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edbc:	6926      	ldr	r6, [r4, #16]
    edbe:	b1be      	cbz	r6, edf0 <__sflush_r+0xd4>
    edc0:	b293      	uxth	r3, r2
    edc2:	6825      	ldr	r5, [r4, #0]
    edc4:	6026      	str	r6, [r4, #0]
    edc6:	079a      	lsls	r2, r3, #30
    edc8:	bf0c      	ite	eq
    edca:	6963      	ldreq	r3, [r4, #20]
    edcc:	2300      	movne	r3, #0
    edce:	1bad      	subs	r5, r5, r6
    edd0:	60a3      	str	r3, [r4, #8]
    edd2:	e00b      	b.n	edec <__sflush_r+0xd0>
    edd4:	462b      	mov	r3, r5
    edd6:	4632      	mov	r2, r6
    edd8:	69e1      	ldr	r1, [r4, #28]
    edda:	6a67      	ldr	r7, [r4, #36]	; 0x24
    eddc:	4640      	mov	r0, r8
    edde:	47b8      	blx	r7
    ede0:	f1b0 0c00 	subs.w	ip, r0, #0
    ede4:	eba5 050c 	sub.w	r5, r5, ip
    ede8:	4466      	add	r6, ip
    edea:	dd17      	ble.n	ee1c <__sflush_r+0x100>
    edec:	2d00      	cmp	r5, #0
    edee:	dcf1      	bgt.n	edd4 <__sflush_r+0xb8>
    edf0:	2000      	movs	r0, #0
    edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    edf8:	2b00      	cmp	r3, #0
    edfa:	dc9d      	bgt.n	ed38 <__sflush_r+0x1c>
    edfc:	e7f8      	b.n	edf0 <__sflush_r+0xd4>
    edfe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    ee00:	e7ae      	b.n	ed60 <__sflush_r+0x44>
    ee02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ee06:	6922      	ldr	r2, [r4, #16]
    ee08:	6022      	str	r2, [r4, #0]
    ee0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ee0e:	81a3      	strh	r3, [r4, #12]
    ee10:	2200      	movs	r2, #0
    ee12:	04db      	lsls	r3, r3, #19
    ee14:	6062      	str	r2, [r4, #4]
    ee16:	d5c2      	bpl.n	ed9e <__sflush_r+0x82>
    ee18:	6520      	str	r0, [r4, #80]	; 0x50
    ee1a:	e7c0      	b.n	ed9e <__sflush_r+0x82>
    ee1c:	89a3      	ldrh	r3, [r4, #12]
    ee1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee22:	f04f 30ff 	mov.w	r0, #4294967295
    ee26:	81a3      	strh	r3, [r4, #12]
    ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee2c:	f8d8 3000 	ldr.w	r3, [r8]
    ee30:	2b00      	cmp	r3, #0
    ee32:	d093      	beq.n	ed5c <__sflush_r+0x40>
    ee34:	2b1d      	cmp	r3, #29
    ee36:	d006      	beq.n	ee46 <__sflush_r+0x12a>
    ee38:	2b16      	cmp	r3, #22
    ee3a:	d004      	beq.n	ee46 <__sflush_r+0x12a>
    ee3c:	89a3      	ldrh	r3, [r4, #12]
    ee3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee42:	81a3      	strh	r3, [r4, #12]
    ee44:	e7d5      	b.n	edf2 <__sflush_r+0xd6>
    ee46:	f8c8 6000 	str.w	r6, [r8]
    ee4a:	e7d1      	b.n	edf0 <__sflush_r+0xd4>

0000ee4c <_fflush_r>:
    ee4c:	b538      	push	{r3, r4, r5, lr}
    ee4e:	460c      	mov	r4, r1
    ee50:	4605      	mov	r5, r0
    ee52:	b108      	cbz	r0, ee58 <_fflush_r+0xc>
    ee54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ee56:	b303      	cbz	r3, ee9a <_fflush_r+0x4e>
    ee58:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    ee5c:	b188      	cbz	r0, ee82 <_fflush_r+0x36>
    ee5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ee60:	07db      	lsls	r3, r3, #31
    ee62:	d401      	bmi.n	ee68 <_fflush_r+0x1c>
    ee64:	0581      	lsls	r1, r0, #22
    ee66:	d50f      	bpl.n	ee88 <_fflush_r+0x3c>
    ee68:	4628      	mov	r0, r5
    ee6a:	4621      	mov	r1, r4
    ee6c:	f7ff ff56 	bl	ed1c <__sflush_r>
    ee70:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ee72:	07da      	lsls	r2, r3, #31
    ee74:	4605      	mov	r5, r0
    ee76:	d402      	bmi.n	ee7e <_fflush_r+0x32>
    ee78:	89a3      	ldrh	r3, [r4, #12]
    ee7a:	059b      	lsls	r3, r3, #22
    ee7c:	d508      	bpl.n	ee90 <_fflush_r+0x44>
    ee7e:	4628      	mov	r0, r5
    ee80:	bd38      	pop	{r3, r4, r5, pc}
    ee82:	4605      	mov	r5, r0
    ee84:	4628      	mov	r0, r5
    ee86:	bd38      	pop	{r3, r4, r5, pc}
    ee88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ee8a:	f7fd f983 	bl	c194 <__retarget_lock_acquire_recursive>
    ee8e:	e7eb      	b.n	ee68 <_fflush_r+0x1c>
    ee90:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ee92:	f7fd f981 	bl	c198 <__retarget_lock_release_recursive>
    ee96:	4628      	mov	r0, r5
    ee98:	bd38      	pop	{r3, r4, r5, pc}
    ee9a:	f7fc fec7 	bl	bc2c <__sinit>
    ee9e:	e7db      	b.n	ee58 <_fflush_r+0xc>

0000eea0 <_localeconv_r>:
    eea0:	4800      	ldr	r0, [pc, #0]	; (eea4 <_localeconv_r+0x4>)
    eea2:	4770      	bx	lr
    eea4:	20004504 	.word	0x20004504
	...

0000eeb0 <memchr>:
    eeb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    eeb4:	2a10      	cmp	r2, #16
    eeb6:	db2b      	blt.n	ef10 <memchr+0x60>
    eeb8:	f010 0f07 	tst.w	r0, #7
    eebc:	d008      	beq.n	eed0 <memchr+0x20>
    eebe:	f810 3b01 	ldrb.w	r3, [r0], #1
    eec2:	3a01      	subs	r2, #1
    eec4:	428b      	cmp	r3, r1
    eec6:	d02d      	beq.n	ef24 <memchr+0x74>
    eec8:	f010 0f07 	tst.w	r0, #7
    eecc:	b342      	cbz	r2, ef20 <memchr+0x70>
    eece:	d1f6      	bne.n	eebe <memchr+0xe>
    eed0:	b4f0      	push	{r4, r5, r6, r7}
    eed2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    eed6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    eeda:	f022 0407 	bic.w	r4, r2, #7
    eede:	f07f 0700 	mvns.w	r7, #0
    eee2:	2300      	movs	r3, #0
    eee4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    eee8:	3c08      	subs	r4, #8
    eeea:	ea85 0501 	eor.w	r5, r5, r1
    eeee:	ea86 0601 	eor.w	r6, r6, r1
    eef2:	fa85 f547 	uadd8	r5, r5, r7
    eef6:	faa3 f587 	sel	r5, r3, r7
    eefa:	fa86 f647 	uadd8	r6, r6, r7
    eefe:	faa5 f687 	sel	r6, r5, r7
    ef02:	b98e      	cbnz	r6, ef28 <memchr+0x78>
    ef04:	d1ee      	bne.n	eee4 <memchr+0x34>
    ef06:	bcf0      	pop	{r4, r5, r6, r7}
    ef08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ef0c:	f002 0207 	and.w	r2, r2, #7
    ef10:	b132      	cbz	r2, ef20 <memchr+0x70>
    ef12:	f810 3b01 	ldrb.w	r3, [r0], #1
    ef16:	3a01      	subs	r2, #1
    ef18:	ea83 0301 	eor.w	r3, r3, r1
    ef1c:	b113      	cbz	r3, ef24 <memchr+0x74>
    ef1e:	d1f8      	bne.n	ef12 <memchr+0x62>
    ef20:	2000      	movs	r0, #0
    ef22:	4770      	bx	lr
    ef24:	3801      	subs	r0, #1
    ef26:	4770      	bx	lr
    ef28:	2d00      	cmp	r5, #0
    ef2a:	bf06      	itte	eq
    ef2c:	4635      	moveq	r5, r6
    ef2e:	3803      	subeq	r0, #3
    ef30:	3807      	subne	r0, #7
    ef32:	f015 0f01 	tst.w	r5, #1
    ef36:	d107      	bne.n	ef48 <memchr+0x98>
    ef38:	3001      	adds	r0, #1
    ef3a:	f415 7f80 	tst.w	r5, #256	; 0x100
    ef3e:	bf02      	ittt	eq
    ef40:	3001      	addeq	r0, #1
    ef42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    ef46:	3001      	addeq	r0, #1
    ef48:	bcf0      	pop	{r4, r5, r6, r7}
    ef4a:	3801      	subs	r0, #1
    ef4c:	4770      	bx	lr
    ef4e:	bf00      	nop

0000ef50 <frexp>:
    ef50:	b430      	push	{r4, r5}
    ef52:	b082      	sub	sp, #8
    ef54:	ed8d 0b00 	vstr	d0, [sp]
    ef58:	9a01      	ldr	r2, [sp, #4]
    ef5a:	4c19      	ldr	r4, [pc, #100]	; (efc0 <frexp+0x70>)
    ef5c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ef60:	2100      	movs	r1, #0
    ef62:	42a3      	cmp	r3, r4
    ef64:	6001      	str	r1, [r0, #0]
    ef66:	dc21      	bgt.n	efac <frexp+0x5c>
    ef68:	9c00      	ldr	r4, [sp, #0]
    ef6a:	431c      	orrs	r4, r3
    ef6c:	d01e      	beq.n	efac <frexp+0x5c>
    ef6e:	4c15      	ldr	r4, [pc, #84]	; (efc4 <frexp+0x74>)
    ef70:	4014      	ands	r4, r2
    ef72:	b954      	cbnz	r4, ef8a <frexp+0x3a>
    ef74:	ed9f 7b10 	vldr	d7, [pc, #64]	; efb8 <frexp+0x68>
    ef78:	ee20 7b07 	vmul.f64	d7, d0, d7
    ef7c:	ed8d 7b00 	vstr	d7, [sp]
    ef80:	9a01      	ldr	r2, [sp, #4]
    ef82:	f06f 0135 	mvn.w	r1, #53	; 0x35
    ef86:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    ef8a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    ef8e:	e9dd 4500 	ldrd	r4, r5, [sp]
    ef92:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    ef96:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    ef9a:	151b      	asrs	r3, r3, #20
    ef9c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    efa0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    efa4:	e9cd 4500 	strd	r4, r5, [sp]
    efa8:	440b      	add	r3, r1
    efaa:	6003      	str	r3, [r0, #0]
    efac:	ed9d 0b00 	vldr	d0, [sp]
    efb0:	b002      	add	sp, #8
    efb2:	bc30      	pop	{r4, r5}
    efb4:	4770      	bx	lr
    efb6:	bf00      	nop
    efb8:	00000000 	.word	0x00000000
    efbc:	43500000 	.word	0x43500000
    efc0:	7fefffff 	.word	0x7fefffff
    efc4:	7ff00000 	.word	0x7ff00000

0000efc8 <__assert_func>:
    efc8:	b500      	push	{lr}
    efca:	4c0b      	ldr	r4, [pc, #44]	; (eff8 <__assert_func+0x30>)
    efcc:	6825      	ldr	r5, [r4, #0]
    efce:	4614      	mov	r4, r2
    efd0:	68ee      	ldr	r6, [r5, #12]
    efd2:	461a      	mov	r2, r3
    efd4:	b085      	sub	sp, #20
    efd6:	4603      	mov	r3, r0
    efd8:	460d      	mov	r5, r1
    efda:	b14c      	cbz	r4, eff0 <__assert_func+0x28>
    efdc:	4907      	ldr	r1, [pc, #28]	; (effc <__assert_func+0x34>)
    efde:	9500      	str	r5, [sp, #0]
    efe0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    efe4:	4630      	mov	r0, r6
    efe6:	4906      	ldr	r1, [pc, #24]	; (f000 <__assert_func+0x38>)
    efe8:	f000 ff86 	bl	fef8 <fiprintf>
    efec:	f7fa faf8 	bl	95e0 <abort>
    eff0:	4904      	ldr	r1, [pc, #16]	; (f004 <__assert_func+0x3c>)
    eff2:	460c      	mov	r4, r1
    eff4:	e7f3      	b.n	efde <__assert_func+0x16>
    eff6:	bf00      	nop
    eff8:	2000499c 	.word	0x2000499c
    effc:	20000a9c 	.word	0x20000a9c
    f000:	20000aac 	.word	0x20000aac
    f004:	200004f8 	.word	0x200004f8

0000f008 <_calloc_r>:
    f008:	b538      	push	{r3, r4, r5, lr}
    f00a:	fba1 1402 	umull	r1, r4, r1, r2
    f00e:	bb8c      	cbnz	r4, f074 <_calloc_r+0x6c>
    f010:	f7fb fef4 	bl	adfc <_malloc_r>
    f014:	4605      	mov	r5, r0
    f016:	b1e0      	cbz	r0, f052 <_calloc_r+0x4a>
    f018:	f850 2c04 	ldr.w	r2, [r0, #-4]
    f01c:	f022 0203 	bic.w	r2, r2, #3
    f020:	3a04      	subs	r2, #4
    f022:	2a24      	cmp	r2, #36	; 0x24
    f024:	d817      	bhi.n	f056 <_calloc_r+0x4e>
    f026:	2a13      	cmp	r2, #19
    f028:	d91a      	bls.n	f060 <_calloc_r+0x58>
    f02a:	2a1b      	cmp	r2, #27
    f02c:	e9c0 4400 	strd	r4, r4, [r0]
    f030:	d91d      	bls.n	f06e <_calloc_r+0x66>
    f032:	2a24      	cmp	r2, #36	; 0x24
    f034:	bf14      	ite	ne
    f036:	f100 0210 	addne.w	r2, r0, #16
    f03a:	f100 0218 	addeq.w	r2, r0, #24
    f03e:	f04f 0300 	mov.w	r3, #0
    f042:	e9c0 4402 	strd	r4, r4, [r0, #8]
    f046:	bf04      	itt	eq
    f048:	6104      	streq	r4, [r0, #16]
    f04a:	6144      	streq	r4, [r0, #20]
    f04c:	e9c2 3300 	strd	r3, r3, [r2]
    f050:	6093      	str	r3, [r2, #8]
    f052:	4628      	mov	r0, r5
    f054:	bd38      	pop	{r3, r4, r5, pc}
    f056:	4621      	mov	r1, r4
    f058:	f7fc ff18 	bl	be8c <memset>
    f05c:	4628      	mov	r0, r5
    f05e:	bd38      	pop	{r3, r4, r5, pc}
    f060:	4602      	mov	r2, r0
    f062:	2300      	movs	r3, #0
    f064:	e9c2 3300 	strd	r3, r3, [r2]
    f068:	6093      	str	r3, [r2, #8]
    f06a:	4628      	mov	r0, r5
    f06c:	bd38      	pop	{r3, r4, r5, pc}
    f06e:	f100 0208 	add.w	r2, r0, #8
    f072:	e7f6      	b.n	f062 <_calloc_r+0x5a>
    f074:	f7fd f860 	bl	c138 <__errno>
    f078:	230c      	movs	r3, #12
    f07a:	2500      	movs	r5, #0
    f07c:	6003      	str	r3, [r0, #0]
    f07e:	e7e8      	b.n	f052 <_calloc_r+0x4a>

0000f080 <quorem>:
    f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f084:	6903      	ldr	r3, [r0, #16]
    f086:	690c      	ldr	r4, [r1, #16]
    f088:	42a3      	cmp	r3, r4
    f08a:	b083      	sub	sp, #12
    f08c:	f2c0 8087 	blt.w	f19e <quorem+0x11e>
    f090:	3c01      	subs	r4, #1
    f092:	f101 0514 	add.w	r5, r1, #20
    f096:	00a3      	lsls	r3, r4, #2
    f098:	f100 0814 	add.w	r8, r0, #20
    f09c:	9300      	str	r3, [sp, #0]
    f09e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    f0a2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    f0a6:	3301      	adds	r3, #1
    f0a8:	4681      	mov	r9, r0
    f0aa:	429a      	cmp	r2, r3
    f0ac:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    f0b0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    f0b4:	9001      	str	r0, [sp, #4]
    f0b6:	fbb2 f6f3 	udiv	r6, r2, r3
    f0ba:	d33b      	bcc.n	f134 <quorem+0xb4>
    f0bc:	f04f 0c00 	mov.w	ip, #0
    f0c0:	46ae      	mov	lr, r5
    f0c2:	4640      	mov	r0, r8
    f0c4:	46e2      	mov	sl, ip
    f0c6:	4663      	mov	r3, ip
    f0c8:	f85e bb04 	ldr.w	fp, [lr], #4
    f0cc:	6802      	ldr	r2, [r0, #0]
    f0ce:	fa1f fc8b 	uxth.w	ip, fp
    f0d2:	fb06 330c 	mla	r3, r6, ip, r3
    f0d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    f0da:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    f0de:	fb06 cc0b 	mla	ip, r6, fp, ip
    f0e2:	b29b      	uxth	r3, r3
    f0e4:	ebaa 0303 	sub.w	r3, sl, r3
    f0e8:	fa1f fa8c 	uxth.w	sl, ip
    f0ec:	fa13 f382 	uxtah	r3, r3, r2
    f0f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    f0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    f0f8:	b29b      	uxth	r3, r3
    f0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f0fe:	4577      	cmp	r7, lr
    f100:	f840 3b04 	str.w	r3, [r0], #4
    f104:	ea4f 4a22 	mov.w	sl, r2, asr #16
    f108:	ea4f 431c 	mov.w	r3, ip, lsr #16
    f10c:	d2dc      	bcs.n	f0c8 <quorem+0x48>
    f10e:	9b00      	ldr	r3, [sp, #0]
    f110:	f858 3003 	ldr.w	r3, [r8, r3]
    f114:	b973      	cbnz	r3, f134 <quorem+0xb4>
    f116:	9b01      	ldr	r3, [sp, #4]
    f118:	3b04      	subs	r3, #4
    f11a:	4598      	cmp	r8, r3
    f11c:	d304      	bcc.n	f128 <quorem+0xa8>
    f11e:	e007      	b.n	f130 <quorem+0xb0>
    f120:	4598      	cmp	r8, r3
    f122:	f104 34ff 	add.w	r4, r4, #4294967295
    f126:	d203      	bcs.n	f130 <quorem+0xb0>
    f128:	f853 2904 	ldr.w	r2, [r3], #-4
    f12c:	2a00      	cmp	r2, #0
    f12e:	d0f7      	beq.n	f120 <quorem+0xa0>
    f130:	f8c9 4010 	str.w	r4, [r9, #16]
    f134:	4648      	mov	r0, r9
    f136:	f7fd fea7 	bl	ce88 <__mcmp>
    f13a:	2800      	cmp	r0, #0
    f13c:	db2b      	blt.n	f196 <quorem+0x116>
    f13e:	3601      	adds	r6, #1
    f140:	4641      	mov	r1, r8
    f142:	2300      	movs	r3, #0
    f144:	f855 0b04 	ldr.w	r0, [r5], #4
    f148:	f8d1 c000 	ldr.w	ip, [r1]
    f14c:	b282      	uxth	r2, r0
    f14e:	1a9a      	subs	r2, r3, r2
    f150:	0c03      	lsrs	r3, r0, #16
    f152:	fa12 f28c 	uxtah	r2, r2, ip
    f156:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    f15a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    f15e:	b292      	uxth	r2, r2
    f160:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    f164:	42af      	cmp	r7, r5
    f166:	f841 2b04 	str.w	r2, [r1], #4
    f16a:	ea4f 4323 	mov.w	r3, r3, asr #16
    f16e:	d2e9      	bcs.n	f144 <quorem+0xc4>
    f170:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    f174:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    f178:	b96a      	cbnz	r2, f196 <quorem+0x116>
    f17a:	3b04      	subs	r3, #4
    f17c:	4598      	cmp	r8, r3
    f17e:	d304      	bcc.n	f18a <quorem+0x10a>
    f180:	e007      	b.n	f192 <quorem+0x112>
    f182:	4598      	cmp	r8, r3
    f184:	f104 34ff 	add.w	r4, r4, #4294967295
    f188:	d203      	bcs.n	f192 <quorem+0x112>
    f18a:	f853 2904 	ldr.w	r2, [r3], #-4
    f18e:	2a00      	cmp	r2, #0
    f190:	d0f7      	beq.n	f182 <quorem+0x102>
    f192:	f8c9 4010 	str.w	r4, [r9, #16]
    f196:	4630      	mov	r0, r6
    f198:	b003      	add	sp, #12
    f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f19e:	2000      	movs	r0, #0
    f1a0:	b003      	add	sp, #12
    f1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1a6:	bf00      	nop

0000f1a8 <_dtoa_r>:
    f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1ac:	ed2d 8b02 	vpush	{d8}
    f1b0:	b08f      	sub	sp, #60	; 0x3c
    f1b2:	ed8d 0b02 	vstr	d0, [sp, #8]
    f1b6:	9101      	str	r1, [sp, #4]
    f1b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
    f1ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    f1bc:	9305      	str	r3, [sp, #20]
    f1be:	ec57 6b10 	vmov	r6, r7, d0
    f1c2:	4604      	mov	r4, r0
    f1c4:	4693      	mov	fp, r2
    f1c6:	b141      	cbz	r1, f1da <_dtoa_r+0x32>
    f1c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    f1ca:	604a      	str	r2, [r1, #4]
    f1cc:	2301      	movs	r3, #1
    f1ce:	4093      	lsls	r3, r2
    f1d0:	608b      	str	r3, [r1, #8]
    f1d2:	f7fd fbf9 	bl	c9c8 <_Bfree>
    f1d6:	2300      	movs	r3, #0
    f1d8:	63a3      	str	r3, [r4, #56]	; 0x38
    f1da:	f1b7 0800 	subs.w	r8, r7, #0
    f1de:	bfb4      	ite	lt
    f1e0:	2301      	movlt	r3, #1
    f1e2:	2300      	movge	r3, #0
    f1e4:	602b      	str	r3, [r5, #0]
    f1e6:	4bbe      	ldr	r3, [pc, #760]	; (f4e0 <_dtoa_r+0x338>)
    f1e8:	bfbc      	itt	lt
    f1ea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    f1ee:	f8cd 800c 	strlt.w	r8, [sp, #12]
    f1f2:	ea33 0308 	bics.w	r3, r3, r8
    f1f6:	f000 809f 	beq.w	f338 <_dtoa_r+0x190>
    f1fa:	ed9d 8b02 	vldr	d8, [sp, #8]
    f1fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f206:	d111      	bne.n	f22c <_dtoa_r+0x84>
    f208:	9a05      	ldr	r2, [sp, #20]
    f20a:	2301      	movs	r3, #1
    f20c:	6013      	str	r3, [r2, #0]
    f20e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f210:	2b00      	cmp	r3, #0
    f212:	f000 823f 	beq.w	f694 <_dtoa_r+0x4ec>
    f216:	4bb3      	ldr	r3, [pc, #716]	; (f4e4 <_dtoa_r+0x33c>)
    f218:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f21a:	6013      	str	r3, [r2, #0]
    f21c:	3b01      	subs	r3, #1
    f21e:	9300      	str	r3, [sp, #0]
    f220:	9800      	ldr	r0, [sp, #0]
    f222:	b00f      	add	sp, #60	; 0x3c
    f224:	ecbd 8b02 	vpop	{d8}
    f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f22c:	aa0c      	add	r2, sp, #48	; 0x30
    f22e:	a90d      	add	r1, sp, #52	; 0x34
    f230:	4620      	mov	r0, r4
    f232:	eeb0 0b48 	vmov.f64	d0, d8
    f236:	f7fd fef3 	bl	d020 <__d2b>
    f23a:	ea5f 5318 	movs.w	r3, r8, lsr #20
    f23e:	4605      	mov	r5, r0
    f240:	f040 8092 	bne.w	f368 <_dtoa_r+0x1c0>
    f244:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    f248:	440b      	add	r3, r1
    f24a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    f24e:	2a20      	cmp	r2, #32
    f250:	f340 82fa 	ble.w	f848 <_dtoa_r+0x6a0>
    f254:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    f258:	fa08 f802 	lsl.w	r8, r8, r2
    f25c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    f260:	40d6      	lsrs	r6, r2
    f262:	ea48 0206 	orr.w	r2, r8, r6
    f266:	ee07 2a10 	vmov	s14, r2
    f26a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    f26e:	1e58      	subs	r0, r3, #1
    f270:	ee17 6a90 	vmov	r6, s15
    f274:	ec53 2b17 	vmov	r2, r3, d7
    f278:	f04f 0a01 	mov.w	sl, #1
    f27c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    f280:	ed9f 3b91 	vldr	d3, [pc, #580]	; f4c8 <_dtoa_r+0x320>
    f284:	ed9f 7b92 	vldr	d7, [pc, #584]	; f4d0 <_dtoa_r+0x328>
    f288:	ed9f 5b93 	vldr	d5, [pc, #588]	; f4d8 <_dtoa_r+0x330>
    f28c:	ee06 0a90 	vmov	s13, r0
    f290:	ec43 2b12 	vmov	d2, r2, r3
    f294:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    f298:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f29c:	ee32 6b46 	vsub.f64	d6, d2, d6
    f2a0:	eea6 7b03 	vfma.f64	d7, d6, d3
    f2a4:	eea4 7b05 	vfma.f64	d7, d4, d5
    f2a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f2ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    f2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2b4:	ee16 7a90 	vmov	r7, s13
    f2b8:	d508      	bpl.n	f2cc <_dtoa_r+0x124>
    f2ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f2be:	eeb4 6b47 	vcmp.f64	d6, d7
    f2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2c6:	bf18      	it	ne
    f2c8:	f107 37ff 	addne.w	r7, r7, #4294967295
    f2cc:	2f16      	cmp	r7, #22
    f2ce:	f200 8145 	bhi.w	f55c <_dtoa_r+0x3b4>
    f2d2:	4b85      	ldr	r3, [pc, #532]	; (f4e8 <_dtoa_r+0x340>)
    f2d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    f2d8:	ed93 7b00 	vldr	d7, [r3]
    f2dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f2e4:	d557      	bpl.n	f396 <_dtoa_r+0x1ee>
    f2e6:	1a09      	subs	r1, r1, r0
    f2e8:	2300      	movs	r3, #0
    f2ea:	f1b1 0801 	subs.w	r8, r1, #1
    f2ee:	f107 37ff 	add.w	r7, r7, #4294967295
    f2f2:	930a      	str	r3, [sp, #40]	; 0x28
    f2f4:	f100 8139 	bmi.w	f56a <_dtoa_r+0x3c2>
    f2f8:	2300      	movs	r3, #0
    f2fa:	9306      	str	r3, [sp, #24]
    f2fc:	2f00      	cmp	r7, #0
    f2fe:	da52      	bge.n	f3a6 <_dtoa_r+0x1fe>
    f300:	9b06      	ldr	r3, [sp, #24]
    f302:	9704      	str	r7, [sp, #16]
    f304:	1bdb      	subs	r3, r3, r7
    f306:	9306      	str	r3, [sp, #24]
    f308:	427b      	negs	r3, r7
    f30a:	9308      	str	r3, [sp, #32]
    f30c:	9b01      	ldr	r3, [sp, #4]
    f30e:	2b09      	cmp	r3, #9
    f310:	f04f 0700 	mov.w	r7, #0
    f314:	d84e      	bhi.n	f3b4 <_dtoa_r+0x20c>
    f316:	2b05      	cmp	r3, #5
    f318:	f340 829d 	ble.w	f856 <_dtoa_r+0x6ae>
    f31c:	3b04      	subs	r3, #4
    f31e:	9301      	str	r3, [sp, #4]
    f320:	2600      	movs	r6, #0
    f322:	9b01      	ldr	r3, [sp, #4]
    f324:	1e9a      	subs	r2, r3, #2
    f326:	2a03      	cmp	r2, #3
    f328:	f200 8125 	bhi.w	f576 <_dtoa_r+0x3ce>
    f32c:	e8df f012 	tbh	[pc, r2, lsl #1]
    f330:	03a703aa 	.word	0x03a703aa
    f334:	037e039d 	.word	0x037e039d
    f338:	9a05      	ldr	r2, [sp, #20]
    f33a:	f3c8 0813 	ubfx	r8, r8, #0, #20
    f33e:	f242 730f 	movw	r3, #9999	; 0x270f
    f342:	ea58 0806 	orrs.w	r8, r8, r6
    f346:	6013      	str	r3, [r2, #0]
    f348:	d11e      	bne.n	f388 <_dtoa_r+0x1e0>
    f34a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f34c:	2b00      	cmp	r3, #0
    f34e:	f000 8591 	beq.w	fe74 <_dtoa_r+0xccc>
    f352:	4b66      	ldr	r3, [pc, #408]	; (f4ec <_dtoa_r+0x344>)
    f354:	9300      	str	r3, [sp, #0]
    f356:	3308      	adds	r3, #8
    f358:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f35a:	9800      	ldr	r0, [sp, #0]
    f35c:	6013      	str	r3, [r2, #0]
    f35e:	b00f      	add	sp, #60	; 0x3c
    f360:	ecbd 8b02 	vpop	{d8}
    f364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f368:	ee18 6a90 	vmov	r6, s17
    f36c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    f370:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    f374:	ec53 2b18 	vmov	r2, r3, d8
    f378:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    f37c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f37e:	f04f 0a00 	mov.w	sl, #0
    f382:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    f386:	e77b      	b.n	f280 <_dtoa_r+0xd8>
    f388:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f38a:	2b00      	cmp	r3, #0
    f38c:	f040 833b 	bne.w	fa06 <_dtoa_r+0x85e>
    f390:	4b57      	ldr	r3, [pc, #348]	; (f4f0 <_dtoa_r+0x348>)
    f392:	9300      	str	r3, [sp, #0]
    f394:	e744      	b.n	f220 <_dtoa_r+0x78>
    f396:	1a09      	subs	r1, r1, r0
    f398:	2300      	movs	r3, #0
    f39a:	f1b1 0801 	subs.w	r8, r1, #1
    f39e:	930a      	str	r3, [sp, #40]	; 0x28
    f3a0:	f100 80e3 	bmi.w	f56a <_dtoa_r+0x3c2>
    f3a4:	9306      	str	r3, [sp, #24]
    f3a6:	2300      	movs	r3, #0
    f3a8:	9308      	str	r3, [sp, #32]
    f3aa:	9b01      	ldr	r3, [sp, #4]
    f3ac:	9704      	str	r7, [sp, #16]
    f3ae:	2b09      	cmp	r3, #9
    f3b0:	44b8      	add	r8, r7
    f3b2:	d9b0      	bls.n	f316 <_dtoa_r+0x16e>
    f3b4:	2300      	movs	r3, #0
    f3b6:	2601      	movs	r6, #1
    f3b8:	9301      	str	r3, [sp, #4]
    f3ba:	9607      	str	r6, [sp, #28]
    f3bc:	f04f 39ff 	mov.w	r9, #4294967295
    f3c0:	469b      	mov	fp, r3
    f3c2:	2100      	movs	r1, #0
    f3c4:	63e1      	str	r1, [r4, #60]	; 0x3c
    f3c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    f3ca:	4620      	mov	r0, r4
    f3cc:	f7fd fad6 	bl	c97c <_Balloc>
    f3d0:	9000      	str	r0, [sp, #0]
    f3d2:	2800      	cmp	r0, #0
    f3d4:	f000 8540 	beq.w	fe58 <_dtoa_r+0xcb0>
    f3d8:	9b00      	ldr	r3, [sp, #0]
    f3da:	63a3      	str	r3, [r4, #56]	; 0x38
    f3dc:	f1b9 0f0e 	cmp.w	r9, #14
    f3e0:	f200 80dc 	bhi.w	f59c <_dtoa_r+0x3f4>
    f3e4:	2e00      	cmp	r6, #0
    f3e6:	f000 80d9 	beq.w	f59c <_dtoa_r+0x3f4>
    f3ea:	9b04      	ldr	r3, [sp, #16]
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	f340 83de 	ble.w	fbae <_dtoa_r+0xa06>
    f3f2:	4a3d      	ldr	r2, [pc, #244]	; (f4e8 <_dtoa_r+0x340>)
    f3f4:	f003 010f 	and.w	r1, r3, #15
    f3f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f3fc:	ed92 7b00 	vldr	d7, [r2]
    f400:	111a      	asrs	r2, r3, #4
    f402:	05db      	lsls	r3, r3, #23
    f404:	f140 8382 	bpl.w	fb0c <_dtoa_r+0x964>
    f408:	493a      	ldr	r1, [pc, #232]	; (f4f4 <_dtoa_r+0x34c>)
    f40a:	ed91 6b08 	vldr	d6, [r1, #32]
    f40e:	f002 020f 	and.w	r2, r2, #15
    f412:	2003      	movs	r0, #3
    f414:	ee88 5b06 	vdiv.f64	d5, d8, d6
    f418:	b15a      	cbz	r2, f432 <_dtoa_r+0x28a>
    f41a:	4936      	ldr	r1, [pc, #216]	; (f4f4 <_dtoa_r+0x34c>)
    f41c:	07d6      	lsls	r6, r2, #31
    f41e:	d504      	bpl.n	f42a <_dtoa_r+0x282>
    f420:	ed91 6b00 	vldr	d6, [r1]
    f424:	3001      	adds	r0, #1
    f426:	ee27 7b06 	vmul.f64	d7, d7, d6
    f42a:	1052      	asrs	r2, r2, #1
    f42c:	f101 0108 	add.w	r1, r1, #8
    f430:	d1f4      	bne.n	f41c <_dtoa_r+0x274>
    f432:	ee85 6b07 	vdiv.f64	d6, d5, d7
    f436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f438:	b13b      	cbz	r3, f44a <_dtoa_r+0x2a2>
    f43a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    f43e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    f442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f446:	f100 84ae 	bmi.w	fda6 <_dtoa_r+0xbfe>
    f44a:	ee07 0a90 	vmov	s15, r0
    f44e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    f452:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    f456:	eea5 7b06 	vfma.f64	d7, d5, d6
    f45a:	ee17 2a90 	vmov	r2, s15
    f45e:	ec51 0b17 	vmov	r0, r1, d7
    f462:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    f466:	f1b9 0f00 	cmp.w	r9, #0
    f46a:	f000 8388 	beq.w	fb7e <_dtoa_r+0x9d6>
    f46e:	9e04      	ldr	r6, [sp, #16]
    f470:	464a      	mov	r2, r9
    f472:	9b07      	ldr	r3, [sp, #28]
    f474:	2b00      	cmp	r3, #0
    f476:	f000 8447 	beq.w	fd08 <_dtoa_r+0xb60>
    f47a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f47e:	4b1a      	ldr	r3, [pc, #104]	; (f4e8 <_dtoa_r+0x340>)
    f480:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    f484:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    f488:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    f48c:	ee36 7b47 	vsub.f64	d7, d6, d7
    f490:	ed1c 6b02 	vldr	d6, [ip, #-8]
    f494:	ee83 5b06 	vdiv.f64	d5, d3, d6
    f498:	ec41 0b16 	vmov	d6, r0, r1
    f49c:	ee14 0a90 	vmov	r0, s9
    f4a0:	ee35 5b46 	vsub.f64	d5, d5, d6
    f4a4:	9900      	ldr	r1, [sp, #0]
    f4a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    f4aa:	3030      	adds	r0, #48	; 0x30
    f4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4b0:	f801 0b01 	strb.w	r0, [r1], #1
    f4b4:	f300 84ac 	bgt.w	fe10 <_dtoa_r+0xc68>
    f4b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    f4bc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f4c0:	f04f 0c00 	mov.w	ip, #0
    f4c4:	e031      	b.n	f52a <_dtoa_r+0x382>
    f4c6:	bf00      	nop
    f4c8:	636f4361 	.word	0x636f4361
    f4cc:	3fd287a7 	.word	0x3fd287a7
    f4d0:	8b60c8b3 	.word	0x8b60c8b3
    f4d4:	3fc68a28 	.word	0x3fc68a28
    f4d8:	509f79fb 	.word	0x509f79fb
    f4dc:	3fd34413 	.word	0x3fd34413
    f4e0:	7ff00000 	.word	0x7ff00000
    f4e4:	20000d25 	.word	0x20000d25
    f4e8:	200002a8 	.word	0x200002a8
    f4ec:	20000c78 	.word	0x20000c78
    f4f0:	20000c84 	.word	0x20000c84
    f4f4:	20000280 	.word	0x20000280
    f4f8:	f10c 0c01 	add.w	ip, ip, #1
    f4fc:	4594      	cmp	ip, r2
    f4fe:	da4d      	bge.n	f59c <_dtoa_r+0x3f4>
    f500:	ee27 7b04 	vmul.f64	d7, d7, d4
    f504:	ee25 5b04 	vmul.f64	d5, d5, d4
    f508:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    f50c:	ee16 3a90 	vmov	r3, s13
    f510:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    f514:	3330      	adds	r3, #48	; 0x30
    f516:	ee37 7b43 	vsub.f64	d7, d7, d3
    f51a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    f51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f522:	f801 3b01 	strb.w	r3, [r1], #1
    f526:	f100 8473 	bmi.w	fe10 <_dtoa_r+0xc68>
    f52a:	ee32 6b47 	vsub.f64	d6, d2, d7
    f52e:	eeb4 6bc5 	vcmpe.f64	d6, d5
    f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f536:	d5df      	bpl.n	f4f8 <_dtoa_r+0x350>
    f538:	9a00      	ldr	r2, [sp, #0]
    f53a:	9604      	str	r6, [sp, #16]
    f53c:	e002      	b.n	f544 <_dtoa_r+0x39c>
    f53e:	428a      	cmp	r2, r1
    f540:	f000 8450 	beq.w	fde4 <_dtoa_r+0xc3c>
    f544:	4689      	mov	r9, r1
    f546:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    f54a:	2b39      	cmp	r3, #57	; 0x39
    f54c:	d0f7      	beq.n	f53e <_dtoa_r+0x396>
    f54e:	3301      	adds	r3, #1
    f550:	b2db      	uxtb	r3, r3
    f552:	700b      	strb	r3, [r1, #0]
    f554:	9b04      	ldr	r3, [sp, #16]
    f556:	3301      	adds	r3, #1
    f558:	9304      	str	r3, [sp, #16]
    f55a:	e155      	b.n	f808 <_dtoa_r+0x660>
    f55c:	1a09      	subs	r1, r1, r0
    f55e:	2301      	movs	r3, #1
    f560:	f1b1 0801 	subs.w	r8, r1, #1
    f564:	930a      	str	r3, [sp, #40]	; 0x28
    f566:	f57f aec7 	bpl.w	f2f8 <_dtoa_r+0x150>
    f56a:	f1c1 0301 	rsb	r3, r1, #1
    f56e:	9306      	str	r3, [sp, #24]
    f570:	f04f 0800 	mov.w	r8, #0
    f574:	e6c2      	b.n	f2fc <_dtoa_r+0x154>
    f576:	2600      	movs	r6, #0
    f578:	63e6      	str	r6, [r4, #60]	; 0x3c
    f57a:	4631      	mov	r1, r6
    f57c:	4620      	mov	r0, r4
    f57e:	f7fd f9fd 	bl	c97c <_Balloc>
    f582:	9000      	str	r0, [sp, #0]
    f584:	2800      	cmp	r0, #0
    f586:	f000 8467 	beq.w	fe58 <_dtoa_r+0xcb0>
    f58a:	9b00      	ldr	r3, [sp, #0]
    f58c:	63a3      	str	r3, [r4, #56]	; 0x38
    f58e:	f04f 33ff 	mov.w	r3, #4294967295
    f592:	930b      	str	r3, [sp, #44]	; 0x2c
    f594:	4699      	mov	r9, r3
    f596:	2301      	movs	r3, #1
    f598:	46b3      	mov	fp, r6
    f59a:	9307      	str	r3, [sp, #28]
    f59c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f59e:	2a00      	cmp	r2, #0
    f5a0:	db55      	blt.n	f64e <_dtoa_r+0x4a6>
    f5a2:	9904      	ldr	r1, [sp, #16]
    f5a4:	290e      	cmp	r1, #14
    f5a6:	dc52      	bgt.n	f64e <_dtoa_r+0x4a6>
    f5a8:	4bb7      	ldr	r3, [pc, #732]	; (f888 <_dtoa_r+0x6e0>)
    f5aa:	f1bb 0f00 	cmp.w	fp, #0
    f5ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f5b2:	ed93 6b00 	vldr	d6, [r3]
    f5b6:	da15      	bge.n	f5e4 <_dtoa_r+0x43c>
    f5b8:	f1b9 0f00 	cmp.w	r9, #0
    f5bc:	dc12      	bgt.n	f5e4 <_dtoa_r+0x43c>
    f5be:	f040 82f2 	bne.w	fba6 <_dtoa_r+0x9fe>
    f5c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    f5c6:	ee26 7b07 	vmul.f64	d7, d6, d7
    f5ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
    f5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5d2:	46ca      	mov	sl, r9
    f5d4:	464e      	mov	r6, r9
    f5d6:	f200 826d 	bhi.w	fab4 <_dtoa_r+0x90c>
    f5da:	f8dd 8000 	ldr.w	r8, [sp]
    f5de:	ea6f 0b0b 	mvn.w	fp, fp
    f5e2:	e270      	b.n	fac6 <_dtoa_r+0x91e>
    f5e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f5e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f5ec:	9900      	ldr	r1, [sp, #0]
    f5ee:	ee17 3a10 	vmov	r3, s14
    f5f2:	f1b9 0f01 	cmp.w	r9, #1
    f5f6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    f5fa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f5fe:	f801 3b01 	strb.w	r3, [r1], #1
    f602:	eea5 8b46 	vfms.f64	d8, d5, d6
    f606:	f000 8334 	beq.w	fc72 <_dtoa_r+0xaca>
    f60a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    f60e:	2301      	movs	r3, #1
    f610:	e011      	b.n	f636 <_dtoa_r+0x48e>
    f612:	ee88 7b06 	vdiv.f64	d7, d8, d6
    f616:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    f61a:	3301      	adds	r3, #1
    f61c:	ee17 2a10 	vmov	r2, s14
    f620:	454b      	cmp	r3, r9
    f622:	f102 0230 	add.w	r2, r2, #48	; 0x30
    f626:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    f62a:	f801 2b01 	strb.w	r2, [r1], #1
    f62e:	eea5 8b46 	vfms.f64	d8, d5, d6
    f632:	f000 831e 	beq.w	fc72 <_dtoa_r+0xaca>
    f636:	ee28 8b04 	vmul.f64	d8, d8, d4
    f63a:	eeb5 8b40 	vcmp.f64	d8, #0.0
    f63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f642:	d1e6      	bne.n	f612 <_dtoa_r+0x46a>
    f644:	9b04      	ldr	r3, [sp, #16]
    f646:	3301      	adds	r3, #1
    f648:	9304      	str	r3, [sp, #16]
    f64a:	4689      	mov	r9, r1
    f64c:	e0dc      	b.n	f808 <_dtoa_r+0x660>
    f64e:	9b07      	ldr	r3, [sp, #28]
    f650:	b343      	cbz	r3, f6a4 <_dtoa_r+0x4fc>
    f652:	9b01      	ldr	r3, [sp, #4]
    f654:	2b01      	cmp	r3, #1
    f656:	f340 8276 	ble.w	fb46 <_dtoa_r+0x99e>
    f65a:	9b08      	ldr	r3, [sp, #32]
    f65c:	f109 3aff 	add.w	sl, r9, #4294967295
    f660:	4553      	cmp	r3, sl
    f662:	f280 823f 	bge.w	fae4 <_dtoa_r+0x93c>
    f666:	9b08      	ldr	r3, [sp, #32]
    f668:	f8cd a020 	str.w	sl, [sp, #32]
    f66c:	ebaa 0203 	sub.w	r2, sl, r3
    f670:	4417      	add	r7, r2
    f672:	f04f 0a00 	mov.w	sl, #0
    f676:	f1b9 0f00 	cmp.w	r9, #0
    f67a:	f2c0 8325 	blt.w	fcc8 <_dtoa_r+0xb20>
    f67e:	9b06      	ldr	r3, [sp, #24]
    f680:	9309      	str	r3, [sp, #36]	; 0x24
    f682:	444b      	add	r3, r9
    f684:	44c8      	add	r8, r9
    f686:	9306      	str	r3, [sp, #24]
    f688:	2101      	movs	r1, #1
    f68a:	4620      	mov	r0, r4
    f68c:	f7fd fa48 	bl	cb20 <__i2b>
    f690:	4606      	mov	r6, r0
    f692:	e00c      	b.n	f6ae <_dtoa_r+0x506>
    f694:	4b7d      	ldr	r3, [pc, #500]	; (f88c <_dtoa_r+0x6e4>)
    f696:	9300      	str	r3, [sp, #0]
    f698:	9800      	ldr	r0, [sp, #0]
    f69a:	b00f      	add	sp, #60	; 0x3c
    f69c:	ecbd 8b02 	vpop	{d8}
    f6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6a4:	9b06      	ldr	r3, [sp, #24]
    f6a6:	f8dd a020 	ldr.w	sl, [sp, #32]
    f6aa:	9e07      	ldr	r6, [sp, #28]
    f6ac:	9309      	str	r3, [sp, #36]	; 0x24
    f6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6b0:	b16b      	cbz	r3, f6ce <_dtoa_r+0x526>
    f6b2:	f1b8 0f00 	cmp.w	r8, #0
    f6b6:	dd0a      	ble.n	f6ce <_dtoa_r+0x526>
    f6b8:	4543      	cmp	r3, r8
    f6ba:	9906      	ldr	r1, [sp, #24]
    f6bc:	461a      	mov	r2, r3
    f6be:	bfa8      	it	ge
    f6c0:	4642      	movge	r2, r8
    f6c2:	1a89      	subs	r1, r1, r2
    f6c4:	1a9b      	subs	r3, r3, r2
    f6c6:	9106      	str	r1, [sp, #24]
    f6c8:	9309      	str	r3, [sp, #36]	; 0x24
    f6ca:	eba8 0802 	sub.w	r8, r8, r2
    f6ce:	9b08      	ldr	r3, [sp, #32]
    f6d0:	b163      	cbz	r3, f6ec <_dtoa_r+0x544>
    f6d2:	9b07      	ldr	r3, [sp, #28]
    f6d4:	2b00      	cmp	r3, #0
    f6d6:	f000 82a7 	beq.w	fc28 <_dtoa_r+0xa80>
    f6da:	f1ba 0f00 	cmp.w	sl, #0
    f6de:	f300 8204 	bgt.w	faea <_dtoa_r+0x942>
    f6e2:	9b08      	ldr	r3, [sp, #32]
    f6e4:	ebb3 020a 	subs.w	r2, r3, sl
    f6e8:	f040 82ff 	bne.w	fcea <_dtoa_r+0xb42>
    f6ec:	2101      	movs	r1, #1
    f6ee:	4620      	mov	r0, r4
    f6f0:	f7fd fa16 	bl	cb20 <__i2b>
    f6f4:	2f00      	cmp	r7, #0
    f6f6:	4682      	mov	sl, r0
    f6f8:	f300 80af 	bgt.w	f85a <_dtoa_r+0x6b2>
    f6fc:	9b01      	ldr	r3, [sp, #4]
    f6fe:	2b01      	cmp	r3, #1
    f700:	f340 8187 	ble.w	fa12 <_dtoa_r+0x86a>
    f704:	2300      	movs	r3, #0
    f706:	9308      	str	r3, [sp, #32]
    f708:	2001      	movs	r0, #1
    f70a:	2f00      	cmp	r7, #0
    f70c:	f040 80b1 	bne.w	f872 <_dtoa_r+0x6ca>
    f710:	4440      	add	r0, r8
    f712:	f010 001f 	ands.w	r0, r0, #31
    f716:	f000 817a 	beq.w	fa0e <_dtoa_r+0x866>
    f71a:	f1c0 0220 	rsb	r2, r0, #32
    f71e:	2a04      	cmp	r2, #4
    f720:	f300 8088 	bgt.w	f834 <_dtoa_r+0x68c>
    f724:	f040 81f6 	bne.w	fb14 <_dtoa_r+0x96c>
    f728:	9b06      	ldr	r3, [sp, #24]
    f72a:	2b00      	cmp	r3, #0
    f72c:	dd05      	ble.n	f73a <_dtoa_r+0x592>
    f72e:	4629      	mov	r1, r5
    f730:	461a      	mov	r2, r3
    f732:	4620      	mov	r0, r4
    f734:	f7fd fb30 	bl	cd98 <__lshift>
    f738:	4605      	mov	r5, r0
    f73a:	f1b8 0f00 	cmp.w	r8, #0
    f73e:	dd05      	ble.n	f74c <_dtoa_r+0x5a4>
    f740:	4651      	mov	r1, sl
    f742:	4642      	mov	r2, r8
    f744:	4620      	mov	r0, r4
    f746:	f7fd fb27 	bl	cd98 <__lshift>
    f74a:	4682      	mov	sl, r0
    f74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f74e:	2b00      	cmp	r3, #0
    f750:	f040 813f 	bne.w	f9d2 <_dtoa_r+0x82a>
    f754:	f1b9 0f00 	cmp.w	r9, #0
    f758:	f340 8125 	ble.w	f9a6 <_dtoa_r+0x7fe>
    f75c:	9b07      	ldr	r3, [sp, #28]
    f75e:	2b00      	cmp	r3, #0
    f760:	f040 80a3 	bne.w	f8aa <_dtoa_r+0x702>
    f764:	9b04      	ldr	r3, [sp, #16]
    f766:	3301      	adds	r3, #1
    f768:	9304      	str	r3, [sp, #16]
    f76a:	f8dd 8000 	ldr.w	r8, [sp]
    f76e:	2701      	movs	r7, #1
    f770:	e007      	b.n	f782 <_dtoa_r+0x5da>
    f772:	4629      	mov	r1, r5
    f774:	2300      	movs	r3, #0
    f776:	220a      	movs	r2, #10
    f778:	4620      	mov	r0, r4
    f77a:	f7fd f92f 	bl	c9dc <__multadd>
    f77e:	3701      	adds	r7, #1
    f780:	4605      	mov	r5, r0
    f782:	4651      	mov	r1, sl
    f784:	4628      	mov	r0, r5
    f786:	f7ff fc7b 	bl	f080 <quorem>
    f78a:	45b9      	cmp	r9, r7
    f78c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f790:	f808 0b01 	strb.w	r0, [r8], #1
    f794:	dced      	bgt.n	f772 <_dtoa_r+0x5ca>
    f796:	f1b9 0f00 	cmp.w	r9, #0
    f79a:	9a00      	ldr	r2, [sp, #0]
    f79c:	bfcc      	ite	gt
    f79e:	46cb      	movgt	fp, r9
    f7a0:	f04f 0b01 	movle.w	fp, #1
    f7a4:	4603      	mov	r3, r0
    f7a6:	4493      	add	fp, r2
    f7a8:	2700      	movs	r7, #0
    f7aa:	4629      	mov	r1, r5
    f7ac:	2201      	movs	r2, #1
    f7ae:	4620      	mov	r0, r4
    f7b0:	9301      	str	r3, [sp, #4]
    f7b2:	f7fd faf1 	bl	cd98 <__lshift>
    f7b6:	4651      	mov	r1, sl
    f7b8:	4605      	mov	r5, r0
    f7ba:	f7fd fb65 	bl	ce88 <__mcmp>
    f7be:	2800      	cmp	r0, #0
    f7c0:	f340 81af 	ble.w	fb22 <_dtoa_r+0x97a>
    f7c4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f7c8:	9a00      	ldr	r2, [sp, #0]
    f7ca:	f10b 3bff 	add.w	fp, fp, #4294967295
    f7ce:	e004      	b.n	f7da <_dtoa_r+0x632>
    f7d0:	455a      	cmp	r2, fp
    f7d2:	f000 81b1 	beq.w	fb38 <_dtoa_r+0x990>
    f7d6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f7da:	2b39      	cmp	r3, #57	; 0x39
    f7dc:	f10b 0901 	add.w	r9, fp, #1
    f7e0:	d0f6      	beq.n	f7d0 <_dtoa_r+0x628>
    f7e2:	3301      	adds	r3, #1
    f7e4:	f88b 3000 	strb.w	r3, [fp]
    f7e8:	4651      	mov	r1, sl
    f7ea:	4620      	mov	r0, r4
    f7ec:	f7fd f8ec 	bl	c9c8 <_Bfree>
    f7f0:	b156      	cbz	r6, f808 <_dtoa_r+0x660>
    f7f2:	b12f      	cbz	r7, f800 <_dtoa_r+0x658>
    f7f4:	42b7      	cmp	r7, r6
    f7f6:	d003      	beq.n	f800 <_dtoa_r+0x658>
    f7f8:	4639      	mov	r1, r7
    f7fa:	4620      	mov	r0, r4
    f7fc:	f7fd f8e4 	bl	c9c8 <_Bfree>
    f800:	4631      	mov	r1, r6
    f802:	4620      	mov	r0, r4
    f804:	f7fd f8e0 	bl	c9c8 <_Bfree>
    f808:	4629      	mov	r1, r5
    f80a:	4620      	mov	r0, r4
    f80c:	f7fd f8dc 	bl	c9c8 <_Bfree>
    f810:	2300      	movs	r3, #0
    f812:	f889 3000 	strb.w	r3, [r9]
    f816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    f81a:	601a      	str	r2, [r3, #0]
    f81c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f81e:	2b00      	cmp	r3, #0
    f820:	f43f acfe 	beq.w	f220 <_dtoa_r+0x78>
    f824:	9800      	ldr	r0, [sp, #0]
    f826:	f8c3 9000 	str.w	r9, [r3]
    f82a:	b00f      	add	sp, #60	; 0x3c
    f82c:	ecbd 8b02 	vpop	{d8}
    f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f834:	f1c0 001c 	rsb	r0, r0, #28
    f838:	9b06      	ldr	r3, [sp, #24]
    f83a:	4403      	add	r3, r0
    f83c:	9306      	str	r3, [sp, #24]
    f83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f840:	4403      	add	r3, r0
    f842:	9309      	str	r3, [sp, #36]	; 0x24
    f844:	4480      	add	r8, r0
    f846:	e76f      	b.n	f728 <_dtoa_r+0x580>
    f848:	f1c2 0220 	rsb	r2, r2, #32
    f84c:	fa06 f202 	lsl.w	r2, r6, r2
    f850:	ee07 2a10 	vmov	s14, r2
    f854:	e509      	b.n	f26a <_dtoa_r+0xc2>
    f856:	2601      	movs	r6, #1
    f858:	e563      	b.n	f322 <_dtoa_r+0x17a>
    f85a:	4601      	mov	r1, r0
    f85c:	463a      	mov	r2, r7
    f85e:	4620      	mov	r0, r4
    f860:	f7fd fa3a 	bl	ccd8 <__pow5mult>
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	2b01      	cmp	r3, #1
    f868:	4682      	mov	sl, r0
    f86a:	f340 81c5 	ble.w	fbf8 <_dtoa_r+0xa50>
    f86e:	2300      	movs	r3, #0
    f870:	9308      	str	r3, [sp, #32]
    f872:	f8da 2010 	ldr.w	r2, [sl, #16]
    f876:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    f87a:	6910      	ldr	r0, [r2, #16]
    f87c:	f7fd f900 	bl	ca80 <__hi0bits>
    f880:	f1c0 0020 	rsb	r0, r0, #32
    f884:	e744      	b.n	f710 <_dtoa_r+0x568>
    f886:	bf00      	nop
    f888:	200002a8 	.word	0x200002a8
    f88c:	20000d24 	.word	0x20000d24
    f890:	4631      	mov	r1, r6
    f892:	2300      	movs	r3, #0
    f894:	220a      	movs	r2, #10
    f896:	4620      	mov	r0, r4
    f898:	f7fd f8a0 	bl	c9dc <__multadd>
    f89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f89e:	2b00      	cmp	r3, #0
    f8a0:	4606      	mov	r6, r0
    f8a2:	f340 82ce 	ble.w	fe42 <_dtoa_r+0xc9a>
    f8a6:	9704      	str	r7, [sp, #16]
    f8a8:	4699      	mov	r9, r3
    f8aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f8ac:	2b00      	cmp	r3, #0
    f8ae:	dd05      	ble.n	f8bc <_dtoa_r+0x714>
    f8b0:	4631      	mov	r1, r6
    f8b2:	461a      	mov	r2, r3
    f8b4:	4620      	mov	r0, r4
    f8b6:	f7fd fa6f 	bl	cd98 <__lshift>
    f8ba:	4606      	mov	r6, r0
    f8bc:	9b08      	ldr	r3, [sp, #32]
    f8be:	2b00      	cmp	r3, #0
    f8c0:	f040 81eb 	bne.w	fc9a <_dtoa_r+0xaf2>
    f8c4:	46b0      	mov	r8, r6
    f8c6:	9b02      	ldr	r3, [sp, #8]
    f8c8:	9f00      	ldr	r7, [sp, #0]
    f8ca:	f003 0201 	and.w	r2, r3, #1
    f8ce:	1e7b      	subs	r3, r7, #1
    f8d0:	444b      	add	r3, r9
    f8d2:	9308      	str	r3, [sp, #32]
    f8d4:	9b01      	ldr	r3, [sp, #4]
    f8d6:	920a      	str	r2, [sp, #40]	; 0x28
    f8d8:	4313      	orrs	r3, r2
    f8da:	9309      	str	r3, [sp, #36]	; 0x24
    f8dc:	4651      	mov	r1, sl
    f8de:	4628      	mov	r0, r5
    f8e0:	f7ff fbce 	bl	f080 <quorem>
    f8e4:	4631      	mov	r1, r6
    f8e6:	4683      	mov	fp, r0
    f8e8:	4628      	mov	r0, r5
    f8ea:	f7fd facd 	bl	ce88 <__mcmp>
    f8ee:	4642      	mov	r2, r8
    f8f0:	4651      	mov	r1, sl
    f8f2:	4681      	mov	r9, r0
    f8f4:	4620      	mov	r0, r4
    f8f6:	f7fd fae9 	bl	cecc <__mdiff>
    f8fa:	68c2      	ldr	r2, [r0, #12]
    f8fc:	4601      	mov	r1, r0
    f8fe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f902:	2a00      	cmp	r2, #0
    f904:	d142      	bne.n	f98c <_dtoa_r+0x7e4>
    f906:	e9cd 0306 	strd	r0, r3, [sp, #24]
    f90a:	4628      	mov	r0, r5
    f90c:	f7fd fabc 	bl	ce88 <__mcmp>
    f910:	9906      	ldr	r1, [sp, #24]
    f912:	9002      	str	r0, [sp, #8]
    f914:	4620      	mov	r0, r4
    f916:	f7fd f857 	bl	c9c8 <_Bfree>
    f91a:	9a02      	ldr	r2, [sp, #8]
    f91c:	9b07      	ldr	r3, [sp, #28]
    f91e:	b91a      	cbnz	r2, f928 <_dtoa_r+0x780>
    f920:	9909      	ldr	r1, [sp, #36]	; 0x24
    f922:	2900      	cmp	r1, #0
    f924:	f000 827e 	beq.w	fe24 <_dtoa_r+0xc7c>
    f928:	f1b9 0f00 	cmp.w	r9, #0
    f92c:	f2c0 8183 	blt.w	fc36 <_dtoa_r+0xa8e>
    f930:	9901      	ldr	r1, [sp, #4]
    f932:	ea49 0901 	orr.w	r9, r9, r1
    f936:	990a      	ldr	r1, [sp, #40]	; 0x28
    f938:	ea51 0909 	orrs.w	r9, r1, r9
    f93c:	f000 817b 	beq.w	fc36 <_dtoa_r+0xa8e>
    f940:	2a00      	cmp	r2, #0
    f942:	f300 81c6 	bgt.w	fcd2 <_dtoa_r+0xb2a>
    f946:	9a08      	ldr	r2, [sp, #32]
    f948:	703b      	strb	r3, [r7, #0]
    f94a:	f107 0901 	add.w	r9, r7, #1
    f94e:	4297      	cmp	r7, r2
    f950:	46cb      	mov	fp, r9
    f952:	f000 81c4 	beq.w	fcde <_dtoa_r+0xb36>
    f956:	4629      	mov	r1, r5
    f958:	2300      	movs	r3, #0
    f95a:	220a      	movs	r2, #10
    f95c:	4620      	mov	r0, r4
    f95e:	f7fd f83d 	bl	c9dc <__multadd>
    f962:	4546      	cmp	r6, r8
    f964:	4605      	mov	r5, r0
    f966:	4631      	mov	r1, r6
    f968:	f04f 0300 	mov.w	r3, #0
    f96c:	f04f 020a 	mov.w	r2, #10
    f970:	4620      	mov	r0, r4
    f972:	d012      	beq.n	f99a <_dtoa_r+0x7f2>
    f974:	f7fd f832 	bl	c9dc <__multadd>
    f978:	4641      	mov	r1, r8
    f97a:	4606      	mov	r6, r0
    f97c:	2300      	movs	r3, #0
    f97e:	220a      	movs	r2, #10
    f980:	4620      	mov	r0, r4
    f982:	f7fd f82b 	bl	c9dc <__multadd>
    f986:	464f      	mov	r7, r9
    f988:	4680      	mov	r8, r0
    f98a:	e7a7      	b.n	f8dc <_dtoa_r+0x734>
    f98c:	4620      	mov	r0, r4
    f98e:	9302      	str	r3, [sp, #8]
    f990:	f7fd f81a 	bl	c9c8 <_Bfree>
    f994:	9b02      	ldr	r3, [sp, #8]
    f996:	2201      	movs	r2, #1
    f998:	e7c6      	b.n	f928 <_dtoa_r+0x780>
    f99a:	f7fd f81f 	bl	c9dc <__multadd>
    f99e:	464f      	mov	r7, r9
    f9a0:	4606      	mov	r6, r0
    f9a2:	4680      	mov	r8, r0
    f9a4:	e79a      	b.n	f8dc <_dtoa_r+0x734>
    f9a6:	9b01      	ldr	r3, [sp, #4]
    f9a8:	2b02      	cmp	r3, #2
    f9aa:	dc71      	bgt.n	fa90 <_dtoa_r+0x8e8>
    f9ac:	9b07      	ldr	r3, [sp, #28]
    f9ae:	2b00      	cmp	r3, #0
    f9b0:	f47f af7b 	bne.w	f8aa <_dtoa_r+0x702>
    f9b4:	9b04      	ldr	r3, [sp, #16]
    f9b6:	4651      	mov	r1, sl
    f9b8:	3301      	adds	r3, #1
    f9ba:	4628      	mov	r0, r5
    f9bc:	9304      	str	r3, [sp, #16]
    f9be:	f7ff fb5f 	bl	f080 <quorem>
    f9c2:	f8dd b000 	ldr.w	fp, [sp]
    f9c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f9ca:	f80b 3b01 	strb.w	r3, [fp], #1
    f9ce:	2700      	movs	r7, #0
    f9d0:	e6eb      	b.n	f7aa <_dtoa_r+0x602>
    f9d2:	4651      	mov	r1, sl
    f9d4:	4628      	mov	r0, r5
    f9d6:	f7fd fa57 	bl	ce88 <__mcmp>
    f9da:	2800      	cmp	r0, #0
    f9dc:	f6bf aeba 	bge.w	f754 <_dtoa_r+0x5ac>
    f9e0:	4629      	mov	r1, r5
    f9e2:	2300      	movs	r3, #0
    f9e4:	220a      	movs	r2, #10
    f9e6:	4620      	mov	r0, r4
    f9e8:	f7fc fff8 	bl	c9dc <__multadd>
    f9ec:	9b04      	ldr	r3, [sp, #16]
    f9ee:	1e5f      	subs	r7, r3, #1
    f9f0:	9b07      	ldr	r3, [sp, #28]
    f9f2:	4605      	mov	r5, r0
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	f47f af4b 	bne.w	f890 <_dtoa_r+0x6e8>
    f9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	f340 8218 	ble.w	fe32 <_dtoa_r+0xc8a>
    fa02:	4699      	mov	r9, r3
    fa04:	e6b1      	b.n	f76a <_dtoa_r+0x5c2>
    fa06:	4bbc      	ldr	r3, [pc, #752]	; (fcf8 <_dtoa_r+0xb50>)
    fa08:	9300      	str	r3, [sp, #0]
    fa0a:	3303      	adds	r3, #3
    fa0c:	e4a4      	b.n	f358 <_dtoa_r+0x1b0>
    fa0e:	201c      	movs	r0, #28
    fa10:	e712      	b.n	f838 <_dtoa_r+0x690>
    fa12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fa16:	2800      	cmp	r0, #0
    fa18:	f47f ae74 	bne.w	f704 <_dtoa_r+0x55c>
    fa1c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    fa20:	2a00      	cmp	r2, #0
    fa22:	f000 80f4 	beq.w	fc0e <_dtoa_r+0xa66>
    fa26:	9b02      	ldr	r3, [sp, #8]
    fa28:	9308      	str	r3, [sp, #32]
    fa2a:	e66d      	b.n	f708 <_dtoa_r+0x560>
    fa2c:	2301      	movs	r3, #1
    fa2e:	9307      	str	r3, [sp, #28]
    fa30:	9b04      	ldr	r3, [sp, #16]
    fa32:	445b      	add	r3, fp
    fa34:	f103 0901 	add.w	r9, r3, #1
    fa38:	f1b9 0f01 	cmp.w	r9, #1
    fa3c:	46cc      	mov	ip, r9
    fa3e:	930b      	str	r3, [sp, #44]	; 0x2c
    fa40:	bfb8      	it	lt
    fa42:	f04f 0c01 	movlt.w	ip, #1
    fa46:	2100      	movs	r1, #0
    fa48:	f1bc 0f17 	cmp.w	ip, #23
    fa4c:	63e1      	str	r1, [r4, #60]	; 0x3c
    fa4e:	f77f acbc 	ble.w	f3ca <_dtoa_r+0x222>
    fa52:	2001      	movs	r0, #1
    fa54:	2204      	movs	r2, #4
    fa56:	0052      	lsls	r2, r2, #1
    fa58:	f102 0314 	add.w	r3, r2, #20
    fa5c:	4563      	cmp	r3, ip
    fa5e:	4601      	mov	r1, r0
    fa60:	f100 0001 	add.w	r0, r0, #1
    fa64:	d9f7      	bls.n	fa56 <_dtoa_r+0x8ae>
    fa66:	63e1      	str	r1, [r4, #60]	; 0x3c
    fa68:	e4af      	b.n	f3ca <_dtoa_r+0x222>
    fa6a:	2301      	movs	r3, #1
    fa6c:	9307      	str	r3, [sp, #28]
    fa6e:	f1bb 0f00 	cmp.w	fp, #0
    fa72:	dd52      	ble.n	fb1a <_dtoa_r+0x972>
    fa74:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    fa78:	46d9      	mov	r9, fp
    fa7a:	46dc      	mov	ip, fp
    fa7c:	e7e3      	b.n	fa46 <_dtoa_r+0x89e>
    fa7e:	2300      	movs	r3, #0
    fa80:	9307      	str	r3, [sp, #28]
    fa82:	e7d5      	b.n	fa30 <_dtoa_r+0x888>
    fa84:	2300      	movs	r3, #0
    fa86:	9307      	str	r3, [sp, #28]
    fa88:	e7f1      	b.n	fa6e <_dtoa_r+0x8c6>
    fa8a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    fa8e:	9704      	str	r7, [sp, #16]
    fa90:	f1b9 0f00 	cmp.w	r9, #0
    fa94:	f47f ada1 	bne.w	f5da <_dtoa_r+0x432>
    fa98:	4651      	mov	r1, sl
    fa9a:	464b      	mov	r3, r9
    fa9c:	2205      	movs	r2, #5
    fa9e:	4620      	mov	r0, r4
    faa0:	f7fc ff9c 	bl	c9dc <__multadd>
    faa4:	4601      	mov	r1, r0
    faa6:	4682      	mov	sl, r0
    faa8:	4628      	mov	r0, r5
    faaa:	f7fd f9ed 	bl	ce88 <__mcmp>
    faae:	2800      	cmp	r0, #0
    fab0:	f77f ad93 	ble.w	f5da <_dtoa_r+0x432>
    fab4:	9b04      	ldr	r3, [sp, #16]
    fab6:	f103 0b01 	add.w	fp, r3, #1
    faba:	9b00      	ldr	r3, [sp, #0]
    fabc:	2231      	movs	r2, #49	; 0x31
    fabe:	4698      	mov	r8, r3
    fac0:	f803 2b01 	strb.w	r2, [r3], #1
    fac4:	9300      	str	r3, [sp, #0]
    fac6:	4651      	mov	r1, sl
    fac8:	4620      	mov	r0, r4
    faca:	f7fc ff7d 	bl	c9c8 <_Bfree>
    face:	f10b 0301 	add.w	r3, fp, #1
    fad2:	f8dd 9000 	ldr.w	r9, [sp]
    fad6:	9304      	str	r3, [sp, #16]
    fad8:	f8cd 8000 	str.w	r8, [sp]
    fadc:	2e00      	cmp	r6, #0
    fade:	f47f ae8f 	bne.w	f800 <_dtoa_r+0x658>
    fae2:	e691      	b.n	f808 <_dtoa_r+0x660>
    fae4:	eba3 0a0a 	sub.w	sl, r3, sl
    fae8:	e5c5      	b.n	f676 <_dtoa_r+0x4ce>
    faea:	4631      	mov	r1, r6
    faec:	4652      	mov	r2, sl
    faee:	4620      	mov	r0, r4
    faf0:	f7fd f8f2 	bl	ccd8 <__pow5mult>
    faf4:	462a      	mov	r2, r5
    faf6:	4601      	mov	r1, r0
    faf8:	4606      	mov	r6, r0
    fafa:	4620      	mov	r0, r4
    fafc:	f7fd f83e 	bl	cb7c <__multiply>
    fb00:	4629      	mov	r1, r5
    fb02:	4605      	mov	r5, r0
    fb04:	4620      	mov	r0, r4
    fb06:	f7fc ff5f 	bl	c9c8 <_Bfree>
    fb0a:	e5ea      	b.n	f6e2 <_dtoa_r+0x53a>
    fb0c:	2002      	movs	r0, #2
    fb0e:	eeb0 5b48 	vmov.f64	d5, d8
    fb12:	e481      	b.n	f418 <_dtoa_r+0x270>
    fb14:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    fb18:	e68e      	b.n	f838 <_dtoa_r+0x690>
    fb1a:	f04f 0b01 	mov.w	fp, #1
    fb1e:	46d9      	mov	r9, fp
    fb20:	e44f      	b.n	f3c2 <_dtoa_r+0x21a>
    fb22:	d103      	bne.n	fb2c <_dtoa_r+0x984>
    fb24:	9b01      	ldr	r3, [sp, #4]
    fb26:	07db      	lsls	r3, r3, #31
    fb28:	f53f ae4c 	bmi.w	f7c4 <_dtoa_r+0x61c>
    fb2c:	46d9      	mov	r9, fp
    fb2e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    fb32:	2b30      	cmp	r3, #48	; 0x30
    fb34:	d0fa      	beq.n	fb2c <_dtoa_r+0x984>
    fb36:	e657      	b.n	f7e8 <_dtoa_r+0x640>
    fb38:	9b04      	ldr	r3, [sp, #16]
    fb3a:	9a00      	ldr	r2, [sp, #0]
    fb3c:	3301      	adds	r3, #1
    fb3e:	9304      	str	r3, [sp, #16]
    fb40:	2331      	movs	r3, #49	; 0x31
    fb42:	7013      	strb	r3, [r2, #0]
    fb44:	e650      	b.n	f7e8 <_dtoa_r+0x640>
    fb46:	f1ba 0f00 	cmp.w	sl, #0
    fb4a:	f000 8123 	beq.w	fd94 <_dtoa_r+0xbec>
    fb4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    fb52:	9b06      	ldr	r3, [sp, #24]
    fb54:	9309      	str	r3, [sp, #36]	; 0x24
    fb56:	4413      	add	r3, r2
    fb58:	f8dd a020 	ldr.w	sl, [sp, #32]
    fb5c:	9306      	str	r3, [sp, #24]
    fb5e:	4490      	add	r8, r2
    fb60:	e592      	b.n	f688 <_dtoa_r+0x4e0>
    fb62:	ee07 0a90 	vmov	s15, r0
    fb66:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    fb6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    fb6e:	eea6 5b07 	vfma.f64	d5, d6, d7
    fb72:	ee15 2a90 	vmov	r2, s11
    fb76:	ec51 0b15 	vmov	r0, r1, d5
    fb7a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    fb7e:	ec41 0b15 	vmov	d5, r0, r1
    fb82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    fb86:	ee36 7b47 	vsub.f64	d7, d6, d7
    fb8a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    fb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fb92:	f300 8137 	bgt.w	fe04 <_dtoa_r+0xc5c>
    fb96:	eeb1 5b45 	vneg.f64	d5, d5
    fb9a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fba2:	f57f acfb 	bpl.w	f59c <_dtoa_r+0x3f4>
    fba6:	f04f 0a00 	mov.w	sl, #0
    fbaa:	4656      	mov	r6, sl
    fbac:	e515      	b.n	f5da <_dtoa_r+0x432>
    fbae:	f000 80f5 	beq.w	fd9c <_dtoa_r+0xbf4>
    fbb2:	9b04      	ldr	r3, [sp, #16]
    fbb4:	4951      	ldr	r1, [pc, #324]	; (fcfc <_dtoa_r+0xb54>)
    fbb6:	425a      	negs	r2, r3
    fbb8:	f002 000f 	and.w	r0, r2, #15
    fbbc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    fbc0:	ed91 6b00 	vldr	d6, [r1]
    fbc4:	1112      	asrs	r2, r2, #4
    fbc6:	ee28 6b06 	vmul.f64	d6, d8, d6
    fbca:	f000 8142 	beq.w	fe52 <_dtoa_r+0xcaa>
    fbce:	eeb0 7b46 	vmov.f64	d7, d6
    fbd2:	494b      	ldr	r1, [pc, #300]	; (fd00 <_dtoa_r+0xb58>)
    fbd4:	2600      	movs	r6, #0
    fbd6:	2002      	movs	r0, #2
    fbd8:	07d3      	lsls	r3, r2, #31
    fbda:	d505      	bpl.n	fbe8 <_dtoa_r+0xa40>
    fbdc:	ed91 5b00 	vldr	d5, [r1]
    fbe0:	3001      	adds	r0, #1
    fbe2:	2601      	movs	r6, #1
    fbe4:	ee27 7b05 	vmul.f64	d7, d7, d5
    fbe8:	1052      	asrs	r2, r2, #1
    fbea:	f101 0108 	add.w	r1, r1, #8
    fbee:	d1f3      	bne.n	fbd8 <_dtoa_r+0xa30>
    fbf0:	2e00      	cmp	r6, #0
    fbf2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    fbf6:	e41e      	b.n	f436 <_dtoa_r+0x28e>
    fbf8:	9b02      	ldr	r3, [sp, #8]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	f47f ae37 	bne.w	f86e <_dtoa_r+0x6c6>
    fc00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    fc04:	f3c1 0213 	ubfx	r2, r1, #0, #20
    fc08:	2a00      	cmp	r2, #0
    fc0a:	f040 8137 	bne.w	fe7c <_dtoa_r+0xcd4>
    fc0e:	4a3d      	ldr	r2, [pc, #244]	; (fd04 <_dtoa_r+0xb5c>)
    fc10:	400a      	ands	r2, r1
    fc12:	2a00      	cmp	r2, #0
    fc14:	f000 80fa 	beq.w	fe0c <_dtoa_r+0xc64>
    fc18:	9b06      	ldr	r3, [sp, #24]
    fc1a:	3301      	adds	r3, #1
    fc1c:	9306      	str	r3, [sp, #24]
    fc1e:	2301      	movs	r3, #1
    fc20:	f108 0801 	add.w	r8, r8, #1
    fc24:	9308      	str	r3, [sp, #32]
    fc26:	e56f      	b.n	f708 <_dtoa_r+0x560>
    fc28:	4629      	mov	r1, r5
    fc2a:	9a08      	ldr	r2, [sp, #32]
    fc2c:	4620      	mov	r0, r4
    fc2e:	f7fd f853 	bl	ccd8 <__pow5mult>
    fc32:	4605      	mov	r5, r0
    fc34:	e55a      	b.n	f6ec <_dtoa_r+0x544>
    fc36:	2a00      	cmp	r2, #0
    fc38:	dd12      	ble.n	fc60 <_dtoa_r+0xab8>
    fc3a:	4629      	mov	r1, r5
    fc3c:	2201      	movs	r2, #1
    fc3e:	4620      	mov	r0, r4
    fc40:	9301      	str	r3, [sp, #4]
    fc42:	f7fd f8a9 	bl	cd98 <__lshift>
    fc46:	4651      	mov	r1, sl
    fc48:	4605      	mov	r5, r0
    fc4a:	f7fd f91d 	bl	ce88 <__mcmp>
    fc4e:	2800      	cmp	r0, #0
    fc50:	9b01      	ldr	r3, [sp, #4]
    fc52:	f340 80e1 	ble.w	fe18 <_dtoa_r+0xc70>
    fc56:	2b39      	cmp	r3, #57	; 0x39
    fc58:	f000 80ca 	beq.w	fdf0 <_dtoa_r+0xc48>
    fc5c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    fc60:	46b9      	mov	r9, r7
    fc62:	f809 3b01 	strb.w	r3, [r9], #1
    fc66:	9b04      	ldr	r3, [sp, #16]
    fc68:	3301      	adds	r3, #1
    fc6a:	4637      	mov	r7, r6
    fc6c:	9304      	str	r3, [sp, #16]
    fc6e:	4646      	mov	r6, r8
    fc70:	e5ba      	b.n	f7e8 <_dtoa_r+0x640>
    fc72:	ee38 8b08 	vadd.f64	d8, d8, d8
    fc76:	eeb4 8bc6 	vcmpe.f64	d8, d6
    fc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc7e:	dc0a      	bgt.n	fc96 <_dtoa_r+0xaee>
    fc80:	eeb4 8b46 	vcmp.f64	d8, d6
    fc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc88:	f47f acdc 	bne.w	f644 <_dtoa_r+0x49c>
    fc8c:	ee17 3a10 	vmov	r3, s14
    fc90:	07d8      	lsls	r0, r3, #31
    fc92:	f57f acd7 	bpl.w	f644 <_dtoa_r+0x49c>
    fc96:	9a00      	ldr	r2, [sp, #0]
    fc98:	e454      	b.n	f544 <_dtoa_r+0x39c>
    fc9a:	6871      	ldr	r1, [r6, #4]
    fc9c:	4620      	mov	r0, r4
    fc9e:	f7fc fe6d 	bl	c97c <_Balloc>
    fca2:	4607      	mov	r7, r0
    fca4:	2800      	cmp	r0, #0
    fca6:	f000 80de 	beq.w	fe66 <_dtoa_r+0xcbe>
    fcaa:	6933      	ldr	r3, [r6, #16]
    fcac:	3302      	adds	r3, #2
    fcae:	009a      	lsls	r2, r3, #2
    fcb0:	f106 010c 	add.w	r1, r6, #12
    fcb4:	300c      	adds	r0, #12
    fcb6:	f7f9 fadb 	bl	9270 <memcpy>
    fcba:	4639      	mov	r1, r7
    fcbc:	2201      	movs	r2, #1
    fcbe:	4620      	mov	r0, r4
    fcc0:	f7fd f86a 	bl	cd98 <__lshift>
    fcc4:	4680      	mov	r8, r0
    fcc6:	e5fe      	b.n	f8c6 <_dtoa_r+0x71e>
    fcc8:	9b06      	ldr	r3, [sp, #24]
    fcca:	eba3 0309 	sub.w	r3, r3, r9
    fcce:	9309      	str	r3, [sp, #36]	; 0x24
    fcd0:	e4da      	b.n	f688 <_dtoa_r+0x4e0>
    fcd2:	2b39      	cmp	r3, #57	; 0x39
    fcd4:	f000 808c 	beq.w	fdf0 <_dtoa_r+0xc48>
    fcd8:	46b9      	mov	r9, r7
    fcda:	3301      	adds	r3, #1
    fcdc:	e7c1      	b.n	fc62 <_dtoa_r+0xaba>
    fcde:	9a04      	ldr	r2, [sp, #16]
    fce0:	3201      	adds	r2, #1
    fce2:	4637      	mov	r7, r6
    fce4:	9204      	str	r2, [sp, #16]
    fce6:	4646      	mov	r6, r8
    fce8:	e55f      	b.n	f7aa <_dtoa_r+0x602>
    fcea:	4629      	mov	r1, r5
    fcec:	4620      	mov	r0, r4
    fcee:	f7fc fff3 	bl	ccd8 <__pow5mult>
    fcf2:	4605      	mov	r5, r0
    fcf4:	e4fa      	b.n	f6ec <_dtoa_r+0x544>
    fcf6:	bf00      	nop
    fcf8:	20000c84 	.word	0x20000c84
    fcfc:	200002a8 	.word	0x200002a8
    fd00:	20000280 	.word	0x20000280
    fd04:	7ff00000 	.word	0x7ff00000
    fd08:	4b5e      	ldr	r3, [pc, #376]	; (fe84 <_dtoa_r+0xcdc>)
    fd0a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    fd0e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    fd12:	ed1c 3b02 	vldr	d3, [ip, #-8]
    fd16:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    fd1a:	ee36 7b47 	vsub.f64	d7, d6, d7
    fd1e:	ec41 0b16 	vmov	d6, r0, r1
    fd22:	ee15 1a90 	vmov	r1, s11
    fd26:	ee23 3b06 	vmul.f64	d3, d3, d6
    fd2a:	9800      	ldr	r0, [sp, #0]
    fd2c:	3130      	adds	r1, #48	; 0x30
    fd2e:	2a01      	cmp	r2, #1
    fd30:	f800 1b01 	strb.w	r1, [r0], #1
    fd34:	f000 8083 	beq.w	fe3e <_dtoa_r+0xc96>
    fd38:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fd3c:	9b00      	ldr	r3, [sp, #0]
    fd3e:	1899      	adds	r1, r3, r2
    fd40:	ee27 7b04 	vmul.f64	d7, d7, d4
    fd44:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    fd48:	ee16 3a90 	vmov	r3, s13
    fd4c:	3330      	adds	r3, #48	; 0x30
    fd4e:	f800 3b01 	strb.w	r3, [r0], #1
    fd52:	4281      	cmp	r1, r0
    fd54:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    fd58:	ee37 7b45 	vsub.f64	d7, d7, d5
    fd5c:	d1f0      	bne.n	fd40 <_dtoa_r+0xb98>
    fd5e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fd62:	ee33 5b06 	vadd.f64	d5, d3, d6
    fd66:	eeb4 5bc7 	vcmpe.f64	d5, d7
    fd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd6e:	f53f abe3 	bmi.w	f538 <_dtoa_r+0x390>
    fd72:	ee36 6b43 	vsub.f64	d6, d6, d3
    fd76:	eeb4 6bc7 	vcmpe.f64	d6, d7
    fd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd7e:	f77f ac0d 	ble.w	f59c <_dtoa_r+0x3f4>
    fd82:	4689      	mov	r9, r1
    fd84:	3901      	subs	r1, #1
    fd86:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    fd8a:	2b30      	cmp	r3, #48	; 0x30
    fd8c:	d0f9      	beq.n	fd82 <_dtoa_r+0xbda>
    fd8e:	1c73      	adds	r3, r6, #1
    fd90:	9304      	str	r3, [sp, #16]
    fd92:	e539      	b.n	f808 <_dtoa_r+0x660>
    fd94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    fd9a:	e6da      	b.n	fb52 <_dtoa_r+0x9aa>
    fd9c:	2002      	movs	r0, #2
    fd9e:	eeb0 6b48 	vmov.f64	d6, d8
    fda2:	f7ff bb48 	b.w	f436 <_dtoa_r+0x28e>
    fda6:	f1b9 0f00 	cmp.w	r9, #0
    fdaa:	f43f aeda 	beq.w	fb62 <_dtoa_r+0x9ba>
    fdae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fdb0:	2a00      	cmp	r2, #0
    fdb2:	f77f abf3 	ble.w	f59c <_dtoa_r+0x3f4>
    fdb6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    fdba:	ee26 6b04 	vmul.f64	d6, d6, d4
    fdbe:	3001      	adds	r0, #1
    fdc0:	ee07 0a90 	vmov	s15, r0
    fdc4:	9b04      	ldr	r3, [sp, #16]
    fdc6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    fdca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    fdce:	eea6 7b05 	vfma.f64	d7, d6, d5
    fdd2:	ee17 ca90 	vmov	ip, s15
    fdd6:	ec51 0b17 	vmov	r0, r1, d7
    fdda:	1e5e      	subs	r6, r3, #1
    fddc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    fde0:	f7ff bb47 	b.w	f472 <_dtoa_r+0x2ca>
    fde4:	9b04      	ldr	r3, [sp, #16]
    fde6:	3301      	adds	r3, #1
    fde8:	9304      	str	r3, [sp, #16]
    fdea:	2331      	movs	r3, #49	; 0x31
    fdec:	f7ff bbb1 	b.w	f552 <_dtoa_r+0x3aa>
    fdf0:	9b04      	ldr	r3, [sp, #16]
    fdf2:	46bb      	mov	fp, r7
    fdf4:	3301      	adds	r3, #1
    fdf6:	9304      	str	r3, [sp, #16]
    fdf8:	2339      	movs	r3, #57	; 0x39
    fdfa:	4637      	mov	r7, r6
    fdfc:	f80b 3b01 	strb.w	r3, [fp], #1
    fe00:	4646      	mov	r6, r8
    fe02:	e4e1      	b.n	f7c8 <_dtoa_r+0x620>
    fe04:	f04f 0a00 	mov.w	sl, #0
    fe08:	4656      	mov	r6, sl
    fe0a:	e653      	b.n	fab4 <_dtoa_r+0x90c>
    fe0c:	9208      	str	r2, [sp, #32]
    fe0e:	e47b      	b.n	f708 <_dtoa_r+0x560>
    fe10:	1c73      	adds	r3, r6, #1
    fe12:	9304      	str	r3, [sp, #16]
    fe14:	4689      	mov	r9, r1
    fe16:	e4f7      	b.n	f808 <_dtoa_r+0x660>
    fe18:	f47f af22 	bne.w	fc60 <_dtoa_r+0xab8>
    fe1c:	07da      	lsls	r2, r3, #31
    fe1e:	f57f af1f 	bpl.w	fc60 <_dtoa_r+0xab8>
    fe22:	e718      	b.n	fc56 <_dtoa_r+0xaae>
    fe24:	2b39      	cmp	r3, #57	; 0x39
    fe26:	d0e3      	beq.n	fdf0 <_dtoa_r+0xc48>
    fe28:	f1b9 0f00 	cmp.w	r9, #0
    fe2c:	f73f af16 	bgt.w	fc5c <_dtoa_r+0xab4>
    fe30:	e716      	b.n	fc60 <_dtoa_r+0xab8>
    fe32:	9b01      	ldr	r3, [sp, #4]
    fe34:	2b02      	cmp	r3, #2
    fe36:	f73f ae28 	bgt.w	fa8a <_dtoa_r+0x8e2>
    fe3a:	9704      	str	r7, [sp, #16]
    fe3c:	e5ba      	b.n	f9b4 <_dtoa_r+0x80c>
    fe3e:	4601      	mov	r1, r0
    fe40:	e78d      	b.n	fd5e <_dtoa_r+0xbb6>
    fe42:	9b01      	ldr	r3, [sp, #4]
    fe44:	2b02      	cmp	r3, #2
    fe46:	f73f ae20 	bgt.w	fa8a <_dtoa_r+0x8e2>
    fe4a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    fe4e:	9704      	str	r7, [sp, #16]
    fe50:	e52b      	b.n	f8aa <_dtoa_r+0x702>
    fe52:	2002      	movs	r0, #2
    fe54:	f7ff baef 	b.w	f436 <_dtoa_r+0x28e>
    fe58:	4b0b      	ldr	r3, [pc, #44]	; (fe88 <_dtoa_r+0xce0>)
    fe5a:	480c      	ldr	r0, [pc, #48]	; (fe8c <_dtoa_r+0xce4>)
    fe5c:	2200      	movs	r2, #0
    fe5e:	f240 11af 	movw	r1, #431	; 0x1af
    fe62:	f7ff f8b1 	bl	efc8 <__assert_func>
    fe66:	4b08      	ldr	r3, [pc, #32]	; (fe88 <_dtoa_r+0xce0>)
    fe68:	4808      	ldr	r0, [pc, #32]	; (fe8c <_dtoa_r+0xce4>)
    fe6a:	463a      	mov	r2, r7
    fe6c:	f240 21ef 	movw	r1, #751	; 0x2ef
    fe70:	f7ff f8aa 	bl	efc8 <__assert_func>
    fe74:	4b06      	ldr	r3, [pc, #24]	; (fe90 <_dtoa_r+0xce8>)
    fe76:	9300      	str	r3, [sp, #0]
    fe78:	f7ff b9d2 	b.w	f220 <_dtoa_r+0x78>
    fe7c:	9b02      	ldr	r3, [sp, #8]
    fe7e:	9308      	str	r3, [sp, #32]
    fe80:	e4f7      	b.n	f872 <_dtoa_r+0x6ca>
    fe82:	bf00      	nop
    fe84:	200002a8 	.word	0x200002a8
    fe88:	20000adc 	.word	0x20000adc
    fe8c:	20000c88 	.word	0x20000c88
    fe90:	20000c78 	.word	0x20000c78

0000fe94 <_wcrtomb_r>:
    fe94:	b570      	push	{r4, r5, r6, lr}
    fe96:	4605      	mov	r5, r0
    fe98:	b084      	sub	sp, #16
    fe9a:	b15b      	cbz	r3, feb4 <_wcrtomb_r+0x20>
    fe9c:	461c      	mov	r4, r3
    fe9e:	b169      	cbz	r1, febc <_wcrtomb_r+0x28>
    fea0:	4b0e      	ldr	r3, [pc, #56]	; (fedc <_wcrtomb_r+0x48>)
    fea2:	4628      	mov	r0, r5
    fea4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    fea8:	4623      	mov	r3, r4
    feaa:	47b0      	blx	r6
    feac:	1c43      	adds	r3, r0, #1
    feae:	d00f      	beq.n	fed0 <_wcrtomb_r+0x3c>
    feb0:	b004      	add	sp, #16
    feb2:	bd70      	pop	{r4, r5, r6, pc}
    feb4:	f500 7482 	add.w	r4, r0, #260	; 0x104
    feb8:	2900      	cmp	r1, #0
    feba:	d1f1      	bne.n	fea0 <_wcrtomb_r+0xc>
    febc:	4a07      	ldr	r2, [pc, #28]	; (fedc <_wcrtomb_r+0x48>)
    febe:	4623      	mov	r3, r4
    fec0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    fec4:	4628      	mov	r0, r5
    fec6:	460a      	mov	r2, r1
    fec8:	a901      	add	r1, sp, #4
    feca:	47b0      	blx	r6
    fecc:	1c43      	adds	r3, r0, #1
    fece:	d1ef      	bne.n	feb0 <_wcrtomb_r+0x1c>
    fed0:	2200      	movs	r2, #0
    fed2:	238a      	movs	r3, #138	; 0x8a
    fed4:	6022      	str	r2, [r4, #0]
    fed6:	602b      	str	r3, [r5, #0]
    fed8:	b004      	add	sp, #16
    feda:	bd70      	pop	{r4, r5, r6, pc}
    fedc:	20004414 	.word	0x20004414

0000fee0 <_wcsrtombs_r>:
    fee0:	b510      	push	{r4, lr}
    fee2:	b082      	sub	sp, #8
    fee4:	9c04      	ldr	r4, [sp, #16]
    fee6:	e9cd 3400 	strd	r3, r4, [sp]
    feea:	f04f 33ff 	mov.w	r3, #4294967295
    feee:	f001 fbc7 	bl	11680 <_wcsnrtombs_r>
    fef2:	b002      	add	sp, #8
    fef4:	bd10      	pop	{r4, pc}
    fef6:	bf00      	nop

0000fef8 <fiprintf>:
    fef8:	b40e      	push	{r1, r2, r3}
    fefa:	b510      	push	{r4, lr}
    fefc:	b083      	sub	sp, #12
    fefe:	ab05      	add	r3, sp, #20
    ff00:	4c06      	ldr	r4, [pc, #24]	; (ff1c <fiprintf+0x24>)
    ff02:	f853 2b04 	ldr.w	r2, [r3], #4
    ff06:	9301      	str	r3, [sp, #4]
    ff08:	4601      	mov	r1, r0
    ff0a:	6820      	ldr	r0, [r4, #0]
    ff0c:	f000 f8c4 	bl	10098 <_vfiprintf_r>
    ff10:	b003      	add	sp, #12
    ff12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff16:	b003      	add	sp, #12
    ff18:	4770      	bx	lr
    ff1a:	bf00      	nop
    ff1c:	2000499c 	.word	0x2000499c

0000ff20 <__ssprint_r>:
    ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff24:	6893      	ldr	r3, [r2, #8]
    ff26:	6817      	ldr	r7, [r2, #0]
    ff28:	b083      	sub	sp, #12
    ff2a:	4692      	mov	sl, r2
    ff2c:	2b00      	cmp	r3, #0
    ff2e:	d070      	beq.n	10012 <__ssprint_r+0xf2>
    ff30:	4681      	mov	r9, r0
    ff32:	688a      	ldr	r2, [r1, #8]
    ff34:	6808      	ldr	r0, [r1, #0]
    ff36:	460c      	mov	r4, r1
    ff38:	3708      	adds	r7, #8
    ff3a:	e043      	b.n	ffc4 <__ssprint_r+0xa4>
    ff3c:	89a3      	ldrh	r3, [r4, #12]
    ff3e:	f413 6f90 	tst.w	r3, #1152	; 0x480
    ff42:	d02e      	beq.n	ffa2 <__ssprint_r+0x82>
    ff44:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    ff48:	eba0 0801 	sub.w	r8, r0, r1
    ff4c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    ff50:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    ff54:	f108 0001 	add.w	r0, r8, #1
    ff58:	1076      	asrs	r6, r6, #1
    ff5a:	4428      	add	r0, r5
    ff5c:	42b0      	cmp	r0, r6
    ff5e:	4632      	mov	r2, r6
    ff60:	bf84      	itt	hi
    ff62:	4606      	movhi	r6, r0
    ff64:	4632      	movhi	r2, r6
    ff66:	055b      	lsls	r3, r3, #21
    ff68:	d537      	bpl.n	ffda <__ssprint_r+0xba>
    ff6a:	4611      	mov	r1, r2
    ff6c:	4648      	mov	r0, r9
    ff6e:	f7fa ff45 	bl	adfc <_malloc_r>
    ff72:	9001      	str	r0, [sp, #4]
    ff74:	2800      	cmp	r0, #0
    ff76:	d03a      	beq.n	ffee <__ssprint_r+0xce>
    ff78:	4642      	mov	r2, r8
    ff7a:	6921      	ldr	r1, [r4, #16]
    ff7c:	f7f9 f978 	bl	9270 <memcpy>
    ff80:	89a2      	ldrh	r2, [r4, #12]
    ff82:	9b01      	ldr	r3, [sp, #4]
    ff84:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    ff88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ff8c:	81a2      	strh	r2, [r4, #12]
    ff8e:	eba6 0208 	sub.w	r2, r6, r8
    ff92:	eb03 0008 	add.w	r0, r3, r8
    ff96:	6166      	str	r6, [r4, #20]
    ff98:	60a2      	str	r2, [r4, #8]
    ff9a:	6123      	str	r3, [r4, #16]
    ff9c:	6020      	str	r0, [r4, #0]
    ff9e:	462e      	mov	r6, r5
    ffa0:	46a8      	mov	r8, r5
    ffa2:	4642      	mov	r2, r8
    ffa4:	4659      	mov	r1, fp
    ffa6:	f7fb fef5 	bl	bd94 <memmove>
    ffaa:	f8da 3008 	ldr.w	r3, [sl, #8]
    ffae:	68a2      	ldr	r2, [r4, #8]
    ffb0:	6820      	ldr	r0, [r4, #0]
    ffb2:	1b92      	subs	r2, r2, r6
    ffb4:	4440      	add	r0, r8
    ffb6:	1b5b      	subs	r3, r3, r5
    ffb8:	60a2      	str	r2, [r4, #8]
    ffba:	6020      	str	r0, [r4, #0]
    ffbc:	f8ca 3008 	str.w	r3, [sl, #8]
    ffc0:	b33b      	cbz	r3, 10012 <__ssprint_r+0xf2>
    ffc2:	3708      	adds	r7, #8
    ffc4:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    ffc8:	2d00      	cmp	r5, #0
    ffca:	d0fa      	beq.n	ffc2 <__ssprint_r+0xa2>
    ffcc:	42aa      	cmp	r2, r5
    ffce:	4616      	mov	r6, r2
    ffd0:	4690      	mov	r8, r2
    ffd2:	d9b3      	bls.n	ff3c <__ssprint_r+0x1c>
    ffd4:	462e      	mov	r6, r5
    ffd6:	46a8      	mov	r8, r5
    ffd8:	e7e3      	b.n	ffa2 <__ssprint_r+0x82>
    ffda:	4648      	mov	r0, r9
    ffdc:	f7fb f9d6 	bl	b38c <_realloc_r>
    ffe0:	4603      	mov	r3, r0
    ffe2:	2800      	cmp	r0, #0
    ffe4:	d1d3      	bne.n	ff8e <__ssprint_r+0x6e>
    ffe6:	6921      	ldr	r1, [r4, #16]
    ffe8:	4648      	mov	r0, r9
    ffea:	f7fc fbab 	bl	c744 <_free_r>
    ffee:	89a3      	ldrh	r3, [r4, #12]
    fff0:	220c      	movs	r2, #12
    fff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fff6:	f8c9 2000 	str.w	r2, [r9]
    fffa:	f04f 30ff 	mov.w	r0, #4294967295
    fffe:	81a3      	strh	r3, [r4, #12]
   10000:	2200      	movs	r2, #0
   10002:	2300      	movs	r3, #0
   10004:	f8ca 2008 	str.w	r2, [sl, #8]
   10008:	f8ca 3004 	str.w	r3, [sl, #4]
   1000c:	b003      	add	sp, #12
   1000e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10012:	2000      	movs	r0, #0
   10014:	2300      	movs	r3, #0
   10016:	f8ca 3004 	str.w	r3, [sl, #4]
   1001a:	b003      	add	sp, #12
   1001c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010020 <__sprint_r.part.0>:
   10020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10024:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10026:	049c      	lsls	r4, r3, #18
   10028:	4690      	mov	r8, r2
   1002a:	d52d      	bpl.n	10088 <__sprint_r.part.0+0x68>
   1002c:	6893      	ldr	r3, [r2, #8]
   1002e:	6812      	ldr	r2, [r2, #0]
   10030:	b343      	cbz	r3, 10084 <__sprint_r.part.0+0x64>
   10032:	468b      	mov	fp, r1
   10034:	4606      	mov	r6, r0
   10036:	f102 0908 	add.w	r9, r2, #8
   1003a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   1003e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   10042:	d015      	beq.n	10070 <__sprint_r.part.0+0x50>
   10044:	3d04      	subs	r5, #4
   10046:	2400      	movs	r4, #0
   10048:	e001      	b.n	1004e <__sprint_r.part.0+0x2e>
   1004a:	42a7      	cmp	r7, r4
   1004c:	d00e      	beq.n	1006c <__sprint_r.part.0+0x4c>
   1004e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10052:	465a      	mov	r2, fp
   10054:	4630      	mov	r0, r6
   10056:	f001 fa5b 	bl	11510 <_fputwc_r>
   1005a:	1c43      	adds	r3, r0, #1
   1005c:	f104 0401 	add.w	r4, r4, #1
   10060:	d1f3      	bne.n	1004a <__sprint_r.part.0+0x2a>
   10062:	2300      	movs	r3, #0
   10064:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1006c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10070:	f02a 0a03 	bic.w	sl, sl, #3
   10074:	eba3 030a 	sub.w	r3, r3, sl
   10078:	f8c8 3008 	str.w	r3, [r8, #8]
   1007c:	f109 0908 	add.w	r9, r9, #8
   10080:	2b00      	cmp	r3, #0
   10082:	d1da      	bne.n	1003a <__sprint_r.part.0+0x1a>
   10084:	2000      	movs	r0, #0
   10086:	e7ec      	b.n	10062 <__sprint_r.part.0+0x42>
   10088:	f001 f80c 	bl	110a4 <__sfvwrite_r>
   1008c:	2300      	movs	r3, #0
   1008e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10096:	bf00      	nop

00010098 <_vfiprintf_r>:
   10098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1009c:	ed2d 8b02 	vpush	{d8}
   100a0:	b0c5      	sub	sp, #276	; 0x114
   100a2:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   100a6:	4683      	mov	fp, r0
   100a8:	ee08 1a10 	vmov	s16, r1
   100ac:	4616      	mov	r6, r2
   100ae:	2100      	movs	r1, #0
   100b0:	2208      	movs	r2, #8
   100b2:	4650      	mov	r0, sl
   100b4:	461c      	mov	r4, r3
   100b6:	9307      	str	r3, [sp, #28]
   100b8:	f7fb fee8 	bl	be8c <memset>
   100bc:	f1bb 0f00 	cmp.w	fp, #0
   100c0:	d004      	beq.n	100cc <_vfiprintf_r+0x34>
   100c2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   100c6:	2b00      	cmp	r3, #0
   100c8:	f000 86a0 	beq.w	10e0c <_vfiprintf_r+0xd74>
   100cc:	ee18 2a10 	vmov	r2, s16
   100d0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   100d2:	07db      	lsls	r3, r3, #31
   100d4:	f140 8513 	bpl.w	10afe <_vfiprintf_r+0xa66>
   100d8:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   100dc:	b28a      	uxth	r2, r1
   100de:	0495      	lsls	r5, r2, #18
   100e0:	d40b      	bmi.n	100fa <_vfiprintf_r+0x62>
   100e2:	ee18 3a10 	vmov	r3, s16
   100e6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   100ea:	8199      	strh	r1, [r3, #12]
   100ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   100ee:	b28a      	uxth	r2, r1
   100f0:	ee18 1a10 	vmov	r1, s16
   100f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   100f8:	664b      	str	r3, [r1, #100]	; 0x64
   100fa:	0710      	lsls	r0, r2, #28
   100fc:	f140 8105 	bpl.w	1030a <_vfiprintf_r+0x272>
   10100:	ee18 3a10 	vmov	r3, s16
   10104:	691b      	ldr	r3, [r3, #16]
   10106:	2b00      	cmp	r3, #0
   10108:	f000 80ff 	beq.w	1030a <_vfiprintf_r+0x272>
   1010c:	f002 031a 	and.w	r3, r2, #26
   10110:	2b0a      	cmp	r3, #10
   10112:	f000 810a 	beq.w	1032a <_vfiprintf_r+0x292>
   10116:	2300      	movs	r3, #0
   10118:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   1011c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10120:	aa1b      	add	r2, sp, #108	; 0x6c
   10122:	930c      	str	r3, [sp, #48]	; 0x30
   10124:	9218      	str	r2, [sp, #96]	; 0x60
   10126:	4691      	mov	r9, r2
   10128:	930b      	str	r3, [sp, #44]	; 0x2c
   1012a:	9305      	str	r3, [sp, #20]
   1012c:	46b0      	mov	r8, r6
   1012e:	4644      	mov	r4, r8
   10130:	4ba8      	ldr	r3, [pc, #672]	; (103d4 <_vfiprintf_r+0x33c>)
   10132:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10136:	f7fb ff93 	bl	c060 <__locale_mb_cur_max>
   1013a:	4622      	mov	r2, r4
   1013c:	4603      	mov	r3, r0
   1013e:	a912      	add	r1, sp, #72	; 0x48
   10140:	f8cd a000 	str.w	sl, [sp]
   10144:	4658      	mov	r0, fp
   10146:	47a8      	blx	r5
   10148:	2800      	cmp	r0, #0
   1014a:	f000 8145 	beq.w	103d8 <_vfiprintf_r+0x340>
   1014e:	f2c0 8139 	blt.w	103c4 <_vfiprintf_r+0x32c>
   10152:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10154:	2a25      	cmp	r2, #37	; 0x25
   10156:	4603      	mov	r3, r0
   10158:	d001      	beq.n	1015e <_vfiprintf_r+0xc6>
   1015a:	441c      	add	r4, r3
   1015c:	e7e8      	b.n	10130 <_vfiprintf_r+0x98>
   1015e:	ebb4 0608 	subs.w	r6, r4, r8
   10162:	4605      	mov	r5, r0
   10164:	f040 813c 	bne.w	103e0 <_vfiprintf_r+0x348>
   10168:	2300      	movs	r3, #0
   1016a:	7861      	ldrb	r1, [r4, #1]
   1016c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10170:	f104 0801 	add.w	r8, r4, #1
   10174:	9306      	str	r3, [sp, #24]
   10176:	f04f 37ff 	mov.w	r7, #4294967295
   1017a:	461e      	mov	r6, r3
   1017c:	242b      	movs	r4, #43	; 0x2b
   1017e:	f108 0801 	add.w	r8, r8, #1
   10182:	f1a1 0320 	sub.w	r3, r1, #32
   10186:	2b5a      	cmp	r3, #90	; 0x5a
   10188:	f200 8178 	bhi.w	1047c <_vfiprintf_r+0x3e4>
   1018c:	e8df f013 	tbh	[pc, r3, lsl #1]
   10190:	017602b5 	.word	0x017602b5
   10194:	02b00176 	.word	0x02b00176
   10198:	01760176 	.word	0x01760176
   1019c:	006a0176 	.word	0x006a0176
   101a0:	01760176 	.word	0x01760176
   101a4:	028d027d 	.word	0x028d027d
   101a8:	02880176 	.word	0x02880176
   101ac:	01760297 	.word	0x01760297
   101b0:	005b0292 	.word	0x005b0292
   101b4:	005b005b 	.word	0x005b005b
   101b8:	005b005b 	.word	0x005b005b
   101bc:	005b005b 	.word	0x005b005b
   101c0:	005b005b 	.word	0x005b005b
   101c4:	01760176 	.word	0x01760176
   101c8:	01760176 	.word	0x01760176
   101cc:	01760176 	.word	0x01760176
   101d0:	01760176 	.word	0x01760176
   101d4:	025c0176 	.word	0x025c0176
   101d8:	01760084 	.word	0x01760084
   101dc:	01760176 	.word	0x01760176
   101e0:	01760176 	.word	0x01760176
   101e4:	01760176 	.word	0x01760176
   101e8:	01760176 	.word	0x01760176
   101ec:	00e80176 	.word	0x00e80176
   101f0:	01760176 	.word	0x01760176
   101f4:	02330176 	.word	0x02330176
   101f8:	02da0176 	.word	0x02da0176
   101fc:	01760176 	.word	0x01760176
   10200:	0176058b 	.word	0x0176058b
   10204:	01760176 	.word	0x01760176
   10208:	01760176 	.word	0x01760176
   1020c:	01760176 	.word	0x01760176
   10210:	01760176 	.word	0x01760176
   10214:	025c0176 	.word	0x025c0176
   10218:	01760086 	.word	0x01760086
   1021c:	01760176 	.word	0x01760176
   10220:	008602cd 	.word	0x008602cd
   10224:	0176007f 	.word	0x0176007f
   10228:	017602c0 	.word	0x017602c0
   1022c:	00ea02fd 	.word	0x00ea02fd
   10230:	007f02ed 	.word	0x007f02ed
   10234:	02330176 	.word	0x02330176
   10238:	0569007c 	.word	0x0569007c
   1023c:	01760176 	.word	0x01760176
   10240:	0176056b 	.word	0x0176056b
   10244:	007c      	.short	0x007c
   10246:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1024a:	2200      	movs	r2, #0
   1024c:	f818 1b01 	ldrb.w	r1, [r8], #1
   10250:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10254:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10258:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1025c:	2b09      	cmp	r3, #9
   1025e:	d9f5      	bls.n	1024c <_vfiprintf_r+0x1b4>
   10260:	9206      	str	r2, [sp, #24]
   10262:	e78e      	b.n	10182 <_vfiprintf_r+0xea>
   10264:	4658      	mov	r0, fp
   10266:	f7fe fe1b 	bl	eea0 <_localeconv_r>
   1026a:	6843      	ldr	r3, [r0, #4]
   1026c:	930d      	str	r3, [sp, #52]	; 0x34
   1026e:	4618      	mov	r0, r3
   10270:	f7fc f966 	bl	c540 <strlen>
   10274:	900e      	str	r0, [sp, #56]	; 0x38
   10276:	4605      	mov	r5, r0
   10278:	4658      	mov	r0, fp
   1027a:	f7fe fe11 	bl	eea0 <_localeconv_r>
   1027e:	6883      	ldr	r3, [r0, #8]
   10280:	930b      	str	r3, [sp, #44]	; 0x2c
   10282:	2d00      	cmp	r5, #0
   10284:	f040 84d6 	bne.w	10c34 <_vfiprintf_r+0xb9c>
   10288:	f898 1000 	ldrb.w	r1, [r8]
   1028c:	e777      	b.n	1017e <_vfiprintf_r+0xe6>
   1028e:	f898 1000 	ldrb.w	r1, [r8]
   10292:	f046 0620 	orr.w	r6, r6, #32
   10296:	e772      	b.n	1017e <_vfiprintf_r+0xe6>
   10298:	f046 0610 	orr.w	r6, r6, #16
   1029c:	06b4      	lsls	r4, r6, #26
   1029e:	f140 818e 	bpl.w	105be <_vfiprintf_r+0x526>
   102a2:	9b07      	ldr	r3, [sp, #28]
   102a4:	3307      	adds	r3, #7
   102a6:	f023 0307 	bic.w	r3, r3, #7
   102aa:	461a      	mov	r2, r3
   102ac:	6859      	ldr	r1, [r3, #4]
   102ae:	f852 3b08 	ldr.w	r3, [r2], #8
   102b2:	9207      	str	r2, [sp, #28]
   102b4:	460a      	mov	r2, r1
   102b6:	2900      	cmp	r1, #0
   102b8:	f2c0 8470 	blt.w	10b9c <_vfiprintf_r+0xb04>
   102bc:	1c79      	adds	r1, r7, #1
   102be:	f000 85a2 	beq.w	10e06 <_vfiprintf_r+0xd6e>
   102c2:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   102c6:	9103      	str	r1, [sp, #12]
   102c8:	ea53 0102 	orrs.w	r1, r3, r2
   102cc:	f000 843f 	beq.w	10b4e <_vfiprintf_r+0xab6>
   102d0:	2b0a      	cmp	r3, #10
   102d2:	f172 0100 	sbcs.w	r1, r2, #0
   102d6:	f080 8541 	bcs.w	10d5c <_vfiprintf_r+0xcc4>
   102da:	3330      	adds	r3, #48	; 0x30
   102dc:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   102e0:	9e03      	ldr	r6, [sp, #12]
   102e2:	2301      	movs	r3, #1
   102e4:	9304      	str	r3, [sp, #16]
   102e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   102ea:	9b04      	ldr	r3, [sp, #16]
   102ec:	42bb      	cmp	r3, r7
   102ee:	bfb8      	it	lt
   102f0:	463b      	movlt	r3, r7
   102f2:	9303      	str	r3, [sp, #12]
   102f4:	2300      	movs	r3, #0
   102f6:	9308      	str	r3, [sp, #32]
   102f8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   102fc:	2b00      	cmp	r3, #0
   102fe:	f000 80cb 	beq.w	10498 <_vfiprintf_r+0x400>
   10302:	9b03      	ldr	r3, [sp, #12]
   10304:	3301      	adds	r3, #1
   10306:	9303      	str	r3, [sp, #12]
   10308:	e0c6      	b.n	10498 <_vfiprintf_r+0x400>
   1030a:	ee18 1a10 	vmov	r1, s16
   1030e:	4658      	mov	r0, fp
   10310:	ee18 5a10 	vmov	r5, s16
   10314:	f001 f840 	bl	11398 <__swsetup_r>
   10318:	2800      	cmp	r0, #0
   1031a:	f040 8652 	bne.w	10fc2 <_vfiprintf_r+0xf2a>
   1031e:	89aa      	ldrh	r2, [r5, #12]
   10320:	f002 031a 	and.w	r3, r2, #26
   10324:	2b0a      	cmp	r3, #10
   10326:	f47f aef6 	bne.w	10116 <_vfiprintf_r+0x7e>
   1032a:	ee18 1a10 	vmov	r1, s16
   1032e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   10332:	2b00      	cmp	r3, #0
   10334:	f6ff aeef 	blt.w	10116 <_vfiprintf_r+0x7e>
   10338:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1033a:	07db      	lsls	r3, r3, #31
   1033c:	d402      	bmi.n	10344 <_vfiprintf_r+0x2ac>
   1033e:	0597      	lsls	r7, r2, #22
   10340:	f140 8612 	bpl.w	10f68 <_vfiprintf_r+0xed0>
   10344:	ee18 1a10 	vmov	r1, s16
   10348:	4623      	mov	r3, r4
   1034a:	4632      	mov	r2, r6
   1034c:	4658      	mov	r0, fp
   1034e:	f000 fe69 	bl	11024 <__sbprintf>
   10352:	9005      	str	r0, [sp, #20]
   10354:	9805      	ldr	r0, [sp, #20]
   10356:	b045      	add	sp, #276	; 0x114
   10358:	ecbd 8b02 	vpop	{d8}
   1035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10360:	f046 0610 	orr.w	r6, r6, #16
   10364:	f016 0220 	ands.w	r2, r6, #32
   10368:	f000 8136 	beq.w	105d8 <_vfiprintf_r+0x540>
   1036c:	9b07      	ldr	r3, [sp, #28]
   1036e:	3307      	adds	r3, #7
   10370:	f023 0307 	bic.w	r3, r3, #7
   10374:	4619      	mov	r1, r3
   10376:	685a      	ldr	r2, [r3, #4]
   10378:	f851 3b08 	ldr.w	r3, [r1], #8
   1037c:	9107      	str	r1, [sp, #28]
   1037e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10382:	9103      	str	r1, [sp, #12]
   10384:	2100      	movs	r1, #0
   10386:	2000      	movs	r0, #0
   10388:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1038c:	1c78      	adds	r0, r7, #1
   1038e:	f000 8210 	beq.w	107b2 <_vfiprintf_r+0x71a>
   10392:	9803      	ldr	r0, [sp, #12]
   10394:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   10398:	ea53 0002 	orrs.w	r0, r3, r2
   1039c:	f040 8208 	bne.w	107b0 <_vfiprintf_r+0x718>
   103a0:	2f00      	cmp	r7, #0
   103a2:	f040 8538 	bne.w	10e16 <_vfiprintf_r+0xd7e>
   103a6:	2900      	cmp	r1, #0
   103a8:	f040 83d5 	bne.w	10b56 <_vfiprintf_r+0xabe>
   103ac:	9b03      	ldr	r3, [sp, #12]
   103ae:	f013 0301 	ands.w	r3, r3, #1
   103b2:	9304      	str	r3, [sp, #16]
   103b4:	f000 8411 	beq.w	10bda <_vfiprintf_r+0xb42>
   103b8:	2330      	movs	r3, #48	; 0x30
   103ba:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   103be:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   103c2:	e792      	b.n	102ea <_vfiprintf_r+0x252>
   103c4:	2208      	movs	r2, #8
   103c6:	2100      	movs	r1, #0
   103c8:	4650      	mov	r0, sl
   103ca:	f7fb fd5f 	bl	be8c <memset>
   103ce:	2301      	movs	r3, #1
   103d0:	441c      	add	r4, r3
   103d2:	e6ad      	b.n	10130 <_vfiprintf_r+0x98>
   103d4:	20004414 	.word	0x20004414
   103d8:	ebb4 0608 	subs.w	r6, r4, r8
   103dc:	4605      	mov	r5, r0
   103de:	d01b      	beq.n	10418 <_vfiprintf_r+0x380>
   103e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   103e2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   103e4:	3301      	adds	r3, #1
   103e6:	4432      	add	r2, r6
   103e8:	2b07      	cmp	r3, #7
   103ea:	e9c9 8600 	strd	r8, r6, [r9]
   103ee:	921a      	str	r2, [sp, #104]	; 0x68
   103f0:	9319      	str	r3, [sp, #100]	; 0x64
   103f2:	dd1c      	ble.n	1042e <_vfiprintf_r+0x396>
   103f4:	2a00      	cmp	r2, #0
   103f6:	f000 83a6 	beq.w	10b46 <_vfiprintf_r+0xaae>
   103fa:	ee18 1a10 	vmov	r1, s16
   103fe:	aa18      	add	r2, sp, #96	; 0x60
   10400:	4658      	mov	r0, fp
   10402:	f7ff fe0d 	bl	10020 <__sprint_r.part.0>
   10406:	bb20      	cbnz	r0, 10452 <_vfiprintf_r+0x3ba>
   10408:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1040c:	9b05      	ldr	r3, [sp, #20]
   1040e:	4433      	add	r3, r6
   10410:	9305      	str	r3, [sp, #20]
   10412:	2d00      	cmp	r5, #0
   10414:	f47f aea8 	bne.w	10168 <_vfiprintf_r+0xd0>
   10418:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1041a:	2b00      	cmp	r3, #0
   1041c:	f040 85c1 	bne.w	10fa2 <_vfiprintf_r+0xf0a>
   10420:	ee18 3a10 	vmov	r3, s16
   10424:	2200      	movs	r2, #0
   10426:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1042a:	9219      	str	r2, [sp, #100]	; 0x64
   1042c:	e015      	b.n	1045a <_vfiprintf_r+0x3c2>
   1042e:	f109 0908 	add.w	r9, r9, #8
   10432:	e7eb      	b.n	1040c <_vfiprintf_r+0x374>
   10434:	ee18 1a10 	vmov	r1, s16
   10438:	aa18      	add	r2, sp, #96	; 0x60
   1043a:	4658      	mov	r0, fp
   1043c:	f7ff fdf0 	bl	10020 <__sprint_r.part.0>
   10440:	2800      	cmp	r0, #0
   10442:	f000 80a6 	beq.w	10592 <_vfiprintf_r+0x4fa>
   10446:	9b08      	ldr	r3, [sp, #32]
   10448:	b11b      	cbz	r3, 10452 <_vfiprintf_r+0x3ba>
   1044a:	9908      	ldr	r1, [sp, #32]
   1044c:	4658      	mov	r0, fp
   1044e:	f7fc f979 	bl	c744 <_free_r>
   10452:	ee18 3a10 	vmov	r3, s16
   10456:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1045a:	ee18 2a10 	vmov	r2, s16
   1045e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   10460:	f012 0f01 	tst.w	r2, #1
   10464:	b29a      	uxth	r2, r3
   10466:	f000 80a0 	beq.w	105aa <_vfiprintf_r+0x512>
   1046a:	0650      	lsls	r0, r2, #25
   1046c:	f100 85b2 	bmi.w	10fd4 <_vfiprintf_r+0xf3c>
   10470:	9805      	ldr	r0, [sp, #20]
   10472:	b045      	add	sp, #276	; 0x114
   10474:	ecbd 8b02 	vpop	{d8}
   10478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1047c:	2900      	cmp	r1, #0
   1047e:	d0cb      	beq.n	10418 <_vfiprintf_r+0x380>
   10480:	2300      	movs	r3, #0
   10482:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10486:	2301      	movs	r3, #1
   10488:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1048c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   10490:	ac2b      	add	r4, sp, #172	; 0xac
   10492:	2300      	movs	r3, #0
   10494:	9308      	str	r3, [sp, #32]
   10496:	461f      	mov	r7, r3
   10498:	f016 0302 	ands.w	r3, r6, #2
   1049c:	9309      	str	r3, [sp, #36]	; 0x24
   1049e:	d002      	beq.n	104a6 <_vfiprintf_r+0x40e>
   104a0:	9b03      	ldr	r3, [sp, #12]
   104a2:	3302      	adds	r3, #2
   104a4:	9303      	str	r3, [sp, #12]
   104a6:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   104aa:	930a      	str	r3, [sp, #40]	; 0x28
   104ac:	d105      	bne.n	104ba <_vfiprintf_r+0x422>
   104ae:	9b06      	ldr	r3, [sp, #24]
   104b0:	9a03      	ldr	r2, [sp, #12]
   104b2:	1a9d      	subs	r5, r3, r2
   104b4:	2d00      	cmp	r5, #0
   104b6:	f300 827b 	bgt.w	109b0 <_vfiprintf_r+0x918>
   104ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   104be:	1c41      	adds	r1, r0, #1
   104c0:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   104c4:	b182      	cbz	r2, 104e8 <_vfiprintf_r+0x450>
   104c6:	2201      	movs	r2, #1
   104c8:	3301      	adds	r3, #1
   104ca:	f8c9 2004 	str.w	r2, [r9, #4]
   104ce:	2907      	cmp	r1, #7
   104d0:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   104d4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   104d8:	f8c9 2000 	str.w	r2, [r9]
   104dc:	f300 824a 	bgt.w	10974 <_vfiprintf_r+0x8dc>
   104e0:	4608      	mov	r0, r1
   104e2:	f109 0908 	add.w	r9, r9, #8
   104e6:	3101      	adds	r1, #1
   104e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   104ea:	b1e2      	cbz	r2, 10526 <_vfiprintf_r+0x48e>
   104ec:	aa11      	add	r2, sp, #68	; 0x44
   104ee:	3302      	adds	r3, #2
   104f0:	f8c9 2000 	str.w	r2, [r9]
   104f4:	2907      	cmp	r1, #7
   104f6:	f04f 0202 	mov.w	r2, #2
   104fa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   104fe:	f8c9 2004 	str.w	r2, [r9, #4]
   10502:	f340 8250 	ble.w	109a6 <_vfiprintf_r+0x90e>
   10506:	2b00      	cmp	r3, #0
   10508:	f000 8343 	beq.w	10b92 <_vfiprintf_r+0xafa>
   1050c:	ee18 1a10 	vmov	r1, s16
   10510:	aa18      	add	r2, sp, #96	; 0x60
   10512:	4658      	mov	r0, fp
   10514:	f7ff fd84 	bl	10020 <__sprint_r.part.0>
   10518:	2800      	cmp	r0, #0
   1051a:	d194      	bne.n	10446 <_vfiprintf_r+0x3ae>
   1051c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10520:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10524:	1c41      	adds	r1, r0, #1
   10526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10528:	2a80      	cmp	r2, #128	; 0x80
   1052a:	f000 8184 	beq.w	10836 <_vfiprintf_r+0x79e>
   1052e:	9a04      	ldr	r2, [sp, #16]
   10530:	1abd      	subs	r5, r7, r2
   10532:	2d00      	cmp	r5, #0
   10534:	f300 81d7 	bgt.w	108e6 <_vfiprintf_r+0x84e>
   10538:	9a04      	ldr	r2, [sp, #16]
   1053a:	f8c9 4000 	str.w	r4, [r9]
   1053e:	4413      	add	r3, r2
   10540:	2907      	cmp	r1, #7
   10542:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10546:	f8c9 2004 	str.w	r2, [r9, #4]
   1054a:	f340 816e 	ble.w	1082a <_vfiprintf_r+0x792>
   1054e:	2b00      	cmp	r3, #0
   10550:	f000 8275 	beq.w	10a3e <_vfiprintf_r+0x9a6>
   10554:	ee18 1a10 	vmov	r1, s16
   10558:	aa18      	add	r2, sp, #96	; 0x60
   1055a:	4658      	mov	r0, fp
   1055c:	f7ff fd60 	bl	10020 <__sprint_r.part.0>
   10560:	2800      	cmp	r0, #0
   10562:	f47f af70 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10566:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10568:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1056c:	0775      	lsls	r5, r6, #29
   1056e:	d505      	bpl.n	1057c <_vfiprintf_r+0x4e4>
   10570:	9a06      	ldr	r2, [sp, #24]
   10572:	9903      	ldr	r1, [sp, #12]
   10574:	1a54      	subs	r4, r2, r1
   10576:	2c00      	cmp	r4, #0
   10578:	f300 826b 	bgt.w	10a52 <_vfiprintf_r+0x9ba>
   1057c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   10580:	9803      	ldr	r0, [sp, #12]
   10582:	4281      	cmp	r1, r0
   10584:	bfac      	ite	ge
   10586:	1852      	addge	r2, r2, r1
   10588:	1812      	addlt	r2, r2, r0
   1058a:	9205      	str	r2, [sp, #20]
   1058c:	2b00      	cmp	r3, #0
   1058e:	f47f af51 	bne.w	10434 <_vfiprintf_r+0x39c>
   10592:	9908      	ldr	r1, [sp, #32]
   10594:	2300      	movs	r3, #0
   10596:	9319      	str	r3, [sp, #100]	; 0x64
   10598:	2900      	cmp	r1, #0
   1059a:	f000 8149 	beq.w	10830 <_vfiprintf_r+0x798>
   1059e:	4658      	mov	r0, fp
   105a0:	f7fc f8d0 	bl	c744 <_free_r>
   105a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   105a8:	e5c1      	b.n	1012e <_vfiprintf_r+0x96>
   105aa:	059c      	lsls	r4, r3, #22
   105ac:	f53f af5d 	bmi.w	1046a <_vfiprintf_r+0x3d2>
   105b0:	ee18 4a10 	vmov	r4, s16
   105b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   105b6:	f7fb fdef 	bl	c198 <__retarget_lock_release_recursive>
   105ba:	89a2      	ldrh	r2, [r4, #12]
   105bc:	e755      	b.n	1046a <_vfiprintf_r+0x3d2>
   105be:	06f0      	lsls	r0, r6, #27
   105c0:	9a07      	ldr	r2, [sp, #28]
   105c2:	f100 831f 	bmi.w	10c04 <_vfiprintf_r+0xb6c>
   105c6:	0671      	lsls	r1, r6, #25
   105c8:	f140 8319 	bpl.w	10bfe <_vfiprintf_r+0xb66>
   105cc:	f932 3b04 	ldrsh.w	r3, [r2], #4
   105d0:	9207      	str	r2, [sp, #28]
   105d2:	17da      	asrs	r2, r3, #31
   105d4:	4611      	mov	r1, r2
   105d6:	e66e      	b.n	102b6 <_vfiprintf_r+0x21e>
   105d8:	f016 0310 	ands.w	r3, r6, #16
   105dc:	9907      	ldr	r1, [sp, #28]
   105de:	f040 8309 	bne.w	10bf4 <_vfiprintf_r+0xb5c>
   105e2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   105e6:	f000 8301 	beq.w	10bec <_vfiprintf_r+0xb54>
   105ea:	461a      	mov	r2, r3
   105ec:	f851 3b04 	ldr.w	r3, [r1], #4
   105f0:	9107      	str	r1, [sp, #28]
   105f2:	b29b      	uxth	r3, r3
   105f4:	e6c3      	b.n	1037e <_vfiprintf_r+0x2e6>
   105f6:	9b07      	ldr	r3, [sp, #28]
   105f8:	461a      	mov	r2, r3
   105fa:	2300      	movs	r3, #0
   105fc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10600:	4613      	mov	r3, r2
   10602:	f853 4b04 	ldr.w	r4, [r3], #4
   10606:	9303      	str	r3, [sp, #12]
   10608:	2c00      	cmp	r4, #0
   1060a:	f000 8412 	beq.w	10e32 <_vfiprintf_r+0xd9a>
   1060e:	2953      	cmp	r1, #83	; 0x53
   10610:	f000 8365 	beq.w	10cde <_vfiprintf_r+0xc46>
   10614:	f016 0510 	ands.w	r5, r6, #16
   10618:	f040 8361 	bne.w	10cde <_vfiprintf_r+0xc46>
   1061c:	1c7b      	adds	r3, r7, #1
   1061e:	f000 84b3 	beq.w	10f88 <_vfiprintf_r+0xef0>
   10622:	463a      	mov	r2, r7
   10624:	4629      	mov	r1, r5
   10626:	4620      	mov	r0, r4
   10628:	f7fe fc42 	bl	eeb0 <memchr>
   1062c:	9008      	str	r0, [sp, #32]
   1062e:	2800      	cmp	r0, #0
   10630:	f000 849f 	beq.w	10f72 <_vfiprintf_r+0xeda>
   10634:	1b03      	subs	r3, r0, r4
   10636:	9a03      	ldr	r2, [sp, #12]
   10638:	9304      	str	r3, [sp, #16]
   1063a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1063e:	462f      	mov	r7, r5
   10640:	9207      	str	r2, [sp, #28]
   10642:	9303      	str	r3, [sp, #12]
   10644:	9508      	str	r5, [sp, #32]
   10646:	e657      	b.n	102f8 <_vfiprintf_r+0x260>
   10648:	2943      	cmp	r1, #67	; 0x43
   1064a:	d002      	beq.n	10652 <_vfiprintf_r+0x5ba>
   1064c:	06f5      	lsls	r5, r6, #27
   1064e:	f140 832d 	bpl.w	10cac <_vfiprintf_r+0xc14>
   10652:	9d07      	ldr	r5, [sp, #28]
   10654:	2208      	movs	r2, #8
   10656:	2100      	movs	r1, #0
   10658:	a816      	add	r0, sp, #88	; 0x58
   1065a:	ac2b      	add	r4, sp, #172	; 0xac
   1065c:	f7fb fc16 	bl	be8c <memset>
   10660:	ab16      	add	r3, sp, #88	; 0x58
   10662:	f855 2b04 	ldr.w	r2, [r5], #4
   10666:	4621      	mov	r1, r4
   10668:	4658      	mov	r0, fp
   1066a:	f7ff fc13 	bl	fe94 <_wcrtomb_r>
   1066e:	4603      	mov	r3, r0
   10670:	3301      	adds	r3, #1
   10672:	9004      	str	r0, [sp, #16]
   10674:	f000 84b3 	beq.w	10fde <_vfiprintf_r+0xf46>
   10678:	9b04      	ldr	r3, [sp, #16]
   1067a:	9507      	str	r5, [sp, #28]
   1067c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10680:	9303      	str	r3, [sp, #12]
   10682:	2300      	movs	r3, #0
   10684:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10688:	e703      	b.n	10492 <_vfiprintf_r+0x3fa>
   1068a:	9b07      	ldr	r3, [sp, #28]
   1068c:	f853 2b04 	ldr.w	r2, [r3], #4
   10690:	9206      	str	r2, [sp, #24]
   10692:	2a00      	cmp	r2, #0
   10694:	f280 829c 	bge.w	10bd0 <_vfiprintf_r+0xb38>
   10698:	9a06      	ldr	r2, [sp, #24]
   1069a:	4252      	negs	r2, r2
   1069c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   106a0:	f898 1000 	ldrb.w	r1, [r8]
   106a4:	f046 0604 	orr.w	r6, r6, #4
   106a8:	e569      	b.n	1017e <_vfiprintf_r+0xe6>
   106aa:	f898 1000 	ldrb.w	r1, [r8]
   106ae:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   106b2:	e564      	b.n	1017e <_vfiprintf_r+0xe6>
   106b4:	f898 1000 	ldrb.w	r1, [r8]
   106b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   106bc:	e55f      	b.n	1017e <_vfiprintf_r+0xe6>
   106be:	4642      	mov	r2, r8
   106c0:	f812 1b01 	ldrb.w	r1, [r2], #1
   106c4:	292a      	cmp	r1, #42	; 0x2a
   106c6:	f000 8496 	beq.w	10ff6 <_vfiprintf_r+0xf5e>
   106ca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   106ce:	2b09      	cmp	r3, #9
   106d0:	4690      	mov	r8, r2
   106d2:	f04f 0700 	mov.w	r7, #0
   106d6:	f63f ad54 	bhi.w	10182 <_vfiprintf_r+0xea>
   106da:	f818 1b01 	ldrb.w	r1, [r8], #1
   106de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   106e2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   106e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   106ea:	2b09      	cmp	r3, #9
   106ec:	d9f5      	bls.n	106da <_vfiprintf_r+0x642>
   106ee:	e548      	b.n	10182 <_vfiprintf_r+0xea>
   106f0:	f898 1000 	ldrb.w	r1, [r8]
   106f4:	f046 0601 	orr.w	r6, r6, #1
   106f8:	e541      	b.n	1017e <_vfiprintf_r+0xe6>
   106fa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   106fe:	2b00      	cmp	r3, #0
   10700:	f47f adc2 	bne.w	10288 <_vfiprintf_r+0x1f0>
   10704:	2320      	movs	r3, #32
   10706:	f898 1000 	ldrb.w	r1, [r8]
   1070a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1070e:	e536      	b.n	1017e <_vfiprintf_r+0xe6>
   10710:	f898 1000 	ldrb.w	r1, [r8]
   10714:	296c      	cmp	r1, #108	; 0x6c
   10716:	bf03      	ittte	eq
   10718:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1071c:	f046 0620 	orreq.w	r6, r6, #32
   10720:	f108 0801 	addeq.w	r8, r8, #1
   10724:	f046 0610 	orrne.w	r6, r6, #16
   10728:	e529      	b.n	1017e <_vfiprintf_r+0xe6>
   1072a:	f898 1000 	ldrb.w	r1, [r8]
   1072e:	2968      	cmp	r1, #104	; 0x68
   10730:	bf03      	ittte	eq
   10732:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   10736:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   1073a:	f108 0801 	addeq.w	r8, r8, #1
   1073e:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   10742:	e51c      	b.n	1017e <_vfiprintf_r+0xe6>
   10744:	f046 0310 	orr.w	r3, r6, #16
   10748:	9303      	str	r3, [sp, #12]
   1074a:	9b03      	ldr	r3, [sp, #12]
   1074c:	f013 0220 	ands.w	r2, r3, #32
   10750:	f000 8206 	beq.w	10b60 <_vfiprintf_r+0xac8>
   10754:	9b07      	ldr	r3, [sp, #28]
   10756:	3307      	adds	r3, #7
   10758:	f023 0307 	bic.w	r3, r3, #7
   1075c:	4619      	mov	r1, r3
   1075e:	685a      	ldr	r2, [r3, #4]
   10760:	f851 3b08 	ldr.w	r3, [r1], #8
   10764:	9107      	str	r1, [sp, #28]
   10766:	2101      	movs	r1, #1
   10768:	e60d      	b.n	10386 <_vfiprintf_r+0x2ee>
   1076a:	9a07      	ldr	r2, [sp, #28]
   1076c:	f046 0302 	orr.w	r3, r6, #2
   10770:	9303      	str	r3, [sp, #12]
   10772:	f852 3b04 	ldr.w	r3, [r2], #4
   10776:	9207      	str	r2, [sp, #28]
   10778:	f647 0230 	movw	r2, #30768	; 0x7830
   1077c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   10780:	4ab8      	ldr	r2, [pc, #736]	; (10a64 <_vfiprintf_r+0x9cc>)
   10782:	920c      	str	r2, [sp, #48]	; 0x30
   10784:	2102      	movs	r1, #2
   10786:	2200      	movs	r2, #0
   10788:	e5fd      	b.n	10386 <_vfiprintf_r+0x2ee>
   1078a:	06b7      	lsls	r7, r6, #26
   1078c:	f100 8248 	bmi.w	10c20 <_vfiprintf_r+0xb88>
   10790:	06f5      	lsls	r5, r6, #27
   10792:	f100 8346 	bmi.w	10e22 <_vfiprintf_r+0xd8a>
   10796:	0674      	lsls	r4, r6, #25
   10798:	f100 83d5 	bmi.w	10f46 <_vfiprintf_r+0xeae>
   1079c:	05b0      	lsls	r0, r6, #22
   1079e:	f140 8340 	bpl.w	10e22 <_vfiprintf_r+0xd8a>
   107a2:	9b07      	ldr	r3, [sp, #28]
   107a4:	9905      	ldr	r1, [sp, #20]
   107a6:	f853 2b04 	ldr.w	r2, [r3], #4
   107aa:	9307      	str	r3, [sp, #28]
   107ac:	7011      	strb	r1, [r2, #0]
   107ae:	e4be      	b.n	1012e <_vfiprintf_r+0x96>
   107b0:	9603      	str	r6, [sp, #12]
   107b2:	2901      	cmp	r1, #1
   107b4:	f43f ad8c 	beq.w	102d0 <_vfiprintf_r+0x238>
   107b8:	2902      	cmp	r1, #2
   107ba:	ac44      	add	r4, sp, #272	; 0x110
   107bc:	d111      	bne.n	107e2 <_vfiprintf_r+0x74a>
   107be:	980c      	ldr	r0, [sp, #48]	; 0x30
   107c0:	f003 010f 	and.w	r1, r3, #15
   107c4:	091b      	lsrs	r3, r3, #4
   107c6:	5c41      	ldrb	r1, [r0, r1]
   107c8:	f804 1d01 	strb.w	r1, [r4, #-1]!
   107cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   107d0:	0912      	lsrs	r2, r2, #4
   107d2:	ea53 0102 	orrs.w	r1, r3, r2
   107d6:	d1f3      	bne.n	107c0 <_vfiprintf_r+0x728>
   107d8:	9e03      	ldr	r6, [sp, #12]
   107da:	ab44      	add	r3, sp, #272	; 0x110
   107dc:	1b1b      	subs	r3, r3, r4
   107de:	9304      	str	r3, [sp, #16]
   107e0:	e583      	b.n	102ea <_vfiprintf_r+0x252>
   107e2:	f003 0107 	and.w	r1, r3, #7
   107e6:	08db      	lsrs	r3, r3, #3
   107e8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   107ec:	08d2      	lsrs	r2, r2, #3
   107ee:	3130      	adds	r1, #48	; 0x30
   107f0:	ea53 0502 	orrs.w	r5, r3, r2
   107f4:	4620      	mov	r0, r4
   107f6:	f804 1d01 	strb.w	r1, [r4, #-1]!
   107fa:	d1f2      	bne.n	107e2 <_vfiprintf_r+0x74a>
   107fc:	9e03      	ldr	r6, [sp, #12]
   107fe:	07f3      	lsls	r3, r6, #31
   10800:	d5eb      	bpl.n	107da <_vfiprintf_r+0x742>
   10802:	2930      	cmp	r1, #48	; 0x30
   10804:	d0e8      	beq.n	107d8 <_vfiprintf_r+0x740>
   10806:	2330      	movs	r3, #48	; 0x30
   10808:	3802      	subs	r0, #2
   1080a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1080e:	ab44      	add	r3, sp, #272	; 0x110
   10810:	1a1b      	subs	r3, r3, r0
   10812:	9e03      	ldr	r6, [sp, #12]
   10814:	9304      	str	r3, [sp, #16]
   10816:	4604      	mov	r4, r0
   10818:	e567      	b.n	102ea <_vfiprintf_r+0x252>
   1081a:	9b04      	ldr	r3, [sp, #16]
   1081c:	941b      	str	r4, [sp, #108]	; 0x6c
   1081e:	2201      	movs	r2, #1
   10820:	931c      	str	r3, [sp, #112]	; 0x70
   10822:	931a      	str	r3, [sp, #104]	; 0x68
   10824:	9219      	str	r2, [sp, #100]	; 0x64
   10826:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1082a:	f109 0908 	add.w	r9, r9, #8
   1082e:	e69d      	b.n	1056c <_vfiprintf_r+0x4d4>
   10830:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10834:	e47b      	b.n	1012e <_vfiprintf_r+0x96>
   10836:	9a06      	ldr	r2, [sp, #24]
   10838:	9d03      	ldr	r5, [sp, #12]
   1083a:	1b55      	subs	r5, r2, r5
   1083c:	2d00      	cmp	r5, #0
   1083e:	f77f ae76 	ble.w	1052e <_vfiprintf_r+0x496>
   10842:	2d10      	cmp	r5, #16
   10844:	f340 83bb 	ble.w	10fbe <_vfiprintf_r+0xf26>
   10848:	9409      	str	r4, [sp, #36]	; 0x24
   1084a:	ee18 4a10 	vmov	r4, s16
   1084e:	e007      	b.n	10860 <_vfiprintf_r+0x7c8>
   10850:	f100 0c02 	add.w	ip, r0, #2
   10854:	f109 0908 	add.w	r9, r9, #8
   10858:	4610      	mov	r0, r2
   1085a:	3d10      	subs	r5, #16
   1085c:	2d10      	cmp	r5, #16
   1085e:	dd1e      	ble.n	1089e <_vfiprintf_r+0x806>
   10860:	4981      	ldr	r1, [pc, #516]	; (10a68 <_vfiprintf_r+0x9d0>)
   10862:	f8c9 1000 	str.w	r1, [r9]
   10866:	1c42      	adds	r2, r0, #1
   10868:	3310      	adds	r3, #16
   1086a:	2110      	movs	r1, #16
   1086c:	2a07      	cmp	r2, #7
   1086e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10872:	f8c9 1004 	str.w	r1, [r9, #4]
   10876:	ddeb      	ble.n	10850 <_vfiprintf_r+0x7b8>
   10878:	aa18      	add	r2, sp, #96	; 0x60
   1087a:	2b00      	cmp	r3, #0
   1087c:	d074      	beq.n	10968 <_vfiprintf_r+0x8d0>
   1087e:	4621      	mov	r1, r4
   10880:	4658      	mov	r0, fp
   10882:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10886:	f7ff fbcb 	bl	10020 <__sprint_r.part.0>
   1088a:	2800      	cmp	r0, #0
   1088c:	f47f addb 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10890:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10894:	3d10      	subs	r5, #16
   10896:	2d10      	cmp	r5, #16
   10898:	f100 0c01 	add.w	ip, r0, #1
   1089c:	dce0      	bgt.n	10860 <_vfiprintf_r+0x7c8>
   1089e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   108a0:	4a71      	ldr	r2, [pc, #452]	; (10a68 <_vfiprintf_r+0x9d0>)
   108a2:	f8c9 5004 	str.w	r5, [r9, #4]
   108a6:	442b      	add	r3, r5
   108a8:	f1bc 0f07 	cmp.w	ip, #7
   108ac:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   108b0:	f8c9 2000 	str.w	r2, [r9]
   108b4:	f340 8194 	ble.w	10be0 <_vfiprintf_r+0xb48>
   108b8:	2b00      	cmp	r3, #0
   108ba:	f000 831f 	beq.w	10efc <_vfiprintf_r+0xe64>
   108be:	ee18 1a10 	vmov	r1, s16
   108c2:	aa18      	add	r2, sp, #96	; 0x60
   108c4:	4658      	mov	r0, fp
   108c6:	f7ff fbab 	bl	10020 <__sprint_r.part.0>
   108ca:	2800      	cmp	r0, #0
   108cc:	f47f adbb 	bne.w	10446 <_vfiprintf_r+0x3ae>
   108d0:	9a04      	ldr	r2, [sp, #16]
   108d2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   108d6:	1abd      	subs	r5, r7, r2
   108d8:	2d00      	cmp	r5, #0
   108da:	f100 0101 	add.w	r1, r0, #1
   108de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108e2:	f77f ae29 	ble.w	10538 <_vfiprintf_r+0x4a0>
   108e6:	2d10      	cmp	r5, #16
   108e8:	dd29      	ble.n	1093e <_vfiprintf_r+0x8a6>
   108ea:	9409      	str	r4, [sp, #36]	; 0x24
   108ec:	2710      	movs	r7, #16
   108ee:	ee18 4a10 	vmov	r4, s16
   108f2:	e007      	b.n	10904 <_vfiprintf_r+0x86c>
   108f4:	f100 0c02 	add.w	ip, r0, #2
   108f8:	f109 0908 	add.w	r9, r9, #8
   108fc:	4610      	mov	r0, r2
   108fe:	3d10      	subs	r5, #16
   10900:	2d10      	cmp	r5, #16
   10902:	dd1a      	ble.n	1093a <_vfiprintf_r+0x8a2>
   10904:	1c42      	adds	r2, r0, #1
   10906:	4958      	ldr	r1, [pc, #352]	; (10a68 <_vfiprintf_r+0x9d0>)
   10908:	3310      	adds	r3, #16
   1090a:	2a07      	cmp	r2, #7
   1090c:	e9c9 1700 	strd	r1, r7, [r9]
   10910:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10914:	ddee      	ble.n	108f4 <_vfiprintf_r+0x85c>
   10916:	aa18      	add	r2, sp, #96	; 0x60
   10918:	b303      	cbz	r3, 1095c <_vfiprintf_r+0x8c4>
   1091a:	4621      	mov	r1, r4
   1091c:	4658      	mov	r0, fp
   1091e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10922:	f7ff fb7d 	bl	10020 <__sprint_r.part.0>
   10926:	2800      	cmp	r0, #0
   10928:	f47f ad8d 	bne.w	10446 <_vfiprintf_r+0x3ae>
   1092c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10930:	3d10      	subs	r5, #16
   10932:	2d10      	cmp	r5, #16
   10934:	f100 0c01 	add.w	ip, r0, #1
   10938:	dce4      	bgt.n	10904 <_vfiprintf_r+0x86c>
   1093a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1093c:	4661      	mov	r1, ip
   1093e:	4a4a      	ldr	r2, [pc, #296]	; (10a68 <_vfiprintf_r+0x9d0>)
   10940:	f8c9 5004 	str.w	r5, [r9, #4]
   10944:	442b      	add	r3, r5
   10946:	2907      	cmp	r1, #7
   10948:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1094c:	f8c9 2000 	str.w	r2, [r9]
   10950:	f300 80e7 	bgt.w	10b22 <_vfiprintf_r+0xa8a>
   10954:	f109 0908 	add.w	r9, r9, #8
   10958:	3101      	adds	r1, #1
   1095a:	e5ed      	b.n	10538 <_vfiprintf_r+0x4a0>
   1095c:	f04f 0c01 	mov.w	ip, #1
   10960:	4618      	mov	r0, r3
   10962:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10966:	e7ca      	b.n	108fe <_vfiprintf_r+0x866>
   10968:	f04f 0c01 	mov.w	ip, #1
   1096c:	4618      	mov	r0, r3
   1096e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10972:	e772      	b.n	1085a <_vfiprintf_r+0x7c2>
   10974:	2b00      	cmp	r3, #0
   10976:	f000 8104 	beq.w	10b82 <_vfiprintf_r+0xaea>
   1097a:	ee18 1a10 	vmov	r1, s16
   1097e:	aa18      	add	r2, sp, #96	; 0x60
   10980:	4658      	mov	r0, fp
   10982:	f7ff fb4d 	bl	10020 <__sprint_r.part.0>
   10986:	2800      	cmp	r0, #0
   10988:	f47f ad5d 	bne.w	10446 <_vfiprintf_r+0x3ae>
   1098c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10990:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10994:	1c41      	adds	r1, r0, #1
   10996:	e5a7      	b.n	104e8 <_vfiprintf_r+0x450>
   10998:	2302      	movs	r3, #2
   1099a:	aa11      	add	r2, sp, #68	; 0x44
   1099c:	931c      	str	r3, [sp, #112]	; 0x70
   1099e:	921b      	str	r2, [sp, #108]	; 0x6c
   109a0:	2101      	movs	r1, #1
   109a2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109a6:	4608      	mov	r0, r1
   109a8:	f109 0908 	add.w	r9, r9, #8
   109ac:	1c41      	adds	r1, r0, #1
   109ae:	e5ba      	b.n	10526 <_vfiprintf_r+0x48e>
   109b0:	2d10      	cmp	r5, #16
   109b2:	f340 82e5 	ble.w	10f80 <_vfiprintf_r+0xee8>
   109b6:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   109ba:	940f      	str	r4, [sp, #60]	; 0x3c
   109bc:	4608      	mov	r0, r1
   109be:	ee18 4a10 	vmov	r4, s16
   109c2:	e007      	b.n	109d4 <_vfiprintf_r+0x93c>
   109c4:	f100 0c02 	add.w	ip, r0, #2
   109c8:	f109 0908 	add.w	r9, r9, #8
   109cc:	4610      	mov	r0, r2
   109ce:	3d10      	subs	r5, #16
   109d0:	2d10      	cmp	r5, #16
   109d2:	dd1d      	ble.n	10a10 <_vfiprintf_r+0x978>
   109d4:	4925      	ldr	r1, [pc, #148]	; (10a6c <_vfiprintf_r+0x9d4>)
   109d6:	f8c9 1000 	str.w	r1, [r9]
   109da:	1c42      	adds	r2, r0, #1
   109dc:	3310      	adds	r3, #16
   109de:	2110      	movs	r1, #16
   109e0:	2a07      	cmp	r2, #7
   109e2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   109e6:	f8c9 1004 	str.w	r1, [r9, #4]
   109ea:	ddeb      	ble.n	109c4 <_vfiprintf_r+0x92c>
   109ec:	aa18      	add	r2, sp, #96	; 0x60
   109ee:	b303      	cbz	r3, 10a32 <_vfiprintf_r+0x99a>
   109f0:	4621      	mov	r1, r4
   109f2:	4658      	mov	r0, fp
   109f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109f8:	f7ff fb12 	bl	10020 <__sprint_r.part.0>
   109fc:	2800      	cmp	r0, #0
   109fe:	f47f ad22 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10a02:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10a06:	3d10      	subs	r5, #16
   10a08:	2d10      	cmp	r5, #16
   10a0a:	f100 0c01 	add.w	ip, r0, #1
   10a0e:	dce1      	bgt.n	109d4 <_vfiprintf_r+0x93c>
   10a10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10a12:	4660      	mov	r0, ip
   10a14:	4a15      	ldr	r2, [pc, #84]	; (10a6c <_vfiprintf_r+0x9d4>)
   10a16:	f8c9 5004 	str.w	r5, [r9, #4]
   10a1a:	442b      	add	r3, r5
   10a1c:	2807      	cmp	r0, #7
   10a1e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10a22:	f8c9 2000 	str.w	r2, [r9]
   10a26:	f300 80c1 	bgt.w	10bac <_vfiprintf_r+0xb14>
   10a2a:	f109 0908 	add.w	r9, r9, #8
   10a2e:	1c41      	adds	r1, r0, #1
   10a30:	e546      	b.n	104c0 <_vfiprintf_r+0x428>
   10a32:	4618      	mov	r0, r3
   10a34:	f04f 0c01 	mov.w	ip, #1
   10a38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a3c:	e7c7      	b.n	109ce <_vfiprintf_r+0x936>
   10a3e:	0776      	lsls	r6, r6, #29
   10a40:	9319      	str	r3, [sp, #100]	; 0x64
   10a42:	d553      	bpl.n	10aec <_vfiprintf_r+0xa54>
   10a44:	9a06      	ldr	r2, [sp, #24]
   10a46:	9903      	ldr	r1, [sp, #12]
   10a48:	1a54      	subs	r4, r2, r1
   10a4a:	2c00      	cmp	r4, #0
   10a4c:	dd4e      	ble.n	10aec <_vfiprintf_r+0xa54>
   10a4e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a52:	2c10      	cmp	r4, #16
   10a54:	f340 82b0 	ble.w	10fb8 <_vfiprintf_r+0xf20>
   10a58:	9919      	ldr	r1, [sp, #100]	; 0x64
   10a5a:	ee18 6a10 	vmov	r6, s16
   10a5e:	2510      	movs	r5, #16
   10a60:	e00d      	b.n	10a7e <_vfiprintf_r+0x9e6>
   10a62:	bf00      	nop
   10a64:	20000cf4 	.word	0x20000cf4
   10a68:	200012bc 	.word	0x200012bc
   10a6c:	20000d38 	.word	0x20000d38
   10a70:	1c88      	adds	r0, r1, #2
   10a72:	f109 0908 	add.w	r9, r9, #8
   10a76:	4611      	mov	r1, r2
   10a78:	3c10      	subs	r4, #16
   10a7a:	2c10      	cmp	r4, #16
   10a7c:	dd1a      	ble.n	10ab4 <_vfiprintf_r+0xa1c>
   10a7e:	1c4a      	adds	r2, r1, #1
   10a80:	48b3      	ldr	r0, [pc, #716]	; (10d50 <_vfiprintf_r+0xcb8>)
   10a82:	3310      	adds	r3, #16
   10a84:	2a07      	cmp	r2, #7
   10a86:	e9c9 0500 	strd	r0, r5, [r9]
   10a8a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10a8e:	ddef      	ble.n	10a70 <_vfiprintf_r+0x9d8>
   10a90:	aa18      	add	r2, sp, #96	; 0x60
   10a92:	b333      	cbz	r3, 10ae2 <_vfiprintf_r+0xa4a>
   10a94:	4631      	mov	r1, r6
   10a96:	4658      	mov	r0, fp
   10a98:	f7ff fac2 	bl	10020 <__sprint_r.part.0>
   10a9c:	2800      	cmp	r0, #0
   10a9e:	f47f acd2 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10aa2:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   10aa6:	3c10      	subs	r4, #16
   10aa8:	2c10      	cmp	r4, #16
   10aaa:	f101 0001 	add.w	r0, r1, #1
   10aae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10ab2:	dce4      	bgt.n	10a7e <_vfiprintf_r+0x9e6>
   10ab4:	4aa6      	ldr	r2, [pc, #664]	; (10d50 <_vfiprintf_r+0xcb8>)
   10ab6:	f8c9 4004 	str.w	r4, [r9, #4]
   10aba:	4423      	add	r3, r4
   10abc:	2807      	cmp	r0, #7
   10abe:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   10ac2:	f8c9 2000 	str.w	r2, [r9]
   10ac6:	f77f ad59 	ble.w	1057c <_vfiprintf_r+0x4e4>
   10aca:	b17b      	cbz	r3, 10aec <_vfiprintf_r+0xa54>
   10acc:	ee18 1a10 	vmov	r1, s16
   10ad0:	aa18      	add	r2, sp, #96	; 0x60
   10ad2:	4658      	mov	r0, fp
   10ad4:	f7ff faa4 	bl	10020 <__sprint_r.part.0>
   10ad8:	2800      	cmp	r0, #0
   10ada:	f47f acb4 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10ade:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10ae0:	e54c      	b.n	1057c <_vfiprintf_r+0x4e4>
   10ae2:	2001      	movs	r0, #1
   10ae4:	4619      	mov	r1, r3
   10ae6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10aea:	e7c5      	b.n	10a78 <_vfiprintf_r+0x9e0>
   10aec:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10af0:	9903      	ldr	r1, [sp, #12]
   10af2:	428a      	cmp	r2, r1
   10af4:	bfac      	ite	ge
   10af6:	189b      	addge	r3, r3, r2
   10af8:	185b      	addlt	r3, r3, r1
   10afa:	9305      	str	r3, [sp, #20]
   10afc:	e549      	b.n	10592 <_vfiprintf_r+0x4fa>
   10afe:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10b02:	058f      	lsls	r7, r1, #22
   10b04:	ee18 3a10 	vmov	r3, s16
   10b08:	b28a      	uxth	r2, r1
   10b0a:	f53f aae8 	bmi.w	100de <_vfiprintf_r+0x46>
   10b0e:	ee18 5a10 	vmov	r5, s16
   10b12:	6d98      	ldr	r0, [r3, #88]	; 0x58
   10b14:	f7fb fb3e 	bl	c194 <__retarget_lock_acquire_recursive>
   10b18:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   10b1c:	b28a      	uxth	r2, r1
   10b1e:	f7ff bade 	b.w	100de <_vfiprintf_r+0x46>
   10b22:	2b00      	cmp	r3, #0
   10b24:	f43f ae79 	beq.w	1081a <_vfiprintf_r+0x782>
   10b28:	ee18 1a10 	vmov	r1, s16
   10b2c:	aa18      	add	r2, sp, #96	; 0x60
   10b2e:	4658      	mov	r0, fp
   10b30:	f7ff fa76 	bl	10020 <__sprint_r.part.0>
   10b34:	2800      	cmp	r0, #0
   10b36:	f47f ac86 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10b3a:	9919      	ldr	r1, [sp, #100]	; 0x64
   10b3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10b3e:	3101      	adds	r1, #1
   10b40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b44:	e4f8      	b.n	10538 <_vfiprintf_r+0x4a0>
   10b46:	9219      	str	r2, [sp, #100]	; 0x64
   10b48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b4c:	e45e      	b.n	1040c <_vfiprintf_r+0x374>
   10b4e:	2f00      	cmp	r7, #0
   10b50:	f47f abc3 	bne.w	102da <_vfiprintf_r+0x242>
   10b54:	9e03      	ldr	r6, [sp, #12]
   10b56:	2700      	movs	r7, #0
   10b58:	9704      	str	r7, [sp, #16]
   10b5a:	ac44      	add	r4, sp, #272	; 0x110
   10b5c:	f7ff bbc5 	b.w	102ea <_vfiprintf_r+0x252>
   10b60:	9b03      	ldr	r3, [sp, #12]
   10b62:	f013 0310 	ands.w	r3, r3, #16
   10b66:	d154      	bne.n	10c12 <_vfiprintf_r+0xb7a>
   10b68:	9a03      	ldr	r2, [sp, #12]
   10b6a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   10b6e:	f000 816b 	beq.w	10e48 <_vfiprintf_r+0xdb0>
   10b72:	9907      	ldr	r1, [sp, #28]
   10b74:	461a      	mov	r2, r3
   10b76:	f851 3b04 	ldr.w	r3, [r1], #4
   10b7a:	9107      	str	r1, [sp, #28]
   10b7c:	b29b      	uxth	r3, r3
   10b7e:	2101      	movs	r1, #1
   10b80:	e401      	b.n	10386 <_vfiprintf_r+0x2ee>
   10b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b84:	2a00      	cmp	r2, #0
   10b86:	d164      	bne.n	10c52 <_vfiprintf_r+0xbba>
   10b88:	4618      	mov	r0, r3
   10b8a:	2101      	movs	r1, #1
   10b8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b90:	e4c9      	b.n	10526 <_vfiprintf_r+0x48e>
   10b92:	2101      	movs	r1, #1
   10b94:	4618      	mov	r0, r3
   10b96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10b9a:	e4c4      	b.n	10526 <_vfiprintf_r+0x48e>
   10b9c:	425b      	negs	r3, r3
   10b9e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   10ba2:	9603      	str	r6, [sp, #12]
   10ba4:	202d      	movs	r0, #45	; 0x2d
   10ba6:	2101      	movs	r1, #1
   10ba8:	f7ff bbee 	b.w	10388 <_vfiprintf_r+0x2f0>
   10bac:	2b00      	cmp	r3, #0
   10bae:	f000 8088 	beq.w	10cc2 <_vfiprintf_r+0xc2a>
   10bb2:	ee18 1a10 	vmov	r1, s16
   10bb6:	aa18      	add	r2, sp, #96	; 0x60
   10bb8:	4658      	mov	r0, fp
   10bba:	f7ff fa31 	bl	10020 <__sprint_r.part.0>
   10bbe:	2800      	cmp	r0, #0
   10bc0:	f47f ac41 	bne.w	10446 <_vfiprintf_r+0x3ae>
   10bc4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10bc8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10bcc:	1c41      	adds	r1, r0, #1
   10bce:	e477      	b.n	104c0 <_vfiprintf_r+0x428>
   10bd0:	f898 1000 	ldrb.w	r1, [r8]
   10bd4:	9307      	str	r3, [sp, #28]
   10bd6:	f7ff bad2 	b.w	1017e <_vfiprintf_r+0xe6>
   10bda:	ac44      	add	r4, sp, #272	; 0x110
   10bdc:	f7ff bb85 	b.w	102ea <_vfiprintf_r+0x252>
   10be0:	f109 0908 	add.w	r9, r9, #8
   10be4:	f10c 0101 	add.w	r1, ip, #1
   10be8:	4660      	mov	r0, ip
   10bea:	e4a0      	b.n	1052e <_vfiprintf_r+0x496>
   10bec:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10bf0:	f040 8197 	bne.w	10f22 <_vfiprintf_r+0xe8a>
   10bf4:	f851 3b04 	ldr.w	r3, [r1], #4
   10bf8:	9107      	str	r1, [sp, #28]
   10bfa:	f7ff bbc0 	b.w	1037e <_vfiprintf_r+0x2e6>
   10bfe:	05b3      	lsls	r3, r6, #22
   10c00:	f100 8188 	bmi.w	10f14 <_vfiprintf_r+0xe7c>
   10c04:	f852 3b04 	ldr.w	r3, [r2], #4
   10c08:	9207      	str	r2, [sp, #28]
   10c0a:	17da      	asrs	r2, r3, #31
   10c0c:	4611      	mov	r1, r2
   10c0e:	f7ff bb52 	b.w	102b6 <_vfiprintf_r+0x21e>
   10c12:	9907      	ldr	r1, [sp, #28]
   10c14:	f851 3b04 	ldr.w	r3, [r1], #4
   10c18:	9107      	str	r1, [sp, #28]
   10c1a:	2101      	movs	r1, #1
   10c1c:	f7ff bbb3 	b.w	10386 <_vfiprintf_r+0x2ee>
   10c20:	9b07      	ldr	r3, [sp, #28]
   10c22:	9805      	ldr	r0, [sp, #20]
   10c24:	f853 1b04 	ldr.w	r1, [r3], #4
   10c28:	9307      	str	r3, [sp, #28]
   10c2a:	17c2      	asrs	r2, r0, #31
   10c2c:	e9c1 0200 	strd	r0, r2, [r1]
   10c30:	f7ff ba7d 	b.w	1012e <_vfiprintf_r+0x96>
   10c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c36:	2b00      	cmp	r3, #0
   10c38:	f43f ab26 	beq.w	10288 <_vfiprintf_r+0x1f0>
   10c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c3e:	781b      	ldrb	r3, [r3, #0]
   10c40:	2b00      	cmp	r3, #0
   10c42:	f43f ab21 	beq.w	10288 <_vfiprintf_r+0x1f0>
   10c46:	f898 1000 	ldrb.w	r1, [r8]
   10c4a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   10c4e:	f7ff ba96 	b.w	1017e <_vfiprintf_r+0xe6>
   10c52:	2302      	movs	r3, #2
   10c54:	aa11      	add	r2, sp, #68	; 0x44
   10c56:	931c      	str	r3, [sp, #112]	; 0x70
   10c58:	921b      	str	r2, [sp, #108]	; 0x6c
   10c5a:	2001      	movs	r0, #1
   10c5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10c60:	e6a2      	b.n	109a8 <_vfiprintf_r+0x910>
   10c62:	9603      	str	r6, [sp, #12]
   10c64:	e571      	b.n	1074a <_vfiprintf_r+0x6b2>
   10c66:	4b3b      	ldr	r3, [pc, #236]	; (10d54 <_vfiprintf_r+0xcbc>)
   10c68:	930c      	str	r3, [sp, #48]	; 0x30
   10c6a:	f016 0220 	ands.w	r2, r6, #32
   10c6e:	d059      	beq.n	10d24 <_vfiprintf_r+0xc8c>
   10c70:	9b07      	ldr	r3, [sp, #28]
   10c72:	3307      	adds	r3, #7
   10c74:	f023 0307 	bic.w	r3, r3, #7
   10c78:	4618      	mov	r0, r3
   10c7a:	685a      	ldr	r2, [r3, #4]
   10c7c:	f850 3b08 	ldr.w	r3, [r0], #8
   10c80:	9007      	str	r0, [sp, #28]
   10c82:	07f4      	lsls	r4, r6, #31
   10c84:	d509      	bpl.n	10c9a <_vfiprintf_r+0xc02>
   10c86:	ea53 0002 	orrs.w	r0, r3, r2
   10c8a:	d006      	beq.n	10c9a <_vfiprintf_r+0xc02>
   10c8c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10c90:	2130      	movs	r1, #48	; 0x30
   10c92:	f046 0602 	orr.w	r6, r6, #2
   10c96:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   10c9a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10c9e:	9103      	str	r1, [sp, #12]
   10ca0:	2102      	movs	r1, #2
   10ca2:	f7ff bb70 	b.w	10386 <_vfiprintf_r+0x2ee>
   10ca6:	4b2c      	ldr	r3, [pc, #176]	; (10d58 <_vfiprintf_r+0xcc0>)
   10ca8:	930c      	str	r3, [sp, #48]	; 0x30
   10caa:	e7de      	b.n	10c6a <_vfiprintf_r+0xbd2>
   10cac:	9b07      	ldr	r3, [sp, #28]
   10cae:	2101      	movs	r1, #1
   10cb0:	f853 2b04 	ldr.w	r2, [r3], #4
   10cb4:	9103      	str	r1, [sp, #12]
   10cb6:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   10cba:	9307      	str	r3, [sp, #28]
   10cbc:	9104      	str	r1, [sp, #16]
   10cbe:	ac2b      	add	r4, sp, #172	; 0xac
   10cc0:	e4df      	b.n	10682 <_vfiprintf_r+0x5ea>
   10cc2:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10cc6:	2a00      	cmp	r2, #0
   10cc8:	f040 8132 	bne.w	10f30 <_vfiprintf_r+0xe98>
   10ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10cce:	2a00      	cmp	r2, #0
   10cd0:	f47f ae62 	bne.w	10998 <_vfiprintf_r+0x900>
   10cd4:	4618      	mov	r0, r3
   10cd6:	2101      	movs	r1, #1
   10cd8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cdc:	e427      	b.n	1052e <_vfiprintf_r+0x496>
   10cde:	2100      	movs	r1, #0
   10ce0:	2208      	movs	r2, #8
   10ce2:	a816      	add	r0, sp, #88	; 0x58
   10ce4:	9413      	str	r4, [sp, #76]	; 0x4c
   10ce6:	f7fb f8d1 	bl	be8c <memset>
   10cea:	1c79      	adds	r1, r7, #1
   10cec:	f000 80bc 	beq.w	10e68 <_vfiprintf_r+0xdd0>
   10cf0:	2500      	movs	r5, #0
   10cf2:	9407      	str	r4, [sp, #28]
   10cf4:	462c      	mov	r4, r5
   10cf6:	e00c      	b.n	10d12 <_vfiprintf_r+0xc7a>
   10cf8:	a92b      	add	r1, sp, #172	; 0xac
   10cfa:	4658      	mov	r0, fp
   10cfc:	f7ff f8ca 	bl	fe94 <_wcrtomb_r>
   10d00:	1c42      	adds	r2, r0, #1
   10d02:	4420      	add	r0, r4
   10d04:	f000 816b 	beq.w	10fde <_vfiprintf_r+0xf46>
   10d08:	42b8      	cmp	r0, r7
   10d0a:	dc08      	bgt.n	10d1e <_vfiprintf_r+0xc86>
   10d0c:	f000 8170 	beq.w	10ff0 <_vfiprintf_r+0xf58>
   10d10:	4604      	mov	r4, r0
   10d12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10d14:	5952      	ldr	r2, [r2, r5]
   10d16:	ab16      	add	r3, sp, #88	; 0x58
   10d18:	3504      	adds	r5, #4
   10d1a:	2a00      	cmp	r2, #0
   10d1c:	d1ec      	bne.n	10cf8 <_vfiprintf_r+0xc60>
   10d1e:	9404      	str	r4, [sp, #16]
   10d20:	9c07      	ldr	r4, [sp, #28]
   10d22:	e0af      	b.n	10e84 <_vfiprintf_r+0xdec>
   10d24:	f016 0310 	ands.w	r3, r6, #16
   10d28:	9807      	ldr	r0, [sp, #28]
   10d2a:	d10c      	bne.n	10d46 <_vfiprintf_r+0xcae>
   10d2c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10d30:	d005      	beq.n	10d3e <_vfiprintf_r+0xca6>
   10d32:	461a      	mov	r2, r3
   10d34:	f850 3b04 	ldr.w	r3, [r0], #4
   10d38:	9007      	str	r0, [sp, #28]
   10d3a:	b29b      	uxth	r3, r3
   10d3c:	e7a1      	b.n	10c82 <_vfiprintf_r+0xbea>
   10d3e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10d42:	f040 80e1 	bne.w	10f08 <_vfiprintf_r+0xe70>
   10d46:	f850 3b04 	ldr.w	r3, [r0], #4
   10d4a:	9007      	str	r0, [sp, #28]
   10d4c:	e799      	b.n	10c82 <_vfiprintf_r+0xbea>
   10d4e:	bf00      	nop
   10d50:	20000d38 	.word	0x20000d38
   10d54:	20000cf4 	.word	0x20000cf4
   10d58:	20000d08 	.word	0x20000d08
   10d5c:	9903      	ldr	r1, [sp, #12]
   10d5e:	9704      	str	r7, [sp, #16]
   10d60:	ac44      	add	r4, sp, #272	; 0x110
   10d62:	469e      	mov	lr, r3
   10d64:	ee08 ba90 	vmov	s17, fp
   10d68:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   10d6c:	f04f 0c00 	mov.w	ip, #0
   10d70:	4623      	mov	r3, r4
   10d72:	e006      	b.n	10d82 <_vfiprintf_r+0xcea>
   10d74:	f1be 0f0a 	cmp.w	lr, #10
   10d78:	f172 0200 	sbcs.w	r2, r2, #0
   10d7c:	d339      	bcc.n	10df2 <_vfiprintf_r+0xd5a>
   10d7e:	46a6      	mov	lr, r4
   10d80:	462a      	mov	r2, r5
   10d82:	49a6      	ldr	r1, [pc, #664]	; (1101c <_vfiprintf_r+0xf84>)
   10d84:	eb1e 0002 	adds.w	r0, lr, r2
   10d88:	f140 0000 	adc.w	r0, r0, #0
   10d8c:	460f      	mov	r7, r1
   10d8e:	fba1 1400 	umull	r1, r4, r1, r0
   10d92:	f024 0103 	bic.w	r1, r4, #3
   10d96:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   10d9a:	1a40      	subs	r0, r0, r1
   10d9c:	ebbe 0100 	subs.w	r1, lr, r0
   10da0:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10da4:	f162 0400 	sbc.w	r4, r2, #0
   10da8:	fb05 f501 	mul.w	r5, r5, r1
   10dac:	fb07 5504 	mla	r5, r7, r4, r5
   10db0:	fba1 4107 	umull	r4, r1, r1, r7
   10db4:	440d      	add	r5, r1
   10db6:	2705      	movs	r7, #5
   10db8:	f004 0101 	and.w	r1, r4, #1
   10dbc:	fba1 1b07 	umull	r1, fp, r1, r7
   10dc0:	1809      	adds	r1, r1, r0
   10dc2:	0864      	lsrs	r4, r4, #1
   10dc4:	3130      	adds	r1, #48	; 0x30
   10dc6:	f803 1c01 	strb.w	r1, [r3, #-1]
   10dca:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   10dce:	f10c 0c01 	add.w	ip, ip, #1
   10dd2:	3b01      	subs	r3, #1
   10dd4:	086d      	lsrs	r5, r5, #1
   10dd6:	2e00      	cmp	r6, #0
   10dd8:	d0cc      	beq.n	10d74 <_vfiprintf_r+0xcdc>
   10dda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10ddc:	7809      	ldrb	r1, [r1, #0]
   10dde:	4561      	cmp	r1, ip
   10de0:	d1c8      	bne.n	10d74 <_vfiprintf_r+0xcdc>
   10de2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10de6:	d0c5      	beq.n	10d74 <_vfiprintf_r+0xcdc>
   10de8:	f1be 0f0a 	cmp.w	lr, #10
   10dec:	f172 0200 	sbcs.w	r2, r2, #0
   10df0:	d26c      	bcs.n	10ecc <_vfiprintf_r+0xe34>
   10df2:	461c      	mov	r4, r3
   10df4:	ab44      	add	r3, sp, #272	; 0x110
   10df6:	1b1b      	subs	r3, r3, r4
   10df8:	9f04      	ldr	r7, [sp, #16]
   10dfa:	9e03      	ldr	r6, [sp, #12]
   10dfc:	9304      	str	r3, [sp, #16]
   10dfe:	ee18 ba90 	vmov	fp, s17
   10e02:	f7ff ba72 	b.w	102ea <_vfiprintf_r+0x252>
   10e06:	9603      	str	r6, [sp, #12]
   10e08:	f7ff ba62 	b.w	102d0 <_vfiprintf_r+0x238>
   10e0c:	4658      	mov	r0, fp
   10e0e:	f7fa ff0d 	bl	bc2c <__sinit>
   10e12:	f7ff b95b 	b.w	100cc <_vfiprintf_r+0x34>
   10e16:	2901      	cmp	r1, #1
   10e18:	9603      	str	r6, [sp, #12]
   10e1a:	f47f accd 	bne.w	107b8 <_vfiprintf_r+0x720>
   10e1e:	f7ff ba5c 	b.w	102da <_vfiprintf_r+0x242>
   10e22:	9b07      	ldr	r3, [sp, #28]
   10e24:	9905      	ldr	r1, [sp, #20]
   10e26:	f853 2b04 	ldr.w	r2, [r3], #4
   10e2a:	6011      	str	r1, [r2, #0]
   10e2c:	9307      	str	r3, [sp, #28]
   10e2e:	f7ff b97e 	b.w	1012e <_vfiprintf_r+0x96>
   10e32:	2f06      	cmp	r7, #6
   10e34:	463b      	mov	r3, r7
   10e36:	9a03      	ldr	r2, [sp, #12]
   10e38:	4c79      	ldr	r4, [pc, #484]	; (11020 <_vfiprintf_r+0xf88>)
   10e3a:	9207      	str	r2, [sp, #28]
   10e3c:	bf28      	it	cs
   10e3e:	2306      	movcs	r3, #6
   10e40:	9304      	str	r3, [sp, #16]
   10e42:	9303      	str	r3, [sp, #12]
   10e44:	f7ff bb25 	b.w	10492 <_vfiprintf_r+0x3fa>
   10e48:	9b03      	ldr	r3, [sp, #12]
   10e4a:	9907      	ldr	r1, [sp, #28]
   10e4c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10e50:	bf14      	ite	ne
   10e52:	f851 3b04 	ldrne.w	r3, [r1], #4
   10e56:	f851 3b04 	ldreq.w	r3, [r1], #4
   10e5a:	9107      	str	r1, [sp, #28]
   10e5c:	bf1c      	itt	ne
   10e5e:	4602      	movne	r2, r0
   10e60:	b2db      	uxtbne	r3, r3
   10e62:	2101      	movs	r1, #1
   10e64:	f7ff ba8f 	b.w	10386 <_vfiprintf_r+0x2ee>
   10e68:	ab16      	add	r3, sp, #88	; 0x58
   10e6a:	9300      	str	r3, [sp, #0]
   10e6c:	2300      	movs	r3, #0
   10e6e:	4619      	mov	r1, r3
   10e70:	aa13      	add	r2, sp, #76	; 0x4c
   10e72:	4658      	mov	r0, fp
   10e74:	f7ff f834 	bl	fee0 <_wcsrtombs_r>
   10e78:	4603      	mov	r3, r0
   10e7a:	3301      	adds	r3, #1
   10e7c:	9004      	str	r0, [sp, #16]
   10e7e:	f000 80ae 	beq.w	10fde <_vfiprintf_r+0xf46>
   10e82:	9413      	str	r4, [sp, #76]	; 0x4c
   10e84:	9b04      	ldr	r3, [sp, #16]
   10e86:	2b00      	cmp	r3, #0
   10e88:	d030      	beq.n	10eec <_vfiprintf_r+0xe54>
   10e8a:	2b63      	cmp	r3, #99	; 0x63
   10e8c:	dc63      	bgt.n	10f56 <_vfiprintf_r+0xebe>
   10e8e:	2300      	movs	r3, #0
   10e90:	9308      	str	r3, [sp, #32]
   10e92:	ac2b      	add	r4, sp, #172	; 0xac
   10e94:	2208      	movs	r2, #8
   10e96:	2100      	movs	r1, #0
   10e98:	a816      	add	r0, sp, #88	; 0x58
   10e9a:	f7fa fff7 	bl	be8c <memset>
   10e9e:	9d04      	ldr	r5, [sp, #16]
   10ea0:	ab16      	add	r3, sp, #88	; 0x58
   10ea2:	9300      	str	r3, [sp, #0]
   10ea4:	aa13      	add	r2, sp, #76	; 0x4c
   10ea6:	462b      	mov	r3, r5
   10ea8:	4621      	mov	r1, r4
   10eaa:	4658      	mov	r0, fp
   10eac:	f7ff f818 	bl	fee0 <_wcsrtombs_r>
   10eb0:	4285      	cmp	r5, r0
   10eb2:	f040 80ab 	bne.w	1100c <_vfiprintf_r+0xf74>
   10eb6:	9b03      	ldr	r3, [sp, #12]
   10eb8:	9a04      	ldr	r2, [sp, #16]
   10eba:	9307      	str	r3, [sp, #28]
   10ebc:	2300      	movs	r3, #0
   10ebe:	54a3      	strb	r3, [r4, r2]
   10ec0:	461f      	mov	r7, r3
   10ec2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10ec6:	9303      	str	r3, [sp, #12]
   10ec8:	f7ff ba16 	b.w	102f8 <_vfiprintf_r+0x260>
   10ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10ece:	990d      	ldr	r1, [sp, #52]	; 0x34
   10ed0:	1a9b      	subs	r3, r3, r2
   10ed2:	4618      	mov	r0, r3
   10ed4:	9308      	str	r3, [sp, #32]
   10ed6:	f7fb f891 	bl	bffc <strncpy>
   10eda:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10edc:	9b08      	ldr	r3, [sp, #32]
   10ede:	784a      	ldrb	r2, [r1, #1]
   10ee0:	b10a      	cbz	r2, 10ee6 <_vfiprintf_r+0xe4e>
   10ee2:	3101      	adds	r1, #1
   10ee4:	910b      	str	r1, [sp, #44]	; 0x2c
   10ee6:	f04f 0c00 	mov.w	ip, #0
   10eea:	e748      	b.n	10d7e <_vfiprintf_r+0xce6>
   10eec:	9b03      	ldr	r3, [sp, #12]
   10eee:	9307      	str	r3, [sp, #28]
   10ef0:	9b04      	ldr	r3, [sp, #16]
   10ef2:	9303      	str	r3, [sp, #12]
   10ef4:	461f      	mov	r7, r3
   10ef6:	9308      	str	r3, [sp, #32]
   10ef8:	f7ff b9fe 	b.w	102f8 <_vfiprintf_r+0x260>
   10efc:	2101      	movs	r1, #1
   10efe:	4618      	mov	r0, r3
   10f00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10f04:	f7ff bb13 	b.w	1052e <_vfiprintf_r+0x496>
   10f08:	f850 3b04 	ldr.w	r3, [r0], #4
   10f0c:	9007      	str	r0, [sp, #28]
   10f0e:	4622      	mov	r2, r4
   10f10:	b2db      	uxtb	r3, r3
   10f12:	e6b6      	b.n	10c82 <_vfiprintf_r+0xbea>
   10f14:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10f18:	9207      	str	r2, [sp, #28]
   10f1a:	17da      	asrs	r2, r3, #31
   10f1c:	4611      	mov	r1, r2
   10f1e:	f7ff b9ca 	b.w	102b6 <_vfiprintf_r+0x21e>
   10f22:	f851 3b04 	ldr.w	r3, [r1], #4
   10f26:	9107      	str	r1, [sp, #28]
   10f28:	4602      	mov	r2, r0
   10f2a:	b2db      	uxtb	r3, r3
   10f2c:	f7ff ba27 	b.w	1037e <_vfiprintf_r+0x2e6>
   10f30:	2301      	movs	r3, #1
   10f32:	931c      	str	r3, [sp, #112]	; 0x70
   10f34:	2101      	movs	r1, #1
   10f36:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   10f3a:	931b      	str	r3, [sp, #108]	; 0x6c
   10f3c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10f40:	460b      	mov	r3, r1
   10f42:	f7ff bacd 	b.w	104e0 <_vfiprintf_r+0x448>
   10f46:	9b07      	ldr	r3, [sp, #28]
   10f48:	9905      	ldr	r1, [sp, #20]
   10f4a:	f853 2b04 	ldr.w	r2, [r3], #4
   10f4e:	9307      	str	r3, [sp, #28]
   10f50:	8011      	strh	r1, [r2, #0]
   10f52:	f7ff b8ec 	b.w	1012e <_vfiprintf_r+0x96>
   10f56:	1c59      	adds	r1, r3, #1
   10f58:	4658      	mov	r0, fp
   10f5a:	f7f9 ff4f 	bl	adfc <_malloc_r>
   10f5e:	4604      	mov	r4, r0
   10f60:	2800      	cmp	r0, #0
   10f62:	d03c      	beq.n	10fde <_vfiprintf_r+0xf46>
   10f64:	9008      	str	r0, [sp, #32]
   10f66:	e795      	b.n	10e94 <_vfiprintf_r+0xdfc>
   10f68:	6d88      	ldr	r0, [r1, #88]	; 0x58
   10f6a:	f7fb f915 	bl	c198 <__retarget_lock_release_recursive>
   10f6e:	f7ff b9e9 	b.w	10344 <_vfiprintf_r+0x2ac>
   10f72:	9b03      	ldr	r3, [sp, #12]
   10f74:	9307      	str	r3, [sp, #28]
   10f76:	e9cd 7703 	strd	r7, r7, [sp, #12]
   10f7a:	9f08      	ldr	r7, [sp, #32]
   10f7c:	f7ff b9bc 	b.w	102f8 <_vfiprintf_r+0x260>
   10f80:	9819      	ldr	r0, [sp, #100]	; 0x64
   10f82:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10f84:	3001      	adds	r0, #1
   10f86:	e545      	b.n	10a14 <_vfiprintf_r+0x97c>
   10f88:	9b03      	ldr	r3, [sp, #12]
   10f8a:	9307      	str	r3, [sp, #28]
   10f8c:	4620      	mov	r0, r4
   10f8e:	f7fb fad7 	bl	c540 <strlen>
   10f92:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   10f96:	462f      	mov	r7, r5
   10f98:	9004      	str	r0, [sp, #16]
   10f9a:	9303      	str	r3, [sp, #12]
   10f9c:	9508      	str	r5, [sp, #32]
   10f9e:	f7ff b9ab 	b.w	102f8 <_vfiprintf_r+0x260>
   10fa2:	ee18 1a10 	vmov	r1, s16
   10fa6:	aa18      	add	r2, sp, #96	; 0x60
   10fa8:	4658      	mov	r0, fp
   10faa:	f7ff f839 	bl	10020 <__sprint_r.part.0>
   10fae:	2800      	cmp	r0, #0
   10fb0:	f43f aa36 	beq.w	10420 <_vfiprintf_r+0x388>
   10fb4:	f7ff ba4d 	b.w	10452 <_vfiprintf_r+0x3ba>
   10fb8:	9819      	ldr	r0, [sp, #100]	; 0x64
   10fba:	3001      	adds	r0, #1
   10fbc:	e57a      	b.n	10ab4 <_vfiprintf_r+0xa1c>
   10fbe:	468c      	mov	ip, r1
   10fc0:	e46e      	b.n	108a0 <_vfiprintf_r+0x808>
   10fc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10fc4:	07d9      	lsls	r1, r3, #31
   10fc6:	d405      	bmi.n	10fd4 <_vfiprintf_r+0xf3c>
   10fc8:	89ab      	ldrh	r3, [r5, #12]
   10fca:	059a      	lsls	r2, r3, #22
   10fcc:	d402      	bmi.n	10fd4 <_vfiprintf_r+0xf3c>
   10fce:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10fd0:	f7fb f8e2 	bl	c198 <__retarget_lock_release_recursive>
   10fd4:	f04f 33ff 	mov.w	r3, #4294967295
   10fd8:	9305      	str	r3, [sp, #20]
   10fda:	f7ff ba49 	b.w	10470 <_vfiprintf_r+0x3d8>
   10fde:	ee18 2a10 	vmov	r2, s16
   10fe2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10fea:	8193      	strh	r3, [r2, #12]
   10fec:	f7ff ba35 	b.w	1045a <_vfiprintf_r+0x3c2>
   10ff0:	9c07      	ldr	r4, [sp, #28]
   10ff2:	9704      	str	r7, [sp, #16]
   10ff4:	e746      	b.n	10e84 <_vfiprintf_r+0xdec>
   10ff6:	9b07      	ldr	r3, [sp, #28]
   10ff8:	f898 1001 	ldrb.w	r1, [r8, #1]
   10ffc:	f853 7b04 	ldr.w	r7, [r3], #4
   11000:	9307      	str	r3, [sp, #28]
   11002:	4690      	mov	r8, r2
   11004:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11008:	f7ff b8b9 	b.w	1017e <_vfiprintf_r+0xe6>
   1100c:	ee18 2a10 	vmov	r2, s16
   11010:	8993      	ldrh	r3, [r2, #12]
   11012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11016:	8193      	strh	r3, [r2, #12]
   11018:	f7ff ba15 	b.w	10446 <_vfiprintf_r+0x3ae>
   1101c:	cccccccd 	.word	0xcccccccd
   11020:	20000d1c 	.word	0x20000d1c

00011024 <__sbprintf>:
   11024:	b570      	push	{r4, r5, r6, lr}
   11026:	460c      	mov	r4, r1
   11028:	8989      	ldrh	r1, [r1, #12]
   1102a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1102e:	f021 0102 	bic.w	r1, r1, #2
   11032:	f8ad 1014 	strh.w	r1, [sp, #20]
   11036:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11038:	911b      	str	r1, [sp, #108]	; 0x6c
   1103a:	89e1      	ldrh	r1, [r4, #14]
   1103c:	f8ad 1016 	strh.w	r1, [sp, #22]
   11040:	69e1      	ldr	r1, [r4, #28]
   11042:	9109      	str	r1, [sp, #36]	; 0x24
   11044:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11046:	910b      	str	r1, [sp, #44]	; 0x2c
   11048:	a91c      	add	r1, sp, #112	; 0x70
   1104a:	9102      	str	r1, [sp, #8]
   1104c:	9106      	str	r1, [sp, #24]
   1104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11052:	4606      	mov	r6, r0
   11054:	9104      	str	r1, [sp, #16]
   11056:	9107      	str	r1, [sp, #28]
   11058:	a818      	add	r0, sp, #96	; 0x60
   1105a:	2100      	movs	r1, #0
   1105c:	e9cd 3200 	strd	r3, r2, [sp]
   11060:	9108      	str	r1, [sp, #32]
   11062:	f7fb f893 	bl	c18c <__retarget_lock_init_recursive>
   11066:	e9dd 3200 	ldrd	r3, r2, [sp]
   1106a:	a902      	add	r1, sp, #8
   1106c:	4630      	mov	r0, r6
   1106e:	f7ff f813 	bl	10098 <_vfiprintf_r>
   11072:	1e05      	subs	r5, r0, #0
   11074:	db07      	blt.n	11086 <__sbprintf+0x62>
   11076:	a902      	add	r1, sp, #8
   11078:	4630      	mov	r0, r6
   1107a:	f7fd fee7 	bl	ee4c <_fflush_r>
   1107e:	2800      	cmp	r0, #0
   11080:	bf18      	it	ne
   11082:	f04f 35ff 	movne.w	r5, #4294967295
   11086:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1108a:	065b      	lsls	r3, r3, #25
   1108c:	d503      	bpl.n	11096 <__sbprintf+0x72>
   1108e:	89a3      	ldrh	r3, [r4, #12]
   11090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11094:	81a3      	strh	r3, [r4, #12]
   11096:	9818      	ldr	r0, [sp, #96]	; 0x60
   11098:	f7fb f87a 	bl	c190 <__retarget_lock_close_recursive>
   1109c:	4628      	mov	r0, r5
   1109e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   110a2:	bd70      	pop	{r4, r5, r6, pc}

000110a4 <__sfvwrite_r>:
   110a4:	6893      	ldr	r3, [r2, #8]
   110a6:	2b00      	cmp	r3, #0
   110a8:	f000 8085 	beq.w	111b6 <__sfvwrite_r+0x112>
   110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   110b4:	460c      	mov	r4, r1
   110b6:	0719      	lsls	r1, r3, #28
   110b8:	4680      	mov	r8, r0
   110ba:	b083      	sub	sp, #12
   110bc:	4617      	mov	r7, r2
   110be:	b298      	uxth	r0, r3
   110c0:	d525      	bpl.n	1110e <__sfvwrite_r+0x6a>
   110c2:	6923      	ldr	r3, [r4, #16]
   110c4:	b31b      	cbz	r3, 1110e <__sfvwrite_r+0x6a>
   110c6:	f010 0302 	ands.w	r3, r0, #2
   110ca:	683d      	ldr	r5, [r7, #0]
   110cc:	d02d      	beq.n	1112a <__sfvwrite_r+0x86>
   110ce:	f04f 0a00 	mov.w	sl, #0
   110d2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 11394 <__sfvwrite_r+0x2f0>
   110d6:	4656      	mov	r6, sl
   110d8:	46b9      	mov	r9, r7
   110da:	455e      	cmp	r6, fp
   110dc:	4633      	mov	r3, r6
   110de:	4652      	mov	r2, sl
   110e0:	bf28      	it	cs
   110e2:	465b      	movcs	r3, fp
   110e4:	4640      	mov	r0, r8
   110e6:	2e00      	cmp	r6, #0
   110e8:	d052      	beq.n	11190 <__sfvwrite_r+0xec>
   110ea:	69e1      	ldr	r1, [r4, #28]
   110ec:	6a67      	ldr	r7, [r4, #36]	; 0x24
   110ee:	47b8      	blx	r7
   110f0:	2800      	cmp	r0, #0
   110f2:	dd56      	ble.n	111a2 <__sfvwrite_r+0xfe>
   110f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
   110f8:	1a1b      	subs	r3, r3, r0
   110fa:	4482      	add	sl, r0
   110fc:	1a36      	subs	r6, r6, r0
   110fe:	f8c9 3008 	str.w	r3, [r9, #8]
   11102:	2b00      	cmp	r3, #0
   11104:	d1e9      	bne.n	110da <__sfvwrite_r+0x36>
   11106:	2000      	movs	r0, #0
   11108:	b003      	add	sp, #12
   1110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1110e:	4621      	mov	r1, r4
   11110:	4640      	mov	r0, r8
   11112:	f000 f941 	bl	11398 <__swsetup_r>
   11116:	2800      	cmp	r0, #0
   11118:	f040 8138 	bne.w	1138c <__sfvwrite_r+0x2e8>
   1111c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11120:	683d      	ldr	r5, [r7, #0]
   11122:	b298      	uxth	r0, r3
   11124:	f010 0302 	ands.w	r3, r0, #2
   11128:	d1d1      	bne.n	110ce <__sfvwrite_r+0x2a>
   1112a:	f010 0901 	ands.w	r9, r0, #1
   1112e:	d144      	bne.n	111ba <__sfvwrite_r+0x116>
   11130:	464e      	mov	r6, r9
   11132:	9700      	str	r7, [sp, #0]
   11134:	b346      	cbz	r6, 11188 <__sfvwrite_r+0xe4>
   11136:	0582      	lsls	r2, r0, #22
   11138:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1113c:	f140 8085 	bpl.w	1124a <__sfvwrite_r+0x1a6>
   11140:	45b3      	cmp	fp, r6
   11142:	465a      	mov	r2, fp
   11144:	f200 80b4 	bhi.w	112b0 <__sfvwrite_r+0x20c>
   11148:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1114c:	f040 80c1 	bne.w	112d2 <__sfvwrite_r+0x22e>
   11150:	6820      	ldr	r0, [r4, #0]
   11152:	9201      	str	r2, [sp, #4]
   11154:	4649      	mov	r1, r9
   11156:	f7fa fe1d 	bl	bd94 <memmove>
   1115a:	68a3      	ldr	r3, [r4, #8]
   1115c:	9a01      	ldr	r2, [sp, #4]
   1115e:	eba3 010b 	sub.w	r1, r3, fp
   11162:	6823      	ldr	r3, [r4, #0]
   11164:	60a1      	str	r1, [r4, #8]
   11166:	4413      	add	r3, r2
   11168:	46b2      	mov	sl, r6
   1116a:	6023      	str	r3, [r4, #0]
   1116c:	2600      	movs	r6, #0
   1116e:	9a00      	ldr	r2, [sp, #0]
   11170:	6893      	ldr	r3, [r2, #8]
   11172:	eba3 030a 	sub.w	r3, r3, sl
   11176:	44d1      	add	r9, sl
   11178:	6093      	str	r3, [r2, #8]
   1117a:	2b00      	cmp	r3, #0
   1117c:	d0c3      	beq.n	11106 <__sfvwrite_r+0x62>
   1117e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11182:	b280      	uxth	r0, r0
   11184:	2e00      	cmp	r6, #0
   11186:	d1d6      	bne.n	11136 <__sfvwrite_r+0x92>
   11188:	e9d5 9600 	ldrd	r9, r6, [r5]
   1118c:	3508      	adds	r5, #8
   1118e:	e7d1      	b.n	11134 <__sfvwrite_r+0x90>
   11190:	e9d5 a600 	ldrd	sl, r6, [r5]
   11194:	3508      	adds	r5, #8
   11196:	e7a0      	b.n	110da <__sfvwrite_r+0x36>
   11198:	4621      	mov	r1, r4
   1119a:	4640      	mov	r0, r8
   1119c:	f7fd fe56 	bl	ee4c <_fflush_r>
   111a0:	b388      	cbz	r0, 11206 <__sfvwrite_r+0x162>
   111a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   111a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111aa:	f04f 30ff 	mov.w	r0, #4294967295
   111ae:	81a3      	strh	r3, [r4, #12]
   111b0:	b003      	add	sp, #12
   111b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111b6:	2000      	movs	r0, #0
   111b8:	4770      	bx	lr
   111ba:	461e      	mov	r6, r3
   111bc:	46ba      	mov	sl, r7
   111be:	4699      	mov	r9, r3
   111c0:	4618      	mov	r0, r3
   111c2:	9500      	str	r5, [sp, #0]
   111c4:	461f      	mov	r7, r3
   111c6:	b366      	cbz	r6, 11222 <__sfvwrite_r+0x17e>
   111c8:	2800      	cmp	r0, #0
   111ca:	d032      	beq.n	11232 <__sfvwrite_r+0x18e>
   111cc:	464a      	mov	r2, r9
   111ce:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   111d2:	6820      	ldr	r0, [r4, #0]
   111d4:	68a5      	ldr	r5, [r4, #8]
   111d6:	42b2      	cmp	r2, r6
   111d8:	bf28      	it	cs
   111da:	4632      	movcs	r2, r6
   111dc:	4288      	cmp	r0, r1
   111de:	d904      	bls.n	111ea <__sfvwrite_r+0x146>
   111e0:	eb05 0b03 	add.w	fp, r5, r3
   111e4:	455a      	cmp	r2, fp
   111e6:	f300 80a7 	bgt.w	11338 <__sfvwrite_r+0x294>
   111ea:	4293      	cmp	r3, r2
   111ec:	dc64      	bgt.n	112b8 <__sfvwrite_r+0x214>
   111ee:	69e1      	ldr	r1, [r4, #28]
   111f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   111f2:	463a      	mov	r2, r7
   111f4:	4640      	mov	r0, r8
   111f6:	47a8      	blx	r5
   111f8:	f1b0 0b00 	subs.w	fp, r0, #0
   111fc:	ddd1      	ble.n	111a2 <__sfvwrite_r+0xfe>
   111fe:	ebb9 090b 	subs.w	r9, r9, fp
   11202:	d0c9      	beq.n	11198 <__sfvwrite_r+0xf4>
   11204:	2001      	movs	r0, #1
   11206:	f8da 3008 	ldr.w	r3, [sl, #8]
   1120a:	eba3 030b 	sub.w	r3, r3, fp
   1120e:	445f      	add	r7, fp
   11210:	eba6 060b 	sub.w	r6, r6, fp
   11214:	f8ca 3008 	str.w	r3, [sl, #8]
   11218:	2b00      	cmp	r3, #0
   1121a:	f43f af74 	beq.w	11106 <__sfvwrite_r+0x62>
   1121e:	2e00      	cmp	r6, #0
   11220:	d1d2      	bne.n	111c8 <__sfvwrite_r+0x124>
   11222:	9a00      	ldr	r2, [sp, #0]
   11224:	6856      	ldr	r6, [r2, #4]
   11226:	4613      	mov	r3, r2
   11228:	3208      	adds	r2, #8
   1122a:	9200      	str	r2, [sp, #0]
   1122c:	2e00      	cmp	r6, #0
   1122e:	d0f8      	beq.n	11222 <__sfvwrite_r+0x17e>
   11230:	681f      	ldr	r7, [r3, #0]
   11232:	4632      	mov	r2, r6
   11234:	210a      	movs	r1, #10
   11236:	4638      	mov	r0, r7
   11238:	f7fd fe3a 	bl	eeb0 <memchr>
   1123c:	2800      	cmp	r0, #0
   1123e:	f000 809c 	beq.w	1137a <__sfvwrite_r+0x2d6>
   11242:	3001      	adds	r0, #1
   11244:	eba0 0907 	sub.w	r9, r0, r7
   11248:	e7c0      	b.n	111cc <__sfvwrite_r+0x128>
   1124a:	6820      	ldr	r0, [r4, #0]
   1124c:	6923      	ldr	r3, [r4, #16]
   1124e:	4298      	cmp	r0, r3
   11250:	d816      	bhi.n	11280 <__sfvwrite_r+0x1dc>
   11252:	6962      	ldr	r2, [r4, #20]
   11254:	42b2      	cmp	r2, r6
   11256:	d813      	bhi.n	11280 <__sfvwrite_r+0x1dc>
   11258:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1125c:	42b3      	cmp	r3, r6
   1125e:	bf28      	it	cs
   11260:	4633      	movcs	r3, r6
   11262:	69e1      	ldr	r1, [r4, #28]
   11264:	fb93 f3f2 	sdiv	r3, r3, r2
   11268:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1126a:	fb02 f303 	mul.w	r3, r2, r3
   1126e:	4640      	mov	r0, r8
   11270:	464a      	mov	r2, r9
   11272:	47b8      	blx	r7
   11274:	f1b0 0a00 	subs.w	sl, r0, #0
   11278:	dd93      	ble.n	111a2 <__sfvwrite_r+0xfe>
   1127a:	eba6 060a 	sub.w	r6, r6, sl
   1127e:	e776      	b.n	1116e <__sfvwrite_r+0xca>
   11280:	45b3      	cmp	fp, r6
   11282:	46da      	mov	sl, fp
   11284:	bf28      	it	cs
   11286:	46b2      	movcs	sl, r6
   11288:	4652      	mov	r2, sl
   1128a:	4649      	mov	r1, r9
   1128c:	f7fa fd82 	bl	bd94 <memmove>
   11290:	68a3      	ldr	r3, [r4, #8]
   11292:	6822      	ldr	r2, [r4, #0]
   11294:	eba3 030a 	sub.w	r3, r3, sl
   11298:	4452      	add	r2, sl
   1129a:	60a3      	str	r3, [r4, #8]
   1129c:	6022      	str	r2, [r4, #0]
   1129e:	2b00      	cmp	r3, #0
   112a0:	d1eb      	bne.n	1127a <__sfvwrite_r+0x1d6>
   112a2:	4621      	mov	r1, r4
   112a4:	4640      	mov	r0, r8
   112a6:	f7fd fdd1 	bl	ee4c <_fflush_r>
   112aa:	2800      	cmp	r0, #0
   112ac:	d0e5      	beq.n	1127a <__sfvwrite_r+0x1d6>
   112ae:	e778      	b.n	111a2 <__sfvwrite_r+0xfe>
   112b0:	6820      	ldr	r0, [r4, #0]
   112b2:	46b3      	mov	fp, r6
   112b4:	4632      	mov	r2, r6
   112b6:	e74c      	b.n	11152 <__sfvwrite_r+0xae>
   112b8:	4639      	mov	r1, r7
   112ba:	9201      	str	r2, [sp, #4]
   112bc:	f7fa fd6a 	bl	bd94 <memmove>
   112c0:	9a01      	ldr	r2, [sp, #4]
   112c2:	68a3      	ldr	r3, [r4, #8]
   112c4:	1a9b      	subs	r3, r3, r2
   112c6:	60a3      	str	r3, [r4, #8]
   112c8:	6823      	ldr	r3, [r4, #0]
   112ca:	4413      	add	r3, r2
   112cc:	6023      	str	r3, [r4, #0]
   112ce:	4693      	mov	fp, r2
   112d0:	e795      	b.n	111fe <__sfvwrite_r+0x15a>
   112d2:	6823      	ldr	r3, [r4, #0]
   112d4:	6921      	ldr	r1, [r4, #16]
   112d6:	eba3 0b01 	sub.w	fp, r3, r1
   112da:	6963      	ldr	r3, [r4, #20]
   112dc:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   112e0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   112e4:	f10b 0301 	add.w	r3, fp, #1
   112e8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   112ec:	4433      	add	r3, r6
   112ee:	4553      	cmp	r3, sl
   112f0:	4652      	mov	r2, sl
   112f2:	bf84      	itt	hi
   112f4:	469a      	movhi	sl, r3
   112f6:	4652      	movhi	r2, sl
   112f8:	0543      	lsls	r3, r0, #21
   112fa:	d52c      	bpl.n	11356 <__sfvwrite_r+0x2b2>
   112fc:	4611      	mov	r1, r2
   112fe:	4640      	mov	r0, r8
   11300:	f7f9 fd7c 	bl	adfc <_malloc_r>
   11304:	2800      	cmp	r0, #0
   11306:	d03b      	beq.n	11380 <__sfvwrite_r+0x2dc>
   11308:	465a      	mov	r2, fp
   1130a:	6921      	ldr	r1, [r4, #16]
   1130c:	9001      	str	r0, [sp, #4]
   1130e:	f7f7 ffaf 	bl	9270 <memcpy>
   11312:	89a2      	ldrh	r2, [r4, #12]
   11314:	9b01      	ldr	r3, [sp, #4]
   11316:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1131a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1131e:	81a2      	strh	r2, [r4, #12]
   11320:	eb03 000b 	add.w	r0, r3, fp
   11324:	6123      	str	r3, [r4, #16]
   11326:	ebaa 030b 	sub.w	r3, sl, fp
   1132a:	f8c4 a014 	str.w	sl, [r4, #20]
   1132e:	60a3      	str	r3, [r4, #8]
   11330:	6020      	str	r0, [r4, #0]
   11332:	46b3      	mov	fp, r6
   11334:	4632      	mov	r2, r6
   11336:	e70c      	b.n	11152 <__sfvwrite_r+0xae>
   11338:	4639      	mov	r1, r7
   1133a:	465a      	mov	r2, fp
   1133c:	f7fa fd2a 	bl	bd94 <memmove>
   11340:	6823      	ldr	r3, [r4, #0]
   11342:	445b      	add	r3, fp
   11344:	6023      	str	r3, [r4, #0]
   11346:	4621      	mov	r1, r4
   11348:	4640      	mov	r0, r8
   1134a:	f7fd fd7f 	bl	ee4c <_fflush_r>
   1134e:	2800      	cmp	r0, #0
   11350:	f43f af55 	beq.w	111fe <__sfvwrite_r+0x15a>
   11354:	e725      	b.n	111a2 <__sfvwrite_r+0xfe>
   11356:	4640      	mov	r0, r8
   11358:	f7fa f818 	bl	b38c <_realloc_r>
   1135c:	4603      	mov	r3, r0
   1135e:	2800      	cmp	r0, #0
   11360:	d1de      	bne.n	11320 <__sfvwrite_r+0x27c>
   11362:	6921      	ldr	r1, [r4, #16]
   11364:	4640      	mov	r0, r8
   11366:	f7fb f9ed 	bl	c744 <_free_r>
   1136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1136e:	220c      	movs	r2, #12
   11370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   11374:	f8c8 2000 	str.w	r2, [r8]
   11378:	e715      	b.n	111a6 <__sfvwrite_r+0x102>
   1137a:	1c72      	adds	r2, r6, #1
   1137c:	4691      	mov	r9, r2
   1137e:	e726      	b.n	111ce <__sfvwrite_r+0x12a>
   11380:	220c      	movs	r2, #12
   11382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11386:	f8c8 2000 	str.w	r2, [r8]
   1138a:	e70c      	b.n	111a6 <__sfvwrite_r+0x102>
   1138c:	f04f 30ff 	mov.w	r0, #4294967295
   11390:	e6ba      	b.n	11108 <__sfvwrite_r+0x64>
   11392:	bf00      	nop
   11394:	7ffffc00 	.word	0x7ffffc00

00011398 <__swsetup_r>:
   11398:	b538      	push	{r3, r4, r5, lr}
   1139a:	4b31      	ldr	r3, [pc, #196]	; (11460 <__swsetup_r+0xc8>)
   1139c:	681b      	ldr	r3, [r3, #0]
   1139e:	4605      	mov	r5, r0
   113a0:	460c      	mov	r4, r1
   113a2:	b113      	cbz	r3, 113aa <__swsetup_r+0x12>
   113a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   113a6:	2a00      	cmp	r2, #0
   113a8:	d04e      	beq.n	11448 <__swsetup_r+0xb0>
   113aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   113ae:	0718      	lsls	r0, r3, #28
   113b0:	b29a      	uxth	r2, r3
   113b2:	d51c      	bpl.n	113ee <__swsetup_r+0x56>
   113b4:	6921      	ldr	r1, [r4, #16]
   113b6:	b329      	cbz	r1, 11404 <__swsetup_r+0x6c>
   113b8:	f012 0001 	ands.w	r0, r2, #1
   113bc:	d007      	beq.n	113ce <__swsetup_r+0x36>
   113be:	2000      	movs	r0, #0
   113c0:	60a0      	str	r0, [r4, #8]
   113c2:	6960      	ldr	r0, [r4, #20]
   113c4:	4240      	negs	r0, r0
   113c6:	61a0      	str	r0, [r4, #24]
   113c8:	b139      	cbz	r1, 113da <__swsetup_r+0x42>
   113ca:	2000      	movs	r0, #0
   113cc:	bd38      	pop	{r3, r4, r5, pc}
   113ce:	0795      	lsls	r5, r2, #30
   113d0:	bf58      	it	pl
   113d2:	6960      	ldrpl	r0, [r4, #20]
   113d4:	60a0      	str	r0, [r4, #8]
   113d6:	2900      	cmp	r1, #0
   113d8:	d1f7      	bne.n	113ca <__swsetup_r+0x32>
   113da:	0612      	lsls	r2, r2, #24
   113dc:	bf58      	it	pl
   113de:	4608      	movpl	r0, r1
   113e0:	d5f4      	bpl.n	113cc <__swsetup_r+0x34>
   113e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   113e6:	81a3      	strh	r3, [r4, #12]
   113e8:	f04f 30ff 	mov.w	r0, #4294967295
   113ec:	bd38      	pop	{r3, r4, r5, pc}
   113ee:	06d1      	lsls	r1, r2, #27
   113f0:	d52e      	bpl.n	11450 <__swsetup_r+0xb8>
   113f2:	0752      	lsls	r2, r2, #29
   113f4:	d414      	bmi.n	11420 <__swsetup_r+0x88>
   113f6:	6921      	ldr	r1, [r4, #16]
   113f8:	f043 0308 	orr.w	r3, r3, #8
   113fc:	81a3      	strh	r3, [r4, #12]
   113fe:	b29a      	uxth	r2, r3
   11400:	2900      	cmp	r1, #0
   11402:	d1d9      	bne.n	113b8 <__swsetup_r+0x20>
   11404:	f402 7020 	and.w	r0, r2, #640	; 0x280
   11408:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1140c:	d0d4      	beq.n	113b8 <__swsetup_r+0x20>
   1140e:	4621      	mov	r1, r4
   11410:	4628      	mov	r0, r5
   11412:	f000 f947 	bl	116a4 <__smakebuf_r>
   11416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1141a:	6921      	ldr	r1, [r4, #16]
   1141c:	b29a      	uxth	r2, r3
   1141e:	e7cb      	b.n	113b8 <__swsetup_r+0x20>
   11420:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11422:	b151      	cbz	r1, 1143a <__swsetup_r+0xa2>
   11424:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11428:	4291      	cmp	r1, r2
   1142a:	d004      	beq.n	11436 <__swsetup_r+0x9e>
   1142c:	4628      	mov	r0, r5
   1142e:	f7fb f989 	bl	c744 <_free_r>
   11432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11436:	2200      	movs	r2, #0
   11438:	6322      	str	r2, [r4, #48]	; 0x30
   1143a:	6921      	ldr	r1, [r4, #16]
   1143c:	2200      	movs	r2, #0
   1143e:	e9c4 1200 	strd	r1, r2, [r4]
   11442:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   11446:	e7d7      	b.n	113f8 <__swsetup_r+0x60>
   11448:	4618      	mov	r0, r3
   1144a:	f7fa fbef 	bl	bc2c <__sinit>
   1144e:	e7ac      	b.n	113aa <__swsetup_r+0x12>
   11450:	2209      	movs	r2, #9
   11452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11456:	602a      	str	r2, [r5, #0]
   11458:	f04f 30ff 	mov.w	r0, #4294967295
   1145c:	81a3      	strh	r3, [r4, #12]
   1145e:	bd38      	pop	{r3, r4, r5, pc}
   11460:	2000499c 	.word	0x2000499c

00011464 <__fputwc>:
   11464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11468:	b082      	sub	sp, #8
   1146a:	4682      	mov	sl, r0
   1146c:	4688      	mov	r8, r1
   1146e:	4614      	mov	r4, r2
   11470:	f7fa fdf6 	bl	c060 <__locale_mb_cur_max>
   11474:	2801      	cmp	r0, #1
   11476:	d103      	bne.n	11480 <__fputwc+0x1c>
   11478:	f108 33ff 	add.w	r3, r8, #4294967295
   1147c:	2bfe      	cmp	r3, #254	; 0xfe
   1147e:	d936      	bls.n	114ee <__fputwc+0x8a>
   11480:	f10d 0904 	add.w	r9, sp, #4
   11484:	4642      	mov	r2, r8
   11486:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1148a:	4649      	mov	r1, r9
   1148c:	4650      	mov	r0, sl
   1148e:	f7fe fd01 	bl	fe94 <_wcrtomb_r>
   11492:	1c42      	adds	r2, r0, #1
   11494:	4606      	mov	r6, r0
   11496:	d032      	beq.n	114fe <__fputwc+0x9a>
   11498:	b320      	cbz	r0, 114e4 <__fputwc+0x80>
   1149a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1149e:	2500      	movs	r5, #0
   114a0:	e009      	b.n	114b6 <__fputwc+0x52>
   114a2:	6823      	ldr	r3, [r4, #0]
   114a4:	1c5a      	adds	r2, r3, #1
   114a6:	6022      	str	r2, [r4, #0]
   114a8:	f883 c000 	strb.w	ip, [r3]
   114ac:	3501      	adds	r5, #1
   114ae:	42b5      	cmp	r5, r6
   114b0:	d218      	bcs.n	114e4 <__fputwc+0x80>
   114b2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   114b6:	68a3      	ldr	r3, [r4, #8]
   114b8:	3b01      	subs	r3, #1
   114ba:	2b00      	cmp	r3, #0
   114bc:	60a3      	str	r3, [r4, #8]
   114be:	daf0      	bge.n	114a2 <__fputwc+0x3e>
   114c0:	69a7      	ldr	r7, [r4, #24]
   114c2:	42bb      	cmp	r3, r7
   114c4:	4661      	mov	r1, ip
   114c6:	4622      	mov	r2, r4
   114c8:	4650      	mov	r0, sl
   114ca:	db02      	blt.n	114d2 <__fputwc+0x6e>
   114cc:	f1bc 0f0a 	cmp.w	ip, #10
   114d0:	d1e7      	bne.n	114a2 <__fputwc+0x3e>
   114d2:	f000 f953 	bl	1177c <__swbuf_r>
   114d6:	1c43      	adds	r3, r0, #1
   114d8:	d1e8      	bne.n	114ac <__fputwc+0x48>
   114da:	4606      	mov	r6, r0
   114dc:	4630      	mov	r0, r6
   114de:	b002      	add	sp, #8
   114e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   114e4:	4646      	mov	r6, r8
   114e6:	4630      	mov	r0, r6
   114e8:	b002      	add	sp, #8
   114ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   114ee:	fa5f fc88 	uxtb.w	ip, r8
   114f2:	f88d c004 	strb.w	ip, [sp, #4]
   114f6:	4606      	mov	r6, r0
   114f8:	f10d 0904 	add.w	r9, sp, #4
   114fc:	e7cf      	b.n	1149e <__fputwc+0x3a>
   114fe:	89a3      	ldrh	r3, [r4, #12]
   11500:	4630      	mov	r0, r6
   11502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11506:	81a3      	strh	r3, [r4, #12]
   11508:	b002      	add	sp, #8
   1150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1150e:	bf00      	nop

00011510 <_fputwc_r>:
   11510:	b530      	push	{r4, r5, lr}
   11512:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11514:	f013 0f01 	tst.w	r3, #1
   11518:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1151c:	4614      	mov	r4, r2
   1151e:	b083      	sub	sp, #12
   11520:	4605      	mov	r5, r0
   11522:	b29a      	uxth	r2, r3
   11524:	d101      	bne.n	1152a <_fputwc_r+0x1a>
   11526:	0598      	lsls	r0, r3, #22
   11528:	d51c      	bpl.n	11564 <_fputwc_r+0x54>
   1152a:	0490      	lsls	r0, r2, #18
   1152c:	d406      	bmi.n	1153c <_fputwc_r+0x2c>
   1152e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   11534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11538:	81a3      	strh	r3, [r4, #12]
   1153a:	6662      	str	r2, [r4, #100]	; 0x64
   1153c:	4622      	mov	r2, r4
   1153e:	4628      	mov	r0, r5
   11540:	f7ff ff90 	bl	11464 <__fputwc>
   11544:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11546:	07da      	lsls	r2, r3, #31
   11548:	4605      	mov	r5, r0
   1154a:	d402      	bmi.n	11552 <_fputwc_r+0x42>
   1154c:	89a3      	ldrh	r3, [r4, #12]
   1154e:	059b      	lsls	r3, r3, #22
   11550:	d502      	bpl.n	11558 <_fputwc_r+0x48>
   11552:	4628      	mov	r0, r5
   11554:	b003      	add	sp, #12
   11556:	bd30      	pop	{r4, r5, pc}
   11558:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1155a:	f7fa fe1d 	bl	c198 <__retarget_lock_release_recursive>
   1155e:	4628      	mov	r0, r5
   11560:	b003      	add	sp, #12
   11562:	bd30      	pop	{r4, r5, pc}
   11564:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11566:	9101      	str	r1, [sp, #4]
   11568:	f7fa fe14 	bl	c194 <__retarget_lock_acquire_recursive>
   1156c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11570:	9901      	ldr	r1, [sp, #4]
   11572:	b29a      	uxth	r2, r3
   11574:	e7d9      	b.n	1152a <_fputwc_r+0x1a>
   11576:	bf00      	nop

00011578 <_wcsnrtombs_l>:
   11578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1157c:	b08b      	sub	sp, #44	; 0x2c
   1157e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   11582:	9f14      	ldr	r7, [sp, #80]	; 0x50
   11584:	9103      	str	r1, [sp, #12]
   11586:	4681      	mov	r9, r0
   11588:	9205      	str	r2, [sp, #20]
   1158a:	461e      	mov	r6, r3
   1158c:	f1b8 0f00 	cmp.w	r8, #0
   11590:	d05c      	beq.n	1164c <_wcsnrtombs_l+0xd4>
   11592:	9b03      	ldr	r3, [sp, #12]
   11594:	2b00      	cmp	r3, #0
   11596:	d05e      	beq.n	11656 <_wcsnrtombs_l+0xde>
   11598:	9b05      	ldr	r3, [sp, #20]
   1159a:	681d      	ldr	r5, [r3, #0]
   1159c:	2f00      	cmp	r7, #0
   1159e:	d06a      	beq.n	11676 <_wcsnrtombs_l+0xfe>
   115a0:	1e74      	subs	r4, r6, #1
   115a2:	b34e      	cbz	r6, 115f8 <_wcsnrtombs_l+0x80>
   115a4:	9b03      	ldr	r3, [sp, #12]
   115a6:	9304      	str	r3, [sp, #16]
   115a8:	3d04      	subs	r5, #4
   115aa:	2600      	movs	r6, #0
   115ac:	9501      	str	r5, [sp, #4]
   115ae:	e00b      	b.n	115c8 <_wcsnrtombs_l+0x50>
   115b0:	9b03      	ldr	r3, [sp, #12]
   115b2:	bb2b      	cbnz	r3, 11600 <_wcsnrtombs_l+0x88>
   115b4:	9b01      	ldr	r3, [sp, #4]
   115b6:	681a      	ldr	r2, [r3, #0]
   115b8:	2a00      	cmp	r2, #0
   115ba:	d03a      	beq.n	11632 <_wcsnrtombs_l+0xba>
   115bc:	45bc      	cmp	ip, r7
   115be:	d25c      	bcs.n	1167a <_wcsnrtombs_l+0x102>
   115c0:	3c01      	subs	r4, #1
   115c2:	1c63      	adds	r3, r4, #1
   115c4:	4666      	mov	r6, ip
   115c6:	d017      	beq.n	115f8 <_wcsnrtombs_l+0x80>
   115c8:	f8d8 3000 	ldr.w	r3, [r8]
   115cc:	9302      	str	r3, [sp, #8]
   115ce:	9b01      	ldr	r3, [sp, #4]
   115d0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   115d4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   115d8:	9301      	str	r3, [sp, #4]
   115da:	a907      	add	r1, sp, #28
   115dc:	4643      	mov	r3, r8
   115de:	4648      	mov	r0, r9
   115e0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   115e4:	47a8      	blx	r5
   115e6:	1c42      	adds	r2, r0, #1
   115e8:	d03a      	beq.n	11660 <_wcsnrtombs_l+0xe8>
   115ea:	eb00 0c06 	add.w	ip, r0, r6
   115ee:	45bc      	cmp	ip, r7
   115f0:	d9de      	bls.n	115b0 <_wcsnrtombs_l+0x38>
   115f2:	9b02      	ldr	r3, [sp, #8]
   115f4:	e9c8 3b00 	strd	r3, fp, [r8]
   115f8:	4630      	mov	r0, r6
   115fa:	b00b      	add	sp, #44	; 0x2c
   115fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11600:	2800      	cmp	r0, #0
   11602:	dd0e      	ble.n	11622 <_wcsnrtombs_l+0xaa>
   11604:	9b04      	ldr	r3, [sp, #16]
   11606:	9d01      	ldr	r5, [sp, #4]
   11608:	4418      	add	r0, r3
   1160a:	1e5a      	subs	r2, r3, #1
   1160c:	a907      	add	r1, sp, #28
   1160e:	f100 3eff 	add.w	lr, r0, #4294967295
   11612:	f811 3b01 	ldrb.w	r3, [r1], #1
   11616:	f802 3f01 	strb.w	r3, [r2, #1]!
   1161a:	4572      	cmp	r2, lr
   1161c:	d1f9      	bne.n	11612 <_wcsnrtombs_l+0x9a>
   1161e:	9501      	str	r5, [sp, #4]
   11620:	9004      	str	r0, [sp, #16]
   11622:	9b05      	ldr	r3, [sp, #20]
   11624:	681a      	ldr	r2, [r3, #0]
   11626:	3204      	adds	r2, #4
   11628:	601a      	str	r2, [r3, #0]
   1162a:	9b01      	ldr	r3, [sp, #4]
   1162c:	681a      	ldr	r2, [r3, #0]
   1162e:	2a00      	cmp	r2, #0
   11630:	d1c4      	bne.n	115bc <_wcsnrtombs_l+0x44>
   11632:	9b03      	ldr	r3, [sp, #12]
   11634:	b10b      	cbz	r3, 1163a <_wcsnrtombs_l+0xc2>
   11636:	9b05      	ldr	r3, [sp, #20]
   11638:	601a      	str	r2, [r3, #0]
   1163a:	f10c 36ff 	add.w	r6, ip, #4294967295
   1163e:	2200      	movs	r2, #0
   11640:	4630      	mov	r0, r6
   11642:	f8c8 2000 	str.w	r2, [r8]
   11646:	b00b      	add	sp, #44	; 0x2c
   11648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1164c:	9b03      	ldr	r3, [sp, #12]
   1164e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   11652:	2b00      	cmp	r3, #0
   11654:	d1a0      	bne.n	11598 <_wcsnrtombs_l+0x20>
   11656:	9b05      	ldr	r3, [sp, #20]
   11658:	f04f 37ff 	mov.w	r7, #4294967295
   1165c:	681d      	ldr	r5, [r3, #0]
   1165e:	e79f      	b.n	115a0 <_wcsnrtombs_l+0x28>
   11660:	4606      	mov	r6, r0
   11662:	218a      	movs	r1, #138	; 0x8a
   11664:	2200      	movs	r2, #0
   11666:	4630      	mov	r0, r6
   11668:	f8c9 1000 	str.w	r1, [r9]
   1166c:	f8c8 2000 	str.w	r2, [r8]
   11670:	b00b      	add	sp, #44	; 0x2c
   11672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11676:	463e      	mov	r6, r7
   11678:	e7be      	b.n	115f8 <_wcsnrtombs_l+0x80>
   1167a:	4666      	mov	r6, ip
   1167c:	e7bc      	b.n	115f8 <_wcsnrtombs_l+0x80>
   1167e:	bf00      	nop

00011680 <_wcsnrtombs_r>:
   11680:	b510      	push	{r4, lr}
   11682:	b084      	sub	sp, #16
   11684:	4c05      	ldr	r4, [pc, #20]	; (1169c <_wcsnrtombs_r+0x1c>)
   11686:	9806      	ldr	r0, [sp, #24]
   11688:	9000      	str	r0, [sp, #0]
   1168a:	9807      	ldr	r0, [sp, #28]
   1168c:	9001      	str	r0, [sp, #4]
   1168e:	4804      	ldr	r0, [pc, #16]	; (116a0 <_wcsnrtombs_r+0x20>)
   11690:	6800      	ldr	r0, [r0, #0]
   11692:	9402      	str	r4, [sp, #8]
   11694:	f7ff ff70 	bl	11578 <_wcsnrtombs_l>
   11698:	b004      	add	sp, #16
   1169a:	bd10      	pop	{r4, pc}
   1169c:	20004414 	.word	0x20004414
   116a0:	2000499c 	.word	0x2000499c

000116a4 <__smakebuf_r>:
   116a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116a8:	898b      	ldrh	r3, [r1, #12]
   116aa:	460c      	mov	r4, r1
   116ac:	0799      	lsls	r1, r3, #30
   116ae:	b096      	sub	sp, #88	; 0x58
   116b0:	d508      	bpl.n	116c4 <__smakebuf_r+0x20>
   116b2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   116b6:	2201      	movs	r2, #1
   116b8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   116bc:	6023      	str	r3, [r4, #0]
   116be:	b016      	add	sp, #88	; 0x58
   116c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   116c8:	2900      	cmp	r1, #0
   116ca:	4606      	mov	r6, r0
   116cc:	db25      	blt.n	1171a <__smakebuf_r+0x76>
   116ce:	466a      	mov	r2, sp
   116d0:	f000 f8ac 	bl	1182c <_fstat_r>
   116d4:	2800      	cmp	r0, #0
   116d6:	db1f      	blt.n	11718 <__smakebuf_r+0x74>
   116d8:	9d01      	ldr	r5, [sp, #4]
   116da:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   116de:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   116e2:	fab5 f585 	clz	r5, r5
   116e6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   116ea:	096d      	lsrs	r5, r5, #5
   116ec:	f44f 6700 	mov.w	r7, #2048	; 0x800
   116f0:	4641      	mov	r1, r8
   116f2:	4630      	mov	r0, r6
   116f4:	f7f9 fb82 	bl	adfc <_malloc_r>
   116f8:	b1e0      	cbz	r0, 11734 <__smakebuf_r+0x90>
   116fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   116fe:	f8c4 8014 	str.w	r8, [r4, #20]
   11702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11706:	6020      	str	r0, [r4, #0]
   11708:	6120      	str	r0, [r4, #16]
   1170a:	81a3      	strh	r3, [r4, #12]
   1170c:	bb35      	cbnz	r5, 1175c <__smakebuf_r+0xb8>
   1170e:	433b      	orrs	r3, r7
   11710:	81a3      	strh	r3, [r4, #12]
   11712:	b016      	add	sp, #88	; 0x58
   11714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11718:	89a3      	ldrh	r3, [r4, #12]
   1171a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1171e:	d019      	beq.n	11754 <__smakebuf_r+0xb0>
   11720:	f04f 0840 	mov.w	r8, #64	; 0x40
   11724:	2500      	movs	r5, #0
   11726:	4641      	mov	r1, r8
   11728:	4630      	mov	r0, r6
   1172a:	462f      	mov	r7, r5
   1172c:	f7f9 fb66 	bl	adfc <_malloc_r>
   11730:	2800      	cmp	r0, #0
   11732:	d1e2      	bne.n	116fa <__smakebuf_r+0x56>
   11734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11738:	059a      	lsls	r2, r3, #22
   1173a:	d4c0      	bmi.n	116be <__smakebuf_r+0x1a>
   1173c:	f023 0303 	bic.w	r3, r3, #3
   11740:	f104 0243 	add.w	r2, r4, #67	; 0x43
   11744:	f043 0302 	orr.w	r3, r3, #2
   11748:	2101      	movs	r1, #1
   1174a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1174e:	81a3      	strh	r3, [r4, #12]
   11750:	6022      	str	r2, [r4, #0]
   11752:	e7b4      	b.n	116be <__smakebuf_r+0x1a>
   11754:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11758:	462f      	mov	r7, r5
   1175a:	e7c9      	b.n	116f0 <__smakebuf_r+0x4c>
   1175c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11760:	4630      	mov	r0, r6
   11762:	f000 f879 	bl	11858 <_isatty_r>
   11766:	b910      	cbnz	r0, 1176e <__smakebuf_r+0xca>
   11768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1176c:	e7cf      	b.n	1170e <__smakebuf_r+0x6a>
   1176e:	89a3      	ldrh	r3, [r4, #12]
   11770:	f023 0303 	bic.w	r3, r3, #3
   11774:	f043 0301 	orr.w	r3, r3, #1
   11778:	b21b      	sxth	r3, r3
   1177a:	e7c8      	b.n	1170e <__smakebuf_r+0x6a>

0001177c <__swbuf_r>:
   1177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1177e:	460d      	mov	r5, r1
   11780:	4614      	mov	r4, r2
   11782:	4606      	mov	r6, r0
   11784:	b110      	cbz	r0, 1178c <__swbuf_r+0x10>
   11786:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11788:	2b00      	cmp	r3, #0
   1178a:	d04c      	beq.n	11826 <__swbuf_r+0xaa>
   1178c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11790:	69a3      	ldr	r3, [r4, #24]
   11792:	60a3      	str	r3, [r4, #8]
   11794:	0717      	lsls	r7, r2, #28
   11796:	b290      	uxth	r0, r2
   11798:	d51b      	bpl.n	117d2 <__swbuf_r+0x56>
   1179a:	6923      	ldr	r3, [r4, #16]
   1179c:	b1cb      	cbz	r3, 117d2 <__swbuf_r+0x56>
   1179e:	b2ed      	uxtb	r5, r5
   117a0:	0481      	lsls	r1, r0, #18
   117a2:	462f      	mov	r7, r5
   117a4:	d522      	bpl.n	117ec <__swbuf_r+0x70>
   117a6:	6822      	ldr	r2, [r4, #0]
   117a8:	6961      	ldr	r1, [r4, #20]
   117aa:	1ad3      	subs	r3, r2, r3
   117ac:	4299      	cmp	r1, r3
   117ae:	dd29      	ble.n	11804 <__swbuf_r+0x88>
   117b0:	3301      	adds	r3, #1
   117b2:	68a1      	ldr	r1, [r4, #8]
   117b4:	3901      	subs	r1, #1
   117b6:	60a1      	str	r1, [r4, #8]
   117b8:	1c51      	adds	r1, r2, #1
   117ba:	6021      	str	r1, [r4, #0]
   117bc:	7015      	strb	r5, [r2, #0]
   117be:	6962      	ldr	r2, [r4, #20]
   117c0:	429a      	cmp	r2, r3
   117c2:	d027      	beq.n	11814 <__swbuf_r+0x98>
   117c4:	89a3      	ldrh	r3, [r4, #12]
   117c6:	07db      	lsls	r3, r3, #31
   117c8:	d501      	bpl.n	117ce <__swbuf_r+0x52>
   117ca:	2d0a      	cmp	r5, #10
   117cc:	d022      	beq.n	11814 <__swbuf_r+0x98>
   117ce:	4638      	mov	r0, r7
   117d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117d2:	4621      	mov	r1, r4
   117d4:	4630      	mov	r0, r6
   117d6:	f7ff fddf 	bl	11398 <__swsetup_r>
   117da:	bb08      	cbnz	r0, 11820 <__swbuf_r+0xa4>
   117dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   117e0:	6923      	ldr	r3, [r4, #16]
   117e2:	b290      	uxth	r0, r2
   117e4:	b2ed      	uxtb	r5, r5
   117e6:	0481      	lsls	r1, r0, #18
   117e8:	462f      	mov	r7, r5
   117ea:	d4dc      	bmi.n	117a6 <__swbuf_r+0x2a>
   117ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   117f0:	81a2      	strh	r2, [r4, #12]
   117f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   117f4:	6961      	ldr	r1, [r4, #20]
   117f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   117fa:	6662      	str	r2, [r4, #100]	; 0x64
   117fc:	6822      	ldr	r2, [r4, #0]
   117fe:	1ad3      	subs	r3, r2, r3
   11800:	4299      	cmp	r1, r3
   11802:	dcd5      	bgt.n	117b0 <__swbuf_r+0x34>
   11804:	4621      	mov	r1, r4
   11806:	4630      	mov	r0, r6
   11808:	f7fd fb20 	bl	ee4c <_fflush_r>
   1180c:	b940      	cbnz	r0, 11820 <__swbuf_r+0xa4>
   1180e:	6822      	ldr	r2, [r4, #0]
   11810:	2301      	movs	r3, #1
   11812:	e7ce      	b.n	117b2 <__swbuf_r+0x36>
   11814:	4621      	mov	r1, r4
   11816:	4630      	mov	r0, r6
   11818:	f7fd fb18 	bl	ee4c <_fflush_r>
   1181c:	2800      	cmp	r0, #0
   1181e:	d0d6      	beq.n	117ce <__swbuf_r+0x52>
   11820:	f04f 37ff 	mov.w	r7, #4294967295
   11824:	e7d3      	b.n	117ce <__swbuf_r+0x52>
   11826:	f7fa fa01 	bl	bc2c <__sinit>
   1182a:	e7af      	b.n	1178c <__swbuf_r+0x10>

0001182c <_fstat_r>:
   1182c:	b570      	push	{r4, r5, r6, lr}
   1182e:	460c      	mov	r4, r1
   11830:	4d08      	ldr	r5, [pc, #32]	; (11854 <_fstat_r+0x28>)
   11832:	4603      	mov	r3, r0
   11834:	2600      	movs	r6, #0
   11836:	4620      	mov	r0, r4
   11838:	4611      	mov	r1, r2
   1183a:	461c      	mov	r4, r3
   1183c:	602e      	str	r6, [r5, #0]
   1183e:	f7f7 fec3 	bl	95c8 <_fstat>
   11842:	1c43      	adds	r3, r0, #1
   11844:	d000      	beq.n	11848 <_fstat_r+0x1c>
   11846:	bd70      	pop	{r4, r5, r6, pc}
   11848:	682b      	ldr	r3, [r5, #0]
   1184a:	2b00      	cmp	r3, #0
   1184c:	d0fb      	beq.n	11846 <_fstat_r+0x1a>
   1184e:	6023      	str	r3, [r4, #0]
   11850:	bd70      	pop	{r4, r5, r6, pc}
   11852:	bf00      	nop
   11854:	200053dc 	.word	0x200053dc

00011858 <_isatty_r>:
   11858:	b538      	push	{r3, r4, r5, lr}
   1185a:	4d07      	ldr	r5, [pc, #28]	; (11878 <_isatty_r+0x20>)
   1185c:	2200      	movs	r2, #0
   1185e:	4604      	mov	r4, r0
   11860:	4608      	mov	r0, r1
   11862:	602a      	str	r2, [r5, #0]
   11864:	f7f7 feb6 	bl	95d4 <_isatty>
   11868:	1c43      	adds	r3, r0, #1
   1186a:	d000      	beq.n	1186e <_isatty_r+0x16>
   1186c:	bd38      	pop	{r3, r4, r5, pc}
   1186e:	682b      	ldr	r3, [r5, #0]
   11870:	2b00      	cmp	r3, #0
   11872:	d0fb      	beq.n	1186c <_isatty_r+0x14>
   11874:	6023      	str	r3, [r4, #0]
   11876:	bd38      	pop	{r3, r4, r5, pc}
   11878:	200053dc 	.word	0x200053dc
   1187c:	00000000 	.word	0x00000000

00011880 <___reboot_Teensyduino__veneer>:
   11880:	f85f f000 	ldr.w	pc, [pc]	; 11884 <___reboot_Teensyduino__veneer+0x4>
   11884:	60001d55 	.word	0x60001d55

00011888 <___init_veneer>:
   11888:	f85f f000 	ldr.w	pc, [pc]	; 1188c <___init_veneer+0x4>
   1188c:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

00011890 <_fini>:
   11890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11892:	bf00      	nop
